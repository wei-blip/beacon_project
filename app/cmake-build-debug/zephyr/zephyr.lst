
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20 2f 00 20 d9 5d 00 08 91 e5 00 08 91 5d 00 08      /. .].......]..
 8000010:	91 5d 00 08 91 5d 00 08 91 5d 00 08 00 00 00 00     .]...]...]......
	...
 800002c:	dd 50 00 08 91 5d 00 08 00 00 00 00 89 50 00 08     .P...].......P..
 800003c:	79 9a 00 08                                         y...

08000040 <_irq_vector_table>:
 8000040:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000050:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000060:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000070:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000080:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000090:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000a0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000b0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000c0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000d0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000e0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 80000f0:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000100:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000110:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000120:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000130:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000140:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000150:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000160:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000170:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000180:	b5 51 00 08 b5 51 00 08 b5 51 00 08 b5 51 00 08     .Q...Q...Q...Q..
 8000190:	b5 51 00 08                                         .Q..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	4605      	mov	r5, r0
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000e6e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000e70:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000e72:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000e74:	f00e fcc7 	bl	800f806 <z_device_is_ready>
 8000e78:	b150      	cbz	r0, 8000e90 <ws2812_pwm_init+0x28>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	7e22      	ldrb	r2, [r4, #24]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d222      	bcs.n	8000ec8 <ws2812_pwm_init+0x60>
        switch (cfg->color_mapping[i]) {
 8000e82:	69e2      	ldr	r2, [r4, #28]
 8000e84:	5cd2      	ldrb	r2, [r2, r3]
 8000e86:	2a03      	cmp	r2, #3
 8000e88:	d810      	bhi.n	8000eac <ws2812_pwm_init+0x44>
    for (i = 0; i < cfg->num_colors; i++) {
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e7f5      	b.n	8000e7c <ws2812_pwm_init+0x14>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <ws2812_pwm_init+0xd0>)
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9000      	str	r0, [sp, #0]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ea2:	f00e fca3 	bl	800f7ec <z_log_msg2_runtime_create>
        return -ENODEV;
 8000ea6:	f06f 0012 	mvn.w	r0, #18
 8000eaa:	e03d      	b.n	8000f28 <ws2812_pwm_init+0xc0>
            case LED_COLOR_ID_RED:
            case LED_COLOR_ID_GREEN:
            case LED_COLOR_ID_BLUE:
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <ws2812_pwm_init+0xd8>)
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	9000      	str	r0, [sp, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ebe:	f00e fc95 	bl	800f7ec <z_log_msg2_runtime_create>
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ec2:	f06f 0015 	mvn.w	r0, #21
 8000ec6:	e02f      	b.n	8000f28 <ws2812_pwm_init+0xc0>
        }
    }

    uint64_t cycles_per_sec;
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	6861      	ldr	r1, [r4, #4]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
 8000ecc:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	aa04      	add	r2, sp, #16
 8000ed2:	4798      	blx	r3

    ctx->pwm_period_cycles = (uint32_t)
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ed4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8000ed6:	9804      	ldr	r0, [sp, #16]
 8000ed8:	fba0 0105 	umull	r0, r1, r0, r5
 8000edc:	a314      	add	r3, pc, #80	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000ee6:	fb05 110c 	mla	r1, r5, ip, r1
 8000eea:	f7ff fd77 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_period_cycles = (uint32_t)
 8000eee:	6030      	str	r0, [r6, #0]
    ctx->pwm_t0h_cycles = (uint32_t)
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ef0:	8c25      	ldrh	r5, [r4, #32]
 8000ef2:	9804      	ldr	r0, [sp, #16]
 8000ef4:	fba0 0105 	umull	r0, r1, r0, r5
 8000ef8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000f02:	fb05 110c 	mla	r1, r5, ip, r1
 8000f06:	f7ff fd69 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f0a:	6070      	str	r0, [r6, #4]
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f0c:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8000f0e:	9804      	ldr	r0, [sp, #16]
 8000f10:	fba0 0104 	umull	r0, r1, r0, r4
 8000f14:	a306      	add	r3, pc, #24	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	9d05      	ldr	r5, [sp, #20]
 8000f1c:	fb04 1105 	mla	r1, r4, r5, r1
 8000f20:	f7ff fd5c 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f24:	60b0      	str	r0, [r6, #8]

    return 0;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	3b9aca00 	.word	0x3b9aca00
 8000f34:	00000000 	.word	0x00000000
 8000f38:	08011f00 	.word	0x08011f00
 8000f3c:	08010bd0 	.word	0x08010bd0
 8000f40:	08011f1c 	.word	0x08011f1c
 8000f44:	00000000 	.word	0x00000000

08000f48 <_dtoa_r>:
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f4e:	b099      	sub	sp, #100	; 0x64
 8000f50:	4616      	mov	r6, r2
 8000f52:	461f      	mov	r7, r3
 8000f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000f58:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	b974      	cbnz	r4, 8000f7e <_dtoa_r+0x36>
 8000f60:	2010      	movs	r0, #16
 8000f62:	f00b fa33 	bl	800c3cc <malloc>
 8000f66:	4602      	mov	r2, r0
 8000f68:	6268      	str	r0, [r5, #36]	; 0x24
 8000f6a:	b920      	cbnz	r0, 8000f76 <_dtoa_r+0x2e>
 8000f6c:	4ba8      	ldr	r3, [pc, #672]	; (8001210 <_dtoa_r+0x2c8>)
 8000f6e:	21ea      	movs	r1, #234	; 0xea
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <_dtoa_r+0x2cc>)
 8000f72:	f00c f95b 	bl	800d22c <__assert_func>
 8000f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000f7a:	6004      	str	r4, [r0, #0]
 8000f7c:	60c4      	str	r4, [r0, #12]
 8000f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	b151      	cbz	r1, 8000f9a <_dtoa_r+0x52>
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	604a      	str	r2, [r1, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f00b fe78 	bl	800cc84 <_Bfree>
 8000f94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	1e3b      	subs	r3, r7, #0
 8000f9c:	bfb9      	ittee	lt
 8000f9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	9305      	strlt	r3, [sp, #20]
 8000fa4:	2300      	movge	r3, #0
 8000fa6:	f8c8 3000 	strge.w	r3, [r8]
 8000faa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000fae:	4b9a      	ldr	r3, [pc, #616]	; (8001218 <_dtoa_r+0x2d0>)
 8000fb0:	bfbc      	itt	lt
 8000fb2:	2201      	movlt	r2, #1
 8000fb4:	f8c8 2000 	strlt.w	r2, [r8]
 8000fb8:	ea33 0309 	bics.w	r3, r3, r9
 8000fbc:	d119      	bne.n	8000ff2 <_dtoa_r+0xaa>
 8000fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000fca:	4333      	orrs	r3, r6
 8000fcc:	f000 8580 	beq.w	8001ad0 <_dtoa_r+0xb88>
 8000fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000fd2:	b953      	cbnz	r3, 8000fea <_dtoa_r+0xa2>
 8000fd4:	4b91      	ldr	r3, [pc, #580]	; (800121c <_dtoa_r+0x2d4>)
 8000fd6:	e022      	b.n	800101e <_dtoa_r+0xd6>
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <_dtoa_r+0x2d8>)
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	9803      	ldr	r0, [sp, #12]
 8000fe4:	b019      	add	sp, #100	; 0x64
 8000fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <_dtoa_r+0x2d4>)
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	e7f5      	b.n	8000fde <_dtoa_r+0x96>
 8000ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000ff6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	2300      	movs	r3, #0
 8001002:	f7ff fd5b 	bl	8000abc <__aeabi_dcmpeq>
 8001006:	4680      	mov	r8, r0
 8001008:	b158      	cbz	r0, 8001022 <_dtoa_r+0xda>
 800100a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800100c:	2301      	movs	r3, #1
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8559 	beq.w	8001aca <_dtoa_r+0xb82>
 8001018:	4882      	ldr	r0, [pc, #520]	; (8001224 <_dtoa_r+0x2dc>)
 800101a:	6018      	str	r0, [r3, #0]
 800101c:	1e43      	subs	r3, r0, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e7df      	b.n	8000fe2 <_dtoa_r+0x9a>
 8001022:	ab16      	add	r3, sp, #88	; 0x58
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	ab17      	add	r3, sp, #92	; 0x5c
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4628      	mov	r0, r5
 800102c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001030:	f00c f8a0 	bl	800d174 <__d2b>
 8001034:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001038:	4683      	mov	fp, r0
 800103a:	2c00      	cmp	r4, #0
 800103c:	d07e      	beq.n	800113c <_dtoa_r+0x1f4>
 800103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001040:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800104c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001050:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001054:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <_dtoa_r+0x2e0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f7ff f8f4 	bl	8000248 <__aeabi_dsub>
 8001060:	a365      	add	r3, pc, #404	; (adr r3, 80011f8 <_dtoa_r+0x2b0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faa7 	bl	80005b8 <__aeabi_dmul>
 800106a:	a365      	add	r3, pc, #404	; (adr r3, 8001200 <_dtoa_r+0x2b8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff f8ec 	bl	800024c <__adddf3>
 8001074:	4606      	mov	r6, r0
 8001076:	4620      	mov	r0, r4
 8001078:	460f      	mov	r7, r1
 800107a:	f7ff fa33 	bl	80004e4 <__aeabi_i2d>
 800107e:	a362      	add	r3, pc, #392	; (adr r3, 8001208 <_dtoa_r+0x2c0>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa98 	bl	80005b8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f8dc 	bl	800024c <__adddf3>
 8001094:	4606      	mov	r6, r0
 8001096:	460f      	mov	r7, r1
 8001098:	f7ff fd58 	bl	8000b4c <__aeabi_d2iz>
 800109c:	2200      	movs	r2, #0
 800109e:	4682      	mov	sl, r0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4630      	mov	r0, r6
 80010a4:	4639      	mov	r1, r7
 80010a6:	f7ff fd13 	bl	8000ad0 <__aeabi_dcmplt>
 80010aa:	b148      	cbz	r0, 80010c0 <_dtoa_r+0x178>
 80010ac:	4650      	mov	r0, sl
 80010ae:	f7ff fa19 	bl	80004e4 <__aeabi_i2d>
 80010b2:	4632      	mov	r2, r6
 80010b4:	463b      	mov	r3, r7
 80010b6:	f7ff fd01 	bl	8000abc <__aeabi_dcmpeq>
 80010ba:	b908      	cbnz	r0, 80010c0 <_dtoa_r+0x178>
 80010bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010c0:	f1ba 0f16 	cmp.w	sl, #22
 80010c4:	d857      	bhi.n	8001176 <_dtoa_r+0x22e>
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <_dtoa_r+0x2e4>)
 80010c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010d4:	f7ff fcfc 	bl	8000ad0 <__aeabi_dcmplt>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04e      	beq.n	800117a <_dtoa_r+0x232>
 80010dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010e0:	2300      	movs	r3, #0
 80010e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80010e6:	1b1c      	subs	r4, r3, r4
 80010e8:	1e63      	subs	r3, r4, #1
 80010ea:	9309      	str	r3, [sp, #36]	; 0x24
 80010ec:	bf45      	ittet	mi
 80010ee:	f1c4 0301 	rsbmi	r3, r4, #1
 80010f2:	9306      	strmi	r3, [sp, #24]
 80010f4:	2300      	movpl	r3, #0
 80010f6:	2300      	movmi	r3, #0
 80010f8:	bf4c      	ite	mi
 80010fa:	9309      	strmi	r3, [sp, #36]	; 0x24
 80010fc:	9306      	strpl	r3, [sp, #24]
 80010fe:	f1ba 0f00 	cmp.w	sl, #0
 8001102:	db3c      	blt.n	800117e <_dtoa_r+0x236>
 8001104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001106:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800110a:	4453      	add	r3, sl
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
 800110e:	2300      	movs	r3, #0
 8001110:	930a      	str	r3, [sp, #40]	; 0x28
 8001112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001114:	2b09      	cmp	r3, #9
 8001116:	f200 808d 	bhi.w	8001234 <_dtoa_r+0x2ec>
 800111a:	2b05      	cmp	r3, #5
 800111c:	bfc4      	itt	gt
 800111e:	3b04      	subgt	r3, #4
 8001120:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001124:	f1a3 0302 	sub.w	r3, r3, #2
 8001128:	bfcc      	ite	gt
 800112a:	2400      	movgt	r4, #0
 800112c:	2401      	movle	r4, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	f200 808c 	bhi.w	800124c <_dtoa_r+0x304>
 8001134:	e8df f003 	tbb	[pc, r3]
 8001138:	5b4d4f2d 	.word	0x5b4d4f2d
 800113c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001140:	441c      	add	r4, r3
 8001142:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001146:	2b20      	cmp	r3, #32
 8001148:	bfc3      	ittte	gt
 800114a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800114e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001152:	fa09 f303 	lslgt.w	r3, r9, r3
 8001156:	f1c3 0320 	rsble	r3, r3, #32
 800115a:	bfc6      	itte	gt
 800115c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001160:	4318      	orrgt	r0, r3
 8001162:	fa06 f003 	lslle.w	r0, r6, r3
 8001166:	f7ff f9ad 	bl	80004c4 <__aeabi_ui2d>
 800116a:	2301      	movs	r3, #1
 800116c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001170:	3c01      	subs	r4, #1
 8001172:	9313      	str	r3, [sp, #76]	; 0x4c
 8001174:	e770      	b.n	8001058 <_dtoa_r+0x110>
 8001176:	2301      	movs	r3, #1
 8001178:	e7b3      	b.n	80010e2 <_dtoa_r+0x19a>
 800117a:	900f      	str	r0, [sp, #60]	; 0x3c
 800117c:	e7b2      	b.n	80010e4 <_dtoa_r+0x19c>
 800117e:	9b06      	ldr	r3, [sp, #24]
 8001180:	eba3 030a 	sub.w	r3, r3, sl
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	f1ca 0300 	rsb	r3, sl, #0
 800118a:	930a      	str	r3, [sp, #40]	; 0x28
 800118c:	2300      	movs	r3, #0
 800118e:	930e      	str	r3, [sp, #56]	; 0x38
 8001190:	e7bf      	b.n	8001112 <_dtoa_r+0x1ca>
 8001192:	2300      	movs	r3, #0
 8001194:	930b      	str	r3, [sp, #44]	; 0x2c
 8001196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc5a      	bgt.n	8001252 <_dtoa_r+0x30a>
 800119c:	f04f 0901 	mov.w	r9, #1
 80011a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80011a4:	464b      	mov	r3, r9
 80011a6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80011aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	6042      	str	r2, [r0, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	f102 0614 	add.w	r6, r2, #20
 80011b6:	429e      	cmp	r6, r3
 80011b8:	6841      	ldr	r1, [r0, #4]
 80011ba:	d950      	bls.n	800125e <_dtoa_r+0x316>
 80011bc:	4628      	mov	r0, r5
 80011be:	f00b fd21 	bl	800cc04 <_Balloc>
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d14e      	bne.n	8001266 <_dtoa_r+0x31e>
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <_dtoa_r+0x2e8>)
 80011ca:	4602      	mov	r2, r0
 80011cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011d0:	e6ce      	b.n	8000f70 <_dtoa_r+0x28>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e7de      	b.n	8001194 <_dtoa_r+0x24c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80011da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011dc:	eb0a 0903 	add.w	r9, sl, r3
 80011e0:	f109 0301 	add.w	r3, r9, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	bfb8      	it	lt
 80011ea:	2301      	movlt	r3, #1
 80011ec:	e7dd      	b.n	80011aa <_dtoa_r+0x262>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e7f2      	b.n	80011d8 <_dtoa_r+0x290>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	636f4361 	.word	0x636f4361
 80011fc:	3fd287a7 	.word	0x3fd287a7
 8001200:	8b60c8b3 	.word	0x8b60c8b3
 8001204:	3fc68a28 	.word	0x3fc68a28
 8001208:	509f79fb 	.word	0x509f79fb
 800120c:	3fd34413 	.word	0x3fd34413
 8001210:	08012346 	.word	0x08012346
 8001214:	0801235d 	.word	0x0801235d
 8001218:	7ff00000 	.word	0x7ff00000
 800121c:	08012342 	.word	0x08012342
 8001220:	08012339 	.word	0x08012339
 8001224:	08012316 	.word	0x08012316
 8001228:	3ff80000 	.word	0x3ff80000
 800122c:	08010cc0 	.word	0x08010cc0
 8001230:	080123b7 	.word	0x080123b7
 8001234:	2401      	movs	r4, #1
 8001236:	2300      	movs	r3, #0
 8001238:	9322      	str	r3, [sp, #136]	; 0x88
 800123a:	940b      	str	r4, [sp, #44]	; 0x2c
 800123c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001240:	2200      	movs	r2, #0
 8001242:	f8cd 9020 	str.w	r9, [sp, #32]
 8001246:	2312      	movs	r3, #18
 8001248:	9223      	str	r2, [sp, #140]	; 0x8c
 800124a:	e7ae      	b.n	80011aa <_dtoa_r+0x262>
 800124c:	2301      	movs	r3, #1
 800124e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001250:	e7f4      	b.n	800123c <_dtoa_r+0x2f4>
 8001252:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001256:	f8cd 9020 	str.w	r9, [sp, #32]
 800125a:	464b      	mov	r3, r9
 800125c:	e7a5      	b.n	80011aa <_dtoa_r+0x262>
 800125e:	3101      	adds	r1, #1
 8001260:	6041      	str	r1, [r0, #4]
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	e7a5      	b.n	80011b2 <_dtoa_r+0x26a>
 8001266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001268:	9a03      	ldr	r2, [sp, #12]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	9b08      	ldr	r3, [sp, #32]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	f200 80a8 	bhi.w	80013c4 <_dtoa_r+0x47c>
 8001274:	2c00      	cmp	r4, #0
 8001276:	f000 80a5 	beq.w	80013c4 <_dtoa_r+0x47c>
 800127a:	f1ba 0f00 	cmp.w	sl, #0
 800127e:	dd34      	ble.n	80012ea <_dtoa_r+0x3a2>
 8001280:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <_dtoa_r+0x5a4>)
 8001282:	f00a 030f 	and.w	r3, sl, #15
 8001286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800128a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800128e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001296:	ea4f 142a 	mov.w	r4, sl, asr #4
 800129a:	d016      	beq.n	80012ca <_dtoa_r+0x382>
 800129c:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <_dtoa_r+0x5a8>)
 800129e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012a6:	f7ff fab1 	bl	800080c <__aeabi_ddiv>
 80012aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012ae:	f004 040f 	and.w	r4, r4, #15
 80012b2:	2703      	movs	r7, #3
 80012b4:	4e8e      	ldr	r6, [pc, #568]	; (80014f0 <_dtoa_r+0x5a8>)
 80012b6:	b954      	cbnz	r4, 80012ce <_dtoa_r+0x386>
 80012b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012c0:	f7ff faa4 	bl	800080c <__aeabi_ddiv>
 80012c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012c8:	e029      	b.n	800131e <_dtoa_r+0x3d6>
 80012ca:	2702      	movs	r7, #2
 80012cc:	e7f2      	b.n	80012b4 <_dtoa_r+0x36c>
 80012ce:	07e1      	lsls	r1, r4, #31
 80012d0:	d508      	bpl.n	80012e4 <_dtoa_r+0x39c>
 80012d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012da:	f7ff f96d 	bl	80005b8 <__aeabi_dmul>
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	3701      	adds	r7, #1
 80012e4:	1064      	asrs	r4, r4, #1
 80012e6:	3608      	adds	r6, #8
 80012e8:	e7e5      	b.n	80012b6 <_dtoa_r+0x36e>
 80012ea:	f000 80a5 	beq.w	8001438 <_dtoa_r+0x4f0>
 80012ee:	f1ca 0400 	rsb	r4, sl, #0
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <_dtoa_r+0x5a4>)
 80012f4:	4e7e      	ldr	r6, [pc, #504]	; (80014f0 <_dtoa_r+0x5a8>)
 80012f6:	f004 020f 	and.w	r2, r4, #15
 80012fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001306:	f7ff f957 	bl	80005b8 <__aeabi_dmul>
 800130a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800130e:	1124      	asrs	r4, r4, #4
 8001310:	2300      	movs	r3, #0
 8001312:	2702      	movs	r7, #2
 8001314:	2c00      	cmp	r4, #0
 8001316:	f040 8084 	bne.w	8001422 <_dtoa_r+0x4da>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d2      	bne.n	80012c4 <_dtoa_r+0x37c>
 800131e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808b 	beq.w	800143c <_dtoa_r+0x4f4>
 8001326:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800132a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800132e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <_dtoa_r+0x5ac>)
 8001334:	2200      	movs	r2, #0
 8001336:	f7ff fbcb 	bl	8000ad0 <__aeabi_dcmplt>
 800133a:	2800      	cmp	r0, #0
 800133c:	d07e      	beq.n	800143c <_dtoa_r+0x4f4>
 800133e:	9b08      	ldr	r3, [sp, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07b      	beq.n	800143c <_dtoa_r+0x4f4>
 8001344:	f1b9 0f00 	cmp.w	r9, #0
 8001348:	dd38      	ble.n	80013bc <_dtoa_r+0x474>
 800134a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <_dtoa_r+0x5b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	f7ff f931 	bl	80005b8 <__aeabi_dmul>
 8001356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800135a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800135e:	3701      	adds	r7, #1
 8001360:	464c      	mov	r4, r9
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff f8be 	bl	80004e4 <__aeabi_i2d>
 8001368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800136c:	f7ff f924 	bl	80005b8 <__aeabi_dmul>
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <_dtoa_r+0x5b4>)
 8001372:	2200      	movs	r2, #0
 8001374:	f7fe ff6a 	bl	800024c <__adddf3>
 8001378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001380:	9611      	str	r6, [sp, #68]	; 0x44
 8001382:	2c00      	cmp	r4, #0
 8001384:	d15d      	bne.n	8001442 <_dtoa_r+0x4fa>
 8001386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <_dtoa_r+0x5b8>)
 800138c:	2200      	movs	r2, #0
 800138e:	f7fe ff5b 	bl	8000248 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800139c:	4633      	mov	r3, r6
 800139e:	f7ff fbb5 	bl	8000b0c <__aeabi_dcmpgt>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	f040 829c 	bne.w	80018e0 <_dtoa_r+0x998>
 80013a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80013b2:	f7ff fb8d 	bl	8000ad0 <__aeabi_dcmplt>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f040 8290 	bne.w	80018dc <_dtoa_r+0x994>
 80013bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80013c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f2c0 8152 	blt.w	8001670 <_dtoa_r+0x728>
 80013cc:	f1ba 0f0e 	cmp.w	sl, #14
 80013d0:	f300 814e 	bgt.w	8001670 <_dtoa_r+0x728>
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_dtoa_r+0x5a4>)
 80013d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80013da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80013e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f280 80db 	bge.w	80015a0 <_dtoa_r+0x658>
 80013ea:	9b08      	ldr	r3, [sp, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f300 80d7 	bgt.w	80015a0 <_dtoa_r+0x658>
 80013f2:	f040 8272 	bne.w	80018da <_dtoa_r+0x992>
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <_dtoa_r+0x5b8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80013fe:	f7ff f8db 	bl	80005b8 <__aeabi_dmul>
 8001402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001406:	f7ff fb77 	bl	8000af8 <__aeabi_dcmpge>
 800140a:	9c08      	ldr	r4, [sp, #32]
 800140c:	4626      	mov	r6, r4
 800140e:	2800      	cmp	r0, #0
 8001410:	f040 8248 	bne.w	80018a4 <_dtoa_r+0x95c>
 8001414:	9f03      	ldr	r7, [sp, #12]
 8001416:	2331      	movs	r3, #49	; 0x31
 8001418:	f807 3b01 	strb.w	r3, [r7], #1
 800141c:	f10a 0a01 	add.w	sl, sl, #1
 8001420:	e244      	b.n	80018ac <_dtoa_r+0x964>
 8001422:	07e2      	lsls	r2, r4, #31
 8001424:	d505      	bpl.n	8001432 <_dtoa_r+0x4ea>
 8001426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800142a:	f7ff f8c5 	bl	80005b8 <__aeabi_dmul>
 800142e:	3701      	adds	r7, #1
 8001430:	2301      	movs	r3, #1
 8001432:	1064      	asrs	r4, r4, #1
 8001434:	3608      	adds	r6, #8
 8001436:	e76d      	b.n	8001314 <_dtoa_r+0x3cc>
 8001438:	2702      	movs	r7, #2
 800143a:	e770      	b.n	800131e <_dtoa_r+0x3d6>
 800143c:	9c08      	ldr	r4, [sp, #32]
 800143e:	46d0      	mov	r8, sl
 8001440:	e78f      	b.n	8001362 <_dtoa_r+0x41a>
 8001442:	9903      	ldr	r1, [sp, #12]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_dtoa_r+0x5a4>)
 8001446:	4421      	add	r1, r4
 8001448:	9112      	str	r1, [sp, #72]	; 0x48
 800144a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800144c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001450:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001454:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001458:	2900      	cmp	r1, #0
 800145a:	d055      	beq.n	8001508 <_dtoa_r+0x5c0>
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <_dtoa_r+0x5bc>)
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f9d4 	bl	800080c <__aeabi_ddiv>
 8001464:	463b      	mov	r3, r7
 8001466:	4632      	mov	r2, r6
 8001468:	f7fe feee 	bl	8000248 <__aeabi_dsub>
 800146c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001470:	9f03      	ldr	r7, [sp, #12]
 8001472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001476:	f7ff fb69 	bl	8000b4c <__aeabi_d2iz>
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff f832 	bl	80004e4 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001488:	f7fe fede 	bl	8000248 <__aeabi_dsub>
 800148c:	3430      	adds	r4, #48	; 0x30
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001496:	f807 4b01 	strb.w	r4, [r7], #1
 800149a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800149e:	f7ff fb17 	bl	8000ad0 <__aeabi_dcmplt>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d174      	bne.n	8001590 <_dtoa_r+0x648>
 80014a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <_dtoa_r+0x5ac>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7fe fecb 	bl	8000248 <__aeabi_dsub>
 80014b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014b6:	f7ff fb0b 	bl	8000ad0 <__aeabi_dcmplt>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 80b7 	bne.w	800162e <_dtoa_r+0x6e6>
 80014c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014c2:	429f      	cmp	r7, r3
 80014c4:	f43f af7a 	beq.w	80013bc <_dtoa_r+0x474>
 80014c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <_dtoa_r+0x5b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_dmul>
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_dtoa_r+0x5b0>)
 80014d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014e8:	e7c3      	b.n	8001472 <_dtoa_r+0x52a>
 80014ea:	bf00      	nop
 80014ec:	08010cc0 	.word	0x08010cc0
 80014f0:	08010c98 	.word	0x08010c98
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40240000 	.word	0x40240000
 80014fc:	401c0000 	.word	0x401c0000
 8001500:	40140000 	.word	0x40140000
 8001504:	3fe00000 	.word	0x3fe00000
 8001508:	4630      	mov	r0, r6
 800150a:	4639      	mov	r1, r7
 800150c:	f7ff f854 	bl	80005b8 <__aeabi_dmul>
 8001510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001516:	9c03      	ldr	r4, [sp, #12]
 8001518:	9314      	str	r3, [sp, #80]	; 0x50
 800151a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800151e:	f7ff fb15 	bl	8000b4c <__aeabi_d2iz>
 8001522:	9015      	str	r0, [sp, #84]	; 0x54
 8001524:	f7fe ffde 	bl	80004e4 <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001530:	f7fe fe8a 	bl	8000248 <__aeabi_dsub>
 8001534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001536:	3330      	adds	r3, #48	; 0x30
 8001538:	f804 3b01 	strb.w	r3, [r4], #1
 800153c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800153e:	429c      	cmp	r4, r3
 8001540:	4606      	mov	r6, r0
 8001542:	460f      	mov	r7, r1
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	d124      	bne.n	8001594 <_dtoa_r+0x64c>
 800154a:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <_dtoa_r+0x894>)
 800154c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001550:	f7fe fe7c 	bl	800024c <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4630      	mov	r0, r6
 800155a:	4639      	mov	r1, r7
 800155c:	f7ff fad6 	bl	8000b0c <__aeabi_dcmpgt>
 8001560:	2800      	cmp	r0, #0
 8001562:	d163      	bne.n	800162c <_dtoa_r+0x6e4>
 8001564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001568:	499c      	ldr	r1, [pc, #624]	; (80017dc <_dtoa_r+0x894>)
 800156a:	2000      	movs	r0, #0
 800156c:	f7fe fe6c 	bl	8000248 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4630      	mov	r0, r6
 8001576:	4639      	mov	r1, r7
 8001578:	f7ff faaa 	bl	8000ad0 <__aeabi_dcmplt>
 800157c:	2800      	cmp	r0, #0
 800157e:	f43f af1d 	beq.w	80013bc <_dtoa_r+0x474>
 8001582:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001584:	1e7b      	subs	r3, r7, #1
 8001586:	9314      	str	r3, [sp, #80]	; 0x50
 8001588:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d0f8      	beq.n	8001582 <_dtoa_r+0x63a>
 8001590:	46c2      	mov	sl, r8
 8001592:	e03b      	b.n	800160c <_dtoa_r+0x6c4>
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <_dtoa_r+0x898>)
 8001596:	f7ff f80f 	bl	80005b8 <__aeabi_dmul>
 800159a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800159e:	e7bc      	b.n	800151a <_dtoa_r+0x5d2>
 80015a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80015a4:	9f03      	ldr	r7, [sp, #12]
 80015a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015aa:	4640      	mov	r0, r8
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7ff f92d 	bl	800080c <__aeabi_ddiv>
 80015b2:	f7ff facb 	bl	8000b4c <__aeabi_d2iz>
 80015b6:	4604      	mov	r4, r0
 80015b8:	f7fe ff94 	bl	80004e4 <__aeabi_i2d>
 80015bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015c0:	f7fe fffa 	bl	80005b8 <__aeabi_dmul>
 80015c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4640      	mov	r0, r8
 80015ce:	4649      	mov	r1, r9
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_dsub>
 80015d4:	f807 6b01 	strb.w	r6, [r7], #1
 80015d8:	9e03      	ldr	r6, [sp, #12]
 80015da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80015de:	1bbe      	subs	r6, r7, r6
 80015e0:	45b4      	cmp	ip, r6
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	d136      	bne.n	8001656 <_dtoa_r+0x70e>
 80015e8:	f7fe fe30 	bl	800024c <__adddf3>
 80015ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015f0:	4680      	mov	r8, r0
 80015f2:	4689      	mov	r9, r1
 80015f4:	f7ff fa8a 	bl	8000b0c <__aeabi_dcmpgt>
 80015f8:	bb58      	cbnz	r0, 8001652 <_dtoa_r+0x70a>
 80015fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7ff fa5b 	bl	8000abc <__aeabi_dcmpeq>
 8001606:	b108      	cbz	r0, 800160c <_dtoa_r+0x6c4>
 8001608:	07e1      	lsls	r1, r4, #31
 800160a:	d422      	bmi.n	8001652 <_dtoa_r+0x70a>
 800160c:	4628      	mov	r0, r5
 800160e:	4659      	mov	r1, fp
 8001610:	f00b fb38 	bl	800cc84 <_Bfree>
 8001614:	2300      	movs	r3, #0
 8001616:	703b      	strb	r3, [r7, #0]
 8001618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800161a:	f10a 0001 	add.w	r0, sl, #1
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001622:	2b00      	cmp	r3, #0
 8001624:	f43f acdd 	beq.w	8000fe2 <_dtoa_r+0x9a>
 8001628:	601f      	str	r7, [r3, #0]
 800162a:	e4da      	b.n	8000fe2 <_dtoa_r+0x9a>
 800162c:	4627      	mov	r7, r4
 800162e:	463b      	mov	r3, r7
 8001630:	461f      	mov	r7, r3
 8001632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001636:	2a39      	cmp	r2, #57	; 0x39
 8001638:	d107      	bne.n	800164a <_dtoa_r+0x702>
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d1f7      	bne.n	8001630 <_dtoa_r+0x6e8>
 8001640:	9903      	ldr	r1, [sp, #12]
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	f108 0801 	add.w	r8, r8, #1
 8001648:	700a      	strb	r2, [r1, #0]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	3201      	adds	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e79e      	b.n	8001590 <_dtoa_r+0x648>
 8001652:	46d0      	mov	r8, sl
 8001654:	e7eb      	b.n	800162e <_dtoa_r+0x6e6>
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <_dtoa_r+0x898>)
 8001658:	2200      	movs	r2, #0
 800165a:	f7fe ffad 	bl	80005b8 <__aeabi_dmul>
 800165e:	2200      	movs	r2, #0
 8001660:	2300      	movs	r3, #0
 8001662:	4680      	mov	r8, r0
 8001664:	4689      	mov	r9, r1
 8001666:	f7ff fa29 	bl	8000abc <__aeabi_dcmpeq>
 800166a:	2800      	cmp	r0, #0
 800166c:	d09b      	beq.n	80015a6 <_dtoa_r+0x65e>
 800166e:	e7cd      	b.n	800160c <_dtoa_r+0x6c4>
 8001670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001672:	2a00      	cmp	r2, #0
 8001674:	f000 80d0 	beq.w	8001818 <_dtoa_r+0x8d0>
 8001678:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800167a:	2a01      	cmp	r2, #1
 800167c:	f300 80b2 	bgt.w	80017e4 <_dtoa_r+0x89c>
 8001680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001682:	2a00      	cmp	r2, #0
 8001684:	f000 80a6 	beq.w	80017d4 <_dtoa_r+0x88c>
 8001688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800168c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800168e:	9f06      	ldr	r7, [sp, #24]
 8001690:	9a06      	ldr	r2, [sp, #24]
 8001692:	441a      	add	r2, r3
 8001694:	9206      	str	r2, [sp, #24]
 8001696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001698:	2101      	movs	r1, #1
 800169a:	441a      	add	r2, r3
 800169c:	4628      	mov	r0, r5
 800169e:	9209      	str	r2, [sp, #36]	; 0x24
 80016a0:	f00b fb58 	bl	800cd54 <__i2b>
 80016a4:	4606      	mov	r6, r0
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	dd0c      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd09      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016b0:	42bb      	cmp	r3, r7
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	bfa8      	it	ge
 80016b6:	463b      	movge	r3, r7
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	9206      	str	r2, [sp, #24]
 80016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016be:	1aff      	subs	r7, r7, r3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
 80016c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c6:	b1f3      	cbz	r3, 8001706 <_dtoa_r+0x7be>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a8 	beq.w	8001820 <_dtoa_r+0x8d8>
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	dd10      	ble.n	80016f6 <_dtoa_r+0x7ae>
 80016d4:	4631      	mov	r1, r6
 80016d6:	4622      	mov	r2, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f00b fbf9 	bl	800ced0 <__pow5mult>
 80016de:	465a      	mov	r2, fp
 80016e0:	4601      	mov	r1, r0
 80016e2:	4606      	mov	r6, r0
 80016e4:	4628      	mov	r0, r5
 80016e6:	f00b fb4b 	bl	800cd80 <__multiply>
 80016ea:	4659      	mov	r1, fp
 80016ec:	4680      	mov	r8, r0
 80016ee:	4628      	mov	r0, r5
 80016f0:	f00b fac8 	bl	800cc84 <_Bfree>
 80016f4:	46c3      	mov	fp, r8
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	1b1a      	subs	r2, r3, r4
 80016fa:	d004      	beq.n	8001706 <_dtoa_r+0x7be>
 80016fc:	4659      	mov	r1, fp
 80016fe:	4628      	mov	r0, r5
 8001700:	f00b fbe6 	bl	800ced0 <__pow5mult>
 8001704:	4683      	mov	fp, r0
 8001706:	2101      	movs	r1, #1
 8001708:	4628      	mov	r0, r5
 800170a:	f00b fb23 	bl	800cd54 <__i2b>
 800170e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	f340 8086 	ble.w	8001824 <_dtoa_r+0x8dc>
 8001718:	461a      	mov	r2, r3
 800171a:	4601      	mov	r1, r0
 800171c:	4628      	mov	r0, r5
 800171e:	f00b fbd7 	bl	800ced0 <__pow5mult>
 8001722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001724:	2b01      	cmp	r3, #1
 8001726:	4604      	mov	r4, r0
 8001728:	dd7f      	ble.n	800182a <_dtoa_r+0x8e2>
 800172a:	f04f 0800 	mov.w	r8, #0
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001734:	6918      	ldr	r0, [r3, #16]
 8001736:	f00e fe3c 	bl	80103b2 <__hi0bits>
 800173a:	f1c0 0020 	rsb	r0, r0, #32
 800173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001740:	4418      	add	r0, r3
 8001742:	f010 001f 	ands.w	r0, r0, #31
 8001746:	f000 8092 	beq.w	800186e <_dtoa_r+0x926>
 800174a:	f1c0 0320 	rsb	r3, r0, #32
 800174e:	2b04      	cmp	r3, #4
 8001750:	f340 808a 	ble.w	8001868 <_dtoa_r+0x920>
 8001754:	f1c0 001c 	rsb	r0, r0, #28
 8001758:	9b06      	ldr	r3, [sp, #24]
 800175a:	4403      	add	r3, r0
 800175c:	9306      	str	r3, [sp, #24]
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4403      	add	r3, r0
 8001762:	4407      	add	r7, r0
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
 8001766:	9b06      	ldr	r3, [sp, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd05      	ble.n	8001778 <_dtoa_r+0x830>
 800176c:	4659      	mov	r1, fp
 800176e:	461a      	mov	r2, r3
 8001770:	4628      	mov	r0, r5
 8001772:	f00b fc07 	bl	800cf84 <__lshift>
 8001776:	4683      	mov	fp, r0
 8001778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd05      	ble.n	800178a <_dtoa_r+0x842>
 800177e:	4621      	mov	r1, r4
 8001780:	461a      	mov	r2, r3
 8001782:	4628      	mov	r0, r5
 8001784:	f00b fbfe 	bl	800cf84 <__lshift>
 8001788:	4604      	mov	r4, r0
 800178a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d070      	beq.n	8001872 <_dtoa_r+0x92a>
 8001790:	4621      	mov	r1, r4
 8001792:	4658      	mov	r0, fp
 8001794:	f00e fe5a 	bl	801044c <__mcmp>
 8001798:	2800      	cmp	r0, #0
 800179a:	da6a      	bge.n	8001872 <_dtoa_r+0x92a>
 800179c:	2300      	movs	r3, #0
 800179e:	4659      	mov	r1, fp
 80017a0:	220a      	movs	r2, #10
 80017a2:	4628      	mov	r0, r5
 80017a4:	f00b fa90 	bl	800ccc8 <__multadd>
 80017a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80017ae:	4683      	mov	fp, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8194 	beq.w	8001ade <_dtoa_r+0xb96>
 80017b6:	4631      	mov	r1, r6
 80017b8:	2300      	movs	r3, #0
 80017ba:	220a      	movs	r2, #10
 80017bc:	4628      	mov	r0, r5
 80017be:	f00b fa83 	bl	800ccc8 <__multadd>
 80017c2:	f1b9 0f00 	cmp.w	r9, #0
 80017c6:	4606      	mov	r6, r0
 80017c8:	f300 8093 	bgt.w	80018f2 <_dtoa_r+0x9aa>
 80017cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc57      	bgt.n	8001882 <_dtoa_r+0x93a>
 80017d2:	e08e      	b.n	80018f2 <_dtoa_r+0x9aa>
 80017d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80017da:	e757      	b.n	800168c <_dtoa_r+0x744>
 80017dc:	3fe00000 	.word	0x3fe00000
 80017e0:	40240000 	.word	0x40240000
 80017e4:	9b08      	ldr	r3, [sp, #32]
 80017e6:	1e5c      	subs	r4, r3, #1
 80017e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	bfbf      	itttt	lt
 80017ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80017f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80017f2:	1ae2      	sublt	r2, r4, r3
 80017f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80017f6:	bfb6      	itet	lt
 80017f8:	189b      	addlt	r3, r3, r2
 80017fa:	1b1c      	subge	r4, r3, r4
 80017fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80017fe:	9b08      	ldr	r3, [sp, #32]
 8001800:	bfb8      	it	lt
 8001802:	2400      	movlt	r4, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb9      	ittee	lt
 8001808:	9b06      	ldrlt	r3, [sp, #24]
 800180a:	9a08      	ldrlt	r2, [sp, #32]
 800180c:	9f06      	ldrge	r7, [sp, #24]
 800180e:	9b08      	ldrge	r3, [sp, #32]
 8001810:	bfbc      	itt	lt
 8001812:	1a9f      	sublt	r7, r3, r2
 8001814:	2300      	movlt	r3, #0
 8001816:	e73b      	b.n	8001690 <_dtoa_r+0x748>
 8001818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800181a:	9f06      	ldr	r7, [sp, #24]
 800181c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800181e:	e742      	b.n	80016a6 <_dtoa_r+0x75e>
 8001820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001822:	e76b      	b.n	80016fc <_dtoa_r+0x7b4>
 8001824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001826:	2b01      	cmp	r3, #1
 8001828:	dc19      	bgt.n	800185e <_dtoa_r+0x916>
 800182a:	9b04      	ldr	r3, [sp, #16]
 800182c:	b9bb      	cbnz	r3, 800185e <_dtoa_r+0x916>
 800182e:	9b05      	ldr	r3, [sp, #20]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	b99b      	cbnz	r3, 800185e <_dtoa_r+0x916>
 8001836:	9b05      	ldr	r3, [sp, #20]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	051b      	lsls	r3, r3, #20
 8001840:	b183      	cbz	r3, 8001864 <_dtoa_r+0x91c>
 8001842:	9b06      	ldr	r3, [sp, #24]
 8001844:	3301      	adds	r3, #1
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	9309      	str	r3, [sp, #36]	; 0x24
 800184e:	f04f 0801 	mov.w	r8, #1
 8001852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f af6a 	bne.w	800172e <_dtoa_r+0x7e6>
 800185a:	2001      	movs	r0, #1
 800185c:	e76f      	b.n	800173e <_dtoa_r+0x7f6>
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7f6      	b.n	8001852 <_dtoa_r+0x90a>
 8001864:	4698      	mov	r8, r3
 8001866:	e7f4      	b.n	8001852 <_dtoa_r+0x90a>
 8001868:	f43f af7d 	beq.w	8001766 <_dtoa_r+0x81e>
 800186c:	4618      	mov	r0, r3
 800186e:	301c      	adds	r0, #28
 8001870:	e772      	b.n	8001758 <_dtoa_r+0x810>
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dc36      	bgt.n	80018e6 <_dtoa_r+0x99e>
 8001878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800187a:	2b02      	cmp	r3, #2
 800187c:	dd33      	ble.n	80018e6 <_dtoa_r+0x99e>
 800187e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001882:	f1b9 0f00 	cmp.w	r9, #0
 8001886:	d10d      	bne.n	80018a4 <_dtoa_r+0x95c>
 8001888:	4621      	mov	r1, r4
 800188a:	464b      	mov	r3, r9
 800188c:	2205      	movs	r2, #5
 800188e:	4628      	mov	r0, r5
 8001890:	f00b fa1a 	bl	800ccc8 <__multadd>
 8001894:	4601      	mov	r1, r0
 8001896:	4604      	mov	r4, r0
 8001898:	4658      	mov	r0, fp
 800189a:	f00e fdd7 	bl	801044c <__mcmp>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f73f adb8 	bgt.w	8001414 <_dtoa_r+0x4cc>
 80018a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80018a6:	9f03      	ldr	r7, [sp, #12]
 80018a8:	ea6f 0a03 	mvn.w	sl, r3
 80018ac:	f04f 0800 	mov.w	r8, #0
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f00b f9e6 	bl	800cc84 <_Bfree>
 80018b8:	2e00      	cmp	r6, #0
 80018ba:	f43f aea7 	beq.w	800160c <_dtoa_r+0x6c4>
 80018be:	f1b8 0f00 	cmp.w	r8, #0
 80018c2:	d005      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c4:	45b0      	cmp	r8, r6
 80018c6:	d003      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c8:	4641      	mov	r1, r8
 80018ca:	4628      	mov	r0, r5
 80018cc:	f00b f9da 	bl	800cc84 <_Bfree>
 80018d0:	4631      	mov	r1, r6
 80018d2:	4628      	mov	r0, r5
 80018d4:	f00b f9d6 	bl	800cc84 <_Bfree>
 80018d8:	e698      	b.n	800160c <_dtoa_r+0x6c4>
 80018da:	2400      	movs	r4, #0
 80018dc:	4626      	mov	r6, r4
 80018de:	e7e1      	b.n	80018a4 <_dtoa_r+0x95c>
 80018e0:	46c2      	mov	sl, r8
 80018e2:	4626      	mov	r6, r4
 80018e4:	e596      	b.n	8001414 <_dtoa_r+0x4cc>
 80018e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fd 	beq.w	8001aec <_dtoa_r+0xba4>
 80018f2:	2f00      	cmp	r7, #0
 80018f4:	dd05      	ble.n	8001902 <_dtoa_r+0x9ba>
 80018f6:	4631      	mov	r1, r6
 80018f8:	463a      	mov	r2, r7
 80018fa:	4628      	mov	r0, r5
 80018fc:	f00b fb42 	bl	800cf84 <__lshift>
 8001900:	4606      	mov	r6, r0
 8001902:	f1b8 0f00 	cmp.w	r8, #0
 8001906:	d05c      	beq.n	80019c2 <_dtoa_r+0xa7a>
 8001908:	6871      	ldr	r1, [r6, #4]
 800190a:	4628      	mov	r0, r5
 800190c:	f00b f97a 	bl	800cc04 <_Balloc>
 8001910:	4607      	mov	r7, r0
 8001912:	b928      	cbnz	r0, 8001920 <_dtoa_r+0x9d8>
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <_dtoa_r+0xbd0>)
 8001916:	4602      	mov	r2, r0
 8001918:	f240 21ea 	movw	r1, #746	; 0x2ea
 800191c:	f7ff bb28 	b.w	8000f70 <_dtoa_r+0x28>
 8001920:	6932      	ldr	r2, [r6, #16]
 8001922:	3202      	adds	r2, #2
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	f106 010c 	add.w	r1, r6, #12
 800192a:	300c      	adds	r0, #12
 800192c:	f00e fb8d 	bl	801004a <memcpy>
 8001930:	2201      	movs	r2, #1
 8001932:	4639      	mov	r1, r7
 8001934:	4628      	mov	r0, r5
 8001936:	f00b fb25 	bl	800cf84 <__lshift>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	9308      	str	r3, [sp, #32]
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	444b      	add	r3, r9
 8001944:	930a      	str	r3, [sp, #40]	; 0x28
 8001946:	9b04      	ldr	r3, [sp, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	46b0      	mov	r8, r6
 800194e:	9309      	str	r3, [sp, #36]	; 0x24
 8001950:	4606      	mov	r6, r0
 8001952:	9b08      	ldr	r3, [sp, #32]
 8001954:	4621      	mov	r1, r4
 8001956:	3b01      	subs	r3, #1
 8001958:	4658      	mov	r0, fp
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	f00e fca2 	bl	80102a4 <quorem>
 8001960:	4603      	mov	r3, r0
 8001962:	3330      	adds	r3, #48	; 0x30
 8001964:	9006      	str	r0, [sp, #24]
 8001966:	4641      	mov	r1, r8
 8001968:	4658      	mov	r0, fp
 800196a:	930b      	str	r3, [sp, #44]	; 0x2c
 800196c:	f00e fd6e 	bl	801044c <__mcmp>
 8001970:	4632      	mov	r2, r6
 8001972:	4681      	mov	r9, r0
 8001974:	4621      	mov	r1, r4
 8001976:	4628      	mov	r0, r5
 8001978:	f00b fb74 	bl	800d064 <__mdiff>
 800197c:	68c2      	ldr	r2, [r0, #12]
 800197e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001980:	4607      	mov	r7, r0
 8001982:	bb02      	cbnz	r2, 80019c6 <_dtoa_r+0xa7e>
 8001984:	4601      	mov	r1, r0
 8001986:	4658      	mov	r0, fp
 8001988:	f00e fd60 	bl	801044c <__mcmp>
 800198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800198e:	4602      	mov	r2, r0
 8001990:	4639      	mov	r1, r7
 8001992:	4628      	mov	r0, r5
 8001994:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001998:	f00b f974 	bl	800cc84 <_Bfree>
 800199c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800199e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019a0:	9f08      	ldr	r7, [sp, #32]
 80019a2:	ea43 0102 	orr.w	r1, r3, r2
 80019a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019ac:	d10d      	bne.n	80019ca <_dtoa_r+0xa82>
 80019ae:	2b39      	cmp	r3, #57	; 0x39
 80019b0:	d029      	beq.n	8001a06 <_dtoa_r+0xabe>
 80019b2:	f1b9 0f00 	cmp.w	r9, #0
 80019b6:	dd01      	ble.n	80019bc <_dtoa_r+0xa74>
 80019b8:	9b06      	ldr	r3, [sp, #24]
 80019ba:	3331      	adds	r3, #49	; 0x31
 80019bc:	9a04      	ldr	r2, [sp, #16]
 80019be:	7013      	strb	r3, [r2, #0]
 80019c0:	e776      	b.n	80018b0 <_dtoa_r+0x968>
 80019c2:	4630      	mov	r0, r6
 80019c4:	e7b9      	b.n	800193a <_dtoa_r+0x9f2>
 80019c6:	2201      	movs	r2, #1
 80019c8:	e7e2      	b.n	8001990 <_dtoa_r+0xa48>
 80019ca:	f1b9 0f00 	cmp.w	r9, #0
 80019ce:	db06      	blt.n	80019de <_dtoa_r+0xa96>
 80019d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80019d2:	ea41 0909 	orr.w	r9, r1, r9
 80019d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019d8:	ea59 0101 	orrs.w	r1, r9, r1
 80019dc:	d120      	bne.n	8001a20 <_dtoa_r+0xad8>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	ddec      	ble.n	80019bc <_dtoa_r+0xa74>
 80019e2:	4659      	mov	r1, fp
 80019e4:	2201      	movs	r2, #1
 80019e6:	4628      	mov	r0, r5
 80019e8:	9308      	str	r3, [sp, #32]
 80019ea:	f00b facb 	bl	800cf84 <__lshift>
 80019ee:	4621      	mov	r1, r4
 80019f0:	4683      	mov	fp, r0
 80019f2:	f00e fd2b 	bl	801044c <__mcmp>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	9b08      	ldr	r3, [sp, #32]
 80019fa:	dc02      	bgt.n	8001a02 <_dtoa_r+0xaba>
 80019fc:	d1de      	bne.n	80019bc <_dtoa_r+0xa74>
 80019fe:	07da      	lsls	r2, r3, #31
 8001a00:	d5dc      	bpl.n	80019bc <_dtoa_r+0xa74>
 8001a02:	2b39      	cmp	r3, #57	; 0x39
 8001a04:	d1d8      	bne.n	80019b8 <_dtoa_r+0xa70>
 8001a06:	9a04      	ldr	r2, [sp, #16]
 8001a08:	2339      	movs	r3, #57	; 0x39
 8001a0a:	7013      	strb	r3, [r2, #0]
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	461f      	mov	r7, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001a16:	2a39      	cmp	r2, #57	; 0x39
 8001a18:	d050      	beq.n	8001abc <_dtoa_r+0xb74>
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e747      	b.n	80018b0 <_dtoa_r+0x968>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dd03      	ble.n	8001a2c <_dtoa_r+0xae4>
 8001a24:	2b39      	cmp	r3, #57	; 0x39
 8001a26:	d0ee      	beq.n	8001a06 <_dtoa_r+0xabe>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	e7c7      	b.n	80019bc <_dtoa_r+0xa74>
 8001a2c:	9a08      	ldr	r2, [sp, #32]
 8001a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d02a      	beq.n	8001a8e <_dtoa_r+0xb46>
 8001a38:	4659      	mov	r1, fp
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f00b f942 	bl	800ccc8 <__multadd>
 8001a44:	45b0      	cmp	r8, r6
 8001a46:	4683      	mov	fp, r0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 020a 	mov.w	r2, #10
 8001a50:	4641      	mov	r1, r8
 8001a52:	4628      	mov	r0, r5
 8001a54:	d107      	bne.n	8001a66 <_dtoa_r+0xb1e>
 8001a56:	f00b f937 	bl	800ccc8 <__multadd>
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	9b08      	ldr	r3, [sp, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	9308      	str	r3, [sp, #32]
 8001a64:	e775      	b.n	8001952 <_dtoa_r+0xa0a>
 8001a66:	f00b f92f 	bl	800ccc8 <__multadd>
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	2300      	movs	r3, #0
 8001a70:	220a      	movs	r2, #10
 8001a72:	4628      	mov	r0, r5
 8001a74:	f00b f928 	bl	800ccc8 <__multadd>
 8001a78:	4606      	mov	r6, r0
 8001a7a:	e7f0      	b.n	8001a5e <_dtoa_r+0xb16>
 8001a7c:	f1b9 0f00 	cmp.w	r9, #0
 8001a80:	9a03      	ldr	r2, [sp, #12]
 8001a82:	bfcc      	ite	gt
 8001a84:	464f      	movgt	r7, r9
 8001a86:	2701      	movle	r7, #1
 8001a88:	4417      	add	r7, r2
 8001a8a:	f04f 0800 	mov.w	r8, #0
 8001a8e:	4659      	mov	r1, fp
 8001a90:	2201      	movs	r2, #1
 8001a92:	4628      	mov	r0, r5
 8001a94:	9308      	str	r3, [sp, #32]
 8001a96:	f00b fa75 	bl	800cf84 <__lshift>
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4683      	mov	fp, r0
 8001a9e:	f00e fcd5 	bl	801044c <__mcmp>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dcb2      	bgt.n	8001a0c <_dtoa_r+0xac4>
 8001aa6:	d102      	bne.n	8001aae <_dtoa_r+0xb66>
 8001aa8:	9b08      	ldr	r3, [sp, #32]
 8001aaa:	07db      	lsls	r3, r3, #31
 8001aac:	d4ae      	bmi.n	8001a0c <_dtoa_r+0xac4>
 8001aae:	463b      	mov	r3, r7
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001ab6:	2a30      	cmp	r2, #48	; 0x30
 8001ab8:	d0fa      	beq.n	8001ab0 <_dtoa_r+0xb68>
 8001aba:	e6f9      	b.n	80018b0 <_dtoa_r+0x968>
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1a5      	bne.n	8001a0e <_dtoa_r+0xac6>
 8001ac2:	f10a 0a01 	add.w	sl, sl, #1
 8001ac6:	2331      	movs	r3, #49	; 0x31
 8001ac8:	e779      	b.n	80019be <_dtoa_r+0xa76>
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <_dtoa_r+0xbd4>)
 8001acc:	f7ff baa7 	b.w	800101e <_dtoa_r+0xd6>
 8001ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aa80 	bne.w	8000fd8 <_dtoa_r+0x90>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_dtoa_r+0xbd8>)
 8001ada:	f7ff baa0 	b.w	800101e <_dtoa_r+0xd6>
 8001ade:	f1b9 0f00 	cmp.w	r9, #0
 8001ae2:	dc03      	bgt.n	8001aec <_dtoa_r+0xba4>
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f73f aecb 	bgt.w	8001882 <_dtoa_r+0x93a>
 8001aec:	9f03      	ldr	r7, [sp, #12]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4658      	mov	r0, fp
 8001af2:	f00e fbd7 	bl	80102a4 <quorem>
 8001af6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001afa:	f807 3b01 	strb.w	r3, [r7], #1
 8001afe:	9a03      	ldr	r2, [sp, #12]
 8001b00:	1aba      	subs	r2, r7, r2
 8001b02:	4591      	cmp	r9, r2
 8001b04:	ddba      	ble.n	8001a7c <_dtoa_r+0xb34>
 8001b06:	4659      	mov	r1, fp
 8001b08:	2300      	movs	r3, #0
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f00b f8db 	bl	800ccc8 <__multadd>
 8001b12:	4683      	mov	fp, r0
 8001b14:	e7eb      	b.n	8001aee <_dtoa_r+0xba6>
 8001b16:	bf00      	nop
 8001b18:	080123b7 	.word	0x080123b7
 8001b1c:	08012315 	.word	0x08012315
 8001b20:	08012339 	.word	0x08012339

08001b24 <set_blink_param>:
//// Struct with using colors end ////


//// Function definition begin ////
void set_blink_param(enum COMMON_STRIP_COLOR_e blink_color, k_timeout_t msec_timeout)
{
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	4606      	mov	r6, r0
 8001b28:	4615      	mov	r5, r2
 8001b2a:	461c      	mov	r4, r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 8001b2c:	4f07      	ldr	r7, [pc, #28]	; (8001b4c <set_blink_param+0x28>)
 8001b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b36:	4638      	mov	r0, r7
 8001b38:	f009 f89e 	bl	800ac78 <z_impl_k_mutex_lock>
    k_mutex_lock(&mut_blink_param, K_FOREVER);
    blink_param.blink_color = blink_color;
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <set_blink_param+0x2c>)
 8001b3e:	720e      	strb	r6, [r1, #8]
    blink_param.msec_timeout = msec_timeout;
 8001b40:	600d      	str	r5, [r1, #0]
 8001b42:	604c      	str	r4, [r1, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 8001b44:	4638      	mov	r0, r7
 8001b46:	f009 f921 	bl	800ad8c <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mut_blink_param);
}
 8001b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b4c:	200003ac 	.word	0x200003ac
 8001b50:	200004c0 	.word	0x200004c0

08001b54 <blink>:


void blink(struct k_work *item)
{
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	b083      	sub	sp, #12
    uint8_t i = 0;
    struct led_hsv color_hsv = {0};
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
 8001b5c:	4d2f      	ldr	r5, [pc, #188]	; (8001c1c <blink+0xc8>)
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b66:	4628      	mov	r0, r5
 8001b68:	f009 f886 	bl	800ac78 <z_impl_k_mutex_lock>
    static struct led_rgb blink_pixels_rgb[STRIP_NUM_PIXELS] = {0};

    k_mutex_lock(&mut_blink_param, K_FOREVER);
    enum COMMON_STRIP_COLOR_e blink_color = blink_param.blink_color;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <blink+0xcc>)
 8001b6e:	7a1c      	ldrb	r4, [r3, #8]
    k_timeout_t msec_timeout = blink_param.msec_timeout;
 8001b70:	e9d3 6700 	ldrd	r6, r7, [r3]
	return z_impl_k_mutex_unlock(mutex);
 8001b74:	4628      	mov	r0, r5
 8001b76:	f009 f909 	bl	800ad8c <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mut_blink_param);

    switch (blink_color) {
 8001b7a:	2c03      	cmp	r4, #3
 8001b7c:	d806      	bhi.n	8001b8c <blink+0x38>
 8001b7e:	e8df f004 	tbb	[pc, r4]
 8001b82:	0702      	.short	0x0702
 8001b84:	0f0b      	.short	0x0f0b
        case COMMON_STRIP_COLOR_RED:
            color_hsv = red_hsv;
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <blink+0xd0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	9301      	str	r3, [sp, #4]
{
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e014      	b.n	8001bba <blink+0x66>
            break;
        case COMMON_STRIP_COLOR_GREEN:
            color_hsv = green_hsv;
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <blink+0xd4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	9301      	str	r3, [sp, #4]
            break;
 8001b96:	e7f9      	b.n	8001b8c <blink+0x38>
        case COMMON_STRIP_COLOR_BLUE:
            color_hsv = blue_hsv;
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <blink+0xd8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	9301      	str	r3, [sp, #4]
            break;
 8001b9e:	e7f5      	b.n	8001b8c <blink+0x38>
        case COMMON_STRIP_COLOR_PURPLE:
            color_hsv = purple_hsv;
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <blink+0xdc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	9301      	str	r3, [sp, #4]
            break;
 8001ba6:	e7f1      	b.n	8001b8c <blink+0x38>
        default:
            break;
    }

    while (i < STRIP_NUM_PIXELS) {
        led_hsv2rgb(&color_hsv, &blink_pixels_rgb[i++]);
 8001ba8:	1c5c      	adds	r4, r3, #1
 8001baa:	b2e4      	uxtb	r4, r4
 8001bac:	4921      	ldr	r1, [pc, #132]	; (8001c34 <blink+0xe0>)
 8001bae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bb2:	a801      	add	r0, sp, #4
 8001bb4:	f008 fc7e 	bl	800a4b4 <led_hsv2rgb>
 8001bb8:	4623      	mov	r3, r4
    while (i < STRIP_NUM_PIXELS) {
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	d9f4      	bls.n	8001ba8 <blink+0x54>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc6:	481c      	ldr	r0, [pc, #112]	; (8001c38 <blink+0xe4>)
 8001bc8:	f009 f856 	bl	800ac78 <z_impl_k_mutex_lock>
    }

    i = 0;
 8001bcc:	2400      	movs	r4, #0
    k_mutex_lock(&mut_led_strip_busy, K_FOREVER);
    while (i < BLINKED_COUNT) {
 8001bce:	e016      	b.n	8001bfe <blink+0xaa>
//        printk(" Blinked\n");
        led_strip_update_rgb(strip_dev, blink_pixels_rgb, STRIP_NUM_PIXELS);
 8001bd0:	4d1a      	ldr	r5, [pc, #104]	; (8001c3c <blink+0xe8>)
 8001bd2:	6828      	ldr	r0, [r5, #0]
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
 8001bd4:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4916      	ldr	r1, [pc, #88]	; (8001c34 <blink+0xe0>)
 8001bdc:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8001bde:	4630      	mov	r0, r6
 8001be0:	4639      	mov	r1, r7
 8001be2:	f009 fe55 	bl	800b890 <z_impl_k_sleep>
        k_sleep(msec_timeout);
        led_strip_update_rgb(strip_dev, empty_pixels_rgb, STRIP_NUM_PIXELS);
 8001be6:	6828      	ldr	r0, [r5, #0]
	const struct led_strip_driver_api *api =
 8001be8:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2210      	movs	r2, #16
 8001bee:	4914      	ldr	r1, [pc, #80]	; (8001c40 <blink+0xec>)
 8001bf0:	4798      	blx	r3
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	4639      	mov	r1, r7
 8001bf6:	f009 fe4b 	bl	800b890 <z_impl_k_sleep>
        k_sleep(msec_timeout);
        i++;
 8001bfa:	3401      	adds	r4, #1
 8001bfc:	b2e4      	uxtb	r4, r4
    while (i < BLINKED_COUNT) {
 8001bfe:	2c04      	cmp	r4, #4
 8001c00:	d9e6      	bls.n	8001bd0 <blink+0x7c>
    }

    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <blink+0xe8>)
 8001c04:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001c06:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	490d      	ldr	r1, [pc, #52]	; (8001c44 <blink+0xf0>)
 8001c0e:	4798      	blx	r3
	return z_impl_k_mutex_unlock(mutex);
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <blink+0xe4>)
 8001c12:	f009 f8bb 	bl	800ad8c <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mut_led_strip_busy);
//    printk(" Stop blinked\n");
}
 8001c16:	b003      	add	sp, #12
 8001c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200003ac 	.word	0x200003ac
 8001c20:	200004c0 	.word	0x200004c0
 8001c24:	08010d98 	.word	0x08010d98
 8001c28:	08010d90 	.word	0x08010d90
 8001c2c:	08010d88 	.word	0x08010d88
 8001c30:	08010d94 	.word	0x08010d94
 8001c34:	20000c68 	.word	0x20000c68
 8001c38:	200003c0 	.word	0x200003c0
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000ca8 	.word	0x20000ca8
 8001c44:	20000cec 	.word	0x20000cec

08001c48 <set_color>:
//    printk(" stop_blink end\n");
}


void set_color(enum COMMON_STRIP_COLOR_e color)
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	b092      	sub	sp, #72	; 0x48
 8001c4c:	4604      	mov	r4, r0
    uint8_t cnt = 0;
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	2100      	movs	r1, #0
 8001c52:	a802      	add	r0, sp, #8
 8001c54:	f00e fa07 	bl	8010066 <memset>
    struct led_hsv color_hsv = {0};
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]

    switch (color) {
 8001c5c:	2c04      	cmp	r4, #4
 8001c5e:	d807      	bhi.n	8001c70 <set_color+0x28>
 8001c60:	e8df f004 	tbb	[pc, r4]
 8001c64:	100c0803 	.word	0x100c0803
 8001c68:	14          	.byte	0x14
 8001c69:	00          	.byte	0x00
        case COMMON_STRIP_COLOR_RED:
            color_hsv = red_hsv;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <set_color+0x74>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	9301      	str	r3, [sp, #4]
{
 8001c70:	2100      	movs	r1, #0
 8001c72:	e018      	b.n	8001ca6 <set_color+0x5e>
            break;
        case COMMON_STRIP_COLOR_GREEN:
            color_hsv = green_hsv;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <set_color+0x78>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	9301      	str	r3, [sp, #4]
            break;
 8001c7a:	e7f9      	b.n	8001c70 <set_color+0x28>
        case COMMON_STRIP_COLOR_BLUE:
            color_hsv = blue_hsv;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <set_color+0x7c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	9301      	str	r3, [sp, #4]
            break;
 8001c82:	e7f5      	b.n	8001c70 <set_color+0x28>
        case COMMON_STRIP_COLOR_PURPLE:
            color_hsv = purple_hsv;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <set_color+0x80>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	9301      	str	r3, [sp, #4]
            break;
 8001c8a:	e7f1      	b.n	8001c70 <set_color+0x28>
        case COMMON_STRIP_COLOR_YELLOW:
            color_hsv = yellow_hsv;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <set_color+0x84>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	9301      	str	r3, [sp, #4]
            break;
 8001c92:	e7ed      	b.n	8001c70 <set_color+0x28>
        default:
            break;
    }

    while (cnt < STRIP_NUM_PIXELS) {
        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8001c94:	1c4c      	adds	r4, r1, #1
 8001c96:	b2e4      	uxtb	r4, r4
 8001c98:	ab02      	add	r3, sp, #8
 8001c9a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001c9e:	a801      	add	r0, sp, #4
 8001ca0:	f008 fc08 	bl	800a4b4 <led_hsv2rgb>
 8001ca4:	4621      	mov	r1, r4
    while (cnt < STRIP_NUM_PIXELS) {
 8001ca6:	290f      	cmp	r1, #15
 8001ca8:	d9f4      	bls.n	8001c94 <set_color+0x4c>
    }

    led_strip_update_rgb(strip_dev, color_rgb, STRIP_NUM_PIXELS);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <set_color+0x88>)
 8001cac:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001cae:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	a902      	add	r1, sp, #8
 8001cb6:	4798      	blx	r3
}
 8001cb8:	b012      	add	sp, #72	; 0x48
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	08010d98 	.word	0x08010d98
 8001cc0:	08010d90 	.word	0x08010d90
 8001cc4:	08010d88 	.word	0x08010d88
 8001cc8:	08010d94 	.word	0x08010d94
 8001ccc:	08010d9c 	.word	0x08010d9c
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <set_con_status_pixels>:


void set_con_status_pixels(uint8_t con_status, uint8_t *pos)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4606      	mov	r6, r0
 8001cd8:	460c      	mov	r4, r1
    uint8_t start_pos = (*pos);
 8001cda:	780d      	ldrb	r5, [r1, #0]
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001cdc:	e008      	b.n	8001cf0 <set_con_status_pixels+0x1c>
        if (*pos < start_pos + con_status) {
            if (*pos < start_pos + NUM_OF_RED_LEDS)
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
            else
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 8001cde:	4911      	ldr	r1, [pc, #68]	; (8001d24 <set_con_status_pixels+0x50>)
 8001ce0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001ce4:	4810      	ldr	r0, [pc, #64]	; (8001d28 <set_con_status_pixels+0x54>)
 8001ce6:	f008 fbe5 	bl	800a4b4 <led_hsv2rgb>
        } else {
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
        }
        (*pos)++;
 8001cea:	7823      	ldrb	r3, [r4, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	7023      	strb	r3, [r4, #0]
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001cf0:	1daa      	adds	r2, r5, #6
 8001cf2:	7823      	ldrb	r3, [r4, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	db13      	blt.n	8001d20 <set_con_status_pixels+0x4c>
        if (*pos < start_pos + con_status) {
 8001cf8:	1972      	adds	r2, r6, r5
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dd09      	ble.n	8001d12 <set_con_status_pixels+0x3e>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8001cfe:	1c6a      	adds	r2, r5, #1
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbec      	blt.n	8001cde <set_con_status_pixels+0xa>
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <set_con_status_pixels+0x50>)
 8001d06:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <set_con_status_pixels+0x58>)
 8001d0c:	f008 fbd2 	bl	800a4b4 <led_hsv2rgb>
 8001d10:	e7eb      	b.n	8001cea <set_con_status_pixels+0x16>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 8001d12:	4904      	ldr	r1, [pc, #16]	; (8001d24 <set_con_status_pixels+0x50>)
 8001d14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <set_con_status_pixels+0x5c>)
 8001d1a:	f008 fbcb 	bl	800a4b4 <led_hsv2rgb>
 8001d1e:	e7e4      	b.n	8001cea <set_con_status_pixels+0x16>
    }
}
 8001d20:	bd70      	pop	{r4, r5, r6, pc}
 8001d22:	bf00      	nop
 8001d24:	20000cec 	.word	0x20000cec
 8001d28:	08010d90 	.word	0x08010d90
 8001d2c:	08010d98 	.word	0x08010d98
 8001d30:	08010d8c 	.word	0x08010d8c

08001d34 <set_people_num_pixels>:


void set_people_num_pixels(uint8_t people_num, uint8_t *pos)
{
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	4606      	mov	r6, r0
 8001d38:	460c      	mov	r4, r1
    uint8_t start_pos = (*pos);
 8001d3a:	780d      	ldrb	r5, [r1, #0]
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001d3c:	e008      	b.n	8001d50 <set_people_num_pixels+0x1c>
        (people_num & BIT((*pos)-start_pos)) ? led_hsv2rgb(&blue_hsv, &pixels_rgb[ (*pos)])
            : led_hsv2rgb(&empty_hsv, &pixels_rgb[ (*pos)]);
 8001d3e:	490d      	ldr	r1, [pc, #52]	; (8001d74 <set_people_num_pixels+0x40>)
 8001d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <set_people_num_pixels+0x44>)
 8001d46:	f008 fbb5 	bl	800a4b4 <led_hsv2rgb>
        (*pos)++;
 8001d4a:	7823      	ldrb	r3, [r4, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	7023      	strb	r3, [r4, #0]
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001d50:	1dab      	adds	r3, r5, #6
 8001d52:	7822      	ldrb	r2, [r4, #0]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	db0c      	blt.n	8001d72 <set_people_num_pixels+0x3e>
        (people_num & BIT((*pos)-start_pos)) ? led_hsv2rgb(&blue_hsv, &pixels_rgb[ (*pos)])
 8001d58:	1b53      	subs	r3, r2, r5
 8001d5a:	fa26 f303 	lsr.w	r3, r6, r3
            : led_hsv2rgb(&empty_hsv, &pixels_rgb[ (*pos)]);
 8001d5e:	f013 0f01 	tst.w	r3, #1
 8001d62:	d0ec      	beq.n	8001d3e <set_people_num_pixels+0xa>
        (people_num & BIT((*pos)-start_pos)) ? led_hsv2rgb(&blue_hsv, &pixels_rgb[ (*pos)])
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <set_people_num_pixels+0x40>)
 8001d66:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001d6a:	4804      	ldr	r0, [pc, #16]	; (8001d7c <set_people_num_pixels+0x48>)
 8001d6c:	f008 fba2 	bl	800a4b4 <led_hsv2rgb>
 8001d70:	e7eb      	b.n	8001d4a <set_people_num_pixels+0x16>
    }
}
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	20000cec 	.word	0x20000cec
 8001d78:	08010d8c 	.word	0x08010d8c
 8001d7c:	08010d88 	.word	0x08010d88

08001d80 <update_indication>:


void update_indication(struct led_strip_state_s *strip_state, bool set_con_status, bool set_people_num)
{
 8001d80:	b530      	push	{r4, r5, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	4604      	mov	r4, r0
    if ((!set_people_num) && (!set_con_status))
 8001d86:	4615      	mov	r5, r2
 8001d88:	b902      	cbnz	r2, 8001d8c <update_indication+0xc>
 8001d8a:	b1b1      	cbz	r1, 8001dba <update_indication+0x3a>
        return;

    uint8_t pos = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f88d 3007 	strb.w	r3, [sp, #7]

    if (set_con_status)
 8001d92:	b9a1      	cbnz	r1, 8001dbe <update_indication+0x3e>
        set_con_status_pixels(strip_state->con_status, &pos);

    if (set_people_num)
 8001d94:	b9cd      	cbnz	r5, 8001dca <update_indication+0x4a>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001d96:	4c10      	ldr	r4, [pc, #64]	; (8001dd8 <update_indication+0x58>)
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da0:	4620      	mov	r0, r4
 8001da2:	f008 ff69 	bl	800ac78 <z_impl_k_mutex_lock>
        set_people_num_pixels(strip_state->people_num, &pos);

    k_mutex_lock(&mut_led_strip_busy, K_FOREVER);
    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <update_indication+0x5c>)
 8001da8:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001daa:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	490b      	ldr	r1, [pc, #44]	; (8001de0 <update_indication+0x60>)
 8001db2:	4798      	blx	r3
	return z_impl_k_mutex_unlock(mutex);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f008 ffe9 	bl	800ad8c <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mut_led_strip_busy);
}
 8001dba:	b003      	add	sp, #12
 8001dbc:	bd30      	pop	{r4, r5, pc}
        set_con_status_pixels(strip_state->con_status, &pos);
 8001dbe:	f10d 0107 	add.w	r1, sp, #7
 8001dc2:	7820      	ldrb	r0, [r4, #0]
 8001dc4:	f7ff ff86 	bl	8001cd4 <set_con_status_pixels>
 8001dc8:	e7e4      	b.n	8001d94 <update_indication+0x14>
        set_people_num_pixels(strip_state->people_num, &pos);
 8001dca:	f10d 0107 	add.w	r1, sp, #7
 8001dce:	7860      	ldrb	r0, [r4, #1]
 8001dd0:	f7ff ffb0 	bl	8001d34 <set_people_num_pixels>
 8001dd4:	e7df      	b.n	8001d96 <update_indication+0x16>
 8001dd6:	bf00      	nop
 8001dd8:	200003c0 	.word	0x200003c0
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000cec 	.word	0x20000cec

08001de4 <periodic_timer_handler>:
    atomic_cas(&right_train_passed_msg_info.req_is_send, 0, 1);
    k_work_submit(&work_msg_mngr);
}

static void periodic_timer_handler(struct k_timer *tim)
{
 8001de4:	b508      	push	{r3, lr}
//    k_msgq_put(&peripheral_msgq_tx_msg_prio, &alarm_msg, K_NO_WAIT);
    current_state = transmit_state;
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <periodic_timer_handler+0x18>)
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <periodic_timer_handler+0x1c>)
 8001dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dee:	e883 0003 	stmia.w	r3, {r0, r1}
    k_wakeup(modem_task_id);
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <periodic_timer_handler+0x20>)
 8001df4:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001df6:	f00d ff7e 	bl	800fcf6 <z_impl_k_wakeup>
}
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	20000d3c 	.word	0x20000d3c
 8001e00:	080110b0 	.word	0x080110b0
 8001e04:	080110e4 	.word	0x080110e4

08001e08 <work_msg_mngr_handler>:
    k_mutex_unlock(&mut_buzzer_mode);
}


static void work_msg_mngr_handler(struct k_work *item)
{
 8001e08:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 8001e0a:	4c16      	ldr	r4, [pc, #88]	; (8001e64 <work_msg_mngr_handler+0x5c>)
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e14:	4620      	mov	r0, r4
 8001e16:	f008 ff2f 	bl	800ac78 <z_impl_k_mutex_lock>
    k_mutex_lock(&mut_msg_info, K_FOREVER);
    check_msg_status(&disable_alarm_msg_info);
 8001e1a:	4813      	ldr	r0, [pc, #76]	; (8001e68 <work_msg_mngr_handler+0x60>)
 8001e1c:	f00b ff06 	bl	800dc2c <check_msg_status>
    check_msg_status(&right_train_passed_msg_info);
 8001e20:	4812      	ldr	r0, [pc, #72]	; (8001e6c <work_msg_mngr_handler+0x64>)
 8001e22:	f00b ff03 	bl	800dc2c <check_msg_status>
    check_msg_status(&left_train_passed_msg_info);
 8001e26:	4812      	ldr	r0, [pc, #72]	; (8001e70 <work_msg_mngr_handler+0x68>)
 8001e28:	f00b ff00 	bl	800dc2c <check_msg_status>
	return z_impl_k_mutex_unlock(mutex);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f008 ffad 	bl	800ad8c <z_impl_k_mutex_unlock>
    k_mutex_unlock(&mut_msg_info);

    set_color(COMMON_STRIP_COLOR_YELLOW);
 8001e32:	2004      	movs	r0, #4
 8001e34:	f7ff ff08 	bl	8001c48 <set_color>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001e38:	2205      	movs	r2, #5
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <work_msg_mngr_handler+0x6c>)
 8001e3e:	f008 ff1b 	bl	800ac78 <z_impl_k_mutex_lock>

    if (!k_mutex_lock(&mut_buzzer_mode, K_USEC(500))) {
 8001e42:	b100      	cbz	r0, 8001e46 <work_msg_mngr_handler+0x3e>
        buzzer_mode.single = true;
        k_mutex_unlock(&mut_buzzer_mode);
        while(k_work_busy_get(&work_buzzer));
        k_work_submit(&work_buzzer);
    }
}
 8001e44:	bd10      	pop	{r4, pc}
        buzzer_mode.single = true;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <work_msg_mngr_handler+0x70>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
	return z_impl_k_mutex_unlock(mutex);
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <work_msg_mngr_handler+0x6c>)
 8001e4e:	f008 ff9d 	bl	800ad8c <z_impl_k_mutex_unlock>
        while(k_work_busy_get(&work_buzzer));
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <work_msg_mngr_handler+0x74>)
 8001e54:	f00d fd9f 	bl	800f996 <k_work_busy_get>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d1fa      	bne.n	8001e52 <work_msg_mngr_handler+0x4a>
        k_work_submit(&work_buzzer);
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <work_msg_mngr_handler+0x74>)
 8001e5e:	f009 f949 	bl	800b0f4 <k_work_submit>
 8001e62:	e7ef      	b.n	8001e44 <work_msg_mngr_handler+0x3c>
 8001e64:	20000db8 	.word	0x20000db8
 8001e68:	20000d4c 	.word	0x20000d4c
 8001e6c:	20000d7c 	.word	0x20000d7c
 8001e70:	20000d64 	.word	0x20000d64
 8001e74:	20000da4 	.word	0x20000da4
 8001e78:	20000d90 	.word	0x20000d90
 8001e7c:	20000ddc 	.word	0x20000ddc

08001e80 <button_disable_alarm_pressed_cb>:
{
 8001e80:	b510      	push	{r4, lr}
 8001e82:	b090      	sub	sp, #64	; 0x40
    LOG_DBG("Button disable alarm pressed");
 8001e84:	2401      	movs	r4, #1
 8001e86:	f8ad 4008 	strh.w	r4, [sp, #8]
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <button_disable_alarm_pressed_cb+0x78>)
 8001e92:	930e      	str	r3, [sp, #56]	; 0x38
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <button_disable_alarm_pressed_cb+0x7c>)
 8001e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f88d 2004 	strb.w	r2, [sp, #4]
 8001ea2:	9a01      	ldr	r2, [sp, #4]
 8001ea4:	920d      	str	r2, [sp, #52]	; 0x34
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f363 0100 	bfi	r1, r3, #0, #1
 8001eac:	f363 0141 	bfi	r1, r3, #1, #1
 8001eb0:	f363 0182 	bfi	r1, r3, #2, #1
 8001eb4:	f363 01c5 	bfi	r1, r3, #3, #3
 8001eb8:	2204      	movs	r2, #4
 8001eba:	f362 1188 	bfi	r1, r2, #6, #3
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	f362 2152 	bfi	r1, r2, #9, #10
 8001ec4:	f363 41de 	bfi	r1, r3, #19, #12
 8001ec8:	f363 71df 	bfi	r1, r3, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8001ecc:	aa0d      	add	r2, sp, #52	; 0x34
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <button_disable_alarm_pressed_cb+0x80>)
 8001ed0:	f00c fad9 	bl	800e486 <z_impl_z_log_msg2_static_create>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <button_disable_alarm_pressed_cb+0x84>)
 8001ed6:	f3bf 8f5b 	dmb	ish
 8001eda:	e853 2f00 	ldrex	r2, [r3]
 8001ede:	2a00      	cmp	r2, #0
 8001ee0:	d103      	bne.n	8001eea <button_disable_alarm_pressed_cb+0x6a>
 8001ee2:	e843 4100 	strex	r1, r4, [r3]
 8001ee6:	2900      	cmp	r1, #0
 8001ee8:	d1f7      	bne.n	8001eda <button_disable_alarm_pressed_cb+0x5a>
 8001eea:	f3bf 8f5b 	dmb	ish
    k_work_submit(&work_msg_mngr);
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <button_disable_alarm_pressed_cb+0x88>)
 8001ef0:	f009 f900 	bl	800b0f4 <k_work_submit>
}
 8001ef4:	b010      	add	sp, #64	; 0x40
 8001ef6:	bd10      	pop	{r4, pc}
 8001ef8:	08010db0 	.word	0x08010db0
 8001efc:	0801104c 	.word	0x0801104c
 8001f00:	08010b70 	.word	0x08010b70
 8001f04:	20000d4c 	.word	0x20000d4c
 8001f08:	20000dfc 	.word	0x20000dfc

08001f0c <send_msg>:
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	b092      	sub	sp, #72	; 0x48
    volatile int rc = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t new_msg = 0;
 8001f14:	930a      	str	r3, [sp, #40]	; 0x28
	return z_impl_k_mutex_lock(mutex, timeout);
 8001f16:	220a      	movs	r2, #10
 8001f18:	2300      	movs	r3, #0
 8001f1a:	484a      	ldr	r0, [pc, #296]	; (8002044 <send_msg+0x138>)
 8001f1c:	f008 feac 	bl	800ac78 <z_impl_k_mutex_lock>
    if (!k_mutex_lock(&mut_msg_info, K_MSEC(1))) {
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d15b      	bne.n	8001fdc <send_msg+0xd0>
        if (msgq_tx_msg_prio.used_msgs) {
 8001f24:	4b48      	ldr	r3, [pc, #288]	; (8002048 <send_msg+0x13c>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	b99b      	cbnz	r3, 8001f52 <send_msg+0x46>
        } else if (msgq_tx_msg.used_msgs) {
 8001f2a:	4b48      	ldr	r3, [pc, #288]	; (800204c <send_msg+0x140>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	b1c3      	cbz	r3, 8001f62 <send_msg+0x56>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001f30:	4e46      	ldr	r6, [pc, #280]	; (800204c <send_msg+0x140>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	2300      	movs	r3, #0
 8001f36:	4946      	ldr	r1, [pc, #280]	; (8002050 <send_msg+0x144>)
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f008 fe3d 	bl	800abb8 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
 8001f3e:	4841      	ldr	r0, [pc, #260]	; (8002044 <send_msg+0x138>)
 8001f40:	f008 ff24 	bl	800ad8c <z_impl_k_mutex_unlock>
    read_write_message(&new_msg, &tx_msg, true);
 8001f44:	2201      	movs	r2, #1
 8001f46:	4942      	ldr	r1, [pc, #264]	; (8002050 <send_msg+0x144>)
 8001f48:	a80a      	add	r0, sp, #40	; 0x28
 8001f4a:	f001 fa9d 	bl	8003488 <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001f4e:	2400      	movs	r4, #0
 8001f50:	e019      	b.n	8001f86 <send_msg+0x7a>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001f52:	4e3d      	ldr	r6, [pc, #244]	; (8002048 <send_msg+0x13c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	493d      	ldr	r1, [pc, #244]	; (8002050 <send_msg+0x144>)
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	f008 fe2c 	bl	800abb8 <z_impl_k_msgq_get>
            cur_queue = &msgq_tx_msg_prio;
 8001f60:	e7ed      	b.n	8001f3e <send_msg+0x32>
	return z_impl_k_mutex_unlock(mutex);
 8001f62:	4838      	ldr	r0, [pc, #224]	; (8002044 <send_msg+0x138>)
 8001f64:	f008 ff12 	bl	800ad8c <z_impl_k_mutex_unlock>
            return;
 8001f68:	e038      	b.n	8001fdc <send_msg+0xd0>
        tx_buf[i] = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 8001f6a:	00e3      	lsls	r3, r4, #3
 8001f6c:	20ff      	movs	r0, #255	; 0xff
 8001f6e:	4098      	lsls	r0, r3
 8001f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f72:	4010      	ands	r0, r2
 8001f74:	40d8      	lsrs	r0, r3
 8001f76:	b2c0      	uxtb	r0, r0
 8001f78:	4d36      	ldr	r5, [pc, #216]	; (8002054 <send_msg+0x148>)
 8001f7a:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001f7c:	f00b fe09 	bl	800db92 <reverse>
 8001f80:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001f82:	3401      	adds	r4, #1
 8001f84:	b2e4      	uxtb	r4, r4
 8001f86:	2c02      	cmp	r4, #2
 8001f88:	d9ef      	bls.n	8001f6a <send_msg+0x5e>
    if (!lora_cfg.tx) {
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <send_msg+0x14c>)
 8001f8c:	7adb      	ldrb	r3, [r3, #11]
 8001f8e:	b95b      	cbnz	r3, 8001fa8 <send_msg+0x9c>
        lora_cfg.tx = true;
 8001f90:	4931      	ldr	r1, [pc, #196]	; (8002058 <send_msg+0x14c>)
 8001f92:	2301      	movs	r3, #1
 8001f94:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <send_msg+0x150>)
 8001f98:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001f9a:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4798      	blx	r3
 8001fa0:	900b      	str	r0, [sp, #44]	; 0x2c
        if (rc < 0) {
 8001fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db1b      	blt.n	8001fe0 <send_msg+0xd4>
    rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <send_msg+0x150>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001fac:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4928      	ldr	r1, [pc, #160]	; (8002054 <send_msg+0x148>)
 8001fb4:	4798      	blx	r3
 8001fb6:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!rc)
 8001fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d13f      	bne.n	800203e <send_msg+0x132>
        color = COMMON_STRIP_COLOR_GREEN;
 8001fbe:	2401      	movs	r4, #1
    while(k_work_busy_get(&work_led_strip_blink));
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <send_msg+0x154>)
 8001fc2:	f00d fce8 	bl	800f996 <k_work_busy_get>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d1fa      	bne.n	8001fc0 <send_msg+0xb4>
    set_blink_param(color, K_MSEC(100));
 8001fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fce:	2300      	movs	r3, #0
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff fda7 	bl	8001b24 <set_blink_param>
    k_work_submit(&work_led_strip_blink);
 8001fd6:	4822      	ldr	r0, [pc, #136]	; (8002060 <send_msg+0x154>)
 8001fd8:	f009 f88c 	bl	800b0f4 <k_work_submit>
}
 8001fdc:	b012      	add	sp, #72	; 0x48
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
            LOG_DBG("Modem not configure!!!");
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <send_msg+0x158>)
 8001fee:	9310      	str	r3, [sp, #64]	; 0x40
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <send_msg+0x15c>)
 8001ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f88d 2004 	strb.w	r2, [sp, #4]
 8001ffe:	9a01      	ldr	r2, [sp, #4]
 8002000:	920f      	str	r2, [sp, #60]	; 0x3c
 8002002:	4619      	mov	r1, r3
 8002004:	f363 0100 	bfi	r1, r3, #0, #1
 8002008:	f363 0141 	bfi	r1, r3, #1, #1
 800200c:	f363 0182 	bfi	r1, r3, #2, #1
 8002010:	f363 01c5 	bfi	r1, r3, #3, #3
 8002014:	2204      	movs	r2, #4
 8002016:	f362 1188 	bfi	r1, r2, #6, #3
 800201a:	220c      	movs	r2, #12
 800201c:	f362 2152 	bfi	r1, r2, #9, #10
 8002020:	f363 41de 	bfi	r1, r3, #19, #12
 8002024:	f363 71df 	bfi	r1, r3, #31, #1
 8002028:	aa0f      	add	r2, sp, #60	; 0x3c
 800202a:	4810      	ldr	r0, [pc, #64]	; (800206c <send_msg+0x160>)
 800202c:	f00c fa2b 	bl	800e486 <z_impl_z_log_msg2_static_create>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002030:	2200      	movs	r2, #0
 8002032:	2300      	movs	r3, #0
 8002034:	4906      	ldr	r1, [pc, #24]	; (8002050 <send_msg+0x144>)
 8002036:	4630      	mov	r0, r6
 8002038:	f008 fd62 	bl	800ab00 <z_impl_k_msgq_put>
            return;
 800203c:	e7ce      	b.n	8001fdc <send_msg+0xd0>
        color = COMMON_STRIP_COLOR_RED;
 800203e:	2400      	movs	r4, #0
 8002040:	e7be      	b.n	8001fc0 <send_msg+0xb4>
 8002042:	bf00      	nop
 8002044:	20000db8 	.word	0x20000db8
 8002048:	20000470 	.word	0x20000470
 800204c:	2000043c 	.word	0x2000043c
 8002050:	20000dd4 	.word	0x20000dd4
 8002054:	20000dd0 	.word	0x20000dd0
 8002058:	20000d94 	.word	0x20000d94
 800205c:	20000da0 	.word	0x20000da0
 8002060:	20000dec 	.word	0x20000dec
 8002064:	08010dd4 	.word	0x08010dd4
 8002068:	08011078 	.word	0x08011078
 800206c:	08010b70 	.word	0x08010b70

08002070 <recv_msg>:
{
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002074:	b09d      	sub	sp, #116	; 0x74
    volatile int rc = -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207a:	930f      	str	r3, [sp, #60]	; 0x3c
    volatile uint32_t ticks = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t rssi = 0;
 8002080:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    int8_t snr = 0;
 8002084:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (lora_cfg.tx) {
 8002088:	4b66      	ldr	r3, [pc, #408]	; (8002224 <recv_msg+0x1b4>)
 800208a:	7adb      	ldrb	r3, [r3, #11]
 800208c:	b15b      	cbz	r3, 80020a6 <recv_msg+0x36>
        lora_cfg.tx = false;
 800208e:	4965      	ldr	r1, [pc, #404]	; (8002224 <recv_msg+0x1b4>)
 8002090:	2300      	movs	r3, #0
 8002092:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <recv_msg+0x1b8>)
 8002096:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8002098:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4798      	blx	r3
 800209e:	900f      	str	r0, [sp, #60]	; 0x3c
        if (rc < 0) {
 80020a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db46      	blt.n	8002134 <recv_msg+0xc4>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
 80020a6:	4861      	ldr	r0, [pc, #388]	; (800222c <recv_msg+0x1bc>)
 80020a8:	f00d fed4 	bl	800fe54 <z_timeout_remaining>
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
 80020ac:	4b60      	ldr	r3, [pc, #384]	; (8002230 <recv_msg+0x1c0>)
 80020ae:	fba3 3000 	umull	r3, r0, r3, r0
 80020b2:	08c0      	lsrs	r0, r0, #3
    ticks = k_ticks_to_ms_floor32(k_timer_remaining_ticks(&periodic_timer));
 80020b4:	900e      	str	r0, [sp, #56]	; 0x38
    if ( current_state.state == RECEIVE ) {
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <recv_msg+0x1c4>)
 80020b8:	791b      	ldrb	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13a      	bne.n	8002134 <recv_msg+0xc4>
        rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES,
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <recv_msg+0x1b8>)
 80020c0:	6818      	ldr	r0, [r3, #0]
                       K_MSEC(ticks), &rssi, &snr);
 80020c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020c4:	b113      	cbz	r3, 80020cc <recv_msg+0x5c>
 80020c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80020c8:	2200      	movs	r2, #0
 80020ca:	e001      	b.n	80020d0 <recv_msg+0x60>
 80020cc:	2100      	movs	r1, #0
 80020ce:	460a      	mov	r2, r1
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 80020d0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 80020d4:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 80020d8:	008b      	lsls	r3, r1, #2
 80020da:	185b      	adds	r3, r3, r1
 80020dc:	eb42 020c 	adc.w	r2, r2, ip
 80020e0:	18db      	adds	r3, r3, r3
 80020e2:	4152      	adcs	r2, r2
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 80020e4:	6881      	ldr	r1, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 80020e6:	68cc      	ldr	r4, [r1, #12]
 80020e8:	f10d 0135 	add.w	r1, sp, #53	; 0x35
 80020ec:	9103      	str	r1, [sp, #12]
 80020ee:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80020f2:	9102      	str	r1, [sp, #8]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	494f      	ldr	r1, [pc, #316]	; (8002238 <recv_msg+0x1c8>)
 80020fc:	47a0      	blx	r4
        rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES,
 80020fe:	900f      	str	r0, [sp, #60]	; 0x3c
    if (rc > 0) {
 8002100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002102:	2b00      	cmp	r3, #0
 8002104:	dd16      	ble.n	8002134 <recv_msg+0xc4>
        if (IS_SYNC_MSG) {
 8002106:	4b4c      	ldr	r3, [pc, #304]	; (8002238 <recv_msg+0x1c8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b0d      	cmp	r3, #13
 800210c:	d015      	beq.n	800213a <recv_msg+0xca>
        k_msgq_put(&msgq_rx_msg, &rx_buf, K_NO_WAIT);
 800210e:	2400      	movs	r4, #0
 8002110:	2500      	movs	r5, #0
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	4948      	ldr	r1, [pc, #288]	; (8002238 <recv_msg+0x1c8>)
 8002118:	4848      	ldr	r0, [pc, #288]	; (800223c <recv_msg+0x1cc>)
 800211a:	f008 fcf1 	bl	800ab00 <z_impl_k_msgq_put>
 800211e:	4622      	mov	r2, r4
 8002120:	462b      	mov	r3, r5
 8002122:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8002126:	4846      	ldr	r0, [pc, #280]	; (8002240 <recv_msg+0x1d0>)
 8002128:	f008 fcea 	bl	800ab00 <z_impl_k_msgq_put>
        k_wakeup(proc_task_id);
 800212c:	4b45      	ldr	r3, [pc, #276]	; (8002244 <recv_msg+0x1d4>)
 800212e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8002130:	f00d fde1 	bl	800fcf6 <z_impl_k_wakeup>
}
 8002134:	b01d      	add	sp, #116	; 0x74
 8002136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (IS_SYNC_MSG) {
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <recv_msg+0x1c8>)
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d1e5      	bne.n	800210e <recv_msg+0x9e>
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <recv_msg+0x1c8>)
 8002144:	789b      	ldrb	r3, [r3, #2]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e1      	bne.n	800210e <recv_msg+0x9e>
            LOG_DBG(" REQUEST");
 800214a:	f04f 0b01 	mov.w	fp, #1
 800214e:	f8ad b014 	strh.w	fp, [sp, #20]
 8002152:	f04f 0a02 	mov.w	sl, #2
 8002156:	f8ad a016 	strh.w	sl, [sp, #22]
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <recv_msg+0x1d8>)
 800215c:	9314      	str	r3, [sp, #80]	; 0x50
 800215e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800224c <recv_msg+0x1dc>
 8002162:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8002166:	2400      	movs	r4, #0
 8002168:	9404      	str	r4, [sp, #16]
 800216a:	f04f 0803 	mov.w	r8, #3
 800216e:	f88d 8010 	strb.w	r8, [sp, #16]
 8002172:	9b04      	ldr	r3, [sp, #16]
 8002174:	9313      	str	r3, [sp, #76]	; 0x4c
 8002176:	4621      	mov	r1, r4
 8002178:	f364 0100 	bfi	r1, r4, #0, #1
 800217c:	f364 0141 	bfi	r1, r4, #1, #1
 8002180:	f364 0182 	bfi	r1, r4, #2, #1
 8002184:	f364 01c5 	bfi	r1, r4, #3, #3
 8002188:	2704      	movs	r7, #4
 800218a:	f367 1188 	bfi	r1, r7, #6, #3
 800218e:	260c      	movs	r6, #12
 8002190:	f366 2152 	bfi	r1, r6, #9, #10
 8002194:	f364 41de 	bfi	r1, r4, #19, #12
 8002198:	f364 71df 	bfi	r1, r4, #31, #1
 800219c:	4d2c      	ldr	r5, [pc, #176]	; (8002250 <recv_msg+0x1e0>)
 800219e:	4623      	mov	r3, r4
 80021a0:	aa13      	add	r2, sp, #76	; 0x4c
 80021a2:	4628      	mov	r0, r5
 80021a4:	f00c f96f 	bl	800e486 <z_impl_z_log_msg2_static_create>
            LOG_DBG(" MESSAGE_TYPE_SYNC");
 80021a8:	f8ad b014 	strh.w	fp, [sp, #20]
 80021ac:	f8ad a016 	strh.w	sl, [sp, #22]
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <recv_msg+0x1e4>)
 80021b2:	931a      	str	r3, [sp, #104]	; 0x68
 80021b4:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80021b8:	9404      	str	r4, [sp, #16]
 80021ba:	f88d 8010 	strb.w	r8, [sp, #16]
 80021be:	9b04      	ldr	r3, [sp, #16]
 80021c0:	9319      	str	r3, [sp, #100]	; 0x64
 80021c2:	4621      	mov	r1, r4
 80021c4:	f364 0100 	bfi	r1, r4, #0, #1
 80021c8:	f364 0141 	bfi	r1, r4, #1, #1
 80021cc:	f364 0182 	bfi	r1, r4, #2, #1
 80021d0:	f364 01c5 	bfi	r1, r4, #3, #3
 80021d4:	f367 1188 	bfi	r1, r7, #6, #3
 80021d8:	f366 2152 	bfi	r1, r6, #9, #10
 80021dc:	f364 41de 	bfi	r1, r4, #19, #12
 80021e0:	f364 71df 	bfi	r1, r4, #31, #1
 80021e4:	4623      	mov	r3, r4
 80021e6:	aa19      	add	r2, sp, #100	; 0x64
 80021e8:	4628      	mov	r0, r5
 80021ea:	f00c f94c 	bl	800e486 <z_impl_z_log_msg2_static_create>
	z_impl_k_timer_stop(timer);
 80021ee:	4c0f      	ldr	r4, [pc, #60]	; (800222c <recv_msg+0x1bc>)
 80021f0:	4620      	mov	r0, r4
 80021f2:	f00d fe87 	bl	800ff04 <z_impl_k_timer_stop>
            current_state = recv_state;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <recv_msg+0x1c4>)
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <recv_msg+0x1e8>)
 80021fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021fe:	e883 0003 	stmia.w	r3, {r0, r1}
	return z_impl_k_sleep(timeout);
 8002202:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002206:	2100      	movs	r1, #0
 8002208:	f009 fb42 	bl	800b890 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 800220c:	f649 1220 	movw	r2, #39200	; 0x9920
 8002210:	2300      	movs	r3, #0
 8002212:	e9cd 2300 	strd	r2, r3, [sp]
 8002216:	f242 6248 	movw	r2, #9800	; 0x2648
 800221a:	2300      	movs	r3, #0
 800221c:	4620      	mov	r0, r4
 800221e:	f009 fd75 	bl	800bd0c <z_impl_k_timer_start>
 8002222:	e774      	b.n	800210e <recv_msg+0x9e>
 8002224:	20000d94 	.word	0x20000d94
 8002228:	20000da0 	.word	0x20000da0
 800222c:	200004d0 	.word	0x200004d0
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	20000d3c 	.word	0x20000d3c
 8002238:	20000dcc 	.word	0x20000dcc
 800223c:	20000408 	.word	0x20000408
 8002240:	200003d4 	.word	0x200003d4
 8002244:	080110e8 	.word	0x080110e8
 8002248:	08010df0 	.word	0x08010df0
 800224c:	0801106c 	.word	0x0801106c
 8002250:	08010b70 	.word	0x08010b70
 8002254:	08010e00 	.word	0x08010e00
 8002258:	080110a8 	.word	0x080110a8

0800225c <work_buzzer_handler>:
{
 800225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002260:	b084      	sub	sp, #16
	return z_impl_k_mutex_lock(mutex, timeout);
 8002262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800226a:	4892      	ldr	r0, [pc, #584]	; (80024b4 <work_buzzer_handler+0x258>)
 800226c:	f008 fd04 	bl	800ac78 <z_impl_k_mutex_lock>
    if (buzzer_mode.single) {
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <work_buzzer_handler+0x25c>)
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d147      	bne.n	8002308 <work_buzzer_handler+0xac>
    } else if (buzzer_mode.continuous) {
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <work_buzzer_handler+0x25c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 80af 	bne.w	80023e0 <work_buzzer_handler+0x184>
    } else if (buzzer_mode.ding_dong) {
 8002282:	4b8d      	ldr	r3, [pc, #564]	; (80024b8 <work_buzzer_handler+0x25c>)
 8002284:	789b      	ldrb	r3, [r3, #2]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 81d8 	bne.w	800263c <work_buzzer_handler+0x3e0>
    pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800228c:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <work_buzzer_handler+0x260>)
 800228e:	681d      	ldr	r5, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 8002290:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	aa02      	add	r2, sp, #8
 8002296:	2102      	movs	r1, #2
 8002298:	4628      	mov	r0, r5
 800229a:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800229c:	bb70      	cbnz	r0, 80022fc <work_buzzer_handler+0xa0>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800229e:	9c02      	ldr	r4, [sp, #8]
 80022a0:	9e03      	ldr	r6, [sp, #12]
 80022a2:	00b2      	lsls	r2, r6, #2
 80022a4:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 80022a8:	00a3      	lsls	r3, r4, #2
 80022aa:	191b      	adds	r3, r3, r4
 80022ac:	eb46 0202 	adc.w	r2, r6, r2
 80022b0:	00d2      	lsls	r2, r2, #3
 80022b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1b1b      	subs	r3, r3, r4
 80022ba:	eb62 0206 	sbc.w	r2, r2, r6
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	191b      	adds	r3, r3, r4
 80022c8:	eb46 0602 	adc.w	r6, r6, r2
 80022cc:	01b6      	lsls	r6, r6, #6
 80022ce:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80022d2:	019c      	lsls	r4, r3, #6
 80022d4:	4a7a      	ldr	r2, [pc, #488]	; (80024c0 <work_buzzer_handler+0x264>)
 80022d6:	2300      	movs	r3, #0
 80022d8:	4620      	mov	r0, r4
 80022da:	4631      	mov	r1, r6
 80022dc:	f7fe fb7e 	bl	80009dc <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <work_buzzer_handler+0x268>)
 80022ea:	41b3      	sbcs	r3, r6
 80022ec:	d306      	bcc.n	80022fc <work_buzzer_handler+0xa0>
	api = (struct pwm_driver_api *)dev->api;
 80022ee:	68ab      	ldr	r3, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80022f0:	681c      	ldr	r4, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2102      	movs	r1, #2
 80022f8:	4628      	mov	r0, r5
 80022fa:	47a0      	blx	r4
	return z_impl_k_mutex_unlock(mutex);
 80022fc:	486d      	ldr	r0, [pc, #436]	; (80024b4 <work_buzzer_handler+0x258>)
 80022fe:	f008 fd45 	bl	800ad8c <z_impl_k_mutex_unlock>
}
 8002302:	b004      	add	sp, #16
 8002304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8002308:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <work_buzzer_handler+0x260>)
 800230a:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 800230e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	aa02      	add	r2, sp, #8
 8002316:	2102      	movs	r1, #2
 8002318:	4640      	mov	r0, r8
 800231a:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800231c:	2800      	cmp	r0, #0
 800231e:	d156      	bne.n	80023ce <work_buzzer_handler+0x172>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002320:	9e02      	ldr	r6, [sp, #8]
 8002322:	9f03      	ldr	r7, [sp, #12]
 8002324:	00bc      	lsls	r4, r7, #2
 8002326:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800232a:	00b3      	lsls	r3, r6, #2
 800232c:	199b      	adds	r3, r3, r6
 800232e:	eb47 0404 	adc.w	r4, r7, r4
 8002332:	00e4      	lsls	r4, r4, #3
 8002334:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1b9b      	subs	r3, r3, r6
 800233c:	eb64 0407 	sbc.w	r4, r4, r7
 8002340:	0124      	lsls	r4, r4, #4
 8002342:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	199b      	adds	r3, r3, r6
 800234a:	eb47 0404 	adc.w	r4, r7, r4
 800234e:	01a4      	lsls	r4, r4, #6
 8002350:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 8002354:	019d      	lsls	r5, r3, #6
 8002356:	4a5a      	ldr	r2, [pc, #360]	; (80024c0 <work_buzzer_handler+0x264>)
 8002358:	2300      	movs	r3, #0
 800235a:	4628      	mov	r0, r5
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fb3d 	bl	80009dc <__aeabi_uldivmod>
 8002362:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002368:	42ab      	cmp	r3, r5
 800236a:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <work_buzzer_handler+0x268>)
 800236c:	41a3      	sbcs	r3, r4
 800236e:	d32e      	bcc.n	80023ce <work_buzzer_handler+0x172>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002370:	00ba      	lsls	r2, r7, #2
 8002372:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 8002376:	00b3      	lsls	r3, r6, #2
 8002378:	199b      	adds	r3, r3, r6
 800237a:	eb47 0202 	adc.w	r2, r7, r2
 800237e:	00d2      	lsls	r2, r2, #3
 8002380:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1b9b      	subs	r3, r3, r6
 8002388:	eb62 0207 	sbc.w	r2, r2, r7
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	199e      	adds	r6, r3, r6
 8002396:	eb47 0702 	adc.w	r7, r7, r2
 800239a:	017f      	lsls	r7, r7, #5
 800239c:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 80023a0:	0176      	lsls	r6, r6, #5
 80023a2:	4a47      	ldr	r2, [pc, #284]	; (80024c0 <work_buzzer_handler+0x264>)
 80023a4:	2300      	movs	r3, #0
 80023a6:	4630      	mov	r0, r6
 80023a8:	4639      	mov	r1, r7
 80023aa:	f7fe fb17 	bl	80009dc <__aeabi_uldivmod>
 80023ae:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b4:	42b2      	cmp	r2, r6
 80023b6:	4a43      	ldr	r2, [pc, #268]	; (80024c4 <work_buzzer_handler+0x268>)
 80023b8:	41ba      	sbcs	r2, r7
 80023ba:	d308      	bcc.n	80023ce <work_buzzer_handler+0x172>
	api = (struct pwm_driver_api *)dev->api;
 80023bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80023c0:	6814      	ldr	r4, [r2, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	9200      	str	r2, [sp, #0]
 80023c6:	464a      	mov	r2, r9
 80023c8:	2102      	movs	r1, #2
 80023ca:	4640      	mov	r0, r8
 80023cc:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 80023ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80023d2:	2100      	movs	r1, #0
 80023d4:	f009 fa5c 	bl	800b890 <z_impl_k_sleep>
        buzzer_mode.single = false;
 80023d8:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <work_buzzer_handler+0x25c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	e755      	b.n	800228c <work_buzzer_handler+0x30>
        pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <work_buzzer_handler+0x260>)
 80023e2:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 80023e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	aa02      	add	r2, sp, #8
 80023ee:	2102      	movs	r1, #2
 80023f0:	4640      	mov	r0, r8
 80023f2:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d156      	bne.n	80024a6 <work_buzzer_handler+0x24a>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80023f8:	9e02      	ldr	r6, [sp, #8]
 80023fa:	9f03      	ldr	r7, [sp, #12]
 80023fc:	00bc      	lsls	r4, r7, #2
 80023fe:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 8002402:	00b3      	lsls	r3, r6, #2
 8002404:	199b      	adds	r3, r3, r6
 8002406:	eb47 0404 	adc.w	r4, r7, r4
 800240a:	00e4      	lsls	r4, r4, #3
 800240c:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1b9b      	subs	r3, r3, r6
 8002414:	eb64 0407 	sbc.w	r4, r4, r7
 8002418:	0124      	lsls	r4, r4, #4
 800241a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	199b      	adds	r3, r3, r6
 8002422:	eb47 0404 	adc.w	r4, r7, r4
 8002426:	01a4      	lsls	r4, r4, #6
 8002428:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800242c:	019d      	lsls	r5, r3, #6
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <work_buzzer_handler+0x264>)
 8002430:	2300      	movs	r3, #0
 8002432:	4628      	mov	r0, r5
 8002434:	4621      	mov	r1, r4
 8002436:	f7fe fad1 	bl	80009dc <__aeabi_uldivmod>
 800243a:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800243c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002440:	42ab      	cmp	r3, r5
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <work_buzzer_handler+0x268>)
 8002444:	41a3      	sbcs	r3, r4
 8002446:	d32e      	bcc.n	80024a6 <work_buzzer_handler+0x24a>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002448:	00ba      	lsls	r2, r7, #2
 800244a:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800244e:	00b3      	lsls	r3, r6, #2
 8002450:	199b      	adds	r3, r3, r6
 8002452:	eb47 0202 	adc.w	r2, r7, r2
 8002456:	00d2      	lsls	r2, r2, #3
 8002458:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1b9b      	subs	r3, r3, r6
 8002460:	eb62 0207 	sbc.w	r2, r2, r7
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	199e      	adds	r6, r3, r6
 800246e:	eb47 0702 	adc.w	r7, r7, r2
 8002472:	017f      	lsls	r7, r7, #5
 8002474:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 8002478:	0176      	lsls	r6, r6, #5
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <work_buzzer_handler+0x264>)
 800247c:	2300      	movs	r3, #0
 800247e:	4630      	mov	r0, r6
 8002480:	4639      	mov	r1, r7
 8002482:	f7fe faab 	bl	80009dc <__aeabi_uldivmod>
 8002486:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248c:	42b2      	cmp	r2, r6
 800248e:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <work_buzzer_handler+0x268>)
 8002490:	41ba      	sbcs	r2, r7
 8002492:	d308      	bcc.n	80024a6 <work_buzzer_handler+0x24a>
	api = (struct pwm_driver_api *)dev->api;
 8002494:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8002498:	6814      	ldr	r4, [r2, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	9200      	str	r2, [sp, #0]
 800249e:	464a      	mov	r2, r9
 80024a0:	2102      	movs	r1, #2
 80024a2:	4640      	mov	r0, r8
 80024a4:	47a0      	blx	r4
        buzzer_mode.continuous = false;
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <work_buzzer_handler+0x25c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <work_buzzer_handler+0x258>)
 80024ae:	f008 fc6d 	bl	800ad8c <z_impl_k_mutex_unlock>
        return;
 80024b2:	e726      	b.n	8002302 <work_buzzer_handler+0xa6>
 80024b4:	20000da4 	.word	0x20000da4
 80024b8:	20000d90 	.word	0x20000d90
 80024bc:	20000d8c 	.word	0x20000d8c
 80024c0:	000f4240 	.word	0x000f4240
 80024c4:	000f423f 	.word	0x000f423f
	return z_impl_k_sleep(timeout);
 80024c8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80024cc:	2100      	movs	r1, #0
 80024ce:	f009 f9df 	bl	800b890 <z_impl_k_sleep>
            i++;
 80024d2:	3501      	adds	r5, #1
 80024d4:	b2ed      	uxtb	r5, r5
        while (i < 2) {
 80024d6:	2d01      	cmp	r5, #1
 80024d8:	f200 80b2 	bhi.w	8002640 <work_buzzer_handler+0x3e4>
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80024dc:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <work_buzzer_handler+0x3f4>)
 80024de:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 80024e0:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	aa02      	add	r2, sp, #8
 80024e6:	2102      	movs	r1, #2
 80024e8:	4630      	mov	r0, r6
 80024ea:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d164      	bne.n	80025ba <work_buzzer_handler+0x35e>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80024f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80024f4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80024f8:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80024fc:	ea44 7499 	orr.w	r4, r4, r9, lsr #30
 8002500:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8002504:	eb10 0009 	adds.w	r0, r0, r9
 8002508:	eb48 0404 	adc.w	r4, r8, r4
 800250c:	00e4      	lsls	r4, r4, #3
 800250e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002512:	00c0      	lsls	r0, r0, #3
 8002514:	ebb0 0009 	subs.w	r0, r0, r9
 8002518:	eb64 0408 	sbc.w	r4, r4, r8
 800251c:	0124      	lsls	r4, r4, #4
 800251e:	ea44 7410 	orr.w	r4, r4, r0, lsr #28
 8002522:	0100      	lsls	r0, r0, #4
 8002524:	eb10 0009 	adds.w	r0, r0, r9
 8002528:	eb48 0404 	adc.w	r4, r8, r4
 800252c:	01a4      	lsls	r4, r4, #6
 800252e:	ea44 6490 	orr.w	r4, r4, r0, lsr #26
 8002532:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <work_buzzer_handler+0x3f8>)
 8002538:	2300      	movs	r3, #0
 800253a:	4650      	mov	r0, sl
 800253c:	4621      	mov	r1, r4
 800253e:	f7fe fa4d 	bl	80009dc <__aeabi_uldivmod>
 8002542:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002548:	4553      	cmp	r3, sl
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <work_buzzer_handler+0x3fc>)
 800254c:	41a3      	sbcs	r3, r4
 800254e:	d334      	bcc.n	80025ba <work_buzzer_handler+0x35e>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002550:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002554:	ea42 7299 	orr.w	r2, r2, r9, lsr #30
 8002558:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800255c:	eb13 0309 	adds.w	r3, r3, r9
 8002560:	eb48 0202 	adc.w	r2, r8, r2
 8002564:	00d2      	lsls	r2, r2, #3
 8002566:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	ebb3 0309 	subs.w	r3, r3, r9
 8002570:	eb62 0208 	sbc.w	r2, r2, r8
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	eb13 0309 	adds.w	r3, r3, r9
 8002580:	eb48 0802 	adc.w	r8, r8, r2
 8002584:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8002588:	ea48 68d3 	orr.w	r8, r8, r3, lsr #27
 800258c:	015c      	lsls	r4, r3, #5
 800258e:	4a31      	ldr	r2, [pc, #196]	; (8002654 <work_buzzer_handler+0x3f8>)
 8002590:	2300      	movs	r3, #0
 8002592:	4620      	mov	r0, r4
 8002594:	4641      	mov	r1, r8
 8002596:	f7fe fa21 	bl	80009dc <__aeabi_uldivmod>
 800259a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800259c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a0:	42a2      	cmp	r2, r4
 80025a2:	4a2d      	ldr	r2, [pc, #180]	; (8002658 <work_buzzer_handler+0x3fc>)
 80025a4:	eb72 0208 	sbcs.w	r2, r2, r8
 80025a8:	d307      	bcc.n	80025ba <work_buzzer_handler+0x35e>
	api = (struct pwm_driver_api *)dev->api;
 80025aa:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80025ac:	6814      	ldr	r4, [r2, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	463a      	mov	r2, r7
 80025b4:	2102      	movs	r1, #2
 80025b6:	4630      	mov	r0, r6
 80025b8:	47a0      	blx	r4
 80025ba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025be:	2100      	movs	r1, #0
 80025c0:	f009 f966 	bl	800b890 <z_impl_k_sleep>
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <work_buzzer_handler+0x3f4>)
 80025c6:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 80025c8:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	aa02      	add	r2, sp, #8
 80025ce:	2102      	movs	r1, #2
 80025d0:	4630      	mov	r0, r6
 80025d2:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f47f af77 	bne.w	80024c8 <work_buzzer_handler+0x26c>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80025da:	9c02      	ldr	r4, [sp, #8]
 80025dc:	9f03      	ldr	r7, [sp, #12]
 80025de:	00ba      	lsls	r2, r7, #2
 80025e0:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 80025e4:	00a3      	lsls	r3, r4, #2
 80025e6:	191b      	adds	r3, r3, r4
 80025e8:	eb47 0202 	adc.w	r2, r7, r2
 80025ec:	00d2      	lsls	r2, r2, #3
 80025ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1b1b      	subs	r3, r3, r4
 80025f6:	eb62 0207 	sbc.w	r2, r2, r7
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	191b      	adds	r3, r3, r4
 8002604:	eb47 0702 	adc.w	r7, r7, r2
 8002608:	01bf      	lsls	r7, r7, #6
 800260a:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 800260e:	019c      	lsls	r4, r3, #6
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <work_buzzer_handler+0x3f8>)
 8002612:	2300      	movs	r3, #0
 8002614:	4620      	mov	r0, r4
 8002616:	4639      	mov	r1, r7
 8002618:	f7fe f9e0 	bl	80009dc <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800261e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002622:	42a3      	cmp	r3, r4
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <work_buzzer_handler+0x3fc>)
 8002626:	41bb      	sbcs	r3, r7
 8002628:	f4ff af4e 	bcc.w	80024c8 <work_buzzer_handler+0x26c>
	api = (struct pwm_driver_api *)dev->api;
 800262c:	68b3      	ldr	r3, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800262e:	681c      	ldr	r4, [r3, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2102      	movs	r1, #2
 8002636:	4630      	mov	r0, r6
 8002638:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
 800263a:	e745      	b.n	80024c8 <work_buzzer_handler+0x26c>
        uint8_t i = 0;
 800263c:	2500      	movs	r5, #0
 800263e:	e74a      	b.n	80024d6 <work_buzzer_handler+0x27a>
        buzzer_mode.ding_dong = false;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <work_buzzer_handler+0x400>)
 8002642:	2200      	movs	r2, #0
 8002644:	709a      	strb	r2, [r3, #2]
	return z_impl_k_mutex_unlock(mutex);
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <work_buzzer_handler+0x404>)
 8002648:	f008 fba0 	bl	800ad8c <z_impl_k_mutex_unlock>
        return;
 800264c:	e659      	b.n	8002302 <work_buzzer_handler+0xa6>
 800264e:	bf00      	nop
 8002650:	20000d8c 	.word	0x20000d8c
 8002654:	000f4240 	.word	0x000f4240
 8002658:	000f423f 	.word	0x000f423f
 800265c:	20000d90 	.word	0x20000d90
 8002660:	20000da4 	.word	0x20000da4

08002664 <system_init>:
{
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	b086      	sub	sp, #24
    volatile int rc = -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266c:	9305      	str	r3, [sp, #20]
    buzzer_dev_ptr = DEVICE_DT_GET(PWM_CTLR);
 800266e:	4851      	ldr	r0, [pc, #324]	; (80027b4 <system_init+0x150>)
 8002670:	4b51      	ldr	r3, [pc, #324]	; (80027b8 <system_init+0x154>)
 8002672:	6018      	str	r0, [r3, #0]
 8002674:	f00d f8c7 	bl	800f806 <z_device_is_ready>
    if (!device_is_ready(buzzer_dev_ptr)) {
 8002678:	2800      	cmp	r0, #0
 800267a:	f000 8082 	beq.w	8002782 <system_init+0x11e>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800267e:	484f      	ldr	r0, [pc, #316]	; (80027bc <system_init+0x158>)
 8002680:	f007 ffc6 	bl	800a610 <z_impl_device_get_binding>
    button_disable_alarm_gpio_dev_ptr = device_get_binding(BUTTON_DISABLE_ALARM_GPIO_PORT);
 8002684:	4c4e      	ldr	r4, [pc, #312]	; (80027c0 <system_init+0x15c>)
 8002686:	6020      	str	r0, [r4, #0]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8002688:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 800268a:	6902      	ldr	r2, [r0, #16]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002692:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
 8002694:	680b      	ldr	r3, [r1, #0]
 8002696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269a:	210d      	movs	r1, #13
 800269c:	4798      	blx	r3
    gpio_pin_interrupt_configure(button_disable_alarm_gpio_dev_ptr, BUTTON_DISABLE_ALARM_GPIO_PIN,
 800269e:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 80026a0:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 80026a2:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80026a4:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80026a6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80026aa:	d17f      	bne.n	80027ac <system_init+0x148>
 80026ac:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80026b0:	699c      	ldr	r4, [r3, #24]
 80026b2:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80026b6:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 80026ba:	210d      	movs	r1, #13
 80026bc:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <system_init+0x160>)
 80026c0:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <system_init+0x164>)
 80026c2:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 80026c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c8:	609a      	str	r2, [r3, #8]
    gpio_add_callback(button_disable_alarm_gpio_dev_ptr, &button_disable_alarm_cb);
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <system_init+0x15c>)
 80026cc:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 80026ce:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	b113      	cbz	r3, 80026da <system_init+0x76>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 80026d4:	2201      	movs	r2, #1
 80026d6:	493b      	ldr	r1, [pc, #236]	; (80027c4 <system_init+0x160>)
 80026d8:	4798      	blx	r3
    k_work_init(&work_buzzer, work_buzzer_handler);
 80026da:	4c3c      	ldr	r4, [pc, #240]	; (80027cc <system_init+0x168>)
 80026dc:	493c      	ldr	r1, [pc, #240]	; (80027d0 <system_init+0x16c>)
 80026de:	4620      	mov	r0, r4
 80026e0:	f00d f952 	bl	800f988 <k_work_init>
    k_work_init(&work_msg_mngr, work_msg_mngr_handler);
 80026e4:	493b      	ldr	r1, [pc, #236]	; (80027d4 <system_init+0x170>)
 80026e6:	483c      	ldr	r0, [pc, #240]	; (80027d8 <system_init+0x174>)
 80026e8:	f00d f94e 	bl	800f988 <k_work_init>
    k_work_init(&work_led_strip_blink, blink);
 80026ec:	493b      	ldr	r1, [pc, #236]	; (80027dc <system_init+0x178>)
 80026ee:	483c      	ldr	r0, [pc, #240]	; (80027e0 <system_init+0x17c>)
 80026f0:	f00d f94a 	bl	800f988 <k_work_init>
    k_timer_init(&periodic_timer, periodic_timer_handler, NULL);
 80026f4:	2200      	movs	r2, #0
 80026f6:	493b      	ldr	r1, [pc, #236]	; (80027e4 <system_init+0x180>)
 80026f8:	483b      	ldr	r0, [pc, #236]	; (80027e8 <system_init+0x184>)
 80026fa:	f00d fbf7 	bl	800feec <k_timer_init>
	return z_impl_k_mutex_init(mutex);
 80026fe:	483b      	ldr	r0, [pc, #236]	; (80027ec <system_init+0x188>)
 8002700:	f00d f928 	bl	800f954 <z_impl_k_mutex_init>
 8002704:	483a      	ldr	r0, [pc, #232]	; (80027f0 <system_init+0x18c>)
 8002706:	f00d f925 	bl	800f954 <z_impl_k_mutex_init>
    update_indication(&led_strip_state, true, true);
 800270a:	2201      	movs	r2, #1
 800270c:	4611      	mov	r1, r2
 800270e:	4839      	ldr	r0, [pc, #228]	; (80027f4 <system_init+0x190>)
 8002710:	f7ff fb36 	bl	8001d80 <update_indication>
    current_state = recv_state;
 8002714:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <system_init+0x194>)
 8002716:	4a39      	ldr	r2, [pc, #228]	; (80027fc <system_init+0x198>)
 8002718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271c:	e883 0003 	stmia.w	r3, {r0, r1}
    disable_alarm_msg.receiver_addr = BASE_STATION_ADDR;
 8002720:	4a37      	ldr	r2, [pc, #220]	; (8002800 <system_init+0x19c>)
 8002722:	2300      	movs	r3, #0
 8002724:	7053      	strb	r3, [r2, #1]
    disable_alarm_msg.sender_addr = cur_dev_addr;
 8002726:	2003      	movs	r0, #3
 8002728:	7010      	strb	r0, [r2, #0]
    disable_alarm_msg.message_type = MESSAGE_TYPE_DISABLE_ALARM;
 800272a:	2101      	movs	r1, #1
 800272c:	7091      	strb	r1, [r2, #2]
    disable_alarm_msg.direction = REQUEST;
 800272e:	70d1      	strb	r1, [r2, #3]
    disable_alarm_msg.battery_level = cur_battery_level;
 8002730:	7113      	strb	r3, [r2, #4]
    disable_alarm_msg.workers_in_safe_zone = 0;
 8002732:	7153      	strb	r3, [r2, #5]
    disable_alarm_msg_info.msg_buf = &msgq_tx_msg_prio;
 8002734:	4d33      	ldr	r5, [pc, #204]	; (8002804 <system_init+0x1a0>)
 8002736:	4e34      	ldr	r6, [pc, #208]	; (8002808 <system_init+0x1a4>)
 8002738:	60ae      	str	r6, [r5, #8]
    disable_alarm_msg_info.msg = &disable_alarm_msg;
 800273a:	60ea      	str	r2, [r5, #12]
    disable_alarm_msg_info.req_is_send = ATOMIC_INIT(0);
 800273c:	602b      	str	r3, [r5, #0]
    disable_alarm_msg_info.resp_is_recv = ATOMIC_INIT(0);
 800273e:	606b      	str	r3, [r5, #4]
    left_train_passed_msg.receiver_addr = BASE_STATION_ADDR;
 8002740:	4a32      	ldr	r2, [pc, #200]	; (800280c <system_init+0x1a8>)
 8002742:	7053      	strb	r3, [r2, #1]
    left_train_passed_msg.sender_addr = cur_dev_addr;
 8002744:	7010      	strb	r0, [r2, #0]
    left_train_passed_msg.message_type = MESSAGE_TYPE_LEFT_TRAIN_PASSED;
 8002746:	7090      	strb	r0, [r2, #2]
    left_train_passed_msg.direction = REQUEST;
 8002748:	70d1      	strb	r1, [r2, #3]
    left_train_passed_msg.battery_level = cur_battery_level;
 800274a:	7113      	strb	r3, [r2, #4]
    left_train_passed_msg.workers_in_safe_zone = 0;
 800274c:	7153      	strb	r3, [r2, #5]
    left_train_passed_msg_info.msg_buf = &msgq_tx_msg;
 800274e:	4d30      	ldr	r5, [pc, #192]	; (8002810 <system_init+0x1ac>)
 8002750:	4e30      	ldr	r6, [pc, #192]	; (8002814 <system_init+0x1b0>)
 8002752:	60ae      	str	r6, [r5, #8]
    left_train_passed_msg_info.msg = &left_train_passed_msg;
 8002754:	60ea      	str	r2, [r5, #12]
    left_train_passed_msg_info.req_is_send = ATOMIC_INIT(0);
 8002756:	602b      	str	r3, [r5, #0]
    left_train_passed_msg_info.resp_is_recv = ATOMIC_INIT(0);
 8002758:	606b      	str	r3, [r5, #4]
    right_train_passed_msg.receiver_addr = BASE_STATION_ADDR;
 800275a:	4a2f      	ldr	r2, [pc, #188]	; (8002818 <system_init+0x1b4>)
 800275c:	7053      	strb	r3, [r2, #1]
    right_train_passed_msg.sender_addr = cur_dev_addr;
 800275e:	7010      	strb	r0, [r2, #0]
    right_train_passed_msg.message_type = MESSAGE_TYPE_RIGHT_TRAIN_PASSED;
 8002760:	2004      	movs	r0, #4
 8002762:	7090      	strb	r0, [r2, #2]
    right_train_passed_msg.direction = REQUEST;
 8002764:	70d1      	strb	r1, [r2, #3]
    right_train_passed_msg.battery_level = cur_battery_level;
 8002766:	7113      	strb	r3, [r2, #4]
    right_train_passed_msg.workers_in_safe_zone = 0;
 8002768:	7153      	strb	r3, [r2, #5]
    right_train_passed_msg_info.msg_buf = &msgq_tx_msg;
 800276a:	482c      	ldr	r0, [pc, #176]	; (800281c <system_init+0x1b8>)
 800276c:	6086      	str	r6, [r0, #8]
    right_train_passed_msg_info.msg = &right_train_passed_msg;
 800276e:	60c2      	str	r2, [r0, #12]
    right_train_passed_msg_info.req_is_send = ATOMIC_INIT(0);
 8002770:	6003      	str	r3, [r0, #0]
    right_train_passed_msg_info.resp_is_recv = ATOMIC_INIT(0);
 8002772:	6043      	str	r3, [r0, #4]
    buzzer_mode.single = true;
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <system_init+0x1bc>)
 8002776:	7059      	strb	r1, [r3, #1]
    k_work_submit(&work_buzzer);
 8002778:	4620      	mov	r0, r4
 800277a:	f008 fcbb 	bl	800b0f4 <k_work_submit>
}
 800277e:	b006      	add	sp, #24
 8002780:	bd70      	pop	{r4, r5, r6, pc}
        LOG_DBG("Error: PWM device %s is not ready\n", buzzer_dev_ptr->name);
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <system_init+0x154>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	9303      	str	r3, [sp, #12]
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <system_init+0x1c0>)
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <system_init+0x1c4>)
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	9000      	str	r0, [sp, #0]
 8002794:	4603      	mov	r3, r0
 8002796:	2204      	movs	r2, #4
 8002798:	4924      	ldr	r1, [pc, #144]	; (800282c <system_init+0x1c8>)
 800279a:	f00b f9a8 	bl	800daee <z_log_msg2_runtime_create>
	return z_impl_k_sleep(timeout);
 800279e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a6:	f009 f873 	bl	800b890 <z_impl_k_sleep>
 80027aa:	e768      	b.n	800267e <system_init+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 80027ac:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 80027b0:	e77e      	b.n	80026b0 <system_init+0x4c>
 80027b2:	bf00      	nop
 80027b4:	08010858 	.word	0x08010858
 80027b8:	20000d8c 	.word	0x20000d8c
 80027bc:	08010e40 	.word	0x08010e40
 80027c0:	20000d38 	.word	0x20000d38
 80027c4:	20000d2c 	.word	0x20000d2c
 80027c8:	08001e81 	.word	0x08001e81
 80027cc:	20000ddc 	.word	0x20000ddc
 80027d0:	0800225d 	.word	0x0800225d
 80027d4:	08001e09 	.word	0x08001e09
 80027d8:	20000dfc 	.word	0x20000dfc
 80027dc:	08001b55 	.word	0x08001b55
 80027e0:	20000dec 	.word	0x20000dec
 80027e4:	08001de5 	.word	0x08001de5
 80027e8:	200004d0 	.word	0x200004d0
 80027ec:	20000db8 	.word	0x20000db8
 80027f0:	20000da4 	.word	0x20000da4
 80027f4:	20000ce8 	.word	0x20000ce8
 80027f8:	20000d3c 	.word	0x20000d3c
 80027fc:	080110a8 	.word	0x080110a8
 8002800:	20000d44 	.word	0x20000d44
 8002804:	20000d4c 	.word	0x20000d4c
 8002808:	20000470 	.word	0x20000470
 800280c:	20000d5c 	.word	0x20000d5c
 8002810:	20000d64 	.word	0x20000d64
 8002814:	2000043c 	.word	0x2000043c
 8002818:	20000d74 	.word	0x20000d74
 800281c:	20000d7c 	.word	0x20000d7c
 8002820:	20000d90 	.word	0x20000d90
 8002824:	0801109c 	.word	0x0801109c
 8002828:	08010e18 	.word	0x08010e18
 800282c:	08010b70 	.word	0x08010b70

08002830 <brigade_chief_proc_task>:
{
 8002830:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002834:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002838:	af00      	add	r7, sp, #0
    int16_t rssi = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    uint32_t cur_msg = 0;
 8002840:	67fb      	str	r3, [r7, #124]	; 0x7c
    struct message_s tx_msg_proc = {0};
 8002842:	677b      	str	r3, [r7, #116]	; 0x74
 8002844:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    struct message_s rx_msg_proc = {0};
 8002848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800284a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800284e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002852:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002856:	f009 f81b 	bl	800b890 <z_impl_k_sleep>
    struct k_msgq* msgq_cur_msg_tx_ptr = &msgq_tx_msg; // Default queue
 800285a:	4bbf      	ldr	r3, [pc, #764]	; (8002b58 <brigade_chief_proc_task+0x328>)
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	f000 bd1e 	b.w	800329e <brigade_chief_proc_task+0xa6e>
            cur_msg = 0;
 8002862:	2400      	movs	r4, #0
 8002864:	67fc      	str	r4, [r7, #124]	; 0x7c
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8002866:	e00c      	b.n	8002882 <brigade_chief_proc_task+0x52>
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 8002868:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800286c:	5d28      	ldrb	r0, [r5, r4]
 800286e:	f00b f990 	bl	800db92 <reverse>
 8002872:	5528      	strb	r0, [r5, r4]
                cur_msg |= (rx_buf_proc[i]) << i*8;
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	4098      	lsls	r0, r3
 8002878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800287a:	4318      	orrs	r0, r3
 800287c:	67f8      	str	r0, [r7, #124]	; 0x7c
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 800287e:	3401      	adds	r4, #1
 8002880:	b2e4      	uxtb	r4, r4
 8002882:	2c02      	cmp	r4, #2
 8002884:	d9f0      	bls.n	8002868 <brigade_chief_proc_task+0x38>
            read_write_message(&cur_msg, &rx_msg_proc, false); // rx_msg struct is fill
 8002886:	2200      	movs	r2, #0
 8002888:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800288c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8002890:	f000 fdfa 	bl	8003488 <read_write_message>
            if ( (rx_msg_proc.receiver_addr != BROADCAST_ADDR) &&
 8002894:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002898:	2b04      	cmp	r3, #4
 800289a:	d001      	beq.n	80028a0 <brigade_chief_proc_task+0x70>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d14c      	bne.n	800293a <brigade_chief_proc_task+0x10a>
            switch (rx_msg_proc.direction) {
 80028a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 823e 	beq.w	8002d26 <brigade_chief_proc_task+0x4f6>
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 84b4 	bne.w	8003218 <brigade_chief_proc_task+0x9e8>
                    LOG_DBG(" REQUEST");
 80028b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028b4:	2302      	movs	r3, #2
 80028b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028ba:	4ba8      	ldr	r3, [pc, #672]	; (8002b5c <brigade_chief_proc_task+0x32c>)
 80028bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028c0:	4ba7      	ldr	r3, [pc, #668]	; (8002b60 <brigade_chief_proc_task+0x330>)
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c6:	2400      	movs	r4, #0
 80028c8:	64bc      	str	r4, [r7, #72]	; 0x48
 80028ca:	2503      	movs	r5, #3
 80028cc:	f887 5048 	strb.w	r5, [r7, #72]	; 0x48
 80028d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028d6:	f364 0800 	bfi	r8, r4, #0, #1
 80028da:	f364 0841 	bfi	r8, r4, #1, #1
 80028de:	f364 0882 	bfi	r8, r4, #2, #1
 80028e2:	f364 08c5 	bfi	r8, r4, #3, #3
 80028e6:	2304      	movs	r3, #4
 80028e8:	f363 1888 	bfi	r8, r3, #6, #3
 80028ec:	230c      	movs	r3, #12
 80028ee:	f363 2852 	bfi	r8, r3, #9, #10
 80028f2:	f364 48de 	bfi	r8, r4, #19, #12
 80028f6:	f364 78df 	bfi	r8, r4, #31, #1
 80028fa:	4623      	mov	r3, r4
 80028fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002900:	4641      	mov	r1, r8
 8002902:	4898      	ldr	r0, [pc, #608]	; (8002b64 <brigade_chief_proc_task+0x334>)
 8002904:	f00b fdbf 	bl	800e486 <z_impl_z_log_msg2_static_create>
                    tx_msg_proc.sender_addr = cur_dev_addr;
 8002908:	f887 5074 	strb.w	r5, [r7, #116]	; 0x74
                    tx_msg_proc.message_type = rx_msg_proc.message_type;
 800290c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002910:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
                    tx_msg_proc.workers_in_safe_zone = 0;
 8002914:	f887 4079 	strb.w	r4, [r7, #121]	; 0x79
                    tx_msg_proc.direction = RESPONSE;
 8002918:	f887 4077 	strb.w	r4, [r7, #119]	; 0x77
                    tx_msg_proc.battery_level = BATTERY_LEVEL_GOOD; // change it after
 800291c:	f887 4078 	strb.w	r4, [r7, #120]	; 0x78
                    tx_msg_proc.receiver_addr = BASE_STATION_ADDR;
 8002920:	f887 4075 	strb.w	r4, [r7, #117]	; 0x75
                    switch (rx_msg_proc.message_type) {
 8002924:	2b05      	cmp	r3, #5
 8002926:	f200 81cc 	bhi.w	8002cc2 <brigade_chief_proc_task+0x492>
 800292a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800292e:	0162      	.short	0x0162
 8002930:	01270086 	.word	0x01270086
 8002934:	01980198 	.word	0x01980198
 8002938:	0509      	.short	0x0509
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, cur_dev_addr);
 800293a:	2201      	movs	r2, #1
 800293c:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8002940:	2202      	movs	r2, #2
 8002942:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 8002946:	f8c7 d040 	str.w	sp, [r7, #64]	; 0x40
 800294a:	b088      	sub	sp, #32
 800294c:	4669      	mov	r1, sp
 800294e:	f111 020c 	adds.w	r2, r1, #12
 8002952:	d06c      	beq.n	8002a2e <brigade_chief_proc_task+0x1fe>
 8002954:	2014      	movs	r0, #20
 8002956:	2401      	movs	r4, #1
 8002958:	f8a7 404c 	strh.w	r4, [r7, #76]	; 0x4c
 800295c:	b11a      	cbz	r2, 8002966 <brigade_chief_proc_task+0x136>
 800295e:	2804      	cmp	r0, #4
 8002960:	dd01      	ble.n	8002966 <brigade_chief_proc_task+0x136>
 8002962:	4c81      	ldr	r4, [pc, #516]	; (8002b68 <brigade_chief_proc_task+0x338>)
 8002964:	610c      	str	r4, [r1, #16]
 8002966:	2402      	movs	r4, #2
 8002968:	f8a7 404e 	strh.w	r4, [r7, #78]	; 0x4e
 800296c:	b11a      	cbz	r2, 8002976 <brigade_chief_proc_task+0x146>
 800296e:	2808      	cmp	r0, #8
 8002970:	dd01      	ble.n	8002976 <brigade_chief_proc_task+0x146>
 8002972:	4c7b      	ldr	r4, [pc, #492]	; (8002b60 <brigade_chief_proc_task+0x330>)
 8002974:	614c      	str	r4, [r1, #20]
 8002976:	b112      	cbz	r2, 800297e <brigade_chief_proc_task+0x14e>
 8002978:	280c      	cmp	r0, #12
 800297a:	dd00      	ble.n	800297e <brigade_chief_proc_task+0x14e>
 800297c:	618b      	str	r3, [r1, #24]
 800297e:	b11a      	cbz	r2, 8002988 <brigade_chief_proc_task+0x158>
 8002980:	2810      	cmp	r0, #16
 8002982:	dd01      	ble.n	8002988 <brigade_chief_proc_task+0x158>
 8002984:	2303      	movs	r3, #3
 8002986:	61cb      	str	r3, [r1, #28]
 8002988:	2813      	cmp	r0, #19
 800298a:	dd53      	ble.n	8002a34 <brigade_chief_proc_task+0x204>
 800298c:	2314      	movs	r3, #20
 800298e:	b132      	cbz	r2, 800299e <brigade_chief_proc_task+0x16e>
 8002990:	2000      	movs	r0, #0
 8002992:	64b8      	str	r0, [r7, #72]	; 0x48
 8002994:	2005      	movs	r0, #5
 8002996:	f887 0048 	strb.w	r0, [r7, #72]	; 0x48
 800299a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800299c:	60c8      	str	r0, [r1, #12]
 800299e:	f36f 0a00 	bfc	sl, #0, #1
 80029a2:	f36f 0a41 	bfc	sl, #1, #1
 80029a6:	f36f 0a82 	bfc	sl, #2, #1
 80029aa:	f36f 0ac5 	bfc	sl, #3, #3
 80029ae:	2504      	movs	r5, #4
 80029b0:	f365 1a88 	bfi	sl, r5, #6, #3
 80029b4:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 80029b8:	f363 2a52 	bfi	sl, r3, #9, #10
 80029bc:	f36f 4ade 	bfc	sl, #19, #12
 80029c0:	f36f 7adf 	bfc	sl, #31, #1
 80029c4:	4c67      	ldr	r4, [pc, #412]	; (8002b64 <brigade_chief_proc_task+0x334>)
 80029c6:	2300      	movs	r3, #0
 80029c8:	4651      	mov	r1, sl
 80029ca:	4620      	mov	r0, r4
 80029cc:	f00b fd5b 	bl	800e486 <z_impl_z_log_msg2_static_create>
 80029d0:	f8d7 d040 	ldr.w	sp, [r7, #64]	; 0x40
                LOG_DBG("Packet is filtered");
 80029d4:	2301      	movs	r3, #1
 80029d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029da:	2302      	movs	r3, #2
 80029dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <brigade_chief_proc_task+0x33c>)
 80029e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e6:	4b5e      	ldr	r3, [pc, #376]	; (8002b60 <brigade_chief_proc_task+0x330>)
 80029e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ec:	2300      	movs	r3, #0
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f0:	2203      	movs	r2, #3
 80029f2:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80029f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029fc:	f363 0b00 	bfi	fp, r3, #0, #1
 8002a00:	f363 0b41 	bfi	fp, r3, #1, #1
 8002a04:	f363 0b82 	bfi	fp, r3, #2, #1
 8002a08:	f363 0bc5 	bfi	fp, r3, #3, #3
 8002a0c:	f365 1b88 	bfi	fp, r5, #6, #3
 8002a10:	220c      	movs	r2, #12
 8002a12:	f362 2b52 	bfi	fp, r2, #9, #10
 8002a16:	f363 4bde 	bfi	fp, r3, #19, #12
 8002a1a:	f363 7bdf 	bfi	fp, r3, #31, #1
 8002a1e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002a22:	4659      	mov	r1, fp
 8002a24:	4620      	mov	r0, r4
 8002a26:	f00b fd2e 	bl	800e486 <z_impl_z_log_msg2_static_create>
                continue;
 8002a2a:	f000 bc38 	b.w	800329e <brigade_chief_proc_task+0xa6e>
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, cur_dev_addr);
 8002a2e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002a32:	e790      	b.n	8002956 <brigade_chief_proc_task+0x126>
 8002a34:	f06f 031b 	mvn.w	r3, #27
 8002a38:	e7a9      	b.n	800298e <brigade_chief_proc_task+0x15e>
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a40:	2302      	movs	r3, #2
 8002a42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a46:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <brigade_chief_proc_task+0x340>)
 8002a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <brigade_chief_proc_task+0x330>)
 8002a4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a52:	2300      	movs	r3, #0
 8002a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a56:	2203      	movs	r2, #3
 8002a58:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a5e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a64:	f363 0200 	bfi	r2, r3, #0, #1
 8002a68:	f363 0241 	bfi	r2, r3, #1, #1
 8002a6c:	f363 0282 	bfi	r2, r3, #2, #1
 8002a70:	f363 02c5 	bfi	r2, r3, #3, #3
 8002a74:	4611      	mov	r1, r2
 8002a76:	2204      	movs	r2, #4
 8002a78:	f362 1188 	bfi	r1, r2, #6, #3
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	f362 2152 	bfi	r1, r2, #9, #10
 8002a82:	f363 41de 	bfi	r1, r3, #19, #12
 8002a86:	f363 71df 	bfi	r1, r3, #31, #1
 8002a8a:	6379      	str	r1, [r7, #52]	; 0x34
 8002a8c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002a90:	4834      	ldr	r0, [pc, #208]	; (8002b64 <brigade_chief_proc_task+0x334>)
 8002a92:	f00b fcf8 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            switch (rx_msg_proc.sender_addr) {
 8002a96:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002a9a:	bb73      	cbnz	r3, 8002afa <brigade_chief_proc_task+0x2ca>
                                    LOG_DBG("Base station disabled alarm");
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <brigade_chief_proc_task+0x344>)
 8002aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <brigade_chief_proc_task+0x330>)
 8002ab0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab8:	2203      	movs	r2, #3
 8002aba:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	f363 0200 	bfi	r2, r3, #0, #1
 8002aca:	f363 0241 	bfi	r2, r3, #1, #1
 8002ace:	f363 0282 	bfi	r2, r3, #2, #1
 8002ad2:	f363 02c5 	bfi	r2, r3, #3, #3
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	2204      	movs	r2, #4
 8002ada:	f362 1188 	bfi	r1, r2, #6, #3
 8002ade:	220c      	movs	r2, #12
 8002ae0:	f362 2152 	bfi	r1, r2, #9, #10
 8002ae4:	f363 41de 	bfi	r1, r3, #19, #12
 8002ae8:	f363 71df 	bfi	r1, r3, #31, #1
 8002aec:	6139      	str	r1, [r7, #16]
 8002aee:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002af2:	481c      	ldr	r0, [pc, #112]	; (8002b64 <brigade_chief_proc_task+0x334>)
 8002af4:	f00b fcc7 	bl	800e486 <z_impl_z_log_msg2_static_create>
                                    break;
 8002af8:	e070      	b.n	8002bdc <brigade_chief_proc_task+0x3ac>
                                    LOG_DBG("Undefined sender address for this message type");
 8002afa:	2301      	movs	r3, #1
 8002afc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <brigade_chief_proc_task+0x348>)
 8002b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <brigade_chief_proc_task+0x330>)
 8002b0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002b12:	2300      	movs	r3, #0
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b16:	2203      	movs	r2, #3
 8002b18:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b1e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f363 0200 	bfi	r2, r3, #0, #1
 8002b28:	f363 0241 	bfi	r2, r3, #1, #1
 8002b2c:	f363 0282 	bfi	r2, r3, #2, #1
 8002b30:	f363 02c5 	bfi	r2, r3, #3, #3
 8002b34:	4611      	mov	r1, r2
 8002b36:	2204      	movs	r2, #4
 8002b38:	f362 1188 	bfi	r1, r2, #6, #3
 8002b3c:	220c      	movs	r2, #12
 8002b3e:	f362 2152 	bfi	r1, r2, #9, #10
 8002b42:	f363 41de 	bfi	r1, r3, #19, #12
 8002b46:	f363 71df 	bfi	r1, r3, #31, #1
 8002b4a:	60f9      	str	r1, [r7, #12]
 8002b4c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <brigade_chief_proc_task+0x334>)
 8002b52:	f00b fc98 	bl	800e486 <z_impl_z_log_msg2_static_create>
                                    break;
 8002b56:	e041      	b.n	8002bdc <brigade_chief_proc_task+0x3ac>
 8002b58:	2000043c 	.word	0x2000043c
 8002b5c:	08010df0 	.word	0x08010df0
 8002b60:	08011084 	.word	0x08011084
 8002b64:	08010b70 	.word	0x08010b70
 8002b68:	08010e5c 	.word	0x08010e5c
 8002b6c:	08010e84 	.word	0x08010e84
 8002b70:	08010e9c 	.word	0x08010e9c
 8002b74:	08010ebc 	.word	0x08010ebc
 8002b78:	08010edc 	.word	0x08010edc
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b88:	4bb7      	ldr	r3, [pc, #732]	; (8002e68 <brigade_chief_proc_task+0x638>)
 8002b8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b8e:	4bb7      	ldr	r3, [pc, #732]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002b90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b94:	2300      	movs	r3, #0
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba6:	f363 0200 	bfi	r2, r3, #0, #1
 8002baa:	f363 0241 	bfi	r2, r3, #1, #1
 8002bae:	f363 0282 	bfi	r2, r3, #2, #1
 8002bb2:	f363 02c5 	bfi	r2, r3, #3, #3
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	2204      	movs	r2, #4
 8002bba:	f362 1188 	bfi	r1, r2, #6, #3
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	f362 2152 	bfi	r1, r2, #9, #10
 8002bc4:	f363 41de 	bfi	r1, r3, #19, #12
 8002bc8:	f363 71df 	bfi	r1, r3, #31, #1
 8002bcc:	6339      	str	r1, [r7, #48]	; 0x30
 8002bce:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002bd2:	48a7      	ldr	r0, [pc, #668]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002bd4:	f00b fc57 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 8002bd8:	4ba6      	ldr	r3, [pc, #664]	; (8002e74 <brigade_chief_proc_task+0x644>)
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
            if (msgq_cur_msg_tx_ptr) {
 8002bdc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002bde:	2800      	cmp	r0, #0
 8002be0:	f000 834b 	beq.w	800327a <brigade_chief_proc_task+0xa4a>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2300      	movs	r3, #0
 8002be8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002bec:	f007 ff88 	bl	800ab00 <z_impl_k_msgq_put>
 8002bf0:	e343      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bfe:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <brigade_chief_proc_task+0x648>)
 8002c00:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002c06:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c16:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1c:	f363 0200 	bfi	r2, r3, #0, #1
 8002c20:	f363 0241 	bfi	r2, r3, #1, #1
 8002c24:	f363 0282 	bfi	r2, r3, #2, #1
 8002c28:	f363 02c5 	bfi	r2, r3, #3, #3
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	2204      	movs	r2, #4
 8002c30:	f362 1188 	bfi	r1, r2, #6, #3
 8002c34:	220c      	movs	r2, #12
 8002c36:	f362 2152 	bfi	r1, r2, #9, #10
 8002c3a:	f363 41de 	bfi	r1, r3, #19, #12
 8002c3e:	f363 71df 	bfi	r1, r3, #31, #1
 8002c42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c44:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8002c48:	4889      	ldr	r0, [pc, #548]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002c4a:	f00b fc1c 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            if (rx_msg_proc.sender_addr == cur_dev_addr)
 8002c4e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	f000 8371 	beq.w	800333a <brigade_chief_proc_task+0xb0a>
                                msgq_cur_msg_tx_ptr = NULL; // Do nothing, because this message for base station
 8002c58:	2300      	movs	r3, #0
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5c:	e30d      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c64:	2302      	movs	r3, #2
 8002c66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c6a:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <brigade_chief_proc_task+0x64c>)
 8002c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c76:	2400      	movs	r4, #0
 8002c78:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	f364 0300 	bfi	r3, r4, #0, #1
 8002c8c:	f364 0341 	bfi	r3, r4, #1, #1
 8002c90:	f364 0382 	bfi	r3, r4, #2, #1
 8002c94:	f364 03c5 	bfi	r3, r4, #3, #3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	f363 1288 	bfi	r2, r3, #6, #3
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	f363 2252 	bfi	r2, r3, #9, #10
 8002ca6:	f364 42de 	bfi	r2, r4, #19, #12
 8002caa:	f364 72df 	bfi	r2, r4, #31, #1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002cb8:	486d      	ldr	r0, [pc, #436]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002cba:	f00b fbe4 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL; // Do nothing, because this message for base station
 8002cbe:	647c      	str	r4, [r7, #68]	; 0x44
 8002cc0:	e2db      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG("Not correct message type");
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cce:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <brigade_chief_proc_task+0x650>)
 8002cd0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002cd4:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002cd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002cda:	2400      	movs	r4, #0
 8002cdc:	64bc      	str	r4, [r7, #72]	; 0x48
 8002cde:	2303      	movs	r3, #3
 8002ce0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f364 0300 	bfi	r3, r4, #0, #1
 8002cf0:	f364 0341 	bfi	r3, r4, #1, #1
 8002cf4:	f364 0382 	bfi	r3, r4, #2, #1
 8002cf8:	f364 03c5 	bfi	r3, r4, #3, #3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f363 1288 	bfi	r2, r3, #6, #3
 8002d04:	230c      	movs	r3, #12
 8002d06:	f363 2252 	bfi	r2, r3, #9, #10
 8002d0a:	f364 42de 	bfi	r2, r4, #19, #12
 8002d0e:	f364 72df 	bfi	r2, r4, #31, #1
 8002d12:	4611      	mov	r1, r2
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	4623      	mov	r3, r4
 8002d18:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8002d1c:	4854      	ldr	r0, [pc, #336]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002d1e:	f00b fbb2 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002d22:	647c      	str	r4, [r7, #68]	; 0x44
 8002d24:	e2a9      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                    LOG_DBG(" RESPONSE");
 8002d26:	f04f 0301 	mov.w	r3, #1
 8002d2a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d2e:	f04f 0202 	mov.w	r2, #2
 8002d32:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <brigade_chief_proc_task+0x654>)
 8002d38:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002d3c:	494b      	ldr	r1, [pc, #300]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002d3e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8002d42:	2400      	movs	r4, #0
 8002d44:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d46:	f04f 0003 	mov.w	r0, #3
 8002d4a:	f887 0048 	strb.w	r0, [r7, #72]	; 0x48
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d54:	f364 0600 	bfi	r6, r4, #0, #1
 8002d58:	f364 0641 	bfi	r6, r4, #1, #1
 8002d5c:	f364 0682 	bfi	r6, r4, #2, #1
 8002d60:	f364 06c5 	bfi	r6, r4, #3, #3
 8002d64:	2504      	movs	r5, #4
 8002d66:	f365 1688 	bfi	r6, r5, #6, #3
 8002d6a:	250c      	movs	r5, #12
 8002d6c:	f365 2652 	bfi	r6, r5, #9, #10
 8002d70:	f364 46de 	bfi	r6, r4, #19, #12
 8002d74:	f364 76df 	bfi	r6, r4, #31, #1
 8002d78:	4623      	mov	r3, r4
 8002d7a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002d7e:	4631      	mov	r1, r6
 8002d80:	483b      	ldr	r0, [pc, #236]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002d82:	f00b fb80 	bl	800e486 <z_impl_z_log_msg2_static_create>
                    LOG_DBG("Message type:");
 8002d86:	f04f 0301 	mov.w	r3, #1
 8002d8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d8e:	f04f 0202 	mov.w	r2, #2
 8002d92:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <brigade_chief_proc_task+0x658>)
 8002d98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002d9c:	4933      	ldr	r1, [pc, #204]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002d9e:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8002da2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002da4:	f04f 0003 	mov.w	r0, #3
 8002da8:	f887 0048 	strb.w	r0, [r7, #72]	; 0x48
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	f364 0300 	bfi	r3, r4, #0, #1
 8002db8:	f364 0341 	bfi	r3, r4, #1, #1
 8002dbc:	f364 0382 	bfi	r3, r4, #2, #1
 8002dc0:	f364 03c5 	bfi	r3, r4, #3, #3
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	f362 1388 	bfi	r3, r2, #6, #3
 8002dca:	f365 2352 	bfi	r3, r5, #9, #10
 8002dce:	f364 43de 	bfi	r3, r4, #19, #12
 8002dd2:	f364 73df 	bfi	r3, r4, #31, #1
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dda:	4623      	mov	r3, r4
 8002ddc:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8002de0:	4823      	ldr	r0, [pc, #140]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002de2:	f00b fb50 	bl	800e486 <z_impl_z_log_msg2_static_create>
                    switch (rx_msg_proc.message_type) {
 8002de6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	f200 81e2 	bhi.w	80031b4 <brigade_chief_proc_task+0x984>
 8002df0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002df4:	000500d7 	.word	0x000500d7
 8002df8:	016700a5 	.word	0x016700a5
 8002dfc:	0109      	.short	0x0109
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <brigade_chief_proc_task+0x65c>)
 8002e0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <brigade_chief_proc_task+0x63c>)
 8002e12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002e16:	2300      	movs	r3, #0
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e22:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	f363 0200 	bfi	r2, r3, #0, #1
 8002e2c:	f363 0241 	bfi	r2, r3, #1, #1
 8002e30:	f363 0282 	bfi	r2, r3, #2, #1
 8002e34:	f363 02c5 	bfi	r2, r3, #3, #3
 8002e38:	4611      	mov	r1, r2
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f362 1188 	bfi	r1, r2, #6, #3
 8002e40:	220c      	movs	r2, #12
 8002e42:	f362 2152 	bfi	r1, r2, #9, #10
 8002e46:	f363 41de 	bfi	r1, r3, #19, #12
 8002e4a:	f363 71df 	bfi	r1, r3, #31, #1
 8002e4e:	6279      	str	r1, [r7, #36]	; 0x24
 8002e50:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8002e54:	4806      	ldr	r0, [pc, #24]	; (8002e70 <brigade_chief_proc_task+0x640>)
 8002e56:	f00b fb16 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            if (rx_msg_proc.sender_addr == cur_dev_addr) {
 8002e5a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d016      	beq.n	8002e90 <brigade_chief_proc_task+0x660>
                            msgq_cur_msg_tx_ptr = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	647b      	str	r3, [r7, #68]	; 0x44
 8002e66:	e208      	b.n	800327a <brigade_chief_proc_task+0xa4a>
 8002e68:	08010f10 	.word	0x08010f10
 8002e6c:	08011084 	.word	0x08011084
 8002e70:	08010b70 	.word	0x08010b70
 8002e74:	2000043c 	.word	0x2000043c
 8002e78:	08010f2c 	.word	0x08010f2c
 8002e7c:	08010f44 	.word	0x08010f44
 8002e80:	08010f64 	.word	0x08010f64
 8002e84:	08010f84 	.word	0x08010f84
 8002e88:	08010f94 	.word	0x08010f94
 8002e8c:	08010e9c 	.word	0x08010e9c
                                LOG_DBG("Brigade chief disabled alarm");
 8002e90:	2301      	movs	r3, #1
 8002e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e9c:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <brigade_chief_proc_task+0x950>)
 8002e9e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002ea2:	4bb8      	ldr	r3, [pc, #736]	; (8003184 <brigade_chief_proc_task+0x954>)
 8002ea4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eac:	2203      	movs	r2, #3
 8002eae:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8002eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb4:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	f363 0200 	bfi	r2, r3, #0, #1
 8002ebe:	f363 0241 	bfi	r2, r3, #1, #1
 8002ec2:	f363 0282 	bfi	r2, r3, #2, #1
 8002ec6:	f363 02c5 	bfi	r2, r3, #3, #3
 8002eca:	4611      	mov	r1, r2
 8002ecc:	2204      	movs	r2, #4
 8002ece:	f362 1188 	bfi	r1, r2, #6, #3
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	f362 2152 	bfi	r1, r2, #9, #10
 8002ed8:	f363 41de 	bfi	r1, r3, #19, #12
 8002edc:	f363 71df 	bfi	r1, r3, #31, #1
 8002ee0:	6079      	str	r1, [r7, #4]
 8002ee2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8002ee6:	48a8      	ldr	r0, [pc, #672]	; (8003188 <brigade_chief_proc_task+0x958>)
 8002ee8:	f00b facd 	bl	800e486 <z_impl_z_log_msg2_static_create>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8002eec:	4ba7      	ldr	r3, [pc, #668]	; (800318c <brigade_chief_proc_task+0x95c>)
 8002eee:	f3bf 8f5b 	dmb	ish
 8002ef2:	e853 2f00 	ldrex	r2, [r3]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	e843 2100 	strex	r1, r2, [r3]
 8002efe:	2900      	cmp	r1, #0
 8002f00:	d1f7      	bne.n	8002ef2 <brigade_chief_proc_task+0x6c2>
 8002f02:	f3bf 8f5b 	dmb	ish
                                while(k_work_busy_get(&work_led_strip_blink));
 8002f06:	48a2      	ldr	r0, [pc, #648]	; (8003190 <brigade_chief_proc_task+0x960>)
 8002f08:	f00c fd45 	bl	800f996 <k_work_busy_get>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d1fa      	bne.n	8002f06 <brigade_chief_proc_task+0x6d6>
                                set_blink_param(COMMON_STRIP_COLOR_GREEN, K_MSEC(100));
 8002f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f14:	2300      	movs	r3, #0
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7fe fe04 	bl	8001b24 <set_blink_param>
                                k_work_submit(&work_led_strip_blink);
 8002f1c:	489c      	ldr	r0, [pc, #624]	; (8003190 <brigade_chief_proc_task+0x960>)
 8002f1e:	f008 f8e9 	bl	800b0f4 <k_work_submit>
                                buzzer_mode.ding_dong = true;
 8002f22:	4b9c      	ldr	r3, [pc, #624]	; (8003194 <brigade_chief_proc_task+0x964>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	709a      	strb	r2, [r3, #2]
                                while(k_work_busy_get(&work_buzzer));
 8002f28:	489b      	ldr	r0, [pc, #620]	; (8003198 <brigade_chief_proc_task+0x968>)
 8002f2a:	f00c fd34 	bl	800f996 <k_work_busy_get>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d1fa      	bne.n	8002f28 <brigade_chief_proc_task+0x6f8>
                                k_work_submit(&work_buzzer);
 8002f32:	4899      	ldr	r0, [pc, #612]	; (8003198 <brigade_chief_proc_task+0x968>)
 8002f34:	f008 f8de 	bl	800b0f4 <k_work_submit>
                            msgq_cur_msg_tx_ptr = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	e19d      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f4a:	4b94      	ldr	r3, [pc, #592]	; (800319c <brigade_chief_proc_task+0x96c>)
 8002f4c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002f50:	4b8c      	ldr	r3, [pc, #560]	; (8003184 <brigade_chief_proc_task+0x954>)
 8002f52:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002f56:	2400      	movs	r4, #0
 8002f58:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f364 0300 	bfi	r3, r4, #0, #1
 8002f6c:	f364 0341 	bfi	r3, r4, #1, #1
 8002f70:	f364 0382 	bfi	r3, r4, #2, #1
 8002f74:	f364 03c5 	bfi	r3, r4, #3, #3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	f363 1288 	bfi	r2, r3, #6, #3
 8002f80:	230c      	movs	r3, #12
 8002f82:	f363 2252 	bfi	r2, r3, #9, #10
 8002f86:	f364 42de 	bfi	r2, r4, #19, #12
 8002f8a:	f364 72df 	bfi	r2, r4, #31, #1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	623a      	str	r2, [r7, #32]
 8002f92:	4623      	mov	r3, r4
 8002f94:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8002f98:	487b      	ldr	r0, [pc, #492]	; (8003188 <brigade_chief_proc_task+0x958>)
 8002f9a:	f00b fa74 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002f9e:	647c      	str	r4, [r7, #68]	; 0x44
 8002fa0:	e16b      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <brigade_chief_proc_task+0x970>)
 8002fb0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002fb4:	4b73      	ldr	r3, [pc, #460]	; (8003184 <brigade_chief_proc_task+0x954>)
 8002fb6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002fba:	2400      	movs	r4, #0
 8002fbc:	64bc      	str	r4, [r7, #72]	; 0x48
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f364 0300 	bfi	r3, r4, #0, #1
 8002fd0:	f364 0341 	bfi	r3, r4, #1, #1
 8002fd4:	f364 0382 	bfi	r3, r4, #2, #1
 8002fd8:	f364 03c5 	bfi	r3, r4, #3, #3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2304      	movs	r3, #4
 8002fe0:	f363 1288 	bfi	r2, r3, #6, #3
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	f363 2252 	bfi	r2, r3, #9, #10
 8002fea:	f364 42de 	bfi	r2, r4, #19, #12
 8002fee:	f364 72df 	bfi	r2, r4, #31, #1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	61fa      	str	r2, [r7, #28]
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8002ffc:	4862      	ldr	r0, [pc, #392]	; (8003188 <brigade_chief_proc_task+0x958>)
 8002ffe:	f00b fa42 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8003002:	647c      	str	r4, [r7, #68]	; 0x44
 8003004:	e139      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_RIGHT_TRAIN_PASSED");
 8003006:	2301      	movs	r3, #1
 8003008:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800300c:	2302      	movs	r3, #2
 800300e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <brigade_chief_proc_task+0x974>)
 8003014:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003018:	4b5a      	ldr	r3, [pc, #360]	; (8003184 <brigade_chief_proc_task+0x954>)
 800301a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800301e:	2300      	movs	r3, #0
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
 8003022:	2203      	movs	r2, #3
 8003024:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8003028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800302a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	f363 0200 	bfi	r2, r3, #0, #1
 8003034:	f363 0241 	bfi	r2, r3, #1, #1
 8003038:	f363 0282 	bfi	r2, r3, #2, #1
 800303c:	f363 02c5 	bfi	r2, r3, #3, #3
 8003040:	4611      	mov	r1, r2
 8003042:	2204      	movs	r2, #4
 8003044:	f362 1188 	bfi	r1, r2, #6, #3
 8003048:	220c      	movs	r2, #12
 800304a:	f362 2152 	bfi	r1, r2, #9, #10
 800304e:	f363 41de 	bfi	r1, r3, #19, #12
 8003052:	f363 71df 	bfi	r1, r3, #31, #1
 8003056:	61b9      	str	r1, [r7, #24]
 8003058:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800305c:	484a      	ldr	r0, [pc, #296]	; (8003188 <brigade_chief_proc_task+0x958>)
 800305e:	f00b fa12 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            if (rx_msg_proc.sender_addr == cur_dev_addr) {
 8003062:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003066:	2b03      	cmp	r3, #3
 8003068:	d002      	beq.n	8003070 <brigade_chief_proc_task+0x840>
                            msgq_cur_msg_tx_ptr = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
 800306e:	e104      	b.n	800327a <brigade_chief_proc_task+0xa4a>
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <brigade_chief_proc_task+0x978>)
 8003072:	f3bf 8f5b 	dmb	ish
 8003076:	e853 2f00 	ldrex	r2, [r3]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	e843 2100 	strex	r1, r2, [r3]
 8003082:	2900      	cmp	r1, #0
 8003084:	d1f7      	bne.n	8003076 <brigade_chief_proc_task+0x846>
 8003086:	f3bf 8f5b 	dmb	ish
                                while(k_work_busy_get(&work_led_strip_blink));
 800308a:	4841      	ldr	r0, [pc, #260]	; (8003190 <brigade_chief_proc_task+0x960>)
 800308c:	f00c fc83 	bl	800f996 <k_work_busy_get>
 8003090:	2800      	cmp	r0, #0
 8003092:	d1fa      	bne.n	800308a <brigade_chief_proc_task+0x85a>
                                set_blink_param(COMMON_STRIP_COLOR_GREEN, K_MSEC(100));
 8003094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003098:	2300      	movs	r3, #0
 800309a:	2001      	movs	r0, #1
 800309c:	f7fe fd42 	bl	8001b24 <set_blink_param>
                                k_work_submit(&work_led_strip_blink);
 80030a0:	483b      	ldr	r0, [pc, #236]	; (8003190 <brigade_chief_proc_task+0x960>)
 80030a2:	f008 f827 	bl	800b0f4 <k_work_submit>
                                buzzer_mode.ding_dong = true;
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <brigade_chief_proc_task+0x964>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	709a      	strb	r2, [r3, #2]
                                while(k_work_busy_get(&work_buzzer));
 80030ac:	483a      	ldr	r0, [pc, #232]	; (8003198 <brigade_chief_proc_task+0x968>)
 80030ae:	f00c fc72 	bl	800f996 <k_work_busy_get>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d1fa      	bne.n	80030ac <brigade_chief_proc_task+0x87c>
                                k_work_submit(&work_buzzer);
 80030b6:	4838      	ldr	r0, [pc, #224]	; (8003198 <brigade_chief_proc_task+0x968>)
 80030b8:	f008 f81c 	bl	800b0f4 <k_work_submit>
                            msgq_cur_msg_tx_ptr = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
 80030c0:	e0db      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                            LOG_DBG(" MESSAGE_TYPE_LEFT_TRAIN_PASSED");
 80030c2:	2301      	movs	r3, #1
 80030c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030ce:	4b37      	ldr	r3, [pc, #220]	; (80031ac <brigade_chief_proc_task+0x97c>)
 80030d0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <brigade_chief_proc_task+0x954>)
 80030d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030da:	2300      	movs	r3, #0
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80030de:	2203      	movs	r2, #3
 80030e0:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80030e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	f363 0200 	bfi	r2, r3, #0, #1
 80030f0:	f363 0241 	bfi	r2, r3, #1, #1
 80030f4:	f363 0282 	bfi	r2, r3, #2, #1
 80030f8:	f363 02c5 	bfi	r2, r3, #3, #3
 80030fc:	4611      	mov	r1, r2
 80030fe:	2204      	movs	r2, #4
 8003100:	f362 1188 	bfi	r1, r2, #6, #3
 8003104:	220c      	movs	r2, #12
 8003106:	f362 2152 	bfi	r1, r2, #9, #10
 800310a:	f363 41de 	bfi	r1, r3, #19, #12
 800310e:	f363 71df 	bfi	r1, r3, #31, #1
 8003112:	6179      	str	r1, [r7, #20]
 8003114:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003118:	481b      	ldr	r0, [pc, #108]	; (8003188 <brigade_chief_proc_task+0x958>)
 800311a:	f00b f9b4 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            if (rx_msg_proc.sender_addr == cur_dev_addr) {
 800311e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003122:	2b03      	cmp	r3, #3
 8003124:	d002      	beq.n	800312c <brigade_chief_proc_task+0x8fc>
                            msgq_cur_msg_tx_ptr = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	647b      	str	r3, [r7, #68]	; 0x44
 800312a:	e0a6      	b.n	800327a <brigade_chief_proc_task+0xa4a>
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <brigade_chief_proc_task+0x980>)
 800312e:	f3bf 8f5b 	dmb	ish
 8003132:	e853 2f00 	ldrex	r2, [r3]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	e843 2100 	strex	r1, r2, [r3]
 800313e:	2900      	cmp	r1, #0
 8003140:	d1f7      	bne.n	8003132 <brigade_chief_proc_task+0x902>
 8003142:	f3bf 8f5b 	dmb	ish
                                while(k_work_busy_get(&work_led_strip_blink));
 8003146:	4812      	ldr	r0, [pc, #72]	; (8003190 <brigade_chief_proc_task+0x960>)
 8003148:	f00c fc25 	bl	800f996 <k_work_busy_get>
 800314c:	2800      	cmp	r0, #0
 800314e:	d1fa      	bne.n	8003146 <brigade_chief_proc_task+0x916>
                                set_blink_param(COMMON_STRIP_COLOR_GREEN, K_MSEC(100));
 8003150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003154:	2300      	movs	r3, #0
 8003156:	2001      	movs	r0, #1
 8003158:	f7fe fce4 	bl	8001b24 <set_blink_param>
                                k_work_submit(&work_led_strip_blink);
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <brigade_chief_proc_task+0x960>)
 800315e:	f007 ffc9 	bl	800b0f4 <k_work_submit>
                                buzzer_mode.ding_dong = true;
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <brigade_chief_proc_task+0x964>)
 8003164:	2201      	movs	r2, #1
 8003166:	709a      	strb	r2, [r3, #2]
                                while(k_work_busy_get(&work_buzzer));
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <brigade_chief_proc_task+0x968>)
 800316a:	f00c fc14 	bl	800f996 <k_work_busy_get>
 800316e:	2800      	cmp	r0, #0
 8003170:	d1fa      	bne.n	8003168 <brigade_chief_proc_task+0x938>
                                k_work_submit(&work_buzzer);
 8003172:	4809      	ldr	r0, [pc, #36]	; (8003198 <brigade_chief_proc_task+0x968>)
 8003174:	f007 ffbe 	bl	800b0f4 <k_work_submit>
                            msgq_cur_msg_tx_ptr = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
 800317c:	e07d      	b.n	800327a <brigade_chief_proc_task+0xa4a>
 800317e:	bf00      	nop
 8003180:	08010fa8 	.word	0x08010fa8
 8003184:	08011084 	.word	0x08011084
 8003188:	08010b70 	.word	0x08010b70
 800318c:	20000d50 	.word	0x20000d50
 8003190:	20000dec 	.word	0x20000dec
 8003194:	20000d90 	.word	0x20000d90
 8003198:	20000ddc 	.word	0x20000ddc
 800319c:	08010f10 	.word	0x08010f10
 80031a0:	08010f2c 	.word	0x08010f2c
 80031a4:	08010fcc 	.word	0x08010fcc
 80031a8:	20000d80 	.word	0x20000d80
 80031ac:	08010ff4 	.word	0x08010ff4
 80031b0:	20000d68 	.word	0x20000d68
                            LOG_DBG("Not correct message type");
 80031b4:	2301      	movs	r3, #1
 80031b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031ba:	2302      	movs	r3, #2
 80031bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031c0:	4b61      	ldr	r3, [pc, #388]	; (8003348 <brigade_chief_proc_task+0xb18>)
 80031c2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80031c6:	4b61      	ldr	r3, [pc, #388]	; (800334c <brigade_chief_proc_task+0xb1c>)
 80031c8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80031cc:	2400      	movs	r4, #0
 80031ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80031d0:	2303      	movs	r3, #3
 80031d2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80031d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f364 0300 	bfi	r3, r4, #0, #1
 80031e2:	f364 0341 	bfi	r3, r4, #1, #1
 80031e6:	f364 0382 	bfi	r3, r4, #2, #1
 80031ea:	f364 03c5 	bfi	r3, r4, #3, #3
 80031ee:	461a      	mov	r2, r3
 80031f0:	2304      	movs	r3, #4
 80031f2:	f363 1288 	bfi	r2, r3, #6, #3
 80031f6:	230c      	movs	r3, #12
 80031f8:	f363 2252 	bfi	r2, r3, #9, #10
 80031fc:	f364 42de 	bfi	r2, r4, #19, #12
 8003200:	f364 72df 	bfi	r2, r4, #31, #1
 8003204:	4611      	mov	r1, r2
 8003206:	603a      	str	r2, [r7, #0]
 8003208:	4623      	mov	r3, r4
 800320a:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800320e:	4850      	ldr	r0, [pc, #320]	; (8003350 <brigade_chief_proc_task+0xb20>)
 8003210:	f00b f939 	bl	800e486 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8003214:	647c      	str	r4, [r7, #68]	; 0x44
 8003216:	e030      	b.n	800327a <brigade_chief_proc_task+0xa4a>
                    LOG_DBG("Not correct message direction");
 8003218:	2301      	movs	r3, #1
 800321a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800321e:	2302      	movs	r3, #2
 8003220:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <brigade_chief_proc_task+0xb24>)
 8003226:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800322a:	4b48      	ldr	r3, [pc, #288]	; (800334c <brigade_chief_proc_task+0xb1c>)
 800322c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8003230:	2400      	movs	r4, #0
 8003232:	64bc      	str	r4, [r7, #72]	; 0x48
 8003234:	2303      	movs	r3, #3
 8003236:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f364 0300 	bfi	r3, r4, #0, #1
 8003246:	f364 0341 	bfi	r3, r4, #1, #1
 800324a:	f364 0382 	bfi	r3, r4, #2, #1
 800324e:	f364 03c5 	bfi	r3, r4, #3, #3
 8003252:	461a      	mov	r2, r3
 8003254:	2304      	movs	r3, #4
 8003256:	f363 1288 	bfi	r2, r3, #6, #3
 800325a:	230c      	movs	r3, #12
 800325c:	f363 2252 	bfi	r2, r3, #9, #10
 8003260:	f364 42de 	bfi	r2, r4, #19, #12
 8003264:	f364 72df 	bfi	r2, r4, #31, #1
 8003268:	4611      	mov	r1, r2
 800326a:	63ba      	str	r2, [r7, #56]	; 0x38
 800326c:	4623      	mov	r3, r4
 800326e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8003272:	4837      	ldr	r0, [pc, #220]	; (8003350 <brigade_chief_proc_task+0xb20>)
 8003274:	f00b f907 	bl	800e486 <z_impl_z_log_msg2_static_create>
                    msgq_cur_msg_tx_ptr = NULL;
 8003278:	647c      	str	r4, [r7, #68]	; 0x44
            rssi_num = check_rssi(rssi);
 800327a:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 800327e:	f00a fc99 	bl	800dbb4 <check_rssi>
            led_strip_state.con_status = rssi_num;
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <brigade_chief_proc_task+0xb28>)
 8003284:	7018      	strb	r0, [r3, #0]
            led_strip_state.people_num = rx_msg_proc.workers_in_safe_zone;
 8003286:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800328a:	705a      	strb	r2, [r3, #1]
            update_indication(&led_strip_state, true, true);
 800328c:	2201      	movs	r2, #1
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fd75 	bl	8001d80 <update_indication>
	return z_impl_k_sleep(timeout);
 8003296:	2001      	movs	r0, #1
 8003298:	2100      	movs	r1, #0
 800329a:	f008 faf9 	bl	800b890 <z_impl_k_sleep>
        if (msgq_rx_msg.used_msgs) {
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <brigade_chief_proc_task+0xb2c>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f7      	beq.n	8003296 <brigade_chief_proc_task+0xa66>
            k_msgq_get(&msgq_rx_msg, &rx_buf_proc, K_NO_WAIT);
 80032a6:	2400      	movs	r4, #0
 80032a8:	2500      	movs	r5, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80032b2:	482a      	ldr	r0, [pc, #168]	; (800335c <brigade_chief_proc_task+0xb2c>)
 80032b4:	f007 fc80 	bl	800abb8 <z_impl_k_msgq_get>
 80032b8:	4622      	mov	r2, r4
 80032ba:	462b      	mov	r3, r5
 80032bc:	f107 0186 	add.w	r1, r7, #134	; 0x86
 80032c0:	4827      	ldr	r0, [pc, #156]	; (8003360 <brigade_chief_proc_task+0xb30>)
 80032c2:	f007 fc79 	bl	800abb8 <z_impl_k_msgq_get>
            if (rx_buf_proc[0] == rx_buf_proc[1] == rx_buf_proc[2] == 0) {
 80032c6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80032ca:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 80032ce:	4293      	cmp	r3, r2
 80032d0:	bf14      	ite	ne
 80032d2:	2300      	movne	r3, #0
 80032d4:	2301      	moveq	r3, #1
 80032d6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80032da:	4293      	cmp	r3, r2
 80032dc:	f43f aac1 	beq.w	8002862 <brigade_chief_proc_task+0x32>
                LOG_DBG("Empty message");
 80032e0:	2301      	movs	r3, #1
 80032e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032e6:	2302      	movs	r3, #2
 80032e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <brigade_chief_proc_task+0xb34>)
 80032ee:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <brigade_chief_proc_task+0xb1c>)
 80032f4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80032f8:	2300      	movs	r3, #0
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80032fc:	2203      	movs	r2, #3
 80032fe:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8003302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003304:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8003308:	f363 0900 	bfi	r9, r3, #0, #1
 800330c:	f363 0941 	bfi	r9, r3, #1, #1
 8003310:	f363 0982 	bfi	r9, r3, #2, #1
 8003314:	f363 09c5 	bfi	r9, r3, #3, #3
 8003318:	2204      	movs	r2, #4
 800331a:	f362 1988 	bfi	r9, r2, #6, #3
 800331e:	220c      	movs	r2, #12
 8003320:	f362 2952 	bfi	r9, r2, #9, #10
 8003324:	f363 49de 	bfi	r9, r3, #19, #12
 8003328:	f363 79df 	bfi	r9, r3, #31, #1
 800332c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8003330:	4649      	mov	r1, r9
 8003332:	4807      	ldr	r0, [pc, #28]	; (8003350 <brigade_chief_proc_task+0xb20>)
 8003334:	f00b f8a7 	bl	800e486 <z_impl_z_log_msg2_static_create>
                continue;
 8003338:	e7b1      	b.n	800329e <brigade_chief_proc_task+0xa6e>
                                msgq_cur_msg_tx_ptr = &msgq_tx_msg_prio; // For response message
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <brigade_chief_proc_task+0xb38>)
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
 800333e:	e44d      	b.n	8002bdc <brigade_chief_proc_task+0x3ac>
 8003340:	2300      	movs	r3, #0
 8003342:	647b      	str	r3, [r7, #68]	; 0x44
 8003344:	e799      	b.n	800327a <brigade_chief_proc_task+0xa4a>
 8003346:	bf00      	nop
 8003348:	08010f64 	.word	0x08010f64
 800334c:	08011084 	.word	0x08011084
 8003350:	08010b70 	.word	0x08010b70
 8003354:	08011018 	.word	0x08011018
 8003358:	20000ce8 	.word	0x20000ce8
 800335c:	20000408 	.word	0x20000408
 8003360:	200003d4 	.word	0x200003d4
 8003364:	08010e48 	.word	0x08010e48
 8003368:	20000470 	.word	0x20000470

0800336c <brigade_chief_modem_task>:
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
    volatile uint32_t ticks = 0;
 8003370:	2200      	movs	r2, #0
 8003372:	9204      	str	r2, [sp, #16]
    lora_cfg.frequency = 433000000;
 8003374:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <brigade_chief_modem_task+0xf4>)
 8003376:	493b      	ldr	r1, [pc, #236]	; (8003464 <brigade_chief_modem_task+0xf8>)
 8003378:	6019      	str	r1, [r3, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 800337a:	711a      	strb	r2, [r3, #4]
    lora_cfg.datarate = SF_12;
 800337c:	210c      	movs	r1, #12
 800337e:	7159      	strb	r1, [r3, #5]
    lora_cfg.preamble_len = 8;
 8003380:	2108      	movs	r1, #8
 8003382:	8119      	strh	r1, [r3, #8]
    lora_cfg.coding_rate = CR_4_5;
 8003384:	2101      	movs	r1, #1
 8003386:	7199      	strb	r1, [r3, #6]
    lora_cfg.tx_power = 0;
 8003388:	729a      	strb	r2, [r3, #10]
    lora_cfg.tx = false;
 800338a:	72da      	strb	r2, [r3, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 800338c:	4836      	ldr	r0, [pc, #216]	; (8003468 <brigade_chief_modem_task+0xfc>)
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <brigade_chief_modem_task+0x100>)
 8003390:	6018      	str	r0, [r3, #0]
 8003392:	f00c fa38 	bl	800f806 <z_device_is_ready>
    if (!device_is_ready(lora_dev_ptr)) {
 8003396:	2800      	cmp	r0, #0
 8003398:	d03f      	beq.n	800341a <brigade_chief_modem_task+0xae>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <brigade_chief_modem_task+0x100>)
 800339c:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 800339e:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	492f      	ldr	r1, [pc, #188]	; (8003460 <brigade_chief_modem_task+0xf4>)
 80033a4:	4798      	blx	r3
 80033a6:	2800      	cmp	r0, #0
 80033a8:	db3e      	blt.n	8003428 <brigade_chief_modem_task+0xbc>
    system_init();
 80033aa:	f7ff f95b 	bl	8002664 <system_init>
    lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 80033ae:	4b2f      	ldr	r3, [pc, #188]	; (800346c <brigade_chief_modem_task+0x100>)
 80033b0:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 80033b2:	6883      	ldr	r3, [r0, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4d2e      	ldr	r5, [pc, #184]	; (8003470 <brigade_chief_modem_task+0x104>)
 80033b8:	f10d 0217 	add.w	r2, sp, #23
 80033bc:	9203      	str	r2, [sp, #12]
 80033be:	ac05      	add	r4, sp, #20
 80033c0:	9402      	str	r4, [sp, #8]
 80033c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80033c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80033ca:	e9cd 6700 	strd	r6, r7, [sp]
 80033ce:	2203      	movs	r2, #3
 80033d0:	4629      	mov	r1, r5
 80033d2:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 80033d4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80033d8:	2100      	movs	r1, #0
 80033da:	f008 fa59 	bl	800b890 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 80033de:	f649 1220 	movw	r2, #39200	; 0x9920
 80033e2:	2300      	movs	r3, #0
 80033e4:	e9cd 2300 	strd	r2, r3, [sp]
 80033e8:	f242 6248 	movw	r2, #9800	; 0x2648
 80033ec:	2300      	movs	r3, #0
 80033ee:	4821      	ldr	r0, [pc, #132]	; (8003474 <brigade_chief_modem_task+0x108>)
 80033f0:	f008 fc8c 	bl	800bd0c <z_impl_k_timer_start>
    k_msgq_put(&msgq_rx_msg, &rx_buf, K_NO_WAIT);
 80033f4:	2600      	movs	r6, #0
 80033f6:	2700      	movs	r7, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 80033f8:	4632      	mov	r2, r6
 80033fa:	463b      	mov	r3, r7
 80033fc:	4629      	mov	r1, r5
 80033fe:	481e      	ldr	r0, [pc, #120]	; (8003478 <brigade_chief_modem_task+0x10c>)
 8003400:	f007 fb7e 	bl	800ab00 <z_impl_k_msgq_put>
 8003404:	4632      	mov	r2, r6
 8003406:	463b      	mov	r3, r7
 8003408:	4621      	mov	r1, r4
 800340a:	481c      	ldr	r0, [pc, #112]	; (800347c <brigade_chief_modem_task+0x110>)
 800340c:	f007 fb78 	bl	800ab00 <z_impl_k_msgq_put>
    k_wakeup(proc_task_id);
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <brigade_chief_modem_task+0x114>)
 8003412:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8003414:	f00c fc6f 	bl	800fcf6 <z_impl_k_wakeup>
}
 8003418:	e01b      	b.n	8003452 <brigade_chief_modem_task+0xe6>
	return z_impl_k_sleep(timeout);
 800341a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800341e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003422:	f008 fa35 	bl	800b890 <z_impl_k_sleep>
 8003426:	e7b8      	b.n	800339a <brigade_chief_modem_task+0x2e>
 8003428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800342c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003430:	f008 fa2e 	bl	800b890 <z_impl_k_sleep>
 8003434:	e7b9      	b.n	80033aa <brigade_chief_modem_task+0x3e>
            send_msg();
 8003436:	f7fe fd69 	bl	8001f0c <send_msg>
            current_state = *current_state.next;
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <brigade_chief_modem_task+0x118>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003442:	e883 0003 	stmia.w	r3, {r0, r1}
            recv_msg();
 8003446:	f7fe fe13 	bl	8002070 <recv_msg>
 800344a:	2001      	movs	r0, #1
 800344c:	2100      	movs	r1, #0
 800344e:	f008 fa1f 	bl	800b890 <z_impl_k_sleep>
        if (current_state.state == TRANSMIT) {
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <brigade_chief_modem_task+0x118>)
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d0ed      	beq.n	8003436 <brigade_chief_modem_task+0xca>
            recv_msg();
 800345a:	f7fe fe09 	bl	8002070 <recv_msg>
 800345e:	e7f4      	b.n	800344a <brigade_chief_modem_task+0xde>
 8003460:	20000d94 	.word	0x20000d94
 8003464:	19cf0e40 	.word	0x19cf0e40
 8003468:	08010888 	.word	0x08010888
 800346c:	20000da0 	.word	0x20000da0
 8003470:	20000dcc 	.word	0x20000dcc
 8003474:	200004d0 	.word	0x200004d0
 8003478:	20000408 	.word	0x20000408
 800347c:	200003d4 	.word	0x200003d4
 8003480:	080110e8 	.word	0x080110e8
 8003484:	20000d3c 	.word	0x20000d3c

08003488 <read_write_message>:
    return output;
}


void read_write_message(uint32_t *new_msg, struct message_s *msg_ptr, bool write)
{
 8003488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348a:	b083      	sub	sp, #12
 800348c:	4607      	mov	r7, r0
 800348e:	460e      	mov	r6, r1
 8003490:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8003492:	2400      	movs	r4, #0
 8003494:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8003498:	e008      	b.n	80034ac <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800349a:	b1dd      	cbz	r5, 80034d4 <read_write_message+0x4c>
 800349c:	f10d 0307 	add.w	r3, sp, #7
 80034a0:	2202      	movs	r2, #2
 80034a2:	7831      	ldrb	r1, [r6, #0]
 80034a4:	4638      	mov	r0, r7
 80034a6:	f00a fb2f 	bl	800db08 <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 80034aa:	3401      	adds	r4, #1
 80034ac:	2c05      	cmp	r4, #5
 80034ae:	dc6e      	bgt.n	800358e <read_write_message+0x106>
        switch (cur_field) {
 80034b0:	2c05      	cmp	r4, #5
 80034b2:	d8fa      	bhi.n	80034aa <read_write_message+0x22>
 80034b4:	a301      	add	r3, pc, #4	; (adr r3, 80034bc <read_write_message+0x34>)
 80034b6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	0800349b 	.word	0x0800349b
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	08003507 	.word	0x08003507
 80034c8:	08003529 	.word	0x08003529
 80034cc:	0800354b 	.word	0x0800354b
 80034d0:	0800356d 	.word	0x0800356d
                extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 80034d4:	f10d 0307 	add.w	r3, sp, #7
 80034d8:	2202      	movs	r2, #2
 80034da:	4631      	mov	r1, r6
 80034dc:	4638      	mov	r0, r7
 80034de:	f00a fb34 	bl	800db4a <extract_msg_bit_field>
 80034e2:	e7e2      	b.n	80034aa <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 80034e4:	b13d      	cbz	r5, 80034f6 <read_write_message+0x6e>
 80034e6:	f10d 0307 	add.w	r3, sp, #7
 80034ea:	2203      	movs	r2, #3
 80034ec:	7871      	ldrb	r1, [r6, #1]
 80034ee:	4638      	mov	r0, r7
 80034f0:	f00a fb0a 	bl	800db08 <fill_msg_bit_field>
 80034f4:	e7d9      	b.n	80034aa <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 80034f6:	f10d 0307 	add.w	r3, sp, #7
 80034fa:	2203      	movs	r2, #3
 80034fc:	1c71      	adds	r1, r6, #1
 80034fe:	4638      	mov	r0, r7
 8003500:	f00a fb23 	bl	800db4a <extract_msg_bit_field>
 8003504:	e7d1      	b.n	80034aa <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 8003506:	b13d      	cbz	r5, 8003518 <read_write_message+0x90>
 8003508:	f10d 0307 	add.w	r3, sp, #7
 800350c:	2204      	movs	r2, #4
 800350e:	78b1      	ldrb	r1, [r6, #2]
 8003510:	4638      	mov	r0, r7
 8003512:	f00a faf9 	bl	800db08 <fill_msg_bit_field>
 8003516:	e7c8      	b.n	80034aa <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8003518:	f10d 0307 	add.w	r3, sp, #7
 800351c:	2204      	movs	r2, #4
 800351e:	1cb1      	adds	r1, r6, #2
 8003520:	4638      	mov	r0, r7
 8003522:	f00a fb12 	bl	800db4a <extract_msg_bit_field>
 8003526:	e7c0      	b.n	80034aa <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 8003528:	b13d      	cbz	r5, 800353a <read_write_message+0xb2>
 800352a:	f10d 0307 	add.w	r3, sp, #7
 800352e:	2201      	movs	r2, #1
 8003530:	78f1      	ldrb	r1, [r6, #3]
 8003532:	4638      	mov	r0, r7
 8003534:	f00a fae8 	bl	800db08 <fill_msg_bit_field>
 8003538:	e7b7      	b.n	80034aa <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 800353a:	f10d 0307 	add.w	r3, sp, #7
 800353e:	2201      	movs	r2, #1
 8003540:	1cf1      	adds	r1, r6, #3
 8003542:	4638      	mov	r0, r7
 8003544:	f00a fb01 	bl	800db4a <extract_msg_bit_field>
 8003548:	e7af      	b.n	80034aa <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 800354a:	b13d      	cbz	r5, 800355c <read_write_message+0xd4>
 800354c:	f10d 0307 	add.w	r3, sp, #7
 8003550:	2201      	movs	r2, #1
 8003552:	7931      	ldrb	r1, [r6, #4]
 8003554:	4638      	mov	r0, r7
 8003556:	f00a fad7 	bl	800db08 <fill_msg_bit_field>
 800355a:	e7a6      	b.n	80034aa <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 800355c:	f10d 0307 	add.w	r3, sp, #7
 8003560:	2201      	movs	r2, #1
 8003562:	1d31      	adds	r1, r6, #4
 8003564:	4638      	mov	r0, r7
 8003566:	f00a faf0 	bl	800db4a <extract_msg_bit_field>
 800356a:	e79e      	b.n	80034aa <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 800356c:	b13d      	cbz	r5, 800357e <read_write_message+0xf6>
 800356e:	f10d 0307 	add.w	r3, sp, #7
 8003572:	2208      	movs	r2, #8
 8003574:	7971      	ldrb	r1, [r6, #5]
 8003576:	4638      	mov	r0, r7
 8003578:	f00a fac6 	bl	800db08 <fill_msg_bit_field>
 800357c:	e795      	b.n	80034aa <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 800357e:	f10d 0307 	add.w	r3, sp, #7
 8003582:	2208      	movs	r2, #8
 8003584:	1d71      	adds	r1, r6, #5
 8003586:	4638      	mov	r0, r7
 8003588:	f00a fadf 	bl	800db4a <extract_msg_bit_field>
 800358c:	e78d      	b.n	80034aa <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 800358e:	b003      	add	sp, #12
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003592:	bf00      	nop

08003594 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	b089      	sub	sp, #36	; 0x24
 800359a:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 800359c:	f010 0a03 	ands.w	sl, r0, #3
 80035a0:	f040 8215 	bne.w	80039ce <cbvprintf_package+0x43a>
 80035a4:	4607      	mov	r7, r0
 80035a6:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 80035a8:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 80035aa:	b1e0      	cbz	r0, 80035e6 <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 80035ac:	b127      	cbz	r7, 80035b8 <cbvprintf_package+0x24>
 80035ae:	1be2      	subs	r2, r4, r7
 80035b0:	3204      	adds	r2, #4
 80035b2:	455a      	cmp	r2, fp
 80035b4:	f200 820e 	bhi.w	80039d4 <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 80035b8:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 80035ba:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 80035be:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 80035c2:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 80035c6:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 80035c8:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 80035cc:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 80035ce:	b107      	cbz	r7, 80035d2 <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 80035d0:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 80035d2:	4ac6      	ldr	r2, [pc, #792]	; (80038ec <cbvprintf_package+0x358>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f0c0 815a 	bcc.w	800388e <cbvprintf_package+0x2fa>
 80035da:	4ac5      	ldr	r2, [pc, #788]	; (80038f0 <cbvprintf_package+0x35c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f0c0 817f 	bcc.w	80038e0 <cbvprintf_package+0x34c>
 80035e2:	2200      	movs	r2, #0
 80035e4:	e154      	b.n	8003890 <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 80035e6:	f001 0b07 	and.w	fp, r1, #7
 80035ea:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 80035ec:	f1cb 0b08 	rsb	fp, fp, #8
 80035f0:	e7dc      	b.n	80035ac <cbvprintf_package+0x18>
			if (*fmt == '%') {
 80035f2:	2b25      	cmp	r3, #37	; 0x25
 80035f4:	d105      	bne.n	8003602 <cbvprintf_package+0x6e>
				parsing = true;
 80035f6:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 80035f8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 80035fc:	46c1      	mov	r9, r8
			continue;
 80035fe:	e000      	b.n	8003602 <cbvprintf_package+0x6e>
		switch (*fmt) {
 8003600:	2600      	movs	r6, #0
 8003602:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 8003604:	f105 0c01 	add.w	ip, r5, #1
 8003608:	786b      	ldrb	r3, [r5, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8184 	beq.w	8003918 <cbvprintf_package+0x384>
		if (!parsing) {
 8003610:	2e00      	cmp	r6, #0
 8003612:	d0ee      	beq.n	80035f2 <cbvprintf_package+0x5e>
		switch (*fmt) {
 8003614:	f1a3 0120 	sub.w	r1, r3, #32
 8003618:	295a      	cmp	r1, #90	; 0x5a
 800361a:	d8f1      	bhi.n	8003600 <cbvprintf_package+0x6c>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <cbvprintf_package+0x90>)
 800361e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003603 	.word	0x08003603
 8003628:	08003601 	.word	0x08003601
 800362c:	08003601 	.word	0x08003601
 8003630:	08003603 	.word	0x08003603
 8003634:	08003601 	.word	0x08003601
 8003638:	08003601 	.word	0x08003601
 800363c:	08003601 	.word	0x08003601
 8003640:	08003601 	.word	0x08003601
 8003644:	08003601 	.word	0x08003601
 8003648:	08003601 	.word	0x08003601
 800364c:	080037b1 	.word	0x080037b1
 8003650:	08003603 	.word	0x08003603
 8003654:	08003601 	.word	0x08003601
 8003658:	08003603 	.word	0x08003603
 800365c:	08003603 	.word	0x08003603
 8003660:	08003601 	.word	0x08003601
 8003664:	08003603 	.word	0x08003603
 8003668:	08003603 	.word	0x08003603
 800366c:	08003603 	.word	0x08003603
 8003670:	08003603 	.word	0x08003603
 8003674:	08003603 	.word	0x08003603
 8003678:	08003603 	.word	0x08003603
 800367c:	08003603 	.word	0x08003603
 8003680:	08003603 	.word	0x08003603
 8003684:	08003603 	.word	0x08003603
 8003688:	08003603 	.word	0x08003603
 800368c:	08003601 	.word	0x08003601
 8003690:	08003601 	.word	0x08003601
 8003694:	08003601 	.word	0x08003601
 8003698:	08003601 	.word	0x08003601
 800369c:	08003601 	.word	0x08003601
 80036a0:	08003601 	.word	0x08003601
 80036a4:	08003601 	.word	0x08003601
 80036a8:	08003819 	.word	0x08003819
 80036ac:	08003601 	.word	0x08003601
 80036b0:	08003601 	.word	0x08003601
 80036b4:	08003601 	.word	0x08003601
 80036b8:	08003819 	.word	0x08003819
 80036bc:	08003819 	.word	0x08003819
 80036c0:	08003819 	.word	0x08003819
 80036c4:	08003601 	.word	0x08003601
 80036c8:	08003601 	.word	0x08003601
 80036cc:	08003601 	.word	0x08003601
 80036d0:	08003601 	.word	0x08003601
 80036d4:	08003603 	.word	0x08003603
 80036d8:	08003601 	.word	0x08003601
 80036dc:	08003601 	.word	0x08003601
 80036e0:	08003601 	.word	0x08003601
 80036e4:	08003601 	.word	0x08003601
 80036e8:	08003601 	.word	0x08003601
 80036ec:	08003601 	.word	0x08003601
 80036f0:	08003601 	.word	0x08003601
 80036f4:	08003601 	.word	0x08003601
 80036f8:	08003601 	.word	0x08003601
 80036fc:	08003601 	.word	0x08003601
 8003700:	08003601 	.word	0x08003601
 8003704:	080037a9 	.word	0x080037a9
 8003708:	08003601 	.word	0x08003601
 800370c:	08003601 	.word	0x08003601
 8003710:	08003601 	.word	0x08003601
 8003714:	08003601 	.word	0x08003601
 8003718:	08003601 	.word	0x08003601
 800371c:	08003601 	.word	0x08003601
 8003720:	08003601 	.word	0x08003601
 8003724:	08003601 	.word	0x08003601
 8003728:	08003819 	.word	0x08003819
 800372c:	08003601 	.word	0x08003601
 8003730:	080037a9 	.word	0x080037a9
 8003734:	080037a9 	.word	0x080037a9
 8003738:	08003819 	.word	0x08003819
 800373c:	08003819 	.word	0x08003819
 8003740:	08003819 	.word	0x08003819
 8003744:	08003603 	.word	0x08003603
 8003748:	080037a9 	.word	0x080037a9
 800374c:	08003791 	.word	0x08003791
 8003750:	08003601 	.word	0x08003601
 8003754:	08003603 	.word	0x08003603
 8003758:	08003601 	.word	0x08003601
 800375c:	08003879 	.word	0x08003879
 8003760:	080037a9 	.word	0x080037a9
 8003764:	08003879 	.word	0x08003879
 8003768:	08003601 	.word	0x08003601
 800376c:	08003601 	.word	0x08003601
 8003770:	08003879 	.word	0x08003879
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037a9 	.word	0x080037a9
 800377c:	08003601 	.word	0x08003601
 8003780:	08003601 	.word	0x08003601
 8003784:	080037a9 	.word	0x080037a9
 8003788:	08003601 	.word	0x08003601
 800378c:	08003799 	.word	0x08003799
			align = VA_STACK_ALIGN(intmax_t);
 8003790:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 8003794:	46c1      	mov	r9, r8
			continue;
 8003796:	e734      	b.n	8003602 <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 8003798:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 800379c:	46c1      	mov	r9, r8
			continue;
 800379e:	e730      	b.n	8003602 <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 80037a0:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 80037a4:	46c1      	mov	r9, r8
			continue;
 80037a6:	e72c      	b.n	8003602 <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 80037a8:	782a      	ldrb	r2, [r5, #0]
 80037aa:	2a6c      	cmp	r2, #108	; 0x6c
 80037ac:	d026      	beq.n	80037fc <cbvprintf_package+0x268>
			parsing = false;
 80037ae:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 80037b0:	eb04 0208 	add.w	r2, r4, r8
 80037b4:	3a01      	subs	r2, #1
 80037b6:	f1c8 0100 	rsb	r1, r8, #0
 80037ba:	400a      	ands	r2, r1
 80037bc:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 80037be:	b127      	cbz	r7, 80037ca <cbvprintf_package+0x236>
 80037c0:	1bd1      	subs	r1, r2, r7
 80037c2:	4449      	add	r1, r9
 80037c4:	458b      	cmp	fp, r1
 80037c6:	f0c0 8108 	bcc.w	80039da <cbvprintf_package+0x446>
		if (*fmt == 's') {
 80037ca:	2b73      	cmp	r3, #115	; 0x73
 80037cc:	d059      	beq.n	8003882 <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 80037ce:	f1b9 0f04 	cmp.w	r9, #4
 80037d2:	f000 8099 	beq.w	8003908 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 80037d6:	f1b9 0f08 	cmp.w	r9, #8
 80037da:	f040 8107 	bne.w	80039ec <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 80037de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037e0:	3307      	adds	r3, #7
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	f103 0108 	add.w	r1, r3, #8
 80037ea:	9112      	str	r1, [sp, #72]	; 0x48
 80037ec:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 80037f0:	b10f      	cbz	r7, 80037f6 <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 80037f2:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 80037f6:	f102 0408 	add.w	r4, r2, #8
 80037fa:	e702      	b.n	8003602 <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 80037fc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8003800:	2a6c      	cmp	r2, #108	; 0x6c
 8003802:	d004      	beq.n	800380e <cbvprintf_package+0x27a>
			parsing = false;
 8003804:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 8003806:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 800380a:	46c1      	mov	r9, r8
 800380c:	e7d0      	b.n	80037b0 <cbvprintf_package+0x21c>
			parsing = false;
 800380e:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 8003810:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 8003814:	46c1      	mov	r9, r8
 8003816:	e7cb      	b.n	80037b0 <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 8003818:	782b      	ldrb	r3, [r5, #0]
 800381a:	2b4c      	cmp	r3, #76	; 0x4c
 800381c:	d01c      	beq.n	8003858 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 800381e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003820:	3307      	adds	r3, #7
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	f103 0208 	add.w	r2, r3, #8
 800382a:	9212      	str	r2, [sp, #72]	; 0x48
 800382c:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 8003830:	1de2      	adds	r2, r4, #7
 8003832:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 8003836:	b147      	cbz	r7, 800384a <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 8003838:	1bd3      	subs	r3, r2, r7
 800383a:	3308      	adds	r3, #8
 800383c:	455b      	cmp	r3, fp
 800383e:	d815      	bhi.n	800386c <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 8003840:	782b      	ldrb	r3, [r5, #0]
 8003842:	2b4c      	cmp	r3, #76	; 0x4c
 8003844:	d015      	beq.n	8003872 <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 8003846:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 800384a:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 800384e:	2600      	movs	r6, #0
			continue;
 8003850:	f04f 0808 	mov.w	r8, #8
 8003854:	46c1      	mov	r9, r8
 8003856:	e6d4      	b.n	8003602 <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 8003858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800385a:	3307      	adds	r3, #7
 800385c:	f023 0307 	bic.w	r3, r3, #7
 8003860:	f103 0208 	add.w	r2, r3, #8
 8003864:	9212      	str	r2, [sp, #72]	; 0x48
 8003866:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 800386a:	e7e1      	b.n	8003830 <cbvprintf_package+0x29c>
					return -ENOSPC;
 800386c:	f06f 001b 	mvn.w	r0, #27
 8003870:	e0aa      	b.n	80039c8 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 8003872:	e9c2 0100 	strd	r0, r1, [r2]
 8003876:	e7e8      	b.n	800384a <cbvprintf_package+0x2b6>
			parsing = false;
 8003878:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 800387a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 800387e:	46c1      	mov	r9, r8
 8003880:	e796      	b.n	80037b0 <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 8003882:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003884:	1d1a      	adds	r2, r3, #4
 8003886:	9212      	str	r2, [sp, #72]	; 0x48
 8003888:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 800388a:	4665      	mov	r5, ip
 800388c:	e69f      	b.n	80035ce <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 800388e:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 8003890:	9902      	ldr	r1, [sp, #8]
 8003892:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 8003896:	4610      	mov	r0, r2
 8003898:	b102      	cbz	r2, 800389c <cbvprintf_package+0x308>
 800389a:	b1f9      	cbz	r1, 80038dc <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 800389c:	eba4 0c07 	sub.w	ip, r4, r7
 80038a0:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 80038a4:	b119      	cbz	r1, 80038ae <cbvprintf_package+0x31a>
 80038a6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80038aa:	f080 8099 	bcs.w	80039e0 <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 80038ae:	9901      	ldr	r1, [sp, #4]
 80038b0:	290f      	cmp	r1, #15
 80038b2:	f200 8098 	bhi.w	80039e6 <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 80038b6:	b1ef      	cbz	r7, 80038f4 <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	ab08      	add	r3, sp, #32
 80038bc:	440b      	add	r3, r1
 80038be:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 80038c2:	b178      	cbz	r0, 80038e4 <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 80038c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c8:	ab08      	add	r3, sp, #32
 80038ca:	440b      	add	r3, r1
 80038cc:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 80038d0:	9b00      	ldr	r3, [sp, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	9300      	str	r3, [sp, #0]
				s_idx++;
 80038d6:	9b01      	ldr	r3, [sp, #4]
 80038d8:	3301      	adds	r3, #1
 80038da:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 80038dc:	3404      	adds	r4, #4
 80038de:	e691      	b.n	8003604 <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 80038e0:	2201      	movs	r2, #1
 80038e2:	e7d5      	b.n	8003890 <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	9303      	str	r3, [sp, #12]
 80038ea:	e7f4      	b.n	80038d6 <cbvprintf_package+0x342>
 80038ec:	080106d0 	.word	0x080106d0
 80038f0:	0801247c 	.word	0x0801247c
				} else if (is_ro) {
 80038f4:	b110      	cbz	r0, 80038fc <cbvprintf_package+0x368>
					len += 1;
 80038f6:	f10b 0b01 	add.w	fp, fp, #1
 80038fa:	e7ec      	b.n	80038d6 <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd faaa 	bl	8000e56 <strlen>
 8003902:	1c83      	adds	r3, r0, #2
 8003904:	449b      	add	fp, r3
 8003906:	e7e6      	b.n	80038d6 <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 8003908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800390a:	1d19      	adds	r1, r3, #4
 800390c:	9112      	str	r1, [sp, #72]	; 0x48
 800390e:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 8003910:	b107      	cbz	r7, 8003914 <cbvprintf_package+0x380>
				*(int *)buf = v;
 8003912:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 8003914:	1d14      	adds	r4, r2, #4
 8003916:	e674      	b.n	8003602 <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 8003918:	1be3      	subs	r3, r4, r7
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d268      	bcs.n	80039f2 <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 8003920:	b15f      	cbz	r7, 800393a <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 8003922:	2200      	movs	r2, #0
 8003924:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 800392a:	9b03      	ldr	r3, [sp, #12]
 800392c:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 800392e:	9b00      	ldr	r3, [sp, #0]
 8003930:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 8003932:	b9d3      	cbnz	r3, 800396a <cbvprintf_package+0x3d6>
 8003934:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003938:	e039      	b.n	80039ae <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 800393a:	445b      	add	r3, fp
 800393c:	f1a3 0008 	sub.w	r0, r3, #8
 8003940:	e042      	b.n	80039c8 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 8003942:	3301      	adds	r3, #1
 8003944:	4298      	cmp	r0, r3
 8003946:	d913      	bls.n	8003970 <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8003948:	aa08      	add	r2, sp, #32
 800394a:	441a      	add	r2, r3
 800394c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003950:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8003954:	2a00      	cmp	r2, #0
 8003956:	daf4      	bge.n	8003942 <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8003958:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 800395c:	1be2      	subs	r2, r4, r7
 800395e:	3201      	adds	r2, #1
 8003960:	4593      	cmp	fp, r2
 8003962:	d349      	bcc.n	80039f8 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 8003964:	f804 1b01 	strb.w	r1, [r4], #1
 8003968:	e7eb      	b.n	8003942 <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 800396a:	4653      	mov	r3, sl
 800396c:	9801      	ldr	r0, [sp, #4]
 800396e:	e7e9      	b.n	8003944 <cbvprintf_package+0x3b0>
 8003970:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003974:	e01b      	b.n	80039ae <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8003976:	ab08      	add	r3, sp, #32
 8003978:	4453      	add	r3, sl
 800397a:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 800397e:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8003988:	4640      	mov	r0, r8
 800398a:	f7fd fa64 	bl	8000e56 <strlen>
 800398e:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 8003990:	1be3      	subs	r3, r4, r7
 8003992:	442b      	add	r3, r5
 8003994:	3301      	adds	r3, #1
 8003996:	459b      	cmp	fp, r3
 8003998:	d331      	bcc.n	80039fe <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 800399a:	f804 6b01 	strb.w	r6, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800399e:	462a      	mov	r2, r5
 80039a0:	4641      	mov	r1, r8
 80039a2:	4620      	mov	r0, r4
 80039a4:	f00c fb51 	bl	801004a <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 80039a8:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 80039aa:	f10a 0a01 	add.w	sl, sl, #1
 80039ae:	45d1      	cmp	r9, sl
 80039b0:	d909      	bls.n	80039c6 <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 80039b2:	9b00      	ldr	r3, [sp, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0de      	beq.n	8003976 <cbvprintf_package+0x3e2>
 80039b8:	ab08      	add	r3, sp, #32
 80039ba:	4453      	add	r3, sl
 80039bc:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	dad8      	bge.n	8003976 <cbvprintf_package+0x3e2>
 80039c4:	e7f1      	b.n	80039aa <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 80039c6:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 80039c8:	b009      	add	sp, #36	; 0x24
 80039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 80039ce:	f06f 000d 	mvn.w	r0, #13
 80039d2:	e7f9      	b.n	80039c8 <cbvprintf_package+0x434>
		return -ENOSPC;
 80039d4:	f06f 001b 	mvn.w	r0, #27
 80039d8:	e7f6      	b.n	80039c8 <cbvprintf_package+0x434>
			return -ENOSPC;
 80039da:	f06f 001b 	mvn.w	r0, #27
 80039de:	e7f3      	b.n	80039c8 <cbvprintf_package+0x434>
					return -EINVAL;
 80039e0:	f06f 0015 	mvn.w	r0, #21
 80039e4:	e7f0      	b.n	80039c8 <cbvprintf_package+0x434>
					return -EINVAL;
 80039e6:	f06f 0015 	mvn.w	r0, #21
 80039ea:	e7ed      	b.n	80039c8 <cbvprintf_package+0x434>
			return -EINVAL;
 80039ec:	f06f 0015 	mvn.w	r0, #21
 80039f0:	e7ea      	b.n	80039c8 <cbvprintf_package+0x434>
		return -EINVAL;
 80039f2:	f06f 0015 	mvn.w	r0, #21
 80039f6:	e7e7      	b.n	80039c8 <cbvprintf_package+0x434>
				return -ENOSPC;
 80039f8:	f06f 001b 	mvn.w	r0, #27
 80039fc:	e7e4      	b.n	80039c8 <cbvprintf_package+0x434>
			return -ENOSPC;
 80039fe:	f06f 001b 	mvn.w	r0, #27
 8003a02:	e7e1      	b.n	80039c8 <cbvprintf_package+0x434>

08003a04 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8003a04:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8003a06:	680b      	ldr	r3, [r1, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8003a0c:	4b01      	ldr	r3, [pc, #4]	; (8003a14 <char_out+0x10>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4798      	blx	r3
}
 8003a12:	bd08      	pop	{r3, pc}
 8003a14:	20000004 	.word	0x20000004

08003a18 <__printk_hook_install>:
	_char_out = fn;
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <__printk_hook_install+0x8>)
 8003a1a:	6018      	str	r0, [r3, #0]
}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000004 	.word	0x20000004

08003a24 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 8003a24:	b500      	push	{lr}
 8003a26:	b083      	sub	sp, #12
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 8003a30:	a901      	add	r1, sp, #4
 8003a32:	4803      	ldr	r0, [pc, #12]	; (8003a40 <vprintk+0x1c>)
 8003a34:	f000 fa2c 	bl	8003e90 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 8003a38:	b003      	add	sp, #12
 8003a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a3e:	bf00      	nop
 8003a40:	08003a05 	.word	0x08003a05

08003a44 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8003a44:	b510      	push	{r4, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8003a4a:	9001      	str	r0, [sp, #4]
 8003a4c:	9102      	str	r1, [sp, #8]
 8003a4e:	2100      	movs	r1, #0
 8003a50:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 8003a52:	a901      	add	r1, sp, #4
 8003a54:	4805      	ldr	r0, [pc, #20]	; (8003a6c <vsnprintk+0x28>)
 8003a56:	f000 fa1b 	bl	8003e90 <cbvprintf>

	if (ctx.count < ctx.max) {
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	9a02      	ldr	r2, [sp, #8]
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	da01      	bge.n	8003a66 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8003a62:	2200      	movs	r2, #0
 8003a64:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8003a66:	9803      	ldr	r0, [sp, #12]
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd10      	pop	{r4, pc}
 8003a6c:	0800dcd1 	.word	0x0800dcd1

08003a70 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8003a70:	4684      	mov	ip, r0
	const char *sp = *str;
 8003a72:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8003a74:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8003a76:	e005      	b.n	8003a84 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8003a78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a7c:	3201      	adds	r2, #1
 8003a7e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003a82:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8003a84:	7813      	ldrb	r3, [r2, #0]
 8003a86:	4904      	ldr	r1, [pc, #16]	; (8003a98 <extract_decimal+0x28>)
 8003a88:	5c59      	ldrb	r1, [r3, r1]
 8003a8a:	f011 0f04 	tst.w	r1, #4
 8003a8e:	d1f3      	bne.n	8003a78 <extract_decimal+0x8>
	}
	*str = sp;
 8003a90:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	08012205 	.word	0x08012205

08003a9c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6003      	str	r3, [r0, #0]
 8003aa6:	6043      	str	r3, [r0, #4]
 8003aa8:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8003aaa:	784b      	ldrb	r3, [r1, #1]
 8003aac:	2b25      	cmp	r3, #37	; 0x25
 8003aae:	d002      	beq.n	8003ab6 <extract_conversion+0x1a>
 8003ab0:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8003ab2:	2501      	movs	r5, #1
 8003ab4:	e01f      	b.n	8003af6 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8003ab6:	1c88      	adds	r0, r1, #2
 8003ab8:	70e3      	strb	r3, [r4, #3]
		return sp;
 8003aba:	e145      	b.n	8003d48 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8003abc:	7823      	ldrb	r3, [r4, #0]
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8003ac4:	b1b5      	cbz	r5, 8003af4 <extract_conversion+0x58>
			++sp;
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e014      	b.n	8003af4 <extract_conversion+0x58>
			conv->flag_plus = true;
 8003aca:	7823      	ldrb	r3, [r4, #0]
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	7023      	strb	r3, [r4, #0]
			break;
 8003ad2:	e7f7      	b.n	8003ac4 <extract_conversion+0x28>
			conv->flag_space = true;
 8003ad4:	7823      	ldrb	r3, [r4, #0]
 8003ad6:	f043 0310 	orr.w	r3, r3, #16
 8003ada:	7023      	strb	r3, [r4, #0]
			break;
 8003adc:	e7f2      	b.n	8003ac4 <extract_conversion+0x28>
			conv->flag_hash = true;
 8003ade:	7823      	ldrb	r3, [r4, #0]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	7023      	strb	r3, [r4, #0]
			break;
 8003ae6:	e7ed      	b.n	8003ac4 <extract_conversion+0x28>
			conv->flag_zero = true;
 8003ae8:	7823      	ldrb	r3, [r4, #0]
 8003aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aee:	7023      	strb	r3, [r4, #0]
			break;
 8003af0:	e7e8      	b.n	8003ac4 <extract_conversion+0x28>
		switch (*sp) {
 8003af2:	2500      	movs	r5, #0
	} while (loop);
 8003af4:	b345      	cbz	r5, 8003b48 <extract_conversion+0xac>
		switch (*sp) {
 8003af6:	7833      	ldrb	r3, [r6, #0]
 8003af8:	3b20      	subs	r3, #32
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d8f9      	bhi.n	8003af2 <extract_conversion+0x56>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <extract_conversion+0x68>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003ad5 	.word	0x08003ad5
 8003b08:	08003af3 	.word	0x08003af3
 8003b0c:	08003af3 	.word	0x08003af3
 8003b10:	08003adf 	.word	0x08003adf
 8003b14:	08003af3 	.word	0x08003af3
 8003b18:	08003af3 	.word	0x08003af3
 8003b1c:	08003af3 	.word	0x08003af3
 8003b20:	08003af3 	.word	0x08003af3
 8003b24:	08003af3 	.word	0x08003af3
 8003b28:	08003af3 	.word	0x08003af3
 8003b2c:	08003af3 	.word	0x08003af3
 8003b30:	08003acb 	.word	0x08003acb
 8003b34:	08003af3 	.word	0x08003af3
 8003b38:	08003abd 	.word	0x08003abd
 8003b3c:	08003af3 	.word	0x08003af3
 8003b40:	08003af3 	.word	0x08003af3
 8003b44:	08003ae9 	.word	0x08003ae9
	if (conv->flag_zero && conv->flag_dash) {
 8003b48:	7823      	ldrb	r3, [r4, #0]
 8003b4a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8003b4e:	2b44      	cmp	r3, #68	; 0x44
 8003b50:	d05f      	beq.n	8003c12 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8003b52:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8003b54:	7823      	ldrb	r3, [r4, #0]
 8003b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5a:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8003b5c:	7833      	ldrb	r3, [r6, #0]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	d05c      	beq.n	8003c1c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8003b62:	a801      	add	r0, sp, #4
 8003b64:	f7ff ff84 	bl	8003a70 <extract_decimal>
	if (sp != wp) {
 8003b68:	9b01      	ldr	r3, [sp, #4]
 8003b6a:	429e      	cmp	r6, r3
 8003b6c:	d00f      	beq.n	8003b8e <extract_conversion+0xf2>
		conv->width_present = true;
 8003b6e:	7823      	ldrb	r3, [r4, #0]
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8003b76:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	db54      	blt.n	8003c2c <extract_conversion+0x190>
 8003b82:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	7822      	ldrb	r2, [r4, #0]
 8003b88:	f363 0241 	bfi	r2, r3, #1, #1
 8003b8c:	7022      	strb	r2, [r4, #0]
	return sp;
 8003b8e:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8003b90:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b2e      	cmp	r3, #46	; 0x2e
 8003b96:	bf14      	ite	ne
 8003b98:	2300      	movne	r3, #0
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	7862      	ldrb	r2, [r4, #1]
 8003b9e:	f363 0241 	bfi	r2, r3, #1, #1
 8003ba2:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d043      	beq.n	8003c30 <extract_conversion+0x194>
	++sp;
 8003ba8:	9b01      	ldr	r3, [sp, #4]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d03f      	beq.n	8003c34 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8003bb4:	a801      	add	r0, sp, #4
 8003bb6:	f7ff ff5b 	bl	8003a70 <extract_decimal>
	conv->prec_value = prec;
 8003bba:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8003bbc:	7823      	ldrb	r3, [r4, #0]
 8003bbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	db3e      	blt.n	8003c44 <extract_conversion+0x1a8>
 8003bc6:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	7822      	ldrb	r2, [r4, #0]
 8003bcc:	f363 0241 	bfi	r2, r3, #1, #1
 8003bd0:	7022      	strb	r2, [r4, #0]
	return sp;
 8003bd2:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8003bd4:	7803      	ldrb	r3, [r0, #0]
 8003bd6:	3b4c      	subs	r3, #76	; 0x4c
 8003bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bda:	f200 809d 	bhi.w	8003d18 <extract_conversion+0x27c>
 8003bde:	e8df f003 	tbb	[pc, r3]
 8003be2:	9b90      	.short	0x9b90
 8003be4:	9b9b9b9b 	.word	0x9b9b9b9b
 8003be8:	9b9b9b9b 	.word	0x9b9b9b9b
 8003bec:	9b9b9b9b 	.word	0x9b9b9b9b
 8003bf0:	9b9b9b9b 	.word	0x9b9b9b9b
 8003bf4:	9b9b9b9b 	.word	0x9b9b9b9b
 8003bf8:	9b9b9b9b 	.word	0x9b9b9b9b
 8003bfc:	9b339b9b 	.word	0x9b339b9b
 8003c00:	9b459b57 	.word	0x9b459b57
 8003c04:	9b9b9b9b 	.word	0x9b9b9b9b
 8003c08:	9b899b9b 	.word	0x9b899b9b
 8003c0c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003c10:	82          	.byte	0x82
 8003c11:	00          	.byte	0x00
		conv->flag_zero = false;
 8003c12:	7823      	ldrb	r3, [r4, #0]
 8003c14:	f36f 1386 	bfc	r3, #6, #1
 8003c18:	7023      	strb	r3, [r4, #0]
 8003c1a:	e79a      	b.n	8003b52 <extract_conversion+0xb6>
		conv->width_star = true;
 8003c1c:	7863      	ldrb	r3, [r4, #1]
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003c24:	4633      	mov	r3, r6
 8003c26:	3301      	adds	r3, #1
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	e7b1      	b.n	8003b90 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	e7a9      	b.n	8003b84 <extract_conversion+0xe8>
		return sp;
 8003c30:	9801      	ldr	r0, [sp, #4]
 8003c32:	e7cf      	b.n	8003bd4 <extract_conversion+0x138>
		conv->prec_star = true;
 8003c34:	7863      	ldrb	r3, [r4, #1]
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	3001      	adds	r0, #1
 8003c40:	9001      	str	r0, [sp, #4]
 8003c42:	e7c7      	b.n	8003bd4 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8003c44:	2201      	movs	r2, #1
 8003c46:	e7bf      	b.n	8003bc8 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8003c48:	1c42      	adds	r2, r0, #1
 8003c4a:	7843      	ldrb	r3, [r0, #1]
 8003c4c:	2b68      	cmp	r3, #104	; 0x68
 8003c4e:	d006      	beq.n	8003c5e <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8003c50:	7863      	ldrb	r3, [r4, #1]
 8003c52:	2102      	movs	r1, #2
 8003c54:	f361 03c6 	bfi	r3, r1, #3, #4
 8003c58:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	e01e      	b.n	8003c9c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8003c5e:	7863      	ldrb	r3, [r4, #1]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f362 03c6 	bfi	r3, r2, #3, #4
 8003c66:	7063      	strb	r3, [r4, #1]
			++sp;
 8003c68:	3002      	adds	r0, #2
 8003c6a:	e017      	b.n	8003c9c <extract_conversion+0x200>
		if (*++sp == 'l') {
 8003c6c:	1c42      	adds	r2, r0, #1
 8003c6e:	7843      	ldrb	r3, [r0, #1]
 8003c70:	2b6c      	cmp	r3, #108	; 0x6c
 8003c72:	d006      	beq.n	8003c82 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8003c74:	7863      	ldrb	r3, [r4, #1]
 8003c76:	2103      	movs	r1, #3
 8003c78:	f361 03c6 	bfi	r3, r1, #3, #4
 8003c7c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8003c7e:	4610      	mov	r0, r2
 8003c80:	e00c      	b.n	8003c9c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8003c82:	7863      	ldrb	r3, [r4, #1]
 8003c84:	2204      	movs	r2, #4
 8003c86:	f362 03c6 	bfi	r3, r2, #3, #4
 8003c8a:	7063      	strb	r3, [r4, #1]
			++sp;
 8003c8c:	3002      	adds	r0, #2
 8003c8e:	e005      	b.n	8003c9c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8003c90:	7863      	ldrb	r3, [r4, #1]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f362 03c6 	bfi	r3, r2, #3, #4
 8003c98:	7063      	strb	r3, [r4, #1]
		++sp;
 8003c9a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8003c9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ca0:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8003ca2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003ca6:	2a37      	cmp	r2, #55	; 0x37
 8003ca8:	d87d      	bhi.n	8003da6 <extract_conversion+0x30a>
 8003caa:	e8df f002 	tbb	[pc, r2]
 8003cae:	7c5e      	.short	0x7c5e
 8003cb0:	5e5e7c7c 	.word	0x5e5e7c7c
 8003cb4:	7c7c7c5e 	.word	0x7c7c7c5e
 8003cb8:	7c7c7c7c 	.word	0x7c7c7c7c
 8003cbc:	7c7c7c7c 	.word	0x7c7c7c7c
 8003cc0:	7c7c7c7c 	.word	0x7c7c7c7c
 8003cc4:	7c7c4f7c 	.word	0x7c7c4f7c
 8003cc8:	7c7c7c7c 	.word	0x7c7c7c7c
 8003ccc:	7c5e7c7c 	.word	0x7c5e7c7c
 8003cd0:	5e5e3a4f 	.word	0x5e5e3a4f
 8003cd4:	7c3a7c5e 	.word	0x7c3a7c5e
 8003cd8:	657c7c7c 	.word	0x657c7c7c
 8003cdc:	7c7c714f 	.word	0x7c7c714f
 8003ce0:	7c4f7c71 	.word	0x7c4f7c71
 8003ce4:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8003ce6:	7863      	ldrb	r3, [r4, #1]
 8003ce8:	2206      	movs	r2, #6
 8003cea:	f362 03c6 	bfi	r3, r2, #3, #4
 8003cee:	7063      	strb	r3, [r4, #1]
		++sp;
 8003cf0:	3001      	adds	r0, #1
		break;
 8003cf2:	e7d3      	b.n	8003c9c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8003cf4:	7863      	ldrb	r3, [r4, #1]
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	f362 03c6 	bfi	r3, r2, #3, #4
 8003cfc:	7063      	strb	r3, [r4, #1]
		++sp;
 8003cfe:	3001      	adds	r0, #1
		break;
 8003d00:	e7cc      	b.n	8003c9c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8003d02:	7863      	ldrb	r3, [r4, #1]
 8003d04:	2208      	movs	r2, #8
 8003d06:	f362 03c6 	bfi	r3, r2, #3, #4
 8003d0a:	7063      	strb	r3, [r4, #1]
		++sp;
 8003d0c:	3001      	adds	r0, #1
		conv->unsupported = true;
 8003d0e:	7823      	ldrb	r3, [r4, #0]
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	7023      	strb	r3, [r4, #0]
		break;
 8003d16:	e7c1      	b.n	8003c9c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8003d18:	7863      	ldrb	r3, [r4, #1]
 8003d1a:	f36f 03c6 	bfc	r3, #3, #4
 8003d1e:	7063      	strb	r3, [r4, #1]
		break;
 8003d20:	e7bc      	b.n	8003c9c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8003d22:	78a2      	ldrb	r2, [r4, #2]
 8003d24:	2101      	movs	r1, #1
 8003d26:	f361 0202 	bfi	r2, r1, #0, #3
 8003d2a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003d2c:	7862      	ldrb	r2, [r4, #1]
 8003d2e:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8003d32:	2a40      	cmp	r2, #64	; 0x40
 8003d34:	d010      	beq.n	8003d58 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8003d36:	2b63      	cmp	r3, #99	; 0x63
 8003d38:	d013      	beq.n	8003d62 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8003d3a:	7823      	ldrb	r3, [r4, #0]
 8003d3c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8003d40:	4315      	orrs	r5, r2
 8003d42:	f365 0341 	bfi	r3, r5, #1, #1
 8003d46:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8003d4c:	78a2      	ldrb	r2, [r4, #2]
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f361 0202 	bfi	r2, r1, #0, #3
 8003d54:	70a2      	strb	r2, [r4, #2]
 8003d56:	e7e9      	b.n	8003d2c <extract_conversion+0x290>
			conv->invalid = true;
 8003d58:	7821      	ldrb	r1, [r4, #0]
 8003d5a:	f041 0101 	orr.w	r1, r1, #1
 8003d5e:	7021      	strb	r1, [r4, #0]
 8003d60:	e7e9      	b.n	8003d36 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8003d62:	1e15      	subs	r5, r2, #0
 8003d64:	bf18      	it	ne
 8003d66:	2501      	movne	r5, #1
 8003d68:	e7e7      	b.n	8003d3a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8003d6a:	78a3      	ldrb	r3, [r4, #2]
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	f362 0302 	bfi	r3, r2, #0, #3
 8003d72:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8003d74:	2501      	movs	r5, #1
			break;
 8003d76:	e7e0      	b.n	8003d3a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003d78:	78a3      	ldrb	r3, [r4, #2]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f362 0302 	bfi	r3, r2, #0, #3
 8003d80:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003d82:	7863      	ldrb	r3, [r4, #1]
 8003d84:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d1d6      	bne.n	8003d3a <extract_conversion+0x29e>
			unsupported = true;
 8003d8c:	2501      	movs	r5, #1
 8003d8e:	e7d4      	b.n	8003d3a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003d90:	78a3      	ldrb	r3, [r4, #2]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f362 0302 	bfi	r3, r2, #0, #3
 8003d98:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8003d9a:	7863      	ldrb	r3, [r4, #1]
 8003d9c:	f013 0f78 	tst.w	r3, #120	; 0x78
 8003da0:	d0cb      	beq.n	8003d3a <extract_conversion+0x29e>
			unsupported = true;
 8003da2:	2501      	movs	r5, #1
 8003da4:	e7c9      	b.n	8003d3a <extract_conversion+0x29e>
		conv->invalid = true;
 8003da6:	7823      	ldrb	r3, [r4, #0]
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	7023      	strb	r3, [r4, #0]
		break;
 8003dae:	e7c4      	b.n	8003d3a <extract_conversion+0x29e>

08003db0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b083      	sub	sp, #12
 8003db6:	4604      	mov	r4, r0
 8003db8:	460d      	mov	r5, r1
 8003dba:	9201      	str	r2, [sp, #4]
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8003dc0:	78d3      	ldrb	r3, [r2, #3]
 8003dc2:	4a32      	ldr	r2, [pc, #200]	; (8003e8c <encode_uint+0xdc>)
 8003dc4:	f813 b002 	ldrb.w	fp, [r3, r2]
 8003dc8:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8003dcc:	2b6f      	cmp	r3, #111	; 0x6f
 8003dce:	d00f      	beq.n	8003df0 <encode_uint+0x40>
 8003dd0:	d906      	bls.n	8003de0 <encode_uint+0x30>
 8003dd2:	2b70      	cmp	r3, #112	; 0x70
 8003dd4:	d00f      	beq.n	8003df6 <encode_uint+0x46>
 8003dd6:	2b78      	cmp	r3, #120	; 0x78
 8003dd8:	d110      	bne.n	8003dfc <encode_uint+0x4c>
		return 16;
 8003dda:	f04f 0910 	mov.w	r9, #16
 8003dde:	e023      	b.n	8003e28 <encode_uint+0x78>
	switch (specifier) {
 8003de0:	2b58      	cmp	r3, #88	; 0x58
 8003de2:	d002      	beq.n	8003dea <encode_uint+0x3a>
 8003de4:	f04f 090a 	mov.w	r9, #10
 8003de8:	e01e      	b.n	8003e28 <encode_uint+0x78>
		return 16;
 8003dea:	f04f 0910 	mov.w	r9, #16
 8003dee:	e01b      	b.n	8003e28 <encode_uint+0x78>
		return 8;
 8003df0:	f04f 0908 	mov.w	r9, #8
 8003df4:	e018      	b.n	8003e28 <encode_uint+0x78>
		return 16;
 8003df6:	f04f 0910 	mov.w	r9, #16
 8003dfa:	e015      	b.n	8003e28 <encode_uint+0x78>
	switch (specifier) {
 8003dfc:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8003e00:	e012      	b.n	8003e28 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	3230      	adds	r2, #48	; 0x30
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8003e0c:	463a      	mov	r2, r7
 8003e0e:	4643      	mov	r3, r8
 8003e10:	4620      	mov	r0, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7fc fde2 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8003e18:	42bc      	cmp	r4, r7
 8003e1a:	f175 0300 	sbcs.w	r3, r5, #0
 8003e1e:	d319      	bcc.n	8003e54 <encode_uint+0xa4>
 8003e20:	4556      	cmp	r6, sl
 8003e22:	d917      	bls.n	8003e54 <encode_uint+0xa4>
		value /= radix;
 8003e24:	4604      	mov	r4, r0
 8003e26:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8003e28:	f04f 0800 	mov.w	r8, #0
 8003e2c:	464f      	mov	r7, r9
 8003e2e:	464a      	mov	r2, r9
 8003e30:	4643      	mov	r3, r8
 8003e32:	4620      	mov	r0, r4
 8003e34:	4629      	mov	r1, r5
 8003e36:	f7fc fdd1 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003e3a:	2a09      	cmp	r2, #9
 8003e3c:	d9e1      	bls.n	8003e02 <encode_uint+0x52>
 8003e3e:	f1bb 0f01 	cmp.w	fp, #1
 8003e42:	d003      	beq.n	8003e4c <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003e44:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003e46:	3257      	adds	r2, #87	; 0x57
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	e7dd      	b.n	8003e08 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003e4c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003e4e:	3237      	adds	r2, #55	; 0x37
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	e7d9      	b.n	8003e08 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8003e54:	9b01      	ldr	r3, [sp, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f013 0f20 	tst.w	r3, #32
 8003e5c:	d005      	beq.n	8003e6a <encode_uint+0xba>
		if (radix == 8) {
 8003e5e:	f1b9 0f08 	cmp.w	r9, #8
 8003e62:	d006      	beq.n	8003e72 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8003e64:	f1b9 0f10 	cmp.w	r9, #16
 8003e68:	d009      	beq.n	8003e7e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8003e72:	9a01      	ldr	r2, [sp, #4]
 8003e74:	7893      	ldrb	r3, [r2, #2]
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	7093      	strb	r3, [r2, #2]
 8003e7c:	e7f5      	b.n	8003e6a <encode_uint+0xba>
			conv->altform_0c = true;
 8003e7e:	9a01      	ldr	r2, [sp, #4]
 8003e80:	7893      	ldrb	r3, [r2, #2]
 8003e82:	f043 0310 	orr.w	r3, r3, #16
 8003e86:	7093      	strb	r3, [r2, #2]
 8003e88:	e7ef      	b.n	8003e6a <encode_uint+0xba>
 8003e8a:	bf00      	nop
 8003e8c:	08012205 	.word	0x08012205

08003e90 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	b091      	sub	sp, #68	; 0x44
 8003e96:	4606      	mov	r6, r0
 8003e98:	460d      	mov	r5, r1
 8003e9a:	4691      	mov	r9, r2
 8003e9c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8003e9e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8003ea0:	f899 0000 	ldrb.w	r0, [r9]
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	f000 82d5 	beq.w	8004454 <cbvprintf+0x5c4>
		if (*fp != '%') {
 8003eaa:	2825      	cmp	r0, #37	; 0x25
 8003eac:	d008      	beq.n	8003ec0 <cbvprintf+0x30>
			OUTC(*fp++);
 8003eae:	f109 0901 	add.w	r9, r9, #1
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	47b0      	blx	r6
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	f2c0 82cd 	blt.w	8004456 <cbvprintf+0x5c6>
 8003ebc:	3401      	adds	r4, #1
			continue;
 8003ebe:	e7ef      	b.n	8003ea0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	9306      	str	r3, [sp, #24]
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	9308      	str	r3, [sp, #32]
 8003ecc:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8003ece:	4649      	mov	r1, r9
 8003ed0:	a806      	add	r0, sp, #24
 8003ed2:	f7ff fde3 	bl	8003a9c <extract_conversion>
 8003ed6:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8003ed8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003edc:	f013 0f01 	tst.w	r3, #1
 8003ee0:	f000 8097 	beq.w	8004012 <cbvprintf+0x182>
			width = va_arg(ap, int);
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	1d1a      	adds	r2, r3, #4
 8003ee8:	9203      	str	r2, [sp, #12]
 8003eea:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8003eec:	2f00      	cmp	r7, #0
 8003eee:	f2c0 8088 	blt.w	8004002 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8003ef2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003ef6:	f013 0f04 	tst.w	r3, #4
 8003efa:	f000 809c 	beq.w	8004036 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	9203      	str	r2, [sp, #12]
 8003f04:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8003f08:	f1ba 0f00 	cmp.w	sl, #0
 8003f0c:	f2c0 808a 	blt.w	8004024 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8003f14:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8003f16:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8003f1e:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003f22:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	f000 808e 	beq.w	8004048 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f000 80d3 	beq.w	80040d8 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	f000 8124 	beq.w	8004180 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	f000 813b 	beq.w	80041b4 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8003f3e:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8003f42:	f018 0b03 	ands.w	fp, r8, #3
 8003f46:	f040 813b 	bne.w	80041c0 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8003f4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003f4e:	3b25      	subs	r3, #37	; 0x25
 8003f50:	2b53      	cmp	r3, #83	; 0x53
 8003f52:	f200 81e6 	bhi.w	8004322 <cbvprintf+0x492>
 8003f56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f5a:	0140      	.short	0x0140
 8003f5c:	01e401e4 	.word	0x01e401e4
 8003f60:	01e401e4 	.word	0x01e401e4
 8003f64:	01e401e4 	.word	0x01e401e4
 8003f68:	01e401e4 	.word	0x01e401e4
 8003f6c:	01e401e4 	.word	0x01e401e4
 8003f70:	01e401e4 	.word	0x01e401e4
 8003f74:	01e401e4 	.word	0x01e401e4
 8003f78:	01e401e4 	.word	0x01e401e4
 8003f7c:	01e401e4 	.word	0x01e401e4
 8003f80:	01e401e4 	.word	0x01e401e4
 8003f84:	01e401e4 	.word	0x01e401e4
 8003f88:	01e401e4 	.word	0x01e401e4
 8003f8c:	01e401e4 	.word	0x01e401e4
 8003f90:	01e401e4 	.word	0x01e401e4
 8003f94:	01e401e4 	.word	0x01e401e4
 8003f98:	01e401e4 	.word	0x01e401e4
 8003f9c:	01e401e4 	.word	0x01e401e4
 8003fa0:	01e401e4 	.word	0x01e401e4
 8003fa4:	01e401e4 	.word	0x01e401e4
 8003fa8:	01e401e4 	.word	0x01e401e4
 8003fac:	01e401e4 	.word	0x01e401e4
 8003fb0:	01e401e4 	.word	0x01e401e4
 8003fb4:	01e401e4 	.word	0x01e401e4
 8003fb8:	01e401e4 	.word	0x01e401e4
 8003fbc:	01e401e4 	.word	0x01e401e4
 8003fc0:	01e40181 	.word	0x01e40181
 8003fc4:	01e401e4 	.word	0x01e401e4
 8003fc8:	01e401e4 	.word	0x01e401e4
 8003fcc:	01e401e4 	.word	0x01e401e4
 8003fd0:	01e401e4 	.word	0x01e401e4
 8003fd4:	015e01e4 	.word	0x015e01e4
 8003fd8:	01e40167 	.word	0x01e40167
 8003fdc:	01e401e4 	.word	0x01e401e4
 8003fe0:	016701e4 	.word	0x016701e4
 8003fe4:	01e401e4 	.word	0x01e401e4
 8003fe8:	01e401e4 	.word	0x01e401e4
 8003fec:	018101be 	.word	0x018101be
 8003ff0:	01e401a2 	.word	0x01e401a2
 8003ff4:	014d01e4 	.word	0x014d01e4
 8003ff8:	018101e4 	.word	0x018101e4
 8003ffc:	01e401e4 	.word	0x01e401e4
 8004000:	0181      	.short	0x0181
				conv->flag_dash = true;
 8004002:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 800400e:	427f      	negs	r7, r7
 8004010:	e76f      	b.n	8003ef2 <cbvprintf+0x62>
		} else if (conv->width_present) {
 8004012:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	db02      	blt.n	8004020 <cbvprintf+0x190>
		int width = -1;
 800401a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800401e:	e768      	b.n	8003ef2 <cbvprintf+0x62>
			width = conv->width_value;
 8004020:	9f07      	ldr	r7, [sp, #28]
 8004022:	e766      	b.n	8003ef2 <cbvprintf+0x62>
				conv->prec_present = false;
 8004024:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004028:	f36f 0341 	bfc	r3, #1, #1
 800402c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8004030:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004034:	e76c      	b.n	8003f10 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8004036:	f013 0f02 	tst.w	r3, #2
 800403a:	d002      	beq.n	8004042 <cbvprintf+0x1b2>
			precision = conv->prec_value;
 800403c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004040:	e766      	b.n	8003f10 <cbvprintf+0x80>
		int precision = -1;
 8004042:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004046:	e763      	b.n	8003f10 <cbvprintf+0x80>
			switch (length_mod) {
 8004048:	1ecb      	subs	r3, r1, #3
 800404a:	2b04      	cmp	r3, #4
 800404c:	d804      	bhi.n	8004058 <cbvprintf+0x1c8>
 800404e:	e8df f003 	tbb	[pc, r3]
 8004052:	1d0b      	.short	0x1d0b
 8004054:	3529      	.short	0x3529
 8004056:	35          	.byte	0x35
 8004057:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8004058:	9b03      	ldr	r3, [sp, #12]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	9203      	str	r2, [sp, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	17da      	asrs	r2, r3, #31
 8004062:	9304      	str	r3, [sp, #16]
 8004064:	9205      	str	r2, [sp, #20]
				break;
 8004066:	e006      	b.n	8004076 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8004068:	9b03      	ldr	r3, [sp, #12]
 800406a:	1d1a      	adds	r2, r3, #4
 800406c:	9203      	str	r2, [sp, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	17da      	asrs	r2, r3, #31
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8004076:	2901      	cmp	r1, #1
 8004078:	d028      	beq.n	80040cc <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 800407a:	2902      	cmp	r1, #2
 800407c:	f47f af5f 	bne.w	8003f3e <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8004080:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8004084:	17da      	asrs	r2, r3, #31
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	9205      	str	r2, [sp, #20]
 800408a:	e758      	b.n	8003f3e <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	3307      	adds	r3, #7
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	f103 0208 	add.w	r2, r3, #8
 8004098:	9203      	str	r2, [sp, #12]
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 800409e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80040a2:	e7e8      	b.n	8004076 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	f103 0208 	add.w	r2, r3, #8
 80040b0:	9203      	str	r2, [sp, #12]
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80040b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80040ba:	e7dc      	b.n	8004076 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80040bc:	9b03      	ldr	r3, [sp, #12]
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	9203      	str	r2, [sp, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	17da      	asrs	r2, r3, #31
				value->sint =
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	9205      	str	r2, [sp, #20]
				break;
 80040ca:	e7d4      	b.n	8004076 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80040cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	2300      	movs	r3, #0
 80040d4:	9305      	str	r3, [sp, #20]
 80040d6:	e732      	b.n	8003f3e <cbvprintf+0xae>
			switch (length_mod) {
 80040d8:	1ecb      	subs	r3, r1, #3
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d804      	bhi.n	80040e8 <cbvprintf+0x258>
 80040de:	e8df f003 	tbb	[pc, r3]
 80040e2:	1f0b      	.short	0x1f0b
 80040e4:	4135      	.short	0x4135
 80040e6:	41          	.byte	0x41
 80040e7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	9203      	str	r2, [sp, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9305      	str	r3, [sp, #20]
				break;
 80040f6:	e01e      	b.n	8004136 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 80040f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 80040fc:	2b63      	cmp	r3, #99	; 0x63
 80040fe:	d007      	beq.n	8004110 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	1d1a      	adds	r2, r3, #4
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	9304      	str	r3, [sp, #16]
 800410a:	2300      	movs	r3, #0
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	e012      	b.n	8004136 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	9203      	str	r2, [sp, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9304      	str	r3, [sp, #16]
 800411a:	2300      	movs	r3, #0
 800411c:	9305      	str	r3, [sp, #20]
 800411e:	e00a      	b.n	8004136 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	3307      	adds	r3, #7
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	f103 0208 	add.w	r2, r3, #8
 800412c:	9203      	str	r2, [sp, #12]
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8004132:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8004136:	2901      	cmp	r1, #1
 8004138:	d01c      	beq.n	8004174 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 800413a:	2902      	cmp	r1, #2
 800413c:	f47f aeff 	bne.w	8003f3e <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8004140:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	2300      	movs	r3, #0
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	e6f8      	b.n	8003f3e <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	3307      	adds	r3, #7
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	f103 0208 	add.w	r2, r3, #8
 8004158:	9203      	str	r2, [sp, #12]
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800415e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8004162:	e7e8      	b.n	8004136 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	9203      	str	r2, [sp, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
				value->uint =
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	2300      	movs	r3, #0
 8004170:	9305      	str	r3, [sp, #20]
				break;
 8004172:	e7e0      	b.n	8004136 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8004174:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	2300      	movs	r3, #0
 800417c:	9305      	str	r3, [sp, #20]
 800417e:	e6de      	b.n	8003f3e <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8004180:	2908      	cmp	r1, #8
 8004182:	d00b      	beq.n	800419c <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	3307      	adds	r3, #7
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	f103 0208 	add.w	r2, r3, #8
 8004190:	9203      	str	r2, [sp, #12]
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800419a:	e6d0      	b.n	8003f3e <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	3307      	adds	r3, #7
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	f103 0208 	add.w	r2, r3, #8
 80041a8:	9203      	str	r2, [sp, #12]
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041b2:	e6c4      	b.n	8003f3e <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80041b4:	9b03      	ldr	r3, [sp, #12]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	9203      	str	r2, [sp, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	e6be      	b.n	8003f3e <cbvprintf+0xae>
			OUTS(sp, fp);
 80041c0:	9f02      	ldr	r7, [sp, #8]
 80041c2:	463b      	mov	r3, r7
 80041c4:	464a      	mov	r2, r9
 80041c6:	4629      	mov	r1, r5
 80041c8:	4630      	mov	r0, r6
 80041ca:	f009 fe35 	bl	800de38 <outs>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f2c0 8141 	blt.w	8004456 <cbvprintf+0x5c6>
 80041d4:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 80041d6:	46b9      	mov	r9, r7
			continue;
 80041d8:	e662      	b.n	8003ea0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 80041da:	4629      	mov	r1, r5
 80041dc:	2025      	movs	r0, #37	; 0x25
 80041de:	47b0      	blx	r6
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f2c0 8138 	blt.w	8004456 <cbvprintf+0x5c6>
 80041e6:	3401      	adds	r4, #1
		char sign = 0;
 80041e8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80041ea:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80041ee:	f04f 0900 	mov.w	r9, #0
			break;
 80041f2:	e09b      	b.n	800432c <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 80041f4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 80041f8:	f1ba 0f00 	cmp.w	sl, #0
 80041fc:	db07      	blt.n	800420e <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 80041fe:	4651      	mov	r1, sl
 8004200:	4648      	mov	r0, r9
 8004202:	f00c f843 	bl	801028c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8004206:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 800420a:	46d8      	mov	r8, fp
			precision = -1;

			break;
 800420c:	e08e      	b.n	800432c <cbvprintf+0x49c>
				len = strlen(bps);
 800420e:	4648      	mov	r0, r9
 8004210:	f7fc fe21 	bl	8000e56 <strlen>
 8004214:	e7f7      	b.n	8004206 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8004216:	9b04      	ldr	r3, [sp, #16]
 8004218:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 800421c:	46d8      	mov	r8, fp
			bpe = buf + 1;
 800421e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8004222:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8004226:	e081      	b.n	800432c <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8004228:	f018 0f08 	tst.w	r8, #8
 800422c:	d105      	bne.n	800423a <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 800422e:	f018 0810 	ands.w	r8, r8, #16
 8004232:	d004      	beq.n	800423e <cbvprintf+0x3ae>
				sign = ' ';
 8004234:	f04f 0820 	mov.w	r8, #32
 8004238:	e001      	b.n	800423e <cbvprintf+0x3ae>
				sign = '+';
 800423a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 800423e:	9a04      	ldr	r2, [sp, #16]
 8004240:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8004242:	2b00      	cmp	r3, #0
 8004244:	db02      	blt.n	800424c <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8004246:	9204      	str	r2, [sp, #16]
 8004248:	9305      	str	r3, [sp, #20]
 800424a:	e008      	b.n	800425e <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 800424c:	4252      	negs	r2, r2
 800424e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004252:	9204      	str	r2, [sp, #16]
 8004254:	9305      	str	r3, [sp, #20]
				sign = '-';
 8004256:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800425a:	e000      	b.n	800425e <cbvprintf+0x3ce>
		switch (conv->specifier) {
 800425c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 800425e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	ab0a      	add	r3, sp, #40	; 0x28
 8004266:	aa06      	add	r2, sp, #24
 8004268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800426c:	f7ff fda0 	bl	8003db0 <encode_uint>
 8004270:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8004272:	f1ba 0f00 	cmp.w	sl, #0
 8004276:	f2c0 8088 	blt.w	800438a <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 800427a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800427e:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8004282:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004286:	f36f 1286 	bfc	r2, #6, #1
 800428a:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 800428e:	459a      	cmp	sl, r3
 8004290:	d97e      	bls.n	8004390 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8004292:	ebaa 0303 	sub.w	r3, sl, r3
 8004296:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8004298:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800429c:	e046      	b.n	800432c <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 800429e:	9804      	ldr	r0, [sp, #16]
 80042a0:	b928      	cbnz	r0, 80042ae <cbvprintf+0x41e>
		char sign = 0;
 80042a2:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 80042a4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800445c <cbvprintf+0x5cc>
			bps = "(nil)";
 80042a8:	f1aa 0905 	sub.w	r9, sl, #5
 80042ac:	e03e      	b.n	800432c <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80042ae:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	ab0a      	add	r3, sp, #40	; 0x28
 80042b6:	aa06      	add	r2, sp, #24
 80042b8:	2100      	movs	r1, #0
 80042ba:	f7ff fd79 	bl	8003db0 <encode_uint>
 80042be:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80042c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80042c4:	f043 0310 	orr.w	r3, r3, #16
 80042c8:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80042cc:	2378      	movs	r3, #120	; 0x78
 80042ce:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80042d2:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 80042d4:	e7cd      	b.n	8004272 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 80042d6:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 80042d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80042dc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80042e0:	2b07      	cmp	r3, #7
 80042e2:	d806      	bhi.n	80042f2 <cbvprintf+0x462>
 80042e4:	e8df f003 	tbb	[pc, r3]
 80042e8:	0f0d0b04 	.word	0x0f0d0b04
 80042ec:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 80042f0:	6014      	str	r4, [r2, #0]
		char sign = 0;
 80042f2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80042f4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80042f8:	f04f 0900 	mov.w	r9, #0
}
 80042fc:	e016      	b.n	800432c <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 80042fe:	7014      	strb	r4, [r2, #0]
		break;
 8004300:	e7f7      	b.n	80042f2 <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8004302:	8014      	strh	r4, [r2, #0]
		break;
 8004304:	e7f5      	b.n	80042f2 <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8004306:	6014      	str	r4, [r2, #0]
		break;
 8004308:	e7f3      	b.n	80042f2 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 800430a:	17e3      	asrs	r3, r4, #31
 800430c:	6014      	str	r4, [r2, #0]
 800430e:	6053      	str	r3, [r2, #4]
		break;
 8004310:	e7ef      	b.n	80042f2 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8004312:	17e3      	asrs	r3, r4, #31
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	6053      	str	r3, [r2, #4]
		break;
 8004318:	e7eb      	b.n	80042f2 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 800431a:	6014      	str	r4, [r2, #0]
		break;
 800431c:	e7e9      	b.n	80042f2 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800431e:	6014      	str	r4, [r2, #0]
		break;
 8004320:	e7e7      	b.n	80042f2 <cbvprintf+0x462>
		switch (conv->specifier) {
 8004322:	46d8      	mov	r8, fp
 8004324:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8004328:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 800432c:	f1b9 0f00 	cmp.w	r9, #0
 8004330:	f000 808d 	beq.w	800444e <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8004334:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8004338:	f1b8 0f00 	cmp.w	r8, #0
 800433c:	d000      	beq.n	8004340 <cbvprintf+0x4b0>
			nj_len += 1U;
 800433e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8004340:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8004344:	f011 0f10 	tst.w	r1, #16
 8004348:	d025      	beq.n	8004396 <cbvprintf+0x506>
			nj_len += 2U;
 800434a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 800434c:	9b07      	ldr	r3, [sp, #28]
 800434e:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8004350:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004354:	d001      	beq.n	800435a <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8004356:	9a08      	ldr	r2, [sp, #32]
 8004358:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 800435a:	2f00      	cmp	r7, #0
 800435c:	dd31      	ble.n	80043c2 <cbvprintf+0x532>
			width -= (int)nj_len;
 800435e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8004360:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004364:	f013 0f04 	tst.w	r3, #4
 8004368:	d12b      	bne.n	80043c2 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 800436a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800436e:	d017      	beq.n	80043a0 <cbvprintf+0x510>
					if (sign != 0) {
 8004370:	f1b8 0f00 	cmp.w	r8, #0
 8004374:	d017      	beq.n	80043a6 <cbvprintf+0x516>
						OUTC(sign);
 8004376:	4629      	mov	r1, r5
 8004378:	4640      	mov	r0, r8
 800437a:	47b0      	blx	r6
 800437c:	2800      	cmp	r0, #0
 800437e:	db6a      	blt.n	8004456 <cbvprintf+0x5c6>
 8004380:	3401      	adds	r4, #1
						sign = 0;
 8004382:	46d8      	mov	r8, fp
					}
					pad = '0';
 8004384:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8004388:	e00f      	b.n	80043aa <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 800438a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800438e:	e7cd      	b.n	800432c <cbvprintf+0x49c>
 8004390:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8004394:	e7ca      	b.n	800432c <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8004396:	f011 0f08 	tst.w	r1, #8
 800439a:	d0d7      	beq.n	800434c <cbvprintf+0x4bc>
			nj_len += 1U;
 800439c:	3201      	adds	r2, #1
 800439e:	e7d5      	b.n	800434c <cbvprintf+0x4bc>
				char pad = ' ';
 80043a0:	f04f 0b20 	mov.w	fp, #32
 80043a4:	e001      	b.n	80043aa <cbvprintf+0x51a>
					pad = '0';
 80043a6:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80043aa:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80043ac:	1e5f      	subs	r7, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	dd07      	ble.n	80043c2 <cbvprintf+0x532>
					OUTC(pad);
 80043b2:	4629      	mov	r1, r5
 80043b4:	4658      	mov	r0, fp
 80043b6:	47b0      	blx	r6
 80043b8:	2800      	cmp	r0, #0
 80043ba:	db4c      	blt.n	8004456 <cbvprintf+0x5c6>
 80043bc:	3401      	adds	r4, #1
				while (width-- > 0) {
 80043be:	463b      	mov	r3, r7
 80043c0:	e7f4      	b.n	80043ac <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80043c2:	f1b8 0f00 	cmp.w	r8, #0
 80043c6:	d005      	beq.n	80043d4 <cbvprintf+0x544>
			OUTC(sign);
 80043c8:	4629      	mov	r1, r5
 80043ca:	4640      	mov	r0, r8
 80043cc:	47b0      	blx	r6
 80043ce:	2800      	cmp	r0, #0
 80043d0:	db41      	blt.n	8004456 <cbvprintf+0x5c6>
 80043d2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 80043d4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80043d8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80043dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d005      	beq.n	80043f0 <cbvprintf+0x560>
				OUTC('0');
 80043e4:	4629      	mov	r1, r5
 80043e6:	2030      	movs	r0, #48	; 0x30
 80043e8:	47b0      	blx	r6
 80043ea:	2800      	cmp	r0, #0
 80043ec:	db33      	blt.n	8004456 <cbvprintf+0x5c6>
 80043ee:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 80043f0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80043f4:	f013 0f10 	tst.w	r3, #16
 80043f8:	d006      	beq.n	8004408 <cbvprintf+0x578>
				OUTC(conv->specifier);
 80043fa:	4629      	mov	r1, r5
 80043fc:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8004400:	47b0      	blx	r6
 8004402:	2800      	cmp	r0, #0
 8004404:	db27      	blt.n	8004456 <cbvprintf+0x5c6>
 8004406:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8004408:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 800440a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800440e:	2b00      	cmp	r3, #0
 8004410:	dd07      	ble.n	8004422 <cbvprintf+0x592>
				OUTC('0');
 8004412:	4629      	mov	r1, r5
 8004414:	2030      	movs	r0, #48	; 0x30
 8004416:	47b0      	blx	r6
 8004418:	2800      	cmp	r0, #0
 800441a:	db1c      	blt.n	8004456 <cbvprintf+0x5c6>
 800441c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 800441e:	4643      	mov	r3, r8
 8004420:	e7f3      	b.n	800440a <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8004422:	4653      	mov	r3, sl
 8004424:	464a      	mov	r2, r9
 8004426:	4629      	mov	r1, r5
 8004428:	4630      	mov	r0, r6
 800442a:	f009 fd05 	bl	800de38 <outs>
 800442e:	2800      	cmp	r0, #0
 8004430:	db11      	blt.n	8004456 <cbvprintf+0x5c6>
 8004432:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8004434:	2f00      	cmp	r7, #0
 8004436:	dd07      	ble.n	8004448 <cbvprintf+0x5b8>
			OUTC(' ');
 8004438:	4629      	mov	r1, r5
 800443a:	2020      	movs	r0, #32
 800443c:	47b0      	blx	r6
 800443e:	2800      	cmp	r0, #0
 8004440:	db09      	blt.n	8004456 <cbvprintf+0x5c6>
 8004442:	3401      	adds	r4, #1
			--width;
 8004444:	3f01      	subs	r7, #1
 8004446:	e7f5      	b.n	8004434 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8004448:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800444c:	e528      	b.n	8003ea0 <cbvprintf+0x10>
 800444e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004452:	e525      	b.n	8003ea0 <cbvprintf+0x10>
		}
	}

	return count;
 8004454:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8004456:	b011      	add	sp, #68	; 0x44
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	080110f1 	.word	0x080110f1

08004460 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8004460:	f04f 0210 	mov.w	r2, #16
 8004464:	f3ef 8311 	mrs	r3, BASEPRI
 8004468:	f382 8812 	msr	BASEPRI_MAX, r2
 800446c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <stm32l4_init+0x24>)
 800447a:	4a03      	ldr	r2, [pc, #12]	; (8004488 <stm32l4_init+0x28>)
 800447c:	601a      	str	r2, [r3, #0]

	return 0;
}
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	200000c0 	.word	0x200000c0
 8004488:	003d0900 	.word	0x003d0900

0800448c <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 800448c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <thread_set+0x1c>)
 8004490:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8004492:	b118      	cbz	r0, 800449c <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <thread_set+0x20>)
 8004496:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8004498:	2b09      	cmp	r3, #9
 800449a:	dc00      	bgt.n	800449e <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 800449c:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 800449e:	4804      	ldr	r0, [pc, #16]	; (80044b0 <thread_set+0x24>)
 80044a0:	f006 fcb6 	bl	800ae10 <z_impl_k_sem_give>
}
 80044a4:	e7fa      	b.n	800449c <thread_set+0x10>
 80044a6:	bf00      	nop
 80044a8:	20000e58 	.word	0x20000e58
 80044ac:	20000e0c 	.word	0x20000e0c
 80044b0:	200004a4 	.word	0x200004a4

080044b4 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 80044b4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 80044b6:	4802      	ldr	r0, [pc, #8]	; (80044c0 <log_process_thread_timer_expiry_fn+0xc>)
 80044b8:	f006 fcaa 	bl	800ae10 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 80044bc:	bd08      	pop	{r3, pc}
 80044be:	bf00      	nop
 80044c0:	200004a4 	.word	0x200004a4

080044c4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 80044c8:	2200      	movs	r2, #0
 80044ca:	490f      	ldr	r1, [pc, #60]	; (8004508 <enable_logger+0x44>)
 80044cc:	480f      	ldr	r0, [pc, #60]	; (800450c <enable_logger+0x48>)
 80044ce:	f00b fd0d 	bl	800feec <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80044d2:	4d0f      	ldr	r5, [pc, #60]	; (8004510 <enable_logger+0x4c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044dc:	2400      	movs	r4, #0
 80044de:	9404      	str	r4, [sp, #16]
 80044e0:	230e      	movs	r3, #14
 80044e2:	9303      	str	r3, [sp, #12]
 80044e4:	9402      	str	r4, [sp, #8]
 80044e6:	9401      	str	r4, [sp, #4]
 80044e8:	9400      	str	r4, [sp, #0]
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <enable_logger+0x50>)
 80044ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80044f0:	4909      	ldr	r1, [pc, #36]	; (8004518 <enable_logger+0x54>)
 80044f2:	4628      	mov	r0, r5
 80044f4:	f00b f9ea 	bl	800f8cc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80044f8:	4908      	ldr	r1, [pc, #32]	; (800451c <enable_logger+0x58>)
 80044fa:	4628      	mov	r0, r5
 80044fc:	f00b f9d2 	bl	800f8a4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8004500:	4620      	mov	r0, r4
 8004502:	b009      	add	sp, #36	; 0x24
 8004504:	bd30      	pop	{r4, r5, pc}
 8004506:	bf00      	nop
 8004508:	080044b5 	.word	0x080044b5
 800450c:	20000a08 	.word	0x20000a08
 8004510:	20000a40 	.word	0x20000a40
 8004514:	080048b9 	.word	0x080048b9
 8004518:	20001c00 	.word	0x20001c00
 800451c:	080110f8 	.word	0x080110f8

08004520 <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004520:	4b18      	ldr	r3, [pc, #96]	; (8004584 <log_init+0x64>)
 8004522:	f3bf 8f5b 	dmb	ish
 8004526:	e853 2f00 	ldrex	r2, [r3]
 800452a:	1c51      	adds	r1, r2, #1
 800452c:	e843 1000 	strex	r0, r1, [r3]
 8004530:	2800      	cmp	r0, #0
 8004532:	d1f8      	bne.n	8004526 <log_init+0x6>
 8004534:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8004538:	bb1a      	cbnz	r2, 8004582 <log_init+0x62>
{
 800453a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 800453c:	2400      	movs	r4, #0
 800453e:	e009      	b.n	8004554 <log_init+0x34>
					   backend->cb->ctx,
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <log_init+0x68>)
 8004542:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8004546:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8004548:	2204      	movs	r2, #4
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f9d9 	bl	8004904 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8004552:	3401      	adds	r4, #1
 8004554:	4b0d      	ldr	r3, [pc, #52]	; (800458c <log_init+0x6c>)
 8004556:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <log_init+0x68>)
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800455e:	da0f      	bge.n	8004580 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 8004560:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 8004562:	4d09      	ldr	r5, [pc, #36]	; (8004588 <log_init+0x68>)
 8004564:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8004568:	7b2b      	ldrb	r3, [r5, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f1      	beq.n	8004552 <log_init+0x32>
			if (backend->api->init != NULL) {
 800456e:	0123      	lsls	r3, r4, #4
 8004570:	4a05      	ldr	r2, [pc, #20]	; (8004588 <log_init+0x68>)
 8004572:	58d3      	ldr	r3, [r2, r3]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0e2      	beq.n	8004540 <log_init+0x20>
				backend->api->init(backend);
 800457a:	4628      	mov	r0, r5
 800457c:	4798      	blx	r3
 800457e:	e7df      	b.n	8004540 <log_init+0x20>
}
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	4770      	bx	lr
 8004584:	20000e14 	.word	0x20000e14
 8004588:	08010bd8 	.word	0x08010bd8
 800458c:	08010be8 	.word	0x08010be8

08004590 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 8004590:	b138      	cbz	r0, 80045a2 <log_set_timestamp_func+0x12>
{
 8004592:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <log_set_timestamp_func+0x18>)
 8004596:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8004598:	4608      	mov	r0, r1
 800459a:	f000 fba3 	bl	8004ce4 <log_output_timestamp_freq_set>
	return 0;
 800459e:	2000      	movs	r0, #0
}
 80045a0:	bd08      	pop	{r3, pc}
		return -EINVAL;
 80045a2:	f06f 0015 	mvn.w	r0, #21
}
 80045a6:	4770      	bx	lr
 80045a8:	20000008 	.word	0x20000008

080045ac <z_log_notify_backend_enabled>:
{
 80045ac:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <z_log_notify_backend_enabled+0x18>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	b11b      	cbz	r3, 80045bc <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <z_log_notify_backend_enabled+0x18>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	701a      	strb	r2, [r3, #0]
}
 80045ba:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <z_log_notify_backend_enabled+0x1c>)
 80045be:	f006 fc27 	bl	800ae10 <z_impl_k_sem_give>
}
 80045c2:	e7f7      	b.n	80045b4 <z_log_notify_backend_enabled+0x8>
 80045c4:	200013a8 	.word	0x200013a8
 80045c8:	200004a4 	.word	0x200004a4

080045cc <z_log_dropped>:
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <z_log_dropped+0x38>)
 80045ce:	f3bf 8f5b 	dmb	ish
 80045d2:	e853 2f00 	ldrex	r2, [r3]
 80045d6:	3201      	adds	r2, #1
 80045d8:	e843 2100 	strex	r1, r2, [r3]
 80045dc:	2900      	cmp	r1, #0
 80045de:	d1f8      	bne.n	80045d2 <z_log_dropped+0x6>
 80045e0:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 80045e4:	b900      	cbnz	r0, 80045e8 <z_log_dropped+0x1c>
}
 80045e6:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <z_log_dropped+0x3c>)
 80045ea:	f3bf 8f5b 	dmb	ish
 80045ee:	e853 2f00 	ldrex	r2, [r3]
 80045f2:	3a01      	subs	r2, #1
 80045f4:	e843 2100 	strex	r1, r2, [r3]
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d1f8      	bne.n	80045ee <z_log_dropped+0x22>
 80045fc:	f3bf 8f5b 	dmb	ish
 8004600:	e7f1      	b.n	80045e6 <z_log_dropped+0x1a>
 8004602:	bf00      	nop
 8004604:	20000e10 	.word	0x20000e10
 8004608:	20000e0c 	.word	0x20000e0c

0800460c <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <z_log_dropped_read_and_clear+0x1c>)
}
 800460e:	2000      	movs	r0, #0
 8004610:	4602      	mov	r2, r0
 8004612:	f3bf 8f5b 	dmb	ish
 8004616:	e853 0f00 	ldrex	r0, [r3]
 800461a:	e843 2100 	strex	r1, r2, [r3]
 800461e:	2900      	cmp	r1, #0
 8004620:	d1f9      	bne.n	8004616 <z_log_dropped_read_and_clear+0xa>
 8004622:	f3bf 8f5b 	dmb	ish
 8004626:	4770      	bx	lr
 8004628:	20000e10 	.word	0x20000e10

0800462c <dropped_notify>:
{
 800462c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 800462e:	f7ff ffed 	bl	800460c <z_log_dropped_read_and_clear>
 8004632:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004634:	2400      	movs	r4, #0
 8004636:	e000      	b.n	800463a <dropped_notify+0xe>
 8004638:	3401      	adds	r4, #1
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <dropped_notify+0x3c>)
 800463c:	4a0b      	ldr	r2, [pc, #44]	; (800466c <dropped_notify+0x40>)
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004644:	da0f      	bge.n	8004666 <dropped_notify+0x3a>
 8004646:	4809      	ldr	r0, [pc, #36]	; (800466c <dropped_notify+0x40>)
 8004648:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 800464c:	6843      	ldr	r3, [r0, #4]
 800464e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f1      	beq.n	8004638 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8004654:	0123      	lsls	r3, r4, #4
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <dropped_notify+0x40>)
 8004658:	58d3      	ldr	r3, [r2, r3]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0eb      	beq.n	8004638 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8004660:	4629      	mov	r1, r5
 8004662:	4798      	blx	r3
 8004664:	e7e8      	b.n	8004638 <dropped_notify+0xc>
}
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	08010be8 	.word	0x08010be8
 800466c:	08010bd8 	.word	0x08010bd8

08004670 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <z_log_dropped_pending+0x10>)
 8004672:	6818      	ldr	r0, [r3, #0]
}
 8004674:	2800      	cmp	r0, #0
 8004676:	bfd4      	ite	le
 8004678:	2000      	movle	r0, #0
 800467a:	2001      	movgt	r0, #1
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000e10 	.word	0x20000e10

08004684 <z_log_msg2_init>:
{
 8004684:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8004686:	4902      	ldr	r1, [pc, #8]	; (8004690 <z_log_msg2_init+0xc>)
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <z_log_msg2_init+0x10>)
 800468a:	f009 fca1 	bl	800dfd0 <mpsc_pbuf_init>
}
 800468e:	bd08      	pop	{r3, pc}
 8004690:	08011104 	.word	0x08011104
 8004694:	20000e18 	.word	0x20000e18

08004698 <log_core_init>:
{
 8004698:	b508      	push	{r3, lr}
	panic_mode = false;
 800469a:	2300      	movs	r3, #0
 800469c:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <log_core_init+0x1c>)
 800469e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80046a0:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <log_core_init+0x20>)
 80046a2:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 80046a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046a8:	4804      	ldr	r0, [pc, #16]	; (80046bc <log_core_init+0x24>)
 80046aa:	f7ff ff71 	bl	8004590 <log_set_timestamp_func>
		z_log_msg2_init();
 80046ae:	f7ff ffe9 	bl	8004684 <z_log_msg2_init>
}
 80046b2:	bd08      	pop	{r3, pc}
 80046b4:	200013a9 	.word	0x200013a9
 80046b8:	20000e10 	.word	0x20000e10
 80046bc:	0800e339 	.word	0x0800e339

080046c0 <z_log_msg2_alloc>:
{
 80046c0:	b508      	push	{r3, lr}
 80046c2:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 80046c4:	2200      	movs	r2, #0
 80046c6:	2300      	movs	r3, #0
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <z_log_msg2_alloc+0x10>)
 80046ca:	f009 fca6 	bl	800e01a <mpsc_pbuf_alloc>
}
 80046ce:	bd08      	pop	{r3, pc}
 80046d0:	20000e18 	.word	0x20000e18

080046d4 <z_log_msg2_claim>:
{
 80046d4:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 80046d6:	4802      	ldr	r0, [pc, #8]	; (80046e0 <z_log_msg2_claim+0xc>)
 80046d8:	f009 fd5c 	bl	800e194 <mpsc_pbuf_claim>
}
 80046dc:	bd08      	pop	{r3, pc}
 80046de:	bf00      	nop
 80046e0:	20000e18 	.word	0x20000e18

080046e4 <z_log_msg2_free>:
{
 80046e4:	b508      	push	{r3, lr}
 80046e6:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <z_log_msg2_free+0xc>)
 80046ea:	f009 fdc4 	bl	800e276 <mpsc_pbuf_free>
}
 80046ee:	bd08      	pop	{r3, pc}
 80046f0:	20000e18 	.word	0x20000e18

080046f4 <msg_process>:
{
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	4606      	mov	r6, r0
	if (!bypass) {
 80046f8:	b9e9      	cbnz	r1, 8004736 <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 80046fa:	2400      	movs	r4, #0
 80046fc:	e000      	b.n	8004700 <msg_process+0xc>
 80046fe:	3401      	adds	r4, #1
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <msg_process+0x4c>)
 8004702:	4a10      	ldr	r2, [pc, #64]	; (8004744 <msg_process+0x50>)
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800470a:	da14      	bge.n	8004736 <msg_process+0x42>
	return &__log_backends_start[idx];
 800470c:	4d0d      	ldr	r5, [pc, #52]	; (8004744 <msg_process+0x50>)
 800470e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8004712:	686b      	ldr	r3, [r5, #4]
 8004714:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f1      	beq.n	80046fe <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	f009 fe09 	bl	800e334 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8004722:	2800      	cmp	r0, #0
 8004724:	d0eb      	beq.n	80046fe <msg_process+0xa>
	backend->api->process(backend, msg);
 8004726:	0127      	lsls	r7, r4, #4
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <msg_process+0x50>)
 800472a:	59db      	ldr	r3, [r3, r7]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	4798      	blx	r3
}
 8004734:	e7e3      	b.n	80046fe <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffd4 	bl	80046e4 <z_log_msg2_free>
}
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800473e:	bf00      	nop
 8004740:	08010be8 	.word	0x08010be8
 8004744:	08010bd8 	.word	0x08010bd8

08004748 <z_log_msg2_pending>:
{
 8004748:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 800474a:	4802      	ldr	r0, [pc, #8]	; (8004754 <z_log_msg2_pending+0xc>)
 800474c:	f009 fdd0 	bl	800e2f0 <mpsc_pbuf_is_pending>
}
 8004750:	bd08      	pop	{r3, pc}
 8004752:	bf00      	nop
 8004754:	20000e18 	.word	0x20000e18

08004758 <z_impl_log_process>:
{
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <z_impl_log_process+0x4c>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b903      	cbnz	r3, 8004764 <z_impl_log_process+0xc>
 8004762:	b1d0      	cbz	r0, 800479a <z_impl_log_process+0x42>
	msg = get_msg();
 8004764:	f009 fdf5 	bl	800e352 <get_msg>
	if (msg.msg) {
 8004768:	4603      	mov	r3, r0
 800476a:	b180      	cbz	r0, 800478e <z_impl_log_process+0x36>
		if (!bypass) {
 800476c:	b95c      	cbnz	r4, 8004786 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800476e:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <z_impl_log_process+0x50>)
 8004770:	f3bf 8f5b 	dmb	ish
 8004774:	e852 1f00 	ldrex	r1, [r2]
 8004778:	3901      	subs	r1, #1
 800477a:	e842 1000 	strex	r0, r1, [r2]
 800477e:	2800      	cmp	r0, #0
 8004780:	d1f8      	bne.n	8004774 <z_impl_log_process+0x1c>
 8004782:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8004786:	4621      	mov	r1, r4
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ffb3 	bl	80046f4 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 800478e:	b914      	cbnz	r4, 8004796 <z_impl_log_process+0x3e>
 8004790:	f7ff ff6e 	bl	8004670 <z_log_dropped_pending>
 8004794:	b910      	cbnz	r0, 800479c <z_impl_log_process+0x44>
	return next_pending();
 8004796:	f009 fde0 	bl	800e35a <next_pending>
}
 800479a:	bd10      	pop	{r4, pc}
		dropped_notify();
 800479c:	f7ff ff46 	bl	800462c <dropped_notify>
 80047a0:	e7f9      	b.n	8004796 <z_impl_log_process+0x3e>
 80047a2:	bf00      	nop
 80047a4:	200013a8 	.word	0x200013a8
 80047a8:	20000e0c 	.word	0x20000e0c

080047ac <z_log_msg_post_finalize>:
{
 80047ac:	b510      	push	{r4, lr}
 80047ae:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <z_log_msg_post_finalize+0x7c>)
 80047b2:	f3bf 8f5b 	dmb	ish
 80047b6:	e853 2f00 	ldrex	r2, [r3]
 80047ba:	1c51      	adds	r1, r2, #1
 80047bc:	e843 1000 	strex	r0, r1, [r3]
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1f8      	bne.n	80047b6 <z_log_msg_post_finalize+0xa>
 80047c4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <z_log_msg_post_finalize+0x80>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b93b      	cbnz	r3, 80047de <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <z_log_msg_post_finalize+0x84>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <z_log_msg_post_finalize+0x2a>
 80047d4:	b19a      	cbz	r2, 80047fe <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80047d6:	2a0a      	cmp	r2, #10
 80047d8:	d01c      	beq.n	8004814 <z_log_msg_post_finalize+0x68>
}
 80047da:	b002      	add	sp, #8
 80047dc:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 80047de:	f04f 0310 	mov.w	r3, #16
 80047e2:	f3ef 8411 	mrs	r4, BASEPRI
 80047e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80047ea:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7ff ffb2 	bl	8004758 <z_impl_log_process>
	__asm__ volatile(
 80047f4:	f384 8811 	msr	BASEPRI, r4
 80047f8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80047fc:	e7ed      	b.n	80047da <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 80047fe:	2200      	movs	r2, #0
 8004800:	2300      	movs	r3, #0
 8004802:	e9cd 2300 	strd	r2, r3, [sp]
 8004806:	f242 7210 	movw	r2, #10000	; 0x2710
 800480a:	2300      	movs	r3, #0
 800480c:	4809      	ldr	r0, [pc, #36]	; (8004834 <z_log_msg_post_finalize+0x88>)
 800480e:	f007 fa7d 	bl	800bd0c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 8004812:	e7e2      	b.n	80047da <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0e0      	beq.n	80047da <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 8004818:	4806      	ldr	r0, [pc, #24]	; (8004834 <z_log_msg_post_finalize+0x88>)
 800481a:	f00b fb73 	bl	800ff04 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 800481e:	4806      	ldr	r0, [pc, #24]	; (8004838 <z_log_msg_post_finalize+0x8c>)
 8004820:	f006 faf6 	bl	800ae10 <z_impl_k_sem_give>
}
 8004824:	e7d9      	b.n	80047da <z_log_msg_post_finalize+0x2e>
 8004826:	bf00      	nop
 8004828:	20000e0c 	.word	0x20000e0c
 800482c:	200013a9 	.word	0x200013a9
 8004830:	20000e58 	.word	0x20000e58
 8004834:	20000a08 	.word	0x20000a08
 8004838:	200004a4 	.word	0x200004a4

0800483c <z_log_msg2_commit>:
{
 800483c:	b510      	push	{r4, lr}
 800483e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <z_log_msg2_commit+0x1c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4798      	blx	r3
 8004846:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004848:	4621      	mov	r1, r4
 800484a:	4804      	ldr	r0, [pc, #16]	; (800485c <z_log_msg2_commit+0x20>)
 800484c:	f009 fc7c 	bl	800e148 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 8004850:	f7ff ffac 	bl	80047ac <z_log_msg_post_finalize>
}
 8004854:	bd10      	pop	{r4, pc}
 8004856:	bf00      	nop
 8004858:	20000008 	.word	0x20000008
 800485c:	20000e18 	.word	0x20000e18

08004860 <z_impl_log_panic>:
	if (panic_mode) {
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <z_impl_log_panic+0x4c>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b103      	cbz	r3, 8004868 <z_impl_log_panic+0x8>
 8004866:	4770      	bx	lr
{
 8004868:	b510      	push	{r4, lr}
	log_init();
 800486a:	f7ff fe59 	bl	8004520 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800486e:	2400      	movs	r4, #0
 8004870:	e000      	b.n	8004874 <z_impl_log_panic+0x14>
 8004872:	3401      	adds	r4, #1
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <z_impl_log_panic+0x50>)
 8004876:	4a0f      	ldr	r2, [pc, #60]	; (80048b4 <z_impl_log_panic+0x54>)
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800487e:	da0c      	bge.n	800489a <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8004880:	480c      	ldr	r0, [pc, #48]	; (80048b4 <z_impl_log_panic+0x54>)
 8004882:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8004886:	6843      	ldr	r3, [r0, #4]
 8004888:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f1      	beq.n	8004872 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 800488e:	0123      	lsls	r3, r4, #4
 8004890:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <z_impl_log_panic+0x54>)
 8004892:	58d3      	ldr	r3, [r2, r3]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4798      	blx	r3
}
 8004898:	e7eb      	b.n	8004872 <z_impl_log_panic+0x12>
 800489a:	2000      	movs	r0, #0
 800489c:	f7ff ff5c 	bl	8004758 <z_impl_log_process>
		while (log_process(false) == true) {
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1fa      	bne.n	800489a <z_impl_log_panic+0x3a>
	panic_mode = true;
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <z_impl_log_panic+0x4c>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
}
 80048aa:	bd10      	pop	{r4, pc}
 80048ac:	200013a9 	.word	0x200013a9
 80048b0:	08010be8 	.word	0x08010be8
 80048b4:	08010bd8 	.word	0x08010bd8

080048b8 <log_process_thread_func>:
{
 80048b8:	b508      	push	{r3, lr}
	log_init();
 80048ba:	f7ff fe31 	bl	8004520 <log_init>
	return z_impl_z_current_get();
 80048be:	f006 ffff 	bl	800b8c0 <z_impl_z_current_get>
	thread_set(k_current_get());
 80048c2:	f7ff fde3 	bl	800448c <thread_set>
 80048c6:	2000      	movs	r0, #0
 80048c8:	f7ff ff46 	bl	8004758 <z_impl_log_process>
		if (log_process(false) == false) {
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d1fa      	bne.n	80048c6 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <log_process_thread_func+0x28>)
 80048da:	f006 fac1 	bl	800ae60 <z_impl_k_sem_take>
 80048de:	e7f2      	b.n	80048c6 <log_process_thread_func+0xe>
 80048e0:	200004a4 	.word	0x200004a4

080048e4 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <log_source_name_get+0x18>)
 80048e6:	4a06      	ldr	r2, [pc, #24]	; (8004900 <log_source_name_get+0x1c>)
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 80048ee:	d202      	bcs.n	80048f6 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 80048f0:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80048f4:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80048f6:	2000      	movs	r0, #0
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	08010bd8 	.word	0x08010bd8
 8004900:	08010b68 	.word	0x08010b68

08004904 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8004904:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <log_backend_enable+0x20>)
 8004908:	1ac3      	subs	r3, r0, r3
 800490a:	111b      	asrs	r3, r3, #4
 800490c:	3301      	adds	r3, #1
	backend->cb->id = id;
 800490e:	6842      	ldr	r2, [r0, #4]
 8004910:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8004912:	6843      	ldr	r3, [r0, #4]
 8004914:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8004916:	6843      	ldr	r3, [r0, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 800491c:	f7ff fe46 	bl	80045ac <z_log_notify_backend_enabled>
}
 8004920:	bd08      	pop	{r3, pc}
 8004922:	bf00      	nop
 8004924:	08010bd8 	.word	0x08010bd8

08004928 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8004928:	b40e      	push	{r1, r2, r3}
 800492a:	b500      	push	{lr}
 800492c:	b082      	sub	sp, #8
 800492e:	4601      	mov	r1, r0
 8004930:	ab03      	add	r3, sp, #12
 8004932:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8004936:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8004938:	4803      	ldr	r0, [pc, #12]	; (8004948 <print_formatted+0x20>)
 800493a:	f7ff faa9 	bl	8003e90 <cbvprintf>
	va_end(args);

	return length;
}
 800493e:	b002      	add	sp, #8
 8004940:	f85d eb04 	ldr.w	lr, [sp], #4
 8004944:	b003      	add	sp, #12
 8004946:	4770      	bx	lr
 8004948:	0800e401 	.word	0x0800e401

0800494c <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 800494c:	b530      	push	{r4, r5, lr}
 800494e:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8004950:	f011 0f44 	tst.w	r1, #68	; 0x44
 8004954:	d005      	beq.n	8004962 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <timestamp_print+0x74>)
 8004958:	681c      	ldr	r4, [r3, #0]
 800495a:	b934      	cbnz	r4, 800496a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 800495c:	2000      	movs	r0, #0
	}

	return length;
}
 800495e:	b005      	add	sp, #20
 8004960:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8004962:	4918      	ldr	r1, [pc, #96]	; (80049c4 <timestamp_print+0x78>)
 8004964:	f7ff ffe0 	bl	8004928 <print_formatted>
 8004968:	e7f9      	b.n	800495e <timestamp_print+0x12>
		timestamp /= timestamp_div;
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <timestamp_print+0x7c>)
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8004972:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8004976:	4a15      	ldr	r2, [pc, #84]	; (80049cc <timestamp_print+0x80>)
 8004978:	fba2 320c 	umull	r3, r2, r2, ip
 800497c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 800497e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8004982:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <timestamp_print+0x84>)
 8004988:	fba3 530e 	umull	r5, r3, r3, lr
 800498c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 800498e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 8004992:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8004996:	fb0c f101 	mul.w	r1, ip, r1
 800499a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800499e:	fb05 1114 	mls	r1, r5, r4, r1
 80049a2:	fb0c f101 	mul.w	r1, ip, r1
 80049a6:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 80049aa:	9102      	str	r1, [sp, #8]
 80049ac:	9501      	str	r5, [sp, #4]
 80049ae:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80049b2:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 80049b6:	9100      	str	r1, [sp, #0]
 80049b8:	4906      	ldr	r1, [pc, #24]	; (80049d4 <timestamp_print+0x88>)
 80049ba:	f7ff ffb5 	bl	8004928 <print_formatted>
 80049be:	e7ce      	b.n	800495e <timestamp_print+0x12>
 80049c0:	20000e5c 	.word	0x20000e5c
 80049c4:	08011118 	.word	0x08011118
 80049c8:	20000e60 	.word	0x20000e60
 80049cc:	91a2b3c5 	.word	0x91a2b3c5
 80049d0:	88888889 	.word	0x88888889
 80049d4:	08011124 	.word	0x08011124

080049d8 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 80049d8:	b161      	cbz	r1, 80049f4 <color_print+0x1c>
{
 80049da:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80049dc:	b12a      	cbz	r2, 80049ea <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 80049de:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <color_print+0x20>)
 80049e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049e4:	b912      	cbnz	r2, 80049ec <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80049e6:	4a05      	ldr	r2, [pc, #20]	; (80049fc <color_print+0x24>)
 80049e8:	e000      	b.n	80049ec <color_print+0x14>
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <color_print+0x28>)
 80049ee:	f7ff ff9b 	bl	8004928 <print_formatted>
	}
}
 80049f2:	bd08      	pop	{r3, pc}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	0801119c 	.word	0x0801119c
 80049fc:	08011140 	.word	0x08011140
 8004a00:	08011148 	.word	0x08011148

08004a04 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8004a04:	f011 0f10 	tst.w	r1, #16
 8004a08:	d10b      	bne.n	8004a22 <newline_print+0x1e>
{
 8004a0a:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004a0c:	f011 0f20 	tst.w	r1, #32
 8004a10:	d003      	beq.n	8004a1a <newline_print+0x16>
		print_formatted(ctx, "\n");
 8004a12:	4904      	ldr	r1, [pc, #16]	; (8004a24 <newline_print+0x20>)
 8004a14:	f7ff ff88 	bl	8004928 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8004a18:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8004a1a:	4903      	ldr	r1, [pc, #12]	; (8004a28 <newline_print+0x24>)
 8004a1c:	f7ff ff84 	bl	8004928 <print_formatted>
 8004a20:	e7fa      	b.n	8004a18 <newline_print+0x14>
 8004a22:	4770      	bx	lr
 8004a24:	080116a4 	.word	0x080116a4
 8004a28:	0801114c 	.word	0x0801114c

08004a2c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8004a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a30:	4605      	mov	r5, r0
 8004a32:	460f      	mov	r7, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	4698      	mov	r8, r3
	newline_print(output, flags);
 8004a38:	9906      	ldr	r1, [sp, #24]
 8004a3a:	f7ff ffe3 	bl	8004a04 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8004a3e:	2400      	movs	r4, #0
 8004a40:	4544      	cmp	r4, r8
 8004a42:	da05      	bge.n	8004a50 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8004a44:	4924      	ldr	r1, [pc, #144]	; (8004ad8 <hexdump_line_print+0xac>)
 8004a46:	4628      	mov	r0, r5
 8004a48:	f7ff ff6e 	bl	8004928 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	e7f7      	b.n	8004a40 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004a50:	2400      	movs	r4, #0
 8004a52:	e009      	b.n	8004a68 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8004a54:	4920      	ldr	r1, [pc, #128]	; (8004ad8 <hexdump_line_print+0xac>)
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7ff ff66 	bl	8004928 <print_formatted>
 8004a5c:	e00b      	b.n	8004a76 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8004a5e:	491f      	ldr	r1, [pc, #124]	; (8004adc <hexdump_line_print+0xb0>)
 8004a60:	4628      	mov	r0, r5
 8004a62:	f7ff ff61 	bl	8004928 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004a66:	3401      	adds	r4, #1
 8004a68:	2c0f      	cmp	r4, #15
 8004a6a:	dc0c      	bgt.n	8004a86 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	dd02      	ble.n	8004a76 <hexdump_line_print+0x4a>
 8004a70:	f014 0f07 	tst.w	r4, #7
 8004a74:	d0ee      	beq.n	8004a54 <hexdump_line_print+0x28>
		if (i < length) {
 8004a76:	42b4      	cmp	r4, r6
 8004a78:	d2f1      	bcs.n	8004a5e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8004a7a:	5d3a      	ldrb	r2, [r7, r4]
 8004a7c:	4918      	ldr	r1, [pc, #96]	; (8004ae0 <hexdump_line_print+0xb4>)
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f7ff ff52 	bl	8004928 <print_formatted>
 8004a84:	e7ef      	b.n	8004a66 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8004a86:	4917      	ldr	r1, [pc, #92]	; (8004ae4 <hexdump_line_print+0xb8>)
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7ff ff4d 	bl	8004928 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004a8e:	2400      	movs	r4, #0
 8004a90:	e009      	b.n	8004aa6 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8004a92:	4911      	ldr	r1, [pc, #68]	; (8004ad8 <hexdump_line_print+0xac>)
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7ff ff47 	bl	8004928 <print_formatted>
 8004a9a:	e00b      	b.n	8004ab4 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8004a9c:	4912      	ldr	r1, [pc, #72]	; (8004ae8 <hexdump_line_print+0xbc>)
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7ff ff42 	bl	8004928 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004aa4:	3401      	adds	r4, #1
 8004aa6:	2c0f      	cmp	r4, #15
 8004aa8:	dc13      	bgt.n	8004ad2 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8004aaa:	2c00      	cmp	r4, #0
 8004aac:	dd02      	ble.n	8004ab4 <hexdump_line_print+0x88>
 8004aae:	f014 0f07 	tst.w	r4, #7
 8004ab2:	d0ee      	beq.n	8004a92 <hexdump_line_print+0x66>
		if (i < length) {
 8004ab4:	42b4      	cmp	r4, r6
 8004ab6:	d207      	bcs.n	8004ac8 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8004ab8:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8004aba:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <hexdump_line_print+0xc0>)
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8004abe:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004ac2:	d1eb      	bne.n	8004a9c <hexdump_line_print+0x70>
 8004ac4:	222e      	movs	r2, #46	; 0x2e
 8004ac6:	e7e9      	b.n	8004a9c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8004ac8:	4903      	ldr	r1, [pc, #12]	; (8004ad8 <hexdump_line_print+0xac>)
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7ff ff2c 	bl	8004928 <print_formatted>
 8004ad0:	e7e8      	b.n	8004aa4 <hexdump_line_print+0x78>
		}
	}
}
 8004ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad6:	bf00      	nop
 8004ad8:	08011174 	.word	0x08011174
 8004adc:	08011158 	.word	0x08011158
 8004ae0:	08011150 	.word	0x08011150
 8004ae4:	0801115c 	.word	0x0801115c
 8004ae8:	08011160 	.word	0x08011160
 8004aec:	08012205 	.word	0x08012205

08004af0 <ids_print>:
{
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4680      	mov	r8, r0
 8004af6:	4616      	mov	r6, r2
 8004af8:	461d      	mov	r5, r3
 8004afa:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8004afe:	b959      	cbnz	r1, 8004b18 <ids_print+0x28>
	int total = 0;
 8004b00:	2400      	movs	r4, #0
	if (source_id >= 0) {
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	db1c      	blt.n	8004b40 <ids_print+0x50>
		total += print_formatted(output,
 8004b06:	b186      	cbz	r6, 8004b2a <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8004b08:	2301      	movs	r3, #1
 8004b0a:	9a07      	ldr	r2, [sp, #28]
 8004b0c:	4093      	lsls	r3, r2
				(func_on &&
 8004b0e:	f013 0f10 	tst.w	r3, #16
 8004b12:	d118      	bne.n	8004b46 <ids_print+0x56>
		total += print_formatted(output,
 8004b14:	4e0d      	ldr	r6, [pc, #52]	; (8004b4c <ids_print+0x5c>)
 8004b16:	e009      	b.n	8004b2c <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <ids_print+0x60>)
 8004b1a:	9a07      	ldr	r2, [sp, #28]
 8004b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b20:	490c      	ldr	r1, [pc, #48]	; (8004b54 <ids_print+0x64>)
 8004b22:	f7ff ff01 	bl	8004928 <print_formatted>
 8004b26:	4604      	mov	r4, r0
 8004b28:	e7eb      	b.n	8004b02 <ids_print+0x12>
		total += print_formatted(output,
 8004b2a:	4e08      	ldr	r6, [pc, #32]	; (8004b4c <ids_print+0x5c>)
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7ff fed8 	bl	80048e4 <log_source_name_get>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4631      	mov	r1, r6
 8004b38:	4640      	mov	r0, r8
 8004b3a:	f7ff fef5 	bl	8004928 <print_formatted>
 8004b3e:	4404      	add	r4, r0
}
 8004b40:	4620      	mov	r0, r4
 8004b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8004b46:	4e04      	ldr	r6, [pc, #16]	; (8004b58 <ids_print+0x68>)
 8004b48:	e7f0      	b.n	8004b2c <ids_print+0x3c>
 8004b4a:	bf00      	nop
 8004b4c:	08011164 	.word	0x08011164
 8004b50:	080111d8 	.word	0x080111d8
 8004b54:	08011170 	.word	0x08011170
 8004b58:	0801116c 	.word	0x0801116c

08004b5c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	b085      	sub	sp, #20
 8004b62:	4605      	mov	r5, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	4616      	mov	r6, r2
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8004b6e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8004b72:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8004b76:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 8004b7a:	f009 fbf2 	bl	800e362 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8004b7e:	b1e8      	cbz	r0, 8004bbc <prefix_print+0x60>
 8004b80:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 8004b82:	4913      	ldr	r1, [pc, #76]	; (8004bd0 <prefix_print+0x74>)
 8004b84:	4628      	mov	r0, r5
 8004b86:	f7ff fecf 	bl	8004928 <print_formatted>
 8004b8a:	4607      	mov	r7, r0
	}

	if (stamp) {
 8004b8c:	f1bb 0f00 	cmp.w	fp, #0
 8004b90:	d116      	bne.n	8004bc0 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 8004b92:	4642      	mov	r2, r8
 8004b94:	4651      	mov	r1, sl
 8004b96:	4628      	mov	r0, r5
 8004b98:	f009 fbf2 	bl	800e380 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 8004b9c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004ba0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004baa:	4632      	mov	r2, r6
 8004bac:	4649      	mov	r1, r9
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f7ff ff9e 	bl	8004af0 <ids_print>
			domain_id, source_id, level);


	return length;
}
 8004bb4:	4438      	add	r0, r7
 8004bb6:	b005      	add	sp, #20
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	e7e5      	b.n	8004b8c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 8004bc0:	9a03      	ldr	r2, [sp, #12]
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7ff fec1 	bl	800494c <timestamp_print>
 8004bca:	4407      	add	r7, r0
 8004bcc:	e7e1      	b.n	8004b92 <prefix_print+0x36>
 8004bce:	bf00      	nop
 8004bd0:	08011178 	.word	0x08011178

08004bd4 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8004bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 8004be0:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 8004be2:	880a      	ldrh	r2, [r1, #0]
 8004be4:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8004be8:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 8004bec:	d035      	beq.n	8004c5a <log_output_msg2_process+0x86>
	return msg->hdr.source;
 8004bee:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 8004bf0:	7809      	ldrb	r1, [r1, #0]
 8004bf2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8004bf6:	b36a      	cbz	r2, 8004c54 <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8004bf8:	4820      	ldr	r0, [pc, #128]	; (8004c7c <log_output_msg2_process+0xa8>)
 8004bfa:	1a12      	subs	r2, r2, r0
 8004bfc:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8004c00:	9202      	str	r2, [sp, #8]
 8004c02:	9101      	str	r1, [sp, #4]
 8004c04:	f8cd 8000 	str.w	r8, [sp]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f7ff ffa5 	bl	8004b5c <prefix_print>
 8004c12:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8004c14:	4625      	mov	r5, r4
 8004c16:	f855 3b0c 	ldr.w	r3, [r5], #12
 8004c1a:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 8004c1e:	b143      	cbz	r3, 8004c32 <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8004c20:	f1b8 0f00 	cmp.w	r8, #0
 8004c24:	d11c      	bne.n	8004c60 <log_output_msg2_process+0x8c>
 8004c26:	4816      	ldr	r0, [pc, #88]	; (8004c80 <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004c28:	462b      	mov	r3, r5
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	4915      	ldr	r1, [pc, #84]	; (8004c84 <log_output_msg2_process+0xb0>)
 8004c2e:	f009 f820 	bl	800dc72 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 8004c32:	8862      	ldrh	r2, [r4, #2]
 8004c34:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 8004c38:	6821      	ldr	r1, [r4, #0]
 8004c3a:	f3c1 2149 	ubfx	r1, r1, #9, #10
 8004c3e:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8004c40:	b982      	cbnz	r2, 8004c64 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8004c42:	f1b8 0f00 	cmp.w	r8, #0
 8004c46:	d113      	bne.n	8004c70 <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f009 fbcc 	bl	800e3e6 <log_output_flush>
}
 8004c4e:	b005      	add	sp, #20
 8004c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c58:	e7d2      	b.n	8004c00 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 8004c5a:	f04f 0900 	mov.w	r9, #0
 8004c5e:	e7d9      	b.n	8004c14 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <log_output_msg2_process+0xb4>)
 8004c62:	e7e1      	b.n	8004c28 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8004c64:	9700      	str	r7, [sp, #0]
 8004c66:	464b      	mov	r3, r9
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f009 fba1 	bl	800e3b0 <log_msg2_hexdump>
 8004c6e:	e7e8      	b.n	8004c42 <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 8004c70:	4642      	mov	r2, r8
 8004c72:	4639      	mov	r1, r7
 8004c74:	4630      	mov	r0, r6
 8004c76:	f009 fb8f 	bl	800e398 <postfix_print>
 8004c7a:	e7e5      	b.n	8004c48 <log_output_msg2_process+0x74>
 8004c7c:	08010b68 	.word	0x08010b68
 8004c80:	0800e439 	.word	0x0800e439
 8004c84:	08003e91 	.word	0x08003e91
 8004c88:	0800e401 	.word	0x0800e401

08004c8c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8004c92:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004c94:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	bf28      	it	cs
 8004c9c:	460b      	movcs	r3, r1
 8004c9e:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <log_output_dropped_process+0x4c>)
 8004ca0:	2105      	movs	r1, #5
 8004ca2:	4668      	mov	r0, sp
 8004ca4:	f009 f83a 	bl	800dd1c <snprintk>
 8004ca8:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8004caa:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	220b      	movs	r2, #11
 8004cb0:	490a      	ldr	r1, [pc, #40]	; (8004cdc <log_output_dropped_process+0x50>)
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f009 fb57 	bl	800e366 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8004cb8:	6863      	ldr	r3, [r4, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	4669      	mov	r1, sp
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f009 fb50 	bl	800e366 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8004cc6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	221b      	movs	r2, #27
 8004ccc:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <log_output_dropped_process+0x54>)
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f009 fb49 	bl	800e366 <buffer_write>
}
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	0801197c 	.word	0x0801197c
 8004cdc:	080111cc 	.word	0x080111cc
 8004ce0:	080111b0 	.word	0x080111b0

08004ce4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <log_output_timestamp_freq_set+0x20>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004cea:	e004      	b.n	8004cf6 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8004cec:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <log_output_timestamp_freq_set+0x20>)
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <log_output_timestamp_freq_set+0x24>)
 8004cf8:	4298      	cmp	r0, r3
 8004cfa:	d8f7      	bhi.n	8004cec <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <log_output_timestamp_freq_set+0x28>)
 8004cfe:	6018      	str	r0, [r3, #0]
}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000e60 	.word	0x20000e60
 8004d08:	000f4240 	.word	0x000f4240
 8004d0c:	20000e5c 	.word	0x20000e5c

08004d10 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4606      	mov	r6, r0
 8004d14:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 8004d16:	2400      	movs	r4, #0
 8004d18:	e006      	b.n	8004d28 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <char_out+0x20>)
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
 8004d20:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8004d26:	3401      	adds	r4, #1
 8004d28:	42ac      	cmp	r4, r5
 8004d2a:	d3f6      	bcc.n	8004d1a <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	20000e78 	.word	0x20000e78

08004d34 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <log_backend_uart_init+0x8>)
 8004d36:	4a02      	ldr	r2, [pc, #8]	; (8004d40 <log_backend_uart_init+0xc>)
 8004d38:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000e78 	.word	0x20000e78
 8004d40:	08010840 	.word	0x08010840

08004d44 <panic>:

static void panic(struct log_backend const *const backend)
{
 8004d44:	b508      	push	{r3, lr}
	in_panic = true;
 8004d46:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <panic+0x10>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8004d4c:	4802      	ldr	r0, [pc, #8]	; (8004d58 <panic+0x14>)
 8004d4e:	f009 fb4a 	bl	800e3e6 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8004d52:	bd08      	pop	{r3, pc}
 8004d54:	200013aa 	.word	0x200013aa
 8004d58:	08011228 	.word	0x08011228

08004d5c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8004d5c:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8004d5e:	4802      	ldr	r0, [pc, #8]	; (8004d68 <dropped+0xc>)
 8004d60:	f7ff ff94 	bl	8004c8c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8004d64:	bd08      	pop	{r3, pc}
 8004d66:	bf00      	nop
 8004d68:	08011228 	.word	0x08011228

08004d6c <process>:
{
 8004d6c:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 8004d6e:	220f      	movs	r2, #15
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <process+0xc>)
 8004d72:	f7ff ff2f 	bl	8004bd4 <log_output_msg2_process>
}
 8004d76:	bd08      	pop	{r3, pc}
 8004d78:	08011228 	.word	0x08011228

08004d7c <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8004d7c:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8004d7e:	4c04      	ldr	r4, [pc, #16]	; (8004d90 <__do_init_array_aux+0x14>)
 8004d80:	e002      	b.n	8004d88 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8004d82:	f854 3b04 	ldr.w	r3, [r4], #4
 8004d86:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8004d88:	4b02      	ldr	r3, [pc, #8]	; (8004d94 <__do_init_array_aux+0x18>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d3f9      	bcc.n	8004d82 <__do_init_array_aux+0x6>
	}
}
 8004d8e:	bd10      	pop	{r4, pc}
 8004d90:	08010b68 	.word	0x08010b68
 8004d94:	08010b68 	.word	0x08010b68

08004d98 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <__do_global_ctors_aux+0x1c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8004d9c:	b14b      	cbz	r3, 8004db2 <__do_global_ctors_aux+0x1a>
{
 8004d9e:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8004da0:	1e5c      	subs	r4, r3, #1
 8004da2:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <__do_global_ctors_aux+0x1c>)
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	4798      	blx	r3
 8004daa:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8004dac:	2c00      	cmp	r4, #0
 8004dae:	d1f7      	bne.n	8004da0 <__do_global_ctors_aux+0x8>
	}
}
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	4770      	bx	lr
 8004db4:	08010b60 	.word	0x08010b60

08004db8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004db8:	4901      	ldr	r1, [pc, #4]	; (8004dc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004dba:	2210      	movs	r2, #16
	str	r2, [r1]
 8004dbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004dbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004dc0:	e000ed10 	.word	0xe000ed10

08004dc4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8004dc4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8004dc6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004dc8:	f380 8811 	msr	BASEPRI, r0
	isb
 8004dcc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004dd0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004dd4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004dd6:	b662      	cpsie	i
	isb
 8004dd8:	f3bf 8f6f 	isb	sy

	bx	lr
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	b096      	sub	sp, #88	; 0x58
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004dea:	2301      	movs	r3, #1
 8004dec:	813b      	strh	r3, [r7, #8]
 8004dee:	466c      	mov	r4, sp
 8004df0:	b088      	sub	sp, #32
 8004df2:	466b      	mov	r3, sp
 8004df4:	f113 020c 	adds.w	r2, r3, #12
 8004df8:	f000 80ca 	beq.w	8004f90 <esf_dump+0x1b0>
 8004dfc:	2114      	movs	r1, #20
 8004dfe:	2001      	movs	r0, #1
 8004e00:	8138      	strh	r0, [r7, #8]
 8004e02:	b11a      	cbz	r2, 8004e0c <esf_dump+0x2c>
 8004e04:	2904      	cmp	r1, #4
 8004e06:	dd01      	ble.n	8004e0c <esf_dump+0x2c>
 8004e08:	4867      	ldr	r0, [pc, #412]	; (8004fa8 <esf_dump+0x1c8>)
 8004e0a:	6118      	str	r0, [r3, #16]
 8004e0c:	6828      	ldr	r0, [r5, #0]
 8004e0e:	b112      	cbz	r2, 8004e16 <esf_dump+0x36>
 8004e10:	2908      	cmp	r1, #8
 8004e12:	dd00      	ble.n	8004e16 <esf_dump+0x36>
 8004e14:	6158      	str	r0, [r3, #20]
 8004e16:	6868      	ldr	r0, [r5, #4]
 8004e18:	b112      	cbz	r2, 8004e20 <esf_dump+0x40>
 8004e1a:	290c      	cmp	r1, #12
 8004e1c:	dd00      	ble.n	8004e20 <esf_dump+0x40>
 8004e1e:	6198      	str	r0, [r3, #24]
 8004e20:	68a8      	ldr	r0, [r5, #8]
 8004e22:	b112      	cbz	r2, 8004e2a <esf_dump+0x4a>
 8004e24:	2910      	cmp	r1, #16
 8004e26:	dd00      	ble.n	8004e2a <esf_dump+0x4a>
 8004e28:	61d8      	str	r0, [r3, #28]
 8004e2a:	2913      	cmp	r1, #19
 8004e2c:	f340 80b3 	ble.w	8004f96 <esf_dump+0x1b6>
 8004e30:	2014      	movs	r0, #20
 8004e32:	b12a      	cbz	r2, 8004e40 <esf_dump+0x60>
 8004e34:	2100      	movs	r1, #0
 8004e36:	6079      	str	r1, [r7, #4]
 8004e38:	2105      	movs	r1, #5
 8004e3a:	7139      	strb	r1, [r7, #4]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	60d9      	str	r1, [r3, #12]
 8004e40:	2100      	movs	r1, #0
 8004e42:	f36f 0100 	bfc	r1, #0, #1
 8004e46:	f36f 0141 	bfc	r1, #1, #1
 8004e4a:	f36f 0182 	bfc	r1, #2, #1
 8004e4e:	f36f 01c5 	bfc	r1, #3, #3
 8004e52:	2601      	movs	r6, #1
 8004e54:	f366 1188 	bfi	r1, r6, #6, #3
 8004e58:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004e5c:	f363 2152 	bfi	r1, r3, #9, #10
 8004e60:	f36f 41de 	bfc	r1, #19, #12
 8004e64:	f36f 71df 	bfc	r1, #31, #1
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4850      	ldr	r0, [pc, #320]	; (8004fac <esf_dump+0x1cc>)
 8004e6c:	f009 fb0b 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8004e70:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004e72:	813e      	strh	r6, [r7, #8]
 8004e74:	466c      	mov	r4, sp
 8004e76:	b088      	sub	sp, #32
 8004e78:	466b      	mov	r3, sp
 8004e7a:	f113 020c 	adds.w	r2, r3, #12
 8004e7e:	f000 808d 	beq.w	8004f9c <esf_dump+0x1bc>
 8004e82:	2114      	movs	r1, #20
 8004e84:	2001      	movs	r0, #1
 8004e86:	8138      	strh	r0, [r7, #8]
 8004e88:	b11a      	cbz	r2, 8004e92 <esf_dump+0xb2>
 8004e8a:	2904      	cmp	r1, #4
 8004e8c:	dd01      	ble.n	8004e92 <esf_dump+0xb2>
 8004e8e:	4848      	ldr	r0, [pc, #288]	; (8004fb0 <esf_dump+0x1d0>)
 8004e90:	6118      	str	r0, [r3, #16]
 8004e92:	68e8      	ldr	r0, [r5, #12]
 8004e94:	b112      	cbz	r2, 8004e9c <esf_dump+0xbc>
 8004e96:	2908      	cmp	r1, #8
 8004e98:	dd00      	ble.n	8004e9c <esf_dump+0xbc>
 8004e9a:	6158      	str	r0, [r3, #20]
 8004e9c:	6928      	ldr	r0, [r5, #16]
 8004e9e:	b112      	cbz	r2, 8004ea6 <esf_dump+0xc6>
 8004ea0:	290c      	cmp	r1, #12
 8004ea2:	dd00      	ble.n	8004ea6 <esf_dump+0xc6>
 8004ea4:	6198      	str	r0, [r3, #24]
 8004ea6:	6968      	ldr	r0, [r5, #20]
 8004ea8:	b112      	cbz	r2, 8004eb0 <esf_dump+0xd0>
 8004eaa:	2910      	cmp	r1, #16
 8004eac:	dd00      	ble.n	8004eb0 <esf_dump+0xd0>
 8004eae:	61d8      	str	r0, [r3, #28]
 8004eb0:	2913      	cmp	r1, #19
 8004eb2:	dd76      	ble.n	8004fa2 <esf_dump+0x1c2>
 8004eb4:	2014      	movs	r0, #20
 8004eb6:	b12a      	cbz	r2, 8004ec4 <esf_dump+0xe4>
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6079      	str	r1, [r7, #4]
 8004ebc:	2105      	movs	r1, #5
 8004ebe:	7139      	strb	r1, [r7, #4]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	60d9      	str	r1, [r3, #12]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f36f 0100 	bfc	r1, #0, #1
 8004eca:	f36f 0141 	bfc	r1, #1, #1
 8004ece:	f36f 0182 	bfc	r1, #2, #1
 8004ed2:	f36f 01c5 	bfc	r1, #3, #3
 8004ed6:	2601      	movs	r6, #1
 8004ed8:	f366 1188 	bfi	r1, r6, #6, #3
 8004edc:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004ee0:	f363 2152 	bfi	r1, r3, #9, #10
 8004ee4:	f36f 41de 	bfc	r1, #19, #12
 8004ee8:	f36f 71df 	bfc	r1, #31, #1
 8004eec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004fac <esf_dump+0x1cc>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f009 fac7 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8004ef8:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004efa:	813e      	strh	r6, [r7, #8]
 8004efc:	69eb      	ldr	r3, [r5, #28]
 8004efe:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <esf_dump+0x1d4>)
 8004f00:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f04:	2400      	movs	r4, #0
 8004f06:	607c      	str	r4, [r7, #4]
 8004f08:	f04f 0a03 	mov.w	sl, #3
 8004f0c:	f887 a004 	strb.w	sl, [r7, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	4621      	mov	r1, r4
 8004f16:	f364 0100 	bfi	r1, r4, #0, #1
 8004f1a:	f364 0141 	bfi	r1, r4, #1, #1
 8004f1e:	f364 0182 	bfi	r1, r4, #2, #1
 8004f22:	f364 01c5 	bfi	r1, r4, #3, #3
 8004f26:	f366 1188 	bfi	r1, r6, #6, #3
 8004f2a:	f04f 090c 	mov.w	r9, #12
 8004f2e:	f369 2152 	bfi	r1, r9, #9, #10
 8004f32:	f364 41de 	bfi	r1, r4, #19, #12
 8004f36:	f364 71df 	bfi	r1, r4, #31, #1
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f40:	4640      	mov	r0, r8
 8004f42:	f009 faa0 	bl	800e486 <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004f46:	813e      	strh	r6, [r7, #8]
 8004f48:	69ab      	ldr	r3, [r5, #24]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <esf_dump+0x1d8>)
 8004f4c:	653a      	str	r2, [r7, #80]	; 0x50
 8004f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f50:	607c      	str	r4, [r7, #4]
 8004f52:	f887 a004 	strb.w	sl, [r7, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	f364 0100 	bfi	r1, r4, #0, #1
 8004f60:	f364 0141 	bfi	r1, r4, #1, #1
 8004f64:	f364 0182 	bfi	r1, r4, #2, #1
 8004f68:	f364 01c5 	bfi	r1, r4, #3, #3
 8004f6c:	f366 1188 	bfi	r1, r6, #6, #3
 8004f70:	f369 2152 	bfi	r1, r9, #9, #10
 8004f74:	f364 41de 	bfi	r1, r4, #19, #12
 8004f78:	f364 71df 	bfi	r1, r4, #31, #1
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004f82:	4640      	mov	r0, r8
 8004f84:	f009 fa7f 	bl	800e486 <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 8004f88:	3758      	adds	r7, #88	; 0x58
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f94:	e733      	b.n	8004dfe <esf_dump+0x1e>
 8004f96:	f06f 001b 	mvn.w	r0, #27
 8004f9a:	e74a      	b.n	8004e32 <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fa0:	e770      	b.n	8004e84 <esf_dump+0xa4>
 8004fa2:	f06f 001b 	mvn.w	r0, #27
 8004fa6:	e786      	b.n	8004eb6 <esf_dump+0xd6>
 8004fa8:	08011238 	.word	0x08011238
 8004fac:	08010b90 	.word	0x08010b90
 8004fb0:	08011268 	.word	0x08011268
 8004fb4:	08011298 	.word	0x08011298
 8004fb8:	080112a8 	.word	0x080112a8

08004fbc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8004fbc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	db07      	blt.n	8004fd2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fc2:	f000 021f 	and.w	r2, r0, #31
 8004fc6:	0940      	lsrs	r0, r0, #5
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4093      	lsls	r3, r2
 8004fcc:	4a01      	ldr	r2, [pc, #4]	; (8004fd4 <arch_irq_enable+0x18>)
 8004fce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004fd2:	4770      	bx	lr
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004fd8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004fda:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	db08      	blt.n	8004ff2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe0:	0109      	lsls	r1, r1, #4
 8004fe2:	b2c9      	uxtb	r1, r1
 8004fe4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004fe8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004fec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004ff0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	f000 000f 	and.w	r0, r0, #15
 8004ff6:	0109      	lsls	r1, r1, #4
 8004ff8:	b2c9      	uxtb	r1, r1
 8004ffa:	4b01      	ldr	r3, [pc, #4]	; (8005000 <z_arm_irq_priority_set+0x28>)
 8004ffc:	5419      	strb	r1, [r3, r0]
}
 8004ffe:	4770      	bx	lr
 8005000:	e000ed14 	.word	0xe000ed14

08005004 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8005004:	bf30      	wfi
    b z_SysNmiOnReset
 8005006:	f7ff bffd 	b.w	8005004 <z_SysNmiOnReset>
 800500a:	bf00      	nop

0800500c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800500c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800500e:	4b0f      	ldr	r3, [pc, #60]	; (800504c <z_arm_prep_c+0x40>)
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <z_arm_prep_c+0x44>)
 8005012:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005016:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800501c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8005020:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005024:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800502c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8005030:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8005034:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8005038:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800503c:	f005 fc7e 	bl	800a93c <z_bss_zero>
	z_data_copy();
 8005040:	f006 fc90 	bl	800b964 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8005044:	f000 feae 	bl	8005da4 <z_arm_interrupt_init>
	z_cstart();
 8005048:	f005 fc84 	bl	800a954 <z_cstart>
 800504c:	e000ed00 	.word	0xe000ed00
 8005050:	08000000 	.word	0x08000000

08005054 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <arch_swap+0x28>)
 8005056:	6893      	ldr	r3, [r2, #8]
 8005058:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 800505a:	4909      	ldr	r1, [pc, #36]	; (8005080 <arch_swap+0x2c>)
 800505c:	6809      	ldr	r1, [r1, #0]
 800505e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005060:	4908      	ldr	r1, [pc, #32]	; (8005084 <arch_swap+0x30>)
 8005062:	684b      	ldr	r3, [r1, #4]
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 800506a:	2300      	movs	r3, #0
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8005074:	6893      	ldr	r3, [r2, #8]
}
 8005076:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000134c 	.word	0x2000134c
 8005080:	08012054 	.word	0x08012054
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8005088:	4912      	ldr	r1, [pc, #72]	; (80050d4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800508a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800508c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8005090:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8005092:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8005096:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800509a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800509c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80050a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80050a4:	4f0c      	ldr	r7, [pc, #48]	; (80050d8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80050a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80050aa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80050ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80050ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80050b0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 80050b2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80050b4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80050b6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80050ba:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80050bc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80050be:	f000 fec5 	bl	8005e4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80050c2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80050c6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80050ca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80050ce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80050d2:	4770      	bx	lr
    ldr r1, =_kernel
 80050d4:	2000134c 	.word	0x2000134c
    ldr v4, =_SCS_ICSR
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80050dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80050e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80050e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80050e6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80050ea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80050ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80050f0:	2902      	cmp	r1, #2
    beq _oops
 80050f2:	d0ff      	beq.n	80050f4 <_oops>

080050f4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80050f4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80050f6:	f009 fa3f 	bl	800e578 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80050fa:	bd01      	pop	{r0, pc}

080050fc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80050fc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80050fe:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8005102:	490d      	ldr	r1, [pc, #52]	; (8005138 <arch_new_thread+0x3c>)
 8005104:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8005108:	f021 0101 	bic.w	r1, r1, #1
 800510c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8005110:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8005126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800512e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8005134:	bc10      	pop	{r4}
 8005136:	4770      	bx	lr
 8005138:	0800dd39 	.word	0x0800dd39

0800513c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <z_check_thread_stack_fail+0x48>)
 800513e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8005140:	b1ea      	cbz	r2, 800517e <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8005142:	f110 0f16 	cmn.w	r0, #22
 8005146:	d010      	beq.n	800516a <z_check_thread_stack_fail+0x2e>
 8005148:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800514a:	f1a3 0c20 	sub.w	ip, r3, #32
 800514e:	4584      	cmp	ip, r0
 8005150:	d805      	bhi.n	800515e <z_check_thread_stack_fail+0x22>
 8005152:	4283      	cmp	r3, r0
 8005154:	d905      	bls.n	8005162 <z_check_thread_stack_fail+0x26>
 8005156:	428b      	cmp	r3, r1
 8005158:	d805      	bhi.n	8005166 <z_check_thread_stack_fail+0x2a>
 800515a:	2100      	movs	r1, #0
 800515c:	e00a      	b.n	8005174 <z_check_thread_stack_fail+0x38>
 800515e:	2100      	movs	r1, #0
 8005160:	e008      	b.n	8005174 <z_check_thread_stack_fail+0x38>
 8005162:	2100      	movs	r1, #0
 8005164:	e006      	b.n	8005174 <z_check_thread_stack_fail+0x38>
 8005166:	2101      	movs	r1, #1
 8005168:	e004      	b.n	8005174 <z_check_thread_stack_fail+0x38>
 800516a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800516c:	428b      	cmp	r3, r1
 800516e:	bf94      	ite	ls
 8005170:	2100      	movls	r1, #0
 8005172:	2101      	movhi	r1, #1
 8005174:	b909      	cbnz	r1, 800517a <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8005176:	2000      	movs	r0, #0
}
 8005178:	4770      	bx	lr
		return thread->stack_info.start;
 800517a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800517c:	4770      	bx	lr
		return 0;
 800517e:	2000      	movs	r0, #0
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2000134c 	.word	0x2000134c

08005188 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8005188:	b508      	push	{r3, lr}
 800518a:	460d      	mov	r5, r1
 800518c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 800518e:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <arch_switch_to_main_thread+0x28>)
 8005190:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8005192:	f000 fe5b 	bl	8005e4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8005196:	4620      	mov	r0, r4
 8005198:	f385 8809 	msr	PSP, r5
 800519c:	2100      	movs	r1, #0
 800519e:	b663      	cpsie	if
 80051a0:	f381 8811 	msr	BASEPRI, r1
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	f008 fdc4 	bl	800dd38 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80051b0:	2000134c 	.word	0x2000134c

080051b4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80051b4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80051b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80051ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80051be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80051c2:	4904      	ldr	r1, [pc, #16]	; (80051d4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80051c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80051c6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80051c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80051ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80051ce:	4902      	ldr	r1, [pc, #8]	; (80051d8 <_isr_wrapper+0x24>)
	bx r1
 80051d0:	4708      	bx	r1
 80051d2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80051d4:	080108b8 	.word	0x080108b8
	ldr r1, =z_arm_int_exit
 80051d8:	080051dd 	.word	0x080051dd

080051dc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80051de:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80051e0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80051e2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80051e4:	d003      	beq.n	80051ee <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80051e6:	4903      	ldr	r1, [pc, #12]	; (80051f4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80051ec:	600a      	str	r2, [r1, #0]

080051ee <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80051ee:	4770      	bx	lr
	ldr r3, =_kernel
 80051f0:	2000134c 	.word	0x2000134c
	ldr r1, =_SCS_ICSR
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 80051f8:	b500      	push	{lr}
 80051fa:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 80051fc:	290f      	cmp	r1, #15
 80051fe:	dc0f      	bgt.n	8005220 <reserved_exception+0x28>
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <reserved_exception+0x2c>)
 8005202:	3910      	subs	r1, #16
 8005204:	9103      	str	r1, [sp, #12]
 8005206:	9302      	str	r3, [sp, #8]
 8005208:	4b07      	ldr	r3, [pc, #28]	; (8005228 <reserved_exception+0x30>)
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	2000      	movs	r0, #0
 800520e:	9000      	str	r0, [sp, #0]
 8005210:	4603      	mov	r3, r0
 8005212:	2201      	movs	r2, #1
 8005214:	4905      	ldr	r1, [pc, #20]	; (800522c <reserved_exception+0x34>)
 8005216:	f009 f9c3 	bl	800e5a0 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 800521a:	b005      	add	sp, #20
 800521c:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <reserved_exception+0x38>)
 8005222:	e7ee      	b.n	8005202 <reserved_exception+0xa>
 8005224:	080112f4 	.word	0x080112f4
 8005228:	0801130c 	.word	0x0801130c
 800522c:	08010b90 	.word	0x08010b90
 8005230:	080112d8 	.word	0x080112d8

08005234 <bus_fault>:
{
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	b0ba      	sub	sp, #232	; 0xe8
 8005238:	4605      	mov	r5, r0
 800523a:	460e      	mov	r6, r1
 800523c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 800523e:	2201      	movs	r2, #1
 8005240:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005244:	4ba8      	ldr	r3, [pc, #672]	; (80054e8 <bus_fault+0x2b4>)
 8005246:	930e      	str	r3, [sp, #56]	; 0x38
 8005248:	2300      	movs	r3, #0
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	2102      	movs	r1, #2
 800524e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005252:	9901      	ldr	r1, [sp, #4]
 8005254:	910d      	str	r1, [sp, #52]	; 0x34
 8005256:	4619      	mov	r1, r3
 8005258:	f363 0100 	bfi	r1, r3, #0, #1
 800525c:	f363 0141 	bfi	r1, r3, #1, #1
 8005260:	f363 0182 	bfi	r1, r3, #2, #1
 8005264:	f363 01c5 	bfi	r1, r3, #3, #3
 8005268:	f362 1188 	bfi	r1, r2, #6, #3
 800526c:	2208      	movs	r2, #8
 800526e:	f362 2152 	bfi	r1, r2, #9, #10
 8005272:	f363 41de 	bfi	r1, r3, #19, #12
 8005276:	f363 71df 	bfi	r1, r3, #31, #1
 800527a:	aa0d      	add	r2, sp, #52	; 0x34
 800527c:	489b      	ldr	r0, [pc, #620]	; (80054ec <bus_fault+0x2b8>)
 800527e:	f009 f902 	bl	800e486 <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8005282:	4b9b      	ldr	r3, [pc, #620]	; (80054f0 <bus_fault+0x2bc>)
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800528a:	d128      	bne.n	80052de <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800528c:	4b98      	ldr	r3, [pc, #608]	; (80054f0 <bus_fault+0x2bc>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005294:	d146      	bne.n	8005324 <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8005296:	4b96      	ldr	r3, [pc, #600]	; (80054f0 <bus_fault+0x2bc>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800529e:	d164      	bne.n	800536a <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80052a0:	4b93      	ldr	r3, [pc, #588]	; (80054f0 <bus_fault+0x2bc>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80052a8:	f040 80b4 	bne.w	8005414 <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80052ac:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <bus_fault+0x2bc>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052b4:	f040 80d1 	bne.w	800545a <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80052b8:	4b8d      	ldr	r3, [pc, #564]	; (80054f0 <bus_fault+0x2bc>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80052c0:	f040 80ee 	bne.w	80054a0 <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80052c4:	4a8a      	ldr	r2, [pc, #552]	; (80054f0 <bus_fault+0x2bc>)
 80052c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80052c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80052cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80052ce:	2101      	movs	r1, #1
 80052d0:	4628      	mov	r0, r5
 80052d2:	f009 f963 	bl	800e59c <memory_fault_recoverable>
 80052d6:	7020      	strb	r0, [r4, #0]
}
 80052d8:	2000      	movs	r0, #0
 80052da:	b03a      	add	sp, #232	; 0xe8
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 80052de:	2201      	movs	r2, #1
 80052e0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80052e4:	4b83      	ldr	r3, [pc, #524]	; (80054f4 <bus_fault+0x2c0>)
 80052e6:	9314      	str	r3, [sp, #80]	; 0x50
 80052e8:	2300      	movs	r3, #0
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2102      	movs	r1, #2
 80052ee:	f88d 1004 	strb.w	r1, [sp, #4]
 80052f2:	9901      	ldr	r1, [sp, #4]
 80052f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80052f6:	4619      	mov	r1, r3
 80052f8:	f363 0100 	bfi	r1, r3, #0, #1
 80052fc:	f363 0141 	bfi	r1, r3, #1, #1
 8005300:	f363 0182 	bfi	r1, r3, #2, #1
 8005304:	f363 01c5 	bfi	r1, r3, #3, #3
 8005308:	f362 1188 	bfi	r1, r2, #6, #3
 800530c:	2208      	movs	r2, #8
 800530e:	f362 2152 	bfi	r1, r2, #9, #10
 8005312:	f363 41de 	bfi	r1, r3, #19, #12
 8005316:	f363 71df 	bfi	r1, r3, #31, #1
 800531a:	aa13      	add	r2, sp, #76	; 0x4c
 800531c:	4873      	ldr	r0, [pc, #460]	; (80054ec <bus_fault+0x2b8>)
 800531e:	f009 f8b2 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005322:	e7b3      	b.n	800528c <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8005324:	2201      	movs	r2, #1
 8005326:	f8ad 2008 	strh.w	r2, [sp, #8]
 800532a:	4b73      	ldr	r3, [pc, #460]	; (80054f8 <bus_fault+0x2c4>)
 800532c:	931a      	str	r3, [sp, #104]	; 0x68
 800532e:	2300      	movs	r3, #0
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2102      	movs	r1, #2
 8005334:	f88d 1004 	strb.w	r1, [sp, #4]
 8005338:	9901      	ldr	r1, [sp, #4]
 800533a:	9119      	str	r1, [sp, #100]	; 0x64
 800533c:	4619      	mov	r1, r3
 800533e:	f363 0100 	bfi	r1, r3, #0, #1
 8005342:	f363 0141 	bfi	r1, r3, #1, #1
 8005346:	f363 0182 	bfi	r1, r3, #2, #1
 800534a:	f363 01c5 	bfi	r1, r3, #3, #3
 800534e:	f362 1188 	bfi	r1, r2, #6, #3
 8005352:	2208      	movs	r2, #8
 8005354:	f362 2152 	bfi	r1, r2, #9, #10
 8005358:	f363 41de 	bfi	r1, r3, #19, #12
 800535c:	f363 71df 	bfi	r1, r3, #31, #1
 8005360:	aa19      	add	r2, sp, #100	; 0x64
 8005362:	4862      	ldr	r0, [pc, #392]	; (80054ec <bus_fault+0x2b8>)
 8005364:	f009 f88f 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005368:	e795      	b.n	8005296 <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 800536a:	2201      	movs	r2, #1
 800536c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005370:	4b62      	ldr	r3, [pc, #392]	; (80054fc <bus_fault+0x2c8>)
 8005372:	9320      	str	r3, [sp, #128]	; 0x80
 8005374:	2300      	movs	r3, #0
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2102      	movs	r1, #2
 800537a:	f88d 1004 	strb.w	r1, [sp, #4]
 800537e:	9901      	ldr	r1, [sp, #4]
 8005380:	911f      	str	r1, [sp, #124]	; 0x7c
 8005382:	4619      	mov	r1, r3
 8005384:	f363 0100 	bfi	r1, r3, #0, #1
 8005388:	f363 0141 	bfi	r1, r3, #1, #1
 800538c:	f363 0182 	bfi	r1, r3, #2, #1
 8005390:	f363 01c5 	bfi	r1, r3, #3, #3
 8005394:	f362 1188 	bfi	r1, r2, #6, #3
 8005398:	2208      	movs	r2, #8
 800539a:	f362 2152 	bfi	r1, r2, #9, #10
 800539e:	f363 41de 	bfi	r1, r3, #19, #12
 80053a2:	f363 71df 	bfi	r1, r3, #31, #1
 80053a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80053a8:	4850      	ldr	r0, [pc, #320]	; (80054ec <bus_fault+0x2b8>)
 80053aa:	f009 f86c 	bl	800e486 <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 80053ae:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <bus_fault+0x2bc>)
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80053b8:	f43f af72 	beq.w	80052a0 <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80053bc:	2001      	movs	r0, #1
 80053be:	f8ad 0008 	strh.w	r0, [sp, #8]
 80053c2:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <bus_fault+0x2cc>)
 80053c4:	9326      	str	r3, [sp, #152]	; 0x98
 80053c6:	9227      	str	r2, [sp, #156]	; 0x9c
 80053c8:	2300      	movs	r3, #0
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	2203      	movs	r2, #3
 80053ce:	f88d 2004 	strb.w	r2, [sp, #4]
 80053d2:	9a01      	ldr	r2, [sp, #4]
 80053d4:	9225      	str	r2, [sp, #148]	; 0x94
 80053d6:	4619      	mov	r1, r3
 80053d8:	f363 0100 	bfi	r1, r3, #0, #1
 80053dc:	f363 0141 	bfi	r1, r3, #1, #1
 80053e0:	f363 0182 	bfi	r1, r3, #2, #1
 80053e4:	f363 01c5 	bfi	r1, r3, #3, #3
 80053e8:	f360 1188 	bfi	r1, r0, #6, #3
 80053ec:	220c      	movs	r2, #12
 80053ee:	f362 2152 	bfi	r1, r2, #9, #10
 80053f2:	f363 41de 	bfi	r1, r3, #19, #12
 80053f6:	f363 71df 	bfi	r1, r3, #31, #1
 80053fa:	aa25      	add	r2, sp, #148	; 0x94
 80053fc:	483b      	ldr	r0, [pc, #236]	; (80054ec <bus_fault+0x2b8>)
 80053fe:	f009 f842 	bl	800e486 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8005402:	2e00      	cmp	r6, #0
 8005404:	f43f af4c 	beq.w	80052a0 <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8005408:	4a39      	ldr	r2, [pc, #228]	; (80054f0 <bus_fault+0x2bc>)
 800540a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800540c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005410:	6293      	str	r3, [r2, #40]	; 0x28
 8005412:	e745      	b.n	80052a0 <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 8005414:	2201      	movs	r2, #1
 8005416:	f8ad 2008 	strh.w	r2, [sp, #8]
 800541a:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <bus_fault+0x2d0>)
 800541c:	932c      	str	r3, [sp, #176]	; 0xb0
 800541e:	2300      	movs	r3, #0
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2102      	movs	r1, #2
 8005424:	f88d 1004 	strb.w	r1, [sp, #4]
 8005428:	9901      	ldr	r1, [sp, #4]
 800542a:	912b      	str	r1, [sp, #172]	; 0xac
 800542c:	4619      	mov	r1, r3
 800542e:	f363 0100 	bfi	r1, r3, #0, #1
 8005432:	f363 0141 	bfi	r1, r3, #1, #1
 8005436:	f363 0182 	bfi	r1, r3, #2, #1
 800543a:	f363 01c5 	bfi	r1, r3, #3, #3
 800543e:	f362 1188 	bfi	r1, r2, #6, #3
 8005442:	2208      	movs	r2, #8
 8005444:	f362 2152 	bfi	r1, r2, #9, #10
 8005448:	f363 41de 	bfi	r1, r3, #19, #12
 800544c:	f363 71df 	bfi	r1, r3, #31, #1
 8005450:	aa2b      	add	r2, sp, #172	; 0xac
 8005452:	4826      	ldr	r0, [pc, #152]	; (80054ec <bus_fault+0x2b8>)
 8005454:	f009 f817 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005458:	e728      	b.n	80052ac <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 800545a:	2201      	movs	r2, #1
 800545c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005460:	4b29      	ldr	r3, [pc, #164]	; (8005508 <bus_fault+0x2d4>)
 8005462:	9338      	str	r3, [sp, #224]	; 0xe0
 8005464:	2300      	movs	r3, #0
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	2102      	movs	r1, #2
 800546a:	f88d 1004 	strb.w	r1, [sp, #4]
 800546e:	9901      	ldr	r1, [sp, #4]
 8005470:	9137      	str	r1, [sp, #220]	; 0xdc
 8005472:	4619      	mov	r1, r3
 8005474:	f363 0100 	bfi	r1, r3, #0, #1
 8005478:	f363 0141 	bfi	r1, r3, #1, #1
 800547c:	f363 0182 	bfi	r1, r3, #2, #1
 8005480:	f363 01c5 	bfi	r1, r3, #3, #3
 8005484:	f362 1188 	bfi	r1, r2, #6, #3
 8005488:	2208      	movs	r2, #8
 800548a:	f362 2152 	bfi	r1, r2, #9, #10
 800548e:	f363 41de 	bfi	r1, r3, #19, #12
 8005492:	f363 71df 	bfi	r1, r3, #31, #1
 8005496:	aa37      	add	r2, sp, #220	; 0xdc
 8005498:	4814      	ldr	r0, [pc, #80]	; (80054ec <bus_fault+0x2b8>)
 800549a:	f008 fff4 	bl	800e486 <z_impl_z_log_msg2_static_create>
 800549e:	e711      	b.n	80052c4 <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80054a0:	2201      	movs	r2, #1
 80054a2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <bus_fault+0x2d8>)
 80054a8:	9332      	str	r3, [sp, #200]	; 0xc8
 80054aa:	2300      	movs	r3, #0
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	2102      	movs	r1, #2
 80054b0:	f88d 1004 	strb.w	r1, [sp, #4]
 80054b4:	9901      	ldr	r1, [sp, #4]
 80054b6:	9131      	str	r1, [sp, #196]	; 0xc4
 80054b8:	4619      	mov	r1, r3
 80054ba:	f363 0100 	bfi	r1, r3, #0, #1
 80054be:	f363 0141 	bfi	r1, r3, #1, #1
 80054c2:	f363 0182 	bfi	r1, r3, #2, #1
 80054c6:	f363 01c5 	bfi	r1, r3, #3, #3
 80054ca:	f362 1188 	bfi	r1, r2, #6, #3
 80054ce:	2208      	movs	r2, #8
 80054d0:	f362 2152 	bfi	r1, r2, #9, #10
 80054d4:	f363 41de 	bfi	r1, r3, #19, #12
 80054d8:	f363 71df 	bfi	r1, r3, #31, #1
 80054dc:	aa31      	add	r2, sp, #196	; 0xc4
 80054de:	4803      	ldr	r0, [pc, #12]	; (80054ec <bus_fault+0x2b8>)
 80054e0:	f008 ffd1 	bl	800e486 <z_impl_z_log_msg2_static_create>
 80054e4:	e6ee      	b.n	80052c4 <bus_fault+0x90>
 80054e6:	bf00      	nop
 80054e8:	08011320 	.word	0x08011320
 80054ec:	08010b90 	.word	0x08010b90
 80054f0:	e000ed00 	.word	0xe000ed00
 80054f4:	08011338 	.word	0x08011338
 80054f8:	0801134c 	.word	0x0801134c
 80054fc:	08011360 	.word	0x08011360
 8005500:	0801137c 	.word	0x0801137c
 8005504:	08011394 	.word	0x08011394
 8005508:	080113b0 	.word	0x080113b0
 800550c:	080113c8 	.word	0x080113c8

08005510 <usage_fault>:
{
 8005510:	b500      	push	{lr}
 8005512:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8005514:	2201      	movs	r2, #1
 8005516:	f8ad 2008 	strh.w	r2, [sp, #8]
 800551a:	4b8e      	ldr	r3, [pc, #568]	; (8005754 <usage_fault+0x244>)
 800551c:	930e      	str	r3, [sp, #56]	; 0x38
 800551e:	2300      	movs	r3, #0
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	2102      	movs	r1, #2
 8005524:	f88d 1004 	strb.w	r1, [sp, #4]
 8005528:	9901      	ldr	r1, [sp, #4]
 800552a:	910d      	str	r1, [sp, #52]	; 0x34
 800552c:	4619      	mov	r1, r3
 800552e:	f363 0100 	bfi	r1, r3, #0, #1
 8005532:	f363 0141 	bfi	r1, r3, #1, #1
 8005536:	f363 0182 	bfi	r1, r3, #2, #1
 800553a:	f363 01c5 	bfi	r1, r3, #3, #3
 800553e:	f362 1188 	bfi	r1, r2, #6, #3
 8005542:	2208      	movs	r2, #8
 8005544:	f362 2152 	bfi	r1, r2, #9, #10
 8005548:	f363 41de 	bfi	r1, r3, #19, #12
 800554c:	f363 71df 	bfi	r1, r3, #31, #1
 8005550:	aa0d      	add	r2, sp, #52	; 0x34
 8005552:	4881      	ldr	r0, [pc, #516]	; (8005758 <usage_fault+0x248>)
 8005554:	f008 ff97 	bl	800e486 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8005558:	4b80      	ldr	r3, [pc, #512]	; (800575c <usage_fault+0x24c>)
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005560:	d125      	bne.n	80055ae <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8005562:	4b7e      	ldr	r3, [pc, #504]	; (800575c <usage_fault+0x24c>)
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800556a:	d143      	bne.n	80055f4 <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800556c:	4b7b      	ldr	r3, [pc, #492]	; (800575c <usage_fault+0x24c>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005574:	d161      	bne.n	800563a <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8005576:	4b79      	ldr	r3, [pc, #484]	; (800575c <usage_fault+0x24c>)
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800557e:	d17f      	bne.n	8005680 <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8005580:	4b76      	ldr	r3, [pc, #472]	; (800575c <usage_fault+0x24c>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005588:	f040 809d 	bne.w	80056c6 <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800558c:	4b73      	ldr	r3, [pc, #460]	; (800575c <usage_fault+0x24c>)
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005594:	f040 80ba 	bne.w	800570c <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005598:	4a70      	ldr	r2, [pc, #448]	; (800575c <usage_fault+0x24c>)
 800559a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800559c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80055a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80055a4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80055a6:	2000      	movs	r0, #0
 80055a8:	b035      	add	sp, #212	; 0xd4
 80055aa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 80055ae:	2201      	movs	r2, #1
 80055b0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055b4:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <usage_fault+0x250>)
 80055b6:	9314      	str	r3, [sp, #80]	; 0x50
 80055b8:	2300      	movs	r3, #0
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	2102      	movs	r1, #2
 80055be:	f88d 1004 	strb.w	r1, [sp, #4]
 80055c2:	9901      	ldr	r1, [sp, #4]
 80055c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80055c6:	4619      	mov	r1, r3
 80055c8:	f363 0100 	bfi	r1, r3, #0, #1
 80055cc:	f363 0141 	bfi	r1, r3, #1, #1
 80055d0:	f363 0182 	bfi	r1, r3, #2, #1
 80055d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80055d8:	f362 1188 	bfi	r1, r2, #6, #3
 80055dc:	2208      	movs	r2, #8
 80055de:	f362 2152 	bfi	r1, r2, #9, #10
 80055e2:	f363 41de 	bfi	r1, r3, #19, #12
 80055e6:	f363 71df 	bfi	r1, r3, #31, #1
 80055ea:	aa13      	add	r2, sp, #76	; 0x4c
 80055ec:	485a      	ldr	r0, [pc, #360]	; (8005758 <usage_fault+0x248>)
 80055ee:	f008 ff4a 	bl	800e486 <z_impl_z_log_msg2_static_create>
 80055f2:	e7b6      	b.n	8005562 <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 80055f4:	2201      	movs	r2, #1
 80055f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055fa:	4b5a      	ldr	r3, [pc, #360]	; (8005764 <usage_fault+0x254>)
 80055fc:	931a      	str	r3, [sp, #104]	; 0x68
 80055fe:	2300      	movs	r3, #0
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	2102      	movs	r1, #2
 8005604:	f88d 1004 	strb.w	r1, [sp, #4]
 8005608:	9901      	ldr	r1, [sp, #4]
 800560a:	9119      	str	r1, [sp, #100]	; 0x64
 800560c:	4619      	mov	r1, r3
 800560e:	f363 0100 	bfi	r1, r3, #0, #1
 8005612:	f363 0141 	bfi	r1, r3, #1, #1
 8005616:	f363 0182 	bfi	r1, r3, #2, #1
 800561a:	f363 01c5 	bfi	r1, r3, #3, #3
 800561e:	f362 1188 	bfi	r1, r2, #6, #3
 8005622:	2208      	movs	r2, #8
 8005624:	f362 2152 	bfi	r1, r2, #9, #10
 8005628:	f363 41de 	bfi	r1, r3, #19, #12
 800562c:	f363 71df 	bfi	r1, r3, #31, #1
 8005630:	aa19      	add	r2, sp, #100	; 0x64
 8005632:	4849      	ldr	r0, [pc, #292]	; (8005758 <usage_fault+0x248>)
 8005634:	f008 ff27 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005638:	e798      	b.n	800556c <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 800563a:	2201      	movs	r2, #1
 800563c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005640:	4b49      	ldr	r3, [pc, #292]	; (8005768 <usage_fault+0x258>)
 8005642:	9320      	str	r3, [sp, #128]	; 0x80
 8005644:	2300      	movs	r3, #0
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	2102      	movs	r1, #2
 800564a:	f88d 1004 	strb.w	r1, [sp, #4]
 800564e:	9901      	ldr	r1, [sp, #4]
 8005650:	911f      	str	r1, [sp, #124]	; 0x7c
 8005652:	4619      	mov	r1, r3
 8005654:	f363 0100 	bfi	r1, r3, #0, #1
 8005658:	f363 0141 	bfi	r1, r3, #1, #1
 800565c:	f363 0182 	bfi	r1, r3, #2, #1
 8005660:	f363 01c5 	bfi	r1, r3, #3, #3
 8005664:	f362 1188 	bfi	r1, r2, #6, #3
 8005668:	2208      	movs	r2, #8
 800566a:	f362 2152 	bfi	r1, r2, #9, #10
 800566e:	f363 41de 	bfi	r1, r3, #19, #12
 8005672:	f363 71df 	bfi	r1, r3, #31, #1
 8005676:	aa1f      	add	r2, sp, #124	; 0x7c
 8005678:	4837      	ldr	r0, [pc, #220]	; (8005758 <usage_fault+0x248>)
 800567a:	f008 ff04 	bl	800e486 <z_impl_z_log_msg2_static_create>
 800567e:	e77a      	b.n	8005576 <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8005680:	2201      	movs	r2, #1
 8005682:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <usage_fault+0x25c>)
 8005688:	9326      	str	r3, [sp, #152]	; 0x98
 800568a:	2300      	movs	r3, #0
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	2102      	movs	r1, #2
 8005690:	f88d 1004 	strb.w	r1, [sp, #4]
 8005694:	9901      	ldr	r1, [sp, #4]
 8005696:	9125      	str	r1, [sp, #148]	; 0x94
 8005698:	4619      	mov	r1, r3
 800569a:	f363 0100 	bfi	r1, r3, #0, #1
 800569e:	f363 0141 	bfi	r1, r3, #1, #1
 80056a2:	f363 0182 	bfi	r1, r3, #2, #1
 80056a6:	f363 01c5 	bfi	r1, r3, #3, #3
 80056aa:	f362 1188 	bfi	r1, r2, #6, #3
 80056ae:	2208      	movs	r2, #8
 80056b0:	f362 2152 	bfi	r1, r2, #9, #10
 80056b4:	f363 41de 	bfi	r1, r3, #19, #12
 80056b8:	f363 71df 	bfi	r1, r3, #31, #1
 80056bc:	aa25      	add	r2, sp, #148	; 0x94
 80056be:	4826      	ldr	r0, [pc, #152]	; (8005758 <usage_fault+0x248>)
 80056c0:	f008 fee1 	bl	800e486 <z_impl_z_log_msg2_static_create>
 80056c4:	e75c      	b.n	8005580 <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80056c6:	2201      	movs	r2, #1
 80056c8:	f8ad 2008 	strh.w	r2, [sp, #8]
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <usage_fault+0x260>)
 80056ce:	932c      	str	r3, [sp, #176]	; 0xb0
 80056d0:	2300      	movs	r3, #0
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	2102      	movs	r1, #2
 80056d6:	f88d 1004 	strb.w	r1, [sp, #4]
 80056da:	9901      	ldr	r1, [sp, #4]
 80056dc:	912b      	str	r1, [sp, #172]	; 0xac
 80056de:	4619      	mov	r1, r3
 80056e0:	f363 0100 	bfi	r1, r3, #0, #1
 80056e4:	f363 0141 	bfi	r1, r3, #1, #1
 80056e8:	f363 0182 	bfi	r1, r3, #2, #1
 80056ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80056f0:	f362 1188 	bfi	r1, r2, #6, #3
 80056f4:	2208      	movs	r2, #8
 80056f6:	f362 2152 	bfi	r1, r2, #9, #10
 80056fa:	f363 41de 	bfi	r1, r3, #19, #12
 80056fe:	f363 71df 	bfi	r1, r3, #31, #1
 8005702:	aa2b      	add	r2, sp, #172	; 0xac
 8005704:	4814      	ldr	r0, [pc, #80]	; (8005758 <usage_fault+0x248>)
 8005706:	f008 febe 	bl	800e486 <z_impl_z_log_msg2_static_create>
 800570a:	e73f      	b.n	800558c <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800570c:	2201      	movs	r2, #1
 800570e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005712:	4b18      	ldr	r3, [pc, #96]	; (8005774 <usage_fault+0x264>)
 8005714:	9332      	str	r3, [sp, #200]	; 0xc8
 8005716:	2300      	movs	r3, #0
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	2102      	movs	r1, #2
 800571c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005720:	9901      	ldr	r1, [sp, #4]
 8005722:	9131      	str	r1, [sp, #196]	; 0xc4
 8005724:	4619      	mov	r1, r3
 8005726:	f363 0100 	bfi	r1, r3, #0, #1
 800572a:	f363 0141 	bfi	r1, r3, #1, #1
 800572e:	f363 0182 	bfi	r1, r3, #2, #1
 8005732:	f363 01c5 	bfi	r1, r3, #3, #3
 8005736:	f362 1188 	bfi	r1, r2, #6, #3
 800573a:	2208      	movs	r2, #8
 800573c:	f362 2152 	bfi	r1, r2, #9, #10
 8005740:	f363 41de 	bfi	r1, r3, #19, #12
 8005744:	f363 71df 	bfi	r1, r3, #31, #1
 8005748:	aa31      	add	r2, sp, #196	; 0xc4
 800574a:	4803      	ldr	r0, [pc, #12]	; (8005758 <usage_fault+0x248>)
 800574c:	f008 fe9b 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005750:	e722      	b.n	8005598 <usage_fault+0x88>
 8005752:	bf00      	nop
 8005754:	080113f8 	.word	0x080113f8
 8005758:	08010b90 	.word	0x08010b90
 800575c:	e000ed00 	.word	0xe000ed00
 8005760:	08011410 	.word	0x08011410
 8005764:	08011424 	.word	0x08011424
 8005768:	08011440 	.word	0x08011440
 800576c:	08011460 	.word	0x08011460
 8005770:	08011488 	.word	0x08011488
 8005774:	080114a4 	.word	0x080114a4

08005778 <debug_monitor>:
{
 8005778:	b500      	push	{lr}
 800577a:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 800577c:	2300      	movs	r3, #0
 800577e:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 8005780:	2201      	movs	r2, #1
 8005782:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005786:	4910      	ldr	r1, [pc, #64]	; (80057c8 <debug_monitor+0x50>)
 8005788:	910e      	str	r1, [sp, #56]	; 0x38
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	2102      	movs	r1, #2
 800578e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005792:	9901      	ldr	r1, [sp, #4]
 8005794:	910d      	str	r1, [sp, #52]	; 0x34
 8005796:	4619      	mov	r1, r3
 8005798:	f363 0100 	bfi	r1, r3, #0, #1
 800579c:	f363 0141 	bfi	r1, r3, #1, #1
 80057a0:	f363 0182 	bfi	r1, r3, #2, #1
 80057a4:	f363 01c5 	bfi	r1, r3, #3, #3
 80057a8:	f362 1188 	bfi	r1, r2, #6, #3
 80057ac:	2208      	movs	r2, #8
 80057ae:	f362 2152 	bfi	r1, r2, #9, #10
 80057b2:	f363 41de 	bfi	r1, r3, #19, #12
 80057b6:	f363 71df 	bfi	r1, r3, #31, #1
 80057ba:	aa0d      	add	r2, sp, #52	; 0x34
 80057bc:	4803      	ldr	r0, [pc, #12]	; (80057cc <debug_monitor+0x54>)
 80057be:	f008 fe62 	bl	800e486 <z_impl_z_log_msg2_static_create>
}
 80057c2:	b011      	add	sp, #68	; 0x44
 80057c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80057c8:	080114d0 	.word	0x080114d0
 80057cc:	08010b90 	.word	0x08010b90

080057d0 <mem_manage_fault>:
{
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	b0b5      	sub	sp, #212	; 0xd4
 80057d4:	4605      	mov	r5, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 80057da:	2201      	movs	r2, #1
 80057dc:	f8ad 2008 	strh.w	r2, [sp, #8]
 80057e0:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <mem_manage_fault+0x2a0>)
 80057e2:	930e      	str	r3, [sp, #56]	; 0x38
 80057e4:	2300      	movs	r3, #0
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	2102      	movs	r1, #2
 80057ea:	f88d 1004 	strb.w	r1, [sp, #4]
 80057ee:	9901      	ldr	r1, [sp, #4]
 80057f0:	910d      	str	r1, [sp, #52]	; 0x34
 80057f2:	4619      	mov	r1, r3
 80057f4:	f363 0100 	bfi	r1, r3, #0, #1
 80057f8:	f363 0141 	bfi	r1, r3, #1, #1
 80057fc:	f363 0182 	bfi	r1, r3, #2, #1
 8005800:	f363 01c5 	bfi	r1, r3, #3, #3
 8005804:	f362 1188 	bfi	r1, r2, #6, #3
 8005808:	2208      	movs	r2, #8
 800580a:	f362 2152 	bfi	r1, r2, #9, #10
 800580e:	f363 41de 	bfi	r1, r3, #19, #12
 8005812:	f363 71df 	bfi	r1, r3, #31, #1
 8005816:	aa0d      	add	r2, sp, #52	; 0x34
 8005818:	4896      	ldr	r0, [pc, #600]	; (8005a74 <mem_manage_fault+0x2a4>)
 800581a:	f008 fe34 	bl	800e486 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800581e:	4b96      	ldr	r3, [pc, #600]	; (8005a78 <mem_manage_fault+0x2a8>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005822:	f013 0f10 	tst.w	r3, #16
 8005826:	d134      	bne.n	8005892 <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8005828:	4b93      	ldr	r3, [pc, #588]	; (8005a78 <mem_manage_fault+0x2a8>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	f013 0f08 	tst.w	r3, #8
 8005830:	d152      	bne.n	80058d8 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8005832:	4b91      	ldr	r3, [pc, #580]	; (8005a78 <mem_manage_fault+0x2a8>)
 8005834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005836:	f013 0f02 	tst.w	r3, #2
 800583a:	d170      	bne.n	800591e <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 800583c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8005840:	4b8d      	ldr	r3, [pc, #564]	; (8005a78 <mem_manage_fault+0x2a8>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f013 0f01 	tst.w	r3, #1
 8005848:	f040 80c0 	bne.w	80059cc <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800584c:	4b8a      	ldr	r3, [pc, #552]	; (8005a78 <mem_manage_fault+0x2a8>)
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f013 0f20 	tst.w	r3, #32
 8005854:	f040 80dd 	bne.w	8005a12 <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005858:	4b87      	ldr	r3, [pc, #540]	; (8005a78 <mem_manage_fault+0x2a8>)
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f013 0f10 	tst.w	r3, #16
 8005860:	d104      	bne.n	800586c <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8005862:	4b85      	ldr	r3, [pc, #532]	; (8005a78 <mem_manage_fault+0x2a8>)
 8005864:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005866:	f014 0402 	ands.w	r4, r4, #2
 800586a:	d005      	beq.n	8005878 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800586c:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <mem_manage_fault+0x2a8>)
 800586e:	685c      	ldr	r4, [r3, #4]
 8005870:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8005874:	f040 80f0 	bne.w	8005a58 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8005878:	4a7f      	ldr	r2, [pc, #508]	; (8005a78 <mem_manage_fault+0x2a8>)
 800587a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800587c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8005880:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8005882:	2101      	movs	r1, #1
 8005884:	4628      	mov	r0, r5
 8005886:	f008 fe89 	bl	800e59c <memory_fault_recoverable>
 800588a:	7030      	strb	r0, [r6, #0]
}
 800588c:	4620      	mov	r0, r4
 800588e:	b035      	add	sp, #212	; 0xd4
 8005890:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 8005892:	2201      	movs	r2, #1
 8005894:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005898:	4b78      	ldr	r3, [pc, #480]	; (8005a7c <mem_manage_fault+0x2ac>)
 800589a:	9314      	str	r3, [sp, #80]	; 0x50
 800589c:	2300      	movs	r3, #0
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	2102      	movs	r1, #2
 80058a2:	f88d 1004 	strb.w	r1, [sp, #4]
 80058a6:	9901      	ldr	r1, [sp, #4]
 80058a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80058aa:	4619      	mov	r1, r3
 80058ac:	f363 0100 	bfi	r1, r3, #0, #1
 80058b0:	f363 0141 	bfi	r1, r3, #1, #1
 80058b4:	f363 0182 	bfi	r1, r3, #2, #1
 80058b8:	f363 01c5 	bfi	r1, r3, #3, #3
 80058bc:	f362 1188 	bfi	r1, r2, #6, #3
 80058c0:	2208      	movs	r2, #8
 80058c2:	f362 2152 	bfi	r1, r2, #9, #10
 80058c6:	f363 41de 	bfi	r1, r3, #19, #12
 80058ca:	f363 71df 	bfi	r1, r3, #31, #1
 80058ce:	aa13      	add	r2, sp, #76	; 0x4c
 80058d0:	4868      	ldr	r0, [pc, #416]	; (8005a74 <mem_manage_fault+0x2a4>)
 80058d2:	f008 fdd8 	bl	800e486 <z_impl_z_log_msg2_static_create>
 80058d6:	e7a7      	b.n	8005828 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 80058d8:	2201      	movs	r2, #1
 80058da:	f8ad 2008 	strh.w	r2, [sp, #8]
 80058de:	4b68      	ldr	r3, [pc, #416]	; (8005a80 <mem_manage_fault+0x2b0>)
 80058e0:	931a      	str	r3, [sp, #104]	; 0x68
 80058e2:	2300      	movs	r3, #0
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	2102      	movs	r1, #2
 80058e8:	f88d 1004 	strb.w	r1, [sp, #4]
 80058ec:	9901      	ldr	r1, [sp, #4]
 80058ee:	9119      	str	r1, [sp, #100]	; 0x64
 80058f0:	4619      	mov	r1, r3
 80058f2:	f363 0100 	bfi	r1, r3, #0, #1
 80058f6:	f363 0141 	bfi	r1, r3, #1, #1
 80058fa:	f363 0182 	bfi	r1, r3, #2, #1
 80058fe:	f363 01c5 	bfi	r1, r3, #3, #3
 8005902:	f362 1188 	bfi	r1, r2, #6, #3
 8005906:	2208      	movs	r2, #8
 8005908:	f362 2152 	bfi	r1, r2, #9, #10
 800590c:	f363 41de 	bfi	r1, r3, #19, #12
 8005910:	f363 71df 	bfi	r1, r3, #31, #1
 8005914:	aa19      	add	r2, sp, #100	; 0x64
 8005916:	4857      	ldr	r0, [pc, #348]	; (8005a74 <mem_manage_fault+0x2a4>)
 8005918:	f008 fdb5 	bl	800e486 <z_impl_z_log_msg2_static_create>
 800591c:	e789      	b.n	8005832 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 800591e:	2201      	movs	r2, #1
 8005920:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005924:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <mem_manage_fault+0x2b4>)
 8005926:	9320      	str	r3, [sp, #128]	; 0x80
 8005928:	2300      	movs	r3, #0
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	2102      	movs	r1, #2
 800592e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005932:	9901      	ldr	r1, [sp, #4]
 8005934:	911f      	str	r1, [sp, #124]	; 0x7c
 8005936:	4619      	mov	r1, r3
 8005938:	f363 0100 	bfi	r1, r3, #0, #1
 800593c:	f363 0141 	bfi	r1, r3, #1, #1
 8005940:	f363 0182 	bfi	r1, r3, #2, #1
 8005944:	f363 01c5 	bfi	r1, r3, #3, #3
 8005948:	f362 1188 	bfi	r1, r2, #6, #3
 800594c:	2208      	movs	r2, #8
 800594e:	f362 2152 	bfi	r1, r2, #9, #10
 8005952:	f363 41de 	bfi	r1, r3, #19, #12
 8005956:	f363 71df 	bfi	r1, r3, #31, #1
 800595a:	aa1f      	add	r2, sp, #124	; 0x7c
 800595c:	4845      	ldr	r0, [pc, #276]	; (8005a74 <mem_manage_fault+0x2a4>)
 800595e:	f008 fd92 	bl	800e486 <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 8005962:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <mem_manage_fault+0x2a8>)
 8005964:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f013 0f80 	tst.w	r3, #128	; 0x80
 800596c:	d102      	bne.n	8005974 <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 800596e:	f06f 0715 	mvn.w	r7, #21
 8005972:	e765      	b.n	8005840 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8005974:	2201      	movs	r2, #1
 8005976:	f8ad 2008 	strh.w	r2, [sp, #8]
 800597a:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <mem_manage_fault+0x2b8>)
 800597c:	9326      	str	r3, [sp, #152]	; 0x98
 800597e:	9727      	str	r7, [sp, #156]	; 0x9c
 8005980:	2300      	movs	r3, #0
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	2103      	movs	r1, #3
 8005986:	f88d 1004 	strb.w	r1, [sp, #4]
 800598a:	9901      	ldr	r1, [sp, #4]
 800598c:	9125      	str	r1, [sp, #148]	; 0x94
 800598e:	4619      	mov	r1, r3
 8005990:	f363 0100 	bfi	r1, r3, #0, #1
 8005994:	f363 0141 	bfi	r1, r3, #1, #1
 8005998:	f363 0182 	bfi	r1, r3, #2, #1
 800599c:	f363 01c5 	bfi	r1, r3, #3, #3
 80059a0:	f362 1188 	bfi	r1, r2, #6, #3
 80059a4:	220c      	movs	r2, #12
 80059a6:	f362 2152 	bfi	r1, r2, #9, #10
 80059aa:	f363 41de 	bfi	r1, r3, #19, #12
 80059ae:	f363 71df 	bfi	r1, r3, #31, #1
 80059b2:	aa25      	add	r2, sp, #148	; 0x94
 80059b4:	482f      	ldr	r0, [pc, #188]	; (8005a74 <mem_manage_fault+0x2a4>)
 80059b6:	f008 fd66 	bl	800e486 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	f43f af40 	beq.w	8005840 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80059c0:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <mem_manage_fault+0x2a8>)
 80059c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80059c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c8:	6293      	str	r3, [r2, #40]	; 0x28
 80059ca:	e739      	b.n	8005840 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 80059cc:	2201      	movs	r2, #1
 80059ce:	f8ad 2008 	strh.w	r2, [sp, #8]
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <mem_manage_fault+0x2bc>)
 80059d4:	932c      	str	r3, [sp, #176]	; 0xb0
 80059d6:	2300      	movs	r3, #0
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	2102      	movs	r1, #2
 80059dc:	f88d 1004 	strb.w	r1, [sp, #4]
 80059e0:	9901      	ldr	r1, [sp, #4]
 80059e2:	912b      	str	r1, [sp, #172]	; 0xac
 80059e4:	4619      	mov	r1, r3
 80059e6:	f363 0100 	bfi	r1, r3, #0, #1
 80059ea:	f363 0141 	bfi	r1, r3, #1, #1
 80059ee:	f363 0182 	bfi	r1, r3, #2, #1
 80059f2:	f363 01c5 	bfi	r1, r3, #3, #3
 80059f6:	f362 1188 	bfi	r1, r2, #6, #3
 80059fa:	2208      	movs	r2, #8
 80059fc:	f362 2152 	bfi	r1, r2, #9, #10
 8005a00:	f363 41de 	bfi	r1, r3, #19, #12
 8005a04:	f363 71df 	bfi	r1, r3, #31, #1
 8005a08:	aa2b      	add	r2, sp, #172	; 0xac
 8005a0a:	481a      	ldr	r0, [pc, #104]	; (8005a74 <mem_manage_fault+0x2a4>)
 8005a0c:	f008 fd3b 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005a10:	e71c      	b.n	800584c <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 8005a12:	2201      	movs	r2, #1
 8005a14:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <mem_manage_fault+0x2c0>)
 8005a1a:	9332      	str	r3, [sp, #200]	; 0xc8
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	2102      	movs	r1, #2
 8005a22:	f88d 1004 	strb.w	r1, [sp, #4]
 8005a26:	9901      	ldr	r1, [sp, #4]
 8005a28:	9131      	str	r1, [sp, #196]	; 0xc4
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f363 0100 	bfi	r1, r3, #0, #1
 8005a30:	f363 0141 	bfi	r1, r3, #1, #1
 8005a34:	f363 0182 	bfi	r1, r3, #2, #1
 8005a38:	f363 01c5 	bfi	r1, r3, #3, #3
 8005a3c:	f362 1188 	bfi	r1, r2, #6, #3
 8005a40:	2208      	movs	r2, #8
 8005a42:	f362 2152 	bfi	r1, r2, #9, #10
 8005a46:	f363 41de 	bfi	r1, r3, #19, #12
 8005a4a:	f363 71df 	bfi	r1, r3, #31, #1
 8005a4e:	aa31      	add	r2, sp, #196	; 0xc4
 8005a50:	4808      	ldr	r0, [pc, #32]	; (8005a74 <mem_manage_fault+0x2a4>)
 8005a52:	f008 fd18 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8005a56:	e6ff      	b.n	8005858 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff fb6e 	bl	800513c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8005a60:	4604      	mov	r4, r0
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f43f af08 	beq.w	8005878 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005a68:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8005a6c:	2402      	movs	r4, #2
 8005a6e:	e703      	b.n	8005878 <mem_manage_fault+0xa8>
 8005a70:	080114f4 	.word	0x080114f4
 8005a74:	08010b90 	.word	0x08010b90
 8005a78:	e000ed00 	.word	0xe000ed00
 8005a7c:	0801150c 	.word	0x0801150c
 8005a80:	0801134c 	.word	0x0801134c
 8005a84:	08011540 	.word	0x08011540
 8005a88:	08011558 	.word	0x08011558
 8005a8c:	08011570 	.word	0x08011570
 8005a90:	080113c8 	.word	0x080113c8

08005a94 <hard_fault>:
{
 8005a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a96:	b0a9      	sub	sp, #164	; 0xa4
 8005a98:	4607      	mov	r7, r0
 8005a9a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005aa2:	4a73      	ldr	r2, [pc, #460]	; (8005c70 <hard_fault+0x1dc>)
 8005aa4:	920e      	str	r2, [sp, #56]	; 0x38
 8005aa6:	2400      	movs	r4, #0
 8005aa8:	9401      	str	r4, [sp, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f88d 2004 	strb.w	r2, [sp, #4]
 8005ab0:	9a01      	ldr	r2, [sp, #4]
 8005ab2:	920d      	str	r2, [sp, #52]	; 0x34
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f364 0100 	bfi	r1, r4, #0, #1
 8005aba:	f364 0141 	bfi	r1, r4, #1, #1
 8005abe:	f364 0182 	bfi	r1, r4, #2, #1
 8005ac2:	f364 01c5 	bfi	r1, r4, #3, #3
 8005ac6:	f363 1188 	bfi	r1, r3, #6, #3
 8005aca:	2308      	movs	r3, #8
 8005acc:	f363 2152 	bfi	r1, r3, #9, #10
 8005ad0:	f364 41de 	bfi	r1, r4, #19, #12
 8005ad4:	f364 71df 	bfi	r1, r4, #31, #1
 8005ad8:	4623      	mov	r3, r4
 8005ada:	aa0d      	add	r2, sp, #52	; 0x34
 8005adc:	4865      	ldr	r0, [pc, #404]	; (8005c74 <hard_fault+0x1e0>)
 8005ade:	f008 fcd2 	bl	800e486 <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 8005ae2:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <hard_fault+0x1e4>)
 8005ae6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005ae8:	f015 0502 	ands.w	r5, r5, #2
 8005aec:	d10a      	bne.n	8005b04 <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8005aee:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <hard_fault+0x1e4>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	db2a      	blt.n	8005b4c <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8005af6:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <hard_fault+0x1e4>)
 8005af8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005afa:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8005afe:	d149      	bne.n	8005b94 <hard_fault+0x100>
}
 8005b00:	b029      	add	sp, #164	; 0xa4
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 8005b04:	2301      	movs	r3, #1
 8005b06:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005b0a:	4a5c      	ldr	r2, [pc, #368]	; (8005c7c <hard_fault+0x1e8>)
 8005b0c:	9226      	str	r2, [sp, #152]	; 0x98
 8005b0e:	9401      	str	r4, [sp, #4]
 8005b10:	2202      	movs	r2, #2
 8005b12:	f88d 2004 	strb.w	r2, [sp, #4]
 8005b16:	9a01      	ldr	r2, [sp, #4]
 8005b18:	9225      	str	r2, [sp, #148]	; 0x94
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	f364 0100 	bfi	r1, r4, #0, #1
 8005b20:	f364 0141 	bfi	r1, r4, #1, #1
 8005b24:	f364 0182 	bfi	r1, r4, #2, #1
 8005b28:	f364 01c5 	bfi	r1, r4, #3, #3
 8005b2c:	f363 1188 	bfi	r1, r3, #6, #3
 8005b30:	2308      	movs	r3, #8
 8005b32:	f363 2152 	bfi	r1, r3, #9, #10
 8005b36:	f364 41de 	bfi	r1, r4, #19, #12
 8005b3a:	f364 71df 	bfi	r1, r4, #31, #1
 8005b3e:	4623      	mov	r3, r4
 8005b40:	aa25      	add	r2, sp, #148	; 0x94
 8005b42:	484c      	ldr	r0, [pc, #304]	; (8005c74 <hard_fault+0x1e0>)
 8005b44:	f008 fc9f 	bl	800e486 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005b48:	4620      	mov	r0, r4
 8005b4a:	e7d9      	b.n	8005b00 <hard_fault+0x6c>
		PR_EXC("  Debug event");
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005b52:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <hard_fault+0x1ec>)
 8005b54:	9320      	str	r3, [sp, #128]	; 0x80
 8005b56:	2300      	movs	r3, #0
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005b60:	9901      	ldr	r1, [sp, #4]
 8005b62:	911f      	str	r1, [sp, #124]	; 0x7c
 8005b64:	4619      	mov	r1, r3
 8005b66:	f363 0100 	bfi	r1, r3, #0, #1
 8005b6a:	f363 0141 	bfi	r1, r3, #1, #1
 8005b6e:	f363 0182 	bfi	r1, r3, #2, #1
 8005b72:	f363 01c5 	bfi	r1, r3, #3, #3
 8005b76:	f362 1188 	bfi	r1, r2, #6, #3
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	f362 2152 	bfi	r1, r2, #9, #10
 8005b80:	f363 41de 	bfi	r1, r3, #19, #12
 8005b84:	f363 71df 	bfi	r1, r3, #31, #1
 8005b88:	aa1f      	add	r2, sp, #124	; 0x7c
 8005b8a:	483a      	ldr	r0, [pc, #232]	; (8005c74 <hard_fault+0x1e0>)
 8005b8c:	f008 fc7b 	bl	800e486 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005b90:	4628      	mov	r0, r5
 8005b92:	e7b5      	b.n	8005b00 <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8005b94:	2201      	movs	r2, #1
 8005b96:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <hard_fault+0x1f0>)
 8005b9c:	9314      	str	r3, [sp, #80]	; 0x50
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	f88d 1004 	strb.w	r1, [sp, #4]
 8005ba8:	9901      	ldr	r1, [sp, #4]
 8005baa:	9113      	str	r1, [sp, #76]	; 0x4c
 8005bac:	4619      	mov	r1, r3
 8005bae:	f363 0100 	bfi	r1, r3, #0, #1
 8005bb2:	f363 0141 	bfi	r1, r3, #1, #1
 8005bb6:	f363 0182 	bfi	r1, r3, #2, #1
 8005bba:	f363 01c5 	bfi	r1, r3, #3, #3
 8005bbe:	f362 1188 	bfi	r1, r2, #6, #3
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	f362 2152 	bfi	r1, r2, #9, #10
 8005bc8:	f363 41de 	bfi	r1, r3, #19, #12
 8005bcc:	f363 71df 	bfi	r1, r3, #31, #1
 8005bd0:	aa13      	add	r2, sp, #76	; 0x4c
 8005bd2:	4828      	ldr	r0, [pc, #160]	; (8005c74 <hard_fault+0x1e0>)
 8005bd4:	f008 fc57 	bl	800e486 <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8005bda:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8005bde:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d00d      	beq.n	8005c02 <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <hard_fault+0x1e4>)
 8005be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bec:	bb7b      	cbnz	r3, 8005c4e <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 8005bee:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <hard_fault+0x1e4>)
 8005bf0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bf4:	bb8b      	cbnz	r3, 8005c5a <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <hard_fault+0x1e4>)
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	bb9b      	cbnz	r3, 8005c66 <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005bfe:	4628      	mov	r0, r5
	return reason;
 8005c00:	e77e      	b.n	8005b00 <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <hard_fault+0x1f4>)
 8005c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c10:	2300      	movs	r3, #0
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	2103      	movs	r1, #3
 8005c16:	f88d 1004 	strb.w	r1, [sp, #4]
 8005c1a:	9901      	ldr	r1, [sp, #4]
 8005c1c:	9119      	str	r1, [sp, #100]	; 0x64
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f363 0100 	bfi	r1, r3, #0, #1
 8005c24:	f363 0141 	bfi	r1, r3, #1, #1
 8005c28:	f363 0182 	bfi	r1, r3, #2, #1
 8005c2c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005c30:	f362 1188 	bfi	r1, r2, #6, #3
 8005c34:	220c      	movs	r2, #12
 8005c36:	f362 2152 	bfi	r1, r2, #9, #10
 8005c3a:	f363 41de 	bfi	r1, r3, #19, #12
 8005c3e:	f363 71df 	bfi	r1, r3, #31, #1
 8005c42:	aa19      	add	r2, sp, #100	; 0x64
 8005c44:	480b      	ldr	r0, [pc, #44]	; (8005c74 <hard_fault+0x1e0>)
 8005c46:	f008 fc1e 	bl	800e486 <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 8005c4a:	6838      	ldr	r0, [r7, #0]
 8005c4c:	e758      	b.n	8005b00 <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8005c4e:	4632      	mov	r2, r6
 8005c50:	2101      	movs	r1, #1
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7ff fdbc 	bl	80057d0 <mem_manage_fault>
 8005c58:	e752      	b.n	8005b00 <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff fae8 	bl	8005234 <bus_fault>
 8005c64:	e74c      	b.n	8005b00 <hard_fault+0x6c>
			reason = usage_fault(esf);
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff fc52 	bl	8005510 <usage_fault>
 8005c6c:	e748      	b.n	8005b00 <hard_fault+0x6c>
 8005c6e:	bf00      	nop
 8005c70:	08011590 	.word	0x08011590
 8005c74:	08010b90 	.word	0x08010b90
 8005c78:	e000ed00 	.word	0xe000ed00
 8005c7c:	080115a8 	.word	0x080115a8
 8005c80:	080115cc 	.word	0x080115cc
 8005c84:	080115dc 	.word	0x080115dc
 8005c88:	080115fc 	.word	0x080115fc

08005c8c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8005c90:	4b38      	ldr	r3, [pc, #224]	; (8005d74 <z_arm_fault+0xe8>)
 8005c92:	685d      	ldr	r5, [r3, #4]
 8005c94:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8005ca2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8005ca6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005caa:	d13c      	bne.n	8005d26 <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8005cac:	f002 030c 	and.w	r3, r2, #12
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d010      	beq.n	8005cd6 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8005cb4:	f012 0f08 	tst.w	r2, #8
 8005cb8:	d032      	beq.n	8005d20 <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 8005cba:	460c      	mov	r4, r1
	*nested_exc = false;
 8005cbc:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8005cbe:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f008 fc78 	bl	800e5ba <fault_handle>
 8005cca:	4605      	mov	r5, r0
	if (recoverable) {
 8005ccc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8005cd0:	b363      	cbz	r3, 8005d2c <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8005cd2:	b018      	add	sp, #96	; 0x60
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005cdc:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <z_arm_fault+0xec>)
 8005cde:	9216      	str	r2, [sp, #88]	; 0x58
 8005ce0:	2400      	movs	r4, #0
 8005ce2:	9400      	str	r4, [sp, #0]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f88d 2000 	strb.w	r2, [sp]
 8005cea:	9a00      	ldr	r2, [sp, #0]
 8005cec:	9215      	str	r2, [sp, #84]	; 0x54
 8005cee:	4621      	mov	r1, r4
 8005cf0:	f364 0100 	bfi	r1, r4, #0, #1
 8005cf4:	f364 0141 	bfi	r1, r4, #1, #1
 8005cf8:	f364 0182 	bfi	r1, r4, #2, #1
 8005cfc:	f364 01c5 	bfi	r1, r4, #3, #3
 8005d00:	f363 1188 	bfi	r1, r3, #6, #3
 8005d04:	2308      	movs	r3, #8
 8005d06:	f363 2152 	bfi	r1, r3, #9, #10
 8005d0a:	f364 41de 	bfi	r1, r4, #19, #12
 8005d0e:	f364 71df 	bfi	r1, r4, #31, #1
 8005d12:	4623      	mov	r3, r4
 8005d14:	aa15      	add	r2, sp, #84	; 0x54
 8005d16:	4819      	ldr	r0, [pc, #100]	; (8005d7c <z_arm_fault+0xf0>)
 8005d18:	f008 fbb5 	bl	800e486 <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 8005d1c:	4626      	mov	r6, r4
		return NULL;
 8005d1e:	e7ce      	b.n	8005cbe <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8005d20:	4604      	mov	r4, r0
			*nested_exc = true;
 8005d22:	2601      	movs	r6, #1
 8005d24:	e7cb      	b.n	8005cbe <z_arm_fault+0x32>
	*nested_exc = false;
 8005d26:	2600      	movs	r6, #0
		return NULL;
 8005d28:	4634      	mov	r4, r6
 8005d2a:	e7c8      	b.n	8005cbe <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8005d2c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	6861      	ldr	r1, [r4, #4]
 8005d34:	68a2      	ldr	r2, [r4, #8]
 8005d36:	68e3      	ldr	r3, [r4, #12]
 8005d38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005d3c:	6920      	ldr	r0, [r4, #16]
 8005d3e:	6961      	ldr	r1, [r4, #20]
 8005d40:	69a2      	ldr	r2, [r4, #24]
 8005d42:	69e3      	ldr	r3, [r4, #28]
 8005d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8005d48:	b146      	cbz	r6, 8005d5c <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d4e:	b95a      	cbnz	r2, 8005d68 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8005d50:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8005d54:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8005d58:	9310      	str	r3, [sp, #64]	; 0x40
 8005d5a:	e005      	b.n	8005d68 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d5e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 8005d68:	a909      	add	r1, sp, #36	; 0x24
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f008 fbf8 	bl	800e560 <z_arm_fatal_error>
 8005d70:	e7af      	b.n	8005cd2 <z_arm_fault+0x46>
 8005d72:	bf00      	nop
 8005d74:	e000ed00 	.word	0xe000ed00
 8005d78:	08011618 	.word	0x08011618
 8005d7c:	08010b90 	.word	0x08010b90

08005d80 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005d80:	4a02      	ldr	r2, [pc, #8]	; (8005d8c <z_arm_fault_init+0xc>)
 8005d82:	6953      	ldr	r3, [r2, #20]
 8005d84:	f043 0310 	orr.w	r3, r3, #16
 8005d88:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8005d8a:	4770      	bx	lr
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8005d90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8005d94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8005d98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8005d9a:	4672      	mov	r2, lr
	bl z_arm_fault
 8005d9c:	f7ff ff76 	bl	8005c8c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8005da0:	bd01      	pop	{r0, pc}
 8005da2:	bf00      	nop

08005da4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8005da4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8005da6:	e006      	b.n	8005db6 <z_arm_interrupt_init+0x12>
 8005da8:	f002 010f 	and.w	r1, r2, #15
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <z_arm_interrupt_init+0x30>)
 8005dae:	440b      	add	r3, r1
 8005db0:	2110      	movs	r1, #16
 8005db2:	7619      	strb	r1, [r3, #24]
 8005db4:	3201      	adds	r2, #1
 8005db6:	2a54      	cmp	r2, #84	; 0x54
 8005db8:	dc0a      	bgt.n	8005dd0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8005dba:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dbf3      	blt.n	8005da8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005dc4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005dc8:	2110      	movs	r1, #16
 8005dca:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8005dce:	e7f1      	b.n	8005db4 <z_arm_interrupt_init+0x10>
	}
}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	e000ecfc 	.word	0xe000ecfc

08005dd8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005dd8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8005dda:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8005dde:	4808      	ldr	r0, [pc, #32]	; (8005e00 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8005de0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8005de4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8005de6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8005dea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8005dee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005df0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8005df2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8005df6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8005dfa:	f7ff f907 	bl	800500c <z_arm_prep_c>
 8005dfe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005e00:	200030a0 	.word	0x200030a0

08005e04 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8005e04:	b508      	push	{r3, lr}
	if (_current == thread) {
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <z_impl_k_thread_abort+0x24>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	4283      	cmp	r3, r0
 8005e0c:	d002      	beq.n	8005e14 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8005e0e:	f005 fd6d 	bl	800b8ec <z_thread_abort>
}
 8005e12:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e14:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f8      	beq.n	8005e0e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005e1c:	4a03      	ldr	r2, [pc, #12]	; (8005e2c <z_impl_k_thread_abort+0x28>)
 8005e1e:	6853      	ldr	r3, [r2, #4]
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6053      	str	r3, [r2, #4]
 8005e26:	e7f2      	b.n	8005e0e <z_impl_k_thread_abort+0xa>
 8005e28:	2000134c 	.word	0x2000134c
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8005e30:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <z_arm_configure_static_mpu_regions+0x10>)
 8005e34:	4a03      	ldr	r2, [pc, #12]	; (8005e44 <z_arm_configure_static_mpu_regions+0x14>)
 8005e36:	2101      	movs	r1, #1
 8005e38:	4803      	ldr	r0, [pc, #12]	; (8005e48 <z_arm_configure_static_mpu_regions+0x18>)
 8005e3a:	f008 fc13 	bl	800e664 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8005e3e:	bd08      	pop	{r3, pc}
 8005e40:	20028000 	.word	0x20028000
 8005e44:	20000000 	.word	0x20000000
 8005e48:	08011648 	.word	0x08011648

08005e4c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8005e4c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8005e4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005e50:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8005e52:	4805      	ldr	r0, [pc, #20]	; (8005e68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8005e54:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8005e56:	2320      	movs	r3, #32
 8005e58:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005e5a:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <z_arm_configure_dynamic_mpu_regions+0x20>)
 8005e5c:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8005e5e:	2101      	movs	r1, #1
 8005e60:	f008 fc04 	bl	800e66c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8005e64:	bd08      	pop	{r3, pc}
 8005e66:	bf00      	nop
 8005e68:	20000e80 	.word	0x20000e80
 8005e6c:	150b0000 	.word	0x150b0000

08005e70 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005e70:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <region_init+0x24>)
 8005e72:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005e76:	680b      	ldr	r3, [r1, #0]
 8005e78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8005e7c:	4303      	orrs	r3, r0
 8005e7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005e82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005e86:	688b      	ldr	r3, [r1, #8]
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	e000ed00 	.word	0xe000ed00

08005e98 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	b090      	sub	sp, #64	; 0x40
 8005e9c:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8005e9e:	2807      	cmp	r0, #7
 8005ea0:	d804      	bhi.n	8005eac <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8005ea2:	f7ff ffe5 	bl	8005e70 <region_init>

	return index;
 8005ea6:	4620      	mov	r0, r4
}
 8005ea8:	b010      	add	sp, #64	; 0x40
 8005eaa:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005eac:	2201      	movs	r2, #1
 8005eae:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <region_allocate_and_init+0x60>)
 8005eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8005eb6:	900f      	str	r0, [sp, #60]	; 0x3c
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	2103      	movs	r1, #3
 8005ebe:	f88d 1004 	strb.w	r1, [sp, #4]
 8005ec2:	9901      	ldr	r1, [sp, #4]
 8005ec4:	910d      	str	r1, [sp, #52]	; 0x34
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f363 0100 	bfi	r1, r3, #0, #1
 8005ecc:	f363 0141 	bfi	r1, r3, #1, #1
 8005ed0:	f363 0182 	bfi	r1, r3, #2, #1
 8005ed4:	f363 01c5 	bfi	r1, r3, #3, #3
 8005ed8:	f362 1188 	bfi	r1, r2, #6, #3
 8005edc:	220c      	movs	r2, #12
 8005ede:	f362 2152 	bfi	r1, r2, #9, #10
 8005ee2:	f363 41de 	bfi	r1, r3, #19, #12
 8005ee6:	f363 71df 	bfi	r1, r3, #31, #1
 8005eea:	aa0d      	add	r2, sp, #52	; 0x34
 8005eec:	4803      	ldr	r0, [pc, #12]	; (8005efc <region_allocate_and_init+0x64>)
 8005eee:	f008 faca 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005ef2:	f06f 0015 	mvn.w	r0, #21
 8005ef6:	e7d7      	b.n	8005ea8 <region_allocate_and_init+0x10>
 8005ef8:	08011654 	.word	0x08011654
 8005efc:	08010b88 	.word	0x08010b88

08005f00 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f04:	b091      	sub	sp, #68	; 0x44
 8005f06:	4680      	mov	r8, r0
 8005f08:	460f      	mov	r7, r1
 8005f0a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8005f0c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8005f0e:	2500      	movs	r5, #0
 8005f10:	e009      	b.n	8005f26 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005f12:	4621      	mov	r1, r4
 8005f14:	b2f0      	uxtb	r0, r6
 8005f16:	f008 fb86 	bl	800e626 <mpu_configure_region>
 8005f1a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8005f1c:	f110 0f16 	cmn.w	r0, #22
 8005f20:	d037      	beq.n	8005f92 <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8005f22:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8005f24:	3501      	adds	r5, #1
 8005f26:	42bd      	cmp	r5, r7
 8005f28:	da33      	bge.n	8005f92 <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 8005f2a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8005f2e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	d0f5      	beq.n	8005f24 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8005f38:	f1b9 0f00 	cmp.w	r9, #0
 8005f3c:	d0e9      	beq.n	8005f12 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f008 fb60 	bl	800e604 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1e4      	bne.n	8005f12 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005f4e:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <mpu_configure_regions+0x9c>)
 8005f50:	930e      	str	r3, [sp, #56]	; 0x38
 8005f52:	950f      	str	r5, [sp, #60]	; 0x3c
 8005f54:	2300      	movs	r3, #0
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	2103      	movs	r1, #3
 8005f5a:	f88d 1004 	strb.w	r1, [sp, #4]
 8005f5e:	9901      	ldr	r1, [sp, #4]
 8005f60:	910d      	str	r1, [sp, #52]	; 0x34
 8005f62:	4619      	mov	r1, r3
 8005f64:	f363 0100 	bfi	r1, r3, #0, #1
 8005f68:	f363 0141 	bfi	r1, r3, #1, #1
 8005f6c:	f363 0182 	bfi	r1, r3, #2, #1
 8005f70:	f363 01c5 	bfi	r1, r3, #3, #3
 8005f74:	f362 1188 	bfi	r1, r2, #6, #3
 8005f78:	220c      	movs	r2, #12
 8005f7a:	f362 2152 	bfi	r1, r2, #9, #10
 8005f7e:	f363 41de 	bfi	r1, r3, #19, #12
 8005f82:	f363 71df 	bfi	r1, r3, #31, #1
 8005f86:	aa0d      	add	r2, sp, #52	; 0x34
 8005f88:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <mpu_configure_regions+0xa0>)
 8005f8a:	f008 fa7c 	bl	800e486 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 8005f8e:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8005f92:	4630      	mov	r0, r6
 8005f94:	b011      	add	sp, #68	; 0x44
 8005f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f9a:	bf00      	nop
 8005f9c:	0801167c 	.word	0x0801167c
 8005fa0:	08010b88 	.word	0x08010b88

08005fa4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8005fa4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8005fa6:	4c03      	ldr	r4, [pc, #12]	; (8005fb4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005fa8:	2301      	movs	r3, #1
 8005faa:	7822      	ldrb	r2, [r4, #0]
 8005fac:	f7ff ffa8 	bl	8005f00 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005fb0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	200013ab 	.word	0x200013ab

08005fb8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005fb8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <mpu_configure_dynamic_mpu_regions+0x2c>)
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	f7ff ff9e 	bl	8005f00 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005fc4:	f110 0f16 	cmn.w	r0, #22
 8005fc8:	d00a      	beq.n	8005fe0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8005fca:	4603      	mov	r3, r0
 8005fcc:	e006      	b.n	8005fdc <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8005fce:	4a06      	ldr	r2, [pc, #24]	; (8005fe8 <mpu_configure_dynamic_mpu_regions+0x30>)
 8005fd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8005fda:	3301      	adds	r3, #1
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	ddf6      	ble.n	8005fce <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8005fe0:	bd08      	pop	{r3, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200013ab 	.word	0x200013ab
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8005fec:	4b04      	ldr	r3, [pc, #16]	; (8006000 <arm_core_mpu_enable+0x14>)
 8005fee:	2205      	movs	r2, #5
 8005ff0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ff8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	e000ed00 	.word	0xe000ed00

08006004 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006004:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8006008:	4b02      	ldr	r3, [pc, #8]	; (8006014 <arm_core_mpu_disable+0x10>)
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	e000ed00 	.word	0xe000ed00

08006018 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8006018:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <z_arm_mpu_init+0x3c>)
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	2d08      	cmp	r5, #8
 8006020:	d815      	bhi.n	800604e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8006022:	f7ff ffef 	bl	8006004 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8006026:	2400      	movs	r4, #0
 8006028:	e009      	b.n	800603e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <z_arm_mpu_init+0x3c>)
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006032:	0093      	lsls	r3, r2, #2
 8006034:	4419      	add	r1, r3
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff ff1a 	bl	8005e70 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800603c:	3401      	adds	r4, #1
 800603e:	42a5      	cmp	r5, r4
 8006040:	d8f3      	bhi.n	800602a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <z_arm_mpu_init+0x40>)
 8006044:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8006046:	f7ff ffd1 	bl	8005fec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800604a:	2000      	movs	r0, #0
}
 800604c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800604e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006052:	e7fb      	b.n	800604c <z_arm_mpu_init+0x34>
 8006054:	080116b8 	.word	0x080116b8
 8006058:	200013ab 	.word	0x200013ab

0800605c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <__stdout_hook_install+0x8>)
 800605e:	6018      	str	r0, [r3, #0]
}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000010 	.word	0x20000010

08006068 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4606      	mov	r6, r0
 800606c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 800606e:	2400      	movs	r4, #0
 8006070:	e000      	b.n	8006074 <z_impl_zephyr_read_stdin+0xc>
 8006072:	3401      	adds	r4, #1
 8006074:	42ac      	cmp	r4, r5
 8006076:	da08      	bge.n	800608a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <z_impl_zephyr_read_stdin+0x28>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4798      	blx	r3
 800607e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8006080:	280a      	cmp	r0, #10
 8006082:	d001      	beq.n	8006088 <z_impl_zephyr_read_stdin+0x20>
 8006084:	280d      	cmp	r0, #13
 8006086:	d1f4      	bne.n	8006072 <z_impl_zephyr_read_stdin+0xa>
			i++;
 8006088:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 800608a:	4620      	mov	r0, r4
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	bf00      	nop
 8006090:	2000000c 	.word	0x2000000c

08006094 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	4605      	mov	r5, r0
 8006098:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800609a:	2400      	movs	r4, #0
 800609c:	e004      	b.n	80060a8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <z_impl_zephyr_write_stdout+0x30>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	7830      	ldrb	r0, [r6, #0]
 80060a4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80060a6:	3401      	adds	r4, #1
 80060a8:	42bc      	cmp	r4, r7
 80060aa:	da08      	bge.n	80060be <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 80060ac:	192e      	adds	r6, r5, r4
 80060ae:	5d2b      	ldrb	r3, [r5, r4]
 80060b0:	2b0a      	cmp	r3, #10
 80060b2:	d1f4      	bne.n	800609e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <z_impl_zephyr_write_stdout+0x30>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	200d      	movs	r0, #13
 80060ba:	4798      	blx	r3
 80060bc:	e7ef      	b.n	800609e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 80060be:	4638      	mov	r0, r7
 80060c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010

080060c8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80060c8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 80060ca:	2205      	movs	r2, #5
 80060cc:	4902      	ldr	r1, [pc, #8]	; (80060d8 <_exit+0x10>)
 80060ce:	2001      	movs	r0, #1
 80060d0:	f008 fadd 	bl	800e68e <_write>
	while (1) {
 80060d4:	e7fe      	b.n	80060d4 <_exit+0xc>
 80060d6:	bf00      	nop
 80060d8:	080116a0 	.word	0x080116a0

080060dc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80060dc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <_sbrk+0x24>)
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <_sbrk+0x28>)
 80060e4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80060e6:	440a      	add	r2, r1
 80060e8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80060ec:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d202      	bcs.n	80060fa <_sbrk+0x1e>
		heap_sz += count;
 80060f4:	4b02      	ldr	r3, [pc, #8]	; (8006100 <_sbrk+0x24>)
 80060f6:	601a      	str	r2, [r3, #0]
		ret = ptr;
 80060f8:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 80060fe:	4770      	bx	lr
 8006100:	20000e8c 	.word	0x20000e8c
 8006104:	20003d8a 	.word	0x20003d8a

08006108 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 800610e:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8006110:	e002      	b.n	8006118 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006112:	2201      	movs	r2, #1
 8006114:	e00c      	b.n	8006130 <__stm32_exti_isr+0x28>
 8006116:	3401      	adds	r4, #1
 8006118:	42ac      	cmp	r4, r5
 800611a:	da17      	bge.n	800614c <__stm32_exti_isr+0x44>
	if (line < 32) {
 800611c:	2c1f      	cmp	r4, #31
 800611e:	dcfa      	bgt.n	8006116 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8006120:	2301      	movs	r3, #1
 8006122:	40a3      	lsls	r3, r4
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <__stm32_exti_isr+0x48>)
 8006126:	6952      	ldr	r2, [r2, #20]
 8006128:	ea33 0202 	bics.w	r2, r3, r2
 800612c:	d0f1      	beq.n	8006112 <__stm32_exti_isr+0xa>
 800612e:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8006130:	2a00      	cmp	r2, #0
 8006132:	d0f0      	beq.n	8006116 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <__stm32_exti_isr+0x48>)
 8006136:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8006138:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ea      	beq.n	8006116 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8006140:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8006144:	6851      	ldr	r1, [r2, #4]
 8006146:	4620      	mov	r0, r4
 8006148:	4798      	blx	r3
 800614a:	e7e4      	b.n	8006116 <__stm32_exti_isr+0xe>
		}
	}
}
 800614c:	bd70      	pop	{r4, r5, r6, pc}
 800614e:	bf00      	nop
 8006150:	40010400 	.word	0x40010400

08006154 <stm32_exti_enable>:
{
 8006154:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8006156:	2301      	movs	r3, #1
 8006158:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <stm32_exti_enable+0x18>)
 800615c:	6811      	ldr	r1, [r2, #0]
 800615e:	430b      	orrs	r3, r1
 8006160:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <stm32_exti_enable+0x1c>)
 8006164:	5618      	ldrsb	r0, [r3, r0]
 8006166:	f7fe ff29 	bl	8004fbc <arch_irq_enable>
}
 800616a:	bd08      	pop	{r3, pc}
 800616c:	40010400 	.word	0x40010400
 8006170:	080116f8 	.word	0x080116f8

08006174 <stm32_exti_disable>:
	if (line < 32) {
 8006174:	281f      	cmp	r0, #31
 8006176:	dc06      	bgt.n	8006186 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8006178:	2301      	movs	r3, #1
 800617a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800617c:	4a02      	ldr	r2, [pc, #8]	; (8006188 <stm32_exti_disable+0x14>)
 800617e:	6810      	ldr	r0, [r2, #0]
 8006180:	ea20 0003 	bic.w	r0, r0, r3
 8006184:	6010      	str	r0, [r2, #0]
}
 8006186:	4770      	bx	lr
 8006188:	40010400 	.word	0x40010400

0800618c <stm32_exti_trigger>:
	switch (trigger) {
 800618c:	2903      	cmp	r1, #3
 800618e:	d832      	bhi.n	80061f6 <stm32_exti_trigger+0x6a>
 8006190:	e8df f001 	tbb	[pc, r1]
 8006194:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8006198:	2301      	movs	r3, #1
 800619a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <stm32_exti_trigger+0x6c>)
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	ea22 0200 	bic.w	r2, r2, r0
 80061a6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	ea22 0000 	bic.w	r0, r2, r0
 80061ae:	60d8      	str	r0, [r3, #12]
}
 80061b0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80061b2:	2301      	movs	r3, #1
 80061b4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <stm32_exti_trigger+0x6c>)
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	4302      	orrs	r2, r0
 80061be:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	ea22 0000 	bic.w	r0, r2, r0
 80061c6:	60d8      	str	r0, [r3, #12]
}
 80061c8:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80061ca:	2301      	movs	r3, #1
 80061cc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <stm32_exti_trigger+0x6c>)
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	4302      	orrs	r2, r0
 80061d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	ea22 0000 	bic.w	r0, r2, r0
 80061de:	6098      	str	r0, [r3, #8]
}
 80061e0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80061e2:	2301      	movs	r3, #1
 80061e4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <stm32_exti_trigger+0x6c>)
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	4302      	orrs	r2, r0
 80061ee:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	4310      	orrs	r0, r2
 80061f4:	60d8      	str	r0, [r3, #12]
}
 80061f6:	4770      	bx	lr
 80061f8:	40010400 	.word	0x40010400

080061fc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <stm32_exti_set_callback+0x20>)
 80061fe:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8006202:	b93b      	cbnz	r3, 8006214 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <stm32_exti_set_callback+0x20>)
 8006206:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 800620a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800620e:	6042      	str	r2, [r0, #4]

	return 0;
 8006210:	2000      	movs	r0, #0
 8006212:	4770      	bx	lr
		return -EBUSY;
 8006214:	f06f 000f 	mvn.w	r0, #15
}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000e90 	.word	0x20000e90

08006220 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <stm32_exti_unset_callback+0x10>)
 8006222:	2200      	movs	r2, #0
 8006224:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8006228:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800622c:	605a      	str	r2, [r3, #4]
}
 800622e:	4770      	bx	lr
 8006230:	20000e90 	.word	0x20000e90

08006234 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8006234:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8006236:	680b      	ldr	r3, [r1, #0]
 8006238:	2b06      	cmp	r3, #6
 800623a:	d848      	bhi.n	80062ce <stm32_clock_control_on+0x9a>
 800623c:	e8df f003 	tbb	[pc, r3]
 8006240:	3c261004 	.word	0x3c261004
 8006244:	4731      	.short	0x4731
 8006246:	1b          	.byte	0x1b
 8006247:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8006248:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <stm32_clock_control_on+0xa0>)
 800624c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800624e:	4319      	orrs	r1, r3
 8006250:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8006252:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006254:	4013      	ands	r3, r2
 8006256:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006258:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800625a:	2000      	movs	r0, #0
}
 800625c:	b006      	add	sp, #24
 800625e:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8006260:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <stm32_clock_control_on+0xa0>)
 8006264:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006266:	4319      	orrs	r1, r3
 8006268:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800626a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800626c:	4013      	ands	r3, r2
 800626e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006270:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8006272:	2000      	movs	r0, #0
}
 8006274:	e7f2      	b.n	800625c <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8006276:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <stm32_clock_control_on+0xa0>)
 800627a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800627c:	4319      	orrs	r1, r3
 800627e:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006280:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006282:	4013      	ands	r3, r2
 8006284:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8006286:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8006288:	2000      	movs	r0, #0
}
 800628a:	e7e7      	b.n	800625c <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800628c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800628e:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <stm32_clock_control_on+0xa0>)
 8006290:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8006292:	4319      	orrs	r1, r3
 8006294:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006296:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006298:	4013      	ands	r3, r2
 800629a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800629c:	9b03      	ldr	r3, [sp, #12]
	return 0;
 800629e:	2000      	movs	r0, #0
}
 80062a0:	e7dc      	b.n	800625c <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80062a2:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80062a4:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <stm32_clock_control_on+0xa0>)
 80062a6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80062a8:	4319      	orrs	r1, r3
 80062aa:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80062ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80062ae:	4013      	ands	r3, r2
 80062b0:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80062b2:	9b04      	ldr	r3, [sp, #16]
	return 0;
 80062b4:	2000      	movs	r0, #0
}
 80062b6:	e7d1      	b.n	800625c <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80062b8:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80062ba:	4a06      	ldr	r2, [pc, #24]	; (80062d4 <stm32_clock_control_on+0xa0>)
 80062bc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80062be:	4319      	orrs	r1, r3
 80062c0:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80062c2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80062c4:	4013      	ands	r3, r2
 80062c6:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80062c8:	9b05      	ldr	r3, [sp, #20]
	return 0;
 80062ca:	2000      	movs	r0, #0
}
 80062cc:	e7c6      	b.n	800625c <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 80062ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80062d2:	e7c3      	b.n	800625c <stm32_clock_control_on+0x28>
 80062d4:	40021000 	.word	0x40021000

080062d8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80062d8:	680b      	ldr	r3, [r1, #0]
 80062da:	2b06      	cmp	r3, #6
 80062dc:	d835      	bhi.n	800634a <stm32_clock_control_off+0x72>
 80062de:	e8df f003 	tbb	[pc, r3]
 80062e2:	0c04      	.short	0x0c04
 80062e4:	34242c1c 	.word	0x34242c1c
 80062e8:	14          	.byte	0x14
 80062e9:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80062ea:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <stm32_clock_control_off+0x78>)
 80062ee:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80062f0:	ea23 0301 	bic.w	r3, r3, r1
 80062f4:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80062f6:	2000      	movs	r0, #0
}
 80062f8:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80062fa:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <stm32_clock_control_off+0x78>)
 80062fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006300:	ea23 0301 	bic.w	r3, r3, r1
 8006304:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 8006306:	2000      	movs	r0, #0
}
 8006308:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 800630a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <stm32_clock_control_off+0x78>)
 800630e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006310:	ea23 0301 	bic.w	r3, r3, r1
 8006314:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 8006316:	2000      	movs	r0, #0
}
 8006318:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 800631a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800631c:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <stm32_clock_control_off+0x78>)
 800631e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006320:	ea23 0301 	bic.w	r3, r3, r1
 8006324:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8006326:	2000      	movs	r0, #0
}
 8006328:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 800632a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <stm32_clock_control_off+0x78>)
 800632e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006330:	ea23 0301 	bic.w	r3, r3, r1
 8006334:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8006336:	2000      	movs	r0, #0
}
 8006338:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 800633a:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <stm32_clock_control_off+0x78>)
 800633e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006340:	ea23 0301 	bic.w	r3, r3, r1
 8006344:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8006346:	2000      	movs	r0, #0
}
 8006348:	4770      	bx	lr
	switch (pclken->bus) {
 800634a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800634e:	4770      	bx	lr
 8006350:	40021000 	.word	0x40021000

08006354 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	460c      	mov	r4, r1
 8006358:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <stm32_clock_control_get_subsys_rate+0x3c>)
 800635c:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 800635e:	2101      	movs	r1, #1
 8006360:	4630      	mov	r0, r6
 8006362:	f008 fa22 	bl	800e7aa <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	2b06      	cmp	r3, #6
 800636a:	d80e      	bhi.n	800638a <stm32_clock_control_get_subsys_rate+0x36>
 800636c:	e8df f003 	tbb	[pc, r3]
 8006370:	0a070404 	.word	0x0a070404
 8006374:	0d07      	.short	0x0d07
 8006376:	04          	.byte	0x04
 8006377:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8006378:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800637a:	2000      	movs	r0, #0
}
 800637c:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 800637e:	6028      	str	r0, [r5, #0]
	return 0;
 8006380:	2000      	movs	r0, #0
		break;
 8006382:	e7fb      	b.n	800637c <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8006384:	6028      	str	r0, [r5, #0]
	return 0;
 8006386:	2000      	movs	r0, #0
		break;
 8006388:	e7f8      	b.n	800637c <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800638a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800638e:	e7f5      	b.n	800637c <stm32_clock_control_get_subsys_rate+0x28>
 8006390:	200000c0 	.word	0x200000c0

08006394 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006394:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <stm32_clock_switch_to_hsi+0x44>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800639c:	d109      	bne.n	80063b2 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800639e:	4a0e      	ldr	r2, [pc, #56]	; (80063d8 <stm32_clock_switch_to_hsi+0x44>)
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a6:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <stm32_clock_switch_to_hsi+0x44>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80063b0:	d0fa      	beq.n	80063a8 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <stm32_clock_switch_to_hsi+0x44>)
 80063b4:	6893      	ldr	r3, [r2, #8]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80063c0:	6893      	ldr	r3, [r2, #8]
 80063c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c6:	4318      	orrs	r0, r3
 80063c8:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80063ca:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <stm32_clock_switch_to_hsi+0x44>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d1f9      	bne.n	80063ca <stm32_clock_switch_to_hsi+0x36>
	}
}
 80063d6:	4770      	bx	lr
 80063d8:	40021000 	.word	0x40021000

080063dc <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80063dc:	b510      	push	{r4, lr}
 80063de:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 80063e0:	a803      	add	r0, sp, #12
 80063e2:	f008 f9dd 	bl	800e7a0 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80063e6:	f000 f823 	bl	8006430 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80063ea:	4668      	mov	r0, sp
 80063ec:	f008 f9e0 	bl	800e7b0 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 80063f0:	2000      	movs	r0, #0
 80063f2:	f7ff ffcf 	bl	8006394 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80063f6:	4c0d      	ldr	r4, [pc, #52]	; (800642c <stm32_clock_control_init+0x50>)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fe:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8006400:	68e3      	ldr	r3, [r4, #12]
 8006402:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800640a:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 800640c:	a903      	add	r1, sp, #12
 800640e:	4668      	mov	r0, sp
 8006410:	f003 fea6 	bl	800a160 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8006424:	2000      	movs	r0, #0
 8006426:	b006      	add	sp, #24
 8006428:	bd10      	pop	{r4, pc}
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000

08006430 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8006430:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <config_enable_default_clocks+0x1c>)
 8006434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800643a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800643c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006444:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8006446:	b002      	add	sp, #8
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000

08006450 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8006450:	b510      	push	{r4, lr}
 8006452:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8006454:	280a      	cmp	r0, #10
 8006456:	d007      	beq.n	8006468 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <console_out+0x28>)
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 800645e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4798      	blx	r3

	return c;
}
 8006464:	4620      	mov	r0, r4
 8006466:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <console_out+0x28>)
 800646a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 800646c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	210d      	movs	r1, #13
 8006472:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8006474:	e7f0      	b.n	8006458 <console_out+0x8>
 8006476:	bf00      	nop
 8006478:	20000f10 	.word	0x20000f10

0800647c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 800647c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 800647e:	4c04      	ldr	r4, [pc, #16]	; (8006490 <uart_console_hook_install+0x14>)
 8006480:	4620      	mov	r0, r4
 8006482:	f7ff fdeb 	bl	800605c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 8006486:	4620      	mov	r0, r4
 8006488:	f7fd fac6 	bl	8003a18 <__printk_hook_install>
#endif
}
 800648c:	bd10      	pop	{r4, pc}
 800648e:	bf00      	nop
 8006490:	08006451 	.word	0x08006451

08006494 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8006494:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8006496:	4806      	ldr	r0, [pc, #24]	; (80064b0 <uart_console_init+0x1c>)
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <uart_console_init+0x20>)
 800649a:	6018      	str	r0, [r3, #0]
 800649c:	f009 f9b3 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80064a0:	b118      	cbz	r0, 80064aa <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 80064a2:	f7ff ffeb 	bl	800647c <uart_console_hook_install>

	return 0;
 80064a6:	2000      	movs	r0, #0
}
 80064a8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80064aa:	f06f 0012 	mvn.w	r0, #18
 80064ae:	e7fb      	b.n	80064a8 <uart_console_init+0x14>
 80064b0:	08010840 	.word	0x08010840
 80064b4:	20000f10 	.word	0x20000f10

080064b8 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80064b8:	424a      	negs	r2, r1
 80064ba:	f001 0303 	and.w	r3, r1, #3
 80064be:	f002 0203 	and.w	r2, r2, #3
 80064c2:	bf58      	it	pl
 80064c4:	4253      	negpl	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	009a      	lsls	r2, r3, #2
 80064ca:	230f      	movs	r3, #15
 80064cc:	4093      	lsls	r3, r2
 80064ce:	460a      	mov	r2, r1
 80064d0:	2900      	cmp	r1, #0
 80064d2:	db19      	blt.n	8006508 <gpio_stm32_set_exti_source+0x50>
 80064d4:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80064d8:	fa5f fc83 	uxtb.w	ip, r3
 80064dc:	f10c 0102 	add.w	r1, ip, #2
 80064e0:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <gpio_stm32_set_exti_source+0x58>)
 80064e2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80064e6:	0c1a      	lsrs	r2, r3, #16
 80064e8:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80064f0:	b162      	cbz	r2, 800650c <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 80064f2:	fab2 f282 	clz	r2, r2
 80064f6:	fa00 f202 	lsl.w	r2, r0, r2
 80064fa:	431a      	orrs	r2, r3
 80064fc:	f10c 0c02 	add.w	ip, ip, #2
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <gpio_stm32_set_exti_source+0x58>)
 8006502:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8006506:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006508:	1cca      	adds	r2, r1, #3
 800650a:	e7e3      	b.n	80064d4 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 800650c:	2220      	movs	r2, #32
 800650e:	e7f2      	b.n	80064f6 <gpio_stm32_set_exti_source+0x3e>
 8006510:	40010000 	.word	0x40010000

08006514 <gpio_stm32_get_exti_source>:
 8006514:	4242      	negs	r2, r0
 8006516:	f000 0303 	and.w	r3, r0, #3
 800651a:	f002 0203 	and.w	r2, r2, #3
 800651e:	bf58      	it	pl
 8006520:	4253      	negpl	r3, r2
 8006522:	3304      	adds	r3, #4
 8006524:	009a      	lsls	r2, r3, #2
 8006526:	230f      	movs	r3, #15
 8006528:	4093      	lsls	r3, r2
 800652a:	4602      	mov	r2, r0
 800652c:	2800      	cmp	r0, #0
 800652e:	db10      	blt.n	8006552 <gpio_stm32_get_exti_source+0x3e>
 8006530:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8006534:	b2c3      	uxtb	r3, r0
 8006536:	3302      	adds	r3, #2
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <gpio_stm32_get_exti_source+0x48>)
 800653a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800653e:	0c03      	lsrs	r3, r0, #16
 8006540:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006544:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8006548:	b12b      	cbz	r3, 8006556 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 800654a:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 800654e:	40d8      	lsrs	r0, r3
 8006550:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006552:	1cc2      	adds	r2, r0, #3
 8006554:	e7ec      	b.n	8006530 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8006556:	2320      	movs	r3, #32
 8006558:	e7f9      	b.n	800654e <gpio_stm32_get_exti_source+0x3a>
 800655a:	bf00      	nop
 800655c:	40010000 	.word	0x40010000

08006560 <gpio_stm32_clock_request>:
{
 8006560:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8006562:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8006564:	b169      	cbz	r1, 8006582 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8006566:	340c      	adds	r4, #12
 8006568:	480d      	ldr	r0, [pc, #52]	; (80065a0 <gpio_stm32_clock_request+0x40>)
 800656a:	f009 f94c 	bl	800f806 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800656e:	b128      	cbz	r0, 800657c <gpio_stm32_clock_request+0x1c>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006570:	480b      	ldr	r0, [pc, #44]	; (80065a0 <gpio_stm32_clock_request+0x40>)
 8006572:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4621      	mov	r1, r4
 8006578:	4798      	blx	r3
}
 800657a:	bd10      	pop	{r4, pc}
		return -ENODEV;
 800657c:	f06f 0012 	mvn.w	r0, #18
 8006580:	e7fb      	b.n	800657a <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8006582:	340c      	adds	r4, #12
 8006584:	4806      	ldr	r0, [pc, #24]	; (80065a0 <gpio_stm32_clock_request+0x40>)
 8006586:	f009 f93e 	bl	800f806 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 800658a:	b128      	cbz	r0, 8006598 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 800658c:	4804      	ldr	r0, [pc, #16]	; (80065a0 <gpio_stm32_clock_request+0x40>)
 800658e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4621      	mov	r1, r4
 8006594:	4798      	blx	r3
 8006596:	e7f0      	b.n	800657a <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 8006598:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 800659c:	e7ed      	b.n	800657a <gpio_stm32_clock_request+0x1a>
 800659e:	bf00      	nop
 80065a0:	08010780 	.word	0x08010780

080065a4 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	4606      	mov	r6, r0
 80065aa:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <gpio_stm32_enable_int+0x40>)
 80065ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065b2:	ab02      	add	r3, sp, #8
 80065b4:	e903 0003 	stmdb	r3, {r0, r1}
 80065b8:	480b      	ldr	r0, [pc, #44]	; (80065e8 <gpio_stm32_enable_int+0x44>)
 80065ba:	f009 f924 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80065be:	b148      	cbz	r0, 80065d4 <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 80065c0:	4809      	ldr	r0, [pc, #36]	; (80065e8 <gpio_stm32_enable_int+0x44>)
 80065c2:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4669      	mov	r1, sp
 80065c8:	4798      	blx	r3
 80065ca:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 80065cc:	b12c      	cbz	r4, 80065da <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 80065ce:	4620      	mov	r0, r4
 80065d0:	b002      	add	sp, #8
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 80065d4:	f06f 0412 	mvn.w	r4, #18
 80065d8:	e7f8      	b.n	80065cc <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 80065da:	4629      	mov	r1, r5
 80065dc:	4630      	mov	r0, r6
 80065de:	f7ff ff6b 	bl	80064b8 <gpio_stm32_set_exti_source>
	return 0;
 80065e2:	e7f4      	b.n	80065ce <gpio_stm32_enable_int+0x2a>
 80065e4:	08010c70 	.word	0x08010c70
 80065e8:	08010780 	.word	0x08010780

080065ec <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 80065f2:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80065f4:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 80065f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80065fa:	d01f      	beq.n	800663c <gpio_stm32_pin_interrupt_configure+0x50>
 80065fc:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 80065fe:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006602:	d034      	beq.n	800666e <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006604:	491d      	ldr	r1, [pc, #116]	; (800667c <gpio_stm32_pin_interrupt_configure+0x90>)
 8006606:	4620      	mov	r0, r4
 8006608:	f7ff fdf8 	bl	80061fc <stm32_exti_set_callback>
 800660c:	4606      	mov	r6, r0
 800660e:	bb88      	cbnz	r0, 8006674 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006610:	4621      	mov	r1, r4
 8006612:	68b8      	ldr	r0, [r7, #8]
 8006614:	f7ff ffc6 	bl	80065a4 <gpio_stm32_enable_int>

	switch (trig) {
 8006618:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 800661c:	d023      	beq.n	8006666 <gpio_stm32_pin_interrupt_configure+0x7a>
 800661e:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8006622:	d022      	beq.n	800666a <gpio_stm32_pin_interrupt_configure+0x7e>
 8006624:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8006628:	d01b      	beq.n	8006662 <gpio_stm32_pin_interrupt_configure+0x76>
 800662a:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 800662c:	4620      	mov	r0, r4
 800662e:	f7ff fdad 	bl	800618c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006632:	4620      	mov	r0, r4
 8006634:	f7ff fd8e 	bl	8006154 <stm32_exti_enable>

exit:
	return err;
}
 8006638:	4630      	mov	r0, r6
 800663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff ff69 	bl	8006514 <gpio_stm32_get_exti_source>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4298      	cmp	r0, r3
 8006646:	d001      	beq.n	800664c <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8006648:	2600      	movs	r6, #0
		goto exit;
 800664a:	e7f5      	b.n	8006638 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 800664c:	4620      	mov	r0, r4
 800664e:	f7ff fd91 	bl	8006174 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006652:	4620      	mov	r0, r4
 8006654:	f7ff fde4 	bl	8006220 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006658:	2100      	movs	r1, #0
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fd96 	bl	800618c <stm32_exti_trigger>
 8006660:	e7f2      	b.n	8006648 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8006662:	2102      	movs	r1, #2
 8006664:	e7e2      	b.n	800662c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8006666:	2101      	movs	r1, #1
 8006668:	e7e0      	b.n	800662c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 800666a:	2103      	movs	r1, #3
 800666c:	e7de      	b.n	800662c <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 800666e:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8006672:	e7e1      	b.n	8006638 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8006674:	f06f 060f 	mvn.w	r6, #15
	return err;
 8006678:	e7de      	b.n	8006638 <gpio_stm32_pin_interrupt_configure+0x4c>
 800667a:	bf00      	nop
 800667c:	0800e7c1 	.word	0x0800e7c1

08006680 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	b0a4      	sub	sp, #144	; 0x90
 8006686:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
	const struct pwm_stm32_config *cfg = dev->config;
 800668a:	6846      	ldr	r6, [r0, #4]

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 800668c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 8006690:	f1b9 0f05 	cmp.w	r9, #5
 8006694:	d851      	bhi.n	800673a <pwm_stm32_pin_set+0xba>
 8006696:	4614      	mov	r4, r2
 8006698:	461d      	mov	r5, r3
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 800669a:	429a      	cmp	r2, r3
 800669c:	d373      	bcc.n	8006786 <pwm_stm32_pin_set+0x106>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 800669e:	f8d6 8000 	ldr.w	r8, [r6]
 80066a2:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80066a6:	d003      	beq.n	80066b0 <pwm_stm32_pin_set+0x30>
 80066a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80066ac:	f200 811f 	bhi.w	80068ee <pwm_stm32_pin_set+0x26e>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	channel = ch2ll[pwm - 1u];
 80066b0:	4b90      	ldr	r3, [pc, #576]	; (80068f4 <pwm_stm32_pin_set+0x274>)
 80066b2:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]

	if (period_cycles == 0u) {
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	f000 808a 	beq.w	80067d0 <pwm_stm32_pin_set+0x150>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80066bc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80066c0:	ea37 0303 	bics.w	r3, r7, r3
 80066c4:	f000 808c 	beq.w	80067e0 <pwm_stm32_pin_set+0x160>
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, channel)) {
		LL_TIM_OC_InitTypeDef oc_init;

		LL_TIM_OC_StructInit(&oc_init);
 80066c8:	a802      	add	r0, sp, #8
 80066ca:	f008 fffb 	bl	800f6c4 <LL_TIM_OC_StructInit>

		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 80066ce:	2360      	movs	r3, #96	; 0x60
 80066d0:	9302      	str	r3, [sp, #8]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	9303      	str	r3, [sp, #12]
		oc_init.CompareValue = pulse_cycles;
 80066d6:	9505      	str	r5, [sp, #20]
		oc_init.OCPolarity = get_polarity(flags);
 80066d8:	4650      	mov	r0, sl
 80066da:	f008 fa0b 	bl	800eaf4 <get_polarity>
 80066de:	9006      	str	r0, [sp, #24]
			LL_TIM_SetTriggerInput(cfg->timer, LL_TIM_TS_ITR0);
			LL_TIM_DisableMasterSlaveMode(cfg->timer);
		}
#endif /* CONFIG_PWM_CAPTURE */

		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80066e0:	aa02      	add	r2, sp, #8
 80066e2:	4639      	mov	r1, r7
 80066e4:	6830      	ldr	r0, [r6, #0]
 80066e6:	f008 fff7 	bl	800f6d8 <LL_TIM_OC_Init>
 80066ea:	4601      	mov	r1, r0
 80066ec:	2800      	cmp	r0, #0
 80066ee:	f040 80b6 	bne.w	800685e <pwm_stm32_pin_set+0x1de>
			LOG_ERR("Could not initialize timer channel output");
			return -EIO;
		}

		LL_TIM_EnableARRPreload(cfg->timer);
 80066f2:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80066f4:	6813      	ldr	r3, [r2, #0]
 80066f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fa:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 80066fc:	6833      	ldr	r3, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80066fe:	2f01      	cmp	r7, #1
 8006700:	f000 80d5 	beq.w	80068ae <pwm_stm32_pin_set+0x22e>
 8006704:	2f04      	cmp	r7, #4
 8006706:	f000 80d1 	beq.w	80068ac <pwm_stm32_pin_set+0x22c>
 800670a:	2f10      	cmp	r7, #16
 800670c:	f000 80e5 	beq.w	80068da <pwm_stm32_pin_set+0x25a>
 8006710:	2f40      	cmp	r7, #64	; 0x40
 8006712:	f000 80e4 	beq.w	80068de <pwm_stm32_pin_set+0x25e>
 8006716:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800671a:	f000 80e2 	beq.w	80068e2 <pwm_stm32_pin_set+0x262>
 800671e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006722:	f000 80e0 	beq.w	80068e6 <pwm_stm32_pin_set+0x266>
 8006726:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800672a:	f000 80de 	beq.w	80068ea <pwm_stm32_pin_set+0x26a>
 800672e:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8006732:	f000 80b9 	beq.w	80068a8 <pwm_stm32_pin_set+0x228>
 8006736:	2108      	movs	r1, #8
 8006738:	e0b9      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
		LOG_ERR("Invalid channel (%d)", pwm);
 800673a:	2201      	movs	r2, #1
 800673c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006740:	4b6d      	ldr	r3, [pc, #436]	; (80068f8 <pwm_stm32_pin_set+0x278>)
 8006742:	9322      	str	r3, [sp, #136]	; 0x88
 8006744:	9123      	str	r1, [sp, #140]	; 0x8c
 8006746:	2300      	movs	r3, #0
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	2103      	movs	r1, #3
 800674c:	f88d 1008 	strb.w	r1, [sp, #8]
 8006750:	9902      	ldr	r1, [sp, #8]
 8006752:	9121      	str	r1, [sp, #132]	; 0x84
 8006754:	4619      	mov	r1, r3
 8006756:	f363 0100 	bfi	r1, r3, #0, #1
 800675a:	f363 0141 	bfi	r1, r3, #1, #1
 800675e:	f363 0182 	bfi	r1, r3, #2, #1
 8006762:	f363 01c5 	bfi	r1, r3, #3, #3
 8006766:	f362 1188 	bfi	r1, r2, #6, #3
 800676a:	220c      	movs	r2, #12
 800676c:	f362 2152 	bfi	r1, r2, #9, #10
 8006770:	f363 41de 	bfi	r1, r3, #19, #12
 8006774:	f363 71df 	bfi	r1, r3, #31, #1
 8006778:	aa21      	add	r2, sp, #132	; 0x84
 800677a:	4860      	ldr	r0, [pc, #384]	; (80068fc <pwm_stm32_pin_set+0x27c>)
 800677c:	f007 fe83 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006780:	f06f 0015 	mvn.w	r0, #21
 8006784:	e0a6      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
		LOG_ERR("Invalid combination of pulse and period cycles");
 8006786:	2201      	movs	r2, #1
 8006788:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800678c:	4b5c      	ldr	r3, [pc, #368]	; (8006900 <pwm_stm32_pin_set+0x280>)
 800678e:	931c      	str	r3, [sp, #112]	; 0x70
 8006790:	2300      	movs	r3, #0
 8006792:	9302      	str	r3, [sp, #8]
 8006794:	2102      	movs	r1, #2
 8006796:	f88d 1008 	strb.w	r1, [sp, #8]
 800679a:	9902      	ldr	r1, [sp, #8]
 800679c:	911b      	str	r1, [sp, #108]	; 0x6c
 800679e:	4619      	mov	r1, r3
 80067a0:	f363 0100 	bfi	r1, r3, #0, #1
 80067a4:	f363 0141 	bfi	r1, r3, #1, #1
 80067a8:	f363 0182 	bfi	r1, r3, #2, #1
 80067ac:	f363 01c5 	bfi	r1, r3, #3, #3
 80067b0:	f362 1188 	bfi	r1, r2, #6, #3
 80067b4:	2208      	movs	r2, #8
 80067b6:	f362 2152 	bfi	r1, r2, #9, #10
 80067ba:	f363 41de 	bfi	r1, r3, #19, #12
 80067be:	f363 71df 	bfi	r1, r3, #31, #1
 80067c2:	aa1b      	add	r2, sp, #108	; 0x6c
 80067c4:	484d      	ldr	r0, [pc, #308]	; (80068fc <pwm_stm32_pin_set+0x27c>)
 80067c6:	f007 fe5e 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80067ca:	f06f 0015 	mvn.w	r0, #21
 80067ce:	e081      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
  CLEAR_BIT(TIMx->CCER, Channels);
 80067d0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80067d4:	ea23 0707 	bic.w	r7, r3, r7
 80067d8:	f8c8 7020 	str.w	r7, [r8, #32]
		return 0;
 80067dc:	2000      	movs	r0, #0
 80067de:	e079      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
 80067e0:	4650      	mov	r0, sl
 80067e2:	f008 f987 	bl	800eaf4 <get_polarity>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80067e6:	2f01      	cmp	r7, #1
 80067e8:	d015      	beq.n	8006816 <pwm_stm32_pin_set+0x196>
 80067ea:	2f04      	cmp	r7, #4
 80067ec:	d02b      	beq.n	8006846 <pwm_stm32_pin_set+0x1c6>
 80067ee:	2f10      	cmp	r7, #16
 80067f0:	d02b      	beq.n	800684a <pwm_stm32_pin_set+0x1ca>
 80067f2:	2f40      	cmp	r7, #64	; 0x40
 80067f4:	d02b      	beq.n	800684e <pwm_stm32_pin_set+0x1ce>
 80067f6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80067fa:	d02a      	beq.n	8006852 <pwm_stm32_pin_set+0x1d2>
 80067fc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006800:	d029      	beq.n	8006856 <pwm_stm32_pin_set+0x1d6>
 8006802:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8006806:	d028      	beq.n	800685a <pwm_stm32_pin_set+0x1da>
 8006808:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 800680c:	d001      	beq.n	8006812 <pwm_stm32_pin_set+0x192>
 800680e:	2108      	movs	r1, #8
 8006810:	e002      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 8006812:	2107      	movs	r1, #7
 8006814:	e000      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 8006816:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8006818:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800681c:	4a39      	ldr	r2, [pc, #228]	; (8006904 <pwm_stm32_pin_set+0x284>)
 800681e:	5c51      	ldrb	r1, [r2, r1]
 8006820:	2202      	movs	r2, #2
 8006822:	408a      	lsls	r2, r1
 8006824:	ea23 0302 	bic.w	r3, r3, r2
 8006828:	4088      	lsls	r0, r1
 800682a:	4303      	orrs	r3, r0
 800682c:	f8c8 3020 	str.w	r3, [r8, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8006830:	4b35      	ldr	r3, [pc, #212]	; (8006908 <pwm_stm32_pin_set+0x288>)
 8006832:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8006836:	4629      	mov	r1, r5
 8006838:	6830      	ldr	r0, [r6, #0]
 800683a:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800683c:	6833      	ldr	r3, [r6, #0]
 800683e:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8006840:	62dc      	str	r4, [r3, #44]	; 0x2c
	}

	return 0;
 8006842:	2000      	movs	r0, #0
}
 8006844:	e046      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006846:	2101      	movs	r1, #1
 8006848:	e7e6      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 800684a:	2102      	movs	r1, #2
 800684c:	e7e4      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 800684e:	2103      	movs	r1, #3
 8006850:	e7e2      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 8006852:	2104      	movs	r1, #4
 8006854:	e7e0      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 8006856:	2105      	movs	r1, #5
 8006858:	e7de      	b.n	8006818 <pwm_stm32_pin_set+0x198>
 800685a:	2106      	movs	r1, #6
 800685c:	e7dc      	b.n	8006818 <pwm_stm32_pin_set+0x198>
			LOG_ERR("Could not initialize timer channel output");
 800685e:	2201      	movs	r2, #1
 8006860:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006864:	4b29      	ldr	r3, [pc, #164]	; (800690c <pwm_stm32_pin_set+0x28c>)
 8006866:	9316      	str	r3, [sp, #88]	; 0x58
 8006868:	2300      	movs	r3, #0
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	2102      	movs	r1, #2
 800686e:	f88d 1004 	strb.w	r1, [sp, #4]
 8006872:	9901      	ldr	r1, [sp, #4]
 8006874:	9115      	str	r1, [sp, #84]	; 0x54
 8006876:	4619      	mov	r1, r3
 8006878:	f363 0100 	bfi	r1, r3, #0, #1
 800687c:	f363 0141 	bfi	r1, r3, #1, #1
 8006880:	f363 0182 	bfi	r1, r3, #2, #1
 8006884:	f363 01c5 	bfi	r1, r3, #3, #3
 8006888:	f362 1188 	bfi	r1, r2, #6, #3
 800688c:	2208      	movs	r2, #8
 800688e:	f362 2152 	bfi	r1, r2, #9, #10
 8006892:	f363 41de 	bfi	r1, r3, #19, #12
 8006896:	f363 71df 	bfi	r1, r3, #31, #1
 800689a:	aa15      	add	r2, sp, #84	; 0x54
 800689c:	4817      	ldr	r0, [pc, #92]	; (80068fc <pwm_stm32_pin_set+0x27c>)
 800689e:	f007 fdf2 	bl	800e486 <z_impl_z_log_msg2_static_create>
			return -EIO;
 80068a2:	f06f 0004 	mvn.w	r0, #4
 80068a6:	e015      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80068a8:	2107      	movs	r1, #7
 80068aa:	e000      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
 80068ac:	2101      	movs	r1, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80068ae:	3318      	adds	r3, #24
 80068b0:	4a17      	ldr	r2, [pc, #92]	; (8006910 <pwm_stm32_pin_set+0x290>)
 80068b2:	5c50      	ldrb	r0, [r2, r1]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068b4:	581a      	ldr	r2, [r3, r0]
 80068b6:	4d17      	ldr	r5, [pc, #92]	; (8006914 <pwm_stm32_pin_set+0x294>)
 80068b8:	5c6d      	ldrb	r5, [r5, r1]
 80068ba:	2108      	movs	r1, #8
 80068bc:	40a9      	lsls	r1, r5
 80068be:	430a      	orrs	r2, r1
 80068c0:	501a      	str	r2, [r3, r0]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80068c2:	6833      	ldr	r3, [r6, #0]
 80068c4:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80068c6:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 80068c8:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80068ca:	6953      	ldr	r3, [r2, #20]
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	6153      	str	r3, [r2, #20]
	return 0;
 80068d2:	2000      	movs	r0, #0
}
 80068d4:	b024      	add	sp, #144	; 0x90
 80068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80068da:	2102      	movs	r1, #2
 80068dc:	e7e7      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
 80068de:	2103      	movs	r1, #3
 80068e0:	e7e5      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
 80068e2:	2104      	movs	r1, #4
 80068e4:	e7e3      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
 80068e6:	2105      	movs	r1, #5
 80068e8:	e7e1      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
 80068ea:	2106      	movs	r1, #6
 80068ec:	e7df      	b.n	80068ae <pwm_stm32_pin_set+0x22e>
		return -ENOTSUP;
 80068ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80068f2:	e7ef      	b.n	80068d4 <pwm_stm32_pin_set+0x254>
 80068f4:	08011928 	.word	0x08011928
 80068f8:	080117dc 	.word	0x080117dc
 80068fc:	08010b98 	.word	0x08010b98
 8006900:	080117f4 	.word	0x080117f4
 8006904:	080118f0 	.word	0x080118f0
 8006908:	0801195c 	.word	0x0801195c
 800690c:	08011824 	.word	0x08011824
 8006910:	080118e4 	.word	0x080118e4
 8006914:	080118fc 	.word	0x080118fc

08006918 <get_tim_clk>:
{
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	b083      	sub	sp, #12
 800691c:	4604      	mov	r4, r0
 800691e:	460d      	mov	r5, r1
 8006920:	480c      	ldr	r0, [pc, #48]	; (8006954 <get_tim_clk+0x3c>)
 8006922:	f008 ff70 	bl	800f806 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8006926:	b170      	cbz	r0, 8006946 <get_tim_clk+0x2e>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <get_tim_clk+0x3c>)
 800692a:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	b16b      	cbz	r3, 800694c <get_tim_clk+0x34>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8006930:	aa01      	add	r2, sp, #4
 8006932:	4621      	mov	r1, r4
 8006934:	4807      	ldr	r0, [pc, #28]	; (8006954 <get_tim_clk+0x3c>)
 8006936:	4798      	blx	r3
	if (r < 0) {
 8006938:	2800      	cmp	r0, #0
 800693a:	db02      	blt.n	8006942 <get_tim_clk+0x2a>
		*tim_clk = bus_clk;
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	602b      	str	r3, [r5, #0]
	return 0;
 8006940:	2000      	movs	r0, #0
}
 8006942:	b003      	add	sp, #12
 8006944:	bd30      	pop	{r4, r5, pc}
		return -ENODEV;
 8006946:	f06f 0012 	mvn.w	r0, #18
 800694a:	e7f5      	b.n	8006938 <get_tim_clk+0x20>
		return -ENOSYS;
 800694c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006950:	e7f2      	b.n	8006938 <get_tim_clk+0x20>
 8006952:	bf00      	nop
 8006954:	08010780 	.word	0x08010780

08006958 <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8006958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800695a:	b0a7      	sub	sp, #156	; 0x9c
	struct pwm_stm32_data *data = dev->data;
 800695c:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 800695e:	6845      	ldr	r5, [r0, #4]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 8006960:	f105 0608 	add.w	r6, r5, #8
 8006964:	4870      	ldr	r0, [pc, #448]	; (8006b28 <pwm_stm32_init+0x1d0>)
 8006966:	f008 ff4e 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800696a:	2800      	cmp	r0, #0
 800696c:	d047      	beq.n	80069fe <pwm_stm32_init+0xa6>
	const struct clock_control_driver_api *api =
 800696e:	486e      	ldr	r0, [pc, #440]	; (8006b28 <pwm_stm32_init+0x1d0>)
 8006970:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4631      	mov	r1, r6
 8006976:	4798      	blx	r3
 8006978:	4604      	mov	r4, r0
	if (r < 0) {
 800697a:	2c00      	cmp	r4, #0
 800697c:	db42      	blt.n	8006a04 <pwm_stm32_init+0xac>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
 800697e:	4639      	mov	r1, r7
 8006980:	4630      	mov	r0, r6
 8006982:	f7ff ffc9 	bl	8006918 <get_tim_clk>
	if (r < 0) {
 8006986:	1e04      	subs	r4, r0, #0
 8006988:	db60      	blt.n	8006a4c <pwm_stm32_init+0xf4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 800698a:	aa01      	add	r2, sp, #4
 800698c:	2100      	movs	r1, #0
 800698e:	6928      	ldr	r0, [r5, #16]
 8006990:	f008 fe4b 	bl	800f62a <pinctrl_lookup_state>
	if (ret < 0) {
 8006994:	1e04      	subs	r4, r0, #0
 8006996:	db06      	blt.n	80069a6 <pwm_stm32_init+0x4e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8006998:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800699a:	2200      	movs	r2, #0
 800699c:	7919      	ldrb	r1, [r3, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	f008 fe5d 	bl	800f65e <pinctrl_configure_pins>
 80069a4:	4604      	mov	r4, r0
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 80069a6:	2c00      	cmp	r4, #0
 80069a8:	db74      	blt.n	8006a94 <pwm_stm32_init+0x13c>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 80069aa:	a809      	add	r0, sp, #36	; 0x24
 80069ac:	f008 fe81 	bl	800f6b2 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 80069b0:	686b      	ldr	r3, [r5, #4]
 80069b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 80069b6:	2300      	movs	r3, #0
 80069b8:	930a      	str	r3, [sp, #40]	; 0x28
	init.Autoreload = 0u;
 80069ba:	930b      	str	r3, [sp, #44]	; 0x2c
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80069bc:	930c      	str	r3, [sp, #48]	; 0x30

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 80069be:	a909      	add	r1, sp, #36	; 0x24
 80069c0:	6828      	ldr	r0, [r5, #0]
 80069c2:	f003 fab5 	bl	8009f30 <LL_TIM_Init>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 8088 	bne.w	8006adc <pwm_stm32_init+0x184>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	4a57      	ldr	r2, [pc, #348]	; (8006b2c <pwm_stm32_init+0x1d4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <pwm_stm32_init+0x8c>
 80069d4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <pwm_stm32_init+0x8c>
 80069dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <pwm_stm32_init+0x94>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80069e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
		LL_TIM_EnableAllOutputs(cfg->timer);
	}
#endif

	LL_TIM_EnableCounter(cfg->timer);
 80069ec:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	6013      	str	r3, [r2, #0]

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 80069f6:	2400      	movs	r4, #0
}
 80069f8:	4620      	mov	r0, r4
 80069fa:	b027      	add	sp, #156	; 0x9c
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 80069fe:	f06f 0412 	mvn.w	r4, #18
 8006a02:	e7ba      	b.n	800697a <pwm_stm32_init+0x22>
		LOG_ERR("Could not initialize clock (%d)", r);
 8006a04:	2201      	movs	r2, #1
 8006a06:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006a0a:	4b49      	ldr	r3, [pc, #292]	; (8006b30 <pwm_stm32_init+0x1d8>)
 8006a0c:	9324      	str	r3, [sp, #144]	; 0x90
 8006a0e:	9425      	str	r4, [sp, #148]	; 0x94
 8006a10:	2300      	movs	r3, #0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2103      	movs	r1, #3
 8006a16:	f88d 1000 	strb.w	r1, [sp]
 8006a1a:	9900      	ldr	r1, [sp, #0]
 8006a1c:	9123      	str	r1, [sp, #140]	; 0x8c
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f363 0100 	bfi	r1, r3, #0, #1
 8006a24:	f363 0141 	bfi	r1, r3, #1, #1
 8006a28:	f363 0182 	bfi	r1, r3, #2, #1
 8006a2c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006a30:	f362 1188 	bfi	r1, r2, #6, #3
 8006a34:	220c      	movs	r2, #12
 8006a36:	f362 2152 	bfi	r1, r2, #9, #10
 8006a3a:	f363 41de 	bfi	r1, r3, #19, #12
 8006a3e:	f363 71df 	bfi	r1, r3, #31, #1
 8006a42:	aa23      	add	r2, sp, #140	; 0x8c
 8006a44:	483b      	ldr	r0, [pc, #236]	; (8006b34 <pwm_stm32_init+0x1dc>)
 8006a46:	f007 fd1e 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return r;
 8006a4a:	e7d5      	b.n	80069f8 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006a52:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <pwm_stm32_init+0x1e0>)
 8006a54:	931e      	str	r3, [sp, #120]	; 0x78
 8006a56:	941f      	str	r4, [sp, #124]	; 0x7c
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2103      	movs	r1, #3
 8006a5e:	f88d 1000 	strb.w	r1, [sp]
 8006a62:	9900      	ldr	r1, [sp, #0]
 8006a64:	911d      	str	r1, [sp, #116]	; 0x74
 8006a66:	4619      	mov	r1, r3
 8006a68:	f363 0100 	bfi	r1, r3, #0, #1
 8006a6c:	f363 0141 	bfi	r1, r3, #1, #1
 8006a70:	f363 0182 	bfi	r1, r3, #2, #1
 8006a74:	f363 01c5 	bfi	r1, r3, #3, #3
 8006a78:	f362 1188 	bfi	r1, r2, #6, #3
 8006a7c:	220c      	movs	r2, #12
 8006a7e:	f362 2152 	bfi	r1, r2, #9, #10
 8006a82:	f363 41de 	bfi	r1, r3, #19, #12
 8006a86:	f363 71df 	bfi	r1, r3, #31, #1
 8006a8a:	aa1d      	add	r2, sp, #116	; 0x74
 8006a8c:	4829      	ldr	r0, [pc, #164]	; (8006b34 <pwm_stm32_init+0x1dc>)
 8006a8e:	f007 fcfa 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return r;
 8006a92:	e7b1      	b.n	80069f8 <pwm_stm32_init+0xa0>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 8006a94:	2201      	movs	r2, #1
 8006a96:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <pwm_stm32_init+0x1e4>)
 8006a9c:	9318      	str	r3, [sp, #96]	; 0x60
 8006a9e:	9419      	str	r4, [sp, #100]	; 0x64
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	2103      	movs	r1, #3
 8006aa6:	f88d 1000 	strb.w	r1, [sp]
 8006aaa:	9900      	ldr	r1, [sp, #0]
 8006aac:	9117      	str	r1, [sp, #92]	; 0x5c
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f363 0100 	bfi	r1, r3, #0, #1
 8006ab4:	f363 0141 	bfi	r1, r3, #1, #1
 8006ab8:	f363 0182 	bfi	r1, r3, #2, #1
 8006abc:	f363 01c5 	bfi	r1, r3, #3, #3
 8006ac0:	f362 1188 	bfi	r1, r2, #6, #3
 8006ac4:	220c      	movs	r2, #12
 8006ac6:	f362 2152 	bfi	r1, r2, #9, #10
 8006aca:	f363 41de 	bfi	r1, r3, #19, #12
 8006ace:	f363 71df 	bfi	r1, r3, #31, #1
 8006ad2:	aa17      	add	r2, sp, #92	; 0x5c
 8006ad4:	4817      	ldr	r0, [pc, #92]	; (8006b34 <pwm_stm32_init+0x1dc>)
 8006ad6:	f007 fcd6 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return r;
 8006ada:	e78d      	b.n	80069f8 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not initialize timer");
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <pwm_stm32_init+0x1e8>)
 8006ae4:	9312      	str	r3, [sp, #72]	; 0x48
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	2102      	movs	r1, #2
 8006aec:	f88d 1000 	strb.w	r1, [sp]
 8006af0:	9900      	ldr	r1, [sp, #0]
 8006af2:	9111      	str	r1, [sp, #68]	; 0x44
 8006af4:	4619      	mov	r1, r3
 8006af6:	f363 0100 	bfi	r1, r3, #0, #1
 8006afa:	f363 0141 	bfi	r1, r3, #1, #1
 8006afe:	f363 0182 	bfi	r1, r3, #2, #1
 8006b02:	f363 01c5 	bfi	r1, r3, #3, #3
 8006b06:	f362 1188 	bfi	r1, r2, #6, #3
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	f362 2152 	bfi	r1, r2, #9, #10
 8006b10:	f363 41de 	bfi	r1, r3, #19, #12
 8006b14:	f363 71df 	bfi	r1, r3, #31, #1
 8006b18:	aa11      	add	r2, sp, #68	; 0x44
 8006b1a:	4806      	ldr	r0, [pc, #24]	; (8006b34 <pwm_stm32_init+0x1dc>)
 8006b1c:	f007 fcb3 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006b20:	f06f 0404 	mvn.w	r4, #4
 8006b24:	e768      	b.n	80069f8 <pwm_stm32_init+0xa0>
 8006b26:	bf00      	nop
 8006b28:	08010780 	.word	0x08010780
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	08011850 	.word	0x08011850
 8006b34:	08010b98 	.word	0x08010b98
 8006b38:	08011870 	.word	0x08011870
 8006b3c:	08011894 	.word	0x08011894
 8006b40:	080118b4 	.word	0x080118b4

08006b44 <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8006b44:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 8006b46:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 8006b4a:	d101      	bne.n	8006b50 <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 8006b4c:	2000      	movs	r0, #0
}
 8006b4e:	4770      	bx	lr
{
 8006b50:	b510      	push	{r4, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <spi_stm32_get_err+0x48>)
 8006b5a:	9302      	str	r3, [sp, #8]
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <spi_stm32_get_err+0x4c>)
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	2000      	movs	r0, #0
 8006b62:	9000      	str	r0, [sp, #0]
 8006b64:	4603      	mov	r3, r0
 8006b66:	2201      	movs	r2, #1
 8006b68:	490a      	ldr	r1, [pc, #40]	; (8006b94 <spi_stm32_get_err+0x50>)
 8006b6a:	f007 ffdf 	bl	800eb2c <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b74:	d005      	beq.n	8006b82 <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006b7a:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006b80:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8006b82:	f06f 0004 	mvn.w	r0, #4
}
 8006b86:	b006      	add	sp, #24
 8006b88:	bd10      	pop	{r4, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08011a7c 	.word	0x08011a7c
 8006b90:	08011974 	.word	0x08011974
 8006b94:	08010bb0 	.word	0x08010bb0

08006b98 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	b098      	sub	sp, #96	; 0x60
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 8006ba2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006ba6:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8006ba8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006bac:	f8df c298 	ldr.w	ip, [pc, #664]	; 8006e48 <spi_stm32_configure+0x2b0>
 8006bb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8006bbe:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8006bc2:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	f000 8139 	beq.w	8006e3c <spi_stm32_configure+0x2a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8006bca:	88ab      	ldrh	r3, [r5, #4]
 8006bcc:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8006bd0:	2a08      	cmp	r2, #8
 8006bd2:	d002      	beq.n	8006bda <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8006bd4:	2a10      	cmp	r2, #16
 8006bd6:	f040 8133 	bne.w	8006e40 <spi_stm32_configure+0x2a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8006bda:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006bde:	d11c      	bne.n	8006c1a <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	f023 0310 	bic.w	r3, r3, #16
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	4898      	ldr	r0, [pc, #608]	; (8006e4c <spi_stm32_configure+0x2b4>)
 8006bea:	f008 fe0c 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006bee:	b1c8      	cbz	r0, 8006c24 <spi_stm32_configure+0x8c>
	const struct clock_control_driver_api *api =
 8006bf0:	4b96      	ldr	r3, [pc, #600]	; (8006e4c <spi_stm32_configure+0x2b4>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
	if (api->get_rate == NULL) {
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	b1c3      	cbz	r3, 8006c2a <spi_stm32_configure+0x92>
	return api->get_rate(dev, sys, rate);
 8006bf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	4893      	ldr	r0, [pc, #588]	; (8006e4c <spi_stm32_configure+0x2b4>)
 8006c00:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006c02:	2800      	cmp	r0, #0
 8006c04:	db14      	blt.n	8006c30 <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006c06:	2301      	movs	r3, #1
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	dc35      	bgt.n	8006c78 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 8006c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0e:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	4291      	cmp	r1, r2
 8006c14:	d230      	bcs.n	8006c78 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006c16:	3301      	adds	r3, #1
 8006c18:	e7f6      	b.n	8006c08 <spi_stm32_configure+0x70>
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	f043 0310 	orr.w	r3, r3, #16
 8006c20:	6063      	str	r3, [r4, #4]
}
 8006c22:	e7e1      	b.n	8006be8 <spi_stm32_configure+0x50>
		return -ENODEV;
 8006c24:	f06f 0012 	mvn.w	r0, #18
 8006c28:	e7eb      	b.n	8006c02 <spi_stm32_configure+0x6a>
		return -ENOSYS;
 8006c2a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006c2e:	e7e8      	b.n	8006c02 <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 8006c30:	2201      	movs	r2, #1
 8006c32:	80ba      	strh	r2, [r7, #4]
 8006c34:	4b86      	ldr	r3, [pc, #536]	; (8006e50 <spi_stm32_configure+0x2b8>)
 8006c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c38:	2300      	movs	r3, #0
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	7039      	strb	r1, [r7, #0]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6579      	str	r1, [r7, #84]	; 0x54
 8006c44:	4619      	mov	r1, r3
 8006c46:	f363 0100 	bfi	r1, r3, #0, #1
 8006c4a:	f363 0141 	bfi	r1, r3, #1, #1
 8006c4e:	f363 0182 	bfi	r1, r3, #2, #1
 8006c52:	f363 01c5 	bfi	r1, r3, #3, #3
 8006c56:	f362 1188 	bfi	r1, r2, #6, #3
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	f362 2152 	bfi	r1, r2, #9, #10
 8006c60:	f363 41de 	bfi	r1, r3, #19, #12
 8006c64:	f363 71df 	bfi	r1, r3, #31, #1
 8006c68:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006c6c:	4879      	ldr	r0, [pc, #484]	; (8006e54 <spi_stm32_configure+0x2bc>)
 8006c6e:	f007 fc0a 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006c72:	f06f 0004 	mvn.w	r0, #4
 8006c76:	e059      	b.n	8006d2c <spi_stm32_configure+0x194>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	dc5b      	bgt.n	8006d34 <spi_stm32_configure+0x19c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c8e:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8006c9c:	88ab      	ldrh	r3, [r5, #4]
 8006c9e:	f013 0f02 	tst.w	r3, #2
 8006ca2:	f000 8098 	beq.w	8006dd6 <spi_stm32_configure+0x23e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8006cae:	88ab      	ldrh	r3, [r5, #4]
 8006cb0:	f013 0f04 	tst.w	r3, #4
 8006cb4:	f000 8094 	beq.w	8006de0 <spi_stm32_configure+0x248>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8006cc6:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8006cc8:	88ab      	ldrh	r3, [r5, #4]
 8006cca:	f013 0f10 	tst.w	r3, #16
 8006cce:	f000 808c 	beq.w	8006dea <spi_stm32_configure+0x252>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd8:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ce0:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8006ce2:	68ab      	ldr	r3, [r5, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8085 	beq.w	8006df4 <spi_stm32_configure+0x25c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cf0:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	f023 0304 	bic.w	r3, r3, #4
 8006cf8:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006cfa:	88ab      	ldrh	r3, [r5, #4]
 8006cfc:	f013 0f01 	tst.w	r3, #1
 8006d00:	f000 8090 	beq.w	8006e24 <spi_stm32_configure+0x28c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8006d0a:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006d0c:	88ab      	ldrh	r3, [r5, #4]
 8006d0e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	f000 808b 	beq.w	8006e2e <spi_stm32_configure+0x296>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8006d1e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d26:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8006d28:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8006d2a:	2000      	movs	r0, #0
}
 8006d2c:	3760      	adds	r7, #96	; 0x60
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006d34:	2301      	movs	r3, #1
 8006d36:	80bb      	strh	r3, [r7, #4]
 8006d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d3a:	fa20 f603 	lsr.w	r6, r0, r3
 8006d3e:	0a00      	lsrs	r0, r0, #8
 8006d40:	466c      	mov	r4, sp
 8006d42:	b088      	sub	sp, #32
 8006d44:	466b      	mov	r3, sp
 8006d46:	f113 020c 	adds.w	r2, r3, #12
 8006d4a:	d03e      	beq.n	8006dca <spi_stm32_configure+0x232>
 8006d4c:	2114      	movs	r1, #20
 8006d4e:	f04f 0c01 	mov.w	ip, #1
 8006d52:	f8a7 c004 	strh.w	ip, [r7, #4]
 8006d56:	b12a      	cbz	r2, 8006d64 <spi_stm32_configure+0x1cc>
 8006d58:	2904      	cmp	r1, #4
 8006d5a:	dd03      	ble.n	8006d64 <spi_stm32_configure+0x1cc>
 8006d5c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006e58 <spi_stm32_configure+0x2c0>
 8006d60:	f8c3 c010 	str.w	ip, [r3, #16]
 8006d64:	682d      	ldr	r5, [r5, #0]
 8006d66:	b112      	cbz	r2, 8006d6e <spi_stm32_configure+0x1d6>
 8006d68:	2908      	cmp	r1, #8
 8006d6a:	dd00      	ble.n	8006d6e <spi_stm32_configure+0x1d6>
 8006d6c:	615d      	str	r5, [r3, #20]
 8006d6e:	b112      	cbz	r2, 8006d76 <spi_stm32_configure+0x1de>
 8006d70:	290c      	cmp	r1, #12
 8006d72:	dd00      	ble.n	8006d76 <spi_stm32_configure+0x1de>
 8006d74:	619e      	str	r6, [r3, #24]
 8006d76:	b112      	cbz	r2, 8006d7e <spi_stm32_configure+0x1e6>
 8006d78:	2910      	cmp	r1, #16
 8006d7a:	dd00      	ble.n	8006d7e <spi_stm32_configure+0x1e6>
 8006d7c:	61d8      	str	r0, [r3, #28]
 8006d7e:	2913      	cmp	r1, #19
 8006d80:	dd26      	ble.n	8006dd0 <spi_stm32_configure+0x238>
 8006d82:	2014      	movs	r0, #20
 8006d84:	b12a      	cbz	r2, 8006d92 <spi_stm32_configure+0x1fa>
 8006d86:	2100      	movs	r1, #0
 8006d88:	6039      	str	r1, [r7, #0]
 8006d8a:	2105      	movs	r1, #5
 8006d8c:	7039      	strb	r1, [r7, #0]
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	60d9      	str	r1, [r3, #12]
 8006d92:	2100      	movs	r1, #0
 8006d94:	f36f 0100 	bfc	r1, #0, #1
 8006d98:	f36f 0141 	bfc	r1, #1, #1
 8006d9c:	f36f 0182 	bfc	r1, #2, #1
 8006da0:	f36f 01c5 	bfc	r1, #3, #3
 8006da4:	2301      	movs	r3, #1
 8006da6:	f363 1188 	bfi	r1, r3, #6, #3
 8006daa:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 8006dae:	f360 2152 	bfi	r1, r0, #9, #10
 8006db2:	f36f 41de 	bfc	r1, #19, #12
 8006db6:	f36f 71df 	bfc	r1, #31, #1
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4825      	ldr	r0, [pc, #148]	; (8006e54 <spi_stm32_configure+0x2bc>)
 8006dbe:	f007 fb62 	bl	800e486 <z_impl_z_log_msg2_static_create>
 8006dc2:	46a5      	mov	sp, r4
		return -EINVAL;
 8006dc4:	f06f 0015 	mvn.w	r0, #21
 8006dc8:	e7b0      	b.n	8006d2c <spi_stm32_configure+0x194>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dce:	e7be      	b.n	8006d4e <spi_stm32_configure+0x1b6>
 8006dd0:	f06f 001b 	mvn.w	r0, #27
 8006dd4:	e7d6      	b.n	8006d84 <spi_stm32_configure+0x1ec>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f023 0302 	bic.w	r3, r3, #2
 8006ddc:	6023      	str	r3, [r4, #0]
}
 8006dde:	e766      	b.n	8006cae <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	6023      	str	r3, [r4, #0]
}
 8006de8:	e76a      	b.n	8006cc0 <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df0:	6023      	str	r3, [r4, #0]
}
 8006df2:	e772      	b.n	8006cda <spi_stm32_configure+0x142>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8006df4:	88ab      	ldrh	r3, [r5, #4]
 8006df6:	f013 0f01 	tst.w	r3, #1
 8006dfa:	d008      	beq.n	8006e0e <spi_stm32_configure+0x276>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e02:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	f023 0304 	bic.w	r3, r3, #4
 8006e0a:	6063      	str	r3, [r4, #4]
}
 8006e0c:	e775      	b.n	8006cfa <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	f043 0304 	orr.w	r3, r3, #4
 8006e20:	6063      	str	r3, [r4, #4]
}
 8006e22:	e76a      	b.n	8006cfa <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8006e2a:	6023      	str	r3, [r4, #0]
}
 8006e2c:	e76e      	b.n	8006d0c <spi_stm32_configure+0x174>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e38:	6063      	str	r3, [r4, #4]
}
 8006e3a:	e771      	b.n	8006d20 <spi_stm32_configure+0x188>
		return 0;
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e775      	b.n	8006d2c <spi_stm32_configure+0x194>
		return -ENOTSUP;
 8006e40:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006e44:	e772      	b.n	8006d2c <spi_stm32_configure+0x194>
 8006e46:	bf00      	nop
 8006e48:	08010c78 	.word	0x08010c78
 8006e4c:	08010780 	.word	0x08010780
 8006e50:	08011980 	.word	0x08011980
 8006e54:	08010bb0 	.word	0x08010bb0
 8006e58:	080119a4 	.word	0x080119a4

08006e5c <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8006e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e60:	b09b      	sub	sp, #108	; 0x6c
 8006e62:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8006e64:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8006e66:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006e6a:	4873      	ldr	r0, [pc, #460]	; (8007038 <spi_stm32_init+0x1dc>)
 8006e6c:	f008 fccb 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006e70:	b1f8      	cbz	r0, 8006eb2 <spi_stm32_init+0x56>
	const struct clock_control_driver_api *api =
 8006e72:	4871      	ldr	r0, [pc, #452]	; (8007038 <spi_stm32_init+0x1dc>)
 8006e74:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4641      	mov	r1, r8
 8006e7a:	4798      	blx	r3
 8006e7c:	4681      	mov	r9, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006e7e:	f1b9 0f00 	cmp.w	r9, #0
 8006e82:	d119      	bne.n	8006eb8 <spi_stm32_init+0x5c>
	ret = pinctrl_lookup_state(config, id, &state);
 8006e84:	aa06      	add	r2, sp, #24
 8006e86:	2100      	movs	r1, #0
 8006e88:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006e8c:	f008 fbcd 	bl	800f62a <pinctrl_lookup_state>
	if (ret < 0) {
 8006e90:	1e07      	subs	r7, r0, #0
 8006e92:	db06      	blt.n	8006ea2 <spi_stm32_init+0x46>
	return pinctrl_apply_state_direct(config, state);
 8006e94:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006e96:	2200      	movs	r2, #0
 8006e98:	7919      	ldrb	r1, [r3, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	f008 fbdf 	bl	800f65e <pinctrl_configure_pins>
 8006ea0:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	db2d      	blt.n	8006f02 <spi_stm32_init+0xa6>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8006ea6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006eae:	68ac      	ldr	r4, [r5, #8]
 8006eb0:	e06c      	b.n	8006f8c <spi_stm32_init+0x130>
		return -ENODEV;
 8006eb2:	f06f 0912 	mvn.w	r9, #18
 8006eb6:	e7e2      	b.n	8006e7e <spi_stm32_init+0x22>
		LOG_ERR("Could not enable SPI clock");
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <spi_stm32_init+0x1e0>)
 8006ec0:	9318      	str	r3, [sp, #96]	; 0x60
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9305      	str	r3, [sp, #20]
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	f88d 1014 	strb.w	r1, [sp, #20]
 8006ecc:	9905      	ldr	r1, [sp, #20]
 8006ece:	9117      	str	r1, [sp, #92]	; 0x5c
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f363 0100 	bfi	r1, r3, #0, #1
 8006ed6:	f363 0141 	bfi	r1, r3, #1, #1
 8006eda:	f363 0182 	bfi	r1, r3, #2, #1
 8006ede:	f363 01c5 	bfi	r1, r3, #3, #3
 8006ee2:	f362 1188 	bfi	r1, r2, #6, #3
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	f362 2152 	bfi	r1, r2, #9, #10
 8006eec:	f363 41de 	bfi	r1, r3, #19, #12
 8006ef0:	f363 71df 	bfi	r1, r3, #31, #1
 8006ef4:	aa17      	add	r2, sp, #92	; 0x5c
 8006ef6:	4852      	ldr	r0, [pc, #328]	; (8007040 <spi_stm32_init+0x1e4>)
 8006ef8:	f007 fac5 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006efc:	f06f 0704 	mvn.w	r7, #4
 8006f00:	e087      	b.n	8007012 <spi_stm32_init+0x1b6>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8006f02:	2201      	movs	r2, #1
 8006f04:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006f08:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <spi_stm32_init+0x1e8>)
 8006f0a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f0c:	9713      	str	r7, [sp, #76]	; 0x4c
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9305      	str	r3, [sp, #20]
 8006f12:	2103      	movs	r1, #3
 8006f14:	f88d 1014 	strb.w	r1, [sp, #20]
 8006f18:	9905      	ldr	r1, [sp, #20]
 8006f1a:	9111      	str	r1, [sp, #68]	; 0x44
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f363 0100 	bfi	r1, r3, #0, #1
 8006f22:	f363 0141 	bfi	r1, r3, #1, #1
 8006f26:	f363 0182 	bfi	r1, r3, #2, #1
 8006f2a:	f363 01c5 	bfi	r1, r3, #3, #3
 8006f2e:	f362 1188 	bfi	r1, r2, #6, #3
 8006f32:	220c      	movs	r2, #12
 8006f34:	f362 2152 	bfi	r1, r2, #9, #10
 8006f38:	f363 41de 	bfi	r1, r3, #19, #12
 8006f3c:	f363 71df 	bfi	r1, r3, #31, #1
 8006f40:	aa11      	add	r2, sp, #68	; 0x44
 8006f42:	483f      	ldr	r0, [pc, #252]	; (8007040 <spi_stm32_init+0x1e4>)
 8006f44:	f007 fa9f 	bl	800e486 <z_impl_z_log_msg2_static_create>
			return err;
 8006f48:	e063      	b.n	8007012 <spi_stm32_init+0x1b6>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	7922      	ldrb	r2, [r4, #4]
 8006f4e:	9203      	str	r2, [sp, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	4b3c      	ldr	r3, [pc, #240]	; (8007048 <spi_stm32_init+0x1ec>)
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	9000      	str	r0, [sp, #0]
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	4938      	ldr	r1, [pc, #224]	; (8007040 <spi_stm32_init+0x1e4>)
 8006f60:	f007 fde4 	bl	800eb2c <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 8006f64:	f06f 0712 	mvn.w	r7, #18
 8006f68:	e034      	b.n	8006fd4 <spi_stm32_init+0x178>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006f6e:	f013 0f01 	tst.w	r3, #1
 8006f72:	d026      	beq.n	8006fc2 <spi_stm32_init+0x166>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006f74:	2301      	movs	r3, #1
 8006f76:	fa03 fe01 	lsl.w	lr, r3, r1
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	ea43 030e 	orr.w	r3, r3, lr
 8006f80:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8006f82:	6833      	ldr	r3, [r6, #0]
 8006f84:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8006f86:	1e07      	subs	r7, r0, #0
 8006f88:	db24      	blt.n	8006fd4 <spi_stm32_init+0x178>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006f8a:	3408      	adds	r4, #8
 8006f8c:	68ab      	ldr	r3, [r5, #8]
 8006f8e:	68ea      	ldr	r2, [r5, #12]
 8006f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f94:	429c      	cmp	r4, r3
 8006f96:	d21c      	bcs.n	8006fd2 <spi_stm32_init+0x176>
		if (!device_is_ready(cs_gpio->port)) {
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	f008 fc34 	bl	800f806 <z_device_is_ready>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d0d3      	beq.n	8006f4a <spi_stm32_init+0xee>
	return gpio_pin_configure(spec->port,
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
 8006fa6:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8006fa8:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8006fac:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8006fae:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006fb0:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006fb4:	d0d9      	beq.n	8006f6a <spi_stm32_init+0x10e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006fb6:	f013 0f01 	tst.w	r3, #1
 8006fba:	d0d6      	beq.n	8006f6a <spi_stm32_init+0x10e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006fbc:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006fc0:	e7d3      	b.n	8006f6a <spi_stm32_init+0x10e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	fa03 fe01 	lsl.w	lr, r3, r1
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	ea23 030e 	bic.w	r3, r3, lr
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	e7d7      	b.n	8006f82 <spi_stm32_init+0x126>
			return ret;
		}
	}

	return 0;
 8006fd2:	464f      	mov	r7, r9
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8006fd4:	2f00      	cmp	r7, #0
 8006fd6:	db1c      	blt.n	8007012 <spi_stm32_init+0x1b6>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b1bb      	cbz	r3, 800700c <spi_stm32_init+0x1b0>
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	b1ab      	cbz	r3, 800700c <spi_stm32_init+0x1b0>
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	b19a      	cbz	r2, 800700c <spi_stm32_init+0x1b0>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8006fe4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8006fe6:	f004 fe2d 	bl	800bc44 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8006ff2:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4093      	lsls	r3, r2
 8006ffa:	4219      	tst	r1, r3
 8006ffc:	d10d      	bne.n	800701a <spi_stm32_init+0x1be>
 8006ffe:	464b      	mov	r3, r9
	if (value != 0)	{
 8007000:	b16b      	cbz	r3, 800701e <spi_stm32_init+0x1c2>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8007002:	2101      	movs	r1, #1
 8007004:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8007006:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 800700c:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 800700e:	b163      	cbz	r3, 800702a <spi_stm32_init+0x1ce>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8007010:	464f      	mov	r7, r9
}
 8007012:	4638      	mov	r0, r7
 8007014:	b01b      	add	sp, #108	; 0x6c
 8007016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = (value != 0) ? 0 : 1;
 800701a:	2301      	movs	r3, #1
 800701c:	e7f0      	b.n	8007000 <spi_stm32_init+0x1a4>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800701e:	2101      	movs	r1, #1
 8007020:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8007022:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8007028:	e7f0      	b.n	800700c <spi_stm32_init+0x1b0>
		ctx->owner = NULL;
 800702a:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 800702c:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8007030:	f003 feee 	bl	800ae10 <z_impl_k_sem_give>
}
 8007034:	e7ec      	b.n	8007010 <spi_stm32_init+0x1b4>
 8007036:	bf00      	nop
 8007038:	08010780 	.word	0x08010780
 800703c:	080119d4 	.word	0x080119d4
 8007040:	08010bb0 	.word	0x08010bb0
 8007044:	080119f0 	.word	0x080119f0
 8007048:	08011a10 	.word	0x08011a10

0800704c <transceive>:
{
 800704c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007050:	b091      	sub	sp, #68	; 0x44
 8007052:	4605      	mov	r5, r0
 8007054:	4688      	mov	r8, r1
 8007056:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 8007058:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800705a:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800705c:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800705e:	4691      	mov	r9, r2
 8007060:	b31a      	cbz	r2, 80070aa <transceive+0x5e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8007062:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007066:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800706a:	d004      	beq.n	8007076 <transceive+0x2a>
 800706c:	69a3      	ldr	r3, [r4, #24]
 800706e:	b913      	cbnz	r3, 8007076 <transceive+0x2a>
		(ctx->owner == spi_cfg)) {
 8007070:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8007072:	4598      	cmp	r8, r3
 8007074:	d009      	beq.n	800708a <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
 8007076:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 800707a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007082:	f003 feed 	bl	800ae60 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8007086:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 800708a:	4641      	mov	r1, r8
 800708c:	4628      	mov	r0, r5
 800708e:	f7ff fd83 	bl	8006b98 <spi_stm32_configure>
	if (ret) {
 8007092:	4680      	mov	r8, r0
 8007094:	b170      	cbz	r0, 80070b4 <transceive+0x68>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800709e:	f000 80ab 	beq.w	80071f8 <transceive+0x1ac>
}
 80070a2:	4640      	mov	r0, r8
 80070a4:	b011      	add	sp, #68	; 0x44
 80070a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	d1d9      	bne.n	8007062 <transceive+0x16>
		return 0;
 80070ae:	f04f 0800 	mov.w	r8, #0
 80070b2:	e7f6      	b.n	80070a2 <transceive+0x56>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80070b4:	f1b9 0f00 	cmp.w	r9, #0
 80070b8:	d00b      	beq.n	80070d2 <transceive+0x86>
 80070ba:	f8d9 3000 	ldr.w	r3, [r9]
 80070be:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80070c0:	b14b      	cbz	r3, 80070d6 <transceive+0x8a>
 80070c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80070c6:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 80070c8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80070cc:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 80070d0:	e008      	b.n	80070e4 <transceive+0x98>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80070d2:	464b      	mov	r3, r9
 80070d4:	e7f3      	b.n	80070be <transceive+0x72>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e7f5      	b.n	80070c6 <transceive+0x7a>
		++(*current);
 80070da:	3208      	adds	r2, #8
 80070dc:	6002      	str	r2, [r0, #0]
		--(*count);
 80070de:	680b      	ldr	r3, [r1, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	600b      	str	r3, [r1, #0]
	while (*count) {
 80070e4:	680b      	ldr	r3, [r1, #0]
 80070e6:	b13b      	cbz	r3, 80070f8 <transceive+0xac>
		if (((*current)->len / dfs) != 0) {
 80070e8:	6802      	ldr	r2, [r0, #0]
 80070ea:	6853      	ldr	r3, [r2, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f4      	beq.n	80070da <transceive+0x8e>
			*buf_len = (*current)->len / dfs;
 80070f0:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 80070f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	e000      	b.n	80070fa <transceive+0xae>
	*buf_len = 0;
 80070f8:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 80070fa:	6563      	str	r3, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 80070fc:	b19f      	cbz	r7, 8007126 <transceive+0xda>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8007102:	b193      	cbz	r3, 800712a <transceive+0xde>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8007108:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800710c:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8007110:	680b      	ldr	r3, [r1, #0]
 8007112:	b183      	cbz	r3, 8007136 <transceive+0xea>
		if (((*current)->len / dfs) != 0) {
 8007114:	6802      	ldr	r2, [r0, #0]
 8007116:	6853      	ldr	r3, [r2, #4]
 8007118:	b94b      	cbnz	r3, 800712e <transceive+0xe2>
		++(*current);
 800711a:	3208      	adds	r2, #8
 800711c:	6002      	str	r2, [r0, #0]
		--(*count);
 800711e:	680b      	ldr	r3, [r1, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	600b      	str	r3, [r1, #0]
 8007124:	e7f4      	b.n	8007110 <transceive+0xc4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007126:	463b      	mov	r3, r7
 8007128:	e7ea      	b.n	8007100 <transceive+0xb4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800712a:	2300      	movs	r3, #0
 800712c:	e7eb      	b.n	8007106 <transceive+0xba>
			*buf_len = (*current)->len / dfs;
 800712e:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 8007130:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	e000      	b.n	8007138 <transceive+0xec>
	*buf_len = 0;
 8007136:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8007138:	65e3      	str	r3, [r4, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800713e:	68b3      	ldr	r3, [r6, #8]
 8007140:	f013 0f01 	tst.w	r3, #1
 8007144:	d001      	beq.n	800714a <transceive+0xfe>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8007146:	68f3      	ldr	r3, [r6, #12]
 8007148:	e7f9      	b.n	800713e <transceive+0xf2>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800714a:	6833      	ldr	r3, [r6, #0]
 800714c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007150:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 8007152:	2101      	movs	r1, #1
 8007154:	4628      	mov	r0, r5
 8007156:	f007 fd30 	bl	800ebba <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800715a:	6873      	ldr	r3, [r6, #4]
 800715c:	f043 0320 	orr.w	r3, r3, #32
 8007160:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 8007162:	b11f      	cbz	r7, 800716c <transceive+0x120>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8007164:	6873      	ldr	r3, [r6, #4]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800716c:	6873      	ldr	r3, [r6, #4]
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8007174:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007178:	429a      	cmp	r2, r3
 800717a:	bf38      	it	cc
 800717c:	461a      	movcc	r2, r3
 800717e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007182:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 8007186:	4620      	mov	r0, r4
 8007188:	f850 3b28 	ldr.w	r3, [r0], #40
 800718c:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800718e:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8007192:	32c8      	adds	r2, #200	; 0xc8
 8007194:	0f91      	lsrs	r1, r2, #30
 8007196:	0093      	lsls	r3, r2, #2
 8007198:	189a      	adds	r2, r3, r2
 800719a:	f141 0300 	adc.w	r3, r1, #0
 800719e:	1892      	adds	r2, r2, r2
 80071a0:	415b      	adcs	r3, r3
 80071a2:	f003 fe5d 	bl	800ae60 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 80071a6:	b910      	cbnz	r0, 80071ae <transceive+0x162>
	status = ctx->sync_status;
 80071a8:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 80071ac:	e773      	b.n	8007096 <transceive+0x4a>
		LOG_ERR("Timeout waiting for transfer complete");
 80071ae:	2201      	movs	r2, #1
 80071b0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80071b4:	4b14      	ldr	r3, [pc, #80]	; (8007208 <transceive+0x1bc>)
 80071b6:	930e      	str	r3, [sp, #56]	; 0x38
 80071b8:	2300      	movs	r3, #0
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	2102      	movs	r1, #2
 80071be:	f88d 1004 	strb.w	r1, [sp, #4]
 80071c2:	9901      	ldr	r1, [sp, #4]
 80071c4:	910d      	str	r1, [sp, #52]	; 0x34
 80071c6:	4619      	mov	r1, r3
 80071c8:	f363 0100 	bfi	r1, r3, #0, #1
 80071cc:	f363 0141 	bfi	r1, r3, #1, #1
 80071d0:	f363 0182 	bfi	r1, r3, #2, #1
 80071d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80071d8:	f362 1188 	bfi	r1, r2, #6, #3
 80071dc:	2208      	movs	r2, #8
 80071de:	f362 2152 	bfi	r1, r2, #9, #10
 80071e2:	f363 41de 	bfi	r1, r3, #19, #12
 80071e6:	f363 71df 	bfi	r1, r3, #31, #1
 80071ea:	aa0d      	add	r2, sp, #52	; 0x34
 80071ec:	4807      	ldr	r0, [pc, #28]	; (800720c <transceive+0x1c0>)
 80071ee:	f007 f94a 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -ETIMEDOUT;
 80071f2:	f06f 0873 	mvn.w	r8, #115	; 0x73
 80071f6:	e74e      	b.n	8007096 <transceive+0x4a>
		ctx->owner = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 80071fc:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 8007200:	f003 fe06 	bl	800ae10 <z_impl_k_sem_give>
}
 8007204:	e74d      	b.n	80070a2 <transceive+0x56>
 8007206:	bf00      	nop
 8007208:	08011a34 	.word	0x08011a34
 800720c:	08010bb0 	.word	0x08010bb0

08007210 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8007210:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8007212:	4802      	ldr	r0, [pc, #8]	; (800721c <timer_callback+0xc>)
 8007214:	f003 ff6e 	bl	800b0f4 <k_work_submit>
}
 8007218:	bd08      	pop	{r3, pc}
 800721a:	bf00      	nop
 800721c:	20000090 	.word	0x20000090

08007220 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8007220:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8007222:	f008 fe5f 	bl	800fee4 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007226:	220a      	movs	r2, #10
 8007228:	2300      	movs	r3, #0
 800722a:	f7f9 fbd7 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 800722e:	4b02      	ldr	r3, [pc, #8]	; (8007238 <RtcGetTimerElapsedTime+0x18>)
 8007230:	681b      	ldr	r3, [r3, #0]
}
 8007232:	1ac0      	subs	r0, r0, r3
 8007234:	bd08      	pop	{r3, pc}
 8007236:	bf00      	nop
 8007238:	20000f78 	.word	0x20000f78

0800723c <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 800723c:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 800723e:	4802      	ldr	r0, [pc, #8]	; (8007248 <RtcStopAlarm+0xc>)
 8007240:	f008 fe60 	bl	800ff04 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8007244:	bd08      	pop	{r3, pc}
 8007246:	bf00      	nop
 8007248:	20000338 	.word	0x20000338

0800724c <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 800724c:	b500      	push	{lr}
 800724e:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8007250:	0f83      	lsrs	r3, r0, #30
 8007252:	0082      	lsls	r2, r0, #2
 8007254:	1812      	adds	r2, r2, r0
 8007256:	f143 0300 	adc.w	r3, r3, #0
 800725a:	1892      	adds	r2, r2, r2
 800725c:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800725e:	2000      	movs	r0, #0
 8007260:	2100      	movs	r1, #0
 8007262:	e9cd 0100 	strd	r0, r1, [sp]
 8007266:	4803      	ldr	r0, [pc, #12]	; (8007274 <RtcSetAlarm+0x28>)
 8007268:	f004 fd50 	bl	800bd0c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 800726c:	b003      	add	sp, #12
 800726e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007272:	bf00      	nop
 8007274:	20000338 	.word	0x20000338

08007278 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8007278:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800727a:	f008 fe33 	bl	800fee4 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800727e:	220a      	movs	r2, #10
 8007280:	2300      	movs	r3, #0
 8007282:	f7f9 fbab 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8007286:	4b01      	ldr	r3, [pc, #4]	; (800728c <RtcSetTimerContext+0x14>)
 8007288:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 800728a:	bd08      	pop	{r3, pc}
 800728c:	20000f78 	.word	0x20000f78

08007290 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8007290:	4b01      	ldr	r3, [pc, #4]	; (8007298 <RtcGetTimerContext+0x8>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000f78 	.word	0x20000f78

0800729c <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80072a0:	f100 053c 	add.w	r5, r0, #60	; 0x3c
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80072a4:	2302      	movs	r3, #2
 80072a6:	f3bf 8f5b 	dmb	ish
 80072aa:	e855 2f00 	ldrex	r2, [r5]
 80072ae:	2a01      	cmp	r2, #1
 80072b0:	d103      	bne.n	80072ba <modem_release+0x1e>
 80072b2:	e845 3100 	strex	r1, r3, [r5]
 80072b6:	2900      	cmp	r1, #0
 80072b8:	d1f7      	bne.n	80072aa <modem_release+0xe>
 80072ba:	f3bf 8f5b 	dmb	ish
 80072be:	bf0c      	ite	eq
 80072c0:	2601      	moveq	r6, #1
 80072c2:	2600      	movne	r6, #0
 80072c4:	d10e      	bne.n	80072e4 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <modem_release+0x4c>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80072d0:	f3bf 8f5b 	dmb	ish
 80072d4:	e855 2f00 	ldrex	r2, [r5]
 80072d8:	e845 3100 	strex	r1, r3, [r5]
 80072dc:	2900      	cmp	r1, #0
 80072de:	d1f9      	bne.n	80072d4 <modem_release+0x38>
 80072e0:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 80072e4:	4630      	mov	r0, r6
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	08011c84 	.word	0x08011c84

080072ec <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 80072ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	4605      	mov	r5, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	4690      	mov	r8, r2
 80072f8:	461e      	mov	r6, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 80072fa:	4926      	ldr	r1, [pc, #152]	; (8007394 <sx12xx_ev_rx_done+0xa8>)
 80072fc:	684f      	ldr	r7, [r1, #4]

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
 80072fe:	6889      	ldr	r1, [r1, #8]
 8007300:	b161      	cbz	r1, 800731c <sx12xx_ev_rx_done+0x30>
		/* Start receiving again */
		Radio.Rx(0);
 8007302:	4b25      	ldr	r3, [pc, #148]	; (8007398 <sx12xx_ev_rx_done+0xac>)
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	2000      	movs	r0, #0
 8007308:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 800730a:	4822      	ldr	r0, [pc, #136]	; (8007394 <sx12xx_ev_rx_done+0xa8>)
 800730c:	6887      	ldr	r7, [r0, #8]
 800730e:	9600      	str	r6, [sp, #0]
 8007310:	4643      	mov	r3, r8
 8007312:	4622      	mov	r2, r4
 8007314:	4629      	mov	r1, r5
 8007316:	6800      	ldr	r0, [r0, #0]
 8007318:	47b8      	blx	r7
		/* Don't run the synchronous code */
		return;
 800731a:	e037      	b.n	800738c <sx12xx_ev_rx_done+0xa0>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800731c:	4b1f      	ldr	r3, [pc, #124]	; (800739c <sx12xx_ev_rx_done+0xb0>)
 800731e:	2202      	movs	r2, #2
 8007320:	f3bf 8f5b 	dmb	ish
 8007324:	e853 1f00 	ldrex	r1, [r3]
 8007328:	2901      	cmp	r1, #1
 800732a:	d103      	bne.n	8007334 <sx12xx_ev_rx_done+0x48>
 800732c:	e843 2000 	strex	r0, r2, [r3]
 8007330:	2800      	cmp	r0, #0
 8007332:	d1f7      	bne.n	8007324 <sx12xx_ev_rx_done+0x38>
 8007334:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007338:	d128      	bne.n	800738c <sx12xx_ev_rx_done+0xa0>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 800733a:	3b3c      	subs	r3, #60	; 0x3c
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	42a2      	cmp	r2, r4
 8007342:	d900      	bls.n	8007346 <sx12xx_ev_rx_done+0x5a>
		*dev_data.rx_params.size = size;
 8007344:	701c      	strb	r4, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 8007346:	4c13      	ldr	r4, [pc, #76]	; (8007394 <sx12xx_ev_rx_done+0xa8>)
 8007348:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	4629      	mov	r1, r5
 800734e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007350:	f008 fe7b 	bl	801004a <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 8007354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007356:	b10b      	cbz	r3, 800735c <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.rssi = rssi;
 8007358:	f8a3 8000 	strh.w	r8, [r3]
	}
	if (dev_data.rx_params.snr) {
 800735c:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <sx12xx_ev_rx_done+0xa8>)
 800735e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007360:	b103      	cbz	r3, 8007364 <sx12xx_ev_rx_done+0x78>
		*dev_data.rx_params.snr = snr;
 8007362:	701e      	strb	r6, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <sx12xx_ev_rx_done+0xac>)
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 800736a:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <sx12xx_ev_rx_done+0xa8>)
 800736c:	2100      	movs	r1, #0
 800736e:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007370:	333c      	adds	r3, #60	; 0x3c
 8007372:	f3bf 8f5b 	dmb	ish
 8007376:	e853 2f00 	ldrex	r2, [r3]
 800737a:	e843 1000 	strex	r0, r1, [r3]
 800737e:	2800      	cmp	r0, #0
 8007380:	d1f9      	bne.n	8007376 <sx12xx_ev_rx_done+0x8a>
 8007382:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8007386:	4638      	mov	r0, r7
 8007388:	f004 ffbc 	bl	800c304 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 800738c:	b002      	add	sp, #8
 800738e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007392:	bf00      	nop
 8007394:	20000f7c 	.word	0x20000f7c
 8007398:	08011c84 	.word	0x08011c84
 800739c:	20000fb8 	.word	0x20000fb8

080073a0 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 80073a0:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80073a2:	4805      	ldr	r0, [pc, #20]	; (80073b8 <sx12xx_ev_tx_done+0x18>)
 80073a4:	6844      	ldr	r4, [r0, #4]

	if (modem_release(&dev_data)) {
 80073a6:	f7ff ff79 	bl	800729c <modem_release>
 80073aa:	b120      	cbz	r0, 80073b6 <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 80073ac:	b11c      	cbz	r4, 80073b6 <sx12xx_ev_tx_done+0x16>
 80073ae:	2100      	movs	r1, #0
 80073b0:	4620      	mov	r0, r4
 80073b2:	f004 ffa7 	bl	800c304 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 80073b6:	bd10      	pop	{r4, pc}
 80073b8:	20000f7c 	.word	0x20000f7c

080073bc <__sx12xx_configure_pin>:
{
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	b087      	sub	sp, #28
 80073c0:	4604      	mov	r4, r0
 80073c2:	460f      	mov	r7, r1
 80073c4:	4616      	mov	r6, r2
 80073c6:	461d      	mov	r5, r3
 80073c8:	4608      	mov	r0, r1
 80073ca:	f003 f921 	bl	800a610 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 80073ce:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 80073d0:	b1f8      	cbz	r0, 8007412 <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 80073d2:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 80073d4:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80073d6:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 80073da:	d007      	beq.n	80073ec <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80073dc:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 80073e0:	d004      	beq.n	80073ec <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80073e2:	f015 0f01 	tst.w	r5, #1
 80073e6:	d001      	beq.n	80073ec <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80073e8:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80073ec:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80073f0:	f015 0f01 	tst.w	r5, #1
 80073f4:	d019      	beq.n	800742a <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80073f6:	2101      	movs	r1, #1
 80073f8:	fa01 f506 	lsl.w	r5, r1, r6
 80073fc:	6821      	ldr	r1, [r4, #0]
 80073fe:	4329      	orrs	r1, r5
 8007400:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4631      	mov	r1, r6
 8007406:	4798      	blx	r3
	if (err) {
 8007408:	4604      	mov	r4, r0
 800740a:	b9b0      	cbnz	r0, 800743a <__sx12xx_configure_pin+0x7e>
}
 800740c:	4620      	mov	r0, r4
 800740e:	b007      	add	sp, #28
 8007410:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 8007412:	9702      	str	r7, [sp, #8]
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <__sx12xx_configure_pin+0x98>)
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	9000      	str	r0, [sp, #0]
 800741a:	4603      	mov	r3, r0
 800741c:	2201      	movs	r2, #1
 800741e:	490e      	ldr	r1, [pc, #56]	; (8007458 <__sx12xx_configure_pin+0x9c>)
 8007420:	f007 fe85 	bl	800f12e <z_log_msg2_runtime_create>
		return -EIO;
 8007424:	f06f 0404 	mvn.w	r4, #4
 8007428:	e7f0      	b.n	800740c <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800742a:	2101      	movs	r1, #1
 800742c:	fa01 f506 	lsl.w	r5, r1, r6
 8007430:	6821      	ldr	r1, [r4, #0]
 8007432:	ea21 0105 	bic.w	r1, r1, r5
 8007436:	6021      	str	r1, [r4, #0]
 8007438:	e7e3      	b.n	8007402 <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 800743a:	9004      	str	r0, [sp, #16]
 800743c:	9603      	str	r6, [sp, #12]
 800743e:	9702      	str	r7, [sp, #8]
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <__sx12xx_configure_pin+0xa0>)
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	2000      	movs	r0, #0
 8007446:	9000      	str	r0, [sp, #0]
 8007448:	4603      	mov	r3, r0
 800744a:	2201      	movs	r2, #1
 800744c:	4902      	ldr	r1, [pc, #8]	; (8007458 <__sx12xx_configure_pin+0x9c>)
 800744e:	f007 fe6e 	bl	800f12e <z_log_msg2_runtime_create>
		return err;
 8007452:	e7db      	b.n	800740c <__sx12xx_configure_pin+0x50>
 8007454:	08011ad4 	.word	0x08011ad4
 8007458:	08010bc0 	.word	0x08010bc0
 800745c:	08011af4 	.word	0x08011af4

08007460 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007464:	490f      	ldr	r1, [pc, #60]	; (80074a4 <sx12xx_lora_send_async+0x44>)
 8007466:	2001      	movs	r0, #1
 8007468:	f3bf 8f5b 	dmb	ish
 800746c:	e851 4f00 	ldrex	r4, [r1]
 8007470:	2c00      	cmp	r4, #0
 8007472:	d103      	bne.n	800747c <sx12xx_lora_send_async+0x1c>
 8007474:	e841 0600 	strex	r6, r0, [r1]
 8007478:	2e00      	cmp	r6, #0
 800747a:	d1f7      	bne.n	800746c <sx12xx_lora_send_async+0xc>
 800747c:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007480:	d10c      	bne.n	800749c <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8007482:	393c      	subs	r1, #60	; 0x3c
 8007484:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8007486:	4e08      	ldr	r6, [pc, #32]	; (80074a8 <sx12xx_lora_send_async+0x48>)
 8007488:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800748a:	b2d4      	uxtb	r4, r2
 800748c:	4621      	mov	r1, r4
 800748e:	4798      	blx	r3

	Radio.Send(data, data_len);
 8007490:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	4798      	blx	r3

	return 0;
 8007498:	2000      	movs	r0, #0
}
 800749a:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 800749c:	f06f 000f 	mvn.w	r0, #15
 80074a0:	e7fb      	b.n	800749a <sx12xx_lora_send_async+0x3a>
 80074a2:	bf00      	nop
 80074a4:	20000fb8 	.word	0x20000fb8
 80074a8:	08011c84 	.word	0x08011c84

080074ac <sx12xx_lora_send>:
{
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	b09c      	sub	sp, #112	; 0x70
 80074b0:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80074b2:	aa12      	add	r2, sp, #72	; 0x48
 80074b4:	9212      	str	r2, [sp, #72]	; 0x48
 80074b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80074b8:	2300      	movs	r3, #0
 80074ba:	9314      	str	r3, [sp, #80]	; 0x50
 80074bc:	9315      	str	r3, [sp, #84]	; 0x54
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80074be:	930d      	str	r3, [sp, #52]	; 0x34
 80074c0:	930e      	str	r3, [sp, #56]	; 0x38
 80074c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80074c4:	9310      	str	r3, [sp, #64]	; 0x40
 80074c6:	9311      	str	r3, [sp, #68]	; 0x44
 80074c8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80074cc:	2501      	movs	r5, #1
 80074ce:	f365 0304 	bfi	r3, r5, #0, #5
 80074d2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80074d6:	9211      	str	r2, [sp, #68]	; 0x44
	if (!dev_data.tx_cfg.frequency) {
 80074d8:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <sx12xx_lora_send+0xf4>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05b      	beq.n	8007598 <sx12xx_lora_send+0xec>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80074e0:	4613      	mov	r3, r2
 80074e2:	4622      	mov	r2, r4
 80074e4:	f7ff ffbc 	bl	8007460 <sx12xx_lora_send_async>
	if (ret < 0) {
 80074e8:	2800      	cmp	r0, #0
 80074ea:	db22      	blt.n	8007532 <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80074ec:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <sx12xx_lora_send+0xf8>)
 80074ee:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80074f0:	482b      	ldr	r0, [pc, #172]	; (80075a0 <sx12xx_lora_send+0xf4>)
 80074f2:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
				   dev_data.tx_cfg.datarate,
 80074f6:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
				   dev_data.tx_cfg.coding_rate,
 80074fa:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80074fe:	9503      	str	r5, [sp, #12]
 8007500:	b2e4      	uxtb	r4, r4
 8007502:	9402      	str	r4, [sp, #8]
 8007504:	2400      	movs	r4, #0
 8007506:	9401      	str	r4, [sp, #4]
 8007508:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 800750a:	9000      	str	r0, [sp, #0]
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8007510:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8007514:	f3c0 7341 	ubfx	r3, r0, #29, #2
 8007518:	00c2      	lsls	r2, r0, #3
 800751a:	1852      	adds	r2, r2, r1
 800751c:	f143 0300 	adc.w	r3, r3, #0
 8007520:	1892      	adds	r2, r2, r2
 8007522:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8007524:	4629      	mov	r1, r5
 8007526:	a80d      	add	r0, sp, #52	; 0x34
 8007528:	f004 fe40 	bl	800c1ac <z_impl_k_poll>
	if (ret < 0) {
 800752c:	42a0      	cmp	r0, r4
 800752e:	db02      	blt.n	8007536 <sx12xx_lora_send+0x8a>
	return 0;
 8007530:	2000      	movs	r0, #0
}
 8007532:	b01c      	add	sp, #112	; 0x70
 8007534:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Packet transmission failed!");
 8007536:	f8ad 5014 	strh.w	r5, [sp, #20]
 800753a:	4b1b      	ldr	r3, [pc, #108]	; (80075a8 <sx12xx_lora_send+0xfc>)
 800753c:	931a      	str	r3, [sp, #104]	; 0x68
 800753e:	4623      	mov	r3, r4
 8007540:	9404      	str	r4, [sp, #16]
 8007542:	2102      	movs	r1, #2
 8007544:	f88d 1010 	strb.w	r1, [sp, #16]
 8007548:	9904      	ldr	r1, [sp, #16]
 800754a:	9119      	str	r1, [sp, #100]	; 0x64
 800754c:	4621      	mov	r1, r4
 800754e:	f364 0100 	bfi	r1, r4, #0, #1
 8007552:	f364 0141 	bfi	r1, r4, #1, #1
 8007556:	f364 0182 	bfi	r1, r4, #2, #1
 800755a:	f364 01c5 	bfi	r1, r4, #3, #3
 800755e:	f365 1188 	bfi	r1, r5, #6, #3
 8007562:	2208      	movs	r2, #8
 8007564:	f362 2152 	bfi	r1, r2, #9, #10
 8007568:	f364 41de 	bfi	r1, r4, #19, #12
 800756c:	f364 71df 	bfi	r1, r4, #31, #1
 8007570:	aa19      	add	r2, sp, #100	; 0x64
 8007572:	480e      	ldr	r0, [pc, #56]	; (80075ac <sx12xx_lora_send+0x100>)
 8007574:	f006 ff87 	bl	800e486 <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8007578:	4809      	ldr	r0, [pc, #36]	; (80075a0 <sx12xx_lora_send+0xf4>)
 800757a:	f7ff fe8f 	bl	800729c <modem_release>
 800757e:	b108      	cbz	r0, 8007584 <sx12xx_lora_send+0xd8>
	return 0;
 8007580:	2000      	movs	r0, #0
 8007582:	e7d6      	b.n	8007532 <sx12xx_lora_send+0x86>
 8007584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800758c:	4629      	mov	r1, r5
 800758e:	a80d      	add	r0, sp, #52	; 0x34
 8007590:	f004 fe0c 	bl	800c1ac <z_impl_k_poll>
 8007594:	4620      	mov	r0, r4
 8007596:	e7cc      	b.n	8007532 <sx12xx_lora_send+0x86>
		return -EINVAL;
 8007598:	f06f 0015 	mvn.w	r0, #21
 800759c:	e7c9      	b.n	8007532 <sx12xx_lora_send+0x86>
 800759e:	bf00      	nop
 80075a0:	20000f7c 	.word	0x20000f7c
 80075a4:	08011c84 	.word	0x08011c84
 80075a8:	08011b14 	.word	0x08011b14
 80075ac:	08010bc0 	.word	0x08010bc0

080075b0 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 80075b0:	b530      	push	{r4, r5, lr}
 80075b2:	b09b      	sub	sp, #108	; 0x6c
 80075b4:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80075b8:	aa10      	add	r2, sp, #64	; 0x40
 80075ba:	9210      	str	r2, [sp, #64]	; 0x40
 80075bc:	9211      	str	r2, [sp, #68]	; 0x44
 80075be:	2300      	movs	r3, #0
 80075c0:	9312      	str	r3, [sp, #72]	; 0x48
 80075c2:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80075c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c6:	930c      	str	r3, [sp, #48]	; 0x30
 80075c8:	930d      	str	r3, [sp, #52]	; 0x34
 80075ca:	930e      	str	r3, [sp, #56]	; 0x38
 80075cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ce:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80075d2:	2001      	movs	r0, #1
 80075d4:	f360 0304 	bfi	r3, r0, #0, #5
 80075d8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80075dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80075de:	4b32      	ldr	r3, [pc, #200]	; (80076a8 <sx12xx_lora_recv+0xf8>)
 80075e0:	f3bf 8f5b 	dmb	ish
 80075e4:	e853 2f00 	ldrex	r2, [r3]
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	d103      	bne.n	80075f4 <sx12xx_lora_recv+0x44>
 80075ec:	e843 0400 	strex	r4, r0, [r3]
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	d1f7      	bne.n	80075e4 <sx12xx_lora_recv+0x34>
 80075f4:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80075f8:	d153      	bne.n	80076a2 <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 80075fa:	3b3c      	subs	r3, #60	; 0x3c
 80075fc:	2400      	movs	r4, #0
 80075fe:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 8007600:	aa10      	add	r2, sp, #64	; 0x40
 8007602:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8007604:	6419      	str	r1, [r3, #64]	; 0x40
	dev_data.rx_params.size = &size;
 8007606:	f10d 0207 	add.w	r2, sp, #7
 800760a:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.rssi = rssi;
 800760c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800760e:	649a      	str	r2, [r3, #72]	; 0x48
	dev_data.rx_params.snr = snr;
 8007610:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007612:	64da      	str	r2, [r3, #76]	; 0x4c

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8007614:	4d25      	ldr	r5, [pc, #148]	; (80076ac <sx12xx_lora_recv+0xfc>)
 8007616:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007618:	21ff      	movs	r1, #255	; 0xff
 800761a:	4798      	blx	r3
	Radio.Rx(0);
 800761c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800761e:	4620      	mov	r0, r4
 8007620:	4798      	blx	r3
 8007622:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8007626:	2101      	movs	r1, #1
 8007628:	a80b      	add	r0, sp, #44	; 0x2c
 800762a:	f004 fdbf 	bl	800c1ac <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 800762e:	1e04      	subs	r4, r0, #0
 8007630:	db04      	blt.n	800763c <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8007632:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 8007636:	4620      	mov	r0, r4
 8007638:	b01b      	add	sp, #108	; 0x6c
 800763a:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 800763c:	481c      	ldr	r0, [pc, #112]	; (80076b0 <sx12xx_lora_recv+0x100>)
 800763e:	f7ff fe2d 	bl	800729c <modem_release>
 8007642:	b950      	cbnz	r0, 800765a <sx12xx_lora_recv+0xaa>
 8007644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800764c:	2101      	movs	r1, #1
 800764e:	a80b      	add	r0, sp, #44	; 0x2c
 8007650:	f004 fdac 	bl	800c1ac <z_impl_k_poll>
			return size;
 8007654:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8007658:	e7ed      	b.n	8007636 <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 800765a:	2301      	movs	r3, #1
 800765c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007660:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <sx12xx_lora_recv+0x104>)
 8007662:	9318      	str	r3, [sp, #96]	; 0x60
 8007664:	2300      	movs	r3, #0
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	2202      	movs	r2, #2
 800766a:	f88d 2008 	strb.w	r2, [sp, #8]
 800766e:	9a02      	ldr	r2, [sp, #8]
 8007670:	9217      	str	r2, [sp, #92]	; 0x5c
 8007672:	4619      	mov	r1, r3
 8007674:	f363 0100 	bfi	r1, r3, #0, #1
 8007678:	f363 0141 	bfi	r1, r3, #1, #1
 800767c:	f363 0182 	bfi	r1, r3, #2, #1
 8007680:	f363 01c5 	bfi	r1, r3, #3, #3
 8007684:	2203      	movs	r2, #3
 8007686:	f362 1188 	bfi	r1, r2, #6, #3
 800768a:	2208      	movs	r2, #8
 800768c:	f362 2152 	bfi	r1, r2, #9, #10
 8007690:	f363 41de 	bfi	r1, r3, #19, #12
 8007694:	f363 71df 	bfi	r1, r3, #31, #1
 8007698:	aa17      	add	r2, sp, #92	; 0x5c
 800769a:	4807      	ldr	r0, [pc, #28]	; (80076b8 <sx12xx_lora_recv+0x108>)
 800769c:	f006 fef3 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return ret;
 80076a0:	e7c9      	b.n	8007636 <sx12xx_lora_recv+0x86>
		return -EBUSY;
 80076a2:	f06f 040f 	mvn.w	r4, #15
 80076a6:	e7c6      	b.n	8007636 <sx12xx_lora_recv+0x86>
 80076a8:	20000fb8 	.word	0x20000fb8
 80076ac:	08011c84 	.word	0x08011c84
 80076b0:	20000f7c 	.word	0x20000f7c
 80076b4:	08011b30 	.word	0x08011b30
 80076b8:	08010bc0 	.word	0x08010bc0

080076bc <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
 80076bc:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
 80076be:	b1d9      	cbz	r1, 80076f8 <sx12xx_lora_recv_async+0x3c>
 80076c0:	460a      	mov	r2, r1
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <sx12xx_lora_recv_async+0x54>)
 80076c4:	2101      	movs	r1, #1
 80076c6:	f3bf 8f5b 	dmb	ish
 80076ca:	e853 0f00 	ldrex	r0, [r3]
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d103      	bne.n	80076da <sx12xx_lora_recv_async+0x1e>
 80076d2:	e843 1400 	strex	r4, r1, [r3]
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	d1f7      	bne.n	80076ca <sx12xx_lora_recv_async+0xe>
 80076da:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 80076de:	d114      	bne.n	800770a <sx12xx_lora_recv_async+0x4e>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 80076e0:	3b3c      	subs	r3, #60	; 0x3c
 80076e2:	609a      	str	r2, [r3, #8]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80076e4:	4c0b      	ldr	r4, [pc, #44]	; (8007714 <sx12xx_lora_recv_async+0x58>)
 80076e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80076e8:	21ff      	movs	r1, #255	; 0xff
 80076ea:	2001      	movs	r0, #1
 80076ec:	4798      	blx	r3
	Radio.Rx(0);
 80076ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076f0:	2000      	movs	r0, #0
 80076f2:	4798      	blx	r3

	return 0;
 80076f4:	2000      	movs	r0, #0
}
 80076f6:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 80076f8:	4807      	ldr	r0, [pc, #28]	; (8007718 <sx12xx_lora_recv_async+0x5c>)
 80076fa:	f7ff fdcf 	bl	800729c <modem_release>
 80076fe:	b108      	cbz	r0, 8007704 <sx12xx_lora_recv_async+0x48>
		return 0;
 8007700:	2000      	movs	r0, #0
 8007702:	e7f8      	b.n	80076f6 <sx12xx_lora_recv_async+0x3a>
			return -EINVAL;
 8007704:	f06f 0015 	mvn.w	r0, #21
 8007708:	e7f5      	b.n	80076f6 <sx12xx_lora_recv_async+0x3a>
		return -EBUSY;
 800770a:	f06f 000f 	mvn.w	r0, #15
 800770e:	e7f2      	b.n	80076f6 <sx12xx_lora_recv_async+0x3a>
 8007710:	20000fb8 	.word	0x20000fb8
 8007714:	08011c84 	.word	0x08011c84
 8007718:	20000f7c 	.word	0x20000f7c

0800771c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	460c      	mov	r4, r1
 8007722:	4b27      	ldr	r3, [pc, #156]	; (80077c0 <sx12xx_lora_config+0xa4>)
 8007724:	2201      	movs	r2, #1
 8007726:	f3bf 8f5b 	dmb	ish
 800772a:	e853 1f00 	ldrex	r1, [r3]
 800772e:	2900      	cmp	r1, #0
 8007730:	d103      	bne.n	800773a <sx12xx_lora_config+0x1e>
 8007732:	e843 2000 	strex	r0, r2, [r3]
 8007736:	2800      	cmp	r0, #0
 8007738:	d1f7      	bne.n	800772a <sx12xx_lora_config+0xe>
 800773a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800773e:	d13b      	bne.n	80077b8 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8007740:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <sx12xx_lora_config+0xa8>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4798      	blx	r3

	if (config->tx) {
 8007748:	7ae3      	ldrb	r3, [r4, #11]
 800774a:	b9cb      	cbnz	r3, 8007780 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 800774c:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <sx12xx_lora_config+0xa8>)
 800774e:	699d      	ldr	r5, [r3, #24]
 8007750:	2001      	movs	r0, #1
 8007752:	9009      	str	r0, [sp, #36]	; 0x24
 8007754:	2300      	movs	r3, #0
 8007756:	9308      	str	r3, [sp, #32]
 8007758:	9307      	str	r3, [sp, #28]
 800775a:	9306      	str	r3, [sp, #24]
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	220a      	movs	r2, #10
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	8922      	ldrh	r2, [r4, #8]
 8007768:	9201      	str	r2, [sp, #4]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	79a3      	ldrb	r3, [r4, #6]
 800776e:	7962      	ldrb	r2, [r4, #5]
 8007770:	7921      	ldrb	r1, [r4, #4]
 8007772:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8007774:	4814      	ldr	r0, [pc, #80]	; (80077c8 <sx12xx_lora_config+0xac>)
 8007776:	f7ff fd91 	bl	800729c <modem_release>
	return 0;
 800777a:	2000      	movs	r0, #0
}
 800777c:	b00a      	add	sp, #40	; 0x28
 800777e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8007780:	4b12      	ldr	r3, [pc, #72]	; (80077cc <sx12xx_lora_config+0xb0>)
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	6861      	ldr	r1, [r4, #4]
 8007786:	68a2      	ldr	r2, [r4, #8]
 8007788:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800778a:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <sx12xx_lora_config+0xa8>)
 800778c:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 800778e:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8007790:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8007792:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007796:	9208      	str	r2, [sp, #32]
 8007798:	2200      	movs	r2, #0
 800779a:	9207      	str	r2, [sp, #28]
 800779c:	9206      	str	r2, [sp, #24]
 800779e:	9205      	str	r2, [sp, #20]
 80077a0:	2001      	movs	r0, #1
 80077a2:	9004      	str	r0, [sp, #16]
 80077a4:	9203      	str	r2, [sp, #12]
 80077a6:	8926      	ldrh	r6, [r4, #8]
 80077a8:	9602      	str	r6, [sp, #8]
 80077aa:	9101      	str	r1, [sp, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	7923      	ldrb	r3, [r4, #4]
 80077b0:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80077b4:	47a8      	blx	r5
 80077b6:	e7dd      	b.n	8007774 <sx12xx_lora_config+0x58>
		return -EBUSY;
 80077b8:	f06f 000f 	mvn.w	r0, #15
 80077bc:	e7de      	b.n	800777c <sx12xx_lora_config+0x60>
 80077be:	bf00      	nop
 80077c0:	20000fb8 	.word	0x20000fb8
 80077c4:	08011c84 	.word	0x08011c84
 80077c8:	20000f7c 	.word	0x20000f7c
 80077cc:	20000fac 	.word	0x20000fac

080077d0 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	461a      	mov	r2, r3
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <sx12xx_lora_test_cw+0x3c>)
 80077da:	f04f 0c01 	mov.w	ip, #1
 80077de:	f3bf 8f5b 	dmb	ish
 80077e2:	e853 ef00 	ldrex	lr, [r3]
 80077e6:	f1be 0f00 	cmp.w	lr, #0
 80077ea:	d103      	bne.n	80077f4 <sx12xx_lora_test_cw+0x24>
 80077ec:	e843 c400 	strex	r4, ip, [r3]
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d1f6      	bne.n	80077e2 <sx12xx_lora_test_cw+0x12>
 80077f4:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80077f8:	d104      	bne.n	8007804 <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 80077fa:	4b05      	ldr	r3, [pc, #20]	; (8007810 <sx12xx_lora_test_cw+0x40>)
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	4798      	blx	r3
	return 0;
 8007800:	2000      	movs	r0, #0
}
 8007802:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8007804:	f06f 000f 	mvn.w	r0, #15
 8007808:	e7fb      	b.n	8007802 <sx12xx_lora_test_cw+0x32>
 800780a:	bf00      	nop
 800780c:	20000fb8 	.word	0x20000fb8
 8007810:	08011c84 	.word	0x08011c84

08007814 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8007814:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007816:	4b0e      	ldr	r3, [pc, #56]	; (8007850 <sx12xx_init+0x3c>)
 8007818:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800781c:	2400      	movs	r4, #0
 800781e:	f3bf 8f5b 	dmb	ish
 8007822:	e852 1f00 	ldrex	r1, [r2]
 8007826:	e842 4500 	strex	r5, r4, [r2]
 800782a:	2d00      	cmp	r5, #0
 800782c:	d1f9      	bne.n	8007822 <sx12xx_init+0xe>
 800782e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 8007832:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8007834:	4a07      	ldr	r2, [pc, #28]	; (8007854 <sx12xx_init+0x40>)
 8007836:	60da      	str	r2, [r3, #12]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8007838:	4a07      	ldr	r2, [pc, #28]	; (8007858 <sx12xx_init+0x44>)
 800783a:	615a      	str	r2, [r3, #20]
	Radio.Init(&dev_data.events);
 800783c:	4d07      	ldr	r5, [pc, #28]	; (800785c <sx12xx_init+0x48>)
 800783e:	682a      	ldr	r2, [r5, #0]
 8007840:	f103 000c 	add.w	r0, r3, #12
 8007844:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8007846:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007848:	4798      	blx	r3

	return 0;
}
 800784a:	4620      	mov	r0, r4
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	bf00      	nop
 8007850:	20000f7c 	.word	0x20000f7c
 8007854:	080073a1 	.word	0x080073a1
 8007858:	080072ed 	.word	0x080072ed
 800785c:	08011c84 	.word	0x08011c84

08007860 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8007860:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8007862:	4b04      	ldr	r3, [pc, #16]	; (8007874 <sx127x_dio_work_handle+0x14>)
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <sx127x_dio_work_handle+0x18>)
 800786a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800786e:	2000      	movs	r0, #0
 8007870:	4798      	blx	r3
}
 8007872:	bd08      	pop	{r3, pc}
 8007874:	20001020 	.word	0x20001020
 8007878:	200000a0 	.word	0x200000a0

0800787c <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 800787c:	b510      	push	{r4, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8007884:	f10d 0007 	add.w	r0, sp, #7
 8007888:	9006      	str	r0, [sp, #24]
 800788a:	2001      	movs	r0, #1
 800788c:	9007      	str	r0, [sp, #28]
 800788e:	9208      	str	r2, [sp, #32]
 8007890:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8007892:	ab06      	add	r3, sp, #24
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	2302      	movs	r3, #2
 8007898:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 800789a:	b149      	cbz	r1, 80078b0 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 800789c:	490b      	ldr	r1, [pc, #44]	; (80078cc <sx127x_transceive+0x50>)
 800789e:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 80078a0:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80078a2:	681c      	ldr	r4, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	aa04      	add	r2, sp, #16
 80078a8:	3108      	adds	r1, #8
 80078aa:	47a0      	blx	r4
}
 80078ac:	b00a      	add	sp, #40	; 0x28
 80078ae:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 80078b0:	ab06      	add	r3, sp, #24
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	2302      	movs	r3, #2
 80078b6:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <sx127x_transceive+0x50>)
 80078ba:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 80078bc:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80078be:	681c      	ldr	r4, [r3, #0]
 80078c0:	ab02      	add	r3, sp, #8
 80078c2:	aa04      	add	r2, sp, #16
 80078c4:	3108      	adds	r1, #8
 80078c6:	47a0      	blx	r4
 80078c8:	e7f0      	b.n	80078ac <sx127x_transceive+0x30>
 80078ca:	bf00      	nop
 80078cc:	20000ffc 	.word	0x20000ffc

080078d0 <sx127x_irq_callback>:
{
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 80078d4:	fa92 f6a2 	rbit	r6, r2
 80078d8:	fab6 f686 	clz	r6, r6
 80078dc:	b90a      	cbnz	r2, 80078e2 <sx127x_irq_callback+0x12>
 80078de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80078e2:	2400      	movs	r4, #0
 80078e4:	e000      	b.n	80078e8 <sx127x_irq_callback+0x18>
 80078e6:	3401      	adds	r4, #1
 80078e8:	2c03      	cmp	r4, #3
 80078ea:	d813      	bhi.n	8007914 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 80078ec:	1d23      	adds	r3, r4, #4
 80078ee:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <sx127x_irq_callback+0x48>)
 80078f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	42ab      	cmp	r3, r5
 80078f8:	d1f5      	bne.n	80078e6 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <sx127x_irq_callback+0x4c>)
 80078fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007900:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8007902:	42b3      	cmp	r3, r6
 8007904:	d1ef      	bne.n	80078e6 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8007906:	1ca0      	adds	r0, r4, #2
 8007908:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800790c:	3004      	adds	r0, #4
 800790e:	f003 fbf1 	bl	800b0f4 <k_work_submit>
 8007912:	e7e8      	b.n	80078e6 <sx127x_irq_callback+0x16>
}
 8007914:	bd70      	pop	{r4, r5, r6, pc}
 8007916:	bf00      	nop
 8007918:	20000ffc 	.word	0x20000ffc
 800791c:	08011cf0 	.word	0x08011cf0

08007920 <SX1276Reset>:
{
 8007920:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <SX1276Reset+0x64>)
 8007924:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007926:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f013 0f01 	tst.w	r3, #1
 800792e:	d11b      	bne.n	8007968 <SX1276Reset+0x48>
 8007930:	2301      	movs	r3, #1
	if (value != 0)	{
 8007932:	b1db      	cbz	r3, 800796c <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8007934:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2101      	movs	r1, #1
 800793a:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 800793c:	200a      	movs	r0, #10
 800793e:	2100      	movs	r1, #0
 8007940:	f003 ffa6 	bl	800b890 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <SX1276Reset+0x64>)
 8007946:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007948:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f013 0f01 	tst.w	r3, #1
 8007950:	d111      	bne.n	8007976 <SX1276Reset+0x56>
 8007952:	2300      	movs	r3, #0
	if (value != 0)	{
 8007954:	b18b      	cbz	r3, 800797a <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8007956:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2101      	movs	r1, #1
 800795c:	4798      	blx	r3
 800795e:	203c      	movs	r0, #60	; 0x3c
 8007960:	2100      	movs	r1, #0
 8007962:	f003 ff95 	bl	800b890 <z_impl_k_sleep>
}
 8007966:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8007968:	2300      	movs	r3, #0
 800796a:	e7e2      	b.n	8007932 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 800796c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2101      	movs	r1, #1
 8007972:	4798      	blx	r3
 8007974:	e7e2      	b.n	800793c <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8007976:	2301      	movs	r3, #1
 8007978:	e7ec      	b.n	8007954 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 800797a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2101      	movs	r1, #1
 8007980:	4798      	blx	r3
 8007982:	e7ec      	b.n	800795e <SX1276Reset+0x3e>
 8007984:	20000ffc 	.word	0x20000ffc

08007988 <SX1276IoIrqInit>:
{
 8007988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800798a:	b095      	sub	sp, #84	; 0x54
 800798c:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800798e:	2400      	movs	r4, #0
 8007990:	e04c      	b.n	8007a2c <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8007992:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <SX1276IoIrqInit+0x174>)
 8007994:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	4b59      	ldr	r3, [pc, #356]	; (8007b00 <SX1276IoIrqInit+0x178>)
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	9000      	str	r0, [sp, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	2201      	movs	r2, #1
 80079a4:	4957      	ldr	r1, [pc, #348]	; (8007b04 <SX1276IoIrqInit+0x17c>)
 80079a6:	f007 fbdb 	bl	800f160 <z_log_msg2_runtime_create>
}
 80079aa:	b015      	add	sp, #84	; 0x54
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80079ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80079b2:	f013 0f01 	tst.w	r3, #1
 80079b6:	d06f      	beq.n	8007a98 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80079b8:	2301      	movs	r3, #1
 80079ba:	fa03 fc01 	lsl.w	ip, r3, r1
 80079be:	6833      	ldr	r3, [r6, #0]
 80079c0:	ea43 030c 	orr.w	r3, r3, ip
 80079c4:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 80079ca:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80079ce:	4b4e      	ldr	r3, [pc, #312]	; (8007b08 <SX1276IoIrqInit+0x180>)
 80079d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 80079d4:	4b49      	ldr	r3, [pc, #292]	; (8007afc <SX1276IoIrqInit+0x174>)
 80079d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079da:	791e      	ldrb	r6, [r3, #4]
 80079dc:	2301      	movs	r3, #1
 80079de:	40b3      	lsls	r3, r6
	callback->handler = handler;
 80079e0:	4a4a      	ldr	r2, [pc, #296]	; (8007b0c <SX1276IoIrqInit+0x184>)
 80079e2:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 80079e4:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 80079e6:	1d23      	adds	r3, r4, #4
 80079e8:	4a49      	ldr	r2, [pc, #292]	; (8007b10 <SX1276IoIrqInit+0x188>)
 80079ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079ee:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 80079f0:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d057      	beq.n	8007aa8 <SX1276IoIrqInit+0x120>
	return api->manage_callback(port, callback, true);
 80079f8:	2201      	movs	r2, #1
 80079fa:	4798      	blx	r3
 80079fc:	2800      	cmp	r0, #0
 80079fe:	db56      	blt.n	8007aae <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8007a00:	1d23      	adds	r3, r4, #4
 8007a02:	4a43      	ldr	r2, [pc, #268]	; (8007b10 <SX1276IoIrqInit+0x188>)
 8007a04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a08:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007a0a:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8007a0c:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	2301      	movs	r3, #1
 8007a12:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8007a14:	421a      	tst	r2, r3
 8007a16:	d16d      	bne.n	8007af4 <SX1276IoIrqInit+0x16c>
 8007a18:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8007a1c:	698f      	ldr	r7, [r1, #24]
 8007a1e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8007a22:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8007a26:	4631      	mov	r1, r6
 8007a28:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007a2a:	3401      	adds	r4, #1
 8007a2c:	2c03      	cmp	r4, #3
 8007a2e:	d8bc      	bhi.n	80079aa <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 8007a30:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f8      	beq.n	8007a2a <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8007a38:	4b30      	ldr	r3, [pc, #192]	; (8007afc <SX1276IoIrqInit+0x174>)
 8007a3a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8007a3e:	f002 fde7 	bl	800a610 <z_impl_device_get_binding>
 8007a42:	1d23      	adds	r3, r4, #4
 8007a44:	4a32      	ldr	r2, [pc, #200]	; (8007b10 <SX1276IoIrqInit+0x188>)
 8007a46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a4a:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d0a0      	beq.n	8007992 <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8007a50:	4e2f      	ldr	r6, [pc, #188]	; (8007b10 <SX1276IoIrqInit+0x188>)
 8007a52:	1ca0      	adds	r0, r4, #2
 8007a54:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8007a58:	492e      	ldr	r1, [pc, #184]	; (8007b14 <SX1276IoIrqInit+0x18c>)
 8007a5a:	3004      	adds	r0, #4
 8007a5c:	f007 ff94 	bl	800f988 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007a60:	1d23      	adds	r3, r4, #4
 8007a62:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007a66:	6870      	ldr	r0, [r6, #4]
 8007a68:	4b24      	ldr	r3, [pc, #144]	; (8007afc <SX1276IoIrqInit+0x174>)
 8007a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a6e:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8007a70:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007a72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8007a7a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8007a7c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8007a7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	d093      	beq.n	80079ae <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007a86:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007a8a:	d090      	beq.n	80079ae <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8007a8c:	f013 0f01 	tst.w	r3, #1
 8007a90:	d08d      	beq.n	80079ae <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007a92:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007a96:	e78a      	b.n	80079ae <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007a98:	2301      	movs	r3, #1
 8007a9a:	fa03 fc01 	lsl.w	ip, r3, r1
 8007a9e:	6833      	ldr	r3, [r6, #0]
 8007aa0:	ea23 030c 	bic.w	r3, r3, ip
 8007aa4:	6033      	str	r3, [r6, #0]
 8007aa6:	e78e      	b.n	80079c6 <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8007aa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007aac:	e7a6      	b.n	80079fc <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <SX1276IoIrqInit+0x190>)
 8007ab6:	9312      	str	r3, [sp, #72]	; 0x48
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9305      	str	r3, [sp, #20]
 8007abc:	2102      	movs	r1, #2
 8007abe:	f88d 1014 	strb.w	r1, [sp, #20]
 8007ac2:	9905      	ldr	r1, [sp, #20]
 8007ac4:	9111      	str	r1, [sp, #68]	; 0x44
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	f363 0100 	bfi	r1, r3, #0, #1
 8007acc:	f363 0141 	bfi	r1, r3, #1, #1
 8007ad0:	f363 0182 	bfi	r1, r3, #2, #1
 8007ad4:	f363 01c5 	bfi	r1, r3, #3, #3
 8007ad8:	f362 1188 	bfi	r1, r2, #6, #3
 8007adc:	2208      	movs	r2, #8
 8007ade:	f362 2152 	bfi	r1, r2, #9, #10
 8007ae2:	f363 41de 	bfi	r1, r3, #19, #12
 8007ae6:	f363 71df 	bfi	r1, r3, #31, #1
 8007aea:	aa11      	add	r2, sp, #68	; 0x44
 8007aec:	4805      	ldr	r0, [pc, #20]	; (8007b04 <SX1276IoIrqInit+0x17c>)
 8007aee:	f006 fcca 	bl	800e486 <z_impl_z_log_msg2_static_create>
			return;
 8007af2:	e75a      	b.n	80079aa <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8007af4:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8007af8:	e790      	b.n	8007a1c <SX1276IoIrqInit+0x94>
 8007afa:	bf00      	nop
 8007afc:	08011cf0 	.word	0x08011cf0
 8007b00:	08011ad4 	.word	0x08011ad4
 8007b04:	08010bb8 	.word	0x08010bb8
 8007b08:	20000fcc 	.word	0x20000fcc
 8007b0c:	080078d1 	.word	0x080078d1
 8007b10:	20000ffc 	.word	0x20000ffc
 8007b14:	08007861 	.word	0x08007861
 8007b18:	08011b50 	.word	0x08011b50

08007b1c <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	b090      	sub	sp, #64	; 0x40
 8007b20:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8007b22:	b2c0      	uxtb	r0, r0
 8007b24:	f007 fb2e 	bl	800f184 <sx127x_read>
	if (ret < 0) {
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	db01      	blt.n	8007b30 <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8007b2c:	b010      	add	sp, #64	; 0x40
 8007b2e:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 8007b30:	2201      	movs	r2, #1
 8007b32:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <SX1276ReadBuffer+0x5c>)
 8007b38:	930e      	str	r3, [sp, #56]	; 0x38
 8007b3a:	940f      	str	r4, [sp, #60]	; 0x3c
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	2103      	movs	r1, #3
 8007b42:	f88d 1004 	strb.w	r1, [sp, #4]
 8007b46:	9901      	ldr	r1, [sp, #4]
 8007b48:	910d      	str	r1, [sp, #52]	; 0x34
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f363 0100 	bfi	r1, r3, #0, #1
 8007b50:	f363 0141 	bfi	r1, r3, #1, #1
 8007b54:	f363 0182 	bfi	r1, r3, #2, #1
 8007b58:	f363 01c5 	bfi	r1, r3, #3, #3
 8007b5c:	f362 1188 	bfi	r1, r2, #6, #3
 8007b60:	220c      	movs	r2, #12
 8007b62:	f362 2152 	bfi	r1, r2, #9, #10
 8007b66:	f363 41de 	bfi	r1, r3, #19, #12
 8007b6a:	f363 71df 	bfi	r1, r3, #31, #1
 8007b6e:	aa0d      	add	r2, sp, #52	; 0x34
 8007b70:	4802      	ldr	r0, [pc, #8]	; (8007b7c <SX1276ReadBuffer+0x60>)
 8007b72:	f006 fc88 	bl	800e486 <z_impl_z_log_msg2_static_create>
}
 8007b76:	e7d9      	b.n	8007b2c <SX1276ReadBuffer+0x10>
 8007b78:	08011b70 	.word	0x08011b70
 8007b7c:	08010bb8 	.word	0x08010bb8

08007b80 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8007b80:	b530      	push	{r4, r5, lr}
 8007b82:	b0a7      	sub	sp, #156	; 0x9c
 8007b84:	4604      	mov	r4, r0
 8007b86:	4882      	ldr	r0, [pc, #520]	; (8007d90 <sx127x_lora_init+0x210>)
 8007b88:	f002 fd42 	bl	800a610 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8007b8c:	4b81      	ldr	r3, [pc, #516]	; (8007d94 <sx127x_lora_init+0x214>)
 8007b8e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8007b90:	b300      	cbz	r0, 8007bd4 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8007b92:	4b80      	ldr	r3, [pc, #512]	; (8007d94 <sx127x_lora_init+0x214>)
 8007b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b98:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8007b9a:	4a7f      	ldr	r2, [pc, #508]	; (8007d98 <sx127x_lora_init+0x218>)
 8007b9c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	81da      	strh	r2, [r3, #14]
 8007ba2:	487e      	ldr	r0, [pc, #504]	; (8007d9c <sx127x_lora_init+0x21c>)
 8007ba4:	f002 fd34 	bl	800a610 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8007ba8:	4b7d      	ldr	r3, [pc, #500]	; (8007da0 <sx127x_lora_init+0x220>)
 8007baa:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8007bac:	b1f8      	cbz	r0, 8007bee <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8007bae:	4b7c      	ldr	r3, [pc, #496]	; (8007da0 <sx127x_lora_init+0x220>)
 8007bb0:	2206      	movs	r2, #6
 8007bb2:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8007bb8:	2200      	movs	r2, #0
 8007bba:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8007bbc:	4875      	ldr	r0, [pc, #468]	; (8007d94 <sx127x_lora_init+0x214>)
 8007bbe:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8007bc0:	f641 2307 	movw	r3, #6663	; 0x1a07
 8007bc4:	4975      	ldr	r1, [pc, #468]	; (8007d9c <sx127x_lora_init+0x21c>)
 8007bc6:	f7ff fbf9 	bl	80073bc <__sx12xx_configure_pin>
	if (ret) {
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b1e0      	cbz	r0, 8007c08 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8007bce:	4628      	mov	r0, r5
 8007bd0:	b027      	add	sp, #156	; 0x9c
 8007bd2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8007bd4:	4b6e      	ldr	r3, [pc, #440]	; (8007d90 <sx127x_lora_init+0x210>)
 8007bd6:	9302      	str	r3, [sp, #8]
 8007bd8:	4b72      	ldr	r3, [pc, #456]	; (8007da4 <sx127x_lora_init+0x224>)
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	9000      	str	r0, [sp, #0]
 8007bde:	4603      	mov	r3, r0
 8007be0:	2201      	movs	r2, #1
 8007be2:	4971      	ldr	r1, [pc, #452]	; (8007da8 <sx127x_lora_init+0x228>)
 8007be4:	f007 fabc 	bl	800f160 <z_log_msg2_runtime_create>
		return -EINVAL;
 8007be8:	f06f 0515 	mvn.w	r5, #21
 8007bec:	e7ef      	b.n	8007bce <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 8007bee:	4b6b      	ldr	r3, [pc, #428]	; (8007d9c <sx127x_lora_init+0x21c>)
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <sx127x_lora_init+0x224>)
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	9000      	str	r0, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	496a      	ldr	r1, [pc, #424]	; (8007da8 <sx127x_lora_init+0x228>)
 8007bfe:	f007 faaf 	bl	800f160 <z_log_msg2_runtime_create>
		return -EIO;
 8007c02:	f06f 0504 	mvn.w	r5, #4
 8007c06:	e7e2      	b.n	8007bce <sx127x_lora_init+0x4e>
 8007c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	f003 fe3f 	bl	800b890 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007c12:	4b60      	ldr	r3, [pc, #384]	; (8007d94 <sx127x_lora_init+0x214>)
 8007c14:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007c16:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f013 0f01 	tst.w	r3, #1
 8007c1e:	d165      	bne.n	8007cec <sx127x_lora_init+0x16c>
 8007c20:	462b      	mov	r3, r5
	if (value != 0)	{
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d064      	beq.n	8007cf0 <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 8007c26:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4798      	blx	r3
 8007c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c32:	2100      	movs	r1, #0
 8007c34:	f003 fe2c 	bl	800b890 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007c3e:	2042      	movs	r0, #66	; 0x42
 8007c40:	f007 faa0 	bl	800f184 <sx127x_read>
	if (ret < 0) {
 8007c44:	2800      	cmp	r0, #0
 8007c46:	db58      	blt.n	8007cfa <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c4e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8007c52:	4a56      	ldr	r2, [pc, #344]	; (8007dac <sx127x_lora_init+0x22c>)
 8007c54:	9212      	str	r2, [sp, #72]	; 0x48
 8007c56:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	2203      	movs	r2, #3
 8007c5e:	f88d 2010 	strb.w	r2, [sp, #16]
 8007c62:	9904      	ldr	r1, [sp, #16]
 8007c64:	9111      	str	r1, [sp, #68]	; 0x44
 8007c66:	4619      	mov	r1, r3
 8007c68:	f363 0100 	bfi	r1, r3, #0, #1
 8007c6c:	f363 0141 	bfi	r1, r3, #1, #1
 8007c70:	f363 0182 	bfi	r1, r3, #2, #1
 8007c74:	f363 01c5 	bfi	r1, r3, #3, #3
 8007c78:	f362 1188 	bfi	r1, r2, #6, #3
 8007c7c:	220c      	movs	r2, #12
 8007c7e:	f362 2152 	bfi	r1, r2, #9, #10
 8007c82:	f363 41de 	bfi	r1, r3, #19, #12
 8007c86:	f363 71df 	bfi	r1, r3, #31, #1
 8007c8a:	aa11      	add	r2, sp, #68	; 0x44
 8007c8c:	4846      	ldr	r0, [pc, #280]	; (8007da8 <sx127x_lora_init+0x228>)
 8007c8e:	f006 fbfa 	bl	800e486 <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8007c92:	f007 fa63 	bl	800f15c <sx127x_antenna_configure>
	if (ret < 0) {
 8007c96:	2800      	cmp	r0, #0
 8007c98:	db54      	blt.n	8007d44 <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff fdba 	bl	8007814 <sx12xx_init>
	if (ret < 0) {
 8007ca0:	1e04      	subs	r4, r0, #0
 8007ca2:	da94      	bge.n	8007bce <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007caa:	4b41      	ldr	r3, [pc, #260]	; (8007db0 <sx127x_lora_init+0x230>)
 8007cac:	9318      	str	r3, [sp, #96]	; 0x60
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	f88d 1010 	strb.w	r1, [sp, #16]
 8007cb8:	9904      	ldr	r1, [sp, #16]
 8007cba:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	f363 0100 	bfi	r1, r3, #0, #1
 8007cc2:	f363 0141 	bfi	r1, r3, #1, #1
 8007cc6:	f363 0182 	bfi	r1, r3, #2, #1
 8007cca:	f363 01c5 	bfi	r1, r3, #3, #3
 8007cce:	f362 1188 	bfi	r1, r2, #6, #3
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	f362 2152 	bfi	r1, r2, #9, #10
 8007cd8:	f363 41de 	bfi	r1, r3, #19, #12
 8007cdc:	f363 71df 	bfi	r1, r3, #31, #1
 8007ce0:	aa17      	add	r2, sp, #92	; 0x5c
 8007ce2:	4831      	ldr	r0, [pc, #196]	; (8007da8 <sx127x_lora_init+0x228>)
 8007ce4:	f006 fbcf 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return ret;
 8007ce8:	4625      	mov	r5, r4
 8007cea:	e770      	b.n	8007bce <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e798      	b.n	8007c22 <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8007cf0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4798      	blx	r3
 8007cf8:	e799      	b.n	8007c2e <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d00:	4b2c      	ldr	r3, [pc, #176]	; (8007db4 <sx127x_lora_init+0x234>)
 8007d02:	9324      	str	r3, [sp, #144]	; 0x90
 8007d04:	2300      	movs	r3, #0
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	2102      	movs	r1, #2
 8007d0a:	f88d 1010 	strb.w	r1, [sp, #16]
 8007d0e:	9904      	ldr	r1, [sp, #16]
 8007d10:	9123      	str	r1, [sp, #140]	; 0x8c
 8007d12:	4619      	mov	r1, r3
 8007d14:	f363 0100 	bfi	r1, r3, #0, #1
 8007d18:	f363 0141 	bfi	r1, r3, #1, #1
 8007d1c:	f363 0182 	bfi	r1, r3, #2, #1
 8007d20:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d24:	f362 1188 	bfi	r1, r2, #6, #3
 8007d28:	2208      	movs	r2, #8
 8007d2a:	f362 2152 	bfi	r1, r2, #9, #10
 8007d2e:	f363 41de 	bfi	r1, r3, #19, #12
 8007d32:	f363 71df 	bfi	r1, r3, #31, #1
 8007d36:	aa23      	add	r2, sp, #140	; 0x8c
 8007d38:	481b      	ldr	r0, [pc, #108]	; (8007da8 <sx127x_lora_init+0x228>)
 8007d3a:	f006 fba4 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007d3e:	f06f 0504 	mvn.w	r5, #4
 8007d42:	e744      	b.n	8007bce <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 8007d44:	2201      	movs	r2, #1
 8007d46:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <sx127x_lora_init+0x238>)
 8007d4c:	931e      	str	r3, [sp, #120]	; 0x78
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	2102      	movs	r1, #2
 8007d54:	f88d 1010 	strb.w	r1, [sp, #16]
 8007d58:	9904      	ldr	r1, [sp, #16]
 8007d5a:	911d      	str	r1, [sp, #116]	; 0x74
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f363 0100 	bfi	r1, r3, #0, #1
 8007d62:	f363 0141 	bfi	r1, r3, #1, #1
 8007d66:	f363 0182 	bfi	r1, r3, #2, #1
 8007d6a:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d6e:	f362 1188 	bfi	r1, r2, #6, #3
 8007d72:	2208      	movs	r2, #8
 8007d74:	f362 2152 	bfi	r1, r2, #9, #10
 8007d78:	f363 41de 	bfi	r1, r3, #19, #12
 8007d7c:	f363 71df 	bfi	r1, r3, #31, #1
 8007d80:	aa1d      	add	r2, sp, #116	; 0x74
 8007d82:	4809      	ldr	r0, [pc, #36]	; (8007da8 <sx127x_lora_init+0x228>)
 8007d84:	f006 fb7f 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007d88:	f06f 0504 	mvn.w	r5, #4
 8007d8c:	e71f      	b.n	8007bce <sx127x_lora_init+0x4e>
 8007d8e:	bf00      	nop
 8007d90:	08011a5c 	.word	0x08011a5c
 8007d94:	20000ffc 	.word	0x20000ffc
 8007d98:	0007a120 	.word	0x0007a120
 8007d9c:	08011730 	.word	0x08011730
 8007da0:	20001060 	.word	0x20001060
 8007da4:	08011ad4 	.word	0x08011ad4
 8007da8:	08010bb8 	.word	0x08010bb8
 8007dac:	08011bac 	.word	0x08011bac
 8007db0:	08011be4 	.word	0x08011be4
 8007db4:	08011b90 	.word	0x08011b90
 8007db8:	08011bc8 	.word	0x08011bc8

08007dbc <SX1276WriteBuffer>:
{
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	b090      	sub	sp, #64	; 0x40
 8007dc0:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8007dc2:	b2c0      	uxtb	r0, r0
 8007dc4:	f007 f9e5 	bl	800f192 <sx127x_write>
	if (ret < 0) {
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	db01      	blt.n	8007dd0 <SX1276WriteBuffer+0x14>
}
 8007dcc:	b010      	add	sp, #64	; 0x40
 8007dce:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <SX1276WriteBuffer+0x5c>)
 8007dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8007dda:	940f      	str	r4, [sp, #60]	; 0x3c
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	2103      	movs	r1, #3
 8007de2:	f88d 1004 	strb.w	r1, [sp, #4]
 8007de6:	9901      	ldr	r1, [sp, #4]
 8007de8:	910d      	str	r1, [sp, #52]	; 0x34
 8007dea:	4619      	mov	r1, r3
 8007dec:	f363 0100 	bfi	r1, r3, #0, #1
 8007df0:	f363 0141 	bfi	r1, r3, #1, #1
 8007df4:	f363 0182 	bfi	r1, r3, #2, #1
 8007df8:	f363 01c5 	bfi	r1, r3, #3, #3
 8007dfc:	f362 1188 	bfi	r1, r2, #6, #3
 8007e00:	220c      	movs	r2, #12
 8007e02:	f362 2152 	bfi	r1, r2, #9, #10
 8007e06:	f363 41de 	bfi	r1, r3, #19, #12
 8007e0a:	f363 71df 	bfi	r1, r3, #31, #1
 8007e0e:	aa0d      	add	r2, sp, #52	; 0x34
 8007e10:	4802      	ldr	r0, [pc, #8]	; (8007e1c <SX1276WriteBuffer+0x60>)
 8007e12:	f006 fb38 	bl	800e486 <z_impl_z_log_msg2_static_create>
}
 8007e16:	e7d9      	b.n	8007dcc <SX1276WriteBuffer+0x10>
 8007e18:	08011c08 	.word	0x08011c08
 8007e1c:	08010bb8 	.word	0x08010bb8

08007e20 <SX1276SetRfTxPower>:
{
 8007e20:	b530      	push	{r4, r5, lr}
 8007e22:	b09d      	sub	sp, #116	; 0x74
 8007e24:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 8007e2c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8007e30:	2201      	movs	r2, #1
 8007e32:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007e36:	204d      	movs	r0, #77	; 0x4d
 8007e38:	f007 f9a4 	bl	800f184 <sx127x_read>
	if (ret < 0) {
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	db2e      	blt.n	8007e9e <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8007e40:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 8007e44:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8007e48:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 8007e4c:	2214      	movs	r2, #20
 8007e4e:	2102      	movs	r1, #2
 8007e50:	4628      	mov	r0, r5
 8007e52:	f007 f979 	bl	800f148 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8007e56:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 8007e62:	2811      	cmp	r0, #17
 8007e64:	dd3e      	ble.n	8007ee4 <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8007e66:	f044 0407 	orr.w	r4, r4, #7
 8007e6a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007e6e:	3805      	subs	r0, #5
 8007e70:	f000 000f 	and.w	r0, r0, #15
 8007e74:	4318      	orrs	r0, r3
 8007e76:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007e80:	2009      	movs	r0, #9
 8007e82:	f007 f986 	bl	800f192 <sx127x_write>
	if (ret < 0) {
 8007e86:	2800      	cmp	r0, #0
 8007e88:	db37      	blt.n	8007efa <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007e90:	204d      	movs	r0, #77	; 0x4d
 8007e92:	f007 f97e 	bl	800f192 <sx127x_write>
	if (ret < 0) {
 8007e96:	2800      	cmp	r0, #0
 8007e98:	db52      	blt.n	8007f40 <SX1276SetRfTxPower+0x120>
}
 8007e9a:	b01d      	add	sp, #116	; 0x74
 8007e9c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007ea4:	4b38      	ldr	r3, [pc, #224]	; (8007f88 <SX1276SetRfTxPower+0x168>)
 8007ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	2102      	movs	r1, #2
 8007eae:	f88d 1000 	strb.w	r1, [sp]
 8007eb2:	9900      	ldr	r1, [sp, #0]
 8007eb4:	9119      	str	r1, [sp, #100]	; 0x64
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f363 0100 	bfi	r1, r3, #0, #1
 8007ebc:	f363 0141 	bfi	r1, r3, #1, #1
 8007ec0:	f363 0182 	bfi	r1, r3, #2, #1
 8007ec4:	f363 01c5 	bfi	r1, r3, #3, #3
 8007ec8:	f362 1188 	bfi	r1, r2, #6, #3
 8007ecc:	2208      	movs	r2, #8
 8007ece:	f362 2152 	bfi	r1, r2, #9, #10
 8007ed2:	f363 41de 	bfi	r1, r3, #19, #12
 8007ed6:	f363 71df 	bfi	r1, r3, #31, #1
 8007eda:	aa19      	add	r2, sp, #100	; 0x64
 8007edc:	482b      	ldr	r0, [pc, #172]	; (8007f8c <SX1276SetRfTxPower+0x16c>)
 8007ede:	f006 fad2 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return;
 8007ee2:	e7da      	b.n	8007e9a <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8007ee4:	f044 0404 	orr.w	r4, r4, #4
 8007ee8:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007eec:	3802      	subs	r0, #2
 8007eee:	f000 000f 	and.w	r0, r0, #15
 8007ef2:	4318      	orrs	r0, r3
 8007ef4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8007ef8:	e7bf      	b.n	8007e7a <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 8007efa:	2201      	movs	r2, #1
 8007efc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007f00:	4b23      	ldr	r3, [pc, #140]	; (8007f90 <SX1276SetRfTxPower+0x170>)
 8007f02:	9314      	str	r3, [sp, #80]	; 0x50
 8007f04:	2300      	movs	r3, #0
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2102      	movs	r1, #2
 8007f0a:	f88d 1000 	strb.w	r1, [sp]
 8007f0e:	9900      	ldr	r1, [sp, #0]
 8007f10:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f12:	4619      	mov	r1, r3
 8007f14:	f363 0100 	bfi	r1, r3, #0, #1
 8007f18:	f363 0141 	bfi	r1, r3, #1, #1
 8007f1c:	f363 0182 	bfi	r1, r3, #2, #1
 8007f20:	f363 01c5 	bfi	r1, r3, #3, #3
 8007f24:	f362 1188 	bfi	r1, r2, #6, #3
 8007f28:	2208      	movs	r2, #8
 8007f2a:	f362 2152 	bfi	r1, r2, #9, #10
 8007f2e:	f363 41de 	bfi	r1, r3, #19, #12
 8007f32:	f363 71df 	bfi	r1, r3, #31, #1
 8007f36:	aa13      	add	r2, sp, #76	; 0x4c
 8007f38:	4814      	ldr	r0, [pc, #80]	; (8007f8c <SX1276SetRfTxPower+0x16c>)
 8007f3a:	f006 faa4 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return;
 8007f3e:	e7ac      	b.n	8007e9a <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007f46:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <SX1276SetRfTxPower+0x174>)
 8007f48:	930e      	str	r3, [sp, #56]	; 0x38
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2102      	movs	r1, #2
 8007f50:	f88d 1000 	strb.w	r1, [sp]
 8007f54:	9900      	ldr	r1, [sp, #0]
 8007f56:	910d      	str	r1, [sp, #52]	; 0x34
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f363 0100 	bfi	r1, r3, #0, #1
 8007f5e:	f363 0141 	bfi	r1, r3, #1, #1
 8007f62:	f363 0182 	bfi	r1, r3, #2, #1
 8007f66:	f363 01c5 	bfi	r1, r3, #3, #3
 8007f6a:	f362 1188 	bfi	r1, r2, #6, #3
 8007f6e:	2208      	movs	r2, #8
 8007f70:	f362 2152 	bfi	r1, r2, #9, #10
 8007f74:	f363 41de 	bfi	r1, r3, #19, #12
 8007f78:	f363 71df 	bfi	r1, r3, #31, #1
 8007f7c:	aa0d      	add	r2, sp, #52	; 0x34
 8007f7e:	4803      	ldr	r0, [pc, #12]	; (8007f8c <SX1276SetRfTxPower+0x16c>)
 8007f80:	f006 fa81 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return;
 8007f84:	e789      	b.n	8007e9a <SX1276SetRfTxPower+0x7a>
 8007f86:	bf00      	nop
 8007f88:	08011c28 	.word	0x08011c28
 8007f8c:	08010bb8 	.word	0x08010bb8
 8007f90:	08011c40 	.word	0x08011c40
 8007f94:	08011c5c 	.word	0x08011c5c

08007f98 <SX1276GetDio1PinState>:
{
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <SX1276GetDio1PinState+0x34>)
 8007f9e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8007fa0:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8007fa2:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	a901      	add	r1, sp, #4
 8007fa8:	4798      	blx	r3
	if (ret == 0) {
 8007faa:	4603      	mov	r3, r0
 8007fac:	b918      	cbnz	r0, 8007fb6 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8007fae:	6821      	ldr	r1, [r4, #0]
 8007fb0:	9a01      	ldr	r2, [sp, #4]
 8007fb2:	404a      	eors	r2, r1
 8007fb4:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8007fb6:	b913      	cbnz	r3, 8007fbe <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc02      	bgt.n	8007fc8 <SX1276GetDio1PinState+0x30>
	return 0U;
 8007fc2:	2000      	movs	r0, #0
}
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd10      	pop	{r4, pc}
		return 1U;
 8007fc8:	2001      	movs	r0, #1
 8007fca:	e7fb      	b.n	8007fc4 <SX1276GetDio1PinState+0x2c>
 8007fcc:	20000ffc 	.word	0x20000ffc

08007fd0 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <TimerInsertTimer+0x28>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8007fd4:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8007fd6:	e001      	b.n	8007fdc <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8007fd8:	461a      	mov	r2, r3
            next = next->Next;
 8007fda:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8007fdc:	6951      	ldr	r1, [r2, #20]
 8007fde:	b139      	cbz	r1, 8007ff0 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	f8d0 c000 	ldr.w	ip, [r0]
 8007fe6:	458c      	cmp	ip, r1
 8007fe8:	d8f6      	bhi.n	8007fd8 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8007fea:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8007fec:	6143      	str	r3, [r0, #20]
            return;
 8007fee:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 8007ff0:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	6143      	str	r3, [r0, #20]
}
 8007ff6:	4770      	bx	lr
 8007ff8:	2000106c 	.word	0x2000106c

08007ffc <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <TimerExists+0x18>)
 8007ffe:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8008000:	e000      	b.n	8008004 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8008002:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8008004:	b11b      	cbz	r3, 800800e <TimerExists+0x12>
        if( cur == obj )
 8008006:	4283      	cmp	r3, r0
 8008008:	d1fb      	bne.n	8008002 <TimerExists+0x6>
            return true;
 800800a:	2001      	movs	r0, #1
    }
    return false;
}
 800800c:	4770      	bx	lr
    return false;
 800800e:	2000      	movs	r0, #0
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000106c 	.word	0x2000106c

08008018 <TimerInsertNewHeadTimer>:
{
 8008018:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <TimerInsertNewHeadTimer+0x18>)
 800801c:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 800801e:	b10b      	cbz	r3, 8008024 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8008020:	2200      	movs	r2, #0
 8008022:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8008024:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8008026:	4b02      	ldr	r3, [pc, #8]	; (8008030 <TimerInsertNewHeadTimer+0x18>)
 8008028:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 800802a:	f007 f8c6 	bl	800f1ba <TimerSetTimeout>
}
 800802e:	bd08      	pop	{r3, pc}
 8008030:	2000106c 	.word	0x2000106c

08008034 <TimerStart>:
{
 8008034:	b510      	push	{r4, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800803a:	a801      	add	r0, sp, #4
 800803c:	f007 f867 	bl	800f10e <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008040:	b1f4      	cbz	r4, 8008080 <TimerStart+0x4c>
 8008042:	4620      	mov	r0, r4
 8008044:	f7ff ffda 	bl	8007ffc <TimerExists>
 8008048:	b9d0      	cbnz	r0, 8008080 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 800804a:	6863      	ldr	r3, [r4, #4]
 800804c:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800804e:	2301      	movs	r3, #1
 8008050:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8008052:	2300      	movs	r3, #0
 8008054:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8008056:	4b11      	ldr	r3, [pc, #68]	; (800809c <TimerStart+0x68>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	b1ab      	cbz	r3, 8008088 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 800805c:	f7ff f8e0 	bl	8007220 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	4418      	add	r0, r3
 8008064:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8008066:	4b0d      	ldr	r3, [pc, #52]	; (800809c <TimerStart+0x68>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4298      	cmp	r0, r3
 800806e:	d211      	bcs.n	8008094 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8008070:	4620      	mov	r0, r4
 8008072:	f7ff ffd1 	bl	8008018 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8008076:	a801      	add	r0, sp, #4
 8008078:	f007 f853 	bl	800f122 <BoardCriticalSectionEnd>
}
 800807c:	b002      	add	sp, #8
 800807e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8008080:	a801      	add	r0, sp, #4
 8008082:	f007 f84e 	bl	800f122 <BoardCriticalSectionEnd>
        return;
 8008086:	e7f9      	b.n	800807c <TimerStart+0x48>
        RtcSetTimerContext( );
 8008088:	f7ff f8f6 	bl	8007278 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff ffc3 	bl	8008018 <TimerInsertNewHeadTimer>
 8008092:	e7f0      	b.n	8008076 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff ff9b 	bl	8007fd0 <TimerInsertTimer>
 800809a:	e7ec      	b.n	8008076 <TimerStart+0x42>
 800809c:	2000106c 	.word	0x2000106c

080080a0 <TimerIrqHandler>:
{
 80080a0:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80080a2:	f7ff f8f5 	bl	8007290 <RtcGetTimerContext>
 80080a6:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 80080a8:	f7ff f8e6 	bl	8007278 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 80080ac:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <TimerIrqHandler+0x84>)
 80080b2:	681e      	ldr	r6, [r3, #0]
 80080b4:	b16e      	cbz	r6, 80080d2 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80080b6:	4632      	mov	r2, r6
 80080b8:	e002      	b.n	80080c0 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 80080ba:	2100      	movs	r1, #0
 80080bc:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80080be:	6952      	ldr	r2, [r2, #20]
 80080c0:	6953      	ldr	r3, [r2, #20]
 80080c2:	b133      	cbz	r3, 80080d2 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 80080c4:	6819      	ldr	r1, [r3, #0]
 80080c6:	4561      	cmp	r1, ip
 80080c8:	d9f7      	bls.n	80080ba <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 80080ca:	1a2c      	subs	r4, r5, r0
 80080cc:	4421      	add	r1, r4
 80080ce:	6019      	str	r1, [r3, #0]
 80080d0:	e7f5      	b.n	80080be <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 80080d2:	b146      	cbz	r6, 80080e6 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 80080d4:	6972      	ldr	r2, [r6, #20]
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <TimerIrqHandler+0x84>)
 80080d8:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 80080da:	2300      	movs	r3, #0
 80080dc:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80080de:	68f3      	ldr	r3, [r6, #12]
 80080e0:	b1a3      	cbz	r3, 800810c <TimerIrqHandler+0x6c>
 80080e2:	6930      	ldr	r0, [r6, #16]
 80080e4:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <TimerIrqHandler+0x84>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	b18b      	cbz	r3, 8008110 <TimerIrqHandler+0x70>
 80080ec:	681c      	ldr	r4, [r3, #0]
 80080ee:	f7ff f897 	bl	8007220 <RtcGetTimerElapsedTime>
 80080f2:	4284      	cmp	r4, r0
 80080f4:	d20c      	bcs.n	8008110 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 80080f6:	4a0b      	ldr	r2, [pc, #44]	; (8008124 <TimerIrqHandler+0x84>)
 80080f8:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 80080fa:	6959      	ldr	r1, [r3, #20]
 80080fc:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 80080fe:	2200      	movs	r2, #0
 8008100:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	b11a      	cbz	r2, 800810e <TimerIrqHandler+0x6e>
 8008106:	6918      	ldr	r0, [r3, #16]
 8008108:	4790      	blx	r2
 800810a:	e7ec      	b.n	80080e6 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 800810c:	e7fe      	b.n	800810c <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 800810e:	e7fe      	b.n	800810e <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8008110:	4b04      	ldr	r3, [pc, #16]	; (8008124 <TimerIrqHandler+0x84>)
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	b108      	cbz	r0, 800811a <TimerIrqHandler+0x7a>
 8008116:	7a43      	ldrb	r3, [r0, #9]
 8008118:	b103      	cbz	r3, 800811c <TimerIrqHandler+0x7c>
}
 800811a:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 800811c:	f007 f84d 	bl	800f1ba <TimerSetTimeout>
}
 8008120:	e7fb      	b.n	800811a <TimerIrqHandler+0x7a>
 8008122:	bf00      	nop
 8008124:	2000106c 	.word	0x2000106c

08008128 <TimerStop>:
{
 8008128:	b510      	push	{r4, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800812e:	a801      	add	r0, sp, #4
 8008130:	f006 ffed 	bl	800f10e <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <TimerStop+0x7c>)
 8008136:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8008138:	b15a      	cbz	r2, 8008152 <TimerStop+0x2a>
 800813a:	b154      	cbz	r4, 8008152 <TimerStop+0x2a>
    obj->IsStarted = false;
 800813c:	2300      	movs	r3, #0
 800813e:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8008140:	42a2      	cmp	r2, r4
 8008142:	d00a      	beq.n	800815a <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8008144:	4613      	mov	r3, r2
        while( cur != NULL )
 8008146:	b32b      	cbz	r3, 8008194 <TimerStop+0x6c>
            if( cur == obj )
 8008148:	42a3      	cmp	r3, r4
 800814a:	d020      	beq.n	800818e <TimerStop+0x66>
                prev = cur;
 800814c:	461a      	mov	r2, r3
                cur = cur->Next;
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	e7f9      	b.n	8008146 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8008152:	a801      	add	r0, sp, #4
 8008154:	f006 ffe5 	bl	800f122 <BoardCriticalSectionEnd>
        return;
 8008158:	e01f      	b.n	800819a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800815a:	7a53      	ldrb	r3, [r2, #9]
 800815c:	b173      	cbz	r3, 800817c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 800815e:	2300      	movs	r3, #0
 8008160:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8008162:	6950      	ldr	r0, [r2, #20]
 8008164:	b120      	cbz	r0, 8008170 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <TimerStop+0x7c>)
 8008168:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 800816a:	f007 f826 	bl	800f1ba <TimerSetTimeout>
 800816e:	e011      	b.n	8008194 <TimerStop+0x6c>
                RtcStopAlarm( );
 8008170:	f7ff f864 	bl	800723c <RtcStopAlarm>
                TimerListHead = NULL;
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <TimerStop+0x7c>)
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	e00b      	b.n	8008194 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 800817c:	6953      	ldr	r3, [r2, #20]
 800817e:	b113      	cbz	r3, 8008186 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8008180:	4a08      	ldr	r2, [pc, #32]	; (80081a4 <TimerStop+0x7c>)
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	e006      	b.n	8008194 <TimerStop+0x6c>
                TimerListHead = NULL;
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <TimerStop+0x7c>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	e002      	b.n	8008194 <TimerStop+0x6c>
                if( cur->Next != NULL )
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	b12b      	cbz	r3, 800819e <TimerStop+0x76>
                    prev->Next = cur;
 8008192:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8008194:	a801      	add	r0, sp, #4
 8008196:	f006 ffc4 	bl	800f122 <BoardCriticalSectionEnd>
}
 800819a:	b002      	add	sp, #8
 800819c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 800819e:	2300      	movs	r3, #0
 80081a0:	6153      	str	r3, [r2, #20]
 80081a2:	e7f7      	b.n	8008194 <TimerStop+0x6c>
 80081a4:	2000106c 	.word	0x2000106c

080081a8 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 80081a8:	4908      	ldr	r1, [pc, #32]	; (80081cc <SX1276ConvertFreqInHzToPllStep+0x24>)
 80081aa:	fba1 3200 	umull	r3, r2, r1, r0
 80081ae:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80081b0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80081b4:	fb03 0012 	mls	r0, r3, r2, r0
 80081b8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80081bc:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80081c0:	fba1 1303 	umull	r1, r3, r1, r3
 80081c4:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 80081c6:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 80081ca:	4770      	bx	lr
 80081cc:	431bde83 	.word	0x431bde83

080081d0 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80081d0:	2300      	movs	r3, #0
 80081d2:	e008      	b.n	80081e6 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 80081d4:	e7fe      	b.n	80081d4 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <GetFskBandwidthRegValue+0x4c>)
 80081d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80081dc:	7908      	ldrb	r0, [r1, #4]
}
 80081de:	bc10      	pop	{r4}
 80081e0:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80081e2:	3301      	adds	r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b14      	cmp	r3, #20
 80081e8:	d817      	bhi.n	800821a <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80081ea:	4619      	mov	r1, r3
 80081ec:	4a0b      	ldr	r2, [pc, #44]	; (800821c <GetFskBandwidthRegValue+0x4c>)
 80081ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80081f2:	4282      	cmp	r2, r0
 80081f4:	d8f5      	bhi.n	80081e2 <GetFskBandwidthRegValue+0x12>
{
 80081f6:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	4c08      	ldr	r4, [pc, #32]	; (800821c <GetFskBandwidthRegValue+0x4c>)
 80081fc:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8008200:	4282      	cmp	r2, r0
 8008202:	d8e8      	bhi.n	80081d6 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008204:	3301      	adds	r3, #1
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b14      	cmp	r3, #20
 800820a:	d8e3      	bhi.n	80081d4 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800820c:	4619      	mov	r1, r3
 800820e:	4a03      	ldr	r2, [pc, #12]	; (800821c <GetFskBandwidthRegValue+0x4c>)
 8008210:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008214:	4282      	cmp	r2, r0
 8008216:	d8f5      	bhi.n	8008204 <GetFskBandwidthRegValue+0x34>
 8008218:	e7ee      	b.n	80081f8 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 800821a:	e7fe      	b.n	800821a <GetFskBandwidthRegValue+0x4a>
 800821c:	08011d28 	.word	0x08011d28

08008220 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8008220:	2801      	cmp	r0, #1
 8008222:	d006      	beq.n	8008232 <SX1276GetLoRaBandwidthInHz+0x12>
 8008224:	2802      	cmp	r0, #2
 8008226:	d006      	beq.n	8008236 <SX1276GetLoRaBandwidthInHz+0x16>
 8008228:	b108      	cbz	r0, 800822e <SX1276GetLoRaBandwidthInHz+0xe>
 800822a:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 800822c:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 800822e:	4803      	ldr	r0, [pc, #12]	; (800823c <SX1276GetLoRaBandwidthInHz+0x1c>)
 8008230:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8008232:	4803      	ldr	r0, [pc, #12]	; (8008240 <SX1276GetLoRaBandwidthInHz+0x20>)
 8008234:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8008236:	4803      	ldr	r0, [pc, #12]	; (8008244 <SX1276GetLoRaBandwidthInHz+0x24>)
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	0001e848 	.word	0x0001e848
 8008240:	0003d090 	.word	0x0003d090
 8008244:	0007a120 	.word	0x0007a120

08008248 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <SX1276OnDio4Irq+0x1c>)
 800824a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800824e:	b93b      	cbnz	r3, 8008260 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008250:	4b04      	ldr	r3, [pc, #16]	; (8008264 <SX1276OnDio4Irq+0x1c>)
 8008252:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008256:	b91b      	cbnz	r3, 8008260 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <SX1276OnDio4Irq+0x1c>)
 800825a:	2201      	movs	r2, #1
 800825c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	200011a4 	.word	0x200011a4

08008268 <SX1276GetStatus>:
}
 8008268:	4b01      	ldr	r3, [pc, #4]	; (8008270 <SX1276GetStatus+0x8>)
 800826a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 800826e:	4770      	bx	lr
 8008270:	200011a4 	.word	0x200011a4

08008274 <SX1276SetChannel>:
{
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8008278:	f7ff ff96 	bl	80081a8 <SX1276ConvertFreqInHzToPllStep>
 800827c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <SX1276SetChannel+0x30>)
 8008280:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8008284:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008288:	2006      	movs	r0, #6
 800828a:	f007 f88d 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800828e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8008292:	2007      	movs	r0, #7
 8008294:	f007 f888 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8008298:	b2e1      	uxtb	r1, r4
 800829a:	2008      	movs	r0, #8
 800829c:	f007 f884 	bl	800f3a8 <SX1276Write>
}
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	200011a4 	.word	0x200011a4

080082a8 <SX1276OnDio3Irq>:
{
 80082a8:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <SX1276OnDio3Irq+0x54>)
 80082ac:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d000      	beq.n	80082b6 <SX1276OnDio3Irq+0xe>
}
 80082b4:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80082b6:	2012      	movs	r0, #18
 80082b8:	f007 f882 	bl	800f3c0 <SX1276Read>
 80082bc:	f010 0f01 	tst.w	r0, #1
 80082c0:	d00d      	beq.n	80082de <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80082c2:	2105      	movs	r1, #5
 80082c4:	2012      	movs	r0, #18
 80082c6:	f007 f86f 	bl	800f3a8 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80082ca:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <SX1276OnDio3Irq+0x58>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <SX1276OnDio3Irq+0xc>
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0ed      	beq.n	80082b4 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 80082d8:	2001      	movs	r0, #1
 80082da:	4798      	blx	r3
 80082dc:	e7ea      	b.n	80082b4 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80082de:	2104      	movs	r1, #4
 80082e0:	2012      	movs	r0, #18
 80082e2:	f007 f861 	bl	800f3a8 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <SX1276OnDio3Irq+0x58>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0e2      	beq.n	80082b4 <SX1276OnDio3Irq+0xc>
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0df      	beq.n	80082b4 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80082f4:	2000      	movs	r0, #0
 80082f6:	4798      	blx	r3
}
 80082f8:	e7dc      	b.n	80082b4 <SX1276OnDio3Irq+0xc>
 80082fa:	bf00      	nop
 80082fc:	200011a4 	.word	0x200011a4
 8008300:	20001070 	.word	0x20001070

08008304 <SX1276OnDio2Irq>:
{
 8008304:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8008306:	4b3a      	ldr	r3, [pc, #232]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008308:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800830c:	2b01      	cmp	r3, #1
 800830e:	d002      	beq.n	8008316 <SX1276OnDio2Irq+0x12>
 8008310:	2b02      	cmp	r3, #2
 8008312:	d051      	beq.n	80083b8 <SX1276OnDio2Irq+0xb4>
}
 8008314:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8008316:	4b36      	ldr	r3, [pc, #216]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008318:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800831c:	b1c3      	cbz	r3, 8008350 <SX1276OnDio2Irq+0x4c>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d1f8      	bne.n	8008314 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008322:	4b33      	ldr	r3, [pc, #204]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008324:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0f3      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800832c:	2102      	movs	r1, #2
 800832e:	2012      	movs	r0, #18
 8008330:	f007 f83a 	bl	800f3a8 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008334:	4b2f      	ldr	r3, [pc, #188]	; (80083f4 <SX1276OnDio2Irq+0xf0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0eb      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
 800833c:	695c      	ldr	r4, [r3, #20]
 800833e:	2c00      	cmp	r4, #0
 8008340:	d0e8      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008342:	201c      	movs	r0, #28
 8008344:	f007 f83c 	bl	800f3c0 <SX1276Read>
 8008348:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800834c:	47a0      	blx	r4
 800834e:	e7e1      	b.n	8008314 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8008350:	4b27      	ldr	r3, [pc, #156]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008354:	b35b      	cbz	r3, 80083ae <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8008356:	4b26      	ldr	r3, [pc, #152]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008358:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0d9      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
 8008360:	4b23      	ldr	r3, [pc, #140]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008362:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1d4      	bne.n	8008314 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 800836a:	4823      	ldr	r0, [pc, #140]	; (80083f8 <SX1276OnDio2Irq+0xf4>)
 800836c:	f7ff fedc 	bl	8008128 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008370:	4c1f      	ldr	r4, [pc, #124]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 8008372:	2301      	movs	r3, #1
 8008374:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008378:	2011      	movs	r0, #17
 800837a:	f007 f821 	bl	800f3c0 <SX1276Read>
 800837e:	0843      	lsrs	r3, r0, #1
 8008380:	425b      	negs	r3, r3
 8008382:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008386:	201b      	movs	r0, #27
 8008388:	f007 f81a 	bl	800f3c0 <SX1276Read>
 800838c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800838e:	201c      	movs	r0, #28
 8008390:	f007 f816 	bl	800f3c0 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008394:	4328      	orrs	r0, r5
 8008396:	f006 ff5a 	bl	800f24e <SX1276ConvertPllStepToFreqInHz>
 800839a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800839e:	200c      	movs	r0, #12
 80083a0:	f007 f80e 	bl	800f3c0 <SX1276Read>
 80083a4:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80083a8:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 80083ac:	e7b2      	b.n	8008314 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80083ae:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80083b6:	e7ce      	b.n	8008356 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 80083ba:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d1a8      	bne.n	8008314 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80083c2:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <SX1276OnDio2Irq+0xec>)
 80083c4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0a3      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80083cc:	2102      	movs	r1, #2
 80083ce:	2012      	movs	r0, #18
 80083d0:	f006 ffea 	bl	800f3a8 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <SX1276OnDio2Irq+0xf0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d09b      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
 80083dc:	695c      	ldr	r4, [r3, #20]
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d098      	beq.n	8008314 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80083e2:	201c      	movs	r0, #28
 80083e4:	f006 ffec 	bl	800f3c0 <SX1276Read>
 80083e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80083ec:	47a0      	blx	r4
}
 80083ee:	e791      	b.n	8008314 <SX1276OnDio2Irq+0x10>
 80083f0:	200011a4 	.word	0x200011a4
 80083f4:	20001070 	.word	0x20001070
 80083f8:	20001074 	.word	0x20001074

080083fc <SX1276OnDio1Irq>:
{
 80083fc:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 80083fe:	4b4b      	ldr	r3, [pc, #300]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008400:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008404:	2b01      	cmp	r3, #1
 8008406:	d002      	beq.n	800840e <SX1276OnDio1Irq+0x12>
 8008408:	2b02      	cmp	r3, #2
 800840a:	d062      	beq.n	80084d2 <SX1276OnDio1Irq+0xd6>
}
 800840c:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008410:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008414:	b1cb      	cbz	r3, 800844a <SX1276OnDio1Irq+0x4e>
 8008416:	2b01      	cmp	r3, #1
 8008418:	d1f8      	bne.n	800840c <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 800841a:	f7ff fdbd 	bl	8007f98 <SX1276GetDio1PinState>
 800841e:	2800      	cmp	r0, #0
 8008420:	d0f4      	beq.n	800840c <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 8008422:	4843      	ldr	r0, [pc, #268]	; (8008530 <SX1276OnDio1Irq+0x134>)
 8008424:	f7ff fe80 	bl	8008128 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	2012      	movs	r0, #18
 800842c:	f006 ffbc 	bl	800f3a8 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008430:	4b3e      	ldr	r3, [pc, #248]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008432:	2200      	movs	r2, #0
 8008434:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008438:	4b3e      	ldr	r3, [pc, #248]	; (8008534 <SX1276OnDio1Irq+0x138>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0e5      	beq.n	800840c <SX1276OnDio1Irq+0x10>
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0e2      	beq.n	800840c <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 8008446:	4798      	blx	r3
 8008448:	e7e0      	b.n	800840c <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 800844a:	f7ff fda5 	bl	8007f98 <SX1276GetDio1PinState>
 800844e:	2800      	cmp	r0, #0
 8008450:	d0dc      	beq.n	800840c <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 8008452:	4839      	ldr	r0, [pc, #228]	; (8008538 <SX1276OnDio1Irq+0x13c>)
 8008454:	f7ff fe68 	bl	8008128 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008458:	4b34      	ldr	r3, [pc, #208]	; (800852c <SX1276OnDio1Irq+0x130>)
 800845a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 800845e:	b95b      	cbnz	r3, 8008478 <SX1276OnDio1Irq+0x7c>
 8008460:	4b32      	ldr	r3, [pc, #200]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008462:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008466:	b93b      	cbnz	r3, 8008478 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008468:	4b30      	ldr	r3, [pc, #192]	; (800852c <SX1276OnDio1Irq+0x130>)
 800846a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800846e:	b9eb      	cbnz	r3, 80084ac <SX1276OnDio1Irq+0xb0>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8008470:	2101      	movs	r1, #1
 8008472:	4832      	ldr	r0, [pc, #200]	; (800853c <SX1276OnDio1Irq+0x140>)
 8008474:	f006 ff58 	bl	800f328 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008478:	4b2c      	ldr	r3, [pc, #176]	; (800852c <SX1276OnDio1Irq+0x130>)
 800847a:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800847e:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8008482:	1a88      	subs	r0, r1, r2
 8008484:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008488:	4298      	cmp	r0, r3
 800848a:	db16      	blt.n	80084ba <SX1276OnDio1Irq+0xbe>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800848c:	1e59      	subs	r1, r3, #1
 800848e:	b2c9      	uxtb	r1, r1
 8008490:	482b      	ldr	r0, [pc, #172]	; (8008540 <SX1276OnDio1Irq+0x144>)
 8008492:	4410      	add	r0, r2
 8008494:	f006 ff48 	bl	800f328 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008498:	4a24      	ldr	r2, [pc, #144]	; (800852c <SX1276OnDio1Irq+0x130>)
 800849a:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 800849e:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80084a2:	440b      	add	r3, r1
 80084a4:	3b01      	subs	r3, #1
 80084a6:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 80084aa:	e7af      	b.n	800840c <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80084ac:	2032      	movs	r0, #50	; 0x32
 80084ae:	f006 ff87 	bl	800f3c0 <SX1276Read>
 80084b2:	4b1e      	ldr	r3, [pc, #120]	; (800852c <SX1276OnDio1Irq+0x130>)
 80084b4:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80084b8:	e7de      	b.n	8008478 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80084ba:	1a89      	subs	r1, r1, r2
 80084bc:	b2c9      	uxtb	r1, r1
 80084be:	4820      	ldr	r0, [pc, #128]	; (8008540 <SX1276OnDio1Irq+0x144>)
 80084c0:	4410      	add	r0, r2
 80084c2:	f006 ff31 	bl	800f328 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80084c6:	4b19      	ldr	r3, [pc, #100]	; (800852c <SX1276OnDio1Irq+0x130>)
 80084c8:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80084cc:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80084d0:	e79c      	b.n	800840c <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 80084d2:	4b16      	ldr	r3, [pc, #88]	; (800852c <SX1276OnDio1Irq+0x130>)
 80084d4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d197      	bne.n	800840c <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 80084dc:	f7ff fd5c 	bl	8007f98 <SX1276GetDio1PinState>
 80084e0:	2801      	cmp	r0, #1
 80084e2:	d093      	beq.n	800840c <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80084e4:	4b11      	ldr	r3, [pc, #68]	; (800852c <SX1276OnDio1Irq+0x130>)
 80084e6:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80084ea:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80084ee:	eba0 0c02 	sub.w	ip, r0, r2
 80084f2:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80084f6:	458c      	cmp	ip, r1
 80084f8:	dd0c      	ble.n	8008514 <SX1276OnDio1Irq+0x118>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80084fa:	4811      	ldr	r0, [pc, #68]	; (8008540 <SX1276OnDio1Irq+0x144>)
 80084fc:	4410      	add	r0, r2
 80084fe:	f006 ff1a 	bl	800f336 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008504:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8008508:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 800850c:	440a      	add	r2, r1
 800850e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8008512:	e77b      	b.n	800840c <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008514:	1a81      	subs	r1, r0, r2
 8008516:	b2c9      	uxtb	r1, r1
 8008518:	4809      	ldr	r0, [pc, #36]	; (8008540 <SX1276OnDio1Irq+0x144>)
 800851a:	4410      	add	r0, r2
 800851c:	f006 ff0b 	bl	800f336 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <SX1276OnDio1Irq+0x130>)
 8008522:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8008526:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 800852a:	e76f      	b.n	800840c <SX1276OnDio1Irq+0x10>
 800852c:	200011a4 	.word	0x200011a4
 8008530:	2000108c 	.word	0x2000108c
 8008534:	20001070 	.word	0x20001070
 8008538:	20001074 	.word	0x20001074
 800853c:	200012ba 	.word	0x200012ba
 8008540:	200010a4 	.word	0x200010a4

08008544 <SX1276OnDio0Irq>:
{
 8008544:	b510      	push	{r4, lr}
 8008546:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 800854e:	4bb1      	ldr	r3, [pc, #708]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008550:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008554:	2b01      	cmp	r3, #1
 8008556:	d004      	beq.n	8008562 <SX1276OnDio0Irq+0x1e>
 8008558:	2b02      	cmp	r3, #2
 800855a:	f000 813f 	beq.w	80087dc <SX1276OnDio0Irq+0x298>
}
 800855e:	b002      	add	sp, #8
 8008560:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8008562:	4bac      	ldr	r3, [pc, #688]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008564:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008568:	b343      	cbz	r3, 80085bc <SX1276OnDio0Irq+0x78>
 800856a:	2b01      	cmp	r3, #1
 800856c:	d1f7      	bne.n	800855e <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800856e:	2140      	movs	r1, #64	; 0x40
 8008570:	2012      	movs	r0, #18
 8008572:	f006 ff19 	bl	800f3a8 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8008576:	2012      	movs	r0, #18
 8008578:	f006 ff22 	bl	800f3c0 <SX1276Read>
 800857c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008580:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008584:	f013 0f20 	tst.w	r3, #32
 8008588:	f000 80bd 	beq.w	8008706 <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800858c:	2120      	movs	r1, #32
 800858e:	2012      	movs	r0, #18
 8008590:	f006 ff0a 	bl	800f3a8 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8008594:	4b9f      	ldr	r3, [pc, #636]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008596:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800859a:	b91b      	cbnz	r3, 80085a4 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 800859c:	4b9d      	ldr	r3, [pc, #628]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 80085a4:	489c      	ldr	r0, [pc, #624]	; (8008818 <SX1276OnDio0Irq+0x2d4>)
 80085a6:	f7ff fdbf 	bl	8008128 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80085aa:	4b9c      	ldr	r3, [pc, #624]	; (800881c <SX1276OnDio0Irq+0x2d8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0d5      	beq.n	800855e <SX1276OnDio0Irq+0x1a>
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0d2      	beq.n	800855e <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 80085b8:	4798      	blx	r3
 80085ba:	e7d0      	b.n	800855e <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80085bc:	4b95      	ldr	r3, [pc, #596]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80085be:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80085c2:	bb0b      	cbnz	r3, 8008608 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80085c4:	4b93      	ldr	r3, [pc, #588]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80085c6:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d15e      	bne.n	800868c <SX1276OnDio0Irq+0x148>
 80085ce:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d15a      	bne.n	800868c <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80085d6:	4b8f      	ldr	r3, [pc, #572]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80085d8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d14e      	bne.n	800867e <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80085e0:	2101      	movs	r1, #1
 80085e2:	488f      	ldr	r0, [pc, #572]	; (8008820 <SX1276OnDio0Irq+0x2dc>)
 80085e4:	f006 fea0 	bl	800f328 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085e8:	4c8a      	ldr	r4, [pc, #552]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80085ea:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80085ee:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80085f2:	1ac9      	subs	r1, r1, r3
 80085f4:	b2c9      	uxtb	r1, r1
 80085f6:	488b      	ldr	r0, [pc, #556]	; (8008824 <SX1276OnDio0Irq+0x2e0>)
 80085f8:	4418      	add	r0, r3
 80085fa:	f006 fe95 	bl	800f328 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085fe:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8008602:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8008606:	e04e      	b.n	80086a6 <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8008608:	203f      	movs	r0, #63	; 0x3f
 800860a:	f006 fed9 	bl	800f3c0 <SX1276Read>
 800860e:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8008612:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008616:	f013 0f02 	tst.w	r3, #2
 800861a:	d1d3      	bne.n	80085c4 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800861c:	210b      	movs	r1, #11
 800861e:	203e      	movs	r0, #62	; 0x3e
 8008620:	f006 fec2 	bl	800f3a8 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8008624:	2110      	movs	r1, #16
 8008626:	203f      	movs	r0, #63	; 0x3f
 8008628:	f006 febe 	bl	800f3a8 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800862c:	487a      	ldr	r0, [pc, #488]	; (8008818 <SX1276OnDio0Irq+0x2d4>)
 800862e:	f7ff fd7b 	bl	8008128 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8008632:	4b78      	ldr	r3, [pc, #480]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008634:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008638:	b9bb      	cbnz	r3, 800866a <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 800863a:	487b      	ldr	r0, [pc, #492]	; (8008828 <SX1276OnDio0Irq+0x2e4>)
 800863c:	f7ff fd74 	bl	8008128 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8008640:	4b74      	ldr	r3, [pc, #464]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008642:	2200      	movs	r2, #0
 8008644:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008648:	4b74      	ldr	r3, [pc, #464]	; (800881c <SX1276OnDio0Irq+0x2d8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	b113      	cbz	r3, 8008654 <SX1276OnDio0Irq+0x110>
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	b103      	cbz	r3, 8008654 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 8008652:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008654:	4b6f      	ldr	r3, [pc, #444]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008656:	2200      	movs	r2, #0
 8008658:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800865c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008660:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8008664:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8008668:	e779      	b.n	800855e <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800866a:	200d      	movs	r0, #13
 800866c:	f006 fea8 	bl	800f3c0 <SX1276Read>
 8008670:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008674:	b2c9      	uxtb	r1, r1
 8008676:	200d      	movs	r0, #13
 8008678:	f006 fe96 	bl	800f3a8 <SX1276Write>
 800867c:	e7e4      	b.n	8008648 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800867e:	2032      	movs	r0, #50	; 0x32
 8008680:	f006 fe9e 	bl	800f3c0 <SX1276Read>
 8008684:	4b63      	ldr	r3, [pc, #396]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008686:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 800868a:	e7ad      	b.n	80085e8 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800868c:	4c61      	ldr	r4, [pc, #388]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 800868e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8008692:	1ac9      	subs	r1, r1, r3
 8008694:	b2c9      	uxtb	r1, r1
 8008696:	4863      	ldr	r0, [pc, #396]	; (8008824 <SX1276OnDio0Irq+0x2e0>)
 8008698:	4418      	add	r0, r3
 800869a:	f006 fe45 	bl	800f328 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800869e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80086a2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 80086a6:	485c      	ldr	r0, [pc, #368]	; (8008818 <SX1276OnDio0Irq+0x2d4>)
 80086a8:	f7ff fd3e 	bl	8008128 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80086ac:	4b59      	ldr	r3, [pc, #356]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80086ae:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80086b2:	b9f3      	cbnz	r3, 80086f2 <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 80086b4:	4b57      	ldr	r3, [pc, #348]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80086bc:	485a      	ldr	r0, [pc, #360]	; (8008828 <SX1276OnDio0Irq+0x2e4>)
 80086be:	f7ff fd33 	bl	8008128 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80086c2:	4b56      	ldr	r3, [pc, #344]	; (800881c <SX1276OnDio0Irq+0x2d8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	b14b      	cbz	r3, 80086dc <SX1276OnDio0Irq+0x198>
 80086c8:	689c      	ldr	r4, [r3, #8]
 80086ca:	b13c      	cbz	r4, 80086dc <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80086cc:	4951      	ldr	r1, [pc, #324]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80086ce:	2300      	movs	r3, #0
 80086d0:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80086d4:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80086d8:	4852      	ldr	r0, [pc, #328]	; (8008824 <SX1276OnDio0Irq+0x2e0>)
 80086da:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80086dc:	4b4d      	ldr	r3, [pc, #308]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80086e4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80086e8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80086ec:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80086f0:	e735      	b.n	800855e <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80086f2:	200d      	movs	r0, #13
 80086f4:	f006 fe64 	bl	800f3c0 <SX1276Read>
 80086f8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80086fc:	b2c9      	uxtb	r1, r1
 80086fe:	200d      	movs	r0, #13
 8008700:	f006 fe52 	bl	800f3a8 <SX1276Write>
 8008704:	e7dd      	b.n	80086c2 <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8008706:	2019      	movs	r0, #25
 8008708:	f006 fe5a 	bl	800f3c0 <SX1276Read>
 800870c:	b243      	sxtb	r3, r0
 800870e:	3302      	adds	r3, #2
 8008710:	109b      	asrs	r3, r3, #2
 8008712:	4c40      	ldr	r4, [pc, #256]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008714:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8008718:	201a      	movs	r0, #26
 800871a:	f006 fe51 	bl	800f3c0 <SX1276Read>
 800871e:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8008720:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 8008724:	2a00      	cmp	r2, #0
 8008726:	db39      	blt.n	800879c <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008728:	4a3a      	ldr	r2, [pc, #232]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 800872a:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 800872e:	4a3f      	ldr	r2, [pc, #252]	; (800882c <SX1276OnDio0Irq+0x2e8>)
 8008730:	4291      	cmp	r1, r2
 8008732:	d94c      	bls.n	80087ce <SX1276OnDio0Irq+0x28a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8008734:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8008738:	389d      	subs	r0, #157	; 0x9d
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 800873c:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8008740:	2013      	movs	r0, #19
 8008742:	f006 fe3d 	bl	800f3c0 <SX1276Read>
 8008746:	4c33      	ldr	r4, [pc, #204]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 8008748:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800874c:	2010      	movs	r0, #16
 800874e:	f006 fe37 	bl	800f3c0 <SX1276Read>
 8008752:	4601      	mov	r1, r0
 8008754:	200d      	movs	r0, #13
 8008756:	f006 fe27 	bl	800f3a8 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800875a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800875e:	4831      	ldr	r0, [pc, #196]	; (8008824 <SX1276OnDio0Irq+0x2e0>)
 8008760:	f006 fde2 	bl	800f328 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8008764:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8008768:	b913      	cbnz	r3, 8008770 <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 800876a:	2200      	movs	r2, #0
 800876c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8008770:	4829      	ldr	r0, [pc, #164]	; (8008818 <SX1276OnDio0Irq+0x2d4>)
 8008772:	f7ff fcd9 	bl	8008128 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008776:	4b29      	ldr	r3, [pc, #164]	; (800881c <SX1276OnDio0Irq+0x2d8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f43f aeef 	beq.w	800855e <SX1276OnDio0Irq+0x1a>
 8008780:	689c      	ldr	r4, [r3, #8]
 8008782:	2c00      	cmp	r4, #0
 8008784:	f43f aeeb 	beq.w	800855e <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008788:	4922      	ldr	r1, [pc, #136]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 800878a:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 800878e:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8008792:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8008796:	4823      	ldr	r0, [pc, #140]	; (8008824 <SX1276OnDio0Irq+0x2e0>)
 8008798:	47a0      	blx	r4
 800879a:	e6e0      	b.n	800855e <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800879c:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80087a0:	4922      	ldr	r1, [pc, #136]	; (800882c <SX1276OnDio0Irq+0x2e8>)
 80087a2:	428c      	cmp	r4, r1
 80087a4:	d909      	bls.n	80087ba <SX1276OnDio0Irq+0x276>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80087a6:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80087aa:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80087ac:	fa12 f383 	uxtah	r3, r2, r3
 80087b0:	3b9d      	subs	r3, #157	; 0x9d
 80087b2:	4a18      	ldr	r2, [pc, #96]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80087b4:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80087b8:	e7c2      	b.n	8008740 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80087ba:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80087be:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80087c0:	fa12 f383 	uxtah	r3, r2, r3
 80087c4:	3ba4      	subs	r3, #164	; 0xa4
 80087c6:	4a13      	ldr	r2, [pc, #76]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80087c8:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80087cc:	e7b8      	b.n	8008740 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80087ce:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80087d2:	38a4      	subs	r0, #164	; 0xa4
 80087d4:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80087d6:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80087da:	e7b1      	b.n	8008740 <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 80087dc:	4814      	ldr	r0, [pc, #80]	; (8008830 <SX1276OnDio0Irq+0x2ec>)
 80087de:	f7ff fca3 	bl	8008128 <TimerStop>
            switch( SX1276.Settings.Modem )
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80087e4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d00e      	beq.n	800880a <SX1276OnDio0Irq+0x2c6>
                SX1276.Settings.State = RF_IDLE;
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <SX1276OnDio0Irq+0x2d0>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <SX1276OnDio0Irq+0x2d8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f43f aeb0 	beq.w	800855e <SX1276OnDio0Irq+0x1a>
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f43f aeac 	beq.w	800855e <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 8008806:	4798      	blx	r3
}
 8008808:	e6a9      	b.n	800855e <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800880a:	2108      	movs	r1, #8
 800880c:	2012      	movs	r0, #18
 800880e:	f006 fdcb 	bl	800f3a8 <SX1276Write>
 8008812:	e7eb      	b.n	80087ec <SX1276OnDio0Irq+0x2a8>
 8008814:	200011a4 	.word	0x200011a4
 8008818:	2000108c 	.word	0x2000108c
 800881c:	20001070 	.word	0x20001070
 8008820:	200012ba 	.word	0x200012ba
 8008824:	200010a4 	.word	0x200010a4
 8008828:	20001074 	.word	0x20001074
 800882c:	1f4add40 	.word	0x1f4add40
 8008830:	200012e8 	.word	0x200012e8

08008834 <RxChainCalibration>:
{
 8008834:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8008836:	2009      	movs	r0, #9
 8008838:	f006 fdc2 	bl	800f3c0 <SX1276Read>
 800883c:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800883e:	2006      	movs	r0, #6
 8008840:	f006 fdbe 	bl	800f3c0 <SX1276Read>
 8008844:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8008846:	2007      	movs	r0, #7
 8008848:	f006 fdba 	bl	800f3c0 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800884c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8008850:	2008      	movs	r0, #8
 8008852:	f006 fdb5 	bl	800f3c0 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008856:	4320      	orrs	r0, r4
 8008858:	f006 fcf9 	bl	800f24e <SX1276ConvertPllStepToFreqInHz>
 800885c:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 800885e:	2100      	movs	r1, #0
 8008860:	2009      	movs	r0, #9
 8008862:	f006 fda1 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008866:	203b      	movs	r0, #59	; 0x3b
 8008868:	f006 fdaa 	bl	800f3c0 <SX1276Read>
 800886c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008870:	b2c9      	uxtb	r1, r1
 8008872:	203b      	movs	r0, #59	; 0x3b
 8008874:	f006 fd98 	bl	800f3a8 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008878:	203b      	movs	r0, #59	; 0x3b
 800887a:	f006 fda1 	bl	800f3c0 <SX1276Read>
 800887e:	f010 0f20 	tst.w	r0, #32
 8008882:	d1f9      	bne.n	8008878 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8008884:	480c      	ldr	r0, [pc, #48]	; (80088b8 <RxChainCalibration+0x84>)
 8008886:	f7ff fcf5 	bl	8008274 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800888a:	203b      	movs	r0, #59	; 0x3b
 800888c:	f006 fd98 	bl	800f3c0 <SX1276Read>
 8008890:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008894:	b2c9      	uxtb	r1, r1
 8008896:	203b      	movs	r0, #59	; 0x3b
 8008898:	f006 fd86 	bl	800f3a8 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800889c:	203b      	movs	r0, #59	; 0x3b
 800889e:	f006 fd8f 	bl	800f3c0 <SX1276Read>
 80088a2:	f010 0f20 	tst.w	r0, #32
 80088a6:	d1f9      	bne.n	800889c <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80088a8:	4629      	mov	r1, r5
 80088aa:	2009      	movs	r0, #9
 80088ac:	f006 fd7c 	bl	800f3a8 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7ff fcdf 	bl	8008274 <SX1276SetChannel>
}
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	33bca100 	.word	0x33bca100

080088bc <SX1276SetSleep>:
{
 80088bc:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80088be:	480a      	ldr	r0, [pc, #40]	; (80088e8 <SX1276SetSleep+0x2c>)
 80088c0:	f7ff fc32 	bl	8008128 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80088c4:	4809      	ldr	r0, [pc, #36]	; (80088ec <SX1276SetSleep+0x30>)
 80088c6:	f7ff fc2f 	bl	8008128 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80088ca:	4809      	ldr	r0, [pc, #36]	; (80088f0 <SX1276SetSleep+0x34>)
 80088cc:	f7ff fc2c 	bl	8008128 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80088d0:	2000      	movs	r0, #0
 80088d2:	f006 fd81 	bl	800f3d8 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80088d6:	2000      	movs	r0, #0
 80088d8:	f006 fc52 	bl	800f180 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <SX1276SetSleep+0x38>)
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80088e4:	bd08      	pop	{r3, pc}
 80088e6:	bf00      	nop
 80088e8:	2000108c 	.word	0x2000108c
 80088ec:	200012e8 	.word	0x200012e8
 80088f0:	20001074 	.word	0x20001074
 80088f4:	200011a4 	.word	0x200011a4

080088f8 <SX1276SetStby>:
{
 80088f8:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80088fa:	4808      	ldr	r0, [pc, #32]	; (800891c <SX1276SetStby+0x24>)
 80088fc:	f7ff fc14 	bl	8008128 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8008900:	4807      	ldr	r0, [pc, #28]	; (8008920 <SX1276SetStby+0x28>)
 8008902:	f7ff fc11 	bl	8008128 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8008906:	4807      	ldr	r0, [pc, #28]	; (8008924 <SX1276SetStby+0x2c>)
 8008908:	f7ff fc0e 	bl	8008128 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800890c:	2001      	movs	r0, #1
 800890e:	f006 fd63 	bl	800f3d8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <SX1276SetStby+0x30>)
 8008914:	2200      	movs	r2, #0
 8008916:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800891a:	bd08      	pop	{r3, pc}
 800891c:	2000108c 	.word	0x2000108c
 8008920:	200012e8 	.word	0x200012e8
 8008924:	20001074 	.word	0x20001074
 8008928:	200011a4 	.word	0x200011a4

0800892c <SX1276SetTx>:
{
 800892c:	b510      	push	{r4, lr}
 800892e:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8008930:	4829      	ldr	r0, [pc, #164]	; (80089d8 <SX1276SetTx+0xac>)
 8008932:	f7ff fbf9 	bl	8008128 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008936:	4621      	mov	r1, r4
 8008938:	4828      	ldr	r0, [pc, #160]	; (80089dc <SX1276SetTx+0xb0>)
 800893a:	f006 fc5d 	bl	800f1f8 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 800893e:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <SX1276SetTx+0xb4>)
 8008940:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008944:	b163      	cbz	r3, 8008960 <SX1276SetTx+0x34>
 8008946:	2b01      	cmp	r3, #1
 8008948:	d023      	beq.n	8008992 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 800894a:	4b25      	ldr	r3, [pc, #148]	; (80089e0 <SX1276SetTx+0xb4>)
 800894c:	2202      	movs	r2, #2
 800894e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8008952:	4822      	ldr	r0, [pc, #136]	; (80089dc <SX1276SetTx+0xb0>)
 8008954:	f7ff fb6e 	bl	8008034 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008958:	2003      	movs	r0, #3
 800895a:	f006 fd3d 	bl	800f3d8 <SX1276SetOpMode>
}
 800895e:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008960:	2040      	movs	r0, #64	; 0x40
 8008962:	f006 fd2d 	bl	800f3c0 <SX1276Read>
 8008966:	f000 0103 	and.w	r1, r0, #3
 800896a:	2040      	movs	r0, #64	; 0x40
 800896c:	f006 fd1c 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008970:	2041      	movs	r0, #65	; 0x41
 8008972:	f006 fd25 	bl	800f3c0 <SX1276Read>
 8008976:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 800897a:	2041      	movs	r0, #65	; 0x41
 800897c:	f006 fd14 	bl	800f3a8 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008980:	2035      	movs	r0, #53	; 0x35
 8008982:	f006 fd1d 	bl	800f3c0 <SX1276Read>
 8008986:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <SX1276SetTx+0xb4>)
 800898c:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8008990:	e7db      	b.n	800894a <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <SX1276SetTx+0xb4>)
 8008994:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008998:	b173      	cbz	r3, 80089b8 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800899a:	21f5      	movs	r1, #245	; 0xf5
 800899c:	2011      	movs	r0, #17
 800899e:	f006 fd03 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80089a2:	2040      	movs	r0, #64	; 0x40
 80089a4:	f006 fd0c 	bl	800f3c0 <SX1276Read>
 80089a8:	f000 0133 	and.w	r1, r0, #51	; 0x33
 80089ac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80089b0:	2040      	movs	r0, #64	; 0x40
 80089b2:	f006 fcf9 	bl	800f3a8 <SX1276Write>
 80089b6:	e7c8      	b.n	800894a <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80089b8:	21f7      	movs	r1, #247	; 0xf7
 80089ba:	2011      	movs	r0, #17
 80089bc:	f006 fcf4 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80089c0:	2040      	movs	r0, #64	; 0x40
 80089c2:	f006 fcfd 	bl	800f3c0 <SX1276Read>
 80089c6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80089ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80089ce:	2040      	movs	r0, #64	; 0x40
 80089d0:	f006 fcea 	bl	800f3a8 <SX1276Write>
 80089d4:	e7b9      	b.n	800894a <SX1276SetTx+0x1e>
 80089d6:	bf00      	nop
 80089d8:	2000108c 	.word	0x2000108c
 80089dc:	200012e8 	.word	0x200012e8
 80089e0:	200011a4 	.word	0x200011a4

080089e4 <SX1276Send>:
{
 80089e4:	b530      	push	{r4, r5, lr}
 80089e6:	b083      	sub	sp, #12
 80089e8:	4604      	mov	r4, r0
 80089ea:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 80089ee:	4b44      	ldr	r3, [pc, #272]	; (8008b00 <SX1276Send+0x11c>)
 80089f0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80089f4:	b133      	cbz	r3, 8008a04 <SX1276Send+0x20>
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d03a      	beq.n	8008a70 <SX1276Send+0x8c>
 80089fa:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 80089fc:	f7ff ff96 	bl	800892c <SX1276SetTx>
}
 8008a00:	b003      	add	sp, #12
 8008a02:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008a04:	4b3e      	ldr	r3, [pc, #248]	; (8008b00 <SX1276Send+0x11c>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8008a0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008a10:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8008a14:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008a18:	b9eb      	cbnz	r3, 8008a56 <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	f10d 0007 	add.w	r0, sp, #7
 8008a20:	f006 fc89 	bl	800f336 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8008a24:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a28:	1e53      	subs	r3, r2, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b3f      	cmp	r3, #63	; 0x3f
 8008a2e:	d816      	bhi.n	8008a5e <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008a30:	4b33      	ldr	r3, [pc, #204]	; (8008b00 <SX1276Send+0x11c>)
 8008a32:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008a36:	4d32      	ldr	r5, [pc, #200]	; (8008b00 <SX1276Send+0x11c>)
 8008a38:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f006 fc7a 	bl	800f336 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008a42:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8008a46:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008a50:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8008a54:	e7d2      	b.n	80089fc <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008a56:	2032      	movs	r0, #50	; 0x32
 8008a58:	f006 fca6 	bl	800f3a8 <SX1276Write>
 8008a5c:	e7e2      	b.n	8008a24 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4828      	ldr	r0, [pc, #160]	; (8008b04 <SX1276Send+0x120>)
 8008a62:	f006 fb9f 	bl	800f1a4 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008a66:	4b26      	ldr	r3, [pc, #152]	; (8008b00 <SX1276Send+0x11c>)
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8008a6e:	e7e2      	b.n	8008a36 <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008a70:	4b23      	ldr	r3, [pc, #140]	; (8008b00 <SX1276Send+0x11c>)
 8008a72:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008a76:	b353      	cbz	r3, 8008ace <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008a78:	2033      	movs	r0, #51	; 0x33
 8008a7a:	f006 fca1 	bl	800f3c0 <SX1276Read>
 8008a7e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8008a82:	2033      	movs	r0, #51	; 0x33
 8008a84:	f006 fc90 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008a88:	2119      	movs	r1, #25
 8008a8a:	203b      	movs	r0, #59	; 0x3b
 8008a8c:	f006 fc8c 	bl	800f3a8 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008a90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008a94:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <SX1276Send+0x11c>)
 8008a96:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008a9a:	2022      	movs	r0, #34	; 0x22
 8008a9c:	f006 fc84 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	200e      	movs	r0, #14
 8008aa4:	f006 fc80 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	200d      	movs	r0, #13
 8008aac:	f006 fc7c 	bl	800f3a8 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f006 fc85 	bl	800f3c0 <SX1276Read>
 8008ab6:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8008aba:	d01a      	beq.n	8008af2 <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8008abc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f006 fc38 	bl	800f336 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <SX1276Send+0x11c>)
 8008ac8:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8008acc:	e796      	b.n	80089fc <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008ace:	2033      	movs	r0, #51	; 0x33
 8008ad0:	f006 fc76 	bl	800f3c0 <SX1276Read>
 8008ad4:	b241      	sxtb	r1, r0
 8008ad6:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008ada:	f041 0101 	orr.w	r1, r1, #1
 8008ade:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008ae2:	2033      	movs	r0, #51	; 0x33
 8008ae4:	f006 fc60 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008ae8:	211d      	movs	r1, #29
 8008aea:	203b      	movs	r0, #59	; 0x3b
 8008aec:	f006 fc5c 	bl	800f3a8 <SX1276Write>
 8008af0:	e7ce      	b.n	8008a90 <SX1276Send+0xac>
                SX1276SetStby( );
 8008af2:	f7ff ff01 	bl	80088f8 <SX1276SetStby>
                DelayMs( 1 );
 8008af6:	2001      	movs	r0, #1
 8008af8:	f006 fba5 	bl	800f246 <DelayMs>
 8008afc:	e7de      	b.n	8008abc <SX1276Send+0xd8>
 8008afe:	bf00      	nop
 8008b00:	200011a4 	.word	0x200011a4
 8008b04:	200010a4 	.word	0x200010a4

08008b08 <SX1276SetRx>:
{
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8008b0c:	489d      	ldr	r0, [pc, #628]	; (8008d84 <SX1276SetRx+0x27c>)
 8008b0e:	f7ff fb0b 	bl	8008128 <TimerStop>
    switch( SX1276.Settings.Modem )
 8008b12:	4b9d      	ldr	r3, [pc, #628]	; (8008d88 <SX1276SetRx+0x280>)
 8008b14:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008b18:	b1e3      	cbz	r3, 8008b54 <SX1276SetRx+0x4c>
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d045      	beq.n	8008baa <SX1276SetRx+0xa2>
 8008b1e:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8008b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b24:	2100      	movs	r1, #0
 8008b26:	4899      	ldr	r0, [pc, #612]	; (8008d8c <SX1276SetRx+0x284>)
 8008b28:	f007 fa9d 	bl	8010066 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8008b2c:	4b96      	ldr	r3, [pc, #600]	; (8008d88 <SX1276SetRx+0x280>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f040 8107 	bne.w	8008d48 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8008b3a:	4b93      	ldr	r3, [pc, #588]	; (8008d88 <SX1276SetRx+0x280>)
 8008b3c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 810a 	beq.w	8008d5a <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	f000 8118 	beq.w	8008d7c <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8008b4c:	2005      	movs	r0, #5
 8008b4e:	f006 fc43 	bl	800f3d8 <SX1276SetOpMode>
}
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8008b54:	4d8c      	ldr	r5, [pc, #560]	; (8008d88 <SX1276SetRx+0x280>)
 8008b56:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008b5a:	2040      	movs	r0, #64	; 0x40
 8008b5c:	f006 fc30 	bl	800f3c0 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8008b60:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008b64:	f041 010c 	orr.w	r1, r1, #12
 8008b68:	2040      	movs	r0, #64	; 0x40
 8008b6a:	f006 fc1d 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008b6e:	2041      	movs	r0, #65	; 0x41
 8008b70:	f006 fc26 	bl	800f3c0 <SX1276Read>
 8008b74:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8008b78:	b2c9      	uxtb	r1, r1
 8008b7a:	2041      	movs	r0, #65	; 0x41
 8008b7c:	f006 fc14 	bl	800f3a8 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008b80:	2035      	movs	r0, #53	; 0x35
 8008b82:	f006 fc1d 	bl	800f3c0 <SX1276Read>
 8008b86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008b8a:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8008b8e:	211e      	movs	r1, #30
 8008b90:	200d      	movs	r0, #13
 8008b92:	f006 fc09 	bl	800f3a8 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008b9c:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008ba0:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008ba4:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8008ba8:	e7ba      	b.n	8008b20 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008baa:	4b77      	ldr	r3, [pc, #476]	; (8008d88 <SX1276SetRx+0x280>)
 8008bac:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008bb0:	b353      	cbz	r3, 8008c08 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8008bb2:	2033      	movs	r0, #51	; 0x33
 8008bb4:	f006 fc04 	bl	800f3c0 <SX1276Read>
 8008bb8:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8008bbc:	b2c9      	uxtb	r1, r1
 8008bbe:	2033      	movs	r0, #51	; 0x33
 8008bc0:	f006 fbf2 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008bc4:	2119      	movs	r1, #25
 8008bc6:	203b      	movs	r0, #59	; 0x3b
 8008bc8:	f006 fbee 	bl	800f3a8 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8008bcc:	4b6e      	ldr	r3, [pc, #440]	; (8008d88 <SX1276SetRx+0x280>)
 8008bce:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	f200 8087 	bhi.w	8008ce6 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008bd8:	2031      	movs	r0, #49	; 0x31
 8008bda:	f006 fbf1 	bl	800f3c0 <SX1276Read>
 8008bde:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008be2:	2031      	movs	r0, #49	; 0x31
 8008be4:	f006 fbe0 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8008be8:	2100      	movs	r1, #0
 8008bea:	2030      	movs	r0, #48	; 0x30
 8008bec:	f006 fbdc 	bl	800f3a8 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008bf0:	4b65      	ldr	r3, [pc, #404]	; (8008d88 <SX1276SetRx+0x280>)
 8008bf2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d87e      	bhi.n	8008cf8 <SX1276SetRx+0x1f0>
 8008bfa:	e8df f003 	tbb	[pc, r3]
 8008bfe:	2417      	.short	0x2417
 8008c00:	584b3e31 	.word	0x584b3e31
 8008c04:	6a65      	.short	0x6a65
 8008c06:	6f          	.byte	0x6f
 8008c07:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008c08:	2033      	movs	r0, #51	; 0x33
 8008c0a:	f006 fbd9 	bl	800f3c0 <SX1276Read>
 8008c0e:	b241      	sxtb	r1, r0
 8008c10:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008c14:	f041 0101 	orr.w	r1, r1, #1
 8008c18:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008c1c:	2033      	movs	r0, #51	; 0x33
 8008c1e:	f006 fbc3 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008c22:	211d      	movs	r1, #29
 8008c24:	203b      	movs	r0, #59	; 0x3b
 8008c26:	f006 fbbf 	bl	800f3a8 <SX1276Write>
 8008c2a:	e7cf      	b.n	8008bcc <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8008c2c:	2148      	movs	r1, #72	; 0x48
 8008c2e:	202f      	movs	r0, #47	; 0x2f
 8008c30:	f006 fbba 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8008c34:	4b54      	ldr	r3, [pc, #336]	; (8008d88 <SX1276SetRx+0x280>)
 8008c36:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008c3a:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8008c3e:	3002      	adds	r0, #2
 8008c40:	f7ff fb18 	bl	8008274 <SX1276SetChannel>
                    break;
 8008c44:	e058      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008c46:	2144      	movs	r1, #68	; 0x44
 8008c48:	202f      	movs	r0, #47	; 0x2f
 8008c4a:	f006 fbad 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8008c4e:	4b4e      	ldr	r3, [pc, #312]	; (8008d88 <SX1276SetRx+0x280>)
 8008c50:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008c54:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8008c58:	3034      	adds	r0, #52	; 0x34
 8008c5a:	f7ff fb0b 	bl	8008274 <SX1276SetChannel>
                    break;
 8008c5e:	e04b      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008c60:	2144      	movs	r1, #68	; 0x44
 8008c62:	202f      	movs	r0, #47	; 0x2f
 8008c64:	f006 fba0 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8008c68:	4b47      	ldr	r3, [pc, #284]	; (8008d88 <SX1276SetRx+0x280>)
 8008c6a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008c6e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8008c72:	3004      	adds	r0, #4
 8008c74:	f7ff fafe 	bl	8008274 <SX1276SetChannel>
                    break;
 8008c78:	e03e      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008c7a:	2144      	movs	r1, #68	; 0x44
 8008c7c:	202f      	movs	r0, #47	; 0x2f
 8008c7e:	f006 fb93 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8008c82:	4b41      	ldr	r3, [pc, #260]	; (8008d88 <SX1276SetRx+0x280>)
 8008c84:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008c88:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8008c8c:	305e      	adds	r0, #94	; 0x5e
 8008c8e:	f7ff faf1 	bl	8008274 <SX1276SetChannel>
                    break;
 8008c92:	e031      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008c94:	2144      	movs	r1, #68	; 0x44
 8008c96:	202f      	movs	r0, #47	; 0x2f
 8008c98:	f006 fb86 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <SX1276SetRx+0x280>)
 8008c9e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008ca2:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8008ca6:	3012      	adds	r0, #18
 8008ca8:	f7ff fae4 	bl	8008274 <SX1276SetChannel>
                    break;
 8008cac:	e024      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008cae:	2144      	movs	r1, #68	; 0x44
 8008cb0:	202f      	movs	r0, #47	; 0x2f
 8008cb2:	f006 fb79 	bl	800f3a8 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8008cb6:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <SX1276SetRx+0x280>)
 8008cb8:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008cbc:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8008cc0:	30c6      	adds	r0, #198	; 0xc6
 8008cc2:	f7ff fad7 	bl	8008274 <SX1276SetChannel>
                    break;
 8008cc6:	e017      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008cc8:	2140      	movs	r1, #64	; 0x40
 8008cca:	202f      	movs	r0, #47	; 0x2f
 8008ccc:	f006 fb6c 	bl	800f3a8 <SX1276Write>
                    break;
 8008cd0:	e012      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008cd2:	2140      	movs	r1, #64	; 0x40
 8008cd4:	202f      	movs	r0, #47	; 0x2f
 8008cd6:	f006 fb67 	bl	800f3a8 <SX1276Write>
                    break;
 8008cda:	e00d      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008cdc:	2140      	movs	r1, #64	; 0x40
 8008cde:	202f      	movs	r0, #47	; 0x2f
 8008ce0:	f006 fb62 	bl	800f3a8 <SX1276Write>
                    break;
 8008ce4:	e008      	b.n	8008cf8 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8008ce6:	2031      	movs	r0, #49	; 0x31
 8008ce8:	f006 fb6a 	bl	800f3c0 <SX1276Read>
 8008cec:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008cf0:	b2c9      	uxtb	r1, r1
 8008cf2:	2031      	movs	r0, #49	; 0x31
 8008cf4:	f006 fb58 	bl	800f3a8 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8008cf8:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <SX1276SetRx+0x280>)
 8008cfa:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008cfe:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008d02:	b1a3      	cbz	r3, 8008d2e <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008d04:	211d      	movs	r1, #29
 8008d06:	2011      	movs	r0, #17
 8008d08:	f006 fb4e 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8008d0c:	2040      	movs	r0, #64	; 0x40
 8008d0e:	f006 fb57 	bl	800f3c0 <SX1276Read>
 8008d12:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008d16:	2040      	movs	r0, #64	; 0x40
 8008d18:	f006 fb46 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	200f      	movs	r0, #15
 8008d20:	f006 fb42 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008d24:	2100      	movs	r1, #0
 8008d26:	200d      	movs	r0, #13
 8008d28:	f006 fb3e 	bl	800f3a8 <SX1276Write>
        break;
 8008d2c:	e6f8      	b.n	8008b20 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008d2e:	211f      	movs	r1, #31
 8008d30:	2011      	movs	r0, #17
 8008d32:	f006 fb39 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008d36:	2040      	movs	r0, #64	; 0x40
 8008d38:	f006 fb42 	bl	800f3c0 <SX1276Read>
 8008d3c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008d40:	2040      	movs	r0, #64	; 0x40
 8008d42:	f006 fb31 	bl	800f3a8 <SX1276Write>
 8008d46:	e7e9      	b.n	8008d1c <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d48:	4d11      	ldr	r5, [pc, #68]	; (8008d90 <SX1276SetRx+0x288>)
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f006 fa53 	bl	800f1f8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8008d52:	4628      	mov	r0, r5
 8008d54:	f7ff f96e 	bl	8008034 <TimerStart>
 8008d58:	e6ef      	b.n	8008b3a <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008d5a:	2005      	movs	r0, #5
 8008d5c:	f006 fb3c 	bl	800f3d8 <SX1276SetOpMode>
        if( rxContinuous == false )
 8008d60:	2e00      	cmp	r6, #0
 8008d62:	f47f aef6 	bne.w	8008b52 <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8008d66:	4c0b      	ldr	r4, [pc, #44]	; (8008d94 <SX1276SetRx+0x28c>)
 8008d68:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <SX1276SetRx+0x280>)
 8008d6a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f006 fa42 	bl	800f1f8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8008d74:	4620      	mov	r0, r4
 8008d76:	f7ff f95d 	bl	8008034 <TimerStart>
 8008d7a:	e6ea      	b.n	8008b52 <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8008d7c:	2006      	movs	r0, #6
 8008d7e:	f006 fb2b 	bl	800f3d8 <SX1276SetOpMode>
}
 8008d82:	e6e6      	b.n	8008b52 <SX1276SetRx+0x4a>
 8008d84:	200012e8 	.word	0x200012e8
 8008d88:	200011a4 	.word	0x200011a4
 8008d8c:	200010a4 	.word	0x200010a4
 8008d90:	2000108c 	.word	0x2000108c
 8008d94:	20001074 	.word	0x20001074

08008d98 <SX1276ReadRssi>:
{
 8008d98:	b508      	push	{r3, lr}
    switch( modem )
 8008d9a:	b120      	cbz	r0, 8008da6 <SX1276ReadRssi+0xe>
 8008d9c:	2801      	cmp	r0, #1
 8008d9e:	d00a      	beq.n	8008db6 <SX1276ReadRssi+0x1e>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008da4:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008da6:	2011      	movs	r0, #17
 8008da8:	f006 fb0a 	bl	800f3c0 <SX1276Read>
 8008dac:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8008db0:	4240      	negs	r0, r0
 8008db2:	b200      	sxth	r0, r0
        break;
 8008db4:	e7f6      	b.n	8008da4 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <SX1276ReadRssi+0x48>)
 8008db8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <SX1276ReadRssi+0x4c>)
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d906      	bls.n	8008dd0 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8008dc2:	201b      	movs	r0, #27
 8008dc4:	f006 fafc 	bl	800f3c0 <SX1276Read>
 8008dc8:	b280      	uxth	r0, r0
 8008dca:	389d      	subs	r0, #157	; 0x9d
 8008dcc:	b200      	sxth	r0, r0
 8008dce:	e7e9      	b.n	8008da4 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8008dd0:	201b      	movs	r0, #27
 8008dd2:	f006 faf5 	bl	800f3c0 <SX1276Read>
 8008dd6:	b280      	uxth	r0, r0
 8008dd8:	38a4      	subs	r0, #164	; 0xa4
 8008dda:	b200      	sxth	r0, r0
 8008ddc:	e7e2      	b.n	8008da4 <SX1276ReadRssi+0xc>
 8008dde:	bf00      	nop
 8008de0:	200011a4 	.word	0x200011a4
 8008de4:	1f4add40 	.word	0x1f4add40

08008de8 <SX1276SetModem>:
{
 8008de8:	b510      	push	{r4, lr}
 8008dea:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8008dec:	2001      	movs	r0, #1
 8008dee:	f006 fae7 	bl	800f3c0 <SX1276Read>
 8008df2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008df6:	d121      	bne.n	8008e3c <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8008df8:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <SX1276SetModem+0x88>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8008e00:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <SX1276SetModem+0x88>)
 8008e02:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	d017      	beq.n	8008e3a <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8008e0a:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <SX1276SetModem+0x88>)
 8008e0c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8008e10:	2c01      	cmp	r4, #1
 8008e12:	d018      	beq.n	8008e46 <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008e14:	2000      	movs	r0, #0
 8008e16:	f006 fadf 	bl	800f3d8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	f006 fad0 	bl	800f3c0 <SX1276Read>
 8008e20:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008e24:	2001      	movs	r0, #1
 8008e26:	f006 fabf 	bl	800f3a8 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	2040      	movs	r0, #64	; 0x40
 8008e2e:	f006 fabb 	bl	800f3a8 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008e32:	2130      	movs	r1, #48	; 0x30
 8008e34:	2041      	movs	r0, #65	; 0x41
 8008e36:	f006 fab7 	bl	800f3a8 <SX1276Write>
}
 8008e3a:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <SX1276SetModem+0x88>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8008e44:	e7dc      	b.n	8008e00 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008e46:	2000      	movs	r0, #0
 8008e48:	f006 fac6 	bl	800f3d8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f006 fab7 	bl	800f3c0 <SX1276Read>
 8008e52:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008e56:	b2c9      	uxtb	r1, r1
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f006 faa5 	bl	800f3a8 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008e5e:	2100      	movs	r1, #0
 8008e60:	2040      	movs	r0, #64	; 0x40
 8008e62:	f006 faa1 	bl	800f3a8 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008e66:	2100      	movs	r1, #0
 8008e68:	2041      	movs	r0, #65	; 0x41
 8008e6a:	f006 fa9d 	bl	800f3a8 <SX1276Write>
        break;
 8008e6e:	e7e4      	b.n	8008e3a <SX1276SetModem+0x52>
 8008e70:	200011a4 	.word	0x200011a4

08008e74 <SX1276Init>:
{
 8008e74:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8008e76:	4b19      	ldr	r3, [pc, #100]	; (8008edc <SX1276Init+0x68>)
 8008e78:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8008e7a:	4c19      	ldr	r4, [pc, #100]	; (8008ee0 <SX1276Init+0x6c>)
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4819      	ldr	r0, [pc, #100]	; (8008ee4 <SX1276Init+0x70>)
 8008e80:	f006 f9b1 	bl	800f1e6 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8008e84:	4621      	mov	r1, r4
 8008e86:	4818      	ldr	r0, [pc, #96]	; (8008ee8 <SX1276Init+0x74>)
 8008e88:	f006 f9ad 	bl	800f1e6 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4817      	ldr	r0, [pc, #92]	; (8008eec <SX1276Init+0x78>)
 8008e90:	f006 f9a9 	bl	800f1e6 <TimerInit>
    SX1276Reset( );
 8008e94:	f7fe fd44 	bl	8007920 <SX1276Reset>
    RxChainCalibration( );
 8008e98:	f7ff fccc 	bl	8008834 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f006 fa9b 	bl	800f3d8 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8008ea2:	4813      	ldr	r0, [pc, #76]	; (8008ef0 <SX1276Init+0x7c>)
 8008ea4:	f7fe fd70 	bl	8007988 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	e00c      	b.n	8008ec6 <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008eac:	4a11      	ldr	r2, [pc, #68]	; (8008ef4 <SX1276Init+0x80>)
 8008eae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008eb2:	18d5      	adds	r5, r2, r3
 8008eb4:	5cd0      	ldrb	r0, [r2, r3]
 8008eb6:	f7ff ff97 	bl	8008de8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008eba:	78a9      	ldrb	r1, [r5, #2]
 8008ebc:	7868      	ldrb	r0, [r5, #1]
 8008ebe:	f006 fa73 	bl	800f3a8 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008ec2:	3401      	adds	r4, #1
 8008ec4:	b2e4      	uxtb	r4, r4
 8008ec6:	2c0f      	cmp	r4, #15
 8008ec8:	d9f0      	bls.n	8008eac <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7ff ff8c 	bl	8008de8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8008ed0:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <SX1276Init+0x84>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20001070 	.word	0x20001070
 8008ee0:	080094f5 	.word	0x080094f5
 8008ee4:	200012e8 	.word	0x200012e8
 8008ee8:	2000108c 	.word	0x2000108c
 8008eec:	20001074 	.word	0x20001074
 8008ef0:	200000a0 	.word	0x200000a0
 8008ef4:	08011dd8 	.word	0x08011dd8
 8008ef8:	200011a4 	.word	0x200011a4

08008efc <SX1276SetRxConfig>:
{
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	b085      	sub	sp, #20
 8008f02:	4604      	mov	r4, r0
 8008f04:	9101      	str	r1, [sp, #4]
 8008f06:	4615      	mov	r5, r2
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8008f0e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8008f12:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8008f16:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8008f1a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8008f1e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8008f22:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8008f26:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8008f28:	f7ff ff5e 	bl	8008de8 <SX1276SetModem>
    switch( modem )
 8008f2c:	b124      	cbz	r4, 8008f38 <SX1276SetRxConfig+0x3c>
 8008f2e:	2c01      	cmp	r4, #1
 8008f30:	d069      	beq.n	8009006 <SX1276SetRxConfig+0x10a>
}
 8008f32:	b005      	add	sp, #20
 8008f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008f38:	4ba0      	ldr	r3, [pc, #640]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 8008f3a:	9c01      	ldr	r4, [sp, #4]
 8008f3c:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8008f40:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8008f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f46:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008f4a:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8008f4e:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8008f52:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008f56:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008f60:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8008f64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008f68:	fb02 fa0a 	mul.w	sl, r2, sl
 8008f6c:	fbba f2f5 	udiv	r2, sl, r5
 8008f70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8008f74:	4b92      	ldr	r3, [pc, #584]	; (80091c0 <SX1276SetRxConfig+0x2c4>)
 8008f76:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8008f7a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8008f7e:	2002      	movs	r0, #2
 8008f80:	f006 fa12 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8008f84:	b2e9      	uxtb	r1, r5
 8008f86:	2003      	movs	r0, #3
 8008f88:	f006 fa0e 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7ff f91f 	bl	80081d0 <GetFskBandwidthRegValue>
 8008f92:	4601      	mov	r1, r0
 8008f94:	2012      	movs	r0, #18
 8008f96:	f006 fa07 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8008f9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f9c:	f7ff f918 	bl	80081d0 <GetFskBandwidthRegValue>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	2013      	movs	r0, #19
 8008fa4:	f006 fa00 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008fa8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8008fac:	2025      	movs	r0, #37	; 0x25
 8008fae:	f006 f9fb 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008fb2:	fa5f f188 	uxtb.w	r1, r8
 8008fb6:	2026      	movs	r0, #38	; 0x26
 8008fb8:	f006 f9f6 	bl	800f3a8 <SX1276Write>
            if( fixLen == 1 )
 8008fbc:	b1df      	cbz	r7, 8008ff6 <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	2032      	movs	r0, #50	; 0x32
 8008fc2:	f006 f9f1 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008fc6:	2030      	movs	r0, #48	; 0x30
 8008fc8:	f006 f9fa 	bl	800f3c0 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8008fcc:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008fd0:	b1b7      	cbz	r7, 8009000 <SX1276SetRxConfig+0x104>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8008fd6:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8008fda:	b2c9      	uxtb	r1, r1
 8008fdc:	2030      	movs	r0, #48	; 0x30
 8008fde:	f006 f9e3 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8008fe2:	2031      	movs	r0, #49	; 0x31
 8008fe4:	f006 f9ec 	bl	800f3c0 <SX1276Read>
 8008fe8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008fec:	b2c9      	uxtb	r1, r1
 8008fee:	2031      	movs	r0, #49	; 0x31
 8008ff0:	f006 f9da 	bl	800f3a8 <SX1276Write>
        break;
 8008ff4:	e79d      	b.n	8008f32 <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8008ff6:	21ff      	movs	r1, #255	; 0xff
 8008ff8:	2032      	movs	r0, #50	; 0x32
 8008ffa:	f006 f9d5 	bl	800f3a8 <SX1276Write>
 8008ffe:	e7e2      	b.n	8008fc6 <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009000:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009004:	e7e6      	b.n	8008fd4 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d900      	bls.n	800900e <SX1276SetRxConfig+0x112>
                while( 1 );
 800900c:	e7fe      	b.n	800900c <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 800900e:	9c01      	ldr	r4, [sp, #4]
 8009010:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8009012:	4b6a      	ldr	r3, [pc, #424]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 8009014:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8009018:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 800901c:	9a03      	ldr	r2, [sp, #12]
 800901e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8009022:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8009026:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800902a:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800902e:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8009032:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009036:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800903a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800903e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8009042:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8009046:	9a02      	ldr	r2, [sp, #8]
 8009048:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 800904c:	2d0c      	cmp	r5, #12
 800904e:	d803      	bhi.n	8009058 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8009050:	2d05      	cmp	r5, #5
 8009052:	d802      	bhi.n	800905a <SX1276SetRxConfig+0x15e>
                datarate = 6;
 8009054:	2506      	movs	r5, #6
 8009056:	e000      	b.n	800905a <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8009058:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800905a:	2c07      	cmp	r4, #7
 800905c:	d063      	beq.n	8009126 <SX1276SetRxConfig+0x22a>
 800905e:	2c08      	cmp	r4, #8
 8009060:	d06a      	beq.n	8009138 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8009062:	4b56      	ldr	r3, [pc, #344]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800906a:	201d      	movs	r0, #29
 800906c:	f006 f9a8 	bl	800f3c0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8009070:	0123      	lsls	r3, r4, #4
 8009072:	b2da      	uxtb	r2, r3
 8009074:	9b03      	ldr	r3, [sp, #12]
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 800907c:	ea43 0107 	orr.w	r1, r3, r7
 8009080:	201d      	movs	r0, #29
 8009082:	f006 f991 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8009086:	201e      	movs	r0, #30
 8009088:	f006 f99a 	bl	800f3c0 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800908c:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8009090:	012a      	lsls	r2, r5, #4
 8009092:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8009094:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8009096:	00b3      	lsls	r3, r6, #2
 8009098:	b2db      	uxtb	r3, r3
 800909a:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800909c:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80090a0:	4319      	orrs	r1, r3
 80090a2:	201e      	movs	r0, #30
 80090a4:	f006 f980 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80090a8:	2026      	movs	r0, #38	; 0x26
 80090aa:	f006 f989 	bl	800f3c0 <SX1276Read>
 80090ae:	b241      	sxtb	r1, r0
 80090b0:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80090b4:	4b41      	ldr	r3, [pc, #260]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 80090b6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80090ba:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80090be:	b2c9      	uxtb	r1, r1
 80090c0:	2026      	movs	r0, #38	; 0x26
 80090c2:	f006 f971 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80090c6:	fa5f f18a 	uxtb.w	r1, sl
 80090ca:	201f      	movs	r0, #31
 80090cc:	f006 f96c 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80090d0:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80090d4:	2020      	movs	r0, #32
 80090d6:	f006 f967 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80090da:	fa5f f188 	uxtb.w	r1, r8
 80090de:	2021      	movs	r0, #33	; 0x21
 80090e0:	f006 f962 	bl	800f3a8 <SX1276Write>
            if( fixLen == 1 )
 80090e4:	bb5f      	cbnz	r7, 800913e <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80090e6:	4b35      	ldr	r3, [pc, #212]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 80090e8:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80090ec:	bb63      	cbnz	r3, 8009148 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80090ee:	2c09      	cmp	r4, #9
 80090f0:	d03a      	beq.n	8009168 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 80090f2:	2c09      	cmp	r4, #9
 80090f4:	d047      	beq.n	8009186 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80090f6:	2103      	movs	r1, #3
 80090f8:	2036      	movs	r0, #54	; 0x36
 80090fa:	f006 f955 	bl	800f3a8 <SX1276Write>
            if( datarate == 6 )
 80090fe:	2d06      	cmp	r5, #6
 8009100:	d04a      	beq.n	8009198 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009102:	2031      	movs	r0, #49	; 0x31
 8009104:	f006 f95c 	bl	800f3c0 <SX1276Read>
 8009108:	b241      	sxtb	r1, r0
 800910a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800910e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009112:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8009116:	2031      	movs	r0, #49	; 0x31
 8009118:	f006 f946 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800911c:	210a      	movs	r1, #10
 800911e:	2037      	movs	r0, #55	; 0x37
 8009120:	f006 f942 	bl	800f3a8 <SX1276Write>
}
 8009124:	e705      	b.n	8008f32 <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009126:	f1a5 030b 	sub.w	r3, r5, #11
 800912a:	2b01      	cmp	r3, #1
 800912c:	d897      	bhi.n	800905e <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800912e:	4b23      	ldr	r3, [pc, #140]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8009136:	e798      	b.n	800906a <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009138:	2d0c      	cmp	r5, #12
 800913a:	d192      	bne.n	8009062 <SX1276SetRxConfig+0x166>
 800913c:	e7f7      	b.n	800912e <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800913e:	4649      	mov	r1, r9
 8009140:	2022      	movs	r0, #34	; 0x22
 8009142:	f006 f931 	bl	800f3a8 <SX1276Write>
 8009146:	e7ce      	b.n	80090e6 <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009148:	2044      	movs	r0, #68	; 0x44
 800914a:	f006 f939 	bl	800f3c0 <SX1276Read>
 800914e:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8009152:	b2c9      	uxtb	r1, r1
 8009154:	2044      	movs	r0, #68	; 0x44
 8009156:	f006 f927 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800915a:	4b18      	ldr	r3, [pc, #96]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 800915c:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8009160:	2024      	movs	r0, #36	; 0x24
 8009162:	f006 f921 	bl	800f3a8 <SX1276Write>
 8009166:	e7c2      	b.n	80090ee <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8009168:	4b14      	ldr	r3, [pc, #80]	; (80091bc <SX1276SetRxConfig+0x2c0>)
 800916a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800916e:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <SX1276SetRxConfig+0x2c8>)
 8009170:	429a      	cmp	r2, r3
 8009172:	d9be      	bls.n	80090f2 <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8009174:	2102      	movs	r1, #2
 8009176:	2036      	movs	r0, #54	; 0x36
 8009178:	f006 f916 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800917c:	2164      	movs	r1, #100	; 0x64
 800917e:	203a      	movs	r0, #58	; 0x3a
 8009180:	f006 f912 	bl	800f3a8 <SX1276Write>
 8009184:	e7bb      	b.n	80090fe <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8009186:	2102      	movs	r1, #2
 8009188:	2036      	movs	r0, #54	; 0x36
 800918a:	f006 f90d 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800918e:	217f      	movs	r1, #127	; 0x7f
 8009190:	203a      	movs	r0, #58	; 0x3a
 8009192:	f006 f909 	bl	800f3a8 <SX1276Write>
 8009196:	e7b2      	b.n	80090fe <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009198:	2031      	movs	r0, #49	; 0x31
 800919a:	f006 f911 	bl	800f3c0 <SX1276Read>
 800919e:	b241      	sxtb	r1, r0
 80091a0:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80091a4:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80091a8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80091ac:	2031      	movs	r0, #49	; 0x31
 80091ae:	f006 f8fb 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80091b2:	210c      	movs	r1, #12
 80091b4:	2037      	movs	r0, #55	; 0x37
 80091b6:	f006 f8f7 	bl	800f3a8 <SX1276Write>
 80091ba:	e6ba      	b.n	8008f32 <SX1276SetRxConfig+0x36>
 80091bc:	200011a4 	.word	0x200011a4
 80091c0:	01e84800 	.word	0x01e84800
 80091c4:	1f4add40 	.word	0x1f4add40

080091c8 <SX1276SetTxConfig>:
{
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	b083      	sub	sp, #12
 80091ce:	4604      	mov	r4, r0
 80091d0:	460d      	mov	r5, r1
 80091d2:	9201      	str	r2, [sp, #4]
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80091da:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80091de:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80091e2:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80091e6:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80091ea:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80091ee:	f7ff fdfb 	bl	8008de8 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80091f2:	4628      	mov	r0, r5
 80091f4:	f7fe fe14 	bl	8007e20 <SX1276SetRfTxPower>
    switch( modem )
 80091f8:	b124      	cbz	r4, 8009204 <SX1276SetTxConfig+0x3c>
 80091fa:	2c01      	cmp	r4, #1
 80091fc:	d057      	beq.n	80092ae <SX1276SetTxConfig+0xe6>
}
 80091fe:	b003      	add	sp, #12
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8009204:	4b81      	ldr	r3, [pc, #516]	; (800940c <SX1276SetTxConfig+0x244>)
 8009206:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 800920a:	9801      	ldr	r0, [sp, #4]
 800920c:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8009210:	9a00      	ldr	r2, [sp, #0]
 8009212:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8009216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009218:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800921c:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8009220:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8009224:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8009228:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800922c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800922e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8009232:	f7fe ffb9 	bl	80081a8 <SX1276ConvertFreqInHzToPllStep>
 8009236:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8009238:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800923c:	2004      	movs	r0, #4
 800923e:	f006 f8b3 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8009242:	b2e1      	uxtb	r1, r4
 8009244:	2005      	movs	r0, #5
 8009246:	f006 f8af 	bl	800f3a8 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800924a:	4c71      	ldr	r4, [pc, #452]	; (8009410 <SX1276SetTxConfig+0x248>)
 800924c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800924e:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8009252:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8009256:	2002      	movs	r0, #2
 8009258:	f006 f8a6 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800925c:	b2e1      	uxtb	r1, r4
 800925e:	2003      	movs	r0, #3
 8009260:	f006 f8a2 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8009264:	0a39      	lsrs	r1, r7, #8
 8009266:	2025      	movs	r0, #37	; 0x25
 8009268:	f006 f89e 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800926c:	b2f9      	uxtb	r1, r7
 800926e:	2026      	movs	r0, #38	; 0x26
 8009270:	f006 f89a 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8009274:	2030      	movs	r0, #48	; 0x30
 8009276:	f006 f8a3 	bl	800f3c0 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800927a:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800927e:	f1b8 0f00 	cmp.w	r8, #0
 8009282:	d011      	beq.n	80092a8 <SX1276SetTxConfig+0xe0>
 8009284:	2300      	movs	r3, #0
 8009286:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8009288:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 800928c:	b2c9      	uxtb	r1, r1
 800928e:	2030      	movs	r0, #48	; 0x30
 8009290:	f006 f88a 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8009294:	2031      	movs	r0, #49	; 0x31
 8009296:	f006 f893 	bl	800f3c0 <SX1276Read>
 800929a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800929e:	b2c9      	uxtb	r1, r1
 80092a0:	2031      	movs	r0, #49	; 0x31
 80092a2:	f006 f881 	bl	800f3a8 <SX1276Write>
        break;
 80092a6:	e7aa      	b.n	80091fe <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80092a8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80092ac:	e7eb      	b.n	8009286 <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 80092ae:	4b57      	ldr	r3, [pc, #348]	; (800940c <SX1276SetTxConfig+0x244>)
 80092b0:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 80092b4:	9b00      	ldr	r3, [sp, #0]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d900      	bls.n	80092bc <SX1276SetTxConfig+0xf4>
                while( 1 );
 80092ba:	e7fe      	b.n	80092ba <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 80092bc:	9c00      	ldr	r4, [sp, #0]
 80092be:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80092c0:	4b52      	ldr	r3, [pc, #328]	; (800940c <SX1276SetTxConfig+0x244>)
 80092c2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80092c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092c8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80092cc:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80092d0:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80092d4:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80092d8:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80092dc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80092e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80092e4:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80092e8:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80092ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80092f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f4:	2b0c      	cmp	r3, #12
 80092f6:	d804      	bhi.n	8009302 <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d804      	bhi.n	8009306 <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80092fc:	2306      	movs	r3, #6
 80092fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009300:	e001      	b.n	8009306 <SX1276SetTxConfig+0x13e>
                datarate = 12;
 8009302:	230c      	movs	r3, #12
 8009304:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009306:	2c07      	cmp	r4, #7
 8009308:	d051      	beq.n	80093ae <SX1276SetTxConfig+0x1e6>
 800930a:	2c08      	cmp	r4, #8
 800930c:	d058      	beq.n	80093c0 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800930e:	4b3f      	ldr	r3, [pc, #252]	; (800940c <SX1276SetTxConfig+0x244>)
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	d155      	bne.n	80093c8 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800931c:	201d      	movs	r0, #29
 800931e:	f006 f84f 	bl	800f3c0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8009322:	0123      	lsls	r3, r4, #4
 8009324:	b2da      	uxtb	r2, r3
 8009326:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800932a:	b2db      	uxtb	r3, r3
 800932c:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 800932e:	ea43 0108 	orr.w	r1, r3, r8
 8009332:	201d      	movs	r0, #29
 8009334:	f006 f838 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8009338:	201e      	movs	r0, #30
 800933a:	f006 f841 	bl	800f3c0 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800933e:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8009342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8009348:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800934a:	00b3      	lsls	r3, r6, #2
 800934c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800934e:	4319      	orrs	r1, r3
 8009350:	201e      	movs	r0, #30
 8009352:	f006 f829 	bl	800f3a8 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8009356:	2026      	movs	r0, #38	; 0x26
 8009358:	f006 f832 	bl	800f3c0 <SX1276Read>
 800935c:	b241      	sxtb	r1, r0
 800935e:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8009362:	4b2a      	ldr	r3, [pc, #168]	; (800940c <SX1276SetTxConfig+0x244>)
 8009364:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009368:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800936c:	b2c9      	uxtb	r1, r1
 800936e:	2026      	movs	r0, #38	; 0x26
 8009370:	f006 f81a 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8009374:	0a39      	lsrs	r1, r7, #8
 8009376:	2020      	movs	r0, #32
 8009378:	f006 f816 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800937c:	b2f9      	uxtb	r1, r7
 800937e:	2021      	movs	r0, #33	; 0x21
 8009380:	f006 f812 	bl	800f3a8 <SX1276Write>
            if( datarate == 6 )
 8009384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009386:	2b06      	cmp	r3, #6
 8009388:	d02e      	beq.n	80093e8 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800938a:	2031      	movs	r0, #49	; 0x31
 800938c:	f006 f818 	bl	800f3c0 <SX1276Read>
 8009390:	b241      	sxtb	r1, r0
 8009392:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8009396:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800939a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 800939e:	2031      	movs	r0, #49	; 0x31
 80093a0:	f006 f802 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80093a4:	210a      	movs	r1, #10
 80093a6:	2037      	movs	r0, #55	; 0x37
 80093a8:	f005 fffe 	bl	800f3a8 <SX1276Write>
}
 80093ac:	e727      	b.n	80091fe <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80093ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b0:	3b0b      	subs	r3, #11
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d8a9      	bhi.n	800930a <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80093b6:	4b15      	ldr	r3, [pc, #84]	; (800940c <SX1276SetTxConfig+0x244>)
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80093be:	e7aa      	b.n	8009316 <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80093c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093c2:	2b0c      	cmp	r3, #12
 80093c4:	d1a3      	bne.n	800930e <SX1276SetTxConfig+0x146>
 80093c6:	e7f6      	b.n	80093b6 <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80093c8:	2044      	movs	r0, #68	; 0x44
 80093ca:	f005 fff9 	bl	800f3c0 <SX1276Read>
 80093ce:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80093d2:	b2c9      	uxtb	r1, r1
 80093d4:	2044      	movs	r0, #68	; 0x44
 80093d6:	f005 ffe7 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <SX1276SetTxConfig+0x244>)
 80093dc:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80093e0:	2024      	movs	r0, #36	; 0x24
 80093e2:	f005 ffe1 	bl	800f3a8 <SX1276Write>
 80093e6:	e799      	b.n	800931c <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80093e8:	2031      	movs	r0, #49	; 0x31
 80093ea:	f005 ffe9 	bl	800f3c0 <SX1276Read>
 80093ee:	b241      	sxtb	r1, r0
 80093f0:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80093f4:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80093f8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80093fc:	2031      	movs	r0, #49	; 0x31
 80093fe:	f005 ffd3 	bl	800f3a8 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8009402:	210c      	movs	r1, #12
 8009404:	2037      	movs	r0, #55	; 0x37
 8009406:	f005 ffcf 	bl	800f3a8 <SX1276Write>
 800940a:	e6f8      	b.n	80091fe <SX1276SetTxConfig+0x36>
 800940c:	200011a4 	.word	0x200011a4
 8009410:	01e84800 	.word	0x01e84800

08009414 <SX1276SetTxContinuousWave>:
{
 8009414:	b530      	push	{r4, r5, lr}
 8009416:	b08b      	sub	sp, #44	; 0x2c
 8009418:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800941a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800941e:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 8009422:	f7fe ff27 	bl	8008274 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8009426:	9408      	str	r4, [sp, #32]
 8009428:	2000      	movs	r0, #0
 800942a:	9007      	str	r0, [sp, #28]
 800942c:	9006      	str	r0, [sp, #24]
 800942e:	9005      	str	r0, [sp, #20]
 8009430:	9004      	str	r0, [sp, #16]
 8009432:	9003      	str	r0, [sp, #12]
 8009434:	2305      	movs	r3, #5
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	9001      	str	r0, [sp, #4]
 800943a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	4603      	mov	r3, r0
 8009442:	4602      	mov	r2, r0
 8009444:	4629      	mov	r1, r5
 8009446:	f7ff febf 	bl	80091c8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800944a:	2031      	movs	r0, #49	; 0x31
 800944c:	f005 ffb8 	bl	800f3c0 <SX1276Read>
 8009450:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8009454:	2031      	movs	r0, #49	; 0x31
 8009456:	f005 ffa7 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800945a:	21f0      	movs	r1, #240	; 0xf0
 800945c:	2040      	movs	r0, #64	; 0x40
 800945e:	f005 ffa3 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8009462:	21a0      	movs	r1, #160	; 0xa0
 8009464:	2041      	movs	r0, #65	; 0x41
 8009466:	f005 ff9f 	bl	800f3a8 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800946a:	4d08      	ldr	r5, [pc, #32]	; (800948c <SX1276SetTxContinuousWave+0x78>)
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f005 fec2 	bl	800f1f8 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <SX1276SetTxContinuousWave+0x7c>)
 8009476:	2202      	movs	r2, #2
 8009478:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800947c:	4628      	mov	r0, r5
 800947e:	f7fe fdd9 	bl	8008034 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8009482:	2003      	movs	r0, #3
 8009484:	f005 ffa8 	bl	800f3d8 <SX1276SetOpMode>
}
 8009488:	b00b      	add	sp, #44	; 0x2c
 800948a:	bd30      	pop	{r4, r5, pc}
 800948c:	200012e8 	.word	0x200012e8
 8009490:	200011a4 	.word	0x200011a4

08009494 <SX1276SetMaxPayloadLength>:
{
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4604      	mov	r4, r0
 8009498:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 800949a:	f7ff fca5 	bl	8008de8 <SX1276SetModem>
    switch( modem )
 800949e:	b114      	cbz	r4, 80094a6 <SX1276SetMaxPayloadLength+0x12>
 80094a0:	2c01      	cmp	r4, #1
 80094a2:	d00a      	beq.n	80094ba <SX1276SetMaxPayloadLength+0x26>
}
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <SX1276SetMaxPayloadLength+0x30>)
 80094a8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1f9      	bne.n	80094a4 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80094b0:	4629      	mov	r1, r5
 80094b2:	2032      	movs	r0, #50	; 0x32
 80094b4:	f005 ff78 	bl	800f3a8 <SX1276Write>
 80094b8:	e7f4      	b.n	80094a4 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80094ba:	4629      	mov	r1, r5
 80094bc:	2023      	movs	r0, #35	; 0x23
 80094be:	f005 ff73 	bl	800f3a8 <SX1276Write>
}
 80094c2:	e7ef      	b.n	80094a4 <SX1276SetMaxPayloadLength+0x10>
 80094c4:	200011a4 	.word	0x200011a4

080094c8 <SX1276SetPublicNetwork>:
{
 80094c8:	b510      	push	{r4, lr}
 80094ca:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80094cc:	2001      	movs	r0, #1
 80094ce:	f7ff fc8b 	bl	8008de8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <SX1276SetPublicNetwork+0x28>)
 80094d4:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80094d8:	b124      	cbz	r4, 80094e4 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80094da:	2134      	movs	r1, #52	; 0x34
 80094dc:	2039      	movs	r0, #57	; 0x39
 80094de:	f005 ff63 	bl	800f3a8 <SX1276Write>
}
 80094e2:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80094e4:	2112      	movs	r1, #18
 80094e6:	2039      	movs	r0, #57	; 0x39
 80094e8:	f005 ff5e 	bl	800f3a8 <SX1276Write>
}
 80094ec:	e7f9      	b.n	80094e2 <SX1276SetPublicNetwork+0x1a>
 80094ee:	bf00      	nop
 80094f0:	200011a4 	.word	0x200011a4

080094f4 <SX1276OnTimeoutIrq>:
{
 80094f4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80094f6:	4b33      	ldr	r3, [pc, #204]	; (80095c4 <SX1276OnTimeoutIrq+0xd0>)
 80094f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d002      	beq.n	8009506 <SX1276OnTimeoutIrq+0x12>
 8009500:	2b02      	cmp	r3, #2
 8009502:	d033      	beq.n	800956c <SX1276OnTimeoutIrq+0x78>
}
 8009504:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8009506:	4b2f      	ldr	r3, [pc, #188]	; (80095c4 <SX1276OnTimeoutIrq+0xd0>)
 8009508:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800950c:	b143      	cbz	r3, 8009520 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800950e:	4b2e      	ldr	r3, [pc, #184]	; (80095c8 <SX1276OnTimeoutIrq+0xd4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f6      	beq.n	8009504 <SX1276OnTimeoutIrq+0x10>
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0f3      	beq.n	8009504 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 800951c:	4798      	blx	r3
 800951e:	e7f1      	b.n	8009504 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009520:	4c28      	ldr	r4, [pc, #160]	; (80095c4 <SX1276OnTimeoutIrq+0xd0>)
 8009522:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009526:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800952a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 800952e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8009532:	210b      	movs	r1, #11
 8009534:	203e      	movs	r0, #62	; 0x3e
 8009536:	f005 ff37 	bl	800f3a8 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800953a:	2110      	movs	r1, #16
 800953c:	203f      	movs	r0, #63	; 0x3f
 800953e:	f005 ff33 	bl	800f3a8 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8009542:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8009546:	b14b      	cbz	r3, 800955c <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009548:	200d      	movs	r0, #13
 800954a:	f005 ff39 	bl	800f3c0 <SX1276Read>
 800954e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009552:	b2c9      	uxtb	r1, r1
 8009554:	200d      	movs	r0, #13
 8009556:	f005 ff27 	bl	800f3a8 <SX1276Write>
 800955a:	e7d8      	b.n	800950e <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 800955c:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <SX1276OnTimeoutIrq+0xd0>)
 800955e:	2200      	movs	r2, #0
 8009560:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8009564:	4819      	ldr	r0, [pc, #100]	; (80095cc <SX1276OnTimeoutIrq+0xd8>)
 8009566:	f7fe fddf 	bl	8008128 <TimerStop>
 800956a:	e7d0      	b.n	800950e <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 800956c:	f7fe f9d8 	bl	8007920 <SX1276Reset>
        RxChainCalibration( );
 8009570:	f7ff f960 	bl	8008834 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009574:	2000      	movs	r0, #0
 8009576:	f005 ff2f 	bl	800f3d8 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800957a:	2400      	movs	r4, #0
 800957c:	e00c      	b.n	8009598 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800957e:	4a14      	ldr	r2, [pc, #80]	; (80095d0 <SX1276OnTimeoutIrq+0xdc>)
 8009580:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009584:	18d5      	adds	r5, r2, r3
 8009586:	5cd0      	ldrb	r0, [r2, r3]
 8009588:	f7ff fc2e 	bl	8008de8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800958c:	78a9      	ldrb	r1, [r5, #2]
 800958e:	7868      	ldrb	r0, [r5, #1]
 8009590:	f005 ff0a 	bl	800f3a8 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009594:	3401      	adds	r4, #1
 8009596:	b2e4      	uxtb	r4, r4
 8009598:	2c0f      	cmp	r4, #15
 800959a:	d9f0      	bls.n	800957e <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 800959c:	2000      	movs	r0, #0
 800959e:	f7ff fc23 	bl	8008de8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80095a2:	4c08      	ldr	r4, [pc, #32]	; (80095c4 <SX1276OnTimeoutIrq+0xd0>)
 80095a4:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 80095a8:	f7ff ff8e 	bl	80094c8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <SX1276OnTimeoutIrq+0xd4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0a4      	beq.n	8009504 <SX1276OnTimeoutIrq+0x10>
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0a1      	beq.n	8009504 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 80095c0:	4798      	blx	r3
}
 80095c2:	e79f      	b.n	8009504 <SX1276OnTimeoutIrq+0x10>
 80095c4:	200011a4 	.word	0x200011a4
 80095c8:	20001070 	.word	0x20001070
 80095cc:	20001074 	.word	0x20001074
 80095d0:	08011dd8 	.word	0x08011dd8

080095d4 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	b090      	sub	sp, #64	; 0x40
 80095da:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 80095dc:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80095de:	6843      	ldr	r3, [r0, #4]
 80095e0:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80095e2:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 80095e4:	2a01      	cmp	r2, #1
 80095e6:	d015      	beq.n	8009614 <uart_stm32_configure+0x40>
 80095e8:	2a02      	cmp	r2, #2
 80095ea:	d116      	bne.n	800961a <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 80095ec:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80095f0:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d017      	beq.n	8009626 <uart_stm32_configure+0x52>
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d018      	beq.n	800962c <uart_stm32_configure+0x58>
 80095fa:	b18b      	cbz	r3, 8009620 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 80095fc:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8009600:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 8009602:	2902      	cmp	r1, #2
 8009604:	d015      	beq.n	8009632 <uart_stm32_configure+0x5e>
 8009606:	2904      	cmp	r1, #4
 8009608:	d019      	beq.n	800963e <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 800960a:	2a00      	cmp	r2, #0
 800960c:	f040 8097 	bne.w	800973e <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8009610:	2700      	movs	r7, #0
 8009612:	e016      	b.n	8009642 <uart_stm32_configure+0x6e>
	switch (parity) {
 8009614:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8009618:	e7ea      	b.n	80095f0 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 800961a:	f04f 0e00 	mov.w	lr, #0
 800961e:	e7e7      	b.n	80095f0 <uart_stm32_configure+0x1c>
	switch (sb) {
 8009620:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8009624:	e7ec      	b.n	8009600 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 8009626:	f04f 0c00 	mov.w	ip, #0
 800962a:	e7e9      	b.n	8009600 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 800962c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8009630:	e7e6      	b.n	8009600 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 8009632:	b10a      	cbz	r2, 8009638 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 8009634:	2700      	movs	r7, #0
 8009636:	e004      	b.n	8009642 <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8009638:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800963c:	e001      	b.n	8009642 <uart_stm32_configure+0x6e>
	switch (db) {
 800963e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8009642:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8009646:	f1ba 0f01 	cmp.w	sl, #1
 800964a:	d07b      	beq.n	8009744 <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 800964c:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8009650:	f1a2 0903 	sub.w	r9, r2, #3
 8009654:	fa5f f989 	uxtb.w	r9, r9
 8009658:	f1b9 0f01 	cmp.w	r9, #1
 800965c:	f240 80c1 	bls.w	80097e2 <uart_stm32_configure+0x20e>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8009660:	b112      	cbz	r2, 8009668 <uart_stm32_configure+0x94>
 8009662:	2904      	cmp	r1, #4
 8009664:	f000 80c0 	beq.w	80097e8 <uart_stm32_configure+0x214>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80c0 	beq.w	80097ee <uart_stm32_configure+0x21a>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 800966e:	2b02      	cmp	r3, #2
 8009670:	f000 80c0 	beq.w	80097f4 <uart_stm32_configure+0x220>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8009674:	2901      	cmp	r1, #1
 8009676:	f240 80c0 	bls.w	80097fa <uart_stm32_configure+0x226>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800967a:	2904      	cmp	r1, #4
 800967c:	f000 80c0 	beq.w	8009800 <uart_stm32_configure+0x22c>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8009680:	f1ba 0f00 	cmp.w	sl, #0
 8009684:	d017      	beq.n	80096b6 <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8009686:	4b63      	ldr	r3, [pc, #396]	; (8009814 <uart_stm32_configure+0x240>)
 8009688:	429d      	cmp	r5, r3
 800968a:	d010      	beq.n	80096ae <uart_stm32_configure+0xda>
 800968c:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8009690:	429d      	cmp	r5, r3
 8009692:	d00c      	beq.n	80096ae <uart_stm32_configure+0xda>
 8009694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009698:	429d      	cmp	r5, r3
 800969a:	d008      	beq.n	80096ae <uart_stm32_configure+0xda>
 800969c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a0:	429d      	cmp	r5, r3
 80096a2:	d004      	beq.n	80096ae <uart_stm32_configure+0xda>
 80096a4:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80096a8:	429d      	cmp	r5, r3
 80096aa:	f040 80ac 	bne.w	8009806 <uart_stm32_configure+0x232>
 80096ae:	f1ba 0f01 	cmp.w	sl, #1
 80096b2:	f040 80ab 	bne.w	800980c <uart_stm32_configure+0x238>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80096be:	6843      	ldr	r3, [r0, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 80096c8:	459e      	cmp	lr, r3
 80096ca:	d005      	beq.n	80096d8 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80096cc:	6813      	ldr	r3, [r2, #0]
 80096ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80096d2:	ea4e 0303 	orr.w	r3, lr, r3
 80096d6:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80096d8:	6843      	ldr	r3, [r0, #4]
 80096da:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80096dc:	6853      	ldr	r3, [r2, #4]
 80096de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80096e2:	459c      	cmp	ip, r3
 80096e4:	d005      	beq.n	80096f2 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80096e6:	6853      	ldr	r3, [r2, #4]
 80096e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80096ec:	ea4c 0303 	orr.w	r3, ip, r3
 80096f0:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80096f2:	6843      	ldr	r3, [r0, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80096fc:	429f      	cmp	r7, r3
 80096fe:	d004      	beq.n	800970a <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8009700:	6813      	ldr	r3, [r2, #0]
 8009702:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8009706:	431f      	orrs	r7, r3
 8009708:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800970a:	6843      	ldr	r3, [r0, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800970e:	6893      	ldr	r3, [r2, #8]
 8009710:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8009714:	4598      	cmp	r8, r3
 8009716:	d005      	beq.n	8009724 <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009718:	6893      	ldr	r3, [r2, #8]
 800971a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971e:	ea48 0303 	orr.w	r3, r8, r3
 8009722:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8009724:	f8d4 8000 	ldr.w	r8, [r4]
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	4598      	cmp	r8, r3
 800972c:	d10d      	bne.n	800974a <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	f043 0301 	orr.w	r3, r3, #1
 8009734:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8009736:	2000      	movs	r0, #0
};
 8009738:	b010      	add	sp, #64	; 0x40
 800973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 800973e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8009742:	e77e      	b.n	8009642 <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 8009744:	f44f 7840 	mov.w	r8, #768	; 0x300
 8009748:	e782      	b.n	8009650 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 800974a:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800974c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009750:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 8009754:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009758:	4650      	mov	r0, sl
 800975a:	f006 f854 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800975e:	b1b8      	cbz	r0, 8009790 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8009760:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	b1b3      	cbz	r3, 8009796 <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8009768:	466a      	mov	r2, sp
 800976a:	4649      	mov	r1, r9
 800976c:	4650      	mov	r0, sl
 800976e:	4798      	blx	r3
 8009770:	2800      	cmp	r0, #0
 8009772:	db13      	blt.n	800979c <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800977a:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800977c:	9b00      	ldr	r3, [sp, #0]
 800977e:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8009782:	fbb3 f3f8 	udiv	r3, r3, r8
 8009786:	b29b      	uxth	r3, r3
 8009788:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	e7ce      	b.n	800972e <uart_stm32_configure+0x15a>
		return -ENODEV;
 8009790:	f06f 0012 	mvn.w	r0, #18
 8009794:	e7ec      	b.n	8009770 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 8009796:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800979a:	e7e9      	b.n	8009770 <uart_stm32_configure+0x19c>
		LOG_ERR("Failed call clock_control_get_rate");
 800979c:	2201      	movs	r2, #1
 800979e:	f8ad 2008 	strh.w	r2, [sp, #8]
 80097a2:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <uart_stm32_configure+0x244>)
 80097a4:	930e      	str	r3, [sp, #56]	; 0x38
 80097a6:	2300      	movs	r3, #0
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	2102      	movs	r1, #2
 80097ac:	f88d 1004 	strb.w	r1, [sp, #4]
 80097b0:	9901      	ldr	r1, [sp, #4]
 80097b2:	910d      	str	r1, [sp, #52]	; 0x34
 80097b4:	4619      	mov	r1, r3
 80097b6:	f363 0100 	bfi	r1, r3, #0, #1
 80097ba:	f363 0141 	bfi	r1, r3, #1, #1
 80097be:	f363 0182 	bfi	r1, r3, #2, #1
 80097c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80097c6:	f362 1188 	bfi	r1, r2, #6, #3
 80097ca:	2208      	movs	r2, #8
 80097cc:	f362 2152 	bfi	r1, r2, #9, #10
 80097d0:	f363 41de 	bfi	r1, r3, #19, #12
 80097d4:	f363 71df 	bfi	r1, r3, #31, #1
 80097d8:	aa0d      	add	r2, sp, #52	; 0x34
 80097da:	4810      	ldr	r0, [pc, #64]	; (800981c <uart_stm32_configure+0x248>)
 80097dc:	f004 fe53 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return;
 80097e0:	e7d3      	b.n	800978a <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 80097e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80097e6:	e7a7      	b.n	8009738 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80097e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80097ec:	e7a4      	b.n	8009738 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80097ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80097f2:	e7a1      	b.n	8009738 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80097f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80097f8:	e79e      	b.n	8009738 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80097fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80097fe:	e79b      	b.n	8009738 <uart_stm32_configure+0x164>
 8009800:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009804:	e798      	b.n	8009738 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 8009806:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800980a:	e795      	b.n	8009738 <uart_stm32_configure+0x164>
 800980c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009810:	e792      	b.n	8009738 <uart_stm32_configure+0x164>
 8009812:	bf00      	nop
 8009814:	40013800 	.word	0x40013800
 8009818:	08011980 	.word	0x08011980
 800981c:	08010bc8 	.word	0x08010bc8

08009820 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8009820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009824:	b096      	sub	sp, #88	; 0x58
 8009826:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 8009828:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800982a:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800982e:	463e      	mov	r6, r7
 8009830:	f856 4b08 	ldr.w	r4, [r6], #8
	data->clock = clk;
 8009834:	4870      	ldr	r0, [pc, #448]	; (80099f8 <uart_stm32_init+0x1d8>)
 8009836:	f8c8 0004 	str.w	r0, [r8, #4]
 800983a:	f005 ffe4 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800983e:	b358      	cbz	r0, 8009898 <uart_stm32_init+0x78>
	const struct clock_control_driver_api *api =
 8009840:	486d      	ldr	r0, [pc, #436]	; (80099f8 <uart_stm32_init+0x1d8>)
 8009842:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4631      	mov	r1, r6
 8009848:	4798      	blx	r3
 800984a:	4606      	mov	r6, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800984c:	2e00      	cmp	r6, #0
 800984e:	f040 80ce 	bne.w	80099ee <uart_stm32_init+0x1ce>
	ret = pinctrl_lookup_state(config, id, &state);
 8009852:	aa02      	add	r2, sp, #8
 8009854:	2100      	movs	r1, #0
 8009856:	69f8      	ldr	r0, [r7, #28]
 8009858:	f005 fee7 	bl	800f62a <pinctrl_lookup_state>
	if (ret < 0) {
 800985c:	1e03      	subs	r3, r0, #0
 800985e:	db06      	blt.n	800986e <uart_stm32_init+0x4e>
	return pinctrl_apply_state_direct(config, state);
 8009860:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8009862:	2200      	movs	r2, #0
 8009864:	7919      	ldrb	r1, [r3, #4]
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	f005 fef9 	bl	800f65e <pinctrl_configure_pins>
 800986c:	4603      	mov	r3, r0
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800986e:	2b00      	cmp	r3, #0
 8009870:	f2c0 80c0 	blt.w	80099f4 <uart_stm32_init+0x1d4>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	f023 0301 	bic.w	r3, r3, #1
 800987a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	f043 030c 	orr.w	r3, r3, #12
 8009882:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d033      	beq.n	80098f2 <uart_stm32_init+0xd2>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800988a:	2b01      	cmp	r3, #1
 800988c:	f000 8081 	beq.w	8009992 <uart_stm32_init+0x172>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8009890:	b92b      	cbnz	r3, 800989e <uart_stm32_init+0x7e>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8009892:	2100      	movs	r1, #0
		ll_parity = LL_USART_PARITY_NONE;
 8009894:	460b      	mov	r3, r1
 8009896:	e030      	b.n	80098fa <uart_stm32_init+0xda>
		return -ENODEV;
 8009898:	f06f 0612 	mvn.w	r6, #18
 800989c:	e7d6      	b.n	800984c <uart_stm32_init+0x2c>
			LOG_WRN("Invalid parity setting '%d'."
 800989e:	2201      	movs	r2, #1
 80098a0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80098a4:	4a55      	ldr	r2, [pc, #340]	; (80099fc <uart_stm32_init+0x1dc>)
 80098a6:	920e      	str	r2, [sp, #56]	; 0x38
 80098a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80098aa:	f04f 0900 	mov.w	r9, #0
 80098ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80098b2:	2303      	movs	r3, #3
 80098b4:	f88d 3004 	strb.w	r3, [sp, #4]
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	930d      	str	r3, [sp, #52]	; 0x34
 80098bc:	4649      	mov	r1, r9
 80098be:	f369 0100 	bfi	r1, r9, #0, #1
 80098c2:	f369 0141 	bfi	r1, r9, #1, #1
 80098c6:	f369 0182 	bfi	r1, r9, #2, #1
 80098ca:	f369 01c5 	bfi	r1, r9, #3, #3
 80098ce:	2302      	movs	r3, #2
 80098d0:	f363 1188 	bfi	r1, r3, #6, #3
 80098d4:	230c      	movs	r3, #12
 80098d6:	f363 2152 	bfi	r1, r3, #9, #10
 80098da:	f369 41de 	bfi	r1, r9, #19, #12
 80098de:	f369 71df 	bfi	r1, r9, #31, #1
 80098e2:	464b      	mov	r3, r9
 80098e4:	aa0d      	add	r2, sp, #52	; 0x34
 80098e6:	4846      	ldr	r0, [pc, #280]	; (8009a00 <uart_stm32_init+0x1e0>)
 80098e8:	f004 fdcd 	bl	800e486 <z_impl_z_log_msg2_static_create>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80098ec:	4649      	mov	r1, r9
		ll_parity = LL_USART_PARITY_NONE;
 80098ee:	464b      	mov	r3, r9
 80098f0:	e003      	b.n	80098fa <uart_stm32_init+0xda>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80098f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80098f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009900:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8009904:	4319      	orrs	r1, r3
 8009906:	430a      	orrs	r2, r1
 8009908:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800990a:	6863      	ldr	r3, [r4, #4]
 800990c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009910:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8009912:	7c3b      	ldrb	r3, [r7, #16]
 8009914:	b12b      	cbz	r3, 8009922 <uart_stm32_init+0x102>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009916:	686b      	ldr	r3, [r5, #4]
 8009918:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800991a:	6893      	ldr	r3, [r2, #8]
 800991c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009920:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8009922:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = dev->data;
 8009926:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009928:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800992c:	f859 5b08 	ldr.w	r5, [r9], #8
	if (clock_control_get_rate(data->clock,
 8009930:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009934:	4650      	mov	r0, sl
 8009936:	f005 ff66 	bl	800f806 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800993a:	b378      	cbz	r0, 800999c <uart_stm32_init+0x17c>
	const struct clock_control_driver_api *api =
 800993c:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	b373      	cbz	r3, 80099a2 <uart_stm32_init+0x182>
	return api->get_rate(dev, sys, rate);
 8009944:	466a      	mov	r2, sp
 8009946:	4649      	mov	r1, r9
 8009948:	4650      	mov	r0, sl
 800994a:	4798      	blx	r3
 800994c:	2800      	cmp	r0, #0
 800994e:	db2b      	blt.n	80099a8 <uart_stm32_init+0x188>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009956:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800995e:	fbb3 f3f8 	udiv	r3, r3, r8
 8009962:	b29b      	uxth	r3, r3
 8009964:	60eb      	str	r3, [r5, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 8009966:	7e3b      	ldrb	r3, [r7, #24]
 8009968:	b11b      	cbz	r3, 8009972 <uart_stm32_init+0x152>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	f043 0308 	orr.w	r3, r3, #8
 8009970:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	f043 0301 	orr.w	r3, r3, #1
 8009978:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800997a:	69e3      	ldr	r3, [r4, #28]
 800997c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8009980:	d0fb      	beq.n	800997a <uart_stm32_init+0x15a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8009982:	69e3      	ldr	r3, [r4, #28]
 8009984:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009988:	d0fb      	beq.n	8009982 <uart_stm32_init+0x162>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800998a:	4630      	mov	r0, r6
 800998c:	b016      	add	sp, #88	; 0x58
 800998e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8009992:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8009996:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800999a:	e7ae      	b.n	80098fa <uart_stm32_init+0xda>
		return -ENODEV;
 800999c:	f06f 0012 	mvn.w	r0, #18
 80099a0:	e7d4      	b.n	800994c <uart_stm32_init+0x12c>
		return -ENOSYS;
 80099a2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80099a6:	e7d1      	b.n	800994c <uart_stm32_init+0x12c>
		LOG_ERR("Failed call clock_control_get_rate");
 80099a8:	2201      	movs	r2, #1
 80099aa:	f8ad 2008 	strh.w	r2, [sp, #8]
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <uart_stm32_init+0x1e4>)
 80099b0:	9314      	str	r3, [sp, #80]	; 0x50
 80099b2:	2300      	movs	r3, #0
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	2102      	movs	r1, #2
 80099b8:	f88d 1004 	strb.w	r1, [sp, #4]
 80099bc:	9901      	ldr	r1, [sp, #4]
 80099be:	9113      	str	r1, [sp, #76]	; 0x4c
 80099c0:	4619      	mov	r1, r3
 80099c2:	f363 0100 	bfi	r1, r3, #0, #1
 80099c6:	f363 0141 	bfi	r1, r3, #1, #1
 80099ca:	f363 0182 	bfi	r1, r3, #2, #1
 80099ce:	f363 01c5 	bfi	r1, r3, #3, #3
 80099d2:	f362 1188 	bfi	r1, r2, #6, #3
 80099d6:	2208      	movs	r2, #8
 80099d8:	f362 2152 	bfi	r1, r2, #9, #10
 80099dc:	f363 41de 	bfi	r1, r3, #19, #12
 80099e0:	f363 71df 	bfi	r1, r3, #31, #1
 80099e4:	aa13      	add	r2, sp, #76	; 0x4c
 80099e6:	4806      	ldr	r0, [pc, #24]	; (8009a00 <uart_stm32_init+0x1e0>)
 80099e8:	f004 fd4d 	bl	800e486 <z_impl_z_log_msg2_static_create>
		return;
 80099ec:	e7bb      	b.n	8009966 <uart_stm32_init+0x146>
		return -EIO;
 80099ee:	f06f 0604 	mvn.w	r6, #4
 80099f2:	e7ca      	b.n	800998a <uart_stm32_init+0x16a>
		return err;
 80099f4:	461e      	mov	r6, r3
 80099f6:	e7c8      	b.n	800998a <uart_stm32_init+0x16a>
 80099f8:	08010780 	.word	0x08010780
 80099fc:	08011e08 	.word	0x08011e08
 8009a00:	08010bc8 	.word	0x08010bc8
 8009a04:	08011980 	.word	0x08011980

08009a08 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8009a08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a0c:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8009a0e:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8009a10:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8009a12:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009a16:	d101      	bne.n	8009a1c <elapsed+0x14>
	    || (val1 < val2)) {
 8009a18:	4281      	cmp	r1, r0
 8009a1a:	d208      	bcs.n	8009a2e <elapsed+0x26>
		overflow_cyc += last_load;
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <elapsed+0x34>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4907      	ldr	r1, [pc, #28]	; (8009a40 <elapsed+0x38>)
 8009a22:	6809      	ldr	r1, [r1, #0]
 8009a24:	440a      	add	r2, r1
 8009a26:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8009a28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a2c:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <elapsed+0x38>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	1a1b      	subs	r3, r3, r0
 8009a34:	4a01      	ldr	r2, [pc, #4]	; (8009a3c <elapsed+0x34>)
 8009a36:	6810      	ldr	r0, [r2, #0]
}
 8009a38:	4418      	add	r0, r3
 8009a3a:	4770      	bx	lr
 8009a3c:	2000130c 	.word	0x2000130c
 8009a40:	20001308 	.word	0x20001308

08009a44 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a44:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <sys_clock_driver_init+0x28>)
 8009a46:	2210      	movs	r2, #16
 8009a48:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8009a4c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <sys_clock_driver_init+0x2c>)
 8009a52:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8009a54:	2000      	movs	r0, #0
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <sys_clock_driver_init+0x30>)
 8009a58:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8009a5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a5e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009a60:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	f042 0207 	orr.w	r2, r2, #7
 8009a68:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8009a6a:	4770      	bx	lr
 8009a6c:	e000ed00 	.word	0xe000ed00
 8009a70:	20001308 	.word	0x20001308
 8009a74:	2000130c 	.word	0x2000130c

08009a78 <sys_clock_isr>:
{
 8009a78:	b508      	push	{r3, lr}
	elapsed();
 8009a7a:	f7ff ffc5 	bl	8009a08 <elapsed>
	cycle_count += overflow_cyc;
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <sys_clock_isr+0x38>)
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	4a0c      	ldr	r2, [pc, #48]	; (8009ab4 <sys_clock_isr+0x3c>)
 8009a84:	6811      	ldr	r1, [r2, #0]
 8009a86:	4408      	add	r0, r1
 8009a88:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	; (8009ab8 <sys_clock_isr+0x40>)
 8009a90:	6813      	ldr	r3, [r2, #0]
 8009a92:	1ac0      	subs	r0, r0, r3
 8009a94:	4909      	ldr	r1, [pc, #36]	; (8009abc <sys_clock_isr+0x44>)
 8009a96:	fba1 1000 	umull	r1, r0, r1, r0
 8009a9a:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8009a9c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009aa0:	fb01 3300 	mla	r3, r1, r0, r3
 8009aa4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8009aa6:	f002 f84b 	bl	800bb40 <sys_clock_announce>
	z_arm_int_exit();
 8009aaa:	f7fb fb97 	bl	80051dc <z_arm_exc_exit>
}
 8009aae:	bd08      	pop	{r3, pc}
 8009ab0:	2000130c 	.word	0x2000130c
 8009ab4:	20001304 	.word	0x20001304
 8009ab8:	20001300 	.word	0x20001300
 8009abc:	10624dd3 	.word	0x10624dd3

08009ac0 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8009ac0:	b111      	cbz	r1, 8009ac8 <sys_clock_set_timeout+0x8>
 8009ac2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ac6:	d03a      	beq.n	8009b3e <sys_clock_set_timeout+0x7e>
{
 8009ac8:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 8009aca:	4b38      	ldr	r3, [pc, #224]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009acc:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009ace:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ad2:	d03f      	beq.n	8009b54 <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009ad4:	2801      	cmp	r0, #1
 8009ad6:	dd40      	ble.n	8009b5a <sys_clock_set_timeout+0x9a>
 8009ad8:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8009adc:	dc3f      	bgt.n	8009b5e <sys_clock_set_timeout+0x9e>
 8009ade:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 8009ae0:	f04f 0310 	mov.w	r3, #16
 8009ae4:	f3ef 8611 	mrs	r6, BASEPRI
 8009ae8:	f383 8812 	msr	BASEPRI_MAX, r3
 8009aec:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8009af0:	f7ff ff8a 	bl	8009a08 <elapsed>
	val1 = SysTick->VAL;
 8009af4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009af8:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 8009afa:	4b2d      	ldr	r3, [pc, #180]	; (8009bb0 <sys_clock_set_timeout+0xf0>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4410      	add	r0, r2
 8009b00:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8009b02:	4b2c      	ldr	r3, [pc, #176]	; (8009bb4 <sys_clock_set_timeout+0xf4>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8009b08:	4b2b      	ldr	r3, [pc, #172]	; (8009bb8 <sys_clock_set_timeout+0xf8>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8009b0c:	1a83      	subs	r3, r0, r2
 8009b0e:	d429      	bmi.n	8009b64 <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 8009b10:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 8009b14:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8009b18:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8009b1c:	331f      	adds	r3, #31
 8009b1e:	4c27      	ldr	r4, [pc, #156]	; (8009bbc <sys_clock_set_timeout+0xfc>)
 8009b20:	fba4 4303 	umull	r4, r3, r4, r3
 8009b24:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8009b26:	1a12      	subs	r2, r2, r0
 8009b28:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b30:	d91d      	bls.n	8009b6e <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 8009b32:	4a23      	ldr	r2, [pc, #140]	; (8009bc0 <sys_clock_set_timeout+0x100>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d91c      	bls.n	8009b72 <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e01b      	b.n	8009b76 <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8009b3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009b42:	6913      	ldr	r3, [r2, #16]
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8009b4a:	4b18      	ldr	r3, [pc, #96]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009b4c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009b50:	601a      	str	r2, [r3, #0]
		return;
 8009b52:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009b54:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8009b58:	e7be      	b.n	8009ad8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009b5a:	2400      	movs	r4, #0
 8009b5c:	e7c0      	b.n	8009ae0 <sys_clock_set_timeout+0x20>
 8009b5e:	f44f 6403 	mov.w	r4, #2096	; 0x830
 8009b62:	e7bd      	b.n	8009ae0 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	e003      	b.n	8009b76 <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 8009b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8009b72:	4a0e      	ldr	r2, [pc, #56]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009b74:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 8009b76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b7a:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 8009b7c:	4a0b      	ldr	r2, [pc, #44]	; (8009bac <sys_clock_set_timeout+0xec>)
 8009b7e:	6812      	ldr	r2, [r2, #0]
 8009b80:	3a01      	subs	r2, #1
 8009b82:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009b84:	2200      	movs	r2, #0
 8009b86:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 8009b88:	42a1      	cmp	r1, r4
 8009b8a:	d209      	bcs.n	8009ba0 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 8009b8c:	1b2d      	subs	r5, r5, r4
 8009b8e:	440d      	add	r5, r1
 8009b90:	4428      	add	r0, r5
 8009b92:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <sys_clock_set_timeout+0xf0>)
 8009b94:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8009b96:	f386 8811 	msr	BASEPRI, r6
 8009b9a:	f3bf 8f6f 	isb	sy
}
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8009ba0:	1b0d      	subs	r5, r1, r4
 8009ba2:	4428      	add	r0, r5
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <sys_clock_set_timeout+0xf0>)
 8009ba6:	6018      	str	r0, [r3, #0]
 8009ba8:	e7f5      	b.n	8009b96 <sys_clock_set_timeout+0xd6>
 8009baa:	bf00      	nop
 8009bac:	20001308 	.word	0x20001308
 8009bb0:	20001304 	.word	0x20001304
 8009bb4:	2000130c 	.word	0x2000130c
 8009bb8:	20001300 	.word	0x20001300
 8009bbc:	10624dd3 	.word	0x10624dd3
 8009bc0:	00ffdc00 	.word	0x00ffdc00

08009bc4 <sys_clock_elapsed>:
{
 8009bc4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009bc6:	f04f 0310 	mov.w	r3, #16
 8009bca:	f3ef 8411 	mrs	r4, BASEPRI
 8009bce:	f383 8812 	msr	BASEPRI_MAX, r3
 8009bd2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8009bd6:	f7ff ff17 	bl	8009a08 <elapsed>
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <sys_clock_elapsed+0x34>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4418      	add	r0, r3
 8009be0:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <sys_clock_elapsed+0x38>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8009be6:	f384 8811 	msr	BASEPRI, r4
 8009bea:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8009bee:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <sys_clock_elapsed+0x3c>)
 8009bf0:	fba3 3000 	umull	r3, r0, r3, r0
}
 8009bf4:	0a40      	lsrs	r0, r0, #9
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	20001304 	.word	0x20001304
 8009bfc:	20001300 	.word	0x20001300
 8009c00:	10624dd3 	.word	0x10624dd3

08009c04 <sys_clock_cycle_get_32>:
{
 8009c04:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009c06:	f04f 0310 	mov.w	r3, #16
 8009c0a:	f3ef 8411 	mrs	r4, BASEPRI
 8009c0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009c12:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8009c16:	f7ff fef7 	bl	8009a08 <elapsed>
 8009c1a:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <sys_clock_cycle_get_32+0x28>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4418      	add	r0, r3
	__asm__ volatile(
 8009c20:	f384 8811 	msr	BASEPRI, r4
 8009c24:	f3bf 8f6f 	isb	sy
}
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20001304 	.word	0x20001304

08009c30 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8009c30:	28af      	cmp	r0, #175	; 0xaf
 8009c32:	d817      	bhi.n	8009c64 <stm32_pin_configure+0x34>
{
 8009c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	4616      	mov	r6, r2
 8009c3c:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8009c3e:	4a0b      	ldr	r2, [pc, #44]	; (8009c6c <stm32_pin_configure+0x3c>)
 8009c40:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8009c44:	b15f      	cbz	r7, 8009c5e <stm32_pin_configure+0x2e>
 8009c46:	4638      	mov	r0, r7
 8009c48:	f005 fddd 	bl	800f806 <z_device_is_ready>
 8009c4c:	b138      	cbz	r0, 8009c5e <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8009c4e:	4633      	mov	r3, r6
 8009c50:	462a      	mov	r2, r5
 8009c52:	f004 010f 	and.w	r1, r4, #15
 8009c56:	4638      	mov	r0, r7
 8009c58:	f004 ff3a 	bl	800ead0 <gpio_stm32_configure>
}
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 8009c5e:	f06f 0012 	mvn.w	r0, #18
 8009c62:	e7fb      	b.n	8009c5c <stm32_pin_configure+0x2c>
		return -EINVAL;
 8009c64:	f06f 0015 	mvn.w	r0, #21
}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	08011ea4 	.word	0x08011ea4

08009c70 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009c70:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009c72:	6a03      	ldr	r3, [r0, #32]
 8009c74:	f023 0301 	bic.w	r3, r3, #1
 8009c78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009c7a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009c7c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009c7e:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009c80:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8009c84:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8009c88:	680c      	ldr	r4, [r1, #0]
 8009c8a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009c8e:	f023 0302 	bic.w	r3, r3, #2
 8009c92:	690d      	ldr	r5, [r1, #16]
 8009c94:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	684d      	ldr	r5, [r1, #4]
 8009c9c:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9e:	4d13      	ldr	r5, [pc, #76]	; (8009cec <OC1Config+0x7c>)
 8009ca0:	42a8      	cmp	r0, r5
 8009ca2:	d007      	beq.n	8009cb4 <OC1Config+0x44>
 8009ca4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009ca8:	42a8      	cmp	r0, r5
 8009caa:	d003      	beq.n	8009cb4 <OC1Config+0x44>
 8009cac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009cb0:	42a8      	cmp	r0, r5
 8009cb2:	d112      	bne.n	8009cda <OC1Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8009cb4:	f023 0308 	bic.w	r3, r3, #8
 8009cb8:	694d      	ldr	r5, [r1, #20]
 8009cba:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009cbe:	f023 0304 	bic.w	r3, r3, #4
 8009cc2:	688d      	ldr	r5, [r1, #8]
 8009cc4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ccc:	698d      	ldr	r5, [r1, #24]
 8009cce:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009cd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009cd4:	69cd      	ldr	r5, [r1, #28]
 8009cd6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009cda:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009cdc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009cde:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ce0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009ce2:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	bc30      	pop	{r4, r5}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40012c00 	.word	0x40012c00

08009cf0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009cf0:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009cf2:	6a03      	ldr	r3, [r0, #32]
 8009cf4:	f023 0310 	bic.w	r3, r3, #16
 8009cf8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009cfa:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009cfc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009cfe:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009d00:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 8009d04:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 8009d08:	680c      	ldr	r4, [r1, #0]
 8009d0a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009d0e:	f023 0320 	bic.w	r3, r3, #32
 8009d12:	690d      	ldr	r5, [r1, #16]
 8009d14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009d18:	f023 0310 	bic.w	r3, r3, #16
 8009d1c:	684d      	ldr	r5, [r1, #4]
 8009d1e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d22:	4d13      	ldr	r5, [pc, #76]	; (8009d70 <OC2Config+0x80>)
 8009d24:	42a8      	cmp	r0, r5
 8009d26:	d007      	beq.n	8009d38 <OC2Config+0x48>
 8009d28:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009d2c:	42a8      	cmp	r0, r5
 8009d2e:	d003      	beq.n	8009d38 <OC2Config+0x48>
 8009d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d34:	42a8      	cmp	r0, r5
 8009d36:	d113      	bne.n	8009d60 <OC2Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3c:	694d      	ldr	r5, [r1, #20]
 8009d3e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d46:	688d      	ldr	r5, [r1, #8]
 8009d48:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d50:	698d      	ldr	r5, [r1, #24]
 8009d52:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d5a:	69cd      	ldr	r5, [r1, #28]
 8009d5c:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009d60:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009d62:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009d64:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009d66:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009d68:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	bc30      	pop	{r4, r5}
 8009d6e:	4770      	bx	lr
 8009d70:	40012c00 	.word	0x40012c00

08009d74 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009d74:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009d76:	6a03      	ldr	r3, [r0, #32]
 8009d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009d7e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009d80:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009d82:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009d84:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8009d88:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8009d8c:	680c      	ldr	r4, [r1, #0]
 8009d8e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009d92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d96:	690d      	ldr	r5, [r1, #16]
 8009d98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009da0:	684d      	ldr	r5, [r1, #4]
 8009da2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da6:	4d13      	ldr	r5, [pc, #76]	; (8009df4 <OC3Config+0x80>)
 8009da8:	42a8      	cmp	r0, r5
 8009daa:	d007      	beq.n	8009dbc <OC3Config+0x48>
 8009dac:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009db0:	42a8      	cmp	r0, r5
 8009db2:	d003      	beq.n	8009dbc <OC3Config+0x48>
 8009db4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009db8:	42a8      	cmp	r0, r5
 8009dba:	d113      	bne.n	8009de4 <OC3Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dc0:	694d      	ldr	r5, [r1, #20]
 8009dc2:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dca:	688d      	ldr	r5, [r1, #8]
 8009dcc:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dd4:	698d      	ldr	r5, [r1, #24]
 8009dd6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dde:	69cd      	ldr	r5, [r1, #28]
 8009de0:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009de4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009de6:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009de8:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009dea:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009dec:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009dee:	2000      	movs	r0, #0
 8009df0:	bc30      	pop	{r4, r5}
 8009df2:	4770      	bx	lr
 8009df4:	40012c00 	.word	0x40012c00

08009df8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009df8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009dfa:	6a03      	ldr	r3, [r0, #32]
 8009dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009e02:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009e04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009e06:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009e08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009e0c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009e10:	680d      	ldr	r5, [r1, #0]
 8009e12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e1a:	690d      	ldr	r5, [r1, #16]
 8009e1c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e24:	684d      	ldr	r5, [r1, #4]
 8009e26:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2a:	4d0c      	ldr	r5, [pc, #48]	; (8009e5c <OC4Config+0x64>)
 8009e2c:	42a8      	cmp	r0, r5
 8009e2e:	d007      	beq.n	8009e40 <OC4Config+0x48>
 8009e30:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009e34:	42a8      	cmp	r0, r5
 8009e36:	d003      	beq.n	8009e40 <OC4Config+0x48>
 8009e38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e3c:	42a8      	cmp	r0, r5
 8009e3e:	d104      	bne.n	8009e4a <OC4Config+0x52>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009e40:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8009e44:	698d      	ldr	r5, [r1, #24]
 8009e46:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009e4a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009e4c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009e4e:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009e50:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009e52:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009e54:	2000      	movs	r0, #0
 8009e56:	bc30      	pop	{r4, r5}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40012c00 	.word	0x40012c00

08009e60 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009e60:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8009e62:	6a03      	ldr	r3, [r0, #32]
 8009e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009e6a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009e6c:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8009e6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e76:	680c      	ldr	r4, [r1, #0]
 8009e78:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8009e7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e7e:	690c      	ldr	r4, [r1, #16]
 8009e80:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8009e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e88:	684c      	ldr	r4, [r1, #4]
 8009e8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8e:	4c0d      	ldr	r4, [pc, #52]	; (8009ec4 <OC5Config+0x64>)
 8009e90:	42a0      	cmp	r0, r4
 8009e92:	d007      	beq.n	8009ea4 <OC5Config+0x44>
 8009e94:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009e98:	42a0      	cmp	r0, r4
 8009e9a:	d003      	beq.n	8009ea4 <OC5Config+0x44>
 8009e9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	d107      	bne.n	8009eb4 <OC5Config+0x54>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8009ea4:	6844      	ldr	r4, [r0, #4]
 8009ea6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8009eaa:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8009eae:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 8009eb2:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009eb4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8009eb6:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8009eb8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009eba:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009ebc:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	bc10      	pop	{r4}
 8009ec2:	4770      	bx	lr
 8009ec4:	40012c00 	.word	0x40012c00

08009ec8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009ec8:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8009eca:	6a03      	ldr	r3, [r0, #32]
 8009ecc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ed0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009ed2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009ed4:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8009ed6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009eda:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009ede:	680c      	ldr	r4, [r1, #0]
 8009ee0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8009ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ee8:	690c      	ldr	r4, [r1, #16]
 8009eea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8009eee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ef2:	684c      	ldr	r4, [r1, #4]
 8009ef4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ef8:	4c0c      	ldr	r4, [pc, #48]	; (8009f2c <OC6Config+0x64>)
 8009efa:	42a0      	cmp	r0, r4
 8009efc:	d007      	beq.n	8009f0e <OC6Config+0x46>
 8009efe:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009f02:	42a0      	cmp	r0, r4
 8009f04:	d003      	beq.n	8009f0e <OC6Config+0x46>
 8009f06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009f0a:	42a0      	cmp	r0, r4
 8009f0c:	d107      	bne.n	8009f1e <OC6Config+0x56>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8009f0e:	6844      	ldr	r4, [r0, #4]
 8009f10:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8009f14:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8009f18:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 8009f1c:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009f1e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8009f20:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8009f22:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009f24:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009f26:	2000      	movs	r0, #0
 8009f28:	bc10      	pop	{r4}
 8009f2a:	4770      	bx	lr
 8009f2c:	40012c00 	.word	0x40012c00

08009f30 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8009f30:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f32:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <LL_TIM_Init+0x7c>)
 8009f34:	4290      	cmp	r0, r2
 8009f36:	d006      	beq.n	8009f46 <LL_TIM_Init+0x16>
 8009f38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009f3c:	d003      	beq.n	8009f46 <LL_TIM_Init+0x16>
 8009f3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009f42:	4290      	cmp	r0, r2
 8009f44:	d103      	bne.n	8009f4e <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4a:	684a      	ldr	r2, [r1, #4]
 8009f4c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4e:	4a17      	ldr	r2, [pc, #92]	; (8009fac <LL_TIM_Init+0x7c>)
 8009f50:	4290      	cmp	r0, r2
 8009f52:	d00e      	beq.n	8009f72 <LL_TIM_Init+0x42>
 8009f54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009f58:	d00b      	beq.n	8009f72 <LL_TIM_Init+0x42>
 8009f5a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009f5e:	4290      	cmp	r0, r2
 8009f60:	d007      	beq.n	8009f72 <LL_TIM_Init+0x42>
 8009f62:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8009f66:	4290      	cmp	r0, r2
 8009f68:	d003      	beq.n	8009f72 <LL_TIM_Init+0x42>
 8009f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f6e:	4290      	cmp	r0, r2
 8009f70:	d103      	bne.n	8009f7a <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f76:	68ca      	ldr	r2, [r1, #12]
 8009f78:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009f7a:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009f7c:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009f7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8009f80:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8009f82:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f84:	4b09      	ldr	r3, [pc, #36]	; (8009fac <LL_TIM_Init+0x7c>)
 8009f86:	4298      	cmp	r0, r3
 8009f88:	d007      	beq.n	8009f9a <LL_TIM_Init+0x6a>
 8009f8a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8009f8e:	4298      	cmp	r0, r3
 8009f90:	d003      	beq.n	8009f9a <LL_TIM_Init+0x6a>
 8009f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f96:	4298      	cmp	r0, r3
 8009f98:	d101      	bne.n	8009f9e <LL_TIM_Init+0x6e>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009f9a:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009f9c:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009f9e:	6943      	ldr	r3, [r0, #20]
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	6143      	str	r3, [r0, #20]
}
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	40012c00 	.word	0x40012c00

08009fb0 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <UTILS_PLL_IsBusy+0x20>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009fb8:	d007      	beq.n	8009fca <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8009fba:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8009fbc:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <UTILS_PLL_IsBusy+0x20>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009fc4:	d000      	beq.n	8009fc8 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 8009fc6:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8009fc8:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8009fca:	2000      	movs	r0, #0
 8009fcc:	e7f6      	b.n	8009fbc <UTILS_PLL_IsBusy+0xc>
 8009fce:	bf00      	nop
 8009fd0:	40021000 	.word	0x40021000

08009fd4 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8009fd4:	4b01      	ldr	r3, [pc, #4]	; (8009fdc <LL_SetSystemCoreClock+0x8>)
 8009fd6:	6018      	str	r0, [r3, #0]
}
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	200000c0 	.word	0x200000c0

08009fe0 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8009fe0:	1e42      	subs	r2, r0, #1
 8009fe2:	4b29      	ldr	r3, [pc, #164]	; (800a088 <LL_SetFlashLatency+0xa8>)
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d84c      	bhi.n	800a082 <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8009fe8:	4b28      	ldr	r3, [pc, #160]	; (800a08c <LL_SetFlashLatency+0xac>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8009ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff4:	d011      	beq.n	800a01a <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8009ff6:	4b26      	ldr	r3, [pc, #152]	; (800a090 <LL_SetFlashLatency+0xb0>)
 8009ff8:	4298      	cmp	r0, r3
 8009ffa:	d829      	bhi.n	800a050 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8009ffc:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800a000:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800a004:	4298      	cmp	r0, r3
 800a006:	d832      	bhi.n	800a06e <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800a008:	4b22      	ldr	r3, [pc, #136]	; (800a094 <LL_SetFlashLatency+0xb4>)
 800a00a:	4298      	cmp	r0, r3
 800a00c:	d832      	bhi.n	800a074 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800a00e:	4b22      	ldr	r3, [pc, #136]	; (800a098 <LL_SetFlashLatency+0xb8>)
 800a010:	4298      	cmp	r0, r3
 800a012:	d832      	bhi.n	800a07a <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a014:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a016:	4608      	mov	r0, r1
 800a018:	e01c      	b.n	800a054 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800a01a:	4b20      	ldr	r3, [pc, #128]	; (800a09c <LL_SetFlashLatency+0xbc>)
 800a01c:	4298      	cmp	r0, r3
 800a01e:	d80b      	bhi.n	800a038 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800a020:	4b1f      	ldr	r3, [pc, #124]	; (800a0a0 <LL_SetFlashLatency+0xc0>)
 800a022:	4298      	cmp	r0, r3
 800a024:	d80b      	bhi.n	800a03e <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800a026:	4b1f      	ldr	r3, [pc, #124]	; (800a0a4 <LL_SetFlashLatency+0xc4>)
 800a028:	4298      	cmp	r0, r3
 800a02a:	d80b      	bhi.n	800a044 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800a02c:	4b1e      	ldr	r3, [pc, #120]	; (800a0a8 <LL_SetFlashLatency+0xc8>)
 800a02e:	4298      	cmp	r0, r3
 800a030:	d80b      	bhi.n	800a04a <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a032:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a034:	4608      	mov	r0, r1
 800a036:	e00d      	b.n	800a054 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800a038:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800a03a:	2000      	movs	r0, #0
 800a03c:	e00a      	b.n	800a054 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800a03e:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a040:	2000      	movs	r0, #0
 800a042:	e007      	b.n	800a054 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a044:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a046:	2000      	movs	r0, #0
 800a048:	e004      	b.n	800a054 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a04a:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a04c:	2000      	movs	r0, #0
 800a04e:	e001      	b.n	800a054 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a050:	2100      	movs	r1, #0
        status = ERROR;
 800a052:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a054:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <LL_SetFlashLatency+0xcc>)
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	f023 0307 	bic.w	r3, r3, #7
 800a05c:	430b      	orrs	r3, r1
 800a05e:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800a066:	4299      	cmp	r1, r3
 800a068:	d00a      	beq.n	800a080 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800a06a:	2001      	movs	r0, #1
}
 800a06c:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800a06e:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a070:	2000      	movs	r0, #0
 800a072:	e7ef      	b.n	800a054 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a074:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a076:	2000      	movs	r0, #0
 800a078:	e7ec      	b.n	800a054 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a07a:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a07c:	2000      	movs	r0, #0
 800a07e:	e7e9      	b.n	800a054 <LL_SetFlashLatency+0x74>
 800a080:	4770      	bx	lr
    status = ERROR;
 800a082:	2001      	movs	r0, #1
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	04c4b3ff 	.word	0x04c4b3ff
 800a08c:	40007000 	.word	0x40007000
 800a090:	018cba80 	.word	0x018cba80
 800a094:	00b71b00 	.word	0x00b71b00
 800a098:	005b8d80 	.word	0x005b8d80
 800a09c:	03d09000 	.word	0x03d09000
 800a0a0:	02dc6c00 	.word	0x02dc6c00
 800a0a4:	01e84800 	.word	0x01e84800
 800a0a8:	00f42400 	.word	0x00f42400
 800a0ac:	40022000 	.word	0x40022000

0800a0b0 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a0ba:	4a26      	ldr	r2, [pc, #152]	; (800a154 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800a0bc:	5cd3      	ldrb	r3, [r2, r3]
 800a0be:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800a0c2:	4b25      	ldr	r3, [pc, #148]	; (800a158 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	42ab      	cmp	r3, r5
 800a0c8:	d333      	bcc.n	800a132 <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800a0ca:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a0cc:	4b23      	ldr	r3, [pc, #140]	; (800a15c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a0d4:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800a0d6:	68da      	ldr	r2, [r3, #12]
 800a0d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a0dc:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800a0de:	4b1f      	ldr	r3, [pc, #124]	; (800a15c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a0e6:	d0fa      	beq.n	800a0de <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800a0e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a0ec:	6899      	ldr	r1, [r3, #8]
 800a0ee:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	f042 0203 	orr.w	r2, r2, #3
 800a0fc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a0fe:	4b17      	ldr	r3, [pc, #92]	; (800a15c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a106:	2b0c      	cmp	r3, #12
 800a108:	d1f9      	bne.n	800a0fe <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800a10a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a10c:	4b13      	ldr	r3, [pc, #76]	; (800a15c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a10e:	6899      	ldr	r1, [r3, #8]
 800a110:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800a114:	430a      	orrs	r2, r1
 800a116:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800a118:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a11a:	6899      	ldr	r1, [r3, #8]
 800a11c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800a120:	430a      	orrs	r2, r1
 800a122:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800a124:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	42ab      	cmp	r3, r5
 800a12a:	d809      	bhi.n	800a140 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800a12c:	b16e      	cbz	r6, 800a14a <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800a12e:	4630      	mov	r0, r6
 800a130:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800a132:	4628      	mov	r0, r5
 800a134:	f7ff ff54 	bl	8009fe0 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800a138:	4606      	mov	r6, r0
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d1f2      	bne.n	800a124 <UTILS_EnablePLLAndSwitchSystem+0x74>
 800a13e:	e7c5      	b.n	800a0cc <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff ff4d 	bl	8009fe0 <LL_SetFlashLatency>
 800a146:	4606      	mov	r6, r0
 800a148:	e7f0      	b.n	800a12c <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff ff42 	bl	8009fd4 <LL_SetSystemCoreClock>
 800a150:	e7ed      	b.n	800a12e <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800a152:	bf00      	nop
 800a154:	08011ed0 	.word	0x08011ed0
 800a158:	200000c0 	.word	0x200000c0
 800a15c:	40021000 	.word	0x40021000

0800a160 <LL_PLL_ConfigSystemClock_HSI>:
{
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800a166:	f7ff ff23 	bl	8009fb0 <UTILS_PLL_IsBusy>
 800a16a:	bb20      	cbnz	r0, 800a1b6 <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800a16c:	4621      	mov	r1, r4
 800a16e:	4813      	ldr	r0, [pc, #76]	; (800a1bc <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800a170:	f005 fadc 	bl	800f72c <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a174:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a17c:	d109      	bne.n	800a192 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a17e:	4a10      	ldr	r2, [pc, #64]	; (800a1c0 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a186:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a188:	4b0d      	ldr	r3, [pc, #52]	; (800a1c0 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a190:	d0fa      	beq.n	800a188 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	6866      	ldr	r6, [r4, #4]
 800a196:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800a198:	4c09      	ldr	r4, [pc, #36]	; (800a1c0 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a19a:	68e7      	ldr	r7, [r4, #12]
 800a19c:	4b09      	ldr	r3, [pc, #36]	; (800a1c4 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800a19e:	403b      	ands	r3, r7
 800a1a0:	f042 0202 	orr.w	r2, r2, #2
 800a1a4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7ff ff7e 	bl	800a0b0 <UTILS_EnablePLLAndSwitchSystem>
}
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	e7fc      	b.n	800a1b4 <LL_PLL_ConfigSystemClock_HSI+0x54>
 800a1ba:	bf00      	nop
 800a1bc:	00f42400 	.word	0x00f42400
 800a1c0:	40021000 	.word	0x40021000
 800a1c4:	f9ff808c 	.word	0xf9ff808c

0800a1c8 <ws2812_strip_update_channels>:
                                        size_t num_channels) {
 800a1c8:	b500      	push	{lr}
 800a1ca:	b091      	sub	sp, #68	; 0x44
    LOG_ERR("update_channels not implemented");
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a1d2:	4b12      	ldr	r3, [pc, #72]	; (800a21c <ws2812_strip_update_channels+0x54>)
 800a1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	2102      	movs	r1, #2
 800a1dc:	f88d 1004 	strb.w	r1, [sp, #4]
 800a1e0:	9901      	ldr	r1, [sp, #4]
 800a1e2:	910d      	str	r1, [sp, #52]	; 0x34
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f363 0100 	bfi	r1, r3, #0, #1
 800a1ea:	f363 0141 	bfi	r1, r3, #1, #1
 800a1ee:	f363 0182 	bfi	r1, r3, #2, #1
 800a1f2:	f363 01c5 	bfi	r1, r3, #3, #3
 800a1f6:	f362 1188 	bfi	r1, r2, #6, #3
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	f362 2152 	bfi	r1, r2, #9, #10
 800a200:	f363 41de 	bfi	r1, r3, #19, #12
 800a204:	f363 71df 	bfi	r1, r3, #31, #1
 800a208:	aa0d      	add	r2, sp, #52	; 0x34
 800a20a:	4805      	ldr	r0, [pc, #20]	; (800a220 <ws2812_strip_update_channels+0x58>)
 800a20c:	f004 f93b 	bl	800e486 <z_impl_z_log_msg2_static_create>
}
 800a210:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800a214:	b011      	add	sp, #68	; 0x44
 800a216:	f85d fb04 	ldr.w	pc, [sp], #4
 800a21a:	bf00      	nop
 800a21c:	08011ee0 	.word	0x08011ee0
 800a220:	08010bd0 	.word	0x08010bd0

0800a224 <ws2812_pwm_write>:
static int ws2812_pwm_write(const struct device *dev) {
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	b09b      	sub	sp, #108	; 0x6c
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800a22a:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 800a22c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
    TIM_TypeDef *tim = pwm_cfg->timer;
 800a234:	681d      	ldr	r5, [r3, #0]
    uint8_t *buf = cfg->px_buf;
 800a236:	f8d4 9010 	ldr.w	r9, [r4, #16]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4a6c      	ldr	r2, [pc, #432]	; (800a3f0 <ws2812_pwm_write+0x1cc>)
 800a240:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
    LL_TIM_OC_StructInit(&oc_init);
 800a244:	a80c      	add	r0, sp, #48	; 0x30
 800a246:	f005 fa3d 	bl	800f6c4 <LL_TIM_OC_StructInit>
    oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800a24a:	2360      	movs	r3, #96	; 0x60
 800a24c:	930c      	str	r3, [sp, #48]	; 0x30
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800a24e:	2301      	movs	r3, #1
 800a250:	930d      	str	r3, [sp, #52]	; 0x34
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 800a252:	7b20      	ldrb	r0, [r4, #12]
 800a254:	f005 fac3 	bl	800f7de <get_polarity>
 800a258:	9010      	str	r0, [sp, #64]	; 0x40
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 800a25a:	aa0c      	add	r2, sp, #48	; 0x30
 800a25c:	4659      	mov	r1, fp
 800a25e:	4628      	mov	r0, r5
 800a260:	f005 fa3a 	bl	800f6d8 <LL_TIM_OC_Init>
 800a264:	bb38      	cbnz	r0, 800a2b6 <ws2812_pwm_write+0x92>
 800a266:	4603      	mov	r3, r0
	__asm__ volatile(
 800a268:	f04f 0210 	mov.w	r2, #16
 800a26c:	f3ef 8111 	mrs	r1, BASEPRI
 800a270:	f382 8812 	msr	BASEPRI_MAX, r2
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	9101      	str	r1, [sp, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800a27a:	682a      	ldr	r2, [r5, #0]
 800a27c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a280:	602a      	str	r2, [r5, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a282:	f1bb 0f01 	cmp.w	fp, #1
 800a286:	d03e      	beq.n	800a306 <ws2812_pwm_write+0xe2>
 800a288:	f1bb 0f04 	cmp.w	fp, #4
 800a28c:	d03a      	beq.n	800a304 <ws2812_pwm_write+0xe0>
 800a28e:	f1bb 0f10 	cmp.w	fp, #16
 800a292:	d05a      	beq.n	800a34a <ws2812_pwm_write+0x126>
 800a294:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800a298:	d059      	beq.n	800a34e <ws2812_pwm_write+0x12a>
 800a29a:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
 800a29e:	d058      	beq.n	800a352 <ws2812_pwm_write+0x12e>
 800a2a0:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 800a2a4:	d057      	beq.n	800a356 <ws2812_pwm_write+0x132>
 800a2a6:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
 800a2aa:	d056      	beq.n	800a35a <ws2812_pwm_write+0x136>
 800a2ac:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800a2b0:	d026      	beq.n	800a300 <ws2812_pwm_write+0xdc>
 800a2b2:	2308      	movs	r3, #8
 800a2b4:	e027      	b.n	800a306 <ws2812_pwm_write+0xe2>
        LOG_ERR("Could not initialize timer channel output");
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8ad 2010 	strh.w	r2, [sp, #16]
 800a2bc:	4b4d      	ldr	r3, [pc, #308]	; (800a3f4 <ws2812_pwm_write+0x1d0>)
 800a2be:	9318      	str	r3, [sp, #96]	; 0x60
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9303      	str	r3, [sp, #12]
 800a2c4:	2102      	movs	r1, #2
 800a2c6:	f88d 100c 	strb.w	r1, [sp, #12]
 800a2ca:	9903      	ldr	r1, [sp, #12]
 800a2cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f363 0100 	bfi	r1, r3, #0, #1
 800a2d4:	f363 0141 	bfi	r1, r3, #1, #1
 800a2d8:	f363 0182 	bfi	r1, r3, #2, #1
 800a2dc:	f363 01c5 	bfi	r1, r3, #3, #3
 800a2e0:	f362 1188 	bfi	r1, r2, #6, #3
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	f362 2152 	bfi	r1, r2, #9, #10
 800a2ea:	f363 41de 	bfi	r1, r3, #19, #12
 800a2ee:	f363 71df 	bfi	r1, r3, #31, #1
 800a2f2:	aa17      	add	r2, sp, #92	; 0x5c
 800a2f4:	4840      	ldr	r0, [pc, #256]	; (800a3f8 <ws2812_pwm_write+0x1d4>)
 800a2f6:	f004 f8c6 	bl	800e486 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800a2fa:	f06f 0004 	mvn.w	r0, #4
 800a2fe:	e073      	b.n	800a3e8 <ws2812_pwm_write+0x1c4>
 800a300:	2307      	movs	r3, #7
 800a302:	e000      	b.n	800a306 <ws2812_pwm_write+0xe2>
 800a304:	2301      	movs	r3, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a306:	f105 0218 	add.w	r2, r5, #24
 800a30a:	493c      	ldr	r1, [pc, #240]	; (800a3fc <ws2812_pwm_write+0x1d8>)
 800a30c:	5cc8      	ldrb	r0, [r1, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a30e:	5811      	ldr	r1, [r2, r0]
 800a310:	4e3b      	ldr	r6, [pc, #236]	; (800a400 <ws2812_pwm_write+0x1dc>)
 800a312:	5cf6      	ldrb	r6, [r6, r3]
 800a314:	2308      	movs	r3, #8
 800a316:	40b3      	lsls	r3, r6
 800a318:	430b      	orrs	r3, r1
 800a31a:	5013      	str	r3, [r2, r0]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 800a31c:	f8d8 3000 	ldr.w	r3, [r8]
 800a320:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800a322:	62eb      	str	r3, [r5, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a324:	696b      	ldr	r3, [r5, #20]
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	616b      	str	r3, [r5, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 800a32c:	6862      	ldr	r2, [r4, #4]
 800a32e:	4b35      	ldr	r3, [pc, #212]	; (800a404 <ws2812_pwm_write+0x1e0>)
 800a330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a334:	4628      	mov	r0, r5
 800a336:	4798      	blx	r3
    clear_timer_flag[cfg->pwm.channel](tim);
 800a338:	6862      	ldr	r2, [r4, #4]
 800a33a:	4b33      	ldr	r3, [pc, #204]	; (800a408 <ws2812_pwm_write+0x1e4>)
 800a33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a340:	4628      	mov	r0, r5
 800a342:	4798      	blx	r3
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800a344:	f04f 0a00 	mov.w	sl, #0
 800a348:	e02d      	b.n	800a3a6 <ws2812_pwm_write+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a34a:	2302      	movs	r3, #2
 800a34c:	e7db      	b.n	800a306 <ws2812_pwm_write+0xe2>
 800a34e:	2303      	movs	r3, #3
 800a350:	e7d9      	b.n	800a306 <ws2812_pwm_write+0xe2>
 800a352:	2304      	movs	r3, #4
 800a354:	e7d7      	b.n	800a306 <ws2812_pwm_write+0xe2>
 800a356:	2305      	movs	r3, #5
 800a358:	e7d5      	b.n	800a306 <ws2812_pwm_write+0xe2>
 800a35a:	2306      	movs	r3, #6
 800a35c:	e7d3      	b.n	800a306 <ws2812_pwm_write+0xe2>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800a35e:	f8d8 1008 	ldr.w	r1, [r8, #8]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	3b01      	subs	r3, #1
 800a366:	4a29      	ldr	r2, [pc, #164]	; (800a40c <ws2812_pwm_write+0x1e8>)
 800a368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a36c:	4628      	mov	r0, r5
 800a36e:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800a370:	6862      	ldr	r2, [r4, #4]
 800a372:	4b27      	ldr	r3, [pc, #156]	; (800a410 <ws2812_pwm_write+0x1ec>)
 800a374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a378:	4628      	mov	r0, r5
 800a37a:	4798      	blx	r3
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d0f7      	beq.n	800a370 <ws2812_pwm_write+0x14c>
            clear_timer_flag[cfg->pwm.channel](tim);
 800a380:	6862      	ldr	r2, [r4, #4]
 800a382:	4b21      	ldr	r3, [pc, #132]	; (800a408 <ws2812_pwm_write+0x1e4>)
 800a384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a388:	4628      	mov	r0, r5
 800a38a:	4798      	blx	r3
            tmp <<= 1;
 800a38c:	0076      	lsls	r6, r6, #1
 800a38e:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 800a390:	3701      	adds	r7, #1
 800a392:	2f07      	cmp	r7, #7
 800a394:	dc05      	bgt.n	800a3a2 <ws2812_pwm_write+0x17e>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800a396:	f016 0f80 	tst.w	r6, #128	; 0x80
 800a39a:	d1e0      	bne.n	800a35e <ws2812_pwm_write+0x13a>
 800a39c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3a0:	e7df      	b.n	800a362 <ws2812_pwm_write+0x13e>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800a3a2:	f10a 0a01 	add.w	sl, sl, #1
 800a3a6:	6963      	ldr	r3, [r4, #20]
 800a3a8:	459a      	cmp	sl, r3
 800a3aa:	d203      	bcs.n	800a3b4 <ws2812_pwm_write+0x190>
        uint8_t tmp = *buf++;
 800a3ac:	f819 6b01 	ldrb.w	r6, [r9], #1
        for(int j = 0; j < 8; j++) {
 800a3b0:	2700      	movs	r7, #0
 800a3b2:	e7ee      	b.n	800a392 <ws2812_pwm_write+0x16e>
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 800a3b4:	6863      	ldr	r3, [r4, #4]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	4a14      	ldr	r2, [pc, #80]	; (800a40c <ws2812_pwm_write+0x1e8>)
 800a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	4798      	blx	r3
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800a3c4:	6862      	ldr	r2, [r4, #4]
 800a3c6:	4b12      	ldr	r3, [pc, #72]	; (800a410 <ws2812_pwm_write+0x1ec>)
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	4798      	blx	r3
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d0f7      	beq.n	800a3c4 <ws2812_pwm_write+0x1a0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a3d4:	6a2b      	ldr	r3, [r5, #32]
 800a3d6:	ea23 030b 	bic.w	r3, r3, fp
 800a3da:	622b      	str	r3, [r5, #32]
	__asm__ volatile(
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
    return 0;
 800a3e6:	2000      	movs	r0, #0
}
 800a3e8:	b01b      	add	sp, #108	; 0x6c
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	bf00      	nop
 800a3f0:	08011f94 	.word	0x08011f94
 800a3f4:	08011824 	.word	0x08011824
 800a3f8:	08010bd0 	.word	0x08010bd0
 800a3fc:	08011f7c 	.word	0x08011f7c
 800a400:	08011f88 	.word	0x08011f88
 800a404:	08011fc4 	.word	0x08011fc4
 800a408:	08011fac 	.word	0x08011fac
 800a40c:	08011ff4 	.word	0x08011ff4
 800a410:	08011fdc 	.word	0x08011fdc

0800a414 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800a416:	6844      	ldr	r4, [r0, #4]
    uint8_t *px_buf = cfg->px_buf;
 800a418:	6925      	ldr	r5, [r4, #16]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 800a41a:	7e23      	ldrb	r3, [r4, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800a41c:	2600      	movs	r6, #0
 800a41e:	fba2 3703 	umull	r3, r7, r2, r3
 800a422:	b92f      	cbnz	r7, 800a430 <ws2812_strip_update_rgb+0x1c>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800a424:	b936      	cbnz	r6, 800a434 <ws2812_strip_update_rgb+0x20>
 800a426:	6966      	ldr	r6, [r4, #20]
 800a428:	42b3      	cmp	r3, r6
 800a42a:	d90b      	bls.n	800a444 <ws2812_strip_update_rgb+0x30>
 800a42c:	2300      	movs	r3, #0
 800a42e:	e002      	b.n	800a436 <ws2812_strip_update_rgb+0x22>
 800a430:	2601      	movs	r6, #1
 800a432:	e7f7      	b.n	800a424 <ws2812_strip_update_rgb+0x10>
 800a434:	2300      	movs	r3, #0
    if (!num_pixels_ok(cfg, num_pixels)) {
 800a436:	b13b      	cbz	r3, 800a448 <ws2812_strip_update_rgb+0x34>
    for (i = 0; i < num_pixels; i++) {
 800a438:	f04f 0e00 	mov.w	lr, #0
 800a43c:	4596      	cmp	lr, r2
 800a43e:	d22e      	bcs.n	800a49e <ws2812_strip_update_rgb+0x8a>
        for (j = 0; j < cfg->num_colors; j++) {
 800a440:	2300      	movs	r3, #0
 800a442:	e009      	b.n	800a458 <ws2812_strip_update_rgb+0x44>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800a444:	2301      	movs	r3, #1
 800a446:	e7f6      	b.n	800a436 <ws2812_strip_update_rgb+0x22>
        return -ENOMEM;
 800a448:	f06f 050b 	mvn.w	r5, #11
 800a44c:	e02d      	b.n	800a4aa <ws2812_strip_update_rgb+0x96>
                    *px_buf = 0;
 800a44e:	2600      	movs	r6, #0
 800a450:	702e      	strb	r6, [r5, #0]
            px_buf++;
 800a452:	3501      	adds	r5, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800a454:	3301      	adds	r3, #1
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f894 c018 	ldrb.w	ip, [r4, #24]
 800a45c:	459c      	cmp	ip, r3
 800a45e:	d91a      	bls.n	800a496 <ws2812_strip_update_rgb+0x82>
            switch (cfg->color_mapping[j]) {
 800a460:	69e6      	ldr	r6, [r4, #28]
 800a462:	f816 c003 	ldrb.w	ip, [r6, r3]
 800a466:	f1bc 0f03 	cmp.w	ip, #3
 800a46a:	d820      	bhi.n	800a4ae <ws2812_strip_update_rgb+0x9a>
 800a46c:	a601      	add	r6, pc, #4	; (adr r6, 800a474 <ws2812_strip_update_rgb+0x60>)
 800a46e:	f856 f02c 	ldr.w	pc, [r6, ip, lsl #2]
 800a472:	bf00      	nop
 800a474:	0800a44f 	.word	0x0800a44f
 800a478:	0800a485 	.word	0x0800a485
 800a47c:	0800a48b 	.word	0x0800a48b
 800a480:	0800a491 	.word	0x0800a491
                    *px_buf = pixels->r;
 800a484:	784e      	ldrb	r6, [r1, #1]
 800a486:	702e      	strb	r6, [r5, #0]
                    break;
 800a488:	e7e3      	b.n	800a452 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->g;
 800a48a:	788e      	ldrb	r6, [r1, #2]
 800a48c:	702e      	strb	r6, [r5, #0]
                    break;
 800a48e:	e7e0      	b.n	800a452 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->b;
 800a490:	78ce      	ldrb	r6, [r1, #3]
 800a492:	702e      	strb	r6, [r5, #0]
                    break;
 800a494:	e7dd      	b.n	800a452 <ws2812_strip_update_rgb+0x3e>
        pixels++;
 800a496:	3104      	adds	r1, #4
    for (i = 0; i < num_pixels; i++) {
 800a498:	f10e 0e01 	add.w	lr, lr, #1
 800a49c:	e7ce      	b.n	800a43c <ws2812_strip_update_rgb+0x28>
    rc = ws2812_pwm_write(dev);
 800a49e:	f7ff fec1 	bl	800a224 <ws2812_pwm_write>
 800a4a2:	4605      	mov	r5, r0
    ws2812_reset_delay(cfg->reset_delay);
 800a4a4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	return z_impl_k_usleep(us);
 800a4a6:	f005 fc12 	bl	800fcce <z_impl_k_usleep>
}
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (cfg->color_mapping[j]) {
 800a4ae:	f06f 0515 	mvn.w	r5, #21
 800a4b2:	e7fa      	b.n	800a4aa <ws2812_strip_update_rgb+0x96>

0800a4b4 <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
 800a4b4:	b430      	push	{r4, r5}
    if (!hsv->v)
 800a4b6:	78c4      	ldrb	r4, [r0, #3]
 800a4b8:	b92c      	cbnz	r4, 800a4c6 <led_hsv2rgb+0x12>
    {
        rgb->r = rgb->g = rgb->b = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	70cb      	strb	r3, [r1, #3]
 800a4be:	708b      	strb	r3, [r1, #2]
 800a4c0:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 800a4c2:	bc30      	pop	{r4, r5}
 800a4c4:	4770      	bx	lr
    else if (!hsv->s)
 800a4c6:	7883      	ldrb	r3, [r0, #2]
 800a4c8:	b91b      	cbnz	r3, 800a4d2 <led_hsv2rgb+0x1e>
        rgb->r = rgb->g = rgb->b = hsv->v;
 800a4ca:	70cc      	strb	r4, [r1, #3]
 800a4cc:	708c      	strb	r4, [r1, #2]
 800a4ce:	704c      	strb	r4, [r1, #1]
 800a4d0:	e7f7      	b.n	800a4c2 <led_hsv2rgb+0xe>
        int hue = hsv->h % 360;
 800a4d2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a4d6:	4831      	ldr	r0, [pc, #196]	; (800a59c <led_hsv2rgb+0xe8>)
 800a4d8:	fb80 5002 	smull	r5, r0, r0, r2
 800a4dc:	4410      	add	r0, r2
 800a4de:	17d5      	asrs	r5, r2, #31
 800a4e0:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 800a4e4:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800a4e8:	fb05 2210 	mls	r2, r5, r0, r2
 800a4ec:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 800a4ee:	2a00      	cmp	r2, #0
 800a4f0:	db2c      	blt.n	800a54c <led_hsv2rgb+0x98>
        int sector = hue / 60;
 800a4f2:	482b      	ldr	r0, [pc, #172]	; (800a5a0 <led_hsv2rgb+0xec>)
 800a4f4:	fb80 5002 	smull	r5, r0, r0, r2
 800a4f8:	4410      	add	r0, r2
 800a4fa:	17d5      	asrs	r5, r2, #31
 800a4fc:	ebc5 1060 	rsb	r0, r5, r0, asr #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800a500:	f010 0f01 	tst.w	r0, #1
 800a504:	d024      	beq.n	800a550 <led_hsv2rgb+0x9c>
 800a506:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 800a50a:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800a50e:	f1cc 0c3c 	rsb	ip, ip, #60	; 0x3c
        int low = (255 - hsv->s) * high / 255;
 800a512:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a516:	fb04 f303 	mul.w	r3, r4, r3
 800a51a:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <led_hsv2rgb+0xf0>)
 800a51c:	fb82 5203 	smull	r5, r2, r2, r3
 800a520:	441a      	add	r2, r3
 800a522:	17db      	asrs	r3, r3, #31
 800a524:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
        int middle = low + (high - low) * angle / 60;
 800a528:	1ae2      	subs	r2, r4, r3
 800a52a:	fb0c f202 	mul.w	r2, ip, r2
 800a52e:	4d1c      	ldr	r5, [pc, #112]	; (800a5a0 <led_hsv2rgb+0xec>)
 800a530:	fb85 5c02 	smull	r5, ip, r5, r2
 800a534:	4494      	add	ip, r2
 800a536:	17d2      	asrs	r2, r2, #31
 800a538:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 800a53c:	441a      	add	r2, r3
        switch (sector)
 800a53e:	2805      	cmp	r0, #5
 800a540:	d8bf      	bhi.n	800a4c2 <led_hsv2rgb+0xe>
 800a542:	e8df f000 	tbb	[pc, r0]
 800a546:	1713      	.short	0x1713
 800a548:	27231f1b 	.word	0x27231f1b
        hue = hue < 0 ? 360 + hue : hue;
 800a54c:	442a      	add	r2, r5
 800a54e:	e7d0      	b.n	800a4f2 <led_hsv2rgb+0x3e>
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800a550:	4d13      	ldr	r5, [pc, #76]	; (800a5a0 <led_hsv2rgb+0xec>)
 800a552:	fb85 5c02 	smull	r5, ip, r5, r2
 800a556:	eb0c 0502 	add.w	r5, ip, r2
 800a55a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a55e:	ebcc 1c65 	rsb	ip, ip, r5, asr #5
 800a562:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a566:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800a56a:	e7d2      	b.n	800a512 <led_hsv2rgb+0x5e>
                rgb->r = high;
 800a56c:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 800a56e:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 800a570:	70cb      	strb	r3, [r1, #3]
                break;
 800a572:	e7a6      	b.n	800a4c2 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800a574:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 800a576:	708c      	strb	r4, [r1, #2]
                rgb->b = low;
 800a578:	70cb      	strb	r3, [r1, #3]
                break;
 800a57a:	e7a2      	b.n	800a4c2 <led_hsv2rgb+0xe>
                rgb->r = low;
 800a57c:	704b      	strb	r3, [r1, #1]
                rgb->g = high;
 800a57e:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 800a580:	70ca      	strb	r2, [r1, #3]
                break;
 800a582:	e79e      	b.n	800a4c2 <led_hsv2rgb+0xe>
                rgb->r = low;
 800a584:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 800a586:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 800a588:	70cc      	strb	r4, [r1, #3]
                break;
 800a58a:	e79a      	b.n	800a4c2 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800a58c:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 800a58e:	708b      	strb	r3, [r1, #2]
                rgb->b = high;
 800a590:	70cc      	strb	r4, [r1, #3]
                break;
 800a592:	e796      	b.n	800a4c2 <led_hsv2rgb+0xe>
                rgb->r = high;
 800a594:	704c      	strb	r4, [r1, #1]
                rgb->g = low;
 800a596:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 800a598:	70ca      	strb	r2, [r1, #3]
}
 800a59a:	e792      	b.n	800a4c2 <led_hsv2rgb+0xe>
 800a59c:	b60b60b7 	.word	0xb60b60b7
 800a5a0:	88888889 	.word	0x88888889
 800a5a4:	80808081 	.word	0x80808081

0800a5a8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800a5a8:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800a5aa:	e000      	b.n	800a5ae <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800a5ac:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800a5ae:	4a03      	ldr	r2, [pc, #12]	; (800a5bc <z_device_state_init+0x14>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d3fb      	bcc.n	800a5ac <z_device_state_init+0x4>
	}
}
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	08010780 	.word	0x08010780
 800a5bc:	080108b8 	.word	0x080108b8

0800a5c0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800a5c4:	4b11      	ldr	r3, [pc, #68]	; (800a60c <z_sys_init_run_level+0x4c>)
 800a5c6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800a5ca:	e009      	b.n	800a5e0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800a5cc:	4240      	negs	r0, r0
 800a5ce:	e017      	b.n	800a600 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800a5d0:	68eb      	ldr	r3, [r5, #12]
 800a5d2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800a5d4:	68ea      	ldr	r2, [r5, #12]
 800a5d6:	7853      	ldrb	r3, [r2, #1]
 800a5d8:	f043 0301 	orr.w	r3, r3, #1
 800a5dc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800a5de:	3408      	adds	r4, #8
 800a5e0:	1c73      	adds	r3, r6, #1
 800a5e2:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <z_sys_init_run_level+0x4c>)
 800a5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	d90d      	bls.n	800a608 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800a5ec:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	4798      	blx	r3
		if (dev != NULL) {
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	d0f2      	beq.n	800a5de <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0eb      	beq.n	800a5d4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	dbe5      	blt.n	800a5cc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800a600:	28ff      	cmp	r0, #255	; 0xff
 800a602:	dde5      	ble.n	800a5d0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800a604:	20ff      	movs	r0, #255	; 0xff
 800a606:	e7e3      	b.n	800a5d0 <z_sys_init_run_level+0x10>
		}
	}
}
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	bf00      	nop
 800a60c:	08012040 	.word	0x08012040

0800a610 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800a610:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800a612:	4605      	mov	r5, r0
 800a614:	b328      	cbz	r0, 800a662 <z_impl_device_get_binding+0x52>
 800a616:	7803      	ldrb	r3, [r0, #0]
 800a618:	b32b      	cbz	r3, 800a666 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800a61a:	4c14      	ldr	r4, [pc, #80]	; (800a66c <z_impl_device_get_binding+0x5c>)
 800a61c:	e000      	b.n	800a620 <z_impl_device_get_binding+0x10>
 800a61e:	3418      	adds	r4, #24
 800a620:	4b13      	ldr	r3, [pc, #76]	; (800a670 <z_impl_device_get_binding+0x60>)
 800a622:	429c      	cmp	r4, r3
 800a624:	d008      	beq.n	800a638 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800a626:	4620      	mov	r0, r4
 800a628:	f005 f8ed 	bl	800f806 <z_device_is_ready>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0f6      	beq.n	800a61e <z_impl_device_get_binding+0xe>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	42ab      	cmp	r3, r5
 800a634:	d1f3      	bne.n	800a61e <z_impl_device_get_binding+0xe>
 800a636:	e012      	b.n	800a65e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800a638:	4c0c      	ldr	r4, [pc, #48]	; (800a66c <z_impl_device_get_binding+0x5c>)
 800a63a:	e000      	b.n	800a63e <z_impl_device_get_binding+0x2e>
 800a63c:	3418      	adds	r4, #24
 800a63e:	4b0c      	ldr	r3, [pc, #48]	; (800a670 <z_impl_device_get_binding+0x60>)
 800a640:	429c      	cmp	r4, r3
 800a642:	d00b      	beq.n	800a65c <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800a644:	4620      	mov	r0, r4
 800a646:	f005 f8de 	bl	800f806 <z_device_is_ready>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d0f6      	beq.n	800a63c <z_impl_device_get_binding+0x2c>
 800a64e:	6821      	ldr	r1, [r4, #0]
 800a650:	4628      	mov	r0, r5
 800a652:	f7f6 fbf6 	bl	8000e42 <strcmp>
 800a656:	2800      	cmp	r0, #0
 800a658:	d1f0      	bne.n	800a63c <z_impl_device_get_binding+0x2c>
 800a65a:	e000      	b.n	800a65e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800a65c:	2400      	movs	r4, #0
}
 800a65e:	4620      	mov	r0, r4
 800a660:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800a662:	4604      	mov	r4, r0
 800a664:	e7fb      	b.n	800a65e <z_impl_device_get_binding+0x4e>
 800a666:	2400      	movs	r4, #0
 800a668:	e7f9      	b.n	800a65e <z_impl_device_get_binding+0x4e>
 800a66a:	bf00      	nop
 800a66c:	08010780 	.word	0x08010780
 800a670:	080108b8 	.word	0x080108b8

0800a674 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800a674:	2804      	cmp	r0, #4
 800a676:	d80c      	bhi.n	800a692 <reason_to_str+0x1e>
 800a678:	e8df f000 	tbb	[pc, r0]
 800a67c:	07050d03 	.word	0x07050d03
 800a680:	09          	.byte	0x09
 800a681:	00          	.byte	0x00
 800a682:	4806      	ldr	r0, [pc, #24]	; (800a69c <reason_to_str+0x28>)
 800a684:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800a686:	4806      	ldr	r0, [pc, #24]	; (800a6a0 <reason_to_str+0x2c>)
 800a688:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800a68a:	4806      	ldr	r0, [pc, #24]	; (800a6a4 <reason_to_str+0x30>)
 800a68c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800a68e:	4806      	ldr	r0, [pc, #24]	; (800a6a8 <reason_to_str+0x34>)
 800a690:	4770      	bx	lr
	default:
		return "Unknown error";
 800a692:	4806      	ldr	r0, [pc, #24]	; (800a6ac <reason_to_str+0x38>)
 800a694:	4770      	bx	lr
		return "Unhandled interrupt";
 800a696:	4806      	ldr	r0, [pc, #24]	; (800a6b0 <reason_to_str+0x3c>)
	}
}
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	080120a8 	.word	0x080120a8
 800a6a0:	0801207c 	.word	0x0801207c
 800a6a4:	0801208c 	.word	0x0801208c
 800a6a8:	08012098 	.word	0x08012098
 800a6ac:	08012058 	.word	0x08012058
 800a6b0:	08012068 	.word	0x08012068

0800a6b4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800a6b4:	b130      	cbz	r0, 800a6c4 <thread_name_get+0x10>
{
 800a6b6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800a6b8:	f005 f8f7 	bl	800f8aa <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800a6bc:	b120      	cbz	r0, 800a6c8 <thread_name_get+0x14>
 800a6be:	7803      	ldrb	r3, [r0, #0]
 800a6c0:	b123      	cbz	r3, 800a6cc <thread_name_get+0x18>
}
 800a6c2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800a6c4:	4802      	ldr	r0, [pc, #8]	; (800a6d0 <thread_name_get+0x1c>)
}
 800a6c6:	4770      	bx	lr
		thread_name = "unknown";
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <thread_name_get+0x1c>)
 800a6ca:	e7fa      	b.n	800a6c2 <thread_name_get+0xe>
 800a6cc:	4800      	ldr	r0, [pc, #0]	; (800a6d0 <thread_name_get+0x1c>)
	return thread_name;
 800a6ce:	e7f8      	b.n	800a6c2 <thread_name_get+0xe>
 800a6d0:	080120b8 	.word	0x080120b8

0800a6d4 <k_sys_fatal_error_handler>:
{
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	b090      	sub	sp, #64	; 0x40
 800a6d8:	4604      	mov	r4, r0
	z_impl_log_panic();
 800a6da:	f7fa f8c1 	bl	8004860 <z_impl_log_panic>
	LOG_ERR("Halting system");
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a6e4:	4b10      	ldr	r3, [pc, #64]	; (800a728 <k_sys_fatal_error_handler+0x54>)
 800a6e6:	930e      	str	r3, [sp, #56]	; 0x38
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	f88d 1004 	strb.w	r1, [sp, #4]
 800a6f2:	9901      	ldr	r1, [sp, #4]
 800a6f4:	910d      	str	r1, [sp, #52]	; 0x34
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	f363 0100 	bfi	r1, r3, #0, #1
 800a6fc:	f363 0141 	bfi	r1, r3, #1, #1
 800a700:	f363 0182 	bfi	r1, r3, #2, #1
 800a704:	f363 01c5 	bfi	r1, r3, #3, #3
 800a708:	f362 1188 	bfi	r1, r2, #6, #3
 800a70c:	2208      	movs	r2, #8
 800a70e:	f362 2152 	bfi	r1, r2, #9, #10
 800a712:	f363 41de 	bfi	r1, r3, #19, #12
 800a716:	f363 71df 	bfi	r1, r3, #31, #1
 800a71a:	aa0d      	add	r2, sp, #52	; 0x34
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <k_sys_fatal_error_handler+0x58>)
 800a71e:	f003 feb2 	bl	800e486 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800a722:	4620      	mov	r0, r4
 800a724:	f005 f889 	bl	800f83a <arch_system_halt>
 800a728:	080120c0 	.word	0x080120c0
 800a72c:	08010b90 	.word	0x08010b90

0800a730 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800a730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a732:	b097      	sub	sp, #92	; 0x5c
 800a734:	4605      	mov	r5, r0
 800a736:	460e      	mov	r6, r1
	__asm__ volatile(
 800a738:	f04f 0310 	mov.w	r3, #16
 800a73c:	f3ef 8711 	mrs	r7, BASEPRI
 800a740:	f383 8812 	msr	BASEPRI_MAX, r3
 800a744:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800a748:	f001 f8ba 	bl	800b8c0 <z_impl_z_current_get>
 800a74c:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800a74e:	4628      	mov	r0, r5
 800a750:	f7ff ff90 	bl	800a674 <reason_to_str>
 800a754:	2300      	movs	r3, #0
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	9003      	str	r0, [sp, #12]
 800a75a:	9502      	str	r5, [sp, #8]
 800a75c:	4a25      	ldr	r2, [pc, #148]	; (800a7f4 <z_fatal_error+0xc4>)
 800a75e:	9201      	str	r2, [sp, #4]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	2201      	movs	r2, #1
 800a764:	4924      	ldr	r1, [pc, #144]	; (800a7f8 <z_fatal_error+0xc8>)
 800a766:	4618      	mov	r0, r3
 800a768:	f005 f85a 	bl	800f820 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800a76c:	b11e      	cbz	r6, 800a776 <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800a76e:	69f3      	ldr	r3, [r6, #28]
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	b9d3      	cbnz	r3, 800a7ac <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff ff9c 	bl	800a6b4 <thread_name_get>
 800a77c:	9003      	str	r0, [sp, #12]
 800a77e:	9402      	str	r4, [sp, #8]
 800a780:	4b1e      	ldr	r3, [pc, #120]	; (800a7fc <z_fatal_error+0xcc>)
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	2000      	movs	r0, #0
 800a786:	9000      	str	r0, [sp, #0]
 800a788:	4603      	mov	r3, r0
 800a78a:	2201      	movs	r2, #1
 800a78c:	491a      	ldr	r1, [pc, #104]	; (800a7f8 <z_fatal_error+0xc8>)
 800a78e:	f005 f847 	bl	800f820 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800a792:	4631      	mov	r1, r6
 800a794:	4628      	mov	r0, r5
 800a796:	f7ff ff9d 	bl	800a6d4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800a79a:	f387 8811 	msr	BASEPRI, r7
 800a79e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7fb fb2e 	bl	8005e04 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800a7a8:	b017      	add	sp, #92	; 0x5c
 800a7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f8ad 2020 	strh.w	r2, [sp, #32]
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <z_fatal_error+0xd0>)
 800a7b4:	9314      	str	r3, [sp, #80]	; 0x50
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9307      	str	r3, [sp, #28]
 800a7ba:	2102      	movs	r1, #2
 800a7bc:	f88d 101c 	strb.w	r1, [sp, #28]
 800a7c0:	9907      	ldr	r1, [sp, #28]
 800a7c2:	9113      	str	r1, [sp, #76]	; 0x4c
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f363 0100 	bfi	r1, r3, #0, #1
 800a7ca:	f363 0141 	bfi	r1, r3, #1, #1
 800a7ce:	f363 0182 	bfi	r1, r3, #2, #1
 800a7d2:	f363 01c5 	bfi	r1, r3, #3, #3
 800a7d6:	f362 1188 	bfi	r1, r2, #6, #3
 800a7da:	2208      	movs	r2, #8
 800a7dc:	f362 2152 	bfi	r1, r2, #9, #10
 800a7e0:	f363 41de 	bfi	r1, r3, #19, #12
 800a7e4:	f363 71df 	bfi	r1, r3, #31, #1
 800a7e8:	aa13      	add	r2, sp, #76	; 0x4c
 800a7ea:	4803      	ldr	r0, [pc, #12]	; (800a7f8 <z_fatal_error+0xc8>)
 800a7ec:	f003 fe4b 	bl	800e486 <z_impl_z_log_msg2_static_create>
 800a7f0:	e7c1      	b.n	800a776 <z_fatal_error+0x46>
 800a7f2:	bf00      	nop
 800a7f4:	080120d0 	.word	0x080120d0
 800a7f8:	08010b90 	.word	0x08010b90
 800a7fc:	0801211c 	.word	0x0801211c
 800a800:	080120f8 	.word	0x080120f8

0800a804 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800a804:	b510      	push	{r4, lr}
 800a806:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800a808:	4c10      	ldr	r4, [pc, #64]	; (800a84c <init_idle_thread+0x48>)
 800a80a:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800a80e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a812:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <init_idle_thread+0x4c>)
 800a814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800a818:	2200      	movs	r2, #0
 800a81a:	9205      	str	r2, [sp, #20]
 800a81c:	2101      	movs	r1, #1
 800a81e:	9104      	str	r1, [sp, #16]
 800a820:	210f      	movs	r1, #15
 800a822:	9103      	str	r1, [sp, #12]
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <init_idle_thread+0x50>)
 800a82c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a830:	4909      	ldr	r1, [pc, #36]	; (800a858 <init_idle_thread+0x54>)
 800a832:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800a836:	fb0c 1100 	mla	r1, ip, r0, r1
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 f8ee 	bl	800aa1c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800a840:	7b63      	ldrb	r3, [r4, #13]
 800a842:	f023 0304 	bic.w	r3, r3, #4
 800a846:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800a848:	b006      	add	sp, #24
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	20000ac0 	.word	0x20000ac0
 800a850:	2000134c 	.word	0x2000134c
 800a854:	0800f911 	.word	0x0800f911
 800a858:	20002f40 	.word	0x20002f40

0800a85c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800a860:	f000 ff7a 	bl	800b758 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800a864:	4d1b      	ldr	r5, [pc, #108]	; (800a8d4 <prepare_multithreading+0x78>)
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <prepare_multithreading+0x7c>)
 800a868:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a86a:	4b1c      	ldr	r3, [pc, #112]	; (800a8dc <prepare_multithreading+0x80>)
 800a86c:	9305      	str	r3, [sp, #20]
 800a86e:	2301      	movs	r3, #1
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	2400      	movs	r4, #0
 800a874:	9403      	str	r4, [sp, #12]
 800a876:	9402      	str	r4, [sp, #8]
 800a878:	9401      	str	r4, [sp, #4]
 800a87a:	9400      	str	r4, [sp, #0]
 800a87c:	4b18      	ldr	r3, [pc, #96]	; (800a8e0 <prepare_multithreading+0x84>)
 800a87e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a882:	4918      	ldr	r1, [pc, #96]	; (800a8e4 <prepare_multithreading+0x88>)
 800a884:	4628      	mov	r0, r5
 800a886:	f000 f8c9 	bl	800aa1c <z_setup_new_thread>
 800a88a:	4606      	mov	r6, r0
 800a88c:	7b6b      	ldrb	r3, [r5, #13]
 800a88e:	f023 0304 	bic.w	r3, r3, #4
 800a892:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800a894:	4628      	mov	r0, r5
 800a896:	f005 f924 	bl	800fae2 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800a89a:	2c00      	cmp	r4, #0
 800a89c:	dd02      	ble.n	800a8a4 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800a89e:	4630      	mov	r0, r6
 800a8a0:	b006      	add	sp, #24
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f7ff ffad 	bl	800a804 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800a8aa:	4a0f      	ldr	r2, [pc, #60]	; (800a8e8 <prepare_multithreading+0x8c>)
 800a8ac:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800a8b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a8b4:	4b08      	ldr	r3, [pc, #32]	; (800a8d8 <prepare_multithreading+0x7c>)
 800a8b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a8ba:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800a8bc:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800a8be:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800a8c2:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <prepare_multithreading+0x90>)
 800a8c4:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800a8c8:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800a8cc:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800a8ce:	3401      	adds	r4, #1
 800a8d0:	e7e3      	b.n	800a89a <prepare_multithreading+0x3e>
 800a8d2:	bf00      	nop
 800a8d4:	20000b40 	.word	0x20000b40
 800a8d8:	2000134c 	.word	0x2000134c
 800a8dc:	08012134 	.word	0x08012134
 800a8e0:	0800a8f1 	.word	0x0800a8f1
 800a8e4:	20001f20 	.word	0x20001f20
 800a8e8:	20000ac0 	.word	0x20000ac0
 800a8ec:	200030a0 	.word	0x200030a0

0800a8f0 <bg_thread_main>:
{
 800a8f0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <bg_thread_main+0x30>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800a8f8:	2002      	movs	r0, #2
 800a8fa:	f7ff fe61 	bl	800a5c0 <z_sys_init_run_level>
	boot_banner();
 800a8fe:	f001 fd2b 	bl	800c358 <boot_banner>
	z_cpp_init_static();
 800a902:	f003 fe27 	bl	800e554 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800a906:	2003      	movs	r0, #3
 800a908:	f7ff fe5a 	bl	800a5c0 <z_sys_init_run_level>
	z_init_static_threads();
 800a90c:	f000 f8b6 	bl	800aa7c <z_init_static_threads>
	main();
 800a910:	f005 fb91 	bl	8010036 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800a914:	4a03      	ldr	r2, [pc, #12]	; (800a924 <bg_thread_main+0x34>)
 800a916:	7b13      	ldrb	r3, [r2, #12]
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800a91e:	bd08      	pop	{r3, pc}
 800a920:	200013ac 	.word	0x200013ac
 800a924:	20000b40 	.word	0x20000b40

0800a928 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800a928:	b508      	push	{r3, lr}
 800a92a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800a92c:	4a01      	ldr	r2, [pc, #4]	; (800a934 <switch_to_main_thread+0xc>)
 800a92e:	4802      	ldr	r0, [pc, #8]	; (800a938 <switch_to_main_thread+0x10>)
 800a930:	f7fa fc2a 	bl	8005188 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800a934:	0800a8f1 	.word	0x0800a8f1
 800a938:	20000b40 	.word	0x20000b40

0800a93c <z_bss_zero>:
{
 800a93c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800a93e:	4803      	ldr	r0, [pc, #12]	; (800a94c <z_bss_zero+0x10>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800a940:	4a03      	ldr	r2, [pc, #12]	; (800a950 <z_bss_zero+0x14>)
 800a942:	1a12      	subs	r2, r2, r0
 800a944:	2100      	movs	r1, #0
 800a946:	f005 fb8e 	bl	8010066 <memset>
}
 800a94a:	bd08      	pop	{r3, pc}
 800a94c:	200004c0 	.word	0x200004c0
 800a950:	200013b0 	.word	0x200013b0

0800a954 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800a954:	b500      	push	{lr}
 800a956:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800a958:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800a95a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800a95e:	4c1d      	ldr	r4, [pc, #116]	; (800a9d4 <z_cstart+0x80>)
 800a960:	6963      	ldr	r3, [r4, #20]
 800a962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a966:	6163      	str	r3, [r4, #20]
 800a968:	23f0      	movs	r3, #240	; 0xf0
 800a96a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800a96e:	2500      	movs	r5, #0
 800a970:	77e5      	strb	r5, [r4, #31]
 800a972:	7625      	strb	r5, [r4, #24]
 800a974:	7665      	strb	r5, [r4, #25]
 800a976:	76a5      	strb	r5, [r4, #26]
 800a978:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800a97c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a97e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a982:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800a984:	f7fb f9fc 	bl	8005d80 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800a988:	f7fa fa16 	bl	8004db8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a990:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800a992:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800a994:	f7fb fb40 	bl	8006018 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800a998:	f7fb fa4a 	bl	8005e30 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800a99c:	f7f9 fe7c 	bl	8004698 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800a9a0:	2401      	movs	r4, #1
 800a9a2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800a9a6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800a9aa:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800a9ac:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800a9ae:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800a9b0:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <z_cstart+0x84>)
 800a9b2:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800a9b6:	f7ff fdf7 	bl	800a5a8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7ff fe00 	bl	800a5c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff fdfd 	bl	800a5c0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800a9c6:	f7ff ff49 	bl	800a85c <prepare_multithreading>
 800a9ca:	f7ff ffad 	bl	800a928 <switch_to_main_thread>
 800a9ce:	bf00      	nop
 800a9d0:	200038c0 	.word	0x200038c0
 800a9d4:	e000ed00 	.word	0xe000ed00
 800a9d8:	2000134c 	.word	0x2000134c

0800a9dc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800a9dc:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800a9de:	4c06      	ldr	r4, [pc, #24]	; (800a9f8 <init_mem_slab_module+0x1c>)
	int rc = 0;
 800a9e0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800a9e2:	e000      	b.n	800a9e6 <init_mem_slab_module+0xa>
 800a9e4:	3420      	adds	r4, #32
 800a9e6:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <init_mem_slab_module+0x20>)
 800a9e8:	429c      	cmp	r4, r3
 800a9ea:	d204      	bcs.n	800a9f6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f004 ff2d 	bl	800f84c <create_free_list>
		if (rc < 0) {
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	daf6      	bge.n	800a9e4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800a9f6:	bd10      	pop	{r4, pc}
 800a9f8:	20000370 	.word	0x20000370
 800a9fc:	20000370 	.word	0x20000370

0800aa00 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800aa00:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800aa02:	ea53 0102 	orrs.w	r1, r3, r2
 800aa06:	d102      	bne.n	800aa0e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800aa08:	f004 ff51 	bl	800f8ae <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800aa0c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800aa0e:	4902      	ldr	r1, [pc, #8]	; (800aa18 <schedule_new_thread+0x18>)
 800aa10:	3018      	adds	r0, #24
 800aa12:	f001 f809 	bl	800ba28 <z_add_timeout>
 800aa16:	e7f9      	b.n	800aa0c <schedule_new_thread+0xc>
 800aa18:	0800fb1b 	.word	0x0800fb1b

0800aa1c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800aa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	4604      	mov	r4, r0
 800aa22:	460e      	mov	r6, r1
 800aa24:	4615      	mov	r5, r2
 800aa26:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800aa28:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800aa2c:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800aa2e:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800aa30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa32:	2204      	movs	r2, #4
 800aa34:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aa36:	f004 ff3e 	bl	800f8b6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f004 ff1b 	bl	800f87a <setup_thread_stack>
 800aa44:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800aa46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	463b      	mov	r3, r7
 800aa54:	4602      	mov	r2, r0
 800aa56:	4631      	mov	r1, r6
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f7fa fb4f 	bl	80050fc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <z_setup_new_thread+0x5c>)
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	b123      	cbz	r3, 800aa72 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800aa68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa6a:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	b005      	add	sp, #20
 800aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800aa72:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800aa74:	e7fa      	b.n	800aa6c <z_setup_new_thread+0x50>
 800aa76:	bf00      	nop
 800aa78:	2000134c 	.word	0x2000134c

0800aa7c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800aa80:	4c1d      	ldr	r4, [pc, #116]	; (800aaf8 <z_init_static_threads+0x7c>)
 800aa82:	e014      	b.n	800aaae <z_init_static_threads+0x32>
		z_setup_new_thread(
 800aa84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa86:	9305      	str	r3, [sp, #20]
 800aa88:	6a23      	ldr	r3, [r4, #32]
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	69e3      	ldr	r3, [r4, #28]
 800aa8e:	9303      	str	r3, [sp, #12]
 800aa90:	69a3      	ldr	r3, [r4, #24]
 800aa92:	9302      	str	r3, [sp, #8]
 800aa94:	6963      	ldr	r3, [r4, #20]
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	68e3      	ldr	r3, [r4, #12]
 800aa9e:	68a2      	ldr	r2, [r4, #8]
 800aaa0:	6861      	ldr	r1, [r4, #4]
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	f7ff ffba 	bl	800aa1c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800aaac:	3430      	adds	r4, #48	; 0x30
 800aaae:	4b13      	ldr	r3, [pc, #76]	; (800aafc <z_init_static_threads+0x80>)
 800aab0:	429c      	cmp	r4, r3
 800aab2:	d3e7      	bcc.n	800aa84 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800aab4:	f000 fbd4 	bl	800b260 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800aab8:	4c0f      	ldr	r4, [pc, #60]	; (800aaf8 <z_init_static_threads+0x7c>)
 800aaba:	e000      	b.n	800aabe <z_init_static_threads+0x42>
 800aabc:	3430      	adds	r4, #48	; 0x30
 800aabe:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <z_init_static_threads+0x80>)
 800aac0:	429c      	cmp	r4, r3
 800aac2:	d214      	bcs.n	800aaee <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800aac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaca:	d0f7      	beq.n	800aabc <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800aacc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aad0:	17d8      	asrs	r0, r3, #31
 800aad2:	0082      	lsls	r2, r0, #2
 800aad4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800aad8:	0099      	lsls	r1, r3, #2
 800aada:	18c9      	adds	r1, r1, r3
 800aadc:	eb40 0002 	adc.w	r0, r0, r2
 800aae0:	184a      	adds	r2, r1, r1
 800aae2:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	f7ff ff8a 	bl	800aa00 <schedule_new_thread>
 800aaec:	e7e6      	b.n	800aabc <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800aaee:	f000 fdc1 	bl	800b674 <k_sched_unlock>
}
 800aaf2:	b006      	add	sp, #24
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	bf00      	nop
 800aaf8:	200002d8 	.word	0x200002d8
 800aafc:	20000338 	.word	0x20000338

0800ab00 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	4604      	mov	r4, r0
 800ab08:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800ab0a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800ab0e:	f04f 0110 	mov.w	r1, #16
 800ab12:	f3ef 8611 	mrs	r6, BASEPRI
 800ab16:	f381 8812 	msr	BASEPRI_MAX, r1
 800ab1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800ab1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ab20:	6921      	ldr	r1, [r4, #16]
 800ab22:	4288      	cmp	r0, r1
 800ab24:	d30b      	bcc.n	800ab3e <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ab26:	ea53 0102 	orrs.w	r1, r3, r2
 800ab2a:	d137      	bne.n	800ab9c <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800ab2c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800ab30:	f386 8811 	msr	BASEPRI, r6
 800ab34:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800ab38:	b002      	add	sp, #8
 800ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f005 f896 	bl	800fc70 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800ab44:	4680      	mov	r8, r0
 800ab46:	b180      	cbz	r0, 800ab6a <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ab48:	68e2      	ldr	r2, [r4, #12]
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	6940      	ldr	r0, [r0, #20]
 800ab4e:	f005 fa7c 	bl	801004a <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800ab52:	2400      	movs	r4, #0
 800ab54:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800ab58:	4640      	mov	r0, r8
 800ab5a:	f004 ffc2 	bl	800fae2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4638      	mov	r0, r7
 800ab62:	f000 fb61 	bl	800b228 <z_reschedule>
			return 0;
 800ab66:	4620      	mov	r0, r4
 800ab68:	e7e6      	b.n	800ab38 <z_impl_k_msgq_put+0x38>
 800ab6a:	68e2      	ldr	r2, [r4, #12]
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	6a20      	ldr	r0, [r4, #32]
 800ab70:	f005 fa6b 	bl	801004a <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800ab74:	68e2      	ldr	r2, [r4, #12]
 800ab76:	6a23      	ldr	r3, [r4, #32]
 800ab78:	4413      	add	r3, r2
 800ab7a:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800ab7c:	69a2      	ldr	r2, [r4, #24]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d009      	beq.n	800ab96 <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 800ab82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab84:	3301      	adds	r3, #1
 800ab86:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800ab88:	2110      	movs	r1, #16
 800ab8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ab8e:	f005 fa42 	bl	8010016 <z_handle_obj_poll_events>
		result = 0;
 800ab92:	2000      	movs	r0, #0
 800ab94:	e7cc      	b.n	800ab30 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 800ab96:	6963      	ldr	r3, [r4, #20]
 800ab98:	6223      	str	r3, [r4, #32]
 800ab9a:	e7f2      	b.n	800ab82 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 800ab9c:	4905      	ldr	r1, [pc, #20]	; (800abb4 <z_impl_k_msgq_put+0xb4>)
 800ab9e:	6889      	ldr	r1, [r1, #8]
 800aba0:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800aba2:	9200      	str	r2, [sp, #0]
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	4622      	mov	r2, r4
 800aba8:	4631      	mov	r1, r6
 800abaa:	4638      	mov	r0, r7
 800abac:	f000 fcac 	bl	800b508 <z_pend_curr>
		return result;
 800abb0:	e7c2      	b.n	800ab38 <z_impl_k_msgq_put+0x38>
 800abb2:	bf00      	nop
 800abb4:	2000134c 	.word	0x2000134c

0800abb8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800abb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abba:	b083      	sub	sp, #12
 800abbc:	4604      	mov	r4, r0
 800abbe:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800abc0:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 800abc4:	f04f 0110 	mov.w	r1, #16
 800abc8:	f3ef 8511 	mrs	r5, BASEPRI
 800abcc:	f381 8812 	msr	BASEPRI_MAX, r1
 800abd0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800abd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800abd6:	2900      	cmp	r1, #0
 800abd8:	d033      	beq.n	800ac42 <z_impl_k_msgq_get+0x8a>
 800abda:	68e2      	ldr	r2, [r4, #12]
 800abdc:	69e1      	ldr	r1, [r4, #28]
 800abde:	f005 fa34 	bl	801004a <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800abe2:	68e2      	ldr	r2, [r4, #12]
 800abe4:	69e3      	ldr	r3, [r4, #28]
 800abe6:	4413      	add	r3, r2
 800abe8:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800abea:	69a2      	ldr	r2, [r4, #24]
 800abec:	4293      	cmp	r3, r2
 800abee:	d022      	beq.n	800ac36 <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 800abf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf2:	3b01      	subs	r3, #1
 800abf4:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800abf6:	4620      	mov	r0, r4
 800abf8:	f005 f83a 	bl	800fc70 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800abfc:	4607      	mov	r7, r0
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d035      	beq.n	800ac6e <z_impl_k_msgq_get+0xb6>
 800ac02:	68e2      	ldr	r2, [r4, #12]
 800ac04:	6941      	ldr	r1, [r0, #20]
 800ac06:	6a20      	ldr	r0, [r4, #32]
 800ac08:	f005 fa1f 	bl	801004a <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800ac0c:	68e2      	ldr	r2, [r4, #12]
 800ac0e:	6a23      	ldr	r3, [r4, #32]
 800ac10:	4413      	add	r3, r2
 800ac12:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800ac14:	69a2      	ldr	r2, [r4, #24]
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d010      	beq.n	800ac3c <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800ac1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	6263      	str	r3, [r4, #36]	; 0x24
 800ac20:	2400      	movs	r4, #0
 800ac22:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800ac24:	4638      	mov	r0, r7
 800ac26:	f004 ff5c 	bl	800fae2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f000 fafb 	bl	800b228 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800ac32:	4620      	mov	r0, r4
 800ac34:	e00e      	b.n	800ac54 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	61e3      	str	r3, [r4, #28]
 800ac3a:	e7d9      	b.n	800abf0 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 800ac3c:	6963      	ldr	r3, [r4, #20]
 800ac3e:	6223      	str	r3, [r4, #32]
 800ac40:	e7eb      	b.n	800ac1a <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ac42:	ea53 0102 	orrs.w	r1, r3, r2
 800ac46:	d107      	bne.n	800ac58 <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 800ac48:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800ac4c:	f385 8811 	msr	BASEPRI, r5
 800ac50:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800ac54:	b003      	add	sp, #12
 800ac56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800ac58:	4906      	ldr	r1, [pc, #24]	; (800ac74 <z_impl_k_msgq_get+0xbc>)
 800ac5a:	6889      	ldr	r1, [r1, #8]
 800ac5c:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800ac5e:	9200      	str	r2, [sp, #0]
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	4622      	mov	r2, r4
 800ac64:	4629      	mov	r1, r5
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 fc4e 	bl	800b508 <z_pend_curr>
		return result;
 800ac6c:	e7f2      	b.n	800ac54 <z_impl_k_msgq_get+0x9c>
		result = 0;
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7ec      	b.n	800ac4c <z_impl_k_msgq_get+0x94>
 800ac72:	bf00      	nop
 800ac74:	2000134c 	.word	0x2000134c

0800ac78 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	4604      	mov	r4, r0
 800ac80:	461d      	mov	r5, r3
	__asm__ volatile(
 800ac82:	f04f 0310 	mov.w	r3, #16
 800ac86:	f3ef 8711 	mrs	r7, BASEPRI
 800ac8a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ac8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800ac92:	68c1      	ldr	r1, [r0, #12]
 800ac94:	b999      	cbnz	r1, 800acbe <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800ac96:	2900      	cmp	r1, #0
 800ac98:	d14f      	bne.n	800ad3a <z_impl_k_mutex_lock+0xc2>
 800ac9a:	4b3a      	ldr	r3, [pc, #232]	; (800ad84 <z_impl_k_mutex_lock+0x10c>)
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800aca2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800aca4:	3101      	adds	r1, #1
 800aca6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800aca8:	4b36      	ldr	r3, [pc, #216]	; (800ad84 <z_impl_k_mutex_lock+0x10c>)
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800acae:	f387 8811 	msr	BASEPRI, r7
 800acb2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800acb6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800acb8:	b003      	add	sp, #12
 800acba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acbe:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800acc0:	6882      	ldr	r2, [r0, #8]
 800acc2:	4b30      	ldr	r3, [pc, #192]	; (800ad84 <z_impl_k_mutex_lock+0x10c>)
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d0e5      	beq.n	800ac96 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800acca:	ea55 0106 	orrs.w	r1, r5, r6
 800acce:	bf0c      	ite	eq
 800acd0:	f04f 0801 	moveq.w	r8, #1
 800acd4:	f04f 0800 	movne.w	r8, #0
 800acd8:	d031      	beq.n	800ad3e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800acda:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800acde:	4649      	mov	r1, r9
 800ace0:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800ace4:	f004 fe20 	bl	800f928 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800ace8:	4581      	cmp	r9, r0
 800acea:	dc2f      	bgt.n	800ad4c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800acec:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800acf0:	9600      	str	r6, [sp, #0]
 800acf2:	9501      	str	r5, [sp, #4]
 800acf4:	4622      	mov	r2, r4
 800acf6:	4639      	mov	r1, r7
 800acf8:	4823      	ldr	r0, [pc, #140]	; (800ad88 <z_impl_k_mutex_lock+0x110>)
 800acfa:	f000 fc05 	bl	800b508 <z_pend_curr>
	if (got_mutex == 0) {
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0da      	beq.n	800acb8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800ad02:	f04f 0310 	mov.w	r3, #16
 800ad06:	f3ef 8511 	mrs	r5, BASEPRI
 800ad0a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800ad12:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d01f      	beq.n	800ad58 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ad18:	b1f3      	cbz	r3, 800ad58 <z_impl_k_mutex_lock+0xe0>
 800ad1a:	6921      	ldr	r1, [r4, #16]
 800ad1c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800ad20:	f004 fe02 	bl	800f928 <new_prio_for_inheritance>
 800ad24:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ad26:	4620      	mov	r0, r4
 800ad28:	f004 fe09 	bl	800f93e <adjust_owner_prio>
 800ad2c:	b9b0      	cbnz	r0, 800ad5c <z_impl_k_mutex_lock+0xe4>
 800ad2e:	f1b9 0f00 	cmp.w	r9, #0
 800ad32:	d015      	beq.n	800ad60 <z_impl_k_mutex_lock+0xe8>
 800ad34:	f04f 0801 	mov.w	r8, #1
 800ad38:	e012      	b.n	800ad60 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	e7b1      	b.n	800aca2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800ad3e:	f387 8811 	msr	BASEPRI, r7
 800ad42:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800ad46:	f06f 000f 	mvn.w	r0, #15
 800ad4a:	e7b5      	b.n	800acb8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f004 fdf5 	bl	800f93e <adjust_owner_prio>
 800ad54:	4681      	mov	r9, r0
 800ad56:	e7cb      	b.n	800acf0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ad58:	6921      	ldr	r1, [r4, #16]
 800ad5a:	e7e4      	b.n	800ad26 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ad5c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800ad60:	f1b8 0f00 	cmp.w	r8, #0
 800ad64:	d106      	bne.n	800ad74 <z_impl_k_mutex_lock+0xfc>
 800ad66:	f385 8811 	msr	BASEPRI, r5
 800ad6a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800ad6e:	f06f 000a 	mvn.w	r0, #10
 800ad72:	e7a1      	b.n	800acb8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800ad74:	4629      	mov	r1, r5
 800ad76:	4804      	ldr	r0, [pc, #16]	; (800ad88 <z_impl_k_mutex_lock+0x110>)
 800ad78:	f000 fa56 	bl	800b228 <z_reschedule>
	return -EAGAIN;
 800ad7c:	f06f 000a 	mvn.w	r0, #10
 800ad80:	e79a      	b.n	800acb8 <z_impl_k_mutex_lock+0x40>
 800ad82:	bf00      	nop
 800ad84:	2000134c 	.word	0x2000134c
 800ad88:	20001370 	.word	0x20001370

0800ad8c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800ad8c:	6882      	ldr	r2, [r0, #8]
 800ad8e:	2a00      	cmp	r2, #0
 800ad90:	d034      	beq.n	800adfc <z_impl_k_mutex_unlock+0x70>
{
 800ad92:	b538      	push	{r3, r4, r5, lr}
 800ad94:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800ad96:	4b1c      	ldr	r3, [pc, #112]	; (800ae08 <z_impl_k_mutex_unlock+0x7c>)
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d131      	bne.n	800ae02 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800ad9e:	7bda      	ldrb	r2, [r3, #15]
 800ada0:	3a01      	subs	r2, #1
 800ada2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800ada4:	68c3      	ldr	r3, [r0, #12]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d905      	bls.n	800adb6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800adaa:	3b01      	subs	r3, #1
 800adac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800adae:	f000 fc61 	bl	800b674 <k_sched_unlock>

	return 0;
 800adb2:	2000      	movs	r0, #0
}
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800adb6:	f04f 0310 	mov.w	r3, #16
 800adba:	f3ef 8511 	mrs	r5, BASEPRI
 800adbe:	f383 8812 	msr	BASEPRI_MAX, r3
 800adc2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800adc6:	6901      	ldr	r1, [r0, #16]
 800adc8:	f004 fdb9 	bl	800f93e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800adcc:	4620      	mov	r0, r4
 800adce:	f004 ff4f 	bl	800fc70 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800add2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800add4:	b158      	cbz	r0, 800adee <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800add6:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	2300      	movs	r3, #0
 800adde:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800ade0:	f004 fe7f 	bl	800fae2 <z_ready_thread>
		z_reschedule(&lock, key);
 800ade4:	4629      	mov	r1, r5
 800ade6:	4809      	ldr	r0, [pc, #36]	; (800ae0c <z_impl_k_mutex_unlock+0x80>)
 800ade8:	f000 fa1e 	bl	800b228 <z_reschedule>
 800adec:	e7df      	b.n	800adae <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800adf2:	f385 8811 	msr	BASEPRI, r5
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	e7d8      	b.n	800adae <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800adfc:	f06f 0015 	mvn.w	r0, #21
}
 800ae00:	4770      	bx	lr
		return -EPERM;
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae06:	e7d5      	b.n	800adb4 <z_impl_k_mutex_unlock+0x28>
 800ae08:	2000134c 	.word	0x2000134c
 800ae0c:	20001370 	.word	0x20001370

0800ae10 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4604      	mov	r4, r0
	__asm__ volatile(
 800ae14:	f04f 0310 	mov.w	r3, #16
 800ae18:	f3ef 8511 	mrs	r5, BASEPRI
 800ae1c:	f383 8812 	msr	BASEPRI_MAX, r3
 800ae20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800ae24:	f004 ff24 	bl	800fc70 <z_unpend_first_thread>

	if (thread != NULL) {
 800ae28:	b140      	cbz	r0, 800ae3c <z_impl_k_sem_give+0x2c>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800ae2e:	f004 fe58 	bl	800fae2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800ae32:	4629      	mov	r1, r5
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <z_impl_k_sem_give+0x4c>)
 800ae36:	f000 f9f7 	bl	800b228 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	68e2      	ldr	r2, [r4, #12]
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d008      	beq.n	800ae56 <z_impl_k_sem_give+0x46>
 800ae44:	2201      	movs	r2, #1
 800ae46:	4413      	add	r3, r2
 800ae48:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	f104 0010 	add.w	r0, r4, #16
 800ae50:	f005 f8e1 	bl	8010016 <z_handle_obj_poll_events>
}
 800ae54:	e7ed      	b.n	800ae32 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800ae56:	2200      	movs	r2, #0
 800ae58:	e7f5      	b.n	800ae46 <z_impl_k_sem_give+0x36>
 800ae5a:	bf00      	nop
 800ae5c:	20001374 	.word	0x20001374

0800ae60 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800ae60:	b510      	push	{r4, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	f04f 0410 	mov.w	r4, #16
 800ae68:	f3ef 8111 	mrs	r1, BASEPRI
 800ae6c:	f384 8812 	msr	BASEPRI_MAX, r4
 800ae70:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800ae74:	6884      	ldr	r4, [r0, #8]
 800ae76:	b144      	cbz	r4, 800ae8a <z_impl_k_sem_take+0x2a>
		sem->count--;
 800ae78:	3c01      	subs	r4, #1
 800ae7a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800ae7c:	f381 8811 	msr	BASEPRI, r1
 800ae80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800ae84:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800ae86:	b002      	add	sp, #8
 800ae88:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ae8a:	ea53 0402 	orrs.w	r4, r3, r2
 800ae8e:	d006      	beq.n	800ae9e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800ae90:	9200      	str	r2, [sp, #0]
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	4602      	mov	r2, r0
 800ae96:	4805      	ldr	r0, [pc, #20]	; (800aeac <z_impl_k_sem_take+0x4c>)
 800ae98:	f000 fb36 	bl	800b508 <z_pend_curr>
	return ret;
 800ae9c:	e7f3      	b.n	800ae86 <z_impl_k_sem_take+0x26>
 800ae9e:	f381 8811 	msr	BASEPRI, r1
 800aea2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800aea6:	f06f 000f 	mvn.w	r0, #15
 800aeaa:	e7ec      	b.n	800ae86 <z_impl_k_sem_take+0x26>
 800aeac:	20001374 	.word	0x20001374

0800aeb0 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800aeb4:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800aeb6:	f013 0f02 	tst.w	r3, #2
 800aeba:	d15c      	bne.n	800af76 <submit_to_queue_locked+0xc6>
 800aebc:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800aebe:	f013 0f04 	tst.w	r3, #4
 800aec2:	d15d      	bne.n	800af80 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800aec4:	680b      	ldr	r3, [r1, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d038      	beq.n	800af3c <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800aeca:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800aecc:	f013 0f01 	tst.w	r3, #1
 800aed0:	d037      	beq.n	800af42 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	602b      	str	r3, [r5, #0]
			ret = 2;
 800aed6:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800aed8:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800aeda:	2e00      	cmp	r6, #0
 800aedc:	d03f      	beq.n	800af5e <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800aede:	4b29      	ldr	r3, [pc, #164]	; (800af84 <submit_to_queue_locked+0xd4>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	42b3      	cmp	r3, r6
 800aee4:	d02f      	beq.n	800af46 <submit_to_queue_locked+0x96>
 800aee6:	2300      	movs	r3, #0
 800aee8:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800aeea:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800aeee:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800aef2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800aef6:	f013 0f01 	tst.w	r3, #1
 800aefa:	d033      	beq.n	800af64 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800aefc:	b101      	cbz	r1, 800af00 <submit_to_queue_locked+0x50>
 800aefe:	b3a2      	cbz	r2, 800af6a <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800af00:	b100      	cbz	r0, 800af04 <submit_to_queue_locked+0x54>
 800af02:	b3a9      	cbz	r1, 800af70 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800af04:	2300      	movs	r3, #0
 800af06:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800af08:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800af0c:	b313      	cbz	r3, 800af54 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800af0e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800af10:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800af14:	b12e      	cbz	r6, 800af22 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800af16:	2200      	movs	r2, #0
 800af18:	4611      	mov	r1, r2
 800af1a:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800af1e:	f004 ff0f 	bl	800fd40 <z_sched_wake>
		ret = 1;
 800af22:	2001      	movs	r0, #1

		if (rc < 0) {
 800af24:	2800      	cmp	r0, #0
 800af26:	db06      	blt.n	800af36 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800af28:	68e3      	ldr	r3, [r4, #12]
 800af2a:	f043 0304 	orr.w	r3, r3, #4
 800af2e:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	60a3      	str	r3, [r4, #8]
 800af34:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800af36:	2800      	cmp	r0, #0
 800af38:	dc21      	bgt.n	800af7e <submit_to_queue_locked+0xce>
 800af3a:	e01e      	b.n	800af7a <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800af3c:	6883      	ldr	r3, [r0, #8]
 800af3e:	600b      	str	r3, [r1, #0]
 800af40:	e7c3      	b.n	800aeca <submit_to_queue_locked+0x1a>
		ret = 1;
 800af42:	2701      	movs	r7, #1
 800af44:	e7c8      	b.n	800aed8 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800af46:	f004 fca7 	bl	800f898 <k_is_in_isr>
 800af4a:	b908      	cbnz	r0, 800af50 <submit_to_queue_locked+0xa0>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7cb      	b.n	800aee8 <submit_to_queue_locked+0x38>
 800af50:	2300      	movs	r3, #0
 800af52:	e7c9      	b.n	800aee8 <submit_to_queue_locked+0x38>
 800af54:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800af58:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800af5c:	e7da      	b.n	800af14 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800af5e:	f06f 0015 	mvn.w	r0, #21
 800af62:	e7df      	b.n	800af24 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800af64:	f06f 0012 	mvn.w	r0, #18
 800af68:	e7dc      	b.n	800af24 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800af6a:	f06f 000f 	mvn.w	r0, #15
 800af6e:	e7d9      	b.n	800af24 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800af70:	f06f 000f 	mvn.w	r0, #15
 800af74:	e7d6      	b.n	800af24 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800af76:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800af7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800af80:	2000      	movs	r0, #0
 800af82:	e7fa      	b.n	800af7a <submit_to_queue_locked+0xca>
 800af84:	2000134c 	.word	0x2000134c

0800af88 <finalize_cancel_locked>:
{
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800af8c:	68c3      	ldr	r3, [r0, #12]
 800af8e:	f023 0302 	bic.w	r3, r3, #2
 800af92:	60c3      	str	r3, [r0, #12]
	return list->head;
 800af94:	4b1a      	ldr	r3, [pc, #104]	; (800b000 <finalize_cancel_locked+0x78>)
 800af96:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800af98:	b1fb      	cbz	r3, 800afda <finalize_cancel_locked+0x52>
 800af9a:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800af9c:	b103      	cbz	r3, 800afa0 <finalize_cancel_locked+0x18>
	return node->next;
 800af9e:	681c      	ldr	r4, [r3, #0]
 800afa0:	2600      	movs	r6, #0
 800afa2:	e01f      	b.n	800afe4 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800afa4:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800afa6:	b166      	cbz	r6, 800afc2 <finalize_cancel_locked+0x3a>
	return node->next;
 800afa8:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800afaa:	6031      	str	r1, [r6, #0]
	return list->tail;
 800afac:	4914      	ldr	r1, [pc, #80]	; (800b000 <finalize_cancel_locked+0x78>)
 800afae:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800afb0:	428b      	cmp	r3, r1
 800afb2:	d00f      	beq.n	800afd4 <finalize_cancel_locked+0x4c>
	parent->next = child;
 800afb4:	2100      	movs	r1, #0
 800afb6:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800afb8:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800afbc:	f7ff ff28 	bl	800ae10 <z_impl_k_sem_give>
}
 800afc0:	e015      	b.n	800afee <finalize_cancel_locked+0x66>
	return node->next;
 800afc2:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800afc4:	490e      	ldr	r1, [pc, #56]	; (800b000 <finalize_cancel_locked+0x78>)
 800afc6:	6008      	str	r0, [r1, #0]
	return list->tail;
 800afc8:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800afca:	428b      	cmp	r3, r1
 800afcc:	d1f2      	bne.n	800afb4 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800afce:	490c      	ldr	r1, [pc, #48]	; (800b000 <finalize_cancel_locked+0x78>)
 800afd0:	6048      	str	r0, [r1, #4]
}
 800afd2:	e7ef      	b.n	800afb4 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800afd4:	490a      	ldr	r1, [pc, #40]	; (800b000 <finalize_cancel_locked+0x78>)
 800afd6:	604e      	str	r6, [r1, #4]
}
 800afd8:	e7ec      	b.n	800afb4 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800afda:	461c      	mov	r4, r3
 800afdc:	e7e0      	b.n	800afa0 <finalize_cancel_locked+0x18>
 800afde:	4622      	mov	r2, r4
 800afe0:	4623      	mov	r3, r4
 800afe2:	4614      	mov	r4, r2
 800afe4:	b153      	cbz	r3, 800affc <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	42aa      	cmp	r2, r5
 800afea:	d0db      	beq.n	800afa4 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800afec:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800afee:	2c00      	cmp	r4, #0
 800aff0:	d0f5      	beq.n	800afde <finalize_cancel_locked+0x56>
 800aff2:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800aff4:	2c00      	cmp	r4, #0
 800aff6:	d0f3      	beq.n	800afe0 <finalize_cancel_locked+0x58>
	return node->next;
 800aff8:	6822      	ldr	r2, [r4, #0]
 800affa:	e7f1      	b.n	800afe0 <finalize_cancel_locked+0x58>
}
 800affc:	bd70      	pop	{r4, r5, r6, pc}
 800affe:	bf00      	nop
 800b000:	2000137c 	.word	0x2000137c

0800b004 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800b004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b006:	b085      	sub	sp, #20
 800b008:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800b00a:	e016      	b.n	800b03a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800b00c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800b010:	f023 0204 	bic.w	r2, r3, #4
 800b014:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 800b018:	f013 0f04 	tst.w	r3, #4
 800b01c:	d159      	bne.n	800b0d2 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800b01e:	2300      	movs	r3, #0
 800b020:	9302      	str	r3, [sp, #8]
 800b022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b02a:	e9cd 2300 	strd	r2, r3, [sp]
 800b02e:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800b032:	4631      	mov	r1, r6
 800b034:	482e      	ldr	r0, [pc, #184]	; (800b0f0 <work_queue_main+0xec>)
 800b036:	f000 fc81 	bl	800b93c <z_sched_wait>
	__asm__ volatile(
 800b03a:	f04f 0310 	mov.w	r3, #16
 800b03e:	f3ef 8611 	mrs	r6, BASEPRI
 800b042:	f383 8812 	msr	BASEPRI_MAX, r3
 800b046:	f3bf 8f6f 	isb	sy
	return list->head;
 800b04a:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800b04e:	2c00      	cmp	r4, #0
 800b050:	d0dc      	beq.n	800b00c <work_queue_main+0x8>
	return node->next;
 800b052:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800b054:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800b058:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800b05c:	4294      	cmp	r4, r2
 800b05e:	d035      	beq.n	800b0cc <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800b060:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b064:	f043 0302 	orr.w	r3, r3, #2
 800b068:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800b06c:	68e3      	ldr	r3, [r4, #12]
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800b074:	f023 0304 	bic.w	r3, r3, #4
 800b078:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800b07a:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800b07c:	2c00      	cmp	r4, #0
 800b07e:	d0ce      	beq.n	800b01e <work_queue_main+0x1a>
	__asm__ volatile(
 800b080:	f386 8811 	msr	BASEPRI, r6
 800b084:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800b088:	4620      	mov	r0, r4
 800b08a:	4798      	blx	r3
	__asm__ volatile(
 800b08c:	f04f 0310 	mov.w	r3, #16
 800b090:	f3ef 8611 	mrs	r6, BASEPRI
 800b094:	f383 8812 	msr	BASEPRI_MAX, r3
 800b098:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800b09c:	68e3      	ldr	r3, [r4, #12]
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800b0a4:	f013 0f02 	tst.w	r3, #2
 800b0a8:	d11e      	bne.n	800b0e8 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800b0aa:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b0ae:	f023 0302 	bic.w	r3, r3, #2
 800b0b2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800b0b6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800b0ba:	f386 8811 	msr	BASEPRI, r6
 800b0be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1b9      	bne.n	800b03a <work_queue_main+0x36>
	z_impl_k_yield();
 800b0c6:	f000 fb53 	bl	800b770 <z_impl_k_yield>
}
 800b0ca:	e7b6      	b.n	800b03a <work_queue_main+0x36>
	list->tail = node;
 800b0cc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800b0d0:	e7c6      	b.n	800b060 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800b0d2:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2101      	movs	r1, #1
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f004 fe30 	bl	800fd40 <z_sched_wake>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d1f8      	bne.n	800b0d6 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e7c9      	b.n	800b07c <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f7ff ff4d 	bl	800af88 <finalize_cancel_locked>
 800b0ee:	e7dc      	b.n	800b0aa <work_queue_main+0xa6>
 800b0f0:	20001378 	.word	0x20001378

0800b0f4 <k_work_submit>:
{
 800b0f4:	b508      	push	{r3, lr}
 800b0f6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <k_work_submit+0xc>)
 800b0fa:	f004 fc5c 	bl	800f9b6 <k_work_submit_to_queue>
}
 800b0fe:	bd08      	pop	{r3, pc}
 800b100:	20000bc8 	.word	0x20000bc8

0800b104 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 800b104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b106:	b089      	sub	sp, #36	; 0x24
 800b108:	4604      	mov	r4, r0
 800b10a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800b10c:	2000      	movs	r0, #0
 800b10e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800b112:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b116:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800b11a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800b11e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800b122:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800b126:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800b12a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800b12e:	b1fd      	cbz	r5, 800b170 <k_work_queue_start+0x6c>
 800b130:	7928      	ldrb	r0, [r5, #4]
 800b132:	b9f8      	cbnz	r0, 800b174 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b134:	2001      	movs	r0, #1
	*flagp = flags;
 800b136:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800b13a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b13e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b142:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b146:	2000      	movs	r0, #0
 800b148:	9004      	str	r0, [sp, #16]
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	9002      	str	r0, [sp, #8]
 800b14e:	9001      	str	r0, [sp, #4]
 800b150:	9400      	str	r4, [sp, #0]
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <k_work_queue_start+0x78>)
 800b154:	4620      	mov	r0, r4
 800b156:	f004 fbb9 	bl	800f8cc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800b15a:	b125      	cbz	r5, 800b166 <k_work_queue_start+0x62>
 800b15c:	6829      	ldr	r1, [r5, #0]
 800b15e:	b111      	cbz	r1, 800b166 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800b160:	4620      	mov	r0, r4
 800b162:	f004 fb9f 	bl	800f8a4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800b166:	4620      	mov	r0, r4
 800b168:	f004 fba1 	bl	800f8ae <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800b16c:	b009      	add	sp, #36	; 0x24
 800b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b170:	2001      	movs	r0, #1
 800b172:	e7e0      	b.n	800b136 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800b174:	f240 1001 	movw	r0, #257	; 0x101
 800b178:	e7dd      	b.n	800b136 <k_work_queue_start+0x32>
 800b17a:	bf00      	nop
 800b17c:	0800b005 	.word	0x0800b005

0800b180 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b184:	bf08      	it	eq
 800b186:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800b18a:	d100      	bne.n	800b18e <add_thread_timeout+0xe>
 800b18c:	4770      	bx	lr
{
 800b18e:	b508      	push	{r3, lr}
 800b190:	4902      	ldr	r1, [pc, #8]	; (800b19c <add_thread_timeout+0x1c>)
 800b192:	3018      	adds	r0, #24
 800b194:	f000 fc48 	bl	800ba28 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800b198:	bd08      	pop	{r3, pc}
 800b19a:	bf00      	nop
 800b19c:	0800fb1b 	.word	0x0800fb1b

0800b1a0 <z_reset_time_slice>:
{
 800b1a0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800b1a2:	4b08      	ldr	r3, [pc, #32]	; (800b1c4 <z_reset_time_slice+0x24>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	b903      	cbnz	r3, 800b1aa <z_reset_time_slice+0xa>
}
 800b1a8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800b1aa:	f7fe fd0b 	bl	8009bc4 <sys_clock_elapsed>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	4a04      	ldr	r2, [pc, #16]	; (800b1c4 <z_reset_time_slice+0x24>)
 800b1b2:	6810      	ldr	r0, [r2, #0]
 800b1b4:	4403      	add	r3, r0
 800b1b6:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <z_reset_time_slice+0x28>)
 800b1b8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	f004 fe63 	bl	800fe86 <z_set_timeout_expiry>
}
 800b1c0:	e7f2      	b.n	800b1a8 <z_reset_time_slice+0x8>
 800b1c2:	bf00      	nop
 800b1c4:	20001390 	.word	0x20001390
 800b1c8:	2000134c 	.word	0x2000134c

0800b1cc <k_sched_time_slice_set>:
{
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800b1d2:	2300      	movs	r3, #0
	__asm__ volatile(
 800b1d4:	f04f 0210 	mov.w	r2, #16
 800b1d8:	f3ef 8611 	mrs	r6, BASEPRI
 800b1dc:	f382 8812 	msr	BASEPRI_MAX, r2
 800b1e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800b1e4:	e00c      	b.n	800b200 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	bfb8      	it	lt
 800b1ea:	2302      	movlt	r3, #2
 800b1ec:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800b1ee:	4b0b      	ldr	r3, [pc, #44]	; (800b21c <k_sched_time_slice_set+0x50>)
 800b1f0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800b1f2:	f7ff ffd5 	bl	800b1a0 <z_reset_time_slice>
	__asm__ volatile(
 800b1f6:	f386 8811 	msr	BASEPRI, r6
 800b1fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b1fe:	2301      	movs	r3, #1
 800b200:	b953      	cbnz	r3, 800b218 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800b202:	4b07      	ldr	r3, [pc, #28]	; (800b220 <k_sched_time_slice_set+0x54>)
 800b204:	2200      	movs	r2, #0
 800b206:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800b208:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800b20c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800b20e:	4a05      	ldr	r2, [pc, #20]	; (800b224 <k_sched_time_slice_set+0x58>)
 800b210:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800b212:	2c00      	cmp	r4, #0
 800b214:	dce7      	bgt.n	800b1e6 <k_sched_time_slice_set+0x1a>
 800b216:	e7ea      	b.n	800b1ee <k_sched_time_slice_set+0x22>
}
 800b218:	bd70      	pop	{r4, r5, r6, pc}
 800b21a:	bf00      	nop
 800b21c:	2000138c 	.word	0x2000138c
 800b220:	2000134c 	.word	0x2000134c
 800b224:	20001390 	.word	0x20001390

0800b228 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800b228:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800b22a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800b22c:	b921      	cbnz	r1, 800b238 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b22e:	f3ef 8305 	mrs	r3, IPSR
 800b232:	b913      	cbnz	r3, 800b23a <z_reschedule+0x12>
 800b234:	2101      	movs	r1, #1
 800b236:	e000      	b.n	800b23a <z_reschedule+0x12>
 800b238:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800b23a:	f011 0f01 	tst.w	r1, #1
 800b23e:	d007      	beq.n	800b250 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800b240:	4b06      	ldr	r3, [pc, #24]	; (800b25c <z_reschedule+0x34>)
 800b242:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800b244:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800b246:	429a      	cmp	r2, r3
 800b248:	d002      	beq.n	800b250 <z_reschedule+0x28>
	ret = arch_swap(key);
 800b24a:	f7f9 ff03 	bl	8005054 <arch_swap>
		z_swap(lock, key);
 800b24e:	e003      	b.n	800b258 <z_reschedule+0x30>
 800b250:	f380 8811 	msr	BASEPRI, r0
 800b254:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800b258:	bd08      	pop	{r3, pc}
 800b25a:	bf00      	nop
 800b25c:	2000134c 	.word	0x2000134c

0800b260 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800b260:	2300      	movs	r3, #0
	__asm__ volatile(
 800b262:	f04f 0210 	mov.w	r2, #16
 800b266:	f3ef 8111 	mrs	r1, BASEPRI
 800b26a:	f382 8812 	msr	BASEPRI_MAX, r2
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	e009      	b.n	800b288 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800b274:	4b06      	ldr	r3, [pc, #24]	; (800b290 <k_sched_lock+0x30>)
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	7bd3      	ldrb	r3, [r2, #15]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800b27e:	f381 8811 	msr	BASEPRI, r1
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	2301      	movs	r3, #1
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0f3      	beq.n	800b274 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	2000134c 	.word	0x2000134c

0800b294 <update_cache>:
{
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800b298:	480f      	ldr	r0, [pc, #60]	; (800b2d8 <update_cache+0x44>)
 800b29a:	f004 fc1b 	bl	800fad4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b170      	cbz	r0, 800b2c0 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800b2a2:	b984      	cbnz	r4, 800b2c6 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800b2a4:	4b0d      	ldr	r3, [pc, #52]	; (800b2dc <update_cache+0x48>)
 800b2a6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800b2a8:	7b5a      	ldrb	r2, [r3, #13]
 800b2aa:	f012 0f1f 	tst.w	r2, #31
 800b2ae:	d10a      	bne.n	800b2c6 <update_cache+0x32>
	return node->next != NULL;
 800b2b0:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800b2b2:	b942      	cbnz	r2, 800b2c6 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b2b4:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800b2b6:	2a7f      	cmp	r2, #127	; 0x7f
 800b2b8:	d905      	bls.n	800b2c6 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800b2ba:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <update_cache+0x48>)
 800b2bc:	6193      	str	r3, [r2, #24]
 800b2be:	e00a      	b.n	800b2d6 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800b2c0:	4b06      	ldr	r3, [pc, #24]	; (800b2dc <update_cache+0x48>)
 800b2c2:	68dd      	ldr	r5, [r3, #12]
 800b2c4:	e7ed      	b.n	800b2a2 <update_cache+0xe>
		if (thread != _current) {
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <update_cache+0x48>)
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	42ab      	cmp	r3, r5
 800b2cc:	d001      	beq.n	800b2d2 <update_cache+0x3e>
			z_reset_time_slice();
 800b2ce:	f7ff ff67 	bl	800b1a0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800b2d2:	4b02      	ldr	r3, [pc, #8]	; (800b2dc <update_cache+0x48>)
 800b2d4:	619d      	str	r5, [r3, #24]
}
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	20001368 	.word	0x20001368
 800b2dc:	2000134c 	.word	0x2000134c

0800b2e0 <move_thread_to_end_of_prio_q>:
{
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800b2e4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800b2e6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	db28      	blt.n	800b340 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800b2ee:	7b6b      	ldrb	r3, [r5, #13]
 800b2f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2f4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <move_thread_to_end_of_prio_q+0x80>)
 800b2f8:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	d02d      	beq.n	800b35c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b300:	b16c      	cbz	r4, 800b31e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b302:	4621      	mov	r1, r4
 800b304:	4628      	mov	r0, r5
 800b306:	f004 fb7a 	bl	800f9fe <z_sched_prio_cmp>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	dc20      	bgt.n	800b350 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b30e:	b134      	cbz	r4, 800b31e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800b310:	4b13      	ldr	r3, [pc, #76]	; (800b360 <move_thread_to_end_of_prio_q+0x80>)
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	429c      	cmp	r4, r3
 800b316:	d002      	beq.n	800b31e <move_thread_to_end_of_prio_q+0x3e>
 800b318:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b31a:	2c00      	cmp	r4, #0
 800b31c:	d1f0      	bne.n	800b300 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800b31e:	4b10      	ldr	r3, [pc, #64]	; (800b360 <move_thread_to_end_of_prio_q+0x80>)
 800b320:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800b322:	f103 011c 	add.w	r1, r3, #28
 800b326:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800b328:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800b32a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800b32c:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <move_thread_to_end_of_prio_q+0x80>)
 800b330:	6898      	ldr	r0, [r3, #8]
 800b332:	42a8      	cmp	r0, r5
 800b334:	bf14      	ite	ne
 800b336:	2000      	movne	r0, #0
 800b338:	2001      	moveq	r0, #1
 800b33a:	f7ff ffab 	bl	800b294 <update_cache>
}
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b344:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b346:	4601      	mov	r1, r0
 800b348:	4806      	ldr	r0, [pc, #24]	; (800b364 <move_thread_to_end_of_prio_q+0x84>)
 800b34a:	f004 fb97 	bl	800fa7c <z_priq_dumb_remove>
}
 800b34e:	e7ce      	b.n	800b2ee <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800b350:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800b352:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800b354:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800b356:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800b358:	6065      	str	r5, [r4, #4]
}
 800b35a:	e7e8      	b.n	800b32e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b35c:	2400      	movs	r4, #0
 800b35e:	e7cf      	b.n	800b300 <move_thread_to_end_of_prio_q+0x20>
 800b360:	2000134c 	.word	0x2000134c
 800b364:	20001368 	.word	0x20001368

0800b368 <z_time_slice>:
{
 800b368:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b36a:	f04f 0310 	mov.w	r3, #16
 800b36e:	f3ef 8411 	mrs	r4, BASEPRI
 800b372:	f383 8812 	msr	BASEPRI_MAX, r3
 800b376:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800b37a:	4b21      	ldr	r3, [pc, #132]	; (800b400 <z_time_slice+0x98>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	4a21      	ldr	r2, [pc, #132]	; (800b404 <z_time_slice+0x9c>)
 800b380:	6812      	ldr	r2, [r2, #0]
 800b382:	4293      	cmp	r3, r2
 800b384:	d017      	beq.n	800b3b6 <z_time_slice+0x4e>
	pending_current = NULL;
 800b386:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <z_time_slice+0x9c>)
 800b388:	2100      	movs	r1, #0
 800b38a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800b38c:	4a1e      	ldr	r2, [pc, #120]	; (800b408 <z_time_slice+0xa0>)
 800b38e:	6812      	ldr	r2, [r2, #0]
 800b390:	b372      	cbz	r2, 800b3f0 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b392:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800b394:	2a7f      	cmp	r2, #127	; 0x7f
 800b396:	d815      	bhi.n	800b3c4 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800b398:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800b39a:	f012 0f1f 	tst.w	r2, #31
 800b39e:	d11b      	bne.n	800b3d8 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800b3a0:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800b3a4:	4a19      	ldr	r2, [pc, #100]	; (800b40c <z_time_slice+0xa4>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	4291      	cmp	r1, r2
 800b3aa:	db17      	blt.n	800b3dc <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800b3ac:	4a18      	ldr	r2, [pc, #96]	; (800b410 <z_time_slice+0xa8>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d016      	beq.n	800b3e0 <z_time_slice+0x78>
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	e007      	b.n	800b3c6 <z_time_slice+0x5e>
		z_reset_time_slice();
 800b3b6:	f7ff fef3 	bl	800b1a0 <z_reset_time_slice>
	__asm__ volatile(
 800b3ba:	f384 8811 	msr	BASEPRI, r4
 800b3be:	f3bf 8f6f 	isb	sy
		return;
 800b3c2:	e01c      	b.n	800b3fe <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800b3c4:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800b3c6:	b19a      	cbz	r2, 800b3f0 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800b3c8:	4a0d      	ldr	r2, [pc, #52]	; (800b400 <z_time_slice+0x98>)
 800b3ca:	6912      	ldr	r2, [r2, #16]
 800b3cc:	4282      	cmp	r2, r0
 800b3ce:	dd09      	ble.n	800b3e4 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800b3d0:	1a10      	subs	r0, r2, r0
 800b3d2:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <z_time_slice+0x98>)
 800b3d4:	6118      	str	r0, [r3, #16]
 800b3d6:	e00e      	b.n	800b3f6 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800b3d8:	2200      	movs	r2, #0
 800b3da:	e7f4      	b.n	800b3c6 <z_time_slice+0x5e>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	e7f2      	b.n	800b3c6 <z_time_slice+0x5e>
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	e7f0      	b.n	800b3c6 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff ff7b 	bl	800b2e0 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800b3ea:	f7ff fed9 	bl	800b1a0 <z_reset_time_slice>
 800b3ee:	e002      	b.n	800b3f6 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800b3f0:	4b03      	ldr	r3, [pc, #12]	; (800b400 <z_time_slice+0x98>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	611a      	str	r2, [r3, #16]
 800b3f6:	f384 8811 	msr	BASEPRI, r4
 800b3fa:	f3bf 8f6f 	isb	sy
}
 800b3fe:	bd10      	pop	{r4, pc}
 800b400:	2000134c 	.word	0x2000134c
 800b404:	20001384 	.word	0x20001384
 800b408:	20001390 	.word	0x20001390
 800b40c:	2000138c 	.word	0x2000138c
 800b410:	20000ac0 	.word	0x20000ac0

0800b414 <ready_thread>:
{
 800b414:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800b416:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800b418:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	db2d      	blt.n	800b47c <ready_thread+0x68>
 800b420:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b422:	f013 0f1f 	tst.w	r3, #31
 800b426:	d105      	bne.n	800b434 <ready_thread+0x20>
	return node->next != NULL;
 800b428:	6982      	ldr	r2, [r0, #24]
 800b42a:	b10a      	cbz	r2, 800b430 <ready_thread+0x1c>
 800b42c:	2200      	movs	r2, #0
 800b42e:	e002      	b.n	800b436 <ready_thread+0x22>
 800b430:	2201      	movs	r2, #1
 800b432:	e000      	b.n	800b436 <ready_thread+0x22>
 800b434:	2200      	movs	r2, #0
 800b436:	b30a      	cbz	r2, 800b47c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800b438:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b43c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800b43e:	4b14      	ldr	r3, [pc, #80]	; (800b490 <ready_thread+0x7c>)
 800b440:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b444:	429d      	cmp	r5, r3
 800b446:	d020      	beq.n	800b48a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b448:	b16d      	cbz	r5, 800b466 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b44a:	4629      	mov	r1, r5
 800b44c:	4620      	mov	r0, r4
 800b44e:	f004 fad6 	bl	800f9fe <z_sched_prio_cmp>
 800b452:	2800      	cmp	r0, #0
 800b454:	dc13      	bgt.n	800b47e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b456:	b135      	cbz	r5, 800b466 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800b458:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <ready_thread+0x7c>)
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	429d      	cmp	r5, r3
 800b45e:	d002      	beq.n	800b466 <ready_thread+0x52>
 800b460:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b462:	2d00      	cmp	r5, #0
 800b464:	d1f0      	bne.n	800b448 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800b466:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <ready_thread+0x7c>)
 800b468:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b46a:	f103 011c 	add.w	r1, r3, #28
 800b46e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800b470:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800b472:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800b474:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800b476:	2000      	movs	r0, #0
 800b478:	f7ff ff0c 	bl	800b294 <update_cache>
}
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800b47e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800b480:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800b482:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800b484:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800b486:	606c      	str	r4, [r5, #4]
}
 800b488:	e7f5      	b.n	800b476 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b48a:	2500      	movs	r5, #0
 800b48c:	e7dc      	b.n	800b448 <ready_thread+0x34>
 800b48e:	bf00      	nop
 800b490:	2000134c 	.word	0x2000134c

0800b494 <z_sched_start>:
{
 800b494:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b496:	f04f 0310 	mov.w	r3, #16
 800b49a:	f3ef 8411 	mrs	r4, BASEPRI
 800b49e:	f383 8812 	msr	BASEPRI_MAX, r3
 800b4a2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800b4a6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800b4a8:	f013 0f04 	tst.w	r3, #4
 800b4ac:	d104      	bne.n	800b4b8 <z_sched_start+0x24>
	__asm__ volatile(
 800b4ae:	f384 8811 	msr	BASEPRI, r4
 800b4b2:	f3bf 8f6f 	isb	sy
}
 800b4b6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800b4b8:	f023 0304 	bic.w	r3, r3, #4
 800b4bc:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800b4be:	f7ff ffa9 	bl	800b414 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <z_sched_start+0x38>)
 800b4c6:	f7ff feaf 	bl	800b228 <z_reschedule>
 800b4ca:	e7f4      	b.n	800b4b6 <z_sched_start+0x22>
 800b4cc:	20001388 	.word	0x20001388

0800b4d0 <unready_thread>:
{
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800b4d4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800b4d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	db08      	blt.n	800b4f0 <unready_thread+0x20>
	update_cache(thread == _current);
 800b4de:	4b08      	ldr	r3, [pc, #32]	; (800b500 <unready_thread+0x30>)
 800b4e0:	6898      	ldr	r0, [r3, #8]
 800b4e2:	42a0      	cmp	r0, r4
 800b4e4:	bf14      	ite	ne
 800b4e6:	2000      	movne	r0, #0
 800b4e8:	2001      	moveq	r0, #1
 800b4ea:	f7ff fed3 	bl	800b294 <update_cache>
}
 800b4ee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b4f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4f4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	4802      	ldr	r0, [pc, #8]	; (800b504 <unready_thread+0x34>)
 800b4fa:	f004 fabf 	bl	800fa7c <z_priq_dumb_remove>
}
 800b4fe:	e7ee      	b.n	800b4de <unready_thread+0xe>
 800b500:	2000134c 	.word	0x2000134c
 800b504:	20001368 	.word	0x20001368

0800b508 <z_pend_curr>:
{
 800b508:	b510      	push	{r4, lr}
 800b50a:	460c      	mov	r4, r1
 800b50c:	4611      	mov	r1, r2
	pending_current = _current;
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <z_pend_curr+0x20>)
 800b510:	6898      	ldr	r0, [r3, #8]
 800b512:	4b06      	ldr	r3, [pc, #24]	; (800b52c <z_pend_curr+0x24>)
 800b514:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800b516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51a:	f004 fb60 	bl	800fbde <pend>
 800b51e:	4620      	mov	r0, r4
 800b520:	f7f9 fd98 	bl	8005054 <arch_swap>
}
 800b524:	bd10      	pop	{r4, pc}
 800b526:	bf00      	nop
 800b528:	2000134c 	.word	0x2000134c
 800b52c:	20001384 	.word	0x20001384

0800b530 <z_set_prio>:
{
 800b530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b534:	4604      	mov	r4, r0
 800b536:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800b538:	2300      	movs	r3, #0
	__asm__ volatile(
 800b53a:	f04f 0210 	mov.w	r2, #16
 800b53e:	f3ef 8811 	mrs	r8, BASEPRI
 800b542:	f382 8812 	msr	BASEPRI_MAX, r2
 800b546:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800b54a:	461f      	mov	r7, r3
 800b54c:	e008      	b.n	800b560 <z_set_prio+0x30>
		if (need_sched) {
 800b54e:	f012 0701 	ands.w	r7, r2, #1
 800b552:	d111      	bne.n	800b578 <z_set_prio+0x48>
			thread->base.prio = prio;
 800b554:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800b556:	f388 8811 	msr	BASEPRI, r8
 800b55a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b55e:	2301      	movs	r3, #1
 800b560:	461a      	mov	r2, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d13d      	bne.n	800b5e2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800b566:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b568:	f013 0f1f 	tst.w	r3, #31
 800b56c:	d1ef      	bne.n	800b54e <z_set_prio+0x1e>
	return node->next != NULL;
 800b56e:	69a1      	ldr	r1, [r4, #24]
 800b570:	2900      	cmp	r1, #0
 800b572:	d1ec      	bne.n	800b54e <z_set_prio+0x1e>
 800b574:	2201      	movs	r2, #1
 800b576:	e7ea      	b.n	800b54e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b57c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b57e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800b5e8 <z_set_prio+0xb8>
 800b582:	4621      	mov	r1, r4
 800b584:	4648      	mov	r0, r9
 800b586:	f004 fa79 	bl	800fa7c <z_priq_dumb_remove>
				thread->base.prio = prio;
 800b58a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800b58c:	7b63      	ldrb	r3, [r4, #13]
 800b58e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b592:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800b594:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b598:	454d      	cmp	r5, r9
 800b59a:	d020      	beq.n	800b5de <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b59c:	b16d      	cbz	r5, 800b5ba <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f004 fa2c 	bl	800f9fe <z_sched_prio_cmp>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	dc13      	bgt.n	800b5d2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b5aa:	b135      	cbz	r5, 800b5ba <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <z_set_prio+0xbc>)
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	429d      	cmp	r5, r3
 800b5b2:	d002      	beq.n	800b5ba <z_set_prio+0x8a>
 800b5b4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	d1f0      	bne.n	800b59c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800b5ba:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <z_set_prio+0xbc>)
 800b5bc:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b5be:	f103 011c 	add.w	r1, r3, #28
 800b5c2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800b5c4:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800b5c6:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800b5c8:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	f7ff fe62 	bl	800b294 <update_cache>
 800b5d0:	e7c1      	b.n	800b556 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800b5d2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800b5d4:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800b5d6:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800b5d8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800b5da:	606c      	str	r4, [r5, #4]
}
 800b5dc:	e7f5      	b.n	800b5ca <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b5de:	2500      	movs	r5, #0
 800b5e0:	e7dc      	b.n	800b59c <z_set_prio+0x6c>
}
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e8:	20001368 	.word	0x20001368
 800b5ec:	2000134c 	.word	0x2000134c

0800b5f0 <z_impl_k_thread_suspend>:
{
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800b5f4:	3018      	adds	r0, #24
 800b5f6:	f004 fc0f 	bl	800fe18 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800b5fa:	2300      	movs	r3, #0
	__asm__ volatile(
 800b5fc:	f04f 0210 	mov.w	r2, #16
 800b600:	f3ef 8511 	mrs	r5, BASEPRI
 800b604:	f382 8812 	msr	BASEPRI_MAX, r2
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	e010      	b.n	800b630 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800b60e:	7b63      	ldrb	r3, [r4, #13]
 800b610:	f043 0310 	orr.w	r3, r3, #16
 800b614:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800b616:	4b15      	ldr	r3, [pc, #84]	; (800b66c <z_impl_k_thread_suspend+0x7c>)
 800b618:	6898      	ldr	r0, [r3, #8]
 800b61a:	42a0      	cmp	r0, r4
 800b61c:	bf14      	ite	ne
 800b61e:	2000      	movne	r0, #0
 800b620:	2001      	moveq	r0, #1
 800b622:	f7ff fe37 	bl	800b294 <update_cache>
	__asm__ volatile(
 800b626:	f385 8811 	msr	BASEPRI, r5
 800b62a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b62e:	2301      	movs	r3, #1
 800b630:	b963      	cbnz	r3, 800b64c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800b632:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800b634:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	dae8      	bge.n	800b60e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b63c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b640:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b642:	4621      	mov	r1, r4
 800b644:	480a      	ldr	r0, [pc, #40]	; (800b670 <z_impl_k_thread_suspend+0x80>)
 800b646:	f004 fa19 	bl	800fa7c <z_priq_dumb_remove>
}
 800b64a:	e7e0      	b.n	800b60e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800b64c:	4b07      	ldr	r3, [pc, #28]	; (800b66c <z_impl_k_thread_suspend+0x7c>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	42a3      	cmp	r3, r4
 800b652:	d000      	beq.n	800b656 <z_impl_k_thread_suspend+0x66>
}
 800b654:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800b656:	f04f 0310 	mov.w	r3, #16
 800b65a:	f3ef 8011 	mrs	r0, BASEPRI
 800b65e:	f383 8812 	msr	BASEPRI_MAX, r3
 800b662:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800b666:	f004 f9f4 	bl	800fa52 <z_reschedule_irqlock>
 800b66a:	e7f3      	b.n	800b654 <z_impl_k_thread_suspend+0x64>
 800b66c:	2000134c 	.word	0x2000134c
 800b670:	20001368 	.word	0x20001368

0800b674 <k_sched_unlock>:

void k_sched_unlock(void)
{
 800b674:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800b676:	2300      	movs	r3, #0
 800b678:	f04f 0210 	mov.w	r2, #16
 800b67c:	f3ef 8411 	mrs	r4, BASEPRI
 800b680:	f382 8812 	msr	BASEPRI_MAX, r2
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	e00c      	b.n	800b6a4 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800b68a:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <k_sched_unlock+0x4c>)
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	7bd3      	ldrb	r3, [r2, #15]
 800b690:	3301      	adds	r3, #1
 800b692:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800b694:	2000      	movs	r0, #0
 800b696:	f7ff fdfd 	bl	800b294 <update_cache>
	__asm__ volatile(
 800b69a:	f384 8811 	msr	BASEPRI, r4
 800b69e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0f0      	beq.n	800b68a <k_sched_unlock+0x16>
	__asm__ volatile(
 800b6a8:	f04f 0310 	mov.w	r3, #16
 800b6ac:	f3ef 8011 	mrs	r0, BASEPRI
 800b6b0:	f383 8812 	msr	BASEPRI_MAX, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f004 f9cb 	bl	800fa52 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800b6bc:	bd10      	pop	{r4, pc}
 800b6be:	bf00      	nop
 800b6c0:	2000134c 	.word	0x2000134c

0800b6c4 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800b6c4:	7b43      	ldrb	r3, [r0, #13]
 800b6c6:	f013 0f08 	tst.w	r3, #8
 800b6ca:	d142      	bne.n	800b752 <end_thread+0x8e>
{
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800b6d0:	f043 0308 	orr.w	r3, r3, #8
 800b6d4:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800b6d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6da:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800b6dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6e0:	d12b      	bne.n	800b73a <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800b6e2:	68ab      	ldr	r3, [r5, #8]
 800b6e4:	b15b      	cbz	r3, 800b6fe <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f004 f987 	bl	800f9fa <pended_on_thread>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	f004 f9c5 	bl	800fa7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800b6f2:	7b6b      	ldrb	r3, [r5, #13]
 800b6f4:	f023 0302 	bic.w	r3, r3, #2
 800b6f8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60ab      	str	r3, [r5, #8]
 800b6fe:	f105 0018 	add.w	r0, r5, #24
 800b702:	f004 fb89 	bl	800fe18 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800b706:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800b708:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b70a:	42ac      	cmp	r4, r5
 800b70c:	d01d      	beq.n	800b74a <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800b70e:	b1e4      	cbz	r4, 800b74a <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b710:	4620      	mov	r0, r4
 800b712:	f004 f972 	bl	800f9fa <pended_on_thread>
 800b716:	4621      	mov	r1, r4
 800b718:	f004 f9b0 	bl	800fa7c <z_priq_dumb_remove>
 800b71c:	7b63      	ldrb	r3, [r4, #13]
 800b71e:	f023 0302 	bic.w	r3, r3, #2
 800b722:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800b724:	2600      	movs	r6, #0
 800b726:	60a6      	str	r6, [r4, #8]
 800b728:	f104 0018 	add.w	r0, r4, #24
 800b72c:	f004 fb74 	bl	800fe18 <z_abort_timeout>
 800b730:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800b732:	4620      	mov	r0, r4
 800b734:	f7ff fe6e 	bl	800b414 <ready_thread>
 800b738:	e7e6      	b.n	800b708 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b740:	4601      	mov	r1, r0
 800b742:	4804      	ldr	r0, [pc, #16]	; (800b754 <end_thread+0x90>)
 800b744:	f004 f99a 	bl	800fa7c <z_priq_dumb_remove>
}
 800b748:	e7cb      	b.n	800b6e2 <end_thread+0x1e>
		update_cache(1);
 800b74a:	2001      	movs	r0, #1
 800b74c:	f7ff fda2 	bl	800b294 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800b750:	bd70      	pop	{r4, r5, r6, pc}
 800b752:	4770      	bx	lr
 800b754:	20001368 	.word	0x20001368

0800b758 <z_sched_init>:
{
 800b758:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800b75a:	4804      	ldr	r0, [pc, #16]	; (800b76c <z_sched_init+0x14>)
 800b75c:	f004 fab3 	bl	800fcc6 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800b760:	2100      	movs	r1, #0
 800b762:	4608      	mov	r0, r1
 800b764:	f7ff fd32 	bl	800b1cc <k_sched_time_slice_set>
}
 800b768:	bd08      	pop	{r3, pc}
 800b76a:	bf00      	nop
 800b76c:	20001364 	.word	0x20001364

0800b770 <z_impl_k_yield>:
{
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	f04f 0310 	mov.w	r3, #16
 800b776:	f3ef 8611 	mrs	r6, BASEPRI
 800b77a:	f383 8812 	msr	BASEPRI_MAX, r3
 800b77e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800b782:	4c1c      	ldr	r4, [pc, #112]	; (800b7f4 <z_impl_k_yield+0x84>)
 800b784:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b786:	7b4b      	ldrb	r3, [r1, #13]
 800b788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b78c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b78e:	f104 071c 	add.w	r7, r4, #28
 800b792:	4638      	mov	r0, r7
 800b794:	f004 f972 	bl	800fa7c <z_priq_dumb_remove>
	queue_thread(_current);
 800b798:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800b79a:	7b6b      	ldrb	r3, [r5, #13]
 800b79c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800b7a2:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b7a4:	42bc      	cmp	r4, r7
 800b7a6:	d023      	beq.n	800b7f0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b7a8:	b16c      	cbz	r4, 800b7c6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f004 f926 	bl	800f9fe <z_sched_prio_cmp>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	dc16      	bgt.n	800b7e4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b7b6:	b134      	cbz	r4, 800b7c6 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	; (800b7f4 <z_impl_k_yield+0x84>)
 800b7ba:	6a1b      	ldr	r3, [r3, #32]
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d002      	beq.n	800b7c6 <z_impl_k_yield+0x56>
 800b7c0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	d1f0      	bne.n	800b7a8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <z_impl_k_yield+0x84>)
 800b7c8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b7ca:	f103 011c 	add.w	r1, r3, #28
 800b7ce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800b7d0:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800b7d2:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800b7d4:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	f7ff fd5c 	bl	800b294 <update_cache>
 800b7dc:	4630      	mov	r0, r6
 800b7de:	f7f9 fc39 	bl	8005054 <arch_swap>
}
 800b7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800b7e4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800b7e6:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800b7e8:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800b7ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800b7ec:	6065      	str	r5, [r4, #4]
}
 800b7ee:	e7f2      	b.n	800b7d6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	e7d9      	b.n	800b7a8 <z_impl_k_yield+0x38>
 800b7f4:	2000134c 	.word	0x2000134c

0800b7f8 <z_tick_sleep>:
{
 800b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800b7fc:	ea50 0301 	orrs.w	r3, r0, r1
 800b800:	d038      	beq.n	800b874 <z_tick_sleep+0x7c>
 800b802:	4604      	mov	r4, r0
 800b804:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800b806:	f06f 0301 	mvn.w	r3, #1
 800b80a:	1a1b      	subs	r3, r3, r0
 800b80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b810:	eb62 0201 	sbc.w	r2, r2, r1
 800b814:	2b01      	cmp	r3, #1
 800b816:	f172 0300 	sbcs.w	r3, r2, #0
 800b81a:	db2f      	blt.n	800b87c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800b81c:	f06f 0501 	mvn.w	r5, #1
 800b820:	1a2d      	subs	r5, r5, r0
 800b822:	f04f 0310 	mov.w	r3, #16
 800b826:	f3ef 8811 	mrs	r8, BASEPRI
 800b82a:	f383 8812 	msr	BASEPRI_MAX, r3
 800b82e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800b832:	4f14      	ldr	r7, [pc, #80]	; (800b884 <z_tick_sleep+0x8c>)
 800b834:	68b8      	ldr	r0, [r7, #8]
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <z_tick_sleep+0x90>)
 800b838:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800b83a:	f7ff fe49 	bl	800b4d0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800b83e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800b840:	4622      	mov	r2, r4
 800b842:	4633      	mov	r3, r6
 800b844:	4911      	ldr	r1, [pc, #68]	; (800b88c <z_tick_sleep+0x94>)
 800b846:	3018      	adds	r0, #24
 800b848:	f000 f8ee 	bl	800ba28 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800b84c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800b84e:	7b53      	ldrb	r3, [r2, #13]
 800b850:	f043 0310 	orr.w	r3, r3, #16
 800b854:	7353      	strb	r3, [r2, #13]
 800b856:	4640      	mov	r0, r8
 800b858:	f7f9 fbfc 	bl	8005054 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800b85c:	f004 fb3e 	bl	800fedc <sys_clock_tick_get_32>
 800b860:	1a28      	subs	r0, r5, r0
 800b862:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800b866:	2801      	cmp	r0, #1
 800b868:	f173 0300 	sbcs.w	r3, r3, #0
 800b86c:	da00      	bge.n	800b870 <z_tick_sleep+0x78>
	return 0;
 800b86e:	2000      	movs	r0, #0
}
 800b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800b874:	f7ff ff7c 	bl	800b770 <z_impl_k_yield>
		return 0;
 800b878:	2000      	movs	r0, #0
 800b87a:	e7f9      	b.n	800b870 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800b87c:	f004 fb2e 	bl	800fedc <sys_clock_tick_get_32>
 800b880:	1905      	adds	r5, r0, r4
 800b882:	e7ce      	b.n	800b822 <z_tick_sleep+0x2a>
 800b884:	2000134c 	.word	0x2000134c
 800b888:	20001384 	.word	0x20001384
 800b88c:	0800fb1b 	.word	0x0800fb1b

0800b890 <z_impl_k_sleep>:
{
 800b890:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b892:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b896:	bf08      	it	eq
 800b898:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800b89c:	d007      	beq.n	800b8ae <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800b89e:	f7ff ffab 	bl	800b7f8 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800b8a2:	220a      	movs	r2, #10
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	17c1      	asrs	r1, r0, #31
 800b8a8:	f7f5 f898 	bl	80009dc <__aeabi_uldivmod>
}
 800b8ac:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <z_impl_k_sleep+0x2c>)
 800b8b0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800b8b2:	f7ff fe9d 	bl	800b5f0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ba:	e7f7      	b.n	800b8ac <z_impl_k_sleep+0x1c>
 800b8bc:	2000134c 	.word	0x2000134c

0800b8c0 <z_impl_z_current_get>:
}
 800b8c0:	4b01      	ldr	r3, [pc, #4]	; (800b8c8 <z_impl_z_current_get+0x8>)
 800b8c2:	6898      	ldr	r0, [r3, #8]
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	2000134c 	.word	0x2000134c

0800b8cc <z_impl_k_is_preempt_thread>:
 800b8cc:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800b8d0:	b933      	cbnz	r3, 800b8e0 <z_impl_k_is_preempt_thread+0x14>
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <z_impl_k_is_preempt_thread+0x1c>)
 800b8d4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b8d6:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800b8d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b8da:	d803      	bhi.n	800b8e4 <z_impl_k_is_preempt_thread+0x18>
 800b8dc:	2001      	movs	r0, #1
 800b8de:	4770      	bx	lr
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	4770      	bx	lr
 800b8e4:	2000      	movs	r0, #0
}
 800b8e6:	4770      	bx	lr
 800b8e8:	2000134c 	.word	0x2000134c

0800b8ec <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	f04f 0310 	mov.w	r3, #16
 800b8f2:	f3ef 8511 	mrs	r5, BASEPRI
 800b8f6:	f383 8812 	msr	BASEPRI_MAX, r3
 800b8fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800b8fe:	7b43      	ldrb	r3, [r0, #13]
 800b900:	f013 0f08 	tst.w	r3, #8
 800b904:	d004      	beq.n	800b910 <z_thread_abort+0x24>
	__asm__ volatile(
 800b906:	f385 8811 	msr	BASEPRI, r5
 800b90a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	4604      	mov	r4, r0
	end_thread(thread);
 800b912:	f7ff fed7 	bl	800b6c4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800b916:	4b08      	ldr	r3, [pc, #32]	; (800b938 <z_thread_abort+0x4c>)
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	42a3      	cmp	r3, r4
 800b91c:	d004      	beq.n	800b928 <z_thread_abort+0x3c>
 800b91e:	f385 8811 	msr	BASEPRI, r5
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	e7f2      	b.n	800b90e <z_thread_abort+0x22>
 800b928:	f3ef 8305 	mrs	r3, IPSR
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f6      	bne.n	800b91e <z_thread_abort+0x32>
 800b930:	4628      	mov	r0, r5
 800b932:	f7f9 fb8f 	bl	8005054 <arch_swap>
	return ret;
 800b936:	e7f2      	b.n	800b91e <z_thread_abort+0x32>
 800b938:	2000134c 	.word	0x2000134c

0800b93c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800b93c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800b940:	b083      	sub	sp, #12
 800b942:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800b944:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800b948:	e9cd bc00 	strd	fp, ip, [sp]
 800b94c:	f7ff fddc 	bl	800b508 <z_pend_curr>

	if (data != NULL) {
 800b950:	b11c      	cbz	r4, 800b95a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800b952:	4b03      	ldr	r3, [pc, #12]	; (800b960 <z_sched_wait+0x24>)
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800b95a:	b003      	add	sp, #12
 800b95c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800b960:	2000134c 	.word	0x2000134c

0800b964 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800b964:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800b966:	4806      	ldr	r0, [pc, #24]	; (800b980 <z_data_copy+0x1c>)
 800b968:	4a06      	ldr	r2, [pc, #24]	; (800b984 <z_data_copy+0x20>)
 800b96a:	1a12      	subs	r2, r2, r0
 800b96c:	4906      	ldr	r1, [pc, #24]	; (800b988 <z_data_copy+0x24>)
 800b96e:	f004 fb6c 	bl	801004a <memcpy>
 800b972:	4a06      	ldr	r2, [pc, #24]	; (800b98c <z_data_copy+0x28>)
 800b974:	4906      	ldr	r1, [pc, #24]	; (800b990 <z_data_copy+0x2c>)
 800b976:	4807      	ldr	r0, [pc, #28]	; (800b994 <z_data_copy+0x30>)
 800b978:	f004 fb67 	bl	801004a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800b97c:	bd08      	pop	{r3, pc}
 800b97e:	bf00      	nop
 800b980:	20000000 	.word	0x20000000
 800b984:	200004bc 	.word	0x200004bc
 800b988:	0801247c 	.word	0x0801247c
 800b98c:	00000000 	.word	0x00000000
 800b990:	0801247c 	.word	0x0801247c
 800b994:	20000000 	.word	0x20000000

0800b998 <first>:
	return list->head == list;
 800b998:	4b03      	ldr	r3, [pc, #12]	; (800b9a8 <first+0x10>)
 800b99a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b99c:	4298      	cmp	r0, r3
 800b99e:	d000      	beq.n	800b9a2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800b9a0:	4770      	bx	lr
 800b9a2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800b9a4:	e7fc      	b.n	800b9a0 <first+0x8>
 800b9a6:	bf00      	nop
 800b9a8:	200000c4 	.word	0x200000c4

0800b9ac <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b9ac:	b130      	cbz	r0, 800b9bc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800b9ae:	4a04      	ldr	r2, [pc, #16]	; (800b9c0 <next+0x14>)
 800b9b0:	6852      	ldr	r2, [r2, #4]
 800b9b2:	4290      	cmp	r0, r2
 800b9b4:	d001      	beq.n	800b9ba <next+0xe>
 800b9b6:	6800      	ldr	r0, [r0, #0]
 800b9b8:	4770      	bx	lr
 800b9ba:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	200000c4 	.word	0x200000c4

0800b9c4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800b9c4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b9c6:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <elapsed+0x14>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	b10b      	cbz	r3, 800b9d0 <elapsed+0xc>
 800b9cc:	2000      	movs	r0, #0
}
 800b9ce:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b9d0:	f7fe f8f8 	bl	8009bc4 <sys_clock_elapsed>
 800b9d4:	e7fb      	b.n	800b9ce <elapsed+0xa>
 800b9d6:	bf00      	nop
 800b9d8:	20001394 	.word	0x20001394

0800b9dc <next_timeout>:

static int32_t next_timeout(void)
{
 800b9dc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800b9de:	f7ff ffdb 	bl	800b998 <first>
 800b9e2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800b9e4:	f7ff ffee 	bl	800b9c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800b9e8:	b17c      	cbz	r4, 800ba0a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	6962      	ldr	r2, [r4, #20]
 800b9ee:	1a1b      	subs	r3, r3, r0
 800b9f0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800b9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f8:	f170 0200 	sbcs.w	r2, r0, #0
 800b9fc:	da08      	bge.n	800ba10 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	db01      	blt.n	800ba06 <next_timeout+0x2a>
 800ba02:	4618      	mov	r0, r3
 800ba04:	e006      	b.n	800ba14 <next_timeout+0x38>
 800ba06:	2300      	movs	r3, #0
 800ba08:	e7fb      	b.n	800ba02 <next_timeout+0x26>
		ret = MAX_WAIT;
 800ba0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ba0e:	e001      	b.n	800ba14 <next_timeout+0x38>
 800ba10:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800ba14:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <next_timeout+0x48>)
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	b113      	cbz	r3, 800ba20 <next_timeout+0x44>
 800ba1a:	4283      	cmp	r3, r0
 800ba1c:	da00      	bge.n	800ba20 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800ba1e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	bf00      	nop
 800ba24:	2000134c 	.word	0x2000134c

0800ba28 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800ba28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba2c:	bf08      	it	eq
 800ba2e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800ba32:	d07d      	beq.n	800bb30 <z_add_timeout+0x108>
{
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	4604      	mov	r4, r0
 800ba3a:	4692      	mov	sl, r2
 800ba3c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800ba3e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800ba40:	2300      	movs	r3, #0
	__asm__ volatile(
 800ba42:	f04f 0210 	mov.w	r2, #16
 800ba46:	f3ef 8711 	mrs	r7, BASEPRI
 800ba4a:	f382 8812 	msr	BASEPRI_MAX, r2
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	e021      	b.n	800ba98 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800ba54:	f11a 0801 	adds.w	r8, sl, #1
 800ba58:	f145 0900 	adc.w	r9, r5, #0
 800ba5c:	f7ff ffb2 	bl	800b9c4 <elapsed>
 800ba60:	eb18 0300 	adds.w	r3, r8, r0
 800ba64:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800ba68:	6123      	str	r3, [r4, #16]
 800ba6a:	6160      	str	r0, [r4, #20]
 800ba6c:	e036      	b.n	800badc <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800ba6e:	1a51      	subs	r1, r2, r1
 800ba70:	eb66 0303 	sbc.w	r3, r6, r3
 800ba74:	6101      	str	r1, [r0, #16]
 800ba76:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800ba78:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800ba7a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800ba7c:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800ba7e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800ba80:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d03e      	beq.n	800bb04 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800ba86:	f7ff ff87 	bl	800b998 <first>
 800ba8a:	4284      	cmp	r4, r0
 800ba8c:	d041      	beq.n	800bb12 <z_add_timeout+0xea>
	__asm__ volatile(
 800ba8e:	f387 8811 	msr	BASEPRI, r7
 800ba92:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800ba96:	2301      	movs	r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d147      	bne.n	800bb2c <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800ba9c:	4653      	mov	r3, sl
 800ba9e:	f06f 0101 	mvn.w	r1, #1
 800baa2:	ebb1 010a 	subs.w	r1, r1, sl
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baaa:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800baae:	2a00      	cmp	r2, #0
 800bab0:	dbd0      	blt.n	800ba54 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800bab2:	4a20      	ldr	r2, [pc, #128]	; (800bb34 <z_add_timeout+0x10c>)
 800bab4:	6811      	ldr	r1, [r2, #0]
 800bab6:	6852      	ldr	r2, [r2, #4]
 800bab8:	185b      	adds	r3, r3, r1
 800baba:	eb42 0205 	adc.w	r2, r2, r5
 800babe:	f06f 0101 	mvn.w	r1, #1
 800bac2:	1acb      	subs	r3, r1, r3
 800bac4:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800bac8:	4618      	mov	r0, r3
 800baca:	4611      	mov	r1, r2
 800bacc:	2b01      	cmp	r3, #1
 800bace:	f172 0300 	sbcs.w	r3, r2, #0
 800bad2:	da01      	bge.n	800bad8 <z_add_timeout+0xb0>
 800bad4:	2001      	movs	r0, #1
 800bad6:	2100      	movs	r1, #0
 800bad8:	6120      	str	r0, [r4, #16]
 800bada:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800badc:	f7ff ff5c 	bl	800b998 <first>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d0ce      	beq.n	800ba82 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800bae4:	6902      	ldr	r2, [r0, #16]
 800bae6:	6946      	ldr	r6, [r0, #20]
 800bae8:	6921      	ldr	r1, [r4, #16]
 800baea:	6963      	ldr	r3, [r4, #20]
 800baec:	4291      	cmp	r1, r2
 800baee:	eb73 0c06 	sbcs.w	ip, r3, r6
 800baf2:	dbbc      	blt.n	800ba6e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800baf4:	1a89      	subs	r1, r1, r2
 800baf6:	eb63 0306 	sbc.w	r3, r3, r6
 800bafa:	6121      	str	r1, [r4, #16]
 800bafc:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800bafe:	f7ff ff55 	bl	800b9ac <next>
 800bb02:	e7ed      	b.n	800bae0 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <z_add_timeout+0x110>)
 800bb06:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800bb08:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800bb0a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800bb0c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800bb0e:	605c      	str	r4, [r3, #4]
}
 800bb10:	e7b9      	b.n	800ba86 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800bb12:	f7ff ff63 	bl	800b9dc <next_timeout>

			if (next_time == 0 ||
 800bb16:	4603      	mov	r3, r0
 800bb18:	b118      	cbz	r0, 800bb22 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800bb1a:	4a08      	ldr	r2, [pc, #32]	; (800bb3c <z_add_timeout+0x114>)
 800bb1c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800bb1e:	4282      	cmp	r2, r0
 800bb20:	d0b5      	beq.n	800ba8e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fd ffcb 	bl	8009ac0 <sys_clock_set_timeout>
 800bb2a:	e7b0      	b.n	800ba8e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20000bc0 	.word	0x20000bc0
 800bb38:	200000c4 	.word	0x200000c4
 800bb3c:	2000134c 	.word	0x2000134c

0800bb40 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800bb44:	f7ff fc10 	bl	800b368 <z_time_slice>
	__asm__ volatile(
 800bb48:	f04f 0310 	mov.w	r3, #16
 800bb4c:	f3ef 8511 	mrs	r5, BASEPRI
 800bb50:	f383 8812 	msr	BASEPRI_MAX, r3
 800bb54:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800bb58:	4b28      	ldr	r3, [pc, #160]	; (800bbfc <sys_clock_announce+0xbc>)
 800bb5a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800bb5c:	e020      	b.n	800bba0 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800bb5e:	4828      	ldr	r0, [pc, #160]	; (800bc00 <sys_clock_announce+0xc0>)
 800bb60:	6801      	ldr	r1, [r0, #0]
 800bb62:	6846      	ldr	r6, [r0, #4]
 800bb64:	1889      	adds	r1, r1, r2
 800bb66:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800bb6a:	6001      	str	r1, [r0, #0]
 800bb6c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800bb6e:	1a9b      	subs	r3, r3, r2
 800bb70:	4a22      	ldr	r2, [pc, #136]	; (800bbfc <sys_clock_announce+0xbc>)
 800bb72:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800bb74:	2200      	movs	r2, #0
 800bb76:	2300      	movs	r3, #0
 800bb78:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f004 f916 	bl	800fdae <remove_timeout>
	__asm__ volatile(
 800bb82:	f385 8811 	msr	BASEPRI, r5
 800bb86:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4798      	blx	r3
	__asm__ volatile(
 800bb90:	f04f 0310 	mov.w	r3, #16
 800bb94:	f3ef 8511 	mrs	r5, BASEPRI
 800bb98:	f383 8812 	msr	BASEPRI_MAX, r3
 800bb9c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800bba0:	f7ff fefa 	bl	800b998 <first>
 800bba4:	4604      	mov	r4, r0
 800bba6:	b140      	cbz	r0, 800bbba <sys_clock_announce+0x7a>
 800bba8:	6902      	ldr	r2, [r0, #16]
 800bbaa:	6941      	ldr	r1, [r0, #20]
 800bbac:	4b13      	ldr	r3, [pc, #76]	; (800bbfc <sys_clock_announce+0xbc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	17d8      	asrs	r0, r3, #31
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	eb70 0101 	sbcs.w	r1, r0, r1
 800bbb8:	dad1      	bge.n	800bb5e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800bbba:	b144      	cbz	r4, 800bbce <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800bbbc:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <sys_clock_announce+0xbc>)
 800bbbe:	6819      	ldr	r1, [r3, #0]
 800bbc0:	6923      	ldr	r3, [r4, #16]
 800bbc2:	6962      	ldr	r2, [r4, #20]
 800bbc4:	1a5b      	subs	r3, r3, r1
 800bbc6:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800bbca:	6123      	str	r3, [r4, #16]
 800bbcc:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800bbce:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <sys_clock_announce+0xc0>)
 800bbd0:	4e0a      	ldr	r6, [pc, #40]	; (800bbfc <sys_clock_announce+0xbc>)
 800bbd2:	6830      	ldr	r0, [r6, #0]
 800bbd4:	6813      	ldr	r3, [r2, #0]
 800bbd6:	6851      	ldr	r1, [r2, #4]
 800bbd8:	181b      	adds	r3, r3, r0
 800bbda:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800bbe2:	2400      	movs	r4, #0
 800bbe4:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800bbe6:	f7ff fef9 	bl	800b9dc <next_timeout>
 800bbea:	4621      	mov	r1, r4
 800bbec:	f7fd ff68 	bl	8009ac0 <sys_clock_set_timeout>
	__asm__ volatile(
 800bbf0:	f385 8811 	msr	BASEPRI, r5
 800bbf4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20001394 	.word	0x20001394
 800bc00:	20000bc0 	.word	0x20000bc0

0800bc04 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800bc04:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800bc06:	2300      	movs	r3, #0
	__asm__ volatile(
 800bc08:	f04f 0210 	mov.w	r2, #16
 800bc0c:	f3ef 8411 	mrs	r4, BASEPRI
 800bc10:	f382 8812 	msr	BASEPRI_MAX, r2
 800bc14:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800bc18:	4618      	mov	r0, r3
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	e00c      	b.n	800bc38 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800bc1e:	f7fd ffd1 	bl	8009bc4 <sys_clock_elapsed>
 800bc22:	4a07      	ldr	r2, [pc, #28]	; (800bc40 <sys_clock_tick_get+0x3c>)
 800bc24:	6813      	ldr	r3, [r2, #0]
 800bc26:	6851      	ldr	r1, [r2, #4]
 800bc28:	18c0      	adds	r0, r0, r3
 800bc2a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800bc2e:	f384 8811 	msr	BASEPRI, r4
 800bc32:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800bc36:	2301      	movs	r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0f0      	beq.n	800bc1e <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800bc3c:	bd10      	pop	{r4, pc}
 800bc3e:	bf00      	nop
 800bc40:	20000bc0 	.word	0x20000bc0

0800bc44 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800bc44:	b900      	cbnz	r0, 800bc48 <z_impl_k_busy_wait+0x4>
 800bc46:	4770      	bx	lr
{
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800bc4c:	f7fd ffda 	bl	8009c04 <sys_clock_cycle_get_32>
 800bc50:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800bc52:	4907      	ldr	r1, [pc, #28]	; (800bc70 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800bc54:	4a07      	ldr	r2, [pc, #28]	; (800bc74 <z_impl_k_busy_wait+0x30>)
 800bc56:	2300      	movs	r3, #0
 800bc58:	fba4 0101 	umull	r0, r1, r4, r1
 800bc5c:	f7f4 febe 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800bc60:	4604      	mov	r4, r0
 800bc62:	f7fd ffcf 	bl	8009c04 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800bc66:	1b40      	subs	r0, r0, r5
 800bc68:	42a0      	cmp	r0, r4
 800bc6a:	d3fa      	bcc.n	800bc62 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800bc6c:	bd38      	pop	{r3, r4, r5, pc}
 800bc6e:	bf00      	nop
 800bc70:	04c4b400 	.word	0x04c4b400
 800bc74:	000f4240 	.word	0x000f4240

0800bc78 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4604      	mov	r4, r0
	__asm__ volatile(
 800bc7c:	f04f 0310 	mov.w	r3, #16
 800bc80:	f3ef 8611 	mrs	r6, BASEPRI
 800bc84:	f383 8812 	msr	BASEPRI_MAX, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800bc8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bc90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bc92:	ea52 0103 	orrs.w	r1, r2, r3
 800bc96:	d005      	beq.n	800bca4 <z_timer_expiration_handler+0x2c>
 800bc98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc9c:	bf08      	it	eq
 800bc9e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800bca2:	d126      	bne.n	800bcf2 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800bca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bca6:	3301      	adds	r3, #1
 800bca8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800bcaa:	6a23      	ldr	r3, [r4, #32]
 800bcac:	b173      	cbz	r3, 800bccc <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800bcae:	f386 8811 	msr	BASEPRI, r6
 800bcb2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800bcb6:	6a23      	ldr	r3, [r4, #32]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4798      	blx	r3
	__asm__ volatile(
 800bcbc:	f04f 0310 	mov.w	r3, #16
 800bcc0:	f3ef 8511 	mrs	r5, BASEPRI
 800bcc4:	f383 8812 	msr	BASEPRI_MAX, r3
 800bcc8:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800bccc:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800bcd0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	d013      	beq.n	800bcfe <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800bcd6:	b194      	cbz	r4, 800bcfe <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f003 fe9a 	bl	800fa12 <z_unpend_thread_no_timeout>
 800bcde:	2300      	movs	r3, #0
 800bce0:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800bce2:	f385 8811 	msr	BASEPRI, r5
 800bce6:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800bcea:	4620      	mov	r0, r4
 800bcec:	f003 fef9 	bl	800fae2 <z_ready_thread>
}
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800bcf2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800bcf6:	4904      	ldr	r1, [pc, #16]	; (800bd08 <z_timer_expiration_handler+0x90>)
 800bcf8:	f7ff fe96 	bl	800ba28 <z_add_timeout>
 800bcfc:	e7d2      	b.n	800bca4 <z_timer_expiration_handler+0x2c>
 800bcfe:	f385 8811 	msr	BASEPRI, r5
 800bd02:	f3bf 8f6f 	isb	sy
		return;
 800bd06:	e7f3      	b.n	800bcf0 <z_timer_expiration_handler+0x78>
 800bd08:	0800bc79 	.word	0x0800bc79

0800bd0c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd10:	9f06      	ldr	r7, [sp, #24]
 800bd12:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd1a:	bf08      	it	eq
 800bd1c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800bd20:	d02f      	beq.n	800bd82 <z_impl_k_timer_start+0x76>
 800bd22:	4605      	mov	r5, r0
 800bd24:	4614      	mov	r4, r2
 800bd26:	461e      	mov	r6, r3
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800bd2c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800bd30:	bf08      	it	eq
 800bd32:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800bd36:	d00d      	beq.n	800bd54 <z_impl_k_timer_start+0x48>
 800bd38:	ea57 0c08 	orrs.w	ip, r7, r8
 800bd3c:	d00a      	beq.n	800bd54 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800bd3e:	f06f 0c01 	mvn.w	ip, #1
 800bd42:	ebbc 0c07 	subs.w	ip, ip, r7
 800bd46:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bd4a:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800bd4e:	f1bc 0f00 	cmp.w	ip, #0
 800bd52:	db18      	blt.n	800bd86 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800bd54:	f06f 0301 	mvn.w	r3, #1
 800bd58:	1a5b      	subs	r3, r3, r1
 800bd5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd5e:	eb63 0300 	sbc.w	r3, r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	db1a      	blt.n	800bd9c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800bd66:	4628      	mov	r0, r5
 800bd68:	f004 f856 	bl	800fe18 <z_abort_timeout>
	timer->period = period;
 800bd6c:	62af      	str	r7, [r5, #40]	; 0x28
 800bd6e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800bd76:	4622      	mov	r2, r4
 800bd78:	4633      	mov	r3, r6
 800bd7a:	490e      	ldr	r1, [pc, #56]	; (800bdb4 <z_impl_k_timer_start+0xa8>)
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f7ff fe53 	bl	800ba28 <z_add_timeout>
		     duration);
}
 800bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800bd86:	2f02      	cmp	r7, #2
 800bd88:	f178 0300 	sbcs.w	r3, r8, #0
 800bd8c:	da02      	bge.n	800bd94 <z_impl_k_timer_start+0x88>
 800bd8e:	2702      	movs	r7, #2
 800bd90:	f04f 0800 	mov.w	r8, #0
 800bd94:	3f01      	subs	r7, #1
 800bd96:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800bd9a:	e7db      	b.n	800bd54 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	4606      	mov	r6, r0
 800bda0:	2901      	cmp	r1, #1
 800bda2:	f170 0300 	sbcs.w	r3, r0, #0
 800bda6:	da01      	bge.n	800bdac <z_impl_k_timer_start+0xa0>
 800bda8:	2401      	movs	r4, #1
 800bdaa:	2600      	movs	r6, #0
 800bdac:	3c01      	subs	r4, #1
 800bdae:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800bdb2:	e7d8      	b.n	800bd66 <z_impl_k_timer_start+0x5a>
 800bdb4:	0800bc79 	.word	0x0800bc79

0800bdb8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	b087      	sub	sp, #28
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	460f      	mov	r7, r1
 800bdc2:	4693      	mov	fp, r2
 800bdc4:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800bdc6:	2500      	movs	r5, #0
	int events_registered = 0;
 800bdc8:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800bdca:	e02f      	b.n	800be2c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	b1cb      	cbz	r3, 800be06 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800bdd2:	f04f 0902 	mov.w	r9, #2
			return true;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e015      	b.n	800be06 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800bdda:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	b193      	cbz	r3, 800be06 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800bde0:	f04f 0904 	mov.w	r9, #4
			return true;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e00e      	b.n	800be06 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	b15b      	cbz	r3, 800be06 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800bdee:	f04f 0901 	mov.w	r9, #1
			return true;
 800bdf2:	464b      	mov	r3, r9
 800bdf4:	e007      	b.n	800be06 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfa:	b123      	cbz	r3, 800be06 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800bdfc:	f04f 0910 	mov.w	r9, #16
			return true;
 800be00:	2301      	movs	r3, #1
 800be02:	e000      	b.n	800be06 <register_events+0x4e>
	switch (event->type) {
 800be04:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800be06:	2b00      	cmp	r3, #0
 800be08:	d03a      	beq.n	800be80 <register_events+0xc8>
	event->poller = NULL;
 800be0a:	2100      	movs	r1, #0
 800be0c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800be0e:	68e3      	ldr	r3, [r4, #12]
 800be10:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800be14:	ea49 0202 	orr.w	r2, r9, r2
 800be18:	f362 3352 	bfi	r3, r2, #13, #6
 800be1c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800be1e:	f88b 1000 	strb.w	r1, [fp]
 800be22:	f386 8811 	msr	BASEPRI, r6
 800be26:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800be2a:	3501      	adds	r5, #1
 800be2c:	42bd      	cmp	r5, r7
 800be2e:	f280 81b9 	bge.w	800c1a4 <register_events+0x3ec>
	__asm__ volatile(
 800be32:	f04f 0310 	mov.w	r3, #16
 800be36:	f3ef 8611 	mrs	r6, BASEPRI
 800be3a:	f383 8812 	msr	BASEPRI_MAX, r3
 800be3e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800be42:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800be46:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800be4a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800be4e:	7b63      	ldrb	r3, [r4, #13]
 800be50:	f003 031f 	and.w	r3, r3, #31
 800be54:	3b01      	subs	r3, #1
 800be56:	2b07      	cmp	r3, #7
 800be58:	d8d4      	bhi.n	800be04 <register_events+0x4c>
 800be5a:	a201      	add	r2, pc, #4	; (adr r2, 800be60 <register_events+0xa8>)
 800be5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be60:	0800bde9 	.word	0x0800bde9
 800be64:	0800bdcd 	.word	0x0800bdcd
 800be68:	0800be05 	.word	0x0800be05
 800be6c:	0800bddb 	.word	0x0800bddb
 800be70:	0800be05 	.word	0x0800be05
 800be74:	0800be05 	.word	0x0800be05
 800be78:	0800be05 	.word	0x0800be05
 800be7c:	0800bdf7 	.word	0x0800bdf7
		} else if (!just_check && poller->is_polling) {
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1cd      	bne.n	800be22 <register_events+0x6a>
 800be86:	f89b 3000 	ldrb.w	r3, [fp]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0c9      	beq.n	800be22 <register_events+0x6a>
	switch (event->type) {
 800be8e:	7b63      	ldrb	r3, [r4, #13]
 800be90:	f003 031f 	and.w	r3, r3, #31
 800be94:	3b01      	subs	r3, #1
 800be96:	2b07      	cmp	r3, #7
 800be98:	d848      	bhi.n	800bf2c <register_events+0x174>
 800be9a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800be9e:	00cb      	.short	0x00cb
 800bea0:	00470008 	.word	0x00470008
 800bea4:	0047006d 	.word	0x0047006d
 800bea8:	00470047 	.word	0x00470047
 800beac:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	f103 0210 	add.w	r2, r3, #16
 800beb6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800beb8:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800beba:	429a      	cmp	r2, r3
 800bebc:	d02f      	beq.n	800bf1e <register_events+0x166>
 800bebe:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d02c      	beq.n	800bf1e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bec4:	6898      	ldr	r0, [r3, #8]
 800bec6:	f004 f838 	bl	800ff3a <poller_thread>
 800beca:	9005      	str	r0, [sp, #20]
 800becc:	4658      	mov	r0, fp
 800bece:	f004 f834 	bl	800ff3a <poller_thread>
 800bed2:	4601      	mov	r1, r0
 800bed4:	9003      	str	r0, [sp, #12]
 800bed6:	9805      	ldr	r0, [sp, #20]
 800bed8:	f003 fd91 	bl	800f9fe <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800bedc:	2800      	cmp	r0, #0
 800bede:	dc1e      	bgt.n	800bf1e <register_events+0x166>
	return list->head == list;
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bee4:	9a02      	ldr	r2, [sp, #8]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d030      	beq.n	800bf4c <register_events+0x194>
 800beea:	9404      	str	r4, [sp, #16]
 800beec:	9505      	str	r5, [sp, #20]
 800beee:	9d02      	ldr	r5, [sp, #8]
 800bef0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	d030      	beq.n	800bf58 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bef6:	68a0      	ldr	r0, [r4, #8]
 800bef8:	f004 f81f 	bl	800ff3a <poller_thread>
 800befc:	4601      	mov	r1, r0
 800befe:	9803      	ldr	r0, [sp, #12]
 800bf00:	f003 fd7d 	bl	800f9fe <z_sched_prio_cmp>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	dc17      	bgt.n	800bf38 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bf08:	2c00      	cmp	r4, #0
 800bf0a:	d028      	beq.n	800bf5e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800bf0c:	686b      	ldr	r3, [r5, #4]
 800bf0e:	429c      	cmp	r4, r3
 800bf10:	d02f      	beq.n	800bf72 <register_events+0x1ba>
 800bf12:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	d1ec      	bne.n	800bef2 <register_events+0x13a>
 800bf18:	9c04      	ldr	r4, [sp, #16]
 800bf1a:	9d05      	ldr	r5, [sp, #20]
 800bf1c:	e021      	b.n	800bf62 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800bf1e:	9a02      	ldr	r2, [sp, #8]
 800bf20:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800bf22:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800bf26:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800bf28:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bf2a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800bf2c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	3301      	adds	r3, #1
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	e774      	b.n	800be22 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800bf38:	9d05      	ldr	r5, [sp, #20]
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	9c04      	ldr	r4, [sp, #16]
 800bf3e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800bf40:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800bf42:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800bf46:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800bf48:	6054      	str	r4, [r2, #4]
			return;
 800bf4a:	e7ef      	b.n	800bf2c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9404      	str	r4, [sp, #16]
 800bf50:	9505      	str	r5, [sp, #20]
 800bf52:	9d02      	ldr	r5, [sp, #8]
 800bf54:	461c      	mov	r4, r3
 800bf56:	e7cc      	b.n	800bef2 <register_events+0x13a>
 800bf58:	9c04      	ldr	r4, [sp, #16]
 800bf5a:	9d05      	ldr	r5, [sp, #20]
 800bf5c:	e001      	b.n	800bf62 <register_events+0x1aa>
 800bf5e:	9c04      	ldr	r4, [sp, #16]
 800bf60:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800bf62:	9a02      	ldr	r2, [sp, #8]
 800bf64:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800bf66:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800bf6a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800bf6c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bf6e:	6054      	str	r4, [r2, #4]
}
 800bf70:	e7dc      	b.n	800bf2c <register_events+0x174>
 800bf72:	9c04      	ldr	r4, [sp, #16]
 800bf74:	9d05      	ldr	r5, [sp, #20]
 800bf76:	e7f4      	b.n	800bf62 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800bf78:	6923      	ldr	r3, [r4, #16]
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f103 0214 	add.w	r2, r3, #20
 800bf80:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800bf82:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d02d      	beq.n	800bfe4 <register_events+0x22c>
 800bf88:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800bf8a:	b35b      	cbz	r3, 800bfe4 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bf8c:	6898      	ldr	r0, [r3, #8]
 800bf8e:	f003 ffd4 	bl	800ff3a <poller_thread>
 800bf92:	9005      	str	r0, [sp, #20]
 800bf94:	4658      	mov	r0, fp
 800bf96:	f003 ffd0 	bl	800ff3a <poller_thread>
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	9003      	str	r0, [sp, #12]
 800bf9e:	9805      	ldr	r0, [sp, #20]
 800bfa0:	f003 fd2d 	bl	800f9fe <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	dc1d      	bgt.n	800bfe4 <register_events+0x22c>
	return list->head == list;
 800bfa8:	9b04      	ldr	r3, [sp, #16]
 800bfaa:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bfac:	9a02      	ldr	r2, [sp, #8]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d02a      	beq.n	800c008 <register_events+0x250>
 800bfb2:	9404      	str	r4, [sp, #16]
 800bfb4:	9505      	str	r5, [sp, #20]
 800bfb6:	9d02      	ldr	r5, [sp, #8]
 800bfb8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d02a      	beq.n	800c014 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bfbe:	68a0      	ldr	r0, [r4, #8]
 800bfc0:	f003 ffbb 	bl	800ff3a <poller_thread>
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	9803      	ldr	r0, [sp, #12]
 800bfc8:	f003 fd19 	bl	800f9fe <z_sched_prio_cmp>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	dc11      	bgt.n	800bff4 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bfd0:	b31c      	cbz	r4, 800c01a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800bfd2:	686b      	ldr	r3, [r5, #4]
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	d02a      	beq.n	800c02e <register_events+0x276>
 800bfd8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d1ed      	bne.n	800bfba <register_events+0x202>
 800bfde:	9c04      	ldr	r4, [sp, #16]
 800bfe0:	9d05      	ldr	r5, [sp, #20]
 800bfe2:	e01c      	b.n	800c01e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800bfe4:	9a02      	ldr	r2, [sp, #8]
 800bfe6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800bfe8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800bfec:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800bfee:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bff0:	6054      	str	r4, [r2, #4]
		return;
 800bff2:	e79b      	b.n	800bf2c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800bff4:	9d05      	ldr	r5, [sp, #20]
 800bff6:	4622      	mov	r2, r4
 800bff8:	9c04      	ldr	r4, [sp, #16]
 800bffa:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800bffc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800bffe:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c002:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c004:	6054      	str	r4, [r2, #4]
			return;
 800c006:	e791      	b.n	800bf2c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c008:	2300      	movs	r3, #0
 800c00a:	9404      	str	r4, [sp, #16]
 800c00c:	9505      	str	r5, [sp, #20]
 800c00e:	9d02      	ldr	r5, [sp, #8]
 800c010:	461c      	mov	r4, r3
 800c012:	e7d2      	b.n	800bfba <register_events+0x202>
 800c014:	9c04      	ldr	r4, [sp, #16]
 800c016:	9d05      	ldr	r5, [sp, #20]
 800c018:	e001      	b.n	800c01e <register_events+0x266>
 800c01a:	9c04      	ldr	r4, [sp, #16]
 800c01c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c01e:	9a02      	ldr	r2, [sp, #8]
 800c020:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c022:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c026:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c028:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c02a:	6054      	str	r4, [r2, #4]
}
 800c02c:	e77e      	b.n	800bf2c <register_events+0x174>
 800c02e:	9c04      	ldr	r4, [sp, #16]
 800c030:	9d05      	ldr	r5, [sp, #20]
 800c032:	e7f4      	b.n	800c01e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800c034:	6922      	ldr	r2, [r4, #16]
 800c036:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c038:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d02c      	beq.n	800c098 <register_events+0x2e0>
 800c03e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c040:	b353      	cbz	r3, 800c098 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c042:	6898      	ldr	r0, [r3, #8]
 800c044:	f003 ff79 	bl	800ff3a <poller_thread>
 800c048:	9004      	str	r0, [sp, #16]
 800c04a:	4658      	mov	r0, fp
 800c04c:	f003 ff75 	bl	800ff3a <poller_thread>
 800c050:	4601      	mov	r1, r0
 800c052:	9003      	str	r0, [sp, #12]
 800c054:	9804      	ldr	r0, [sp, #16]
 800c056:	f003 fcd2 	bl	800f9fe <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c05a:	2800      	cmp	r0, #0
 800c05c:	dc1c      	bgt.n	800c098 <register_events+0x2e0>
	return list->head == list;
 800c05e:	9b02      	ldr	r3, [sp, #8]
 800c060:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c062:	4293      	cmp	r3, r2
 800c064:	d02a      	beq.n	800c0bc <register_events+0x304>
 800c066:	9404      	str	r4, [sp, #16]
 800c068:	9505      	str	r5, [sp, #20]
 800c06a:	9d02      	ldr	r5, [sp, #8]
 800c06c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c06e:	2c00      	cmp	r4, #0
 800c070:	d02a      	beq.n	800c0c8 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c072:	68a0      	ldr	r0, [r4, #8]
 800c074:	f003 ff61 	bl	800ff3a <poller_thread>
 800c078:	4601      	mov	r1, r0
 800c07a:	9803      	ldr	r0, [sp, #12]
 800c07c:	f003 fcbf 	bl	800f9fe <z_sched_prio_cmp>
 800c080:	2800      	cmp	r0, #0
 800c082:	dc11      	bgt.n	800c0a8 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c084:	b31c      	cbz	r4, 800c0ce <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800c086:	686b      	ldr	r3, [r5, #4]
 800c088:	429c      	cmp	r4, r3
 800c08a:	d02a      	beq.n	800c0e2 <register_events+0x32a>
 800c08c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c08e:	2c00      	cmp	r4, #0
 800c090:	d1ed      	bne.n	800c06e <register_events+0x2b6>
 800c092:	9c04      	ldr	r4, [sp, #16]
 800c094:	9d05      	ldr	r5, [sp, #20]
 800c096:	e01c      	b.n	800c0d2 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800c098:	9a02      	ldr	r2, [sp, #8]
 800c09a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c09c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c0a0:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c0a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c0a4:	6054      	str	r4, [r2, #4]
		return;
 800c0a6:	e741      	b.n	800bf2c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c0a8:	9d05      	ldr	r5, [sp, #20]
 800c0aa:	4622      	mov	r2, r4
 800c0ac:	9c04      	ldr	r4, [sp, #16]
 800c0ae:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c0b0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c0b2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c0b6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c0b8:	6054      	str	r4, [r2, #4]
			return;
 800c0ba:	e737      	b.n	800bf2c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9404      	str	r4, [sp, #16]
 800c0c0:	9505      	str	r5, [sp, #20]
 800c0c2:	9d02      	ldr	r5, [sp, #8]
 800c0c4:	461c      	mov	r4, r3
 800c0c6:	e7d2      	b.n	800c06e <register_events+0x2b6>
 800c0c8:	9c04      	ldr	r4, [sp, #16]
 800c0ca:	9d05      	ldr	r5, [sp, #20]
 800c0cc:	e001      	b.n	800c0d2 <register_events+0x31a>
 800c0ce:	9c04      	ldr	r4, [sp, #16]
 800c0d0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c0d2:	9a02      	ldr	r2, [sp, #8]
 800c0d4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c0d6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c0da:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c0dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c0de:	6054      	str	r4, [r2, #4]
}
 800c0e0:	e724      	b.n	800bf2c <register_events+0x174>
 800c0e2:	9c04      	ldr	r4, [sp, #16]
 800c0e4:	9d05      	ldr	r5, [sp, #20]
 800c0e6:	e7f4      	b.n	800c0d2 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c0f0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d02d      	beq.n	800c154 <register_events+0x39c>
 800c0f8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c0fa:	b35b      	cbz	r3, 800c154 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c0fc:	6898      	ldr	r0, [r3, #8]
 800c0fe:	f003 ff1c 	bl	800ff3a <poller_thread>
 800c102:	9005      	str	r0, [sp, #20]
 800c104:	4658      	mov	r0, fp
 800c106:	f003 ff18 	bl	800ff3a <poller_thread>
 800c10a:	4601      	mov	r1, r0
 800c10c:	9003      	str	r0, [sp, #12]
 800c10e:	9805      	ldr	r0, [sp, #20]
 800c110:	f003 fc75 	bl	800f9fe <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c114:	2800      	cmp	r0, #0
 800c116:	dc1d      	bgt.n	800c154 <register_events+0x39c>
	return list->head == list;
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c11c:	9a02      	ldr	r2, [sp, #8]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d02a      	beq.n	800c178 <register_events+0x3c0>
 800c122:	9404      	str	r4, [sp, #16]
 800c124:	9505      	str	r5, [sp, #20]
 800c126:	9d02      	ldr	r5, [sp, #8]
 800c128:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	d02a      	beq.n	800c184 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c12e:	68a0      	ldr	r0, [r4, #8]
 800c130:	f003 ff03 	bl	800ff3a <poller_thread>
 800c134:	4601      	mov	r1, r0
 800c136:	9803      	ldr	r0, [sp, #12]
 800c138:	f003 fc61 	bl	800f9fe <z_sched_prio_cmp>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	dc11      	bgt.n	800c164 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c140:	b31c      	cbz	r4, 800c18a <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800c142:	686b      	ldr	r3, [r5, #4]
 800c144:	429c      	cmp	r4, r3
 800c146:	d02a      	beq.n	800c19e <register_events+0x3e6>
 800c148:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	d1ed      	bne.n	800c12a <register_events+0x372>
 800c14e:	9c04      	ldr	r4, [sp, #16]
 800c150:	9d05      	ldr	r5, [sp, #20]
 800c152:	e01c      	b.n	800c18e <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800c154:	9a02      	ldr	r2, [sp, #8]
 800c156:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c158:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c15c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c15e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c160:	6054      	str	r4, [r2, #4]
		return;
 800c162:	e6e3      	b.n	800bf2c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c164:	9d05      	ldr	r5, [sp, #20]
 800c166:	4622      	mov	r2, r4
 800c168:	9c04      	ldr	r4, [sp, #16]
 800c16a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c16c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c16e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c172:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c174:	6054      	str	r4, [r2, #4]
			return;
 800c176:	e6d9      	b.n	800bf2c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c178:	2300      	movs	r3, #0
 800c17a:	9404      	str	r4, [sp, #16]
 800c17c:	9505      	str	r5, [sp, #20]
 800c17e:	9d02      	ldr	r5, [sp, #8]
 800c180:	461c      	mov	r4, r3
 800c182:	e7d2      	b.n	800c12a <register_events+0x372>
 800c184:	9c04      	ldr	r4, [sp, #16]
 800c186:	9d05      	ldr	r5, [sp, #20]
 800c188:	e001      	b.n	800c18e <register_events+0x3d6>
 800c18a:	9c04      	ldr	r4, [sp, #16]
 800c18c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c18e:	9a02      	ldr	r2, [sp, #8]
 800c190:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c192:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c196:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c198:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c19a:	6054      	str	r4, [r2, #4]
}
 800c19c:	e6c6      	b.n	800bf2c <register_events+0x174>
 800c19e:	9c04      	ldr	r4, [sp, #16]
 800c1a0:	9d05      	ldr	r5, [sp, #20]
 800c1a2:	e7f4      	b.n	800c18e <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800c1a4:	9801      	ldr	r0, [sp, #4]
 800c1a6:	b007      	add	sp, #28
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1ac <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	4690      	mov	r8, r2
 800c1b6:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800c1b8:	4b4f      	ldr	r3, [pc, #316]	; (800c2f8 <z_impl_k_poll+0x14c>)
 800c1ba:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800c1c2:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800c1c6:	ea57 0302 	orrs.w	r3, r7, r2
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2301      	moveq	r3, #1
 800c1ce:	2300      	movne	r3, #0
 800c1d0:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800c1d4:	f7ff fdf0 	bl	800bdb8 <register_events>
 800c1d8:	4604      	mov	r4, r0
 800c1da:	f04f 0310 	mov.w	r3, #16
 800c1de:	f3ef 8111 	mrs	r1, BASEPRI
 800c1e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c1e6:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800c1ea:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800c1ee:	b1b3      	cbz	r3, 800c21e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c1f6:	ea57 0308 	orrs.w	r3, r7, r8
 800c1fa:	d043      	beq.n	800c284 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800c1fc:	f8cd 8000 	str.w	r8, [sp]
 800c200:	9701      	str	r7, [sp, #4]
 800c202:	4a3e      	ldr	r2, [pc, #248]	; (800c2fc <z_impl_k_poll+0x150>)
 800c204:	483e      	ldr	r0, [pc, #248]	; (800c300 <z_impl_k_poll+0x154>)
 800c206:	f7ff f97f 	bl	800b508 <z_pend_curr>
 800c20a:	f04f 0310 	mov.w	r3, #16
 800c20e:	f3ef 8611 	mrs	r6, BASEPRI
 800c212:	f383 8812 	msr	BASEPRI_MAX, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	46b4      	mov	ip, r6
	while (num_events--) {
 800c21c:	e04c      	b.n	800c2b8 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800c21e:	460e      	mov	r6, r1
	while (num_events--) {
 800c220:	e00c      	b.n	800c23c <z_impl_k_poll+0x90>
	__asm__ volatile(
 800c222:	f386 8811 	msr	BASEPRI, r6
 800c226:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c22a:	f04f 0310 	mov.w	r3, #16
 800c22e:	f3ef 8611 	mrs	r6, BASEPRI
 800c232:	f383 8812 	msr	BASEPRI_MAX, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	4604      	mov	r4, r0
 800c23c:	1e60      	subs	r0, r4, #1
 800c23e:	b1dc      	cbz	r4, 800c278 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800c240:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800c244:	009f      	lsls	r7, r3, #2
 800c246:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800c24a:	2200      	movs	r2, #0
 800c24c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800c24e:	7b5a      	ldrb	r2, [r3, #13]
 800c250:	f002 021f 	and.w	r2, r2, #31
 800c254:	2a08      	cmp	r2, #8
 800c256:	d8e4      	bhi.n	800c222 <z_impl_k_poll+0x76>
 800c258:	2401      	movs	r4, #1
 800c25a:	fa04 f202 	lsl.w	r2, r4, r2
 800c25e:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800c262:	d0de      	beq.n	800c222 <z_impl_k_poll+0x76>
	return node->next != NULL;
 800c264:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800c266:	2a00      	cmp	r2, #0
 800c268:	d0db      	beq.n	800c222 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800c26a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800c26c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800c26e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800c270:	2200      	movs	r2, #0
 800c272:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800c274:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800c276:	e7d4      	b.n	800c222 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800c278:	f381 8811 	msr	BASEPRI, r1
 800c27c:	f3bf 8f6f 	isb	sy
		return 0;
 800c280:	4620      	mov	r0, r4
 800c282:	e036      	b.n	800c2f2 <z_impl_k_poll+0x146>
 800c284:	f381 8811 	msr	BASEPRI, r1
 800c288:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800c28c:	f06f 000a 	mvn.w	r0, #10
 800c290:	e02f      	b.n	800c2f2 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800c292:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800c294:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800c296:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800c298:	2200      	movs	r2, #0
 800c29a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800c29c:	605a      	str	r2, [r3, #4]
 800c29e:	f38c 8811 	msr	BASEPRI, ip
 800c2a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c2a6:	f04f 0310 	mov.w	r3, #16
 800c2aa:	f3ef 8c11 	mrs	ip, BASEPRI
 800c2ae:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2b2:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800c2b6:	4674      	mov	r4, lr
 800c2b8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800c2bc:	b1ac      	cbz	r4, 800c2ea <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800c2be:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800c2c2:	009c      	lsls	r4, r3, #2
 800c2c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800c2cc:	7b5a      	ldrb	r2, [r3, #13]
 800c2ce:	f002 021f 	and.w	r2, r2, #31
 800c2d2:	2a08      	cmp	r2, #8
 800c2d4:	d8e3      	bhi.n	800c29e <z_impl_k_poll+0xf2>
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	fa01 f202 	lsl.w	r2, r1, r2
 800c2dc:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800c2e0:	d0dd      	beq.n	800c29e <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800c2e2:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800c2e4:	2a00      	cmp	r2, #0
 800c2e6:	d1d4      	bne.n	800c292 <z_impl_k_poll+0xe6>
 800c2e8:	e7d9      	b.n	800c29e <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800c2ea:	f386 8811 	msr	BASEPRI, r6
 800c2ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800c2f2:	b002      	add	sp, #8
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	2000134c 	.word	0x2000134c
 800c2fc:	200000cc 	.word	0x200000cc
 800c300:	20001398 	.word	0x20001398

0800c304 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4603      	mov	r3, r0
	__asm__ volatile(
 800c308:	f04f 0210 	mov.w	r2, #16
 800c30c:	f3ef 8511 	mrs	r5, BASEPRI
 800c310:	f382 8812 	msr	BASEPRI_MAX, r2
 800c314:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800c318:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800c31a:	2201      	movs	r2, #1
 800c31c:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800c31e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800c320:	4283      	cmp	r3, r0
 800c322:	d011      	beq.n	800c348 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800c324:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800c326:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800c328:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800c32a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800c330:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800c332:	b148      	cbz	r0, 800c348 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800c334:	2101      	movs	r1, #1
 800c336:	f003 fe4c 	bl	800ffd2 <signal_poll_event>
 800c33a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800c33c:	4629      	mov	r1, r5
 800c33e:	4805      	ldr	r0, [pc, #20]	; (800c354 <z_impl_k_poll_signal_raise+0x50>)
 800c340:	f7fe ff72 	bl	800b228 <z_reschedule>
	return rc;
}
 800c344:	4620      	mov	r0, r4
 800c346:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800c348:	f385 8811 	msr	BASEPRI, r5
 800c34c:	f3bf 8f6f 	isb	sy
		return 0;
 800c350:	2400      	movs	r4, #0
 800c352:	e7f7      	b.n	800c344 <z_impl_k_poll_signal_raise+0x40>
 800c354:	20001398 	.word	0x20001398

0800c358 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800c358:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800c35a:	4a03      	ldr	r2, [pc, #12]	; (800c368 <boot_banner+0x10>)
 800c35c:	4903      	ldr	r1, [pc, #12]	; (800c36c <boot_banner+0x14>)
 800c35e:	4804      	ldr	r0, [pc, #16]	; (800c370 <boot_banner+0x18>)
 800c360:	f001 fcce 	bl	800dd00 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800c364:	bd08      	pop	{r3, pc}
 800c366:	bf00      	nop
 800c368:	08012118 	.word	0x08012118
 800c36c:	08012140 	.word	0x08012140
 800c370:	08012160 	.word	0x08012160

0800c374 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800c374:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c376:	4c06      	ldr	r4, [pc, #24]	; (800c390 <statics_init+0x1c>)
 800c378:	e005      	b.n	800c386 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800c37a:	68a2      	ldr	r2, [r4, #8]
 800c37c:	6861      	ldr	r1, [r4, #4]
 800c37e:	4620      	mov	r0, r4
 800c380:	f003 fe5b 	bl	801003a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c384:	3418      	adds	r4, #24
 800c386:	4b03      	ldr	r3, [pc, #12]	; (800c394 <statics_init+0x20>)
 800c388:	429c      	cmp	r4, r3
 800c38a:	d3f6      	bcc.n	800c37a <statics_init+0x6>
		}
	}
	return 0;
}
 800c38c:	2000      	movs	r0, #0
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	20000370 	.word	0x20000370
 800c394:	20000370 	.word	0x20000370

0800c398 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800c398:	b510      	push	{r4, lr}
 800c39a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800c39c:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <k_sys_work_q_init+0x28>)
 800c39e:	9302      	str	r3, [sp, #8]
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800c3a6:	ab02      	add	r3, sp, #8
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3b0:	4904      	ldr	r1, [pc, #16]	; (800c3c4 <k_sys_work_q_init+0x2c>)
 800c3b2:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <k_sys_work_q_init+0x30>)
 800c3b4:	f7fe fea6 	bl	800b104 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	b004      	add	sp, #16
 800c3bc:	bd10      	pop	{r4, pc}
 800c3be:	bf00      	nop
 800c3c0:	08012188 	.word	0x08012188
 800c3c4:	200038c0 	.word	0x200038c0
 800c3c8:	20000bc8 	.word	0x20000bc8

0800c3cc <malloc>:
 800c3cc:	4b02      	ldr	r3, [pc, #8]	; (800c3d8 <malloc+0xc>)
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f000 b84d 	b.w	800c470 <_malloc_r>
 800c3d6:	bf00      	nop
 800c3d8:	200000d4 	.word	0x200000d4

0800c3dc <_free_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4605      	mov	r5, r0
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	d041      	beq.n	800c468 <_free_r+0x8c>
 800c3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e8:	1f0c      	subs	r4, r1, #4
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfb8      	it	lt
 800c3ee:	18e4      	addlt	r4, r4, r3
 800c3f0:	f000 fbfc 	bl	800cbec <__malloc_lock>
 800c3f4:	4a1d      	ldr	r2, [pc, #116]	; (800c46c <_free_r+0x90>)
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	b933      	cbnz	r3, 800c408 <_free_r+0x2c>
 800c3fa:	6063      	str	r3, [r4, #4]
 800c3fc:	6014      	str	r4, [r2, #0]
 800c3fe:	4628      	mov	r0, r5
 800c400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c404:	f000 bbf8 	b.w	800cbf8 <__malloc_unlock>
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d908      	bls.n	800c41e <_free_r+0x42>
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	1821      	adds	r1, r4, r0
 800c410:	428b      	cmp	r3, r1
 800c412:	bf01      	itttt	eq
 800c414:	6819      	ldreq	r1, [r3, #0]
 800c416:	685b      	ldreq	r3, [r3, #4]
 800c418:	1809      	addeq	r1, r1, r0
 800c41a:	6021      	streq	r1, [r4, #0]
 800c41c:	e7ed      	b.n	800c3fa <_free_r+0x1e>
 800c41e:	461a      	mov	r2, r3
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	b10b      	cbz	r3, 800c428 <_free_r+0x4c>
 800c424:	42a3      	cmp	r3, r4
 800c426:	d9fa      	bls.n	800c41e <_free_r+0x42>
 800c428:	6811      	ldr	r1, [r2, #0]
 800c42a:	1850      	adds	r0, r2, r1
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d10b      	bne.n	800c448 <_free_r+0x6c>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	4401      	add	r1, r0
 800c434:	1850      	adds	r0, r2, r1
 800c436:	4283      	cmp	r3, r0
 800c438:	6011      	str	r1, [r2, #0]
 800c43a:	d1e0      	bne.n	800c3fe <_free_r+0x22>
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	6053      	str	r3, [r2, #4]
 800c442:	4401      	add	r1, r0
 800c444:	6011      	str	r1, [r2, #0]
 800c446:	e7da      	b.n	800c3fe <_free_r+0x22>
 800c448:	d902      	bls.n	800c450 <_free_r+0x74>
 800c44a:	230c      	movs	r3, #12
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	e7d6      	b.n	800c3fe <_free_r+0x22>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	1821      	adds	r1, r4, r0
 800c454:	428b      	cmp	r3, r1
 800c456:	bf04      	itt	eq
 800c458:	6819      	ldreq	r1, [r3, #0]
 800c45a:	685b      	ldreq	r3, [r3, #4]
 800c45c:	6063      	str	r3, [r4, #4]
 800c45e:	bf04      	itt	eq
 800c460:	1809      	addeq	r1, r1, r0
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	6054      	str	r4, [r2, #4]
 800c466:	e7ca      	b.n	800c3fe <_free_r+0x22>
 800c468:	bd38      	pop	{r3, r4, r5, pc}
 800c46a:	bf00      	nop
 800c46c:	2000139c 	.word	0x2000139c

0800c470 <_malloc_r>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	1ccd      	adds	r5, r1, #3
 800c474:	f025 0503 	bic.w	r5, r5, #3
 800c478:	3508      	adds	r5, #8
 800c47a:	2d0c      	cmp	r5, #12
 800c47c:	bf38      	it	cc
 800c47e:	250c      	movcc	r5, #12
 800c480:	2d00      	cmp	r5, #0
 800c482:	4606      	mov	r6, r0
 800c484:	db01      	blt.n	800c48a <_malloc_r+0x1a>
 800c486:	42a9      	cmp	r1, r5
 800c488:	d903      	bls.n	800c492 <_malloc_r+0x22>
 800c48a:	230c      	movs	r3, #12
 800c48c:	6033      	str	r3, [r6, #0]
 800c48e:	2000      	movs	r0, #0
 800c490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c492:	f000 fbab 	bl	800cbec <__malloc_lock>
 800c496:	4921      	ldr	r1, [pc, #132]	; (800c51c <_malloc_r+0xac>)
 800c498:	680a      	ldr	r2, [r1, #0]
 800c49a:	4614      	mov	r4, r2
 800c49c:	b99c      	cbnz	r4, 800c4c6 <_malloc_r+0x56>
 800c49e:	4f20      	ldr	r7, [pc, #128]	; (800c520 <_malloc_r+0xb0>)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	b923      	cbnz	r3, 800c4ae <_malloc_r+0x3e>
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 fb8c 	bl	800cbc4 <_sbrk_r>
 800c4ac:	6038      	str	r0, [r7, #0]
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f000 fb87 	bl	800cbc4 <_sbrk_r>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	d123      	bne.n	800c502 <_malloc_r+0x92>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	6033      	str	r3, [r6, #0]
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f000 fb9a 	bl	800cbf8 <__malloc_unlock>
 800c4c4:	e7e3      	b.n	800c48e <_malloc_r+0x1e>
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	1b5b      	subs	r3, r3, r5
 800c4ca:	d417      	bmi.n	800c4fc <_malloc_r+0x8c>
 800c4cc:	2b0b      	cmp	r3, #11
 800c4ce:	d903      	bls.n	800c4d8 <_malloc_r+0x68>
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	441c      	add	r4, r3
 800c4d4:	6025      	str	r5, [r4, #0]
 800c4d6:	e004      	b.n	800c4e2 <_malloc_r+0x72>
 800c4d8:	6863      	ldr	r3, [r4, #4]
 800c4da:	42a2      	cmp	r2, r4
 800c4dc:	bf0c      	ite	eq
 800c4de:	600b      	streq	r3, [r1, #0]
 800c4e0:	6053      	strne	r3, [r2, #4]
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f000 fb88 	bl	800cbf8 <__malloc_unlock>
 800c4e8:	f104 000b 	add.w	r0, r4, #11
 800c4ec:	1d23      	adds	r3, r4, #4
 800c4ee:	f020 0007 	bic.w	r0, r0, #7
 800c4f2:	1ac2      	subs	r2, r0, r3
 800c4f4:	d0cc      	beq.n	800c490 <_malloc_r+0x20>
 800c4f6:	1a1b      	subs	r3, r3, r0
 800c4f8:	50a3      	str	r3, [r4, r2]
 800c4fa:	e7c9      	b.n	800c490 <_malloc_r+0x20>
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	6864      	ldr	r4, [r4, #4]
 800c500:	e7cc      	b.n	800c49c <_malloc_r+0x2c>
 800c502:	1cc4      	adds	r4, r0, #3
 800c504:	f024 0403 	bic.w	r4, r4, #3
 800c508:	42a0      	cmp	r0, r4
 800c50a:	d0e3      	beq.n	800c4d4 <_malloc_r+0x64>
 800c50c:	1a21      	subs	r1, r4, r0
 800c50e:	4630      	mov	r0, r6
 800c510:	f000 fb58 	bl	800cbc4 <_sbrk_r>
 800c514:	3001      	adds	r0, #1
 800c516:	d1dd      	bne.n	800c4d4 <_malloc_r+0x64>
 800c518:	e7cf      	b.n	800c4ba <_malloc_r+0x4a>
 800c51a:	bf00      	nop
 800c51c:	2000139c 	.word	0x2000139c
 800c520:	200013a0 	.word	0x200013a0

0800c524 <_printf_float>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	b091      	sub	sp, #68	; 0x44
 800c52a:	460c      	mov	r4, r1
 800c52c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c530:	4616      	mov	r6, r2
 800c532:	461f      	mov	r7, r3
 800c534:	4605      	mov	r5, r0
 800c536:	f000 fb55 	bl	800cbe4 <_localeconv_r>
 800c53a:	6803      	ldr	r3, [r0, #0]
 800c53c:	9309      	str	r3, [sp, #36]	; 0x24
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f4 fc89 	bl	8000e56 <strlen>
 800c544:	2300      	movs	r3, #0
 800c546:	930e      	str	r3, [sp, #56]	; 0x38
 800c548:	f8d8 3000 	ldr.w	r3, [r8]
 800c54c:	900a      	str	r0, [sp, #40]	; 0x28
 800c54e:	3307      	adds	r3, #7
 800c550:	f023 0307 	bic.w	r3, r3, #7
 800c554:	f103 0208 	add.w	r2, r3, #8
 800c558:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c55c:	f8d4 b000 	ldr.w	fp, [r4]
 800c560:	f8c8 2000 	str.w	r2, [r8]
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c56c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c570:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c574:	930b      	str	r3, [sp, #44]	; 0x2c
 800c576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c578:	4b9c      	ldr	r3, [pc, #624]	; (800c7ec <_printf_float+0x2c8>)
 800c57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c57e:	4640      	mov	r0, r8
 800c580:	f7f4 face 	bl	8000b20 <__aeabi_dcmpun>
 800c584:	bb70      	cbnz	r0, 800c5e4 <_printf_float+0xc0>
 800c586:	4b99      	ldr	r3, [pc, #612]	; (800c7ec <_printf_float+0x2c8>)
 800c588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c58a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c58e:	4640      	mov	r0, r8
 800c590:	f7f4 faa8 	bl	8000ae4 <__aeabi_dcmple>
 800c594:	bb30      	cbnz	r0, 800c5e4 <_printf_float+0xc0>
 800c596:	2200      	movs	r2, #0
 800c598:	2300      	movs	r3, #0
 800c59a:	4640      	mov	r0, r8
 800c59c:	4651      	mov	r1, sl
 800c59e:	f7f4 fa97 	bl	8000ad0 <__aeabi_dcmplt>
 800c5a2:	b110      	cbz	r0, 800c5aa <_printf_float+0x86>
 800c5a4:	232d      	movs	r3, #45	; 0x2d
 800c5a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5aa:	4b91      	ldr	r3, [pc, #580]	; (800c7f0 <_printf_float+0x2cc>)
 800c5ac:	4891      	ldr	r0, [pc, #580]	; (800c7f4 <_printf_float+0x2d0>)
 800c5ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c5b2:	bf94      	ite	ls
 800c5b4:	4698      	movls	r8, r3
 800c5b6:	4680      	movhi	r8, r0
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	f02b 0304 	bic.w	r3, fp, #4
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	f04f 0a00 	mov.w	sl, #0
 800c5c6:	9700      	str	r7, [sp, #0]
 800c5c8:	4633      	mov	r3, r6
 800c5ca:	aa0f      	add	r2, sp, #60	; 0x3c
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f003 fdef 	bl	80101b2 <_printf_common>
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	f040 808f 	bne.w	800c6f8 <_printf_float+0x1d4>
 800c5da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5de:	b011      	add	sp, #68	; 0x44
 800c5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	4653      	mov	r3, sl
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4651      	mov	r1, sl
 800c5ec:	f7f4 fa98 	bl	8000b20 <__aeabi_dcmpun>
 800c5f0:	b140      	cbz	r0, 800c604 <_printf_float+0xe0>
 800c5f2:	f1ba 0f00 	cmp.w	sl, #0
 800c5f6:	bfbc      	itt	lt
 800c5f8:	232d      	movlt	r3, #45	; 0x2d
 800c5fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c5fe:	487e      	ldr	r0, [pc, #504]	; (800c7f8 <_printf_float+0x2d4>)
 800c600:	4b7e      	ldr	r3, [pc, #504]	; (800c7fc <_printf_float+0x2d8>)
 800c602:	e7d4      	b.n	800c5ae <_printf_float+0x8a>
 800c604:	6863      	ldr	r3, [r4, #4]
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c60c:	d142      	bne.n	800c694 <_printf_float+0x170>
 800c60e:	2306      	movs	r3, #6
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	9206      	str	r2, [sp, #24]
 800c616:	aa0e      	add	r2, sp, #56	; 0x38
 800c618:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c61c:	aa0d      	add	r2, sp, #52	; 0x34
 800c61e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c622:	9203      	str	r2, [sp, #12]
 800c624:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c628:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	6863      	ldr	r3, [r4, #4]
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	4642      	mov	r2, r8
 800c634:	4653      	mov	r3, sl
 800c636:	4628      	mov	r0, r5
 800c638:	910b      	str	r1, [sp, #44]	; 0x2c
 800c63a:	f003 fd1c 	bl	8010076 <__cvt>
 800c63e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c640:	2947      	cmp	r1, #71	; 0x47
 800c642:	4680      	mov	r8, r0
 800c644:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c646:	d108      	bne.n	800c65a <_printf_float+0x136>
 800c648:	1cc8      	adds	r0, r1, #3
 800c64a:	db02      	blt.n	800c652 <_printf_float+0x12e>
 800c64c:	6863      	ldr	r3, [r4, #4]
 800c64e:	4299      	cmp	r1, r3
 800c650:	dd40      	ble.n	800c6d4 <_printf_float+0x1b0>
 800c652:	f1a9 0902 	sub.w	r9, r9, #2
 800c656:	fa5f f989 	uxtb.w	r9, r9
 800c65a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c65e:	d81f      	bhi.n	800c6a0 <_printf_float+0x17c>
 800c660:	3901      	subs	r1, #1
 800c662:	464a      	mov	r2, r9
 800c664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c668:	910d      	str	r1, [sp, #52]	; 0x34
 800c66a:	f003 fd64 	bl	8010136 <__exponent>
 800c66e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c670:	1813      	adds	r3, r2, r0
 800c672:	2a01      	cmp	r2, #1
 800c674:	4682      	mov	sl, r0
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	dc02      	bgt.n	800c680 <_printf_float+0x15c>
 800c67a:	6822      	ldr	r2, [r4, #0]
 800c67c:	07d2      	lsls	r2, r2, #31
 800c67e:	d501      	bpl.n	800c684 <_printf_float+0x160>
 800c680:	3301      	adds	r3, #1
 800c682:	6123      	str	r3, [r4, #16]
 800c684:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d09c      	beq.n	800c5c6 <_printf_float+0xa2>
 800c68c:	232d      	movs	r3, #45	; 0x2d
 800c68e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c692:	e798      	b.n	800c5c6 <_printf_float+0xa2>
 800c694:	2947      	cmp	r1, #71	; 0x47
 800c696:	d1bc      	bne.n	800c612 <_printf_float+0xee>
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1ba      	bne.n	800c612 <_printf_float+0xee>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7b7      	b.n	800c610 <_printf_float+0xec>
 800c6a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c6a4:	d118      	bne.n	800c6d8 <_printf_float+0x1b4>
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	6863      	ldr	r3, [r4, #4]
 800c6aa:	dd0b      	ble.n	800c6c4 <_printf_float+0x1a0>
 800c6ac:	6121      	str	r1, [r4, #16]
 800c6ae:	b913      	cbnz	r3, 800c6b6 <_printf_float+0x192>
 800c6b0:	6822      	ldr	r2, [r4, #0]
 800c6b2:	07d0      	lsls	r0, r2, #31
 800c6b4:	d502      	bpl.n	800c6bc <_printf_float+0x198>
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	440b      	add	r3, r1
 800c6ba:	6123      	str	r3, [r4, #16]
 800c6bc:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6be:	f04f 0a00 	mov.w	sl, #0
 800c6c2:	e7df      	b.n	800c684 <_printf_float+0x160>
 800c6c4:	b913      	cbnz	r3, 800c6cc <_printf_float+0x1a8>
 800c6c6:	6822      	ldr	r2, [r4, #0]
 800c6c8:	07d2      	lsls	r2, r2, #31
 800c6ca:	d501      	bpl.n	800c6d0 <_printf_float+0x1ac>
 800c6cc:	3302      	adds	r3, #2
 800c6ce:	e7f4      	b.n	800c6ba <_printf_float+0x196>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e7f2      	b.n	800c6ba <_printf_float+0x196>
 800c6d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6da:	4299      	cmp	r1, r3
 800c6dc:	db05      	blt.n	800c6ea <_printf_float+0x1c6>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	6121      	str	r1, [r4, #16]
 800c6e2:	07d8      	lsls	r0, r3, #31
 800c6e4:	d5ea      	bpl.n	800c6bc <_printf_float+0x198>
 800c6e6:	1c4b      	adds	r3, r1, #1
 800c6e8:	e7e7      	b.n	800c6ba <_printf_float+0x196>
 800c6ea:	2900      	cmp	r1, #0
 800c6ec:	bfd4      	ite	le
 800c6ee:	f1c1 0202 	rsble	r2, r1, #2
 800c6f2:	2201      	movgt	r2, #1
 800c6f4:	4413      	add	r3, r2
 800c6f6:	e7e0      	b.n	800c6ba <_printf_float+0x196>
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	055a      	lsls	r2, r3, #21
 800c6fc:	d407      	bmi.n	800c70e <_printf_float+0x1ea>
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	4642      	mov	r2, r8
 800c702:	4631      	mov	r1, r6
 800c704:	4628      	mov	r0, r5
 800c706:	47b8      	blx	r7
 800c708:	3001      	adds	r0, #1
 800c70a:	d12b      	bne.n	800c764 <_printf_float+0x240>
 800c70c:	e765      	b.n	800c5da <_printf_float+0xb6>
 800c70e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c712:	f240 80dc 	bls.w	800c8ce <_printf_float+0x3aa>
 800c716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c71a:	2200      	movs	r2, #0
 800c71c:	2300      	movs	r3, #0
 800c71e:	f7f4 f9cd 	bl	8000abc <__aeabi_dcmpeq>
 800c722:	2800      	cmp	r0, #0
 800c724:	d033      	beq.n	800c78e <_printf_float+0x26a>
 800c726:	4a36      	ldr	r2, [pc, #216]	; (800c800 <_printf_float+0x2dc>)
 800c728:	2301      	movs	r3, #1
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f af52 	beq.w	800c5da <_printf_float+0xb6>
 800c736:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c73a:	429a      	cmp	r2, r3
 800c73c:	db02      	blt.n	800c744 <_printf_float+0x220>
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	07d8      	lsls	r0, r3, #31
 800c742:	d50f      	bpl.n	800c764 <_printf_float+0x240>
 800c744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c748:	4631      	mov	r1, r6
 800c74a:	4628      	mov	r0, r5
 800c74c:	47b8      	blx	r7
 800c74e:	3001      	adds	r0, #1
 800c750:	f43f af43 	beq.w	800c5da <_printf_float+0xb6>
 800c754:	f04f 0800 	mov.w	r8, #0
 800c758:	f104 091a 	add.w	r9, r4, #26
 800c75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c75e:	3b01      	subs	r3, #1
 800c760:	4543      	cmp	r3, r8
 800c762:	dc09      	bgt.n	800c778 <_printf_float+0x254>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	079b      	lsls	r3, r3, #30
 800c768:	f100 8101 	bmi.w	800c96e <_printf_float+0x44a>
 800c76c:	68e0      	ldr	r0, [r4, #12]
 800c76e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c770:	4298      	cmp	r0, r3
 800c772:	bfb8      	it	lt
 800c774:	4618      	movlt	r0, r3
 800c776:	e732      	b.n	800c5de <_printf_float+0xba>
 800c778:	2301      	movs	r3, #1
 800c77a:	464a      	mov	r2, r9
 800c77c:	4631      	mov	r1, r6
 800c77e:	4628      	mov	r0, r5
 800c780:	47b8      	blx	r7
 800c782:	3001      	adds	r0, #1
 800c784:	f43f af29 	beq.w	800c5da <_printf_float+0xb6>
 800c788:	f108 0801 	add.w	r8, r8, #1
 800c78c:	e7e6      	b.n	800c75c <_printf_float+0x238>
 800c78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c790:	2b00      	cmp	r3, #0
 800c792:	dc37      	bgt.n	800c804 <_printf_float+0x2e0>
 800c794:	4a1a      	ldr	r2, [pc, #104]	; (800c800 <_printf_float+0x2dc>)
 800c796:	2301      	movs	r3, #1
 800c798:	4631      	mov	r1, r6
 800c79a:	4628      	mov	r0, r5
 800c79c:	47b8      	blx	r7
 800c79e:	3001      	adds	r0, #1
 800c7a0:	f43f af1b 	beq.w	800c5da <_printf_float+0xb6>
 800c7a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	d102      	bne.n	800c7b2 <_printf_float+0x28e>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	07d9      	lsls	r1, r3, #31
 800c7b0:	d5d8      	bpl.n	800c764 <_printf_float+0x240>
 800c7b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b8      	blx	r7
 800c7bc:	3001      	adds	r0, #1
 800c7be:	f43f af0c 	beq.w	800c5da <_printf_float+0xb6>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	f104 0a1a 	add.w	sl, r4, #26
 800c7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7cc:	425b      	negs	r3, r3
 800c7ce:	454b      	cmp	r3, r9
 800c7d0:	dc01      	bgt.n	800c7d6 <_printf_float+0x2b2>
 800c7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7d4:	e794      	b.n	800c700 <_printf_float+0x1dc>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4652      	mov	r2, sl
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4628      	mov	r0, r5
 800c7de:	47b8      	blx	r7
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f43f aefa 	beq.w	800c5da <_printf_float+0xb6>
 800c7e6:	f109 0901 	add.w	r9, r9, #1
 800c7ea:	e7ee      	b.n	800c7ca <_printf_float+0x2a6>
 800c7ec:	7fefffff 	.word	0x7fefffff
 800c7f0:	08012305 	.word	0x08012305
 800c7f4:	08012309 	.word	0x08012309
 800c7f8:	08012311 	.word	0x08012311
 800c7fc:	0801230d 	.word	0x0801230d
 800c800:	08012315 	.word	0x08012315
 800c804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c808:	429a      	cmp	r2, r3
 800c80a:	bfa8      	it	ge
 800c80c:	461a      	movge	r2, r3
 800c80e:	2a00      	cmp	r2, #0
 800c810:	4691      	mov	r9, r2
 800c812:	dc37      	bgt.n	800c884 <_printf_float+0x360>
 800c814:	f04f 0b00 	mov.w	fp, #0
 800c818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c81c:	f104 021a 	add.w	r2, r4, #26
 800c820:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c824:	ebaa 0309 	sub.w	r3, sl, r9
 800c828:	455b      	cmp	r3, fp
 800c82a:	dc33      	bgt.n	800c894 <_printf_float+0x370>
 800c82c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c830:	429a      	cmp	r2, r3
 800c832:	db3b      	blt.n	800c8ac <_printf_float+0x388>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	07da      	lsls	r2, r3, #31
 800c838:	d438      	bmi.n	800c8ac <_printf_float+0x388>
 800c83a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c83c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c83e:	eba3 020a 	sub.w	r2, r3, sl
 800c842:	eba3 0901 	sub.w	r9, r3, r1
 800c846:	4591      	cmp	r9, r2
 800c848:	bfa8      	it	ge
 800c84a:	4691      	movge	r9, r2
 800c84c:	f1b9 0f00 	cmp.w	r9, #0
 800c850:	dc34      	bgt.n	800c8bc <_printf_float+0x398>
 800c852:	f04f 0800 	mov.w	r8, #0
 800c856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c85a:	f104 0a1a 	add.w	sl, r4, #26
 800c85e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c862:	1a9b      	subs	r3, r3, r2
 800c864:	eba3 0309 	sub.w	r3, r3, r9
 800c868:	4543      	cmp	r3, r8
 800c86a:	f77f af7b 	ble.w	800c764 <_printf_float+0x240>
 800c86e:	2301      	movs	r3, #1
 800c870:	4652      	mov	r2, sl
 800c872:	4631      	mov	r1, r6
 800c874:	4628      	mov	r0, r5
 800c876:	47b8      	blx	r7
 800c878:	3001      	adds	r0, #1
 800c87a:	f43f aeae 	beq.w	800c5da <_printf_float+0xb6>
 800c87e:	f108 0801 	add.w	r8, r8, #1
 800c882:	e7ec      	b.n	800c85e <_printf_float+0x33a>
 800c884:	4613      	mov	r3, r2
 800c886:	4631      	mov	r1, r6
 800c888:	4642      	mov	r2, r8
 800c88a:	4628      	mov	r0, r5
 800c88c:	47b8      	blx	r7
 800c88e:	3001      	adds	r0, #1
 800c890:	d1c0      	bne.n	800c814 <_printf_float+0x2f0>
 800c892:	e6a2      	b.n	800c5da <_printf_float+0xb6>
 800c894:	2301      	movs	r3, #1
 800c896:	4631      	mov	r1, r6
 800c898:	4628      	mov	r0, r5
 800c89a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c89c:	47b8      	blx	r7
 800c89e:	3001      	adds	r0, #1
 800c8a0:	f43f ae9b 	beq.w	800c5da <_printf_float+0xb6>
 800c8a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8a6:	f10b 0b01 	add.w	fp, fp, #1
 800c8aa:	e7b9      	b.n	800c820 <_printf_float+0x2fc>
 800c8ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d1bf      	bne.n	800c83a <_printf_float+0x316>
 800c8ba:	e68e      	b.n	800c5da <_printf_float+0xb6>
 800c8bc:	464b      	mov	r3, r9
 800c8be:	eb08 020a 	add.w	r2, r8, sl
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b8      	blx	r7
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	d1c2      	bne.n	800c852 <_printf_float+0x32e>
 800c8cc:	e685      	b.n	800c5da <_printf_float+0xb6>
 800c8ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8d0:	2a01      	cmp	r2, #1
 800c8d2:	dc01      	bgt.n	800c8d8 <_printf_float+0x3b4>
 800c8d4:	07db      	lsls	r3, r3, #31
 800c8d6:	d537      	bpl.n	800c948 <_printf_float+0x424>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4642      	mov	r2, r8
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4628      	mov	r0, r5
 800c8e0:	47b8      	blx	r7
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f43f ae79 	beq.w	800c5da <_printf_float+0xb6>
 800c8e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	47b8      	blx	r7
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f43f ae71 	beq.w	800c5da <_printf_float+0xb6>
 800c8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2300      	movs	r3, #0
 800c900:	f7f4 f8dc 	bl	8000abc <__aeabi_dcmpeq>
 800c904:	b9d8      	cbnz	r0, 800c93e <_printf_float+0x41a>
 800c906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c908:	f108 0201 	add.w	r2, r8, #1
 800c90c:	3b01      	subs	r3, #1
 800c90e:	4631      	mov	r1, r6
 800c910:	4628      	mov	r0, r5
 800c912:	47b8      	blx	r7
 800c914:	3001      	adds	r0, #1
 800c916:	d10e      	bne.n	800c936 <_printf_float+0x412>
 800c918:	e65f      	b.n	800c5da <_printf_float+0xb6>
 800c91a:	2301      	movs	r3, #1
 800c91c:	464a      	mov	r2, r9
 800c91e:	4631      	mov	r1, r6
 800c920:	4628      	mov	r0, r5
 800c922:	47b8      	blx	r7
 800c924:	3001      	adds	r0, #1
 800c926:	f43f ae58 	beq.w	800c5da <_printf_float+0xb6>
 800c92a:	f108 0801 	add.w	r8, r8, #1
 800c92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c930:	3b01      	subs	r3, #1
 800c932:	4543      	cmp	r3, r8
 800c934:	dcf1      	bgt.n	800c91a <_printf_float+0x3f6>
 800c936:	4653      	mov	r3, sl
 800c938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c93c:	e6e1      	b.n	800c702 <_printf_float+0x1de>
 800c93e:	f04f 0800 	mov.w	r8, #0
 800c942:	f104 091a 	add.w	r9, r4, #26
 800c946:	e7f2      	b.n	800c92e <_printf_float+0x40a>
 800c948:	2301      	movs	r3, #1
 800c94a:	4642      	mov	r2, r8
 800c94c:	e7df      	b.n	800c90e <_printf_float+0x3ea>
 800c94e:	2301      	movs	r3, #1
 800c950:	464a      	mov	r2, r9
 800c952:	4631      	mov	r1, r6
 800c954:	4628      	mov	r0, r5
 800c956:	47b8      	blx	r7
 800c958:	3001      	adds	r0, #1
 800c95a:	f43f ae3e 	beq.w	800c5da <_printf_float+0xb6>
 800c95e:	f108 0801 	add.w	r8, r8, #1
 800c962:	68e3      	ldr	r3, [r4, #12]
 800c964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c966:	1a5b      	subs	r3, r3, r1
 800c968:	4543      	cmp	r3, r8
 800c96a:	dcf0      	bgt.n	800c94e <_printf_float+0x42a>
 800c96c:	e6fe      	b.n	800c76c <_printf_float+0x248>
 800c96e:	f04f 0800 	mov.w	r8, #0
 800c972:	f104 0919 	add.w	r9, r4, #25
 800c976:	e7f4      	b.n	800c962 <_printf_float+0x43e>

0800c978 <_printf_i>:
 800c978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	7e0f      	ldrb	r7, [r1, #24]
 800c97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c980:	2f78      	cmp	r7, #120	; 0x78
 800c982:	4691      	mov	r9, r2
 800c984:	4680      	mov	r8, r0
 800c986:	460c      	mov	r4, r1
 800c988:	469a      	mov	sl, r3
 800c98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c98e:	d807      	bhi.n	800c9a0 <_printf_i+0x28>
 800c990:	2f62      	cmp	r7, #98	; 0x62
 800c992:	d80a      	bhi.n	800c9aa <_printf_i+0x32>
 800c994:	2f00      	cmp	r7, #0
 800c996:	f000 80d8 	beq.w	800cb4a <_printf_i+0x1d2>
 800c99a:	2f58      	cmp	r7, #88	; 0x58
 800c99c:	f000 80a3 	beq.w	800cae6 <_printf_i+0x16e>
 800c9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9a8:	e03a      	b.n	800ca20 <_printf_i+0xa8>
 800c9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ae:	2b15      	cmp	r3, #21
 800c9b0:	d8f6      	bhi.n	800c9a0 <_printf_i+0x28>
 800c9b2:	a101      	add	r1, pc, #4	; (adr r1, 800c9b8 <_printf_i+0x40>)
 800c9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b8:	0800ca11 	.word	0x0800ca11
 800c9bc:	0800ca25 	.word	0x0800ca25
 800c9c0:	0800c9a1 	.word	0x0800c9a1
 800c9c4:	0800c9a1 	.word	0x0800c9a1
 800c9c8:	0800c9a1 	.word	0x0800c9a1
 800c9cc:	0800c9a1 	.word	0x0800c9a1
 800c9d0:	0800ca25 	.word	0x0800ca25
 800c9d4:	0800c9a1 	.word	0x0800c9a1
 800c9d8:	0800c9a1 	.word	0x0800c9a1
 800c9dc:	0800c9a1 	.word	0x0800c9a1
 800c9e0:	0800c9a1 	.word	0x0800c9a1
 800c9e4:	0800cb31 	.word	0x0800cb31
 800c9e8:	0800ca55 	.word	0x0800ca55
 800c9ec:	0800cb13 	.word	0x0800cb13
 800c9f0:	0800c9a1 	.word	0x0800c9a1
 800c9f4:	0800c9a1 	.word	0x0800c9a1
 800c9f8:	0800cb53 	.word	0x0800cb53
 800c9fc:	0800c9a1 	.word	0x0800c9a1
 800ca00:	0800ca55 	.word	0x0800ca55
 800ca04:	0800c9a1 	.word	0x0800c9a1
 800ca08:	0800c9a1 	.word	0x0800c9a1
 800ca0c:	0800cb1b 	.word	0x0800cb1b
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	1d1a      	adds	r2, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	602a      	str	r2, [r5, #0]
 800ca18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca20:	2301      	movs	r3, #1
 800ca22:	e0a3      	b.n	800cb6c <_printf_i+0x1f4>
 800ca24:	6820      	ldr	r0, [r4, #0]
 800ca26:	6829      	ldr	r1, [r5, #0]
 800ca28:	0606      	lsls	r6, r0, #24
 800ca2a:	f101 0304 	add.w	r3, r1, #4
 800ca2e:	d50a      	bpl.n	800ca46 <_printf_i+0xce>
 800ca30:	680e      	ldr	r6, [r1, #0]
 800ca32:	602b      	str	r3, [r5, #0]
 800ca34:	2e00      	cmp	r6, #0
 800ca36:	da03      	bge.n	800ca40 <_printf_i+0xc8>
 800ca38:	232d      	movs	r3, #45	; 0x2d
 800ca3a:	4276      	negs	r6, r6
 800ca3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca40:	485e      	ldr	r0, [pc, #376]	; (800cbbc <_printf_i+0x244>)
 800ca42:	230a      	movs	r3, #10
 800ca44:	e019      	b.n	800ca7a <_printf_i+0x102>
 800ca46:	680e      	ldr	r6, [r1, #0]
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca4e:	bf18      	it	ne
 800ca50:	b236      	sxthne	r6, r6
 800ca52:	e7ef      	b.n	800ca34 <_printf_i+0xbc>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	6820      	ldr	r0, [r4, #0]
 800ca58:	1d19      	adds	r1, r3, #4
 800ca5a:	6029      	str	r1, [r5, #0]
 800ca5c:	0601      	lsls	r1, r0, #24
 800ca5e:	d501      	bpl.n	800ca64 <_printf_i+0xec>
 800ca60:	681e      	ldr	r6, [r3, #0]
 800ca62:	e002      	b.n	800ca6a <_printf_i+0xf2>
 800ca64:	0646      	lsls	r6, r0, #25
 800ca66:	d5fb      	bpl.n	800ca60 <_printf_i+0xe8>
 800ca68:	881e      	ldrh	r6, [r3, #0]
 800ca6a:	4854      	ldr	r0, [pc, #336]	; (800cbbc <_printf_i+0x244>)
 800ca6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ca6e:	bf0c      	ite	eq
 800ca70:	2308      	moveq	r3, #8
 800ca72:	230a      	movne	r3, #10
 800ca74:	2100      	movs	r1, #0
 800ca76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca7a:	6865      	ldr	r5, [r4, #4]
 800ca7c:	60a5      	str	r5, [r4, #8]
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	bfa2      	ittt	ge
 800ca82:	6821      	ldrge	r1, [r4, #0]
 800ca84:	f021 0104 	bicge.w	r1, r1, #4
 800ca88:	6021      	strge	r1, [r4, #0]
 800ca8a:	b90e      	cbnz	r6, 800ca90 <_printf_i+0x118>
 800ca8c:	2d00      	cmp	r5, #0
 800ca8e:	d04d      	beq.n	800cb2c <_printf_i+0x1b4>
 800ca90:	4615      	mov	r5, r2
 800ca92:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca96:	fb03 6711 	mls	r7, r3, r1, r6
 800ca9a:	5dc7      	ldrb	r7, [r0, r7]
 800ca9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caa0:	4637      	mov	r7, r6
 800caa2:	42bb      	cmp	r3, r7
 800caa4:	460e      	mov	r6, r1
 800caa6:	d9f4      	bls.n	800ca92 <_printf_i+0x11a>
 800caa8:	2b08      	cmp	r3, #8
 800caaa:	d10b      	bne.n	800cac4 <_printf_i+0x14c>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	07de      	lsls	r6, r3, #31
 800cab0:	d508      	bpl.n	800cac4 <_printf_i+0x14c>
 800cab2:	6923      	ldr	r3, [r4, #16]
 800cab4:	6861      	ldr	r1, [r4, #4]
 800cab6:	4299      	cmp	r1, r3
 800cab8:	bfde      	ittt	le
 800caba:	2330      	movle	r3, #48	; 0x30
 800cabc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cac0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cac4:	1b52      	subs	r2, r2, r5
 800cac6:	6122      	str	r2, [r4, #16]
 800cac8:	f8cd a000 	str.w	sl, [sp]
 800cacc:	464b      	mov	r3, r9
 800cace:	aa03      	add	r2, sp, #12
 800cad0:	4621      	mov	r1, r4
 800cad2:	4640      	mov	r0, r8
 800cad4:	f003 fb6d 	bl	80101b2 <_printf_common>
 800cad8:	3001      	adds	r0, #1
 800cada:	d14c      	bne.n	800cb76 <_printf_i+0x1fe>
 800cadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cae0:	b004      	add	sp, #16
 800cae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae6:	4835      	ldr	r0, [pc, #212]	; (800cbbc <_printf_i+0x244>)
 800cae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caec:	6829      	ldr	r1, [r5, #0]
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800caf4:	6029      	str	r1, [r5, #0]
 800caf6:	061d      	lsls	r5, r3, #24
 800caf8:	d514      	bpl.n	800cb24 <_printf_i+0x1ac>
 800cafa:	07df      	lsls	r7, r3, #31
 800cafc:	bf44      	itt	mi
 800cafe:	f043 0320 	orrmi.w	r3, r3, #32
 800cb02:	6023      	strmi	r3, [r4, #0]
 800cb04:	b91e      	cbnz	r6, 800cb0e <_printf_i+0x196>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	f023 0320 	bic.w	r3, r3, #32
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	2310      	movs	r3, #16
 800cb10:	e7b0      	b.n	800ca74 <_printf_i+0xfc>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	f043 0320 	orr.w	r3, r3, #32
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	2378      	movs	r3, #120	; 0x78
 800cb1c:	4828      	ldr	r0, [pc, #160]	; (800cbc0 <_printf_i+0x248>)
 800cb1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb22:	e7e3      	b.n	800caec <_printf_i+0x174>
 800cb24:	0659      	lsls	r1, r3, #25
 800cb26:	bf48      	it	mi
 800cb28:	b2b6      	uxthmi	r6, r6
 800cb2a:	e7e6      	b.n	800cafa <_printf_i+0x182>
 800cb2c:	4615      	mov	r5, r2
 800cb2e:	e7bb      	b.n	800caa8 <_printf_i+0x130>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	6826      	ldr	r6, [r4, #0]
 800cb34:	6961      	ldr	r1, [r4, #20]
 800cb36:	1d18      	adds	r0, r3, #4
 800cb38:	6028      	str	r0, [r5, #0]
 800cb3a:	0635      	lsls	r5, r6, #24
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	d501      	bpl.n	800cb44 <_printf_i+0x1cc>
 800cb40:	6019      	str	r1, [r3, #0]
 800cb42:	e002      	b.n	800cb4a <_printf_i+0x1d2>
 800cb44:	0670      	lsls	r0, r6, #25
 800cb46:	d5fb      	bpl.n	800cb40 <_printf_i+0x1c8>
 800cb48:	8019      	strh	r1, [r3, #0]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	4615      	mov	r5, r2
 800cb50:	e7ba      	b.n	800cac8 <_printf_i+0x150>
 800cb52:	682b      	ldr	r3, [r5, #0]
 800cb54:	1d1a      	adds	r2, r3, #4
 800cb56:	602a      	str	r2, [r5, #0]
 800cb58:	681d      	ldr	r5, [r3, #0]
 800cb5a:	6862      	ldr	r2, [r4, #4]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7f3 fb1e 	bl	80001a0 <memchr>
 800cb64:	b108      	cbz	r0, 800cb6a <_printf_i+0x1f2>
 800cb66:	1b40      	subs	r0, r0, r5
 800cb68:	6060      	str	r0, [r4, #4]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb74:	e7a8      	b.n	800cac8 <_printf_i+0x150>
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	47d0      	blx	sl
 800cb80:	3001      	adds	r0, #1
 800cb82:	d0ab      	beq.n	800cadc <_printf_i+0x164>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	079b      	lsls	r3, r3, #30
 800cb88:	d413      	bmi.n	800cbb2 <_printf_i+0x23a>
 800cb8a:	68e0      	ldr	r0, [r4, #12]
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	4298      	cmp	r0, r3
 800cb90:	bfb8      	it	lt
 800cb92:	4618      	movlt	r0, r3
 800cb94:	e7a4      	b.n	800cae0 <_printf_i+0x168>
 800cb96:	2301      	movs	r3, #1
 800cb98:	4632      	mov	r2, r6
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	47d0      	blx	sl
 800cba0:	3001      	adds	r0, #1
 800cba2:	d09b      	beq.n	800cadc <_printf_i+0x164>
 800cba4:	3501      	adds	r5, #1
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	9903      	ldr	r1, [sp, #12]
 800cbaa:	1a5b      	subs	r3, r3, r1
 800cbac:	42ab      	cmp	r3, r5
 800cbae:	dcf2      	bgt.n	800cb96 <_printf_i+0x21e>
 800cbb0:	e7eb      	b.n	800cb8a <_printf_i+0x212>
 800cbb2:	2500      	movs	r5, #0
 800cbb4:	f104 0619 	add.w	r6, r4, #25
 800cbb8:	e7f5      	b.n	800cba6 <_printf_i+0x22e>
 800cbba:	bf00      	nop
 800cbbc:	08012317 	.word	0x08012317
 800cbc0:	08012328 	.word	0x08012328

0800cbc4 <_sbrk_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d06      	ldr	r5, [pc, #24]	; (800cbe0 <_sbrk_r+0x1c>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	f7f9 fa84 	bl	80060dc <_sbrk>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_sbrk_r+0x1a>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_sbrk_r+0x1a>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	200013a4 	.word	0x200013a4

0800cbe4 <_localeconv_r>:
 800cbe4:	4800      	ldr	r0, [pc, #0]	; (800cbe8 <_localeconv_r+0x4>)
 800cbe6:	4770      	bx	lr
 800cbe8:	20000228 	.word	0x20000228

0800cbec <__malloc_lock>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__malloc_lock+0x8>)
 800cbee:	f001 bd70 	b.w	800e6d2 <__retarget_lock_acquire_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20000370 	.word	0x20000370

0800cbf8 <__malloc_unlock>:
 800cbf8:	4801      	ldr	r0, [pc, #4]	; (800cc00 <__malloc_unlock+0x8>)
 800cbfa:	f001 bd72 	b.w	800e6e2 <__retarget_lock_release_recursive>
 800cbfe:	bf00      	nop
 800cc00:	20000370 	.word	0x20000370

0800cc04 <_Balloc>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc08:	4604      	mov	r4, r0
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	b976      	cbnz	r6, 800cc2c <_Balloc+0x28>
 800cc0e:	2010      	movs	r0, #16
 800cc10:	f7ff fbdc 	bl	800c3cc <malloc>
 800cc14:	4602      	mov	r2, r0
 800cc16:	6260      	str	r0, [r4, #36]	; 0x24
 800cc18:	b920      	cbnz	r0, 800cc24 <_Balloc+0x20>
 800cc1a:	4b18      	ldr	r3, [pc, #96]	; (800cc7c <_Balloc+0x78>)
 800cc1c:	4818      	ldr	r0, [pc, #96]	; (800cc80 <_Balloc+0x7c>)
 800cc1e:	2166      	movs	r1, #102	; 0x66
 800cc20:	f000 fb04 	bl	800d22c <__assert_func>
 800cc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc28:	6006      	str	r6, [r0, #0]
 800cc2a:	60c6      	str	r6, [r0, #12]
 800cc2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc2e:	68f3      	ldr	r3, [r6, #12]
 800cc30:	b183      	cbz	r3, 800cc54 <_Balloc+0x50>
 800cc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc3a:	b9b8      	cbnz	r0, 800cc6c <_Balloc+0x68>
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc42:	1d72      	adds	r2, r6, #5
 800cc44:	0092      	lsls	r2, r2, #2
 800cc46:	4620      	mov	r0, r4
 800cc48:	f003 fc1b 	bl	8010482 <_calloc_r>
 800cc4c:	b160      	cbz	r0, 800cc68 <_Balloc+0x64>
 800cc4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc52:	e00e      	b.n	800cc72 <_Balloc+0x6e>
 800cc54:	2221      	movs	r2, #33	; 0x21
 800cc56:	2104      	movs	r1, #4
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f003 fc12 	bl	8010482 <_calloc_r>
 800cc5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc60:	60f0      	str	r0, [r6, #12]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1e4      	bne.n	800cc32 <_Balloc+0x2e>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
 800cc6c:	6802      	ldr	r2, [r0, #0]
 800cc6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc72:	2300      	movs	r3, #0
 800cc74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc78:	e7f7      	b.n	800cc6a <_Balloc+0x66>
 800cc7a:	bf00      	nop
 800cc7c:	08012346 	.word	0x08012346
 800cc80:	080123c8 	.word	0x080123c8

0800cc84 <_Bfree>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc88:	4605      	mov	r5, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	b976      	cbnz	r6, 800ccac <_Bfree+0x28>
 800cc8e:	2010      	movs	r0, #16
 800cc90:	f7ff fb9c 	bl	800c3cc <malloc>
 800cc94:	4602      	mov	r2, r0
 800cc96:	6268      	str	r0, [r5, #36]	; 0x24
 800cc98:	b920      	cbnz	r0, 800cca4 <_Bfree+0x20>
 800cc9a:	4b09      	ldr	r3, [pc, #36]	; (800ccc0 <_Bfree+0x3c>)
 800cc9c:	4809      	ldr	r0, [pc, #36]	; (800ccc4 <_Bfree+0x40>)
 800cc9e:	218a      	movs	r1, #138	; 0x8a
 800cca0:	f000 fac4 	bl	800d22c <__assert_func>
 800cca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cca8:	6006      	str	r6, [r0, #0]
 800ccaa:	60c6      	str	r6, [r0, #12]
 800ccac:	b13c      	cbz	r4, 800ccbe <_Bfree+0x3a>
 800ccae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ccb0:	6862      	ldr	r2, [r4, #4]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccb8:	6021      	str	r1, [r4, #0]
 800ccba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}
 800ccc0:	08012346 	.word	0x08012346
 800ccc4:	080123c8 	.word	0x080123c8

0800ccc8 <__multadd>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	690d      	ldr	r5, [r1, #16]
 800ccce:	4607      	mov	r7, r0
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	461e      	mov	r6, r3
 800ccd4:	f101 0c14 	add.w	ip, r1, #20
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f8dc 3000 	ldr.w	r3, [ip]
 800ccde:	b299      	uxth	r1, r3
 800cce0:	fb02 6101 	mla	r1, r2, r1, r6
 800cce4:	0c1e      	lsrs	r6, r3, #16
 800cce6:	0c0b      	lsrs	r3, r1, #16
 800cce8:	fb02 3306 	mla	r3, r2, r6, r3
 800ccec:	b289      	uxth	r1, r1
 800ccee:	3001      	adds	r0, #1
 800ccf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccf4:	4285      	cmp	r5, r0
 800ccf6:	f84c 1b04 	str.w	r1, [ip], #4
 800ccfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccfe:	dcec      	bgt.n	800ccda <__multadd+0x12>
 800cd00:	b30e      	cbz	r6, 800cd46 <__multadd+0x7e>
 800cd02:	68a3      	ldr	r3, [r4, #8]
 800cd04:	42ab      	cmp	r3, r5
 800cd06:	dc19      	bgt.n	800cd3c <__multadd+0x74>
 800cd08:	6861      	ldr	r1, [r4, #4]
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	3101      	adds	r1, #1
 800cd0e:	f7ff ff79 	bl	800cc04 <_Balloc>
 800cd12:	4680      	mov	r8, r0
 800cd14:	b928      	cbnz	r0, 800cd22 <__multadd+0x5a>
 800cd16:	4602      	mov	r2, r0
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <__multadd+0x84>)
 800cd1a:	480d      	ldr	r0, [pc, #52]	; (800cd50 <__multadd+0x88>)
 800cd1c:	21b5      	movs	r1, #181	; 0xb5
 800cd1e:	f000 fa85 	bl	800d22c <__assert_func>
 800cd22:	6922      	ldr	r2, [r4, #16]
 800cd24:	3202      	adds	r2, #2
 800cd26:	f104 010c 	add.w	r1, r4, #12
 800cd2a:	0092      	lsls	r2, r2, #2
 800cd2c:	300c      	adds	r0, #12
 800cd2e:	f003 f98c 	bl	801004a <memcpy>
 800cd32:	4621      	mov	r1, r4
 800cd34:	4638      	mov	r0, r7
 800cd36:	f7ff ffa5 	bl	800cc84 <_Bfree>
 800cd3a:	4644      	mov	r4, r8
 800cd3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd40:	3501      	adds	r5, #1
 800cd42:	615e      	str	r6, [r3, #20]
 800cd44:	6125      	str	r5, [r4, #16]
 800cd46:	4620      	mov	r0, r4
 800cd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd4c:	080123b7 	.word	0x080123b7
 800cd50:	080123c8 	.word	0x080123c8

0800cd54 <__i2b>:
 800cd54:	b510      	push	{r4, lr}
 800cd56:	460c      	mov	r4, r1
 800cd58:	2101      	movs	r1, #1
 800cd5a:	f7ff ff53 	bl	800cc04 <_Balloc>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	b928      	cbnz	r0, 800cd6e <__i2b+0x1a>
 800cd62:	4b05      	ldr	r3, [pc, #20]	; (800cd78 <__i2b+0x24>)
 800cd64:	4805      	ldr	r0, [pc, #20]	; (800cd7c <__i2b+0x28>)
 800cd66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd6a:	f000 fa5f 	bl	800d22c <__assert_func>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	6144      	str	r4, [r0, #20]
 800cd72:	6103      	str	r3, [r0, #16]
 800cd74:	bd10      	pop	{r4, pc}
 800cd76:	bf00      	nop
 800cd78:	080123b7 	.word	0x080123b7
 800cd7c:	080123c8 	.word	0x080123c8

0800cd80 <__multiply>:
 800cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	4691      	mov	r9, r2
 800cd86:	690a      	ldr	r2, [r1, #16]
 800cd88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	bfb8      	it	lt
 800cd90:	460b      	movlt	r3, r1
 800cd92:	460c      	mov	r4, r1
 800cd94:	bfbc      	itt	lt
 800cd96:	464c      	movlt	r4, r9
 800cd98:	4699      	movlt	r9, r3
 800cd9a:	6927      	ldr	r7, [r4, #16]
 800cd9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cda0:	68a3      	ldr	r3, [r4, #8]
 800cda2:	6861      	ldr	r1, [r4, #4]
 800cda4:	eb07 060a 	add.w	r6, r7, sl
 800cda8:	42b3      	cmp	r3, r6
 800cdaa:	b085      	sub	sp, #20
 800cdac:	bfb8      	it	lt
 800cdae:	3101      	addlt	r1, #1
 800cdb0:	f7ff ff28 	bl	800cc04 <_Balloc>
 800cdb4:	b930      	cbnz	r0, 800cdc4 <__multiply+0x44>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	4b43      	ldr	r3, [pc, #268]	; (800cec8 <__multiply+0x148>)
 800cdba:	4844      	ldr	r0, [pc, #272]	; (800cecc <__multiply+0x14c>)
 800cdbc:	f240 115d 	movw	r1, #349	; 0x15d
 800cdc0:	f000 fa34 	bl	800d22c <__assert_func>
 800cdc4:	f100 0514 	add.w	r5, r0, #20
 800cdc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdcc:	462b      	mov	r3, r5
 800cdce:	2200      	movs	r2, #0
 800cdd0:	4543      	cmp	r3, r8
 800cdd2:	d321      	bcc.n	800ce18 <__multiply+0x98>
 800cdd4:	f104 0314 	add.w	r3, r4, #20
 800cdd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cddc:	f109 0314 	add.w	r3, r9, #20
 800cde0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cde4:	9202      	str	r2, [sp, #8]
 800cde6:	1b3a      	subs	r2, r7, r4
 800cde8:	3a15      	subs	r2, #21
 800cdea:	f022 0203 	bic.w	r2, r2, #3
 800cdee:	3204      	adds	r2, #4
 800cdf0:	f104 0115 	add.w	r1, r4, #21
 800cdf4:	428f      	cmp	r7, r1
 800cdf6:	bf38      	it	cc
 800cdf8:	2204      	movcc	r2, #4
 800cdfa:	9201      	str	r2, [sp, #4]
 800cdfc:	9a02      	ldr	r2, [sp, #8]
 800cdfe:	9303      	str	r3, [sp, #12]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d80c      	bhi.n	800ce1e <__multiply+0x9e>
 800ce04:	2e00      	cmp	r6, #0
 800ce06:	dd03      	ble.n	800ce10 <__multiply+0x90>
 800ce08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d059      	beq.n	800cec4 <__multiply+0x144>
 800ce10:	6106      	str	r6, [r0, #16]
 800ce12:	b005      	add	sp, #20
 800ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	f843 2b04 	str.w	r2, [r3], #4
 800ce1c:	e7d8      	b.n	800cdd0 <__multiply+0x50>
 800ce1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	d023      	beq.n	800ce70 <__multiply+0xf0>
 800ce28:	f104 0e14 	add.w	lr, r4, #20
 800ce2c:	46a9      	mov	r9, r5
 800ce2e:	f04f 0c00 	mov.w	ip, #0
 800ce32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce36:	f8d9 1000 	ldr.w	r1, [r9]
 800ce3a:	fa1f fb82 	uxth.w	fp, r2
 800ce3e:	b289      	uxth	r1, r1
 800ce40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce44:	4461      	add	r1, ip
 800ce46:	f8d9 c000 	ldr.w	ip, [r9]
 800ce4a:	0c12      	lsrs	r2, r2, #16
 800ce4c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce50:	fb0a c202 	mla	r2, sl, r2, ip
 800ce54:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce58:	b289      	uxth	r1, r1
 800ce5a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce5e:	4577      	cmp	r7, lr
 800ce60:	f849 1b04 	str.w	r1, [r9], #4
 800ce64:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce68:	d8e3      	bhi.n	800ce32 <__multiply+0xb2>
 800ce6a:	9a01      	ldr	r2, [sp, #4]
 800ce6c:	f845 c002 	str.w	ip, [r5, r2]
 800ce70:	9a03      	ldr	r2, [sp, #12]
 800ce72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce76:	3304      	adds	r3, #4
 800ce78:	f1b9 0f00 	cmp.w	r9, #0
 800ce7c:	d020      	beq.n	800cec0 <__multiply+0x140>
 800ce7e:	6829      	ldr	r1, [r5, #0]
 800ce80:	f104 0c14 	add.w	ip, r4, #20
 800ce84:	46ae      	mov	lr, r5
 800ce86:	f04f 0a00 	mov.w	sl, #0
 800ce8a:	f8bc b000 	ldrh.w	fp, [ip]
 800ce8e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce92:	fb09 220b 	mla	r2, r9, fp, r2
 800ce96:	4492      	add	sl, r2
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce9e:	f84e 1b04 	str.w	r1, [lr], #4
 800cea2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cea6:	f8be 1000 	ldrh.w	r1, [lr]
 800ceaa:	0c12      	lsrs	r2, r2, #16
 800ceac:	fb09 1102 	mla	r1, r9, r2, r1
 800ceb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ceb4:	4567      	cmp	r7, ip
 800ceb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ceba:	d8e6      	bhi.n	800ce8a <__multiply+0x10a>
 800cebc:	9a01      	ldr	r2, [sp, #4]
 800cebe:	50a9      	str	r1, [r5, r2]
 800cec0:	3504      	adds	r5, #4
 800cec2:	e79b      	b.n	800cdfc <__multiply+0x7c>
 800cec4:	3e01      	subs	r6, #1
 800cec6:	e79d      	b.n	800ce04 <__multiply+0x84>
 800cec8:	080123b7 	.word	0x080123b7
 800cecc:	080123c8 	.word	0x080123c8

0800ced0 <__pow5mult>:
 800ced0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced4:	4615      	mov	r5, r2
 800ced6:	f012 0203 	ands.w	r2, r2, #3
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	d007      	beq.n	800cef0 <__pow5mult+0x20>
 800cee0:	4c25      	ldr	r4, [pc, #148]	; (800cf78 <__pow5mult+0xa8>)
 800cee2:	3a01      	subs	r2, #1
 800cee4:	2300      	movs	r3, #0
 800cee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceea:	f7ff feed 	bl	800ccc8 <__multadd>
 800ceee:	4607      	mov	r7, r0
 800cef0:	10ad      	asrs	r5, r5, #2
 800cef2:	d03d      	beq.n	800cf70 <__pow5mult+0xa0>
 800cef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cef6:	b97c      	cbnz	r4, 800cf18 <__pow5mult+0x48>
 800cef8:	2010      	movs	r0, #16
 800cefa:	f7ff fa67 	bl	800c3cc <malloc>
 800cefe:	4602      	mov	r2, r0
 800cf00:	6270      	str	r0, [r6, #36]	; 0x24
 800cf02:	b928      	cbnz	r0, 800cf10 <__pow5mult+0x40>
 800cf04:	4b1d      	ldr	r3, [pc, #116]	; (800cf7c <__pow5mult+0xac>)
 800cf06:	481e      	ldr	r0, [pc, #120]	; (800cf80 <__pow5mult+0xb0>)
 800cf08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf0c:	f000 f98e 	bl	800d22c <__assert_func>
 800cf10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf14:	6004      	str	r4, [r0, #0]
 800cf16:	60c4      	str	r4, [r0, #12]
 800cf18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf20:	b94c      	cbnz	r4, 800cf36 <__pow5mult+0x66>
 800cf22:	f240 2171 	movw	r1, #625	; 0x271
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7ff ff14 	bl	800cd54 <__i2b>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf32:	4604      	mov	r4, r0
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	f04f 0900 	mov.w	r9, #0
 800cf3a:	07eb      	lsls	r3, r5, #31
 800cf3c:	d50a      	bpl.n	800cf54 <__pow5mult+0x84>
 800cf3e:	4639      	mov	r1, r7
 800cf40:	4622      	mov	r2, r4
 800cf42:	4630      	mov	r0, r6
 800cf44:	f7ff ff1c 	bl	800cd80 <__multiply>
 800cf48:	4639      	mov	r1, r7
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7ff fe99 	bl	800cc84 <_Bfree>
 800cf52:	4647      	mov	r7, r8
 800cf54:	106d      	asrs	r5, r5, #1
 800cf56:	d00b      	beq.n	800cf70 <__pow5mult+0xa0>
 800cf58:	6820      	ldr	r0, [r4, #0]
 800cf5a:	b938      	cbnz	r0, 800cf6c <__pow5mult+0x9c>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4621      	mov	r1, r4
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff ff0d 	bl	800cd80 <__multiply>
 800cf66:	6020      	str	r0, [r4, #0]
 800cf68:	f8c0 9000 	str.w	r9, [r0]
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	e7e4      	b.n	800cf3a <__pow5mult+0x6a>
 800cf70:	4638      	mov	r0, r7
 800cf72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf76:	bf00      	nop
 800cf78:	08012198 	.word	0x08012198
 800cf7c:	08012346 	.word	0x08012346
 800cf80:	080123c8 	.word	0x080123c8

0800cf84 <__lshift>:
 800cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf88:	460c      	mov	r4, r1
 800cf8a:	6849      	ldr	r1, [r1, #4]
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	4607      	mov	r7, r0
 800cf96:	4691      	mov	r9, r2
 800cf98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf9c:	f108 0601 	add.w	r6, r8, #1
 800cfa0:	42b3      	cmp	r3, r6
 800cfa2:	db0b      	blt.n	800cfbc <__lshift+0x38>
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff fe2d 	bl	800cc04 <_Balloc>
 800cfaa:	4605      	mov	r5, r0
 800cfac:	b948      	cbnz	r0, 800cfc2 <__lshift+0x3e>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	4b2a      	ldr	r3, [pc, #168]	; (800d05c <__lshift+0xd8>)
 800cfb2:	482b      	ldr	r0, [pc, #172]	; (800d060 <__lshift+0xdc>)
 800cfb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfb8:	f000 f938 	bl	800d22c <__assert_func>
 800cfbc:	3101      	adds	r1, #1
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	e7ee      	b.n	800cfa0 <__lshift+0x1c>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	f100 0114 	add.w	r1, r0, #20
 800cfc8:	f100 0210 	add.w	r2, r0, #16
 800cfcc:	4618      	mov	r0, r3
 800cfce:	4553      	cmp	r3, sl
 800cfd0:	db37      	blt.n	800d042 <__lshift+0xbe>
 800cfd2:	6920      	ldr	r0, [r4, #16]
 800cfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfd8:	f104 0314 	add.w	r3, r4, #20
 800cfdc:	f019 091f 	ands.w	r9, r9, #31
 800cfe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfe4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cfe8:	d02f      	beq.n	800d04a <__lshift+0xc6>
 800cfea:	f1c9 0e20 	rsb	lr, r9, #32
 800cfee:	468a      	mov	sl, r1
 800cff0:	f04f 0c00 	mov.w	ip, #0
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	fa02 f209 	lsl.w	r2, r2, r9
 800cffa:	ea42 020c 	orr.w	r2, r2, ip
 800cffe:	f84a 2b04 	str.w	r2, [sl], #4
 800d002:	f853 2b04 	ldr.w	r2, [r3], #4
 800d006:	4298      	cmp	r0, r3
 800d008:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d00c:	d8f2      	bhi.n	800cff4 <__lshift+0x70>
 800d00e:	1b03      	subs	r3, r0, r4
 800d010:	3b15      	subs	r3, #21
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	3304      	adds	r3, #4
 800d018:	f104 0215 	add.w	r2, r4, #21
 800d01c:	4290      	cmp	r0, r2
 800d01e:	bf38      	it	cc
 800d020:	2304      	movcc	r3, #4
 800d022:	f841 c003 	str.w	ip, [r1, r3]
 800d026:	f1bc 0f00 	cmp.w	ip, #0
 800d02a:	d001      	beq.n	800d030 <__lshift+0xac>
 800d02c:	f108 0602 	add.w	r6, r8, #2
 800d030:	3e01      	subs	r6, #1
 800d032:	4638      	mov	r0, r7
 800d034:	612e      	str	r6, [r5, #16]
 800d036:	4621      	mov	r1, r4
 800d038:	f7ff fe24 	bl	800cc84 <_Bfree>
 800d03c:	4628      	mov	r0, r5
 800d03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d042:	f842 0f04 	str.w	r0, [r2, #4]!
 800d046:	3301      	adds	r3, #1
 800d048:	e7c1      	b.n	800cfce <__lshift+0x4a>
 800d04a:	3904      	subs	r1, #4
 800d04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d050:	f841 2f04 	str.w	r2, [r1, #4]!
 800d054:	4298      	cmp	r0, r3
 800d056:	d8f9      	bhi.n	800d04c <__lshift+0xc8>
 800d058:	e7ea      	b.n	800d030 <__lshift+0xac>
 800d05a:	bf00      	nop
 800d05c:	080123b7 	.word	0x080123b7
 800d060:	080123c8 	.word	0x080123c8

0800d064 <__mdiff>:
 800d064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	460d      	mov	r5, r1
 800d06a:	4607      	mov	r7, r0
 800d06c:	4611      	mov	r1, r2
 800d06e:	4628      	mov	r0, r5
 800d070:	4614      	mov	r4, r2
 800d072:	f003 f9eb 	bl	801044c <__mcmp>
 800d076:	1e06      	subs	r6, r0, #0
 800d078:	d111      	bne.n	800d09e <__mdiff+0x3a>
 800d07a:	4631      	mov	r1, r6
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7ff fdc1 	bl	800cc04 <_Balloc>
 800d082:	4602      	mov	r2, r0
 800d084:	b928      	cbnz	r0, 800d092 <__mdiff+0x2e>
 800d086:	4b39      	ldr	r3, [pc, #228]	; (800d16c <__mdiff+0x108>)
 800d088:	f240 2132 	movw	r1, #562	; 0x232
 800d08c:	4838      	ldr	r0, [pc, #224]	; (800d170 <__mdiff+0x10c>)
 800d08e:	f000 f8cd 	bl	800d22c <__assert_func>
 800d092:	2301      	movs	r3, #1
 800d094:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d098:	4610      	mov	r0, r2
 800d09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09e:	bfa4      	itt	ge
 800d0a0:	4623      	movge	r3, r4
 800d0a2:	462c      	movge	r4, r5
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	6861      	ldr	r1, [r4, #4]
 800d0a8:	bfa6      	itte	ge
 800d0aa:	461d      	movge	r5, r3
 800d0ac:	2600      	movge	r6, #0
 800d0ae:	2601      	movlt	r6, #1
 800d0b0:	f7ff fda8 	bl	800cc04 <_Balloc>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	b918      	cbnz	r0, 800d0c0 <__mdiff+0x5c>
 800d0b8:	4b2c      	ldr	r3, [pc, #176]	; (800d16c <__mdiff+0x108>)
 800d0ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d0be:	e7e5      	b.n	800d08c <__mdiff+0x28>
 800d0c0:	6927      	ldr	r7, [r4, #16]
 800d0c2:	60c6      	str	r6, [r0, #12]
 800d0c4:	692e      	ldr	r6, [r5, #16]
 800d0c6:	f104 0014 	add.w	r0, r4, #20
 800d0ca:	f105 0914 	add.w	r9, r5, #20
 800d0ce:	f102 0e14 	add.w	lr, r2, #20
 800d0d2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800d0d6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0da:	3410      	adds	r4, #16
 800d0dc:	46f2      	mov	sl, lr
 800d0de:	2100      	movs	r1, #0
 800d0e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0e4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d0e8:	fa1f f883 	uxth.w	r8, r3
 800d0ec:	fa11 f18b 	uxtah	r1, r1, fp
 800d0f0:	0c1b      	lsrs	r3, r3, #16
 800d0f2:	eba1 0808 	sub.w	r8, r1, r8
 800d0f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d0fe:	fa1f f888 	uxth.w	r8, r8
 800d102:	1419      	asrs	r1, r3, #16
 800d104:	454e      	cmp	r6, r9
 800d106:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d10a:	f84a 3b04 	str.w	r3, [sl], #4
 800d10e:	d8e7      	bhi.n	800d0e0 <__mdiff+0x7c>
 800d110:	1b73      	subs	r3, r6, r5
 800d112:	3b15      	subs	r3, #21
 800d114:	f023 0303 	bic.w	r3, r3, #3
 800d118:	3304      	adds	r3, #4
 800d11a:	3515      	adds	r5, #21
 800d11c:	42ae      	cmp	r6, r5
 800d11e:	bf38      	it	cc
 800d120:	2304      	movcc	r3, #4
 800d122:	4418      	add	r0, r3
 800d124:	4473      	add	r3, lr
 800d126:	469e      	mov	lr, r3
 800d128:	4606      	mov	r6, r0
 800d12a:	4566      	cmp	r6, ip
 800d12c:	d30e      	bcc.n	800d14c <__mdiff+0xe8>
 800d12e:	f10c 0103 	add.w	r1, ip, #3
 800d132:	1a09      	subs	r1, r1, r0
 800d134:	f021 0103 	bic.w	r1, r1, #3
 800d138:	3803      	subs	r0, #3
 800d13a:	4584      	cmp	ip, r0
 800d13c:	bf38      	it	cc
 800d13e:	2100      	movcc	r1, #0
 800d140:	4419      	add	r1, r3
 800d142:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d146:	b17b      	cbz	r3, 800d168 <__mdiff+0x104>
 800d148:	6117      	str	r7, [r2, #16]
 800d14a:	e7a5      	b.n	800d098 <__mdiff+0x34>
 800d14c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d150:	fa11 f488 	uxtah	r4, r1, r8
 800d154:	1425      	asrs	r5, r4, #16
 800d156:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800d15a:	b2a4      	uxth	r4, r4
 800d15c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d160:	f84e 4b04 	str.w	r4, [lr], #4
 800d164:	1429      	asrs	r1, r5, #16
 800d166:	e7e0      	b.n	800d12a <__mdiff+0xc6>
 800d168:	3f01      	subs	r7, #1
 800d16a:	e7ea      	b.n	800d142 <__mdiff+0xde>
 800d16c:	080123b7 	.word	0x080123b7
 800d170:	080123c8 	.word	0x080123c8

0800d174 <__d2b>:
 800d174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d178:	2101      	movs	r1, #1
 800d17a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d17e:	4690      	mov	r8, r2
 800d180:	461d      	mov	r5, r3
 800d182:	f7ff fd3f 	bl	800cc04 <_Balloc>
 800d186:	4604      	mov	r4, r0
 800d188:	b930      	cbnz	r0, 800d198 <__d2b+0x24>
 800d18a:	4602      	mov	r2, r0
 800d18c:	4b25      	ldr	r3, [pc, #148]	; (800d224 <__d2b+0xb0>)
 800d18e:	4826      	ldr	r0, [pc, #152]	; (800d228 <__d2b+0xb4>)
 800d190:	f240 310a 	movw	r1, #778	; 0x30a
 800d194:	f000 f84a 	bl	800d22c <__assert_func>
 800d198:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d19c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d1a0:	bb2d      	cbnz	r5, 800d1ee <__d2b+0x7a>
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d1a8:	d026      	beq.n	800d1f8 <__d2b+0x84>
 800d1aa:	4668      	mov	r0, sp
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	f003 f920 	bl	80103f2 <__lo0bits>
 800d1b2:	9900      	ldr	r1, [sp, #0]
 800d1b4:	b1f0      	cbz	r0, 800d1f4 <__d2b+0x80>
 800d1b6:	9a01      	ldr	r2, [sp, #4]
 800d1b8:	f1c0 0320 	rsb	r3, r0, #32
 800d1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c0:	430b      	orrs	r3, r1
 800d1c2:	40c2      	lsrs	r2, r0
 800d1c4:	6163      	str	r3, [r4, #20]
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	61a3      	str	r3, [r4, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bf14      	ite	ne
 800d1d0:	2102      	movne	r1, #2
 800d1d2:	2101      	moveq	r1, #1
 800d1d4:	6121      	str	r1, [r4, #16]
 800d1d6:	b1c5      	cbz	r5, 800d20a <__d2b+0x96>
 800d1d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d1dc:	4405      	add	r5, r0
 800d1de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1e2:	603d      	str	r5, [r7, #0]
 800d1e4:	6030      	str	r0, [r6, #0]
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	b002      	add	sp, #8
 800d1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1f2:	e7d6      	b.n	800d1a2 <__d2b+0x2e>
 800d1f4:	6161      	str	r1, [r4, #20]
 800d1f6:	e7e7      	b.n	800d1c8 <__d2b+0x54>
 800d1f8:	a801      	add	r0, sp, #4
 800d1fa:	f003 f8fa 	bl	80103f2 <__lo0bits>
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	6163      	str	r3, [r4, #20]
 800d202:	2101      	movs	r1, #1
 800d204:	6121      	str	r1, [r4, #16]
 800d206:	3020      	adds	r0, #32
 800d208:	e7e5      	b.n	800d1d6 <__d2b+0x62>
 800d20a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d20e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d212:	6038      	str	r0, [r7, #0]
 800d214:	6918      	ldr	r0, [r3, #16]
 800d216:	f003 f8cc 	bl	80103b2 <__hi0bits>
 800d21a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d21e:	6031      	str	r1, [r6, #0]
 800d220:	e7e1      	b.n	800d1e6 <__d2b+0x72>
 800d222:	bf00      	nop
 800d224:	080123b7 	.word	0x080123b7
 800d228:	080123c8 	.word	0x080123c8

0800d22c <__assert_func>:
 800d22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d22e:	4614      	mov	r4, r2
 800d230:	461a      	mov	r2, r3
 800d232:	4b09      	ldr	r3, [pc, #36]	; (800d258 <__assert_func+0x2c>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4605      	mov	r5, r0
 800d238:	68d8      	ldr	r0, [r3, #12]
 800d23a:	b14c      	cbz	r4, 800d250 <__assert_func+0x24>
 800d23c:	4b07      	ldr	r3, [pc, #28]	; (800d25c <__assert_func+0x30>)
 800d23e:	9100      	str	r1, [sp, #0]
 800d240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d244:	4906      	ldr	r1, [pc, #24]	; (800d260 <__assert_func+0x34>)
 800d246:	462b      	mov	r3, r5
 800d248:	f000 f80e 	bl	800d268 <fiprintf>
 800d24c:	f003 f96d 	bl	801052a <abort>
 800d250:	4b04      	ldr	r3, [pc, #16]	; (800d264 <__assert_func+0x38>)
 800d252:	461c      	mov	r4, r3
 800d254:	e7f3      	b.n	800d23e <__assert_func+0x12>
 800d256:	bf00      	nop
 800d258:	200000d4 	.word	0x200000d4
 800d25c:	08012423 	.word	0x08012423
 800d260:	08012430 	.word	0x08012430
 800d264:	0801245e 	.word	0x0801245e

0800d268 <fiprintf>:
 800d268:	b40e      	push	{r1, r2, r3}
 800d26a:	b503      	push	{r0, r1, lr}
 800d26c:	4601      	mov	r1, r0
 800d26e:	ab03      	add	r3, sp, #12
 800d270:	4805      	ldr	r0, [pc, #20]	; (800d288 <fiprintf+0x20>)
 800d272:	f853 2b04 	ldr.w	r2, [r3], #4
 800d276:	6800      	ldr	r0, [r0, #0]
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	f000 f807 	bl	800d28c <_vfiprintf_r>
 800d27e:	b002      	add	sp, #8
 800d280:	f85d eb04 	ldr.w	lr, [sp], #4
 800d284:	b003      	add	sp, #12
 800d286:	4770      	bx	lr
 800d288:	200000d4 	.word	0x200000d4

0800d28c <_vfiprintf_r>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	460d      	mov	r5, r1
 800d292:	b09d      	sub	sp, #116	; 0x74
 800d294:	4614      	mov	r4, r2
 800d296:	4698      	mov	r8, r3
 800d298:	4606      	mov	r6, r0
 800d29a:	b118      	cbz	r0, 800d2a4 <_vfiprintf_r+0x18>
 800d29c:	6983      	ldr	r3, [r0, #24]
 800d29e:	b90b      	cbnz	r3, 800d2a4 <_vfiprintf_r+0x18>
 800d2a0:	f000 fae4 	bl	800d86c <__sinit>
 800d2a4:	4b89      	ldr	r3, [pc, #548]	; (800d4cc <_vfiprintf_r+0x240>)
 800d2a6:	429d      	cmp	r5, r3
 800d2a8:	d11b      	bne.n	800d2e2 <_vfiprintf_r+0x56>
 800d2aa:	6875      	ldr	r5, [r6, #4]
 800d2ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ae:	07d9      	lsls	r1, r3, #31
 800d2b0:	d405      	bmi.n	800d2be <_vfiprintf_r+0x32>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	059a      	lsls	r2, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <_vfiprintf_r+0x32>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ba:	f001 fa0a 	bl	800e6d2 <__retarget_lock_acquire_recursive>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	071b      	lsls	r3, r3, #28
 800d2c2:	d501      	bpl.n	800d2c8 <_vfiprintf_r+0x3c>
 800d2c4:	692b      	ldr	r3, [r5, #16]
 800d2c6:	b9eb      	cbnz	r3, 800d304 <_vfiprintf_r+0x78>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f000 f960 	bl	800d590 <__swsetup_r>
 800d2d0:	b1c0      	cbz	r0, 800d304 <_vfiprintf_r+0x78>
 800d2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2d4:	07dc      	lsls	r4, r3, #31
 800d2d6:	d50e      	bpl.n	800d2f6 <_vfiprintf_r+0x6a>
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2dc:	b01d      	add	sp, #116	; 0x74
 800d2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e2:	4b7b      	ldr	r3, [pc, #492]	; (800d4d0 <_vfiprintf_r+0x244>)
 800d2e4:	429d      	cmp	r5, r3
 800d2e6:	d101      	bne.n	800d2ec <_vfiprintf_r+0x60>
 800d2e8:	68b5      	ldr	r5, [r6, #8]
 800d2ea:	e7df      	b.n	800d2ac <_vfiprintf_r+0x20>
 800d2ec:	4b79      	ldr	r3, [pc, #484]	; (800d4d4 <_vfiprintf_r+0x248>)
 800d2ee:	429d      	cmp	r5, r3
 800d2f0:	bf08      	it	eq
 800d2f2:	68f5      	ldreq	r5, [r6, #12]
 800d2f4:	e7da      	b.n	800d2ac <_vfiprintf_r+0x20>
 800d2f6:	89ab      	ldrh	r3, [r5, #12]
 800d2f8:	0598      	lsls	r0, r3, #22
 800d2fa:	d4ed      	bmi.n	800d2d8 <_vfiprintf_r+0x4c>
 800d2fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2fe:	f001 f9f0 	bl	800e6e2 <__retarget_lock_release_recursive>
 800d302:	e7e9      	b.n	800d2d8 <_vfiprintf_r+0x4c>
 800d304:	2300      	movs	r3, #0
 800d306:	9309      	str	r3, [sp, #36]	; 0x24
 800d308:	2320      	movs	r3, #32
 800d30a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d30e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d312:	2330      	movs	r3, #48	; 0x30
 800d314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4d8 <_vfiprintf_r+0x24c>
 800d318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d31c:	f04f 0901 	mov.w	r9, #1
 800d320:	4623      	mov	r3, r4
 800d322:	469a      	mov	sl, r3
 800d324:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d328:	b10a      	cbz	r2, 800d32e <_vfiprintf_r+0xa2>
 800d32a:	2a25      	cmp	r2, #37	; 0x25
 800d32c:	d1f9      	bne.n	800d322 <_vfiprintf_r+0x96>
 800d32e:	ebba 0b04 	subs.w	fp, sl, r4
 800d332:	d00b      	beq.n	800d34c <_vfiprintf_r+0xc0>
 800d334:	465b      	mov	r3, fp
 800d336:	4622      	mov	r2, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	4630      	mov	r0, r6
 800d33c:	f003 f8d6 	bl	80104ec <__sfputs_r>
 800d340:	3001      	adds	r0, #1
 800d342:	f000 80aa 	beq.w	800d49a <_vfiprintf_r+0x20e>
 800d346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d348:	445a      	add	r2, fp
 800d34a:	9209      	str	r2, [sp, #36]	; 0x24
 800d34c:	f89a 3000 	ldrb.w	r3, [sl]
 800d350:	2b00      	cmp	r3, #0
 800d352:	f000 80a2 	beq.w	800d49a <_vfiprintf_r+0x20e>
 800d356:	2300      	movs	r3, #0
 800d358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d360:	f10a 0a01 	add.w	sl, sl, #1
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	9307      	str	r3, [sp, #28]
 800d368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d36c:	931a      	str	r3, [sp, #104]	; 0x68
 800d36e:	4654      	mov	r4, sl
 800d370:	2205      	movs	r2, #5
 800d372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d376:	4858      	ldr	r0, [pc, #352]	; (800d4d8 <_vfiprintf_r+0x24c>)
 800d378:	f7f2 ff12 	bl	80001a0 <memchr>
 800d37c:	9a04      	ldr	r2, [sp, #16]
 800d37e:	b9d8      	cbnz	r0, 800d3b8 <_vfiprintf_r+0x12c>
 800d380:	06d1      	lsls	r1, r2, #27
 800d382:	bf44      	itt	mi
 800d384:	2320      	movmi	r3, #32
 800d386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d38a:	0713      	lsls	r3, r2, #28
 800d38c:	bf44      	itt	mi
 800d38e:	232b      	movmi	r3, #43	; 0x2b
 800d390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d394:	f89a 3000 	ldrb.w	r3, [sl]
 800d398:	2b2a      	cmp	r3, #42	; 0x2a
 800d39a:	d015      	beq.n	800d3c8 <_vfiprintf_r+0x13c>
 800d39c:	9a07      	ldr	r2, [sp, #28]
 800d39e:	4654      	mov	r4, sl
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	f04f 0c0a 	mov.w	ip, #10
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ac:	3b30      	subs	r3, #48	; 0x30
 800d3ae:	2b09      	cmp	r3, #9
 800d3b0:	d94e      	bls.n	800d450 <_vfiprintf_r+0x1c4>
 800d3b2:	b1b0      	cbz	r0, 800d3e2 <_vfiprintf_r+0x156>
 800d3b4:	9207      	str	r2, [sp, #28]
 800d3b6:	e014      	b.n	800d3e2 <_vfiprintf_r+0x156>
 800d3b8:	eba0 0308 	sub.w	r3, r0, r8
 800d3bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	9304      	str	r3, [sp, #16]
 800d3c4:	46a2      	mov	sl, r4
 800d3c6:	e7d2      	b.n	800d36e <_vfiprintf_r+0xe2>
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	1d19      	adds	r1, r3, #4
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	9103      	str	r1, [sp, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	bfbb      	ittet	lt
 800d3d4:	425b      	neglt	r3, r3
 800d3d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3da:	9307      	strge	r3, [sp, #28]
 800d3dc:	9307      	strlt	r3, [sp, #28]
 800d3de:	bfb8      	it	lt
 800d3e0:	9204      	strlt	r2, [sp, #16]
 800d3e2:	7823      	ldrb	r3, [r4, #0]
 800d3e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3e6:	d10c      	bne.n	800d402 <_vfiprintf_r+0x176>
 800d3e8:	7863      	ldrb	r3, [r4, #1]
 800d3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ec:	d135      	bne.n	800d45a <_vfiprintf_r+0x1ce>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	1d1a      	adds	r2, r3, #4
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	9203      	str	r2, [sp, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bfb8      	it	lt
 800d3fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3fe:	3402      	adds	r4, #2
 800d400:	9305      	str	r3, [sp, #20]
 800d402:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d4dc <_vfiprintf_r+0x250>
 800d406:	7821      	ldrb	r1, [r4, #0]
 800d408:	2203      	movs	r2, #3
 800d40a:	4650      	mov	r0, sl
 800d40c:	f7f2 fec8 	bl	80001a0 <memchr>
 800d410:	b140      	cbz	r0, 800d424 <_vfiprintf_r+0x198>
 800d412:	2340      	movs	r3, #64	; 0x40
 800d414:	eba0 000a 	sub.w	r0, r0, sl
 800d418:	fa03 f000 	lsl.w	r0, r3, r0
 800d41c:	9b04      	ldr	r3, [sp, #16]
 800d41e:	4303      	orrs	r3, r0
 800d420:	3401      	adds	r4, #1
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d428:	482d      	ldr	r0, [pc, #180]	; (800d4e0 <_vfiprintf_r+0x254>)
 800d42a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d42e:	2206      	movs	r2, #6
 800d430:	f7f2 feb6 	bl	80001a0 <memchr>
 800d434:	2800      	cmp	r0, #0
 800d436:	d03f      	beq.n	800d4b8 <_vfiprintf_r+0x22c>
 800d438:	4b2a      	ldr	r3, [pc, #168]	; (800d4e4 <_vfiprintf_r+0x258>)
 800d43a:	bb1b      	cbnz	r3, 800d484 <_vfiprintf_r+0x1f8>
 800d43c:	9b03      	ldr	r3, [sp, #12]
 800d43e:	3307      	adds	r3, #7
 800d440:	f023 0307 	bic.w	r3, r3, #7
 800d444:	3308      	adds	r3, #8
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44a:	443b      	add	r3, r7
 800d44c:	9309      	str	r3, [sp, #36]	; 0x24
 800d44e:	e767      	b.n	800d320 <_vfiprintf_r+0x94>
 800d450:	fb0c 3202 	mla	r2, ip, r2, r3
 800d454:	460c      	mov	r4, r1
 800d456:	2001      	movs	r0, #1
 800d458:	e7a5      	b.n	800d3a6 <_vfiprintf_r+0x11a>
 800d45a:	2300      	movs	r3, #0
 800d45c:	3401      	adds	r4, #1
 800d45e:	9305      	str	r3, [sp, #20]
 800d460:	4619      	mov	r1, r3
 800d462:	f04f 0c0a 	mov.w	ip, #10
 800d466:	4620      	mov	r0, r4
 800d468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d46c:	3a30      	subs	r2, #48	; 0x30
 800d46e:	2a09      	cmp	r2, #9
 800d470:	d903      	bls.n	800d47a <_vfiprintf_r+0x1ee>
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0c5      	beq.n	800d402 <_vfiprintf_r+0x176>
 800d476:	9105      	str	r1, [sp, #20]
 800d478:	e7c3      	b.n	800d402 <_vfiprintf_r+0x176>
 800d47a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d47e:	4604      	mov	r4, r0
 800d480:	2301      	movs	r3, #1
 800d482:	e7f0      	b.n	800d466 <_vfiprintf_r+0x1da>
 800d484:	ab03      	add	r3, sp, #12
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	462a      	mov	r2, r5
 800d48a:	4b17      	ldr	r3, [pc, #92]	; (800d4e8 <_vfiprintf_r+0x25c>)
 800d48c:	a904      	add	r1, sp, #16
 800d48e:	4630      	mov	r0, r6
 800d490:	f7ff f848 	bl	800c524 <_printf_float>
 800d494:	4607      	mov	r7, r0
 800d496:	1c78      	adds	r0, r7, #1
 800d498:	d1d6      	bne.n	800d448 <_vfiprintf_r+0x1bc>
 800d49a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d49c:	07d9      	lsls	r1, r3, #31
 800d49e:	d405      	bmi.n	800d4ac <_vfiprintf_r+0x220>
 800d4a0:	89ab      	ldrh	r3, [r5, #12]
 800d4a2:	059a      	lsls	r2, r3, #22
 800d4a4:	d402      	bmi.n	800d4ac <_vfiprintf_r+0x220>
 800d4a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4a8:	f001 f91b 	bl	800e6e2 <__retarget_lock_release_recursive>
 800d4ac:	89ab      	ldrh	r3, [r5, #12]
 800d4ae:	065b      	lsls	r3, r3, #25
 800d4b0:	f53f af12 	bmi.w	800d2d8 <_vfiprintf_r+0x4c>
 800d4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4b6:	e711      	b.n	800d2dc <_vfiprintf_r+0x50>
 800d4b8:	ab03      	add	r3, sp, #12
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	462a      	mov	r2, r5
 800d4be:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <_vfiprintf_r+0x25c>)
 800d4c0:	a904      	add	r1, sp, #16
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f7ff fa58 	bl	800c978 <_printf_i>
 800d4c8:	e7e4      	b.n	800d494 <_vfiprintf_r+0x208>
 800d4ca:	bf00      	nop
 800d4cc:	080121c4 	.word	0x080121c4
 800d4d0:	080121e4 	.word	0x080121e4
 800d4d4:	080121a4 	.word	0x080121a4
 800d4d8:	08012469 	.word	0x08012469
 800d4dc:	0801246f 	.word	0x0801246f
 800d4e0:	08012473 	.word	0x08012473
 800d4e4:	0800c525 	.word	0x0800c525
 800d4e8:	080104ed 	.word	0x080104ed

0800d4ec <__swbuf_r>:
 800d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ee:	460e      	mov	r6, r1
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b118      	cbz	r0, 800d4fe <__swbuf_r+0x12>
 800d4f6:	6983      	ldr	r3, [r0, #24]
 800d4f8:	b90b      	cbnz	r3, 800d4fe <__swbuf_r+0x12>
 800d4fa:	f000 f9b7 	bl	800d86c <__sinit>
 800d4fe:	4b21      	ldr	r3, [pc, #132]	; (800d584 <__swbuf_r+0x98>)
 800d500:	429c      	cmp	r4, r3
 800d502:	d12b      	bne.n	800d55c <__swbuf_r+0x70>
 800d504:	686c      	ldr	r4, [r5, #4]
 800d506:	69a3      	ldr	r3, [r4, #24]
 800d508:	60a3      	str	r3, [r4, #8]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	071a      	lsls	r2, r3, #28
 800d50e:	d52f      	bpl.n	800d570 <__swbuf_r+0x84>
 800d510:	6923      	ldr	r3, [r4, #16]
 800d512:	b36b      	cbz	r3, 800d570 <__swbuf_r+0x84>
 800d514:	6923      	ldr	r3, [r4, #16]
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	1ac0      	subs	r0, r0, r3
 800d51a:	6963      	ldr	r3, [r4, #20]
 800d51c:	b2f6      	uxtb	r6, r6
 800d51e:	4283      	cmp	r3, r0
 800d520:	4637      	mov	r7, r6
 800d522:	dc04      	bgt.n	800d52e <__swbuf_r+0x42>
 800d524:	4621      	mov	r1, r4
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f922 	bl	800d770 <_fflush_r>
 800d52c:	bb30      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	3b01      	subs	r3, #1
 800d532:	60a3      	str	r3, [r4, #8]
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	6022      	str	r2, [r4, #0]
 800d53a:	701e      	strb	r6, [r3, #0]
 800d53c:	6963      	ldr	r3, [r4, #20]
 800d53e:	3001      	adds	r0, #1
 800d540:	4283      	cmp	r3, r0
 800d542:	d004      	beq.n	800d54e <__swbuf_r+0x62>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	07db      	lsls	r3, r3, #31
 800d548:	d506      	bpl.n	800d558 <__swbuf_r+0x6c>
 800d54a:	2e0a      	cmp	r6, #10
 800d54c:	d104      	bne.n	800d558 <__swbuf_r+0x6c>
 800d54e:	4621      	mov	r1, r4
 800d550:	4628      	mov	r0, r5
 800d552:	f000 f90d 	bl	800d770 <_fflush_r>
 800d556:	b988      	cbnz	r0, 800d57c <__swbuf_r+0x90>
 800d558:	4638      	mov	r0, r7
 800d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <__swbuf_r+0x9c>)
 800d55e:	429c      	cmp	r4, r3
 800d560:	d101      	bne.n	800d566 <__swbuf_r+0x7a>
 800d562:	68ac      	ldr	r4, [r5, #8]
 800d564:	e7cf      	b.n	800d506 <__swbuf_r+0x1a>
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <__swbuf_r+0xa0>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	bf08      	it	eq
 800d56c:	68ec      	ldreq	r4, [r5, #12]
 800d56e:	e7ca      	b.n	800d506 <__swbuf_r+0x1a>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 f80c 	bl	800d590 <__swsetup_r>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d0cb      	beq.n	800d514 <__swbuf_r+0x28>
 800d57c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d580:	e7ea      	b.n	800d558 <__swbuf_r+0x6c>
 800d582:	bf00      	nop
 800d584:	080121c4 	.word	0x080121c4
 800d588:	080121e4 	.word	0x080121e4
 800d58c:	080121a4 	.word	0x080121a4

0800d590 <__swsetup_r>:
 800d590:	4b32      	ldr	r3, [pc, #200]	; (800d65c <__swsetup_r+0xcc>)
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	681d      	ldr	r5, [r3, #0]
 800d596:	4606      	mov	r6, r0
 800d598:	460c      	mov	r4, r1
 800d59a:	b125      	cbz	r5, 800d5a6 <__swsetup_r+0x16>
 800d59c:	69ab      	ldr	r3, [r5, #24]
 800d59e:	b913      	cbnz	r3, 800d5a6 <__swsetup_r+0x16>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f000 f963 	bl	800d86c <__sinit>
 800d5a6:	4b2e      	ldr	r3, [pc, #184]	; (800d660 <__swsetup_r+0xd0>)
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d10f      	bne.n	800d5cc <__swsetup_r+0x3c>
 800d5ac:	686c      	ldr	r4, [r5, #4]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5b4:	0719      	lsls	r1, r3, #28
 800d5b6:	d42c      	bmi.n	800d612 <__swsetup_r+0x82>
 800d5b8:	06dd      	lsls	r5, r3, #27
 800d5ba:	d411      	bmi.n	800d5e0 <__swsetup_r+0x50>
 800d5bc:	2309      	movs	r3, #9
 800d5be:	6033      	str	r3, [r6, #0]
 800d5c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ca:	e03e      	b.n	800d64a <__swsetup_r+0xba>
 800d5cc:	4b25      	ldr	r3, [pc, #148]	; (800d664 <__swsetup_r+0xd4>)
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	d101      	bne.n	800d5d6 <__swsetup_r+0x46>
 800d5d2:	68ac      	ldr	r4, [r5, #8]
 800d5d4:	e7eb      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5d6:	4b24      	ldr	r3, [pc, #144]	; (800d668 <__swsetup_r+0xd8>)
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	bf08      	it	eq
 800d5dc:	68ec      	ldreq	r4, [r5, #12]
 800d5de:	e7e6      	b.n	800d5ae <__swsetup_r+0x1e>
 800d5e0:	0758      	lsls	r0, r3, #29
 800d5e2:	d512      	bpl.n	800d60a <__swsetup_r+0x7a>
 800d5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e6:	b141      	cbz	r1, 800d5fa <__swsetup_r+0x6a>
 800d5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	d002      	beq.n	800d5f6 <__swsetup_r+0x66>
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f7fe fef3 	bl	800c3dc <_free_r>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	2300      	movs	r3, #0
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f043 0308 	orr.w	r3, r3, #8
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	b94b      	cbnz	r3, 800d62a <__swsetup_r+0x9a>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d620:	d003      	beq.n	800d62a <__swsetup_r+0x9a>
 800d622:	4621      	mov	r1, r4
 800d624:	4630      	mov	r0, r6
 800d626:	f000 f99f 	bl	800d968 <__smakebuf_r>
 800d62a:	89a0      	ldrh	r0, [r4, #12]
 800d62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d630:	f010 0301 	ands.w	r3, r0, #1
 800d634:	d00a      	beq.n	800d64c <__swsetup_r+0xbc>
 800d636:	2300      	movs	r3, #0
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	6963      	ldr	r3, [r4, #20]
 800d63c:	425b      	negs	r3, r3
 800d63e:	61a3      	str	r3, [r4, #24]
 800d640:	6923      	ldr	r3, [r4, #16]
 800d642:	b943      	cbnz	r3, 800d656 <__swsetup_r+0xc6>
 800d644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d648:	d1ba      	bne.n	800d5c0 <__swsetup_r+0x30>
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	0781      	lsls	r1, r0, #30
 800d64e:	bf58      	it	pl
 800d650:	6963      	ldrpl	r3, [r4, #20]
 800d652:	60a3      	str	r3, [r4, #8]
 800d654:	e7f4      	b.n	800d640 <__swsetup_r+0xb0>
 800d656:	2000      	movs	r0, #0
 800d658:	e7f7      	b.n	800d64a <__swsetup_r+0xba>
 800d65a:	bf00      	nop
 800d65c:	200000d4 	.word	0x200000d4
 800d660:	080121c4 	.word	0x080121c4
 800d664:	080121e4 	.word	0x080121e4
 800d668:	080121a4 	.word	0x080121a4

0800d66c <__sflush_r>:
 800d66c:	898a      	ldrh	r2, [r1, #12]
 800d66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d670:	4605      	mov	r5, r0
 800d672:	0710      	lsls	r0, r2, #28
 800d674:	460c      	mov	r4, r1
 800d676:	d457      	bmi.n	800d728 <__sflush_r+0xbc>
 800d678:	684b      	ldr	r3, [r1, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dc04      	bgt.n	800d688 <__sflush_r+0x1c>
 800d67e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	dc01      	bgt.n	800d688 <__sflush_r+0x1c>
 800d684:	2000      	movs	r0, #0
 800d686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d0fa      	beq.n	800d684 <__sflush_r+0x18>
 800d68e:	2300      	movs	r3, #0
 800d690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d694:	682f      	ldr	r7, [r5, #0]
 800d696:	602b      	str	r3, [r5, #0]
 800d698:	d032      	beq.n	800d700 <__sflush_r+0x94>
 800d69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	075a      	lsls	r2, r3, #29
 800d6a0:	d505      	bpl.n	800d6ae <__sflush_r+0x42>
 800d6a2:	6863      	ldr	r3, [r4, #4]
 800d6a4:	1ac0      	subs	r0, r0, r3
 800d6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6a8:	b10b      	cbz	r3, 800d6ae <__sflush_r+0x42>
 800d6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ac:	1ac0      	subs	r0, r0, r3
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b4:	6a21      	ldr	r1, [r4, #32]
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	47b0      	blx	r6
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	d106      	bne.n	800d6ce <__sflush_r+0x62>
 800d6c0:	6829      	ldr	r1, [r5, #0]
 800d6c2:	291d      	cmp	r1, #29
 800d6c4:	d82c      	bhi.n	800d720 <__sflush_r+0xb4>
 800d6c6:	4a29      	ldr	r2, [pc, #164]	; (800d76c <__sflush_r+0x100>)
 800d6c8:	40ca      	lsrs	r2, r1
 800d6ca:	07d6      	lsls	r6, r2, #31
 800d6cc:	d528      	bpl.n	800d720 <__sflush_r+0xb4>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	6062      	str	r2, [r4, #4]
 800d6d2:	04d9      	lsls	r1, r3, #19
 800d6d4:	6922      	ldr	r2, [r4, #16]
 800d6d6:	6022      	str	r2, [r4, #0]
 800d6d8:	d504      	bpl.n	800d6e4 <__sflush_r+0x78>
 800d6da:	1c42      	adds	r2, r0, #1
 800d6dc:	d101      	bne.n	800d6e2 <__sflush_r+0x76>
 800d6de:	682b      	ldr	r3, [r5, #0]
 800d6e0:	b903      	cbnz	r3, 800d6e4 <__sflush_r+0x78>
 800d6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e6:	602f      	str	r7, [r5, #0]
 800d6e8:	2900      	cmp	r1, #0
 800d6ea:	d0cb      	beq.n	800d684 <__sflush_r+0x18>
 800d6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	d002      	beq.n	800d6fa <__sflush_r+0x8e>
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7fe fe71 	bl	800c3dc <_free_r>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800d6fe:	e7c2      	b.n	800d686 <__sflush_r+0x1a>
 800d700:	6a21      	ldr	r1, [r4, #32]
 800d702:	2301      	movs	r3, #1
 800d704:	4628      	mov	r0, r5
 800d706:	47b0      	blx	r6
 800d708:	1c41      	adds	r1, r0, #1
 800d70a:	d1c7      	bne.n	800d69c <__sflush_r+0x30>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0c4      	beq.n	800d69c <__sflush_r+0x30>
 800d712:	2b1d      	cmp	r3, #29
 800d714:	d001      	beq.n	800d71a <__sflush_r+0xae>
 800d716:	2b16      	cmp	r3, #22
 800d718:	d101      	bne.n	800d71e <__sflush_r+0xb2>
 800d71a:	602f      	str	r7, [r5, #0]
 800d71c:	e7b2      	b.n	800d684 <__sflush_r+0x18>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	e7ae      	b.n	800d686 <__sflush_r+0x1a>
 800d728:	690f      	ldr	r7, [r1, #16]
 800d72a:	2f00      	cmp	r7, #0
 800d72c:	d0aa      	beq.n	800d684 <__sflush_r+0x18>
 800d72e:	0793      	lsls	r3, r2, #30
 800d730:	680e      	ldr	r6, [r1, #0]
 800d732:	bf08      	it	eq
 800d734:	694b      	ldreq	r3, [r1, #20]
 800d736:	600f      	str	r7, [r1, #0]
 800d738:	bf18      	it	ne
 800d73a:	2300      	movne	r3, #0
 800d73c:	1bf6      	subs	r6, r6, r7
 800d73e:	608b      	str	r3, [r1, #8]
 800d740:	2e00      	cmp	r6, #0
 800d742:	dd9f      	ble.n	800d684 <__sflush_r+0x18>
 800d744:	6a21      	ldr	r1, [r4, #32]
 800d746:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d74a:	4633      	mov	r3, r6
 800d74c:	463a      	mov	r2, r7
 800d74e:	4628      	mov	r0, r5
 800d750:	47e0      	blx	ip
 800d752:	2800      	cmp	r0, #0
 800d754:	dc06      	bgt.n	800d764 <__sflush_r+0xf8>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75c:	81a3      	strh	r3, [r4, #12]
 800d75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d762:	e790      	b.n	800d686 <__sflush_r+0x1a>
 800d764:	4407      	add	r7, r0
 800d766:	1a36      	subs	r6, r6, r0
 800d768:	e7ea      	b.n	800d740 <__sflush_r+0xd4>
 800d76a:	bf00      	nop
 800d76c:	20400001 	.word	0x20400001

0800d770 <_fflush_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	690b      	ldr	r3, [r1, #16]
 800d774:	4605      	mov	r5, r0
 800d776:	460c      	mov	r4, r1
 800d778:	b913      	cbnz	r3, 800d780 <_fflush_r+0x10>
 800d77a:	2500      	movs	r5, #0
 800d77c:	4628      	mov	r0, r5
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	b118      	cbz	r0, 800d78a <_fflush_r+0x1a>
 800d782:	6983      	ldr	r3, [r0, #24]
 800d784:	b90b      	cbnz	r3, 800d78a <_fflush_r+0x1a>
 800d786:	f000 f871 	bl	800d86c <__sinit>
 800d78a:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <_fflush_r+0x6c>)
 800d78c:	429c      	cmp	r4, r3
 800d78e:	d11b      	bne.n	800d7c8 <_fflush_r+0x58>
 800d790:	686c      	ldr	r4, [r5, #4]
 800d792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0ef      	beq.n	800d77a <_fflush_r+0xa>
 800d79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d79c:	07d0      	lsls	r0, r2, #31
 800d79e:	d404      	bmi.n	800d7aa <_fflush_r+0x3a>
 800d7a0:	0599      	lsls	r1, r3, #22
 800d7a2:	d402      	bmi.n	800d7aa <_fflush_r+0x3a>
 800d7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7a6:	f000 ff94 	bl	800e6d2 <__retarget_lock_acquire_recursive>
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f7ff ff5d 	bl	800d66c <__sflush_r>
 800d7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b4:	07da      	lsls	r2, r3, #31
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	d4e0      	bmi.n	800d77c <_fflush_r+0xc>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	059b      	lsls	r3, r3, #22
 800d7be:	d4dd      	bmi.n	800d77c <_fflush_r+0xc>
 800d7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c2:	f000 ff8e 	bl	800e6e2 <__retarget_lock_release_recursive>
 800d7c6:	e7d9      	b.n	800d77c <_fflush_r+0xc>
 800d7c8:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <_fflush_r+0x70>)
 800d7ca:	429c      	cmp	r4, r3
 800d7cc:	d101      	bne.n	800d7d2 <_fflush_r+0x62>
 800d7ce:	68ac      	ldr	r4, [r5, #8]
 800d7d0:	e7df      	b.n	800d792 <_fflush_r+0x22>
 800d7d2:	4b04      	ldr	r3, [pc, #16]	; (800d7e4 <_fflush_r+0x74>)
 800d7d4:	429c      	cmp	r4, r3
 800d7d6:	bf08      	it	eq
 800d7d8:	68ec      	ldreq	r4, [r5, #12]
 800d7da:	e7da      	b.n	800d792 <_fflush_r+0x22>
 800d7dc:	080121c4 	.word	0x080121c4
 800d7e0:	080121e4 	.word	0x080121e4
 800d7e4:	080121a4 	.word	0x080121a4

0800d7e8 <std>:
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7f6:	6083      	str	r3, [r0, #8]
 800d7f8:	8181      	strh	r1, [r0, #12]
 800d7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d7fc:	81c2      	strh	r2, [r0, #14]
 800d7fe:	6183      	str	r3, [r0, #24]
 800d800:	4619      	mov	r1, r3
 800d802:	2208      	movs	r2, #8
 800d804:	305c      	adds	r0, #92	; 0x5c
 800d806:	f002 fc2e 	bl	8010066 <memset>
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <std+0x38>)
 800d80c:	6263      	str	r3, [r4, #36]	; 0x24
 800d80e:	4b05      	ldr	r3, [pc, #20]	; (800d824 <std+0x3c>)
 800d810:	62a3      	str	r3, [r4, #40]	; 0x28
 800d812:	4b05      	ldr	r3, [pc, #20]	; (800d828 <std+0x40>)
 800d814:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <std+0x44>)
 800d818:	6224      	str	r4, [r4, #32]
 800d81a:	6323      	str	r3, [r4, #48]	; 0x30
 800d81c:	bd10      	pop	{r4, pc}
 800d81e:	bf00      	nop
 800d820:	08010641 	.word	0x08010641
 800d824:	08010663 	.word	0x08010663
 800d828:	0801069b 	.word	0x0801069b
 800d82c:	080106bf 	.word	0x080106bf

0800d830 <_cleanup_r>:
 800d830:	4901      	ldr	r1, [pc, #4]	; (800d838 <_cleanup_r+0x8>)
 800d832:	f002 be97 	b.w	8010564 <_fwalk_reent>
 800d836:	bf00      	nop
 800d838:	0800d771 	.word	0x0800d771

0800d83c <__sfp_lock_acquire>:
 800d83c:	4801      	ldr	r0, [pc, #4]	; (800d844 <__sfp_lock_acquire+0x8>)
 800d83e:	f000 bf48 	b.w	800e6d2 <__retarget_lock_acquire_recursive>
 800d842:	bf00      	nop
 800d844:	20000384 	.word	0x20000384

0800d848 <__sfp_lock_release>:
 800d848:	4801      	ldr	r0, [pc, #4]	; (800d850 <__sfp_lock_release+0x8>)
 800d84a:	f000 bf4a 	b.w	800e6e2 <__retarget_lock_release_recursive>
 800d84e:	bf00      	nop
 800d850:	20000384 	.word	0x20000384

0800d854 <__sinit_lock_acquire>:
 800d854:	4801      	ldr	r0, [pc, #4]	; (800d85c <__sinit_lock_acquire+0x8>)
 800d856:	f000 bf3c 	b.w	800e6d2 <__retarget_lock_acquire_recursive>
 800d85a:	bf00      	nop
 800d85c:	20000398 	.word	0x20000398

0800d860 <__sinit_lock_release>:
 800d860:	4801      	ldr	r0, [pc, #4]	; (800d868 <__sinit_lock_release+0x8>)
 800d862:	f000 bf3e 	b.w	800e6e2 <__retarget_lock_release_recursive>
 800d866:	bf00      	nop
 800d868:	20000398 	.word	0x20000398

0800d86c <__sinit>:
 800d86c:	b510      	push	{r4, lr}
 800d86e:	4604      	mov	r4, r0
 800d870:	f7ff fff0 	bl	800d854 <__sinit_lock_acquire>
 800d874:	69a3      	ldr	r3, [r4, #24]
 800d876:	b11b      	cbz	r3, 800d880 <__sinit+0x14>
 800d878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d87c:	f7ff bff0 	b.w	800d860 <__sinit_lock_release>
 800d880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d884:	6523      	str	r3, [r4, #80]	; 0x50
 800d886:	4b13      	ldr	r3, [pc, #76]	; (800d8d4 <__sinit+0x68>)
 800d888:	4a13      	ldr	r2, [pc, #76]	; (800d8d8 <__sinit+0x6c>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d88e:	42a3      	cmp	r3, r4
 800d890:	bf04      	itt	eq
 800d892:	2301      	moveq	r3, #1
 800d894:	61a3      	streq	r3, [r4, #24]
 800d896:	4620      	mov	r0, r4
 800d898:	f000 f820 	bl	800d8dc <__sfp>
 800d89c:	6060      	str	r0, [r4, #4]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f000 f81c 	bl	800d8dc <__sfp>
 800d8a4:	60a0      	str	r0, [r4, #8]
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f000 f818 	bl	800d8dc <__sfp>
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	60e0      	str	r0, [r4, #12]
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	6860      	ldr	r0, [r4, #4]
 800d8b4:	f7ff ff98 	bl	800d7e8 <std>
 800d8b8:	68a0      	ldr	r0, [r4, #8]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	2109      	movs	r1, #9
 800d8be:	f7ff ff93 	bl	800d7e8 <std>
 800d8c2:	68e0      	ldr	r0, [r4, #12]
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	2112      	movs	r1, #18
 800d8c8:	f7ff ff8e 	bl	800d7e8 <std>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	61a3      	str	r3, [r4, #24]
 800d8d0:	e7d2      	b.n	800d878 <__sinit+0xc>
 800d8d2:	bf00      	nop
 800d8d4:	08012194 	.word	0x08012194
 800d8d8:	0800d831 	.word	0x0800d831

0800d8dc <__sfp>:
 800d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8de:	4607      	mov	r7, r0
 800d8e0:	f7ff ffac 	bl	800d83c <__sfp_lock_acquire>
 800d8e4:	4b1e      	ldr	r3, [pc, #120]	; (800d960 <__sfp+0x84>)
 800d8e6:	681e      	ldr	r6, [r3, #0]
 800d8e8:	69b3      	ldr	r3, [r6, #24]
 800d8ea:	b913      	cbnz	r3, 800d8f2 <__sfp+0x16>
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff ffbd 	bl	800d86c <__sinit>
 800d8f2:	3648      	adds	r6, #72	; 0x48
 800d8f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	d503      	bpl.n	800d904 <__sfp+0x28>
 800d8fc:	6833      	ldr	r3, [r6, #0]
 800d8fe:	b30b      	cbz	r3, 800d944 <__sfp+0x68>
 800d900:	6836      	ldr	r6, [r6, #0]
 800d902:	e7f7      	b.n	800d8f4 <__sfp+0x18>
 800d904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d908:	b9d5      	cbnz	r5, 800d940 <__sfp+0x64>
 800d90a:	4b16      	ldr	r3, [pc, #88]	; (800d964 <__sfp+0x88>)
 800d90c:	60e3      	str	r3, [r4, #12]
 800d90e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d912:	6665      	str	r5, [r4, #100]	; 0x64
 800d914:	f000 fed4 	bl	800e6c0 <__retarget_lock_init_recursive>
 800d918:	f7ff ff96 	bl	800d848 <__sfp_lock_release>
 800d91c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d924:	6025      	str	r5, [r4, #0]
 800d926:	61a5      	str	r5, [r4, #24]
 800d928:	2208      	movs	r2, #8
 800d92a:	4629      	mov	r1, r5
 800d92c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d930:	f002 fb99 	bl	8010066 <memset>
 800d934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d93c:	4620      	mov	r0, r4
 800d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d940:	3468      	adds	r4, #104	; 0x68
 800d942:	e7d9      	b.n	800d8f8 <__sfp+0x1c>
 800d944:	2104      	movs	r1, #4
 800d946:	4638      	mov	r0, r7
 800d948:	f002 fdf6 	bl	8010538 <__sfmoreglue>
 800d94c:	4604      	mov	r4, r0
 800d94e:	6030      	str	r0, [r6, #0]
 800d950:	2800      	cmp	r0, #0
 800d952:	d1d5      	bne.n	800d900 <__sfp+0x24>
 800d954:	f7ff ff78 	bl	800d848 <__sfp_lock_release>
 800d958:	230c      	movs	r3, #12
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	e7ee      	b.n	800d93c <__sfp+0x60>
 800d95e:	bf00      	nop
 800d960:	08012194 	.word	0x08012194
 800d964:	ffff0001 	.word	0xffff0001

0800d968 <__smakebuf_r>:
 800d968:	898b      	ldrh	r3, [r1, #12]
 800d96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d96c:	079d      	lsls	r5, r3, #30
 800d96e:	4606      	mov	r6, r0
 800d970:	460c      	mov	r4, r1
 800d972:	d507      	bpl.n	800d984 <__smakebuf_r+0x1c>
 800d974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2301      	movs	r3, #1
 800d97e:	6163      	str	r3, [r4, #20]
 800d980:	b002      	add	sp, #8
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	ab01      	add	r3, sp, #4
 800d986:	466a      	mov	r2, sp
 800d988:	f002 fe0b 	bl	80105a2 <__swhatbuf_r>
 800d98c:	9900      	ldr	r1, [sp, #0]
 800d98e:	4605      	mov	r5, r0
 800d990:	4630      	mov	r0, r6
 800d992:	f7fe fd6d 	bl	800c470 <_malloc_r>
 800d996:	b948      	cbnz	r0, 800d9ac <__smakebuf_r+0x44>
 800d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99c:	059a      	lsls	r2, r3, #22
 800d99e:	d4ef      	bmi.n	800d980 <__smakebuf_r+0x18>
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	f043 0302 	orr.w	r3, r3, #2
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7e3      	b.n	800d974 <__smakebuf_r+0xc>
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <__smakebuf_r+0x7c>)
 800d9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	6020      	str	r0, [r4, #0]
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	9b00      	ldr	r3, [sp, #0]
 800d9bc:	6163      	str	r3, [r4, #20]
 800d9be:	9b01      	ldr	r3, [sp, #4]
 800d9c0:	6120      	str	r0, [r4, #16]
 800d9c2:	b15b      	cbz	r3, 800d9dc <__smakebuf_r+0x74>
 800d9c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f000 f85b 	bl	800da84 <_isatty_r>
 800d9ce:	b128      	cbz	r0, 800d9dc <__smakebuf_r+0x74>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	f043 0301 	orr.w	r3, r3, #1
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	89a0      	ldrh	r0, [r4, #12]
 800d9de:	4305      	orrs	r5, r0
 800d9e0:	81a5      	strh	r5, [r4, #12]
 800d9e2:	e7cd      	b.n	800d980 <__smakebuf_r+0x18>
 800d9e4:	0800d831 	.word	0x0800d831

0800d9e8 <raise>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	; (800d9f4 <raise+0xc>)
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f002 bdfd 	b.w	80105ec <_raise_r>
 800d9f2:	bf00      	nop
 800d9f4:	200000d4 	.word	0x200000d4

0800d9f8 <_kill_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d07      	ldr	r5, [pc, #28]	; (800da18 <_kill_r+0x20>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	4611      	mov	r1, r2
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	f000 fe52 	bl	800e6ae <_kill>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d102      	bne.n	800da14 <_kill_r+0x1c>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	b103      	cbz	r3, 800da14 <_kill_r+0x1c>
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	200013a4 	.word	0x200013a4

0800da1c <_write_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4d07      	ldr	r5, [pc, #28]	; (800da3c <_write_r+0x20>)
 800da20:	4604      	mov	r4, r0
 800da22:	4608      	mov	r0, r1
 800da24:	4611      	mov	r1, r2
 800da26:	2200      	movs	r2, #0
 800da28:	602a      	str	r2, [r5, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	f000 fe2f 	bl	800e68e <_write>
 800da30:	1c43      	adds	r3, r0, #1
 800da32:	d102      	bne.n	800da3a <_write_r+0x1e>
 800da34:	682b      	ldr	r3, [r5, #0]
 800da36:	b103      	cbz	r3, 800da3a <_write_r+0x1e>
 800da38:	6023      	str	r3, [r4, #0]
 800da3a:	bd38      	pop	{r3, r4, r5, pc}
 800da3c:	200013a4 	.word	0x200013a4

0800da40 <_close_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d06      	ldr	r5, [pc, #24]	; (800da5c <_close_r+0x1c>)
 800da44:	2300      	movs	r3, #0
 800da46:	4604      	mov	r4, r0
 800da48:	4608      	mov	r0, r1
 800da4a:	602b      	str	r3, [r5, #0]
 800da4c:	f000 fe25 	bl	800e69a <_close>
 800da50:	1c43      	adds	r3, r0, #1
 800da52:	d102      	bne.n	800da5a <_close_r+0x1a>
 800da54:	682b      	ldr	r3, [r5, #0]
 800da56:	b103      	cbz	r3, 800da5a <_close_r+0x1a>
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	bd38      	pop	{r3, r4, r5, pc}
 800da5c:	200013a4 	.word	0x200013a4

0800da60 <_fstat_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4d07      	ldr	r5, [pc, #28]	; (800da80 <_fstat_r+0x20>)
 800da64:	2300      	movs	r3, #0
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	4611      	mov	r1, r2
 800da6c:	602b      	str	r3, [r5, #0]
 800da6e:	f000 fe22 	bl	800e6b6 <_fstat>
 800da72:	1c43      	adds	r3, r0, #1
 800da74:	d102      	bne.n	800da7c <_fstat_r+0x1c>
 800da76:	682b      	ldr	r3, [r5, #0]
 800da78:	b103      	cbz	r3, 800da7c <_fstat_r+0x1c>
 800da7a:	6023      	str	r3, [r4, #0]
 800da7c:	bd38      	pop	{r3, r4, r5, pc}
 800da7e:	bf00      	nop
 800da80:	200013a4 	.word	0x200013a4

0800da84 <_isatty_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4d06      	ldr	r5, [pc, #24]	; (800daa0 <_isatty_r+0x1c>)
 800da88:	2300      	movs	r3, #0
 800da8a:	4604      	mov	r4, r0
 800da8c:	4608      	mov	r0, r1
 800da8e:	602b      	str	r3, [r5, #0]
 800da90:	f000 fe08 	bl	800e6a4 <_isatty>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d102      	bne.n	800da9e <_isatty_r+0x1a>
 800da98:	682b      	ldr	r3, [r5, #0]
 800da9a:	b103      	cbz	r3, 800da9e <_isatty_r+0x1a>
 800da9c:	6023      	str	r3, [r4, #0]
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	200013a4 	.word	0x200013a4

0800daa4 <_lseek_r>:
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	4d07      	ldr	r5, [pc, #28]	; (800dac4 <_lseek_r+0x20>)
 800daa8:	4604      	mov	r4, r0
 800daaa:	4608      	mov	r0, r1
 800daac:	4611      	mov	r1, r2
 800daae:	2200      	movs	r2, #0
 800dab0:	602a      	str	r2, [r5, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	f000 fdf4 	bl	800e6a0 <_lseek>
 800dab8:	1c43      	adds	r3, r0, #1
 800daba:	d102      	bne.n	800dac2 <_lseek_r+0x1e>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	b103      	cbz	r3, 800dac2 <_lseek_r+0x1e>
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	200013a4 	.word	0x200013a4

0800dac8 <_read_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	; (800dae8 <_read_r+0x20>)
 800dacc:	4604      	mov	r4, r0
 800dace:	4608      	mov	r0, r1
 800dad0:	4611      	mov	r1, r2
 800dad2:	2200      	movs	r2, #0
 800dad4:	602a      	str	r2, [r5, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	f000 fdd3 	bl	800e682 <_read>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_read_r+0x1e>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_read_r+0x1e>
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	200013a4 	.word	0x200013a4

0800daec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800daec:	4770      	bx	lr

0800daee <z_log_msg2_runtime_create>:
{
 800daee:	b510      	push	{r4, lr}
 800daf0:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800daf2:	ac0a      	add	r4, sp, #40	; 0x28
 800daf4:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 800daf6:	9402      	str	r4, [sp, #8]
 800daf8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dafa:	9401      	str	r4, [sp, #4]
 800dafc:	9c08      	ldr	r4, [sp, #32]
 800dafe:	9400      	str	r4, [sp, #0]
 800db00:	f000 fce4 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800db04:	b006      	add	sp, #24
 800db06:	bd10      	pop	{r4, pc}

0800db08 <fill_msg_bit_field>:
void fill_msg_bit_field(uint32_t *msg_ptr, const uint8_t field_val, uint8_t field_len, uint8_t *pos) {
 800db08:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800db0a:	781d      	ldrb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800db0c:	e017      	b.n	800db3e <fill_msg_bit_field+0x36>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800db0e:	f04f 0c01 	mov.w	ip, #1
 800db12:	fa0c fe04 	lsl.w	lr, ip, r4
 800db16:	6804      	ldr	r4, [r0, #0]
 800db18:	ea24 040e 	bic.w	r4, r4, lr
 800db1c:	6004      	str	r4, [r0, #0]
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800db1e:	f893 e000 	ldrb.w	lr, [r3]
 800db22:	ebae 0e05 	sub.w	lr, lr, r5
 800db26:	fa0c fc0e 	lsl.w	ip, ip, lr
 800db2a:	ea01 0c0c 	and.w	ip, r1, ip
 800db2e:	fa0c fc05 	lsl.w	ip, ip, r5
 800db32:	ea44 040c 	orr.w	r4, r4, ip
 800db36:	6004      	str	r4, [r0, #0]
        (*pos)++;
 800db38:	781c      	ldrb	r4, [r3, #0]
 800db3a:	3401      	adds	r4, #1
 800db3c:	701c      	strb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800db3e:	781c      	ldrb	r4, [r3, #0]
 800db40:	eb02 0c05 	add.w	ip, r2, r5
 800db44:	4564      	cmp	r4, ip
 800db46:	dbe2      	blt.n	800db0e <fill_msg_bit_field+0x6>
}
 800db48:	bd30      	pop	{r4, r5, pc}

0800db4a <extract_msg_bit_field>:
{
 800db4a:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800db4c:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800db4e:	e01a      	b.n	800db86 <extract_msg_bit_field+0x3c>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800db50:	ebac 0c04 	sub.w	ip, ip, r4
 800db54:	2501      	movs	r5, #1
 800db56:	fa05 fc0c 	lsl.w	ip, r5, ip
 800db5a:	f891 e000 	ldrb.w	lr, [r1]
 800db5e:	ea2e 0c0c 	bic.w	ip, lr, ip
 800db62:	f881 c000 	strb.w	ip, [r1]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800db66:	f893 e000 	ldrb.w	lr, [r3]
 800db6a:	fa05 fe0e 	lsl.w	lr, r5, lr
 800db6e:	6805      	ldr	r5, [r0, #0]
 800db70:	ea05 0e0e 	and.w	lr, r5, lr
 800db74:	fa2e fe04 	lsr.w	lr, lr, r4
 800db78:	ea4c 0c0e 	orr.w	ip, ip, lr
 800db7c:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 800db80:	781d      	ldrb	r5, [r3, #0]
 800db82:	3501      	adds	r5, #1
 800db84:	701d      	strb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800db86:	f893 c000 	ldrb.w	ip, [r3]
 800db8a:	1915      	adds	r5, r2, r4
 800db8c:	45ac      	cmp	ip, r5
 800db8e:	dbdf      	blt.n	800db50 <extract_msg_bit_field+0x6>
}
 800db90:	bd30      	pop	{r4, r5, pc}

0800db92 <reverse>:
{
 800db92:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800db94:	461a      	mov	r2, r3
    while( pos < 7 ) {
 800db96:	e007      	b.n	800dba8 <reverse+0x16>
        bit = input & BIT(0);
 800db98:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800db9c:	430b      	orrs	r3, r1
        output = output << 1;
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800dba2:	0840      	lsrs	r0, r0, #1
        pos++;
 800dba4:	3201      	adds	r2, #1
 800dba6:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 800dba8:	2a06      	cmp	r2, #6
 800dbaa:	d9f5      	bls.n	800db98 <reverse+0x6>
    bit = input & BIT(0);
 800dbac:	f000 0001 	and.w	r0, r0, #1
}
 800dbb0:	4318      	orrs	r0, r3
 800dbb2:	4770      	bx	lr

0800dbb4 <check_rssi>:


uint8_t check_rssi(const int16_t rssi)
{
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 800dbb4:	f110 0f46 	cmn.w	r0, #70	; 0x46
 800dbb8:	da26      	bge.n	800dc08 <check_rssi+0x54>
        return LIGHT_UP_EIGHT;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 800dbba:	b283      	uxth	r3, r0
 800dbbc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800dbc0:	b292      	uxth	r2, r2
 800dbc2:	2a09      	cmp	r2, #9
 800dbc4:	d922      	bls.n	800dc0c <check_rssi+0x58>
        return LIGHT_UP_SEVEN;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 800dbc6:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 800dbca:	b292      	uxth	r2, r2
 800dbcc:	2a09      	cmp	r2, #9
 800dbce:	d91f      	bls.n	800dc10 <check_rssi+0x5c>
        return LIGHT_UP_SIX;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 800dbd0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800dbd4:	b292      	uxth	r2, r2
 800dbd6:	2a09      	cmp	r2, #9
 800dbd8:	d91c      	bls.n	800dc14 <check_rssi+0x60>
        return LIGHT_UP_FIVE;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 800dbda:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800dbde:	b292      	uxth	r2, r2
 800dbe0:	2a04      	cmp	r2, #4
 800dbe2:	d919      	bls.n	800dc18 <check_rssi+0x64>
        return LIGHT_UP_FOUR;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 800dbe4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800dbe8:	b292      	uxth	r2, r2
 800dbea:	2a04      	cmp	r2, #4
 800dbec:	d916      	bls.n	800dc1c <check_rssi+0x68>
        return LIGHT_UP_THREE;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 800dbee:	f103 0273 	add.w	r2, r3, #115	; 0x73
 800dbf2:	b292      	uxth	r2, r2
 800dbf4:	2a04      	cmp	r2, #4
 800dbf6:	d913      	bls.n	800dc20 <check_rssi+0x6c>
        return LIGHT_UP_TWO;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 800dbf8:	3378      	adds	r3, #120	; 0x78
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	d911      	bls.n	800dc24 <check_rssi+0x70>
        return LIGHT_UP_ONE;
    }
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
 800dc00:	f110 0f78 	cmn.w	r0, #120	; 0x78
 800dc04:	db10      	blt.n	800dc28 <check_rssi+0x74>
        return LIGHT_UP_ZERO;
    }
}
 800dc06:	4770      	bx	lr
        return LIGHT_UP_EIGHT;
 800dc08:	2008      	movs	r0, #8
 800dc0a:	4770      	bx	lr
        return LIGHT_UP_SEVEN;
 800dc0c:	2007      	movs	r0, #7
 800dc0e:	4770      	bx	lr
        return LIGHT_UP_SIX;
 800dc10:	2006      	movs	r0, #6
 800dc12:	4770      	bx	lr
        return LIGHT_UP_FIVE;
 800dc14:	2005      	movs	r0, #5
 800dc16:	4770      	bx	lr
        return LIGHT_UP_FOUR;
 800dc18:	2004      	movs	r0, #4
 800dc1a:	4770      	bx	lr
        return LIGHT_UP_THREE;
 800dc1c:	2003      	movs	r0, #3
 800dc1e:	4770      	bx	lr
        return LIGHT_UP_TWO;
 800dc20:	2002      	movs	r0, #2
 800dc22:	4770      	bx	lr
        return LIGHT_UP_ONE;
 800dc24:	2001      	movs	r0, #1
 800dc26:	4770      	bx	lr
        return LIGHT_UP_ZERO;
 800dc28:	2000      	movs	r0, #0
}
 800dc2a:	4770      	bx	lr

0800dc2c <check_msg_status>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800dc2c:	f3bf 8f5b 	dmb	ish
 800dc30:	6802      	ldr	r2, [r0, #0]
 800dc32:	f3bf 8f5b 	dmb	ish
//        } else {
//            printk("        Message retransmit!!!\n");
//            k_msgq_put(msg_info->msg_buf, msg_info->msg, K_NO_WAIT);
//        }
//    }
    if (atomic_get((&msg_info->req_is_send))) {
 800dc36:	b902      	cbnz	r2, 800dc3a <check_msg_status+0xe>
 800dc38:	4770      	bx	lr
{
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	4604      	mov	r4, r0
      k_msgq_put(msg_info->msg_buf, msg_info->msg, K_NO_WAIT);
 800dc40:	6880      	ldr	r0, [r0, #8]
 800dc42:	68d9      	ldr	r1, [r3, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800dc44:	2200      	movs	r2, #0
 800dc46:	2300      	movs	r3, #0
 800dc48:	f7fc ff5a 	bl	800ab00 <z_impl_k_msgq_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f3bf 8f5b 	dmb	ish
 800dc52:	e854 2f00 	ldrex	r2, [r4]
 800dc56:	e844 3100 	strex	r1, r3, [r4]
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	d1f9      	bne.n	800dc52 <check_msg_status+0x26>
 800dc5e:	f3bf 8f5b 	dmb	ish
      atomic_clear(&(msg_info->req_is_send));
    }
 800dc62:	bd10      	pop	{r4, pc}

0800dc64 <cbprintf_via_va_list>:
{
 800dc64:	b510      	push	{r4, lr}
 800dc66:	460c      	mov	r4, r1
 800dc68:	4611      	mov	r1, r2
 800dc6a:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	47a0      	blx	r4
}
 800dc70:	bd10      	pop	{r4, pc}

0800dc72 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 800dc72:	b343      	cbz	r3, 800dcc6 <cbpprintf_external+0x54>
{
 800dc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc78:	b082      	sub	sp, #8
 800dc7a:	4607      	mov	r7, r0
 800dc7c:	4688      	mov	r8, r1
 800dc7e:	4691      	mov	r9, r2
 800dc80:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 800dc82:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 800dc84:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 800dc86:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 800dc88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dc8c:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 800dc8e:	f04f 0a00 	mov.w	sl, #0
 800dc92:	e00a      	b.n	800dcaa <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 800dc94:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 800dc98:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f7f3 f8da 	bl	8000e56 <strlen>
 800dca2:	3001      	adds	r0, #1
 800dca4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800dca6:	f10a 0a01 	add.w	sl, sl, #1
 800dcaa:	45b2      	cmp	sl, r6
 800dcac:	d3f2      	bcc.n	800dc94 <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 800dcae:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	686b      	ldr	r3, [r5, #4]
 800dcb6:	464a      	mov	r2, r9
 800dcb8:	4641      	mov	r1, r8
 800dcba:	4638      	mov	r0, r7
 800dcbc:	f7ff ffd2 	bl	800dc64 <cbprintf_via_va_list>
}
 800dcc0:	b002      	add	sp, #8
 800dcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 800dcc6:	f06f 0015 	mvn.w	r0, #21
}
 800dcca:	4770      	bx	lr

0800dccc <arch_printk_char_out>:
}
 800dccc:	2000      	movs	r0, #0
 800dcce:	4770      	bx	lr

0800dcd0 <str_out>:
{
 800dcd0:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800dcd2:	680c      	ldr	r4, [r1, #0]
 800dcd4:	b154      	cbz	r4, 800dcec <str_out+0x1c>
 800dcd6:	688a      	ldr	r2, [r1, #8]
 800dcd8:	684b      	ldr	r3, [r1, #4]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	da06      	bge.n	800dcec <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800dcde:	3b01      	subs	r3, #1
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d008      	beq.n	800dcf6 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800dce4:	1c53      	adds	r3, r2, #1
 800dce6:	608b      	str	r3, [r1, #8]
 800dce8:	54a0      	strb	r0, [r4, r2]
 800dcea:	e002      	b.n	800dcf2 <str_out+0x22>
		ctx->count++;
 800dcec:	688b      	ldr	r3, [r1, #8]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	608b      	str	r3, [r1, #8]
}
 800dcf2:	bc10      	pop	{r4}
 800dcf4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800dcf6:	1c53      	adds	r3, r2, #1
 800dcf8:	608b      	str	r3, [r1, #8]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	54a3      	strb	r3, [r4, r2]
 800dcfe:	e7f8      	b.n	800dcf2 <str_out+0x22>

0800dd00 <printk>:
{
 800dd00:	b40f      	push	{r0, r1, r2, r3}
 800dd02:	b500      	push	{lr}
 800dd04:	b083      	sub	sp, #12
 800dd06:	a904      	add	r1, sp, #16
 800dd08:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800dd0c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800dd0e:	f7f5 fe89 	bl	8003a24 <vprintk>
}
 800dd12:	b003      	add	sp, #12
 800dd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd18:	b004      	add	sp, #16
 800dd1a:	4770      	bx	lr

0800dd1c <snprintk>:
{
 800dd1c:	b40c      	push	{r2, r3}
 800dd1e:	b500      	push	{lr}
 800dd20:	b083      	sub	sp, #12
 800dd22:	ab04      	add	r3, sp, #16
 800dd24:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800dd28:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800dd2a:	f7f5 fe8b 	bl	8003a44 <vsnprintk>
}
 800dd2e:	b003      	add	sp, #12
 800dd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd34:	b002      	add	sp, #8
 800dd36:	4770      	bx	lr

0800dd38 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800dd38:	b508      	push	{r3, lr}
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800dd40:	461a      	mov	r2, r3
 800dd42:	47a0      	blx	r4
	return z_impl_z_current_get();
 800dd44:	f7fd fdbc 	bl	800b8c0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800dd48:	f7f8 f85c 	bl	8005e04 <z_impl_k_thread_abort>

0800dd4c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 800dd4c:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800dd4e:	1d13      	adds	r3, r2, #4
 800dd50:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800dd54:	b97c      	cbnz	r4, 800dd76 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
 800dd56:	2301      	movs	r3, #1
 800dd58:	fa03 f402 	lsl.w	r4, r3, r2
 800dd5c:	68c3      	ldr	r3, [r0, #12]
 800dd5e:	4323      	orrs	r3, r4
 800dd60:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800dd62:	3204      	adds	r2, #4
 800dd64:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800dd68:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800dd6a:	1d1a      	adds	r2, r3, #4
 800dd6c:	b289      	uxth	r1, r1
 800dd6e:	5281      	strh	r1, [r0, r2]
 800dd70:	3306      	adds	r3, #6
 800dd72:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 800dd74:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
 800dd76:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
 800dd78:	3204      	adds	r2, #4
 800dd7a:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
 800dd7c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
 800dd80:	f10c 0e04 	add.w	lr, ip, #4
 800dd84:	f820 300e 	strh.w	r3, [r0, lr]
 800dd88:	f10c 0c06 	add.w	ip, ip, #6
 800dd8c:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
 800dd90:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 800dd92:	3306      	adds	r3, #6
 800dd94:	b289      	uxth	r1, r1
 800dd96:	52c1      	strh	r1, [r0, r3]
 800dd98:	5281      	strh	r1, [r0, r2]
 800dd9a:	e7eb      	b.n	800dd74 <free_list_add_bidx+0x28>

0800dd9c <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800dd9c:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 800dd9e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 800dda2:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800dda4:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800dda6:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800ddaa:	f1c2 021f 	rsb	r2, r2, #31
 800ddae:	f7ff ffcd 	bl	800dd4c <free_list_add_bidx>
	}
}
 800ddb2:	bd08      	pop	{r3, pc}

0800ddb4 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800ddb8:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800ddba:	1dc8      	adds	r0, r1, #7
 800ddbc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800ddc0:	440a      	add	r2, r1
 800ddc2:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800ddc6:	1a12      	subs	r2, r2, r0
 800ddc8:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800ddca:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800ddcc:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60c3      	str	r3, [r0, #12]
 800ddd2:	fab5 f185 	clz	r1, r5
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800ddd6:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800ddda:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 800ddde:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800dde0:	1dce      	adds	r6, r1, #7
 800dde2:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800dde4:	e005      	b.n	800ddf2 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
 800dde6:	f103 0c04 	add.w	ip, r3, #4
 800ddea:	2400      	movs	r4, #0
 800ddec:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	4573      	cmp	r3, lr
 800ddf4:	dbf7      	blt.n	800dde6 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800ddf6:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
 800ddf8:	b2a4      	uxth	r4, r4
 800ddfa:	8044      	strh	r4, [r0, #2]
 800ddfc:	f04f 0c00 	mov.w	ip, #0
 800de00:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800de04:	f044 0401 	orr.w	r4, r4, #1
 800de08:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800de0a:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800de0c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
 800de10:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
 800de14:	1ca5      	adds	r5, r4, #2
 800de16:	f820 e005 	strh.w	lr, [r0, r5]
 800de1a:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
 800de1c:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
 800de20:	1c95      	adds	r5, r2, #2
 800de22:	f820 c005 	strh.w	ip, [r0, r5]
 800de26:	4402      	add	r2, r0
 800de28:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800de2a:	8853      	ldrh	r3, [r2, #2]
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800de32:	f7ff ffb3 	bl	800dd9c <free_list_add>
}
 800de36:	bd70      	pop	{r4, r5, r6, pc}

0800de38 <outs>:
{
 800de38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de3c:	4607      	mov	r7, r0
 800de3e:	460e      	mov	r6, r1
 800de40:	4614      	mov	r4, r2
 800de42:	4698      	mov	r8, r3
	size_t count = 0;
 800de44:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800de46:	e006      	b.n	800de56 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800de48:	4631      	mov	r1, r6
 800de4a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de4e:	47b8      	blx	r7
		if (rc < 0) {
 800de50:	2800      	cmp	r0, #0
 800de52:	db09      	blt.n	800de68 <outs+0x30>
		++count;
 800de54:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800de56:	4544      	cmp	r4, r8
 800de58:	d3f6      	bcc.n	800de48 <outs+0x10>
 800de5a:	f1b8 0f00 	cmp.w	r8, #0
 800de5e:	d102      	bne.n	800de66 <outs+0x2e>
 800de60:	7823      	ldrb	r3, [r4, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1f0      	bne.n	800de48 <outs+0x10>
	return (int)count;
 800de66:	4628      	mov	r0, r5
}
 800de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de6c <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 800de6c:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 800de6e:	2300      	movs	r3, #0
 800de70:	f36f 0300 	bfc	r3, #0, #1
 800de74:	f043 0302 	orr.w	r3, r3, #2
 800de78:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800de7c:	6a02      	ldr	r2, [r0, #32]
 800de7e:	6804      	ldr	r4, [r0, #0]
 800de80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800de84:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 800de86:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800de88:	6902      	ldr	r2, [r0, #16]
 800de8a:	f012 0201 	ands.w	r2, r2, #1
 800de8e:	d104      	bne.n	800de9a <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800de90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de92:	42a3      	cmp	r3, r4
 800de94:	d304      	bcc.n	800dea0 <add_skip_item+0x34>
 800de96:	1b1b      	subs	r3, r3, r4
 800de98:	e002      	b.n	800dea0 <add_skip_item+0x34>
		return i & (buffer->size - 1);
 800de9a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de9c:	3c01      	subs	r4, #1
 800de9e:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800dea0:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800dea2:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 800dea4:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800dea6:	b922      	cbnz	r2, 800deb2 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 800dea8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deaa:	4299      	cmp	r1, r3
 800deac:	d304      	bcc.n	800deb8 <add_skip_item+0x4c>
 800deae:	1ac9      	subs	r1, r1, r3
 800deb0:	e002      	b.n	800deb8 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 800deb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800deb4:	3b01      	subs	r3, #1
 800deb6:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800deb8:	6041      	str	r1, [r0, #4]
}
 800deba:	bc10      	pop	{r4}
 800debc:	4770      	bx	lr

0800debe <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 800debe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec2:	b083      	sub	sp, #12
 800dec4:	4604      	mov	r4, r0
 800dec6:	9101      	str	r1, [sp, #4]
 800dec8:	4615      	mov	r5, r2
 800deca:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 800decc:	2300      	movs	r3, #0
 800dece:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800ded0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800ded4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800ded8:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800dedc:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800dee0:	f003 0303 	and.w	r3, r3, #3
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d012      	beq.n	800df0e <drop_item_locked+0x50>
	return 0;
 800dee8:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800deec:	69e3      	ldr	r3, [r4, #28]
 800deee:	4650      	mov	r0, sl
 800def0:	4798      	blx	r3
 800def2:	4607      	mov	r7, r0
	if (skip_wlen) {
 800def4:	f1bb 0f00 	cmp.w	fp, #0
 800def8:	d151      	bne.n	800df9e <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 800defa:	2d00      	cmp	r5, #0
 800defc:	d05c      	beq.n	800dfb8 <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 800defe:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800df02:	f013 0f02 	tst.w	r3, #2
 800df06:	d109      	bne.n	800df1c <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 800df08:	2301      	movs	r3, #1
 800df0a:	7033      	strb	r3, [r6, #0]
 800df0c:	e048      	b.n	800dfa0 <drop_item_locked+0xe2>
		return item->skip.len;
 800df0e:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800df12:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800df16:	d0e9      	beq.n	800deec <drop_item_locked+0x2e>
		return item->skip.len;
 800df18:	465f      	mov	r7, fp
 800df1a:	e7eb      	b.n	800def4 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 800df1c:	9901      	ldr	r1, [sp, #4]
 800df1e:	3101      	adds	r1, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff ffa3 	bl	800de6c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800df26:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800df28:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800df2a:	6922      	ldr	r2, [r4, #16]
 800df2c:	f012 0201 	ands.w	r2, r2, #1
 800df30:	d104      	bne.n	800df3c <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800df32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df34:	428b      	cmp	r3, r1
 800df36:	d304      	bcc.n	800df42 <drop_item_locked+0x84>
 800df38:	1a5b      	subs	r3, r3, r1
 800df3a:	e002      	b.n	800df42 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 800df3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df3e:	3901      	subs	r1, #1
 800df40:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800df42:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800df44:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 800df46:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800df48:	b922      	cbnz	r2, 800df54 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 800df4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df4c:	428b      	cmp	r3, r1
 800df4e:	d304      	bcc.n	800df5a <drop_item_locked+0x9c>
 800df50:	1a5b      	subs	r3, r3, r1
 800df52:	e002      	b.n	800df5a <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 800df54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df56:	3901      	subs	r1, #1
 800df58:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800df5a:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800df5c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800df5e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800df60:	b922      	cbnz	r2, 800df6c <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 800df62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800df64:	4293      	cmp	r3, r2
 800df66:	d304      	bcc.n	800df72 <drop_item_locked+0xb4>
 800df68:	1a9b      	subs	r3, r3, r2
 800df6a:	e002      	b.n	800df72 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 800df6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800df6e:	3a01      	subs	r2, #1
 800df70:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800df72:	6a21      	ldr	r1, [r4, #32]
 800df74:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800df78:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 800df7c:	f002 0203 	and.w	r2, r2, #3
 800df80:	2a02      	cmp	r2, #2
 800df82:	d006      	beq.n	800df92 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 800df84:	69e3      	ldr	r3, [r4, #28]
 800df86:	4650      	mov	r0, sl
 800df88:	4798      	blx	r3
 800df8a:	4407      	add	r7, r0
				*user_packet = true;
 800df8c:	2301      	movs	r3, #1
 800df8e:	7033      	strb	r3, [r6, #0]
 800df90:	e006      	b.n	800dfa0 <drop_item_locked+0xe2>
		return item->skip.len;
 800df92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 800df96:	089b      	lsrs	r3, r3, #2
 800df98:	d0f4      	beq.n	800df84 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 800df9a:	441f      	add	r7, r3
 800df9c:	e000      	b.n	800dfa0 <drop_item_locked+0xe2>
		allow_drop = true;
 800df9e:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 800dfa0:	b195      	cbz	r5, 800dfc8 <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800dfa2:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 800dfa4:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800dfa6:	6923      	ldr	r3, [r4, #16]
 800dfa8:	f013 0f01 	tst.w	r3, #1
 800dfac:	d107      	bne.n	800dfbe <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 800dfae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb0:	429f      	cmp	r7, r3
 800dfb2:	d307      	bcc.n	800dfc4 <drop_item_locked+0x106>
 800dfb4:	1aff      	subs	r7, r7, r3
 800dfb6:	e005      	b.n	800dfc4 <drop_item_locked+0x106>
		item = NULL;
 800dfb8:	f04f 0a00 	mov.w	sl, #0
 800dfbc:	e7f0      	b.n	800dfa0 <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 800dfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800dfc4:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 800dfc6:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 800dfc8:	4650      	mov	r0, sl
 800dfca:	b003      	add	sp, #12
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfd0 <mpsc_pbuf_init>:
{
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	2100      	movs	r1, #0
 800dfda:	f002 f844 	bl	8010066 <memset>
	buffer->get_wlen = cfg->get_wlen;
 800dfde:	68eb      	ldr	r3, [r5, #12]
 800dfe0:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 800dfe2:	68ab      	ldr	r3, [r5, #8]
 800dfe4:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800dfe6:	682b      	ldr	r3, [r5, #0]
 800dfe8:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 800dfea:	686b      	ldr	r3, [r5, #4]
 800dfec:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 800dfee:	692a      	ldr	r2, [r5, #16]
 800dff0:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 800dff2:	b123      	cbz	r3, 800dffe <mpsc_pbuf_init+0x2e>
 800dff4:	1e59      	subs	r1, r3, #1
 800dff6:	420b      	tst	r3, r1
 800dff8:	d00d      	beq.n	800e016 <mpsc_pbuf_init+0x46>
 800dffa:	2300      	movs	r3, #0
 800dffc:	e000      	b.n	800e000 <mpsc_pbuf_init+0x30>
 800dffe:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 800e000:	b113      	cbz	r3, 800e008 <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800e002:	f042 0201 	orr.w	r2, r2, #1
 800e006:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 800e008:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 800e00c:	2201      	movs	r2, #1
 800e00e:	2100      	movs	r1, #0
 800e010:	f001 fca7 	bl	800f962 <z_impl_k_sem_init>
}
 800e014:	bd38      	pop	{r3, r4, r5, pc}
 800e016:	2301      	movs	r3, #1
 800e018:	e7f2      	b.n	800e000 <mpsc_pbuf_init+0x30>

0800e01a <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 800e01a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01e:	b085      	sub	sp, #20
 800e020:	9200      	str	r2, [sp, #0]
 800e022:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800e024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e026:	3b01      	subs	r3, #1
 800e028:	428b      	cmp	r3, r1
 800e02a:	f0c0 8087 	bcc.w	800e13c <mpsc_pbuf_alloc+0x122>
 800e02e:	4605      	mov	r5, r0
 800e030:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 800e032:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 800e036:	46d3      	mov	fp, sl
 800e038:	e020      	b.n	800e07c <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800e03a:	1b1c      	subs	r4, r3, r4
 800e03c:	3c01      	subs	r4, #1
		return false;
 800e03e:	2600      	movs	r6, #0
 800e040:	e02e      	b.n	800e0a0 <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800e042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e044:	1b1c      	subs	r4, r3, r4
 800e046:	3c01      	subs	r4, #1
		return false;
 800e048:	2600      	movs	r6, #0
 800e04a:	e029      	b.n	800e0a0 <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 800e04c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e04e:	3a01      	subs	r2, #1
 800e050:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 800e052:	602b      	str	r3, [r5, #0]
		cont = false;
 800e054:	2600      	movs	r6, #0
 800e056:	f387 8811 	msr	BASEPRI, r7
 800e05a:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 800e05e:	b15e      	cbz	r6, 800e078 <mpsc_pbuf_alloc+0x5e>
 800e060:	f1ba 0f00 	cmp.w	sl, #0
 800e064:	d008      	beq.n	800e078 <mpsc_pbuf_alloc+0x5e>
 800e066:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e06a:	b12b      	cbz	r3, 800e078 <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 800e06c:	69ab      	ldr	r3, [r5, #24]
 800e06e:	4651      	mov	r1, sl
 800e070:	4628      	mov	r0, r5
 800e072:	4798      	blx	r3
			dropped_item = NULL;
 800e074:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 800e078:	2e00      	cmp	r6, #0
 800e07a:	d061      	beq.n	800e140 <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 800e07c:	f04f 0310 	mov.w	r3, #16
 800e080:	f3ef 8811 	mrs	r8, BASEPRI
 800e084:	f383 8812 	msr	BASEPRI_MAX, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800e08e:	68eb      	ldr	r3, [r5, #12]
 800e090:	682c      	ldr	r4, [r5, #0]
 800e092:	42a3      	cmp	r3, r4
 800e094:	d8d1      	bhi.n	800e03a <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 800e096:	2b00      	cmp	r3, #0
 800e098:	d0d3      	beq.n	800e042 <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 800e09a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e09c:	1b1c      	subs	r4, r3, r4
	return true;
 800e09e:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 800e0a0:	45a1      	cmp	r9, r4
 800e0a2:	d819      	bhi.n	800e0d8 <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 800e0a4:	6a2b      	ldr	r3, [r5, #32]
 800e0a6:	682a      	ldr	r2, [r5, #0]
			item =
 800e0a8:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 800e0ac:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800e0b0:	f36f 0100 	bfc	r1, #0, #1
 800e0b4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 800e0b8:	b2c9      	uxtb	r1, r1
 800e0ba:	f36f 0141 	bfc	r1, #1, #1
 800e0be:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 800e0c2:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 800e0c4:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e0c6:	692a      	ldr	r2, [r5, #16]
 800e0c8:	f012 0f01 	tst.w	r2, #1
 800e0cc:	d1be      	bne.n	800e04c <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e0ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d3be      	bcc.n	800e052 <mpsc_pbuf_alloc+0x38>
 800e0d4:	1a9b      	subs	r3, r3, r2
 800e0d6:	e7bc      	b.n	800e052 <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 800e0d8:	b9ae      	cbnz	r6, 800e106 <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e0da:	9b01      	ldr	r3, [sp, #4]
 800e0dc:	9a00      	ldr	r2, [sp, #0]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	d003      	beq.n	800e0ea <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 800e0e2:	f001 fbd9 	bl	800f898 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	b190      	cbz	r0, 800e110 <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800e0ea:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 800e0ec:	f10d 030f 	add.w	r3, sp, #15
 800e0f0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	f7ff fee1 	bl	800debe <drop_item_locked>
			cont = dropped_item != NULL;
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	1e06      	subs	r6, r0, #0
 800e100:	bf18      	it	ne
 800e102:	2601      	movne	r6, #1
 800e104:	e7a7      	b.n	800e056 <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f7ff feaf 	bl	800de6c <add_skip_item>
			cont = true;
 800e10e:	e7a2      	b.n	800e056 <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 800e110:	f388 8811 	msr	BASEPRI, r8
 800e114:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 800e118:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 800e11c:	9a00      	ldr	r2, [sp, #0]
 800e11e:	9b01      	ldr	r3, [sp, #4]
 800e120:	f7fc fe9e 	bl	800ae60 <z_impl_k_sem_take>
	__asm__ volatile(
 800e124:	f04f 0310 	mov.w	r3, #16
 800e128:	f3ef 8711 	mrs	r7, BASEPRI
 800e12c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e130:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 800e134:	2800      	cmp	r0, #0
 800e136:	d18e      	bne.n	800e056 <mpsc_pbuf_alloc+0x3c>
				cont = true;
 800e138:	2601      	movs	r6, #1
 800e13a:	e78c      	b.n	800e056 <mpsc_pbuf_alloc+0x3c>
		return NULL;
 800e13c:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 800e140:	4658      	mov	r0, fp
 800e142:	b005      	add	sp, #20
 800e144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e148 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4604      	mov	r4, r0
 800e14c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800e14e:	69c3      	ldr	r3, [r0, #28]
 800e150:	4608      	mov	r0, r1
 800e152:	4798      	blx	r3
 800e154:	f04f 0310 	mov.w	r3, #16
 800e158:	f3ef 8211 	mrs	r2, BASEPRI
 800e15c:	f383 8812 	msr	BASEPRI_MAX, r3
 800e160:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 800e164:	782b      	ldrb	r3, [r5, #0]
 800e166:	f043 0301 	orr.w	r3, r3, #1
 800e16a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e16c:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800e16e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	f013 0f01 	tst.w	r3, #1
 800e176:	d104      	bne.n	800e182 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e17a:	4298      	cmp	r0, r3
 800e17c:	d304      	bcc.n	800e188 <mpsc_pbuf_commit+0x40>
 800e17e:	1ac0      	subs	r0, r0, r3
 800e180:	e002      	b.n	800e188 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 800e182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e184:	3b01      	subs	r3, #1
 800e186:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e188:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 800e18a:	f382 8811 	msr	BASEPRI, r2
 800e18e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800e192:	bd38      	pop	{r3, r4, r5, pc}

0800e194 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800e194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e196:	4604      	mov	r4, r0
 800e198:	e039      	b.n	800e20e <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800e19a:	1a9b      	subs	r3, r3, r2
		return false;
 800e19c:	e045      	b.n	800e22a <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 800e19e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 800e1a2:	0880      	lsrs	r0, r0, #2
 800e1a4:	d153      	bne.n	800e24e <mpsc_pbuf_claim+0xba>
 800e1a6:	e04d      	b.n	800e244 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 800e1a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e1aa:	3901      	subs	r1, #1
 800e1ac:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 800e1ae:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 800e1b0:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800e1b2:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e1b4:	b922      	cbnz	r2, 800e1c0 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1b8:	4298      	cmp	r0, r3
 800e1ba:	d304      	bcc.n	800e1c6 <mpsc_pbuf_claim+0x32>
 800e1bc:	1ac0      	subs	r0, r0, r3
 800e1be:	e002      	b.n	800e1c6 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 800e1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	4018      	ands	r0, r3
				buffer->rd_idx =
 800e1c6:	60e0      	str	r0, [r4, #12]
				cont = true;
 800e1c8:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 800e1ca:	e01b      	b.n	800e204 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 800e1cc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800e1d0:	f043 0302 	orr.w	r3, r3, #2
 800e1d4:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800e1d8:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 800e1da:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4798      	blx	r3
	uint32_t i = idx + val;
 800e1e0:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e1e2:	6923      	ldr	r3, [r4, #16]
 800e1e4:	f013 0f01 	tst.w	r3, #1
 800e1e8:	d104      	bne.n	800e1f4 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1ec:	4298      	cmp	r0, r3
 800e1ee:	d304      	bcc.n	800e1fa <mpsc_pbuf_claim+0x66>
 800e1f0:	1ac0      	subs	r0, r0, r3
 800e1f2:	e002      	b.n	800e1fa <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 800e1f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 800e1fa:	60a0      	str	r0, [r4, #8]
		cont = false;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	e001      	b.n	800e204 <mpsc_pbuf_claim+0x70>
 800e200:	2300      	movs	r3, #0
			item = NULL;
 800e202:	461e      	mov	r6, r3
 800e204:	f385 8811 	msr	BASEPRI, r5
 800e208:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 800e20c:	b38b      	cbz	r3, 800e272 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 800e20e:	f04f 0310 	mov.w	r3, #16
 800e212:	f3ef 8511 	mrs	r5, BASEPRI
 800e216:	f383 8812 	msr	BASEPRI_MAX, r3
 800e21a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800e21e:	68a2      	ldr	r2, [r4, #8]
 800e220:	6863      	ldr	r3, [r4, #4]
 800e222:	429a      	cmp	r2, r3
 800e224:	d9b9      	bls.n	800e19a <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 800e226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e228:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 800e22a:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 800e22c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 800e230:	2b00      	cmp	r3, #0
 800e232:	d0e5      	beq.n	800e200 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 800e234:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 800e238:	f013 0303 	ands.w	r3, r3, #3
 800e23c:	d016      	beq.n	800e26c <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d0ad      	beq.n	800e19e <mpsc_pbuf_claim+0xa>
	return 0;
 800e242:	2000      	movs	r0, #0
	return item->hdr.valid;
 800e244:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 800e248:	f013 0f01 	tst.w	r3, #1
 800e24c:	d1be      	bne.n	800e1cc <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 800e24e:	b910      	cbnz	r0, 800e256 <mpsc_pbuf_claim+0xc2>
 800e250:	69e3      	ldr	r3, [r4, #28]
 800e252:	4630      	mov	r0, r6
 800e254:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800e256:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 800e258:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e25a:	6922      	ldr	r2, [r4, #16]
 800e25c:	f012 0201 	ands.w	r2, r2, #1
 800e260:	d1a2      	bne.n	800e1a8 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e262:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e264:	428b      	cmp	r3, r1
 800e266:	d3a2      	bcc.n	800e1ae <mpsc_pbuf_claim+0x1a>
 800e268:	1a5b      	subs	r3, r3, r1
 800e26a:	e7a0      	b.n	800e1ae <mpsc_pbuf_claim+0x1a>
		cont = false;
 800e26c:	2300      	movs	r3, #0
			item = NULL;
 800e26e:	461e      	mov	r6, r3
 800e270:	e7c8      	b.n	800e204 <mpsc_pbuf_claim+0x70>

	return item;
}
 800e272:	4630      	mov	r0, r6
 800e274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e276 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 800e276:	b538      	push	{r3, r4, r5, lr}
 800e278:	4604      	mov	r4, r0
 800e27a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800e27c:	69c3      	ldr	r3, [r0, #28]
 800e27e:	4608      	mov	r0, r1
 800e280:	4798      	blx	r3
 800e282:	f04f 0310 	mov.w	r3, #16
 800e286:	f3ef 8211 	mrs	r2, BASEPRI
 800e28a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e28e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 800e292:	782b      	ldrb	r3, [r5, #0]
 800e294:	f36f 0300 	bfc	r3, #0, #1
 800e298:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	f013 0f02 	tst.w	r3, #2
 800e2a0:	d00a      	beq.n	800e2b8 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 800e2a2:	6a23      	ldr	r3, [r4, #32]
 800e2a4:	68e1      	ldr	r1, [r4, #12]
 800e2a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800e2aa:	42ab      	cmp	r3, r5
 800e2ac:	d004      	beq.n	800e2b8 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 800e2ae:	682b      	ldr	r3, [r5, #0]
 800e2b0:	f360 039f 	bfi	r3, r0, #2, #30
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	e012      	b.n	800e2de <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 800e2b8:	782b      	ldrb	r3, [r5, #0]
 800e2ba:	f36f 0341 	bfc	r3, #1, #1
 800e2be:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800e2c0:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800e2c2:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	f013 0f01 	tst.w	r3, #1
 800e2ca:	d104      	bne.n	800e2d6 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e2cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2ce:	4298      	cmp	r0, r3
 800e2d0:	d304      	bcc.n	800e2dc <mpsc_pbuf_free+0x66>
 800e2d2:	1ac0      	subs	r0, r0, r3
 800e2d4:	e002      	b.n	800e2dc <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 800e2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800e2dc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800e2de:	f382 8811 	msr	BASEPRI, r2
 800e2e2:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 800e2e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 800e2ea:	f7fc fd91 	bl	800ae10 <z_impl_k_sem_give>
}
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}

0800e2f0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800e2f0:	6883      	ldr	r3, [r0, #8]
 800e2f2:	6842      	ldr	r2, [r0, #4]
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d905      	bls.n	800e304 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 800e2f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e2fa:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800e2fc:	3800      	subs	r0, #0
 800e2fe:	bf18      	it	ne
 800e300:	2001      	movne	r0, #1
 800e302:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800e304:	1ad0      	subs	r0, r2, r3
		return false;
 800e306:	e7f9      	b.n	800e2fc <mpsc_pbuf_is_pending+0xc>

0800e308 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800e308:	4770      	bx	lr

0800e30a <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800e30a:	2000      	movs	r0, #0
 800e30c:	4770      	bx	lr

0800e30e <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800e30e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800e310:	f013 0f04 	tst.w	r3, #4
 800e314:	d001      	beq.n	800e31a <log_msg2_generic_get_wlen+0xc>
	return 0;
 800e316:	2000      	movs	r0, #0
}
 800e318:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800e31a:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800e31c:	f3c3 2049 	ubfx	r0, r3, #9, #10
 800e320:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 800e324:	4418      	add	r0, r3
 800e326:	3013      	adds	r0, #19
 800e328:	f020 0007 	bic.w	r0, r0, #7
 800e32c:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800e32e:	4770      	bx	lr

0800e330 <dummy_timestamp>:
}
 800e330:	2000      	movs	r0, #0
 800e332:	4770      	bx	lr

0800e334 <msg_filter_check>:
}
 800e334:	2001      	movs	r0, #1
 800e336:	4770      	bx	lr

0800e338 <default_lf_get_timestamp>:
{
 800e338:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800e33a:	f001 fdd3 	bl	800fee4 <z_impl_k_uptime_ticks>
 800e33e:	220a      	movs	r2, #10
 800e340:	2300      	movs	r3, #0
 800e342:	f7f2 fb4b 	bl	80009dc <__aeabi_uldivmod>
}
 800e346:	bd08      	pop	{r3, pc}

0800e348 <notify_drop>:
{
 800e348:	b508      	push	{r3, lr}
	z_log_dropped(true);
 800e34a:	2001      	movs	r0, #1
 800e34c:	f7f6 f93e 	bl	80045cc <z_log_dropped>
}
 800e350:	bd08      	pop	{r3, pc}

0800e352 <get_msg>:
{
 800e352:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 800e354:	f7f6 f9be 	bl	80046d4 <z_log_msg2_claim>
}
 800e358:	bd08      	pop	{r3, pc}

0800e35a <next_pending>:
{
 800e35a:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 800e35c:	f7f6 f9f4 	bl	8004748 <z_log_msg2_pending>
}
 800e360:	bd08      	pop	{r3, pc}

0800e362 <z_log_get_tag>:
}
 800e362:	2000      	movs	r0, #0
 800e364:	4770      	bx	lr

0800e366 <buffer_write>:
{
 800e366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e368:	4607      	mov	r7, r0
 800e36a:	460d      	mov	r5, r1
 800e36c:	4614      	mov	r4, r2
 800e36e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800e370:	4632      	mov	r2, r6
 800e372:	4621      	mov	r1, r4
 800e374:	4628      	mov	r0, r5
 800e376:	47b8      	blx	r7
		buf += processed;
 800e378:	4405      	add	r5, r0
	} while (len != 0);
 800e37a:	1a24      	subs	r4, r4, r0
 800e37c:	d1f8      	bne.n	800e370 <buffer_write+0xa>
}
 800e37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e380 <color_prefix>:
{
 800e380:	b508      	push	{r3, lr}
 800e382:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800e384:	2201      	movs	r2, #1
 800e386:	f7f6 fb27 	bl	80049d8 <color_print>
}
 800e38a:	bd08      	pop	{r3, pc}

0800e38c <color_postfix>:
{
 800e38c:	b508      	push	{r3, lr}
 800e38e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800e390:	2200      	movs	r2, #0
 800e392:	f7f6 fb21 	bl	80049d8 <color_print>
}
 800e396:	bd08      	pop	{r3, pc}

0800e398 <postfix_print>:
{
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4605      	mov	r5, r0
 800e39c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800e39e:	f001 0101 	and.w	r1, r1, #1
 800e3a2:	f7ff fff3 	bl	800e38c <color_postfix>
	newline_print(output, flags);
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f7f6 fb2b 	bl	8004a04 <newline_print>
}
 800e3ae:	bd38      	pop	{r3, r4, r5, pc}

0800e3b0 <log_msg2_hexdump>:
{
 800e3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	b083      	sub	sp, #12
 800e3b6:	4680      	mov	r8, r0
 800e3b8:	460e      	mov	r6, r1
 800e3ba:	4615      	mov	r5, r2
 800e3bc:	461f      	mov	r7, r3
 800e3be:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800e3c2:	462c      	mov	r4, r5
 800e3c4:	2d10      	cmp	r5, #16
 800e3c6:	bf28      	it	cs
 800e3c8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800e3ca:	f8cd 9000 	str.w	r9, [sp]
 800e3ce:	463b      	mov	r3, r7
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	f7f6 fb29 	bl	8004a2c <hexdump_line_print>
		data += length;
 800e3da:	4426      	add	r6, r4
	} while (len);
 800e3dc:	1b2d      	subs	r5, r5, r4
 800e3de:	d1f0      	bne.n	800e3c2 <log_msg2_hexdump+0x12>
}
 800e3e0:	b003      	add	sp, #12
 800e3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e3e6 <log_output_flush>:
{
 800e3e6:	b510      	push	{r4, lr}
 800e3e8:	4604      	mov	r4, r0
		     output->control_block->offset,
 800e3ea:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800e3ec:	6853      	ldr	r3, [r2, #4]
 800e3ee:	6812      	ldr	r2, [r2, #0]
 800e3f0:	6881      	ldr	r1, [r0, #8]
 800e3f2:	6800      	ldr	r0, [r0, #0]
 800e3f4:	f7ff ffb7 	bl	800e366 <buffer_write>
	output->control_block->offset = 0;
 800e3f8:	6863      	ldr	r3, [r4, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	601a      	str	r2, [r3, #0]
}
 800e3fe:	bd10      	pop	{r4, pc}

0800e400 <out_func>:
{
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4605      	mov	r5, r0
 800e404:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800e406:	684b      	ldr	r3, [r1, #4]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	68cb      	ldr	r3, [r1, #12]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d00f      	beq.n	800e430 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800e410:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800e412:	f3bf 8f5b 	dmb	ish
 800e416:	e853 2f00 	ldrex	r2, [r3]
 800e41a:	1c51      	adds	r1, r2, #1
 800e41c:	e843 1000 	strex	r0, r1, [r3]
 800e420:	2800      	cmp	r0, #0
 800e422:	d1f8      	bne.n	800e416 <out_func+0x16>
 800e424:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	549d      	strb	r5, [r3, r2]
}
 800e42c:	2000      	movs	r0, #0
 800e42e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800e430:	4608      	mov	r0, r1
 800e432:	f7ff ffd8 	bl	800e3e6 <log_output_flush>
 800e436:	e7eb      	b.n	800e410 <out_func+0x10>

0800e438 <cr_out_func>:
{
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	4604      	mov	r4, r0
 800e43c:	460d      	mov	r5, r1
	out_func(c, ctx);
 800e43e:	f7ff ffdf 	bl	800e400 <out_func>
	if (c == '\n') {
 800e442:	2c0a      	cmp	r4, #10
 800e444:	d001      	beq.n	800e44a <cr_out_func+0x12>
}
 800e446:	2000      	movs	r0, #0
 800e448:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 800e44a:	4629      	mov	r1, r5
 800e44c:	200d      	movs	r0, #13
 800e44e:	f7ff ffd7 	bl	800e400 <out_func>
 800e452:	e7f8      	b.n	800e446 <cr_out_func+0xe>

0800e454 <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 800e454:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 800e456:	b198      	cbz	r0, 800e480 <z_log_msg2_finalize+0x2c>
 800e458:	460e      	mov	r6, r1
 800e45a:	4614      	mov	r4, r2
 800e45c:	4619      	mov	r1, r3
 800e45e:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 800e460:	b143      	cbz	r3, 800e474 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 800e462:	f100 030c 	add.w	r3, r0, #12
 800e466:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800e46a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 800e46e:	4418      	add	r0, r3
 800e470:	f001 fdeb 	bl	801004a <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 800e474:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 800e476:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 800e478:	4628      	mov	r0, r5
 800e47a:	f7f6 f9df 	bl	800483c <z_log_msg2_commit>
}
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 800e480:	f7f6 f8a4 	bl	80045cc <z_log_dropped>
		return;
 800e484:	e7fb      	b.n	800e47e <z_log_msg2_finalize+0x2a>

0800e486 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 800e486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e48a:	4605      	mov	r5, r0
 800e48c:	460c      	mov	r4, r1
 800e48e:	4617      	mov	r7, r2
 800e490:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800e492:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 800e496:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 800e49a:	4484      	add	ip, r0
 800e49c:	f10c 0c13 	add.w	ip, ip, #19
 800e4a0:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 800e4a4:	ea4f 009c 	mov.w	r0, ip, lsr #2
 800e4a8:	f7f6 f90a 	bl	80046c0 <z_log_msg2_alloc>

	if (msg) {
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	b128      	cbz	r0, 800e4bc <z_impl_z_log_msg2_static_create+0x36>
 800e4b0:	f3c4 2249 	ubfx	r2, r4, #9, #10
 800e4b4:	4639      	mov	r1, r7
 800e4b6:	300c      	adds	r0, #12
 800e4b8:	f001 fdc7 	bl	801004a <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800e4bc:	4633      	mov	r3, r6
 800e4be:	4622      	mov	r2, r4
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	f7ff ffc6 	bl	800e454 <z_log_msg2_finalize>
}
 800e4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e4cc <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 800e4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	4681      	mov	r9, r0
 800e4d4:	460d      	mov	r5, r1
 800e4d6:	4690      	mov	r8, r2
 800e4d8:	461e      	mov	r6, r3
 800e4da:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800e4de:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 800e4e0:	b3b7      	cbz	r7, 800e550 <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 800e4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4e4:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	463b      	mov	r3, r7
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	210c      	movs	r1, #12
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7f5 f850 	bl	8003594 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800e4f4:	4682      	mov	sl, r0
 800e4f6:	eb00 030b 	add.w	r3, r0, fp
 800e4fa:	3313      	adds	r3, #19
 800e4fc:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 800e500:	2400      	movs	r4, #0
 800e502:	f36f 0400 	bfc	r4, #0, #1
 800e506:	f36f 0441 	bfc	r4, #1, #1
 800e50a:	f36f 0482 	bfc	r4, #2, #1
 800e50e:	f369 04c5 	bfi	r4, r9, #3, #3
 800e512:	f368 1488 	bfi	r4, r8, #6, #3
 800e516:	f360 2452 	bfi	r4, r0, #9, #10
 800e51a:	f36b 44de 	bfi	r4, fp, #19, #12
 800e51e:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 800e522:	0898      	lsrs	r0, r3, #2
 800e524:	f7f6 f8cc 	bl	80046c0 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 800e528:	4680      	mov	r8, r0
 800e52a:	b140      	cbz	r0, 800e53e <z_impl_z_log_msg2_runtime_vcreate+0x72>
 800e52c:	b13f      	cbz	r7, 800e53e <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 800e52e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	463b      	mov	r3, r7
 800e534:	2200      	movs	r2, #0
 800e536:	4651      	mov	r1, sl
 800e538:	300c      	adds	r0, #12
 800e53a:	f7f5 f82b 	bl	8003594 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800e53e:	4633      	mov	r3, r6
 800e540:	4622      	mov	r2, r4
 800e542:	4629      	mov	r1, r5
 800e544:	4640      	mov	r0, r8
 800e546:	f7ff ff85 	bl	800e454 <z_log_msg2_finalize>
}
 800e54a:	b005      	add	sp, #20
 800e54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800e550:	2000      	movs	r0, #0
 800e552:	e7cf      	b.n	800e4f4 <z_impl_z_log_msg2_runtime_vcreate+0x28>

0800e554 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800e554:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800e556:	f7f6 fc1f 	bl	8004d98 <__do_global_ctors_aux>
	__do_init_array_aux();
 800e55a:	f7f6 fc0f 	bl	8004d7c <__do_init_array_aux>
}
 800e55e:	bd08      	pop	{r3, pc}

0800e560 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4604      	mov	r4, r0

	if (esf != NULL) {
 800e564:	460d      	mov	r5, r1
 800e566:	b111      	cbz	r1, 800e56e <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800e568:	4608      	mov	r0, r1
 800e56a:	f7f6 fc39 	bl	8004de0 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800e56e:	4629      	mov	r1, r5
 800e570:	4620      	mov	r0, r4
 800e572:	f7fc f8dd 	bl	800a730 <z_fatal_error>
}
 800e576:	bd38      	pop	{r3, r4, r5, pc}

0800e578 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800e578:	b508      	push	{r3, lr}
 800e57a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800e57c:	6800      	ldr	r0, [r0, #0]
 800e57e:	f7ff ffef 	bl	800e560 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800e582:	bd08      	pop	{r3, pc}

0800e584 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 800e584:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800e586:	2100      	movs	r1, #0
 800e588:	2001      	movs	r0, #1
 800e58a:	f7ff ffe9 	bl	800e560 <z_arm_fatal_error>
}
 800e58e:	bd08      	pop	{r3, pc}

0800e590 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800e590:	b508      	push	{r3, lr}
	handler();
 800e592:	f7f6 fd37 	bl	8005004 <z_SysNmiOnReset>
	z_arm_int_exit();
 800e596:	f7f6 fe21 	bl	80051dc <z_arm_exc_exit>
}
 800e59a:	bd08      	pop	{r3, pc}

0800e59c <memory_fault_recoverable>:
}
 800e59c:	2000      	movs	r0, #0
 800e59e:	4770      	bx	lr

0800e5a0 <z_log_msg2_runtime_create>:
{
 800e5a0:	b510      	push	{r4, lr}
 800e5a2:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800e5a4:	ac0a      	add	r4, sp, #40	; 0x28
 800e5a6:	9405      	str	r4, [sp, #20]
 800e5a8:	9402      	str	r4, [sp, #8]
 800e5aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e5ac:	9401      	str	r4, [sp, #4]
 800e5ae:	9c08      	ldr	r4, [sp, #32]
 800e5b0:	9400      	str	r4, [sp, #0]
 800e5b2:	f7ff ff8b 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800e5b6:	b006      	add	sp, #24
 800e5b8:	bd10      	pop	{r4, pc}

0800e5ba <fault_handle>:
{
 800e5ba:	b508      	push	{r3, lr}
	*recoverable = false;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800e5c0:	1ecb      	subs	r3, r1, #3
 800e5c2:	2b09      	cmp	r3, #9
 800e5c4:	d81a      	bhi.n	800e5fc <fault_handle+0x42>
 800e5c6:	e8df f003 	tbb	[pc, r3]
 800e5ca:	0905      	.short	0x0905
 800e5cc:	1919110d 	.word	0x1919110d
 800e5d0:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	f7f7 fa5d 	bl	8005a94 <hard_fault>
}
 800e5da:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800e5dc:	2100      	movs	r1, #0
 800e5de:	f7f7 f8f7 	bl	80057d0 <mem_manage_fault>
		break;
 800e5e2:	e7fa      	b.n	800e5da <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	f7f6 fe25 	bl	8005234 <bus_fault>
		break;
 800e5ea:	e7f6      	b.n	800e5da <fault_handle+0x20>
		reason = usage_fault(esf);
 800e5ec:	f7f6 ff90 	bl	8005510 <usage_fault>
		break;
 800e5f0:	e7f3      	b.n	800e5da <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	f7f7 f8c0 	bl	8005778 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800e5f8:	2000      	movs	r0, #0
		break;
 800e5fa:	e7ee      	b.n	800e5da <fault_handle+0x20>
		reserved_exception(esf, fault);
 800e5fc:	f7f6 fdfc 	bl	80051f8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800e600:	2000      	movs	r0, #0
	return reason;
 800e602:	e7ea      	b.n	800e5da <fault_handle+0x20>

0800e604 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800e604:	6843      	ldr	r3, [r0, #4]
 800e606:	1e5a      	subs	r2, r3, #1
		&&
 800e608:	4213      	tst	r3, r2
 800e60a:	d106      	bne.n	800e61a <mpu_partition_is_valid+0x16>
		&&
 800e60c:	2b1f      	cmp	r3, #31
 800e60e:	d906      	bls.n	800e61e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800e610:	6803      	ldr	r3, [r0, #0]
		&&
 800e612:	421a      	tst	r2, r3
 800e614:	d005      	beq.n	800e622 <mpu_partition_is_valid+0x1e>
 800e616:	2000      	movs	r0, #0
 800e618:	4770      	bx	lr
 800e61a:	2000      	movs	r0, #0
 800e61c:	4770      	bx	lr
 800e61e:	2000      	movs	r0, #0
 800e620:	4770      	bx	lr
 800e622:	2001      	movs	r0, #1
}
 800e624:	4770      	bx	lr

0800e626 <mpu_configure_region>:
{
 800e626:	b500      	push	{lr}
 800e628:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800e62a:	680b      	ldr	r3, [r1, #0]
 800e62c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800e62e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800e630:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800e632:	2b20      	cmp	r3, #32
 800e634:	d912      	bls.n	800e65c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800e636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e63a:	d811      	bhi.n	800e660 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800e63c:	3b01      	subs	r3, #1
 800e63e:	fab3 f383 	clz	r3, r3
 800e642:	f1c3 031f 	rsb	r3, r3, #31
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800e64c:	4313      	orrs	r3, r2
 800e64e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800e650:	a901      	add	r1, sp, #4
 800e652:	f7f7 fc21 	bl	8005e98 <region_allocate_and_init>
}
 800e656:	b005      	add	sp, #20
 800e658:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800e65c:	2308      	movs	r3, #8
 800e65e:	e7f5      	b.n	800e64c <mpu_configure_region+0x26>
		return REGION_4G;
 800e660:	233e      	movs	r3, #62	; 0x3e
 800e662:	e7f3      	b.n	800e64c <mpu_configure_region+0x26>

0800e664 <arm_core_mpu_configure_static_mpu_regions>:
{
 800e664:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800e666:	f7f7 fc9d 	bl	8005fa4 <mpu_configure_static_mpu_regions>
}
 800e66a:	bd08      	pop	{r3, pc}

0800e66c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800e66c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800e66e:	f7f7 fca3 	bl	8005fb8 <mpu_configure_dynamic_mpu_regions>
}
 800e672:	bd08      	pop	{r3, pc}

0800e674 <malloc_prepare>:
}
 800e674:	2000      	movs	r0, #0
 800e676:	4770      	bx	lr

0800e678 <_stdout_hook_default>:
}
 800e678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e67c:	4770      	bx	lr

0800e67e <_stdin_hook_default>:
}
 800e67e:	2000      	movs	r0, #0
 800e680:	4770      	bx	lr

0800e682 <_read>:
{
 800e682:	b508      	push	{r3, lr}
 800e684:	4608      	mov	r0, r1
 800e686:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800e688:	f7f7 fcee 	bl	8006068 <z_impl_zephyr_read_stdin>
}
 800e68c:	bd08      	pop	{r3, pc}

0800e68e <_write>:
{
 800e68e:	b508      	push	{r3, lr}
 800e690:	4608      	mov	r0, r1
 800e692:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800e694:	f7f7 fcfe 	bl	8006094 <z_impl_zephyr_write_stdout>
}
 800e698:	bd08      	pop	{r3, pc}

0800e69a <_close>:
}
 800e69a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e69e:	4770      	bx	lr

0800e6a0 <_lseek>:
}
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	4770      	bx	lr

0800e6a4 <_isatty>:
}
 800e6a4:	2802      	cmp	r0, #2
 800e6a6:	bfcc      	ite	gt
 800e6a8:	2000      	movgt	r0, #0
 800e6aa:	2001      	movle	r0, #1
 800e6ac:	4770      	bx	lr

0800e6ae <_kill>:
}
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	4770      	bx	lr

0800e6b2 <_getpid>:
}
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	4770      	bx	lr

0800e6b6 <_fstat>:
	st->st_mode = S_IFCHR;
 800e6b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6ba:	604b      	str	r3, [r1, #4]
}
 800e6bc:	2000      	movs	r0, #0
 800e6be:	4770      	bx	lr

0800e6c0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800e6c4:	2014      	movs	r0, #20
 800e6c6:	f7fd fe81 	bl	800c3cc <malloc>
 800e6ca:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800e6cc:	f001 f942 	bl	800f954 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800e6d0:	bd10      	pop	{r4, pc}

0800e6d2 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800e6d2:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800e6d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6dc:	f7fc facc 	bl	800ac78 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800e6e0:	bd08      	pop	{r3, pc}

0800e6e2 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800e6e2:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800e6e4:	f7fc fb52 	bl	800ad8c <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800e6e8:	bd08      	pop	{r3, pc}

0800e6ea <__stm32_exti_isr_0>:
{
 800e6ea:	b508      	push	{r3, lr}
 800e6ec:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	f7f7 fd09 	bl	8006108 <__stm32_exti_isr>
}
 800e6f6:	bd08      	pop	{r3, pc}

0800e6f8 <__stm32_exti_isr_1>:
{
 800e6f8:	b508      	push	{r3, lr}
 800e6fa:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800e6fc:	2102      	movs	r1, #2
 800e6fe:	2001      	movs	r0, #1
 800e700:	f7f7 fd02 	bl	8006108 <__stm32_exti_isr>
}
 800e704:	bd08      	pop	{r3, pc}

0800e706 <__stm32_exti_isr_2>:
{
 800e706:	b508      	push	{r3, lr}
 800e708:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800e70a:	2103      	movs	r1, #3
 800e70c:	2002      	movs	r0, #2
 800e70e:	f7f7 fcfb 	bl	8006108 <__stm32_exti_isr>
}
 800e712:	bd08      	pop	{r3, pc}

0800e714 <__stm32_exti_isr_3>:
{
 800e714:	b508      	push	{r3, lr}
 800e716:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800e718:	2104      	movs	r1, #4
 800e71a:	2003      	movs	r0, #3
 800e71c:	f7f7 fcf4 	bl	8006108 <__stm32_exti_isr>
}
 800e720:	bd08      	pop	{r3, pc}

0800e722 <__stm32_exti_isr_4>:
{
 800e722:	b508      	push	{r3, lr}
 800e724:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800e726:	2105      	movs	r1, #5
 800e728:	2004      	movs	r0, #4
 800e72a:	f7f7 fced 	bl	8006108 <__stm32_exti_isr>
}
 800e72e:	bd08      	pop	{r3, pc}

0800e730 <__stm32_exti_isr_9_5>:
{
 800e730:	b508      	push	{r3, lr}
 800e732:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800e734:	210a      	movs	r1, #10
 800e736:	2005      	movs	r0, #5
 800e738:	f7f7 fce6 	bl	8006108 <__stm32_exti_isr>
}
 800e73c:	bd08      	pop	{r3, pc}

0800e73e <__stm32_exti_isr_15_10>:
{
 800e73e:	b508      	push	{r3, lr}
 800e740:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800e742:	2110      	movs	r1, #16
 800e744:	200a      	movs	r0, #10
 800e746:	f7f7 fcdf 	bl	8006108 <__stm32_exti_isr>
}
 800e74a:	bd08      	pop	{r3, pc}

0800e74c <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800e74c:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800e74e:	2200      	movs	r2, #0
 800e750:	4611      	mov	r1, r2
 800e752:	2006      	movs	r0, #6
 800e754:	f7f6 fc40 	bl	8004fd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800e758:	2200      	movs	r2, #0
 800e75a:	4611      	mov	r1, r2
 800e75c:	2007      	movs	r0, #7
 800e75e:	f7f6 fc3b 	bl	8004fd8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800e762:	2200      	movs	r2, #0
 800e764:	4611      	mov	r1, r2
 800e766:	2008      	movs	r0, #8
 800e768:	f7f6 fc36 	bl	8004fd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800e76c:	2200      	movs	r2, #0
 800e76e:	4611      	mov	r1, r2
 800e770:	2009      	movs	r0, #9
 800e772:	f7f6 fc31 	bl	8004fd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800e776:	2200      	movs	r2, #0
 800e778:	4611      	mov	r1, r2
 800e77a:	200a      	movs	r0, #10
 800e77c:	f7f6 fc2c 	bl	8004fd8 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800e780:	2200      	movs	r2, #0
 800e782:	4611      	mov	r1, r2
 800e784:	2017      	movs	r0, #23
 800e786:	f7f6 fc27 	bl	8004fd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800e78a:	2200      	movs	r2, #0
 800e78c:	4611      	mov	r1, r2
 800e78e:	2028      	movs	r0, #40	; 0x28
 800e790:	f7f6 fc22 	bl	8004fd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800e794:	bd08      	pop	{r3, pc}

0800e796 <stm32_exti_init>:
{
 800e796:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800e798:	f7ff ffd8 	bl	800e74c <__stm32_exti_connect_irqs>
}
 800e79c:	2000      	movs	r0, #0
 800e79e:	bd08      	pop	{r3, pc}

0800e7a0 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800e7a4:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800e7a6:	6083      	str	r3, [r0, #8]
}
 800e7a8:	4770      	bx	lr

0800e7aa <get_bus_clock>:
}
 800e7aa:	fbb0 f0f1 	udiv	r0, r0, r1
 800e7ae:	4770      	bx	lr

0800e7b0 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800e7b4:	2314      	movs	r3, #20
 800e7b6:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800e7b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7bc:	6083      	str	r3, [r0, #8]
}
 800e7be:	4770      	bx	lr

0800e7c0 <gpio_stm32_isr>:
{
 800e7c0:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800e7c2:	684e      	ldr	r6, [r1, #4]
 800e7c4:	2501      	movs	r5, #1
 800e7c6:	4085      	lsls	r5, r0
	return list->head;
 800e7c8:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800e7ca:	b119      	cbz	r1, 800e7d4 <gpio_stm32_isr+0x14>
 800e7cc:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e7ce:	b149      	cbz	r1, 800e7e4 <gpio_stm32_isr+0x24>
	return node->next;
 800e7d0:	680c      	ldr	r4, [r1, #0]
 800e7d2:	e007      	b.n	800e7e4 <gpio_stm32_isr+0x24>
 800e7d4:	460c      	mov	r4, r1
 800e7d6:	e005      	b.n	800e7e4 <gpio_stm32_isr+0x24>
 800e7d8:	b164      	cbz	r4, 800e7f4 <gpio_stm32_isr+0x34>
 800e7da:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e7dc:	b104      	cbz	r4, 800e7e0 <gpio_stm32_isr+0x20>
	return node->next;
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	461c      	mov	r4, r3
 800e7e4:	b141      	cbz	r1, 800e7f8 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800e7e6:	688a      	ldr	r2, [r1, #8]
 800e7e8:	402a      	ands	r2, r5
 800e7ea:	d0f5      	beq.n	800e7d8 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800e7ec:	684b      	ldr	r3, [r1, #4]
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4798      	blx	r3
 800e7f2:	e7f1      	b.n	800e7d8 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	e7f3      	b.n	800e7e0 <gpio_stm32_isr+0x20>
}
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}

0800e7fa <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800e7fa:	f410 7f00 	tst.w	r0, #512	; 0x200
 800e7fe:	d01b      	beq.n	800e838 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800e800:	2310      	movs	r3, #16
 800e802:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800e804:	f010 0f02 	tst.w	r0, #2
 800e808:	d004      	beq.n	800e814 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800e80a:	f010 0f04 	tst.w	r0, #4
 800e80e:	d02c      	beq.n	800e86a <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800e810:	2350      	movs	r3, #80	; 0x50
 800e812:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800e814:	f010 0310 	ands.w	r3, r0, #16
 800e818:	d005      	beq.n	800e826 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800e81a:	680b      	ldr	r3, [r1, #0]
 800e81c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e820:	600b      	str	r3, [r1, #0]
	return 0;
 800e822:	2000      	movs	r0, #0
 800e824:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800e826:	f010 0020 	ands.w	r0, r0, #32
 800e82a:	d020      	beq.n	800e86e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800e82c:	680a      	ldr	r2, [r1, #0]
 800e82e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e832:	600a      	str	r2, [r1, #0]
	return 0;
 800e834:	4618      	mov	r0, r3
 800e836:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800e838:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e83c:	d011      	beq.n	800e862 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800e83e:	2300      	movs	r3, #0
 800e840:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800e842:	f010 0310 	ands.w	r3, r0, #16
 800e846:	d004      	beq.n	800e852 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800e848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e84c:	600b      	str	r3, [r1, #0]
	return 0;
 800e84e:	2000      	movs	r0, #0
 800e850:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800e852:	f010 0020 	ands.w	r0, r0, #32
 800e856:	d00a      	beq.n	800e86e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800e858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e85c:	600a      	str	r2, [r1, #0]
	return 0;
 800e85e:	4618      	mov	r0, r3
 800e860:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800e862:	2330      	movs	r3, #48	; 0x30
 800e864:	600b      	str	r3, [r1, #0]
	return 0;
 800e866:	2000      	movs	r0, #0
 800e868:	4770      	bx	lr
				return -ENOTSUP;
 800e86a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800e86e:	4770      	bx	lr

0800e870 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e870:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e872:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800e874:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800e876:	600b      	str	r3, [r1, #0]
}
 800e878:	2000      	movs	r0, #0
 800e87a:	4770      	bx	lr

0800e87c <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e87c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e87e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800e880:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800e882:	4042      	eors	r2, r0
 800e884:	400a      	ands	r2, r1
 800e886:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800e888:	615a      	str	r2, [r3, #20]
}
 800e88a:	2000      	movs	r0, #0
 800e88c:	4770      	bx	lr

0800e88e <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e88e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e890:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800e892:	6199      	str	r1, [r3, #24]
}
 800e894:	2000      	movs	r0, #0
 800e896:	4770      	bx	lr

0800e898 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e898:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e89a:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800e89c:	6299      	str	r1, [r3, #40]	; 0x28
}
 800e89e:	2000      	movs	r0, #0
 800e8a0:	4770      	bx	lr

0800e8a2 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e8a2:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e8a4:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800e8a6:	6953      	ldr	r3, [r2, #20]
 800e8a8:	404b      	eors	r3, r1
 800e8aa:	6153      	str	r3, [r2, #20]
}
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	4770      	bx	lr

0800e8b0 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800e8b0:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800e8b2:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800e8b4:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800e8b8:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800e8ba:	b1fb      	cbz	r3, 800e8fc <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e00d      	b.n	800e8dc <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800e8c0:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800e8c2:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800e8c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e8c8:	4281      	cmp	r1, r0
 800e8ca:	d112      	bne.n	800e8f2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800e8cc:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800e8d0:	e00f      	b.n	800e8f2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800e8d2:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e8d6:	e00c      	b.n	800e8f2 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e8d8:	4618      	mov	r0, r3
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	b163      	cbz	r3, 800e8f8 <gpio_stm32_manage_callback+0x48>
 800e8de:	4299      	cmp	r1, r3
 800e8e0:	d1fa      	bne.n	800e8d8 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d0ec      	beq.n	800e8c0 <gpio_stm32_manage_callback+0x10>
	return node->next;
 800e8e6:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800e8e8:	6003      	str	r3, [r0, #0]
	return list->tail;
 800e8ea:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e8ee:	4299      	cmp	r1, r3
 800e8f0:	d0ef      	beq.n	800e8d2 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e8f6:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800e8f8:	b903      	cbnz	r3, 800e8fc <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800e8fa:	b162      	cbz	r2, 800e916 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800e8fc:	b172      	cbz	r2, 800e91c <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800e8fe:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800e900:	600b      	str	r3, [r1, #0]
	list->head = node;
 800e902:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800e904:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800e908:	b10b      	cbz	r3, 800e90e <gpio_stm32_manage_callback+0x5e>
	return 0;
 800e90a:	2000      	movs	r0, #0
 800e90c:	e007      	b.n	800e91e <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800e90e:	f8cc 1004 	str.w	r1, [ip, #4]
 800e912:	2000      	movs	r0, #0
}
 800e914:	e003      	b.n	800e91e <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800e916:	f06f 0015 	mvn.w	r0, #21
 800e91a:	e000      	b.n	800e91e <gpio_stm32_manage_callback+0x6e>
	return 0;
 800e91c:	2000      	movs	r0, #0
}
 800e91e:	bc10      	pop	{r4}
 800e920:	4770      	bx	lr

0800e922 <gpio_stm32_configure_raw>:
{
 800e922:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800e924:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e926:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800e928:	2001      	movs	r0, #1
 800e92a:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800e92c:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800e930:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e934:	6865      	ldr	r5, [r4, #4]
 800e936:	ea25 0500 	bic.w	r5, r5, r0
 800e93a:	408e      	lsls	r6, r1
 800e93c:	4335      	orrs	r5, r6
 800e93e:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800e940:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800e944:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e946:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e94a:	2d00      	cmp	r5, #0
 800e94c:	d04a      	beq.n	800e9e4 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 800e94e:	fab5 f585 	clz	r5, r5
 800e952:	006d      	lsls	r5, r5, #1
 800e954:	2703      	movs	r7, #3
 800e956:	fa07 f505 	lsl.w	r5, r7, r5
 800e95a:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e95e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e962:	2d00      	cmp	r5, #0
 800e964:	d040      	beq.n	800e9e8 <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 800e966:	fab5 f585 	clz	r5, r5
 800e96a:	006d      	lsls	r5, r5, #1
 800e96c:	fa0e f505 	lsl.w	r5, lr, r5
 800e970:	4335      	orrs	r5, r6
 800e972:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800e974:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e978:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e97a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e97e:	b3ad      	cbz	r5, 800e9ec <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 800e980:	fab5 f585 	clz	r5, r5
 800e984:	006d      	lsls	r5, r5, #1
 800e986:	f04f 0e03 	mov.w	lr, #3
 800e98a:	fa0e f505 	lsl.w	r5, lr, r5
 800e98e:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e992:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e996:	b35d      	cbz	r5, 800e9f0 <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 800e998:	fab5 f585 	clz	r5, r5
 800e99c:	006d      	lsls	r5, r5, #1
 800e99e:	fa02 f505 	lsl.w	r5, r2, r5
 800e9a2:	ea4e 0505 	orr.w	r5, lr, r5
 800e9a6:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800e9a8:	f1bc 0f20 	cmp.w	ip, #32
 800e9ac:	d022      	beq.n	800e9f4 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800e9ae:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e9b2:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9b4:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d052      	beq.n	800ea62 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 800e9bc:	fab3 f383 	clz	r3, r3
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	2103      	movs	r1, #3
 800e9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c8:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9cc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d048      	beq.n	800ea66 <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 800e9d4:	fab0 f080 	clz	r0, r0
 800e9d8:	0040      	lsls	r0, r0, #1
 800e9da:	fa0c f000 	lsl.w	r0, ip, r0
 800e9de:	4318      	orrs	r0, r3
 800e9e0:	6020      	str	r0, [r4, #0]
}
 800e9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800e9e4:	2520      	movs	r5, #32
 800e9e6:	e7b4      	b.n	800e952 <gpio_stm32_configure_raw+0x30>
 800e9e8:	2520      	movs	r5, #32
 800e9ea:	e7be      	b.n	800e96a <gpio_stm32_configure_raw+0x48>
 800e9ec:	2520      	movs	r5, #32
 800e9ee:	e7c9      	b.n	800e984 <gpio_stm32_configure_raw+0x62>
 800e9f0:	2520      	movs	r5, #32
 800e9f2:	e7d3      	b.n	800e99c <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 800e9f4:	2907      	cmp	r1, #7
 800e9f6:	dc19      	bgt.n	800ea2c <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e9f8:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9fa:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800e9fe:	b18a      	cbz	r2, 800ea24 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 800ea00:	fab2 f282 	clz	r2, r2
 800ea04:	0092      	lsls	r2, r2, #2
 800ea06:	250f      	movs	r5, #15
 800ea08:	fa05 f202 	lsl.w	r2, r5, r2
 800ea0c:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea10:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800ea14:	b142      	cbz	r2, 800ea28 <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 800ea16:	fab2 f282 	clz	r2, r2
 800ea1a:	0092      	lsls	r2, r2, #2
 800ea1c:	4093      	lsls	r3, r2
 800ea1e:	430b      	orrs	r3, r1
 800ea20:	6223      	str	r3, [r4, #32]
}
 800ea22:	e7c4      	b.n	800e9ae <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800ea24:	2220      	movs	r2, #32
 800ea26:	e7ed      	b.n	800ea04 <gpio_stm32_configure_raw+0xe2>
 800ea28:	2220      	movs	r2, #32
 800ea2a:	e7f6      	b.n	800ea1a <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ea2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ea2e:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea30:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800ea34:	b189      	cbz	r1, 800ea5a <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 800ea36:	fab1 f181 	clz	r1, r1
 800ea3a:	0089      	lsls	r1, r1, #2
 800ea3c:	260f      	movs	r6, #15
 800ea3e:	fa06 f101 	lsl.w	r1, r6, r1
 800ea42:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ea46:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800ea4a:	b142      	cbz	r2, 800ea5e <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 800ea4c:	fab2 f282 	clz	r2, r2
 800ea50:	0092      	lsls	r2, r2, #2
 800ea52:	4093      	lsls	r3, r2
 800ea54:	430b      	orrs	r3, r1
 800ea56:	6263      	str	r3, [r4, #36]	; 0x24
}
 800ea58:	e7a9      	b.n	800e9ae <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800ea5a:	2120      	movs	r1, #32
 800ea5c:	e7ed      	b.n	800ea3a <gpio_stm32_configure_raw+0x118>
 800ea5e:	2220      	movs	r2, #32
 800ea60:	e7f6      	b.n	800ea50 <gpio_stm32_configure_raw+0x12e>
 800ea62:	2320      	movs	r3, #32
 800ea64:	e7ac      	b.n	800e9c0 <gpio_stm32_configure_raw+0x9e>
 800ea66:	2020      	movs	r0, #32
 800ea68:	e7b6      	b.n	800e9d8 <gpio_stm32_configure_raw+0xb6>

0800ea6a <gpio_stm32_config>:
{
 800ea6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	4607      	mov	r7, r0
 800ea70:	460d      	mov	r5, r1
 800ea72:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800ea74:	a901      	add	r1, sp, #4
 800ea76:	4610      	mov	r0, r2
 800ea78:	f7ff febf 	bl	800e7fa <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	b970      	cbnz	r0, 800ea9e <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800ea80:	f414 7f00 	tst.w	r4, #512	; 0x200
 800ea84:	d005      	beq.n	800ea92 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800ea86:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800ea8a:	d10b      	bne.n	800eaa4 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800ea8c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800ea90:	d10e      	bne.n	800eab0 <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800ea92:	2300      	movs	r3, #0
 800ea94:	9a01      	ldr	r2, [sp, #4]
 800ea96:	4629      	mov	r1, r5
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f7ff ff42 	bl	800e922 <gpio_stm32_configure_raw>
}
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	b003      	add	sp, #12
 800eaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	40a9      	lsls	r1, r5
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	f7ff fef0 	bl	800e88e <gpio_stm32_port_set_bits_raw>
 800eaae:	e7f0      	b.n	800ea92 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800eab0:	2101      	movs	r1, #1
 800eab2:	40a9      	lsls	r1, r5
 800eab4:	4638      	mov	r0, r7
 800eab6:	f7ff feef 	bl	800e898 <gpio_stm32_port_clear_bits_raw>
 800eaba:	e7ea      	b.n	800ea92 <gpio_stm32_config+0x28>

0800eabc <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800eabc:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800eabe:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 800eac0:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 800eac2:	2101      	movs	r1, #1
 800eac4:	f7f7 fd4c 	bl	8006560 <gpio_stm32_clock_request>
	if (ret < 0) {
 800eac8:	2800      	cmp	r0, #0
 800eaca:	db00      	blt.n	800eace <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 800eacc:	2000      	movs	r0, #0
}
 800eace:	bd08      	pop	{r3, pc}

0800ead0 <gpio_stm32_configure>:
{
 800ead0:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 800ead2:	f7ff ff26 	bl	800e922 <gpio_stm32_configure_raw>
}
 800ead6:	2000      	movs	r0, #0
 800ead8:	bd08      	pop	{r3, pc}

0800eada <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800eada:	6341      	str	r1, [r0, #52]	; 0x34
}
 800eadc:	4770      	bx	lr

0800eade <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800eade:	6381      	str	r1, [r0, #56]	; 0x38
}
 800eae0:	4770      	bx	lr

0800eae2 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800eae2:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800eae4:	4770      	bx	lr

0800eae6 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800eae6:	6401      	str	r1, [r0, #64]	; 0x40
}
 800eae8:	4770      	bx	lr

0800eaea <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800eaea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800eaec:	6581      	str	r1, [r0, #88]	; 0x58
}
 800eaee:	4770      	bx	lr

0800eaf0 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800eaf0:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800eaf2:	4770      	bx	lr

0800eaf4 <get_polarity>:
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800eaf4:	f010 0f01 	tst.w	r0, #1
 800eaf8:	d001      	beq.n	800eafe <get_polarity+0xa>
	return LL_TIM_OCPOLARITY_LOW;
 800eafa:	2002      	movs	r0, #2
 800eafc:	4770      	bx	lr
		return LL_TIM_OCPOLARITY_HIGH;
 800eafe:	2000      	movs	r0, #0
}
 800eb00:	4770      	bx	lr

0800eb02 <pwm_stm32_get_cycles_per_sec>:
	struct pwm_stm32_data *data = dev->data;
 800eb02:	6903      	ldr	r3, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 800eb04:	6841      	ldr	r1, [r0, #4]
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6849      	ldr	r1, [r1, #4]
 800eb0a:	3101      	adds	r1, #1
 800eb0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb10:	2000      	movs	r0, #0
 800eb12:	6013      	str	r3, [r2, #0]
 800eb14:	6050      	str	r0, [r2, #4]
}
 800eb16:	4770      	bx	lr

0800eb18 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800eb18:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800eb1a:	b91b      	cbnz	r3, 800eb24 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800eb1c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800eb1e:	b91b      	cbnz	r3, 800eb28 <spi_stm32_transfer_ongoing+0x10>
 800eb20:	2000      	movs	r0, #0
 800eb22:	4770      	bx	lr
 800eb24:	2001      	movs	r0, #1
 800eb26:	4770      	bx	lr
 800eb28:	2001      	movs	r0, #1
}
 800eb2a:	4770      	bx	lr

0800eb2c <z_log_msg2_runtime_create>:
{
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800eb30:	ac0a      	add	r4, sp, #40	; 0x28
 800eb32:	9405      	str	r4, [sp, #20]
 800eb34:	9402      	str	r4, [sp, #8]
 800eb36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eb38:	9401      	str	r4, [sp, #4]
 800eb3a:	9c08      	ldr	r4, [sp, #32]
 800eb3c:	9400      	str	r4, [sp, #0]
 800eb3e:	f7ff fcc5 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800eb42:	b006      	add	sp, #24
 800eb44:	bd10      	pop	{r4, pc}

0800eb46 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800eb46:	b508      	push	{r3, lr}
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2105      	movs	r1, #5
 800eb4c:	2023      	movs	r0, #35	; 0x23
 800eb4e:	f7f6 fa43 	bl	8004fd8 <z_arm_irq_priority_set>
 800eb52:	2023      	movs	r0, #35	; 0x23
 800eb54:	f7f6 fa32 	bl	8004fbc <arch_irq_enable>
 800eb58:	bd08      	pop	{r3, pc}

0800eb5a <spi_stm32_release>:
{
 800eb5a:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800eb5c:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	b1c3      	cbz	r3, 800eb94 <spi_stm32_release+0x3a>
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	b1b3      	cbz	r3, 800eb94 <spi_stm32_release+0x3a>
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	b1a2      	cbz	r2, 800eb94 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800eb6a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800eb6c:	f7fd f86a 	bl	800bc44 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800eb78:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	408b      	lsls	r3, r1
 800eb80:	421a      	tst	r2, r3
 800eb82:	d10b      	bne.n	800eb9c <spi_stm32_release+0x42>
 800eb84:	2300      	movs	r3, #0
	if (value != 0)	{
 800eb86:	b15b      	cbz	r3, 800eba0 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eb88:	2301      	movs	r3, #1
 800eb8a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800eb8e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	4798      	blx	r3
 800eb94:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 800eb96:	b153      	cbz	r3, 800ebae <spi_stm32_release+0x54>
}
 800eb98:	2000      	movs	r0, #0
 800eb9a:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e7f2      	b.n	800eb86 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eba0:	2301      	movs	r3, #1
 800eba2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800eba6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800ebac:	e7f2      	b.n	800eb94 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800ebae:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800ebb0:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 800ebb4:	f7fc f92c 	bl	800ae10 <z_impl_k_sem_give>
}
 800ebb8:	e7ee      	b.n	800eb98 <spi_stm32_release+0x3e>

0800ebba <spi_stm32_cs_control>:
{
 800ebba:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800ebbc:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d034      	beq.n	800ec2e <spi_stm32_cs_control+0x74>
 800ebc4:	689a      	ldr	r2, [r3, #8]
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	d031      	beq.n	800ec2e <spi_stm32_cs_control+0x74>
 800ebca:	6810      	ldr	r0, [r2, #0]
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d02e      	beq.n	800ec2e <spi_stm32_cs_control+0x74>
		if (on) {
 800ebd0:	b9c9      	cbnz	r1, 800ec06 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800ebd2:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800ebd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800ebd8:	d129      	bne.n	800ec2e <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800ebda:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800ebdc:	f7fd f832 	bl	800bc44 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800ebe4:	6818      	ldr	r0, [r3, #0]
 800ebe6:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800ebe8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	2301      	movs	r3, #1
 800ebee:	408b      	lsls	r3, r1
 800ebf0:	421a      	tst	r2, r3
 800ebf2:	d126      	bne.n	800ec42 <spi_stm32_cs_control+0x88>
 800ebf4:	2300      	movs	r3, #0
	if (value != 0)	{
 800ebf6:	b333      	cbz	r3, 800ec46 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ebfe:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	4798      	blx	r3
 800ec04:	e013      	b.n	800ec2e <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 800ec06:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 800ec08:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	408b      	lsls	r3, r1
 800ec10:	421a      	tst	r2, r3
 800ec12:	d10d      	bne.n	800ec30 <spi_stm32_cs_control+0x76>
 800ec14:	2301      	movs	r3, #1
	if (value != 0)	{
 800ec16:	b16b      	cbz	r3, 800ec34 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ec18:	2301      	movs	r3, #1
 800ec1a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ec1e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	689b      	ldr	r3, [r3, #8]
 800ec28:	6898      	ldr	r0, [r3, #8]
 800ec2a:	f7fd f80b 	bl	800bc44 <z_impl_k_busy_wait>
}
 800ec2e:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800ec30:	2300      	movs	r3, #0
 800ec32:	e7f0      	b.n	800ec16 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ec34:	2301      	movs	r3, #1
 800ec36:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ec3a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	4798      	blx	r3
 800ec40:	e7f0      	b.n	800ec24 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800ec42:	2301      	movs	r3, #1
 800ec44:	e7d7      	b.n	800ebf6 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ec46:	2301      	movs	r3, #1
 800ec48:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ec4c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	4798      	blx	r3
 800ec52:	e7ec      	b.n	800ec2e <spi_stm32_cs_control+0x74>

0800ec54 <spi_stm32_complete>:
{
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800ec5a:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800ec5c:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800ec5e:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800ec60:	6863      	ldr	r3, [r4, #4]
 800ec62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec66:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800ec68:	6863      	ldr	r3, [r4, #4]
 800ec6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec6e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800ec70:	6863      	ldr	r3, [r4, #4]
 800ec72:	f023 0320 	bic.w	r3, r3, #32
 800ec76:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800ec78:	2100      	movs	r1, #0
 800ec7a:	f7ff ff9e 	bl	800ebba <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ec7e:	68a3      	ldr	r3, [r4, #8]
 800ec80:	f013 0f01 	tst.w	r3, #1
 800ec84:	d001      	beq.n	800ec8a <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800ec86:	68e3      	ldr	r3, [r4, #12]
 800ec88:	e7f9      	b.n	800ec7e <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800ec90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec94:	d015      	beq.n	800ecc2 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800ec96:	68a3      	ldr	r3, [r4, #8]
 800ec98:	f013 0f20 	tst.w	r3, #32
 800ec9c:	d006      	beq.n	800ecac <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800ec9e:	68a3      	ldr	r3, [r4, #8]
 800eca0:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800eca2:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecaa:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecb2:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800ecb4:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 800ecb6:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 800ecba:	f7fc f8a9 	bl	800ae10 <z_impl_k_sem_give>
}
 800ecbe:	b002      	add	sp, #8
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800ecc2:	68a3      	ldr	r3, [r4, #8]
 800ecc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ecc8:	d1fb      	bne.n	800ecc2 <spi_stm32_complete+0x6e>
 800ecca:	e7e4      	b.n	800ec96 <spi_stm32_complete+0x42>

0800eccc <spi_stm32_transceive>:
{
 800eccc:	b510      	push	{r4, lr}
 800ecce:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800ecd0:	2400      	movs	r4, #0
 800ecd2:	9401      	str	r4, [sp, #4]
 800ecd4:	9400      	str	r4, [sp, #0]
 800ecd6:	f7f8 f9b9 	bl	800704c <transceive>
}
 800ecda:	b002      	add	sp, #8
 800ecdc:	bd10      	pop	{r4, pc}

0800ecde <spi_stm32_shift_m>:
{
 800ecde:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800ece0:	6883      	ldr	r3, [r0, #8]
 800ece2:	f013 0f02 	tst.w	r3, #2
 800ece6:	d0fb      	beq.n	800ece0 <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ece8:	680b      	ldr	r3, [r1, #0]
 800ecea:	889b      	ldrh	r3, [r3, #4]
 800ecec:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ecf0:	2b08      	cmp	r3, #8
 800ecf2:	d009      	beq.n	800ed08 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ecf4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d03d      	beq.n	800ed76 <spi_stm32_shift_m+0x98>
 800ecfa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	d13c      	bne.n	800ed7a <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800ed00:	2a00      	cmp	r2, #0
 800ed02:	d03c      	beq.n	800ed7e <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	e03b      	b.n	800ed80 <spi_stm32_shift_m+0xa2>
 800ed08:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ed0a:	b18b      	cbz	r3, 800ed30 <spi_stm32_shift_m+0x52>
 800ed0c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ed0e:	b98a      	cbnz	r2, 800ed34 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800ed10:	b192      	cbz	r2, 800ed38 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ed12:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800ed14:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800ed16:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ed18:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d03a      	beq.n	800ed94 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ed22:	b15b      	cbz	r3, 800ed3c <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 800ed24:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d034      	beq.n	800ed94 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	654b      	str	r3, [r1, #84]	; 0x54
 800ed2e:	e031      	b.n	800ed94 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ed30:	2200      	movs	r2, #0
 800ed32:	e7ed      	b.n	800ed10 <spi_stm32_shift_m+0x32>
 800ed34:	2201      	movs	r2, #1
 800ed36:	e7eb      	b.n	800ed10 <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e7eb      	b.n	800ed14 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 800ed3c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed3e:	3308      	adds	r3, #8
 800ed40:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ed42:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ed44:	3b01      	subs	r3, #1
 800ed46:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ed48:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800ed4c:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ed50:	e004      	b.n	800ed5c <spi_stm32_shift_m+0x7e>
		++(*current);
 800ed52:	3308      	adds	r3, #8
 800ed54:	6023      	str	r3, [r4, #0]
		--(*count);
 800ed56:	6813      	ldr	r3, [r2, #0]
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ed5c:	6813      	ldr	r3, [r2, #0]
 800ed5e:	b13b      	cbz	r3, 800ed70 <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	685d      	ldr	r5, [r3, #4]
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	d0f4      	beq.n	800ed52 <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 800ed68:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 800ed6a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	e000      	b.n	800ed72 <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 800ed70:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ed72:	654b      	str	r3, [r1, #84]	; 0x54
 800ed74:	e00e      	b.n	800ed94 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ed76:	2200      	movs	r2, #0
 800ed78:	e7c2      	b.n	800ed00 <spi_stm32_shift_m+0x22>
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	e7c0      	b.n	800ed00 <spi_stm32_shift_m+0x22>
 800ed7e:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800ed80:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ed82:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ed84:	b133      	cbz	r3, 800ed94 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800ed86:	3b01      	subs	r3, #1
 800ed88:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ed8a:	b31b      	cbz	r3, 800edd4 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 800ed8c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ed8e:	b10b      	cbz	r3, 800ed94 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ed90:	3302      	adds	r3, #2
 800ed92:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ed94:	6883      	ldr	r3, [r0, #8]
 800ed96:	f013 0f01 	tst.w	r3, #1
 800ed9a:	d0fb      	beq.n	800ed94 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ed9c:	680b      	ldr	r3, [r1, #0]
 800ed9e:	889b      	ldrh	r3, [r3, #4]
 800eda0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800eda4:	2b08      	cmp	r3, #8
 800eda6:	d035      	beq.n	800ee14 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 800eda8:	68c3      	ldr	r3, [r0, #12]
 800edaa:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800edac:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800edae:	2a00      	cmp	r2, #0
 800edb0:	d065      	beq.n	800ee7e <spi_stm32_shift_m+0x1a0>
 800edb2:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d164      	bne.n	800ee82 <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800edb8:	b100      	cbz	r0, 800edbc <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800edba:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800edbc:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800edbe:	b13b      	cbz	r3, 800edd0 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800edc0:	3b01      	subs	r3, #1
 800edc2:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d05e      	beq.n	800ee86 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 800edc8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800edca:	b10b      	cbz	r3, 800edd0 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800edcc:	3302      	adds	r3, #2
 800edce:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800edd0:	bc30      	pop	{r4, r5}
 800edd2:	4770      	bx	lr
		++ctx->current_tx;
 800edd4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800edd6:	3308      	adds	r3, #8
 800edd8:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800edda:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800eddc:	3b01      	subs	r3, #1
 800edde:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ede0:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800ede4:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ede8:	e005      	b.n	800edf6 <spi_stm32_shift_m+0x118>
		++(*current);
 800edea:	3308      	adds	r3, #8
 800edec:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800edf0:	6813      	ldr	r3, [r2, #0]
 800edf2:	3b01      	subs	r3, #1
 800edf4:	6013      	str	r3, [r2, #0]
	while (*count) {
 800edf6:	6813      	ldr	r3, [r2, #0]
 800edf8:	b14b      	cbz	r3, 800ee0e <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 800edfa:	f8dc 3000 	ldr.w	r3, [ip]
 800edfe:	685c      	ldr	r4, [r3, #4]
 800ee00:	2c01      	cmp	r4, #1
 800ee02:	d9f2      	bls.n	800edea <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 800ee04:	0864      	lsrs	r4, r4, #1
 800ee06:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ee08:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	e000      	b.n	800ee10 <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 800ee0e:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ee10:	654b      	str	r3, [r1, #84]	; 0x54
 800ee12:	e7bf      	b.n	800ed94 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 800ee14:	68c3      	ldr	r3, [r0, #12]
 800ee16:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800ee18:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800ee1a:	b17a      	cbz	r2, 800ee3c <spi_stm32_shift_m+0x15e>
 800ee1c:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800ee1e:	b978      	cbnz	r0, 800ee40 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800ee20:	b100      	cbz	r0, 800ee24 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800ee22:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800ee24:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0d2      	beq.n	800edd0 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800ee2e:	b14b      	cbz	r3, 800ee44 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 800ee30:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d0cc      	beq.n	800edd0 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800ee36:	3301      	adds	r3, #1
 800ee38:	65cb      	str	r3, [r1, #92]	; 0x5c
 800ee3a:	e7c9      	b.n	800edd0 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e7ef      	b.n	800ee20 <spi_stm32_shift_m+0x142>
 800ee40:	2001      	movs	r0, #1
 800ee42:	e7ed      	b.n	800ee20 <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 800ee44:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee46:	3308      	adds	r3, #8
 800ee48:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800ee4a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800ee50:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 800ee54:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800ee58:	e004      	b.n	800ee64 <spi_stm32_shift_m+0x186>
		++(*current);
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	6003      	str	r3, [r0, #0]
		--(*count);
 800ee5e:	6813      	ldr	r3, [r2, #0]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ee64:	6813      	ldr	r3, [r2, #0]
 800ee66:	b13b      	cbz	r3, 800ee78 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 800ee68:	6803      	ldr	r3, [r0, #0]
 800ee6a:	685c      	ldr	r4, [r3, #4]
 800ee6c:	2c00      	cmp	r4, #0
 800ee6e:	d0f4      	beq.n	800ee5a <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 800ee70:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 800ee72:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	e000      	b.n	800ee7a <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 800ee78:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800ee7a:	65cb      	str	r3, [r1, #92]	; 0x5c
 800ee7c:	e7a8      	b.n	800edd0 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800ee7e:	2000      	movs	r0, #0
 800ee80:	e79a      	b.n	800edb8 <spi_stm32_shift_m+0xda>
 800ee82:	2001      	movs	r0, #1
 800ee84:	e798      	b.n	800edb8 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 800ee86:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee88:	3308      	adds	r3, #8
 800ee8a:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800ee8c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800ee92:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800ee96:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800ee9a:	e004      	b.n	800eea6 <spi_stm32_shift_m+0x1c8>
		++(*current);
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	6023      	str	r3, [r4, #0]
		--(*count);
 800eea0:	6813      	ldr	r3, [r2, #0]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	6013      	str	r3, [r2, #0]
	while (*count) {
 800eea6:	6813      	ldr	r3, [r2, #0]
 800eea8:	b143      	cbz	r3, 800eebc <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	6858      	ldr	r0, [r3, #4]
 800eeae:	2801      	cmp	r0, #1
 800eeb0:	d9f4      	bls.n	800ee9c <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 800eeb2:	0840      	lsrs	r0, r0, #1
 800eeb4:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800eeb6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	e000      	b.n	800eebe <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 800eebc:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800eebe:	65cb      	str	r3, [r1, #92]	; 0x5c
 800eec0:	e786      	b.n	800edd0 <spi_stm32_shift_m+0xf2>

0800eec2 <spi_stm32_shift_s>:
{
 800eec2:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800eec4:	6883      	ldr	r3, [r0, #8]
 800eec6:	f013 0f02 	tst.w	r3, #2
 800eeca:	d065      	beq.n	800ef98 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 800eecc:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d062      	beq.n	800ef98 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800eed2:	680b      	ldr	r3, [r1, #0]
 800eed4:	889b      	ldrh	r3, [r3, #4]
 800eed6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800eeda:	2b08      	cmp	r3, #8
 800eedc:	d00f      	beq.n	800eefe <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800eede:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800eee0:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800eee2:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800eee4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d05a      	beq.n	800efa0 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800eeea:	3b01      	subs	r3, #1
 800eeec:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d032      	beq.n	800ef58 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 800eef2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d053      	beq.n	800efa0 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800eef8:	3302      	adds	r3, #2
 800eefa:	654b      	str	r3, [r1, #84]	; 0x54
 800eefc:	e050      	b.n	800efa0 <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800eefe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ef00:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800ef02:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ef04:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d04a      	beq.n	800efa0 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ef0e:	b12b      	cbz	r3, 800ef1c <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 800ef10:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d044      	beq.n	800efa0 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800ef16:	3301      	adds	r3, #1
 800ef18:	654b      	str	r3, [r1, #84]	; 0x54
 800ef1a:	e041      	b.n	800efa0 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800ef1c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ef1e:	3308      	adds	r3, #8
 800ef20:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ef22:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ef24:	3b01      	subs	r3, #1
 800ef26:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ef28:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800ef2c:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ef30:	6813      	ldr	r3, [r2, #0]
 800ef32:	b173      	cbz	r3, 800ef52 <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 800ef34:	f8dc 3000 	ldr.w	r3, [ip]
 800ef38:	685c      	ldr	r4, [r3, #4]
 800ef3a:	b934      	cbnz	r4, 800ef4a <spi_stm32_shift_s+0x88>
		++(*current);
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800ef42:	6813      	ldr	r3, [r2, #0]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	e7f2      	b.n	800ef30 <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 800ef4a:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ef4c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	e000      	b.n	800ef54 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 800ef52:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ef54:	654b      	str	r3, [r1, #84]	; 0x54
 800ef56:	e023      	b.n	800efa0 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800ef58:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ef5e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ef60:	3b01      	subs	r3, #1
 800ef62:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ef64:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800ef68:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ef6c:	6813      	ldr	r3, [r2, #0]
 800ef6e:	b183      	cbz	r3, 800ef92 <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 800ef70:	f8dc 3000 	ldr.w	r3, [ip]
 800ef74:	685c      	ldr	r4, [r3, #4]
 800ef76:	2c01      	cmp	r4, #1
 800ef78:	d806      	bhi.n	800ef88 <spi_stm32_shift_s+0xc6>
		++(*current);
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800ef80:	6813      	ldr	r3, [r2, #0]
 800ef82:	3b01      	subs	r3, #1
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	e7f1      	b.n	800ef6c <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 800ef88:	0864      	lsrs	r4, r4, #1
 800ef8a:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ef8c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	e000      	b.n	800ef94 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 800ef92:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ef94:	654b      	str	r3, [r1, #84]	; 0x54
 800ef96:	e003      	b.n	800efa0 <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800ef98:	6843      	ldr	r3, [r0, #4]
 800ef9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef9e:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800efa0:	6883      	ldr	r3, [r0, #8]
 800efa2:	f013 0f01 	tst.w	r3, #1
 800efa6:	d016      	beq.n	800efd6 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 800efa8:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800efaa:	b1b3      	cbz	r3, 800efda <spi_stm32_shift_s+0x118>
 800efac:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800efae:	b9b2      	cbnz	r2, 800efde <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 800efb0:	b18a      	cbz	r2, 800efd6 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800efb2:	680a      	ldr	r2, [r1, #0]
 800efb4:	8892      	ldrh	r2, [r2, #4]
 800efb6:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800efba:	2a08      	cmp	r2, #8
 800efbc:	d011      	beq.n	800efe2 <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 800efbe:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800efc0:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800efc2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800efc4:	b13b      	cbz	r3, 800efd6 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800efc6:	3b01      	subs	r3, #1
 800efc8:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d033      	beq.n	800f036 <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 800efce:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800efd0:	b10b      	cbz	r3, 800efd6 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800efd2:	3302      	adds	r3, #2
 800efd4:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800efd6:	bc10      	pop	{r4}
 800efd8:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800efda:	2200      	movs	r2, #0
 800efdc:	e7e8      	b.n	800efb0 <spi_stm32_shift_s+0xee>
 800efde:	2201      	movs	r2, #1
 800efe0:	e7e6      	b.n	800efb0 <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 800efe2:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800efe4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800efe6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d0f4      	beq.n	800efd6 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800efec:	3b01      	subs	r3, #1
 800efee:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800eff0:	b12b      	cbz	r3, 800effe <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 800eff2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d0ee      	beq.n	800efd6 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800eff8:	3301      	adds	r3, #1
 800effa:	65cb      	str	r3, [r1, #92]	; 0x5c
 800effc:	e7eb      	b.n	800efd6 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800effe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f000:	3308      	adds	r3, #8
 800f002:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800f004:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800f006:	3b01      	subs	r3, #1
 800f008:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800f00a:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800f00e:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800f012:	6813      	ldr	r3, [r2, #0]
 800f014:	b163      	cbz	r3, 800f030 <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 800f016:	6823      	ldr	r3, [r4, #0]
 800f018:	6858      	ldr	r0, [r3, #4]
 800f01a:	b928      	cbnz	r0, 800f028 <spi_stm32_shift_s+0x166>
		++(*current);
 800f01c:	3308      	adds	r3, #8
 800f01e:	6023      	str	r3, [r4, #0]
		--(*count);
 800f020:	6813      	ldr	r3, [r2, #0]
 800f022:	3b01      	subs	r3, #1
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	e7f4      	b.n	800f012 <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 800f028:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800f02a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	e000      	b.n	800f032 <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 800f030:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800f032:	65cb      	str	r3, [r1, #92]	; 0x5c
 800f034:	e7cf      	b.n	800efd6 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800f036:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f038:	3308      	adds	r3, #8
 800f03a:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800f03c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800f03e:	3b01      	subs	r3, #1
 800f040:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800f042:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800f046:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800f04a:	6813      	ldr	r3, [r2, #0]
 800f04c:	b173      	cbz	r3, 800f06c <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	6858      	ldr	r0, [r3, #4]
 800f052:	2801      	cmp	r0, #1
 800f054:	d805      	bhi.n	800f062 <spi_stm32_shift_s+0x1a0>
		++(*current);
 800f056:	3308      	adds	r3, #8
 800f058:	6023      	str	r3, [r4, #0]
		--(*count);
 800f05a:	6813      	ldr	r3, [r2, #0]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	e7f3      	b.n	800f04a <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 800f062:	0840      	lsrs	r0, r0, #1
 800f064:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800f066:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	e000      	b.n	800f06e <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 800f06c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800f06e:	65cb      	str	r3, [r1, #92]	; 0x5c
 800f070:	e7b1      	b.n	800efd6 <spi_stm32_shift_s+0x114>

0800f072 <spi_stm32_shift_frames>:
{
 800f072:	b510      	push	{r4, lr}
 800f074:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800f076:	680b      	ldr	r3, [r1, #0]
 800f078:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800f07a:	f013 0f01 	tst.w	r3, #1
 800f07e:	d105      	bne.n	800f08c <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800f080:	f7ff fe2d 	bl	800ecde <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800f084:	4620      	mov	r0, r4
 800f086:	f7f7 fd5d 	bl	8006b44 <spi_stm32_get_err>
}
 800f08a:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800f08c:	f7ff ff19 	bl	800eec2 <spi_stm32_shift_s>
 800f090:	e7f8      	b.n	800f084 <spi_stm32_shift_frames+0x12>

0800f092 <spi_stm32_isr>:
{
 800f092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f094:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800f096:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800f098:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800f09a:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7f7 fd51 	bl	8006b44 <spi_stm32_get_err>
	if (err) {
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	b968      	cbnz	r0, 800f0c2 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	f7ff fd36 	bl	800eb18 <spi_stm32_transfer_ongoing>
 800f0ac:	b970      	cbnz	r0, 800f0cc <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800f0ae:	b91d      	cbnz	r5, 800f0b8 <spi_stm32_isr+0x26>
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f7ff fd31 	bl	800eb18 <spi_stm32_transfer_ongoing>
 800f0b6:	b918      	cbnz	r0, 800f0c0 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f7ff fdca 	bl	800ec54 <spi_stm32_complete>
}
 800f0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800f0c2:	4601      	mov	r1, r0
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f7ff fdc5 	bl	800ec54 <spi_stm32_complete>
		return;
 800f0ca:	e7f9      	b.n	800f0c0 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	f7ff ffcf 	bl	800f072 <spi_stm32_shift_frames>
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	e7ea      	b.n	800f0ae <spi_stm32_isr+0x1c>

0800f0d8 <timer_work_handler>:
{
 800f0d8:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800f0da:	f7f8 ffe1 	bl	80080a0 <TimerIrqHandler>
}
 800f0de:	bd08      	pop	{r3, pc}

0800f0e0 <RtcGetTimerValue>:
{
 800f0e0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800f0e2:	f000 feff 	bl	800fee4 <z_impl_k_uptime_ticks>
 800f0e6:	220a      	movs	r2, #10
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f7f1 fc77 	bl	80009dc <__aeabi_uldivmod>
}
 800f0ee:	bd08      	pop	{r3, pc}

0800f0f0 <RtcGetMinimumTimeout>:
}
 800f0f0:	2001      	movs	r0, #1
 800f0f2:	4770      	bx	lr

0800f0f4 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800f0f4:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800f0f6:	0f81      	lsrs	r1, r0, #30
 800f0f8:	0083      	lsls	r3, r0, #2
 800f0fa:	1818      	adds	r0, r3, r0
 800f0fc:	f141 0100 	adc.w	r1, r1, #0
 800f100:	1800      	adds	r0, r0, r0
 800f102:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800f104:	f7fc fbc4 	bl	800b890 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800f108:	bd08      	pop	{r3, pc}

0800f10a <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800f10a:	4770      	bx	lr

0800f10c <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800f10c:	4770      	bx	lr

0800f10e <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800f10e:	f04f 0210 	mov.w	r2, #16
 800f112:	f3ef 8311 	mrs	r3, BASEPRI
 800f116:	f382 8812 	msr	BASEPRI_MAX, r2
 800f11a:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800f11e:	6003      	str	r3, [r0, #0]
}
 800f120:	4770      	bx	lr

0800f122 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800f122:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
}
 800f12c:	4770      	bx	lr

0800f12e <z_log_msg2_runtime_create>:
{
 800f12e:	b510      	push	{r4, lr}
 800f130:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f132:	ac0a      	add	r4, sp, #40	; 0x28
 800f134:	9405      	str	r4, [sp, #20]
 800f136:	9402      	str	r4, [sp, #8]
 800f138:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f13a:	9401      	str	r4, [sp, #4]
 800f13c:	9c08      	ldr	r4, [sp, #32]
 800f13e:	9400      	str	r4, [sp, #0]
 800f140:	f7ff f9c4 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800f144:	b006      	add	sp, #24
 800f146:	bd10      	pop	{r4, pc}

0800f148 <clamp_int8>:
	if (x < min) {
 800f148:	4288      	cmp	r0, r1
 800f14a:	db03      	blt.n	800f154 <clamp_int8+0xc>
	} else if (x > max) {
 800f14c:	4290      	cmp	r0, r2
 800f14e:	dd02      	ble.n	800f156 <clamp_int8+0xe>
		return max;
 800f150:	4610      	mov	r0, r2
 800f152:	4770      	bx	lr
		return min;
 800f154:	4608      	mov	r0, r1
}
 800f156:	4770      	bx	lr

0800f158 <SX1276CheckRfFrequency>:
}
 800f158:	2001      	movs	r0, #1
 800f15a:	4770      	bx	lr

0800f15c <sx127x_antenna_configure>:
}
 800f15c:	2000      	movs	r0, #0
 800f15e:	4770      	bx	lr

0800f160 <z_log_msg2_runtime_create>:
{
 800f160:	b510      	push	{r4, lr}
 800f162:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f164:	ac0a      	add	r4, sp, #40	; 0x28
 800f166:	9405      	str	r4, [sp, #20]
 800f168:	9402      	str	r4, [sp, #8]
 800f16a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f16c:	9401      	str	r4, [sp, #4]
 800f16e:	9c08      	ldr	r4, [sp, #32]
 800f170:	9400      	str	r4, [sp, #0]
 800f172:	f7ff f9ab 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800f176:	b006      	add	sp, #24
 800f178:	bd10      	pop	{r4, pc}

0800f17a <SX1276GetBoardTcxoWakeupTime>:
}
 800f17a:	2000      	movs	r0, #0
 800f17c:	4770      	bx	lr

0800f17e <SX1276SetAntSwLowPower>:
}
 800f17e:	4770      	bx	lr

0800f180 <SX1276SetBoardTcxo>:
}
 800f180:	4770      	bx	lr

0800f182 <SX1276SetAntSw>:
}
 800f182:	4770      	bx	lr

0800f184 <sx127x_read>:
{
 800f184:	b508      	push	{r3, lr}
 800f186:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800f188:	460a      	mov	r2, r1
 800f18a:	2100      	movs	r1, #0
 800f18c:	f7f8 fb76 	bl	800787c <sx127x_transceive>
}
 800f190:	bd08      	pop	{r3, pc}

0800f192 <sx127x_write>:
{
 800f192:	b508      	push	{r3, lr}
 800f194:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800f196:	460a      	mov	r2, r1
 800f198:	2101      	movs	r1, #1
 800f19a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800f19e:	f7f8 fb6d 	bl	800787c <sx127x_transceive>
}
 800f1a2:	bd08      	pop	{r3, pc}

0800f1a4 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f1a4:	e004      	b.n	800f1b0 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1aa:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	1e53      	subs	r3, r2, #1
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	d1f6      	bne.n	800f1a6 <memcpy1+0x2>
    }
}
 800f1b8:	4770      	bx	lr

0800f1ba <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800f1ba:	b570      	push	{r4, r5, r6, lr}
 800f1bc:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800f1be:	f7ff ff97 	bl	800f0f0 <RtcGetMinimumTimeout>
 800f1c2:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800f1c8:	6826      	ldr	r6, [r4, #0]
 800f1ca:	f7f8 f829 	bl	8007220 <RtcGetTimerElapsedTime>
 800f1ce:	4428      	add	r0, r5
 800f1d0:	4286      	cmp	r6, r0
 800f1d2:	d303      	bcc.n	800f1dc <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800f1d4:	6820      	ldr	r0, [r4, #0]
 800f1d6:	f7f8 f839 	bl	800724c <RtcSetAlarm>
}
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800f1dc:	f7f8 f820 	bl	8007220 <RtcGetTimerElapsedTime>
 800f1e0:	4405      	add	r5, r0
 800f1e2:	6025      	str	r5, [r4, #0]
 800f1e4:	e7f6      	b.n	800f1d4 <TimerSetTimeout+0x1a>

0800f1e6 <TimerInit>:
    obj->Timestamp = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800f1ea:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800f1ec:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800f1ee:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800f1f0:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800f1f2:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800f1f4:	6143      	str	r3, [r0, #20]
}
 800f1f6:	4770      	bx	lr

0800f1f8 <TimerSetValue>:
{
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800f1fc:	4608      	mov	r0, r1
 800f1fe:	f7ff ff84 	bl	800f10a <RtcMs2Tick>
 800f202:	4605      	mov	r5, r0
    TimerStop( obj );
 800f204:	4620      	mov	r0, r4
 800f206:	f7f8 ff8f 	bl	8008128 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800f20a:	f7ff ff71 	bl	800f0f0 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800f20e:	4285      	cmp	r5, r0
 800f210:	d300      	bcc.n	800f214 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800f212:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800f214:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800f216:	6060      	str	r0, [r4, #4]
}
 800f218:	bd38      	pop	{r3, r4, r5, pc}

0800f21a <TimerGetCurrentTime>:
{
 800f21a:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800f21c:	f7ff ff60 	bl	800f0e0 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800f220:	f7ff ff74 	bl	800f10c <RtcTick2Ms>
}
 800f224:	bd08      	pop	{r3, pc}

0800f226 <TimerGetElapsedTime>:
{
 800f226:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800f228:	4604      	mov	r4, r0
 800f22a:	b908      	cbnz	r0, 800f230 <TimerGetElapsedTime+0xa>
}
 800f22c:	4620      	mov	r0, r4
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800f230:	f7ff ff56 	bl	800f0e0 <RtcGetTimerValue>
 800f234:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800f236:	4620      	mov	r0, r4
 800f238:	f7ff ff67 	bl	800f10a <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800f23c:	1a28      	subs	r0, r5, r0
 800f23e:	f7ff ff65 	bl	800f10c <RtcTick2Ms>
 800f242:	4604      	mov	r4, r0
 800f244:	e7f2      	b.n	800f22c <TimerGetElapsedTime+0x6>

0800f246 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800f246:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800f248:	f7ff ff54 	bl	800f0f4 <DelayMsMcu>
}
 800f24c:	bd08      	pop	{r3, pc}

0800f24e <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800f24e:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800f250:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800f254:	b2c3      	uxtb	r3, r0
 800f256:	fb02 f303 	mul.w	r3, r2, r3
 800f25a:	3380      	adds	r3, #128	; 0x80
 800f25c:	0a1b      	lsrs	r3, r3, #8
}
 800f25e:	fb02 3001 	mla	r0, r2, r1, r3
 800f262:	4770      	bx	lr

0800f264 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800f264:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f266:	b941      	cbnz	r1, 800f27a <SX1276GetGfskTimeOnAirNumerator+0x16>
 800f268:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800f26a:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f26c:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 800f26e:	b133      	cbz	r3, 800f27e <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800f270:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800f272:	441a      	add	r2, r3
}
 800f274:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800f278:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f27a:	2100      	movs	r1, #0
 800f27c:	e7f5      	b.n	800f26a <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800f27e:	2300      	movs	r3, #0
 800f280:	e7f7      	b.n	800f272 <SX1276GetGfskTimeOnAirNumerator+0xe>

0800f282 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f288:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f28c:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f28e:	f1a1 0c05 	sub.w	ip, r1, #5
 800f292:	f1bc 0f01 	cmp.w	ip, #1
 800f296:	d932      	bls.n	800f2fe <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f298:	b918      	cbnz	r0, 800f2a2 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800f29a:	f1a1 060b 	sub.w	r6, r1, #11
 800f29e:	2e01      	cmp	r6, #1
 800f2a0:	d935      	bls.n	800f30e <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800f2a2:	2801      	cmp	r0, #1
 800f2a4:	d02f      	beq.n	800f306 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f2a6:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f2a8:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f2ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f2b0:	b38d      	cbz	r5, 800f316 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800f2b2:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f2b6:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f2b8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f2ba:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f2be:	b36c      	cbz	r4, 800f31c <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800f2c0:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f2c4:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800f2c6:	2906      	cmp	r1, #6
 800f2c8:	d904      	bls.n	800f2d4 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800f2ca:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800f2ce:	b10e      	cbz	r6, 800f2d4 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800f2d0:	1e88      	subs	r0, r1, #2
 800f2d2:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800f2d4:	f1bc 0f00 	cmp.w	ip, #0
 800f2d8:	db23      	blt.n	800f322 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f2da:	4484      	add	ip, r0
 800f2dc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f2e0:	fb9c fcf0 	sdiv	ip, ip, r0
 800f2e4:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f2e8:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800f2ec:	2906      	cmp	r1, #6
 800f2ee:	d801      	bhi.n	800f2f4 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800f2f0:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f2f4:	0080      	lsls	r0, r0, #2
 800f2f6:	3001      	adds	r0, #1
 800f2f8:	3902      	subs	r1, #2
}
 800f2fa:	4088      	lsls	r0, r1
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f2fe:	2b0b      	cmp	r3, #11
 800f300:	d8ca      	bhi.n	800f298 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f302:	230c      	movs	r3, #12
 800f304:	e7c8      	b.n	800f298 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f306:	290c      	cmp	r1, #12
 800f308:	d003      	beq.n	800f312 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f30a:	2600      	movs	r6, #0
 800f30c:	e7cc      	b.n	800f2a8 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f30e:	2601      	movs	r6, #1
 800f310:	e7ca      	b.n	800f2a8 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800f312:	2601      	movs	r6, #1
 800f314:	e7c8      	b.n	800f2a8 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f316:	f04f 0c00 	mov.w	ip, #0
 800f31a:	e7cc      	b.n	800f2b6 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f31c:	f04f 0c14 	mov.w	ip, #20
 800f320:	e7d0      	b.n	800f2c4 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f322:	f04f 0c00 	mov.w	ip, #0
 800f326:	e7d8      	b.n	800f2da <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800f328 <SX1276ReadFifo>:
{
 800f328:	b508      	push	{r3, lr}
 800f32a:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800f32c:	4601      	mov	r1, r0
 800f32e:	2000      	movs	r0, #0
 800f330:	f7f8 fbf4 	bl	8007b1c <SX1276ReadBuffer>
}
 800f334:	bd08      	pop	{r3, pc}

0800f336 <SX1276WriteFifo>:
{
 800f336:	b508      	push	{r3, lr}
 800f338:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800f33a:	4601      	mov	r1, r0
 800f33c:	2000      	movs	r0, #0
 800f33e:	f7f8 fd3d 	bl	8007dbc <SX1276WriteBuffer>
}
 800f342:	bd08      	pop	{r3, pc}

0800f344 <SX1276GetTimeOnAir>:
{
 800f344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f346:	b085      	sub	sp, #20
 800f348:	460e      	mov	r6, r1
 800f34a:	4615      	mov	r5, r2
 800f34c:	461a      	mov	r2, r3
 800f34e:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800f352:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800f356:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f35a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800f35e:	b148      	cbz	r0, 800f374 <SX1276GetTimeOnAir+0x30>
 800f360:	2801      	cmp	r0, #1
 800f362:	d010      	beq.n	800f386 <SX1276GetTimeOnAir+0x42>
 800f364:	2501      	movs	r5, #1
 800f366:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800f368:	1960      	adds	r0, r4, r5
 800f36a:	3801      	subs	r0, #1
}
 800f36c:	fbb0 f0f5 	udiv	r0, r0, r5
 800f370:	b005      	add	sp, #20
 800f372:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800f374:	463a      	mov	r2, r7
 800f376:	4660      	mov	r0, ip
 800f378:	f7ff ff74 	bl	800f264 <SX1276GetGfskTimeOnAirNumerator>
 800f37c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f380:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f384:	e7f0      	b.n	800f368 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800f386:	9302      	str	r3, [sp, #8]
 800f388:	9701      	str	r7, [sp, #4]
 800f38a:	9100      	str	r1, [sp, #0]
 800f38c:	4663      	mov	r3, ip
 800f38e:	4629      	mov	r1, r5
 800f390:	4630      	mov	r0, r6
 800f392:	f7ff ff76 	bl	800f282 <SX1276GetLoRaTimeOnAirNumerator>
 800f396:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f39a:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800f39e:	4630      	mov	r0, r6
 800f3a0:	f7f8 ff3e 	bl	8008220 <SX1276GetLoRaBandwidthInHz>
 800f3a4:	4605      	mov	r5, r0
        break;
 800f3a6:	e7df      	b.n	800f368 <SX1276GetTimeOnAir+0x24>

0800f3a8 <SX1276Write>:
{
 800f3a8:	b500      	push	{lr}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f10d 0107 	add.w	r1, sp, #7
 800f3b6:	f7f8 fd01 	bl	8007dbc <SX1276WriteBuffer>
}
 800f3ba:	b003      	add	sp, #12
 800f3bc:	f85d fb04 	ldr.w	pc, [sp], #4

0800f3c0 <SX1276Read>:
{
 800f3c0:	b500      	push	{lr}
 800f3c2:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f10d 0107 	add.w	r1, sp, #7
 800f3ca:	f7f8 fba7 	bl	8007b1c <SX1276ReadBuffer>
}
 800f3ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f3d2:	b003      	add	sp, #12
 800f3d4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f3d8 <SX1276SetOpMode>:
{
 800f3d8:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800f3da:	4604      	mov	r4, r0
 800f3dc:	b970      	cbnz	r0, 800f3fc <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800f3de:	2001      	movs	r0, #1
 800f3e0:	f7ff fecd 	bl	800f17e <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	f7ff ffeb 	bl	800f3c0 <SX1276Read>
 800f3ea:	b241      	sxtb	r1, r0
 800f3ec:	f021 0107 	bic.w	r1, r1, #7
 800f3f0:	4321      	orrs	r1, r4
 800f3f2:	b2c9      	uxtb	r1, r1
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	f7ff ffd7 	bl	800f3a8 <SX1276Write>
}
 800f3fa:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f7ff febf 	bl	800f180 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800f402:	2000      	movs	r0, #0
 800f404:	f7ff febb 	bl	800f17e <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff feba 	bl	800f182 <SX1276SetAntSw>
 800f40e:	e7e9      	b.n	800f3e4 <SX1276SetOpMode+0xc>

0800f410 <SX1276IsChannelFree>:
{
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	4607      	mov	r7, r0
 800f414:	460c      	mov	r4, r1
 800f416:	4616      	mov	r6, r2
 800f418:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800f41a:	f7f9 fa4f 	bl	80088bc <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800f41e:	2000      	movs	r0, #0
 800f420:	f7f9 fce2 	bl	8008de8 <SX1276SetModem>
    SX1276SetChannel( freq );
 800f424:	4638      	mov	r0, r7
 800f426:	f7f8 ff25 	bl	8008274 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f42a:	4620      	mov	r0, r4
 800f42c:	f7f8 fed0 	bl	80081d0 <GetFskBandwidthRegValue>
 800f430:	4604      	mov	r4, r0
 800f432:	4601      	mov	r1, r0
 800f434:	2012      	movs	r0, #18
 800f436:	f7ff ffb7 	bl	800f3a8 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f43a:	4621      	mov	r1, r4
 800f43c:	2013      	movs	r0, #19
 800f43e:	f7ff ffb3 	bl	800f3a8 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f442:	2005      	movs	r0, #5
 800f444:	f7ff ffc8 	bl	800f3d8 <SX1276SetOpMode>
    DelayMs( 1 );
 800f448:	2001      	movs	r0, #1
 800f44a:	f7ff fefc 	bl	800f246 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800f44e:	f7ff fee4 	bl	800f21a <TimerGetCurrentTime>
 800f452:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f454:	4620      	mov	r0, r4
 800f456:	f7ff fee6 	bl	800f226 <TimerGetElapsedTime>
 800f45a:	42a8      	cmp	r0, r5
 800f45c:	d206      	bcs.n	800f46c <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800f45e:	2000      	movs	r0, #0
 800f460:	f7f9 fc9a 	bl	8008d98 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800f464:	42b0      	cmp	r0, r6
 800f466:	ddf5      	ble.n	800f454 <SX1276IsChannelFree+0x44>
            status = false;
 800f468:	2400      	movs	r4, #0
 800f46a:	e000      	b.n	800f46e <SX1276IsChannelFree+0x5e>
    bool status = true;
 800f46c:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800f46e:	f7f9 fa25 	bl	80088bc <SX1276SetSleep>
}
 800f472:	4620      	mov	r0, r4
 800f474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f476 <SX1276Random>:
{
 800f476:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800f478:	2001      	movs	r0, #1
 800f47a:	f7f9 fcb5 	bl	8008de8 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f47e:	21ff      	movs	r1, #255	; 0xff
 800f480:	2011      	movs	r0, #17
 800f482:	f7ff ff91 	bl	800f3a8 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f486:	2005      	movs	r0, #5
 800f488:	f7ff ffa6 	bl	800f3d8 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800f48c:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800f48e:	462c      	mov	r4, r5
 800f490:	e00b      	b.n	800f4aa <SX1276Random+0x34>
        DelayMs( 1 );
 800f492:	2001      	movs	r0, #1
 800f494:	f7ff fed7 	bl	800f246 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800f498:	202c      	movs	r0, #44	; 0x2c
 800f49a:	f7ff ff91 	bl	800f3c0 <SX1276Read>
 800f49e:	f000 0001 	and.w	r0, r0, #1
 800f4a2:	40a0      	lsls	r0, r4
 800f4a4:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800f4a6:	3401      	adds	r4, #1
 800f4a8:	b2e4      	uxtb	r4, r4
 800f4aa:	2c1f      	cmp	r4, #31
 800f4ac:	d9f1      	bls.n	800f492 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800f4ae:	f7f9 fa05 	bl	80088bc <SX1276SetSleep>
}
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	bd38      	pop	{r3, r4, r5, pc}

0800f4b6 <SX1276GetWakeupTime>:
{
 800f4b6:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800f4b8:	f7ff fe5f 	bl	800f17a <SX1276GetBoardTcxoWakeupTime>
}
 800f4bc:	3001      	adds	r0, #1
 800f4be:	bd08      	pop	{r3, pc}

0800f4c0 <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 800f4c0:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f4c6:	6843      	ldr	r3, [r0, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800f4d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4d4:	d02f      	beq.n	800f536 <uart_stm32_config_get+0x76>
 800f4d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f4da:	d12e      	bne.n	800f53a <uart_stm32_config_get+0x7a>
 800f4dc:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800f4de:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f4e0:	6843      	ldr	r3, [r0, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800f4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ee:	d028      	beq.n	800f542 <uart_stm32_config_get+0x82>
 800f4f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4f4:	d027      	beq.n	800f546 <uart_stm32_config_get+0x86>
 800f4f6:	b313      	cbz	r3, 800f53e <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800f4f8:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800f4fa:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f4fc:	6843      	ldr	r3, [r0, #4]
 800f4fe:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800f500:	6813      	ldr	r3, [r2, #0]
 800f502:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800f506:	6812      	ldr	r2, [r2, #0]
 800f508:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800f50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f510:	d01d      	beq.n	800f54e <uart_stm32_config_get+0x8e>
 800f512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f516:	d11d      	bne.n	800f554 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800f518:	b1ba      	cbz	r2, 800f54a <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800f51a:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800f51c:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f51e:	6843      	ldr	r3, [r0, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800f528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f52c:	d019      	beq.n	800f562 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800f52e:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800f530:	71cb      	strb	r3, [r1, #7]
}
 800f532:	2000      	movs	r0, #0
 800f534:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800f536:	2302      	movs	r3, #2
 800f538:	e7d1      	b.n	800f4de <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800f53a:	2300      	movs	r3, #0
 800f53c:	e7cf      	b.n	800f4de <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800f53e:	2301      	movs	r3, #1
 800f540:	e7db      	b.n	800f4fa <uart_stm32_config_get+0x3a>
	switch (sb) {
 800f542:	2300      	movs	r3, #0
 800f544:	e7d9      	b.n	800f4fa <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800f546:	2302      	movs	r3, #2
 800f548:	e7d7      	b.n	800f4fa <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800f54a:	2302      	movs	r3, #2
 800f54c:	e7e6      	b.n	800f51c <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800f54e:	b922      	cbnz	r2, 800f55a <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800f550:	2304      	movs	r3, #4
 800f552:	e7e3      	b.n	800f51c <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800f554:	b91a      	cbnz	r2, 800f55e <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800f556:	2303      	movs	r3, #3
 800f558:	e7e0      	b.n	800f51c <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800f55a:	2303      	movs	r3, #3
 800f55c:	e7de      	b.n	800f51c <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800f55e:	2302      	movs	r3, #2
 800f560:	e7dc      	b.n	800f51c <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800f562:	2301      	movs	r3, #1
 800f564:	e7e4      	b.n	800f530 <uart_stm32_config_get+0x70>

0800f566 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f566:	6843      	ldr	r3, [r0, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800f56a:	69da      	ldr	r2, [r3, #28]
 800f56c:	f012 0f08 	tst.w	r2, #8
 800f570:	d001      	beq.n	800f576 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800f572:	2208      	movs	r2, #8
 800f574:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800f576:	69da      	ldr	r2, [r3, #28]
 800f578:	f012 0f20 	tst.w	r2, #32
 800f57c:	d003      	beq.n	800f586 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800f57e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800f580:	700b      	strb	r3, [r1, #0]
	return 0;
 800f582:	2000      	movs	r0, #0
 800f584:	4770      	bx	lr
		return -1;
 800f586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800f58a:	4770      	bx	lr

0800f58c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f58c:	6843      	ldr	r3, [r0, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800f590:	69da      	ldr	r2, [r3, #28]
 800f592:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f596:	d0fb      	beq.n	800f590 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 800f598:	f04f 0010 	mov.w	r0, #16
 800f59c:	f3ef 8211 	mrs	r2, BASEPRI
 800f5a0:	f380 8812 	msr	BASEPRI_MAX, r0
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	69d8      	ldr	r0, [r3, #28]
 800f5aa:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f5ae:	d104      	bne.n	800f5ba <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800f5b0:	f382 8811 	msr	BASEPRI, r2
 800f5b4:	f3bf 8f6f 	isb	sy
}
 800f5b8:	e7ea      	b.n	800f590 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800f5ba:	b289      	uxth	r1, r1
 800f5bc:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 800f5be:	f382 8811 	msr	BASEPRI, r2
 800f5c2:	f3bf 8f6f 	isb	sy
}
 800f5c6:	4770      	bx	lr

0800f5c8 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f5c8:	6843      	ldr	r3, [r0, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800f5cc:	69d8      	ldr	r0, [r3, #28]
 800f5ce:	f010 0008 	ands.w	r0, r0, #8
 800f5d2:	d000      	beq.n	800f5d6 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800f5d4:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800f5d6:	69da      	ldr	r2, [r3, #28]
 800f5d8:	f012 0f01 	tst.w	r2, #1
 800f5dc:	d001      	beq.n	800f5e2 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800f5de:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800f5e2:	69da      	ldr	r2, [r3, #28]
 800f5e4:	f012 0f02 	tst.w	r2, #2
 800f5e8:	d001      	beq.n	800f5ee <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800f5ea:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800f5ee:	69da      	ldr	r2, [r3, #28]
 800f5f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f5f4:	d001      	beq.n	800f5fa <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 800f5f6:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 800f5fa:	f010 0f08 	tst.w	r0, #8
 800f5fe:	d002      	beq.n	800f606 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800f600:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f604:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 800f606:	f010 0f01 	tst.w	r0, #1
 800f60a:	d001      	beq.n	800f610 <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800f60c:	2208      	movs	r2, #8
 800f60e:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800f610:	f010 0f02 	tst.w	r0, #2
 800f614:	d001      	beq.n	800f61a <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800f616:	2201      	movs	r2, #1
 800f618:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800f61a:	f010 0f04 	tst.w	r0, #4
 800f61e:	d001      	beq.n	800f624 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800f620:	2202      	movs	r2, #2
 800f622:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800f624:	2204      	movs	r2, #4
 800f626:	621a      	str	r2, [r3, #32]
}
 800f628:	4770      	bx	lr

0800f62a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800f62a:	b410      	push	{r4}
	*state = &config->states[0];
 800f62c:	6803      	ldr	r3, [r0, #0]
 800f62e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800f630:	e001      	b.n	800f636 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 800f632:	3408      	adds	r4, #8
 800f634:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800f636:	6814      	ldr	r4, [r2, #0]
 800f638:	7903      	ldrb	r3, [r0, #4]
 800f63a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f63e:	3b01      	subs	r3, #1
 800f640:	f8d0 c000 	ldr.w	ip, [r0]
 800f644:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f648:	429c      	cmp	r4, r3
 800f64a:	d804      	bhi.n	800f656 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 800f64c:	7963      	ldrb	r3, [r4, #5]
 800f64e:	428b      	cmp	r3, r1
 800f650:	d1ef      	bne.n	800f632 <pinctrl_lookup_state+0x8>
			return 0;
 800f652:	2000      	movs	r0, #0
 800f654:	e001      	b.n	800f65a <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 800f656:	f06f 0001 	mvn.w	r0, #1
}
 800f65a:	bc10      	pop	{r4}
 800f65c:	4770      	bx	lr

0800f65e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800f65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f660:	4606      	mov	r6, r0
 800f662:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f664:	2400      	movs	r4, #0
	uint32_t func = 0;
 800f666:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f668:	e012      	b.n	800f690 <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800f66a:	f002 031f 	and.w	r3, r2, #31
 800f66e:	2b10      	cmp	r3, #16
 800f670:	d01b      	beq.n	800f6aa <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800f672:	0a53      	lsrs	r3, r2, #9
 800f674:	011b      	lsls	r3, r3, #4
 800f676:	b2db      	uxtb	r3, r3
 800f678:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800f67c:	f002 021f 	and.w	r2, r2, #31
 800f680:	4629      	mov	r1, r5
 800f682:	4318      	orrs	r0, r3
 800f684:	f7fa fad4 	bl	8009c30 <stm32_pin_configure>
		if (ret < 0) {
 800f688:	2800      	cmp	r0, #0
 800f68a:	db11      	blt.n	800f6b0 <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f68c:	3401      	adds	r4, #1
 800f68e:	b2e4      	uxtb	r4, r4
 800f690:	42bc      	cmp	r4, r7
 800f692:	d20c      	bcs.n	800f6ae <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 800f694:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800f698:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800f69c:	f012 0f10 	tst.w	r2, #16
 800f6a0:	d1e3      	bne.n	800f66a <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800f6a2:	685d      	ldr	r5, [r3, #4]
 800f6a4:	f045 0520 	orr.w	r5, r5, #32
 800f6a8:	e7e3      	b.n	800f672 <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800f6aa:	2530      	movs	r5, #48	; 0x30
 800f6ac:	e7e1      	b.n	800f672 <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 800f6ae:	2000      	movs	r0, #0
}
 800f6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6b2 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800f6b6:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800f6b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6bc:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 800f6be:	60c3      	str	r3, [r0, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 800f6c0:	6103      	str	r3, [r0, #16]
}
 800f6c2:	4770      	bx	lr

0800f6c4 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	6003      	str	r3, [r0, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800f6c8:	6043      	str	r3, [r0, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 800f6ca:	6083      	str	r3, [r0, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 800f6cc:	60c3      	str	r3, [r0, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 800f6ce:	6103      	str	r3, [r0, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800f6d0:	6143      	str	r3, [r0, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 800f6d2:	6183      	str	r3, [r0, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800f6d4:	61c3      	str	r3, [r0, #28]
}
 800f6d6:	4770      	bx	lr

0800f6d8 <LL_TIM_OC_Init>:
{
 800f6d8:	b508      	push	{r3, lr}
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4611      	mov	r1, r2
  switch (Channel)
 800f6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6e2:	d01d      	beq.n	800f720 <LL_TIM_OC_Init+0x48>
 800f6e4:	d80e      	bhi.n	800f704 <LL_TIM_OC_Init+0x2c>
 800f6e6:	2b10      	cmp	r3, #16
 800f6e8:	d017      	beq.n	800f71a <LL_TIM_OC_Init+0x42>
 800f6ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ee:	d102      	bne.n	800f6f6 <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800f6f0:	f7fa fb40 	bl	8009d74 <OC3Config>
      break;
 800f6f4:	e005      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d102      	bne.n	800f700 <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800f6fa:	f7fa fab9 	bl	8009c70 <OC1Config>
      break;
 800f6fe:	e000      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f700:	2001      	movs	r0, #1
}
 800f702:	bd08      	pop	{r3, pc}
  switch (Channel)
 800f704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f708:	d00d      	beq.n	800f726 <LL_TIM_OC_Init+0x4e>
 800f70a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f70e:	d102      	bne.n	800f716 <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800f710:	f7fa fbda 	bl	8009ec8 <OC6Config>
      break;
 800f714:	e7f5      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f716:	2001      	movs	r0, #1
 800f718:	e7f3      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800f71a:	f7fa fae9 	bl	8009cf0 <OC2Config>
      break;
 800f71e:	e7f0      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800f720:	f7fa fb6a 	bl	8009df8 <OC4Config>
      break;
 800f724:	e7ed      	b.n	800f702 <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800f726:	f7fa fb9b 	bl	8009e60 <OC5Config>
      break;
 800f72a:	e7ea      	b.n	800f702 <LL_TIM_OC_Init+0x2a>

0800f72c <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f72c:	680a      	ldr	r2, [r1, #0]
 800f72e:	0912      	lsrs	r2, r2, #4
 800f730:	3201      	adds	r2, #1
 800f732:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800f736:	684b      	ldr	r3, [r1, #4]
 800f738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f73c:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800f740:	688b      	ldr	r3, [r1, #8]
 800f742:	0e5b      	lsrs	r3, r3, #25
 800f744:	3301      	adds	r3, #1
 800f746:	005b      	lsls	r3, r3, #1
}
 800f748:	fbb0 f0f3 	udiv	r0, r0, r3
 800f74c:	4770      	bx	lr

0800f74e <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800f74e:	6341      	str	r1, [r0, #52]	; 0x34
}
 800f750:	4770      	bx	lr

0800f752 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800f752:	6381      	str	r1, [r0, #56]	; 0x38
}
 800f754:	4770      	bx	lr

0800f756 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800f756:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800f758:	4770      	bx	lr

0800f75a <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800f75a:	6401      	str	r1, [r0, #64]	; 0x40
}
 800f75c:	4770      	bx	lr

0800f75e <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800f75e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f760:	6581      	str	r1, [r0, #88]	; 0x58
}
 800f762:	4770      	bx	lr

0800f764 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800f764:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800f766:	4770      	bx	lr

0800f768 <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800f768:	f06f 0302 	mvn.w	r3, #2
 800f76c:	6103      	str	r3, [r0, #16]
}
 800f76e:	4770      	bx	lr

0800f770 <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800f770:	6900      	ldr	r0, [r0, #16]
 800f772:	f010 0002 	ands.w	r0, r0, #2
 800f776:	d000      	beq.n	800f77a <LL_TIM_IsActiveFlag_CC1+0xa>
 800f778:	2001      	movs	r0, #1
}
 800f77a:	4770      	bx	lr

0800f77c <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800f77c:	f06f 0304 	mvn.w	r3, #4
 800f780:	6103      	str	r3, [r0, #16]
}
 800f782:	4770      	bx	lr

0800f784 <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800f784:	6900      	ldr	r0, [r0, #16]
 800f786:	f010 0004 	ands.w	r0, r0, #4
 800f78a:	d000      	beq.n	800f78e <LL_TIM_IsActiveFlag_CC2+0xa>
 800f78c:	2001      	movs	r0, #1
}
 800f78e:	4770      	bx	lr

0800f790 <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800f790:	f06f 0308 	mvn.w	r3, #8
 800f794:	6103      	str	r3, [r0, #16]
}
 800f796:	4770      	bx	lr

0800f798 <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800f798:	6900      	ldr	r0, [r0, #16]
 800f79a:	f010 0008 	ands.w	r0, r0, #8
 800f79e:	d000      	beq.n	800f7a2 <LL_TIM_IsActiveFlag_CC3+0xa>
 800f7a0:	2001      	movs	r0, #1
}
 800f7a2:	4770      	bx	lr

0800f7a4 <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800f7a4:	f06f 0310 	mvn.w	r3, #16
 800f7a8:	6103      	str	r3, [r0, #16]
}
 800f7aa:	4770      	bx	lr

0800f7ac <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800f7ac:	6900      	ldr	r0, [r0, #16]
 800f7ae:	f010 0010 	ands.w	r0, r0, #16
 800f7b2:	d000      	beq.n	800f7b6 <LL_TIM_IsActiveFlag_CC4+0xa>
 800f7b4:	2001      	movs	r0, #1
}
 800f7b6:	4770      	bx	lr

0800f7b8 <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 800f7b8:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 800f7bc:	6103      	str	r3, [r0, #16]
}
 800f7be:	4770      	bx	lr

0800f7c0 <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 800f7c0:	6900      	ldr	r0, [r0, #16]
 800f7c2:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f7c6:	d000      	beq.n	800f7ca <LL_TIM_IsActiveFlag_CC5+0xa>
 800f7c8:	2001      	movs	r0, #1
}
 800f7ca:	4770      	bx	lr

0800f7cc <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 800f7cc:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 800f7d0:	6103      	str	r3, [r0, #16]
}
 800f7d2:	4770      	bx	lr

0800f7d4 <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800f7d4:	6943      	ldr	r3, [r0, #20]
 800f7d6:	f043 0302 	orr.w	r3, r3, #2
 800f7da:	6143      	str	r3, [r0, #20]
}
 800f7dc:	4770      	bx	lr

0800f7de <get_polarity>:
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800f7de:	f010 0f01 	tst.w	r0, #1
 800f7e2:	d001      	beq.n	800f7e8 <get_polarity+0xa>
    return LL_TIM_OCPOLARITY_LOW;
 800f7e4:	2002      	movs	r0, #2
 800f7e6:	4770      	bx	lr
        return LL_TIM_OCPOLARITY_HIGH;
 800f7e8:	2000      	movs	r0, #0
}
 800f7ea:	4770      	bx	lr

0800f7ec <z_log_msg2_runtime_create>:
{
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f7f0:	ac0a      	add	r4, sp, #40	; 0x28
 800f7f2:	9405      	str	r4, [sp, #20]
 800f7f4:	9402      	str	r4, [sp, #8]
 800f7f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f7f8:	9401      	str	r4, [sp, #4]
 800f7fa:	9c08      	ldr	r4, [sp, #32]
 800f7fc:	9400      	str	r4, [sp, #0]
 800f7fe:	f7fe fe65 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800f802:	b006      	add	sp, #24
 800f804:	bd10      	pop	{r4, pc}

0800f806 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800f806:	b148      	cbz	r0, 800f81c <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800f808:	68c3      	ldr	r3, [r0, #12]
 800f80a:	8818      	ldrh	r0, [r3, #0]
 800f80c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800f810:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f814:	bf14      	ite	ne
 800f816:	2000      	movne	r0, #0
 800f818:	2001      	moveq	r0, #1
 800f81a:	4770      	bx	lr
		return false;
 800f81c:	2000      	movs	r0, #0
}
 800f81e:	4770      	bx	lr

0800f820 <z_log_msg2_runtime_create>:
{
 800f820:	b510      	push	{r4, lr}
 800f822:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f824:	ac0a      	add	r4, sp, #40	; 0x28
 800f826:	9405      	str	r4, [sp, #20]
 800f828:	9402      	str	r4, [sp, #8]
 800f82a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f82c:	9401      	str	r4, [sp, #4]
 800f82e:	9c08      	ldr	r4, [sp, #32]
 800f830:	9400      	str	r4, [sp, #0]
 800f832:	f7fe fe4b 	bl	800e4cc <z_impl_z_log_msg2_runtime_vcreate>
}
 800f836:	b006      	add	sp, #24
 800f838:	bd10      	pop	{r4, pc}

0800f83a <arch_system_halt>:
	__asm__ volatile(
 800f83a:	f04f 0210 	mov.w	r2, #16
 800f83e:	f3ef 8311 	mrs	r3, BASEPRI
 800f842:	f382 8812 	msr	BASEPRI_MAX, r2
 800f846:	f3bf 8f6f 	isb	sy
	for (;;) {
 800f84a:	e7fe      	b.n	800f84a <arch_system_halt+0x10>

0800f84c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800f84c:	6902      	ldr	r2, [r0, #16]
 800f84e:	6943      	ldr	r3, [r0, #20]
 800f850:	431a      	orrs	r2, r3
 800f852:	f012 0203 	ands.w	r2, r2, #3
 800f856:	d10d      	bne.n	800f874 <create_free_list+0x28>
	slab->free_list = NULL;
 800f858:	2100      	movs	r1, #0
 800f85a:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800f85c:	e005      	b.n	800f86a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800f85e:	6981      	ldr	r1, [r0, #24]
 800f860:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800f862:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800f864:	6901      	ldr	r1, [r0, #16]
 800f866:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800f868:	3201      	adds	r2, #1
 800f86a:	68c1      	ldr	r1, [r0, #12]
 800f86c:	4291      	cmp	r1, r2
 800f86e:	d8f6      	bhi.n	800f85e <create_free_list+0x12>
	return 0;
 800f870:	2000      	movs	r0, #0
 800f872:	4770      	bx	lr
		return -EINVAL;
 800f874:	f06f 0015 	mvn.w	r0, #21
}
 800f878:	4770      	bx	lr

0800f87a <setup_thread_stack>:
{
 800f87a:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800f87c:	3207      	adds	r2, #7
 800f87e:	f022 0207 	bic.w	r2, r2, #7
 800f882:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800f886:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800f88a:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800f88c:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800f88e:	2200      	movs	r2, #0
 800f890:	6702      	str	r2, [r0, #112]	; 0x70
}
 800f892:	18c8      	adds	r0, r1, r3
 800f894:	bc10      	pop	{r4}
 800f896:	4770      	bx	lr

0800f898 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f898:	f3ef 8005 	mrs	r0, IPSR
}
 800f89c:	3800      	subs	r0, #0
 800f89e:	bf18      	it	ne
 800f8a0:	2001      	movne	r0, #1
 800f8a2:	4770      	bx	lr

0800f8a4 <z_impl_k_thread_name_set>:
}
 800f8a4:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800f8a8:	4770      	bx	lr

0800f8aa <k_thread_name_get>:
}
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	4770      	bx	lr

0800f8ae <z_impl_k_thread_start>:
{
 800f8ae:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800f8b0:	f7fb fdf0 	bl	800b494 <z_sched_start>
}
 800f8b4:	bd08      	pop	{r3, pc}

0800f8b6 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800f8b6:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800f8b8:	2400      	movs	r4, #0
 800f8ba:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800f8bc:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800f8be:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800f8c0:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800f8c2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800f8c4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800f8c6:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800f8c8:	bc10      	pop	{r4}
 800f8ca:	4770      	bx	lr

0800f8cc <z_impl_k_thread_create>:
{
 800f8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ce:	b087      	sub	sp, #28
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f8d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800f8d6:	2700      	movs	r7, #0
 800f8d8:	9705      	str	r7, [sp, #20]
 800f8da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f8dc:	9704      	str	r7, [sp, #16]
 800f8de:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f8e0:	9703      	str	r7, [sp, #12]
 800f8e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f8e4:	9702      	str	r7, [sp, #8]
 800f8e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f8e8:	9701      	str	r7, [sp, #4]
 800f8ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f8ec:	9700      	str	r7, [sp, #0]
 800f8ee:	f7fb f895 	bl	800aa1c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800f8f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f8f6:	bf08      	it	eq
 800f8f8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800f8fc:	d102      	bne.n	800f904 <z_impl_k_thread_create+0x38>
}
 800f8fe:	4620      	mov	r0, r4
 800f900:	b007      	add	sp, #28
 800f902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800f904:	4632      	mov	r2, r6
 800f906:	462b      	mov	r3, r5
 800f908:	4620      	mov	r0, r4
 800f90a:	f7fb f879 	bl	800aa00 <schedule_new_thread>
 800f90e:	e7f6      	b.n	800f8fe <z_impl_k_thread_create+0x32>

0800f910 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800f910:	b508      	push	{r3, lr}
 800f912:	f04f 0210 	mov.w	r2, #16
 800f916:	f3ef 8311 	mrs	r3, BASEPRI
 800f91a:	f382 8812 	msr	BASEPRI_MAX, r2
 800f91e:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800f922:	f7f5 fa4f 	bl	8004dc4 <arch_cpu_idle>
 800f926:	e7f4      	b.n	800f912 <idle+0x2>

0800f928 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800f928:	4288      	cmp	r0, r1
 800f92a:	da00      	bge.n	800f92e <new_prio_for_inheritance+0x6>
 800f92c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800f92e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800f932:	db01      	blt.n	800f938 <new_prio_for_inheritance+0x10>
 800f934:	4608      	mov	r0, r1
 800f936:	4770      	bx	lr
 800f938:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800f93c:	4770      	bx	lr

0800f93e <adjust_owner_prio>:
{
 800f93e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800f940:	6880      	ldr	r0, [r0, #8]
 800f942:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800f946:	428b      	cmp	r3, r1
 800f948:	d101      	bne.n	800f94e <adjust_owner_prio+0x10>
	return false;
 800f94a:	2000      	movs	r0, #0
}
 800f94c:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800f94e:	f7fb fdef 	bl	800b530 <z_set_prio>
 800f952:	e7fb      	b.n	800f94c <adjust_owner_prio+0xe>

0800f954 <z_impl_k_mutex_init>:
{
 800f954:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800f956:	2000      	movs	r0, #0
 800f958:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800f95a:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800f95c:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800f95e:	605b      	str	r3, [r3, #4]
}
 800f960:	4770      	bx	lr

0800f962 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800f962:	b15a      	cbz	r2, 800f97c <z_impl_k_sem_init+0x1a>
 800f964:	428a      	cmp	r2, r1
 800f966:	d30c      	bcc.n	800f982 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800f968:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800f96a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800f96c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800f96e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800f970:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800f974:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800f976:	6143      	str	r3, [r0, #20]
	return 0;
 800f978:	2000      	movs	r0, #0
 800f97a:	4770      	bx	lr
		return -EINVAL;
 800f97c:	f06f 0015 	mvn.w	r0, #21
 800f980:	4770      	bx	lr
 800f982:	f06f 0015 	mvn.w	r0, #21
}
 800f986:	4770      	bx	lr

0800f988 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800f988:	2300      	movs	r3, #0
 800f98a:	6003      	str	r3, [r0, #0]
 800f98c:	6043      	str	r3, [r0, #4]
 800f98e:	6083      	str	r3, [r0, #8]
 800f990:	60c3      	str	r3, [r0, #12]
 800f992:	6041      	str	r1, [r0, #4]
}
 800f994:	4770      	bx	lr

0800f996 <k_work_busy_get>:
 800f996:	f04f 0210 	mov.w	r2, #16
 800f99a:	f3ef 8311 	mrs	r3, BASEPRI
 800f99e:	f382 8812 	msr	BASEPRI_MAX, r2
 800f9a2:	f3bf 8f6f 	isb	sy
	return *flagp;
 800f9a6:	68c0      	ldr	r0, [r0, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 800f9a8:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
}
 800f9b4:	4770      	bx	lr

0800f9b6 <k_work_submit_to_queue>:
{
 800f9b6:	b530      	push	{r4, r5, lr}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	9001      	str	r0, [sp, #4]
 800f9bc:	4608      	mov	r0, r1
	__asm__ volatile(
 800f9be:	f04f 0310 	mov.w	r3, #16
 800f9c2:	f3ef 8511 	mrs	r5, BASEPRI
 800f9c6:	f383 8812 	msr	BASEPRI_MAX, r3
 800f9ca:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800f9ce:	a901      	add	r1, sp, #4
 800f9d0:	f7fb fa6e 	bl	800aeb0 <submit_to_queue_locked>
 800f9d4:	4604      	mov	r4, r0
	__asm__ volatile(
 800f9d6:	f385 8811 	msr	BASEPRI, r5
 800f9da:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	dc02      	bgt.n	800f9e8 <k_work_submit_to_queue+0x32>
}
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	b003      	add	sp, #12
 800f9e6:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800f9e8:	f7fb ff70 	bl	800b8cc <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d0f8      	beq.n	800f9e2 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800f9f0:	f7fb febe 	bl	800b770 <z_impl_k_yield>
	return ret;
 800f9f4:	e7f5      	b.n	800f9e2 <k_work_submit_to_queue+0x2c>

0800f9f6 <thread_active_elsewhere>:
}
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	4770      	bx	lr

0800f9fa <pended_on_thread>:
}
 800f9fa:	6880      	ldr	r0, [r0, #8]
 800f9fc:	4770      	bx	lr

0800f9fe <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800f9fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800fa02:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800fa06:	4283      	cmp	r3, r0
 800fa08:	d001      	beq.n	800fa0e <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800fa0a:	1ac0      	subs	r0, r0, r3
 800fa0c:	4770      	bx	lr
	return 0;
 800fa0e:	2000      	movs	r0, #0
}
 800fa10:	4770      	bx	lr

0800fa12 <z_unpend_thread_no_timeout>:
{
 800fa12:	b538      	push	{r3, r4, r5, lr}
 800fa14:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800fa16:	2300      	movs	r3, #0
	__asm__ volatile(
 800fa18:	f04f 0210 	mov.w	r2, #16
 800fa1c:	f3ef 8511 	mrs	r5, BASEPRI
 800fa20:	f382 8812 	msr	BASEPRI_MAX, r2
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	e010      	b.n	800fa4c <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f7ff ffe5 	bl	800f9fa <pended_on_thread>
 800fa30:	4621      	mov	r1, r4
 800fa32:	f000 f823 	bl	800fa7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fa36:	7b63      	ldrb	r3, [r4, #13]
 800fa38:	f023 0302 	bic.w	r3, r3, #2
 800fa3c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800fa42:	f385 8811 	msr	BASEPRI, r5
 800fa46:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d0ec      	beq.n	800fa2a <z_unpend_thread_no_timeout+0x18>
}
 800fa50:	bd38      	pop	{r3, r4, r5, pc}

0800fa52 <z_reschedule_irqlock>:
{
 800fa52:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800fa54:	4603      	mov	r3, r0
 800fa56:	b920      	cbnz	r0, 800fa62 <z_reschedule_irqlock+0x10>
 800fa58:	f3ef 8205 	mrs	r2, IPSR
 800fa5c:	b942      	cbnz	r2, 800fa70 <z_reschedule_irqlock+0x1e>
 800fa5e:	2201      	movs	r2, #1
 800fa60:	e000      	b.n	800fa64 <z_reschedule_irqlock+0x12>
 800fa62:	2200      	movs	r2, #0
	if (resched(key)) {
 800fa64:	b932      	cbnz	r2, 800fa74 <z_reschedule_irqlock+0x22>
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
}
 800fa6e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800fa70:	2200      	movs	r2, #0
 800fa72:	e7f7      	b.n	800fa64 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f5 faed 	bl	8005054 <arch_swap>
	return ret;
 800fa7a:	e7f8      	b.n	800fa6e <z_reschedule_irqlock+0x1c>

0800fa7c <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800fa7c:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800fa7e:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800fa80:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800fa82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800fa84:	2300      	movs	r3, #0
 800fa86:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800fa88:	604b      	str	r3, [r1, #4]
}
 800fa8a:	4770      	bx	lr

0800fa8c <z_unpend_thread>:
{
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800fa90:	2300      	movs	r3, #0
	__asm__ volatile(
 800fa92:	f04f 0210 	mov.w	r2, #16
 800fa96:	f3ef 8511 	mrs	r5, BASEPRI
 800fa9a:	f382 8812 	msr	BASEPRI_MAX, r2
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	e010      	b.n	800fac6 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800faa4:	4620      	mov	r0, r4
 800faa6:	f7ff ffa8 	bl	800f9fa <pended_on_thread>
 800faaa:	4621      	mov	r1, r4
 800faac:	f7ff ffe6 	bl	800fa7c <z_priq_dumb_remove>
 800fab0:	7b63      	ldrb	r3, [r4, #13]
 800fab2:	f023 0302 	bic.w	r3, r3, #2
 800fab6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fab8:	2300      	movs	r3, #0
 800faba:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800fabc:	f385 8811 	msr	BASEPRI, r5
 800fac0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fac4:	2301      	movs	r3, #1
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d0ec      	beq.n	800faa4 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800faca:	f104 0018 	add.w	r0, r4, #24
 800face:	f000 f9a3 	bl	800fe18 <z_abort_timeout>
}
 800fad2:	bd38      	pop	{r3, r4, r5, pc}

0800fad4 <z_priq_dumb_best>:
{
 800fad4:	4603      	mov	r3, r0
	return list->head == list;
 800fad6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fad8:	4283      	cmp	r3, r0
 800fada:	d000      	beq.n	800fade <z_priq_dumb_best+0xa>
}
 800fadc:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800fade:	2000      	movs	r0, #0
	return thread;
 800fae0:	e7fc      	b.n	800fadc <z_priq_dumb_best+0x8>

0800fae2 <z_ready_thread>:
{
 800fae2:	b538      	push	{r3, r4, r5, lr}
 800fae4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800fae6:	2300      	movs	r3, #0
	__asm__ volatile(
 800fae8:	f04f 0210 	mov.w	r2, #16
 800faec:	f3ef 8511 	mrs	r5, BASEPRI
 800faf0:	f382 8812 	msr	BASEPRI_MAX, r2
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	e004      	b.n	800fb04 <z_ready_thread+0x22>
	__asm__ volatile(
 800fafa:	f385 8811 	msr	BASEPRI, r5
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	2301      	movs	r3, #1
 800fb04:	b943      	cbnz	r3, 800fb18 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800fb06:	4620      	mov	r0, r4
 800fb08:	f7ff ff75 	bl	800f9f6 <thread_active_elsewhere>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d1f4      	bne.n	800fafa <z_ready_thread+0x18>
			ready_thread(thread);
 800fb10:	4620      	mov	r0, r4
 800fb12:	f7fb fc7f 	bl	800b414 <ready_thread>
 800fb16:	e7f0      	b.n	800fafa <z_ready_thread+0x18>
}
 800fb18:	bd38      	pop	{r3, r4, r5, pc}

0800fb1a <z_thread_timeout>:
{
 800fb1a:	b570      	push	{r4, r5, r6, lr}
 800fb1c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800fb1e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800fb22:	2300      	movs	r3, #0
	__asm__ volatile(
 800fb24:	f04f 0210 	mov.w	r2, #16
 800fb28:	f3ef 8611 	mrs	r6, BASEPRI
 800fb2c:	f382 8812 	msr	BASEPRI_MAX, r2
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	e011      	b.n	800fb5a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800fb36:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800fb3a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800fb3e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800fb42:	f023 0310 	bic.w	r3, r3, #16
 800fb46:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f7fb fc62 	bl	800b414 <ready_thread>
	__asm__ volatile(
 800fb50:	f386 8811 	msr	BASEPRI, r6
 800fb54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fb58:	2301      	movs	r3, #1
 800fb5a:	b9ab      	cbnz	r3, 800fb88 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800fb5c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800fb60:	f013 0f28 	tst.w	r3, #40	; 0x28
 800fb64:	d1f4      	bne.n	800fb50 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800fb66:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d0e3      	beq.n	800fb36 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f7ff ff43 	bl	800f9fa <pended_on_thread>
 800fb74:	4629      	mov	r1, r5
 800fb76:	f7ff ff81 	bl	800fa7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fb7a:	7b6b      	ldrb	r3, [r5, #13]
 800fb7c:	f023 0302 	bic.w	r3, r3, #2
 800fb80:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800fb82:	2300      	movs	r3, #0
 800fb84:	60ab      	str	r3, [r5, #8]
}
 800fb86:	e7d6      	b.n	800fb36 <z_thread_timeout+0x1c>
}
 800fb88:	bd70      	pop	{r4, r5, r6, pc}

0800fb8a <add_to_waitq_locked>:
{
 800fb8a:	b570      	push	{r4, r5, r6, lr}
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	460e      	mov	r6, r1
	unready_thread(thread);
 800fb90:	f7fb fc9e 	bl	800b4d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800fb94:	7b6b      	ldrb	r3, [r5, #13]
 800fb96:	f043 0302 	orr.w	r3, r3, #2
 800fb9a:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800fb9c:	b1b6      	cbz	r6, 800fbcc <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800fb9e:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800fba0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fba2:	42a6      	cmp	r6, r4
 800fba4:	d019      	beq.n	800fbda <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fba6:	b164      	cbz	r4, 800fbc2 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f7ff ff27 	bl	800f9fe <z_sched_prio_cmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	dc0c      	bgt.n	800fbce <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800fbb4:	b12c      	cbz	r4, 800fbc2 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800fbb6:	6873      	ldr	r3, [r6, #4]
 800fbb8:	429c      	cmp	r4, r3
 800fbba:	d002      	beq.n	800fbc2 <add_to_waitq_locked+0x38>
 800fbbc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d1f1      	bne.n	800fba6 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800fbc2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800fbc4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800fbc6:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800fbc8:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800fbca:	6075      	str	r5, [r6, #4]
}
 800fbcc:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800fbce:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800fbd0:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800fbd2:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800fbd4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800fbd6:	6065      	str	r5, [r4, #4]
}
 800fbd8:	e7f8      	b.n	800fbcc <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fbda:	2400      	movs	r4, #0
 800fbdc:	e7e3      	b.n	800fba6 <add_to_waitq_locked+0x1c>

0800fbde <pend>:
{
 800fbde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe2:	4605      	mov	r5, r0
 800fbe4:	460e      	mov	r6, r1
 800fbe6:	4691      	mov	r9, r2
 800fbe8:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800fbea:	2400      	movs	r4, #0
	__asm__ volatile(
 800fbec:	f04f 0310 	mov.w	r3, #16
 800fbf0:	f3ef 8711 	mrs	r7, BASEPRI
 800fbf4:	f383 8812 	msr	BASEPRI_MAX, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	e008      	b.n	800fc10 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	f7ff ffc2 	bl	800fb8a <add_to_waitq_locked>
	__asm__ volatile(
 800fc06:	f387 8811 	msr	BASEPRI, r7
 800fc0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fc0e:	2401      	movs	r4, #1
 800fc10:	2c00      	cmp	r4, #0
 800fc12:	d0f4      	beq.n	800fbfe <pend+0x20>
	add_thread_timeout(thread, timeout);
 800fc14:	464a      	mov	r2, r9
 800fc16:	4643      	mov	r3, r8
 800fc18:	4628      	mov	r0, r5
 800fc1a:	f7fb fab1 	bl	800b180 <add_thread_timeout>
}
 800fc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fc22 <z_unpend1_no_timeout>:
{
 800fc22:	b570      	push	{r4, r5, r6, lr}
 800fc24:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800fc26:	2300      	movs	r3, #0
	__asm__ volatile(
 800fc28:	f04f 0210 	mov.w	r2, #16
 800fc2c:	f3ef 8611 	mrs	r6, BASEPRI
 800fc30:	f382 8812 	msr	BASEPRI_MAX, r2
 800fc34:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800fc38:	461c      	mov	r4, r3
 800fc3a:	e004      	b.n	800fc46 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800fc3c:	f386 8811 	msr	BASEPRI, r6
 800fc40:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fc44:	2301      	movs	r3, #1
 800fc46:	b98b      	cbnz	r3, 800fc6c <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f7ff ff43 	bl	800fad4 <z_priq_dumb_best>
		if (thread != NULL) {
 800fc4e:	4604      	mov	r4, r0
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d0f3      	beq.n	800fc3c <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fc54:	f7ff fed1 	bl	800f9fa <pended_on_thread>
 800fc58:	4621      	mov	r1, r4
 800fc5a:	f7ff ff0f 	bl	800fa7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fc5e:	7b63      	ldrb	r3, [r4, #13]
 800fc60:	f023 0302 	bic.w	r3, r3, #2
 800fc64:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	60a3      	str	r3, [r4, #8]
}
 800fc6a:	e7e7      	b.n	800fc3c <z_unpend1_no_timeout+0x1a>
}
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}

0800fc70 <z_unpend_first_thread>:
{
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800fc74:	2300      	movs	r3, #0
	__asm__ volatile(
 800fc76:	f04f 0210 	mov.w	r2, #16
 800fc7a:	f3ef 8611 	mrs	r6, BASEPRI
 800fc7e:	f382 8812 	msr	BASEPRI_MAX, r2
 800fc82:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800fc86:	461c      	mov	r4, r3
 800fc88:	e004      	b.n	800fc94 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800fc8a:	f386 8811 	msr	BASEPRI, r6
 800fc8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fc92:	2301      	movs	r3, #1
 800fc94:	b9ab      	cbnz	r3, 800fcc2 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7ff ff1c 	bl	800fad4 <z_priq_dumb_best>
		if (thread != NULL) {
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d0f3      	beq.n	800fc8a <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fca2:	f7ff feaa 	bl	800f9fa <pended_on_thread>
 800fca6:	4621      	mov	r1, r4
 800fca8:	f7ff fee8 	bl	800fa7c <z_priq_dumb_remove>
 800fcac:	7b63      	ldrb	r3, [r4, #13]
 800fcae:	f023 0302 	bic.w	r3, r3, #2
 800fcb2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	60a3      	str	r3, [r4, #8]
 800fcb8:	f104 0018 	add.w	r0, r4, #24
 800fcbc:	f000 f8ac 	bl	800fe18 <z_abort_timeout>
 800fcc0:	e7e3      	b.n	800fc8a <z_unpend_first_thread+0x1a>
}
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	bd70      	pop	{r4, r5, r6, pc}

0800fcc6 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 800fcc6:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 800fcc8:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 800fcca:	6083      	str	r3, [r0, #8]
}
 800fccc:	4770      	bx	lr

0800fcce <z_impl_k_usleep>:
{
 800fcce:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
 800fcd0:	17c1      	asrs	r1, r0, #31
		t += off;
 800fcd2:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800fcd4:	f04f 0264 	mov.w	r2, #100	; 0x64
 800fcd8:	f04f 0300 	mov.w	r3, #0
 800fcdc:	f141 0100 	adc.w	r1, r1, #0
 800fce0:	f7f0 fe7c 	bl	80009dc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800fce4:	17c1      	asrs	r1, r0, #31
 800fce6:	f7fb fd87 	bl	800b7f8 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 800fcea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800fcee:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
 800fcf2:	1818      	adds	r0, r3, r0
 800fcf4:	bd08      	pop	{r3, pc}

0800fcf6 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800fcf6:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800fcf8:	f013 0f02 	tst.w	r3, #2
 800fcfc:	d000      	beq.n	800fd00 <z_impl_k_wakeup+0xa>
 800fcfe:	4770      	bx	lr
{
 800fd00:	b510      	push	{r4, lr}
 800fd02:	4604      	mov	r4, r0
 800fd04:	3018      	adds	r0, #24
 800fd06:	f000 f887 	bl	800fe18 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	da02      	bge.n	800fd14 <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800fd0e:	7b63      	ldrb	r3, [r4, #13]
 800fd10:	2b10      	cmp	r3, #16
 800fd12:	d109      	bne.n	800fd28 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800fd14:	7b63      	ldrb	r3, [r4, #13]
 800fd16:	f023 0310 	bic.w	r3, r3, #16
 800fd1a:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f7ff fee0 	bl	800fae2 <z_ready_thread>
 800fd22:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800fd26:	b103      	cbz	r3, 800fd2a <z_impl_k_wakeup+0x34>
}
 800fd28:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800fd2a:	f04f 0310 	mov.w	r3, #16
 800fd2e:	f3ef 8011 	mrs	r0, BASEPRI
 800fd32:	f383 8812 	msr	BASEPRI_MAX, r3
 800fd36:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800fd3a:	f7ff fe8a 	bl	800fa52 <z_reschedule_irqlock>
}
 800fd3e:	e7f3      	b.n	800fd28 <z_impl_k_wakeup+0x32>

0800fd40 <z_sched_wake>:
{
 800fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	4605      	mov	r5, r0
 800fd46:	4688      	mov	r8, r1
 800fd48:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f04f 0210 	mov.w	r2, #16
 800fd50:	f3ef 8611 	mrs	r6, BASEPRI
 800fd54:	f382 8812 	msr	BASEPRI_MAX, r2
 800fd58:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800fd5c:	4699      	mov	r9, r3
 800fd5e:	e004      	b.n	800fd6a <z_sched_wake+0x2a>
	__asm__ volatile(
 800fd60:	f386 8811 	msr	BASEPRI, r6
 800fd64:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fd68:	2301      	movs	r3, #1
 800fd6a:	b9eb      	cbnz	r3, 800fda8 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f7ff feb1 	bl	800fad4 <z_priq_dumb_best>
		if (thread != NULL) {
 800fd72:	4604      	mov	r4, r0
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d0f3      	beq.n	800fd60 <z_sched_wake+0x20>
 800fd78:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800fd7c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fd7e:	f7ff fe3c 	bl	800f9fa <pended_on_thread>
 800fd82:	4621      	mov	r1, r4
 800fd84:	f7ff fe7a 	bl	800fa7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fd88:	7b63      	ldrb	r3, [r4, #13]
 800fd8a:	f023 0302 	bic.w	r3, r3, #2
 800fd8e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fd90:	2300      	movs	r3, #0
 800fd92:	60a3      	str	r3, [r4, #8]
 800fd94:	f104 0018 	add.w	r0, r4, #24
 800fd98:	f000 f83e 	bl	800fe18 <z_abort_timeout>
			ready_thread(thread);
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f7fb fb39 	bl	800b414 <ready_thread>
			ret = true;
 800fda2:	f04f 0901 	mov.w	r9, #1
 800fda6:	e7db      	b.n	800fd60 <z_sched_wake+0x20>
}
 800fda8:	4648      	mov	r0, r9
 800fdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fdae <remove_timeout>:
{
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800fdb2:	f7fb fdfb 	bl	800b9ac <next>
 800fdb6:	b148      	cbz	r0, 800fdcc <remove_timeout+0x1e>
 800fdb8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800fdba:	6920      	ldr	r0, [r4, #16]
 800fdbc:	6961      	ldr	r1, [r4, #20]
 800fdbe:	6913      	ldr	r3, [r2, #16]
 800fdc0:	181b      	adds	r3, r3, r0
 800fdc2:	6950      	ldr	r0, [r2, #20]
 800fdc4:	eb41 0100 	adc.w	r1, r1, r0
 800fdc8:	6113      	str	r3, [r2, #16]
 800fdca:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800fdcc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800fdce:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800fdd0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800fdd2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800fdd8:	6063      	str	r3, [r4, #4]
}
 800fdda:	bd10      	pop	{r4, pc}

0800fddc <timeout_rem>:
	return node->next != NULL;
 800fddc:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
 800fdde:	b1c3      	cbz	r3, 800fe12 <timeout_rem+0x36>
{
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800fde4:	f7fb fdd8 	bl	800b998 <first>
	k_ticks_t ticks = 0;
 800fde8:	2400      	movs	r4, #0
 800fdea:	4625      	mov	r5, r4
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800fdec:	b150      	cbz	r0, 800fe04 <timeout_rem+0x28>
		ticks += t->dticks;
 800fdee:	6903      	ldr	r3, [r0, #16]
 800fdf0:	6942      	ldr	r2, [r0, #20]
 800fdf2:	191b      	adds	r3, r3, r4
 800fdf4:	461c      	mov	r4, r3
 800fdf6:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
 800fdfa:	42b0      	cmp	r0, r6
 800fdfc:	d002      	beq.n	800fe04 <timeout_rem+0x28>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800fdfe:	f7fb fdd5 	bl	800b9ac <next>
 800fe02:	e7f3      	b.n	800fdec <timeout_rem+0x10>
	return ticks - elapsed();
 800fe04:	f7fb fdde 	bl	800b9c4 <elapsed>
 800fe08:	4601      	mov	r1, r0
 800fe0a:	1a20      	subs	r0, r4, r0
 800fe0c:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 800fe10:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800fe12:	2000      	movs	r0, #0
 800fe14:	4601      	mov	r1, r0
}
 800fe16:	4770      	bx	lr

0800fe18 <z_abort_timeout>:
{
 800fe18:	b570      	push	{r4, r5, r6, lr}
 800fe1a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800fe1c:	2300      	movs	r3, #0
	__asm__ volatile(
 800fe1e:	f04f 0210 	mov.w	r2, #16
 800fe22:	f3ef 8611 	mrs	r6, BASEPRI
 800fe26:	f382 8812 	msr	BASEPRI_MAX, r2
 800fe2a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800fe2e:	f06f 0015 	mvn.w	r0, #21
 800fe32:	e004      	b.n	800fe3e <z_abort_timeout+0x26>
	__asm__ volatile(
 800fe34:	f386 8811 	msr	BASEPRI, r6
 800fe38:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	461d      	mov	r5, r3
 800fe40:	b93b      	cbnz	r3, 800fe52 <z_abort_timeout+0x3a>
 800fe42:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d0f5      	beq.n	800fe34 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f7ff ffb0 	bl	800fdae <remove_timeout>
			ret = 0;
 800fe4e:	4628      	mov	r0, r5
 800fe50:	e7f0      	b.n	800fe34 <z_abort_timeout+0x1c>
}
 800fe52:	bd70      	pop	{r4, r5, r6, pc}

0800fe54 <z_timeout_remaining>:
{
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800fe58:	2300      	movs	r3, #0
	__asm__ volatile(
 800fe5a:	f04f 0210 	mov.w	r2, #16
 800fe5e:	f3ef 8511 	mrs	r5, BASEPRI
 800fe62:	f382 8812 	msr	BASEPRI_MAX, r2
 800fe66:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	e007      	b.n	800fe80 <z_timeout_remaining+0x2c>
		ticks = timeout_rem(timeout);
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7ff ffb3 	bl	800fddc <timeout_rem>
	__asm__ volatile(
 800fe76:	f385 8811 	msr	BASEPRI, r5
 800fe7a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800fe7e:	2301      	movs	r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d0f5      	beq.n	800fe70 <z_timeout_remaining+0x1c>
}
 800fe84:	bd38      	pop	{r3, r4, r5, pc}

0800fe86 <z_set_timeout_expiry>:
{
 800fe86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe88:	4605      	mov	r5, r0
 800fe8a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800fe8c:	2300      	movs	r3, #0
	__asm__ volatile(
 800fe8e:	f04f 0210 	mov.w	r2, #16
 800fe92:	f3ef 8611 	mrs	r6, BASEPRI
 800fe96:	f382 8812 	msr	BASEPRI_MAX, r2
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	e00a      	b.n	800feb6 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800fea0:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800fea2:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800fea6:	2801      	cmp	r0, #1
 800fea8:	dd00      	ble.n	800feac <z_set_timeout_expiry+0x26>
 800feaa:	b97c      	cbnz	r4, 800fecc <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800feac:	f386 8811 	msr	BASEPRI, r6
 800feb0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800feb4:	2301      	movs	r3, #1
 800feb6:	461c      	mov	r4, r3
 800feb8:	b97b      	cbnz	r3, 800feda <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800feba:	f7fb fd8f 	bl	800b9dc <next_timeout>
			      || (ticks <= next_to);
 800febe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800fec2:	d0ed      	beq.n	800fea0 <z_set_timeout_expiry+0x1a>
 800fec4:	42a8      	cmp	r0, r5
 800fec6:	dbec      	blt.n	800fea2 <z_set_timeout_expiry+0x1c>
 800fec8:	2401      	movs	r4, #1
 800feca:	e7ea      	b.n	800fea2 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800fecc:	4639      	mov	r1, r7
 800fece:	42a8      	cmp	r0, r5
 800fed0:	bfa8      	it	ge
 800fed2:	4628      	movge	r0, r5
 800fed4:	f7f9 fdf4 	bl	8009ac0 <sys_clock_set_timeout>
 800fed8:	e7e8      	b.n	800feac <z_set_timeout_expiry+0x26>
}
 800feda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fedc <sys_clock_tick_get_32>:
{
 800fedc:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800fede:	f7fb fe91 	bl	800bc04 <sys_clock_tick_get>
}
 800fee2:	bd08      	pop	{r3, pc}

0800fee4 <z_impl_k_uptime_ticks>:
{
 800fee4:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800fee6:	f7fb fe8d 	bl	800bc04 <sys_clock_tick_get>
}
 800feea:	bd08      	pop	{r3, pc}

0800feec <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800feec:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800feee:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800fef0:	2300      	movs	r3, #0
 800fef2:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800fef4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800fef8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800fefa:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800fefc:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800fefe:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800ff00:	6343      	str	r3, [r0, #52]	; 0x34
}
 800ff02:	4770      	bx	lr

0800ff04 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800ff04:	b510      	push	{r4, lr}
 800ff06:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800ff08:	f7ff ff86 	bl	800fe18 <z_abort_timeout>

	if (inactive) {
 800ff0c:	b9a0      	cbnz	r0, 800ff38 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800ff0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff10:	b10b      	cbz	r3, 800ff16 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800ff12:	4620      	mov	r0, r4
 800ff14:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800ff16:	f104 0018 	add.w	r0, r4, #24
 800ff1a:	f7ff fe82 	bl	800fc22 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800ff1e:	b158      	cbz	r0, 800ff38 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800ff20:	f7ff fddf 	bl	800fae2 <z_ready_thread>
	__asm__ volatile(
 800ff24:	f04f 0310 	mov.w	r3, #16
 800ff28:	f3ef 8011 	mrs	r0, BASEPRI
 800ff2c:	f383 8812 	msr	BASEPRI_MAX, r3
 800ff30:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800ff34:	f7ff fd8d 	bl	800fa52 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800ff38:	bd10      	pop	{r4, pc}

0800ff3a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ff3a:	b108      	cbz	r0, 800ff40 <poller_thread+0x6>
 800ff3c:	3860      	subs	r0, #96	; 0x60
 800ff3e:	4770      	bx	lr
}
 800ff40:	4770      	bx	lr

0800ff42 <signal_poller>:
{
 800ff42:	b538      	push	{r3, r4, r5, lr}
 800ff44:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800ff46:	6880      	ldr	r0, [r0, #8]
 800ff48:	f7ff fff7 	bl	800ff3a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800ff4c:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800ff4e:	f013 0f02 	tst.w	r3, #2
 800ff52:	d024      	beq.n	800ff9e <signal_poller+0x5c>
 800ff54:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800ff56:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ff58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800ff5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff5e:	bf08      	it	eq
 800ff60:	f112 0f02 	cmneq.w	r2, #2
 800ff64:	d01d      	beq.n	800ffa2 <signal_poller+0x60>
	z_unpend_thread(thread);
 800ff66:	f7ff fd91 	bl	800fa8c <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800ff6a:	2d08      	cmp	r5, #8
 800ff6c:	d009      	beq.n	800ff82 <signal_poller+0x40>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800ff72:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800ff74:	f013 0f1f 	tst.w	r3, #31
 800ff78:	d108      	bne.n	800ff8c <signal_poller+0x4a>
	return node->next != NULL;
 800ff7a:	69a3      	ldr	r3, [r4, #24]
 800ff7c:	b123      	cbz	r3, 800ff88 <signal_poller+0x46>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e005      	b.n	800ff8e <signal_poller+0x4c>
 800ff82:	f06f 0303 	mvn.w	r3, #3
 800ff86:	e7f3      	b.n	800ff70 <signal_poller+0x2e>
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e000      	b.n	800ff8e <signal_poller+0x4c>
 800ff8c:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800ff8e:	b90b      	cbnz	r3, 800ff94 <signal_poller+0x52>
		return 0;
 800ff90:	2000      	movs	r0, #0
 800ff92:	e005      	b.n	800ffa0 <signal_poller+0x5e>
	z_ready_thread(thread);
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7ff fda4 	bl	800fae2 <z_ready_thread>
	return 0;
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	e000      	b.n	800ffa0 <signal_poller+0x5e>
		return 0;
 800ff9e:	2000      	movs	r0, #0
}
 800ffa0:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800ffa2:	f06f 000a 	mvn.w	r0, #10
 800ffa6:	e7fb      	b.n	800ffa0 <signal_poller+0x5e>

0800ffa8 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800ffa8:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800ffaa:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800ffac:	7823      	ldrb	r3, [r4, #0]
 800ffae:	b173      	cbz	r3, 800ffce <signal_triggered_work+0x26>
 800ffb0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ffb4:	b15d      	cbz	r5, 800ffce <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800ffb6:	f1a4 0614 	sub.w	r6, r4, #20
 800ffba:	f104 0014 	add.w	r0, r4, #20
 800ffbe:	f7ff ff2b 	bl	800fe18 <z_abort_timeout>
		twork->poll_result = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f7ff fcf4 	bl	800f9b6 <k_work_submit_to_queue>
	}

	return 0;
}
 800ffce:	2000      	movs	r0, #0
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}

0800ffd2 <signal_poll_event>:
{
 800ffd2:	b570      	push	{r4, r5, r6, lr}
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800ffd8:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800ffda:	b1d6      	cbz	r6, 8010012 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800ffdc:	7873      	ldrb	r3, [r6, #1]
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d00d      	beq.n	800fffe <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	d012      	beq.n	801000c <signal_poll_event+0x3a>
		poller->is_polling = false;
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800ffee:	68e3      	ldr	r3, [r4, #12]
 800fff0:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800fff4:	430d      	orrs	r5, r1
 800fff6:	f365 3352 	bfi	r3, r5, #13, #6
 800fffa:	60e3      	str	r3, [r4, #12]
}
 800fffc:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800fffe:	f7ff ffa0 	bl	800ff42 <signal_poller>
		poller->is_polling = false;
 8010002:	2300      	movs	r3, #0
 8010004:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 8010006:	4298      	cmp	r0, r3
 8010008:	daef      	bge.n	800ffea <signal_poll_event+0x18>
 801000a:	e7f7      	b.n	800fffc <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 801000c:	f7ff ffcc 	bl	800ffa8 <signal_triggered_work>
 8010010:	e7f7      	b.n	8010002 <signal_poll_event+0x30>
	int retcode = 0;
 8010012:	2000      	movs	r0, #0
 8010014:	e7e9      	b.n	800ffea <signal_poll_event+0x18>

08010016 <z_handle_obj_poll_events>:
{
 8010016:	b508      	push	{r3, lr}
 8010018:	4603      	mov	r3, r0
	return list->head == list;
 801001a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 801001c:	4283      	cmp	r3, r0
 801001e:	d009      	beq.n	8010034 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 8010020:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8010022:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8010024:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8010026:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801002c:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 801002e:	b108      	cbz	r0, 8010034 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 8010030:	f7ff ffcf 	bl	800ffd2 <signal_poll_event>
}
 8010034:	bd08      	pop	{r3, pc}

08010036 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 8010036:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 8010038:	4770      	bx	lr

0801003a <k_heap_init>:
{
 801003a:	b510      	push	{r4, lr}
 801003c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 8010040:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 8010042:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 8010044:	f7fd feb6 	bl	800ddb4 <sys_heap_init>
}
 8010048:	bd10      	pop	{r4, pc}

0801004a <memcpy>:
 801004a:	440a      	add	r2, r1
 801004c:	4291      	cmp	r1, r2
 801004e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010052:	d100      	bne.n	8010056 <memcpy+0xc>
 8010054:	4770      	bx	lr
 8010056:	b510      	push	{r4, lr}
 8010058:	f811 4b01 	ldrb.w	r4, [r1], #1
 801005c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010060:	4291      	cmp	r1, r2
 8010062:	d1f9      	bne.n	8010058 <memcpy+0xe>
 8010064:	bd10      	pop	{r4, pc}

08010066 <memset>:
 8010066:	4402      	add	r2, r0
 8010068:	4603      	mov	r3, r0
 801006a:	4293      	cmp	r3, r2
 801006c:	d100      	bne.n	8010070 <memset+0xa>
 801006e:	4770      	bx	lr
 8010070:	f803 1b01 	strb.w	r1, [r3], #1
 8010074:	e7f9      	b.n	801006a <memset+0x4>

08010076 <__cvt>:
 8010076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801007a:	b088      	sub	sp, #32
 801007c:	2b00      	cmp	r3, #0
 801007e:	461f      	mov	r7, r3
 8010080:	4614      	mov	r4, r2
 8010082:	bfb8      	it	lt
 8010084:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010088:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801008a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801008c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010090:	bfb6      	itet	lt
 8010092:	461f      	movlt	r7, r3
 8010094:	2300      	movge	r3, #0
 8010096:	232d      	movlt	r3, #45	; 0x2d
 8010098:	7013      	strb	r3, [r2, #0]
 801009a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801009c:	f023 0820 	bic.w	r8, r3, #32
 80100a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100a4:	d005      	beq.n	80100b2 <__cvt+0x3c>
 80100a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80100aa:	d100      	bne.n	80100ae <__cvt+0x38>
 80100ac:	3501      	adds	r5, #1
 80100ae:	2302      	movs	r3, #2
 80100b0:	e000      	b.n	80100b4 <__cvt+0x3e>
 80100b2:	2303      	movs	r3, #3
 80100b4:	aa07      	add	r2, sp, #28
 80100b6:	9204      	str	r2, [sp, #16]
 80100b8:	aa06      	add	r2, sp, #24
 80100ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80100be:	e9cd 3500 	strd	r3, r5, [sp]
 80100c2:	4622      	mov	r2, r4
 80100c4:	463b      	mov	r3, r7
 80100c6:	f7f0 ff3f 	bl	8000f48 <_dtoa_r>
 80100ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80100ce:	4606      	mov	r6, r0
 80100d0:	d102      	bne.n	80100d8 <__cvt+0x62>
 80100d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100d4:	07db      	lsls	r3, r3, #31
 80100d6:	d522      	bpl.n	801011e <__cvt+0xa8>
 80100d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80100dc:	eb06 0905 	add.w	r9, r6, r5
 80100e0:	d110      	bne.n	8010104 <__cvt+0x8e>
 80100e2:	7833      	ldrb	r3, [r6, #0]
 80100e4:	2b30      	cmp	r3, #48	; 0x30
 80100e6:	d10a      	bne.n	80100fe <__cvt+0x88>
 80100e8:	2200      	movs	r2, #0
 80100ea:	2300      	movs	r3, #0
 80100ec:	4620      	mov	r0, r4
 80100ee:	4639      	mov	r1, r7
 80100f0:	f7f0 fce4 	bl	8000abc <__aeabi_dcmpeq>
 80100f4:	b918      	cbnz	r0, 80100fe <__cvt+0x88>
 80100f6:	f1c5 0501 	rsb	r5, r5, #1
 80100fa:	f8ca 5000 	str.w	r5, [sl]
 80100fe:	f8da 3000 	ldr.w	r3, [sl]
 8010102:	4499      	add	r9, r3
 8010104:	2200      	movs	r2, #0
 8010106:	2300      	movs	r3, #0
 8010108:	4620      	mov	r0, r4
 801010a:	4639      	mov	r1, r7
 801010c:	f7f0 fcd6 	bl	8000abc <__aeabi_dcmpeq>
 8010110:	b108      	cbz	r0, 8010116 <__cvt+0xa0>
 8010112:	f8cd 901c 	str.w	r9, [sp, #28]
 8010116:	2230      	movs	r2, #48	; 0x30
 8010118:	9b07      	ldr	r3, [sp, #28]
 801011a:	454b      	cmp	r3, r9
 801011c:	d307      	bcc.n	801012e <__cvt+0xb8>
 801011e:	9b07      	ldr	r3, [sp, #28]
 8010120:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010122:	1b9b      	subs	r3, r3, r6
 8010124:	4630      	mov	r0, r6
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	b008      	add	sp, #32
 801012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801012e:	1c59      	adds	r1, r3, #1
 8010130:	9107      	str	r1, [sp, #28]
 8010132:	701a      	strb	r2, [r3, #0]
 8010134:	e7f0      	b.n	8010118 <__cvt+0xa2>

08010136 <__exponent>:
 8010136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010138:	4603      	mov	r3, r0
 801013a:	2900      	cmp	r1, #0
 801013c:	bfb8      	it	lt
 801013e:	4249      	neglt	r1, r1
 8010140:	f803 2b02 	strb.w	r2, [r3], #2
 8010144:	bfb4      	ite	lt
 8010146:	222d      	movlt	r2, #45	; 0x2d
 8010148:	222b      	movge	r2, #43	; 0x2b
 801014a:	2909      	cmp	r1, #9
 801014c:	7042      	strb	r2, [r0, #1]
 801014e:	dd2a      	ble.n	80101a6 <__exponent+0x70>
 8010150:	f10d 0407 	add.w	r4, sp, #7
 8010154:	46a4      	mov	ip, r4
 8010156:	270a      	movs	r7, #10
 8010158:	46a6      	mov	lr, r4
 801015a:	460a      	mov	r2, r1
 801015c:	fb91 f6f7 	sdiv	r6, r1, r7
 8010160:	fb07 1516 	mls	r5, r7, r6, r1
 8010164:	3530      	adds	r5, #48	; 0x30
 8010166:	2a63      	cmp	r2, #99	; 0x63
 8010168:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801016c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010170:	4631      	mov	r1, r6
 8010172:	dcf1      	bgt.n	8010158 <__exponent+0x22>
 8010174:	3130      	adds	r1, #48	; 0x30
 8010176:	f1ae 0502 	sub.w	r5, lr, #2
 801017a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801017e:	1c44      	adds	r4, r0, #1
 8010180:	4629      	mov	r1, r5
 8010182:	4561      	cmp	r1, ip
 8010184:	d30a      	bcc.n	801019c <__exponent+0x66>
 8010186:	f10d 0209 	add.w	r2, sp, #9
 801018a:	eba2 020e 	sub.w	r2, r2, lr
 801018e:	4565      	cmp	r5, ip
 8010190:	bf88      	it	hi
 8010192:	2200      	movhi	r2, #0
 8010194:	4413      	add	r3, r2
 8010196:	1a18      	subs	r0, r3, r0
 8010198:	b003      	add	sp, #12
 801019a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101a0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80101a4:	e7ed      	b.n	8010182 <__exponent+0x4c>
 80101a6:	2330      	movs	r3, #48	; 0x30
 80101a8:	3130      	adds	r1, #48	; 0x30
 80101aa:	7083      	strb	r3, [r0, #2]
 80101ac:	70c1      	strb	r1, [r0, #3]
 80101ae:	1d03      	adds	r3, r0, #4
 80101b0:	e7f1      	b.n	8010196 <__exponent+0x60>

080101b2 <_printf_common>:
 80101b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101b6:	4616      	mov	r6, r2
 80101b8:	4699      	mov	r9, r3
 80101ba:	688a      	ldr	r2, [r1, #8]
 80101bc:	690b      	ldr	r3, [r1, #16]
 80101be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	bfb8      	it	lt
 80101c6:	4613      	movlt	r3, r2
 80101c8:	6033      	str	r3, [r6, #0]
 80101ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101ce:	4607      	mov	r7, r0
 80101d0:	460c      	mov	r4, r1
 80101d2:	b10a      	cbz	r2, 80101d8 <_printf_common+0x26>
 80101d4:	3301      	adds	r3, #1
 80101d6:	6033      	str	r3, [r6, #0]
 80101d8:	6823      	ldr	r3, [r4, #0]
 80101da:	0699      	lsls	r1, r3, #26
 80101dc:	bf42      	ittt	mi
 80101de:	6833      	ldrmi	r3, [r6, #0]
 80101e0:	3302      	addmi	r3, #2
 80101e2:	6033      	strmi	r3, [r6, #0]
 80101e4:	6825      	ldr	r5, [r4, #0]
 80101e6:	f015 0506 	ands.w	r5, r5, #6
 80101ea:	d106      	bne.n	80101fa <_printf_common+0x48>
 80101ec:	f104 0a19 	add.w	sl, r4, #25
 80101f0:	68e3      	ldr	r3, [r4, #12]
 80101f2:	6832      	ldr	r2, [r6, #0]
 80101f4:	1a9b      	subs	r3, r3, r2
 80101f6:	42ab      	cmp	r3, r5
 80101f8:	dc26      	bgt.n	8010248 <_printf_common+0x96>
 80101fa:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101fe:	1e13      	subs	r3, r2, #0
 8010200:	6822      	ldr	r2, [r4, #0]
 8010202:	bf18      	it	ne
 8010204:	2301      	movne	r3, #1
 8010206:	0692      	lsls	r2, r2, #26
 8010208:	d42b      	bmi.n	8010262 <_printf_common+0xb0>
 801020a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801020e:	4649      	mov	r1, r9
 8010210:	4638      	mov	r0, r7
 8010212:	47c0      	blx	r8
 8010214:	3001      	adds	r0, #1
 8010216:	d01e      	beq.n	8010256 <_printf_common+0xa4>
 8010218:	6823      	ldr	r3, [r4, #0]
 801021a:	68e5      	ldr	r5, [r4, #12]
 801021c:	6832      	ldr	r2, [r6, #0]
 801021e:	f003 0306 	and.w	r3, r3, #6
 8010222:	2b04      	cmp	r3, #4
 8010224:	bf08      	it	eq
 8010226:	1aad      	subeq	r5, r5, r2
 8010228:	68a3      	ldr	r3, [r4, #8]
 801022a:	6922      	ldr	r2, [r4, #16]
 801022c:	bf0c      	ite	eq
 801022e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010232:	2500      	movne	r5, #0
 8010234:	4293      	cmp	r3, r2
 8010236:	bfc4      	itt	gt
 8010238:	1a9b      	subgt	r3, r3, r2
 801023a:	18ed      	addgt	r5, r5, r3
 801023c:	2600      	movs	r6, #0
 801023e:	341a      	adds	r4, #26
 8010240:	42b5      	cmp	r5, r6
 8010242:	d11a      	bne.n	801027a <_printf_common+0xc8>
 8010244:	2000      	movs	r0, #0
 8010246:	e008      	b.n	801025a <_printf_common+0xa8>
 8010248:	2301      	movs	r3, #1
 801024a:	4652      	mov	r2, sl
 801024c:	4649      	mov	r1, r9
 801024e:	4638      	mov	r0, r7
 8010250:	47c0      	blx	r8
 8010252:	3001      	adds	r0, #1
 8010254:	d103      	bne.n	801025e <_printf_common+0xac>
 8010256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025e:	3501      	adds	r5, #1
 8010260:	e7c6      	b.n	80101f0 <_printf_common+0x3e>
 8010262:	18e1      	adds	r1, r4, r3
 8010264:	1c5a      	adds	r2, r3, #1
 8010266:	2030      	movs	r0, #48	; 0x30
 8010268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801026c:	4422      	add	r2, r4
 801026e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010276:	3302      	adds	r3, #2
 8010278:	e7c7      	b.n	801020a <_printf_common+0x58>
 801027a:	2301      	movs	r3, #1
 801027c:	4622      	mov	r2, r4
 801027e:	4649      	mov	r1, r9
 8010280:	4638      	mov	r0, r7
 8010282:	47c0      	blx	r8
 8010284:	3001      	adds	r0, #1
 8010286:	d0e6      	beq.n	8010256 <_printf_common+0xa4>
 8010288:	3601      	adds	r6, #1
 801028a:	e7d9      	b.n	8010240 <_printf_common+0x8e>

0801028c <strnlen>:
 801028c:	b510      	push	{r4, lr}
 801028e:	4602      	mov	r2, r0
 8010290:	4401      	add	r1, r0
 8010292:	428a      	cmp	r2, r1
 8010294:	4613      	mov	r3, r2
 8010296:	d003      	beq.n	80102a0 <strnlen+0x14>
 8010298:	781c      	ldrb	r4, [r3, #0]
 801029a:	3201      	adds	r2, #1
 801029c:	2c00      	cmp	r4, #0
 801029e:	d1f8      	bne.n	8010292 <strnlen+0x6>
 80102a0:	1a18      	subs	r0, r3, r0
 80102a2:	bd10      	pop	{r4, pc}

080102a4 <quorem>:
 80102a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	6903      	ldr	r3, [r0, #16]
 80102aa:	690c      	ldr	r4, [r1, #16]
 80102ac:	42a3      	cmp	r3, r4
 80102ae:	4607      	mov	r7, r0
 80102b0:	db7d      	blt.n	80103ae <quorem+0x10a>
 80102b2:	3c01      	subs	r4, #1
 80102b4:	f101 0814 	add.w	r8, r1, #20
 80102b8:	f100 0514 	add.w	r5, r0, #20
 80102bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80102c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102ca:	3301      	adds	r3, #1
 80102cc:	429a      	cmp	r2, r3
 80102ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80102d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80102d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80102da:	d32e      	bcc.n	801033a <quorem+0x96>
 80102dc:	f04f 0e00 	mov.w	lr, #0
 80102e0:	4640      	mov	r0, r8
 80102e2:	46ac      	mov	ip, r5
 80102e4:	46f2      	mov	sl, lr
 80102e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80102ea:	b293      	uxth	r3, r2
 80102ec:	fb06 e303 	mla	r3, r6, r3, lr
 80102f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80102f4:	0c12      	lsrs	r2, r2, #16
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	fb06 e202 	mla	r2, r6, r2, lr
 80102fc:	ebaa 0303 	sub.w	r3, sl, r3
 8010300:	f8dc a000 	ldr.w	sl, [ip]
 8010304:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010308:	b292      	uxth	r2, r2
 801030a:	fa13 f38a 	uxtah	r3, r3, sl
 801030e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010312:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010316:	b29b      	uxth	r3, r3
 8010318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801031c:	4581      	cmp	r9, r0
 801031e:	f84c 3b04 	str.w	r3, [ip], #4
 8010322:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010326:	d2de      	bcs.n	80102e6 <quorem+0x42>
 8010328:	f855 300b 	ldr.w	r3, [r5, fp]
 801032c:	b92b      	cbnz	r3, 801033a <quorem+0x96>
 801032e:	9b01      	ldr	r3, [sp, #4]
 8010330:	3b04      	subs	r3, #4
 8010332:	429d      	cmp	r5, r3
 8010334:	461a      	mov	r2, r3
 8010336:	d32e      	bcc.n	8010396 <quorem+0xf2>
 8010338:	613c      	str	r4, [r7, #16]
 801033a:	4638      	mov	r0, r7
 801033c:	f000 f886 	bl	801044c <__mcmp>
 8010340:	2800      	cmp	r0, #0
 8010342:	db24      	blt.n	801038e <quorem+0xea>
 8010344:	3601      	adds	r6, #1
 8010346:	4628      	mov	r0, r5
 8010348:	f04f 0c00 	mov.w	ip, #0
 801034c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010350:	f8d0 e000 	ldr.w	lr, [r0]
 8010354:	b293      	uxth	r3, r2
 8010356:	ebac 0303 	sub.w	r3, ip, r3
 801035a:	0c12      	lsrs	r2, r2, #16
 801035c:	fa13 f38e 	uxtah	r3, r3, lr
 8010360:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010364:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010368:	b29b      	uxth	r3, r3
 801036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801036e:	45c1      	cmp	r9, r8
 8010370:	f840 3b04 	str.w	r3, [r0], #4
 8010374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010378:	d2e8      	bcs.n	801034c <quorem+0xa8>
 801037a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801037e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010382:	b922      	cbnz	r2, 801038e <quorem+0xea>
 8010384:	3b04      	subs	r3, #4
 8010386:	429d      	cmp	r5, r3
 8010388:	461a      	mov	r2, r3
 801038a:	d30a      	bcc.n	80103a2 <quorem+0xfe>
 801038c:	613c      	str	r4, [r7, #16]
 801038e:	4630      	mov	r0, r6
 8010390:	b003      	add	sp, #12
 8010392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010396:	6812      	ldr	r2, [r2, #0]
 8010398:	3b04      	subs	r3, #4
 801039a:	2a00      	cmp	r2, #0
 801039c:	d1cc      	bne.n	8010338 <quorem+0x94>
 801039e:	3c01      	subs	r4, #1
 80103a0:	e7c7      	b.n	8010332 <quorem+0x8e>
 80103a2:	6812      	ldr	r2, [r2, #0]
 80103a4:	3b04      	subs	r3, #4
 80103a6:	2a00      	cmp	r2, #0
 80103a8:	d1f0      	bne.n	801038c <quorem+0xe8>
 80103aa:	3c01      	subs	r4, #1
 80103ac:	e7eb      	b.n	8010386 <quorem+0xe2>
 80103ae:	2000      	movs	r0, #0
 80103b0:	e7ee      	b.n	8010390 <quorem+0xec>

080103b2 <__hi0bits>:
 80103b2:	0c02      	lsrs	r2, r0, #16
 80103b4:	0412      	lsls	r2, r2, #16
 80103b6:	4603      	mov	r3, r0
 80103b8:	b9ca      	cbnz	r2, 80103ee <__hi0bits+0x3c>
 80103ba:	0403      	lsls	r3, r0, #16
 80103bc:	2010      	movs	r0, #16
 80103be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80103c2:	bf04      	itt	eq
 80103c4:	021b      	lsleq	r3, r3, #8
 80103c6:	3008      	addeq	r0, #8
 80103c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80103cc:	bf04      	itt	eq
 80103ce:	011b      	lsleq	r3, r3, #4
 80103d0:	3004      	addeq	r0, #4
 80103d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80103d6:	bf04      	itt	eq
 80103d8:	009b      	lsleq	r3, r3, #2
 80103da:	3002      	addeq	r0, #2
 80103dc:	2b00      	cmp	r3, #0
 80103de:	db05      	blt.n	80103ec <__hi0bits+0x3a>
 80103e0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80103e4:	f100 0001 	add.w	r0, r0, #1
 80103e8:	bf08      	it	eq
 80103ea:	2020      	moveq	r0, #32
 80103ec:	4770      	bx	lr
 80103ee:	2000      	movs	r0, #0
 80103f0:	e7e5      	b.n	80103be <__hi0bits+0xc>

080103f2 <__lo0bits>:
 80103f2:	6803      	ldr	r3, [r0, #0]
 80103f4:	4602      	mov	r2, r0
 80103f6:	f013 0007 	ands.w	r0, r3, #7
 80103fa:	d00b      	beq.n	8010414 <__lo0bits+0x22>
 80103fc:	07d9      	lsls	r1, r3, #31
 80103fe:	d421      	bmi.n	8010444 <__lo0bits+0x52>
 8010400:	0798      	lsls	r0, r3, #30
 8010402:	bf49      	itett	mi
 8010404:	085b      	lsrmi	r3, r3, #1
 8010406:	089b      	lsrpl	r3, r3, #2
 8010408:	2001      	movmi	r0, #1
 801040a:	6013      	strmi	r3, [r2, #0]
 801040c:	bf5c      	itt	pl
 801040e:	6013      	strpl	r3, [r2, #0]
 8010410:	2002      	movpl	r0, #2
 8010412:	4770      	bx	lr
 8010414:	b299      	uxth	r1, r3
 8010416:	b909      	cbnz	r1, 801041c <__lo0bits+0x2a>
 8010418:	0c1b      	lsrs	r3, r3, #16
 801041a:	2010      	movs	r0, #16
 801041c:	b2d9      	uxtb	r1, r3
 801041e:	b909      	cbnz	r1, 8010424 <__lo0bits+0x32>
 8010420:	3008      	adds	r0, #8
 8010422:	0a1b      	lsrs	r3, r3, #8
 8010424:	0719      	lsls	r1, r3, #28
 8010426:	bf04      	itt	eq
 8010428:	091b      	lsreq	r3, r3, #4
 801042a:	3004      	addeq	r0, #4
 801042c:	0799      	lsls	r1, r3, #30
 801042e:	bf04      	itt	eq
 8010430:	089b      	lsreq	r3, r3, #2
 8010432:	3002      	addeq	r0, #2
 8010434:	07d9      	lsls	r1, r3, #31
 8010436:	d403      	bmi.n	8010440 <__lo0bits+0x4e>
 8010438:	085b      	lsrs	r3, r3, #1
 801043a:	f100 0001 	add.w	r0, r0, #1
 801043e:	d003      	beq.n	8010448 <__lo0bits+0x56>
 8010440:	6013      	str	r3, [r2, #0]
 8010442:	4770      	bx	lr
 8010444:	2000      	movs	r0, #0
 8010446:	4770      	bx	lr
 8010448:	2020      	movs	r0, #32
 801044a:	4770      	bx	lr

0801044c <__mcmp>:
 801044c:	690a      	ldr	r2, [r1, #16]
 801044e:	4603      	mov	r3, r0
 8010450:	6900      	ldr	r0, [r0, #16]
 8010452:	1a80      	subs	r0, r0, r2
 8010454:	b530      	push	{r4, r5, lr}
 8010456:	d10d      	bne.n	8010474 <__mcmp+0x28>
 8010458:	3314      	adds	r3, #20
 801045a:	3114      	adds	r1, #20
 801045c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801046c:	4295      	cmp	r5, r2
 801046e:	d002      	beq.n	8010476 <__mcmp+0x2a>
 8010470:	d304      	bcc.n	801047c <__mcmp+0x30>
 8010472:	2001      	movs	r0, #1
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	42a3      	cmp	r3, r4
 8010478:	d3f4      	bcc.n	8010464 <__mcmp+0x18>
 801047a:	e7fb      	b.n	8010474 <__mcmp+0x28>
 801047c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010480:	e7f8      	b.n	8010474 <__mcmp+0x28>

08010482 <_calloc_r>:
 8010482:	b538      	push	{r3, r4, r5, lr}
 8010484:	fb02 f501 	mul.w	r5, r2, r1
 8010488:	4629      	mov	r1, r5
 801048a:	f7fb fff1 	bl	800c470 <_malloc_r>
 801048e:	4604      	mov	r4, r0
 8010490:	b118      	cbz	r0, 801049a <_calloc_r+0x18>
 8010492:	462a      	mov	r2, r5
 8010494:	2100      	movs	r1, #0
 8010496:	f7ff fde6 	bl	8010066 <memset>
 801049a:	4620      	mov	r0, r4
 801049c:	bd38      	pop	{r3, r4, r5, pc}

0801049e <__ascii_mbtowc>:
 801049e:	b082      	sub	sp, #8
 80104a0:	b901      	cbnz	r1, 80104a4 <__ascii_mbtowc+0x6>
 80104a2:	a901      	add	r1, sp, #4
 80104a4:	b142      	cbz	r2, 80104b8 <__ascii_mbtowc+0x1a>
 80104a6:	b14b      	cbz	r3, 80104bc <__ascii_mbtowc+0x1e>
 80104a8:	7813      	ldrb	r3, [r2, #0]
 80104aa:	600b      	str	r3, [r1, #0]
 80104ac:	7812      	ldrb	r2, [r2, #0]
 80104ae:	1e10      	subs	r0, r2, #0
 80104b0:	bf18      	it	ne
 80104b2:	2001      	movne	r0, #1
 80104b4:	b002      	add	sp, #8
 80104b6:	4770      	bx	lr
 80104b8:	4610      	mov	r0, r2
 80104ba:	e7fb      	b.n	80104b4 <__ascii_mbtowc+0x16>
 80104bc:	f06f 0001 	mvn.w	r0, #1
 80104c0:	e7f8      	b.n	80104b4 <__ascii_mbtowc+0x16>

080104c2 <__sfputc_r>:
 80104c2:	6893      	ldr	r3, [r2, #8]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	b410      	push	{r4}
 80104ca:	6093      	str	r3, [r2, #8]
 80104cc:	da07      	bge.n	80104de <__sfputc_r+0x1c>
 80104ce:	6994      	ldr	r4, [r2, #24]
 80104d0:	42a3      	cmp	r3, r4
 80104d2:	db01      	blt.n	80104d8 <__sfputc_r+0x16>
 80104d4:	290a      	cmp	r1, #10
 80104d6:	d102      	bne.n	80104de <__sfputc_r+0x1c>
 80104d8:	bc10      	pop	{r4}
 80104da:	f7fd b807 	b.w	800d4ec <__swbuf_r>
 80104de:	6813      	ldr	r3, [r2, #0]
 80104e0:	1c58      	adds	r0, r3, #1
 80104e2:	6010      	str	r0, [r2, #0]
 80104e4:	7019      	strb	r1, [r3, #0]
 80104e6:	4608      	mov	r0, r1
 80104e8:	bc10      	pop	{r4}
 80104ea:	4770      	bx	lr

080104ec <__sfputs_r>:
 80104ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ee:	4606      	mov	r6, r0
 80104f0:	460f      	mov	r7, r1
 80104f2:	4614      	mov	r4, r2
 80104f4:	18d5      	adds	r5, r2, r3
 80104f6:	42ac      	cmp	r4, r5
 80104f8:	d101      	bne.n	80104fe <__sfputs_r+0x12>
 80104fa:	2000      	movs	r0, #0
 80104fc:	e007      	b.n	801050e <__sfputs_r+0x22>
 80104fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010502:	463a      	mov	r2, r7
 8010504:	4630      	mov	r0, r6
 8010506:	f7ff ffdc 	bl	80104c2 <__sfputc_r>
 801050a:	1c43      	adds	r3, r0, #1
 801050c:	d1f3      	bne.n	80104f6 <__sfputs_r+0xa>
 801050e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010510 <__ascii_wctomb>:
 8010510:	4603      	mov	r3, r0
 8010512:	4608      	mov	r0, r1
 8010514:	b141      	cbz	r1, 8010528 <__ascii_wctomb+0x18>
 8010516:	2aff      	cmp	r2, #255	; 0xff
 8010518:	d904      	bls.n	8010524 <__ascii_wctomb+0x14>
 801051a:	228a      	movs	r2, #138	; 0x8a
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010522:	4770      	bx	lr
 8010524:	700a      	strb	r2, [r1, #0]
 8010526:	2001      	movs	r0, #1
 8010528:	4770      	bx	lr

0801052a <abort>:
 801052a:	b508      	push	{r3, lr}
 801052c:	2006      	movs	r0, #6
 801052e:	f7fd fa5b 	bl	800d9e8 <raise>
 8010532:	2001      	movs	r0, #1
 8010534:	f7f5 fdc8 	bl	80060c8 <_exit>

08010538 <__sfmoreglue>:
 8010538:	b570      	push	{r4, r5, r6, lr}
 801053a:	2268      	movs	r2, #104	; 0x68
 801053c:	1e4d      	subs	r5, r1, #1
 801053e:	4355      	muls	r5, r2
 8010540:	460e      	mov	r6, r1
 8010542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010546:	f7fb ff93 	bl	800c470 <_malloc_r>
 801054a:	4604      	mov	r4, r0
 801054c:	b140      	cbz	r0, 8010560 <__sfmoreglue+0x28>
 801054e:	2100      	movs	r1, #0
 8010550:	e9c0 1600 	strd	r1, r6, [r0]
 8010554:	300c      	adds	r0, #12
 8010556:	60a0      	str	r0, [r4, #8]
 8010558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801055c:	f7ff fd83 	bl	8010066 <memset>
 8010560:	4620      	mov	r0, r4
 8010562:	bd70      	pop	{r4, r5, r6, pc}

08010564 <_fwalk_reent>:
 8010564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010568:	4606      	mov	r6, r0
 801056a:	4688      	mov	r8, r1
 801056c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010570:	2700      	movs	r7, #0
 8010572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010576:	f1b9 0901 	subs.w	r9, r9, #1
 801057a:	d505      	bpl.n	8010588 <_fwalk_reent+0x24>
 801057c:	6824      	ldr	r4, [r4, #0]
 801057e:	2c00      	cmp	r4, #0
 8010580:	d1f7      	bne.n	8010572 <_fwalk_reent+0xe>
 8010582:	4638      	mov	r0, r7
 8010584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010588:	89ab      	ldrh	r3, [r5, #12]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d907      	bls.n	801059e <_fwalk_reent+0x3a>
 801058e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010592:	3301      	adds	r3, #1
 8010594:	d003      	beq.n	801059e <_fwalk_reent+0x3a>
 8010596:	4629      	mov	r1, r5
 8010598:	4630      	mov	r0, r6
 801059a:	47c0      	blx	r8
 801059c:	4307      	orrs	r7, r0
 801059e:	3568      	adds	r5, #104	; 0x68
 80105a0:	e7e9      	b.n	8010576 <_fwalk_reent+0x12>

080105a2 <__swhatbuf_r>:
 80105a2:	b570      	push	{r4, r5, r6, lr}
 80105a4:	460e      	mov	r6, r1
 80105a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105aa:	2900      	cmp	r1, #0
 80105ac:	b096      	sub	sp, #88	; 0x58
 80105ae:	4614      	mov	r4, r2
 80105b0:	461d      	mov	r5, r3
 80105b2:	da08      	bge.n	80105c6 <__swhatbuf_r+0x24>
 80105b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	602a      	str	r2, [r5, #0]
 80105bc:	061a      	lsls	r2, r3, #24
 80105be:	d410      	bmi.n	80105e2 <__swhatbuf_r+0x40>
 80105c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c4:	e00e      	b.n	80105e4 <__swhatbuf_r+0x42>
 80105c6:	466a      	mov	r2, sp
 80105c8:	f7fd fa4a 	bl	800da60 <_fstat_r>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	dbf1      	blt.n	80105b4 <__swhatbuf_r+0x12>
 80105d0:	9a01      	ldr	r2, [sp, #4]
 80105d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105da:	425a      	negs	r2, r3
 80105dc:	415a      	adcs	r2, r3
 80105de:	602a      	str	r2, [r5, #0]
 80105e0:	e7ee      	b.n	80105c0 <__swhatbuf_r+0x1e>
 80105e2:	2340      	movs	r3, #64	; 0x40
 80105e4:	2000      	movs	r0, #0
 80105e6:	6023      	str	r3, [r4, #0]
 80105e8:	b016      	add	sp, #88	; 0x58
 80105ea:	bd70      	pop	{r4, r5, r6, pc}

080105ec <_raise_r>:
 80105ec:	291f      	cmp	r1, #31
 80105ee:	b538      	push	{r3, r4, r5, lr}
 80105f0:	4604      	mov	r4, r0
 80105f2:	460d      	mov	r5, r1
 80105f4:	d904      	bls.n	8010600 <_raise_r+0x14>
 80105f6:	2316      	movs	r3, #22
 80105f8:	6003      	str	r3, [r0, #0]
 80105fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105fe:	bd38      	pop	{r3, r4, r5, pc}
 8010600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010602:	b112      	cbz	r2, 801060a <_raise_r+0x1e>
 8010604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010608:	b94b      	cbnz	r3, 801061e <_raise_r+0x32>
 801060a:	4620      	mov	r0, r4
 801060c:	f000 f816 	bl	801063c <_getpid_r>
 8010610:	462a      	mov	r2, r5
 8010612:	4601      	mov	r1, r0
 8010614:	4620      	mov	r0, r4
 8010616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801061a:	f7fd b9ed 	b.w	800d9f8 <_kill_r>
 801061e:	2b01      	cmp	r3, #1
 8010620:	d00a      	beq.n	8010638 <_raise_r+0x4c>
 8010622:	1c59      	adds	r1, r3, #1
 8010624:	d103      	bne.n	801062e <_raise_r+0x42>
 8010626:	2316      	movs	r3, #22
 8010628:	6003      	str	r3, [r0, #0]
 801062a:	2001      	movs	r0, #1
 801062c:	e7e7      	b.n	80105fe <_raise_r+0x12>
 801062e:	2400      	movs	r4, #0
 8010630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010634:	4628      	mov	r0, r5
 8010636:	4798      	blx	r3
 8010638:	2000      	movs	r0, #0
 801063a:	e7e0      	b.n	80105fe <_raise_r+0x12>

0801063c <_getpid_r>:
 801063c:	f7fe b839 	b.w	800e6b2 <_getpid>

08010640 <__sread>:
 8010640:	b510      	push	{r4, lr}
 8010642:	460c      	mov	r4, r1
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	f7fd fa3e 	bl	800dac8 <_read_r>
 801064c:	2800      	cmp	r0, #0
 801064e:	bfab      	itete	ge
 8010650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010652:	89a3      	ldrhlt	r3, [r4, #12]
 8010654:	181b      	addge	r3, r3, r0
 8010656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801065a:	bfac      	ite	ge
 801065c:	6563      	strge	r3, [r4, #84]	; 0x54
 801065e:	81a3      	strhlt	r3, [r4, #12]
 8010660:	bd10      	pop	{r4, pc}

08010662 <__swrite>:
 8010662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010666:	461f      	mov	r7, r3
 8010668:	898b      	ldrh	r3, [r1, #12]
 801066a:	05db      	lsls	r3, r3, #23
 801066c:	4605      	mov	r5, r0
 801066e:	460c      	mov	r4, r1
 8010670:	4616      	mov	r6, r2
 8010672:	d505      	bpl.n	8010680 <__swrite+0x1e>
 8010674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010678:	2302      	movs	r3, #2
 801067a:	2200      	movs	r2, #0
 801067c:	f7fd fa12 	bl	800daa4 <_lseek_r>
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801068a:	81a3      	strh	r3, [r4, #12]
 801068c:	4632      	mov	r2, r6
 801068e:	463b      	mov	r3, r7
 8010690:	4628      	mov	r0, r5
 8010692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010696:	f7fd b9c1 	b.w	800da1c <_write_r>

0801069a <__sseek>:
 801069a:	b510      	push	{r4, lr}
 801069c:	460c      	mov	r4, r1
 801069e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a2:	f7fd f9ff 	bl	800daa4 <_lseek_r>
 80106a6:	1c43      	adds	r3, r0, #1
 80106a8:	89a3      	ldrh	r3, [r4, #12]
 80106aa:	bf15      	itete	ne
 80106ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80106ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106b6:	81a3      	strheq	r3, [r4, #12]
 80106b8:	bf18      	it	ne
 80106ba:	81a3      	strhne	r3, [r4, #12]
 80106bc:	bd10      	pop	{r4, pc}

080106be <__sclose>:
 80106be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c2:	f7fd b9bd 	b.w	800da40 <_close_r>

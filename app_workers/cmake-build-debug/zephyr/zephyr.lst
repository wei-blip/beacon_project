
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 36 00 20 a5 59 00 08 47 fb 00 08 5d 59 00 08     .6. .Y..G...]Y..
 8000010:	5d 59 00 08 5d 59 00 08 5d 59 00 08 00 00 00 00     ]Y..]Y..]Y......
	...
 800002c:	a9 4c 00 08 5d 59 00 08 00 00 00 00 55 4c 00 08     .L..]Y......UL..
 800003c:	ed af 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000050:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000060:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000070:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000080:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000090:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000a0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000b0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000c0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000d0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000e0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 80000f0:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000100:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000110:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000120:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000130:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000140:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000150:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000160:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000170:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000180:	81 4d 00 08 81 4d 00 08 81 4d 00 08 81 4d 00 08     .M...M...M...M..
 8000190:	81 4d 00 08                                         .M..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	4605      	mov	r5, r0
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000e6e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000e70:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000e72:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000e74:	f010 fa1e 	bl	80112b4 <z_device_is_ready>
 8000e78:	b150      	cbz	r0, 8000e90 <ws2812_pwm_init+0x28>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	7e22      	ldrb	r2, [r4, #24]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d222      	bcs.n	8000ec8 <ws2812_pwm_init+0x60>
        switch (cfg->color_mapping[i]) {
 8000e82:	69e2      	ldr	r2, [r4, #28]
 8000e84:	5cd2      	ldrb	r2, [r2, r3]
 8000e86:	2a03      	cmp	r2, #3
 8000e88:	d810      	bhi.n	8000eac <ws2812_pwm_init+0x44>
    for (i = 0; i < cfg->num_colors; i++) {
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e7f5      	b.n	8000e7c <ws2812_pwm_init+0x14>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <ws2812_pwm_init+0xd0>)
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9000      	str	r0, [sp, #0]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ea2:	f010 f9fa 	bl	801129a <z_log_msg2_runtime_create>
        return -ENODEV;
 8000ea6:	f06f 0012 	mvn.w	r0, #18
 8000eaa:	e03d      	b.n	8000f28 <ws2812_pwm_init+0xc0>
            case LED_COLOR_ID_RED:
            case LED_COLOR_ID_GREEN:
            case LED_COLOR_ID_BLUE:
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <ws2812_pwm_init+0xd8>)
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	9000      	str	r0, [sp, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ebe:	f010 f9ec 	bl	801129a <z_log_msg2_runtime_create>
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ec2:	f06f 0015 	mvn.w	r0, #21
 8000ec6:	e02f      	b.n	8000f28 <ws2812_pwm_init+0xc0>
        }
    }

    uint64_t cycles_per_sec;
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	6861      	ldr	r1, [r4, #4]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
 8000ecc:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	aa04      	add	r2, sp, #16
 8000ed2:	4798      	blx	r3

    ctx->pwm_period_cycles = (uint32_t)
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ed4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8000ed6:	9804      	ldr	r0, [sp, #16]
 8000ed8:	fba0 0105 	umull	r0, r1, r0, r5
 8000edc:	a314      	add	r3, pc, #80	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000ee6:	fb05 110c 	mla	r1, r5, ip, r1
 8000eea:	f7ff fd77 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_period_cycles = (uint32_t)
 8000eee:	6030      	str	r0, [r6, #0]
    ctx->pwm_t0h_cycles = (uint32_t)
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ef0:	8c25      	ldrh	r5, [r4, #32]
 8000ef2:	9804      	ldr	r0, [sp, #16]
 8000ef4:	fba0 0105 	umull	r0, r1, r0, r5
 8000ef8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000f02:	fb05 110c 	mla	r1, r5, ip, r1
 8000f06:	f7ff fd69 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f0a:	6070      	str	r0, [r6, #4]
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f0c:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8000f0e:	9804      	ldr	r0, [sp, #16]
 8000f10:	fba0 0104 	umull	r0, r1, r0, r4
 8000f14:	a306      	add	r3, pc, #24	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	9d05      	ldr	r5, [sp, #20]
 8000f1c:	fb04 1105 	mla	r1, r4, r5, r1
 8000f20:	f7ff fd5c 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f24:	60b0      	str	r0, [r6, #8]

    return 0;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	3b9aca00 	.word	0x3b9aca00
 8000f34:	00000000 	.word	0x00000000
 8000f38:	08013d10 	.word	0x08013d10
 8000f3c:	08012770 	.word	0x08012770
 8000f40:	08013d2c 	.word	0x08013d2c
 8000f44:	00000000 	.word	0x00000000

08000f48 <_dtoa_r>:
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f4e:	b099      	sub	sp, #100	; 0x64
 8000f50:	4616      	mov	r6, r2
 8000f52:	461f      	mov	r7, r3
 8000f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000f58:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	b974      	cbnz	r4, 8000f7e <_dtoa_r+0x36>
 8000f60:	2010      	movs	r0, #16
 8000f62:	f00c fd7b 	bl	800da5c <malloc>
 8000f66:	4602      	mov	r2, r0
 8000f68:	6268      	str	r0, [r5, #36]	; 0x24
 8000f6a:	b920      	cbnz	r0, 8000f76 <_dtoa_r+0x2e>
 8000f6c:	4ba8      	ldr	r3, [pc, #672]	; (8001210 <_dtoa_r+0x2c8>)
 8000f6e:	21ea      	movs	r1, #234	; 0xea
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <_dtoa_r+0x2cc>)
 8000f72:	f00d fca3 	bl	800e8bc <__assert_func>
 8000f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000f7a:	6004      	str	r4, [r0, #0]
 8000f7c:	60c4      	str	r4, [r0, #12]
 8000f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	b151      	cbz	r1, 8000f9a <_dtoa_r+0x52>
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	604a      	str	r2, [r1, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f00d f9c0 	bl	800e314 <_Bfree>
 8000f94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	1e3b      	subs	r3, r7, #0
 8000f9c:	bfb9      	ittee	lt
 8000f9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	9305      	strlt	r3, [sp, #20]
 8000fa4:	2300      	movge	r3, #0
 8000fa6:	f8c8 3000 	strge.w	r3, [r8]
 8000faa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000fae:	4b9a      	ldr	r3, [pc, #616]	; (8001218 <_dtoa_r+0x2d0>)
 8000fb0:	bfbc      	itt	lt
 8000fb2:	2201      	movlt	r2, #1
 8000fb4:	f8c8 2000 	strlt.w	r2, [r8]
 8000fb8:	ea33 0309 	bics.w	r3, r3, r9
 8000fbc:	d119      	bne.n	8000ff2 <_dtoa_r+0xaa>
 8000fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000fca:	4333      	orrs	r3, r6
 8000fcc:	f000 8580 	beq.w	8001ad0 <_dtoa_r+0xb88>
 8000fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000fd2:	b953      	cbnz	r3, 8000fea <_dtoa_r+0xa2>
 8000fd4:	4b91      	ldr	r3, [pc, #580]	; (800121c <_dtoa_r+0x2d4>)
 8000fd6:	e022      	b.n	800101e <_dtoa_r+0xd6>
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <_dtoa_r+0x2d8>)
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	9803      	ldr	r0, [sp, #12]
 8000fe4:	b019      	add	sp, #100	; 0x64
 8000fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <_dtoa_r+0x2d4>)
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	e7f5      	b.n	8000fde <_dtoa_r+0x96>
 8000ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000ff6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	2300      	movs	r3, #0
 8001002:	f7ff fd5b 	bl	8000abc <__aeabi_dcmpeq>
 8001006:	4680      	mov	r8, r0
 8001008:	b158      	cbz	r0, 8001022 <_dtoa_r+0xda>
 800100a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800100c:	2301      	movs	r3, #1
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8559 	beq.w	8001aca <_dtoa_r+0xb82>
 8001018:	4882      	ldr	r0, [pc, #520]	; (8001224 <_dtoa_r+0x2dc>)
 800101a:	6018      	str	r0, [r3, #0]
 800101c:	1e43      	subs	r3, r0, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e7df      	b.n	8000fe2 <_dtoa_r+0x9a>
 8001022:	ab16      	add	r3, sp, #88	; 0x58
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	ab17      	add	r3, sp, #92	; 0x5c
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4628      	mov	r0, r5
 800102c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001030:	f00d fbe8 	bl	800e804 <__d2b>
 8001034:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001038:	4683      	mov	fp, r0
 800103a:	2c00      	cmp	r4, #0
 800103c:	d07e      	beq.n	800113c <_dtoa_r+0x1f4>
 800103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001040:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800104c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001050:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001054:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <_dtoa_r+0x2e0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f7ff f8f4 	bl	8000248 <__aeabi_dsub>
 8001060:	a365      	add	r3, pc, #404	; (adr r3, 80011f8 <_dtoa_r+0x2b0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faa7 	bl	80005b8 <__aeabi_dmul>
 800106a:	a365      	add	r3, pc, #404	; (adr r3, 8001200 <_dtoa_r+0x2b8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff f8ec 	bl	800024c <__adddf3>
 8001074:	4606      	mov	r6, r0
 8001076:	4620      	mov	r0, r4
 8001078:	460f      	mov	r7, r1
 800107a:	f7ff fa33 	bl	80004e4 <__aeabi_i2d>
 800107e:	a362      	add	r3, pc, #392	; (adr r3, 8001208 <_dtoa_r+0x2c0>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa98 	bl	80005b8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f8dc 	bl	800024c <__adddf3>
 8001094:	4606      	mov	r6, r0
 8001096:	460f      	mov	r7, r1
 8001098:	f7ff fd58 	bl	8000b4c <__aeabi_d2iz>
 800109c:	2200      	movs	r2, #0
 800109e:	4682      	mov	sl, r0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4630      	mov	r0, r6
 80010a4:	4639      	mov	r1, r7
 80010a6:	f7ff fd13 	bl	8000ad0 <__aeabi_dcmplt>
 80010aa:	b148      	cbz	r0, 80010c0 <_dtoa_r+0x178>
 80010ac:	4650      	mov	r0, sl
 80010ae:	f7ff fa19 	bl	80004e4 <__aeabi_i2d>
 80010b2:	4632      	mov	r2, r6
 80010b4:	463b      	mov	r3, r7
 80010b6:	f7ff fd01 	bl	8000abc <__aeabi_dcmpeq>
 80010ba:	b908      	cbnz	r0, 80010c0 <_dtoa_r+0x178>
 80010bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010c0:	f1ba 0f16 	cmp.w	sl, #22
 80010c4:	d857      	bhi.n	8001176 <_dtoa_r+0x22e>
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <_dtoa_r+0x2e4>)
 80010c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010d4:	f7ff fcfc 	bl	8000ad0 <__aeabi_dcmplt>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04e      	beq.n	800117a <_dtoa_r+0x232>
 80010dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010e0:	2300      	movs	r3, #0
 80010e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80010e6:	1b1c      	subs	r4, r3, r4
 80010e8:	1e63      	subs	r3, r4, #1
 80010ea:	9309      	str	r3, [sp, #36]	; 0x24
 80010ec:	bf45      	ittet	mi
 80010ee:	f1c4 0301 	rsbmi	r3, r4, #1
 80010f2:	9306      	strmi	r3, [sp, #24]
 80010f4:	2300      	movpl	r3, #0
 80010f6:	2300      	movmi	r3, #0
 80010f8:	bf4c      	ite	mi
 80010fa:	9309      	strmi	r3, [sp, #36]	; 0x24
 80010fc:	9306      	strpl	r3, [sp, #24]
 80010fe:	f1ba 0f00 	cmp.w	sl, #0
 8001102:	db3c      	blt.n	800117e <_dtoa_r+0x236>
 8001104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001106:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800110a:	4453      	add	r3, sl
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
 800110e:	2300      	movs	r3, #0
 8001110:	930a      	str	r3, [sp, #40]	; 0x28
 8001112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001114:	2b09      	cmp	r3, #9
 8001116:	f200 808d 	bhi.w	8001234 <_dtoa_r+0x2ec>
 800111a:	2b05      	cmp	r3, #5
 800111c:	bfc4      	itt	gt
 800111e:	3b04      	subgt	r3, #4
 8001120:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001124:	f1a3 0302 	sub.w	r3, r3, #2
 8001128:	bfcc      	ite	gt
 800112a:	2400      	movgt	r4, #0
 800112c:	2401      	movle	r4, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	f200 808c 	bhi.w	800124c <_dtoa_r+0x304>
 8001134:	e8df f003 	tbb	[pc, r3]
 8001138:	5b4d4f2d 	.word	0x5b4d4f2d
 800113c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001140:	441c      	add	r4, r3
 8001142:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001146:	2b20      	cmp	r3, #32
 8001148:	bfc3      	ittte	gt
 800114a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800114e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001152:	fa09 f303 	lslgt.w	r3, r9, r3
 8001156:	f1c3 0320 	rsble	r3, r3, #32
 800115a:	bfc6      	itte	gt
 800115c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001160:	4318      	orrgt	r0, r3
 8001162:	fa06 f003 	lslle.w	r0, r6, r3
 8001166:	f7ff f9ad 	bl	80004c4 <__aeabi_ui2d>
 800116a:	2301      	movs	r3, #1
 800116c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001170:	3c01      	subs	r4, #1
 8001172:	9313      	str	r3, [sp, #76]	; 0x4c
 8001174:	e770      	b.n	8001058 <_dtoa_r+0x110>
 8001176:	2301      	movs	r3, #1
 8001178:	e7b3      	b.n	80010e2 <_dtoa_r+0x19a>
 800117a:	900f      	str	r0, [sp, #60]	; 0x3c
 800117c:	e7b2      	b.n	80010e4 <_dtoa_r+0x19c>
 800117e:	9b06      	ldr	r3, [sp, #24]
 8001180:	eba3 030a 	sub.w	r3, r3, sl
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	f1ca 0300 	rsb	r3, sl, #0
 800118a:	930a      	str	r3, [sp, #40]	; 0x28
 800118c:	2300      	movs	r3, #0
 800118e:	930e      	str	r3, [sp, #56]	; 0x38
 8001190:	e7bf      	b.n	8001112 <_dtoa_r+0x1ca>
 8001192:	2300      	movs	r3, #0
 8001194:	930b      	str	r3, [sp, #44]	; 0x2c
 8001196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc5a      	bgt.n	8001252 <_dtoa_r+0x30a>
 800119c:	f04f 0901 	mov.w	r9, #1
 80011a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80011a4:	464b      	mov	r3, r9
 80011a6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80011aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	6042      	str	r2, [r0, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	f102 0614 	add.w	r6, r2, #20
 80011b6:	429e      	cmp	r6, r3
 80011b8:	6841      	ldr	r1, [r0, #4]
 80011ba:	d950      	bls.n	800125e <_dtoa_r+0x316>
 80011bc:	4628      	mov	r0, r5
 80011be:	f00d f869 	bl	800e294 <_Balloc>
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d14e      	bne.n	8001266 <_dtoa_r+0x31e>
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <_dtoa_r+0x2e8>)
 80011ca:	4602      	mov	r2, r0
 80011cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011d0:	e6ce      	b.n	8000f70 <_dtoa_r+0x28>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e7de      	b.n	8001194 <_dtoa_r+0x24c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80011da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011dc:	eb0a 0903 	add.w	r9, sl, r3
 80011e0:	f109 0301 	add.w	r3, r9, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	bfb8      	it	lt
 80011ea:	2301      	movlt	r3, #1
 80011ec:	e7dd      	b.n	80011aa <_dtoa_r+0x262>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e7f2      	b.n	80011d8 <_dtoa_r+0x290>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	636f4361 	.word	0x636f4361
 80011fc:	3fd287a7 	.word	0x3fd287a7
 8001200:	8b60c8b3 	.word	0x8b60c8b3
 8001204:	3fc68a28 	.word	0x3fc68a28
 8001208:	509f79fb 	.word	0x509f79fb
 800120c:	3fd34413 	.word	0x3fd34413
 8001210:	08014156 	.word	0x08014156
 8001214:	0801416d 	.word	0x0801416d
 8001218:	7ff00000 	.word	0x7ff00000
 800121c:	08014152 	.word	0x08014152
 8001220:	08014149 	.word	0x08014149
 8001224:	08014126 	.word	0x08014126
 8001228:	3ff80000 	.word	0x3ff80000
 800122c:	08012890 	.word	0x08012890
 8001230:	080141c7 	.word	0x080141c7
 8001234:	2401      	movs	r4, #1
 8001236:	2300      	movs	r3, #0
 8001238:	9322      	str	r3, [sp, #136]	; 0x88
 800123a:	940b      	str	r4, [sp, #44]	; 0x2c
 800123c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001240:	2200      	movs	r2, #0
 8001242:	f8cd 9020 	str.w	r9, [sp, #32]
 8001246:	2312      	movs	r3, #18
 8001248:	9223      	str	r2, [sp, #140]	; 0x8c
 800124a:	e7ae      	b.n	80011aa <_dtoa_r+0x262>
 800124c:	2301      	movs	r3, #1
 800124e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001250:	e7f4      	b.n	800123c <_dtoa_r+0x2f4>
 8001252:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001256:	f8cd 9020 	str.w	r9, [sp, #32]
 800125a:	464b      	mov	r3, r9
 800125c:	e7a5      	b.n	80011aa <_dtoa_r+0x262>
 800125e:	3101      	adds	r1, #1
 8001260:	6041      	str	r1, [r0, #4]
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	e7a5      	b.n	80011b2 <_dtoa_r+0x26a>
 8001266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001268:	9a03      	ldr	r2, [sp, #12]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	9b08      	ldr	r3, [sp, #32]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	f200 80a8 	bhi.w	80013c4 <_dtoa_r+0x47c>
 8001274:	2c00      	cmp	r4, #0
 8001276:	f000 80a5 	beq.w	80013c4 <_dtoa_r+0x47c>
 800127a:	f1ba 0f00 	cmp.w	sl, #0
 800127e:	dd34      	ble.n	80012ea <_dtoa_r+0x3a2>
 8001280:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <_dtoa_r+0x5a4>)
 8001282:	f00a 030f 	and.w	r3, sl, #15
 8001286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800128a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800128e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001296:	ea4f 142a 	mov.w	r4, sl, asr #4
 800129a:	d016      	beq.n	80012ca <_dtoa_r+0x382>
 800129c:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <_dtoa_r+0x5a8>)
 800129e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012a6:	f7ff fab1 	bl	800080c <__aeabi_ddiv>
 80012aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012ae:	f004 040f 	and.w	r4, r4, #15
 80012b2:	2703      	movs	r7, #3
 80012b4:	4e8e      	ldr	r6, [pc, #568]	; (80014f0 <_dtoa_r+0x5a8>)
 80012b6:	b954      	cbnz	r4, 80012ce <_dtoa_r+0x386>
 80012b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012c0:	f7ff faa4 	bl	800080c <__aeabi_ddiv>
 80012c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012c8:	e029      	b.n	800131e <_dtoa_r+0x3d6>
 80012ca:	2702      	movs	r7, #2
 80012cc:	e7f2      	b.n	80012b4 <_dtoa_r+0x36c>
 80012ce:	07e1      	lsls	r1, r4, #31
 80012d0:	d508      	bpl.n	80012e4 <_dtoa_r+0x39c>
 80012d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012da:	f7ff f96d 	bl	80005b8 <__aeabi_dmul>
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	3701      	adds	r7, #1
 80012e4:	1064      	asrs	r4, r4, #1
 80012e6:	3608      	adds	r6, #8
 80012e8:	e7e5      	b.n	80012b6 <_dtoa_r+0x36e>
 80012ea:	f000 80a5 	beq.w	8001438 <_dtoa_r+0x4f0>
 80012ee:	f1ca 0400 	rsb	r4, sl, #0
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <_dtoa_r+0x5a4>)
 80012f4:	4e7e      	ldr	r6, [pc, #504]	; (80014f0 <_dtoa_r+0x5a8>)
 80012f6:	f004 020f 	and.w	r2, r4, #15
 80012fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001306:	f7ff f957 	bl	80005b8 <__aeabi_dmul>
 800130a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800130e:	1124      	asrs	r4, r4, #4
 8001310:	2300      	movs	r3, #0
 8001312:	2702      	movs	r7, #2
 8001314:	2c00      	cmp	r4, #0
 8001316:	f040 8084 	bne.w	8001422 <_dtoa_r+0x4da>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d2      	bne.n	80012c4 <_dtoa_r+0x37c>
 800131e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808b 	beq.w	800143c <_dtoa_r+0x4f4>
 8001326:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800132a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800132e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <_dtoa_r+0x5ac>)
 8001334:	2200      	movs	r2, #0
 8001336:	f7ff fbcb 	bl	8000ad0 <__aeabi_dcmplt>
 800133a:	2800      	cmp	r0, #0
 800133c:	d07e      	beq.n	800143c <_dtoa_r+0x4f4>
 800133e:	9b08      	ldr	r3, [sp, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07b      	beq.n	800143c <_dtoa_r+0x4f4>
 8001344:	f1b9 0f00 	cmp.w	r9, #0
 8001348:	dd38      	ble.n	80013bc <_dtoa_r+0x474>
 800134a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <_dtoa_r+0x5b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	f7ff f931 	bl	80005b8 <__aeabi_dmul>
 8001356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800135a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800135e:	3701      	adds	r7, #1
 8001360:	464c      	mov	r4, r9
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff f8be 	bl	80004e4 <__aeabi_i2d>
 8001368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800136c:	f7ff f924 	bl	80005b8 <__aeabi_dmul>
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <_dtoa_r+0x5b4>)
 8001372:	2200      	movs	r2, #0
 8001374:	f7fe ff6a 	bl	800024c <__adddf3>
 8001378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001380:	9611      	str	r6, [sp, #68]	; 0x44
 8001382:	2c00      	cmp	r4, #0
 8001384:	d15d      	bne.n	8001442 <_dtoa_r+0x4fa>
 8001386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <_dtoa_r+0x5b8>)
 800138c:	2200      	movs	r2, #0
 800138e:	f7fe ff5b 	bl	8000248 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800139c:	4633      	mov	r3, r6
 800139e:	f7ff fbb5 	bl	8000b0c <__aeabi_dcmpgt>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	f040 829c 	bne.w	80018e0 <_dtoa_r+0x998>
 80013a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80013b2:	f7ff fb8d 	bl	8000ad0 <__aeabi_dcmplt>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f040 8290 	bne.w	80018dc <_dtoa_r+0x994>
 80013bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80013c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f2c0 8152 	blt.w	8001670 <_dtoa_r+0x728>
 80013cc:	f1ba 0f0e 	cmp.w	sl, #14
 80013d0:	f300 814e 	bgt.w	8001670 <_dtoa_r+0x728>
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_dtoa_r+0x5a4>)
 80013d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80013da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80013e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f280 80db 	bge.w	80015a0 <_dtoa_r+0x658>
 80013ea:	9b08      	ldr	r3, [sp, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f300 80d7 	bgt.w	80015a0 <_dtoa_r+0x658>
 80013f2:	f040 8272 	bne.w	80018da <_dtoa_r+0x992>
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <_dtoa_r+0x5b8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80013fe:	f7ff f8db 	bl	80005b8 <__aeabi_dmul>
 8001402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001406:	f7ff fb77 	bl	8000af8 <__aeabi_dcmpge>
 800140a:	9c08      	ldr	r4, [sp, #32]
 800140c:	4626      	mov	r6, r4
 800140e:	2800      	cmp	r0, #0
 8001410:	f040 8248 	bne.w	80018a4 <_dtoa_r+0x95c>
 8001414:	9f03      	ldr	r7, [sp, #12]
 8001416:	2331      	movs	r3, #49	; 0x31
 8001418:	f807 3b01 	strb.w	r3, [r7], #1
 800141c:	f10a 0a01 	add.w	sl, sl, #1
 8001420:	e244      	b.n	80018ac <_dtoa_r+0x964>
 8001422:	07e2      	lsls	r2, r4, #31
 8001424:	d505      	bpl.n	8001432 <_dtoa_r+0x4ea>
 8001426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800142a:	f7ff f8c5 	bl	80005b8 <__aeabi_dmul>
 800142e:	3701      	adds	r7, #1
 8001430:	2301      	movs	r3, #1
 8001432:	1064      	asrs	r4, r4, #1
 8001434:	3608      	adds	r6, #8
 8001436:	e76d      	b.n	8001314 <_dtoa_r+0x3cc>
 8001438:	2702      	movs	r7, #2
 800143a:	e770      	b.n	800131e <_dtoa_r+0x3d6>
 800143c:	9c08      	ldr	r4, [sp, #32]
 800143e:	46d0      	mov	r8, sl
 8001440:	e78f      	b.n	8001362 <_dtoa_r+0x41a>
 8001442:	9903      	ldr	r1, [sp, #12]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_dtoa_r+0x5a4>)
 8001446:	4421      	add	r1, r4
 8001448:	9112      	str	r1, [sp, #72]	; 0x48
 800144a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800144c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001450:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001454:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001458:	2900      	cmp	r1, #0
 800145a:	d055      	beq.n	8001508 <_dtoa_r+0x5c0>
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <_dtoa_r+0x5bc>)
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f9d4 	bl	800080c <__aeabi_ddiv>
 8001464:	463b      	mov	r3, r7
 8001466:	4632      	mov	r2, r6
 8001468:	f7fe feee 	bl	8000248 <__aeabi_dsub>
 800146c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001470:	9f03      	ldr	r7, [sp, #12]
 8001472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001476:	f7ff fb69 	bl	8000b4c <__aeabi_d2iz>
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff f832 	bl	80004e4 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001488:	f7fe fede 	bl	8000248 <__aeabi_dsub>
 800148c:	3430      	adds	r4, #48	; 0x30
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001496:	f807 4b01 	strb.w	r4, [r7], #1
 800149a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800149e:	f7ff fb17 	bl	8000ad0 <__aeabi_dcmplt>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d174      	bne.n	8001590 <_dtoa_r+0x648>
 80014a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <_dtoa_r+0x5ac>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7fe fecb 	bl	8000248 <__aeabi_dsub>
 80014b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014b6:	f7ff fb0b 	bl	8000ad0 <__aeabi_dcmplt>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 80b7 	bne.w	800162e <_dtoa_r+0x6e6>
 80014c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014c2:	429f      	cmp	r7, r3
 80014c4:	f43f af7a 	beq.w	80013bc <_dtoa_r+0x474>
 80014c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <_dtoa_r+0x5b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_dmul>
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_dtoa_r+0x5b0>)
 80014d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014e8:	e7c3      	b.n	8001472 <_dtoa_r+0x52a>
 80014ea:	bf00      	nop
 80014ec:	08012890 	.word	0x08012890
 80014f0:	08012868 	.word	0x08012868
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40240000 	.word	0x40240000
 80014fc:	401c0000 	.word	0x401c0000
 8001500:	40140000 	.word	0x40140000
 8001504:	3fe00000 	.word	0x3fe00000
 8001508:	4630      	mov	r0, r6
 800150a:	4639      	mov	r1, r7
 800150c:	f7ff f854 	bl	80005b8 <__aeabi_dmul>
 8001510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001516:	9c03      	ldr	r4, [sp, #12]
 8001518:	9314      	str	r3, [sp, #80]	; 0x50
 800151a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800151e:	f7ff fb15 	bl	8000b4c <__aeabi_d2iz>
 8001522:	9015      	str	r0, [sp, #84]	; 0x54
 8001524:	f7fe ffde 	bl	80004e4 <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001530:	f7fe fe8a 	bl	8000248 <__aeabi_dsub>
 8001534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001536:	3330      	adds	r3, #48	; 0x30
 8001538:	f804 3b01 	strb.w	r3, [r4], #1
 800153c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800153e:	429c      	cmp	r4, r3
 8001540:	4606      	mov	r6, r0
 8001542:	460f      	mov	r7, r1
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	d124      	bne.n	8001594 <_dtoa_r+0x64c>
 800154a:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <_dtoa_r+0x894>)
 800154c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001550:	f7fe fe7c 	bl	800024c <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4630      	mov	r0, r6
 800155a:	4639      	mov	r1, r7
 800155c:	f7ff fad6 	bl	8000b0c <__aeabi_dcmpgt>
 8001560:	2800      	cmp	r0, #0
 8001562:	d163      	bne.n	800162c <_dtoa_r+0x6e4>
 8001564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001568:	499c      	ldr	r1, [pc, #624]	; (80017dc <_dtoa_r+0x894>)
 800156a:	2000      	movs	r0, #0
 800156c:	f7fe fe6c 	bl	8000248 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4630      	mov	r0, r6
 8001576:	4639      	mov	r1, r7
 8001578:	f7ff faaa 	bl	8000ad0 <__aeabi_dcmplt>
 800157c:	2800      	cmp	r0, #0
 800157e:	f43f af1d 	beq.w	80013bc <_dtoa_r+0x474>
 8001582:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001584:	1e7b      	subs	r3, r7, #1
 8001586:	9314      	str	r3, [sp, #80]	; 0x50
 8001588:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d0f8      	beq.n	8001582 <_dtoa_r+0x63a>
 8001590:	46c2      	mov	sl, r8
 8001592:	e03b      	b.n	800160c <_dtoa_r+0x6c4>
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <_dtoa_r+0x898>)
 8001596:	f7ff f80f 	bl	80005b8 <__aeabi_dmul>
 800159a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800159e:	e7bc      	b.n	800151a <_dtoa_r+0x5d2>
 80015a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80015a4:	9f03      	ldr	r7, [sp, #12]
 80015a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015aa:	4640      	mov	r0, r8
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7ff f92d 	bl	800080c <__aeabi_ddiv>
 80015b2:	f7ff facb 	bl	8000b4c <__aeabi_d2iz>
 80015b6:	4604      	mov	r4, r0
 80015b8:	f7fe ff94 	bl	80004e4 <__aeabi_i2d>
 80015bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015c0:	f7fe fffa 	bl	80005b8 <__aeabi_dmul>
 80015c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4640      	mov	r0, r8
 80015ce:	4649      	mov	r1, r9
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_dsub>
 80015d4:	f807 6b01 	strb.w	r6, [r7], #1
 80015d8:	9e03      	ldr	r6, [sp, #12]
 80015da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80015de:	1bbe      	subs	r6, r7, r6
 80015e0:	45b4      	cmp	ip, r6
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	d136      	bne.n	8001656 <_dtoa_r+0x70e>
 80015e8:	f7fe fe30 	bl	800024c <__adddf3>
 80015ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015f0:	4680      	mov	r8, r0
 80015f2:	4689      	mov	r9, r1
 80015f4:	f7ff fa8a 	bl	8000b0c <__aeabi_dcmpgt>
 80015f8:	bb58      	cbnz	r0, 8001652 <_dtoa_r+0x70a>
 80015fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7ff fa5b 	bl	8000abc <__aeabi_dcmpeq>
 8001606:	b108      	cbz	r0, 800160c <_dtoa_r+0x6c4>
 8001608:	07e1      	lsls	r1, r4, #31
 800160a:	d422      	bmi.n	8001652 <_dtoa_r+0x70a>
 800160c:	4628      	mov	r0, r5
 800160e:	4659      	mov	r1, fp
 8001610:	f00c fe80 	bl	800e314 <_Bfree>
 8001614:	2300      	movs	r3, #0
 8001616:	703b      	strb	r3, [r7, #0]
 8001618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800161a:	f10a 0001 	add.w	r0, sl, #1
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001622:	2b00      	cmp	r3, #0
 8001624:	f43f acdd 	beq.w	8000fe2 <_dtoa_r+0x9a>
 8001628:	601f      	str	r7, [r3, #0]
 800162a:	e4da      	b.n	8000fe2 <_dtoa_r+0x9a>
 800162c:	4627      	mov	r7, r4
 800162e:	463b      	mov	r3, r7
 8001630:	461f      	mov	r7, r3
 8001632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001636:	2a39      	cmp	r2, #57	; 0x39
 8001638:	d107      	bne.n	800164a <_dtoa_r+0x702>
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d1f7      	bne.n	8001630 <_dtoa_r+0x6e8>
 8001640:	9903      	ldr	r1, [sp, #12]
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	f108 0801 	add.w	r8, r8, #1
 8001648:	700a      	strb	r2, [r1, #0]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	3201      	adds	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e79e      	b.n	8001590 <_dtoa_r+0x648>
 8001652:	46d0      	mov	r8, sl
 8001654:	e7eb      	b.n	800162e <_dtoa_r+0x6e6>
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <_dtoa_r+0x898>)
 8001658:	2200      	movs	r2, #0
 800165a:	f7fe ffad 	bl	80005b8 <__aeabi_dmul>
 800165e:	2200      	movs	r2, #0
 8001660:	2300      	movs	r3, #0
 8001662:	4680      	mov	r8, r0
 8001664:	4689      	mov	r9, r1
 8001666:	f7ff fa29 	bl	8000abc <__aeabi_dcmpeq>
 800166a:	2800      	cmp	r0, #0
 800166c:	d09b      	beq.n	80015a6 <_dtoa_r+0x65e>
 800166e:	e7cd      	b.n	800160c <_dtoa_r+0x6c4>
 8001670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001672:	2a00      	cmp	r2, #0
 8001674:	f000 80d0 	beq.w	8001818 <_dtoa_r+0x8d0>
 8001678:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800167a:	2a01      	cmp	r2, #1
 800167c:	f300 80b2 	bgt.w	80017e4 <_dtoa_r+0x89c>
 8001680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001682:	2a00      	cmp	r2, #0
 8001684:	f000 80a6 	beq.w	80017d4 <_dtoa_r+0x88c>
 8001688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800168c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800168e:	9f06      	ldr	r7, [sp, #24]
 8001690:	9a06      	ldr	r2, [sp, #24]
 8001692:	441a      	add	r2, r3
 8001694:	9206      	str	r2, [sp, #24]
 8001696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001698:	2101      	movs	r1, #1
 800169a:	441a      	add	r2, r3
 800169c:	4628      	mov	r0, r5
 800169e:	9209      	str	r2, [sp, #36]	; 0x24
 80016a0:	f00c fea0 	bl	800e3e4 <__i2b>
 80016a4:	4606      	mov	r6, r0
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	dd0c      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd09      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016b0:	42bb      	cmp	r3, r7
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	bfa8      	it	ge
 80016b6:	463b      	movge	r3, r7
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	9206      	str	r2, [sp, #24]
 80016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016be:	1aff      	subs	r7, r7, r3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
 80016c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c6:	b1f3      	cbz	r3, 8001706 <_dtoa_r+0x7be>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a8 	beq.w	8001820 <_dtoa_r+0x8d8>
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	dd10      	ble.n	80016f6 <_dtoa_r+0x7ae>
 80016d4:	4631      	mov	r1, r6
 80016d6:	4622      	mov	r2, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f00c ff41 	bl	800e560 <__pow5mult>
 80016de:	465a      	mov	r2, fp
 80016e0:	4601      	mov	r1, r0
 80016e2:	4606      	mov	r6, r0
 80016e4:	4628      	mov	r0, r5
 80016e6:	f00c fe93 	bl	800e410 <__multiply>
 80016ea:	4659      	mov	r1, fp
 80016ec:	4680      	mov	r8, r0
 80016ee:	4628      	mov	r0, r5
 80016f0:	f00c fe10 	bl	800e314 <_Bfree>
 80016f4:	46c3      	mov	fp, r8
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	1b1a      	subs	r2, r3, r4
 80016fa:	d004      	beq.n	8001706 <_dtoa_r+0x7be>
 80016fc:	4659      	mov	r1, fp
 80016fe:	4628      	mov	r0, r5
 8001700:	f00c ff2e 	bl	800e560 <__pow5mult>
 8001704:	4683      	mov	fp, r0
 8001706:	2101      	movs	r1, #1
 8001708:	4628      	mov	r0, r5
 800170a:	f00c fe6b 	bl	800e3e4 <__i2b>
 800170e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	f340 8086 	ble.w	8001824 <_dtoa_r+0x8dc>
 8001718:	461a      	mov	r2, r3
 800171a:	4601      	mov	r1, r0
 800171c:	4628      	mov	r0, r5
 800171e:	f00c ff1f 	bl	800e560 <__pow5mult>
 8001722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001724:	2b01      	cmp	r3, #1
 8001726:	4604      	mov	r4, r0
 8001728:	dd7f      	ble.n	800182a <_dtoa_r+0x8e2>
 800172a:	f04f 0800 	mov.w	r8, #0
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001734:	6918      	ldr	r0, [r3, #16]
 8001736:	f010 fbd8 	bl	8011eea <__hi0bits>
 800173a:	f1c0 0020 	rsb	r0, r0, #32
 800173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001740:	4418      	add	r0, r3
 8001742:	f010 001f 	ands.w	r0, r0, #31
 8001746:	f000 8092 	beq.w	800186e <_dtoa_r+0x926>
 800174a:	f1c0 0320 	rsb	r3, r0, #32
 800174e:	2b04      	cmp	r3, #4
 8001750:	f340 808a 	ble.w	8001868 <_dtoa_r+0x920>
 8001754:	f1c0 001c 	rsb	r0, r0, #28
 8001758:	9b06      	ldr	r3, [sp, #24]
 800175a:	4403      	add	r3, r0
 800175c:	9306      	str	r3, [sp, #24]
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4403      	add	r3, r0
 8001762:	4407      	add	r7, r0
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
 8001766:	9b06      	ldr	r3, [sp, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd05      	ble.n	8001778 <_dtoa_r+0x830>
 800176c:	4659      	mov	r1, fp
 800176e:	461a      	mov	r2, r3
 8001770:	4628      	mov	r0, r5
 8001772:	f00c ff4f 	bl	800e614 <__lshift>
 8001776:	4683      	mov	fp, r0
 8001778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd05      	ble.n	800178a <_dtoa_r+0x842>
 800177e:	4621      	mov	r1, r4
 8001780:	461a      	mov	r2, r3
 8001782:	4628      	mov	r0, r5
 8001784:	f00c ff46 	bl	800e614 <__lshift>
 8001788:	4604      	mov	r4, r0
 800178a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d070      	beq.n	8001872 <_dtoa_r+0x92a>
 8001790:	4621      	mov	r1, r4
 8001792:	4658      	mov	r0, fp
 8001794:	f010 fbf6 	bl	8011f84 <__mcmp>
 8001798:	2800      	cmp	r0, #0
 800179a:	da6a      	bge.n	8001872 <_dtoa_r+0x92a>
 800179c:	2300      	movs	r3, #0
 800179e:	4659      	mov	r1, fp
 80017a0:	220a      	movs	r2, #10
 80017a2:	4628      	mov	r0, r5
 80017a4:	f00c fdd8 	bl	800e358 <__multadd>
 80017a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80017ae:	4683      	mov	fp, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8194 	beq.w	8001ade <_dtoa_r+0xb96>
 80017b6:	4631      	mov	r1, r6
 80017b8:	2300      	movs	r3, #0
 80017ba:	220a      	movs	r2, #10
 80017bc:	4628      	mov	r0, r5
 80017be:	f00c fdcb 	bl	800e358 <__multadd>
 80017c2:	f1b9 0f00 	cmp.w	r9, #0
 80017c6:	4606      	mov	r6, r0
 80017c8:	f300 8093 	bgt.w	80018f2 <_dtoa_r+0x9aa>
 80017cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc57      	bgt.n	8001882 <_dtoa_r+0x93a>
 80017d2:	e08e      	b.n	80018f2 <_dtoa_r+0x9aa>
 80017d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80017da:	e757      	b.n	800168c <_dtoa_r+0x744>
 80017dc:	3fe00000 	.word	0x3fe00000
 80017e0:	40240000 	.word	0x40240000
 80017e4:	9b08      	ldr	r3, [sp, #32]
 80017e6:	1e5c      	subs	r4, r3, #1
 80017e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	bfbf      	itttt	lt
 80017ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80017f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80017f2:	1ae2      	sublt	r2, r4, r3
 80017f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80017f6:	bfb6      	itet	lt
 80017f8:	189b      	addlt	r3, r3, r2
 80017fa:	1b1c      	subge	r4, r3, r4
 80017fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80017fe:	9b08      	ldr	r3, [sp, #32]
 8001800:	bfb8      	it	lt
 8001802:	2400      	movlt	r4, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb9      	ittee	lt
 8001808:	9b06      	ldrlt	r3, [sp, #24]
 800180a:	9a08      	ldrlt	r2, [sp, #32]
 800180c:	9f06      	ldrge	r7, [sp, #24]
 800180e:	9b08      	ldrge	r3, [sp, #32]
 8001810:	bfbc      	itt	lt
 8001812:	1a9f      	sublt	r7, r3, r2
 8001814:	2300      	movlt	r3, #0
 8001816:	e73b      	b.n	8001690 <_dtoa_r+0x748>
 8001818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800181a:	9f06      	ldr	r7, [sp, #24]
 800181c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800181e:	e742      	b.n	80016a6 <_dtoa_r+0x75e>
 8001820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001822:	e76b      	b.n	80016fc <_dtoa_r+0x7b4>
 8001824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001826:	2b01      	cmp	r3, #1
 8001828:	dc19      	bgt.n	800185e <_dtoa_r+0x916>
 800182a:	9b04      	ldr	r3, [sp, #16]
 800182c:	b9bb      	cbnz	r3, 800185e <_dtoa_r+0x916>
 800182e:	9b05      	ldr	r3, [sp, #20]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	b99b      	cbnz	r3, 800185e <_dtoa_r+0x916>
 8001836:	9b05      	ldr	r3, [sp, #20]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	051b      	lsls	r3, r3, #20
 8001840:	b183      	cbz	r3, 8001864 <_dtoa_r+0x91c>
 8001842:	9b06      	ldr	r3, [sp, #24]
 8001844:	3301      	adds	r3, #1
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	9309      	str	r3, [sp, #36]	; 0x24
 800184e:	f04f 0801 	mov.w	r8, #1
 8001852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f af6a 	bne.w	800172e <_dtoa_r+0x7e6>
 800185a:	2001      	movs	r0, #1
 800185c:	e76f      	b.n	800173e <_dtoa_r+0x7f6>
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7f6      	b.n	8001852 <_dtoa_r+0x90a>
 8001864:	4698      	mov	r8, r3
 8001866:	e7f4      	b.n	8001852 <_dtoa_r+0x90a>
 8001868:	f43f af7d 	beq.w	8001766 <_dtoa_r+0x81e>
 800186c:	4618      	mov	r0, r3
 800186e:	301c      	adds	r0, #28
 8001870:	e772      	b.n	8001758 <_dtoa_r+0x810>
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dc36      	bgt.n	80018e6 <_dtoa_r+0x99e>
 8001878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800187a:	2b02      	cmp	r3, #2
 800187c:	dd33      	ble.n	80018e6 <_dtoa_r+0x99e>
 800187e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001882:	f1b9 0f00 	cmp.w	r9, #0
 8001886:	d10d      	bne.n	80018a4 <_dtoa_r+0x95c>
 8001888:	4621      	mov	r1, r4
 800188a:	464b      	mov	r3, r9
 800188c:	2205      	movs	r2, #5
 800188e:	4628      	mov	r0, r5
 8001890:	f00c fd62 	bl	800e358 <__multadd>
 8001894:	4601      	mov	r1, r0
 8001896:	4604      	mov	r4, r0
 8001898:	4658      	mov	r0, fp
 800189a:	f010 fb73 	bl	8011f84 <__mcmp>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f73f adb8 	bgt.w	8001414 <_dtoa_r+0x4cc>
 80018a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80018a6:	9f03      	ldr	r7, [sp, #12]
 80018a8:	ea6f 0a03 	mvn.w	sl, r3
 80018ac:	f04f 0800 	mov.w	r8, #0
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f00c fd2e 	bl	800e314 <_Bfree>
 80018b8:	2e00      	cmp	r6, #0
 80018ba:	f43f aea7 	beq.w	800160c <_dtoa_r+0x6c4>
 80018be:	f1b8 0f00 	cmp.w	r8, #0
 80018c2:	d005      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c4:	45b0      	cmp	r8, r6
 80018c6:	d003      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c8:	4641      	mov	r1, r8
 80018ca:	4628      	mov	r0, r5
 80018cc:	f00c fd22 	bl	800e314 <_Bfree>
 80018d0:	4631      	mov	r1, r6
 80018d2:	4628      	mov	r0, r5
 80018d4:	f00c fd1e 	bl	800e314 <_Bfree>
 80018d8:	e698      	b.n	800160c <_dtoa_r+0x6c4>
 80018da:	2400      	movs	r4, #0
 80018dc:	4626      	mov	r6, r4
 80018de:	e7e1      	b.n	80018a4 <_dtoa_r+0x95c>
 80018e0:	46c2      	mov	sl, r8
 80018e2:	4626      	mov	r6, r4
 80018e4:	e596      	b.n	8001414 <_dtoa_r+0x4cc>
 80018e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fd 	beq.w	8001aec <_dtoa_r+0xba4>
 80018f2:	2f00      	cmp	r7, #0
 80018f4:	dd05      	ble.n	8001902 <_dtoa_r+0x9ba>
 80018f6:	4631      	mov	r1, r6
 80018f8:	463a      	mov	r2, r7
 80018fa:	4628      	mov	r0, r5
 80018fc:	f00c fe8a 	bl	800e614 <__lshift>
 8001900:	4606      	mov	r6, r0
 8001902:	f1b8 0f00 	cmp.w	r8, #0
 8001906:	d05c      	beq.n	80019c2 <_dtoa_r+0xa7a>
 8001908:	6871      	ldr	r1, [r6, #4]
 800190a:	4628      	mov	r0, r5
 800190c:	f00c fcc2 	bl	800e294 <_Balloc>
 8001910:	4607      	mov	r7, r0
 8001912:	b928      	cbnz	r0, 8001920 <_dtoa_r+0x9d8>
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <_dtoa_r+0xbd0>)
 8001916:	4602      	mov	r2, r0
 8001918:	f240 21ea 	movw	r1, #746	; 0x2ea
 800191c:	f7ff bb28 	b.w	8000f70 <_dtoa_r+0x28>
 8001920:	6932      	ldr	r2, [r6, #16]
 8001922:	3202      	adds	r2, #2
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	f106 010c 	add.w	r1, r6, #12
 800192a:	300c      	adds	r0, #12
 800192c:	f010 f929 	bl	8011b82 <memcpy>
 8001930:	2201      	movs	r2, #1
 8001932:	4639      	mov	r1, r7
 8001934:	4628      	mov	r0, r5
 8001936:	f00c fe6d 	bl	800e614 <__lshift>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	9308      	str	r3, [sp, #32]
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	444b      	add	r3, r9
 8001944:	930a      	str	r3, [sp, #40]	; 0x28
 8001946:	9b04      	ldr	r3, [sp, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	46b0      	mov	r8, r6
 800194e:	9309      	str	r3, [sp, #36]	; 0x24
 8001950:	4606      	mov	r6, r0
 8001952:	9b08      	ldr	r3, [sp, #32]
 8001954:	4621      	mov	r1, r4
 8001956:	3b01      	subs	r3, #1
 8001958:	4658      	mov	r0, fp
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	f010 fa3e 	bl	8011ddc <quorem>
 8001960:	4603      	mov	r3, r0
 8001962:	3330      	adds	r3, #48	; 0x30
 8001964:	9006      	str	r0, [sp, #24]
 8001966:	4641      	mov	r1, r8
 8001968:	4658      	mov	r0, fp
 800196a:	930b      	str	r3, [sp, #44]	; 0x2c
 800196c:	f010 fb0a 	bl	8011f84 <__mcmp>
 8001970:	4632      	mov	r2, r6
 8001972:	4681      	mov	r9, r0
 8001974:	4621      	mov	r1, r4
 8001976:	4628      	mov	r0, r5
 8001978:	f00c febc 	bl	800e6f4 <__mdiff>
 800197c:	68c2      	ldr	r2, [r0, #12]
 800197e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001980:	4607      	mov	r7, r0
 8001982:	bb02      	cbnz	r2, 80019c6 <_dtoa_r+0xa7e>
 8001984:	4601      	mov	r1, r0
 8001986:	4658      	mov	r0, fp
 8001988:	f010 fafc 	bl	8011f84 <__mcmp>
 800198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800198e:	4602      	mov	r2, r0
 8001990:	4639      	mov	r1, r7
 8001992:	4628      	mov	r0, r5
 8001994:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001998:	f00c fcbc 	bl	800e314 <_Bfree>
 800199c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800199e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019a0:	9f08      	ldr	r7, [sp, #32]
 80019a2:	ea43 0102 	orr.w	r1, r3, r2
 80019a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019ac:	d10d      	bne.n	80019ca <_dtoa_r+0xa82>
 80019ae:	2b39      	cmp	r3, #57	; 0x39
 80019b0:	d029      	beq.n	8001a06 <_dtoa_r+0xabe>
 80019b2:	f1b9 0f00 	cmp.w	r9, #0
 80019b6:	dd01      	ble.n	80019bc <_dtoa_r+0xa74>
 80019b8:	9b06      	ldr	r3, [sp, #24]
 80019ba:	3331      	adds	r3, #49	; 0x31
 80019bc:	9a04      	ldr	r2, [sp, #16]
 80019be:	7013      	strb	r3, [r2, #0]
 80019c0:	e776      	b.n	80018b0 <_dtoa_r+0x968>
 80019c2:	4630      	mov	r0, r6
 80019c4:	e7b9      	b.n	800193a <_dtoa_r+0x9f2>
 80019c6:	2201      	movs	r2, #1
 80019c8:	e7e2      	b.n	8001990 <_dtoa_r+0xa48>
 80019ca:	f1b9 0f00 	cmp.w	r9, #0
 80019ce:	db06      	blt.n	80019de <_dtoa_r+0xa96>
 80019d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80019d2:	ea41 0909 	orr.w	r9, r1, r9
 80019d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019d8:	ea59 0101 	orrs.w	r1, r9, r1
 80019dc:	d120      	bne.n	8001a20 <_dtoa_r+0xad8>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	ddec      	ble.n	80019bc <_dtoa_r+0xa74>
 80019e2:	4659      	mov	r1, fp
 80019e4:	2201      	movs	r2, #1
 80019e6:	4628      	mov	r0, r5
 80019e8:	9308      	str	r3, [sp, #32]
 80019ea:	f00c fe13 	bl	800e614 <__lshift>
 80019ee:	4621      	mov	r1, r4
 80019f0:	4683      	mov	fp, r0
 80019f2:	f010 fac7 	bl	8011f84 <__mcmp>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	9b08      	ldr	r3, [sp, #32]
 80019fa:	dc02      	bgt.n	8001a02 <_dtoa_r+0xaba>
 80019fc:	d1de      	bne.n	80019bc <_dtoa_r+0xa74>
 80019fe:	07da      	lsls	r2, r3, #31
 8001a00:	d5dc      	bpl.n	80019bc <_dtoa_r+0xa74>
 8001a02:	2b39      	cmp	r3, #57	; 0x39
 8001a04:	d1d8      	bne.n	80019b8 <_dtoa_r+0xa70>
 8001a06:	9a04      	ldr	r2, [sp, #16]
 8001a08:	2339      	movs	r3, #57	; 0x39
 8001a0a:	7013      	strb	r3, [r2, #0]
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	461f      	mov	r7, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001a16:	2a39      	cmp	r2, #57	; 0x39
 8001a18:	d050      	beq.n	8001abc <_dtoa_r+0xb74>
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e747      	b.n	80018b0 <_dtoa_r+0x968>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dd03      	ble.n	8001a2c <_dtoa_r+0xae4>
 8001a24:	2b39      	cmp	r3, #57	; 0x39
 8001a26:	d0ee      	beq.n	8001a06 <_dtoa_r+0xabe>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	e7c7      	b.n	80019bc <_dtoa_r+0xa74>
 8001a2c:	9a08      	ldr	r2, [sp, #32]
 8001a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d02a      	beq.n	8001a8e <_dtoa_r+0xb46>
 8001a38:	4659      	mov	r1, fp
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f00c fc8a 	bl	800e358 <__multadd>
 8001a44:	45b0      	cmp	r8, r6
 8001a46:	4683      	mov	fp, r0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 020a 	mov.w	r2, #10
 8001a50:	4641      	mov	r1, r8
 8001a52:	4628      	mov	r0, r5
 8001a54:	d107      	bne.n	8001a66 <_dtoa_r+0xb1e>
 8001a56:	f00c fc7f 	bl	800e358 <__multadd>
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	9b08      	ldr	r3, [sp, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	9308      	str	r3, [sp, #32]
 8001a64:	e775      	b.n	8001952 <_dtoa_r+0xa0a>
 8001a66:	f00c fc77 	bl	800e358 <__multadd>
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	2300      	movs	r3, #0
 8001a70:	220a      	movs	r2, #10
 8001a72:	4628      	mov	r0, r5
 8001a74:	f00c fc70 	bl	800e358 <__multadd>
 8001a78:	4606      	mov	r6, r0
 8001a7a:	e7f0      	b.n	8001a5e <_dtoa_r+0xb16>
 8001a7c:	f1b9 0f00 	cmp.w	r9, #0
 8001a80:	9a03      	ldr	r2, [sp, #12]
 8001a82:	bfcc      	ite	gt
 8001a84:	464f      	movgt	r7, r9
 8001a86:	2701      	movle	r7, #1
 8001a88:	4417      	add	r7, r2
 8001a8a:	f04f 0800 	mov.w	r8, #0
 8001a8e:	4659      	mov	r1, fp
 8001a90:	2201      	movs	r2, #1
 8001a92:	4628      	mov	r0, r5
 8001a94:	9308      	str	r3, [sp, #32]
 8001a96:	f00c fdbd 	bl	800e614 <__lshift>
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4683      	mov	fp, r0
 8001a9e:	f010 fa71 	bl	8011f84 <__mcmp>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dcb2      	bgt.n	8001a0c <_dtoa_r+0xac4>
 8001aa6:	d102      	bne.n	8001aae <_dtoa_r+0xb66>
 8001aa8:	9b08      	ldr	r3, [sp, #32]
 8001aaa:	07db      	lsls	r3, r3, #31
 8001aac:	d4ae      	bmi.n	8001a0c <_dtoa_r+0xac4>
 8001aae:	463b      	mov	r3, r7
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001ab6:	2a30      	cmp	r2, #48	; 0x30
 8001ab8:	d0fa      	beq.n	8001ab0 <_dtoa_r+0xb68>
 8001aba:	e6f9      	b.n	80018b0 <_dtoa_r+0x968>
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1a5      	bne.n	8001a0e <_dtoa_r+0xac6>
 8001ac2:	f10a 0a01 	add.w	sl, sl, #1
 8001ac6:	2331      	movs	r3, #49	; 0x31
 8001ac8:	e779      	b.n	80019be <_dtoa_r+0xa76>
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <_dtoa_r+0xbd4>)
 8001acc:	f7ff baa7 	b.w	800101e <_dtoa_r+0xd6>
 8001ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aa80 	bne.w	8000fd8 <_dtoa_r+0x90>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_dtoa_r+0xbd8>)
 8001ada:	f7ff baa0 	b.w	800101e <_dtoa_r+0xd6>
 8001ade:	f1b9 0f00 	cmp.w	r9, #0
 8001ae2:	dc03      	bgt.n	8001aec <_dtoa_r+0xba4>
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f73f aecb 	bgt.w	8001882 <_dtoa_r+0x93a>
 8001aec:	9f03      	ldr	r7, [sp, #12]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4658      	mov	r0, fp
 8001af2:	f010 f973 	bl	8011ddc <quorem>
 8001af6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001afa:	f807 3b01 	strb.w	r3, [r7], #1
 8001afe:	9a03      	ldr	r2, [sp, #12]
 8001b00:	1aba      	subs	r2, r7, r2
 8001b02:	4591      	cmp	r9, r2
 8001b04:	ddba      	ble.n	8001a7c <_dtoa_r+0xb34>
 8001b06:	4659      	mov	r1, fp
 8001b08:	2300      	movs	r3, #0
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f00c fc23 	bl	800e358 <__multadd>
 8001b12:	4683      	mov	fp, r0
 8001b14:	e7eb      	b.n	8001aee <_dtoa_r+0xba6>
 8001b16:	bf00      	nop
 8001b18:	080141c7 	.word	0x080141c7
 8001b1c:	08014125 	.word	0x08014125
 8001b20:	08014149 	.word	0x08014149

08001b24 <update_indication_task>:
    }
}


_Noreturn void update_indication_task(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b094      	sub	sp, #80	; 0x50
    uint8_t cnt = 0;
    uint8_t start_led_pos = 0;
    uint8_t end_led_pos = 0;
    uint8_t indication_type = 0;
    struct led_hsv color_hsv = {0};
 8001b28:	2400      	movs	r4, #0
 8001b2a:	9413      	str	r4, [sp, #76]	; 0x4c
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4621      	mov	r1, r4
 8001b30:	a803      	add	r0, sp, #12
 8001b32:	f010 f834 	bl	8011b9e <memset>
    struct led_strip_indicate_s *strip_indicate = {0};
 8001b36:	9402      	str	r4, [sp, #8]
    union led_strip_state_u led_strip_state = {0};
 8001b38:	9400      	str	r4, [sp, #0]
 8001b3a:	9401      	str	r4, [sp, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8001b3c:	4d81      	ldr	r5, [pc, #516]	; (8001d44 <update_indication_task+0x220>)
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f010 f810 	bl	8011b64 <z_impl_k_poll_signal_init>

    k_poll_signal_init(&signal_indicate);
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	2101      	movs	r1, #1
 8001b4a:	487f      	ldr	r0, [pc, #508]	; (8001d48 <update_indication_task+0x224>)
 8001b4c:	f00f ffe2 	bl	8011b14 <k_poll_event_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8001b50:	2101      	movs	r1, #1
 8001b52:	4628      	mov	r0, r5
 8001b54:	f00b ff1e 	bl	800d994 <z_impl_k_poll_signal_raise>
 8001b58:	e0c7      	b.n	8001cea <update_indication_task+0x1c6>
            /* If "blink" set -> we blinked
             * Esle -> set on strip connection quality and people number */
            switch (indication_type) {
                case INDICATION_TYPE_STATUS_INFO:
                    cnt = start_led_pos;
                    if (led_strip_state.status.con_status > 0)
 8001b5a:	9e00      	ldr	r6, [sp, #0]
 8001b5c:	2e00      	cmp	r6, #0
 8001b5e:	dc0a      	bgt.n	8001b76 <update_indication_task+0x52>
                        set_con_status_pixels(led_strip_state.status.con_status, &cnt);

                    if (led_strip_state.status.people_num > 0)
 8001b60:	9e01      	ldr	r6, [sp, #4]
 8001b62:	2e00      	cmp	r6, #0
 8001b64:	dc2d      	bgt.n	8001bc2 <update_indication_task+0x9e>
                        set_people_num_pixels(led_strip_state.status.people_num, &cnt);

                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001b66:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <update_indication_task+0x228>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
 8001b6a:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	4977      	ldr	r1, [pc, #476]	; (8001d50 <update_indication_task+0x22c>)
 8001b72:	4798      	blx	r3
 8001b74:	e0b9      	b.n	8001cea <update_indication_task+0x1c6>
                        set_con_status_pixels(led_strip_state.status.con_status, &cnt);
 8001b76:	b2f6      	uxtb	r6, r6
                    cnt = start_led_pos;
 8001b78:	4625      	mov	r5, r4
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001b7a:	e007      	b.n	8001b8c <update_indication_task+0x68>
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 8001b7c:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <update_indication_task+0x22c>)
 8001b7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001b82:	4874      	ldr	r0, [pc, #464]	; (8001d54 <update_indication_task+0x230>)
 8001b84:	f009 ff90 	bl	800baa8 <led_hsv2rgb>
        (*pos)++;
 8001b88:	3501      	adds	r5, #1
 8001b8a:	b2ed      	uxtb	r5, r5
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	1de3      	adds	r3, r4, #7
 8001b90:	4629      	mov	r1, r5
 8001b92:	429d      	cmp	r5, r3
 8001b94:	dc13      	bgt.n	8001bbe <update_indication_task+0x9a>
        if (*pos < start_pos + con_status) {
 8001b96:	1933      	adds	r3, r6, r4
 8001b98:	42ab      	cmp	r3, r5
 8001b9a:	dd09      	ble.n	8001bb0 <update_indication_task+0x8c>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8001b9c:	3201      	adds	r2, #1
 8001b9e:	4291      	cmp	r1, r2
 8001ba0:	dcec      	bgt.n	8001b7c <update_indication_task+0x58>
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <update_indication_task+0x22c>)
 8001ba4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001ba8:	486b      	ldr	r0, [pc, #428]	; (8001d58 <update_indication_task+0x234>)
 8001baa:	f009 ff7d 	bl	800baa8 <led_hsv2rgb>
 8001bae:	e7eb      	b.n	8001b88 <update_indication_task+0x64>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <update_indication_task+0x22c>)
 8001bb2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001bb6:	4869      	ldr	r0, [pc, #420]	; (8001d5c <update_indication_task+0x238>)
 8001bb8:	f009 ff76 	bl	800baa8 <led_hsv2rgb>
 8001bbc:	e7e4      	b.n	8001b88 <update_indication_task+0x64>
 8001bbe:	462c      	mov	r4, r5
 8001bc0:	e7ce      	b.n	8001b60 <update_indication_task+0x3c>
                        set_people_num_pixels(led_strip_state.status.people_num, &cnt);
 8001bc2:	b2f6      	uxtb	r6, r6
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001bc4:	4625      	mov	r5, r4
 8001bc6:	e007      	b.n	8001bd8 <update_indication_task+0xb4>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[*pos]);
 8001bc8:	4961      	ldr	r1, [pc, #388]	; (8001d50 <update_indication_task+0x22c>)
 8001bca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001bce:	4863      	ldr	r0, [pc, #396]	; (8001d5c <update_indication_task+0x238>)
 8001bd0:	f009 ff6a 	bl	800baa8 <led_hsv2rgb>
        (*pos)++;
 8001bd4:	3501      	adds	r5, #1
 8001bd6:	b2ed      	uxtb	r5, r5
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001bd8:	1d63      	adds	r3, r4, #5
 8001bda:	462a      	mov	r2, r5
 8001bdc:	429d      	cmp	r5, r3
 8001bde:	dcc2      	bgt.n	8001b66 <update_indication_task+0x42>
        if (((*pos) - start_pos) < people_num)
 8001be0:	1b2b      	subs	r3, r5, r4
 8001be2:	42b3      	cmp	r3, r6
 8001be4:	daf0      	bge.n	8001bc8 <update_indication_task+0xa4>
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 8001be6:	495a      	ldr	r1, [pc, #360]	; (8001d50 <update_indication_task+0x22c>)
 8001be8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001bec:	485c      	ldr	r0, [pc, #368]	; (8001d60 <update_indication_task+0x23c>)
 8001bee:	f009 ff5b 	bl	800baa8 <led_hsv2rgb>
 8001bf2:	e7ef      	b.n	8001bd4 <update_indication_task+0xb0>
                    break;
                case INDICATION_TYPE_BLINK:
                    switch (led_strip_state.strip_param.color) {
 8001bf4:	f89d 3000 	ldrb.w	r3, [sp]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d821      	bhi.n	8001c40 <update_indication_task+0x11c>
 8001bfc:	e8df f003 	tbb	[pc, r3]
 8001c00:	0f0b0703 	.word	0x0f0b0703
 8001c04:	13          	.byte	0x13
 8001c05:	00          	.byte	0x00
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <update_indication_task+0x234>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c0c:	e018      	b.n	8001c40 <update_indication_task+0x11c>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 8001c0e:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <update_indication_task+0x230>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c14:	e014      	b.n	8001c40 <update_indication_task+0x11c>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <update_indication_task+0x23c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c1c:	e010      	b.n	8001c40 <update_indication_task+0x11c>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <update_indication_task+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c24:	e00c      	b.n	8001c40 <update_indication_task+0x11c>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <update_indication_task+0x244>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 8001c2c:	e008      	b.n	8001c40 <update_indication_task+0x11c>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8001c2e:	1c65      	adds	r5, r4, #1
 8001c30:	b2ed      	uxtb	r5, r5
 8001c32:	ab03      	add	r3, sp, #12
 8001c34:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8001c38:	a813      	add	r0, sp, #76	; 0x4c
 8001c3a:	f009 ff35 	bl	800baa8 <led_hsv2rgb>
 8001c3e:	462c      	mov	r4, r5
                    while (cnt < end_led_pos) {
 8001c40:	42a6      	cmp	r6, r4
 8001c42:	d8f4      	bhi.n	8001c2e <update_indication_task+0x10a>
                    }

                    cnt = 0;
 8001c44:	2400      	movs	r4, #0
 8001c46:	e019      	b.n	8001c7c <update_indication_task+0x158>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
                        led_strip_update_rgb(strip_dev, color_rgb, STRIP_NUM_PIXELS);
 8001c48:	4d40      	ldr	r5, [pc, #256]	; (8001d4c <update_indication_task+0x228>)
 8001c4a:	6828      	ldr	r0, [r5, #0]
	const struct led_strip_driver_api *api =
 8001c4c:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	a903      	add	r1, sp, #12
 8001c54:	4798      	blx	r3
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
 8001c56:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001c5a:	2700      	movs	r7, #0
	return z_impl_k_sleep(timeout);
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	4639      	mov	r1, r7
 8001c60:	f00b f95e 	bl	800cf20 <z_impl_k_sleep>
                        led_strip_update_rgb(strip_dev, empty_rgb, STRIP_NUM_PIXELS);
 8001c64:	6828      	ldr	r0, [r5, #0]
	const struct led_strip_driver_api *api =
 8001c66:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	493f      	ldr	r1, [pc, #252]	; (8001d6c <update_indication_task+0x248>)
 8001c6e:	4798      	blx	r3
 8001c70:	4630      	mov	r0, r6
 8001c72:	4639      	mov	r1, r7
 8001c74:	f00b f954 	bl	800cf20 <z_impl_k_sleep>
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
                        cnt++;
 8001c78:	3401      	adds	r4, #1
 8001c7a:	b2e4      	uxtb	r4, r4
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 8001c7c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	d8e1      	bhi.n	8001c48 <update_indication_task+0x124>
                    }
                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <update_indication_task+0x228>)
 8001c86:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001c88:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4930      	ldr	r1, [pc, #192]	; (8001d50 <update_indication_task+0x22c>)
 8001c90:	4798      	blx	r3
 8001c92:	e02a      	b.n	8001cea <update_indication_task+0x1c6>
                    break;
                case INDICATION_TYPE_STATIC_COLOR:
                    switch (led_strip_state.strip_param.color) {
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <update_indication_task+0x234>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c9a:	e018      	b.n	8001cce <update_indication_task+0x1aa>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <update_indication_task+0x230>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001ca2:	e014      	b.n	8001cce <update_indication_task+0x1aa>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <update_indication_task+0x23c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001caa:	e010      	b.n	8001cce <update_indication_task+0x1aa>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <update_indication_task+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001cb2:	e00c      	b.n	8001cce <update_indication_task+0x1aa>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <update_indication_task+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 8001cba:	e008      	b.n	8001cce <update_indication_task+0x1aa>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8001cbc:	1c65      	adds	r5, r4, #1
 8001cbe:	b2ed      	uxtb	r5, r5
 8001cc0:	ab03      	add	r3, sp, #12
 8001cc2:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8001cc6:	a813      	add	r0, sp, #76	; 0x4c
 8001cc8:	f009 feee 	bl	800baa8 <led_hsv2rgb>
 8001ccc:	462c      	mov	r4, r5
                    while (cnt < end_led_pos) {
 8001cce:	42a6      	cmp	r6, r4
 8001cd0:	d8f4      	bhi.n	8001cbc <update_indication_task+0x198>
                    }

                    led_strip_update_rgb(strip_dev, color_rgb, STRIP_NUM_PIXELS);
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <update_indication_task+0x228>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001cd6:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2210      	movs	r2, #16
 8001cdc:	a903      	add	r1, sp, #12
 8001cde:	4798      	blx	r3
 8001ce0:	e003      	b.n	8001cea <update_indication_task+0x1c6>
 8001ce2:	2064      	movs	r0, #100	; 0x64
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f00b f91b 	bl	800cf20 <z_impl_k_sleep>
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <update_indication_task+0x24c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f7      	beq.n	8001ce2 <update_indication_task+0x1be>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	a902      	add	r1, sp, #8
 8001cf8:	481d      	ldr	r0, [pc, #116]	; (8001d70 <update_indication_task+0x24c>)
 8001cfa:	f00a fa57 	bl	800c1ac <z_impl_k_msgq_get>
            led_strip_state = strip_indicate->led_strip_state;
 8001cfe:	9b02      	ldr	r3, [sp, #8]
 8001d00:	466a      	mov	r2, sp
 8001d02:	1d19      	adds	r1, r3, #4
 8001d04:	c903      	ldmia	r1, {r0, r1}
 8001d06:	e882 0003 	stmia.w	r2, {r0, r1}
            start_led_pos = strip_indicate->start_led_pos;
 8001d0a:	785c      	ldrb	r4, [r3, #1]
            end_led_pos = strip_indicate->end_led_pos;
 8001d0c:	789e      	ldrb	r6, [r3, #2]
            indication_type = strip_indicate->indication_type;
 8001d0e:	781b      	ldrb	r3, [r3, #0]
            switch (indication_type) {
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f43f af22 	beq.w	8001b5a <update_indication_task+0x36>
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	f43f af6c 	beq.w	8001bf4 <update_indication_task+0xd0>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e4      	bne.n	8001cea <update_indication_task+0x1c6>
                    switch (led_strip_state.strip_param.color) {
 8001d20:	f89d 3000 	ldrb.w	r3, [sp]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d8d2      	bhi.n	8001cce <update_indication_task+0x1aa>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <update_indication_task+0x20c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001c95 	.word	0x08001c95
 8001d34:	08001c9d 	.word	0x08001c9d
 8001d38:	08001ca5 	.word	0x08001ca5
 8001d3c:	08001cad 	.word	0x08001cad
 8001d40:	08001cb5 	.word	0x08001cb5
 8001d44:	20000f9c 	.word	0x20000f9c
 8001d48:	20000f48 	.word	0x20000f48
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000f5c 	.word	0x20000f5c
 8001d54:	0801297c 	.word	0x0801297c
 8001d58:	08012984 	.word	0x08012984
 8001d5c:	08012978 	.word	0x08012978
 8001d60:	08012974 	.word	0x08012974
 8001d64:	08012980 	.word	0x08012980
 8001d68:	0801298c 	.word	0x0801298c
 8001d6c:	20000f08 	.word	0x20000f08
 8001d70:	200005a4 	.word	0x200005a4

08001d74 <_Z28button_anti_dream_pressed_cbPK6deviceP13gpio_callbackj>:
    k_work_submit(&work_button_pressed);
}


void button_anti_dream_pressed_cb(const struct device* dev, struct gpio_callback* cb, uint32_t pins)
{
 8001d74:	b508      	push	{r3, lr}
    LOG_DBG("Button anti-dream pressed");
    irq_gpio_dev = &button_anti_dream;
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <_Z28button_anti_dream_pressed_cbPK6deviceP13gpio_callbackj+0x10>)
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <_Z28button_anti_dream_pressed_cbPK6deviceP13gpio_callbackj+0x14>)
 8001d7a:	601a      	str	r2, [r3, #0]
    k_work_submit(&work_button_pressed);
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <_Z28button_anti_dream_pressed_cbPK6deviceP13gpio_callbackj+0x18>)
 8001d7e:	f00a fcf1 	bl	800c764 <k_work_submit>

}
 8001d82:	bd08      	pop	{r3, pc}
 8001d84:	20000ffc 	.word	0x20000ffc
 8001d88:	20000024 	.word	0x20000024
 8001d8c:	20001004 	.word	0x20001004

08001d90 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj>:
{
 8001d90:	b508      	push	{r3, lr}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001d92:	f3bf 8f5b 	dmb	ish
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x20>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f3bf 8f5b 	dmb	ish
    if (atomic_get(&anti_dream_active)) {
 8001d9e:	b103      	cbz	r3, 8001da2 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x12>
}
 8001da0:	bd08      	pop	{r3, pc}
    irq_gpio_dev = &button_alarm;
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x24>)
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x28>)
 8001da6:	601a      	str	r2, [r3, #0]
    k_work_submit(&work_button_pressed);
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x2c>)
 8001daa:	f00a fcdb 	bl	800c764 <k_work_submit>
 8001dae:	e7f7      	b.n	8001da0 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x10>
 8001db0:	20000fec 	.word	0x20000fec
 8001db4:	20000ffc 	.word	0x20000ffc
 8001db8:	2000001c 	.word	0x2000001c
 8001dbc:	20001004 	.word	0x20001004

08001dc0 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj>:
{
 8001dc0:	b508      	push	{r3, lr}
 8001dc2:	f3bf 8f5b 	dmb	ish
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x20>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f3bf 8f5b 	dmb	ish
    if (atomic_get(&anti_dream_active)) {
 8001dce:	b103      	cbz	r3, 8001dd2 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x12>
}
 8001dd0:	bd08      	pop	{r3, pc}
    irq_gpio_dev = &button_train_passed;
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x24>)
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x28>)
 8001dd6:	601a      	str	r2, [r3, #0]
    k_work_submit(&work_button_pressed);
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x2c>)
 8001dda:	f00a fcc3 	bl	800c764 <k_work_submit>
 8001dde:	e7f7      	b.n	8001dd0 <_Z28button_train_pass_pressed_cbPK6deviceP13gpio_callbackj+0x10>
 8001de0:	20000fec 	.word	0x20000fec
 8001de4:	20000ffc 	.word	0x20000ffc
 8001de8:	2000002c 	.word	0x2000002c
 8001dec:	20001004 	.word	0x20001004

08001df0 <_ZL11system_initv>:
{
 8001df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df4:	b08f      	sub	sp, #60	; 0x3c
    volatile int rc = -1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfa:	930d      	str	r3, [sp, #52]	; 0x34
    struct led_strip_indicate_s *strip_ind = &status_ind;
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <_ZL11system_initv+0x180>)
 8001dfe:	930c      	str	r3, [sp, #48]	; 0x30
    struct k_work_delayable dwork_anti_dream = {{{nullptr}}};
 8001e00:	2230      	movs	r2, #48	; 0x30
 8001e02:	2100      	movs	r1, #0
 8001e04:	4668      	mov	r0, sp
 8001e06:	f00f feca 	bl	8011b9e <memset>
    buzzer_dev = DEVICE_DT_GET(PWM_CTLR);
 8001e0a:	485a      	ldr	r0, [pc, #360]	; (8001f74 <_ZL11system_initv+0x184>)
 8001e0c:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <_ZL11system_initv+0x188>)
 8001e0e:	6018      	str	r0, [r3, #0]
 8001e10:	f00f fa50 	bl	80112b4 <z_device_is_ready>
    if (!device_is_ready(buzzer_dev)) {
 8001e14:	2800      	cmp	r0, #0
 8001e16:	f000 808f 	beq.w	8001f38 <_ZL11system_initv+0x148>
     if (!device_is_ready(button_alarm.port)) {
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <_ZL11system_initv+0x18c>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f00f fa49 	bl	80112b4 <z_device_is_ready>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	f000 808f 	beq.w	8001f46 <_ZL11system_initv+0x156>
     if (!device_is_ready(button_anti_dream.port)) {
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <_ZL11system_initv+0x190>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f00f fa42 	bl	80112b4 <z_device_is_ready>
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f000 808f 	beq.w	8001f54 <_ZL11system_initv+0x164>
    if (!device_is_ready(button_train_passed.port)) {
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <_ZL11system_initv+0x194>)
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	f00f fa3b 	bl	80112b4 <z_device_is_ready>
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	f000 808f 	beq.w	8001f62 <_ZL11system_initv+0x172>
    gpio_pin_configure_dt(&button_alarm, GPIO_INPUT);
 8001e44:	4f4d      	ldr	r7, [pc, #308]	; (8001f7c <_ZL11system_initv+0x18c>)
 8001e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4a:	4638      	mov	r0, r7
 8001e4c:	f00d f9af 	bl	800f1ae <gpio_pin_configure_dt>
    gpio_pin_configure_dt(&button_anti_dream, GPIO_INPUT);
 8001e50:	4e4b      	ldr	r6, [pc, #300]	; (8001f80 <_ZL11system_initv+0x190>)
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	4630      	mov	r0, r6
 8001e58:	f00d f9a9 	bl	800f1ae <gpio_pin_configure_dt>
    gpio_pin_configure_dt(&button_train_passed, GPIO_INPUT);
 8001e5c:	4d49      	ldr	r5, [pc, #292]	; (8001f84 <_ZL11system_initv+0x194>)
 8001e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e62:	4628      	mov	r0, r5
 8001e64:	f00d f9a3 	bl	800f1ae <gpio_pin_configure_dt>
    gpio_pin_interrupt_configure_dt(&button_alarm, GPIO_INT_EDGE_TO_ACTIVE);
 8001e68:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
 8001e6c:	4638      	mov	r0, r7
 8001e6e:	f00d f986 	bl	800f17e <gpio_pin_interrupt_configure_dt>
    gpio_pin_interrupt_configure_dt(&button_anti_dream, GPIO_INT_EDGE_TO_ACTIVE);
 8001e72:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
 8001e76:	4630      	mov	r0, r6
 8001e78:	f00d f981 	bl	800f17e <gpio_pin_interrupt_configure_dt>
    gpio_pin_interrupt_configure_dt(&button_train_passed, GPIO_INT_EDGE_TO_ACTIVE);
 8001e7c:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
 8001e80:	4628      	mov	r0, r5
 8001e82:	f00d f97c 	bl	800f17e <gpio_pin_interrupt_configure_dt>
    gpio_init_callback(&button_alarm_cb, button_alarm_pressed_cb, BIT(button_alarm.pin));
 8001e86:	793b      	ldrb	r3, [r7, #4]
 8001e88:	2401      	movs	r4, #1
 8001e8a:	fa04 f303 	lsl.w	r3, r4, r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001e8e:	493e      	ldr	r1, [pc, #248]	; (8001f88 <_ZL11system_initv+0x198>)
 8001e90:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <_ZL11system_initv+0x19c>)
 8001e92:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8001e94:	608b      	str	r3, [r1, #8]
    gpio_init_callback(&button_anti_dream_cb, button_anti_dream_pressed_cb, BIT(button_anti_dream.pin));
 8001e96:	7933      	ldrb	r3, [r6, #4]
 8001e98:	fa04 f303 	lsl.w	r3, r4, r3
	callback->handler = handler;
 8001e9c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8001f90 <_ZL11system_initv+0x1a0>
 8001ea0:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <_ZL11system_initv+0x1a4>)
 8001ea2:	f8c9 2004 	str.w	r2, [r9, #4]
	callback->pin_mask = pin_mask;
 8001ea6:	f8c9 3008 	str.w	r3, [r9, #8]
    gpio_init_callback(&button_train_passed_cb, button_train_pass_pressed_cb, BIT(button_train_passed.pin));
 8001eaa:	792b      	ldrb	r3, [r5, #4]
 8001eac:	fa04 f303 	lsl.w	r3, r4, r3
	callback->handler = handler;
 8001eb0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001f98 <_ZL11system_initv+0x1a8>
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <_ZL11system_initv+0x1ac>)
 8001eb6:	f8c8 2004 	str.w	r2, [r8, #4]
	callback->pin_mask = pin_mask;
 8001eba:	f8c8 3008 	str.w	r3, [r8, #8]
    gpio_add_callback(button_alarm.port, &button_alarm_cb);
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f00d f9a1 	bl	800f206 <gpio_add_callback>
    gpio_add_callback(button_anti_dream.port, &button_anti_dream_cb);
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	6830      	ldr	r0, [r6, #0]
 8001ec8:	f00d f99d 	bl	800f206 <gpio_add_callback>
    gpio_add_callback(button_train_passed.port, &button_train_passed_cb);
 8001ecc:	4641      	mov	r1, r8
 8001ece:	6828      	ldr	r0, [r5, #0]
 8001ed0:	f00d f999 	bl	800f206 <gpio_add_callback>
    k_work_init(&work_buzzer, work_buzzer_handler);
 8001ed4:	4d32      	ldr	r5, [pc, #200]	; (8001fa0 <_ZL11system_initv+0x1b0>)
 8001ed6:	4933      	ldr	r1, [pc, #204]	; (8001fa4 <_ZL11system_initv+0x1b4>)
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f00f facf 	bl	801147c <k_work_init>
    k_work_init(&work_button_pressed, work_button_pressed_handler);
 8001ede:	4932      	ldr	r1, [pc, #200]	; (8001fa8 <_ZL11system_initv+0x1b8>)
 8001ee0:	4832      	ldr	r0, [pc, #200]	; (8001fac <_ZL11system_initv+0x1bc>)
 8001ee2:	f00f facb 	bl	801147c <k_work_init>
    k_work_init_delayable(&dwork_anti_dream, dwork_anti_dream_handler); /* For anti-dream */
 8001ee6:	4932      	ldr	r1, [pc, #200]	; (8001fb0 <_ZL11system_initv+0x1c0>)
 8001ee8:	4668      	mov	r0, sp
 8001eea:	f00f faee 	bl	80114ca <k_work_init_delayable>
    k_work_init_delayable(&dwork_enable_ind, dwork_enable_ind_handler); /* For enable and disable indication */
 8001eee:	4931      	ldr	r1, [pc, #196]	; (8001fb4 <_ZL11system_initv+0x1c4>)
 8001ef0:	4831      	ldr	r0, [pc, #196]	; (8001fb8 <_ZL11system_initv+0x1c8>)
 8001ef2:	f00f faea 	bl	80114ca <k_work_init_delayable>
    k_timer_init(&periodic_timer, periodic_timer_handler, nullptr);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4930      	ldr	r1, [pc, #192]	; (8001fbc <_ZL11system_initv+0x1cc>)
 8001efa:	4831      	ldr	r0, [pc, #196]	; (8001fc0 <_ZL11system_initv+0x1d0>)
 8001efc:	f00f fd75 	bl	80119ea <k_timer_init>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2300      	movs	r3, #0
 8001f04:	a90c      	add	r1, sp, #48	; 0x30
 8001f06:	482f      	ldr	r0, [pc, #188]	; (8001fc4 <_ZL11system_initv+0x1d4>)
 8001f08:	f00a f8f4 	bl	800c0f4 <z_impl_k_msgq_put>
    current_state = recv_state;
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <_ZL11system_initv+0x1d8>)
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <_ZL11system_initv+0x1dc>)
 8001f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f14:	e883 0003 	stmia.w	r3, {r0, r1}
    k_work_schedule(&dwork_anti_dream, K_MSEC(ANTI_DREAM_PERIOD));
 8001f18:	f64e 7210 	movw	r2, #61200	; 0xef10
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f00a fc66 	bl	800c7f0 <k_work_schedule>
    k_work_submit(&work_buzzer);
 8001f24:	4628      	mov	r0, r5
 8001f26:	f00a fc1d 	bl	800c764 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4828      	ldr	r0, [pc, #160]	; (8001fd0 <_ZL11system_initv+0x1e0>)
 8001f2e:	f00b fd31 	bl	800d994 <z_impl_k_poll_signal_raise>
}
 8001f32:	b00f      	add	sp, #60	; 0x3c
 8001f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sleep(timeout);
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f40:	f00a ffee 	bl	800cf20 <z_impl_k_sleep>
 8001f44:	e769      	b.n	8001e1a <_ZL11system_initv+0x2a>
 8001f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f4e:	f00a ffe7 	bl	800cf20 <z_impl_k_sleep>
 8001f52:	e769      	b.n	8001e28 <_ZL11system_initv+0x38>
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f5c:	f00a ffe0 	bl	800cf20 <z_impl_k_sleep>
 8001f60:	e769      	b.n	8001e36 <_ZL11system_initv+0x46>
 8001f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f6a:	f00a ffd9 	bl	800cf20 <z_impl_k_sleep>
 8001f6e:	e769      	b.n	8001e44 <_ZL11system_initv+0x54>
 8001f70:	200000a0 	.word	0x200000a0
 8001f74:	080123f0 	.word	0x080123f0
 8001f78:	20000ff0 	.word	0x20000ff0
 8001f7c:	2000001c 	.word	0x2000001c
 8001f80:	20000024 	.word	0x20000024
 8001f84:	2000002c 	.word	0x2000002c
 8001f88:	20000fbc 	.word	0x20000fbc
 8001f8c:	08001d91 	.word	0x08001d91
 8001f90:	20000fc8 	.word	0x20000fc8
 8001f94:	08001d75 	.word	0x08001d75
 8001f98:	20000fd4 	.word	0x20000fd4
 8001f9c:	08001dc1 	.word	0x08001dc1
 8001fa0:	20001014 	.word	0x20001014
 8001fa4:	0800290d 	.word	0x0800290d
 8001fa8:	080026b9 	.word	0x080026b9
 8001fac:	20001004 	.word	0x20001004
 8001fb0:	08001ff9 	.word	0x08001ff9
 8001fb4:	080030d1 	.word	0x080030d1
 8001fb8:	20000740 	.word	0x20000740
 8001fbc:	08001fd5 	.word	0x08001fd5
 8001fc0:	20000770 	.word	0x20000770
 8001fc4:	200005a4 	.word	0x200005a4
 8001fc8:	20000ff4 	.word	0x20000ff4
 8001fcc:	080129b4 	.word	0x080129b4
 8001fd0:	20000090 	.word	0x20000090

08001fd4 <_ZL22periodic_timer_handlerP7k_timer>:


static void periodic_timer_handler(struct k_timer *tim)
{
 8001fd4:	b508      	push	{r3, lr}
    LOG_DBG("Periodic timer handler");
//    k_msgq_put(&msgq_tx_msg_prio, &alarm_msg, K_NO_WAIT); // for debug

    current_state = transmit_state;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <_ZL22periodic_timer_handlerP7k_timer+0x18>)
 8001fd8:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_ZL22periodic_timer_handlerP7k_timer+0x1c>)
 8001fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fde:	e883 0003 	stmia.w	r3, {r0, r1}
//            indicate_cnt = 0;
//        }
//        indicate_cnt++;
//    }

    k_wakeup(modem_task_id);
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <_ZL22periodic_timer_handlerP7k_timer+0x20>)
 8001fe4:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001fe6:	f00f fc3c 	bl	8011862 <z_impl_k_wakeup>
}
 8001fea:	bd08      	pop	{r3, pc}
 8001fec:	20000ff4 	.word	0x20000ff4
 8001ff0:	080129bc 	.word	0x080129bc
 8001ff4:	080129e4 	.word	0x080129e4

08001ff8 <_ZL24dwork_anti_dream_handlerP6k_work>:


static void dwork_anti_dream_handler(struct k_work *item)
{
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	4604      	mov	r4, r0
    /*
     * Start anti-dream mode if it is not active.
     * Else anti-dream already started and anti_dream_active == true, then send anti-dream message on base station.
     * Don't start anti-dream mode if started alarm mode
     * */
    struct led_strip_indicate_s *strip_ind = nullptr;
 8001ffe:	2300      	movs	r3, #0
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f3bf 8f5b 	dmb	ish
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <_ZL24dwork_anti_dream_handlerP6k_work+0xa8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3bf 8f5b 	dmb	ish

    if (!atomic_get(&alarm_is_active)) {
 800200e:	b13b      	cbz	r3, 8002020 <_ZL24dwork_anti_dream_handlerP6k_work+0x28>
            k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
            strip_ind = &alarm_ind;
            k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
        }
    }
    k_work_reschedule(k_work_delayable_from_work(item), K_MSEC(ANTI_DREAM_PERIOD));
 8002010:	f64e 7210 	movw	r2, #61200	; 0xef10
 8002014:	2300      	movs	r3, #0
 8002016:	4620      	mov	r0, r4
 8002018:	f00a fbf2 	bl	800c800 <k_work_reschedule>
}
 800201c:	b003      	add	sp, #12
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002020:	f3bf 8f5b 	dmb	ish
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <_ZL24dwork_anti_dream_handlerP6k_work+0xac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3bf 8f5b 	dmb	ish
        if (!atomic_get(&anti_dream_active)) {
 800202c:	b9f3      	cbnz	r3, 800206c <_ZL24dwork_anti_dream_handlerP6k_work+0x74>
	return z_impl_k_poll_signal_raise(sig, result);
 800202e:	2102      	movs	r1, #2
 8002030:	481d      	ldr	r0, [pc, #116]	; (80020a8 <_ZL24dwork_anti_dream_handlerP6k_work+0xb0>)
 8002032:	f00b fcaf 	bl	800d994 <z_impl_k_poll_signal_raise>
            k_work_submit(&work_buzzer);
 8002036:	481d      	ldr	r0, [pc, #116]	; (80020ac <_ZL24dwork_anti_dream_handlerP6k_work+0xb4>)
 8002038:	f00a fb94 	bl	800c764 <k_work_submit>
            strip_ind = &anti_dream_ind;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <_ZL24dwork_anti_dream_handlerP6k_work+0xb8>)
 800203e:	9301      	str	r3, [sp, #4]
            k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
 8002040:	2600      	movs	r6, #0
 8002042:	2700      	movs	r7, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002044:	4d1b      	ldr	r5, [pc, #108]	; (80020b4 <_ZL24dwork_anti_dream_handlerP6k_work+0xbc>)
 8002046:	4632      	mov	r2, r6
 8002048:	463b      	mov	r3, r7
 800204a:	a901      	add	r1, sp, #4
 800204c:	4628      	mov	r0, r5
 800204e:	f00a f851 	bl	800c0f4 <z_impl_k_msgq_put>
            strip_ind = &alarm_ind;
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <_ZL24dwork_anti_dream_handlerP6k_work+0xc0>)
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	4632      	mov	r2, r6
 8002058:	463b      	mov	r3, r7
 800205a:	a901      	add	r1, sp, #4
 800205c:	4628      	mov	r0, r5
 800205e:	f00a f849 	bl	800c0f4 <z_impl_k_msgq_put>
            k_wakeup(update_indication_task_id);
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <_ZL24dwork_anti_dream_handlerP6k_work+0xc4>)
 8002064:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8002066:	f00f fbfc 	bl	8011862 <z_impl_k_wakeup>
}
 800206a:	e7d1      	b.n	8002010 <_ZL24dwork_anti_dream_handlerP6k_work+0x18>
            k_msgq_put(&msgq_tx_msg_prio, &anti_dream_msg, K_NO_WAIT);
 800206c:	2600      	movs	r6, #0
 800206e:	2700      	movs	r7, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002070:	4632      	mov	r2, r6
 8002072:	463b      	mov	r3, r7
 8002074:	4912      	ldr	r1, [pc, #72]	; (80020c0 <_ZL24dwork_anti_dream_handlerP6k_work+0xc8>)
 8002076:	4813      	ldr	r0, [pc, #76]	; (80020c4 <_ZL24dwork_anti_dream_handlerP6k_work+0xcc>)
 8002078:	f00a f83c 	bl	800c0f4 <z_impl_k_msgq_put>
            strip_ind = &anti_dream_ind;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <_ZL24dwork_anti_dream_handlerP6k_work+0xb8>)
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	4d0c      	ldr	r5, [pc, #48]	; (80020b4 <_ZL24dwork_anti_dream_handlerP6k_work+0xbc>)
 8002082:	4632      	mov	r2, r6
 8002084:	463b      	mov	r3, r7
 8002086:	a901      	add	r1, sp, #4
 8002088:	4628      	mov	r0, r5
 800208a:	f00a f833 	bl	800c0f4 <z_impl_k_msgq_put>
            strip_ind = &alarm_ind;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <_ZL24dwork_anti_dream_handlerP6k_work+0xc0>)
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4632      	mov	r2, r6
 8002094:	463b      	mov	r3, r7
 8002096:	a901      	add	r1, sp, #4
 8002098:	4628      	mov	r0, r5
 800209a:	f00a f82b 	bl	800c0f4 <z_impl_k_msgq_put>
 800209e:	e7b7      	b.n	8002010 <_ZL24dwork_anti_dream_handlerP6k_work+0x18>
 80020a0:	20000fe8 	.word	0x20000fe8
 80020a4:	20000fec 	.word	0x20000fec
 80020a8:	20000090 	.word	0x20000090
 80020ac:	20001014 	.word	0x20001014
 80020b0:	20000004 	.word	0x20000004
 80020b4:	200005a4 	.word	0x200005a4
 80020b8:	20000010 	.word	0x20000010
 80020bc:	08012988 	.word	0x08012988
 80020c0:	0801299c 	.word	0x0801299c
 80020c4:	20000674 	.word	0x20000674

080020c8 <modem_fun>:
    }
}


static inline int32_t modem_fun(const struct device *lora_dev, struct lora_modem_config* lora_cfg)
{
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4604      	mov	r4, r0
 80020cc:	460d      	mov	r5, r1
    struct k_msgq *cur_queue = nullptr;
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    static message_s tx_msg = {0};
    static uint8_t tx_buf[MESSAGE_LEN_IN_BYTES] = {0};
    if (current_state.state == TRANSMIT) {
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <modem_fun+0x160>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d034      	beq.n	8002140 <modem_fun+0x78>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80020d6:	4b55      	ldr	r3, [pc, #340]	; (800222c <modem_fun+0x164>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f3bf 8f5b 	dmb	ish
 80020de:	e853 1f00 	ldrex	r1, [r3]
 80020e2:	2901      	cmp	r1, #1
 80020e4:	d103      	bne.n	80020ee <modem_fun+0x26>
 80020e6:	e843 2000 	strex	r0, r2, [r3]
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d1f7      	bne.n	80020de <modem_fun+0x16>
 80020ee:	f3bf 8f5b 	dmb	ish
        current_state = *current_state.next;
        k_spin_unlock(&spin, key);
        return rc;

    } else {
        if (atomic_cas(&reconfig_modem, 1, 0)) {
 80020f2:	f040 8097 	bne.w	8002224 <modem_fun+0x15c>
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
 80020f6:	68a3      	ldr	r3, [r4, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4620      	mov	r0, r4
 80020fe:	4798      	blx	r3
            lora_recv_async(lora_dev, nullptr, nullptr);
            lora_cfg->tx = false;
 8002100:	2300      	movs	r3, #0
 8002102:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8002104:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4629      	mov	r1, r5
 800210a:	4620      	mov	r0, r4
 800210c:	4798      	blx	r3
            rc = lora_config(lora_dev, lora_cfg);
            if (!rc) {
 800210e:	4605      	mov	r5, r0
 8002110:	2800      	cmp	r0, #0
 8002112:	d177      	bne.n	8002204 <modem_fun+0x13c>
	const struct lora_driver_api *api =
 8002114:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4a45      	ldr	r2, [pc, #276]	; (8002230 <modem_fun+0x168>)
 800211a:	4946      	ldr	r1, [pc, #280]	; (8002234 <modem_fun+0x16c>)
 800211c:	4620      	mov	r0, r4
 800211e:	4798      	blx	r3
                rc = lora_recv_async(lora_dev, lora_receive_cb, lora_receive_error_timeout);
                if (rc) {
 8002120:	4605      	mov	r5, r0
 8002122:	2800      	cmp	r0, #0
 8002124:	d07a      	beq.n	800221c <modem_fun+0x154>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <modem_fun+0x164>)
 8002128:	2201      	movs	r2, #1
 800212a:	f3bf 8f5b 	dmb	ish
 800212e:	e853 1f00 	ldrex	r1, [r3]
 8002132:	e843 2000 	strex	r0, r2, [r3]
 8002136:	2800      	cmp	r0, #0
 8002138:	d1f9      	bne.n	800212e <modem_fun+0x66>
 800213a:	f3bf 8f5b 	dmb	ish
 800213e:	e06d      	b.n	800221c <modem_fun+0x154>
        if (!proc_tx_data(cur_queue, tx_buf, sizeof(tx_buf), &tx_msg)) {
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <modem_fun+0x170>)
 8002142:	2202      	movs	r2, #2
 8002144:	493d      	ldr	r1, [pc, #244]	; (800223c <modem_fun+0x174>)
 8002146:	2000      	movs	r0, #0
 8002148:	f000 fec4 	bl	8002ed4 <proc_tx_data>
 800214c:	2800      	cmp	r0, #0
 800214e:	d067      	beq.n	8002220 <modem_fun+0x158>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002150:	f04f 0310 	mov.w	r3, #16
 8002154:	f3ef 8211 	mrs	r2, BASEPRI
 8002158:	f383 8812 	msr	BASEPRI_MAX, r3
 800215c:	f3bf 8f6f 	isb	sy
        key = k_spin_lock(&spin);
 8002160:	4b37      	ldr	r3, [pc, #220]	; (8002240 <modem_fun+0x178>)
 8002162:	601a      	str	r2, [r3, #0]
	const struct lora_driver_api *api =
 8002164:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2200      	movs	r2, #0
 800216a:	4611      	mov	r1, r2
 800216c:	4620      	mov	r0, r4
 800216e:	4798      	blx	r3
        lora_cfg->tx = true;
 8002170:	2301      	movs	r3, #1
 8002172:	736b      	strb	r3, [r5, #13]
	const struct lora_driver_api *api =
 8002174:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4629      	mov	r1, r5
 800217a:	4620      	mov	r0, r4
 800217c:	4798      	blx	r3
        if (rc < 0) {
 800217e:	1e05      	subs	r5, r0, #0
 8002180:	db24      	blt.n	80021cc <modem_fun+0x104>
	const struct lora_driver_api *api =
 8002182:	68a3      	ldr	r3, [r4, #8]
	return api->send(dev, data, data_len);
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	492c      	ldr	r1, [pc, #176]	; (800223c <modem_fun+0x174>)
 800218a:	4620      	mov	r0, r4
 800218c:	4798      	blx	r3
        if (rc < 0) {
 800218e:	1e05      	subs	r5, r0, #0
 8002190:	db2f      	blt.n	80021f2 <modem_fun+0x12a>
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <modem_fun+0x164>)
 8002194:	2201      	movs	r2, #1
 8002196:	f3bf 8f5b 	dmb	ish
 800219a:	e853 1f00 	ldrex	r1, [r3]
 800219e:	e843 2000 	strex	r0, r2, [r3]
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d1f9      	bne.n	800219a <modem_fun+0xd2>
 80021a6:	f3bf 8f5b 	dmb	ish
        if (tx_msg.message_type == MESSAGE_TYPE_SYNC)
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <modem_fun+0x170>)
 80021ac:	789b      	ldrb	r3, [r3, #2]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d026      	beq.n	8002200 <modem_fun+0x138>
        current_state = *current_state.next;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <modem_fun+0x160>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ba:	e883 0003 	stmia.w	r3, {r0, r1}
        k_spin_unlock(&spin, key);
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <modem_fun+0x178>)
 80021c0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
        return rc;
 80021ca:	e027      	b.n	800221c <modem_fun+0x154>
 80021cc:	2200      	movs	r2, #0
 80021ce:	2300      	movs	r3, #0
 80021d0:	4919      	ldr	r1, [pc, #100]	; (8002238 <modem_fun+0x170>)
 80021d2:	2000      	movs	r0, #0
 80021d4:	f009 ff8e 	bl	800c0f4 <z_impl_k_msgq_put>
            current_state = *current_state.next;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <modem_fun+0x160>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e0:	e883 0003 	stmia.w	r3, {r0, r1}
            k_spin_unlock(&spin, key);
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <modem_fun+0x178>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
            return rc;
 80021f0:	e014      	b.n	800221c <modem_fun+0x154>
 80021f2:	2200      	movs	r2, #0
 80021f4:	2300      	movs	r3, #0
 80021f6:	4910      	ldr	r1, [pc, #64]	; (8002238 <modem_fun+0x170>)
 80021f8:	2000      	movs	r0, #0
 80021fa:	f009 ff7b 	bl	800c0f4 <z_impl_k_msgq_put>
 80021fe:	e7c8      	b.n	8002192 <modem_fun+0xca>
            rc = 1;
 8002200:	4615      	mov	r5, r2
 8002202:	e7d6      	b.n	80021b2 <modem_fun+0xea>
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <modem_fun+0x164>)
 8002206:	2201      	movs	r2, #1
 8002208:	f3bf 8f5b 	dmb	ish
 800220c:	e853 1f00 	ldrex	r1, [r3]
 8002210:	e843 2000 	strex	r0, r2, [r3]
 8002214:	2800      	cmp	r0, #0
 8002216:	d1f9      	bne.n	800220c <modem_fun+0x144>
 8002218:	f3bf 8f5b 	dmb	ish
    }
    /*
     * Return 1 if current_state.state != TRANSMIT_STATE
     * */
    return rc;
}
 800221c:	4628      	mov	r0, r5
 800221e:	bd38      	pop	{r3, r4, r5, pc}
            return 1;
 8002220:	2501      	movs	r5, #1
 8002222:	e7fb      	b.n	800221c <modem_fun+0x154>
    int32_t rc = 1;
 8002224:	2501      	movs	r5, #1
 8002226:	e7f9      	b.n	800221c <modem_fun+0x154>
 8002228:	20000ff4 	.word	0x20000ff4
 800222c:	20001000 	.word	0x20001000
 8002230:	08002595 	.word	0x08002595
 8002234:	080025dd 	.word	0x080025dd
 8002238:	20000fb4 	.word	0x20000fb4
 800223c:	20000fb0 	.word	0x20000fb0
 8002240:	20000fac 	.word	0x20000fac

08002244 <signalman_proc_task>:
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
    int16_t rssi = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	f8ad 301e 	strh.w	r3, [sp, #30]
    struct message_s tx_msg = {
 800224e:	9305      	str	r3, [sp, #20]
 8002250:	f8ad 3018 	strh.w	r3, [sp, #24]
    struct message_s rx_msg = {0};
 8002254:	9303      	str	r3, [sp, #12]
 8002256:	f8ad 3010 	strh.w	r3, [sp, #16]
    struct led_strip_indicate_s *strip_ind = &status_ind;
 800225a:	4b94      	ldr	r3, [pc, #592]	; (80024ac <signalman_proc_task+0x268>)
 800225c:	9302      	str	r3, [sp, #8]
    struct k_msgq* msgq_cur_msg_tx_ptr = &msgq_tx_msg; /* Default queue */
 800225e:	4c94      	ldr	r4, [pc, #592]	; (80024b0 <signalman_proc_task+0x26c>)
 8002260:	e0d9      	b.n	8002416 <signalman_proc_task+0x1d2>
                    switch (rx_msg.message_type) {
 8002262:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d03c      	beq.n	80022e4 <signalman_proc_task+0xa0>
 800226a:	d808      	bhi.n	800227e <signalman_proc_task+0x3a>
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80d2 	bne.w	8002416 <signalman_proc_task+0x1d2>
                            if (rx_msg.sender_addr == cur_dev_addr) {
 8002272:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d00c      	beq.n	8002294 <signalman_proc_task+0x50>
                            msgq_cur_msg_tx_ptr = nullptr;
 800227a:	2400      	movs	r4, #0
 800227c:	e04d      	b.n	800231a <signalman_proc_task+0xd6>
 800227e:	3b03      	subs	r3, #3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	f200 80c7 	bhi.w	8002416 <signalman_proc_task+0x1d2>
                            if (rx_msg.sender_addr == cur_dev_addr) {
 8002288:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d07a      	beq.n	8002386 <signalman_proc_task+0x142>
                            msgq_cur_msg_tx_ptr = nullptr;
 8002290:	2400      	movs	r4, #0
 8002292:	e042      	b.n	800231a <signalman_proc_task+0xd6>
                                strip_ind = &msg_recv_ind;
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <signalman_proc_task+0x270>)
 8002296:	9302      	str	r3, [sp, #8]
                                k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
 8002298:	2600      	movs	r6, #0
 800229a:	2700      	movs	r7, #0
 800229c:	4c86      	ldr	r4, [pc, #536]	; (80024b8 <signalman_proc_task+0x274>)
 800229e:	4632      	mov	r2, r6
 80022a0:	463b      	mov	r3, r7
 80022a2:	a902      	add	r1, sp, #8
 80022a4:	4620      	mov	r0, r4
 80022a6:	f009 ff25 	bl	800c0f4 <z_impl_k_msgq_put>
 80022aa:	4b84      	ldr	r3, [pc, #528]	; (80024bc <signalman_proc_task+0x278>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	f3bf 8f5b 	dmb	ish
 80022b2:	e853 1f00 	ldrex	r1, [r3]
 80022b6:	e843 2000 	strex	r0, r2, [r3]
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d1f9      	bne.n	80022b2 <signalman_proc_task+0x6e>
 80022be:	f3bf 8f5b 	dmb	ish
                                strip_ind = &alarm_ind;
 80022c2:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <signalman_proc_task+0x27c>)
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	4632      	mov	r2, r6
 80022c8:	463b      	mov	r3, r7
 80022ca:	a902      	add	r1, sp, #8
 80022cc:	4620      	mov	r0, r4
 80022ce:	f009 ff11 	bl	800c0f4 <z_impl_k_msgq_put>
                                k_work_submit(&work_buzzer);
 80022d2:	487c      	ldr	r0, [pc, #496]	; (80024c4 <signalman_proc_task+0x280>)
 80022d4:	f00a fa46 	bl	800c764 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 80022d8:	2103      	movs	r1, #3
 80022da:	487b      	ldr	r0, [pc, #492]	; (80024c8 <signalman_proc_task+0x284>)
 80022dc:	f00b fb5a 	bl	800d994 <z_impl_k_poll_signal_raise>
                            msgq_cur_msg_tx_ptr = nullptr;
 80022e0:	2400      	movs	r4, #0
 80022e2:	e01a      	b.n	800231a <signalman_proc_task+0xd6>
                            strip_ind = &msg_recv_ind;
 80022e4:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <signalman_proc_task+0x270>)
 80022e6:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2300      	movs	r3, #0
 80022ec:	a902      	add	r1, sp, #8
 80022ee:	4872      	ldr	r0, [pc, #456]	; (80024b8 <signalman_proc_task+0x274>)
 80022f0:	f009 ff00 	bl	800c0f4 <z_impl_k_msgq_put>
 80022f4:	4b71      	ldr	r3, [pc, #452]	; (80024bc <signalman_proc_task+0x278>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	f3bf 8f5b 	dmb	ish
 80022fc:	e853 1f00 	ldrex	r1, [r3]
 8002300:	e843 2000 	strex	r0, r2, [r3]
 8002304:	2800      	cmp	r0, #0
 8002306:	d1f9      	bne.n	80022fc <signalman_proc_task+0xb8>
 8002308:	f3bf 8f5b 	dmb	ish
            if (msgq_cur_msg_tx_ptr)
 800230c:	b12c      	cbz	r4, 800231a <signalman_proc_task+0xd6>
 800230e:	2200      	movs	r2, #0
 8002310:	2300      	movs	r3, #0
 8002312:	a905      	add	r1, sp, #20
 8002314:	4620      	mov	r0, r4
 8002316:	f009 feed 	bl	800c0f4 <z_impl_k_msgq_put>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800231a:	220a      	movs	r2, #10
 800231c:	2300      	movs	r3, #0
 800231e:	f10d 011e 	add.w	r1, sp, #30
 8002322:	486a      	ldr	r0, [pc, #424]	; (80024cc <signalman_proc_task+0x288>)
 8002324:	f009 ff42 	bl	800c1ac <z_impl_k_msgq_get>
            rssi_num = check_rssi(rssi);
 8002328:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 800232c:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8002330:	da3a      	bge.n	80023a8 <signalman_proc_task+0x164>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 8002332:	b29b      	uxth	r3, r3
 8002334:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002338:	b292      	uxth	r2, r2
 800233a:	2a09      	cmp	r2, #9
 800233c:	f240 8092 	bls.w	8002464 <signalman_proc_task+0x220>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 8002340:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8002344:	b292      	uxth	r2, r2
 8002346:	2a09      	cmp	r2, #9
 8002348:	f240 808e 	bls.w	8002468 <signalman_proc_task+0x224>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 800234c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002350:	b292      	uxth	r2, r2
 8002352:	2a09      	cmp	r2, #9
 8002354:	f240 808a 	bls.w	800246c <signalman_proc_task+0x228>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 8002358:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800235c:	b292      	uxth	r2, r2
 800235e:	2a04      	cmp	r2, #4
 8002360:	f240 8086 	bls.w	8002470 <signalman_proc_task+0x22c>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 8002364:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002368:	b292      	uxth	r2, r2
 800236a:	2a13      	cmp	r2, #19
 800236c:	f240 8082 	bls.w	8002474 <signalman_proc_task+0x230>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 8002370:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 8002374:	b292      	uxth	r2, r2
 8002376:	2a01      	cmp	r2, #1
 8002378:	d97e      	bls.n	8002478 <signalman_proc_task+0x234>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 800237a:	3382      	adds	r3, #130	; 0x82
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d87c      	bhi.n	800247c <signalman_proc_task+0x238>
        return leds_num;
 8002382:	2201      	movs	r2, #1
 8002384:	e011      	b.n	80023aa <signalman_proc_task+0x166>
                                strip_ind = &msg_recv_ind;
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <signalman_proc_task+0x270>)
 8002388:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800238a:	2200      	movs	r2, #0
 800238c:	2300      	movs	r3, #0
 800238e:	a902      	add	r1, sp, #8
 8002390:	4849      	ldr	r0, [pc, #292]	; (80024b8 <signalman_proc_task+0x274>)
 8002392:	f009 feaf 	bl	800c0f4 <z_impl_k_msgq_put>
                                k_work_submit(&work_buzzer);
 8002396:	484b      	ldr	r0, [pc, #300]	; (80024c4 <signalman_proc_task+0x280>)
 8002398:	f00a f9e4 	bl	800c764 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 800239c:	2103      	movs	r1, #3
 800239e:	484a      	ldr	r0, [pc, #296]	; (80024c8 <signalman_proc_task+0x284>)
 80023a0:	f00b faf8 	bl	800d994 <z_impl_k_poll_signal_raise>
                            msgq_cur_msg_tx_ptr = nullptr;
 80023a4:	2400      	movs	r4, #0
 80023a6:	e7b8      	b.n	800231a <signalman_proc_task+0xd6>
        return leds_num;
 80023a8:	2208      	movs	r2, #8
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <signalman_proc_task+0x28c>)
 80023ac:	f3bf 8f5b 	dmb	ish
 80023b0:	e853 1f00 	ldrex	r1, [r3]
 80023b4:	e843 2000 	strex	r0, r2, [r3]
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1f9      	bne.n	80023b0 <signalman_proc_task+0x16c>
 80023bc:	f3bf 8f5b 	dmb	ish
            atomic_set(&status_ind.led_strip_state.status.people_num, rx_msg.workers_in_safe_zone);
 80023c0:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80023c4:	3304      	adds	r3, #4
 80023c6:	f3bf 8f5b 	dmb	ish
 80023ca:	e853 1f00 	ldrex	r1, [r3]
 80023ce:	e843 2000 	strex	r0, r2, [r3]
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d1f9      	bne.n	80023ca <signalman_proc_task+0x186>
 80023d6:	f3bf 8f5b 	dmb	ish
	return z_impl_k_poll(events, num_events, timeout);
 80023da:	2200      	movs	r2, #0
 80023dc:	2300      	movs	r3, #0
 80023de:	2101      	movs	r1, #1
 80023e0:	483c      	ldr	r0, [pc, #240]	; (80024d4 <signalman_proc_task+0x290>)
 80023e2:	f00b fa2b 	bl	800d83c <z_impl_k_poll>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <signalman_proc_task+0x278>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f3bf 8f5b 	dmb	ish
 80023ee:	e853 1f00 	ldrex	r1, [r3]
 80023f2:	4291      	cmp	r1, r2
 80023f4:	d103      	bne.n	80023fe <signalman_proc_task+0x1ba>
 80023f6:	e843 2600 	strex	r6, r2, [r3]
 80023fa:	2e00      	cmp	r6, #0
 80023fc:	d1f7      	bne.n	80023ee <signalman_proc_task+0x1aa>
 80023fe:	f3bf 8f5b 	dmb	ish
            if (atomic_cas(&alarm_is_active, false, false)) {
 8002402:	d104      	bne.n	800240e <signalman_proc_task+0x1ca>
                if (!ret) {
 8002404:	2800      	cmp	r0, #0
 8002406:	d03b      	beq.n	8002480 <signalman_proc_task+0x23c>
                else if ((ret == (-EAGAIN)) && (strip_ind != &disable_indication)) {
 8002408:	f110 0f0b 	cmn.w	r0, #11
 800240c:	d041      	beq.n	8002492 <signalman_proc_task+0x24e>
	return z_impl_k_sleep(timeout);
 800240e:	2001      	movs	r0, #1
 8002410:	2100      	movs	r1, #0
 8002412:	f00a fd85 	bl	800cf20 <z_impl_k_sleep>
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <signalman_proc_task+0x294>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_rx_msg)) {
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f7      	beq.n	800240e <signalman_proc_task+0x1ca>
            if (!proc_rx_data(&msgq_rx_msg, rx_buf, sizeof(rx_buf), &rx_msg, cur_dev_addr)) {
 800241e:	2301      	movs	r3, #1
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	ab03      	add	r3, sp, #12
 8002424:	2202      	movs	r2, #2
 8002426:	a907      	add	r1, sp, #28
 8002428:	482b      	ldr	r0, [pc, #172]	; (80024d8 <signalman_proc_task+0x294>)
 800242a:	f000 fc65 	bl	8002cf8 <proc_rx_data>
 800242e:	2800      	cmp	r0, #0
 8002430:	d0f1      	beq.n	8002416 <signalman_proc_task+0x1d2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002432:	f3bf 8f5b 	dmb	ish
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <signalman_proc_task+0x298>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f3bf 8f5b 	dmb	ish
            if (atomic_get(&anti_dream_active)) {
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e9      	bne.n	8002416 <signalman_proc_task+0x1d2>
            switch (rx_msg.direction) {
 8002442:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f43f af0b 	beq.w	8002262 <signalman_proc_task+0x1e>
 800244c:	2b01      	cmp	r3, #1
 800244e:	d1e2      	bne.n	8002416 <signalman_proc_task+0x1d2>
                    tx_msg.sender_addr = cur_dev_addr;
 8002450:	f88d 3014 	strb.w	r3, [sp, #20]
                    tx_msg.message_type = rx_msg.message_type;
 8002454:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002458:	f88d 3016 	strb.w	r3, [sp, #22]
                    switch (rx_msg.message_type) {
 800245c:	2b02      	cmp	r3, #2
 800245e:	d1da      	bne.n	8002416 <signalman_proc_task+0x1d2>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 8002460:	4c13      	ldr	r4, [pc, #76]	; (80024b0 <signalman_proc_task+0x26c>)
 8002462:	e753      	b.n	800230c <signalman_proc_task+0xc8>
        return leds_num;
 8002464:	2207      	movs	r2, #7
 8002466:	e7a0      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 8002468:	2206      	movs	r2, #6
 800246a:	e79e      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 800246c:	2205      	movs	r2, #5
 800246e:	e79c      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 8002470:	2204      	movs	r2, #4
 8002472:	e79a      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 8002474:	2203      	movs	r2, #3
 8002476:	e798      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 8002478:	2202      	movs	r2, #2
 800247a:	e796      	b.n	80023aa <signalman_proc_task+0x166>
        return leds_num;
 800247c:	2200      	movs	r2, #0
 800247e:	e794      	b.n	80023aa <signalman_proc_task+0x166>
                    strip_ind = &status_ind;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <signalman_proc_task+0x268>)
 8002482:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002484:	2200      	movs	r2, #0
 8002486:	2300      	movs	r3, #0
 8002488:	a902      	add	r1, sp, #8
 800248a:	480b      	ldr	r0, [pc, #44]	; (80024b8 <signalman_proc_task+0x274>)
 800248c:	f009 fe32 	bl	800c0f4 <z_impl_k_msgq_put>
 8002490:	e7bd      	b.n	800240e <signalman_proc_task+0x1ca>
                else if ((ret == (-EAGAIN)) && (strip_ind != &disable_indication)) {
 8002492:	9a02      	ldr	r2, [sp, #8]
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <signalman_proc_task+0x29c>)
 8002496:	429a      	cmp	r2, r3
 8002498:	d0b9      	beq.n	800240e <signalman_proc_task+0x1ca>
                    strip_ind = &disable_indication;
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	2300      	movs	r3, #0
 80024a0:	a902      	add	r1, sp, #8
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <signalman_proc_task+0x274>)
 80024a4:	f009 fe26 	bl	800c0f4 <z_impl_k_msgq_put>
 80024a8:	e7b1      	b.n	800240e <signalman_proc_task+0x1ca>
 80024aa:	bf00      	nop
 80024ac:	200000a0 	.word	0x200000a0
 80024b0:	20000640 	.word	0x20000640
 80024b4:	20000060 	.word	0x20000060
 80024b8:	200005a4 	.word	0x200005a4
 80024bc:	20000fe8 	.word	0x20000fe8
 80024c0:	20000010 	.word	0x20000010
 80024c4:	20001014 	.word	0x20001014
 80024c8:	20000090 	.word	0x20000090
 80024cc:	200005d8 	.word	0x200005d8
 80024d0:	200000a4 	.word	0x200000a4
 80024d4:	20000f48 	.word	0x20000f48
 80024d8:	2000060c 	.word	0x2000060c
 80024dc:	20000fec 	.word	0x20000fec
 80024e0:	20000034 	.word	0x20000034

080024e4 <signalman_modem_task>:
{
 80024e4:	b500      	push	{lr}
 80024e6:	b087      	sub	sp, #28
    struct lora_modem_config lora_cfg = {
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <signalman_modem_task+0x94>)
 80024ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ec:	f10d 0c18 	add.w	ip, sp, #24
 80024f0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
    struct led_strip_indicate_s *strip_ind = nullptr;
 80024f4:	2300      	movs	r3, #0
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	4820      	ldr	r0, [pc, #128]	; (800257c <signalman_modem_task+0x98>)
 80024fa:	f00e fedb 	bl	80112b4 <z_device_is_ready>
    if (!device_is_ready(lora_dev)) {
 80024fe:	b178      	cbz	r0, 8002520 <signalman_modem_task+0x3c>
	const struct lora_driver_api *api =
 8002500:	481e      	ldr	r0, [pc, #120]	; (800257c <signalman_modem_task+0x98>)
 8002502:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	a902      	add	r1, sp, #8
 8002508:	4798      	blx	r3
    if (lora_config(lora_dev, &lora_cfg) < 0 ) {
 800250a:	2800      	cmp	r0, #0
 800250c:	db0f      	blt.n	800252e <signalman_modem_task+0x4a>
    system_init();
 800250e:	f7ff fc6f 	bl	8001df0 <_ZL11system_initv>
	const struct lora_driver_api *api =
 8002512:	481a      	ldr	r0, [pc, #104]	; (800257c <signalman_modem_task+0x98>)
 8002514:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <signalman_modem_task+0x9c>)
 800251a:	491a      	ldr	r1, [pc, #104]	; (8002584 <signalman_modem_task+0xa0>)
 800251c:	4798      	blx	r3
 800251e:	e015      	b.n	800254c <signalman_modem_task+0x68>
	return z_impl_k_sleep(timeout);
 8002520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002528:	f00a fcfa 	bl	800cf20 <z_impl_k_sleep>
 800252c:	e7e8      	b.n	8002500 <signalman_modem_task+0x1c>
 800252e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002536:	f00a fcf3 	bl	800cf20 <z_impl_k_sleep>
 800253a:	e7e8      	b.n	800250e <signalman_modem_task+0x2a>
            strip_ind = &msg_send_good_ind;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <signalman_modem_task+0xa4>)
 800253e:	9301      	str	r3, [sp, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002540:	2200      	movs	r2, #0
 8002542:	2300      	movs	r3, #0
 8002544:	a901      	add	r1, sp, #4
 8002546:	4811      	ldr	r0, [pc, #68]	; (800258c <signalman_modem_task+0xa8>)
 8002548:	f009 fdd4 	bl	800c0f4 <z_impl_k_msgq_put>
        rc = modem_fun(lora_dev, &lora_cfg);
 800254c:	a902      	add	r1, sp, #8
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <signalman_modem_task+0x98>)
 8002550:	f7ff fdba 	bl	80020c8 <modem_fun>
        if (!rc) {
 8002554:	2800      	cmp	r0, #0
 8002556:	d0f1      	beq.n	800253c <signalman_modem_task+0x58>
        } else if (rc < 0) {
 8002558:	2800      	cmp	r0, #0
 800255a:	db04      	blt.n	8002566 <signalman_modem_task+0x82>
	return z_impl_k_sleep(timeout);
 800255c:	2001      	movs	r0, #1
 800255e:	2100      	movs	r1, #0
 8002560:	f00a fcde 	bl	800cf20 <z_impl_k_sleep>
 8002564:	e7f2      	b.n	800254c <signalman_modem_task+0x68>
            strip_ind = &msg_send_bad_ind;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <signalman_modem_task+0xac>)
 8002568:	9301      	str	r3, [sp, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800256a:	2200      	movs	r2, #0
 800256c:	2300      	movs	r3, #0
 800256e:	a901      	add	r1, sp, #4
 8002570:	4806      	ldr	r0, [pc, #24]	; (800258c <signalman_modem_task+0xa8>)
 8002572:	f009 fdbf 	bl	800c0f4 <z_impl_k_msgq_put>
 8002576:	e7e9      	b.n	800254c <signalman_modem_task+0x68>
 8002578:	08012830 	.word	0x08012830
 800257c:	08012420 	.word	0x08012420
 8002580:	08002595 	.word	0x08002595
 8002584:	080025dd 	.word	0x080025dd
 8002588:	20000078 	.word	0x20000078
 800258c:	200005a4 	.word	0x200005a4
 8002590:	2000006c 	.word	0x2000006c

08002594 <lora_receive_error_timeout>:
    k_msgq_put(&msgq_rx_msg, data, K_NO_WAIT);
    k_msgq_put(&msgq_rssi, &rssi, K_NO_WAIT);
    k_spin_unlock(&spin, key);
}

void lora_receive_error_timeout(const struct device *dev) {
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4604      	mov	r4, r0
	__asm__ volatile(
 8002598:	f04f 0210 	mov.w	r2, #16
 800259c:	f3ef 8311 	mrs	r3, BASEPRI
 80025a0:	f382 8812 	msr	BASEPRI_MAX, r2
 80025a4:	f3bf 8f6f 	isb	sy
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    key = k_spin_lock(&spin);
 80025a8:	4d09      	ldr	r5, [pc, #36]	; (80025d0 <lora_receive_error_timeout+0x3c>)
 80025aa:	602b      	str	r3, [r5, #0]
	const struct lora_driver_api *api =
 80025ac:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2200      	movs	r2, #0
 80025b2:	4611      	mov	r1, r2
 80025b4:	4798      	blx	r3
	const struct lora_driver_api *api =
 80025b6:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <lora_receive_error_timeout+0x40>)
 80025bc:	4906      	ldr	r1, [pc, #24]	; (80025d8 <lora_receive_error_timeout+0x44>)
 80025be:	4620      	mov	r0, r4
 80025c0:	4798      	blx	r3

    /* Restart receive */
    lora_recv_async(dev, nullptr, nullptr);
    lora_recv_async(dev, lora_receive_cb, lora_receive_error_timeout);

    k_spin_unlock(&spin, key);
 80025c2:	682b      	ldr	r3, [r5, #0]
	__asm__ volatile(
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
}
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
 80025ce:	bf00      	nop
 80025d0:	20000fe4 	.word	0x20000fe4
 80025d4:	08002595 	.word	0x08002595
 80025d8:	080025dd 	.word	0x080025dd

080025dc <lora_receive_cb>:
void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr) {
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b087      	sub	sp, #28
 80025e0:	460d      	mov	r5, r1
 80025e2:	4614      	mov	r4, r2
 80025e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    volatile uint16_t len = size;
 80025e8:	f8ad 2016 	strh.w	r2, [sp, #22]
	__asm__ volatile(
 80025ec:	f04f 0310 	mov.w	r3, #16
 80025f0:	f3ef 8211 	mrs	r2, BASEPRI
 80025f4:	f383 8812 	msr	BASEPRI_MAX, r3
 80025f8:	f3bf 8f6f 	isb	sy
    key = k_spin_lock(&spin);
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <lora_receive_cb+0xc8>)
 80025fe:	601a      	str	r2, [r3, #0]
    if ((*data) == 13) {
 8002600:	780b      	ldrb	r3, [r1, #0]
 8002602:	2b0d      	cmp	r3, #13
 8002604:	d004      	beq.n	8002610 <lora_receive_cb+0x34>
    if ((size != MESSAGE_LEN_IN_BYTES) || is_empty_msg(data, size)) {
 8002606:	2c02      	cmp	r4, #2
 8002608:	d138      	bne.n	800267c <lora_receive_cb+0xa0>
    uint8_t cnt = 0;
 800260a:	2000      	movs	r0, #0
    uint8_t i = 0;
 800260c:	4603      	mov	r3, r0
 800260e:	e015      	b.n	800263c <lora_receive_cb+0x60>
	z_impl_k_timer_stop(timer);
 8002610:	4e25      	ldr	r6, [pc, #148]	; (80026a8 <lora_receive_cb+0xcc>)
 8002612:	4630      	mov	r0, r6
 8002614:	f00f f9f5 	bl	8011a02 <z_impl_k_timer_stop>
	return z_impl_k_sleep(timeout);
 8002618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800261c:	2100      	movs	r1, #0
 800261e:	f00a fc7f 	bl	800cf20 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 8002622:	f247 7288 	movw	r2, #30600	; 0x7788
 8002626:	2300      	movs	r3, #0
 8002628:	e9cd 2300 	strd	r2, r3, [sp]
 800262c:	2200      	movs	r2, #0
 800262e:	2300      	movs	r3, #0
 8002630:	4630      	mov	r0, r6
 8002632:	f00a feb3 	bl	800d39c <z_impl_k_timer_start>
 8002636:	e7e6      	b.n	8002606 <lora_receive_cb+0x2a>
        i++;
 8002638:	3301      	adds	r3, #1
 800263a:	b2db      	uxtb	r3, r3
    while(i < len) {
 800263c:	429c      	cmp	r4, r3
 800263e:	d905      	bls.n	800264c <lora_receive_cb+0x70>
        if (!(*(buf + i))) {
 8002640:	5cea      	ldrb	r2, [r5, r3]
 8002642:	2a00      	cmp	r2, #0
 8002644:	d1f8      	bne.n	8002638 <lora_receive_cb+0x5c>
            cnt++;
 8002646:	3001      	adds	r0, #1
 8002648:	b2c0      	uxtb	r0, r0
 800264a:	e7f5      	b.n	8002638 <lora_receive_cb+0x5c>
 800264c:	4284      	cmp	r4, r0
 800264e:	d015      	beq.n	800267c <lora_receive_cb+0xa0>
    k_msgq_put(&msgq_rx_msg, data, K_NO_WAIT);
 8002650:	2600      	movs	r6, #0
 8002652:	2700      	movs	r7, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002654:	4632      	mov	r2, r6
 8002656:	463b      	mov	r3, r7
 8002658:	4629      	mov	r1, r5
 800265a:	4814      	ldr	r0, [pc, #80]	; (80026ac <lora_receive_cb+0xd0>)
 800265c:	f009 fd4a 	bl	800c0f4 <z_impl_k_msgq_put>
 8002660:	4632      	mov	r2, r6
 8002662:	463b      	mov	r3, r7
 8002664:	f10d 010e 	add.w	r1, sp, #14
 8002668:	4811      	ldr	r0, [pc, #68]	; (80026b0 <lora_receive_cb+0xd4>)
 800266a:	f009 fd43 	bl	800c0f4 <z_impl_k_msgq_put>
    k_spin_unlock(&spin, key);
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <lora_receive_cb+0xc8>)
 8002670:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	e011      	b.n	80026a0 <lora_receive_cb+0xc4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800267c:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <lora_receive_cb+0xd8>)
 800267e:	2201      	movs	r2, #1
 8002680:	f3bf 8f5b 	dmb	ish
 8002684:	e853 1f00 	ldrex	r1, [r3]
 8002688:	e843 2000 	strex	r0, r2, [r3]
 800268c:	2800      	cmp	r0, #0
 800268e:	d1f9      	bne.n	8002684 <lora_receive_cb+0xa8>
 8002690:	f3bf 8f5b 	dmb	ish
        k_spin_unlock(&spin, key);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <lora_receive_cb+0xc8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
}
 80026a0:	b007      	add	sp, #28
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a4:	20000fe0 	.word	0x20000fe0
 80026a8:	20000770 	.word	0x20000770
 80026ac:	2000060c 	.word	0x2000060c
 80026b0:	200005d8 	.word	0x200005d8
 80026b4:	20001000 	.word	0x20001000

080026b8 <work_button_pressed_handler>:
void work_button_pressed_handler(struct k_work *item) {
 80026b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026bc:	b084      	sub	sp, #16
    atomic_t atomic_interval_count = ATOMIC_INIT(0); /* Counted number of function button pressed call */
 80026be:	2400      	movs	r4, #0
 80026c0:	9403      	str	r4, [sp, #12]
    struct led_strip_indicate_s *strip_ind = nullptr;
 80026c2:	9402      	str	r4, [sp, #8]
 80026c4:	aa03      	add	r2, sp, #12
 80026c6:	f3bf 8f5b 	dmb	ish
 80026ca:	e852 3f00 	ldrex	r3, [r2]
 80026ce:	e842 4100 	strex	r1, r4, [r2]
 80026d2:	2900      	cmp	r1, #0
 80026d4:	d1f9      	bne.n	80026ca <work_button_pressed_handler+0x12>
 80026d6:	f3bf 8f5b 	dmb	ish
    bool long_pressed_is_set = false;
 80026da:	46a0      	mov	r8, r4
    bool middle_pressed_is_set = false;
 80026dc:	4625      	mov	r5, r4
    while (gpio_pin_get(irq_gpio_dev->port, irq_gpio_dev->pin)) {
 80026de:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <work_button_pressed_handler+0x20c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_data *const data =
 80026e6:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 80026e8:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	a901      	add	r1, sp, #4
 80026ee:	4798      	blx	r3
	if (ret == 0) {
 80026f0:	4603      	mov	r3, r0
 80026f2:	b918      	cbnz	r0, 80026fc <work_button_pressed_handler+0x44>
		*value ^= data->invert;
 80026f4:	6831      	ldr	r1, [r6, #0]
 80026f6:	9a01      	ldr	r2, [sp, #4]
 80026f8:	404a      	eors	r2, r1
 80026fa:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 80026fc:	b92b      	cbnz	r3, 800270a <work_button_pressed_handler+0x52>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80026fe:	2201      	movs	r2, #1
 8002700:	40ba      	lsls	r2, r7
 8002702:	9901      	ldr	r1, [sp, #4]
 8002704:	420a      	tst	r2, r1
 8002706:	d000      	beq.n	800270a <work_button_pressed_handler+0x52>
 8002708:	2301      	movs	r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d04e      	beq.n	80027ac <work_button_pressed_handler+0xf4>
	return z_impl_k_sleep(timeout);
 800270e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002712:	2100      	movs	r1, #0
 8002714:	f00a fc04 	bl	800cf20 <z_impl_k_sleep>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002718:	ab03      	add	r3, sp, #12
 800271a:	f3bf 8f5b 	dmb	ish
 800271e:	e853 2f00 	ldrex	r2, [r3]
 8002722:	3201      	adds	r2, #1
 8002724:	e843 2100 	strex	r1, r2, [r3]
 8002728:	2900      	cmp	r1, #0
 800272a:	d1f8      	bne.n	800271e <work_button_pressed_handler+0x66>
 800272c:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8002730:	f3bf 8f5b 	dmb	ish
 8002734:	9b03      	ldr	r3, [sp, #12]
 8002736:	f3bf 8f5b 	dmb	ish
        if ((atomic_get(&atomic_interval_count) > SHORT_PRESSED_MIN_VAL) &&
 800273a:	2b02      	cmp	r3, #2
 800273c:	dd12      	ble.n	8002764 <work_button_pressed_handler+0xac>
 800273e:	f3bf 8f5b 	dmb	ish
 8002742:	9b03      	ldr	r3, [sp, #12]
 8002744:	f3bf 8f5b 	dmb	ish
 8002748:	2b0a      	cmp	r3, #10
 800274a:	dc0b      	bgt.n	8002764 <work_button_pressed_handler+0xac>
            if (!short_pressed_is_set) {
 800274c:	2c00      	cmp	r4, #0
 800274e:	d1c6      	bne.n	80026de <work_button_pressed_handler+0x26>
                strip_ind = &short_pressed_button_ind;
 8002750:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <work_button_pressed_handler+0x210>)
 8002752:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002754:	2200      	movs	r2, #0
 8002756:	2300      	movs	r3, #0
 8002758:	a902      	add	r1, sp, #8
 800275a:	485c      	ldr	r0, [pc, #368]	; (80028cc <work_button_pressed_handler+0x214>)
 800275c:	f009 fcca 	bl	800c0f4 <z_impl_k_msgq_put>
                short_pressed_is_set = true;
 8002760:	2401      	movs	r4, #1
 8002762:	e7bc      	b.n	80026de <work_button_pressed_handler+0x26>
 8002764:	f3bf 8f5b 	dmb	ish
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 800276e:	2b0b      	cmp	r3, #11
 8002770:	dc09      	bgt.n	8002786 <work_button_pressed_handler+0xce>
 8002772:	f3bf 8f5b 	dmb	ish
 8002776:	9b03      	ldr	r3, [sp, #12]
 8002778:	f3bf 8f5b 	dmb	ish
        } else if (atomic_get(&atomic_interval_count) > LONG_PRESSED_MIN_VAL) { /* Long pressed */
 800277c:	2b15      	cmp	r3, #21
 800277e:	ddae      	ble.n	80026de <work_button_pressed_handler+0x26>
            long_pressed_is_set = true;
 8002780:	f04f 0801 	mov.w	r8, #1
 8002784:	e7ab      	b.n	80026de <work_button_pressed_handler+0x26>
 8002786:	f3bf 8f5b 	dmb	ish
 800278a:	9b03      	ldr	r3, [sp, #12]
 800278c:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 8002790:	2b14      	cmp	r3, #20
 8002792:	dcee      	bgt.n	8002772 <work_button_pressed_handler+0xba>
            if (!middle_pressed_is_set) {
 8002794:	2d00      	cmp	r5, #0
 8002796:	d1a2      	bne.n	80026de <work_button_pressed_handler+0x26>
                strip_ind = &middle_pressed_button_ind;
 8002798:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <work_button_pressed_handler+0x218>)
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	2300      	movs	r3, #0
 80027a0:	a902      	add	r1, sp, #8
 80027a2:	484a      	ldr	r0, [pc, #296]	; (80028cc <work_button_pressed_handler+0x214>)
 80027a4:	f009 fca6 	bl	800c0f4 <z_impl_k_msgq_put>
                middle_pressed_is_set = true;
 80027a8:	2501      	movs	r5, #1
 80027aa:	e798      	b.n	80026de <work_button_pressed_handler+0x26>
    if (short_pressed_is_set) {
 80027ac:	b944      	cbnz	r4, 80027c0 <work_button_pressed_handler+0x108>
    if (short_pressed_is_set && (!middle_pressed_is_set)) { /* Short pressed */
 80027ae:	b104      	cbz	r4, 80027b2 <work_button_pressed_handler+0xfa>
 80027b0:	b175      	cbz	r5, 80027d0 <work_button_pressed_handler+0x118>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 80027b2:	b115      	cbz	r5, 80027ba <work_button_pressed_handler+0x102>
 80027b4:	f1b8 0f00 	cmp.w	r8, #0
 80027b8:	d01c      	beq.n	80027f4 <work_button_pressed_handler+0x13c>
}
 80027ba:	b004      	add	sp, #16
 80027bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k_work_submit(&work_buzzer);
 80027c0:	4844      	ldr	r0, [pc, #272]	; (80028d4 <work_button_pressed_handler+0x21c>)
 80027c2:	f009 ffcf 	bl	800c764 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 80027c6:	2101      	movs	r1, #1
 80027c8:	4843      	ldr	r0, [pc, #268]	; (80028d8 <work_button_pressed_handler+0x220>)
 80027ca:	f00b f8e3 	bl	800d994 <z_impl_k_poll_signal_raise>
 80027ce:	e7ee      	b.n	80027ae <work_button_pressed_handler+0xf6>
        strip_ind = &status_ind;
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <work_button_pressed_handler+0x224>)
 80027d2:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2300      	movs	r3, #0
 80027d8:	a902      	add	r1, sp, #8
 80027da:	483c      	ldr	r0, [pc, #240]	; (80028cc <work_button_pressed_handler+0x214>)
 80027dc:	f009 fc8a 	bl	800c0f4 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 80027e0:	2101      	movs	r1, #1
 80027e2:	483f      	ldr	r0, [pc, #252]	; (80028e0 <work_button_pressed_handler+0x228>)
 80027e4:	f00b f8d6 	bl	800d994 <z_impl_k_poll_signal_raise>
        k_work_reschedule(&dwork_enable_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 80027e8:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <work_button_pressed_handler+0x22c>)
 80027ea:	2300      	movs	r3, #0
 80027ec:	483e      	ldr	r0, [pc, #248]	; (80028e8 <work_button_pressed_handler+0x230>)
 80027ee:	f00a f807 	bl	800c800 <k_work_reschedule>
 80027f2:	e7e2      	b.n	80027ba <work_button_pressed_handler+0x102>
        if ((!strcmp(button_alarm.port->name, irq_gpio_dev->port->name)) &&
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <work_button_pressed_handler+0x234>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <work_button_pressed_handler+0x20c>)
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6811      	ldr	r1, [r2, #0]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	f7fe fb1e 	bl	8000e42 <strcmp>
 8002806:	b930      	cbnz	r0, 8002816 <work_button_pressed_handler+0x15e>
          (irq_gpio_dev->pin == button_alarm.pin)) {
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <work_button_pressed_handler+0x20c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	791a      	ldrb	r2, [r3, #4]
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <work_button_pressed_handler+0x234>)
 8002810:	791b      	ldrb	r3, [r3, #4]
        if ((!strcmp(button_alarm.port->name, irq_gpio_dev->port->name)) &&
 8002812:	429a      	cmp	r2, r3
 8002814:	d047      	beq.n	80028a6 <work_button_pressed_handler+0x1ee>
        if ((!strcmp(button_train_passed.port->name, irq_gpio_dev->port->name)) &&
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <work_button_pressed_handler+0x238>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <work_button_pressed_handler+0x20c>)
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6811      	ldr	r1, [r2, #0]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f7fe fb0d 	bl	8000e42 <strcmp>
 8002828:	b930      	cbnz	r0, 8002838 <work_button_pressed_handler+0x180>
          (irq_gpio_dev->pin == button_train_passed.pin)) {
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <work_button_pressed_handler+0x20c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	791a      	ldrb	r2, [r3, #4]
 8002830:	4b2f      	ldr	r3, [pc, #188]	; (80028f0 <work_button_pressed_handler+0x238>)
 8002832:	791b      	ldrb	r3, [r3, #4]
        if ((!strcmp(button_train_passed.port->name, irq_gpio_dev->port->name)) &&
 8002834:	429a      	cmp	r2, r3
 8002836:	d03d      	beq.n	80028b4 <work_button_pressed_handler+0x1fc>
        if ((!strcmp(button_anti_dream.port->name, irq_gpio_dev->port->name)) &&
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <work_button_pressed_handler+0x23c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <work_button_pressed_handler+0x20c>)
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6811      	ldr	r1, [r2, #0]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f7fe fafc 	bl	8000e42 <strcmp>
 800284a:	2800      	cmp	r0, #0
 800284c:	d1b5      	bne.n	80027ba <work_button_pressed_handler+0x102>
          (irq_gpio_dev->pin == button_anti_dream.pin)) {
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <work_button_pressed_handler+0x20c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	791a      	ldrb	r2, [r3, #4]
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <work_button_pressed_handler+0x23c>)
 8002856:	791b      	ldrb	r3, [r3, #4]
        if ((!strcmp(button_anti_dream.port->name, irq_gpio_dev->port->name)) &&
 8002858:	429a      	cmp	r2, r3
 800285a:	d1ae      	bne.n	80027ba <work_button_pressed_handler+0x102>
 800285c:	2104      	movs	r1, #4
 800285e:	481e      	ldr	r0, [pc, #120]	; (80028d8 <work_button_pressed_handler+0x220>)
 8002860:	f00b f898 	bl	800d994 <z_impl_k_poll_signal_raise>
            k_work_submit(&work_buzzer);
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <work_button_pressed_handler+0x21c>)
 8002866:	f009 ff7d 	bl	800c764 <k_work_submit>
            strip_ind = &status_ind;
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <work_button_pressed_handler+0x224>)
 800286c:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800286e:	2200      	movs	r2, #0
 8002870:	2300      	movs	r3, #0
 8002872:	a902      	add	r1, sp, #8
 8002874:	4815      	ldr	r0, [pc, #84]	; (80028cc <work_button_pressed_handler+0x214>)
 8002876:	f009 fc3d 	bl	800c0f4 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800287a:	2101      	movs	r1, #1
 800287c:	4818      	ldr	r0, [pc, #96]	; (80028e0 <work_button_pressed_handler+0x228>)
 800287e:	f00b f889 	bl	800d994 <z_impl_k_poll_signal_raise>
            k_work_reschedule(&dwork_enable_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <work_button_pressed_handler+0x22c>)
 8002884:	2300      	movs	r3, #0
 8002886:	4818      	ldr	r0, [pc, #96]	; (80028e8 <work_button_pressed_handler+0x230>)
 8002888:	f009 ffba 	bl	800c800 <k_work_reschedule>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <work_button_pressed_handler+0x240>)
 800288e:	2200      	movs	r2, #0
 8002890:	f3bf 8f5b 	dmb	ish
 8002894:	e853 1f00 	ldrex	r1, [r3]
 8002898:	e843 2000 	strex	r0, r2, [r3]
 800289c:	2800      	cmp	r0, #0
 800289e:	d1f9      	bne.n	8002894 <work_button_pressed_handler+0x1dc>
 80028a0:	f3bf 8f5b 	dmb	ish
}
 80028a4:	e789      	b.n	80027ba <work_button_pressed_handler+0x102>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2300      	movs	r3, #0
 80028aa:	4914      	ldr	r1, [pc, #80]	; (80028fc <work_button_pressed_handler+0x244>)
 80028ac:	4814      	ldr	r0, [pc, #80]	; (8002900 <work_button_pressed_handler+0x248>)
 80028ae:	f009 fc21 	bl	800c0f4 <z_impl_k_msgq_put>
 80028b2:	e7b0      	b.n	8002816 <work_button_pressed_handler+0x15e>
 80028b4:	2200      	movs	r2, #0
 80028b6:	2300      	movs	r3, #0
 80028b8:	4912      	ldr	r1, [pc, #72]	; (8002904 <work_button_pressed_handler+0x24c>)
 80028ba:	4813      	ldr	r0, [pc, #76]	; (8002908 <work_button_pressed_handler+0x250>)
 80028bc:	f009 fc1a 	bl	800c0f4 <z_impl_k_msgq_put>
 80028c0:	e7ba      	b.n	8002838 <work_button_pressed_handler+0x180>
 80028c2:	bf00      	nop
 80028c4:	20000ffc 	.word	0x20000ffc
 80028c8:	20000084 	.word	0x20000084
 80028cc:	200005a4 	.word	0x200005a4
 80028d0:	20000054 	.word	0x20000054
 80028d4:	20001014 	.word	0x20001014
 80028d8:	20000090 	.word	0x20000090
 80028dc:	200000a0 	.word	0x200000a0
 80028e0:	20000f9c 	.word	0x20000f9c
 80028e4:	000927c0 	.word	0x000927c0
 80028e8:	20000740 	.word	0x20000740
 80028ec:	2000001c 	.word	0x2000001c
 80028f0:	2000002c 	.word	0x2000002c
 80028f4:	20000024 	.word	0x20000024
 80028f8:	20000fec 	.word	0x20000fec
 80028fc:	080129ac 	.word	0x080129ac
 8002900:	20000674 	.word	0x20000674
 8002904:	080129a4 	.word	0x080129a4
 8002908:	20000640 	.word	0x20000640

0800290c <work_buzzer_handler>:

void work_buzzer_handler(struct k_work *item) {
 800290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	e003      	b.n	800291c <work_buzzer_handler+0x10>
	return z_impl_k_sleep(timeout);
 8002914:	2032      	movs	r0, #50	; 0x32
 8002916:	2100      	movs	r1, #0
 8002918:	f00a fb02 	bl	800cf20 <z_impl_k_sleep>
	return z_impl_k_poll(events, num_events, timeout);
 800291c:	2200      	movs	r2, #0
 800291e:	2300      	movs	r3, #0
 8002920:	2101      	movs	r1, #1
 8002922:	48b9      	ldr	r0, [pc, #740]	; (8002c08 <work_buzzer_handler+0x2fc>)
 8002924:	f00a ff8a 	bl	800d83c <z_impl_k_poll>
    uint8_t i = 0;

    /* Wait while signal will be raised */
    while (k_poll(&event_buzzer, 1, K_NO_WAIT)) {
 8002928:	2800      	cmp	r0, #0
 800292a:	d1f3      	bne.n	8002914 <work_buzzer_handler+0x8>
        k_sleep(K_MSEC(5));
    }

    switch (event_buzzer.signal->result) {
 800292c:	4bb6      	ldr	r3, [pc, #728]	; (8002c08 <work_buzzer_handler+0x2fc>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d048      	beq.n	80029c8 <work_buzzer_handler+0xbc>
 8002936:	2b03      	cmp	r3, #3
 8002938:	f000 80aa 	beq.w	8002a90 <work_buzzer_handler+0x184>
 800293c:	2b01      	cmp	r3, #1
 800293e:	f000 816b 	beq.w	8002c18 <work_buzzer_handler+0x30c>
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC / 2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8002942:	4bb2      	ldr	r3, [pc, #712]	; (8002c0c <work_buzzer_handler+0x300>)
 8002944:	681d      	ldr	r5, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 8002946:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	aa02      	add	r2, sp, #8
 800294c:	2102      	movs	r1, #2
 800294e:	4628      	mov	r0, r5
 8002950:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8002952:	bb70      	cbnz	r0, 80029b2 <work_buzzer_handler+0xa6>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002954:	9c02      	ldr	r4, [sp, #8]
 8002956:	9e03      	ldr	r6, [sp, #12]
 8002958:	00b2      	lsls	r2, r6, #2
 800295a:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800295e:	00a3      	lsls	r3, r4, #2
 8002960:	191b      	adds	r3, r3, r4
 8002962:	eb46 0202 	adc.w	r2, r6, r2
 8002966:	00d2      	lsls	r2, r2, #3
 8002968:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1b1b      	subs	r3, r3, r4
 8002970:	eb62 0206 	sbc.w	r2, r2, r6
 8002974:	0112      	lsls	r2, r2, #4
 8002976:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	191b      	adds	r3, r3, r4
 800297e:	eb46 0602 	adc.w	r6, r6, r2
 8002982:	01b6      	lsls	r6, r6, #6
 8002984:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002988:	019c      	lsls	r4, r3, #6
 800298a:	4aa1      	ldr	r2, [pc, #644]	; (8002c10 <work_buzzer_handler+0x304>)
 800298c:	2300      	movs	r3, #0
 800298e:	4620      	mov	r0, r4
 8002990:	4631      	mov	r1, r6
 8002992:	f7fe f823 	bl	80009dc <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299c:	42a3      	cmp	r3, r4
 800299e:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <work_buzzer_handler+0x308>)
 80029a0:	41b3      	sbcs	r3, r6
 80029a2:	d306      	bcc.n	80029b2 <work_buzzer_handler+0xa6>
	api = (struct pwm_driver_api *)dev->api;
 80029a4:	68ab      	ldr	r3, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4628      	mov	r0, r5
 80029b0:	47a0      	blx	r4
                             0, PWM_FLAGS);
            break;
    }
    event_buzzer.signal->signaled = 0;
 80029b2:	4b95      	ldr	r3, [pc, #596]	; (8002c08 <work_buzzer_handler+0x2fc>)
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	2100      	movs	r1, #0
 80029b8:	6091      	str	r1, [r2, #8]
    event_buzzer.state = K_POLL_STATE_NOT_READY;
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	f361 3252 	bfi	r2, r1, #13, #6
 80029c0:	60da      	str	r2, [r3, #12]
}
 80029c2:	b004      	add	sp, #16
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80029c8:	4b90      	ldr	r3, [pc, #576]	; (8002c0c <work_buzzer_handler+0x300>)
 80029ca:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 80029ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	aa02      	add	r2, sp, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4640      	mov	r0, r8
 80029da:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80029dc:	2800      	cmp	r0, #0
 80029de:	d1e8      	bne.n	80029b2 <work_buzzer_handler+0xa6>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80029e0:	9e02      	ldr	r6, [sp, #8]
 80029e2:	9f03      	ldr	r7, [sp, #12]
 80029e4:	00bc      	lsls	r4, r7, #2
 80029e6:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 80029ea:	00b3      	lsls	r3, r6, #2
 80029ec:	199b      	adds	r3, r3, r6
 80029ee:	eb47 0404 	adc.w	r4, r7, r4
 80029f2:	00e4      	lsls	r4, r4, #3
 80029f4:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1b9b      	subs	r3, r3, r6
 80029fc:	eb64 0407 	sbc.w	r4, r4, r7
 8002a00:	0124      	lsls	r4, r4, #4
 8002a02:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	199b      	adds	r3, r3, r6
 8002a0a:	eb47 0404 	adc.w	r4, r7, r4
 8002a0e:	01a4      	lsls	r4, r4, #6
 8002a10:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 8002a14:	019d      	lsls	r5, r3, #6
 8002a16:	4a7e      	ldr	r2, [pc, #504]	; (8002c10 <work_buzzer_handler+0x304>)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	f7fd ffdd 	bl	80009dc <__aeabi_uldivmod>
 8002a22:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a28:	42ab      	cmp	r3, r5
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <work_buzzer_handler+0x308>)
 8002a2c:	41a3      	sbcs	r3, r4
 8002a2e:	d3c0      	bcc.n	80029b2 <work_buzzer_handler+0xa6>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002a30:	00ba      	lsls	r2, r7, #2
 8002a32:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 8002a36:	00b3      	lsls	r3, r6, #2
 8002a38:	199b      	adds	r3, r3, r6
 8002a3a:	eb47 0202 	adc.w	r2, r7, r2
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1b9b      	subs	r3, r3, r6
 8002a48:	eb62 0207 	sbc.w	r2, r2, r7
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	199e      	adds	r6, r3, r6
 8002a56:	eb47 0702 	adc.w	r7, r7, r2
 8002a5a:	017f      	lsls	r7, r7, #5
 8002a5c:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 8002a60:	0176      	lsls	r6, r6, #5
 8002a62:	4a6b      	ldr	r2, [pc, #428]	; (8002c10 <work_buzzer_handler+0x304>)
 8002a64:	2300      	movs	r3, #0
 8002a66:	4630      	mov	r0, r6
 8002a68:	4639      	mov	r1, r7
 8002a6a:	f7fd ffb7 	bl	80009dc <__aeabi_uldivmod>
 8002a6e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a74:	42b2      	cmp	r2, r6
 8002a76:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <work_buzzer_handler+0x308>)
 8002a78:	41ba      	sbcs	r2, r7
 8002a7a:	d39a      	bcc.n	80029b2 <work_buzzer_handler+0xa6>
	api = (struct pwm_driver_api *)dev->api;
 8002a7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8002a80:	6814      	ldr	r4, [r2, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	464a      	mov	r2, r9
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
 8002a8e:	e790      	b.n	80029b2 <work_buzzer_handler+0xa6>
    switch (event_buzzer.signal->result) {
 8002a90:	2500      	movs	r5, #0
 8002a92:	e006      	b.n	8002aa2 <work_buzzer_handler+0x196>
	return z_impl_k_sleep(timeout);
 8002a94:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f00a fa41 	bl	800cf20 <z_impl_k_sleep>
                i++;
 8002a9e:	3501      	adds	r5, #1
 8002aa0:	b2ed      	uxtb	r5, r5
            while (i < 2) {
 8002aa2:	2d01      	cmp	r5, #1
 8002aa4:	d885      	bhi.n	80029b2 <work_buzzer_handler+0xa6>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8002aa6:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <work_buzzer_handler+0x300>)
 8002aa8:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 8002aaa:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	aa02      	add	r2, sp, #8
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d164      	bne.n	8002b84 <work_buzzer_handler+0x278>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002aba:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002abe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002ac2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002ac6:	ea44 7499 	orr.w	r4, r4, r9, lsr #30
 8002aca:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002ace:	eb13 0309 	adds.w	r3, r3, r9
 8002ad2:	eb48 0404 	adc.w	r4, r8, r4
 8002ad6:	00e4      	lsls	r4, r4, #3
 8002ad8:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	ebb3 0309 	subs.w	r3, r3, r9
 8002ae2:	eb64 0408 	sbc.w	r4, r4, r8
 8002ae6:	0124      	lsls	r4, r4, #4
 8002ae8:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	eb13 0309 	adds.w	r3, r3, r9
 8002af2:	eb48 0404 	adc.w	r4, r8, r4
 8002af6:	01a4      	lsls	r4, r4, #6
 8002af8:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 8002afc:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8002b00:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <work_buzzer_handler+0x304>)
 8002b02:	2300      	movs	r3, #0
 8002b04:	4650      	mov	r0, sl
 8002b06:	4621      	mov	r1, r4
 8002b08:	f7fd ff68 	bl	80009dc <__aeabi_uldivmod>
 8002b0c:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b12:	4553      	cmp	r3, sl
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <work_buzzer_handler+0x308>)
 8002b16:	41a3      	sbcs	r3, r4
 8002b18:	d334      	bcc.n	8002b84 <work_buzzer_handler+0x278>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002b1a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8002b1e:	ea42 7299 	orr.w	r2, r2, r9, lsr #30
 8002b22:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002b26:	eb13 0309 	adds.w	r3, r3, r9
 8002b2a:	eb48 0202 	adc.w	r2, r8, r2
 8002b2e:	00d2      	lsls	r2, r2, #3
 8002b30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	ebb3 0309 	subs.w	r3, r3, r9
 8002b3a:	eb62 0208 	sbc.w	r2, r2, r8
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	eb13 0309 	adds.w	r3, r3, r9
 8002b4a:	eb48 0802 	adc.w	r8, r8, r2
 8002b4e:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8002b52:	ea48 68d3 	orr.w	r8, r8, r3, lsr #27
 8002b56:	015c      	lsls	r4, r3, #5
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <work_buzzer_handler+0x304>)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4641      	mov	r1, r8
 8002b60:	f7fd ff3c 	bl	80009dc <__aeabi_uldivmod>
 8002b64:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8002b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b6a:	42a2      	cmp	r2, r4
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <work_buzzer_handler+0x308>)
 8002b6e:	eb72 0208 	sbcs.w	r2, r2, r8
 8002b72:	d307      	bcc.n	8002b84 <work_buzzer_handler+0x278>
	api = (struct pwm_driver_api *)dev->api;
 8002b74:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8002b76:	6814      	ldr	r4, [r2, #0]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	9200      	str	r2, [sp, #0]
 8002b7c:	463a      	mov	r2, r7
 8002b7e:	2102      	movs	r1, #2
 8002b80:	4630      	mov	r0, r6
 8002b82:	47a0      	blx	r4
 8002b84:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002b88:	2100      	movs	r1, #0
 8002b8a:	f00a f9c9 	bl	800cf20 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <work_buzzer_handler+0x300>)
 8002b90:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 8002b92:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	aa02      	add	r2, sp, #8
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	f47f af78 	bne.w	8002a94 <work_buzzer_handler+0x188>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002ba4:	9c02      	ldr	r4, [sp, #8]
 8002ba6:	9f03      	ldr	r7, [sp, #12]
 8002ba8:	00ba      	lsls	r2, r7, #2
 8002baa:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 8002bae:	00a3      	lsls	r3, r4, #2
 8002bb0:	191b      	adds	r3, r3, r4
 8002bb2:	eb47 0202 	adc.w	r2, r7, r2
 8002bb6:	00d2      	lsls	r2, r2, #3
 8002bb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1b1b      	subs	r3, r3, r4
 8002bc0:	eb62 0207 	sbc.w	r2, r2, r7
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	191b      	adds	r3, r3, r4
 8002bce:	eb47 0702 	adc.w	r7, r7, r2
 8002bd2:	01bf      	lsls	r7, r7, #6
 8002bd4:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 8002bd8:	019c      	lsls	r4, r3, #6
 8002bda:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <work_buzzer_handler+0x304>)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4620      	mov	r0, r4
 8002be0:	4639      	mov	r1, r7
 8002be2:	f7fd fefb 	bl	80009dc <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bec:	42a3      	cmp	r3, r4
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <work_buzzer_handler+0x308>)
 8002bf0:	41bb      	sbcs	r3, r7
 8002bf2:	f4ff af4f 	bcc.w	8002a94 <work_buzzer_handler+0x188>
	api = (struct pwm_driver_api *)dev->api;
 8002bf6:	68b3      	ldr	r3, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8002bf8:	681c      	ldr	r4, [r3, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2102      	movs	r1, #2
 8002c00:	4630      	mov	r0, r6
 8002c02:	47a0      	blx	r4
				  (uint32_t)pulse_cycles, flags);
 8002c04:	e746      	b.n	8002a94 <work_buzzer_handler+0x188>
 8002c06:	bf00      	nop
 8002c08:	20000040 	.word	0x20000040
 8002c0c:	20000ff0 	.word	0x20000ff0
 8002c10:	000f4240 	.word	0x000f4240
 8002c14:	000f423f 	.word	0x000f423f
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <work_buzzer_handler+0x3e0>)
 8002c1a:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 8002c1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	aa02      	add	r2, sp, #8
 8002c26:	2102      	movs	r1, #2
 8002c28:	4640      	mov	r0, r8
 8002c2a:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d156      	bne.n	8002cde <work_buzzer_handler+0x3d2>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002c30:	9e02      	ldr	r6, [sp, #8]
 8002c32:	9f03      	ldr	r7, [sp, #12]
 8002c34:	00bc      	lsls	r4, r7, #2
 8002c36:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 8002c3a:	00b3      	lsls	r3, r6, #2
 8002c3c:	199b      	adds	r3, r3, r6
 8002c3e:	eb47 0404 	adc.w	r4, r7, r4
 8002c42:	00e4      	lsls	r4, r4, #3
 8002c44:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1b9b      	subs	r3, r3, r6
 8002c4c:	eb64 0407 	sbc.w	r4, r4, r7
 8002c50:	0124      	lsls	r4, r4, #4
 8002c52:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	199b      	adds	r3, r3, r6
 8002c5a:	eb47 0404 	adc.w	r4, r7, r4
 8002c5e:	01a4      	lsls	r4, r4, #6
 8002c60:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 8002c64:	019d      	lsls	r5, r3, #6
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <work_buzzer_handler+0x3e4>)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f7fd feb5 	bl	80009dc <__aeabi_uldivmod>
 8002c72:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c78:	42ab      	cmp	r3, r5
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <work_buzzer_handler+0x3e8>)
 8002c7c:	41a3      	sbcs	r3, r4
 8002c7e:	d32e      	bcc.n	8002cde <work_buzzer_handler+0x3d2>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002c80:	00ba      	lsls	r2, r7, #2
 8002c82:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 8002c86:	00b3      	lsls	r3, r6, #2
 8002c88:	199b      	adds	r3, r3, r6
 8002c8a:	eb47 0202 	adc.w	r2, r7, r2
 8002c8e:	00d2      	lsls	r2, r2, #3
 8002c90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	1b9b      	subs	r3, r3, r6
 8002c98:	eb62 0207 	sbc.w	r2, r2, r7
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	199e      	adds	r6, r3, r6
 8002ca6:	eb47 0702 	adc.w	r7, r7, r2
 8002caa:	017f      	lsls	r7, r7, #5
 8002cac:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 8002cb0:	0176      	lsls	r6, r6, #5
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <work_buzzer_handler+0x3e4>)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	4639      	mov	r1, r7
 8002cba:	f7fd fe8f 	bl	80009dc <__aeabi_uldivmod>
 8002cbe:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc4:	42b2      	cmp	r2, r6
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <work_buzzer_handler+0x3e8>)
 8002cc8:	41ba      	sbcs	r2, r7
 8002cca:	d308      	bcc.n	8002cde <work_buzzer_handler+0x3d2>
	api = (struct pwm_driver_api *)dev->api;
 8002ccc:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8002cd0:	6814      	ldr	r4, [r2, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	464a      	mov	r2, r9
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4640      	mov	r0, r8
 8002cdc:	47a0      	blx	r4
 8002cde:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f00a f91c 	bl	800cf20 <z_impl_k_sleep>
 8002ce8:	e62b      	b.n	8002942 <work_buzzer_handler+0x36>
 8002cea:	bf00      	nop
 8002cec:	20000ff0 	.word	0x20000ff0
 8002cf0:	000f4240 	.word	0x000f4240
 8002cf4:	000f423f 	.word	0x000f423f

08002cf8 <proc_rx_data>:


bool proc_rx_data(struct k_msgq *msgq, uint8_t *recv_data, size_t len, struct message_s *rx_msg, uint8_t cur_dev_addr)
{
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4616      	mov	r6, r2
 8002cfe:	461c      	mov	r4, r3
 8002d00:	2700      	movs	r7, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2300      	movs	r3, #0
 8002d06:	f009 fa51 	bl	800c1ac <z_impl_k_msgq_get>
    uint32_t cur_msg = 0;
 8002d0a:	4639      	mov	r1, r7

    k_msgq_get(msgq, recv_data, K_NO_WAIT);

    for (uint8_t i = 0; i < len; ++i) {
 8002d0c:	463a      	mov	r2, r7
 8002d0e:	e016      	b.n	8002d3e <proc_rx_data+0x46>
        bit = input & BIT(0);
 8002d10:	f003 0001 	and.w	r0, r3, #1
        output |= bit;
 8002d14:	4338      	orrs	r0, r7
        output = output << 1;
 8002d16:	0040      	lsls	r0, r0, #1
 8002d18:	b2c7      	uxtb	r7, r0
        input = input >> 1;
 8002d1a:	085b      	lsrs	r3, r3, #1
        pos++;
 8002d1c:	f10c 0c01 	add.w	ip, ip, #1
 8002d20:	fa5f fc8c 	uxtb.w	ip, ip
    while( pos < 7 ) {
 8002d24:	f1bc 0f06 	cmp.w	ip, #6
 8002d28:	d9f2      	bls.n	8002d10 <proc_rx_data+0x18>
    bit = input & BIT(0);
 8002d2a:	f003 0301 	and.w	r3, r3, #1
    output |= bit;
 8002d2e:	433b      	orrs	r3, r7
        recv_data[i] = reverse(recv_data[i]);
 8002d30:	f88e 3000 	strb.w	r3, [lr]
        cur_msg |= (recv_data[i]) << i*8;
 8002d34:	00d0      	lsls	r0, r2, #3
 8002d36:	4083      	lsls	r3, r0
 8002d38:	4319      	orrs	r1, r3
    for (uint8_t i = 0; i < len; ++i) {
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	42b2      	cmp	r2, r6
 8002d40:	d205      	bcs.n	8002d4e <proc_rx_data+0x56>
        recv_data[i] = reverse(recv_data[i]);
 8002d42:	eb05 0e02 	add.w	lr, r5, r2
 8002d46:	5cab      	ldrb	r3, [r5, r2]
    uint8_t pos = 0;
 8002d48:	f04f 0c00 	mov.w	ip, #0
 8002d4c:	e7ea      	b.n	8002d24 <proc_rx_data+0x2c>
    uint8_t pos = 0;
 8002d4e:	2300      	movs	r3, #0
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8002d50:	4618      	mov	r0, r3
 8002d52:	e094      	b.n	8002e7e <proc_rx_data+0x186>
                extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8002d54:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002d56:	1c9a      	adds	r2, r3, #2
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	f280 808e 	bge.w	8002e7a <proc_rx_data+0x182>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002d5e:	1aee      	subs	r6, r5, r3
 8002d60:	2201      	movs	r2, #1
 8002d62:	fa02 f706 	lsl.w	r7, r2, r6
 8002d66:	7826      	ldrb	r6, [r4, #0]
 8002d68:	ea26 0607 	bic.w	r6, r6, r7
 8002d6c:	7026      	strb	r6, [r4, #0]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002d6e:	40aa      	lsls	r2, r5
 8002d70:	400a      	ands	r2, r1
 8002d72:	40da      	lsrs	r2, r3
 8002d74:	4332      	orrs	r2, r6
 8002d76:	7022      	strb	r2, [r4, #0]
        (*pos)++;
 8002d78:	3501      	adds	r5, #1
 8002d7a:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002d7c:	e7eb      	b.n	8002d56 <proc_rx_data+0x5e>
                extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8002d7e:	f104 0c01 	add.w	ip, r4, #1
 8002d82:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002d84:	1cda      	adds	r2, r3, #3
 8002d86:	4295      	cmp	r5, r2
 8002d88:	f280 808c 	bge.w	8002ea4 <proc_rx_data+0x1ac>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002d8c:	1aee      	subs	r6, r5, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	fa02 f706 	lsl.w	r7, r2, r6
 8002d94:	f89c 6000 	ldrb.w	r6, [ip]
 8002d98:	ea26 0607 	bic.w	r6, r6, r7
 8002d9c:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002da0:	40aa      	lsls	r2, r5
 8002da2:	400a      	ands	r2, r1
 8002da4:	40da      	lsrs	r2, r3
 8002da6:	4332      	orrs	r2, r6
 8002da8:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 8002dac:	3501      	adds	r5, #1
 8002dae:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002db0:	e7e8      	b.n	8002d84 <proc_rx_data+0x8c>
                extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8002db2:	f104 0c02 	add.w	ip, r4, #2
 8002db6:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	4295      	cmp	r5, r2
 8002dbc:	da74      	bge.n	8002ea8 <proc_rx_data+0x1b0>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002dbe:	1aee      	subs	r6, r5, r3
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f706 	lsl.w	r7, r2, r6
 8002dc6:	f89c 6000 	ldrb.w	r6, [ip]
 8002dca:	ea26 0607 	bic.w	r6, r6, r7
 8002dce:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002dd2:	40aa      	lsls	r2, r5
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	40da      	lsrs	r2, r3
 8002dd8:	4332      	orrs	r2, r6
 8002dda:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 8002dde:	3501      	adds	r5, #1
 8002de0:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002de2:	e7e9      	b.n	8002db8 <proc_rx_data+0xc0>
                extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8002de4:	f104 0c03 	add.w	ip, r4, #3
 8002de8:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	4295      	cmp	r5, r2
 8002dee:	da5d      	bge.n	8002eac <proc_rx_data+0x1b4>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002df0:	1aee      	subs	r6, r5, r3
 8002df2:	2201      	movs	r2, #1
 8002df4:	fa02 f706 	lsl.w	r7, r2, r6
 8002df8:	f89c 6000 	ldrb.w	r6, [ip]
 8002dfc:	ea26 0607 	bic.w	r6, r6, r7
 8002e00:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002e04:	40aa      	lsls	r2, r5
 8002e06:	400a      	ands	r2, r1
 8002e08:	40da      	lsrs	r2, r3
 8002e0a:	4332      	orrs	r2, r6
 8002e0c:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 8002e10:	3501      	adds	r5, #1
 8002e12:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002e14:	e7e9      	b.n	8002dea <proc_rx_data+0xf2>
                extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8002e16:	f104 0c04 	add.w	ip, r4, #4
 8002e1a:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4295      	cmp	r5, r2
 8002e20:	da46      	bge.n	8002eb0 <proc_rx_data+0x1b8>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002e22:	1aee      	subs	r6, r5, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f706 	lsl.w	r7, r2, r6
 8002e2a:	f89c 6000 	ldrb.w	r6, [ip]
 8002e2e:	ea26 0607 	bic.w	r6, r6, r7
 8002e32:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002e36:	40aa      	lsls	r2, r5
 8002e38:	400a      	ands	r2, r1
 8002e3a:	40da      	lsrs	r2, r3
 8002e3c:	4332      	orrs	r2, r6
 8002e3e:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 8002e42:	3501      	adds	r5, #1
 8002e44:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002e46:	e7e9      	b.n	8002e1c <proc_rx_data+0x124>
                extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8002e48:	f104 0c05 	add.w	ip, r4, #5
 8002e4c:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 8002e4e:	1cda      	adds	r2, r3, #3
 8002e50:	4295      	cmp	r5, r2
 8002e52:	da2f      	bge.n	8002eb4 <proc_rx_data+0x1bc>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002e54:	1aee      	subs	r6, r5, r3
 8002e56:	2201      	movs	r2, #1
 8002e58:	fa02 f706 	lsl.w	r7, r2, r6
 8002e5c:	f89c 6000 	ldrb.w	r6, [ip]
 8002e60:	ea26 0607 	bic.w	r6, r6, r7
 8002e64:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002e68:	40aa      	lsls	r2, r5
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	40da      	lsrs	r2, r3
 8002e6e:	4332      	orrs	r2, r6
 8002e70:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 8002e74:	3501      	adds	r5, #1
 8002e76:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 8002e78:	e7e9      	b.n	8002e4e <proc_rx_data+0x156>
 8002e7a:	462b      	mov	r3, r5
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	2805      	cmp	r0, #5
 8002e80:	dc1a      	bgt.n	8002eb8 <proc_rx_data+0x1c0>
        switch (cur_field) {
 8002e82:	2805      	cmp	r0, #5
 8002e84:	d8fa      	bhi.n	8002e7c <proc_rx_data+0x184>
 8002e86:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <proc_rx_data+0x194>)
 8002e88:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8002e8c:	08002d55 	.word	0x08002d55
 8002e90:	08002d7f 	.word	0x08002d7f
 8002e94:	08002db3 	.word	0x08002db3
 8002e98:	08002de5 	.word	0x08002de5
 8002e9c:	08002e17 	.word	0x08002e17
 8002ea0:	08002e49 	.word	0x08002e49
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	e7e9      	b.n	8002e7c <proc_rx_data+0x184>
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	e7e7      	b.n	8002e7c <proc_rx_data+0x184>
 8002eac:	462b      	mov	r3, r5
 8002eae:	e7e5      	b.n	8002e7c <proc_rx_data+0x184>
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	e7e3      	b.n	8002e7c <proc_rx_data+0x184>
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	e7e1      	b.n	8002e7c <proc_rx_data+0x184>
    }

    read_write_message(&cur_msg, rx_msg, false); /* fill rx_msg struct */
    if ( (rx_msg->receiver_addr != BROADCAST_ADDR) &&
 8002eb8:	7863      	ldrb	r3, [r4, #1]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d005      	beq.n	8002eca <proc_rx_data+0x1d2>
 8002ebe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d103      	bne.n	8002ece <proc_rx_data+0x1d6>
        LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg->receiver_addr, cur_dev_addr);
        LOG_DBG("Packet is filtered");
        return false;
    }

    return true;
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	e000      	b.n	8002ecc <proc_rx_data+0x1d4>
 8002eca:	2001      	movs	r0, #1
}
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
 8002ece:	2000      	movs	r0, #0
 8002ed0:	e7fc      	b.n	8002ecc <proc_rx_data+0x1d4>
 8002ed2:	bf00      	nop

08002ed4 <proc_tx_data>:


bool proc_tx_data(struct k_msgq *msgq, uint8_t *tx_data, size_t len, struct message_s *tx_msg)
{
 8002ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	4615      	mov	r5, r2
 8002edc:	461f      	mov	r7, r3
 8002ede:	2600      	movs	r6, #0
 8002ee0:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <proc_tx_data+0x1f0>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    uint32_t new_msg = 0;
    /* Check messages into queue
     * Beginning check priority queue, after check standard queue
     * If queue's is not empty receiving will be stopped */
    if (k_msgq_num_used_get(&msgq_tx_msg_prio)) {
 8002ee4:	b953      	cbnz	r3, 8002efc <proc_tx_data+0x28>
 8002ee6:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <proc_tx_data+0x1f4>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        k_msgq_get(&msgq_tx_msg_prio, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg_prio;
    } else if (k_msgq_num_used_get(&msgq_tx_msg)) {
 8002eea:	b98b      	cbnz	r3, 8002f10 <proc_tx_data+0x3c>
        k_msgq_get(&msgq_tx_msg, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg;
    } else {
        /* Return 1 */
        current_state = *current_state.next;
 8002eec:	4b77      	ldr	r3, [pc, #476]	; (80030cc <proc_tx_data+0x1f8>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ef4:	e883 0003 	stmia.w	r3, {r0, r1}
        return false;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e0e0      	b.n	80030be <proc_tx_data+0x1ea>
 8002efc:	2200      	movs	r2, #0
 8002efe:	2300      	movs	r3, #0
 8002f00:	4639      	mov	r1, r7
 8002f02:	4870      	ldr	r0, [pc, #448]	; (80030c4 <proc_tx_data+0x1f0>)
 8002f04:	f009 f952 	bl	800c1ac <z_impl_k_msgq_get>
    uint8_t pos = 0;
 8002f08:	2100      	movs	r1, #0
    uint32_t new_msg = 0;
 8002f0a:	460a      	mov	r2, r1
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8002f0c:	468c      	mov	ip, r1
 8002f0e:	e08e      	b.n	800302e <proc_tx_data+0x15a>
 8002f10:	2200      	movs	r2, #0
 8002f12:	2300      	movs	r3, #0
 8002f14:	4639      	mov	r1, r7
 8002f16:	486c      	ldr	r0, [pc, #432]	; (80030c8 <proc_tx_data+0x1f4>)
 8002f18:	f009 f948 	bl	800c1ac <z_impl_k_msgq_get>
        msgq = &msgq_tx_msg;
 8002f1c:	e7f4      	b.n	8002f08 <proc_tx_data+0x34>
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 8002f1e:	f897 8000 	ldrb.w	r8, [r7]
 8002f22:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 8002f24:	1c8b      	adds	r3, r1, #2
 8002f26:	4298      	cmp	r0, r3
 8002f28:	da7e      	bge.n	8003028 <proc_tx_data+0x154>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	fa03 fe00 	lsl.w	lr, r3, r0
 8002f30:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002f34:	1a42      	subs	r2, r0, r1
 8002f36:	fa03 f202 	lsl.w	r2, r3, r2
 8002f3a:	ea08 0202 	and.w	r2, r8, r2
 8002f3e:	408a      	lsls	r2, r1
 8002f40:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002f44:	4418      	add	r0, r3
 8002f46:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8002f48:	e7ec      	b.n	8002f24 <proc_tx_data+0x50>
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8002f4a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8002f4e:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 8002f50:	1ccb      	adds	r3, r1, #3
 8002f52:	4298      	cmp	r0, r3
 8002f54:	f280 8080 	bge.w	8003058 <proc_tx_data+0x184>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002f58:	2301      	movs	r3, #1
 8002f5a:	fa03 fe00 	lsl.w	lr, r3, r0
 8002f5e:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002f62:	1a42      	subs	r2, r0, r1
 8002f64:	fa03 f202 	lsl.w	r2, r3, r2
 8002f68:	ea08 0202 	and.w	r2, r8, r2
 8002f6c:	408a      	lsls	r2, r1
 8002f6e:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002f72:	4418      	add	r0, r3
 8002f74:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8002f76:	e7eb      	b.n	8002f50 <proc_tx_data+0x7c>
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 8002f78:	f897 8002 	ldrb.w	r8, [r7, #2]
 8002f7c:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 8002f7e:	1d0b      	adds	r3, r1, #4
 8002f80:	4298      	cmp	r0, r3
 8002f82:	da6b      	bge.n	800305c <proc_tx_data+0x188>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002f84:	2301      	movs	r3, #1
 8002f86:	fa03 fe00 	lsl.w	lr, r3, r0
 8002f8a:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002f8e:	1a42      	subs	r2, r0, r1
 8002f90:	fa03 f202 	lsl.w	r2, r3, r2
 8002f94:	ea08 0202 	and.w	r2, r8, r2
 8002f98:	408a      	lsls	r2, r1
 8002f9a:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002f9e:	4418      	add	r0, r3
 8002fa0:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8002fa2:	e7ec      	b.n	8002f7e <proc_tx_data+0xaa>
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 8002fa4:	f897 8003 	ldrb.w	r8, [r7, #3]
 8002fa8:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 8002faa:	1c4b      	adds	r3, r1, #1
 8002fac:	4298      	cmp	r0, r3
 8002fae:	da57      	bge.n	8003060 <proc_tx_data+0x18c>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	fa03 fe00 	lsl.w	lr, r3, r0
 8002fb6:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002fba:	1a42      	subs	r2, r0, r1
 8002fbc:	fa03 f202 	lsl.w	r2, r3, r2
 8002fc0:	ea08 0202 	and.w	r2, r8, r2
 8002fc4:	408a      	lsls	r2, r1
 8002fc6:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002fca:	4418      	add	r0, r3
 8002fcc:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8002fce:	e7ec      	b.n	8002faa <proc_tx_data+0xd6>
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 8002fd0:	f897 8004 	ldrb.w	r8, [r7, #4]
 8002fd4:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 8002fd6:	1c4b      	adds	r3, r1, #1
 8002fd8:	4298      	cmp	r0, r3
 8002fda:	da43      	bge.n	8003064 <proc_tx_data+0x190>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002fdc:	2301      	movs	r3, #1
 8002fde:	fa03 fe00 	lsl.w	lr, r3, r0
 8002fe2:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002fe6:	1a42      	subs	r2, r0, r1
 8002fe8:	fa03 f202 	lsl.w	r2, r3, r2
 8002fec:	ea08 0202 	and.w	r2, r8, r2
 8002ff0:	408a      	lsls	r2, r1
 8002ff2:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002ff6:	4418      	add	r0, r3
 8002ff8:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8002ffa:	e7ec      	b.n	8002fd6 <proc_tx_data+0x102>
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8002ffc:	f897 8005 	ldrb.w	r8, [r7, #5]
 8003000:	460b      	mov	r3, r1
    while ( *pos < start_pos + field_len ) {
 8003002:	1cc8      	adds	r0, r1, #3
 8003004:	4283      	cmp	r3, r0
 8003006:	da2f      	bge.n	8003068 <proc_tx_data+0x194>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 fe03 	lsl.w	lr, r0, r3
 800300e:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8003012:	1a5a      	subs	r2, r3, r1
 8003014:	fa00 f202 	lsl.w	r2, r0, r2
 8003018:	ea08 0202 	and.w	r2, r8, r2
 800301c:	408a      	lsls	r2, r1
 800301e:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8003022:	4403      	add	r3, r0
 8003024:	b2db      	uxtb	r3, r3
    while ( *pos < start_pos + field_len ) {
 8003026:	e7ec      	b.n	8003002 <proc_tx_data+0x12e>
 8003028:	4601      	mov	r1, r0
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800302a:	f10c 0c01 	add.w	ip, ip, #1
 800302e:	f1bc 0f05 	cmp.w	ip, #5
 8003032:	dc1b      	bgt.n	800306c <proc_tx_data+0x198>
        switch (cur_field) {
 8003034:	f1bc 0f05 	cmp.w	ip, #5
 8003038:	d8f7      	bhi.n	800302a <proc_tx_data+0x156>
 800303a:	a301      	add	r3, pc, #4	; (adr r3, 8003040 <proc_tx_data+0x16c>)
 800303c:	f853 f02c 	ldr.w	pc, [r3, ip, lsl #2]
 8003040:	08002f1f 	.word	0x08002f1f
 8003044:	08002f4b 	.word	0x08002f4b
 8003048:	08002f79 	.word	0x08002f79
 800304c:	08002fa5 	.word	0x08002fa5
 8003050:	08002fd1 	.word	0x08002fd1
 8003054:	08002ffd 	.word	0x08002ffd
 8003058:	4601      	mov	r1, r0
 800305a:	e7e6      	b.n	800302a <proc_tx_data+0x156>
 800305c:	4601      	mov	r1, r0
 800305e:	e7e4      	b.n	800302a <proc_tx_data+0x156>
 8003060:	4601      	mov	r1, r0
 8003062:	e7e2      	b.n	800302a <proc_tx_data+0x156>
 8003064:	4601      	mov	r1, r0
 8003066:	e7e0      	b.n	800302a <proc_tx_data+0x156>
 8003068:	4619      	mov	r1, r3
 800306a:	e7de      	b.n	800302a <proc_tx_data+0x156>
    }

    read_write_message(&new_msg, tx_msg, true);
    for (uint8_t i = 0; i < len; ++i) {
 800306c:	2100      	movs	r1, #0
 800306e:	e012      	b.n	8003096 <proc_tx_data+0x1c2>
        bit = input & BIT(0);
 8003070:	f00c 0301 	and.w	r3, ip, #1
        output |= bit;
 8003074:	4333      	orrs	r3, r6
        output = output << 1;
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	b2de      	uxtb	r6, r3
        input = input >> 1;
 800307a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        pos++;
 800307e:	3001      	adds	r0, #1
 8003080:	b2c0      	uxtb	r0, r0
    while( pos < 7 ) {
 8003082:	2806      	cmp	r0, #6
 8003084:	d9f4      	bls.n	8003070 <proc_tx_data+0x19c>
    bit = input & BIT(0);
 8003086:	f00c 0c01 	and.w	ip, ip, #1
    output |= bit;
 800308a:	ea46 0c0c 	orr.w	ip, r6, ip
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
        *(tx_data + i) = reverse(*(tx_data + i));
 800308e:	f88e c000 	strb.w	ip, [lr]
    for (uint8_t i = 0; i < len; ++i) {
 8003092:	3101      	adds	r1, #1
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	42a9      	cmp	r1, r5
 8003098:	d210      	bcs.n	80030bc <proc_tx_data+0x1e8>
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 800309a:	00cb      	lsls	r3, r1, #3
 800309c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80030a0:	fa0c fc03 	lsl.w	ip, ip, r3
 80030a4:	ea0c 0c02 	and.w	ip, ip, r2
 80030a8:	fa2c fc03 	lsr.w	ip, ip, r3
 80030ac:	eb04 0e01 	add.w	lr, r4, r1
 80030b0:	fa5f fc8c 	uxtb.w	ip, ip
 80030b4:	f804 c001 	strb.w	ip, [r4, r1]
    uint8_t pos = 0;
 80030b8:	2000      	movs	r0, #0
 80030ba:	e7e2      	b.n	8003082 <proc_tx_data+0x1ae>
    }
    return true;
 80030bc:	2001      	movs	r0, #1
}
 80030be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c2:	bf00      	nop
 80030c4:	20000674 	.word	0x20000674
 80030c8:	20000640 	.word	0x20000640
 80030cc:	20000ff4 	.word	0x20000ff4

080030d0 <dwork_enable_ind_handler>:


void dwork_enable_ind_handler(struct k_work *item)
{
 80030d0:	b500      	push	{lr}
 80030d2:	b083      	sub	sp, #12
    struct led_strip_indicate_s *strip_ind = nullptr;
 80030d4:	2300      	movs	r3, #0
 80030d6:	9301      	str	r3, [sp, #4]
	return z_impl_k_poll(events, num_events, timeout);
 80030d8:	2200      	movs	r2, #0
 80030da:	2300      	movs	r3, #0
 80030dc:	2101      	movs	r1, #1
 80030de:	480c      	ldr	r0, [pc, #48]	; (8003110 <dwork_enable_ind_handler+0x40>)
 80030e0:	f00a fbac 	bl	800d83c <z_impl_k_poll>

    if (!k_poll(&event_indicate, 1, K_NO_WAIT)) {
 80030e4:	b110      	cbz	r0, 80030ec <dwork_enable_ind_handler+0x1c>
        strip_ind = &disable_indication;
        k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
        event_indicate.signal->signaled = 0;
        event_indicate.state = K_POLL_STATE_NOT_READY;
    }
}
 80030e6:	b003      	add	sp, #12
 80030e8:	f85d fb04 	ldr.w	pc, [sp], #4
        strip_ind = &disable_indication;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <dwork_enable_ind_handler+0x44>)
 80030ee:	9301      	str	r3, [sp, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2300      	movs	r3, #0
 80030f4:	a901      	add	r1, sp, #4
 80030f6:	4808      	ldr	r0, [pc, #32]	; (8003118 <dwork_enable_ind_handler+0x48>)
 80030f8:	f008 fffc 	bl	800c0f4 <z_impl_k_msgq_put>
        event_indicate.signal->signaled = 0;
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <dwork_enable_ind_handler+0x40>)
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	2100      	movs	r1, #0
 8003102:	6091      	str	r1, [r2, #8]
        event_indicate.state = K_POLL_STATE_NOT_READY;
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	f361 3252 	bfi	r2, r1, #13, #6
 800310a:	60da      	str	r2, [r3, #12]
}
 800310c:	e7eb      	b.n	80030e6 <dwork_enable_ind_handler+0x16>
 800310e:	bf00      	nop
 8003110:	20000f48 	.word	0x20000f48
 8003114:	20000034 	.word	0x20000034
 8003118:	200005a4 	.word	0x200005a4

0800311c <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	b089      	sub	sp, #36	; 0x24
 8003122:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8003124:	f010 0a03 	ands.w	sl, r0, #3
 8003128:	f040 8215 	bne.w	8003556 <cbvprintf_package+0x43a>
 800312c:	4607      	mov	r7, r0
 800312e:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8003130:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8003132:	b1e0      	cbz	r0, 800316e <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8003134:	b127      	cbz	r7, 8003140 <cbvprintf_package+0x24>
 8003136:	1be2      	subs	r2, r4, r7
 8003138:	3204      	adds	r2, #4
 800313a:	455a      	cmp	r2, fp
 800313c:	f200 820e 	bhi.w	800355c <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 8003140:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8003142:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8003146:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 800314a:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 800314e:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 8003150:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 8003154:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8003156:	b107      	cbz	r7, 800315a <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 8003158:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 800315a:	4ac6      	ldr	r2, [pc, #792]	; (8003474 <cbvprintf_package+0x358>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f0c0 815a 	bcc.w	8003416 <cbvprintf_package+0x2fa>
 8003162:	4ac5      	ldr	r2, [pc, #788]	; (8003478 <cbvprintf_package+0x35c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	f0c0 817f 	bcc.w	8003468 <cbvprintf_package+0x34c>
 800316a:	2200      	movs	r2, #0
 800316c:	e154      	b.n	8003418 <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 800316e:	f001 0b07 	and.w	fp, r1, #7
 8003172:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8003174:	f1cb 0b08 	rsb	fp, fp, #8
 8003178:	e7dc      	b.n	8003134 <cbvprintf_package+0x18>
			if (*fmt == '%') {
 800317a:	2b25      	cmp	r3, #37	; 0x25
 800317c:	d105      	bne.n	800318a <cbvprintf_package+0x6e>
				parsing = true;
 800317e:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 8003180:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 8003184:	46c1      	mov	r9, r8
			continue;
 8003186:	e000      	b.n	800318a <cbvprintf_package+0x6e>
		switch (*fmt) {
 8003188:	2600      	movs	r6, #0
 800318a:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 800318c:	f105 0c01 	add.w	ip, r5, #1
 8003190:	786b      	ldrb	r3, [r5, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8184 	beq.w	80034a0 <cbvprintf_package+0x384>
		if (!parsing) {
 8003198:	2e00      	cmp	r6, #0
 800319a:	d0ee      	beq.n	800317a <cbvprintf_package+0x5e>
		switch (*fmt) {
 800319c:	f1a3 0120 	sub.w	r1, r3, #32
 80031a0:	295a      	cmp	r1, #90	; 0x5a
 80031a2:	d8f1      	bhi.n	8003188 <cbvprintf_package+0x6c>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <cbvprintf_package+0x90>)
 80031a6:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	0800318b 	.word	0x0800318b
 80031b0:	08003189 	.word	0x08003189
 80031b4:	08003189 	.word	0x08003189
 80031b8:	0800318b 	.word	0x0800318b
 80031bc:	08003189 	.word	0x08003189
 80031c0:	08003189 	.word	0x08003189
 80031c4:	08003189 	.word	0x08003189
 80031c8:	08003189 	.word	0x08003189
 80031cc:	08003189 	.word	0x08003189
 80031d0:	08003189 	.word	0x08003189
 80031d4:	08003339 	.word	0x08003339
 80031d8:	0800318b 	.word	0x0800318b
 80031dc:	08003189 	.word	0x08003189
 80031e0:	0800318b 	.word	0x0800318b
 80031e4:	0800318b 	.word	0x0800318b
 80031e8:	08003189 	.word	0x08003189
 80031ec:	0800318b 	.word	0x0800318b
 80031f0:	0800318b 	.word	0x0800318b
 80031f4:	0800318b 	.word	0x0800318b
 80031f8:	0800318b 	.word	0x0800318b
 80031fc:	0800318b 	.word	0x0800318b
 8003200:	0800318b 	.word	0x0800318b
 8003204:	0800318b 	.word	0x0800318b
 8003208:	0800318b 	.word	0x0800318b
 800320c:	0800318b 	.word	0x0800318b
 8003210:	0800318b 	.word	0x0800318b
 8003214:	08003189 	.word	0x08003189
 8003218:	08003189 	.word	0x08003189
 800321c:	08003189 	.word	0x08003189
 8003220:	08003189 	.word	0x08003189
 8003224:	08003189 	.word	0x08003189
 8003228:	08003189 	.word	0x08003189
 800322c:	08003189 	.word	0x08003189
 8003230:	080033a1 	.word	0x080033a1
 8003234:	08003189 	.word	0x08003189
 8003238:	08003189 	.word	0x08003189
 800323c:	08003189 	.word	0x08003189
 8003240:	080033a1 	.word	0x080033a1
 8003244:	080033a1 	.word	0x080033a1
 8003248:	080033a1 	.word	0x080033a1
 800324c:	08003189 	.word	0x08003189
 8003250:	08003189 	.word	0x08003189
 8003254:	08003189 	.word	0x08003189
 8003258:	08003189 	.word	0x08003189
 800325c:	0800318b 	.word	0x0800318b
 8003260:	08003189 	.word	0x08003189
 8003264:	08003189 	.word	0x08003189
 8003268:	08003189 	.word	0x08003189
 800326c:	08003189 	.word	0x08003189
 8003270:	08003189 	.word	0x08003189
 8003274:	08003189 	.word	0x08003189
 8003278:	08003189 	.word	0x08003189
 800327c:	08003189 	.word	0x08003189
 8003280:	08003189 	.word	0x08003189
 8003284:	08003189 	.word	0x08003189
 8003288:	08003189 	.word	0x08003189
 800328c:	08003331 	.word	0x08003331
 8003290:	08003189 	.word	0x08003189
 8003294:	08003189 	.word	0x08003189
 8003298:	08003189 	.word	0x08003189
 800329c:	08003189 	.word	0x08003189
 80032a0:	08003189 	.word	0x08003189
 80032a4:	08003189 	.word	0x08003189
 80032a8:	08003189 	.word	0x08003189
 80032ac:	08003189 	.word	0x08003189
 80032b0:	080033a1 	.word	0x080033a1
 80032b4:	08003189 	.word	0x08003189
 80032b8:	08003331 	.word	0x08003331
 80032bc:	08003331 	.word	0x08003331
 80032c0:	080033a1 	.word	0x080033a1
 80032c4:	080033a1 	.word	0x080033a1
 80032c8:	080033a1 	.word	0x080033a1
 80032cc:	0800318b 	.word	0x0800318b
 80032d0:	08003331 	.word	0x08003331
 80032d4:	08003319 	.word	0x08003319
 80032d8:	08003189 	.word	0x08003189
 80032dc:	0800318b 	.word	0x0800318b
 80032e0:	08003189 	.word	0x08003189
 80032e4:	08003401 	.word	0x08003401
 80032e8:	08003331 	.word	0x08003331
 80032ec:	08003401 	.word	0x08003401
 80032f0:	08003189 	.word	0x08003189
 80032f4:	08003189 	.word	0x08003189
 80032f8:	08003401 	.word	0x08003401
 80032fc:	08003329 	.word	0x08003329
 8003300:	08003331 	.word	0x08003331
 8003304:	08003189 	.word	0x08003189
 8003308:	08003189 	.word	0x08003189
 800330c:	08003331 	.word	0x08003331
 8003310:	08003189 	.word	0x08003189
 8003314:	08003321 	.word	0x08003321
			align = VA_STACK_ALIGN(intmax_t);
 8003318:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 800331c:	46c1      	mov	r9, r8
			continue;
 800331e:	e734      	b.n	800318a <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 8003320:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 8003324:	46c1      	mov	r9, r8
			continue;
 8003326:	e730      	b.n	800318a <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 8003328:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 800332c:	46c1      	mov	r9, r8
			continue;
 800332e:	e72c      	b.n	800318a <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 8003330:	782a      	ldrb	r2, [r5, #0]
 8003332:	2a6c      	cmp	r2, #108	; 0x6c
 8003334:	d026      	beq.n	8003384 <cbvprintf_package+0x268>
			parsing = false;
 8003336:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 8003338:	eb04 0208 	add.w	r2, r4, r8
 800333c:	3a01      	subs	r2, #1
 800333e:	f1c8 0100 	rsb	r1, r8, #0
 8003342:	400a      	ands	r2, r1
 8003344:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8003346:	b127      	cbz	r7, 8003352 <cbvprintf_package+0x236>
 8003348:	1bd1      	subs	r1, r2, r7
 800334a:	4449      	add	r1, r9
 800334c:	458b      	cmp	fp, r1
 800334e:	f0c0 8108 	bcc.w	8003562 <cbvprintf_package+0x446>
		if (*fmt == 's') {
 8003352:	2b73      	cmp	r3, #115	; 0x73
 8003354:	d059      	beq.n	800340a <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 8003356:	f1b9 0f04 	cmp.w	r9, #4
 800335a:	f000 8099 	beq.w	8003490 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 800335e:	f1b9 0f08 	cmp.w	r9, #8
 8003362:	f040 8107 	bne.w	8003574 <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 8003366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003368:	3307      	adds	r3, #7
 800336a:	f023 0307 	bic.w	r3, r3, #7
 800336e:	f103 0108 	add.w	r1, r3, #8
 8003372:	9112      	str	r1, [sp, #72]	; 0x48
 8003374:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 8003378:	b10f      	cbz	r7, 800337e <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 800337a:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 800337e:	f102 0408 	add.w	r4, r2, #8
 8003382:	e702      	b.n	800318a <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 8003384:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8003388:	2a6c      	cmp	r2, #108	; 0x6c
 800338a:	d004      	beq.n	8003396 <cbvprintf_package+0x27a>
			parsing = false;
 800338c:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 800338e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 8003392:	46c1      	mov	r9, r8
 8003394:	e7d0      	b.n	8003338 <cbvprintf_package+0x21c>
			parsing = false;
 8003396:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 8003398:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 800339c:	46c1      	mov	r9, r8
 800339e:	e7cb      	b.n	8003338 <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 80033a0:	782b      	ldrb	r3, [r5, #0]
 80033a2:	2b4c      	cmp	r3, #76	; 0x4c
 80033a4:	d01c      	beq.n	80033e0 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 80033a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033a8:	3307      	adds	r3, #7
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	f103 0208 	add.w	r2, r3, #8
 80033b2:	9212      	str	r2, [sp, #72]	; 0x48
 80033b4:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 80033b8:	1de2      	adds	r2, r4, #7
 80033ba:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 80033be:	b147      	cbz	r7, 80033d2 <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 80033c0:	1bd3      	subs	r3, r2, r7
 80033c2:	3308      	adds	r3, #8
 80033c4:	455b      	cmp	r3, fp
 80033c6:	d815      	bhi.n	80033f4 <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 80033c8:	782b      	ldrb	r3, [r5, #0]
 80033ca:	2b4c      	cmp	r3, #76	; 0x4c
 80033cc:	d015      	beq.n	80033fa <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 80033ce:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 80033d2:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 80033d6:	2600      	movs	r6, #0
			continue;
 80033d8:	f04f 0808 	mov.w	r8, #8
 80033dc:	46c1      	mov	r9, r8
 80033de:	e6d4      	b.n	800318a <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 80033e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80033e2:	3307      	adds	r3, #7
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	9212      	str	r2, [sp, #72]	; 0x48
 80033ee:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 80033f2:	e7e1      	b.n	80033b8 <cbvprintf_package+0x29c>
					return -ENOSPC;
 80033f4:	f06f 001b 	mvn.w	r0, #27
 80033f8:	e0aa      	b.n	8003550 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 80033fa:	e9c2 0100 	strd	r0, r1, [r2]
 80033fe:	e7e8      	b.n	80033d2 <cbvprintf_package+0x2b6>
			parsing = false;
 8003400:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 8003402:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 8003406:	46c1      	mov	r9, r8
 8003408:	e796      	b.n	8003338 <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 800340a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800340c:	1d1a      	adds	r2, r3, #4
 800340e:	9212      	str	r2, [sp, #72]	; 0x48
 8003410:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8003412:	4665      	mov	r5, ip
 8003414:	e69f      	b.n	8003156 <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 8003416:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 8003418:	9902      	ldr	r1, [sp, #8]
 800341a:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 800341e:	4610      	mov	r0, r2
 8003420:	b102      	cbz	r2, 8003424 <cbvprintf_package+0x308>
 8003422:	b1f9      	cbz	r1, 8003464 <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8003424:	eba4 0c07 	sub.w	ip, r4, r7
 8003428:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 800342c:	b119      	cbz	r1, 8003436 <cbvprintf_package+0x31a>
 800342e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003432:	f080 8099 	bcs.w	8003568 <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8003436:	9901      	ldr	r1, [sp, #4]
 8003438:	290f      	cmp	r1, #15
 800343a:	f200 8098 	bhi.w	800356e <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 800343e:	b1ef      	cbz	r7, 800347c <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	ab08      	add	r3, sp, #32
 8003444:	440b      	add	r3, r1
 8003446:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 800344a:	b178      	cbz	r0, 800346c <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 800344c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003450:	ab08      	add	r3, sp, #32
 8003452:	440b      	add	r3, r1
 8003454:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 8003458:	9b00      	ldr	r3, [sp, #0]
 800345a:	3301      	adds	r3, #1
 800345c:	9300      	str	r3, [sp, #0]
				s_idx++;
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	3301      	adds	r3, #1
 8003462:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 8003464:	3404      	adds	r4, #4
 8003466:	e691      	b.n	800318c <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 8003468:	2201      	movs	r2, #1
 800346a:	e7d5      	b.n	8003418 <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	9303      	str	r3, [sp, #12]
 8003472:	e7f4      	b.n	800345e <cbvprintf_package+0x342>
 8003474:	08012208 	.word	0x08012208
 8003478:	0801428c 	.word	0x0801428c
				} else if (is_ro) {
 800347c:	b110      	cbz	r0, 8003484 <cbvprintf_package+0x368>
					len += 1;
 800347e:	f10b 0b01 	add.w	fp, fp, #1
 8003482:	e7ec      	b.n	800345e <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fce6 	bl	8000e56 <strlen>
 800348a:	1c83      	adds	r3, r0, #2
 800348c:	449b      	add	fp, r3
 800348e:	e7e6      	b.n	800345e <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 8003490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003492:	1d19      	adds	r1, r3, #4
 8003494:	9112      	str	r1, [sp, #72]	; 0x48
 8003496:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 8003498:	b107      	cbz	r7, 800349c <cbvprintf_package+0x380>
				*(int *)buf = v;
 800349a:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 800349c:	1d14      	adds	r4, r2, #4
 800349e:	e674      	b.n	800318a <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 80034a0:	1be3      	subs	r3, r4, r7
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d268      	bcs.n	800357a <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 80034a8:	b15f      	cbz	r7, 80034c2 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 80034aa:	2200      	movs	r2, #0
 80034ac:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 80034b2:	9b03      	ldr	r3, [sp, #12]
 80034b4:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 80034b6:	9b00      	ldr	r3, [sp, #0]
 80034b8:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 80034ba:	b9d3      	cbnz	r3, 80034f2 <cbvprintf_package+0x3d6>
 80034bc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80034c0:	e039      	b.n	8003536 <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 80034c2:	445b      	add	r3, fp
 80034c4:	f1a3 0008 	sub.w	r0, r3, #8
 80034c8:	e042      	b.n	8003550 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 80034ca:	3301      	adds	r3, #1
 80034cc:	4298      	cmp	r0, r3
 80034ce:	d913      	bls.n	80034f8 <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80034d0:	aa08      	add	r2, sp, #32
 80034d2:	441a      	add	r2, r3
 80034d4:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80034d8:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 80034dc:	2a00      	cmp	r2, #0
 80034de:	daf4      	bge.n	80034ca <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 80034e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 80034e4:	1be2      	subs	r2, r4, r7
 80034e6:	3201      	adds	r2, #1
 80034e8:	4593      	cmp	fp, r2
 80034ea:	d349      	bcc.n	8003580 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 80034ec:	f804 1b01 	strb.w	r1, [r4], #1
 80034f0:	e7eb      	b.n	80034ca <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 80034f2:	4653      	mov	r3, sl
 80034f4:	9801      	ldr	r0, [sp, #4]
 80034f6:	e7e9      	b.n	80034cc <cbvprintf_package+0x3b0>
 80034f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80034fc:	e01b      	b.n	8003536 <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 80034fe:	ab08      	add	r3, sp, #32
 8003500:	4453      	add	r3, sl
 8003502:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 8003506:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8003510:	4640      	mov	r0, r8
 8003512:	f7fd fca0 	bl	8000e56 <strlen>
 8003516:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 8003518:	1be3      	subs	r3, r4, r7
 800351a:	442b      	add	r3, r5
 800351c:	3301      	adds	r3, #1
 800351e:	459b      	cmp	fp, r3
 8003520:	d331      	bcc.n	8003586 <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 8003522:	f804 6b01 	strb.w	r6, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8003526:	462a      	mov	r2, r5
 8003528:	4641      	mov	r1, r8
 800352a:	4620      	mov	r0, r4
 800352c:	f00e fb29 	bl	8011b82 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 8003530:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 8003532:	f10a 0a01 	add.w	sl, sl, #1
 8003536:	45d1      	cmp	r9, sl
 8003538:	d909      	bls.n	800354e <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 800353a:	9b00      	ldr	r3, [sp, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0de      	beq.n	80034fe <cbvprintf_package+0x3e2>
 8003540:	ab08      	add	r3, sp, #32
 8003542:	4453      	add	r3, sl
 8003544:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	dad8      	bge.n	80034fe <cbvprintf_package+0x3e2>
 800354c:	e7f1      	b.n	8003532 <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 800354e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8003550:	b009      	add	sp, #36	; 0x24
 8003552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 8003556:	f06f 000d 	mvn.w	r0, #13
 800355a:	e7f9      	b.n	8003550 <cbvprintf_package+0x434>
		return -ENOSPC;
 800355c:	f06f 001b 	mvn.w	r0, #27
 8003560:	e7f6      	b.n	8003550 <cbvprintf_package+0x434>
			return -ENOSPC;
 8003562:	f06f 001b 	mvn.w	r0, #27
 8003566:	e7f3      	b.n	8003550 <cbvprintf_package+0x434>
					return -EINVAL;
 8003568:	f06f 0015 	mvn.w	r0, #21
 800356c:	e7f0      	b.n	8003550 <cbvprintf_package+0x434>
					return -EINVAL;
 800356e:	f06f 0015 	mvn.w	r0, #21
 8003572:	e7ed      	b.n	8003550 <cbvprintf_package+0x434>
			return -EINVAL;
 8003574:	f06f 0015 	mvn.w	r0, #21
 8003578:	e7ea      	b.n	8003550 <cbvprintf_package+0x434>
		return -EINVAL;
 800357a:	f06f 0015 	mvn.w	r0, #21
 800357e:	e7e7      	b.n	8003550 <cbvprintf_package+0x434>
				return -ENOSPC;
 8003580:	f06f 001b 	mvn.w	r0, #27
 8003584:	e7e4      	b.n	8003550 <cbvprintf_package+0x434>
			return -ENOSPC;
 8003586:	f06f 001b 	mvn.w	r0, #27
 800358a:	e7e1      	b.n	8003550 <cbvprintf_package+0x434>

0800358c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 800358c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 800358e:	680b      	ldr	r3, [r1, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8003594:	4b01      	ldr	r3, [pc, #4]	; (800359c <char_out+0x10>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4798      	blx	r3
}
 800359a:	bd08      	pop	{r3, pc}
 800359c:	200000ac 	.word	0x200000ac

080035a0 <__printk_hook_install>:
	_char_out = fn;
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__printk_hook_install+0x8>)
 80035a2:	6018      	str	r0, [r3, #0]
}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	200000ac 	.word	0x200000ac

080035ac <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 80035ac:	b500      	push	{lr}
 80035ae:	b083      	sub	sp, #12
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80035b4:	2100      	movs	r1, #0
 80035b6:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 80035b8:	a901      	add	r1, sp, #4
 80035ba:	4803      	ldr	r0, [pc, #12]	; (80035c8 <vprintk+0x1c>)
 80035bc:	f000 fa2c 	bl	8003a18 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80035c0:	b003      	add	sp, #12
 80035c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c6:	bf00      	nop
 80035c8:	0800358d 	.word	0x0800358d

080035cc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80035d2:	9001      	str	r0, [sp, #4]
 80035d4:	9102      	str	r1, [sp, #8]
 80035d6:	2100      	movs	r1, #0
 80035d8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 80035da:	a901      	add	r1, sp, #4
 80035dc:	4805      	ldr	r0, [pc, #20]	; (80035f4 <vsnprintk+0x28>)
 80035de:	f000 fa1b 	bl	8003a18 <cbvprintf>

	if (ctx.count < ctx.max) {
 80035e2:	9b03      	ldr	r3, [sp, #12]
 80035e4:	9a02      	ldr	r2, [sp, #8]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	da01      	bge.n	80035ee <vsnprintk+0x22>
		str[ctx.count] = '\0';
 80035ea:	2200      	movs	r2, #0
 80035ec:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 80035ee:	9803      	ldr	r0, [sp, #12]
 80035f0:	b004      	add	sp, #16
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	0800f287 	.word	0x0800f287

080035f8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 80035f8:	4684      	mov	ip, r0
	const char *sp = *str;
 80035fa:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 80035fc:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 80035fe:	e005      	b.n	800360c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8003600:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003604:	3201      	adds	r2, #1
 8003606:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800360a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800360c:	7813      	ldrb	r3, [r2, #0]
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <extract_decimal+0x28>)
 8003610:	5c59      	ldrb	r1, [r3, r1]
 8003612:	f011 0f04 	tst.w	r1, #4
 8003616:	d1f3      	bne.n	8003600 <extract_decimal+0x8>
	}
	*str = sp;
 8003618:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	08014015 	.word	0x08014015

08003624 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 800362a:	2300      	movs	r3, #0
 800362c:	6003      	str	r3, [r0, #0]
 800362e:	6043      	str	r3, [r0, #4]
 8003630:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8003632:	784b      	ldrb	r3, [r1, #1]
 8003634:	2b25      	cmp	r3, #37	; 0x25
 8003636:	d002      	beq.n	800363e <extract_conversion+0x1a>
 8003638:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 800363a:	2501      	movs	r5, #1
 800363c:	e01f      	b.n	800367e <extract_conversion+0x5a>
		conv->specifier = *sp++;
 800363e:	1c88      	adds	r0, r1, #2
 8003640:	70e3      	strb	r3, [r4, #3]
		return sp;
 8003642:	e145      	b.n	80038d0 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8003644:	7823      	ldrb	r3, [r4, #0]
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	7023      	strb	r3, [r4, #0]
		if (loop) {
 800364c:	b1b5      	cbz	r5, 800367c <extract_conversion+0x58>
			++sp;
 800364e:	3601      	adds	r6, #1
 8003650:	e014      	b.n	800367c <extract_conversion+0x58>
			conv->flag_plus = true;
 8003652:	7823      	ldrb	r3, [r4, #0]
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	7023      	strb	r3, [r4, #0]
			break;
 800365a:	e7f7      	b.n	800364c <extract_conversion+0x28>
			conv->flag_space = true;
 800365c:	7823      	ldrb	r3, [r4, #0]
 800365e:	f043 0310 	orr.w	r3, r3, #16
 8003662:	7023      	strb	r3, [r4, #0]
			break;
 8003664:	e7f2      	b.n	800364c <extract_conversion+0x28>
			conv->flag_hash = true;
 8003666:	7823      	ldrb	r3, [r4, #0]
 8003668:	f043 0320 	orr.w	r3, r3, #32
 800366c:	7023      	strb	r3, [r4, #0]
			break;
 800366e:	e7ed      	b.n	800364c <extract_conversion+0x28>
			conv->flag_zero = true;
 8003670:	7823      	ldrb	r3, [r4, #0]
 8003672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003676:	7023      	strb	r3, [r4, #0]
			break;
 8003678:	e7e8      	b.n	800364c <extract_conversion+0x28>
		switch (*sp) {
 800367a:	2500      	movs	r5, #0
	} while (loop);
 800367c:	b345      	cbz	r5, 80036d0 <extract_conversion+0xac>
		switch (*sp) {
 800367e:	7833      	ldrb	r3, [r6, #0]
 8003680:	3b20      	subs	r3, #32
 8003682:	2b10      	cmp	r3, #16
 8003684:	d8f9      	bhi.n	800367a <extract_conversion+0x56>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <extract_conversion+0x68>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800365d 	.word	0x0800365d
 8003690:	0800367b 	.word	0x0800367b
 8003694:	0800367b 	.word	0x0800367b
 8003698:	08003667 	.word	0x08003667
 800369c:	0800367b 	.word	0x0800367b
 80036a0:	0800367b 	.word	0x0800367b
 80036a4:	0800367b 	.word	0x0800367b
 80036a8:	0800367b 	.word	0x0800367b
 80036ac:	0800367b 	.word	0x0800367b
 80036b0:	0800367b 	.word	0x0800367b
 80036b4:	0800367b 	.word	0x0800367b
 80036b8:	08003653 	.word	0x08003653
 80036bc:	0800367b 	.word	0x0800367b
 80036c0:	08003645 	.word	0x08003645
 80036c4:	0800367b 	.word	0x0800367b
 80036c8:	0800367b 	.word	0x0800367b
 80036cc:	08003671 	.word	0x08003671
	if (conv->flag_zero && conv->flag_dash) {
 80036d0:	7823      	ldrb	r3, [r4, #0]
 80036d2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80036d6:	2b44      	cmp	r3, #68	; 0x44
 80036d8:	d05f      	beq.n	800379a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 80036da:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 80036dc:	7823      	ldrb	r3, [r4, #0]
 80036de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 80036e4:	7833      	ldrb	r3, [r6, #0]
 80036e6:	2b2a      	cmp	r3, #42	; 0x2a
 80036e8:	d05c      	beq.n	80037a4 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 80036ea:	a801      	add	r0, sp, #4
 80036ec:	f7ff ff84 	bl	80035f8 <extract_decimal>
	if (sp != wp) {
 80036f0:	9b01      	ldr	r3, [sp, #4]
 80036f2:	429e      	cmp	r6, r3
 80036f4:	d00f      	beq.n	8003716 <extract_conversion+0xf2>
		conv->width_present = true;
 80036f6:	7823      	ldrb	r3, [r4, #0]
 80036f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 80036fe:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8003706:	2800      	cmp	r0, #0
 8003708:	db54      	blt.n	80037b4 <extract_conversion+0x190>
 800370a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 800370c:	4313      	orrs	r3, r2
 800370e:	7822      	ldrb	r2, [r4, #0]
 8003710:	f363 0241 	bfi	r2, r3, #1, #1
 8003714:	7022      	strb	r2, [r4, #0]
	return sp;
 8003716:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8003718:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b2e      	cmp	r3, #46	; 0x2e
 800371e:	bf14      	ite	ne
 8003720:	2300      	movne	r3, #0
 8003722:	2301      	moveq	r3, #1
 8003724:	7862      	ldrb	r2, [r4, #1]
 8003726:	f363 0241 	bfi	r2, r3, #1, #1
 800372a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 800372c:	2b00      	cmp	r3, #0
 800372e:	d043      	beq.n	80037b8 <extract_conversion+0x194>
	++sp;
 8003730:	9b01      	ldr	r3, [sp, #4]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b2a      	cmp	r3, #42	; 0x2a
 800373a:	d03f      	beq.n	80037bc <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 800373c:	a801      	add	r0, sp, #4
 800373e:	f7ff ff5b 	bl	80035f8 <extract_decimal>
	conv->prec_value = prec;
 8003742:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8003744:	7823      	ldrb	r3, [r4, #0]
 8003746:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 800374a:	2800      	cmp	r0, #0
 800374c:	db3e      	blt.n	80037cc <extract_conversion+0x1a8>
 800374e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8003750:	4313      	orrs	r3, r2
 8003752:	7822      	ldrb	r2, [r4, #0]
 8003754:	f363 0241 	bfi	r2, r3, #1, #1
 8003758:	7022      	strb	r2, [r4, #0]
	return sp;
 800375a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 800375c:	7803      	ldrb	r3, [r0, #0]
 800375e:	3b4c      	subs	r3, #76	; 0x4c
 8003760:	2b2e      	cmp	r3, #46	; 0x2e
 8003762:	f200 809d 	bhi.w	80038a0 <extract_conversion+0x27c>
 8003766:	e8df f003 	tbb	[pc, r3]
 800376a:	9b90      	.short	0x9b90
 800376c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003770:	9b9b9b9b 	.word	0x9b9b9b9b
 8003774:	9b9b9b9b 	.word	0x9b9b9b9b
 8003778:	9b9b9b9b 	.word	0x9b9b9b9b
 800377c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003780:	9b9b9b9b 	.word	0x9b9b9b9b
 8003784:	9b339b9b 	.word	0x9b339b9b
 8003788:	9b459b57 	.word	0x9b459b57
 800378c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003790:	9b899b9b 	.word	0x9b899b9b
 8003794:	9b9b9b9b 	.word	0x9b9b9b9b
 8003798:	82          	.byte	0x82
 8003799:	00          	.byte	0x00
		conv->flag_zero = false;
 800379a:	7823      	ldrb	r3, [r4, #0]
 800379c:	f36f 1386 	bfc	r3, #6, #1
 80037a0:	7023      	strb	r3, [r4, #0]
 80037a2:	e79a      	b.n	80036da <extract_conversion+0xb6>
		conv->width_star = true;
 80037a4:	7863      	ldrb	r3, [r4, #1]
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80037ac:	4633      	mov	r3, r6
 80037ae:	3301      	adds	r3, #1
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	e7b1      	b.n	8003718 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 80037b4:	2201      	movs	r2, #1
 80037b6:	e7a9      	b.n	800370c <extract_conversion+0xe8>
		return sp;
 80037b8:	9801      	ldr	r0, [sp, #4]
 80037ba:	e7cf      	b.n	800375c <extract_conversion+0x138>
		conv->prec_star = true;
 80037bc:	7863      	ldrb	r3, [r4, #1]
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80037c4:	4610      	mov	r0, r2
 80037c6:	3001      	adds	r0, #1
 80037c8:	9001      	str	r0, [sp, #4]
 80037ca:	e7c7      	b.n	800375c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 80037cc:	2201      	movs	r2, #1
 80037ce:	e7bf      	b.n	8003750 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 80037d0:	1c42      	adds	r2, r0, #1
 80037d2:	7843      	ldrb	r3, [r0, #1]
 80037d4:	2b68      	cmp	r3, #104	; 0x68
 80037d6:	d006      	beq.n	80037e6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 80037d8:	7863      	ldrb	r3, [r4, #1]
 80037da:	2102      	movs	r1, #2
 80037dc:	f361 03c6 	bfi	r3, r1, #3, #4
 80037e0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 80037e2:	4610      	mov	r0, r2
 80037e4:	e01e      	b.n	8003824 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 80037e6:	7863      	ldrb	r3, [r4, #1]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f362 03c6 	bfi	r3, r2, #3, #4
 80037ee:	7063      	strb	r3, [r4, #1]
			++sp;
 80037f0:	3002      	adds	r0, #2
 80037f2:	e017      	b.n	8003824 <extract_conversion+0x200>
		if (*++sp == 'l') {
 80037f4:	1c42      	adds	r2, r0, #1
 80037f6:	7843      	ldrb	r3, [r0, #1]
 80037f8:	2b6c      	cmp	r3, #108	; 0x6c
 80037fa:	d006      	beq.n	800380a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 80037fc:	7863      	ldrb	r3, [r4, #1]
 80037fe:	2103      	movs	r1, #3
 8003800:	f361 03c6 	bfi	r3, r1, #3, #4
 8003804:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8003806:	4610      	mov	r0, r2
 8003808:	e00c      	b.n	8003824 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 800380a:	7863      	ldrb	r3, [r4, #1]
 800380c:	2204      	movs	r2, #4
 800380e:	f362 03c6 	bfi	r3, r2, #3, #4
 8003812:	7063      	strb	r3, [r4, #1]
			++sp;
 8003814:	3002      	adds	r0, #2
 8003816:	e005      	b.n	8003824 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8003818:	7863      	ldrb	r3, [r4, #1]
 800381a:	2205      	movs	r2, #5
 800381c:	f362 03c6 	bfi	r3, r2, #3, #4
 8003820:	7063      	strb	r3, [r4, #1]
		++sp;
 8003822:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8003824:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003828:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 800382a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800382e:	2a37      	cmp	r2, #55	; 0x37
 8003830:	d87d      	bhi.n	800392e <extract_conversion+0x30a>
 8003832:	e8df f002 	tbb	[pc, r2]
 8003836:	7c5e      	.short	0x7c5e
 8003838:	5e5e7c7c 	.word	0x5e5e7c7c
 800383c:	7c7c7c5e 	.word	0x7c7c7c5e
 8003840:	7c7c7c7c 	.word	0x7c7c7c7c
 8003844:	7c7c7c7c 	.word	0x7c7c7c7c
 8003848:	7c7c7c7c 	.word	0x7c7c7c7c
 800384c:	7c7c4f7c 	.word	0x7c7c4f7c
 8003850:	7c7c7c7c 	.word	0x7c7c7c7c
 8003854:	7c5e7c7c 	.word	0x7c5e7c7c
 8003858:	5e5e3a4f 	.word	0x5e5e3a4f
 800385c:	7c3a7c5e 	.word	0x7c3a7c5e
 8003860:	657c7c7c 	.word	0x657c7c7c
 8003864:	7c7c714f 	.word	0x7c7c714f
 8003868:	7c4f7c71 	.word	0x7c4f7c71
 800386c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 800386e:	7863      	ldrb	r3, [r4, #1]
 8003870:	2206      	movs	r2, #6
 8003872:	f362 03c6 	bfi	r3, r2, #3, #4
 8003876:	7063      	strb	r3, [r4, #1]
		++sp;
 8003878:	3001      	adds	r0, #1
		break;
 800387a:	e7d3      	b.n	8003824 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 800387c:	7863      	ldrb	r3, [r4, #1]
 800387e:	2207      	movs	r2, #7
 8003880:	f362 03c6 	bfi	r3, r2, #3, #4
 8003884:	7063      	strb	r3, [r4, #1]
		++sp;
 8003886:	3001      	adds	r0, #1
		break;
 8003888:	e7cc      	b.n	8003824 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 800388a:	7863      	ldrb	r3, [r4, #1]
 800388c:	2208      	movs	r2, #8
 800388e:	f362 03c6 	bfi	r3, r2, #3, #4
 8003892:	7063      	strb	r3, [r4, #1]
		++sp;
 8003894:	3001      	adds	r0, #1
		conv->unsupported = true;
 8003896:	7823      	ldrb	r3, [r4, #0]
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	7023      	strb	r3, [r4, #0]
		break;
 800389e:	e7c1      	b.n	8003824 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 80038a0:	7863      	ldrb	r3, [r4, #1]
 80038a2:	f36f 03c6 	bfc	r3, #3, #4
 80038a6:	7063      	strb	r3, [r4, #1]
		break;
 80038a8:	e7bc      	b.n	8003824 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 80038aa:	78a2      	ldrb	r2, [r4, #2]
 80038ac:	2101      	movs	r1, #1
 80038ae:	f361 0202 	bfi	r2, r1, #0, #3
 80038b2:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80038b4:	7862      	ldrb	r2, [r4, #1]
 80038b6:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80038ba:	2a40      	cmp	r2, #64	; 0x40
 80038bc:	d010      	beq.n	80038e0 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 80038be:	2b63      	cmp	r3, #99	; 0x63
 80038c0:	d013      	beq.n	80038ea <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 80038c2:	7823      	ldrb	r3, [r4, #0]
 80038c4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80038c8:	4315      	orrs	r5, r2
 80038ca:	f365 0341 	bfi	r3, r5, #1, #1
 80038ce:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 80038d0:	b002      	add	sp, #8
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 80038d4:	78a2      	ldrb	r2, [r4, #2]
 80038d6:	2102      	movs	r1, #2
 80038d8:	f361 0202 	bfi	r2, r1, #0, #3
 80038dc:	70a2      	strb	r2, [r4, #2]
 80038de:	e7e9      	b.n	80038b4 <extract_conversion+0x290>
			conv->invalid = true;
 80038e0:	7821      	ldrb	r1, [r4, #0]
 80038e2:	f041 0101 	orr.w	r1, r1, #1
 80038e6:	7021      	strb	r1, [r4, #0]
 80038e8:	e7e9      	b.n	80038be <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80038ea:	1e15      	subs	r5, r2, #0
 80038ec:	bf18      	it	ne
 80038ee:	2501      	movne	r5, #1
 80038f0:	e7e7      	b.n	80038c2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 80038f2:	78a3      	ldrb	r3, [r4, #2]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f362 0302 	bfi	r3, r2, #0, #3
 80038fa:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 80038fc:	2501      	movs	r5, #1
			break;
 80038fe:	e7e0      	b.n	80038c2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003900:	78a3      	ldrb	r3, [r4, #2]
 8003902:	2203      	movs	r2, #3
 8003904:	f362 0302 	bfi	r3, r2, #0, #3
 8003908:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800390a:	7863      	ldrb	r3, [r4, #1]
 800390c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d1d6      	bne.n	80038c2 <extract_conversion+0x29e>
			unsupported = true;
 8003914:	2501      	movs	r5, #1
 8003916:	e7d4      	b.n	80038c2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003918:	78a3      	ldrb	r3, [r4, #2]
 800391a:	2203      	movs	r2, #3
 800391c:	f362 0302 	bfi	r3, r2, #0, #3
 8003920:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	f013 0f78 	tst.w	r3, #120	; 0x78
 8003928:	d0cb      	beq.n	80038c2 <extract_conversion+0x29e>
			unsupported = true;
 800392a:	2501      	movs	r5, #1
 800392c:	e7c9      	b.n	80038c2 <extract_conversion+0x29e>
		conv->invalid = true;
 800392e:	7823      	ldrb	r3, [r4, #0]
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	7023      	strb	r3, [r4, #0]
		break;
 8003936:	e7c4      	b.n	80038c2 <extract_conversion+0x29e>

08003938 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	b083      	sub	sp, #12
 800393e:	4604      	mov	r4, r0
 8003940:	460d      	mov	r5, r1
 8003942:	9201      	str	r2, [sp, #4]
 8003944:	469a      	mov	sl, r3
 8003946:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8003948:	78d3      	ldrb	r3, [r2, #3]
 800394a:	4a32      	ldr	r2, [pc, #200]	; (8003a14 <encode_uint+0xdc>)
 800394c:	f813 b002 	ldrb.w	fp, [r3, r2]
 8003950:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8003954:	2b6f      	cmp	r3, #111	; 0x6f
 8003956:	d00f      	beq.n	8003978 <encode_uint+0x40>
 8003958:	d906      	bls.n	8003968 <encode_uint+0x30>
 800395a:	2b70      	cmp	r3, #112	; 0x70
 800395c:	d00f      	beq.n	800397e <encode_uint+0x46>
 800395e:	2b78      	cmp	r3, #120	; 0x78
 8003960:	d110      	bne.n	8003984 <encode_uint+0x4c>
		return 16;
 8003962:	f04f 0910 	mov.w	r9, #16
 8003966:	e023      	b.n	80039b0 <encode_uint+0x78>
	switch (specifier) {
 8003968:	2b58      	cmp	r3, #88	; 0x58
 800396a:	d002      	beq.n	8003972 <encode_uint+0x3a>
 800396c:	f04f 090a 	mov.w	r9, #10
 8003970:	e01e      	b.n	80039b0 <encode_uint+0x78>
		return 16;
 8003972:	f04f 0910 	mov.w	r9, #16
 8003976:	e01b      	b.n	80039b0 <encode_uint+0x78>
		return 8;
 8003978:	f04f 0908 	mov.w	r9, #8
 800397c:	e018      	b.n	80039b0 <encode_uint+0x78>
		return 16;
 800397e:	f04f 0910 	mov.w	r9, #16
 8003982:	e015      	b.n	80039b0 <encode_uint+0x78>
	switch (specifier) {
 8003984:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8003988:	e012      	b.n	80039b0 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	3230      	adds	r2, #48	; 0x30
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8003994:	463a      	mov	r2, r7
 8003996:	4643      	mov	r3, r8
 8003998:	4620      	mov	r0, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fd f81e 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 80039a0:	42bc      	cmp	r4, r7
 80039a2:	f175 0300 	sbcs.w	r3, r5, #0
 80039a6:	d319      	bcc.n	80039dc <encode_uint+0xa4>
 80039a8:	4556      	cmp	r6, sl
 80039aa:	d917      	bls.n	80039dc <encode_uint+0xa4>
		value /= radix;
 80039ac:	4604      	mov	r4, r0
 80039ae:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 80039b0:	f04f 0800 	mov.w	r8, #0
 80039b4:	464f      	mov	r7, r9
 80039b6:	464a      	mov	r2, r9
 80039b8:	4643      	mov	r3, r8
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f7fd f80d 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039c2:	2a09      	cmp	r2, #9
 80039c4:	d9e1      	bls.n	800398a <encode_uint+0x52>
 80039c6:	f1bb 0f01 	cmp.w	fp, #1
 80039ca:	d003      	beq.n	80039d4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80039cc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039ce:	3257      	adds	r2, #87	; 0x57
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	e7dd      	b.n	8003990 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80039d4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80039d6:	3237      	adds	r2, #55	; 0x37
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	e7d9      	b.n	8003990 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80039dc:	9b01      	ldr	r3, [sp, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	f013 0f20 	tst.w	r3, #32
 80039e4:	d005      	beq.n	80039f2 <encode_uint+0xba>
		if (radix == 8) {
 80039e6:	f1b9 0f08 	cmp.w	r9, #8
 80039ea:	d006      	beq.n	80039fa <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 80039ec:	f1b9 0f10 	cmp.w	r9, #16
 80039f0:	d009      	beq.n	8003a06 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 80039f2:	4630      	mov	r0, r6
 80039f4:	b003      	add	sp, #12
 80039f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 80039fa:	9a01      	ldr	r2, [sp, #4]
 80039fc:	7893      	ldrb	r3, [r2, #2]
 80039fe:	f043 0308 	orr.w	r3, r3, #8
 8003a02:	7093      	strb	r3, [r2, #2]
 8003a04:	e7f5      	b.n	80039f2 <encode_uint+0xba>
			conv->altform_0c = true;
 8003a06:	9a01      	ldr	r2, [sp, #4]
 8003a08:	7893      	ldrb	r3, [r2, #2]
 8003a0a:	f043 0310 	orr.w	r3, r3, #16
 8003a0e:	7093      	strb	r3, [r2, #2]
 8003a10:	e7ef      	b.n	80039f2 <encode_uint+0xba>
 8003a12:	bf00      	nop
 8003a14:	08014015 	.word	0x08014015

08003a18 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8003a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1c:	b091      	sub	sp, #68	; 0x44
 8003a1e:	4606      	mov	r6, r0
 8003a20:	460d      	mov	r5, r1
 8003a22:	4691      	mov	r9, r2
 8003a24:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8003a26:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8003a28:	f899 0000 	ldrb.w	r0, [r9]
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	f000 82d5 	beq.w	8003fdc <cbvprintf+0x5c4>
		if (*fp != '%') {
 8003a32:	2825      	cmp	r0, #37	; 0x25
 8003a34:	d008      	beq.n	8003a48 <cbvprintf+0x30>
			OUTC(*fp++);
 8003a36:	f109 0901 	add.w	r9, r9, #1
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	47b0      	blx	r6
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	f2c0 82cd 	blt.w	8003fde <cbvprintf+0x5c6>
 8003a44:	3401      	adds	r4, #1
			continue;
 8003a46:	e7ef      	b.n	8003a28 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	9305      	str	r3, [sp, #20]
 8003a4e:	9306      	str	r3, [sp, #24]
 8003a50:	9307      	str	r3, [sp, #28]
 8003a52:	9308      	str	r3, [sp, #32]
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8003a56:	4649      	mov	r1, r9
 8003a58:	a806      	add	r0, sp, #24
 8003a5a:	f7ff fde3 	bl	8003624 <extract_conversion>
 8003a5e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8003a60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003a64:	f013 0f01 	tst.w	r3, #1
 8003a68:	f000 8097 	beq.w	8003b9a <cbvprintf+0x182>
			width = va_arg(ap, int);
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	9203      	str	r2, [sp, #12]
 8003a72:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f2c0 8088 	blt.w	8003b8a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8003a7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003a7e:	f013 0f04 	tst.w	r3, #4
 8003a82:	f000 809c 	beq.w	8003bbe <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	1d1a      	adds	r2, r3, #4
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8003a90:	f1ba 0f00 	cmp.w	sl, #0
 8003a94:	f2c0 808a 	blt.w	8003bac <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8003a9c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8003a9e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8003aa6:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003aaa:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	f000 808e 	beq.w	8003bd0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	f000 80d3 	beq.w	8003c60 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	f000 8124 	beq.w	8003d08 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	f000 813b 	beq.w	8003d3c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8003ac6:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8003aca:	f018 0b03 	ands.w	fp, r8, #3
 8003ace:	f040 813b 	bne.w	8003d48 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8003ad2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003ad6:	3b25      	subs	r3, #37	; 0x25
 8003ad8:	2b53      	cmp	r3, #83	; 0x53
 8003ada:	f200 81e6 	bhi.w	8003eaa <cbvprintf+0x492>
 8003ade:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ae2:	0140      	.short	0x0140
 8003ae4:	01e401e4 	.word	0x01e401e4
 8003ae8:	01e401e4 	.word	0x01e401e4
 8003aec:	01e401e4 	.word	0x01e401e4
 8003af0:	01e401e4 	.word	0x01e401e4
 8003af4:	01e401e4 	.word	0x01e401e4
 8003af8:	01e401e4 	.word	0x01e401e4
 8003afc:	01e401e4 	.word	0x01e401e4
 8003b00:	01e401e4 	.word	0x01e401e4
 8003b04:	01e401e4 	.word	0x01e401e4
 8003b08:	01e401e4 	.word	0x01e401e4
 8003b0c:	01e401e4 	.word	0x01e401e4
 8003b10:	01e401e4 	.word	0x01e401e4
 8003b14:	01e401e4 	.word	0x01e401e4
 8003b18:	01e401e4 	.word	0x01e401e4
 8003b1c:	01e401e4 	.word	0x01e401e4
 8003b20:	01e401e4 	.word	0x01e401e4
 8003b24:	01e401e4 	.word	0x01e401e4
 8003b28:	01e401e4 	.word	0x01e401e4
 8003b2c:	01e401e4 	.word	0x01e401e4
 8003b30:	01e401e4 	.word	0x01e401e4
 8003b34:	01e401e4 	.word	0x01e401e4
 8003b38:	01e401e4 	.word	0x01e401e4
 8003b3c:	01e401e4 	.word	0x01e401e4
 8003b40:	01e401e4 	.word	0x01e401e4
 8003b44:	01e401e4 	.word	0x01e401e4
 8003b48:	01e40181 	.word	0x01e40181
 8003b4c:	01e401e4 	.word	0x01e401e4
 8003b50:	01e401e4 	.word	0x01e401e4
 8003b54:	01e401e4 	.word	0x01e401e4
 8003b58:	01e401e4 	.word	0x01e401e4
 8003b5c:	015e01e4 	.word	0x015e01e4
 8003b60:	01e40167 	.word	0x01e40167
 8003b64:	01e401e4 	.word	0x01e401e4
 8003b68:	016701e4 	.word	0x016701e4
 8003b6c:	01e401e4 	.word	0x01e401e4
 8003b70:	01e401e4 	.word	0x01e401e4
 8003b74:	018101be 	.word	0x018101be
 8003b78:	01e401a2 	.word	0x01e401a2
 8003b7c:	014d01e4 	.word	0x014d01e4
 8003b80:	018101e4 	.word	0x018101e4
 8003b84:	01e401e4 	.word	0x01e401e4
 8003b88:	0181      	.short	0x0181
				conv->flag_dash = true;
 8003b8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8003b96:	427f      	negs	r7, r7
 8003b98:	e76f      	b.n	8003a7a <cbvprintf+0x62>
		} else if (conv->width_present) {
 8003b9a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db02      	blt.n	8003ba8 <cbvprintf+0x190>
		int width = -1;
 8003ba2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ba6:	e768      	b.n	8003a7a <cbvprintf+0x62>
			width = conv->width_value;
 8003ba8:	9f07      	ldr	r7, [sp, #28]
 8003baa:	e766      	b.n	8003a7a <cbvprintf+0x62>
				conv->prec_present = false;
 8003bac:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003bb0:	f36f 0341 	bfc	r3, #1, #1
 8003bb4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8003bb8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003bbc:	e76c      	b.n	8003a98 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8003bbe:	f013 0f02 	tst.w	r3, #2
 8003bc2:	d002      	beq.n	8003bca <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8003bc4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003bc8:	e766      	b.n	8003a98 <cbvprintf+0x80>
		int precision = -1;
 8003bca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003bce:	e763      	b.n	8003a98 <cbvprintf+0x80>
			switch (length_mod) {
 8003bd0:	1ecb      	subs	r3, r1, #3
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d804      	bhi.n	8003be0 <cbvprintf+0x1c8>
 8003bd6:	e8df f003 	tbb	[pc, r3]
 8003bda:	1d0b      	.short	0x1d0b
 8003bdc:	3529      	.short	0x3529
 8003bde:	35          	.byte	0x35
 8003bdf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8003be0:	9b03      	ldr	r3, [sp, #12]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	9203      	str	r2, [sp, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	17da      	asrs	r2, r3, #31
 8003bea:	9304      	str	r3, [sp, #16]
 8003bec:	9205      	str	r2, [sp, #20]
				break;
 8003bee:	e006      	b.n	8003bfe <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8003bf0:	9b03      	ldr	r3, [sp, #12]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	9203      	str	r2, [sp, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	17da      	asrs	r2, r3, #31
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8003bfe:	2901      	cmp	r1, #1
 8003c00:	d028      	beq.n	8003c54 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8003c02:	2902      	cmp	r1, #2
 8003c04:	f47f af5f 	bne.w	8003ac6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8003c08:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003c0c:	17da      	asrs	r2, r3, #31
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	9205      	str	r2, [sp, #20]
 8003c12:	e758      	b.n	8003ac6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8003c14:	9b03      	ldr	r3, [sp, #12]
 8003c16:	3307      	adds	r3, #7
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	f103 0208 	add.w	r2, r3, #8
 8003c20:	9203      	str	r2, [sp, #12]
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8003c26:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8003c2a:	e7e8      	b.n	8003bfe <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	3307      	adds	r3, #7
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	f103 0208 	add.w	r2, r3, #8
 8003c38:	9203      	str	r2, [sp, #12]
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8003c3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8003c42:	e7dc      	b.n	8003bfe <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	9203      	str	r2, [sp, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	17da      	asrs	r2, r3, #31
				value->sint =
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	9205      	str	r2, [sp, #20]
				break;
 8003c52:	e7d4      	b.n	8003bfe <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8003c54:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003c58:	9304      	str	r3, [sp, #16]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9305      	str	r3, [sp, #20]
 8003c5e:	e732      	b.n	8003ac6 <cbvprintf+0xae>
			switch (length_mod) {
 8003c60:	1ecb      	subs	r3, r1, #3
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d804      	bhi.n	8003c70 <cbvprintf+0x258>
 8003c66:	e8df f003 	tbb	[pc, r3]
 8003c6a:	1f0b      	.short	0x1f0b
 8003c6c:	4135      	.short	0x4135
 8003c6e:	41          	.byte	0x41
 8003c6f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	9203      	str	r2, [sp, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	9304      	str	r3, [sp, #16]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	9305      	str	r3, [sp, #20]
				break;
 8003c7e:	e01e      	b.n	8003cbe <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8003c80:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8003c84:	2b63      	cmp	r3, #99	; 0x63
 8003c86:	d007      	beq.n	8003c98 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	9203      	str	r2, [sp, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9305      	str	r3, [sp, #20]
 8003c96:	e012      	b.n	8003cbe <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	9203      	str	r2, [sp, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	9304      	str	r3, [sp, #16]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	e00a      	b.n	8003cbe <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	3307      	adds	r3, #7
 8003cac:	f023 0307 	bic.w	r3, r3, #7
 8003cb0:	f103 0208 	add.w	r2, r3, #8
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8003cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8003cbe:	2901      	cmp	r1, #1
 8003cc0:	d01c      	beq.n	8003cfc <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8003cc2:	2902      	cmp	r1, #2
 8003cc4:	f47f aeff 	bne.w	8003ac6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8003cc8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8003ccc:	9304      	str	r3, [sp, #16]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9305      	str	r3, [sp, #20]
 8003cd2:	e6f8      	b.n	8003ac6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	3307      	adds	r3, #7
 8003cd8:	f023 0307 	bic.w	r3, r3, #7
 8003cdc:	f103 0208 	add.w	r2, r3, #8
 8003ce0:	9203      	str	r2, [sp, #12]
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8003ce6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8003cea:	e7e8      	b.n	8003cbe <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	9203      	str	r2, [sp, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8003cf4:	9304      	str	r3, [sp, #16]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9305      	str	r3, [sp, #20]
				break;
 8003cfa:	e7e0      	b.n	8003cbe <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8003cfc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	2300      	movs	r3, #0
 8003d04:	9305      	str	r3, [sp, #20]
 8003d06:	e6de      	b.n	8003ac6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8003d08:	2908      	cmp	r1, #8
 8003d0a:	d00b      	beq.n	8003d24 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	3307      	adds	r3, #7
 8003d10:	f023 0307 	bic.w	r3, r3, #7
 8003d14:	f103 0208 	add.w	r2, r3, #8
 8003d18:	9203      	str	r2, [sp, #12]
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d22:	e6d0      	b.n	8003ac6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	3307      	adds	r3, #7
 8003d28:	f023 0307 	bic.w	r3, r3, #7
 8003d2c:	f103 0208 	add.w	r2, r3, #8
 8003d30:	9203      	str	r2, [sp, #12]
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d3a:	e6c4      	b.n	8003ac6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	9203      	str	r2, [sp, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	e6be      	b.n	8003ac6 <cbvprintf+0xae>
			OUTS(sp, fp);
 8003d48:	9f02      	ldr	r7, [sp, #8]
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	464a      	mov	r2, r9
 8003d4e:	4629      	mov	r1, r5
 8003d50:	4630      	mov	r0, r6
 8003d52:	f00b fb4c 	bl	800f3ee <outs>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	f2c0 8141 	blt.w	8003fde <cbvprintf+0x5c6>
 8003d5c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8003d5e:	46b9      	mov	r9, r7
			continue;
 8003d60:	e662      	b.n	8003a28 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8003d62:	4629      	mov	r1, r5
 8003d64:	2025      	movs	r0, #37	; 0x25
 8003d66:	47b0      	blx	r6
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	f2c0 8138 	blt.w	8003fde <cbvprintf+0x5c6>
 8003d6e:	3401      	adds	r4, #1
		char sign = 0;
 8003d70:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003d72:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8003d76:	f04f 0900 	mov.w	r9, #0
			break;
 8003d7a:	e09b      	b.n	8003eb4 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8003d7c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8003d80:	f1ba 0f00 	cmp.w	sl, #0
 8003d84:	db07      	blt.n	8003d96 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8003d86:	4651      	mov	r1, sl
 8003d88:	4648      	mov	r0, r9
 8003d8a:	f00e f81b 	bl	8011dc4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8003d8e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8003d92:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8003d94:	e08e      	b.n	8003eb4 <cbvprintf+0x49c>
				len = strlen(bps);
 8003d96:	4648      	mov	r0, r9
 8003d98:	f7fd f85d 	bl	8000e56 <strlen>
 8003d9c:	e7f7      	b.n	8003d8e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8003d9e:	9b04      	ldr	r3, [sp, #16]
 8003da0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8003da4:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8003da6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8003daa:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8003dae:	e081      	b.n	8003eb4 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8003db0:	f018 0f08 	tst.w	r8, #8
 8003db4:	d105      	bne.n	8003dc2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8003db6:	f018 0810 	ands.w	r8, r8, #16
 8003dba:	d004      	beq.n	8003dc6 <cbvprintf+0x3ae>
				sign = ' ';
 8003dbc:	f04f 0820 	mov.w	r8, #32
 8003dc0:	e001      	b.n	8003dc6 <cbvprintf+0x3ae>
				sign = '+';
 8003dc2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8003dc6:	9a04      	ldr	r2, [sp, #16]
 8003dc8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db02      	blt.n	8003dd4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8003dce:	9204      	str	r2, [sp, #16]
 8003dd0:	9305      	str	r3, [sp, #20]
 8003dd2:	e008      	b.n	8003de6 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8003dd4:	4252      	negs	r2, r2
 8003dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003dda:	9204      	str	r2, [sp, #16]
 8003ddc:	9305      	str	r3, [sp, #20]
				sign = '-';
 8003dde:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8003de2:	e000      	b.n	8003de6 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8003de4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8003de6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	ab0a      	add	r3, sp, #40	; 0x28
 8003dee:	aa06      	add	r2, sp, #24
 8003df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003df4:	f7ff fda0 	bl	8003938 <encode_uint>
 8003df8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8003dfa:	f1ba 0f00 	cmp.w	sl, #0
 8003dfe:	f2c0 8088 	blt.w	8003f12 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8003e02:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8003e06:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8003e0a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003e0e:	f36f 1286 	bfc	r2, #6, #1
 8003e12:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8003e16:	459a      	cmp	sl, r3
 8003e18:	d97e      	bls.n	8003f18 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8003e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8003e1e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8003e20:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003e24:	e046      	b.n	8003eb4 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8003e26:	9804      	ldr	r0, [sp, #16]
 8003e28:	b928      	cbnz	r0, 8003e36 <cbvprintf+0x41e>
		char sign = 0;
 8003e2a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8003e2c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003fe4 <cbvprintf+0x5cc>
			bps = "(nil)";
 8003e30:	f1aa 0905 	sub.w	r9, sl, #5
 8003e34:	e03e      	b.n	8003eb4 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8003e36:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	ab0a      	add	r3, sp, #40	; 0x28
 8003e3e:	aa06      	add	r2, sp, #24
 8003e40:	2100      	movs	r1, #0
 8003e42:	f7ff fd79 	bl	8003938 <encode_uint>
 8003e46:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8003e48:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003e4c:	f043 0310 	orr.w	r3, r3, #16
 8003e50:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8003e54:	2378      	movs	r3, #120	; 0x78
 8003e56:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 8003e5a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8003e5c:	e7cd      	b.n	8003dfa <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8003e5e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8003e60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003e64:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	d806      	bhi.n	8003e7a <cbvprintf+0x462>
 8003e6c:	e8df f003 	tbb	[pc, r3]
 8003e70:	0f0d0b04 	.word	0x0f0d0b04
 8003e74:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8003e78:	6014      	str	r4, [r2, #0]
		char sign = 0;
 8003e7a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003e7c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8003e80:	f04f 0900 	mov.w	r9, #0
}
 8003e84:	e016      	b.n	8003eb4 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8003e86:	7014      	strb	r4, [r2, #0]
		break;
 8003e88:	e7f7      	b.n	8003e7a <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8003e8a:	8014      	strh	r4, [r2, #0]
		break;
 8003e8c:	e7f5      	b.n	8003e7a <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8003e8e:	6014      	str	r4, [r2, #0]
		break;
 8003e90:	e7f3      	b.n	8003e7a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8003e92:	17e3      	asrs	r3, r4, #31
 8003e94:	6014      	str	r4, [r2, #0]
 8003e96:	6053      	str	r3, [r2, #4]
		break;
 8003e98:	e7ef      	b.n	8003e7a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8003e9a:	17e3      	asrs	r3, r4, #31
 8003e9c:	6014      	str	r4, [r2, #0]
 8003e9e:	6053      	str	r3, [r2, #4]
		break;
 8003ea0:	e7eb      	b.n	8003e7a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8003ea2:	6014      	str	r4, [r2, #0]
		break;
 8003ea4:	e7e9      	b.n	8003e7a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8003ea6:	6014      	str	r4, [r2, #0]
		break;
 8003ea8:	e7e7      	b.n	8003e7a <cbvprintf+0x462>
		switch (conv->specifier) {
 8003eaa:	46d8      	mov	r8, fp
 8003eac:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003eb0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8003eb4:	f1b9 0f00 	cmp.w	r9, #0
 8003eb8:	f000 808d 	beq.w	8003fd6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8003ebc:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8003ec0:	f1b8 0f00 	cmp.w	r8, #0
 8003ec4:	d000      	beq.n	8003ec8 <cbvprintf+0x4b0>
			nj_len += 1U;
 8003ec6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8003ec8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003ecc:	f011 0f10 	tst.w	r1, #16
 8003ed0:	d025      	beq.n	8003f1e <cbvprintf+0x506>
			nj_len += 2U;
 8003ed2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8003ed4:	9b07      	ldr	r3, [sp, #28]
 8003ed6:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8003ed8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003edc:	d001      	beq.n	8003ee2 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8003ede:	9a08      	ldr	r2, [sp, #32]
 8003ee0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	dd31      	ble.n	8003f4a <cbvprintf+0x532>
			width -= (int)nj_len;
 8003ee6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8003ee8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003eec:	f013 0f04 	tst.w	r3, #4
 8003ef0:	d12b      	bne.n	8003f4a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8003ef2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ef6:	d017      	beq.n	8003f28 <cbvprintf+0x510>
					if (sign != 0) {
 8003ef8:	f1b8 0f00 	cmp.w	r8, #0
 8003efc:	d017      	beq.n	8003f2e <cbvprintf+0x516>
						OUTC(sign);
 8003efe:	4629      	mov	r1, r5
 8003f00:	4640      	mov	r0, r8
 8003f02:	47b0      	blx	r6
 8003f04:	2800      	cmp	r0, #0
 8003f06:	db6a      	blt.n	8003fde <cbvprintf+0x5c6>
 8003f08:	3401      	adds	r4, #1
						sign = 0;
 8003f0a:	46d8      	mov	r8, fp
					}
					pad = '0';
 8003f0c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8003f10:	e00f      	b.n	8003f32 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8003f12:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003f16:	e7cd      	b.n	8003eb4 <cbvprintf+0x49c>
 8003f18:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003f1c:	e7ca      	b.n	8003eb4 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8003f1e:	f011 0f08 	tst.w	r1, #8
 8003f22:	d0d7      	beq.n	8003ed4 <cbvprintf+0x4bc>
			nj_len += 1U;
 8003f24:	3201      	adds	r2, #1
 8003f26:	e7d5      	b.n	8003ed4 <cbvprintf+0x4bc>
				char pad = ' ';
 8003f28:	f04f 0b20 	mov.w	fp, #32
 8003f2c:	e001      	b.n	8003f32 <cbvprintf+0x51a>
					pad = '0';
 8003f2e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8003f32:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8003f34:	1e5f      	subs	r7, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dd07      	ble.n	8003f4a <cbvprintf+0x532>
					OUTC(pad);
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4658      	mov	r0, fp
 8003f3e:	47b0      	blx	r6
 8003f40:	2800      	cmp	r0, #0
 8003f42:	db4c      	blt.n	8003fde <cbvprintf+0x5c6>
 8003f44:	3401      	adds	r4, #1
				while (width-- > 0) {
 8003f46:	463b      	mov	r3, r7
 8003f48:	e7f4      	b.n	8003f34 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 8003f4a:	f1b8 0f00 	cmp.w	r8, #0
 8003f4e:	d005      	beq.n	8003f5c <cbvprintf+0x544>
			OUTC(sign);
 8003f50:	4629      	mov	r1, r5
 8003f52:	4640      	mov	r0, r8
 8003f54:	47b0      	blx	r6
 8003f56:	2800      	cmp	r0, #0
 8003f58:	db41      	blt.n	8003fde <cbvprintf+0x5c6>
 8003f5a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8003f5c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003f60:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003f64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d005      	beq.n	8003f78 <cbvprintf+0x560>
				OUTC('0');
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	2030      	movs	r0, #48	; 0x30
 8003f70:	47b0      	blx	r6
 8003f72:	2800      	cmp	r0, #0
 8003f74:	db33      	blt.n	8003fde <cbvprintf+0x5c6>
 8003f76:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8003f78:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003f7c:	f013 0f10 	tst.w	r3, #16
 8003f80:	d006      	beq.n	8003f90 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8003f82:	4629      	mov	r1, r5
 8003f84:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8003f88:	47b0      	blx	r6
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	db27      	blt.n	8003fde <cbvprintf+0x5c6>
 8003f8e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8003f90:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8003f92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dd07      	ble.n	8003faa <cbvprintf+0x592>
				OUTC('0');
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	2030      	movs	r0, #48	; 0x30
 8003f9e:	47b0      	blx	r6
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	db1c      	blt.n	8003fde <cbvprintf+0x5c6>
 8003fa4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8003fa6:	4643      	mov	r3, r8
 8003fa8:	e7f3      	b.n	8003f92 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8003faa:	4653      	mov	r3, sl
 8003fac:	464a      	mov	r2, r9
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f00b fa1c 	bl	800f3ee <outs>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	db11      	blt.n	8003fde <cbvprintf+0x5c6>
 8003fba:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8003fbc:	2f00      	cmp	r7, #0
 8003fbe:	dd07      	ble.n	8003fd0 <cbvprintf+0x5b8>
			OUTC(' ');
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	2020      	movs	r0, #32
 8003fc4:	47b0      	blx	r6
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	db09      	blt.n	8003fde <cbvprintf+0x5c6>
 8003fca:	3401      	adds	r4, #1
			--width;
 8003fcc:	3f01      	subs	r7, #1
 8003fce:	e7f5      	b.n	8003fbc <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8003fd0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003fd4:	e528      	b.n	8003a28 <cbvprintf+0x10>
 8003fd6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003fda:	e525      	b.n	8003a28 <cbvprintf+0x10>
		}
	}

	return count;
 8003fdc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8003fde:	b011      	add	sp, #68	; 0x44
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	080129ed 	.word	0x080129ed

08003fe8 <stm32l4_init>:
	__asm__ volatile(
 8003fe8:	f04f 0210 	mov.w	r2, #16
 8003fec:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff0:	f382 8812 	msr	BASEPRI_MAX, r2
 8003ff4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <stm32l4_init+0x24>)
 8004002:	4a03      	ldr	r2, [pc, #12]	; (8004010 <stm32l4_init+0x28>)
 8004004:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004006:	2000      	movs	r0, #0
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000278 	.word	0x20000278
 8004010:	003d0900 	.word	0x003d0900

08004014 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8004014:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <thread_set+0x1c>)
 8004018:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 800401a:	b118      	cbz	r0, 8004024 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <thread_set+0x20>)
 800401e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8004020:	2b09      	cmp	r3, #9
 8004022:	dc00      	bgt.n	8004026 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8004024:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8004026:	4804      	ldr	r0, [pc, #16]	; (8004038 <thread_set+0x24>)
 8004028:	f008 f9ec 	bl	800c404 <z_impl_k_sem_give>
}
 800402c:	e7fa      	b.n	8004024 <thread_set+0x10>
 800402e:	bf00      	nop
 8004030:	20001070 	.word	0x20001070
 8004034:	20001024 	.word	0x20001024
 8004038:	200006a8 	.word	0x200006a8

0800403c <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 800403c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <log_process_thread_timer_expiry_fn+0xc>)
 8004040:	f008 f9e0 	bl	800c404 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8004044:	bd08      	pop	{r3, pc}
 8004046:	bf00      	nop
 8004048:	200006a8 	.word	0x200006a8

0800404c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 800404c:	b530      	push	{r4, r5, lr}
 800404e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8004050:	2200      	movs	r2, #0
 8004052:	490f      	ldr	r1, [pc, #60]	; (8004090 <enable_logger+0x44>)
 8004054:	480f      	ldr	r0, [pc, #60]	; (8004094 <enable_logger+0x48>)
 8004056:	f00d fcc8 	bl	80119ea <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800405a:	4d0f      	ldr	r5, [pc, #60]	; (8004098 <enable_logger+0x4c>)
 800405c:	2200      	movs	r2, #0
 800405e:	2300      	movs	r3, #0
 8004060:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004064:	2400      	movs	r4, #0
 8004066:	9404      	str	r4, [sp, #16]
 8004068:	230e      	movs	r3, #14
 800406a:	9303      	str	r3, [sp, #12]
 800406c:	9402      	str	r4, [sp, #8]
 800406e:	9401      	str	r4, [sp, #4]
 8004070:	9400      	str	r4, [sp, #0]
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <enable_logger+0x50>)
 8004074:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <enable_logger+0x54>)
 800407a:	4628      	mov	r0, r5
 800407c:	f00d f97d 	bl	801137a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8004080:	4908      	ldr	r1, [pc, #32]	; (80040a4 <enable_logger+0x58>)
 8004082:	4628      	mov	r0, r5
 8004084:	f00d f965 	bl	8011352 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8004088:	4620      	mov	r0, r4
 800408a:	b009      	add	sp, #36	; 0x24
 800408c:	bd30      	pop	{r4, r5, pc}
 800408e:	bf00      	nop
 8004090:	0800403d 	.word	0x0800403d
 8004094:	20000ca8 	.word	0x20000ca8
 8004098:	20000ce0 	.word	0x20000ce0
 800409c:	08004441 	.word	0x08004441
 80040a0:	200023a0 	.word	0x200023a0
 80040a4:	080129f4 	.word	0x080129f4

080040a8 <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <log_init+0x64>)
 80040aa:	f3bf 8f5b 	dmb	ish
 80040ae:	e853 2f00 	ldrex	r2, [r3]
 80040b2:	1c51      	adds	r1, r2, #1
 80040b4:	e843 1000 	strex	r0, r1, [r3]
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d1f8      	bne.n	80040ae <log_init+0x6>
 80040bc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 80040c0:	bb1a      	cbnz	r2, 800410a <log_init+0x62>
{
 80040c2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 80040c4:	2400      	movs	r4, #0
 80040c6:	e009      	b.n	80040dc <log_init+0x34>
					   backend->cb->ctx,
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <log_init+0x68>)
 80040ca:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80040ce:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 80040d0:	2204      	movs	r2, #4
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 f9d9 	bl	800448c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 80040da:	3401      	adds	r4, #1
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <log_init+0x6c>)
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <log_init+0x68>)
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80040e6:	da0f      	bge.n	8004108 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 80040e8:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 80040ea:	4d09      	ldr	r5, [pc, #36]	; (8004110 <log_init+0x68>)
 80040ec:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 80040f0:	7b2b      	ldrb	r3, [r5, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f1      	beq.n	80040da <log_init+0x32>
			if (backend->api->init != NULL) {
 80040f6:	0123      	lsls	r3, r4, #4
 80040f8:	4a05      	ldr	r2, [pc, #20]	; (8004110 <log_init+0x68>)
 80040fa:	58d3      	ldr	r3, [r2, r3]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0e2      	beq.n	80040c8 <log_init+0x20>
				backend->api->init(backend);
 8004102:	4628      	mov	r0, r5
 8004104:	4798      	blx	r3
 8004106:	e7df      	b.n	80040c8 <log_init+0x20>
}
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	4770      	bx	lr
 800410c:	2000102c 	.word	0x2000102c
 8004110:	08012778 	.word	0x08012778
 8004114:	08012788 	.word	0x08012788

08004118 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 8004118:	b138      	cbz	r0, 800412a <log_set_timestamp_func+0x12>
{
 800411a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <log_set_timestamp_func+0x18>)
 800411e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8004120:	4608      	mov	r0, r1
 8004122:	f000 fba3 	bl	800486c <log_output_timestamp_freq_set>
	return 0;
 8004126:	2000      	movs	r0, #0
}
 8004128:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800412a:	f06f 0015 	mvn.w	r0, #21
}
 800412e:	4770      	bx	lr
 8004130:	200000b0 	.word	0x200000b0

08004134 <z_log_notify_backend_enabled>:
{
 8004134:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <z_log_notify_backend_enabled+0x18>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b11b      	cbz	r3, 8004144 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <z_log_notify_backend_enabled+0x18>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
}
 8004142:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <z_log_notify_backend_enabled+0x1c>)
 8004146:	f008 f95d 	bl	800c404 <z_impl_k_sem_give>
}
 800414a:	e7f7      	b.n	800413c <z_log_notify_backend_enabled+0x8>
 800414c:	20001734 	.word	0x20001734
 8004150:	200006a8 	.word	0x200006a8

08004154 <z_log_dropped>:
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <z_log_dropped+0x38>)
 8004156:	f3bf 8f5b 	dmb	ish
 800415a:	e853 2f00 	ldrex	r2, [r3]
 800415e:	3201      	adds	r2, #1
 8004160:	e843 2100 	strex	r1, r2, [r3]
 8004164:	2900      	cmp	r1, #0
 8004166:	d1f8      	bne.n	800415a <z_log_dropped+0x6>
 8004168:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 800416c:	b900      	cbnz	r0, 8004170 <z_log_dropped+0x1c>
}
 800416e:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <z_log_dropped+0x3c>)
 8004172:	f3bf 8f5b 	dmb	ish
 8004176:	e853 2f00 	ldrex	r2, [r3]
 800417a:	3a01      	subs	r2, #1
 800417c:	e843 2100 	strex	r1, r2, [r3]
 8004180:	2900      	cmp	r1, #0
 8004182:	d1f8      	bne.n	8004176 <z_log_dropped+0x22>
 8004184:	f3bf 8f5b 	dmb	ish
 8004188:	e7f1      	b.n	800416e <z_log_dropped+0x1a>
 800418a:	bf00      	nop
 800418c:	20001028 	.word	0x20001028
 8004190:	20001024 	.word	0x20001024

08004194 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <z_log_dropped_read_and_clear+0x1c>)
}
 8004196:	2000      	movs	r0, #0
 8004198:	4602      	mov	r2, r0
 800419a:	f3bf 8f5b 	dmb	ish
 800419e:	e853 0f00 	ldrex	r0, [r3]
 80041a2:	e843 2100 	strex	r1, r2, [r3]
 80041a6:	2900      	cmp	r1, #0
 80041a8:	d1f9      	bne.n	800419e <z_log_dropped_read_and_clear+0xa>
 80041aa:	f3bf 8f5b 	dmb	ish
 80041ae:	4770      	bx	lr
 80041b0:	20001028 	.word	0x20001028

080041b4 <dropped_notify>:
{
 80041b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80041b6:	f7ff ffed 	bl	8004194 <z_log_dropped_read_and_clear>
 80041ba:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 80041bc:	2400      	movs	r4, #0
 80041be:	e000      	b.n	80041c2 <dropped_notify+0xe>
 80041c0:	3401      	adds	r4, #1
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <dropped_notify+0x3c>)
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <dropped_notify+0x40>)
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80041cc:	da0f      	bge.n	80041ee <dropped_notify+0x3a>
 80041ce:	4809      	ldr	r0, [pc, #36]	; (80041f4 <dropped_notify+0x40>)
 80041d0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80041d4:	6843      	ldr	r3, [r0, #4]
 80041d6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f1      	beq.n	80041c0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 80041dc:	0123      	lsls	r3, r4, #4
 80041de:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <dropped_notify+0x40>)
 80041e0:	58d3      	ldr	r3, [r2, r3]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0eb      	beq.n	80041c0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 80041e8:	4629      	mov	r1, r5
 80041ea:	4798      	blx	r3
 80041ec:	e7e8      	b.n	80041c0 <dropped_notify+0xc>
}
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	08012788 	.word	0x08012788
 80041f4:	08012778 	.word	0x08012778

080041f8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <z_log_dropped_pending+0x10>)
 80041fa:	6818      	ldr	r0, [r3, #0]
}
 80041fc:	2800      	cmp	r0, #0
 80041fe:	bfd4      	ite	le
 8004200:	2000      	movle	r0, #0
 8004202:	2001      	movgt	r0, #1
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20001028 	.word	0x20001028

0800420c <z_log_msg2_init>:
{
 800420c:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 800420e:	4902      	ldr	r1, [pc, #8]	; (8004218 <z_log_msg2_init+0xc>)
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <z_log_msg2_init+0x10>)
 8004212:	f00b f9b8 	bl	800f586 <mpsc_pbuf_init>
}
 8004216:	bd08      	pop	{r3, pc}
 8004218:	08012a00 	.word	0x08012a00
 800421c:	20001030 	.word	0x20001030

08004220 <log_core_init>:
{
 8004220:	b508      	push	{r3, lr}
	panic_mode = false;
 8004222:	2300      	movs	r3, #0
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <log_core_init+0x1c>)
 8004226:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <log_core_init+0x20>)
 800422a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 800422c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004230:	4804      	ldr	r0, [pc, #16]	; (8004244 <log_core_init+0x24>)
 8004232:	f7ff ff71 	bl	8004118 <log_set_timestamp_func>
		z_log_msg2_init();
 8004236:	f7ff ffe9 	bl	800420c <z_log_msg2_init>
}
 800423a:	bd08      	pop	{r3, pc}
 800423c:	20001735 	.word	0x20001735
 8004240:	20001028 	.word	0x20001028
 8004244:	0800f8ef 	.word	0x0800f8ef

08004248 <z_log_msg2_alloc>:
{
 8004248:	b508      	push	{r3, lr}
 800424a:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 800424c:	2200      	movs	r2, #0
 800424e:	2300      	movs	r3, #0
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <z_log_msg2_alloc+0x10>)
 8004252:	f00b f9bd 	bl	800f5d0 <mpsc_pbuf_alloc>
}
 8004256:	bd08      	pop	{r3, pc}
 8004258:	20001030 	.word	0x20001030

0800425c <z_log_msg2_claim>:
{
 800425c:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 800425e:	4802      	ldr	r0, [pc, #8]	; (8004268 <z_log_msg2_claim+0xc>)
 8004260:	f00b fa73 	bl	800f74a <mpsc_pbuf_claim>
}
 8004264:	bd08      	pop	{r3, pc}
 8004266:	bf00      	nop
 8004268:	20001030 	.word	0x20001030

0800426c <z_log_msg2_free>:
{
 800426c:	b508      	push	{r3, lr}
 800426e:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <z_log_msg2_free+0xc>)
 8004272:	f00b fadb 	bl	800f82c <mpsc_pbuf_free>
}
 8004276:	bd08      	pop	{r3, pc}
 8004278:	20001030 	.word	0x20001030

0800427c <msg_process>:
{
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	4606      	mov	r6, r0
	if (!bypass) {
 8004280:	b9e9      	cbnz	r1, 80042be <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8004282:	2400      	movs	r4, #0
 8004284:	e000      	b.n	8004288 <msg_process+0xc>
 8004286:	3401      	adds	r4, #1
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <msg_process+0x4c>)
 800428a:	4a10      	ldr	r2, [pc, #64]	; (80042cc <msg_process+0x50>)
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004292:	da14      	bge.n	80042be <msg_process+0x42>
	return &__log_backends_start[idx];
 8004294:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <msg_process+0x50>)
 8004296:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 800429a:	686b      	ldr	r3, [r5, #4]
 800429c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f1      	beq.n	8004286 <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 80042a2:	4631      	mov	r1, r6
 80042a4:	4628      	mov	r0, r5
 80042a6:	f00b fb20 	bl	800f8ea <msg_filter_check>
			if (log_backend_is_active(backend) &&
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0eb      	beq.n	8004286 <msg_process+0xa>
	backend->api->process(backend, msg);
 80042ae:	0127      	lsls	r7, r4, #4
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <msg_process+0x50>)
 80042b2:	59db      	ldr	r3, [r3, r7]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4631      	mov	r1, r6
 80042b8:	4628      	mov	r0, r5
 80042ba:	4798      	blx	r3
}
 80042bc:	e7e3      	b.n	8004286 <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 80042be:	4630      	mov	r0, r6
 80042c0:	f7ff ffd4 	bl	800426c <z_log_msg2_free>
}
 80042c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c6:	bf00      	nop
 80042c8:	08012788 	.word	0x08012788
 80042cc:	08012778 	.word	0x08012778

080042d0 <z_log_msg2_pending>:
{
 80042d0:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 80042d2:	4802      	ldr	r0, [pc, #8]	; (80042dc <z_log_msg2_pending+0xc>)
 80042d4:	f00b fae7 	bl	800f8a6 <mpsc_pbuf_is_pending>
}
 80042d8:	bd08      	pop	{r3, pc}
 80042da:	bf00      	nop
 80042dc:	20001030 	.word	0x20001030

080042e0 <z_impl_log_process>:
{
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <z_impl_log_process+0x4c>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b903      	cbnz	r3, 80042ec <z_impl_log_process+0xc>
 80042ea:	b1d0      	cbz	r0, 8004322 <z_impl_log_process+0x42>
	msg = get_msg();
 80042ec:	f00b fb0c 	bl	800f908 <get_msg>
	if (msg.msg) {
 80042f0:	4603      	mov	r3, r0
 80042f2:	b180      	cbz	r0, 8004316 <z_impl_log_process+0x36>
		if (!bypass) {
 80042f4:	b95c      	cbnz	r4, 800430e <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80042f6:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <z_impl_log_process+0x50>)
 80042f8:	f3bf 8f5b 	dmb	ish
 80042fc:	e852 1f00 	ldrex	r1, [r2]
 8004300:	3901      	subs	r1, #1
 8004302:	e842 1000 	strex	r0, r1, [r2]
 8004306:	2800      	cmp	r0, #0
 8004308:	d1f8      	bne.n	80042fc <z_impl_log_process+0x1c>
 800430a:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 800430e:	4621      	mov	r1, r4
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ffb3 	bl	800427c <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8004316:	b914      	cbnz	r4, 800431e <z_impl_log_process+0x3e>
 8004318:	f7ff ff6e 	bl	80041f8 <z_log_dropped_pending>
 800431c:	b910      	cbnz	r0, 8004324 <z_impl_log_process+0x44>
	return next_pending();
 800431e:	f00b faf7 	bl	800f910 <next_pending>
}
 8004322:	bd10      	pop	{r4, pc}
		dropped_notify();
 8004324:	f7ff ff46 	bl	80041b4 <dropped_notify>
 8004328:	e7f9      	b.n	800431e <z_impl_log_process+0x3e>
 800432a:	bf00      	nop
 800432c:	20001734 	.word	0x20001734
 8004330:	20001024 	.word	0x20001024

08004334 <z_log_msg_post_finalize>:
{
 8004334:	b510      	push	{r4, lr}
 8004336:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <z_log_msg_post_finalize+0x7c>)
 800433a:	f3bf 8f5b 	dmb	ish
 800433e:	e853 2f00 	ldrex	r2, [r3]
 8004342:	1c51      	adds	r1, r2, #1
 8004344:	e843 1000 	strex	r0, r1, [r3]
 8004348:	2800      	cmp	r0, #0
 800434a:	d1f8      	bne.n	800433e <z_log_msg_post_finalize+0xa>
 800434c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <z_log_msg_post_finalize+0x80>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b93b      	cbnz	r3, 8004366 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <z_log_msg_post_finalize+0x84>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	b103      	cbz	r3, 800435e <z_log_msg_post_finalize+0x2a>
 800435c:	b19a      	cbz	r2, 8004386 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800435e:	2a0a      	cmp	r2, #10
 8004360:	d01c      	beq.n	800439c <z_log_msg_post_finalize+0x68>
}
 8004362:	b002      	add	sp, #8
 8004364:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8004366:	f04f 0310 	mov.w	r3, #16
 800436a:	f3ef 8411 	mrs	r4, BASEPRI
 800436e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004372:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8004376:	2000      	movs	r0, #0
 8004378:	f7ff ffb2 	bl	80042e0 <z_impl_log_process>
	__asm__ volatile(
 800437c:	f384 8811 	msr	BASEPRI, r4
 8004380:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8004384:	e7ed      	b.n	8004362 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 8004386:	2200      	movs	r2, #0
 8004388:	2300      	movs	r3, #0
 800438a:	e9cd 2300 	strd	r2, r3, [sp]
 800438e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004392:	2300      	movs	r3, #0
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <z_log_msg_post_finalize+0x88>)
 8004396:	f009 f801 	bl	800d39c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 800439a:	e7e2      	b.n	8004362 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0e0      	beq.n	8004362 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 80043a0:	4806      	ldr	r0, [pc, #24]	; (80043bc <z_log_msg_post_finalize+0x88>)
 80043a2:	f00d fb2e 	bl	8011a02 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80043a6:	4806      	ldr	r0, [pc, #24]	; (80043c0 <z_log_msg_post_finalize+0x8c>)
 80043a8:	f008 f82c 	bl	800c404 <z_impl_k_sem_give>
}
 80043ac:	e7d9      	b.n	8004362 <z_log_msg_post_finalize+0x2e>
 80043ae:	bf00      	nop
 80043b0:	20001024 	.word	0x20001024
 80043b4:	20001735 	.word	0x20001735
 80043b8:	20001070 	.word	0x20001070
 80043bc:	20000ca8 	.word	0x20000ca8
 80043c0:	200006a8 	.word	0x200006a8

080043c4 <z_log_msg2_commit>:
{
 80043c4:	b510      	push	{r4, lr}
 80043c6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <z_log_msg2_commit+0x1c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4798      	blx	r3
 80043ce:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80043d0:	4621      	mov	r1, r4
 80043d2:	4804      	ldr	r0, [pc, #16]	; (80043e4 <z_log_msg2_commit+0x20>)
 80043d4:	f00b f993 	bl	800f6fe <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 80043d8:	f7ff ffac 	bl	8004334 <z_log_msg_post_finalize>
}
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	bf00      	nop
 80043e0:	200000b0 	.word	0x200000b0
 80043e4:	20001030 	.word	0x20001030

080043e8 <z_impl_log_panic>:
	if (panic_mode) {
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <z_impl_log_panic+0x4c>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b103      	cbz	r3, 80043f0 <z_impl_log_panic+0x8>
 80043ee:	4770      	bx	lr
{
 80043f0:	b510      	push	{r4, lr}
	log_init();
 80043f2:	f7ff fe59 	bl	80040a8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80043f6:	2400      	movs	r4, #0
 80043f8:	e000      	b.n	80043fc <z_impl_log_panic+0x14>
 80043fa:	3401      	adds	r4, #1
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <z_impl_log_panic+0x50>)
 80043fe:	4a0f      	ldr	r2, [pc, #60]	; (800443c <z_impl_log_panic+0x54>)
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004406:	da0c      	bge.n	8004422 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8004408:	480c      	ldr	r0, [pc, #48]	; (800443c <z_impl_log_panic+0x54>)
 800440a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 800440e:	6843      	ldr	r3, [r0, #4]
 8004410:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f1      	beq.n	80043fa <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8004416:	0123      	lsls	r3, r4, #4
 8004418:	4a08      	ldr	r2, [pc, #32]	; (800443c <z_impl_log_panic+0x54>)
 800441a:	58d3      	ldr	r3, [r2, r3]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4798      	blx	r3
}
 8004420:	e7eb      	b.n	80043fa <z_impl_log_panic+0x12>
 8004422:	2000      	movs	r0, #0
 8004424:	f7ff ff5c 	bl	80042e0 <z_impl_log_process>
		while (log_process(false) == true) {
 8004428:	2800      	cmp	r0, #0
 800442a:	d1fa      	bne.n	8004422 <z_impl_log_panic+0x3a>
	panic_mode = true;
 800442c:	4b01      	ldr	r3, [pc, #4]	; (8004434 <z_impl_log_panic+0x4c>)
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
}
 8004432:	bd10      	pop	{r4, pc}
 8004434:	20001735 	.word	0x20001735
 8004438:	08012788 	.word	0x08012788
 800443c:	08012778 	.word	0x08012778

08004440 <log_process_thread_func>:
{
 8004440:	b508      	push	{r3, lr}
	log_init();
 8004442:	f7ff fe31 	bl	80040a8 <log_init>
	return z_impl_z_current_get();
 8004446:	f008 fd83 	bl	800cf50 <z_impl_z_current_get>
	thread_set(k_current_get());
 800444a:	f7ff fde3 	bl	8004014 <thread_set>
 800444e:	2000      	movs	r0, #0
 8004450:	f7ff ff46 	bl	80042e0 <z_impl_log_process>
		if (log_process(false) == false) {
 8004454:	2800      	cmp	r0, #0
 8004456:	d1fa      	bne.n	800444e <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 8004458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800445c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <log_process_thread_func+0x28>)
 8004462:	f007 fff7 	bl	800c454 <z_impl_k_sem_take>
 8004466:	e7f2      	b.n	800444e <log_process_thread_func+0xe>
 8004468:	200006a8 	.word	0x200006a8

0800446c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <log_source_name_get+0x18>)
 800446e:	4a06      	ldr	r2, [pc, #24]	; (8004488 <log_source_name_get+0x1c>)
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8004476:	d202      	bcs.n	800447e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8004478:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 800447c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 800447e:	2000      	movs	r0, #0
}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	08012778 	.word	0x08012778
 8004488:	08012700 	.word	0x08012700

0800448c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 800448c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <log_backend_enable+0x20>)
 8004490:	1ac3      	subs	r3, r0, r3
 8004492:	111b      	asrs	r3, r3, #4
 8004494:	3301      	adds	r3, #1
	backend->cb->id = id;
 8004496:	6842      	ldr	r2, [r0, #4]
 8004498:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 800449a:	6843      	ldr	r3, [r0, #4]
 800449c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 800449e:	6843      	ldr	r3, [r0, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80044a4:	f7ff fe46 	bl	8004134 <z_log_notify_backend_enabled>
}
 80044a8:	bd08      	pop	{r3, pc}
 80044aa:	bf00      	nop
 80044ac:	08012778 	.word	0x08012778

080044b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80044b0:	b40e      	push	{r1, r2, r3}
 80044b2:	b500      	push	{lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	4601      	mov	r1, r0
 80044b8:	ab03      	add	r3, sp, #12
 80044ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80044be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80044c0:	4803      	ldr	r0, [pc, #12]	; (80044d0 <print_formatted+0x20>)
 80044c2:	f7ff faa9 	bl	8003a18 <cbvprintf>
	va_end(args);

	return length;
}
 80044c6:	b002      	add	sp, #8
 80044c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044cc:	b003      	add	sp, #12
 80044ce:	4770      	bx	lr
 80044d0:	0800f9b7 	.word	0x0800f9b7

080044d4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 80044d4:	b530      	push	{r4, r5, lr}
 80044d6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 80044d8:	f011 0f44 	tst.w	r1, #68	; 0x44
 80044dc:	d005      	beq.n	80044ea <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <timestamp_print+0x74>)
 80044e0:	681c      	ldr	r4, [r3, #0]
 80044e2:	b934      	cbnz	r4, 80044f2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 80044e4:	2000      	movs	r0, #0
	}

	return length;
}
 80044e6:	b005      	add	sp, #20
 80044e8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 80044ea:	4918      	ldr	r1, [pc, #96]	; (800454c <timestamp_print+0x78>)
 80044ec:	f7ff ffe0 	bl	80044b0 <print_formatted>
 80044f0:	e7f9      	b.n	80044e6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 80044f2:	4b17      	ldr	r3, [pc, #92]	; (8004550 <timestamp_print+0x7c>)
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 80044fa:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <timestamp_print+0x80>)
 8004500:	fba2 320c 	umull	r3, r2, r2, ip
 8004504:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8004506:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 800450a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <timestamp_print+0x84>)
 8004510:	fba3 530e 	umull	r5, r3, r3, lr
 8004514:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8004516:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 800451a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800451e:	fb0c f101 	mul.w	r1, ip, r1
 8004522:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004526:	fb05 1114 	mls	r1, r5, r4, r1
 800452a:	fb0c f101 	mul.w	r1, ip, r1
 800452e:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8004532:	9102      	str	r1, [sp, #8]
 8004534:	9501      	str	r5, [sp, #4]
 8004536:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800453a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 800453e:	9100      	str	r1, [sp, #0]
 8004540:	4906      	ldr	r1, [pc, #24]	; (800455c <timestamp_print+0x88>)
 8004542:	f7ff ffb5 	bl	80044b0 <print_formatted>
 8004546:	e7ce      	b.n	80044e6 <timestamp_print+0x12>
 8004548:	20001074 	.word	0x20001074
 800454c:	08012a14 	.word	0x08012a14
 8004550:	20001078 	.word	0x20001078
 8004554:	91a2b3c5 	.word	0x91a2b3c5
 8004558:	88888889 	.word	0x88888889
 800455c:	08012a20 	.word	0x08012a20

08004560 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8004560:	b161      	cbz	r1, 800457c <color_print+0x1c>
{
 8004562:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8004564:	b12a      	cbz	r2, 8004572 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <color_print+0x20>)
 8004568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800456c:	b912      	cbnz	r2, 8004574 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800456e:	4a05      	ldr	r2, [pc, #20]	; (8004584 <color_print+0x24>)
 8004570:	e000      	b.n	8004574 <color_print+0x14>
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8004574:	4904      	ldr	r1, [pc, #16]	; (8004588 <color_print+0x28>)
 8004576:	f7ff ff9b 	bl	80044b0 <print_formatted>
	}
}
 800457a:	bd08      	pop	{r3, pc}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08012a98 	.word	0x08012a98
 8004584:	08012a3c 	.word	0x08012a3c
 8004588:	08012a44 	.word	0x08012a44

0800458c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800458c:	f011 0f10 	tst.w	r1, #16
 8004590:	d10b      	bne.n	80045aa <newline_print+0x1e>
{
 8004592:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8004594:	f011 0f20 	tst.w	r1, #32
 8004598:	d003      	beq.n	80045a2 <newline_print+0x16>
		print_formatted(ctx, "\n");
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <newline_print+0x20>)
 800459c:	f7ff ff88 	bl	80044b0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 80045a0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 80045a2:	4903      	ldr	r1, [pc, #12]	; (80045b0 <newline_print+0x24>)
 80045a4:	f7ff ff84 	bl	80044b0 <print_formatted>
 80045a8:	e7fa      	b.n	80045a0 <newline_print+0x14>
 80045aa:	4770      	bx	lr
 80045ac:	08012fa0 	.word	0x08012fa0
 80045b0:	08012a48 	.word	0x08012a48

080045b4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4605      	mov	r5, r0
 80045ba:	460f      	mov	r7, r1
 80045bc:	4616      	mov	r6, r2
 80045be:	4698      	mov	r8, r3
	newline_print(output, flags);
 80045c0:	9906      	ldr	r1, [sp, #24]
 80045c2:	f7ff ffe3 	bl	800458c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80045c6:	2400      	movs	r4, #0
 80045c8:	4544      	cmp	r4, r8
 80045ca:	da05      	bge.n	80045d8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 80045cc:	4924      	ldr	r1, [pc, #144]	; (8004660 <hexdump_line_print+0xac>)
 80045ce:	4628      	mov	r0, r5
 80045d0:	f7ff ff6e 	bl	80044b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80045d4:	3401      	adds	r4, #1
 80045d6:	e7f7      	b.n	80045c8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80045d8:	2400      	movs	r4, #0
 80045da:	e009      	b.n	80045f0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80045dc:	4920      	ldr	r1, [pc, #128]	; (8004660 <hexdump_line_print+0xac>)
 80045de:	4628      	mov	r0, r5
 80045e0:	f7ff ff66 	bl	80044b0 <print_formatted>
 80045e4:	e00b      	b.n	80045fe <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80045e6:	491f      	ldr	r1, [pc, #124]	; (8004664 <hexdump_line_print+0xb0>)
 80045e8:	4628      	mov	r0, r5
 80045ea:	f7ff ff61 	bl	80044b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80045ee:	3401      	adds	r4, #1
 80045f0:	2c0f      	cmp	r4, #15
 80045f2:	dc0c      	bgt.n	800460e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 80045f4:	2c00      	cmp	r4, #0
 80045f6:	dd02      	ble.n	80045fe <hexdump_line_print+0x4a>
 80045f8:	f014 0f07 	tst.w	r4, #7
 80045fc:	d0ee      	beq.n	80045dc <hexdump_line_print+0x28>
		if (i < length) {
 80045fe:	42b4      	cmp	r4, r6
 8004600:	d2f1      	bcs.n	80045e6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8004602:	5d3a      	ldrb	r2, [r7, r4]
 8004604:	4918      	ldr	r1, [pc, #96]	; (8004668 <hexdump_line_print+0xb4>)
 8004606:	4628      	mov	r0, r5
 8004608:	f7ff ff52 	bl	80044b0 <print_formatted>
 800460c:	e7ef      	b.n	80045ee <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 800460e:	4917      	ldr	r1, [pc, #92]	; (800466c <hexdump_line_print+0xb8>)
 8004610:	4628      	mov	r0, r5
 8004612:	f7ff ff4d 	bl	80044b0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004616:	2400      	movs	r4, #0
 8004618:	e009      	b.n	800462e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 800461a:	4911      	ldr	r1, [pc, #68]	; (8004660 <hexdump_line_print+0xac>)
 800461c:	4628      	mov	r0, r5
 800461e:	f7ff ff47 	bl	80044b0 <print_formatted>
 8004622:	e00b      	b.n	800463c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8004624:	4912      	ldr	r1, [pc, #72]	; (8004670 <hexdump_line_print+0xbc>)
 8004626:	4628      	mov	r0, r5
 8004628:	f7ff ff42 	bl	80044b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800462c:	3401      	adds	r4, #1
 800462e:	2c0f      	cmp	r4, #15
 8004630:	dc13      	bgt.n	800465a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8004632:	2c00      	cmp	r4, #0
 8004634:	dd02      	ble.n	800463c <hexdump_line_print+0x88>
 8004636:	f014 0f07 	tst.w	r4, #7
 800463a:	d0ee      	beq.n	800461a <hexdump_line_print+0x66>
		if (i < length) {
 800463c:	42b4      	cmp	r4, r6
 800463e:	d207      	bcs.n	8004650 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8004640:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <hexdump_line_print+0xc0>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8004646:	f013 0f97 	tst.w	r3, #151	; 0x97
 800464a:	d1eb      	bne.n	8004624 <hexdump_line_print+0x70>
 800464c:	222e      	movs	r2, #46	; 0x2e
 800464e:	e7e9      	b.n	8004624 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <hexdump_line_print+0xac>)
 8004652:	4628      	mov	r0, r5
 8004654:	f7ff ff2c 	bl	80044b0 <print_formatted>
 8004658:	e7e8      	b.n	800462c <hexdump_line_print+0x78>
		}
	}
}
 800465a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800465e:	bf00      	nop
 8004660:	08012a70 	.word	0x08012a70
 8004664:	08012a54 	.word	0x08012a54
 8004668:	08012a4c 	.word	0x08012a4c
 800466c:	08012a58 	.word	0x08012a58
 8004670:	08012a5c 	.word	0x08012a5c
 8004674:	08014015 	.word	0x08014015

08004678 <ids_print>:
{
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	4680      	mov	r8, r0
 800467e:	4616      	mov	r6, r2
 8004680:	461d      	mov	r5, r3
 8004682:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8004686:	b959      	cbnz	r1, 80046a0 <ids_print+0x28>
	int total = 0;
 8004688:	2400      	movs	r4, #0
	if (source_id >= 0) {
 800468a:	2f00      	cmp	r7, #0
 800468c:	db1c      	blt.n	80046c8 <ids_print+0x50>
		total += print_formatted(output,
 800468e:	b186      	cbz	r6, 80046b2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8004690:	2301      	movs	r3, #1
 8004692:	9a07      	ldr	r2, [sp, #28]
 8004694:	4093      	lsls	r3, r2
				(func_on &&
 8004696:	f013 0f10 	tst.w	r3, #16
 800469a:	d118      	bne.n	80046ce <ids_print+0x56>
		total += print_formatted(output,
 800469c:	4e0d      	ldr	r6, [pc, #52]	; (80046d4 <ids_print+0x5c>)
 800469e:	e009      	b.n	80046b4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <ids_print+0x60>)
 80046a2:	9a07      	ldr	r2, [sp, #28]
 80046a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <ids_print+0x64>)
 80046aa:	f7ff ff01 	bl	80044b0 <print_formatted>
 80046ae:	4604      	mov	r4, r0
 80046b0:	e7eb      	b.n	800468a <ids_print+0x12>
		total += print_formatted(output,
 80046b2:	4e08      	ldr	r6, [pc, #32]	; (80046d4 <ids_print+0x5c>)
 80046b4:	4639      	mov	r1, r7
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7ff fed8 	bl	800446c <log_source_name_get>
 80046bc:	4602      	mov	r2, r0
 80046be:	4631      	mov	r1, r6
 80046c0:	4640      	mov	r0, r8
 80046c2:	f7ff fef5 	bl	80044b0 <print_formatted>
 80046c6:	4404      	add	r4, r0
}
 80046c8:	4620      	mov	r0, r4
 80046ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 80046ce:	4e04      	ldr	r6, [pc, #16]	; (80046e0 <ids_print+0x68>)
 80046d0:	e7f0      	b.n	80046b4 <ids_print+0x3c>
 80046d2:	bf00      	nop
 80046d4:	08012a60 	.word	0x08012a60
 80046d8:	08012ad4 	.word	0x08012ad4
 80046dc:	08012a6c 	.word	0x08012a6c
 80046e0:	08012a68 	.word	0x08012a68

080046e4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	b085      	sub	sp, #20
 80046ea:	4605      	mov	r5, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	4616      	mov	r6, r2
 80046f0:	9303      	str	r3, [sp, #12]
 80046f2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 80046f6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 80046fa:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 80046fe:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 8004702:	f00b f909 	bl	800f918 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8004706:	b1e8      	cbz	r0, 8004744 <prefix_print+0x60>
 8004708:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 800470a:	4913      	ldr	r1, [pc, #76]	; (8004758 <prefix_print+0x74>)
 800470c:	4628      	mov	r0, r5
 800470e:	f7ff fecf 	bl	80044b0 <print_formatted>
 8004712:	4607      	mov	r7, r0
	}

	if (stamp) {
 8004714:	f1bb 0f00 	cmp.w	fp, #0
 8004718:	d116      	bne.n	8004748 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 800471a:	4642      	mov	r2, r8
 800471c:	4651      	mov	r1, sl
 800471e:	4628      	mov	r0, r5
 8004720:	f00b f909 	bl	800f936 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 8004724:	f8cd 8004 	str.w	r8, [sp, #4]
 8004728:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004732:	4632      	mov	r2, r6
 8004734:	4649      	mov	r1, r9
 8004736:	4628      	mov	r0, r5
 8004738:	f7ff ff9e 	bl	8004678 <ids_print>
			domain_id, source_id, level);


	return length;
}
 800473c:	4438      	add	r0, r7
 800473e:	b005      	add	sp, #20
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8004744:	2700      	movs	r7, #0
 8004746:	e7e5      	b.n	8004714 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 8004748:	9a03      	ldr	r2, [sp, #12]
 800474a:	4621      	mov	r1, r4
 800474c:	4628      	mov	r0, r5
 800474e:	f7ff fec1 	bl	80044d4 <timestamp_print>
 8004752:	4407      	add	r7, r0
 8004754:	e7e1      	b.n	800471a <prefix_print+0x36>
 8004756:	bf00      	nop
 8004758:	08012a74 	.word	0x08012a74

0800475c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 800475c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004760:	b085      	sub	sp, #20
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 8004768:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 800476a:	880a      	ldrh	r2, [r1, #0]
 800476c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8004770:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 8004774:	d035      	beq.n	80047e2 <log_output_msg2_process+0x86>
	return msg->hdr.source;
 8004776:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 8004778:	7809      	ldrb	r1, [r1, #0]
 800477a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 800477e:	b36a      	cbz	r2, 80047dc <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8004780:	4820      	ldr	r0, [pc, #128]	; (8004804 <log_output_msg2_process+0xa8>)
 8004782:	1a12      	subs	r2, r2, r0
 8004784:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8004788:	9202      	str	r2, [sp, #8]
 800478a:	9101      	str	r1, [sp, #4]
 800478c:	f8cd 8000 	str.w	r8, [sp]
 8004790:	2200      	movs	r2, #0
 8004792:	4639      	mov	r1, r7
 8004794:	4630      	mov	r0, r6
 8004796:	f7ff ffa5 	bl	80046e4 <prefix_print>
 800479a:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 800479c:	4625      	mov	r5, r4
 800479e:	f855 3b0c 	ldr.w	r3, [r5], #12
 80047a2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 80047a6:	b143      	cbz	r3, 80047ba <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 80047a8:	f1b8 0f00 	cmp.w	r8, #0
 80047ac:	d11c      	bne.n	80047e8 <log_output_msg2_process+0x8c>
 80047ae:	4816      	ldr	r0, [pc, #88]	; (8004808 <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 80047b0:	462b      	mov	r3, r5
 80047b2:	4632      	mov	r2, r6
 80047b4:	4915      	ldr	r1, [pc, #84]	; (800480c <log_output_msg2_process+0xb0>)
 80047b6:	f00a fd37 	bl	800f228 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 80047ba:	8862      	ldrh	r2, [r4, #2]
 80047bc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 80047c0:	6821      	ldr	r1, [r4, #0]
 80047c2:	f3c1 2149 	ubfx	r1, r1, #9, #10
 80047c6:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 80047c8:	b982      	cbnz	r2, 80047ec <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 80047ca:	f1b8 0f00 	cmp.w	r8, #0
 80047ce:	d113      	bne.n	80047f8 <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 80047d0:	4630      	mov	r0, r6
 80047d2:	f00b f8e3 	bl	800f99c <log_output_flush>
}
 80047d6:	b005      	add	sp, #20
 80047d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047e0:	e7d2      	b.n	8004788 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 80047e2:	f04f 0900 	mov.w	r9, #0
 80047e6:	e7d9      	b.n	800479c <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 80047e8:	4809      	ldr	r0, [pc, #36]	; (8004810 <log_output_msg2_process+0xb4>)
 80047ea:	e7e1      	b.n	80047b0 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 80047ec:	9700      	str	r7, [sp, #0]
 80047ee:	464b      	mov	r3, r9
 80047f0:	4630      	mov	r0, r6
 80047f2:	f00b f8b8 	bl	800f966 <log_msg2_hexdump>
 80047f6:	e7e8      	b.n	80047ca <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 80047f8:	4642      	mov	r2, r8
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	f00b f8a6 	bl	800f94e <postfix_print>
 8004802:	e7e5      	b.n	80047d0 <log_output_msg2_process+0x74>
 8004804:	08012700 	.word	0x08012700
 8004808:	0800f9ef 	.word	0x0800f9ef
 800480c:	08003a19 	.word	0x08003a19
 8004810:	0800f9b7 	.word	0x0800f9b7

08004814 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 800481a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800481c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004820:	428b      	cmp	r3, r1
 8004822:	bf28      	it	cs
 8004824:	460b      	movcs	r3, r1
 8004826:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <log_output_dropped_process+0x4c>)
 8004828:	2105      	movs	r1, #5
 800482a:	4668      	mov	r0, sp
 800482c:	f00a fd51 	bl	800f2d2 <snprintk>
 8004830:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8004832:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	220b      	movs	r2, #11
 8004838:	490a      	ldr	r1, [pc, #40]	; (8004864 <log_output_dropped_process+0x50>)
 800483a:	4628      	mov	r0, r5
 800483c:	f00b f86e 	bl	800f91c <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4632      	mov	r2, r6
 8004846:	4669      	mov	r1, sp
 8004848:	4628      	mov	r0, r5
 800484a:	f00b f867 	bl	800f91c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 800484e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	221b      	movs	r2, #27
 8004854:	4904      	ldr	r1, [pc, #16]	; (8004868 <log_output_dropped_process+0x54>)
 8004856:	4628      	mov	r0, r5
 8004858:	f00b f860 	bl	800f91c <buffer_write>
}
 800485c:	b002      	add	sp, #8
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	08013070 	.word	0x08013070
 8004864:	08012ac8 	.word	0x08012ac8
 8004868:	08012aac 	.word	0x08012aac

0800486c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <log_output_timestamp_freq_set+0x20>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004872:	e004      	b.n	800487e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8004874:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <log_output_timestamp_freq_set+0x20>)
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <log_output_timestamp_freq_set+0x24>)
 8004880:	4298      	cmp	r0, r3
 8004882:	d8f7      	bhi.n	8004874 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <log_output_timestamp_freq_set+0x28>)
 8004886:	6018      	str	r0, [r3, #0]
}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20001078 	.word	0x20001078
 8004890:	000f4240 	.word	0x000f4240
 8004894:	20001074 	.word	0x20001074

08004898 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4606      	mov	r6, r0
 800489c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 800489e:	2400      	movs	r4, #0
 80048a0:	e006      	b.n	80048b0 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <char_out+0x20>)
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
 80048a8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80048ae:	3401      	adds	r4, #1
 80048b0:	42ac      	cmp	r4, r5
 80048b2:	d3f6      	bcc.n	80048a2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 80048b4:	4628      	mov	r0, r5
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	20001090 	.word	0x20001090

080048bc <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <log_backend_uart_init+0x8>)
 80048be:	4a02      	ldr	r2, [pc, #8]	; (80048c8 <log_backend_uart_init+0xc>)
 80048c0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 80048c2:	4770      	bx	lr
 80048c4:	20001090 	.word	0x20001090
 80048c8:	080123d8 	.word	0x080123d8

080048cc <panic>:

static void panic(struct log_backend const *const backend)
{
 80048cc:	b508      	push	{r3, lr}
	in_panic = true;
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <panic+0x10>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 80048d4:	4802      	ldr	r0, [pc, #8]	; (80048e0 <panic+0x14>)
 80048d6:	f00b f861 	bl	800f99c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 80048da:	bd08      	pop	{r3, pc}
 80048dc:	20001736 	.word	0x20001736
 80048e0:	08012b24 	.word	0x08012b24

080048e4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 80048e4:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 80048e6:	4802      	ldr	r0, [pc, #8]	; (80048f0 <dropped+0xc>)
 80048e8:	f7ff ff94 	bl	8004814 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 80048ec:	bd08      	pop	{r3, pc}
 80048ee:	bf00      	nop
 80048f0:	08012b24 	.word	0x08012b24

080048f4 <process>:
{
 80048f4:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 80048f6:	220f      	movs	r2, #15
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <process+0xc>)
 80048fa:	f7ff ff2f 	bl	800475c <log_output_msg2_process>
}
 80048fe:	bd08      	pop	{r3, pc}
 8004900:	08012b24 	.word	0x08012b24

08004904 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8004904:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8004906:	4c04      	ldr	r4, [pc, #16]	; (8004918 <__do_init_array_aux+0x14>)
 8004908:	e002      	b.n	8004910 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 800490a:	f854 3b04 	ldr.w	r3, [r4], #4
 800490e:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <__do_init_array_aux+0x18>)
 8004912:	429c      	cmp	r4, r3
 8004914:	d3f9      	bcc.n	800490a <__do_init_array_aux+0x6>
	}
}
 8004916:	bd10      	pop	{r4, pc}
 8004918:	08012700 	.word	0x08012700
 800491c:	08012700 	.word	0x08012700

08004920 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <__do_global_ctors_aux+0x1c>)
 8004922:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8004924:	b14b      	cbz	r3, 800493a <__do_global_ctors_aux+0x1a>
{
 8004926:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8004928:	1e5c      	subs	r4, r3, #1
 800492a:	4a04      	ldr	r2, [pc, #16]	; (800493c <__do_global_ctors_aux+0x1c>)
 800492c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004930:	4798      	blx	r3
 8004932:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8004934:	2c00      	cmp	r4, #0
 8004936:	d1f7      	bne.n	8004928 <__do_global_ctors_aux+0x8>
	}
}
 8004938:	bd10      	pop	{r4, pc}
 800493a:	4770      	bx	lr
 800493c:	080126f8 	.word	0x080126f8

08004940 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004940:	4901      	ldr	r1, [pc, #4]	; (8004948 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004942:	2210      	movs	r2, #16
	str	r2, [r1]
 8004944:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004946:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004948:	e000ed10 	.word	0xe000ed10

0800494c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 800494c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800494e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004950:	f380 8811 	msr	BASEPRI, r0
	isb
 8004954:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004958:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 800495c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800495e:	b662      	cpsie	i
	isb
 8004960:	f3bf 8f6f 	isb	sy

	bx	lr
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop

08004968 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8004968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	b096      	sub	sp, #88	; 0x58
 800496e:	af00      	add	r7, sp, #0
 8004970:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004972:	2301      	movs	r3, #1
 8004974:	813b      	strh	r3, [r7, #8]
 8004976:	466c      	mov	r4, sp
 8004978:	b088      	sub	sp, #32
 800497a:	466b      	mov	r3, sp
 800497c:	f113 020c 	adds.w	r2, r3, #12
 8004980:	f000 80ca 	beq.w	8004b18 <esf_dump+0x1b0>
 8004984:	2114      	movs	r1, #20
 8004986:	2001      	movs	r0, #1
 8004988:	8138      	strh	r0, [r7, #8]
 800498a:	b11a      	cbz	r2, 8004994 <esf_dump+0x2c>
 800498c:	2904      	cmp	r1, #4
 800498e:	dd01      	ble.n	8004994 <esf_dump+0x2c>
 8004990:	4867      	ldr	r0, [pc, #412]	; (8004b30 <esf_dump+0x1c8>)
 8004992:	6118      	str	r0, [r3, #16]
 8004994:	6828      	ldr	r0, [r5, #0]
 8004996:	b112      	cbz	r2, 800499e <esf_dump+0x36>
 8004998:	2908      	cmp	r1, #8
 800499a:	dd00      	ble.n	800499e <esf_dump+0x36>
 800499c:	6158      	str	r0, [r3, #20]
 800499e:	6868      	ldr	r0, [r5, #4]
 80049a0:	b112      	cbz	r2, 80049a8 <esf_dump+0x40>
 80049a2:	290c      	cmp	r1, #12
 80049a4:	dd00      	ble.n	80049a8 <esf_dump+0x40>
 80049a6:	6198      	str	r0, [r3, #24]
 80049a8:	68a8      	ldr	r0, [r5, #8]
 80049aa:	b112      	cbz	r2, 80049b2 <esf_dump+0x4a>
 80049ac:	2910      	cmp	r1, #16
 80049ae:	dd00      	ble.n	80049b2 <esf_dump+0x4a>
 80049b0:	61d8      	str	r0, [r3, #28]
 80049b2:	2913      	cmp	r1, #19
 80049b4:	f340 80b3 	ble.w	8004b1e <esf_dump+0x1b6>
 80049b8:	2014      	movs	r0, #20
 80049ba:	b12a      	cbz	r2, 80049c8 <esf_dump+0x60>
 80049bc:	2100      	movs	r1, #0
 80049be:	6079      	str	r1, [r7, #4]
 80049c0:	2105      	movs	r1, #5
 80049c2:	7139      	strb	r1, [r7, #4]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	60d9      	str	r1, [r3, #12]
 80049c8:	2100      	movs	r1, #0
 80049ca:	f36f 0100 	bfc	r1, #0, #1
 80049ce:	f36f 0141 	bfc	r1, #1, #1
 80049d2:	f36f 0182 	bfc	r1, #2, #1
 80049d6:	f36f 01c5 	bfc	r1, #3, #3
 80049da:	2601      	movs	r6, #1
 80049dc:	f366 1188 	bfi	r1, r6, #6, #3
 80049e0:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 80049e4:	f363 2152 	bfi	r1, r3, #9, #10
 80049e8:	f36f 41de 	bfc	r1, #19, #12
 80049ec:	f36f 71df 	bfc	r1, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 80049f0:	2300      	movs	r3, #0
 80049f2:	4850      	ldr	r0, [pc, #320]	; (8004b34 <esf_dump+0x1cc>)
 80049f4:	f00b f822 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80049f8:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 80049fa:	813e      	strh	r6, [r7, #8]
 80049fc:	466c      	mov	r4, sp
 80049fe:	b088      	sub	sp, #32
 8004a00:	466b      	mov	r3, sp
 8004a02:	f113 020c 	adds.w	r2, r3, #12
 8004a06:	f000 808d 	beq.w	8004b24 <esf_dump+0x1bc>
 8004a0a:	2114      	movs	r1, #20
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	8138      	strh	r0, [r7, #8]
 8004a10:	b11a      	cbz	r2, 8004a1a <esf_dump+0xb2>
 8004a12:	2904      	cmp	r1, #4
 8004a14:	dd01      	ble.n	8004a1a <esf_dump+0xb2>
 8004a16:	4848      	ldr	r0, [pc, #288]	; (8004b38 <esf_dump+0x1d0>)
 8004a18:	6118      	str	r0, [r3, #16]
 8004a1a:	68e8      	ldr	r0, [r5, #12]
 8004a1c:	b112      	cbz	r2, 8004a24 <esf_dump+0xbc>
 8004a1e:	2908      	cmp	r1, #8
 8004a20:	dd00      	ble.n	8004a24 <esf_dump+0xbc>
 8004a22:	6158      	str	r0, [r3, #20]
 8004a24:	6928      	ldr	r0, [r5, #16]
 8004a26:	b112      	cbz	r2, 8004a2e <esf_dump+0xc6>
 8004a28:	290c      	cmp	r1, #12
 8004a2a:	dd00      	ble.n	8004a2e <esf_dump+0xc6>
 8004a2c:	6198      	str	r0, [r3, #24]
 8004a2e:	6968      	ldr	r0, [r5, #20]
 8004a30:	b112      	cbz	r2, 8004a38 <esf_dump+0xd0>
 8004a32:	2910      	cmp	r1, #16
 8004a34:	dd00      	ble.n	8004a38 <esf_dump+0xd0>
 8004a36:	61d8      	str	r0, [r3, #28]
 8004a38:	2913      	cmp	r1, #19
 8004a3a:	dd76      	ble.n	8004b2a <esf_dump+0x1c2>
 8004a3c:	2014      	movs	r0, #20
 8004a3e:	b12a      	cbz	r2, 8004a4c <esf_dump+0xe4>
 8004a40:	2100      	movs	r1, #0
 8004a42:	6079      	str	r1, [r7, #4]
 8004a44:	2105      	movs	r1, #5
 8004a46:	7139      	strb	r1, [r7, #4]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	60d9      	str	r1, [r3, #12]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f36f 0100 	bfc	r1, #0, #1
 8004a52:	f36f 0141 	bfc	r1, #1, #1
 8004a56:	f36f 0182 	bfc	r1, #2, #1
 8004a5a:	f36f 01c5 	bfc	r1, #3, #3
 8004a5e:	2601      	movs	r6, #1
 8004a60:	f366 1188 	bfi	r1, r6, #6, #3
 8004a64:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004a68:	f363 2152 	bfi	r1, r3, #9, #10
 8004a6c:	f36f 41de 	bfc	r1, #19, #12
 8004a70:	f36f 71df 	bfc	r1, #31, #1
 8004a74:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004b34 <esf_dump+0x1cc>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f00a ffde 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8004a80:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004a82:	813e      	strh	r6, [r7, #8]
 8004a84:	69eb      	ldr	r3, [r5, #28]
 8004a86:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <esf_dump+0x1d4>)
 8004a88:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8c:	2400      	movs	r4, #0
 8004a8e:	607c      	str	r4, [r7, #4]
 8004a90:	f04f 0a03 	mov.w	sl, #3
 8004a94:	f887 a004 	strb.w	sl, [r7, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f364 0100 	bfi	r1, r4, #0, #1
 8004aa2:	f364 0141 	bfi	r1, r4, #1, #1
 8004aa6:	f364 0182 	bfi	r1, r4, #2, #1
 8004aaa:	f364 01c5 	bfi	r1, r4, #3, #3
 8004aae:	f366 1188 	bfi	r1, r6, #6, #3
 8004ab2:	f04f 090c 	mov.w	r9, #12
 8004ab6:	f369 2152 	bfi	r1, r9, #9, #10
 8004aba:	f364 41de 	bfi	r1, r4, #19, #12
 8004abe:	f364 71df 	bfi	r1, r4, #31, #1
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ac8:	4640      	mov	r0, r8
 8004aca:	f00a ffb7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004ace:	813e      	strh	r6, [r7, #8]
 8004ad0:	69ab      	ldr	r3, [r5, #24]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <esf_dump+0x1d8>)
 8004ad4:	653a      	str	r2, [r7, #80]	; 0x50
 8004ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad8:	607c      	str	r4, [r7, #4]
 8004ada:	f887 a004 	strb.w	sl, [r7, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	f364 0100 	bfi	r1, r4, #0, #1
 8004ae8:	f364 0141 	bfi	r1, r4, #1, #1
 8004aec:	f364 0182 	bfi	r1, r4, #2, #1
 8004af0:	f364 01c5 	bfi	r1, r4, #3, #3
 8004af4:	f366 1188 	bfi	r1, r6, #6, #3
 8004af8:	f369 2152 	bfi	r1, r9, #9, #10
 8004afc:	f364 41de 	bfi	r1, r4, #19, #12
 8004b00:	f364 71df 	bfi	r1, r4, #31, #1
 8004b04:	4623      	mov	r3, r4
 8004b06:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f00a ff96 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 8004b10:	3758      	adds	r7, #88	; 0x58
 8004b12:	46bd      	mov	sp, r7
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b1c:	e733      	b.n	8004986 <esf_dump+0x1e>
 8004b1e:	f06f 001b 	mvn.w	r0, #27
 8004b22:	e74a      	b.n	80049ba <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b28:	e770      	b.n	8004a0c <esf_dump+0xa4>
 8004b2a:	f06f 001b 	mvn.w	r0, #27
 8004b2e:	e786      	b.n	8004a3e <esf_dump+0xd6>
 8004b30:	08012b34 	.word	0x08012b34
 8004b34:	08012730 	.word	0x08012730
 8004b38:	08012b64 	.word	0x08012b64
 8004b3c:	08012b94 	.word	0x08012b94
 8004b40:	08012ba4 	.word	0x08012ba4

08004b44 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8004b44:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004b46:	2800      	cmp	r0, #0
 8004b48:	db07      	blt.n	8004b5a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4a:	f000 021f 	and.w	r2, r0, #31
 8004b4e:	0940      	lsrs	r0, r0, #5
 8004b50:	2301      	movs	r3, #1
 8004b52:	4093      	lsls	r3, r2
 8004b54:	4a01      	ldr	r2, [pc, #4]	; (8004b5c <arch_irq_enable+0x18>)
 8004b56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004b5a:	4770      	bx	lr
 8004b5c:	e000e100 	.word	0xe000e100

08004b60 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8004b60:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004b62:	2800      	cmp	r0, #0
 8004b64:	db0c      	blt.n	8004b80 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b66:	f000 021f 	and.w	r2, r0, #31
 8004b6a:	0940      	lsrs	r0, r0, #5
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4093      	lsls	r3, r2
 8004b70:	3020      	adds	r0, #32
 8004b72:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <arch_irq_disable+0x24>)
 8004b74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b7c:	f3bf 8f6f 	isb	sy
}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000e100 	.word	0xe000e100

08004b88 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 8004b88:	0942      	lsrs	r2, r0, #5
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <arch_irq_is_enabled+0x18>)
 8004b8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b90:	f000 001f 	and.w	r0, r0, #31
 8004b94:	2301      	movs	r3, #1
 8004b96:	fa03 f000 	lsl.w	r0, r3, r0
}
 8004b9a:	4010      	ands	r0, r2
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004ba4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004ba6:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	db08      	blt.n	8004bbe <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bac:	0109      	lsls	r1, r1, #4
 8004bae:	b2c9      	uxtb	r1, r1
 8004bb0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004bb4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004bb8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004bbc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbe:	f000 000f 	and.w	r0, r0, #15
 8004bc2:	0109      	lsls	r1, r1, #4
 8004bc4:	b2c9      	uxtb	r1, r1
 8004bc6:	4b01      	ldr	r3, [pc, #4]	; (8004bcc <z_arm_irq_priority_set+0x28>)
 8004bc8:	5419      	strb	r1, [r3, r0]
}
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed14 	.word	0xe000ed14

08004bd0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004bd0:	bf30      	wfi
    b z_SysNmiOnReset
 8004bd2:	f7ff bffd 	b.w	8004bd0 <z_SysNmiOnReset>
 8004bd6:	bf00      	nop

08004bd8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8004bd8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <z_arm_prep_c+0x40>)
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	; (8004c1c <z_arm_prep_c+0x44>)
 8004bde:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004be2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004be8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bf0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8004bf8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004c00:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004c04:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8004c08:	f007 f992 	bl	800bf30 <z_bss_zero>
	z_data_copy();
 8004c0c:	f008 f9f2 	bl	800cff4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004c10:	f000 feae 	bl	8005970 <z_arm_interrupt_init>
	z_cstart();
 8004c14:	f007 f998 	bl	800bf48 <z_cstart>
 8004c18:	e000ed00 	.word	0xe000ed00
 8004c1c:	08000000 	.word	0x08000000

08004c20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <arch_swap+0x28>)
 8004c22:	6893      	ldr	r3, [r2, #8]
 8004c24:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8004c26:	4909      	ldr	r1, [pc, #36]	; (8004c4c <arch_swap+0x2c>)
 8004c28:	6809      	ldr	r1, [r1, #0]
 8004c2a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004c2c:	4908      	ldr	r1, [pc, #32]	; (8004c50 <arch_swap+0x30>)
 8004c2e:	684b      	ldr	r3, [r1, #4]
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 8004c36:	2300      	movs	r3, #0
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004c40:	6893      	ldr	r3, [r2, #8]
}
 8004c42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	200016d8 	.word	0x200016d8
 8004c4c:	08013e64 	.word	0x08013e64
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004c54:	4912      	ldr	r1, [pc, #72]	; (8004ca0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004c56:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004c58:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004c5c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004c5e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004c62:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004c66:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004c68:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004c6c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004c70:	4f0c      	ldr	r7, [pc, #48]	; (8004ca4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004c72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004c76:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004c78:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8004c7a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004c7c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004c7e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004c80:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004c82:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004c86:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004c88:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8004c8a:	f000 fec5 	bl	8005a18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004c8e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004c92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004c96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8004c9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004c9e:	4770      	bx	lr
    ldr r1, =_kernel
 8004ca0:	200016d8 	.word	0x200016d8
    ldr v4, =_SCS_ICSR
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004ca8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004cac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004cae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004cb2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004cb6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004cb8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004cbc:	2902      	cmp	r1, #2
    beq _oops
 8004cbe:	d0ff      	beq.n	8004cc0 <_oops>

08004cc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004cc0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004cc2:	f00a ff34 	bl	800fb2e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8004cc6:	bd01      	pop	{r0, pc}

08004cc8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8004cc8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004cca:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <arch_new_thread+0x3c>)
 8004cd0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8004cd4:	f021 0101 	bic.w	r1, r1, #1
 8004cd8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8004cdc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8004ce6:	9b02      	ldr	r3, [sp, #8]
 8004ce8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cf6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8004cfa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004d00:	bc10      	pop	{r4}
 8004d02:	4770      	bx	lr
 8004d04:	0800f2ef 	.word	0x0800f2ef

08004d08 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004d08:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <z_check_thread_stack_fail+0x48>)
 8004d0a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8004d0c:	b1ea      	cbz	r2, 8004d4a <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004d0e:	f110 0f16 	cmn.w	r0, #22
 8004d12:	d010      	beq.n	8004d36 <z_check_thread_stack_fail+0x2e>
 8004d14:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004d16:	f1a3 0c20 	sub.w	ip, r3, #32
 8004d1a:	4584      	cmp	ip, r0
 8004d1c:	d805      	bhi.n	8004d2a <z_check_thread_stack_fail+0x22>
 8004d1e:	4283      	cmp	r3, r0
 8004d20:	d905      	bls.n	8004d2e <z_check_thread_stack_fail+0x26>
 8004d22:	428b      	cmp	r3, r1
 8004d24:	d805      	bhi.n	8004d32 <z_check_thread_stack_fail+0x2a>
 8004d26:	2100      	movs	r1, #0
 8004d28:	e00a      	b.n	8004d40 <z_check_thread_stack_fail+0x38>
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	e008      	b.n	8004d40 <z_check_thread_stack_fail+0x38>
 8004d2e:	2100      	movs	r1, #0
 8004d30:	e006      	b.n	8004d40 <z_check_thread_stack_fail+0x38>
 8004d32:	2101      	movs	r1, #1
 8004d34:	e004      	b.n	8004d40 <z_check_thread_stack_fail+0x38>
 8004d36:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	bf94      	ite	ls
 8004d3c:	2100      	movls	r1, #0
 8004d3e:	2101      	movhi	r1, #1
 8004d40:	b909      	cbnz	r1, 8004d46 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8004d42:	2000      	movs	r0, #0
}
 8004d44:	4770      	bx	lr
		return thread->stack_info.start;
 8004d46:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004d48:	4770      	bx	lr
		return 0;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	200016d8 	.word	0x200016d8

08004d54 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8004d54:	b508      	push	{r3, lr}
 8004d56:	460d      	mov	r5, r1
 8004d58:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <arch_switch_to_main_thread+0x28>)
 8004d5c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8004d5e:	f000 fe5b 	bl	8005a18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8004d62:	4620      	mov	r0, r4
 8004d64:	f385 8809 	msr	PSP, r5
 8004d68:	2100      	movs	r1, #0
 8004d6a:	b663      	cpsie	if
 8004d6c:	f381 8811 	msr	BASEPRI, r1
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	f00a fab9 	bl	800f2ee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8004d7c:	200016d8 	.word	0x200016d8

08004d80 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8004d80:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8004d82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8004d86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8004d8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8004d8e:	4904      	ldr	r1, [pc, #16]	; (8004da0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8004d90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8004d92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8004d94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8004d96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8004d9a:	4902      	ldr	r1, [pc, #8]	; (8004da4 <_isr_wrapper+0x24>)
	bx r1
 8004d9c:	4708      	bx	r1
 8004d9e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8004da0:	08012450 	.word	0x08012450
	ldr r1, =z_arm_int_exit
 8004da4:	08004da9 	.word	0x08004da9

08004da8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004daa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004dac:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004dae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004db0:	d003      	beq.n	8004dba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004db2:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004db8:	600a      	str	r2, [r1, #0]

08004dba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004dba:	4770      	bx	lr
	ldr r3, =_kernel
 8004dbc:	200016d8 	.word	0x200016d8
	ldr r1, =_SCS_ICSR
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8004dc4:	b500      	push	{lr}
 8004dc6:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8004dc8:	290f      	cmp	r1, #15
 8004dca:	dc0f      	bgt.n	8004dec <reserved_exception+0x28>
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <reserved_exception+0x2c>)
 8004dce:	3910      	subs	r1, #16
 8004dd0:	9103      	str	r1, [sp, #12]
 8004dd2:	9302      	str	r3, [sp, #8]
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <reserved_exception+0x30>)
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	9000      	str	r0, [sp, #0]
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2201      	movs	r2, #1
 8004de0:	4905      	ldr	r1, [pc, #20]	; (8004df8 <reserved_exception+0x34>)
 8004de2:	f00a feb8 	bl	800fb56 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8004de6:	b005      	add	sp, #20
 8004de8:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <reserved_exception+0x38>)
 8004dee:	e7ee      	b.n	8004dce <reserved_exception+0xa>
 8004df0:	08012bf0 	.word	0x08012bf0
 8004df4:	08012c08 	.word	0x08012c08
 8004df8:	08012730 	.word	0x08012730
 8004dfc:	08012bd4 	.word	0x08012bd4

08004e00 <bus_fault>:
{
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	b0ba      	sub	sp, #232	; 0xe8
 8004e04:	4605      	mov	r5, r0
 8004e06:	460e      	mov	r6, r1
 8004e08:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004e10:	4ba8      	ldr	r3, [pc, #672]	; (80050b4 <bus_fault+0x2b4>)
 8004e12:	930e      	str	r3, [sp, #56]	; 0x38
 8004e14:	2300      	movs	r3, #0
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	2102      	movs	r1, #2
 8004e1a:	f88d 1004 	strb.w	r1, [sp, #4]
 8004e1e:	9901      	ldr	r1, [sp, #4]
 8004e20:	910d      	str	r1, [sp, #52]	; 0x34
 8004e22:	4619      	mov	r1, r3
 8004e24:	f363 0100 	bfi	r1, r3, #0, #1
 8004e28:	f363 0141 	bfi	r1, r3, #1, #1
 8004e2c:	f363 0182 	bfi	r1, r3, #2, #1
 8004e30:	f363 01c5 	bfi	r1, r3, #3, #3
 8004e34:	f362 1188 	bfi	r1, r2, #6, #3
 8004e38:	2208      	movs	r2, #8
 8004e3a:	f362 2152 	bfi	r1, r2, #9, #10
 8004e3e:	f363 41de 	bfi	r1, r3, #19, #12
 8004e42:	f363 71df 	bfi	r1, r3, #31, #1
 8004e46:	aa0d      	add	r2, sp, #52	; 0x34
 8004e48:	489b      	ldr	r0, [pc, #620]	; (80050b8 <bus_fault+0x2b8>)
 8004e4a:	f00a fdf7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004e4e:	4b9b      	ldr	r3, [pc, #620]	; (80050bc <bus_fault+0x2bc>)
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004e56:	d128      	bne.n	8004eaa <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8004e58:	4b98      	ldr	r3, [pc, #608]	; (80050bc <bus_fault+0x2bc>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004e60:	d146      	bne.n	8004ef0 <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004e62:	4b96      	ldr	r3, [pc, #600]	; (80050bc <bus_fault+0x2bc>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004e6a:	d164      	bne.n	8004f36 <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004e6c:	4b93      	ldr	r3, [pc, #588]	; (80050bc <bus_fault+0x2bc>)
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004e74:	f040 80b4 	bne.w	8004fe0 <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004e78:	4b90      	ldr	r3, [pc, #576]	; (80050bc <bus_fault+0x2bc>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e80:	f040 80d1 	bne.w	8005026 <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004e84:	4b8d      	ldr	r3, [pc, #564]	; (80050bc <bus_fault+0x2bc>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004e8c:	f040 80ee 	bne.w	800506c <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004e90:	4a8a      	ldr	r2, [pc, #552]	; (80050bc <bus_fault+0x2bc>)
 8004e92:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004e94:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8004e98:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f00a fe58 	bl	800fb52 <memory_fault_recoverable>
 8004ea2:	7020      	strb	r0, [r4, #0]
}
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	b03a      	add	sp, #232	; 0xe8
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004eb0:	4b83      	ldr	r3, [pc, #524]	; (80050c0 <bus_fault+0x2c0>)
 8004eb2:	9314      	str	r3, [sp, #80]	; 0x50
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	2102      	movs	r1, #2
 8004eba:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ebe:	9901      	ldr	r1, [sp, #4]
 8004ec0:	9113      	str	r1, [sp, #76]	; 0x4c
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f363 0100 	bfi	r1, r3, #0, #1
 8004ec8:	f363 0141 	bfi	r1, r3, #1, #1
 8004ecc:	f363 0182 	bfi	r1, r3, #2, #1
 8004ed0:	f363 01c5 	bfi	r1, r3, #3, #3
 8004ed4:	f362 1188 	bfi	r1, r2, #6, #3
 8004ed8:	2208      	movs	r2, #8
 8004eda:	f362 2152 	bfi	r1, r2, #9, #10
 8004ede:	f363 41de 	bfi	r1, r3, #19, #12
 8004ee2:	f363 71df 	bfi	r1, r3, #31, #1
 8004ee6:	aa13      	add	r2, sp, #76	; 0x4c
 8004ee8:	4873      	ldr	r0, [pc, #460]	; (80050b8 <bus_fault+0x2b8>)
 8004eea:	f00a fda7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8004eee:	e7b3      	b.n	8004e58 <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004ef6:	4b73      	ldr	r3, [pc, #460]	; (80050c4 <bus_fault+0x2c4>)
 8004ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8004efa:	2300      	movs	r3, #0
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2102      	movs	r1, #2
 8004f00:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f04:	9901      	ldr	r1, [sp, #4]
 8004f06:	9119      	str	r1, [sp, #100]	; 0x64
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f363 0100 	bfi	r1, r3, #0, #1
 8004f0e:	f363 0141 	bfi	r1, r3, #1, #1
 8004f12:	f363 0182 	bfi	r1, r3, #2, #1
 8004f16:	f363 01c5 	bfi	r1, r3, #3, #3
 8004f1a:	f362 1188 	bfi	r1, r2, #6, #3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	f362 2152 	bfi	r1, r2, #9, #10
 8004f24:	f363 41de 	bfi	r1, r3, #19, #12
 8004f28:	f363 71df 	bfi	r1, r3, #31, #1
 8004f2c:	aa19      	add	r2, sp, #100	; 0x64
 8004f2e:	4862      	ldr	r0, [pc, #392]	; (80050b8 <bus_fault+0x2b8>)
 8004f30:	f00a fd84 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8004f34:	e795      	b.n	8004e62 <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 8004f36:	2201      	movs	r2, #1
 8004f38:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004f3c:	4b62      	ldr	r3, [pc, #392]	; (80050c8 <bus_fault+0x2c8>)
 8004f3e:	9320      	str	r3, [sp, #128]	; 0x80
 8004f40:	2300      	movs	r3, #0
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	2102      	movs	r1, #2
 8004f46:	f88d 1004 	strb.w	r1, [sp, #4]
 8004f4a:	9901      	ldr	r1, [sp, #4]
 8004f4c:	911f      	str	r1, [sp, #124]	; 0x7c
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f363 0100 	bfi	r1, r3, #0, #1
 8004f54:	f363 0141 	bfi	r1, r3, #1, #1
 8004f58:	f363 0182 	bfi	r1, r3, #2, #1
 8004f5c:	f363 01c5 	bfi	r1, r3, #3, #3
 8004f60:	f362 1188 	bfi	r1, r2, #6, #3
 8004f64:	2208      	movs	r2, #8
 8004f66:	f362 2152 	bfi	r1, r2, #9, #10
 8004f6a:	f363 41de 	bfi	r1, r3, #19, #12
 8004f6e:	f363 71df 	bfi	r1, r3, #31, #1
 8004f72:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f74:	4850      	ldr	r0, [pc, #320]	; (80050b8 <bus_fault+0x2b8>)
 8004f76:	f00a fd61 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 8004f7a:	4b50      	ldr	r3, [pc, #320]	; (80050bc <bus_fault+0x2bc>)
 8004f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004f84:	f43f af72 	beq.w	8004e6c <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004f8e:	4b4f      	ldr	r3, [pc, #316]	; (80050cc <bus_fault+0x2cc>)
 8004f90:	9326      	str	r3, [sp, #152]	; 0x98
 8004f92:	9227      	str	r2, [sp, #156]	; 0x9c
 8004f94:	2300      	movs	r3, #0
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f88d 2004 	strb.w	r2, [sp, #4]
 8004f9e:	9a01      	ldr	r2, [sp, #4]
 8004fa0:	9225      	str	r2, [sp, #148]	; 0x94
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f363 0100 	bfi	r1, r3, #0, #1
 8004fa8:	f363 0141 	bfi	r1, r3, #1, #1
 8004fac:	f363 0182 	bfi	r1, r3, #2, #1
 8004fb0:	f363 01c5 	bfi	r1, r3, #3, #3
 8004fb4:	f360 1188 	bfi	r1, r0, #6, #3
 8004fb8:	220c      	movs	r2, #12
 8004fba:	f362 2152 	bfi	r1, r2, #9, #10
 8004fbe:	f363 41de 	bfi	r1, r3, #19, #12
 8004fc2:	f363 71df 	bfi	r1, r3, #31, #1
 8004fc6:	aa25      	add	r2, sp, #148	; 0x94
 8004fc8:	483b      	ldr	r0, [pc, #236]	; (80050b8 <bus_fault+0x2b8>)
 8004fca:	f00a fd37 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	f43f af4c 	beq.w	8004e6c <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004fd4:	4a39      	ldr	r2, [pc, #228]	; (80050bc <bus_fault+0x2bc>)
 8004fd6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fdc:	6293      	str	r3, [r2, #40]	; 0x28
 8004fde:	e745      	b.n	8004e6c <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <bus_fault+0x2d0>)
 8004fe8:	932c      	str	r3, [sp, #176]	; 0xb0
 8004fea:	2300      	movs	r3, #0
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	2102      	movs	r1, #2
 8004ff0:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ff4:	9901      	ldr	r1, [sp, #4]
 8004ff6:	912b      	str	r1, [sp, #172]	; 0xac
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f363 0100 	bfi	r1, r3, #0, #1
 8004ffe:	f363 0141 	bfi	r1, r3, #1, #1
 8005002:	f363 0182 	bfi	r1, r3, #2, #1
 8005006:	f363 01c5 	bfi	r1, r3, #3, #3
 800500a:	f362 1188 	bfi	r1, r2, #6, #3
 800500e:	2208      	movs	r2, #8
 8005010:	f362 2152 	bfi	r1, r2, #9, #10
 8005014:	f363 41de 	bfi	r1, r3, #19, #12
 8005018:	f363 71df 	bfi	r1, r3, #31, #1
 800501c:	aa2b      	add	r2, sp, #172	; 0xac
 800501e:	4826      	ldr	r0, [pc, #152]	; (80050b8 <bus_fault+0x2b8>)
 8005020:	f00a fd0c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8005024:	e728      	b.n	8004e78 <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 8005026:	2201      	movs	r2, #1
 8005028:	f8ad 2008 	strh.w	r2, [sp, #8]
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <bus_fault+0x2d4>)
 800502e:	9338      	str	r3, [sp, #224]	; 0xe0
 8005030:	2300      	movs	r3, #0
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	2102      	movs	r1, #2
 8005036:	f88d 1004 	strb.w	r1, [sp, #4]
 800503a:	9901      	ldr	r1, [sp, #4]
 800503c:	9137      	str	r1, [sp, #220]	; 0xdc
 800503e:	4619      	mov	r1, r3
 8005040:	f363 0100 	bfi	r1, r3, #0, #1
 8005044:	f363 0141 	bfi	r1, r3, #1, #1
 8005048:	f363 0182 	bfi	r1, r3, #2, #1
 800504c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005050:	f362 1188 	bfi	r1, r2, #6, #3
 8005054:	2208      	movs	r2, #8
 8005056:	f362 2152 	bfi	r1, r2, #9, #10
 800505a:	f363 41de 	bfi	r1, r3, #19, #12
 800505e:	f363 71df 	bfi	r1, r3, #31, #1
 8005062:	aa37      	add	r2, sp, #220	; 0xdc
 8005064:	4814      	ldr	r0, [pc, #80]	; (80050b8 <bus_fault+0x2b8>)
 8005066:	f00a fce9 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800506a:	e711      	b.n	8004e90 <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 800506c:	2201      	movs	r2, #1
 800506e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <bus_fault+0x2d8>)
 8005074:	9332      	str	r3, [sp, #200]	; 0xc8
 8005076:	2300      	movs	r3, #0
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	2102      	movs	r1, #2
 800507c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005080:	9901      	ldr	r1, [sp, #4]
 8005082:	9131      	str	r1, [sp, #196]	; 0xc4
 8005084:	4619      	mov	r1, r3
 8005086:	f363 0100 	bfi	r1, r3, #0, #1
 800508a:	f363 0141 	bfi	r1, r3, #1, #1
 800508e:	f363 0182 	bfi	r1, r3, #2, #1
 8005092:	f363 01c5 	bfi	r1, r3, #3, #3
 8005096:	f362 1188 	bfi	r1, r2, #6, #3
 800509a:	2208      	movs	r2, #8
 800509c:	f362 2152 	bfi	r1, r2, #9, #10
 80050a0:	f363 41de 	bfi	r1, r3, #19, #12
 80050a4:	f363 71df 	bfi	r1, r3, #31, #1
 80050a8:	aa31      	add	r2, sp, #196	; 0xc4
 80050aa:	4803      	ldr	r0, [pc, #12]	; (80050b8 <bus_fault+0x2b8>)
 80050ac:	f00a fcc6 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80050b0:	e6ee      	b.n	8004e90 <bus_fault+0x90>
 80050b2:	bf00      	nop
 80050b4:	08012c1c 	.word	0x08012c1c
 80050b8:	08012730 	.word	0x08012730
 80050bc:	e000ed00 	.word	0xe000ed00
 80050c0:	08012c34 	.word	0x08012c34
 80050c4:	08012c48 	.word	0x08012c48
 80050c8:	08012c5c 	.word	0x08012c5c
 80050cc:	08012c78 	.word	0x08012c78
 80050d0:	08012c90 	.word	0x08012c90
 80050d4:	08012cac 	.word	0x08012cac
 80050d8:	08012cc4 	.word	0x08012cc4

080050dc <usage_fault>:
{
 80050dc:	b500      	push	{lr}
 80050de:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 80050e0:	2201      	movs	r2, #1
 80050e2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80050e6:	4b8e      	ldr	r3, [pc, #568]	; (8005320 <usage_fault+0x244>)
 80050e8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ea:	2300      	movs	r3, #0
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2102      	movs	r1, #2
 80050f0:	f88d 1004 	strb.w	r1, [sp, #4]
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	910d      	str	r1, [sp, #52]	; 0x34
 80050f8:	4619      	mov	r1, r3
 80050fa:	f363 0100 	bfi	r1, r3, #0, #1
 80050fe:	f363 0141 	bfi	r1, r3, #1, #1
 8005102:	f363 0182 	bfi	r1, r3, #2, #1
 8005106:	f363 01c5 	bfi	r1, r3, #3, #3
 800510a:	f362 1188 	bfi	r1, r2, #6, #3
 800510e:	2208      	movs	r2, #8
 8005110:	f362 2152 	bfi	r1, r2, #9, #10
 8005114:	f363 41de 	bfi	r1, r3, #19, #12
 8005118:	f363 71df 	bfi	r1, r3, #31, #1
 800511c:	aa0d      	add	r2, sp, #52	; 0x34
 800511e:	4881      	ldr	r0, [pc, #516]	; (8005324 <usage_fault+0x248>)
 8005120:	f00a fc8c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8005124:	4b80      	ldr	r3, [pc, #512]	; (8005328 <usage_fault+0x24c>)
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800512c:	d125      	bne.n	800517a <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800512e:	4b7e      	ldr	r3, [pc, #504]	; (8005328 <usage_fault+0x24c>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005136:	d143      	bne.n	80051c0 <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8005138:	4b7b      	ldr	r3, [pc, #492]	; (8005328 <usage_fault+0x24c>)
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005140:	d161      	bne.n	8005206 <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8005142:	4b79      	ldr	r3, [pc, #484]	; (8005328 <usage_fault+0x24c>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800514a:	d17f      	bne.n	800524c <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800514c:	4b76      	ldr	r3, [pc, #472]	; (8005328 <usage_fault+0x24c>)
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005154:	f040 809d 	bne.w	8005292 <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8005158:	4b73      	ldr	r3, [pc, #460]	; (8005328 <usage_fault+0x24c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005160:	f040 80ba 	bne.w	80052d8 <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005164:	4a70      	ldr	r2, [pc, #448]	; (8005328 <usage_fault+0x24c>)
 8005166:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005168:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800516c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005170:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005172:	2000      	movs	r0, #0
 8005174:	b035      	add	sp, #212	; 0xd4
 8005176:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 800517a:	2201      	movs	r2, #1
 800517c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005180:	4b6a      	ldr	r3, [pc, #424]	; (800532c <usage_fault+0x250>)
 8005182:	9314      	str	r3, [sp, #80]	; 0x50
 8005184:	2300      	movs	r3, #0
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	2102      	movs	r1, #2
 800518a:	f88d 1004 	strb.w	r1, [sp, #4]
 800518e:	9901      	ldr	r1, [sp, #4]
 8005190:	9113      	str	r1, [sp, #76]	; 0x4c
 8005192:	4619      	mov	r1, r3
 8005194:	f363 0100 	bfi	r1, r3, #0, #1
 8005198:	f363 0141 	bfi	r1, r3, #1, #1
 800519c:	f363 0182 	bfi	r1, r3, #2, #1
 80051a0:	f363 01c5 	bfi	r1, r3, #3, #3
 80051a4:	f362 1188 	bfi	r1, r2, #6, #3
 80051a8:	2208      	movs	r2, #8
 80051aa:	f362 2152 	bfi	r1, r2, #9, #10
 80051ae:	f363 41de 	bfi	r1, r3, #19, #12
 80051b2:	f363 71df 	bfi	r1, r3, #31, #1
 80051b6:	aa13      	add	r2, sp, #76	; 0x4c
 80051b8:	485a      	ldr	r0, [pc, #360]	; (8005324 <usage_fault+0x248>)
 80051ba:	f00a fc3f 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80051be:	e7b6      	b.n	800512e <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 80051c0:	2201      	movs	r2, #1
 80051c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <usage_fault+0x254>)
 80051c8:	931a      	str	r3, [sp, #104]	; 0x68
 80051ca:	2300      	movs	r3, #0
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	2102      	movs	r1, #2
 80051d0:	f88d 1004 	strb.w	r1, [sp, #4]
 80051d4:	9901      	ldr	r1, [sp, #4]
 80051d6:	9119      	str	r1, [sp, #100]	; 0x64
 80051d8:	4619      	mov	r1, r3
 80051da:	f363 0100 	bfi	r1, r3, #0, #1
 80051de:	f363 0141 	bfi	r1, r3, #1, #1
 80051e2:	f363 0182 	bfi	r1, r3, #2, #1
 80051e6:	f363 01c5 	bfi	r1, r3, #3, #3
 80051ea:	f362 1188 	bfi	r1, r2, #6, #3
 80051ee:	2208      	movs	r2, #8
 80051f0:	f362 2152 	bfi	r1, r2, #9, #10
 80051f4:	f363 41de 	bfi	r1, r3, #19, #12
 80051f8:	f363 71df 	bfi	r1, r3, #31, #1
 80051fc:	aa19      	add	r2, sp, #100	; 0x64
 80051fe:	4849      	ldr	r0, [pc, #292]	; (8005324 <usage_fault+0x248>)
 8005200:	f00a fc1c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8005204:	e798      	b.n	8005138 <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 8005206:	2201      	movs	r2, #1
 8005208:	f8ad 2008 	strh.w	r2, [sp, #8]
 800520c:	4b49      	ldr	r3, [pc, #292]	; (8005334 <usage_fault+0x258>)
 800520e:	9320      	str	r3, [sp, #128]	; 0x80
 8005210:	2300      	movs	r3, #0
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	2102      	movs	r1, #2
 8005216:	f88d 1004 	strb.w	r1, [sp, #4]
 800521a:	9901      	ldr	r1, [sp, #4]
 800521c:	911f      	str	r1, [sp, #124]	; 0x7c
 800521e:	4619      	mov	r1, r3
 8005220:	f363 0100 	bfi	r1, r3, #0, #1
 8005224:	f363 0141 	bfi	r1, r3, #1, #1
 8005228:	f363 0182 	bfi	r1, r3, #2, #1
 800522c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005230:	f362 1188 	bfi	r1, r2, #6, #3
 8005234:	2208      	movs	r2, #8
 8005236:	f362 2152 	bfi	r1, r2, #9, #10
 800523a:	f363 41de 	bfi	r1, r3, #19, #12
 800523e:	f363 71df 	bfi	r1, r3, #31, #1
 8005242:	aa1f      	add	r2, sp, #124	; 0x7c
 8005244:	4837      	ldr	r0, [pc, #220]	; (8005324 <usage_fault+0x248>)
 8005246:	f00a fbf9 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800524a:	e77a      	b.n	8005142 <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800524c:	2201      	movs	r2, #1
 800524e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <usage_fault+0x25c>)
 8005254:	9326      	str	r3, [sp, #152]	; 0x98
 8005256:	2300      	movs	r3, #0
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	2102      	movs	r1, #2
 800525c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005260:	9901      	ldr	r1, [sp, #4]
 8005262:	9125      	str	r1, [sp, #148]	; 0x94
 8005264:	4619      	mov	r1, r3
 8005266:	f363 0100 	bfi	r1, r3, #0, #1
 800526a:	f363 0141 	bfi	r1, r3, #1, #1
 800526e:	f363 0182 	bfi	r1, r3, #2, #1
 8005272:	f363 01c5 	bfi	r1, r3, #3, #3
 8005276:	f362 1188 	bfi	r1, r2, #6, #3
 800527a:	2208      	movs	r2, #8
 800527c:	f362 2152 	bfi	r1, r2, #9, #10
 8005280:	f363 41de 	bfi	r1, r3, #19, #12
 8005284:	f363 71df 	bfi	r1, r3, #31, #1
 8005288:	aa25      	add	r2, sp, #148	; 0x94
 800528a:	4826      	ldr	r0, [pc, #152]	; (8005324 <usage_fault+0x248>)
 800528c:	f00a fbd6 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8005290:	e75c      	b.n	800514c <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8005292:	2201      	movs	r2, #1
 8005294:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005298:	4b28      	ldr	r3, [pc, #160]	; (800533c <usage_fault+0x260>)
 800529a:	932c      	str	r3, [sp, #176]	; 0xb0
 800529c:	2300      	movs	r3, #0
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	2102      	movs	r1, #2
 80052a2:	f88d 1004 	strb.w	r1, [sp, #4]
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	912b      	str	r1, [sp, #172]	; 0xac
 80052aa:	4619      	mov	r1, r3
 80052ac:	f363 0100 	bfi	r1, r3, #0, #1
 80052b0:	f363 0141 	bfi	r1, r3, #1, #1
 80052b4:	f363 0182 	bfi	r1, r3, #2, #1
 80052b8:	f363 01c5 	bfi	r1, r3, #3, #3
 80052bc:	f362 1188 	bfi	r1, r2, #6, #3
 80052c0:	2208      	movs	r2, #8
 80052c2:	f362 2152 	bfi	r1, r2, #9, #10
 80052c6:	f363 41de 	bfi	r1, r3, #19, #12
 80052ca:	f363 71df 	bfi	r1, r3, #31, #1
 80052ce:	aa2b      	add	r2, sp, #172	; 0xac
 80052d0:	4814      	ldr	r0, [pc, #80]	; (8005324 <usage_fault+0x248>)
 80052d2:	f00a fbb3 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80052d6:	e73f      	b.n	8005158 <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80052d8:	2201      	movs	r2, #1
 80052da:	f8ad 2008 	strh.w	r2, [sp, #8]
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <usage_fault+0x264>)
 80052e0:	9332      	str	r3, [sp, #200]	; 0xc8
 80052e2:	2300      	movs	r3, #0
 80052e4:	9301      	str	r3, [sp, #4]
 80052e6:	2102      	movs	r1, #2
 80052e8:	f88d 1004 	strb.w	r1, [sp, #4]
 80052ec:	9901      	ldr	r1, [sp, #4]
 80052ee:	9131      	str	r1, [sp, #196]	; 0xc4
 80052f0:	4619      	mov	r1, r3
 80052f2:	f363 0100 	bfi	r1, r3, #0, #1
 80052f6:	f363 0141 	bfi	r1, r3, #1, #1
 80052fa:	f363 0182 	bfi	r1, r3, #2, #1
 80052fe:	f363 01c5 	bfi	r1, r3, #3, #3
 8005302:	f362 1188 	bfi	r1, r2, #6, #3
 8005306:	2208      	movs	r2, #8
 8005308:	f362 2152 	bfi	r1, r2, #9, #10
 800530c:	f363 41de 	bfi	r1, r3, #19, #12
 8005310:	f363 71df 	bfi	r1, r3, #31, #1
 8005314:	aa31      	add	r2, sp, #196	; 0xc4
 8005316:	4803      	ldr	r0, [pc, #12]	; (8005324 <usage_fault+0x248>)
 8005318:	f00a fb90 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800531c:	e722      	b.n	8005164 <usage_fault+0x88>
 800531e:	bf00      	nop
 8005320:	08012cf4 	.word	0x08012cf4
 8005324:	08012730 	.word	0x08012730
 8005328:	e000ed00 	.word	0xe000ed00
 800532c:	08012d0c 	.word	0x08012d0c
 8005330:	08012d20 	.word	0x08012d20
 8005334:	08012d3c 	.word	0x08012d3c
 8005338:	08012d5c 	.word	0x08012d5c
 800533c:	08012d84 	.word	0x08012d84
 8005340:	08012da0 	.word	0x08012da0

08005344 <debug_monitor>:
{
 8005344:	b500      	push	{lr}
 8005346:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 8005348:	2300      	movs	r3, #0
 800534a:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 800534c:	2201      	movs	r2, #1
 800534e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005352:	4910      	ldr	r1, [pc, #64]	; (8005394 <debug_monitor+0x50>)
 8005354:	910e      	str	r1, [sp, #56]	; 0x38
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2102      	movs	r1, #2
 800535a:	f88d 1004 	strb.w	r1, [sp, #4]
 800535e:	9901      	ldr	r1, [sp, #4]
 8005360:	910d      	str	r1, [sp, #52]	; 0x34
 8005362:	4619      	mov	r1, r3
 8005364:	f363 0100 	bfi	r1, r3, #0, #1
 8005368:	f363 0141 	bfi	r1, r3, #1, #1
 800536c:	f363 0182 	bfi	r1, r3, #2, #1
 8005370:	f363 01c5 	bfi	r1, r3, #3, #3
 8005374:	f362 1188 	bfi	r1, r2, #6, #3
 8005378:	2208      	movs	r2, #8
 800537a:	f362 2152 	bfi	r1, r2, #9, #10
 800537e:	f363 41de 	bfi	r1, r3, #19, #12
 8005382:	f363 71df 	bfi	r1, r3, #31, #1
 8005386:	aa0d      	add	r2, sp, #52	; 0x34
 8005388:	4803      	ldr	r0, [pc, #12]	; (8005398 <debug_monitor+0x54>)
 800538a:	f00a fb57 	bl	800fa3c <z_impl_z_log_msg2_static_create>
}
 800538e:	b011      	add	sp, #68	; 0x44
 8005390:	f85d fb04 	ldr.w	pc, [sp], #4
 8005394:	08012dcc 	.word	0x08012dcc
 8005398:	08012730 	.word	0x08012730

0800539c <mem_manage_fault>:
{
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	b0b5      	sub	sp, #212	; 0xd4
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 80053a6:	2201      	movs	r2, #1
 80053a8:	f8ad 2008 	strh.w	r2, [sp, #8]
 80053ac:	4ba3      	ldr	r3, [pc, #652]	; (800563c <mem_manage_fault+0x2a0>)
 80053ae:	930e      	str	r3, [sp, #56]	; 0x38
 80053b0:	2300      	movs	r3, #0
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	2102      	movs	r1, #2
 80053b6:	f88d 1004 	strb.w	r1, [sp, #4]
 80053ba:	9901      	ldr	r1, [sp, #4]
 80053bc:	910d      	str	r1, [sp, #52]	; 0x34
 80053be:	4619      	mov	r1, r3
 80053c0:	f363 0100 	bfi	r1, r3, #0, #1
 80053c4:	f363 0141 	bfi	r1, r3, #1, #1
 80053c8:	f363 0182 	bfi	r1, r3, #2, #1
 80053cc:	f363 01c5 	bfi	r1, r3, #3, #3
 80053d0:	f362 1188 	bfi	r1, r2, #6, #3
 80053d4:	2208      	movs	r2, #8
 80053d6:	f362 2152 	bfi	r1, r2, #9, #10
 80053da:	f363 41de 	bfi	r1, r3, #19, #12
 80053de:	f363 71df 	bfi	r1, r3, #31, #1
 80053e2:	aa0d      	add	r2, sp, #52	; 0x34
 80053e4:	4896      	ldr	r0, [pc, #600]	; (8005640 <mem_manage_fault+0x2a4>)
 80053e6:	f00a fb29 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80053ea:	4b96      	ldr	r3, [pc, #600]	; (8005644 <mem_manage_fault+0x2a8>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f013 0f10 	tst.w	r3, #16
 80053f2:	d134      	bne.n	800545e <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80053f4:	4b93      	ldr	r3, [pc, #588]	; (8005644 <mem_manage_fault+0x2a8>)
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	f013 0f08 	tst.w	r3, #8
 80053fc:	d152      	bne.n	80054a4 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80053fe:	4b91      	ldr	r3, [pc, #580]	; (8005644 <mem_manage_fault+0x2a8>)
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f013 0f02 	tst.w	r3, #2
 8005406:	d170      	bne.n	80054ea <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 8005408:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800540c:	4b8d      	ldr	r3, [pc, #564]	; (8005644 <mem_manage_fault+0x2a8>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f013 0f01 	tst.w	r3, #1
 8005414:	f040 80c0 	bne.w	8005598 <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8005418:	4b8a      	ldr	r3, [pc, #552]	; (8005644 <mem_manage_fault+0x2a8>)
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	f013 0f20 	tst.w	r3, #32
 8005420:	f040 80dd 	bne.w	80055de <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005424:	4b87      	ldr	r3, [pc, #540]	; (8005644 <mem_manage_fault+0x2a8>)
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	f013 0f10 	tst.w	r3, #16
 800542c:	d104      	bne.n	8005438 <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800542e:	4b85      	ldr	r3, [pc, #532]	; (8005644 <mem_manage_fault+0x2a8>)
 8005430:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005432:	f014 0402 	ands.w	r4, r4, #2
 8005436:	d005      	beq.n	8005444 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8005438:	4b82      	ldr	r3, [pc, #520]	; (8005644 <mem_manage_fault+0x2a8>)
 800543a:	685c      	ldr	r4, [r3, #4]
 800543c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8005440:	f040 80f0 	bne.w	8005624 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8005444:	4a7f      	ldr	r2, [pc, #508]	; (8005644 <mem_manage_fault+0x2a8>)
 8005446:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005448:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800544c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800544e:	2101      	movs	r1, #1
 8005450:	4628      	mov	r0, r5
 8005452:	f00a fb7e 	bl	800fb52 <memory_fault_recoverable>
 8005456:	7030      	strb	r0, [r6, #0]
}
 8005458:	4620      	mov	r0, r4
 800545a:	b035      	add	sp, #212	; 0xd4
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 800545e:	2201      	movs	r2, #1
 8005460:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005464:	4b78      	ldr	r3, [pc, #480]	; (8005648 <mem_manage_fault+0x2ac>)
 8005466:	9314      	str	r3, [sp, #80]	; 0x50
 8005468:	2300      	movs	r3, #0
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	2102      	movs	r1, #2
 800546e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005472:	9901      	ldr	r1, [sp, #4]
 8005474:	9113      	str	r1, [sp, #76]	; 0x4c
 8005476:	4619      	mov	r1, r3
 8005478:	f363 0100 	bfi	r1, r3, #0, #1
 800547c:	f363 0141 	bfi	r1, r3, #1, #1
 8005480:	f363 0182 	bfi	r1, r3, #2, #1
 8005484:	f363 01c5 	bfi	r1, r3, #3, #3
 8005488:	f362 1188 	bfi	r1, r2, #6, #3
 800548c:	2208      	movs	r2, #8
 800548e:	f362 2152 	bfi	r1, r2, #9, #10
 8005492:	f363 41de 	bfi	r1, r3, #19, #12
 8005496:	f363 71df 	bfi	r1, r3, #31, #1
 800549a:	aa13      	add	r2, sp, #76	; 0x4c
 800549c:	4868      	ldr	r0, [pc, #416]	; (8005640 <mem_manage_fault+0x2a4>)
 800549e:	f00a facd 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80054a2:	e7a7      	b.n	80053f4 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 80054a4:	2201      	movs	r2, #1
 80054a6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80054aa:	4b68      	ldr	r3, [pc, #416]	; (800564c <mem_manage_fault+0x2b0>)
 80054ac:	931a      	str	r3, [sp, #104]	; 0x68
 80054ae:	2300      	movs	r3, #0
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2102      	movs	r1, #2
 80054b4:	f88d 1004 	strb.w	r1, [sp, #4]
 80054b8:	9901      	ldr	r1, [sp, #4]
 80054ba:	9119      	str	r1, [sp, #100]	; 0x64
 80054bc:	4619      	mov	r1, r3
 80054be:	f363 0100 	bfi	r1, r3, #0, #1
 80054c2:	f363 0141 	bfi	r1, r3, #1, #1
 80054c6:	f363 0182 	bfi	r1, r3, #2, #1
 80054ca:	f363 01c5 	bfi	r1, r3, #3, #3
 80054ce:	f362 1188 	bfi	r1, r2, #6, #3
 80054d2:	2208      	movs	r2, #8
 80054d4:	f362 2152 	bfi	r1, r2, #9, #10
 80054d8:	f363 41de 	bfi	r1, r3, #19, #12
 80054dc:	f363 71df 	bfi	r1, r3, #31, #1
 80054e0:	aa19      	add	r2, sp, #100	; 0x64
 80054e2:	4857      	ldr	r0, [pc, #348]	; (8005640 <mem_manage_fault+0x2a4>)
 80054e4:	f00a faaa 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80054e8:	e789      	b.n	80053fe <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 80054ea:	2201      	movs	r2, #1
 80054ec:	f8ad 2008 	strh.w	r2, [sp, #8]
 80054f0:	4b57      	ldr	r3, [pc, #348]	; (8005650 <mem_manage_fault+0x2b4>)
 80054f2:	9320      	str	r3, [sp, #128]	; 0x80
 80054f4:	2300      	movs	r3, #0
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	2102      	movs	r1, #2
 80054fa:	f88d 1004 	strb.w	r1, [sp, #4]
 80054fe:	9901      	ldr	r1, [sp, #4]
 8005500:	911f      	str	r1, [sp, #124]	; 0x7c
 8005502:	4619      	mov	r1, r3
 8005504:	f363 0100 	bfi	r1, r3, #0, #1
 8005508:	f363 0141 	bfi	r1, r3, #1, #1
 800550c:	f363 0182 	bfi	r1, r3, #2, #1
 8005510:	f363 01c5 	bfi	r1, r3, #3, #3
 8005514:	f362 1188 	bfi	r1, r2, #6, #3
 8005518:	2208      	movs	r2, #8
 800551a:	f362 2152 	bfi	r1, r2, #9, #10
 800551e:	f363 41de 	bfi	r1, r3, #19, #12
 8005522:	f363 71df 	bfi	r1, r3, #31, #1
 8005526:	aa1f      	add	r2, sp, #124	; 0x7c
 8005528:	4845      	ldr	r0, [pc, #276]	; (8005640 <mem_manage_fault+0x2a4>)
 800552a:	f00a fa87 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 800552e:	4b45      	ldr	r3, [pc, #276]	; (8005644 <mem_manage_fault+0x2a8>)
 8005530:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005538:	d102      	bne.n	8005540 <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 800553a:	f06f 0715 	mvn.w	r7, #21
 800553e:	e765      	b.n	800540c <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8005540:	2201      	movs	r2, #1
 8005542:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005546:	4b43      	ldr	r3, [pc, #268]	; (8005654 <mem_manage_fault+0x2b8>)
 8005548:	9326      	str	r3, [sp, #152]	; 0x98
 800554a:	9727      	str	r7, [sp, #156]	; 0x9c
 800554c:	2300      	movs	r3, #0
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	2103      	movs	r1, #3
 8005552:	f88d 1004 	strb.w	r1, [sp, #4]
 8005556:	9901      	ldr	r1, [sp, #4]
 8005558:	9125      	str	r1, [sp, #148]	; 0x94
 800555a:	4619      	mov	r1, r3
 800555c:	f363 0100 	bfi	r1, r3, #0, #1
 8005560:	f363 0141 	bfi	r1, r3, #1, #1
 8005564:	f363 0182 	bfi	r1, r3, #2, #1
 8005568:	f363 01c5 	bfi	r1, r3, #3, #3
 800556c:	f362 1188 	bfi	r1, r2, #6, #3
 8005570:	220c      	movs	r2, #12
 8005572:	f362 2152 	bfi	r1, r2, #9, #10
 8005576:	f363 41de 	bfi	r1, r3, #19, #12
 800557a:	f363 71df 	bfi	r1, r3, #31, #1
 800557e:	aa25      	add	r2, sp, #148	; 0x94
 8005580:	482f      	ldr	r0, [pc, #188]	; (8005640 <mem_manage_fault+0x2a4>)
 8005582:	f00a fa5b 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8005586:	2c00      	cmp	r4, #0
 8005588:	f43f af40 	beq.w	800540c <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 800558c:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <mem_manage_fault+0x2a8>)
 800558e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005594:	6293      	str	r3, [r2, #40]	; 0x28
 8005596:	e739      	b.n	800540c <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 8005598:	2201      	movs	r2, #1
 800559a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800559e:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <mem_manage_fault+0x2bc>)
 80055a0:	932c      	str	r3, [sp, #176]	; 0xb0
 80055a2:	2300      	movs	r3, #0
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	2102      	movs	r1, #2
 80055a8:	f88d 1004 	strb.w	r1, [sp, #4]
 80055ac:	9901      	ldr	r1, [sp, #4]
 80055ae:	912b      	str	r1, [sp, #172]	; 0xac
 80055b0:	4619      	mov	r1, r3
 80055b2:	f363 0100 	bfi	r1, r3, #0, #1
 80055b6:	f363 0141 	bfi	r1, r3, #1, #1
 80055ba:	f363 0182 	bfi	r1, r3, #2, #1
 80055be:	f363 01c5 	bfi	r1, r3, #3, #3
 80055c2:	f362 1188 	bfi	r1, r2, #6, #3
 80055c6:	2208      	movs	r2, #8
 80055c8:	f362 2152 	bfi	r1, r2, #9, #10
 80055cc:	f363 41de 	bfi	r1, r3, #19, #12
 80055d0:	f363 71df 	bfi	r1, r3, #31, #1
 80055d4:	aa2b      	add	r2, sp, #172	; 0xac
 80055d6:	481a      	ldr	r0, [pc, #104]	; (8005640 <mem_manage_fault+0x2a4>)
 80055d8:	f00a fa30 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80055dc:	e71c      	b.n	8005418 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 80055de:	2201      	movs	r2, #1
 80055e0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055e4:	4b1d      	ldr	r3, [pc, #116]	; (800565c <mem_manage_fault+0x2c0>)
 80055e6:	9332      	str	r3, [sp, #200]	; 0xc8
 80055e8:	2300      	movs	r3, #0
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	2102      	movs	r1, #2
 80055ee:	f88d 1004 	strb.w	r1, [sp, #4]
 80055f2:	9901      	ldr	r1, [sp, #4]
 80055f4:	9131      	str	r1, [sp, #196]	; 0xc4
 80055f6:	4619      	mov	r1, r3
 80055f8:	f363 0100 	bfi	r1, r3, #0, #1
 80055fc:	f363 0141 	bfi	r1, r3, #1, #1
 8005600:	f363 0182 	bfi	r1, r3, #2, #1
 8005604:	f363 01c5 	bfi	r1, r3, #3, #3
 8005608:	f362 1188 	bfi	r1, r2, #6, #3
 800560c:	2208      	movs	r2, #8
 800560e:	f362 2152 	bfi	r1, r2, #9, #10
 8005612:	f363 41de 	bfi	r1, r3, #19, #12
 8005616:	f363 71df 	bfi	r1, r3, #31, #1
 800561a:	aa31      	add	r2, sp, #196	; 0xc4
 800561c:	4808      	ldr	r0, [pc, #32]	; (8005640 <mem_manage_fault+0x2a4>)
 800561e:	f00a fa0d 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8005622:	e6ff      	b.n	8005424 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8005624:	4629      	mov	r1, r5
 8005626:	4638      	mov	r0, r7
 8005628:	f7ff fb6e 	bl	8004d08 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800562c:	4604      	mov	r4, r0
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f af08 	beq.w	8005444 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005634:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8005638:	2402      	movs	r4, #2
 800563a:	e703      	b.n	8005444 <mem_manage_fault+0xa8>
 800563c:	08012df0 	.word	0x08012df0
 8005640:	08012730 	.word	0x08012730
 8005644:	e000ed00 	.word	0xe000ed00
 8005648:	08012e08 	.word	0x08012e08
 800564c:	08012c48 	.word	0x08012c48
 8005650:	08012e3c 	.word	0x08012e3c
 8005654:	08012e54 	.word	0x08012e54
 8005658:	08012e6c 	.word	0x08012e6c
 800565c:	08012cc4 	.word	0x08012cc4

08005660 <hard_fault>:
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b0a9      	sub	sp, #164	; 0xa4
 8005664:	4607      	mov	r7, r0
 8005666:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 8005668:	2301      	movs	r3, #1
 800566a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800566e:	4a73      	ldr	r2, [pc, #460]	; (800583c <hard_fault+0x1dc>)
 8005670:	920e      	str	r2, [sp, #56]	; 0x38
 8005672:	2400      	movs	r4, #0
 8005674:	9401      	str	r4, [sp, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f88d 2004 	strb.w	r2, [sp, #4]
 800567c:	9a01      	ldr	r2, [sp, #4]
 800567e:	920d      	str	r2, [sp, #52]	; 0x34
 8005680:	4621      	mov	r1, r4
 8005682:	f364 0100 	bfi	r1, r4, #0, #1
 8005686:	f364 0141 	bfi	r1, r4, #1, #1
 800568a:	f364 0182 	bfi	r1, r4, #2, #1
 800568e:	f364 01c5 	bfi	r1, r4, #3, #3
 8005692:	f363 1188 	bfi	r1, r3, #6, #3
 8005696:	2308      	movs	r3, #8
 8005698:	f363 2152 	bfi	r1, r3, #9, #10
 800569c:	f364 41de 	bfi	r1, r4, #19, #12
 80056a0:	f364 71df 	bfi	r1, r4, #31, #1
 80056a4:	4623      	mov	r3, r4
 80056a6:	aa0d      	add	r2, sp, #52	; 0x34
 80056a8:	4865      	ldr	r0, [pc, #404]	; (8005840 <hard_fault+0x1e0>)
 80056aa:	f00a f9c7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 80056ae:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80056b0:	4b64      	ldr	r3, [pc, #400]	; (8005844 <hard_fault+0x1e4>)
 80056b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80056b4:	f015 0502 	ands.w	r5, r5, #2
 80056b8:	d10a      	bne.n	80056d0 <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80056ba:	4b62      	ldr	r3, [pc, #392]	; (8005844 <hard_fault+0x1e4>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	db2a      	blt.n	8005718 <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80056c2:	4b60      	ldr	r3, [pc, #384]	; (8005844 <hard_fault+0x1e4>)
 80056c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80056c6:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80056ca:	d149      	bne.n	8005760 <hard_fault+0x100>
}
 80056cc:	b029      	add	sp, #164	; 0xa4
 80056ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 80056d0:	2301      	movs	r3, #1
 80056d2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80056d6:	4a5c      	ldr	r2, [pc, #368]	; (8005848 <hard_fault+0x1e8>)
 80056d8:	9226      	str	r2, [sp, #152]	; 0x98
 80056da:	9401      	str	r4, [sp, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f88d 2004 	strb.w	r2, [sp, #4]
 80056e2:	9a01      	ldr	r2, [sp, #4]
 80056e4:	9225      	str	r2, [sp, #148]	; 0x94
 80056e6:	4621      	mov	r1, r4
 80056e8:	f364 0100 	bfi	r1, r4, #0, #1
 80056ec:	f364 0141 	bfi	r1, r4, #1, #1
 80056f0:	f364 0182 	bfi	r1, r4, #2, #1
 80056f4:	f364 01c5 	bfi	r1, r4, #3, #3
 80056f8:	f363 1188 	bfi	r1, r3, #6, #3
 80056fc:	2308      	movs	r3, #8
 80056fe:	f363 2152 	bfi	r1, r3, #9, #10
 8005702:	f364 41de 	bfi	r1, r4, #19, #12
 8005706:	f364 71df 	bfi	r1, r4, #31, #1
 800570a:	4623      	mov	r3, r4
 800570c:	aa25      	add	r2, sp, #148	; 0x94
 800570e:	484c      	ldr	r0, [pc, #304]	; (8005840 <hard_fault+0x1e0>)
 8005710:	f00a f994 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005714:	4620      	mov	r0, r4
 8005716:	e7d9      	b.n	80056cc <hard_fault+0x6c>
		PR_EXC("  Debug event");
 8005718:	2201      	movs	r2, #1
 800571a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800571e:	4b4b      	ldr	r3, [pc, #300]	; (800584c <hard_fault+0x1ec>)
 8005720:	9320      	str	r3, [sp, #128]	; 0x80
 8005722:	2300      	movs	r3, #0
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	2102      	movs	r1, #2
 8005728:	f88d 1004 	strb.w	r1, [sp, #4]
 800572c:	9901      	ldr	r1, [sp, #4]
 800572e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005730:	4619      	mov	r1, r3
 8005732:	f363 0100 	bfi	r1, r3, #0, #1
 8005736:	f363 0141 	bfi	r1, r3, #1, #1
 800573a:	f363 0182 	bfi	r1, r3, #2, #1
 800573e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005742:	f362 1188 	bfi	r1, r2, #6, #3
 8005746:	2208      	movs	r2, #8
 8005748:	f362 2152 	bfi	r1, r2, #9, #10
 800574c:	f363 41de 	bfi	r1, r3, #19, #12
 8005750:	f363 71df 	bfi	r1, r3, #31, #1
 8005754:	aa1f      	add	r2, sp, #124	; 0x7c
 8005756:	483a      	ldr	r0, [pc, #232]	; (8005840 <hard_fault+0x1e0>)
 8005758:	f00a f970 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800575c:	4628      	mov	r0, r5
 800575e:	e7b5      	b.n	80056cc <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8005760:	2201      	movs	r2, #1
 8005762:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005766:	4b3a      	ldr	r3, [pc, #232]	; (8005850 <hard_fault+0x1f0>)
 8005768:	9314      	str	r3, [sp, #80]	; 0x50
 800576a:	2300      	movs	r3, #0
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	2102      	movs	r1, #2
 8005770:	f88d 1004 	strb.w	r1, [sp, #4]
 8005774:	9901      	ldr	r1, [sp, #4]
 8005776:	9113      	str	r1, [sp, #76]	; 0x4c
 8005778:	4619      	mov	r1, r3
 800577a:	f363 0100 	bfi	r1, r3, #0, #1
 800577e:	f363 0141 	bfi	r1, r3, #1, #1
 8005782:	f363 0182 	bfi	r1, r3, #2, #1
 8005786:	f363 01c5 	bfi	r1, r3, #3, #3
 800578a:	f362 1188 	bfi	r1, r2, #6, #3
 800578e:	2208      	movs	r2, #8
 8005790:	f362 2152 	bfi	r1, r2, #9, #10
 8005794:	f363 41de 	bfi	r1, r3, #19, #12
 8005798:	f363 71df 	bfi	r1, r3, #31, #1
 800579c:	aa13      	add	r2, sp, #76	; 0x4c
 800579e:	4828      	ldr	r0, [pc, #160]	; (8005840 <hard_fault+0x1e0>)
 80057a0:	f00a f94c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80057a4:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 80057a6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80057aa:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d00d      	beq.n	80057ce <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <hard_fault+0x1e4>)
 80057b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057b8:	bb7b      	cbnz	r3, 800581a <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <hard_fault+0x1e4>)
 80057bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057c0:	bb8b      	cbnz	r3, 8005826 <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <hard_fault+0x1e4>)
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	bb9b      	cbnz	r3, 8005832 <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80057ca:	4628      	mov	r0, r5
	return reason;
 80057cc:	e77e      	b.n	80056cc <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 80057ce:	2201      	movs	r2, #1
 80057d0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <hard_fault+0x1f4>)
 80057d6:	931a      	str	r3, [sp, #104]	; 0x68
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	931b      	str	r3, [sp, #108]	; 0x6c
 80057dc:	2300      	movs	r3, #0
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	2103      	movs	r1, #3
 80057e2:	f88d 1004 	strb.w	r1, [sp, #4]
 80057e6:	9901      	ldr	r1, [sp, #4]
 80057e8:	9119      	str	r1, [sp, #100]	; 0x64
 80057ea:	4619      	mov	r1, r3
 80057ec:	f363 0100 	bfi	r1, r3, #0, #1
 80057f0:	f363 0141 	bfi	r1, r3, #1, #1
 80057f4:	f363 0182 	bfi	r1, r3, #2, #1
 80057f8:	f363 01c5 	bfi	r1, r3, #3, #3
 80057fc:	f362 1188 	bfi	r1, r2, #6, #3
 8005800:	220c      	movs	r2, #12
 8005802:	f362 2152 	bfi	r1, r2, #9, #10
 8005806:	f363 41de 	bfi	r1, r3, #19, #12
 800580a:	f363 71df 	bfi	r1, r3, #31, #1
 800580e:	aa19      	add	r2, sp, #100	; 0x64
 8005810:	480b      	ldr	r0, [pc, #44]	; (8005840 <hard_fault+0x1e0>)
 8005812:	f00a f913 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 8005816:	6838      	ldr	r0, [r7, #0]
 8005818:	e758      	b.n	80056cc <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 800581a:	4632      	mov	r2, r6
 800581c:	2101      	movs	r1, #1
 800581e:	4638      	mov	r0, r7
 8005820:	f7ff fdbc 	bl	800539c <mem_manage_fault>
 8005824:	e752      	b.n	80056cc <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 8005826:	4632      	mov	r2, r6
 8005828:	2101      	movs	r1, #1
 800582a:	4638      	mov	r0, r7
 800582c:	f7ff fae8 	bl	8004e00 <bus_fault>
 8005830:	e74c      	b.n	80056cc <hard_fault+0x6c>
			reason = usage_fault(esf);
 8005832:	4638      	mov	r0, r7
 8005834:	f7ff fc52 	bl	80050dc <usage_fault>
 8005838:	e748      	b.n	80056cc <hard_fault+0x6c>
 800583a:	bf00      	nop
 800583c:	08012e8c 	.word	0x08012e8c
 8005840:	08012730 	.word	0x08012730
 8005844:	e000ed00 	.word	0xe000ed00
 8005848:	08012ea4 	.word	0x08012ea4
 800584c:	08012ec8 	.word	0x08012ec8
 8005850:	08012ed8 	.word	0x08012ed8
 8005854:	08012ef8 	.word	0x08012ef8

08005858 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800585c:	4b38      	ldr	r3, [pc, #224]	; (8005940 <z_arm_fault+0xe8>)
 800585e:	685d      	ldr	r5, [r3, #4]
 8005860:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005864:	2300      	movs	r3, #0
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800586e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8005872:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005876:	d13c      	bne.n	80058f2 <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8005878:	f002 030c 	and.w	r3, r2, #12
 800587c:	2b08      	cmp	r3, #8
 800587e:	d010      	beq.n	80058a2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8005880:	f012 0f08 	tst.w	r2, #8
 8005884:	d032      	beq.n	80058ec <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 8005886:	460c      	mov	r4, r1
	*nested_exc = false;
 8005888:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 800588a:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	f00a f96d 	bl	800fb70 <fault_handle>
 8005896:	4605      	mov	r5, r0
	if (recoverable) {
 8005898:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800589c:	b363      	cbz	r3, 80058f8 <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 800589e:	b018      	add	sp, #96	; 0x60
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80058a2:	2301      	movs	r3, #1
 80058a4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80058a8:	4a26      	ldr	r2, [pc, #152]	; (8005944 <z_arm_fault+0xec>)
 80058aa:	9216      	str	r2, [sp, #88]	; 0x58
 80058ac:	2400      	movs	r4, #0
 80058ae:	9400      	str	r4, [sp, #0]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f88d 2000 	strb.w	r2, [sp]
 80058b6:	9a00      	ldr	r2, [sp, #0]
 80058b8:	9215      	str	r2, [sp, #84]	; 0x54
 80058ba:	4621      	mov	r1, r4
 80058bc:	f364 0100 	bfi	r1, r4, #0, #1
 80058c0:	f364 0141 	bfi	r1, r4, #1, #1
 80058c4:	f364 0182 	bfi	r1, r4, #2, #1
 80058c8:	f364 01c5 	bfi	r1, r4, #3, #3
 80058cc:	f363 1188 	bfi	r1, r3, #6, #3
 80058d0:	2308      	movs	r3, #8
 80058d2:	f363 2152 	bfi	r1, r3, #9, #10
 80058d6:	f364 41de 	bfi	r1, r4, #19, #12
 80058da:	f364 71df 	bfi	r1, r4, #31, #1
 80058de:	4623      	mov	r3, r4
 80058e0:	aa15      	add	r2, sp, #84	; 0x54
 80058e2:	4819      	ldr	r0, [pc, #100]	; (8005948 <z_arm_fault+0xf0>)
 80058e4:	f00a f8aa 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 80058e8:	4626      	mov	r6, r4
		return NULL;
 80058ea:	e7ce      	b.n	800588a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80058ec:	4604      	mov	r4, r0
			*nested_exc = true;
 80058ee:	2601      	movs	r6, #1
 80058f0:	e7cb      	b.n	800588a <z_arm_fault+0x32>
	*nested_exc = false;
 80058f2:	2600      	movs	r6, #0
		return NULL;
 80058f4:	4634      	mov	r4, r6
 80058f6:	e7c8      	b.n	800588a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80058f8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	6861      	ldr	r1, [r4, #4]
 8005900:	68a2      	ldr	r2, [r4, #8]
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005908:	6920      	ldr	r0, [r4, #16]
 800590a:	6961      	ldr	r1, [r4, #20]
 800590c:	69a2      	ldr	r2, [r4, #24]
 800590e:	69e3      	ldr	r3, [r4, #28]
 8005910:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8005914:	b146      	cbz	r6, 8005928 <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800591a:	b95a      	cbnz	r2, 8005934 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800591c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8005920:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8005924:	9310      	str	r3, [sp, #64]	; 0x40
 8005926:	e005      	b.n	8005934 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800592a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 8005934:	a909      	add	r1, sp, #36	; 0x24
 8005936:	4628      	mov	r0, r5
 8005938:	f00a f8ed 	bl	800fb16 <z_arm_fatal_error>
 800593c:	e7af      	b.n	800589e <z_arm_fault+0x46>
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00
 8005944:	08012f14 	.word	0x08012f14
 8005948:	08012730 	.word	0x08012730

0800594c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800594c:	4a02      	ldr	r2, [pc, #8]	; (8005958 <z_arm_fault_init+0xc>)
 800594e:	6953      	ldr	r3, [r2, #20]
 8005950:	f043 0310 	orr.w	r3, r3, #16
 8005954:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8005956:	4770      	bx	lr
 8005958:	e000ed00 	.word	0xe000ed00

0800595c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 800595c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8005960:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8005964:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8005966:	4672      	mov	r2, lr
	bl z_arm_fault
 8005968:	f7ff ff76 	bl	8005858 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 800596c:	bd01      	pop	{r0, pc}
 800596e:	bf00      	nop

08005970 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8005970:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8005972:	e006      	b.n	8005982 <z_arm_interrupt_init+0x12>
 8005974:	f002 010f 	and.w	r1, r2, #15
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <z_arm_interrupt_init+0x30>)
 800597a:	440b      	add	r3, r1
 800597c:	2110      	movs	r1, #16
 800597e:	7619      	strb	r1, [r3, #24]
 8005980:	3201      	adds	r2, #1
 8005982:	2a54      	cmp	r2, #84	; 0x54
 8005984:	dc0a      	bgt.n	800599c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8005986:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8005988:	2b00      	cmp	r3, #0
 800598a:	dbf3      	blt.n	8005974 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800598c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005990:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005994:	2110      	movs	r1, #16
 8005996:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800599a:	e7f1      	b.n	8005980 <z_arm_interrupt_init+0x10>
	}
}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	e000ecfc 	.word	0xe000ecfc

080059a4 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80059a4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80059a6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80059aa:	4808      	ldr	r0, [pc, #32]	; (80059cc <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80059ac:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80059b0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80059b2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80059b6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80059ba:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80059bc:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80059be:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80059c2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80059c6:	f7ff f907 	bl	8004bd8 <z_arm_prep_c>
 80059ca:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 80059cc:	20003840 	.word	0x20003840

080059d0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 80059d0:	b508      	push	{r3, lr}
	if (_current == thread) {
 80059d2:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <z_impl_k_thread_abort+0x24>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	4283      	cmp	r3, r0
 80059d8:	d002      	beq.n	80059e0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 80059da:	f007 facf 	bl	800cf7c <z_thread_abort>
}
 80059de:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f8      	beq.n	80059da <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80059e8:	4a03      	ldr	r2, [pc, #12]	; (80059f8 <z_impl_k_thread_abort+0x28>)
 80059ea:	6853      	ldr	r3, [r2, #4]
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6053      	str	r3, [r2, #4]
 80059f2:	e7f2      	b.n	80059da <z_impl_k_thread_abort+0xa>
 80059f4:	200016d8 	.word	0x200016d8
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80059fc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80059fe:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <z_arm_configure_static_mpu_regions+0x10>)
 8005a00:	4a03      	ldr	r2, [pc, #12]	; (8005a10 <z_arm_configure_static_mpu_regions+0x14>)
 8005a02:	2101      	movs	r1, #1
 8005a04:	4803      	ldr	r0, [pc, #12]	; (8005a14 <z_arm_configure_static_mpu_regions+0x18>)
 8005a06:	f00a f908 	bl	800fc1a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8005a0a:	bd08      	pop	{r3, pc}
 8005a0c:	20028000 	.word	0x20028000
 8005a10:	20000000 	.word	0x20000000
 8005a14:	08012f44 	.word	0x08012f44

08005a18 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8005a18:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8005a1a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005a1c:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8005a1e:	4805      	ldr	r0, [pc, #20]	; (8005a34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8005a20:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8005a22:	2320      	movs	r3, #32
 8005a24:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8005a28:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	f00a f8f9 	bl	800fc22 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8005a30:	bd08      	pop	{r3, pc}
 8005a32:	bf00      	nop
 8005a34:	20001098 	.word	0x20001098
 8005a38:	150b0000 	.word	0x150b0000

08005a3c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <region_init+0x24>)
 8005a3e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005a42:	680b      	ldr	r3, [r1, #0]
 8005a44:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8005a48:	4303      	orrs	r3, r0
 8005a4a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005a4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005a52:	688b      	ldr	r3, [r1, #8]
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000ed00 	.word	0xe000ed00

08005a64 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8005a64:	b510      	push	{r4, lr}
 8005a66:	b090      	sub	sp, #64	; 0x40
 8005a68:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8005a6a:	2807      	cmp	r0, #7
 8005a6c:	d804      	bhi.n	8005a78 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8005a6e:	f7ff ffe5 	bl	8005a3c <region_init>

	return index;
 8005a72:	4620      	mov	r0, r4
}
 8005a74:	b010      	add	sp, #64	; 0x40
 8005a76:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <region_allocate_and_init+0x60>)
 8005a80:	930e      	str	r3, [sp, #56]	; 0x38
 8005a82:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a84:	2300      	movs	r3, #0
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	2103      	movs	r1, #3
 8005a8a:	f88d 1004 	strb.w	r1, [sp, #4]
 8005a8e:	9901      	ldr	r1, [sp, #4]
 8005a90:	910d      	str	r1, [sp, #52]	; 0x34
 8005a92:	4619      	mov	r1, r3
 8005a94:	f363 0100 	bfi	r1, r3, #0, #1
 8005a98:	f363 0141 	bfi	r1, r3, #1, #1
 8005a9c:	f363 0182 	bfi	r1, r3, #2, #1
 8005aa0:	f363 01c5 	bfi	r1, r3, #3, #3
 8005aa4:	f362 1188 	bfi	r1, r2, #6, #3
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	f362 2152 	bfi	r1, r2, #9, #10
 8005aae:	f363 41de 	bfi	r1, r3, #19, #12
 8005ab2:	f363 71df 	bfi	r1, r3, #31, #1
 8005ab6:	aa0d      	add	r2, sp, #52	; 0x34
 8005ab8:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <region_allocate_and_init+0x64>)
 8005aba:	f009 ffbf 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005abe:	f06f 0015 	mvn.w	r0, #21
 8005ac2:	e7d7      	b.n	8005a74 <region_allocate_and_init+0x10>
 8005ac4:	08012f50 	.word	0x08012f50
 8005ac8:	08012728 	.word	0x08012728

08005acc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ad0:	b091      	sub	sp, #68	; 0x44
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	460f      	mov	r7, r1
 8005ad6:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8005ad8:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8005ada:	2500      	movs	r5, #0
 8005adc:	e009      	b.n	8005af2 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005ade:	4621      	mov	r1, r4
 8005ae0:	b2f0      	uxtb	r0, r6
 8005ae2:	f00a f87b 	bl	800fbdc <mpu_configure_region>
 8005ae6:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8005ae8:	f110 0f16 	cmn.w	r0, #22
 8005aec:	d037      	beq.n	8005b5e <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8005aee:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8005af0:	3501      	adds	r5, #1
 8005af2:	42bd      	cmp	r5, r7
 8005af4:	da33      	bge.n	8005b5e <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 8005af6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8005afa:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	d0f5      	beq.n	8005af0 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	d0e9      	beq.n	8005ade <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f00a f855 	bl	800fbba <mpu_partition_is_valid>
		if (do_sanity_check &&
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d1e4      	bne.n	8005ade <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8005b14:	2201      	movs	r2, #1
 8005b16:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005b1a:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <mpu_configure_regions+0x9c>)
 8005b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b1e:	950f      	str	r5, [sp, #60]	; 0x3c
 8005b20:	2300      	movs	r3, #0
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	2103      	movs	r1, #3
 8005b26:	f88d 1004 	strb.w	r1, [sp, #4]
 8005b2a:	9901      	ldr	r1, [sp, #4]
 8005b2c:	910d      	str	r1, [sp, #52]	; 0x34
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f363 0100 	bfi	r1, r3, #0, #1
 8005b34:	f363 0141 	bfi	r1, r3, #1, #1
 8005b38:	f363 0182 	bfi	r1, r3, #2, #1
 8005b3c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005b40:	f362 1188 	bfi	r1, r2, #6, #3
 8005b44:	220c      	movs	r2, #12
 8005b46:	f362 2152 	bfi	r1, r2, #9, #10
 8005b4a:	f363 41de 	bfi	r1, r3, #19, #12
 8005b4e:	f363 71df 	bfi	r1, r3, #31, #1
 8005b52:	aa0d      	add	r2, sp, #52	; 0x34
 8005b54:	4805      	ldr	r0, [pc, #20]	; (8005b6c <mpu_configure_regions+0xa0>)
 8005b56:	f009 ff71 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 8005b5a:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8005b5e:	4630      	mov	r0, r6
 8005b60:	b011      	add	sp, #68	; 0x44
 8005b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b66:	bf00      	nop
 8005b68:	08012f78 	.word	0x08012f78
 8005b6c:	08012728 	.word	0x08012728

08005b70 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8005b70:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8005b72:	4c03      	ldr	r4, [pc, #12]	; (8005b80 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005b74:	2301      	movs	r3, #1
 8005b76:	7822      	ldrb	r2, [r4, #0]
 8005b78:	f7ff ffa8 	bl	8005acc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005b7c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	20001737 	.word	0x20001737

08005b84 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005b84:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8005b86:	2300      	movs	r3, #0
 8005b88:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <mpu_configure_dynamic_mpu_regions+0x2c>)
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	f7ff ff9e 	bl	8005acc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005b90:	f110 0f16 	cmn.w	r0, #22
 8005b94:	d00a      	beq.n	8005bac <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8005b96:	4603      	mov	r3, r0
 8005b98:	e006      	b.n	8005ba8 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8005b9a:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <mpu_configure_dynamic_mpu_regions+0x30>)
 8005b9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	2b07      	cmp	r3, #7
 8005baa:	ddf6      	ble.n	8005b9a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8005bac:	bd08      	pop	{r3, pc}
 8005bae:	bf00      	nop
 8005bb0:	20001737 	.word	0x20001737
 8005bb4:	e000ed00 	.word	0xe000ed00

08005bb8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <arm_core_mpu_enable+0x14>)
 8005bba:	2205      	movs	r2, #5
 8005bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005bc4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	e000ed00 	.word	0xe000ed00

08005bd0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005bd0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005bd4:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <arm_core_mpu_disable+0x10>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000ed00 	.word	0xe000ed00

08005be4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8005be4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <z_arm_mpu_init+0x3c>)
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	2d08      	cmp	r5, #8
 8005bec:	d815      	bhi.n	8005c1a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8005bee:	f7ff ffef 	bl	8005bd0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005bf2:	2400      	movs	r4, #0
 8005bf4:	e009      	b.n	8005c0a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <z_arm_mpu_init+0x3c>)
 8005bf8:	6859      	ldr	r1, [r3, #4]
 8005bfa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005bfe:	0093      	lsls	r3, r2, #2
 8005c00:	4419      	add	r1, r3
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff ff1a 	bl	8005a3c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005c08:	3401      	adds	r4, #1
 8005c0a:	42a5      	cmp	r5, r4
 8005c0c:	d8f3      	bhi.n	8005bf6 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <z_arm_mpu_init+0x40>)
 8005c10:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8005c12:	f7ff ffd1 	bl	8005bb8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8005c16:	2000      	movs	r0, #0
}
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8005c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c1e:	e7fb      	b.n	8005c18 <z_arm_mpu_init+0x34>
 8005c20:	08012fb4 	.word	0x08012fb4
 8005c24:	20001737 	.word	0x20001737

08005c28 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8005c28:	4b01      	ldr	r3, [pc, #4]	; (8005c30 <__stdout_hook_install+0x8>)
 8005c2a:	6018      	str	r0, [r3, #0]
}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200000b8 	.word	0x200000b8

08005c34 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4606      	mov	r6, r0
 8005c38:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	e000      	b.n	8005c40 <z_impl_zephyr_read_stdin+0xc>
 8005c3e:	3401      	adds	r4, #1
 8005c40:	42ac      	cmp	r4, r5
 8005c42:	da08      	bge.n	8005c56 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <z_impl_zephyr_read_stdin+0x28>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4798      	blx	r3
 8005c4a:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8005c4c:	280a      	cmp	r0, #10
 8005c4e:	d001      	beq.n	8005c54 <z_impl_zephyr_read_stdin+0x20>
 8005c50:	280d      	cmp	r0, #13
 8005c52:	d1f4      	bne.n	8005c3e <z_impl_zephyr_read_stdin+0xa>
			i++;
 8005c54:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8005c56:	4620      	mov	r0, r4
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200000b4 	.word	0x200000b4

08005c60 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	4605      	mov	r5, r0
 8005c64:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8005c66:	2400      	movs	r4, #0
 8005c68:	e004      	b.n	8005c74 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <z_impl_zephyr_write_stdout+0x30>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	7830      	ldrb	r0, [r6, #0]
 8005c70:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005c72:	3401      	adds	r4, #1
 8005c74:	42bc      	cmp	r4, r7
 8005c76:	da08      	bge.n	8005c8a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8005c78:	192e      	adds	r6, r5, r4
 8005c7a:	5d2b      	ldrb	r3, [r5, r4]
 8005c7c:	2b0a      	cmp	r3, #10
 8005c7e:	d1f4      	bne.n	8005c6a <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <z_impl_zephyr_write_stdout+0x30>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	200d      	movs	r0, #13
 8005c86:	4798      	blx	r3
 8005c88:	e7ef      	b.n	8005c6a <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200000b8 	.word	0x200000b8

08005c94 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8005c94:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8005c96:	2205      	movs	r2, #5
 8005c98:	4902      	ldr	r1, [pc, #8]	; (8005ca4 <_exit+0x10>)
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f009 ffd2 	bl	800fc44 <_write>
	while (1) {
 8005ca0:	e7fe      	b.n	8005ca0 <_exit+0xc>
 8005ca2:	bf00      	nop
 8005ca4:	08012f9c 	.word	0x08012f9c

08005ca8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8005ca8:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <_sbrk+0x24>)
 8005cac:	6819      	ldr	r1, [r3, #0]
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <_sbrk+0x28>)
 8005cb0:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8005cb8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d202      	bcs.n	8005cc6 <_sbrk+0x1e>
		heap_sz += count;
 8005cc0:	4b02      	ldr	r3, [pc, #8]	; (8005ccc <_sbrk+0x24>)
 8005cc2:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8005cc4:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8005cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8005cca:	4770      	bx	lr
 8005ccc:	200010a4 	.word	0x200010a4
 8005cd0:	20004548 	.word	0x20004548

08005cd4 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8005cda:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8005cdc:	e002      	b.n	8005ce4 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005cde:	2201      	movs	r2, #1
 8005ce0:	e00c      	b.n	8005cfc <__stm32_exti_isr+0x28>
 8005ce2:	3401      	adds	r4, #1
 8005ce4:	42ac      	cmp	r4, r5
 8005ce6:	da17      	bge.n	8005d18 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8005ce8:	2c1f      	cmp	r4, #31
 8005cea:	dcfa      	bgt.n	8005ce2 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005cec:	2301      	movs	r3, #1
 8005cee:	40a3      	lsls	r3, r4
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <__stm32_exti_isr+0x48>)
 8005cf2:	6952      	ldr	r2, [r2, #20]
 8005cf4:	ea33 0202 	bics.w	r2, r3, r2
 8005cf8:	d0f1      	beq.n	8005cde <__stm32_exti_isr+0xa>
 8005cfa:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8005cfc:	2a00      	cmp	r2, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005d00:	4a06      	ldr	r2, [pc, #24]	; (8005d1c <__stm32_exti_isr+0x48>)
 8005d02:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8005d04:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ea      	beq.n	8005ce2 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005d0c:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8005d10:	6851      	ldr	r1, [r2, #4]
 8005d12:	4620      	mov	r0, r4
 8005d14:	4798      	blx	r3
 8005d16:	e7e4      	b.n	8005ce2 <__stm32_exti_isr+0xe>
		}
	}
}
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40010400 	.word	0x40010400

08005d20 <stm32_exti_enable>:
{
 8005d20:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8005d22:	2301      	movs	r3, #1
 8005d24:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005d26:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <stm32_exti_enable+0x18>)
 8005d28:	6811      	ldr	r1, [r2, #0]
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <stm32_exti_enable+0x1c>)
 8005d30:	5618      	ldrsb	r0, [r3, r0]
 8005d32:	f7fe ff07 	bl	8004b44 <arch_irq_enable>
}
 8005d36:	bd08      	pop	{r3, pc}
 8005d38:	40010400 	.word	0x40010400
 8005d3c:	08012ff4 	.word	0x08012ff4

08005d40 <stm32_exti_disable>:
	if (line < 32) {
 8005d40:	281f      	cmp	r0, #31
 8005d42:	dc06      	bgt.n	8005d52 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8005d44:	2301      	movs	r3, #1
 8005d46:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005d48:	4a02      	ldr	r2, [pc, #8]	; (8005d54 <stm32_exti_disable+0x14>)
 8005d4a:	6810      	ldr	r0, [r2, #0]
 8005d4c:	ea20 0003 	bic.w	r0, r0, r3
 8005d50:	6010      	str	r0, [r2, #0]
}
 8005d52:	4770      	bx	lr
 8005d54:	40010400 	.word	0x40010400

08005d58 <stm32_exti_trigger>:
	switch (trigger) {
 8005d58:	2903      	cmp	r1, #3
 8005d5a:	d832      	bhi.n	8005dc2 <stm32_exti_trigger+0x6a>
 8005d5c:	e8df f001 	tbb	[pc, r1]
 8005d60:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8005d64:	2301      	movs	r3, #1
 8005d66:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <stm32_exti_trigger+0x6c>)
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	ea22 0200 	bic.w	r2, r2, r0
 8005d72:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	ea22 0000 	bic.w	r0, r2, r0
 8005d7a:	60d8      	str	r0, [r3, #12]
}
 8005d7c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005d7e:	2301      	movs	r3, #1
 8005d80:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <stm32_exti_trigger+0x6c>)
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	4302      	orrs	r2, r0
 8005d8a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	ea22 0000 	bic.w	r0, r2, r0
 8005d92:	60d8      	str	r0, [r3, #12]
}
 8005d94:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8005d96:	2301      	movs	r3, #1
 8005d98:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <stm32_exti_trigger+0x6c>)
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	4302      	orrs	r2, r0
 8005da2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	ea22 0000 	bic.w	r0, r2, r0
 8005daa:	6098      	str	r0, [r3, #8]
}
 8005dac:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8005dae:	2301      	movs	r3, #1
 8005db0:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <stm32_exti_trigger+0x6c>)
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	4302      	orrs	r2, r0
 8005dba:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	4310      	orrs	r0, r2
 8005dc0:	60d8      	str	r0, [r3, #12]
}
 8005dc2:	4770      	bx	lr
 8005dc4:	40010400 	.word	0x40010400

08005dc8 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <stm32_exti_set_callback+0x20>)
 8005dca:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8005dce:	b93b      	cbnz	r3, 8005de0 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <stm32_exti_set_callback+0x20>)
 8005dd2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8005dd6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005dda:	6042      	str	r2, [r0, #4]

	return 0;
 8005ddc:	2000      	movs	r0, #0
 8005dde:	4770      	bx	lr
		return -EBUSY;
 8005de0:	f06f 000f 	mvn.w	r0, #15
}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	200010a8 	.word	0x200010a8

08005dec <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <stm32_exti_unset_callback+0x10>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8005df4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005df8:	605a      	str	r2, [r3, #4]
}
 8005dfa:	4770      	bx	lr
 8005dfc:	200010a8 	.word	0x200010a8

08005e00 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8005e00:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005e02:	680b      	ldr	r3, [r1, #0]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d848      	bhi.n	8005e9a <stm32_clock_control_on+0x9a>
 8005e08:	e8df f003 	tbb	[pc, r3]
 8005e0c:	3c261004 	.word	0x3c261004
 8005e10:	4731      	.short	0x4731
 8005e12:	1b          	.byte	0x1b
 8005e13:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8005e14:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005e16:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e18:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005e1a:	4319      	orrs	r1, r3
 8005e1c:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005e1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e20:	4013      	ands	r3, r2
 8005e22:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8005e24:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005e26:	2000      	movs	r0, #0
}
 8005e28:	b006      	add	sp, #24
 8005e2a:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8005e2c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e30:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8005e32:	4319      	orrs	r1, r3
 8005e34:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005e36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e38:	4013      	ands	r3, r2
 8005e3a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005e3c:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8005e3e:	2000      	movs	r0, #0
}
 8005e40:	e7f2      	b.n	8005e28 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8005e42:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e46:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005e48:	4319      	orrs	r1, r3
 8005e4a:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005e4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e4e:	4013      	ands	r3, r2
 8005e50:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8005e52:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8005e54:	2000      	movs	r0, #0
}
 8005e56:	e7e7      	b.n	8005e28 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8005e58:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005e5a:	4a11      	ldr	r2, [pc, #68]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e5c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8005e5e:	4319      	orrs	r1, r3
 8005e60:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005e62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e64:	4013      	ands	r3, r2
 8005e66:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8005e68:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8005e6a:	2000      	movs	r0, #0
}
 8005e6c:	e7dc      	b.n	8005e28 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8005e6e:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005e70:	4a0b      	ldr	r2, [pc, #44]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e72:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8005e74:	4319      	orrs	r1, r3
 8005e76:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005e78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8005e7e:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8005e80:	2000      	movs	r0, #0
}
 8005e82:	e7d1      	b.n	8005e28 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8005e84:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005e86:	4a06      	ldr	r2, [pc, #24]	; (8005ea0 <stm32_clock_control_on+0xa0>)
 8005e88:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8005e8a:	4319      	orrs	r1, r3
 8005e8c:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005e8e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005e90:	4013      	ands	r3, r2
 8005e92:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8005e94:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8005e96:	2000      	movs	r0, #0
}
 8005e98:	e7c6      	b.n	8005e28 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8005e9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005e9e:	e7c3      	b.n	8005e28 <stm32_clock_control_on+0x28>
 8005ea0:	40021000 	.word	0x40021000

08005ea4 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8005ea4:	680b      	ldr	r3, [r1, #0]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d835      	bhi.n	8005f16 <stm32_clock_control_off+0x72>
 8005eaa:	e8df f003 	tbb	[pc, r3]
 8005eae:	0c04      	.short	0x0c04
 8005eb0:	34242c1c 	.word	0x34242c1c
 8005eb4:	14          	.byte	0x14
 8005eb5:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8005eb6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005eba:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005ebc:	ea23 0301 	bic.w	r3, r3, r1
 8005ec0:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005ec2:	2000      	movs	r0, #0
}
 8005ec4:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 8005ec6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8005ec8:	4a14      	ldr	r2, [pc, #80]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005eca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ecc:	ea23 0301 	bic.w	r3, r3, r1
 8005ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 8005ed2:	2000      	movs	r0, #0
}
 8005ed4:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 8005ed6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8005ed8:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005eda:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005edc:	ea23 0301 	bic.w	r3, r3, r1
 8005ee0:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 8005ee2:	2000      	movs	r0, #0
}
 8005ee4:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8005ee6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005eea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005eec:	ea23 0301 	bic.w	r3, r3, r1
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8005ef2:	2000      	movs	r0, #0
}
 8005ef4:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 8005ef6:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8005ef8:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005efa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005efc:	ea23 0301 	bic.w	r3, r3, r1
 8005f00:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8005f02:	2000      	movs	r0, #0
}
 8005f04:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8005f06:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <stm32_clock_control_off+0x78>)
 8005f0a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8005f0c:	ea23 0301 	bic.w	r3, r3, r1
 8005f10:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8005f12:	2000      	movs	r0, #0
}
 8005f14:	4770      	bx	lr
	switch (pclken->bus) {
 8005f16:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8005f1a:	4770      	bx	lr
 8005f1c:	40021000 	.word	0x40021000

08005f20 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	460c      	mov	r4, r1
 8005f24:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8005f26:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <stm32_clock_control_get_subsys_rate+0x3c>)
 8005f28:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f009 ff17 	bl	800fd60 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d80e      	bhi.n	8005f56 <stm32_clock_control_get_subsys_rate+0x36>
 8005f38:	e8df f003 	tbb	[pc, r3]
 8005f3c:	0a070404 	.word	0x0a070404
 8005f40:	0d07      	.short	0x0d07
 8005f42:	04          	.byte	0x04
 8005f43:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8005f44:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8005f46:	2000      	movs	r0, #0
}
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8005f4a:	6028      	str	r0, [r5, #0]
	return 0;
 8005f4c:	2000      	movs	r0, #0
		break;
 8005f4e:	e7fb      	b.n	8005f48 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8005f50:	6028      	str	r0, [r5, #0]
	return 0;
 8005f52:	2000      	movs	r0, #0
		break;
 8005f54:	e7f8      	b.n	8005f48 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8005f56:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005f5a:	e7f5      	b.n	8005f48 <stm32_clock_control_get_subsys_rate+0x28>
 8005f5c:	20000278 	.word	0x20000278

08005f60 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005f60:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <stm32_clock_switch_to_hsi+0x44>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f68:	d109      	bne.n	8005f7e <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f6a:	4a0e      	ldr	r2, [pc, #56]	; (8005fa4 <stm32_clock_switch_to_hsi+0x44>)
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <stm32_clock_switch_to_hsi+0x44>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f7c:	d0fa      	beq.n	8005f74 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <stm32_clock_switch_to_hsi+0x44>)
 8005f80:	6893      	ldr	r3, [r2, #8]
 8005f82:	f023 0303 	bic.w	r3, r3, #3
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f8c:	6893      	ldr	r3, [r2, #8]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f92:	4318      	orrs	r0, r3
 8005f94:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <stm32_clock_switch_to_hsi+0x44>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d1f9      	bne.n	8005f96 <stm32_clock_switch_to_hsi+0x36>
	}
}
 8005fa2:	4770      	bx	lr
 8005fa4:	40021000 	.word	0x40021000

08005fa8 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8005fac:	a803      	add	r0, sp, #12
 8005fae:	f009 fed2 	bl	800fd56 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005fb2:	f000 f823 	bl	8005ffc <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8005fb6:	4668      	mov	r0, sp
 8005fb8:	f009 fed5 	bl	800fd66 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f7ff ffcf 	bl	8005f60 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005fc2:	4c0d      	ldr	r4, [pc, #52]	; (8005ff8 <stm32_clock_control_init+0x50>)
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fca:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005fcc:	68e3      	ldr	r3, [r4, #12]
 8005fce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fd6:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8005fd8:	a903      	add	r1, sp, #12
 8005fda:	4668      	mov	r0, sp
 8005fdc:	f005 fbba 	bl	800b754 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	b006      	add	sp, #24
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000

08005ffc <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005ffc:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <config_enable_default_clocks+0x1c>)
 8006000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006006:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006010:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8006012:	b002      	add	sp, #8
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40021000 	.word	0x40021000

0800601c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 800601c:	b510      	push	{r4, lr}
 800601e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8006020:	280a      	cmp	r0, #10
 8006022:	d007      	beq.n	8006034 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <console_out+0x28>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 800602a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4798      	blx	r3

	return c;
}
 8006030:	4620      	mov	r0, r4
 8006032:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8006034:	4b03      	ldr	r3, [pc, #12]	; (8006044 <console_out+0x28>)
 8006036:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8006038:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	210d      	movs	r1, #13
 800603e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8006040:	e7f0      	b.n	8006024 <console_out+0x8>
 8006042:	bf00      	nop
 8006044:	20001128 	.word	0x20001128

08006048 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 8006048:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 800604a:	4c04      	ldr	r4, [pc, #16]	; (800605c <uart_console_hook_install+0x14>)
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff fdeb 	bl	8005c28 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 8006052:	4620      	mov	r0, r4
 8006054:	f7fd faa4 	bl	80035a0 <__printk_hook_install>
#endif
}
 8006058:	bd10      	pop	{r4, pc}
 800605a:	bf00      	nop
 800605c:	0800601d 	.word	0x0800601d

08006060 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8006060:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8006062:	4806      	ldr	r0, [pc, #24]	; (800607c <uart_console_init+0x1c>)
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <uart_console_init+0x20>)
 8006066:	6018      	str	r0, [r3, #0]
 8006068:	f00b f924 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 800606c:	b118      	cbz	r0, 8006076 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 800606e:	f7ff ffeb 	bl	8006048 <uart_console_hook_install>

	return 0;
 8006072:	2000      	movs	r0, #0
}
 8006074:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8006076:	f06f 0012 	mvn.w	r0, #18
 800607a:	e7fb      	b.n	8006074 <uart_console_init+0x14>
 800607c:	080123d8 	.word	0x080123d8
 8006080:	20001128 	.word	0x20001128

08006084 <dma_stm32_get_priority>:

#endif /* CONFIG_DMA_STM32_SHARED_IRQS */

static int dma_stm32_get_priority(uint8_t priority, uint32_t *ll_priority)
{
	switch (priority) {
 8006084:	2803      	cmp	r0, #3
 8006086:	d815      	bhi.n	80060b4 <dma_stm32_get_priority+0x30>
 8006088:	e8df f000 	tbb	[pc, r0]
 800608c:	0f0a0502 	.word	0x0f0a0502
	case 0x0:
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8006090:	2000      	movs	r0, #0
 8006092:	6008      	str	r0, [r1, #0]
		break;
 8006094:	4770      	bx	lr
	case 0x1:
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 8006096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609a:	600b      	str	r3, [r1, #0]
	default:
		LOG_ERR("Priority error. %d", priority);
		return -EINVAL;
	}

	return 0;
 800609c:	2000      	movs	r0, #0
		break;
 800609e:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 80060a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060a4:	600b      	str	r3, [r1, #0]
	return 0;
 80060a6:	2000      	movs	r0, #0
		break;
 80060a8:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 80060aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80060ae:	600b      	str	r3, [r1, #0]
	return 0;
 80060b0:	2000      	movs	r0, #0
}
 80060b2:	4770      	bx	lr
{
 80060b4:	b500      	push	{lr}
 80060b6:	b091      	sub	sp, #68	; 0x44
		LOG_ERR("Priority error. %d", priority);
 80060b8:	2201      	movs	r2, #1
 80060ba:	f8ad 2008 	strh.w	r2, [sp, #8]
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <dma_stm32_get_priority+0x84>)
 80060c0:	930e      	str	r3, [sp, #56]	; 0x38
 80060c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80060c4:	2300      	movs	r3, #0
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	2103      	movs	r1, #3
 80060ca:	f88d 1004 	strb.w	r1, [sp, #4]
 80060ce:	9901      	ldr	r1, [sp, #4]
 80060d0:	910d      	str	r1, [sp, #52]	; 0x34
 80060d2:	4619      	mov	r1, r3
 80060d4:	f363 0100 	bfi	r1, r3, #0, #1
 80060d8:	f363 0141 	bfi	r1, r3, #1, #1
 80060dc:	f363 0182 	bfi	r1, r3, #2, #1
 80060e0:	f363 01c5 	bfi	r1, r3, #3, #3
 80060e4:	f362 1188 	bfi	r1, r2, #6, #3
 80060e8:	220c      	movs	r2, #12
 80060ea:	f362 2152 	bfi	r1, r2, #9, #10
 80060ee:	f363 41de 	bfi	r1, r3, #19, #12
 80060f2:	f363 71df 	bfi	r1, r3, #31, #1
 80060f6:	aa0d      	add	r2, sp, #52	; 0x34
 80060f8:	4804      	ldr	r0, [pc, #16]	; (800610c <dma_stm32_get_priority+0x88>)
 80060fa:	f009 fc9f 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80060fe:	f06f 0015 	mvn.w	r0, #21
}
 8006102:	b011      	add	sp, #68	; 0x44
 8006104:	f85d fb04 	ldr.w	pc, [sp], #4
 8006108:	08013014 	.word	0x08013014
 800610c:	08012708 	.word	0x08012708

08006110 <dma_stm32_get_direction>:

static int dma_stm32_get_direction(enum dma_channel_direction direction,
				   uint32_t *ll_direction)
{
	switch (direction) {
 8006110:	2801      	cmp	r0, #1
 8006112:	d030      	beq.n	8006176 <dma_stm32_get_direction+0x66>
 8006114:	2802      	cmp	r0, #2
 8006116:	d032      	beq.n	800617e <dma_stm32_get_direction+0x6e>
 8006118:	b348      	cbz	r0, 800616e <dma_stm32_get_direction+0x5e>
{
 800611a:	b500      	push	{lr}
 800611c:	b091      	sub	sp, #68	; 0x44
		break;
	case PERIPHERAL_TO_MEMORY:
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
		break;
	default:
		LOG_ERR("Direction error. %d", direction);
 800611e:	2201      	movs	r2, #1
 8006120:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <dma_stm32_get_direction+0x74>)
 8006126:	930e      	str	r3, [sp, #56]	; 0x38
 8006128:	900f      	str	r0, [sp, #60]	; 0x3c
 800612a:	2300      	movs	r3, #0
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	2103      	movs	r1, #3
 8006130:	f88d 1004 	strb.w	r1, [sp, #4]
 8006134:	9901      	ldr	r1, [sp, #4]
 8006136:	910d      	str	r1, [sp, #52]	; 0x34
 8006138:	4619      	mov	r1, r3
 800613a:	f363 0100 	bfi	r1, r3, #0, #1
 800613e:	f363 0141 	bfi	r1, r3, #1, #1
 8006142:	f363 0182 	bfi	r1, r3, #2, #1
 8006146:	f363 01c5 	bfi	r1, r3, #3, #3
 800614a:	f362 1188 	bfi	r1, r2, #6, #3
 800614e:	220c      	movs	r2, #12
 8006150:	f362 2152 	bfi	r1, r2, #9, #10
 8006154:	f363 41de 	bfi	r1, r3, #19, #12
 8006158:	f363 71df 	bfi	r1, r3, #31, #1
 800615c:	aa0d      	add	r2, sp, #52	; 0x34
 800615e:	480a      	ldr	r0, [pc, #40]	; (8006188 <dma_stm32_get_direction+0x78>)
 8006160:	f009 fc6c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006164:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8006168:	b011      	add	sp, #68	; 0x44
 800616a:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 800616e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006172:	600b      	str	r3, [r1, #0]
		break;
 8006174:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8006176:	2310      	movs	r3, #16
 8006178:	600b      	str	r3, [r1, #0]
	return 0;
 800617a:	2000      	movs	r0, #0
		break;
 800617c:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800617e:	2000      	movs	r0, #0
 8006180:	6008      	str	r0, [r1, #0]
}
 8006182:	4770      	bx	lr
 8006184:	08013028 	.word	0x08013028
 8006188:	08012708 	.word	0x08012708

0800618c <dma_stm32_get_memory_increment>:

static int dma_stm32_get_memory_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 800618c:	2801      	cmp	r0, #1
 800618e:	d032      	beq.n	80061f6 <dma_stm32_get_memory_increment+0x6a>
 8006190:	2802      	cmp	r0, #2
 8006192:	d02d      	beq.n	80061f0 <dma_stm32_get_memory_increment+0x64>
 8006194:	b348      	cbz	r0, 80061ea <dma_stm32_get_memory_increment+0x5e>
{
 8006196:	b500      	push	{lr}
 8006198:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Memory increment error. %d", increment);
 800619a:	2201      	movs	r2, #1
 800619c:	f8ad 2008 	strh.w	r2, [sp, #8]
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <dma_stm32_get_memory_increment+0x70>)
 80061a2:	930e      	str	r3, [sp, #56]	; 0x38
 80061a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80061a6:	2300      	movs	r3, #0
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	2103      	movs	r1, #3
 80061ac:	f88d 1004 	strb.w	r1, [sp, #4]
 80061b0:	9901      	ldr	r1, [sp, #4]
 80061b2:	910d      	str	r1, [sp, #52]	; 0x34
 80061b4:	4619      	mov	r1, r3
 80061b6:	f363 0100 	bfi	r1, r3, #0, #1
 80061ba:	f363 0141 	bfi	r1, r3, #1, #1
 80061be:	f363 0182 	bfi	r1, r3, #2, #1
 80061c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80061c6:	f362 1188 	bfi	r1, r2, #6, #3
 80061ca:	220c      	movs	r2, #12
 80061cc:	f362 2152 	bfi	r1, r2, #9, #10
 80061d0:	f363 41de 	bfi	r1, r3, #19, #12
 80061d4:	f363 71df 	bfi	r1, r3, #31, #1
 80061d8:	aa0d      	add	r2, sp, #52	; 0x34
 80061da:	4809      	ldr	r0, [pc, #36]	; (8006200 <dma_stm32_get_memory_increment+0x74>)
 80061dc:	f009 fc2e 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80061e0:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 80061e4:	b011      	add	sp, #68	; 0x44
 80061e6:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 80061ea:	2380      	movs	r3, #128	; 0x80
 80061ec:	600b      	str	r3, [r1, #0]
		break;
 80061ee:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 80061f0:	2000      	movs	r0, #0
 80061f2:	6008      	str	r0, [r1, #0]
		break;
 80061f4:	4770      	bx	lr
	switch (increment) {
 80061f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80061fa:	4770      	bx	lr
 80061fc:	0801303c 	.word	0x0801303c
 8006200:	08012708 	.word	0x08012708

08006204 <dma_stm32_get_periph_increment>:

static int dma_stm32_get_periph_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8006204:	2801      	cmp	r0, #1
 8006206:	d032      	beq.n	800626e <dma_stm32_get_periph_increment+0x6a>
 8006208:	2802      	cmp	r0, #2
 800620a:	d02d      	beq.n	8006268 <dma_stm32_get_periph_increment+0x64>
 800620c:	b348      	cbz	r0, 8006262 <dma_stm32_get_periph_increment+0x5e>
{
 800620e:	b500      	push	{lr}
 8006210:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Periph increment error. %d", increment);
 8006212:	2201      	movs	r2, #1
 8006214:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006218:	4b16      	ldr	r3, [pc, #88]	; (8006274 <dma_stm32_get_periph_increment+0x70>)
 800621a:	930e      	str	r3, [sp, #56]	; 0x38
 800621c:	900f      	str	r0, [sp, #60]	; 0x3c
 800621e:	2300      	movs	r3, #0
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2103      	movs	r1, #3
 8006224:	f88d 1004 	strb.w	r1, [sp, #4]
 8006228:	9901      	ldr	r1, [sp, #4]
 800622a:	910d      	str	r1, [sp, #52]	; 0x34
 800622c:	4619      	mov	r1, r3
 800622e:	f363 0100 	bfi	r1, r3, #0, #1
 8006232:	f363 0141 	bfi	r1, r3, #1, #1
 8006236:	f363 0182 	bfi	r1, r3, #2, #1
 800623a:	f363 01c5 	bfi	r1, r3, #3, #3
 800623e:	f362 1188 	bfi	r1, r2, #6, #3
 8006242:	220c      	movs	r2, #12
 8006244:	f362 2152 	bfi	r1, r2, #9, #10
 8006248:	f363 41de 	bfi	r1, r3, #19, #12
 800624c:	f363 71df 	bfi	r1, r3, #31, #1
 8006250:	aa0d      	add	r2, sp, #52	; 0x34
 8006252:	4809      	ldr	r0, [pc, #36]	; (8006278 <dma_stm32_get_periph_increment+0x74>)
 8006254:	f009 fbf2 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006258:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 800625c:	b011      	add	sp, #68	; 0x44
 800625e:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8006262:	2340      	movs	r3, #64	; 0x40
 8006264:	600b      	str	r3, [r1, #0]
		break;
 8006266:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 8006268:	2000      	movs	r0, #0
 800626a:	6008      	str	r0, [r1, #0]
		break;
 800626c:	4770      	bx	lr
	switch (increment) {
 800626e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8006272:	4770      	bx	lr
 8006274:	08013058 	.word	0x08013058
 8006278:	08012708 	.word	0x08012708

0800627c <dma_stm32_irq_handler>:
{
 800627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	b096      	sub	sp, #88	; 0x58
 8006282:	4606      	mov	r6, r0
 8006284:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 8006286:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8006288:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 800628a:	699c      	ldr	r4, [r3, #24]
 800628c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8006290:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8006294:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 8006298:	2300      	movs	r3, #0
 800629a:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 800629c:	4638      	mov	r0, r7
 800629e:	f000 fd61 	bl	8006d64 <stm32_dma_is_ht_irq_active>
 80062a2:	b178      	cbz	r0, 80062c4 <dma_stm32_irq_handler+0x48>
		if (!stream->hal_override) {
 80062a4:	7963      	ldrb	r3, [r4, #5]
 80062a6:	b143      	cbz	r3, 80062ba <dma_stm32_irq_handler+0x3e>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 80062a8:	6965      	ldr	r5, [r4, #20]
 80062aa:	2300      	movs	r3, #0
 80062ac:	4642      	mov	r2, r8
 80062ae:	6921      	ldr	r1, [r4, #16]
 80062b0:	4630      	mov	r0, r6
 80062b2:	47a8      	blx	r5
}
 80062b4:	b016      	add	sp, #88	; 0x58
 80062b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 80062ba:	4629      	mov	r1, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	f000 fc59 	bl	8006b74 <dma_stm32_clear_ht>
 80062c2:	e7f1      	b.n	80062a8 <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 80062c4:	4629      	mov	r1, r5
 80062c6:	4638      	mov	r0, r7
 80062c8:	f000 fd32 	bl	8006d30 <stm32_dma_is_tc_irq_active>
 80062cc:	b168      	cbz	r0, 80062ea <dma_stm32_irq_handler+0x6e>
		if (!stream->hal_override) {
 80062ce:	7963      	ldrb	r3, [r4, #5]
 80062d0:	b133      	cbz	r3, 80062e0 <dma_stm32_irq_handler+0x64>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 80062d2:	6965      	ldr	r5, [r4, #20]
 80062d4:	2300      	movs	r3, #0
 80062d6:	4642      	mov	r2, r8
 80062d8:	6921      	ldr	r1, [r4, #16]
 80062da:	4630      	mov	r0, r6
 80062dc:	47a8      	blx	r5
 80062de:	e7e9      	b.n	80062b4 <dma_stm32_irq_handler+0x38>
			dma_stm32_clear_tc(dma, id);
 80062e0:	4629      	mov	r1, r5
 80062e2:	4638      	mov	r0, r7
 80062e4:	f000 fc4e 	bl	8006b84 <dma_stm32_clear_tc>
 80062e8:	e7f3      	b.n	80062d2 <dma_stm32_irq_handler+0x56>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 80062ea:	4629      	mov	r1, r5
 80062ec:	4638      	mov	r0, r7
 80062ee:	f009 ff38 	bl	8010162 <stm32_dma_is_unexpected_irq_happened>
 80062f2:	b348      	cbz	r0, 8006348 <dma_stm32_irq_handler+0xcc>
		LOG_ERR("Unexpected irq happened.");
 80062f4:	2201      	movs	r2, #1
 80062f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80062fa:	4b2c      	ldr	r3, [pc, #176]	; (80063ac <dma_stm32_irq_handler+0x130>)
 80062fc:	9314      	str	r3, [sp, #80]	; 0x50
 80062fe:	2300      	movs	r3, #0
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	2102      	movs	r1, #2
 8006304:	f88d 1004 	strb.w	r1, [sp, #4]
 8006308:	9901      	ldr	r1, [sp, #4]
 800630a:	9113      	str	r1, [sp, #76]	; 0x4c
 800630c:	4619      	mov	r1, r3
 800630e:	f363 0100 	bfi	r1, r3, #0, #1
 8006312:	f363 0141 	bfi	r1, r3, #1, #1
 8006316:	f363 0182 	bfi	r1, r3, #2, #1
 800631a:	f363 01c5 	bfi	r1, r3, #3, #3
 800631e:	f362 1188 	bfi	r1, r2, #6, #3
 8006322:	2208      	movs	r2, #8
 8006324:	f362 2152 	bfi	r1, r2, #9, #10
 8006328:	f363 41de 	bfi	r1, r3, #19, #12
 800632c:	f363 71df 	bfi	r1, r3, #31, #1
 8006330:	aa13      	add	r2, sp, #76	; 0x4c
 8006332:	481f      	ldr	r0, [pc, #124]	; (80063b0 <dma_stm32_irq_handler+0x134>)
 8006334:	f009 fb82 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		stream->dma_callback(dev, stream->user_data,
 8006338:	6965      	ldr	r5, [r4, #20]
 800633a:	f06f 0304 	mvn.w	r3, #4
 800633e:	4642      	mov	r2, r8
 8006340:	6921      	ldr	r1, [r4, #16]
 8006342:	4630      	mov	r0, r6
 8006344:	47a8      	blx	r5
 8006346:	e7b5      	b.n	80062b4 <dma_stm32_irq_handler+0x38>
		LOG_ERR("Transfer Error.");
 8006348:	2201      	movs	r2, #1
 800634a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800634e:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <dma_stm32_irq_handler+0x138>)
 8006350:	930e      	str	r3, [sp, #56]	; 0x38
 8006352:	2300      	movs	r3, #0
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	2102      	movs	r1, #2
 8006358:	f88d 1004 	strb.w	r1, [sp, #4]
 800635c:	9901      	ldr	r1, [sp, #4]
 800635e:	910d      	str	r1, [sp, #52]	; 0x34
 8006360:	4619      	mov	r1, r3
 8006362:	f363 0100 	bfi	r1, r3, #0, #1
 8006366:	f363 0141 	bfi	r1, r3, #1, #1
 800636a:	f363 0182 	bfi	r1, r3, #2, #1
 800636e:	f363 01c5 	bfi	r1, r3, #3, #3
 8006372:	f362 1188 	bfi	r1, r2, #6, #3
 8006376:	2208      	movs	r2, #8
 8006378:	f362 2152 	bfi	r1, r2, #9, #10
 800637c:	f363 41de 	bfi	r1, r3, #19, #12
 8006380:	f363 71df 	bfi	r1, r3, #31, #1
 8006384:	aa0d      	add	r2, sp, #52	; 0x34
 8006386:	480a      	ldr	r0, [pc, #40]	; (80063b0 <dma_stm32_irq_handler+0x134>)
 8006388:	f009 fb58 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		dma_stm32_dump_stream_irq(dev, id);
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f009 fd65 	bl	800fe5e <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 8006394:	4629      	mov	r1, r5
 8006396:	4630      	mov	r0, r6
 8006398:	f009 fd67 	bl	800fe6a <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 800639c:	6965      	ldr	r5, [r4, #20]
 800639e:	f06f 0304 	mvn.w	r3, #4
 80063a2:	4642      	mov	r2, r8
 80063a4:	6921      	ldr	r1, [r4, #16]
 80063a6:	4630      	mov	r0, r6
 80063a8:	47a8      	blx	r5
}
 80063aa:	e783      	b.n	80062b4 <dma_stm32_irq_handler+0x38>
 80063ac:	08013074 	.word	0x08013074
 80063b0:	08012708 	.word	0x08012708
 80063b4:	08013090 	.word	0x08013090

080063b8 <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 80063b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063bc:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 80063be:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80063c0:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 80063c2:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	4282      	cmp	r2, r0
 80063c8:	d916      	bls.n	80063f8 <dma_stm32_get_status+0x40>
		return -EINVAL;
	}

	stream = &config->streams[id];
 80063ca:	699f      	ldr	r7, [r3, #24]
 80063cc:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80063d0:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80063d4:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 80063d8:	f000 fbc6 	bl	8006b68 <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <dma_stm32_get_status+0x48>)
 80063de:	5c1b      	ldrb	r3, [r3, r0]
 80063e0:	441e      	add	r6, r3
 80063e2:	6873      	ldr	r3, [r6, #4]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 80063e8:	f817 3008 	ldrb.w	r3, [r7, r8]
 80063ec:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 80063ee:	79ab      	ldrb	r3, [r5, #6]
 80063f0:	7023      	strb	r3, [r4, #0]

	return 0;
 80063f2:	2000      	movs	r0, #0
}
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 80063f8:	f06f 0015 	mvn.w	r0, #21
 80063fc:	e7fa      	b.n	80063f4 <dma_stm32_get_status+0x3c>
 80063fe:	bf00      	nop
 8006400:	08013228 	.word	0x08013228

08006404 <dma_stm32_stop>:
{
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 8006406:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8006408:	6996      	ldr	r6, [r2, #24]
 800640a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	3b18      	subs	r3, #24
 8006412:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8006414:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 8006416:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8006418:	6953      	ldr	r3, [r2, #20]
 800641a:	42a3      	cmp	r3, r4
 800641c:	d914      	bls.n	8006448 <dma_stm32_stop+0x44>
 800641e:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fba1 	bl	8006b68 <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <dma_stm32_stop+0x4c>)
 8006428:	5c1a      	ldrb	r2, [r3, r0]
 800642a:	58bb      	ldr	r3, [r7, r2]
 800642c:	f023 0302 	bic.w	r3, r3, #2
 8006430:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 8006432:	4621      	mov	r1, r4
 8006434:	4638      	mov	r0, r7
 8006436:	f009 fd6e 	bl	800ff16 <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f009 fd14 	bl	800fe6a <dma_stm32_clear_stream_irq>
	stream->busy = false;
 8006442:	2000      	movs	r0, #0
 8006444:	71b0      	strb	r0, [r6, #6]
}
 8006446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 8006448:	f06f 0015 	mvn.w	r0, #21
 800644c:	e7fb      	b.n	8006446 <dma_stm32_stop+0x42>
 800644e:	bf00      	nop
 8006450:	08013228 	.word	0x08013228

08006454 <dma_stm32_reload>:
{
 8006454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 800645a:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800645c:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 800645e:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8006460:	6943      	ldr	r3, [r0, #20]
 8006462:	42a3      	cmp	r3, r4
 8006464:	d964      	bls.n	8006530 <dma_stm32_reload+0xdc>
 8006466:	4690      	mov	r8, r2
	stream = &config->streams[id];
 8006468:	f8d0 a018 	ldr.w	sl, [r0, #24]
 800646c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006470:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8006474:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 8006478:	4621      	mov	r1, r4
 800647a:	4630      	mov	r0, r6
 800647c:	f009 fd4b 	bl	800ff16 <dma_stm32_disable_stream>
 8006480:	4681      	mov	r9, r0
 8006482:	2800      	cmp	r0, #0
 8006484:	d157      	bne.n	8006536 <dma_stm32_reload+0xe2>
	switch (stream->direction) {
 8006486:	f85a 100b 	ldr.w	r1, [sl, fp]
 800648a:	2901      	cmp	r1, #1
 800648c:	d007      	beq.n	800649e <dma_stm32_reload+0x4a>
 800648e:	2902      	cmp	r1, #2
 8006490:	d02c      	beq.n	80064ec <dma_stm32_reload+0x98>
 8006492:	b359      	cbz	r1, 80064ec <dma_stm32_reload+0x98>
 8006494:	f06f 0915 	mvn.w	r9, #21
}
 8006498:	4648      	mov	r0, r9
 800649a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 fb62 	bl	8006b68 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80064a4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800653c <dma_stm32_reload+0xe8>
 80064a8:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80064ac:	4433      	add	r3, r6
 80064ae:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fb58 	bl	8006b68 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80064b8:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80064bc:	4433      	add	r3, r6
 80064be:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 80064c0:	792b      	ldrb	r3, [r5, #4]
 80064c2:	b32b      	cbz	r3, 8006510 <dma_stm32_reload+0xbc>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fb4f 	bl	8006b68 <dma_stm32_id_to_stream>
				     size / stream->src_size);
 80064ca:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80064cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ce:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <dma_stm32_reload+0xe8>)
 80064d4:	5c11      	ldrb	r1, [r2, r0]
 80064d6:	4431      	add	r1, r6
 80064d8:	684a      	ldr	r2, [r1, #4]
 80064da:	0c12      	lsrs	r2, r2, #16
 80064dc:	0412      	lsls	r2, r2, #16
 80064de:	4313      	orrs	r3, r2
 80064e0:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 80064e2:	4621      	mov	r1, r4
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 fc57 	bl	8006d98 <stm32_dma_enable_stream>
	return 0;
 80064ea:	e7d5      	b.n	8006498 <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fb3b 	bl	8006b68 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80064f2:	f8df a048 	ldr.w	sl, [pc, #72]	; 800653c <dma_stm32_reload+0xe8>
 80064f6:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80064fa:	4433      	add	r3, r6
 80064fc:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fb31 	bl	8006b68 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8006506:	f81a 3000 	ldrb.w	r3, [sl, r0]
 800650a:	4433      	add	r3, r6
 800650c:	60df      	str	r7, [r3, #12]
}
 800650e:	e7d7      	b.n	80064c0 <dma_stm32_reload+0x6c>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fb29 	bl	8006b68 <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 8006516:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8006518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800651e:	4a07      	ldr	r2, [pc, #28]	; (800653c <dma_stm32_reload+0xe8>)
 8006520:	5c11      	ldrb	r1, [r2, r0]
 8006522:	4431      	add	r1, r6
 8006524:	684a      	ldr	r2, [r1, #4]
 8006526:	0c12      	lsrs	r2, r2, #16
 8006528:	0412      	lsls	r2, r2, #16
 800652a:	4313      	orrs	r3, r2
 800652c:	604b      	str	r3, [r1, #4]
}
 800652e:	e7d8      	b.n	80064e2 <dma_stm32_reload+0x8e>
		return -EINVAL;
 8006530:	f06f 0915 	mvn.w	r9, #21
 8006534:	e7b0      	b.n	8006498 <dma_stm32_reload+0x44>
		return -EBUSY;
 8006536:	f06f 090f 	mvn.w	r9, #15
 800653a:	e7ad      	b.n	8006498 <dma_stm32_reload+0x44>
 800653c:	08013228 	.word	0x08013228

08006540 <dma_stm32_configure>:
{
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	b0d1      	sub	sp, #324	; 0x144
 8006546:	4607      	mov	r7, r0
 8006548:	460d      	mov	r5, r1
 800654a:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 800654c:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 8006550:	f8db 9018 	ldr.w	r9, [fp, #24]
 8006554:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8006558:	00f6      	lsls	r6, r6, #3
 800655a:	3e18      	subs	r6, #24
	struct dma_stm32_stream *stream =
 800655c:	eb09 0806 	add.w	r8, r9, r6
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8006560:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_StructInit(&DMA_InitStruct);
 8006564:	a809      	add	r0, sp, #36	; 0x24
 8006566:	f00a fdee 	bl	8011146 <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 800656a:	8863      	ldrh	r3, [r4, #2]
 800656c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006570:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 8006574:	f000 809c 	beq.w	80066b0 <dma_stm32_configure+0x170>
 8006578:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 800657a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800657e:	42ab      	cmp	r3, r5
 8006580:	f240 80a6 	bls.w	80066d0 <dma_stm32_configure+0x190>
	if (stream->busy) {
 8006584:	f898 3006 	ldrb.w	r3, [r8, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f040 80c7 	bne.w	800671c <dma_stm32_configure+0x1dc>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 800658e:	4629      	mov	r1, r5
 8006590:	4650      	mov	r0, sl
 8006592:	f009 fcc0 	bl	800ff16 <dma_stm32_disable_stream>
 8006596:	2800      	cmp	r0, #0
 8006598:	f040 80e6 	bne.w	8006768 <dma_stm32_configure+0x228>
	dma_stm32_clear_stream_irq(dev, id);
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	f009 fc63 	bl	800fe6a <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 80065a4:	6922      	ldr	r2, [r4, #16]
 80065a6:	6953      	ldr	r3, [r2, #20]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	f080 8102 	bcs.w	80067b4 <dma_stm32_configure+0x274>
	if ((config->dest_data_size != config->source_data_size)) {
 80065b0:	88e1      	ldrh	r1, [r4, #6]
 80065b2:	88a3      	ldrh	r3, [r4, #4]
 80065b4:	4299      	cmp	r1, r3
 80065b6:	f040 8125 	bne.w	8006804 <dma_stm32_configure+0x2c4>
	if (config->source_data_size != 4U &&
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d004      	beq.n	80065c8 <dma_stm32_configure+0x88>
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d002      	beq.n	80065c8 <dma_stm32_configure+0x88>
	    config->source_data_size != 2U &&
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	f040 8143 	bne.w	800684e <dma_stm32_configure+0x30e>
	if (config->head_block->source_reload_en !=
 80065c8:	7f13      	ldrb	r3, [r2, #28]
 80065ca:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80065ce:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 80065d2:	f040 8163 	bne.w	800689c <dma_stm32_configure+0x35c>
	stream->busy		= true;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 80065dc:	69a3      	ldr	r3, [r4, #24]
 80065de:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 80065e2:	8823      	ldrh	r3, [r4, #0]
 80065e4:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80065e8:	f849 3006 	str.w	r3, [r9, r6]
	stream->user_data       = config->user_data;
 80065ec:	6963      	ldr	r3, [r4, #20]
 80065ee:	f8c8 3010 	str.w	r3, [r8, #16]
	stream->src_size	= config->source_data_size;
 80065f2:	88a3      	ldrh	r3, [r4, #4]
 80065f4:	f8c8 3008 	str.w	r3, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 80065f8:	88e3      	ldrh	r3, [r4, #6]
 80065fa:	f8c8 300c 	str.w	r3, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 816f 	beq.w	80068e6 <dma_stm32_configure+0x3a6>
	if ((config->head_block->dest_address == 0)) {
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 818d 	beq.w	800692c <dma_stm32_configure+0x3ec>
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8006612:	f859 3006 	ldr.w	r3, [r9, r6]
 8006616:	2b01      	cmp	r3, #1
 8006618:	f000 81ab 	beq.w	8006972 <dma_stm32_configure+0x432>
					config->head_block->source_address;
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8006620:	9209      	str	r2, [sp, #36]	; 0x24
					config->head_block->dest_address;
 8006622:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8006624:	930a      	str	r3, [sp, #40]	; 0x28
	ret = dma_stm32_get_priority(config->channel_priority,
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	a913      	add	r1, sp, #76	; 0x4c
 800662a:	f3c0 3083 	ubfx	r0, r0, #14, #4
 800662e:	f7ff fd29 	bl	8006084 <dma_stm32_get_priority>
	if (ret < 0) {
 8006632:	1e07      	subs	r7, r0, #0
 8006634:	db48      	blt.n	80066c8 <dma_stm32_configure+0x188>
	ret = dma_stm32_get_direction(config->channel_direction,
 8006636:	8820      	ldrh	r0, [r4, #0]
 8006638:	a90b      	add	r1, sp, #44	; 0x2c
 800663a:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 800663e:	f7ff fd67 	bl	8006110 <dma_stm32_get_direction>
	if (ret < 0) {
 8006642:	1e07      	subs	r7, r0, #0
 8006644:	db40      	blt.n	80066c8 <dma_stm32_configure+0x188>
	switch (config->channel_direction) {
 8006646:	8823      	ldrh	r3, [r4, #0]
 8006648:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800664c:	2b01      	cmp	r3, #1
 800664e:	f000 821b 	beq.w	8006a88 <dma_stm32_configure+0x548>
 8006652:	2b02      	cmp	r3, #2
 8006654:	f000 81aa 	beq.w	80069ac <dma_stm32_configure+0x46c>
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 81a7 	beq.w	80069ac <dma_stm32_configure+0x46c>
		LOG_ERR("Channel direction error (%d).",
 800665e:	2201      	movs	r2, #1
 8006660:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006664:	4bc6      	ldr	r3, [pc, #792]	; (8006980 <dma_stm32_configure+0x440>)
 8006666:	932a      	str	r3, [sp, #168]	; 0xa8
 8006668:	8823      	ldrh	r3, [r4, #0]
 800666a:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800666e:	932b      	str	r3, [sp, #172]	; 0xac
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2103      	movs	r1, #3
 8006676:	f88d 1000 	strb.w	r1, [sp]
 800667a:	9900      	ldr	r1, [sp, #0]
 800667c:	9129      	str	r1, [sp, #164]	; 0xa4
 800667e:	4619      	mov	r1, r3
 8006680:	f363 0100 	bfi	r1, r3, #0, #1
 8006684:	f363 0141 	bfi	r1, r3, #1, #1
 8006688:	f363 0182 	bfi	r1, r3, #2, #1
 800668c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006690:	f362 1188 	bfi	r1, r2, #6, #3
 8006694:	220c      	movs	r2, #12
 8006696:	f362 2152 	bfi	r1, r2, #9, #10
 800669a:	f363 41de 	bfi	r1, r3, #19, #12
 800669e:	f363 71df 	bfi	r1, r3, #31, #1
 80066a2:	aa29      	add	r2, sp, #164	; 0xa4
 80066a4:	48b7      	ldr	r0, [pc, #732]	; (8006984 <dma_stm32_configure+0x444>)
 80066a6:	f009 f9c9 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80066aa:	f06f 0715 	mvn.w	r7, #21
 80066ae:	e00b      	b.n	80066c8 <dma_stm32_configure+0x188>
		stream->busy = true;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 80066b6:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 80066c0:	6963      	ldr	r3, [r4, #20]
 80066c2:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 80066c6:	2700      	movs	r7, #0
}
 80066c8:	4638      	mov	r0, r7
 80066ca:	b051      	add	sp, #324	; 0x144
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("cannot configure the dma stream %d.", id);
 80066d0:	2201      	movs	r2, #1
 80066d2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80066d6:	4bac      	ldr	r3, [pc, #688]	; (8006988 <dma_stm32_configure+0x448>)
 80066d8:	934e      	str	r3, [sp, #312]	; 0x138
 80066da:	954f      	str	r5, [sp, #316]	; 0x13c
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2103      	movs	r1, #3
 80066e2:	f88d 1000 	strb.w	r1, [sp]
 80066e6:	9900      	ldr	r1, [sp, #0]
 80066e8:	914d      	str	r1, [sp, #308]	; 0x134
 80066ea:	4619      	mov	r1, r3
 80066ec:	f363 0100 	bfi	r1, r3, #0, #1
 80066f0:	f363 0141 	bfi	r1, r3, #1, #1
 80066f4:	f363 0182 	bfi	r1, r3, #2, #1
 80066f8:	f363 01c5 	bfi	r1, r3, #3, #3
 80066fc:	f362 1188 	bfi	r1, r2, #6, #3
 8006700:	220c      	movs	r2, #12
 8006702:	f362 2152 	bfi	r1, r2, #9, #10
 8006706:	f363 41de 	bfi	r1, r3, #19, #12
 800670a:	f363 71df 	bfi	r1, r3, #31, #1
 800670e:	aa4d      	add	r2, sp, #308	; 0x134
 8006710:	489c      	ldr	r0, [pc, #624]	; (8006984 <dma_stm32_configure+0x444>)
 8006712:	f009 f993 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006716:	f06f 0715 	mvn.w	r7, #21
 800671a:	e7d5      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("dma stream %d is busy.", id);
 800671c:	2201      	movs	r2, #1
 800671e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006722:	4b9a      	ldr	r3, [pc, #616]	; (800698c <dma_stm32_configure+0x44c>)
 8006724:	9348      	str	r3, [sp, #288]	; 0x120
 8006726:	9549      	str	r5, [sp, #292]	; 0x124
 8006728:	2300      	movs	r3, #0
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2103      	movs	r1, #3
 800672e:	f88d 1000 	strb.w	r1, [sp]
 8006732:	9900      	ldr	r1, [sp, #0]
 8006734:	9147      	str	r1, [sp, #284]	; 0x11c
 8006736:	4619      	mov	r1, r3
 8006738:	f363 0100 	bfi	r1, r3, #0, #1
 800673c:	f363 0141 	bfi	r1, r3, #1, #1
 8006740:	f363 0182 	bfi	r1, r3, #2, #1
 8006744:	f363 01c5 	bfi	r1, r3, #3, #3
 8006748:	f362 1188 	bfi	r1, r2, #6, #3
 800674c:	220c      	movs	r2, #12
 800674e:	f362 2152 	bfi	r1, r2, #9, #10
 8006752:	f363 41de 	bfi	r1, r3, #19, #12
 8006756:	f363 71df 	bfi	r1, r3, #31, #1
 800675a:	aa47      	add	r2, sp, #284	; 0x11c
 800675c:	4889      	ldr	r0, [pc, #548]	; (8006984 <dma_stm32_configure+0x444>)
 800675e:	f009 f96d 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8006762:	f06f 070f 	mvn.w	r7, #15
 8006766:	e7af      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("could not disable dma stream %d.", id);
 8006768:	2201      	movs	r2, #1
 800676a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800676e:	4b88      	ldr	r3, [pc, #544]	; (8006990 <dma_stm32_configure+0x450>)
 8006770:	9342      	str	r3, [sp, #264]	; 0x108
 8006772:	9543      	str	r5, [sp, #268]	; 0x10c
 8006774:	2300      	movs	r3, #0
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	2103      	movs	r1, #3
 800677a:	f88d 1000 	strb.w	r1, [sp]
 800677e:	9900      	ldr	r1, [sp, #0]
 8006780:	9141      	str	r1, [sp, #260]	; 0x104
 8006782:	4619      	mov	r1, r3
 8006784:	f363 0100 	bfi	r1, r3, #0, #1
 8006788:	f363 0141 	bfi	r1, r3, #1, #1
 800678c:	f363 0182 	bfi	r1, r3, #2, #1
 8006790:	f363 01c5 	bfi	r1, r3, #3, #3
 8006794:	f362 1188 	bfi	r1, r2, #6, #3
 8006798:	220c      	movs	r2, #12
 800679a:	f362 2152 	bfi	r1, r2, #9, #10
 800679e:	f363 41de 	bfi	r1, r3, #19, #12
 80067a2:	f363 71df 	bfi	r1, r3, #31, #1
 80067a6:	aa41      	add	r2, sp, #260	; 0x104
 80067a8:	4876      	ldr	r0, [pc, #472]	; (8006984 <dma_stm32_configure+0x444>)
 80067aa:	f009 f947 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 80067ae:	f06f 070f 	mvn.w	r7, #15
 80067b2:	e789      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("Data size too big: %d\n",
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80067ba:	4b76      	ldr	r3, [pc, #472]	; (8006994 <dma_stm32_configure+0x454>)
 80067bc:	933c      	str	r3, [sp, #240]	; 0xf0
 80067be:	6923      	ldr	r3, [r4, #16]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	933d      	str	r3, [sp, #244]	; 0xf4
 80067c4:	2300      	movs	r3, #0
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	2103      	movs	r1, #3
 80067ca:	f88d 1000 	strb.w	r1, [sp]
 80067ce:	9900      	ldr	r1, [sp, #0]
 80067d0:	913b      	str	r1, [sp, #236]	; 0xec
 80067d2:	4619      	mov	r1, r3
 80067d4:	f363 0100 	bfi	r1, r3, #0, #1
 80067d8:	f363 0141 	bfi	r1, r3, #1, #1
 80067dc:	f363 0182 	bfi	r1, r3, #2, #1
 80067e0:	f363 01c5 	bfi	r1, r3, #3, #3
 80067e4:	f362 1188 	bfi	r1, r2, #6, #3
 80067e8:	220c      	movs	r2, #12
 80067ea:	f362 2152 	bfi	r1, r2, #9, #10
 80067ee:	f363 41de 	bfi	r1, r3, #19, #12
 80067f2:	f363 71df 	bfi	r1, r3, #31, #1
 80067f6:	aa3b      	add	r2, sp, #236	; 0xec
 80067f8:	4862      	ldr	r0, [pc, #392]	; (8006984 <dma_stm32_configure+0x444>)
 80067fa:	f009 f91f 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80067fe:	f06f 0715 	mvn.w	r7, #21
 8006802:	e761      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("source and dest data size differ.");
 8006804:	2201      	movs	r2, #1
 8006806:	f8ad 2004 	strh.w	r2, [sp, #4]
 800680a:	4b63      	ldr	r3, [pc, #396]	; (8006998 <dma_stm32_configure+0x458>)
 800680c:	9336      	str	r3, [sp, #216]	; 0xd8
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2102      	movs	r1, #2
 8006814:	f88d 1000 	strb.w	r1, [sp]
 8006818:	9900      	ldr	r1, [sp, #0]
 800681a:	9135      	str	r1, [sp, #212]	; 0xd4
 800681c:	4619      	mov	r1, r3
 800681e:	f363 0100 	bfi	r1, r3, #0, #1
 8006822:	f363 0141 	bfi	r1, r3, #1, #1
 8006826:	f363 0182 	bfi	r1, r3, #2, #1
 800682a:	f363 01c5 	bfi	r1, r3, #3, #3
 800682e:	f362 1188 	bfi	r1, r2, #6, #3
 8006832:	2208      	movs	r2, #8
 8006834:	f362 2152 	bfi	r1, r2, #9, #10
 8006838:	f363 41de 	bfi	r1, r3, #19, #12
 800683c:	f363 71df 	bfi	r1, r3, #31, #1
 8006840:	aa35      	add	r2, sp, #212	; 0xd4
 8006842:	4850      	ldr	r0, [pc, #320]	; (8006984 <dma_stm32_configure+0x444>)
 8006844:	f009 f8fa 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006848:	f06f 0715 	mvn.w	r7, #21
 800684c:	e73c      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("source and dest unit size error, %d",
 800684e:	2201      	movs	r2, #1
 8006850:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006854:	4b51      	ldr	r3, [pc, #324]	; (800699c <dma_stm32_configure+0x45c>)
 8006856:	9318      	str	r3, [sp, #96]	; 0x60
 8006858:	88a3      	ldrh	r3, [r4, #4]
 800685a:	9319      	str	r3, [sp, #100]	; 0x64
 800685c:	2300      	movs	r3, #0
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	2103      	movs	r1, #3
 8006862:	f88d 1000 	strb.w	r1, [sp]
 8006866:	9900      	ldr	r1, [sp, #0]
 8006868:	9117      	str	r1, [sp, #92]	; 0x5c
 800686a:	4619      	mov	r1, r3
 800686c:	f363 0100 	bfi	r1, r3, #0, #1
 8006870:	f363 0141 	bfi	r1, r3, #1, #1
 8006874:	f363 0182 	bfi	r1, r3, #2, #1
 8006878:	f363 01c5 	bfi	r1, r3, #3, #3
 800687c:	f362 1188 	bfi	r1, r2, #6, #3
 8006880:	220c      	movs	r2, #12
 8006882:	f362 2152 	bfi	r1, r2, #9, #10
 8006886:	f363 41de 	bfi	r1, r3, #19, #12
 800688a:	f363 71df 	bfi	r1, r3, #31, #1
 800688e:	aa17      	add	r2, sp, #92	; 0x5c
 8006890:	483c      	ldr	r0, [pc, #240]	; (8006984 <dma_stm32_configure+0x444>)
 8006892:	f009 f8d3 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006896:	f06f 0715 	mvn.w	r7, #21
 800689a:	e715      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_ERR("source_reload_en and dest_reload_en must "
 800689c:	2201      	movs	r2, #1
 800689e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <dma_stm32_configure+0x460>)
 80068a4:	9330      	str	r3, [sp, #192]	; 0xc0
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2102      	movs	r1, #2
 80068ac:	f88d 1000 	strb.w	r1, [sp]
 80068b0:	9900      	ldr	r1, [sp, #0]
 80068b2:	912f      	str	r1, [sp, #188]	; 0xbc
 80068b4:	4619      	mov	r1, r3
 80068b6:	f363 0100 	bfi	r1, r3, #0, #1
 80068ba:	f363 0141 	bfi	r1, r3, #1, #1
 80068be:	f363 0182 	bfi	r1, r3, #2, #1
 80068c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80068c6:	f362 1188 	bfi	r1, r2, #6, #3
 80068ca:	2208      	movs	r2, #8
 80068cc:	f362 2152 	bfi	r1, r2, #9, #10
 80068d0:	f363 41de 	bfi	r1, r3, #19, #12
 80068d4:	f363 71df 	bfi	r1, r3, #31, #1
 80068d8:	aa2f      	add	r2, sp, #188	; 0xbc
 80068da:	482a      	ldr	r0, [pc, #168]	; (8006984 <dma_stm32_configure+0x444>)
 80068dc:	f009 f8ae 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80068e0:	f06f 0715 	mvn.w	r7, #21
 80068e4:	e6f0      	b.n	80066c8 <dma_stm32_configure+0x188>
		LOG_WRN("source_buffer address is null.");
 80068e6:	2301      	movs	r3, #1
 80068e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80068ec:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <dma_stm32_configure+0x464>)
 80068ee:	931e      	str	r3, [sp, #120]	; 0x78
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f88d 2000 	strb.w	r2, [sp]
 80068fa:	9900      	ldr	r1, [sp, #0]
 80068fc:	911d      	str	r1, [sp, #116]	; 0x74
 80068fe:	4619      	mov	r1, r3
 8006900:	f363 0100 	bfi	r1, r3, #0, #1
 8006904:	f363 0141 	bfi	r1, r3, #1, #1
 8006908:	f363 0182 	bfi	r1, r3, #2, #1
 800690c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006910:	f362 1188 	bfi	r1, r2, #6, #3
 8006914:	2208      	movs	r2, #8
 8006916:	f362 2152 	bfi	r1, r2, #9, #10
 800691a:	f363 41de 	bfi	r1, r3, #19, #12
 800691e:	f363 71df 	bfi	r1, r3, #31, #1
 8006922:	aa1d      	add	r2, sp, #116	; 0x74
 8006924:	4817      	ldr	r0, [pc, #92]	; (8006984 <dma_stm32_configure+0x444>)
 8006926:	f009 f889 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800692a:	e66d      	b.n	8006608 <dma_stm32_configure+0xc8>
		LOG_WRN("dest_buffer address is null.");
 800692c:	2301      	movs	r3, #1
 800692e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <dma_stm32_configure+0x468>)
 8006934:	9324      	str	r3, [sp, #144]	; 0x90
 8006936:	2300      	movs	r3, #0
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	2202      	movs	r2, #2
 800693c:	f88d 2000 	strb.w	r2, [sp]
 8006940:	9900      	ldr	r1, [sp, #0]
 8006942:	9123      	str	r1, [sp, #140]	; 0x8c
 8006944:	4619      	mov	r1, r3
 8006946:	f363 0100 	bfi	r1, r3, #0, #1
 800694a:	f363 0141 	bfi	r1, r3, #1, #1
 800694e:	f363 0182 	bfi	r1, r3, #2, #1
 8006952:	f363 01c5 	bfi	r1, r3, #3, #3
 8006956:	f362 1188 	bfi	r1, r2, #6, #3
 800695a:	2208      	movs	r2, #8
 800695c:	f362 2152 	bfi	r1, r2, #9, #10
 8006960:	f363 41de 	bfi	r1, r3, #19, #12
 8006964:	f363 71df 	bfi	r1, r3, #31, #1
 8006968:	aa23      	add	r2, sp, #140	; 0x8c
 800696a:	4806      	ldr	r0, [pc, #24]	; (8006984 <dma_stm32_configure+0x444>)
 800696c:	f009 f866 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 8006970:	e64f      	b.n	8006612 <dma_stm32_configure+0xd2>
					config->head_block->source_address;
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8006976:	920a      	str	r2, [sp, #40]	; 0x28
					config->head_block->dest_address;
 8006978:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 800697a:	9309      	str	r3, [sp, #36]	; 0x24
 800697c:	e653      	b.n	8006626 <dma_stm32_configure+0xe6>
 800697e:	bf00      	nop
 8006980:	080131d8 	.word	0x080131d8
 8006984:	08012708 	.word	0x08012708
 8006988:	080130a0 	.word	0x080130a0
 800698c:	080130c4 	.word	0x080130c4
 8006990:	080130dc 	.word	0x080130dc
 8006994:	08013100 	.word	0x08013100
 8006998:	08013118 	.word	0x08013118
 800699c:	0801313c 	.word	0x0801313c
 80069a0:	08013160 	.word	0x08013160
 80069a4:	08013198 	.word	0x08013198
 80069a8:	080131b8 	.word	0x080131b8
		memory_addr_adj = config->head_block->dest_addr_adj;
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	f893 b01c 	ldrb.w	fp, [r3, #28]
 80069b2:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 80069b6:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 80069ba:	a90e      	add	r1, sp, #56	; 0x38
 80069bc:	f7ff fbe6 	bl	800618c <dma_stm32_get_memory_increment>
	if (ret < 0) {
 80069c0:	1e07      	subs	r7, r0, #0
 80069c2:	f6ff ae81 	blt.w	80066c8 <dma_stm32_configure+0x188>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 80069c6:	a90d      	add	r1, sp, #52	; 0x34
 80069c8:	4658      	mov	r0, fp
 80069ca:	f7ff fc1b 	bl	8006204 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 80069ce:	1e07      	subs	r7, r0, #0
 80069d0:	f6ff ae7a 	blt.w	80066c8 <dma_stm32_configure+0x188>
	if (config->head_block->source_reload_en) {
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	7f1b      	ldrb	r3, [r3, #28]
 80069d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069dc:	d05c      	beq.n	8006a98 <dma_stm32_configure+0x558>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 80069de:	2320      	movs	r3, #32
 80069e0:	930c      	str	r3, [sp, #48]	; 0x30
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 80069e2:	f859 3006 	ldr.w	r3, [r9, r6]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	bf14      	ite	ne
 80069ea:	2300      	movne	r3, #0
 80069ec:	2301      	moveq	r3, #1
 80069ee:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 80069f2:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 80069f4:	fa93 f2a3 	rbit	r2, r3
 80069f8:	fab2 f282 	clz	r2, r2
 80069fc:	b90b      	cbnz	r3, 8006a02 <dma_stm32_configure+0x4c2>
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8006a02:	4b2a      	ldr	r3, [pc, #168]	; (8006aac <dma_stm32_configure+0x56c>)
 8006a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a08:	930f      	str	r3, [sp, #60]	; 0x3c
	index = find_lsb_set(config->dest_data_size) - 1;
 8006a0a:	88e3      	ldrh	r3, [r4, #6]
 8006a0c:	fa93 f2a3 	rbit	r2, r3
 8006a10:	fab2 f282 	clz	r2, r2
 8006a14:	b90b      	cbnz	r3, 8006a1a <dma_stm32_configure+0x4da>
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <dma_stm32_configure+0x570>)
 8006a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a20:	9310      	str	r3, [sp, #64]	; 0x40
	if (stream->source_periph) {
 8006a22:	f898 3004 	ldrb.w	r3, [r8, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d039      	beq.n	8006a9e <dma_stm32_configure+0x55e>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8006a2e:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8006a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a34:	9311      	str	r3, [sp, #68]	; 0x44
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8006a36:	7823      	ldrb	r3, [r4, #0]
 8006a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a3c:	9312      	str	r3, [sp, #72]	; 0x48
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f892 	bl	8006b68 <dma_stm32_id_to_stream>
 8006a44:	4601      	mov	r1, r0
 8006a46:	aa09      	add	r2, sp, #36	; 0x24
 8006a48:	4650      	mov	r0, sl
 8006a4a:	f004 fbcb 	bl	800b1e4 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f88a 	bl	8006b68 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8006a54:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <dma_stm32_configure+0x574>)
 8006a56:	5c1a      	ldrb	r2, [r3, r0]
 8006a58:	f85a 3002 	ldr.w	r3, [sl, r2]
 8006a5c:	f043 0302 	orr.w	r3, r3, #2
 8006a60:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	7f1b      	ldrb	r3, [r3, #28]
 8006a68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a6c:	f43f ae2c 	beq.w	80066c8 <dma_stm32_configure+0x188>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 f879 	bl	8006b68 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <dma_stm32_configure+0x574>)
 8006a78:	5c1a      	ldrb	r2, [r3, r0]
 8006a7a:	f85a 3002 	ldr.w	r3, [sl, r2]
 8006a7e:	f043 0304 	orr.w	r3, r3, #4
 8006a82:	f84a 3002 	str.w	r3, [sl, r2]
}
 8006a86:	e61f      	b.n	80066c8 <dma_stm32_configure+0x188>
		memory_addr_adj = config->head_block->source_addr_adj;
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8006a8e:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8006a92:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 8006a96:	e790      	b.n	80069ba <dma_stm32_configure+0x47a>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a9c:	e7a1      	b.n	80069e2 <dma_stm32_configure+0x4a2>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 8006aa2:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8006aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa8:	9311      	str	r3, [sp, #68]	; 0x44
 8006aaa:	e7c4      	b.n	8006a36 <dma_stm32_configure+0x4f6>
 8006aac:	08013294 	.word	0x08013294
 8006ab0:	08013288 	.word	0x08013288
 8006ab4:	08013228 	.word	0x08013228

08006ab8 <dma_stm32_init>:
{
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	b090      	sub	sp, #64	; 0x40
 8006abc:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 8006abe:	6844      	ldr	r4, [r0, #4]
 8006ac0:	4826      	ldr	r0, [pc, #152]	; (8006b5c <dma_stm32_init+0xa4>)
 8006ac2:	f00a fbf7 	bl	80112b4 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8006ac6:	b158      	cbz	r0, 8006ae0 <dma_stm32_init+0x28>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006ac8:	4824      	ldr	r0, [pc, #144]	; (8006b5c <dma_stm32_init+0xa4>)
 8006aca:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4798      	blx	r3
 8006ad2:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 8006ad4:	b93e      	cbnz	r6, 8006ae6 <dma_stm32_init+0x2e>
	config->config_irq(dev);
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	4628      	mov	r0, r5
 8006ada:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8006adc:	2300      	movs	r3, #0
 8006ade:	e02f      	b.n	8006b40 <dma_stm32_init+0x88>
		return -ENODEV;
 8006ae0:	f06f 0612 	mvn.w	r6, #18
 8006ae4:	e7f6      	b.n	8006ad4 <dma_stm32_init+0x1c>
		LOG_ERR("clock op failed\n");
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006aec:	4b1c      	ldr	r3, [pc, #112]	; (8006b60 <dma_stm32_init+0xa8>)
 8006aee:	930e      	str	r3, [sp, #56]	; 0x38
 8006af0:	2300      	movs	r3, #0
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	2102      	movs	r1, #2
 8006af6:	f88d 1004 	strb.w	r1, [sp, #4]
 8006afa:	9901      	ldr	r1, [sp, #4]
 8006afc:	910d      	str	r1, [sp, #52]	; 0x34
 8006afe:	4619      	mov	r1, r3
 8006b00:	f363 0100 	bfi	r1, r3, #0, #1
 8006b04:	f363 0141 	bfi	r1, r3, #1, #1
 8006b08:	f363 0182 	bfi	r1, r3, #2, #1
 8006b0c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006b10:	f362 1188 	bfi	r1, r2, #6, #3
 8006b14:	2208      	movs	r2, #8
 8006b16:	f362 2152 	bfi	r1, r2, #9, #10
 8006b1a:	f363 41de 	bfi	r1, r3, #19, #12
 8006b1e:	f363 71df 	bfi	r1, r3, #31, #1
 8006b22:	aa0d      	add	r2, sp, #52	; 0x34
 8006b24:	480f      	ldr	r0, [pc, #60]	; (8006b64 <dma_stm32_init+0xac>)
 8006b26:	f008 ff89 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006b2a:	f06f 0604 	mvn.w	r6, #4
 8006b2e:	e011      	b.n	8006b54 <dma_stm32_init+0x9c>
		config->streams[i].busy = false;
 8006b30:	69a2      	ldr	r2, [r4, #24]
 8006b32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006b36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6962      	ldr	r2, [r4, #20]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d3f4      	bcc.n	8006b30 <dma_stm32_init+0x78>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8006b46:	692a      	ldr	r2, [r5, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8006b4c:	692a      	ldr	r2, [r5, #16]
 8006b4e:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8006b50:	692a      	ldr	r2, [r5, #16]
 8006b52:	6093      	str	r3, [r2, #8]
}
 8006b54:	4630      	mov	r0, r6
 8006b56:	b010      	add	sp, #64	; 0x40
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
 8006b5a:	bf00      	nop
 8006b5c:	080122d0 	.word	0x080122d0
 8006b60:	080131f8 	.word	0x080131f8
 8006b64:	08012708 	.word	0x08012708

08006b68 <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 8006b68:	4b01      	ldr	r3, [pc, #4]	; (8006b70 <dma_stm32_id_to_stream+0x8>)
 8006b6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006b6e:	4770      	bx	lr
 8006b70:	0801339c 	.word	0x0801339c

08006b74 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8006b74:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8006b76:	4b02      	ldr	r3, [pc, #8]	; (8006b80 <dma_stm32_clear_ht+0xc>)
 8006b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b7c:	4798      	blx	r3
}
 8006b7e:	bd08      	pop	{r3, pc}
 8006b80:	08013380 	.word	0x08013380

08006b84 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 8006b84:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8006b86:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <dma_stm32_clear_tc+0xc>)
 8006b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b8c:	4798      	blx	r3
}
 8006b8e:	bd08      	pop	{r3, pc}
 8006b90:	08013364 	.word	0x08013364

08006b94 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006b94:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8006b96:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <dma_stm32_is_ht_active+0x14>)
 8006b98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b9c:	4798      	blx	r3
}
 8006b9e:	3800      	subs	r0, #0
 8006ba0:	bf18      	it	ne
 8006ba2:	2001      	movne	r0, #1
 8006ba4:	bd08      	pop	{r3, pc}
 8006ba6:	bf00      	nop
 8006ba8:	08013348 	.word	0x08013348

08006bac <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006bac:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <dma_stm32_is_tc_active+0x14>)
 8006bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bb4:	4798      	blx	r3
}
 8006bb6:	3800      	subs	r0, #0
 8006bb8:	bf18      	it	ne
 8006bba:	2001      	movne	r0, #1
 8006bbc:	bd08      	pop	{r3, pc}
 8006bbe:	bf00      	nop
 8006bc0:	0801332c 	.word	0x0801332c

08006bc4 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 8006bc4:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8006bc6:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <dma_stm32_clear_te+0xc>)
 8006bc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bcc:	4798      	blx	r3
}
 8006bce:	bd08      	pop	{r3, pc}
 8006bd0:	08013310 	.word	0x08013310

08006bd4 <dma_stm32_is_te_active>:

	func[id](DMAx);
}

bool dma_stm32_is_te_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006bd4:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8006bd6:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <dma_stm32_is_te_active+0x14>)
 8006bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bdc:	4798      	blx	r3
}
 8006bde:	3800      	subs	r0, #0
 8006be0:	bf18      	it	ne
 8006be2:	2001      	movne	r0, #1
 8006be4:	bd08      	pop	{r3, pc}
 8006be6:	bf00      	nop
 8006be8:	080132f4 	.word	0x080132f4

08006bec <dma_stm32_is_gi_active>:

bool dma_stm32_is_gi_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8006bec:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CGIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8006bee:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <dma_stm32_is_gi_active+0x14>)
 8006bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bf4:	4798      	blx	r3
}
 8006bf6:	3800      	subs	r0, #0
 8006bf8:	bf18      	it	ne
 8006bfa:	2001      	movne	r0, #1
 8006bfc:	bd08      	pop	{r3, pc}
 8006bfe:	bf00      	nop
 8006c00:	080132d8 	.word	0x080132d8

08006c04 <stm32_dma_dump_stream_irq>:

void stm32_dma_dump_stream_irq(DMA_TypeDef *dma, uint32_t id)
{
 8006c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c08:	b08b      	sub	sp, #44	; 0x2c
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460d      	mov	r5, r1
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8006c10:	2301      	movs	r3, #1
 8006c12:	813b      	strh	r3, [r7, #8]
 8006c14:	f7ff ffca 	bl	8006bac <dma_stm32_is_tc_active>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff ffba 	bl	8006b94 <dma_stm32_is_ht_active>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff ffd6 	bl	8006bd4 <dma_stm32_is_te_active>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff ffde 	bl	8006bec <dma_stm32_is_gi_active>
 8006c30:	b08a      	sub	sp, #40	; 0x28
 8006c32:	46e9      	mov	r9, sp
 8006c34:	f119 060c 	adds.w	r6, r9, #12
 8006c38:	d053      	beq.n	8006ce2 <stm32_dma_dump_stream_irq+0xde>
 8006c3a:	f04f 0818 	mov.w	r8, #24
 8006c3e:	2301      	movs	r3, #1
 8006c40:	813b      	strh	r3, [r7, #8]
 8006c42:	b12e      	cbz	r6, 8006c50 <stm32_dma_dump_stream_irq+0x4c>
 8006c44:	f1b8 0f04 	cmp.w	r8, #4
 8006c48:	dd02      	ble.n	8006c50 <stm32_dma_dump_stream_irq+0x4c>
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <stm32_dma_dump_stream_irq+0x124>)
 8006c4c:	f8c9 3010 	str.w	r3, [r9, #16]
 8006c50:	4629      	mov	r1, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7ff ffaa 	bl	8006bac <dma_stm32_is_tc_active>
 8006c58:	b116      	cbz	r6, 8006c60 <stm32_dma_dump_stream_irq+0x5c>
 8006c5a:	f1b8 0f08 	cmp.w	r8, #8
 8006c5e:	dc43      	bgt.n	8006ce8 <stm32_dma_dump_stream_irq+0xe4>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff ff96 	bl	8006b94 <dma_stm32_is_ht_active>
 8006c68:	b116      	cbz	r6, 8006c70 <stm32_dma_dump_stream_irq+0x6c>
 8006c6a:	f1b8 0f0c 	cmp.w	r8, #12
 8006c6e:	dc42      	bgt.n	8006cf6 <stm32_dma_dump_stream_irq+0xf2>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ffae 	bl	8006bd4 <dma_stm32_is_te_active>
 8006c78:	b116      	cbz	r6, 8006c80 <stm32_dma_dump_stream_irq+0x7c>
 8006c7a:	f1b8 0f10 	cmp.w	r8, #16
 8006c7e:	dc41      	bgt.n	8006d04 <stm32_dma_dump_stream_irq+0x100>
 8006c80:	4629      	mov	r1, r5
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff ffb2 	bl	8006bec <dma_stm32_is_gi_active>
 8006c88:	b116      	cbz	r6, 8006c90 <stm32_dma_dump_stream_irq+0x8c>
 8006c8a:	f1b8 0f14 	cmp.w	r8, #20
 8006c8e:	dc40      	bgt.n	8006d12 <stm32_dma_dump_stream_irq+0x10e>
 8006c90:	f1b8 0f17 	cmp.w	r8, #23
 8006c94:	dd44      	ble.n	8006d20 <stm32_dma_dump_stream_irq+0x11c>
 8006c96:	2318      	movs	r3, #24
 8006c98:	b136      	cbz	r6, 8006ca8 <stm32_dma_dump_stream_irq+0xa4>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	2206      	movs	r2, #6
 8006ca0:	713a      	strb	r2, [r7, #4]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	f8c9 200c 	str.w	r2, [r9, #12]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f36f 0100 	bfc	r1, #0, #1
 8006cae:	f36f 0141 	bfc	r1, #1, #1
 8006cb2:	f36f 0182 	bfc	r1, #2, #1
 8006cb6:	f36f 01c5 	bfc	r1, #3, #3
 8006cba:	2203      	movs	r2, #3
 8006cbc:	f362 1188 	bfi	r1, r2, #6, #3
 8006cc0:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8006cc4:	f363 2152 	bfi	r1, r3, #9, #10
 8006cc8:	f36f 41de 	bfc	r1, #19, #12
 8006ccc:	f36f 71df 	bfc	r1, #31, #1
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	4815      	ldr	r0, [pc, #84]	; (8006d2c <stm32_dma_dump_stream_irq+0x128>)
 8006cd6:	f008 feb1 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 8006cda:	372c      	adds	r7, #44	; 0x2c
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8006ce2:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8006ce6:	e7aa      	b.n	8006c3e <stm32_dma_dump_stream_irq+0x3a>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4620      	mov	r0, r4
 8006cec:	f7ff ff5e 	bl	8006bac <dma_stm32_is_tc_active>
 8006cf0:	f8c9 0014 	str.w	r0, [r9, #20]
 8006cf4:	e7b4      	b.n	8006c60 <stm32_dma_dump_stream_irq+0x5c>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff ff4b 	bl	8006b94 <dma_stm32_is_ht_active>
 8006cfe:	f8c9 0018 	str.w	r0, [r9, #24]
 8006d02:	e7b5      	b.n	8006c70 <stm32_dma_dump_stream_irq+0x6c>
 8006d04:	4629      	mov	r1, r5
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7ff ff64 	bl	8006bd4 <dma_stm32_is_te_active>
 8006d0c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006d10:	e7b6      	b.n	8006c80 <stm32_dma_dump_stream_irq+0x7c>
 8006d12:	4629      	mov	r1, r5
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7ff ff69 	bl	8006bec <dma_stm32_is_gi_active>
 8006d1a:	f8c9 0020 	str.w	r0, [r9, #32]
 8006d1e:	e7b7      	b.n	8006c90 <stm32_dma_dump_stream_irq+0x8c>
 8006d20:	f06f 031b 	mvn.w	r3, #27
 8006d24:	e7b8      	b.n	8006c98 <stm32_dma_dump_stream_irq+0x94>
 8006d26:	bf00      	nop
 8006d28:	080132a0 	.word	0x080132a0
 8006d2c:	08012710 	.word	0x08012710

08006d30 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4604      	mov	r4, r0
 8006d34:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8006d36:	4608      	mov	r0, r1
 8006d38:	f7ff ff16 	bl	8006b68 <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006d3c:	4b08      	ldr	r3, [pc, #32]	; (8006d60 <stm32_dma_is_tc_irq_active+0x30>)
 8006d3e:	5c1b      	ldrb	r3, [r3, r0]
 8006d40:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8006d42:	f013 0f02 	tst.w	r3, #2
 8006d46:	d006      	beq.n	8006d56 <stm32_dma_is_tc_irq_active+0x26>
	       dma_stm32_is_tc_active(dma, id);
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff ff2e 	bl	8006bac <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8006d50:	b118      	cbz	r0, 8006d5a <stm32_dma_is_tc_irq_active+0x2a>
 8006d52:	2001      	movs	r0, #1
 8006d54:	e000      	b.n	8006d58 <stm32_dma_is_tc_irq_active+0x28>
 8006d56:	2000      	movs	r0, #0
}
 8006d58:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7fc      	b.n	8006d58 <stm32_dma_is_tc_irq_active+0x28>
 8006d5e:	bf00      	nop
 8006d60:	080132d0 	.word	0x080132d0

08006d64 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	f7ff fefc 	bl	8006b68 <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <stm32_dma_is_ht_irq_active+0x30>)
 8006d72:	5c1b      	ldrb	r3, [r3, r0]
 8006d74:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8006d76:	f013 0f04 	tst.w	r3, #4
 8006d7a:	d006      	beq.n	8006d8a <stm32_dma_is_ht_irq_active+0x26>
	       dma_stm32_is_ht_active(dma, id);
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff08 	bl	8006b94 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8006d84:	b118      	cbz	r0, 8006d8e <stm32_dma_is_ht_irq_active+0x2a>
 8006d86:	2001      	movs	r0, #1
 8006d88:	e000      	b.n	8006d8c <stm32_dma_is_ht_irq_active+0x28>
 8006d8a:	2000      	movs	r0, #0
}
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e7fc      	b.n	8006d8c <stm32_dma_is_ht_irq_active+0x28>
 8006d92:	bf00      	nop
 8006d94:	080132d0 	.word	0x080132d0

08006d98 <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	f7ff fee3 	bl	8006b68 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8006da2:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <stm32_dma_enable_stream+0x18>)
 8006da4:	5c1a      	ldrb	r2, [r3, r0]
 8006da6:	58a3      	ldr	r3, [r4, r2]
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	50a3      	str	r3, [r4, r2]
}
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	080132d0 	.word	0x080132d0

08006db4 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 8006db8:	4608      	mov	r0, r1
 8006dba:	f7ff fed5 	bl	8006b68 <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <stm32_dma_disable_stream+0x28>)
 8006dc0:	5c1b      	ldrb	r3, [r3, r0]
 8006dc2:	58e2      	ldr	r2, [r4, r3]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	50e2      	str	r2, [r4, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8006dca:	58e3      	ldr	r3, [r4, r3]
                  DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8006dcc:	f013 0f01 	tst.w	r3, #1
 8006dd0:	d002      	beq.n	8006dd8 <stm32_dma_disable_stream+0x24>

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
	}

	return -EAGAIN;
 8006dd2:	f06f 000a 	mvn.w	r0, #10
}
 8006dd6:	bd10      	pop	{r4, pc}
		return 0;
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7fc      	b.n	8006dd6 <stm32_dma_disable_stream+0x22>
 8006ddc:	080132d0 	.word	0x080132d0

08006de0 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006de0:	424a      	negs	r2, r1
 8006de2:	f001 0303 	and.w	r3, r1, #3
 8006de6:	f002 0203 	and.w	r2, r2, #3
 8006dea:	bf58      	it	pl
 8006dec:	4253      	negpl	r3, r2
 8006dee:	3304      	adds	r3, #4
 8006df0:	009a      	lsls	r2, r3, #2
 8006df2:	230f      	movs	r3, #15
 8006df4:	4093      	lsls	r3, r2
 8006df6:	460a      	mov	r2, r1
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	db19      	blt.n	8006e30 <gpio_stm32_set_exti_source+0x50>
 8006dfc:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8006e00:	fa5f fc83 	uxtb.w	ip, r3
 8006e04:	f10c 0102 	add.w	r1, ip, #2
 8006e08:	4a0b      	ldr	r2, [pc, #44]	; (8006e38 <gpio_stm32_set_exti_source+0x58>)
 8006e0a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006e0e:	0c1a      	lsrs	r2, r3, #16
 8006e10:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e14:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8006e18:	b162      	cbz	r2, 8006e34 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8006e1a:	fab2 f282 	clz	r2, r2
 8006e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e22:	431a      	orrs	r2, r3
 8006e24:	f10c 0c02 	add.w	ip, ip, #2
 8006e28:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <gpio_stm32_set_exti_source+0x58>)
 8006e2a:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8006e2e:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006e30:	1cca      	adds	r2, r1, #3
 8006e32:	e7e3      	b.n	8006dfc <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8006e34:	2220      	movs	r2, #32
 8006e36:	e7f2      	b.n	8006e1e <gpio_stm32_set_exti_source+0x3e>
 8006e38:	40010000 	.word	0x40010000

08006e3c <gpio_stm32_get_exti_source>:
 8006e3c:	4242      	negs	r2, r0
 8006e3e:	f000 0303 	and.w	r3, r0, #3
 8006e42:	f002 0203 	and.w	r2, r2, #3
 8006e46:	bf58      	it	pl
 8006e48:	4253      	negpl	r3, r2
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	009a      	lsls	r2, r3, #2
 8006e4e:	230f      	movs	r3, #15
 8006e50:	4093      	lsls	r3, r2
 8006e52:	4602      	mov	r2, r0
 8006e54:	2800      	cmp	r0, #0
 8006e56:	db10      	blt.n	8006e7a <gpio_stm32_get_exti_source+0x3e>
 8006e58:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8006e5c:	b2c3      	uxtb	r3, r0
 8006e5e:	3302      	adds	r3, #2
 8006e60:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <gpio_stm32_get_exti_source+0x48>)
 8006e62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e66:	0c03      	lsrs	r3, r0, #16
 8006e68:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8006e70:	b12b      	cbz	r3, 8006e7e <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8006e72:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8006e76:	40d8      	lsrs	r0, r3
 8006e78:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006e7a:	1cc2      	adds	r2, r0, #3
 8006e7c:	e7ec      	b.n	8006e58 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8006e7e:	2320      	movs	r3, #32
 8006e80:	e7f9      	b.n	8006e76 <gpio_stm32_get_exti_source+0x3a>
 8006e82:	bf00      	nop
 8006e84:	40010000 	.word	0x40010000

08006e88 <gpio_stm32_clock_request>:
{
 8006e88:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8006e8a:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8006e8c:	b169      	cbz	r1, 8006eaa <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8006e8e:	340c      	adds	r4, #12
 8006e90:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <gpio_stm32_clock_request+0x40>)
 8006e92:	f00a fa0f 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006e96:	b128      	cbz	r0, 8006ea4 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8006e98:	480b      	ldr	r0, [pc, #44]	; (8006ec8 <gpio_stm32_clock_request+0x40>)
 8006e9a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4798      	blx	r3
}
 8006ea2:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8006ea4:	f06f 0012 	mvn.w	r0, #18
 8006ea8:	e7fb      	b.n	8006ea2 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8006eaa:	340c      	adds	r4, #12
 8006eac:	4806      	ldr	r0, [pc, #24]	; (8006ec8 <gpio_stm32_clock_request+0x40>)
 8006eae:	f00a fa01 	bl	80112b4 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8006eb2:	b128      	cbz	r0, 8006ec0 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006eb4:	4804      	ldr	r0, [pc, #16]	; (8006ec8 <gpio_stm32_clock_request+0x40>)
 8006eb6:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4798      	blx	r3
 8006ebe:	e7f0      	b.n	8006ea2 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 8006ec0:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8006ec4:	e7ed      	b.n	8006ea2 <gpio_stm32_clock_request+0x1a>
 8006ec6:	bf00      	nop
 8006ec8:	080122d0 	.word	0x080122d0

08006ecc <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <gpio_stm32_enable_int+0x40>)
 8006ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006eda:	ab02      	add	r3, sp, #8
 8006edc:	e903 0003 	stmdb	r3, {r0, r1}
 8006ee0:	480b      	ldr	r0, [pc, #44]	; (8006f10 <gpio_stm32_enable_int+0x44>)
 8006ee2:	f00a f9e7 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006ee6:	b148      	cbz	r0, 8006efc <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8006ee8:	4809      	ldr	r0, [pc, #36]	; (8006f10 <gpio_stm32_enable_int+0x44>)
 8006eea:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4669      	mov	r1, sp
 8006ef0:	4798      	blx	r3
 8006ef2:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8006ef4:	b12c      	cbz	r4, 8006f02 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 8006efc:	f06f 0412 	mvn.w	r4, #18
 8006f00:	e7f8      	b.n	8006ef4 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8006f02:	4629      	mov	r1, r5
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff ff6b 	bl	8006de0 <gpio_stm32_set_exti_source>
	return 0;
 8006f0a:	e7f4      	b.n	8006ef6 <gpio_stm32_enable_int+0x2a>
 8006f0c:	08012840 	.word	0x08012840
 8006f10:	080122d0 	.word	0x080122d0

08006f14 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	460c      	mov	r4, r1
 8006f18:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8006f1a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8006f1c:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8006f1e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006f22:	d01f      	beq.n	8006f64 <gpio_stm32_pin_interrupt_configure+0x50>
 8006f24:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8006f26:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006f2a:	d034      	beq.n	8006f96 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8006f2c:	491d      	ldr	r1, [pc, #116]	; (8006fa4 <gpio_stm32_pin_interrupt_configure+0x90>)
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f7fe ff4a 	bl	8005dc8 <stm32_exti_set_callback>
 8006f34:	4606      	mov	r6, r0
 8006f36:	bb88      	cbnz	r0, 8006f9c <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8006f38:	4621      	mov	r1, r4
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f7ff ffc6 	bl	8006ecc <gpio_stm32_enable_int>

	switch (trig) {
 8006f40:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8006f44:	d023      	beq.n	8006f8e <gpio_stm32_pin_interrupt_configure+0x7a>
 8006f46:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8006f4a:	d022      	beq.n	8006f92 <gpio_stm32_pin_interrupt_configure+0x7e>
 8006f4c:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8006f50:	d01b      	beq.n	8006f8a <gpio_stm32_pin_interrupt_configure+0x76>
 8006f52:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7fe feff 	bl	8005d58 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7fe fee0 	bl	8005d20 <stm32_exti_enable>

exit:
	return err;
}
 8006f60:	4630      	mov	r0, r6
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7ff ff69 	bl	8006e3c <gpio_stm32_get_exti_source>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4298      	cmp	r0, r3
 8006f6e:	d001      	beq.n	8006f74 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8006f70:	2600      	movs	r6, #0
		goto exit;
 8006f72:	e7f5      	b.n	8006f60 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7fe fee3 	bl	8005d40 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7fe ff36 	bl	8005dec <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006f80:	2100      	movs	r1, #0
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7fe fee8 	bl	8005d58 <stm32_exti_trigger>
 8006f88:	e7f2      	b.n	8006f70 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	e7e2      	b.n	8006f54 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8006f8e:	2101      	movs	r1, #1
 8006f90:	e7e0      	b.n	8006f54 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8006f92:	2103      	movs	r1, #3
 8006f94:	e7de      	b.n	8006f54 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8006f96:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8006f9a:	e7e1      	b.n	8006f60 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8006f9c:	f06f 060f 	mvn.w	r6, #15
	return err;
 8006fa0:	e7de      	b.n	8006f60 <gpio_stm32_pin_interrupt_configure+0x4c>
 8006fa2:	bf00      	nop
 8006fa4:	08010167 	.word	0x08010167

08006fa8 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8006fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	b0a4      	sub	sp, #144	; 0x90
 8006fae:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
	const struct pwm_stm32_config *cfg = dev->config;
 8006fb2:	6846      	ldr	r6, [r0, #4]

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8006fb4:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 8006fb8:	f1b9 0f05 	cmp.w	r9, #5
 8006fbc:	d851      	bhi.n	8007062 <pwm_stm32_pin_set+0xba>
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	461d      	mov	r5, r3
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d373      	bcc.n	80070ae <pwm_stm32_pin_set+0x106>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8006fc6:	f8d6 8000 	ldr.w	r8, [r6]
 8006fca:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 8006fce:	d003      	beq.n	8006fd8 <pwm_stm32_pin_set+0x30>
 8006fd0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006fd4:	f200 811f 	bhi.w	8007216 <pwm_stm32_pin_set+0x26e>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	channel = ch2ll[pwm - 1u];
 8006fd8:	4b90      	ldr	r3, [pc, #576]	; (800721c <pwm_stm32_pin_set+0x274>)
 8006fda:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]

	if (period_cycles == 0u) {
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	f000 808a 	beq.w	80070f8 <pwm_stm32_pin_set+0x150>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006fe4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006fe8:	ea37 0303 	bics.w	r3, r7, r3
 8006fec:	f000 808c 	beq.w	8007108 <pwm_stm32_pin_set+0x160>
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, channel)) {
		LL_TIM_OC_InitTypeDef oc_init;

		LL_TIM_OC_StructInit(&oc_init);
 8006ff0:	a802      	add	r0, sp, #8
 8006ff2:	f00a f8be 	bl	8011172 <LL_TIM_OC_StructInit>

		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 8006ff6:	2360      	movs	r3, #96	; 0x60
 8006ff8:	9302      	str	r3, [sp, #8]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	9303      	str	r3, [sp, #12]
		oc_init.CompareValue = pulse_cycles;
 8006ffe:	9505      	str	r5, [sp, #20]
		oc_init.OCPolarity = get_polarity(flags);
 8007000:	4650      	mov	r0, sl
 8007002:	f009 fa4a 	bl	801049a <get_polarity>
 8007006:	9006      	str	r0, [sp, #24]
			LL_TIM_SetTriggerInput(cfg->timer, LL_TIM_TS_ITR0);
			LL_TIM_DisableMasterSlaveMode(cfg->timer);
		}
#endif /* CONFIG_PWM_CAPTURE */

		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8007008:	aa02      	add	r2, sp, #8
 800700a:	4639      	mov	r1, r7
 800700c:	6830      	ldr	r0, [r6, #0]
 800700e:	f00a f8ba 	bl	8011186 <LL_TIM_OC_Init>
 8007012:	4601      	mov	r1, r0
 8007014:	2800      	cmp	r0, #0
 8007016:	f040 80b6 	bne.w	8007186 <pwm_stm32_pin_set+0x1de>
			LOG_ERR("Could not initialize timer channel output");
			return -EIO;
		}

		LL_TIM_EnableARRPreload(cfg->timer);
 800701a:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800701c:	6813      	ldr	r3, [r2, #0]
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 8007024:	6833      	ldr	r3, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007026:	2f01      	cmp	r7, #1
 8007028:	f000 80d5 	beq.w	80071d6 <pwm_stm32_pin_set+0x22e>
 800702c:	2f04      	cmp	r7, #4
 800702e:	f000 80d1 	beq.w	80071d4 <pwm_stm32_pin_set+0x22c>
 8007032:	2f10      	cmp	r7, #16
 8007034:	f000 80e5 	beq.w	8007202 <pwm_stm32_pin_set+0x25a>
 8007038:	2f40      	cmp	r7, #64	; 0x40
 800703a:	f000 80e4 	beq.w	8007206 <pwm_stm32_pin_set+0x25e>
 800703e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8007042:	f000 80e2 	beq.w	800720a <pwm_stm32_pin_set+0x262>
 8007046:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800704a:	f000 80e0 	beq.w	800720e <pwm_stm32_pin_set+0x266>
 800704e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8007052:	f000 80de 	beq.w	8007212 <pwm_stm32_pin_set+0x26a>
 8007056:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 800705a:	f000 80b9 	beq.w	80071d0 <pwm_stm32_pin_set+0x228>
 800705e:	2108      	movs	r1, #8
 8007060:	e0b9      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
		LOG_ERR("Invalid channel (%d)", pwm);
 8007062:	2201      	movs	r2, #1
 8007064:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8007068:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <pwm_stm32_pin_set+0x278>)
 800706a:	9322      	str	r3, [sp, #136]	; 0x88
 800706c:	9123      	str	r1, [sp, #140]	; 0x8c
 800706e:	2300      	movs	r3, #0
 8007070:	9302      	str	r3, [sp, #8]
 8007072:	2103      	movs	r1, #3
 8007074:	f88d 1008 	strb.w	r1, [sp, #8]
 8007078:	9902      	ldr	r1, [sp, #8]
 800707a:	9121      	str	r1, [sp, #132]	; 0x84
 800707c:	4619      	mov	r1, r3
 800707e:	f363 0100 	bfi	r1, r3, #0, #1
 8007082:	f363 0141 	bfi	r1, r3, #1, #1
 8007086:	f363 0182 	bfi	r1, r3, #2, #1
 800708a:	f363 01c5 	bfi	r1, r3, #3, #3
 800708e:	f362 1188 	bfi	r1, r2, #6, #3
 8007092:	220c      	movs	r2, #12
 8007094:	f362 2152 	bfi	r1, r2, #9, #10
 8007098:	f363 41de 	bfi	r1, r3, #19, #12
 800709c:	f363 71df 	bfi	r1, r3, #31, #1
 80070a0:	aa21      	add	r2, sp, #132	; 0x84
 80070a2:	4860      	ldr	r0, [pc, #384]	; (8007224 <pwm_stm32_pin_set+0x27c>)
 80070a4:	f008 fcca 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80070a8:	f06f 0015 	mvn.w	r0, #21
 80070ac:	e0a6      	b.n	80071fc <pwm_stm32_pin_set+0x254>
		LOG_ERR("Invalid combination of pulse and period cycles");
 80070ae:	2201      	movs	r2, #1
 80070b0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80070b4:	4b5c      	ldr	r3, [pc, #368]	; (8007228 <pwm_stm32_pin_set+0x280>)
 80070b6:	931c      	str	r3, [sp, #112]	; 0x70
 80070b8:	2300      	movs	r3, #0
 80070ba:	9302      	str	r3, [sp, #8]
 80070bc:	2102      	movs	r1, #2
 80070be:	f88d 1008 	strb.w	r1, [sp, #8]
 80070c2:	9902      	ldr	r1, [sp, #8]
 80070c4:	911b      	str	r1, [sp, #108]	; 0x6c
 80070c6:	4619      	mov	r1, r3
 80070c8:	f363 0100 	bfi	r1, r3, #0, #1
 80070cc:	f363 0141 	bfi	r1, r3, #1, #1
 80070d0:	f363 0182 	bfi	r1, r3, #2, #1
 80070d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80070d8:	f362 1188 	bfi	r1, r2, #6, #3
 80070dc:	2208      	movs	r2, #8
 80070de:	f362 2152 	bfi	r1, r2, #9, #10
 80070e2:	f363 41de 	bfi	r1, r3, #19, #12
 80070e6:	f363 71df 	bfi	r1, r3, #31, #1
 80070ea:	aa1b      	add	r2, sp, #108	; 0x6c
 80070ec:	484d      	ldr	r0, [pc, #308]	; (8007224 <pwm_stm32_pin_set+0x27c>)
 80070ee:	f008 fca5 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80070f2:	f06f 0015 	mvn.w	r0, #21
 80070f6:	e081      	b.n	80071fc <pwm_stm32_pin_set+0x254>
  CLEAR_BIT(TIMx->CCER, Channels);
 80070f8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80070fc:	ea23 0707 	bic.w	r7, r3, r7
 8007100:	f8c8 7020 	str.w	r7, [r8, #32]
		return 0;
 8007104:	2000      	movs	r0, #0
 8007106:	e079      	b.n	80071fc <pwm_stm32_pin_set+0x254>
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
 8007108:	4650      	mov	r0, sl
 800710a:	f009 f9c6 	bl	801049a <get_polarity>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800710e:	2f01      	cmp	r7, #1
 8007110:	d015      	beq.n	800713e <pwm_stm32_pin_set+0x196>
 8007112:	2f04      	cmp	r7, #4
 8007114:	d02b      	beq.n	800716e <pwm_stm32_pin_set+0x1c6>
 8007116:	2f10      	cmp	r7, #16
 8007118:	d02b      	beq.n	8007172 <pwm_stm32_pin_set+0x1ca>
 800711a:	2f40      	cmp	r7, #64	; 0x40
 800711c:	d02b      	beq.n	8007176 <pwm_stm32_pin_set+0x1ce>
 800711e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8007122:	d02a      	beq.n	800717a <pwm_stm32_pin_set+0x1d2>
 8007124:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8007128:	d029      	beq.n	800717e <pwm_stm32_pin_set+0x1d6>
 800712a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800712e:	d028      	beq.n	8007182 <pwm_stm32_pin_set+0x1da>
 8007130:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8007134:	d001      	beq.n	800713a <pwm_stm32_pin_set+0x192>
 8007136:	2108      	movs	r1, #8
 8007138:	e002      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 800713a:	2107      	movs	r1, #7
 800713c:	e000      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 800713e:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8007140:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007144:	4a39      	ldr	r2, [pc, #228]	; (800722c <pwm_stm32_pin_set+0x284>)
 8007146:	5c51      	ldrb	r1, [r2, r1]
 8007148:	2202      	movs	r2, #2
 800714a:	408a      	lsls	r2, r1
 800714c:	ea23 0302 	bic.w	r3, r3, r2
 8007150:	4088      	lsls	r0, r1
 8007152:	4303      	orrs	r3, r0
 8007154:	f8c8 3020 	str.w	r3, [r8, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8007158:	4b35      	ldr	r3, [pc, #212]	; (8007230 <pwm_stm32_pin_set+0x288>)
 800715a:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800715e:	4629      	mov	r1, r5
 8007160:	6830      	ldr	r0, [r6, #0]
 8007162:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8007164:	6833      	ldr	r3, [r6, #0]
 8007166:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8007168:	62dc      	str	r4, [r3, #44]	; 0x2c
	}

	return 0;
 800716a:	2000      	movs	r0, #0
}
 800716c:	e046      	b.n	80071fc <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800716e:	2101      	movs	r1, #1
 8007170:	e7e6      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 8007172:	2102      	movs	r1, #2
 8007174:	e7e4      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 8007176:	2103      	movs	r1, #3
 8007178:	e7e2      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 800717a:	2104      	movs	r1, #4
 800717c:	e7e0      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 800717e:	2105      	movs	r1, #5
 8007180:	e7de      	b.n	8007140 <pwm_stm32_pin_set+0x198>
 8007182:	2106      	movs	r1, #6
 8007184:	e7dc      	b.n	8007140 <pwm_stm32_pin_set+0x198>
			LOG_ERR("Could not initialize timer channel output");
 8007186:	2201      	movs	r2, #1
 8007188:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800718c:	4b29      	ldr	r3, [pc, #164]	; (8007234 <pwm_stm32_pin_set+0x28c>)
 800718e:	9316      	str	r3, [sp, #88]	; 0x58
 8007190:	2300      	movs	r3, #0
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	2102      	movs	r1, #2
 8007196:	f88d 1004 	strb.w	r1, [sp, #4]
 800719a:	9901      	ldr	r1, [sp, #4]
 800719c:	9115      	str	r1, [sp, #84]	; 0x54
 800719e:	4619      	mov	r1, r3
 80071a0:	f363 0100 	bfi	r1, r3, #0, #1
 80071a4:	f363 0141 	bfi	r1, r3, #1, #1
 80071a8:	f363 0182 	bfi	r1, r3, #2, #1
 80071ac:	f363 01c5 	bfi	r1, r3, #3, #3
 80071b0:	f362 1188 	bfi	r1, r2, #6, #3
 80071b4:	2208      	movs	r2, #8
 80071b6:	f362 2152 	bfi	r1, r2, #9, #10
 80071ba:	f363 41de 	bfi	r1, r3, #19, #12
 80071be:	f363 71df 	bfi	r1, r3, #31, #1
 80071c2:	aa15      	add	r2, sp, #84	; 0x54
 80071c4:	4817      	ldr	r0, [pc, #92]	; (8007224 <pwm_stm32_pin_set+0x27c>)
 80071c6:	f008 fc39 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			return -EIO;
 80071ca:	f06f 0004 	mvn.w	r0, #4
 80071ce:	e015      	b.n	80071fc <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80071d0:	2107      	movs	r1, #7
 80071d2:	e000      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
 80071d4:	2101      	movs	r1, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80071d6:	3318      	adds	r3, #24
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <pwm_stm32_pin_set+0x290>)
 80071da:	5c50      	ldrb	r0, [r2, r1]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80071dc:	581a      	ldr	r2, [r3, r0]
 80071de:	4d17      	ldr	r5, [pc, #92]	; (800723c <pwm_stm32_pin_set+0x294>)
 80071e0:	5c6d      	ldrb	r5, [r5, r1]
 80071e2:	2108      	movs	r1, #8
 80071e4:	40a9      	lsls	r1, r5
 80071e6:	430a      	orrs	r2, r1
 80071e8:	501a      	str	r2, [r3, r0]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80071ea:	6833      	ldr	r3, [r6, #0]
 80071ec:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80071ee:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 80071f0:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80071f2:	6953      	ldr	r3, [r2, #20]
 80071f4:	f043 0301 	orr.w	r3, r3, #1
 80071f8:	6153      	str	r3, [r2, #20]
	return 0;
 80071fa:	2000      	movs	r0, #0
}
 80071fc:	b024      	add	sp, #144	; 0x90
 80071fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8007202:	2102      	movs	r1, #2
 8007204:	e7e7      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
 8007206:	2103      	movs	r1, #3
 8007208:	e7e5      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
 800720a:	2104      	movs	r1, #4
 800720c:	e7e3      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
 800720e:	2105      	movs	r1, #5
 8007210:	e7e1      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
 8007212:	2106      	movs	r1, #6
 8007214:	e7df      	b.n	80071d6 <pwm_stm32_pin_set+0x22e>
		return -ENOTSUP;
 8007216:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800721a:	e7ef      	b.n	80071fc <pwm_stm32_pin_set+0x254>
 800721c:	080135d0 	.word	0x080135d0
 8007220:	08013484 	.word	0x08013484
 8007224:	08012738 	.word	0x08012738
 8007228:	0801349c 	.word	0x0801349c
 800722c:	08013598 	.word	0x08013598
 8007230:	08013604 	.word	0x08013604
 8007234:	080134cc 	.word	0x080134cc
 8007238:	0801358c 	.word	0x0801358c
 800723c:	080135a4 	.word	0x080135a4

08007240 <get_tim_clk>:
{
 8007240:	b530      	push	{r4, r5, lr}
 8007242:	b083      	sub	sp, #12
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	480c      	ldr	r0, [pc, #48]	; (800727c <get_tim_clk+0x3c>)
 800724a:	f00a f833 	bl	80112b4 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 800724e:	b170      	cbz	r0, 800726e <get_tim_clk+0x2e>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <get_tim_clk+0x3c>)
 8007252:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	b16b      	cbz	r3, 8007274 <get_tim_clk+0x34>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8007258:	aa01      	add	r2, sp, #4
 800725a:	4621      	mov	r1, r4
 800725c:	4807      	ldr	r0, [pc, #28]	; (800727c <get_tim_clk+0x3c>)
 800725e:	4798      	blx	r3
	if (r < 0) {
 8007260:	2800      	cmp	r0, #0
 8007262:	db02      	blt.n	800726a <get_tim_clk+0x2a>
		*tim_clk = bus_clk;
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	602b      	str	r3, [r5, #0]
	return 0;
 8007268:	2000      	movs	r0, #0
}
 800726a:	b003      	add	sp, #12
 800726c:	bd30      	pop	{r4, r5, pc}
		return -ENODEV;
 800726e:	f06f 0012 	mvn.w	r0, #18
 8007272:	e7f5      	b.n	8007260 <get_tim_clk+0x20>
		return -ENOSYS;
 8007274:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007278:	e7f2      	b.n	8007260 <get_tim_clk+0x20>
 800727a:	bf00      	nop
 800727c:	080122d0 	.word	0x080122d0

08007280 <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8007280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007282:	b0a7      	sub	sp, #156	; 0x9c
	struct pwm_stm32_data *data = dev->data;
 8007284:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 8007286:	6845      	ldr	r5, [r0, #4]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 8007288:	f105 0608 	add.w	r6, r5, #8
 800728c:	4870      	ldr	r0, [pc, #448]	; (8007450 <pwm_stm32_init+0x1d0>)
 800728e:	f00a f811 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007292:	2800      	cmp	r0, #0
 8007294:	d047      	beq.n	8007326 <pwm_stm32_init+0xa6>
	const struct clock_control_driver_api *api =
 8007296:	486e      	ldr	r0, [pc, #440]	; (8007450 <pwm_stm32_init+0x1d0>)
 8007298:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4631      	mov	r1, r6
 800729e:	4798      	blx	r3
 80072a0:	4604      	mov	r4, r0
	if (r < 0) {
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	db42      	blt.n	800732c <pwm_stm32_init+0xac>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
 80072a6:	4639      	mov	r1, r7
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff ffc9 	bl	8007240 <get_tim_clk>
	if (r < 0) {
 80072ae:	1e04      	subs	r4, r0, #0
 80072b0:	db60      	blt.n	8007374 <pwm_stm32_init+0xf4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80072b2:	aa01      	add	r2, sp, #4
 80072b4:	2100      	movs	r1, #0
 80072b6:	6928      	ldr	r0, [r5, #16]
 80072b8:	f009 ff01 	bl	80110be <pinctrl_lookup_state>
	if (ret < 0) {
 80072bc:	1e04      	subs	r4, r0, #0
 80072be:	db06      	blt.n	80072ce <pwm_stm32_init+0x4e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80072c0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80072c2:	2200      	movs	r2, #0
 80072c4:	7919      	ldrb	r1, [r3, #4]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	f009 ff13 	bl	80110f2 <pinctrl_configure_pins>
 80072cc:	4604      	mov	r4, r0
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	db74      	blt.n	80073bc <pwm_stm32_init+0x13c>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 80072d2:	a809      	add	r0, sp, #36	; 0x24
 80072d4:	f009 ff44 	bl	8011160 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 80072d8:	686b      	ldr	r3, [r5, #4]
 80072da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 80072de:	2300      	movs	r3, #0
 80072e0:	930a      	str	r3, [sp, #40]	; 0x28
	init.Autoreload = 0u;
 80072e2:	930b      	str	r3, [sp, #44]	; 0x2c
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80072e4:	930c      	str	r3, [sp, #48]	; 0x30

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 80072e6:	a909      	add	r1, sp, #36	; 0x24
 80072e8:	6828      	ldr	r0, [r5, #0]
 80072ea:	f004 f91b 	bl	800b524 <LL_TIM_Init>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f040 8088 	bne.w	8007404 <pwm_stm32_init+0x184>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	4a57      	ldr	r2, [pc, #348]	; (8007454 <pwm_stm32_init+0x1d4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <pwm_stm32_init+0x8c>
 80072fc:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <pwm_stm32_init+0x8c>
 8007304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007308:	4293      	cmp	r3, r2
 800730a:	d103      	bne.n	8007314 <pwm_stm32_init+0x94>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800730c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007312:	645a      	str	r2, [r3, #68]	; 0x44
		LL_TIM_EnableAllOutputs(cfg->timer);
	}
#endif

	LL_TIM_EnableCounter(cfg->timer);
 8007314:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6013      	str	r3, [r2, #0]

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 800731e:	2400      	movs	r4, #0
}
 8007320:	4620      	mov	r0, r4
 8007322:	b027      	add	sp, #156	; 0x9c
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 8007326:	f06f 0412 	mvn.w	r4, #18
 800732a:	e7ba      	b.n	80072a2 <pwm_stm32_init+0x22>
		LOG_ERR("Could not initialize clock (%d)", r);
 800732c:	2201      	movs	r2, #1
 800732e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007332:	4b49      	ldr	r3, [pc, #292]	; (8007458 <pwm_stm32_init+0x1d8>)
 8007334:	9324      	str	r3, [sp, #144]	; 0x90
 8007336:	9425      	str	r4, [sp, #148]	; 0x94
 8007338:	2300      	movs	r3, #0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2103      	movs	r1, #3
 800733e:	f88d 1000 	strb.w	r1, [sp]
 8007342:	9900      	ldr	r1, [sp, #0]
 8007344:	9123      	str	r1, [sp, #140]	; 0x8c
 8007346:	4619      	mov	r1, r3
 8007348:	f363 0100 	bfi	r1, r3, #0, #1
 800734c:	f363 0141 	bfi	r1, r3, #1, #1
 8007350:	f363 0182 	bfi	r1, r3, #2, #1
 8007354:	f363 01c5 	bfi	r1, r3, #3, #3
 8007358:	f362 1188 	bfi	r1, r2, #6, #3
 800735c:	220c      	movs	r2, #12
 800735e:	f362 2152 	bfi	r1, r2, #9, #10
 8007362:	f363 41de 	bfi	r1, r3, #19, #12
 8007366:	f363 71df 	bfi	r1, r3, #31, #1
 800736a:	aa23      	add	r2, sp, #140	; 0x8c
 800736c:	483b      	ldr	r0, [pc, #236]	; (800745c <pwm_stm32_init+0x1dc>)
 800736e:	f008 fb65 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return r;
 8007372:	e7d5      	b.n	8007320 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8007374:	2201      	movs	r2, #1
 8007376:	f8ad 2004 	strh.w	r2, [sp, #4]
 800737a:	4b39      	ldr	r3, [pc, #228]	; (8007460 <pwm_stm32_init+0x1e0>)
 800737c:	931e      	str	r3, [sp, #120]	; 0x78
 800737e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007380:	2300      	movs	r3, #0
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2103      	movs	r1, #3
 8007386:	f88d 1000 	strb.w	r1, [sp]
 800738a:	9900      	ldr	r1, [sp, #0]
 800738c:	911d      	str	r1, [sp, #116]	; 0x74
 800738e:	4619      	mov	r1, r3
 8007390:	f363 0100 	bfi	r1, r3, #0, #1
 8007394:	f363 0141 	bfi	r1, r3, #1, #1
 8007398:	f363 0182 	bfi	r1, r3, #2, #1
 800739c:	f363 01c5 	bfi	r1, r3, #3, #3
 80073a0:	f362 1188 	bfi	r1, r2, #6, #3
 80073a4:	220c      	movs	r2, #12
 80073a6:	f362 2152 	bfi	r1, r2, #9, #10
 80073aa:	f363 41de 	bfi	r1, r3, #19, #12
 80073ae:	f363 71df 	bfi	r1, r3, #31, #1
 80073b2:	aa1d      	add	r2, sp, #116	; 0x74
 80073b4:	4829      	ldr	r0, [pc, #164]	; (800745c <pwm_stm32_init+0x1dc>)
 80073b6:	f008 fb41 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return r;
 80073ba:	e7b1      	b.n	8007320 <pwm_stm32_init+0xa0>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 80073bc:	2201      	movs	r2, #1
 80073be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80073c2:	4b28      	ldr	r3, [pc, #160]	; (8007464 <pwm_stm32_init+0x1e4>)
 80073c4:	9318      	str	r3, [sp, #96]	; 0x60
 80073c6:	9419      	str	r4, [sp, #100]	; 0x64
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	2103      	movs	r1, #3
 80073ce:	f88d 1000 	strb.w	r1, [sp]
 80073d2:	9900      	ldr	r1, [sp, #0]
 80073d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073d6:	4619      	mov	r1, r3
 80073d8:	f363 0100 	bfi	r1, r3, #0, #1
 80073dc:	f363 0141 	bfi	r1, r3, #1, #1
 80073e0:	f363 0182 	bfi	r1, r3, #2, #1
 80073e4:	f363 01c5 	bfi	r1, r3, #3, #3
 80073e8:	f362 1188 	bfi	r1, r2, #6, #3
 80073ec:	220c      	movs	r2, #12
 80073ee:	f362 2152 	bfi	r1, r2, #9, #10
 80073f2:	f363 41de 	bfi	r1, r3, #19, #12
 80073f6:	f363 71df 	bfi	r1, r3, #31, #1
 80073fa:	aa17      	add	r2, sp, #92	; 0x5c
 80073fc:	4817      	ldr	r0, [pc, #92]	; (800745c <pwm_stm32_init+0x1dc>)
 80073fe:	f008 fb1d 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return r;
 8007402:	e78d      	b.n	8007320 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not initialize timer");
 8007404:	2201      	movs	r2, #1
 8007406:	f8ad 2004 	strh.w	r2, [sp, #4]
 800740a:	4b17      	ldr	r3, [pc, #92]	; (8007468 <pwm_stm32_init+0x1e8>)
 800740c:	9312      	str	r3, [sp, #72]	; 0x48
 800740e:	2300      	movs	r3, #0
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	2102      	movs	r1, #2
 8007414:	f88d 1000 	strb.w	r1, [sp]
 8007418:	9900      	ldr	r1, [sp, #0]
 800741a:	9111      	str	r1, [sp, #68]	; 0x44
 800741c:	4619      	mov	r1, r3
 800741e:	f363 0100 	bfi	r1, r3, #0, #1
 8007422:	f363 0141 	bfi	r1, r3, #1, #1
 8007426:	f363 0182 	bfi	r1, r3, #2, #1
 800742a:	f363 01c5 	bfi	r1, r3, #3, #3
 800742e:	f362 1188 	bfi	r1, r2, #6, #3
 8007432:	2208      	movs	r2, #8
 8007434:	f362 2152 	bfi	r1, r2, #9, #10
 8007438:	f363 41de 	bfi	r1, r3, #19, #12
 800743c:	f363 71df 	bfi	r1, r3, #31, #1
 8007440:	aa11      	add	r2, sp, #68	; 0x44
 8007442:	4806      	ldr	r0, [pc, #24]	; (800745c <pwm_stm32_init+0x1dc>)
 8007444:	f008 fafa 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007448:	f06f 0404 	mvn.w	r4, #4
 800744c:	e768      	b.n	8007320 <pwm_stm32_init+0xa0>
 800744e:	bf00      	nop
 8007450:	080122d0 	.word	0x080122d0
 8007454:	40012c00 	.word	0x40012c00
 8007458:	080134f8 	.word	0x080134f8
 800745c:	08012738 	.word	0x08012738
 8007460:	08013518 	.word	0x08013518
 8007464:	0801353c 	.word	0x0801353c
 8007468:	0801355c 	.word	0x0801355c

0800746c <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800746c:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 800746e:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 8007472:	d101      	bne.n	8007478 <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 8007474:	2000      	movs	r0, #0
}
 8007476:	4770      	bx	lr
{
 8007478:	b510      	push	{r4, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 800747e:	9303      	str	r3, [sp, #12]
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <spi_stm32_get_err+0x48>)
 8007482:	9302      	str	r3, [sp, #8]
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <spi_stm32_get_err+0x4c>)
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	2000      	movs	r0, #0
 800748a:	9000      	str	r0, [sp, #0]
 800748c:	4603      	mov	r3, r0
 800748e:	2201      	movs	r2, #1
 8007490:	490a      	ldr	r1, [pc, #40]	; (80074bc <spi_stm32_get_err+0x50>)
 8007492:	f009 f81e 	bl	80104d2 <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	f013 0f40 	tst.w	r3, #64	; 0x40
 800749c:	d005      	beq.n	80074aa <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80074a2:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 80074a4:	68a3      	ldr	r3, [r4, #8]
 80074a6:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 80074a8:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 80074aa:	f06f 0004 	mvn.w	r0, #4
}
 80074ae:	b006      	add	sp, #24
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	bf00      	nop
 80074b4:	080137a4 	.word	0x080137a4
 80074b8:	0801361c 	.word	0x0801361c
 80074bc:	08012750 	.word	0x08012750

080074c0 <dma_callback>:
{
 80074c0:	b510      	push	{r4, lr}
 80074c2:	b096      	sub	sp, #88	; 0x58
 80074c4:	460c      	mov	r4, r1
	if (status != 0) {
 80074c6:	b963      	cbnz	r3, 80074e2 <dma_callback+0x22>
		if (channel == data->dma_tx.channel) {
 80074c8:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d035      	beq.n	800753c <dma_callback+0x7c>
		} else if (channel == data->dma_rx.channel) {
 80074d0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d136      	bne.n	8007546 <dma_callback+0x86>
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 80074d8:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 80074da:	f043 0302 	orr.w	r3, r3, #2
 80074de:	67cb      	str	r3, [r1, #124]	; 0x7c
 80074e0:	e026      	b.n	8007530 <dma_callback+0x70>
		LOG_ERR("DMA callback error with channel %d.", channel);
 80074e2:	2001      	movs	r0, #1
 80074e4:	f8ad 0008 	strh.w	r0, [sp, #8]
 80074e8:	4b2b      	ldr	r3, [pc, #172]	; (8007598 <dma_callback+0xd8>)
 80074ea:	9314      	str	r3, [sp, #80]	; 0x50
 80074ec:	9215      	str	r2, [sp, #84]	; 0x54
 80074ee:	2300      	movs	r3, #0
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	2203      	movs	r2, #3
 80074f4:	f88d 2004 	strb.w	r2, [sp, #4]
 80074f8:	9a01      	ldr	r2, [sp, #4]
 80074fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80074fc:	4619      	mov	r1, r3
 80074fe:	f363 0100 	bfi	r1, r3, #0, #1
 8007502:	f363 0141 	bfi	r1, r3, #1, #1
 8007506:	f363 0182 	bfi	r1, r3, #2, #1
 800750a:	f363 01c5 	bfi	r1, r3, #3, #3
 800750e:	f360 1188 	bfi	r1, r0, #6, #3
 8007512:	220c      	movs	r2, #12
 8007514:	f362 2152 	bfi	r1, r2, #9, #10
 8007518:	f363 41de 	bfi	r1, r3, #19, #12
 800751c:	f363 71df 	bfi	r1, r3, #31, #1
 8007520:	aa13      	add	r2, sp, #76	; 0x4c
 8007522:	481e      	ldr	r0, [pc, #120]	; (800759c <dma_callback+0xdc>)
 8007524:	f008 fa8a 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8007528:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	67e3      	str	r3, [r4, #124]	; 0x7c
	k_sem_give(&data->status_sem);
 8007530:	f104 0064 	add.w	r0, r4, #100	; 0x64
	z_impl_k_sem_give(sem);
 8007534:	f004 ff66 	bl	800c404 <z_impl_k_sem_give>
}
 8007538:	b016      	add	sp, #88	; 0x58
 800753a:	bd10      	pop	{r4, pc}
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 800753c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800753e:	f043 0304 	orr.w	r3, r3, #4
 8007542:	67cb      	str	r3, [r1, #124]	; 0x7c
 8007544:	e7f4      	b.n	8007530 <dma_callback+0x70>
			LOG_ERR("DMA callback channel %d is not valid.",
 8007546:	2001      	movs	r0, #1
 8007548:	f8ad 0008 	strh.w	r0, [sp, #8]
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <dma_callback+0xe0>)
 800754e:	930e      	str	r3, [sp, #56]	; 0x38
 8007550:	920f      	str	r2, [sp, #60]	; 0x3c
 8007552:	2300      	movs	r3, #0
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	2203      	movs	r2, #3
 8007558:	f88d 2004 	strb.w	r2, [sp, #4]
 800755c:	9a01      	ldr	r2, [sp, #4]
 800755e:	920d      	str	r2, [sp, #52]	; 0x34
 8007560:	4619      	mov	r1, r3
 8007562:	f363 0100 	bfi	r1, r3, #0, #1
 8007566:	f363 0141 	bfi	r1, r3, #1, #1
 800756a:	f363 0182 	bfi	r1, r3, #2, #1
 800756e:	f363 01c5 	bfi	r1, r3, #3, #3
 8007572:	f360 1188 	bfi	r1, r0, #6, #3
 8007576:	220c      	movs	r2, #12
 8007578:	f362 2152 	bfi	r1, r2, #9, #10
 800757c:	f363 41de 	bfi	r1, r3, #19, #12
 8007580:	f363 71df 	bfi	r1, r3, #31, #1
 8007584:	aa0d      	add	r2, sp, #52	; 0x34
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <dma_callback+0xdc>)
 8007588:	f008 fa58 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 800758c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	67e3      	str	r3, [r4, #124]	; 0x7c
 8007594:	e7cc      	b.n	8007530 <dma_callback+0x70>
 8007596:	bf00      	nop
 8007598:	08013628 	.word	0x08013628
 800759c:	08012750 	.word	0x08012750
 80075a0:	0801364c 	.word	0x0801364c

080075a4 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	b098      	sub	sp, #96	; 0x60
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 80075ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 80075b2:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 80075b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80075b8:	f8df c298 	ldr.w	ip, [pc, #664]	; 8007854 <spi_stm32_configure+0x2b0>
 80075bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80075c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075c2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80075c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 80075ca:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 80075ce:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 80075d0:	42ab      	cmp	r3, r5
 80075d2:	f000 8139 	beq.w	8007848 <spi_stm32_configure+0x2a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80075d6:	88ab      	ldrh	r3, [r5, #4]
 80075d8:	f3c3 1245 	ubfx	r2, r3, #5, #6
 80075dc:	2a08      	cmp	r2, #8
 80075de:	d002      	beq.n	80075e6 <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80075e0:	2a10      	cmp	r2, #16
 80075e2:	f040 8133 	bne.w	800784c <spi_stm32_configure+0x2a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 80075e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80075ea:	d11c      	bne.n	8007626 <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	6063      	str	r3, [r4, #4]
 80075f4:	4898      	ldr	r0, [pc, #608]	; (8007858 <spi_stm32_configure+0x2b4>)
 80075f6:	f009 fe5d 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80075fa:	b1c8      	cbz	r0, 8007630 <spi_stm32_configure+0x8c>
	const struct clock_control_driver_api *api =
 80075fc:	4b96      	ldr	r3, [pc, #600]	; (8007858 <spi_stm32_configure+0x2b4>)
 80075fe:	689b      	ldr	r3, [r3, #8]
	if (api->get_rate == NULL) {
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	b1c3      	cbz	r3, 8007636 <spi_stm32_configure+0x92>
	return api->get_rate(dev, sys, rate);
 8007604:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007608:	4641      	mov	r1, r8
 800760a:	4893      	ldr	r0, [pc, #588]	; (8007858 <spi_stm32_configure+0x2b4>)
 800760c:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800760e:	2800      	cmp	r0, #0
 8007610:	db14      	blt.n	800763c <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8007612:	2301      	movs	r3, #1
 8007614:	2b08      	cmp	r3, #8
 8007616:	dc35      	bgt.n	8007684 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 8007618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761a:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	4291      	cmp	r1, r2
 8007620:	d230      	bcs.n	8007684 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8007622:	3301      	adds	r3, #1
 8007624:	e7f6      	b.n	8007614 <spi_stm32_configure+0x70>
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	f043 0310 	orr.w	r3, r3, #16
 800762c:	6063      	str	r3, [r4, #4]
}
 800762e:	e7e1      	b.n	80075f4 <spi_stm32_configure+0x50>
		return -ENODEV;
 8007630:	f06f 0012 	mvn.w	r0, #18
 8007634:	e7eb      	b.n	800760e <spi_stm32_configure+0x6a>
		return -ENOSYS;
 8007636:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800763a:	e7e8      	b.n	800760e <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 800763c:	2201      	movs	r2, #1
 800763e:	80ba      	strh	r2, [r7, #4]
 8007640:	4b86      	ldr	r3, [pc, #536]	; (800785c <spi_stm32_configure+0x2b8>)
 8007642:	65bb      	str	r3, [r7, #88]	; 0x58
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	2102      	movs	r1, #2
 800764a:	7039      	strb	r1, [r7, #0]
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6579      	str	r1, [r7, #84]	; 0x54
 8007650:	4619      	mov	r1, r3
 8007652:	f363 0100 	bfi	r1, r3, #0, #1
 8007656:	f363 0141 	bfi	r1, r3, #1, #1
 800765a:	f363 0182 	bfi	r1, r3, #2, #1
 800765e:	f363 01c5 	bfi	r1, r3, #3, #3
 8007662:	f362 1188 	bfi	r1, r2, #6, #3
 8007666:	2208      	movs	r2, #8
 8007668:	f362 2152 	bfi	r1, r2, #9, #10
 800766c:	f363 41de 	bfi	r1, r3, #19, #12
 8007670:	f363 71df 	bfi	r1, r3, #31, #1
 8007674:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007678:	4879      	ldr	r0, [pc, #484]	; (8007860 <spi_stm32_configure+0x2bc>)
 800767a:	f008 f9df 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 800767e:	f06f 0004 	mvn.w	r0, #4
 8007682:	e059      	b.n	8007738 <spi_stm32_configure+0x194>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8007684:	2b08      	cmp	r3, #8
 8007686:	dc5b      	bgt.n	8007740 <spi_stm32_configure+0x19c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768e:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8007690:	3b01      	subs	r3, #1
 8007692:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007696:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800769a:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80076a4:	4313      	orrs	r3, r2
 80076a6:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80076a8:	88ab      	ldrh	r3, [r5, #4]
 80076aa:	f013 0f02 	tst.w	r3, #2
 80076ae:	f000 8098 	beq.w	80077e2 <spi_stm32_configure+0x23e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80076ba:	88ab      	ldrh	r3, [r5, #4]
 80076bc:	f013 0f04 	tst.w	r3, #4
 80076c0:	f000 8094 	beq.w	80077ec <spi_stm32_configure+0x248>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 80076d2:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 80076d4:	88ab      	ldrh	r3, [r5, #4]
 80076d6:	f013 0f10 	tst.w	r3, #16
 80076da:	f000 808c 	beq.w	80077f6 <spi_stm32_configure+0x252>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e4:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ec:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 80076ee:	68ab      	ldr	r3, [r5, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8085 	beq.w	8007800 <spi_stm32_configure+0x25c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076fc:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	f023 0304 	bic.w	r3, r3, #4
 8007704:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8007706:	88ab      	ldrh	r3, [r5, #4]
 8007708:	f013 0f01 	tst.w	r3, #1
 800770c:	f000 8090 	beq.w	8007830 <spi_stm32_configure+0x28c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8007716:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8007718:	88ab      	ldrh	r3, [r5, #4]
 800771a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800771e:	2b08      	cmp	r3, #8
 8007720:	f000 808b 	beq.w	800783a <spi_stm32_configure+0x296>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800772a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007732:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8007734:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8007736:	2000      	movs	r0, #0
}
 8007738:	3760      	adds	r7, #96	; 0x60
 800773a:	46bd      	mov	sp, r7
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8007740:	2301      	movs	r3, #1
 8007742:	80bb      	strh	r3, [r7, #4]
 8007744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007746:	fa20 f603 	lsr.w	r6, r0, r3
 800774a:	0a00      	lsrs	r0, r0, #8
 800774c:	466c      	mov	r4, sp
 800774e:	b088      	sub	sp, #32
 8007750:	466b      	mov	r3, sp
 8007752:	f113 020c 	adds.w	r2, r3, #12
 8007756:	d03e      	beq.n	80077d6 <spi_stm32_configure+0x232>
 8007758:	2114      	movs	r1, #20
 800775a:	f04f 0c01 	mov.w	ip, #1
 800775e:	f8a7 c004 	strh.w	ip, [r7, #4]
 8007762:	b12a      	cbz	r2, 8007770 <spi_stm32_configure+0x1cc>
 8007764:	2904      	cmp	r1, #4
 8007766:	dd03      	ble.n	8007770 <spi_stm32_configure+0x1cc>
 8007768:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8007864 <spi_stm32_configure+0x2c0>
 800776c:	f8c3 c010 	str.w	ip, [r3, #16]
 8007770:	682d      	ldr	r5, [r5, #0]
 8007772:	b112      	cbz	r2, 800777a <spi_stm32_configure+0x1d6>
 8007774:	2908      	cmp	r1, #8
 8007776:	dd00      	ble.n	800777a <spi_stm32_configure+0x1d6>
 8007778:	615d      	str	r5, [r3, #20]
 800777a:	b112      	cbz	r2, 8007782 <spi_stm32_configure+0x1de>
 800777c:	290c      	cmp	r1, #12
 800777e:	dd00      	ble.n	8007782 <spi_stm32_configure+0x1de>
 8007780:	619e      	str	r6, [r3, #24]
 8007782:	b112      	cbz	r2, 800778a <spi_stm32_configure+0x1e6>
 8007784:	2910      	cmp	r1, #16
 8007786:	dd00      	ble.n	800778a <spi_stm32_configure+0x1e6>
 8007788:	61d8      	str	r0, [r3, #28]
 800778a:	2913      	cmp	r1, #19
 800778c:	dd26      	ble.n	80077dc <spi_stm32_configure+0x238>
 800778e:	2014      	movs	r0, #20
 8007790:	b12a      	cbz	r2, 800779e <spi_stm32_configure+0x1fa>
 8007792:	2100      	movs	r1, #0
 8007794:	6039      	str	r1, [r7, #0]
 8007796:	2105      	movs	r1, #5
 8007798:	7039      	strb	r1, [r7, #0]
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	60d9      	str	r1, [r3, #12]
 800779e:	2100      	movs	r1, #0
 80077a0:	f36f 0100 	bfc	r1, #0, #1
 80077a4:	f36f 0141 	bfc	r1, #1, #1
 80077a8:	f36f 0182 	bfc	r1, #2, #1
 80077ac:	f36f 01c5 	bfc	r1, #3, #3
 80077b0:	2301      	movs	r3, #1
 80077b2:	f363 1188 	bfi	r1, r3, #6, #3
 80077b6:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 80077ba:	f360 2152 	bfi	r1, r0, #9, #10
 80077be:	f36f 41de 	bfc	r1, #19, #12
 80077c2:	f36f 71df 	bfc	r1, #31, #1
 80077c6:	2300      	movs	r3, #0
 80077c8:	4825      	ldr	r0, [pc, #148]	; (8007860 <spi_stm32_configure+0x2bc>)
 80077ca:	f008 f937 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 80077ce:	46a5      	mov	sp, r4
		return -EINVAL;
 80077d0:	f06f 0015 	mvn.w	r0, #21
 80077d4:	e7b0      	b.n	8007738 <spi_stm32_configure+0x194>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80077d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077da:	e7be      	b.n	800775a <spi_stm32_configure+0x1b6>
 80077dc:	f06f 001b 	mvn.w	r0, #27
 80077e0:	e7d6      	b.n	8007790 <spi_stm32_configure+0x1ec>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	f023 0302 	bic.w	r3, r3, #2
 80077e8:	6023      	str	r3, [r4, #0]
}
 80077ea:	e766      	b.n	80076ba <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	6023      	str	r3, [r4, #0]
}
 80077f4:	e76a      	b.n	80076cc <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fc:	6023      	str	r3, [r4, #0]
}
 80077fe:	e772      	b.n	80076e6 <spi_stm32_configure+0x142>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8007800:	88ab      	ldrh	r3, [r5, #4]
 8007802:	f013 0f01 	tst.w	r3, #1
 8007806:	d008      	beq.n	800781a <spi_stm32_configure+0x276>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800780e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8007810:	6863      	ldr	r3, [r4, #4]
 8007812:	f023 0304 	bic.w	r3, r3, #4
 8007816:	6063      	str	r3, [r4, #4]
}
 8007818:	e775      	b.n	8007706 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007824:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	f043 0304 	orr.w	r3, r3, #4
 800782c:	6063      	str	r3, [r4, #4]
}
 800782e:	e76a      	b.n	8007706 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8007836:	6023      	str	r3, [r4, #0]
}
 8007838:	e76e      	b.n	8007718 <spi_stm32_configure+0x174>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007840:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007844:	6063      	str	r3, [r4, #4]
}
 8007846:	e771      	b.n	800772c <spi_stm32_configure+0x188>
		return 0;
 8007848:	2000      	movs	r0, #0
 800784a:	e775      	b.n	8007738 <spi_stm32_configure+0x194>
		return -ENOTSUP;
 800784c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007850:	e772      	b.n	8007738 <spi_stm32_configure+0x194>
 8007852:	bf00      	nop
 8007854:	08012848 	.word	0x08012848
 8007858:	080122d0 	.word	0x080122d0
 800785c:	08013674 	.word	0x08013674
 8007860:	08012750 	.word	0x08012750
 8007864:	08013698 	.word	0x08013698

08007868 <spi_stm32_dma_rx_load>:
{
 8007868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786c:	460d      	mov	r5, r1
 800786e:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 8007870:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8007874:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 8007876:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800787a:	2220      	movs	r2, #32
 800787c:	2100      	movs	r1, #0
 800787e:	4638      	mov	r0, r7
 8007880:	f00a f98d 	bl	8011b9e <memset>
	blk_cfg->block_size = len;
 8007884:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
	if (buf == NULL) {
 8007888:	2d00      	cmp	r5, #0
 800788a:	d038      	beq.n	80078fe <spi_stm32_dma_rx_load+0x96>
		blk_cfg->dest_address = (uint32_t)buf;
 800788c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 8007890:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 8007894:	2b00      	cmp	r3, #0
 8007896:	d03d      	beq.n	8007914 <spi_stm32_dma_rx_load+0xac>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8007898:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800789c:	f36f 1305 	bfc	r3, #4, #2
 80078a0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 80078a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 80078a8:	330c      	adds	r3, #12
 80078aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 80078ae:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80078b2:	b3bb      	cbz	r3, 8007924 <spi_stm32_dma_rx_load+0xbc>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80078b4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 80078b8:	f36f 0383 	bfc	r3, #2, #2
 80078bc:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 80078c0:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80078c4:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 80078c8:	f362 0303 	bfi	r3, r2, #0, #4
 80078cc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	stream->dma_cfg.head_block = blk_cfg;
 80078d0:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
	stream->dma_cfg.user_data = data;
 80078d4:	f8c4 409c 	str.w	r4, [r4, #156]	; 0x9c
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.channel,
 80078d8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 * @retval Negative errno code if failure.
 */
static inline int dma_config(const struct device *dev, uint32_t channel,
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
 80078dc:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f104 0288 	add.w	r2, r4, #136	; 0x88
 80078e4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80078e8:	4798      	blx	r3
	if (ret != 0) {
 80078ea:	b930      	cbnz	r0, 80078fa <spi_stm32_dma_rx_load+0x92>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 80078ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80078f0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 */
__syscall int dma_start(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 80078f4:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	4798      	blx	r3
}
 80078fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <spi_stm32_dma_rx_load+0xcc>)
 8007900:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007904:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8007908:	2202      	movs	r2, #2
 800790a:	f362 1305 	bfi	r3, r2, #4, #2
 800790e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8007912:	e7c7      	b.n	80078a4 <spi_stm32_dma_rx_load+0x3c>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007914:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8007918:	2202      	movs	r2, #2
 800791a:	f362 1305 	bfi	r3, r2, #4, #2
 800791e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8007922:	e7bf      	b.n	80078a4 <spi_stm32_dma_rx_load+0x3c>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8007924:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8007928:	2202      	movs	r2, #2
 800792a:	f362 0383 	bfi	r3, r2, #2, #2
 800792e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 8007932:	e7c5      	b.n	80078c0 <spi_stm32_dma_rx_load+0x58>
 8007934:	200012f8 	.word	0x200012f8

08007938 <spi_stm32_dma_tx_load>:
{
 8007938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	460d      	mov	r5, r1
 800793e:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 8007940:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8007944:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 8007946:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
 800794a:	2220      	movs	r2, #32
 800794c:	2100      	movs	r1, #0
 800794e:	4638      	mov	r0, r7
 8007950:	f00a f925 	bl	8011b9e <memset>
	blk_cfg->block_size = len;
 8007954:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
	if (buf == NULL) {
 8007958:	2d00      	cmp	r5, #0
 800795a:	d039      	beq.n	80079d0 <spi_stm32_dma_tx_load+0x98>
		blk_cfg->source_address = (uint32_t)buf;
 800795c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 8007960:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 8007964:	2b00      	cmp	r3, #0
 8007966:	d040      	beq.n	80079ea <spi_stm32_dma_tx_load+0xb2>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8007968:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800796c:	f36f 0383 	bfc	r3, #2, #2
 8007970:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 8007974:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007978:	330c      	adds	r3, #12
 800797a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	if (data->dma_tx.dst_addr_increment) {
 800797e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 8007982:	2b00      	cmp	r3, #0
 8007984:	d039      	beq.n	80079fa <spi_stm32_dma_tx_load+0xc2>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 8007986:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800798a:	f36f 1305 	bfc	r3, #4, #2
 800798e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8007992:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8007996:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 800799a:	f362 0303 	bfi	r3, r2, #0, #4
 800799e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	stream->dma_cfg.head_block = blk_cfg;
 80079a2:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
	stream->dma_cfg.user_data = data;
 80079a6:	f8c4 40e8 	str.w	r4, [r4, #232]	; 0xe8
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 80079aa:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	const struct dma_driver_api *api =
 80079ae:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 80079b6:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 80079ba:	4798      	blx	r3
	if (ret != 0) {
 80079bc:	b930      	cbnz	r0, 80079cc <spi_stm32_dma_tx_load+0x94>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 80079be:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 80079c2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
	const struct dma_driver_api *api =
 80079c6:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4798      	blx	r3
}
 80079cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dummy_rx_tx_buffer = 0;
 80079d0:	4b0e      	ldr	r3, [pc, #56]	; (8007a0c <spi_stm32_dma_tx_load+0xd4>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 80079d6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80079da:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80079de:	2202      	movs	r2, #2
 80079e0:	f362 0383 	bfi	r3, r2, #2, #2
 80079e4:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 80079e8:	e7c4      	b.n	8007974 <spi_stm32_dma_tx_load+0x3c>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80079ea:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80079ee:	2202      	movs	r2, #2
 80079f0:	f362 0383 	bfi	r3, r2, #2, #2
 80079f4:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 80079f8:	e7bc      	b.n	8007974 <spi_stm32_dma_tx_load+0x3c>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80079fa:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80079fe:	2202      	movs	r2, #2
 8007a00:	f362 1305 	bfi	r3, r2, #4, #2
 8007a04:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8007a08:	e7c3      	b.n	8007992 <spi_stm32_dma_tx_load+0x5a>
 8007a0a:	bf00      	nop
 8007a0c:	200012f8 	.word	0x200012f8

08007a10 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8007a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a14:	b09b      	sub	sp, #108	; 0x6c
 8007a16:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8007a18:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8007a1a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007a1e:	4889      	ldr	r0, [pc, #548]	; (8007c44 <spi_stm32_init+0x234>)
 8007a20:	f009 fc48 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007a24:	b368      	cbz	r0, 8007a82 <spi_stm32_init+0x72>
	const struct clock_control_driver_api *api =
 8007a26:	4887      	ldr	r0, [pc, #540]	; (8007c44 <spi_stm32_init+0x234>)
 8007a28:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4641      	mov	r1, r8
 8007a2e:	4798      	blx	r3
 8007a30:	4681      	mov	r9, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	d127      	bne.n	8007a88 <spi_stm32_init+0x78>
	ret = pinctrl_lookup_state(config, id, &state);
 8007a38:	aa06      	add	r2, sp, #24
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8007a40:	f009 fb3d 	bl	80110be <pinctrl_lookup_state>
	if (ret < 0) {
 8007a44:	1e07      	subs	r7, r0, #0
 8007a46:	db06      	blt.n	8007a56 <spi_stm32_init+0x46>
	return pinctrl_apply_state_direct(config, state);
 8007a48:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	7919      	ldrb	r1, [r3, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	f009 fb4f 	bl	80110f2 <pinctrl_configure_pins>
 8007a54:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8007a56:	2f00      	cmp	r7, #0
 8007a58:	db3b      	blt.n	8007ad2 <spi_stm32_init+0xc2>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8007a5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4798      	blx	r3
#endif

#ifdef CONFIG_SPI_STM32_DMA
	if ((data->dma_rx.dma_dev != NULL) &&
 8007a62:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8007a66:	b118      	cbz	r0, 8007a70 <spi_stm32_init+0x60>
 8007a68:	f009 fc24 	bl	80112b4 <z_device_is_ready>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d054      	beq.n	8007b1a <spi_stm32_init+0x10a>
				!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
		return -ENODEV;
	}

	if ((data->dma_tx.dma_dev != NULL) &&
 8007a70:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8007a74:	b118      	cbz	r0, 8007a7e <spi_stm32_init+0x6e>
 8007a76:	f009 fc1d 	bl	80112b4 <z_device_is_ready>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d05c      	beq.n	8007b38 <spi_stm32_init+0x128>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8007a7e:	68ac      	ldr	r4, [r5, #8]
 8007a80:	e08a      	b.n	8007b98 <spi_stm32_init+0x188>
		return -ENODEV;
 8007a82:	f06f 0912 	mvn.w	r9, #18
 8007a86:	e7d4      	b.n	8007a32 <spi_stm32_init+0x22>
		LOG_ERR("Could not enable SPI clock");
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007a8e:	4b6e      	ldr	r3, [pc, #440]	; (8007c48 <spi_stm32_init+0x238>)
 8007a90:	9318      	str	r3, [sp, #96]	; 0x60
 8007a92:	2300      	movs	r3, #0
 8007a94:	9305      	str	r3, [sp, #20]
 8007a96:	2102      	movs	r1, #2
 8007a98:	f88d 1014 	strb.w	r1, [sp, #20]
 8007a9c:	9905      	ldr	r1, [sp, #20]
 8007a9e:	9117      	str	r1, [sp, #92]	; 0x5c
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f363 0100 	bfi	r1, r3, #0, #1
 8007aa6:	f363 0141 	bfi	r1, r3, #1, #1
 8007aaa:	f363 0182 	bfi	r1, r3, #2, #1
 8007aae:	f363 01c5 	bfi	r1, r3, #3, #3
 8007ab2:	f362 1188 	bfi	r1, r2, #6, #3
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	f362 2152 	bfi	r1, r2, #9, #10
 8007abc:	f363 41de 	bfi	r1, r3, #19, #12
 8007ac0:	f363 71df 	bfi	r1, r3, #31, #1
 8007ac4:	aa17      	add	r2, sp, #92	; 0x5c
 8007ac6:	4861      	ldr	r0, [pc, #388]	; (8007c4c <spi_stm32_init+0x23c>)
 8007ac8:	f007 ffb8 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007acc:	f06f 0704 	mvn.w	r7, #4
 8007ad0:	e0a5      	b.n	8007c1e <spi_stm32_init+0x20e>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007ad8:	4b5d      	ldr	r3, [pc, #372]	; (8007c50 <spi_stm32_init+0x240>)
 8007ada:	9312      	str	r3, [sp, #72]	; 0x48
 8007adc:	9713      	str	r7, [sp, #76]	; 0x4c
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9305      	str	r3, [sp, #20]
 8007ae2:	2103      	movs	r1, #3
 8007ae4:	f88d 1014 	strb.w	r1, [sp, #20]
 8007ae8:	9905      	ldr	r1, [sp, #20]
 8007aea:	9111      	str	r1, [sp, #68]	; 0x44
 8007aec:	4619      	mov	r1, r3
 8007aee:	f363 0100 	bfi	r1, r3, #0, #1
 8007af2:	f363 0141 	bfi	r1, r3, #1, #1
 8007af6:	f363 0182 	bfi	r1, r3, #2, #1
 8007afa:	f363 01c5 	bfi	r1, r3, #3, #3
 8007afe:	f362 1188 	bfi	r1, r2, #6, #3
 8007b02:	220c      	movs	r2, #12
 8007b04:	f362 2152 	bfi	r1, r2, #9, #10
 8007b08:	f363 41de 	bfi	r1, r3, #19, #12
 8007b0c:	f363 71df 	bfi	r1, r3, #31, #1
 8007b10:	aa11      	add	r2, sp, #68	; 0x44
 8007b12:	484e      	ldr	r0, [pc, #312]	; (8007c4c <spi_stm32_init+0x23c>)
 8007b14:	f007 ff92 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			return err;
 8007b18:	e081      	b.n	8007c1e <spi_stm32_init+0x20e>
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
 8007b1a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	9302      	str	r3, [sp, #8]
 8007b22:	4b4c      	ldr	r3, [pc, #304]	; (8007c54 <spi_stm32_init+0x244>)
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	9000      	str	r0, [sp, #0]
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4947      	ldr	r1, [pc, #284]	; (8007c4c <spi_stm32_init+0x23c>)
 8007b2e:	f008 fcd0 	bl	80104d2 <z_log_msg2_runtime_create>
		return -ENODEV;
 8007b32:	f06f 0712 	mvn.w	r7, #18
 8007b36:	e072      	b.n	8007c1e <spi_stm32_init+0x20e>
				!device_is_ready(data->dma_tx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_tx.dma_dev->name);
 8007b38:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	4b44      	ldr	r3, [pc, #272]	; (8007c54 <spi_stm32_init+0x244>)
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	9000      	str	r0, [sp, #0]
 8007b46:	4603      	mov	r3, r0
 8007b48:	2201      	movs	r2, #1
 8007b4a:	4940      	ldr	r1, [pc, #256]	; (8007c4c <spi_stm32_init+0x23c>)
 8007b4c:	f008 fcc1 	bl	80104d2 <z_log_msg2_runtime_create>
		return -ENODEV;
 8007b50:	f06f 0712 	mvn.w	r7, #18
 8007b54:	e063      	b.n	8007c1e <spi_stm32_init+0x20e>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	7922      	ldrb	r2, [r4, #4]
 8007b5a:	9203      	str	r2, [sp, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9302      	str	r3, [sp, #8]
 8007b60:	4b3d      	ldr	r3, [pc, #244]	; (8007c58 <spi_stm32_init+0x248>)
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	9000      	str	r0, [sp, #0]
 8007b66:	4603      	mov	r3, r0
 8007b68:	2201      	movs	r2, #1
 8007b6a:	4938      	ldr	r1, [pc, #224]	; (8007c4c <spi_stm32_init+0x23c>)
 8007b6c:	f008 fcb1 	bl	80104d2 <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 8007b70:	f06f 0712 	mvn.w	r7, #18
 8007b74:	e034      	b.n	8007be0 <spi_stm32_init+0x1d0>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007b7a:	f013 0f01 	tst.w	r3, #1
 8007b7e:	d026      	beq.n	8007bce <spi_stm32_init+0x1be>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8007b80:	2301      	movs	r3, #1
 8007b82:	fa03 fe01 	lsl.w	lr, r3, r1
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	ea43 030e 	orr.w	r3, r3, lr
 8007b8c:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8007b8e:	6833      	ldr	r3, [r6, #0]
 8007b90:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8007b92:	1e07      	subs	r7, r0, #0
 8007b94:	db24      	blt.n	8007be0 <spi_stm32_init+0x1d0>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8007b96:	3408      	adds	r4, #8
 8007b98:	68ab      	ldr	r3, [r5, #8]
 8007b9a:	68ea      	ldr	r2, [r5, #12]
 8007b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	d21c      	bcs.n	8007bde <spi_stm32_init+0x1ce>
		if (!device_is_ready(cs_gpio->port)) {
 8007ba4:	6820      	ldr	r0, [r4, #0]
 8007ba6:	f009 fb85 	bl	80112b4 <z_device_is_ready>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d0d3      	beq.n	8007b56 <spi_stm32_init+0x146>
	return gpio_pin_configure(spec->port,
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
 8007bb2:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8007bb4:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8007bb8:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8007bba:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007bbc:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007bc0:	d0d9      	beq.n	8007b76 <spi_stm32_init+0x166>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8007bc2:	f013 0f01 	tst.w	r3, #1
 8007bc6:	d0d6      	beq.n	8007b76 <spi_stm32_init+0x166>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007bc8:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007bcc:	e7d3      	b.n	8007b76 <spi_stm32_init+0x166>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007bce:	2301      	movs	r3, #1
 8007bd0:	fa03 fe01 	lsl.w	lr, r3, r1
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	ea23 030e 	bic.w	r3, r3, lr
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	e7d7      	b.n	8007b8e <spi_stm32_init+0x17e>
			return ret;
		}
	}

	return 0;
 8007bde:	464f      	mov	r7, r9
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8007be0:	2f00      	cmp	r7, #0
 8007be2:	db1c      	blt.n	8007c1e <spi_stm32_init+0x20e>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b1bb      	cbz	r3, 8007c18 <spi_stm32_init+0x208>
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	b1ab      	cbz	r3, 8007c18 <spi_stm32_init+0x208>
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	b19a      	cbz	r2, 8007c18 <spi_stm32_init+0x208>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8007bf0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8007bf2:	f005 fb6f 	bl	800d2d4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8007bfe:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007c00:	6819      	ldr	r1, [r3, #0]
 8007c02:	2301      	movs	r3, #1
 8007c04:	4093      	lsls	r3, r2
 8007c06:	4219      	tst	r1, r3
 8007c08:	d10d      	bne.n	8007c26 <spi_stm32_init+0x216>
 8007c0a:	464b      	mov	r3, r9
	if (value != 0)	{
 8007c0c:	b16b      	cbz	r3, 8007c2a <spi_stm32_init+0x21a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8007c12:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	4798      	blx	r3
	return sem->count;
 8007c18:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8007c1a:	b163      	cbz	r3, 8007c36 <spi_stm32_init+0x226>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8007c1c:	464f      	mov	r7, r9
}
 8007c1e:	4638      	mov	r0, r7
 8007c20:	b01b      	add	sp, #108	; 0x6c
 8007c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = (value != 0) ? 0 : 1;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e7f0      	b.n	8007c0c <spi_stm32_init+0x1fc>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8007c2e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8007c34:	e7f0      	b.n	8007c18 <spi_stm32_init+0x208>
		ctx->owner = NULL;
 8007c36:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8007c38:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8007c3c:	f004 fbe2 	bl	800c404 <z_impl_k_sem_give>
}
 8007c40:	e7ec      	b.n	8007c1c <spi_stm32_init+0x20c>
 8007c42:	bf00      	nop
 8007c44:	080122d0 	.word	0x080122d0
 8007c48:	080136c8 	.word	0x080136c8
 8007c4c:	08012750 	.word	0x08012750
 8007c50:	080136e4 	.word	0x080136e4
 8007c54:	08013704 	.word	0x08013704
 8007c58:	08013718 	.word	0x08013718

08007c5c <transceive>:
{
 8007c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c60:	b091      	sub	sp, #68	; 0x44
 8007c62:	4605      	mov	r5, r0
 8007c64:	4688      	mov	r8, r1
 8007c66:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 8007c68:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8007c6a:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8007c6c:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8007c6e:	4691      	mov	r9, r2
 8007c70:	b31a      	cbz	r2, 8007cba <transceive+0x5e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8007c72:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007c76:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007c7a:	d004      	beq.n	8007c86 <transceive+0x2a>
 8007c7c:	69a3      	ldr	r3, [r4, #24]
 8007c7e:	b913      	cbnz	r3, 8007c86 <transceive+0x2a>
		(ctx->owner == spi_cfg)) {
 8007c80:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8007c82:	4598      	cmp	r8, r3
 8007c84:	d009      	beq.n	8007c9a <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
 8007c86:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c92:	f004 fbdf 	bl	800c454 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8007c96:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7ff fc81 	bl	80075a4 <spi_stm32_configure>
	if (ret) {
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	b170      	cbz	r0, 8007cc4 <transceive+0x68>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	889b      	ldrh	r3, [r3, #4]
 8007caa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007cae:	f000 80ab 	beq.w	8007e08 <transceive+0x1ac>
}
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	b011      	add	sp, #68	; 0x44
 8007cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d1d9      	bne.n	8007c72 <transceive+0x16>
		return 0;
 8007cbe:	f04f 0800 	mov.w	r8, #0
 8007cc2:	e7f6      	b.n	8007cb2 <transceive+0x56>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8007cc4:	f1b9 0f00 	cmp.w	r9, #0
 8007cc8:	d00b      	beq.n	8007ce2 <transceive+0x86>
 8007cca:	f8d9 3000 	ldr.w	r3, [r9]
 8007cce:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8007cd0:	b14b      	cbz	r3, 8007ce6 <transceive+0x8a>
 8007cd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007cd6:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8007cd8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8007cdc:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 8007ce0:	e008      	b.n	8007cf4 <transceive+0x98>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	e7f3      	b.n	8007cce <transceive+0x72>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e7f5      	b.n	8007cd6 <transceive+0x7a>
		++(*current);
 8007cea:	3208      	adds	r2, #8
 8007cec:	6002      	str	r2, [r0, #0]
		--(*count);
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	600b      	str	r3, [r1, #0]
	while (*count) {
 8007cf4:	680b      	ldr	r3, [r1, #0]
 8007cf6:	b13b      	cbz	r3, 8007d08 <transceive+0xac>
		if (((*current)->len / dfs) != 0) {
 8007cf8:	6802      	ldr	r2, [r0, #0]
 8007cfa:	6853      	ldr	r3, [r2, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0f4      	beq.n	8007cea <transceive+0x8e>
			*buf_len = (*current)->len / dfs;
 8007d00:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 8007d02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	e000      	b.n	8007d0a <transceive+0xae>
	*buf_len = 0;
 8007d08:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8007d0a:	6563      	str	r3, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007d0c:	b19f      	cbz	r7, 8007d36 <transceive+0xda>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8007d12:	b193      	cbz	r3, 8007d3a <transceive+0xde>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8007d18:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8007d1c:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8007d20:	680b      	ldr	r3, [r1, #0]
 8007d22:	b183      	cbz	r3, 8007d46 <transceive+0xea>
		if (((*current)->len / dfs) != 0) {
 8007d24:	6802      	ldr	r2, [r0, #0]
 8007d26:	6853      	ldr	r3, [r2, #4]
 8007d28:	b94b      	cbnz	r3, 8007d3e <transceive+0xe2>
		++(*current);
 8007d2a:	3208      	adds	r2, #8
 8007d2c:	6002      	str	r2, [r0, #0]
		--(*count);
 8007d2e:	680b      	ldr	r3, [r1, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	600b      	str	r3, [r1, #0]
 8007d34:	e7f4      	b.n	8007d20 <transceive+0xc4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007d36:	463b      	mov	r3, r7
 8007d38:	e7ea      	b.n	8007d10 <transceive+0xb4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e7eb      	b.n	8007d16 <transceive+0xba>
			*buf_len = (*current)->len / dfs;
 8007d3e:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 8007d40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	e000      	b.n	8007d48 <transceive+0xec>
	*buf_len = 0;
 8007d46:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8007d48:	65e3      	str	r3, [r4, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8007d4e:	68b3      	ldr	r3, [r6, #8]
 8007d50:	f013 0f01 	tst.w	r3, #1
 8007d54:	d001      	beq.n	8007d5a <transceive+0xfe>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8007d56:	68f3      	ldr	r3, [r6, #12]
 8007d58:	e7f9      	b.n	8007d4e <transceive+0xf2>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007d5a:	6833      	ldr	r3, [r6, #0]
 8007d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d60:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 8007d62:	2101      	movs	r1, #1
 8007d64:	4628      	mov	r0, r5
 8007d66:	f008 fc29 	bl	80105bc <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8007d6a:	6873      	ldr	r3, [r6, #4]
 8007d6c:	f043 0320 	orr.w	r3, r3, #32
 8007d70:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 8007d72:	b11f      	cbz	r7, 8007d7c <transceive+0x120>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8007d74:	6873      	ldr	r3, [r6, #4]
 8007d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d7a:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8007d7c:	6873      	ldr	r3, [r6, #4]
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8007d84:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	bf38      	it	cc
 8007d8c:	461a      	movcc	r2, r3
 8007d8e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007d92:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 8007d96:	4620      	mov	r0, r4
 8007d98:	f850 3b28 	ldr.w	r3, [r0], #40
 8007d9c:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8007d9e:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8007da2:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8007da4:	0f91      	lsrs	r1, r2, #30
 8007da6:	0093      	lsls	r3, r2, #2
 8007da8:	189a      	adds	r2, r3, r2
 8007daa:	f141 0300 	adc.w	r3, r1, #0
 8007dae:	1892      	adds	r2, r2, r2
 8007db0:	415b      	adcs	r3, r3
 8007db2:	f004 fb4f 	bl	800c454 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 8007db6:	b910      	cbnz	r0, 8007dbe <transceive+0x162>
	status = ctx->sync_status;
 8007db8:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 8007dbc:	e773      	b.n	8007ca6 <transceive+0x4a>
		LOG_ERR("Timeout waiting for transfer complete");
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007dc4:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <transceive+0x1bc>)
 8007dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	2102      	movs	r1, #2
 8007dce:	f88d 1004 	strb.w	r1, [sp, #4]
 8007dd2:	9901      	ldr	r1, [sp, #4]
 8007dd4:	910d      	str	r1, [sp, #52]	; 0x34
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f363 0100 	bfi	r1, r3, #0, #1
 8007ddc:	f363 0141 	bfi	r1, r3, #1, #1
 8007de0:	f363 0182 	bfi	r1, r3, #2, #1
 8007de4:	f363 01c5 	bfi	r1, r3, #3, #3
 8007de8:	f362 1188 	bfi	r1, r2, #6, #3
 8007dec:	2208      	movs	r2, #8
 8007dee:	f362 2152 	bfi	r1, r2, #9, #10
 8007df2:	f363 41de 	bfi	r1, r3, #19, #12
 8007df6:	f363 71df 	bfi	r1, r3, #31, #1
 8007dfa:	aa0d      	add	r2, sp, #52	; 0x34
 8007dfc:	4807      	ldr	r0, [pc, #28]	; (8007e1c <transceive+0x1c0>)
 8007dfe:	f007 fe1d 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -ETIMEDOUT;
 8007e02:	f06f 0873 	mvn.w	r8, #115	; 0x73
 8007e06:	e74e      	b.n	8007ca6 <transceive+0x4a>
		ctx->owner = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8007e0c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 8007e10:	f004 faf8 	bl	800c404 <z_impl_k_sem_give>
}
 8007e14:	e74d      	b.n	8007cb2 <transceive+0x56>
 8007e16:	bf00      	nop
 8007e18:	0801373c 	.word	0x0801373c
 8007e1c:	08012750 	.word	0x08012750

08007e20 <transceive_dma>:
{
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	b097      	sub	sp, #92	; 0x5c
 8007e26:	4607      	mov	r7, r0
 8007e28:	4688      	mov	r8, r1
 8007e2a:	461e      	mov	r6, r3
 8007e2c:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
	const struct spi_stm32_config *cfg = dev->config;
 8007e30:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8007e32:	6905      	ldr	r5, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8007e34:	689c      	ldr	r4, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8007e36:	4693      	mov	fp, r2
 8007e38:	b352      	cbz	r2, 8007e90 <transceive_dma+0x70>
	if (asynchronous) {
 8007e3a:	2900      	cmp	r1, #0
 8007e3c:	f040 8179 	bne.w	8008132 <transceive_dma+0x312>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8007e40:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007e44:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007e48:	d004      	beq.n	8007e54 <transceive_dma+0x34>
 8007e4a:	69ab      	ldr	r3, [r5, #24]
 8007e4c:	b913      	cbnz	r3, 8007e54 <transceive_dma+0x34>
		(ctx->owner == spi_cfg)) {
 8007e4e:	686b      	ldr	r3, [r5, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8007e50:	4598      	cmp	r8, r3
 8007e52:	d009      	beq.n	8007e68 <transceive_dma+0x48>
	k_sem_take(&ctx->lock, K_FOREVER);
 8007e54:	f105 0010 	add.w	r0, r5, #16
	return z_impl_k_sem_take(sem, timeout);
 8007e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e60:	f004 faf8 	bl	800c454 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8007e64:	f8c5 8004 	str.w	r8, [r5, #4]
	k_sem_reset(&data->status_sem);
 8007e68:	f105 0064 	add.w	r0, r5, #100	; 0x64
	z_impl_k_sem_reset(sem);
 8007e6c:	f004 fb1a 	bl	800c4a4 <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 8007e70:	4641      	mov	r1, r8
 8007e72:	4638      	mov	r0, r7
 8007e74:	f7ff fb96 	bl	80075a4 <spi_stm32_configure>
	if (ret) {
 8007e78:	4680      	mov	r8, r0
 8007e7a:	b170      	cbz	r0, 8007e9a <transceive_dma+0x7a>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	889b      	ldrh	r3, [r3, #4]
 8007e80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007e84:	f000 814e 	beq.w	8008124 <transceive_dma+0x304>
}
 8007e88:	4640      	mov	r0, r8
 8007e8a:	b017      	add	sp, #92	; 0x5c
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	d1d2      	bne.n	8007e3a <transceive_dma+0x1a>
		return 0;
 8007e94:	f04f 0800 	mov.w	r8, #0
 8007e98:	e7f6      	b.n	8007e88 <transceive_dma+0x68>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8007e9a:	f1bb 0f00 	cmp.w	fp, #0
 8007e9e:	d015      	beq.n	8007ecc <transceive_dma+0xac>
 8007ea0:	f8db 3000 	ldr.w	r3, [fp]
 8007ea4:	646b      	str	r3, [r5, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8007ea6:	b19b      	cbz	r3, 8007ed0 <transceive_dma+0xb0>
 8007ea8:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007eac:	64ab      	str	r3, [r5, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8007eae:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8007eb2:	f105 0148 	add.w	r1, r5, #72	; 0x48
	while (*count) {
 8007eb6:	680b      	ldr	r3, [r1, #0]
 8007eb8:	b183      	cbz	r3, 8007edc <transceive_dma+0xbc>
		if (((*current)->len / dfs) != 0) {
 8007eba:	6802      	ldr	r2, [r0, #0]
 8007ebc:	6853      	ldr	r3, [r2, #4]
 8007ebe:	b94b      	cbnz	r3, 8007ed4 <transceive_dma+0xb4>
		++(*current);
 8007ec0:	3208      	adds	r2, #8
 8007ec2:	6002      	str	r2, [r0, #0]
		--(*count);
 8007ec4:	680b      	ldr	r3, [r1, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	e7f4      	b.n	8007eb6 <transceive_dma+0x96>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8007ecc:	465b      	mov	r3, fp
 8007ece:	e7e9      	b.n	8007ea4 <transceive_dma+0x84>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e7eb      	b.n	8007eac <transceive_dma+0x8c>
			*buf_len = (*current)->len / dfs;
 8007ed4:	65ab      	str	r3, [r5, #88]	; 0x58
			return (*current)->buf;
 8007ed6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	e000      	b.n	8007ede <transceive_dma+0xbe>
	*buf_len = 0;
 8007edc:	65ab      	str	r3, [r5, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8007ede:	656b      	str	r3, [r5, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007ee0:	b19e      	cbz	r6, 8007f0a <transceive_dma+0xea>
 8007ee2:	6833      	ldr	r3, [r6, #0]
 8007ee4:	64eb      	str	r3, [r5, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8007ee6:	b193      	cbz	r3, 8007f0e <transceive_dma+0xee>
 8007ee8:	6873      	ldr	r3, [r6, #4]
 8007eea:	652b      	str	r3, [r5, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8007eec:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8007ef0:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 8007ef4:	6813      	ldr	r3, [r2, #0]
 8007ef6:	b183      	cbz	r3, 8007f1a <transceive_dma+0xfa>
		if (((*current)->len / dfs) != 0) {
 8007ef8:	6803      	ldr	r3, [r0, #0]
 8007efa:	6859      	ldr	r1, [r3, #4]
 8007efc:	b949      	cbnz	r1, 8007f12 <transceive_dma+0xf2>
		++(*current);
 8007efe:	3308      	adds	r3, #8
 8007f00:	6003      	str	r3, [r0, #0]
		--(*count);
 8007f02:	6813      	ldr	r3, [r2, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	e7f4      	b.n	8007ef4 <transceive_dma+0xd4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8007f0a:	4633      	mov	r3, r6
 8007f0c:	e7ea      	b.n	8007ee4 <transceive_dma+0xc4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	e7eb      	b.n	8007eea <transceive_dma+0xca>
			*buf_len = (*current)->len / dfs;
 8007f12:	6629      	str	r1, [r5, #96]	; 0x60
			return (*current)->buf;
 8007f14:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	e000      	b.n	8007f1c <transceive_dma+0xfc>
	*buf_len = 0;
 8007f1a:	662b      	str	r3, [r5, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8007f1c:	65eb      	str	r3, [r5, #92]	; 0x5c
	ctx->sync_status = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	642b      	str	r3, [r5, #64]	; 0x40
	spi_stm32_cs_control(dev, true);
 8007f22:	2101      	movs	r1, #1
 8007f24:	4638      	mov	r0, r7
 8007f26:	f008 fb49 	bl	80105bc <spi_stm32_cs_control>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f30:	6023      	str	r3, [r4, #0]
}
 8007f32:	e086      	b.n	8008042 <transceive_dma+0x222>
		} else if (data->ctx.tx_len == 0) {
 8007f34:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 808c 	beq.w	8008054 <transceive_dma+0x234>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 8007f3c:	429e      	cmp	r6, r3
 8007f3e:	bf28      	it	cs
 8007f40:	461e      	movcs	r6, r3
 8007f42:	e087      	b.n	8008054 <transceive_dma+0x234>
	if (!ctx->tx_len) {
		return;
	}

	if (len > ctx->tx_len) {
		LOG_ERR("Update exceeds current buffer");
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007f4a:	4b7b      	ldr	r3, [pc, #492]	; (8008138 <transceive_dma+0x318>)
 8007f4c:	9314      	str	r3, [sp, #80]	; 0x50
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	2102      	movs	r1, #2
 8007f54:	f88d 1004 	strb.w	r1, [sp, #4]
 8007f58:	9901      	ldr	r1, [sp, #4]
 8007f5a:	9113      	str	r1, [sp, #76]	; 0x4c
 8007f5c:	f363 0900 	bfi	r9, r3, #0, #1
 8007f60:	f363 0941 	bfi	r9, r3, #1, #1
 8007f64:	f363 0982 	bfi	r9, r3, #2, #1
 8007f68:	f363 09c5 	bfi	r9, r3, #3, #3
 8007f6c:	f362 1988 	bfi	r9, r2, #6, #3
 8007f70:	2208      	movs	r2, #8
 8007f72:	f362 2952 	bfi	r9, r2, #9, #10
 8007f76:	f363 49de 	bfi	r9, r3, #19, #12
 8007f7a:	f363 79df 	bfi	r9, r3, #31, #1
 8007f7e:	aa13      	add	r2, sp, #76	; 0x4c
 8007f80:	4649      	mov	r1, r9
 8007f82:	486e      	ldr	r0, [pc, #440]	; (800813c <transceive_dma+0x31c>)
 8007f84:	f007 fd5a 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 8007f88:	e09d      	b.n	80080c6 <transceive_dma+0x2a6>
	}

	ctx->tx_len -= len;
	if (!ctx->tx_len) {
		/* Current buffer is done. Get the next one to be processed. */
		++ctx->current_tx;
 8007f8a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	646b      	str	r3, [r5, #68]	; 0x44
		--ctx->tx_count;
 8007f90:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007f92:	3b01      	subs	r3, #1
 8007f94:	64ab      	str	r3, [r5, #72]	; 0x48
		ctx->tx_buf = (const uint8_t *)
			spi_context_get_next_buf(&ctx->current_tx,
 8007f96:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8007f9a:	f105 0248 	add.w	r2, r5, #72	; 0x48
	while (*count) {
 8007f9e:	e004      	b.n	8007faa <transceive_dma+0x18a>
		++(*current);
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	600b      	str	r3, [r1, #0]
		--(*count);
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	6013      	str	r3, [r2, #0]
	while (*count) {
 8007faa:	6813      	ldr	r3, [r2, #0]
 8007fac:	b13b      	cbz	r3, 8007fbe <transceive_dma+0x19e>
		if (((*current)->len / dfs) != 0) {
 8007fae:	680b      	ldr	r3, [r1, #0]
 8007fb0:	6858      	ldr	r0, [r3, #4]
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0f4      	beq.n	8007fa0 <transceive_dma+0x180>
			*buf_len = (*current)->len / dfs;
 8007fb6:	65a8      	str	r0, [r5, #88]	; 0x58
			return (*current)->buf;
 8007fb8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	e000      	b.n	8007fc0 <transceive_dma+0x1a0>
	*buf_len = 0;
 8007fbe:	65ab      	str	r3, [r5, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8007fc0:	656b      	str	r3, [r5, #84]	; 0x54
 8007fc2:	e080      	b.n	80080c6 <transceive_dma+0x2a6>
	if (!ctx->rx_len) {
		return;
	}

	if (len > ctx->rx_len) {
		LOG_ERR("Update exceeds current buffer");
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007fca:	4b5b      	ldr	r3, [pc, #364]	; (8008138 <transceive_dma+0x318>)
 8007fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	2102      	movs	r1, #2
 8007fd4:	f88d 1004 	strb.w	r1, [sp, #4]
 8007fd8:	9901      	ldr	r1, [sp, #4]
 8007fda:	910d      	str	r1, [sp, #52]	; 0x34
 8007fdc:	f363 0a00 	bfi	sl, r3, #0, #1
 8007fe0:	f363 0a41 	bfi	sl, r3, #1, #1
 8007fe4:	f363 0a82 	bfi	sl, r3, #2, #1
 8007fe8:	f363 0ac5 	bfi	sl, r3, #3, #3
 8007fec:	f362 1a88 	bfi	sl, r2, #6, #3
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	f362 2a52 	bfi	sl, r2, #9, #10
 8007ff6:	f363 4ade 	bfi	sl, r3, #19, #12
 8007ffa:	f363 7adf 	bfi	sl, r3, #31, #1
 8007ffe:	aa0d      	add	r2, sp, #52	; 0x34
 8008000:	4651      	mov	r1, sl
 8008002:	484e      	ldr	r0, [pc, #312]	; (800813c <transceive_dma+0x31c>)
 8008004:	f007 fd1a 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 8008008:	e01b      	b.n	8008042 <transceive_dma+0x222>
	}

	ctx->rx_len -= len;
	if (!ctx->rx_len) {
		/* Current buffer is done. Get the next one to be processed. */
		++ctx->current_rx;
 800800a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800800c:	3308      	adds	r3, #8
 800800e:	64eb      	str	r3, [r5, #76]	; 0x4c
		--ctx->rx_count;
 8008010:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008012:	3b01      	subs	r3, #1
 8008014:	652b      	str	r3, [r5, #80]	; 0x50
		ctx->rx_buf = (uint8_t *)
			spi_context_get_next_buf(&ctx->current_rx,
 8008016:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800801a:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 800801e:	e004      	b.n	800802a <transceive_dma+0x20a>
		++(*current);
 8008020:	3308      	adds	r3, #8
 8008022:	600b      	str	r3, [r1, #0]
		--(*count);
 8008024:	6813      	ldr	r3, [r2, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	6013      	str	r3, [r2, #0]
	while (*count) {
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	b13b      	cbz	r3, 800803e <transceive_dma+0x21e>
		if (((*current)->len / dfs) != 0) {
 800802e:	680b      	ldr	r3, [r1, #0]
 8008030:	6858      	ldr	r0, [r3, #4]
 8008032:	2800      	cmp	r0, #0
 8008034:	d0f4      	beq.n	8008020 <transceive_dma+0x200>
			*buf_len = (*current)->len / dfs;
 8008036:	6628      	str	r0, [r5, #96]	; 0x60
			return (*current)->buf;
 8008038:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	e000      	b.n	8008040 <transceive_dma+0x220>
	*buf_len = 0;
 800803e:	662b      	str	r3, [r5, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8008040:	65eb      	str	r3, [r5, #92]	; 0x5c
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8008042:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8008044:	b916      	cbnz	r6, 800804c <transceive_dma+0x22c>
 8008046:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008048:	2b00      	cmp	r3, #0
 800804a:	d04c      	beq.n	80080e6 <transceive_dma+0x2c6>
		if (data->ctx.rx_len == 0) {
 800804c:	2e00      	cmp	r6, #0
 800804e:	f47f af71 	bne.w	8007f34 <transceive_dma+0x114>
			dma_len = data->ctx.tx_len;
 8008052:	6dae      	ldr	r6, [r5, #88]	; 0x58
		data->status_flags = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	67eb      	str	r3, [r5, #124]	; 0x7c
		ret = spi_dma_move_buffers(dev, dma_len);
 8008058:	4631      	mov	r1, r6
 800805a:	4638      	mov	r0, r7
 800805c:	f008 fa5e 	bl	801051c <spi_dma_move_buffers>
		if (ret != 0) {
 8008060:	4680      	mov	r8, r0
 8008062:	2800      	cmp	r0, #0
 8008064:	d13f      	bne.n	80080e6 <transceive_dma+0x2c6>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8008066:	6863      	ldr	r3, [r4, #4]
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800806e:	6863      	ldr	r3, [r4, #4]
 8008070:	f043 0302 	orr.w	r3, r3, #2
 8008074:	6063      	str	r3, [r4, #4]
		ret = wait_dma_rx_tx_done(dev);
 8008076:	4638      	mov	r0, r7
 8008078:	f008 fa38 	bl	80104ec <wait_dma_rx_tx_done>
		if (ret != 0) {
 800807c:	4680      	mov	r8, r0
 800807e:	2800      	cmp	r0, #0
 8008080:	d131      	bne.n	80080e6 <transceive_dma+0x2c6>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8008082:	68a3      	ldr	r3, [r4, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 8008084:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008088:	d1fb      	bne.n	8008082 <transceive_dma+0x262>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800808a:	68a3      	ldr	r3, [r4, #8]
 800808c:	f013 0f02 	tst.w	r3, #2
 8008090:	d0fb      	beq.n	800808a <transceive_dma+0x26a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008098:	d1f7      	bne.n	800808a <transceive_dma+0x26a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	f023 0302 	bic.w	r3, r3, #2
 80080a0:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80080a2:	6863      	ldr	r3, [r4, #4]
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6063      	str	r3, [r4, #4]
	if (!ctx->tx_len) {
 80080aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80080ac:	b15b      	cbz	r3, 80080c6 <transceive_dma+0x2a6>
	if (len > ctx->tx_len) {
 80080ae:	429e      	cmp	r6, r3
 80080b0:	f63f af48 	bhi.w	8007f44 <transceive_dma+0x124>
	ctx->tx_len -= len;
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	65ab      	str	r3, [r5, #88]	; 0x58
	if (!ctx->tx_len) {
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f43f af66 	beq.w	8007f8a <transceive_dma+0x16a>
	} else if (ctx->tx_buf) {
 80080be:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80080c0:	b10b      	cbz	r3, 80080c6 <transceive_dma+0x2a6>
		ctx->tx_buf += dfs * len;
 80080c2:	4433      	add	r3, r6
 80080c4:	656b      	str	r3, [r5, #84]	; 0x54
	if (!ctx->rx_len) {
 80080c6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0ba      	beq.n	8008042 <transceive_dma+0x222>
	if (len > ctx->rx_len) {
 80080cc:	429e      	cmp	r6, r3
 80080ce:	f63f af79 	bhi.w	8007fc4 <transceive_dma+0x1a4>
	ctx->rx_len -= len;
 80080d2:	1b9b      	subs	r3, r3, r6
 80080d4:	662b      	str	r3, [r5, #96]	; 0x60
	if (!ctx->rx_len) {
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d097      	beq.n	800800a <transceive_dma+0x1ea>
						 &ctx->rx_count,
						 &ctx->rx_len, dfs);
	} else if (ctx->rx_buf) {
 80080da:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0b0      	beq.n	8008042 <transceive_dma+0x222>
		ctx->rx_buf += dfs * len;
 80080e0:	4433      	add	r3, r6
 80080e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80080e4:	e7ad      	b.n	8008042 <transceive_dma+0x222>
	spi_stm32_complete(dev, ret);
 80080e6:	4641      	mov	r1, r8
 80080e8:	4638      	mov	r0, r7
 80080ea:	f008 fab4 	bl	8010656 <spi_stm32_complete>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f4:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	f023 0302 	bic.w	r3, r3, #2
 80080fc:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	6063      	str	r3, [r4, #4]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 8008106:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800810a:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 */
__syscall int dma_stop(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 800810e:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 8008114:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8008118:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
	const struct dma_driver_api *api =
 800811c:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 8008122:	e6ab      	b.n	8007e7c <transceive_dma+0x5c>
		ctx->owner = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8008128:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 800812c:	f004 f96a 	bl	800c404 <z_impl_k_sem_give>
}
 8008130:	e6aa      	b.n	8007e88 <transceive_dma+0x68>
		return -ENOTSUP;
 8008132:	f06f 0885 	mvn.w	r8, #133	; 0x85
 8008136:	e6a7      	b.n	8007e88 <transceive_dma+0x68>
 8008138:	08013764 	.word	0x08013764
 800813c:	08012750 	.word	0x08012750

08008140 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8008140:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8008142:	4802      	ldr	r0, [pc, #8]	; (800814c <timer_callback+0xc>)
 8008144:	f004 fb0e 	bl	800c764 <k_work_submit>
}
 8008148:	bd08      	pop	{r3, pc}
 800814a:	bf00      	nop
 800814c:	200001ec 	.word	0x200001ec

08008150 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8008150:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8008152:	f009 fc46 	bl	80119e2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8008156:	220a      	movs	r2, #10
 8008158:	2300      	movs	r3, #0
 800815a:	f7f8 fc3f 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 800815e:	4b02      	ldr	r3, [pc, #8]	; (8008168 <RtcGetTimerElapsedTime+0x18>)
 8008160:	681b      	ldr	r3, [r3, #0]
}
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	bd08      	pop	{r3, pc}
 8008166:	bf00      	nop
 8008168:	200012fc 	.word	0x200012fc

0800816c <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 800816c:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 800816e:	4802      	ldr	r0, [pc, #8]	; (8008178 <RtcStopAlarm+0xc>)
 8008170:	f009 fc47 	bl	8011a02 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8008174:	bd08      	pop	{r3, pc}
 8008176:	bf00      	nop
 8008178:	20000530 	.word	0x20000530

0800817c <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 800817c:	b500      	push	{lr}
 800817e:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8008180:	0f83      	lsrs	r3, r0, #30
 8008182:	0082      	lsls	r2, r0, #2
 8008184:	1812      	adds	r2, r2, r0
 8008186:	f143 0300 	adc.w	r3, r3, #0
 800818a:	1892      	adds	r2, r2, r2
 800818c:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800818e:	2000      	movs	r0, #0
 8008190:	2100      	movs	r1, #0
 8008192:	e9cd 0100 	strd	r0, r1, [sp]
 8008196:	4803      	ldr	r0, [pc, #12]	; (80081a4 <RtcSetAlarm+0x28>)
 8008198:	f005 f900 	bl	800d39c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 800819c:	b003      	add	sp, #12
 800819e:	f85d fb04 	ldr.w	pc, [sp], #4
 80081a2:	bf00      	nop
 80081a4:	20000530 	.word	0x20000530

080081a8 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 80081a8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80081aa:	f009 fc1a 	bl	80119e2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80081ae:	220a      	movs	r2, #10
 80081b0:	2300      	movs	r3, #0
 80081b2:	f7f8 fc13 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 80081b6:	4b01      	ldr	r3, [pc, #4]	; (80081bc <RtcSetTimerContext+0x14>)
 80081b8:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	200012fc 	.word	0x200012fc

080081c0 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 80081c0:	4b01      	ldr	r3, [pc, #4]	; (80081c8 <RtcGetTimerContext+0x8>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200012fc 	.word	0x200012fc

080081cc <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80081d0:	f100 0544 	add.w	r5, r0, #68	; 0x44
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80081d4:	2302      	movs	r3, #2
 80081d6:	f3bf 8f5b 	dmb	ish
 80081da:	e855 2f00 	ldrex	r2, [r5]
 80081de:	2a01      	cmp	r2, #1
 80081e0:	d103      	bne.n	80081ea <modem_release+0x1e>
 80081e2:	e845 3100 	strex	r1, r3, [r5]
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d1f7      	bne.n	80081da <modem_release+0xe>
 80081ea:	f3bf 8f5b 	dmb	ish
 80081ee:	bf0c      	ite	eq
 80081f0:	2601      	moveq	r6, #1
 80081f2:	2600      	movne	r6, #0
 80081f4:	d10e      	bne.n	8008214 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <modem_release+0x4c>)
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8008200:	f3bf 8f5b 	dmb	ish
 8008204:	e855 2f00 	ldrex	r2, [r5]
 8008208:	e845 3100 	strex	r1, r3, [r5]
 800820c:	2900      	cmp	r1, #0
 800820e:	d1f9      	bne.n	8008204 <modem_release+0x38>
 8008210:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8008214:	4630      	mov	r0, r6
 8008216:	bd70      	pop	{r4, r5, r6, pc}
 8008218:	08013a70 	.word	0x08013a70

0800821c <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 800821c:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 800821e:	4806      	ldr	r0, [pc, #24]	; (8008238 <sx12xx_ev_tx_timed_out+0x1c>)
 8008220:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	6143      	str	r3, [r0, #20]

    if (modem_release(&dev_data)) {
 8008226:	f7ff ffd1 	bl	80081cc <modem_release>
 800822a:	b120      	cbz	r0, 8008236 <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 800822c:	b11c      	cbz	r4, 8008236 <sx12xx_ev_tx_timed_out+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
 800822e:	2100      	movs	r1, #0
 8008230:	4620      	mov	r0, r4
 8008232:	f005 fbaf 	bl	800d994 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8008236:	bd10      	pop	{r4, pc}
 8008238:	20001300 	.word	0x20001300

0800823c <sx12xx_ev_rx_error_timeout>:

static void sx12xx_ev_rx_error_timeout(void)
{
 800823c:	b510      	push	{r4, lr}
 800823e:	b090      	sub	sp, #64	; 0x40
    LOG_DBG("Receive timeout/error");
 8008240:	2301      	movs	r3, #1
 8008242:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008246:	2302      	movs	r3, #2
 8008248:	f8ad 300a 	strh.w	r3, [sp, #10]
 800824c:	4b17      	ldr	r3, [pc, #92]	; (80082ac <sx12xx_ev_rx_error_timeout+0x70>)
 800824e:	930e      	str	r3, [sp, #56]	; 0x38
 8008250:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <sx12xx_ev_rx_error_timeout+0x74>)
 8008252:	930f      	str	r3, [sp, #60]	; 0x3c
 8008254:	2300      	movs	r3, #0
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	2203      	movs	r2, #3
 800825a:	f88d 2004 	strb.w	r2, [sp, #4]
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	920d      	str	r2, [sp, #52]	; 0x34
 8008262:	4619      	mov	r1, r3
 8008264:	f363 0100 	bfi	r1, r3, #0, #1
 8008268:	f363 0141 	bfi	r1, r3, #1, #1
 800826c:	f363 0182 	bfi	r1, r3, #2, #1
 8008270:	f363 01c5 	bfi	r1, r3, #3, #3
 8008274:	2204      	movs	r2, #4
 8008276:	f362 1188 	bfi	r1, r2, #6, #3
 800827a:	220c      	movs	r2, #12
 800827c:	f362 2152 	bfi	r1, r2, #9, #10
 8008280:	f363 41de 	bfi	r1, r3, #19, #12
 8008284:	f363 71df 	bfi	r1, r3, #31, #1
 8008288:	aa0d      	add	r2, sp, #52	; 0x34
 800828a:	480a      	ldr	r0, [pc, #40]	; (80082b4 <sx12xx_ev_rx_error_timeout+0x78>)
 800828c:	f007 fbd6 	bl	800fa3c <z_impl_z_log_msg2_static_create>
    struct k_poll_signal *sig = dev_data.operation_done;
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <sx12xx_ev_rx_error_timeout+0x7c>)
 8008292:	685c      	ldr	r4, [r3, #4]

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	b113      	cbz	r3, 800829e <sx12xx_ev_rx_error_timeout+0x62>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 8008298:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <sx12xx_ev_rx_error_timeout+0x7c>)
 800829a:	6810      	ldr	r0, [r2, #0]
 800829c:	4798      	blx	r3
    }

    /* Raise signal if provided */
    if (sig) {
 800829e:	b11c      	cbz	r4, 80082a8 <sx12xx_ev_rx_error_timeout+0x6c>
 80082a0:	2100      	movs	r1, #0
 80082a2:	4620      	mov	r0, r4
 80082a4:	f005 fb76 	bl	800d994 <z_impl_k_poll_signal_raise>
        k_poll_signal_raise(sig, 0);
    }
}
 80082a8:	b010      	add	sp, #64	; 0x40
 80082aa:	bd10      	pop	{r4, pc}
 80082ac:	080137fc 	.word	0x080137fc
 80082b0:	08013900 	.word	0x08013900
 80082b4:	08012760 	.word	0x08012760
 80082b8:	20001300 	.word	0x20001300

080082bc <sx12xx_ev_tx_done>:
{
 80082bc:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80082be:	4805      	ldr	r0, [pc, #20]	; (80082d4 <sx12xx_ev_tx_done+0x18>)
 80082c0:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 80082c2:	f7ff ff83 	bl	80081cc <modem_release>
 80082c6:	b120      	cbz	r0, 80082d2 <sx12xx_ev_tx_done+0x16>
		if (sig) {
 80082c8:	b11c      	cbz	r4, 80082d2 <sx12xx_ev_tx_done+0x16>
 80082ca:	2100      	movs	r1, #0
 80082cc:	4620      	mov	r0, r4
 80082ce:	f005 fb61 	bl	800d994 <z_impl_k_poll_signal_raise>
}
 80082d2:	bd10      	pop	{r4, pc}
 80082d4:	20001300 	.word	0x20001300

080082d8 <sx12xx_ev_rx_done>:
{
 80082d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082da:	b083      	sub	sp, #12
 80082dc:	4617      	mov	r7, r2
 80082de:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 80082e0:	4c24      	ldr	r4, [pc, #144]	; (8008374 <sx12xx_ev_rx_done+0x9c>)
 80082e2:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 80082e4:	68a4      	ldr	r4, [r4, #8]
 80082e6:	b15c      	cbz	r4, 8008300 <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	4613      	mov	r3, r2
 80082ec:	460a      	mov	r2, r1
 80082ee:	4601      	mov	r1, r0
 80082f0:	4820      	ldr	r0, [pc, #128]	; (8008374 <sx12xx_ev_rx_done+0x9c>)
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	47a0      	blx	r4
		Radio.Rx(0);
 80082f6:	4b20      	ldr	r3, [pc, #128]	; (8008378 <sx12xx_ev_rx_done+0xa0>)
 80082f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fa:	2000      	movs	r0, #0
 80082fc:	4798      	blx	r3
		return;
 80082fe:	e037      	b.n	8008370 <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8008300:	4b1e      	ldr	r3, [pc, #120]	; (800837c <sx12xx_ev_rx_done+0xa4>)
 8008302:	2202      	movs	r2, #2
 8008304:	f3bf 8f5b 	dmb	ish
 8008308:	e853 4f00 	ldrex	r4, [r3]
 800830c:	2c01      	cmp	r4, #1
 800830e:	d104      	bne.n	800831a <sx12xx_ev_rx_done+0x42>
 8008310:	e843 2c00 	strex	ip, r2, [r3]
 8008314:	f1bc 0f00 	cmp.w	ip, #0
 8008318:	d1f6      	bne.n	8008308 <sx12xx_ev_rx_done+0x30>
 800831a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800831e:	d127      	bne.n	8008370 <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 8008320:	3b44      	subs	r3, #68	; 0x44
 8008322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	428a      	cmp	r2, r1
 8008328:	d900      	bls.n	800832c <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 800832a:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 800832c:	4c11      	ldr	r4, [pc, #68]	; (8008374 <sx12xx_ev_rx_done+0x9c>)
 800832e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	4601      	mov	r1, r0
 8008334:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008336:	f009 fc24 	bl	8011b82 <memcpy>
	if (dev_data.rx_params.rssi) {
 800833a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800833c:	b103      	cbz	r3, 8008340 <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 800833e:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <sx12xx_ev_rx_done+0x9c>)
 8008342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008344:	b103      	cbz	r3, 8008348 <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 8008346:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 8008348:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <sx12xx_ev_rx_done+0xa0>)
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	4798      	blx	r3
	dev_data.operation_done = NULL;
 800834e:	4b09      	ldr	r3, [pc, #36]	; (8008374 <sx12xx_ev_rx_done+0x9c>)
 8008350:	2100      	movs	r1, #0
 8008352:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8008354:	3344      	adds	r3, #68	; 0x44
 8008356:	f3bf 8f5b 	dmb	ish
 800835a:	e853 2f00 	ldrex	r2, [r3]
 800835e:	e843 1000 	strex	r0, r1, [r3]
 8008362:	2800      	cmp	r0, #0
 8008364:	d1f9      	bne.n	800835a <sx12xx_ev_rx_done+0x82>
 8008366:	f3bf 8f5b 	dmb	ish
 800836a:	4630      	mov	r0, r6
 800836c:	f005 fb12 	bl	800d994 <z_impl_k_poll_signal_raise>
}
 8008370:	b003      	add	sp, #12
 8008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008374:	20001300 	.word	0x20001300
 8008378:	08013a70 	.word	0x08013a70
 800837c:	20001344 	.word	0x20001344

08008380 <__sx12xx_configure_pin>:
{
 8008380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008382:	b087      	sub	sp, #28
 8008384:	4604      	mov	r4, r0
 8008386:	460f      	mov	r7, r1
 8008388:	4616      	mov	r6, r2
 800838a:	461d      	mov	r5, r3
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 800838c:	4608      	mov	r0, r1
 800838e:	f003 fc39 	bl	800bc04 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8008392:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8008394:	b1f8      	cbz	r0, 80083d6 <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 8008396:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8008398:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800839a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800839e:	d007      	beq.n	80083b0 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80083a0:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 80083a4:	d004      	beq.n	80083b0 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80083a6:	f015 0f01 	tst.w	r5, #1
 80083aa:	d001      	beq.n	80083b0 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80083ac:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80083b0:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80083b4:	f015 0f01 	tst.w	r5, #1
 80083b8:	d019      	beq.n	80083ee <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80083ba:	2101      	movs	r1, #1
 80083bc:	fa01 f506 	lsl.w	r5, r1, r6
 80083c0:	6821      	ldr	r1, [r4, #0]
 80083c2:	4329      	orrs	r1, r5
 80083c4:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4631      	mov	r1, r6
 80083ca:	4798      	blx	r3
	if (err) {
 80083cc:	4604      	mov	r4, r0
 80083ce:	b9b0      	cbnz	r0, 80083fe <__sx12xx_configure_pin+0x7e>
}
 80083d0:	4620      	mov	r0, r4
 80083d2:	b007      	add	sp, #28
 80083d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 80083d6:	9702      	str	r7, [sp, #8]
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <__sx12xx_configure_pin+0x98>)
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	9000      	str	r0, [sp, #0]
 80083de:	4603      	mov	r3, r0
 80083e0:	2201      	movs	r2, #1
 80083e2:	490e      	ldr	r1, [pc, #56]	; (800841c <__sx12xx_configure_pin+0x9c>)
 80083e4:	f008 fbb1 	bl	8010b4a <z_log_msg2_runtime_create>
		return -EIO;
 80083e8:	f06f 0404 	mvn.w	r4, #4
 80083ec:	e7f0      	b.n	80083d0 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80083ee:	2101      	movs	r1, #1
 80083f0:	fa01 f506 	lsl.w	r5, r1, r6
 80083f4:	6821      	ldr	r1, [r4, #0]
 80083f6:	ea21 0105 	bic.w	r1, r1, r5
 80083fa:	6021      	str	r1, [r4, #0]
 80083fc:	e7e3      	b.n	80083c6 <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 80083fe:	9004      	str	r0, [sp, #16]
 8008400:	9603      	str	r6, [sp, #12]
 8008402:	9702      	str	r7, [sp, #8]
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <__sx12xx_configure_pin+0xa0>)
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	2000      	movs	r0, #0
 800840a:	9000      	str	r0, [sp, #0]
 800840c:	4603      	mov	r3, r0
 800840e:	2201      	movs	r2, #1
 8008410:	4902      	ldr	r1, [pc, #8]	; (800841c <__sx12xx_configure_pin+0x9c>)
 8008412:	f008 fb9a 	bl	8010b4a <z_log_msg2_runtime_create>
		return err;
 8008416:	e7db      	b.n	80083d0 <__sx12xx_configure_pin+0x50>
 8008418:	08013818 	.word	0x08013818
 800841c:	08012760 	.word	0x08012760
 8008420:	08013838 	.word	0x08013838

08008424 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8008428:	490f      	ldr	r1, [pc, #60]	; (8008468 <sx12xx_lora_send_async+0x44>)
 800842a:	2001      	movs	r0, #1
 800842c:	f3bf 8f5b 	dmb	ish
 8008430:	e851 4f00 	ldrex	r4, [r1]
 8008434:	2c00      	cmp	r4, #0
 8008436:	d103      	bne.n	8008440 <sx12xx_lora_send_async+0x1c>
 8008438:	e841 0600 	strex	r6, r0, [r1]
 800843c:	2e00      	cmp	r6, #0
 800843e:	d1f7      	bne.n	8008430 <sx12xx_lora_send_async+0xc>
 8008440:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8008444:	d10c      	bne.n	8008460 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8008446:	3944      	subs	r1, #68	; 0x44
 8008448:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 800844a:	4e08      	ldr	r6, [pc, #32]	; (800846c <sx12xx_lora_send_async+0x48>)
 800844c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800844e:	b2d4      	uxtb	r4, r2
 8008450:	4621      	mov	r1, r4
 8008452:	4798      	blx	r3

	Radio.Send(data, data_len);
 8008454:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	4798      	blx	r3

	return 0;
 800845c:	2000      	movs	r0, #0
}
 800845e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8008460:	f06f 000f 	mvn.w	r0, #15
 8008464:	e7fb      	b.n	800845e <sx12xx_lora_send_async+0x3a>
 8008466:	bf00      	nop
 8008468:	20001344 	.word	0x20001344
 800846c:	08013a70 	.word	0x08013a70

08008470 <sx12xx_lora_send>:
{
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008472:	b09d      	sub	sp, #116	; 0x74
 8008474:	af04      	add	r7, sp, #16
 8008476:	4615      	mov	r5, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8008478:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800847c:	63ba      	str	r2, [r7, #56]	; 0x38
 800847e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008480:	2300      	movs	r3, #0
 8008482:	643b      	str	r3, [r7, #64]	; 0x40
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800848c:	633b      	str	r3, [r7, #48]	; 0x30
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008494:	2401      	movs	r4, #1
 8008496:	f364 0304 	bfi	r3, r4, #0, #5
 800849a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800849e:	637a      	str	r2, [r7, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 80084a0:	4b5a      	ldr	r3, [pc, #360]	; (800860c <sx12xx_lora_send+0x19c>)
 80084a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80ae 	beq.w	8008606 <sx12xx_lora_send+0x196>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80084aa:	4613      	mov	r3, r2
 80084ac:	462a      	mov	r2, r5
 80084ae:	f7ff ffb9 	bl	8008424 <sx12xx_lora_send_async>
	if (ret < 0) {
 80084b2:	2800      	cmp	r0, #0
 80084b4:	db6c      	blt.n	8008590 <sx12xx_lora_send+0x120>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80084b6:	4b56      	ldr	r3, [pc, #344]	; (8008610 <sx12xx_lora_send+0x1a0>)
 80084b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80084ba:	4854      	ldr	r0, [pc, #336]	; (800860c <sx12xx_lora_send+0x19c>)
 80084bc:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
				   dev_data.tx_cfg.datarate,
 80084c0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				   dev_data.tx_cfg.coding_rate,
 80084c4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80084c8:	2601      	movs	r6, #1
 80084ca:	9603      	str	r6, [sp, #12]
 80084cc:	fa5f fc85 	uxtb.w	ip, r5
 80084d0:	f8cd c008 	str.w	ip, [sp, #8]
 80084d4:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
 80084d8:	f8cd c004 	str.w	ip, [sp, #4]
 80084dc:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 80084de:	9000      	str	r0, [sp, #0]
 80084e0:	4630      	mov	r0, r6
 80084e2:	47a0      	blx	r4
 80084e4:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 80084e6:	80be      	strh	r6, [r7, #4]
 80084e8:	2302      	movs	r3, #2
 80084ea:	80fb      	strh	r3, [r7, #6]
 80084ec:	466e      	mov	r6, sp
 80084ee:	b088      	sub	sp, #32
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	466b      	mov	r3, sp
 80084f4:	f113 021c 	adds.w	r2, r3, #28
 80084f8:	d04d      	beq.n	8008596 <sx12xx_lora_send+0x126>
 80084fa:	2314      	movs	r3, #20
 80084fc:	2001      	movs	r0, #1
 80084fe:	80b8      	strh	r0, [r7, #4]
 8008500:	b11a      	cbz	r2, 800850a <sx12xx_lora_send+0x9a>
 8008502:	2b04      	cmp	r3, #4
 8008504:	dd01      	ble.n	800850a <sx12xx_lora_send+0x9a>
 8008506:	4843      	ldr	r0, [pc, #268]	; (8008614 <sx12xx_lora_send+0x1a4>)
 8008508:	6108      	str	r0, [r1, #16]
 800850a:	2002      	movs	r0, #2
 800850c:	80f8      	strh	r0, [r7, #6]
 800850e:	b11a      	cbz	r2, 8008518 <sx12xx_lora_send+0xa8>
 8008510:	2b08      	cmp	r3, #8
 8008512:	dd01      	ble.n	8008518 <sx12xx_lora_send+0xa8>
 8008514:	4840      	ldr	r0, [pc, #256]	; (8008618 <sx12xx_lora_send+0x1a8>)
 8008516:	6148      	str	r0, [r1, #20]
 8008518:	b112      	cbz	r2, 8008520 <sx12xx_lora_send+0xb0>
 800851a:	2b0c      	cmp	r3, #12
 800851c:	dd00      	ble.n	8008520 <sx12xx_lora_send+0xb0>
 800851e:	618d      	str	r5, [r1, #24]
 8008520:	b112      	cbz	r2, 8008528 <sx12xx_lora_send+0xb8>
 8008522:	2b10      	cmp	r3, #16
 8008524:	dd00      	ble.n	8008528 <sx12xx_lora_send+0xb8>
 8008526:	61cc      	str	r4, [r1, #28]
 8008528:	2b13      	cmp	r3, #19
 800852a:	dd37      	ble.n	800859c <sx12xx_lora_send+0x12c>
 800852c:	2314      	movs	r3, #20
 800852e:	b12a      	cbz	r2, 800853c <sx12xx_lora_send+0xcc>
 8008530:	2000      	movs	r0, #0
 8008532:	6038      	str	r0, [r7, #0]
 8008534:	2005      	movs	r0, #5
 8008536:	7038      	strb	r0, [r7, #0]
 8008538:	6838      	ldr	r0, [r7, #0]
 800853a:	60c8      	str	r0, [r1, #12]
 800853c:	2100      	movs	r1, #0
 800853e:	f36f 0100 	bfc	r1, #0, #1
 8008542:	f36f 0141 	bfc	r1, #1, #1
 8008546:	f36f 0182 	bfc	r1, #2, #1
 800854a:	f36f 01c5 	bfc	r1, #3, #3
 800854e:	2004      	movs	r0, #4
 8008550:	f360 1188 	bfi	r1, r0, #6, #3
 8008554:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8008558:	f363 2152 	bfi	r1, r3, #9, #10
 800855c:	f36f 41de 	bfc	r1, #19, #12
 8008560:	f36f 71df 	bfc	r1, #31, #1
 8008564:	2300      	movs	r3, #0
 8008566:	482d      	ldr	r0, [pc, #180]	; (800861c <sx12xx_lora_send+0x1ac>)
 8008568:	f007 fa68 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800856c:	46b5      	mov	sp, r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 800856e:	0060      	lsls	r0, r4, #1
			return t * ((uint64_t)to_hz / from_hz);
 8008570:	f3c4 7341 	ubfx	r3, r4, #29, #2
 8008574:	00e2      	lsls	r2, r4, #3
 8008576:	1812      	adds	r2, r2, r0
 8008578:	f143 0300 	adc.w	r3, r3, #0
 800857c:	1892      	adds	r2, r2, r2
 800857e:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8008580:	2101      	movs	r1, #1
 8008582:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008586:	f005 f959 	bl	800d83c <z_impl_k_poll>
	if (ret < 0) {
 800858a:	2800      	cmp	r0, #0
 800858c:	db09      	blt.n	80085a2 <sx12xx_lora_send+0x132>
	return 0;
 800858e:	2000      	movs	r0, #0
}
 8008590:	3764      	adds	r7, #100	; 0x64
 8008592:	46bd      	mov	sp, r7
 8008594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 8008596:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800859a:	e7af      	b.n	80084fc <sx12xx_lora_send+0x8c>
 800859c:	f06f 031b 	mvn.w	r3, #27
 80085a0:	e7c5      	b.n	800852e <sx12xx_lora_send+0xbe>
		LOG_ERR("Packet transmission failed!");
 80085a2:	2201      	movs	r2, #1
 80085a4:	80ba      	strh	r2, [r7, #4]
 80085a6:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <sx12xx_lora_send+0x1b0>)
 80085a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085aa:	2300      	movs	r3, #0
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	2102      	movs	r1, #2
 80085b0:	7039      	strb	r1, [r7, #0]
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6579      	str	r1, [r7, #84]	; 0x54
 80085b6:	4619      	mov	r1, r3
 80085b8:	f363 0100 	bfi	r1, r3, #0, #1
 80085bc:	f363 0141 	bfi	r1, r3, #1, #1
 80085c0:	f363 0182 	bfi	r1, r3, #2, #1
 80085c4:	f363 01c5 	bfi	r1, r3, #3, #3
 80085c8:	f362 1188 	bfi	r1, r2, #6, #3
 80085cc:	2208      	movs	r2, #8
 80085ce:	f362 2152 	bfi	r1, r2, #9, #10
 80085d2:	f363 41de 	bfi	r1, r3, #19, #12
 80085d6:	f363 71df 	bfi	r1, r3, #31, #1
 80085da:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80085de:	480f      	ldr	r0, [pc, #60]	; (800861c <sx12xx_lora_send+0x1ac>)
 80085e0:	f007 fa2c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 80085e4:	4809      	ldr	r0, [pc, #36]	; (800860c <sx12xx_lora_send+0x19c>)
 80085e6:	f7ff fdf1 	bl	80081cc <modem_release>
 80085ea:	b108      	cbz	r0, 80085f0 <sx12xx_lora_send+0x180>
	return 0;
 80085ec:	2000      	movs	r0, #0
 80085ee:	e7cf      	b.n	8008590 <sx12xx_lora_send+0x120>
 80085f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f8:	2101      	movs	r1, #1
 80085fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085fe:	f005 f91d 	bl	800d83c <z_impl_k_poll>
 8008602:	2000      	movs	r0, #0
 8008604:	e7c4      	b.n	8008590 <sx12xx_lora_send+0x120>
		return -EINVAL;
 8008606:	f06f 0015 	mvn.w	r0, #21
 800860a:	e7c1      	b.n	8008590 <sx12xx_lora_send+0x120>
 800860c:	20001300 	.word	0x20001300
 8008610:	08013a70 	.word	0x08013a70
 8008614:	08013858 	.word	0x08013858
 8008618:	0801391c 	.word	0x0801391c
 800861c:	08012760 	.word	0x08012760
 8008620:	08013884 	.word	0x08013884

08008624 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8008624:	b530      	push	{r4, r5, lr}
 8008626:	b09b      	sub	sp, #108	; 0x6c
 8008628:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800862c:	aa10      	add	r2, sp, #64	; 0x40
 800862e:	9210      	str	r2, [sp, #64]	; 0x40
 8008630:	9211      	str	r2, [sp, #68]	; 0x44
 8008632:	2300      	movs	r3, #0
 8008634:	9312      	str	r3, [sp, #72]	; 0x48
 8008636:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8008638:	930b      	str	r3, [sp, #44]	; 0x2c
 800863a:	930c      	str	r3, [sp, #48]	; 0x30
 800863c:	930d      	str	r3, [sp, #52]	; 0x34
 800863e:	930e      	str	r3, [sp, #56]	; 0x38
 8008640:	930f      	str	r3, [sp, #60]	; 0x3c
 8008642:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8008646:	2001      	movs	r0, #1
 8008648:	f360 0304 	bfi	r3, r0, #0, #5
 800864c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8008650:	920f      	str	r2, [sp, #60]	; 0x3c
 8008652:	4b32      	ldr	r3, [pc, #200]	; (800871c <sx12xx_lora_recv+0xf8>)
 8008654:	f3bf 8f5b 	dmb	ish
 8008658:	e853 2f00 	ldrex	r2, [r3]
 800865c:	2a00      	cmp	r2, #0
 800865e:	d103      	bne.n	8008668 <sx12xx_lora_recv+0x44>
 8008660:	e843 0400 	strex	r4, r0, [r3]
 8008664:	2c00      	cmp	r4, #0
 8008666:	d1f7      	bne.n	8008658 <sx12xx_lora_recv+0x34>
 8008668:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800866c:	d153      	bne.n	8008716 <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 800866e:	3b44      	subs	r3, #68	; 0x44
 8008670:	2400      	movs	r4, #0
 8008672:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 8008674:	aa10      	add	r2, sp, #64	; 0x40
 8008676:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8008678:	6499      	str	r1, [r3, #72]	; 0x48
	dev_data.rx_params.size = &size;
 800867a:	f10d 0207 	add.w	r2, sp, #7
 800867e:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.rssi = rssi;
 8008680:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008682:	651a      	str	r2, [r3, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 8008684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008686:	655a      	str	r2, [r3, #84]	; 0x54

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8008688:	4d25      	ldr	r5, [pc, #148]	; (8008720 <sx12xx_lora_recv+0xfc>)
 800868a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800868c:	21ff      	movs	r1, #255	; 0xff
 800868e:	4798      	blx	r3
	Radio.Rx(0);
 8008690:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008692:	4620      	mov	r0, r4
 8008694:	4798      	blx	r3
 8008696:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800869a:	2101      	movs	r1, #1
 800869c:	a80b      	add	r0, sp, #44	; 0x2c
 800869e:	f005 f8cd 	bl	800d83c <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80086a2:	1e04      	subs	r4, r0, #0
 80086a4:	db04      	blt.n	80086b0 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80086a6:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80086aa:	4620      	mov	r0, r4
 80086ac:	b01b      	add	sp, #108	; 0x6c
 80086ae:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 80086b0:	481c      	ldr	r0, [pc, #112]	; (8008724 <sx12xx_lora_recv+0x100>)
 80086b2:	f7ff fd8b 	bl	80081cc <modem_release>
 80086b6:	b950      	cbnz	r0, 80086ce <sx12xx_lora_recv+0xaa>
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086c0:	2101      	movs	r1, #1
 80086c2:	a80b      	add	r0, sp, #44	; 0x2c
 80086c4:	f005 f8ba 	bl	800d83c <z_impl_k_poll>
			return size;
 80086c8:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80086cc:	e7ed      	b.n	80086aa <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 80086ce:	2301      	movs	r3, #1
 80086d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <sx12xx_lora_recv+0x104>)
 80086d6:	9318      	str	r3, [sp, #96]	; 0x60
 80086d8:	2300      	movs	r3, #0
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	2202      	movs	r2, #2
 80086de:	f88d 2008 	strb.w	r2, [sp, #8]
 80086e2:	9a02      	ldr	r2, [sp, #8]
 80086e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80086e6:	4619      	mov	r1, r3
 80086e8:	f363 0100 	bfi	r1, r3, #0, #1
 80086ec:	f363 0141 	bfi	r1, r3, #1, #1
 80086f0:	f363 0182 	bfi	r1, r3, #2, #1
 80086f4:	f363 01c5 	bfi	r1, r3, #3, #3
 80086f8:	2203      	movs	r2, #3
 80086fa:	f362 1188 	bfi	r1, r2, #6, #3
 80086fe:	2208      	movs	r2, #8
 8008700:	f362 2152 	bfi	r1, r2, #9, #10
 8008704:	f363 41de 	bfi	r1, r3, #19, #12
 8008708:	f363 71df 	bfi	r1, r3, #31, #1
 800870c:	aa17      	add	r2, sp, #92	; 0x5c
 800870e:	4807      	ldr	r0, [pc, #28]	; (800872c <sx12xx_lora_recv+0x108>)
 8008710:	f007 f994 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return ret;
 8008714:	e7c9      	b.n	80086aa <sx12xx_lora_recv+0x86>
		return -EBUSY;
 8008716:	f06f 040f 	mvn.w	r4, #15
 800871a:	e7c6      	b.n	80086aa <sx12xx_lora_recv+0x86>
 800871c:	20001344 	.word	0x20001344
 8008720:	08013a70 	.word	0x08013a70
 8008724:	20001300 	.word	0x20001300
 8008728:	080138a0 	.word	0x080138a0
 800872c:	08012760 	.word	0x08012760

08008730 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8008730:	b510      	push	{r4, lr}
 8008732:	b090      	sub	sp, #64	; 0x40
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8008734:	4613      	mov	r3, r2
 8008736:	b302      	cbz	r2, 800877a <sx12xx_lora_recv_async+0x4a>
 8008738:	b103      	cbz	r3, 800873c <sx12xx_lora_recv_async+0xc>
 800873a:	b301      	cbz	r1, 800877e <sx12xx_lora_recv_async+0x4e>
      LOG_ERR("One of callback functions cannot be equal NULL");
      return -EINVAL;
  }

	/* Cancel ongoing reception */
	if (cb == NULL) {
 800873c:	2900      	cmp	r1, #0
 800873e:	d043      	beq.n	80087c8 <sx12xx_lora_recv_async+0x98>
 8008740:	4a27      	ldr	r2, [pc, #156]	; (80087e0 <sx12xx_lora_recv_async+0xb0>)
 8008742:	2001      	movs	r0, #1
 8008744:	f3bf 8f5b 	dmb	ish
 8008748:	e852 4f00 	ldrex	r4, [r2]
 800874c:	2c00      	cmp	r4, #0
 800874e:	d104      	bne.n	800875a <sx12xx_lora_recv_async+0x2a>
 8008750:	e842 0c00 	strex	ip, r0, [r2]
 8008754:	f1bc 0f00 	cmp.w	ip, #0
 8008758:	d1f6      	bne.n	8008748 <sx12xx_lora_recv_async+0x18>
 800875a:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 800875e:	d13c      	bne.n	80087da <sx12xx_lora_recv_async+0xaa>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 8008760:	3a44      	subs	r2, #68	; 0x44
 8008762:	6091      	str	r1, [r2, #8]
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 8008764:	60d3      	str	r3, [r2, #12]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8008766:	4c1f      	ldr	r4, [pc, #124]	; (80087e4 <sx12xx_lora_recv_async+0xb4>)
 8008768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800876a:	21ff      	movs	r1, #255	; 0xff
 800876c:	4798      	blx	r3
	Radio.Rx(0);
 800876e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008770:	2000      	movs	r0, #0
 8008772:	4798      	blx	r3

	return 0;
 8008774:	2000      	movs	r0, #0
}
 8008776:	b010      	add	sp, #64	; 0x40
 8008778:	bd10      	pop	{r4, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 800877a:	2900      	cmp	r1, #0
 800877c:	d0dc      	beq.n	8008738 <sx12xx_lora_recv_async+0x8>
      LOG_ERR("One of callback functions cannot be equal NULL");
 800877e:	2201      	movs	r2, #1
 8008780:	f8ad 2008 	strh.w	r2, [sp, #8]
 8008784:	4b18      	ldr	r3, [pc, #96]	; (80087e8 <sx12xx_lora_recv_async+0xb8>)
 8008786:	930e      	str	r3, [sp, #56]	; 0x38
 8008788:	2300      	movs	r3, #0
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	2102      	movs	r1, #2
 800878e:	f88d 1004 	strb.w	r1, [sp, #4]
 8008792:	9901      	ldr	r1, [sp, #4]
 8008794:	910d      	str	r1, [sp, #52]	; 0x34
 8008796:	4619      	mov	r1, r3
 8008798:	f363 0100 	bfi	r1, r3, #0, #1
 800879c:	f363 0141 	bfi	r1, r3, #1, #1
 80087a0:	f363 0182 	bfi	r1, r3, #2, #1
 80087a4:	f363 01c5 	bfi	r1, r3, #3, #3
 80087a8:	f362 1188 	bfi	r1, r2, #6, #3
 80087ac:	2208      	movs	r2, #8
 80087ae:	f362 2152 	bfi	r1, r2, #9, #10
 80087b2:	f363 41de 	bfi	r1, r3, #19, #12
 80087b6:	f363 71df 	bfi	r1, r3, #31, #1
 80087ba:	aa0d      	add	r2, sp, #52	; 0x34
 80087bc:	480b      	ldr	r0, [pc, #44]	; (80087ec <sx12xx_lora_recv_async+0xbc>)
 80087be:	f007 f93d 	bl	800fa3c <z_impl_z_log_msg2_static_create>
      return -EINVAL;
 80087c2:	f06f 0015 	mvn.w	r0, #21
 80087c6:	e7d6      	b.n	8008776 <sx12xx_lora_recv_async+0x46>
		if (!modem_release(&dev_data)) {
 80087c8:	4809      	ldr	r0, [pc, #36]	; (80087f0 <sx12xx_lora_recv_async+0xc0>)
 80087ca:	f7ff fcff 	bl	80081cc <modem_release>
 80087ce:	b108      	cbz	r0, 80087d4 <sx12xx_lora_recv_async+0xa4>
		return 0;
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7d0      	b.n	8008776 <sx12xx_lora_recv_async+0x46>
			return -EINVAL;
 80087d4:	f06f 0015 	mvn.w	r0, #21
 80087d8:	e7cd      	b.n	8008776 <sx12xx_lora_recv_async+0x46>
		return -EBUSY;
 80087da:	f06f 000f 	mvn.w	r0, #15
 80087de:	e7ca      	b.n	8008776 <sx12xx_lora_recv_async+0x46>
 80087e0:	20001344 	.word	0x20001344
 80087e4:	08013a70 	.word	0x08013a70
 80087e8:	080138b0 	.word	0x080138b0
 80087ec:	08012760 	.word	0x08012760
 80087f0:	20001300 	.word	0x20001300

080087f4 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	460c      	mov	r4, r1
 80087fa:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <sx12xx_lora_config+0xb4>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	f3bf 8f5b 	dmb	ish
 8008802:	e853 1f00 	ldrex	r1, [r3]
 8008806:	2900      	cmp	r1, #0
 8008808:	d103      	bne.n	8008812 <sx12xx_lora_config+0x1e>
 800880a:	e843 2000 	strex	r0, r2, [r3]
 800880e:	2800      	cmp	r0, #0
 8008810:	d1f7      	bne.n	8008802 <sx12xx_lora_config+0xe>
 8008812:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8008816:	d143      	bne.n	80088a0 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8008818:	4b24      	ldr	r3, [pc, #144]	; (80088ac <sx12xx_lora_config+0xb8>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	4798      	blx	r3

	if (config->tx) {
 8008820:	7b63      	ldrb	r3, [r4, #13]
 8008822:	b9eb      	cbnz	r3, 8008860 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8008824:	7ae2      	ldrb	r2, [r4, #11]
 8008826:	2a00      	cmp	r2, #0
 8008828:	d038      	beq.n	800889c <sx12xx_lora_config+0xa8>
 800882a:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 800882c:	4b1f      	ldr	r3, [pc, #124]	; (80088ac <sx12xx_lora_config+0xb8>)
 800882e:	699d      	ldr	r5, [r3, #24]
 8008830:	2001      	movs	r0, #1
 8008832:	9009      	str	r0, [sp, #36]	; 0x24
 8008834:	2300      	movs	r3, #0
 8008836:	9308      	str	r3, [sp, #32]
 8008838:	9307      	str	r3, [sp, #28]
 800883a:	9306      	str	r3, [sp, #24]
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	9104      	str	r1, [sp, #16]
 8008840:	9203      	str	r2, [sp, #12]
 8008842:	220a      	movs	r2, #10
 8008844:	9202      	str	r2, [sp, #8]
 8008846:	8922      	ldrh	r2, [r4, #8]
 8008848:	9201      	str	r2, [sp, #4]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	79a3      	ldrb	r3, [r4, #6]
 800884e:	7962      	ldrb	r2, [r4, #5]
 8008850:	7921      	ldrb	r1, [r4, #4]
 8008852:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8008854:	4816      	ldr	r0, [pc, #88]	; (80088b0 <sx12xx_lora_config+0xbc>)
 8008856:	f7ff fcb9 	bl	80081cc <modem_release>
	return 0;
 800885a:	2000      	movs	r0, #0
}
 800885c:	b00a      	add	sp, #40	; 0x28
 800885e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8008860:	4d14      	ldr	r5, [pc, #80]	; (80088b4 <sx12xx_lora_config+0xc0>)
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	6861      	ldr	r1, [r4, #4]
 8008866:	68a2      	ldr	r2, [r4, #8]
 8008868:	68e3      	ldr	r3, [r4, #12]
 800886a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800886c:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <sx12xx_lora_config+0xb8>)
 800886e:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8008870:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8008872:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8008874:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8008878:	9208      	str	r2, [sp, #32]
 800887a:	2200      	movs	r2, #0
 800887c:	9207      	str	r2, [sp, #28]
 800887e:	9206      	str	r2, [sp, #24]
 8008880:	9205      	str	r2, [sp, #20]
 8008882:	2001      	movs	r0, #1
 8008884:	9004      	str	r0, [sp, #16]
 8008886:	7ae6      	ldrb	r6, [r4, #11]
 8008888:	9603      	str	r6, [sp, #12]
 800888a:	8926      	ldrh	r6, [r4, #8]
 800888c:	9602      	str	r6, [sp, #8]
 800888e:	9101      	str	r1, [sp, #4]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	7923      	ldrb	r3, [r4, #4]
 8008894:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8008898:	47a8      	blx	r5
 800889a:	e7db      	b.n	8008854 <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 800889c:	2100      	movs	r1, #0
 800889e:	e7c5      	b.n	800882c <sx12xx_lora_config+0x38>
		return -EBUSY;
 80088a0:	f06f 000f 	mvn.w	r0, #15
 80088a4:	e7da      	b.n	800885c <sx12xx_lora_config+0x68>
 80088a6:	bf00      	nop
 80088a8:	20001344 	.word	0x20001344
 80088ac:	08013a70 	.word	0x08013a70
 80088b0:	20001300 	.word	0x20001300
 80088b4:	20001334 	.word	0x20001334

080088b8 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80088b8:	b530      	push	{r4, r5, lr}
 80088ba:	b099      	sub	sp, #100	; 0x64
 80088bc:	4608      	mov	r0, r1
 80088be:	4611      	mov	r1, r2
 80088c0:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80088c2:	ab0e      	add	r3, sp, #56	; 0x38
 80088c4:	930e      	str	r3, [sp, #56]	; 0x38
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	2400      	movs	r4, #0
 80088ca:	9410      	str	r4, [sp, #64]	; 0x40
 80088cc:	9411      	str	r4, [sp, #68]	; 0x44
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80088ce:	9409      	str	r4, [sp, #36]	; 0x24
 80088d0:	940a      	str	r4, [sp, #40]	; 0x28
 80088d2:	940b      	str	r4, [sp, #44]	; 0x2c
 80088d4:	940c      	str	r4, [sp, #48]	; 0x30
 80088d6:	940d      	str	r4, [sp, #52]	; 0x34
 80088d8:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 80088dc:	2401      	movs	r4, #1
 80088de:	f364 0c04 	bfi	ip, r4, #0, #5
 80088e2:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
 80088e6:	930d      	str	r3, [sp, #52]	; 0x34
 80088e8:	4b32      	ldr	r3, [pc, #200]	; (80089b4 <sx12xx_lora_test_cw+0xfc>)
 80088ea:	f3bf 8f5b 	dmb	ish
 80088ee:	e853 2f00 	ldrex	r2, [r3]
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d104      	bne.n	8008900 <sx12xx_lora_test_cw+0x48>
 80088f6:	e843 4c00 	strex	ip, r4, [r3]
 80088fa:	f1bc 0f00 	cmp.w	ip, #0
 80088fe:	d1f6      	bne.n	80088ee <sx12xx_lora_test_cw+0x36>
 8008900:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8008904:	d153      	bne.n	80089ae <sx12xx_lora_test_cw+0xf6>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 8008906:	3b44      	subs	r3, #68	; 0x44
 8008908:	aa0e      	add	r2, sp, #56	; 0x38
 800890a:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 800890c:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <sx12xx_lora_test_cw+0x100>)
 800890e:	615a      	str	r2, [r3, #20]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <sx12xx_lora_test_cw+0x104>)
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	462a      	mov	r2, r5
 8008916:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 8008918:	b12d      	cbz	r5, 8008926 <sx12xx_lora_test_cw+0x6e>
 800891a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800891e:	fb02 f105 	mul.w	r1, r2, r5
 8008922:	2300      	movs	r3, #0
 8008924:	e001      	b.n	800892a <sx12xx_lora_test_cw+0x72>
 8008926:	2100      	movs	r1, #0
 8008928:	460b      	mov	r3, r1
 800892a:	008a      	lsls	r2, r1, #2
 800892c:	1852      	adds	r2, r2, r1
 800892e:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 8008932:	1892      	adds	r2, r2, r2
 8008934:	415b      	adcs	r3, r3
 8008936:	2101      	movs	r1, #1
 8008938:	a809      	add	r0, sp, #36	; 0x24
 800893a:	f004 ff7f 	bl	800d83c <z_impl_k_poll>
    if (ret < 0) {
 800893e:	2800      	cmp	r0, #0
 8008940:	db02      	blt.n	8008948 <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 8008942:	2000      	movs	r0, #0
}
 8008944:	b019      	add	sp, #100	; 0x64
 8008946:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("CW test failed!");
 8008948:	2201      	movs	r2, #1
 800894a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800894e:	4b1c      	ldr	r3, [pc, #112]	; (80089c0 <sx12xx_lora_test_cw+0x108>)
 8008950:	9316      	str	r3, [sp, #88]	; 0x58
 8008952:	2300      	movs	r3, #0
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	2102      	movs	r1, #2
 8008958:	f88d 1000 	strb.w	r1, [sp]
 800895c:	9900      	ldr	r1, [sp, #0]
 800895e:	9115      	str	r1, [sp, #84]	; 0x54
 8008960:	4619      	mov	r1, r3
 8008962:	f363 0100 	bfi	r1, r3, #0, #1
 8008966:	f363 0141 	bfi	r1, r3, #1, #1
 800896a:	f363 0182 	bfi	r1, r3, #2, #1
 800896e:	f363 01c5 	bfi	r1, r3, #3, #3
 8008972:	f362 1188 	bfi	r1, r2, #6, #3
 8008976:	2208      	movs	r2, #8
 8008978:	f362 2152 	bfi	r1, r2, #9, #10
 800897c:	f363 41de 	bfi	r1, r3, #19, #12
 8008980:	f363 71df 	bfi	r1, r3, #31, #1
 8008984:	aa15      	add	r2, sp, #84	; 0x54
 8008986:	480f      	ldr	r0, [pc, #60]	; (80089c4 <sx12xx_lora_test_cw+0x10c>)
 8008988:	f007 f858 	bl	800fa3c <z_impl_z_log_msg2_static_create>
        if (!modem_release(&dev_data)) {
 800898c:	480e      	ldr	r0, [pc, #56]	; (80089c8 <sx12xx_lora_test_cw+0x110>)
 800898e:	f7ff fc1d 	bl	80081cc <modem_release>
 8008992:	b118      	cbz	r0, 800899c <sx12xx_lora_test_cw+0xe4>
        dev_data.events.TxTimeout = NULL;
 8008994:	2000      	movs	r0, #0
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <sx12xx_lora_test_cw+0x110>)
 8008998:	6158      	str	r0, [r3, #20]
 800899a:	e7d3      	b.n	8008944 <sx12xx_lora_test_cw+0x8c>
 800899c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089a4:	2101      	movs	r1, #1
 80089a6:	a809      	add	r0, sp, #36	; 0x24
 80089a8:	f004 ff48 	bl	800d83c <z_impl_k_poll>
 80089ac:	e7f2      	b.n	8008994 <sx12xx_lora_test_cw+0xdc>
		return -EBUSY;
 80089ae:	f06f 000f 	mvn.w	r0, #15
 80089b2:	e7c7      	b.n	8008944 <sx12xx_lora_test_cw+0x8c>
 80089b4:	20001344 	.word	0x20001344
 80089b8:	0800821d 	.word	0x0800821d
 80089bc:	08013a70 	.word	0x08013a70
 80089c0:	080138e0 	.word	0x080138e0
 80089c4:	08012760 	.word	0x08012760
 80089c8:	20001300 	.word	0x20001300

080089cc <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 80089cc:	b189      	cbz	r1, 80089f2 <sx12xx_lora_time_on_air+0x26>
{
 80089ce:	b510      	push	{r4, lr}
 80089d0:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <sx12xx_lora_time_on_air+0x2c>)
 80089d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80089d6:	2001      	movs	r0, #1
 80089d8:	9003      	str	r0, [sp, #12]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	9202      	str	r2, [sp, #8]
 80089de:	7acb      	ldrb	r3, [r1, #11]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	890b      	ldrh	r3, [r1, #8]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	798b      	ldrb	r3, [r1, #6]
 80089e8:	794a      	ldrb	r2, [r1, #5]
 80089ea:	7909      	ldrb	r1, [r1, #4]
 80089ec:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 80089ee:	b004      	add	sp, #16
 80089f0:	bd10      	pop	{r4, pc}
        return -EINVAL;
 80089f2:	f06f 0015 	mvn.w	r0, #21
}
 80089f6:	4770      	bx	lr
 80089f8:	08013a70 	.word	0x08013a70

080089fc <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 80089fc:	b311      	cbz	r1, 8008a44 <sx12xx_lora_is_channel_free+0x48>
{
 80089fe:	b510      	push	{r4, lr}
 8008a00:	4608      	mov	r0, r1
 8008a02:	4915      	ldr	r1, [pc, #84]	; (8008a58 <sx12xx_lora_is_channel_free+0x5c>)
 8008a04:	2401      	movs	r4, #1
 8008a06:	f3bf 8f5b 	dmb	ish
 8008a0a:	e851 cf00 	ldrex	ip, [r1]
 8008a0e:	f1bc 0f00 	cmp.w	ip, #0
 8008a12:	d104      	bne.n	8008a1e <sx12xx_lora_is_channel_free+0x22>
 8008a14:	e841 4e00 	strex	lr, r4, [r1]
 8008a18:	f1be 0f00 	cmp.w	lr, #0
 8008a1c:	d1f5      	bne.n	8008a0a <sx12xx_lora_is_channel_free+0xe>
 8008a1e:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8008a22:	d112      	bne.n	8008a4a <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8008a24:	490d      	ldr	r1, [pc, #52]	; (8008a5c <sx12xx_lora_is_channel_free+0x60>)
 8008a26:	690c      	ldr	r4, [r1, #16]
 8008a28:	f890 c004 	ldrb.w	ip, [r0, #4]
 8008a2c:	490c      	ldr	r1, [pc, #48]	; (8008a60 <sx12xx_lora_is_channel_free+0x64>)
 8008a2e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008a32:	6800      	ldr	r0, [r0, #0]
 8008a34:	47a0      	blx	r4
 8008a36:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 8008a38:	480a      	ldr	r0, [pc, #40]	; (8008a64 <sx12xx_lora_is_channel_free+0x68>)
 8008a3a:	f7ff fbc7 	bl	80081cc <modem_release>
 8008a3e:	b138      	cbz	r0, 8008a50 <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 8008a40:	4620      	mov	r0, r4
}
 8008a42:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8008a44:	f06f 0015 	mvn.w	r0, #21
}
 8008a48:	4770      	bx	lr
        return -EBUSY;
 8008a4a:	f06f 000f 	mvn.w	r0, #15
 8008a4e:	e7f8      	b.n	8008a42 <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 8008a50:	f06f 0015 	mvn.w	r0, #21
 8008a54:	e7f5      	b.n	8008a42 <sx12xx_lora_is_channel_free+0x46>
 8008a56:	bf00      	nop
 8008a58:	20001344 	.word	0x20001344
 8008a5c:	08013a70 	.word	0x08013a70
 8008a60:	08013930 	.word	0x08013930
 8008a64:	20001300 	.word	0x20001300

08008a68 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8008a68:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <sx12xx_init+0x40>)
 8008a6c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8008a70:	2400      	movs	r4, #0
 8008a72:	f3bf 8f5b 	dmb	ish
 8008a76:	e852 1f00 	ldrex	r1, [r2]
 8008a7a:	e842 4500 	strex	r5, r4, [r2]
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	d1f9      	bne.n	8008a76 <sx12xx_init+0xe>
 8008a82:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 8008a86:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8008a88:	4a08      	ldr	r2, [pc, #32]	; (8008aac <sx12xx_init+0x44>)
 8008a8a:	611a      	str	r2, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8008a8c:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <sx12xx_init+0x48>)
 8008a8e:	619a      	str	r2, [r3, #24]
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <sx12xx_init+0x4c>)
 8008a92:	621a      	str	r2, [r3, #32]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 8008a94:	61da      	str	r2, [r3, #28]
	Radio.Init(&dev_data.events);
 8008a96:	4d08      	ldr	r5, [pc, #32]	; (8008ab8 <sx12xx_init+0x50>)
 8008a98:	682a      	ldr	r2, [r5, #0]
 8008a9a:	f103 0010 	add.w	r0, r3, #16
 8008a9e:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8008aa0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008aa2:	4798      	blx	r3

	return 0;
}
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20001300 	.word	0x20001300
 8008aac:	080082bd 	.word	0x080082bd
 8008ab0:	080082d9 	.word	0x080082d9
 8008ab4:	0800823d 	.word	0x0800823d
 8008ab8:	08013a70 	.word	0x08013a70

08008abc <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8008abc:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8008abe:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <sx127x_dio_work_handle+0x14>)
 8008ac0:	1ac0      	subs	r0, r0, r3
 8008ac2:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <sx127x_dio_work_handle+0x18>)
 8008ac6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008aca:	2000      	movs	r0, #0
 8008acc:	4798      	blx	r3
}
 8008ace:	bd08      	pop	{r3, pc}
 8008ad0:	200013ac 	.word	0x200013ac
 8008ad4:	200001fc 	.word	0x200001fc

08008ad8 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8008ae0:	f10d 0007 	add.w	r0, sp, #7
 8008ae4:	9006      	str	r0, [sp, #24]
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	9007      	str	r0, [sp, #28]
 8008aea:	9208      	str	r2, [sp, #32]
 8008aec:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8008aee:	ab06      	add	r3, sp, #24
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	2302      	movs	r3, #2
 8008af4:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8008af6:	b149      	cbz	r1, 8008b0c <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8008af8:	490b      	ldr	r1, [pc, #44]	; (8008b28 <sx127x_transceive+0x50>)
 8008afa:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8008afc:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8008afe:	681c      	ldr	r4, [r3, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	aa04      	add	r2, sp, #16
 8008b04:	3108      	adds	r1, #8
 8008b06:	47a0      	blx	r4
}
 8008b08:	b00a      	add	sp, #40	; 0x28
 8008b0a:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8008b0c:	ab06      	add	r3, sp, #24
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	2302      	movs	r3, #2
 8008b12:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8008b14:	4904      	ldr	r1, [pc, #16]	; (8008b28 <sx127x_transceive+0x50>)
 8008b16:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8008b18:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	ab02      	add	r3, sp, #8
 8008b1e:	aa04      	add	r2, sp, #16
 8008b20:	3108      	adds	r1, #8
 8008b22:	47a0      	blx	r4
 8008b24:	e7f0      	b.n	8008b08 <sx127x_transceive+0x30>
 8008b26:	bf00      	nop
 8008b28:	20001388 	.word	0x20001388

08008b2c <sx127x_irq_callback>:
{
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4605      	mov	r5, r0
 8008b30:	fa92 f6a2 	rbit	r6, r2
 8008b34:	fab6 f686 	clz	r6, r6
 8008b38:	b90a      	cbnz	r2, 8008b3e <sx127x_irq_callback+0x12>
 8008b3a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8008b3e:	2400      	movs	r4, #0
 8008b40:	e000      	b.n	8008b44 <sx127x_irq_callback+0x18>
 8008b42:	3401      	adds	r4, #1
 8008b44:	2c03      	cmp	r4, #3
 8008b46:	d813      	bhi.n	8008b70 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8008b48:	1d23      	adds	r3, r4, #4
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <sx127x_irq_callback+0x48>)
 8008b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	42ab      	cmp	r3, r5
 8008b54:	d1f5      	bne.n	8008b42 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <sx127x_irq_callback+0x4c>)
 8008b58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b5c:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8008b5e:	42b3      	cmp	r3, r6
 8008b60:	d1ef      	bne.n	8008b42 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8008b62:	1ca0      	adds	r0, r4, #2
 8008b64:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8008b68:	3004      	adds	r0, #4
 8008b6a:	f003 fdfb 	bl	800c764 <k_work_submit>
 8008b6e:	e7e8      	b.n	8008b42 <sx127x_irq_callback+0x16>
}
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	bf00      	nop
 8008b74:	20001388 	.word	0x20001388
 8008b78:	08013adc 	.word	0x08013adc

08008b7c <SX1276Reset>:
{
 8008b7c:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8008b7e:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <SX1276Reset+0x64>)
 8008b80:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8008b82:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f013 0f01 	tst.w	r3, #1
 8008b8a:	d11b      	bne.n	8008bc4 <SX1276Reset+0x48>
 8008b8c:	2301      	movs	r3, #1
	if (value != 0)	{
 8008b8e:	b1db      	cbz	r3, 8008bc8 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8008b90:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	2101      	movs	r1, #1
 8008b96:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8008b98:	200a      	movs	r0, #10
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	f004 f9c0 	bl	800cf20 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <SX1276Reset+0x64>)
 8008ba2:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8008ba4:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f013 0f01 	tst.w	r3, #1
 8008bac:	d111      	bne.n	8008bd2 <SX1276Reset+0x56>
 8008bae:	2300      	movs	r3, #0
	if (value != 0)	{
 8008bb0:	b18b      	cbz	r3, 8008bd6 <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8008bb2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	4798      	blx	r3
 8008bba:	203c      	movs	r0, #60	; 0x3c
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f004 f9af 	bl	800cf20 <z_impl_k_sleep>
}
 8008bc2:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e7e2      	b.n	8008b8e <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8008bc8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4798      	blx	r3
 8008bd0:	e7e2      	b.n	8008b98 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e7ec      	b.n	8008bb0 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8008bd6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4798      	blx	r3
 8008bde:	e7ec      	b.n	8008bba <SX1276Reset+0x3e>
 8008be0:	20001388 	.word	0x20001388

08008be4 <SX1276IoIrqInit>:
{
 8008be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be6:	b095      	sub	sp, #84	; 0x54
 8008be8:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8008bea:	2400      	movs	r4, #0
 8008bec:	e04c      	b.n	8008c88 <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8008bee:	4b5a      	ldr	r3, [pc, #360]	; (8008d58 <SX1276IoIrqInit+0x174>)
 8008bf0:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8008bf4:	9302      	str	r3, [sp, #8]
 8008bf6:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <SX1276IoIrqInit+0x178>)
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	9000      	str	r0, [sp, #0]
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4957      	ldr	r1, [pc, #348]	; (8008d60 <SX1276IoIrqInit+0x17c>)
 8008c02:	f007 ffbb 	bl	8010b7c <z_log_msg2_runtime_create>
}
 8008c06:	b015      	add	sp, #84	; 0x54
 8008c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8008c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8008c0e:	f013 0f01 	tst.w	r3, #1
 8008c12:	d06f      	beq.n	8008cf4 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8008c14:	2301      	movs	r3, #1
 8008c16:	fa03 fc01 	lsl.w	ip, r3, r1
 8008c1a:	6833      	ldr	r3, [r6, #0]
 8008c1c:	ea43 030c 	orr.w	r3, r3, ip
 8008c20:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8008c26:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008c2a:	4b4e      	ldr	r3, [pc, #312]	; (8008d64 <SX1276IoIrqInit+0x180>)
 8008c2c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8008c30:	4b49      	ldr	r3, [pc, #292]	; (8008d58 <SX1276IoIrqInit+0x174>)
 8008c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c36:	791e      	ldrb	r6, [r3, #4]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	40b3      	lsls	r3, r6
	callback->handler = handler;
 8008c3c:	4a4a      	ldr	r2, [pc, #296]	; (8008d68 <SX1276IoIrqInit+0x184>)
 8008c3e:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8008c40:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8008c42:	1d23      	adds	r3, r4, #4
 8008c44:	4a49      	ldr	r2, [pc, #292]	; (8008d6c <SX1276IoIrqInit+0x188>)
 8008c46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c4a:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8008c4c:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d057      	beq.n	8008d04 <SX1276IoIrqInit+0x120>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8008c54:	2201      	movs	r2, #1
 8008c56:	4798      	blx	r3
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	db56      	blt.n	8008d0a <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8008c5c:	1d23      	adds	r3, r4, #4
 8008c5e:	4a43      	ldr	r2, [pc, #268]	; (8008d6c <SX1276IoIrqInit+0x188>)
 8008c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c64:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8008c66:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8008c68:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8008c70:	421a      	tst	r2, r3
 8008c72:	d16d      	bne.n	8008d50 <SX1276IoIrqInit+0x16c>
 8008c74:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8008c78:	698f      	ldr	r7, [r1, #24]
 8008c7a:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8008c7e:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8008c82:	4631      	mov	r1, r6
 8008c84:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8008c86:	3401      	adds	r4, #1
 8008c88:	2c03      	cmp	r4, #3
 8008c8a:	d8bc      	bhi.n	8008c06 <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 8008c8c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0f8      	beq.n	8008c86 <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8008c94:	4b30      	ldr	r3, [pc, #192]	; (8008d58 <SX1276IoIrqInit+0x174>)
 8008c96:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8008c9a:	f002 ffb3 	bl	800bc04 <z_impl_device_get_binding>
 8008c9e:	1d23      	adds	r3, r4, #4
 8008ca0:	4a32      	ldr	r2, [pc, #200]	; (8008d6c <SX1276IoIrqInit+0x188>)
 8008ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ca6:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d0a0      	beq.n	8008bee <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8008cac:	4e2f      	ldr	r6, [pc, #188]	; (8008d6c <SX1276IoIrqInit+0x188>)
 8008cae:	1ca0      	adds	r0, r4, #2
 8008cb0:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8008cb4:	492e      	ldr	r1, [pc, #184]	; (8008d70 <SX1276IoIrqInit+0x18c>)
 8008cb6:	3004      	adds	r0, #4
 8008cb8:	f008 fbe0 	bl	801147c <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8008cbc:	1d23      	adds	r3, r4, #4
 8008cbe:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8008cc2:	6870      	ldr	r0, [r6, #4]
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <SX1276IoIrqInit+0x174>)
 8008cc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cca:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8008ccc:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8008cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8008cd6:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8008cd8:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8008cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	d093      	beq.n	8008c0a <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8008ce2:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8008ce6:	d090      	beq.n	8008c0a <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8008ce8:	f013 0f01 	tst.w	r3, #1
 8008cec:	d08d      	beq.n	8008c0a <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8008cee:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8008cf2:	e78a      	b.n	8008c0a <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	fa03 fc01 	lsl.w	ip, r3, r1
 8008cfa:	6833      	ldr	r3, [r6, #0]
 8008cfc:	ea23 030c 	bic.w	r3, r3, ip
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	e78e      	b.n	8008c22 <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8008d04:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008d08:	e7a6      	b.n	8008c58 <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8008d10:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <SX1276IoIrqInit+0x190>)
 8008d12:	9312      	str	r3, [sp, #72]	; 0x48
 8008d14:	2300      	movs	r3, #0
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	2102      	movs	r1, #2
 8008d1a:	f88d 1014 	strb.w	r1, [sp, #20]
 8008d1e:	9905      	ldr	r1, [sp, #20]
 8008d20:	9111      	str	r1, [sp, #68]	; 0x44
 8008d22:	4619      	mov	r1, r3
 8008d24:	f363 0100 	bfi	r1, r3, #0, #1
 8008d28:	f363 0141 	bfi	r1, r3, #1, #1
 8008d2c:	f363 0182 	bfi	r1, r3, #2, #1
 8008d30:	f363 01c5 	bfi	r1, r3, #3, #3
 8008d34:	f362 1188 	bfi	r1, r2, #6, #3
 8008d38:	2208      	movs	r2, #8
 8008d3a:	f362 2152 	bfi	r1, r2, #9, #10
 8008d3e:	f363 41de 	bfi	r1, r3, #19, #12
 8008d42:	f363 71df 	bfi	r1, r3, #31, #1
 8008d46:	aa11      	add	r2, sp, #68	; 0x44
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <SX1276IoIrqInit+0x17c>)
 8008d4a:	f006 fe77 	bl	800fa3c <z_impl_z_log_msg2_static_create>
			return;
 8008d4e:	e75a      	b.n	8008c06 <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8008d50:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8008d54:	e790      	b.n	8008c78 <SX1276IoIrqInit+0x94>
 8008d56:	bf00      	nop
 8008d58:	08013adc 	.word	0x08013adc
 8008d5c:	08013818 	.word	0x08013818
 8008d60:	08012758 	.word	0x08012758
 8008d64:	20001358 	.word	0x20001358
 8008d68:	08008b2d 	.word	0x08008b2d
 8008d6c:	20001388 	.word	0x20001388
 8008d70:	08008abd 	.word	0x08008abd
 8008d74:	0801393c 	.word	0x0801393c

08008d78 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	b090      	sub	sp, #64	; 0x40
 8008d7c:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8008d7e:	b2c0      	uxtb	r0, r0
 8008d80:	f007 ff0e 	bl	8010ba0 <sx127x_read>
	if (ret < 0) {
 8008d84:	2800      	cmp	r0, #0
 8008d86:	db01      	blt.n	8008d8c <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8008d88:	b010      	add	sp, #64	; 0x40
 8008d8a:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8008d92:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <SX1276ReadBuffer+0x5c>)
 8008d94:	930e      	str	r3, [sp, #56]	; 0x38
 8008d96:	940f      	str	r4, [sp, #60]	; 0x3c
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	2103      	movs	r1, #3
 8008d9e:	f88d 1004 	strb.w	r1, [sp, #4]
 8008da2:	9901      	ldr	r1, [sp, #4]
 8008da4:	910d      	str	r1, [sp, #52]	; 0x34
 8008da6:	4619      	mov	r1, r3
 8008da8:	f363 0100 	bfi	r1, r3, #0, #1
 8008dac:	f363 0141 	bfi	r1, r3, #1, #1
 8008db0:	f363 0182 	bfi	r1, r3, #2, #1
 8008db4:	f363 01c5 	bfi	r1, r3, #3, #3
 8008db8:	f362 1188 	bfi	r1, r2, #6, #3
 8008dbc:	220c      	movs	r2, #12
 8008dbe:	f362 2152 	bfi	r1, r2, #9, #10
 8008dc2:	f363 41de 	bfi	r1, r3, #19, #12
 8008dc6:	f363 71df 	bfi	r1, r3, #31, #1
 8008dca:	aa0d      	add	r2, sp, #52	; 0x34
 8008dcc:	4802      	ldr	r0, [pc, #8]	; (8008dd8 <SX1276ReadBuffer+0x60>)
 8008dce:	f006 fe35 	bl	800fa3c <z_impl_z_log_msg2_static_create>
}
 8008dd2:	e7d9      	b.n	8008d88 <SX1276ReadBuffer+0x10>
 8008dd4:	0801395c 	.word	0x0801395c
 8008dd8:	08012758 	.word	0x08012758

08008ddc <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8008ddc:	b530      	push	{r4, r5, lr}
 8008dde:	b0a7      	sub	sp, #156	; 0x9c
 8008de0:	4604      	mov	r4, r0
 8008de2:	4882      	ldr	r0, [pc, #520]	; (8008fec <sx127x_lora_init+0x210>)
 8008de4:	f002 ff0e 	bl	800bc04 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8008de8:	4b81      	ldr	r3, [pc, #516]	; (8008ff0 <sx127x_lora_init+0x214>)
 8008dea:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8008dec:	b300      	cbz	r0, 8008e30 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8008dee:	4b80      	ldr	r3, [pc, #512]	; (8008ff0 <sx127x_lora_init+0x214>)
 8008df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df4:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8008df6:	4a7f      	ldr	r2, [pc, #508]	; (8008ff4 <sx127x_lora_init+0x218>)
 8008df8:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	81da      	strh	r2, [r3, #14]
 8008dfe:	487e      	ldr	r0, [pc, #504]	; (8008ff8 <sx127x_lora_init+0x21c>)
 8008e00:	f002 ff00 	bl	800bc04 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8008e04:	4b7d      	ldr	r3, [pc, #500]	; (8008ffc <sx127x_lora_init+0x220>)
 8008e06:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8008e08:	b1f8      	cbz	r0, 8008e4a <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8008e0a:	4b7c      	ldr	r3, [pc, #496]	; (8008ffc <sx127x_lora_init+0x220>)
 8008e0c:	2206      	movs	r2, #6
 8008e0e:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8008e10:	2201      	movs	r2, #1
 8008e12:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8008e14:	2200      	movs	r2, #0
 8008e16:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8008e18:	4875      	ldr	r0, [pc, #468]	; (8008ff0 <sx127x_lora_init+0x214>)
 8008e1a:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8008e1c:	f641 2307 	movw	r3, #6663	; 0x1a07
 8008e20:	4975      	ldr	r1, [pc, #468]	; (8008ff8 <sx127x_lora_init+0x21c>)
 8008e22:	f7ff faad 	bl	8008380 <__sx12xx_configure_pin>
	if (ret) {
 8008e26:	4605      	mov	r5, r0
 8008e28:	b1e0      	cbz	r0, 8008e64 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	b027      	add	sp, #156	; 0x9c
 8008e2e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8008e30:	4b6e      	ldr	r3, [pc, #440]	; (8008fec <sx127x_lora_init+0x210>)
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	4b72      	ldr	r3, [pc, #456]	; (8009000 <sx127x_lora_init+0x224>)
 8008e36:	9301      	str	r3, [sp, #4]
 8008e38:	9000      	str	r0, [sp, #0]
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4971      	ldr	r1, [pc, #452]	; (8009004 <sx127x_lora_init+0x228>)
 8008e40:	f007 fe9c 	bl	8010b7c <z_log_msg2_runtime_create>
		return -EINVAL;
 8008e44:	f06f 0515 	mvn.w	r5, #21
 8008e48:	e7ef      	b.n	8008e2a <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 8008e4a:	4b6b      	ldr	r3, [pc, #428]	; (8008ff8 <sx127x_lora_init+0x21c>)
 8008e4c:	9302      	str	r3, [sp, #8]
 8008e4e:	4b6c      	ldr	r3, [pc, #432]	; (8009000 <sx127x_lora_init+0x224>)
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	9000      	str	r0, [sp, #0]
 8008e54:	4603      	mov	r3, r0
 8008e56:	2201      	movs	r2, #1
 8008e58:	496a      	ldr	r1, [pc, #424]	; (8009004 <sx127x_lora_init+0x228>)
 8008e5a:	f007 fe8f 	bl	8010b7c <z_log_msg2_runtime_create>
		return -EIO;
 8008e5e:	f06f 0504 	mvn.w	r5, #4
 8008e62:	e7e2      	b.n	8008e2a <sx127x_lora_init+0x4e>
 8008e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e68:	2100      	movs	r1, #0
 8008e6a:	f004 f859 	bl	800cf20 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8008e6e:	4b60      	ldr	r3, [pc, #384]	; (8008ff0 <sx127x_lora_init+0x214>)
 8008e70:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8008e72:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f013 0f01 	tst.w	r3, #1
 8008e7a:	d165      	bne.n	8008f48 <sx127x_lora_init+0x16c>
 8008e7c:	462b      	mov	r3, r5
	if (value != 0)	{
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d064      	beq.n	8008f4c <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 8008e82:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2101      	movs	r1, #1
 8008e88:	4798      	blx	r3
 8008e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f004 f846 	bl	800cf20 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8008e94:	2201      	movs	r2, #1
 8008e96:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8008e9a:	2042      	movs	r0, #66	; 0x42
 8008e9c:	f007 fe80 	bl	8010ba0 <sx127x_read>
	if (ret < 0) {
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	db58      	blt.n	8008f56 <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008eaa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8008eae:	4a56      	ldr	r2, [pc, #344]	; (8009008 <sx127x_lora_init+0x22c>)
 8008eb0:	9212      	str	r2, [sp, #72]	; 0x48
 8008eb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	f88d 2010 	strb.w	r2, [sp, #16]
 8008ebe:	9904      	ldr	r1, [sp, #16]
 8008ec0:	9111      	str	r1, [sp, #68]	; 0x44
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	f363 0100 	bfi	r1, r3, #0, #1
 8008ec8:	f363 0141 	bfi	r1, r3, #1, #1
 8008ecc:	f363 0182 	bfi	r1, r3, #2, #1
 8008ed0:	f363 01c5 	bfi	r1, r3, #3, #3
 8008ed4:	f362 1188 	bfi	r1, r2, #6, #3
 8008ed8:	220c      	movs	r2, #12
 8008eda:	f362 2152 	bfi	r1, r2, #9, #10
 8008ede:	f363 41de 	bfi	r1, r3, #19, #12
 8008ee2:	f363 71df 	bfi	r1, r3, #31, #1
 8008ee6:	aa11      	add	r2, sp, #68	; 0x44
 8008ee8:	4846      	ldr	r0, [pc, #280]	; (8009004 <sx127x_lora_init+0x228>)
 8008eea:	f006 fda7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8008eee:	f007 fe43 	bl	8010b78 <sx127x_antenna_configure>
	if (ret < 0) {
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	db54      	blt.n	8008fa0 <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff fdb6 	bl	8008a68 <sx12xx_init>
	if (ret < 0) {
 8008efc:	1e04      	subs	r4, r0, #0
 8008efe:	da94      	bge.n	8008e2a <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8008f00:	2201      	movs	r2, #1
 8008f02:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008f06:	4b41      	ldr	r3, [pc, #260]	; (800900c <sx127x_lora_init+0x230>)
 8008f08:	9318      	str	r3, [sp, #96]	; 0x60
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	2102      	movs	r1, #2
 8008f10:	f88d 1010 	strb.w	r1, [sp, #16]
 8008f14:	9904      	ldr	r1, [sp, #16]
 8008f16:	9117      	str	r1, [sp, #92]	; 0x5c
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f363 0100 	bfi	r1, r3, #0, #1
 8008f1e:	f363 0141 	bfi	r1, r3, #1, #1
 8008f22:	f363 0182 	bfi	r1, r3, #2, #1
 8008f26:	f363 01c5 	bfi	r1, r3, #3, #3
 8008f2a:	f362 1188 	bfi	r1, r2, #6, #3
 8008f2e:	2208      	movs	r2, #8
 8008f30:	f362 2152 	bfi	r1, r2, #9, #10
 8008f34:	f363 41de 	bfi	r1, r3, #19, #12
 8008f38:	f363 71df 	bfi	r1, r3, #31, #1
 8008f3c:	aa17      	add	r2, sp, #92	; 0x5c
 8008f3e:	4831      	ldr	r0, [pc, #196]	; (8009004 <sx127x_lora_init+0x228>)
 8008f40:	f006 fd7c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return ret;
 8008f44:	4625      	mov	r5, r4
 8008f46:	e770      	b.n	8008e2a <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e798      	b.n	8008e7e <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8008f4c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2101      	movs	r1, #1
 8008f52:	4798      	blx	r3
 8008f54:	e799      	b.n	8008e8a <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 8008f56:	2201      	movs	r2, #1
 8008f58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008f5c:	4b2c      	ldr	r3, [pc, #176]	; (8009010 <sx127x_lora_init+0x234>)
 8008f5e:	9324      	str	r3, [sp, #144]	; 0x90
 8008f60:	2300      	movs	r3, #0
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	2102      	movs	r1, #2
 8008f66:	f88d 1010 	strb.w	r1, [sp, #16]
 8008f6a:	9904      	ldr	r1, [sp, #16]
 8008f6c:	9123      	str	r1, [sp, #140]	; 0x8c
 8008f6e:	4619      	mov	r1, r3
 8008f70:	f363 0100 	bfi	r1, r3, #0, #1
 8008f74:	f363 0141 	bfi	r1, r3, #1, #1
 8008f78:	f363 0182 	bfi	r1, r3, #2, #1
 8008f7c:	f363 01c5 	bfi	r1, r3, #3, #3
 8008f80:	f362 1188 	bfi	r1, r2, #6, #3
 8008f84:	2208      	movs	r2, #8
 8008f86:	f362 2152 	bfi	r1, r2, #9, #10
 8008f8a:	f363 41de 	bfi	r1, r3, #19, #12
 8008f8e:	f363 71df 	bfi	r1, r3, #31, #1
 8008f92:	aa23      	add	r2, sp, #140	; 0x8c
 8008f94:	481b      	ldr	r0, [pc, #108]	; (8009004 <sx127x_lora_init+0x228>)
 8008f96:	f006 fd51 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8008f9a:	f06f 0504 	mvn.w	r5, #4
 8008f9e:	e744      	b.n	8008e2a <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008fa6:	4b1b      	ldr	r3, [pc, #108]	; (8009014 <sx127x_lora_init+0x238>)
 8008fa8:	931e      	str	r3, [sp, #120]	; 0x78
 8008faa:	2300      	movs	r3, #0
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	2102      	movs	r1, #2
 8008fb0:	f88d 1010 	strb.w	r1, [sp, #16]
 8008fb4:	9904      	ldr	r1, [sp, #16]
 8008fb6:	911d      	str	r1, [sp, #116]	; 0x74
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f363 0100 	bfi	r1, r3, #0, #1
 8008fbe:	f363 0141 	bfi	r1, r3, #1, #1
 8008fc2:	f363 0182 	bfi	r1, r3, #2, #1
 8008fc6:	f363 01c5 	bfi	r1, r3, #3, #3
 8008fca:	f362 1188 	bfi	r1, r2, #6, #3
 8008fce:	2208      	movs	r2, #8
 8008fd0:	f362 2152 	bfi	r1, r2, #9, #10
 8008fd4:	f363 41de 	bfi	r1, r3, #19, #12
 8008fd8:	f363 71df 	bfi	r1, r3, #31, #1
 8008fdc:	aa1d      	add	r2, sp, #116	; 0x74
 8008fde:	4809      	ldr	r0, [pc, #36]	; (8009004 <sx127x_lora_init+0x228>)
 8008fe0:	f006 fd2c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return -EIO;
 8008fe4:	f06f 0504 	mvn.w	r5, #4
 8008fe8:	e71f      	b.n	8008e2a <sx127x_lora_init+0x4e>
 8008fea:	bf00      	nop
 8008fec:	08013784 	.word	0x08013784
 8008ff0:	20001388 	.word	0x20001388
 8008ff4:	000f4240 	.word	0x000f4240
 8008ff8:	080133d8 	.word	0x080133d8
 8008ffc:	200013ec 	.word	0x200013ec
 8009000:	08013818 	.word	0x08013818
 8009004:	08012758 	.word	0x08012758
 8009008:	08013998 	.word	0x08013998
 800900c:	080139d0 	.word	0x080139d0
 8009010:	0801397c 	.word	0x0801397c
 8009014:	080139b4 	.word	0x080139b4

08009018 <SX1276WriteBuffer>:
{
 8009018:	b510      	push	{r4, lr}
 800901a:	b090      	sub	sp, #64	; 0x40
 800901c:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 800901e:	b2c0      	uxtb	r0, r0
 8009020:	f007 fdc5 	bl	8010bae <sx127x_write>
	if (ret < 0) {
 8009024:	2800      	cmp	r0, #0
 8009026:	db01      	blt.n	800902c <SX1276WriteBuffer+0x14>
}
 8009028:	b010      	add	sp, #64	; 0x40
 800902a:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 800902c:	2201      	movs	r2, #1
 800902e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009032:	4b10      	ldr	r3, [pc, #64]	; (8009074 <SX1276WriteBuffer+0x5c>)
 8009034:	930e      	str	r3, [sp, #56]	; 0x38
 8009036:	940f      	str	r4, [sp, #60]	; 0x3c
 8009038:	2300      	movs	r3, #0
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	2103      	movs	r1, #3
 800903e:	f88d 1004 	strb.w	r1, [sp, #4]
 8009042:	9901      	ldr	r1, [sp, #4]
 8009044:	910d      	str	r1, [sp, #52]	; 0x34
 8009046:	4619      	mov	r1, r3
 8009048:	f363 0100 	bfi	r1, r3, #0, #1
 800904c:	f363 0141 	bfi	r1, r3, #1, #1
 8009050:	f363 0182 	bfi	r1, r3, #2, #1
 8009054:	f363 01c5 	bfi	r1, r3, #3, #3
 8009058:	f362 1188 	bfi	r1, r2, #6, #3
 800905c:	220c      	movs	r2, #12
 800905e:	f362 2152 	bfi	r1, r2, #9, #10
 8009062:	f363 41de 	bfi	r1, r3, #19, #12
 8009066:	f363 71df 	bfi	r1, r3, #31, #1
 800906a:	aa0d      	add	r2, sp, #52	; 0x34
 800906c:	4802      	ldr	r0, [pc, #8]	; (8009078 <SX1276WriteBuffer+0x60>)
 800906e:	f006 fce5 	bl	800fa3c <z_impl_z_log_msg2_static_create>
}
 8009072:	e7d9      	b.n	8009028 <SX1276WriteBuffer+0x10>
 8009074:	080139f4 	.word	0x080139f4
 8009078:	08012758 	.word	0x08012758

0800907c <SX1276SetRfTxPower>:
{
 800907c:	b530      	push	{r4, r5, lr}
 800907e:	b09d      	sub	sp, #116	; 0x74
 8009080:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 8009088:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 800908c:	2201      	movs	r2, #1
 800908e:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8009092:	204d      	movs	r0, #77	; 0x4d
 8009094:	f007 fd84 	bl	8010ba0 <sx127x_read>
	if (ret < 0) {
 8009098:	2800      	cmp	r0, #0
 800909a:	db2e      	blt.n	80090fa <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 800909c:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 80090a0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80090a4:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 80090a8:	2214      	movs	r2, #20
 80090aa:	2102      	movs	r1, #2
 80090ac:	4628      	mov	r0, r5
 80090ae:	f007 fd59 	bl	8010b64 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 80090b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80090b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 80090be:	2811      	cmp	r0, #17
 80090c0:	dd3e      	ble.n	8009140 <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 80090c2:	f044 0407 	orr.w	r4, r4, #7
 80090c6:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 80090ca:	3805      	subs	r0, #5
 80090cc:	f000 000f 	and.w	r0, r0, #15
 80090d0:	4318      	orrs	r0, r3
 80090d2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 80090d6:	2201      	movs	r2, #1
 80090d8:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80090dc:	2009      	movs	r0, #9
 80090de:	f007 fd66 	bl	8010bae <sx127x_write>
	if (ret < 0) {
 80090e2:	2800      	cmp	r0, #0
 80090e4:	db37      	blt.n	8009156 <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 80090e6:	2201      	movs	r2, #1
 80090e8:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 80090ec:	204d      	movs	r0, #77	; 0x4d
 80090ee:	f007 fd5e 	bl	8010bae <sx127x_write>
	if (ret < 0) {
 80090f2:	2800      	cmp	r0, #0
 80090f4:	db52      	blt.n	800919c <SX1276SetRfTxPower+0x120>
}
 80090f6:	b01d      	add	sp, #116	; 0x74
 80090f8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 80090fa:	2201      	movs	r2, #1
 80090fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8009100:	4b38      	ldr	r3, [pc, #224]	; (80091e4 <SX1276SetRfTxPower+0x168>)
 8009102:	931a      	str	r3, [sp, #104]	; 0x68
 8009104:	2300      	movs	r3, #0
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	2102      	movs	r1, #2
 800910a:	f88d 1000 	strb.w	r1, [sp]
 800910e:	9900      	ldr	r1, [sp, #0]
 8009110:	9119      	str	r1, [sp, #100]	; 0x64
 8009112:	4619      	mov	r1, r3
 8009114:	f363 0100 	bfi	r1, r3, #0, #1
 8009118:	f363 0141 	bfi	r1, r3, #1, #1
 800911c:	f363 0182 	bfi	r1, r3, #2, #1
 8009120:	f363 01c5 	bfi	r1, r3, #3, #3
 8009124:	f362 1188 	bfi	r1, r2, #6, #3
 8009128:	2208      	movs	r2, #8
 800912a:	f362 2152 	bfi	r1, r2, #9, #10
 800912e:	f363 41de 	bfi	r1, r3, #19, #12
 8009132:	f363 71df 	bfi	r1, r3, #31, #1
 8009136:	aa19      	add	r2, sp, #100	; 0x64
 8009138:	482b      	ldr	r0, [pc, #172]	; (80091e8 <SX1276SetRfTxPower+0x16c>)
 800913a:	f006 fc7f 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 800913e:	e7da      	b.n	80090f6 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8009140:	f044 0404 	orr.w	r4, r4, #4
 8009144:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8009148:	3802      	subs	r0, #2
 800914a:	f000 000f 	and.w	r0, r0, #15
 800914e:	4318      	orrs	r0, r3
 8009150:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8009154:	e7bf      	b.n	80090d6 <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 8009156:	2201      	movs	r2, #1
 8009158:	f8ad 2004 	strh.w	r2, [sp, #4]
 800915c:	4b23      	ldr	r3, [pc, #140]	; (80091ec <SX1276SetRfTxPower+0x170>)
 800915e:	9314      	str	r3, [sp, #80]	; 0x50
 8009160:	2300      	movs	r3, #0
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2102      	movs	r1, #2
 8009166:	f88d 1000 	strb.w	r1, [sp]
 800916a:	9900      	ldr	r1, [sp, #0]
 800916c:	9113      	str	r1, [sp, #76]	; 0x4c
 800916e:	4619      	mov	r1, r3
 8009170:	f363 0100 	bfi	r1, r3, #0, #1
 8009174:	f363 0141 	bfi	r1, r3, #1, #1
 8009178:	f363 0182 	bfi	r1, r3, #2, #1
 800917c:	f363 01c5 	bfi	r1, r3, #3, #3
 8009180:	f362 1188 	bfi	r1, r2, #6, #3
 8009184:	2208      	movs	r2, #8
 8009186:	f362 2152 	bfi	r1, r2, #9, #10
 800918a:	f363 41de 	bfi	r1, r3, #19, #12
 800918e:	f363 71df 	bfi	r1, r3, #31, #1
 8009192:	aa13      	add	r2, sp, #76	; 0x4c
 8009194:	4814      	ldr	r0, [pc, #80]	; (80091e8 <SX1276SetRfTxPower+0x16c>)
 8009196:	f006 fc51 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 800919a:	e7ac      	b.n	80090f6 <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 800919c:	2201      	movs	r2, #1
 800919e:	f8ad 2004 	strh.w	r2, [sp, #4]
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <SX1276SetRfTxPower+0x174>)
 80091a4:	930e      	str	r3, [sp, #56]	; 0x38
 80091a6:	2300      	movs	r3, #0
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2102      	movs	r1, #2
 80091ac:	f88d 1000 	strb.w	r1, [sp]
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	910d      	str	r1, [sp, #52]	; 0x34
 80091b4:	4619      	mov	r1, r3
 80091b6:	f363 0100 	bfi	r1, r3, #0, #1
 80091ba:	f363 0141 	bfi	r1, r3, #1, #1
 80091be:	f363 0182 	bfi	r1, r3, #2, #1
 80091c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80091c6:	f362 1188 	bfi	r1, r2, #6, #3
 80091ca:	2208      	movs	r2, #8
 80091cc:	f362 2152 	bfi	r1, r2, #9, #10
 80091d0:	f363 41de 	bfi	r1, r3, #19, #12
 80091d4:	f363 71df 	bfi	r1, r3, #31, #1
 80091d8:	aa0d      	add	r2, sp, #52	; 0x34
 80091da:	4803      	ldr	r0, [pc, #12]	; (80091e8 <SX1276SetRfTxPower+0x16c>)
 80091dc:	f006 fc2e 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 80091e0:	e789      	b.n	80090f6 <SX1276SetRfTxPower+0x7a>
 80091e2:	bf00      	nop
 80091e4:	08013a14 	.word	0x08013a14
 80091e8:	08012758 	.word	0x08012758
 80091ec:	08013a2c 	.word	0x08013a2c
 80091f0:	08013a48 	.word	0x08013a48

080091f4 <SX1276GetDio1PinState>:
{
 80091f4:	b510      	push	{r4, lr}
 80091f6:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <SX1276GetDio1PinState+0x34>)
 80091fa:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 80091fc:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 80091fe:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	a901      	add	r1, sp, #4
 8009204:	4798      	blx	r3
	if (ret == 0) {
 8009206:	4603      	mov	r3, r0
 8009208:	b918      	cbnz	r0, 8009212 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 800920a:	6821      	ldr	r1, [r4, #0]
 800920c:	9a01      	ldr	r2, [sp, #4]
 800920e:	404a      	eors	r2, r1
 8009210:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8009212:	b913      	cbnz	r3, 800921a <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	dc02      	bgt.n	8009224 <SX1276GetDio1PinState+0x30>
	return 0U;
 800921e:	2000      	movs	r0, #0
}
 8009220:	b002      	add	sp, #8
 8009222:	bd10      	pop	{r4, pc}
		return 1U;
 8009224:	2001      	movs	r0, #1
 8009226:	e7fb      	b.n	8009220 <SX1276GetDio1PinState+0x2c>
 8009228:	20001388 	.word	0x20001388

0800922c <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <TimerInsertTimer+0x28>)
 800922e:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8009230:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8009232:	e001      	b.n	8009238 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8009234:	461a      	mov	r2, r3
            next = next->Next;
 8009236:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8009238:	6951      	ldr	r1, [r2, #20]
 800923a:	b139      	cbz	r1, 800924c <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 800923c:	6819      	ldr	r1, [r3, #0]
 800923e:	f8d0 c000 	ldr.w	ip, [r0]
 8009242:	458c      	cmp	ip, r1
 8009244:	d8f6      	bhi.n	8009234 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8009246:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8009248:	6143      	str	r3, [r0, #20]
            return;
 800924a:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 800924c:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	6143      	str	r3, [r0, #20]
}
 8009252:	4770      	bx	lr
 8009254:	200013f8 	.word	0x200013f8

08009258 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <TimerExists+0x18>)
 800925a:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 800925c:	e000      	b.n	8009260 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 800925e:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8009260:	b11b      	cbz	r3, 800926a <TimerExists+0x12>
        if( cur == obj )
 8009262:	4283      	cmp	r3, r0
 8009264:	d1fb      	bne.n	800925e <TimerExists+0x6>
            return true;
 8009266:	2001      	movs	r0, #1
    }
    return false;
}
 8009268:	4770      	bx	lr
    return false;
 800926a:	2000      	movs	r0, #0
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	200013f8 	.word	0x200013f8

08009274 <TimerInsertNewHeadTimer>:
{
 8009274:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <TimerInsertNewHeadTimer+0x18>)
 8009278:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 800927a:	b10b      	cbz	r3, 8009280 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 800927c:	2200      	movs	r2, #0
 800927e:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8009280:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8009282:	4b02      	ldr	r3, [pc, #8]	; (800928c <TimerInsertNewHeadTimer+0x18>)
 8009284:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8009286:	f007 fca6 	bl	8010bd6 <TimerSetTimeout>
}
 800928a:	bd08      	pop	{r3, pc}
 800928c:	200013f8 	.word	0x200013f8

08009290 <TimerStart>:
{
 8009290:	b510      	push	{r4, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8009296:	a801      	add	r0, sp, #4
 8009298:	f007 fc47 	bl	8010b2a <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800929c:	b1f4      	cbz	r4, 80092dc <TimerStart+0x4c>
 800929e:	4620      	mov	r0, r4
 80092a0:	f7ff ffda 	bl	8009258 <TimerExists>
 80092a4:	b9d0      	cbnz	r0, 80092dc <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 80092a6:	6863      	ldr	r3, [r4, #4]
 80092a8:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 80092aa:	2301      	movs	r3, #1
 80092ac:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 80092ae:	2300      	movs	r3, #0
 80092b0:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <TimerStart+0x68>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	b1ab      	cbz	r3, 80092e4 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 80092b8:	f7fe ff4a 	bl	8008150 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	4418      	add	r0, r3
 80092c0:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <TimerStart+0x68>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4298      	cmp	r0, r3
 80092ca:	d211      	bcs.n	80092f0 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 80092cc:	4620      	mov	r0, r4
 80092ce:	f7ff ffd1 	bl	8009274 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 80092d2:	a801      	add	r0, sp, #4
 80092d4:	f007 fc33 	bl	8010b3e <BoardCriticalSectionEnd>
}
 80092d8:	b002      	add	sp, #8
 80092da:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 80092dc:	a801      	add	r0, sp, #4
 80092de:	f007 fc2e 	bl	8010b3e <BoardCriticalSectionEnd>
        return;
 80092e2:	e7f9      	b.n	80092d8 <TimerStart+0x48>
        RtcSetTimerContext( );
 80092e4:	f7fe ff60 	bl	80081a8 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff ffc3 	bl	8009274 <TimerInsertNewHeadTimer>
 80092ee:	e7f0      	b.n	80092d2 <TimerStart+0x42>
            TimerInsertTimer( obj );
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7ff ff9b 	bl	800922c <TimerInsertTimer>
 80092f6:	e7ec      	b.n	80092d2 <TimerStart+0x42>
 80092f8:	200013f8 	.word	0x200013f8

080092fc <TimerIrqHandler>:
{
 80092fc:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80092fe:	f7fe ff5f 	bl	80081c0 <RtcGetTimerContext>
 8009302:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8009304:	f7fe ff50 	bl	80081a8 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8009308:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 800930c:	4b1c      	ldr	r3, [pc, #112]	; (8009380 <TimerIrqHandler+0x84>)
 800930e:	681e      	ldr	r6, [r3, #0]
 8009310:	b16e      	cbz	r6, 800932e <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8009312:	4632      	mov	r2, r6
 8009314:	e002      	b.n	800931c <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8009316:	2100      	movs	r1, #0
 8009318:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800931a:	6952      	ldr	r2, [r2, #20]
 800931c:	6953      	ldr	r3, [r2, #20]
 800931e:	b133      	cbz	r3, 800932e <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8009320:	6819      	ldr	r1, [r3, #0]
 8009322:	4561      	cmp	r1, ip
 8009324:	d9f7      	bls.n	8009316 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8009326:	1a2c      	subs	r4, r5, r0
 8009328:	4421      	add	r1, r4
 800932a:	6019      	str	r1, [r3, #0]
 800932c:	e7f5      	b.n	800931a <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 800932e:	b146      	cbz	r6, 8009342 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8009330:	6972      	ldr	r2, [r6, #20]
 8009332:	4b13      	ldr	r3, [pc, #76]	; (8009380 <TimerIrqHandler+0x84>)
 8009334:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8009336:	2300      	movs	r3, #0
 8009338:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800933a:	68f3      	ldr	r3, [r6, #12]
 800933c:	b1a3      	cbz	r3, 8009368 <TimerIrqHandler+0x6c>
 800933e:	6930      	ldr	r0, [r6, #16]
 8009340:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <TimerIrqHandler+0x84>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	b18b      	cbz	r3, 800936c <TimerIrqHandler+0x70>
 8009348:	681c      	ldr	r4, [r3, #0]
 800934a:	f7fe ff01 	bl	8008150 <RtcGetTimerElapsedTime>
 800934e:	4284      	cmp	r4, r0
 8009350:	d20c      	bcs.n	800936c <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8009352:	4a0b      	ldr	r2, [pc, #44]	; (8009380 <TimerIrqHandler+0x84>)
 8009354:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8009356:	6959      	ldr	r1, [r3, #20]
 8009358:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 800935a:	2200      	movs	r2, #0
 800935c:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	b11a      	cbz	r2, 800936a <TimerIrqHandler+0x6e>
 8009362:	6918      	ldr	r0, [r3, #16]
 8009364:	4790      	blx	r2
 8009366:	e7ec      	b.n	8009342 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8009368:	e7fe      	b.n	8009368 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 800936a:	e7fe      	b.n	800936a <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800936c:	4b04      	ldr	r3, [pc, #16]	; (8009380 <TimerIrqHandler+0x84>)
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	b108      	cbz	r0, 8009376 <TimerIrqHandler+0x7a>
 8009372:	7a43      	ldrb	r3, [r0, #9]
 8009374:	b103      	cbz	r3, 8009378 <TimerIrqHandler+0x7c>
}
 8009376:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8009378:	f007 fc2d 	bl	8010bd6 <TimerSetTimeout>
}
 800937c:	e7fb      	b.n	8009376 <TimerIrqHandler+0x7a>
 800937e:	bf00      	nop
 8009380:	200013f8 	.word	0x200013f8

08009384 <TimerStop>:
{
 8009384:	b510      	push	{r4, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800938a:	a801      	add	r0, sp, #4
 800938c:	f007 fbcd 	bl	8010b2a <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <TimerStop+0x7c>)
 8009392:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8009394:	b15a      	cbz	r2, 80093ae <TimerStop+0x2a>
 8009396:	b154      	cbz	r4, 80093ae <TimerStop+0x2a>
    obj->IsStarted = false;
 8009398:	2300      	movs	r3, #0
 800939a:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 800939c:	42a2      	cmp	r2, r4
 800939e:	d00a      	beq.n	80093b6 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 80093a0:	4613      	mov	r3, r2
        while( cur != NULL )
 80093a2:	b32b      	cbz	r3, 80093f0 <TimerStop+0x6c>
            if( cur == obj )
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	d020      	beq.n	80093ea <TimerStop+0x66>
                prev = cur;
 80093a8:	461a      	mov	r2, r3
                cur = cur->Next;
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	e7f9      	b.n	80093a2 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 80093ae:	a801      	add	r0, sp, #4
 80093b0:	f007 fbc5 	bl	8010b3e <BoardCriticalSectionEnd>
        return;
 80093b4:	e01f      	b.n	80093f6 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 80093b6:	7a53      	ldrb	r3, [r2, #9]
 80093b8:	b173      	cbz	r3, 80093d8 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 80093ba:	2300      	movs	r3, #0
 80093bc:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 80093be:	6950      	ldr	r0, [r2, #20]
 80093c0:	b120      	cbz	r0, 80093cc <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <TimerStop+0x7c>)
 80093c4:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 80093c6:	f007 fc06 	bl	8010bd6 <TimerSetTimeout>
 80093ca:	e011      	b.n	80093f0 <TimerStop+0x6c>
                RtcStopAlarm( );
 80093cc:	f7fe fece 	bl	800816c <RtcStopAlarm>
                TimerListHead = NULL;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <TimerStop+0x7c>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e00b      	b.n	80093f0 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 80093d8:	6953      	ldr	r3, [r2, #20]
 80093da:	b113      	cbz	r3, 80093e2 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 80093dc:	4a08      	ldr	r2, [pc, #32]	; (8009400 <TimerStop+0x7c>)
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	e006      	b.n	80093f0 <TimerStop+0x6c>
                TimerListHead = NULL;
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <TimerStop+0x7c>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
 80093e8:	e002      	b.n	80093f0 <TimerStop+0x6c>
                if( cur->Next != NULL )
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	b12b      	cbz	r3, 80093fa <TimerStop+0x76>
                    prev->Next = cur;
 80093ee:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 80093f0:	a801      	add	r0, sp, #4
 80093f2:	f007 fba4 	bl	8010b3e <BoardCriticalSectionEnd>
}
 80093f6:	b002      	add	sp, #8
 80093f8:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 80093fa:	2300      	movs	r3, #0
 80093fc:	6153      	str	r3, [r2, #20]
 80093fe:	e7f7      	b.n	80093f0 <TimerStop+0x6c>
 8009400:	200013f8 	.word	0x200013f8

08009404 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8009404:	4908      	ldr	r1, [pc, #32]	; (8009428 <SX1276ConvertFreqInHzToPllStep+0x24>)
 8009406:	fba1 3200 	umull	r3, r2, r1, r0
 800940a:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800940c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009410:	fb03 0012 	mls	r0, r3, r2, r0
 8009414:	f641 6384 	movw	r3, #7812	; 0x1e84
 8009418:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800941c:	fba1 1303 	umull	r1, r3, r1, r3
 8009420:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8009422:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8009426:	4770      	bx	lr
 8009428:	431bde83 	.word	0x431bde83

0800942c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800942c:	2300      	movs	r3, #0
 800942e:	e008      	b.n	8009442 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009430:	e7fe      	b.n	8009430 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <GetFskBandwidthRegValue+0x4c>)
 8009434:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009438:	7908      	ldrb	r0, [r1, #4]
}
 800943a:	bc10      	pop	{r4}
 800943c:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800943e:	3301      	adds	r3, #1
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b14      	cmp	r3, #20
 8009444:	d817      	bhi.n	8009476 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8009446:	4619      	mov	r1, r3
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <GetFskBandwidthRegValue+0x4c>)
 800944a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800944e:	4282      	cmp	r2, r0
 8009450:	d8f5      	bhi.n	800943e <GetFskBandwidthRegValue+0x12>
{
 8009452:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	4c08      	ldr	r4, [pc, #32]	; (8009478 <GetFskBandwidthRegValue+0x4c>)
 8009458:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 800945c:	4282      	cmp	r2, r0
 800945e:	d8e8      	bhi.n	8009432 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8009460:	3301      	adds	r3, #1
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b14      	cmp	r3, #20
 8009466:	d8e3      	bhi.n	8009430 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8009468:	4619      	mov	r1, r3
 800946a:	4a03      	ldr	r2, [pc, #12]	; (8009478 <GetFskBandwidthRegValue+0x4c>)
 800946c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009470:	4282      	cmp	r2, r0
 8009472:	d8f5      	bhi.n	8009460 <GetFskBandwidthRegValue+0x34>
 8009474:	e7ee      	b.n	8009454 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8009476:	e7fe      	b.n	8009476 <GetFskBandwidthRegValue+0x4a>
 8009478:	08013b1c 	.word	0x08013b1c

0800947c <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800947c:	2801      	cmp	r0, #1
 800947e:	d006      	beq.n	800948e <SX1276GetLoRaBandwidthInHz+0x12>
 8009480:	2802      	cmp	r0, #2
 8009482:	d006      	beq.n	8009492 <SX1276GetLoRaBandwidthInHz+0x16>
 8009484:	b108      	cbz	r0, 800948a <SX1276GetLoRaBandwidthInHz+0xe>
 8009486:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8009488:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 800948a:	4803      	ldr	r0, [pc, #12]	; (8009498 <SX1276GetLoRaBandwidthInHz+0x1c>)
 800948c:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800948e:	4803      	ldr	r0, [pc, #12]	; (800949c <SX1276GetLoRaBandwidthInHz+0x20>)
 8009490:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8009492:	4803      	ldr	r0, [pc, #12]	; (80094a0 <SX1276GetLoRaBandwidthInHz+0x24>)
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	0001e848 	.word	0x0001e848
 800949c:	0003d090 	.word	0x0003d090
 80094a0:	0007a120 	.word	0x0007a120

080094a4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <SX1276OnDio4Irq+0x1c>)
 80094a6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80094aa:	b93b      	cbnz	r3, 80094bc <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80094ac:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <SX1276OnDio4Irq+0x1c>)
 80094ae:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80094b2:	b91b      	cbnz	r3, 80094bc <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80094b4:	4b02      	ldr	r3, [pc, #8]	; (80094c0 <SX1276OnDio4Irq+0x1c>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20001530 	.word	0x20001530

080094c4 <SX1276GetStatus>:
}
 80094c4:	4b01      	ldr	r3, [pc, #4]	; (80094cc <SX1276GetStatus+0x8>)
 80094c6:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 80094ca:	4770      	bx	lr
 80094cc:	20001530 	.word	0x20001530

080094d0 <SX1276SetChannel>:
{
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 80094d4:	f7ff ff96 	bl	8009404 <SX1276ConvertFreqInHzToPllStep>
 80094d8:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <SX1276SetChannel+0x30>)
 80094dc:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80094e0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80094e4:	2006      	movs	r0, #6
 80094e6:	f007 fc6d 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80094ea:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80094ee:	2007      	movs	r0, #7
 80094f0:	f007 fc68 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80094f4:	b2e1      	uxtb	r1, r4
 80094f6:	2008      	movs	r0, #8
 80094f8:	f007 fc64 	bl	8010dc4 <SX1276Write>
}
 80094fc:	bd38      	pop	{r3, r4, r5, pc}
 80094fe:	bf00      	nop
 8009500:	20001530 	.word	0x20001530

08009504 <SX1276OnDio3Irq>:
{
 8009504:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <SX1276OnDio3Irq+0x54>)
 8009508:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800950c:	2b01      	cmp	r3, #1
 800950e:	d000      	beq.n	8009512 <SX1276OnDio3Irq+0xe>
}
 8009510:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8009512:	2012      	movs	r0, #18
 8009514:	f007 fc62 	bl	8010ddc <SX1276Read>
 8009518:	f010 0f01 	tst.w	r0, #1
 800951c:	d00d      	beq.n	800953a <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800951e:	2105      	movs	r1, #5
 8009520:	2012      	movs	r0, #18
 8009522:	f007 fc4f 	bl	8010dc4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009526:	4b0d      	ldr	r3, [pc, #52]	; (800955c <SX1276OnDio3Irq+0x58>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0f0      	beq.n	8009510 <SX1276OnDio3Irq+0xc>
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0ed      	beq.n	8009510 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8009534:	2001      	movs	r0, #1
 8009536:	4798      	blx	r3
 8009538:	e7ea      	b.n	8009510 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800953a:	2104      	movs	r1, #4
 800953c:	2012      	movs	r0, #18
 800953e:	f007 fc41 	bl	8010dc4 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <SX1276OnDio3Irq+0x58>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0e2      	beq.n	8009510 <SX1276OnDio3Irq+0xc>
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0df      	beq.n	8009510 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8009550:	2000      	movs	r0, #0
 8009552:	4798      	blx	r3
}
 8009554:	e7dc      	b.n	8009510 <SX1276OnDio3Irq+0xc>
 8009556:	bf00      	nop
 8009558:	20001530 	.word	0x20001530
 800955c:	200013fc 	.word	0x200013fc

08009560 <SX1276OnDio2Irq>:
{
 8009560:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8009562:	4b3a      	ldr	r3, [pc, #232]	; (800964c <SX1276OnDio2Irq+0xec>)
 8009564:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009568:	2b01      	cmp	r3, #1
 800956a:	d002      	beq.n	8009572 <SX1276OnDio2Irq+0x12>
 800956c:	2b02      	cmp	r3, #2
 800956e:	d051      	beq.n	8009614 <SX1276OnDio2Irq+0xb4>
}
 8009570:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8009572:	4b36      	ldr	r3, [pc, #216]	; (800964c <SX1276OnDio2Irq+0xec>)
 8009574:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009578:	b1c3      	cbz	r3, 80095ac <SX1276OnDio2Irq+0x4c>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d1f8      	bne.n	8009570 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800957e:	4b33      	ldr	r3, [pc, #204]	; (800964c <SX1276OnDio2Irq+0xec>)
 8009580:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0f3      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8009588:	2102      	movs	r1, #2
 800958a:	2012      	movs	r0, #18
 800958c:	f007 fc1a 	bl	8010dc4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8009590:	4b2f      	ldr	r3, [pc, #188]	; (8009650 <SX1276OnDio2Irq+0xf0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0eb      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
 8009598:	695c      	ldr	r4, [r3, #20]
 800959a:	2c00      	cmp	r4, #0
 800959c:	d0e8      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800959e:	201c      	movs	r0, #28
 80095a0:	f007 fc1c 	bl	8010ddc <SX1276Read>
 80095a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80095a8:	47a0      	blx	r4
 80095aa:	e7e1      	b.n	8009570 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 80095ac:	4b27      	ldr	r3, [pc, #156]	; (800964c <SX1276OnDio2Irq+0xec>)
 80095ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b0:	b35b      	cbz	r3, 800960a <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80095b2:	4b26      	ldr	r3, [pc, #152]	; (800964c <SX1276OnDio2Irq+0xec>)
 80095b4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0d9      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
 80095bc:	4b23      	ldr	r3, [pc, #140]	; (800964c <SX1276OnDio2Irq+0xec>)
 80095be:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1d4      	bne.n	8009570 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 80095c6:	4823      	ldr	r0, [pc, #140]	; (8009654 <SX1276OnDio2Irq+0xf4>)
 80095c8:	f7ff fedc 	bl	8009384 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80095cc:	4c1f      	ldr	r4, [pc, #124]	; (800964c <SX1276OnDio2Irq+0xec>)
 80095ce:	2301      	movs	r3, #1
 80095d0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80095d4:	2011      	movs	r0, #17
 80095d6:	f007 fc01 	bl	8010ddc <SX1276Read>
 80095da:	0843      	lsrs	r3, r0, #1
 80095dc:	425b      	negs	r3, r3
 80095de:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80095e2:	201b      	movs	r0, #27
 80095e4:	f007 fbfa 	bl	8010ddc <SX1276Read>
 80095e8:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80095ea:	201c      	movs	r0, #28
 80095ec:	f007 fbf6 	bl	8010ddc <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80095f0:	4328      	orrs	r0, r5
 80095f2:	f007 fb3a 	bl	8010c6a <SX1276ConvertPllStepToFreqInHz>
 80095f6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80095fa:	200c      	movs	r0, #12
 80095fc:	f007 fbee 	bl	8010ddc <SX1276Read>
 8009600:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8009604:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8009608:	e7b2      	b.n	8009570 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <SX1276OnDio2Irq+0xec>)
 800960c:	2201      	movs	r2, #1
 800960e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8009612:	e7ce      	b.n	80095b2 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8009614:	4b0d      	ldr	r3, [pc, #52]	; (800964c <SX1276OnDio2Irq+0xec>)
 8009616:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800961a:	2b01      	cmp	r3, #1
 800961c:	d1a8      	bne.n	8009570 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <SX1276OnDio2Irq+0xec>)
 8009620:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8009624:	2b00      	cmp	r3, #0
 8009626:	d0a3      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8009628:	2102      	movs	r1, #2
 800962a:	2012      	movs	r0, #18
 800962c:	f007 fbca 	bl	8010dc4 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <SX1276OnDio2Irq+0xf0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d09b      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
 8009638:	695c      	ldr	r4, [r3, #20]
 800963a:	2c00      	cmp	r4, #0
 800963c:	d098      	beq.n	8009570 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800963e:	201c      	movs	r0, #28
 8009640:	f007 fbcc 	bl	8010ddc <SX1276Read>
 8009644:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009648:	47a0      	blx	r4
}
 800964a:	e791      	b.n	8009570 <SX1276OnDio2Irq+0x10>
 800964c:	20001530 	.word	0x20001530
 8009650:	200013fc 	.word	0x200013fc
 8009654:	20001400 	.word	0x20001400

08009658 <SX1276OnDio1Irq>:
{
 8009658:	b508      	push	{r3, lr}
    SX1276Read(REG_IRQFLAGS1);
 800965a:	203e      	movs	r0, #62	; 0x3e
 800965c:	f007 fbbe 	bl	8010ddc <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 8009660:	203f      	movs	r0, #63	; 0x3f
 8009662:	f007 fbbb 	bl	8010ddc <SX1276Read>
    switch( SX1276.Settings.State )
 8009666:	4b4b      	ldr	r3, [pc, #300]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 8009668:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800966c:	2b01      	cmp	r3, #1
 800966e:	d002      	beq.n	8009676 <SX1276OnDio1Irq+0x1e>
 8009670:	2b02      	cmp	r3, #2
 8009672:	d062      	beq.n	800973a <SX1276OnDio1Irq+0xe2>
}
 8009674:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 8009676:	4b47      	ldr	r3, [pc, #284]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 8009678:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800967c:	b1cb      	cbz	r3, 80096b2 <SX1276OnDio1Irq+0x5a>
 800967e:	2b01      	cmp	r3, #1
 8009680:	d1f8      	bne.n	8009674 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 8009682:	f7ff fdb7 	bl	80091f4 <SX1276GetDio1PinState>
 8009686:	2800      	cmp	r0, #0
 8009688:	d0f4      	beq.n	8009674 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutTimer );
 800968a:	4843      	ldr	r0, [pc, #268]	; (8009798 <SX1276OnDio1Irq+0x140>)
 800968c:	f7ff fe7a 	bl	8009384 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8009690:	2180      	movs	r1, #128	; 0x80
 8009692:	2012      	movs	r0, #18
 8009694:	f007 fb96 	bl	8010dc4 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8009698:	4b3e      	ldr	r3, [pc, #248]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800969a:	2200      	movs	r2, #0
 800969c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80096a0:	4b3e      	ldr	r3, [pc, #248]	; (800979c <SX1276OnDio1Irq+0x144>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0e5      	beq.n	8009674 <SX1276OnDio1Irq+0x1c>
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0e2      	beq.n	8009674 <SX1276OnDio1Irq+0x1c>
                    RadioEvents->RxTimeout( );
 80096ae:	4798      	blx	r3
 80096b0:	e7e0      	b.n	8009674 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 80096b2:	f7ff fd9f 	bl	80091f4 <SX1276GetDio1PinState>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0dc      	beq.n	8009674 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutSyncWord );
 80096ba:	4839      	ldr	r0, [pc, #228]	; (80097a0 <SX1276OnDio1Irq+0x148>)
 80096bc:	f7ff fe62 	bl	8009384 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80096c0:	4b34      	ldr	r3, [pc, #208]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 80096c2:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 80096c6:	b95b      	cbnz	r3, 80096e0 <SX1276OnDio1Irq+0x88>
 80096c8:	4b32      	ldr	r3, [pc, #200]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 80096ca:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80096ce:	b93b      	cbnz	r3, 80096e0 <SX1276OnDio1Irq+0x88>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80096d0:	4b30      	ldr	r3, [pc, #192]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 80096d2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80096d6:	b9eb      	cbnz	r3, 8009714 <SX1276OnDio1Irq+0xbc>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80096d8:	2101      	movs	r1, #1
 80096da:	4832      	ldr	r0, [pc, #200]	; (80097a4 <SX1276OnDio1Irq+0x14c>)
 80096dc:	f007 fb32 	bl	8010d44 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80096e0:	4b2c      	ldr	r3, [pc, #176]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 80096e2:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80096e6:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80096ea:	1a88      	subs	r0, r1, r2
 80096ec:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80096f0:	4298      	cmp	r0, r3
 80096f2:	db16      	blt.n	8009722 <SX1276OnDio1Irq+0xca>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80096f4:	1e59      	subs	r1, r3, #1
 80096f6:	b2c9      	uxtb	r1, r1
 80096f8:	482b      	ldr	r0, [pc, #172]	; (80097a8 <SX1276OnDio1Irq+0x150>)
 80096fa:	4410      	add	r0, r2
 80096fc:	f007 fb22 	bl	8010d44 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 8009702:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8009706:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800970a:	440b      	add	r3, r1
 800970c:	3b01      	subs	r3, #1
 800970e:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8009712:	e7af      	b.n	8009674 <SX1276OnDio1Irq+0x1c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009714:	2032      	movs	r0, #50	; 0x32
 8009716:	f007 fb61 	bl	8010ddc <SX1276Read>
 800971a:	4b1e      	ldr	r3, [pc, #120]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800971c:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8009720:	e7de      	b.n	80096e0 <SX1276OnDio1Irq+0x88>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009722:	1a89      	subs	r1, r1, r2
 8009724:	b2c9      	uxtb	r1, r1
 8009726:	4820      	ldr	r0, [pc, #128]	; (80097a8 <SX1276OnDio1Irq+0x150>)
 8009728:	4410      	add	r0, r2
 800972a:	f007 fb0b 	bl	8010d44 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800972e:	4b19      	ldr	r3, [pc, #100]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 8009730:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8009734:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8009738:	e79c      	b.n	8009674 <SX1276OnDio1Irq+0x1c>
            switch( SX1276.Settings.Modem )
 800973a:	4b16      	ldr	r3, [pc, #88]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800973c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d197      	bne.n	8009674 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 1 )
 8009744:	f7ff fd56 	bl	80091f4 <SX1276GetDio1PinState>
 8009748:	2801      	cmp	r0, #1
 800974a:	d093      	beq.n	8009674 <SX1276OnDio1Irq+0x1c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800974c:	4b11      	ldr	r3, [pc, #68]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800974e:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8009752:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8009756:	eba0 0c02 	sub.w	ip, r0, r2
 800975a:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 800975e:	458c      	cmp	ip, r1
 8009760:	dd0c      	ble.n	800977c <SX1276OnDio1Irq+0x124>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8009762:	4811      	ldr	r0, [pc, #68]	; (80097a8 <SX1276OnDio1Irq+0x150>)
 8009764:	4410      	add	r0, r2
 8009766:	f007 faf4 	bl	8010d52 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800976c:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8009770:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 8009774:	440a      	add	r2, r1
 8009776:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800977a:	e77b      	b.n	8009674 <SX1276OnDio1Irq+0x1c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800977c:	1a81      	subs	r1, r0, r2
 800977e:	b2c9      	uxtb	r1, r1
 8009780:	4809      	ldr	r0, [pc, #36]	; (80097a8 <SX1276OnDio1Irq+0x150>)
 8009782:	4410      	add	r0, r2
 8009784:	f007 fae5 	bl	8010d52 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <SX1276OnDio1Irq+0x13c>)
 800978a:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 800978e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8009792:	e76f      	b.n	8009674 <SX1276OnDio1Irq+0x1c>
 8009794:	20001530 	.word	0x20001530
 8009798:	20001418 	.word	0x20001418
 800979c:	200013fc 	.word	0x200013fc
 80097a0:	20001400 	.word	0x20001400
 80097a4:	20001646 	.word	0x20001646
 80097a8:	20001430 	.word	0x20001430

080097ac <SX1276OnDio0Irq>:
{
 80097ac:	b510      	push	{r4, lr}
 80097ae:	b082      	sub	sp, #8
    SX1276Read(REG_IRQFLAGS1);
 80097b0:	203e      	movs	r0, #62	; 0x3e
 80097b2:	f007 fb13 	bl	8010ddc <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 80097b6:	203f      	movs	r0, #63	; 0x3f
 80097b8:	f007 fb10 	bl	8010ddc <SX1276Read>
    volatile uint8_t irqFlags = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 80097c2:	4bb1      	ldr	r3, [pc, #708]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80097c4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d004      	beq.n	80097d6 <SX1276OnDio0Irq+0x2a>
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	f000 813f 	beq.w	8009a50 <SX1276OnDio0Irq+0x2a4>
}
 80097d2:	b002      	add	sp, #8
 80097d4:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 80097d6:	4bac      	ldr	r3, [pc, #688]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80097d8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80097dc:	b343      	cbz	r3, 8009830 <SX1276OnDio0Irq+0x84>
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d1f7      	bne.n	80097d2 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80097e2:	2140      	movs	r1, #64	; 0x40
 80097e4:	2012      	movs	r0, #18
 80097e6:	f007 faed 	bl	8010dc4 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80097ea:	2012      	movs	r0, #18
 80097ec:	f007 faf6 	bl	8010ddc <SX1276Read>
 80097f0:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80097f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097f8:	f013 0f20 	tst.w	r3, #32
 80097fc:	f000 80bd 	beq.w	800997a <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8009800:	2120      	movs	r1, #32
 8009802:	2012      	movs	r0, #18
 8009804:	f007 fade 	bl	8010dc4 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8009808:	4b9f      	ldr	r3, [pc, #636]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800980a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800980e:	b91b      	cbnz	r3, 8009818 <SX1276OnDio0Irq+0x6c>
                            SX1276.Settings.State = RF_IDLE;
 8009810:	4b9d      	ldr	r3, [pc, #628]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009812:	2200      	movs	r2, #0
 8009814:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8009818:	489c      	ldr	r0, [pc, #624]	; (8009a8c <SX1276OnDio0Irq+0x2e0>)
 800981a:	f7ff fdb3 	bl	8009384 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800981e:	4b9c      	ldr	r3, [pc, #624]	; (8009a90 <SX1276OnDio0Irq+0x2e4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0d5      	beq.n	80097d2 <SX1276OnDio0Irq+0x26>
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0d2      	beq.n	80097d2 <SX1276OnDio0Irq+0x26>
                            RadioEvents->RxError( );
 800982c:	4798      	blx	r3
 800982e:	e7d0      	b.n	80097d2 <SX1276OnDio0Irq+0x26>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8009830:	4b95      	ldr	r3, [pc, #596]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009832:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8009836:	bb0b      	cbnz	r3, 800987c <SX1276OnDio0Irq+0xd0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009838:	4b93      	ldr	r3, [pc, #588]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800983a:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800983e:	2900      	cmp	r1, #0
 8009840:	d15e      	bne.n	8009900 <SX1276OnDio0Irq+0x154>
 8009842:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8009846:	2b00      	cmp	r3, #0
 8009848:	d15a      	bne.n	8009900 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800984a:	4b8f      	ldr	r3, [pc, #572]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800984c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009850:	2b00      	cmp	r3, #0
 8009852:	d14e      	bne.n	80098f2 <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009854:	2101      	movs	r1, #1
 8009856:	488f      	ldr	r0, [pc, #572]	; (8009a94 <SX1276OnDio0Irq+0x2e8>)
 8009858:	f007 fa74 	bl	8010d44 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800985c:	4c8a      	ldr	r4, [pc, #552]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800985e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8009862:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8009866:	1ac9      	subs	r1, r1, r3
 8009868:	b2c9      	uxtb	r1, r1
 800986a:	488b      	ldr	r0, [pc, #556]	; (8009a98 <SX1276OnDio0Irq+0x2ec>)
 800986c:	4418      	add	r0, r3
 800986e:	f007 fa69 	bl	8010d44 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009872:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8009876:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 800987a:	e04e      	b.n	800991a <SX1276OnDio0Irq+0x16e>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800987c:	203f      	movs	r0, #63	; 0x3f
 800987e:	f007 faad 	bl	8010ddc <SX1276Read>
 8009882:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8009886:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800988a:	f013 0f02 	tst.w	r3, #2
 800988e:	d1d3      	bne.n	8009838 <SX1276OnDio0Irq+0x8c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8009890:	210b      	movs	r1, #11
 8009892:	203e      	movs	r0, #62	; 0x3e
 8009894:	f007 fa96 	bl	8010dc4 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009898:	2110      	movs	r1, #16
 800989a:	203f      	movs	r0, #63	; 0x3f
 800989c:	f007 fa92 	bl	8010dc4 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80098a0:	487a      	ldr	r0, [pc, #488]	; (8009a8c <SX1276OnDio0Irq+0x2e0>)
 80098a2:	f7ff fd6f 	bl	8009384 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80098a6:	4b78      	ldr	r3, [pc, #480]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80098a8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80098ac:	b9bb      	cbnz	r3, 80098de <SX1276OnDio0Irq+0x132>
                            TimerStop( &RxTimeoutSyncWord );
 80098ae:	487b      	ldr	r0, [pc, #492]	; (8009a9c <SX1276OnDio0Irq+0x2f0>)
 80098b0:	f7ff fd68 	bl	8009384 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80098b4:	4b74      	ldr	r3, [pc, #464]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80098bc:	4b74      	ldr	r3, [pc, #464]	; (8009a90 <SX1276OnDio0Irq+0x2e4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	b113      	cbz	r3, 80098c8 <SX1276OnDio0Irq+0x11c>
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	b103      	cbz	r3, 80098c8 <SX1276OnDio0Irq+0x11c>
                            RadioEvents->RxError( );
 80098c6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80098c8:	4b6f      	ldr	r3, [pc, #444]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80098d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80098d4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80098d8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 80098dc:	e779      	b.n	80097d2 <SX1276OnDio0Irq+0x26>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80098de:	200d      	movs	r0, #13
 80098e0:	f007 fa7c 	bl	8010ddc <SX1276Read>
 80098e4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80098e8:	b2c9      	uxtb	r1, r1
 80098ea:	200d      	movs	r0, #13
 80098ec:	f007 fa6a 	bl	8010dc4 <SX1276Write>
 80098f0:	e7e4      	b.n	80098bc <SX1276OnDio0Irq+0x110>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80098f2:	2032      	movs	r0, #50	; 0x32
 80098f4:	f007 fa72 	bl	8010ddc <SX1276Read>
 80098f8:	4b63      	ldr	r3, [pc, #396]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80098fa:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80098fe:	e7ad      	b.n	800985c <SX1276OnDio0Irq+0xb0>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009900:	4c61      	ldr	r4, [pc, #388]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009902:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8009906:	1ac9      	subs	r1, r1, r3
 8009908:	b2c9      	uxtb	r1, r1
 800990a:	4863      	ldr	r0, [pc, #396]	; (8009a98 <SX1276OnDio0Irq+0x2ec>)
 800990c:	4418      	add	r0, r3
 800990e:	f007 fa19 	bl	8010d44 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009912:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8009916:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800991a:	485c      	ldr	r0, [pc, #368]	; (8009a8c <SX1276OnDio0Irq+0x2e0>)
 800991c:	f7ff fd32 	bl	8009384 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8009920:	4b59      	ldr	r3, [pc, #356]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009922:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8009926:	b9f3      	cbnz	r3, 8009966 <SX1276OnDio0Irq+0x1ba>
                    SX1276.Settings.State = RF_IDLE;
 8009928:	4b57      	ldr	r3, [pc, #348]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800992a:	2200      	movs	r2, #0
 800992c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8009930:	485a      	ldr	r0, [pc, #360]	; (8009a9c <SX1276OnDio0Irq+0x2f0>)
 8009932:	f7ff fd27 	bl	8009384 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009936:	4b56      	ldr	r3, [pc, #344]	; (8009a90 <SX1276OnDio0Irq+0x2e4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	b14b      	cbz	r3, 8009950 <SX1276OnDio0Irq+0x1a4>
 800993c:	689c      	ldr	r4, [r3, #8]
 800993e:	b13c      	cbz	r4, 8009950 <SX1276OnDio0Irq+0x1a4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8009940:	4951      	ldr	r1, [pc, #324]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009942:	2300      	movs	r3, #0
 8009944:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 8009948:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 800994c:	4852      	ldr	r0, [pc, #328]	; (8009a98 <SX1276OnDio0Irq+0x2ec>)
 800994e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009950:	4b4d      	ldr	r3, [pc, #308]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009952:	2200      	movs	r2, #0
 8009954:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009958:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800995c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 8009960:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 8009964:	e735      	b.n	80097d2 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009966:	200d      	movs	r0, #13
 8009968:	f007 fa38 	bl	8010ddc <SX1276Read>
 800996c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009970:	b2c9      	uxtb	r1, r1
 8009972:	200d      	movs	r0, #13
 8009974:	f007 fa26 	bl	8010dc4 <SX1276Write>
 8009978:	e7dd      	b.n	8009936 <SX1276OnDio0Irq+0x18a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800997a:	2019      	movs	r0, #25
 800997c:	f007 fa2e 	bl	8010ddc <SX1276Read>
 8009980:	b243      	sxtb	r3, r0
 8009982:	3302      	adds	r3, #2
 8009984:	109b      	asrs	r3, r3, #2
 8009986:	4c40      	ldr	r4, [pc, #256]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009988:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800998c:	201a      	movs	r0, #26
 800998e:	f007 fa25 	bl	8010ddc <SX1276Read>
 8009992:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8009994:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 8009998:	2a00      	cmp	r2, #0
 800999a:	db39      	blt.n	8009a10 <SX1276OnDio0Irq+0x264>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800999c:	4a3a      	ldr	r2, [pc, #232]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 800999e:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 80099a2:	4a3f      	ldr	r2, [pc, #252]	; (8009aa0 <SX1276OnDio0Irq+0x2f4>)
 80099a4:	4291      	cmp	r1, r2
 80099a6:	d94c      	bls.n	8009a42 <SX1276OnDio0Irq+0x296>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80099a8:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80099ac:	389d      	subs	r0, #157	; 0x9d
 80099ae:	4b36      	ldr	r3, [pc, #216]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80099b0:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80099b4:	2013      	movs	r0, #19
 80099b6:	f007 fa11 	bl	8010ddc <SX1276Read>
 80099ba:	4c33      	ldr	r4, [pc, #204]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80099bc:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80099c0:	2010      	movs	r0, #16
 80099c2:	f007 fa0b 	bl	8010ddc <SX1276Read>
 80099c6:	4601      	mov	r1, r0
 80099c8:	200d      	movs	r0, #13
 80099ca:	f007 f9fb 	bl	8010dc4 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80099ce:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 80099d2:	4831      	ldr	r0, [pc, #196]	; (8009a98 <SX1276OnDio0Irq+0x2ec>)
 80099d4:	f007 f9b6 	bl	8010d44 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80099d8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80099dc:	b913      	cbnz	r3, 80099e4 <SX1276OnDio0Irq+0x238>
                        SX1276.Settings.State = RF_IDLE;
 80099de:	2200      	movs	r2, #0
 80099e0:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 80099e4:	4829      	ldr	r0, [pc, #164]	; (8009a8c <SX1276OnDio0Irq+0x2e0>)
 80099e6:	f7ff fccd 	bl	8009384 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80099ea:	4b29      	ldr	r3, [pc, #164]	; (8009a90 <SX1276OnDio0Irq+0x2e4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f43f aeef 	beq.w	80097d2 <SX1276OnDio0Irq+0x26>
 80099f4:	689c      	ldr	r4, [r3, #8]
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	f43f aeeb 	beq.w	80097d2 <SX1276OnDio0Irq+0x26>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80099fc:	4922      	ldr	r1, [pc, #136]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 80099fe:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8009a02:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8009a06:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8009a0a:	4823      	ldr	r0, [pc, #140]	; (8009a98 <SX1276OnDio0Irq+0x2ec>)
 8009a0c:	47a0      	blx	r4
 8009a0e:	e6e0      	b.n	80097d2 <SX1276OnDio0Irq+0x26>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009a10:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8009a14:	4922      	ldr	r1, [pc, #136]	; (8009aa0 <SX1276OnDio0Irq+0x2f4>)
 8009a16:	428c      	cmp	r4, r1
 8009a18:	d909      	bls.n	8009a2e <SX1276OnDio0Irq+0x282>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8009a1a:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8009a1e:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8009a20:	fa12 f383 	uxtah	r3, r2, r3
 8009a24:	3b9d      	subs	r3, #157	; 0x9d
 8009a26:	4a18      	ldr	r2, [pc, #96]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009a28:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8009a2c:	e7c2      	b.n	80099b4 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8009a2e:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8009a32:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8009a34:	fa12 f383 	uxtah	r3, r2, r3
 8009a38:	3ba4      	subs	r3, #164	; 0xa4
 8009a3a:	4a13      	ldr	r2, [pc, #76]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009a3c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8009a40:	e7b8      	b.n	80099b4 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8009a42:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8009a46:	38a4      	subs	r0, #164	; 0xa4
 8009a48:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009a4a:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8009a4e:	e7b1      	b.n	80099b4 <SX1276OnDio0Irq+0x208>
            TimerStop( &TxTimeoutTimer );
 8009a50:	4814      	ldr	r0, [pc, #80]	; (8009aa4 <SX1276OnDio0Irq+0x2f8>)
 8009a52:	f7ff fc97 	bl	8009384 <TimerStop>
            switch( SX1276.Settings.Modem )
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009a58:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d00e      	beq.n	8009a7e <SX1276OnDio0Irq+0x2d2>
                SX1276.Settings.State = RF_IDLE;
 8009a60:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <SX1276OnDio0Irq+0x2dc>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <SX1276OnDio0Irq+0x2e4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f43f aeb0 	beq.w	80097d2 <SX1276OnDio0Irq+0x26>
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f43f aeac 	beq.w	80097d2 <SX1276OnDio0Irq+0x26>
                    RadioEvents->TxDone( );
 8009a7a:	4798      	blx	r3
}
 8009a7c:	e6a9      	b.n	80097d2 <SX1276OnDio0Irq+0x26>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8009a7e:	2108      	movs	r1, #8
 8009a80:	2012      	movs	r0, #18
 8009a82:	f007 f99f 	bl	8010dc4 <SX1276Write>
 8009a86:	e7eb      	b.n	8009a60 <SX1276OnDio0Irq+0x2b4>
 8009a88:	20001530 	.word	0x20001530
 8009a8c:	20001418 	.word	0x20001418
 8009a90:	200013fc 	.word	0x200013fc
 8009a94:	20001646 	.word	0x20001646
 8009a98:	20001430 	.word	0x20001430
 8009a9c:	20001400 	.word	0x20001400
 8009aa0:	1f4add40 	.word	0x1f4add40
 8009aa4:	20001674 	.word	0x20001674

08009aa8 <RxChainCalibration>:
{
 8009aa8:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8009aaa:	2009      	movs	r0, #9
 8009aac:	f007 f996 	bl	8010ddc <SX1276Read>
 8009ab0:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8009ab2:	2006      	movs	r0, #6
 8009ab4:	f007 f992 	bl	8010ddc <SX1276Read>
 8009ab8:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8009aba:	2007      	movs	r0, #7
 8009abc:	f007 f98e 	bl	8010ddc <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8009ac0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8009ac4:	2008      	movs	r0, #8
 8009ac6:	f007 f989 	bl	8010ddc <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8009aca:	4320      	orrs	r0, r4
 8009acc:	f007 f8cd 	bl	8010c6a <SX1276ConvertPllStepToFreqInHz>
 8009ad0:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	2009      	movs	r0, #9
 8009ad6:	f007 f975 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8009ada:	203b      	movs	r0, #59	; 0x3b
 8009adc:	f007 f97e 	bl	8010ddc <SX1276Read>
 8009ae0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009ae4:	b2c9      	uxtb	r1, r1
 8009ae6:	203b      	movs	r0, #59	; 0x3b
 8009ae8:	f007 f96c 	bl	8010dc4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8009aec:	203b      	movs	r0, #59	; 0x3b
 8009aee:	f007 f975 	bl	8010ddc <SX1276Read>
 8009af2:	f010 0f20 	tst.w	r0, #32
 8009af6:	d1f9      	bne.n	8009aec <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8009af8:	480c      	ldr	r0, [pc, #48]	; (8009b2c <RxChainCalibration+0x84>)
 8009afa:	f7ff fce9 	bl	80094d0 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8009afe:	203b      	movs	r0, #59	; 0x3b
 8009b00:	f007 f96c 	bl	8010ddc <SX1276Read>
 8009b04:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009b08:	b2c9      	uxtb	r1, r1
 8009b0a:	203b      	movs	r0, #59	; 0x3b
 8009b0c:	f007 f95a 	bl	8010dc4 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8009b10:	203b      	movs	r0, #59	; 0x3b
 8009b12:	f007 f963 	bl	8010ddc <SX1276Read>
 8009b16:	f010 0f20 	tst.w	r0, #32
 8009b1a:	d1f9      	bne.n	8009b10 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	2009      	movs	r0, #9
 8009b20:	f007 f950 	bl	8010dc4 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8009b24:	4620      	mov	r0, r4
 8009b26:	f7ff fcd3 	bl	80094d0 <SX1276SetChannel>
}
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	33bca100 	.word	0x33bca100

08009b30 <SX1276SetSleep>:
{
 8009b30:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8009b32:	480a      	ldr	r0, [pc, #40]	; (8009b5c <SX1276SetSleep+0x2c>)
 8009b34:	f7ff fc26 	bl	8009384 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8009b38:	4809      	ldr	r0, [pc, #36]	; (8009b60 <SX1276SetSleep+0x30>)
 8009b3a:	f7ff fc23 	bl	8009384 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8009b3e:	4809      	ldr	r0, [pc, #36]	; (8009b64 <SX1276SetSleep+0x34>)
 8009b40:	f7ff fc20 	bl	8009384 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009b44:	2000      	movs	r0, #0
 8009b46:	f007 f955 	bl	8010df4 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	f007 f826 	bl	8010b9c <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8009b50:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <SX1276SetSleep+0x38>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8009b58:	bd08      	pop	{r3, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20001418 	.word	0x20001418
 8009b60:	20001674 	.word	0x20001674
 8009b64:	20001400 	.word	0x20001400
 8009b68:	20001530 	.word	0x20001530

08009b6c <SX1276SetStby>:
{
 8009b6c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8009b6e:	4808      	ldr	r0, [pc, #32]	; (8009b90 <SX1276SetStby+0x24>)
 8009b70:	f7ff fc08 	bl	8009384 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8009b74:	4807      	ldr	r0, [pc, #28]	; (8009b94 <SX1276SetStby+0x28>)
 8009b76:	f7ff fc05 	bl	8009384 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8009b7a:	4807      	ldr	r0, [pc, #28]	; (8009b98 <SX1276SetStby+0x2c>)
 8009b7c:	f7ff fc02 	bl	8009384 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8009b80:	2001      	movs	r0, #1
 8009b82:	f007 f937 	bl	8010df4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <SX1276SetStby+0x30>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8009b8e:	bd08      	pop	{r3, pc}
 8009b90:	20001418 	.word	0x20001418
 8009b94:	20001674 	.word	0x20001674
 8009b98:	20001400 	.word	0x20001400
 8009b9c:	20001530 	.word	0x20001530

08009ba0 <SX1276SetTx>:
{
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8009ba4:	4829      	ldr	r0, [pc, #164]	; (8009c4c <SX1276SetTx+0xac>)
 8009ba6:	f7ff fbed 	bl	8009384 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009baa:	4621      	mov	r1, r4
 8009bac:	4828      	ldr	r0, [pc, #160]	; (8009c50 <SX1276SetTx+0xb0>)
 8009bae:	f007 f831 	bl	8010c14 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8009bb2:	4b28      	ldr	r3, [pc, #160]	; (8009c54 <SX1276SetTx+0xb4>)
 8009bb4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009bb8:	b163      	cbz	r3, 8009bd4 <SX1276SetTx+0x34>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d023      	beq.n	8009c06 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8009bbe:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <SX1276SetTx+0xb4>)
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8009bc6:	4822      	ldr	r0, [pc, #136]	; (8009c50 <SX1276SetTx+0xb0>)
 8009bc8:	f7ff fb62 	bl	8009290 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8009bcc:	2003      	movs	r0, #3
 8009bce:	f007 f911 	bl	8010df4 <SX1276SetOpMode>
}
 8009bd2:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009bd4:	2040      	movs	r0, #64	; 0x40
 8009bd6:	f007 f901 	bl	8010ddc <SX1276Read>
 8009bda:	f000 0103 	and.w	r1, r0, #3
 8009bde:	2040      	movs	r0, #64	; 0x40
 8009be0:	f007 f8f0 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8009be4:	2041      	movs	r0, #65	; 0x41
 8009be6:	f007 f8f9 	bl	8010ddc <SX1276Read>
 8009bea:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8009bee:	2041      	movs	r0, #65	; 0x41
 8009bf0:	f007 f8e8 	bl	8010dc4 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8009bf4:	2035      	movs	r0, #53	; 0x35
 8009bf6:	f007 f8f1 	bl	8010ddc <SX1276Read>
 8009bfa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009bfe:	4b15      	ldr	r3, [pc, #84]	; (8009c54 <SX1276SetTx+0xb4>)
 8009c00:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8009c04:	e7db      	b.n	8009bbe <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009c06:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <SX1276SetTx+0xb4>)
 8009c08:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8009c0c:	b173      	cbz	r3, 8009c2c <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009c0e:	21f5      	movs	r1, #245	; 0xf5
 8009c10:	2011      	movs	r0, #17
 8009c12:	f007 f8d7 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8009c16:	2040      	movs	r0, #64	; 0x40
 8009c18:	f007 f8e0 	bl	8010ddc <SX1276Read>
 8009c1c:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8009c20:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009c24:	2040      	movs	r0, #64	; 0x40
 8009c26:	f007 f8cd 	bl	8010dc4 <SX1276Write>
 8009c2a:	e7c8      	b.n	8009bbe <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009c2c:	21f7      	movs	r1, #247	; 0xf7
 8009c2e:	2011      	movs	r0, #17
 8009c30:	f007 f8c8 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8009c34:	2040      	movs	r0, #64	; 0x40
 8009c36:	f007 f8d1 	bl	8010ddc <SX1276Read>
 8009c3a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8009c3e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009c42:	2040      	movs	r0, #64	; 0x40
 8009c44:	f007 f8be 	bl	8010dc4 <SX1276Write>
 8009c48:	e7b9      	b.n	8009bbe <SX1276SetTx+0x1e>
 8009c4a:	bf00      	nop
 8009c4c:	20001418 	.word	0x20001418
 8009c50:	20001674 	.word	0x20001674
 8009c54:	20001530 	.word	0x20001530

08009c58 <SX1276Send>:
{
 8009c58:	b530      	push	{r4, r5, lr}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8009c62:	4b44      	ldr	r3, [pc, #272]	; (8009d74 <SX1276Send+0x11c>)
 8009c64:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009c68:	b133      	cbz	r3, 8009c78 <SX1276Send+0x20>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d03a      	beq.n	8009ce4 <SX1276Send+0x8c>
 8009c6e:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8009c70:	f7ff ff96 	bl	8009ba0 <SX1276SetTx>
}
 8009c74:	b003      	add	sp, #12
 8009c76:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009c78:	4b3e      	ldr	r3, [pc, #248]	; (8009d74 <SX1276Send+0x11c>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8009c80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009c84:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8009c88:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009c8c:	b9eb      	cbnz	r3, 8009cca <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8009c8e:	2101      	movs	r1, #1
 8009c90:	f10d 0007 	add.w	r0, sp, #7
 8009c94:	f007 f85d 	bl	8010d52 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8009c98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009c9c:	1e53      	subs	r3, r2, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8009ca2:	d816      	bhi.n	8009cd2 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8009ca4:	4b33      	ldr	r3, [pc, #204]	; (8009d74 <SX1276Send+0x11c>)
 8009ca6:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8009caa:	4d32      	ldr	r5, [pc, #200]	; (8009d74 <SX1276Send+0x11c>)
 8009cac:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f007 f84e 	bl	8010d52 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8009cb6:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8009cba:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8009cc4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8009cc8:	e7d2      	b.n	8009c70 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8009cca:	2032      	movs	r0, #50	; 0x32
 8009ccc:	f007 f87a 	bl	8010dc4 <SX1276Write>
 8009cd0:	e7e2      	b.n	8009c98 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4828      	ldr	r0, [pc, #160]	; (8009d78 <SX1276Send+0x120>)
 8009cd6:	f006 ff73 	bl	8010bc0 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8009cda:	4b26      	ldr	r3, [pc, #152]	; (8009d74 <SX1276Send+0x11c>)
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8009ce2:	e7e2      	b.n	8009caa <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8009ce4:	4b23      	ldr	r3, [pc, #140]	; (8009d74 <SX1276Send+0x11c>)
 8009ce6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009cea:	b353      	cbz	r3, 8009d42 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8009cec:	2033      	movs	r0, #51	; 0x33
 8009cee:	f007 f875 	bl	8010ddc <SX1276Read>
 8009cf2:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8009cf6:	2033      	movs	r0, #51	; 0x33
 8009cf8:	f007 f864 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8009cfc:	2119      	movs	r1, #25
 8009cfe:	203b      	movs	r0, #59	; 0x3b
 8009d00:	f007 f860 	bl	8010dc4 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8009d04:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009d08:	4b1a      	ldr	r3, [pc, #104]	; (8009d74 <SX1276Send+0x11c>)
 8009d0a:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8009d0e:	2022      	movs	r0, #34	; 0x22
 8009d10:	f007 f858 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8009d14:	2100      	movs	r1, #0
 8009d16:	200e      	movs	r0, #14
 8009d18:	f007 f854 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	200d      	movs	r0, #13
 8009d20:	f007 f850 	bl	8010dc4 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8009d24:	2001      	movs	r0, #1
 8009d26:	f007 f859 	bl	8010ddc <SX1276Read>
 8009d2a:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8009d2e:	d01a      	beq.n	8009d66 <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8009d30:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009d34:	4620      	mov	r0, r4
 8009d36:	f007 f80c 	bl	8010d52 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8009d3a:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <SX1276Send+0x11c>)
 8009d3c:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8009d40:	e796      	b.n	8009c70 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8009d42:	2033      	movs	r0, #51	; 0x33
 8009d44:	f007 f84a 	bl	8010ddc <SX1276Read>
 8009d48:	b241      	sxtb	r1, r0
 8009d4a:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8009d4e:	f041 0101 	orr.w	r1, r1, #1
 8009d52:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8009d56:	2033      	movs	r0, #51	; 0x33
 8009d58:	f007 f834 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8009d5c:	211d      	movs	r1, #29
 8009d5e:	203b      	movs	r0, #59	; 0x3b
 8009d60:	f007 f830 	bl	8010dc4 <SX1276Write>
 8009d64:	e7ce      	b.n	8009d04 <SX1276Send+0xac>
                SX1276SetStby( );
 8009d66:	f7ff ff01 	bl	8009b6c <SX1276SetStby>
                DelayMs( 1 );
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	f006 ff79 	bl	8010c62 <DelayMs>
 8009d70:	e7de      	b.n	8009d30 <SX1276Send+0xd8>
 8009d72:	bf00      	nop
 8009d74:	20001530 	.word	0x20001530
 8009d78:	20001430 	.word	0x20001430

08009d7c <SX1276SetRx>:
{
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8009d80:	489d      	ldr	r0, [pc, #628]	; (8009ff8 <SX1276SetRx+0x27c>)
 8009d82:	f7ff faff 	bl	8009384 <TimerStop>
    switch( SX1276.Settings.Modem )
 8009d86:	4b9d      	ldr	r3, [pc, #628]	; (8009ffc <SX1276SetRx+0x280>)
 8009d88:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009d8c:	b1e3      	cbz	r3, 8009dc8 <SX1276SetRx+0x4c>
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d045      	beq.n	8009e1e <SX1276SetRx+0xa2>
 8009d92:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8009d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4899      	ldr	r0, [pc, #612]	; (800a000 <SX1276SetRx+0x284>)
 8009d9c:	f007 feff 	bl	8011b9e <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8009da0:	4b96      	ldr	r3, [pc, #600]	; (8009ffc <SX1276SetRx+0x280>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	f040 8107 	bne.w	8009fbc <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8009dae:	4b93      	ldr	r3, [pc, #588]	; (8009ffc <SX1276SetRx+0x280>)
 8009db0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 810a 	beq.w	8009fce <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	f000 8118 	beq.w	8009ff0 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8009dc0:	2005      	movs	r0, #5
 8009dc2:	f007 f817 	bl	8010df4 <SX1276SetOpMode>
}
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8009dc8:	4d8c      	ldr	r5, [pc, #560]	; (8009ffc <SX1276SetRx+0x280>)
 8009dca:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009dce:	2040      	movs	r0, #64	; 0x40
 8009dd0:	f007 f804 	bl	8010ddc <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8009dd4:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009dd8:	f041 010c 	orr.w	r1, r1, #12
 8009ddc:	2040      	movs	r0, #64	; 0x40
 8009dde:	f006 fff1 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8009de2:	2041      	movs	r0, #65	; 0x41
 8009de4:	f006 fffa 	bl	8010ddc <SX1276Read>
 8009de8:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8009dec:	b2c9      	uxtb	r1, r1
 8009dee:	2041      	movs	r0, #65	; 0x41
 8009df0:	f006 ffe8 	bl	8010dc4 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8009df4:	2035      	movs	r0, #53	; 0x35
 8009df6:	f006 fff1 	bl	8010ddc <SX1276Read>
 8009dfa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009dfe:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8009e02:	211e      	movs	r1, #30
 8009e04:	200d      	movs	r0, #13
 8009e06:	f006 ffdd 	bl	8010dc4 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009e10:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009e14:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009e18:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8009e1c:	e7ba      	b.n	8009d94 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8009e1e:	4b77      	ldr	r3, [pc, #476]	; (8009ffc <SX1276SetRx+0x280>)
 8009e20:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009e24:	b353      	cbz	r3, 8009e7c <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8009e26:	2033      	movs	r0, #51	; 0x33
 8009e28:	f006 ffd8 	bl	8010ddc <SX1276Read>
 8009e2c:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8009e30:	b2c9      	uxtb	r1, r1
 8009e32:	2033      	movs	r0, #51	; 0x33
 8009e34:	f006 ffc6 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8009e38:	2119      	movs	r1, #25
 8009e3a:	203b      	movs	r0, #59	; 0x3b
 8009e3c:	f006 ffc2 	bl	8010dc4 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8009e40:	4b6e      	ldr	r3, [pc, #440]	; (8009ffc <SX1276SetRx+0x280>)
 8009e42:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	f200 8087 	bhi.w	8009f5a <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8009e4c:	2031      	movs	r0, #49	; 0x31
 8009e4e:	f006 ffc5 	bl	8010ddc <SX1276Read>
 8009e52:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8009e56:	2031      	movs	r0, #49	; 0x31
 8009e58:	f006 ffb4 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	2030      	movs	r0, #48	; 0x30
 8009e60:	f006 ffb0 	bl	8010dc4 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8009e64:	4b65      	ldr	r3, [pc, #404]	; (8009ffc <SX1276SetRx+0x280>)
 8009e66:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009e6a:	2b08      	cmp	r3, #8
 8009e6c:	d87e      	bhi.n	8009f6c <SX1276SetRx+0x1f0>
 8009e6e:	e8df f003 	tbb	[pc, r3]
 8009e72:	2417      	.short	0x2417
 8009e74:	584b3e31 	.word	0x584b3e31
 8009e78:	6a65      	.short	0x6a65
 8009e7a:	6f          	.byte	0x6f
 8009e7b:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8009e7c:	2033      	movs	r0, #51	; 0x33
 8009e7e:	f006 ffad 	bl	8010ddc <SX1276Read>
 8009e82:	b241      	sxtb	r1, r0
 8009e84:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8009e88:	f041 0101 	orr.w	r1, r1, #1
 8009e8c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8009e90:	2033      	movs	r0, #51	; 0x33
 8009e92:	f006 ff97 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8009e96:	211d      	movs	r1, #29
 8009e98:	203b      	movs	r0, #59	; 0x3b
 8009e9a:	f006 ff93 	bl	8010dc4 <SX1276Write>
 8009e9e:	e7cf      	b.n	8009e40 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8009ea0:	2148      	movs	r1, #72	; 0x48
 8009ea2:	202f      	movs	r0, #47	; 0x2f
 8009ea4:	f006 ff8e 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8009ea8:	4b54      	ldr	r3, [pc, #336]	; (8009ffc <SX1276SetRx+0x280>)
 8009eaa:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009eae:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8009eb2:	3002      	adds	r0, #2
 8009eb4:	f7ff fb0c 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009eb8:	e058      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8009eba:	2144      	movs	r1, #68	; 0x44
 8009ebc:	202f      	movs	r0, #47	; 0x2f
 8009ebe:	f006 ff81 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8009ec2:	4b4e      	ldr	r3, [pc, #312]	; (8009ffc <SX1276SetRx+0x280>)
 8009ec4:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009ec8:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8009ecc:	3034      	adds	r0, #52	; 0x34
 8009ece:	f7ff faff 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009ed2:	e04b      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8009ed4:	2144      	movs	r1, #68	; 0x44
 8009ed6:	202f      	movs	r0, #47	; 0x2f
 8009ed8:	f006 ff74 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8009edc:	4b47      	ldr	r3, [pc, #284]	; (8009ffc <SX1276SetRx+0x280>)
 8009ede:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009ee2:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8009ee6:	3004      	adds	r0, #4
 8009ee8:	f7ff faf2 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009eec:	e03e      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8009eee:	2144      	movs	r1, #68	; 0x44
 8009ef0:	202f      	movs	r0, #47	; 0x2f
 8009ef2:	f006 ff67 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8009ef6:	4b41      	ldr	r3, [pc, #260]	; (8009ffc <SX1276SetRx+0x280>)
 8009ef8:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009efc:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8009f00:	305e      	adds	r0, #94	; 0x5e
 8009f02:	f7ff fae5 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009f06:	e031      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8009f08:	2144      	movs	r1, #68	; 0x44
 8009f0a:	202f      	movs	r0, #47	; 0x2f
 8009f0c:	f006 ff5a 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8009f10:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <SX1276SetRx+0x280>)
 8009f12:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009f16:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8009f1a:	3012      	adds	r0, #18
 8009f1c:	f7ff fad8 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009f20:	e024      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8009f22:	2144      	movs	r1, #68	; 0x44
 8009f24:	202f      	movs	r0, #47	; 0x2f
 8009f26:	f006 ff4d 	bl	8010dc4 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8009f2a:	4b34      	ldr	r3, [pc, #208]	; (8009ffc <SX1276SetRx+0x280>)
 8009f2c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8009f30:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8009f34:	30c6      	adds	r0, #198	; 0xc6
 8009f36:	f7ff facb 	bl	80094d0 <SX1276SetChannel>
                    break;
 8009f3a:	e017      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8009f3c:	2140      	movs	r1, #64	; 0x40
 8009f3e:	202f      	movs	r0, #47	; 0x2f
 8009f40:	f006 ff40 	bl	8010dc4 <SX1276Write>
                    break;
 8009f44:	e012      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8009f46:	2140      	movs	r1, #64	; 0x40
 8009f48:	202f      	movs	r0, #47	; 0x2f
 8009f4a:	f006 ff3b 	bl	8010dc4 <SX1276Write>
                    break;
 8009f4e:	e00d      	b.n	8009f6c <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8009f50:	2140      	movs	r1, #64	; 0x40
 8009f52:	202f      	movs	r0, #47	; 0x2f
 8009f54:	f006 ff36 	bl	8010dc4 <SX1276Write>
                    break;
 8009f58:	e008      	b.n	8009f6c <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8009f5a:	2031      	movs	r0, #49	; 0x31
 8009f5c:	f006 ff3e 	bl	8010ddc <SX1276Read>
 8009f60:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8009f64:	b2c9      	uxtb	r1, r1
 8009f66:	2031      	movs	r0, #49	; 0x31
 8009f68:	f006 ff2c 	bl	8010dc4 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8009f6c:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <SX1276SetRx+0x280>)
 8009f6e:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009f72:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8009f76:	b1a3      	cbz	r3, 8009fa2 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8009f78:	211d      	movs	r1, #29
 8009f7a:	2011      	movs	r0, #17
 8009f7c:	f006 ff22 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8009f80:	2040      	movs	r0, #64	; 0x40
 8009f82:	f006 ff2b 	bl	8010ddc <SX1276Read>
 8009f86:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8009f8a:	2040      	movs	r0, #64	; 0x40
 8009f8c:	f006 ff1a 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8009f90:	2100      	movs	r1, #0
 8009f92:	200f      	movs	r0, #15
 8009f94:	f006 ff16 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8009f98:	2100      	movs	r1, #0
 8009f9a:	200d      	movs	r0, #13
 8009f9c:	f006 ff12 	bl	8010dc4 <SX1276Write>
        break;
 8009fa0:	e6f8      	b.n	8009d94 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8009fa2:	211f      	movs	r1, #31
 8009fa4:	2011      	movs	r0, #17
 8009fa6:	f006 ff0d 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8009faa:	2040      	movs	r0, #64	; 0x40
 8009fac:	f006 ff16 	bl	8010ddc <SX1276Read>
 8009fb0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8009fb4:	2040      	movs	r0, #64	; 0x40
 8009fb6:	f006 ff05 	bl	8010dc4 <SX1276Write>
 8009fba:	e7e9      	b.n	8009f90 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009fbc:	4d11      	ldr	r5, [pc, #68]	; (800a004 <SX1276SetRx+0x288>)
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f006 fe27 	bl	8010c14 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f7ff f962 	bl	8009290 <TimerStart>
 8009fcc:	e6ef      	b.n	8009dae <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8009fce:	2005      	movs	r0, #5
 8009fd0:	f006 ff10 	bl	8010df4 <SX1276SetOpMode>
        if( rxContinuous == false )
 8009fd4:	2e00      	cmp	r6, #0
 8009fd6:	f47f aef6 	bne.w	8009dc6 <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8009fda:	4c0b      	ldr	r4, [pc, #44]	; (800a008 <SX1276SetRx+0x28c>)
 8009fdc:	4b07      	ldr	r3, [pc, #28]	; (8009ffc <SX1276SetRx+0x280>)
 8009fde:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f006 fe16 	bl	8010c14 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff f951 	bl	8009290 <TimerStart>
 8009fee:	e6ea      	b.n	8009dc6 <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8009ff0:	2006      	movs	r0, #6
 8009ff2:	f006 feff 	bl	8010df4 <SX1276SetOpMode>
}
 8009ff6:	e6e6      	b.n	8009dc6 <SX1276SetRx+0x4a>
 8009ff8:	20001674 	.word	0x20001674
 8009ffc:	20001530 	.word	0x20001530
 800a000:	20001430 	.word	0x20001430
 800a004:	20001418 	.word	0x20001418
 800a008:	20001400 	.word	0x20001400

0800a00c <SX1276ReadRssi>:
{
 800a00c:	b508      	push	{r3, lr}
    switch( modem )
 800a00e:	b120      	cbz	r0, 800a01a <SX1276ReadRssi+0xe>
 800a010:	2801      	cmp	r0, #1
 800a012:	d00a      	beq.n	800a02a <SX1276ReadRssi+0x1e>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a018:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800a01a:	2011      	movs	r0, #17
 800a01c:	f006 fede 	bl	8010ddc <SX1276Read>
 800a020:	f3c0 0047 	ubfx	r0, r0, #1, #8
 800a024:	4240      	negs	r0, r0
 800a026:	b200      	sxth	r0, r0
        break;
 800a028:	e7f6      	b.n	800a018 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800a02a:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <SX1276ReadRssi+0x48>)
 800a02c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800a030:	4b09      	ldr	r3, [pc, #36]	; (800a058 <SX1276ReadRssi+0x4c>)
 800a032:	429a      	cmp	r2, r3
 800a034:	d906      	bls.n	800a044 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800a036:	201b      	movs	r0, #27
 800a038:	f006 fed0 	bl	8010ddc <SX1276Read>
 800a03c:	b280      	uxth	r0, r0
 800a03e:	389d      	subs	r0, #157	; 0x9d
 800a040:	b200      	sxth	r0, r0
 800a042:	e7e9      	b.n	800a018 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800a044:	201b      	movs	r0, #27
 800a046:	f006 fec9 	bl	8010ddc <SX1276Read>
 800a04a:	b280      	uxth	r0, r0
 800a04c:	38a4      	subs	r0, #164	; 0xa4
 800a04e:	b200      	sxth	r0, r0
 800a050:	e7e2      	b.n	800a018 <SX1276ReadRssi+0xc>
 800a052:	bf00      	nop
 800a054:	20001530 	.word	0x20001530
 800a058:	1f4add40 	.word	0x1f4add40

0800a05c <SX1276SetModem>:
{
 800a05c:	b510      	push	{r4, lr}
 800a05e:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800a060:	2001      	movs	r0, #1
 800a062:	f006 febb 	bl	8010ddc <SX1276Read>
 800a066:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a06a:	d121      	bne.n	800a0b0 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 800a06c:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <SX1276SetModem+0x88>)
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 800a074:	4b1b      	ldr	r3, [pc, #108]	; (800a0e4 <SX1276SetModem+0x88>)
 800a076:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	d017      	beq.n	800a0ae <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 800a07e:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <SX1276SetModem+0x88>)
 800a080:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 800a084:	2c01      	cmp	r4, #1
 800a086:	d018      	beq.n	800a0ba <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800a088:	2000      	movs	r0, #0
 800a08a:	f006 feb3 	bl	8010df4 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800a08e:	2001      	movs	r0, #1
 800a090:	f006 fea4 	bl	8010ddc <SX1276Read>
 800a094:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800a098:	2001      	movs	r0, #1
 800a09a:	f006 fe93 	bl	8010dc4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800a09e:	2100      	movs	r1, #0
 800a0a0:	2040      	movs	r0, #64	; 0x40
 800a0a2:	f006 fe8f 	bl	8010dc4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800a0a6:	2130      	movs	r1, #48	; 0x30
 800a0a8:	2041      	movs	r0, #65	; 0x41
 800a0aa:	f006 fe8b 	bl	8010dc4 <SX1276Write>
}
 800a0ae:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <SX1276SetModem+0x88>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800a0b8:	e7dc      	b.n	800a074 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f006 fe9a 	bl	8010df4 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f006 fe8b 	bl	8010ddc <SX1276Read>
 800a0c6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800a0ca:	b2c9      	uxtb	r1, r1
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f006 fe79 	bl	8010dc4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	2040      	movs	r0, #64	; 0x40
 800a0d6:	f006 fe75 	bl	8010dc4 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800a0da:	2100      	movs	r1, #0
 800a0dc:	2041      	movs	r0, #65	; 0x41
 800a0de:	f006 fe71 	bl	8010dc4 <SX1276Write>
        break;
 800a0e2:	e7e4      	b.n	800a0ae <SX1276SetModem+0x52>
 800a0e4:	20001530 	.word	0x20001530

0800a0e8 <SX1276Init>:
{
 800a0e8:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 800a0ea:	4b19      	ldr	r3, [pc, #100]	; (800a150 <SX1276Init+0x68>)
 800a0ec:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800a0ee:	4c19      	ldr	r4, [pc, #100]	; (800a154 <SX1276Init+0x6c>)
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4819      	ldr	r0, [pc, #100]	; (800a158 <SX1276Init+0x70>)
 800a0f4:	f006 fd85 	bl	8010c02 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4818      	ldr	r0, [pc, #96]	; (800a15c <SX1276Init+0x74>)
 800a0fc:	f006 fd81 	bl	8010c02 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800a100:	4621      	mov	r1, r4
 800a102:	4817      	ldr	r0, [pc, #92]	; (800a160 <SX1276Init+0x78>)
 800a104:	f006 fd7d 	bl	8010c02 <TimerInit>
    SX1276Reset( );
 800a108:	f7fe fd38 	bl	8008b7c <SX1276Reset>
    RxChainCalibration( );
 800a10c:	f7ff fccc 	bl	8009aa8 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800a110:	2000      	movs	r0, #0
 800a112:	f006 fe6f 	bl	8010df4 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 800a116:	4813      	ldr	r0, [pc, #76]	; (800a164 <SX1276Init+0x7c>)
 800a118:	f7fe fd64 	bl	8008be4 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800a11c:	2400      	movs	r4, #0
 800a11e:	e00c      	b.n	800a13a <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 800a120:	4a11      	ldr	r2, [pc, #68]	; (800a168 <SX1276Init+0x80>)
 800a122:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a126:	18d5      	adds	r5, r2, r3
 800a128:	5cd0      	ldrb	r0, [r2, r3]
 800a12a:	f7ff ff97 	bl	800a05c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800a12e:	78a9      	ldrb	r1, [r5, #2]
 800a130:	7868      	ldrb	r0, [r5, #1]
 800a132:	f006 fe47 	bl	8010dc4 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800a136:	3401      	adds	r4, #1
 800a138:	b2e4      	uxtb	r4, r4
 800a13a:	2c0f      	cmp	r4, #15
 800a13c:	d9f0      	bls.n	800a120 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 800a13e:	2000      	movs	r0, #0
 800a140:	f7ff ff8c 	bl	800a05c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800a144:	4b09      	ldr	r3, [pc, #36]	; (800a16c <SX1276Init+0x84>)
 800a146:	2200      	movs	r2, #0
 800a148:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	200013fc 	.word	0x200013fc
 800a154:	0800a769 	.word	0x0800a769
 800a158:	20001674 	.word	0x20001674
 800a15c:	20001418 	.word	0x20001418
 800a160:	20001400 	.word	0x20001400
 800a164:	200001fc 	.word	0x200001fc
 800a168:	08013bcc 	.word	0x08013bcc
 800a16c:	20001530 	.word	0x20001530

0800a170 <SX1276SetRxConfig>:
{
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	b085      	sub	sp, #20
 800a176:	4604      	mov	r4, r0
 800a178:	9101      	str	r1, [sp, #4]
 800a17a:	4615      	mov	r5, r2
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 800a182:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800a186:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800a18a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 800a18e:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800a192:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 800a196:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800a19a:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 800a19c:	f7ff ff5e 	bl	800a05c <SX1276SetModem>
    switch( modem )
 800a1a0:	b124      	cbz	r4, 800a1ac <SX1276SetRxConfig+0x3c>
 800a1a2:	2c01      	cmp	r4, #1
 800a1a4:	d069      	beq.n	800a27a <SX1276SetRxConfig+0x10a>
}
 800a1a6:	b005      	add	sp, #20
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800a1ac:	4ba0      	ldr	r3, [pc, #640]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a1ae:	9c01      	ldr	r4, [sp, #4]
 800a1b0:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 800a1b4:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800a1b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 800a1be:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800a1c2:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800a1c6:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800a1ca:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800a1ce:	9a02      	ldr	r2, [sp, #8]
 800a1d0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800a1d4:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800a1d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a1dc:	fb02 fa0a 	mul.w	sl, r2, sl
 800a1e0:	fbba f2f5 	udiv	r2, sl, r5
 800a1e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800a1e8:	4b92      	ldr	r3, [pc, #584]	; (800a434 <SX1276SetRxConfig+0x2c4>)
 800a1ea:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800a1ee:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800a1f2:	2002      	movs	r0, #2
 800a1f4:	f006 fde6 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800a1f8:	b2e9      	uxtb	r1, r5
 800a1fa:	2003      	movs	r0, #3
 800a1fc:	f006 fde2 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff f913 	bl	800942c <GetFskBandwidthRegValue>
 800a206:	4601      	mov	r1, r0
 800a208:	2012      	movs	r0, #18
 800a20a:	f006 fddb 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800a20e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a210:	f7ff f90c 	bl	800942c <GetFskBandwidthRegValue>
 800a214:	4601      	mov	r1, r0
 800a216:	2013      	movs	r0, #19
 800a218:	f006 fdd4 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800a21c:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800a220:	2025      	movs	r0, #37	; 0x25
 800a222:	f006 fdcf 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800a226:	fa5f f188 	uxtb.w	r1, r8
 800a22a:	2026      	movs	r0, #38	; 0x26
 800a22c:	f006 fdca 	bl	8010dc4 <SX1276Write>
            if( fixLen == 1 )
 800a230:	b1df      	cbz	r7, 800a26a <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800a232:	4649      	mov	r1, r9
 800a234:	2032      	movs	r0, #50	; 0x32
 800a236:	f006 fdc5 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800a23a:	2030      	movs	r0, #48	; 0x30
 800a23c:	f006 fdce 	bl	8010ddc <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800a240:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800a244:	b1b7      	cbz	r7, 800a274 <SX1276SetRxConfig+0x104>
 800a246:	2300      	movs	r3, #0
 800a248:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800a24a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 800a24e:	b2c9      	uxtb	r1, r1
 800a250:	2030      	movs	r0, #48	; 0x30
 800a252:	f006 fdb7 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800a256:	2031      	movs	r0, #49	; 0x31
 800a258:	f006 fdc0 	bl	8010ddc <SX1276Read>
 800a25c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800a260:	b2c9      	uxtb	r1, r1
 800a262:	2031      	movs	r0, #49	; 0x31
 800a264:	f006 fdae 	bl	8010dc4 <SX1276Write>
        break;
 800a268:	e79d      	b.n	800a1a6 <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800a26a:	21ff      	movs	r1, #255	; 0xff
 800a26c:	2032      	movs	r0, #50	; 0x32
 800a26e:	f006 fda9 	bl	8010dc4 <SX1276Write>
 800a272:	e7e2      	b.n	800a23a <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800a274:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a278:	e7e6      	b.n	800a248 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d900      	bls.n	800a282 <SX1276SetRxConfig+0x112>
                while( 1 );
 800a280:	e7fe      	b.n	800a280 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 800a282:	9c01      	ldr	r4, [sp, #4]
 800a284:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800a286:	4b6a      	ldr	r3, [pc, #424]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a288:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 800a28c:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 800a290:	9a03      	ldr	r2, [sp, #12]
 800a292:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800a296:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800a29a:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800a29e:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800a2a2:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800a2a6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a2aa:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800a2ae:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a2b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800a2b6:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800a2ba:	9a02      	ldr	r2, [sp, #8]
 800a2bc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 800a2c0:	2d0c      	cmp	r5, #12
 800a2c2:	d803      	bhi.n	800a2cc <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 800a2c4:	2d05      	cmp	r5, #5
 800a2c6:	d802      	bhi.n	800a2ce <SX1276SetRxConfig+0x15e>
                datarate = 6;
 800a2c8:	2506      	movs	r5, #6
 800a2ca:	e000      	b.n	800a2ce <SX1276SetRxConfig+0x15e>
                datarate = 12;
 800a2cc:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a2ce:	2c07      	cmp	r4, #7
 800a2d0:	d063      	beq.n	800a39a <SX1276SetRxConfig+0x22a>
 800a2d2:	2c08      	cmp	r4, #8
 800a2d4:	d06a      	beq.n	800a3ac <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800a2d6:	4b56      	ldr	r3, [pc, #344]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800a2de:	201d      	movs	r0, #29
 800a2e0:	f006 fd7c 	bl	8010ddc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800a2e4:	0123      	lsls	r3, r4, #4
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	9b03      	ldr	r3, [sp, #12]
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 800a2f0:	ea43 0107 	orr.w	r1, r3, r7
 800a2f4:	201d      	movs	r0, #29
 800a2f6:	f006 fd65 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800a2fa:	201e      	movs	r0, #30
 800a2fc:	f006 fd6e 	bl	8010ddc <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800a300:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800a304:	012a      	lsls	r2, r5, #4
 800a306:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800a308:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800a30a:	00b3      	lsls	r3, r6, #2
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800a310:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800a314:	4319      	orrs	r1, r3
 800a316:	201e      	movs	r0, #30
 800a318:	f006 fd54 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800a31c:	2026      	movs	r0, #38	; 0x26
 800a31e:	f006 fd5d 	bl	8010ddc <SX1276Read>
 800a322:	b241      	sxtb	r1, r0
 800a324:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800a328:	4b41      	ldr	r3, [pc, #260]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a32a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800a32e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800a332:	b2c9      	uxtb	r1, r1
 800a334:	2026      	movs	r0, #38	; 0x26
 800a336:	f006 fd45 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800a33a:	fa5f f18a 	uxtb.w	r1, sl
 800a33e:	201f      	movs	r0, #31
 800a340:	f006 fd40 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800a344:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800a348:	2020      	movs	r0, #32
 800a34a:	f006 fd3b 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800a34e:	fa5f f188 	uxtb.w	r1, r8
 800a352:	2021      	movs	r0, #33	; 0x21
 800a354:	f006 fd36 	bl	8010dc4 <SX1276Write>
            if( fixLen == 1 )
 800a358:	bb5f      	cbnz	r7, 800a3b2 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a35a:	4b35      	ldr	r3, [pc, #212]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a35c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 800a360:	bb63      	cbnz	r3, 800a3bc <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800a362:	2c09      	cmp	r4, #9
 800a364:	d03a      	beq.n	800a3dc <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 800a366:	2c09      	cmp	r4, #9
 800a368:	d047      	beq.n	800a3fa <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800a36a:	2103      	movs	r1, #3
 800a36c:	2036      	movs	r0, #54	; 0x36
 800a36e:	f006 fd29 	bl	8010dc4 <SX1276Write>
            if( datarate == 6 )
 800a372:	2d06      	cmp	r5, #6
 800a374:	d04a      	beq.n	800a40c <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800a376:	2031      	movs	r0, #49	; 0x31
 800a378:	f006 fd30 	bl	8010ddc <SX1276Read>
 800a37c:	b241      	sxtb	r1, r0
 800a37e:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800a382:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800a386:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 800a38a:	2031      	movs	r0, #49	; 0x31
 800a38c:	f006 fd1a 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800a390:	210a      	movs	r1, #10
 800a392:	2037      	movs	r0, #55	; 0x37
 800a394:	f006 fd16 	bl	8010dc4 <SX1276Write>
}
 800a398:	e705      	b.n	800a1a6 <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a39a:	f1a5 030b 	sub.w	r3, r5, #11
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d897      	bhi.n	800a2d2 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800a3a2:	4b23      	ldr	r3, [pc, #140]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800a3aa:	e798      	b.n	800a2de <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800a3ac:	2d0c      	cmp	r5, #12
 800a3ae:	d192      	bne.n	800a2d6 <SX1276SetRxConfig+0x166>
 800a3b0:	e7f7      	b.n	800a3a2 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	2022      	movs	r0, #34	; 0x22
 800a3b6:	f006 fd05 	bl	8010dc4 <SX1276Write>
 800a3ba:	e7ce      	b.n	800a35a <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800a3bc:	2044      	movs	r0, #68	; 0x44
 800a3be:	f006 fd0d 	bl	8010ddc <SX1276Read>
 800a3c2:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800a3c6:	b2c9      	uxtb	r1, r1
 800a3c8:	2044      	movs	r0, #68	; 0x44
 800a3ca:	f006 fcfb 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800a3ce:	4b18      	ldr	r3, [pc, #96]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a3d0:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 800a3d4:	2024      	movs	r0, #36	; 0x24
 800a3d6:	f006 fcf5 	bl	8010dc4 <SX1276Write>
 800a3da:	e7c2      	b.n	800a362 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800a3dc:	4b14      	ldr	r3, [pc, #80]	; (800a430 <SX1276SetRxConfig+0x2c0>)
 800a3de:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <SX1276SetRxConfig+0x2c8>)
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d9be      	bls.n	800a366 <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800a3e8:	2102      	movs	r1, #2
 800a3ea:	2036      	movs	r0, #54	; 0x36
 800a3ec:	f006 fcea 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800a3f0:	2164      	movs	r1, #100	; 0x64
 800a3f2:	203a      	movs	r0, #58	; 0x3a
 800a3f4:	f006 fce6 	bl	8010dc4 <SX1276Write>
 800a3f8:	e7bb      	b.n	800a372 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800a3fa:	2102      	movs	r1, #2
 800a3fc:	2036      	movs	r0, #54	; 0x36
 800a3fe:	f006 fce1 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800a402:	217f      	movs	r1, #127	; 0x7f
 800a404:	203a      	movs	r0, #58	; 0x3a
 800a406:	f006 fcdd 	bl	8010dc4 <SX1276Write>
 800a40a:	e7b2      	b.n	800a372 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800a40c:	2031      	movs	r0, #49	; 0x31
 800a40e:	f006 fce5 	bl	8010ddc <SX1276Read>
 800a412:	b241      	sxtb	r1, r0
 800a414:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800a418:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800a41c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 800a420:	2031      	movs	r0, #49	; 0x31
 800a422:	f006 fccf 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800a426:	210c      	movs	r1, #12
 800a428:	2037      	movs	r0, #55	; 0x37
 800a42a:	f006 fccb 	bl	8010dc4 <SX1276Write>
 800a42e:	e6ba      	b.n	800a1a6 <SX1276SetRxConfig+0x36>
 800a430:	20001530 	.word	0x20001530
 800a434:	01e84800 	.word	0x01e84800
 800a438:	1f4add40 	.word	0x1f4add40

0800a43c <SX1276SetTxConfig>:
{
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	b083      	sub	sp, #12
 800a442:	4604      	mov	r4, r0
 800a444:	460d      	mov	r5, r1
 800a446:	9201      	str	r2, [sp, #4]
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800a44e:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 800a452:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800a456:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 800a45a:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 800a45e:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 800a462:	f7ff fdfb 	bl	800a05c <SX1276SetModem>
    SX1276SetRfTxPower( power );
 800a466:	4628      	mov	r0, r5
 800a468:	f7fe fe08 	bl	800907c <SX1276SetRfTxPower>
    switch( modem )
 800a46c:	b124      	cbz	r4, 800a478 <SX1276SetTxConfig+0x3c>
 800a46e:	2c01      	cmp	r4, #1
 800a470:	d057      	beq.n	800a522 <SX1276SetTxConfig+0xe6>
}
 800a472:	b003      	add	sp, #12
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 800a478:	4b81      	ldr	r3, [pc, #516]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a47a:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 800a47e:	9801      	ldr	r0, [sp, #4]
 800a480:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800a484:	9a00      	ldr	r2, [sp, #0]
 800a486:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 800a48a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800a490:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 800a494:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800a498:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800a49c:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800a4a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800a4a6:	f7fe ffad 	bl	8009404 <SX1276ConvertFreqInHzToPllStep>
 800a4aa:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800a4ac:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a4b0:	2004      	movs	r0, #4
 800a4b2:	f006 fc87 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800a4b6:	b2e1      	uxtb	r1, r4
 800a4b8:	2005      	movs	r0, #5
 800a4ba:	f006 fc83 	bl	8010dc4 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800a4be:	4c71      	ldr	r4, [pc, #452]	; (800a684 <SX1276SetTxConfig+0x248>)
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800a4c6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800a4ca:	2002      	movs	r0, #2
 800a4cc:	f006 fc7a 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800a4d0:	b2e1      	uxtb	r1, r4
 800a4d2:	2003      	movs	r0, #3
 800a4d4:	f006 fc76 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800a4d8:	0a39      	lsrs	r1, r7, #8
 800a4da:	2025      	movs	r0, #37	; 0x25
 800a4dc:	f006 fc72 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800a4e0:	b2f9      	uxtb	r1, r7
 800a4e2:	2026      	movs	r0, #38	; 0x26
 800a4e4:	f006 fc6e 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800a4e8:	2030      	movs	r0, #48	; 0x30
 800a4ea:	f006 fc77 	bl	8010ddc <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800a4ee:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800a4f2:	f1b8 0f00 	cmp.w	r8, #0
 800a4f6:	d011      	beq.n	800a51c <SX1276SetTxConfig+0xe0>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800a4fc:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 800a500:	b2c9      	uxtb	r1, r1
 800a502:	2030      	movs	r0, #48	; 0x30
 800a504:	f006 fc5e 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800a508:	2031      	movs	r0, #49	; 0x31
 800a50a:	f006 fc67 	bl	8010ddc <SX1276Read>
 800a50e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800a512:	b2c9      	uxtb	r1, r1
 800a514:	2031      	movs	r0, #49	; 0x31
 800a516:	f006 fc55 	bl	8010dc4 <SX1276Write>
        break;
 800a51a:	e7aa      	b.n	800a472 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800a51c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800a520:	e7eb      	b.n	800a4fa <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 800a522:	4b57      	ldr	r3, [pc, #348]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a524:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800a528:	9b00      	ldr	r3, [sp, #0]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d900      	bls.n	800a530 <SX1276SetTxConfig+0xf4>
                while( 1 );
 800a52e:	e7fe      	b.n	800a52e <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 800a530:	9c00      	ldr	r4, [sp, #0]
 800a532:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800a534:	4b52      	ldr	r3, [pc, #328]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a536:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 800a53a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a53c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 800a540:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800a544:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800a548:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800a54c:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800a550:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800a554:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800a558:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800a55c:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800a560:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a562:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 800a566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a568:	2b0c      	cmp	r3, #12
 800a56a:	d804      	bhi.n	800a576 <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d804      	bhi.n	800a57a <SX1276SetTxConfig+0x13e>
                datarate = 6;
 800a570:	2306      	movs	r3, #6
 800a572:	930c      	str	r3, [sp, #48]	; 0x30
 800a574:	e001      	b.n	800a57a <SX1276SetTxConfig+0x13e>
                datarate = 12;
 800a576:	230c      	movs	r3, #12
 800a578:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a57a:	2c07      	cmp	r4, #7
 800a57c:	d051      	beq.n	800a622 <SX1276SetTxConfig+0x1e6>
 800a57e:	2c08      	cmp	r4, #8
 800a580:	d058      	beq.n	800a634 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800a582:	4b3f      	ldr	r3, [pc, #252]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a58a:	f1bb 0f00 	cmp.w	fp, #0
 800a58e:	d155      	bne.n	800a63c <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800a590:	201d      	movs	r0, #29
 800a592:	f006 fc23 	bl	8010ddc <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800a596:	0123      	lsls	r3, r4, #4
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 800a5a2:	ea43 0108 	orr.w	r1, r3, r8
 800a5a6:	201d      	movs	r0, #29
 800a5a8:	f006 fc0c 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800a5ac:	201e      	movs	r0, #30
 800a5ae:	f006 fc15 	bl	8010ddc <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800a5b2:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800a5b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b8:	011b      	lsls	r3, r3, #4
 800a5ba:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800a5bc:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800a5be:	00b3      	lsls	r3, r6, #2
 800a5c0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800a5c2:	4319      	orrs	r1, r3
 800a5c4:	201e      	movs	r0, #30
 800a5c6:	f006 fbfd 	bl	8010dc4 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800a5ca:	2026      	movs	r0, #38	; 0x26
 800a5cc:	f006 fc06 	bl	8010ddc <SX1276Read>
 800a5d0:	b241      	sxtb	r1, r0
 800a5d2:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800a5d6:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a5d8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800a5dc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800a5e0:	b2c9      	uxtb	r1, r1
 800a5e2:	2026      	movs	r0, #38	; 0x26
 800a5e4:	f006 fbee 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800a5e8:	0a39      	lsrs	r1, r7, #8
 800a5ea:	2020      	movs	r0, #32
 800a5ec:	f006 fbea 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800a5f0:	b2f9      	uxtb	r1, r7
 800a5f2:	2021      	movs	r0, #33	; 0x21
 800a5f4:	f006 fbe6 	bl	8010dc4 <SX1276Write>
            if( datarate == 6 )
 800a5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5fa:	2b06      	cmp	r3, #6
 800a5fc:	d02e      	beq.n	800a65c <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800a5fe:	2031      	movs	r0, #49	; 0x31
 800a600:	f006 fbec 	bl	8010ddc <SX1276Read>
 800a604:	b241      	sxtb	r1, r0
 800a606:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800a60a:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800a60e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 800a612:	2031      	movs	r0, #49	; 0x31
 800a614:	f006 fbd6 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800a618:	210a      	movs	r1, #10
 800a61a:	2037      	movs	r0, #55	; 0x37
 800a61c:	f006 fbd2 	bl	8010dc4 <SX1276Write>
}
 800a620:	e727      	b.n	800a472 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a624:	3b0b      	subs	r3, #11
 800a626:	2b01      	cmp	r3, #1
 800a628:	d8a9      	bhi.n	800a57e <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800a62a:	4b15      	ldr	r3, [pc, #84]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800a632:	e7aa      	b.n	800a58a <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800a634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a636:	2b0c      	cmp	r3, #12
 800a638:	d1a3      	bne.n	800a582 <SX1276SetTxConfig+0x146>
 800a63a:	e7f6      	b.n	800a62a <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800a63c:	2044      	movs	r0, #68	; 0x44
 800a63e:	f006 fbcd 	bl	8010ddc <SX1276Read>
 800a642:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800a646:	b2c9      	uxtb	r1, r1
 800a648:	2044      	movs	r0, #68	; 0x44
 800a64a:	f006 fbbb 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800a64e:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <SX1276SetTxConfig+0x244>)
 800a650:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 800a654:	2024      	movs	r0, #36	; 0x24
 800a656:	f006 fbb5 	bl	8010dc4 <SX1276Write>
 800a65a:	e799      	b.n	800a590 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800a65c:	2031      	movs	r0, #49	; 0x31
 800a65e:	f006 fbbd 	bl	8010ddc <SX1276Read>
 800a662:	b241      	sxtb	r1, r0
 800a664:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800a668:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800a66c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 800a670:	2031      	movs	r0, #49	; 0x31
 800a672:	f006 fba7 	bl	8010dc4 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800a676:	210c      	movs	r1, #12
 800a678:	2037      	movs	r0, #55	; 0x37
 800a67a:	f006 fba3 	bl	8010dc4 <SX1276Write>
 800a67e:	e6f8      	b.n	800a472 <SX1276SetTxConfig+0x36>
 800a680:	20001530 	.word	0x20001530
 800a684:	01e84800 	.word	0x01e84800

0800a688 <SX1276SetTxContinuousWave>:
{
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	b08b      	sub	sp, #44	; 0x2c
 800a68c:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800a68e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a692:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 800a696:	f7fe ff1b 	bl	80094d0 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800a69a:	9408      	str	r4, [sp, #32]
 800a69c:	2000      	movs	r0, #0
 800a69e:	9007      	str	r0, [sp, #28]
 800a6a0:	9006      	str	r0, [sp, #24]
 800a6a2:	9005      	str	r0, [sp, #20]
 800a6a4:	9004      	str	r0, [sp, #16]
 800a6a6:	9003      	str	r0, [sp, #12]
 800a6a8:	2305      	movs	r3, #5
 800a6aa:	9302      	str	r3, [sp, #8]
 800a6ac:	9001      	str	r0, [sp, #4]
 800a6ae:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7ff febf 	bl	800a43c <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800a6be:	2031      	movs	r0, #49	; 0x31
 800a6c0:	f006 fb8c 	bl	8010ddc <SX1276Read>
 800a6c4:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800a6c8:	2031      	movs	r0, #49	; 0x31
 800a6ca:	f006 fb7b 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800a6ce:	21f0      	movs	r1, #240	; 0xf0
 800a6d0:	2040      	movs	r0, #64	; 0x40
 800a6d2:	f006 fb77 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800a6d6:	21a0      	movs	r1, #160	; 0xa0
 800a6d8:	2041      	movs	r0, #65	; 0x41
 800a6da:	f006 fb73 	bl	8010dc4 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800a6de:	4d08      	ldr	r5, [pc, #32]	; (800a700 <SX1276SetTxContinuousWave+0x78>)
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f006 fa96 	bl	8010c14 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <SX1276SetTxContinuousWave+0x7c>)
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	f7fe fdcd 	bl	8009290 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800a6f6:	2003      	movs	r0, #3
 800a6f8:	f006 fb7c 	bl	8010df4 <SX1276SetOpMode>
}
 800a6fc:	b00b      	add	sp, #44	; 0x2c
 800a6fe:	bd30      	pop	{r4, r5, pc}
 800a700:	20001674 	.word	0x20001674
 800a704:	20001530 	.word	0x20001530

0800a708 <SX1276SetMaxPayloadLength>:
{
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4604      	mov	r4, r0
 800a70c:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 800a70e:	f7ff fca5 	bl	800a05c <SX1276SetModem>
    switch( modem )
 800a712:	b114      	cbz	r4, 800a71a <SX1276SetMaxPayloadLength+0x12>
 800a714:	2c01      	cmp	r4, #1
 800a716:	d00a      	beq.n	800a72e <SX1276SetMaxPayloadLength+0x26>
}
 800a718:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800a71a:	4b07      	ldr	r3, [pc, #28]	; (800a738 <SX1276SetMaxPayloadLength+0x30>)
 800a71c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1f9      	bne.n	800a718 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800a724:	4629      	mov	r1, r5
 800a726:	2032      	movs	r0, #50	; 0x32
 800a728:	f006 fb4c 	bl	8010dc4 <SX1276Write>
 800a72c:	e7f4      	b.n	800a718 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800a72e:	4629      	mov	r1, r5
 800a730:	2023      	movs	r0, #35	; 0x23
 800a732:	f006 fb47 	bl	8010dc4 <SX1276Write>
}
 800a736:	e7ef      	b.n	800a718 <SX1276SetMaxPayloadLength+0x10>
 800a738:	20001530 	.word	0x20001530

0800a73c <SX1276SetPublicNetwork>:
{
 800a73c:	b510      	push	{r4, lr}
 800a73e:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 800a740:	2001      	movs	r0, #1
 800a742:	f7ff fc8b 	bl	800a05c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <SX1276SetPublicNetwork+0x28>)
 800a748:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 800a74c:	b124      	cbz	r4, 800a758 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800a74e:	2134      	movs	r1, #52	; 0x34
 800a750:	2039      	movs	r0, #57	; 0x39
 800a752:	f006 fb37 	bl	8010dc4 <SX1276Write>
}
 800a756:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800a758:	2112      	movs	r1, #18
 800a75a:	2039      	movs	r0, #57	; 0x39
 800a75c:	f006 fb32 	bl	8010dc4 <SX1276Write>
}
 800a760:	e7f9      	b.n	800a756 <SX1276SetPublicNetwork+0x1a>
 800a762:	bf00      	nop
 800a764:	20001530 	.word	0x20001530

0800a768 <SX1276OnTimeoutIrq>:
{
 800a768:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 800a76a:	4b33      	ldr	r3, [pc, #204]	; (800a838 <SX1276OnTimeoutIrq+0xd0>)
 800a76c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a770:	2b01      	cmp	r3, #1
 800a772:	d002      	beq.n	800a77a <SX1276OnTimeoutIrq+0x12>
 800a774:	2b02      	cmp	r3, #2
 800a776:	d033      	beq.n	800a7e0 <SX1276OnTimeoutIrq+0x78>
}
 800a778:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800a77a:	4b2f      	ldr	r3, [pc, #188]	; (800a838 <SX1276OnTimeoutIrq+0xd0>)
 800a77c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800a780:	b143      	cbz	r3, 800a794 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a782:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <SX1276OnTimeoutIrq+0xd4>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0f6      	beq.n	800a778 <SX1276OnTimeoutIrq+0x10>
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0f3      	beq.n	800a778 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 800a790:	4798      	blx	r3
 800a792:	e7f1      	b.n	800a778 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800a794:	4c28      	ldr	r4, [pc, #160]	; (800a838 <SX1276OnTimeoutIrq+0xd0>)
 800a796:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800a79a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800a79e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 800a7a2:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800a7a6:	210b      	movs	r1, #11
 800a7a8:	203e      	movs	r0, #62	; 0x3e
 800a7aa:	f006 fb0b 	bl	8010dc4 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800a7ae:	2110      	movs	r1, #16
 800a7b0:	203f      	movs	r0, #63	; 0x3f
 800a7b2:	f006 fb07 	bl	8010dc4 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800a7b6:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800a7ba:	b14b      	cbz	r3, 800a7d0 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800a7bc:	200d      	movs	r0, #13
 800a7be:	f006 fb0d 	bl	8010ddc <SX1276Read>
 800a7c2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800a7c6:	b2c9      	uxtb	r1, r1
 800a7c8:	200d      	movs	r0, #13
 800a7ca:	f006 fafb 	bl	8010dc4 <SX1276Write>
 800a7ce:	e7d8      	b.n	800a782 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 800a7d0:	4b19      	ldr	r3, [pc, #100]	; (800a838 <SX1276OnTimeoutIrq+0xd0>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800a7d8:	4819      	ldr	r0, [pc, #100]	; (800a840 <SX1276OnTimeoutIrq+0xd8>)
 800a7da:	f7fe fdd3 	bl	8009384 <TimerStop>
 800a7de:	e7d0      	b.n	800a782 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 800a7e0:	f7fe f9cc 	bl	8008b7c <SX1276Reset>
        RxChainCalibration( );
 800a7e4:	f7ff f960 	bl	8009aa8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f006 fb03 	bl	8010df4 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800a7ee:	2400      	movs	r4, #0
 800a7f0:	e00c      	b.n	800a80c <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800a7f2:	4a14      	ldr	r2, [pc, #80]	; (800a844 <SX1276OnTimeoutIrq+0xdc>)
 800a7f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800a7f8:	18d5      	adds	r5, r2, r3
 800a7fa:	5cd0      	ldrb	r0, [r2, r3]
 800a7fc:	f7ff fc2e 	bl	800a05c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800a800:	78a9      	ldrb	r1, [r5, #2]
 800a802:	7868      	ldrb	r0, [r5, #1]
 800a804:	f006 fade 	bl	8010dc4 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800a808:	3401      	adds	r4, #1
 800a80a:	b2e4      	uxtb	r4, r4
 800a80c:	2c0f      	cmp	r4, #15
 800a80e:	d9f0      	bls.n	800a7f2 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 800a810:	2000      	movs	r0, #0
 800a812:	f7ff fc23 	bl	800a05c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800a816:	4c08      	ldr	r4, [pc, #32]	; (800a838 <SX1276OnTimeoutIrq+0xd0>)
 800a818:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 800a81c:	f7ff ff8e 	bl	800a73c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800a820:	2300      	movs	r3, #0
 800a822:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <SX1276OnTimeoutIrq+0xd4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0a4      	beq.n	800a778 <SX1276OnTimeoutIrq+0x10>
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0a1      	beq.n	800a778 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 800a834:	4798      	blx	r3
}
 800a836:	e79f      	b.n	800a778 <SX1276OnTimeoutIrq+0x10>
 800a838:	20001530 	.word	0x20001530
 800a83c:	200013fc 	.word	0x200013fc
 800a840:	20001400 	.word	0x20001400
 800a844:	08013bcc 	.word	0x08013bcc

0800a848 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 800a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84c:	b090      	sub	sp, #64	; 0x40
 800a84e:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 800a850:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a852:	6843      	ldr	r3, [r0, #4]
 800a854:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800a856:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 800a858:	2a01      	cmp	r2, #1
 800a85a:	d015      	beq.n	800a888 <uart_stm32_configure+0x40>
 800a85c:	2a02      	cmp	r2, #2
 800a85e:	d116      	bne.n	800a88e <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 800a860:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800a864:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 800a866:	2b01      	cmp	r3, #1
 800a868:	d017      	beq.n	800a89a <uart_stm32_configure+0x52>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d018      	beq.n	800a8a0 <uart_stm32_configure+0x58>
 800a86e:	b18b      	cbz	r3, 800a894 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 800a870:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800a874:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 800a876:	2902      	cmp	r1, #2
 800a878:	d015      	beq.n	800a8a6 <uart_stm32_configure+0x5e>
 800a87a:	2904      	cmp	r1, #4
 800a87c:	d019      	beq.n	800a8b2 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 800a87e:	2a00      	cmp	r2, #0
 800a880:	f040 8097 	bne.w	800a9b2 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 800a884:	2700      	movs	r7, #0
 800a886:	e016      	b.n	800a8b6 <uart_stm32_configure+0x6e>
	switch (parity) {
 800a888:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 800a88c:	e7ea      	b.n	800a864 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 800a88e:	f04f 0e00 	mov.w	lr, #0
 800a892:	e7e7      	b.n	800a864 <uart_stm32_configure+0x1c>
	switch (sb) {
 800a894:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800a898:	e7ec      	b.n	800a874 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 800a89a:	f04f 0c00 	mov.w	ip, #0
 800a89e:	e7e9      	b.n	800a874 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 800a8a0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800a8a4:	e7e6      	b.n	800a874 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800a8a6:	b10a      	cbz	r2, 800a8ac <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 800a8a8:	2700      	movs	r7, #0
 800a8aa:	e004      	b.n	800a8b6 <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 800a8ac:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800a8b0:	e001      	b.n	800a8b6 <uart_stm32_configure+0x6e>
	switch (db) {
 800a8b2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800a8b6:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800a8ba:	f1ba 0f01 	cmp.w	sl, #1
 800a8be:	d07b      	beq.n	800a9b8 <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 800a8c0:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800a8c4:	f1a2 0903 	sub.w	r9, r2, #3
 800a8c8:	fa5f f989 	uxtb.w	r9, r9
 800a8cc:	f1b9 0f01 	cmp.w	r9, #1
 800a8d0:	f240 80c1 	bls.w	800aa56 <uart_stm32_configure+0x20e>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800a8d4:	b112      	cbz	r2, 800a8dc <uart_stm32_configure+0x94>
 800a8d6:	2904      	cmp	r1, #4
 800a8d8:	f000 80c0 	beq.w	800aa5c <uart_stm32_configure+0x214>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 80c0 	beq.w	800aa62 <uart_stm32_configure+0x21a>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	f000 80c0 	beq.w	800aa68 <uart_stm32_configure+0x220>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800a8e8:	2901      	cmp	r1, #1
 800a8ea:	f240 80c0 	bls.w	800aa6e <uart_stm32_configure+0x226>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 800a8ee:	2904      	cmp	r1, #4
 800a8f0:	f000 80c0 	beq.w	800aa74 <uart_stm32_configure+0x22c>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800a8f4:	f1ba 0f00 	cmp.w	sl, #0
 800a8f8:	d017      	beq.n	800a92a <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800a8fa:	4b63      	ldr	r3, [pc, #396]	; (800aa88 <uart_stm32_configure+0x240>)
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	d010      	beq.n	800a922 <uart_stm32_configure+0xda>
 800a900:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a904:	429d      	cmp	r5, r3
 800a906:	d00c      	beq.n	800a922 <uart_stm32_configure+0xda>
 800a908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a90c:	429d      	cmp	r5, r3
 800a90e:	d008      	beq.n	800a922 <uart_stm32_configure+0xda>
 800a910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a914:	429d      	cmp	r5, r3
 800a916:	d004      	beq.n	800a922 <uart_stm32_configure+0xda>
 800a918:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 800a91c:	429d      	cmp	r5, r3
 800a91e:	f040 80ac 	bne.w	800aa7a <uart_stm32_configure+0x232>
 800a922:	f1ba 0f01 	cmp.w	sl, #1
 800a926:	f040 80ab 	bne.w	800aa80 <uart_stm32_configure+0x238>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800a92a:	682b      	ldr	r3, [r5, #0]
 800a92c:	f023 0301 	bic.w	r3, r3, #1
 800a930:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a932:	6843      	ldr	r3, [r0, #4]
 800a934:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 800a93c:	459e      	cmp	lr, r3
 800a93e:	d005      	beq.n	800a94c <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800a940:	6813      	ldr	r3, [r2, #0]
 800a942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a946:	ea4e 0303 	orr.w	r3, lr, r3
 800a94a:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a94c:	6843      	ldr	r3, [r0, #4]
 800a94e:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800a950:	6853      	ldr	r3, [r2, #4]
 800a952:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800a956:	459c      	cmp	ip, r3
 800a958:	d005      	beq.n	800a966 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a95a:	6853      	ldr	r3, [r2, #4]
 800a95c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a960:	ea4c 0303 	orr.w	r3, ip, r3
 800a964:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a966:	6843      	ldr	r3, [r0, #4]
 800a968:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800a96a:	6813      	ldr	r3, [r2, #0]
 800a96c:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 800a970:	429f      	cmp	r7, r3
 800a972:	d004      	beq.n	800a97e <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800a97a:	431f      	orrs	r7, r3
 800a97c:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a97e:	6843      	ldr	r3, [r0, #4]
 800a980:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800a982:	6893      	ldr	r3, [r2, #8]
 800a984:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800a988:	4598      	cmp	r8, r3
 800a98a:	d005      	beq.n	800a998 <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a98c:	6893      	ldr	r3, [r2, #8]
 800a98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a992:	ea48 0303 	orr.w	r3, r8, r3
 800a996:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800a998:	f8d4 8000 	ldr.w	r8, [r4]
 800a99c:	6833      	ldr	r3, [r6, #0]
 800a99e:	4598      	cmp	r8, r3
 800a9a0:	d10d      	bne.n	800a9be <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a9a2:	682b      	ldr	r3, [r5, #0]
 800a9a4:	f043 0301 	orr.w	r3, r3, #1
 800a9a8:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800a9aa:	2000      	movs	r0, #0
};
 800a9ac:	b010      	add	sp, #64	; 0x40
 800a9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 800a9b2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800a9b6:	e77e      	b.n	800a8b6 <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 800a9b8:	f44f 7840 	mov.w	r8, #768	; 0x300
 800a9bc:	e782      	b.n	800a8c4 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 800a9be:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a9c0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800a9c4:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 800a9c8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	f006 fc71 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800a9d2:	b1b8      	cbz	r0, 800aa04 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 800a9d4:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	b1b3      	cbz	r3, 800aa0a <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 800a9dc:	466a      	mov	r2, sp
 800a9de:	4649      	mov	r1, r9
 800a9e0:	4650      	mov	r0, sl
 800a9e2:	4798      	blx	r3
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	db13      	blt.n	800aa10 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9ee:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800a9f0:	9b00      	ldr	r3, [sp, #0]
 800a9f2:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800a9f6:	fbb3 f3f8 	udiv	r3, r3, r8
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	6033      	str	r3, [r6, #0]
 800aa02:	e7ce      	b.n	800a9a2 <uart_stm32_configure+0x15a>
		return -ENODEV;
 800aa04:	f06f 0012 	mvn.w	r0, #18
 800aa08:	e7ec      	b.n	800a9e4 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 800aa0a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800aa0e:	e7e9      	b.n	800a9e4 <uart_stm32_configure+0x19c>
		LOG_ERR("Failed call clock_control_get_rate");
 800aa10:	2201      	movs	r2, #1
 800aa12:	f8ad 2008 	strh.w	r2, [sp, #8]
 800aa16:	4b1d      	ldr	r3, [pc, #116]	; (800aa8c <uart_stm32_configure+0x244>)
 800aa18:	930e      	str	r3, [sp, #56]	; 0x38
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	2102      	movs	r1, #2
 800aa20:	f88d 1004 	strb.w	r1, [sp, #4]
 800aa24:	9901      	ldr	r1, [sp, #4]
 800aa26:	910d      	str	r1, [sp, #52]	; 0x34
 800aa28:	4619      	mov	r1, r3
 800aa2a:	f363 0100 	bfi	r1, r3, #0, #1
 800aa2e:	f363 0141 	bfi	r1, r3, #1, #1
 800aa32:	f363 0182 	bfi	r1, r3, #2, #1
 800aa36:	f363 01c5 	bfi	r1, r3, #3, #3
 800aa3a:	f362 1188 	bfi	r1, r2, #6, #3
 800aa3e:	2208      	movs	r2, #8
 800aa40:	f362 2152 	bfi	r1, r2, #9, #10
 800aa44:	f363 41de 	bfi	r1, r3, #19, #12
 800aa48:	f363 71df 	bfi	r1, r3, #31, #1
 800aa4c:	aa0d      	add	r2, sp, #52	; 0x34
 800aa4e:	4810      	ldr	r0, [pc, #64]	; (800aa90 <uart_stm32_configure+0x248>)
 800aa50:	f004 fff4 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 800aa54:	e7d3      	b.n	800a9fe <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 800aa56:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa5a:	e7a7      	b.n	800a9ac <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800aa5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa60:	e7a4      	b.n	800a9ac <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800aa62:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa66:	e7a1      	b.n	800a9ac <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800aa68:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa6c:	e79e      	b.n	800a9ac <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800aa6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa72:	e79b      	b.n	800a9ac <uart_stm32_configure+0x164>
 800aa74:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa78:	e798      	b.n	800a9ac <uart_stm32_configure+0x164>
			return -ENOTSUP;
 800aa7a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa7e:	e795      	b.n	800a9ac <uart_stm32_configure+0x164>
 800aa80:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800aa84:	e792      	b.n	800a9ac <uart_stm32_configure+0x164>
 800aa86:	bf00      	nop
 800aa88:	40013800 	.word	0x40013800
 800aa8c:	08013674 	.word	0x08013674
 800aa90:	08012768 	.word	0x08012768

0800aa94 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800aa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	b096      	sub	sp, #88	; 0x58
 800aa9a:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 800aa9c:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 800aa9e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800aaa2:	463e      	mov	r6, r7
 800aaa4:	f856 4b08 	ldr.w	r4, [r6], #8
	data->clock = clk;
 800aaa8:	4870      	ldr	r0, [pc, #448]	; (800ac6c <uart_stm32_init+0x1d8>)
 800aaaa:	f8c8 0004 	str.w	r0, [r8, #4]
 800aaae:	f006 fc01 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800aab2:	b358      	cbz	r0, 800ab0c <uart_stm32_init+0x78>
	const struct clock_control_driver_api *api =
 800aab4:	486d      	ldr	r0, [pc, #436]	; (800ac6c <uart_stm32_init+0x1d8>)
 800aab6:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4631      	mov	r1, r6
 800aabc:	4798      	blx	r3
 800aabe:	4606      	mov	r6, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	f040 80ce 	bne.w	800ac62 <uart_stm32_init+0x1ce>
	ret = pinctrl_lookup_state(config, id, &state);
 800aac6:	aa02      	add	r2, sp, #8
 800aac8:	2100      	movs	r1, #0
 800aaca:	69f8      	ldr	r0, [r7, #28]
 800aacc:	f006 faf7 	bl	80110be <pinctrl_lookup_state>
	if (ret < 0) {
 800aad0:	1e03      	subs	r3, r0, #0
 800aad2:	db06      	blt.n	800aae2 <uart_stm32_init+0x4e>
	return pinctrl_apply_state_direct(config, state);
 800aad4:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800aad6:	2200      	movs	r2, #0
 800aad8:	7919      	ldrb	r1, [r3, #4]
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	f006 fb09 	bl	80110f2 <pinctrl_configure_pins>
 800aae0:	4603      	mov	r3, r0
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f2c0 80c0 	blt.w	800ac68 <uart_stm32_init+0x1d4>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	f023 0301 	bic.w	r3, r3, #1
 800aaee:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	f043 030c 	orr.w	r3, r3, #12
 800aaf6:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d033      	beq.n	800ab66 <uart_stm32_init+0xd2>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	f000 8081 	beq.w	800ac06 <uart_stm32_init+0x172>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 800ab04:	b92b      	cbnz	r3, 800ab12 <uart_stm32_init+0x7e>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800ab06:	2100      	movs	r1, #0
		ll_parity = LL_USART_PARITY_NONE;
 800ab08:	460b      	mov	r3, r1
 800ab0a:	e030      	b.n	800ab6e <uart_stm32_init+0xda>
		return -ENODEV;
 800ab0c:	f06f 0612 	mvn.w	r6, #18
 800ab10:	e7d6      	b.n	800aac0 <uart_stm32_init+0x2c>
			LOG_WRN("Invalid parity setting '%d'."
 800ab12:	2201      	movs	r2, #1
 800ab14:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ab18:	4a55      	ldr	r2, [pc, #340]	; (800ac70 <uart_stm32_init+0x1dc>)
 800ab1a:	920e      	str	r2, [sp, #56]	; 0x38
 800ab1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab1e:	f04f 0900 	mov.w	r9, #0
 800ab22:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab26:	2303      	movs	r3, #3
 800ab28:	f88d 3004 	strb.w	r3, [sp, #4]
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ab30:	4649      	mov	r1, r9
 800ab32:	f369 0100 	bfi	r1, r9, #0, #1
 800ab36:	f369 0141 	bfi	r1, r9, #1, #1
 800ab3a:	f369 0182 	bfi	r1, r9, #2, #1
 800ab3e:	f369 01c5 	bfi	r1, r9, #3, #3
 800ab42:	2302      	movs	r3, #2
 800ab44:	f363 1188 	bfi	r1, r3, #6, #3
 800ab48:	230c      	movs	r3, #12
 800ab4a:	f363 2152 	bfi	r1, r3, #9, #10
 800ab4e:	f369 41de 	bfi	r1, r9, #19, #12
 800ab52:	f369 71df 	bfi	r1, r9, #31, #1
 800ab56:	464b      	mov	r3, r9
 800ab58:	aa0d      	add	r2, sp, #52	; 0x34
 800ab5a:	4846      	ldr	r0, [pc, #280]	; (800ac74 <uart_stm32_init+0x1e0>)
 800ab5c:	f004 ff6e 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800ab60:	4649      	mov	r1, r9
		ll_parity = LL_USART_PARITY_NONE;
 800ab62:	464b      	mov	r3, r9
 800ab64:	e003      	b.n	800ab6e <uart_stm32_init+0xda>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800ab66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800ab6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ab74:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800ab78:	4319      	orrs	r1, r3
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800ab7e:	6863      	ldr	r3, [r4, #4]
 800ab80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ab84:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800ab86:	7c3b      	ldrb	r3, [r7, #16]
 800ab88:	b12b      	cbz	r3, 800ab96 <uart_stm32_init+0x102>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ab8a:	686b      	ldr	r3, [r5, #4]
 800ab8c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800ab8e:	6893      	ldr	r3, [r2, #8]
 800ab90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ab94:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800ab96:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = dev->data;
 800ab9a:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ab9c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800aba0:	f859 5b08 	ldr.w	r5, [r9], #8
	if (clock_control_get_rate(data->clock,
 800aba4:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800aba8:	4650      	mov	r0, sl
 800abaa:	f006 fb83 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800abae:	b378      	cbz	r0, 800ac10 <uart_stm32_init+0x17c>
	const struct clock_control_driver_api *api =
 800abb0:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	b373      	cbz	r3, 800ac16 <uart_stm32_init+0x182>
	return api->get_rate(dev, sys, rate);
 800abb8:	466a      	mov	r2, sp
 800abba:	4649      	mov	r1, r9
 800abbc:	4650      	mov	r0, sl
 800abbe:	4798      	blx	r3
 800abc0:	2800      	cmp	r0, #0
 800abc2:	db2b      	blt.n	800ac1c <uart_stm32_init+0x188>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abca:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800abd2:	fbb3 f3f8 	udiv	r3, r3, r8
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	60eb      	str	r3, [r5, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 800abda:	7e3b      	ldrb	r3, [r7, #24]
 800abdc:	b11b      	cbz	r3, 800abe6 <uart_stm32_init+0x152>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	f043 0308 	orr.w	r3, r3, #8
 800abe4:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	f043 0301 	orr.w	r3, r3, #1
 800abec:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800abee:	69e3      	ldr	r3, [r4, #28]
 800abf0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800abf4:	d0fb      	beq.n	800abee <uart_stm32_init+0x15a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800abf6:	69e3      	ldr	r3, [r4, #28]
 800abf8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800abfc:	d0fb      	beq.n	800abf6 <uart_stm32_init+0x162>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 800abfe:	4630      	mov	r0, r6
 800ac00:	b016      	add	sp, #88	; 0x58
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800ac06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 800ac0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ac0e:	e7ae      	b.n	800ab6e <uart_stm32_init+0xda>
		return -ENODEV;
 800ac10:	f06f 0012 	mvn.w	r0, #18
 800ac14:	e7d4      	b.n	800abc0 <uart_stm32_init+0x12c>
		return -ENOSYS;
 800ac16:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800ac1a:	e7d1      	b.n	800abc0 <uart_stm32_init+0x12c>
		LOG_ERR("Failed call clock_control_get_rate");
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <uart_stm32_init+0x1e4>)
 800ac24:	9314      	str	r3, [sp, #80]	; 0x50
 800ac26:	2300      	movs	r3, #0
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	2102      	movs	r1, #2
 800ac2c:	f88d 1004 	strb.w	r1, [sp, #4]
 800ac30:	9901      	ldr	r1, [sp, #4]
 800ac32:	9113      	str	r1, [sp, #76]	; 0x4c
 800ac34:	4619      	mov	r1, r3
 800ac36:	f363 0100 	bfi	r1, r3, #0, #1
 800ac3a:	f363 0141 	bfi	r1, r3, #1, #1
 800ac3e:	f363 0182 	bfi	r1, r3, #2, #1
 800ac42:	f363 01c5 	bfi	r1, r3, #3, #3
 800ac46:	f362 1188 	bfi	r1, r2, #6, #3
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	f362 2152 	bfi	r1, r2, #9, #10
 800ac50:	f363 41de 	bfi	r1, r3, #19, #12
 800ac54:	f363 71df 	bfi	r1, r3, #31, #1
 800ac58:	aa13      	add	r2, sp, #76	; 0x4c
 800ac5a:	4806      	ldr	r0, [pc, #24]	; (800ac74 <uart_stm32_init+0x1e0>)
 800ac5c:	f004 feee 	bl	800fa3c <z_impl_z_log_msg2_static_create>
		return;
 800ac60:	e7bb      	b.n	800abda <uart_stm32_init+0x146>
		return -EIO;
 800ac62:	f06f 0604 	mvn.w	r6, #4
 800ac66:	e7ca      	b.n	800abfe <uart_stm32_init+0x16a>
		return err;
 800ac68:	461e      	mov	r6, r3
 800ac6a:	e7c8      	b.n	800abfe <uart_stm32_init+0x16a>
 800ac6c:	080122d0 	.word	0x080122d0
 800ac70:	08013bfc 	.word	0x08013bfc
 800ac74:	08012768 	.word	0x08012768
 800ac78:	08013674 	.word	0x08013674

0800ac7c <random_byte_get>:
	return 0;
}
#endif /* !STM32_CONDRST_SUPPORT */

static int random_byte_get(void)
{
 800ac7c:	b538      	push	{r3, r4, r5, lr}
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 800ac7e:	4b17      	ldr	r3, [pc, #92]	; (800acdc <random_byte_get+0x60>)
 800ac80:	681c      	ldr	r4, [r3, #0]
	__asm__ volatile(
 800ac82:	f04f 0310 	mov.w	r3, #16
 800ac86:	f3ef 8511 	mrs	r5, BASEPRI
 800ac8a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ac8e:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ac98:	d004      	beq.n	800aca4 <random_byte_get+0x28>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f006 f9e1 	bl	8011062 <recover_seed_error>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	db0b      	blt.n	800acbc <random_byte_get+0x40>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800aca4:	6863      	ldr	r3, [r4, #4]
 800aca6:	f013 0f01 	tst.w	r3, #1
 800acaa:	d00a      	beq.n	800acc2 <random_byte_get+0x46>
		retval = -EIO;
		goto out;
	}

	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
		if (entropy_stm32_got_error(rng)) {
 800acac:	4620      	mov	r0, r4
 800acae:	f006 f9ca 	bl	8011046 <entropy_stm32_got_error>
 800acb2:	b968      	cbnz	r0, 800acd0 <random_byte_get+0x54>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800acb4:	68a0      	ldr	r0, [r4, #8]
			retval = -EIO;
			goto out;
		}

		retval = LL_RNG_ReadRandData32(rng);
		if (retval == 0) {
 800acb6:	b170      	cbz	r0, 800acd6 <random_byte_get+0x5a>
			 */
			retval = -EAGAIN;
			goto out;
		}

		retval &= 0xFF;
 800acb8:	b2c0      	uxtb	r0, r0
 800acba:	e004      	b.n	800acc6 <random_byte_get+0x4a>
		retval = -EIO;
 800acbc:	f06f 0004 	mvn.w	r0, #4
 800acc0:	e001      	b.n	800acc6 <random_byte_get+0x4a>
	int retval = -EAGAIN;
 800acc2:	f06f 000a 	mvn.w	r0, #10
	__asm__ volatile(
 800acc6:	f385 8811 	msr	BASEPRI, r5
 800acca:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 800acce:	bd38      	pop	{r3, r4, r5, pc}
			retval = -EIO;
 800acd0:	f06f 0004 	mvn.w	r0, #4
 800acd4:	e7f7      	b.n	800acc6 <random_byte_get+0x4a>
			retval = -EAGAIN;
 800acd6:	f06f 000a 	mvn.w	r0, #10
 800acda:	e7f4      	b.n	800acc6 <random_byte_get+0x4a>
 800acdc:	2000021c 	.word	0x2000021c

0800ace0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 800ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace2:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
 800ace4:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 800ace6:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
 800ace8:	f04f 0310 	mov.w	r3, #16
 800acec:	f3ef 8c11 	mrs	ip, BASEPRI
 800acf0:	f383 8812 	msr	BASEPRI_MAX, r3
 800acf4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 800acf8:	7806      	ldrb	r6, [r0, #0]
 800acfa:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 800acfc:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 800acfe:	1bad      	subs	r5, r5, r6
 800ad00:	4025      	ands	r5, r4
	if (available < len) {
 800ad02:	42aa      	cmp	r2, r5
 800ad04:	d900      	bls.n	800ad08 <rng_pool_get+0x28>
		len = available;
 800ad06:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 800ad08:	18b0      	adds	r0, r6, r2
 800ad0a:	4020      	ands	r0, r4
 800ad0c:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
 800ad10:	f38c 8811 	msr	BASEPRI, ip
 800ad14:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
 800ad18:	4608      	mov	r0, r1
}
 800ad1a:	e007      	b.n	800ad2c <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
 800ad1c:	eb0e 0203 	add.w	r2, lr, r3
 800ad20:	7952      	ldrb	r2, [r2, #5]
 800ad22:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
 800ad26:	3301      	adds	r3, #1
 800ad28:	4023      	ands	r3, r4
	while (likely(len--)) {
 800ad2a:	4662      	mov	r2, ip
 800ad2c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ad30:	fa1f fc8c 	uxth.w	ip, ip
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	d1f1      	bne.n	800ad1c <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 800ad38:	42be      	cmp	r6, r7
 800ad3a:	d10f      	bne.n	800ad5c <rng_pool_get+0x7c>
	__asm__ volatile(
 800ad3c:	f04f 0210 	mov.w	r2, #16
 800ad40:	f3ef 8311 	mrs	r3, BASEPRI
 800ad44:	f382 8812 	msr	BASEPRI_MAX, r2
 800ad48:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 800ad4c:	f89e 2000 	ldrb.w	r2, [lr]
 800ad50:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 800ad5c:	1a40      	subs	r0, r0, r1
 800ad5e:	b280      	uxth	r0, r0
	available = available - len;
 800ad60:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
 800ad62:	f89e 3004 	ldrb.w	r3, [lr, #4]
 800ad66:	42ab      	cmp	r3, r5
 800ad68:	d305      	bcc.n	800ad76 <rng_pool_get+0x96>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 800ad6a:	4b03      	ldr	r3, [pc, #12]	; (800ad78 <rng_pool_get+0x98>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800ad6e:	6813      	ldr	r3, [r2, #0]
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 800ad76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad78:	2000021c 	.word	0x2000021c

0800ad7c <entropy_stm32_rng_get_entropy_isr>:

static int entropy_stm32_rng_get_entropy_isr(const struct device *dev,
						uint8_t *buf,
						uint16_t len,
					uint32_t flags)
{
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	460d      	mov	r5, r1
 800ad80:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 800ad82:	f013 0f01 	tst.w	r3, #1
 800ad86:	d103      	bne.n	800ad90 <entropy_stm32_rng_get_entropy_isr+0x14>
		return rng_pool_get(
 800ad88:	481f      	ldr	r0, [pc, #124]	; (800ae08 <entropy_stm32_rng_get_entropy_isr+0x8c>)
 800ad8a:	f7ff ffa9 	bl	800ace0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
 800ad90:	b90a      	cbnz	r2, 800ad96 <entropy_stm32_rng_get_entropy_isr+0x1a>
	return cnt;
 800ad92:	4620      	mov	r0, r4
 800ad94:	e7fb      	b.n	800ad8e <entropy_stm32_rng_get_entropy_isr+0x12>
	__asm__ volatile(
 800ad96:	f04f 0310 	mov.w	r3, #16
 800ad9a:	f3ef 8611 	mrs	r6, BASEPRI
 800ad9e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ada2:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 800ada6:	2050      	movs	r0, #80	; 0x50
 800ada8:	f7f9 feee 	bl	8004b88 <arch_irq_is_enabled>
 800adac:	4607      	mov	r7, r0
		irq_disable(IRQN);
 800adae:	2050      	movs	r0, #80	; 0x50
 800adb0:	f7f9 fed6 	bl	8004b60 <arch_irq_disable>
	__asm__ volatile(
 800adb4:	f386 8811 	msr	BASEPRI, r6
 800adb8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800adbc:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <entropy_stm32_rng_get_entropy_isr+0x90>)
 800adbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800adc2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 800adc6:	4626      	mov	r6, r4
 800adc8:	e004      	b.n	800add4 <entropy_stm32_rng_get_entropy_isr+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 800adca:	f3bf 8f4f 	dsb	sy
				__WFE();
 800adce:	bf20      	wfe
				__SEV();
 800add0:	bf40      	sev
				__WFE();
 800add2:	bf20      	wfe
			while (LL_RNG_IsActiveFlag_DRDY(
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <entropy_stm32_rng_get_entropy_isr+0x94>)
 800add6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	f013 0f01 	tst.w	r3, #1
 800adde:	d0f4      	beq.n	800adca <entropy_stm32_rng_get_entropy_isr+0x4e>
			byte = random_byte_get();
 800ade0:	f7ff ff4c 	bl	800ac7c <random_byte_get>
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <entropy_stm32_rng_get_entropy_isr+0x90>)
 800ade6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800adea:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			if (byte < 0) {
 800adee:	2800      	cmp	r0, #0
 800adf0:	db02      	blt.n	800adf8 <entropy_stm32_rng_get_entropy_isr+0x7c>
			buf[--len] = byte;
 800adf2:	3e01      	subs	r6, #1
 800adf4:	b2b6      	uxth	r6, r6
 800adf6:	55a8      	strb	r0, [r5, r6]
		} while (len);
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	d1eb      	bne.n	800add4 <entropy_stm32_rng_get_entropy_isr+0x58>
		if (irq_enabled) {
 800adfc:	2f00      	cmp	r7, #0
 800adfe:	d0c8      	beq.n	800ad92 <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 800ae00:	2050      	movs	r0, #80	; 0x50
 800ae02:	f7f9 fe9f 	bl	8004b44 <arch_irq_enable>
 800ae06:	e7c4      	b.n	800ad92 <entropy_stm32_rng_get_entropy_isr+0x16>
 800ae08:	20000254 	.word	0x20000254
 800ae0c:	e000e100 	.word	0xe000e100
 800ae10:	2000021c 	.word	0x2000021c

0800ae14 <stm32_rng_isr>:
{
 800ae14:	b510      	push	{r4, lr}
	byte = random_byte_get();
 800ae16:	f7ff ff31 	bl	800ac7c <random_byte_get>
	if (byte < 0) {
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	db06      	blt.n	800ae2c <stm32_rng_isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 800ae1e:	b2c4      	uxtb	r4, r0
 800ae20:	4621      	mov	r1, r4
 800ae22:	480b      	ldr	r0, [pc, #44]	; (800ae50 <stm32_rng_isr+0x3c>)
 800ae24:	f006 f92f 	bl	8011086 <rng_pool_put>
	if (ret < 0) {
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	db00      	blt.n	800ae2e <stm32_rng_isr+0x1a>
}
 800ae2c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put(
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4808      	ldr	r0, [pc, #32]	; (800ae54 <stm32_rng_isr+0x40>)
 800ae32:	f006 f928 	bl	8011086 <rng_pool_put>
		if (ret < 0) {
 800ae36:	2800      	cmp	r0, #0
 800ae38:	db03      	blt.n	800ae42 <stm32_rng_isr+0x2e>
	z_impl_k_sem_give(sem);
 800ae3a:	4807      	ldr	r0, [pc, #28]	; (800ae58 <stm32_rng_isr+0x44>)
 800ae3c:	f001 fae2 	bl	800c404 <z_impl_k_sem_give>
}
 800ae40:	e7f4      	b.n	800ae2c <stm32_rng_isr+0x18>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <stm32_rng_isr+0x48>)
 800ae44:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	f023 0308 	bic.w	r3, r3, #8
 800ae4c:	6013      	str	r3, [r2, #0]
}
 800ae4e:	e7f4      	b.n	800ae3a <stm32_rng_isr+0x26>
 800ae50:	20000254 	.word	0x20000254
 800ae54:	20000269 	.word	0x20000269
 800ae58:	2000023c 	.word	0x2000023c
 800ae5c:	2000021c 	.word	0x2000021c

0800ae60 <entropy_stm32_rng_get_entropy>:
{
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	460f      	mov	r7, r1
 800ae64:	4614      	mov	r4, r2
	while (len) {
 800ae66:	e007      	b.n	800ae78 <entropy_stm32_rng_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
 800ae68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae70:	f106 0018 	add.w	r0, r6, #24
 800ae74:	f001 faee 	bl	800c454 <z_impl_k_sem_take>
 800ae78:	b1cc      	cbz	r4, 800aeae <entropy_stm32_rng_get_entropy+0x4e>
 800ae7a:	4d0e      	ldr	r5, [pc, #56]	; (800aeb4 <entropy_stm32_rng_get_entropy+0x54>)
 800ae7c:	f105 0608 	add.w	r6, r5, #8
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f001 fae3 	bl	800c454 <z_impl_k_sem_take>
		bytes = rng_pool_get(
 800ae8e:	4622      	mov	r2, r4
 800ae90:	4639      	mov	r1, r7
 800ae92:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 800ae96:	f7ff ff23 	bl	800ace0 <rng_pool_get>
 800ae9a:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f001 fab1 	bl	800c404 <z_impl_k_sem_give>
		if (bytes == 0U) {
 800aea2:	2d00      	cmp	r5, #0
 800aea4:	d0e0      	beq.n	800ae68 <entropy_stm32_rng_get_entropy+0x8>
		len -= bytes;
 800aea6:	1b64      	subs	r4, r4, r5
 800aea8:	b2a4      	uxth	r4, r4
		buf += bytes;
 800aeaa:	442f      	add	r7, r5
 800aeac:	e7e4      	b.n	800ae78 <entropy_stm32_rng_get_entropy+0x18>
}
 800aeae:	2000      	movs	r0, #0
 800aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	2000021c 	.word	0x2000021c

0800aeb8 <entropy_stm32_rng_init>:

static int entropy_stm32_rng_init(const struct device *dev)
{
 800aeb8:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 800aeba:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 800aebc:	6845      	ldr	r5, [r0, #4]
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 800aebe:	4b2d      	ldr	r3, [pc, #180]	; (800af74 <entropy_stm32_rng_init+0xbc>)
 800aec0:	68da      	ldr	r2, [r3, #12]
 800aec2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800aec6:	f042 0201 	orr.w	r2, r2, #1
 800aeca:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 800aecc:	691a      	ldr	r2, [r3, #16]
 800aece:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800aed2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800aed6:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800aeda:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800aee2:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 800aee4:	691a      	ldr	r2, [r3, #16]
 800aee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aeea:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800aeec:	4b21      	ldr	r3, [pc, #132]	; (800af74 <entropy_stm32_rng_init+0xbc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800aef4:	d0fa      	beq.n	800aeec <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 800aef6:	4a1f      	ldr	r2, [pc, #124]	; (800af74 <entropy_stm32_rng_init+0xbc>)
 800aef8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800aefc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800af00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 800af08:	481b      	ldr	r0, [pc, #108]	; (800af78 <entropy_stm32_rng_init+0xc0>)
 800af0a:	6060      	str	r0, [r4, #4]
 800af0c:	f006 f9d2 	bl	80112b4 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800af10:	b120      	cbz	r0, 800af1c <entropy_stm32_rng_init+0x64>
	const struct clock_control_driver_api *api =
 800af12:	4819      	ldr	r0, [pc, #100]	; (800af78 <entropy_stm32_rng_init+0xc0>)
 800af14:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4629      	mov	r1, r5
 800af1a:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 800af1c:	6822      	ldr	r2, [r4, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800af1e:	6813      	ldr	r3, [r2, #0]
 800af20:	f043 0308 	orr.w	r3, r3, #8
 800af24:	6013      	str	r3, [r2, #0]

	LL_RNG_Enable(dev_data->rng);
 800af26:	4620      	mov	r0, r4
 800af28:	f850 2b08 	ldr.w	r2, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	f043 0304 	orr.w	r3, r3, #4
 800af32:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 800af34:	2201      	movs	r2, #1
 800af36:	4611      	mov	r1, r2
 800af38:	f006 fa6a 	bl	8011410 <z_impl_k_sem_init>

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);
 800af3c:	f104 0020 	add.w	r0, r4, #32
 800af40:	2201      	movs	r2, #1
 800af42:	2100      	movs	r1, #0
 800af44:	f006 fa64 	bl	8011410 <z_impl_k_sem_init>

	rng_pool_init((struct rng_pool *)(dev_data->thr),
 800af48:	2204      	movs	r2, #4
 800af4a:	2108      	movs	r1, #8
 800af4c:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 800af50:	f006 f8ad 	bl	80110ae <rng_pool_init>
		      CONFIG_ENTROPY_STM32_THR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
 800af54:	220c      	movs	r2, #12
 800af56:	2110      	movs	r1, #16
 800af58:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800af5c:	f006 f8a7 	bl	80110ae <rng_pool_init>
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 800af60:	2200      	movs	r2, #0
 800af62:	4611      	mov	r1, r2
 800af64:	2050      	movs	r0, #80	; 0x50
 800af66:	f7f9 fe1d 	bl	8004ba4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 800af6a:	2050      	movs	r0, #80	; 0x50
 800af6c:	f7f9 fdea 	bl	8004b44 <arch_irq_enable>

	return 0;
}
 800af70:	2000      	movs	r0, #0
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	40021000 	.word	0x40021000
 800af78:	080122d0 	.word	0x080122d0

0800af7c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800af7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af80:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800af82:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 800af84:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800af86:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800af8a:	d101      	bne.n	800af90 <elapsed+0x14>
	    || (val1 < val2)) {
 800af8c:	4281      	cmp	r1, r0
 800af8e:	d208      	bcs.n	800afa2 <elapsed+0x26>
		overflow_cyc += last_load;
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <elapsed+0x34>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	4907      	ldr	r1, [pc, #28]	; (800afb4 <elapsed+0x38>)
 800af96:	6809      	ldr	r1, [r1, #0]
 800af98:	440a      	add	r2, r1
 800af9a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800af9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afa0:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 800afa2:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <elapsed+0x38>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	1a1b      	subs	r3, r3, r0
 800afa8:	4a01      	ldr	r2, [pc, #4]	; (800afb0 <elapsed+0x34>)
 800afaa:	6810      	ldr	r0, [r2, #0]
}
 800afac:	4418      	add	r0, r3
 800afae:	4770      	bx	lr
 800afb0:	20001698 	.word	0x20001698
 800afb4:	20001694 	.word	0x20001694

0800afb8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <sys_clock_driver_init+0x28>)
 800afba:	2210      	movs	r2, #16
 800afbc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800afc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800afc4:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <sys_clock_driver_init+0x2c>)
 800afc6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 800afc8:	2000      	movs	r0, #0
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <sys_clock_driver_init+0x30>)
 800afcc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800afce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afd2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800afd4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800afd6:	691a      	ldr	r2, [r3, #16]
 800afd8:	f042 0207 	orr.w	r2, r2, #7
 800afdc:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800afde:	4770      	bx	lr
 800afe0:	e000ed00 	.word	0xe000ed00
 800afe4:	20001694 	.word	0x20001694
 800afe8:	20001698 	.word	0x20001698

0800afec <sys_clock_isr>:
{
 800afec:	b508      	push	{r3, lr}
	elapsed();
 800afee:	f7ff ffc5 	bl	800af7c <elapsed>
	cycle_count += overflow_cyc;
 800aff2:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <sys_clock_isr+0x38>)
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <sys_clock_isr+0x3c>)
 800aff8:	6811      	ldr	r1, [r2, #0]
 800affa:	4408      	add	r0, r1
 800affc:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800b002:	4a0a      	ldr	r2, [pc, #40]	; (800b02c <sys_clock_isr+0x40>)
 800b004:	6813      	ldr	r3, [r2, #0]
 800b006:	1ac0      	subs	r0, r0, r3
 800b008:	4909      	ldr	r1, [pc, #36]	; (800b030 <sys_clock_isr+0x44>)
 800b00a:	fba1 1000 	umull	r1, r0, r1, r0
 800b00e:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 800b010:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800b014:	fb01 3300 	mla	r3, r1, r0, r3
 800b018:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800b01a:	f002 f8d9 	bl	800d1d0 <sys_clock_announce>
	z_arm_int_exit();
 800b01e:	f7f9 fec3 	bl	8004da8 <z_arm_exc_exit>
}
 800b022:	bd08      	pop	{r3, pc}
 800b024:	20001698 	.word	0x20001698
 800b028:	20001690 	.word	0x20001690
 800b02c:	2000168c 	.word	0x2000168c
 800b030:	10624dd3 	.word	0x10624dd3

0800b034 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800b034:	b111      	cbz	r1, 800b03c <sys_clock_set_timeout+0x8>
 800b036:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b03a:	d03a      	beq.n	800b0b2 <sys_clock_set_timeout+0x7e>
{
 800b03c:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 800b03e:	4b38      	ldr	r3, [pc, #224]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b040:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b042:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b046:	d03f      	beq.n	800b0c8 <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b048:	2801      	cmp	r0, #1
 800b04a:	dd40      	ble.n	800b0ce <sys_clock_set_timeout+0x9a>
 800b04c:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 800b050:	dc3f      	bgt.n	800b0d2 <sys_clock_set_timeout+0x9e>
 800b052:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 800b054:	f04f 0310 	mov.w	r3, #16
 800b058:	f3ef 8611 	mrs	r6, BASEPRI
 800b05c:	f383 8812 	msr	BASEPRI_MAX, r3
 800b060:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800b064:	f7ff ff8a 	bl	800af7c <elapsed>
	val1 = SysTick->VAL;
 800b068:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b06c:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 800b06e:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <sys_clock_set_timeout+0xf0>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4410      	add	r0, r2
 800b074:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800b076:	4b2c      	ldr	r3, [pc, #176]	; (800b128 <sys_clock_set_timeout+0xf4>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800b07c:	4b2b      	ldr	r3, [pc, #172]	; (800b12c <sys_clock_set_timeout+0xf8>)
 800b07e:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800b080:	1a83      	subs	r3, r0, r2
 800b082:	d429      	bmi.n	800b0d8 <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 800b084:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 800b088:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800b08c:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 800b090:	331f      	adds	r3, #31
 800b092:	4c27      	ldr	r4, [pc, #156]	; (800b130 <sys_clock_set_timeout+0xfc>)
 800b094:	fba4 4303 	umull	r4, r3, r4, r3
 800b098:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 800b09a:	1a12      	subs	r2, r2, r0
 800b09c:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800b0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a4:	d91d      	bls.n	800b0e2 <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 800b0a6:	4a23      	ldr	r2, [pc, #140]	; (800b134 <sys_clock_set_timeout+0x100>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d91c      	bls.n	800b0e6 <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	e01b      	b.n	800b0ea <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800b0b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b0b6:	6913      	ldr	r3, [r2, #16]
 800b0b8:	f023 0301 	bic.w	r3, r3, #1
 800b0bc:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 800b0be:	4b18      	ldr	r3, [pc, #96]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b0c0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800b0c4:	601a      	str	r2, [r3, #0]
		return;
 800b0c6:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800b0c8:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800b0cc:	e7be      	b.n	800b04c <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800b0ce:	2400      	movs	r4, #0
 800b0d0:	e7c0      	b.n	800b054 <sys_clock_set_timeout+0x20>
 800b0d2:	f44f 6403 	mov.w	r4, #2096	; 0x830
 800b0d6:	e7bd      	b.n	800b054 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 800b0d8:	4b11      	ldr	r3, [pc, #68]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b0da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e003      	b.n	800b0ea <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 800b0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800b0e6:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b0e8:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 800b0ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b0ee:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 800b0f0:	4a0b      	ldr	r2, [pc, #44]	; (800b120 <sys_clock_set_timeout+0xec>)
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	3a01      	subs	r2, #1
 800b0f6:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 800b0fc:	42a1      	cmp	r1, r4
 800b0fe:	d209      	bcs.n	800b114 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 800b100:	1b2d      	subs	r5, r5, r4
 800b102:	440d      	add	r5, r1
 800b104:	4428      	add	r0, r5
 800b106:	4b07      	ldr	r3, [pc, #28]	; (800b124 <sys_clock_set_timeout+0xf0>)
 800b108:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 800b10a:	f386 8811 	msr	BASEPRI, r6
 800b10e:	f3bf 8f6f 	isb	sy
}
 800b112:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 800b114:	1b0d      	subs	r5, r1, r4
 800b116:	4428      	add	r0, r5
 800b118:	4b02      	ldr	r3, [pc, #8]	; (800b124 <sys_clock_set_timeout+0xf0>)
 800b11a:	6018      	str	r0, [r3, #0]
 800b11c:	e7f5      	b.n	800b10a <sys_clock_set_timeout+0xd6>
 800b11e:	bf00      	nop
 800b120:	20001694 	.word	0x20001694
 800b124:	20001690 	.word	0x20001690
 800b128:	20001698 	.word	0x20001698
 800b12c:	2000168c 	.word	0x2000168c
 800b130:	10624dd3 	.word	0x10624dd3
 800b134:	00ffdc00 	.word	0x00ffdc00

0800b138 <sys_clock_elapsed>:
{
 800b138:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b13a:	f04f 0310 	mov.w	r3, #16
 800b13e:	f3ef 8411 	mrs	r4, BASEPRI
 800b142:	f383 8812 	msr	BASEPRI_MAX, r3
 800b146:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800b14a:	f7ff ff17 	bl	800af7c <elapsed>
 800b14e:	4b07      	ldr	r3, [pc, #28]	; (800b16c <sys_clock_elapsed+0x34>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4418      	add	r0, r3
 800b154:	4b06      	ldr	r3, [pc, #24]	; (800b170 <sys_clock_elapsed+0x38>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 800b15a:	f384 8811 	msr	BASEPRI, r4
 800b15e:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 800b162:	4b04      	ldr	r3, [pc, #16]	; (800b174 <sys_clock_elapsed+0x3c>)
 800b164:	fba3 3000 	umull	r3, r0, r3, r0
}
 800b168:	0a40      	lsrs	r0, r0, #9
 800b16a:	bd10      	pop	{r4, pc}
 800b16c:	20001690 	.word	0x20001690
 800b170:	2000168c 	.word	0x2000168c
 800b174:	10624dd3 	.word	0x10624dd3

0800b178 <sys_clock_cycle_get_32>:
{
 800b178:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b17a:	f04f 0310 	mov.w	r3, #16
 800b17e:	f3ef 8411 	mrs	r4, BASEPRI
 800b182:	f383 8812 	msr	BASEPRI_MAX, r3
 800b186:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 800b18a:	f7ff fef7 	bl	800af7c <elapsed>
 800b18e:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <sys_clock_cycle_get_32+0x28>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4418      	add	r0, r3
	__asm__ volatile(
 800b194:	f384 8811 	msr	BASEPRI, r4
 800b198:	f3bf 8f6f 	isb	sy
}
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	bf00      	nop
 800b1a0:	20001690 	.word	0x20001690

0800b1a4 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800b1a4:	28af      	cmp	r0, #175	; 0xaf
 800b1a6:	d817      	bhi.n	800b1d8 <stm32_pin_configure+0x34>
{
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	4616      	mov	r6, r2
 800b1b0:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 800b1b2:	4a0b      	ldr	r2, [pc, #44]	; (800b1e0 <stm32_pin_configure+0x3c>)
 800b1b4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800b1b8:	b15f      	cbz	r7, 800b1d2 <stm32_pin_configure+0x2e>
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f006 f87a 	bl	80112b4 <z_device_is_ready>
 800b1c0:	b138      	cbz	r0, 800b1d2 <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800b1c2:	4633      	mov	r3, r6
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	f004 010f 	and.w	r1, r4, #15
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	f005 f953 	bl	8010476 <gpio_stm32_configure>
}
 800b1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 800b1d2:	f06f 0012 	mvn.w	r0, #18
 800b1d6:	e7fb      	b.n	800b1d0 <stm32_pin_configure+0x2c>
		return -EINVAL;
 800b1d8:	f06f 0015 	mvn.w	r0, #21
}
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	08013cac 	.word	0x08013cac

0800b1e4 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800b1e4:	b530      	push	{r4, r5, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1e6:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 800b1e8:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1ea:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b1ec:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 800b1ee:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b1f0:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b1f2:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b1f4:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b1f6:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800b1f8:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b1fa:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 800b1fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b1fe:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800b200:	4c17      	ldr	r4, [pc, #92]	; (800b260 <LL_DMA_Init+0x7c>)
 800b202:	5c65      	ldrb	r5, [r4, r1]
 800b204:	eb00 0e05 	add.w	lr, r0, r5
 800b208:	5944      	ldr	r4, [r0, r5]
 800b20a:	f424 4cff 	bic.w	ip, r4, #32640	; 0x7f80
 800b20e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b212:	ea43 030c 	orr.w	r3, r3, ip
 800b216:	5143      	str	r3, [r0, r5]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800b218:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800b21a:	f8ce 300c 	str.w	r3, [lr, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800b21e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800b220:	f8ce 3008 	str.w	r3, [lr, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800b224:	6a14      	ldr	r4, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800b226:	f8de 3004 	ldr.w	r3, [lr, #4]
 800b22a:	0c1b      	lsrs	r3, r3, #16
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	4323      	orrs	r3, r4
 800b230:	f8ce 3004 	str.w	r3, [lr, #4]
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800b234:	6a54      	ldr	r4, [r2, #36]	; 0x24
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800b236:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800b23a:	008a      	lsls	r2, r1, #2
 800b23c:	210f      	movs	r1, #15
 800b23e:	4091      	lsls	r1, r2
 800b240:	ea23 0301 	bic.w	r3, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b244:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800b248:	b141      	cbz	r1, 800b25c <LL_DMA_Init+0x78>
  return __builtin_clz(value);
 800b24a:	fab1 f181 	clz	r1, r1
 800b24e:	fa04 f101 	lsl.w	r1, r4, r1
 800b252:	4319      	orrs	r1, r3
 800b254:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 800b258:	2000      	movs	r0, #0
 800b25a:	bd30      	pop	{r4, r5, pc}
    return 32U;
 800b25c:	2120      	movs	r1, #32
 800b25e:	e7f6      	b.n	800b24e <LL_DMA_Init+0x6a>
 800b260:	08013ce8 	.word	0x08013ce8

0800b264 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b264:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800b266:	6a03      	ldr	r3, [r0, #32]
 800b268:	f023 0301 	bic.w	r3, r3, #1
 800b26c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b26e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b270:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b272:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800b274:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 800b278:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 800b27c:	680c      	ldr	r4, [r1, #0]
 800b27e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800b282:	f023 0302 	bic.w	r3, r3, #2
 800b286:	690d      	ldr	r5, [r1, #16]
 800b288:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800b28a:	f023 0301 	bic.w	r3, r3, #1
 800b28e:	684d      	ldr	r5, [r1, #4]
 800b290:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b292:	4d13      	ldr	r5, [pc, #76]	; (800b2e0 <OC1Config+0x7c>)
 800b294:	42a8      	cmp	r0, r5
 800b296:	d007      	beq.n	800b2a8 <OC1Config+0x44>
 800b298:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b29c:	42a8      	cmp	r0, r5
 800b29e:	d003      	beq.n	800b2a8 <OC1Config+0x44>
 800b2a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b2a4:	42a8      	cmp	r0, r5
 800b2a6:	d112      	bne.n	800b2ce <OC1Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800b2a8:	f023 0308 	bic.w	r3, r3, #8
 800b2ac:	694d      	ldr	r5, [r1, #20]
 800b2ae:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800b2b2:	f023 0304 	bic.w	r3, r3, #4
 800b2b6:	688d      	ldr	r5, [r1, #8]
 800b2b8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800b2bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2c0:	698d      	ldr	r5, [r1, #24]
 800b2c2:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800b2c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b2c8:	69cd      	ldr	r5, [r1, #28]
 800b2ca:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b2ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b2d0:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800b2d2:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800b2d4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b2d6:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b2d8:	2000      	movs	r0, #0
 800b2da:	bc30      	pop	{r4, r5}
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	40012c00 	.word	0x40012c00

0800b2e4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b2e4:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800b2e6:	6a03      	ldr	r3, [r0, #32]
 800b2e8:	f023 0310 	bic.w	r3, r3, #16
 800b2ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b2ee:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b2f0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b2f2:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800b2f4:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 800b2f8:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 800b2fc:	680c      	ldr	r4, [r1, #0]
 800b2fe:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800b302:	f023 0320 	bic.w	r3, r3, #32
 800b306:	690d      	ldr	r5, [r1, #16]
 800b308:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800b30c:	f023 0310 	bic.w	r3, r3, #16
 800b310:	684d      	ldr	r5, [r1, #4]
 800b312:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b316:	4d13      	ldr	r5, [pc, #76]	; (800b364 <OC2Config+0x80>)
 800b318:	42a8      	cmp	r0, r5
 800b31a:	d007      	beq.n	800b32c <OC2Config+0x48>
 800b31c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b320:	42a8      	cmp	r0, r5
 800b322:	d003      	beq.n	800b32c <OC2Config+0x48>
 800b324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b328:	42a8      	cmp	r0, r5
 800b32a:	d113      	bne.n	800b354 <OC2Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800b32c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b330:	694d      	ldr	r5, [r1, #20]
 800b332:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800b336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b33a:	688d      	ldr	r5, [r1, #8]
 800b33c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800b340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b344:	698d      	ldr	r5, [r1, #24]
 800b346:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800b34a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b34e:	69cd      	ldr	r5, [r1, #28]
 800b350:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b354:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b356:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800b358:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800b35a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b35c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b35e:	2000      	movs	r0, #0
 800b360:	bc30      	pop	{r4, r5}
 800b362:	4770      	bx	lr
 800b364:	40012c00 	.word	0x40012c00

0800b368 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b368:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800b36a:	6a03      	ldr	r3, [r0, #32]
 800b36c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b370:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b372:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b374:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b376:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800b378:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 800b37c:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 800b380:	680c      	ldr	r4, [r1, #0]
 800b382:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800b386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b38a:	690d      	ldr	r5, [r1, #16]
 800b38c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800b390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b394:	684d      	ldr	r5, [r1, #4]
 800b396:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b39a:	4d13      	ldr	r5, [pc, #76]	; (800b3e8 <OC3Config+0x80>)
 800b39c:	42a8      	cmp	r0, r5
 800b39e:	d007      	beq.n	800b3b0 <OC3Config+0x48>
 800b3a0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b3a4:	42a8      	cmp	r0, r5
 800b3a6:	d003      	beq.n	800b3b0 <OC3Config+0x48>
 800b3a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b3ac:	42a8      	cmp	r0, r5
 800b3ae:	d113      	bne.n	800b3d8 <OC3Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800b3b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3b4:	694d      	ldr	r5, [r1, #20]
 800b3b6:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800b3ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3be:	688d      	ldr	r5, [r1, #8]
 800b3c0:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800b3c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3c8:	698d      	ldr	r5, [r1, #24]
 800b3ca:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800b3ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3d2:	69cd      	ldr	r5, [r1, #28]
 800b3d4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b3d8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b3da:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800b3dc:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800b3de:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b3e0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	bc30      	pop	{r4, r5}
 800b3e6:	4770      	bx	lr
 800b3e8:	40012c00 	.word	0x40012c00

0800b3ec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b3ec:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800b3ee:	6a03      	ldr	r3, [r0, #32]
 800b3f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b3f6:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800b3f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b3fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800b3fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b400:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800b404:	680d      	ldr	r5, [r1, #0]
 800b406:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800b40a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b40e:	690d      	ldr	r5, [r1, #16]
 800b410:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800b414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b418:	684d      	ldr	r5, [r1, #4]
 800b41a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41e:	4d0c      	ldr	r5, [pc, #48]	; (800b450 <OC4Config+0x64>)
 800b420:	42a8      	cmp	r0, r5
 800b422:	d007      	beq.n	800b434 <OC4Config+0x48>
 800b424:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800b428:	42a8      	cmp	r0, r5
 800b42a:	d003      	beq.n	800b434 <OC4Config+0x48>
 800b42c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b430:	42a8      	cmp	r0, r5
 800b432:	d104      	bne.n	800b43e <OC4Config+0x52>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800b434:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800b438:	698d      	ldr	r5, [r1, #24]
 800b43a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b43e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b440:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800b442:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800b444:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b446:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b448:	2000      	movs	r0, #0
 800b44a:	bc30      	pop	{r4, r5}
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	40012c00 	.word	0x40012c00

0800b454 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b454:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800b456:	6a03      	ldr	r3, [r0, #32]
 800b458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b45e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800b460:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800b462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b46a:	680c      	ldr	r4, [r1, #0]
 800b46c:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800b46e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b472:	690c      	ldr	r4, [r1, #16]
 800b474:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800b478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b47c:	684c      	ldr	r4, [r1, #4]
 800b47e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b482:	4c0d      	ldr	r4, [pc, #52]	; (800b4b8 <OC5Config+0x64>)
 800b484:	42a0      	cmp	r0, r4
 800b486:	d007      	beq.n	800b498 <OC5Config+0x44>
 800b488:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800b48c:	42a0      	cmp	r0, r4
 800b48e:	d003      	beq.n	800b498 <OC5Config+0x44>
 800b490:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b494:	42a0      	cmp	r0, r4
 800b496:	d107      	bne.n	800b4a8 <OC5Config+0x54>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800b498:	6844      	ldr	r4, [r0, #4]
 800b49a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800b49e:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800b4a2:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 800b4a6:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800b4a8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800b4aa:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800b4ac:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800b4ae:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b4b0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	bc10      	pop	{r4}
 800b4b6:	4770      	bx	lr
 800b4b8:	40012c00 	.word	0x40012c00

0800b4bc <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b4bc:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800b4be:	6a03      	ldr	r3, [r0, #32]
 800b4c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b4c6:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800b4c8:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800b4ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b4ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b4d2:	680c      	ldr	r4, [r1, #0]
 800b4d4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800b4d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4dc:	690c      	ldr	r4, [r1, #16]
 800b4de:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800b4e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4e6:	684c      	ldr	r4, [r1, #4]
 800b4e8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ec:	4c0c      	ldr	r4, [pc, #48]	; (800b520 <OC6Config+0x64>)
 800b4ee:	42a0      	cmp	r0, r4
 800b4f0:	d007      	beq.n	800b502 <OC6Config+0x46>
 800b4f2:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800b4f6:	42a0      	cmp	r0, r4
 800b4f8:	d003      	beq.n	800b502 <OC6Config+0x46>
 800b4fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b4fe:	42a0      	cmp	r0, r4
 800b500:	d107      	bne.n	800b512 <OC6Config+0x56>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800b502:	6844      	ldr	r4, [r0, #4]
 800b504:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800b508:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800b50c:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 800b510:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800b512:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800b514:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800b516:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b518:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800b51a:	2000      	movs	r0, #0
 800b51c:	bc10      	pop	{r4}
 800b51e:	4770      	bx	lr
 800b520:	40012c00 	.word	0x40012c00

0800b524 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800b524:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b526:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <LL_TIM_Init+0x7c>)
 800b528:	4290      	cmp	r0, r2
 800b52a:	d006      	beq.n	800b53a <LL_TIM_Init+0x16>
 800b52c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b530:	d003      	beq.n	800b53a <LL_TIM_Init+0x16>
 800b532:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b536:	4290      	cmp	r0, r2
 800b538:	d103      	bne.n	800b542 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800b53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b53e:	684a      	ldr	r2, [r1, #4]
 800b540:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b542:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <LL_TIM_Init+0x7c>)
 800b544:	4290      	cmp	r0, r2
 800b546:	d00e      	beq.n	800b566 <LL_TIM_Init+0x42>
 800b548:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b54c:	d00b      	beq.n	800b566 <LL_TIM_Init+0x42>
 800b54e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b552:	4290      	cmp	r0, r2
 800b554:	d007      	beq.n	800b566 <LL_TIM_Init+0x42>
 800b556:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800b55a:	4290      	cmp	r0, r2
 800b55c:	d003      	beq.n	800b566 <LL_TIM_Init+0x42>
 800b55e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b562:	4290      	cmp	r0, r2
 800b564:	d103      	bne.n	800b56e <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800b566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b56a:	68ca      	ldr	r2, [r1, #12]
 800b56c:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800b56e:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800b570:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800b572:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800b574:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b576:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b578:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <LL_TIM_Init+0x7c>)
 800b57a:	4298      	cmp	r0, r3
 800b57c:	d007      	beq.n	800b58e <LL_TIM_Init+0x6a>
 800b57e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800b582:	4298      	cmp	r0, r3
 800b584:	d003      	beq.n	800b58e <LL_TIM_Init+0x6a>
 800b586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b58a:	4298      	cmp	r0, r3
 800b58c:	d101      	bne.n	800b592 <LL_TIM_Init+0x6e>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800b58e:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800b590:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b592:	6943      	ldr	r3, [r0, #20]
 800b594:	f043 0301 	orr.w	r3, r3, #1
 800b598:	6143      	str	r3, [r0, #20]
}
 800b59a:	2000      	movs	r0, #0
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	40012c00 	.word	0x40012c00

0800b5a4 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <UTILS_PLL_IsBusy+0x20>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b5ac:	d007      	beq.n	800b5be <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800b5ae:	2001      	movs	r0, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800b5b0:	4b04      	ldr	r3, [pc, #16]	; (800b5c4 <UTILS_PLL_IsBusy+0x20>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b5b8:	d000      	beq.n	800b5bc <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800b5ba:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800b5bc:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e7f6      	b.n	800b5b0 <UTILS_PLL_IsBusy+0xc>
 800b5c2:	bf00      	nop
 800b5c4:	40021000 	.word	0x40021000

0800b5c8 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800b5c8:	4b01      	ldr	r3, [pc, #4]	; (800b5d0 <LL_SetSystemCoreClock+0x8>)
 800b5ca:	6018      	str	r0, [r3, #0]
}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20000278 	.word	0x20000278

0800b5d4 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800b5d4:	1e42      	subs	r2, r0, #1
 800b5d6:	4b29      	ldr	r3, [pc, #164]	; (800b67c <LL_SetFlashLatency+0xa8>)
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d84c      	bhi.n	800b676 <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800b5dc:	4b28      	ldr	r3, [pc, #160]	; (800b680 <LL_SetFlashLatency+0xac>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800b5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e8:	d011      	beq.n	800b60e <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800b5ea:	4b26      	ldr	r3, [pc, #152]	; (800b684 <LL_SetFlashLatency+0xb0>)
 800b5ec:	4298      	cmp	r0, r3
 800b5ee:	d829      	bhi.n	800b644 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800b5f0:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800b5f4:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	d832      	bhi.n	800b662 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800b5fc:	4b22      	ldr	r3, [pc, #136]	; (800b688 <LL_SetFlashLatency+0xb4>)
 800b5fe:	4298      	cmp	r0, r3
 800b600:	d832      	bhi.n	800b668 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800b602:	4b22      	ldr	r3, [pc, #136]	; (800b68c <LL_SetFlashLatency+0xb8>)
 800b604:	4298      	cmp	r0, r3
 800b606:	d832      	bhi.n	800b66e <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b608:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800b60a:	4608      	mov	r0, r1
 800b60c:	e01c      	b.n	800b648 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800b60e:	4b20      	ldr	r3, [pc, #128]	; (800b690 <LL_SetFlashLatency+0xbc>)
 800b610:	4298      	cmp	r0, r3
 800b612:	d80b      	bhi.n	800b62c <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800b614:	4b1f      	ldr	r3, [pc, #124]	; (800b694 <LL_SetFlashLatency+0xc0>)
 800b616:	4298      	cmp	r0, r3
 800b618:	d80b      	bhi.n	800b632 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800b61a:	4b1f      	ldr	r3, [pc, #124]	; (800b698 <LL_SetFlashLatency+0xc4>)
 800b61c:	4298      	cmp	r0, r3
 800b61e:	d80b      	bhi.n	800b638 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800b620:	4b1e      	ldr	r3, [pc, #120]	; (800b69c <LL_SetFlashLatency+0xc8>)
 800b622:	4298      	cmp	r0, r3
 800b624:	d80b      	bhi.n	800b63e <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b626:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800b628:	4608      	mov	r0, r1
 800b62a:	e00d      	b.n	800b648 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800b62c:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800b62e:	2000      	movs	r0, #0
 800b630:	e00a      	b.n	800b648 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800b632:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800b634:	2000      	movs	r0, #0
 800b636:	e007      	b.n	800b648 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800b638:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800b63a:	2000      	movs	r0, #0
 800b63c:	e004      	b.n	800b648 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800b63e:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800b640:	2000      	movs	r0, #0
 800b642:	e001      	b.n	800b648 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800b644:	2100      	movs	r1, #0
        status = ERROR;
 800b646:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800b648:	4a15      	ldr	r2, [pc, #84]	; (800b6a0 <LL_SetFlashLatency+0xcc>)
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	f023 0307 	bic.w	r3, r3, #7
 800b650:	430b      	orrs	r3, r1
 800b652:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800b654:	6813      	ldr	r3, [r2, #0]
 800b656:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800b65a:	4299      	cmp	r1, r3
 800b65c:	d00a      	beq.n	800b674 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800b65e:	2001      	movs	r0, #1
}
 800b660:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800b662:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800b664:	2000      	movs	r0, #0
 800b666:	e7ef      	b.n	800b648 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800b668:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800b66a:	2000      	movs	r0, #0
 800b66c:	e7ec      	b.n	800b648 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800b66e:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800b670:	2000      	movs	r0, #0
 800b672:	e7e9      	b.n	800b648 <LL_SetFlashLatency+0x74>
 800b674:	4770      	bx	lr
    status = ERROR;
 800b676:	2001      	movs	r0, #1
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	04c4b3ff 	.word	0x04c4b3ff
 800b680:	40007000 	.word	0x40007000
 800b684:	018cba80 	.word	0x018cba80
 800b688:	00b71b00 	.word	0x00b71b00
 800b68c:	005b8d80 	.word	0x005b8d80
 800b690:	03d09000 	.word	0x03d09000
 800b694:	02dc6c00 	.word	0x02dc6c00
 800b698:	01e84800 	.word	0x01e84800
 800b69c:	00f42400 	.word	0x00f42400
 800b6a0:	40022000 	.word	0x40022000

0800b6a4 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800b6a4:	b570      	push	{r4, r5, r6, lr}
 800b6a6:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800b6a8:	680b      	ldr	r3, [r1, #0]
 800b6aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b6ae:	4a26      	ldr	r2, [pc, #152]	; (800b748 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800b6b0:	5cd3      	ldrb	r3, [r2, r3]
 800b6b2:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800b6b6:	4b25      	ldr	r3, [pc, #148]	; (800b74c <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	42ab      	cmp	r3, r5
 800b6bc:	d333      	bcc.n	800b726 <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800b6be:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b6c0:	4b23      	ldr	r3, [pc, #140]	; (800b750 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b6c8:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b6d0:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800b6d2:	4b1f      	ldr	r3, [pc, #124]	; (800b750 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b6da:	d0fa      	beq.n	800b6d2 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800b6dc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b6de:	4b1c      	ldr	r3, [pc, #112]	; (800b750 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b6e0:	6899      	ldr	r1, [r3, #8]
 800b6e2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800b6e6:	430a      	orrs	r2, r1
 800b6e8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	f042 0203 	orr.w	r2, r2, #3
 800b6f0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b6f2:	4b17      	ldr	r3, [pc, #92]	; (800b750 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b6fa:	2b0c      	cmp	r3, #12
 800b6fc:	d1f9      	bne.n	800b6f2 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800b6fe:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b700:	4b13      	ldr	r3, [pc, #76]	; (800b750 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800b702:	6899      	ldr	r1, [r3, #8]
 800b704:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800b708:	430a      	orrs	r2, r1
 800b70a:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800b70c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b70e:	6899      	ldr	r1, [r3, #8]
 800b710:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800b714:	430a      	orrs	r2, r1
 800b716:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	42ab      	cmp	r3, r5
 800b71e:	d809      	bhi.n	800b734 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800b720:	b16e      	cbz	r6, 800b73e <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800b722:	4630      	mov	r0, r6
 800b724:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800b726:	4628      	mov	r0, r5
 800b728:	f7ff ff54 	bl	800b5d4 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800b72c:	4606      	mov	r6, r0
 800b72e:	2800      	cmp	r0, #0
 800b730:	d1f2      	bne.n	800b718 <UTILS_EnablePLLAndSwitchSystem+0x74>
 800b732:	e7c5      	b.n	800b6c0 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800b734:	4628      	mov	r0, r5
 800b736:	f7ff ff4d 	bl	800b5d4 <LL_SetFlashLatency>
 800b73a:	4606      	mov	r6, r0
 800b73c:	e7f0      	b.n	800b720 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800b73e:	4628      	mov	r0, r5
 800b740:	f7ff ff42 	bl	800b5c8 <LL_SetSystemCoreClock>
 800b744:	e7ed      	b.n	800b722 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800b746:	bf00      	nop
 800b748:	08013cd8 	.word	0x08013cd8
 800b74c:	20000278 	.word	0x20000278
 800b750:	40021000 	.word	0x40021000

0800b754 <LL_PLL_ConfigSystemClock_HSI>:
{
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	4604      	mov	r4, r0
 800b758:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800b75a:	f7ff ff23 	bl	800b5a4 <UTILS_PLL_IsBusy>
 800b75e:	bb20      	cbnz	r0, 800b7aa <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800b760:	4621      	mov	r1, r4
 800b762:	4813      	ldr	r0, [pc, #76]	; (800b7b0 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800b764:	f005 fd39 	bl	80111da <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b768:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b770:	d109      	bne.n	800b786 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b772:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b77a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800b77c:	4b0d      	ldr	r3, [pc, #52]	; (800b7b4 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b784:	d0fa      	beq.n	800b77c <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	6866      	ldr	r6, [r4, #4]
 800b78a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800b78c:	4c09      	ldr	r4, [pc, #36]	; (800b7b4 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800b78e:	68e7      	ldr	r7, [r4, #12]
 800b790:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800b792:	403b      	ands	r3, r7
 800b794:	f042 0202 	orr.w	r2, r2, #2
 800b798:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800b79c:	430a      	orrs	r2, r1
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7ff ff7e 	bl	800b6a4 <UTILS_EnablePLLAndSwitchSystem>
}
 800b7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	e7fc      	b.n	800b7a8 <LL_PLL_ConfigSystemClock_HSI+0x54>
 800b7ae:	bf00      	nop
 800b7b0:	00f42400 	.word	0x00f42400
 800b7b4:	40021000 	.word	0x40021000
 800b7b8:	f9ff808c 	.word	0xf9ff808c

0800b7bc <ws2812_strip_update_channels>:
                                        size_t num_channels) {
 800b7bc:	b500      	push	{lr}
 800b7be:	b091      	sub	sp, #68	; 0x44
    LOG_ERR("update_channels not implemented");
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 800b7c6:	4b12      	ldr	r3, [pc, #72]	; (800b810 <ws2812_strip_update_channels+0x54>)
 800b7c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	f88d 1004 	strb.w	r1, [sp, #4]
 800b7d4:	9901      	ldr	r1, [sp, #4]
 800b7d6:	910d      	str	r1, [sp, #52]	; 0x34
 800b7d8:	4619      	mov	r1, r3
 800b7da:	f363 0100 	bfi	r1, r3, #0, #1
 800b7de:	f363 0141 	bfi	r1, r3, #1, #1
 800b7e2:	f363 0182 	bfi	r1, r3, #2, #1
 800b7e6:	f363 01c5 	bfi	r1, r3, #3, #3
 800b7ea:	f362 1188 	bfi	r1, r2, #6, #3
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	f362 2152 	bfi	r1, r2, #9, #10
 800b7f4:	f363 41de 	bfi	r1, r3, #19, #12
 800b7f8:	f363 71df 	bfi	r1, r3, #31, #1
 800b7fc:	aa0d      	add	r2, sp, #52	; 0x34
 800b7fe:	4805      	ldr	r0, [pc, #20]	; (800b814 <ws2812_strip_update_channels+0x58>)
 800b800:	f004 f91c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
}
 800b804:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800b808:	b011      	add	sp, #68	; 0x44
 800b80a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b80e:	bf00      	nop
 800b810:	08013cf0 	.word	0x08013cf0
 800b814:	08012770 	.word	0x08012770

0800b818 <ws2812_pwm_write>:
static int ws2812_pwm_write(const struct device *dev) {
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	b09b      	sub	sp, #108	; 0x6c
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800b81e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 800b820:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
    TIM_TypeDef *tim = pwm_cfg->timer;
 800b828:	681d      	ldr	r5, [r3, #0]
    uint8_t *buf = cfg->px_buf;
 800b82a:	f8d4 9010 	ldr.w	r9, [r4, #16]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800b82e:	6863      	ldr	r3, [r4, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	4a6c      	ldr	r2, [pc, #432]	; (800b9e4 <ws2812_pwm_write+0x1cc>)
 800b834:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
    LL_TIM_OC_StructInit(&oc_init);
 800b838:	a80c      	add	r0, sp, #48	; 0x30
 800b83a:	f005 fc9a 	bl	8011172 <LL_TIM_OC_StructInit>
    oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800b83e:	2360      	movs	r3, #96	; 0x60
 800b840:	930c      	str	r3, [sp, #48]	; 0x30
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800b842:	2301      	movs	r3, #1
 800b844:	930d      	str	r3, [sp, #52]	; 0x34
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 800b846:	7b20      	ldrb	r0, [r4, #12]
 800b848:	f005 fd20 	bl	801128c <get_polarity>
 800b84c:	9010      	str	r0, [sp, #64]	; 0x40
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 800b84e:	aa0c      	add	r2, sp, #48	; 0x30
 800b850:	4659      	mov	r1, fp
 800b852:	4628      	mov	r0, r5
 800b854:	f005 fc97 	bl	8011186 <LL_TIM_OC_Init>
 800b858:	bb38      	cbnz	r0, 800b8aa <ws2812_pwm_write+0x92>
 800b85a:	4603      	mov	r3, r0
	__asm__ volatile(
 800b85c:	f04f 0210 	mov.w	r2, #16
 800b860:	f3ef 8111 	mrs	r1, BASEPRI
 800b864:	f382 8812 	msr	BASEPRI_MAX, r2
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	9101      	str	r1, [sp, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800b86e:	682a      	ldr	r2, [r5, #0]
 800b870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b874:	602a      	str	r2, [r5, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b876:	f1bb 0f01 	cmp.w	fp, #1
 800b87a:	d03e      	beq.n	800b8fa <ws2812_pwm_write+0xe2>
 800b87c:	f1bb 0f04 	cmp.w	fp, #4
 800b880:	d03a      	beq.n	800b8f8 <ws2812_pwm_write+0xe0>
 800b882:	f1bb 0f10 	cmp.w	fp, #16
 800b886:	d05a      	beq.n	800b93e <ws2812_pwm_write+0x126>
 800b888:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800b88c:	d059      	beq.n	800b942 <ws2812_pwm_write+0x12a>
 800b88e:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
 800b892:	d058      	beq.n	800b946 <ws2812_pwm_write+0x12e>
 800b894:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 800b898:	d057      	beq.n	800b94a <ws2812_pwm_write+0x132>
 800b89a:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
 800b89e:	d056      	beq.n	800b94e <ws2812_pwm_write+0x136>
 800b8a0:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800b8a4:	d026      	beq.n	800b8f4 <ws2812_pwm_write+0xdc>
 800b8a6:	2308      	movs	r3, #8
 800b8a8:	e027      	b.n	800b8fa <ws2812_pwm_write+0xe2>
        LOG_ERR("Could not initialize timer channel output");
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 800b8b0:	4b4d      	ldr	r3, [pc, #308]	; (800b9e8 <ws2812_pwm_write+0x1d0>)
 800b8b2:	9318      	str	r3, [sp, #96]	; 0x60
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9303      	str	r3, [sp, #12]
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	f88d 100c 	strb.w	r1, [sp, #12]
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f363 0100 	bfi	r1, r3, #0, #1
 800b8c8:	f363 0141 	bfi	r1, r3, #1, #1
 800b8cc:	f363 0182 	bfi	r1, r3, #2, #1
 800b8d0:	f363 01c5 	bfi	r1, r3, #3, #3
 800b8d4:	f362 1188 	bfi	r1, r2, #6, #3
 800b8d8:	2208      	movs	r2, #8
 800b8da:	f362 2152 	bfi	r1, r2, #9, #10
 800b8de:	f363 41de 	bfi	r1, r3, #19, #12
 800b8e2:	f363 71df 	bfi	r1, r3, #31, #1
 800b8e6:	aa17      	add	r2, sp, #92	; 0x5c
 800b8e8:	4840      	ldr	r0, [pc, #256]	; (800b9ec <ws2812_pwm_write+0x1d4>)
 800b8ea:	f004 f8a7 	bl	800fa3c <z_impl_z_log_msg2_static_create>
        return -EIO;
 800b8ee:	f06f 0004 	mvn.w	r0, #4
 800b8f2:	e073      	b.n	800b9dc <ws2812_pwm_write+0x1c4>
 800b8f4:	2307      	movs	r3, #7
 800b8f6:	e000      	b.n	800b8fa <ws2812_pwm_write+0xe2>
 800b8f8:	2301      	movs	r3, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800b8fa:	f105 0218 	add.w	r2, r5, #24
 800b8fe:	493c      	ldr	r1, [pc, #240]	; (800b9f0 <ws2812_pwm_write+0x1d8>)
 800b900:	5cc8      	ldrb	r0, [r1, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800b902:	5811      	ldr	r1, [r2, r0]
 800b904:	4e3b      	ldr	r6, [pc, #236]	; (800b9f4 <ws2812_pwm_write+0x1dc>)
 800b906:	5cf6      	ldrb	r6, [r6, r3]
 800b908:	2308      	movs	r3, #8
 800b90a:	40b3      	lsls	r3, r6
 800b90c:	430b      	orrs	r3, r1
 800b90e:	5013      	str	r3, [r2, r0]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 800b910:	f8d8 3000 	ldr.w	r3, [r8]
 800b914:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800b916:	62eb      	str	r3, [r5, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b918:	696b      	ldr	r3, [r5, #20]
 800b91a:	f043 0301 	orr.w	r3, r3, #1
 800b91e:	616b      	str	r3, [r5, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 800b920:	6862      	ldr	r2, [r4, #4]
 800b922:	4b35      	ldr	r3, [pc, #212]	; (800b9f8 <ws2812_pwm_write+0x1e0>)
 800b924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b928:	4628      	mov	r0, r5
 800b92a:	4798      	blx	r3
    clear_timer_flag[cfg->pwm.channel](tim);
 800b92c:	6862      	ldr	r2, [r4, #4]
 800b92e:	4b33      	ldr	r3, [pc, #204]	; (800b9fc <ws2812_pwm_write+0x1e4>)
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	4628      	mov	r0, r5
 800b936:	4798      	blx	r3
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800b938:	f04f 0a00 	mov.w	sl, #0
 800b93c:	e02d      	b.n	800b99a <ws2812_pwm_write+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b93e:	2302      	movs	r3, #2
 800b940:	e7db      	b.n	800b8fa <ws2812_pwm_write+0xe2>
 800b942:	2303      	movs	r3, #3
 800b944:	e7d9      	b.n	800b8fa <ws2812_pwm_write+0xe2>
 800b946:	2304      	movs	r3, #4
 800b948:	e7d7      	b.n	800b8fa <ws2812_pwm_write+0xe2>
 800b94a:	2305      	movs	r3, #5
 800b94c:	e7d5      	b.n	800b8fa <ws2812_pwm_write+0xe2>
 800b94e:	2306      	movs	r3, #6
 800b950:	e7d3      	b.n	800b8fa <ws2812_pwm_write+0xe2>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800b952:	f8d8 1008 	ldr.w	r1, [r8, #8]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800b956:	6863      	ldr	r3, [r4, #4]
 800b958:	3b01      	subs	r3, #1
 800b95a:	4a29      	ldr	r2, [pc, #164]	; (800ba00 <ws2812_pwm_write+0x1e8>)
 800b95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b960:	4628      	mov	r0, r5
 800b962:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800b964:	6862      	ldr	r2, [r4, #4]
 800b966:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <ws2812_pwm_write+0x1ec>)
 800b968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96c:	4628      	mov	r0, r5
 800b96e:	4798      	blx	r3
 800b970:	2800      	cmp	r0, #0
 800b972:	d0f7      	beq.n	800b964 <ws2812_pwm_write+0x14c>
            clear_timer_flag[cfg->pwm.channel](tim);
 800b974:	6862      	ldr	r2, [r4, #4]
 800b976:	4b21      	ldr	r3, [pc, #132]	; (800b9fc <ws2812_pwm_write+0x1e4>)
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	4628      	mov	r0, r5
 800b97e:	4798      	blx	r3
            tmp <<= 1;
 800b980:	0076      	lsls	r6, r6, #1
 800b982:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 800b984:	3701      	adds	r7, #1
 800b986:	2f07      	cmp	r7, #7
 800b988:	dc05      	bgt.n	800b996 <ws2812_pwm_write+0x17e>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800b98a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800b98e:	d1e0      	bne.n	800b952 <ws2812_pwm_write+0x13a>
 800b990:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b994:	e7df      	b.n	800b956 <ws2812_pwm_write+0x13e>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800b996:	f10a 0a01 	add.w	sl, sl, #1
 800b99a:	6963      	ldr	r3, [r4, #20]
 800b99c:	459a      	cmp	sl, r3
 800b99e:	d203      	bcs.n	800b9a8 <ws2812_pwm_write+0x190>
        uint8_t tmp = *buf++;
 800b9a0:	f819 6b01 	ldrb.w	r6, [r9], #1
        for(int j = 0; j < 8; j++) {
 800b9a4:	2700      	movs	r7, #0
 800b9a6:	e7ee      	b.n	800b986 <ws2812_pwm_write+0x16e>
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <ws2812_pwm_write+0x1e8>)
 800b9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	4798      	blx	r3
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800b9b8:	6862      	ldr	r2, [r4, #4]
 800b9ba:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <ws2812_pwm_write+0x1ec>)
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	4798      	blx	r3
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0f7      	beq.n	800b9b8 <ws2812_pwm_write+0x1a0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800b9c8:	6a2b      	ldr	r3, [r5, #32]
 800b9ca:	ea23 030b 	bic.w	r3, r3, fp
 800b9ce:	622b      	str	r3, [r5, #32]
	__asm__ volatile(
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
    return 0;
 800b9da:	2000      	movs	r0, #0
}
 800b9dc:	b01b      	add	sp, #108	; 0x6c
 800b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e2:	bf00      	nop
 800b9e4:	08013da4 	.word	0x08013da4
 800b9e8:	080134cc 	.word	0x080134cc
 800b9ec:	08012770 	.word	0x08012770
 800b9f0:	08013d8c 	.word	0x08013d8c
 800b9f4:	08013d98 	.word	0x08013d98
 800b9f8:	08013dd4 	.word	0x08013dd4
 800b9fc:	08013dbc 	.word	0x08013dbc
 800ba00:	08013e04 	.word	0x08013e04
 800ba04:	08013dec 	.word	0x08013dec

0800ba08 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800ba0a:	6844      	ldr	r4, [r0, #4]
    uint8_t *px_buf = cfg->px_buf;
 800ba0c:	6925      	ldr	r5, [r4, #16]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 800ba0e:	7e23      	ldrb	r3, [r4, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800ba10:	2600      	movs	r6, #0
 800ba12:	fba2 3703 	umull	r3, r7, r2, r3
 800ba16:	b92f      	cbnz	r7, 800ba24 <ws2812_strip_update_rgb+0x1c>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800ba18:	b936      	cbnz	r6, 800ba28 <ws2812_strip_update_rgb+0x20>
 800ba1a:	6966      	ldr	r6, [r4, #20]
 800ba1c:	42b3      	cmp	r3, r6
 800ba1e:	d90b      	bls.n	800ba38 <ws2812_strip_update_rgb+0x30>
 800ba20:	2300      	movs	r3, #0
 800ba22:	e002      	b.n	800ba2a <ws2812_strip_update_rgb+0x22>
 800ba24:	2601      	movs	r6, #1
 800ba26:	e7f7      	b.n	800ba18 <ws2812_strip_update_rgb+0x10>
 800ba28:	2300      	movs	r3, #0
    if (!num_pixels_ok(cfg, num_pixels)) {
 800ba2a:	b13b      	cbz	r3, 800ba3c <ws2812_strip_update_rgb+0x34>
    for (i = 0; i < num_pixels; i++) {
 800ba2c:	f04f 0e00 	mov.w	lr, #0
 800ba30:	4596      	cmp	lr, r2
 800ba32:	d22e      	bcs.n	800ba92 <ws2812_strip_update_rgb+0x8a>
        for (j = 0; j < cfg->num_colors; j++) {
 800ba34:	2300      	movs	r3, #0
 800ba36:	e009      	b.n	800ba4c <ws2812_strip_update_rgb+0x44>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e7f6      	b.n	800ba2a <ws2812_strip_update_rgb+0x22>
        return -ENOMEM;
 800ba3c:	f06f 050b 	mvn.w	r5, #11
 800ba40:	e02d      	b.n	800ba9e <ws2812_strip_update_rgb+0x96>
                    *px_buf = 0;
 800ba42:	2600      	movs	r6, #0
 800ba44:	702e      	strb	r6, [r5, #0]
            px_buf++;
 800ba46:	3501      	adds	r5, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800ba48:	3301      	adds	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f894 c018 	ldrb.w	ip, [r4, #24]
 800ba50:	459c      	cmp	ip, r3
 800ba52:	d91a      	bls.n	800ba8a <ws2812_strip_update_rgb+0x82>
            switch (cfg->color_mapping[j]) {
 800ba54:	69e6      	ldr	r6, [r4, #28]
 800ba56:	f816 c003 	ldrb.w	ip, [r6, r3]
 800ba5a:	f1bc 0f03 	cmp.w	ip, #3
 800ba5e:	d820      	bhi.n	800baa2 <ws2812_strip_update_rgb+0x9a>
 800ba60:	a601      	add	r6, pc, #4	; (adr r6, 800ba68 <ws2812_strip_update_rgb+0x60>)
 800ba62:	f856 f02c 	ldr.w	pc, [r6, ip, lsl #2]
 800ba66:	bf00      	nop
 800ba68:	0800ba43 	.word	0x0800ba43
 800ba6c:	0800ba79 	.word	0x0800ba79
 800ba70:	0800ba7f 	.word	0x0800ba7f
 800ba74:	0800ba85 	.word	0x0800ba85
                    *px_buf = pixels->r;
 800ba78:	784e      	ldrb	r6, [r1, #1]
 800ba7a:	702e      	strb	r6, [r5, #0]
                    break;
 800ba7c:	e7e3      	b.n	800ba46 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->g;
 800ba7e:	788e      	ldrb	r6, [r1, #2]
 800ba80:	702e      	strb	r6, [r5, #0]
                    break;
 800ba82:	e7e0      	b.n	800ba46 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->b;
 800ba84:	78ce      	ldrb	r6, [r1, #3]
 800ba86:	702e      	strb	r6, [r5, #0]
                    break;
 800ba88:	e7dd      	b.n	800ba46 <ws2812_strip_update_rgb+0x3e>
        pixels++;
 800ba8a:	3104      	adds	r1, #4
    for (i = 0; i < num_pixels; i++) {
 800ba8c:	f10e 0e01 	add.w	lr, lr, #1
 800ba90:	e7ce      	b.n	800ba30 <ws2812_strip_update_rgb+0x28>
    rc = ws2812_pwm_write(dev);
 800ba92:	f7ff fec1 	bl	800b818 <ws2812_pwm_write>
 800ba96:	4605      	mov	r5, r0
    ws2812_reset_delay(cfg->reset_delay);
 800ba98:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	return z_impl_k_usleep(us);
 800ba9a:	f005 fece 	bl	801183a <z_impl_k_usleep>
}
 800ba9e:	4628      	mov	r0, r5
 800baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (cfg->color_mapping[j]) {
 800baa2:	f06f 0515 	mvn.w	r5, #21
 800baa6:	e7fa      	b.n	800ba9e <ws2812_strip_update_rgb+0x96>

0800baa8 <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
 800baa8:	b430      	push	{r4, r5}
    if (!hsv->v)
 800baaa:	78c4      	ldrb	r4, [r0, #3]
 800baac:	b92c      	cbnz	r4, 800baba <led_hsv2rgb+0x12>
    {
        rgb->r = rgb->g = rgb->b = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	70cb      	strb	r3, [r1, #3]
 800bab2:	708b      	strb	r3, [r1, #2]
 800bab4:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 800bab6:	bc30      	pop	{r4, r5}
 800bab8:	4770      	bx	lr
    else if (!hsv->s)
 800baba:	7883      	ldrb	r3, [r0, #2]
 800babc:	b91b      	cbnz	r3, 800bac6 <led_hsv2rgb+0x1e>
        rgb->r = rgb->g = rgb->b = hsv->v;
 800babe:	70cc      	strb	r4, [r1, #3]
 800bac0:	708c      	strb	r4, [r1, #2]
 800bac2:	704c      	strb	r4, [r1, #1]
 800bac4:	e7f7      	b.n	800bab6 <led_hsv2rgb+0xe>
        int hue = hsv->h % 360;
 800bac6:	f9b0 2000 	ldrsh.w	r2, [r0]
 800baca:	4831      	ldr	r0, [pc, #196]	; (800bb90 <led_hsv2rgb+0xe8>)
 800bacc:	fb80 5002 	smull	r5, r0, r0, r2
 800bad0:	4410      	add	r0, r2
 800bad2:	17d5      	asrs	r5, r2, #31
 800bad4:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 800bad8:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800badc:	fb05 2210 	mls	r2, r5, r0, r2
 800bae0:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 800bae2:	2a00      	cmp	r2, #0
 800bae4:	db2c      	blt.n	800bb40 <led_hsv2rgb+0x98>
        int sector = hue / 60;
 800bae6:	482b      	ldr	r0, [pc, #172]	; (800bb94 <led_hsv2rgb+0xec>)
 800bae8:	fb80 5002 	smull	r5, r0, r0, r2
 800baec:	4410      	add	r0, r2
 800baee:	17d5      	asrs	r5, r2, #31
 800baf0:	ebc5 1060 	rsb	r0, r5, r0, asr #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800baf4:	f010 0f01 	tst.w	r0, #1
 800baf8:	d024      	beq.n	800bb44 <led_hsv2rgb+0x9c>
 800bafa:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 800bafe:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800bb02:	f1cc 0c3c 	rsb	ip, ip, #60	; 0x3c
        int low = (255 - hsv->s) * high / 255;
 800bb06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bb0a:	fb04 f303 	mul.w	r3, r4, r3
 800bb0e:	4a22      	ldr	r2, [pc, #136]	; (800bb98 <led_hsv2rgb+0xf0>)
 800bb10:	fb82 5203 	smull	r5, r2, r2, r3
 800bb14:	441a      	add	r2, r3
 800bb16:	17db      	asrs	r3, r3, #31
 800bb18:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
        int middle = low + (high - low) * angle / 60;
 800bb1c:	1ae2      	subs	r2, r4, r3
 800bb1e:	fb0c f202 	mul.w	r2, ip, r2
 800bb22:	4d1c      	ldr	r5, [pc, #112]	; (800bb94 <led_hsv2rgb+0xec>)
 800bb24:	fb85 5c02 	smull	r5, ip, r5, r2
 800bb28:	4494      	add	ip, r2
 800bb2a:	17d2      	asrs	r2, r2, #31
 800bb2c:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 800bb30:	441a      	add	r2, r3
        switch (sector)
 800bb32:	2805      	cmp	r0, #5
 800bb34:	d8bf      	bhi.n	800bab6 <led_hsv2rgb+0xe>
 800bb36:	e8df f000 	tbb	[pc, r0]
 800bb3a:	1713      	.short	0x1713
 800bb3c:	27231f1b 	.word	0x27231f1b
        hue = hue < 0 ? 360 + hue : hue;
 800bb40:	442a      	add	r2, r5
 800bb42:	e7d0      	b.n	800bae6 <led_hsv2rgb+0x3e>
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800bb44:	4d13      	ldr	r5, [pc, #76]	; (800bb94 <led_hsv2rgb+0xec>)
 800bb46:	fb85 5c02 	smull	r5, ip, r5, r2
 800bb4a:	eb0c 0502 	add.w	r5, ip, r2
 800bb4e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800bb52:	ebcc 1c65 	rsb	ip, ip, r5, asr #5
 800bb56:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800bb5a:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800bb5e:	e7d2      	b.n	800bb06 <led_hsv2rgb+0x5e>
                rgb->r = high;
 800bb60:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 800bb62:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 800bb64:	70cb      	strb	r3, [r1, #3]
                break;
 800bb66:	e7a6      	b.n	800bab6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800bb68:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 800bb6a:	708c      	strb	r4, [r1, #2]
                rgb->b = low;
 800bb6c:	70cb      	strb	r3, [r1, #3]
                break;
 800bb6e:	e7a2      	b.n	800bab6 <led_hsv2rgb+0xe>
                rgb->r = low;
 800bb70:	704b      	strb	r3, [r1, #1]
                rgb->g = high;
 800bb72:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 800bb74:	70ca      	strb	r2, [r1, #3]
                break;
 800bb76:	e79e      	b.n	800bab6 <led_hsv2rgb+0xe>
                rgb->r = low;
 800bb78:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 800bb7a:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 800bb7c:	70cc      	strb	r4, [r1, #3]
                break;
 800bb7e:	e79a      	b.n	800bab6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800bb80:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 800bb82:	708b      	strb	r3, [r1, #2]
                rgb->b = high;
 800bb84:	70cc      	strb	r4, [r1, #3]
                break;
 800bb86:	e796      	b.n	800bab6 <led_hsv2rgb+0xe>
                rgb->r = high;
 800bb88:	704c      	strb	r4, [r1, #1]
                rgb->g = low;
 800bb8a:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 800bb8c:	70ca      	strb	r2, [r1, #3]
}
 800bb8e:	e792      	b.n	800bab6 <led_hsv2rgb+0xe>
 800bb90:	b60b60b7 	.word	0xb60b60b7
 800bb94:	88888889 	.word	0x88888889
 800bb98:	80808081 	.word	0x80808081

0800bb9c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800bb9c:	4b03      	ldr	r3, [pc, #12]	; (800bbac <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800bb9e:	e000      	b.n	800bba2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800bba0:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800bba2:	4a03      	ldr	r2, [pc, #12]	; (800bbb0 <z_device_state_init+0x14>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d3fb      	bcc.n	800bba0 <z_device_state_init+0x4>
	}
}
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	080122d0 	.word	0x080122d0
 800bbb0:	08012450 	.word	0x08012450

0800bbb4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800bbb8:	4b11      	ldr	r3, [pc, #68]	; (800bc00 <z_sys_init_run_level+0x4c>)
 800bbba:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800bbbe:	e009      	b.n	800bbd4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800bbc0:	4240      	negs	r0, r0
 800bbc2:	e017      	b.n	800bbf4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800bbc4:	68eb      	ldr	r3, [r5, #12]
 800bbc6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800bbc8:	68ea      	ldr	r2, [r5, #12]
 800bbca:	7853      	ldrb	r3, [r2, #1]
 800bbcc:	f043 0301 	orr.w	r3, r3, #1
 800bbd0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800bbd2:	3408      	adds	r4, #8
 800bbd4:	1c73      	adds	r3, r6, #1
 800bbd6:	4a0a      	ldr	r2, [pc, #40]	; (800bc00 <z_sys_init_run_level+0x4c>)
 800bbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d90d      	bls.n	800bbfc <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800bbe0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	4798      	blx	r3
		if (dev != NULL) {
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	d0f2      	beq.n	800bbd2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d0eb      	beq.n	800bbc8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	dbe5      	blt.n	800bbc0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800bbf4:	28ff      	cmp	r0, #255	; 0xff
 800bbf6:	dde5      	ble.n	800bbc4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800bbf8:	20ff      	movs	r0, #255	; 0xff
 800bbfa:	e7e3      	b.n	800bbc4 <z_sys_init_run_level+0x10>
		}
	}
}
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	bf00      	nop
 800bc00:	08013e50 	.word	0x08013e50

0800bc04 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800bc04:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800bc06:	4605      	mov	r5, r0
 800bc08:	b328      	cbz	r0, 800bc56 <z_impl_device_get_binding+0x52>
 800bc0a:	7803      	ldrb	r3, [r0, #0]
 800bc0c:	b32b      	cbz	r3, 800bc5a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800bc0e:	4c14      	ldr	r4, [pc, #80]	; (800bc60 <z_impl_device_get_binding+0x5c>)
 800bc10:	e000      	b.n	800bc14 <z_impl_device_get_binding+0x10>
 800bc12:	3418      	adds	r4, #24
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <z_impl_device_get_binding+0x60>)
 800bc16:	429c      	cmp	r4, r3
 800bc18:	d008      	beq.n	800bc2c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f005 fb4a 	bl	80112b4 <z_device_is_ready>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d0f6      	beq.n	800bc12 <z_impl_device_get_binding+0xe>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	42ab      	cmp	r3, r5
 800bc28:	d1f3      	bne.n	800bc12 <z_impl_device_get_binding+0xe>
 800bc2a:	e012      	b.n	800bc52 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800bc2c:	4c0c      	ldr	r4, [pc, #48]	; (800bc60 <z_impl_device_get_binding+0x5c>)
 800bc2e:	e000      	b.n	800bc32 <z_impl_device_get_binding+0x2e>
 800bc30:	3418      	adds	r4, #24
 800bc32:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <z_impl_device_get_binding+0x60>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	d00b      	beq.n	800bc50 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f005 fb3b 	bl	80112b4 <z_device_is_ready>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d0f6      	beq.n	800bc30 <z_impl_device_get_binding+0x2c>
 800bc42:	6821      	ldr	r1, [r4, #0]
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7f5 f8fc 	bl	8000e42 <strcmp>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d1f0      	bne.n	800bc30 <z_impl_device_get_binding+0x2c>
 800bc4e:	e000      	b.n	800bc52 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800bc50:	2400      	movs	r4, #0
}
 800bc52:	4620      	mov	r0, r4
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800bc56:	4604      	mov	r4, r0
 800bc58:	e7fb      	b.n	800bc52 <z_impl_device_get_binding+0x4e>
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	e7f9      	b.n	800bc52 <z_impl_device_get_binding+0x4e>
 800bc5e:	bf00      	nop
 800bc60:	080122d0 	.word	0x080122d0
 800bc64:	08012450 	.word	0x08012450

0800bc68 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800bc68:	2804      	cmp	r0, #4
 800bc6a:	d80c      	bhi.n	800bc86 <reason_to_str+0x1e>
 800bc6c:	e8df f000 	tbb	[pc, r0]
 800bc70:	07050d03 	.word	0x07050d03
 800bc74:	09          	.byte	0x09
 800bc75:	00          	.byte	0x00
 800bc76:	4806      	ldr	r0, [pc, #24]	; (800bc90 <reason_to_str+0x28>)
 800bc78:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800bc7a:	4806      	ldr	r0, [pc, #24]	; (800bc94 <reason_to_str+0x2c>)
 800bc7c:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800bc7e:	4806      	ldr	r0, [pc, #24]	; (800bc98 <reason_to_str+0x30>)
 800bc80:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800bc82:	4806      	ldr	r0, [pc, #24]	; (800bc9c <reason_to_str+0x34>)
 800bc84:	4770      	bx	lr
	default:
		return "Unknown error";
 800bc86:	4806      	ldr	r0, [pc, #24]	; (800bca0 <reason_to_str+0x38>)
 800bc88:	4770      	bx	lr
		return "Unhandled interrupt";
 800bc8a:	4806      	ldr	r0, [pc, #24]	; (800bca4 <reason_to_str+0x3c>)
	}
}
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	08013eb8 	.word	0x08013eb8
 800bc94:	08013e8c 	.word	0x08013e8c
 800bc98:	08013e9c 	.word	0x08013e9c
 800bc9c:	08013ea8 	.word	0x08013ea8
 800bca0:	08013e68 	.word	0x08013e68
 800bca4:	08013e78 	.word	0x08013e78

0800bca8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800bca8:	b130      	cbz	r0, 800bcb8 <thread_name_get+0x10>
{
 800bcaa:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800bcac:	f005 fb54 	bl	8011358 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800bcb0:	b120      	cbz	r0, 800bcbc <thread_name_get+0x14>
 800bcb2:	7803      	ldrb	r3, [r0, #0]
 800bcb4:	b123      	cbz	r3, 800bcc0 <thread_name_get+0x18>
}
 800bcb6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800bcb8:	4802      	ldr	r0, [pc, #8]	; (800bcc4 <thread_name_get+0x1c>)
}
 800bcba:	4770      	bx	lr
		thread_name = "unknown";
 800bcbc:	4801      	ldr	r0, [pc, #4]	; (800bcc4 <thread_name_get+0x1c>)
 800bcbe:	e7fa      	b.n	800bcb6 <thread_name_get+0xe>
 800bcc0:	4800      	ldr	r0, [pc, #0]	; (800bcc4 <thread_name_get+0x1c>)
	return thread_name;
 800bcc2:	e7f8      	b.n	800bcb6 <thread_name_get+0xe>
 800bcc4:	08013ec8 	.word	0x08013ec8

0800bcc8 <k_sys_fatal_error_handler>:
{
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	b090      	sub	sp, #64	; 0x40
 800bccc:	4604      	mov	r4, r0
	z_impl_log_panic();
 800bcce:	f7f8 fb8b 	bl	80043e8 <z_impl_log_panic>
	LOG_ERR("Halting system");
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f8ad 2008 	strh.w	r2, [sp, #8]
 800bcd8:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <k_sys_fatal_error_handler+0x54>)
 800bcda:	930e      	str	r3, [sp, #56]	; 0x38
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	2102      	movs	r1, #2
 800bce2:	f88d 1004 	strb.w	r1, [sp, #4]
 800bce6:	9901      	ldr	r1, [sp, #4]
 800bce8:	910d      	str	r1, [sp, #52]	; 0x34
 800bcea:	4619      	mov	r1, r3
 800bcec:	f363 0100 	bfi	r1, r3, #0, #1
 800bcf0:	f363 0141 	bfi	r1, r3, #1, #1
 800bcf4:	f363 0182 	bfi	r1, r3, #2, #1
 800bcf8:	f363 01c5 	bfi	r1, r3, #3, #3
 800bcfc:	f362 1188 	bfi	r1, r2, #6, #3
 800bd00:	2208      	movs	r2, #8
 800bd02:	f362 2152 	bfi	r1, r2, #9, #10
 800bd06:	f363 41de 	bfi	r1, r3, #19, #12
 800bd0a:	f363 71df 	bfi	r1, r3, #31, #1
 800bd0e:	aa0d      	add	r2, sp, #52	; 0x34
 800bd10:	4803      	ldr	r0, [pc, #12]	; (800bd20 <k_sys_fatal_error_handler+0x58>)
 800bd12:	f003 fe93 	bl	800fa3c <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800bd16:	4620      	mov	r0, r4
 800bd18:	f005 fae6 	bl	80112e8 <arch_system_halt>
 800bd1c:	08013ed0 	.word	0x08013ed0
 800bd20:	08012730 	.word	0x08012730

0800bd24 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd26:	b097      	sub	sp, #92	; 0x5c
 800bd28:	4605      	mov	r5, r0
 800bd2a:	460e      	mov	r6, r1
	__asm__ volatile(
 800bd2c:	f04f 0310 	mov.w	r3, #16
 800bd30:	f3ef 8711 	mrs	r7, BASEPRI
 800bd34:	f383 8812 	msr	BASEPRI_MAX, r3
 800bd38:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800bd3c:	f001 f908 	bl	800cf50 <z_impl_z_current_get>
 800bd40:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800bd42:	4628      	mov	r0, r5
 800bd44:	f7ff ff90 	bl	800bc68 <reason_to_str>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	9003      	str	r0, [sp, #12]
 800bd4e:	9502      	str	r5, [sp, #8]
 800bd50:	4a25      	ldr	r2, [pc, #148]	; (800bde8 <z_fatal_error+0xc4>)
 800bd52:	9201      	str	r2, [sp, #4]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	2201      	movs	r2, #1
 800bd58:	4924      	ldr	r1, [pc, #144]	; (800bdec <z_fatal_error+0xc8>)
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f005 fab7 	bl	80112ce <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800bd60:	b11e      	cbz	r6, 800bd6a <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800bd62:	69f3      	ldr	r3, [r6, #28]
 800bd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd68:	b9d3      	cbnz	r3, 800bda0 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7ff ff9c 	bl	800bca8 <thread_name_get>
 800bd70:	9003      	str	r0, [sp, #12]
 800bd72:	9402      	str	r4, [sp, #8]
 800bd74:	4b1e      	ldr	r3, [pc, #120]	; (800bdf0 <z_fatal_error+0xcc>)
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	2000      	movs	r0, #0
 800bd7a:	9000      	str	r0, [sp, #0]
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2201      	movs	r2, #1
 800bd80:	491a      	ldr	r1, [pc, #104]	; (800bdec <z_fatal_error+0xc8>)
 800bd82:	f005 faa4 	bl	80112ce <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f7ff ff9d 	bl	800bcc8 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800bd8e:	f387 8811 	msr	BASEPRI, r7
 800bd92:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7f9 fe1a 	bl	80059d0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800bd9c:	b017      	add	sp, #92	; 0x5c
 800bd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800bda0:	2201      	movs	r2, #1
 800bda2:	f8ad 2020 	strh.w	r2, [sp, #32]
 800bda6:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <z_fatal_error+0xd0>)
 800bda8:	9314      	str	r3, [sp, #80]	; 0x50
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9307      	str	r3, [sp, #28]
 800bdae:	2102      	movs	r1, #2
 800bdb0:	f88d 101c 	strb.w	r1, [sp, #28]
 800bdb4:	9907      	ldr	r1, [sp, #28]
 800bdb6:	9113      	str	r1, [sp, #76]	; 0x4c
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f363 0100 	bfi	r1, r3, #0, #1
 800bdbe:	f363 0141 	bfi	r1, r3, #1, #1
 800bdc2:	f363 0182 	bfi	r1, r3, #2, #1
 800bdc6:	f363 01c5 	bfi	r1, r3, #3, #3
 800bdca:	f362 1188 	bfi	r1, r2, #6, #3
 800bdce:	2208      	movs	r2, #8
 800bdd0:	f362 2152 	bfi	r1, r2, #9, #10
 800bdd4:	f363 41de 	bfi	r1, r3, #19, #12
 800bdd8:	f363 71df 	bfi	r1, r3, #31, #1
 800bddc:	aa13      	add	r2, sp, #76	; 0x4c
 800bdde:	4803      	ldr	r0, [pc, #12]	; (800bdec <z_fatal_error+0xc8>)
 800bde0:	f003 fe2c 	bl	800fa3c <z_impl_z_log_msg2_static_create>
 800bde4:	e7c1      	b.n	800bd6a <z_fatal_error+0x46>
 800bde6:	bf00      	nop
 800bde8:	08013ee0 	.word	0x08013ee0
 800bdec:	08012730 	.word	0x08012730
 800bdf0:	08013f2c 	.word	0x08013f2c
 800bdf4:	08013f08 	.word	0x08013f08

0800bdf8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800bdfc:	4c10      	ldr	r4, [pc, #64]	; (800be40 <init_idle_thread+0x48>)
 800bdfe:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800be02:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <init_idle_thread+0x4c>)
 800be08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800be0c:	2200      	movs	r2, #0
 800be0e:	9205      	str	r2, [sp, #20]
 800be10:	2101      	movs	r1, #1
 800be12:	9104      	str	r1, [sp, #16]
 800be14:	210f      	movs	r1, #15
 800be16:	9103      	str	r1, [sp, #12]
 800be18:	9202      	str	r2, [sp, #8]
 800be1a:	9201      	str	r2, [sp, #4]
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <init_idle_thread+0x50>)
 800be20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800be24:	4909      	ldr	r1, [pc, #36]	; (800be4c <init_idle_thread+0x54>)
 800be26:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800be2a:	fb0c 1100 	mla	r1, ip, r0, r1
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f8ee 	bl	800c010 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800be34:	7b63      	ldrb	r3, [r4, #13]
 800be36:	f023 0304 	bic.w	r3, r3, #4
 800be3a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800be3c:	b006      	add	sp, #24
 800be3e:	bd10      	pop	{r4, pc}
 800be40:	20000d60 	.word	0x20000d60
 800be44:	200016d8 	.word	0x200016d8
 800be48:	080113bf 	.word	0x080113bf
 800be4c:	200036e0 	.word	0x200036e0

0800be50 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800be54:	f000 ffc8 	bl	800cde8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800be58:	4d1b      	ldr	r5, [pc, #108]	; (800bec8 <prepare_multithreading+0x78>)
 800be5a:	4b1c      	ldr	r3, [pc, #112]	; (800becc <prepare_multithreading+0x7c>)
 800be5c:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800be5e:	4b1c      	ldr	r3, [pc, #112]	; (800bed0 <prepare_multithreading+0x80>)
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	2301      	movs	r3, #1
 800be64:	9304      	str	r3, [sp, #16]
 800be66:	2400      	movs	r4, #0
 800be68:	9403      	str	r4, [sp, #12]
 800be6a:	9402      	str	r4, [sp, #8]
 800be6c:	9401      	str	r4, [sp, #4]
 800be6e:	9400      	str	r4, [sp, #0]
 800be70:	4b18      	ldr	r3, [pc, #96]	; (800bed4 <prepare_multithreading+0x84>)
 800be72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800be76:	4918      	ldr	r1, [pc, #96]	; (800bed8 <prepare_multithreading+0x88>)
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 f8c9 	bl	800c010 <z_setup_new_thread>
 800be7e:	4606      	mov	r6, r0
 800be80:	7b6b      	ldrb	r3, [r5, #13]
 800be82:	f023 0304 	bic.w	r3, r3, #4
 800be86:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800be88:	4628      	mov	r0, r5
 800be8a:	f005 fbe0 	bl	801164e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800be8e:	2c00      	cmp	r4, #0
 800be90:	dd02      	ble.n	800be98 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800be92:	4630      	mov	r0, r6
 800be94:	b006      	add	sp, #24
 800be96:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800be98:	4620      	mov	r0, r4
 800be9a:	f7ff ffad 	bl	800bdf8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800be9e:	4a0f      	ldr	r2, [pc, #60]	; (800bedc <prepare_multithreading+0x8c>)
 800bea0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800bea4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800bea8:	4b08      	ldr	r3, [pc, #32]	; (800becc <prepare_multithreading+0x7c>)
 800beaa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800beae:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800beb0:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800beb2:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800beb6:	4a0a      	ldr	r2, [pc, #40]	; (800bee0 <prepare_multithreading+0x90>)
 800beb8:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800bebc:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800bec0:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800bec2:	3401      	adds	r4, #1
 800bec4:	e7e3      	b.n	800be8e <prepare_multithreading+0x3e>
 800bec6:	bf00      	nop
 800bec8:	20000de0 	.word	0x20000de0
 800becc:	200016d8 	.word	0x200016d8
 800bed0:	08013f44 	.word	0x08013f44
 800bed4:	0800bee5 	.word	0x0800bee5
 800bed8:	200026c0 	.word	0x200026c0
 800bedc:	20000d60 	.word	0x20000d60
 800bee0:	20003840 	.word	0x20003840

0800bee4 <bg_thread_main>:
{
 800bee4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <bg_thread_main+0x30>)
 800bee8:	2201      	movs	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800beec:	2002      	movs	r0, #2
 800beee:	f7ff fe61 	bl	800bbb4 <z_sys_init_run_level>
	boot_banner();
 800bef2:	f001 fd79 	bl	800d9e8 <boot_banner>
	z_cpp_init_static();
 800bef6:	f003 fe08 	bl	800fb0a <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800befa:	2003      	movs	r0, #3
 800befc:	f7ff fe5a 	bl	800bbb4 <z_sys_init_run_level>
	z_init_static_threads();
 800bf00:	f000 f8b6 	bl	800c070 <z_init_static_threads>
	main();
 800bf04:	f005 fe33 	bl	8011b6e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800bf08:	4a03      	ldr	r2, [pc, #12]	; (800bf18 <bg_thread_main+0x34>)
 800bf0a:	7b13      	ldrb	r3, [r2, #12]
 800bf0c:	f023 0301 	bic.w	r3, r3, #1
 800bf10:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800bf12:	bd08      	pop	{r3, pc}
 800bf14:	20001738 	.word	0x20001738
 800bf18:	20000de0 	.word	0x20000de0

0800bf1c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800bf1c:	b508      	push	{r3, lr}
 800bf1e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800bf20:	4a01      	ldr	r2, [pc, #4]	; (800bf28 <switch_to_main_thread+0xc>)
 800bf22:	4802      	ldr	r0, [pc, #8]	; (800bf2c <switch_to_main_thread+0x10>)
 800bf24:	f7f8 ff16 	bl	8004d54 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800bf28:	0800bee5 	.word	0x0800bee5
 800bf2c:	20000de0 	.word	0x20000de0

0800bf30 <z_bss_zero>:
{
 800bf30:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800bf32:	4803      	ldr	r0, [pc, #12]	; (800bf40 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 800bf34:	4a03      	ldr	r2, [pc, #12]	; (800bf44 <z_bss_zero+0x14>)
 800bf36:	1a12      	subs	r2, r2, r0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	f005 fe30 	bl	8011b9e <memset>
}
 800bf3e:	bd08      	pop	{r3, pc}
 800bf40:	200006c0 	.word	0x200006c0
 800bf44:	2000173c 	.word	0x2000173c

0800bf48 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800bf48:	b500      	push	{lr}
 800bf4a:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800bf4c:	4b1d      	ldr	r3, [pc, #116]	; (800bfc4 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800bf4e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800bf52:	4c1d      	ldr	r4, [pc, #116]	; (800bfc8 <z_cstart+0x80>)
 800bf54:	6963      	ldr	r3, [r4, #20]
 800bf56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf5a:	6163      	str	r3, [r4, #20]
 800bf5c:	23f0      	movs	r3, #240	; 0xf0
 800bf5e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800bf62:	2500      	movs	r5, #0
 800bf64:	77e5      	strb	r5, [r4, #31]
 800bf66:	7625      	strb	r5, [r4, #24]
 800bf68:	7665      	strb	r5, [r4, #25]
 800bf6a:	76a5      	strb	r5, [r4, #26]
 800bf6c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800bf70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf72:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800bf76:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800bf78:	f7f9 fce8 	bl	800594c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800bf7c:	f7f8 fce0 	bl	8004940 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800bf80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf84:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800bf86:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800bf88:	f7f9 fe2c 	bl	8005be4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800bf8c:	f7f9 fd36 	bl	80059fc <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800bf90:	f7f8 f946 	bl	8004220 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800bf94:	2401      	movs	r4, #1
 800bf96:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800bf9a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800bf9e:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800bfa0:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800bfa2:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <z_cstart+0x84>)
 800bfa6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800bfaa:	f7ff fdf7 	bl	800bb9c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f7ff fe00 	bl	800bbb4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f7ff fdfd 	bl	800bbb4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800bfba:	f7ff ff49 	bl	800be50 <prepare_multithreading>
 800bfbe:	f7ff ffad 	bl	800bf1c <switch_to_main_thread>
 800bfc2:	bf00      	nop
 800bfc4:	20004060 	.word	0x20004060
 800bfc8:	e000ed00 	.word	0xe000ed00
 800bfcc:	200016d8 	.word	0x200016d8

0800bfd0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800bfd0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800bfd2:	4c06      	ldr	r4, [pc, #24]	; (800bfec <init_mem_slab_module+0x1c>)
	int rc = 0;
 800bfd4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800bfd6:	e000      	b.n	800bfda <init_mem_slab_module+0xa>
 800bfd8:	3420      	adds	r4, #32
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <init_mem_slab_module+0x20>)
 800bfdc:	429c      	cmp	r4, r3
 800bfde:	d204      	bcs.n	800bfea <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f005 f98a 	bl	80112fa <create_free_list>
		if (rc < 0) {
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	daf6      	bge.n	800bfd8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800bfea:	bd10      	pop	{r4, pc}
 800bfec:	20000568 	.word	0x20000568
 800bff0:	20000568 	.word	0x20000568

0800bff4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800bff4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800bff6:	ea53 0102 	orrs.w	r1, r3, r2
 800bffa:	d102      	bne.n	800c002 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800bffc:	f005 f9ae 	bl	801135c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800c000:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800c002:	4902      	ldr	r1, [pc, #8]	; (800c00c <schedule_new_thread+0x18>)
 800c004:	3018      	adds	r0, #24
 800c006:	f001 f857 	bl	800d0b8 <z_add_timeout>
 800c00a:	e7f9      	b.n	800c000 <schedule_new_thread+0xc>
 800c00c:	08011687 	.word	0x08011687

0800c010 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800c010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c012:	b085      	sub	sp, #20
 800c014:	4604      	mov	r4, r0
 800c016:	460e      	mov	r6, r1
 800c018:	4615      	mov	r5, r2
 800c01a:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800c01c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800c020:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800c022:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800c024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c026:	2204      	movs	r2, #4
 800c028:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c02a:	f005 f99b 	bl	8011364 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800c02e:	462a      	mov	r2, r5
 800c030:	4631      	mov	r1, r6
 800c032:	4620      	mov	r0, r4
 800c034:	f005 f978 	bl	8011328 <setup_thread_stack>
 800c038:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800c03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	463b      	mov	r3, r7
 800c048:	4602      	mov	r2, r0
 800c04a:	4631      	mov	r1, r6
 800c04c:	4620      	mov	r0, r4
 800c04e:	f7f8 fe3b 	bl	8004cc8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800c056:	4b05      	ldr	r3, [pc, #20]	; (800c06c <z_setup_new_thread+0x5c>)
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	b123      	cbz	r3, 800c066 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800c05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c05e:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800c060:	4628      	mov	r0, r5
 800c062:	b005      	add	sp, #20
 800c064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800c066:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800c068:	e7fa      	b.n	800c060 <z_setup_new_thread+0x50>
 800c06a:	bf00      	nop
 800c06c:	200016d8 	.word	0x200016d8

0800c070 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800c070:	b510      	push	{r4, lr}
 800c072:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800c074:	4c1d      	ldr	r4, [pc, #116]	; (800c0ec <z_init_static_threads+0x7c>)
 800c076:	e014      	b.n	800c0a2 <z_init_static_threads+0x32>
		z_setup_new_thread(
 800c078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	6a23      	ldr	r3, [r4, #32]
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	69e3      	ldr	r3, [r4, #28]
 800c082:	9303      	str	r3, [sp, #12]
 800c084:	69a3      	ldr	r3, [r4, #24]
 800c086:	9302      	str	r3, [sp, #8]
 800c088:	6963      	ldr	r3, [r4, #20]
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	68e3      	ldr	r3, [r4, #12]
 800c092:	68a2      	ldr	r2, [r4, #8]
 800c094:	6861      	ldr	r1, [r4, #4]
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	f7ff ffba 	bl	800c010 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800c0a0:	3430      	adds	r4, #48	; 0x30
 800c0a2:	4b13      	ldr	r3, [pc, #76]	; (800c0f0 <z_init_static_threads+0x80>)
 800c0a4:	429c      	cmp	r4, r3
 800c0a6:	d3e7      	bcc.n	800c078 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800c0a8:	f000 fc22 	bl	800c8f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800c0ac:	4c0f      	ldr	r4, [pc, #60]	; (800c0ec <z_init_static_threads+0x7c>)
 800c0ae:	e000      	b.n	800c0b2 <z_init_static_threads+0x42>
 800c0b0:	3430      	adds	r4, #48	; 0x30
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <z_init_static_threads+0x80>)
 800c0b4:	429c      	cmp	r4, r3
 800c0b6:	d214      	bcs.n	800c0e2 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800c0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0be:	d0f7      	beq.n	800c0b0 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800c0c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0c4:	17d8      	asrs	r0, r3, #31
 800c0c6:	0082      	lsls	r2, r0, #2
 800c0c8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800c0cc:	0099      	lsls	r1, r3, #2
 800c0ce:	18c9      	adds	r1, r1, r3
 800c0d0:	eb40 0002 	adc.w	r0, r0, r2
 800c0d4:	184a      	adds	r2, r1, r1
 800c0d6:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800c0da:	6820      	ldr	r0, [r4, #0]
 800c0dc:	f7ff ff8a 	bl	800bff4 <schedule_new_thread>
 800c0e0:	e7e6      	b.n	800c0b0 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800c0e2:	f000 fe0f 	bl	800cd04 <k_sched_unlock>
}
 800c0e6:	b006      	add	sp, #24
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	bf00      	nop
 800c0ec:	2000049c 	.word	0x2000049c
 800c0f0:	2000052c 	.word	0x2000052c

0800c0f4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800c0fe:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800c102:	f04f 0110 	mov.w	r1, #16
 800c106:	f3ef 8611 	mrs	r6, BASEPRI
 800c10a:	f381 8812 	msr	BASEPRI_MAX, r1
 800c10e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800c112:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c114:	6921      	ldr	r1, [r4, #16]
 800c116:	4288      	cmp	r0, r1
 800c118:	d30b      	bcc.n	800c132 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c11a:	ea53 0102 	orrs.w	r1, r3, r2
 800c11e:	d137      	bne.n	800c190 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800c120:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800c124:	f386 8811 	msr	BASEPRI, r6
 800c128:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800c12c:	b002      	add	sp, #8
 800c12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800c132:	4620      	mov	r0, r4
 800c134:	f005 fb52 	bl	80117dc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800c138:	4680      	mov	r8, r0
 800c13a:	b180      	cbz	r0, 800c15e <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800c13c:	68e2      	ldr	r2, [r4, #12]
 800c13e:	4629      	mov	r1, r5
 800c140:	6940      	ldr	r0, [r0, #20]
 800c142:	f005 fd1e 	bl	8011b82 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800c146:	2400      	movs	r4, #0
 800c148:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800c14c:	4640      	mov	r0, r8
 800c14e:	f005 fa7e 	bl	801164e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800c152:	4631      	mov	r1, r6
 800c154:	4638      	mov	r0, r7
 800c156:	f000 fbaf 	bl	800c8b8 <z_reschedule>
			return 0;
 800c15a:	4620      	mov	r0, r4
 800c15c:	e7e6      	b.n	800c12c <z_impl_k_msgq_put+0x38>
 800c15e:	68e2      	ldr	r2, [r4, #12]
 800c160:	4629      	mov	r1, r5
 800c162:	6a20      	ldr	r0, [r4, #32]
 800c164:	f005 fd0d 	bl	8011b82 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800c168:	68e2      	ldr	r2, [r4, #12]
 800c16a:	6a23      	ldr	r3, [r4, #32]
 800c16c:	4413      	add	r3, r2
 800c16e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800c170:	69a2      	ldr	r2, [r4, #24]
 800c172:	4293      	cmp	r3, r2
 800c174:	d009      	beq.n	800c18a <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	3301      	adds	r3, #1
 800c17a:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800c17c:	2110      	movs	r1, #16
 800c17e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c182:	f005 fcdf 	bl	8011b44 <z_handle_obj_poll_events>
		result = 0;
 800c186:	2000      	movs	r0, #0
 800c188:	e7cc      	b.n	800c124 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 800c18a:	6963      	ldr	r3, [r4, #20]
 800c18c:	6223      	str	r3, [r4, #32]
 800c18e:	e7f2      	b.n	800c176 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 800c190:	4905      	ldr	r1, [pc, #20]	; (800c1a8 <z_impl_k_msgq_put+0xb4>)
 800c192:	6889      	ldr	r1, [r1, #8]
 800c194:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800c196:	9200      	str	r2, [sp, #0]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	4622      	mov	r2, r4
 800c19c:	4631      	mov	r1, r6
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f000 fcfa 	bl	800cb98 <z_pend_curr>
		return result;
 800c1a4:	e7c2      	b.n	800c12c <z_impl_k_msgq_put+0x38>
 800c1a6:	bf00      	nop
 800c1a8:	200016d8 	.word	0x200016d8

0800c1ac <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800c1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800c1b4:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 800c1b8:	f04f 0110 	mov.w	r1, #16
 800c1bc:	f3ef 8511 	mrs	r5, BASEPRI
 800c1c0:	f381 8812 	msr	BASEPRI_MAX, r1
 800c1c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800c1c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c1ca:	2900      	cmp	r1, #0
 800c1cc:	d033      	beq.n	800c236 <z_impl_k_msgq_get+0x8a>
 800c1ce:	68e2      	ldr	r2, [r4, #12]
 800c1d0:	69e1      	ldr	r1, [r4, #28]
 800c1d2:	f005 fcd6 	bl	8011b82 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800c1d6:	68e2      	ldr	r2, [r4, #12]
 800c1d8:	69e3      	ldr	r3, [r4, #28]
 800c1da:	4413      	add	r3, r2
 800c1dc:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800c1de:	69a2      	ldr	r2, [r4, #24]
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d022      	beq.n	800c22a <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 800c1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f005 faf6 	bl	80117dc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d035      	beq.n	800c262 <z_impl_k_msgq_get+0xb6>
 800c1f6:	68e2      	ldr	r2, [r4, #12]
 800c1f8:	6941      	ldr	r1, [r0, #20]
 800c1fa:	6a20      	ldr	r0, [r4, #32]
 800c1fc:	f005 fcc1 	bl	8011b82 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800c200:	68e2      	ldr	r2, [r4, #12]
 800c202:	6a23      	ldr	r3, [r4, #32]
 800c204:	4413      	add	r3, r2
 800c206:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800c208:	69a2      	ldr	r2, [r4, #24]
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d010      	beq.n	800c230 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800c20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c210:	3301      	adds	r3, #1
 800c212:	6263      	str	r3, [r4, #36]	; 0x24
 800c214:	2400      	movs	r4, #0
 800c216:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800c218:	4638      	mov	r0, r7
 800c21a:	f005 fa18 	bl	801164e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800c21e:	4629      	mov	r1, r5
 800c220:	4630      	mov	r0, r6
 800c222:	f000 fb49 	bl	800c8b8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800c226:	4620      	mov	r0, r4
 800c228:	e00e      	b.n	800c248 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 800c22a:	6963      	ldr	r3, [r4, #20]
 800c22c:	61e3      	str	r3, [r4, #28]
 800c22e:	e7d9      	b.n	800c1e4 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 800c230:	6963      	ldr	r3, [r4, #20]
 800c232:	6223      	str	r3, [r4, #32]
 800c234:	e7eb      	b.n	800c20e <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c236:	ea53 0102 	orrs.w	r1, r3, r2
 800c23a:	d107      	bne.n	800c24c <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 800c23c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800c240:	f385 8811 	msr	BASEPRI, r5
 800c244:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800c248:	b003      	add	sp, #12
 800c24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800c24c:	4906      	ldr	r1, [pc, #24]	; (800c268 <z_impl_k_msgq_get+0xbc>)
 800c24e:	6889      	ldr	r1, [r1, #8]
 800c250:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800c252:	9200      	str	r2, [sp, #0]
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	4622      	mov	r2, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	4630      	mov	r0, r6
 800c25c:	f000 fc9c 	bl	800cb98 <z_pend_curr>
		return result;
 800c260:	e7f2      	b.n	800c248 <z_impl_k_msgq_get+0x9c>
		result = 0;
 800c262:	2000      	movs	r0, #0
 800c264:	e7ec      	b.n	800c240 <z_impl_k_msgq_get+0x94>
 800c266:	bf00      	nop
 800c268:	200016d8 	.word	0x200016d8

0800c26c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800c26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c270:	b083      	sub	sp, #12
 800c272:	4604      	mov	r4, r0
 800c274:	461d      	mov	r5, r3
	__asm__ volatile(
 800c276:	f04f 0310 	mov.w	r3, #16
 800c27a:	f3ef 8711 	mrs	r7, BASEPRI
 800c27e:	f383 8812 	msr	BASEPRI_MAX, r3
 800c282:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800c286:	68c1      	ldr	r1, [r0, #12]
 800c288:	b999      	cbnz	r1, 800c2b2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800c28a:	2900      	cmp	r1, #0
 800c28c:	d14f      	bne.n	800c32e <z_impl_k_mutex_lock+0xc2>
 800c28e:	4b3a      	ldr	r3, [pc, #232]	; (800c378 <z_impl_k_mutex_lock+0x10c>)
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800c296:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800c298:	3101      	adds	r1, #1
 800c29a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800c29c:	4b36      	ldr	r3, [pc, #216]	; (800c378 <z_impl_k_mutex_lock+0x10c>)
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800c2a2:	f387 8811 	msr	BASEPRI, r7
 800c2a6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800c2aa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800c2b4:	6882      	ldr	r2, [r0, #8]
 800c2b6:	4b30      	ldr	r3, [pc, #192]	; (800c378 <z_impl_k_mutex_lock+0x10c>)
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d0e5      	beq.n	800c28a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800c2be:	ea55 0106 	orrs.w	r1, r5, r6
 800c2c2:	bf0c      	ite	eq
 800c2c4:	f04f 0801 	moveq.w	r8, #1
 800c2c8:	f04f 0800 	movne.w	r8, #0
 800c2cc:	d031      	beq.n	800c332 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800c2ce:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800c2d8:	f005 f87d 	bl	80113d6 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800c2dc:	4581      	cmp	r9, r0
 800c2de:	dc2f      	bgt.n	800c340 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800c2e0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800c2e4:	9600      	str	r6, [sp, #0]
 800c2e6:	9501      	str	r5, [sp, #4]
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	4823      	ldr	r0, [pc, #140]	; (800c37c <z_impl_k_mutex_lock+0x110>)
 800c2ee:	f000 fc53 	bl	800cb98 <z_pend_curr>
	if (got_mutex == 0) {
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d0da      	beq.n	800c2ac <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800c2f6:	f04f 0310 	mov.w	r3, #16
 800c2fa:	f3ef 8511 	mrs	r5, BASEPRI
 800c2fe:	f383 8812 	msr	BASEPRI_MAX, r3
 800c302:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800c306:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d01f      	beq.n	800c34c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800c30c:	b1f3      	cbz	r3, 800c34c <z_impl_k_mutex_lock+0xe0>
 800c30e:	6921      	ldr	r1, [r4, #16]
 800c310:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800c314:	f005 f85f 	bl	80113d6 <new_prio_for_inheritance>
 800c318:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800c31a:	4620      	mov	r0, r4
 800c31c:	f005 f866 	bl	80113ec <adjust_owner_prio>
 800c320:	b9b0      	cbnz	r0, 800c350 <z_impl_k_mutex_lock+0xe4>
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	d015      	beq.n	800c354 <z_impl_k_mutex_lock+0xe8>
 800c328:	f04f 0801 	mov.w	r8, #1
 800c32c:	e012      	b.n	800c354 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	e7b1      	b.n	800c296 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800c332:	f387 8811 	msr	BASEPRI, r7
 800c336:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800c33a:	f06f 000f 	mvn.w	r0, #15
 800c33e:	e7b5      	b.n	800c2ac <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800c340:	4601      	mov	r1, r0
 800c342:	4620      	mov	r0, r4
 800c344:	f005 f852 	bl	80113ec <adjust_owner_prio>
 800c348:	4681      	mov	r9, r0
 800c34a:	e7cb      	b.n	800c2e4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800c34c:	6921      	ldr	r1, [r4, #16]
 800c34e:	e7e4      	b.n	800c31a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800c350:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800c354:	f1b8 0f00 	cmp.w	r8, #0
 800c358:	d106      	bne.n	800c368 <z_impl_k_mutex_lock+0xfc>
 800c35a:	f385 8811 	msr	BASEPRI, r5
 800c35e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800c362:	f06f 000a 	mvn.w	r0, #10
 800c366:	e7a1      	b.n	800c2ac <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800c368:	4629      	mov	r1, r5
 800c36a:	4804      	ldr	r0, [pc, #16]	; (800c37c <z_impl_k_mutex_lock+0x110>)
 800c36c:	f000 faa4 	bl	800c8b8 <z_reschedule>
	return -EAGAIN;
 800c370:	f06f 000a 	mvn.w	r0, #10
 800c374:	e79a      	b.n	800c2ac <z_impl_k_mutex_lock+0x40>
 800c376:	bf00      	nop
 800c378:	200016d8 	.word	0x200016d8
 800c37c:	200016fc 	.word	0x200016fc

0800c380 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800c380:	6882      	ldr	r2, [r0, #8]
 800c382:	2a00      	cmp	r2, #0
 800c384:	d034      	beq.n	800c3f0 <z_impl_k_mutex_unlock+0x70>
{
 800c386:	b538      	push	{r3, r4, r5, lr}
 800c388:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800c38a:	4b1c      	ldr	r3, [pc, #112]	; (800c3fc <z_impl_k_mutex_unlock+0x7c>)
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d131      	bne.n	800c3f6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800c392:	7bda      	ldrb	r2, [r3, #15]
 800c394:	3a01      	subs	r2, #1
 800c396:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800c398:	68c3      	ldr	r3, [r0, #12]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d905      	bls.n	800c3aa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800c3a2:	f000 fcaf 	bl	800cd04 <k_sched_unlock>

	return 0;
 800c3a6:	2000      	movs	r0, #0
}
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800c3aa:	f04f 0310 	mov.w	r3, #16
 800c3ae:	f3ef 8511 	mrs	r5, BASEPRI
 800c3b2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c3b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800c3ba:	6901      	ldr	r1, [r0, #16]
 800c3bc:	f005 f816 	bl	80113ec <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f005 fa0b 	bl	80117dc <z_unpend_first_thread>
	mutex->owner = new_owner;
 800c3c6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800c3c8:	b158      	cbz	r0, 800c3e2 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800c3ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800c3d4:	f005 f93b 	bl	801164e <z_ready_thread>
		z_reschedule(&lock, key);
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4809      	ldr	r0, [pc, #36]	; (800c400 <z_impl_k_mutex_unlock+0x80>)
 800c3dc:	f000 fa6c 	bl	800c8b8 <z_reschedule>
 800c3e0:	e7df      	b.n	800c3a2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800c3e6:	f385 8811 	msr	BASEPRI, r5
 800c3ea:	f3bf 8f6f 	isb	sy
 800c3ee:	e7d8      	b.n	800c3a2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800c3f0:	f06f 0015 	mvn.w	r0, #21
}
 800c3f4:	4770      	bx	lr
		return -EPERM;
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3fa:	e7d5      	b.n	800c3a8 <z_impl_k_mutex_unlock+0x28>
 800c3fc:	200016d8 	.word	0x200016d8
 800c400:	200016fc 	.word	0x200016fc

0800c404 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4604      	mov	r4, r0
	__asm__ volatile(
 800c408:	f04f 0310 	mov.w	r3, #16
 800c40c:	f3ef 8511 	mrs	r5, BASEPRI
 800c410:	f383 8812 	msr	BASEPRI_MAX, r3
 800c414:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800c418:	f005 f9e0 	bl	80117dc <z_unpend_first_thread>

	if (thread != NULL) {
 800c41c:	b140      	cbz	r0, 800c430 <z_impl_k_sem_give+0x2c>
 800c41e:	2200      	movs	r2, #0
 800c420:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800c422:	f005 f914 	bl	801164e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800c426:	4629      	mov	r1, r5
 800c428:	4809      	ldr	r0, [pc, #36]	; (800c450 <z_impl_k_sem_give+0x4c>)
 800c42a:	f000 fa45 	bl	800c8b8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800c430:	68a3      	ldr	r3, [r4, #8]
 800c432:	68e2      	ldr	r2, [r4, #12]
 800c434:	4293      	cmp	r3, r2
 800c436:	d008      	beq.n	800c44a <z_impl_k_sem_give+0x46>
 800c438:	2201      	movs	r2, #1
 800c43a:	4413      	add	r3, r2
 800c43c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800c43e:	2102      	movs	r1, #2
 800c440:	f104 0010 	add.w	r0, r4, #16
 800c444:	f005 fb7e 	bl	8011b44 <z_handle_obj_poll_events>
}
 800c448:	e7ed      	b.n	800c426 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800c44a:	2200      	movs	r2, #0
 800c44c:	e7f5      	b.n	800c43a <z_impl_k_sem_give+0x36>
 800c44e:	bf00      	nop
 800c450:	20001700 	.word	0x20001700

0800c454 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800c454:	b510      	push	{r4, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	f04f 0410 	mov.w	r4, #16
 800c45c:	f3ef 8111 	mrs	r1, BASEPRI
 800c460:	f384 8812 	msr	BASEPRI_MAX, r4
 800c464:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800c468:	6884      	ldr	r4, [r0, #8]
 800c46a:	b144      	cbz	r4, 800c47e <z_impl_k_sem_take+0x2a>
		sem->count--;
 800c46c:	3c01      	subs	r4, #1
 800c46e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800c470:	f381 8811 	msr	BASEPRI, r1
 800c474:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800c478:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800c47a:	b002      	add	sp, #8
 800c47c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c47e:	ea53 0402 	orrs.w	r4, r3, r2
 800c482:	d006      	beq.n	800c492 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800c484:	9200      	str	r2, [sp, #0]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	4602      	mov	r2, r0
 800c48a:	4805      	ldr	r0, [pc, #20]	; (800c4a0 <z_impl_k_sem_take+0x4c>)
 800c48c:	f000 fb84 	bl	800cb98 <z_pend_curr>
	return ret;
 800c490:	e7f3      	b.n	800c47a <z_impl_k_sem_take+0x26>
 800c492:	f381 8811 	msr	BASEPRI, r1
 800c496:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800c49a:	f06f 000f 	mvn.w	r0, #15
 800c49e:	e7ec      	b.n	800c47a <z_impl_k_sem_take+0x26>
 800c4a0:	20001700 	.word	0x20001700

0800c4a4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4604      	mov	r4, r0
	__asm__ volatile(
 800c4a8:	f04f 0310 	mov.w	r3, #16
 800c4ac:	f3ef 8511 	mrs	r5, BASEPRI
 800c4b0:	f383 8812 	msr	BASEPRI_MAX, r3
 800c4b4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800c4b8:	e004      	b.n	800c4c4 <z_impl_k_sem_reset+0x20>
 800c4ba:	f06f 020a 	mvn.w	r2, #10
 800c4be:	67c2      	str	r2, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800c4c0:	f005 f8c5 	bl	801164e <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f005 f989 	bl	80117dc <z_unpend_first_thread>
		if (thread == NULL) {
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d1f5      	bne.n	800c4ba <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800c4d2:	2102      	movs	r1, #2
 800c4d4:	f104 0010 	add.w	r0, r4, #16
 800c4d8:	f005 fb34 	bl	8011b44 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4802      	ldr	r0, [pc, #8]	; (800c4e8 <z_impl_k_sem_reset+0x44>)
 800c4e0:	f000 f9ea 	bl	800c8b8 <z_reschedule>
}
 800c4e4:	bd38      	pop	{r3, r4, r5, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20001700 	.word	0x20001700

0800c4ec <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800c4f0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c4f2:	f013 0f02 	tst.w	r3, #2
 800c4f6:	d15c      	bne.n	800c5b2 <submit_to_queue_locked+0xc6>
 800c4f8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800c4fa:	f013 0f04 	tst.w	r3, #4
 800c4fe:	d15d      	bne.n	800c5bc <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800c500:	680b      	ldr	r3, [r1, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d038      	beq.n	800c578 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800c506:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800c508:	f013 0f01 	tst.w	r3, #1
 800c50c:	d037      	beq.n	800c57e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	602b      	str	r3, [r5, #0]
			ret = 2;
 800c512:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800c514:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800c516:	2e00      	cmp	r6, #0
 800c518:	d03f      	beq.n	800c59a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800c51a:	4b29      	ldr	r3, [pc, #164]	; (800c5c0 <submit_to_queue_locked+0xd4>)
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	42b3      	cmp	r3, r6
 800c520:	d02f      	beq.n	800c582 <submit_to_queue_locked+0x96>
 800c522:	2300      	movs	r3, #0
 800c524:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800c526:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800c52a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800c52e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800c532:	f013 0f01 	tst.w	r3, #1
 800c536:	d033      	beq.n	800c5a0 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800c538:	b101      	cbz	r1, 800c53c <submit_to_queue_locked+0x50>
 800c53a:	b3a2      	cbz	r2, 800c5a6 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800c53c:	b100      	cbz	r0, 800c540 <submit_to_queue_locked+0x54>
 800c53e:	b3a9      	cbz	r1, 800c5ac <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800c540:	2300      	movs	r3, #0
 800c542:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800c544:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800c548:	b313      	cbz	r3, 800c590 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800c54a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c54c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800c550:	b12e      	cbz	r6, 800c55e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800c552:	2200      	movs	r2, #0
 800c554:	4611      	mov	r1, r2
 800c556:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800c55a:	f005 f9a7 	bl	80118ac <z_sched_wake>
		ret = 1;
 800c55e:	2001      	movs	r0, #1

		if (rc < 0) {
 800c560:	2800      	cmp	r0, #0
 800c562:	db06      	blt.n	800c572 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800c564:	68e3      	ldr	r3, [r4, #12]
 800c566:	f043 0304 	orr.w	r3, r3, #4
 800c56a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	60a3      	str	r3, [r4, #8]
 800c570:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800c572:	2800      	cmp	r0, #0
 800c574:	dc21      	bgt.n	800c5ba <submit_to_queue_locked+0xce>
 800c576:	e01e      	b.n	800c5b6 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800c578:	6883      	ldr	r3, [r0, #8]
 800c57a:	600b      	str	r3, [r1, #0]
 800c57c:	e7c3      	b.n	800c506 <submit_to_queue_locked+0x1a>
		ret = 1;
 800c57e:	2701      	movs	r7, #1
 800c580:	e7c8      	b.n	800c514 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800c582:	f004 fee0 	bl	8011346 <k_is_in_isr>
 800c586:	b908      	cbnz	r0, 800c58c <submit_to_queue_locked+0xa0>
 800c588:	2301      	movs	r3, #1
 800c58a:	e7cb      	b.n	800c524 <submit_to_queue_locked+0x38>
 800c58c:	2300      	movs	r3, #0
 800c58e:	e7c9      	b.n	800c524 <submit_to_queue_locked+0x38>
 800c590:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800c594:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800c598:	e7da      	b.n	800c550 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800c59a:	f06f 0015 	mvn.w	r0, #21
 800c59e:	e7df      	b.n	800c560 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800c5a0:	f06f 0012 	mvn.w	r0, #18
 800c5a4:	e7dc      	b.n	800c560 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800c5a6:	f06f 000f 	mvn.w	r0, #15
 800c5aa:	e7d9      	b.n	800c560 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800c5ac:	f06f 000f 	mvn.w	r0, #15
 800c5b0:	e7d6      	b.n	800c560 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800c5b2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800c5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e7fa      	b.n	800c5b6 <submit_to_queue_locked+0xca>
 800c5c0:	200016d8 	.word	0x200016d8

0800c5c4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800c5c4:	b508      	push	{r3, lr}
 800c5c6:	4684      	mov	ip, r0
 800c5c8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800c5ca:	ea53 0102 	orrs.w	r1, r3, r2
 800c5ce:	d00c      	beq.n	800c5ea <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 800c5d0:	68c1      	ldr	r1, [r0, #12]
 800c5d2:	f041 0108 	orr.w	r1, r1, #8
 800c5d6:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 800c5d8:	f8dc 1000 	ldr.w	r1, [ip]
 800c5dc:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800c5de:	4905      	ldr	r1, [pc, #20]	; (800c5f4 <schedule_for_queue_locked+0x30>)
 800c5e0:	3010      	adds	r0, #16
 800c5e2:	f000 fd69 	bl	800d0b8 <z_add_timeout>

	return ret;
 800c5e6:	2001      	movs	r0, #1
}
 800c5e8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 800c5ea:	4661      	mov	r1, ip
 800c5ec:	f7ff ff7e 	bl	800c4ec <submit_to_queue_locked>
 800c5f0:	e7fa      	b.n	800c5e8 <schedule_for_queue_locked+0x24>
 800c5f2:	bf00      	nop
 800c5f4:	08011437 	.word	0x08011437

0800c5f8 <finalize_cancel_locked>:
{
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800c5fc:	68c3      	ldr	r3, [r0, #12]
 800c5fe:	f023 0302 	bic.w	r3, r3, #2
 800c602:	60c3      	str	r3, [r0, #12]
	return list->head;
 800c604:	4b1a      	ldr	r3, [pc, #104]	; (800c670 <finalize_cancel_locked+0x78>)
 800c606:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800c608:	b1fb      	cbz	r3, 800c64a <finalize_cancel_locked+0x52>
 800c60a:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c60c:	b103      	cbz	r3, 800c610 <finalize_cancel_locked+0x18>
	return node->next;
 800c60e:	681c      	ldr	r4, [r3, #0]
 800c610:	2600      	movs	r6, #0
 800c612:	e01f      	b.n	800c654 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800c614:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800c616:	b166      	cbz	r6, 800c632 <finalize_cancel_locked+0x3a>
	return node->next;
 800c618:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800c61a:	6031      	str	r1, [r6, #0]
	return list->tail;
 800c61c:	4914      	ldr	r1, [pc, #80]	; (800c670 <finalize_cancel_locked+0x78>)
 800c61e:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c620:	428b      	cmp	r3, r1
 800c622:	d00f      	beq.n	800c644 <finalize_cancel_locked+0x4c>
	parent->next = child;
 800c624:	2100      	movs	r1, #0
 800c626:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800c628:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800c62c:	f7ff feea 	bl	800c404 <z_impl_k_sem_give>
}
 800c630:	e015      	b.n	800c65e <finalize_cancel_locked+0x66>
	return node->next;
 800c632:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800c634:	490e      	ldr	r1, [pc, #56]	; (800c670 <finalize_cancel_locked+0x78>)
 800c636:	6008      	str	r0, [r1, #0]
	return list->tail;
 800c638:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c63a:	428b      	cmp	r3, r1
 800c63c:	d1f2      	bne.n	800c624 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800c63e:	490c      	ldr	r1, [pc, #48]	; (800c670 <finalize_cancel_locked+0x78>)
 800c640:	6048      	str	r0, [r1, #4]
}
 800c642:	e7ef      	b.n	800c624 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800c644:	490a      	ldr	r1, [pc, #40]	; (800c670 <finalize_cancel_locked+0x78>)
 800c646:	604e      	str	r6, [r1, #4]
}
 800c648:	e7ec      	b.n	800c624 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800c64a:	461c      	mov	r4, r3
 800c64c:	e7e0      	b.n	800c610 <finalize_cancel_locked+0x18>
 800c64e:	4622      	mov	r2, r4
 800c650:	4623      	mov	r3, r4
 800c652:	4614      	mov	r4, r2
 800c654:	b153      	cbz	r3, 800c66c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	42aa      	cmp	r2, r5
 800c65a:	d0db      	beq.n	800c614 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800c65c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800c65e:	2c00      	cmp	r4, #0
 800c660:	d0f5      	beq.n	800c64e <finalize_cancel_locked+0x56>
 800c662:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c664:	2c00      	cmp	r4, #0
 800c666:	d0f3      	beq.n	800c650 <finalize_cancel_locked+0x58>
	return node->next;
 800c668:	6822      	ldr	r2, [r4, #0]
 800c66a:	e7f1      	b.n	800c650 <finalize_cancel_locked+0x58>
}
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	bf00      	nop
 800c670:	20001708 	.word	0x20001708

0800c674 <work_queue_main>:
{
 800c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c676:	b085      	sub	sp, #20
 800c678:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800c67a:	e016      	b.n	800c6aa <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800c67c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800c680:	f023 0204 	bic.w	r2, r3, #4
 800c684:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800c688:	f013 0f04 	tst.w	r3, #4
 800c68c:	d159      	bne.n	800c742 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800c68e:	2300      	movs	r3, #0
 800c690:	9302      	str	r3, [sp, #8]
 800c692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c69a:	e9cd 2300 	strd	r2, r3, [sp]
 800c69e:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	482e      	ldr	r0, [pc, #184]	; (800c760 <work_queue_main+0xec>)
 800c6a6:	f000 fc91 	bl	800cfcc <z_sched_wait>
 800c6aa:	f04f 0310 	mov.w	r3, #16
 800c6ae:	f3ef 8611 	mrs	r6, BASEPRI
 800c6b2:	f383 8812 	msr	BASEPRI_MAX, r3
 800c6b6:	f3bf 8f6f 	isb	sy
	return list->head;
 800c6ba:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	d0dc      	beq.n	800c67c <work_queue_main+0x8>
	return node->next;
 800c6c2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800c6c4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800c6c8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800c6cc:	4294      	cmp	r4, r2
 800c6ce:	d035      	beq.n	800c73c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800c6d0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c6d4:	f043 0302 	orr.w	r3, r3, #2
 800c6d8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800c6dc:	68e3      	ldr	r3, [r4, #12]
 800c6de:	f043 0301 	orr.w	r3, r3, #1
 800c6e2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800c6e4:	f023 0304 	bic.w	r3, r3, #4
 800c6e8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800c6ea:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800c6ec:	2c00      	cmp	r4, #0
 800c6ee:	d0ce      	beq.n	800c68e <work_queue_main+0x1a>
	__asm__ volatile(
 800c6f0:	f386 8811 	msr	BASEPRI, r6
 800c6f4:	f3bf 8f6f 	isb	sy
		handler(work);
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4798      	blx	r3
	__asm__ volatile(
 800c6fc:	f04f 0310 	mov.w	r3, #16
 800c700:	f3ef 8611 	mrs	r6, BASEPRI
 800c704:	f383 8812 	msr	BASEPRI_MAX, r3
 800c708:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800c70c:	68e3      	ldr	r3, [r4, #12]
 800c70e:	f023 0301 	bic.w	r3, r3, #1
 800c712:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800c714:	f013 0f02 	tst.w	r3, #2
 800c718:	d11e      	bne.n	800c758 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800c71a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c71e:	f023 0302 	bic.w	r3, r3, #2
 800c722:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800c726:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800c72a:	f386 8811 	msr	BASEPRI, r6
 800c72e:	f3bf 8f6f 	isb	sy
		if (yield) {
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1b9      	bne.n	800c6aa <work_queue_main+0x36>
	z_impl_k_yield();
 800c736:	f000 fb63 	bl	800ce00 <z_impl_k_yield>
}
 800c73a:	e7b6      	b.n	800c6aa <work_queue_main+0x36>
	list->tail = node;
 800c73c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800c740:	e7c6      	b.n	800c6d0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800c742:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800c746:	2200      	movs	r2, #0
 800c748:	2101      	movs	r1, #1
 800c74a:	4638      	mov	r0, r7
 800c74c:	f005 f8ae 	bl	80118ac <z_sched_wake>
 800c750:	2800      	cmp	r0, #0
 800c752:	d1f8      	bne.n	800c746 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	e7c9      	b.n	800c6ec <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800c758:	4620      	mov	r0, r4
 800c75a:	f7ff ff4d 	bl	800c5f8 <finalize_cancel_locked>
 800c75e:	e7dc      	b.n	800c71a <work_queue_main+0xa6>
 800c760:	20001704 	.word	0x20001704

0800c764 <k_work_submit>:
{
 800c764:	b508      	push	{r3, lr}
 800c766:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <k_work_submit+0xc>)
 800c76a:	f004 fe8e 	bl	801148a <k_work_submit_to_queue>
}
 800c76e:	bd08      	pop	{r3, pc}
 800c770:	20000e68 	.word	0x20000e68

0800c774 <k_work_queue_start>:
{
 800c774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c776:	b089      	sub	sp, #36	; 0x24
 800c778:	4604      	mov	r4, r0
 800c77a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800c77c:	2000      	movs	r0, #0
 800c77e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800c782:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800c786:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800c78a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800c78e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800c792:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800c796:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800c79a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
 800c79e:	b1fd      	cbz	r5, 800c7e0 <k_work_queue_start+0x6c>
 800c7a0:	7928      	ldrb	r0, [r5, #4]
 800c7a2:	b9f8      	cbnz	r0, 800c7e4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800c7a4:	2001      	movs	r0, #1
	*flagp = flags;
 800c7a6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800c7aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c7ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c7b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	9004      	str	r0, [sp, #16]
 800c7ba:	9303      	str	r3, [sp, #12]
 800c7bc:	9002      	str	r0, [sp, #8]
 800c7be:	9001      	str	r0, [sp, #4]
 800c7c0:	9400      	str	r4, [sp, #0]
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <k_work_queue_start+0x78>)
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f004 fdd8 	bl	801137a <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800c7ca:	b125      	cbz	r5, 800c7d6 <k_work_queue_start+0x62>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	b111      	cbz	r1, 800c7d6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f004 fdbe 	bl	8011352 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f004 fdc0 	bl	801135c <z_impl_k_thread_start>
}
 800c7dc:	b009      	add	sp, #36	; 0x24
 800c7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800c7e0:	2001      	movs	r0, #1
 800c7e2:	e7e0      	b.n	800c7a6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800c7e4:	f240 1001 	movw	r0, #257	; 0x101
 800c7e8:	e7dd      	b.n	800c7a6 <k_work_queue_start+0x32>
 800c7ea:	bf00      	nop
 800c7ec:	0800c675 	.word	0x0800c675

0800c7f0 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 800c7f0:	b508      	push	{r3, lr}
 800c7f2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
 800c7f4:	4801      	ldr	r0, [pc, #4]	; (800c7fc <k_work_schedule+0xc>)
 800c7f6:	f004 fe74 	bl	80114e2 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
 800c7fa:	bd08      	pop	{r3, pc}
 800c7fc:	20000e68 	.word	0x20000e68

0800c800 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800c800:	b508      	push	{r3, lr}
 800c802:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 800c804:	4801      	ldr	r0, [pc, #4]	; (800c80c <k_work_reschedule+0xc>)
 800c806:	f004 fe86 	bl	8011516 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 800c80a:	bd08      	pop	{r3, pc}
 800c80c:	20000e68 	.word	0x20000e68

0800c810 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800c810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c814:	bf08      	it	eq
 800c816:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c81a:	d100      	bne.n	800c81e <add_thread_timeout+0xe>
 800c81c:	4770      	bx	lr
{
 800c81e:	b508      	push	{r3, lr}
 800c820:	4902      	ldr	r1, [pc, #8]	; (800c82c <add_thread_timeout+0x1c>)
 800c822:	3018      	adds	r0, #24
 800c824:	f000 fc48 	bl	800d0b8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800c828:	bd08      	pop	{r3, pc}
 800c82a:	bf00      	nop
 800c82c:	08011687 	.word	0x08011687

0800c830 <z_reset_time_slice>:
{
 800c830:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800c832:	4b08      	ldr	r3, [pc, #32]	; (800c854 <z_reset_time_slice+0x24>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	b903      	cbnz	r3, 800c83a <z_reset_time_slice+0xa>
}
 800c838:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800c83a:	f7fe fc7d 	bl	800b138 <sys_clock_elapsed>
 800c83e:	4603      	mov	r3, r0
 800c840:	4a04      	ldr	r2, [pc, #16]	; (800c854 <z_reset_time_slice+0x24>)
 800c842:	6810      	ldr	r0, [r2, #0]
 800c844:	4403      	add	r3, r0
 800c846:	4a04      	ldr	r2, [pc, #16]	; (800c858 <z_reset_time_slice+0x28>)
 800c848:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800c84a:	2100      	movs	r1, #0
 800c84c:	f005 f89a 	bl	8011984 <z_set_timeout_expiry>
}
 800c850:	e7f2      	b.n	800c838 <z_reset_time_slice+0x8>
 800c852:	bf00      	nop
 800c854:	2000171c 	.word	0x2000171c
 800c858:	200016d8 	.word	0x200016d8

0800c85c <k_sched_time_slice_set>:
{
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	4604      	mov	r4, r0
 800c860:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800c862:	2300      	movs	r3, #0
	__asm__ volatile(
 800c864:	f04f 0210 	mov.w	r2, #16
 800c868:	f3ef 8611 	mrs	r6, BASEPRI
 800c86c:	f382 8812 	msr	BASEPRI_MAX, r2
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	e00c      	b.n	800c890 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800c876:	2b02      	cmp	r3, #2
 800c878:	bfb8      	it	lt
 800c87a:	2302      	movlt	r3, #2
 800c87c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800c87e:	4b0b      	ldr	r3, [pc, #44]	; (800c8ac <k_sched_time_slice_set+0x50>)
 800c880:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800c882:	f7ff ffd5 	bl	800c830 <z_reset_time_slice>
	__asm__ volatile(
 800c886:	f386 8811 	msr	BASEPRI, r6
 800c88a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c88e:	2301      	movs	r3, #1
 800c890:	b953      	cbnz	r3, 800c8a8 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800c892:	4b07      	ldr	r3, [pc, #28]	; (800c8b0 <k_sched_time_slice_set+0x54>)
 800c894:	2200      	movs	r2, #0
 800c896:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800c898:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800c89c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800c89e:	4a05      	ldr	r2, [pc, #20]	; (800c8b4 <k_sched_time_slice_set+0x58>)
 800c8a0:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800c8a2:	2c00      	cmp	r4, #0
 800c8a4:	dce7      	bgt.n	800c876 <k_sched_time_slice_set+0x1a>
 800c8a6:	e7ea      	b.n	800c87e <k_sched_time_slice_set+0x22>
}
 800c8a8:	bd70      	pop	{r4, r5, r6, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20001718 	.word	0x20001718
 800c8b0:	200016d8 	.word	0x200016d8
 800c8b4:	2000171c 	.word	0x2000171c

0800c8b8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800c8b8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800c8ba:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800c8bc:	b921      	cbnz	r1, 800c8c8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8be:	f3ef 8305 	mrs	r3, IPSR
 800c8c2:	b913      	cbnz	r3, 800c8ca <z_reschedule+0x12>
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	e000      	b.n	800c8ca <z_reschedule+0x12>
 800c8c8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800c8ca:	f011 0f01 	tst.w	r1, #1
 800c8ce:	d007      	beq.n	800c8e0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800c8d0:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <z_reschedule+0x34>)
 800c8d2:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800c8d4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d002      	beq.n	800c8e0 <z_reschedule+0x28>
	ret = arch_swap(key);
 800c8da:	f7f8 f9a1 	bl	8004c20 <arch_swap>
		z_swap(lock, key);
 800c8de:	e003      	b.n	800c8e8 <z_reschedule+0x30>
 800c8e0:	f380 8811 	msr	BASEPRI, r0
 800c8e4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800c8e8:	bd08      	pop	{r3, pc}
 800c8ea:	bf00      	nop
 800c8ec:	200016d8 	.word	0x200016d8

0800c8f0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800c8f0:	2300      	movs	r3, #0
	__asm__ volatile(
 800c8f2:	f04f 0210 	mov.w	r2, #16
 800c8f6:	f3ef 8111 	mrs	r1, BASEPRI
 800c8fa:	f382 8812 	msr	BASEPRI_MAX, r2
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	e009      	b.n	800c918 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800c904:	4b06      	ldr	r3, [pc, #24]	; (800c920 <k_sched_lock+0x30>)
 800c906:	689a      	ldr	r2, [r3, #8]
 800c908:	7bd3      	ldrb	r3, [r2, #15]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800c90e:	f381 8811 	msr	BASEPRI, r1
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	2301      	movs	r3, #1
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d0f3      	beq.n	800c904 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	200016d8 	.word	0x200016d8

0800c924 <update_cache>:
{
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800c928:	480f      	ldr	r0, [pc, #60]	; (800c968 <update_cache+0x44>)
 800c92a:	f004 fe89 	bl	8011640 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800c92e:	4605      	mov	r5, r0
 800c930:	b170      	cbz	r0, 800c950 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800c932:	b984      	cbnz	r4, 800c956 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800c934:	4b0d      	ldr	r3, [pc, #52]	; (800c96c <update_cache+0x48>)
 800c936:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800c938:	7b5a      	ldrb	r2, [r3, #13]
 800c93a:	f012 0f1f 	tst.w	r2, #31
 800c93e:	d10a      	bne.n	800c956 <update_cache+0x32>
	return node->next != NULL;
 800c940:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800c942:	b942      	cbnz	r2, 800c956 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800c944:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800c946:	2a7f      	cmp	r2, #127	; 0x7f
 800c948:	d905      	bls.n	800c956 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800c94a:	4a08      	ldr	r2, [pc, #32]	; (800c96c <update_cache+0x48>)
 800c94c:	6193      	str	r3, [r2, #24]
 800c94e:	e00a      	b.n	800c966 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800c950:	4b06      	ldr	r3, [pc, #24]	; (800c96c <update_cache+0x48>)
 800c952:	68dd      	ldr	r5, [r3, #12]
 800c954:	e7ed      	b.n	800c932 <update_cache+0xe>
		if (thread != _current) {
 800c956:	4b05      	ldr	r3, [pc, #20]	; (800c96c <update_cache+0x48>)
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	42ab      	cmp	r3, r5
 800c95c:	d001      	beq.n	800c962 <update_cache+0x3e>
			z_reset_time_slice();
 800c95e:	f7ff ff67 	bl	800c830 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800c962:	4b02      	ldr	r3, [pc, #8]	; (800c96c <update_cache+0x48>)
 800c964:	619d      	str	r5, [r3, #24]
}
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	200016f4 	.word	0x200016f4
 800c96c:	200016d8 	.word	0x200016d8

0800c970 <move_thread_to_end_of_prio_q>:
{
 800c970:	b538      	push	{r3, r4, r5, lr}
 800c972:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800c974:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800c976:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	db28      	blt.n	800c9d0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800c97e:	7b6b      	ldrb	r3, [r5, #13]
 800c980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c984:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800c986:	4b1a      	ldr	r3, [pc, #104]	; (800c9f0 <move_thread_to_end_of_prio_q+0x80>)
 800c988:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c98c:	429c      	cmp	r4, r3
 800c98e:	d02d      	beq.n	800c9ec <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c990:	b16c      	cbz	r4, 800c9ae <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	f004 fde8 	bl	801156a <z_sched_prio_cmp>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	dc20      	bgt.n	800c9e0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c99e:	b134      	cbz	r4, 800c9ae <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800c9a0:	4b13      	ldr	r3, [pc, #76]	; (800c9f0 <move_thread_to_end_of_prio_q+0x80>)
 800c9a2:	6a1b      	ldr	r3, [r3, #32]
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d002      	beq.n	800c9ae <move_thread_to_end_of_prio_q+0x3e>
 800c9a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d1f0      	bne.n	800c990 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800c9ae:	4b10      	ldr	r3, [pc, #64]	; (800c9f0 <move_thread_to_end_of_prio_q+0x80>)
 800c9b0:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800c9b2:	f103 011c 	add.w	r1, r3, #28
 800c9b6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800c9b8:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800c9ba:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800c9bc:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <move_thread_to_end_of_prio_q+0x80>)
 800c9c0:	6898      	ldr	r0, [r3, #8]
 800c9c2:	42a8      	cmp	r0, r5
 800c9c4:	bf14      	ite	ne
 800c9c6:	2000      	movne	r0, #0
 800c9c8:	2001      	moveq	r0, #1
 800c9ca:	f7ff ffab 	bl	800c924 <update_cache>
}
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800c9d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c9d4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	4806      	ldr	r0, [pc, #24]	; (800c9f4 <move_thread_to_end_of_prio_q+0x84>)
 800c9da:	f004 fe05 	bl	80115e8 <z_priq_dumb_remove>
}
 800c9de:	e7ce      	b.n	800c97e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800c9e0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800c9e2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800c9e4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800c9e6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800c9e8:	6065      	str	r5, [r4, #4]
}
 800c9ea:	e7e8      	b.n	800c9be <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800c9ec:	2400      	movs	r4, #0
 800c9ee:	e7cf      	b.n	800c990 <move_thread_to_end_of_prio_q+0x20>
 800c9f0:	200016d8 	.word	0x200016d8
 800c9f4:	200016f4 	.word	0x200016f4

0800c9f8 <z_time_slice>:
{
 800c9f8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800c9fa:	f04f 0310 	mov.w	r3, #16
 800c9fe:	f3ef 8411 	mrs	r4, BASEPRI
 800ca02:	f383 8812 	msr	BASEPRI_MAX, r3
 800ca06:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800ca0a:	4b21      	ldr	r3, [pc, #132]	; (800ca90 <z_time_slice+0x98>)
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	4a21      	ldr	r2, [pc, #132]	; (800ca94 <z_time_slice+0x9c>)
 800ca10:	6812      	ldr	r2, [r2, #0]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d017      	beq.n	800ca46 <z_time_slice+0x4e>
	pending_current = NULL;
 800ca16:	4a1f      	ldr	r2, [pc, #124]	; (800ca94 <z_time_slice+0x9c>)
 800ca18:	2100      	movs	r1, #0
 800ca1a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800ca1c:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <z_time_slice+0xa0>)
 800ca1e:	6812      	ldr	r2, [r2, #0]
 800ca20:	b372      	cbz	r2, 800ca80 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800ca22:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800ca24:	2a7f      	cmp	r2, #127	; 0x7f
 800ca26:	d815      	bhi.n	800ca54 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800ca28:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800ca2a:	f012 0f1f 	tst.w	r2, #31
 800ca2e:	d11b      	bne.n	800ca68 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800ca30:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800ca34:	4a19      	ldr	r2, [pc, #100]	; (800ca9c <z_time_slice+0xa4>)
 800ca36:	6812      	ldr	r2, [r2, #0]
 800ca38:	4291      	cmp	r1, r2
 800ca3a:	db17      	blt.n	800ca6c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800ca3c:	4a18      	ldr	r2, [pc, #96]	; (800caa0 <z_time_slice+0xa8>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d016      	beq.n	800ca70 <z_time_slice+0x78>
 800ca42:	2201      	movs	r2, #1
 800ca44:	e007      	b.n	800ca56 <z_time_slice+0x5e>
		z_reset_time_slice();
 800ca46:	f7ff fef3 	bl	800c830 <z_reset_time_slice>
	__asm__ volatile(
 800ca4a:	f384 8811 	msr	BASEPRI, r4
 800ca4e:	f3bf 8f6f 	isb	sy
		return;
 800ca52:	e01c      	b.n	800ca8e <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800ca54:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800ca56:	b19a      	cbz	r2, 800ca80 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800ca58:	4a0d      	ldr	r2, [pc, #52]	; (800ca90 <z_time_slice+0x98>)
 800ca5a:	6912      	ldr	r2, [r2, #16]
 800ca5c:	4282      	cmp	r2, r0
 800ca5e:	dd09      	ble.n	800ca74 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800ca60:	1a10      	subs	r0, r2, r0
 800ca62:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <z_time_slice+0x98>)
 800ca64:	6118      	str	r0, [r3, #16]
 800ca66:	e00e      	b.n	800ca86 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800ca68:	2200      	movs	r2, #0
 800ca6a:	e7f4      	b.n	800ca56 <z_time_slice+0x5e>
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	e7f2      	b.n	800ca56 <z_time_slice+0x5e>
 800ca70:	2200      	movs	r2, #0
 800ca72:	e7f0      	b.n	800ca56 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff ff7b 	bl	800c970 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800ca7a:	f7ff fed9 	bl	800c830 <z_reset_time_slice>
 800ca7e:	e002      	b.n	800ca86 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800ca80:	4b03      	ldr	r3, [pc, #12]	; (800ca90 <z_time_slice+0x98>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	611a      	str	r2, [r3, #16]
 800ca86:	f384 8811 	msr	BASEPRI, r4
 800ca8a:	f3bf 8f6f 	isb	sy
}
 800ca8e:	bd10      	pop	{r4, pc}
 800ca90:	200016d8 	.word	0x200016d8
 800ca94:	20001710 	.word	0x20001710
 800ca98:	2000171c 	.word	0x2000171c
 800ca9c:	20001718 	.word	0x20001718
 800caa0:	20000d60 	.word	0x20000d60

0800caa4 <ready_thread>:
{
 800caa4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800caa6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800caa8:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800caac:	2a00      	cmp	r2, #0
 800caae:	db2d      	blt.n	800cb0c <ready_thread+0x68>
 800cab0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800cab2:	f013 0f1f 	tst.w	r3, #31
 800cab6:	d105      	bne.n	800cac4 <ready_thread+0x20>
	return node->next != NULL;
 800cab8:	6982      	ldr	r2, [r0, #24]
 800caba:	b10a      	cbz	r2, 800cac0 <ready_thread+0x1c>
 800cabc:	2200      	movs	r2, #0
 800cabe:	e002      	b.n	800cac6 <ready_thread+0x22>
 800cac0:	2201      	movs	r2, #1
 800cac2:	e000      	b.n	800cac6 <ready_thread+0x22>
 800cac4:	2200      	movs	r2, #0
 800cac6:	b30a      	cbz	r2, 800cb0c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800cac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cacc:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800cace:	4b14      	ldr	r3, [pc, #80]	; (800cb20 <ready_thread+0x7c>)
 800cad0:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cad4:	429d      	cmp	r5, r3
 800cad6:	d020      	beq.n	800cb1a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cad8:	b16d      	cbz	r5, 800caf6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800cada:	4629      	mov	r1, r5
 800cadc:	4620      	mov	r0, r4
 800cade:	f004 fd44 	bl	801156a <z_sched_prio_cmp>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	dc13      	bgt.n	800cb0e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800cae6:	b135      	cbz	r5, 800caf6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800cae8:	4b0d      	ldr	r3, [pc, #52]	; (800cb20 <ready_thread+0x7c>)
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	429d      	cmp	r5, r3
 800caee:	d002      	beq.n	800caf6 <ready_thread+0x52>
 800caf0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800caf2:	2d00      	cmp	r5, #0
 800caf4:	d1f0      	bne.n	800cad8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800caf6:	4b0a      	ldr	r3, [pc, #40]	; (800cb20 <ready_thread+0x7c>)
 800caf8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800cafa:	f103 011c 	add.w	r1, r3, #28
 800cafe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800cb00:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800cb02:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800cb04:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800cb06:	2000      	movs	r0, #0
 800cb08:	f7ff ff0c 	bl	800c924 <update_cache>
}
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800cb0e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800cb10:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800cb12:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800cb14:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800cb16:	606c      	str	r4, [r5, #4]
}
 800cb18:	e7f5      	b.n	800cb06 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cb1a:	2500      	movs	r5, #0
 800cb1c:	e7dc      	b.n	800cad8 <ready_thread+0x34>
 800cb1e:	bf00      	nop
 800cb20:	200016d8 	.word	0x200016d8

0800cb24 <z_sched_start>:
{
 800cb24:	b510      	push	{r4, lr}
	__asm__ volatile(
 800cb26:	f04f 0310 	mov.w	r3, #16
 800cb2a:	f3ef 8411 	mrs	r4, BASEPRI
 800cb2e:	f383 8812 	msr	BASEPRI_MAX, r3
 800cb32:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800cb36:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800cb38:	f013 0f04 	tst.w	r3, #4
 800cb3c:	d104      	bne.n	800cb48 <z_sched_start+0x24>
	__asm__ volatile(
 800cb3e:	f384 8811 	msr	BASEPRI, r4
 800cb42:	f3bf 8f6f 	isb	sy
}
 800cb46:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800cb48:	f023 0304 	bic.w	r3, r3, #4
 800cb4c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800cb4e:	f7ff ffa9 	bl	800caa4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800cb52:	4621      	mov	r1, r4
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <z_sched_start+0x38>)
 800cb56:	f7ff feaf 	bl	800c8b8 <z_reschedule>
 800cb5a:	e7f4      	b.n	800cb46 <z_sched_start+0x22>
 800cb5c:	20001714 	.word	0x20001714

0800cb60 <unready_thread>:
{
 800cb60:	b510      	push	{r4, lr}
 800cb62:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800cb64:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800cb66:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	db08      	blt.n	800cb80 <unready_thread+0x20>
	update_cache(thread == _current);
 800cb6e:	4b08      	ldr	r3, [pc, #32]	; (800cb90 <unready_thread+0x30>)
 800cb70:	6898      	ldr	r0, [r3, #8]
 800cb72:	42a0      	cmp	r0, r4
 800cb74:	bf14      	ite	ne
 800cb76:	2000      	movne	r0, #0
 800cb78:	2001      	moveq	r0, #1
 800cb7a:	f7ff fed3 	bl	800c924 <update_cache>
}
 800cb7e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cb80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb84:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800cb86:	4601      	mov	r1, r0
 800cb88:	4802      	ldr	r0, [pc, #8]	; (800cb94 <unready_thread+0x34>)
 800cb8a:	f004 fd2d 	bl	80115e8 <z_priq_dumb_remove>
}
 800cb8e:	e7ee      	b.n	800cb6e <unready_thread+0xe>
 800cb90:	200016d8 	.word	0x200016d8
 800cb94:	200016f4 	.word	0x200016f4

0800cb98 <z_pend_curr>:
{
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	4611      	mov	r1, r2
	pending_current = _current;
 800cb9e:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <z_pend_curr+0x20>)
 800cba0:	6898      	ldr	r0, [r3, #8]
 800cba2:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <z_pend_curr+0x24>)
 800cba4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800cba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbaa:	f004 fdce 	bl	801174a <pend>
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f7f8 f836 	bl	8004c20 <arch_swap>
}
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200016d8 	.word	0x200016d8
 800cbbc:	20001710 	.word	0x20001710

0800cbc0 <z_set_prio>:
{
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800cbc8:	2300      	movs	r3, #0
	__asm__ volatile(
 800cbca:	f04f 0210 	mov.w	r2, #16
 800cbce:	f3ef 8811 	mrs	r8, BASEPRI
 800cbd2:	f382 8812 	msr	BASEPRI_MAX, r2
 800cbd6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800cbda:	461f      	mov	r7, r3
 800cbdc:	e008      	b.n	800cbf0 <z_set_prio+0x30>
		if (need_sched) {
 800cbde:	f012 0701 	ands.w	r7, r2, #1
 800cbe2:	d111      	bne.n	800cc08 <z_set_prio+0x48>
			thread->base.prio = prio;
 800cbe4:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800cbe6:	f388 8811 	msr	BASEPRI, r8
 800cbea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cbee:	2301      	movs	r3, #1
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d13d      	bne.n	800cc72 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800cbf6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800cbf8:	f013 0f1f 	tst.w	r3, #31
 800cbfc:	d1ef      	bne.n	800cbde <z_set_prio+0x1e>
	return node->next != NULL;
 800cbfe:	69a1      	ldr	r1, [r4, #24]
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d1ec      	bne.n	800cbde <z_set_prio+0x1e>
 800cc04:	2201      	movs	r2, #1
 800cc06:	e7ea      	b.n	800cbde <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800cc0e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800cc78 <z_set_prio+0xb8>
 800cc12:	4621      	mov	r1, r4
 800cc14:	4648      	mov	r0, r9
 800cc16:	f004 fce7 	bl	80115e8 <z_priq_dumb_remove>
				thread->base.prio = prio;
 800cc1a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800cc1c:	7b63      	ldrb	r3, [r4, #13]
 800cc1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc22:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800cc24:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cc28:	454d      	cmp	r5, r9
 800cc2a:	d020      	beq.n	800cc6e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cc2c:	b16d      	cbz	r5, 800cc4a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4620      	mov	r0, r4
 800cc32:	f004 fc9a 	bl	801156a <z_sched_prio_cmp>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	dc13      	bgt.n	800cc62 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800cc3a:	b135      	cbz	r5, 800cc4a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <z_set_prio+0xbc>)
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	429d      	cmp	r5, r3
 800cc42:	d002      	beq.n	800cc4a <z_set_prio+0x8a>
 800cc44:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cc46:	2d00      	cmp	r5, #0
 800cc48:	d1f0      	bne.n	800cc2c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <z_set_prio+0xbc>)
 800cc4c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800cc4e:	f103 011c 	add.w	r1, r3, #28
 800cc52:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800cc54:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800cc56:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800cc58:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	f7ff fe62 	bl	800c924 <update_cache>
 800cc60:	e7c1      	b.n	800cbe6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800cc62:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800cc64:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800cc66:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800cc68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800cc6a:	606c      	str	r4, [r5, #4]
}
 800cc6c:	e7f5      	b.n	800cc5a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cc6e:	2500      	movs	r5, #0
 800cc70:	e7dc      	b.n	800cc2c <z_set_prio+0x6c>
}
 800cc72:	4638      	mov	r0, r7
 800cc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc78:	200016f4 	.word	0x200016f4
 800cc7c:	200016d8 	.word	0x200016d8

0800cc80 <z_impl_k_thread_suspend>:
{
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800cc84:	3018      	adds	r0, #24
 800cc86:	f004 fe5f 	bl	8011948 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800cc8a:	2300      	movs	r3, #0
	__asm__ volatile(
 800cc8c:	f04f 0210 	mov.w	r2, #16
 800cc90:	f3ef 8511 	mrs	r5, BASEPRI
 800cc94:	f382 8812 	msr	BASEPRI_MAX, r2
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	e010      	b.n	800ccc0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800cc9e:	7b63      	ldrb	r3, [r4, #13]
 800cca0:	f043 0310 	orr.w	r3, r3, #16
 800cca4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800cca6:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <z_impl_k_thread_suspend+0x7c>)
 800cca8:	6898      	ldr	r0, [r3, #8]
 800ccaa:	42a0      	cmp	r0, r4
 800ccac:	bf14      	ite	ne
 800ccae:	2000      	movne	r0, #0
 800ccb0:	2001      	moveq	r0, #1
 800ccb2:	f7ff fe37 	bl	800c924 <update_cache>
	__asm__ volatile(
 800ccb6:	f385 8811 	msr	BASEPRI, r5
 800ccba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	b963      	cbnz	r3, 800ccdc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800ccc2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800ccc4:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dae8      	bge.n	800cc9e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cccc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ccd0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	480a      	ldr	r0, [pc, #40]	; (800cd00 <z_impl_k_thread_suspend+0x80>)
 800ccd6:	f004 fc87 	bl	80115e8 <z_priq_dumb_remove>
}
 800ccda:	e7e0      	b.n	800cc9e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800ccdc:	4b07      	ldr	r3, [pc, #28]	; (800ccfc <z_impl_k_thread_suspend+0x7c>)
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	42a3      	cmp	r3, r4
 800cce2:	d000      	beq.n	800cce6 <z_impl_k_thread_suspend+0x66>
}
 800cce4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800cce6:	f04f 0310 	mov.w	r3, #16
 800ccea:	f3ef 8011 	mrs	r0, BASEPRI
 800ccee:	f383 8812 	msr	BASEPRI_MAX, r3
 800ccf2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800ccf6:	f004 fc62 	bl	80115be <z_reschedule_irqlock>
 800ccfa:	e7f3      	b.n	800cce4 <z_impl_k_thread_suspend+0x64>
 800ccfc:	200016d8 	.word	0x200016d8
 800cd00:	200016f4 	.word	0x200016f4

0800cd04 <k_sched_unlock>:

void k_sched_unlock(void)
{
 800cd04:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800cd06:	2300      	movs	r3, #0
 800cd08:	f04f 0210 	mov.w	r2, #16
 800cd0c:	f3ef 8411 	mrs	r4, BASEPRI
 800cd10:	f382 8812 	msr	BASEPRI_MAX, r2
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	e00c      	b.n	800cd34 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800cd1a:	4b0d      	ldr	r3, [pc, #52]	; (800cd50 <k_sched_unlock+0x4c>)
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	7bd3      	ldrb	r3, [r2, #15]
 800cd20:	3301      	adds	r3, #1
 800cd22:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800cd24:	2000      	movs	r0, #0
 800cd26:	f7ff fdfd 	bl	800c924 <update_cache>
	__asm__ volatile(
 800cd2a:	f384 8811 	msr	BASEPRI, r4
 800cd2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cd32:	2301      	movs	r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f0      	beq.n	800cd1a <k_sched_unlock+0x16>
	__asm__ volatile(
 800cd38:	f04f 0310 	mov.w	r3, #16
 800cd3c:	f3ef 8011 	mrs	r0, BASEPRI
 800cd40:	f383 8812 	msr	BASEPRI_MAX, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f004 fc39 	bl	80115be <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	bf00      	nop
 800cd50:	200016d8 	.word	0x200016d8

0800cd54 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800cd54:	7b43      	ldrb	r3, [r0, #13]
 800cd56:	f013 0f08 	tst.w	r3, #8
 800cd5a:	d142      	bne.n	800cde2 <end_thread+0x8e>
{
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800cd60:	f043 0308 	orr.w	r3, r3, #8
 800cd64:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800cd66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd6a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800cd6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd70:	d12b      	bne.n	800cdca <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800cd72:	68ab      	ldr	r3, [r5, #8]
 800cd74:	b15b      	cbz	r3, 800cd8e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cd76:	4628      	mov	r0, r5
 800cd78:	f004 fbf5 	bl	8011566 <pended_on_thread>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f004 fc33 	bl	80115e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cd82:	7b6b      	ldrb	r3, [r5, #13]
 800cd84:	f023 0302 	bic.w	r3, r3, #2
 800cd88:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60ab      	str	r3, [r5, #8]
 800cd8e:	f105 0018 	add.w	r0, r5, #24
 800cd92:	f004 fdd9 	bl	8011948 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800cd96:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800cd98:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cd9a:	42ac      	cmp	r4, r5
 800cd9c:	d01d      	beq.n	800cdda <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800cd9e:	b1e4      	cbz	r4, 800cdda <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cda0:	4620      	mov	r0, r4
 800cda2:	f004 fbe0 	bl	8011566 <pended_on_thread>
 800cda6:	4621      	mov	r1, r4
 800cda8:	f004 fc1e 	bl	80115e8 <z_priq_dumb_remove>
 800cdac:	7b63      	ldrb	r3, [r4, #13]
 800cdae:	f023 0302 	bic.w	r3, r3, #2
 800cdb2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cdb4:	2600      	movs	r6, #0
 800cdb6:	60a6      	str	r6, [r4, #8]
 800cdb8:	f104 0018 	add.w	r0, r4, #24
 800cdbc:	f004 fdc4 	bl	8011948 <z_abort_timeout>
 800cdc0:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7ff fe6e 	bl	800caa4 <ready_thread>
 800cdc8:	e7e6      	b.n	800cd98 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800cdca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdce:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800cdd0:	4601      	mov	r1, r0
 800cdd2:	4804      	ldr	r0, [pc, #16]	; (800cde4 <end_thread+0x90>)
 800cdd4:	f004 fc08 	bl	80115e8 <z_priq_dumb_remove>
}
 800cdd8:	e7cb      	b.n	800cd72 <end_thread+0x1e>
		update_cache(1);
 800cdda:	2001      	movs	r0, #1
 800cddc:	f7ff fda2 	bl	800c924 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800cde0:	bd70      	pop	{r4, r5, r6, pc}
 800cde2:	4770      	bx	lr
 800cde4:	200016f4 	.word	0x200016f4

0800cde8 <z_sched_init>:
{
 800cde8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800cdea:	4804      	ldr	r0, [pc, #16]	; (800cdfc <z_sched_init+0x14>)
 800cdec:	f004 fd21 	bl	8011832 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	4608      	mov	r0, r1
 800cdf4:	f7ff fd32 	bl	800c85c <k_sched_time_slice_set>
}
 800cdf8:	bd08      	pop	{r3, pc}
 800cdfa:	bf00      	nop
 800cdfc:	200016f0 	.word	0x200016f0

0800ce00 <z_impl_k_yield>:
{
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	f04f 0310 	mov.w	r3, #16
 800ce06:	f3ef 8611 	mrs	r6, BASEPRI
 800ce0a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ce0e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800ce12:	4c1c      	ldr	r4, [pc, #112]	; (800ce84 <z_impl_k_yield+0x84>)
 800ce14:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800ce16:	7b4b      	ldrb	r3, [r1, #13]
 800ce18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800ce1e:	f104 071c 	add.w	r7, r4, #28
 800ce22:	4638      	mov	r0, r7
 800ce24:	f004 fbe0 	bl	80115e8 <z_priq_dumb_remove>
	queue_thread(_current);
 800ce28:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800ce2a:	7b6b      	ldrb	r3, [r5, #13]
 800ce2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce30:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800ce32:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ce34:	42bc      	cmp	r4, r7
 800ce36:	d023      	beq.n	800ce80 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce38:	b16c      	cbz	r4, 800ce56 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	f004 fb94 	bl	801156a <z_sched_prio_cmp>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	dc16      	bgt.n	800ce74 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ce46:	b134      	cbz	r4, 800ce56 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800ce48:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <z_impl_k_yield+0x84>)
 800ce4a:	6a1b      	ldr	r3, [r3, #32]
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	d002      	beq.n	800ce56 <z_impl_k_yield+0x56>
 800ce50:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce52:	2c00      	cmp	r4, #0
 800ce54:	d1f0      	bne.n	800ce38 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <z_impl_k_yield+0x84>)
 800ce58:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800ce5a:	f103 011c 	add.w	r1, r3, #28
 800ce5e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800ce60:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800ce62:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800ce64:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800ce66:	2001      	movs	r0, #1
 800ce68:	f7ff fd5c 	bl	800c924 <update_cache>
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f7f7 fed7 	bl	8004c20 <arch_swap>
}
 800ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800ce74:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800ce76:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800ce78:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800ce7a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800ce7c:	6065      	str	r5, [r4, #4]
}
 800ce7e:	e7f2      	b.n	800ce66 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce80:	2400      	movs	r4, #0
 800ce82:	e7d9      	b.n	800ce38 <z_impl_k_yield+0x38>
 800ce84:	200016d8 	.word	0x200016d8

0800ce88 <z_tick_sleep>:
{
 800ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800ce8c:	ea50 0301 	orrs.w	r3, r0, r1
 800ce90:	d038      	beq.n	800cf04 <z_tick_sleep+0x7c>
 800ce92:	4604      	mov	r4, r0
 800ce94:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800ce96:	f06f 0301 	mvn.w	r3, #1
 800ce9a:	1a1b      	subs	r3, r3, r0
 800ce9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cea0:	eb62 0201 	sbc.w	r2, r2, r1
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	f172 0300 	sbcs.w	r3, r2, #0
 800ceaa:	db2f      	blt.n	800cf0c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800ceac:	f06f 0501 	mvn.w	r5, #1
 800ceb0:	1a2d      	subs	r5, r5, r0
 800ceb2:	f04f 0310 	mov.w	r3, #16
 800ceb6:	f3ef 8811 	mrs	r8, BASEPRI
 800ceba:	f383 8812 	msr	BASEPRI_MAX, r3
 800cebe:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800cec2:	4f14      	ldr	r7, [pc, #80]	; (800cf14 <z_tick_sleep+0x8c>)
 800cec4:	68b8      	ldr	r0, [r7, #8]
 800cec6:	4b14      	ldr	r3, [pc, #80]	; (800cf18 <z_tick_sleep+0x90>)
 800cec8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800ceca:	f7ff fe49 	bl	800cb60 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800cece:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800ced0:	4622      	mov	r2, r4
 800ced2:	4633      	mov	r3, r6
 800ced4:	4911      	ldr	r1, [pc, #68]	; (800cf1c <z_tick_sleep+0x94>)
 800ced6:	3018      	adds	r0, #24
 800ced8:	f000 f8ee 	bl	800d0b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800cedc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800cede:	7b53      	ldrb	r3, [r2, #13]
 800cee0:	f043 0310 	orr.w	r3, r3, #16
 800cee4:	7353      	strb	r3, [r2, #13]
 800cee6:	4640      	mov	r0, r8
 800cee8:	f7f7 fe9a 	bl	8004c20 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800ceec:	f004 fd75 	bl	80119da <sys_clock_tick_get_32>
 800cef0:	1a28      	subs	r0, r5, r0
 800cef2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800cef6:	2801      	cmp	r0, #1
 800cef8:	f173 0300 	sbcs.w	r3, r3, #0
 800cefc:	da00      	bge.n	800cf00 <z_tick_sleep+0x78>
	return 0;
 800cefe:	2000      	movs	r0, #0
}
 800cf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800cf04:	f7ff ff7c 	bl	800ce00 <z_impl_k_yield>
		return 0;
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e7f9      	b.n	800cf00 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800cf0c:	f004 fd65 	bl	80119da <sys_clock_tick_get_32>
 800cf10:	1905      	adds	r5, r0, r4
 800cf12:	e7ce      	b.n	800ceb2 <z_tick_sleep+0x2a>
 800cf14:	200016d8 	.word	0x200016d8
 800cf18:	20001710 	.word	0x20001710
 800cf1c:	08011687 	.word	0x08011687

0800cf20 <z_impl_k_sleep>:
{
 800cf20:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800cf22:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cf26:	bf08      	it	eq
 800cf28:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800cf2c:	d007      	beq.n	800cf3e <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800cf2e:	f7ff ffab 	bl	800ce88 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800cf32:	220a      	movs	r2, #10
 800cf34:	2300      	movs	r3, #0
 800cf36:	17c1      	asrs	r1, r0, #31
 800cf38:	f7f3 fd50 	bl	80009dc <__aeabi_uldivmod>
}
 800cf3c:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800cf3e:	4b03      	ldr	r3, [pc, #12]	; (800cf4c <z_impl_k_sleep+0x2c>)
 800cf40:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800cf42:	f7ff fe9d 	bl	800cc80 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf4a:	e7f7      	b.n	800cf3c <z_impl_k_sleep+0x1c>
 800cf4c:	200016d8 	.word	0x200016d8

0800cf50 <z_impl_z_current_get>:
}
 800cf50:	4b01      	ldr	r3, [pc, #4]	; (800cf58 <z_impl_z_current_get+0x8>)
 800cf52:	6898      	ldr	r0, [r3, #8]
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	200016d8 	.word	0x200016d8

0800cf5c <z_impl_k_is_preempt_thread>:
 800cf5c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800cf60:	b933      	cbnz	r3, 800cf70 <z_impl_k_is_preempt_thread+0x14>
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <z_impl_k_is_preempt_thread+0x1c>)
 800cf64:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800cf66:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800cf68:	2b7f      	cmp	r3, #127	; 0x7f
 800cf6a:	d803      	bhi.n	800cf74 <z_impl_k_is_preempt_thread+0x18>
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	4770      	bx	lr
 800cf70:	2000      	movs	r0, #0
 800cf72:	4770      	bx	lr
 800cf74:	2000      	movs	r0, #0
}
 800cf76:	4770      	bx	lr
 800cf78:	200016d8 	.word	0x200016d8

0800cf7c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	f04f 0310 	mov.w	r3, #16
 800cf82:	f3ef 8511 	mrs	r5, BASEPRI
 800cf86:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf8a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800cf8e:	7b43      	ldrb	r3, [r0, #13]
 800cf90:	f013 0f08 	tst.w	r3, #8
 800cf94:	d004      	beq.n	800cfa0 <z_thread_abort+0x24>
	__asm__ volatile(
 800cf96:	f385 8811 	msr	BASEPRI, r5
 800cf9a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	4604      	mov	r4, r0
	end_thread(thread);
 800cfa2:	f7ff fed7 	bl	800cd54 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800cfa6:	4b08      	ldr	r3, [pc, #32]	; (800cfc8 <z_thread_abort+0x4c>)
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	d004      	beq.n	800cfb8 <z_thread_abort+0x3c>
 800cfae:	f385 8811 	msr	BASEPRI, r5
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	e7f2      	b.n	800cf9e <z_thread_abort+0x22>
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1f6      	bne.n	800cfae <z_thread_abort+0x32>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f7f7 fe2d 	bl	8004c20 <arch_swap>
	return ret;
 800cfc6:	e7f2      	b.n	800cfae <z_thread_abort+0x32>
 800cfc8:	200016d8 	.word	0x200016d8

0800cfcc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800cfcc:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800cfd0:	b083      	sub	sp, #12
 800cfd2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800cfd4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800cfd8:	e9cd bc00 	strd	fp, ip, [sp]
 800cfdc:	f7ff fddc 	bl	800cb98 <z_pend_curr>

	if (data != NULL) {
 800cfe0:	b11c      	cbz	r4, 800cfea <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <z_sched_wait+0x24>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	695b      	ldr	r3, [r3, #20]
 800cfe8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800cfea:	b003      	add	sp, #12
 800cfec:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800cff0:	200016d8 	.word	0x200016d8

0800cff4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800cff4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800cff6:	4806      	ldr	r0, [pc, #24]	; (800d010 <z_data_copy+0x1c>)
 800cff8:	4a06      	ldr	r2, [pc, #24]	; (800d014 <z_data_copy+0x20>)
 800cffa:	1a12      	subs	r2, r2, r0
 800cffc:	4906      	ldr	r1, [pc, #24]	; (800d018 <z_data_copy+0x24>)
 800cffe:	f004 fdc0 	bl	8011b82 <memcpy>
 800d002:	4a06      	ldr	r2, [pc, #24]	; (800d01c <z_data_copy+0x28>)
 800d004:	4906      	ldr	r1, [pc, #24]	; (800d020 <z_data_copy+0x2c>)
 800d006:	4807      	ldr	r0, [pc, #28]	; (800d024 <z_data_copy+0x30>)
 800d008:	f004 fdbb 	bl	8011b82 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800d00c:	bd08      	pop	{r3, pc}
 800d00e:	bf00      	nop
 800d010:	20000000 	.word	0x20000000
 800d014:	200006c0 	.word	0x200006c0
 800d018:	0801428c 	.word	0x0801428c
 800d01c:	00000000 	.word	0x00000000
 800d020:	0801428c 	.word	0x0801428c
 800d024:	20000000 	.word	0x20000000

0800d028 <first>:
	return list->head == list;
 800d028:	4b03      	ldr	r3, [pc, #12]	; (800d038 <first+0x10>)
 800d02a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d02c:	4298      	cmp	r0, r3
 800d02e:	d000      	beq.n	800d032 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800d030:	4770      	bx	lr
 800d032:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800d034:	e7fc      	b.n	800d030 <first+0x8>
 800d036:	bf00      	nop
 800d038:	2000027c 	.word	0x2000027c

0800d03c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d03c:	b130      	cbz	r0, 800d04c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800d03e:	4a04      	ldr	r2, [pc, #16]	; (800d050 <next+0x14>)
 800d040:	6852      	ldr	r2, [r2, #4]
 800d042:	4290      	cmp	r0, r2
 800d044:	d001      	beq.n	800d04a <next+0xe>
 800d046:	6800      	ldr	r0, [r0, #0]
 800d048:	4770      	bx	lr
 800d04a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	2000027c 	.word	0x2000027c

0800d054 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800d054:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800d056:	4b04      	ldr	r3, [pc, #16]	; (800d068 <elapsed+0x14>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	b10b      	cbz	r3, 800d060 <elapsed+0xc>
 800d05c:	2000      	movs	r0, #0
}
 800d05e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800d060:	f7fe f86a 	bl	800b138 <sys_clock_elapsed>
 800d064:	e7fb      	b.n	800d05e <elapsed+0xa>
 800d066:	bf00      	nop
 800d068:	20001720 	.word	0x20001720

0800d06c <next_timeout>:

static int32_t next_timeout(void)
{
 800d06c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800d06e:	f7ff ffdb 	bl	800d028 <first>
 800d072:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800d074:	f7ff ffee 	bl	800d054 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800d078:	b17c      	cbz	r4, 800d09a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800d07a:	6923      	ldr	r3, [r4, #16]
 800d07c:	6962      	ldr	r2, [r4, #20]
 800d07e:	1a1b      	subs	r3, r3, r0
 800d080:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800d084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d088:	f170 0200 	sbcs.w	r2, r0, #0
 800d08c:	da08      	bge.n	800d0a0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800d08e:	2800      	cmp	r0, #0
 800d090:	db01      	blt.n	800d096 <next_timeout+0x2a>
 800d092:	4618      	mov	r0, r3
 800d094:	e006      	b.n	800d0a4 <next_timeout+0x38>
 800d096:	2300      	movs	r3, #0
 800d098:	e7fb      	b.n	800d092 <next_timeout+0x26>
		ret = MAX_WAIT;
 800d09a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d09e:	e001      	b.n	800d0a4 <next_timeout+0x38>
 800d0a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800d0a4:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <next_timeout+0x48>)
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	b113      	cbz	r3, 800d0b0 <next_timeout+0x44>
 800d0aa:	4283      	cmp	r3, r0
 800d0ac:	da00      	bge.n	800d0b0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800d0ae:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800d0b0:	bd10      	pop	{r4, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200016d8 	.word	0x200016d8

0800d0b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0bc:	bf08      	it	eq
 800d0be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800d0c2:	d07d      	beq.n	800d1c0 <z_add_timeout+0x108>
{
 800d0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	4692      	mov	sl, r2
 800d0cc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800d0ce:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800d0d0:	2300      	movs	r3, #0
	__asm__ volatile(
 800d0d2:	f04f 0210 	mov.w	r2, #16
 800d0d6:	f3ef 8711 	mrs	r7, BASEPRI
 800d0da:	f382 8812 	msr	BASEPRI_MAX, r2
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	e021      	b.n	800d128 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800d0e4:	f11a 0801 	adds.w	r8, sl, #1
 800d0e8:	f145 0900 	adc.w	r9, r5, #0
 800d0ec:	f7ff ffb2 	bl	800d054 <elapsed>
 800d0f0:	eb18 0300 	adds.w	r3, r8, r0
 800d0f4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800d0f8:	6123      	str	r3, [r4, #16]
 800d0fa:	6160      	str	r0, [r4, #20]
 800d0fc:	e036      	b.n	800d16c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800d0fe:	1a51      	subs	r1, r2, r1
 800d100:	eb66 0303 	sbc.w	r3, r6, r3
 800d104:	6101      	str	r1, [r0, #16]
 800d106:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800d108:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800d10a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800d10c:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800d10e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800d110:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800d112:	2800      	cmp	r0, #0
 800d114:	d03e      	beq.n	800d194 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800d116:	f7ff ff87 	bl	800d028 <first>
 800d11a:	4284      	cmp	r4, r0
 800d11c:	d041      	beq.n	800d1a2 <z_add_timeout+0xea>
	__asm__ volatile(
 800d11e:	f387 8811 	msr	BASEPRI, r7
 800d122:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d126:	2301      	movs	r3, #1
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d147      	bne.n	800d1bc <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800d12c:	4653      	mov	r3, sl
 800d12e:	f06f 0101 	mvn.w	r1, #1
 800d132:	ebb1 010a 	subs.w	r1, r1, sl
 800d136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d13a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800d13e:	2a00      	cmp	r2, #0
 800d140:	dbd0      	blt.n	800d0e4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800d142:	4a20      	ldr	r2, [pc, #128]	; (800d1c4 <z_add_timeout+0x10c>)
 800d144:	6811      	ldr	r1, [r2, #0]
 800d146:	6852      	ldr	r2, [r2, #4]
 800d148:	185b      	adds	r3, r3, r1
 800d14a:	eb42 0205 	adc.w	r2, r2, r5
 800d14e:	f06f 0101 	mvn.w	r1, #1
 800d152:	1acb      	subs	r3, r1, r3
 800d154:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800d158:	4618      	mov	r0, r3
 800d15a:	4611      	mov	r1, r2
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	f172 0300 	sbcs.w	r3, r2, #0
 800d162:	da01      	bge.n	800d168 <z_add_timeout+0xb0>
 800d164:	2001      	movs	r0, #1
 800d166:	2100      	movs	r1, #0
 800d168:	6120      	str	r0, [r4, #16]
 800d16a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800d16c:	f7ff ff5c 	bl	800d028 <first>
 800d170:	2800      	cmp	r0, #0
 800d172:	d0ce      	beq.n	800d112 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800d174:	6902      	ldr	r2, [r0, #16]
 800d176:	6946      	ldr	r6, [r0, #20]
 800d178:	6921      	ldr	r1, [r4, #16]
 800d17a:	6963      	ldr	r3, [r4, #20]
 800d17c:	4291      	cmp	r1, r2
 800d17e:	eb73 0c06 	sbcs.w	ip, r3, r6
 800d182:	dbbc      	blt.n	800d0fe <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800d184:	1a89      	subs	r1, r1, r2
 800d186:	eb63 0306 	sbc.w	r3, r3, r6
 800d18a:	6121      	str	r1, [r4, #16]
 800d18c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800d18e:	f7ff ff55 	bl	800d03c <next>
 800d192:	e7ed      	b.n	800d170 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800d194:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <z_add_timeout+0x110>)
 800d196:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800d198:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800d19a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800d19c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800d19e:	605c      	str	r4, [r3, #4]
}
 800d1a0:	e7b9      	b.n	800d116 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800d1a2:	f7ff ff63 	bl	800d06c <next_timeout>

			if (next_time == 0 ||
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	b118      	cbz	r0, 800d1b2 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800d1aa:	4a08      	ldr	r2, [pc, #32]	; (800d1cc <z_add_timeout+0x114>)
 800d1ac:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800d1ae:	4282      	cmp	r2, r0
 800d1b0:	d0b5      	beq.n	800d11e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fd ff3d 	bl	800b034 <sys_clock_set_timeout>
 800d1ba:	e7b0      	b.n	800d11e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800d1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20000e60 	.word	0x20000e60
 800d1c8:	2000027c 	.word	0x2000027c
 800d1cc:	200016d8 	.word	0x200016d8

0800d1d0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800d1d4:	f7ff fc10 	bl	800c9f8 <z_time_slice>
	__asm__ volatile(
 800d1d8:	f04f 0310 	mov.w	r3, #16
 800d1dc:	f3ef 8511 	mrs	r5, BASEPRI
 800d1e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800d1e4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800d1e8:	4b28      	ldr	r3, [pc, #160]	; (800d28c <sys_clock_announce+0xbc>)
 800d1ea:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800d1ec:	e020      	b.n	800d230 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800d1ee:	4828      	ldr	r0, [pc, #160]	; (800d290 <sys_clock_announce+0xc0>)
 800d1f0:	6801      	ldr	r1, [r0, #0]
 800d1f2:	6846      	ldr	r6, [r0, #4]
 800d1f4:	1889      	adds	r1, r1, r2
 800d1f6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800d1fa:	6001      	str	r1, [r0, #0]
 800d1fc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	4a22      	ldr	r2, [pc, #136]	; (800d28c <sys_clock_announce+0xbc>)
 800d202:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800d204:	2200      	movs	r2, #0
 800d206:	2300      	movs	r3, #0
 800d208:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800d20c:	4620      	mov	r0, r4
 800d20e:	f004 fb84 	bl	801191a <remove_timeout>
	__asm__ volatile(
 800d212:	f385 8811 	msr	BASEPRI, r5
 800d216:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800d21a:	68a3      	ldr	r3, [r4, #8]
 800d21c:	4620      	mov	r0, r4
 800d21e:	4798      	blx	r3
	__asm__ volatile(
 800d220:	f04f 0310 	mov.w	r3, #16
 800d224:	f3ef 8511 	mrs	r5, BASEPRI
 800d228:	f383 8812 	msr	BASEPRI_MAX, r3
 800d22c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800d230:	f7ff fefa 	bl	800d028 <first>
 800d234:	4604      	mov	r4, r0
 800d236:	b140      	cbz	r0, 800d24a <sys_clock_announce+0x7a>
 800d238:	6902      	ldr	r2, [r0, #16]
 800d23a:	6941      	ldr	r1, [r0, #20]
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <sys_clock_announce+0xbc>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	17d8      	asrs	r0, r3, #31
 800d242:	4293      	cmp	r3, r2
 800d244:	eb70 0101 	sbcs.w	r1, r0, r1
 800d248:	dad1      	bge.n	800d1ee <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800d24a:	b144      	cbz	r4, 800d25e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800d24c:	4b0f      	ldr	r3, [pc, #60]	; (800d28c <sys_clock_announce+0xbc>)
 800d24e:	6819      	ldr	r1, [r3, #0]
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	6962      	ldr	r2, [r4, #20]
 800d254:	1a5b      	subs	r3, r3, r1
 800d256:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800d25e:	4a0c      	ldr	r2, [pc, #48]	; (800d290 <sys_clock_announce+0xc0>)
 800d260:	4e0a      	ldr	r6, [pc, #40]	; (800d28c <sys_clock_announce+0xbc>)
 800d262:	6830      	ldr	r0, [r6, #0]
 800d264:	6813      	ldr	r3, [r2, #0]
 800d266:	6851      	ldr	r1, [r2, #4]
 800d268:	181b      	adds	r3, r3, r0
 800d26a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800d272:	2400      	movs	r4, #0
 800d274:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800d276:	f7ff fef9 	bl	800d06c <next_timeout>
 800d27a:	4621      	mov	r1, r4
 800d27c:	f7fd feda 	bl	800b034 <sys_clock_set_timeout>
	__asm__ volatile(
 800d280:	f385 8811 	msr	BASEPRI, r5
 800d284:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800d288:	bd70      	pop	{r4, r5, r6, pc}
 800d28a:	bf00      	nop
 800d28c:	20001720 	.word	0x20001720
 800d290:	20000e60 	.word	0x20000e60

0800d294 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800d294:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800d296:	2300      	movs	r3, #0
	__asm__ volatile(
 800d298:	f04f 0210 	mov.w	r2, #16
 800d29c:	f3ef 8411 	mrs	r4, BASEPRI
 800d2a0:	f382 8812 	msr	BASEPRI_MAX, r2
 800d2a4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	e00c      	b.n	800d2c8 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800d2ae:	f7fd ff43 	bl	800b138 <sys_clock_elapsed>
 800d2b2:	4a07      	ldr	r2, [pc, #28]	; (800d2d0 <sys_clock_tick_get+0x3c>)
 800d2b4:	6813      	ldr	r3, [r2, #0]
 800d2b6:	6851      	ldr	r1, [r2, #4]
 800d2b8:	18c0      	adds	r0, r0, r3
 800d2ba:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800d2be:	f384 8811 	msr	BASEPRI, r4
 800d2c2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d0f0      	beq.n	800d2ae <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800d2cc:	bd10      	pop	{r4, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20000e60 	.word	0x20000e60

0800d2d4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800d2d4:	b900      	cbnz	r0, 800d2d8 <z_impl_k_busy_wait+0x4>
 800d2d6:	4770      	bx	lr
{
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800d2dc:	f7fd ff4c 	bl	800b178 <sys_clock_cycle_get_32>
 800d2e0:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800d2e2:	4907      	ldr	r1, [pc, #28]	; (800d300 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800d2e4:	4a07      	ldr	r2, [pc, #28]	; (800d304 <z_impl_k_busy_wait+0x30>)
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	fba4 0101 	umull	r0, r1, r4, r1
 800d2ec:	f7f3 fb76 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	f7fd ff41 	bl	800b178 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800d2f6:	1b40      	subs	r0, r0, r5
 800d2f8:	42a0      	cmp	r0, r4
 800d2fa:	d3fa      	bcc.n	800d2f2 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800d2fc:	bd38      	pop	{r3, r4, r5, pc}
 800d2fe:	bf00      	nop
 800d300:	04c4b400 	.word	0x04c4b400
 800d304:	000f4240 	.word	0x000f4240

0800d308 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	4604      	mov	r4, r0
	__asm__ volatile(
 800d30c:	f04f 0310 	mov.w	r3, #16
 800d310:	f3ef 8611 	mrs	r6, BASEPRI
 800d314:	f383 8812 	msr	BASEPRI_MAX, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800d31e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d322:	ea52 0103 	orrs.w	r1, r2, r3
 800d326:	d005      	beq.n	800d334 <z_timer_expiration_handler+0x2c>
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d32c:	bf08      	it	eq
 800d32e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800d332:	d126      	bne.n	800d382 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800d334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d336:	3301      	adds	r3, #1
 800d338:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800d33a:	6a23      	ldr	r3, [r4, #32]
 800d33c:	b173      	cbz	r3, 800d35c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800d33e:	f386 8811 	msr	BASEPRI, r6
 800d342:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800d346:	6a23      	ldr	r3, [r4, #32]
 800d348:	4620      	mov	r0, r4
 800d34a:	4798      	blx	r3
	__asm__ volatile(
 800d34c:	f04f 0310 	mov.w	r3, #16
 800d350:	f3ef 8511 	mrs	r5, BASEPRI
 800d354:	f383 8812 	msr	BASEPRI_MAX, r3
 800d358:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800d35c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800d360:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d362:	42a3      	cmp	r3, r4
 800d364:	d013      	beq.n	800d38e <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800d366:	b194      	cbz	r4, 800d38e <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800d368:	4620      	mov	r0, r4
 800d36a:	f004 f908 	bl	801157e <z_unpend_thread_no_timeout>
 800d36e:	2300      	movs	r3, #0
 800d370:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800d372:	f385 8811 	msr	BASEPRI, r5
 800d376:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800d37a:	4620      	mov	r0, r4
 800d37c:	f004 f967 	bl	801164e <z_ready_thread>
}
 800d380:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800d382:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800d386:	4904      	ldr	r1, [pc, #16]	; (800d398 <z_timer_expiration_handler+0x90>)
 800d388:	f7ff fe96 	bl	800d0b8 <z_add_timeout>
 800d38c:	e7d2      	b.n	800d334 <z_timer_expiration_handler+0x2c>
 800d38e:	f385 8811 	msr	BASEPRI, r5
 800d392:	f3bf 8f6f 	isb	sy
		return;
 800d396:	e7f3      	b.n	800d380 <z_timer_expiration_handler+0x78>
 800d398:	0800d309 	.word	0x0800d309

0800d39c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a0:	9f06      	ldr	r7, [sp, #24]
 800d3a2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800d3a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3aa:	bf08      	it	eq
 800d3ac:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800d3b0:	d02f      	beq.n	800d412 <z_impl_k_timer_start+0x76>
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	4614      	mov	r4, r2
 800d3b6:	461e      	mov	r6, r3
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800d3bc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800d3c0:	bf08      	it	eq
 800d3c2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800d3c6:	d00d      	beq.n	800d3e4 <z_impl_k_timer_start+0x48>
 800d3c8:	ea57 0c08 	orrs.w	ip, r7, r8
 800d3cc:	d00a      	beq.n	800d3e4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800d3ce:	f06f 0c01 	mvn.w	ip, #1
 800d3d2:	ebbc 0c07 	subs.w	ip, ip, r7
 800d3d6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d3da:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800d3de:	f1bc 0f00 	cmp.w	ip, #0
 800d3e2:	db18      	blt.n	800d416 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800d3e4:	f06f 0301 	mvn.w	r3, #1
 800d3e8:	1a5b      	subs	r3, r3, r1
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3ee:	eb63 0300 	sbc.w	r3, r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	db1a      	blt.n	800d42c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f004 faa6 	bl	8011948 <z_abort_timeout>
	timer->period = period;
 800d3fc:	62af      	str	r7, [r5, #40]	; 0x28
 800d3fe:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800d402:	2300      	movs	r3, #0
 800d404:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800d406:	4622      	mov	r2, r4
 800d408:	4633      	mov	r3, r6
 800d40a:	490e      	ldr	r1, [pc, #56]	; (800d444 <z_impl_k_timer_start+0xa8>)
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7ff fe53 	bl	800d0b8 <z_add_timeout>
		     duration);
}
 800d412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800d416:	2f02      	cmp	r7, #2
 800d418:	f178 0300 	sbcs.w	r3, r8, #0
 800d41c:	da02      	bge.n	800d424 <z_impl_k_timer_start+0x88>
 800d41e:	2702      	movs	r7, #2
 800d420:	f04f 0800 	mov.w	r8, #0
 800d424:	3f01      	subs	r7, #1
 800d426:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800d42a:	e7db      	b.n	800d3e4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800d42c:	460c      	mov	r4, r1
 800d42e:	4606      	mov	r6, r0
 800d430:	2901      	cmp	r1, #1
 800d432:	f170 0300 	sbcs.w	r3, r0, #0
 800d436:	da01      	bge.n	800d43c <z_impl_k_timer_start+0xa0>
 800d438:	2401      	movs	r4, #1
 800d43a:	2600      	movs	r6, #0
 800d43c:	3c01      	subs	r4, #1
 800d43e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800d442:	e7d8      	b.n	800d3f6 <z_impl_k_timer_start+0x5a>
 800d444:	0800d309 	.word	0x0800d309

0800d448 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	b087      	sub	sp, #28
 800d44e:	4682      	mov	sl, r0
 800d450:	460f      	mov	r7, r1
 800d452:	4693      	mov	fp, r2
 800d454:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800d456:	2500      	movs	r5, #0
	int events_registered = 0;
 800d458:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800d45a:	e02f      	b.n	800d4bc <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	b1cb      	cbz	r3, 800d496 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800d462:	f04f 0902 	mov.w	r9, #2
			return true;
 800d466:	2301      	movs	r3, #1
 800d468:	e015      	b.n	800d496 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800d46a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	b193      	cbz	r3, 800d496 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800d470:	f04f 0904 	mov.w	r9, #4
			return true;
 800d474:	2301      	movs	r3, #1
 800d476:	e00e      	b.n	800d496 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	b15b      	cbz	r3, 800d496 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800d47e:	f04f 0901 	mov.w	r9, #1
			return true;
 800d482:	464b      	mov	r3, r9
 800d484:	e007      	b.n	800d496 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48a:	b123      	cbz	r3, 800d496 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800d48c:	f04f 0910 	mov.w	r9, #16
			return true;
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <register_events+0x4e>
	switch (event->type) {
 800d494:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800d496:	2b00      	cmp	r3, #0
 800d498:	d03a      	beq.n	800d510 <register_events+0xc8>
	event->poller = NULL;
 800d49a:	2100      	movs	r1, #0
 800d49c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800d4a4:	ea49 0202 	orr.w	r2, r9, r2
 800d4a8:	f362 3352 	bfi	r3, r2, #13, #6
 800d4ac:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800d4ae:	f88b 1000 	strb.w	r1, [fp]
 800d4b2:	f386 8811 	msr	BASEPRI, r6
 800d4b6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800d4ba:	3501      	adds	r5, #1
 800d4bc:	42bd      	cmp	r5, r7
 800d4be:	f280 81b9 	bge.w	800d834 <register_events+0x3ec>
	__asm__ volatile(
 800d4c2:	f04f 0310 	mov.w	r3, #16
 800d4c6:	f3ef 8611 	mrs	r6, BASEPRI
 800d4ca:	f383 8812 	msr	BASEPRI_MAX, r3
 800d4ce:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800d4d2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800d4d6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d4da:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800d4de:	7b63      	ldrb	r3, [r4, #13]
 800d4e0:	f003 031f 	and.w	r3, r3, #31
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	2b07      	cmp	r3, #7
 800d4e8:	d8d4      	bhi.n	800d494 <register_events+0x4c>
 800d4ea:	a201      	add	r2, pc, #4	; (adr r2, 800d4f0 <register_events+0xa8>)
 800d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f0:	0800d479 	.word	0x0800d479
 800d4f4:	0800d45d 	.word	0x0800d45d
 800d4f8:	0800d495 	.word	0x0800d495
 800d4fc:	0800d46b 	.word	0x0800d46b
 800d500:	0800d495 	.word	0x0800d495
 800d504:	0800d495 	.word	0x0800d495
 800d508:	0800d495 	.word	0x0800d495
 800d50c:	0800d487 	.word	0x0800d487
		} else if (!just_check && poller->is_polling) {
 800d510:	9b00      	ldr	r3, [sp, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1cd      	bne.n	800d4b2 <register_events+0x6a>
 800d516:	f89b 3000 	ldrb.w	r3, [fp]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0c9      	beq.n	800d4b2 <register_events+0x6a>
	switch (event->type) {
 800d51e:	7b63      	ldrb	r3, [r4, #13]
 800d520:	f003 031f 	and.w	r3, r3, #31
 800d524:	3b01      	subs	r3, #1
 800d526:	2b07      	cmp	r3, #7
 800d528:	d848      	bhi.n	800d5bc <register_events+0x174>
 800d52a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d52e:	00cb      	.short	0x00cb
 800d530:	00470008 	.word	0x00470008
 800d534:	0047006d 	.word	0x0047006d
 800d538:	00470047 	.word	0x00470047
 800d53c:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	9304      	str	r3, [sp, #16]
 800d542:	f103 0210 	add.w	r2, r3, #16
 800d546:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800d548:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d02f      	beq.n	800d5ae <register_events+0x166>
 800d54e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800d550:	2b00      	cmp	r3, #0
 800d552:	d02c      	beq.n	800d5ae <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d554:	6898      	ldr	r0, [r3, #8]
 800d556:	f004 fa6f 	bl	8011a38 <poller_thread>
 800d55a:	9005      	str	r0, [sp, #20]
 800d55c:	4658      	mov	r0, fp
 800d55e:	f004 fa6b 	bl	8011a38 <poller_thread>
 800d562:	4601      	mov	r1, r0
 800d564:	9003      	str	r0, [sp, #12]
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f003 ffff 	bl	801156a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800d56c:	2800      	cmp	r0, #0
 800d56e:	dc1e      	bgt.n	800d5ae <register_events+0x166>
	return list->head == list;
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d574:	9a02      	ldr	r2, [sp, #8]
 800d576:	429a      	cmp	r2, r3
 800d578:	d030      	beq.n	800d5dc <register_events+0x194>
 800d57a:	9404      	str	r4, [sp, #16]
 800d57c:	9505      	str	r5, [sp, #20]
 800d57e:	9d02      	ldr	r5, [sp, #8]
 800d580:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d582:	2c00      	cmp	r4, #0
 800d584:	d030      	beq.n	800d5e8 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800d586:	68a0      	ldr	r0, [r4, #8]
 800d588:	f004 fa56 	bl	8011a38 <poller_thread>
 800d58c:	4601      	mov	r1, r0
 800d58e:	9803      	ldr	r0, [sp, #12]
 800d590:	f003 ffeb 	bl	801156a <z_sched_prio_cmp>
 800d594:	2800      	cmp	r0, #0
 800d596:	dc17      	bgt.n	800d5c8 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d598:	2c00      	cmp	r4, #0
 800d59a:	d028      	beq.n	800d5ee <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800d59c:	686b      	ldr	r3, [r5, #4]
 800d59e:	429c      	cmp	r4, r3
 800d5a0:	d02f      	beq.n	800d602 <register_events+0x1ba>
 800d5a2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d5a4:	2c00      	cmp	r4, #0
 800d5a6:	d1ec      	bne.n	800d582 <register_events+0x13a>
 800d5a8:	9c04      	ldr	r4, [sp, #16]
 800d5aa:	9d05      	ldr	r5, [sp, #20]
 800d5ac:	e021      	b.n	800d5f2 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800d5ae:	9a02      	ldr	r2, [sp, #8]
 800d5b0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d5b2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d5b6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d5b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d5ba:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800d5bc:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800d5c0:	9b01      	ldr	r3, [sp, #4]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	9301      	str	r3, [sp, #4]
 800d5c6:	e774      	b.n	800d4b2 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800d5c8:	9d05      	ldr	r5, [sp, #20]
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	9c04      	ldr	r4, [sp, #16]
 800d5ce:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800d5d0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800d5d2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800d5d6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800d5d8:	6054      	str	r4, [r2, #4]
			return;
 800d5da:	e7ef      	b.n	800d5bc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9404      	str	r4, [sp, #16]
 800d5e0:	9505      	str	r5, [sp, #20]
 800d5e2:	9d02      	ldr	r5, [sp, #8]
 800d5e4:	461c      	mov	r4, r3
 800d5e6:	e7cc      	b.n	800d582 <register_events+0x13a>
 800d5e8:	9c04      	ldr	r4, [sp, #16]
 800d5ea:	9d05      	ldr	r5, [sp, #20]
 800d5ec:	e001      	b.n	800d5f2 <register_events+0x1aa>
 800d5ee:	9c04      	ldr	r4, [sp, #16]
 800d5f0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800d5f2:	9a02      	ldr	r2, [sp, #8]
 800d5f4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d5f6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d5fa:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d5fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d5fe:	6054      	str	r4, [r2, #4]
}
 800d600:	e7dc      	b.n	800d5bc <register_events+0x174>
 800d602:	9c04      	ldr	r4, [sp, #16]
 800d604:	9d05      	ldr	r5, [sp, #20]
 800d606:	e7f4      	b.n	800d5f2 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	f103 0214 	add.w	r2, r3, #20
 800d610:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800d612:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800d614:	429a      	cmp	r2, r3
 800d616:	d02d      	beq.n	800d674 <register_events+0x22c>
 800d618:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800d61a:	b35b      	cbz	r3, 800d674 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d61c:	6898      	ldr	r0, [r3, #8]
 800d61e:	f004 fa0b 	bl	8011a38 <poller_thread>
 800d622:	9005      	str	r0, [sp, #20]
 800d624:	4658      	mov	r0, fp
 800d626:	f004 fa07 	bl	8011a38 <poller_thread>
 800d62a:	4601      	mov	r1, r0
 800d62c:	9003      	str	r0, [sp, #12]
 800d62e:	9805      	ldr	r0, [sp, #20]
 800d630:	f003 ff9b 	bl	801156a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800d634:	2800      	cmp	r0, #0
 800d636:	dc1d      	bgt.n	800d674 <register_events+0x22c>
	return list->head == list;
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d63c:	9a02      	ldr	r2, [sp, #8]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d02a      	beq.n	800d698 <register_events+0x250>
 800d642:	9404      	str	r4, [sp, #16]
 800d644:	9505      	str	r5, [sp, #20]
 800d646:	9d02      	ldr	r5, [sp, #8]
 800d648:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d64a:	2c00      	cmp	r4, #0
 800d64c:	d02a      	beq.n	800d6a4 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800d64e:	68a0      	ldr	r0, [r4, #8]
 800d650:	f004 f9f2 	bl	8011a38 <poller_thread>
 800d654:	4601      	mov	r1, r0
 800d656:	9803      	ldr	r0, [sp, #12]
 800d658:	f003 ff87 	bl	801156a <z_sched_prio_cmp>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	dc11      	bgt.n	800d684 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d660:	b31c      	cbz	r4, 800d6aa <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800d662:	686b      	ldr	r3, [r5, #4]
 800d664:	429c      	cmp	r4, r3
 800d666:	d02a      	beq.n	800d6be <register_events+0x276>
 800d668:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d66a:	2c00      	cmp	r4, #0
 800d66c:	d1ed      	bne.n	800d64a <register_events+0x202>
 800d66e:	9c04      	ldr	r4, [sp, #16]
 800d670:	9d05      	ldr	r5, [sp, #20]
 800d672:	e01c      	b.n	800d6ae <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800d674:	9a02      	ldr	r2, [sp, #8]
 800d676:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d678:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d67c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d67e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d680:	6054      	str	r4, [r2, #4]
		return;
 800d682:	e79b      	b.n	800d5bc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800d684:	9d05      	ldr	r5, [sp, #20]
 800d686:	4622      	mov	r2, r4
 800d688:	9c04      	ldr	r4, [sp, #16]
 800d68a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800d68c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800d68e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800d692:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800d694:	6054      	str	r4, [r2, #4]
			return;
 800d696:	e791      	b.n	800d5bc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d698:	2300      	movs	r3, #0
 800d69a:	9404      	str	r4, [sp, #16]
 800d69c:	9505      	str	r5, [sp, #20]
 800d69e:	9d02      	ldr	r5, [sp, #8]
 800d6a0:	461c      	mov	r4, r3
 800d6a2:	e7d2      	b.n	800d64a <register_events+0x202>
 800d6a4:	9c04      	ldr	r4, [sp, #16]
 800d6a6:	9d05      	ldr	r5, [sp, #20]
 800d6a8:	e001      	b.n	800d6ae <register_events+0x266>
 800d6aa:	9c04      	ldr	r4, [sp, #16]
 800d6ac:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800d6ae:	9a02      	ldr	r2, [sp, #8]
 800d6b0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d6b2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d6b6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d6b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d6ba:	6054      	str	r4, [r2, #4]
}
 800d6bc:	e77e      	b.n	800d5bc <register_events+0x174>
 800d6be:	9c04      	ldr	r4, [sp, #16]
 800d6c0:	9d05      	ldr	r5, [sp, #20]
 800d6c2:	e7f4      	b.n	800d6ae <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800d6c4:	6922      	ldr	r2, [r4, #16]
 800d6c6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800d6c8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d02c      	beq.n	800d728 <register_events+0x2e0>
 800d6ce:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800d6d0:	b353      	cbz	r3, 800d728 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d6d2:	6898      	ldr	r0, [r3, #8]
 800d6d4:	f004 f9b0 	bl	8011a38 <poller_thread>
 800d6d8:	9004      	str	r0, [sp, #16]
 800d6da:	4658      	mov	r0, fp
 800d6dc:	f004 f9ac 	bl	8011a38 <poller_thread>
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	9003      	str	r0, [sp, #12]
 800d6e4:	9804      	ldr	r0, [sp, #16]
 800d6e6:	f003 ff40 	bl	801156a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	dc1c      	bgt.n	800d728 <register_events+0x2e0>
	return list->head == list;
 800d6ee:	9b02      	ldr	r3, [sp, #8]
 800d6f0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d02a      	beq.n	800d74c <register_events+0x304>
 800d6f6:	9404      	str	r4, [sp, #16]
 800d6f8:	9505      	str	r5, [sp, #20]
 800d6fa:	9d02      	ldr	r5, [sp, #8]
 800d6fc:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	d02a      	beq.n	800d758 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800d702:	68a0      	ldr	r0, [r4, #8]
 800d704:	f004 f998 	bl	8011a38 <poller_thread>
 800d708:	4601      	mov	r1, r0
 800d70a:	9803      	ldr	r0, [sp, #12]
 800d70c:	f003 ff2d 	bl	801156a <z_sched_prio_cmp>
 800d710:	2800      	cmp	r0, #0
 800d712:	dc11      	bgt.n	800d738 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d714:	b31c      	cbz	r4, 800d75e <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800d716:	686b      	ldr	r3, [r5, #4]
 800d718:	429c      	cmp	r4, r3
 800d71a:	d02a      	beq.n	800d772 <register_events+0x32a>
 800d71c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d71e:	2c00      	cmp	r4, #0
 800d720:	d1ed      	bne.n	800d6fe <register_events+0x2b6>
 800d722:	9c04      	ldr	r4, [sp, #16]
 800d724:	9d05      	ldr	r5, [sp, #20]
 800d726:	e01c      	b.n	800d762 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800d728:	9a02      	ldr	r2, [sp, #8]
 800d72a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d72c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d730:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d732:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d734:	6054      	str	r4, [r2, #4]
		return;
 800d736:	e741      	b.n	800d5bc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800d738:	9d05      	ldr	r5, [sp, #20]
 800d73a:	4622      	mov	r2, r4
 800d73c:	9c04      	ldr	r4, [sp, #16]
 800d73e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800d740:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800d742:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800d746:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800d748:	6054      	str	r4, [r2, #4]
			return;
 800d74a:	e737      	b.n	800d5bc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d74c:	2300      	movs	r3, #0
 800d74e:	9404      	str	r4, [sp, #16]
 800d750:	9505      	str	r5, [sp, #20]
 800d752:	9d02      	ldr	r5, [sp, #8]
 800d754:	461c      	mov	r4, r3
 800d756:	e7d2      	b.n	800d6fe <register_events+0x2b6>
 800d758:	9c04      	ldr	r4, [sp, #16]
 800d75a:	9d05      	ldr	r5, [sp, #20]
 800d75c:	e001      	b.n	800d762 <register_events+0x31a>
 800d75e:	9c04      	ldr	r4, [sp, #16]
 800d760:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800d762:	9a02      	ldr	r2, [sp, #8]
 800d764:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d766:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d76a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d76c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d76e:	6054      	str	r4, [r2, #4]
}
 800d770:	e724      	b.n	800d5bc <register_events+0x174>
 800d772:	9c04      	ldr	r4, [sp, #16]
 800d774:	9d05      	ldr	r5, [sp, #20]
 800d776:	e7f4      	b.n	800d762 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d780:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800d782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800d784:	429a      	cmp	r2, r3
 800d786:	d02d      	beq.n	800d7e4 <register_events+0x39c>
 800d788:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800d78a:	b35b      	cbz	r3, 800d7e4 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800d78c:	6898      	ldr	r0, [r3, #8]
 800d78e:	f004 f953 	bl	8011a38 <poller_thread>
 800d792:	9005      	str	r0, [sp, #20]
 800d794:	4658      	mov	r0, fp
 800d796:	f004 f94f 	bl	8011a38 <poller_thread>
 800d79a:	4601      	mov	r1, r0
 800d79c:	9003      	str	r0, [sp, #12]
 800d79e:	9805      	ldr	r0, [sp, #20]
 800d7a0:	f003 fee3 	bl	801156a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	dc1d      	bgt.n	800d7e4 <register_events+0x39c>
	return list->head == list;
 800d7a8:	9b04      	ldr	r3, [sp, #16]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d7ac:	9a02      	ldr	r2, [sp, #8]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d02a      	beq.n	800d808 <register_events+0x3c0>
 800d7b2:	9404      	str	r4, [sp, #16]
 800d7b4:	9505      	str	r5, [sp, #20]
 800d7b6:	9d02      	ldr	r5, [sp, #8]
 800d7b8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	d02a      	beq.n	800d814 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800d7be:	68a0      	ldr	r0, [r4, #8]
 800d7c0:	f004 f93a 	bl	8011a38 <poller_thread>
 800d7c4:	4601      	mov	r1, r0
 800d7c6:	9803      	ldr	r0, [sp, #12]
 800d7c8:	f003 fecf 	bl	801156a <z_sched_prio_cmp>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	dc11      	bgt.n	800d7f4 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d7d0:	b31c      	cbz	r4, 800d81a <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800d7d2:	686b      	ldr	r3, [r5, #4]
 800d7d4:	429c      	cmp	r4, r3
 800d7d6:	d02a      	beq.n	800d82e <register_events+0x3e6>
 800d7d8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d7da:	2c00      	cmp	r4, #0
 800d7dc:	d1ed      	bne.n	800d7ba <register_events+0x372>
 800d7de:	9c04      	ldr	r4, [sp, #16]
 800d7e0:	9d05      	ldr	r5, [sp, #20]
 800d7e2:	e01c      	b.n	800d81e <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800d7e4:	9a02      	ldr	r2, [sp, #8]
 800d7e6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d7e8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d7ec:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d7ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d7f0:	6054      	str	r4, [r2, #4]
		return;
 800d7f2:	e6e3      	b.n	800d5bc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800d7f4:	9d05      	ldr	r5, [sp, #20]
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	9c04      	ldr	r4, [sp, #16]
 800d7fa:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800d7fc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800d7fe:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800d802:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800d804:	6054      	str	r4, [r2, #4]
			return;
 800d806:	e6d9      	b.n	800d5bc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800d808:	2300      	movs	r3, #0
 800d80a:	9404      	str	r4, [sp, #16]
 800d80c:	9505      	str	r5, [sp, #20]
 800d80e:	9d02      	ldr	r5, [sp, #8]
 800d810:	461c      	mov	r4, r3
 800d812:	e7d2      	b.n	800d7ba <register_events+0x372>
 800d814:	9c04      	ldr	r4, [sp, #16]
 800d816:	9d05      	ldr	r5, [sp, #20]
 800d818:	e001      	b.n	800d81e <register_events+0x3d6>
 800d81a:	9c04      	ldr	r4, [sp, #16]
 800d81c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800d81e:	9a02      	ldr	r2, [sp, #8]
 800d820:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800d822:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800d826:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800d828:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800d82a:	6054      	str	r4, [r2, #4]
}
 800d82c:	e6c6      	b.n	800d5bc <register_events+0x174>
 800d82e:	9c04      	ldr	r4, [sp, #16]
 800d830:	9d05      	ldr	r5, [sp, #20]
 800d832:	e7f4      	b.n	800d81e <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800d834:	9801      	ldr	r0, [sp, #4]
 800d836:	b007      	add	sp, #28
 800d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d83c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800d83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	4605      	mov	r5, r0
 800d844:	4690      	mov	r8, r2
 800d846:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800d848:	4b4f      	ldr	r3, [pc, #316]	; (800d988 <z_impl_k_poll+0x14c>)
 800d84a:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800d84c:	2301      	movs	r3, #1
 800d84e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800d852:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800d856:	ea57 0302 	orrs.w	r3, r7, r2
 800d85a:	bf0c      	ite	eq
 800d85c:	2301      	moveq	r3, #1
 800d85e:	2300      	movne	r3, #0
 800d860:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800d864:	f7ff fdf0 	bl	800d448 <register_events>
 800d868:	4604      	mov	r4, r0
 800d86a:	f04f 0310 	mov.w	r3, #16
 800d86e:	f3ef 8111 	mrs	r1, BASEPRI
 800d872:	f383 8812 	msr	BASEPRI_MAX, r3
 800d876:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800d87a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800d87e:	b1b3      	cbz	r3, 800d8ae <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800d880:	2300      	movs	r3, #0
 800d882:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d886:	ea57 0308 	orrs.w	r3, r7, r8
 800d88a:	d043      	beq.n	800d914 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800d88c:	f8cd 8000 	str.w	r8, [sp]
 800d890:	9701      	str	r7, [sp, #4]
 800d892:	4a3e      	ldr	r2, [pc, #248]	; (800d98c <z_impl_k_poll+0x150>)
 800d894:	483e      	ldr	r0, [pc, #248]	; (800d990 <z_impl_k_poll+0x154>)
 800d896:	f7ff f97f 	bl	800cb98 <z_pend_curr>
 800d89a:	f04f 0310 	mov.w	r3, #16
 800d89e:	f3ef 8611 	mrs	r6, BASEPRI
 800d8a2:	f383 8812 	msr	BASEPRI_MAX, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	46b4      	mov	ip, r6
	while (num_events--) {
 800d8ac:	e04c      	b.n	800d948 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800d8ae:	460e      	mov	r6, r1
	while (num_events--) {
 800d8b0:	e00c      	b.n	800d8cc <z_impl_k_poll+0x90>
	__asm__ volatile(
 800d8b2:	f386 8811 	msr	BASEPRI, r6
 800d8b6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800d8ba:	f04f 0310 	mov.w	r3, #16
 800d8be:	f3ef 8611 	mrs	r6, BASEPRI
 800d8c2:	f383 8812 	msr	BASEPRI_MAX, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	1e60      	subs	r0, r4, #1
 800d8ce:	b1dc      	cbz	r4, 800d908 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800d8d0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d8d4:	009f      	lsls	r7, r3, #2
 800d8d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800d8da:	2200      	movs	r2, #0
 800d8dc:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800d8de:	7b5a      	ldrb	r2, [r3, #13]
 800d8e0:	f002 021f 	and.w	r2, r2, #31
 800d8e4:	2a08      	cmp	r2, #8
 800d8e6:	d8e4      	bhi.n	800d8b2 <z_impl_k_poll+0x76>
 800d8e8:	2401      	movs	r4, #1
 800d8ea:	fa04 f202 	lsl.w	r2, r4, r2
 800d8ee:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800d8f2:	d0de      	beq.n	800d8b2 <z_impl_k_poll+0x76>
	return node->next != NULL;
 800d8f4:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	d0db      	beq.n	800d8b2 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800d8fa:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800d8fc:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800d8fe:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800d900:	2200      	movs	r2, #0
 800d902:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800d904:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800d906:	e7d4      	b.n	800d8b2 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800d908:	f381 8811 	msr	BASEPRI, r1
 800d90c:	f3bf 8f6f 	isb	sy
		return 0;
 800d910:	4620      	mov	r0, r4
 800d912:	e036      	b.n	800d982 <z_impl_k_poll+0x146>
 800d914:	f381 8811 	msr	BASEPRI, r1
 800d918:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800d91c:	f06f 000a 	mvn.w	r0, #10
 800d920:	e02f      	b.n	800d982 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800d922:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800d924:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800d926:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800d928:	2200      	movs	r2, #0
 800d92a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800d92c:	605a      	str	r2, [r3, #4]
 800d92e:	f38c 8811 	msr	BASEPRI, ip
 800d932:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800d936:	f04f 0310 	mov.w	r3, #16
 800d93a:	f3ef 8c11 	mrs	ip, BASEPRI
 800d93e:	f383 8812 	msr	BASEPRI_MAX, r3
 800d942:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800d946:	4674      	mov	r4, lr
 800d948:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800d94c:	b1ac      	cbz	r4, 800d97a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800d94e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800d952:	009c      	lsls	r4, r3, #2
 800d954:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800d958:	2200      	movs	r2, #0
 800d95a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800d95c:	7b5a      	ldrb	r2, [r3, #13]
 800d95e:	f002 021f 	and.w	r2, r2, #31
 800d962:	2a08      	cmp	r2, #8
 800d964:	d8e3      	bhi.n	800d92e <z_impl_k_poll+0xf2>
 800d966:	2101      	movs	r1, #1
 800d968:	fa01 f202 	lsl.w	r2, r1, r2
 800d96c:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800d970:	d0dd      	beq.n	800d92e <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800d972:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800d974:	2a00      	cmp	r2, #0
 800d976:	d1d4      	bne.n	800d922 <z_impl_k_poll+0xe6>
 800d978:	e7d9      	b.n	800d92e <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800d97a:	f386 8811 	msr	BASEPRI, r6
 800d97e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800d982:	b002      	add	sp, #8
 800d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d988:	200016d8 	.word	0x200016d8
 800d98c:	20000284 	.word	0x20000284
 800d990:	20001724 	.word	0x20001724

0800d994 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4603      	mov	r3, r0
	__asm__ volatile(
 800d998:	f04f 0210 	mov.w	r2, #16
 800d99c:	f3ef 8511 	mrs	r5, BASEPRI
 800d9a0:	f382 8812 	msr	BASEPRI_MAX, r2
 800d9a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800d9a8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800d9ae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800d9b0:	4283      	cmp	r3, r0
 800d9b2:	d011      	beq.n	800d9d8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800d9b4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800d9b6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800d9b8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d9ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d9c0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800d9c2:	b148      	cbz	r0, 800d9d8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	f004 f883 	bl	8011ad0 <signal_poll_event>
 800d9ca:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	4805      	ldr	r0, [pc, #20]	; (800d9e4 <z_impl_k_poll_signal_raise+0x50>)
 800d9d0:	f7fe ff72 	bl	800c8b8 <z_reschedule>
	return rc;
}
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800d9d8:	f385 8811 	msr	BASEPRI, r5
 800d9dc:	f3bf 8f6f 	isb	sy
		return 0;
 800d9e0:	2400      	movs	r4, #0
 800d9e2:	e7f7      	b.n	800d9d4 <z_impl_k_poll_signal_raise+0x40>
 800d9e4:	20001724 	.word	0x20001724

0800d9e8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800d9e8:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800d9ea:	4a03      	ldr	r2, [pc, #12]	; (800d9f8 <boot_banner+0x10>)
 800d9ec:	4903      	ldr	r1, [pc, #12]	; (800d9fc <boot_banner+0x14>)
 800d9ee:	4804      	ldr	r0, [pc, #16]	; (800da00 <boot_banner+0x18>)
 800d9f0:	f001 fc61 	bl	800f2b6 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800d9f4:	bd08      	pop	{r3, pc}
 800d9f6:	bf00      	nop
 800d9f8:	08013208 	.word	0x08013208
 800d9fc:	08013f50 	.word	0x08013f50
 800da00:	08013f70 	.word	0x08013f70

0800da04 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800da04:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800da06:	4c06      	ldr	r4, [pc, #24]	; (800da20 <statics_init+0x1c>)
 800da08:	e005      	b.n	800da16 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800da0a:	68a2      	ldr	r2, [r4, #8]
 800da0c:	6861      	ldr	r1, [r4, #4]
 800da0e:	4620      	mov	r0, r4
 800da10:	f004 f8af 	bl	8011b72 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800da14:	3418      	adds	r4, #24
 800da16:	4b03      	ldr	r3, [pc, #12]	; (800da24 <statics_init+0x20>)
 800da18:	429c      	cmp	r4, r3
 800da1a:	d3f6      	bcc.n	800da0a <statics_init+0x6>
		}
	}
	return 0;
}
 800da1c:	2000      	movs	r0, #0
 800da1e:	bd10      	pop	{r4, pc}
 800da20:	20000568 	.word	0x20000568
 800da24:	20000568 	.word	0x20000568

0800da28 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800da28:	b510      	push	{r4, lr}
 800da2a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800da2c:	4b08      	ldr	r3, [pc, #32]	; (800da50 <k_sys_work_q_init+0x28>)
 800da2e:	9302      	str	r3, [sp, #8]
 800da30:	2400      	movs	r4, #0
 800da32:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800da36:	ab02      	add	r3, sp, #8
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4623      	mov	r3, r4
 800da3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da40:	4904      	ldr	r1, [pc, #16]	; (800da54 <k_sys_work_q_init+0x2c>)
 800da42:	4805      	ldr	r0, [pc, #20]	; (800da58 <k_sys_work_q_init+0x30>)
 800da44:	f7fe fe96 	bl	800c774 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800da48:	4620      	mov	r0, r4
 800da4a:	b004      	add	sp, #16
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	bf00      	nop
 800da50:	08013f98 	.word	0x08013f98
 800da54:	20004060 	.word	0x20004060
 800da58:	20000e68 	.word	0x20000e68

0800da5c <malloc>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <malloc+0xc>)
 800da5e:	4601      	mov	r1, r0
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f000 b84d 	b.w	800db00 <_malloc_r>
 800da66:	bf00      	nop
 800da68:	2000028c 	.word	0x2000028c

0800da6c <_free_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4605      	mov	r5, r0
 800da70:	2900      	cmp	r1, #0
 800da72:	d041      	beq.n	800daf8 <_free_r+0x8c>
 800da74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da78:	1f0c      	subs	r4, r1, #4
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bfb8      	it	lt
 800da7e:	18e4      	addlt	r4, r4, r3
 800da80:	f000 fbfc 	bl	800e27c <__malloc_lock>
 800da84:	4a1d      	ldr	r2, [pc, #116]	; (800dafc <_free_r+0x90>)
 800da86:	6813      	ldr	r3, [r2, #0]
 800da88:	b933      	cbnz	r3, 800da98 <_free_r+0x2c>
 800da8a:	6063      	str	r3, [r4, #4]
 800da8c:	6014      	str	r4, [r2, #0]
 800da8e:	4628      	mov	r0, r5
 800da90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da94:	f000 bbf8 	b.w	800e288 <__malloc_unlock>
 800da98:	42a3      	cmp	r3, r4
 800da9a:	d908      	bls.n	800daae <_free_r+0x42>
 800da9c:	6820      	ldr	r0, [r4, #0]
 800da9e:	1821      	adds	r1, r4, r0
 800daa0:	428b      	cmp	r3, r1
 800daa2:	bf01      	itttt	eq
 800daa4:	6819      	ldreq	r1, [r3, #0]
 800daa6:	685b      	ldreq	r3, [r3, #4]
 800daa8:	1809      	addeq	r1, r1, r0
 800daaa:	6021      	streq	r1, [r4, #0]
 800daac:	e7ed      	b.n	800da8a <_free_r+0x1e>
 800daae:	461a      	mov	r2, r3
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	b10b      	cbz	r3, 800dab8 <_free_r+0x4c>
 800dab4:	42a3      	cmp	r3, r4
 800dab6:	d9fa      	bls.n	800daae <_free_r+0x42>
 800dab8:	6811      	ldr	r1, [r2, #0]
 800daba:	1850      	adds	r0, r2, r1
 800dabc:	42a0      	cmp	r0, r4
 800dabe:	d10b      	bne.n	800dad8 <_free_r+0x6c>
 800dac0:	6820      	ldr	r0, [r4, #0]
 800dac2:	4401      	add	r1, r0
 800dac4:	1850      	adds	r0, r2, r1
 800dac6:	4283      	cmp	r3, r0
 800dac8:	6011      	str	r1, [r2, #0]
 800daca:	d1e0      	bne.n	800da8e <_free_r+0x22>
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	6053      	str	r3, [r2, #4]
 800dad2:	4401      	add	r1, r0
 800dad4:	6011      	str	r1, [r2, #0]
 800dad6:	e7da      	b.n	800da8e <_free_r+0x22>
 800dad8:	d902      	bls.n	800dae0 <_free_r+0x74>
 800dada:	230c      	movs	r3, #12
 800dadc:	602b      	str	r3, [r5, #0]
 800dade:	e7d6      	b.n	800da8e <_free_r+0x22>
 800dae0:	6820      	ldr	r0, [r4, #0]
 800dae2:	1821      	adds	r1, r4, r0
 800dae4:	428b      	cmp	r3, r1
 800dae6:	bf04      	itt	eq
 800dae8:	6819      	ldreq	r1, [r3, #0]
 800daea:	685b      	ldreq	r3, [r3, #4]
 800daec:	6063      	str	r3, [r4, #4]
 800daee:	bf04      	itt	eq
 800daf0:	1809      	addeq	r1, r1, r0
 800daf2:	6021      	streq	r1, [r4, #0]
 800daf4:	6054      	str	r4, [r2, #4]
 800daf6:	e7ca      	b.n	800da8e <_free_r+0x22>
 800daf8:	bd38      	pop	{r3, r4, r5, pc}
 800dafa:	bf00      	nop
 800dafc:	20001728 	.word	0x20001728

0800db00 <_malloc_r>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	1ccd      	adds	r5, r1, #3
 800db04:	f025 0503 	bic.w	r5, r5, #3
 800db08:	3508      	adds	r5, #8
 800db0a:	2d0c      	cmp	r5, #12
 800db0c:	bf38      	it	cc
 800db0e:	250c      	movcc	r5, #12
 800db10:	2d00      	cmp	r5, #0
 800db12:	4606      	mov	r6, r0
 800db14:	db01      	blt.n	800db1a <_malloc_r+0x1a>
 800db16:	42a9      	cmp	r1, r5
 800db18:	d903      	bls.n	800db22 <_malloc_r+0x22>
 800db1a:	230c      	movs	r3, #12
 800db1c:	6033      	str	r3, [r6, #0]
 800db1e:	2000      	movs	r0, #0
 800db20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db22:	f000 fbab 	bl	800e27c <__malloc_lock>
 800db26:	4921      	ldr	r1, [pc, #132]	; (800dbac <_malloc_r+0xac>)
 800db28:	680a      	ldr	r2, [r1, #0]
 800db2a:	4614      	mov	r4, r2
 800db2c:	b99c      	cbnz	r4, 800db56 <_malloc_r+0x56>
 800db2e:	4f20      	ldr	r7, [pc, #128]	; (800dbb0 <_malloc_r+0xb0>)
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	b923      	cbnz	r3, 800db3e <_malloc_r+0x3e>
 800db34:	4621      	mov	r1, r4
 800db36:	4630      	mov	r0, r6
 800db38:	f000 fb8c 	bl	800e254 <_sbrk_r>
 800db3c:	6038      	str	r0, [r7, #0]
 800db3e:	4629      	mov	r1, r5
 800db40:	4630      	mov	r0, r6
 800db42:	f000 fb87 	bl	800e254 <_sbrk_r>
 800db46:	1c43      	adds	r3, r0, #1
 800db48:	d123      	bne.n	800db92 <_malloc_r+0x92>
 800db4a:	230c      	movs	r3, #12
 800db4c:	6033      	str	r3, [r6, #0]
 800db4e:	4630      	mov	r0, r6
 800db50:	f000 fb9a 	bl	800e288 <__malloc_unlock>
 800db54:	e7e3      	b.n	800db1e <_malloc_r+0x1e>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	1b5b      	subs	r3, r3, r5
 800db5a:	d417      	bmi.n	800db8c <_malloc_r+0x8c>
 800db5c:	2b0b      	cmp	r3, #11
 800db5e:	d903      	bls.n	800db68 <_malloc_r+0x68>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	441c      	add	r4, r3
 800db64:	6025      	str	r5, [r4, #0]
 800db66:	e004      	b.n	800db72 <_malloc_r+0x72>
 800db68:	6863      	ldr	r3, [r4, #4]
 800db6a:	42a2      	cmp	r2, r4
 800db6c:	bf0c      	ite	eq
 800db6e:	600b      	streq	r3, [r1, #0]
 800db70:	6053      	strne	r3, [r2, #4]
 800db72:	4630      	mov	r0, r6
 800db74:	f000 fb88 	bl	800e288 <__malloc_unlock>
 800db78:	f104 000b 	add.w	r0, r4, #11
 800db7c:	1d23      	adds	r3, r4, #4
 800db7e:	f020 0007 	bic.w	r0, r0, #7
 800db82:	1ac2      	subs	r2, r0, r3
 800db84:	d0cc      	beq.n	800db20 <_malloc_r+0x20>
 800db86:	1a1b      	subs	r3, r3, r0
 800db88:	50a3      	str	r3, [r4, r2]
 800db8a:	e7c9      	b.n	800db20 <_malloc_r+0x20>
 800db8c:	4622      	mov	r2, r4
 800db8e:	6864      	ldr	r4, [r4, #4]
 800db90:	e7cc      	b.n	800db2c <_malloc_r+0x2c>
 800db92:	1cc4      	adds	r4, r0, #3
 800db94:	f024 0403 	bic.w	r4, r4, #3
 800db98:	42a0      	cmp	r0, r4
 800db9a:	d0e3      	beq.n	800db64 <_malloc_r+0x64>
 800db9c:	1a21      	subs	r1, r4, r0
 800db9e:	4630      	mov	r0, r6
 800dba0:	f000 fb58 	bl	800e254 <_sbrk_r>
 800dba4:	3001      	adds	r0, #1
 800dba6:	d1dd      	bne.n	800db64 <_malloc_r+0x64>
 800dba8:	e7cf      	b.n	800db4a <_malloc_r+0x4a>
 800dbaa:	bf00      	nop
 800dbac:	20001728 	.word	0x20001728
 800dbb0:	2000172c 	.word	0x2000172c

0800dbb4 <_printf_float>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	b091      	sub	sp, #68	; 0x44
 800dbba:	460c      	mov	r4, r1
 800dbbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	461f      	mov	r7, r3
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	f000 fb55 	bl	800e274 <_localeconv_r>
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7f3 f941 	bl	8000e56 <strlen>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbdc:	900a      	str	r0, [sp, #40]	; 0x28
 800dbde:	3307      	adds	r3, #7
 800dbe0:	f023 0307 	bic.w	r3, r3, #7
 800dbe4:	f103 0208 	add.w	r2, r3, #8
 800dbe8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dbec:	f8d4 b000 	ldr.w	fp, [r4]
 800dbf0:	f8c8 2000 	str.w	r2, [r8]
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dbfc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dc00:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dc04:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc08:	4b9c      	ldr	r3, [pc, #624]	; (800de7c <_printf_float+0x2c8>)
 800dc0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f7f2 ff86 	bl	8000b20 <__aeabi_dcmpun>
 800dc14:	bb70      	cbnz	r0, 800dc74 <_printf_float+0xc0>
 800dc16:	4b99      	ldr	r3, [pc, #612]	; (800de7c <_printf_float+0x2c8>)
 800dc18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc1e:	4640      	mov	r0, r8
 800dc20:	f7f2 ff60 	bl	8000ae4 <__aeabi_dcmple>
 800dc24:	bb30      	cbnz	r0, 800dc74 <_printf_float+0xc0>
 800dc26:	2200      	movs	r2, #0
 800dc28:	2300      	movs	r3, #0
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	4651      	mov	r1, sl
 800dc2e:	f7f2 ff4f 	bl	8000ad0 <__aeabi_dcmplt>
 800dc32:	b110      	cbz	r0, 800dc3a <_printf_float+0x86>
 800dc34:	232d      	movs	r3, #45	; 0x2d
 800dc36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc3a:	4b91      	ldr	r3, [pc, #580]	; (800de80 <_printf_float+0x2cc>)
 800dc3c:	4891      	ldr	r0, [pc, #580]	; (800de84 <_printf_float+0x2d0>)
 800dc3e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dc42:	bf94      	ite	ls
 800dc44:	4698      	movls	r8, r3
 800dc46:	4680      	movhi	r8, r0
 800dc48:	2303      	movs	r3, #3
 800dc4a:	6123      	str	r3, [r4, #16]
 800dc4c:	f02b 0304 	bic.w	r3, fp, #4
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	f04f 0a00 	mov.w	sl, #0
 800dc56:	9700      	str	r7, [sp, #0]
 800dc58:	4633      	mov	r3, r6
 800dc5a:	aa0f      	add	r2, sp, #60	; 0x3c
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f004 f843 	bl	8011cea <_printf_common>
 800dc64:	3001      	adds	r0, #1
 800dc66:	f040 808f 	bne.w	800dd88 <_printf_float+0x1d4>
 800dc6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc6e:	b011      	add	sp, #68	; 0x44
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc74:	4642      	mov	r2, r8
 800dc76:	4653      	mov	r3, sl
 800dc78:	4640      	mov	r0, r8
 800dc7a:	4651      	mov	r1, sl
 800dc7c:	f7f2 ff50 	bl	8000b20 <__aeabi_dcmpun>
 800dc80:	b140      	cbz	r0, 800dc94 <_printf_float+0xe0>
 800dc82:	f1ba 0f00 	cmp.w	sl, #0
 800dc86:	bfbc      	itt	lt
 800dc88:	232d      	movlt	r3, #45	; 0x2d
 800dc8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc8e:	487e      	ldr	r0, [pc, #504]	; (800de88 <_printf_float+0x2d4>)
 800dc90:	4b7e      	ldr	r3, [pc, #504]	; (800de8c <_printf_float+0x2d8>)
 800dc92:	e7d4      	b.n	800dc3e <_printf_float+0x8a>
 800dc94:	6863      	ldr	r3, [r4, #4]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dc9c:	d142      	bne.n	800dd24 <_printf_float+0x170>
 800dc9e:	2306      	movs	r3, #6
 800dca0:	6063      	str	r3, [r4, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	9206      	str	r2, [sp, #24]
 800dca6:	aa0e      	add	r2, sp, #56	; 0x38
 800dca8:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800dcac:	aa0d      	add	r2, sp, #52	; 0x34
 800dcae:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800dcb2:	9203      	str	r2, [sp, #12]
 800dcb4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800dcb8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	6863      	ldr	r3, [r4, #4]
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	4642      	mov	r2, r8
 800dcc4:	4653      	mov	r3, sl
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	910b      	str	r1, [sp, #44]	; 0x2c
 800dcca:	f003 ff70 	bl	8011bae <__cvt>
 800dcce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcd0:	2947      	cmp	r1, #71	; 0x47
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dcd6:	d108      	bne.n	800dcea <_printf_float+0x136>
 800dcd8:	1cc8      	adds	r0, r1, #3
 800dcda:	db02      	blt.n	800dce2 <_printf_float+0x12e>
 800dcdc:	6863      	ldr	r3, [r4, #4]
 800dcde:	4299      	cmp	r1, r3
 800dce0:	dd40      	ble.n	800dd64 <_printf_float+0x1b0>
 800dce2:	f1a9 0902 	sub.w	r9, r9, #2
 800dce6:	fa5f f989 	uxtb.w	r9, r9
 800dcea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dcee:	d81f      	bhi.n	800dd30 <_printf_float+0x17c>
 800dcf0:	3901      	subs	r1, #1
 800dcf2:	464a      	mov	r2, r9
 800dcf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcf8:	910d      	str	r1, [sp, #52]	; 0x34
 800dcfa:	f003 ffb8 	bl	8011c6e <__exponent>
 800dcfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd00:	1813      	adds	r3, r2, r0
 800dd02:	2a01      	cmp	r2, #1
 800dd04:	4682      	mov	sl, r0
 800dd06:	6123      	str	r3, [r4, #16]
 800dd08:	dc02      	bgt.n	800dd10 <_printf_float+0x15c>
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	07d2      	lsls	r2, r2, #31
 800dd0e:	d501      	bpl.n	800dd14 <_printf_float+0x160>
 800dd10:	3301      	adds	r3, #1
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d09c      	beq.n	800dc56 <_printf_float+0xa2>
 800dd1c:	232d      	movs	r3, #45	; 0x2d
 800dd1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd22:	e798      	b.n	800dc56 <_printf_float+0xa2>
 800dd24:	2947      	cmp	r1, #71	; 0x47
 800dd26:	d1bc      	bne.n	800dca2 <_printf_float+0xee>
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1ba      	bne.n	800dca2 <_printf_float+0xee>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e7b7      	b.n	800dca0 <_printf_float+0xec>
 800dd30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dd34:	d118      	bne.n	800dd68 <_printf_float+0x1b4>
 800dd36:	2900      	cmp	r1, #0
 800dd38:	6863      	ldr	r3, [r4, #4]
 800dd3a:	dd0b      	ble.n	800dd54 <_printf_float+0x1a0>
 800dd3c:	6121      	str	r1, [r4, #16]
 800dd3e:	b913      	cbnz	r3, 800dd46 <_printf_float+0x192>
 800dd40:	6822      	ldr	r2, [r4, #0]
 800dd42:	07d0      	lsls	r0, r2, #31
 800dd44:	d502      	bpl.n	800dd4c <_printf_float+0x198>
 800dd46:	3301      	adds	r3, #1
 800dd48:	440b      	add	r3, r1
 800dd4a:	6123      	str	r3, [r4, #16]
 800dd4c:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd4e:	f04f 0a00 	mov.w	sl, #0
 800dd52:	e7df      	b.n	800dd14 <_printf_float+0x160>
 800dd54:	b913      	cbnz	r3, 800dd5c <_printf_float+0x1a8>
 800dd56:	6822      	ldr	r2, [r4, #0]
 800dd58:	07d2      	lsls	r2, r2, #31
 800dd5a:	d501      	bpl.n	800dd60 <_printf_float+0x1ac>
 800dd5c:	3302      	adds	r3, #2
 800dd5e:	e7f4      	b.n	800dd4a <_printf_float+0x196>
 800dd60:	2301      	movs	r3, #1
 800dd62:	e7f2      	b.n	800dd4a <_printf_float+0x196>
 800dd64:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd6a:	4299      	cmp	r1, r3
 800dd6c:	db05      	blt.n	800dd7a <_printf_float+0x1c6>
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	6121      	str	r1, [r4, #16]
 800dd72:	07d8      	lsls	r0, r3, #31
 800dd74:	d5ea      	bpl.n	800dd4c <_printf_float+0x198>
 800dd76:	1c4b      	adds	r3, r1, #1
 800dd78:	e7e7      	b.n	800dd4a <_printf_float+0x196>
 800dd7a:	2900      	cmp	r1, #0
 800dd7c:	bfd4      	ite	le
 800dd7e:	f1c1 0202 	rsble	r2, r1, #2
 800dd82:	2201      	movgt	r2, #1
 800dd84:	4413      	add	r3, r2
 800dd86:	e7e0      	b.n	800dd4a <_printf_float+0x196>
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	055a      	lsls	r2, r3, #21
 800dd8c:	d407      	bmi.n	800dd9e <_printf_float+0x1ea>
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	4642      	mov	r2, r8
 800dd92:	4631      	mov	r1, r6
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b8      	blx	r7
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d12b      	bne.n	800ddf4 <_printf_float+0x240>
 800dd9c:	e765      	b.n	800dc6a <_printf_float+0xb6>
 800dd9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dda2:	f240 80dc 	bls.w	800df5e <_printf_float+0x3aa>
 800dda6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2300      	movs	r3, #0
 800ddae:	f7f2 fe85 	bl	8000abc <__aeabi_dcmpeq>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d033      	beq.n	800de1e <_printf_float+0x26a>
 800ddb6:	4a36      	ldr	r2, [pc, #216]	; (800de90 <_printf_float+0x2dc>)
 800ddb8:	2301      	movs	r3, #1
 800ddba:	4631      	mov	r1, r6
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47b8      	blx	r7
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	f43f af52 	beq.w	800dc6a <_printf_float+0xb6>
 800ddc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	db02      	blt.n	800ddd4 <_printf_float+0x220>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	07d8      	lsls	r0, r3, #31
 800ddd2:	d50f      	bpl.n	800ddf4 <_printf_float+0x240>
 800ddd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddd8:	4631      	mov	r1, r6
 800ddda:	4628      	mov	r0, r5
 800dddc:	47b8      	blx	r7
 800ddde:	3001      	adds	r0, #1
 800dde0:	f43f af43 	beq.w	800dc6a <_printf_float+0xb6>
 800dde4:	f04f 0800 	mov.w	r8, #0
 800dde8:	f104 091a 	add.w	r9, r4, #26
 800ddec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	4543      	cmp	r3, r8
 800ddf2:	dc09      	bgt.n	800de08 <_printf_float+0x254>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	079b      	lsls	r3, r3, #30
 800ddf8:	f100 8101 	bmi.w	800dffe <_printf_float+0x44a>
 800ddfc:	68e0      	ldr	r0, [r4, #12]
 800ddfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de00:	4298      	cmp	r0, r3
 800de02:	bfb8      	it	lt
 800de04:	4618      	movlt	r0, r3
 800de06:	e732      	b.n	800dc6e <_printf_float+0xba>
 800de08:	2301      	movs	r3, #1
 800de0a:	464a      	mov	r2, r9
 800de0c:	4631      	mov	r1, r6
 800de0e:	4628      	mov	r0, r5
 800de10:	47b8      	blx	r7
 800de12:	3001      	adds	r0, #1
 800de14:	f43f af29 	beq.w	800dc6a <_printf_float+0xb6>
 800de18:	f108 0801 	add.w	r8, r8, #1
 800de1c:	e7e6      	b.n	800ddec <_printf_float+0x238>
 800de1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de20:	2b00      	cmp	r3, #0
 800de22:	dc37      	bgt.n	800de94 <_printf_float+0x2e0>
 800de24:	4a1a      	ldr	r2, [pc, #104]	; (800de90 <_printf_float+0x2dc>)
 800de26:	2301      	movs	r3, #1
 800de28:	4631      	mov	r1, r6
 800de2a:	4628      	mov	r0, r5
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	f43f af1b 	beq.w	800dc6a <_printf_float+0xb6>
 800de34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800de38:	4313      	orrs	r3, r2
 800de3a:	d102      	bne.n	800de42 <_printf_float+0x28e>
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	07d9      	lsls	r1, r3, #31
 800de40:	d5d8      	bpl.n	800ddf4 <_printf_float+0x240>
 800de42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de46:	4631      	mov	r1, r6
 800de48:	4628      	mov	r0, r5
 800de4a:	47b8      	blx	r7
 800de4c:	3001      	adds	r0, #1
 800de4e:	f43f af0c 	beq.w	800dc6a <_printf_float+0xb6>
 800de52:	f04f 0900 	mov.w	r9, #0
 800de56:	f104 0a1a 	add.w	sl, r4, #26
 800de5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de5c:	425b      	negs	r3, r3
 800de5e:	454b      	cmp	r3, r9
 800de60:	dc01      	bgt.n	800de66 <_printf_float+0x2b2>
 800de62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de64:	e794      	b.n	800dd90 <_printf_float+0x1dc>
 800de66:	2301      	movs	r3, #1
 800de68:	4652      	mov	r2, sl
 800de6a:	4631      	mov	r1, r6
 800de6c:	4628      	mov	r0, r5
 800de6e:	47b8      	blx	r7
 800de70:	3001      	adds	r0, #1
 800de72:	f43f aefa 	beq.w	800dc6a <_printf_float+0xb6>
 800de76:	f109 0901 	add.w	r9, r9, #1
 800de7a:	e7ee      	b.n	800de5a <_printf_float+0x2a6>
 800de7c:	7fefffff 	.word	0x7fefffff
 800de80:	08014115 	.word	0x08014115
 800de84:	08014119 	.word	0x08014119
 800de88:	08014121 	.word	0x08014121
 800de8c:	0801411d 	.word	0x0801411d
 800de90:	08014125 	.word	0x08014125
 800de94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de98:	429a      	cmp	r2, r3
 800de9a:	bfa8      	it	ge
 800de9c:	461a      	movge	r2, r3
 800de9e:	2a00      	cmp	r2, #0
 800dea0:	4691      	mov	r9, r2
 800dea2:	dc37      	bgt.n	800df14 <_printf_float+0x360>
 800dea4:	f04f 0b00 	mov.w	fp, #0
 800dea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deac:	f104 021a 	add.w	r2, r4, #26
 800deb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800deb4:	ebaa 0309 	sub.w	r3, sl, r9
 800deb8:	455b      	cmp	r3, fp
 800deba:	dc33      	bgt.n	800df24 <_printf_float+0x370>
 800debc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dec0:	429a      	cmp	r2, r3
 800dec2:	db3b      	blt.n	800df3c <_printf_float+0x388>
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	07da      	lsls	r2, r3, #31
 800dec8:	d438      	bmi.n	800df3c <_printf_float+0x388>
 800deca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800decc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dece:	eba3 020a 	sub.w	r2, r3, sl
 800ded2:	eba3 0901 	sub.w	r9, r3, r1
 800ded6:	4591      	cmp	r9, r2
 800ded8:	bfa8      	it	ge
 800deda:	4691      	movge	r9, r2
 800dedc:	f1b9 0f00 	cmp.w	r9, #0
 800dee0:	dc34      	bgt.n	800df4c <_printf_float+0x398>
 800dee2:	f04f 0800 	mov.w	r8, #0
 800dee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deea:	f104 0a1a 	add.w	sl, r4, #26
 800deee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	eba3 0309 	sub.w	r3, r3, r9
 800def8:	4543      	cmp	r3, r8
 800defa:	f77f af7b 	ble.w	800ddf4 <_printf_float+0x240>
 800defe:	2301      	movs	r3, #1
 800df00:	4652      	mov	r2, sl
 800df02:	4631      	mov	r1, r6
 800df04:	4628      	mov	r0, r5
 800df06:	47b8      	blx	r7
 800df08:	3001      	adds	r0, #1
 800df0a:	f43f aeae 	beq.w	800dc6a <_printf_float+0xb6>
 800df0e:	f108 0801 	add.w	r8, r8, #1
 800df12:	e7ec      	b.n	800deee <_printf_float+0x33a>
 800df14:	4613      	mov	r3, r2
 800df16:	4631      	mov	r1, r6
 800df18:	4642      	mov	r2, r8
 800df1a:	4628      	mov	r0, r5
 800df1c:	47b8      	blx	r7
 800df1e:	3001      	adds	r0, #1
 800df20:	d1c0      	bne.n	800dea4 <_printf_float+0x2f0>
 800df22:	e6a2      	b.n	800dc6a <_printf_float+0xb6>
 800df24:	2301      	movs	r3, #1
 800df26:	4631      	mov	r1, r6
 800df28:	4628      	mov	r0, r5
 800df2a:	920b      	str	r2, [sp, #44]	; 0x2c
 800df2c:	47b8      	blx	r7
 800df2e:	3001      	adds	r0, #1
 800df30:	f43f ae9b 	beq.w	800dc6a <_printf_float+0xb6>
 800df34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df36:	f10b 0b01 	add.w	fp, fp, #1
 800df3a:	e7b9      	b.n	800deb0 <_printf_float+0x2fc>
 800df3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df40:	4631      	mov	r1, r6
 800df42:	4628      	mov	r0, r5
 800df44:	47b8      	blx	r7
 800df46:	3001      	adds	r0, #1
 800df48:	d1bf      	bne.n	800deca <_printf_float+0x316>
 800df4a:	e68e      	b.n	800dc6a <_printf_float+0xb6>
 800df4c:	464b      	mov	r3, r9
 800df4e:	eb08 020a 	add.w	r2, r8, sl
 800df52:	4631      	mov	r1, r6
 800df54:	4628      	mov	r0, r5
 800df56:	47b8      	blx	r7
 800df58:	3001      	adds	r0, #1
 800df5a:	d1c2      	bne.n	800dee2 <_printf_float+0x32e>
 800df5c:	e685      	b.n	800dc6a <_printf_float+0xb6>
 800df5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df60:	2a01      	cmp	r2, #1
 800df62:	dc01      	bgt.n	800df68 <_printf_float+0x3b4>
 800df64:	07db      	lsls	r3, r3, #31
 800df66:	d537      	bpl.n	800dfd8 <_printf_float+0x424>
 800df68:	2301      	movs	r3, #1
 800df6a:	4642      	mov	r2, r8
 800df6c:	4631      	mov	r1, r6
 800df6e:	4628      	mov	r0, r5
 800df70:	47b8      	blx	r7
 800df72:	3001      	adds	r0, #1
 800df74:	f43f ae79 	beq.w	800dc6a <_printf_float+0xb6>
 800df78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df7c:	4631      	mov	r1, r6
 800df7e:	4628      	mov	r0, r5
 800df80:	47b8      	blx	r7
 800df82:	3001      	adds	r0, #1
 800df84:	f43f ae71 	beq.w	800dc6a <_printf_float+0xb6>
 800df88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df8c:	2200      	movs	r2, #0
 800df8e:	2300      	movs	r3, #0
 800df90:	f7f2 fd94 	bl	8000abc <__aeabi_dcmpeq>
 800df94:	b9d8      	cbnz	r0, 800dfce <_printf_float+0x41a>
 800df96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df98:	f108 0201 	add.w	r2, r8, #1
 800df9c:	3b01      	subs	r3, #1
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	47b8      	blx	r7
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d10e      	bne.n	800dfc6 <_printf_float+0x412>
 800dfa8:	e65f      	b.n	800dc6a <_printf_float+0xb6>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	464a      	mov	r2, r9
 800dfae:	4631      	mov	r1, r6
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	47b8      	blx	r7
 800dfb4:	3001      	adds	r0, #1
 800dfb6:	f43f ae58 	beq.w	800dc6a <_printf_float+0xb6>
 800dfba:	f108 0801 	add.w	r8, r8, #1
 800dfbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	4543      	cmp	r3, r8
 800dfc4:	dcf1      	bgt.n	800dfaa <_printf_float+0x3f6>
 800dfc6:	4653      	mov	r3, sl
 800dfc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfcc:	e6e1      	b.n	800dd92 <_printf_float+0x1de>
 800dfce:	f04f 0800 	mov.w	r8, #0
 800dfd2:	f104 091a 	add.w	r9, r4, #26
 800dfd6:	e7f2      	b.n	800dfbe <_printf_float+0x40a>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	4642      	mov	r2, r8
 800dfdc:	e7df      	b.n	800df9e <_printf_float+0x3ea>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	464a      	mov	r2, r9
 800dfe2:	4631      	mov	r1, r6
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	47b8      	blx	r7
 800dfe8:	3001      	adds	r0, #1
 800dfea:	f43f ae3e 	beq.w	800dc6a <_printf_float+0xb6>
 800dfee:	f108 0801 	add.w	r8, r8, #1
 800dff2:	68e3      	ldr	r3, [r4, #12]
 800dff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dff6:	1a5b      	subs	r3, r3, r1
 800dff8:	4543      	cmp	r3, r8
 800dffa:	dcf0      	bgt.n	800dfde <_printf_float+0x42a>
 800dffc:	e6fe      	b.n	800ddfc <_printf_float+0x248>
 800dffe:	f04f 0800 	mov.w	r8, #0
 800e002:	f104 0919 	add.w	r9, r4, #25
 800e006:	e7f4      	b.n	800dff2 <_printf_float+0x43e>

0800e008 <_printf_i>:
 800e008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e00c:	7e0f      	ldrb	r7, [r1, #24]
 800e00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e010:	2f78      	cmp	r7, #120	; 0x78
 800e012:	4691      	mov	r9, r2
 800e014:	4680      	mov	r8, r0
 800e016:	460c      	mov	r4, r1
 800e018:	469a      	mov	sl, r3
 800e01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e01e:	d807      	bhi.n	800e030 <_printf_i+0x28>
 800e020:	2f62      	cmp	r7, #98	; 0x62
 800e022:	d80a      	bhi.n	800e03a <_printf_i+0x32>
 800e024:	2f00      	cmp	r7, #0
 800e026:	f000 80d8 	beq.w	800e1da <_printf_i+0x1d2>
 800e02a:	2f58      	cmp	r7, #88	; 0x58
 800e02c:	f000 80a3 	beq.w	800e176 <_printf_i+0x16e>
 800e030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e038:	e03a      	b.n	800e0b0 <_printf_i+0xa8>
 800e03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e03e:	2b15      	cmp	r3, #21
 800e040:	d8f6      	bhi.n	800e030 <_printf_i+0x28>
 800e042:	a101      	add	r1, pc, #4	; (adr r1, 800e048 <_printf_i+0x40>)
 800e044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e048:	0800e0a1 	.word	0x0800e0a1
 800e04c:	0800e0b5 	.word	0x0800e0b5
 800e050:	0800e031 	.word	0x0800e031
 800e054:	0800e031 	.word	0x0800e031
 800e058:	0800e031 	.word	0x0800e031
 800e05c:	0800e031 	.word	0x0800e031
 800e060:	0800e0b5 	.word	0x0800e0b5
 800e064:	0800e031 	.word	0x0800e031
 800e068:	0800e031 	.word	0x0800e031
 800e06c:	0800e031 	.word	0x0800e031
 800e070:	0800e031 	.word	0x0800e031
 800e074:	0800e1c1 	.word	0x0800e1c1
 800e078:	0800e0e5 	.word	0x0800e0e5
 800e07c:	0800e1a3 	.word	0x0800e1a3
 800e080:	0800e031 	.word	0x0800e031
 800e084:	0800e031 	.word	0x0800e031
 800e088:	0800e1e3 	.word	0x0800e1e3
 800e08c:	0800e031 	.word	0x0800e031
 800e090:	0800e0e5 	.word	0x0800e0e5
 800e094:	0800e031 	.word	0x0800e031
 800e098:	0800e031 	.word	0x0800e031
 800e09c:	0800e1ab 	.word	0x0800e1ab
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	1d1a      	adds	r2, r3, #4
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	602a      	str	r2, [r5, #0]
 800e0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e0a3      	b.n	800e1fc <_printf_i+0x1f4>
 800e0b4:	6820      	ldr	r0, [r4, #0]
 800e0b6:	6829      	ldr	r1, [r5, #0]
 800e0b8:	0606      	lsls	r6, r0, #24
 800e0ba:	f101 0304 	add.w	r3, r1, #4
 800e0be:	d50a      	bpl.n	800e0d6 <_printf_i+0xce>
 800e0c0:	680e      	ldr	r6, [r1, #0]
 800e0c2:	602b      	str	r3, [r5, #0]
 800e0c4:	2e00      	cmp	r6, #0
 800e0c6:	da03      	bge.n	800e0d0 <_printf_i+0xc8>
 800e0c8:	232d      	movs	r3, #45	; 0x2d
 800e0ca:	4276      	negs	r6, r6
 800e0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0d0:	485e      	ldr	r0, [pc, #376]	; (800e24c <_printf_i+0x244>)
 800e0d2:	230a      	movs	r3, #10
 800e0d4:	e019      	b.n	800e10a <_printf_i+0x102>
 800e0d6:	680e      	ldr	r6, [r1, #0]
 800e0d8:	602b      	str	r3, [r5, #0]
 800e0da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e0de:	bf18      	it	ne
 800e0e0:	b236      	sxthne	r6, r6
 800e0e2:	e7ef      	b.n	800e0c4 <_printf_i+0xbc>
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	6820      	ldr	r0, [r4, #0]
 800e0e8:	1d19      	adds	r1, r3, #4
 800e0ea:	6029      	str	r1, [r5, #0]
 800e0ec:	0601      	lsls	r1, r0, #24
 800e0ee:	d501      	bpl.n	800e0f4 <_printf_i+0xec>
 800e0f0:	681e      	ldr	r6, [r3, #0]
 800e0f2:	e002      	b.n	800e0fa <_printf_i+0xf2>
 800e0f4:	0646      	lsls	r6, r0, #25
 800e0f6:	d5fb      	bpl.n	800e0f0 <_printf_i+0xe8>
 800e0f8:	881e      	ldrh	r6, [r3, #0]
 800e0fa:	4854      	ldr	r0, [pc, #336]	; (800e24c <_printf_i+0x244>)
 800e0fc:	2f6f      	cmp	r7, #111	; 0x6f
 800e0fe:	bf0c      	ite	eq
 800e100:	2308      	moveq	r3, #8
 800e102:	230a      	movne	r3, #10
 800e104:	2100      	movs	r1, #0
 800e106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e10a:	6865      	ldr	r5, [r4, #4]
 800e10c:	60a5      	str	r5, [r4, #8]
 800e10e:	2d00      	cmp	r5, #0
 800e110:	bfa2      	ittt	ge
 800e112:	6821      	ldrge	r1, [r4, #0]
 800e114:	f021 0104 	bicge.w	r1, r1, #4
 800e118:	6021      	strge	r1, [r4, #0]
 800e11a:	b90e      	cbnz	r6, 800e120 <_printf_i+0x118>
 800e11c:	2d00      	cmp	r5, #0
 800e11e:	d04d      	beq.n	800e1bc <_printf_i+0x1b4>
 800e120:	4615      	mov	r5, r2
 800e122:	fbb6 f1f3 	udiv	r1, r6, r3
 800e126:	fb03 6711 	mls	r7, r3, r1, r6
 800e12a:	5dc7      	ldrb	r7, [r0, r7]
 800e12c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e130:	4637      	mov	r7, r6
 800e132:	42bb      	cmp	r3, r7
 800e134:	460e      	mov	r6, r1
 800e136:	d9f4      	bls.n	800e122 <_printf_i+0x11a>
 800e138:	2b08      	cmp	r3, #8
 800e13a:	d10b      	bne.n	800e154 <_printf_i+0x14c>
 800e13c:	6823      	ldr	r3, [r4, #0]
 800e13e:	07de      	lsls	r6, r3, #31
 800e140:	d508      	bpl.n	800e154 <_printf_i+0x14c>
 800e142:	6923      	ldr	r3, [r4, #16]
 800e144:	6861      	ldr	r1, [r4, #4]
 800e146:	4299      	cmp	r1, r3
 800e148:	bfde      	ittt	le
 800e14a:	2330      	movle	r3, #48	; 0x30
 800e14c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e150:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e154:	1b52      	subs	r2, r2, r5
 800e156:	6122      	str	r2, [r4, #16]
 800e158:	f8cd a000 	str.w	sl, [sp]
 800e15c:	464b      	mov	r3, r9
 800e15e:	aa03      	add	r2, sp, #12
 800e160:	4621      	mov	r1, r4
 800e162:	4640      	mov	r0, r8
 800e164:	f003 fdc1 	bl	8011cea <_printf_common>
 800e168:	3001      	adds	r0, #1
 800e16a:	d14c      	bne.n	800e206 <_printf_i+0x1fe>
 800e16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e170:	b004      	add	sp, #16
 800e172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e176:	4835      	ldr	r0, [pc, #212]	; (800e24c <_printf_i+0x244>)
 800e178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e17c:	6829      	ldr	r1, [r5, #0]
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	f851 6b04 	ldr.w	r6, [r1], #4
 800e184:	6029      	str	r1, [r5, #0]
 800e186:	061d      	lsls	r5, r3, #24
 800e188:	d514      	bpl.n	800e1b4 <_printf_i+0x1ac>
 800e18a:	07df      	lsls	r7, r3, #31
 800e18c:	bf44      	itt	mi
 800e18e:	f043 0320 	orrmi.w	r3, r3, #32
 800e192:	6023      	strmi	r3, [r4, #0]
 800e194:	b91e      	cbnz	r6, 800e19e <_printf_i+0x196>
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	f023 0320 	bic.w	r3, r3, #32
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	2310      	movs	r3, #16
 800e1a0:	e7b0      	b.n	800e104 <_printf_i+0xfc>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	f043 0320 	orr.w	r3, r3, #32
 800e1a8:	6023      	str	r3, [r4, #0]
 800e1aa:	2378      	movs	r3, #120	; 0x78
 800e1ac:	4828      	ldr	r0, [pc, #160]	; (800e250 <_printf_i+0x248>)
 800e1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1b2:	e7e3      	b.n	800e17c <_printf_i+0x174>
 800e1b4:	0659      	lsls	r1, r3, #25
 800e1b6:	bf48      	it	mi
 800e1b8:	b2b6      	uxthmi	r6, r6
 800e1ba:	e7e6      	b.n	800e18a <_printf_i+0x182>
 800e1bc:	4615      	mov	r5, r2
 800e1be:	e7bb      	b.n	800e138 <_printf_i+0x130>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	6826      	ldr	r6, [r4, #0]
 800e1c4:	6961      	ldr	r1, [r4, #20]
 800e1c6:	1d18      	adds	r0, r3, #4
 800e1c8:	6028      	str	r0, [r5, #0]
 800e1ca:	0635      	lsls	r5, r6, #24
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	d501      	bpl.n	800e1d4 <_printf_i+0x1cc>
 800e1d0:	6019      	str	r1, [r3, #0]
 800e1d2:	e002      	b.n	800e1da <_printf_i+0x1d2>
 800e1d4:	0670      	lsls	r0, r6, #25
 800e1d6:	d5fb      	bpl.n	800e1d0 <_printf_i+0x1c8>
 800e1d8:	8019      	strh	r1, [r3, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6123      	str	r3, [r4, #16]
 800e1de:	4615      	mov	r5, r2
 800e1e0:	e7ba      	b.n	800e158 <_printf_i+0x150>
 800e1e2:	682b      	ldr	r3, [r5, #0]
 800e1e4:	1d1a      	adds	r2, r3, #4
 800e1e6:	602a      	str	r2, [r5, #0]
 800e1e8:	681d      	ldr	r5, [r3, #0]
 800e1ea:	6862      	ldr	r2, [r4, #4]
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7f1 ffd6 	bl	80001a0 <memchr>
 800e1f4:	b108      	cbz	r0, 800e1fa <_printf_i+0x1f2>
 800e1f6:	1b40      	subs	r0, r0, r5
 800e1f8:	6060      	str	r0, [r4, #4]
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	6123      	str	r3, [r4, #16]
 800e1fe:	2300      	movs	r3, #0
 800e200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e204:	e7a8      	b.n	800e158 <_printf_i+0x150>
 800e206:	6923      	ldr	r3, [r4, #16]
 800e208:	462a      	mov	r2, r5
 800e20a:	4649      	mov	r1, r9
 800e20c:	4640      	mov	r0, r8
 800e20e:	47d0      	blx	sl
 800e210:	3001      	adds	r0, #1
 800e212:	d0ab      	beq.n	800e16c <_printf_i+0x164>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	079b      	lsls	r3, r3, #30
 800e218:	d413      	bmi.n	800e242 <_printf_i+0x23a>
 800e21a:	68e0      	ldr	r0, [r4, #12]
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	4298      	cmp	r0, r3
 800e220:	bfb8      	it	lt
 800e222:	4618      	movlt	r0, r3
 800e224:	e7a4      	b.n	800e170 <_printf_i+0x168>
 800e226:	2301      	movs	r3, #1
 800e228:	4632      	mov	r2, r6
 800e22a:	4649      	mov	r1, r9
 800e22c:	4640      	mov	r0, r8
 800e22e:	47d0      	blx	sl
 800e230:	3001      	adds	r0, #1
 800e232:	d09b      	beq.n	800e16c <_printf_i+0x164>
 800e234:	3501      	adds	r5, #1
 800e236:	68e3      	ldr	r3, [r4, #12]
 800e238:	9903      	ldr	r1, [sp, #12]
 800e23a:	1a5b      	subs	r3, r3, r1
 800e23c:	42ab      	cmp	r3, r5
 800e23e:	dcf2      	bgt.n	800e226 <_printf_i+0x21e>
 800e240:	e7eb      	b.n	800e21a <_printf_i+0x212>
 800e242:	2500      	movs	r5, #0
 800e244:	f104 0619 	add.w	r6, r4, #25
 800e248:	e7f5      	b.n	800e236 <_printf_i+0x22e>
 800e24a:	bf00      	nop
 800e24c:	08014127 	.word	0x08014127
 800e250:	08014138 	.word	0x08014138

0800e254 <_sbrk_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4d06      	ldr	r5, [pc, #24]	; (800e270 <_sbrk_r+0x1c>)
 800e258:	2300      	movs	r3, #0
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	602b      	str	r3, [r5, #0]
 800e260:	f7f7 fd22 	bl	8005ca8 <_sbrk>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	d102      	bne.n	800e26e <_sbrk_r+0x1a>
 800e268:	682b      	ldr	r3, [r5, #0]
 800e26a:	b103      	cbz	r3, 800e26e <_sbrk_r+0x1a>
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	20001730 	.word	0x20001730

0800e274 <_localeconv_r>:
 800e274:	4800      	ldr	r0, [pc, #0]	; (800e278 <_localeconv_r+0x4>)
 800e276:	4770      	bx	lr
 800e278:	200003e0 	.word	0x200003e0

0800e27c <__malloc_lock>:
 800e27c:	4801      	ldr	r0, [pc, #4]	; (800e284 <__malloc_lock+0x8>)
 800e27e:	f001 bd03 	b.w	800fc88 <__retarget_lock_acquire_recursive>
 800e282:	bf00      	nop
 800e284:	20000568 	.word	0x20000568

0800e288 <__malloc_unlock>:
 800e288:	4801      	ldr	r0, [pc, #4]	; (800e290 <__malloc_unlock+0x8>)
 800e28a:	f001 bd05 	b.w	800fc98 <__retarget_lock_release_recursive>
 800e28e:	bf00      	nop
 800e290:	20000568 	.word	0x20000568

0800e294 <_Balloc>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e298:	4604      	mov	r4, r0
 800e29a:	460d      	mov	r5, r1
 800e29c:	b976      	cbnz	r6, 800e2bc <_Balloc+0x28>
 800e29e:	2010      	movs	r0, #16
 800e2a0:	f7ff fbdc 	bl	800da5c <malloc>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	6260      	str	r0, [r4, #36]	; 0x24
 800e2a8:	b920      	cbnz	r0, 800e2b4 <_Balloc+0x20>
 800e2aa:	4b18      	ldr	r3, [pc, #96]	; (800e30c <_Balloc+0x78>)
 800e2ac:	4818      	ldr	r0, [pc, #96]	; (800e310 <_Balloc+0x7c>)
 800e2ae:	2166      	movs	r1, #102	; 0x66
 800e2b0:	f000 fb04 	bl	800e8bc <__assert_func>
 800e2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2b8:	6006      	str	r6, [r0, #0]
 800e2ba:	60c6      	str	r6, [r0, #12]
 800e2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2be:	68f3      	ldr	r3, [r6, #12]
 800e2c0:	b183      	cbz	r3, 800e2e4 <_Balloc+0x50>
 800e2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2ca:	b9b8      	cbnz	r0, 800e2fc <_Balloc+0x68>
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800e2d2:	1d72      	adds	r2, r6, #5
 800e2d4:	0092      	lsls	r2, r2, #2
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f003 fe6f 	bl	8011fba <_calloc_r>
 800e2dc:	b160      	cbz	r0, 800e2f8 <_Balloc+0x64>
 800e2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2e2:	e00e      	b.n	800e302 <_Balloc+0x6e>
 800e2e4:	2221      	movs	r2, #33	; 0x21
 800e2e6:	2104      	movs	r1, #4
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f003 fe66 	bl	8011fba <_calloc_r>
 800e2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2f0:	60f0      	str	r0, [r6, #12]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1e4      	bne.n	800e2c2 <_Balloc+0x2e>
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	6802      	ldr	r2, [r0, #0]
 800e2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e302:	2300      	movs	r3, #0
 800e304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e308:	e7f7      	b.n	800e2fa <_Balloc+0x66>
 800e30a:	bf00      	nop
 800e30c:	08014156 	.word	0x08014156
 800e310:	080141d8 	.word	0x080141d8

0800e314 <_Bfree>:
 800e314:	b570      	push	{r4, r5, r6, lr}
 800e316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e318:	4605      	mov	r5, r0
 800e31a:	460c      	mov	r4, r1
 800e31c:	b976      	cbnz	r6, 800e33c <_Bfree+0x28>
 800e31e:	2010      	movs	r0, #16
 800e320:	f7ff fb9c 	bl	800da5c <malloc>
 800e324:	4602      	mov	r2, r0
 800e326:	6268      	str	r0, [r5, #36]	; 0x24
 800e328:	b920      	cbnz	r0, 800e334 <_Bfree+0x20>
 800e32a:	4b09      	ldr	r3, [pc, #36]	; (800e350 <_Bfree+0x3c>)
 800e32c:	4809      	ldr	r0, [pc, #36]	; (800e354 <_Bfree+0x40>)
 800e32e:	218a      	movs	r1, #138	; 0x8a
 800e330:	f000 fac4 	bl	800e8bc <__assert_func>
 800e334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e338:	6006      	str	r6, [r0, #0]
 800e33a:	60c6      	str	r6, [r0, #12]
 800e33c:	b13c      	cbz	r4, 800e34e <_Bfree+0x3a>
 800e33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e340:	6862      	ldr	r2, [r4, #4]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e348:	6021      	str	r1, [r4, #0]
 800e34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	08014156 	.word	0x08014156
 800e354:	080141d8 	.word	0x080141d8

0800e358 <__multadd>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	690d      	ldr	r5, [r1, #16]
 800e35e:	4607      	mov	r7, r0
 800e360:	460c      	mov	r4, r1
 800e362:	461e      	mov	r6, r3
 800e364:	f101 0c14 	add.w	ip, r1, #20
 800e368:	2000      	movs	r0, #0
 800e36a:	f8dc 3000 	ldr.w	r3, [ip]
 800e36e:	b299      	uxth	r1, r3
 800e370:	fb02 6101 	mla	r1, r2, r1, r6
 800e374:	0c1e      	lsrs	r6, r3, #16
 800e376:	0c0b      	lsrs	r3, r1, #16
 800e378:	fb02 3306 	mla	r3, r2, r6, r3
 800e37c:	b289      	uxth	r1, r1
 800e37e:	3001      	adds	r0, #1
 800e380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e384:	4285      	cmp	r5, r0
 800e386:	f84c 1b04 	str.w	r1, [ip], #4
 800e38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e38e:	dcec      	bgt.n	800e36a <__multadd+0x12>
 800e390:	b30e      	cbz	r6, 800e3d6 <__multadd+0x7e>
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	42ab      	cmp	r3, r5
 800e396:	dc19      	bgt.n	800e3cc <__multadd+0x74>
 800e398:	6861      	ldr	r1, [r4, #4]
 800e39a:	4638      	mov	r0, r7
 800e39c:	3101      	adds	r1, #1
 800e39e:	f7ff ff79 	bl	800e294 <_Balloc>
 800e3a2:	4680      	mov	r8, r0
 800e3a4:	b928      	cbnz	r0, 800e3b2 <__multadd+0x5a>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	4b0c      	ldr	r3, [pc, #48]	; (800e3dc <__multadd+0x84>)
 800e3aa:	480d      	ldr	r0, [pc, #52]	; (800e3e0 <__multadd+0x88>)
 800e3ac:	21b5      	movs	r1, #181	; 0xb5
 800e3ae:	f000 fa85 	bl	800e8bc <__assert_func>
 800e3b2:	6922      	ldr	r2, [r4, #16]
 800e3b4:	3202      	adds	r2, #2
 800e3b6:	f104 010c 	add.w	r1, r4, #12
 800e3ba:	0092      	lsls	r2, r2, #2
 800e3bc:	300c      	adds	r0, #12
 800e3be:	f003 fbe0 	bl	8011b82 <memcpy>
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f7ff ffa5 	bl	800e314 <_Bfree>
 800e3ca:	4644      	mov	r4, r8
 800e3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3d0:	3501      	adds	r5, #1
 800e3d2:	615e      	str	r6, [r3, #20]
 800e3d4:	6125      	str	r5, [r4, #16]
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3dc:	080141c7 	.word	0x080141c7
 800e3e0:	080141d8 	.word	0x080141d8

0800e3e4 <__i2b>:
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	2101      	movs	r1, #1
 800e3ea:	f7ff ff53 	bl	800e294 <_Balloc>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	b928      	cbnz	r0, 800e3fe <__i2b+0x1a>
 800e3f2:	4b05      	ldr	r3, [pc, #20]	; (800e408 <__i2b+0x24>)
 800e3f4:	4805      	ldr	r0, [pc, #20]	; (800e40c <__i2b+0x28>)
 800e3f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3fa:	f000 fa5f 	bl	800e8bc <__assert_func>
 800e3fe:	2301      	movs	r3, #1
 800e400:	6144      	str	r4, [r0, #20]
 800e402:	6103      	str	r3, [r0, #16]
 800e404:	bd10      	pop	{r4, pc}
 800e406:	bf00      	nop
 800e408:	080141c7 	.word	0x080141c7
 800e40c:	080141d8 	.word	0x080141d8

0800e410 <__multiply>:
 800e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	4691      	mov	r9, r2
 800e416:	690a      	ldr	r2, [r1, #16]
 800e418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	bfb8      	it	lt
 800e420:	460b      	movlt	r3, r1
 800e422:	460c      	mov	r4, r1
 800e424:	bfbc      	itt	lt
 800e426:	464c      	movlt	r4, r9
 800e428:	4699      	movlt	r9, r3
 800e42a:	6927      	ldr	r7, [r4, #16]
 800e42c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e430:	68a3      	ldr	r3, [r4, #8]
 800e432:	6861      	ldr	r1, [r4, #4]
 800e434:	eb07 060a 	add.w	r6, r7, sl
 800e438:	42b3      	cmp	r3, r6
 800e43a:	b085      	sub	sp, #20
 800e43c:	bfb8      	it	lt
 800e43e:	3101      	addlt	r1, #1
 800e440:	f7ff ff28 	bl	800e294 <_Balloc>
 800e444:	b930      	cbnz	r0, 800e454 <__multiply+0x44>
 800e446:	4602      	mov	r2, r0
 800e448:	4b43      	ldr	r3, [pc, #268]	; (800e558 <__multiply+0x148>)
 800e44a:	4844      	ldr	r0, [pc, #272]	; (800e55c <__multiply+0x14c>)
 800e44c:	f240 115d 	movw	r1, #349	; 0x15d
 800e450:	f000 fa34 	bl	800e8bc <__assert_func>
 800e454:	f100 0514 	add.w	r5, r0, #20
 800e458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e45c:	462b      	mov	r3, r5
 800e45e:	2200      	movs	r2, #0
 800e460:	4543      	cmp	r3, r8
 800e462:	d321      	bcc.n	800e4a8 <__multiply+0x98>
 800e464:	f104 0314 	add.w	r3, r4, #20
 800e468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e46c:	f109 0314 	add.w	r3, r9, #20
 800e470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e474:	9202      	str	r2, [sp, #8]
 800e476:	1b3a      	subs	r2, r7, r4
 800e478:	3a15      	subs	r2, #21
 800e47a:	f022 0203 	bic.w	r2, r2, #3
 800e47e:	3204      	adds	r2, #4
 800e480:	f104 0115 	add.w	r1, r4, #21
 800e484:	428f      	cmp	r7, r1
 800e486:	bf38      	it	cc
 800e488:	2204      	movcc	r2, #4
 800e48a:	9201      	str	r2, [sp, #4]
 800e48c:	9a02      	ldr	r2, [sp, #8]
 800e48e:	9303      	str	r3, [sp, #12]
 800e490:	429a      	cmp	r2, r3
 800e492:	d80c      	bhi.n	800e4ae <__multiply+0x9e>
 800e494:	2e00      	cmp	r6, #0
 800e496:	dd03      	ble.n	800e4a0 <__multiply+0x90>
 800e498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d059      	beq.n	800e554 <__multiply+0x144>
 800e4a0:	6106      	str	r6, [r0, #16]
 800e4a2:	b005      	add	sp, #20
 800e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a8:	f843 2b04 	str.w	r2, [r3], #4
 800e4ac:	e7d8      	b.n	800e460 <__multiply+0x50>
 800e4ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4b2:	f1ba 0f00 	cmp.w	sl, #0
 800e4b6:	d023      	beq.n	800e500 <__multiply+0xf0>
 800e4b8:	f104 0e14 	add.w	lr, r4, #20
 800e4bc:	46a9      	mov	r9, r5
 800e4be:	f04f 0c00 	mov.w	ip, #0
 800e4c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4c6:	f8d9 1000 	ldr.w	r1, [r9]
 800e4ca:	fa1f fb82 	uxth.w	fp, r2
 800e4ce:	b289      	uxth	r1, r1
 800e4d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4d4:	4461      	add	r1, ip
 800e4d6:	f8d9 c000 	ldr.w	ip, [r9]
 800e4da:	0c12      	lsrs	r2, r2, #16
 800e4dc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e4e0:	fb0a c202 	mla	r2, sl, r2, ip
 800e4e4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4e8:	b289      	uxth	r1, r1
 800e4ea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4ee:	4577      	cmp	r7, lr
 800e4f0:	f849 1b04 	str.w	r1, [r9], #4
 800e4f4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4f8:	d8e3      	bhi.n	800e4c2 <__multiply+0xb2>
 800e4fa:	9a01      	ldr	r2, [sp, #4]
 800e4fc:	f845 c002 	str.w	ip, [r5, r2]
 800e500:	9a03      	ldr	r2, [sp, #12]
 800e502:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e506:	3304      	adds	r3, #4
 800e508:	f1b9 0f00 	cmp.w	r9, #0
 800e50c:	d020      	beq.n	800e550 <__multiply+0x140>
 800e50e:	6829      	ldr	r1, [r5, #0]
 800e510:	f104 0c14 	add.w	ip, r4, #20
 800e514:	46ae      	mov	lr, r5
 800e516:	f04f 0a00 	mov.w	sl, #0
 800e51a:	f8bc b000 	ldrh.w	fp, [ip]
 800e51e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e522:	fb09 220b 	mla	r2, r9, fp, r2
 800e526:	4492      	add	sl, r2
 800e528:	b289      	uxth	r1, r1
 800e52a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e52e:	f84e 1b04 	str.w	r1, [lr], #4
 800e532:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e536:	f8be 1000 	ldrh.w	r1, [lr]
 800e53a:	0c12      	lsrs	r2, r2, #16
 800e53c:	fb09 1102 	mla	r1, r9, r2, r1
 800e540:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e544:	4567      	cmp	r7, ip
 800e546:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e54a:	d8e6      	bhi.n	800e51a <__multiply+0x10a>
 800e54c:	9a01      	ldr	r2, [sp, #4]
 800e54e:	50a9      	str	r1, [r5, r2]
 800e550:	3504      	adds	r5, #4
 800e552:	e79b      	b.n	800e48c <__multiply+0x7c>
 800e554:	3e01      	subs	r6, #1
 800e556:	e79d      	b.n	800e494 <__multiply+0x84>
 800e558:	080141c7 	.word	0x080141c7
 800e55c:	080141d8 	.word	0x080141d8

0800e560 <__pow5mult>:
 800e560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e564:	4615      	mov	r5, r2
 800e566:	f012 0203 	ands.w	r2, r2, #3
 800e56a:	4606      	mov	r6, r0
 800e56c:	460f      	mov	r7, r1
 800e56e:	d007      	beq.n	800e580 <__pow5mult+0x20>
 800e570:	4c25      	ldr	r4, [pc, #148]	; (800e608 <__pow5mult+0xa8>)
 800e572:	3a01      	subs	r2, #1
 800e574:	2300      	movs	r3, #0
 800e576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e57a:	f7ff feed 	bl	800e358 <__multadd>
 800e57e:	4607      	mov	r7, r0
 800e580:	10ad      	asrs	r5, r5, #2
 800e582:	d03d      	beq.n	800e600 <__pow5mult+0xa0>
 800e584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e586:	b97c      	cbnz	r4, 800e5a8 <__pow5mult+0x48>
 800e588:	2010      	movs	r0, #16
 800e58a:	f7ff fa67 	bl	800da5c <malloc>
 800e58e:	4602      	mov	r2, r0
 800e590:	6270      	str	r0, [r6, #36]	; 0x24
 800e592:	b928      	cbnz	r0, 800e5a0 <__pow5mult+0x40>
 800e594:	4b1d      	ldr	r3, [pc, #116]	; (800e60c <__pow5mult+0xac>)
 800e596:	481e      	ldr	r0, [pc, #120]	; (800e610 <__pow5mult+0xb0>)
 800e598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e59c:	f000 f98e 	bl	800e8bc <__assert_func>
 800e5a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5a4:	6004      	str	r4, [r0, #0]
 800e5a6:	60c4      	str	r4, [r0, #12]
 800e5a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5b0:	b94c      	cbnz	r4, 800e5c6 <__pow5mult+0x66>
 800e5b2:	f240 2171 	movw	r1, #625	; 0x271
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f7ff ff14 	bl	800e3e4 <__i2b>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	f04f 0900 	mov.w	r9, #0
 800e5ca:	07eb      	lsls	r3, r5, #31
 800e5cc:	d50a      	bpl.n	800e5e4 <__pow5mult+0x84>
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f7ff ff1c 	bl	800e410 <__multiply>
 800e5d8:	4639      	mov	r1, r7
 800e5da:	4680      	mov	r8, r0
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7ff fe99 	bl	800e314 <_Bfree>
 800e5e2:	4647      	mov	r7, r8
 800e5e4:	106d      	asrs	r5, r5, #1
 800e5e6:	d00b      	beq.n	800e600 <__pow5mult+0xa0>
 800e5e8:	6820      	ldr	r0, [r4, #0]
 800e5ea:	b938      	cbnz	r0, 800e5fc <__pow5mult+0x9c>
 800e5ec:	4622      	mov	r2, r4
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f7ff ff0d 	bl	800e410 <__multiply>
 800e5f6:	6020      	str	r0, [r4, #0]
 800e5f8:	f8c0 9000 	str.w	r9, [r0]
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	e7e4      	b.n	800e5ca <__pow5mult+0x6a>
 800e600:	4638      	mov	r0, r7
 800e602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e606:	bf00      	nop
 800e608:	08013fa8 	.word	0x08013fa8
 800e60c:	08014156 	.word	0x08014156
 800e610:	080141d8 	.word	0x080141d8

0800e614 <__lshift>:
 800e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	460c      	mov	r4, r1
 800e61a:	6849      	ldr	r1, [r1, #4]
 800e61c:	6923      	ldr	r3, [r4, #16]
 800e61e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	4607      	mov	r7, r0
 800e626:	4691      	mov	r9, r2
 800e628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e62c:	f108 0601 	add.w	r6, r8, #1
 800e630:	42b3      	cmp	r3, r6
 800e632:	db0b      	blt.n	800e64c <__lshift+0x38>
 800e634:	4638      	mov	r0, r7
 800e636:	f7ff fe2d 	bl	800e294 <_Balloc>
 800e63a:	4605      	mov	r5, r0
 800e63c:	b948      	cbnz	r0, 800e652 <__lshift+0x3e>
 800e63e:	4602      	mov	r2, r0
 800e640:	4b2a      	ldr	r3, [pc, #168]	; (800e6ec <__lshift+0xd8>)
 800e642:	482b      	ldr	r0, [pc, #172]	; (800e6f0 <__lshift+0xdc>)
 800e644:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e648:	f000 f938 	bl	800e8bc <__assert_func>
 800e64c:	3101      	adds	r1, #1
 800e64e:	005b      	lsls	r3, r3, #1
 800e650:	e7ee      	b.n	800e630 <__lshift+0x1c>
 800e652:	2300      	movs	r3, #0
 800e654:	f100 0114 	add.w	r1, r0, #20
 800e658:	f100 0210 	add.w	r2, r0, #16
 800e65c:	4618      	mov	r0, r3
 800e65e:	4553      	cmp	r3, sl
 800e660:	db37      	blt.n	800e6d2 <__lshift+0xbe>
 800e662:	6920      	ldr	r0, [r4, #16]
 800e664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e668:	f104 0314 	add.w	r3, r4, #20
 800e66c:	f019 091f 	ands.w	r9, r9, #31
 800e670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e674:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e678:	d02f      	beq.n	800e6da <__lshift+0xc6>
 800e67a:	f1c9 0e20 	rsb	lr, r9, #32
 800e67e:	468a      	mov	sl, r1
 800e680:	f04f 0c00 	mov.w	ip, #0
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	fa02 f209 	lsl.w	r2, r2, r9
 800e68a:	ea42 020c 	orr.w	r2, r2, ip
 800e68e:	f84a 2b04 	str.w	r2, [sl], #4
 800e692:	f853 2b04 	ldr.w	r2, [r3], #4
 800e696:	4298      	cmp	r0, r3
 800e698:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e69c:	d8f2      	bhi.n	800e684 <__lshift+0x70>
 800e69e:	1b03      	subs	r3, r0, r4
 800e6a0:	3b15      	subs	r3, #21
 800e6a2:	f023 0303 	bic.w	r3, r3, #3
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	f104 0215 	add.w	r2, r4, #21
 800e6ac:	4290      	cmp	r0, r2
 800e6ae:	bf38      	it	cc
 800e6b0:	2304      	movcc	r3, #4
 800e6b2:	f841 c003 	str.w	ip, [r1, r3]
 800e6b6:	f1bc 0f00 	cmp.w	ip, #0
 800e6ba:	d001      	beq.n	800e6c0 <__lshift+0xac>
 800e6bc:	f108 0602 	add.w	r6, r8, #2
 800e6c0:	3e01      	subs	r6, #1
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	612e      	str	r6, [r5, #16]
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	f7ff fe24 	bl	800e314 <_Bfree>
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	e7c1      	b.n	800e65e <__lshift+0x4a>
 800e6da:	3904      	subs	r1, #4
 800e6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6e4:	4298      	cmp	r0, r3
 800e6e6:	d8f9      	bhi.n	800e6dc <__lshift+0xc8>
 800e6e8:	e7ea      	b.n	800e6c0 <__lshift+0xac>
 800e6ea:	bf00      	nop
 800e6ec:	080141c7 	.word	0x080141c7
 800e6f0:	080141d8 	.word	0x080141d8

0800e6f4 <__mdiff>:
 800e6f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	4607      	mov	r7, r0
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4628      	mov	r0, r5
 800e700:	4614      	mov	r4, r2
 800e702:	f003 fc3f 	bl	8011f84 <__mcmp>
 800e706:	1e06      	subs	r6, r0, #0
 800e708:	d111      	bne.n	800e72e <__mdiff+0x3a>
 800e70a:	4631      	mov	r1, r6
 800e70c:	4638      	mov	r0, r7
 800e70e:	f7ff fdc1 	bl	800e294 <_Balloc>
 800e712:	4602      	mov	r2, r0
 800e714:	b928      	cbnz	r0, 800e722 <__mdiff+0x2e>
 800e716:	4b39      	ldr	r3, [pc, #228]	; (800e7fc <__mdiff+0x108>)
 800e718:	f240 2132 	movw	r1, #562	; 0x232
 800e71c:	4838      	ldr	r0, [pc, #224]	; (800e800 <__mdiff+0x10c>)
 800e71e:	f000 f8cd 	bl	800e8bc <__assert_func>
 800e722:	2301      	movs	r3, #1
 800e724:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e728:	4610      	mov	r0, r2
 800e72a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	bfa4      	itt	ge
 800e730:	4623      	movge	r3, r4
 800e732:	462c      	movge	r4, r5
 800e734:	4638      	mov	r0, r7
 800e736:	6861      	ldr	r1, [r4, #4]
 800e738:	bfa6      	itte	ge
 800e73a:	461d      	movge	r5, r3
 800e73c:	2600      	movge	r6, #0
 800e73e:	2601      	movlt	r6, #1
 800e740:	f7ff fda8 	bl	800e294 <_Balloc>
 800e744:	4602      	mov	r2, r0
 800e746:	b918      	cbnz	r0, 800e750 <__mdiff+0x5c>
 800e748:	4b2c      	ldr	r3, [pc, #176]	; (800e7fc <__mdiff+0x108>)
 800e74a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e74e:	e7e5      	b.n	800e71c <__mdiff+0x28>
 800e750:	6927      	ldr	r7, [r4, #16]
 800e752:	60c6      	str	r6, [r0, #12]
 800e754:	692e      	ldr	r6, [r5, #16]
 800e756:	f104 0014 	add.w	r0, r4, #20
 800e75a:	f105 0914 	add.w	r9, r5, #20
 800e75e:	f102 0e14 	add.w	lr, r2, #20
 800e762:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800e766:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e76a:	3410      	adds	r4, #16
 800e76c:	46f2      	mov	sl, lr
 800e76e:	2100      	movs	r1, #0
 800e770:	f859 3b04 	ldr.w	r3, [r9], #4
 800e774:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800e778:	fa1f f883 	uxth.w	r8, r3
 800e77c:	fa11 f18b 	uxtah	r1, r1, fp
 800e780:	0c1b      	lsrs	r3, r3, #16
 800e782:	eba1 0808 	sub.w	r8, r1, r8
 800e786:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e78a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e78e:	fa1f f888 	uxth.w	r8, r8
 800e792:	1419      	asrs	r1, r3, #16
 800e794:	454e      	cmp	r6, r9
 800e796:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e79a:	f84a 3b04 	str.w	r3, [sl], #4
 800e79e:	d8e7      	bhi.n	800e770 <__mdiff+0x7c>
 800e7a0:	1b73      	subs	r3, r6, r5
 800e7a2:	3b15      	subs	r3, #21
 800e7a4:	f023 0303 	bic.w	r3, r3, #3
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	3515      	adds	r5, #21
 800e7ac:	42ae      	cmp	r6, r5
 800e7ae:	bf38      	it	cc
 800e7b0:	2304      	movcc	r3, #4
 800e7b2:	4418      	add	r0, r3
 800e7b4:	4473      	add	r3, lr
 800e7b6:	469e      	mov	lr, r3
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	4566      	cmp	r6, ip
 800e7bc:	d30e      	bcc.n	800e7dc <__mdiff+0xe8>
 800e7be:	f10c 0103 	add.w	r1, ip, #3
 800e7c2:	1a09      	subs	r1, r1, r0
 800e7c4:	f021 0103 	bic.w	r1, r1, #3
 800e7c8:	3803      	subs	r0, #3
 800e7ca:	4584      	cmp	ip, r0
 800e7cc:	bf38      	it	cc
 800e7ce:	2100      	movcc	r1, #0
 800e7d0:	4419      	add	r1, r3
 800e7d2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e7d6:	b17b      	cbz	r3, 800e7f8 <__mdiff+0x104>
 800e7d8:	6117      	str	r7, [r2, #16]
 800e7da:	e7a5      	b.n	800e728 <__mdiff+0x34>
 800e7dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7e0:	fa11 f488 	uxtah	r4, r1, r8
 800e7e4:	1425      	asrs	r5, r4, #16
 800e7e6:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800e7ea:	b2a4      	uxth	r4, r4
 800e7ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800e7f0:	f84e 4b04 	str.w	r4, [lr], #4
 800e7f4:	1429      	asrs	r1, r5, #16
 800e7f6:	e7e0      	b.n	800e7ba <__mdiff+0xc6>
 800e7f8:	3f01      	subs	r7, #1
 800e7fa:	e7ea      	b.n	800e7d2 <__mdiff+0xde>
 800e7fc:	080141c7 	.word	0x080141c7
 800e800:	080141d8 	.word	0x080141d8

0800e804 <__d2b>:
 800e804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e808:	2101      	movs	r1, #1
 800e80a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800e80e:	4690      	mov	r8, r2
 800e810:	461d      	mov	r5, r3
 800e812:	f7ff fd3f 	bl	800e294 <_Balloc>
 800e816:	4604      	mov	r4, r0
 800e818:	b930      	cbnz	r0, 800e828 <__d2b+0x24>
 800e81a:	4602      	mov	r2, r0
 800e81c:	4b25      	ldr	r3, [pc, #148]	; (800e8b4 <__d2b+0xb0>)
 800e81e:	4826      	ldr	r0, [pc, #152]	; (800e8b8 <__d2b+0xb4>)
 800e820:	f240 310a 	movw	r1, #778	; 0x30a
 800e824:	f000 f84a 	bl	800e8bc <__assert_func>
 800e828:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800e82c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800e830:	bb2d      	cbnz	r5, 800e87e <__d2b+0x7a>
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	f1b8 0300 	subs.w	r3, r8, #0
 800e838:	d026      	beq.n	800e888 <__d2b+0x84>
 800e83a:	4668      	mov	r0, sp
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	f003 fb74 	bl	8011f2a <__lo0bits>
 800e842:	9900      	ldr	r1, [sp, #0]
 800e844:	b1f0      	cbz	r0, 800e884 <__d2b+0x80>
 800e846:	9a01      	ldr	r2, [sp, #4]
 800e848:	f1c0 0320 	rsb	r3, r0, #32
 800e84c:	fa02 f303 	lsl.w	r3, r2, r3
 800e850:	430b      	orrs	r3, r1
 800e852:	40c2      	lsrs	r2, r0
 800e854:	6163      	str	r3, [r4, #20]
 800e856:	9201      	str	r2, [sp, #4]
 800e858:	9b01      	ldr	r3, [sp, #4]
 800e85a:	61a3      	str	r3, [r4, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bf14      	ite	ne
 800e860:	2102      	movne	r1, #2
 800e862:	2101      	moveq	r1, #1
 800e864:	6121      	str	r1, [r4, #16]
 800e866:	b1c5      	cbz	r5, 800e89a <__d2b+0x96>
 800e868:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e86c:	4405      	add	r5, r0
 800e86e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e872:	603d      	str	r5, [r7, #0]
 800e874:	6030      	str	r0, [r6, #0]
 800e876:	4620      	mov	r0, r4
 800e878:	b002      	add	sp, #8
 800e87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e87e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e882:	e7d6      	b.n	800e832 <__d2b+0x2e>
 800e884:	6161      	str	r1, [r4, #20]
 800e886:	e7e7      	b.n	800e858 <__d2b+0x54>
 800e888:	a801      	add	r0, sp, #4
 800e88a:	f003 fb4e 	bl	8011f2a <__lo0bits>
 800e88e:	9b01      	ldr	r3, [sp, #4]
 800e890:	6163      	str	r3, [r4, #20]
 800e892:	2101      	movs	r1, #1
 800e894:	6121      	str	r1, [r4, #16]
 800e896:	3020      	adds	r0, #32
 800e898:	e7e5      	b.n	800e866 <__d2b+0x62>
 800e89a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800e89e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8a2:	6038      	str	r0, [r7, #0]
 800e8a4:	6918      	ldr	r0, [r3, #16]
 800e8a6:	f003 fb20 	bl	8011eea <__hi0bits>
 800e8aa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800e8ae:	6031      	str	r1, [r6, #0]
 800e8b0:	e7e1      	b.n	800e876 <__d2b+0x72>
 800e8b2:	bf00      	nop
 800e8b4:	080141c7 	.word	0x080141c7
 800e8b8:	080141d8 	.word	0x080141d8

0800e8bc <__assert_func>:
 800e8bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8be:	4614      	mov	r4, r2
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4b09      	ldr	r3, [pc, #36]	; (800e8e8 <__assert_func+0x2c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	68d8      	ldr	r0, [r3, #12]
 800e8ca:	b14c      	cbz	r4, 800e8e0 <__assert_func+0x24>
 800e8cc:	4b07      	ldr	r3, [pc, #28]	; (800e8ec <__assert_func+0x30>)
 800e8ce:	9100      	str	r1, [sp, #0]
 800e8d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8d4:	4906      	ldr	r1, [pc, #24]	; (800e8f0 <__assert_func+0x34>)
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	f000 f80e 	bl	800e8f8 <fiprintf>
 800e8dc:	f003 fbc1 	bl	8012062 <abort>
 800e8e0:	4b04      	ldr	r3, [pc, #16]	; (800e8f4 <__assert_func+0x38>)
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	e7f3      	b.n	800e8ce <__assert_func+0x12>
 800e8e6:	bf00      	nop
 800e8e8:	2000028c 	.word	0x2000028c
 800e8ec:	08014233 	.word	0x08014233
 800e8f0:	08014240 	.word	0x08014240
 800e8f4:	0801426e 	.word	0x0801426e

0800e8f8 <fiprintf>:
 800e8f8:	b40e      	push	{r1, r2, r3}
 800e8fa:	b503      	push	{r0, r1, lr}
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	ab03      	add	r3, sp, #12
 800e900:	4805      	ldr	r0, [pc, #20]	; (800e918 <fiprintf+0x20>)
 800e902:	f853 2b04 	ldr.w	r2, [r3], #4
 800e906:	6800      	ldr	r0, [r0, #0]
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	f000 f807 	bl	800e91c <_vfiprintf_r>
 800e90e:	b002      	add	sp, #8
 800e910:	f85d eb04 	ldr.w	lr, [sp], #4
 800e914:	b003      	add	sp, #12
 800e916:	4770      	bx	lr
 800e918:	2000028c 	.word	0x2000028c

0800e91c <_vfiprintf_r>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	460d      	mov	r5, r1
 800e922:	b09d      	sub	sp, #116	; 0x74
 800e924:	4614      	mov	r4, r2
 800e926:	4698      	mov	r8, r3
 800e928:	4606      	mov	r6, r0
 800e92a:	b118      	cbz	r0, 800e934 <_vfiprintf_r+0x18>
 800e92c:	6983      	ldr	r3, [r0, #24]
 800e92e:	b90b      	cbnz	r3, 800e934 <_vfiprintf_r+0x18>
 800e930:	f000 fae4 	bl	800eefc <__sinit>
 800e934:	4b89      	ldr	r3, [pc, #548]	; (800eb5c <_vfiprintf_r+0x240>)
 800e936:	429d      	cmp	r5, r3
 800e938:	d11b      	bne.n	800e972 <_vfiprintf_r+0x56>
 800e93a:	6875      	ldr	r5, [r6, #4]
 800e93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93e:	07d9      	lsls	r1, r3, #31
 800e940:	d405      	bmi.n	800e94e <_vfiprintf_r+0x32>
 800e942:	89ab      	ldrh	r3, [r5, #12]
 800e944:	059a      	lsls	r2, r3, #22
 800e946:	d402      	bmi.n	800e94e <_vfiprintf_r+0x32>
 800e948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e94a:	f001 f99d 	bl	800fc88 <__retarget_lock_acquire_recursive>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	071b      	lsls	r3, r3, #28
 800e952:	d501      	bpl.n	800e958 <_vfiprintf_r+0x3c>
 800e954:	692b      	ldr	r3, [r5, #16]
 800e956:	b9eb      	cbnz	r3, 800e994 <_vfiprintf_r+0x78>
 800e958:	4629      	mov	r1, r5
 800e95a:	4630      	mov	r0, r6
 800e95c:	f000 f960 	bl	800ec20 <__swsetup_r>
 800e960:	b1c0      	cbz	r0, 800e994 <_vfiprintf_r+0x78>
 800e962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e964:	07dc      	lsls	r4, r3, #31
 800e966:	d50e      	bpl.n	800e986 <_vfiprintf_r+0x6a>
 800e968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e96c:	b01d      	add	sp, #116	; 0x74
 800e96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e972:	4b7b      	ldr	r3, [pc, #492]	; (800eb60 <_vfiprintf_r+0x244>)
 800e974:	429d      	cmp	r5, r3
 800e976:	d101      	bne.n	800e97c <_vfiprintf_r+0x60>
 800e978:	68b5      	ldr	r5, [r6, #8]
 800e97a:	e7df      	b.n	800e93c <_vfiprintf_r+0x20>
 800e97c:	4b79      	ldr	r3, [pc, #484]	; (800eb64 <_vfiprintf_r+0x248>)
 800e97e:	429d      	cmp	r5, r3
 800e980:	bf08      	it	eq
 800e982:	68f5      	ldreq	r5, [r6, #12]
 800e984:	e7da      	b.n	800e93c <_vfiprintf_r+0x20>
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	0598      	lsls	r0, r3, #22
 800e98a:	d4ed      	bmi.n	800e968 <_vfiprintf_r+0x4c>
 800e98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e98e:	f001 f983 	bl	800fc98 <__retarget_lock_release_recursive>
 800e992:	e7e9      	b.n	800e968 <_vfiprintf_r+0x4c>
 800e994:	2300      	movs	r3, #0
 800e996:	9309      	str	r3, [sp, #36]	; 0x24
 800e998:	2320      	movs	r3, #32
 800e99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9a2:	2330      	movs	r3, #48	; 0x30
 800e9a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb68 <_vfiprintf_r+0x24c>
 800e9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ac:	f04f 0901 	mov.w	r9, #1
 800e9b0:	4623      	mov	r3, r4
 800e9b2:	469a      	mov	sl, r3
 800e9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9b8:	b10a      	cbz	r2, 800e9be <_vfiprintf_r+0xa2>
 800e9ba:	2a25      	cmp	r2, #37	; 0x25
 800e9bc:	d1f9      	bne.n	800e9b2 <_vfiprintf_r+0x96>
 800e9be:	ebba 0b04 	subs.w	fp, sl, r4
 800e9c2:	d00b      	beq.n	800e9dc <_vfiprintf_r+0xc0>
 800e9c4:	465b      	mov	r3, fp
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f003 fb2a 	bl	8012024 <__sfputs_r>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	f000 80aa 	beq.w	800eb2a <_vfiprintf_r+0x20e>
 800e9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9d8:	445a      	add	r2, fp
 800e9da:	9209      	str	r2, [sp, #36]	; 0x24
 800e9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 80a2 	beq.w	800eb2a <_vfiprintf_r+0x20e>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9f0:	f10a 0a01 	add.w	sl, sl, #1
 800e9f4:	9304      	str	r3, [sp, #16]
 800e9f6:	9307      	str	r3, [sp, #28]
 800e9f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e9fe:	4654      	mov	r4, sl
 800ea00:	2205      	movs	r2, #5
 800ea02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea06:	4858      	ldr	r0, [pc, #352]	; (800eb68 <_vfiprintf_r+0x24c>)
 800ea08:	f7f1 fbca 	bl	80001a0 <memchr>
 800ea0c:	9a04      	ldr	r2, [sp, #16]
 800ea0e:	b9d8      	cbnz	r0, 800ea48 <_vfiprintf_r+0x12c>
 800ea10:	06d1      	lsls	r1, r2, #27
 800ea12:	bf44      	itt	mi
 800ea14:	2320      	movmi	r3, #32
 800ea16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea1a:	0713      	lsls	r3, r2, #28
 800ea1c:	bf44      	itt	mi
 800ea1e:	232b      	movmi	r3, #43	; 0x2b
 800ea20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea24:	f89a 3000 	ldrb.w	r3, [sl]
 800ea28:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2a:	d015      	beq.n	800ea58 <_vfiprintf_r+0x13c>
 800ea2c:	9a07      	ldr	r2, [sp, #28]
 800ea2e:	4654      	mov	r4, sl
 800ea30:	2000      	movs	r0, #0
 800ea32:	f04f 0c0a 	mov.w	ip, #10
 800ea36:	4621      	mov	r1, r4
 800ea38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea3c:	3b30      	subs	r3, #48	; 0x30
 800ea3e:	2b09      	cmp	r3, #9
 800ea40:	d94e      	bls.n	800eae0 <_vfiprintf_r+0x1c4>
 800ea42:	b1b0      	cbz	r0, 800ea72 <_vfiprintf_r+0x156>
 800ea44:	9207      	str	r2, [sp, #28]
 800ea46:	e014      	b.n	800ea72 <_vfiprintf_r+0x156>
 800ea48:	eba0 0308 	sub.w	r3, r0, r8
 800ea4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea50:	4313      	orrs	r3, r2
 800ea52:	9304      	str	r3, [sp, #16]
 800ea54:	46a2      	mov	sl, r4
 800ea56:	e7d2      	b.n	800e9fe <_vfiprintf_r+0xe2>
 800ea58:	9b03      	ldr	r3, [sp, #12]
 800ea5a:	1d19      	adds	r1, r3, #4
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	9103      	str	r1, [sp, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	bfbb      	ittet	lt
 800ea64:	425b      	neglt	r3, r3
 800ea66:	f042 0202 	orrlt.w	r2, r2, #2
 800ea6a:	9307      	strge	r3, [sp, #28]
 800ea6c:	9307      	strlt	r3, [sp, #28]
 800ea6e:	bfb8      	it	lt
 800ea70:	9204      	strlt	r2, [sp, #16]
 800ea72:	7823      	ldrb	r3, [r4, #0]
 800ea74:	2b2e      	cmp	r3, #46	; 0x2e
 800ea76:	d10c      	bne.n	800ea92 <_vfiprintf_r+0x176>
 800ea78:	7863      	ldrb	r3, [r4, #1]
 800ea7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea7c:	d135      	bne.n	800eaea <_vfiprintf_r+0x1ce>
 800ea7e:	9b03      	ldr	r3, [sp, #12]
 800ea80:	1d1a      	adds	r2, r3, #4
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	9203      	str	r2, [sp, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bfb8      	it	lt
 800ea8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea8e:	3402      	adds	r4, #2
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800eb6c <_vfiprintf_r+0x250>
 800ea96:	7821      	ldrb	r1, [r4, #0]
 800ea98:	2203      	movs	r2, #3
 800ea9a:	4650      	mov	r0, sl
 800ea9c:	f7f1 fb80 	bl	80001a0 <memchr>
 800eaa0:	b140      	cbz	r0, 800eab4 <_vfiprintf_r+0x198>
 800eaa2:	2340      	movs	r3, #64	; 0x40
 800eaa4:	eba0 000a 	sub.w	r0, r0, sl
 800eaa8:	fa03 f000 	lsl.w	r0, r3, r0
 800eaac:	9b04      	ldr	r3, [sp, #16]
 800eaae:	4303      	orrs	r3, r0
 800eab0:	3401      	adds	r4, #1
 800eab2:	9304      	str	r3, [sp, #16]
 800eab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab8:	482d      	ldr	r0, [pc, #180]	; (800eb70 <_vfiprintf_r+0x254>)
 800eaba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eabe:	2206      	movs	r2, #6
 800eac0:	f7f1 fb6e 	bl	80001a0 <memchr>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d03f      	beq.n	800eb48 <_vfiprintf_r+0x22c>
 800eac8:	4b2a      	ldr	r3, [pc, #168]	; (800eb74 <_vfiprintf_r+0x258>)
 800eaca:	bb1b      	cbnz	r3, 800eb14 <_vfiprintf_r+0x1f8>
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	3307      	adds	r3, #7
 800ead0:	f023 0307 	bic.w	r3, r3, #7
 800ead4:	3308      	adds	r3, #8
 800ead6:	9303      	str	r3, [sp, #12]
 800ead8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eada:	443b      	add	r3, r7
 800eadc:	9309      	str	r3, [sp, #36]	; 0x24
 800eade:	e767      	b.n	800e9b0 <_vfiprintf_r+0x94>
 800eae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eae4:	460c      	mov	r4, r1
 800eae6:	2001      	movs	r0, #1
 800eae8:	e7a5      	b.n	800ea36 <_vfiprintf_r+0x11a>
 800eaea:	2300      	movs	r3, #0
 800eaec:	3401      	adds	r4, #1
 800eaee:	9305      	str	r3, [sp, #20]
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	f04f 0c0a 	mov.w	ip, #10
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eafc:	3a30      	subs	r2, #48	; 0x30
 800eafe:	2a09      	cmp	r2, #9
 800eb00:	d903      	bls.n	800eb0a <_vfiprintf_r+0x1ee>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0c5      	beq.n	800ea92 <_vfiprintf_r+0x176>
 800eb06:	9105      	str	r1, [sp, #20]
 800eb08:	e7c3      	b.n	800ea92 <_vfiprintf_r+0x176>
 800eb0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb0e:	4604      	mov	r4, r0
 800eb10:	2301      	movs	r3, #1
 800eb12:	e7f0      	b.n	800eaf6 <_vfiprintf_r+0x1da>
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	462a      	mov	r2, r5
 800eb1a:	4b17      	ldr	r3, [pc, #92]	; (800eb78 <_vfiprintf_r+0x25c>)
 800eb1c:	a904      	add	r1, sp, #16
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7ff f848 	bl	800dbb4 <_printf_float>
 800eb24:	4607      	mov	r7, r0
 800eb26:	1c78      	adds	r0, r7, #1
 800eb28:	d1d6      	bne.n	800ead8 <_vfiprintf_r+0x1bc>
 800eb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb2c:	07d9      	lsls	r1, r3, #31
 800eb2e:	d405      	bmi.n	800eb3c <_vfiprintf_r+0x220>
 800eb30:	89ab      	ldrh	r3, [r5, #12]
 800eb32:	059a      	lsls	r2, r3, #22
 800eb34:	d402      	bmi.n	800eb3c <_vfiprintf_r+0x220>
 800eb36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb38:	f001 f8ae 	bl	800fc98 <__retarget_lock_release_recursive>
 800eb3c:	89ab      	ldrh	r3, [r5, #12]
 800eb3e:	065b      	lsls	r3, r3, #25
 800eb40:	f53f af12 	bmi.w	800e968 <_vfiprintf_r+0x4c>
 800eb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb46:	e711      	b.n	800e96c <_vfiprintf_r+0x50>
 800eb48:	ab03      	add	r3, sp, #12
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4b0a      	ldr	r3, [pc, #40]	; (800eb78 <_vfiprintf_r+0x25c>)
 800eb50:	a904      	add	r1, sp, #16
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7ff fa58 	bl	800e008 <_printf_i>
 800eb58:	e7e4      	b.n	800eb24 <_vfiprintf_r+0x208>
 800eb5a:	bf00      	nop
 800eb5c:	08013fd4 	.word	0x08013fd4
 800eb60:	08013ff4 	.word	0x08013ff4
 800eb64:	08013fb4 	.word	0x08013fb4
 800eb68:	08014279 	.word	0x08014279
 800eb6c:	0801427f 	.word	0x0801427f
 800eb70:	08014283 	.word	0x08014283
 800eb74:	0800dbb5 	.word	0x0800dbb5
 800eb78:	08012025 	.word	0x08012025

0800eb7c <__swbuf_r>:
 800eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7e:	460e      	mov	r6, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	4605      	mov	r5, r0
 800eb84:	b118      	cbz	r0, 800eb8e <__swbuf_r+0x12>
 800eb86:	6983      	ldr	r3, [r0, #24]
 800eb88:	b90b      	cbnz	r3, 800eb8e <__swbuf_r+0x12>
 800eb8a:	f000 f9b7 	bl	800eefc <__sinit>
 800eb8e:	4b21      	ldr	r3, [pc, #132]	; (800ec14 <__swbuf_r+0x98>)
 800eb90:	429c      	cmp	r4, r3
 800eb92:	d12b      	bne.n	800ebec <__swbuf_r+0x70>
 800eb94:	686c      	ldr	r4, [r5, #4]
 800eb96:	69a3      	ldr	r3, [r4, #24]
 800eb98:	60a3      	str	r3, [r4, #8]
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	071a      	lsls	r2, r3, #28
 800eb9e:	d52f      	bpl.n	800ec00 <__swbuf_r+0x84>
 800eba0:	6923      	ldr	r3, [r4, #16]
 800eba2:	b36b      	cbz	r3, 800ec00 <__swbuf_r+0x84>
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	6820      	ldr	r0, [r4, #0]
 800eba8:	1ac0      	subs	r0, r0, r3
 800ebaa:	6963      	ldr	r3, [r4, #20]
 800ebac:	b2f6      	uxtb	r6, r6
 800ebae:	4283      	cmp	r3, r0
 800ebb0:	4637      	mov	r7, r6
 800ebb2:	dc04      	bgt.n	800ebbe <__swbuf_r+0x42>
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f000 f922 	bl	800ee00 <_fflush_r>
 800ebbc:	bb30      	cbnz	r0, 800ec0c <__swbuf_r+0x90>
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	60a3      	str	r3, [r4, #8]
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	1c5a      	adds	r2, r3, #1
 800ebc8:	6022      	str	r2, [r4, #0]
 800ebca:	701e      	strb	r6, [r3, #0]
 800ebcc:	6963      	ldr	r3, [r4, #20]
 800ebce:	3001      	adds	r0, #1
 800ebd0:	4283      	cmp	r3, r0
 800ebd2:	d004      	beq.n	800ebde <__swbuf_r+0x62>
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	07db      	lsls	r3, r3, #31
 800ebd8:	d506      	bpl.n	800ebe8 <__swbuf_r+0x6c>
 800ebda:	2e0a      	cmp	r6, #10
 800ebdc:	d104      	bne.n	800ebe8 <__swbuf_r+0x6c>
 800ebde:	4621      	mov	r1, r4
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f000 f90d 	bl	800ee00 <_fflush_r>
 800ebe6:	b988      	cbnz	r0, 800ec0c <__swbuf_r+0x90>
 800ebe8:	4638      	mov	r0, r7
 800ebea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebec:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <__swbuf_r+0x9c>)
 800ebee:	429c      	cmp	r4, r3
 800ebf0:	d101      	bne.n	800ebf6 <__swbuf_r+0x7a>
 800ebf2:	68ac      	ldr	r4, [r5, #8]
 800ebf4:	e7cf      	b.n	800eb96 <__swbuf_r+0x1a>
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <__swbuf_r+0xa0>)
 800ebf8:	429c      	cmp	r4, r3
 800ebfa:	bf08      	it	eq
 800ebfc:	68ec      	ldreq	r4, [r5, #12]
 800ebfe:	e7ca      	b.n	800eb96 <__swbuf_r+0x1a>
 800ec00:	4621      	mov	r1, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	f000 f80c 	bl	800ec20 <__swsetup_r>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d0cb      	beq.n	800eba4 <__swbuf_r+0x28>
 800ec0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec10:	e7ea      	b.n	800ebe8 <__swbuf_r+0x6c>
 800ec12:	bf00      	nop
 800ec14:	08013fd4 	.word	0x08013fd4
 800ec18:	08013ff4 	.word	0x08013ff4
 800ec1c:	08013fb4 	.word	0x08013fb4

0800ec20 <__swsetup_r>:
 800ec20:	4b32      	ldr	r3, [pc, #200]	; (800ecec <__swsetup_r+0xcc>)
 800ec22:	b570      	push	{r4, r5, r6, lr}
 800ec24:	681d      	ldr	r5, [r3, #0]
 800ec26:	4606      	mov	r6, r0
 800ec28:	460c      	mov	r4, r1
 800ec2a:	b125      	cbz	r5, 800ec36 <__swsetup_r+0x16>
 800ec2c:	69ab      	ldr	r3, [r5, #24]
 800ec2e:	b913      	cbnz	r3, 800ec36 <__swsetup_r+0x16>
 800ec30:	4628      	mov	r0, r5
 800ec32:	f000 f963 	bl	800eefc <__sinit>
 800ec36:	4b2e      	ldr	r3, [pc, #184]	; (800ecf0 <__swsetup_r+0xd0>)
 800ec38:	429c      	cmp	r4, r3
 800ec3a:	d10f      	bne.n	800ec5c <__swsetup_r+0x3c>
 800ec3c:	686c      	ldr	r4, [r5, #4]
 800ec3e:	89a3      	ldrh	r3, [r4, #12]
 800ec40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec44:	0719      	lsls	r1, r3, #28
 800ec46:	d42c      	bmi.n	800eca2 <__swsetup_r+0x82>
 800ec48:	06dd      	lsls	r5, r3, #27
 800ec4a:	d411      	bmi.n	800ec70 <__swsetup_r+0x50>
 800ec4c:	2309      	movs	r3, #9
 800ec4e:	6033      	str	r3, [r6, #0]
 800ec50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec5a:	e03e      	b.n	800ecda <__swsetup_r+0xba>
 800ec5c:	4b25      	ldr	r3, [pc, #148]	; (800ecf4 <__swsetup_r+0xd4>)
 800ec5e:	429c      	cmp	r4, r3
 800ec60:	d101      	bne.n	800ec66 <__swsetup_r+0x46>
 800ec62:	68ac      	ldr	r4, [r5, #8]
 800ec64:	e7eb      	b.n	800ec3e <__swsetup_r+0x1e>
 800ec66:	4b24      	ldr	r3, [pc, #144]	; (800ecf8 <__swsetup_r+0xd8>)
 800ec68:	429c      	cmp	r4, r3
 800ec6a:	bf08      	it	eq
 800ec6c:	68ec      	ldreq	r4, [r5, #12]
 800ec6e:	e7e6      	b.n	800ec3e <__swsetup_r+0x1e>
 800ec70:	0758      	lsls	r0, r3, #29
 800ec72:	d512      	bpl.n	800ec9a <__swsetup_r+0x7a>
 800ec74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec76:	b141      	cbz	r1, 800ec8a <__swsetup_r+0x6a>
 800ec78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec7c:	4299      	cmp	r1, r3
 800ec7e:	d002      	beq.n	800ec86 <__swsetup_r+0x66>
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7fe fef3 	bl	800da6c <_free_r>
 800ec86:	2300      	movs	r3, #0
 800ec88:	6363      	str	r3, [r4, #52]	; 0x34
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec90:	81a3      	strh	r3, [r4, #12]
 800ec92:	2300      	movs	r3, #0
 800ec94:	6063      	str	r3, [r4, #4]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f043 0308 	orr.w	r3, r3, #8
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	6923      	ldr	r3, [r4, #16]
 800eca4:	b94b      	cbnz	r3, 800ecba <__swsetup_r+0x9a>
 800eca6:	89a3      	ldrh	r3, [r4, #12]
 800eca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecb0:	d003      	beq.n	800ecba <__swsetup_r+0x9a>
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	f000 f99f 	bl	800eff8 <__smakebuf_r>
 800ecba:	89a0      	ldrh	r0, [r4, #12]
 800ecbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecc0:	f010 0301 	ands.w	r3, r0, #1
 800ecc4:	d00a      	beq.n	800ecdc <__swsetup_r+0xbc>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	60a3      	str	r3, [r4, #8]
 800ecca:	6963      	ldr	r3, [r4, #20]
 800eccc:	425b      	negs	r3, r3
 800ecce:	61a3      	str	r3, [r4, #24]
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	b943      	cbnz	r3, 800ece6 <__swsetup_r+0xc6>
 800ecd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ecd8:	d1ba      	bne.n	800ec50 <__swsetup_r+0x30>
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	0781      	lsls	r1, r0, #30
 800ecde:	bf58      	it	pl
 800ece0:	6963      	ldrpl	r3, [r4, #20]
 800ece2:	60a3      	str	r3, [r4, #8]
 800ece4:	e7f4      	b.n	800ecd0 <__swsetup_r+0xb0>
 800ece6:	2000      	movs	r0, #0
 800ece8:	e7f7      	b.n	800ecda <__swsetup_r+0xba>
 800ecea:	bf00      	nop
 800ecec:	2000028c 	.word	0x2000028c
 800ecf0:	08013fd4 	.word	0x08013fd4
 800ecf4:	08013ff4 	.word	0x08013ff4
 800ecf8:	08013fb4 	.word	0x08013fb4

0800ecfc <__sflush_r>:
 800ecfc:	898a      	ldrh	r2, [r1, #12]
 800ecfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed00:	4605      	mov	r5, r0
 800ed02:	0710      	lsls	r0, r2, #28
 800ed04:	460c      	mov	r4, r1
 800ed06:	d457      	bmi.n	800edb8 <__sflush_r+0xbc>
 800ed08:	684b      	ldr	r3, [r1, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	dc04      	bgt.n	800ed18 <__sflush_r+0x1c>
 800ed0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	dc01      	bgt.n	800ed18 <__sflush_r+0x1c>
 800ed14:	2000      	movs	r0, #0
 800ed16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed1a:	2e00      	cmp	r6, #0
 800ed1c:	d0fa      	beq.n	800ed14 <__sflush_r+0x18>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed24:	682f      	ldr	r7, [r5, #0]
 800ed26:	602b      	str	r3, [r5, #0]
 800ed28:	d032      	beq.n	800ed90 <__sflush_r+0x94>
 800ed2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	075a      	lsls	r2, r3, #29
 800ed30:	d505      	bpl.n	800ed3e <__sflush_r+0x42>
 800ed32:	6863      	ldr	r3, [r4, #4]
 800ed34:	1ac0      	subs	r0, r0, r3
 800ed36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed38:	b10b      	cbz	r3, 800ed3e <__sflush_r+0x42>
 800ed3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed3c:	1ac0      	subs	r0, r0, r3
 800ed3e:	2300      	movs	r3, #0
 800ed40:	4602      	mov	r2, r0
 800ed42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed44:	6a21      	ldr	r1, [r4, #32]
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b0      	blx	r6
 800ed4a:	1c43      	adds	r3, r0, #1
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	d106      	bne.n	800ed5e <__sflush_r+0x62>
 800ed50:	6829      	ldr	r1, [r5, #0]
 800ed52:	291d      	cmp	r1, #29
 800ed54:	d82c      	bhi.n	800edb0 <__sflush_r+0xb4>
 800ed56:	4a29      	ldr	r2, [pc, #164]	; (800edfc <__sflush_r+0x100>)
 800ed58:	40ca      	lsrs	r2, r1
 800ed5a:	07d6      	lsls	r6, r2, #31
 800ed5c:	d528      	bpl.n	800edb0 <__sflush_r+0xb4>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	6062      	str	r2, [r4, #4]
 800ed62:	04d9      	lsls	r1, r3, #19
 800ed64:	6922      	ldr	r2, [r4, #16]
 800ed66:	6022      	str	r2, [r4, #0]
 800ed68:	d504      	bpl.n	800ed74 <__sflush_r+0x78>
 800ed6a:	1c42      	adds	r2, r0, #1
 800ed6c:	d101      	bne.n	800ed72 <__sflush_r+0x76>
 800ed6e:	682b      	ldr	r3, [r5, #0]
 800ed70:	b903      	cbnz	r3, 800ed74 <__sflush_r+0x78>
 800ed72:	6560      	str	r0, [r4, #84]	; 0x54
 800ed74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed76:	602f      	str	r7, [r5, #0]
 800ed78:	2900      	cmp	r1, #0
 800ed7a:	d0cb      	beq.n	800ed14 <__sflush_r+0x18>
 800ed7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed80:	4299      	cmp	r1, r3
 800ed82:	d002      	beq.n	800ed8a <__sflush_r+0x8e>
 800ed84:	4628      	mov	r0, r5
 800ed86:	f7fe fe71 	bl	800da6c <_free_r>
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	6360      	str	r0, [r4, #52]	; 0x34
 800ed8e:	e7c2      	b.n	800ed16 <__sflush_r+0x1a>
 800ed90:	6a21      	ldr	r1, [r4, #32]
 800ed92:	2301      	movs	r3, #1
 800ed94:	4628      	mov	r0, r5
 800ed96:	47b0      	blx	r6
 800ed98:	1c41      	adds	r1, r0, #1
 800ed9a:	d1c7      	bne.n	800ed2c <__sflush_r+0x30>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0c4      	beq.n	800ed2c <__sflush_r+0x30>
 800eda2:	2b1d      	cmp	r3, #29
 800eda4:	d001      	beq.n	800edaa <__sflush_r+0xae>
 800eda6:	2b16      	cmp	r3, #22
 800eda8:	d101      	bne.n	800edae <__sflush_r+0xb2>
 800edaa:	602f      	str	r7, [r5, #0]
 800edac:	e7b2      	b.n	800ed14 <__sflush_r+0x18>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edb4:	81a3      	strh	r3, [r4, #12]
 800edb6:	e7ae      	b.n	800ed16 <__sflush_r+0x1a>
 800edb8:	690f      	ldr	r7, [r1, #16]
 800edba:	2f00      	cmp	r7, #0
 800edbc:	d0aa      	beq.n	800ed14 <__sflush_r+0x18>
 800edbe:	0793      	lsls	r3, r2, #30
 800edc0:	680e      	ldr	r6, [r1, #0]
 800edc2:	bf08      	it	eq
 800edc4:	694b      	ldreq	r3, [r1, #20]
 800edc6:	600f      	str	r7, [r1, #0]
 800edc8:	bf18      	it	ne
 800edca:	2300      	movne	r3, #0
 800edcc:	1bf6      	subs	r6, r6, r7
 800edce:	608b      	str	r3, [r1, #8]
 800edd0:	2e00      	cmp	r6, #0
 800edd2:	dd9f      	ble.n	800ed14 <__sflush_r+0x18>
 800edd4:	6a21      	ldr	r1, [r4, #32]
 800edd6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800edda:	4633      	mov	r3, r6
 800eddc:	463a      	mov	r2, r7
 800edde:	4628      	mov	r0, r5
 800ede0:	47e0      	blx	ip
 800ede2:	2800      	cmp	r0, #0
 800ede4:	dc06      	bgt.n	800edf4 <__sflush_r+0xf8>
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edec:	81a3      	strh	r3, [r4, #12]
 800edee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edf2:	e790      	b.n	800ed16 <__sflush_r+0x1a>
 800edf4:	4407      	add	r7, r0
 800edf6:	1a36      	subs	r6, r6, r0
 800edf8:	e7ea      	b.n	800edd0 <__sflush_r+0xd4>
 800edfa:	bf00      	nop
 800edfc:	20400001 	.word	0x20400001

0800ee00 <_fflush_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	690b      	ldr	r3, [r1, #16]
 800ee04:	4605      	mov	r5, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b913      	cbnz	r3, 800ee10 <_fflush_r+0x10>
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	b118      	cbz	r0, 800ee1a <_fflush_r+0x1a>
 800ee12:	6983      	ldr	r3, [r0, #24]
 800ee14:	b90b      	cbnz	r3, 800ee1a <_fflush_r+0x1a>
 800ee16:	f000 f871 	bl	800eefc <__sinit>
 800ee1a:	4b14      	ldr	r3, [pc, #80]	; (800ee6c <_fflush_r+0x6c>)
 800ee1c:	429c      	cmp	r4, r3
 800ee1e:	d11b      	bne.n	800ee58 <_fflush_r+0x58>
 800ee20:	686c      	ldr	r4, [r5, #4]
 800ee22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0ef      	beq.n	800ee0a <_fflush_r+0xa>
 800ee2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee2c:	07d0      	lsls	r0, r2, #31
 800ee2e:	d404      	bmi.n	800ee3a <_fflush_r+0x3a>
 800ee30:	0599      	lsls	r1, r3, #22
 800ee32:	d402      	bmi.n	800ee3a <_fflush_r+0x3a>
 800ee34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee36:	f000 ff27 	bl	800fc88 <__retarget_lock_acquire_recursive>
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	4621      	mov	r1, r4
 800ee3e:	f7ff ff5d 	bl	800ecfc <__sflush_r>
 800ee42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee44:	07da      	lsls	r2, r3, #31
 800ee46:	4605      	mov	r5, r0
 800ee48:	d4e0      	bmi.n	800ee0c <_fflush_r+0xc>
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	059b      	lsls	r3, r3, #22
 800ee4e:	d4dd      	bmi.n	800ee0c <_fflush_r+0xc>
 800ee50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee52:	f000 ff21 	bl	800fc98 <__retarget_lock_release_recursive>
 800ee56:	e7d9      	b.n	800ee0c <_fflush_r+0xc>
 800ee58:	4b05      	ldr	r3, [pc, #20]	; (800ee70 <_fflush_r+0x70>)
 800ee5a:	429c      	cmp	r4, r3
 800ee5c:	d101      	bne.n	800ee62 <_fflush_r+0x62>
 800ee5e:	68ac      	ldr	r4, [r5, #8]
 800ee60:	e7df      	b.n	800ee22 <_fflush_r+0x22>
 800ee62:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <_fflush_r+0x74>)
 800ee64:	429c      	cmp	r4, r3
 800ee66:	bf08      	it	eq
 800ee68:	68ec      	ldreq	r4, [r5, #12]
 800ee6a:	e7da      	b.n	800ee22 <_fflush_r+0x22>
 800ee6c:	08013fd4 	.word	0x08013fd4
 800ee70:	08013ff4 	.word	0x08013ff4
 800ee74:	08013fb4 	.word	0x08013fb4

0800ee78 <std>:
 800ee78:	2300      	movs	r3, #0
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee86:	6083      	str	r3, [r0, #8]
 800ee88:	8181      	strh	r1, [r0, #12]
 800ee8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee8c:	81c2      	strh	r2, [r0, #14]
 800ee8e:	6183      	str	r3, [r0, #24]
 800ee90:	4619      	mov	r1, r3
 800ee92:	2208      	movs	r2, #8
 800ee94:	305c      	adds	r0, #92	; 0x5c
 800ee96:	f002 fe82 	bl	8011b9e <memset>
 800ee9a:	4b05      	ldr	r3, [pc, #20]	; (800eeb0 <std+0x38>)
 800ee9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee9e:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <std+0x3c>)
 800eea0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eea2:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <std+0x40>)
 800eea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eea6:	4b05      	ldr	r3, [pc, #20]	; (800eebc <std+0x44>)
 800eea8:	6224      	str	r4, [r4, #32]
 800eeaa:	6323      	str	r3, [r4, #48]	; 0x30
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	bf00      	nop
 800eeb0:	08012179 	.word	0x08012179
 800eeb4:	0801219b 	.word	0x0801219b
 800eeb8:	080121d3 	.word	0x080121d3
 800eebc:	080121f7 	.word	0x080121f7

0800eec0 <_cleanup_r>:
 800eec0:	4901      	ldr	r1, [pc, #4]	; (800eec8 <_cleanup_r+0x8>)
 800eec2:	f003 b8eb 	b.w	801209c <_fwalk_reent>
 800eec6:	bf00      	nop
 800eec8:	0800ee01 	.word	0x0800ee01

0800eecc <__sfp_lock_acquire>:
 800eecc:	4801      	ldr	r0, [pc, #4]	; (800eed4 <__sfp_lock_acquire+0x8>)
 800eece:	f000 bedb 	b.w	800fc88 <__retarget_lock_acquire_recursive>
 800eed2:	bf00      	nop
 800eed4:	2000057c 	.word	0x2000057c

0800eed8 <__sfp_lock_release>:
 800eed8:	4801      	ldr	r0, [pc, #4]	; (800eee0 <__sfp_lock_release+0x8>)
 800eeda:	f000 bedd 	b.w	800fc98 <__retarget_lock_release_recursive>
 800eede:	bf00      	nop
 800eee0:	2000057c 	.word	0x2000057c

0800eee4 <__sinit_lock_acquire>:
 800eee4:	4801      	ldr	r0, [pc, #4]	; (800eeec <__sinit_lock_acquire+0x8>)
 800eee6:	f000 becf 	b.w	800fc88 <__retarget_lock_acquire_recursive>
 800eeea:	bf00      	nop
 800eeec:	20000590 	.word	0x20000590

0800eef0 <__sinit_lock_release>:
 800eef0:	4801      	ldr	r0, [pc, #4]	; (800eef8 <__sinit_lock_release+0x8>)
 800eef2:	f000 bed1 	b.w	800fc98 <__retarget_lock_release_recursive>
 800eef6:	bf00      	nop
 800eef8:	20000590 	.word	0x20000590

0800eefc <__sinit>:
 800eefc:	b510      	push	{r4, lr}
 800eefe:	4604      	mov	r4, r0
 800ef00:	f7ff fff0 	bl	800eee4 <__sinit_lock_acquire>
 800ef04:	69a3      	ldr	r3, [r4, #24]
 800ef06:	b11b      	cbz	r3, 800ef10 <__sinit+0x14>
 800ef08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef0c:	f7ff bff0 	b.w	800eef0 <__sinit_lock_release>
 800ef10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef14:	6523      	str	r3, [r4, #80]	; 0x50
 800ef16:	4b13      	ldr	r3, [pc, #76]	; (800ef64 <__sinit+0x68>)
 800ef18:	4a13      	ldr	r2, [pc, #76]	; (800ef68 <__sinit+0x6c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef1e:	42a3      	cmp	r3, r4
 800ef20:	bf04      	itt	eq
 800ef22:	2301      	moveq	r3, #1
 800ef24:	61a3      	streq	r3, [r4, #24]
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 f820 	bl	800ef6c <__sfp>
 800ef2c:	6060      	str	r0, [r4, #4]
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f000 f81c 	bl	800ef6c <__sfp>
 800ef34:	60a0      	str	r0, [r4, #8]
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 f818 	bl	800ef6c <__sfp>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	60e0      	str	r0, [r4, #12]
 800ef40:	2104      	movs	r1, #4
 800ef42:	6860      	ldr	r0, [r4, #4]
 800ef44:	f7ff ff98 	bl	800ee78 <std>
 800ef48:	68a0      	ldr	r0, [r4, #8]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	2109      	movs	r1, #9
 800ef4e:	f7ff ff93 	bl	800ee78 <std>
 800ef52:	68e0      	ldr	r0, [r4, #12]
 800ef54:	2202      	movs	r2, #2
 800ef56:	2112      	movs	r1, #18
 800ef58:	f7ff ff8e 	bl	800ee78 <std>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	61a3      	str	r3, [r4, #24]
 800ef60:	e7d2      	b.n	800ef08 <__sinit+0xc>
 800ef62:	bf00      	nop
 800ef64:	08013fa4 	.word	0x08013fa4
 800ef68:	0800eec1 	.word	0x0800eec1

0800ef6c <__sfp>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	4607      	mov	r7, r0
 800ef70:	f7ff ffac 	bl	800eecc <__sfp_lock_acquire>
 800ef74:	4b1e      	ldr	r3, [pc, #120]	; (800eff0 <__sfp+0x84>)
 800ef76:	681e      	ldr	r6, [r3, #0]
 800ef78:	69b3      	ldr	r3, [r6, #24]
 800ef7a:	b913      	cbnz	r3, 800ef82 <__sfp+0x16>
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f7ff ffbd 	bl	800eefc <__sinit>
 800ef82:	3648      	adds	r6, #72	; 0x48
 800ef84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	d503      	bpl.n	800ef94 <__sfp+0x28>
 800ef8c:	6833      	ldr	r3, [r6, #0]
 800ef8e:	b30b      	cbz	r3, 800efd4 <__sfp+0x68>
 800ef90:	6836      	ldr	r6, [r6, #0]
 800ef92:	e7f7      	b.n	800ef84 <__sfp+0x18>
 800ef94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef98:	b9d5      	cbnz	r5, 800efd0 <__sfp+0x64>
 800ef9a:	4b16      	ldr	r3, [pc, #88]	; (800eff4 <__sfp+0x88>)
 800ef9c:	60e3      	str	r3, [r4, #12]
 800ef9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800efa2:	6665      	str	r5, [r4, #100]	; 0x64
 800efa4:	f000 fe67 	bl	800fc76 <__retarget_lock_init_recursive>
 800efa8:	f7ff ff96 	bl	800eed8 <__sfp_lock_release>
 800efac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800efb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800efb4:	6025      	str	r5, [r4, #0]
 800efb6:	61a5      	str	r5, [r4, #24]
 800efb8:	2208      	movs	r2, #8
 800efba:	4629      	mov	r1, r5
 800efbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efc0:	f002 fded 	bl	8011b9e <memset>
 800efc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efcc:	4620      	mov	r0, r4
 800efce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd0:	3468      	adds	r4, #104	; 0x68
 800efd2:	e7d9      	b.n	800ef88 <__sfp+0x1c>
 800efd4:	2104      	movs	r1, #4
 800efd6:	4638      	mov	r0, r7
 800efd8:	f003 f84a 	bl	8012070 <__sfmoreglue>
 800efdc:	4604      	mov	r4, r0
 800efde:	6030      	str	r0, [r6, #0]
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d1d5      	bne.n	800ef90 <__sfp+0x24>
 800efe4:	f7ff ff78 	bl	800eed8 <__sfp_lock_release>
 800efe8:	230c      	movs	r3, #12
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	e7ee      	b.n	800efcc <__sfp+0x60>
 800efee:	bf00      	nop
 800eff0:	08013fa4 	.word	0x08013fa4
 800eff4:	ffff0001 	.word	0xffff0001

0800eff8 <__smakebuf_r>:
 800eff8:	898b      	ldrh	r3, [r1, #12]
 800effa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800effc:	079d      	lsls	r5, r3, #30
 800effe:	4606      	mov	r6, r0
 800f000:	460c      	mov	r4, r1
 800f002:	d507      	bpl.n	800f014 <__smakebuf_r+0x1c>
 800f004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	6123      	str	r3, [r4, #16]
 800f00c:	2301      	movs	r3, #1
 800f00e:	6163      	str	r3, [r4, #20]
 800f010:	b002      	add	sp, #8
 800f012:	bd70      	pop	{r4, r5, r6, pc}
 800f014:	ab01      	add	r3, sp, #4
 800f016:	466a      	mov	r2, sp
 800f018:	f003 f85f 	bl	80120da <__swhatbuf_r>
 800f01c:	9900      	ldr	r1, [sp, #0]
 800f01e:	4605      	mov	r5, r0
 800f020:	4630      	mov	r0, r6
 800f022:	f7fe fd6d 	bl	800db00 <_malloc_r>
 800f026:	b948      	cbnz	r0, 800f03c <__smakebuf_r+0x44>
 800f028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f02c:	059a      	lsls	r2, r3, #22
 800f02e:	d4ef      	bmi.n	800f010 <__smakebuf_r+0x18>
 800f030:	f023 0303 	bic.w	r3, r3, #3
 800f034:	f043 0302 	orr.w	r3, r3, #2
 800f038:	81a3      	strh	r3, [r4, #12]
 800f03a:	e7e3      	b.n	800f004 <__smakebuf_r+0xc>
 800f03c:	4b0d      	ldr	r3, [pc, #52]	; (800f074 <__smakebuf_r+0x7c>)
 800f03e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f040:	89a3      	ldrh	r3, [r4, #12]
 800f042:	6020      	str	r0, [r4, #0]
 800f044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	9b00      	ldr	r3, [sp, #0]
 800f04c:	6163      	str	r3, [r4, #20]
 800f04e:	9b01      	ldr	r3, [sp, #4]
 800f050:	6120      	str	r0, [r4, #16]
 800f052:	b15b      	cbz	r3, 800f06c <__smakebuf_r+0x74>
 800f054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f058:	4630      	mov	r0, r6
 800f05a:	f000 f85b 	bl	800f114 <_isatty_r>
 800f05e:	b128      	cbz	r0, 800f06c <__smakebuf_r+0x74>
 800f060:	89a3      	ldrh	r3, [r4, #12]
 800f062:	f023 0303 	bic.w	r3, r3, #3
 800f066:	f043 0301 	orr.w	r3, r3, #1
 800f06a:	81a3      	strh	r3, [r4, #12]
 800f06c:	89a0      	ldrh	r0, [r4, #12]
 800f06e:	4305      	orrs	r5, r0
 800f070:	81a5      	strh	r5, [r4, #12]
 800f072:	e7cd      	b.n	800f010 <__smakebuf_r+0x18>
 800f074:	0800eec1 	.word	0x0800eec1

0800f078 <raise>:
 800f078:	4b02      	ldr	r3, [pc, #8]	; (800f084 <raise+0xc>)
 800f07a:	4601      	mov	r1, r0
 800f07c:	6818      	ldr	r0, [r3, #0]
 800f07e:	f003 b851 	b.w	8012124 <_raise_r>
 800f082:	bf00      	nop
 800f084:	2000028c 	.word	0x2000028c

0800f088 <_kill_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d07      	ldr	r5, [pc, #28]	; (800f0a8 <_kill_r+0x20>)
 800f08c:	2300      	movs	r3, #0
 800f08e:	4604      	mov	r4, r0
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	602b      	str	r3, [r5, #0]
 800f096:	f000 fde5 	bl	800fc64 <_kill>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	d102      	bne.n	800f0a4 <_kill_r+0x1c>
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	b103      	cbz	r3, 800f0a4 <_kill_r+0x1c>
 800f0a2:	6023      	str	r3, [r4, #0]
 800f0a4:	bd38      	pop	{r3, r4, r5, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20001730 	.word	0x20001730

0800f0ac <_write_r>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	4d07      	ldr	r5, [pc, #28]	; (800f0cc <_write_r+0x20>)
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	4608      	mov	r0, r1
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	602a      	str	r2, [r5, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	f000 fdc2 	bl	800fc44 <_write>
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	d102      	bne.n	800f0ca <_write_r+0x1e>
 800f0c4:	682b      	ldr	r3, [r5, #0]
 800f0c6:	b103      	cbz	r3, 800f0ca <_write_r+0x1e>
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}
 800f0cc:	20001730 	.word	0x20001730

0800f0d0 <_close_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d06      	ldr	r5, [pc, #24]	; (800f0ec <_close_r+0x1c>)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	f000 fdb8 	bl	800fc50 <_close>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d102      	bne.n	800f0ea <_close_r+0x1a>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b103      	cbz	r3, 800f0ea <_close_r+0x1a>
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	20001730 	.word	0x20001730

0800f0f0 <_fstat_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4d07      	ldr	r5, [pc, #28]	; (800f110 <_fstat_r+0x20>)
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	602b      	str	r3, [r5, #0]
 800f0fe:	f000 fdb5 	bl	800fc6c <_fstat>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	d102      	bne.n	800f10c <_fstat_r+0x1c>
 800f106:	682b      	ldr	r3, [r5, #0]
 800f108:	b103      	cbz	r3, 800f10c <_fstat_r+0x1c>
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
 800f10e:	bf00      	nop
 800f110:	20001730 	.word	0x20001730

0800f114 <_isatty_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d06      	ldr	r5, [pc, #24]	; (800f130 <_isatty_r+0x1c>)
 800f118:	2300      	movs	r3, #0
 800f11a:	4604      	mov	r4, r0
 800f11c:	4608      	mov	r0, r1
 800f11e:	602b      	str	r3, [r5, #0]
 800f120:	f000 fd9b 	bl	800fc5a <_isatty>
 800f124:	1c43      	adds	r3, r0, #1
 800f126:	d102      	bne.n	800f12e <_isatty_r+0x1a>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	b103      	cbz	r3, 800f12e <_isatty_r+0x1a>
 800f12c:	6023      	str	r3, [r4, #0]
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	20001730 	.word	0x20001730

0800f134 <_lseek_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	; (800f154 <_lseek_r+0x20>)
 800f138:	4604      	mov	r4, r0
 800f13a:	4608      	mov	r0, r1
 800f13c:	4611      	mov	r1, r2
 800f13e:	2200      	movs	r2, #0
 800f140:	602a      	str	r2, [r5, #0]
 800f142:	461a      	mov	r2, r3
 800f144:	f000 fd87 	bl	800fc56 <_lseek>
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	d102      	bne.n	800f152 <_lseek_r+0x1e>
 800f14c:	682b      	ldr	r3, [r5, #0]
 800f14e:	b103      	cbz	r3, 800f152 <_lseek_r+0x1e>
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	bd38      	pop	{r3, r4, r5, pc}
 800f154:	20001730 	.word	0x20001730

0800f158 <_read_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d07      	ldr	r5, [pc, #28]	; (800f178 <_read_r+0x20>)
 800f15c:	4604      	mov	r4, r0
 800f15e:	4608      	mov	r0, r1
 800f160:	4611      	mov	r1, r2
 800f162:	2200      	movs	r2, #0
 800f164:	602a      	str	r2, [r5, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	f000 fd66 	bl	800fc38 <_read>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d102      	bne.n	800f176 <_read_r+0x1e>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	b103      	cbz	r3, 800f176 <_read_r+0x1e>
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	20001730 	.word	0x20001730

0800f17c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800f17c:	4770      	bx	lr

0800f17e <gpio_pin_interrupt_configure_dt>:
{
 800f17e:	b538      	push	{r3, r4, r5, lr}
 800f180:	4603      	mov	r3, r0
 800f182:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 800f184:	6800      	ldr	r0, [r0, #0]
 800f186:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
 800f188:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 800f18a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800f18c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800f190:	d006      	beq.n	800f1a0 <gpio_pin_interrupt_configure_dt+0x22>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800f192:	6825      	ldr	r5, [r4, #0]
 800f194:	2401      	movs	r4, #1
 800f196:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800f198:	4225      	tst	r5, r4
 800f19a:	d001      	beq.n	800f1a0 <gpio_pin_interrupt_configure_dt+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 800f19c:	f482 22c0 	eor.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800f1a0:	699c      	ldr	r4, [r3, #24]
 800f1a2:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 800f1a6:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
 800f1aa:	47a0      	blx	r4
}
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}

0800f1ae <gpio_pin_configure_dt>:
{
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
 800f1b2:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
 800f1b4:	f892 c004 	ldrb.w	ip, [r2, #4]
				  spec->dt_flags | extra_flags);
 800f1b8:	7953      	ldrb	r3, [r2, #5]
	return gpio_pin_configure(spec->port,
 800f1ba:	430b      	orrs	r3, r1
	const struct gpio_driver_api *api =
 800f1bc:	6884      	ldr	r4, [r0, #8]
	struct gpio_driver_data *data =
 800f1be:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800f1c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800f1c4:	d007      	beq.n	800f1d6 <gpio_pin_configure_dt+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800f1c6:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800f1ca:	d004      	beq.n	800f1d6 <gpio_pin_configure_dt+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800f1cc:	f013 0f01 	tst.w	r3, #1
 800f1d0:	d001      	beq.n	800f1d6 <gpio_pin_configure_dt+0x28>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800f1d2:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800f1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800f1da:	f013 0f01 	tst.w	r3, #1
 800f1de:	d00a      	beq.n	800f1f6 <gpio_pin_configure_dt+0x48>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	fa03 fe0c 	lsl.w	lr, r3, ip
 800f1e6:	680b      	ldr	r3, [r1, #0]
 800f1e8:	ea43 030e 	orr.w	r3, r3, lr
 800f1ec:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
 800f1ee:	6823      	ldr	r3, [r4, #0]
 800f1f0:	4661      	mov	r1, ip
 800f1f2:	4798      	blx	r3
}
 800f1f4:	bd10      	pop	{r4, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	fa03 fe0c 	lsl.w	lr, r3, ip
 800f1fc:	680b      	ldr	r3, [r1, #0]
 800f1fe:	ea23 030e 	bic.w	r3, r3, lr
 800f202:	600b      	str	r3, [r1, #0]
 800f204:	e7f3      	b.n	800f1ee <gpio_pin_configure_dt+0x40>

0800f206 <gpio_add_callback>:
{
 800f206:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
 800f208:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	b113      	cbz	r3, 800f214 <gpio_add_callback+0xe>
	return api->manage_callback(port, callback, true);
 800f20e:	2201      	movs	r2, #1
 800f210:	4798      	blx	r3
}
 800f212:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
 800f214:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800f218:	e7fb      	b.n	800f212 <gpio_add_callback+0xc>

0800f21a <cbprintf_via_va_list>:
{
 800f21a:	b510      	push	{r4, lr}
 800f21c:	460c      	mov	r4, r1
 800f21e:	4611      	mov	r1, r2
 800f220:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 800f222:	9b02      	ldr	r3, [sp, #8]
 800f224:	47a0      	blx	r4
}
 800f226:	bd10      	pop	{r4, pc}

0800f228 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 800f228:	b343      	cbz	r3, 800f27c <cbpprintf_external+0x54>
{
 800f22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	4607      	mov	r7, r0
 800f232:	4688      	mov	r8, r1
 800f234:	4691      	mov	r9, r2
 800f236:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 800f238:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 800f23a:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 800f23c:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 800f23e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f242:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	e00a      	b.n	800f260 <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 800f24a:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 800f24e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 800f252:	4620      	mov	r0, r4
 800f254:	f7f1 fdff 	bl	8000e56 <strlen>
 800f258:	3001      	adds	r0, #1
 800f25a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800f25c:	f10a 0a01 	add.w	sl, sl, #1
 800f260:	45b2      	cmp	sl, r6
 800f262:	d3f2      	bcc.n	800f24a <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 800f264:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	686b      	ldr	r3, [r5, #4]
 800f26c:	464a      	mov	r2, r9
 800f26e:	4641      	mov	r1, r8
 800f270:	4638      	mov	r0, r7
 800f272:	f7ff ffd2 	bl	800f21a <cbprintf_via_va_list>
}
 800f276:	b002      	add	sp, #8
 800f278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 800f27c:	f06f 0015 	mvn.w	r0, #21
}
 800f280:	4770      	bx	lr

0800f282 <arch_printk_char_out>:
}
 800f282:	2000      	movs	r0, #0
 800f284:	4770      	bx	lr

0800f286 <str_out>:
{
 800f286:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800f288:	680c      	ldr	r4, [r1, #0]
 800f28a:	b154      	cbz	r4, 800f2a2 <str_out+0x1c>
 800f28c:	688a      	ldr	r2, [r1, #8]
 800f28e:	684b      	ldr	r3, [r1, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	da06      	bge.n	800f2a2 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800f294:	3b01      	subs	r3, #1
 800f296:	429a      	cmp	r2, r3
 800f298:	d008      	beq.n	800f2ac <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800f29a:	1c53      	adds	r3, r2, #1
 800f29c:	608b      	str	r3, [r1, #8]
 800f29e:	54a0      	strb	r0, [r4, r2]
 800f2a0:	e002      	b.n	800f2a8 <str_out+0x22>
		ctx->count++;
 800f2a2:	688b      	ldr	r3, [r1, #8]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	608b      	str	r3, [r1, #8]
}
 800f2a8:	bc10      	pop	{r4}
 800f2aa:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800f2ac:	1c53      	adds	r3, r2, #1
 800f2ae:	608b      	str	r3, [r1, #8]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	54a3      	strb	r3, [r4, r2]
 800f2b4:	e7f8      	b.n	800f2a8 <str_out+0x22>

0800f2b6 <printk>:
{
 800f2b6:	b40f      	push	{r0, r1, r2, r3}
 800f2b8:	b500      	push	{lr}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	a904      	add	r1, sp, #16
 800f2be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800f2c2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800f2c4:	f7f4 f972 	bl	80035ac <vprintk>
}
 800f2c8:	b003      	add	sp, #12
 800f2ca:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ce:	b004      	add	sp, #16
 800f2d0:	4770      	bx	lr

0800f2d2 <snprintk>:
{
 800f2d2:	b40c      	push	{r2, r3}
 800f2d4:	b500      	push	{lr}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	ab04      	add	r3, sp, #16
 800f2da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800f2de:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800f2e0:	f7f4 f974 	bl	80035cc <vsnprintk>
}
 800f2e4:	b003      	add	sp, #12
 800f2e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ea:	b002      	add	sp, #8
 800f2ec:	4770      	bx	lr

0800f2ee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800f2ee:	b508      	push	{r3, lr}
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	47a0      	blx	r4
	return z_impl_z_current_get();
 800f2fa:	f7fd fe29 	bl	800cf50 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800f2fe:	f7f6 fb67 	bl	80059d0 <z_impl_k_thread_abort>

0800f302 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 800f302:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800f304:	1d13      	adds	r3, r2, #4
 800f306:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800f30a:	b97c      	cbnz	r4, 800f32c <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
 800f30c:	2301      	movs	r3, #1
 800f30e:	fa03 f402 	lsl.w	r4, r3, r2
 800f312:	68c3      	ldr	r3, [r0, #12]
 800f314:	4323      	orrs	r3, r4
 800f316:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800f318:	3204      	adds	r2, #4
 800f31a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800f31e:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800f320:	1d1a      	adds	r2, r3, #4
 800f322:	b289      	uxth	r1, r1
 800f324:	5281      	strh	r1, [r0, r2]
 800f326:	3306      	adds	r3, #6
 800f328:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 800f32a:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
 800f32c:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
 800f32e:	3204      	adds	r2, #4
 800f330:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
 800f332:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
 800f336:	f10c 0e04 	add.w	lr, ip, #4
 800f33a:	f820 300e 	strh.w	r3, [r0, lr]
 800f33e:	f10c 0c06 	add.w	ip, ip, #6
 800f342:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
 800f346:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 800f348:	3306      	adds	r3, #6
 800f34a:	b289      	uxth	r1, r1
 800f34c:	52c1      	strh	r1, [r0, r3]
 800f34e:	5281      	strh	r1, [r0, r2]
 800f350:	e7eb      	b.n	800f32a <free_list_add_bidx+0x28>

0800f352 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800f352:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 800f354:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 800f358:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800f35a:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800f35c:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800f360:	f1c2 021f 	rsb	r2, r2, #31
 800f364:	f7ff ffcd 	bl	800f302 <free_list_add_bidx>
	}
}
 800f368:	bd08      	pop	{r3, pc}

0800f36a <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800f36a:	b570      	push	{r4, r5, r6, lr}
 800f36c:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800f36e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800f370:	1dc8      	adds	r0, r1, #7
 800f372:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800f376:	440a      	add	r2, r1
 800f378:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800f37c:	1a12      	subs	r2, r2, r0
 800f37e:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800f380:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800f382:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	60c3      	str	r3, [r0, #12]
 800f388:	fab5 f185 	clz	r1, r5
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800f38c:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800f390:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 800f394:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800f396:	1dce      	adds	r6, r1, #7
 800f398:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800f39a:	e005      	b.n	800f3a8 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
 800f39c:	f103 0c04 	add.w	ip, r3, #4
 800f3a0:	2400      	movs	r4, #0
 800f3a2:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	4573      	cmp	r3, lr
 800f3aa:	dbf7      	blt.n	800f39c <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800f3ac:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
 800f3ae:	b2a4      	uxth	r4, r4
 800f3b0:	8044      	strh	r4, [r0, #2]
 800f3b2:	f04f 0c00 	mov.w	ip, #0
 800f3b6:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800f3ba:	f044 0401 	orr.w	r4, r4, #1
 800f3be:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800f3c0:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800f3c2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
 800f3c6:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
 800f3ca:	1ca5      	adds	r5, r4, #2
 800f3cc:	f820 e005 	strh.w	lr, [r0, r5]
 800f3d0:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
 800f3d2:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
 800f3d6:	1c95      	adds	r5, r2, #2
 800f3d8:	f820 c005 	strh.w	ip, [r0, r5]
 800f3dc:	4402      	add	r2, r0
 800f3de:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800f3e0:	8853      	ldrh	r3, [r2, #2]
 800f3e2:	f043 0301 	orr.w	r3, r3, #1
 800f3e6:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800f3e8:	f7ff ffb3 	bl	800f352 <free_list_add>
}
 800f3ec:	bd70      	pop	{r4, r5, r6, pc}

0800f3ee <outs>:
{
 800f3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3f2:	4607      	mov	r7, r0
 800f3f4:	460e      	mov	r6, r1
 800f3f6:	4614      	mov	r4, r2
 800f3f8:	4698      	mov	r8, r3
	size_t count = 0;
 800f3fa:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800f3fc:	e006      	b.n	800f40c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800f3fe:	4631      	mov	r1, r6
 800f400:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f404:	47b8      	blx	r7
		if (rc < 0) {
 800f406:	2800      	cmp	r0, #0
 800f408:	db09      	blt.n	800f41e <outs+0x30>
		++count;
 800f40a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800f40c:	4544      	cmp	r4, r8
 800f40e:	d3f6      	bcc.n	800f3fe <outs+0x10>
 800f410:	f1b8 0f00 	cmp.w	r8, #0
 800f414:	d102      	bne.n	800f41c <outs+0x2e>
 800f416:	7823      	ldrb	r3, [r4, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1f0      	bne.n	800f3fe <outs+0x10>
	return (int)count;
 800f41c:	4628      	mov	r0, r5
}
 800f41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f422 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 800f422:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 800f424:	2300      	movs	r3, #0
 800f426:	f36f 0300 	bfc	r3, #0, #1
 800f42a:	f043 0302 	orr.w	r3, r3, #2
 800f42e:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800f432:	6a02      	ldr	r2, [r0, #32]
 800f434:	6804      	ldr	r4, [r0, #0]
 800f436:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800f43a:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 800f43c:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f43e:	6902      	ldr	r2, [r0, #16]
 800f440:	f012 0201 	ands.w	r2, r2, #1
 800f444:	d104      	bne.n	800f450 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f446:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f448:	42a3      	cmp	r3, r4
 800f44a:	d304      	bcc.n	800f456 <add_skip_item+0x34>
 800f44c:	1b1b      	subs	r3, r3, r4
 800f44e:	e002      	b.n	800f456 <add_skip_item+0x34>
		return i & (buffer->size - 1);
 800f450:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f452:	3c01      	subs	r4, #1
 800f454:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800f456:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f458:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 800f45a:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f45c:	b922      	cbnz	r2, 800f468 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f45e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f460:	4299      	cmp	r1, r3
 800f462:	d304      	bcc.n	800f46e <add_skip_item+0x4c>
 800f464:	1ac9      	subs	r1, r1, r3
 800f466:	e002      	b.n	800f46e <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 800f468:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f46a:	3b01      	subs	r3, #1
 800f46c:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f46e:	6041      	str	r1, [r0, #4]
}
 800f470:	bc10      	pop	{r4}
 800f472:	4770      	bx	lr

0800f474 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 800f474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f478:	b083      	sub	sp, #12
 800f47a:	4604      	mov	r4, r0
 800f47c:	9101      	str	r1, [sp, #4]
 800f47e:	4615      	mov	r5, r2
 800f480:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 800f482:	2300      	movs	r3, #0
 800f484:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800f486:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800f48a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800f48e:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800f492:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800f496:	f003 0303 	and.w	r3, r3, #3
 800f49a:	2b02      	cmp	r3, #2
 800f49c:	d012      	beq.n	800f4c4 <drop_item_locked+0x50>
	return 0;
 800f49e:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800f4a2:	69e3      	ldr	r3, [r4, #28]
 800f4a4:	4650      	mov	r0, sl
 800f4a6:	4798      	blx	r3
 800f4a8:	4607      	mov	r7, r0
	if (skip_wlen) {
 800f4aa:	f1bb 0f00 	cmp.w	fp, #0
 800f4ae:	d151      	bne.n	800f554 <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d05c      	beq.n	800f56e <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 800f4b4:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800f4b8:	f013 0f02 	tst.w	r3, #2
 800f4bc:	d109      	bne.n	800f4d2 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	7033      	strb	r3, [r6, #0]
 800f4c2:	e048      	b.n	800f556 <drop_item_locked+0xe2>
		return item->skip.len;
 800f4c4:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800f4c8:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800f4cc:	d0e9      	beq.n	800f4a2 <drop_item_locked+0x2e>
		return item->skip.len;
 800f4ce:	465f      	mov	r7, fp
 800f4d0:	e7eb      	b.n	800f4aa <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 800f4d2:	9901      	ldr	r1, [sp, #4]
 800f4d4:	3101      	adds	r1, #1
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f7ff ffa3 	bl	800f422 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800f4dc:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800f4de:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f4e0:	6922      	ldr	r2, [r4, #16]
 800f4e2:	f012 0201 	ands.w	r2, r2, #1
 800f4e6:	d104      	bne.n	800f4f2 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f4e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f4ea:	428b      	cmp	r3, r1
 800f4ec:	d304      	bcc.n	800f4f8 <drop_item_locked+0x84>
 800f4ee:	1a5b      	subs	r3, r3, r1
 800f4f0:	e002      	b.n	800f4f8 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 800f4f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f4f4:	3901      	subs	r1, #1
 800f4f6:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800f4f8:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800f4fa:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 800f4fc:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f4fe:	b922      	cbnz	r2, 800f50a <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f500:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f502:	428b      	cmp	r3, r1
 800f504:	d304      	bcc.n	800f510 <drop_item_locked+0x9c>
 800f506:	1a5b      	subs	r3, r3, r1
 800f508:	e002      	b.n	800f510 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 800f50a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f50c:	3901      	subs	r1, #1
 800f50e:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800f510:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800f512:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800f514:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f516:	b922      	cbnz	r2, 800f522 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f518:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d304      	bcc.n	800f528 <drop_item_locked+0xb4>
 800f51e:	1a9b      	subs	r3, r3, r2
 800f520:	e002      	b.n	800f528 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 800f522:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f524:	3a01      	subs	r2, #1
 800f526:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800f528:	6a21      	ldr	r1, [r4, #32]
 800f52a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800f52e:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 800f532:	f002 0203 	and.w	r2, r2, #3
 800f536:	2a02      	cmp	r2, #2
 800f538:	d006      	beq.n	800f548 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 800f53a:	69e3      	ldr	r3, [r4, #28]
 800f53c:	4650      	mov	r0, sl
 800f53e:	4798      	blx	r3
 800f540:	4407      	add	r7, r0
				*user_packet = true;
 800f542:	2301      	movs	r3, #1
 800f544:	7033      	strb	r3, [r6, #0]
 800f546:	e006      	b.n	800f556 <drop_item_locked+0xe2>
		return item->skip.len;
 800f548:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 800f54c:	089b      	lsrs	r3, r3, #2
 800f54e:	d0f4      	beq.n	800f53a <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 800f550:	441f      	add	r7, r3
 800f552:	e000      	b.n	800f556 <drop_item_locked+0xe2>
		allow_drop = true;
 800f554:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 800f556:	b195      	cbz	r5, 800f57e <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800f558:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 800f55a:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	f013 0f01 	tst.w	r3, #1
 800f562:	d107      	bne.n	800f574 <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f566:	429f      	cmp	r7, r3
 800f568:	d307      	bcc.n	800f57a <drop_item_locked+0x106>
 800f56a:	1aff      	subs	r7, r7, r3
 800f56c:	e005      	b.n	800f57a <drop_item_locked+0x106>
		item = NULL;
 800f56e:	f04f 0a00 	mov.w	sl, #0
 800f572:	e7f0      	b.n	800f556 <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 800f574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f576:	3b01      	subs	r3, #1
 800f578:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800f57a:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 800f57c:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 800f57e:	4650      	mov	r0, sl
 800f580:	b003      	add	sp, #12
 800f582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f586 <mpsc_pbuf_init>:
{
 800f586:	b538      	push	{r3, r4, r5, lr}
 800f588:	4604      	mov	r4, r0
 800f58a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 800f58c:	2220      	movs	r2, #32
 800f58e:	2100      	movs	r1, #0
 800f590:	f002 fb05 	bl	8011b9e <memset>
	buffer->get_wlen = cfg->get_wlen;
 800f594:	68eb      	ldr	r3, [r5, #12]
 800f596:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 800f598:	68ab      	ldr	r3, [r5, #8]
 800f59a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800f59c:	682b      	ldr	r3, [r5, #0]
 800f59e:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 800f5a0:	686b      	ldr	r3, [r5, #4]
 800f5a2:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 800f5a4:	692a      	ldr	r2, [r5, #16]
 800f5a6:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 800f5a8:	b123      	cbz	r3, 800f5b4 <mpsc_pbuf_init+0x2e>
 800f5aa:	1e59      	subs	r1, r3, #1
 800f5ac:	420b      	tst	r3, r1
 800f5ae:	d00d      	beq.n	800f5cc <mpsc_pbuf_init+0x46>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	e000      	b.n	800f5b6 <mpsc_pbuf_init+0x30>
 800f5b4:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 800f5b6:	b113      	cbz	r3, 800f5be <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800f5b8:	f042 0201 	orr.w	r2, r2, #1
 800f5bc:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 800f5be:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	f001 ff23 	bl	8011410 <z_impl_k_sem_init>
}
 800f5ca:	bd38      	pop	{r3, r4, r5, pc}
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e7f2      	b.n	800f5b6 <mpsc_pbuf_init+0x30>

0800f5d0 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	b085      	sub	sp, #20
 800f5d6:	9200      	str	r2, [sp, #0]
 800f5d8:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800f5da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	428b      	cmp	r3, r1
 800f5e0:	f0c0 8087 	bcc.w	800f6f2 <mpsc_pbuf_alloc+0x122>
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 800f5e8:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 800f5ec:	46d3      	mov	fp, sl
 800f5ee:	e020      	b.n	800f632 <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800f5f0:	1b1c      	subs	r4, r3, r4
 800f5f2:	3c01      	subs	r4, #1
		return false;
 800f5f4:	2600      	movs	r6, #0
 800f5f6:	e02e      	b.n	800f656 <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800f5f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5fa:	1b1c      	subs	r4, r3, r4
 800f5fc:	3c01      	subs	r4, #1
		return false;
 800f5fe:	2600      	movs	r6, #0
 800f600:	e029      	b.n	800f656 <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 800f602:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800f604:	3a01      	subs	r2, #1
 800f606:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 800f608:	602b      	str	r3, [r5, #0]
		cont = false;
 800f60a:	2600      	movs	r6, #0
 800f60c:	f387 8811 	msr	BASEPRI, r7
 800f610:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 800f614:	b15e      	cbz	r6, 800f62e <mpsc_pbuf_alloc+0x5e>
 800f616:	f1ba 0f00 	cmp.w	sl, #0
 800f61a:	d008      	beq.n	800f62e <mpsc_pbuf_alloc+0x5e>
 800f61c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800f620:	b12b      	cbz	r3, 800f62e <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 800f622:	69ab      	ldr	r3, [r5, #24]
 800f624:	4651      	mov	r1, sl
 800f626:	4628      	mov	r0, r5
 800f628:	4798      	blx	r3
			dropped_item = NULL;
 800f62a:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 800f62e:	2e00      	cmp	r6, #0
 800f630:	d061      	beq.n	800f6f6 <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 800f632:	f04f 0310 	mov.w	r3, #16
 800f636:	f3ef 8811 	mrs	r8, BASEPRI
 800f63a:	f383 8812 	msr	BASEPRI_MAX, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800f644:	68eb      	ldr	r3, [r5, #12]
 800f646:	682c      	ldr	r4, [r5, #0]
 800f648:	42a3      	cmp	r3, r4
 800f64a:	d8d1      	bhi.n	800f5f0 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0d3      	beq.n	800f5f8 <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 800f650:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f652:	1b1c      	subs	r4, r3, r4
	return true;
 800f654:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 800f656:	45a1      	cmp	r9, r4
 800f658:	d819      	bhi.n	800f68e <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 800f65a:	6a2b      	ldr	r3, [r5, #32]
 800f65c:	682a      	ldr	r2, [r5, #0]
			item =
 800f65e:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 800f662:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800f666:	f36f 0100 	bfc	r1, #0, #1
 800f66a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 800f66e:	b2c9      	uxtb	r1, r1
 800f670:	f36f 0141 	bfc	r1, #1, #1
 800f674:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 800f678:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 800f67a:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f67c:	692a      	ldr	r2, [r5, #16]
 800f67e:	f012 0f01 	tst.w	r2, #1
 800f682:	d1be      	bne.n	800f602 <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f684:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800f686:	4293      	cmp	r3, r2
 800f688:	d3be      	bcc.n	800f608 <mpsc_pbuf_alloc+0x38>
 800f68a:	1a9b      	subs	r3, r3, r2
 800f68c:	e7bc      	b.n	800f608 <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 800f68e:	b9ae      	cbnz	r6, 800f6bc <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800f690:	9b01      	ldr	r3, [sp, #4]
 800f692:	9a00      	ldr	r2, [sp, #0]
 800f694:	4313      	orrs	r3, r2
 800f696:	d003      	beq.n	800f6a0 <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 800f698:	f001 fe55 	bl	8011346 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800f69c:	4606      	mov	r6, r0
 800f69e:	b190      	cbz	r0, 800f6c6 <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800f6a0:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 800f6a2:	f10d 030f 	add.w	r3, sp, #15
 800f6a6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800f6aa:	4621      	mov	r1, r4
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7ff fee1 	bl	800f474 <drop_item_locked>
			cont = dropped_item != NULL;
 800f6b2:	4682      	mov	sl, r0
 800f6b4:	1e06      	subs	r6, r0, #0
 800f6b6:	bf18      	it	ne
 800f6b8:	2601      	movne	r6, #1
 800f6ba:	e7a7      	b.n	800f60c <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 800f6bc:	4621      	mov	r1, r4
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7ff feaf 	bl	800f422 <add_skip_item>
			cont = true;
 800f6c4:	e7a2      	b.n	800f60c <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 800f6c6:	f388 8811 	msr	BASEPRI, r8
 800f6ca:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 800f6ce:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 800f6d2:	9a00      	ldr	r2, [sp, #0]
 800f6d4:	9b01      	ldr	r3, [sp, #4]
 800f6d6:	f7fc febd 	bl	800c454 <z_impl_k_sem_take>
	__asm__ volatile(
 800f6da:	f04f 0310 	mov.w	r3, #16
 800f6de:	f3ef 8711 	mrs	r7, BASEPRI
 800f6e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800f6e6:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d18e      	bne.n	800f60c <mpsc_pbuf_alloc+0x3c>
				cont = true;
 800f6ee:	2601      	movs	r6, #1
 800f6f0:	e78c      	b.n	800f60c <mpsc_pbuf_alloc+0x3c>
		return NULL;
 800f6f2:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 800f6f6:	4658      	mov	r0, fp
 800f6f8:	b005      	add	sp, #20
 800f6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6fe <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 800f6fe:	b538      	push	{r3, r4, r5, lr}
 800f700:	4604      	mov	r4, r0
 800f702:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800f704:	69c3      	ldr	r3, [r0, #28]
 800f706:	4608      	mov	r0, r1
 800f708:	4798      	blx	r3
 800f70a:	f04f 0310 	mov.w	r3, #16
 800f70e:	f3ef 8211 	mrs	r2, BASEPRI
 800f712:	f383 8812 	msr	BASEPRI_MAX, r3
 800f716:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 800f71a:	782b      	ldrb	r3, [r5, #0]
 800f71c:	f043 0301 	orr.w	r3, r3, #1
 800f720:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f722:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800f724:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	f013 0f01 	tst.w	r3, #1
 800f72c:	d104      	bne.n	800f738 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f730:	4298      	cmp	r0, r3
 800f732:	d304      	bcc.n	800f73e <mpsc_pbuf_commit+0x40>
 800f734:	1ac0      	subs	r0, r0, r3
 800f736:	e002      	b.n	800f73e <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 800f738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f73a:	3b01      	subs	r3, #1
 800f73c:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800f73e:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 800f740:	f382 8811 	msr	BASEPRI, r2
 800f744:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800f748:	bd38      	pop	{r3, r4, r5, pc}

0800f74a <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800f74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74c:	4604      	mov	r4, r0
 800f74e:	e039      	b.n	800f7c4 <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800f750:	1a9b      	subs	r3, r3, r2
		return false;
 800f752:	e045      	b.n	800f7e0 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 800f754:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 800f758:	0880      	lsrs	r0, r0, #2
 800f75a:	d153      	bne.n	800f804 <mpsc_pbuf_claim+0xba>
 800f75c:	e04d      	b.n	800f7fa <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 800f75e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f760:	3901      	subs	r1, #1
 800f762:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 800f764:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 800f766:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800f768:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f76a:	b922      	cbnz	r2, 800f776 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f76e:	4298      	cmp	r0, r3
 800f770:	d304      	bcc.n	800f77c <mpsc_pbuf_claim+0x32>
 800f772:	1ac0      	subs	r0, r0, r3
 800f774:	e002      	b.n	800f77c <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 800f776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f778:	3b01      	subs	r3, #1
 800f77a:	4018      	ands	r0, r3
				buffer->rd_idx =
 800f77c:	60e0      	str	r0, [r4, #12]
				cont = true;
 800f77e:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 800f780:	e01b      	b.n	800f7ba <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 800f782:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800f786:	f043 0302 	orr.w	r3, r3, #2
 800f78a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800f78e:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 800f790:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800f792:	4630      	mov	r0, r6
 800f794:	4798      	blx	r3
	uint32_t i = idx + val;
 800f796:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f798:	6923      	ldr	r3, [r4, #16]
 800f79a:	f013 0f01 	tst.w	r3, #1
 800f79e:	d104      	bne.n	800f7aa <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7a2:	4298      	cmp	r0, r3
 800f7a4:	d304      	bcc.n	800f7b0 <mpsc_pbuf_claim+0x66>
 800f7a6:	1ac0      	subs	r0, r0, r3
 800f7a8:	e002      	b.n	800f7b0 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 800f7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 800f7b0:	60a0      	str	r0, [r4, #8]
		cont = false;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	e001      	b.n	800f7ba <mpsc_pbuf_claim+0x70>
 800f7b6:	2300      	movs	r3, #0
			item = NULL;
 800f7b8:	461e      	mov	r6, r3
 800f7ba:	f385 8811 	msr	BASEPRI, r5
 800f7be:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 800f7c2:	b38b      	cbz	r3, 800f828 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 800f7c4:	f04f 0310 	mov.w	r3, #16
 800f7c8:	f3ef 8511 	mrs	r5, BASEPRI
 800f7cc:	f383 8812 	msr	BASEPRI_MAX, r3
 800f7d0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800f7d4:	68a2      	ldr	r2, [r4, #8]
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d9b9      	bls.n	800f750 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 800f7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7de:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 800f7e0:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 800f7e2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0e5      	beq.n	800f7b6 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 800f7ea:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 800f7ee:	f013 0303 	ands.w	r3, r3, #3
 800f7f2:	d016      	beq.n	800f822 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d0ad      	beq.n	800f754 <mpsc_pbuf_claim+0xa>
	return 0;
 800f7f8:	2000      	movs	r0, #0
	return item->hdr.valid;
 800f7fa:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 800f7fe:	f013 0f01 	tst.w	r3, #1
 800f802:	d1be      	bne.n	800f782 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 800f804:	b910      	cbnz	r0, 800f80c <mpsc_pbuf_claim+0xc2>
 800f806:	69e3      	ldr	r3, [r4, #28]
 800f808:	4630      	mov	r0, r6
 800f80a:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800f80c:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 800f80e:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f810:	6922      	ldr	r2, [r4, #16]
 800f812:	f012 0201 	ands.w	r2, r2, #1
 800f816:	d1a2      	bne.n	800f75e <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f81a:	428b      	cmp	r3, r1
 800f81c:	d3a2      	bcc.n	800f764 <mpsc_pbuf_claim+0x1a>
 800f81e:	1a5b      	subs	r3, r3, r1
 800f820:	e7a0      	b.n	800f764 <mpsc_pbuf_claim+0x1a>
		cont = false;
 800f822:	2300      	movs	r3, #0
			item = NULL;
 800f824:	461e      	mov	r6, r3
 800f826:	e7c8      	b.n	800f7ba <mpsc_pbuf_claim+0x70>

	return item;
}
 800f828:	4630      	mov	r0, r6
 800f82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f82c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4604      	mov	r4, r0
 800f830:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800f832:	69c3      	ldr	r3, [r0, #28]
 800f834:	4608      	mov	r0, r1
 800f836:	4798      	blx	r3
 800f838:	f04f 0310 	mov.w	r3, #16
 800f83c:	f3ef 8211 	mrs	r2, BASEPRI
 800f840:	f383 8812 	msr	BASEPRI_MAX, r3
 800f844:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 800f848:	782b      	ldrb	r3, [r5, #0]
 800f84a:	f36f 0300 	bfc	r3, #0, #1
 800f84e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800f850:	6923      	ldr	r3, [r4, #16]
 800f852:	f013 0f02 	tst.w	r3, #2
 800f856:	d00a      	beq.n	800f86e <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 800f858:	6a23      	ldr	r3, [r4, #32]
 800f85a:	68e1      	ldr	r1, [r4, #12]
 800f85c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800f860:	42ab      	cmp	r3, r5
 800f862:	d004      	beq.n	800f86e <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	f360 039f 	bfi	r3, r0, #2, #30
 800f86a:	602b      	str	r3, [r5, #0]
 800f86c:	e012      	b.n	800f894 <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 800f86e:	782b      	ldrb	r3, [r5, #0]
 800f870:	f36f 0341 	bfc	r3, #1, #1
 800f874:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800f876:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800f878:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800f87a:	6923      	ldr	r3, [r4, #16]
 800f87c:	f013 0f01 	tst.w	r3, #1
 800f880:	d104      	bne.n	800f88c <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800f882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f884:	4298      	cmp	r0, r3
 800f886:	d304      	bcc.n	800f892 <mpsc_pbuf_free+0x66>
 800f888:	1ac0      	subs	r0, r0, r3
 800f88a:	e002      	b.n	800f892 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 800f88c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f88e:	3b01      	subs	r3, #1
 800f890:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800f892:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800f894:	f382 8811 	msr	BASEPRI, r2
 800f898:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 800f89c:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 800f8a0:	f7fc fdb0 	bl	800c404 <z_impl_k_sem_give>
}
 800f8a4:	bd38      	pop	{r3, r4, r5, pc}

0800f8a6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800f8a6:	6883      	ldr	r3, [r0, #8]
 800f8a8:	6842      	ldr	r2, [r0, #4]
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d905      	bls.n	800f8ba <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 800f8ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f8b0:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800f8b2:	3800      	subs	r0, #0
 800f8b4:	bf18      	it	ne
 800f8b6:	2001      	movne	r0, #1
 800f8b8:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800f8ba:	1ad0      	subs	r0, r2, r3
		return false;
 800f8bc:	e7f9      	b.n	800f8b2 <mpsc_pbuf_is_pending+0xc>

0800f8be <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800f8be:	4770      	bx	lr

0800f8c0 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	4770      	bx	lr

0800f8c4 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800f8c4:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800f8c6:	f013 0f04 	tst.w	r3, #4
 800f8ca:	d001      	beq.n	800f8d0 <log_msg2_generic_get_wlen+0xc>
	return 0;
 800f8cc:	2000      	movs	r0, #0
}
 800f8ce:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800f8d0:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800f8d2:	f3c3 2049 	ubfx	r0, r3, #9, #10
 800f8d6:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 800f8da:	4418      	add	r0, r3
 800f8dc:	3013      	adds	r0, #19
 800f8de:	f020 0007 	bic.w	r0, r0, #7
 800f8e2:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800f8e4:	4770      	bx	lr

0800f8e6 <dummy_timestamp>:
}
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	4770      	bx	lr

0800f8ea <msg_filter_check>:
}
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	4770      	bx	lr

0800f8ee <default_lf_get_timestamp>:
{
 800f8ee:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800f8f0:	f002 f877 	bl	80119e2 <z_impl_k_uptime_ticks>
 800f8f4:	220a      	movs	r2, #10
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f7f1 f870 	bl	80009dc <__aeabi_uldivmod>
}
 800f8fc:	bd08      	pop	{r3, pc}

0800f8fe <notify_drop>:
{
 800f8fe:	b508      	push	{r3, lr}
	z_log_dropped(true);
 800f900:	2001      	movs	r0, #1
 800f902:	f7f4 fc27 	bl	8004154 <z_log_dropped>
}
 800f906:	bd08      	pop	{r3, pc}

0800f908 <get_msg>:
{
 800f908:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 800f90a:	f7f4 fca7 	bl	800425c <z_log_msg2_claim>
}
 800f90e:	bd08      	pop	{r3, pc}

0800f910 <next_pending>:
{
 800f910:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 800f912:	f7f4 fcdd 	bl	80042d0 <z_log_msg2_pending>
}
 800f916:	bd08      	pop	{r3, pc}

0800f918 <z_log_get_tag>:
}
 800f918:	2000      	movs	r0, #0
 800f91a:	4770      	bx	lr

0800f91c <buffer_write>:
{
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	4607      	mov	r7, r0
 800f920:	460d      	mov	r5, r1
 800f922:	4614      	mov	r4, r2
 800f924:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800f926:	4632      	mov	r2, r6
 800f928:	4621      	mov	r1, r4
 800f92a:	4628      	mov	r0, r5
 800f92c:	47b8      	blx	r7
		buf += processed;
 800f92e:	4405      	add	r5, r0
	} while (len != 0);
 800f930:	1a24      	subs	r4, r4, r0
 800f932:	d1f8      	bne.n	800f926 <buffer_write+0xa>
}
 800f934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f936 <color_prefix>:
{
 800f936:	b508      	push	{r3, lr}
 800f938:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800f93a:	2201      	movs	r2, #1
 800f93c:	f7f4 fe10 	bl	8004560 <color_print>
}
 800f940:	bd08      	pop	{r3, pc}

0800f942 <color_postfix>:
{
 800f942:	b508      	push	{r3, lr}
 800f944:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800f946:	2200      	movs	r2, #0
 800f948:	f7f4 fe0a 	bl	8004560 <color_print>
}
 800f94c:	bd08      	pop	{r3, pc}

0800f94e <postfix_print>:
{
 800f94e:	b538      	push	{r3, r4, r5, lr}
 800f950:	4605      	mov	r5, r0
 800f952:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800f954:	f001 0101 	and.w	r1, r1, #1
 800f958:	f7ff fff3 	bl	800f942 <color_postfix>
	newline_print(output, flags);
 800f95c:	4621      	mov	r1, r4
 800f95e:	4628      	mov	r0, r5
 800f960:	f7f4 fe14 	bl	800458c <newline_print>
}
 800f964:	bd38      	pop	{r3, r4, r5, pc}

0800f966 <log_msg2_hexdump>:
{
 800f966:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f96a:	b083      	sub	sp, #12
 800f96c:	4680      	mov	r8, r0
 800f96e:	460e      	mov	r6, r1
 800f970:	4615      	mov	r5, r2
 800f972:	461f      	mov	r7, r3
 800f974:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800f978:	462c      	mov	r4, r5
 800f97a:	2d10      	cmp	r5, #16
 800f97c:	bf28      	it	cs
 800f97e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800f980:	f8cd 9000 	str.w	r9, [sp]
 800f984:	463b      	mov	r3, r7
 800f986:	4622      	mov	r2, r4
 800f988:	4631      	mov	r1, r6
 800f98a:	4640      	mov	r0, r8
 800f98c:	f7f4 fe12 	bl	80045b4 <hexdump_line_print>
		data += length;
 800f990:	4426      	add	r6, r4
	} while (len);
 800f992:	1b2d      	subs	r5, r5, r4
 800f994:	d1f0      	bne.n	800f978 <log_msg2_hexdump+0x12>
}
 800f996:	b003      	add	sp, #12
 800f998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f99c <log_output_flush>:
{
 800f99c:	b510      	push	{r4, lr}
 800f99e:	4604      	mov	r4, r0
		     output->control_block->offset,
 800f9a0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800f9a2:	6853      	ldr	r3, [r2, #4]
 800f9a4:	6812      	ldr	r2, [r2, #0]
 800f9a6:	6881      	ldr	r1, [r0, #8]
 800f9a8:	6800      	ldr	r0, [r0, #0]
 800f9aa:	f7ff ffb7 	bl	800f91c <buffer_write>
	output->control_block->offset = 0;
 800f9ae:	6863      	ldr	r3, [r4, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	601a      	str	r2, [r3, #0]
}
 800f9b4:	bd10      	pop	{r4, pc}

0800f9b6 <out_func>:
{
 800f9b6:	b538      	push	{r3, r4, r5, lr}
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800f9bc:	684b      	ldr	r3, [r1, #4]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	68cb      	ldr	r3, [r1, #12]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d00f      	beq.n	800f9e6 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800f9c6:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800f9c8:	f3bf 8f5b 	dmb	ish
 800f9cc:	e853 2f00 	ldrex	r2, [r3]
 800f9d0:	1c51      	adds	r1, r2, #1
 800f9d2:	e843 1000 	strex	r0, r1, [r3]
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d1f8      	bne.n	800f9cc <out_func+0x16>
 800f9da:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800f9de:	68a3      	ldr	r3, [r4, #8]
 800f9e0:	549d      	strb	r5, [r3, r2]
}
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800f9e6:	4608      	mov	r0, r1
 800f9e8:	f7ff ffd8 	bl	800f99c <log_output_flush>
 800f9ec:	e7eb      	b.n	800f9c6 <out_func+0x10>

0800f9ee <cr_out_func>:
{
 800f9ee:	b538      	push	{r3, r4, r5, lr}
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	460d      	mov	r5, r1
	out_func(c, ctx);
 800f9f4:	f7ff ffdf 	bl	800f9b6 <out_func>
	if (c == '\n') {
 800f9f8:	2c0a      	cmp	r4, #10
 800f9fa:	d001      	beq.n	800fa00 <cr_out_func+0x12>
}
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 800fa00:	4629      	mov	r1, r5
 800fa02:	200d      	movs	r0, #13
 800fa04:	f7ff ffd7 	bl	800f9b6 <out_func>
 800fa08:	e7f8      	b.n	800f9fc <cr_out_func+0xe>

0800fa0a <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 800fa0a:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 800fa0c:	b198      	cbz	r0, 800fa36 <z_log_msg2_finalize+0x2c>
 800fa0e:	460e      	mov	r6, r1
 800fa10:	4614      	mov	r4, r2
 800fa12:	4619      	mov	r1, r3
 800fa14:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 800fa16:	b143      	cbz	r3, 800fa2a <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 800fa18:	f100 030c 	add.w	r3, r0, #12
 800fa1c:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800fa20:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 800fa24:	4418      	add	r0, r3
 800fa26:	f002 f8ac 	bl	8011b82 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 800fa2a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 800fa2c:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f7f4 fcc8 	bl	80043c4 <z_log_msg2_commit>
}
 800fa34:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 800fa36:	f7f4 fb8d 	bl	8004154 <z_log_dropped>
		return;
 800fa3a:	e7fb      	b.n	800fa34 <z_log_msg2_finalize+0x2a>

0800fa3c <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	4605      	mov	r5, r0
 800fa42:	460c      	mov	r4, r1
 800fa44:	4617      	mov	r7, r2
 800fa46:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800fa48:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 800fa4c:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 800fa50:	4484      	add	ip, r0
 800fa52:	f10c 0c13 	add.w	ip, ip, #19
 800fa56:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 800fa5a:	ea4f 009c 	mov.w	r0, ip, lsr #2
 800fa5e:	f7f4 fbf3 	bl	8004248 <z_log_msg2_alloc>

	if (msg) {
 800fa62:	4680      	mov	r8, r0
 800fa64:	b128      	cbz	r0, 800fa72 <z_impl_z_log_msg2_static_create+0x36>
 800fa66:	f3c4 2249 	ubfx	r2, r4, #9, #10
 800fa6a:	4639      	mov	r1, r7
 800fa6c:	300c      	adds	r0, #12
 800fa6e:	f002 f888 	bl	8011b82 <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800fa72:	4633      	mov	r3, r6
 800fa74:	4622      	mov	r2, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	4640      	mov	r0, r8
 800fa7a:	f7ff ffc6 	bl	800fa0a <z_log_msg2_finalize>
}
 800fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa82 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 800fa82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa86:	b085      	sub	sp, #20
 800fa88:	4681      	mov	r9, r0
 800fa8a:	460d      	mov	r5, r1
 800fa8c:	4690      	mov	r8, r2
 800fa8e:	461e      	mov	r6, r3
 800fa90:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800fa94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 800fa96:	b3b7      	cbz	r7, 800fb06 <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 800fa98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa9a:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	463b      	mov	r3, r7
 800faa0:	2200      	movs	r2, #0
 800faa2:	210c      	movs	r1, #12
 800faa4:	4610      	mov	r0, r2
 800faa6:	f7f3 fb39 	bl	800311c <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800faaa:	4682      	mov	sl, r0
 800faac:	eb00 030b 	add.w	r3, r0, fp
 800fab0:	3313      	adds	r3, #19
 800fab2:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 800fab6:	2400      	movs	r4, #0
 800fab8:	f36f 0400 	bfc	r4, #0, #1
 800fabc:	f36f 0441 	bfc	r4, #1, #1
 800fac0:	f36f 0482 	bfc	r4, #2, #1
 800fac4:	f369 04c5 	bfi	r4, r9, #3, #3
 800fac8:	f368 1488 	bfi	r4, r8, #6, #3
 800facc:	f360 2452 	bfi	r4, r0, #9, #10
 800fad0:	f36b 44de 	bfi	r4, fp, #19, #12
 800fad4:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 800fad8:	0898      	lsrs	r0, r3, #2
 800fada:	f7f4 fbb5 	bl	8004248 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 800fade:	4680      	mov	r8, r0
 800fae0:	b140      	cbz	r0, 800faf4 <z_impl_z_log_msg2_runtime_vcreate+0x72>
 800fae2:	b13f      	cbz	r7, 800faf4 <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 800fae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	463b      	mov	r3, r7
 800faea:	2200      	movs	r2, #0
 800faec:	4651      	mov	r1, sl
 800faee:	300c      	adds	r0, #12
 800faf0:	f7f3 fb14 	bl	800311c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800faf4:	4633      	mov	r3, r6
 800faf6:	4622      	mov	r2, r4
 800faf8:	4629      	mov	r1, r5
 800fafa:	4640      	mov	r0, r8
 800fafc:	f7ff ff85 	bl	800fa0a <z_log_msg2_finalize>
}
 800fb00:	b005      	add	sp, #20
 800fb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800fb06:	2000      	movs	r0, #0
 800fb08:	e7cf      	b.n	800faaa <z_impl_z_log_msg2_runtime_vcreate+0x28>

0800fb0a <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800fb0a:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800fb0c:	f7f4 ff08 	bl	8004920 <__do_global_ctors_aux>
	__do_init_array_aux();
 800fb10:	f7f4 fef8 	bl	8004904 <__do_init_array_aux>
}
 800fb14:	bd08      	pop	{r3, pc}

0800fb16 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800fb16:	b538      	push	{r3, r4, r5, lr}
 800fb18:	4604      	mov	r4, r0

	if (esf != NULL) {
 800fb1a:	460d      	mov	r5, r1
 800fb1c:	b111      	cbz	r1, 800fb24 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800fb1e:	4608      	mov	r0, r1
 800fb20:	f7f4 ff22 	bl	8004968 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800fb24:	4629      	mov	r1, r5
 800fb26:	4620      	mov	r0, r4
 800fb28:	f7fc f8fc 	bl	800bd24 <z_fatal_error>
}
 800fb2c:	bd38      	pop	{r3, r4, r5, pc}

0800fb2e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800fb2e:	b508      	push	{r3, lr}
 800fb30:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800fb32:	6800      	ldr	r0, [r0, #0]
 800fb34:	f7ff ffef 	bl	800fb16 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800fb38:	bd08      	pop	{r3, pc}

0800fb3a <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 800fb3a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	2001      	movs	r0, #1
 800fb40:	f7ff ffe9 	bl	800fb16 <z_arm_fatal_error>
}
 800fb44:	bd08      	pop	{r3, pc}

0800fb46 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800fb46:	b508      	push	{r3, lr}
	handler();
 800fb48:	f7f5 f842 	bl	8004bd0 <z_SysNmiOnReset>
	z_arm_int_exit();
 800fb4c:	f7f5 f92c 	bl	8004da8 <z_arm_exc_exit>
}
 800fb50:	bd08      	pop	{r3, pc}

0800fb52 <memory_fault_recoverable>:
}
 800fb52:	2000      	movs	r0, #0
 800fb54:	4770      	bx	lr

0800fb56 <z_log_msg2_runtime_create>:
{
 800fb56:	b510      	push	{r4, lr}
 800fb58:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800fb5a:	ac0a      	add	r4, sp, #40	; 0x28
 800fb5c:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 800fb5e:	9402      	str	r4, [sp, #8]
 800fb60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fb62:	9401      	str	r4, [sp, #4]
 800fb64:	9c08      	ldr	r4, [sp, #32]
 800fb66:	9400      	str	r4, [sp, #0]
 800fb68:	f7ff ff8b 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 800fb6c:	b006      	add	sp, #24
 800fb6e:	bd10      	pop	{r4, pc}

0800fb70 <fault_handle>:
{
 800fb70:	b508      	push	{r3, lr}
	*recoverable = false;
 800fb72:	2300      	movs	r3, #0
 800fb74:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800fb76:	1ecb      	subs	r3, r1, #3
 800fb78:	2b09      	cmp	r3, #9
 800fb7a:	d81a      	bhi.n	800fbb2 <fault_handle+0x42>
 800fb7c:	e8df f003 	tbb	[pc, r3]
 800fb80:	110d0905 	.word	0x110d0905
 800fb84:	19191919 	.word	0x19191919
 800fb88:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	f7f5 fd68 	bl	8005660 <hard_fault>
}
 800fb90:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800fb92:	2100      	movs	r1, #0
 800fb94:	f7f5 fc02 	bl	800539c <mem_manage_fault>
		break;
 800fb98:	e7fa      	b.n	800fb90 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	f7f5 f930 	bl	8004e00 <bus_fault>
		break;
 800fba0:	e7f6      	b.n	800fb90 <fault_handle+0x20>
		reason = usage_fault(esf);
 800fba2:	f7f5 fa9b 	bl	80050dc <usage_fault>
		break;
 800fba6:	e7f3      	b.n	800fb90 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800fba8:	4611      	mov	r1, r2
 800fbaa:	f7f5 fbcb 	bl	8005344 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800fbae:	2000      	movs	r0, #0
		break;
 800fbb0:	e7ee      	b.n	800fb90 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800fbb2:	f7f5 f907 	bl	8004dc4 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800fbb6:	2000      	movs	r0, #0
	return reason;
 800fbb8:	e7ea      	b.n	800fb90 <fault_handle+0x20>

0800fbba <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800fbba:	6843      	ldr	r3, [r0, #4]
 800fbbc:	1e5a      	subs	r2, r3, #1
		&&
 800fbbe:	4213      	tst	r3, r2
 800fbc0:	d106      	bne.n	800fbd0 <mpu_partition_is_valid+0x16>
		&&
 800fbc2:	2b1f      	cmp	r3, #31
 800fbc4:	d906      	bls.n	800fbd4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800fbc6:	6803      	ldr	r3, [r0, #0]
		&&
 800fbc8:	421a      	tst	r2, r3
 800fbca:	d005      	beq.n	800fbd8 <mpu_partition_is_valid+0x1e>
 800fbcc:	2000      	movs	r0, #0
 800fbce:	4770      	bx	lr
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	4770      	bx	lr
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	4770      	bx	lr
 800fbd8:	2001      	movs	r0, #1
}
 800fbda:	4770      	bx	lr

0800fbdc <mpu_configure_region>:
{
 800fbdc:	b500      	push	{lr}
 800fbde:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800fbe0:	680b      	ldr	r3, [r1, #0]
 800fbe2:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800fbe4:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800fbe6:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800fbe8:	2b20      	cmp	r3, #32
 800fbea:	d912      	bls.n	800fc12 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800fbec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbf0:	d811      	bhi.n	800fc16 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	fab3 f383 	clz	r3, r3
 800fbf8:	f1c3 031f 	rsb	r3, r3, #31
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800fc02:	4313      	orrs	r3, r2
 800fc04:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800fc06:	a901      	add	r1, sp, #4
 800fc08:	f7f5 ff2c 	bl	8005a64 <region_allocate_and_init>
}
 800fc0c:	b005      	add	sp, #20
 800fc0e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800fc12:	2308      	movs	r3, #8
 800fc14:	e7f5      	b.n	800fc02 <mpu_configure_region+0x26>
		return REGION_4G;
 800fc16:	233e      	movs	r3, #62	; 0x3e
 800fc18:	e7f3      	b.n	800fc02 <mpu_configure_region+0x26>

0800fc1a <arm_core_mpu_configure_static_mpu_regions>:
{
 800fc1a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800fc1c:	f7f5 ffa8 	bl	8005b70 <mpu_configure_static_mpu_regions>
}
 800fc20:	bd08      	pop	{r3, pc}

0800fc22 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800fc22:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800fc24:	f7f5 ffae 	bl	8005b84 <mpu_configure_dynamic_mpu_regions>
}
 800fc28:	bd08      	pop	{r3, pc}

0800fc2a <malloc_prepare>:
}
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	4770      	bx	lr

0800fc2e <_stdout_hook_default>:
}
 800fc2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc32:	4770      	bx	lr

0800fc34 <_stdin_hook_default>:
}
 800fc34:	2000      	movs	r0, #0
 800fc36:	4770      	bx	lr

0800fc38 <_read>:
{
 800fc38:	b508      	push	{r3, lr}
 800fc3a:	4608      	mov	r0, r1
 800fc3c:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800fc3e:	f7f5 fff9 	bl	8005c34 <z_impl_zephyr_read_stdin>
}
 800fc42:	bd08      	pop	{r3, pc}

0800fc44 <_write>:
{
 800fc44:	b508      	push	{r3, lr}
 800fc46:	4608      	mov	r0, r1
 800fc48:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800fc4a:	f7f6 f809 	bl	8005c60 <z_impl_zephyr_write_stdout>
}
 800fc4e:	bd08      	pop	{r3, pc}

0800fc50 <_close>:
}
 800fc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc54:	4770      	bx	lr

0800fc56 <_lseek>:
}
 800fc56:	2000      	movs	r0, #0
 800fc58:	4770      	bx	lr

0800fc5a <_isatty>:
}
 800fc5a:	2802      	cmp	r0, #2
 800fc5c:	bfcc      	ite	gt
 800fc5e:	2000      	movgt	r0, #0
 800fc60:	2001      	movle	r0, #1
 800fc62:	4770      	bx	lr

0800fc64 <_kill>:
}
 800fc64:	2000      	movs	r0, #0
 800fc66:	4770      	bx	lr

0800fc68 <_getpid>:
}
 800fc68:	2000      	movs	r0, #0
 800fc6a:	4770      	bx	lr

0800fc6c <_fstat>:
	st->st_mode = S_IFCHR;
 800fc6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc70:	604b      	str	r3, [r1, #4]
}
 800fc72:	2000      	movs	r0, #0
 800fc74:	4770      	bx	lr

0800fc76 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800fc76:	b510      	push	{r4, lr}
 800fc78:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800fc7a:	2014      	movs	r0, #20
 800fc7c:	f7fd feee 	bl	800da5c <malloc>
 800fc80:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800fc82:	f001 fbbe 	bl	8011402 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800fc86:	bd10      	pop	{r4, pc}

0800fc88 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800fc88:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800fc8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc92:	f7fc faeb 	bl	800c26c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800fc96:	bd08      	pop	{r3, pc}

0800fc98 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800fc98:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800fc9a:	f7fc fb71 	bl	800c380 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800fc9e:	bd08      	pop	{r3, pc}

0800fca0 <__stm32_exti_isr_0>:
{
 800fca0:	b508      	push	{r3, lr}
 800fca2:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800fca4:	2101      	movs	r1, #1
 800fca6:	2000      	movs	r0, #0
 800fca8:	f7f6 f814 	bl	8005cd4 <__stm32_exti_isr>
}
 800fcac:	bd08      	pop	{r3, pc}

0800fcae <__stm32_exti_isr_1>:
{
 800fcae:	b508      	push	{r3, lr}
 800fcb0:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	2001      	movs	r0, #1
 800fcb6:	f7f6 f80d 	bl	8005cd4 <__stm32_exti_isr>
}
 800fcba:	bd08      	pop	{r3, pc}

0800fcbc <__stm32_exti_isr_2>:
{
 800fcbc:	b508      	push	{r3, lr}
 800fcbe:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800fcc0:	2103      	movs	r1, #3
 800fcc2:	2002      	movs	r0, #2
 800fcc4:	f7f6 f806 	bl	8005cd4 <__stm32_exti_isr>
}
 800fcc8:	bd08      	pop	{r3, pc}

0800fcca <__stm32_exti_isr_3>:
{
 800fcca:	b508      	push	{r3, lr}
 800fccc:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800fcce:	2104      	movs	r1, #4
 800fcd0:	2003      	movs	r0, #3
 800fcd2:	f7f5 ffff 	bl	8005cd4 <__stm32_exti_isr>
}
 800fcd6:	bd08      	pop	{r3, pc}

0800fcd8 <__stm32_exti_isr_4>:
{
 800fcd8:	b508      	push	{r3, lr}
 800fcda:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800fcdc:	2105      	movs	r1, #5
 800fcde:	2004      	movs	r0, #4
 800fce0:	f7f5 fff8 	bl	8005cd4 <__stm32_exti_isr>
}
 800fce4:	bd08      	pop	{r3, pc}

0800fce6 <__stm32_exti_isr_9_5>:
{
 800fce6:	b508      	push	{r3, lr}
 800fce8:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800fcea:	210a      	movs	r1, #10
 800fcec:	2005      	movs	r0, #5
 800fcee:	f7f5 fff1 	bl	8005cd4 <__stm32_exti_isr>
}
 800fcf2:	bd08      	pop	{r3, pc}

0800fcf4 <__stm32_exti_isr_15_10>:
{
 800fcf4:	b508      	push	{r3, lr}
 800fcf6:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800fcf8:	2110      	movs	r1, #16
 800fcfa:	200a      	movs	r0, #10
 800fcfc:	f7f5 ffea 	bl	8005cd4 <__stm32_exti_isr>
}
 800fd00:	bd08      	pop	{r3, pc}

0800fd02 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800fd02:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800fd04:	2200      	movs	r2, #0
 800fd06:	4611      	mov	r1, r2
 800fd08:	2006      	movs	r0, #6
 800fd0a:	f7f4 ff4b 	bl	8004ba4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800fd0e:	2200      	movs	r2, #0
 800fd10:	4611      	mov	r1, r2
 800fd12:	2007      	movs	r0, #7
 800fd14:	f7f4 ff46 	bl	8004ba4 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	2008      	movs	r0, #8
 800fd1e:	f7f4 ff41 	bl	8004ba4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800fd22:	2200      	movs	r2, #0
 800fd24:	4611      	mov	r1, r2
 800fd26:	2009      	movs	r0, #9
 800fd28:	f7f4 ff3c 	bl	8004ba4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	4611      	mov	r1, r2
 800fd30:	200a      	movs	r0, #10
 800fd32:	f7f4 ff37 	bl	8004ba4 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800fd36:	2200      	movs	r2, #0
 800fd38:	4611      	mov	r1, r2
 800fd3a:	2017      	movs	r0, #23
 800fd3c:	f7f4 ff32 	bl	8004ba4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800fd40:	2200      	movs	r2, #0
 800fd42:	4611      	mov	r1, r2
 800fd44:	2028      	movs	r0, #40	; 0x28
 800fd46:	f7f4 ff2d 	bl	8004ba4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800fd4a:	bd08      	pop	{r3, pc}

0800fd4c <stm32_exti_init>:
{
 800fd4c:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800fd4e:	f7ff ffd8 	bl	800fd02 <__stm32_exti_connect_irqs>
}
 800fd52:	2000      	movs	r0, #0
 800fd54:	bd08      	pop	{r3, pc}

0800fd56 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800fd56:	2300      	movs	r3, #0
 800fd58:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800fd5a:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800fd5c:	6083      	str	r3, [r0, #8]
}
 800fd5e:	4770      	bx	lr

0800fd60 <get_bus_clock>:
}
 800fd60:	fbb0 f0f1 	udiv	r0, r0, r1
 800fd64:	4770      	bx	lr

0800fd66 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800fd66:	2300      	movs	r3, #0
 800fd68:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800fd6a:	2314      	movs	r3, #20
 800fd6c:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800fd6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fd72:	6083      	str	r3, [r0, #8]
}
 800fd74:	4770      	bx	lr

0800fd76 <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 800fd76:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 800fd78:	2200      	movs	r2, #0
 800fd7a:	4611      	mov	r1, r2
 800fd7c:	200b      	movs	r0, #11
 800fd7e:	f7f4 ff11 	bl	8004ba4 <z_arm_irq_priority_set>
 800fd82:	200b      	movs	r0, #11
 800fd84:	f7f4 fede 	bl	8004b44 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 800fd88:	2200      	movs	r2, #0
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	200c      	movs	r0, #12
 800fd8e:	f7f4 ff09 	bl	8004ba4 <z_arm_irq_priority_set>
 800fd92:	200c      	movs	r0, #12
 800fd94:	f7f4 fed6 	bl	8004b44 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	200d      	movs	r0, #13
 800fd9e:	f7f4 ff01 	bl	8004ba4 <z_arm_irq_priority_set>
 800fda2:	200d      	movs	r0, #13
 800fda4:	f7f4 fece 	bl	8004b44 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 800fda8:	2200      	movs	r2, #0
 800fdaa:	4611      	mov	r1, r2
 800fdac:	200e      	movs	r0, #14
 800fdae:	f7f4 fef9 	bl	8004ba4 <z_arm_irq_priority_set>
 800fdb2:	200e      	movs	r0, #14
 800fdb4:	f7f4 fec6 	bl	8004b44 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 800fdb8:	2200      	movs	r2, #0
 800fdba:	4611      	mov	r1, r2
 800fdbc:	200f      	movs	r0, #15
 800fdbe:	f7f4 fef1 	bl	8004ba4 <z_arm_irq_priority_set>
 800fdc2:	200f      	movs	r0, #15
 800fdc4:	f7f4 febe 	bl	8004b44 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 800fdc8:	2200      	movs	r2, #0
 800fdca:	4611      	mov	r1, r2
 800fdcc:	2010      	movs	r0, #16
 800fdce:	f7f4 fee9 	bl	8004ba4 <z_arm_irq_priority_set>
 800fdd2:	2010      	movs	r0, #16
 800fdd4:	f7f4 feb6 	bl	8004b44 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4611      	mov	r1, r2
 800fddc:	2011      	movs	r0, #17
 800fdde:	f7f4 fee1 	bl	8004ba4 <z_arm_irq_priority_set>
 800fde2:	2011      	movs	r0, #17
 800fde4:	f7f4 feae 	bl	8004b44 <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 800fde8:	bd08      	pop	{r3, pc}

0800fdea <dma_stm32_config_irq_1>:
#endif /* DT_INST_IRQ_HAS_IDX(1, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(1, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(1, 7) */

static void dma_stm32_config_irq_1(const struct device *dev)
{
 800fdea:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(1, 0);
 800fdec:	2200      	movs	r2, #0
 800fdee:	4611      	mov	r1, r2
 800fdf0:	2038      	movs	r0, #56	; 0x38
 800fdf2:	f7f4 fed7 	bl	8004ba4 <z_arm_irq_priority_set>
 800fdf6:	2038      	movs	r0, #56	; 0x38
 800fdf8:	f7f4 fea4 	bl	8004b44 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 1);
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4611      	mov	r1, r2
 800fe00:	2039      	movs	r0, #57	; 0x39
 800fe02:	f7f4 fecf 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe06:	2039      	movs	r0, #57	; 0x39
 800fe08:	f7f4 fe9c 	bl	8004b44 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 2);
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4611      	mov	r1, r2
 800fe10:	203a      	movs	r0, #58	; 0x3a
 800fe12:	f7f4 fec7 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe16:	203a      	movs	r0, #58	; 0x3a
 800fe18:	f7f4 fe94 	bl	8004b44 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 3);
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	4611      	mov	r1, r2
 800fe20:	203b      	movs	r0, #59	; 0x3b
 800fe22:	f7f4 febf 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe26:	203b      	movs	r0, #59	; 0x3b
 800fe28:	f7f4 fe8c 	bl	8004b44 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 4)
	DMA_STM32_IRQ_CONNECT(1, 4);
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	4611      	mov	r1, r2
 800fe30:	203c      	movs	r0, #60	; 0x3c
 800fe32:	f7f4 feb7 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe36:	203c      	movs	r0, #60	; 0x3c
 800fe38:	f7f4 fe84 	bl	8004b44 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 5)
	DMA_STM32_IRQ_CONNECT(1, 5);
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4611      	mov	r1, r2
 800fe40:	2044      	movs	r0, #68	; 0x44
 800fe42:	f7f4 feaf 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe46:	2044      	movs	r0, #68	; 0x44
 800fe48:	f7f4 fe7c 	bl	8004b44 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 6)
	DMA_STM32_IRQ_CONNECT(1, 6);
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	4611      	mov	r1, r2
 800fe50:	2045      	movs	r0, #69	; 0x45
 800fe52:	f7f4 fea7 	bl	8004ba4 <z_arm_irq_priority_set>
 800fe56:	2045      	movs	r0, #69	; 0x45
 800fe58:	f7f4 fe74 	bl	8004b44 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/*
 * Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series.
 * STM32F0 and STM32G0: if dma2 exits, the channel interrupts overlap with dma1
 */
}
 800fe5c:	bd08      	pop	{r3, pc}

0800fe5e <dma_stm32_dump_stream_irq>:
{
 800fe5e:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 800fe60:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 800fe62:	6918      	ldr	r0, [r3, #16]
 800fe64:	f7f6 fece 	bl	8006c04 <stm32_dma_dump_stream_irq>
}
 800fe68:	bd08      	pop	{r3, pc}

0800fe6a <dma_stm32_clear_stream_irq>:
{
 800fe6a:	b538      	push	{r3, r4, r5, lr}
 800fe6c:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 800fe6e:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800fe70:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 800fe72:	4628      	mov	r0, r5
 800fe74:	f7f6 fe86 	bl	8006b84 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f7f6 fe7a 	bl	8006b74 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 800fe80:	4621      	mov	r1, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f000 f969 	bl	801015a <stm32_dma_clear_stream_irq>
}
 800fe88:	bd38      	pop	{r3, r4, r5, pc}

0800fe8a <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 800fe8a:	b508      	push	{r3, lr}
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	f7f6 f9f5 	bl	800627c <dma_stm32_irq_handler>
 800fe92:	bd08      	pop	{r3, pc}

0800fe94 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 800fe94:	b508      	push	{r3, lr}
 800fe96:	2101      	movs	r1, #1
 800fe98:	f7f6 f9f0 	bl	800627c <dma_stm32_irq_handler>
 800fe9c:	bd08      	pop	{r3, pc}

0800fe9e <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 800fe9e:	b508      	push	{r3, lr}
 800fea0:	2102      	movs	r1, #2
 800fea2:	f7f6 f9eb 	bl	800627c <dma_stm32_irq_handler>
 800fea6:	bd08      	pop	{r3, pc}

0800fea8 <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 800fea8:	b508      	push	{r3, lr}
 800feaa:	2103      	movs	r1, #3
 800feac:	f7f6 f9e6 	bl	800627c <dma_stm32_irq_handler>
 800feb0:	bd08      	pop	{r3, pc}

0800feb2 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 800feb2:	b508      	push	{r3, lr}
 800feb4:	2104      	movs	r1, #4
 800feb6:	f7f6 f9e1 	bl	800627c <dma_stm32_irq_handler>
 800feba:	bd08      	pop	{r3, pc}

0800febc <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 800febc:	b508      	push	{r3, lr}
 800febe:	2105      	movs	r1, #5
 800fec0:	f7f6 f9dc 	bl	800627c <dma_stm32_irq_handler>
 800fec4:	bd08      	pop	{r3, pc}

0800fec6 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 800fec6:	b508      	push	{r3, lr}
 800fec8:	2106      	movs	r1, #6
 800feca:	f7f6 f9d7 	bl	800627c <dma_stm32_irq_handler>
 800fece:	bd08      	pop	{r3, pc}

0800fed0 <dma_stm32_irq_1_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 0);
 800fed0:	b508      	push	{r3, lr}
 800fed2:	2100      	movs	r1, #0
 800fed4:	f7f6 f9d2 	bl	800627c <dma_stm32_irq_handler>
 800fed8:	bd08      	pop	{r3, pc}

0800feda <dma_stm32_irq_1_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 1);
 800feda:	b508      	push	{r3, lr}
 800fedc:	2101      	movs	r1, #1
 800fede:	f7f6 f9cd 	bl	800627c <dma_stm32_irq_handler>
 800fee2:	bd08      	pop	{r3, pc}

0800fee4 <dma_stm32_irq_1_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 2);
 800fee4:	b508      	push	{r3, lr}
 800fee6:	2102      	movs	r1, #2
 800fee8:	f7f6 f9c8 	bl	800627c <dma_stm32_irq_handler>
 800feec:	bd08      	pop	{r3, pc}

0800feee <dma_stm32_irq_1_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 3);
 800feee:	b508      	push	{r3, lr}
 800fef0:	2103      	movs	r1, #3
 800fef2:	f7f6 f9c3 	bl	800627c <dma_stm32_irq_handler>
 800fef6:	bd08      	pop	{r3, pc}

0800fef8 <dma_stm32_irq_1_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 4);
 800fef8:	b508      	push	{r3, lr}
 800fefa:	2104      	movs	r1, #4
 800fefc:	f7f6 f9be 	bl	800627c <dma_stm32_irq_handler>
 800ff00:	bd08      	pop	{r3, pc}

0800ff02 <dma_stm32_irq_1_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 5);
 800ff02:	b508      	push	{r3, lr}
 800ff04:	2105      	movs	r1, #5
 800ff06:	f7f6 f9b9 	bl	800627c <dma_stm32_irq_handler>
 800ff0a:	bd08      	pop	{r3, pc}

0800ff0c <dma_stm32_irq_1_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 6);
 800ff0c:	b508      	push	{r3, lr}
 800ff0e:	2106      	movs	r1, #6
 800ff10:	f7f6 f9b4 	bl	800627c <dma_stm32_irq_handler>
 800ff14:	bd08      	pop	{r3, pc}

0800ff16 <dma_stm32_disable_stream>:
{
 800ff16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff18:	4607      	mov	r7, r0
 800ff1a:	460e      	mov	r6, r1
	int count = 0;
 800ff1c:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4638      	mov	r0, r7
 800ff22:	f7f6 ff47 	bl	8006db4 <stm32_dma_disable_stream>
 800ff26:	4603      	mov	r3, r0
 800ff28:	b160      	cbz	r0, 800ff44 <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 800ff2a:	1c65      	adds	r5, r4, #1
 800ff2c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ff30:	429c      	cmp	r4, r3
 800ff32:	dc05      	bgt.n	800ff40 <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 800ff34:	200a      	movs	r0, #10
 800ff36:	2100      	movs	r1, #0
 800ff38:	f7fc fff2 	bl	800cf20 <z_impl_k_sleep>
 800ff3c:	462c      	mov	r4, r5
	for (;;) {
 800ff3e:	e7ee      	b.n	800ff1e <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 800ff40:	f06f 030f 	mvn.w	r3, #15
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff48 <dma_stm32_start>:
{
 800ff48:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 800ff4a:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800ff4c:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 800ff4e:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800ff50:	695b      	ldr	r3, [r3, #20]
 800ff52:	42a3      	cmp	r3, r4
 800ff54:	d908      	bls.n	800ff68 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 800ff56:	4621      	mov	r1, r4
 800ff58:	f7ff ff87 	bl	800fe6a <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4628      	mov	r0, r5
 800ff60:	f7f6 ff1a 	bl	8006d98 <stm32_dma_enable_stream>
	return 0;
 800ff64:	2000      	movs	r0, #0
}
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800ff68:	f06f 0015 	mvn.w	r0, #21
 800ff6c:	e7fb      	b.n	800ff66 <dma_stm32_start+0x1e>

0800ff6e <LL_DMA_IsActiveFlag_GI1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
 800ff6e:	6800      	ldr	r0, [r0, #0]
 800ff70:	f010 0001 	ands.w	r0, r0, #1
 800ff74:	d000      	beq.n	800ff78 <LL_DMA_IsActiveFlag_GI1+0xa>
 800ff76:	2001      	movs	r0, #1
}
 800ff78:	4770      	bx	lr

0800ff7a <LL_DMA_IsActiveFlag_GI2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
 800ff7a:	6800      	ldr	r0, [r0, #0]
 800ff7c:	f010 0010 	ands.w	r0, r0, #16
 800ff80:	d000      	beq.n	800ff84 <LL_DMA_IsActiveFlag_GI2+0xa>
 800ff82:	2001      	movs	r0, #1
}
 800ff84:	4770      	bx	lr

0800ff86 <LL_DMA_IsActiveFlag_GI3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
 800ff86:	6800      	ldr	r0, [r0, #0]
 800ff88:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800ff8c:	d000      	beq.n	800ff90 <LL_DMA_IsActiveFlag_GI3+0xa>
 800ff8e:	2001      	movs	r0, #1
}
 800ff90:	4770      	bx	lr

0800ff92 <LL_DMA_IsActiveFlag_GI4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
 800ff92:	6800      	ldr	r0, [r0, #0]
 800ff94:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800ff98:	d000      	beq.n	800ff9c <LL_DMA_IsActiveFlag_GI4+0xa>
 800ff9a:	2001      	movs	r0, #1
}
 800ff9c:	4770      	bx	lr

0800ff9e <LL_DMA_IsActiveFlag_GI5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
 800ff9e:	6800      	ldr	r0, [r0, #0]
 800ffa0:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800ffa4:	d000      	beq.n	800ffa8 <LL_DMA_IsActiveFlag_GI5+0xa>
 800ffa6:	2001      	movs	r0, #1
}
 800ffa8:	4770      	bx	lr

0800ffaa <LL_DMA_IsActiveFlag_GI6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
 800ffaa:	6800      	ldr	r0, [r0, #0]
 800ffac:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800ffb0:	d000      	beq.n	800ffb4 <LL_DMA_IsActiveFlag_GI6+0xa>
 800ffb2:	2001      	movs	r0, #1
}
 800ffb4:	4770      	bx	lr

0800ffb6 <LL_DMA_IsActiveFlag_GI7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
 800ffb6:	6800      	ldr	r0, [r0, #0]
 800ffb8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800ffbc:	d000      	beq.n	800ffc0 <LL_DMA_IsActiveFlag_GI7+0xa>
 800ffbe:	2001      	movs	r0, #1
}
 800ffc0:	4770      	bx	lr

0800ffc2 <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800ffc2:	6800      	ldr	r0, [r0, #0]
 800ffc4:	f010 0002 	ands.w	r0, r0, #2
 800ffc8:	d000      	beq.n	800ffcc <LL_DMA_IsActiveFlag_TC1+0xa>
 800ffca:	2001      	movs	r0, #1
}
 800ffcc:	4770      	bx	lr

0800ffce <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 800ffce:	6800      	ldr	r0, [r0, #0]
 800ffd0:	f010 0020 	ands.w	r0, r0, #32
 800ffd4:	d000      	beq.n	800ffd8 <LL_DMA_IsActiveFlag_TC2+0xa>
 800ffd6:	2001      	movs	r0, #1
}
 800ffd8:	4770      	bx	lr

0800ffda <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800ffda:	6800      	ldr	r0, [r0, #0]
 800ffdc:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800ffe0:	d000      	beq.n	800ffe4 <LL_DMA_IsActiveFlag_TC3+0xa>
 800ffe2:	2001      	movs	r0, #1
}
 800ffe4:	4770      	bx	lr

0800ffe6 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800ffec:	d000      	beq.n	800fff0 <LL_DMA_IsActiveFlag_TC4+0xa>
 800ffee:	2001      	movs	r0, #1
}
 800fff0:	4770      	bx	lr

0800fff2 <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 800fff2:	6800      	ldr	r0, [r0, #0]
 800fff4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800fff8:	d000      	beq.n	800fffc <LL_DMA_IsActiveFlag_TC5+0xa>
 800fffa:	2001      	movs	r0, #1
}
 800fffc:	4770      	bx	lr

0800fffe <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 800fffe:	6800      	ldr	r0, [r0, #0]
 8010000:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8010004:	d000      	beq.n	8010008 <LL_DMA_IsActiveFlag_TC6+0xa>
 8010006:	2001      	movs	r0, #1
}
 8010008:	4770      	bx	lr

0801000a <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 801000a:	6800      	ldr	r0, [r0, #0]
 801000c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8010010:	d000      	beq.n	8010014 <LL_DMA_IsActiveFlag_TC7+0xa>
 8010012:	2001      	movs	r0, #1
}
 8010014:	4770      	bx	lr

08010016 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8010016:	6800      	ldr	r0, [r0, #0]
 8010018:	f010 0004 	ands.w	r0, r0, #4
 801001c:	d000      	beq.n	8010020 <LL_DMA_IsActiveFlag_HT1+0xa>
 801001e:	2001      	movs	r0, #1
}
 8010020:	4770      	bx	lr

08010022 <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 8010022:	6800      	ldr	r0, [r0, #0]
 8010024:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8010028:	d000      	beq.n	801002c <LL_DMA_IsActiveFlag_HT2+0xa>
 801002a:	2001      	movs	r0, #1
}
 801002c:	4770      	bx	lr

0801002e <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 801002e:	6800      	ldr	r0, [r0, #0]
 8010030:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8010034:	d000      	beq.n	8010038 <LL_DMA_IsActiveFlag_HT3+0xa>
 8010036:	2001      	movs	r0, #1
}
 8010038:	4770      	bx	lr

0801003a <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 801003a:	6800      	ldr	r0, [r0, #0]
 801003c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8010040:	d000      	beq.n	8010044 <LL_DMA_IsActiveFlag_HT4+0xa>
 8010042:	2001      	movs	r0, #1
}
 8010044:	4770      	bx	lr

08010046 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8010046:	6800      	ldr	r0, [r0, #0]
 8010048:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801004c:	d000      	beq.n	8010050 <LL_DMA_IsActiveFlag_HT5+0xa>
 801004e:	2001      	movs	r0, #1
}
 8010050:	4770      	bx	lr

08010052 <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8010052:	6800      	ldr	r0, [r0, #0]
 8010054:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8010058:	d000      	beq.n	801005c <LL_DMA_IsActiveFlag_HT6+0xa>
 801005a:	2001      	movs	r0, #1
}
 801005c:	4770      	bx	lr

0801005e <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 801005e:	6800      	ldr	r0, [r0, #0]
 8010060:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 8010064:	d000      	beq.n	8010068 <LL_DMA_IsActiveFlag_HT7+0xa>
 8010066:	2001      	movs	r0, #1
}
 8010068:	4770      	bx	lr

0801006a <LL_DMA_IsActiveFlag_TE1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 801006a:	6800      	ldr	r0, [r0, #0]
 801006c:	f010 0008 	ands.w	r0, r0, #8
 8010070:	d000      	beq.n	8010074 <LL_DMA_IsActiveFlag_TE1+0xa>
 8010072:	2001      	movs	r0, #1
}
 8010074:	4770      	bx	lr

08010076 <LL_DMA_IsActiveFlag_TE2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8010076:	6800      	ldr	r0, [r0, #0]
 8010078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801007c:	d000      	beq.n	8010080 <LL_DMA_IsActiveFlag_TE2+0xa>
 801007e:	2001      	movs	r0, #1
}
 8010080:	4770      	bx	lr

08010082 <LL_DMA_IsActiveFlag_TE3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 8010082:	6800      	ldr	r0, [r0, #0]
 8010084:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 8010088:	d000      	beq.n	801008c <LL_DMA_IsActiveFlag_TE3+0xa>
 801008a:	2001      	movs	r0, #1
}
 801008c:	4770      	bx	lr

0801008e <LL_DMA_IsActiveFlag_TE4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
 801008e:	6800      	ldr	r0, [r0, #0]
 8010090:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010094:	d000      	beq.n	8010098 <LL_DMA_IsActiveFlag_TE4+0xa>
 8010096:	2001      	movs	r0, #1
}
 8010098:	4770      	bx	lr

0801009a <LL_DMA_IsActiveFlag_TE5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
 801009a:	6800      	ldr	r0, [r0, #0]
 801009c:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 80100a0:	d000      	beq.n	80100a4 <LL_DMA_IsActiveFlag_TE5+0xa>
 80100a2:	2001      	movs	r0, #1
}
 80100a4:	4770      	bx	lr

080100a6 <LL_DMA_IsActiveFlag_TE6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 80100a6:	6800      	ldr	r0, [r0, #0]
 80100a8:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
 80100ac:	d000      	beq.n	80100b0 <LL_DMA_IsActiveFlag_TE6+0xa>
 80100ae:	2001      	movs	r0, #1
}
 80100b0:	4770      	bx	lr

080100b2 <LL_DMA_IsActiveFlag_TE7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
 80100b2:	6800      	ldr	r0, [r0, #0]
 80100b4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80100b8:	d000      	beq.n	80100bc <LL_DMA_IsActiveFlag_TE7+0xa>
 80100ba:	2001      	movs	r0, #1
}
 80100bc:	4770      	bx	lr

080100be <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80100be:	2302      	movs	r3, #2
 80100c0:	6043      	str	r3, [r0, #4]
}
 80100c2:	4770      	bx	lr

080100c4 <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 80100c4:	2320      	movs	r3, #32
 80100c6:	6043      	str	r3, [r0, #4]
}
 80100c8:	4770      	bx	lr

080100ca <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 80100ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80100ce:	6043      	str	r3, [r0, #4]
}
 80100d0:	4770      	bx	lr

080100d2 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 80100d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80100d6:	6043      	str	r3, [r0, #4]
}
 80100d8:	4770      	bx	lr

080100da <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 80100da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80100de:	6043      	str	r3, [r0, #4]
}
 80100e0:	4770      	bx	lr

080100e2 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80100e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80100e6:	6043      	str	r3, [r0, #4]
}
 80100e8:	4770      	bx	lr

080100ea <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80100ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80100ee:	6043      	str	r3, [r0, #4]
}
 80100f0:	4770      	bx	lr

080100f2 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80100f2:	2304      	movs	r3, #4
 80100f4:	6043      	str	r3, [r0, #4]
}
 80100f6:	4770      	bx	lr

080100f8 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 80100f8:	2340      	movs	r3, #64	; 0x40
 80100fa:	6043      	str	r3, [r0, #4]
}
 80100fc:	4770      	bx	lr

080100fe <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 80100fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010102:	6043      	str	r3, [r0, #4]
}
 8010104:	4770      	bx	lr

08010106 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8010106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801010a:	6043      	str	r3, [r0, #4]
}
 801010c:	4770      	bx	lr

0801010e <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 801010e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010112:	6043      	str	r3, [r0, #4]
}
 8010114:	4770      	bx	lr

08010116 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8010116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801011a:	6043      	str	r3, [r0, #4]
}
 801011c:	4770      	bx	lr

0801011e <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 801011e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010122:	6043      	str	r3, [r0, #4]
}
 8010124:	4770      	bx	lr

08010126 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8010126:	2308      	movs	r3, #8
 8010128:	6043      	str	r3, [r0, #4]
}
 801012a:	4770      	bx	lr

0801012c <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 801012c:	2380      	movs	r3, #128	; 0x80
 801012e:	6043      	str	r3, [r0, #4]
}
 8010130:	4770      	bx	lr

08010132 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8010132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010136:	6043      	str	r3, [r0, #4]
}
 8010138:	4770      	bx	lr

0801013a <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 801013a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801013e:	6043      	str	r3, [r0, #4]
}
 8010140:	4770      	bx	lr

08010142 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8010142:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010146:	6043      	str	r3, [r0, #4]
}
 8010148:	4770      	bx	lr

0801014a <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 801014a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801014e:	6043      	str	r3, [r0, #4]
}
 8010150:	4770      	bx	lr

08010152 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8010152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010156:	6043      	str	r3, [r0, #4]
}
 8010158:	4770      	bx	lr

0801015a <stm32_dma_clear_stream_irq>:
{
 801015a:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 801015c:	f7f6 fd32 	bl	8006bc4 <dma_stm32_clear_te>
}
 8010160:	bd08      	pop	{r3, pc}

08010162 <stm32_dma_is_unexpected_irq_happened>:
}
 8010162:	2000      	movs	r0, #0
 8010164:	4770      	bx	lr

08010166 <gpio_stm32_isr>:
{
 8010166:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8010168:	684e      	ldr	r6, [r1, #4]
 801016a:	2501      	movs	r5, #1
 801016c:	4085      	lsls	r5, r0
	return list->head;
 801016e:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8010170:	b119      	cbz	r1, 801017a <gpio_stm32_isr+0x14>
 8010172:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 8010174:	b149      	cbz	r1, 801018a <gpio_stm32_isr+0x24>
	return node->next;
 8010176:	680c      	ldr	r4, [r1, #0]
 8010178:	e007      	b.n	801018a <gpio_stm32_isr+0x24>
 801017a:	460c      	mov	r4, r1
 801017c:	e005      	b.n	801018a <gpio_stm32_isr+0x24>
 801017e:	b164      	cbz	r4, 801019a <gpio_stm32_isr+0x34>
 8010180:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8010182:	b104      	cbz	r4, 8010186 <gpio_stm32_isr+0x20>
	return node->next;
 8010184:	6823      	ldr	r3, [r4, #0]
 8010186:	4621      	mov	r1, r4
 8010188:	461c      	mov	r4, r3
 801018a:	b141      	cbz	r1, 801019e <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 801018c:	688a      	ldr	r2, [r1, #8]
 801018e:	402a      	ands	r2, r5
 8010190:	d0f5      	beq.n	801017e <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8010192:	684b      	ldr	r3, [r1, #4]
 8010194:	4630      	mov	r0, r6
 8010196:	4798      	blx	r3
 8010198:	e7f1      	b.n	801017e <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 801019a:	4623      	mov	r3, r4
 801019c:	e7f3      	b.n	8010186 <gpio_stm32_isr+0x20>
}
 801019e:	bd70      	pop	{r4, r5, r6, pc}

080101a0 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80101a0:	f410 7f00 	tst.w	r0, #512	; 0x200
 80101a4:	d01b      	beq.n	80101de <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80101a6:	2310      	movs	r3, #16
 80101a8:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80101aa:	f010 0f02 	tst.w	r0, #2
 80101ae:	d004      	beq.n	80101ba <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80101b0:	f010 0f04 	tst.w	r0, #4
 80101b4:	d02c      	beq.n	8010210 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80101b6:	2350      	movs	r3, #80	; 0x50
 80101b8:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80101ba:	f010 0310 	ands.w	r3, r0, #16
 80101be:	d005      	beq.n	80101cc <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80101c0:	680b      	ldr	r3, [r1, #0]
 80101c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101c6:	600b      	str	r3, [r1, #0]
	return 0;
 80101c8:	2000      	movs	r0, #0
 80101ca:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80101cc:	f010 0020 	ands.w	r0, r0, #32
 80101d0:	d020      	beq.n	8010214 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80101d2:	680a      	ldr	r2, [r1, #0]
 80101d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101d8:	600a      	str	r2, [r1, #0]
	return 0;
 80101da:	4618      	mov	r0, r3
 80101dc:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 80101de:	f410 7f80 	tst.w	r0, #256	; 0x100
 80101e2:	d011      	beq.n	8010208 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 80101e4:	2300      	movs	r3, #0
 80101e6:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80101e8:	f010 0310 	ands.w	r3, r0, #16
 80101ec:	d004      	beq.n	80101f8 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80101ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101f2:	600b      	str	r3, [r1, #0]
	return 0;
 80101f4:	2000      	movs	r0, #0
 80101f6:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80101f8:	f010 0020 	ands.w	r0, r0, #32
 80101fc:	d00a      	beq.n	8010214 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80101fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010202:	600a      	str	r2, [r1, #0]
	return 0;
 8010204:	4618      	mov	r0, r3
 8010206:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8010208:	2330      	movs	r3, #48	; 0x30
 801020a:	600b      	str	r3, [r1, #0]
	return 0;
 801020c:	2000      	movs	r0, #0
 801020e:	4770      	bx	lr
				return -ENOTSUP;
 8010210:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8010214:	4770      	bx	lr

08010216 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8010216:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8010218:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801021a:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 801021c:	600b      	str	r3, [r1, #0]
}
 801021e:	2000      	movs	r0, #0
 8010220:	4770      	bx	lr

08010222 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8010222:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8010224:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8010226:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8010228:	4042      	eors	r2, r0
 801022a:	400a      	ands	r2, r1
 801022c:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 801022e:	615a      	str	r2, [r3, #20]
}
 8010230:	2000      	movs	r0, #0
 8010232:	4770      	bx	lr

08010234 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8010234:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8010236:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8010238:	6199      	str	r1, [r3, #24]
}
 801023a:	2000      	movs	r0, #0
 801023c:	4770      	bx	lr

0801023e <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 801023e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8010240:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8010242:	6299      	str	r1, [r3, #40]	; 0x28
}
 8010244:	2000      	movs	r0, #0
 8010246:	4770      	bx	lr

08010248 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8010248:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801024a:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 801024c:	6953      	ldr	r3, [r2, #20]
 801024e:	404b      	eors	r3, r1
 8010250:	6153      	str	r3, [r2, #20]
}
 8010252:	2000      	movs	r0, #0
 8010254:	4770      	bx	lr

08010256 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8010256:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 8010258:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 801025a:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 801025e:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8010260:	b1fb      	cbz	r3, 80102a2 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8010262:	2000      	movs	r0, #0
 8010264:	e00d      	b.n	8010282 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 8010266:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8010268:	60a3      	str	r3, [r4, #8]
	return list->tail;
 801026a:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 801026e:	4281      	cmp	r1, r0
 8010270:	d112      	bne.n	8010298 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8010272:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8010276:	e00f      	b.n	8010298 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8010278:	f8cc 0004 	str.w	r0, [ip, #4]
}
 801027c:	e00c      	b.n	8010298 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801027e:	4618      	mov	r0, r3
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	b163      	cbz	r3, 801029e <gpio_stm32_manage_callback+0x48>
 8010284:	4299      	cmp	r1, r3
 8010286:	d1fa      	bne.n	801027e <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 8010288:	2800      	cmp	r0, #0
 801028a:	d0ec      	beq.n	8010266 <gpio_stm32_manage_callback+0x10>
	return node->next;
 801028c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 801028e:	6003      	str	r3, [r0, #0]
	return list->tail;
 8010290:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8010294:	4299      	cmp	r1, r3
 8010296:	d0ef      	beq.n	8010278 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 8010298:	2300      	movs	r3, #0
 801029a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801029c:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 801029e:	b903      	cbnz	r3, 80102a2 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 80102a0:	b162      	cbz	r2, 80102bc <gpio_stm32_manage_callback+0x66>
	if (set) {
 80102a2:	b172      	cbz	r2, 80102c2 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 80102a4:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 80102a6:	600b      	str	r3, [r1, #0]
	list->head = node;
 80102a8:	60a1      	str	r1, [r4, #8]
	return list->tail;
 80102aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 80102ae:	b10b      	cbz	r3, 80102b4 <gpio_stm32_manage_callback+0x5e>
	return 0;
 80102b0:	2000      	movs	r0, #0
 80102b2:	e007      	b.n	80102c4 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 80102b4:	f8cc 1004 	str.w	r1, [ip, #4]
 80102b8:	2000      	movs	r0, #0
}
 80102ba:	e003      	b.n	80102c4 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 80102bc:	f06f 0015 	mvn.w	r0, #21
 80102c0:	e000      	b.n	80102c4 <gpio_stm32_manage_callback+0x6e>
	return 0;
 80102c2:	2000      	movs	r0, #0
}
 80102c4:	bc10      	pop	{r4}
 80102c6:	4770      	bx	lr

080102c8 <gpio_stm32_configure_raw>:
{
 80102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 80102ca:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80102cc:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80102ce:	2001      	movs	r0, #1
 80102d0:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80102d2:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80102d6:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80102da:	6865      	ldr	r5, [r4, #4]
 80102dc:	ea25 0500 	bic.w	r5, r5, r0
 80102e0:	408e      	lsls	r6, r1
 80102e2:	4335      	orrs	r5, r6
 80102e4:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80102e6:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80102ea:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102ec:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80102f0:	2d00      	cmp	r5, #0
 80102f2:	d04a      	beq.n	801038a <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 80102f4:	fab5 f585 	clz	r5, r5
 80102f8:	006d      	lsls	r5, r5, #1
 80102fa:	2703      	movs	r7, #3
 80102fc:	fa07 f505 	lsl.w	r5, r7, r5
 8010300:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010304:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8010308:	2d00      	cmp	r5, #0
 801030a:	d040      	beq.n	801038e <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 801030c:	fab5 f585 	clz	r5, r5
 8010310:	006d      	lsls	r5, r5, #1
 8010312:	fa0e f505 	lsl.w	r5, lr, r5
 8010316:	4335      	orrs	r5, r6
 8010318:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801031a:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801031e:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010320:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8010324:	b3ad      	cbz	r5, 8010392 <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 8010326:	fab5 f585 	clz	r5, r5
 801032a:	006d      	lsls	r5, r5, #1
 801032c:	f04f 0e03 	mov.w	lr, #3
 8010330:	fa0e f505 	lsl.w	r5, lr, r5
 8010334:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010338:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 801033c:	b35d      	cbz	r5, 8010396 <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 801033e:	fab5 f585 	clz	r5, r5
 8010342:	006d      	lsls	r5, r5, #1
 8010344:	fa02 f505 	lsl.w	r5, r2, r5
 8010348:	ea4e 0505 	orr.w	r5, lr, r5
 801034c:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 801034e:	f1bc 0f20 	cmp.w	ip, #32
 8010352:	d022      	beq.n	801039a <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8010354:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010358:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801035a:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 801035e:	2b00      	cmp	r3, #0
 8010360:	d052      	beq.n	8010408 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 8010362:	fab3 f383 	clz	r3, r3
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	2103      	movs	r1, #3
 801036a:	fa01 f303 	lsl.w	r3, r1, r3
 801036e:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010372:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8010376:	2800      	cmp	r0, #0
 8010378:	d048      	beq.n	801040c <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 801037a:	fab0 f080 	clz	r0, r0
 801037e:	0040      	lsls	r0, r0, #1
 8010380:	fa0c f000 	lsl.w	r0, ip, r0
 8010384:	4318      	orrs	r0, r3
 8010386:	6020      	str	r0, [r4, #0]
}
 8010388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 801038a:	2520      	movs	r5, #32
 801038c:	e7b4      	b.n	80102f8 <gpio_stm32_configure_raw+0x30>
 801038e:	2520      	movs	r5, #32
 8010390:	e7be      	b.n	8010310 <gpio_stm32_configure_raw+0x48>
 8010392:	2520      	movs	r5, #32
 8010394:	e7c9      	b.n	801032a <gpio_stm32_configure_raw+0x62>
 8010396:	2520      	movs	r5, #32
 8010398:	e7d3      	b.n	8010342 <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 801039a:	2907      	cmp	r1, #7
 801039c:	dc19      	bgt.n	80103d2 <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801039e:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103a0:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80103a4:	b18a      	cbz	r2, 80103ca <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 80103a6:	fab2 f282 	clz	r2, r2
 80103aa:	0092      	lsls	r2, r2, #2
 80103ac:	250f      	movs	r5, #15
 80103ae:	fa05 f202 	lsl.w	r2, r5, r2
 80103b2:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103b6:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80103ba:	b142      	cbz	r2, 80103ce <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 80103bc:	fab2 f282 	clz	r2, r2
 80103c0:	0092      	lsls	r2, r2, #2
 80103c2:	4093      	lsls	r3, r2
 80103c4:	430b      	orrs	r3, r1
 80103c6:	6223      	str	r3, [r4, #32]
}
 80103c8:	e7c4      	b.n	8010354 <gpio_stm32_configure_raw+0x8c>
    return 32U;
 80103ca:	2220      	movs	r2, #32
 80103cc:	e7ed      	b.n	80103aa <gpio_stm32_configure_raw+0xe2>
 80103ce:	2220      	movs	r2, #32
 80103d0:	e7f6      	b.n	80103c0 <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80103d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80103d4:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103d6:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80103da:	b189      	cbz	r1, 8010400 <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 80103dc:	fab1 f181 	clz	r1, r1
 80103e0:	0089      	lsls	r1, r1, #2
 80103e2:	260f      	movs	r6, #15
 80103e4:	fa06 f101 	lsl.w	r1, r6, r1
 80103e8:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103ec:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80103f0:	b142      	cbz	r2, 8010404 <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 80103f2:	fab2 f282 	clz	r2, r2
 80103f6:	0092      	lsls	r2, r2, #2
 80103f8:	4093      	lsls	r3, r2
 80103fa:	430b      	orrs	r3, r1
 80103fc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80103fe:	e7a9      	b.n	8010354 <gpio_stm32_configure_raw+0x8c>
    return 32U;
 8010400:	2120      	movs	r1, #32
 8010402:	e7ed      	b.n	80103e0 <gpio_stm32_configure_raw+0x118>
 8010404:	2220      	movs	r2, #32
 8010406:	e7f6      	b.n	80103f6 <gpio_stm32_configure_raw+0x12e>
 8010408:	2320      	movs	r3, #32
 801040a:	e7ac      	b.n	8010366 <gpio_stm32_configure_raw+0x9e>
 801040c:	2020      	movs	r0, #32
 801040e:	e7b6      	b.n	801037e <gpio_stm32_configure_raw+0xb6>

08010410 <gpio_stm32_config>:
{
 8010410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010412:	b083      	sub	sp, #12
 8010414:	4607      	mov	r7, r0
 8010416:	460d      	mov	r5, r1
 8010418:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 801041a:	a901      	add	r1, sp, #4
 801041c:	4610      	mov	r0, r2
 801041e:	f7ff febf 	bl	80101a0 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8010422:	4606      	mov	r6, r0
 8010424:	b970      	cbnz	r0, 8010444 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 8010426:	f414 7f00 	tst.w	r4, #512	; 0x200
 801042a:	d005      	beq.n	8010438 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 801042c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8010430:	d10b      	bne.n	801044a <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8010432:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8010436:	d10e      	bne.n	8010456 <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8010438:	2300      	movs	r3, #0
 801043a:	9a01      	ldr	r2, [sp, #4]
 801043c:	4629      	mov	r1, r5
 801043e:	4638      	mov	r0, r7
 8010440:	f7ff ff42 	bl	80102c8 <gpio_stm32_configure_raw>
}
 8010444:	4630      	mov	r0, r6
 8010446:	b003      	add	sp, #12
 8010448:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 801044a:	2101      	movs	r1, #1
 801044c:	40a9      	lsls	r1, r5
 801044e:	4638      	mov	r0, r7
 8010450:	f7ff fef0 	bl	8010234 <gpio_stm32_port_set_bits_raw>
 8010454:	e7f0      	b.n	8010438 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8010456:	2101      	movs	r1, #1
 8010458:	40a9      	lsls	r1, r5
 801045a:	4638      	mov	r0, r7
 801045c:	f7ff feef 	bl	801023e <gpio_stm32_port_clear_bits_raw>
 8010460:	e7ea      	b.n	8010438 <gpio_stm32_config+0x28>

08010462 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8010462:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 8010464:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 8010466:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 8010468:	2101      	movs	r1, #1
 801046a:	f7f6 fd0d 	bl	8006e88 <gpio_stm32_clock_request>
	if (ret < 0) {
 801046e:	2800      	cmp	r0, #0
 8010470:	db00      	blt.n	8010474 <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 8010472:	2000      	movs	r0, #0
}
 8010474:	bd08      	pop	{r3, pc}

08010476 <gpio_stm32_configure>:
{
 8010476:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8010478:	f7ff ff26 	bl	80102c8 <gpio_stm32_configure_raw>
}
 801047c:	2000      	movs	r0, #0
 801047e:	bd08      	pop	{r3, pc}

08010480 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8010480:	6341      	str	r1, [r0, #52]	; 0x34
}
 8010482:	4770      	bx	lr

08010484 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8010484:	6381      	str	r1, [r0, #56]	; 0x38
}
 8010486:	4770      	bx	lr

08010488 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8010488:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 801048a:	4770      	bx	lr

0801048c <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 801048c:	6401      	str	r1, [r0, #64]	; 0x40
}
 801048e:	4770      	bx	lr

08010490 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8010490:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8010492:	6581      	str	r1, [r0, #88]	; 0x58
}
 8010494:	4770      	bx	lr

08010496 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 8010496:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8010498:	4770      	bx	lr

0801049a <get_polarity>:
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 801049a:	f010 0f01 	tst.w	r0, #1
 801049e:	d001      	beq.n	80104a4 <get_polarity+0xa>
	return LL_TIM_OCPOLARITY_LOW;
 80104a0:	2002      	movs	r0, #2
 80104a2:	4770      	bx	lr
		return LL_TIM_OCPOLARITY_HIGH;
 80104a4:	2000      	movs	r0, #0
}
 80104a6:	4770      	bx	lr

080104a8 <pwm_stm32_get_cycles_per_sec>:
	struct pwm_stm32_data *data = dev->data;
 80104a8:	6903      	ldr	r3, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80104aa:	6841      	ldr	r1, [r0, #4]
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6849      	ldr	r1, [r1, #4]
 80104b0:	3101      	adds	r1, #1
 80104b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80104b6:	2000      	movs	r0, #0
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	6050      	str	r0, [r2, #4]
}
 80104bc:	4770      	bx	lr

080104be <spi_stm32_transfer_ongoing>:
	return !!(ctx->tx_len);
 80104be:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80104c0:	b91b      	cbnz	r3, 80104ca <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 80104c2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80104c4:	b91b      	cbnz	r3, 80104ce <spi_stm32_transfer_ongoing+0x10>
 80104c6:	2000      	movs	r0, #0
 80104c8:	4770      	bx	lr
 80104ca:	2001      	movs	r0, #1
 80104cc:	4770      	bx	lr
 80104ce:	2001      	movs	r0, #1
}
 80104d0:	4770      	bx	lr

080104d2 <z_log_msg2_runtime_create>:
{
 80104d2:	b510      	push	{r4, lr}
 80104d4:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80104d6:	ac0a      	add	r4, sp, #40	; 0x28
 80104d8:	9405      	str	r4, [sp, #20]
 80104da:	9402      	str	r4, [sp, #8]
 80104dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80104de:	9401      	str	r4, [sp, #4]
 80104e0:	9c08      	ldr	r4, [sp, #32]
 80104e2:	9400      	str	r4, [sp, #0]
 80104e4:	f7ff facd 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 80104e8:	b006      	add	sp, #24
 80104ea:	bd10      	pop	{r4, pc}

080104ec <wait_dma_rx_tx_done>:
{
 80104ec:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80104ee:	6904      	ldr	r4, [r0, #16]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 80104f0:	f104 0064 	add.w	r0, r4, #100	; 0x64
	return z_impl_k_sem_take(sem, timeout);
 80104f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80104f8:	2300      	movs	r3, #0
 80104fa:	f7fb ffab 	bl	800c454 <z_impl_k_sem_take>
		if (res != 0) {
 80104fe:	4602      	mov	r2, r0
 8010500:	b950      	cbnz	r0, 8010518 <wait_dma_rx_tx_done+0x2c>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 8010502:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8010504:	f013 0f01 	tst.w	r3, #1
 8010508:	d104      	bne.n	8010514 <wait_dma_rx_tx_done+0x28>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 801050a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801050c:	f013 0f06 	tst.w	r3, #6
 8010510:	d0ee      	beq.n	80104f0 <wait_dma_rx_tx_done+0x4>
 8010512:	e001      	b.n	8010518 <wait_dma_rx_tx_done+0x2c>
			return -EIO;
 8010514:	f06f 0204 	mvn.w	r2, #4
}
 8010518:	4610      	mov	r0, r2
 801051a:	bd10      	pop	{r4, pc}

0801051c <spi_dma_move_buffers>:
{
 801051c:	b570      	push	{r4, r5, r6, lr}
 801051e:	4604      	mov	r4, r0
 8010520:	460d      	mov	r5, r1
	struct spi_stm32_data *data = dev->data;
 8010522:	6906      	ldr	r6, [r0, #16]
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 8010524:	f8b6 208e 	ldrh.w	r2, [r6, #142]	; 0x8e
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 8010528:	fbb1 f2f2 	udiv	r2, r1, r2
 801052c:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 801052e:	f7f7 f99b 	bl	8007868 <spi_stm32_dma_rx_load>
	if (ret != 0) {
 8010532:	b100      	cbz	r0, 8010536 <spi_dma_move_buffers+0x1a>
}
 8010534:	bd70      	pop	{r4, r5, r6, pc}
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8010536:	f8b6 20d8 	ldrh.w	r2, [r6, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 801053a:	fbb5 f2f2 	udiv	r2, r5, r2
 801053e:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8010540:	4620      	mov	r0, r4
 8010542:	f7f7 f9f9 	bl	8007938 <spi_stm32_dma_tx_load>
	return ret;
 8010546:	e7f5      	b.n	8010534 <spi_dma_move_buffers+0x18>

08010548 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 8010548:	b508      	push	{r3, lr}
 801054a:	2200      	movs	r2, #0
 801054c:	2105      	movs	r1, #5
 801054e:	2023      	movs	r0, #35	; 0x23
 8010550:	f7f4 fb28 	bl	8004ba4 <z_arm_irq_priority_set>
 8010554:	2023      	movs	r0, #35	; 0x23
 8010556:	f7f4 faf5 	bl	8004b44 <arch_irq_enable>
 801055a:	bd08      	pop	{r3, pc}

0801055c <spi_stm32_release>:
{
 801055c:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 801055e:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	b1c3      	cbz	r3, 8010596 <spi_stm32_release+0x3a>
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	b1b3      	cbz	r3, 8010596 <spi_stm32_release+0x3a>
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	b1a2      	cbz	r2, 8010596 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 801056c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 801056e:	f7fc feb1 	bl	800d2d4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8010572:	6823      	ldr	r3, [r4, #0]
 8010574:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8010576:	6818      	ldr	r0, [r3, #0]
 8010578:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 801057a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	2301      	movs	r3, #1
 8010580:	408b      	lsls	r3, r1
 8010582:	421a      	tst	r2, r3
 8010584:	d10b      	bne.n	801059e <spi_stm32_release+0x42>
 8010586:	2300      	movs	r3, #0
	if (value != 0)	{
 8010588:	b15b      	cbz	r3, 80105a2 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801058a:	2301      	movs	r3, #1
 801058c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8010590:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	4798      	blx	r3
 8010596:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 8010598:	b153      	cbz	r3, 80105b0 <spi_stm32_release+0x54>
}
 801059a:	2000      	movs	r0, #0
 801059c:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 801059e:	2301      	movs	r3, #1
 80105a0:	e7f2      	b.n	8010588 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80105a2:	2301      	movs	r3, #1
 80105a4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80105a8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80105aa:	691b      	ldr	r3, [r3, #16]
 80105ac:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 80105ae:	e7f2      	b.n	8010596 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 80105b0:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 80105b2:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 80105b6:	f7fb ff25 	bl	800c404 <z_impl_k_sem_give>
}
 80105ba:	e7ee      	b.n	801059a <spi_stm32_release+0x3e>

080105bc <spi_stm32_cs_control>:
{
 80105bc:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80105be:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d034      	beq.n	8010630 <spi_stm32_cs_control+0x74>
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	2a00      	cmp	r2, #0
 80105ca:	d031      	beq.n	8010630 <spi_stm32_cs_control+0x74>
 80105cc:	6810      	ldr	r0, [r2, #0]
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d02e      	beq.n	8010630 <spi_stm32_cs_control+0x74>
		if (on) {
 80105d2:	b9c9      	cbnz	r1, 8010608 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 80105d4:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 80105d6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80105da:	d129      	bne.n	8010630 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 80105dc:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 80105de:	f7fc fe79 	bl	800d2d4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 80105e6:	6818      	ldr	r0, [r3, #0]
 80105e8:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 80105ea:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	2301      	movs	r3, #1
 80105f0:	408b      	lsls	r3, r1
 80105f2:	421a      	tst	r2, r3
 80105f4:	d126      	bne.n	8010644 <spi_stm32_cs_control+0x88>
 80105f6:	2300      	movs	r3, #0
	if (value != 0)	{
 80105f8:	b333      	cbz	r3, 8010648 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80105fa:	2301      	movs	r3, #1
 80105fc:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8010600:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	4798      	blx	r3
 8010606:	e013      	b.n	8010630 <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 8010608:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 801060a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	2301      	movs	r3, #1
 8010610:	408b      	lsls	r3, r1
 8010612:	421a      	tst	r2, r3
 8010614:	d10d      	bne.n	8010632 <spi_stm32_cs_control+0x76>
 8010616:	2301      	movs	r3, #1
	if (value != 0)	{
 8010618:	b16b      	cbz	r3, 8010636 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801061a:	2301      	movs	r3, #1
 801061c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8010620:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	689b      	ldr	r3, [r3, #8]
 801062a:	6898      	ldr	r0, [r3, #8]
 801062c:	f7fc fe52 	bl	800d2d4 <z_impl_k_busy_wait>
}
 8010630:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8010632:	2300      	movs	r3, #0
 8010634:	e7f0      	b.n	8010618 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8010636:	2301      	movs	r3, #1
 8010638:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 801063c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	4798      	blx	r3
 8010642:	e7f0      	b.n	8010626 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 8010644:	2301      	movs	r3, #1
 8010646:	e7d7      	b.n	80105f8 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8010648:	2301      	movs	r3, #1
 801064a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 801064e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	4798      	blx	r3
 8010654:	e7ec      	b.n	8010630 <spi_stm32_cs_control+0x74>

08010656 <spi_stm32_complete>:
{
 8010656:	b570      	push	{r4, r5, r6, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 801065c:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 801065e:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 8010660:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8010662:	6863      	ldr	r3, [r4, #4]
 8010664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010668:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 801066a:	6863      	ldr	r3, [r4, #4]
 801066c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010670:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8010672:	6863      	ldr	r3, [r4, #4]
 8010674:	f023 0320 	bic.w	r3, r3, #32
 8010678:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 801067a:	2100      	movs	r1, #0
 801067c:	f7ff ff9e 	bl	80105bc <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8010680:	68a3      	ldr	r3, [r4, #8]
 8010682:	f013 0f01 	tst.w	r3, #1
 8010686:	d001      	beq.n	801068c <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 8010688:	68e3      	ldr	r3, [r4, #12]
 801068a:	e7f9      	b.n	8010680 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 801068c:	6823      	ldr	r3, [r4, #0]
 801068e:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8010692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010696:	d015      	beq.n	80106c4 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8010698:	68a3      	ldr	r3, [r4, #8]
 801069a:	f013 0f20 	tst.w	r3, #32
 801069e:	d006      	beq.n	80106ae <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 80106a0:	68a3      	ldr	r3, [r4, #8]
 80106a2:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 80106a4:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80106a6:	6823      	ldr	r3, [r4, #0]
 80106a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106ac:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106b4:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 80106b6:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 80106b8:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 80106bc:	f7fb fea2 	bl	800c404 <z_impl_k_sem_give>
}
 80106c0:	b002      	add	sp, #8
 80106c2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80106c4:	68a3      	ldr	r3, [r4, #8]
 80106c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80106ca:	d1fb      	bne.n	80106c4 <spi_stm32_complete+0x6e>
 80106cc:	e7e4      	b.n	8010698 <spi_stm32_complete+0x42>

080106ce <spi_stm32_transceive>:
{
 80106ce:	b530      	push	{r4, r5, lr}
 80106d0:	b083      	sub	sp, #12
	struct spi_stm32_data *data = dev->data;
 80106d2:	6904      	ldr	r4, [r0, #16]
	if ((data->dma_tx.dma_dev != NULL)
 80106d4:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
 80106d8:	b115      	cbz	r5, 80106e0 <spi_stm32_transceive+0x12>
	 && (data->dma_rx.dma_dev != NULL)) {
 80106da:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 80106de:	b934      	cbnz	r4, 80106ee <spi_stm32_transceive+0x20>
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 80106e0:	2400      	movs	r4, #0
 80106e2:	9401      	str	r4, [sp, #4]
 80106e4:	9400      	str	r4, [sp, #0]
 80106e6:	f7f7 fab9 	bl	8007c5c <transceive>
}
 80106ea:	b003      	add	sp, #12
 80106ec:	bd30      	pop	{r4, r5, pc}
		return transceive_dma(dev, config, tx_bufs, rx_bufs,
 80106ee:	2400      	movs	r4, #0
 80106f0:	9401      	str	r4, [sp, #4]
 80106f2:	9400      	str	r4, [sp, #0]
 80106f4:	f7f7 fb94 	bl	8007e20 <transceive_dma>
 80106f8:	e7f7      	b.n	80106ea <spi_stm32_transceive+0x1c>

080106fa <spi_stm32_shift_m>:
{
 80106fa:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80106fc:	6883      	ldr	r3, [r0, #8]
 80106fe:	f013 0f02 	tst.w	r3, #2
 8010702:	d0fb      	beq.n	80106fc <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8010704:	680b      	ldr	r3, [r1, #0]
 8010706:	889b      	ldrh	r3, [r3, #4]
 8010708:	f3c3 1345 	ubfx	r3, r3, #5, #6
 801070c:	2b08      	cmp	r3, #8
 801070e:	d009      	beq.n	8010724 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 8010710:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8010712:	2b00      	cmp	r3, #0
 8010714:	d03d      	beq.n	8010792 <spi_stm32_shift_m+0x98>
 8010716:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8010718:	2a00      	cmp	r2, #0
 801071a:	d13c      	bne.n	8010796 <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 801071c:	2a00      	cmp	r2, #0
 801071e:	d03c      	beq.n	801079a <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8010720:	881b      	ldrh	r3, [r3, #0]
 8010722:	e03b      	b.n	801079c <spi_stm32_shift_m+0xa2>
 8010724:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8010726:	b18b      	cbz	r3, 801074c <spi_stm32_shift_m+0x52>
 8010728:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 801072a:	b98a      	cbnz	r2, 8010750 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 801072c:	b192      	cbz	r2, 8010754 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 801072e:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8010730:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8010732:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8010734:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8010736:	2b00      	cmp	r3, #0
 8010738:	d03a      	beq.n	80107b0 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 801073a:	3b01      	subs	r3, #1
 801073c:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 801073e:	b15b      	cbz	r3, 8010758 <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 8010740:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8010742:	2b00      	cmp	r3, #0
 8010744:	d034      	beq.n	80107b0 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 8010746:	3301      	adds	r3, #1
 8010748:	654b      	str	r3, [r1, #84]	; 0x54
 801074a:	e031      	b.n	80107b0 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 801074c:	2200      	movs	r2, #0
 801074e:	e7ed      	b.n	801072c <spi_stm32_shift_m+0x32>
 8010750:	2201      	movs	r2, #1
 8010752:	e7eb      	b.n	801072c <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8010754:	2300      	movs	r3, #0
 8010756:	e7eb      	b.n	8010730 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 8010758:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801075a:	3308      	adds	r3, #8
 801075c:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801075e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010760:	3b01      	subs	r3, #1
 8010762:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8010764:	f101 0444 	add.w	r4, r1, #68	; 0x44
 8010768:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 801076c:	e004      	b.n	8010778 <spi_stm32_shift_m+0x7e>
		++(*current);
 801076e:	3308      	adds	r3, #8
 8010770:	6023      	str	r3, [r4, #0]
		--(*count);
 8010772:	6813      	ldr	r3, [r2, #0]
 8010774:	3b01      	subs	r3, #1
 8010776:	6013      	str	r3, [r2, #0]
	while (*count) {
 8010778:	6813      	ldr	r3, [r2, #0]
 801077a:	b13b      	cbz	r3, 801078c <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	685d      	ldr	r5, [r3, #4]
 8010780:	2d00      	cmp	r5, #0
 8010782:	d0f4      	beq.n	801076e <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 8010784:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 8010786:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	e000      	b.n	801078e <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 801078c:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 801078e:	654b      	str	r3, [r1, #84]	; 0x54
 8010790:	e00e      	b.n	80107b0 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 8010792:	2200      	movs	r2, #0
 8010794:	e7c2      	b.n	801071c <spi_stm32_shift_m+0x22>
 8010796:	2201      	movs	r2, #1
 8010798:	e7c0      	b.n	801071c <spi_stm32_shift_m+0x22>
 801079a:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 801079c:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 801079e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80107a0:	b133      	cbz	r3, 80107b0 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 80107a2:	3b01      	subs	r3, #1
 80107a4:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80107a6:	b31b      	cbz	r3, 80107f0 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 80107a8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80107aa:	b10b      	cbz	r3, 80107b0 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 80107ac:	3302      	adds	r3, #2
 80107ae:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80107b0:	6883      	ldr	r3, [r0, #8]
 80107b2:	f013 0f01 	tst.w	r3, #1
 80107b6:	d0fb      	beq.n	80107b0 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80107b8:	680b      	ldr	r3, [r1, #0]
 80107ba:	889b      	ldrh	r3, [r3, #4]
 80107bc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80107c0:	2b08      	cmp	r3, #8
 80107c2:	d035      	beq.n	8010830 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 80107c4:	68c3      	ldr	r3, [r0, #12]
 80107c6:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 80107c8:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80107ca:	2a00      	cmp	r2, #0
 80107cc:	d065      	beq.n	801089a <spi_stm32_shift_m+0x1a0>
 80107ce:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d164      	bne.n	801089e <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 80107d4:	b100      	cbz	r0, 80107d8 <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80107d6:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 80107d8:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80107da:	b13b      	cbz	r3, 80107ec <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 80107dc:	3b01      	subs	r3, #1
 80107de:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d05e      	beq.n	80108a2 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 80107e4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80107e6:	b10b      	cbz	r3, 80107ec <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 80107e8:	3302      	adds	r3, #2
 80107ea:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 80107ec:	bc30      	pop	{r4, r5}
 80107ee:	4770      	bx	lr
		++ctx->current_tx;
 80107f0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80107f2:	3308      	adds	r3, #8
 80107f4:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 80107f6:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80107f8:	3b01      	subs	r3, #1
 80107fa:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 80107fc:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8010800:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8010804:	e005      	b.n	8010812 <spi_stm32_shift_m+0x118>
		++(*current);
 8010806:	3308      	adds	r3, #8
 8010808:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 801080c:	6813      	ldr	r3, [r2, #0]
 801080e:	3b01      	subs	r3, #1
 8010810:	6013      	str	r3, [r2, #0]
	while (*count) {
 8010812:	6813      	ldr	r3, [r2, #0]
 8010814:	b14b      	cbz	r3, 801082a <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 8010816:	f8dc 3000 	ldr.w	r3, [ip]
 801081a:	685c      	ldr	r4, [r3, #4]
 801081c:	2c01      	cmp	r4, #1
 801081e:	d9f2      	bls.n	8010806 <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 8010820:	0864      	lsrs	r4, r4, #1
 8010822:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 8010824:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	e000      	b.n	801082c <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 801082a:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 801082c:	654b      	str	r3, [r1, #84]	; 0x54
 801082e:	e7bf      	b.n	80107b0 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 8010830:	68c3      	ldr	r3, [r0, #12]
 8010832:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 8010834:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8010836:	b17a      	cbz	r2, 8010858 <spi_stm32_shift_m+0x15e>
 8010838:	6e08      	ldr	r0, [r1, #96]	; 0x60
 801083a:	b978      	cbnz	r0, 801085c <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 801083c:	b100      	cbz	r0, 8010840 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 801083e:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 8010840:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8010842:	2b00      	cmp	r3, #0
 8010844:	d0d2      	beq.n	80107ec <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 8010846:	3b01      	subs	r3, #1
 8010848:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 801084a:	b14b      	cbz	r3, 8010860 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 801084c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 801084e:	2b00      	cmp	r3, #0
 8010850:	d0cc      	beq.n	80107ec <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 8010852:	3301      	adds	r3, #1
 8010854:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010856:	e7c9      	b.n	80107ec <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 8010858:	2000      	movs	r0, #0
 801085a:	e7ef      	b.n	801083c <spi_stm32_shift_m+0x142>
 801085c:	2001      	movs	r0, #1
 801085e:	e7ed      	b.n	801083c <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 8010860:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010862:	3308      	adds	r3, #8
 8010864:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8010866:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8010868:	3b01      	subs	r3, #1
 801086a:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 801086c:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 8010870:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8010874:	e004      	b.n	8010880 <spi_stm32_shift_m+0x186>
		++(*current);
 8010876:	3308      	adds	r3, #8
 8010878:	6003      	str	r3, [r0, #0]
		--(*count);
 801087a:	6813      	ldr	r3, [r2, #0]
 801087c:	3b01      	subs	r3, #1
 801087e:	6013      	str	r3, [r2, #0]
	while (*count) {
 8010880:	6813      	ldr	r3, [r2, #0]
 8010882:	b13b      	cbz	r3, 8010894 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 8010884:	6803      	ldr	r3, [r0, #0]
 8010886:	685c      	ldr	r4, [r3, #4]
 8010888:	2c00      	cmp	r4, #0
 801088a:	d0f4      	beq.n	8010876 <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 801088c:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 801088e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	e000      	b.n	8010896 <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 8010894:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8010896:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010898:	e7a8      	b.n	80107ec <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 801089a:	2000      	movs	r0, #0
 801089c:	e79a      	b.n	80107d4 <spi_stm32_shift_m+0xda>
 801089e:	2001      	movs	r0, #1
 80108a0:	e798      	b.n	80107d4 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 80108a2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80108a4:	3308      	adds	r3, #8
 80108a6:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 80108a8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80108aa:	3b01      	subs	r3, #1
 80108ac:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80108ae:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 80108b2:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 80108b6:	e004      	b.n	80108c2 <spi_stm32_shift_m+0x1c8>
		++(*current);
 80108b8:	3308      	adds	r3, #8
 80108ba:	6023      	str	r3, [r4, #0]
		--(*count);
 80108bc:	6813      	ldr	r3, [r2, #0]
 80108be:	3b01      	subs	r3, #1
 80108c0:	6013      	str	r3, [r2, #0]
	while (*count) {
 80108c2:	6813      	ldr	r3, [r2, #0]
 80108c4:	b143      	cbz	r3, 80108d8 <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 80108c6:	6823      	ldr	r3, [r4, #0]
 80108c8:	6858      	ldr	r0, [r3, #4]
 80108ca:	2801      	cmp	r0, #1
 80108cc:	d9f4      	bls.n	80108b8 <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 80108ce:	0840      	lsrs	r0, r0, #1
 80108d0:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 80108d2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	e000      	b.n	80108da <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 80108d8:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 80108da:	65cb      	str	r3, [r1, #92]	; 0x5c
 80108dc:	e786      	b.n	80107ec <spi_stm32_shift_m+0xf2>

080108de <spi_stm32_shift_s>:
{
 80108de:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80108e0:	6883      	ldr	r3, [r0, #8]
 80108e2:	f013 0f02 	tst.w	r3, #2
 80108e6:	d065      	beq.n	80109b4 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 80108e8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d062      	beq.n	80109b4 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80108ee:	680b      	ldr	r3, [r1, #0]
 80108f0:	889b      	ldrh	r3, [r3, #4]
 80108f2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80108f6:	2b08      	cmp	r3, #8
 80108f8:	d00f      	beq.n	801091a <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80108fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80108fc:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 80108fe:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8010900:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8010902:	2b00      	cmp	r3, #0
 8010904:	d05a      	beq.n	80109bc <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 8010906:	3b01      	subs	r3, #1
 8010908:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 801090a:	2b00      	cmp	r3, #0
 801090c:	d032      	beq.n	8010974 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 801090e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8010910:	2b00      	cmp	r3, #0
 8010912:	d053      	beq.n	80109bc <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 8010914:	3302      	adds	r3, #2
 8010916:	654b      	str	r3, [r1, #84]	; 0x54
 8010918:	e050      	b.n	80109bc <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 801091a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801091c:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 801091e:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8010920:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8010922:	2b00      	cmp	r3, #0
 8010924:	d04a      	beq.n	80109bc <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 8010926:	3b01      	subs	r3, #1
 8010928:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 801092a:	b12b      	cbz	r3, 8010938 <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 801092c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801092e:	2b00      	cmp	r3, #0
 8010930:	d044      	beq.n	80109bc <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 8010932:	3301      	adds	r3, #1
 8010934:	654b      	str	r3, [r1, #84]	; 0x54
 8010936:	e041      	b.n	80109bc <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 8010938:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801093a:	3308      	adds	r3, #8
 801093c:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801093e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010940:	3b01      	subs	r3, #1
 8010942:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8010944:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8010948:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 801094c:	6813      	ldr	r3, [r2, #0]
 801094e:	b173      	cbz	r3, 801096e <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 8010950:	f8dc 3000 	ldr.w	r3, [ip]
 8010954:	685c      	ldr	r4, [r3, #4]
 8010956:	b934      	cbnz	r4, 8010966 <spi_stm32_shift_s+0x88>
		++(*current);
 8010958:	3308      	adds	r3, #8
 801095a:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 801095e:	6813      	ldr	r3, [r2, #0]
 8010960:	3b01      	subs	r3, #1
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	e7f2      	b.n	801094c <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 8010966:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 8010968:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	e000      	b.n	8010970 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 801096e:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8010970:	654b      	str	r3, [r1, #84]	; 0x54
 8010972:	e023      	b.n	80109bc <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 8010974:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010976:	3308      	adds	r3, #8
 8010978:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801097a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 801097c:	3b01      	subs	r3, #1
 801097e:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8010980:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8010984:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8010988:	6813      	ldr	r3, [r2, #0]
 801098a:	b183      	cbz	r3, 80109ae <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 801098c:	f8dc 3000 	ldr.w	r3, [ip]
 8010990:	685c      	ldr	r4, [r3, #4]
 8010992:	2c01      	cmp	r4, #1
 8010994:	d806      	bhi.n	80109a4 <spi_stm32_shift_s+0xc6>
		++(*current);
 8010996:	3308      	adds	r3, #8
 8010998:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 801099c:	6813      	ldr	r3, [r2, #0]
 801099e:	3b01      	subs	r3, #1
 80109a0:	6013      	str	r3, [r2, #0]
 80109a2:	e7f1      	b.n	8010988 <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 80109a4:	0864      	lsrs	r4, r4, #1
 80109a6:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 80109a8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	e000      	b.n	80109b0 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 80109ae:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 80109b0:	654b      	str	r3, [r1, #84]	; 0x54
 80109b2:	e003      	b.n	80109bc <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80109b4:	6843      	ldr	r3, [r0, #4]
 80109b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109ba:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80109bc:	6883      	ldr	r3, [r0, #8]
 80109be:	f013 0f01 	tst.w	r3, #1
 80109c2:	d016      	beq.n	80109f2 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 80109c4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80109c6:	b1b3      	cbz	r3, 80109f6 <spi_stm32_shift_s+0x118>
 80109c8:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80109ca:	b9b2      	cbnz	r2, 80109fa <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 80109cc:	b18a      	cbz	r2, 80109f2 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80109ce:	680a      	ldr	r2, [r1, #0]
 80109d0:	8892      	ldrh	r2, [r2, #4]
 80109d2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80109d6:	2a08      	cmp	r2, #8
 80109d8:	d011      	beq.n	80109fe <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 80109da:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80109dc:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 80109de:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80109e0:	b13b      	cbz	r3, 80109f2 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 80109e2:	3b01      	subs	r3, #1
 80109e4:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d033      	beq.n	8010a52 <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 80109ea:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80109ec:	b10b      	cbz	r3, 80109f2 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 80109ee:	3302      	adds	r3, #2
 80109f0:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 80109f2:	bc10      	pop	{r4}
 80109f4:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 80109f6:	2200      	movs	r2, #0
 80109f8:	e7e8      	b.n	80109cc <spi_stm32_shift_s+0xee>
 80109fa:	2201      	movs	r2, #1
 80109fc:	e7e6      	b.n	80109cc <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 80109fe:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8010a00:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8010a02:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d0f4      	beq.n	80109f2 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8010a0c:	b12b      	cbz	r3, 8010a1a <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 8010a0e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d0ee      	beq.n	80109f2 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 8010a14:	3301      	adds	r3, #1
 8010a16:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010a18:	e7eb      	b.n	80109f2 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 8010a1a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8010a20:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8010a22:	3b01      	subs	r3, #1
 8010a24:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8010a26:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8010a2a:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8010a2e:	6813      	ldr	r3, [r2, #0]
 8010a30:	b163      	cbz	r3, 8010a4c <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 8010a32:	6823      	ldr	r3, [r4, #0]
 8010a34:	6858      	ldr	r0, [r3, #4]
 8010a36:	b928      	cbnz	r0, 8010a44 <spi_stm32_shift_s+0x166>
		++(*current);
 8010a38:	3308      	adds	r3, #8
 8010a3a:	6023      	str	r3, [r4, #0]
		--(*count);
 8010a3c:	6813      	ldr	r3, [r2, #0]
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	6013      	str	r3, [r2, #0]
 8010a42:	e7f4      	b.n	8010a2e <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 8010a44:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8010a46:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	e000      	b.n	8010a4e <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 8010a4c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8010a4e:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010a50:	e7cf      	b.n	80109f2 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 8010a52:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010a54:	3308      	adds	r3, #8
 8010a56:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 8010a58:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8010a5e:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8010a62:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8010a66:	6813      	ldr	r3, [r2, #0]
 8010a68:	b173      	cbz	r3, 8010a88 <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	6858      	ldr	r0, [r3, #4]
 8010a6e:	2801      	cmp	r0, #1
 8010a70:	d805      	bhi.n	8010a7e <spi_stm32_shift_s+0x1a0>
		++(*current);
 8010a72:	3308      	adds	r3, #8
 8010a74:	6023      	str	r3, [r4, #0]
		--(*count);
 8010a76:	6813      	ldr	r3, [r2, #0]
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	e7f3      	b.n	8010a66 <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 8010a7e:	0840      	lsrs	r0, r0, #1
 8010a80:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8010a82:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	e000      	b.n	8010a8a <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 8010a88:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8010a8a:	65cb      	str	r3, [r1, #92]	; 0x5c
 8010a8c:	e7b1      	b.n	80109f2 <spi_stm32_shift_s+0x114>

08010a8e <spi_stm32_shift_frames>:
{
 8010a8e:	b510      	push	{r4, lr}
 8010a90:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8010a92:	680b      	ldr	r3, [r1, #0]
 8010a94:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8010a96:	f013 0f01 	tst.w	r3, #1
 8010a9a:	d105      	bne.n	8010aa8 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8010a9c:	f7ff fe2d 	bl	80106fa <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f7f6 fce3 	bl	800746c <spi_stm32_get_err>
}
 8010aa6:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 8010aa8:	f7ff ff19 	bl	80108de <spi_stm32_shift_s>
 8010aac:	e7f8      	b.n	8010aa0 <spi_stm32_shift_frames+0x12>

08010aae <spi_stm32_isr>:
{
 8010aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab0:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 8010ab2:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8010ab4:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8010ab6:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 8010ab8:	4638      	mov	r0, r7
 8010aba:	f7f6 fcd7 	bl	800746c <spi_stm32_get_err>
	if (err) {
 8010abe:	4605      	mov	r5, r0
 8010ac0:	b968      	cbnz	r0, 8010ade <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	f7ff fcfb 	bl	80104be <spi_stm32_transfer_ongoing>
 8010ac8:	b970      	cbnz	r0, 8010ae8 <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8010aca:	b91d      	cbnz	r5, 8010ad4 <spi_stm32_isr+0x26>
 8010acc:	4630      	mov	r0, r6
 8010ace:	f7ff fcf6 	bl	80104be <spi_stm32_transfer_ongoing>
 8010ad2:	b918      	cbnz	r0, 8010adc <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f7ff fdbd 	bl	8010656 <spi_stm32_complete>
}
 8010adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f7ff fdb8 	bl	8010656 <spi_stm32_complete>
		return;
 8010ae6:	e7f9      	b.n	8010adc <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 8010ae8:	4631      	mov	r1, r6
 8010aea:	4638      	mov	r0, r7
 8010aec:	f7ff ffcf 	bl	8010a8e <spi_stm32_shift_frames>
 8010af0:	4605      	mov	r5, r0
 8010af2:	e7ea      	b.n	8010aca <spi_stm32_isr+0x1c>

08010af4 <timer_work_handler>:
{
 8010af4:	b508      	push	{r3, lr}
	TimerIrqHandler();
 8010af6:	f7f8 fc01 	bl	80092fc <TimerIrqHandler>
}
 8010afa:	bd08      	pop	{r3, pc}

08010afc <RtcGetTimerValue>:
{
 8010afc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8010afe:	f000 ff70 	bl	80119e2 <z_impl_k_uptime_ticks>
 8010b02:	220a      	movs	r2, #10
 8010b04:	2300      	movs	r3, #0
 8010b06:	f7ef ff69 	bl	80009dc <__aeabi_uldivmod>
}
 8010b0a:	bd08      	pop	{r3, pc}

08010b0c <RtcGetMinimumTimeout>:
}
 8010b0c:	2001      	movs	r0, #1
 8010b0e:	4770      	bx	lr

08010b10 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 8010b10:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 8010b12:	0f81      	lsrs	r1, r0, #30
 8010b14:	0083      	lsls	r3, r0, #2
 8010b16:	1818      	adds	r0, r3, r0
 8010b18:	f141 0100 	adc.w	r1, r1, #0
 8010b1c:	1800      	adds	r0, r0, r0
 8010b1e:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 8010b20:	f7fc f9fe 	bl	800cf20 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 8010b24:	bd08      	pop	{r3, pc}

08010b26 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 8010b26:	4770      	bx	lr

08010b28 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 8010b28:	4770      	bx	lr

08010b2a <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8010b2a:	f04f 0210 	mov.w	r2, #16
 8010b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8010b32:	f382 8812 	msr	BASEPRI_MAX, r2
 8010b36:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8010b3a:	6003      	str	r3, [r0, #0]
}
 8010b3c:	4770      	bx	lr

08010b3e <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 8010b3e:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
}
 8010b48:	4770      	bx	lr

08010b4a <z_log_msg2_runtime_create>:
{
 8010b4a:	b510      	push	{r4, lr}
 8010b4c:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010b4e:	ac0a      	add	r4, sp, #40	; 0x28
 8010b50:	9405      	str	r4, [sp, #20]
 8010b52:	9402      	str	r4, [sp, #8]
 8010b54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010b56:	9401      	str	r4, [sp, #4]
 8010b58:	9c08      	ldr	r4, [sp, #32]
 8010b5a:	9400      	str	r4, [sp, #0]
 8010b5c:	f7fe ff91 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010b60:	b006      	add	sp, #24
 8010b62:	bd10      	pop	{r4, pc}

08010b64 <clamp_int8>:
	if (x < min) {
 8010b64:	4288      	cmp	r0, r1
 8010b66:	db03      	blt.n	8010b70 <clamp_int8+0xc>
	} else if (x > max) {
 8010b68:	4290      	cmp	r0, r2
 8010b6a:	dd02      	ble.n	8010b72 <clamp_int8+0xe>
		return max;
 8010b6c:	4610      	mov	r0, r2
 8010b6e:	4770      	bx	lr
		return min;
 8010b70:	4608      	mov	r0, r1
}
 8010b72:	4770      	bx	lr

08010b74 <SX1276CheckRfFrequency>:
}
 8010b74:	2001      	movs	r0, #1
 8010b76:	4770      	bx	lr

08010b78 <sx127x_antenna_configure>:
}
 8010b78:	2000      	movs	r0, #0
 8010b7a:	4770      	bx	lr

08010b7c <z_log_msg2_runtime_create>:
{
 8010b7c:	b510      	push	{r4, lr}
 8010b7e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8010b80:	ac0a      	add	r4, sp, #40	; 0x28
 8010b82:	9405      	str	r4, [sp, #20]
 8010b84:	9402      	str	r4, [sp, #8]
 8010b86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010b88:	9401      	str	r4, [sp, #4]
 8010b8a:	9c08      	ldr	r4, [sp, #32]
 8010b8c:	9400      	str	r4, [sp, #0]
 8010b8e:	f7fe ff78 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 8010b92:	b006      	add	sp, #24
 8010b94:	bd10      	pop	{r4, pc}

08010b96 <SX1276GetBoardTcxoWakeupTime>:
}
 8010b96:	2000      	movs	r0, #0
 8010b98:	4770      	bx	lr

08010b9a <SX1276SetAntSwLowPower>:
}
 8010b9a:	4770      	bx	lr

08010b9c <SX1276SetBoardTcxo>:
}
 8010b9c:	4770      	bx	lr

08010b9e <SX1276SetAntSw>:
}
 8010b9e:	4770      	bx	lr

08010ba0 <sx127x_read>:
{
 8010ba0:	b508      	push	{r3, lr}
 8010ba2:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 8010ba4:	460a      	mov	r2, r1
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	f7f7 ff96 	bl	8008ad8 <sx127x_transceive>
}
 8010bac:	bd08      	pop	{r3, pc}

08010bae <sx127x_write>:
{
 8010bae:	b508      	push	{r3, lr}
 8010bb0:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8010bb2:	460a      	mov	r2, r1
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8010bba:	f7f7 ff8d 	bl	8008ad8 <sx127x_transceive>
}
 8010bbe:	bd08      	pop	{r3, pc}

08010bc0 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010bc0:	e004      	b.n	8010bcc <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bc6:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010bca:	461a      	mov	r2, r3
 8010bcc:	1e53      	subs	r3, r2, #1
 8010bce:	b29b      	uxth	r3, r3
 8010bd0:	2a00      	cmp	r2, #0
 8010bd2:	d1f6      	bne.n	8010bc2 <memcpy1+0x2>
    }
}
 8010bd4:	4770      	bx	lr

08010bd6 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8010bd6:	b570      	push	{r4, r5, r6, lr}
 8010bd8:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 8010bda:	f7ff ff97 	bl	8010b0c <RtcGetMinimumTimeout>
 8010bde:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 8010be0:	2301      	movs	r3, #1
 8010be2:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8010be4:	6826      	ldr	r6, [r4, #0]
 8010be6:	f7f7 fab3 	bl	8008150 <RtcGetTimerElapsedTime>
 8010bea:	4428      	add	r0, r5
 8010bec:	4286      	cmp	r6, r0
 8010bee:	d303      	bcc.n	8010bf8 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 8010bf0:	6820      	ldr	r0, [r4, #0]
 8010bf2:	f7f7 fac3 	bl	800817c <RtcSetAlarm>
}
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8010bf8:	f7f7 faaa 	bl	8008150 <RtcGetTimerElapsedTime>
 8010bfc:	4405      	add	r5, r0
 8010bfe:	6025      	str	r5, [r4, #0]
 8010c00:	e7f6      	b.n	8010bf0 <TimerSetTimeout+0x1a>

08010c02 <TimerInit>:
    obj->Timestamp = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 8010c06:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 8010c08:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 8010c0a:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 8010c0c:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 8010c0e:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 8010c10:	6143      	str	r3, [r0, #20]
}
 8010c12:	4770      	bx	lr

08010c14 <TimerSetValue>:
{
 8010c14:	b538      	push	{r3, r4, r5, lr}
 8010c16:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 8010c18:	4608      	mov	r0, r1
 8010c1a:	f7ff ff84 	bl	8010b26 <RtcMs2Tick>
 8010c1e:	4605      	mov	r5, r0
    TimerStop( obj );
 8010c20:	4620      	mov	r0, r4
 8010c22:	f7f8 fbaf 	bl	8009384 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8010c26:	f7ff ff71 	bl	8010b0c <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8010c2a:	4285      	cmp	r5, r0
 8010c2c:	d300      	bcc.n	8010c30 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 8010c2e:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 8010c30:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 8010c32:	6060      	str	r0, [r4, #4]
}
 8010c34:	bd38      	pop	{r3, r4, r5, pc}

08010c36 <TimerGetCurrentTime>:
{
 8010c36:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8010c38:	f7ff ff60 	bl	8010afc <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 8010c3c:	f7ff ff74 	bl	8010b28 <RtcTick2Ms>
}
 8010c40:	bd08      	pop	{r3, pc}

08010c42 <TimerGetElapsedTime>:
{
 8010c42:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8010c44:	4604      	mov	r4, r0
 8010c46:	b908      	cbnz	r0, 8010c4c <TimerGetElapsedTime+0xa>
}
 8010c48:	4620      	mov	r0, r4
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 8010c4c:	f7ff ff56 	bl	8010afc <RtcGetTimerValue>
 8010c50:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8010c52:	4620      	mov	r0, r4
 8010c54:	f7ff ff67 	bl	8010b26 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8010c58:	1a28      	subs	r0, r5, r0
 8010c5a:	f7ff ff65 	bl	8010b28 <RtcTick2Ms>
 8010c5e:	4604      	mov	r4, r0
 8010c60:	e7f2      	b.n	8010c48 <TimerGetElapsedTime+0x6>

08010c62 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8010c62:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 8010c64:	f7ff ff54 	bl	8010b10 <DelayMsMcu>
}
 8010c68:	bd08      	pop	{r3, pc}

08010c6a <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8010c6a:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8010c6c:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8010c70:	b2c3      	uxtb	r3, r0
 8010c72:	fb02 f303 	mul.w	r3, r2, r3
 8010c76:	3380      	adds	r3, #128	; 0x80
 8010c78:	0a1b      	lsrs	r3, r3, #8
}
 8010c7a:	fb02 3001 	mla	r0, r2, r1, r3
 8010c7e:	4770      	bx	lr

08010c80 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 8010c80:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8010c82:	b941      	cbnz	r1, 8010c96 <SX1276GetGfskTimeOnAirNumerator+0x16>
 8010c84:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 8010c86:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 8010c88:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 8010c8a:	b133      	cbz	r3, 8010c9a <SX1276GetGfskTimeOnAirNumerator+0x1a>
 8010c8c:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 8010c8e:	441a      	add	r2, r3
}
 8010c90:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8010c94:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 8010c96:	2100      	movs	r1, #0
 8010c98:	e7f5      	b.n	8010c86 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e7f7      	b.n	8010c8e <SX1276GetGfskTimeOnAirNumerator+0xe>

08010c9e <SX1276GetLoRaTimeOnAirNumerator>:
{
 8010c9e:	b570      	push	{r4, r5, r6, lr}
 8010ca0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010ca4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010ca8:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010caa:	f1a1 0c05 	sub.w	ip, r1, #5
 8010cae:	f1bc 0f01 	cmp.w	ip, #1
 8010cb2:	d932      	bls.n	8010d1a <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010cb4:	b918      	cbnz	r0, 8010cbe <SX1276GetLoRaTimeOnAirNumerator+0x20>
 8010cb6:	f1a1 060b 	sub.w	r6, r1, #11
 8010cba:	2e01      	cmp	r6, #1
 8010cbc:	d935      	bls.n	8010d2a <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 8010cbe:	2801      	cmp	r0, #1
 8010cc0:	d02f      	beq.n	8010d22 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010cc2:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010cc4:	f89d e014 	ldrb.w	lr, [sp, #20]
 8010cc8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010ccc:	b38d      	cbz	r5, 8010d32 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 8010cce:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010cd2:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010cd4:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010cd6:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010cda:	b36c      	cbz	r4, 8010d38 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 8010cdc:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010ce0:	44f4      	add	ip, lr
    if( datarate <= 6 )
 8010ce2:	2906      	cmp	r1, #6
 8010ce4:	d904      	bls.n	8010cf0 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 8010ce6:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 8010cea:	b10e      	cbz	r6, 8010cf0 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 8010cec:	1e88      	subs	r0, r1, #2
 8010cee:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 8010cf0:	f1bc 0f00 	cmp.w	ip, #0
 8010cf4:	db23      	blt.n	8010d3e <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010cf6:	4484      	add	ip, r0
 8010cf8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8010cfc:	fb9c fcf0 	sdiv	ip, ip, r0
 8010d00:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010d04:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 8010d08:	2906      	cmp	r1, #6
 8010d0a:	d801      	bhi.n	8010d10 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 8010d0c:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010d10:	0080      	lsls	r0, r0, #2
 8010d12:	3001      	adds	r0, #1
 8010d14:	3902      	subs	r1, #2
}
 8010d16:	4088      	lsls	r0, r1
 8010d18:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010d1a:	2b0b      	cmp	r3, #11
 8010d1c:	d8ca      	bhi.n	8010cb4 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010d1e:	230c      	movs	r3, #12
 8010d20:	e7c8      	b.n	8010cb4 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010d22:	290c      	cmp	r1, #12
 8010d24:	d003      	beq.n	8010d2e <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8010d26:	2600      	movs	r6, #0
 8010d28:	e7cc      	b.n	8010cc4 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010d2a:	2601      	movs	r6, #1
 8010d2c:	e7ca      	b.n	8010cc4 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 8010d2e:	2601      	movs	r6, #1
 8010d30:	e7c8      	b.n	8010cc4 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010d32:	f04f 0c00 	mov.w	ip, #0
 8010d36:	e7cc      	b.n	8010cd2 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8010d38:	f04f 0c14 	mov.w	ip, #20
 8010d3c:	e7d0      	b.n	8010ce0 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8010d3e:	f04f 0c00 	mov.w	ip, #0
 8010d42:	e7d8      	b.n	8010cf6 <SX1276GetLoRaTimeOnAirNumerator+0x58>

08010d44 <SX1276ReadFifo>:
{
 8010d44:	b508      	push	{r3, lr}
 8010d46:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8010d48:	4601      	mov	r1, r0
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	f7f8 f814 	bl	8008d78 <SX1276ReadBuffer>
}
 8010d50:	bd08      	pop	{r3, pc}

08010d52 <SX1276WriteFifo>:
{
 8010d52:	b508      	push	{r3, lr}
 8010d54:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8010d56:	4601      	mov	r1, r0
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f7f8 f95d 	bl	8009018 <SX1276WriteBuffer>
}
 8010d5e:	bd08      	pop	{r3, pc}

08010d60 <SX1276GetTimeOnAir>:
{
 8010d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d62:	b085      	sub	sp, #20
 8010d64:	460e      	mov	r6, r1
 8010d66:	4615      	mov	r5, r2
 8010d68:	461a      	mov	r2, r3
 8010d6a:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 8010d6e:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8010d72:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010d76:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 8010d7a:	b148      	cbz	r0, 8010d90 <SX1276GetTimeOnAir+0x30>
 8010d7c:	2801      	cmp	r0, #1
 8010d7e:	d010      	beq.n	8010da2 <SX1276GetTimeOnAir+0x42>
 8010d80:	2501      	movs	r5, #1
 8010d82:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8010d84:	1960      	adds	r0, r4, r5
 8010d86:	3801      	subs	r0, #1
}
 8010d88:	fbb0 f0f5 	udiv	r0, r0, r5
 8010d8c:	b005      	add	sp, #20
 8010d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8010d90:	463a      	mov	r2, r7
 8010d92:	4660      	mov	r0, ip
 8010d94:	f7ff ff74 	bl	8010c80 <SX1276GetGfskTimeOnAirNumerator>
 8010d98:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010d9c:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8010da0:	e7f0      	b.n	8010d84 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8010da2:	9302      	str	r3, [sp, #8]
 8010da4:	9701      	str	r7, [sp, #4]
 8010da6:	9100      	str	r1, [sp, #0]
 8010da8:	4663      	mov	r3, ip
 8010daa:	4629      	mov	r1, r5
 8010dac:	4630      	mov	r0, r6
 8010dae:	f7ff ff76 	bl	8010c9e <SX1276GetLoRaTimeOnAirNumerator>
 8010db2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010db6:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7f8 fb5e 	bl	800947c <SX1276GetLoRaBandwidthInHz>
 8010dc0:	4605      	mov	r5, r0
        break;
 8010dc2:	e7df      	b.n	8010d84 <SX1276GetTimeOnAir+0x24>

08010dc4 <SX1276Write>:
{
 8010dc4:	b500      	push	{lr}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8010dcc:	2201      	movs	r2, #1
 8010dce:	f10d 0107 	add.w	r1, sp, #7
 8010dd2:	f7f8 f921 	bl	8009018 <SX1276WriteBuffer>
}
 8010dd6:	b003      	add	sp, #12
 8010dd8:	f85d fb04 	ldr.w	pc, [sp], #4

08010ddc <SX1276Read>:
{
 8010ddc:	b500      	push	{lr}
 8010dde:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8010de0:	2201      	movs	r2, #1
 8010de2:	f10d 0107 	add.w	r1, sp, #7
 8010de6:	f7f7 ffc7 	bl	8008d78 <SX1276ReadBuffer>
}
 8010dea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010dee:	b003      	add	sp, #12
 8010df0:	f85d fb04 	ldr.w	pc, [sp], #4

08010df4 <SX1276SetOpMode>:
{
 8010df4:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8010df6:	4604      	mov	r4, r0
 8010df8:	b970      	cbnz	r0, 8010e18 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 8010dfa:	2001      	movs	r0, #1
 8010dfc:	f7ff fecd 	bl	8010b9a <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8010e00:	2001      	movs	r0, #1
 8010e02:	f7ff ffeb 	bl	8010ddc <SX1276Read>
 8010e06:	b241      	sxtb	r1, r0
 8010e08:	f021 0107 	bic.w	r1, r1, #7
 8010e0c:	4321      	orrs	r1, r4
 8010e0e:	b2c9      	uxtb	r1, r1
 8010e10:	2001      	movs	r0, #1
 8010e12:	f7ff ffd7 	bl	8010dc4 <SX1276Write>
}
 8010e16:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 8010e18:	2001      	movs	r0, #1
 8010e1a:	f7ff febf 	bl	8010b9c <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8010e1e:	2000      	movs	r0, #0
 8010e20:	f7ff febb 	bl	8010b9a <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8010e24:	4620      	mov	r0, r4
 8010e26:	f7ff feba 	bl	8010b9e <SX1276SetAntSw>
 8010e2a:	e7e9      	b.n	8010e00 <SX1276SetOpMode+0xc>

08010e2c <SX1276IsChannelFree>:
{
 8010e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2e:	4607      	mov	r7, r0
 8010e30:	460c      	mov	r4, r1
 8010e32:	4616      	mov	r6, r2
 8010e34:	461d      	mov	r5, r3
    SX1276SetSleep( );
 8010e36:	f7f8 fe7b 	bl	8009b30 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	f7f9 f90e 	bl	800a05c <SX1276SetModem>
    SX1276SetChannel( freq );
 8010e40:	4638      	mov	r0, r7
 8010e42:	f7f8 fb45 	bl	80094d0 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7f8 faf0 	bl	800942c <GetFskBandwidthRegValue>
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	4601      	mov	r1, r0
 8010e50:	2012      	movs	r0, #18
 8010e52:	f7ff ffb7 	bl	8010dc4 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8010e56:	4621      	mov	r1, r4
 8010e58:	2013      	movs	r0, #19
 8010e5a:	f7ff ffb3 	bl	8010dc4 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8010e5e:	2005      	movs	r0, #5
 8010e60:	f7ff ffc8 	bl	8010df4 <SX1276SetOpMode>
    DelayMs( 1 );
 8010e64:	2001      	movs	r0, #1
 8010e66:	f7ff fefc 	bl	8010c62 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8010e6a:	f7ff fee4 	bl	8010c36 <TimerGetCurrentTime>
 8010e6e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff fee6 	bl	8010c42 <TimerGetElapsedTime>
 8010e76:	42a8      	cmp	r0, r5
 8010e78:	d206      	bcs.n	8010e88 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	f7f9 f8c6 	bl	800a00c <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8010e80:	42b0      	cmp	r0, r6
 8010e82:	ddf5      	ble.n	8010e70 <SX1276IsChannelFree+0x44>
            status = false;
 8010e84:	2400      	movs	r4, #0
 8010e86:	e000      	b.n	8010e8a <SX1276IsChannelFree+0x5e>
    bool status = true;
 8010e88:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8010e8a:	f7f8 fe51 	bl	8009b30 <SX1276SetSleep>
}
 8010e8e:	4620      	mov	r0, r4
 8010e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e92 <SX1276Random>:
{
 8010e92:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8010e94:	2001      	movs	r0, #1
 8010e96:	f7f9 f8e1 	bl	800a05c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8010e9a:	21ff      	movs	r1, #255	; 0xff
 8010e9c:	2011      	movs	r0, #17
 8010e9e:	f7ff ff91 	bl	8010dc4 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8010ea2:	2005      	movs	r0, #5
 8010ea4:	f7ff ffa6 	bl	8010df4 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8010ea8:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 8010eaa:	462c      	mov	r4, r5
 8010eac:	e00b      	b.n	8010ec6 <SX1276Random+0x34>
        DelayMs( 1 );
 8010eae:	2001      	movs	r0, #1
 8010eb0:	f7ff fed7 	bl	8010c62 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8010eb4:	202c      	movs	r0, #44	; 0x2c
 8010eb6:	f7ff ff91 	bl	8010ddc <SX1276Read>
 8010eba:	f000 0001 	and.w	r0, r0, #1
 8010ebe:	40a0      	lsls	r0, r4
 8010ec0:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	b2e4      	uxtb	r4, r4
 8010ec6:	2c1f      	cmp	r4, #31
 8010ec8:	d9f1      	bls.n	8010eae <SX1276Random+0x1c>
    SX1276SetSleep( );
 8010eca:	f7f8 fe31 	bl	8009b30 <SX1276SetSleep>
}
 8010ece:	4628      	mov	r0, r5
 8010ed0:	bd38      	pop	{r3, r4, r5, pc}

08010ed2 <SX1276GetWakeupTime>:
{
 8010ed2:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8010ed4:	f7ff fe5f 	bl	8010b96 <SX1276GetBoardTcxoWakeupTime>
}
 8010ed8:	3001      	adds	r0, #1
 8010eda:	bd08      	pop	{r3, pc}

08010edc <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 8010edc:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010ee2:	6843      	ldr	r3, [r0, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8010eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ef0:	d02f      	beq.n	8010f52 <uart_stm32_config_get+0x76>
 8010ef2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010ef6:	d12e      	bne.n	8010f56 <uart_stm32_config_get+0x7a>
 8010ef8:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8010efa:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010efc:	6843      	ldr	r3, [r0, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8010f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f0a:	d028      	beq.n	8010f5e <uart_stm32_config_get+0x82>
 8010f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010f10:	d027      	beq.n	8010f62 <uart_stm32_config_get+0x86>
 8010f12:	b313      	cbz	r3, 8010f5a <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8010f14:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8010f16:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010f18:	6843      	ldr	r3, [r0, #4]
 8010f1a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8010f1c:	6813      	ldr	r3, [r2, #0]
 8010f1e:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8010f22:	6812      	ldr	r2, [r2, #0]
 8010f24:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 8010f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f2c:	d01d      	beq.n	8010f6a <uart_stm32_config_get+0x8e>
 8010f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010f32:	d11d      	bne.n	8010f70 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 8010f34:	b1ba      	cbz	r2, 8010f66 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 8010f36:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8010f38:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010f3a:	6843      	ldr	r3, [r0, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8010f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010f48:	d019      	beq.n	8010f7e <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 8010f4a:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8010f4c:	71cb      	strb	r3, [r1, #7]
}
 8010f4e:	2000      	movs	r0, #0
 8010f50:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8010f52:	2302      	movs	r3, #2
 8010f54:	e7d1      	b.n	8010efa <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 8010f56:	2300      	movs	r3, #0
 8010f58:	e7cf      	b.n	8010efa <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e7db      	b.n	8010f16 <uart_stm32_config_get+0x3a>
	switch (sb) {
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e7d9      	b.n	8010f16 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8010f62:	2302      	movs	r3, #2
 8010f64:	e7d7      	b.n	8010f16 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 8010f66:	2302      	movs	r3, #2
 8010f68:	e7e6      	b.n	8010f38 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8010f6a:	b922      	cbnz	r2, 8010f76 <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	e7e3      	b.n	8010f38 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8010f70:	b91a      	cbnz	r2, 8010f7a <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 8010f72:	2303      	movs	r3, #3
 8010f74:	e7e0      	b.n	8010f38 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8010f76:	2303      	movs	r3, #3
 8010f78:	e7de      	b.n	8010f38 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	e7dc      	b.n	8010f38 <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e7e4      	b.n	8010f4c <uart_stm32_config_get+0x70>

08010f82 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010f82:	6843      	ldr	r3, [r0, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8010f86:	69da      	ldr	r2, [r3, #28]
 8010f88:	f012 0f08 	tst.w	r2, #8
 8010f8c:	d001      	beq.n	8010f92 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8010f8e:	2208      	movs	r2, #8
 8010f90:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8010f92:	69da      	ldr	r2, [r3, #28]
 8010f94:	f012 0f20 	tst.w	r2, #32
 8010f98:	d003      	beq.n	8010fa2 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8010f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8010f9c:	700b      	strb	r3, [r1, #0]
	return 0;
 8010f9e:	2000      	movs	r0, #0
 8010fa0:	4770      	bx	lr
		return -1;
 8010fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010fa6:	4770      	bx	lr

08010fa8 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010fa8:	6843      	ldr	r3, [r0, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8010fac:	69da      	ldr	r2, [r3, #28]
 8010fae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010fb2:	d0fb      	beq.n	8010fac <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8010fb4:	f04f 0010 	mov.w	r0, #16
 8010fb8:	f3ef 8211 	mrs	r2, BASEPRI
 8010fbc:	f380 8812 	msr	BASEPRI_MAX, r0
 8010fc0:	f3bf 8f6f 	isb	sy
 8010fc4:	69d8      	ldr	r0, [r3, #28]
 8010fc6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010fca:	d104      	bne.n	8010fd6 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8010fcc:	f382 8811 	msr	BASEPRI, r2
 8010fd0:	f3bf 8f6f 	isb	sy
}
 8010fd4:	e7ea      	b.n	8010fac <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8010fd6:	b289      	uxth	r1, r1
 8010fd8:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 8010fda:	f382 8811 	msr	BASEPRI, r2
 8010fde:	f3bf 8f6f 	isb	sy
}
 8010fe2:	4770      	bx	lr

08010fe4 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8010fe4:	6843      	ldr	r3, [r0, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8010fe8:	69d8      	ldr	r0, [r3, #28]
 8010fea:	f010 0008 	ands.w	r0, r0, #8
 8010fee:	d000      	beq.n	8010ff2 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 8010ff0:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8010ff2:	69da      	ldr	r2, [r3, #28]
 8010ff4:	f012 0f01 	tst.w	r2, #1
 8010ff8:	d001      	beq.n	8010ffe <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 8010ffa:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8010ffe:	69da      	ldr	r2, [r3, #28]
 8011000:	f012 0f02 	tst.w	r2, #2
 8011004:	d001      	beq.n	801100a <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 8011006:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 801100a:	69da      	ldr	r2, [r3, #28]
 801100c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8011010:	d001      	beq.n	8011016 <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 8011012:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 8011016:	f010 0f08 	tst.w	r0, #8
 801101a:	d002      	beq.n	8011022 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 801101c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011020:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8011022:	f010 0f01 	tst.w	r0, #1
 8011026:	d001      	beq.n	801102c <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8011028:	2208      	movs	r2, #8
 801102a:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 801102c:	f010 0f02 	tst.w	r0, #2
 8011030:	d001      	beq.n	8011036 <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8011032:	2201      	movs	r2, #1
 8011034:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8011036:	f010 0f04 	tst.w	r0, #4
 801103a:	d001      	beq.n	8011040 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 801103c:	2202      	movs	r2, #2
 801103e:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8011040:	2204      	movs	r2, #4
 8011042:	621a      	str	r2, [r3, #32]
}
 8011044:	4770      	bx	lr

08011046 <entropy_stm32_got_error>:
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 8011046:	6843      	ldr	r3, [r0, #4]
 8011048:	f013 0f02 	tst.w	r3, #2
 801104c:	d105      	bne.n	801105a <entropy_stm32_got_error+0x14>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 801104e:	6843      	ldr	r3, [r0, #4]
 8011050:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011054:	d103      	bne.n	801105e <entropy_stm32_got_error+0x18>
	return 0;
 8011056:	2000      	movs	r0, #0
 8011058:	4770      	bx	lr
		return 1;
 801105a:	2001      	movs	r0, #1
 801105c:	4770      	bx	lr
		return 1;
 801105e:	2001      	movs	r0, #1
}
 8011060:	4770      	bx	lr

08011062 <recover_seed_error>:
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8011062:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8011066:	6043      	str	r3, [r0, #4]
	for (int i = 0; i < 12; ++i) {
 8011068:	2300      	movs	r3, #0
 801106a:	e001      	b.n	8011070 <recover_seed_error+0xe>
  return (uint32_t)(READ_REG(RNGx->DR));
 801106c:	6882      	ldr	r2, [r0, #8]
 801106e:	3301      	adds	r3, #1
 8011070:	2b0b      	cmp	r3, #11
 8011072:	ddfb      	ble.n	801106c <recover_seed_error+0xa>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8011074:	6843      	ldr	r3, [r0, #4]
 8011076:	f013 0f40 	tst.w	r3, #64	; 0x40
 801107a:	d101      	bne.n	8011080 <recover_seed_error+0x1e>
	return 0;
 801107c:	2000      	movs	r0, #0
 801107e:	4770      	bx	lr
		return -EIO;
 8011080:	f06f 0004 	mvn.w	r0, #4
}
 8011084:	4770      	bx	lr

08011086 <rng_pool_put>:
	uint8_t first = rngp->first_read;
 8011086:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
 8011088:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
 801108a:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
 801108e:	1a9a      	subs	r2, r3, r2
 8011090:	ea3c 0202 	bics.w	r2, ip, r2
 8011094:	d008      	beq.n	80110a8 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
 8011096:	18c2      	adds	r2, r0, r3
 8011098:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
 801109a:	3301      	adds	r3, #1
 801109c:	b25b      	sxtb	r3, r3
 801109e:	ea03 030c 	and.w	r3, r3, ip
 80110a2:	7083      	strb	r3, [r0, #2]
	return 0;
 80110a4:	2000      	movs	r0, #0
 80110a6:	4770      	bx	lr
		return -ENOBUFS;
 80110a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 80110ac:	4770      	bx	lr

080110ae <rng_pool_init>:
	rngp->first_alloc = 0U;
 80110ae:	2300      	movs	r3, #0
 80110b0:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
 80110b2:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
 80110b4:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
 80110b6:	3901      	subs	r1, #1
 80110b8:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
 80110ba:	7102      	strb	r2, [r0, #4]
}
 80110bc:	4770      	bx	lr

080110be <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 80110be:	b410      	push	{r4}
	*state = &config->states[0];
 80110c0:	6803      	ldr	r3, [r0, #0]
 80110c2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 80110c4:	e001      	b.n	80110ca <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 80110c6:	3408      	adds	r4, #8
 80110c8:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 80110ca:	6814      	ldr	r4, [r2, #0]
 80110cc:	7903      	ldrb	r3, [r0, #4]
 80110ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80110d2:	3b01      	subs	r3, #1
 80110d4:	f8d0 c000 	ldr.w	ip, [r0]
 80110d8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80110dc:	429c      	cmp	r4, r3
 80110de:	d804      	bhi.n	80110ea <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 80110e0:	7963      	ldrb	r3, [r4, #5]
 80110e2:	428b      	cmp	r3, r1
 80110e4:	d1ef      	bne.n	80110c6 <pinctrl_lookup_state+0x8>
			return 0;
 80110e6:	2000      	movs	r0, #0
 80110e8:	e001      	b.n	80110ee <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 80110ea:	f06f 0001 	mvn.w	r0, #1
}
 80110ee:	bc10      	pop	{r4}
 80110f0:	4770      	bx	lr

080110f2 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 80110f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f4:	4606      	mov	r6, r0
 80110f6:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80110f8:	2400      	movs	r4, #0
	uint32_t func = 0;
 80110fa:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 80110fc:	e012      	b.n	8011124 <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 80110fe:	f002 031f 	and.w	r3, r2, #31
 8011102:	2b10      	cmp	r3, #16
 8011104:	d01b      	beq.n	801113e <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8011106:	0a53      	lsrs	r3, r2, #9
 8011108:	011b      	lsls	r3, r3, #4
 801110a:	b2db      	uxtb	r3, r3
 801110c:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8011110:	f002 021f 	and.w	r2, r2, #31
 8011114:	4629      	mov	r1, r5
 8011116:	4318      	orrs	r0, r3
 8011118:	f7fa f844 	bl	800b1a4 <stm32_pin_configure>
		if (ret < 0) {
 801111c:	2800      	cmp	r0, #0
 801111e:	db11      	blt.n	8011144 <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8011120:	3401      	adds	r4, #1
 8011122:	b2e4      	uxtb	r4, r4
 8011124:	42bc      	cmp	r4, r7
 8011126:	d20c      	bcs.n	8011142 <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 8011128:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 801112c:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8011130:	f012 0f10 	tst.w	r2, #16
 8011134:	d1e3      	bne.n	80110fe <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8011136:	685d      	ldr	r5, [r3, #4]
 8011138:	f045 0520 	orr.w	r5, r5, #32
 801113c:	e7e3      	b.n	8011106 <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 801113e:	2530      	movs	r5, #48	; 0x30
 8011140:	e7e1      	b.n	8011106 <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 8011142:	2000      	movs	r0, #0
}
 8011144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011146 <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8011146:	2300      	movs	r3, #0
 8011148:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 801114a:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 801114c:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 801114e:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8011150:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8011152:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8011154:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8011156:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8011158:	6203      	str	r3, [r0, #32]
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 801115a:	6243      	str	r3, [r0, #36]	; 0x24
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 801115c:	6283      	str	r3, [r0, #40]	; 0x28
}
 801115e:	4770      	bx	lr

08011160 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8011160:	2300      	movs	r3, #0
 8011162:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8011164:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8011166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801116a:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 801116c:	60c3      	str	r3, [r0, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 801116e:	6103      	str	r3, [r0, #16]
}
 8011170:	4770      	bx	lr

08011172 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8011172:	2300      	movs	r3, #0
 8011174:	6003      	str	r3, [r0, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8011176:	6043      	str	r3, [r0, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8011178:	6083      	str	r3, [r0, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 801117a:	60c3      	str	r3, [r0, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 801117c:	6103      	str	r3, [r0, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 801117e:	6143      	str	r3, [r0, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8011180:	6183      	str	r3, [r0, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8011182:	61c3      	str	r3, [r0, #28]
}
 8011184:	4770      	bx	lr

08011186 <LL_TIM_OC_Init>:
{
 8011186:	b508      	push	{r3, lr}
 8011188:	460b      	mov	r3, r1
 801118a:	4611      	mov	r1, r2
  switch (Channel)
 801118c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011190:	d01d      	beq.n	80111ce <LL_TIM_OC_Init+0x48>
 8011192:	d80e      	bhi.n	80111b2 <LL_TIM_OC_Init+0x2c>
 8011194:	2b10      	cmp	r3, #16
 8011196:	d017      	beq.n	80111c8 <LL_TIM_OC_Init+0x42>
 8011198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801119c:	d102      	bne.n	80111a4 <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 801119e:	f7fa f8e3 	bl	800b368 <OC3Config>
      break;
 80111a2:	e005      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d102      	bne.n	80111ae <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80111a8:	f7fa f85c 	bl	800b264 <OC1Config>
      break;
 80111ac:	e000      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 80111ae:	2001      	movs	r0, #1
}
 80111b0:	bd08      	pop	{r3, pc}
  switch (Channel)
 80111b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111b6:	d00d      	beq.n	80111d4 <LL_TIM_OC_Init+0x4e>
 80111b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111bc:	d102      	bne.n	80111c4 <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80111be:	f7fa f97d 	bl	800b4bc <OC6Config>
      break;
 80111c2:	e7f5      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 80111c4:	2001      	movs	r0, #1
 80111c6:	e7f3      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80111c8:	f7fa f88c 	bl	800b2e4 <OC2Config>
      break;
 80111cc:	e7f0      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80111ce:	f7fa f90d 	bl	800b3ec <OC4Config>
      break;
 80111d2:	e7ed      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80111d4:	f7fa f93e 	bl	800b454 <OC5Config>
      break;
 80111d8:	e7ea      	b.n	80111b0 <LL_TIM_OC_Init+0x2a>

080111da <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80111da:	680a      	ldr	r2, [r1, #0]
 80111dc:	0912      	lsrs	r2, r2, #4
 80111de:	3201      	adds	r2, #1
 80111e0:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80111e4:	684b      	ldr	r3, [r1, #4]
 80111e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ea:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80111ee:	688b      	ldr	r3, [r1, #8]
 80111f0:	0e5b      	lsrs	r3, r3, #25
 80111f2:	3301      	adds	r3, #1
 80111f4:	005b      	lsls	r3, r3, #1
}
 80111f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80111fa:	4770      	bx	lr

080111fc <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80111fc:	6341      	str	r1, [r0, #52]	; 0x34
}
 80111fe:	4770      	bx	lr

08011200 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8011200:	6381      	str	r1, [r0, #56]	; 0x38
}
 8011202:	4770      	bx	lr

08011204 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8011204:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8011206:	4770      	bx	lr

08011208 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8011208:	6401      	str	r1, [r0, #64]	; 0x40
}
 801120a:	4770      	bx	lr

0801120c <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 801120c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801120e:	6581      	str	r1, [r0, #88]	; 0x58
}
 8011210:	4770      	bx	lr

08011212 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 8011212:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8011214:	4770      	bx	lr

08011216 <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8011216:	f06f 0302 	mvn.w	r3, #2
 801121a:	6103      	str	r3, [r0, #16]
}
 801121c:	4770      	bx	lr

0801121e <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 801121e:	6900      	ldr	r0, [r0, #16]
 8011220:	f010 0002 	ands.w	r0, r0, #2
 8011224:	d000      	beq.n	8011228 <LL_TIM_IsActiveFlag_CC1+0xa>
 8011226:	2001      	movs	r0, #1
}
 8011228:	4770      	bx	lr

0801122a <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801122a:	f06f 0304 	mvn.w	r3, #4
 801122e:	6103      	str	r3, [r0, #16]
}
 8011230:	4770      	bx	lr

08011232 <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8011232:	6900      	ldr	r0, [r0, #16]
 8011234:	f010 0004 	ands.w	r0, r0, #4
 8011238:	d000      	beq.n	801123c <LL_TIM_IsActiveFlag_CC2+0xa>
 801123a:	2001      	movs	r0, #1
}
 801123c:	4770      	bx	lr

0801123e <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801123e:	f06f 0308 	mvn.w	r3, #8
 8011242:	6103      	str	r3, [r0, #16]
}
 8011244:	4770      	bx	lr

08011246 <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8011246:	6900      	ldr	r0, [r0, #16]
 8011248:	f010 0008 	ands.w	r0, r0, #8
 801124c:	d000      	beq.n	8011250 <LL_TIM_IsActiveFlag_CC3+0xa>
 801124e:	2001      	movs	r0, #1
}
 8011250:	4770      	bx	lr

08011252 <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8011252:	f06f 0310 	mvn.w	r3, #16
 8011256:	6103      	str	r3, [r0, #16]
}
 8011258:	4770      	bx	lr

0801125a <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801125a:	6900      	ldr	r0, [r0, #16]
 801125c:	f010 0010 	ands.w	r0, r0, #16
 8011260:	d000      	beq.n	8011264 <LL_TIM_IsActiveFlag_CC4+0xa>
 8011262:	2001      	movs	r0, #1
}
 8011264:	4770      	bx	lr

08011266 <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 8011266:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 801126a:	6103      	str	r3, [r0, #16]
}
 801126c:	4770      	bx	lr

0801126e <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 801126e:	6900      	ldr	r0, [r0, #16]
 8011270:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8011274:	d000      	beq.n	8011278 <LL_TIM_IsActiveFlag_CC5+0xa>
 8011276:	2001      	movs	r0, #1
}
 8011278:	4770      	bx	lr

0801127a <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 801127a:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 801127e:	6103      	str	r3, [r0, #16]
}
 8011280:	4770      	bx	lr

08011282 <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 8011282:	6943      	ldr	r3, [r0, #20]
 8011284:	f043 0302 	orr.w	r3, r3, #2
 8011288:	6143      	str	r3, [r0, #20]
}
 801128a:	4770      	bx	lr

0801128c <get_polarity>:
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 801128c:	f010 0f01 	tst.w	r0, #1
 8011290:	d001      	beq.n	8011296 <get_polarity+0xa>
    return LL_TIM_OCPOLARITY_LOW;
 8011292:	2002      	movs	r0, #2
 8011294:	4770      	bx	lr
        return LL_TIM_OCPOLARITY_HIGH;
 8011296:	2000      	movs	r0, #0
}
 8011298:	4770      	bx	lr

0801129a <z_log_msg2_runtime_create>:
{
 801129a:	b510      	push	{r4, lr}
 801129c:	b086      	sub	sp, #24
	va_start(ap, fmt);
 801129e:	ac0a      	add	r4, sp, #40	; 0x28
 80112a0:	9405      	str	r4, [sp, #20]
 80112a2:	9402      	str	r4, [sp, #8]
 80112a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80112a6:	9401      	str	r4, [sp, #4]
 80112a8:	9c08      	ldr	r4, [sp, #32]
 80112aa:	9400      	str	r4, [sp, #0]
 80112ac:	f7fe fbe9 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 80112b0:	b006      	add	sp, #24
 80112b2:	bd10      	pop	{r4, pc}

080112b4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 80112b4:	b148      	cbz	r0, 80112ca <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 80112b6:	68c3      	ldr	r3, [r0, #12]
 80112b8:	8818      	ldrh	r0, [r3, #0]
 80112ba:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80112be:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80112c2:	bf14      	ite	ne
 80112c4:	2000      	movne	r0, #0
 80112c6:	2001      	moveq	r0, #1
 80112c8:	4770      	bx	lr
		return false;
 80112ca:	2000      	movs	r0, #0
}
 80112cc:	4770      	bx	lr

080112ce <z_log_msg2_runtime_create>:
{
 80112ce:	b510      	push	{r4, lr}
 80112d0:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80112d2:	ac0a      	add	r4, sp, #40	; 0x28
 80112d4:	9405      	str	r4, [sp, #20]
 80112d6:	9402      	str	r4, [sp, #8]
 80112d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80112da:	9401      	str	r4, [sp, #4]
 80112dc:	9c08      	ldr	r4, [sp, #32]
 80112de:	9400      	str	r4, [sp, #0]
 80112e0:	f7fe fbcf 	bl	800fa82 <z_impl_z_log_msg2_runtime_vcreate>
}
 80112e4:	b006      	add	sp, #24
 80112e6:	bd10      	pop	{r4, pc}

080112e8 <arch_system_halt>:
	__asm__ volatile(
 80112e8:	f04f 0210 	mov.w	r2, #16
 80112ec:	f3ef 8311 	mrs	r3, BASEPRI
 80112f0:	f382 8812 	msr	BASEPRI_MAX, r2
 80112f4:	f3bf 8f6f 	isb	sy
	for (;;) {
 80112f8:	e7fe      	b.n	80112f8 <arch_system_halt+0x10>

080112fa <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 80112fa:	6902      	ldr	r2, [r0, #16]
 80112fc:	6943      	ldr	r3, [r0, #20]
 80112fe:	431a      	orrs	r2, r3
 8011300:	f012 0203 	ands.w	r2, r2, #3
 8011304:	d10d      	bne.n	8011322 <create_free_list+0x28>
	slab->free_list = NULL;
 8011306:	2100      	movs	r1, #0
 8011308:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 801130a:	e005      	b.n	8011318 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 801130c:	6981      	ldr	r1, [r0, #24]
 801130e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 8011310:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 8011312:	6901      	ldr	r1, [r0, #16]
 8011314:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 8011316:	3201      	adds	r2, #1
 8011318:	68c1      	ldr	r1, [r0, #12]
 801131a:	4291      	cmp	r1, r2
 801131c:	d8f6      	bhi.n	801130c <create_free_list+0x12>
	return 0;
 801131e:	2000      	movs	r0, #0
 8011320:	4770      	bx	lr
		return -EINVAL;
 8011322:	f06f 0015 	mvn.w	r0, #21
}
 8011326:	4770      	bx	lr

08011328 <setup_thread_stack>:
{
 8011328:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 801132a:	3207      	adds	r2, #7
 801132c:	f022 0207 	bic.w	r2, r2, #7
 8011330:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8011334:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 8011338:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 801133a:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 801133c:	2200      	movs	r2, #0
 801133e:	6702      	str	r2, [r0, #112]	; 0x70
}
 8011340:	18c8      	adds	r0, r1, r3
 8011342:	bc10      	pop	{r4}
 8011344:	4770      	bx	lr

08011346 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011346:	f3ef 8005 	mrs	r0, IPSR
}
 801134a:	3800      	subs	r0, #0
 801134c:	bf18      	it	ne
 801134e:	2001      	movne	r0, #1
 8011350:	4770      	bx	lr

08011352 <z_impl_k_thread_name_set>:
}
 8011352:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8011356:	4770      	bx	lr

08011358 <k_thread_name_get>:
}
 8011358:	2000      	movs	r0, #0
 801135a:	4770      	bx	lr

0801135c <z_impl_k_thread_start>:
{
 801135c:	b508      	push	{r3, lr}
	z_sched_start(thread);
 801135e:	f7fb fbe1 	bl	800cb24 <z_sched_start>
}
 8011362:	bd08      	pop	{r3, pc}

08011364 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 8011364:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8011366:	2400      	movs	r4, #0
 8011368:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 801136a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 801136c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 801136e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 8011370:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 8011372:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 8011374:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8011376:	bc10      	pop	{r4}
 8011378:	4770      	bx	lr

0801137a <z_impl_k_thread_create>:
{
 801137a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801137c:	b087      	sub	sp, #28
 801137e:	4604      	mov	r4, r0
 8011380:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011382:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8011384:	2700      	movs	r7, #0
 8011386:	9705      	str	r7, [sp, #20]
 8011388:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801138a:	9704      	str	r7, [sp, #16]
 801138c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801138e:	9703      	str	r7, [sp, #12]
 8011390:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011392:	9702      	str	r7, [sp, #8]
 8011394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011396:	9701      	str	r7, [sp, #4]
 8011398:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801139a:	9700      	str	r7, [sp, #0]
 801139c:	f7fa fe38 	bl	800c010 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 80113a0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80113a4:	bf08      	it	eq
 80113a6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80113aa:	d102      	bne.n	80113b2 <z_impl_k_thread_create+0x38>
}
 80113ac:	4620      	mov	r0, r4
 80113ae:	b007      	add	sp, #28
 80113b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 80113b2:	4632      	mov	r2, r6
 80113b4:	462b      	mov	r3, r5
 80113b6:	4620      	mov	r0, r4
 80113b8:	f7fa fe1c 	bl	800bff4 <schedule_new_thread>
 80113bc:	e7f6      	b.n	80113ac <z_impl_k_thread_create+0x32>

080113be <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 80113be:	b508      	push	{r3, lr}
 80113c0:	f04f 0210 	mov.w	r2, #16
 80113c4:	f3ef 8311 	mrs	r3, BASEPRI
 80113c8:	f382 8812 	msr	BASEPRI_MAX, r2
 80113cc:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 80113d0:	f7f3 fabc 	bl	800494c <arch_cpu_idle>
 80113d4:	e7f4      	b.n	80113c0 <idle+0x2>

080113d6 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 80113d6:	4288      	cmp	r0, r1
 80113d8:	da00      	bge.n	80113dc <new_prio_for_inheritance+0x6>
 80113da:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 80113dc:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 80113e0:	db01      	blt.n	80113e6 <new_prio_for_inheritance+0x10>
 80113e2:	4608      	mov	r0, r1
 80113e4:	4770      	bx	lr
 80113e6:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 80113ea:	4770      	bx	lr

080113ec <adjust_owner_prio>:
{
 80113ec:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 80113ee:	6880      	ldr	r0, [r0, #8]
 80113f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80113f4:	428b      	cmp	r3, r1
 80113f6:	d101      	bne.n	80113fc <adjust_owner_prio+0x10>
	return false;
 80113f8:	2000      	movs	r0, #0
}
 80113fa:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 80113fc:	f7fb fbe0 	bl	800cbc0 <z_set_prio>
 8011400:	e7fb      	b.n	80113fa <adjust_owner_prio+0xe>

08011402 <z_impl_k_mutex_init>:
{
 8011402:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8011404:	2000      	movs	r0, #0
 8011406:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 8011408:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 801140a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 801140c:	605b      	str	r3, [r3, #4]
}
 801140e:	4770      	bx	lr

08011410 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8011410:	b15a      	cbz	r2, 801142a <z_impl_k_sem_init+0x1a>
 8011412:	428a      	cmp	r2, r1
 8011414:	d30c      	bcc.n	8011430 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 8011416:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8011418:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 801141a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 801141c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 801141e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8011422:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8011424:	6143      	str	r3, [r0, #20]
	return 0;
 8011426:	2000      	movs	r0, #0
 8011428:	4770      	bx	lr
		return -EINVAL;
 801142a:	f06f 0015 	mvn.w	r0, #21
 801142e:	4770      	bx	lr
 8011430:	f06f 0015 	mvn.w	r0, #21
}
 8011434:	4770      	bx	lr

08011436 <work_timeout>:
{
 8011436:	b510      	push	{r4, lr}
 8011438:	b082      	sub	sp, #8
 801143a:	4603      	mov	r3, r0
 801143c:	f04f 0210 	mov.w	r2, #16
 8011440:	f3ef 8411 	mrs	r4, BASEPRI
 8011444:	f382 8812 	msr	BASEPRI_MAX, r2
 8011448:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 801144c:	2200      	movs	r2, #0
 801144e:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 8011450:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 8011454:	f022 0108 	bic.w	r1, r2, #8
 8011458:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 801145c:	f012 0f08 	tst.w	r2, #8
 8011460:	d105      	bne.n	801146e <work_timeout+0x38>
	__asm__ volatile(
 8011462:	f384 8811 	msr	BASEPRI, r4
 8011466:	f3bf 8f6f 	isb	sy
}
 801146a:	b002      	add	sp, #8
 801146c:	bd10      	pop	{r4, pc}
 801146e:	3810      	subs	r0, #16
		queue = dw->queue;
 8011470:	699b      	ldr	r3, [r3, #24]
 8011472:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 8011474:	a901      	add	r1, sp, #4
 8011476:	f7fb f839 	bl	800c4ec <submit_to_queue_locked>
 801147a:	e7f2      	b.n	8011462 <work_timeout+0x2c>

0801147c <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801147c:	2300      	movs	r3, #0
 801147e:	6003      	str	r3, [r0, #0]
 8011480:	6043      	str	r3, [r0, #4]
 8011482:	6083      	str	r3, [r0, #8]
 8011484:	60c3      	str	r3, [r0, #12]
 8011486:	6041      	str	r1, [r0, #4]
}
 8011488:	4770      	bx	lr

0801148a <k_work_submit_to_queue>:
{
 801148a:	b530      	push	{r4, r5, lr}
 801148c:	b083      	sub	sp, #12
 801148e:	9001      	str	r0, [sp, #4]
 8011490:	4608      	mov	r0, r1
	__asm__ volatile(
 8011492:	f04f 0310 	mov.w	r3, #16
 8011496:	f3ef 8511 	mrs	r5, BASEPRI
 801149a:	f383 8812 	msr	BASEPRI_MAX, r3
 801149e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 80114a2:	a901      	add	r1, sp, #4
 80114a4:	f7fb f822 	bl	800c4ec <submit_to_queue_locked>
 80114a8:	4604      	mov	r4, r0
	__asm__ volatile(
 80114aa:	f385 8811 	msr	BASEPRI, r5
 80114ae:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 80114b2:	2800      	cmp	r0, #0
 80114b4:	dc02      	bgt.n	80114bc <k_work_submit_to_queue+0x32>
}
 80114b6:	4620      	mov	r0, r4
 80114b8:	b003      	add	sp, #12
 80114ba:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 80114bc:	f7fb fd4e 	bl	800cf5c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 80114c0:	2800      	cmp	r0, #0
 80114c2:	d0f8      	beq.n	80114b6 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 80114c4:	f7fb fc9c 	bl	800ce00 <z_impl_k_yield>
	return ret;
 80114c8:	e7f5      	b.n	80114b6 <k_work_submit_to_queue+0x2c>

080114ca <k_work_init_delayable>:
{
 80114ca:	b538      	push	{r3, r4, r5, lr}
 80114cc:	4604      	mov	r4, r0
 80114ce:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 80114d0:	2230      	movs	r2, #48	; 0x30
 80114d2:	2100      	movs	r1, #0
 80114d4:	f000 fb63 	bl	8011b9e <memset>
 80114d8:	6065      	str	r5, [r4, #4]
 80114da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114de:	60e3      	str	r3, [r4, #12]
}
 80114e0:	bd38      	pop	{r3, r4, r5, pc}

080114e2 <k_work_schedule_for_queue>:
{
 80114e2:	b510      	push	{r4, lr}
 80114e4:	b082      	sub	sp, #8
 80114e6:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 80114e8:	f04f 0010 	mov.w	r0, #16
 80114ec:	f3ef 8411 	mrs	r4, BASEPRI
 80114f0:	f380 8812 	msr	BASEPRI_MAX, r0
 80114f4:	f3bf 8f6f 	isb	sy
	return *flagp;
 80114f8:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 80114fa:	f010 0f0e 	tst.w	r0, #14
 80114fe:	d006      	beq.n	801150e <k_work_schedule_for_queue+0x2c>
	int ret = 0;
 8011500:	2000      	movs	r0, #0
	__asm__ volatile(
 8011502:	f384 8811 	msr	BASEPRI, r4
 8011506:	f3bf 8f6f 	isb	sy
}
 801150a:	b002      	add	sp, #8
 801150c:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
 801150e:	a801      	add	r0, sp, #4
 8011510:	f7fb f858 	bl	800c5c4 <schedule_for_queue_locked>
 8011514:	e7f5      	b.n	8011502 <k_work_schedule_for_queue+0x20>

08011516 <k_work_reschedule_for_queue>:
{
 8011516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011518:	b083      	sub	sp, #12
 801151a:	9001      	str	r0, [sp, #4]
 801151c:	460c      	mov	r4, r1
 801151e:	4616      	mov	r6, r2
 8011520:	461d      	mov	r5, r3
	__asm__ volatile(
 8011522:	f04f 0310 	mov.w	r3, #16
 8011526:	f3ef 8711 	mrs	r7, BASEPRI
 801152a:	f383 8812 	msr	BASEPRI_MAX, r3
 801152e:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 8011532:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 8011534:	f023 0208 	bic.w	r2, r3, #8
 8011538:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801153a:	f013 0f08 	tst.w	r3, #8
 801153e:	d10b      	bne.n	8011558 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 8011540:	4632      	mov	r2, r6
 8011542:	462b      	mov	r3, r5
 8011544:	4621      	mov	r1, r4
 8011546:	a801      	add	r0, sp, #4
 8011548:	f7fb f83c 	bl	800c5c4 <schedule_for_queue_locked>
	__asm__ volatile(
 801154c:	f387 8811 	msr	BASEPRI, r7
 8011550:	f3bf 8f6f 	isb	sy
}
 8011554:	b003      	add	sp, #12
 8011556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 8011558:	f101 0010 	add.w	r0, r1, #16
 801155c:	f000 f9f4 	bl	8011948 <z_abort_timeout>
		ret = true;
 8011560:	e7ee      	b.n	8011540 <k_work_reschedule_for_queue+0x2a>

08011562 <thread_active_elsewhere>:
}
 8011562:	2000      	movs	r0, #0
 8011564:	4770      	bx	lr

08011566 <pended_on_thread>:
}
 8011566:	6880      	ldr	r0, [r0, #8]
 8011568:	4770      	bx	lr

0801156a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 801156a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 801156e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8011572:	4283      	cmp	r3, r0
 8011574:	d001      	beq.n	801157a <z_sched_prio_cmp+0x10>
		return b2 - b1;
 8011576:	1ac0      	subs	r0, r0, r3
 8011578:	4770      	bx	lr
	return 0;
 801157a:	2000      	movs	r0, #0
}
 801157c:	4770      	bx	lr

0801157e <z_unpend_thread_no_timeout>:
{
 801157e:	b538      	push	{r3, r4, r5, lr}
 8011580:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8011582:	2300      	movs	r3, #0
	__asm__ volatile(
 8011584:	f04f 0210 	mov.w	r2, #16
 8011588:	f3ef 8511 	mrs	r5, BASEPRI
 801158c:	f382 8812 	msr	BASEPRI_MAX, r2
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	e010      	b.n	80115b8 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8011596:	4620      	mov	r0, r4
 8011598:	f7ff ffe5 	bl	8011566 <pended_on_thread>
 801159c:	4621      	mov	r1, r4
 801159e:	f000 f823 	bl	80115e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80115a2:	7b63      	ldrb	r3, [r4, #13]
 80115a4:	f023 0302 	bic.w	r3, r3, #2
 80115a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80115aa:	2300      	movs	r3, #0
 80115ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80115ae:	f385 8811 	msr	BASEPRI, r5
 80115b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80115b6:	2301      	movs	r3, #1
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d0ec      	beq.n	8011596 <z_unpend_thread_no_timeout+0x18>
}
 80115bc:	bd38      	pop	{r3, r4, r5, pc}

080115be <z_reschedule_irqlock>:
{
 80115be:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80115c0:	4603      	mov	r3, r0
 80115c2:	b920      	cbnz	r0, 80115ce <z_reschedule_irqlock+0x10>
 80115c4:	f3ef 8205 	mrs	r2, IPSR
 80115c8:	b942      	cbnz	r2, 80115dc <z_reschedule_irqlock+0x1e>
 80115ca:	2201      	movs	r2, #1
 80115cc:	e000      	b.n	80115d0 <z_reschedule_irqlock+0x12>
 80115ce:	2200      	movs	r2, #0
	if (resched(key)) {
 80115d0:	b932      	cbnz	r2, 80115e0 <z_reschedule_irqlock+0x22>
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
}
 80115da:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80115dc:	2200      	movs	r2, #0
 80115de:	e7f7      	b.n	80115d0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7f3 fb1d 	bl	8004c20 <arch_swap>
	return ret;
 80115e6:	e7f8      	b.n	80115da <z_reschedule_irqlock+0x1c>

080115e8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 80115e8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 80115ea:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 80115ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80115ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 80115f4:	604b      	str	r3, [r1, #4]
}
 80115f6:	4770      	bx	lr

080115f8 <z_unpend_thread>:
{
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 80115fc:	2300      	movs	r3, #0
	__asm__ volatile(
 80115fe:	f04f 0210 	mov.w	r2, #16
 8011602:	f3ef 8511 	mrs	r5, BASEPRI
 8011606:	f382 8812 	msr	BASEPRI_MAX, r2
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	e010      	b.n	8011632 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff ffa8 	bl	8011566 <pended_on_thread>
 8011616:	4621      	mov	r1, r4
 8011618:	f7ff ffe6 	bl	80115e8 <z_priq_dumb_remove>
 801161c:	7b63      	ldrb	r3, [r4, #13]
 801161e:	f023 0302 	bic.w	r3, r3, #2
 8011622:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8011624:	2300      	movs	r3, #0
 8011626:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8011628:	f385 8811 	msr	BASEPRI, r5
 801162c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8011630:	2301      	movs	r3, #1
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0ec      	beq.n	8011610 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 8011636:	f104 0018 	add.w	r0, r4, #24
 801163a:	f000 f985 	bl	8011948 <z_abort_timeout>
}
 801163e:	bd38      	pop	{r3, r4, r5, pc}

08011640 <z_priq_dumb_best>:
{
 8011640:	4603      	mov	r3, r0
	return list->head == list;
 8011642:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8011644:	4283      	cmp	r3, r0
 8011646:	d000      	beq.n	801164a <z_priq_dumb_best+0xa>
}
 8011648:	4770      	bx	lr
	struct k_thread *thread = NULL;
 801164a:	2000      	movs	r0, #0
	return thread;
 801164c:	e7fc      	b.n	8011648 <z_priq_dumb_best+0x8>

0801164e <z_ready_thread>:
{
 801164e:	b538      	push	{r3, r4, r5, lr}
 8011650:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8011652:	2300      	movs	r3, #0
	__asm__ volatile(
 8011654:	f04f 0210 	mov.w	r2, #16
 8011658:	f3ef 8511 	mrs	r5, BASEPRI
 801165c:	f382 8812 	msr	BASEPRI_MAX, r2
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	e004      	b.n	8011670 <z_ready_thread+0x22>
	__asm__ volatile(
 8011666:	f385 8811 	msr	BASEPRI, r5
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	2301      	movs	r3, #1
 8011670:	b943      	cbnz	r3, 8011684 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 8011672:	4620      	mov	r0, r4
 8011674:	f7ff ff75 	bl	8011562 <thread_active_elsewhere>
 8011678:	2800      	cmp	r0, #0
 801167a:	d1f4      	bne.n	8011666 <z_ready_thread+0x18>
			ready_thread(thread);
 801167c:	4620      	mov	r0, r4
 801167e:	f7fb fa11 	bl	800caa4 <ready_thread>
 8011682:	e7f0      	b.n	8011666 <z_ready_thread+0x18>
}
 8011684:	bd38      	pop	{r3, r4, r5, pc}

08011686 <z_thread_timeout>:
{
 8011686:	b570      	push	{r4, r5, r6, lr}
 8011688:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 801168a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 801168e:	2300      	movs	r3, #0
	__asm__ volatile(
 8011690:	f04f 0210 	mov.w	r2, #16
 8011694:	f3ef 8611 	mrs	r6, BASEPRI
 8011698:	f382 8812 	msr	BASEPRI_MAX, r2
 801169c:	f3bf 8f6f 	isb	sy
 80116a0:	e011      	b.n	80116c6 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80116a2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80116a6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80116aa:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80116ae:	f023 0310 	bic.w	r3, r3, #16
 80116b2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 80116b6:	4628      	mov	r0, r5
 80116b8:	f7fb f9f4 	bl	800caa4 <ready_thread>
	__asm__ volatile(
 80116bc:	f386 8811 	msr	BASEPRI, r6
 80116c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80116c4:	2301      	movs	r3, #1
 80116c6:	b9ab      	cbnz	r3, 80116f4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 80116c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 80116cc:	f013 0f28 	tst.w	r3, #40	; 0x28
 80116d0:	d1f4      	bne.n	80116bc <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 80116d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d0e3      	beq.n	80116a2 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80116da:	4628      	mov	r0, r5
 80116dc:	f7ff ff43 	bl	8011566 <pended_on_thread>
 80116e0:	4629      	mov	r1, r5
 80116e2:	f7ff ff81 	bl	80115e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80116e6:	7b6b      	ldrb	r3, [r5, #13]
 80116e8:	f023 0302 	bic.w	r3, r3, #2
 80116ec:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 80116ee:	2300      	movs	r3, #0
 80116f0:	60ab      	str	r3, [r5, #8]
}
 80116f2:	e7d6      	b.n	80116a2 <z_thread_timeout+0x1c>
}
 80116f4:	bd70      	pop	{r4, r5, r6, pc}

080116f6 <add_to_waitq_locked>:
{
 80116f6:	b570      	push	{r4, r5, r6, lr}
 80116f8:	4605      	mov	r5, r0
 80116fa:	460e      	mov	r6, r1
	unready_thread(thread);
 80116fc:	f7fb fa30 	bl	800cb60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8011700:	7b6b      	ldrb	r3, [r5, #13]
 8011702:	f043 0302 	orr.w	r3, r3, #2
 8011706:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 8011708:	b1b6      	cbz	r6, 8011738 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 801170a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 801170c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801170e:	42a6      	cmp	r6, r4
 8011710:	d019      	beq.n	8011746 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8011712:	b164      	cbz	r4, 801172e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8011714:	4621      	mov	r1, r4
 8011716:	4628      	mov	r0, r5
 8011718:	f7ff ff27 	bl	801156a <z_sched_prio_cmp>
 801171c:	2800      	cmp	r0, #0
 801171e:	dc0c      	bgt.n	801173a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8011720:	b12c      	cbz	r4, 801172e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 8011722:	6873      	ldr	r3, [r6, #4]
 8011724:	429c      	cmp	r4, r3
 8011726:	d002      	beq.n	801172e <add_to_waitq_locked+0x38>
 8011728:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801172a:	2c00      	cmp	r4, #0
 801172c:	d1f1      	bne.n	8011712 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 801172e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 8011730:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 8011732:	606b      	str	r3, [r5, #4]
	tail->next = node;
 8011734:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8011736:	6075      	str	r5, [r6, #4]
}
 8011738:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 801173a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 801173c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 801173e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8011740:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8011742:	6065      	str	r5, [r4, #4]
}
 8011744:	e7f8      	b.n	8011738 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8011746:	2400      	movs	r4, #0
 8011748:	e7e3      	b.n	8011712 <add_to_waitq_locked+0x1c>

0801174a <pend>:
{
 801174a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801174e:	4605      	mov	r5, r0
 8011750:	460e      	mov	r6, r1
 8011752:	4691      	mov	r9, r2
 8011754:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8011756:	2400      	movs	r4, #0
	__asm__ volatile(
 8011758:	f04f 0310 	mov.w	r3, #16
 801175c:	f3ef 8711 	mrs	r7, BASEPRI
 8011760:	f383 8812 	msr	BASEPRI_MAX, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	e008      	b.n	801177c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 801176a:	4631      	mov	r1, r6
 801176c:	4628      	mov	r0, r5
 801176e:	f7ff ffc2 	bl	80116f6 <add_to_waitq_locked>
	__asm__ volatile(
 8011772:	f387 8811 	msr	BASEPRI, r7
 8011776:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801177a:	2401      	movs	r4, #1
 801177c:	2c00      	cmp	r4, #0
 801177e:	d0f4      	beq.n	801176a <pend+0x20>
	add_thread_timeout(thread, timeout);
 8011780:	464a      	mov	r2, r9
 8011782:	4643      	mov	r3, r8
 8011784:	4628      	mov	r0, r5
 8011786:	f7fb f843 	bl	800c810 <add_thread_timeout>
}
 801178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801178e <z_unpend1_no_timeout>:
{
 801178e:	b570      	push	{r4, r5, r6, lr}
 8011790:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8011792:	2300      	movs	r3, #0
	__asm__ volatile(
 8011794:	f04f 0210 	mov.w	r2, #16
 8011798:	f3ef 8611 	mrs	r6, BASEPRI
 801179c:	f382 8812 	msr	BASEPRI_MAX, r2
 80117a0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 80117a4:	461c      	mov	r4, r3
 80117a6:	e004      	b.n	80117b2 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 80117a8:	f386 8811 	msr	BASEPRI, r6
 80117ac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80117b0:	2301      	movs	r3, #1
 80117b2:	b98b      	cbnz	r3, 80117d8 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 80117b4:	4628      	mov	r0, r5
 80117b6:	f7ff ff43 	bl	8011640 <z_priq_dumb_best>
		if (thread != NULL) {
 80117ba:	4604      	mov	r4, r0
 80117bc:	2800      	cmp	r0, #0
 80117be:	d0f3      	beq.n	80117a8 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80117c0:	f7ff fed1 	bl	8011566 <pended_on_thread>
 80117c4:	4621      	mov	r1, r4
 80117c6:	f7ff ff0f 	bl	80115e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80117ca:	7b63      	ldrb	r3, [r4, #13]
 80117cc:	f023 0302 	bic.w	r3, r3, #2
 80117d0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80117d2:	2300      	movs	r3, #0
 80117d4:	60a3      	str	r3, [r4, #8]
}
 80117d6:	e7e7      	b.n	80117a8 <z_unpend1_no_timeout+0x1a>
}
 80117d8:	4620      	mov	r0, r4
 80117da:	bd70      	pop	{r4, r5, r6, pc}

080117dc <z_unpend_first_thread>:
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 80117e0:	2300      	movs	r3, #0
	__asm__ volatile(
 80117e2:	f04f 0210 	mov.w	r2, #16
 80117e6:	f3ef 8611 	mrs	r6, BASEPRI
 80117ea:	f382 8812 	msr	BASEPRI_MAX, r2
 80117ee:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 80117f2:	461c      	mov	r4, r3
 80117f4:	e004      	b.n	8011800 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 80117f6:	f386 8811 	msr	BASEPRI, r6
 80117fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80117fe:	2301      	movs	r3, #1
 8011800:	b9ab      	cbnz	r3, 801182e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 8011802:	4628      	mov	r0, r5
 8011804:	f7ff ff1c 	bl	8011640 <z_priq_dumb_best>
		if (thread != NULL) {
 8011808:	4604      	mov	r4, r0
 801180a:	2800      	cmp	r0, #0
 801180c:	d0f3      	beq.n	80117f6 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801180e:	f7ff feaa 	bl	8011566 <pended_on_thread>
 8011812:	4621      	mov	r1, r4
 8011814:	f7ff fee8 	bl	80115e8 <z_priq_dumb_remove>
 8011818:	7b63      	ldrb	r3, [r4, #13]
 801181a:	f023 0302 	bic.w	r3, r3, #2
 801181e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8011820:	2300      	movs	r3, #0
 8011822:	60a3      	str	r3, [r4, #8]
 8011824:	f104 0018 	add.w	r0, r4, #24
 8011828:	f000 f88e 	bl	8011948 <z_abort_timeout>
 801182c:	e7e3      	b.n	80117f6 <z_unpend_first_thread+0x1a>
}
 801182e:	4620      	mov	r0, r4
 8011830:	bd70      	pop	{r4, r5, r6, pc}

08011832 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 8011832:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 8011834:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 8011836:	6083      	str	r3, [r0, #8]
}
 8011838:	4770      	bx	lr

0801183a <z_impl_k_usleep>:
{
 801183a:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
 801183c:	17c1      	asrs	r1, r0, #31
		t += off;
 801183e:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 8011840:	f04f 0264 	mov.w	r2, #100	; 0x64
 8011844:	f04f 0300 	mov.w	r3, #0
 8011848:	f141 0100 	adc.w	r1, r1, #0
 801184c:	f7ef f8c6 	bl	80009dc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 8011850:	17c1      	asrs	r1, r0, #31
 8011852:	f7fb fb19 	bl	800ce88 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 8011856:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801185a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
 801185e:	1818      	adds	r0, r3, r0
 8011860:	bd08      	pop	{r3, pc}

08011862 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 8011862:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 8011864:	f013 0f02 	tst.w	r3, #2
 8011868:	d000      	beq.n	801186c <z_impl_k_wakeup+0xa>
 801186a:	4770      	bx	lr
{
 801186c:	b510      	push	{r4, lr}
 801186e:	4604      	mov	r4, r0
 8011870:	3018      	adds	r0, #24
 8011872:	f000 f869 	bl	8011948 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 8011876:	2800      	cmp	r0, #0
 8011878:	da02      	bge.n	8011880 <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 801187a:	7b63      	ldrb	r3, [r4, #13]
 801187c:	2b10      	cmp	r3, #16
 801187e:	d109      	bne.n	8011894 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8011880:	7b63      	ldrb	r3, [r4, #13]
 8011882:	f023 0310 	bic.w	r3, r3, #16
 8011886:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 8011888:	4620      	mov	r0, r4
 801188a:	f7ff fee0 	bl	801164e <z_ready_thread>
 801188e:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 8011892:	b103      	cbz	r3, 8011896 <z_impl_k_wakeup+0x34>
}
 8011894:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8011896:	f04f 0310 	mov.w	r3, #16
 801189a:	f3ef 8011 	mrs	r0, BASEPRI
 801189e:	f383 8812 	msr	BASEPRI_MAX, r3
 80118a2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80118a6:	f7ff fe8a 	bl	80115be <z_reschedule_irqlock>
}
 80118aa:	e7f3      	b.n	8011894 <z_impl_k_wakeup+0x32>

080118ac <z_sched_wake>:
{
 80118ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b0:	4605      	mov	r5, r0
 80118b2:	4688      	mov	r8, r1
 80118b4:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 80118b6:	2300      	movs	r3, #0
 80118b8:	f04f 0210 	mov.w	r2, #16
 80118bc:	f3ef 8611 	mrs	r6, BASEPRI
 80118c0:	f382 8812 	msr	BASEPRI_MAX, r2
 80118c4:	f3bf 8f6f 	isb	sy
	bool ret = false;
 80118c8:	4699      	mov	r9, r3
 80118ca:	e004      	b.n	80118d6 <z_sched_wake+0x2a>
	__asm__ volatile(
 80118cc:	f386 8811 	msr	BASEPRI, r6
 80118d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80118d4:	2301      	movs	r3, #1
 80118d6:	b9eb      	cbnz	r3, 8011914 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 80118d8:	4628      	mov	r0, r5
 80118da:	f7ff feb1 	bl	8011640 <z_priq_dumb_best>
		if (thread != NULL) {
 80118de:	4604      	mov	r4, r0
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d0f3      	beq.n	80118cc <z_sched_wake+0x20>
 80118e4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 80118e8:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80118ea:	f7ff fe3c 	bl	8011566 <pended_on_thread>
 80118ee:	4621      	mov	r1, r4
 80118f0:	f7ff fe7a 	bl	80115e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80118f4:	7b63      	ldrb	r3, [r4, #13]
 80118f6:	f023 0302 	bic.w	r3, r3, #2
 80118fa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	60a3      	str	r3, [r4, #8]
 8011900:	f104 0018 	add.w	r0, r4, #24
 8011904:	f000 f820 	bl	8011948 <z_abort_timeout>
			ready_thread(thread);
 8011908:	4620      	mov	r0, r4
 801190a:	f7fb f8cb 	bl	800caa4 <ready_thread>
			ret = true;
 801190e:	f04f 0901 	mov.w	r9, #1
 8011912:	e7db      	b.n	80118cc <z_sched_wake+0x20>
}
 8011914:	4648      	mov	r0, r9
 8011916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801191a <remove_timeout>:
{
 801191a:	b510      	push	{r4, lr}
 801191c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 801191e:	f7fb fb8d 	bl	800d03c <next>
 8011922:	b148      	cbz	r0, 8011938 <remove_timeout+0x1e>
 8011924:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 8011926:	6920      	ldr	r0, [r4, #16]
 8011928:	6961      	ldr	r1, [r4, #20]
 801192a:	6913      	ldr	r3, [r2, #16]
 801192c:	181b      	adds	r3, r3, r0
 801192e:	6950      	ldr	r0, [r2, #20]
 8011930:	eb41 0100 	adc.w	r1, r1, r0
 8011934:	6113      	str	r3, [r2, #16]
 8011936:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 8011938:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 801193a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 801193c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801193e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8011940:	2300      	movs	r3, #0
 8011942:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 8011944:	6063      	str	r3, [r4, #4]
}
 8011946:	bd10      	pop	{r4, pc}

08011948 <z_abort_timeout>:
{
 8011948:	b570      	push	{r4, r5, r6, lr}
 801194a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 801194c:	2300      	movs	r3, #0
	__asm__ volatile(
 801194e:	f04f 0210 	mov.w	r2, #16
 8011952:	f3ef 8611 	mrs	r6, BASEPRI
 8011956:	f382 8812 	msr	BASEPRI_MAX, r2
 801195a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 801195e:	f06f 0015 	mvn.w	r0, #21
 8011962:	e004      	b.n	801196e <z_abort_timeout+0x26>
	__asm__ volatile(
 8011964:	f386 8811 	msr	BASEPRI, r6
 8011968:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801196c:	2301      	movs	r3, #1
 801196e:	461d      	mov	r5, r3
 8011970:	b93b      	cbnz	r3, 8011982 <z_abort_timeout+0x3a>
	return node->next != NULL;
 8011972:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 8011974:	2b00      	cmp	r3, #0
 8011976:	d0f5      	beq.n	8011964 <z_abort_timeout+0x1c>
			remove_timeout(to);
 8011978:	4620      	mov	r0, r4
 801197a:	f7ff ffce 	bl	801191a <remove_timeout>
			ret = 0;
 801197e:	4628      	mov	r0, r5
 8011980:	e7f0      	b.n	8011964 <z_abort_timeout+0x1c>
}
 8011982:	bd70      	pop	{r4, r5, r6, pc}

08011984 <z_set_timeout_expiry>:
{
 8011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011986:	4605      	mov	r5, r0
 8011988:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 801198a:	2300      	movs	r3, #0
	__asm__ volatile(
 801198c:	f04f 0210 	mov.w	r2, #16
 8011990:	f3ef 8611 	mrs	r6, BASEPRI
 8011994:	f382 8812 	msr	BASEPRI_MAX, r2
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	e00a      	b.n	80119b4 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 801199e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 80119a0:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80119a4:	2801      	cmp	r0, #1
 80119a6:	dd00      	ble.n	80119aa <z_set_timeout_expiry+0x26>
 80119a8:	b97c      	cbnz	r4, 80119ca <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 80119aa:	f386 8811 	msr	BASEPRI, r6
 80119ae:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80119b2:	2301      	movs	r3, #1
 80119b4:	461c      	mov	r4, r3
 80119b6:	b97b      	cbnz	r3, 80119d8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 80119b8:	f7fb fb58 	bl	800d06c <next_timeout>
			      || (ticks <= next_to);
 80119bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80119c0:	d0ed      	beq.n	801199e <z_set_timeout_expiry+0x1a>
 80119c2:	42a8      	cmp	r0, r5
 80119c4:	dbec      	blt.n	80119a0 <z_set_timeout_expiry+0x1c>
 80119c6:	2401      	movs	r4, #1
 80119c8:	e7ea      	b.n	80119a0 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80119ca:	4639      	mov	r1, r7
 80119cc:	42a8      	cmp	r0, r5
 80119ce:	bfa8      	it	ge
 80119d0:	4628      	movge	r0, r5
 80119d2:	f7f9 fb2f 	bl	800b034 <sys_clock_set_timeout>
 80119d6:	e7e8      	b.n	80119aa <z_set_timeout_expiry+0x26>
}
 80119d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119da <sys_clock_tick_get_32>:
{
 80119da:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 80119dc:	f7fb fc5a 	bl	800d294 <sys_clock_tick_get>
}
 80119e0:	bd08      	pop	{r3, pc}

080119e2 <z_impl_k_uptime_ticks>:
{
 80119e2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 80119e4:	f7fb fc56 	bl	800d294 <sys_clock_tick_get>
}
 80119e8:	bd08      	pop	{r3, pc}

080119ea <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 80119ea:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 80119ec:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 80119ee:	2300      	movs	r3, #0
 80119f0:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 80119f2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 80119f6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 80119f8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 80119fa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 80119fc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 80119fe:	6343      	str	r3, [r0, #52]	; 0x34
}
 8011a00:	4770      	bx	lr

08011a02 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8011a02:	b510      	push	{r4, lr}
 8011a04:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 8011a06:	f7ff ff9f 	bl	8011948 <z_abort_timeout>

	if (inactive) {
 8011a0a:	b9a0      	cbnz	r0, 8011a36 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 8011a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a0e:	b10b      	cbz	r3, 8011a14 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8011a10:	4620      	mov	r0, r4
 8011a12:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 8011a14:	f104 0018 	add.w	r0, r4, #24
 8011a18:	f7ff feb9 	bl	801178e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8011a1c:	b158      	cbz	r0, 8011a36 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 8011a1e:	f7ff fe16 	bl	801164e <z_ready_thread>
	__asm__ volatile(
 8011a22:	f04f 0310 	mov.w	r3, #16
 8011a26:	f3ef 8011 	mrs	r0, BASEPRI
 8011a2a:	f383 8812 	msr	BASEPRI_MAX, r3
 8011a2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8011a32:	f7ff fdc4 	bl	80115be <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 8011a36:	bd10      	pop	{r4, pc}

08011a38 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 8011a38:	b108      	cbz	r0, 8011a3e <poller_thread+0x6>
 8011a3a:	3860      	subs	r0, #96	; 0x60
 8011a3c:	4770      	bx	lr
}
 8011a3e:	4770      	bx	lr

08011a40 <signal_poller>:
{
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 8011a44:	6880      	ldr	r0, [r0, #8]
 8011a46:	f7ff fff7 	bl	8011a38 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 8011a4a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 8011a4c:	f013 0f02 	tst.w	r3, #2
 8011a50:	d024      	beq.n	8011a9c <signal_poller+0x5c>
 8011a52:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 8011a54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8011a56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 8011a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a5c:	bf08      	it	eq
 8011a5e:	f112 0f02 	cmneq.w	r2, #2
 8011a62:	d01d      	beq.n	8011aa0 <signal_poller+0x60>
	z_unpend_thread(thread);
 8011a64:	f7ff fdc8 	bl	80115f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 8011a68:	2d08      	cmp	r5, #8
 8011a6a:	d009      	beq.n	8011a80 <signal_poller+0x40>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 8011a70:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8011a72:	f013 0f1f 	tst.w	r3, #31
 8011a76:	d108      	bne.n	8011a8a <signal_poller+0x4a>
	return node->next != NULL;
 8011a78:	69a3      	ldr	r3, [r4, #24]
 8011a7a:	b123      	cbz	r3, 8011a86 <signal_poller+0x46>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	e005      	b.n	8011a8c <signal_poller+0x4c>
 8011a80:	f06f 0303 	mvn.w	r3, #3
 8011a84:	e7f3      	b.n	8011a6e <signal_poller+0x2e>
 8011a86:	2301      	movs	r3, #1
 8011a88:	e000      	b.n	8011a8c <signal_poller+0x4c>
 8011a8a:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 8011a8c:	b90b      	cbnz	r3, 8011a92 <signal_poller+0x52>
		return 0;
 8011a8e:	2000      	movs	r0, #0
 8011a90:	e005      	b.n	8011a9e <signal_poller+0x5e>
	z_ready_thread(thread);
 8011a92:	4620      	mov	r0, r4
 8011a94:	f7ff fddb 	bl	801164e <z_ready_thread>
	return 0;
 8011a98:	2000      	movs	r0, #0
 8011a9a:	e000      	b.n	8011a9e <signal_poller+0x5e>
		return 0;
 8011a9c:	2000      	movs	r0, #0
}
 8011a9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 8011aa0:	f06f 000a 	mvn.w	r0, #10
 8011aa4:	e7fb      	b.n	8011a9e <signal_poller+0x5e>

08011aa6 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 8011aa6:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 8011aa8:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 8011aaa:	7823      	ldrb	r3, [r4, #0]
 8011aac:	b173      	cbz	r3, 8011acc <signal_triggered_work+0x26>
 8011aae:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011ab2:	b15d      	cbz	r5, 8011acc <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 8011ab4:	f1a4 0614 	sub.w	r6, r4, #20
 8011ab8:	f104 0014 	add.w	r0, r4, #20
 8011abc:	f7ff ff44 	bl	8011948 <z_abort_timeout>
		twork->poll_result = 0;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	f7ff fcdf 	bl	801148a <k_work_submit_to_queue>
	}

	return 0;
}
 8011acc:	2000      	movs	r0, #0
 8011ace:	bd70      	pop	{r4, r5, r6, pc}

08011ad0 <signal_poll_event>:
{
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 8011ad6:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 8011ad8:	b1d6      	cbz	r6, 8011b10 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 8011ada:	7873      	ldrb	r3, [r6, #1]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d00d      	beq.n	8011afc <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d012      	beq.n	8011b0a <signal_poll_event+0x3a>
		poller->is_polling = false;
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 8011aec:	68e3      	ldr	r3, [r4, #12]
 8011aee:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8011af2:	430d      	orrs	r5, r1
 8011af4:	f365 3352 	bfi	r3, r5, #13, #6
 8011af8:	60e3      	str	r3, [r4, #12]
}
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 8011afc:	f7ff ffa0 	bl	8011a40 <signal_poller>
		poller->is_polling = false;
 8011b00:	2300      	movs	r3, #0
 8011b02:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 8011b04:	4298      	cmp	r0, r3
 8011b06:	daef      	bge.n	8011ae8 <signal_poll_event+0x18>
 8011b08:	e7f7      	b.n	8011afa <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 8011b0a:	f7ff ffcc 	bl	8011aa6 <signal_triggered_work>
 8011b0e:	e7f7      	b.n	8011b00 <signal_poll_event+0x30>
	int retcode = 0;
 8011b10:	2000      	movs	r0, #0
 8011b12:	e7e9      	b.n	8011ae8 <signal_poll_event+0x18>

08011b14 <k_poll_event_init>:
{
 8011b14:	b410      	push	{r4}
	event->poller = NULL;
 8011b16:	2400      	movs	r4, #0
 8011b18:	6084      	str	r4, [r0, #8]
	event->type = type;
 8011b1a:	f890 c00d 	ldrb.w	ip, [r0, #13]
 8011b1e:	f361 0c04 	bfi	ip, r1, #0, #5
 8011b22:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
 8011b26:	68c1      	ldr	r1, [r0, #12]
 8011b28:	f364 3152 	bfi	r1, r4, #13, #6
 8011b2c:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
 8011b2e:	7b81      	ldrb	r1, [r0, #14]
 8011b30:	f362 01c3 	bfi	r1, r2, #3, #1
 8011b34:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
 8011b36:	89c2      	ldrh	r2, [r0, #14]
 8011b38:	f364 120f 	bfi	r2, r4, #4, #12
 8011b3c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 8011b3e:	6103      	str	r3, [r0, #16]
}
 8011b40:	bc10      	pop	{r4}
 8011b42:	4770      	bx	lr

08011b44 <z_handle_obj_poll_events>:
{
 8011b44:	b508      	push	{r3, lr}
 8011b46:	4603      	mov	r3, r0
	return list->head == list;
 8011b48:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8011b4a:	4283      	cmp	r3, r0
 8011b4c:	d009      	beq.n	8011b62 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 8011b4e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8011b50:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8011b52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8011b54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8011b56:	2300      	movs	r3, #0
 8011b58:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8011b5a:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 8011b5c:	b108      	cbz	r0, 8011b62 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 8011b5e:	f7ff ffb7 	bl	8011ad0 <signal_poll_event>
}
 8011b62:	bd08      	pop	{r3, pc}

08011b64 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
 8011b64:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8011b66:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	6083      	str	r3, [r0, #8]
}
 8011b6c:	4770      	bx	lr

08011b6e <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 8011b6e:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 8011b70:	4770      	bx	lr

08011b72 <k_heap_init>:
{
 8011b72:	b510      	push	{r4, lr}
 8011b74:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 8011b78:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 8011b7a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 8011b7c:	f7fd fbf5 	bl	800f36a <sys_heap_init>
}
 8011b80:	bd10      	pop	{r4, pc}

08011b82 <memcpy>:
 8011b82:	440a      	add	r2, r1
 8011b84:	4291      	cmp	r1, r2
 8011b86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b8a:	d100      	bne.n	8011b8e <memcpy+0xc>
 8011b8c:	4770      	bx	lr
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b98:	4291      	cmp	r1, r2
 8011b9a:	d1f9      	bne.n	8011b90 <memcpy+0xe>
 8011b9c:	bd10      	pop	{r4, pc}

08011b9e <memset>:
 8011b9e:	4402      	add	r2, r0
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d100      	bne.n	8011ba8 <memset+0xa>
 8011ba6:	4770      	bx	lr
 8011ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8011bac:	e7f9      	b.n	8011ba2 <memset+0x4>

08011bae <__cvt>:
 8011bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	461f      	mov	r7, r3
 8011bb8:	4614      	mov	r4, r2
 8011bba:	bfb8      	it	lt
 8011bbc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011bc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011bc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011bc8:	bfb6      	itet	lt
 8011bca:	461f      	movlt	r7, r3
 8011bcc:	2300      	movge	r3, #0
 8011bce:	232d      	movlt	r3, #45	; 0x2d
 8011bd0:	7013      	strb	r3, [r2, #0]
 8011bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bd4:	f023 0820 	bic.w	r8, r3, #32
 8011bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011bdc:	d005      	beq.n	8011bea <__cvt+0x3c>
 8011bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011be2:	d100      	bne.n	8011be6 <__cvt+0x38>
 8011be4:	3501      	adds	r5, #1
 8011be6:	2302      	movs	r3, #2
 8011be8:	e000      	b.n	8011bec <__cvt+0x3e>
 8011bea:	2303      	movs	r3, #3
 8011bec:	aa07      	add	r2, sp, #28
 8011bee:	9204      	str	r2, [sp, #16]
 8011bf0:	aa06      	add	r2, sp, #24
 8011bf2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011bf6:	e9cd 3500 	strd	r3, r5, [sp]
 8011bfa:	4622      	mov	r2, r4
 8011bfc:	463b      	mov	r3, r7
 8011bfe:	f7ef f9a3 	bl	8000f48 <_dtoa_r>
 8011c02:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011c06:	4606      	mov	r6, r0
 8011c08:	d102      	bne.n	8011c10 <__cvt+0x62>
 8011c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c0c:	07db      	lsls	r3, r3, #31
 8011c0e:	d522      	bpl.n	8011c56 <__cvt+0xa8>
 8011c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011c14:	eb06 0905 	add.w	r9, r6, r5
 8011c18:	d110      	bne.n	8011c3c <__cvt+0x8e>
 8011c1a:	7833      	ldrb	r3, [r6, #0]
 8011c1c:	2b30      	cmp	r3, #48	; 0x30
 8011c1e:	d10a      	bne.n	8011c36 <__cvt+0x88>
 8011c20:	2200      	movs	r2, #0
 8011c22:	2300      	movs	r3, #0
 8011c24:	4620      	mov	r0, r4
 8011c26:	4639      	mov	r1, r7
 8011c28:	f7ee ff48 	bl	8000abc <__aeabi_dcmpeq>
 8011c2c:	b918      	cbnz	r0, 8011c36 <__cvt+0x88>
 8011c2e:	f1c5 0501 	rsb	r5, r5, #1
 8011c32:	f8ca 5000 	str.w	r5, [sl]
 8011c36:	f8da 3000 	ldr.w	r3, [sl]
 8011c3a:	4499      	add	r9, r3
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	2300      	movs	r3, #0
 8011c40:	4620      	mov	r0, r4
 8011c42:	4639      	mov	r1, r7
 8011c44:	f7ee ff3a 	bl	8000abc <__aeabi_dcmpeq>
 8011c48:	b108      	cbz	r0, 8011c4e <__cvt+0xa0>
 8011c4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8011c4e:	2230      	movs	r2, #48	; 0x30
 8011c50:	9b07      	ldr	r3, [sp, #28]
 8011c52:	454b      	cmp	r3, r9
 8011c54:	d307      	bcc.n	8011c66 <__cvt+0xb8>
 8011c56:	9b07      	ldr	r3, [sp, #28]
 8011c58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011c5a:	1b9b      	subs	r3, r3, r6
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	b008      	add	sp, #32
 8011c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c66:	1c59      	adds	r1, r3, #1
 8011c68:	9107      	str	r1, [sp, #28]
 8011c6a:	701a      	strb	r2, [r3, #0]
 8011c6c:	e7f0      	b.n	8011c50 <__cvt+0xa2>

08011c6e <__exponent>:
 8011c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c70:	4603      	mov	r3, r0
 8011c72:	2900      	cmp	r1, #0
 8011c74:	bfb8      	it	lt
 8011c76:	4249      	neglt	r1, r1
 8011c78:	f803 2b02 	strb.w	r2, [r3], #2
 8011c7c:	bfb4      	ite	lt
 8011c7e:	222d      	movlt	r2, #45	; 0x2d
 8011c80:	222b      	movge	r2, #43	; 0x2b
 8011c82:	2909      	cmp	r1, #9
 8011c84:	7042      	strb	r2, [r0, #1]
 8011c86:	dd2a      	ble.n	8011cde <__exponent+0x70>
 8011c88:	f10d 0407 	add.w	r4, sp, #7
 8011c8c:	46a4      	mov	ip, r4
 8011c8e:	270a      	movs	r7, #10
 8011c90:	46a6      	mov	lr, r4
 8011c92:	460a      	mov	r2, r1
 8011c94:	fb91 f6f7 	sdiv	r6, r1, r7
 8011c98:	fb07 1516 	mls	r5, r7, r6, r1
 8011c9c:	3530      	adds	r5, #48	; 0x30
 8011c9e:	2a63      	cmp	r2, #99	; 0x63
 8011ca0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011ca4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011ca8:	4631      	mov	r1, r6
 8011caa:	dcf1      	bgt.n	8011c90 <__exponent+0x22>
 8011cac:	3130      	adds	r1, #48	; 0x30
 8011cae:	f1ae 0502 	sub.w	r5, lr, #2
 8011cb2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011cb6:	1c44      	adds	r4, r0, #1
 8011cb8:	4629      	mov	r1, r5
 8011cba:	4561      	cmp	r1, ip
 8011cbc:	d30a      	bcc.n	8011cd4 <__exponent+0x66>
 8011cbe:	f10d 0209 	add.w	r2, sp, #9
 8011cc2:	eba2 020e 	sub.w	r2, r2, lr
 8011cc6:	4565      	cmp	r5, ip
 8011cc8:	bf88      	it	hi
 8011cca:	2200      	movhi	r2, #0
 8011ccc:	4413      	add	r3, r2
 8011cce:	1a18      	subs	r0, r3, r0
 8011cd0:	b003      	add	sp, #12
 8011cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cd8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011cdc:	e7ed      	b.n	8011cba <__exponent+0x4c>
 8011cde:	2330      	movs	r3, #48	; 0x30
 8011ce0:	3130      	adds	r1, #48	; 0x30
 8011ce2:	7083      	strb	r3, [r0, #2]
 8011ce4:	70c1      	strb	r1, [r0, #3]
 8011ce6:	1d03      	adds	r3, r0, #4
 8011ce8:	e7f1      	b.n	8011cce <__exponent+0x60>

08011cea <_printf_common>:
 8011cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cee:	4616      	mov	r6, r2
 8011cf0:	4699      	mov	r9, r3
 8011cf2:	688a      	ldr	r2, [r1, #8]
 8011cf4:	690b      	ldr	r3, [r1, #16]
 8011cf6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	bfb8      	it	lt
 8011cfe:	4613      	movlt	r3, r2
 8011d00:	6033      	str	r3, [r6, #0]
 8011d02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d06:	4607      	mov	r7, r0
 8011d08:	460c      	mov	r4, r1
 8011d0a:	b10a      	cbz	r2, 8011d10 <_printf_common+0x26>
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	6033      	str	r3, [r6, #0]
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	0699      	lsls	r1, r3, #26
 8011d14:	bf42      	ittt	mi
 8011d16:	6833      	ldrmi	r3, [r6, #0]
 8011d18:	3302      	addmi	r3, #2
 8011d1a:	6033      	strmi	r3, [r6, #0]
 8011d1c:	6825      	ldr	r5, [r4, #0]
 8011d1e:	f015 0506 	ands.w	r5, r5, #6
 8011d22:	d106      	bne.n	8011d32 <_printf_common+0x48>
 8011d24:	f104 0a19 	add.w	sl, r4, #25
 8011d28:	68e3      	ldr	r3, [r4, #12]
 8011d2a:	6832      	ldr	r2, [r6, #0]
 8011d2c:	1a9b      	subs	r3, r3, r2
 8011d2e:	42ab      	cmp	r3, r5
 8011d30:	dc26      	bgt.n	8011d80 <_printf_common+0x96>
 8011d32:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d36:	1e13      	subs	r3, r2, #0
 8011d38:	6822      	ldr	r2, [r4, #0]
 8011d3a:	bf18      	it	ne
 8011d3c:	2301      	movne	r3, #1
 8011d3e:	0692      	lsls	r2, r2, #26
 8011d40:	d42b      	bmi.n	8011d9a <_printf_common+0xb0>
 8011d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d46:	4649      	mov	r1, r9
 8011d48:	4638      	mov	r0, r7
 8011d4a:	47c0      	blx	r8
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	d01e      	beq.n	8011d8e <_printf_common+0xa4>
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	68e5      	ldr	r5, [r4, #12]
 8011d54:	6832      	ldr	r2, [r6, #0]
 8011d56:	f003 0306 	and.w	r3, r3, #6
 8011d5a:	2b04      	cmp	r3, #4
 8011d5c:	bf08      	it	eq
 8011d5e:	1aad      	subeq	r5, r5, r2
 8011d60:	68a3      	ldr	r3, [r4, #8]
 8011d62:	6922      	ldr	r2, [r4, #16]
 8011d64:	bf0c      	ite	eq
 8011d66:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d6a:	2500      	movne	r5, #0
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	bfc4      	itt	gt
 8011d70:	1a9b      	subgt	r3, r3, r2
 8011d72:	18ed      	addgt	r5, r5, r3
 8011d74:	2600      	movs	r6, #0
 8011d76:	341a      	adds	r4, #26
 8011d78:	42b5      	cmp	r5, r6
 8011d7a:	d11a      	bne.n	8011db2 <_printf_common+0xc8>
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	e008      	b.n	8011d92 <_printf_common+0xa8>
 8011d80:	2301      	movs	r3, #1
 8011d82:	4652      	mov	r2, sl
 8011d84:	4649      	mov	r1, r9
 8011d86:	4638      	mov	r0, r7
 8011d88:	47c0      	blx	r8
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	d103      	bne.n	8011d96 <_printf_common+0xac>
 8011d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d96:	3501      	adds	r5, #1
 8011d98:	e7c6      	b.n	8011d28 <_printf_common+0x3e>
 8011d9a:	18e1      	adds	r1, r4, r3
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	2030      	movs	r0, #48	; 0x30
 8011da0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011da4:	4422      	add	r2, r4
 8011da6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011daa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011dae:	3302      	adds	r3, #2
 8011db0:	e7c7      	b.n	8011d42 <_printf_common+0x58>
 8011db2:	2301      	movs	r3, #1
 8011db4:	4622      	mov	r2, r4
 8011db6:	4649      	mov	r1, r9
 8011db8:	4638      	mov	r0, r7
 8011dba:	47c0      	blx	r8
 8011dbc:	3001      	adds	r0, #1
 8011dbe:	d0e6      	beq.n	8011d8e <_printf_common+0xa4>
 8011dc0:	3601      	adds	r6, #1
 8011dc2:	e7d9      	b.n	8011d78 <_printf_common+0x8e>

08011dc4 <strnlen>:
 8011dc4:	b510      	push	{r4, lr}
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	4401      	add	r1, r0
 8011dca:	428a      	cmp	r2, r1
 8011dcc:	4613      	mov	r3, r2
 8011dce:	d003      	beq.n	8011dd8 <strnlen+0x14>
 8011dd0:	781c      	ldrb	r4, [r3, #0]
 8011dd2:	3201      	adds	r2, #1
 8011dd4:	2c00      	cmp	r4, #0
 8011dd6:	d1f8      	bne.n	8011dca <strnlen+0x6>
 8011dd8:	1a18      	subs	r0, r3, r0
 8011dda:	bd10      	pop	{r4, pc}

08011ddc <quorem>:
 8011ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de0:	6903      	ldr	r3, [r0, #16]
 8011de2:	690c      	ldr	r4, [r1, #16]
 8011de4:	42a3      	cmp	r3, r4
 8011de6:	4607      	mov	r7, r0
 8011de8:	db7d      	blt.n	8011ee6 <quorem+0x10a>
 8011dea:	3c01      	subs	r4, #1
 8011dec:	f101 0814 	add.w	r8, r1, #20
 8011df0:	f100 0514 	add.w	r5, r0, #20
 8011df4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e02:	3301      	adds	r3, #1
 8011e04:	429a      	cmp	r2, r3
 8011e06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e12:	d32e      	bcc.n	8011e72 <quorem+0x96>
 8011e14:	f04f 0e00 	mov.w	lr, #0
 8011e18:	4640      	mov	r0, r8
 8011e1a:	46ac      	mov	ip, r5
 8011e1c:	46f2      	mov	sl, lr
 8011e1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e22:	b293      	uxth	r3, r2
 8011e24:	fb06 e303 	mla	r3, r6, r3, lr
 8011e28:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011e2c:	0c12      	lsrs	r2, r2, #16
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	fb06 e202 	mla	r2, r6, r2, lr
 8011e34:	ebaa 0303 	sub.w	r3, sl, r3
 8011e38:	f8dc a000 	ldr.w	sl, [ip]
 8011e3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e40:	b292      	uxth	r2, r2
 8011e42:	fa13 f38a 	uxtah	r3, r3, sl
 8011e46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011e4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e54:	4581      	cmp	r9, r0
 8011e56:	f84c 3b04 	str.w	r3, [ip], #4
 8011e5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e5e:	d2de      	bcs.n	8011e1e <quorem+0x42>
 8011e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e64:	b92b      	cbnz	r3, 8011e72 <quorem+0x96>
 8011e66:	9b01      	ldr	r3, [sp, #4]
 8011e68:	3b04      	subs	r3, #4
 8011e6a:	429d      	cmp	r5, r3
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	d32e      	bcc.n	8011ece <quorem+0xf2>
 8011e70:	613c      	str	r4, [r7, #16]
 8011e72:	4638      	mov	r0, r7
 8011e74:	f000 f886 	bl	8011f84 <__mcmp>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	db24      	blt.n	8011ec6 <quorem+0xea>
 8011e7c:	3601      	adds	r6, #1
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f04f 0c00 	mov.w	ip, #0
 8011e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e88:	f8d0 e000 	ldr.w	lr, [r0]
 8011e8c:	b293      	uxth	r3, r2
 8011e8e:	ebac 0303 	sub.w	r3, ip, r3
 8011e92:	0c12      	lsrs	r2, r2, #16
 8011e94:	fa13 f38e 	uxtah	r3, r3, lr
 8011e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ea6:	45c1      	cmp	r9, r8
 8011ea8:	f840 3b04 	str.w	r3, [r0], #4
 8011eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011eb0:	d2e8      	bcs.n	8011e84 <quorem+0xa8>
 8011eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011eba:	b922      	cbnz	r2, 8011ec6 <quorem+0xea>
 8011ebc:	3b04      	subs	r3, #4
 8011ebe:	429d      	cmp	r5, r3
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	d30a      	bcc.n	8011eda <quorem+0xfe>
 8011ec4:	613c      	str	r4, [r7, #16]
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ece:	6812      	ldr	r2, [r2, #0]
 8011ed0:	3b04      	subs	r3, #4
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	d1cc      	bne.n	8011e70 <quorem+0x94>
 8011ed6:	3c01      	subs	r4, #1
 8011ed8:	e7c7      	b.n	8011e6a <quorem+0x8e>
 8011eda:	6812      	ldr	r2, [r2, #0]
 8011edc:	3b04      	subs	r3, #4
 8011ede:	2a00      	cmp	r2, #0
 8011ee0:	d1f0      	bne.n	8011ec4 <quorem+0xe8>
 8011ee2:	3c01      	subs	r4, #1
 8011ee4:	e7eb      	b.n	8011ebe <quorem+0xe2>
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	e7ee      	b.n	8011ec8 <quorem+0xec>

08011eea <__hi0bits>:
 8011eea:	0c02      	lsrs	r2, r0, #16
 8011eec:	0412      	lsls	r2, r2, #16
 8011eee:	4603      	mov	r3, r0
 8011ef0:	b9ca      	cbnz	r2, 8011f26 <__hi0bits+0x3c>
 8011ef2:	0403      	lsls	r3, r0, #16
 8011ef4:	2010      	movs	r0, #16
 8011ef6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011efa:	bf04      	itt	eq
 8011efc:	021b      	lsleq	r3, r3, #8
 8011efe:	3008      	addeq	r0, #8
 8011f00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011f04:	bf04      	itt	eq
 8011f06:	011b      	lsleq	r3, r3, #4
 8011f08:	3004      	addeq	r0, #4
 8011f0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011f0e:	bf04      	itt	eq
 8011f10:	009b      	lsleq	r3, r3, #2
 8011f12:	3002      	addeq	r0, #2
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	db05      	blt.n	8011f24 <__hi0bits+0x3a>
 8011f18:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011f1c:	f100 0001 	add.w	r0, r0, #1
 8011f20:	bf08      	it	eq
 8011f22:	2020      	moveq	r0, #32
 8011f24:	4770      	bx	lr
 8011f26:	2000      	movs	r0, #0
 8011f28:	e7e5      	b.n	8011ef6 <__hi0bits+0xc>

08011f2a <__lo0bits>:
 8011f2a:	6803      	ldr	r3, [r0, #0]
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	f013 0007 	ands.w	r0, r3, #7
 8011f32:	d00b      	beq.n	8011f4c <__lo0bits+0x22>
 8011f34:	07d9      	lsls	r1, r3, #31
 8011f36:	d421      	bmi.n	8011f7c <__lo0bits+0x52>
 8011f38:	0798      	lsls	r0, r3, #30
 8011f3a:	bf49      	itett	mi
 8011f3c:	085b      	lsrmi	r3, r3, #1
 8011f3e:	089b      	lsrpl	r3, r3, #2
 8011f40:	2001      	movmi	r0, #1
 8011f42:	6013      	strmi	r3, [r2, #0]
 8011f44:	bf5c      	itt	pl
 8011f46:	6013      	strpl	r3, [r2, #0]
 8011f48:	2002      	movpl	r0, #2
 8011f4a:	4770      	bx	lr
 8011f4c:	b299      	uxth	r1, r3
 8011f4e:	b909      	cbnz	r1, 8011f54 <__lo0bits+0x2a>
 8011f50:	0c1b      	lsrs	r3, r3, #16
 8011f52:	2010      	movs	r0, #16
 8011f54:	b2d9      	uxtb	r1, r3
 8011f56:	b909      	cbnz	r1, 8011f5c <__lo0bits+0x32>
 8011f58:	3008      	adds	r0, #8
 8011f5a:	0a1b      	lsrs	r3, r3, #8
 8011f5c:	0719      	lsls	r1, r3, #28
 8011f5e:	bf04      	itt	eq
 8011f60:	091b      	lsreq	r3, r3, #4
 8011f62:	3004      	addeq	r0, #4
 8011f64:	0799      	lsls	r1, r3, #30
 8011f66:	bf04      	itt	eq
 8011f68:	089b      	lsreq	r3, r3, #2
 8011f6a:	3002      	addeq	r0, #2
 8011f6c:	07d9      	lsls	r1, r3, #31
 8011f6e:	d403      	bmi.n	8011f78 <__lo0bits+0x4e>
 8011f70:	085b      	lsrs	r3, r3, #1
 8011f72:	f100 0001 	add.w	r0, r0, #1
 8011f76:	d003      	beq.n	8011f80 <__lo0bits+0x56>
 8011f78:	6013      	str	r3, [r2, #0]
 8011f7a:	4770      	bx	lr
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	4770      	bx	lr
 8011f80:	2020      	movs	r0, #32
 8011f82:	4770      	bx	lr

08011f84 <__mcmp>:
 8011f84:	690a      	ldr	r2, [r1, #16]
 8011f86:	4603      	mov	r3, r0
 8011f88:	6900      	ldr	r0, [r0, #16]
 8011f8a:	1a80      	subs	r0, r0, r2
 8011f8c:	b530      	push	{r4, r5, lr}
 8011f8e:	d10d      	bne.n	8011fac <__mcmp+0x28>
 8011f90:	3314      	adds	r3, #20
 8011f92:	3114      	adds	r1, #20
 8011f94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011fa4:	4295      	cmp	r5, r2
 8011fa6:	d002      	beq.n	8011fae <__mcmp+0x2a>
 8011fa8:	d304      	bcc.n	8011fb4 <__mcmp+0x30>
 8011faa:	2001      	movs	r0, #1
 8011fac:	bd30      	pop	{r4, r5, pc}
 8011fae:	42a3      	cmp	r3, r4
 8011fb0:	d3f4      	bcc.n	8011f9c <__mcmp+0x18>
 8011fb2:	e7fb      	b.n	8011fac <__mcmp+0x28>
 8011fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011fb8:	e7f8      	b.n	8011fac <__mcmp+0x28>

08011fba <_calloc_r>:
 8011fba:	b538      	push	{r3, r4, r5, lr}
 8011fbc:	fb02 f501 	mul.w	r5, r2, r1
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7fb fd9d 	bl	800db00 <_malloc_r>
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	b118      	cbz	r0, 8011fd2 <_calloc_r+0x18>
 8011fca:	462a      	mov	r2, r5
 8011fcc:	2100      	movs	r1, #0
 8011fce:	f7ff fde6 	bl	8011b9e <memset>
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	bd38      	pop	{r3, r4, r5, pc}

08011fd6 <__ascii_mbtowc>:
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	b901      	cbnz	r1, 8011fdc <__ascii_mbtowc+0x6>
 8011fda:	a901      	add	r1, sp, #4
 8011fdc:	b142      	cbz	r2, 8011ff0 <__ascii_mbtowc+0x1a>
 8011fde:	b14b      	cbz	r3, 8011ff4 <__ascii_mbtowc+0x1e>
 8011fe0:	7813      	ldrb	r3, [r2, #0]
 8011fe2:	600b      	str	r3, [r1, #0]
 8011fe4:	7812      	ldrb	r2, [r2, #0]
 8011fe6:	1e10      	subs	r0, r2, #0
 8011fe8:	bf18      	it	ne
 8011fea:	2001      	movne	r0, #1
 8011fec:	b002      	add	sp, #8
 8011fee:	4770      	bx	lr
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	e7fb      	b.n	8011fec <__ascii_mbtowc+0x16>
 8011ff4:	f06f 0001 	mvn.w	r0, #1
 8011ff8:	e7f8      	b.n	8011fec <__ascii_mbtowc+0x16>

08011ffa <__sfputc_r>:
 8011ffa:	6893      	ldr	r3, [r2, #8]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	b410      	push	{r4}
 8012002:	6093      	str	r3, [r2, #8]
 8012004:	da07      	bge.n	8012016 <__sfputc_r+0x1c>
 8012006:	6994      	ldr	r4, [r2, #24]
 8012008:	42a3      	cmp	r3, r4
 801200a:	db01      	blt.n	8012010 <__sfputc_r+0x16>
 801200c:	290a      	cmp	r1, #10
 801200e:	d102      	bne.n	8012016 <__sfputc_r+0x1c>
 8012010:	bc10      	pop	{r4}
 8012012:	f7fc bdb3 	b.w	800eb7c <__swbuf_r>
 8012016:	6813      	ldr	r3, [r2, #0]
 8012018:	1c58      	adds	r0, r3, #1
 801201a:	6010      	str	r0, [r2, #0]
 801201c:	7019      	strb	r1, [r3, #0]
 801201e:	4608      	mov	r0, r1
 8012020:	bc10      	pop	{r4}
 8012022:	4770      	bx	lr

08012024 <__sfputs_r>:
 8012024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012026:	4606      	mov	r6, r0
 8012028:	460f      	mov	r7, r1
 801202a:	4614      	mov	r4, r2
 801202c:	18d5      	adds	r5, r2, r3
 801202e:	42ac      	cmp	r4, r5
 8012030:	d101      	bne.n	8012036 <__sfputs_r+0x12>
 8012032:	2000      	movs	r0, #0
 8012034:	e007      	b.n	8012046 <__sfputs_r+0x22>
 8012036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801203a:	463a      	mov	r2, r7
 801203c:	4630      	mov	r0, r6
 801203e:	f7ff ffdc 	bl	8011ffa <__sfputc_r>
 8012042:	1c43      	adds	r3, r0, #1
 8012044:	d1f3      	bne.n	801202e <__sfputs_r+0xa>
 8012046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012048 <__ascii_wctomb>:
 8012048:	4603      	mov	r3, r0
 801204a:	4608      	mov	r0, r1
 801204c:	b141      	cbz	r1, 8012060 <__ascii_wctomb+0x18>
 801204e:	2aff      	cmp	r2, #255	; 0xff
 8012050:	d904      	bls.n	801205c <__ascii_wctomb+0x14>
 8012052:	228a      	movs	r2, #138	; 0x8a
 8012054:	601a      	str	r2, [r3, #0]
 8012056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801205a:	4770      	bx	lr
 801205c:	700a      	strb	r2, [r1, #0]
 801205e:	2001      	movs	r0, #1
 8012060:	4770      	bx	lr

08012062 <abort>:
 8012062:	b508      	push	{r3, lr}
 8012064:	2006      	movs	r0, #6
 8012066:	f7fd f807 	bl	800f078 <raise>
 801206a:	2001      	movs	r0, #1
 801206c:	f7f3 fe12 	bl	8005c94 <_exit>

08012070 <__sfmoreglue>:
 8012070:	b570      	push	{r4, r5, r6, lr}
 8012072:	2268      	movs	r2, #104	; 0x68
 8012074:	1e4d      	subs	r5, r1, #1
 8012076:	4355      	muls	r5, r2
 8012078:	460e      	mov	r6, r1
 801207a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801207e:	f7fb fd3f 	bl	800db00 <_malloc_r>
 8012082:	4604      	mov	r4, r0
 8012084:	b140      	cbz	r0, 8012098 <__sfmoreglue+0x28>
 8012086:	2100      	movs	r1, #0
 8012088:	e9c0 1600 	strd	r1, r6, [r0]
 801208c:	300c      	adds	r0, #12
 801208e:	60a0      	str	r0, [r4, #8]
 8012090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012094:	f7ff fd83 	bl	8011b9e <memset>
 8012098:	4620      	mov	r0, r4
 801209a:	bd70      	pop	{r4, r5, r6, pc}

0801209c <_fwalk_reent>:
 801209c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120a0:	4606      	mov	r6, r0
 80120a2:	4688      	mov	r8, r1
 80120a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120a8:	2700      	movs	r7, #0
 80120aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120ae:	f1b9 0901 	subs.w	r9, r9, #1
 80120b2:	d505      	bpl.n	80120c0 <_fwalk_reent+0x24>
 80120b4:	6824      	ldr	r4, [r4, #0]
 80120b6:	2c00      	cmp	r4, #0
 80120b8:	d1f7      	bne.n	80120aa <_fwalk_reent+0xe>
 80120ba:	4638      	mov	r0, r7
 80120bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120c0:	89ab      	ldrh	r3, [r5, #12]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d907      	bls.n	80120d6 <_fwalk_reent+0x3a>
 80120c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120ca:	3301      	adds	r3, #1
 80120cc:	d003      	beq.n	80120d6 <_fwalk_reent+0x3a>
 80120ce:	4629      	mov	r1, r5
 80120d0:	4630      	mov	r0, r6
 80120d2:	47c0      	blx	r8
 80120d4:	4307      	orrs	r7, r0
 80120d6:	3568      	adds	r5, #104	; 0x68
 80120d8:	e7e9      	b.n	80120ae <_fwalk_reent+0x12>

080120da <__swhatbuf_r>:
 80120da:	b570      	push	{r4, r5, r6, lr}
 80120dc:	460e      	mov	r6, r1
 80120de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120e2:	2900      	cmp	r1, #0
 80120e4:	b096      	sub	sp, #88	; 0x58
 80120e6:	4614      	mov	r4, r2
 80120e8:	461d      	mov	r5, r3
 80120ea:	da08      	bge.n	80120fe <__swhatbuf_r+0x24>
 80120ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	602a      	str	r2, [r5, #0]
 80120f4:	061a      	lsls	r2, r3, #24
 80120f6:	d410      	bmi.n	801211a <__swhatbuf_r+0x40>
 80120f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120fc:	e00e      	b.n	801211c <__swhatbuf_r+0x42>
 80120fe:	466a      	mov	r2, sp
 8012100:	f7fc fff6 	bl	800f0f0 <_fstat_r>
 8012104:	2800      	cmp	r0, #0
 8012106:	dbf1      	blt.n	80120ec <__swhatbuf_r+0x12>
 8012108:	9a01      	ldr	r2, [sp, #4]
 801210a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801210e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012112:	425a      	negs	r2, r3
 8012114:	415a      	adcs	r2, r3
 8012116:	602a      	str	r2, [r5, #0]
 8012118:	e7ee      	b.n	80120f8 <__swhatbuf_r+0x1e>
 801211a:	2340      	movs	r3, #64	; 0x40
 801211c:	2000      	movs	r0, #0
 801211e:	6023      	str	r3, [r4, #0]
 8012120:	b016      	add	sp, #88	; 0x58
 8012122:	bd70      	pop	{r4, r5, r6, pc}

08012124 <_raise_r>:
 8012124:	291f      	cmp	r1, #31
 8012126:	b538      	push	{r3, r4, r5, lr}
 8012128:	4604      	mov	r4, r0
 801212a:	460d      	mov	r5, r1
 801212c:	d904      	bls.n	8012138 <_raise_r+0x14>
 801212e:	2316      	movs	r3, #22
 8012130:	6003      	str	r3, [r0, #0]
 8012132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012136:	bd38      	pop	{r3, r4, r5, pc}
 8012138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801213a:	b112      	cbz	r2, 8012142 <_raise_r+0x1e>
 801213c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012140:	b94b      	cbnz	r3, 8012156 <_raise_r+0x32>
 8012142:	4620      	mov	r0, r4
 8012144:	f000 f816 	bl	8012174 <_getpid_r>
 8012148:	462a      	mov	r2, r5
 801214a:	4601      	mov	r1, r0
 801214c:	4620      	mov	r0, r4
 801214e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012152:	f7fc bf99 	b.w	800f088 <_kill_r>
 8012156:	2b01      	cmp	r3, #1
 8012158:	d00a      	beq.n	8012170 <_raise_r+0x4c>
 801215a:	1c59      	adds	r1, r3, #1
 801215c:	d103      	bne.n	8012166 <_raise_r+0x42>
 801215e:	2316      	movs	r3, #22
 8012160:	6003      	str	r3, [r0, #0]
 8012162:	2001      	movs	r0, #1
 8012164:	e7e7      	b.n	8012136 <_raise_r+0x12>
 8012166:	2400      	movs	r4, #0
 8012168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801216c:	4628      	mov	r0, r5
 801216e:	4798      	blx	r3
 8012170:	2000      	movs	r0, #0
 8012172:	e7e0      	b.n	8012136 <_raise_r+0x12>

08012174 <_getpid_r>:
 8012174:	f7fd bd78 	b.w	800fc68 <_getpid>

08012178 <__sread>:
 8012178:	b510      	push	{r4, lr}
 801217a:	460c      	mov	r4, r1
 801217c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012180:	f7fc ffea 	bl	800f158 <_read_r>
 8012184:	2800      	cmp	r0, #0
 8012186:	bfab      	itete	ge
 8012188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801218a:	89a3      	ldrhlt	r3, [r4, #12]
 801218c:	181b      	addge	r3, r3, r0
 801218e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012192:	bfac      	ite	ge
 8012194:	6563      	strge	r3, [r4, #84]	; 0x54
 8012196:	81a3      	strhlt	r3, [r4, #12]
 8012198:	bd10      	pop	{r4, pc}

0801219a <__swrite>:
 801219a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801219e:	461f      	mov	r7, r3
 80121a0:	898b      	ldrh	r3, [r1, #12]
 80121a2:	05db      	lsls	r3, r3, #23
 80121a4:	4605      	mov	r5, r0
 80121a6:	460c      	mov	r4, r1
 80121a8:	4616      	mov	r6, r2
 80121aa:	d505      	bpl.n	80121b8 <__swrite+0x1e>
 80121ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b0:	2302      	movs	r3, #2
 80121b2:	2200      	movs	r2, #0
 80121b4:	f7fc ffbe 	bl	800f134 <_lseek_r>
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	4632      	mov	r2, r6
 80121c6:	463b      	mov	r3, r7
 80121c8:	4628      	mov	r0, r5
 80121ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	f7fc bf6d 	b.w	800f0ac <_write_r>

080121d2 <__sseek>:
 80121d2:	b510      	push	{r4, lr}
 80121d4:	460c      	mov	r4, r1
 80121d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121da:	f7fc ffab 	bl	800f134 <_lseek_r>
 80121de:	1c43      	adds	r3, r0, #1
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	bf15      	itete	ne
 80121e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80121e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80121ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80121ee:	81a3      	strheq	r3, [r4, #12]
 80121f0:	bf18      	it	ne
 80121f2:	81a3      	strhne	r3, [r4, #12]
 80121f4:	bd10      	pop	{r4, pc}

080121f6 <__sclose>:
 80121f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121fa:	f7fc bf69 	b.w	800f0d0 <_close_r>

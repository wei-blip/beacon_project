
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	20 46 00 20 d9 49 00 08 33 18 01 08 91 49 00 08      F. .I..3....I..
 8000010:	91 49 00 08 91 49 00 08 91 49 00 08 00 00 00 00     .I...I...I......
	...
 800002c:	dd 3c 00 08 91 49 00 08 00 00 00 00 89 3c 00 08     .<...I.......<..
 800003c:	59 9d 00 08                                         Y...

08000040 <_irq_vector_table>:
 8000040:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000050:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000060:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000070:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000080:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000090:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000a0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000b0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000c0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000d0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000e0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 80000f0:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000100:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000110:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000120:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000130:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000140:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000150:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000160:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000170:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000180:	b5 3d 00 08 b5 3d 00 08 b5 3d 00 08 b5 3d 00 08     .=...=...=...=..
 8000190:	b5 3d 00 08                                         .=..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_d2iz>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d215      	bcs.n	8000b22 <__aeabi_d2iz+0x36>
 8000af6:	d511      	bpl.n	8000b1c <__aeabi_d2iz+0x30>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d912      	bls.n	8000b28 <__aeabi_d2iz+0x3c>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d105      	bne.n	8000b34 <__aeabi_d2iz+0x48>
 8000b28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	bf08      	it	eq
 8000b2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b50:	f000 b80c 	b.w	8000b6c <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f81e 	bl	8000b9c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpun>:
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x10>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d10a      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x20>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0001 	mov.w	r0, #1
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	4605      	mov	r5, r0
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000e6e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000e70:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000e72:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000e74:	f012 fdd2 	bl	8013a1c <z_device_is_ready>
 8000e78:	b150      	cbz	r0, 8000e90 <ws2812_pwm_init+0x28>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	7e22      	ldrb	r2, [r4, #24]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d222      	bcs.n	8000ec8 <ws2812_pwm_init+0x60>
        switch (cfg->color_mapping[i]) {
 8000e82:	69e2      	ldr	r2, [r4, #28]
 8000e84:	5cd2      	ldrb	r2, [r2, r3]
 8000e86:	2a03      	cmp	r2, #3
 8000e88:	d810      	bhi.n	8000eac <ws2812_pwm_init+0x44>
    for (i = 0; i < cfg->num_colors; i++) {
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e7f5      	b.n	8000e7c <ws2812_pwm_init+0x14>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <ws2812_pwm_init+0xd0>)
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9000      	str	r0, [sp, #0]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ea2:	f012 fb28 	bl	80134f6 <z_log_msg2_runtime_create>
        return -ENODEV;
 8000ea6:	f06f 0012 	mvn.w	r0, #18
 8000eaa:	e03d      	b.n	8000f28 <ws2812_pwm_init+0xc0>
            case LED_COLOR_ID_RED:
            case LED_COLOR_ID_GREEN:
            case LED_COLOR_ID_BLUE:
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <ws2812_pwm_init+0xd8>)
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	9000      	str	r0, [sp, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ebe:	f012 fb1a 	bl	80134f6 <z_log_msg2_runtime_create>
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ec2:	f06f 0015 	mvn.w	r0, #21
 8000ec6:	e02f      	b.n	8000f28 <ws2812_pwm_init+0xc0>
        }
    }

    uint64_t cycles_per_sec;
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	6861      	ldr	r1, [r4, #4]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
 8000ecc:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	aa04      	add	r2, sp, #16
 8000ed2:	4798      	blx	r3

    ctx->pwm_period_cycles = (uint32_t)
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ed4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8000ed6:	9804      	ldr	r0, [sp, #16]
 8000ed8:	fba0 0105 	umull	r0, r1, r0, r5
 8000edc:	a314      	add	r3, pc, #80	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000ee6:	fb05 110c 	mla	r1, r5, ip, r1
 8000eea:	f7ff fe27 	bl	8000b3c <__aeabi_uldivmod>
    ctx->pwm_period_cycles = (uint32_t)
 8000eee:	6030      	str	r0, [r6, #0]
    ctx->pwm_t0h_cycles = (uint32_t)
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ef0:	8c25      	ldrh	r5, [r4, #32]
 8000ef2:	9804      	ldr	r0, [sp, #16]
 8000ef4:	fba0 0105 	umull	r0, r1, r0, r5
 8000ef8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000f02:	fb05 110c 	mla	r1, r5, ip, r1
 8000f06:	f7ff fe19 	bl	8000b3c <__aeabi_uldivmod>
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f0a:	6070      	str	r0, [r6, #4]
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f0c:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8000f0e:	9804      	ldr	r0, [sp, #16]
 8000f10:	fba0 0104 	umull	r0, r1, r0, r4
 8000f14:	a306      	add	r3, pc, #24	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	9d05      	ldr	r5, [sp, #20]
 8000f1c:	fb04 1105 	mla	r1, r4, r5, r1
 8000f20:	f7ff fe0c 	bl	8000b3c <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f24:	60b0      	str	r0, [r6, #8]

    return 0;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	3b9aca00 	.word	0x3b9aca00
 8000f34:	00000000 	.word	0x00000000
 8000f38:	080168ac 	.word	0x080168ac
 8000f3c:	08015088 	.word	0x08015088
 8000f40:	080168c8 	.word	0x080168c8
 8000f44:	00000000 	.word	0x00000000

08000f48 <_dtoa_r>:
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f4e:	b099      	sub	sp, #100	; 0x64
 8000f50:	4616      	mov	r6, r2
 8000f52:	461f      	mov	r7, r3
 8000f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000f58:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	b974      	cbnz	r4, 8000f7e <_dtoa_r+0x36>
 8000f60:	2010      	movs	r0, #16
 8000f62:	f00e fc65 	bl	800f830 <malloc>
 8000f66:	4602      	mov	r2, r0
 8000f68:	6268      	str	r0, [r5, #36]	; 0x24
 8000f6a:	b920      	cbnz	r0, 8000f76 <_dtoa_r+0x2e>
 8000f6c:	4ba8      	ldr	r3, [pc, #672]	; (8001210 <_dtoa_r+0x2c8>)
 8000f6e:	21ea      	movs	r1, #234	; 0xea
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <_dtoa_r+0x2cc>)
 8000f72:	f00e fc2d 	bl	800f7d0 <__assert_func>
 8000f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000f7a:	6004      	str	r4, [r0, #0]
 8000f7c:	60c4      	str	r4, [r0, #12]
 8000f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	b151      	cbz	r1, 8000f9a <_dtoa_r+0x52>
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	604a      	str	r2, [r1, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f00f fc7a 	bl	8010888 <_Bfree>
 8000f94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	1e3b      	subs	r3, r7, #0
 8000f9c:	bfb9      	ittee	lt
 8000f9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	9305      	strlt	r3, [sp, #20]
 8000fa4:	2300      	movge	r3, #0
 8000fa6:	f8c8 3000 	strge.w	r3, [r8]
 8000faa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000fae:	4b9a      	ldr	r3, [pc, #616]	; (8001218 <_dtoa_r+0x2d0>)
 8000fb0:	bfbc      	itt	lt
 8000fb2:	2201      	movlt	r2, #1
 8000fb4:	f8c8 2000 	strlt.w	r2, [r8]
 8000fb8:	ea33 0309 	bics.w	r3, r3, r9
 8000fbc:	d119      	bne.n	8000ff2 <_dtoa_r+0xaa>
 8000fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000fca:	4333      	orrs	r3, r6
 8000fcc:	f000 8580 	beq.w	8001ad0 <_dtoa_r+0xb88>
 8000fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000fd2:	b953      	cbnz	r3, 8000fea <_dtoa_r+0xa2>
 8000fd4:	4b91      	ldr	r3, [pc, #580]	; (800121c <_dtoa_r+0x2d4>)
 8000fd6:	e022      	b.n	800101e <_dtoa_r+0xd6>
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <_dtoa_r+0x2d8>)
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	9803      	ldr	r0, [sp, #12]
 8000fe4:	b019      	add	sp, #100	; 0x64
 8000fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <_dtoa_r+0x2d4>)
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	e7f5      	b.n	8000fde <_dtoa_r+0x96>
 8000ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000ff6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	2300      	movs	r3, #0
 8001002:	f7ff fd41 	bl	8000a88 <__aeabi_dcmpeq>
 8001006:	4680      	mov	r8, r0
 8001008:	b158      	cbz	r0, 8001022 <_dtoa_r+0xda>
 800100a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800100c:	2301      	movs	r3, #1
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8559 	beq.w	8001aca <_dtoa_r+0xb82>
 8001018:	4882      	ldr	r0, [pc, #520]	; (8001224 <_dtoa_r+0x2dc>)
 800101a:	6018      	str	r0, [r3, #0]
 800101c:	1e43      	subs	r3, r0, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e7df      	b.n	8000fe2 <_dtoa_r+0x9a>
 8001022:	ab16      	add	r3, sp, #88	; 0x58
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	ab17      	add	r3, sp, #92	; 0x5c
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4628      	mov	r0, r5
 800102c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001030:	f00f fea2 	bl	8010d78 <__d2b>
 8001034:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001038:	4683      	mov	fp, r0
 800103a:	2c00      	cmp	r4, #0
 800103c:	d07e      	beq.n	800113c <_dtoa_r+0x1f4>
 800103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001040:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800104c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001050:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001054:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <_dtoa_r+0x2e0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f7ff f8f4 	bl	8000248 <__aeabi_dsub>
 8001060:	a365      	add	r3, pc, #404	; (adr r3, 80011f8 <_dtoa_r+0x2b0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faa7 	bl	80005b8 <__aeabi_dmul>
 800106a:	a365      	add	r3, pc, #404	; (adr r3, 8001200 <_dtoa_r+0x2b8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff f8ec 	bl	800024c <__adddf3>
 8001074:	4606      	mov	r6, r0
 8001076:	4620      	mov	r0, r4
 8001078:	460f      	mov	r7, r1
 800107a:	f7ff fa33 	bl	80004e4 <__aeabi_i2d>
 800107e:	a362      	add	r3, pc, #392	; (adr r3, 8001208 <_dtoa_r+0x2c0>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa98 	bl	80005b8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f8dc 	bl	800024c <__adddf3>
 8001094:	4606      	mov	r6, r0
 8001096:	460f      	mov	r7, r1
 8001098:	f7ff fd28 	bl	8000aec <__aeabi_d2iz>
 800109c:	2200      	movs	r2, #0
 800109e:	4682      	mov	sl, r0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4630      	mov	r0, r6
 80010a4:	4639      	mov	r1, r7
 80010a6:	f7ff fcf9 	bl	8000a9c <__aeabi_dcmplt>
 80010aa:	b148      	cbz	r0, 80010c0 <_dtoa_r+0x178>
 80010ac:	4650      	mov	r0, sl
 80010ae:	f7ff fa19 	bl	80004e4 <__aeabi_i2d>
 80010b2:	4632      	mov	r2, r6
 80010b4:	463b      	mov	r3, r7
 80010b6:	f7ff fce7 	bl	8000a88 <__aeabi_dcmpeq>
 80010ba:	b908      	cbnz	r0, 80010c0 <_dtoa_r+0x178>
 80010bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010c0:	f1ba 0f16 	cmp.w	sl, #22
 80010c4:	d857      	bhi.n	8001176 <_dtoa_r+0x22e>
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <_dtoa_r+0x2e4>)
 80010c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010d4:	f7ff fce2 	bl	8000a9c <__aeabi_dcmplt>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04e      	beq.n	800117a <_dtoa_r+0x232>
 80010dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010e0:	2300      	movs	r3, #0
 80010e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80010e6:	1b1c      	subs	r4, r3, r4
 80010e8:	1e63      	subs	r3, r4, #1
 80010ea:	9309      	str	r3, [sp, #36]	; 0x24
 80010ec:	bf45      	ittet	mi
 80010ee:	f1c4 0301 	rsbmi	r3, r4, #1
 80010f2:	9306      	strmi	r3, [sp, #24]
 80010f4:	2300      	movpl	r3, #0
 80010f6:	2300      	movmi	r3, #0
 80010f8:	bf4c      	ite	mi
 80010fa:	9309      	strmi	r3, [sp, #36]	; 0x24
 80010fc:	9306      	strpl	r3, [sp, #24]
 80010fe:	f1ba 0f00 	cmp.w	sl, #0
 8001102:	db3c      	blt.n	800117e <_dtoa_r+0x236>
 8001104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001106:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800110a:	4453      	add	r3, sl
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
 800110e:	2300      	movs	r3, #0
 8001110:	930a      	str	r3, [sp, #40]	; 0x28
 8001112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001114:	2b09      	cmp	r3, #9
 8001116:	f200 808d 	bhi.w	8001234 <_dtoa_r+0x2ec>
 800111a:	2b05      	cmp	r3, #5
 800111c:	bfc4      	itt	gt
 800111e:	3b04      	subgt	r3, #4
 8001120:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001124:	f1a3 0302 	sub.w	r3, r3, #2
 8001128:	bfcc      	ite	gt
 800112a:	2400      	movgt	r4, #0
 800112c:	2401      	movle	r4, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	f200 808c 	bhi.w	800124c <_dtoa_r+0x304>
 8001134:	e8df f003 	tbb	[pc, r3]
 8001138:	5b4d4f2d 	.word	0x5b4d4f2d
 800113c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001140:	441c      	add	r4, r3
 8001142:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001146:	2b20      	cmp	r3, #32
 8001148:	bfc3      	ittte	gt
 800114a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800114e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001152:	fa09 f303 	lslgt.w	r3, r9, r3
 8001156:	f1c3 0320 	rsble	r3, r3, #32
 800115a:	bfc6      	itte	gt
 800115c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001160:	4318      	orrgt	r0, r3
 8001162:	fa06 f003 	lslle.w	r0, r6, r3
 8001166:	f7ff f9ad 	bl	80004c4 <__aeabi_ui2d>
 800116a:	2301      	movs	r3, #1
 800116c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001170:	3c01      	subs	r4, #1
 8001172:	9313      	str	r3, [sp, #76]	; 0x4c
 8001174:	e770      	b.n	8001058 <_dtoa_r+0x110>
 8001176:	2301      	movs	r3, #1
 8001178:	e7b3      	b.n	80010e2 <_dtoa_r+0x19a>
 800117a:	900f      	str	r0, [sp, #60]	; 0x3c
 800117c:	e7b2      	b.n	80010e4 <_dtoa_r+0x19c>
 800117e:	9b06      	ldr	r3, [sp, #24]
 8001180:	eba3 030a 	sub.w	r3, r3, sl
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	f1ca 0300 	rsb	r3, sl, #0
 800118a:	930a      	str	r3, [sp, #40]	; 0x28
 800118c:	2300      	movs	r3, #0
 800118e:	930e      	str	r3, [sp, #56]	; 0x38
 8001190:	e7bf      	b.n	8001112 <_dtoa_r+0x1ca>
 8001192:	2300      	movs	r3, #0
 8001194:	930b      	str	r3, [sp, #44]	; 0x2c
 8001196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc5a      	bgt.n	8001252 <_dtoa_r+0x30a>
 800119c:	f04f 0901 	mov.w	r9, #1
 80011a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80011a4:	464b      	mov	r3, r9
 80011a6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80011aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	6042      	str	r2, [r0, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	f102 0614 	add.w	r6, r2, #20
 80011b6:	429e      	cmp	r6, r3
 80011b8:	6841      	ldr	r1, [r0, #4]
 80011ba:	d950      	bls.n	800125e <_dtoa_r+0x316>
 80011bc:	4628      	mov	r0, r5
 80011be:	f00f fb23 	bl	8010808 <_Balloc>
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d14e      	bne.n	8001266 <_dtoa_r+0x31e>
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <_dtoa_r+0x2e8>)
 80011ca:	4602      	mov	r2, r0
 80011cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011d0:	e6ce      	b.n	8000f70 <_dtoa_r+0x28>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e7de      	b.n	8001194 <_dtoa_r+0x24c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80011da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011dc:	eb0a 0903 	add.w	r9, sl, r3
 80011e0:	f109 0301 	add.w	r3, r9, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	bfb8      	it	lt
 80011ea:	2301      	movlt	r3, #1
 80011ec:	e7dd      	b.n	80011aa <_dtoa_r+0x262>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e7f2      	b.n	80011d8 <_dtoa_r+0x290>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	636f4361 	.word	0x636f4361
 80011fc:	3fd287a7 	.word	0x3fd287a7
 8001200:	8b60c8b3 	.word	0x8b60c8b3
 8001204:	3fc68a28 	.word	0x3fc68a28
 8001208:	509f79fb 	.word	0x509f79fb
 800120c:	3fd34413 	.word	0x3fd34413
 8001210:	0801740f 	.word	0x0801740f
 8001214:	08017426 	.word	0x08017426
 8001218:	7ff00000 	.word	0x7ff00000
 800121c:	0801740b 	.word	0x0801740b
 8001220:	08017402 	.word	0x08017402
 8001224:	080173df 	.word	0x080173df
 8001228:	3ff80000 	.word	0x3ff80000
 800122c:	080151d0 	.word	0x080151d0
 8001230:	08017480 	.word	0x08017480
 8001234:	2401      	movs	r4, #1
 8001236:	2300      	movs	r3, #0
 8001238:	9322      	str	r3, [sp, #136]	; 0x88
 800123a:	940b      	str	r4, [sp, #44]	; 0x2c
 800123c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001240:	2200      	movs	r2, #0
 8001242:	f8cd 9020 	str.w	r9, [sp, #32]
 8001246:	2312      	movs	r3, #18
 8001248:	9223      	str	r2, [sp, #140]	; 0x8c
 800124a:	e7ae      	b.n	80011aa <_dtoa_r+0x262>
 800124c:	2301      	movs	r3, #1
 800124e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001250:	e7f4      	b.n	800123c <_dtoa_r+0x2f4>
 8001252:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001256:	f8cd 9020 	str.w	r9, [sp, #32]
 800125a:	464b      	mov	r3, r9
 800125c:	e7a5      	b.n	80011aa <_dtoa_r+0x262>
 800125e:	3101      	adds	r1, #1
 8001260:	6041      	str	r1, [r0, #4]
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	e7a5      	b.n	80011b2 <_dtoa_r+0x26a>
 8001266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001268:	9a03      	ldr	r2, [sp, #12]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	9b08      	ldr	r3, [sp, #32]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	f200 80a8 	bhi.w	80013c4 <_dtoa_r+0x47c>
 8001274:	2c00      	cmp	r4, #0
 8001276:	f000 80a5 	beq.w	80013c4 <_dtoa_r+0x47c>
 800127a:	f1ba 0f00 	cmp.w	sl, #0
 800127e:	dd34      	ble.n	80012ea <_dtoa_r+0x3a2>
 8001280:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <_dtoa_r+0x5a4>)
 8001282:	f00a 030f 	and.w	r3, sl, #15
 8001286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800128a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800128e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001296:	ea4f 142a 	mov.w	r4, sl, asr #4
 800129a:	d016      	beq.n	80012ca <_dtoa_r+0x382>
 800129c:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <_dtoa_r+0x5a8>)
 800129e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012a6:	f7ff fab1 	bl	800080c <__aeabi_ddiv>
 80012aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012ae:	f004 040f 	and.w	r4, r4, #15
 80012b2:	2703      	movs	r7, #3
 80012b4:	4e8e      	ldr	r6, [pc, #568]	; (80014f0 <_dtoa_r+0x5a8>)
 80012b6:	b954      	cbnz	r4, 80012ce <_dtoa_r+0x386>
 80012b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012c0:	f7ff faa4 	bl	800080c <__aeabi_ddiv>
 80012c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012c8:	e029      	b.n	800131e <_dtoa_r+0x3d6>
 80012ca:	2702      	movs	r7, #2
 80012cc:	e7f2      	b.n	80012b4 <_dtoa_r+0x36c>
 80012ce:	07e1      	lsls	r1, r4, #31
 80012d0:	d508      	bpl.n	80012e4 <_dtoa_r+0x39c>
 80012d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012da:	f7ff f96d 	bl	80005b8 <__aeabi_dmul>
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	3701      	adds	r7, #1
 80012e4:	1064      	asrs	r4, r4, #1
 80012e6:	3608      	adds	r6, #8
 80012e8:	e7e5      	b.n	80012b6 <_dtoa_r+0x36e>
 80012ea:	f000 80a5 	beq.w	8001438 <_dtoa_r+0x4f0>
 80012ee:	f1ca 0400 	rsb	r4, sl, #0
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <_dtoa_r+0x5a4>)
 80012f4:	4e7e      	ldr	r6, [pc, #504]	; (80014f0 <_dtoa_r+0x5a8>)
 80012f6:	f004 020f 	and.w	r2, r4, #15
 80012fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001306:	f7ff f957 	bl	80005b8 <__aeabi_dmul>
 800130a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800130e:	1124      	asrs	r4, r4, #4
 8001310:	2300      	movs	r3, #0
 8001312:	2702      	movs	r7, #2
 8001314:	2c00      	cmp	r4, #0
 8001316:	f040 8084 	bne.w	8001422 <_dtoa_r+0x4da>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d2      	bne.n	80012c4 <_dtoa_r+0x37c>
 800131e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808b 	beq.w	800143c <_dtoa_r+0x4f4>
 8001326:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800132a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800132e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <_dtoa_r+0x5ac>)
 8001334:	2200      	movs	r2, #0
 8001336:	f7ff fbb1 	bl	8000a9c <__aeabi_dcmplt>
 800133a:	2800      	cmp	r0, #0
 800133c:	d07e      	beq.n	800143c <_dtoa_r+0x4f4>
 800133e:	9b08      	ldr	r3, [sp, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07b      	beq.n	800143c <_dtoa_r+0x4f4>
 8001344:	f1b9 0f00 	cmp.w	r9, #0
 8001348:	dd38      	ble.n	80013bc <_dtoa_r+0x474>
 800134a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <_dtoa_r+0x5b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	f7ff f931 	bl	80005b8 <__aeabi_dmul>
 8001356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800135a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800135e:	3701      	adds	r7, #1
 8001360:	464c      	mov	r4, r9
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff f8be 	bl	80004e4 <__aeabi_i2d>
 8001368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800136c:	f7ff f924 	bl	80005b8 <__aeabi_dmul>
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <_dtoa_r+0x5b4>)
 8001372:	2200      	movs	r2, #0
 8001374:	f7fe ff6a 	bl	800024c <__adddf3>
 8001378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001380:	9611      	str	r6, [sp, #68]	; 0x44
 8001382:	2c00      	cmp	r4, #0
 8001384:	d15d      	bne.n	8001442 <_dtoa_r+0x4fa>
 8001386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <_dtoa_r+0x5b8>)
 800138c:	2200      	movs	r2, #0
 800138e:	f7fe ff5b 	bl	8000248 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800139c:	4633      	mov	r3, r6
 800139e:	f7ff fb9b 	bl	8000ad8 <__aeabi_dcmpgt>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	f040 829c 	bne.w	80018e0 <_dtoa_r+0x998>
 80013a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80013b2:	f7ff fb73 	bl	8000a9c <__aeabi_dcmplt>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f040 8290 	bne.w	80018dc <_dtoa_r+0x994>
 80013bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80013c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f2c0 8152 	blt.w	8001670 <_dtoa_r+0x728>
 80013cc:	f1ba 0f0e 	cmp.w	sl, #14
 80013d0:	f300 814e 	bgt.w	8001670 <_dtoa_r+0x728>
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_dtoa_r+0x5a4>)
 80013d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80013da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80013e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f280 80db 	bge.w	80015a0 <_dtoa_r+0x658>
 80013ea:	9b08      	ldr	r3, [sp, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f300 80d7 	bgt.w	80015a0 <_dtoa_r+0x658>
 80013f2:	f040 8272 	bne.w	80018da <_dtoa_r+0x992>
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <_dtoa_r+0x5b8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80013fe:	f7ff f8db 	bl	80005b8 <__aeabi_dmul>
 8001402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001406:	f7ff fb5d 	bl	8000ac4 <__aeabi_dcmpge>
 800140a:	9c08      	ldr	r4, [sp, #32]
 800140c:	4626      	mov	r6, r4
 800140e:	2800      	cmp	r0, #0
 8001410:	f040 8248 	bne.w	80018a4 <_dtoa_r+0x95c>
 8001414:	9f03      	ldr	r7, [sp, #12]
 8001416:	2331      	movs	r3, #49	; 0x31
 8001418:	f807 3b01 	strb.w	r3, [r7], #1
 800141c:	f10a 0a01 	add.w	sl, sl, #1
 8001420:	e244      	b.n	80018ac <_dtoa_r+0x964>
 8001422:	07e2      	lsls	r2, r4, #31
 8001424:	d505      	bpl.n	8001432 <_dtoa_r+0x4ea>
 8001426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800142a:	f7ff f8c5 	bl	80005b8 <__aeabi_dmul>
 800142e:	3701      	adds	r7, #1
 8001430:	2301      	movs	r3, #1
 8001432:	1064      	asrs	r4, r4, #1
 8001434:	3608      	adds	r6, #8
 8001436:	e76d      	b.n	8001314 <_dtoa_r+0x3cc>
 8001438:	2702      	movs	r7, #2
 800143a:	e770      	b.n	800131e <_dtoa_r+0x3d6>
 800143c:	9c08      	ldr	r4, [sp, #32]
 800143e:	46d0      	mov	r8, sl
 8001440:	e78f      	b.n	8001362 <_dtoa_r+0x41a>
 8001442:	9903      	ldr	r1, [sp, #12]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_dtoa_r+0x5a4>)
 8001446:	4421      	add	r1, r4
 8001448:	9112      	str	r1, [sp, #72]	; 0x48
 800144a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800144c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001450:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001454:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001458:	2900      	cmp	r1, #0
 800145a:	d055      	beq.n	8001508 <_dtoa_r+0x5c0>
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <_dtoa_r+0x5bc>)
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f9d4 	bl	800080c <__aeabi_ddiv>
 8001464:	463b      	mov	r3, r7
 8001466:	4632      	mov	r2, r6
 8001468:	f7fe feee 	bl	8000248 <__aeabi_dsub>
 800146c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001470:	9f03      	ldr	r7, [sp, #12]
 8001472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001476:	f7ff fb39 	bl	8000aec <__aeabi_d2iz>
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff f832 	bl	80004e4 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001488:	f7fe fede 	bl	8000248 <__aeabi_dsub>
 800148c:	3430      	adds	r4, #48	; 0x30
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001496:	f807 4b01 	strb.w	r4, [r7], #1
 800149a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800149e:	f7ff fafd 	bl	8000a9c <__aeabi_dcmplt>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d174      	bne.n	8001590 <_dtoa_r+0x648>
 80014a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <_dtoa_r+0x5ac>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7fe fecb 	bl	8000248 <__aeabi_dsub>
 80014b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014b6:	f7ff faf1 	bl	8000a9c <__aeabi_dcmplt>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 80b7 	bne.w	800162e <_dtoa_r+0x6e6>
 80014c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014c2:	429f      	cmp	r7, r3
 80014c4:	f43f af7a 	beq.w	80013bc <_dtoa_r+0x474>
 80014c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <_dtoa_r+0x5b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_dmul>
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_dtoa_r+0x5b0>)
 80014d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014e8:	e7c3      	b.n	8001472 <_dtoa_r+0x52a>
 80014ea:	bf00      	nop
 80014ec:	080151d0 	.word	0x080151d0
 80014f0:	080151a8 	.word	0x080151a8
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40240000 	.word	0x40240000
 80014fc:	401c0000 	.word	0x401c0000
 8001500:	40140000 	.word	0x40140000
 8001504:	3fe00000 	.word	0x3fe00000
 8001508:	4630      	mov	r0, r6
 800150a:	4639      	mov	r1, r7
 800150c:	f7ff f854 	bl	80005b8 <__aeabi_dmul>
 8001510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001516:	9c03      	ldr	r4, [sp, #12]
 8001518:	9314      	str	r3, [sp, #80]	; 0x50
 800151a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800151e:	f7ff fae5 	bl	8000aec <__aeabi_d2iz>
 8001522:	9015      	str	r0, [sp, #84]	; 0x54
 8001524:	f7fe ffde 	bl	80004e4 <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001530:	f7fe fe8a 	bl	8000248 <__aeabi_dsub>
 8001534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001536:	3330      	adds	r3, #48	; 0x30
 8001538:	f804 3b01 	strb.w	r3, [r4], #1
 800153c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800153e:	429c      	cmp	r4, r3
 8001540:	4606      	mov	r6, r0
 8001542:	460f      	mov	r7, r1
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	d124      	bne.n	8001594 <_dtoa_r+0x64c>
 800154a:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <_dtoa_r+0x894>)
 800154c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001550:	f7fe fe7c 	bl	800024c <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4630      	mov	r0, r6
 800155a:	4639      	mov	r1, r7
 800155c:	f7ff fabc 	bl	8000ad8 <__aeabi_dcmpgt>
 8001560:	2800      	cmp	r0, #0
 8001562:	d163      	bne.n	800162c <_dtoa_r+0x6e4>
 8001564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001568:	499c      	ldr	r1, [pc, #624]	; (80017dc <_dtoa_r+0x894>)
 800156a:	2000      	movs	r0, #0
 800156c:	f7fe fe6c 	bl	8000248 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4630      	mov	r0, r6
 8001576:	4639      	mov	r1, r7
 8001578:	f7ff fa90 	bl	8000a9c <__aeabi_dcmplt>
 800157c:	2800      	cmp	r0, #0
 800157e:	f43f af1d 	beq.w	80013bc <_dtoa_r+0x474>
 8001582:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001584:	1e7b      	subs	r3, r7, #1
 8001586:	9314      	str	r3, [sp, #80]	; 0x50
 8001588:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d0f8      	beq.n	8001582 <_dtoa_r+0x63a>
 8001590:	46c2      	mov	sl, r8
 8001592:	e03b      	b.n	800160c <_dtoa_r+0x6c4>
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <_dtoa_r+0x898>)
 8001596:	f7ff f80f 	bl	80005b8 <__aeabi_dmul>
 800159a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800159e:	e7bc      	b.n	800151a <_dtoa_r+0x5d2>
 80015a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80015a4:	9f03      	ldr	r7, [sp, #12]
 80015a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015aa:	4640      	mov	r0, r8
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7ff f92d 	bl	800080c <__aeabi_ddiv>
 80015b2:	f7ff fa9b 	bl	8000aec <__aeabi_d2iz>
 80015b6:	4604      	mov	r4, r0
 80015b8:	f7fe ff94 	bl	80004e4 <__aeabi_i2d>
 80015bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015c0:	f7fe fffa 	bl	80005b8 <__aeabi_dmul>
 80015c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4640      	mov	r0, r8
 80015ce:	4649      	mov	r1, r9
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_dsub>
 80015d4:	f807 6b01 	strb.w	r6, [r7], #1
 80015d8:	9e03      	ldr	r6, [sp, #12]
 80015da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80015de:	1bbe      	subs	r6, r7, r6
 80015e0:	45b4      	cmp	ip, r6
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	d136      	bne.n	8001656 <_dtoa_r+0x70e>
 80015e8:	f7fe fe30 	bl	800024c <__adddf3>
 80015ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015f0:	4680      	mov	r8, r0
 80015f2:	4689      	mov	r9, r1
 80015f4:	f7ff fa70 	bl	8000ad8 <__aeabi_dcmpgt>
 80015f8:	bb58      	cbnz	r0, 8001652 <_dtoa_r+0x70a>
 80015fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7ff fa41 	bl	8000a88 <__aeabi_dcmpeq>
 8001606:	b108      	cbz	r0, 800160c <_dtoa_r+0x6c4>
 8001608:	07e1      	lsls	r1, r4, #31
 800160a:	d422      	bmi.n	8001652 <_dtoa_r+0x70a>
 800160c:	4628      	mov	r0, r5
 800160e:	4659      	mov	r1, fp
 8001610:	f00f f93a 	bl	8010888 <_Bfree>
 8001614:	2300      	movs	r3, #0
 8001616:	703b      	strb	r3, [r7, #0]
 8001618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800161a:	f10a 0001 	add.w	r0, sl, #1
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001622:	2b00      	cmp	r3, #0
 8001624:	f43f acdd 	beq.w	8000fe2 <_dtoa_r+0x9a>
 8001628:	601f      	str	r7, [r3, #0]
 800162a:	e4da      	b.n	8000fe2 <_dtoa_r+0x9a>
 800162c:	4627      	mov	r7, r4
 800162e:	463b      	mov	r3, r7
 8001630:	461f      	mov	r7, r3
 8001632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001636:	2a39      	cmp	r2, #57	; 0x39
 8001638:	d107      	bne.n	800164a <_dtoa_r+0x702>
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d1f7      	bne.n	8001630 <_dtoa_r+0x6e8>
 8001640:	9903      	ldr	r1, [sp, #12]
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	f108 0801 	add.w	r8, r8, #1
 8001648:	700a      	strb	r2, [r1, #0]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	3201      	adds	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e79e      	b.n	8001590 <_dtoa_r+0x648>
 8001652:	46d0      	mov	r8, sl
 8001654:	e7eb      	b.n	800162e <_dtoa_r+0x6e6>
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <_dtoa_r+0x898>)
 8001658:	2200      	movs	r2, #0
 800165a:	f7fe ffad 	bl	80005b8 <__aeabi_dmul>
 800165e:	2200      	movs	r2, #0
 8001660:	2300      	movs	r3, #0
 8001662:	4680      	mov	r8, r0
 8001664:	4689      	mov	r9, r1
 8001666:	f7ff fa0f 	bl	8000a88 <__aeabi_dcmpeq>
 800166a:	2800      	cmp	r0, #0
 800166c:	d09b      	beq.n	80015a6 <_dtoa_r+0x65e>
 800166e:	e7cd      	b.n	800160c <_dtoa_r+0x6c4>
 8001670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001672:	2a00      	cmp	r2, #0
 8001674:	f000 80d0 	beq.w	8001818 <_dtoa_r+0x8d0>
 8001678:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800167a:	2a01      	cmp	r2, #1
 800167c:	f300 80b2 	bgt.w	80017e4 <_dtoa_r+0x89c>
 8001680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001682:	2a00      	cmp	r2, #0
 8001684:	f000 80a6 	beq.w	80017d4 <_dtoa_r+0x88c>
 8001688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800168c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800168e:	9f06      	ldr	r7, [sp, #24]
 8001690:	9a06      	ldr	r2, [sp, #24]
 8001692:	441a      	add	r2, r3
 8001694:	9206      	str	r2, [sp, #24]
 8001696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001698:	2101      	movs	r1, #1
 800169a:	441a      	add	r2, r3
 800169c:	4628      	mov	r0, r5
 800169e:	9209      	str	r2, [sp, #36]	; 0x24
 80016a0:	f00f f95a 	bl	8010958 <__i2b>
 80016a4:	4606      	mov	r6, r0
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	dd0c      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd09      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016b0:	42bb      	cmp	r3, r7
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	bfa8      	it	ge
 80016b6:	463b      	movge	r3, r7
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	9206      	str	r2, [sp, #24]
 80016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016be:	1aff      	subs	r7, r7, r3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
 80016c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c6:	b1f3      	cbz	r3, 8001706 <_dtoa_r+0x7be>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a8 	beq.w	8001820 <_dtoa_r+0x8d8>
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	dd10      	ble.n	80016f6 <_dtoa_r+0x7ae>
 80016d4:	4631      	mov	r1, r6
 80016d6:	4622      	mov	r2, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f00f f9fb 	bl	8010ad4 <__pow5mult>
 80016de:	465a      	mov	r2, fp
 80016e0:	4601      	mov	r1, r0
 80016e2:	4606      	mov	r6, r0
 80016e4:	4628      	mov	r0, r5
 80016e6:	f00f f94d 	bl	8010984 <__multiply>
 80016ea:	4659      	mov	r1, fp
 80016ec:	4680      	mov	r8, r0
 80016ee:	4628      	mov	r0, r5
 80016f0:	f00f f8ca 	bl	8010888 <_Bfree>
 80016f4:	46c3      	mov	fp, r8
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	1b1a      	subs	r2, r3, r4
 80016fa:	d004      	beq.n	8001706 <_dtoa_r+0x7be>
 80016fc:	4659      	mov	r1, fp
 80016fe:	4628      	mov	r0, r5
 8001700:	f00f f9e8 	bl	8010ad4 <__pow5mult>
 8001704:	4683      	mov	fp, r0
 8001706:	2101      	movs	r1, #1
 8001708:	4628      	mov	r0, r5
 800170a:	f00f f925 	bl	8010958 <__i2b>
 800170e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	f340 8086 	ble.w	8001824 <_dtoa_r+0x8dc>
 8001718:	461a      	mov	r2, r3
 800171a:	4601      	mov	r1, r0
 800171c:	4628      	mov	r0, r5
 800171e:	f00f f9d9 	bl	8010ad4 <__pow5mult>
 8001722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001724:	2b01      	cmp	r3, #1
 8001726:	4604      	mov	r4, r0
 8001728:	dd7f      	ble.n	800182a <_dtoa_r+0x8e2>
 800172a:	f04f 0800 	mov.w	r8, #0
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001734:	6918      	ldr	r0, [r3, #16]
 8001736:	f013 f8f4 	bl	8014922 <__hi0bits>
 800173a:	f1c0 0020 	rsb	r0, r0, #32
 800173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001740:	4418      	add	r0, r3
 8001742:	f010 001f 	ands.w	r0, r0, #31
 8001746:	f000 8092 	beq.w	800186e <_dtoa_r+0x926>
 800174a:	f1c0 0320 	rsb	r3, r0, #32
 800174e:	2b04      	cmp	r3, #4
 8001750:	f340 808a 	ble.w	8001868 <_dtoa_r+0x920>
 8001754:	f1c0 001c 	rsb	r0, r0, #28
 8001758:	9b06      	ldr	r3, [sp, #24]
 800175a:	4403      	add	r3, r0
 800175c:	9306      	str	r3, [sp, #24]
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4403      	add	r3, r0
 8001762:	4407      	add	r7, r0
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
 8001766:	9b06      	ldr	r3, [sp, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd05      	ble.n	8001778 <_dtoa_r+0x830>
 800176c:	4659      	mov	r1, fp
 800176e:	461a      	mov	r2, r3
 8001770:	4628      	mov	r0, r5
 8001772:	f00f fa09 	bl	8010b88 <__lshift>
 8001776:	4683      	mov	fp, r0
 8001778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd05      	ble.n	800178a <_dtoa_r+0x842>
 800177e:	4621      	mov	r1, r4
 8001780:	461a      	mov	r2, r3
 8001782:	4628      	mov	r0, r5
 8001784:	f00f fa00 	bl	8010b88 <__lshift>
 8001788:	4604      	mov	r4, r0
 800178a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d070      	beq.n	8001872 <_dtoa_r+0x92a>
 8001790:	4621      	mov	r1, r4
 8001792:	4658      	mov	r0, fp
 8001794:	f013 f912 	bl	80149bc <__mcmp>
 8001798:	2800      	cmp	r0, #0
 800179a:	da6a      	bge.n	8001872 <_dtoa_r+0x92a>
 800179c:	2300      	movs	r3, #0
 800179e:	4659      	mov	r1, fp
 80017a0:	220a      	movs	r2, #10
 80017a2:	4628      	mov	r0, r5
 80017a4:	f00f f892 	bl	80108cc <__multadd>
 80017a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80017ae:	4683      	mov	fp, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8194 	beq.w	8001ade <_dtoa_r+0xb96>
 80017b6:	4631      	mov	r1, r6
 80017b8:	2300      	movs	r3, #0
 80017ba:	220a      	movs	r2, #10
 80017bc:	4628      	mov	r0, r5
 80017be:	f00f f885 	bl	80108cc <__multadd>
 80017c2:	f1b9 0f00 	cmp.w	r9, #0
 80017c6:	4606      	mov	r6, r0
 80017c8:	f300 8093 	bgt.w	80018f2 <_dtoa_r+0x9aa>
 80017cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc57      	bgt.n	8001882 <_dtoa_r+0x93a>
 80017d2:	e08e      	b.n	80018f2 <_dtoa_r+0x9aa>
 80017d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80017da:	e757      	b.n	800168c <_dtoa_r+0x744>
 80017dc:	3fe00000 	.word	0x3fe00000
 80017e0:	40240000 	.word	0x40240000
 80017e4:	9b08      	ldr	r3, [sp, #32]
 80017e6:	1e5c      	subs	r4, r3, #1
 80017e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	bfbf      	itttt	lt
 80017ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80017f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80017f2:	1ae2      	sublt	r2, r4, r3
 80017f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80017f6:	bfb6      	itet	lt
 80017f8:	189b      	addlt	r3, r3, r2
 80017fa:	1b1c      	subge	r4, r3, r4
 80017fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80017fe:	9b08      	ldr	r3, [sp, #32]
 8001800:	bfb8      	it	lt
 8001802:	2400      	movlt	r4, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb9      	ittee	lt
 8001808:	9b06      	ldrlt	r3, [sp, #24]
 800180a:	9a08      	ldrlt	r2, [sp, #32]
 800180c:	9f06      	ldrge	r7, [sp, #24]
 800180e:	9b08      	ldrge	r3, [sp, #32]
 8001810:	bfbc      	itt	lt
 8001812:	1a9f      	sublt	r7, r3, r2
 8001814:	2300      	movlt	r3, #0
 8001816:	e73b      	b.n	8001690 <_dtoa_r+0x748>
 8001818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800181a:	9f06      	ldr	r7, [sp, #24]
 800181c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800181e:	e742      	b.n	80016a6 <_dtoa_r+0x75e>
 8001820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001822:	e76b      	b.n	80016fc <_dtoa_r+0x7b4>
 8001824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001826:	2b01      	cmp	r3, #1
 8001828:	dc19      	bgt.n	800185e <_dtoa_r+0x916>
 800182a:	9b04      	ldr	r3, [sp, #16]
 800182c:	b9bb      	cbnz	r3, 800185e <_dtoa_r+0x916>
 800182e:	9b05      	ldr	r3, [sp, #20]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	b99b      	cbnz	r3, 800185e <_dtoa_r+0x916>
 8001836:	9b05      	ldr	r3, [sp, #20]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	051b      	lsls	r3, r3, #20
 8001840:	b183      	cbz	r3, 8001864 <_dtoa_r+0x91c>
 8001842:	9b06      	ldr	r3, [sp, #24]
 8001844:	3301      	adds	r3, #1
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	9309      	str	r3, [sp, #36]	; 0x24
 800184e:	f04f 0801 	mov.w	r8, #1
 8001852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f af6a 	bne.w	800172e <_dtoa_r+0x7e6>
 800185a:	2001      	movs	r0, #1
 800185c:	e76f      	b.n	800173e <_dtoa_r+0x7f6>
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7f6      	b.n	8001852 <_dtoa_r+0x90a>
 8001864:	4698      	mov	r8, r3
 8001866:	e7f4      	b.n	8001852 <_dtoa_r+0x90a>
 8001868:	f43f af7d 	beq.w	8001766 <_dtoa_r+0x81e>
 800186c:	4618      	mov	r0, r3
 800186e:	301c      	adds	r0, #28
 8001870:	e772      	b.n	8001758 <_dtoa_r+0x810>
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dc36      	bgt.n	80018e6 <_dtoa_r+0x99e>
 8001878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800187a:	2b02      	cmp	r3, #2
 800187c:	dd33      	ble.n	80018e6 <_dtoa_r+0x99e>
 800187e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001882:	f1b9 0f00 	cmp.w	r9, #0
 8001886:	d10d      	bne.n	80018a4 <_dtoa_r+0x95c>
 8001888:	4621      	mov	r1, r4
 800188a:	464b      	mov	r3, r9
 800188c:	2205      	movs	r2, #5
 800188e:	4628      	mov	r0, r5
 8001890:	f00f f81c 	bl	80108cc <__multadd>
 8001894:	4601      	mov	r1, r0
 8001896:	4604      	mov	r4, r0
 8001898:	4658      	mov	r0, fp
 800189a:	f013 f88f 	bl	80149bc <__mcmp>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f73f adb8 	bgt.w	8001414 <_dtoa_r+0x4cc>
 80018a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80018a6:	9f03      	ldr	r7, [sp, #12]
 80018a8:	ea6f 0a03 	mvn.w	sl, r3
 80018ac:	f04f 0800 	mov.w	r8, #0
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f00e ffe8 	bl	8010888 <_Bfree>
 80018b8:	2e00      	cmp	r6, #0
 80018ba:	f43f aea7 	beq.w	800160c <_dtoa_r+0x6c4>
 80018be:	f1b8 0f00 	cmp.w	r8, #0
 80018c2:	d005      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c4:	45b0      	cmp	r8, r6
 80018c6:	d003      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c8:	4641      	mov	r1, r8
 80018ca:	4628      	mov	r0, r5
 80018cc:	f00e ffdc 	bl	8010888 <_Bfree>
 80018d0:	4631      	mov	r1, r6
 80018d2:	4628      	mov	r0, r5
 80018d4:	f00e ffd8 	bl	8010888 <_Bfree>
 80018d8:	e698      	b.n	800160c <_dtoa_r+0x6c4>
 80018da:	2400      	movs	r4, #0
 80018dc:	4626      	mov	r6, r4
 80018de:	e7e1      	b.n	80018a4 <_dtoa_r+0x95c>
 80018e0:	46c2      	mov	sl, r8
 80018e2:	4626      	mov	r6, r4
 80018e4:	e596      	b.n	8001414 <_dtoa_r+0x4cc>
 80018e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fd 	beq.w	8001aec <_dtoa_r+0xba4>
 80018f2:	2f00      	cmp	r7, #0
 80018f4:	dd05      	ble.n	8001902 <_dtoa_r+0x9ba>
 80018f6:	4631      	mov	r1, r6
 80018f8:	463a      	mov	r2, r7
 80018fa:	4628      	mov	r0, r5
 80018fc:	f00f f944 	bl	8010b88 <__lshift>
 8001900:	4606      	mov	r6, r0
 8001902:	f1b8 0f00 	cmp.w	r8, #0
 8001906:	d05c      	beq.n	80019c2 <_dtoa_r+0xa7a>
 8001908:	6871      	ldr	r1, [r6, #4]
 800190a:	4628      	mov	r0, r5
 800190c:	f00e ff7c 	bl	8010808 <_Balloc>
 8001910:	4607      	mov	r7, r0
 8001912:	b928      	cbnz	r0, 8001920 <_dtoa_r+0x9d8>
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <_dtoa_r+0xbd0>)
 8001916:	4602      	mov	r2, r0
 8001918:	f240 21ea 	movw	r1, #746	; 0x2ea
 800191c:	f7ff bb28 	b.w	8000f70 <_dtoa_r+0x28>
 8001920:	6932      	ldr	r2, [r6, #16]
 8001922:	3202      	adds	r2, #2
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	f106 010c 	add.w	r1, r6, #12
 800192a:	300c      	adds	r0, #12
 800192c:	f012 fd9a 	bl	8014464 <memcpy>
 8001930:	2201      	movs	r2, #1
 8001932:	4639      	mov	r1, r7
 8001934:	4628      	mov	r0, r5
 8001936:	f00f f927 	bl	8010b88 <__lshift>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	9308      	str	r3, [sp, #32]
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	444b      	add	r3, r9
 8001944:	930a      	str	r3, [sp, #40]	; 0x28
 8001946:	9b04      	ldr	r3, [sp, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	46b0      	mov	r8, r6
 800194e:	9309      	str	r3, [sp, #36]	; 0x24
 8001950:	4606      	mov	r6, r0
 8001952:	9b08      	ldr	r3, [sp, #32]
 8001954:	4621      	mov	r1, r4
 8001956:	3b01      	subs	r3, #1
 8001958:	4658      	mov	r0, fp
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	f012 ff00 	bl	8014760 <quorem>
 8001960:	4603      	mov	r3, r0
 8001962:	3330      	adds	r3, #48	; 0x30
 8001964:	9006      	str	r0, [sp, #24]
 8001966:	4641      	mov	r1, r8
 8001968:	4658      	mov	r0, fp
 800196a:	930b      	str	r3, [sp, #44]	; 0x2c
 800196c:	f013 f826 	bl	80149bc <__mcmp>
 8001970:	4632      	mov	r2, r6
 8001972:	4681      	mov	r9, r0
 8001974:	4621      	mov	r1, r4
 8001976:	4628      	mov	r0, r5
 8001978:	f00f f976 	bl	8010c68 <__mdiff>
 800197c:	68c2      	ldr	r2, [r0, #12]
 800197e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001980:	4607      	mov	r7, r0
 8001982:	bb02      	cbnz	r2, 80019c6 <_dtoa_r+0xa7e>
 8001984:	4601      	mov	r1, r0
 8001986:	4658      	mov	r0, fp
 8001988:	f013 f818 	bl	80149bc <__mcmp>
 800198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800198e:	4602      	mov	r2, r0
 8001990:	4639      	mov	r1, r7
 8001992:	4628      	mov	r0, r5
 8001994:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001998:	f00e ff76 	bl	8010888 <_Bfree>
 800199c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800199e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019a0:	9f08      	ldr	r7, [sp, #32]
 80019a2:	ea43 0102 	orr.w	r1, r3, r2
 80019a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019ac:	d10d      	bne.n	80019ca <_dtoa_r+0xa82>
 80019ae:	2b39      	cmp	r3, #57	; 0x39
 80019b0:	d029      	beq.n	8001a06 <_dtoa_r+0xabe>
 80019b2:	f1b9 0f00 	cmp.w	r9, #0
 80019b6:	dd01      	ble.n	80019bc <_dtoa_r+0xa74>
 80019b8:	9b06      	ldr	r3, [sp, #24]
 80019ba:	3331      	adds	r3, #49	; 0x31
 80019bc:	9a04      	ldr	r2, [sp, #16]
 80019be:	7013      	strb	r3, [r2, #0]
 80019c0:	e776      	b.n	80018b0 <_dtoa_r+0x968>
 80019c2:	4630      	mov	r0, r6
 80019c4:	e7b9      	b.n	800193a <_dtoa_r+0x9f2>
 80019c6:	2201      	movs	r2, #1
 80019c8:	e7e2      	b.n	8001990 <_dtoa_r+0xa48>
 80019ca:	f1b9 0f00 	cmp.w	r9, #0
 80019ce:	db06      	blt.n	80019de <_dtoa_r+0xa96>
 80019d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80019d2:	ea41 0909 	orr.w	r9, r1, r9
 80019d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019d8:	ea59 0101 	orrs.w	r1, r9, r1
 80019dc:	d120      	bne.n	8001a20 <_dtoa_r+0xad8>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	ddec      	ble.n	80019bc <_dtoa_r+0xa74>
 80019e2:	4659      	mov	r1, fp
 80019e4:	2201      	movs	r2, #1
 80019e6:	4628      	mov	r0, r5
 80019e8:	9308      	str	r3, [sp, #32]
 80019ea:	f00f f8cd 	bl	8010b88 <__lshift>
 80019ee:	4621      	mov	r1, r4
 80019f0:	4683      	mov	fp, r0
 80019f2:	f012 ffe3 	bl	80149bc <__mcmp>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	9b08      	ldr	r3, [sp, #32]
 80019fa:	dc02      	bgt.n	8001a02 <_dtoa_r+0xaba>
 80019fc:	d1de      	bne.n	80019bc <_dtoa_r+0xa74>
 80019fe:	07da      	lsls	r2, r3, #31
 8001a00:	d5dc      	bpl.n	80019bc <_dtoa_r+0xa74>
 8001a02:	2b39      	cmp	r3, #57	; 0x39
 8001a04:	d1d8      	bne.n	80019b8 <_dtoa_r+0xa70>
 8001a06:	9a04      	ldr	r2, [sp, #16]
 8001a08:	2339      	movs	r3, #57	; 0x39
 8001a0a:	7013      	strb	r3, [r2, #0]
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	461f      	mov	r7, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001a16:	2a39      	cmp	r2, #57	; 0x39
 8001a18:	d050      	beq.n	8001abc <_dtoa_r+0xb74>
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e747      	b.n	80018b0 <_dtoa_r+0x968>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dd03      	ble.n	8001a2c <_dtoa_r+0xae4>
 8001a24:	2b39      	cmp	r3, #57	; 0x39
 8001a26:	d0ee      	beq.n	8001a06 <_dtoa_r+0xabe>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	e7c7      	b.n	80019bc <_dtoa_r+0xa74>
 8001a2c:	9a08      	ldr	r2, [sp, #32]
 8001a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d02a      	beq.n	8001a8e <_dtoa_r+0xb46>
 8001a38:	4659      	mov	r1, fp
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f00e ff44 	bl	80108cc <__multadd>
 8001a44:	45b0      	cmp	r8, r6
 8001a46:	4683      	mov	fp, r0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 020a 	mov.w	r2, #10
 8001a50:	4641      	mov	r1, r8
 8001a52:	4628      	mov	r0, r5
 8001a54:	d107      	bne.n	8001a66 <_dtoa_r+0xb1e>
 8001a56:	f00e ff39 	bl	80108cc <__multadd>
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	9b08      	ldr	r3, [sp, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	9308      	str	r3, [sp, #32]
 8001a64:	e775      	b.n	8001952 <_dtoa_r+0xa0a>
 8001a66:	f00e ff31 	bl	80108cc <__multadd>
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	2300      	movs	r3, #0
 8001a70:	220a      	movs	r2, #10
 8001a72:	4628      	mov	r0, r5
 8001a74:	f00e ff2a 	bl	80108cc <__multadd>
 8001a78:	4606      	mov	r6, r0
 8001a7a:	e7f0      	b.n	8001a5e <_dtoa_r+0xb16>
 8001a7c:	f1b9 0f00 	cmp.w	r9, #0
 8001a80:	9a03      	ldr	r2, [sp, #12]
 8001a82:	bfcc      	ite	gt
 8001a84:	464f      	movgt	r7, r9
 8001a86:	2701      	movle	r7, #1
 8001a88:	4417      	add	r7, r2
 8001a8a:	f04f 0800 	mov.w	r8, #0
 8001a8e:	4659      	mov	r1, fp
 8001a90:	2201      	movs	r2, #1
 8001a92:	4628      	mov	r0, r5
 8001a94:	9308      	str	r3, [sp, #32]
 8001a96:	f00f f877 	bl	8010b88 <__lshift>
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4683      	mov	fp, r0
 8001a9e:	f012 ff8d 	bl	80149bc <__mcmp>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dcb2      	bgt.n	8001a0c <_dtoa_r+0xac4>
 8001aa6:	d102      	bne.n	8001aae <_dtoa_r+0xb66>
 8001aa8:	9b08      	ldr	r3, [sp, #32]
 8001aaa:	07db      	lsls	r3, r3, #31
 8001aac:	d4ae      	bmi.n	8001a0c <_dtoa_r+0xac4>
 8001aae:	463b      	mov	r3, r7
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001ab6:	2a30      	cmp	r2, #48	; 0x30
 8001ab8:	d0fa      	beq.n	8001ab0 <_dtoa_r+0xb68>
 8001aba:	e6f9      	b.n	80018b0 <_dtoa_r+0x968>
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1a5      	bne.n	8001a0e <_dtoa_r+0xac6>
 8001ac2:	f10a 0a01 	add.w	sl, sl, #1
 8001ac6:	2331      	movs	r3, #49	; 0x31
 8001ac8:	e779      	b.n	80019be <_dtoa_r+0xa76>
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <_dtoa_r+0xbd4>)
 8001acc:	f7ff baa7 	b.w	800101e <_dtoa_r+0xd6>
 8001ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aa80 	bne.w	8000fd8 <_dtoa_r+0x90>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_dtoa_r+0xbd8>)
 8001ada:	f7ff baa0 	b.w	800101e <_dtoa_r+0xd6>
 8001ade:	f1b9 0f00 	cmp.w	r9, #0
 8001ae2:	dc03      	bgt.n	8001aec <_dtoa_r+0xba4>
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f73f aecb 	bgt.w	8001882 <_dtoa_r+0x93a>
 8001aec:	9f03      	ldr	r7, [sp, #12]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4658      	mov	r0, fp
 8001af2:	f012 fe35 	bl	8014760 <quorem>
 8001af6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001afa:	f807 3b01 	strb.w	r3, [r7], #1
 8001afe:	9a03      	ldr	r2, [sp, #12]
 8001b00:	1aba      	subs	r2, r7, r2
 8001b02:	4591      	cmp	r9, r2
 8001b04:	ddba      	ble.n	8001a7c <_dtoa_r+0xb34>
 8001b06:	4659      	mov	r1, fp
 8001b08:	2300      	movs	r3, #0
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f00e fedd 	bl	80108cc <__multadd>
 8001b12:	4683      	mov	fp, r0
 8001b14:	e7eb      	b.n	8001aee <_dtoa_r+0xba6>
 8001b16:	bf00      	nop
 8001b18:	08017480 	.word	0x08017480
 8001b1c:	080173de 	.word	0x080173de
 8001b20:	08017402 	.word	0x08017402

08001b24 <dwm_task>:
//K_WORK_DELAYABLE_DEFINE(led_off_work, led_off_handler);

atomic_t atomic_twr_status = ATOMIC_INIT((atomic_t) msg_id_t::twr_3_final);

[[noreturn]] void dwm_task()
{
 8001b24:	b500      	push	{lr}
 8001b26:	b093      	sub	sp, #76	; 0x4c

    uint8_t sequence = 0;

    const struct device *dwm_dev =  DEVICE_DT_GET(DT_INST(0, decawave_dw1000));

    msg_header_t tx_poll_msg = {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8001b2c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8001b30:	2207      	movs	r2, #7
 8001b32:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8001b36:	2204      	movs	r2, #4
 8001b38:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8001b3c:	22ff      	movs	r2, #255	; 0xff
 8001b3e:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
        .dest = RESPONDER_ID
      },
      .crc = 0
    };

    dwt_cb_data_t dwt_cb_data = {0};
 8001b42:	930d      	str	r3, [sp, #52]	; 0x34
 8001b44:	930e      	str	r3, [sp, #56]	; 0x38
 8001b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8001b48:	4844      	ldr	r0, [pc, #272]	; (8001c5c <dwm_task+0x138>)
 8001b4a:	f011 ff67 	bl	8013a1c <z_device_is_ready>

    while(!device_is_ready(dwm_dev)) {
 8001b4e:	b920      	cbnz	r0, 8001b5a <dwm_task+0x36>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8001b50:	200a      	movs	r0, #10
 8001b52:	2100      	movs	r1, #0
 8001b54:	f00d f874 	bl	800ec40 <z_impl_k_sleep>
 8001b58:	e7f6      	b.n	8001b48 <dwm_task+0x24>
        k_sleep(K_MSEC(1));
    }

    LOG_INF("responder_thread> starting");
    char dist_str[50] = {'\0'};
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	9400      	str	r4, [sp, #0]
 8001b5e:	222e      	movs	r2, #46	; 0x2e
 8001b60:	4621      	mov	r1, r4
 8001b62:	a801      	add	r0, sp, #4
 8001b64:	f012 fc8c 	bl	8014480 <memset>

    dwt_setinterrupt((DWT_INT_TFRS | DWT_INT_RFCG | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFSL | DWT_INT_RFTO
 8001b68:	2101      	movs	r1, #1
 8001b6a:	483d      	ldr	r0, [pc, #244]	; (8001c60 <dwm_task+0x13c>)
 8001b6c:	f011 fc0a 	bl	8013384 <dwt_setinterrupt>
      | DWT_INT_RXPTO | DWT_INT_SFDT |DWT_INT_ARFE) , 1);
    dwt_setcallbacks(tx_ok_cb, rx_ok_cb, rx_to_cb, rx_err_cb);
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <dwm_task+0x140>)
 8001b72:	4a3d      	ldr	r2, [pc, #244]	; (8001c68 <dwm_task+0x144>)
 8001b74:	493d      	ldr	r1, [pc, #244]	; (8001c6c <dwm_task+0x148>)
 8001b76:	483e      	ldr	r0, [pc, #248]	; (8001c70 <dwm_task+0x14c>)
 8001b78:	f008 fdf6 	bl	800a768 <dwt_setcallbacks>

    init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001b7c:	493d      	ldr	r1, [pc, #244]	; (8001c74 <dwm_task+0x150>)
 8001b7e:	a810      	add	r0, sp, #64	; 0x40
 8001b80:	f00b fcb2 	bl	800d4e8 <init_twr_1_poll_ds_twr>
    uint32_t cnt = 0;
 8001b84:	e000      	b.n	8001b88 <dwm_task+0x64>
        if (k_msgq_get(&msgq_dwt_callback_data, &dwt_cb_data, K_MSEC(1))) {
            init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
            continue;
        }

        switch (ev_dwm[0].signal->result) {
 8001b86:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	483a      	ldr	r0, [pc, #232]	; (8001c78 <dwm_task+0x154>)
 8001b90:	f00d fce4 	bl	800f55c <z_impl_k_poll>
        while (k_poll(ev_dwm, 1, K_NO_WAIT)) {
 8001b94:	b180      	cbz	r0, 8001bb8 <dwm_task+0x94>
	return z_impl_k_sleep(timeout);
 8001b96:	200a      	movs	r0, #10
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f00d f851 	bl	800ec40 <z_impl_k_sleep>
            cnt++;
 8001b9e:	3401      	adds	r4, #1
            if (cnt == 10000000) {
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <dwm_task+0x158>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d1f0      	bne.n	8001b88 <dwm_task+0x64>
                init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001ba6:	4933      	ldr	r1, [pc, #204]	; (8001c74 <dwm_task+0x150>)
 8001ba8:	a810      	add	r0, sp, #64	; 0x40
 8001baa:	f00b fc9d 	bl	800d4e8 <init_twr_1_poll_ds_twr>
                printk("Bad practices dwm is worked\n");
 8001bae:	4834      	ldr	r0, [pc, #208]	; (8001c80 <dwm_task+0x15c>)
 8001bb0:	f00f f9f5 	bl	8010f9e <printk>
                cnt = 0;
 8001bb4:	2400      	movs	r4, #0
 8001bb6:	e7e7      	b.n	8001b88 <dwm_task+0x64>
        ev_dwm[0].signal->signaled = 0;
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <dwm_task+0x154>)
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	6091      	str	r1, [r2, #8]
        ev_dwm[0].state = K_POLL_STATE_NOT_READY;
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	f361 3252 	bfi	r2, r1, #13, #6
 8001bc6:	60da      	str	r2, [r3, #12]
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001bc8:	220a      	movs	r2, #10
 8001bca:	2300      	movs	r3, #0
 8001bcc:	a90d      	add	r1, sp, #52	; 0x34
 8001bce:	482d      	ldr	r0, [pc, #180]	; (8001c84 <dwm_task+0x160>)
 8001bd0:	f00c f984 	bl	800dedc <z_impl_k_msgq_get>
        if (k_msgq_get(&msgq_dwt_callback_data, &dwt_cb_data, K_MSEC(1))) {
 8001bd4:	b9a8      	cbnz	r0, 8001c02 <dwm_task+0xde>
        switch (ev_dwm[0].signal->result) {
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <dwm_task+0x154>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d027      	beq.n	8001c30 <dwm_task+0x10c>
 8001be0:	dc17      	bgt.n	8001c12 <dwm_task+0xee>
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d113      	bne.n	8001c0e <dwm_task+0xea>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001be6:	f3bf 8f5b 	dmb	ish
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <dwm_task+0x150>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f3bf 8f5b 	dmb	ish
            case TX_DONE:
                if (atomic_get(&atomic_twr_status) == (atomic_t) (msg_id_t::twr_3_final)) {
 8001bf2:	2b09      	cmp	r3, #9
 8001bf4:	d016      	beq.n	8001c24 <dwm_task+0x100>
//                    printk("First tx_done\n");
                    init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);

                } else {
//                    printk("Second tx_done\n");
                    init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001bf6:	491f      	ldr	r1, [pc, #124]	; (8001c74 <dwm_task+0x150>)
 8001bf8:	a810      	add	r0, sp, #64	; 0x40
 8001bfa:	f00b fc75 	bl	800d4e8 <init_twr_1_poll_ds_twr>
        cnt = 0;
 8001bfe:	2400      	movs	r4, #0
 8001c00:	e7c2      	b.n	8001b88 <dwm_task+0x64>
            init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001c02:	491c      	ldr	r1, [pc, #112]	; (8001c74 <dwm_task+0x150>)
 8001c04:	a810      	add	r0, sp, #64	; 0x40
 8001c06:	f00b fc6f 	bl	800d4e8 <init_twr_1_poll_ds_twr>
        cnt = 0;
 8001c0a:	2400      	movs	r4, #0
            continue;
 8001c0c:	e7bc      	b.n	8001b88 <dwm_task+0x64>
        switch (ev_dwm[0].signal->result) {
 8001c0e:	2400      	movs	r4, #0
 8001c10:	e7ba      	b.n	8001b88 <dwm_task+0x64>
 8001c12:	3b03      	subs	r3, #3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d8b6      	bhi.n	8001b86 <dwm_task+0x62>

            case RX_TO:
            case RX_ERR:
                /* Restart twr */
//                printk("Restart after rx_to rx_err\n");
                init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001c18:	4916      	ldr	r1, [pc, #88]	; (8001c74 <dwm_task+0x150>)
 8001c1a:	a810      	add	r0, sp, #64	; 0x40
 8001c1c:	f00b fc64 	bl	800d4e8 <init_twr_1_poll_ds_twr>
        cnt = 0;
 8001c20:	2400      	movs	r4, #0
                break;
 8001c22:	e7b1      	b.n	8001b88 <dwm_task+0x64>
                    init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001c24:	4913      	ldr	r1, [pc, #76]	; (8001c74 <dwm_task+0x150>)
 8001c26:	a810      	add	r0, sp, #64	; 0x40
 8001c28:	f00b fc5e 	bl	800d4e8 <init_twr_1_poll_ds_twr>
        cnt = 0;
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	e7ab      	b.n	8001b88 <dwm_task+0x64>
 8001c30:	f3bf 8f5b 	dmb	ish
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <dwm_task+0x150>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3bf 8f5b 	dmb	ish
                if (atomic_get(&atomic_twr_status) == (atomic_t) msg_id_t::twr_1_poll) {
 8001c3c:	2b07      	cmp	r3, #7
 8001c3e:	d005      	beq.n	8001c4c <dwm_task+0x128>
                    init_twr_1_poll_ds_twr(&tx_poll_msg, &atomic_twr_status);
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <dwm_task+0x150>)
 8001c42:	a810      	add	r0, sp, #64	; 0x40
 8001c44:	f00b fc50 	bl	800d4e8 <init_twr_1_poll_ds_twr>
        cnt = 0;
 8001c48:	2400      	movs	r4, #0
 8001c4a:	e79d      	b.n	8001b88 <dwm_task+0x64>
                    init_twr_2_resp_ds_twr(dwm_dev, &tx_poll_msg, &atomic_twr_status, &dwt_cb_data);
 8001c4c:	ab0d      	add	r3, sp, #52	; 0x34
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <dwm_task+0x150>)
 8001c50:	a910      	add	r1, sp, #64	; 0x40
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <dwm_task+0x138>)
 8001c54:	f00b fc98 	bl	800d588 <init_twr_2_resp_ds_twr>
        cnt = 0;
 8001c58:	2400      	movs	r4, #0
 8001c5a:	e795      	b.n	8001b88 <dwm_task+0x64>
 8001c5c:	08014d1c 	.word	0x08014d1c
 8001c60:	2423d080 	.word	0x2423d080
 8001c64:	0800d459 	.word	0x0800d459
 8001c68:	0800d4c5 	.word	0x0800d4c5
 8001c6c:	0800d4a1 	.word	0x0800d4a1
 8001c70:	0800d47d 	.word	0x0800d47d
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000450 	.word	0x20000450
 8001c7c:	00989680 	.word	0x00989680
 8001c80:	08015298 	.word	0x08015298
 8001c84:	200007e0 	.word	0x200007e0

08001c88 <_Z31button_disable_alarm_pressed_cbPK6deviceP13gpio_callbackj>:
            break;
    }
}

void button_disable_alarm_pressed_cb(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
 8001c88:	b508      	push	{r3, lr}
    LOG_DBG("Button disable alarm pressed");
    irq_routine(&button_disable_alarm);
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <_Z31button_disable_alarm_pressed_cbPK6deviceP13gpio_callbackj+0xc>)
 8001c8c:	f00b fba8 	bl	800d3e0 <irq_routine>
}
 8001c90:	bd08      	pop	{r3, pc}
 8001c92:	bf00      	nop
 8001c94:	20000010 	.word	0x20000010

08001c98 <_Z11system_initv>:
{
 8001c98:	b530      	push	{r4, r5, lr}
 8001c9a:	b083      	sub	sp, #12
    struct led_strip_indicate_s *strip_ind = nullptr;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9301      	str	r3, [sp, #4]
     if (!device_is_ready(button_disable_alarm.port)) {
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <_Z11system_initv+0xf4>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f011 feba 	bl	8013a1c <z_device_is_ready>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d056      	beq.n	8001d5a <_Z11system_initv+0xc2>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
 8001cac:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <_Z11system_initv+0xf4>)
 8001cae:	6818      	ldr	r0, [r3, #0]
				  spec->pin,
 8001cb0:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
 8001cb2:	795b      	ldrb	r3, [r3, #5]
	return gpio_pin_configure(spec->port,
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8001cb8:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
 8001cba:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8001cbc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001cc0:	b13a      	cbz	r2, 8001cd2 <_Z11system_initv+0x3a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8001cc2:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001cc6:	d004      	beq.n	8001cd2 <_Z11system_initv+0x3a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8001cc8:	f013 0f01 	tst.w	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <_Z11system_initv+0x3a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8001cce:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8001cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8001cd6:	f013 0f01 	tst.w	r3, #1
 8001cda:	d04b      	beq.n	8001d74 <_Z11system_initv+0xdc>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001cdc:	2301      	movs	r3, #1
 8001cde:	fa03 fc01 	lsl.w	ip, r3, r1
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	ea43 030c 	orr.w	r3, r3, ip
 8001ce8:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <_Z11system_initv+0xf4>)
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
 8001cf4:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
 8001cf6:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8001cfe:	421a      	tst	r2, r3
 8001d00:	d140      	bne.n	8001d84 <_Z11system_initv+0xec>
 8001d02:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8001d06:	69a4      	ldr	r4, [r4, #24]
 8001d08:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8001d0c:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8001d10:	47a0      	blx	r4
                       BIT(button_disable_alarm.pin));
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <_Z11system_initv+0xf4>)
 8001d14:	7911      	ldrb	r1, [r2, #4]
 8001d16:	2301      	movs	r3, #1
 8001d18:	408b      	lsls	r3, r1
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001d1a:	491d      	ldr	r1, [pc, #116]	; (8001d90 <_Z11system_initv+0xf8>)
 8001d1c:	481d      	ldr	r0, [pc, #116]	; (8001d94 <_Z11system_initv+0xfc>)
 8001d1e:	6048      	str	r0, [r1, #4]
	callback->pin_mask = pin_mask;
 8001d20:	608b      	str	r3, [r1, #8]
    gpio_add_callback(button_disable_alarm.port, &button_disable_alarm_cb);
 8001d22:	6810      	ldr	r0, [r2, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8001d24:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	b10b      	cbz	r3, 8001d2e <_Z11system_initv+0x96>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4798      	blx	r3
    common_kernel_services_init();
 8001d2e:	f00a fdd5 	bl	800c8dc <common_kernel_services_init>
    strip_ind = &status_ind;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <_Z11system_initv+0x100>)
 8001d34:	9301      	str	r3, [sp, #4]
    set_ind(&strip_ind, K_FOREVER);
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3e:	a801      	add	r0, sp, #4
 8001d40:	f00a fc9c 	bl	800c67c <set_ind>
    current_state = recv_state;
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <_Z11system_initv+0x104>)
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <_Z11system_initv+0x108>)
 8001d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4c:	e883 0003 	stmia.w	r3, {r0, r1}
    set_buzzer_mode(BUZZER_MODE_SINGLE);
 8001d50:	2001      	movs	r0, #1
 8001d52:	f00b f953 	bl	800cffc <set_buzzer_mode>
}
 8001d56:	b003      	add	sp, #12
 8001d58:	bd30      	pop	{r4, r5, pc}
         printk("Error: button device %s is not ready\n", button_disable_alarm.port->name);
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <_Z11system_initv+0xf4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	4810      	ldr	r0, [pc, #64]	; (8001da4 <_Z11system_initv+0x10c>)
 8001d62:	f00f f91c 	bl	8010f9e <printk>
	return z_impl_k_sleep(timeout);
 8001d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d6e:	f00c ff67 	bl	800ec40 <z_impl_k_sleep>
 8001d72:	e79b      	b.n	8001cac <_Z11system_initv+0x14>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8001d74:	2301      	movs	r3, #1
 8001d76:	fa03 fc01 	lsl.w	ip, r3, r1
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	ea23 030c 	bic.w	r3, r3, ip
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	e7b2      	b.n	8001cea <_Z11system_initv+0x52>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8001d84:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8001d88:	e7bd      	b.n	8001d06 <_Z11system_initv+0x6e>
 8001d8a:	bf00      	nop
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	2000118c 	.word	0x2000118c
 8001d94:	08001c89 	.word	0x08001c89
 8001d98:	20000444 	.word	0x20000444
 8001d9c:	2000195c 	.word	0x2000195c
 8001da0:	0801707c 	.word	0x0801707c
 8001da4:	080152b8 	.word	0x080152b8

08001da8 <response_analysis>:
{
 8001da8:	b500      	push	{lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	9201      	str	r2, [sp, #4]
    switch (rx_msg->message_type) {
 8001dae:	7883      	ldrb	r3, [r0, #2]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d823      	bhi.n	8001dfc <response_analysis+0x54>
 8001db4:	e8df f003 	tbb	[pc, r3]
 8001db8:	4b220325 	.word	0x4b220325
 8001dbc:	3b          	.byte	0x3b
 8001dbd:	00          	.byte	0x00
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <response_analysis+0xc8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f3bf 8f5b 	dmb	ish
 8001dc6:	e853 1f00 	ldrex	r1, [r3]
 8001dca:	e843 2000 	strex	r0, r2, [r3]
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <response_analysis+0x1e>
 8001dd2:	f3bf 8f5b 	dmb	ish
            strip_ind = &msg_recv_ind;
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <response_analysis+0xcc>)
 8001dd8:	9301      	str	r3, [sp, #4]
            set_ind(&strip_ind, K_FOREVER);
 8001dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de2:	a801      	add	r0, sp, #4
 8001de4:	f00a fc4a 	bl	800c67c <set_ind>
            strip_ind = &status_ind;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <response_analysis+0xd0>)
 8001dea:	9301      	str	r3, [sp, #4]
            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <response_analysis+0xd4>)
 8001dee:	2300      	movs	r3, #0
 8001df0:	a801      	add	r0, sp, #4
 8001df2:	f00a fc43 	bl	800c67c <set_ind>
            set_buzzer_mode(BUZZER_MODE_DING_DONG);
 8001df6:	2003      	movs	r0, #3
 8001df8:	f00b f900 	bl	800cffc <set_buzzer_mode>
}
 8001dfc:	b003      	add	sp, #12
 8001dfe:	f85d fb04 	ldr.w	pc, [sp], #4
            strip_ind = &alarm_ind;
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <response_analysis+0xd8>)
 8001e04:	9301      	str	r3, [sp, #4]
            set_ind(&strip_ind, K_FOREVER);
 8001e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0e:	a801      	add	r0, sp, #4
 8001e10:	f00a fc34 	bl	800c67c <set_ind>
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <response_analysis+0xc8>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	f3bf 8f5b 	dmb	ish
 8001e1c:	e853 1f00 	ldrex	r1, [r3]
 8001e20:	e843 2000 	strex	r0, r2, [r3]
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d1f9      	bne.n	8001e1c <response_analysis+0x74>
 8001e28:	f3bf 8f5b 	dmb	ish
 8001e2c:	e7e6      	b.n	8001dfc <response_analysis+0x54>
            if (rx_msg->sender_addr == cur_dev_addr) {
 8001e2e:	7803      	ldrb	r3, [r0, #0]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d1e3      	bne.n	8001dfc <response_analysis+0x54>
                strip_ind = &msg_recv_ind;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <response_analysis+0xcc>)
 8001e36:	9301      	str	r3, [sp, #4]
                set_ind(&strip_ind, K_FOREVER);
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e40:	a801      	add	r0, sp, #4
 8001e42:	f00a fc1b 	bl	800c67c <set_ind>
                set_buzzer_mode(BUZZER_MODE_DING_DONG);
 8001e46:	2003      	movs	r0, #3
 8001e48:	f00b f8d8 	bl	800cffc <set_buzzer_mode>
 8001e4c:	e7d6      	b.n	8001dfc <response_analysis+0x54>
            if (rx_msg->sender_addr == cur_dev_addr) {
 8001e4e:	7803      	ldrb	r3, [r0, #0]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d1d3      	bne.n	8001dfc <response_analysis+0x54>
                strip_ind = &msg_recv_ind;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <response_analysis+0xcc>)
 8001e56:	9301      	str	r3, [sp, #4]
                set_ind(&strip_ind, K_FOREVER);
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e60:	a801      	add	r0, sp, #4
 8001e62:	f00a fc0b 	bl	800c67c <set_ind>
                set_buzzer_mode(BUZZER_MODE_DING_DONG);
 8001e66:	2003      	movs	r0, #3
 8001e68:	f00b f8c8 	bl	800cffc <set_buzzer_mode>
}
 8001e6c:	e7c6      	b.n	8001dfc <response_analysis+0x54>
 8001e6e:	bf00      	nop
 8001e70:	20001954 	.word	0x20001954
 8001e74:	200003d4 	.word	0x200003d4
 8001e78:	20000444 	.word	0x20000444
 8001e7c:	000927c0 	.word	0x000927c0
 8001e80:	20000360 	.word	0x20000360

08001e84 <request_analysis>:
{
 8001e84:	b500      	push	{lr}
 8001e86:	b083      	sub	sp, #12
 8001e88:	9201      	str	r2, [sp, #4]
    switch (rx_msg->message_type) {
 8001e8a:	7882      	ldrb	r2, [r0, #2]
 8001e8c:	2a02      	cmp	r2, #2
 8001e8e:	d00f      	beq.n	8001eb0 <request_analysis+0x2c>
 8001e90:	2a05      	cmp	r2, #5
 8001e92:	d112      	bne.n	8001eba <request_analysis+0x36>
            if (is_first) {
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <request_analysis+0x3c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b17b      	cbz	r3, 8001eba <request_analysis+0x36>
                strip_ind = &status_ind;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <request_analysis+0x40>)
 8001e9c:	9301      	str	r3, [sp, #4]
                set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <request_analysis+0x44>)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	a801      	add	r0, sp, #4
 8001ea4:	f00a fbea 	bl	800c67c <set_ind>
                is_first = false;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <request_analysis+0x3c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e004      	b.n	8001eba <request_analysis+0x36>
 8001eb0:	460b      	mov	r3, r1
            set_msg(tx_msg, false);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f00b f88d 	bl	800cfd4 <set_msg>
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ec0:	2000067c 	.word	0x2000067c
 8001ec4:	20000444 	.word	0x20000444
 8001ec8:	000927c0 	.word	0x000927c0

08001ecc <proc_fun>:
{
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	4604      	mov	r4, r0
    int16_t rssi = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8ad 3006 	strh.w	r3, [sp, #6]
    struct message_s tx_msg = {
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (!proc_rx_data(rx_buf, sizeof(rx_buf), &rx_msg, cur_dev_addr)) {
 8001ede:	2303      	movs	r3, #3
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <proc_fun+0x10c>)
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	483d      	ldr	r0, [pc, #244]	; (8001fdc <proc_fun+0x110>)
 8001ee6:	f00a fd45 	bl	800c974 <proc_rx_data>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d052      	beq.n	8001f94 <proc_fun+0xc8>
    switch (rx_msg.direction) {
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <proc_fun+0x10c>)
 8001ef0:	78db      	ldrb	r3, [r3, #3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03b      	beq.n	8001f6e <proc_fun+0xa2>
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10b      	bne.n	8001f12 <proc_fun+0x46>
            tx_msg.sender_addr = cur_dev_addr;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f88d 3000 	strb.w	r3, [sp]
            tx_msg.message_type = rx_msg.message_type;
 8001f00:	4835      	ldr	r0, [pc, #212]	; (8001fd8 <proc_fun+0x10c>)
 8001f02:	7883      	ldrb	r3, [r0, #2]
 8001f04:	f88d 3002 	strb.w	r3, [sp, #2]
            request_analysis(&rx_msg, &tx_msg, strip_ind);
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <proc_fun+0x114>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4669      	mov	r1, sp
 8001f0e:	f7ff ffb9 	bl	8001e84 <request_analysis>
    get_rssi(&rssi);
 8001f12:	f10d 0006 	add.w	r0, sp, #6
 8001f16:	f00b f853 	bl	800cfc0 <get_rssi>
    ((led_strip_indicate_s*)(dev_data))->led_strip_state.status.con_status = check_rssi(rssi);
 8001f1a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]


static inline uint8_t check_rssi(int16_t rssi)
{
    uint8_t leds_num = 0;
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 8001f1e:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001f22:	da2b      	bge.n	8001f7c <proc_fun+0xb0>
        leds_num = 8;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	2a09      	cmp	r2, #9
 8001f2e:	d933      	bls.n	8001f98 <proc_fun+0xcc>
        leds_num = 7;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 8001f30:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8001f34:	b292      	uxth	r2, r2
 8001f36:	2a09      	cmp	r2, #9
 8001f38:	d930      	bls.n	8001f9c <proc_fun+0xd0>
        leds_num = 6;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 8001f3a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	2a09      	cmp	r2, #9
 8001f42:	d92d      	bls.n	8001fa0 <proc_fun+0xd4>
        leds_num = 5;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 8001f44:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	2a04      	cmp	r2, #4
 8001f4c:	d92a      	bls.n	8001fa4 <proc_fun+0xd8>
        leds_num = 4;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 8001f4e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001f52:	b292      	uxth	r2, r2
 8001f54:	2a13      	cmp	r2, #19
 8001f56:	d927      	bls.n	8001fa8 <proc_fun+0xdc>
        leds_num = 3;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 8001f58:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d924      	bls.n	8001fac <proc_fun+0xe0>
        leds_num = 2;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 8001f62:	3382      	adds	r3, #130	; 0x82
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d822      	bhi.n	8001fb0 <proc_fun+0xe4>
        leds_num = 1;
        return leds_num;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e007      	b.n	8001f7e <proc_fun+0xb2>
            response_analysis(&rx_msg, &tx_msg, strip_ind);
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <proc_fun+0x114>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4669      	mov	r1, sp
 8001f74:	4818      	ldr	r0, [pc, #96]	; (8001fd8 <proc_fun+0x10c>)
 8001f76:	f7ff ff17 	bl	8001da8 <response_analysis>
            break;
 8001f7a:	e7ca      	b.n	8001f12 <proc_fun+0x46>
        return leds_num;
 8001f7c:	2308      	movs	r3, #8
    ((led_strip_indicate_s*)(dev_data))->led_strip_state.status.con_status = check_rssi(rssi);
 8001f7e:	6063      	str	r3, [r4, #4]
    ((led_strip_indicate_s*)(dev_data))->led_strip_state.status.people_num = rx_msg.workers_in_safe_zone;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <proc_fun+0x10c>)
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	60a3      	str	r3, [r4, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001f86:	f3bf 8f5b 	dmb	ish
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <proc_fun+0x118>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3bf 8f5b 	dmb	ish
    if (!atomic_get(&alarm_is_active)) {
 8001f92:	b17b      	cbz	r3, 8001fb4 <proc_fun+0xe8>
}
 8001f94:	b002      	add	sp, #8
 8001f96:	bd10      	pop	{r4, pc}
        return leds_num;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	e7f0      	b.n	8001f7e <proc_fun+0xb2>
        return leds_num;
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	e7ee      	b.n	8001f7e <proc_fun+0xb2>
        return leds_num;
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	e7ec      	b.n	8001f7e <proc_fun+0xb2>
        return leds_num;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e7ea      	b.n	8001f7e <proc_fun+0xb2>
        return leds_num;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e7e8      	b.n	8001f7e <proc_fun+0xb2>
        return leds_num;
 8001fac:	2302      	movs	r3, #2
 8001fae:	e7e6      	b.n	8001f7e <proc_fun+0xb2>
    }
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
        return leds_num;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e7e4      	b.n	8001f7e <proc_fun+0xb2>
		arch_syscall_invoke3(*(uintptr_t *)&sig, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 8001fb4:	4c0c      	ldr	r4, [pc, #48]	; (8001fe8 <proc_fun+0x11c>)
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <proc_fun+0x120>)
 8001fb8:	4621      	mov	r1, r4
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <proc_fun+0x124>)
 8001fbc:	f012 f962 	bl	8014284 <z_impl_k_poll_signal_check>
static inline unsigned int indicate_is_enabled()
{
    static unsigned int signaled = 0;
    static int result = 0;
    k_poll_signal_check(&signal_indicate, &signaled, &result);
    return signaled;
 8001fc0:	6823      	ldr	r3, [r4, #0]
        if (indicate_is_enabled()) {
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0e6      	beq.n	8001f94 <proc_fun+0xc8>
            strip_ind = &status_ind;
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <proc_fun+0x114>)
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <proc_fun+0x128>)
 8001fca:	6003      	str	r3, [r0, #0]
            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <proc_fun+0x12c>)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f00a fb54 	bl	800c67c <set_ind>
 8001fd4:	e7de      	b.n	8001f94 <proc_fun+0xc8>
 8001fd6:	bf00      	nop
 8001fd8:	20001184 	.word	0x20001184
 8001fdc:	20001180 	.word	0x20001180
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20001954 	.word	0x20001954
 8001fe8:	2000117c 	.word	0x2000117c
 8001fec:	20001178 	.word	0x20001178
 8001ff0:	20001a1c 	.word	0x20001a1c
 8001ff4:	20000444 	.word	0x20000444
 8001ff8:	000927c0 	.word	0x000927c0

08001ffc <app_task>:
{
 8001ffc:	b500      	push	{lr}
 8001ffe:	b087      	sub	sp, #28
    struct lora_modem_config lora_cfg = {
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <app_task+0xf8>)
 8002002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002004:	ac06      	add	r4, sp, #24
 8002006:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 800200a:	483b      	ldr	r0, [pc, #236]	; (80020f8 <app_task+0xfc>)
 800200c:	f011 fd06 	bl	8013a1c <z_device_is_ready>
    if (!device_is_ready(lora_dev)) {
 8002010:	b188      	cbz	r0, 8002036 <app_task+0x3a>
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8002012:	4839      	ldr	r0, [pc, #228]	; (80020f8 <app_task+0xfc>)
 8002014:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	a902      	add	r1, sp, #8
 800201a:	4798      	blx	r3
    if ( lora_config(lora_dev, &lora_cfg) < 0 ) {
 800201c:	2800      	cmp	r0, #0
 800201e:	db11      	blt.n	8002044 <app_task+0x48>
    struct led_strip_indicate_s *strip_ind = nullptr;
 8002020:	2400      	movs	r4, #0
 8002022:	9401      	str	r4, [sp, #4]
    system_init();
 8002024:	f7ff fe38 	bl	8001c98 <_Z11system_initv>
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
 8002028:	4833      	ldr	r0, [pc, #204]	; (80020f8 <app_task+0xfc>)
 800202a:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <app_task+0x100>)
 8002030:	4933      	ldr	r1, [pc, #204]	; (8002100 <app_task+0x104>)
 8002032:	4798      	blx	r3
    uint32_t cnt = 0;
 8002034:	e021      	b.n	800207a <app_task+0x7e>
	return z_impl_k_sleep(timeout);
 8002036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800203a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800203e:	f00c fdff 	bl	800ec40 <z_impl_k_sleep>
 8002042:	e7e6      	b.n	8002012 <app_task+0x16>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	f00c fdf8 	bl	800ec40 <z_impl_k_sleep>
 8002050:	e7e6      	b.n	8002020 <app_task+0x24>
                printk("Bad practices lora is worked\n");
 8002052:	482c      	ldr	r0, [pc, #176]	; (8002104 <app_task+0x108>)
 8002054:	f00e ffa3 	bl	8010f9e <printk>
                event = EVENT_RX_MODE;
 8002058:	2002      	movs	r0, #2
                cnt = 0;
 800205a:	2400      	movs	r4, #0
 800205c:	e01a      	b.n	8002094 <app_task+0x98>
                    strip_ind = &msg_send_good_ind;
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <app_task+0x10c>)
 8002060:	9301      	str	r3, [sp, #4]
                    set_ind(&strip_ind, K_FOREVER);
 8002062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206a:	a801      	add	r0, sp, #4
 800206c:	f00a fb06 	bl	800c67c <set_ind>
 8002070:	e003      	b.n	800207a <app_task+0x7e>
                proc_fun(&status_ind);
 8002072:	4826      	ldr	r0, [pc, #152]	; (800210c <app_task+0x110>)
 8002074:	f7ff ff2a 	bl	8001ecc <proc_fun>
                cnt = 0;
 8002078:	2400      	movs	r4, #0
 800207a:	200a      	movs	r0, #10
 800207c:	2100      	movs	r1, #0
 800207e:	f00c fddf 	bl	800ec40 <z_impl_k_sleep>
            event = wait_app_event();
 8002082:	f00b f9b9 	bl	800d3f8 <wait_app_event>
            cnt++;
 8002086:	3401      	adds	r4, #1
            if (cnt == 20*PERIOD_TIME_MSEC) {
 8002088:	f245 3320 	movw	r3, #21280	; 0x5320
 800208c:	429c      	cmp	r4, r3
 800208e:	d0e0      	beq.n	8002052 <app_task+0x56>
        } while (event < 0);
 8002090:	2800      	cmp	r0, #0
 8002092:	dbf2      	blt.n	800207a <app_task+0x7e>
        switch (event) {
 8002094:	2801      	cmp	r0, #1
 8002096:	d0ec      	beq.n	8002072 <app_task+0x76>
 8002098:	2802      	cmp	r0, #2
 800209a:	d024      	beq.n	80020e6 <app_task+0xea>
 800209c:	2800      	cmp	r0, #0
 800209e:	d1ec      	bne.n	800207a <app_task+0x7e>
                rc = modem_fun(lora_dev, &lora_cfg);
 80020a0:	a902      	add	r1, sp, #8
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <app_task+0xfc>)
 80020a4:	f00a ff1c 	bl	800cee0 <modem_fun>
                if (!rc) {
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d0d8      	beq.n	800205e <app_task+0x62>
                } else if (rc < 0) {
 80020ac:	2800      	cmp	r0, #0
 80020ae:	dae4      	bge.n	800207a <app_task+0x7e>
                    strip_ind = &msg_send_bad_ind;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <app_task+0x114>)
 80020b2:	9301      	str	r3, [sp, #4]
                    set_ind(&strip_ind, K_FOREVER);
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020bc:	a801      	add	r0, sp, #4
 80020be:	f00a fadd 	bl	800c67c <set_ind>
 80020c2:	f3bf 8f5b 	dmb	ish
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <app_task+0x118>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f3bf 8f5b 	dmb	ish
                    if (atomic_get(&alarm_is_active)) {
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0d3      	beq.n	800207a <app_task+0x7e>
                        strip_ind = &alarm_ind;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <app_task+0x11c>)
 80020d4:	9301      	str	r3, [sp, #4]
                        set_ind(&strip_ind, K_FOREVER);
 80020d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020de:	a801      	add	r0, sp, #4
 80020e0:	f00a facc 	bl	800c67c <set_ind>
 80020e4:	e7c9      	b.n	800207a <app_task+0x7e>
                start_rx(lora_dev, &lora_cfg);
 80020e6:	a902      	add	r1, sp, #8
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <app_task+0xfc>)
 80020ea:	f00a fa97 	bl	800c61c <start_rx>
                cnt = 0;
 80020ee:	2400      	movs	r4, #0
                break;
 80020f0:	e7c3      	b.n	800207a <app_task+0x7e>
 80020f2:	bf00      	nop
 80020f4:	08015170 	.word	0x08015170
 80020f8:	08014d34 	.word	0x08014d34
 80020fc:	0800bedd 	.word	0x0800bedd
 8002100:	0800bfc1 	.word	0x0800bfc1
 8002104:	080152e0 	.word	0x080152e0
 8002108:	200003ec 	.word	0x200003ec
 800210c:	20000444 	.word	0x20000444
 8002110:	200003e0 	.word	0x200003e0
 8002114:	20001954 	.word	0x20001954
 8002118:	20000360 	.word	0x20000360

0800211c <work_button_pressed_handler_dev>:
//    LOG_DBG("Button right train pass pressed");
//    irq_routine(&button_right_train_passed);
//}

void work_button_pressed_handler_dev(struct gpio_dt_spec *irq_gpio)
{
 800211c:	b510      	push	{r4, lr}
 800211e:	4604      	mov	r4, r0
    struct led_strip_indicate_s *strip_ind = nullptr;
    /* Send disable alarm message */
    if ((!strcmp(button_disable_alarm.port->name, irq_gpio->port->name)) &&
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <work_button_pressed_handler_dev+0x2c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6802      	ldr	r2, [r0, #0]
 8002126:	6811      	ldr	r1, [r2, #0]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	f7fe fe8a 	bl	8000e42 <strcmp>
 800212e:	b920      	cbnz	r0, 800213a <work_button_pressed_handler_dev+0x1e>
      (irq_gpio->pin == button_disable_alarm.pin)) {
 8002130:	7922      	ldrb	r2, [r4, #4]
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <work_button_pressed_handler_dev+0x2c>)
 8002134:	791b      	ldrb	r3, [r3, #4]
    if ((!strcmp(button_disable_alarm.port->name, irq_gpio->port->name)) &&
 8002136:	429a      	cmp	r2, r3
 8002138:	d000      	beq.n	800213c <work_button_pressed_handler_dev+0x20>
//    /* Send left train passed */
//    if ((!strcmp(button_left_train_passed.port->name, irq_gpio->port->name)) &&
//      (irq_gpio->pin == button_left_train_passed.pin)) {
//        set_msg(&left_train_passed_msg, false);
//    }
}
 800213a:	bd10      	pop	{r4, pc}
        set_msg(&disable_alarm_msg, true);
 800213c:	2101      	movs	r1, #1
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <work_button_pressed_handler_dev+0x30>)
 8002140:	f00a ff48 	bl	800cfd4 <set_msg>
}
 8002144:	e7f9      	b.n	800213a <work_button_pressed_handler_dev+0x1e>
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010
 800214c:	20000004 	.word	0x20000004

08002150 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8002150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002154:	b089      	sub	sp, #36	; 0x24
 8002156:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8002158:	f010 0a03 	ands.w	sl, r0, #3
 800215c:	f040 8215 	bne.w	800258a <cbvprintf_package+0x43a>
 8002160:	4607      	mov	r7, r0
 8002162:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8002164:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8002166:	b1e0      	cbz	r0, 80021a2 <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8002168:	b127      	cbz	r7, 8002174 <cbvprintf_package+0x24>
 800216a:	1be2      	subs	r2, r4, r7
 800216c:	3204      	adds	r2, #4
 800216e:	455a      	cmp	r2, fp
 8002170:	f200 820e 	bhi.w	8002590 <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 8002174:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8002176:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 800217a:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 800217e:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 8002182:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 8002184:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 8002188:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 800218a:	b107      	cbz	r7, 800218e <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 800218c:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 800218e:	4ac6      	ldr	r2, [pc, #792]	; (80024a8 <cbvprintf_package+0x358>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f0c0 815a 	bcc.w	800244a <cbvprintf_package+0x2fa>
 8002196:	4ac5      	ldr	r2, [pc, #788]	; (80024ac <cbvprintf_package+0x35c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	f0c0 817f 	bcc.w	800249c <cbvprintf_package+0x34c>
 800219e:	2200      	movs	r2, #0
 80021a0:	e154      	b.n	800244c <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 80021a2:	f001 0b07 	and.w	fp, r1, #7
 80021a6:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 80021a8:	f1cb 0b08 	rsb	fp, fp, #8
 80021ac:	e7dc      	b.n	8002168 <cbvprintf_package+0x18>
			if (*fmt == '%') {
 80021ae:	2b25      	cmp	r3, #37	; 0x25
 80021b0:	d105      	bne.n	80021be <cbvprintf_package+0x6e>
				parsing = true;
 80021b2:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 80021b4:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 80021b8:	46c1      	mov	r9, r8
			continue;
 80021ba:	e000      	b.n	80021be <cbvprintf_package+0x6e>
		switch (*fmt) {
 80021bc:	2600      	movs	r6, #0
 80021be:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 80021c0:	f105 0c01 	add.w	ip, r5, #1
 80021c4:	786b      	ldrb	r3, [r5, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8184 	beq.w	80024d4 <cbvprintf_package+0x384>
		if (!parsing) {
 80021cc:	2e00      	cmp	r6, #0
 80021ce:	d0ee      	beq.n	80021ae <cbvprintf_package+0x5e>
		switch (*fmt) {
 80021d0:	f1a3 0120 	sub.w	r1, r3, #32
 80021d4:	295a      	cmp	r1, #90	; 0x5a
 80021d6:	d8f1      	bhi.n	80021bc <cbvprintf_package+0x6c>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <cbvprintf_package+0x90>)
 80021da:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80021de:	bf00      	nop
 80021e0:	080021bf 	.word	0x080021bf
 80021e4:	080021bd 	.word	0x080021bd
 80021e8:	080021bd 	.word	0x080021bd
 80021ec:	080021bf 	.word	0x080021bf
 80021f0:	080021bd 	.word	0x080021bd
 80021f4:	080021bd 	.word	0x080021bd
 80021f8:	080021bd 	.word	0x080021bd
 80021fc:	080021bd 	.word	0x080021bd
 8002200:	080021bd 	.word	0x080021bd
 8002204:	080021bd 	.word	0x080021bd
 8002208:	0800236d 	.word	0x0800236d
 800220c:	080021bf 	.word	0x080021bf
 8002210:	080021bd 	.word	0x080021bd
 8002214:	080021bf 	.word	0x080021bf
 8002218:	080021bf 	.word	0x080021bf
 800221c:	080021bd 	.word	0x080021bd
 8002220:	080021bf 	.word	0x080021bf
 8002224:	080021bf 	.word	0x080021bf
 8002228:	080021bf 	.word	0x080021bf
 800222c:	080021bf 	.word	0x080021bf
 8002230:	080021bf 	.word	0x080021bf
 8002234:	080021bf 	.word	0x080021bf
 8002238:	080021bf 	.word	0x080021bf
 800223c:	080021bf 	.word	0x080021bf
 8002240:	080021bf 	.word	0x080021bf
 8002244:	080021bf 	.word	0x080021bf
 8002248:	080021bd 	.word	0x080021bd
 800224c:	080021bd 	.word	0x080021bd
 8002250:	080021bd 	.word	0x080021bd
 8002254:	080021bd 	.word	0x080021bd
 8002258:	080021bd 	.word	0x080021bd
 800225c:	080021bd 	.word	0x080021bd
 8002260:	080021bd 	.word	0x080021bd
 8002264:	080023d5 	.word	0x080023d5
 8002268:	080021bd 	.word	0x080021bd
 800226c:	080021bd 	.word	0x080021bd
 8002270:	080021bd 	.word	0x080021bd
 8002274:	080023d5 	.word	0x080023d5
 8002278:	080023d5 	.word	0x080023d5
 800227c:	080023d5 	.word	0x080023d5
 8002280:	080021bd 	.word	0x080021bd
 8002284:	080021bd 	.word	0x080021bd
 8002288:	080021bd 	.word	0x080021bd
 800228c:	080021bd 	.word	0x080021bd
 8002290:	080021bf 	.word	0x080021bf
 8002294:	080021bd 	.word	0x080021bd
 8002298:	080021bd 	.word	0x080021bd
 800229c:	080021bd 	.word	0x080021bd
 80022a0:	080021bd 	.word	0x080021bd
 80022a4:	080021bd 	.word	0x080021bd
 80022a8:	080021bd 	.word	0x080021bd
 80022ac:	080021bd 	.word	0x080021bd
 80022b0:	080021bd 	.word	0x080021bd
 80022b4:	080021bd 	.word	0x080021bd
 80022b8:	080021bd 	.word	0x080021bd
 80022bc:	080021bd 	.word	0x080021bd
 80022c0:	08002365 	.word	0x08002365
 80022c4:	080021bd 	.word	0x080021bd
 80022c8:	080021bd 	.word	0x080021bd
 80022cc:	080021bd 	.word	0x080021bd
 80022d0:	080021bd 	.word	0x080021bd
 80022d4:	080021bd 	.word	0x080021bd
 80022d8:	080021bd 	.word	0x080021bd
 80022dc:	080021bd 	.word	0x080021bd
 80022e0:	080021bd 	.word	0x080021bd
 80022e4:	080023d5 	.word	0x080023d5
 80022e8:	080021bd 	.word	0x080021bd
 80022ec:	08002365 	.word	0x08002365
 80022f0:	08002365 	.word	0x08002365
 80022f4:	080023d5 	.word	0x080023d5
 80022f8:	080023d5 	.word	0x080023d5
 80022fc:	080023d5 	.word	0x080023d5
 8002300:	080021bf 	.word	0x080021bf
 8002304:	08002365 	.word	0x08002365
 8002308:	0800234d 	.word	0x0800234d
 800230c:	080021bd 	.word	0x080021bd
 8002310:	080021bf 	.word	0x080021bf
 8002314:	080021bd 	.word	0x080021bd
 8002318:	08002435 	.word	0x08002435
 800231c:	08002365 	.word	0x08002365
 8002320:	08002435 	.word	0x08002435
 8002324:	080021bd 	.word	0x080021bd
 8002328:	080021bd 	.word	0x080021bd
 800232c:	08002435 	.word	0x08002435
 8002330:	0800235d 	.word	0x0800235d
 8002334:	08002365 	.word	0x08002365
 8002338:	080021bd 	.word	0x080021bd
 800233c:	080021bd 	.word	0x080021bd
 8002340:	08002365 	.word	0x08002365
 8002344:	080021bd 	.word	0x080021bd
 8002348:	08002355 	.word	0x08002355
			align = VA_STACK_ALIGN(intmax_t);
 800234c:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 8002350:	46c1      	mov	r9, r8
			continue;
 8002352:	e734      	b.n	80021be <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 8002354:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 8002358:	46c1      	mov	r9, r8
			continue;
 800235a:	e730      	b.n	80021be <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 800235c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 8002360:	46c1      	mov	r9, r8
			continue;
 8002362:	e72c      	b.n	80021be <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 8002364:	782a      	ldrb	r2, [r5, #0]
 8002366:	2a6c      	cmp	r2, #108	; 0x6c
 8002368:	d026      	beq.n	80023b8 <cbvprintf_package+0x268>
			parsing = false;
 800236a:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 800236c:	eb04 0208 	add.w	r2, r4, r8
 8002370:	3a01      	subs	r2, #1
 8002372:	f1c8 0100 	rsb	r1, r8, #0
 8002376:	400a      	ands	r2, r1
 8002378:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 800237a:	b127      	cbz	r7, 8002386 <cbvprintf_package+0x236>
 800237c:	1bd1      	subs	r1, r2, r7
 800237e:	4449      	add	r1, r9
 8002380:	458b      	cmp	fp, r1
 8002382:	f0c0 8108 	bcc.w	8002596 <cbvprintf_package+0x446>
		if (*fmt == 's') {
 8002386:	2b73      	cmp	r3, #115	; 0x73
 8002388:	d059      	beq.n	800243e <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 800238a:	f1b9 0f04 	cmp.w	r9, #4
 800238e:	f000 8099 	beq.w	80024c4 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 8002392:	f1b9 0f08 	cmp.w	r9, #8
 8002396:	f040 8107 	bne.w	80025a8 <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 800239a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800239c:	3307      	adds	r3, #7
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	f103 0108 	add.w	r1, r3, #8
 80023a6:	9112      	str	r1, [sp, #72]	; 0x48
 80023a8:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 80023ac:	b10f      	cbz	r7, 80023b2 <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 80023ae:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 80023b2:	f102 0408 	add.w	r4, r2, #8
 80023b6:	e702      	b.n	80021be <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 80023b8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80023bc:	2a6c      	cmp	r2, #108	; 0x6c
 80023be:	d004      	beq.n	80023ca <cbvprintf_package+0x27a>
			parsing = false;
 80023c0:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 80023c2:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 80023c6:	46c1      	mov	r9, r8
 80023c8:	e7d0      	b.n	800236c <cbvprintf_package+0x21c>
			parsing = false;
 80023ca:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 80023cc:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 80023d0:	46c1      	mov	r9, r8
 80023d2:	e7cb      	b.n	800236c <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 80023d4:	782b      	ldrb	r3, [r5, #0]
 80023d6:	2b4c      	cmp	r3, #76	; 0x4c
 80023d8:	d01c      	beq.n	8002414 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 80023da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80023dc:	3307      	adds	r3, #7
 80023de:	f023 0307 	bic.w	r3, r3, #7
 80023e2:	f103 0208 	add.w	r2, r3, #8
 80023e6:	9212      	str	r2, [sp, #72]	; 0x48
 80023e8:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 80023ec:	1de2      	adds	r2, r4, #7
 80023ee:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 80023f2:	b147      	cbz	r7, 8002406 <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 80023f4:	1bd3      	subs	r3, r2, r7
 80023f6:	3308      	adds	r3, #8
 80023f8:	455b      	cmp	r3, fp
 80023fa:	d815      	bhi.n	8002428 <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 80023fc:	782b      	ldrb	r3, [r5, #0]
 80023fe:	2b4c      	cmp	r3, #76	; 0x4c
 8002400:	d015      	beq.n	800242e <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 8002402:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 8002406:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 800240a:	2600      	movs	r6, #0
			continue;
 800240c:	f04f 0808 	mov.w	r8, #8
 8002410:	46c1      	mov	r9, r8
 8002412:	e6d4      	b.n	80021be <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 8002414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002416:	3307      	adds	r3, #7
 8002418:	f023 0307 	bic.w	r3, r3, #7
 800241c:	f103 0208 	add.w	r2, r3, #8
 8002420:	9212      	str	r2, [sp, #72]	; 0x48
 8002422:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 8002426:	e7e1      	b.n	80023ec <cbvprintf_package+0x29c>
					return -ENOSPC;
 8002428:	f06f 001b 	mvn.w	r0, #27
 800242c:	e0aa      	b.n	8002584 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 800242e:	e9c2 0100 	strd	r0, r1, [r2]
 8002432:	e7e8      	b.n	8002406 <cbvprintf_package+0x2b6>
			parsing = false;
 8002434:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 8002436:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 800243a:	46c1      	mov	r9, r8
 800243c:	e796      	b.n	800236c <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 800243e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	9212      	str	r2, [sp, #72]	; 0x48
 8002444:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8002446:	4665      	mov	r5, ip
 8002448:	e69f      	b.n	800218a <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 800244a:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 800244c:	9902      	ldr	r1, [sp, #8]
 800244e:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 8002452:	4610      	mov	r0, r2
 8002454:	b102      	cbz	r2, 8002458 <cbvprintf_package+0x308>
 8002456:	b1f9      	cbz	r1, 8002498 <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8002458:	eba4 0c07 	sub.w	ip, r4, r7
 800245c:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 8002460:	b119      	cbz	r1, 800246a <cbvprintf_package+0x31a>
 8002462:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8002466:	f080 8099 	bcs.w	800259c <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 800246a:	9901      	ldr	r1, [sp, #4]
 800246c:	290f      	cmp	r1, #15
 800246e:	f200 8098 	bhi.w	80025a2 <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 8002472:	b1ef      	cbz	r7, 80024b0 <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	ab08      	add	r3, sp, #32
 8002478:	440b      	add	r3, r1
 800247a:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 800247e:	b178      	cbz	r0, 80024a0 <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8002480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002484:	ab08      	add	r3, sp, #32
 8002486:	440b      	add	r3, r1
 8002488:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 800248c:	9b00      	ldr	r3, [sp, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	9300      	str	r3, [sp, #0]
				s_idx++;
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 8002498:	3404      	adds	r4, #4
 800249a:	e691      	b.n	80021c0 <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 800249c:	2201      	movs	r2, #1
 800249e:	e7d5      	b.n	800244c <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	3301      	adds	r3, #1
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	e7f4      	b.n	8002492 <cbvprintf_package+0x342>
 80024a8:	08014adc 	.word	0x08014adc
 80024ac:	080174f8 	.word	0x080174f8
				} else if (is_ro) {
 80024b0:	b110      	cbz	r0, 80024b8 <cbvprintf_package+0x368>
					len += 1;
 80024b2:	f10b 0b01 	add.w	fp, fp, #1
 80024b6:	e7ec      	b.n	8002492 <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fccc 	bl	8000e56 <strlen>
 80024be:	1c83      	adds	r3, r0, #2
 80024c0:	449b      	add	fp, r3
 80024c2:	e7e6      	b.n	8002492 <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 80024c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80024c6:	1d19      	adds	r1, r3, #4
 80024c8:	9112      	str	r1, [sp, #72]	; 0x48
 80024ca:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 80024cc:	b107      	cbz	r7, 80024d0 <cbvprintf_package+0x380>
				*(int *)buf = v;
 80024ce:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 80024d0:	1d14      	adds	r4, r2, #4
 80024d2:	e674      	b.n	80021be <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 80024d4:	1be3      	subs	r3, r4, r7
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024da:	d268      	bcs.n	80025ae <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 80024dc:	b15f      	cbz	r7, 80024f6 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 80024de:	2200      	movs	r2, #0
 80024e0:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 80024e6:	9b03      	ldr	r3, [sp, #12]
 80024e8:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 80024ea:	9b00      	ldr	r3, [sp, #0]
 80024ec:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 80024ee:	b9d3      	cbnz	r3, 8002526 <cbvprintf_package+0x3d6>
 80024f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80024f4:	e039      	b.n	800256a <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 80024f6:	445b      	add	r3, fp
 80024f8:	f1a3 0008 	sub.w	r0, r3, #8
 80024fc:	e042      	b.n	8002584 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 80024fe:	3301      	adds	r3, #1
 8002500:	4298      	cmp	r0, r3
 8002502:	d913      	bls.n	800252c <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8002504:	aa08      	add	r2, sp, #32
 8002506:	441a      	add	r2, r3
 8002508:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800250c:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8002510:	2a00      	cmp	r2, #0
 8002512:	daf4      	bge.n	80024fe <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8002514:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 8002518:	1be2      	subs	r2, r4, r7
 800251a:	3201      	adds	r2, #1
 800251c:	4593      	cmp	fp, r2
 800251e:	d349      	bcc.n	80025b4 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 8002520:	f804 1b01 	strb.w	r1, [r4], #1
 8002524:	e7eb      	b.n	80024fe <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 8002526:	4653      	mov	r3, sl
 8002528:	9801      	ldr	r0, [sp, #4]
 800252a:	e7e9      	b.n	8002500 <cbvprintf_package+0x3b0>
 800252c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002530:	e01b      	b.n	800256a <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8002532:	ab08      	add	r3, sp, #32
 8002534:	4453      	add	r3, sl
 8002536:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 800253a:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8002544:	4640      	mov	r0, r8
 8002546:	f7fe fc86 	bl	8000e56 <strlen>
 800254a:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 800254c:	1be3      	subs	r3, r4, r7
 800254e:	442b      	add	r3, r5
 8002550:	3301      	adds	r3, #1
 8002552:	459b      	cmp	fp, r3
 8002554:	d331      	bcc.n	80025ba <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 8002556:	f804 6b01 	strb.w	r6, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800255a:	462a      	mov	r2, r5
 800255c:	4641      	mov	r1, r8
 800255e:	4620      	mov	r0, r4
 8002560:	f011 ff80 	bl	8014464 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 8002564:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 8002566:	f10a 0a01 	add.w	sl, sl, #1
 800256a:	45d1      	cmp	r9, sl
 800256c:	d909      	bls.n	8002582 <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 800256e:	9b00      	ldr	r3, [sp, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0de      	beq.n	8002532 <cbvprintf_package+0x3e2>
 8002574:	ab08      	add	r3, sp, #32
 8002576:	4453      	add	r3, sl
 8002578:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	dad8      	bge.n	8002532 <cbvprintf_package+0x3e2>
 8002580:	e7f1      	b.n	8002566 <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 8002582:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8002584:	b009      	add	sp, #36	; 0x24
 8002586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 800258a:	f06f 000d 	mvn.w	r0, #13
 800258e:	e7f9      	b.n	8002584 <cbvprintf_package+0x434>
		return -ENOSPC;
 8002590:	f06f 001b 	mvn.w	r0, #27
 8002594:	e7f6      	b.n	8002584 <cbvprintf_package+0x434>
			return -ENOSPC;
 8002596:	f06f 001b 	mvn.w	r0, #27
 800259a:	e7f3      	b.n	8002584 <cbvprintf_package+0x434>
					return -EINVAL;
 800259c:	f06f 0015 	mvn.w	r0, #21
 80025a0:	e7f0      	b.n	8002584 <cbvprintf_package+0x434>
					return -EINVAL;
 80025a2:	f06f 0015 	mvn.w	r0, #21
 80025a6:	e7ed      	b.n	8002584 <cbvprintf_package+0x434>
			return -EINVAL;
 80025a8:	f06f 0015 	mvn.w	r0, #21
 80025ac:	e7ea      	b.n	8002584 <cbvprintf_package+0x434>
		return -EINVAL;
 80025ae:	f06f 0015 	mvn.w	r0, #21
 80025b2:	e7e7      	b.n	8002584 <cbvprintf_package+0x434>
				return -ENOSPC;
 80025b4:	f06f 001b 	mvn.w	r0, #27
 80025b8:	e7e4      	b.n	8002584 <cbvprintf_package+0x434>
			return -ENOSPC;
 80025ba:	f06f 001b 	mvn.w	r0, #27
 80025be:	e7e1      	b.n	8002584 <cbvprintf_package+0x434>

080025c0 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 80025c0:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80025c2:	680b      	ldr	r3, [r1, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <char_out+0x10>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4798      	blx	r3
}
 80025ce:	bd08      	pop	{r3, pc}
 80025d0:	20000018 	.word	0x20000018

080025d4 <__printk_hook_install>:
	_char_out = fn;
 80025d4:	4b01      	ldr	r3, [pc, #4]	; (80025dc <__printk_hook_install+0x8>)
 80025d6:	6018      	str	r0, [r3, #0]
}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000018 	.word	0x20000018

080025e0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 80025e0:	b500      	push	{lr}
 80025e2:	b083      	sub	sp, #12
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80025e8:	2100      	movs	r1, #0
 80025ea:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 80025ec:	a901      	add	r1, sp, #4
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <vprintk+0x1c>)
 80025f0:	f000 fa2c 	bl	8002a4c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80025f4:	b003      	add	sp, #12
 80025f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80025fa:	bf00      	nop
 80025fc:	080025c1 	.word	0x080025c1

08002600 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8002600:	b510      	push	{r4, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8002606:	9001      	str	r0, [sp, #4]
 8002608:	9102      	str	r1, [sp, #8]
 800260a:	2100      	movs	r1, #0
 800260c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 800260e:	a901      	add	r1, sp, #4
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <vsnprintk+0x28>)
 8002612:	f000 fa1b 	bl	8002a4c <cbvprintf>

	if (ctx.count < ctx.max) {
 8002616:	9b03      	ldr	r3, [sp, #12]
 8002618:	9a02      	ldr	r2, [sp, #8]
 800261a:	4293      	cmp	r3, r2
 800261c:	da01      	bge.n	8002622 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 800261e:	2200      	movs	r2, #0
 8002620:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8002622:	9803      	ldr	r0, [sp, #12]
 8002624:	b004      	add	sp, #16
 8002626:	bd10      	pop	{r4, pc}
 8002628:	08010f6f 	.word	0x08010f6f

0800262c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 800262c:	4684      	mov	ip, r0
	const char *sp = *str;
 800262e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8002630:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8002632:	e005      	b.n	8002640 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8002634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002638:	3201      	adds	r2, #1
 800263a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800263e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8002640:	7813      	ldrb	r3, [r2, #0]
 8002642:	4904      	ldr	r1, [pc, #16]	; (8002654 <extract_decimal+0x28>)
 8002644:	5c59      	ldrb	r1, [r3, r1]
 8002646:	f011 0f04 	tst.w	r1, #4
 800264a:	d1f3      	bne.n	8002634 <extract_decimal+0x8>
	}
	*str = sp;
 800264c:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	080172bd 	.word	0x080172bd

08002658 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 800265e:	2300      	movs	r3, #0
 8002660:	6003      	str	r3, [r0, #0]
 8002662:	6043      	str	r3, [r0, #4]
 8002664:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8002666:	784b      	ldrb	r3, [r1, #1]
 8002668:	2b25      	cmp	r3, #37	; 0x25
 800266a:	d002      	beq.n	8002672 <extract_conversion+0x1a>
 800266c:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 800266e:	2501      	movs	r5, #1
 8002670:	e01f      	b.n	80026b2 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8002672:	1c88      	adds	r0, r1, #2
 8002674:	70e3      	strb	r3, [r4, #3]
		return sp;
 8002676:	e145      	b.n	8002904 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8002678:	7823      	ldrb	r3, [r4, #0]
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8002680:	b1b5      	cbz	r5, 80026b0 <extract_conversion+0x58>
			++sp;
 8002682:	3601      	adds	r6, #1
 8002684:	e014      	b.n	80026b0 <extract_conversion+0x58>
			conv->flag_plus = true;
 8002686:	7823      	ldrb	r3, [r4, #0]
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	7023      	strb	r3, [r4, #0]
			break;
 800268e:	e7f7      	b.n	8002680 <extract_conversion+0x28>
			conv->flag_space = true;
 8002690:	7823      	ldrb	r3, [r4, #0]
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	7023      	strb	r3, [r4, #0]
			break;
 8002698:	e7f2      	b.n	8002680 <extract_conversion+0x28>
			conv->flag_hash = true;
 800269a:	7823      	ldrb	r3, [r4, #0]
 800269c:	f043 0320 	orr.w	r3, r3, #32
 80026a0:	7023      	strb	r3, [r4, #0]
			break;
 80026a2:	e7ed      	b.n	8002680 <extract_conversion+0x28>
			conv->flag_zero = true;
 80026a4:	7823      	ldrb	r3, [r4, #0]
 80026a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026aa:	7023      	strb	r3, [r4, #0]
			break;
 80026ac:	e7e8      	b.n	8002680 <extract_conversion+0x28>
		switch (*sp) {
 80026ae:	2500      	movs	r5, #0
	} while (loop);
 80026b0:	b345      	cbz	r5, 8002704 <extract_conversion+0xac>
		switch (*sp) {
 80026b2:	7833      	ldrb	r3, [r6, #0]
 80026b4:	3b20      	subs	r3, #32
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d8f9      	bhi.n	80026ae <extract_conversion+0x56>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <extract_conversion+0x68>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	08002691 	.word	0x08002691
 80026c4:	080026af 	.word	0x080026af
 80026c8:	080026af 	.word	0x080026af
 80026cc:	0800269b 	.word	0x0800269b
 80026d0:	080026af 	.word	0x080026af
 80026d4:	080026af 	.word	0x080026af
 80026d8:	080026af 	.word	0x080026af
 80026dc:	080026af 	.word	0x080026af
 80026e0:	080026af 	.word	0x080026af
 80026e4:	080026af 	.word	0x080026af
 80026e8:	080026af 	.word	0x080026af
 80026ec:	08002687 	.word	0x08002687
 80026f0:	080026af 	.word	0x080026af
 80026f4:	08002679 	.word	0x08002679
 80026f8:	080026af 	.word	0x080026af
 80026fc:	080026af 	.word	0x080026af
 8002700:	080026a5 	.word	0x080026a5
	if (conv->flag_zero && conv->flag_dash) {
 8002704:	7823      	ldrb	r3, [r4, #0]
 8002706:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800270a:	2b44      	cmp	r3, #68	; 0x44
 800270c:	d05f      	beq.n	80027ce <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 800270e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8002710:	7823      	ldrb	r3, [r4, #0]
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8002718:	7833      	ldrb	r3, [r6, #0]
 800271a:	2b2a      	cmp	r3, #42	; 0x2a
 800271c:	d05c      	beq.n	80027d8 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 800271e:	a801      	add	r0, sp, #4
 8002720:	f7ff ff84 	bl	800262c <extract_decimal>
	if (sp != wp) {
 8002724:	9b01      	ldr	r3, [sp, #4]
 8002726:	429e      	cmp	r6, r3
 8002728:	d00f      	beq.n	800274a <extract_conversion+0xf2>
		conv->width_present = true;
 800272a:	7823      	ldrb	r3, [r4, #0]
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8002732:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 800273a:	2800      	cmp	r0, #0
 800273c:	db54      	blt.n	80027e8 <extract_conversion+0x190>
 800273e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8002740:	4313      	orrs	r3, r2
 8002742:	7822      	ldrb	r2, [r4, #0]
 8002744:	f363 0241 	bfi	r2, r3, #1, #1
 8002748:	7022      	strb	r2, [r4, #0]
	return sp;
 800274a:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 800274c:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b2e      	cmp	r3, #46	; 0x2e
 8002752:	bf14      	ite	ne
 8002754:	2300      	movne	r3, #0
 8002756:	2301      	moveq	r3, #1
 8002758:	7862      	ldrb	r2, [r4, #1]
 800275a:	f363 0241 	bfi	r2, r3, #1, #1
 800275e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8002760:	2b00      	cmp	r3, #0
 8002762:	d043      	beq.n	80027ec <extract_conversion+0x194>
	++sp;
 8002764:	9b01      	ldr	r3, [sp, #4]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	2b2a      	cmp	r3, #42	; 0x2a
 800276e:	d03f      	beq.n	80027f0 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8002770:	a801      	add	r0, sp, #4
 8002772:	f7ff ff5b 	bl	800262c <extract_decimal>
	conv->prec_value = prec;
 8002776:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8002778:	7823      	ldrb	r3, [r4, #0]
 800277a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 800277e:	2800      	cmp	r0, #0
 8002780:	db3e      	blt.n	8002800 <extract_conversion+0x1a8>
 8002782:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8002784:	4313      	orrs	r3, r2
 8002786:	7822      	ldrb	r2, [r4, #0]
 8002788:	f363 0241 	bfi	r2, r3, #1, #1
 800278c:	7022      	strb	r2, [r4, #0]
	return sp;
 800278e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8002790:	7803      	ldrb	r3, [r0, #0]
 8002792:	3b4c      	subs	r3, #76	; 0x4c
 8002794:	2b2e      	cmp	r3, #46	; 0x2e
 8002796:	f200 809d 	bhi.w	80028d4 <extract_conversion+0x27c>
 800279a:	e8df f003 	tbb	[pc, r3]
 800279e:	9b90      	.short	0x9b90
 80027a0:	9b9b9b9b 	.word	0x9b9b9b9b
 80027a4:	9b9b9b9b 	.word	0x9b9b9b9b
 80027a8:	9b9b9b9b 	.word	0x9b9b9b9b
 80027ac:	9b9b9b9b 	.word	0x9b9b9b9b
 80027b0:	9b9b9b9b 	.word	0x9b9b9b9b
 80027b4:	9b9b9b9b 	.word	0x9b9b9b9b
 80027b8:	9b339b9b 	.word	0x9b339b9b
 80027bc:	9b459b57 	.word	0x9b459b57
 80027c0:	9b9b9b9b 	.word	0x9b9b9b9b
 80027c4:	9b899b9b 	.word	0x9b899b9b
 80027c8:	9b9b9b9b 	.word	0x9b9b9b9b
 80027cc:	82          	.byte	0x82
 80027cd:	00          	.byte	0x00
		conv->flag_zero = false;
 80027ce:	7823      	ldrb	r3, [r4, #0]
 80027d0:	f36f 1386 	bfc	r3, #6, #1
 80027d4:	7023      	strb	r3, [r4, #0]
 80027d6:	e79a      	b.n	800270e <extract_conversion+0xb6>
		conv->width_star = true;
 80027d8:	7863      	ldrb	r3, [r4, #1]
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80027e0:	4633      	mov	r3, r6
 80027e2:	3301      	adds	r3, #1
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	e7b1      	b.n	800274c <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 80027e8:	2201      	movs	r2, #1
 80027ea:	e7a9      	b.n	8002740 <extract_conversion+0xe8>
		return sp;
 80027ec:	9801      	ldr	r0, [sp, #4]
 80027ee:	e7cf      	b.n	8002790 <extract_conversion+0x138>
		conv->prec_star = true;
 80027f0:	7863      	ldrb	r3, [r4, #1]
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80027f8:	4610      	mov	r0, r2
 80027fa:	3001      	adds	r0, #1
 80027fc:	9001      	str	r0, [sp, #4]
 80027fe:	e7c7      	b.n	8002790 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8002800:	2201      	movs	r2, #1
 8002802:	e7bf      	b.n	8002784 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8002804:	1c42      	adds	r2, r0, #1
 8002806:	7843      	ldrb	r3, [r0, #1]
 8002808:	2b68      	cmp	r3, #104	; 0x68
 800280a:	d006      	beq.n	800281a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 800280c:	7863      	ldrb	r3, [r4, #1]
 800280e:	2102      	movs	r1, #2
 8002810:	f361 03c6 	bfi	r3, r1, #3, #4
 8002814:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8002816:	4610      	mov	r0, r2
 8002818:	e01e      	b.n	8002858 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 800281a:	7863      	ldrb	r3, [r4, #1]
 800281c:	2201      	movs	r2, #1
 800281e:	f362 03c6 	bfi	r3, r2, #3, #4
 8002822:	7063      	strb	r3, [r4, #1]
			++sp;
 8002824:	3002      	adds	r0, #2
 8002826:	e017      	b.n	8002858 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8002828:	1c42      	adds	r2, r0, #1
 800282a:	7843      	ldrb	r3, [r0, #1]
 800282c:	2b6c      	cmp	r3, #108	; 0x6c
 800282e:	d006      	beq.n	800283e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8002830:	7863      	ldrb	r3, [r4, #1]
 8002832:	2103      	movs	r1, #3
 8002834:	f361 03c6 	bfi	r3, r1, #3, #4
 8002838:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 800283a:	4610      	mov	r0, r2
 800283c:	e00c      	b.n	8002858 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 800283e:	7863      	ldrb	r3, [r4, #1]
 8002840:	2204      	movs	r2, #4
 8002842:	f362 03c6 	bfi	r3, r2, #3, #4
 8002846:	7063      	strb	r3, [r4, #1]
			++sp;
 8002848:	3002      	adds	r0, #2
 800284a:	e005      	b.n	8002858 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 800284c:	7863      	ldrb	r3, [r4, #1]
 800284e:	2205      	movs	r2, #5
 8002850:	f362 03c6 	bfi	r3, r2, #3, #4
 8002854:	7063      	strb	r3, [r4, #1]
		++sp;
 8002856:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8002858:	f810 3b01 	ldrb.w	r3, [r0], #1
 800285c:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 800285e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002862:	2a37      	cmp	r2, #55	; 0x37
 8002864:	d87d      	bhi.n	8002962 <extract_conversion+0x30a>
 8002866:	e8df f002 	tbb	[pc, r2]
 800286a:	7c5e      	.short	0x7c5e
 800286c:	5e5e7c7c 	.word	0x5e5e7c7c
 8002870:	7c7c7c5e 	.word	0x7c7c7c5e
 8002874:	7c7c7c7c 	.word	0x7c7c7c7c
 8002878:	7c7c7c7c 	.word	0x7c7c7c7c
 800287c:	7c7c7c7c 	.word	0x7c7c7c7c
 8002880:	7c7c4f7c 	.word	0x7c7c4f7c
 8002884:	7c7c7c7c 	.word	0x7c7c7c7c
 8002888:	7c5e7c7c 	.word	0x7c5e7c7c
 800288c:	5e5e3a4f 	.word	0x5e5e3a4f
 8002890:	7c3a7c5e 	.word	0x7c3a7c5e
 8002894:	657c7c7c 	.word	0x657c7c7c
 8002898:	7c7c714f 	.word	0x7c7c714f
 800289c:	7c4f7c71 	.word	0x7c4f7c71
 80028a0:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 80028a2:	7863      	ldrb	r3, [r4, #1]
 80028a4:	2206      	movs	r2, #6
 80028a6:	f362 03c6 	bfi	r3, r2, #3, #4
 80028aa:	7063      	strb	r3, [r4, #1]
		++sp;
 80028ac:	3001      	adds	r0, #1
		break;
 80028ae:	e7d3      	b.n	8002858 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 80028b0:	7863      	ldrb	r3, [r4, #1]
 80028b2:	2207      	movs	r2, #7
 80028b4:	f362 03c6 	bfi	r3, r2, #3, #4
 80028b8:	7063      	strb	r3, [r4, #1]
		++sp;
 80028ba:	3001      	adds	r0, #1
		break;
 80028bc:	e7cc      	b.n	8002858 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 80028be:	7863      	ldrb	r3, [r4, #1]
 80028c0:	2208      	movs	r2, #8
 80028c2:	f362 03c6 	bfi	r3, r2, #3, #4
 80028c6:	7063      	strb	r3, [r4, #1]
		++sp;
 80028c8:	3001      	adds	r0, #1
		conv->unsupported = true;
 80028ca:	7823      	ldrb	r3, [r4, #0]
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	7023      	strb	r3, [r4, #0]
		break;
 80028d2:	e7c1      	b.n	8002858 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 80028d4:	7863      	ldrb	r3, [r4, #1]
 80028d6:	f36f 03c6 	bfc	r3, #3, #4
 80028da:	7063      	strb	r3, [r4, #1]
		break;
 80028dc:	e7bc      	b.n	8002858 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 80028de:	78a2      	ldrb	r2, [r4, #2]
 80028e0:	2101      	movs	r1, #1
 80028e2:	f361 0202 	bfi	r2, r1, #0, #3
 80028e6:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80028e8:	7862      	ldrb	r2, [r4, #1]
 80028ea:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80028ee:	2a40      	cmp	r2, #64	; 0x40
 80028f0:	d010      	beq.n	8002914 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 80028f2:	2b63      	cmp	r3, #99	; 0x63
 80028f4:	d013      	beq.n	800291e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 80028f6:	7823      	ldrb	r3, [r4, #0]
 80028f8:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80028fc:	4315      	orrs	r5, r2
 80028fe:	f365 0341 	bfi	r3, r5, #1, #1
 8002902:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002904:	b002      	add	sp, #8
 8002906:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8002908:	78a2      	ldrb	r2, [r4, #2]
 800290a:	2102      	movs	r1, #2
 800290c:	f361 0202 	bfi	r2, r1, #0, #3
 8002910:	70a2      	strb	r2, [r4, #2]
 8002912:	e7e9      	b.n	80028e8 <extract_conversion+0x290>
			conv->invalid = true;
 8002914:	7821      	ldrb	r1, [r4, #0]
 8002916:	f041 0101 	orr.w	r1, r1, #1
 800291a:	7021      	strb	r1, [r4, #0]
 800291c:	e7e9      	b.n	80028f2 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800291e:	1e15      	subs	r5, r2, #0
 8002920:	bf18      	it	ne
 8002922:	2501      	movne	r5, #1
 8002924:	e7e7      	b.n	80028f6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8002926:	78a3      	ldrb	r3, [r4, #2]
 8002928:	2204      	movs	r2, #4
 800292a:	f362 0302 	bfi	r3, r2, #0, #3
 800292e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8002930:	2501      	movs	r5, #1
			break;
 8002932:	e7e0      	b.n	80028f6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002934:	78a3      	ldrb	r3, [r4, #2]
 8002936:	2203      	movs	r2, #3
 8002938:	f362 0302 	bfi	r3, r2, #0, #3
 800293c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800293e:	7863      	ldrb	r3, [r4, #1]
 8002940:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d1d6      	bne.n	80028f6 <extract_conversion+0x29e>
			unsupported = true;
 8002948:	2501      	movs	r5, #1
 800294a:	e7d4      	b.n	80028f6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 800294c:	78a3      	ldrb	r3, [r4, #2]
 800294e:	2203      	movs	r2, #3
 8002950:	f362 0302 	bfi	r3, r2, #0, #3
 8002954:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8002956:	7863      	ldrb	r3, [r4, #1]
 8002958:	f013 0f78 	tst.w	r3, #120	; 0x78
 800295c:	d0cb      	beq.n	80028f6 <extract_conversion+0x29e>
			unsupported = true;
 800295e:	2501      	movs	r5, #1
 8002960:	e7c9      	b.n	80028f6 <extract_conversion+0x29e>
		conv->invalid = true;
 8002962:	7823      	ldrb	r3, [r4, #0]
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	7023      	strb	r3, [r4, #0]
		break;
 800296a:	e7c4      	b.n	80028f6 <extract_conversion+0x29e>

0800296c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	b083      	sub	sp, #12
 8002972:	4604      	mov	r4, r0
 8002974:	460d      	mov	r5, r1
 8002976:	9201      	str	r2, [sp, #4]
 8002978:	469a      	mov	sl, r3
 800297a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 800297c:	78d3      	ldrb	r3, [r2, #3]
 800297e:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <encode_uint+0xdc>)
 8002980:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002984:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002988:	2b6f      	cmp	r3, #111	; 0x6f
 800298a:	d00f      	beq.n	80029ac <encode_uint+0x40>
 800298c:	d906      	bls.n	800299c <encode_uint+0x30>
 800298e:	2b70      	cmp	r3, #112	; 0x70
 8002990:	d00f      	beq.n	80029b2 <encode_uint+0x46>
 8002992:	2b78      	cmp	r3, #120	; 0x78
 8002994:	d110      	bne.n	80029b8 <encode_uint+0x4c>
		return 16;
 8002996:	f04f 0910 	mov.w	r9, #16
 800299a:	e023      	b.n	80029e4 <encode_uint+0x78>
	switch (specifier) {
 800299c:	2b58      	cmp	r3, #88	; 0x58
 800299e:	d002      	beq.n	80029a6 <encode_uint+0x3a>
 80029a0:	f04f 090a 	mov.w	r9, #10
 80029a4:	e01e      	b.n	80029e4 <encode_uint+0x78>
		return 16;
 80029a6:	f04f 0910 	mov.w	r9, #16
 80029aa:	e01b      	b.n	80029e4 <encode_uint+0x78>
		return 8;
 80029ac:	f04f 0908 	mov.w	r9, #8
 80029b0:	e018      	b.n	80029e4 <encode_uint+0x78>
		return 16;
 80029b2:	f04f 0910 	mov.w	r9, #16
 80029b6:	e015      	b.n	80029e4 <encode_uint+0x78>
	switch (specifier) {
 80029b8:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 80029bc:	e012      	b.n	80029e4 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	3230      	adds	r2, #48	; 0x30
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 80029c8:	463a      	mov	r2, r7
 80029ca:	4643      	mov	r3, r8
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fe f8b4 	bl	8000b3c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 80029d4:	42bc      	cmp	r4, r7
 80029d6:	f175 0300 	sbcs.w	r3, r5, #0
 80029da:	d319      	bcc.n	8002a10 <encode_uint+0xa4>
 80029dc:	4556      	cmp	r6, sl
 80029de:	d917      	bls.n	8002a10 <encode_uint+0xa4>
		value /= radix;
 80029e0:	4604      	mov	r4, r0
 80029e2:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 80029e4:	f04f 0800 	mov.w	r8, #0
 80029e8:	464f      	mov	r7, r9
 80029ea:	464a      	mov	r2, r9
 80029ec:	4643      	mov	r3, r8
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fe f8a3 	bl	8000b3c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80029f6:	2a09      	cmp	r2, #9
 80029f8:	d9e1      	bls.n	80029be <encode_uint+0x52>
 80029fa:	f1bb 0f01 	cmp.w	fp, #1
 80029fe:	d003      	beq.n	8002a08 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002a00:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002a02:	3257      	adds	r2, #87	; 0x57
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	e7dd      	b.n	80029c4 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002a08:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002a0a:	3237      	adds	r2, #55	; 0x37
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	e7d9      	b.n	80029c4 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002a10:	9b01      	ldr	r3, [sp, #4]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f013 0f20 	tst.w	r3, #32
 8002a18:	d005      	beq.n	8002a26 <encode_uint+0xba>
		if (radix == 8) {
 8002a1a:	f1b9 0f08 	cmp.w	r9, #8
 8002a1e:	d006      	beq.n	8002a2e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8002a20:	f1b9 0f10 	cmp.w	r9, #16
 8002a24:	d009      	beq.n	8002a3a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8002a26:	4630      	mov	r0, r6
 8002a28:	b003      	add	sp, #12
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8002a2e:	9a01      	ldr	r2, [sp, #4]
 8002a30:	7893      	ldrb	r3, [r2, #2]
 8002a32:	f043 0308 	orr.w	r3, r3, #8
 8002a36:	7093      	strb	r3, [r2, #2]
 8002a38:	e7f5      	b.n	8002a26 <encode_uint+0xba>
			conv->altform_0c = true;
 8002a3a:	9a01      	ldr	r2, [sp, #4]
 8002a3c:	7893      	ldrb	r3, [r2, #2]
 8002a3e:	f043 0310 	orr.w	r3, r3, #16
 8002a42:	7093      	strb	r3, [r2, #2]
 8002a44:	e7ef      	b.n	8002a26 <encode_uint+0xba>
 8002a46:	bf00      	nop
 8002a48:	080172bd 	.word	0x080172bd

08002a4c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a50:	b091      	sub	sp, #68	; 0x44
 8002a52:	4606      	mov	r6, r0
 8002a54:	460d      	mov	r5, r1
 8002a56:	4691      	mov	r9, r2
 8002a58:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002a5a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002a5c:	f899 0000 	ldrb.w	r0, [r9]
 8002a60:	2800      	cmp	r0, #0
 8002a62:	f000 82d5 	beq.w	8003010 <cbvprintf+0x5c4>
		if (*fp != '%') {
 8002a66:	2825      	cmp	r0, #37	; 0x25
 8002a68:	d008      	beq.n	8002a7c <cbvprintf+0x30>
			OUTC(*fp++);
 8002a6a:	f109 0901 	add.w	r9, r9, #1
 8002a6e:	4629      	mov	r1, r5
 8002a70:	47b0      	blx	r6
 8002a72:	2800      	cmp	r0, #0
 8002a74:	f2c0 82cd 	blt.w	8003012 <cbvprintf+0x5c6>
 8002a78:	3401      	adds	r4, #1
			continue;
 8002a7a:	e7ef      	b.n	8002a5c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9304      	str	r3, [sp, #16]
 8002a80:	9305      	str	r3, [sp, #20]
 8002a82:	9306      	str	r3, [sp, #24]
 8002a84:	9307      	str	r3, [sp, #28]
 8002a86:	9308      	str	r3, [sp, #32]
 8002a88:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	a806      	add	r0, sp, #24
 8002a8e:	f7ff fde3 	bl	8002658 <extract_conversion>
 8002a92:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8002a94:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002a98:	f013 0f01 	tst.w	r3, #1
 8002a9c:	f000 8097 	beq.w	8002bce <cbvprintf+0x182>
			width = va_arg(ap, int);
 8002aa0:	9b03      	ldr	r3, [sp, #12]
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	9203      	str	r2, [sp, #12]
 8002aa6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8002aa8:	2f00      	cmp	r7, #0
 8002aaa:	f2c0 8088 	blt.w	8002bbe <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8002aae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002ab2:	f013 0f04 	tst.w	r3, #4
 8002ab6:	f000 809c 	beq.w	8002bf2 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8002aba:	9b03      	ldr	r3, [sp, #12]
 8002abc:	1d1a      	adds	r2, r3, #4
 8002abe:	9203      	str	r2, [sp, #12]
 8002ac0:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002ac4:	f1ba 0f00 	cmp.w	sl, #0
 8002ac8:	f2c0 808a 	blt.w	8002be0 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8002ad0:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8002ad2:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002ada:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8002ade:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f000 808e 	beq.w	8002c04 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	f000 80d3 	beq.w	8002c94 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	f000 8124 	beq.w	8002d3c <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	f000 813b 	beq.w	8002d70 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002afa:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8002afe:	f018 0b03 	ands.w	fp, r8, #3
 8002b02:	f040 813b 	bne.w	8002d7c <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002b06:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002b0a:	3b25      	subs	r3, #37	; 0x25
 8002b0c:	2b53      	cmp	r3, #83	; 0x53
 8002b0e:	f200 81e6 	bhi.w	8002ede <cbvprintf+0x492>
 8002b12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b16:	0140      	.short	0x0140
 8002b18:	01e401e4 	.word	0x01e401e4
 8002b1c:	01e401e4 	.word	0x01e401e4
 8002b20:	01e401e4 	.word	0x01e401e4
 8002b24:	01e401e4 	.word	0x01e401e4
 8002b28:	01e401e4 	.word	0x01e401e4
 8002b2c:	01e401e4 	.word	0x01e401e4
 8002b30:	01e401e4 	.word	0x01e401e4
 8002b34:	01e401e4 	.word	0x01e401e4
 8002b38:	01e401e4 	.word	0x01e401e4
 8002b3c:	01e401e4 	.word	0x01e401e4
 8002b40:	01e401e4 	.word	0x01e401e4
 8002b44:	01e401e4 	.word	0x01e401e4
 8002b48:	01e401e4 	.word	0x01e401e4
 8002b4c:	01e401e4 	.word	0x01e401e4
 8002b50:	01e401e4 	.word	0x01e401e4
 8002b54:	01e401e4 	.word	0x01e401e4
 8002b58:	01e401e4 	.word	0x01e401e4
 8002b5c:	01e401e4 	.word	0x01e401e4
 8002b60:	01e401e4 	.word	0x01e401e4
 8002b64:	01e401e4 	.word	0x01e401e4
 8002b68:	01e401e4 	.word	0x01e401e4
 8002b6c:	01e401e4 	.word	0x01e401e4
 8002b70:	01e401e4 	.word	0x01e401e4
 8002b74:	01e401e4 	.word	0x01e401e4
 8002b78:	01e401e4 	.word	0x01e401e4
 8002b7c:	01e40181 	.word	0x01e40181
 8002b80:	01e401e4 	.word	0x01e401e4
 8002b84:	01e401e4 	.word	0x01e401e4
 8002b88:	01e401e4 	.word	0x01e401e4
 8002b8c:	01e401e4 	.word	0x01e401e4
 8002b90:	015e01e4 	.word	0x015e01e4
 8002b94:	01e40167 	.word	0x01e40167
 8002b98:	01e401e4 	.word	0x01e401e4
 8002b9c:	016701e4 	.word	0x016701e4
 8002ba0:	01e401e4 	.word	0x01e401e4
 8002ba4:	01e401e4 	.word	0x01e401e4
 8002ba8:	018101be 	.word	0x018101be
 8002bac:	01e401a2 	.word	0x01e401a2
 8002bb0:	014d01e4 	.word	0x014d01e4
 8002bb4:	018101e4 	.word	0x018101e4
 8002bb8:	01e401e4 	.word	0x01e401e4
 8002bbc:	0181      	.short	0x0181
				conv->flag_dash = true;
 8002bbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8002bca:	427f      	negs	r7, r7
 8002bcc:	e76f      	b.n	8002aae <cbvprintf+0x62>
		} else if (conv->width_present) {
 8002bce:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db02      	blt.n	8002bdc <cbvprintf+0x190>
		int width = -1;
 8002bd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002bda:	e768      	b.n	8002aae <cbvprintf+0x62>
			width = conv->width_value;
 8002bdc:	9f07      	ldr	r7, [sp, #28]
 8002bde:	e766      	b.n	8002aae <cbvprintf+0x62>
				conv->prec_present = false;
 8002be0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002be4:	f36f 0341 	bfc	r3, #1, #1
 8002be8:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002bec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002bf0:	e76c      	b.n	8002acc <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8002bf2:	f013 0f02 	tst.w	r3, #2
 8002bf6:	d002      	beq.n	8002bfe <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002bf8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002bfc:	e766      	b.n	8002acc <cbvprintf+0x80>
		int precision = -1;
 8002bfe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002c02:	e763      	b.n	8002acc <cbvprintf+0x80>
			switch (length_mod) {
 8002c04:	1ecb      	subs	r3, r1, #3
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d804      	bhi.n	8002c14 <cbvprintf+0x1c8>
 8002c0a:	e8df f003 	tbb	[pc, r3]
 8002c0e:	1d0b      	.short	0x1d0b
 8002c10:	3529      	.short	0x3529
 8002c12:	35          	.byte	0x35
 8002c13:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002c14:	9b03      	ldr	r3, [sp, #12]
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	9203      	str	r2, [sp, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	17da      	asrs	r2, r3, #31
 8002c1e:	9304      	str	r3, [sp, #16]
 8002c20:	9205      	str	r2, [sp, #20]
				break;
 8002c22:	e006      	b.n	8002c32 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002c24:	9b03      	ldr	r3, [sp, #12]
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	9203      	str	r2, [sp, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	17da      	asrs	r2, r3, #31
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8002c32:	2901      	cmp	r1, #1
 8002c34:	d028      	beq.n	8002c88 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002c36:	2902      	cmp	r1, #2
 8002c38:	f47f af5f 	bne.w	8002afa <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002c3c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002c40:	17da      	asrs	r2, r3, #31
 8002c42:	9304      	str	r3, [sp, #16]
 8002c44:	9205      	str	r2, [sp, #20]
 8002c46:	e758      	b.n	8002afa <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002c48:	9b03      	ldr	r3, [sp, #12]
 8002c4a:	3307      	adds	r3, #7
 8002c4c:	f023 0307 	bic.w	r3, r3, #7
 8002c50:	f103 0208 	add.w	r2, r3, #8
 8002c54:	9203      	str	r2, [sp, #12]
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002c5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002c5e:	e7e8      	b.n	8002c32 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8002c60:	9b03      	ldr	r3, [sp, #12]
 8002c62:	3307      	adds	r3, #7
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	f103 0208 	add.w	r2, r3, #8
 8002c6c:	9203      	str	r2, [sp, #12]
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002c76:	e7dc      	b.n	8002c32 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002c78:	9b03      	ldr	r3, [sp, #12]
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	9203      	str	r2, [sp, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	17da      	asrs	r2, r3, #31
				value->sint =
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	9205      	str	r2, [sp, #20]
				break;
 8002c86:	e7d4      	b.n	8002c32 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8002c88:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9305      	str	r3, [sp, #20]
 8002c92:	e732      	b.n	8002afa <cbvprintf+0xae>
			switch (length_mod) {
 8002c94:	1ecb      	subs	r3, r1, #3
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d804      	bhi.n	8002ca4 <cbvprintf+0x258>
 8002c9a:	e8df f003 	tbb	[pc, r3]
 8002c9e:	1f0b      	.short	0x1f0b
 8002ca0:	4135      	.short	0x4135
 8002ca2:	41          	.byte	0x41
 8002ca3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8002ca4:	9b03      	ldr	r3, [sp, #12]
 8002ca6:	1d1a      	adds	r2, r3, #4
 8002ca8:	9203      	str	r2, [sp, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	9304      	str	r3, [sp, #16]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9305      	str	r3, [sp, #20]
				break;
 8002cb2:	e01e      	b.n	8002cf2 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8002cb4:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8002cb8:	2b63      	cmp	r3, #99	; 0x63
 8002cba:	d007      	beq.n	8002ccc <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002cbc:	9b03      	ldr	r3, [sp, #12]
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	9203      	str	r2, [sp, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	9304      	str	r3, [sp, #16]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9305      	str	r3, [sp, #20]
 8002cca:	e012      	b.n	8002cf2 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002ccc:	9b03      	ldr	r3, [sp, #12]
 8002cce:	1d1a      	adds	r2, r3, #4
 8002cd0:	9203      	str	r2, [sp, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	9304      	str	r3, [sp, #16]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9305      	str	r3, [sp, #20]
 8002cda:	e00a      	b.n	8002cf2 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002cdc:	9b03      	ldr	r3, [sp, #12]
 8002cde:	3307      	adds	r3, #7
 8002ce0:	f023 0307 	bic.w	r3, r3, #7
 8002ce4:	f103 0208 	add.w	r2, r3, #8
 8002ce8:	9203      	str	r2, [sp, #12]
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8002cf2:	2901      	cmp	r1, #1
 8002cf4:	d01c      	beq.n	8002d30 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002cf6:	2902      	cmp	r1, #2
 8002cf8:	f47f aeff 	bne.w	8002afa <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002cfc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002d00:	9304      	str	r3, [sp, #16]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	e6f8      	b.n	8002afa <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	f103 0208 	add.w	r2, r3, #8
 8002d14:	9203      	str	r2, [sp, #12]
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002d1e:	e7e8      	b.n	8002cf2 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8002d20:	9b03      	ldr	r3, [sp, #12]
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	9203      	str	r2, [sp, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9305      	str	r3, [sp, #20]
				break;
 8002d2e:	e7e0      	b.n	8002cf2 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8002d30:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d34:	9304      	str	r3, [sp, #16]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9305      	str	r3, [sp, #20]
 8002d3a:	e6de      	b.n	8002afa <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002d3c:	2908      	cmp	r1, #8
 8002d3e:	d00b      	beq.n	8002d58 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	3307      	adds	r3, #7
 8002d44:	f023 0307 	bic.w	r3, r3, #7
 8002d48:	f103 0208 	add.w	r2, r3, #8
 8002d4c:	9203      	str	r2, [sp, #12]
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d56:	e6d0      	b.n	8002afa <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002d58:	9b03      	ldr	r3, [sp, #12]
 8002d5a:	3307      	adds	r3, #7
 8002d5c:	f023 0307 	bic.w	r3, r3, #7
 8002d60:	f103 0208 	add.w	r2, r3, #8
 8002d64:	9203      	str	r2, [sp, #12]
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d6e:	e6c4      	b.n	8002afa <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	1d1a      	adds	r2, r3, #4
 8002d74:	9203      	str	r2, [sp, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	9304      	str	r3, [sp, #16]
 8002d7a:	e6be      	b.n	8002afa <cbvprintf+0xae>
			OUTS(sp, fp);
 8002d7c:	9f02      	ldr	r7, [sp, #8]
 8002d7e:	463b      	mov	r3, r7
 8002d80:	464a      	mov	r2, r9
 8002d82:	4629      	mov	r1, r5
 8002d84:	4630      	mov	r0, r6
 8002d86:	f00e f9a6 	bl	80110d6 <outs>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	f2c0 8141 	blt.w	8003012 <cbvprintf+0x5c6>
 8002d90:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8002d92:	46b9      	mov	r9, r7
			continue;
 8002d94:	e662      	b.n	8002a5c <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8002d96:	4629      	mov	r1, r5
 8002d98:	2025      	movs	r0, #37	; 0x25
 8002d9a:	47b0      	blx	r6
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	f2c0 8138 	blt.w	8003012 <cbvprintf+0x5c6>
 8002da2:	3401      	adds	r4, #1
		char sign = 0;
 8002da4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002da6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002daa:	f04f 0900 	mov.w	r9, #0
			break;
 8002dae:	e09b      	b.n	8002ee8 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8002db0:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8002db4:	f1ba 0f00 	cmp.w	sl, #0
 8002db8:	db07      	blt.n	8002dca <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8002dba:	4651      	mov	r1, sl
 8002dbc:	4648      	mov	r0, r9
 8002dbe:	f011 fcc3 	bl	8014748 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8002dc2:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002dc6:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002dc8:	e08e      	b.n	8002ee8 <cbvprintf+0x49c>
				len = strlen(bps);
 8002dca:	4648      	mov	r0, r9
 8002dcc:	f7fe f843 	bl	8000e56 <strlen>
 8002dd0:	e7f7      	b.n	8002dc2 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002dd2:	9b04      	ldr	r3, [sp, #16]
 8002dd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002dd8:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002dda:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8002dde:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8002de2:	e081      	b.n	8002ee8 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002de4:	f018 0f08 	tst.w	r8, #8
 8002de8:	d105      	bne.n	8002df6 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002dea:	f018 0810 	ands.w	r8, r8, #16
 8002dee:	d004      	beq.n	8002dfa <cbvprintf+0x3ae>
				sign = ' ';
 8002df0:	f04f 0820 	mov.w	r8, #32
 8002df4:	e001      	b.n	8002dfa <cbvprintf+0x3ae>
				sign = '+';
 8002df6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002dfa:	9a04      	ldr	r2, [sp, #16]
 8002dfc:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db02      	blt.n	8002e08 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8002e02:	9204      	str	r2, [sp, #16]
 8002e04:	9305      	str	r3, [sp, #20]
 8002e06:	e008      	b.n	8002e1a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002e08:	4252      	negs	r2, r2
 8002e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002e0e:	9204      	str	r2, [sp, #16]
 8002e10:	9305      	str	r3, [sp, #20]
				sign = '-';
 8002e12:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002e16:	e000      	b.n	8002e1a <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002e18:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002e1a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	ab0a      	add	r3, sp, #40	; 0x28
 8002e22:	aa06      	add	r2, sp, #24
 8002e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e28:	f7ff fda0 	bl	800296c <encode_uint>
 8002e2c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8002e2e:	f1ba 0f00 	cmp.w	sl, #0
 8002e32:	f2c0 8088 	blt.w	8002f46 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002e36:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002e3a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8002e3e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002e42:	f36f 1286 	bfc	r2, #6, #1
 8002e46:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002e4a:	459a      	cmp	sl, r3
 8002e4c:	d97e      	bls.n	8002f4c <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8002e4e:	ebaa 0303 	sub.w	r3, sl, r3
 8002e52:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002e54:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002e58:	e046      	b.n	8002ee8 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002e5a:	9804      	ldr	r0, [sp, #16]
 8002e5c:	b928      	cbnz	r0, 8002e6a <cbvprintf+0x41e>
		char sign = 0;
 8002e5e:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8002e60:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003018 <cbvprintf+0x5cc>
			bps = "(nil)";
 8002e64:	f1aa 0905 	sub.w	r9, sl, #5
 8002e68:	e03e      	b.n	8002ee8 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002e6a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	ab0a      	add	r3, sp, #40	; 0x28
 8002e72:	aa06      	add	r2, sp, #24
 8002e74:	2100      	movs	r1, #0
 8002e76:	f7ff fd79 	bl	800296c <encode_uint>
 8002e7a:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8002e7c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8002e88:	2378      	movs	r3, #120	; 0x78
 8002e8a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 8002e8e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8002e90:	e7cd      	b.n	8002e2e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8002e92:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8002e94:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002e98:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d806      	bhi.n	8002eae <cbvprintf+0x462>
 8002ea0:	e8df f003 	tbb	[pc, r3]
 8002ea4:	0f0d0b04 	.word	0x0f0d0b04
 8002ea8:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8002eac:	6014      	str	r4, [r2, #0]
		char sign = 0;
 8002eae:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002eb0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002eb4:	f04f 0900 	mov.w	r9, #0
}
 8002eb8:	e016      	b.n	8002ee8 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8002eba:	7014      	strb	r4, [r2, #0]
		break;
 8002ebc:	e7f7      	b.n	8002eae <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8002ebe:	8014      	strh	r4, [r2, #0]
		break;
 8002ec0:	e7f5      	b.n	8002eae <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8002ec2:	6014      	str	r4, [r2, #0]
		break;
 8002ec4:	e7f3      	b.n	8002eae <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8002ec6:	17e3      	asrs	r3, r4, #31
 8002ec8:	6014      	str	r4, [r2, #0]
 8002eca:	6053      	str	r3, [r2, #4]
		break;
 8002ecc:	e7ef      	b.n	8002eae <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8002ece:	17e3      	asrs	r3, r4, #31
 8002ed0:	6014      	str	r4, [r2, #0]
 8002ed2:	6053      	str	r3, [r2, #4]
		break;
 8002ed4:	e7eb      	b.n	8002eae <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002ed6:	6014      	str	r4, [r2, #0]
		break;
 8002ed8:	e7e9      	b.n	8002eae <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002eda:	6014      	str	r4, [r2, #0]
		break;
 8002edc:	e7e7      	b.n	8002eae <cbvprintf+0x462>
		switch (conv->specifier) {
 8002ede:	46d8      	mov	r8, fp
 8002ee0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002ee4:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002ee8:	f1b9 0f00 	cmp.w	r9, #0
 8002eec:	f000 808d 	beq.w	800300a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8002ef0:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002ef4:	f1b8 0f00 	cmp.w	r8, #0
 8002ef8:	d000      	beq.n	8002efc <cbvprintf+0x4b0>
			nj_len += 1U;
 8002efa:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002efc:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8002f00:	f011 0f10 	tst.w	r1, #16
 8002f04:	d025      	beq.n	8002f52 <cbvprintf+0x506>
			nj_len += 2U;
 8002f06:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002f08:	9b07      	ldr	r3, [sp, #28]
 8002f0a:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002f0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f10:	d001      	beq.n	8002f16 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8002f12:	9a08      	ldr	r2, [sp, #32]
 8002f14:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002f16:	2f00      	cmp	r7, #0
 8002f18:	dd31      	ble.n	8002f7e <cbvprintf+0x532>
			width -= (int)nj_len;
 8002f1a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002f1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002f20:	f013 0f04 	tst.w	r3, #4
 8002f24:	d12b      	bne.n	8002f7e <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8002f26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f2a:	d017      	beq.n	8002f5c <cbvprintf+0x510>
					if (sign != 0) {
 8002f2c:	f1b8 0f00 	cmp.w	r8, #0
 8002f30:	d017      	beq.n	8002f62 <cbvprintf+0x516>
						OUTC(sign);
 8002f32:	4629      	mov	r1, r5
 8002f34:	4640      	mov	r0, r8
 8002f36:	47b0      	blx	r6
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	db6a      	blt.n	8003012 <cbvprintf+0x5c6>
 8002f3c:	3401      	adds	r4, #1
						sign = 0;
 8002f3e:	46d8      	mov	r8, fp
					}
					pad = '0';
 8002f40:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002f44:	e00f      	b.n	8002f66 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8002f46:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002f4a:	e7cd      	b.n	8002ee8 <cbvprintf+0x49c>
 8002f4c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002f50:	e7ca      	b.n	8002ee8 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8002f52:	f011 0f08 	tst.w	r1, #8
 8002f56:	d0d7      	beq.n	8002f08 <cbvprintf+0x4bc>
			nj_len += 1U;
 8002f58:	3201      	adds	r2, #1
 8002f5a:	e7d5      	b.n	8002f08 <cbvprintf+0x4bc>
				char pad = ' ';
 8002f5c:	f04f 0b20 	mov.w	fp, #32
 8002f60:	e001      	b.n	8002f66 <cbvprintf+0x51a>
					pad = '0';
 8002f62:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002f66:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8002f68:	1e5f      	subs	r7, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd07      	ble.n	8002f7e <cbvprintf+0x532>
					OUTC(pad);
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4658      	mov	r0, fp
 8002f72:	47b0      	blx	r6
 8002f74:	2800      	cmp	r0, #0
 8002f76:	db4c      	blt.n	8003012 <cbvprintf+0x5c6>
 8002f78:	3401      	adds	r4, #1
				while (width-- > 0) {
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	e7f4      	b.n	8002f68 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 8002f7e:	f1b8 0f00 	cmp.w	r8, #0
 8002f82:	d005      	beq.n	8002f90 <cbvprintf+0x544>
			OUTC(sign);
 8002f84:	4629      	mov	r1, r5
 8002f86:	4640      	mov	r0, r8
 8002f88:	47b0      	blx	r6
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	db41      	blt.n	8003012 <cbvprintf+0x5c6>
 8002f8e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8002f90:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002f94:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002f98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	d005      	beq.n	8002fac <cbvprintf+0x560>
				OUTC('0');
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	2030      	movs	r0, #48	; 0x30
 8002fa4:	47b0      	blx	r6
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	db33      	blt.n	8003012 <cbvprintf+0x5c6>
 8002faa:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8002fac:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002fb0:	f013 0f10 	tst.w	r3, #16
 8002fb4:	d006      	beq.n	8002fc4 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8002fbc:	47b0      	blx	r6
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	db27      	blt.n	8003012 <cbvprintf+0x5c6>
 8002fc2:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002fc4:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002fc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dd07      	ble.n	8002fde <cbvprintf+0x592>
				OUTC('0');
 8002fce:	4629      	mov	r1, r5
 8002fd0:	2030      	movs	r0, #48	; 0x30
 8002fd2:	47b0      	blx	r6
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	db1c      	blt.n	8003012 <cbvprintf+0x5c6>
 8002fd8:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002fda:	4643      	mov	r3, r8
 8002fdc:	e7f3      	b.n	8002fc6 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8002fde:	4653      	mov	r3, sl
 8002fe0:	464a      	mov	r2, r9
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f00e f876 	bl	80110d6 <outs>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	db11      	blt.n	8003012 <cbvprintf+0x5c6>
 8002fee:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8002ff0:	2f00      	cmp	r7, #0
 8002ff2:	dd07      	ble.n	8003004 <cbvprintf+0x5b8>
			OUTC(' ');
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	2020      	movs	r0, #32
 8002ff8:	47b0      	blx	r6
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	db09      	blt.n	8003012 <cbvprintf+0x5c6>
 8002ffe:	3401      	adds	r4, #1
			--width;
 8003000:	3f01      	subs	r7, #1
 8003002:	e7f5      	b.n	8002ff0 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8003004:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003008:	e528      	b.n	8002a5c <cbvprintf+0x10>
 800300a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800300e:	e525      	b.n	8002a5c <cbvprintf+0x10>
		}
	}

	return count;
 8003010:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8003012:	b011      	add	sp, #68	; 0x44
 8003014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003018:	08015339 	.word	0x08015339

0800301c <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800301c:	f04f 0210 	mov.w	r2, #16
 8003020:	f3ef 8311 	mrs	r3, BASEPRI
 8003024:	f382 8812 	msr	BASEPRI_MAX, r2
 8003028:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <stm32l4_init+0x24>)
 8003036:	4a03      	ldr	r2, [pc, #12]	; (8003044 <stm32l4_init+0x28>)
 8003038:	601a      	str	r2, [r3, #0]

	return 0;
}
 800303a:	2000      	movs	r0, #0
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200002fc 	.word	0x200002fc
 8003044:	003d0900 	.word	0x003d0900

08003048 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8003048:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <thread_set+0x1c>)
 800304c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 800304e:	b118      	cbz	r0, 8003058 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <thread_set+0x20>)
 8003052:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8003054:	2b09      	cmp	r3, #9
 8003056:	dc00      	bgt.n	800305a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8003058:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <thread_set+0x24>)
 800305c:	f00b f86a 	bl	800e134 <z_impl_k_sem_give>
}
 8003060:	e7fa      	b.n	8003058 <thread_set+0x10>
 8003062:	bf00      	nop
 8003064:	200011e4 	.word	0x200011e4
 8003068:	20001198 	.word	0x20001198
 800306c:	20000918 	.word	0x20000918

08003070 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8003070:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8003072:	4802      	ldr	r0, [pc, #8]	; (800307c <log_process_thread_timer_expiry_fn+0xc>)
 8003074:	f00b f85e 	bl	800e134 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8003078:	bd08      	pop	{r3, pc}
 800307a:	bf00      	nop
 800307c:	20000918 	.word	0x20000918

08003080 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003080:	b530      	push	{r4, r5, lr}
 8003082:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003084:	2200      	movs	r2, #0
 8003086:	490f      	ldr	r1, [pc, #60]	; (80030c4 <enable_logger+0x44>)
 8003088:	480f      	ldr	r0, [pc, #60]	; (80030c8 <enable_logger+0x48>)
 800308a:	f011 f839 	bl	8014100 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800308e:	4d0f      	ldr	r5, [pc, #60]	; (80030cc <enable_logger+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	2300      	movs	r3, #0
 8003094:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003098:	2400      	movs	r4, #0
 800309a:	9404      	str	r4, [sp, #16]
 800309c:	230e      	movs	r3, #14
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	9402      	str	r4, [sp, #8]
 80030a2:	9401      	str	r4, [sp, #4]
 80030a4:	9400      	str	r4, [sp, #0]
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <enable_logger+0x50>)
 80030a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80030ac:	4909      	ldr	r1, [pc, #36]	; (80030d4 <enable_logger+0x54>)
 80030ae:	4628      	mov	r0, r5
 80030b0:	f010 fd17 	bl	8013ae2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80030b4:	4908      	ldr	r1, [pc, #32]	; (80030d8 <enable_logger+0x58>)
 80030b6:	4628      	mov	r0, r5
 80030b8:	f010 fcff 	bl	8013aba <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 80030bc:	4620      	mov	r0, r4
 80030be:	b009      	add	sp, #36	; 0x24
 80030c0:	bd30      	pop	{r4, r5, pc}
 80030c2:	bf00      	nop
 80030c4:	08003071 	.word	0x08003071
 80030c8:	20000eb0 	.word	0x20000eb0
 80030cc:	20000ee8 	.word	0x20000ee8
 80030d0:	08003475 	.word	0x08003475
 80030d4:	20003300 	.word	0x20003300
 80030d8:	08015340 	.word	0x08015340

080030dc <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <log_init+0x64>)
 80030de:	f3bf 8f5b 	dmb	ish
 80030e2:	e853 2f00 	ldrex	r2, [r3]
 80030e6:	1c51      	adds	r1, r2, #1
 80030e8:	e843 1000 	strex	r0, r1, [r3]
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d1f8      	bne.n	80030e2 <log_init+0x6>
 80030f0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 80030f4:	bb1a      	cbnz	r2, 800313e <log_init+0x62>
{
 80030f6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 80030f8:	2400      	movs	r4, #0
 80030fa:	e009      	b.n	8003110 <log_init+0x34>
					   backend->cb->ctx,
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <log_init+0x68>)
 80030fe:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003102:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8003104:	2204      	movs	r2, #4
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f9d9 	bl	80034c0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800310e:	3401      	adds	r4, #1
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <log_init+0x6c>)
 8003112:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <log_init+0x68>)
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800311a:	da0f      	bge.n	800313c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 800311c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800311e:	4d09      	ldr	r5, [pc, #36]	; (8003144 <log_init+0x68>)
 8003120:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003124:	7b2b      	ldrb	r3, [r5, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f1      	beq.n	800310e <log_init+0x32>
			if (backend->api->init != NULL) {
 800312a:	0123      	lsls	r3, r4, #4
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <log_init+0x68>)
 800312e:	58d3      	ldr	r3, [r2, r3]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0e2      	beq.n	80030fc <log_init+0x20>
				backend->api->init(backend);
 8003136:	4628      	mov	r0, r5
 8003138:	4798      	blx	r3
 800313a:	e7df      	b.n	80030fc <log_init+0x20>
}
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	4770      	bx	lr
 8003140:	200011a0 	.word	0x200011a0
 8003144:	08015090 	.word	0x08015090
 8003148:	080150a0 	.word	0x080150a0

0800314c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 800314c:	b138      	cbz	r0, 800315e <log_set_timestamp_func+0x12>
{
 800314e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <log_set_timestamp_func+0x18>)
 8003152:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8003154:	4608      	mov	r0, r1
 8003156:	f000 fba3 	bl	80038a0 <log_output_timestamp_freq_set>
	return 0;
 800315a:	2000      	movs	r0, #0
}
 800315c:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800315e:	f06f 0015 	mvn.w	r0, #21
}
 8003162:	4770      	bx	lr
 8003164:	2000001c 	.word	0x2000001c

08003168 <z_log_notify_backend_enabled>:
{
 8003168:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <z_log_notify_backend_enabled+0x18>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	b11b      	cbz	r3, 8003178 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <z_log_notify_backend_enabled+0x18>)
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
}
 8003176:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <z_log_notify_backend_enabled+0x1c>)
 800317a:	f00a ffdb 	bl	800e134 <z_impl_k_sem_give>
}
 800317e:	e7f7      	b.n	8003170 <z_log_notify_backend_enabled+0x8>
 8003180:	20001a8c 	.word	0x20001a8c
 8003184:	20000918 	.word	0x20000918

08003188 <z_log_dropped>:
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <z_log_dropped+0x38>)
 800318a:	f3bf 8f5b 	dmb	ish
 800318e:	e853 2f00 	ldrex	r2, [r3]
 8003192:	3201      	adds	r2, #1
 8003194:	e843 2100 	strex	r1, r2, [r3]
 8003198:	2900      	cmp	r1, #0
 800319a:	d1f8      	bne.n	800318e <z_log_dropped+0x6>
 800319c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 80031a0:	b900      	cbnz	r0, 80031a4 <z_log_dropped+0x1c>
}
 80031a2:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <z_log_dropped+0x3c>)
 80031a6:	f3bf 8f5b 	dmb	ish
 80031aa:	e853 2f00 	ldrex	r2, [r3]
 80031ae:	3a01      	subs	r2, #1
 80031b0:	e843 2100 	strex	r1, r2, [r3]
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d1f8      	bne.n	80031aa <z_log_dropped+0x22>
 80031b8:	f3bf 8f5b 	dmb	ish
 80031bc:	e7f1      	b.n	80031a2 <z_log_dropped+0x1a>
 80031be:	bf00      	nop
 80031c0:	2000119c 	.word	0x2000119c
 80031c4:	20001198 	.word	0x20001198

080031c8 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <z_log_dropped_read_and_clear+0x1c>)
}
 80031ca:	2000      	movs	r0, #0
 80031cc:	4602      	mov	r2, r0
 80031ce:	f3bf 8f5b 	dmb	ish
 80031d2:	e853 0f00 	ldrex	r0, [r3]
 80031d6:	e843 2100 	strex	r1, r2, [r3]
 80031da:	2900      	cmp	r1, #0
 80031dc:	d1f9      	bne.n	80031d2 <z_log_dropped_read_and_clear+0xa>
 80031de:	f3bf 8f5b 	dmb	ish
 80031e2:	4770      	bx	lr
 80031e4:	2000119c 	.word	0x2000119c

080031e8 <dropped_notify>:
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80031ea:	f7ff ffed 	bl	80031c8 <z_log_dropped_read_and_clear>
 80031ee:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 80031f0:	2400      	movs	r4, #0
 80031f2:	e000      	b.n	80031f6 <dropped_notify+0xe>
 80031f4:	3401      	adds	r4, #1
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <dropped_notify+0x3c>)
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <dropped_notify+0x40>)
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003200:	da0f      	bge.n	8003222 <dropped_notify+0x3a>
 8003202:	4809      	ldr	r0, [pc, #36]	; (8003228 <dropped_notify+0x40>)
 8003204:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003208:	6843      	ldr	r3, [r0, #4]
 800320a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f1      	beq.n	80031f4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8003210:	0123      	lsls	r3, r4, #4
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <dropped_notify+0x40>)
 8003214:	58d3      	ldr	r3, [r2, r3]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0eb      	beq.n	80031f4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 800321c:	4629      	mov	r1, r5
 800321e:	4798      	blx	r3
 8003220:	e7e8      	b.n	80031f4 <dropped_notify+0xc>
}
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	080150a0 	.word	0x080150a0
 8003228:	08015090 	.word	0x08015090

0800322c <z_log_dropped_pending>:
	return dropped_cnt > 0;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <z_log_dropped_pending+0x10>)
 800322e:	6818      	ldr	r0, [r3, #0]
}
 8003230:	2800      	cmp	r0, #0
 8003232:	bfd4      	ite	le
 8003234:	2000      	movle	r0, #0
 8003236:	2001      	movgt	r0, #1
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	2000119c 	.word	0x2000119c

08003240 <z_log_msg2_init>:
{
 8003240:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 8003242:	4902      	ldr	r1, [pc, #8]	; (800324c <z_log_msg2_init+0xc>)
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <z_log_msg2_init+0x10>)
 8003246:	f00e f812 	bl	801126e <mpsc_pbuf_init>
}
 800324a:	bd08      	pop	{r3, pc}
 800324c:	08015348 	.word	0x08015348
 8003250:	200011a4 	.word	0x200011a4

08003254 <log_core_init>:
{
 8003254:	b508      	push	{r3, lr}
	panic_mode = false;
 8003256:	2300      	movs	r3, #0
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <log_core_init+0x1c>)
 800325a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 800325c:	4a05      	ldr	r2, [pc, #20]	; (8003274 <log_core_init+0x20>)
 800325e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 8003260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <log_core_init+0x24>)
 8003266:	f7ff ff71 	bl	800314c <log_set_timestamp_func>
		z_log_msg2_init();
 800326a:	f7ff ffe9 	bl	8003240 <z_log_msg2_init>
}
 800326e:	bd08      	pop	{r3, pc}
 8003270:	20001a8d 	.word	0x20001a8d
 8003274:	2000119c 	.word	0x2000119c
 8003278:	080115d7 	.word	0x080115d7

0800327c <z_log_msg2_alloc>:
{
 800327c:	b508      	push	{r3, lr}
 800327e:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 8003280:	2200      	movs	r2, #0
 8003282:	2300      	movs	r3, #0
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <z_log_msg2_alloc+0x10>)
 8003286:	f00e f817 	bl	80112b8 <mpsc_pbuf_alloc>
}
 800328a:	bd08      	pop	{r3, pc}
 800328c:	200011a4 	.word	0x200011a4

08003290 <z_log_msg2_claim>:
{
 8003290:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 8003292:	4802      	ldr	r0, [pc, #8]	; (800329c <z_log_msg2_claim+0xc>)
 8003294:	f00e f8cd 	bl	8011432 <mpsc_pbuf_claim>
}
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	200011a4 	.word	0x200011a4

080032a0 <z_log_msg2_free>:
{
 80032a0:	b508      	push	{r3, lr}
 80032a2:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80032a4:	4801      	ldr	r0, [pc, #4]	; (80032ac <z_log_msg2_free+0xc>)
 80032a6:	f00e f935 	bl	8011514 <mpsc_pbuf_free>
}
 80032aa:	bd08      	pop	{r3, pc}
 80032ac:	200011a4 	.word	0x200011a4

080032b0 <msg_process>:
{
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	4606      	mov	r6, r0
	if (!bypass) {
 80032b4:	b9e9      	cbnz	r1, 80032f2 <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 80032b6:	2400      	movs	r4, #0
 80032b8:	e000      	b.n	80032bc <msg_process+0xc>
 80032ba:	3401      	adds	r4, #1
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <msg_process+0x4c>)
 80032be:	4a10      	ldr	r2, [pc, #64]	; (8003300 <msg_process+0x50>)
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80032c6:	da14      	bge.n	80032f2 <msg_process+0x42>
	return &__log_backends_start[idx];
 80032c8:	4d0d      	ldr	r5, [pc, #52]	; (8003300 <msg_process+0x50>)
 80032ca:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 80032ce:	686b      	ldr	r3, [r5, #4]
 80032d0:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f1      	beq.n	80032ba <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 80032d6:	4631      	mov	r1, r6
 80032d8:	4628      	mov	r0, r5
 80032da:	f00e f97a 	bl	80115d2 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 80032de:	2800      	cmp	r0, #0
 80032e0:	d0eb      	beq.n	80032ba <msg_process+0xa>
	backend->api->process(backend, msg);
 80032e2:	0127      	lsls	r7, r4, #4
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <msg_process+0x50>)
 80032e6:	59db      	ldr	r3, [r3, r7]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4631      	mov	r1, r6
 80032ec:	4628      	mov	r0, r5
 80032ee:	4798      	blx	r3
}
 80032f0:	e7e3      	b.n	80032ba <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 80032f2:	4630      	mov	r0, r6
 80032f4:	f7ff ffd4 	bl	80032a0 <z_log_msg2_free>
}
 80032f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fa:	bf00      	nop
 80032fc:	080150a0 	.word	0x080150a0
 8003300:	08015090 	.word	0x08015090

08003304 <z_log_msg2_pending>:
{
 8003304:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <z_log_msg2_pending+0xc>)
 8003308:	f00e f941 	bl	801158e <mpsc_pbuf_is_pending>
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	200011a4 	.word	0x200011a4

08003314 <z_impl_log_process>:
{
 8003314:	b510      	push	{r4, lr}
 8003316:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <z_impl_log_process+0x4c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b903      	cbnz	r3, 8003320 <z_impl_log_process+0xc>
 800331e:	b1d0      	cbz	r0, 8003356 <z_impl_log_process+0x42>
	msg = get_msg();
 8003320:	f00e f966 	bl	80115f0 <get_msg>
	if (msg.msg) {
 8003324:	4603      	mov	r3, r0
 8003326:	b180      	cbz	r0, 800334a <z_impl_log_process+0x36>
		if (!bypass) {
 8003328:	b95c      	cbnz	r4, 8003342 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <z_impl_log_process+0x50>)
 800332c:	f3bf 8f5b 	dmb	ish
 8003330:	e852 1f00 	ldrex	r1, [r2]
 8003334:	3901      	subs	r1, #1
 8003336:	e842 1000 	strex	r0, r1, [r2]
 800333a:	2800      	cmp	r0, #0
 800333c:	d1f8      	bne.n	8003330 <z_impl_log_process+0x1c>
 800333e:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8003342:	4621      	mov	r1, r4
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ffb3 	bl	80032b0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 800334a:	b914      	cbnz	r4, 8003352 <z_impl_log_process+0x3e>
 800334c:	f7ff ff6e 	bl	800322c <z_log_dropped_pending>
 8003350:	b910      	cbnz	r0, 8003358 <z_impl_log_process+0x44>
	return next_pending();
 8003352:	f00e f951 	bl	80115f8 <next_pending>
}
 8003356:	bd10      	pop	{r4, pc}
		dropped_notify();
 8003358:	f7ff ff46 	bl	80031e8 <dropped_notify>
 800335c:	e7f9      	b.n	8003352 <z_impl_log_process+0x3e>
 800335e:	bf00      	nop
 8003360:	20001a8c 	.word	0x20001a8c
 8003364:	20001198 	.word	0x20001198

08003368 <z_log_msg_post_finalize>:
{
 8003368:	b510      	push	{r4, lr}
 800336a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <z_log_msg_post_finalize+0x7c>)
 800336e:	f3bf 8f5b 	dmb	ish
 8003372:	e853 2f00 	ldrex	r2, [r3]
 8003376:	1c51      	adds	r1, r2, #1
 8003378:	e843 1000 	strex	r0, r1, [r3]
 800337c:	2800      	cmp	r0, #0
 800337e:	d1f8      	bne.n	8003372 <z_log_msg_post_finalize+0xa>
 8003380:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <z_log_msg_post_finalize+0x80>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b93b      	cbnz	r3, 800339a <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <z_log_msg_post_finalize+0x84>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b103      	cbz	r3, 8003392 <z_log_msg_post_finalize+0x2a>
 8003390:	b19a      	cbz	r2, 80033ba <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8003392:	2a0a      	cmp	r2, #10
 8003394:	d01c      	beq.n	80033d0 <z_log_msg_post_finalize+0x68>
}
 8003396:	b002      	add	sp, #8
 8003398:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800339a:	f04f 0310 	mov.w	r3, #16
 800339e:	f3ef 8411 	mrs	r4, BASEPRI
 80033a2:	f383 8812 	msr	BASEPRI_MAX, r3
 80033a6:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff ffb2 	bl	8003314 <z_impl_log_process>
	__asm__ volatile(
 80033b0:	f384 8811 	msr	BASEPRI, r4
 80033b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80033b8:	e7ed      	b.n	8003396 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2300      	movs	r3, #0
 80033be:	e9cd 2300 	strd	r2, r3, [sp]
 80033c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80033c6:	2300      	movs	r3, #0
 80033c8:	4809      	ldr	r0, [pc, #36]	; (80033f0 <z_log_msg_post_finalize+0x88>)
 80033ca:	f00b fe77 	bl	800f0bc <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 80033ce:	e7e2      	b.n	8003396 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0e0      	beq.n	8003396 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <z_log_msg_post_finalize+0x88>)
 80033d6:	f010 fe9f 	bl	8014118 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <z_log_msg_post_finalize+0x8c>)
 80033dc:	f00a feaa 	bl	800e134 <z_impl_k_sem_give>
}
 80033e0:	e7d9      	b.n	8003396 <z_log_msg_post_finalize+0x2e>
 80033e2:	bf00      	nop
 80033e4:	20001198 	.word	0x20001198
 80033e8:	20001a8d 	.word	0x20001a8d
 80033ec:	200011e4 	.word	0x200011e4
 80033f0:	20000eb0 	.word	0x20000eb0
 80033f4:	20000918 	.word	0x20000918

080033f8 <z_log_msg2_commit>:
{
 80033f8:	b510      	push	{r4, lr}
 80033fa:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <z_log_msg2_commit+0x1c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4798      	blx	r3
 8003402:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8003404:	4621      	mov	r1, r4
 8003406:	4804      	ldr	r0, [pc, #16]	; (8003418 <z_log_msg2_commit+0x20>)
 8003408:	f00d ffed 	bl	80113e6 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 800340c:	f7ff ffac 	bl	8003368 <z_log_msg_post_finalize>
}
 8003410:	bd10      	pop	{r4, pc}
 8003412:	bf00      	nop
 8003414:	2000001c 	.word	0x2000001c
 8003418:	200011a4 	.word	0x200011a4

0800341c <z_impl_log_panic>:
	if (panic_mode) {
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <z_impl_log_panic+0x4c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b103      	cbz	r3, 8003424 <z_impl_log_panic+0x8>
 8003422:	4770      	bx	lr
{
 8003424:	b510      	push	{r4, lr}
	log_init();
 8003426:	f7ff fe59 	bl	80030dc <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800342a:	2400      	movs	r4, #0
 800342c:	e000      	b.n	8003430 <z_impl_log_panic+0x14>
 800342e:	3401      	adds	r4, #1
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <z_impl_log_panic+0x50>)
 8003432:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <z_impl_log_panic+0x54>)
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800343a:	da0c      	bge.n	8003456 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <z_impl_log_panic+0x54>)
 800343e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8003442:	6843      	ldr	r3, [r0, #4]
 8003444:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f1      	beq.n	800342e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 800344a:	0123      	lsls	r3, r4, #4
 800344c:	4a08      	ldr	r2, [pc, #32]	; (8003470 <z_impl_log_panic+0x54>)
 800344e:	58d3      	ldr	r3, [r2, r3]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4798      	blx	r3
}
 8003454:	e7eb      	b.n	800342e <z_impl_log_panic+0x12>
 8003456:	2000      	movs	r0, #0
 8003458:	f7ff ff5c 	bl	8003314 <z_impl_log_process>
		while (log_process(false) == true) {
 800345c:	2800      	cmp	r0, #0
 800345e:	d1fa      	bne.n	8003456 <z_impl_log_panic+0x3a>
	panic_mode = true;
 8003460:	4b01      	ldr	r3, [pc, #4]	; (8003468 <z_impl_log_panic+0x4c>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
}
 8003466:	bd10      	pop	{r4, pc}
 8003468:	20001a8d 	.word	0x20001a8d
 800346c:	080150a0 	.word	0x080150a0
 8003470:	08015090 	.word	0x08015090

08003474 <log_process_thread_func>:
{
 8003474:	b508      	push	{r3, lr}
	log_init();
 8003476:	f7ff fe31 	bl	80030dc <log_init>
	return z_impl_z_current_get();
 800347a:	f00b fbf9 	bl	800ec70 <z_impl_z_current_get>
	thread_set(k_current_get());
 800347e:	f7ff fde3 	bl	8003048 <thread_set>
 8003482:	2000      	movs	r0, #0
 8003484:	f7ff ff46 	bl	8003314 <z_impl_log_process>
		if (log_process(false) == false) {
 8003488:	2800      	cmp	r0, #0
 800348a:	d1fa      	bne.n	8003482 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 800348c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <log_process_thread_func+0x28>)
 8003496:	f00a fe75 	bl	800e184 <z_impl_k_sem_take>
 800349a:	e7f2      	b.n	8003482 <log_process_thread_func+0xe>
 800349c:	20000918 	.word	0x20000918

080034a0 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <log_source_name_get+0x18>)
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <log_source_name_get+0x1c>)
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 80034aa:	d202      	bcs.n	80034b2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 80034ac:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80034b0:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	08015090 	.word	0x08015090
 80034bc:	08015018 	.word	0x08015018

080034c0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 80034c0:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <log_backend_enable+0x20>)
 80034c4:	1ac3      	subs	r3, r0, r3
 80034c6:	111b      	asrs	r3, r3, #4
 80034c8:	3301      	adds	r3, #1
	backend->cb->id = id;
 80034ca:	6842      	ldr	r2, [r0, #4]
 80034cc:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 80034ce:	6843      	ldr	r3, [r0, #4]
 80034d0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80034d2:	6843      	ldr	r3, [r0, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80034d8:	f7ff fe46 	bl	8003168 <z_log_notify_backend_enabled>
}
 80034dc:	bd08      	pop	{r3, pc}
 80034de:	bf00      	nop
 80034e0:	08015090 	.word	0x08015090

080034e4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80034e4:	b40e      	push	{r1, r2, r3}
 80034e6:	b500      	push	{lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	4601      	mov	r1, r0
 80034ec:	ab03      	add	r3, sp, #12
 80034ee:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80034f2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <print_formatted+0x20>)
 80034f6:	f7ff faa9 	bl	8002a4c <cbvprintf>
	va_end(args);

	return length;
}
 80034fa:	b002      	add	sp, #8
 80034fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003500:	b003      	add	sp, #12
 8003502:	4770      	bx	lr
 8003504:	0801169f 	.word	0x0801169f

08003508 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8003508:	b530      	push	{r4, r5, lr}
 800350a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 800350c:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003510:	d005      	beq.n	800351e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <timestamp_print+0x74>)
 8003514:	681c      	ldr	r4, [r3, #0]
 8003516:	b934      	cbnz	r4, 8003526 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8003518:	2000      	movs	r0, #0
	}

	return length;
}
 800351a:	b005      	add	sp, #20
 800351c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 800351e:	4918      	ldr	r1, [pc, #96]	; (8003580 <timestamp_print+0x78>)
 8003520:	f7ff ffe0 	bl	80034e4 <print_formatted>
 8003524:	e7f9      	b.n	800351a <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <timestamp_print+0x7c>)
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 800352e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <timestamp_print+0x80>)
 8003534:	fba2 320c 	umull	r3, r2, r2, ip
 8003538:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 800353a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 800353e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <timestamp_print+0x84>)
 8003544:	fba3 530e 	umull	r5, r3, r3, lr
 8003548:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 800354a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 800354e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003552:	fb0c f101 	mul.w	r1, ip, r1
 8003556:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800355a:	fb05 1114 	mls	r1, r5, r4, r1
 800355e:	fb0c f101 	mul.w	r1, ip, r1
 8003562:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8003566:	9102      	str	r1, [sp, #8]
 8003568:	9501      	str	r5, [sp, #4]
 800356a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800356e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 8003572:	9100      	str	r1, [sp, #0]
 8003574:	4906      	ldr	r1, [pc, #24]	; (8003590 <timestamp_print+0x88>)
 8003576:	f7ff ffb5 	bl	80034e4 <print_formatted>
 800357a:	e7ce      	b.n	800351a <timestamp_print+0x12>
 800357c:	200011e8 	.word	0x200011e8
 8003580:	0801535c 	.word	0x0801535c
 8003584:	200011ec 	.word	0x200011ec
 8003588:	91a2b3c5 	.word	0x91a2b3c5
 800358c:	88888889 	.word	0x88888889
 8003590:	08015368 	.word	0x08015368

08003594 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8003594:	b161      	cbz	r1, 80035b0 <color_print+0x1c>
{
 8003596:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003598:	b12a      	cbz	r2, 80035a6 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 800359a:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <color_print+0x20>)
 800359c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035a0:	b912      	cbnz	r2, 80035a8 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80035a2:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <color_print+0x24>)
 80035a4:	e000      	b.n	80035a8 <color_print+0x14>
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 80035a8:	4904      	ldr	r1, [pc, #16]	; (80035bc <color_print+0x28>)
 80035aa:	f7ff ff9b 	bl	80034e4 <print_formatted>
	}
}
 80035ae:	bd08      	pop	{r3, pc}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	080153e0 	.word	0x080153e0
 80035b8:	08015384 	.word	0x08015384
 80035bc:	0801538c 	.word	0x0801538c

080035c0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80035c0:	f011 0f10 	tst.w	r1, #16
 80035c4:	d10b      	bne.n	80035de <newline_print+0x1e>
{
 80035c6:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80035c8:	f011 0f20 	tst.w	r1, #32
 80035cc:	d003      	beq.n	80035d6 <newline_print+0x16>
		print_formatted(ctx, "\n");
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <newline_print+0x20>)
 80035d0:	f7ff ff88 	bl	80034e4 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 80035d4:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 80035d6:	4903      	ldr	r1, [pc, #12]	; (80035e4 <newline_print+0x24>)
 80035d8:	f7ff ff84 	bl	80034e4 <print_formatted>
 80035dc:	e7fa      	b.n	80035d4 <newline_print+0x14>
 80035de:	4770      	bx	lr
 80035e0:	080152fc 	.word	0x080152fc
 80035e4:	08015390 	.word	0x08015390

080035e8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ec:	4605      	mov	r5, r0
 80035ee:	460f      	mov	r7, r1
 80035f0:	4616      	mov	r6, r2
 80035f2:	4698      	mov	r8, r3
	newline_print(output, flags);
 80035f4:	9906      	ldr	r1, [sp, #24]
 80035f6:	f7ff ffe3 	bl	80035c0 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80035fa:	2400      	movs	r4, #0
 80035fc:	4544      	cmp	r4, r8
 80035fe:	da05      	bge.n	800360c <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8003600:	4924      	ldr	r1, [pc, #144]	; (8003694 <hexdump_line_print+0xac>)
 8003602:	4628      	mov	r0, r5
 8003604:	f7ff ff6e 	bl	80034e4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8003608:	3401      	adds	r4, #1
 800360a:	e7f7      	b.n	80035fc <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800360c:	2400      	movs	r4, #0
 800360e:	e009      	b.n	8003624 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003610:	4920      	ldr	r1, [pc, #128]	; (8003694 <hexdump_line_print+0xac>)
 8003612:	4628      	mov	r0, r5
 8003614:	f7ff ff66 	bl	80034e4 <print_formatted>
 8003618:	e00b      	b.n	8003632 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 800361a:	491f      	ldr	r1, [pc, #124]	; (8003698 <hexdump_line_print+0xb0>)
 800361c:	4628      	mov	r0, r5
 800361e:	f7ff ff61 	bl	80034e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003622:	3401      	adds	r4, #1
 8003624:	2c0f      	cmp	r4, #15
 8003626:	dc0c      	bgt.n	8003642 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8003628:	2c00      	cmp	r4, #0
 800362a:	dd02      	ble.n	8003632 <hexdump_line_print+0x4a>
 800362c:	f014 0f07 	tst.w	r4, #7
 8003630:	d0ee      	beq.n	8003610 <hexdump_line_print+0x28>
		if (i < length) {
 8003632:	42b4      	cmp	r4, r6
 8003634:	d2f1      	bcs.n	800361a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8003636:	5d3a      	ldrb	r2, [r7, r4]
 8003638:	4918      	ldr	r1, [pc, #96]	; (800369c <hexdump_line_print+0xb4>)
 800363a:	4628      	mov	r0, r5
 800363c:	f7ff ff52 	bl	80034e4 <print_formatted>
 8003640:	e7ef      	b.n	8003622 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <hexdump_line_print+0xb8>)
 8003644:	4628      	mov	r0, r5
 8003646:	f7ff ff4d 	bl	80034e4 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800364a:	2400      	movs	r4, #0
 800364c:	e009      	b.n	8003662 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 800364e:	4911      	ldr	r1, [pc, #68]	; (8003694 <hexdump_line_print+0xac>)
 8003650:	4628      	mov	r0, r5
 8003652:	f7ff ff47 	bl	80034e4 <print_formatted>
 8003656:	e00b      	b.n	8003670 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8003658:	4912      	ldr	r1, [pc, #72]	; (80036a4 <hexdump_line_print+0xbc>)
 800365a:	4628      	mov	r0, r5
 800365c:	f7ff ff42 	bl	80034e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003660:	3401      	adds	r4, #1
 8003662:	2c0f      	cmp	r4, #15
 8003664:	dc13      	bgt.n	800368e <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8003666:	2c00      	cmp	r4, #0
 8003668:	dd02      	ble.n	8003670 <hexdump_line_print+0x88>
 800366a:	f014 0f07 	tst.w	r4, #7
 800366e:	d0ee      	beq.n	800364e <hexdump_line_print+0x66>
		if (i < length) {
 8003670:	42b4      	cmp	r4, r6
 8003672:	d207      	bcs.n	8003684 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8003674:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <hexdump_line_print+0xc0>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 800367a:	f013 0f97 	tst.w	r3, #151	; 0x97
 800367e:	d1eb      	bne.n	8003658 <hexdump_line_print+0x70>
 8003680:	222e      	movs	r2, #46	; 0x2e
 8003682:	e7e9      	b.n	8003658 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <hexdump_line_print+0xac>)
 8003686:	4628      	mov	r0, r5
 8003688:	f7ff ff2c 	bl	80034e4 <print_formatted>
 800368c:	e7e8      	b.n	8003660 <hexdump_line_print+0x78>
		}
	}
}
 800368e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003692:	bf00      	nop
 8003694:	080153b8 	.word	0x080153b8
 8003698:	0801539c 	.word	0x0801539c
 800369c:	08015394 	.word	0x08015394
 80036a0:	080153a0 	.word	0x080153a0
 80036a4:	080153a4 	.word	0x080153a4
 80036a8:	080172bd 	.word	0x080172bd

080036ac <ids_print>:
{
 80036ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b0:	4680      	mov	r8, r0
 80036b2:	4616      	mov	r6, r2
 80036b4:	461d      	mov	r5, r3
 80036b6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 80036ba:	b959      	cbnz	r1, 80036d4 <ids_print+0x28>
	int total = 0;
 80036bc:	2400      	movs	r4, #0
	if (source_id >= 0) {
 80036be:	2f00      	cmp	r7, #0
 80036c0:	db1c      	blt.n	80036fc <ids_print+0x50>
		total += print_formatted(output,
 80036c2:	b186      	cbz	r6, 80036e6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80036c4:	2301      	movs	r3, #1
 80036c6:	9a07      	ldr	r2, [sp, #28]
 80036c8:	4093      	lsls	r3, r2
				(func_on &&
 80036ca:	f013 0f10 	tst.w	r3, #16
 80036ce:	d118      	bne.n	8003702 <ids_print+0x56>
		total += print_formatted(output,
 80036d0:	4e0d      	ldr	r6, [pc, #52]	; (8003708 <ids_print+0x5c>)
 80036d2:	e009      	b.n	80036e8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <ids_print+0x60>)
 80036d6:	9a07      	ldr	r2, [sp, #28]
 80036d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036dc:	490c      	ldr	r1, [pc, #48]	; (8003710 <ids_print+0x64>)
 80036de:	f7ff ff01 	bl	80034e4 <print_formatted>
 80036e2:	4604      	mov	r4, r0
 80036e4:	e7eb      	b.n	80036be <ids_print+0x12>
		total += print_formatted(output,
 80036e6:	4e08      	ldr	r6, [pc, #32]	; (8003708 <ids_print+0x5c>)
 80036e8:	4639      	mov	r1, r7
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7ff fed8 	bl	80034a0 <log_source_name_get>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4631      	mov	r1, r6
 80036f4:	4640      	mov	r0, r8
 80036f6:	f7ff fef5 	bl	80034e4 <print_formatted>
 80036fa:	4404      	add	r4, r0
}
 80036fc:	4620      	mov	r0, r4
 80036fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8003702:	4e04      	ldr	r6, [pc, #16]	; (8003714 <ids_print+0x68>)
 8003704:	e7f0      	b.n	80036e8 <ids_print+0x3c>
 8003706:	bf00      	nop
 8003708:	080153a8 	.word	0x080153a8
 800370c:	0801541c 	.word	0x0801541c
 8003710:	080153b4 	.word	0x080153b4
 8003714:	080153b0 	.word	0x080153b0

08003718 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	4605      	mov	r5, r0
 8003720:	460c      	mov	r4, r1
 8003722:	4616      	mov	r6, r2
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 800372a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800372e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8003732:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 8003736:	f00d ff63 	bl	8011600 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 800373a:	b1e8      	cbz	r0, 8003778 <prefix_print+0x60>
 800373c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 800373e:	4913      	ldr	r1, [pc, #76]	; (800378c <prefix_print+0x74>)
 8003740:	4628      	mov	r0, r5
 8003742:	f7ff fecf 	bl	80034e4 <print_formatted>
 8003746:	4607      	mov	r7, r0
	}

	if (stamp) {
 8003748:	f1bb 0f00 	cmp.w	fp, #0
 800374c:	d116      	bne.n	800377c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 800374e:	4642      	mov	r2, r8
 8003750:	4651      	mov	r1, sl
 8003752:	4628      	mov	r0, r5
 8003754:	f00d ff63 	bl	801161e <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 8003758:	f8cd 8004 	str.w	r8, [sp, #4]
 800375c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8003766:	4632      	mov	r2, r6
 8003768:	4649      	mov	r1, r9
 800376a:	4628      	mov	r0, r5
 800376c:	f7ff ff9e 	bl	80036ac <ids_print>
			domain_id, source_id, level);


	return length;
}
 8003770:	4438      	add	r0, r7
 8003772:	b005      	add	sp, #20
 8003774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8003778:	2700      	movs	r7, #0
 800377a:	e7e5      	b.n	8003748 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 800377c:	9a03      	ldr	r2, [sp, #12]
 800377e:	4621      	mov	r1, r4
 8003780:	4628      	mov	r0, r5
 8003782:	f7ff fec1 	bl	8003508 <timestamp_print>
 8003786:	4407      	add	r7, r0
 8003788:	e7e1      	b.n	800374e <prefix_print+0x36>
 800378a:	bf00      	nop
 800378c:	080153bc 	.word	0x080153bc

08003790 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8003790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003794:	b085      	sub	sp, #20
 8003796:	4606      	mov	r6, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 800379c:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 800379e:	880a      	ldrh	r2, [r1, #0]
 80037a0:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 80037a4:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 80037a8:	d035      	beq.n	8003816 <log_output_msg2_process+0x86>
	return msg->hdr.source;
 80037aa:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 80037ac:	7809      	ldrb	r1, [r1, #0]
 80037ae:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 80037b2:	b36a      	cbz	r2, 8003810 <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 80037b4:	4820      	ldr	r0, [pc, #128]	; (8003838 <log_output_msg2_process+0xa8>)
 80037b6:	1a12      	subs	r2, r2, r0
 80037b8:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 80037bc:	9202      	str	r2, [sp, #8]
 80037be:	9101      	str	r1, [sp, #4]
 80037c0:	f8cd 8000 	str.w	r8, [sp]
 80037c4:	2200      	movs	r2, #0
 80037c6:	4639      	mov	r1, r7
 80037c8:	4630      	mov	r0, r6
 80037ca:	f7ff ffa5 	bl	8003718 <prefix_print>
 80037ce:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 80037d0:	4625      	mov	r5, r4
 80037d2:	f855 3b0c 	ldr.w	r3, [r5], #12
 80037d6:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 80037da:	b143      	cbz	r3, 80037ee <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 80037dc:	f1b8 0f00 	cmp.w	r8, #0
 80037e0:	d11c      	bne.n	800381c <log_output_msg2_process+0x8c>
 80037e2:	4816      	ldr	r0, [pc, #88]	; (800383c <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 80037e4:	462b      	mov	r3, r5
 80037e6:	4632      	mov	r2, r6
 80037e8:	4915      	ldr	r1, [pc, #84]	; (8003840 <log_output_msg2_process+0xb0>)
 80037ea:	f00d fb91 	bl	8010f10 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 80037ee:	8862      	ldrh	r2, [r4, #2]
 80037f0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 80037f4:	6821      	ldr	r1, [r4, #0]
 80037f6:	f3c1 2149 	ubfx	r1, r1, #9, #10
 80037fa:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 80037fc:	b982      	cbnz	r2, 8003820 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 80037fe:	f1b8 0f00 	cmp.w	r8, #0
 8003802:	d113      	bne.n	800382c <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8003804:	4630      	mov	r0, r6
 8003806:	f00d ff3d 	bl	8011684 <log_output_flush>
}
 800380a:	b005      	add	sp, #20
 800380c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003814:	e7d2      	b.n	80037bc <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 8003816:	f04f 0900 	mov.w	r9, #0
 800381a:	e7d9      	b.n	80037d0 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 800381c:	4809      	ldr	r0, [pc, #36]	; (8003844 <log_output_msg2_process+0xb4>)
 800381e:	e7e1      	b.n	80037e4 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8003820:	9700      	str	r7, [sp, #0]
 8003822:	464b      	mov	r3, r9
 8003824:	4630      	mov	r0, r6
 8003826:	f00d ff12 	bl	801164e <log_msg2_hexdump>
 800382a:	e7e8      	b.n	80037fe <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 800382c:	4642      	mov	r2, r8
 800382e:	4639      	mov	r1, r7
 8003830:	4630      	mov	r0, r6
 8003832:	f00d ff00 	bl	8011636 <postfix_print>
 8003836:	e7e5      	b.n	8003804 <log_output_msg2_process+0x74>
 8003838:	08015018 	.word	0x08015018
 800383c:	080116d7 	.word	0x080116d7
 8003840:	08002a4d 	.word	0x08002a4d
 8003844:	0801169f 	.word	0x0801169f

08003848 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 800384e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003850:	f242 730f 	movw	r3, #9999	; 0x270f
 8003854:	428b      	cmp	r3, r1
 8003856:	bf28      	it	cs
 8003858:	460b      	movcs	r3, r1
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <log_output_dropped_process+0x4c>)
 800385c:	2105      	movs	r1, #5
 800385e:	4668      	mov	r0, sp
 8003860:	f00d fbab 	bl	8010fba <snprintk>
 8003864:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003866:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	220b      	movs	r2, #11
 800386c:	490a      	ldr	r1, [pc, #40]	; (8003898 <log_output_dropped_process+0x50>)
 800386e:	4628      	mov	r0, r5
 8003870:	f00d fec8 	bl	8011604 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003874:	6863      	ldr	r3, [r4, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4632      	mov	r2, r6
 800387a:	4669      	mov	r1, sp
 800387c:	4628      	mov	r0, r5
 800387e:	f00d fec1 	bl	8011604 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8003882:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	221b      	movs	r2, #27
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <log_output_dropped_process+0x54>)
 800388a:	4628      	mov	r0, r5
 800388c:	f00d feba 	bl	8011604 <buffer_write>
}
 8003890:	b002      	add	sp, #8
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	080159b0 	.word	0x080159b0
 8003898:	08015410 	.word	0x08015410
 800389c:	080153f4 	.word	0x080153f4

080038a0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <log_output_timestamp_freq_set+0x20>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80038a6:	e004      	b.n	80038b2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 80038a8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <log_output_timestamp_freq_set+0x20>)
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <log_output_timestamp_freq_set+0x24>)
 80038b4:	4298      	cmp	r0, r3
 80038b6:	d8f7      	bhi.n	80038a8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <log_output_timestamp_freq_set+0x28>)
 80038ba:	6018      	str	r0, [r3, #0]
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200011ec 	.word	0x200011ec
 80038c4:	000f4240 	.word	0x000f4240
 80038c8:	200011e8 	.word	0x200011e8

080038cc <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4606      	mov	r6, r0
 80038d0:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 80038d2:	2400      	movs	r4, #0
 80038d4:	e006      	b.n	80038e4 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <char_out+0x20>)
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
 80038dc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 80038e2:	3401      	adds	r4, #1
 80038e4:	42ac      	cmp	r4, r5
 80038e6:	d3f6      	bcc.n	80038d6 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 80038e8:	4628      	mov	r0, r5
 80038ea:	bd70      	pop	{r4, r5, r6, pc}
 80038ec:	20001204 	.word	0x20001204

080038f0 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <log_backend_uart_init+0x8>)
 80038f2:	4a02      	ldr	r2, [pc, #8]	; (80038fc <log_backend_uart_init+0xc>)
 80038f4:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 80038f6:	4770      	bx	lr
 80038f8:	20001204 	.word	0x20001204
 80038fc:	08014cbc 	.word	0x08014cbc

08003900 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003900:	b508      	push	{r3, lr}
	in_panic = true;
 8003902:	4b03      	ldr	r3, [pc, #12]	; (8003910 <panic+0x10>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <panic+0x14>)
 800390a:	f00d febb 	bl	8011684 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 800390e:	bd08      	pop	{r3, pc}
 8003910:	20001a8e 	.word	0x20001a8e
 8003914:	08015460 	.word	0x08015460

08003918 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003918:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 800391a:	4802      	ldr	r0, [pc, #8]	; (8003924 <dropped+0xc>)
 800391c:	f7ff ff94 	bl	8003848 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003920:	bd08      	pop	{r3, pc}
 8003922:	bf00      	nop
 8003924:	08015460 	.word	0x08015460

08003928 <process>:
{
 8003928:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 800392a:	220f      	movs	r2, #15
 800392c:	4801      	ldr	r0, [pc, #4]	; (8003934 <process+0xc>)
 800392e:	f7ff ff2f 	bl	8003790 <log_output_msg2_process>
}
 8003932:	bd08      	pop	{r3, pc}
 8003934:	08015460 	.word	0x08015460

08003938 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8003938:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 800393a:	4c04      	ldr	r4, [pc, #16]	; (800394c <__do_init_array_aux+0x14>)
 800393c:	e002      	b.n	8003944 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 800393e:	f854 3b04 	ldr.w	r3, [r4], #4
 8003942:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <__do_init_array_aux+0x18>)
 8003946:	429c      	cmp	r4, r3
 8003948:	d3f9      	bcc.n	800393e <__do_init_array_aux+0x6>
	}
}
 800394a:	bd10      	pop	{r4, pc}
 800394c:	08015014 	.word	0x08015014
 8003950:	08015018 	.word	0x08015018

08003954 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <__do_global_ctors_aux+0x1c>)
 8003956:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8003958:	b14b      	cbz	r3, 800396e <__do_global_ctors_aux+0x1a>
{
 800395a:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 800395c:	1e5c      	subs	r4, r3, #1
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <__do_global_ctors_aux+0x1c>)
 8003960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003964:	4798      	blx	r3
 8003966:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8003968:	2c00      	cmp	r4, #0
 800396a:	d1f7      	bne.n	800395c <__do_global_ctors_aux+0x8>
	}
}
 800396c:	bd10      	pop	{r4, pc}
 800396e:	4770      	bx	lr
 8003970:	0801500c 	.word	0x0801500c

08003974 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003974:	4901      	ldr	r1, [pc, #4]	; (800397c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003976:	2210      	movs	r2, #16
	str	r2, [r1]
 8003978:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800397a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 800397c:	e000ed10 	.word	0xe000ed10

08003980 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003980:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003982:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003984:	f380 8811 	msr	BASEPRI, r0
	isb
 8003988:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 800398c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003990:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003992:	b662      	cpsie	i
	isb
 8003994:	f3bf 8f6f 	isb	sy

	bx	lr
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 800399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a0:	b096      	sub	sp, #88	; 0x58
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 80039a6:	2301      	movs	r3, #1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	466c      	mov	r4, sp
 80039ac:	b088      	sub	sp, #32
 80039ae:	466b      	mov	r3, sp
 80039b0:	f113 020c 	adds.w	r2, r3, #12
 80039b4:	f000 80ca 	beq.w	8003b4c <esf_dump+0x1b0>
 80039b8:	2114      	movs	r1, #20
 80039ba:	2001      	movs	r0, #1
 80039bc:	8138      	strh	r0, [r7, #8]
 80039be:	b11a      	cbz	r2, 80039c8 <esf_dump+0x2c>
 80039c0:	2904      	cmp	r1, #4
 80039c2:	dd01      	ble.n	80039c8 <esf_dump+0x2c>
 80039c4:	4867      	ldr	r0, [pc, #412]	; (8003b64 <esf_dump+0x1c8>)
 80039c6:	6118      	str	r0, [r3, #16]
 80039c8:	6828      	ldr	r0, [r5, #0]
 80039ca:	b112      	cbz	r2, 80039d2 <esf_dump+0x36>
 80039cc:	2908      	cmp	r1, #8
 80039ce:	dd00      	ble.n	80039d2 <esf_dump+0x36>
 80039d0:	6158      	str	r0, [r3, #20]
 80039d2:	6868      	ldr	r0, [r5, #4]
 80039d4:	b112      	cbz	r2, 80039dc <esf_dump+0x40>
 80039d6:	290c      	cmp	r1, #12
 80039d8:	dd00      	ble.n	80039dc <esf_dump+0x40>
 80039da:	6198      	str	r0, [r3, #24]
 80039dc:	68a8      	ldr	r0, [r5, #8]
 80039de:	b112      	cbz	r2, 80039e6 <esf_dump+0x4a>
 80039e0:	2910      	cmp	r1, #16
 80039e2:	dd00      	ble.n	80039e6 <esf_dump+0x4a>
 80039e4:	61d8      	str	r0, [r3, #28]
 80039e6:	2913      	cmp	r1, #19
 80039e8:	f340 80b3 	ble.w	8003b52 <esf_dump+0x1b6>
 80039ec:	2014      	movs	r0, #20
 80039ee:	b12a      	cbz	r2, 80039fc <esf_dump+0x60>
 80039f0:	2100      	movs	r1, #0
 80039f2:	6079      	str	r1, [r7, #4]
 80039f4:	2105      	movs	r1, #5
 80039f6:	7139      	strb	r1, [r7, #4]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	60d9      	str	r1, [r3, #12]
 80039fc:	2100      	movs	r1, #0
 80039fe:	f36f 0100 	bfc	r1, #0, #1
 8003a02:	f36f 0141 	bfc	r1, #1, #1
 8003a06:	f36f 0182 	bfc	r1, #2, #1
 8003a0a:	f36f 01c5 	bfc	r1, #3, #3
 8003a0e:	2601      	movs	r6, #1
 8003a10:	f366 1188 	bfi	r1, r6, #6, #3
 8003a14:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8003a18:	f363 2152 	bfi	r1, r3, #9, #10
 8003a1c:	f36f 41de 	bfc	r1, #19, #12
 8003a20:	f36f 71df 	bfc	r1, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8003a24:	2300      	movs	r3, #0
 8003a26:	4850      	ldr	r0, [pc, #320]	; (8003b68 <esf_dump+0x1cc>)
 8003a28:	f00d fe7c 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8003a2c:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003a2e:	813e      	strh	r6, [r7, #8]
 8003a30:	466c      	mov	r4, sp
 8003a32:	b088      	sub	sp, #32
 8003a34:	466b      	mov	r3, sp
 8003a36:	f113 020c 	adds.w	r2, r3, #12
 8003a3a:	f000 808d 	beq.w	8003b58 <esf_dump+0x1bc>
 8003a3e:	2114      	movs	r1, #20
 8003a40:	2001      	movs	r0, #1
 8003a42:	8138      	strh	r0, [r7, #8]
 8003a44:	b11a      	cbz	r2, 8003a4e <esf_dump+0xb2>
 8003a46:	2904      	cmp	r1, #4
 8003a48:	dd01      	ble.n	8003a4e <esf_dump+0xb2>
 8003a4a:	4848      	ldr	r0, [pc, #288]	; (8003b6c <esf_dump+0x1d0>)
 8003a4c:	6118      	str	r0, [r3, #16]
 8003a4e:	68e8      	ldr	r0, [r5, #12]
 8003a50:	b112      	cbz	r2, 8003a58 <esf_dump+0xbc>
 8003a52:	2908      	cmp	r1, #8
 8003a54:	dd00      	ble.n	8003a58 <esf_dump+0xbc>
 8003a56:	6158      	str	r0, [r3, #20]
 8003a58:	6928      	ldr	r0, [r5, #16]
 8003a5a:	b112      	cbz	r2, 8003a62 <esf_dump+0xc6>
 8003a5c:	290c      	cmp	r1, #12
 8003a5e:	dd00      	ble.n	8003a62 <esf_dump+0xc6>
 8003a60:	6198      	str	r0, [r3, #24]
 8003a62:	6968      	ldr	r0, [r5, #20]
 8003a64:	b112      	cbz	r2, 8003a6c <esf_dump+0xd0>
 8003a66:	2910      	cmp	r1, #16
 8003a68:	dd00      	ble.n	8003a6c <esf_dump+0xd0>
 8003a6a:	61d8      	str	r0, [r3, #28]
 8003a6c:	2913      	cmp	r1, #19
 8003a6e:	dd76      	ble.n	8003b5e <esf_dump+0x1c2>
 8003a70:	2014      	movs	r0, #20
 8003a72:	b12a      	cbz	r2, 8003a80 <esf_dump+0xe4>
 8003a74:	2100      	movs	r1, #0
 8003a76:	6079      	str	r1, [r7, #4]
 8003a78:	2105      	movs	r1, #5
 8003a7a:	7139      	strb	r1, [r7, #4]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	60d9      	str	r1, [r3, #12]
 8003a80:	2100      	movs	r1, #0
 8003a82:	f36f 0100 	bfc	r1, #0, #1
 8003a86:	f36f 0141 	bfc	r1, #1, #1
 8003a8a:	f36f 0182 	bfc	r1, #2, #1
 8003a8e:	f36f 01c5 	bfc	r1, #3, #3
 8003a92:	2601      	movs	r6, #1
 8003a94:	f366 1188 	bfi	r1, r6, #6, #3
 8003a98:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8003a9c:	f363 2152 	bfi	r1, r3, #9, #10
 8003aa0:	f36f 41de 	bfc	r1, #19, #12
 8003aa4:	f36f 71df 	bfc	r1, #31, #1
 8003aa8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003b68 <esf_dump+0x1cc>
 8003aac:	2300      	movs	r3, #0
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f00d fe38 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8003ab4:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003ab6:	813e      	strh	r6, [r7, #8]
 8003ab8:	69eb      	ldr	r3, [r5, #28]
 8003aba:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <esf_dump+0x1d4>)
 8003abc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac0:	2400      	movs	r4, #0
 8003ac2:	607c      	str	r4, [r7, #4]
 8003ac4:	f04f 0a03 	mov.w	sl, #3
 8003ac8:	f887 a004 	strb.w	sl, [r7, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f364 0100 	bfi	r1, r4, #0, #1
 8003ad6:	f364 0141 	bfi	r1, r4, #1, #1
 8003ada:	f364 0182 	bfi	r1, r4, #2, #1
 8003ade:	f364 01c5 	bfi	r1, r4, #3, #3
 8003ae2:	f366 1188 	bfi	r1, r6, #6, #3
 8003ae6:	f04f 090c 	mov.w	r9, #12
 8003aea:	f369 2152 	bfi	r1, r9, #9, #10
 8003aee:	f364 41de 	bfi	r1, r4, #19, #12
 8003af2:	f364 71df 	bfi	r1, r4, #31, #1
 8003af6:	4623      	mov	r3, r4
 8003af8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003afc:	4640      	mov	r0, r8
 8003afe:	f00d fe11 	bl	8011724 <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003b02:	813e      	strh	r6, [r7, #8]
 8003b04:	69ab      	ldr	r3, [r5, #24]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <esf_dump+0x1d8>)
 8003b08:	653a      	str	r2, [r7, #80]	; 0x50
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b0c:	607c      	str	r4, [r7, #4]
 8003b0e:	f887 a004 	strb.w	sl, [r7, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b16:	4621      	mov	r1, r4
 8003b18:	f364 0100 	bfi	r1, r4, #0, #1
 8003b1c:	f364 0141 	bfi	r1, r4, #1, #1
 8003b20:	f364 0182 	bfi	r1, r4, #2, #1
 8003b24:	f364 01c5 	bfi	r1, r4, #3, #3
 8003b28:	f366 1188 	bfi	r1, r6, #6, #3
 8003b2c:	f369 2152 	bfi	r1, r9, #9, #10
 8003b30:	f364 41de 	bfi	r1, r4, #19, #12
 8003b34:	f364 71df 	bfi	r1, r4, #31, #1
 8003b38:	4623      	mov	r3, r4
 8003b3a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003b3e:	4640      	mov	r0, r8
 8003b40:	f00d fdf0 	bl	8011724 <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 8003b44:	3758      	adds	r7, #88	; 0x58
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b50:	e733      	b.n	80039ba <esf_dump+0x1e>
 8003b52:	f06f 001b 	mvn.w	r0, #27
 8003b56:	e74a      	b.n	80039ee <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b5c:	e770      	b.n	8003a40 <esf_dump+0xa4>
 8003b5e:	f06f 001b 	mvn.w	r0, #27
 8003b62:	e786      	b.n	8003a72 <esf_dump+0xd6>
 8003b64:	08015470 	.word	0x08015470
 8003b68:	08015058 	.word	0x08015058
 8003b6c:	080154a0 	.word	0x080154a0
 8003b70:	080154d0 	.word	0x080154d0
 8003b74:	080154e0 	.word	0x080154e0

08003b78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003b78:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	db07      	blt.n	8003b8e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	f000 021f 	and.w	r2, r0, #31
 8003b82:	0940      	lsrs	r0, r0, #5
 8003b84:	2301      	movs	r3, #1
 8003b86:	4093      	lsls	r3, r2
 8003b88:	4a01      	ldr	r2, [pc, #4]	; (8003b90 <arch_irq_enable+0x18>)
 8003b8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100

08003b94 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8003b94:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003b96:	2800      	cmp	r0, #0
 8003b98:	db0c      	blt.n	8003bb4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	f000 021f 	and.w	r2, r0, #31
 8003b9e:	0940      	lsrs	r0, r0, #5
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	3020      	adds	r0, #32
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <arch_irq_disable+0x24>)
 8003ba8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bb0:	f3bf 8f6f 	isb	sy
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 8003bbc:	0942      	lsrs	r2, r0, #5
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <arch_irq_is_enabled+0x18>)
 8003bc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bc4:	f000 001f 	and.w	r0, r0, #31
 8003bc8:	2301      	movs	r3, #1
 8003bca:	fa03 f000 	lsl.w	r0, r3, r0
}
 8003bce:	4010      	ands	r0, r2
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8003bd8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003bda:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	db08      	blt.n	8003bf2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be0:	0109      	lsls	r1, r1, #4
 8003be2:	b2c9      	uxtb	r1, r1
 8003be4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003be8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003bec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8003bf0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	f000 000f 	and.w	r0, r0, #15
 8003bf6:	0109      	lsls	r1, r1, #4
 8003bf8:	b2c9      	uxtb	r1, r1
 8003bfa:	4b01      	ldr	r3, [pc, #4]	; (8003c00 <z_arm_irq_priority_set+0x28>)
 8003bfc:	5419      	strb	r1, [r3, r0]
}
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed14 	.word	0xe000ed14

08003c04 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003c04:	bf30      	wfi
    b z_SysNmiOnReset
 8003c06:	f7ff bffd 	b.w	8003c04 <z_SysNmiOnReset>
 8003c0a:	bf00      	nop

08003c0c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8003c0c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <z_arm_prep_c+0x40>)
 8003c10:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <z_arm_prep_c+0x44>)
 8003c12:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003c16:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c1c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003c20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003c2c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003c30:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003c34:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003c38:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003c3c:	f00a f810 	bl	800dc60 <z_bss_zero>
	z_data_copy();
 8003c40:	f00b f868 	bl	800ed14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003c44:	f000 feae 	bl	80049a4 <z_arm_interrupt_init>
	z_cstart();
 8003c48:	f00a f816 	bl	800dc78 <z_cstart>
 8003c4c:	e000ed00 	.word	0xe000ed00
 8003c50:	08000000 	.word	0x08000000

08003c54 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <arch_swap+0x28>)
 8003c56:	6893      	ldr	r3, [r2, #8]
 8003c58:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8003c5a:	4909      	ldr	r1, [pc, #36]	; (8003c80 <arch_swap+0x2c>)
 8003c5c:	6809      	ldr	r1, [r1, #0]
 8003c5e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003c60:	4908      	ldr	r1, [pc, #32]	; (8003c84 <arch_swap+0x30>)
 8003c62:	684b      	ldr	r3, [r1, #4]
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003c74:	6893      	ldr	r3, [r2, #8]
}
 8003c76:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20001a2c 	.word	0x20001a2c
 8003c80:	080170b8 	.word	0x080170b8
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003c88:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003c8a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003c8c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003c90:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003c92:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003c96:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003c9a:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003c9c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003ca0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003ca4:	4f0c      	ldr	r7, [pc, #48]	; (8003cd8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003ca6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003caa:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003cac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003cae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003cb0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003cb2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003cb4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003cb6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003cba:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003cbc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003cbe:	f000 fec5 	bl	8004a4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003cc2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003cc6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003cca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003cce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003cd2:	4770      	bx	lr
    ldr r1, =_kernel
 8003cd4:	20001a2c 	.word	0x20001a2c
    ldr v4, =_SCS_ICSR
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003cdc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003ce0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003ce2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003ce6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003cea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003cec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003cf0:	2902      	cmp	r1, #2
    beq _oops
 8003cf2:	d0ff      	beq.n	8003cf4 <_oops>

08003cf4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003cf4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003cf6:	f00d fd90 	bl	801181a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003cfa:	bd01      	pop	{r0, pc}

08003cfc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8003cfc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003cfe:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8003d02:	490d      	ldr	r1, [pc, #52]	; (8003d38 <arch_new_thread+0x3c>)
 8003d04:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8003d08:	f021 0101 	bic.w	r1, r1, #1
 8003d0c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8003d10:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003d14:	9b01      	ldr	r3, [sp, #4]
 8003d16:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8003d1a:	9b02      	ldr	r3, [sp, #8]
 8003d1c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8003d2e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003d34:	bc10      	pop	{r4}
 8003d36:	4770      	bx	lr
 8003d38:	08010fd7 	.word	0x08010fd7

08003d3c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <z_check_thread_stack_fail+0x48>)
 8003d3e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8003d40:	b1ea      	cbz	r2, 8003d7e <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003d42:	f110 0f16 	cmn.w	r0, #22
 8003d46:	d010      	beq.n	8003d6a <z_check_thread_stack_fail+0x2e>
 8003d48:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003d4a:	f1a3 0c20 	sub.w	ip, r3, #32
 8003d4e:	4584      	cmp	ip, r0
 8003d50:	d805      	bhi.n	8003d5e <z_check_thread_stack_fail+0x22>
 8003d52:	4283      	cmp	r3, r0
 8003d54:	d905      	bls.n	8003d62 <z_check_thread_stack_fail+0x26>
 8003d56:	428b      	cmp	r3, r1
 8003d58:	d805      	bhi.n	8003d66 <z_check_thread_stack_fail+0x2a>
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	e00a      	b.n	8003d74 <z_check_thread_stack_fail+0x38>
 8003d5e:	2100      	movs	r1, #0
 8003d60:	e008      	b.n	8003d74 <z_check_thread_stack_fail+0x38>
 8003d62:	2100      	movs	r1, #0
 8003d64:	e006      	b.n	8003d74 <z_check_thread_stack_fail+0x38>
 8003d66:	2101      	movs	r1, #1
 8003d68:	e004      	b.n	8003d74 <z_check_thread_stack_fail+0x38>
 8003d6a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	bf94      	ite	ls
 8003d70:	2100      	movls	r1, #0
 8003d72:	2101      	movhi	r1, #1
 8003d74:	b909      	cbnz	r1, 8003d7a <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003d76:	2000      	movs	r0, #0
}
 8003d78:	4770      	bx	lr
		return thread->stack_info.start;
 8003d7a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003d7c:	4770      	bx	lr
		return 0;
 8003d7e:	2000      	movs	r0, #0
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20001a2c 	.word	0x20001a2c

08003d88 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003d88:	b508      	push	{r3, lr}
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <arch_switch_to_main_thread+0x28>)
 8003d90:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003d92:	f000 fe5b 	bl	8004a4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003d96:	4620      	mov	r0, r4
 8003d98:	f385 8809 	msr	PSP, r5
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	b663      	cpsie	if
 8003da0:	f381 8811 	msr	BASEPRI, r1
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	f00d f913 	bl	8010fd6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003db0:	20001a2c 	.word	0x20001a2c

08003db4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003db4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003db6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003dba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003dbe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003dc4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003dc6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003dc8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003dca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003dce:	4902      	ldr	r1, [pc, #8]	; (8003dd8 <_isr_wrapper+0x24>)
	bx r1
 8003dd0:	4708      	bx	r1
 8003dd2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003dd4:	08014d64 	.word	0x08014d64
	ldr r1, =z_arm_int_exit
 8003dd8:	08003ddd 	.word	0x08003ddd

08003ddc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003dde:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003de0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003de2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003de4:	d003      	beq.n	8003dee <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003de6:	4903      	ldr	r1, [pc, #12]	; (8003df4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003dec:	600a      	str	r2, [r1, #0]

08003dee <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003dee:	4770      	bx	lr
	ldr r3, =_kernel
 8003df0:	20001a2c 	.word	0x20001a2c
	ldr r1, =_SCS_ICSR
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8003df8:	b500      	push	{lr}
 8003dfa:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8003dfc:	290f      	cmp	r1, #15
 8003dfe:	dc0f      	bgt.n	8003e20 <reserved_exception+0x28>
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <reserved_exception+0x2c>)
 8003e02:	3910      	subs	r1, #16
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <reserved_exception+0x30>)
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	9000      	str	r0, [sp, #0]
 8003e10:	4603      	mov	r3, r0
 8003e12:	2201      	movs	r2, #1
 8003e14:	4905      	ldr	r1, [pc, #20]	; (8003e2c <reserved_exception+0x34>)
 8003e16:	f00d fd1b 	bl	8011850 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8003e1a:	b005      	add	sp, #20
 8003e1c:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <reserved_exception+0x38>)
 8003e22:	e7ee      	b.n	8003e02 <reserved_exception+0xa>
 8003e24:	0801552c 	.word	0x0801552c
 8003e28:	08015544 	.word	0x08015544
 8003e2c:	08015058 	.word	0x08015058
 8003e30:	08015510 	.word	0x08015510

08003e34 <bus_fault>:
{
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	b0ba      	sub	sp, #232	; 0xe8
 8003e38:	4605      	mov	r5, r0
 8003e3a:	460e      	mov	r6, r1
 8003e3c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f8ad 2008 	strh.w	r2, [sp, #8]
 8003e44:	4ba8      	ldr	r3, [pc, #672]	; (80040e8 <bus_fault+0x2b4>)
 8003e46:	930e      	str	r3, [sp, #56]	; 0x38
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	f88d 1004 	strb.w	r1, [sp, #4]
 8003e52:	9901      	ldr	r1, [sp, #4]
 8003e54:	910d      	str	r1, [sp, #52]	; 0x34
 8003e56:	4619      	mov	r1, r3
 8003e58:	f363 0100 	bfi	r1, r3, #0, #1
 8003e5c:	f363 0141 	bfi	r1, r3, #1, #1
 8003e60:	f363 0182 	bfi	r1, r3, #2, #1
 8003e64:	f363 01c5 	bfi	r1, r3, #3, #3
 8003e68:	f362 1188 	bfi	r1, r2, #6, #3
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	f362 2152 	bfi	r1, r2, #9, #10
 8003e72:	f363 41de 	bfi	r1, r3, #19, #12
 8003e76:	f363 71df 	bfi	r1, r3, #31, #1
 8003e7a:	aa0d      	add	r2, sp, #52	; 0x34
 8003e7c:	489b      	ldr	r0, [pc, #620]	; (80040ec <bus_fault+0x2b8>)
 8003e7e:	f00d fc51 	bl	8011724 <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003e82:	4b9b      	ldr	r3, [pc, #620]	; (80040f0 <bus_fault+0x2bc>)
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003e8a:	d128      	bne.n	8003ede <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003e8c:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <bus_fault+0x2bc>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003e94:	d146      	bne.n	8003f24 <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003e96:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <bus_fault+0x2bc>)
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003e9e:	d164      	bne.n	8003f6a <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003ea0:	4b93      	ldr	r3, [pc, #588]	; (80040f0 <bus_fault+0x2bc>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003ea8:	f040 80b4 	bne.w	8004014 <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003eac:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <bus_fault+0x2bc>)
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003eb4:	f040 80d1 	bne.w	800405a <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003eb8:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <bus_fault+0x2bc>)
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003ec0:	f040 80ee 	bne.w	80040a0 <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003ec4:	4a8a      	ldr	r2, [pc, #552]	; (80040f0 <bus_fault+0x2bc>)
 8003ec6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003ec8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f00d fcbb 	bl	801184c <memory_fault_recoverable>
 8003ed6:	7020      	strb	r0, [r4, #0]
}
 8003ed8:	2000      	movs	r0, #0
 8003eda:	b03a      	add	sp, #232	; 0xe8
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f8ad 2008 	strh.w	r2, [sp, #8]
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <bus_fault+0x2c0>)
 8003ee6:	9314      	str	r3, [sp, #80]	; 0x50
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	2102      	movs	r1, #2
 8003eee:	f88d 1004 	strb.w	r1, [sp, #4]
 8003ef2:	9901      	ldr	r1, [sp, #4]
 8003ef4:	9113      	str	r1, [sp, #76]	; 0x4c
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f363 0100 	bfi	r1, r3, #0, #1
 8003efc:	f363 0141 	bfi	r1, r3, #1, #1
 8003f00:	f363 0182 	bfi	r1, r3, #2, #1
 8003f04:	f363 01c5 	bfi	r1, r3, #3, #3
 8003f08:	f362 1188 	bfi	r1, r2, #6, #3
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	f362 2152 	bfi	r1, r2, #9, #10
 8003f12:	f363 41de 	bfi	r1, r3, #19, #12
 8003f16:	f363 71df 	bfi	r1, r3, #31, #1
 8003f1a:	aa13      	add	r2, sp, #76	; 0x4c
 8003f1c:	4873      	ldr	r0, [pc, #460]	; (80040ec <bus_fault+0x2b8>)
 8003f1e:	f00d fc01 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8003f22:	e7b3      	b.n	8003e8c <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8003f24:	2201      	movs	r2, #1
 8003f26:	f8ad 2008 	strh.w	r2, [sp, #8]
 8003f2a:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <bus_fault+0x2c4>)
 8003f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	2102      	movs	r1, #2
 8003f34:	f88d 1004 	strb.w	r1, [sp, #4]
 8003f38:	9901      	ldr	r1, [sp, #4]
 8003f3a:	9119      	str	r1, [sp, #100]	; 0x64
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f363 0100 	bfi	r1, r3, #0, #1
 8003f42:	f363 0141 	bfi	r1, r3, #1, #1
 8003f46:	f363 0182 	bfi	r1, r3, #2, #1
 8003f4a:	f363 01c5 	bfi	r1, r3, #3, #3
 8003f4e:	f362 1188 	bfi	r1, r2, #6, #3
 8003f52:	2208      	movs	r2, #8
 8003f54:	f362 2152 	bfi	r1, r2, #9, #10
 8003f58:	f363 41de 	bfi	r1, r3, #19, #12
 8003f5c:	f363 71df 	bfi	r1, r3, #31, #1
 8003f60:	aa19      	add	r2, sp, #100	; 0x64
 8003f62:	4862      	ldr	r0, [pc, #392]	; (80040ec <bus_fault+0x2b8>)
 8003f64:	f00d fbde 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8003f68:	e795      	b.n	8003e96 <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <bus_fault+0x2c8>)
 8003f72:	9320      	str	r3, [sp, #128]	; 0x80
 8003f74:	2300      	movs	r3, #0
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	2102      	movs	r1, #2
 8003f7a:	f88d 1004 	strb.w	r1, [sp, #4]
 8003f7e:	9901      	ldr	r1, [sp, #4]
 8003f80:	911f      	str	r1, [sp, #124]	; 0x7c
 8003f82:	4619      	mov	r1, r3
 8003f84:	f363 0100 	bfi	r1, r3, #0, #1
 8003f88:	f363 0141 	bfi	r1, r3, #1, #1
 8003f8c:	f363 0182 	bfi	r1, r3, #2, #1
 8003f90:	f363 01c5 	bfi	r1, r3, #3, #3
 8003f94:	f362 1188 	bfi	r1, r2, #6, #3
 8003f98:	2208      	movs	r2, #8
 8003f9a:	f362 2152 	bfi	r1, r2, #9, #10
 8003f9e:	f363 41de 	bfi	r1, r3, #19, #12
 8003fa2:	f363 71df 	bfi	r1, r3, #31, #1
 8003fa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fa8:	4850      	ldr	r0, [pc, #320]	; (80040ec <bus_fault+0x2b8>)
 8003faa:	f00d fbbb 	bl	8011724 <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 8003fae:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <bus_fault+0x2bc>)
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003fb8:	f43f af72 	beq.w	8003ea0 <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f8ad 0008 	strh.w	r0, [sp, #8]
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <bus_fault+0x2cc>)
 8003fc4:	9326      	str	r3, [sp, #152]	; 0x98
 8003fc6:	9227      	str	r2, [sp, #156]	; 0x9c
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f88d 2004 	strb.w	r2, [sp, #4]
 8003fd2:	9a01      	ldr	r2, [sp, #4]
 8003fd4:	9225      	str	r2, [sp, #148]	; 0x94
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f363 0100 	bfi	r1, r3, #0, #1
 8003fdc:	f363 0141 	bfi	r1, r3, #1, #1
 8003fe0:	f363 0182 	bfi	r1, r3, #2, #1
 8003fe4:	f363 01c5 	bfi	r1, r3, #3, #3
 8003fe8:	f360 1188 	bfi	r1, r0, #6, #3
 8003fec:	220c      	movs	r2, #12
 8003fee:	f362 2152 	bfi	r1, r2, #9, #10
 8003ff2:	f363 41de 	bfi	r1, r3, #19, #12
 8003ff6:	f363 71df 	bfi	r1, r3, #31, #1
 8003ffa:	aa25      	add	r2, sp, #148	; 0x94
 8003ffc:	483b      	ldr	r0, [pc, #236]	; (80040ec <bus_fault+0x2b8>)
 8003ffe:	f00d fb91 	bl	8011724 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8004002:	2e00      	cmp	r6, #0
 8004004:	f43f af4c 	beq.w	8003ea0 <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004008:	4a39      	ldr	r2, [pc, #228]	; (80040f0 <bus_fault+0x2bc>)
 800400a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800400c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004010:	6293      	str	r3, [r2, #40]	; 0x28
 8004012:	e745      	b.n	8003ea0 <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 8004014:	2201      	movs	r2, #1
 8004016:	f8ad 2008 	strh.w	r2, [sp, #8]
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <bus_fault+0x2d0>)
 800401c:	932c      	str	r3, [sp, #176]	; 0xb0
 800401e:	2300      	movs	r3, #0
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	2102      	movs	r1, #2
 8004024:	f88d 1004 	strb.w	r1, [sp, #4]
 8004028:	9901      	ldr	r1, [sp, #4]
 800402a:	912b      	str	r1, [sp, #172]	; 0xac
 800402c:	4619      	mov	r1, r3
 800402e:	f363 0100 	bfi	r1, r3, #0, #1
 8004032:	f363 0141 	bfi	r1, r3, #1, #1
 8004036:	f363 0182 	bfi	r1, r3, #2, #1
 800403a:	f363 01c5 	bfi	r1, r3, #3, #3
 800403e:	f362 1188 	bfi	r1, r2, #6, #3
 8004042:	2208      	movs	r2, #8
 8004044:	f362 2152 	bfi	r1, r2, #9, #10
 8004048:	f363 41de 	bfi	r1, r3, #19, #12
 800404c:	f363 71df 	bfi	r1, r3, #31, #1
 8004050:	aa2b      	add	r2, sp, #172	; 0xac
 8004052:	4826      	ldr	r0, [pc, #152]	; (80040ec <bus_fault+0x2b8>)
 8004054:	f00d fb66 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8004058:	e728      	b.n	8003eac <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 800405a:	2201      	movs	r2, #1
 800405c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <bus_fault+0x2d4>)
 8004062:	9338      	str	r3, [sp, #224]	; 0xe0
 8004064:	2300      	movs	r3, #0
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2102      	movs	r1, #2
 800406a:	f88d 1004 	strb.w	r1, [sp, #4]
 800406e:	9901      	ldr	r1, [sp, #4]
 8004070:	9137      	str	r1, [sp, #220]	; 0xdc
 8004072:	4619      	mov	r1, r3
 8004074:	f363 0100 	bfi	r1, r3, #0, #1
 8004078:	f363 0141 	bfi	r1, r3, #1, #1
 800407c:	f363 0182 	bfi	r1, r3, #2, #1
 8004080:	f363 01c5 	bfi	r1, r3, #3, #3
 8004084:	f362 1188 	bfi	r1, r2, #6, #3
 8004088:	2208      	movs	r2, #8
 800408a:	f362 2152 	bfi	r1, r2, #9, #10
 800408e:	f363 41de 	bfi	r1, r3, #19, #12
 8004092:	f363 71df 	bfi	r1, r3, #31, #1
 8004096:	aa37      	add	r2, sp, #220	; 0xdc
 8004098:	4814      	ldr	r0, [pc, #80]	; (80040ec <bus_fault+0x2b8>)
 800409a:	f00d fb43 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800409e:	e711      	b.n	8003ec4 <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80040a0:	2201      	movs	r2, #1
 80040a2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <bus_fault+0x2d8>)
 80040a8:	9332      	str	r3, [sp, #200]	; 0xc8
 80040aa:	2300      	movs	r3, #0
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2102      	movs	r1, #2
 80040b0:	f88d 1004 	strb.w	r1, [sp, #4]
 80040b4:	9901      	ldr	r1, [sp, #4]
 80040b6:	9131      	str	r1, [sp, #196]	; 0xc4
 80040b8:	4619      	mov	r1, r3
 80040ba:	f363 0100 	bfi	r1, r3, #0, #1
 80040be:	f363 0141 	bfi	r1, r3, #1, #1
 80040c2:	f363 0182 	bfi	r1, r3, #2, #1
 80040c6:	f363 01c5 	bfi	r1, r3, #3, #3
 80040ca:	f362 1188 	bfi	r1, r2, #6, #3
 80040ce:	2208      	movs	r2, #8
 80040d0:	f362 2152 	bfi	r1, r2, #9, #10
 80040d4:	f363 41de 	bfi	r1, r3, #19, #12
 80040d8:	f363 71df 	bfi	r1, r3, #31, #1
 80040dc:	aa31      	add	r2, sp, #196	; 0xc4
 80040de:	4803      	ldr	r0, [pc, #12]	; (80040ec <bus_fault+0x2b8>)
 80040e0:	f00d fb20 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80040e4:	e6ee      	b.n	8003ec4 <bus_fault+0x90>
 80040e6:	bf00      	nop
 80040e8:	08015558 	.word	0x08015558
 80040ec:	08015058 	.word	0x08015058
 80040f0:	e000ed00 	.word	0xe000ed00
 80040f4:	08015570 	.word	0x08015570
 80040f8:	08015584 	.word	0x08015584
 80040fc:	08015598 	.word	0x08015598
 8004100:	080155b4 	.word	0x080155b4
 8004104:	080155cc 	.word	0x080155cc
 8004108:	080155e8 	.word	0x080155e8
 800410c:	08015600 	.word	0x08015600

08004110 <usage_fault>:
{
 8004110:	b500      	push	{lr}
 8004112:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004114:	2201      	movs	r2, #1
 8004116:	f8ad 2008 	strh.w	r2, [sp, #8]
 800411a:	4b8e      	ldr	r3, [pc, #568]	; (8004354 <usage_fault+0x244>)
 800411c:	930e      	str	r3, [sp, #56]	; 0x38
 800411e:	2300      	movs	r3, #0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2102      	movs	r1, #2
 8004124:	f88d 1004 	strb.w	r1, [sp, #4]
 8004128:	9901      	ldr	r1, [sp, #4]
 800412a:	910d      	str	r1, [sp, #52]	; 0x34
 800412c:	4619      	mov	r1, r3
 800412e:	f363 0100 	bfi	r1, r3, #0, #1
 8004132:	f363 0141 	bfi	r1, r3, #1, #1
 8004136:	f363 0182 	bfi	r1, r3, #2, #1
 800413a:	f363 01c5 	bfi	r1, r3, #3, #3
 800413e:	f362 1188 	bfi	r1, r2, #6, #3
 8004142:	2208      	movs	r2, #8
 8004144:	f362 2152 	bfi	r1, r2, #9, #10
 8004148:	f363 41de 	bfi	r1, r3, #19, #12
 800414c:	f363 71df 	bfi	r1, r3, #31, #1
 8004150:	aa0d      	add	r2, sp, #52	; 0x34
 8004152:	4881      	ldr	r0, [pc, #516]	; (8004358 <usage_fault+0x248>)
 8004154:	f00d fae6 	bl	8011724 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004158:	4b80      	ldr	r3, [pc, #512]	; (800435c <usage_fault+0x24c>)
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004160:	d125      	bne.n	80041ae <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004162:	4b7e      	ldr	r3, [pc, #504]	; (800435c <usage_fault+0x24c>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800416a:	d143      	bne.n	80041f4 <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800416c:	4b7b      	ldr	r3, [pc, #492]	; (800435c <usage_fault+0x24c>)
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004174:	d161      	bne.n	800423a <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004176:	4b79      	ldr	r3, [pc, #484]	; (800435c <usage_fault+0x24c>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800417e:	d17f      	bne.n	8004280 <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004180:	4b76      	ldr	r3, [pc, #472]	; (800435c <usage_fault+0x24c>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004188:	f040 809d 	bne.w	80042c6 <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800418c:	4b73      	ldr	r3, [pc, #460]	; (800435c <usage_fault+0x24c>)
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004194:	f040 80ba 	bne.w	800430c <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004198:	4a70      	ldr	r2, [pc, #448]	; (800435c <usage_fault+0x24c>)
 800419a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800419c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80041a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80041a4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80041a6:	2000      	movs	r0, #0
 80041a8:	b035      	add	sp, #212	; 0xd4
 80041aa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 80041ae:	2201      	movs	r2, #1
 80041b0:	f8ad 2008 	strh.w	r2, [sp, #8]
 80041b4:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <usage_fault+0x250>)
 80041b6:	9314      	str	r3, [sp, #80]	; 0x50
 80041b8:	2300      	movs	r3, #0
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2102      	movs	r1, #2
 80041be:	f88d 1004 	strb.w	r1, [sp, #4]
 80041c2:	9901      	ldr	r1, [sp, #4]
 80041c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80041c6:	4619      	mov	r1, r3
 80041c8:	f363 0100 	bfi	r1, r3, #0, #1
 80041cc:	f363 0141 	bfi	r1, r3, #1, #1
 80041d0:	f363 0182 	bfi	r1, r3, #2, #1
 80041d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80041d8:	f362 1188 	bfi	r1, r2, #6, #3
 80041dc:	2208      	movs	r2, #8
 80041de:	f362 2152 	bfi	r1, r2, #9, #10
 80041e2:	f363 41de 	bfi	r1, r3, #19, #12
 80041e6:	f363 71df 	bfi	r1, r3, #31, #1
 80041ea:	aa13      	add	r2, sp, #76	; 0x4c
 80041ec:	485a      	ldr	r0, [pc, #360]	; (8004358 <usage_fault+0x248>)
 80041ee:	f00d fa99 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80041f2:	e7b6      	b.n	8004162 <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 80041f4:	2201      	movs	r2, #1
 80041f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80041fa:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <usage_fault+0x254>)
 80041fc:	931a      	str	r3, [sp, #104]	; 0x68
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2102      	movs	r1, #2
 8004204:	f88d 1004 	strb.w	r1, [sp, #4]
 8004208:	9901      	ldr	r1, [sp, #4]
 800420a:	9119      	str	r1, [sp, #100]	; 0x64
 800420c:	4619      	mov	r1, r3
 800420e:	f363 0100 	bfi	r1, r3, #0, #1
 8004212:	f363 0141 	bfi	r1, r3, #1, #1
 8004216:	f363 0182 	bfi	r1, r3, #2, #1
 800421a:	f363 01c5 	bfi	r1, r3, #3, #3
 800421e:	f362 1188 	bfi	r1, r2, #6, #3
 8004222:	2208      	movs	r2, #8
 8004224:	f362 2152 	bfi	r1, r2, #9, #10
 8004228:	f363 41de 	bfi	r1, r3, #19, #12
 800422c:	f363 71df 	bfi	r1, r3, #31, #1
 8004230:	aa19      	add	r2, sp, #100	; 0x64
 8004232:	4849      	ldr	r0, [pc, #292]	; (8004358 <usage_fault+0x248>)
 8004234:	f00d fa76 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8004238:	e798      	b.n	800416c <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 800423a:	2201      	movs	r2, #1
 800423c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004240:	4b49      	ldr	r3, [pc, #292]	; (8004368 <usage_fault+0x258>)
 8004242:	9320      	str	r3, [sp, #128]	; 0x80
 8004244:	2300      	movs	r3, #0
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	2102      	movs	r1, #2
 800424a:	f88d 1004 	strb.w	r1, [sp, #4]
 800424e:	9901      	ldr	r1, [sp, #4]
 8004250:	911f      	str	r1, [sp, #124]	; 0x7c
 8004252:	4619      	mov	r1, r3
 8004254:	f363 0100 	bfi	r1, r3, #0, #1
 8004258:	f363 0141 	bfi	r1, r3, #1, #1
 800425c:	f363 0182 	bfi	r1, r3, #2, #1
 8004260:	f363 01c5 	bfi	r1, r3, #3, #3
 8004264:	f362 1188 	bfi	r1, r2, #6, #3
 8004268:	2208      	movs	r2, #8
 800426a:	f362 2152 	bfi	r1, r2, #9, #10
 800426e:	f363 41de 	bfi	r1, r3, #19, #12
 8004272:	f363 71df 	bfi	r1, r3, #31, #1
 8004276:	aa1f      	add	r2, sp, #124	; 0x7c
 8004278:	4837      	ldr	r0, [pc, #220]	; (8004358 <usage_fault+0x248>)
 800427a:	f00d fa53 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800427e:	e77a      	b.n	8004176 <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8004280:	2201      	movs	r2, #1
 8004282:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <usage_fault+0x25c>)
 8004288:	9326      	str	r3, [sp, #152]	; 0x98
 800428a:	2300      	movs	r3, #0
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	2102      	movs	r1, #2
 8004290:	f88d 1004 	strb.w	r1, [sp, #4]
 8004294:	9901      	ldr	r1, [sp, #4]
 8004296:	9125      	str	r1, [sp, #148]	; 0x94
 8004298:	4619      	mov	r1, r3
 800429a:	f363 0100 	bfi	r1, r3, #0, #1
 800429e:	f363 0141 	bfi	r1, r3, #1, #1
 80042a2:	f363 0182 	bfi	r1, r3, #2, #1
 80042a6:	f363 01c5 	bfi	r1, r3, #3, #3
 80042aa:	f362 1188 	bfi	r1, r2, #6, #3
 80042ae:	2208      	movs	r2, #8
 80042b0:	f362 2152 	bfi	r1, r2, #9, #10
 80042b4:	f363 41de 	bfi	r1, r3, #19, #12
 80042b8:	f363 71df 	bfi	r1, r3, #31, #1
 80042bc:	aa25      	add	r2, sp, #148	; 0x94
 80042be:	4826      	ldr	r0, [pc, #152]	; (8004358 <usage_fault+0x248>)
 80042c0:	f00d fa30 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80042c4:	e75c      	b.n	8004180 <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80042c6:	2201      	movs	r2, #1
 80042c8:	f8ad 2008 	strh.w	r2, [sp, #8]
 80042cc:	4b28      	ldr	r3, [pc, #160]	; (8004370 <usage_fault+0x260>)
 80042ce:	932c      	str	r3, [sp, #176]	; 0xb0
 80042d0:	2300      	movs	r3, #0
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	2102      	movs	r1, #2
 80042d6:	f88d 1004 	strb.w	r1, [sp, #4]
 80042da:	9901      	ldr	r1, [sp, #4]
 80042dc:	912b      	str	r1, [sp, #172]	; 0xac
 80042de:	4619      	mov	r1, r3
 80042e0:	f363 0100 	bfi	r1, r3, #0, #1
 80042e4:	f363 0141 	bfi	r1, r3, #1, #1
 80042e8:	f363 0182 	bfi	r1, r3, #2, #1
 80042ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80042f0:	f362 1188 	bfi	r1, r2, #6, #3
 80042f4:	2208      	movs	r2, #8
 80042f6:	f362 2152 	bfi	r1, r2, #9, #10
 80042fa:	f363 41de 	bfi	r1, r3, #19, #12
 80042fe:	f363 71df 	bfi	r1, r3, #31, #1
 8004302:	aa2b      	add	r2, sp, #172	; 0xac
 8004304:	4814      	ldr	r0, [pc, #80]	; (8004358 <usage_fault+0x248>)
 8004306:	f00d fa0d 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800430a:	e73f      	b.n	800418c <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800430c:	2201      	movs	r2, #1
 800430e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <usage_fault+0x264>)
 8004314:	9332      	str	r3, [sp, #200]	; 0xc8
 8004316:	2300      	movs	r3, #0
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	2102      	movs	r1, #2
 800431c:	f88d 1004 	strb.w	r1, [sp, #4]
 8004320:	9901      	ldr	r1, [sp, #4]
 8004322:	9131      	str	r1, [sp, #196]	; 0xc4
 8004324:	4619      	mov	r1, r3
 8004326:	f363 0100 	bfi	r1, r3, #0, #1
 800432a:	f363 0141 	bfi	r1, r3, #1, #1
 800432e:	f363 0182 	bfi	r1, r3, #2, #1
 8004332:	f363 01c5 	bfi	r1, r3, #3, #3
 8004336:	f362 1188 	bfi	r1, r2, #6, #3
 800433a:	2208      	movs	r2, #8
 800433c:	f362 2152 	bfi	r1, r2, #9, #10
 8004340:	f363 41de 	bfi	r1, r3, #19, #12
 8004344:	f363 71df 	bfi	r1, r3, #31, #1
 8004348:	aa31      	add	r2, sp, #196	; 0xc4
 800434a:	4803      	ldr	r0, [pc, #12]	; (8004358 <usage_fault+0x248>)
 800434c:	f00d f9ea 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8004350:	e722      	b.n	8004198 <usage_fault+0x88>
 8004352:	bf00      	nop
 8004354:	08015630 	.word	0x08015630
 8004358:	08015058 	.word	0x08015058
 800435c:	e000ed00 	.word	0xe000ed00
 8004360:	08015648 	.word	0x08015648
 8004364:	0801565c 	.word	0x0801565c
 8004368:	08015678 	.word	0x08015678
 800436c:	08015698 	.word	0x08015698
 8004370:	080156c0 	.word	0x080156c0
 8004374:	080156dc 	.word	0x080156dc

08004378 <debug_monitor>:
{
 8004378:	b500      	push	{lr}
 800437a:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 800437c:	2300      	movs	r3, #0
 800437e:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 8004380:	2201      	movs	r2, #1
 8004382:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004386:	4910      	ldr	r1, [pc, #64]	; (80043c8 <debug_monitor+0x50>)
 8004388:	910e      	str	r1, [sp, #56]	; 0x38
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	2102      	movs	r1, #2
 800438e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004392:	9901      	ldr	r1, [sp, #4]
 8004394:	910d      	str	r1, [sp, #52]	; 0x34
 8004396:	4619      	mov	r1, r3
 8004398:	f363 0100 	bfi	r1, r3, #0, #1
 800439c:	f363 0141 	bfi	r1, r3, #1, #1
 80043a0:	f363 0182 	bfi	r1, r3, #2, #1
 80043a4:	f363 01c5 	bfi	r1, r3, #3, #3
 80043a8:	f362 1188 	bfi	r1, r2, #6, #3
 80043ac:	2208      	movs	r2, #8
 80043ae:	f362 2152 	bfi	r1, r2, #9, #10
 80043b2:	f363 41de 	bfi	r1, r3, #19, #12
 80043b6:	f363 71df 	bfi	r1, r3, #31, #1
 80043ba:	aa0d      	add	r2, sp, #52	; 0x34
 80043bc:	4803      	ldr	r0, [pc, #12]	; (80043cc <debug_monitor+0x54>)
 80043be:	f00d f9b1 	bl	8011724 <z_impl_z_log_msg2_static_create>
}
 80043c2:	b011      	add	sp, #68	; 0x44
 80043c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80043c8:	08015708 	.word	0x08015708
 80043cc:	08015058 	.word	0x08015058

080043d0 <mem_manage_fault>:
{
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b0b5      	sub	sp, #212	; 0xd4
 80043d4:	4605      	mov	r5, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 80043da:	2201      	movs	r2, #1
 80043dc:	f8ad 2008 	strh.w	r2, [sp, #8]
 80043e0:	4ba3      	ldr	r3, [pc, #652]	; (8004670 <mem_manage_fault+0x2a0>)
 80043e2:	930e      	str	r3, [sp, #56]	; 0x38
 80043e4:	2300      	movs	r3, #0
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2102      	movs	r1, #2
 80043ea:	f88d 1004 	strb.w	r1, [sp, #4]
 80043ee:	9901      	ldr	r1, [sp, #4]
 80043f0:	910d      	str	r1, [sp, #52]	; 0x34
 80043f2:	4619      	mov	r1, r3
 80043f4:	f363 0100 	bfi	r1, r3, #0, #1
 80043f8:	f363 0141 	bfi	r1, r3, #1, #1
 80043fc:	f363 0182 	bfi	r1, r3, #2, #1
 8004400:	f363 01c5 	bfi	r1, r3, #3, #3
 8004404:	f362 1188 	bfi	r1, r2, #6, #3
 8004408:	2208      	movs	r2, #8
 800440a:	f362 2152 	bfi	r1, r2, #9, #10
 800440e:	f363 41de 	bfi	r1, r3, #19, #12
 8004412:	f363 71df 	bfi	r1, r3, #31, #1
 8004416:	aa0d      	add	r2, sp, #52	; 0x34
 8004418:	4896      	ldr	r0, [pc, #600]	; (8004674 <mem_manage_fault+0x2a4>)
 800441a:	f00d f983 	bl	8011724 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800441e:	4b96      	ldr	r3, [pc, #600]	; (8004678 <mem_manage_fault+0x2a8>)
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f013 0f10 	tst.w	r3, #16
 8004426:	d134      	bne.n	8004492 <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004428:	4b93      	ldr	r3, [pc, #588]	; (8004678 <mem_manage_fault+0x2a8>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f013 0f08 	tst.w	r3, #8
 8004430:	d152      	bne.n	80044d8 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8004432:	4b91      	ldr	r3, [pc, #580]	; (8004678 <mem_manage_fault+0x2a8>)
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f013 0f02 	tst.w	r3, #2
 800443a:	d170      	bne.n	800451e <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 800443c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004440:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <mem_manage_fault+0x2a8>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f013 0f01 	tst.w	r3, #1
 8004448:	f040 80c0 	bne.w	80045cc <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800444c:	4b8a      	ldr	r3, [pc, #552]	; (8004678 <mem_manage_fault+0x2a8>)
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f013 0f20 	tst.w	r3, #32
 8004454:	f040 80dd 	bne.w	8004612 <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004458:	4b87      	ldr	r3, [pc, #540]	; (8004678 <mem_manage_fault+0x2a8>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f013 0f10 	tst.w	r3, #16
 8004460:	d104      	bne.n	800446c <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004462:	4b85      	ldr	r3, [pc, #532]	; (8004678 <mem_manage_fault+0x2a8>)
 8004464:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004466:	f014 0402 	ands.w	r4, r4, #2
 800446a:	d005      	beq.n	8004478 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800446c:	4b82      	ldr	r3, [pc, #520]	; (8004678 <mem_manage_fault+0x2a8>)
 800446e:	685c      	ldr	r4, [r3, #4]
 8004470:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8004474:	f040 80f0 	bne.w	8004658 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004478:	4a7f      	ldr	r2, [pc, #508]	; (8004678 <mem_manage_fault+0x2a8>)
 800447a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800447c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004480:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004482:	2101      	movs	r1, #1
 8004484:	4628      	mov	r0, r5
 8004486:	f00d f9e1 	bl	801184c <memory_fault_recoverable>
 800448a:	7030      	strb	r0, [r6, #0]
}
 800448c:	4620      	mov	r0, r4
 800448e:	b035      	add	sp, #212	; 0xd4
 8004490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004492:	2201      	movs	r2, #1
 8004494:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004498:	4b78      	ldr	r3, [pc, #480]	; (800467c <mem_manage_fault+0x2ac>)
 800449a:	9314      	str	r3, [sp, #80]	; 0x50
 800449c:	2300      	movs	r3, #0
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2102      	movs	r1, #2
 80044a2:	f88d 1004 	strb.w	r1, [sp, #4]
 80044a6:	9901      	ldr	r1, [sp, #4]
 80044a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80044aa:	4619      	mov	r1, r3
 80044ac:	f363 0100 	bfi	r1, r3, #0, #1
 80044b0:	f363 0141 	bfi	r1, r3, #1, #1
 80044b4:	f363 0182 	bfi	r1, r3, #2, #1
 80044b8:	f363 01c5 	bfi	r1, r3, #3, #3
 80044bc:	f362 1188 	bfi	r1, r2, #6, #3
 80044c0:	2208      	movs	r2, #8
 80044c2:	f362 2152 	bfi	r1, r2, #9, #10
 80044c6:	f363 41de 	bfi	r1, r3, #19, #12
 80044ca:	f363 71df 	bfi	r1, r3, #31, #1
 80044ce:	aa13      	add	r2, sp, #76	; 0x4c
 80044d0:	4868      	ldr	r0, [pc, #416]	; (8004674 <mem_manage_fault+0x2a4>)
 80044d2:	f00d f927 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80044d6:	e7a7      	b.n	8004428 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 80044d8:	2201      	movs	r2, #1
 80044da:	f8ad 2008 	strh.w	r2, [sp, #8]
 80044de:	4b68      	ldr	r3, [pc, #416]	; (8004680 <mem_manage_fault+0x2b0>)
 80044e0:	931a      	str	r3, [sp, #104]	; 0x68
 80044e2:	2300      	movs	r3, #0
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2102      	movs	r1, #2
 80044e8:	f88d 1004 	strb.w	r1, [sp, #4]
 80044ec:	9901      	ldr	r1, [sp, #4]
 80044ee:	9119      	str	r1, [sp, #100]	; 0x64
 80044f0:	4619      	mov	r1, r3
 80044f2:	f363 0100 	bfi	r1, r3, #0, #1
 80044f6:	f363 0141 	bfi	r1, r3, #1, #1
 80044fa:	f363 0182 	bfi	r1, r3, #2, #1
 80044fe:	f363 01c5 	bfi	r1, r3, #3, #3
 8004502:	f362 1188 	bfi	r1, r2, #6, #3
 8004506:	2208      	movs	r2, #8
 8004508:	f362 2152 	bfi	r1, r2, #9, #10
 800450c:	f363 41de 	bfi	r1, r3, #19, #12
 8004510:	f363 71df 	bfi	r1, r3, #31, #1
 8004514:	aa19      	add	r2, sp, #100	; 0x64
 8004516:	4857      	ldr	r0, [pc, #348]	; (8004674 <mem_manage_fault+0x2a4>)
 8004518:	f00d f904 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800451c:	e789      	b.n	8004432 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 800451e:	2201      	movs	r2, #1
 8004520:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004524:	4b57      	ldr	r3, [pc, #348]	; (8004684 <mem_manage_fault+0x2b4>)
 8004526:	9320      	str	r3, [sp, #128]	; 0x80
 8004528:	2300      	movs	r3, #0
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	2102      	movs	r1, #2
 800452e:	f88d 1004 	strb.w	r1, [sp, #4]
 8004532:	9901      	ldr	r1, [sp, #4]
 8004534:	911f      	str	r1, [sp, #124]	; 0x7c
 8004536:	4619      	mov	r1, r3
 8004538:	f363 0100 	bfi	r1, r3, #0, #1
 800453c:	f363 0141 	bfi	r1, r3, #1, #1
 8004540:	f363 0182 	bfi	r1, r3, #2, #1
 8004544:	f363 01c5 	bfi	r1, r3, #3, #3
 8004548:	f362 1188 	bfi	r1, r2, #6, #3
 800454c:	2208      	movs	r2, #8
 800454e:	f362 2152 	bfi	r1, r2, #9, #10
 8004552:	f363 41de 	bfi	r1, r3, #19, #12
 8004556:	f363 71df 	bfi	r1, r3, #31, #1
 800455a:	aa1f      	add	r2, sp, #124	; 0x7c
 800455c:	4845      	ldr	r0, [pc, #276]	; (8004674 <mem_manage_fault+0x2a4>)
 800455e:	f00d f8e1 	bl	8011724 <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 8004562:	4b45      	ldr	r3, [pc, #276]	; (8004678 <mem_manage_fault+0x2a8>)
 8004564:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f013 0f80 	tst.w	r3, #128	; 0x80
 800456c:	d102      	bne.n	8004574 <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 800456e:	f06f 0715 	mvn.w	r7, #21
 8004572:	e765      	b.n	8004440 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004574:	2201      	movs	r2, #1
 8004576:	f8ad 2008 	strh.w	r2, [sp, #8]
 800457a:	4b43      	ldr	r3, [pc, #268]	; (8004688 <mem_manage_fault+0x2b8>)
 800457c:	9326      	str	r3, [sp, #152]	; 0x98
 800457e:	9727      	str	r7, [sp, #156]	; 0x9c
 8004580:	2300      	movs	r3, #0
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2103      	movs	r1, #3
 8004586:	f88d 1004 	strb.w	r1, [sp, #4]
 800458a:	9901      	ldr	r1, [sp, #4]
 800458c:	9125      	str	r1, [sp, #148]	; 0x94
 800458e:	4619      	mov	r1, r3
 8004590:	f363 0100 	bfi	r1, r3, #0, #1
 8004594:	f363 0141 	bfi	r1, r3, #1, #1
 8004598:	f363 0182 	bfi	r1, r3, #2, #1
 800459c:	f363 01c5 	bfi	r1, r3, #3, #3
 80045a0:	f362 1188 	bfi	r1, r2, #6, #3
 80045a4:	220c      	movs	r2, #12
 80045a6:	f362 2152 	bfi	r1, r2, #9, #10
 80045aa:	f363 41de 	bfi	r1, r3, #19, #12
 80045ae:	f363 71df 	bfi	r1, r3, #31, #1
 80045b2:	aa25      	add	r2, sp, #148	; 0x94
 80045b4:	482f      	ldr	r0, [pc, #188]	; (8004674 <mem_manage_fault+0x2a4>)
 80045b6:	f00d f8b5 	bl	8011724 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	f43f af40 	beq.w	8004440 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <mem_manage_fault+0x2a8>)
 80045c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	6293      	str	r3, [r2, #40]	; 0x28
 80045ca:	e739      	b.n	8004440 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 80045cc:	2201      	movs	r2, #1
 80045ce:	f8ad 2008 	strh.w	r2, [sp, #8]
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <mem_manage_fault+0x2bc>)
 80045d4:	932c      	str	r3, [sp, #176]	; 0xb0
 80045d6:	2300      	movs	r3, #0
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	2102      	movs	r1, #2
 80045dc:	f88d 1004 	strb.w	r1, [sp, #4]
 80045e0:	9901      	ldr	r1, [sp, #4]
 80045e2:	912b      	str	r1, [sp, #172]	; 0xac
 80045e4:	4619      	mov	r1, r3
 80045e6:	f363 0100 	bfi	r1, r3, #0, #1
 80045ea:	f363 0141 	bfi	r1, r3, #1, #1
 80045ee:	f363 0182 	bfi	r1, r3, #2, #1
 80045f2:	f363 01c5 	bfi	r1, r3, #3, #3
 80045f6:	f362 1188 	bfi	r1, r2, #6, #3
 80045fa:	2208      	movs	r2, #8
 80045fc:	f362 2152 	bfi	r1, r2, #9, #10
 8004600:	f363 41de 	bfi	r1, r3, #19, #12
 8004604:	f363 71df 	bfi	r1, r3, #31, #1
 8004608:	aa2b      	add	r2, sp, #172	; 0xac
 800460a:	481a      	ldr	r0, [pc, #104]	; (8004674 <mem_manage_fault+0x2a4>)
 800460c:	f00d f88a 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8004610:	e71c      	b.n	800444c <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 8004612:	2201      	movs	r2, #1
 8004614:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004618:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <mem_manage_fault+0x2c0>)
 800461a:	9332      	str	r3, [sp, #200]	; 0xc8
 800461c:	2300      	movs	r3, #0
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2102      	movs	r1, #2
 8004622:	f88d 1004 	strb.w	r1, [sp, #4]
 8004626:	9901      	ldr	r1, [sp, #4]
 8004628:	9131      	str	r1, [sp, #196]	; 0xc4
 800462a:	4619      	mov	r1, r3
 800462c:	f363 0100 	bfi	r1, r3, #0, #1
 8004630:	f363 0141 	bfi	r1, r3, #1, #1
 8004634:	f363 0182 	bfi	r1, r3, #2, #1
 8004638:	f363 01c5 	bfi	r1, r3, #3, #3
 800463c:	f362 1188 	bfi	r1, r2, #6, #3
 8004640:	2208      	movs	r2, #8
 8004642:	f362 2152 	bfi	r1, r2, #9, #10
 8004646:	f363 41de 	bfi	r1, r3, #19, #12
 800464a:	f363 71df 	bfi	r1, r3, #31, #1
 800464e:	aa31      	add	r2, sp, #196	; 0xc4
 8004650:	4808      	ldr	r0, [pc, #32]	; (8004674 <mem_manage_fault+0x2a4>)
 8004652:	f00d f867 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8004656:	e6ff      	b.n	8004458 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004658:	4629      	mov	r1, r5
 800465a:	4638      	mov	r0, r7
 800465c:	f7ff fb6e 	bl	8003d3c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004660:	4604      	mov	r4, r0
 8004662:	2800      	cmp	r0, #0
 8004664:	f43f af08 	beq.w	8004478 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004668:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800466c:	2402      	movs	r4, #2
 800466e:	e703      	b.n	8004478 <mem_manage_fault+0xa8>
 8004670:	0801572c 	.word	0x0801572c
 8004674:	08015058 	.word	0x08015058
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	08015744 	.word	0x08015744
 8004680:	08015584 	.word	0x08015584
 8004684:	08015778 	.word	0x08015778
 8004688:	08015790 	.word	0x08015790
 800468c:	080157a8 	.word	0x080157a8
 8004690:	08015600 	.word	0x08015600

08004694 <hard_fault>:
{
 8004694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004696:	b0a9      	sub	sp, #164	; 0xa4
 8004698:	4607      	mov	r7, r0
 800469a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 800469c:	2301      	movs	r3, #1
 800469e:	f8ad 3008 	strh.w	r3, [sp, #8]
 80046a2:	4a73      	ldr	r2, [pc, #460]	; (8004870 <hard_fault+0x1dc>)
 80046a4:	920e      	str	r2, [sp, #56]	; 0x38
 80046a6:	2400      	movs	r4, #0
 80046a8:	9401      	str	r4, [sp, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f88d 2004 	strb.w	r2, [sp, #4]
 80046b0:	9a01      	ldr	r2, [sp, #4]
 80046b2:	920d      	str	r2, [sp, #52]	; 0x34
 80046b4:	4621      	mov	r1, r4
 80046b6:	f364 0100 	bfi	r1, r4, #0, #1
 80046ba:	f364 0141 	bfi	r1, r4, #1, #1
 80046be:	f364 0182 	bfi	r1, r4, #2, #1
 80046c2:	f364 01c5 	bfi	r1, r4, #3, #3
 80046c6:	f363 1188 	bfi	r1, r3, #6, #3
 80046ca:	2308      	movs	r3, #8
 80046cc:	f363 2152 	bfi	r1, r3, #9, #10
 80046d0:	f364 41de 	bfi	r1, r4, #19, #12
 80046d4:	f364 71df 	bfi	r1, r4, #31, #1
 80046d8:	4623      	mov	r3, r4
 80046da:	aa0d      	add	r2, sp, #52	; 0x34
 80046dc:	4865      	ldr	r0, [pc, #404]	; (8004874 <hard_fault+0x1e0>)
 80046de:	f00d f821 	bl	8011724 <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 80046e2:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80046e4:	4b64      	ldr	r3, [pc, #400]	; (8004878 <hard_fault+0x1e4>)
 80046e6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80046e8:	f015 0502 	ands.w	r5, r5, #2
 80046ec:	d10a      	bne.n	8004704 <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <hard_fault+0x1e4>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	db2a      	blt.n	800474c <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80046f6:	4b60      	ldr	r3, [pc, #384]	; (8004878 <hard_fault+0x1e4>)
 80046f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80046fa:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80046fe:	d149      	bne.n	8004794 <hard_fault+0x100>
}
 8004700:	b029      	add	sp, #164	; 0xa4
 8004702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 8004704:	2301      	movs	r3, #1
 8004706:	f8ad 3008 	strh.w	r3, [sp, #8]
 800470a:	4a5c      	ldr	r2, [pc, #368]	; (800487c <hard_fault+0x1e8>)
 800470c:	9226      	str	r2, [sp, #152]	; 0x98
 800470e:	9401      	str	r4, [sp, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f88d 2004 	strb.w	r2, [sp, #4]
 8004716:	9a01      	ldr	r2, [sp, #4]
 8004718:	9225      	str	r2, [sp, #148]	; 0x94
 800471a:	4621      	mov	r1, r4
 800471c:	f364 0100 	bfi	r1, r4, #0, #1
 8004720:	f364 0141 	bfi	r1, r4, #1, #1
 8004724:	f364 0182 	bfi	r1, r4, #2, #1
 8004728:	f364 01c5 	bfi	r1, r4, #3, #3
 800472c:	f363 1188 	bfi	r1, r3, #6, #3
 8004730:	2308      	movs	r3, #8
 8004732:	f363 2152 	bfi	r1, r3, #9, #10
 8004736:	f364 41de 	bfi	r1, r4, #19, #12
 800473a:	f364 71df 	bfi	r1, r4, #31, #1
 800473e:	4623      	mov	r3, r4
 8004740:	aa25      	add	r2, sp, #148	; 0x94
 8004742:	484c      	ldr	r0, [pc, #304]	; (8004874 <hard_fault+0x1e0>)
 8004744:	f00c ffee 	bl	8011724 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004748:	4620      	mov	r0, r4
 800474a:	e7d9      	b.n	8004700 <hard_fault+0x6c>
		PR_EXC("  Debug event");
 800474c:	2201      	movs	r2, #1
 800474e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004752:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <hard_fault+0x1ec>)
 8004754:	9320      	str	r3, [sp, #128]	; 0x80
 8004756:	2300      	movs	r3, #0
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2102      	movs	r1, #2
 800475c:	f88d 1004 	strb.w	r1, [sp, #4]
 8004760:	9901      	ldr	r1, [sp, #4]
 8004762:	911f      	str	r1, [sp, #124]	; 0x7c
 8004764:	4619      	mov	r1, r3
 8004766:	f363 0100 	bfi	r1, r3, #0, #1
 800476a:	f363 0141 	bfi	r1, r3, #1, #1
 800476e:	f363 0182 	bfi	r1, r3, #2, #1
 8004772:	f363 01c5 	bfi	r1, r3, #3, #3
 8004776:	f362 1188 	bfi	r1, r2, #6, #3
 800477a:	2208      	movs	r2, #8
 800477c:	f362 2152 	bfi	r1, r2, #9, #10
 8004780:	f363 41de 	bfi	r1, r3, #19, #12
 8004784:	f363 71df 	bfi	r1, r3, #31, #1
 8004788:	aa1f      	add	r2, sp, #124	; 0x7c
 800478a:	483a      	ldr	r0, [pc, #232]	; (8004874 <hard_fault+0x1e0>)
 800478c:	f00c ffca 	bl	8011724 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004790:	4628      	mov	r0, r5
 8004792:	e7b5      	b.n	8004700 <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8004794:	2201      	movs	r2, #1
 8004796:	f8ad 2008 	strh.w	r2, [sp, #8]
 800479a:	4b3a      	ldr	r3, [pc, #232]	; (8004884 <hard_fault+0x1f0>)
 800479c:	9314      	str	r3, [sp, #80]	; 0x50
 800479e:	2300      	movs	r3, #0
 80047a0:	9301      	str	r3, [sp, #4]
 80047a2:	2102      	movs	r1, #2
 80047a4:	f88d 1004 	strb.w	r1, [sp, #4]
 80047a8:	9901      	ldr	r1, [sp, #4]
 80047aa:	9113      	str	r1, [sp, #76]	; 0x4c
 80047ac:	4619      	mov	r1, r3
 80047ae:	f363 0100 	bfi	r1, r3, #0, #1
 80047b2:	f363 0141 	bfi	r1, r3, #1, #1
 80047b6:	f363 0182 	bfi	r1, r3, #2, #1
 80047ba:	f363 01c5 	bfi	r1, r3, #3, #3
 80047be:	f362 1188 	bfi	r1, r2, #6, #3
 80047c2:	2208      	movs	r2, #8
 80047c4:	f362 2152 	bfi	r1, r2, #9, #10
 80047c8:	f363 41de 	bfi	r1, r3, #19, #12
 80047cc:	f363 71df 	bfi	r1, r3, #31, #1
 80047d0:	aa13      	add	r2, sp, #76	; 0x4c
 80047d2:	4828      	ldr	r0, [pc, #160]	; (8004874 <hard_fault+0x1e0>)
 80047d4:	f00c ffa6 	bl	8011724 <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80047d8:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 80047da:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80047de:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d00d      	beq.n	8004802 <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <hard_fault+0x1e4>)
 80047e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ec:	bb7b      	cbnz	r3, 800484e <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <hard_fault+0x1e4>)
 80047f0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047f4:	bb8b      	cbnz	r3, 800485a <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <hard_fault+0x1e4>)
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	bb9b      	cbnz	r3, 8004866 <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80047fe:	4628      	mov	r0, r5
	return reason;
 8004800:	e77e      	b.n	8004700 <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8004802:	2201      	movs	r2, #1
 8004804:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004808:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <hard_fault+0x1f4>)
 800480a:	931a      	str	r3, [sp, #104]	; 0x68
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004810:	2300      	movs	r3, #0
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	2103      	movs	r1, #3
 8004816:	f88d 1004 	strb.w	r1, [sp, #4]
 800481a:	9901      	ldr	r1, [sp, #4]
 800481c:	9119      	str	r1, [sp, #100]	; 0x64
 800481e:	4619      	mov	r1, r3
 8004820:	f363 0100 	bfi	r1, r3, #0, #1
 8004824:	f363 0141 	bfi	r1, r3, #1, #1
 8004828:	f363 0182 	bfi	r1, r3, #2, #1
 800482c:	f363 01c5 	bfi	r1, r3, #3, #3
 8004830:	f362 1188 	bfi	r1, r2, #6, #3
 8004834:	220c      	movs	r2, #12
 8004836:	f362 2152 	bfi	r1, r2, #9, #10
 800483a:	f363 41de 	bfi	r1, r3, #19, #12
 800483e:	f363 71df 	bfi	r1, r3, #31, #1
 8004842:	aa19      	add	r2, sp, #100	; 0x64
 8004844:	480b      	ldr	r0, [pc, #44]	; (8004874 <hard_fault+0x1e0>)
 8004846:	f00c ff6d 	bl	8011724 <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 800484a:	6838      	ldr	r0, [r7, #0]
 800484c:	e758      	b.n	8004700 <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 800484e:	4632      	mov	r2, r6
 8004850:	2101      	movs	r1, #1
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff fdbc 	bl	80043d0 <mem_manage_fault>
 8004858:	e752      	b.n	8004700 <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 800485a:	4632      	mov	r2, r6
 800485c:	2101      	movs	r1, #1
 800485e:	4638      	mov	r0, r7
 8004860:	f7ff fae8 	bl	8003e34 <bus_fault>
 8004864:	e74c      	b.n	8004700 <hard_fault+0x6c>
			reason = usage_fault(esf);
 8004866:	4638      	mov	r0, r7
 8004868:	f7ff fc52 	bl	8004110 <usage_fault>
 800486c:	e748      	b.n	8004700 <hard_fault+0x6c>
 800486e:	bf00      	nop
 8004870:	080157c8 	.word	0x080157c8
 8004874:	08015058 	.word	0x08015058
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	080157e0 	.word	0x080157e0
 8004880:	08015804 	.word	0x08015804
 8004884:	08015814 	.word	0x08015814
 8004888:	08015834 	.word	0x08015834

0800488c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004890:	4b38      	ldr	r3, [pc, #224]	; (8004974 <z_arm_fault+0xe8>)
 8004892:	685d      	ldr	r5, [r3, #4]
 8004894:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004898:	2300      	movs	r3, #0
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80048a2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80048a6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80048aa:	d13c      	bne.n	8004926 <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80048ac:	f002 030c 	and.w	r3, r2, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d010      	beq.n	80048d6 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80048b4:	f012 0f08 	tst.w	r2, #8
 80048b8:	d032      	beq.n	8004920 <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 80048ba:	460c      	mov	r4, r1
	*nested_exc = false;
 80048bc:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 80048be:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 80048c2:	4629      	mov	r1, r5
 80048c4:	4620      	mov	r0, r4
 80048c6:	f00c ffd0 	bl	801186a <fault_handle>
 80048ca:	4605      	mov	r5, r0
	if (recoverable) {
 80048cc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 80048d0:	b363      	cbz	r3, 800492c <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 80048d2:	b018      	add	sp, #96	; 0x60
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80048d6:	2301      	movs	r3, #1
 80048d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <z_arm_fault+0xec>)
 80048de:	9216      	str	r2, [sp, #88]	; 0x58
 80048e0:	2400      	movs	r4, #0
 80048e2:	9400      	str	r4, [sp, #0]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f88d 2000 	strb.w	r2, [sp]
 80048ea:	9a00      	ldr	r2, [sp, #0]
 80048ec:	9215      	str	r2, [sp, #84]	; 0x54
 80048ee:	4621      	mov	r1, r4
 80048f0:	f364 0100 	bfi	r1, r4, #0, #1
 80048f4:	f364 0141 	bfi	r1, r4, #1, #1
 80048f8:	f364 0182 	bfi	r1, r4, #2, #1
 80048fc:	f364 01c5 	bfi	r1, r4, #3, #3
 8004900:	f363 1188 	bfi	r1, r3, #6, #3
 8004904:	2308      	movs	r3, #8
 8004906:	f363 2152 	bfi	r1, r3, #9, #10
 800490a:	f364 41de 	bfi	r1, r4, #19, #12
 800490e:	f364 71df 	bfi	r1, r4, #31, #1
 8004912:	4623      	mov	r3, r4
 8004914:	aa15      	add	r2, sp, #84	; 0x54
 8004916:	4819      	ldr	r0, [pc, #100]	; (800497c <z_arm_fault+0xf0>)
 8004918:	f00c ff04 	bl	8011724 <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 800491c:	4626      	mov	r6, r4
		return NULL;
 800491e:	e7ce      	b.n	80048be <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8004920:	4604      	mov	r4, r0
			*nested_exc = true;
 8004922:	2601      	movs	r6, #1
 8004924:	e7cb      	b.n	80048be <z_arm_fault+0x32>
	*nested_exc = false;
 8004926:	2600      	movs	r6, #0
		return NULL;
 8004928:	4634      	mov	r4, r6
 800492a:	e7c8      	b.n	80048be <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800492c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	6861      	ldr	r1, [r4, #4]
 8004934:	68a2      	ldr	r2, [r4, #8]
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800493c:	6920      	ldr	r0, [r4, #16]
 800493e:	6961      	ldr	r1, [r4, #20]
 8004940:	69a2      	ldr	r2, [r4, #24]
 8004942:	69e3      	ldr	r3, [r4, #28]
 8004944:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8004948:	b146      	cbz	r6, 800495c <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800494a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494e:	b95a      	cbnz	r2, 8004968 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004950:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004954:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8004958:	9310      	str	r3, [sp, #64]	; 0x40
 800495a:	e005      	b.n	8004968 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800495c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800495e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 8004968:	a909      	add	r1, sp, #36	; 0x24
 800496a:	4628      	mov	r0, r5
 800496c:	f00c ff49 	bl	8011802 <z_arm_fatal_error>
 8004970:	e7af      	b.n	80048d2 <z_arm_fault+0x46>
 8004972:	bf00      	nop
 8004974:	e000ed00 	.word	0xe000ed00
 8004978:	08015850 	.word	0x08015850
 800497c:	08015058 	.word	0x08015058

08004980 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <z_arm_fault_init+0xc>)
 8004982:	6953      	ldr	r3, [r2, #20]
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004990:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004994:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8004998:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800499a:	4672      	mov	r2, lr
	bl z_arm_fault
 800499c:	f7ff ff76 	bl	800488c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80049a0:	bd01      	pop	{r0, pc}
 80049a2:	bf00      	nop

080049a4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80049a4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80049a6:	e006      	b.n	80049b6 <z_arm_interrupt_init+0x12>
 80049a8:	f002 010f 	and.w	r1, r2, #15
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <z_arm_interrupt_init+0x30>)
 80049ae:	440b      	add	r3, r1
 80049b0:	2110      	movs	r1, #16
 80049b2:	7619      	strb	r1, [r3, #24]
 80049b4:	3201      	adds	r2, #1
 80049b6:	2a54      	cmp	r2, #84	; 0x54
 80049b8:	dc0a      	bgt.n	80049d0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 80049ba:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dbf3      	blt.n	80049a8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80049c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80049c8:	2110      	movs	r1, #16
 80049ca:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80049ce:	e7f1      	b.n	80049b4 <z_arm_interrupt_init+0x10>
	}
}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ecfc 	.word	0xe000ecfc

080049d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80049d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80049da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80049de:	4808      	ldr	r0, [pc, #32]	; (8004a00 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80049e0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80049e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80049e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80049ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80049ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80049f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80049f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80049f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80049fa:	f7ff f907 	bl	8003c0c <z_arm_prep_c>
 80049fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004a00:	200047a0 	.word	0x200047a0

08004a04 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8004a04:	b508      	push	{r3, lr}
	if (_current == thread) {
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <z_impl_k_thread_abort+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4283      	cmp	r3, r0
 8004a0c:	d002      	beq.n	8004a14 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004a0e:	f00a f945 	bl	800ec9c <z_thread_abort>
}
 8004a12:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a14:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f8      	beq.n	8004a0e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004a1c:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <z_impl_k_thread_abort+0x28>)
 8004a1e:	6853      	ldr	r3, [r2, #4]
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6053      	str	r3, [r2, #4]
 8004a26:	e7f2      	b.n	8004a0e <z_impl_k_thread_abort+0xa>
 8004a28:	20001a2c 	.word	0x20001a2c
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8004a30:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <z_arm_configure_static_mpu_regions+0x10>)
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <z_arm_configure_static_mpu_regions+0x14>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	4803      	ldr	r0, [pc, #12]	; (8004a48 <z_arm_configure_static_mpu_regions+0x18>)
 8004a3a:	f00c ff6b 	bl	8011914 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8004a3e:	bd08      	pop	{r3, pc}
 8004a40:	20028000 	.word	0x20028000
 8004a44:	20000000 	.word	0x20000000
 8004a48:	08015880 	.word	0x08015880

08004a4c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004a4c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004a4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004a50:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004a52:	4805      	ldr	r0, [pc, #20]	; (8004a68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004a54:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8004a56:	2320      	movs	r3, #32
 8004a58:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <z_arm_configure_dynamic_mpu_regions+0x20>)
 8004a5c:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f00c ff5c 	bl	801191c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8004a64:	bd08      	pop	{r3, pc}
 8004a66:	bf00      	nop
 8004a68:	20001210 	.word	0x20001210
 8004a6c:	150b0000 	.word	0x150b0000

08004a70 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <region_init+0x24>)
 8004a72:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004a76:	680b      	ldr	r3, [r1, #0]
 8004a78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8004a7c:	4303      	orrs	r3, r0
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004a82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004a86:	688b      	ldr	r3, [r1, #8]
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	b090      	sub	sp, #64	; 0x40
 8004a9c:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8004a9e:	2807      	cmp	r0, #7
 8004aa0:	d804      	bhi.n	8004aac <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8004aa2:	f7ff ffe5 	bl	8004a70 <region_init>

	return index;
 8004aa6:	4620      	mov	r0, r4
}
 8004aa8:	b010      	add	sp, #64	; 0x40
 8004aaa:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8004aac:	2201      	movs	r2, #1
 8004aae:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <region_allocate_and_init+0x60>)
 8004ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab6:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	2103      	movs	r1, #3
 8004abe:	f88d 1004 	strb.w	r1, [sp, #4]
 8004ac2:	9901      	ldr	r1, [sp, #4]
 8004ac4:	910d      	str	r1, [sp, #52]	; 0x34
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f363 0100 	bfi	r1, r3, #0, #1
 8004acc:	f363 0141 	bfi	r1, r3, #1, #1
 8004ad0:	f363 0182 	bfi	r1, r3, #2, #1
 8004ad4:	f363 01c5 	bfi	r1, r3, #3, #3
 8004ad8:	f362 1188 	bfi	r1, r2, #6, #3
 8004adc:	220c      	movs	r2, #12
 8004ade:	f362 2152 	bfi	r1, r2, #9, #10
 8004ae2:	f363 41de 	bfi	r1, r3, #19, #12
 8004ae6:	f363 71df 	bfi	r1, r3, #31, #1
 8004aea:	aa0d      	add	r2, sp, #52	; 0x34
 8004aec:	4803      	ldr	r0, [pc, #12]	; (8004afc <region_allocate_and_init+0x64>)
 8004aee:	f00c fe19 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8004af2:	f06f 0015 	mvn.w	r0, #21
 8004af6:	e7d7      	b.n	8004aa8 <region_allocate_and_init+0x10>
 8004af8:	0801588c 	.word	0x0801588c
 8004afc:	08015050 	.word	0x08015050

08004b00 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b04:	b091      	sub	sp, #68	; 0x44
 8004b06:	4680      	mov	r8, r0
 8004b08:	460f      	mov	r7, r1
 8004b0a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8004b0c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8004b0e:	2500      	movs	r5, #0
 8004b10:	e009      	b.n	8004b26 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004b12:	4621      	mov	r1, r4
 8004b14:	b2f0      	uxtb	r0, r6
 8004b16:	f00c fede 	bl	80118d6 <mpu_configure_region>
 8004b1a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8004b1c:	f110 0f16 	cmn.w	r0, #22
 8004b20:	d037      	beq.n	8004b92 <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004b22:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004b24:	3501      	adds	r5, #1
 8004b26:	42bd      	cmp	r5, r7
 8004b28:	da33      	bge.n	8004b92 <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 8004b2a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8004b2e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	2a00      	cmp	r2, #0
 8004b36:	d0f5      	beq.n	8004b24 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8004b38:	f1b9 0f00 	cmp.w	r9, #0
 8004b3c:	d0e9      	beq.n	8004b12 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f00c feb8 	bl	80118b4 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d1e4      	bne.n	8004b12 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <mpu_configure_regions+0x9c>)
 8004b50:	930e      	str	r3, [sp, #56]	; 0x38
 8004b52:	950f      	str	r5, [sp, #60]	; 0x3c
 8004b54:	2300      	movs	r3, #0
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	2103      	movs	r1, #3
 8004b5a:	f88d 1004 	strb.w	r1, [sp, #4]
 8004b5e:	9901      	ldr	r1, [sp, #4]
 8004b60:	910d      	str	r1, [sp, #52]	; 0x34
 8004b62:	4619      	mov	r1, r3
 8004b64:	f363 0100 	bfi	r1, r3, #0, #1
 8004b68:	f363 0141 	bfi	r1, r3, #1, #1
 8004b6c:	f363 0182 	bfi	r1, r3, #2, #1
 8004b70:	f363 01c5 	bfi	r1, r3, #3, #3
 8004b74:	f362 1188 	bfi	r1, r2, #6, #3
 8004b78:	220c      	movs	r2, #12
 8004b7a:	f362 2152 	bfi	r1, r2, #9, #10
 8004b7e:	f363 41de 	bfi	r1, r3, #19, #12
 8004b82:	f363 71df 	bfi	r1, r3, #31, #1
 8004b86:	aa0d      	add	r2, sp, #52	; 0x34
 8004b88:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <mpu_configure_regions+0xa0>)
 8004b8a:	f00c fdcb 	bl	8011724 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 8004b8e:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8004b92:	4630      	mov	r0, r6
 8004b94:	b011      	add	sp, #68	; 0x44
 8004b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b9a:	bf00      	nop
 8004b9c:	080158b4 	.word	0x080158b4
 8004ba0:	08015050 	.word	0x08015050

08004ba4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8004ba4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8004ba6:	4c03      	ldr	r4, [pc, #12]	; (8004bb4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004ba8:	2301      	movs	r3, #1
 8004baa:	7822      	ldrb	r2, [r4, #0]
 8004bac:	f7ff ffa8 	bl	8004b00 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004bb0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8004bb2:	bd10      	pop	{r4, pc}
 8004bb4:	20001a8f 	.word	0x20001a8f

08004bb8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8004bb8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <mpu_configure_dynamic_mpu_regions+0x2c>)
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	f7ff ff9e 	bl	8004b00 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004bc4:	f110 0f16 	cmn.w	r0, #22
 8004bc8:	d00a      	beq.n	8004be0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004bca:	4603      	mov	r3, r0
 8004bcc:	e006      	b.n	8004bdc <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004bce:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <mpu_configure_dynamic_mpu_regions+0x30>)
 8004bd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004bda:	3301      	adds	r3, #1
 8004bdc:	2b07      	cmp	r3, #7
 8004bde:	ddf6      	ble.n	8004bce <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8004be0:	bd08      	pop	{r3, pc}
 8004be2:	bf00      	nop
 8004be4:	20001a8f 	.word	0x20001a8f
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <arm_core_mpu_enable+0x14>)
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004bf8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004c04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004c08:	4b02      	ldr	r3, [pc, #8]	; (8004c14 <arm_core_mpu_disable+0x10>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8004c18:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <z_arm_mpu_init+0x3c>)
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	2d08      	cmp	r5, #8
 8004c20:	d815      	bhi.n	8004c4e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004c22:	f7ff ffef 	bl	8004c04 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004c26:	2400      	movs	r4, #0
 8004c28:	e009      	b.n	8004c3e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <z_arm_mpu_init+0x3c>)
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004c32:	0093      	lsls	r3, r2, #2
 8004c34:	4419      	add	r1, r3
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff ff1a 	bl	8004a70 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	42a5      	cmp	r5, r4
 8004c40:	d8f3      	bhi.n	8004c2a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <z_arm_mpu_init+0x40>)
 8004c44:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8004c46:	f7ff ffd1 	bl	8004bec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004c4a:	2000      	movs	r0, #0
}
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c52:	e7fb      	b.n	8004c4c <z_arm_mpu_init+0x34>
 8004c54:	080158f0 	.word	0x080158f0
 8004c58:	20001a8f 	.word	0x20001a8f

08004c5c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <__stdout_hook_install+0x8>)
 8004c5e:	6018      	str	r0, [r3, #0]
}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000024 	.word	0x20000024

08004c68 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8004c6e:	2400      	movs	r4, #0
 8004c70:	e000      	b.n	8004c74 <z_impl_zephyr_read_stdin+0xc>
 8004c72:	3401      	adds	r4, #1
 8004c74:	42ac      	cmp	r4, r5
 8004c76:	da08      	bge.n	8004c8a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <z_impl_zephyr_read_stdin+0x28>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4798      	blx	r3
 8004c7e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8004c80:	280a      	cmp	r0, #10
 8004c82:	d001      	beq.n	8004c88 <z_impl_zephyr_read_stdin+0x20>
 8004c84:	280d      	cmp	r0, #13
 8004c86:	d1f4      	bne.n	8004c72 <z_impl_zephyr_read_stdin+0xa>
			i++;
 8004c88:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000020 	.word	0x20000020

08004c94 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	4605      	mov	r5, r0
 8004c98:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8004c9a:	2400      	movs	r4, #0
 8004c9c:	e004      	b.n	8004ca8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <z_impl_zephyr_write_stdout+0x30>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	7830      	ldrb	r0, [r6, #0]
 8004ca4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8004ca6:	3401      	adds	r4, #1
 8004ca8:	42bc      	cmp	r4, r7
 8004caa:	da08      	bge.n	8004cbe <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8004cac:	192e      	adds	r6, r5, r4
 8004cae:	5d2b      	ldrb	r3, [r5, r4]
 8004cb0:	2b0a      	cmp	r3, #10
 8004cb2:	d1f4      	bne.n	8004c9e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <z_impl_zephyr_write_stdout+0x30>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	200d      	movs	r0, #13
 8004cba:	4798      	blx	r3
 8004cbc:	e7ef      	b.n	8004c9e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8004cbe:	4638      	mov	r0, r7
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000024 	.word	0x20000024

08004cc8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8004cc8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8004cca:	2205      	movs	r2, #5
 8004ccc:	4902      	ldr	r1, [pc, #8]	; (8004cd8 <_exit+0x10>)
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f00c fe35 	bl	801193e <_write>
	while (1) {
 8004cd4:	e7fe      	b.n	8004cd4 <_exit+0xc>
 8004cd6:	bf00      	nop
 8004cd8:	080158d8 	.word	0x080158d8

08004cdc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8004cdc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <_sbrk+0x24>)
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <_sbrk+0x28>)
 8004ce4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8004cec:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d202      	bcs.n	8004cfa <_sbrk+0x1e>
		heap_sz += count;
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <_sbrk+0x24>)
 8004cf6:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8004cf8:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8004cfe:	4770      	bx	lr
 8004d00:	2000121c 	.word	0x2000121c
 8004d04:	20005520 	.word	0x20005520

08004d08 <z_impl_sys_rand32_get>:

static const struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
 8004d08:	b500      	push	{lr}
 8004d0a:	b083      	sub	sp, #12
	const struct device *dev = entropy_driver;
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <z_impl_sys_rand32_get+0x38>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
	uint32_t random_num;
	int ret;

	if (unlikely(!dev)) {
 8004d10:	b158      	cbz	r0, 8004d2a <z_impl_sys_rand32_get+0x22>

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
 8004d12:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2204      	movs	r2, #4
 8004d18:	eb0d 0102 	add.w	r1, sp, r2
 8004d1c:	4798      	blx	r3
		entropy_driver = dev;
	}

	ret = entropy_get_entropy(dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	db09      	blt.n	8004d36 <z_impl_sys_rand32_get+0x2e>

		random_num = k_cycle_get_32();
	}

	return random_num;
}
 8004d22:	9801      	ldr	r0, [sp, #4]
 8004d24:	b003      	add	sp, #12
 8004d26:	f85d fb04 	ldr.w	pc, [sp], #4
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8004d2a:	4806      	ldr	r0, [pc, #24]	; (8004d44 <z_impl_sys_rand32_get+0x3c>)
 8004d2c:	f008 fe02 	bl	800d934 <z_impl_device_get_binding>
		entropy_driver = dev;
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <z_impl_sys_rand32_get+0x38>)
 8004d32:	6018      	str	r0, [r3, #0]
 8004d34:	e7ed      	b.n	8004d12 <z_impl_sys_rand32_get+0xa>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8004d36:	f005 f8d5 	bl	8009ee4 <sys_clock_cycle_get_32>
		random_num = k_cycle_get_32();
 8004d3a:	9001      	str	r0, [sp, #4]
 8004d3c:	e7f1      	b.n	8004d22 <z_impl_sys_rand32_get+0x1a>
 8004d3e:	bf00      	nop
 8004d40:	20001220 	.word	0x20001220
 8004d44:	08015910 	.word	0x08015910

08004d48 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8004d4e:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8004d50:	e002      	b.n	8004d58 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004d52:	2201      	movs	r2, #1
 8004d54:	e00c      	b.n	8004d70 <__stm32_exti_isr+0x28>
 8004d56:	3401      	adds	r4, #1
 8004d58:	42ac      	cmp	r4, r5
 8004d5a:	da17      	bge.n	8004d8c <__stm32_exti_isr+0x44>
	if (line < 32) {
 8004d5c:	2c1f      	cmp	r4, #31
 8004d5e:	dcfa      	bgt.n	8004d56 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004d60:	2301      	movs	r3, #1
 8004d62:	40a3      	lsls	r3, r4
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <__stm32_exti_isr+0x48>)
 8004d66:	6952      	ldr	r2, [r2, #20]
 8004d68:	ea33 0202 	bics.w	r2, r3, r2
 8004d6c:	d0f1      	beq.n	8004d52 <__stm32_exti_isr+0xa>
 8004d6e:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8004d70:	2a00      	cmp	r2, #0
 8004d72:	d0f0      	beq.n	8004d56 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004d74:	4a06      	ldr	r2, [pc, #24]	; (8004d90 <__stm32_exti_isr+0x48>)
 8004d76:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8004d78:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ea      	beq.n	8004d56 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004d80:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8004d84:	6851      	ldr	r1, [r2, #4]
 8004d86:	4620      	mov	r0, r4
 8004d88:	4798      	blx	r3
 8004d8a:	e7e4      	b.n	8004d56 <__stm32_exti_isr+0xe>
		}
	}
}
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	bf00      	nop
 8004d90:	40010400 	.word	0x40010400

08004d94 <stm32_exti_enable>:
{
 8004d94:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8004d96:	2301      	movs	r3, #1
 8004d98:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004d9a:	4a04      	ldr	r2, [pc, #16]	; (8004dac <stm32_exti_enable+0x18>)
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004da2:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <stm32_exti_enable+0x1c>)
 8004da4:	5618      	ldrsb	r0, [r3, r0]
 8004da6:	f7fe fee7 	bl	8003b78 <arch_irq_enable>
}
 8004daa:	bd08      	pop	{r3, pc}
 8004dac:	40010400 	.word	0x40010400
 8004db0:	08015934 	.word	0x08015934

08004db4 <stm32_exti_disable>:
	if (line < 32) {
 8004db4:	281f      	cmp	r0, #31
 8004db6:	dc06      	bgt.n	8004dc6 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8004db8:	2301      	movs	r3, #1
 8004dba:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004dbc:	4a02      	ldr	r2, [pc, #8]	; (8004dc8 <stm32_exti_disable+0x14>)
 8004dbe:	6810      	ldr	r0, [r2, #0]
 8004dc0:	ea20 0003 	bic.w	r0, r0, r3
 8004dc4:	6010      	str	r0, [r2, #0]
}
 8004dc6:	4770      	bx	lr
 8004dc8:	40010400 	.word	0x40010400

08004dcc <stm32_exti_trigger>:
	switch (trigger) {
 8004dcc:	2903      	cmp	r1, #3
 8004dce:	d832      	bhi.n	8004e36 <stm32_exti_trigger+0x6a>
 8004dd0:	e8df f001 	tbb	[pc, r1]
 8004dd4:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8004dd8:	2301      	movs	r3, #1
 8004dda:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004dde:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <stm32_exti_trigger+0x6c>)
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	ea22 0200 	bic.w	r2, r2, r0
 8004de6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	ea22 0000 	bic.w	r0, r2, r0
 8004dee:	60d8      	str	r0, [r3, #12]
}
 8004df0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004df2:	2301      	movs	r3, #1
 8004df4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004df8:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <stm32_exti_trigger+0x6c>)
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4302      	orrs	r2, r0
 8004dfe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	ea22 0000 	bic.w	r0, r2, r0
 8004e06:	60d8      	str	r0, [r3, #12]
}
 8004e08:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e10:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <stm32_exti_trigger+0x6c>)
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	4302      	orrs	r2, r0
 8004e16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	ea22 0000 	bic.w	r0, r2, r0
 8004e1e:	6098      	str	r0, [r3, #8]
}
 8004e20:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004e22:	2301      	movs	r3, #1
 8004e24:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <stm32_exti_trigger+0x6c>)
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4302      	orrs	r2, r0
 8004e2e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	4310      	orrs	r0, r2
 8004e34:	60d8      	str	r0, [r3, #12]
}
 8004e36:	4770      	bx	lr
 8004e38:	40010400 	.word	0x40010400

08004e3c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8004e3c:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <stm32_exti_set_callback+0x20>)
 8004e3e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004e42:	b93b      	cbnz	r3, 8004e54 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <stm32_exti_set_callback+0x20>)
 8004e46:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8004e4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004e4e:	6042      	str	r2, [r0, #4]

	return 0;
 8004e50:	2000      	movs	r0, #0
 8004e52:	4770      	bx	lr
		return -EBUSY;
 8004e54:	f06f 000f 	mvn.w	r0, #15
}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20001224 	.word	0x20001224

08004e60 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <stm32_exti_unset_callback+0x10>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8004e68:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004e6c:	605a      	str	r2, [r3, #4]
}
 8004e6e:	4770      	bx	lr
 8004e70:	20001224 	.word	0x20001224

08004e74 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8004e74:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d848      	bhi.n	8004f0e <stm32_clock_control_on+0x9a>
 8004e7c:	e8df f003 	tbb	[pc, r3]
 8004e80:	3c261004 	.word	0x3c261004
 8004e84:	4731      	.short	0x4731
 8004e86:	1b          	.byte	0x1b
 8004e87:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8004e88:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004e8a:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004e8c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004e8e:	4319      	orrs	r1, r3
 8004e90:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004e92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e94:	4013      	ands	r3, r2
 8004e96:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004e98:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004e9a:	2000      	movs	r0, #0
}
 8004e9c:	b006      	add	sp, #24
 8004e9e:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8004ea0:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004ea4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004ea6:	4319      	orrs	r1, r3
 8004ea8:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004eaa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004eac:	4013      	ands	r3, r2
 8004eae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004eb0:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004eb2:	2000      	movs	r0, #0
}
 8004eb4:	e7f2      	b.n	8004e9c <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004eb6:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004eb8:	4a16      	ldr	r2, [pc, #88]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004eba:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004ebc:	4319      	orrs	r1, r3
 8004ebe:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004ec6:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8004ec8:	2000      	movs	r0, #0
}
 8004eca:	e7e7      	b.n	8004e9c <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004ecc:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004ed0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004ed2:	4319      	orrs	r1, r3
 8004ed4:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004ed6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ed8:	4013      	ands	r3, r2
 8004eda:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004edc:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8004ede:	2000      	movs	r0, #0
}
 8004ee0:	e7dc      	b.n	8004e9c <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8004ee2:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004ee6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004ee8:	4319      	orrs	r1, r3
 8004eea:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004eec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004eee:	4013      	ands	r3, r2
 8004ef0:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004ef2:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8004ef4:	2000      	movs	r0, #0
}
 8004ef6:	e7d1      	b.n	8004e9c <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004ef8:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004efa:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <stm32_clock_control_on+0xa0>)
 8004efc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004efe:	4319      	orrs	r1, r3
 8004f00:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004f02:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004f04:	4013      	ands	r3, r2
 8004f06:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004f08:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8004f0a:	2000      	movs	r0, #0
}
 8004f0c:	e7c6      	b.n	8004e9c <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8004f0e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004f12:	e7c3      	b.n	8004e9c <stm32_clock_control_on+0x28>
 8004f14:	40021000 	.word	0x40021000

08004f18 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004f18:	680b      	ldr	r3, [r1, #0]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d835      	bhi.n	8004f8a <stm32_clock_control_off+0x72>
 8004f1e:	e8df f003 	tbb	[pc, r3]
 8004f22:	0c04      	.short	0x0c04
 8004f24:	34242c1c 	.word	0x34242c1c
 8004f28:	14          	.byte	0x14
 8004f29:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8004f2a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f2e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004f30:	ea23 0301 	bic.w	r3, r3, r1
 8004f34:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004f36:	2000      	movs	r0, #0
}
 8004f38:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 8004f3a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f3e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f40:	ea23 0301 	bic.w	r3, r3, r1
 8004f44:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 8004f46:	2000      	movs	r0, #0
}
 8004f48:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 8004f4a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8004f4c:	4a10      	ldr	r2, [pc, #64]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f50:	ea23 0301 	bic.w	r3, r3, r1
 8004f54:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 8004f56:	2000      	movs	r0, #0
}
 8004f58:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8004f5a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f60:	ea23 0301 	bic.w	r3, r3, r1
 8004f64:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8004f66:	2000      	movs	r0, #0
}
 8004f68:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 8004f6a:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f6e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004f70:	ea23 0301 	bic.w	r3, r3, r1
 8004f74:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8004f76:	2000      	movs	r0, #0
}
 8004f78:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8004f7a:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <stm32_clock_control_off+0x78>)
 8004f7e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004f80:	ea23 0301 	bic.w	r3, r3, r1
 8004f84:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8004f86:	2000      	movs	r0, #0
}
 8004f88:	4770      	bx	lr
	switch (pclken->bus) {
 8004f8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000

08004f94 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <stm32_clock_control_get_subsys_rate+0x3c>)
 8004f9c:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f00c fd5a 	bl	8011a5a <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d80e      	bhi.n	8004fca <stm32_clock_control_get_subsys_rate+0x36>
 8004fac:	e8df f003 	tbb	[pc, r3]
 8004fb0:	0a070404 	.word	0x0a070404
 8004fb4:	0d07      	.short	0x0d07
 8004fb6:	04          	.byte	0x04
 8004fb7:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8004fb8:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004fba:	2000      	movs	r0, #0
}
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8004fbe:	6028      	str	r0, [r5, #0]
	return 0;
 8004fc0:	2000      	movs	r0, #0
		break;
 8004fc2:	e7fb      	b.n	8004fbc <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004fc4:	6028      	str	r0, [r5, #0]
	return 0;
 8004fc6:	2000      	movs	r0, #0
		break;
 8004fc8:	e7f8      	b.n	8004fbc <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8004fca:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004fce:	e7f5      	b.n	8004fbc <stm32_clock_control_get_subsys_rate+0x28>
 8004fd0:	200002fc 	.word	0x200002fc

08004fd4 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <stm32_clock_switch_to_hsi+0x44>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004fdc:	d109      	bne.n	8004ff2 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fde:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <stm32_clock_switch_to_hsi+0x44>)
 8004fe0:	6813      	ldr	r3, [r2, #0]
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <stm32_clock_switch_to_hsi+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ff0:	d0fa      	beq.n	8004fe8 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <stm32_clock_switch_to_hsi+0x44>)
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005000:	6893      	ldr	r3, [r2, #8]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005006:	4318      	orrs	r0, r3
 8005008:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <stm32_clock_switch_to_hsi+0x44>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8005012:	2b04      	cmp	r3, #4
 8005014:	d1f9      	bne.n	800500a <stm32_clock_switch_to_hsi+0x36>
	}
}
 8005016:	4770      	bx	lr
 8005018:	40021000 	.word	0x40021000

0800501c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800501c:	b510      	push	{r4, lr}
 800501e:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8005020:	a803      	add	r0, sp, #12
 8005022:	f00c fd15 	bl	8011a50 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8005026:	f000 f823 	bl	8005070 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800502a:	4668      	mov	r0, sp
 800502c:	f00c fd18 	bl	8011a60 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8005030:	2000      	movs	r0, #0
 8005032:	f7ff ffcf 	bl	8004fd4 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005036:	4c0d      	ldr	r4, [pc, #52]	; (800506c <stm32_clock_control_init+0x50>)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503e:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800504a:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 800504c:	a903      	add	r1, sp, #12
 800504e:	4668      	mov	r0, sp
 8005050:	f005 fa36 	bl	800a4c0 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8005064:	2000      	movs	r0, #0
 8005066:	b006      	add	sp, #24
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8005070:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <config_enable_default_clocks+0x1c>)
 8005074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005076:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800507a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005084:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8005086:	b002      	add	sp, #8
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000

08005090 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8005090:	b510      	push	{r4, lr}
 8005092:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8005094:	280a      	cmp	r0, #10
 8005096:	d007      	beq.n	80050a8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <console_out+0x28>)
 800509a:	6818      	ldr	r0, [r3, #0]
 800509c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 800509e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4798      	blx	r3

	return c;
}
 80050a4:	4620      	mov	r0, r4
 80050a6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <console_out+0x28>)
 80050aa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 80050ac:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	210d      	movs	r1, #13
 80050b2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 80050b4:	e7f0      	b.n	8005098 <console_out+0x8>
 80050b6:	bf00      	nop
 80050b8:	200012a4 	.word	0x200012a4

080050bc <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 80050bc:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 80050be:	4c04      	ldr	r4, [pc, #16]	; (80050d0 <uart_console_hook_install+0x14>)
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff fdcb 	bl	8004c5c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 80050c6:	4620      	mov	r0, r4
 80050c8:	f7fd fa84 	bl	80025d4 <__printk_hook_install>
#endif
}
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	bf00      	nop
 80050d0:	08005091 	.word	0x08005091

080050d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80050d4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80050d6:	4806      	ldr	r0, [pc, #24]	; (80050f0 <uart_console_init+0x1c>)
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <uart_console_init+0x20>)
 80050da:	6018      	str	r0, [r3, #0]
 80050dc:	f00e fc9e 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 80050e0:	b118      	cbz	r0, 80050ea <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 80050e2:	f7ff ffeb 	bl	80050bc <uart_console_hook_install>

	return 0;
 80050e6:	2000      	movs	r0, #0
}
 80050e8:	bd08      	pop	{r3, pc}
		return -ENODEV;
 80050ea:	f06f 0012 	mvn.w	r0, #18
 80050ee:	e7fb      	b.n	80050e8 <uart_console_init+0x14>
 80050f0:	08014cbc 	.word	0x08014cbc
 80050f4:	200012a4 	.word	0x200012a4

080050f8 <dma_stm32_get_priority>:

#endif /* CONFIG_DMA_STM32_SHARED_IRQS */

static int dma_stm32_get_priority(uint8_t priority, uint32_t *ll_priority)
{
	switch (priority) {
 80050f8:	2803      	cmp	r0, #3
 80050fa:	d815      	bhi.n	8005128 <dma_stm32_get_priority+0x30>
 80050fc:	e8df f000 	tbb	[pc, r0]
 8005100:	0f0a0502 	.word	0x0f0a0502
	case 0x0:
		*ll_priority = LL_DMA_PRIORITY_LOW;
 8005104:	2000      	movs	r0, #0
 8005106:	6008      	str	r0, [r1, #0]
		break;
 8005108:	4770      	bx	lr
	case 0x1:
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 800510a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510e:	600b      	str	r3, [r1, #0]
	default:
		LOG_ERR("Priority error. %d", priority);
		return -EINVAL;
	}

	return 0;
 8005110:	2000      	movs	r0, #0
		break;
 8005112:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8005114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005118:	600b      	str	r3, [r1, #0]
	return 0;
 800511a:	2000      	movs	r0, #0
		break;
 800511c:	4770      	bx	lr
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 800511e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005122:	600b      	str	r3, [r1, #0]
	return 0;
 8005124:	2000      	movs	r0, #0
}
 8005126:	4770      	bx	lr
{
 8005128:	b500      	push	{lr}
 800512a:	b091      	sub	sp, #68	; 0x44
		LOG_ERR("Priority error. %d", priority);
 800512c:	2201      	movs	r2, #1
 800512e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <dma_stm32_get_priority+0x84>)
 8005134:	930e      	str	r3, [sp, #56]	; 0x38
 8005136:	900f      	str	r0, [sp, #60]	; 0x3c
 8005138:	2300      	movs	r3, #0
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2103      	movs	r1, #3
 800513e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005142:	9901      	ldr	r1, [sp, #4]
 8005144:	910d      	str	r1, [sp, #52]	; 0x34
 8005146:	4619      	mov	r1, r3
 8005148:	f363 0100 	bfi	r1, r3, #0, #1
 800514c:	f363 0141 	bfi	r1, r3, #1, #1
 8005150:	f363 0182 	bfi	r1, r3, #2, #1
 8005154:	f363 01c5 	bfi	r1, r3, #3, #3
 8005158:	f362 1188 	bfi	r1, r2, #6, #3
 800515c:	220c      	movs	r2, #12
 800515e:	f362 2152 	bfi	r1, r2, #9, #10
 8005162:	f363 41de 	bfi	r1, r3, #19, #12
 8005166:	f363 71df 	bfi	r1, r3, #31, #1
 800516a:	aa0d      	add	r2, sp, #52	; 0x34
 800516c:	4804      	ldr	r0, [pc, #16]	; (8005180 <dma_stm32_get_priority+0x88>)
 800516e:	f00c fad9 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005172:	f06f 0015 	mvn.w	r0, #21
}
 8005176:	b011      	add	sp, #68	; 0x44
 8005178:	f85d fb04 	ldr.w	pc, [sp], #4
 800517c:	08015954 	.word	0x08015954
 8005180:	08015020 	.word	0x08015020

08005184 <dma_stm32_get_direction>:

static int dma_stm32_get_direction(enum dma_channel_direction direction,
				   uint32_t *ll_direction)
{
	switch (direction) {
 8005184:	2801      	cmp	r0, #1
 8005186:	d030      	beq.n	80051ea <dma_stm32_get_direction+0x66>
 8005188:	2802      	cmp	r0, #2
 800518a:	d032      	beq.n	80051f2 <dma_stm32_get_direction+0x6e>
 800518c:	b348      	cbz	r0, 80051e2 <dma_stm32_get_direction+0x5e>
{
 800518e:	b500      	push	{lr}
 8005190:	b091      	sub	sp, #68	; 0x44
		break;
	case PERIPHERAL_TO_MEMORY:
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
		break;
	default:
		LOG_ERR("Direction error. %d", direction);
 8005192:	2201      	movs	r2, #1
 8005194:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005198:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <dma_stm32_get_direction+0x74>)
 800519a:	930e      	str	r3, [sp, #56]	; 0x38
 800519c:	900f      	str	r0, [sp, #60]	; 0x3c
 800519e:	2300      	movs	r3, #0
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	2103      	movs	r1, #3
 80051a4:	f88d 1004 	strb.w	r1, [sp, #4]
 80051a8:	9901      	ldr	r1, [sp, #4]
 80051aa:	910d      	str	r1, [sp, #52]	; 0x34
 80051ac:	4619      	mov	r1, r3
 80051ae:	f363 0100 	bfi	r1, r3, #0, #1
 80051b2:	f363 0141 	bfi	r1, r3, #1, #1
 80051b6:	f363 0182 	bfi	r1, r3, #2, #1
 80051ba:	f363 01c5 	bfi	r1, r3, #3, #3
 80051be:	f362 1188 	bfi	r1, r2, #6, #3
 80051c2:	220c      	movs	r2, #12
 80051c4:	f362 2152 	bfi	r1, r2, #9, #10
 80051c8:	f363 41de 	bfi	r1, r3, #19, #12
 80051cc:	f363 71df 	bfi	r1, r3, #31, #1
 80051d0:	aa0d      	add	r2, sp, #52	; 0x34
 80051d2:	480a      	ldr	r0, [pc, #40]	; (80051fc <dma_stm32_get_direction+0x78>)
 80051d4:	f00c faa6 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80051d8:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 80051dc:	b011      	add	sp, #68	; 0x44
 80051de:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 80051e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051e6:	600b      	str	r3, [r1, #0]
		break;
 80051e8:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80051ea:	2310      	movs	r3, #16
 80051ec:	600b      	str	r3, [r1, #0]
	return 0;
 80051ee:	2000      	movs	r0, #0
		break;
 80051f0:	4770      	bx	lr
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80051f2:	2000      	movs	r0, #0
 80051f4:	6008      	str	r0, [r1, #0]
}
 80051f6:	4770      	bx	lr
 80051f8:	08015968 	.word	0x08015968
 80051fc:	08015020 	.word	0x08015020

08005200 <dma_stm32_get_memory_increment>:

static int dma_stm32_get_memory_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005200:	2801      	cmp	r0, #1
 8005202:	d032      	beq.n	800526a <dma_stm32_get_memory_increment+0x6a>
 8005204:	2802      	cmp	r0, #2
 8005206:	d02d      	beq.n	8005264 <dma_stm32_get_memory_increment+0x64>
 8005208:	b348      	cbz	r0, 800525e <dma_stm32_get_memory_increment+0x5e>
{
 800520a:	b500      	push	{lr}
 800520c:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Memory increment error. %d", increment);
 800520e:	2201      	movs	r2, #1
 8005210:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <dma_stm32_get_memory_increment+0x70>)
 8005216:	930e      	str	r3, [sp, #56]	; 0x38
 8005218:	900f      	str	r0, [sp, #60]	; 0x3c
 800521a:	2300      	movs	r3, #0
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	2103      	movs	r1, #3
 8005220:	f88d 1004 	strb.w	r1, [sp, #4]
 8005224:	9901      	ldr	r1, [sp, #4]
 8005226:	910d      	str	r1, [sp, #52]	; 0x34
 8005228:	4619      	mov	r1, r3
 800522a:	f363 0100 	bfi	r1, r3, #0, #1
 800522e:	f363 0141 	bfi	r1, r3, #1, #1
 8005232:	f363 0182 	bfi	r1, r3, #2, #1
 8005236:	f363 01c5 	bfi	r1, r3, #3, #3
 800523a:	f362 1188 	bfi	r1, r2, #6, #3
 800523e:	220c      	movs	r2, #12
 8005240:	f362 2152 	bfi	r1, r2, #9, #10
 8005244:	f363 41de 	bfi	r1, r3, #19, #12
 8005248:	f363 71df 	bfi	r1, r3, #31, #1
 800524c:	aa0d      	add	r2, sp, #52	; 0x34
 800524e:	4809      	ldr	r0, [pc, #36]	; (8005274 <dma_stm32_get_memory_increment+0x74>)
 8005250:	f00c fa68 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005254:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 8005258:	b011      	add	sp, #68	; 0x44
 800525a:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	600b      	str	r3, [r1, #0]
		break;
 8005262:	4770      	bx	lr
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 8005264:	2000      	movs	r0, #0
 8005266:	6008      	str	r0, [r1, #0]
		break;
 8005268:	4770      	bx	lr
	switch (increment) {
 800526a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800526e:	4770      	bx	lr
 8005270:	0801597c 	.word	0x0801597c
 8005274:	08015020 	.word	0x08015020

08005278 <dma_stm32_get_periph_increment>:

static int dma_stm32_get_periph_increment(enum dma_addr_adj increment,
					  uint32_t *ll_increment)
{
	switch (increment) {
 8005278:	2801      	cmp	r0, #1
 800527a:	d032      	beq.n	80052e2 <dma_stm32_get_periph_increment+0x6a>
 800527c:	2802      	cmp	r0, #2
 800527e:	d02d      	beq.n	80052dc <dma_stm32_get_periph_increment+0x64>
 8005280:	b348      	cbz	r0, 80052d6 <dma_stm32_get_periph_increment+0x5e>
{
 8005282:	b500      	push	{lr}
 8005284:	b091      	sub	sp, #68	; 0x44
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
		break;
	case DMA_ADDR_ADJ_DECREMENT:
		return -ENOTSUP;
	default:
		LOG_ERR("Periph increment error. %d", increment);
 8005286:	2201      	movs	r2, #1
 8005288:	f8ad 2008 	strh.w	r2, [sp, #8]
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <dma_stm32_get_periph_increment+0x70>)
 800528e:	930e      	str	r3, [sp, #56]	; 0x38
 8005290:	900f      	str	r0, [sp, #60]	; 0x3c
 8005292:	2300      	movs	r3, #0
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	2103      	movs	r1, #3
 8005298:	f88d 1004 	strb.w	r1, [sp, #4]
 800529c:	9901      	ldr	r1, [sp, #4]
 800529e:	910d      	str	r1, [sp, #52]	; 0x34
 80052a0:	4619      	mov	r1, r3
 80052a2:	f363 0100 	bfi	r1, r3, #0, #1
 80052a6:	f363 0141 	bfi	r1, r3, #1, #1
 80052aa:	f363 0182 	bfi	r1, r3, #2, #1
 80052ae:	f363 01c5 	bfi	r1, r3, #3, #3
 80052b2:	f362 1188 	bfi	r1, r2, #6, #3
 80052b6:	220c      	movs	r2, #12
 80052b8:	f362 2152 	bfi	r1, r2, #9, #10
 80052bc:	f363 41de 	bfi	r1, r3, #19, #12
 80052c0:	f363 71df 	bfi	r1, r3, #31, #1
 80052c4:	aa0d      	add	r2, sp, #52	; 0x34
 80052c6:	4809      	ldr	r0, [pc, #36]	; (80052ec <dma_stm32_get_periph_increment+0x74>)
 80052c8:	f00c fa2c 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80052cc:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
 80052d0:	b011      	add	sp, #68	; 0x44
 80052d2:	f85d fb04 	ldr.w	pc, [sp], #4
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	600b      	str	r3, [r1, #0]
		break;
 80052da:	4770      	bx	lr
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 80052dc:	2000      	movs	r0, #0
 80052de:	6008      	str	r0, [r1, #0]
		break;
 80052e0:	4770      	bx	lr
	switch (increment) {
 80052e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80052e6:	4770      	bx	lr
 80052e8:	08015998 	.word	0x08015998
 80052ec:	08015020 	.word	0x08015020

080052f0 <dma_stm32_irq_handler>:
{
 80052f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	b096      	sub	sp, #88	; 0x58
 80052f6:	4606      	mov	r6, r0
 80052f8:	460d      	mov	r5, r1
	const struct dma_stm32_config *config = dev->config;
 80052fa:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80052fc:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 80052fe:	699c      	ldr	r4, [r3, #24]
 8005300:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005304:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	callback_arg = id + STREAM_OFFSET;
 8005308:	f101 0801 	add.w	r8, r1, #1
		stream->busy = false;
 800530c:	2300      	movs	r3, #0
 800530e:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8005310:	4638      	mov	r0, r7
 8005312:	f000 fd61 	bl	8005dd8 <stm32_dma_is_ht_irq_active>
 8005316:	b178      	cbz	r0, 8005338 <dma_stm32_irq_handler+0x48>
		if (!stream->hal_override) {
 8005318:	7963      	ldrb	r3, [r4, #5]
 800531a:	b143      	cbz	r3, 800532e <dma_stm32_irq_handler+0x3e>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 800531c:	6965      	ldr	r5, [r4, #20]
 800531e:	2300      	movs	r3, #0
 8005320:	4642      	mov	r2, r8
 8005322:	6921      	ldr	r1, [r4, #16]
 8005324:	4630      	mov	r0, r6
 8005326:	47a8      	blx	r5
}
 8005328:	b016      	add	sp, #88	; 0x58
 800532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dma_stm32_clear_ht(dma, id);
 800532e:	4629      	mov	r1, r5
 8005330:	4638      	mov	r0, r7
 8005332:	f000 fc59 	bl	8005be8 <dma_stm32_clear_ht>
 8005336:	e7f1      	b.n	800531c <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 8005338:	4629      	mov	r1, r5
 800533a:	4638      	mov	r0, r7
 800533c:	f000 fd32 	bl	8005da4 <stm32_dma_is_tc_irq_active>
 8005340:	b168      	cbz	r0, 800535e <dma_stm32_irq_handler+0x6e>
		if (!stream->hal_override) {
 8005342:	7963      	ldrb	r3, [r4, #5]
 8005344:	b133      	cbz	r3, 8005354 <dma_stm32_irq_handler+0x64>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8005346:	6965      	ldr	r5, [r4, #20]
 8005348:	2300      	movs	r3, #0
 800534a:	4642      	mov	r2, r8
 800534c:	6921      	ldr	r1, [r4, #16]
 800534e:	4630      	mov	r0, r6
 8005350:	47a8      	blx	r5
 8005352:	e7e9      	b.n	8005328 <dma_stm32_irq_handler+0x38>
			dma_stm32_clear_tc(dma, id);
 8005354:	4629      	mov	r1, r5
 8005356:	4638      	mov	r0, r7
 8005358:	f000 fc4e 	bl	8005bf8 <dma_stm32_clear_tc>
 800535c:	e7f3      	b.n	8005346 <dma_stm32_irq_handler+0x56>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 800535e:	4629      	mov	r1, r5
 8005360:	4638      	mov	r0, r7
 8005362:	f00c fd7b 	bl	8011e5c <stm32_dma_is_unexpected_irq_happened>
 8005366:	b348      	cbz	r0, 80053bc <dma_stm32_irq_handler+0xcc>
		LOG_ERR("Unexpected irq happened.");
 8005368:	2201      	movs	r2, #1
 800536a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800536e:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <dma_stm32_irq_handler+0x130>)
 8005370:	9314      	str	r3, [sp, #80]	; 0x50
 8005372:	2300      	movs	r3, #0
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	2102      	movs	r1, #2
 8005378:	f88d 1004 	strb.w	r1, [sp, #4]
 800537c:	9901      	ldr	r1, [sp, #4]
 800537e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005380:	4619      	mov	r1, r3
 8005382:	f363 0100 	bfi	r1, r3, #0, #1
 8005386:	f363 0141 	bfi	r1, r3, #1, #1
 800538a:	f363 0182 	bfi	r1, r3, #2, #1
 800538e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005392:	f362 1188 	bfi	r1, r2, #6, #3
 8005396:	2208      	movs	r2, #8
 8005398:	f362 2152 	bfi	r1, r2, #9, #10
 800539c:	f363 41de 	bfi	r1, r3, #19, #12
 80053a0:	f363 71df 	bfi	r1, r3, #31, #1
 80053a4:	aa13      	add	r2, sp, #76	; 0x4c
 80053a6:	481f      	ldr	r0, [pc, #124]	; (8005424 <dma_stm32_irq_handler+0x134>)
 80053a8:	f00c f9bc 	bl	8011724 <z_impl_z_log_msg2_static_create>
		stream->dma_callback(dev, stream->user_data,
 80053ac:	6965      	ldr	r5, [r4, #20]
 80053ae:	f06f 0304 	mvn.w	r3, #4
 80053b2:	4642      	mov	r2, r8
 80053b4:	6921      	ldr	r1, [r4, #16]
 80053b6:	4630      	mov	r0, r6
 80053b8:	47a8      	blx	r5
 80053ba:	e7b5      	b.n	8005328 <dma_stm32_irq_handler+0x38>
		LOG_ERR("Transfer Error.");
 80053bc:	2201      	movs	r2, #1
 80053be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <dma_stm32_irq_handler+0x138>)
 80053c4:	930e      	str	r3, [sp, #56]	; 0x38
 80053c6:	2300      	movs	r3, #0
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	2102      	movs	r1, #2
 80053cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80053d0:	9901      	ldr	r1, [sp, #4]
 80053d2:	910d      	str	r1, [sp, #52]	; 0x34
 80053d4:	4619      	mov	r1, r3
 80053d6:	f363 0100 	bfi	r1, r3, #0, #1
 80053da:	f363 0141 	bfi	r1, r3, #1, #1
 80053de:	f363 0182 	bfi	r1, r3, #2, #1
 80053e2:	f363 01c5 	bfi	r1, r3, #3, #3
 80053e6:	f362 1188 	bfi	r1, r2, #6, #3
 80053ea:	2208      	movs	r2, #8
 80053ec:	f362 2152 	bfi	r1, r2, #9, #10
 80053f0:	f363 41de 	bfi	r1, r3, #19, #12
 80053f4:	f363 71df 	bfi	r1, r3, #31, #1
 80053f8:	aa0d      	add	r2, sp, #52	; 0x34
 80053fa:	480a      	ldr	r0, [pc, #40]	; (8005424 <dma_stm32_irq_handler+0x134>)
 80053fc:	f00c f992 	bl	8011724 <z_impl_z_log_msg2_static_create>
		dma_stm32_dump_stream_irq(dev, id);
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f00c fba8 	bl	8011b58 <dma_stm32_dump_stream_irq>
		dma_stm32_clear_stream_irq(dev, id);
 8005408:	4629      	mov	r1, r5
 800540a:	4630      	mov	r0, r6
 800540c:	f00c fbaa 	bl	8011b64 <dma_stm32_clear_stream_irq>
		stream->dma_callback(dev, stream->user_data,
 8005410:	6965      	ldr	r5, [r4, #20]
 8005412:	f06f 0304 	mvn.w	r3, #4
 8005416:	4642      	mov	r2, r8
 8005418:	6921      	ldr	r1, [r4, #16]
 800541a:	4630      	mov	r0, r6
 800541c:	47a8      	blx	r5
}
 800541e:	e783      	b.n	8005328 <dma_stm32_irq_handler+0x38>
 8005420:	080159b4 	.word	0x080159b4
 8005424:	08015020 	.word	0x08015020
 8005428:	080159d0 	.word	0x080159d0

0800542c <dma_stm32_get_status>:
	return 0;
}

DMA_STM32_EXPORT_API int dma_stm32_get_status(const struct device *dev,
				uint32_t id, struct dma_status *stat)
{
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	4614      	mov	r4, r2
	const struct dma_stm32_config *config = dev->config;
 8005432:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005434:	691e      	ldr	r6, [r3, #16]
	struct dma_stm32_stream *stream;

	/* give channel from index 0 */
	id = id - STREAM_OFFSET;
 8005436:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	4282      	cmp	r2, r0
 800543c:	d916      	bls.n	800546c <dma_stm32_get_status+0x40>
		return -EINVAL;
	}

	stream = &config->streams[id];
 800543e:	699f      	ldr	r7, [r3, #24]
 8005440:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005444:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8005448:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 800544c:	f000 fbc6 	bl	8005bdc <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <dma_stm32_get_status+0x48>)
 8005452:	5c1b      	ldrb	r3, [r3, r0]
 8005454:	441e      	add	r6, r3
 8005456:	6873      	ldr	r3, [r6, #4]
 8005458:	b29b      	uxth	r3, r3
 800545a:	6063      	str	r3, [r4, #4]
	stat->dir = stream->direction;
 800545c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8005460:	7063      	strb	r3, [r4, #1]
	stat->busy = stream->busy;
 8005462:	79ab      	ldrb	r3, [r5, #6]
 8005464:	7023      	strb	r3, [r4, #0]

	return 0;
 8005466:	2000      	movs	r0, #0
}
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 800546c:	f06f 0015 	mvn.w	r0, #21
 8005470:	e7fa      	b.n	8005468 <dma_stm32_get_status+0x3c>
 8005472:	bf00      	nop
 8005474:	08015b68 	.word	0x08015b68

08005478 <dma_stm32_stop>:
{
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct dma_stm32_config *config = dev->config;
 800547a:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 800547c:	6996      	ldr	r6, [r2, #24]
 800547e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	3b18      	subs	r3, #24
 8005486:	441e      	add	r6, r3
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8005488:	6917      	ldr	r7, [r2, #16]
	id = id - STREAM_OFFSET;
 800548a:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 800548c:	6953      	ldr	r3, [r2, #20]
 800548e:	42a3      	cmp	r3, r4
 8005490:	d914      	bls.n	80054bc <dma_stm32_stop+0x44>
 8005492:	4605      	mov	r5, r0
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8005494:	4620      	mov	r0, r4
 8005496:	f000 fba1 	bl	8005bdc <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <dma_stm32_stop+0x4c>)
 800549c:	5c1a      	ldrb	r2, [r3, r0]
 800549e:	58bb      	ldr	r3, [r7, r2]
 80054a0:	f023 0302 	bic.w	r3, r3, #2
 80054a4:	50bb      	str	r3, [r7, r2]
	dma_stm32_disable_stream(dma, id);
 80054a6:	4621      	mov	r1, r4
 80054a8:	4638      	mov	r0, r7
 80054aa:	f00c fbb1 	bl	8011c10 <dma_stm32_disable_stream>
	dma_stm32_clear_stream_irq(dev, id);
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f00c fb57 	bl	8011b64 <dma_stm32_clear_stream_irq>
	stream->busy = false;
 80054b6:	2000      	movs	r0, #0
 80054b8:	71b0      	strb	r0, [r6, #6]
}
 80054ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
 80054bc:	f06f 0015 	mvn.w	r0, #21
 80054c0:	e7fb      	b.n	80054ba <dma_stm32_stop+0x42>
 80054c2:	bf00      	nop
 80054c4:	08015b68 	.word	0x08015b68

080054c8 <dma_stm32_reload>:
{
 80054c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	461f      	mov	r7, r3
	const struct dma_stm32_config *config = dev->config;
 80054ce:	6840      	ldr	r0, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80054d0:	6906      	ldr	r6, [r0, #16]
	id = id - STREAM_OFFSET;
 80054d2:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 80054d4:	6943      	ldr	r3, [r0, #20]
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	d964      	bls.n	80055a4 <dma_stm32_reload+0xdc>
 80054da:	4690      	mov	r8, r2
	stream = &config->streams[id];
 80054dc:	f8d0 a018 	ldr.w	sl, [r0, #24]
 80054e0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80054e4:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 80054e8:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
	if (dma_stm32_disable_stream(dma, id) != 0) {
 80054ec:	4621      	mov	r1, r4
 80054ee:	4630      	mov	r0, r6
 80054f0:	f00c fb8e 	bl	8011c10 <dma_stm32_disable_stream>
 80054f4:	4681      	mov	r9, r0
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d157      	bne.n	80055aa <dma_stm32_reload+0xe2>
	switch (stream->direction) {
 80054fa:	f85a 100b 	ldr.w	r1, [sl, fp]
 80054fe:	2901      	cmp	r1, #1
 8005500:	d007      	beq.n	8005512 <dma_stm32_reload+0x4a>
 8005502:	2902      	cmp	r1, #2
 8005504:	d02c      	beq.n	8005560 <dma_stm32_reload+0x98>
 8005506:	b359      	cbz	r1, 8005560 <dma_stm32_reload+0x98>
 8005508:	f06f 0915 	mvn.w	r9, #21
}
 800550c:	4648      	mov	r0, r9
 800550e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fb62 	bl	8005bdc <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8005518:	f8df a094 	ldr.w	sl, [pc, #148]	; 80055b0 <dma_stm32_reload+0xe8>
 800551c:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8005520:	4433      	add	r3, r6
 8005522:	f8c3 800c 	str.w	r8, [r3, #12]
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fb58 	bl	8005bdc <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800552c:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8005530:	4433      	add	r3, r6
 8005532:	609f      	str	r7, [r3, #8]
	if (stream->source_periph) {
 8005534:	792b      	ldrb	r3, [r5, #4]
 8005536:	b32b      	cbz	r3, 8005584 <dma_stm32_reload+0xbc>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fb4f 	bl	8005bdc <dma_stm32_id_to_stream>
				     size / stream->src_size);
 800553e:	68ab      	ldr	r3, [r5, #8]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005546:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <dma_stm32_reload+0xe8>)
 8005548:	5c11      	ldrb	r1, [r2, r0]
 800554a:	4431      	add	r1, r6
 800554c:	684a      	ldr	r2, [r1, #4]
 800554e:	0c12      	lsrs	r2, r2, #16
 8005550:	0412      	lsls	r2, r2, #16
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
	stm32_dma_enable_stream(dma, id);
 8005556:	4621      	mov	r1, r4
 8005558:	4630      	mov	r0, r6
 800555a:	f000 fc57 	bl	8005e0c <stm32_dma_enable_stream>
	return 0;
 800555e:	e7d5      	b.n	800550c <dma_stm32_reload+0x44>
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fb3b 	bl	8005bdc <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8005566:	f8df a048 	ldr.w	sl, [pc, #72]	; 80055b0 <dma_stm32_reload+0xe8>
 800556a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 800556e:	4433      	add	r3, r6
 8005570:	f8c3 8008 	str.w	r8, [r3, #8]
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fb31 	bl	8005bdc <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800557a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 800557e:	4433      	add	r3, r6
 8005580:	60df      	str	r7, [r3, #12]
}
 8005582:	e7d7      	b.n	8005534 <dma_stm32_reload+0x6c>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8005584:	4620      	mov	r0, r4
 8005586:	f000 fb29 	bl	8005bdc <dma_stm32_id_to_stream>
				     size / stream->dst_size);
 800558a:	68eb      	ldr	r3, [r5, #12]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 800558c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8005592:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <dma_stm32_reload+0xe8>)
 8005594:	5c11      	ldrb	r1, [r2, r0]
 8005596:	4431      	add	r1, r6
 8005598:	684a      	ldr	r2, [r1, #4]
 800559a:	0c12      	lsrs	r2, r2, #16
 800559c:	0412      	lsls	r2, r2, #16
 800559e:	4313      	orrs	r3, r2
 80055a0:	604b      	str	r3, [r1, #4]
}
 80055a2:	e7d8      	b.n	8005556 <dma_stm32_reload+0x8e>
		return -EINVAL;
 80055a4:	f06f 0915 	mvn.w	r9, #21
 80055a8:	e7b0      	b.n	800550c <dma_stm32_reload+0x44>
		return -EBUSY;
 80055aa:	f06f 090f 	mvn.w	r9, #15
 80055ae:	e7ad      	b.n	800550c <dma_stm32_reload+0x44>
 80055b0:	08015b68 	.word	0x08015b68

080055b4 <dma_stm32_configure>:
{
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	b0d1      	sub	sp, #324	; 0x144
 80055ba:	4607      	mov	r7, r0
 80055bc:	460d      	mov	r5, r1
 80055be:	4614      	mov	r4, r2
	const struct dma_stm32_config *dev_config = dev->config;
 80055c0:	f8d0 b004 	ldr.w	fp, [r0, #4]
				&dev_config->streams[id - STREAM_OFFSET];
 80055c4:	f8db 9018 	ldr.w	r9, [fp, #24]
 80055c8:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80055cc:	00f6      	lsls	r6, r6, #3
 80055ce:	3e18      	subs	r6, #24
	struct dma_stm32_stream *stream =
 80055d0:	eb09 0806 	add.w	r8, r9, r6
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 80055d4:	f8db a010 	ldr.w	sl, [fp, #16]
	LL_DMA_StructInit(&DMA_InitStruct);
 80055d8:	a809      	add	r0, sp, #36	; 0x24
 80055da:	f00d fc95 	bl	8012f08 <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 80055de:	8863      	ldrh	r3, [r4, #2]
 80055e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055e4:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
 80055e8:	f000 809c 	beq.w	8005724 <dma_stm32_configure+0x170>
 80055ec:	3d01      	subs	r5, #1
	if (id >= dev_config->max_streams) {
 80055ee:	f8db 3014 	ldr.w	r3, [fp, #20]
 80055f2:	42ab      	cmp	r3, r5
 80055f4:	f240 80a6 	bls.w	8005744 <dma_stm32_configure+0x190>
	if (stream->busy) {
 80055f8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 80c7 	bne.w	8005790 <dma_stm32_configure+0x1dc>
	if (dma_stm32_disable_stream(dma, id) != 0) {
 8005602:	4629      	mov	r1, r5
 8005604:	4650      	mov	r0, sl
 8005606:	f00c fb03 	bl	8011c10 <dma_stm32_disable_stream>
 800560a:	2800      	cmp	r0, #0
 800560c:	f040 80e6 	bne.w	80057dc <dma_stm32_configure+0x228>
	dma_stm32_clear_stream_irq(dev, id);
 8005610:	4629      	mov	r1, r5
 8005612:	4638      	mov	r0, r7
 8005614:	f00c faa6 	bl	8011b64 <dma_stm32_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	6953      	ldr	r3, [r2, #20]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	f080 8102 	bcs.w	8005828 <dma_stm32_configure+0x274>
	if ((config->dest_data_size != config->source_data_size)) {
 8005624:	88e1      	ldrh	r1, [r4, #6]
 8005626:	88a3      	ldrh	r3, [r4, #4]
 8005628:	4299      	cmp	r1, r3
 800562a:	f040 8125 	bne.w	8005878 <dma_stm32_configure+0x2c4>
	if (config->source_data_size != 4U &&
 800562e:	2b04      	cmp	r3, #4
 8005630:	d004      	beq.n	800563c <dma_stm32_configure+0x88>
 8005632:	2b02      	cmp	r3, #2
 8005634:	d002      	beq.n	800563c <dma_stm32_configure+0x88>
	    config->source_data_size != 2U &&
 8005636:	2b01      	cmp	r3, #1
 8005638:	f040 8143 	bne.w	80058c2 <dma_stm32_configure+0x30e>
	if (config->head_block->source_reload_en !=
 800563c:	7f13      	ldrb	r3, [r2, #28]
 800563e:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8005642:	ebb2 1fd3 	cmp.w	r2, r3, lsr #7
 8005646:	f040 8163 	bne.w	8005910 <dma_stm32_configure+0x35c>
	stream->busy		= true;
 800564a:	2301      	movs	r3, #1
 800564c:	f888 3006 	strb.w	r3, [r8, #6]
	stream->dma_callback	= config->dma_callback;
 8005650:	69a3      	ldr	r3, [r4, #24]
 8005652:	f8c8 3014 	str.w	r3, [r8, #20]
	stream->direction	= config->channel_direction;
 8005656:	8823      	ldrh	r3, [r4, #0]
 8005658:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800565c:	f849 3006 	str.w	r3, [r9, r6]
	stream->user_data       = config->user_data;
 8005660:	6963      	ldr	r3, [r4, #20]
 8005662:	f8c8 3010 	str.w	r3, [r8, #16]
	stream->src_size	= config->source_data_size;
 8005666:	88a3      	ldrh	r3, [r4, #4]
 8005668:	f8c8 3008 	str.w	r3, [r8, #8]
	stream->dst_size	= config->dest_data_size;
 800566c:	88e3      	ldrh	r3, [r4, #6]
 800566e:	f8c8 300c 	str.w	r3, [r8, #12]
	if ((config->head_block->source_address == 0)) {
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 816f 	beq.w	800595a <dma_stm32_configure+0x3a6>
	if ((config->head_block->dest_address == 0)) {
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 818d 	beq.w	80059a0 <dma_stm32_configure+0x3ec>
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 8005686:	f859 3006 	ldr.w	r3, [r9, r6]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f000 81ab 	beq.w	80059e6 <dma_stm32_configure+0x432>
					config->head_block->source_address;
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8005694:	9209      	str	r2, [sp, #36]	; 0x24
					config->head_block->dest_address;
 8005696:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8005698:	930a      	str	r3, [sp, #40]	; 0x28
	ret = dma_stm32_get_priority(config->channel_priority,
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	a913      	add	r1, sp, #76	; 0x4c
 800569e:	f3c0 3083 	ubfx	r0, r0, #14, #4
 80056a2:	f7ff fd29 	bl	80050f8 <dma_stm32_get_priority>
	if (ret < 0) {
 80056a6:	1e07      	subs	r7, r0, #0
 80056a8:	db48      	blt.n	800573c <dma_stm32_configure+0x188>
	ret = dma_stm32_get_direction(config->channel_direction,
 80056aa:	8820      	ldrh	r0, [r4, #0]
 80056ac:	a90b      	add	r1, sp, #44	; 0x2c
 80056ae:	f3c0 10c2 	ubfx	r0, r0, #7, #3
 80056b2:	f7ff fd67 	bl	8005184 <dma_stm32_get_direction>
	if (ret < 0) {
 80056b6:	1e07      	subs	r7, r0, #0
 80056b8:	db40      	blt.n	800573c <dma_stm32_configure+0x188>
	switch (config->channel_direction) {
 80056ba:	8823      	ldrh	r3, [r4, #0]
 80056bc:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f000 821b 	beq.w	8005afc <dma_stm32_configure+0x548>
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f000 81aa 	beq.w	8005a20 <dma_stm32_configure+0x46c>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 81a7 	beq.w	8005a20 <dma_stm32_configure+0x46c>
		LOG_ERR("Channel direction error (%d).",
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80056d8:	4bc6      	ldr	r3, [pc, #792]	; (80059f4 <dma_stm32_configure+0x440>)
 80056da:	932a      	str	r3, [sp, #168]	; 0xa8
 80056dc:	8823      	ldrh	r3, [r4, #0]
 80056de:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80056e2:	932b      	str	r3, [sp, #172]	; 0xac
 80056e4:	2300      	movs	r3, #0
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2103      	movs	r1, #3
 80056ea:	f88d 1000 	strb.w	r1, [sp]
 80056ee:	9900      	ldr	r1, [sp, #0]
 80056f0:	9129      	str	r1, [sp, #164]	; 0xa4
 80056f2:	4619      	mov	r1, r3
 80056f4:	f363 0100 	bfi	r1, r3, #0, #1
 80056f8:	f363 0141 	bfi	r1, r3, #1, #1
 80056fc:	f363 0182 	bfi	r1, r3, #2, #1
 8005700:	f363 01c5 	bfi	r1, r3, #3, #3
 8005704:	f362 1188 	bfi	r1, r2, #6, #3
 8005708:	220c      	movs	r2, #12
 800570a:	f362 2152 	bfi	r1, r2, #9, #10
 800570e:	f363 41de 	bfi	r1, r3, #19, #12
 8005712:	f363 71df 	bfi	r1, r3, #31, #1
 8005716:	aa29      	add	r2, sp, #164	; 0xa4
 8005718:	48b7      	ldr	r0, [pc, #732]	; (80059f8 <dma_stm32_configure+0x444>)
 800571a:	f00c f803 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800571e:	f06f 0715 	mvn.w	r7, #21
 8005722:	e00b      	b.n	800573c <dma_stm32_configure+0x188>
		stream->busy = true;
 8005724:	2301      	movs	r3, #1
 8005726:	f888 3006 	strb.w	r3, [r8, #6]
		stream->hal_override = true;
 800572a:	f888 3005 	strb.w	r3, [r8, #5]
		stream->dma_callback = config->dma_callback;
 800572e:	69a3      	ldr	r3, [r4, #24]
 8005730:	f8c8 3014 	str.w	r3, [r8, #20]
		stream->user_data = config->user_data;
 8005734:	6963      	ldr	r3, [r4, #20]
 8005736:	f8c8 3010 	str.w	r3, [r8, #16]
		return 0;
 800573a:	2700      	movs	r7, #0
}
 800573c:	4638      	mov	r0, r7
 800573e:	b051      	add	sp, #324	; 0x144
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("cannot configure the dma stream %d.", id);
 8005744:	2201      	movs	r2, #1
 8005746:	f8ad 2004 	strh.w	r2, [sp, #4]
 800574a:	4bac      	ldr	r3, [pc, #688]	; (80059fc <dma_stm32_configure+0x448>)
 800574c:	934e      	str	r3, [sp, #312]	; 0x138
 800574e:	954f      	str	r5, [sp, #316]	; 0x13c
 8005750:	2300      	movs	r3, #0
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	2103      	movs	r1, #3
 8005756:	f88d 1000 	strb.w	r1, [sp]
 800575a:	9900      	ldr	r1, [sp, #0]
 800575c:	914d      	str	r1, [sp, #308]	; 0x134
 800575e:	4619      	mov	r1, r3
 8005760:	f363 0100 	bfi	r1, r3, #0, #1
 8005764:	f363 0141 	bfi	r1, r3, #1, #1
 8005768:	f363 0182 	bfi	r1, r3, #2, #1
 800576c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005770:	f362 1188 	bfi	r1, r2, #6, #3
 8005774:	220c      	movs	r2, #12
 8005776:	f362 2152 	bfi	r1, r2, #9, #10
 800577a:	f363 41de 	bfi	r1, r3, #19, #12
 800577e:	f363 71df 	bfi	r1, r3, #31, #1
 8005782:	aa4d      	add	r2, sp, #308	; 0x134
 8005784:	489c      	ldr	r0, [pc, #624]	; (80059f8 <dma_stm32_configure+0x444>)
 8005786:	f00b ffcd 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800578a:	f06f 0715 	mvn.w	r7, #21
 800578e:	e7d5      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("dma stream %d is busy.", id);
 8005790:	2201      	movs	r2, #1
 8005792:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005796:	4b9a      	ldr	r3, [pc, #616]	; (8005a00 <dma_stm32_configure+0x44c>)
 8005798:	9348      	str	r3, [sp, #288]	; 0x120
 800579a:	9549      	str	r5, [sp, #292]	; 0x124
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2103      	movs	r1, #3
 80057a2:	f88d 1000 	strb.w	r1, [sp]
 80057a6:	9900      	ldr	r1, [sp, #0]
 80057a8:	9147      	str	r1, [sp, #284]	; 0x11c
 80057aa:	4619      	mov	r1, r3
 80057ac:	f363 0100 	bfi	r1, r3, #0, #1
 80057b0:	f363 0141 	bfi	r1, r3, #1, #1
 80057b4:	f363 0182 	bfi	r1, r3, #2, #1
 80057b8:	f363 01c5 	bfi	r1, r3, #3, #3
 80057bc:	f362 1188 	bfi	r1, r2, #6, #3
 80057c0:	220c      	movs	r2, #12
 80057c2:	f362 2152 	bfi	r1, r2, #9, #10
 80057c6:	f363 41de 	bfi	r1, r3, #19, #12
 80057ca:	f363 71df 	bfi	r1, r3, #31, #1
 80057ce:	aa47      	add	r2, sp, #284	; 0x11c
 80057d0:	4889      	ldr	r0, [pc, #548]	; (80059f8 <dma_stm32_configure+0x444>)
 80057d2:	f00b ffa7 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 80057d6:	f06f 070f 	mvn.w	r7, #15
 80057da:	e7af      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("could not disable dma stream %d.", id);
 80057dc:	2201      	movs	r2, #1
 80057de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80057e2:	4b88      	ldr	r3, [pc, #544]	; (8005a04 <dma_stm32_configure+0x450>)
 80057e4:	9342      	str	r3, [sp, #264]	; 0x108
 80057e6:	9543      	str	r5, [sp, #268]	; 0x10c
 80057e8:	2300      	movs	r3, #0
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2103      	movs	r1, #3
 80057ee:	f88d 1000 	strb.w	r1, [sp]
 80057f2:	9900      	ldr	r1, [sp, #0]
 80057f4:	9141      	str	r1, [sp, #260]	; 0x104
 80057f6:	4619      	mov	r1, r3
 80057f8:	f363 0100 	bfi	r1, r3, #0, #1
 80057fc:	f363 0141 	bfi	r1, r3, #1, #1
 8005800:	f363 0182 	bfi	r1, r3, #2, #1
 8005804:	f363 01c5 	bfi	r1, r3, #3, #3
 8005808:	f362 1188 	bfi	r1, r2, #6, #3
 800580c:	220c      	movs	r2, #12
 800580e:	f362 2152 	bfi	r1, r2, #9, #10
 8005812:	f363 41de 	bfi	r1, r3, #19, #12
 8005816:	f363 71df 	bfi	r1, r3, #31, #1
 800581a:	aa41      	add	r2, sp, #260	; 0x104
 800581c:	4876      	ldr	r0, [pc, #472]	; (80059f8 <dma_stm32_configure+0x444>)
 800581e:	f00b ff81 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
 8005822:	f06f 070f 	mvn.w	r7, #15
 8005826:	e789      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("Data size too big: %d\n",
 8005828:	2201      	movs	r2, #1
 800582a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <dma_stm32_configure+0x454>)
 8005830:	933c      	str	r3, [sp, #240]	; 0xf0
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	933d      	str	r3, [sp, #244]	; 0xf4
 8005838:	2300      	movs	r3, #0
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	2103      	movs	r1, #3
 800583e:	f88d 1000 	strb.w	r1, [sp]
 8005842:	9900      	ldr	r1, [sp, #0]
 8005844:	913b      	str	r1, [sp, #236]	; 0xec
 8005846:	4619      	mov	r1, r3
 8005848:	f363 0100 	bfi	r1, r3, #0, #1
 800584c:	f363 0141 	bfi	r1, r3, #1, #1
 8005850:	f363 0182 	bfi	r1, r3, #2, #1
 8005854:	f363 01c5 	bfi	r1, r3, #3, #3
 8005858:	f362 1188 	bfi	r1, r2, #6, #3
 800585c:	220c      	movs	r2, #12
 800585e:	f362 2152 	bfi	r1, r2, #9, #10
 8005862:	f363 41de 	bfi	r1, r3, #19, #12
 8005866:	f363 71df 	bfi	r1, r3, #31, #1
 800586a:	aa3b      	add	r2, sp, #236	; 0xec
 800586c:	4862      	ldr	r0, [pc, #392]	; (80059f8 <dma_stm32_configure+0x444>)
 800586e:	f00b ff59 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005872:	f06f 0715 	mvn.w	r7, #21
 8005876:	e761      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("source and dest data size differ.");
 8005878:	2201      	movs	r2, #1
 800587a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800587e:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <dma_stm32_configure+0x458>)
 8005880:	9336      	str	r3, [sp, #216]	; 0xd8
 8005882:	2300      	movs	r3, #0
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	2102      	movs	r1, #2
 8005888:	f88d 1000 	strb.w	r1, [sp]
 800588c:	9900      	ldr	r1, [sp, #0]
 800588e:	9135      	str	r1, [sp, #212]	; 0xd4
 8005890:	4619      	mov	r1, r3
 8005892:	f363 0100 	bfi	r1, r3, #0, #1
 8005896:	f363 0141 	bfi	r1, r3, #1, #1
 800589a:	f363 0182 	bfi	r1, r3, #2, #1
 800589e:	f363 01c5 	bfi	r1, r3, #3, #3
 80058a2:	f362 1188 	bfi	r1, r2, #6, #3
 80058a6:	2208      	movs	r2, #8
 80058a8:	f362 2152 	bfi	r1, r2, #9, #10
 80058ac:	f363 41de 	bfi	r1, r3, #19, #12
 80058b0:	f363 71df 	bfi	r1, r3, #31, #1
 80058b4:	aa35      	add	r2, sp, #212	; 0xd4
 80058b6:	4850      	ldr	r0, [pc, #320]	; (80059f8 <dma_stm32_configure+0x444>)
 80058b8:	f00b ff34 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 80058bc:	f06f 0715 	mvn.w	r7, #21
 80058c0:	e73c      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("source and dest unit size error, %d",
 80058c2:	2201      	movs	r2, #1
 80058c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80058c8:	4b51      	ldr	r3, [pc, #324]	; (8005a10 <dma_stm32_configure+0x45c>)
 80058ca:	9318      	str	r3, [sp, #96]	; 0x60
 80058cc:	88a3      	ldrh	r3, [r4, #4]
 80058ce:	9319      	str	r3, [sp, #100]	; 0x64
 80058d0:	2300      	movs	r3, #0
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2103      	movs	r1, #3
 80058d6:	f88d 1000 	strb.w	r1, [sp]
 80058da:	9900      	ldr	r1, [sp, #0]
 80058dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80058de:	4619      	mov	r1, r3
 80058e0:	f363 0100 	bfi	r1, r3, #0, #1
 80058e4:	f363 0141 	bfi	r1, r3, #1, #1
 80058e8:	f363 0182 	bfi	r1, r3, #2, #1
 80058ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80058f0:	f362 1188 	bfi	r1, r2, #6, #3
 80058f4:	220c      	movs	r2, #12
 80058f6:	f362 2152 	bfi	r1, r2, #9, #10
 80058fa:	f363 41de 	bfi	r1, r3, #19, #12
 80058fe:	f363 71df 	bfi	r1, r3, #31, #1
 8005902:	aa17      	add	r2, sp, #92	; 0x5c
 8005904:	483c      	ldr	r0, [pc, #240]	; (80059f8 <dma_stm32_configure+0x444>)
 8005906:	f00b ff0d 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800590a:	f06f 0715 	mvn.w	r7, #21
 800590e:	e715      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_ERR("source_reload_en and dest_reload_en must "
 8005910:	2201      	movs	r2, #1
 8005912:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <dma_stm32_configure+0x460>)
 8005918:	9330      	str	r3, [sp, #192]	; 0xc0
 800591a:	2300      	movs	r3, #0
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	2102      	movs	r1, #2
 8005920:	f88d 1000 	strb.w	r1, [sp]
 8005924:	9900      	ldr	r1, [sp, #0]
 8005926:	912f      	str	r1, [sp, #188]	; 0xbc
 8005928:	4619      	mov	r1, r3
 800592a:	f363 0100 	bfi	r1, r3, #0, #1
 800592e:	f363 0141 	bfi	r1, r3, #1, #1
 8005932:	f363 0182 	bfi	r1, r3, #2, #1
 8005936:	f363 01c5 	bfi	r1, r3, #3, #3
 800593a:	f362 1188 	bfi	r1, r2, #6, #3
 800593e:	2208      	movs	r2, #8
 8005940:	f362 2152 	bfi	r1, r2, #9, #10
 8005944:	f363 41de 	bfi	r1, r3, #19, #12
 8005948:	f363 71df 	bfi	r1, r3, #31, #1
 800594c:	aa2f      	add	r2, sp, #188	; 0xbc
 800594e:	482a      	ldr	r0, [pc, #168]	; (80059f8 <dma_stm32_configure+0x444>)
 8005950:	f00b fee8 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005954:	f06f 0715 	mvn.w	r7, #21
 8005958:	e6f0      	b.n	800573c <dma_stm32_configure+0x188>
		LOG_WRN("source_buffer address is null.");
 800595a:	2301      	movs	r3, #1
 800595c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <dma_stm32_configure+0x464>)
 8005962:	931e      	str	r3, [sp, #120]	; 0x78
 8005964:	2300      	movs	r3, #0
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2202      	movs	r2, #2
 800596a:	f88d 2000 	strb.w	r2, [sp]
 800596e:	9900      	ldr	r1, [sp, #0]
 8005970:	911d      	str	r1, [sp, #116]	; 0x74
 8005972:	4619      	mov	r1, r3
 8005974:	f363 0100 	bfi	r1, r3, #0, #1
 8005978:	f363 0141 	bfi	r1, r3, #1, #1
 800597c:	f363 0182 	bfi	r1, r3, #2, #1
 8005980:	f363 01c5 	bfi	r1, r3, #3, #3
 8005984:	f362 1188 	bfi	r1, r2, #6, #3
 8005988:	2208      	movs	r2, #8
 800598a:	f362 2152 	bfi	r1, r2, #9, #10
 800598e:	f363 41de 	bfi	r1, r3, #19, #12
 8005992:	f363 71df 	bfi	r1, r3, #31, #1
 8005996:	aa1d      	add	r2, sp, #116	; 0x74
 8005998:	4817      	ldr	r0, [pc, #92]	; (80059f8 <dma_stm32_configure+0x444>)
 800599a:	f00b fec3 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800599e:	e66d      	b.n	800567c <dma_stm32_configure+0xc8>
		LOG_WRN("dest_buffer address is null.");
 80059a0:	2301      	movs	r3, #1
 80059a2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80059a6:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <dma_stm32_configure+0x468>)
 80059a8:	9324      	str	r3, [sp, #144]	; 0x90
 80059aa:	2300      	movs	r3, #0
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f88d 2000 	strb.w	r2, [sp]
 80059b4:	9900      	ldr	r1, [sp, #0]
 80059b6:	9123      	str	r1, [sp, #140]	; 0x8c
 80059b8:	4619      	mov	r1, r3
 80059ba:	f363 0100 	bfi	r1, r3, #0, #1
 80059be:	f363 0141 	bfi	r1, r3, #1, #1
 80059c2:	f363 0182 	bfi	r1, r3, #2, #1
 80059c6:	f363 01c5 	bfi	r1, r3, #3, #3
 80059ca:	f362 1188 	bfi	r1, r2, #6, #3
 80059ce:	2208      	movs	r2, #8
 80059d0:	f362 2152 	bfi	r1, r2, #9, #10
 80059d4:	f363 41de 	bfi	r1, r3, #19, #12
 80059d8:	f363 71df 	bfi	r1, r3, #31, #1
 80059dc:	aa23      	add	r2, sp, #140	; 0x8c
 80059de:	4806      	ldr	r0, [pc, #24]	; (80059f8 <dma_stm32_configure+0x444>)
 80059e0:	f00b fea0 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80059e4:	e64f      	b.n	8005686 <dma_stm32_configure+0xd2>
					config->head_block->source_address;
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	681a      	ldr	r2, [r3, #0]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 80059ea:	920a      	str	r2, [sp, #40]	; 0x28
					config->head_block->dest_address;
 80059ec:	685b      	ldr	r3, [r3, #4]
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	e653      	b.n	800569a <dma_stm32_configure+0xe6>
 80059f2:	bf00      	nop
 80059f4:	08015b18 	.word	0x08015b18
 80059f8:	08015020 	.word	0x08015020
 80059fc:	080159e0 	.word	0x080159e0
 8005a00:	08015a04 	.word	0x08015a04
 8005a04:	08015a1c 	.word	0x08015a1c
 8005a08:	08015a40 	.word	0x08015a40
 8005a0c:	08015a58 	.word	0x08015a58
 8005a10:	08015a7c 	.word	0x08015a7c
 8005a14:	08015aa0 	.word	0x08015aa0
 8005a18:	08015ad8 	.word	0x08015ad8
 8005a1c:	08015af8 	.word	0x08015af8
		memory_addr_adj = config->head_block->dest_addr_adj;
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8005a26:	f3cb 1001 	ubfx	r0, fp, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 8005a2a:	f3cb 0b81 	ubfx	fp, fp, #2, #2
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 8005a2e:	a90e      	add	r1, sp, #56	; 0x38
 8005a30:	f7ff fbe6 	bl	8005200 <dma_stm32_get_memory_increment>
	if (ret < 0) {
 8005a34:	1e07      	subs	r7, r0, #0
 8005a36:	f6ff ae81 	blt.w	800573c <dma_stm32_configure+0x188>
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 8005a3a:	a90d      	add	r1, sp, #52	; 0x34
 8005a3c:	4658      	mov	r0, fp
 8005a3e:	f7ff fc1b 	bl	8005278 <dma_stm32_get_periph_increment>
	if (ret < 0) {
 8005a42:	1e07      	subs	r7, r0, #0
 8005a44:	f6ff ae7a 	blt.w	800573c <dma_stm32_configure+0x188>
	if (config->head_block->source_reload_en) {
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	7f1b      	ldrb	r3, [r3, #28]
 8005a4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a50:	d05c      	beq.n	8005b0c <dma_stm32_configure+0x558>
		DMA_InitStruct.Mode = LL_DMA_MODE_CIRCULAR;
 8005a52:	2320      	movs	r3, #32
 8005a54:	930c      	str	r3, [sp, #48]	; 0x30
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8005a56:	f859 3006 	ldr.w	r3, [r9, r6]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	bf14      	ite	ne
 8005a5e:	2300      	movne	r3, #0
 8005a60:	2301      	moveq	r3, #1
 8005a62:	f888 3004 	strb.w	r3, [r8, #4]
	int index = find_lsb_set(config->source_data_size) - 1;
 8005a66:	88a3      	ldrh	r3, [r4, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005a68:	fa93 f2a3 	rbit	r2, r3
 8005a6c:	fab2 f282 	clz	r2, r2
 8005a70:	b90b      	cbnz	r3, 8005a76 <dma_stm32_configure+0x4c2>
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <dma_stm32_configure+0x56c>)
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	930f      	str	r3, [sp, #60]	; 0x3c
	index = find_lsb_set(config->dest_data_size) - 1;
 8005a7e:	88e3      	ldrh	r3, [r4, #6]
 8005a80:	fa93 f2a3 	rbit	r2, r3
 8005a84:	fab2 f282 	clz	r2, r2
 8005a88:	b90b      	cbnz	r3, 8005a8e <dma_stm32_configure+0x4da>
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 8005a8e:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <dma_stm32_configure+0x570>)
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	9310      	str	r3, [sp, #64]	; 0x40
	if (stream->source_periph) {
 8005a96:	f898 3004 	ldrb.w	r3, [r8, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d039      	beq.n	8005b12 <dma_stm32_configure+0x55e>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	695b      	ldr	r3, [r3, #20]
					config->source_data_size;
 8005aa2:	88a2      	ldrh	r2, [r4, #4]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa8:	9311      	str	r3, [sp, #68]	; 0x44
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8005aaa:	7823      	ldrb	r3, [r4, #0]
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	9312      	str	r3, [sp, #72]	; 0x48
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 f892 	bl	8005bdc <dma_stm32_id_to_stream>
 8005ab8:	4601      	mov	r1, r0
 8005aba:	aa09      	add	r2, sp, #36	; 0x24
 8005abc:	4650      	mov	r0, sl
 8005abe:	f004 fa47 	bl	8009f50 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 f88a 	bl	8005bdc <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <dma_stm32_configure+0x574>)
 8005aca:	5c1a      	ldrb	r2, [r3, r0]
 8005acc:	f85a 3002 	ldr.w	r3, [sl, r2]
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	f84a 3002 	str.w	r3, [sl, r2]
	if (config->head_block->source_reload_en) {
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	7f1b      	ldrb	r3, [r3, #28]
 8005adc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ae0:	f43f ae2c 	beq.w	800573c <dma_stm32_configure+0x188>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f879 	bl	8005bdc <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8005aea:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <dma_stm32_configure+0x574>)
 8005aec:	5c1a      	ldrb	r2, [r3, r0]
 8005aee:	f85a 3002 	ldr.w	r3, [sl, r2]
 8005af2:	f043 0304 	orr.w	r3, r3, #4
 8005af6:	f84a 3002 	str.w	r3, [sl, r2]
}
 8005afa:	e61f      	b.n	800573c <dma_stm32_configure+0x188>
		memory_addr_adj = config->head_block->source_addr_adj;
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8005b02:	f3cb 0081 	ubfx	r0, fp, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8005b06:	f3cb 1b01 	ubfx	fp, fp, #4, #2
		break;
 8005b0a:	e790      	b.n	8005a2e <dma_stm32_configure+0x47a>
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8005b10:	e7a1      	b.n	8005a56 <dma_stm32_configure+0x4a2>
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	695b      	ldr	r3, [r3, #20]
					config->dest_data_size;
 8005b16:	88e2      	ldrh	r2, [r4, #6]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8005b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b1c:	9311      	str	r3, [sp, #68]	; 0x44
 8005b1e:	e7c4      	b.n	8005aaa <dma_stm32_configure+0x4f6>
 8005b20:	08015bd4 	.word	0x08015bd4
 8005b24:	08015bc8 	.word	0x08015bc8
 8005b28:	08015b68 	.word	0x08015b68

08005b2c <dma_stm32_init>:
{
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	b090      	sub	sp, #64	; 0x40
 8005b30:	4605      	mov	r5, r0
	const struct dma_stm32_config *config = dev->config;
 8005b32:	6844      	ldr	r4, [r0, #4]
 8005b34:	4826      	ldr	r0, [pc, #152]	; (8005bd0 <dma_stm32_init+0xa4>)
 8005b36:	f00d ff71 	bl	8013a1c <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8005b3a:	b158      	cbz	r0, 8005b54 <dma_stm32_init+0x28>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8005b3c:	4824      	ldr	r0, [pc, #144]	; (8005bd0 <dma_stm32_init+0xa4>)
 8005b3e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4621      	mov	r1, r4
 8005b44:	4798      	blx	r3
 8005b46:	4606      	mov	r6, r0
	if (clock_control_on(clk,
 8005b48:	b93e      	cbnz	r6, 8005b5a <dma_stm32_init+0x2e>
	config->config_irq(dev);
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8005b50:	2300      	movs	r3, #0
 8005b52:	e02f      	b.n	8005bb4 <dma_stm32_init+0x88>
		return -ENODEV;
 8005b54:	f06f 0612 	mvn.w	r6, #18
 8005b58:	e7f6      	b.n	8005b48 <dma_stm32_init+0x1c>
		LOG_ERR("clock op failed\n");
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <dma_stm32_init+0xa8>)
 8005b62:	930e      	str	r3, [sp, #56]	; 0x38
 8005b64:	2300      	movs	r3, #0
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	2102      	movs	r1, #2
 8005b6a:	f88d 1004 	strb.w	r1, [sp, #4]
 8005b6e:	9901      	ldr	r1, [sp, #4]
 8005b70:	910d      	str	r1, [sp, #52]	; 0x34
 8005b72:	4619      	mov	r1, r3
 8005b74:	f363 0100 	bfi	r1, r3, #0, #1
 8005b78:	f363 0141 	bfi	r1, r3, #1, #1
 8005b7c:	f363 0182 	bfi	r1, r3, #2, #1
 8005b80:	f363 01c5 	bfi	r1, r3, #3, #3
 8005b84:	f362 1188 	bfi	r1, r2, #6, #3
 8005b88:	2208      	movs	r2, #8
 8005b8a:	f362 2152 	bfi	r1, r2, #9, #10
 8005b8e:	f363 41de 	bfi	r1, r3, #19, #12
 8005b92:	f363 71df 	bfi	r1, r3, #31, #1
 8005b96:	aa0d      	add	r2, sp, #52	; 0x34
 8005b98:	480f      	ldr	r0, [pc, #60]	; (8005bd8 <dma_stm32_init+0xac>)
 8005b9a:	f00b fdc3 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8005b9e:	f06f 0604 	mvn.w	r6, #4
 8005ba2:	e011      	b.n	8005bc8 <dma_stm32_init+0x9c>
		config->streams[i].busy = false;
 8005ba4:	69a2      	ldr	r2, [r4, #24]
 8005ba6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005baa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005bae:	2100      	movs	r1, #0
 8005bb0:	7191      	strb	r1, [r2, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	6962      	ldr	r2, [r4, #20]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d3f4      	bcc.n	8005ba4 <dma_stm32_init+0x78>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8005bba:	692a      	ldr	r2, [r5, #16]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6013      	str	r3, [r2, #0]
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8005bc0:	692a      	ldr	r2, [r5, #16]
 8005bc2:	6053      	str	r3, [r2, #4]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8005bc4:	692a      	ldr	r2, [r5, #16]
 8005bc6:	6093      	str	r3, [r2, #8]
}
 8005bc8:	4630      	mov	r0, r6
 8005bca:	b010      	add	sp, #64	; 0x40
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	bf00      	nop
 8005bd0:	08014bb4 	.word	0x08014bb4
 8005bd4:	08015b38 	.word	0x08015b38
 8005bd8:	08015020 	.word	0x08015020

08005bdc <dma_stm32_id_to_stream>:
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
}
 8005bdc:	4b01      	ldr	r3, [pc, #4]	; (8005be4 <dma_stm32_id_to_stream+0x8>)
 8005bde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005be2:	4770      	bx	lr
 8005be4:	08015cdc 	.word	0x08015cdc

08005be8 <dma_stm32_clear_ht>:

void dma_stm32_clear_ht(DMA_TypeDef *DMAx, uint32_t id)
{
 8005be8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8005bea:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <dma_stm32_clear_ht+0xc>)
 8005bec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bf0:	4798      	blx	r3
}
 8005bf2:	bd08      	pop	{r3, pc}
 8005bf4:	08015cc0 	.word	0x08015cc0

08005bf8 <dma_stm32_clear_tc>:

void dma_stm32_clear_tc(DMA_TypeDef *DMAx, uint32_t id)
{
 8005bf8:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8005bfa:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <dma_stm32_clear_tc+0xc>)
 8005bfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c00:	4798      	blx	r3
}
 8005c02:	bd08      	pop	{r3, pc}
 8005c04:	08015ca4 	.word	0x08015ca4

08005c08 <dma_stm32_is_ht_active>:

bool dma_stm32_is_ht_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8005c08:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <dma_stm32_is_ht_active+0x14>)
 8005c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c10:	4798      	blx	r3
}
 8005c12:	3800      	subs	r0, #0
 8005c14:	bf18      	it	ne
 8005c16:	2001      	movne	r0, #1
 8005c18:	bd08      	pop	{r3, pc}
 8005c1a:	bf00      	nop
 8005c1c:	08015c88 	.word	0x08015c88

08005c20 <dma_stm32_is_tc_active>:

bool dma_stm32_is_tc_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8005c20:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <dma_stm32_is_tc_active+0x14>)
 8005c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c28:	4798      	blx	r3
}
 8005c2a:	3800      	subs	r0, #0
 8005c2c:	bf18      	it	ne
 8005c2e:	2001      	movne	r0, #1
 8005c30:	bd08      	pop	{r3, pc}
 8005c32:	bf00      	nop
 8005c34:	08015c6c 	.word	0x08015c6c

08005c38 <dma_stm32_clear_te>:


void dma_stm32_clear_te(DMA_TypeDef *DMAx, uint32_t id)
{
 8005c38:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8005c3a:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <dma_stm32_clear_te+0xc>)
 8005c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c40:	4798      	blx	r3
}
 8005c42:	bd08      	pop	{r3, pc}
 8005c44:	08015c50 	.word	0x08015c50

08005c48 <dma_stm32_is_te_active>:

	func[id](DMAx);
}

bool dma_stm32_is_te_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8005c48:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CTEIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <dma_stm32_is_te_active+0x14>)
 8005c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c50:	4798      	blx	r3
}
 8005c52:	3800      	subs	r0, #0
 8005c54:	bf18      	it	ne
 8005c56:	2001      	movne	r0, #1
 8005c58:	bd08      	pop	{r3, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08015c34 	.word	0x08015c34

08005c60 <dma_stm32_is_gi_active>:

bool dma_stm32_is_gi_active(DMA_TypeDef *DMAx, uint32_t id)
{
 8005c60:	b508      	push	{r3, lr}
#endif /* LL_DMA_IFCR_CGIF8 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	return func[id](DMAx);
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <dma_stm32_is_gi_active+0x14>)
 8005c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c68:	4798      	blx	r3
}
 8005c6a:	3800      	subs	r0, #0
 8005c6c:	bf18      	it	ne
 8005c6e:	2001      	movne	r0, #1
 8005c70:	bd08      	pop	{r3, pc}
 8005c72:	bf00      	nop
 8005c74:	08015c18 	.word	0x08015c18

08005c78 <stm32_dma_dump_stream_irq>:

void stm32_dma_dump_stream_irq(DMA_TypeDef *dma, uint32_t id)
{
 8005c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	b08b      	sub	sp, #44	; 0x2c
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8005c84:	2301      	movs	r3, #1
 8005c86:	813b      	strh	r3, [r7, #8]
 8005c88:	f7ff ffca 	bl	8005c20 <dma_stm32_is_tc_active>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7ff ffba 	bl	8005c08 <dma_stm32_is_ht_active>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff ffd6 	bl	8005c48 <dma_stm32_is_te_active>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f7ff ffde 	bl	8005c60 <dma_stm32_is_gi_active>
 8005ca4:	b08a      	sub	sp, #40	; 0x28
 8005ca6:	46e9      	mov	r9, sp
 8005ca8:	f119 060c 	adds.w	r6, r9, #12
 8005cac:	d053      	beq.n	8005d56 <stm32_dma_dump_stream_irq+0xde>
 8005cae:	f04f 0818 	mov.w	r8, #24
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	813b      	strh	r3, [r7, #8]
 8005cb6:	b12e      	cbz	r6, 8005cc4 <stm32_dma_dump_stream_irq+0x4c>
 8005cb8:	f1b8 0f04 	cmp.w	r8, #4
 8005cbc:	dd02      	ble.n	8005cc4 <stm32_dma_dump_stream_irq+0x4c>
 8005cbe:	4b37      	ldr	r3, [pc, #220]	; (8005d9c <stm32_dma_dump_stream_irq+0x124>)
 8005cc0:	f8c9 3010 	str.w	r3, [r9, #16]
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7ff ffaa 	bl	8005c20 <dma_stm32_is_tc_active>
 8005ccc:	b116      	cbz	r6, 8005cd4 <stm32_dma_dump_stream_irq+0x5c>
 8005cce:	f1b8 0f08 	cmp.w	r8, #8
 8005cd2:	dc43      	bgt.n	8005d5c <stm32_dma_dump_stream_irq+0xe4>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7ff ff96 	bl	8005c08 <dma_stm32_is_ht_active>
 8005cdc:	b116      	cbz	r6, 8005ce4 <stm32_dma_dump_stream_irq+0x6c>
 8005cde:	f1b8 0f0c 	cmp.w	r8, #12
 8005ce2:	dc42      	bgt.n	8005d6a <stm32_dma_dump_stream_irq+0xf2>
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff ffae 	bl	8005c48 <dma_stm32_is_te_active>
 8005cec:	b116      	cbz	r6, 8005cf4 <stm32_dma_dump_stream_irq+0x7c>
 8005cee:	f1b8 0f10 	cmp.w	r8, #16
 8005cf2:	dc41      	bgt.n	8005d78 <stm32_dma_dump_stream_irq+0x100>
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff ffb2 	bl	8005c60 <dma_stm32_is_gi_active>
 8005cfc:	b116      	cbz	r6, 8005d04 <stm32_dma_dump_stream_irq+0x8c>
 8005cfe:	f1b8 0f14 	cmp.w	r8, #20
 8005d02:	dc40      	bgt.n	8005d86 <stm32_dma_dump_stream_irq+0x10e>
 8005d04:	f1b8 0f17 	cmp.w	r8, #23
 8005d08:	dd44      	ble.n	8005d94 <stm32_dma_dump_stream_irq+0x11c>
 8005d0a:	2318      	movs	r3, #24
 8005d0c:	b136      	cbz	r6, 8005d1c <stm32_dma_dump_stream_irq+0xa4>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	2206      	movs	r2, #6
 8005d14:	713a      	strb	r2, [r7, #4]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	f8c9 200c 	str.w	r2, [r9, #12]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f36f 0100 	bfc	r1, #0, #1
 8005d22:	f36f 0141 	bfc	r1, #1, #1
 8005d26:	f36f 0182 	bfc	r1, #2, #1
 8005d2a:	f36f 01c5 	bfc	r1, #3, #3
 8005d2e:	2203      	movs	r2, #3
 8005d30:	f362 1188 	bfi	r1, r2, #6, #3
 8005d34:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8005d38:	f363 2152 	bfi	r1, r3, #9, #10
 8005d3c:	f36f 41de 	bfc	r1, #19, #12
 8005d40:	f36f 71df 	bfc	r1, #31, #1
 8005d44:	2300      	movs	r3, #0
 8005d46:	4632      	mov	r2, r6
 8005d48:	4815      	ldr	r0, [pc, #84]	; (8005da0 <stm32_dma_dump_stream_irq+0x128>)
 8005d4a:	f00b fceb 	bl	8011724 <z_impl_z_log_msg2_static_create>
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 8005d4e:	372c      	adds	r7, #44	; 0x2c
 8005d50:	46bd      	mov	sp, r7
 8005d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
 8005d56:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8005d5a:	e7aa      	b.n	8005cb2 <stm32_dma_dump_stream_irq+0x3a>
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff ff5e 	bl	8005c20 <dma_stm32_is_tc_active>
 8005d64:	f8c9 0014 	str.w	r0, [r9, #20]
 8005d68:	e7b4      	b.n	8005cd4 <stm32_dma_dump_stream_irq+0x5c>
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7ff ff4b 	bl	8005c08 <dma_stm32_is_ht_active>
 8005d72:	f8c9 0018 	str.w	r0, [r9, #24]
 8005d76:	e7b5      	b.n	8005ce4 <stm32_dma_dump_stream_irq+0x6c>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f7ff ff64 	bl	8005c48 <dma_stm32_is_te_active>
 8005d80:	f8c9 001c 	str.w	r0, [r9, #28]
 8005d84:	e7b6      	b.n	8005cf4 <stm32_dma_dump_stream_irq+0x7c>
 8005d86:	4629      	mov	r1, r5
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff ff69 	bl	8005c60 <dma_stm32_is_gi_active>
 8005d8e:	f8c9 0020 	str.w	r0, [r9, #32]
 8005d92:	e7b7      	b.n	8005d04 <stm32_dma_dump_stream_irq+0x8c>
 8005d94:	f06f 031b 	mvn.w	r3, #27
 8005d98:	e7b8      	b.n	8005d0c <stm32_dma_dump_stream_irq+0x94>
 8005d9a:	bf00      	nop
 8005d9c:	08015be0 	.word	0x08015be0
 8005da0:	08015028 	.word	0x08015028

08005da4 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8005daa:	4608      	mov	r0, r1
 8005dac:	f7ff ff16 	bl	8005bdc <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005db0:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <stm32_dma_is_tc_irq_active+0x30>)
 8005db2:	5c1b      	ldrb	r3, [r3, r0]
 8005db4:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8005db6:	f013 0f02 	tst.w	r3, #2
 8005dba:	d006      	beq.n	8005dca <stm32_dma_is_tc_irq_active+0x26>
	       dma_stm32_is_tc_active(dma, id);
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff ff2e 	bl	8005c20 <dma_stm32_is_tc_active>
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8005dc4:	b118      	cbz	r0, 8005dce <stm32_dma_is_tc_irq_active+0x2a>
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	e000      	b.n	8005dcc <stm32_dma_is_tc_irq_active+0x28>
 8005dca:	2000      	movs	r0, #0
}
 8005dcc:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e7fc      	b.n	8005dcc <stm32_dma_is_tc_irq_active+0x28>
 8005dd2:	bf00      	nop
 8005dd4:	08015c10 	.word	0x08015c10

08005dd8 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4604      	mov	r4, r0
 8005ddc:	460d      	mov	r5, r1
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8005dde:	4608      	mov	r0, r1
 8005de0:	f7ff fefc 	bl	8005bdc <dma_stm32_id_to_stream>
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <stm32_dma_is_ht_irq_active+0x30>)
 8005de6:	5c1b      	ldrb	r3, [r3, r0]
 8005de8:	58e3      	ldr	r3, [r4, r3]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8005dea:	f013 0f04 	tst.w	r3, #4
 8005dee:	d006      	beq.n	8005dfe <stm32_dma_is_ht_irq_active+0x26>
	       dma_stm32_is_ht_active(dma, id);
 8005df0:	4629      	mov	r1, r5
 8005df2:	4620      	mov	r0, r4
 8005df4:	f7ff ff08 	bl	8005c08 <dma_stm32_is_ht_active>
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8005df8:	b118      	cbz	r0, 8005e02 <stm32_dma_is_ht_irq_active+0x2a>
 8005dfa:	2001      	movs	r0, #1
 8005dfc:	e000      	b.n	8005e00 <stm32_dma_is_ht_irq_active+0x28>
 8005dfe:	2000      	movs	r0, #0
}
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8005e02:	2000      	movs	r0, #0
 8005e04:	e7fc      	b.n	8005e00 <stm32_dma_is_ht_irq_active+0x28>
 8005e06:	bf00      	nop
 8005e08:	08015c10 	.word	0x08015c10

08005e0c <stm32_dma_enable_stream>:
	/* Preserve for future amending. */
	return false;
}

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
 8005e10:	4608      	mov	r0, r1
 8005e12:	f7ff fee3 	bl	8005bdc <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <stm32_dma_enable_stream+0x18>)
 8005e18:	5c1a      	ldrb	r2, [r3, r0]
 8005e1a:	58a3      	ldr	r3, [r4, r2]
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	50a3      	str	r3, [r4, r2]
}
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	08015c10 	.word	0x08015c10

08005e28 <stm32_dma_disable_stream>:

int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	4604      	mov	r4, r0
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	f7ff fed5 	bl	8005bdc <dma_stm32_id_to_stream>
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <stm32_dma_disable_stream+0x28>)
 8005e34:	5c1b      	ldrb	r3, [r3, r0]
 8005e36:	58e2      	ldr	r2, [r4, r3]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	50e2      	str	r2, [r4, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8005e3e:	58e3      	ldr	r3, [r4, r3]
                  DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005e40:	f013 0f01 	tst.w	r3, #1
 8005e44:	d002      	beq.n	8005e4c <stm32_dma_disable_stream+0x24>

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
	}

	return -EAGAIN;
 8005e46:	f06f 000a 	mvn.w	r0, #10
}
 8005e4a:	bd10      	pop	{r4, pc}
		return 0;
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e7fc      	b.n	8005e4a <stm32_dma_disable_stream+0x22>
 8005e50:	08015c10 	.word	0x08015c10

08005e54 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005e54:	424a      	negs	r2, r1
 8005e56:	f001 0303 	and.w	r3, r1, #3
 8005e5a:	f002 0203 	and.w	r2, r2, #3
 8005e5e:	bf58      	it	pl
 8005e60:	4253      	negpl	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	009a      	lsls	r2, r3, #2
 8005e66:	230f      	movs	r3, #15
 8005e68:	4093      	lsls	r3, r2
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	db19      	blt.n	8005ea4 <gpio_stm32_set_exti_source+0x50>
 8005e70:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8005e74:	fa5f fc83 	uxtb.w	ip, r3
 8005e78:	f10c 0102 	add.w	r1, ip, #2
 8005e7c:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <gpio_stm32_set_exti_source+0x58>)
 8005e7e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005e82:	0c1a      	lsrs	r2, r3, #16
 8005e84:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005e8c:	b162      	cbz	r2, 8005ea8 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8005e8e:	fab2 f282 	clz	r2, r2
 8005e92:	fa00 f202 	lsl.w	r2, r0, r2
 8005e96:	431a      	orrs	r2, r3
 8005e98:	f10c 0c02 	add.w	ip, ip, #2
 8005e9c:	4b03      	ldr	r3, [pc, #12]	; (8005eac <gpio_stm32_set_exti_source+0x58>)
 8005e9e:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8005ea2:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005ea4:	1cca      	adds	r2, r1, #3
 8005ea6:	e7e3      	b.n	8005e70 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	e7f2      	b.n	8005e92 <gpio_stm32_set_exti_source+0x3e>
 8005eac:	40010000 	.word	0x40010000

08005eb0 <gpio_stm32_get_exti_source>:
 8005eb0:	4242      	negs	r2, r0
 8005eb2:	f000 0303 	and.w	r3, r0, #3
 8005eb6:	f002 0203 	and.w	r2, r2, #3
 8005eba:	bf58      	it	pl
 8005ebc:	4253      	negpl	r3, r2
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	009a      	lsls	r2, r3, #2
 8005ec2:	230f      	movs	r3, #15
 8005ec4:	4093      	lsls	r3, r2
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	db10      	blt.n	8005eee <gpio_stm32_get_exti_source+0x3e>
 8005ecc:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8005ed0:	b2c3      	uxtb	r3, r0
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <gpio_stm32_get_exti_source+0x48>)
 8005ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005eda:	0c03      	lsrs	r3, r0, #16
 8005edc:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005ee4:	b12b      	cbz	r3, 8005ef2 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8005ee6:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8005eea:	40d8      	lsrs	r0, r3
 8005eec:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005eee:	1cc2      	adds	r2, r0, #3
 8005ef0:	e7ec      	b.n	8005ecc <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8005ef2:	2320      	movs	r3, #32
 8005ef4:	e7f9      	b.n	8005eea <gpio_stm32_get_exti_source+0x3a>
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000

08005efc <gpio_stm32_clock_request>:
{
 8005efc:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8005efe:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8005f00:	b169      	cbz	r1, 8005f1e <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8005f02:	340c      	adds	r4, #12
 8005f04:	480d      	ldr	r0, [pc, #52]	; (8005f3c <gpio_stm32_clock_request+0x40>)
 8005f06:	f00d fd89 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8005f0a:	b128      	cbz	r0, 8005f18 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8005f0c:	480b      	ldr	r0, [pc, #44]	; (8005f3c <gpio_stm32_clock_request+0x40>)
 8005f0e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4621      	mov	r1, r4
 8005f14:	4798      	blx	r3
}
 8005f16:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8005f18:	f06f 0012 	mvn.w	r0, #18
 8005f1c:	e7fb      	b.n	8005f16 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8005f1e:	340c      	adds	r4, #12
 8005f20:	4806      	ldr	r0, [pc, #24]	; (8005f3c <gpio_stm32_clock_request+0x40>)
 8005f22:	f00d fd7b 	bl	8013a1c <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8005f26:	b128      	cbz	r0, 8005f34 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8005f28:	4804      	ldr	r0, [pc, #16]	; (8005f3c <gpio_stm32_clock_request+0x40>)
 8005f2a:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4798      	blx	r3
 8005f32:	e7f0      	b.n	8005f16 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 8005f34:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8005f38:	e7ed      	b.n	8005f16 <gpio_stm32_clock_request+0x1a>
 8005f3a:	bf00      	nop
 8005f3c:	08014bb4 	.word	0x08014bb4

08005f40 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	4606      	mov	r6, r0
 8005f46:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <gpio_stm32_enable_int+0x40>)
 8005f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f4e:	ab02      	add	r3, sp, #8
 8005f50:	e903 0003 	stmdb	r3, {r0, r1}
 8005f54:	480b      	ldr	r0, [pc, #44]	; (8005f84 <gpio_stm32_enable_int+0x44>)
 8005f56:	f00d fd61 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8005f5a:	b148      	cbz	r0, 8005f70 <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8005f5c:	4809      	ldr	r0, [pc, #36]	; (8005f84 <gpio_stm32_enable_int+0x44>)
 8005f5e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4669      	mov	r1, sp
 8005f64:	4798      	blx	r3
 8005f66:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8005f68:	b12c      	cbz	r4, 8005f76 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 8005f70:	f06f 0412 	mvn.w	r4, #18
 8005f74:	e7f8      	b.n	8005f68 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8005f76:	4629      	mov	r1, r5
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f7ff ff6b 	bl	8005e54 <gpio_stm32_set_exti_source>
	return 0;
 8005f7e:	e7f4      	b.n	8005f6a <gpio_stm32_enable_int+0x2a>
 8005f80:	08015180 	.word	0x08015180
 8005f84:	08014bb4 	.word	0x08014bb4

08005f88 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8005f8e:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8005f90:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8005f92:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005f96:	d01f      	beq.n	8005fd8 <gpio_stm32_pin_interrupt_configure+0x50>
 8005f98:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8005f9a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005f9e:	d034      	beq.n	800600a <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8005fa0:	491d      	ldr	r1, [pc, #116]	; (8006018 <gpio_stm32_pin_interrupt_configure+0x90>)
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7fe ff4a 	bl	8004e3c <stm32_exti_set_callback>
 8005fa8:	4606      	mov	r6, r0
 8005faa:	bb88      	cbnz	r0, 8006010 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8005fac:	4621      	mov	r1, r4
 8005fae:	68b8      	ldr	r0, [r7, #8]
 8005fb0:	f7ff ffc6 	bl	8005f40 <gpio_stm32_enable_int>

	switch (trig) {
 8005fb4:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8005fb8:	d023      	beq.n	8006002 <gpio_stm32_pin_interrupt_configure+0x7a>
 8005fba:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8005fbe:	d022      	beq.n	8006006 <gpio_stm32_pin_interrupt_configure+0x7e>
 8005fc0:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8005fc4:	d01b      	beq.n	8005ffe <gpio_stm32_pin_interrupt_configure+0x76>
 8005fc6:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f7fe feff 	bl	8004dcc <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7fe fee0 	bl	8004d94 <stm32_exti_enable>

exit:
	return err;
}
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f7ff ff69 	bl	8005eb0 <gpio_stm32_get_exti_source>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4298      	cmp	r0, r3
 8005fe2:	d001      	beq.n	8005fe8 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8005fe4:	2600      	movs	r6, #0
		goto exit;
 8005fe6:	e7f5      	b.n	8005fd4 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7fe fee3 	bl	8004db4 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f7fe ff36 	bl	8004e60 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7fe fee8 	bl	8004dcc <stm32_exti_trigger>
 8005ffc:	e7f2      	b.n	8005fe4 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8005ffe:	2102      	movs	r1, #2
 8006000:	e7e2      	b.n	8005fc8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8006002:	2101      	movs	r1, #1
 8006004:	e7e0      	b.n	8005fc8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8006006:	2103      	movs	r1, #3
 8006008:	e7de      	b.n	8005fc8 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 800600a:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800600e:	e7e1      	b.n	8005fd4 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8006010:	f06f 060f 	mvn.w	r6, #15
	return err;
 8006014:	e7de      	b.n	8005fd4 <gpio_stm32_pin_interrupt_configure+0x4c>
 8006016:	bf00      	nop
 8006018:	08011e61 	.word	0x08011e61

0800601c <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	b0a4      	sub	sp, #144	; 0x90
 8006022:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
	const struct pwm_stm32_config *cfg = dev->config;
 8006026:	6846      	ldr	r6, [r0, #4]

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8006028:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 800602c:	f1b9 0f05 	cmp.w	r9, #5
 8006030:	d851      	bhi.n	80060d6 <pwm_stm32_pin_set+0xba>
 8006032:	4614      	mov	r4, r2
 8006034:	461d      	mov	r5, r3
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 8006036:	429a      	cmp	r2, r3
 8006038:	d373      	bcc.n	8006122 <pwm_stm32_pin_set+0x106>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 800603a:	f8d6 8000 	ldr.w	r8, [r6]
 800603e:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 8006042:	d003      	beq.n	800604c <pwm_stm32_pin_set+0x30>
 8006044:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006048:	f200 811f 	bhi.w	800628a <pwm_stm32_pin_set+0x26e>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	channel = ch2ll[pwm - 1u];
 800604c:	4b90      	ldr	r3, [pc, #576]	; (8006290 <pwm_stm32_pin_set+0x274>)
 800604e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]

	if (period_cycles == 0u) {
 8006052:	2c00      	cmp	r4, #0
 8006054:	f000 808a 	beq.w	800616c <pwm_stm32_pin_set+0x150>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006058:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800605c:	ea37 0303 	bics.w	r3, r7, r3
 8006060:	f000 808c 	beq.w	800617c <pwm_stm32_pin_set+0x160>
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, channel)) {
		LL_TIM_OC_InitTypeDef oc_init;

		LL_TIM_OC_StructInit(&oc_init);
 8006064:	a802      	add	r0, sp, #8
 8006066:	f00c ff65 	bl	8012f34 <LL_TIM_OC_StructInit>

		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800606a:	2360      	movs	r3, #96	; 0x60
 800606c:	9302      	str	r3, [sp, #8]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800606e:	2301      	movs	r3, #1
 8006070:	9303      	str	r3, [sp, #12]
		oc_init.CompareValue = pulse_cycles;
 8006072:	9505      	str	r5, [sp, #20]
		oc_init.OCPolarity = get_polarity(flags);
 8006074:	4650      	mov	r0, sl
 8006076:	f00c f88d 	bl	8012194 <get_polarity>
 800607a:	9006      	str	r0, [sp, #24]
			LL_TIM_SetTriggerInput(cfg->timer, LL_TIM_TS_ITR0);
			LL_TIM_DisableMasterSlaveMode(cfg->timer);
		}
#endif /* CONFIG_PWM_CAPTURE */

		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 800607c:	aa02      	add	r2, sp, #8
 800607e:	4639      	mov	r1, r7
 8006080:	6830      	ldr	r0, [r6, #0]
 8006082:	f00c ff61 	bl	8012f48 <LL_TIM_OC_Init>
 8006086:	4601      	mov	r1, r0
 8006088:	2800      	cmp	r0, #0
 800608a:	f040 80b6 	bne.w	80061fa <pwm_stm32_pin_set+0x1de>
			LOG_ERR("Could not initialize timer channel output");
			return -EIO;
		}

		LL_TIM_EnableARRPreload(cfg->timer);
 800608e:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 8006098:	6833      	ldr	r3, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800609a:	2f01      	cmp	r7, #1
 800609c:	f000 80d5 	beq.w	800624a <pwm_stm32_pin_set+0x22e>
 80060a0:	2f04      	cmp	r7, #4
 80060a2:	f000 80d1 	beq.w	8006248 <pwm_stm32_pin_set+0x22c>
 80060a6:	2f10      	cmp	r7, #16
 80060a8:	f000 80e5 	beq.w	8006276 <pwm_stm32_pin_set+0x25a>
 80060ac:	2f40      	cmp	r7, #64	; 0x40
 80060ae:	f000 80e4 	beq.w	800627a <pwm_stm32_pin_set+0x25e>
 80060b2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80060b6:	f000 80e2 	beq.w	800627e <pwm_stm32_pin_set+0x262>
 80060ba:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80060be:	f000 80e0 	beq.w	8006282 <pwm_stm32_pin_set+0x266>
 80060c2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80060c6:	f000 80de 	beq.w	8006286 <pwm_stm32_pin_set+0x26a>
 80060ca:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80060ce:	f000 80b9 	beq.w	8006244 <pwm_stm32_pin_set+0x228>
 80060d2:	2108      	movs	r1, #8
 80060d4:	e0b9      	b.n	800624a <pwm_stm32_pin_set+0x22e>
		LOG_ERR("Invalid channel (%d)", pwm);
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80060dc:	4b6d      	ldr	r3, [pc, #436]	; (8006294 <pwm_stm32_pin_set+0x278>)
 80060de:	9322      	str	r3, [sp, #136]	; 0x88
 80060e0:	9123      	str	r1, [sp, #140]	; 0x8c
 80060e2:	2300      	movs	r3, #0
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	2103      	movs	r1, #3
 80060e8:	f88d 1008 	strb.w	r1, [sp, #8]
 80060ec:	9902      	ldr	r1, [sp, #8]
 80060ee:	9121      	str	r1, [sp, #132]	; 0x84
 80060f0:	4619      	mov	r1, r3
 80060f2:	f363 0100 	bfi	r1, r3, #0, #1
 80060f6:	f363 0141 	bfi	r1, r3, #1, #1
 80060fa:	f363 0182 	bfi	r1, r3, #2, #1
 80060fe:	f363 01c5 	bfi	r1, r3, #3, #3
 8006102:	f362 1188 	bfi	r1, r2, #6, #3
 8006106:	220c      	movs	r2, #12
 8006108:	f362 2152 	bfi	r1, r2, #9, #10
 800610c:	f363 41de 	bfi	r1, r3, #19, #12
 8006110:	f363 71df 	bfi	r1, r3, #31, #1
 8006114:	aa21      	add	r2, sp, #132	; 0x84
 8006116:	4860      	ldr	r0, [pc, #384]	; (8006298 <pwm_stm32_pin_set+0x27c>)
 8006118:	f00b fb04 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 800611c:	f06f 0015 	mvn.w	r0, #21
 8006120:	e0a6      	b.n	8006270 <pwm_stm32_pin_set+0x254>
		LOG_ERR("Invalid combination of pulse and period cycles");
 8006122:	2201      	movs	r2, #1
 8006124:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006128:	4b5c      	ldr	r3, [pc, #368]	; (800629c <pwm_stm32_pin_set+0x280>)
 800612a:	931c      	str	r3, [sp, #112]	; 0x70
 800612c:	2300      	movs	r3, #0
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	2102      	movs	r1, #2
 8006132:	f88d 1008 	strb.w	r1, [sp, #8]
 8006136:	9902      	ldr	r1, [sp, #8]
 8006138:	911b      	str	r1, [sp, #108]	; 0x6c
 800613a:	4619      	mov	r1, r3
 800613c:	f363 0100 	bfi	r1, r3, #0, #1
 8006140:	f363 0141 	bfi	r1, r3, #1, #1
 8006144:	f363 0182 	bfi	r1, r3, #2, #1
 8006148:	f363 01c5 	bfi	r1, r3, #3, #3
 800614c:	f362 1188 	bfi	r1, r2, #6, #3
 8006150:	2208      	movs	r2, #8
 8006152:	f362 2152 	bfi	r1, r2, #9, #10
 8006156:	f363 41de 	bfi	r1, r3, #19, #12
 800615a:	f363 71df 	bfi	r1, r3, #31, #1
 800615e:	aa1b      	add	r2, sp, #108	; 0x6c
 8006160:	484d      	ldr	r0, [pc, #308]	; (8006298 <pwm_stm32_pin_set+0x27c>)
 8006162:	f00b fadf 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006166:	f06f 0015 	mvn.w	r0, #21
 800616a:	e081      	b.n	8006270 <pwm_stm32_pin_set+0x254>
  CLEAR_BIT(TIMx->CCER, Channels);
 800616c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006170:	ea23 0707 	bic.w	r7, r3, r7
 8006174:	f8c8 7020 	str.w	r7, [r8, #32]
		return 0;
 8006178:	2000      	movs	r0, #0
 800617a:	e079      	b.n	8006270 <pwm_stm32_pin_set+0x254>
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
 800617c:	4650      	mov	r0, sl
 800617e:	f00c f809 	bl	8012194 <get_polarity>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006182:	2f01      	cmp	r7, #1
 8006184:	d015      	beq.n	80061b2 <pwm_stm32_pin_set+0x196>
 8006186:	2f04      	cmp	r7, #4
 8006188:	d02b      	beq.n	80061e2 <pwm_stm32_pin_set+0x1c6>
 800618a:	2f10      	cmp	r7, #16
 800618c:	d02b      	beq.n	80061e6 <pwm_stm32_pin_set+0x1ca>
 800618e:	2f40      	cmp	r7, #64	; 0x40
 8006190:	d02b      	beq.n	80061ea <pwm_stm32_pin_set+0x1ce>
 8006192:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8006196:	d02a      	beq.n	80061ee <pwm_stm32_pin_set+0x1d2>
 8006198:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800619c:	d029      	beq.n	80061f2 <pwm_stm32_pin_set+0x1d6>
 800619e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80061a2:	d028      	beq.n	80061f6 <pwm_stm32_pin_set+0x1da>
 80061a4:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80061a8:	d001      	beq.n	80061ae <pwm_stm32_pin_set+0x192>
 80061aa:	2108      	movs	r1, #8
 80061ac:	e002      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061ae:	2107      	movs	r1, #7
 80061b0:	e000      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061b2:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80061b4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80061b8:	4a39      	ldr	r2, [pc, #228]	; (80062a0 <pwm_stm32_pin_set+0x284>)
 80061ba:	5c51      	ldrb	r1, [r2, r1]
 80061bc:	2202      	movs	r2, #2
 80061be:	408a      	lsls	r2, r1
 80061c0:	ea23 0302 	bic.w	r3, r3, r2
 80061c4:	4088      	lsls	r0, r1
 80061c6:	4303      	orrs	r3, r0
 80061c8:	f8c8 3020 	str.w	r3, [r8, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <pwm_stm32_pin_set+0x288>)
 80061ce:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80061d2:	4629      	mov	r1, r5
 80061d4:	6830      	ldr	r0, [r6, #0]
 80061d6:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80061dc:	62dc      	str	r4, [r3, #44]	; 0x2c
	}

	return 0;
 80061de:	2000      	movs	r0, #0
}
 80061e0:	e046      	b.n	8006270 <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80061e2:	2101      	movs	r1, #1
 80061e4:	e7e6      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061e6:	2102      	movs	r1, #2
 80061e8:	e7e4      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061ea:	2103      	movs	r1, #3
 80061ec:	e7e2      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061ee:	2104      	movs	r1, #4
 80061f0:	e7e0      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061f2:	2105      	movs	r1, #5
 80061f4:	e7de      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
 80061f6:	2106      	movs	r1, #6
 80061f8:	e7dc      	b.n	80061b4 <pwm_stm32_pin_set+0x198>
			LOG_ERR("Could not initialize timer channel output");
 80061fa:	2201      	movs	r2, #1
 80061fc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006200:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <pwm_stm32_pin_set+0x28c>)
 8006202:	9316      	str	r3, [sp, #88]	; 0x58
 8006204:	2300      	movs	r3, #0
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	2102      	movs	r1, #2
 800620a:	f88d 1004 	strb.w	r1, [sp, #4]
 800620e:	9901      	ldr	r1, [sp, #4]
 8006210:	9115      	str	r1, [sp, #84]	; 0x54
 8006212:	4619      	mov	r1, r3
 8006214:	f363 0100 	bfi	r1, r3, #0, #1
 8006218:	f363 0141 	bfi	r1, r3, #1, #1
 800621c:	f363 0182 	bfi	r1, r3, #2, #1
 8006220:	f363 01c5 	bfi	r1, r3, #3, #3
 8006224:	f362 1188 	bfi	r1, r2, #6, #3
 8006228:	2208      	movs	r2, #8
 800622a:	f362 2152 	bfi	r1, r2, #9, #10
 800622e:	f363 41de 	bfi	r1, r3, #19, #12
 8006232:	f363 71df 	bfi	r1, r3, #31, #1
 8006236:	aa15      	add	r2, sp, #84	; 0x54
 8006238:	4817      	ldr	r0, [pc, #92]	; (8006298 <pwm_stm32_pin_set+0x27c>)
 800623a:	f00b fa73 	bl	8011724 <z_impl_z_log_msg2_static_create>
			return -EIO;
 800623e:	f06f 0004 	mvn.w	r0, #4
 8006242:	e015      	b.n	8006270 <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006244:	2107      	movs	r1, #7
 8006246:	e000      	b.n	800624a <pwm_stm32_pin_set+0x22e>
 8006248:	2101      	movs	r1, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800624a:	3318      	adds	r3, #24
 800624c:	4a17      	ldr	r2, [pc, #92]	; (80062ac <pwm_stm32_pin_set+0x290>)
 800624e:	5c50      	ldrb	r0, [r2, r1]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006250:	581a      	ldr	r2, [r3, r0]
 8006252:	4d17      	ldr	r5, [pc, #92]	; (80062b0 <pwm_stm32_pin_set+0x294>)
 8006254:	5c6d      	ldrb	r5, [r5, r1]
 8006256:	2108      	movs	r1, #8
 8006258:	40a9      	lsls	r1, r5
 800625a:	430a      	orrs	r2, r1
 800625c:	501a      	str	r2, [r3, r0]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8006262:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8006264:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006266:	6953      	ldr	r3, [r2, #20]
 8006268:	f043 0301 	orr.w	r3, r3, #1
 800626c:	6153      	str	r3, [r2, #20]
	return 0;
 800626e:	2000      	movs	r0, #0
}
 8006270:	b024      	add	sp, #144	; 0x90
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006276:	2102      	movs	r1, #2
 8006278:	e7e7      	b.n	800624a <pwm_stm32_pin_set+0x22e>
 800627a:	2103      	movs	r1, #3
 800627c:	e7e5      	b.n	800624a <pwm_stm32_pin_set+0x22e>
 800627e:	2104      	movs	r1, #4
 8006280:	e7e3      	b.n	800624a <pwm_stm32_pin_set+0x22e>
 8006282:	2105      	movs	r1, #5
 8006284:	e7e1      	b.n	800624a <pwm_stm32_pin_set+0x22e>
 8006286:	2106      	movs	r1, #6
 8006288:	e7df      	b.n	800624a <pwm_stm32_pin_set+0x22e>
		return -ENOTSUP;
 800628a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800628e:	e7ef      	b.n	8006270 <pwm_stm32_pin_set+0x254>
 8006290:	08015f10 	.word	0x08015f10
 8006294:	08015dc4 	.word	0x08015dc4
 8006298:	08015060 	.word	0x08015060
 800629c:	08015ddc 	.word	0x08015ddc
 80062a0:	08015ed8 	.word	0x08015ed8
 80062a4:	08015f44 	.word	0x08015f44
 80062a8:	08015e0c 	.word	0x08015e0c
 80062ac:	08015ecc 	.word	0x08015ecc
 80062b0:	08015ee4 	.word	0x08015ee4

080062b4 <get_tim_clk>:
{
 80062b4:	b530      	push	{r4, r5, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	480c      	ldr	r0, [pc, #48]	; (80062f0 <get_tim_clk+0x3c>)
 80062be:	f00d fbad 	bl	8013a1c <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 80062c2:	b170      	cbz	r0, 80062e2 <get_tim_clk+0x2e>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <get_tim_clk+0x3c>)
 80062c6:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	b16b      	cbz	r3, 80062e8 <get_tim_clk+0x34>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80062cc:	aa01      	add	r2, sp, #4
 80062ce:	4621      	mov	r1, r4
 80062d0:	4807      	ldr	r0, [pc, #28]	; (80062f0 <get_tim_clk+0x3c>)
 80062d2:	4798      	blx	r3
	if (r < 0) {
 80062d4:	2800      	cmp	r0, #0
 80062d6:	db02      	blt.n	80062de <get_tim_clk+0x2a>
		*tim_clk = bus_clk;
 80062d8:	9b01      	ldr	r3, [sp, #4]
 80062da:	602b      	str	r3, [r5, #0]
	return 0;
 80062dc:	2000      	movs	r0, #0
}
 80062de:	b003      	add	sp, #12
 80062e0:	bd30      	pop	{r4, r5, pc}
		return -ENODEV;
 80062e2:	f06f 0012 	mvn.w	r0, #18
 80062e6:	e7f5      	b.n	80062d4 <get_tim_clk+0x20>
		return -ENOSYS;
 80062e8:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80062ec:	e7f2      	b.n	80062d4 <get_tim_clk+0x20>
 80062ee:	bf00      	nop
 80062f0:	08014bb4 	.word	0x08014bb4

080062f4 <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 80062f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f6:	b0a7      	sub	sp, #156	; 0x9c
	struct pwm_stm32_data *data = dev->data;
 80062f8:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80062fa:	6845      	ldr	r5, [r0, #4]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80062fc:	f105 0608 	add.w	r6, r5, #8
 8006300:	4870      	ldr	r0, [pc, #448]	; (80064c4 <pwm_stm32_init+0x1d0>)
 8006302:	f00d fb8b 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006306:	2800      	cmp	r0, #0
 8006308:	d047      	beq.n	800639a <pwm_stm32_init+0xa6>
	const struct clock_control_driver_api *api =
 800630a:	486e      	ldr	r0, [pc, #440]	; (80064c4 <pwm_stm32_init+0x1d0>)
 800630c:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4631      	mov	r1, r6
 8006312:	4798      	blx	r3
 8006314:	4604      	mov	r4, r0
	if (r < 0) {
 8006316:	2c00      	cmp	r4, #0
 8006318:	db42      	blt.n	80063a0 <pwm_stm32_init+0xac>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
 800631a:	4639      	mov	r1, r7
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ffc9 	bl	80062b4 <get_tim_clk>
	if (r < 0) {
 8006322:	1e04      	subs	r4, r0, #0
 8006324:	db60      	blt.n	80063e8 <pwm_stm32_init+0xf4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8006326:	aa01      	add	r2, sp, #4
 8006328:	2100      	movs	r1, #0
 800632a:	6928      	ldr	r0, [r5, #16]
 800632c:	f00c fda8 	bl	8012e80 <pinctrl_lookup_state>
	if (ret < 0) {
 8006330:	1e04      	subs	r4, r0, #0
 8006332:	db06      	blt.n	8006342 <pwm_stm32_init+0x4e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8006334:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006336:	2200      	movs	r2, #0
 8006338:	7919      	ldrb	r1, [r3, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	f00c fdba 	bl	8012eb4 <pinctrl_configure_pins>
 8006340:	4604      	mov	r4, r0
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 8006342:	2c00      	cmp	r4, #0
 8006344:	db74      	blt.n	8006430 <pwm_stm32_init+0x13c>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 8006346:	a809      	add	r0, sp, #36	; 0x24
 8006348:	f00c fdeb 	bl	8012f22 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 800634c:	686b      	ldr	r3, [r5, #4]
 800634e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8006352:	2300      	movs	r3, #0
 8006354:	930a      	str	r3, [sp, #40]	; 0x28
	init.Autoreload = 0u;
 8006356:	930b      	str	r3, [sp, #44]	; 0x2c
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006358:	930c      	str	r3, [sp, #48]	; 0x30

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800635a:	a909      	add	r1, sp, #36	; 0x24
 800635c:	6828      	ldr	r0, [r5, #0]
 800635e:	f003 ff97 	bl	800a290 <LL_TIM_Init>
 8006362:	2800      	cmp	r0, #0
 8006364:	f040 8088 	bne.w	8006478 <pwm_stm32_init+0x184>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	4a57      	ldr	r2, [pc, #348]	; (80064c8 <pwm_stm32_init+0x1d4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <pwm_stm32_init+0x8c>
 8006370:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <pwm_stm32_init+0x8c>
 8006378:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <pwm_stm32_init+0x94>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
		LL_TIM_EnableAllOutputs(cfg->timer);
	}
#endif

	LL_TIM_EnableCounter(cfg->timer);
 8006388:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6013      	str	r3, [r2, #0]

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 8006392:	2400      	movs	r4, #0
}
 8006394:	4620      	mov	r0, r4
 8006396:	b027      	add	sp, #156	; 0x9c
 8006398:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 800639a:	f06f 0412 	mvn.w	r4, #18
 800639e:	e7ba      	b.n	8006316 <pwm_stm32_init+0x22>
		LOG_ERR("Could not initialize clock (%d)", r);
 80063a0:	2201      	movs	r2, #1
 80063a2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80063a6:	4b49      	ldr	r3, [pc, #292]	; (80064cc <pwm_stm32_init+0x1d8>)
 80063a8:	9324      	str	r3, [sp, #144]	; 0x90
 80063aa:	9425      	str	r4, [sp, #148]	; 0x94
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2103      	movs	r1, #3
 80063b2:	f88d 1000 	strb.w	r1, [sp]
 80063b6:	9900      	ldr	r1, [sp, #0]
 80063b8:	9123      	str	r1, [sp, #140]	; 0x8c
 80063ba:	4619      	mov	r1, r3
 80063bc:	f363 0100 	bfi	r1, r3, #0, #1
 80063c0:	f363 0141 	bfi	r1, r3, #1, #1
 80063c4:	f363 0182 	bfi	r1, r3, #2, #1
 80063c8:	f363 01c5 	bfi	r1, r3, #3, #3
 80063cc:	f362 1188 	bfi	r1, r2, #6, #3
 80063d0:	220c      	movs	r2, #12
 80063d2:	f362 2152 	bfi	r1, r2, #9, #10
 80063d6:	f363 41de 	bfi	r1, r3, #19, #12
 80063da:	f363 71df 	bfi	r1, r3, #31, #1
 80063de:	aa23      	add	r2, sp, #140	; 0x8c
 80063e0:	483b      	ldr	r0, [pc, #236]	; (80064d0 <pwm_stm32_init+0x1dc>)
 80063e2:	f00b f99f 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return r;
 80063e6:	e7d5      	b.n	8006394 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not obtain timer clock (%d)", r);
 80063e8:	2201      	movs	r2, #1
 80063ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 80063ee:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <pwm_stm32_init+0x1e0>)
 80063f0:	931e      	str	r3, [sp, #120]	; 0x78
 80063f2:	941f      	str	r4, [sp, #124]	; 0x7c
 80063f4:	2300      	movs	r3, #0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2103      	movs	r1, #3
 80063fa:	f88d 1000 	strb.w	r1, [sp]
 80063fe:	9900      	ldr	r1, [sp, #0]
 8006400:	911d      	str	r1, [sp, #116]	; 0x74
 8006402:	4619      	mov	r1, r3
 8006404:	f363 0100 	bfi	r1, r3, #0, #1
 8006408:	f363 0141 	bfi	r1, r3, #1, #1
 800640c:	f363 0182 	bfi	r1, r3, #2, #1
 8006410:	f363 01c5 	bfi	r1, r3, #3, #3
 8006414:	f362 1188 	bfi	r1, r2, #6, #3
 8006418:	220c      	movs	r2, #12
 800641a:	f362 2152 	bfi	r1, r2, #9, #10
 800641e:	f363 41de 	bfi	r1, r3, #19, #12
 8006422:	f363 71df 	bfi	r1, r3, #31, #1
 8006426:	aa1d      	add	r2, sp, #116	; 0x74
 8006428:	4829      	ldr	r0, [pc, #164]	; (80064d0 <pwm_stm32_init+0x1dc>)
 800642a:	f00b f97b 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return r;
 800642e:	e7b1      	b.n	8006394 <pwm_stm32_init+0xa0>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 8006430:	2201      	movs	r2, #1
 8006432:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006436:	4b28      	ldr	r3, [pc, #160]	; (80064d8 <pwm_stm32_init+0x1e4>)
 8006438:	9318      	str	r3, [sp, #96]	; 0x60
 800643a:	9419      	str	r4, [sp, #100]	; 0x64
 800643c:	2300      	movs	r3, #0
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2103      	movs	r1, #3
 8006442:	f88d 1000 	strb.w	r1, [sp]
 8006446:	9900      	ldr	r1, [sp, #0]
 8006448:	9117      	str	r1, [sp, #92]	; 0x5c
 800644a:	4619      	mov	r1, r3
 800644c:	f363 0100 	bfi	r1, r3, #0, #1
 8006450:	f363 0141 	bfi	r1, r3, #1, #1
 8006454:	f363 0182 	bfi	r1, r3, #2, #1
 8006458:	f363 01c5 	bfi	r1, r3, #3, #3
 800645c:	f362 1188 	bfi	r1, r2, #6, #3
 8006460:	220c      	movs	r2, #12
 8006462:	f362 2152 	bfi	r1, r2, #9, #10
 8006466:	f363 41de 	bfi	r1, r3, #19, #12
 800646a:	f363 71df 	bfi	r1, r3, #31, #1
 800646e:	aa17      	add	r2, sp, #92	; 0x5c
 8006470:	4817      	ldr	r0, [pc, #92]	; (80064d0 <pwm_stm32_init+0x1dc>)
 8006472:	f00b f957 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return r;
 8006476:	e78d      	b.n	8006394 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not initialize timer");
 8006478:	2201      	movs	r2, #1
 800647a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <pwm_stm32_init+0x1e8>)
 8006480:	9312      	str	r3, [sp, #72]	; 0x48
 8006482:	2300      	movs	r3, #0
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	2102      	movs	r1, #2
 8006488:	f88d 1000 	strb.w	r1, [sp]
 800648c:	9900      	ldr	r1, [sp, #0]
 800648e:	9111      	str	r1, [sp, #68]	; 0x44
 8006490:	4619      	mov	r1, r3
 8006492:	f363 0100 	bfi	r1, r3, #0, #1
 8006496:	f363 0141 	bfi	r1, r3, #1, #1
 800649a:	f363 0182 	bfi	r1, r3, #2, #1
 800649e:	f363 01c5 	bfi	r1, r3, #3, #3
 80064a2:	f362 1188 	bfi	r1, r2, #6, #3
 80064a6:	2208      	movs	r2, #8
 80064a8:	f362 2152 	bfi	r1, r2, #9, #10
 80064ac:	f363 41de 	bfi	r1, r3, #19, #12
 80064b0:	f363 71df 	bfi	r1, r3, #31, #1
 80064b4:	aa11      	add	r2, sp, #68	; 0x44
 80064b6:	4806      	ldr	r0, [pc, #24]	; (80064d0 <pwm_stm32_init+0x1dc>)
 80064b8:	f00b f934 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 80064bc:	f06f 0404 	mvn.w	r4, #4
 80064c0:	e768      	b.n	8006394 <pwm_stm32_init+0xa0>
 80064c2:	bf00      	nop
 80064c4:	08014bb4 	.word	0x08014bb4
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	08015e38 	.word	0x08015e38
 80064d0:	08015060 	.word	0x08015060
 80064d4:	08015e58 	.word	0x08015e58
 80064d8:	08015e7c 	.word	0x08015e7c
 80064dc:	08015e9c 	.word	0x08015e9c

080064e0 <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80064e0:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 80064e2:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 80064e6:	d101      	bne.n	80064ec <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 80064e8:	2000      	movs	r0, #0
}
 80064ea:	4770      	bx	lr
{
 80064ec:	b510      	push	{r4, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 80064f2:	9303      	str	r3, [sp, #12]
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <spi_stm32_get_err+0x48>)
 80064f6:	9302      	str	r3, [sp, #8]
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <spi_stm32_get_err+0x4c>)
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	2000      	movs	r0, #0
 80064fe:	9000      	str	r0, [sp, #0]
 8006500:	4603      	mov	r3, r0
 8006502:	2201      	movs	r2, #1
 8006504:	490a      	ldr	r1, [pc, #40]	; (8006530 <spi_stm32_get_err+0x50>)
 8006506:	f00b fe61 	bl	80121cc <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006510:	d005      	beq.n	800651e <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006516:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 800651c:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 800651e:	f06f 0004 	mvn.w	r0, #4
}
 8006522:	b006      	add	sp, #24
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	080160cc 	.word	0x080160cc
 800652c:	08015f5c 	.word	0x08015f5c
 8006530:	08015070 	.word	0x08015070

08006534 <dma_callback>:
{
 8006534:	b510      	push	{r4, lr}
 8006536:	b096      	sub	sp, #88	; 0x58
 8006538:	460c      	mov	r4, r1
	if (status != 0) {
 800653a:	b963      	cbnz	r3, 8006556 <dma_callback+0x22>
		if (channel == data->dma_tx.channel) {
 800653c:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8006540:	4293      	cmp	r3, r2
 8006542:	d035      	beq.n	80065b0 <dma_callback+0x7c>
		} else if (channel == data->dma_rx.channel) {
 8006544:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8006548:	4293      	cmp	r3, r2
 800654a:	d136      	bne.n	80065ba <dma_callback+0x86>
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 800654c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800654e:	f043 0302 	orr.w	r3, r3, #2
 8006552:	67cb      	str	r3, [r1, #124]	; 0x7c
 8006554:	e026      	b.n	80065a4 <dma_callback+0x70>
		LOG_ERR("DMA callback error with channel %d.", channel);
 8006556:	2001      	movs	r0, #1
 8006558:	f8ad 0008 	strh.w	r0, [sp, #8]
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <dma_callback+0xd8>)
 800655e:	9314      	str	r3, [sp, #80]	; 0x50
 8006560:	9215      	str	r2, [sp, #84]	; 0x54
 8006562:	2300      	movs	r3, #0
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	2203      	movs	r2, #3
 8006568:	f88d 2004 	strb.w	r2, [sp, #4]
 800656c:	9a01      	ldr	r2, [sp, #4]
 800656e:	9213      	str	r2, [sp, #76]	; 0x4c
 8006570:	4619      	mov	r1, r3
 8006572:	f363 0100 	bfi	r1, r3, #0, #1
 8006576:	f363 0141 	bfi	r1, r3, #1, #1
 800657a:	f363 0182 	bfi	r1, r3, #2, #1
 800657e:	f363 01c5 	bfi	r1, r3, #3, #3
 8006582:	f360 1188 	bfi	r1, r0, #6, #3
 8006586:	220c      	movs	r2, #12
 8006588:	f362 2152 	bfi	r1, r2, #9, #10
 800658c:	f363 41de 	bfi	r1, r3, #19, #12
 8006590:	f363 71df 	bfi	r1, r3, #31, #1
 8006594:	aa13      	add	r2, sp, #76	; 0x4c
 8006596:	481e      	ldr	r0, [pc, #120]	; (8006610 <dma_callback+0xdc>)
 8006598:	f00b f8c4 	bl	8011724 <z_impl_z_log_msg2_static_create>
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 800659c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	67e3      	str	r3, [r4, #124]	; 0x7c
	k_sem_give(&data->status_sem);
 80065a4:	f104 0064 	add.w	r0, r4, #100	; 0x64
	z_impl_k_sem_give(sem);
 80065a8:	f007 fdc4 	bl	800e134 <z_impl_k_sem_give>
}
 80065ac:	b016      	add	sp, #88	; 0x58
 80065ae:	bd10      	pop	{r4, pc}
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 80065b0:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 80065b2:	f043 0304 	orr.w	r3, r3, #4
 80065b6:	67cb      	str	r3, [r1, #124]	; 0x7c
 80065b8:	e7f4      	b.n	80065a4 <dma_callback+0x70>
			LOG_ERR("DMA callback channel %d is not valid.",
 80065ba:	2001      	movs	r0, #1
 80065bc:	f8ad 0008 	strh.w	r0, [sp, #8]
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <dma_callback+0xe0>)
 80065c2:	930e      	str	r3, [sp, #56]	; 0x38
 80065c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80065c6:	2300      	movs	r3, #0
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2203      	movs	r2, #3
 80065cc:	f88d 2004 	strb.w	r2, [sp, #4]
 80065d0:	9a01      	ldr	r2, [sp, #4]
 80065d2:	920d      	str	r2, [sp, #52]	; 0x34
 80065d4:	4619      	mov	r1, r3
 80065d6:	f363 0100 	bfi	r1, r3, #0, #1
 80065da:	f363 0141 	bfi	r1, r3, #1, #1
 80065de:	f363 0182 	bfi	r1, r3, #2, #1
 80065e2:	f363 01c5 	bfi	r1, r3, #3, #3
 80065e6:	f360 1188 	bfi	r1, r0, #6, #3
 80065ea:	220c      	movs	r2, #12
 80065ec:	f362 2152 	bfi	r1, r2, #9, #10
 80065f0:	f363 41de 	bfi	r1, r3, #19, #12
 80065f4:	f363 71df 	bfi	r1, r3, #31, #1
 80065f8:	aa0d      	add	r2, sp, #52	; 0x34
 80065fa:	4805      	ldr	r0, [pc, #20]	; (8006610 <dma_callback+0xdc>)
 80065fc:	f00b f892 	bl	8011724 <z_impl_z_log_msg2_static_create>
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8006600:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006608:	e7cc      	b.n	80065a4 <dma_callback+0x70>
 800660a:	bf00      	nop
 800660c:	08015f68 	.word	0x08015f68
 8006610:	08015070 	.word	0x08015070
 8006614:	08015f8c 	.word	0x08015f8c

08006618 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	b098      	sub	sp, #96	; 0x60
 800661e:	af00      	add	r7, sp, #0
 8006620:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 8006622:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006626:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8006628:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800662c:	f8df c25c 	ldr.w	ip, [pc, #604]	; 800688c <spi_stm32_configure+0x274>
 8006630:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006636:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800663a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 800663e:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8006642:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8006644:	42ab      	cmp	r3, r5
 8006646:	f000 811b 	beq.w	8006880 <spi_stm32_configure+0x268>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800664a:	88ab      	ldrh	r3, [r5, #4]
 800664c:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8006650:	2a08      	cmp	r2, #8
 8006652:	d002      	beq.n	800665a <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8006654:	2a10      	cmp	r2, #16
 8006656:	f040 8115 	bne.w	8006884 <spi_stm32_configure+0x26c>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 800665a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800665e:	d11c      	bne.n	800669a <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	f023 0310 	bic.w	r3, r3, #16
 8006666:	6063      	str	r3, [r4, #4]
 8006668:	4889      	ldr	r0, [pc, #548]	; (8006890 <spi_stm32_configure+0x278>)
 800666a:	f00d f9d7 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800666e:	b1c8      	cbz	r0, 80066a4 <spi_stm32_configure+0x8c>
	const struct clock_control_driver_api *api =
 8006670:	4b87      	ldr	r3, [pc, #540]	; (8006890 <spi_stm32_configure+0x278>)
 8006672:	689b      	ldr	r3, [r3, #8]
	if (api->get_rate == NULL) {
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	b1c3      	cbz	r3, 80066aa <spi_stm32_configure+0x92>
	return api->get_rate(dev, sys, rate);
 8006678:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800667c:	4641      	mov	r1, r8
 800667e:	4884      	ldr	r0, [pc, #528]	; (8006890 <spi_stm32_configure+0x278>)
 8006680:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006682:	2800      	cmp	r0, #0
 8006684:	db14      	blt.n	80066b0 <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006686:	2301      	movs	r3, #1
 8006688:	2b08      	cmp	r3, #8
 800668a:	dc35      	bgt.n	80066f8 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8006690:	6829      	ldr	r1, [r5, #0]
 8006692:	4291      	cmp	r1, r2
 8006694:	d230      	bcs.n	80066f8 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006696:	3301      	adds	r3, #1
 8006698:	e7f6      	b.n	8006688 <spi_stm32_configure+0x70>
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	f043 0310 	orr.w	r3, r3, #16
 80066a0:	6063      	str	r3, [r4, #4]
}
 80066a2:	e7e1      	b.n	8006668 <spi_stm32_configure+0x50>
		return -ENODEV;
 80066a4:	f06f 0012 	mvn.w	r0, #18
 80066a8:	e7eb      	b.n	8006682 <spi_stm32_configure+0x6a>
		return -ENOSYS;
 80066aa:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80066ae:	e7e8      	b.n	8006682 <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 80066b0:	2201      	movs	r2, #1
 80066b2:	80ba      	strh	r2, [r7, #4]
 80066b4:	4b77      	ldr	r3, [pc, #476]	; (8006894 <spi_stm32_configure+0x27c>)
 80066b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b8:	2300      	movs	r3, #0
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	2102      	movs	r1, #2
 80066be:	7039      	strb	r1, [r7, #0]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6579      	str	r1, [r7, #84]	; 0x54
 80066c4:	4619      	mov	r1, r3
 80066c6:	f363 0100 	bfi	r1, r3, #0, #1
 80066ca:	f363 0141 	bfi	r1, r3, #1, #1
 80066ce:	f363 0182 	bfi	r1, r3, #2, #1
 80066d2:	f363 01c5 	bfi	r1, r3, #3, #3
 80066d6:	f362 1188 	bfi	r1, r2, #6, #3
 80066da:	2208      	movs	r2, #8
 80066dc:	f362 2152 	bfi	r1, r2, #9, #10
 80066e0:	f363 41de 	bfi	r1, r3, #19, #12
 80066e4:	f363 71df 	bfi	r1, r3, #31, #1
 80066e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80066ec:	486a      	ldr	r0, [pc, #424]	; (8006898 <spi_stm32_configure+0x280>)
 80066ee:	f00b f819 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 80066f2:	f06f 0004 	mvn.w	r0, #4
 80066f6:	e053      	b.n	80067a0 <spi_stm32_configure+0x188>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	dc55      	bgt.n	80067a8 <spi_stm32_configure+0x190>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006702:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8006704:	3b01      	subs	r3, #1
 8006706:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800670a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800670e:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006718:	4313      	orrs	r3, r2
 800671a:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800671c:	88ab      	ldrh	r3, [r5, #4]
 800671e:	f013 0f02 	tst.w	r3, #2
 8006722:	f000 8092 	beq.w	800684a <spi_stm32_configure+0x232>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800672e:	88ab      	ldrh	r3, [r5, #4]
 8006730:	f013 0f04 	tst.w	r3, #4
 8006734:	f000 808e 	beq.w	8006854 <spi_stm32_configure+0x23c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8006746:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8006748:	88ab      	ldrh	r3, [r5, #4]
 800674a:	f013 0f10 	tst.w	r3, #16
 800674e:	f000 8086 	beq.w	800685e <spi_stm32_configure+0x246>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006758:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006760:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006768:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	f023 0304 	bic.w	r3, r3, #4
 8006770:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006772:	88ab      	ldrh	r3, [r5, #4]
 8006774:	f013 0f01 	tst.w	r3, #1
 8006778:	d076      	beq.n	8006868 <spi_stm32_configure+0x250>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8006780:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006782:	88ab      	ldrh	r3, [r5, #4]
 8006784:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006788:	2b08      	cmp	r3, #8
 800678a:	d072      	beq.n	8006872 <spi_stm32_configure+0x25a>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8006792:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800679a:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 800679c:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 800679e:	2000      	movs	r0, #0
}
 80067a0:	3760      	adds	r7, #96	; 0x60
 80067a2:	46bd      	mov	sp, r7
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80067a8:	2301      	movs	r3, #1
 80067aa:	80bb      	strh	r3, [r7, #4]
 80067ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ae:	fa20 f603 	lsr.w	r6, r0, r3
 80067b2:	0a00      	lsrs	r0, r0, #8
 80067b4:	466c      	mov	r4, sp
 80067b6:	b088      	sub	sp, #32
 80067b8:	466b      	mov	r3, sp
 80067ba:	f113 020c 	adds.w	r2, r3, #12
 80067be:	d03e      	beq.n	800683e <spi_stm32_configure+0x226>
 80067c0:	2114      	movs	r1, #20
 80067c2:	f04f 0c01 	mov.w	ip, #1
 80067c6:	f8a7 c004 	strh.w	ip, [r7, #4]
 80067ca:	b12a      	cbz	r2, 80067d8 <spi_stm32_configure+0x1c0>
 80067cc:	2904      	cmp	r1, #4
 80067ce:	dd03      	ble.n	80067d8 <spi_stm32_configure+0x1c0>
 80067d0:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800689c <spi_stm32_configure+0x284>
 80067d4:	f8c3 c010 	str.w	ip, [r3, #16]
 80067d8:	682d      	ldr	r5, [r5, #0]
 80067da:	b112      	cbz	r2, 80067e2 <spi_stm32_configure+0x1ca>
 80067dc:	2908      	cmp	r1, #8
 80067de:	dd00      	ble.n	80067e2 <spi_stm32_configure+0x1ca>
 80067e0:	615d      	str	r5, [r3, #20]
 80067e2:	b112      	cbz	r2, 80067ea <spi_stm32_configure+0x1d2>
 80067e4:	290c      	cmp	r1, #12
 80067e6:	dd00      	ble.n	80067ea <spi_stm32_configure+0x1d2>
 80067e8:	619e      	str	r6, [r3, #24]
 80067ea:	b112      	cbz	r2, 80067f2 <spi_stm32_configure+0x1da>
 80067ec:	2910      	cmp	r1, #16
 80067ee:	dd00      	ble.n	80067f2 <spi_stm32_configure+0x1da>
 80067f0:	61d8      	str	r0, [r3, #28]
 80067f2:	2913      	cmp	r1, #19
 80067f4:	dd26      	ble.n	8006844 <spi_stm32_configure+0x22c>
 80067f6:	2014      	movs	r0, #20
 80067f8:	b12a      	cbz	r2, 8006806 <spi_stm32_configure+0x1ee>
 80067fa:	2100      	movs	r1, #0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	2105      	movs	r1, #5
 8006800:	7039      	strb	r1, [r7, #0]
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	60d9      	str	r1, [r3, #12]
 8006806:	2100      	movs	r1, #0
 8006808:	f36f 0100 	bfc	r1, #0, #1
 800680c:	f36f 0141 	bfc	r1, #1, #1
 8006810:	f36f 0182 	bfc	r1, #2, #1
 8006814:	f36f 01c5 	bfc	r1, #3, #3
 8006818:	2301      	movs	r3, #1
 800681a:	f363 1188 	bfi	r1, r3, #6, #3
 800681e:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 8006822:	f360 2152 	bfi	r1, r0, #9, #10
 8006826:	f36f 41de 	bfc	r1, #19, #12
 800682a:	f36f 71df 	bfc	r1, #31, #1
 800682e:	2300      	movs	r3, #0
 8006830:	4819      	ldr	r0, [pc, #100]	; (8006898 <spi_stm32_configure+0x280>)
 8006832:	f00a ff77 	bl	8011724 <z_impl_z_log_msg2_static_create>
 8006836:	46a5      	mov	sp, r4
		return -EINVAL;
 8006838:	f06f 0015 	mvn.w	r0, #21
 800683c:	e7b0      	b.n	80067a0 <spi_stm32_configure+0x188>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800683e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006842:	e7be      	b.n	80067c2 <spi_stm32_configure+0x1aa>
 8006844:	f06f 001b 	mvn.w	r0, #27
 8006848:	e7d6      	b.n	80067f8 <spi_stm32_configure+0x1e0>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f023 0302 	bic.w	r3, r3, #2
 8006850:	6023      	str	r3, [r4, #0]
}
 8006852:	e76c      	b.n	800672e <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6023      	str	r3, [r4, #0]
}
 800685c:	e770      	b.n	8006740 <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006864:	6023      	str	r3, [r4, #0]
}
 8006866:	e778      	b.n	800675a <spi_stm32_configure+0x142>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800686e:	6023      	str	r3, [r4, #0]
}
 8006870:	e787      	b.n	8006782 <spi_stm32_configure+0x16a>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006878:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800687c:	6063      	str	r3, [r4, #4]
}
 800687e:	e789      	b.n	8006794 <spi_stm32_configure+0x17c>
		return 0;
 8006880:	2000      	movs	r0, #0
 8006882:	e78d      	b.n	80067a0 <spi_stm32_configure+0x188>
		return -ENOTSUP;
 8006884:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006888:	e78a      	b.n	80067a0 <spi_stm32_configure+0x188>
 800688a:	bf00      	nop
 800688c:	08015188 	.word	0x08015188
 8006890:	08014bb4 	.word	0x08014bb4
 8006894:	08015fb4 	.word	0x08015fb4
 8006898:	08015070 	.word	0x08015070
 800689c:	08015fd8 	.word	0x08015fd8

080068a0 <spi_stm32_dma_rx_load>:
{
 80068a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a4:	460d      	mov	r5, r1
 80068a6:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 80068a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 80068ac:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 80068ae:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80068b2:	2220      	movs	r2, #32
 80068b4:	2100      	movs	r1, #0
 80068b6:	4638      	mov	r0, r7
 80068b8:	f00d fde2 	bl	8014480 <memset>
	blk_cfg->block_size = len;
 80068bc:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
	if (buf == NULL) {
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	d038      	beq.n	8006936 <spi_stm32_dma_rx_load+0x96>
		blk_cfg->dest_address = (uint32_t)buf;
 80068c4:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 80068c8:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03d      	beq.n	800694c <spi_stm32_dma_rx_load+0xac>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80068d0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 80068d4:	f36f 1305 	bfc	r3, #4, #2
 80068d8:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 80068dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
 80068e0:	330c      	adds	r3, #12
 80068e2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 80068e6:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80068ea:	b3bb      	cbz	r3, 800695c <spi_stm32_dma_rx_load+0xbc>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80068ec:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 80068f0:	f36f 0383 	bfc	r3, #2, #2
 80068f4:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 80068f8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80068fc:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8006900:	f362 0303 	bfi	r3, r2, #0, #4
 8006904:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	stream->dma_cfg.head_block = blk_cfg;
 8006908:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
	stream->dma_cfg.user_data = data;
 800690c:	f8c4 409c 	str.w	r4, [r4, #156]	; 0x9c
	ret = dma_config(data->dma_rx.dma_dev, data->dma_rx.channel,
 8006910:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 * @retval Negative errno code if failure.
 */
static inline int dma_config(const struct device *dev, uint32_t channel,
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
 8006914:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f104 0288 	add.w	r2, r4, #136	; 0x88
 800691c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006920:	4798      	blx	r3
	if (ret != 0) {
 8006922:	b930      	cbnz	r0, 8006932 <spi_stm32_dma_rx_load+0x92>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 8006924:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006928:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 */
__syscall int dma_start(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 800692c:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	4798      	blx	r3
}
 8006932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <spi_stm32_dma_rx_load+0xcc>)
 8006938:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800693c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8006940:	2202      	movs	r2, #2
 8006942:	f362 1305 	bfi	r3, r2, #4, #2
 8006946:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800694a:	e7c7      	b.n	80068dc <spi_stm32_dma_rx_load+0x3c>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800694c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8006950:	2202      	movs	r2, #2
 8006952:	f362 1305 	bfi	r3, r2, #4, #2
 8006956:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800695a:	e7bf      	b.n	80068dc <spi_stm32_dma_rx_load+0x3c>
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800695c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8006960:	2202      	movs	r2, #2
 8006962:	f362 0383 	bfi	r3, r2, #2, #2
 8006966:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800696a:	e7c5      	b.n	80068f8 <spi_stm32_dma_rx_load+0x58>
 800696c:	20001474 	.word	0x20001474

08006970 <spi_stm32_dma_tx_load>:
{
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	460d      	mov	r5, r1
 8006976:	4616      	mov	r6, r2
	const struct spi_stm32_config *cfg = dev->config;
 8006978:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800697c:	6904      	ldr	r4, [r0, #16]
	blk_cfg = &stream->dma_blk_cfg;
 800697e:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
 8006982:	2220      	movs	r2, #32
 8006984:	2100      	movs	r1, #0
 8006986:	4638      	mov	r0, r7
 8006988:	f00d fd7a 	bl	8014480 <memset>
	blk_cfg->block_size = len;
 800698c:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
	if (buf == NULL) {
 8006990:	2d00      	cmp	r5, #0
 8006992:	d039      	beq.n	8006a08 <spi_stm32_dma_tx_load+0x98>
		blk_cfg->source_address = (uint32_t)buf;
 8006994:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 8006998:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800699c:	2b00      	cmp	r3, #0
 800699e:	d040      	beq.n	8006a22 <spi_stm32_dma_tx_load+0xb2>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80069a0:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80069a4:	f36f 0383 	bfc	r3, #2, #2
 80069a8:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 80069ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069b0:	330c      	adds	r3, #12
 80069b2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	if (data->dma_tx.dst_addr_increment) {
 80069b6:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d039      	beq.n	8006a32 <spi_stm32_dma_tx_load+0xc2>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80069be:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 80069c2:	f36f 1305 	bfc	r3, #4, #2
 80069c6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 80069ca:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 80069ce:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 80069d2:	f362 0303 	bfi	r3, r2, #0, #4
 80069d6:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	stream->dma_cfg.head_block = blk_cfg;
 80069da:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
	stream->dma_cfg.user_data = data;
 80069de:	f8c4 40e8 	str.w	r4, [r4, #232]	; 0xe8
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 80069e2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	const struct dma_driver_api *api =
 80069e6:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, channel, config);
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 80069ee:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 80069f2:	4798      	blx	r3
	if (ret != 0) {
 80069f4:	b930      	cbnz	r0, 8006a04 <spi_stm32_dma_tx_load+0x94>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 80069f6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 80069fa:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
	const struct dma_driver_api *api =
 80069fe:	6883      	ldr	r3, [r0, #8]
	return api->start(dev, channel);
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	4798      	blx	r3
}
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dummy_rx_tx_buffer = 0;
 8006a08:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <spi_stm32_dma_tx_load+0xd4>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 8006a0e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8006a12:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8006a16:	2202      	movs	r2, #2
 8006a18:	f362 0383 	bfi	r3, r2, #2, #2
 8006a1c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8006a20:	e7c4      	b.n	80069ac <spi_stm32_dma_tx_load+0x3c>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8006a22:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8006a26:	2202      	movs	r2, #2
 8006a28:	f362 0383 	bfi	r3, r2, #2, #2
 8006a2c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8006a30:	e7bc      	b.n	80069ac <spi_stm32_dma_tx_load+0x3c>
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8006a32:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8006a36:	2202      	movs	r2, #2
 8006a38:	f362 1305 	bfi	r3, r2, #4, #2
 8006a3c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
 8006a40:	e7c3      	b.n	80069ca <spi_stm32_dma_tx_load+0x5a>
 8006a42:	bf00      	nop
 8006a44:	20001474 	.word	0x20001474

08006a48 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8006a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4c:	b09a      	sub	sp, #104	; 0x68
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8006a4e:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8006a50:	6844      	ldr	r4, [r0, #4]
 8006a52:	4886      	ldr	r0, [pc, #536]	; (8006c6c <spi_stm32_init+0x224>)
 8006a54:	f00c ffe2 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006a58:	b340      	cbz	r0, 8006aac <spi_stm32_init+0x64>
	const struct clock_control_driver_api *api =
 8006a5a:	4884      	ldr	r0, [pc, #528]	; (8006c6c <spi_stm32_init+0x224>)
 8006a5c:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4621      	mov	r1, r4
 8006a62:	4798      	blx	r3
 8006a64:	4680      	mov	r8, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	d122      	bne.n	8006ab2 <spi_stm32_init+0x6a>
	ret = pinctrl_lookup_state(config, id, &state);
 8006a6c:	aa06      	add	r2, sp, #24
 8006a6e:	2100      	movs	r1, #0
 8006a70:	68e0      	ldr	r0, [r4, #12]
 8006a72:	f00c fa05 	bl	8012e80 <pinctrl_lookup_state>
	if (ret < 0) {
 8006a76:	1e07      	subs	r7, r0, #0
 8006a78:	db06      	blt.n	8006a88 <spi_stm32_init+0x40>
	return pinctrl_apply_state_direct(config, state);
 8006a7a:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	7919      	ldrb	r1, [r3, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	f00c fa17 	bl	8012eb4 <pinctrl_configure_pins>
 8006a86:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8006a88:	2f00      	cmp	r7, #0
 8006a8a:	db37      	blt.n	8006afc <spi_stm32_init+0xb4>
#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
#endif

#ifdef CONFIG_SPI_STM32_DMA
	if ((data->dma_rx.dma_dev != NULL) &&
 8006a8c:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8006a90:	b118      	cbz	r0, 8006a9a <spi_stm32_init+0x52>
 8006a92:	f00c ffc3 	bl	8013a1c <z_device_is_ready>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d054      	beq.n	8006b44 <spi_stm32_init+0xfc>
				!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
		return -ENODEV;
	}

	if ((data->dma_tx.dma_dev != NULL) &&
 8006a9a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8006a9e:	b118      	cbz	r0, 8006aa8 <spi_stm32_init+0x60>
 8006aa0:	f00c ffbc 	bl	8013a1c <z_device_is_ready>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d05c      	beq.n	8006b62 <spi_stm32_init+0x11a>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006aa8:	68ac      	ldr	r4, [r5, #8]
 8006aaa:	e08a      	b.n	8006bc2 <spi_stm32_init+0x17a>
		return -ENODEV;
 8006aac:	f06f 0812 	mvn.w	r8, #18
 8006ab0:	e7d9      	b.n	8006a66 <spi_stm32_init+0x1e>
		LOG_ERR("Could not enable SPI clock");
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006ab8:	4b6d      	ldr	r3, [pc, #436]	; (8006c70 <spi_stm32_init+0x228>)
 8006aba:	9318      	str	r3, [sp, #96]	; 0x60
 8006abc:	2300      	movs	r3, #0
 8006abe:	9305      	str	r3, [sp, #20]
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	f88d 1014 	strb.w	r1, [sp, #20]
 8006ac6:	9905      	ldr	r1, [sp, #20]
 8006ac8:	9117      	str	r1, [sp, #92]	; 0x5c
 8006aca:	4619      	mov	r1, r3
 8006acc:	f363 0100 	bfi	r1, r3, #0, #1
 8006ad0:	f363 0141 	bfi	r1, r3, #1, #1
 8006ad4:	f363 0182 	bfi	r1, r3, #2, #1
 8006ad8:	f363 01c5 	bfi	r1, r3, #3, #3
 8006adc:	f362 1188 	bfi	r1, r2, #6, #3
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	f362 2152 	bfi	r1, r2, #9, #10
 8006ae6:	f363 41de 	bfi	r1, r3, #19, #12
 8006aea:	f363 71df 	bfi	r1, r3, #31, #1
 8006aee:	aa17      	add	r2, sp, #92	; 0x5c
 8006af0:	4860      	ldr	r0, [pc, #384]	; (8006c74 <spi_stm32_init+0x22c>)
 8006af2:	f00a fe17 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006af6:	f06f 0704 	mvn.w	r7, #4
 8006afa:	e0a5      	b.n	8006c48 <spi_stm32_init+0x200>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8006afc:	2201      	movs	r2, #1
 8006afe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006b02:	4b5d      	ldr	r3, [pc, #372]	; (8006c78 <spi_stm32_init+0x230>)
 8006b04:	9312      	str	r3, [sp, #72]	; 0x48
 8006b06:	9713      	str	r7, [sp, #76]	; 0x4c
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9305      	str	r3, [sp, #20]
 8006b0c:	2103      	movs	r1, #3
 8006b0e:	f88d 1014 	strb.w	r1, [sp, #20]
 8006b12:	9905      	ldr	r1, [sp, #20]
 8006b14:	9111      	str	r1, [sp, #68]	; 0x44
 8006b16:	4619      	mov	r1, r3
 8006b18:	f363 0100 	bfi	r1, r3, #0, #1
 8006b1c:	f363 0141 	bfi	r1, r3, #1, #1
 8006b20:	f363 0182 	bfi	r1, r3, #2, #1
 8006b24:	f363 01c5 	bfi	r1, r3, #3, #3
 8006b28:	f362 1188 	bfi	r1, r2, #6, #3
 8006b2c:	220c      	movs	r2, #12
 8006b2e:	f362 2152 	bfi	r1, r2, #9, #10
 8006b32:	f363 41de 	bfi	r1, r3, #19, #12
 8006b36:	f363 71df 	bfi	r1, r3, #31, #1
 8006b3a:	aa11      	add	r2, sp, #68	; 0x44
 8006b3c:	484d      	ldr	r0, [pc, #308]	; (8006c74 <spi_stm32_init+0x22c>)
 8006b3e:	f00a fdf1 	bl	8011724 <z_impl_z_log_msg2_static_create>
			return err;
 8006b42:	e081      	b.n	8006c48 <spi_stm32_init+0x200>
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
 8006b44:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	4b4b      	ldr	r3, [pc, #300]	; (8006c7c <spi_stm32_init+0x234>)
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	9000      	str	r0, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	2201      	movs	r2, #1
 8006b56:	4947      	ldr	r1, [pc, #284]	; (8006c74 <spi_stm32_init+0x22c>)
 8006b58:	f00b fb38 	bl	80121cc <z_log_msg2_runtime_create>
		return -ENODEV;
 8006b5c:	f06f 0712 	mvn.w	r7, #18
 8006b60:	e072      	b.n	8006c48 <spi_stm32_init+0x200>
				!device_is_ready(data->dma_tx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_tx.dma_dev->name);
 8006b62:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	4b44      	ldr	r3, [pc, #272]	; (8006c7c <spi_stm32_init+0x234>)
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	9000      	str	r0, [sp, #0]
 8006b70:	4603      	mov	r3, r0
 8006b72:	2201      	movs	r2, #1
 8006b74:	493f      	ldr	r1, [pc, #252]	; (8006c74 <spi_stm32_init+0x22c>)
 8006b76:	f00b fb29 	bl	80121cc <z_log_msg2_runtime_create>
		return -ENODEV;
 8006b7a:	f06f 0712 	mvn.w	r7, #18
 8006b7e:	e063      	b.n	8006c48 <spi_stm32_init+0x200>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	7922      	ldrb	r2, [r4, #4]
 8006b84:	9203      	str	r2, [sp, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	4b3d      	ldr	r3, [pc, #244]	; (8006c80 <spi_stm32_init+0x238>)
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	9000      	str	r0, [sp, #0]
 8006b90:	4603      	mov	r3, r0
 8006b92:	2201      	movs	r2, #1
 8006b94:	4937      	ldr	r1, [pc, #220]	; (8006c74 <spi_stm32_init+0x22c>)
 8006b96:	f00b fb19 	bl	80121cc <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 8006b9a:	f06f 0712 	mvn.w	r7, #18
 8006b9e:	e034      	b.n	8006c0a <spi_stm32_init+0x1c2>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006ba0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006ba4:	f013 0f01 	tst.w	r3, #1
 8006ba8:	d026      	beq.n	8006bf8 <spi_stm32_init+0x1b0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006baa:	2301      	movs	r3, #1
 8006bac:	fa03 fe01 	lsl.w	lr, r3, r1
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	ea43 030e 	orr.w	r3, r3, lr
 8006bb6:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8006bbc:	1e07      	subs	r7, r0, #0
 8006bbe:	db24      	blt.n	8006c0a <spi_stm32_init+0x1c2>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006bc0:	3408      	adds	r4, #8
 8006bc2:	68ab      	ldr	r3, [r5, #8]
 8006bc4:	68ea      	ldr	r2, [r5, #12]
 8006bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d21c      	bcs.n	8006c08 <spi_stm32_init+0x1c0>
		if (!device_is_ready(cs_gpio->port)) {
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	f00c ff24 	bl	8013a1c <z_device_is_ready>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d0d3      	beq.n	8006b80 <spi_stm32_init+0x138>
	return gpio_pin_configure(spec->port,
 8006bd8:	6820      	ldr	r0, [r4, #0]
 8006bda:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
 8006bdc:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8006bde:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8006be2:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8006be4:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006be6:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006bea:	d0d9      	beq.n	8006ba0 <spi_stm32_init+0x158>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006bec:	f013 0f01 	tst.w	r3, #1
 8006bf0:	d0d6      	beq.n	8006ba0 <spi_stm32_init+0x158>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006bf2:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006bf6:	e7d3      	b.n	8006ba0 <spi_stm32_init+0x158>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	fa03 fe01 	lsl.w	lr, r3, r1
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	ea23 030e 	bic.w	r3, r3, lr
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	e7d7      	b.n	8006bb8 <spi_stm32_init+0x170>
			return ret;
		}
	}

	return 0;
 8006c08:	4647      	mov	r7, r8
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8006c0a:	2f00      	cmp	r7, #0
 8006c0c:	db1c      	blt.n	8006c48 <spi_stm32_init+0x200>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	b1bb      	cbz	r3, 8006c42 <spi_stm32_init+0x1fa>
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	b1ab      	cbz	r3, 8006c42 <spi_stm32_init+0x1fa>
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	b19a      	cbz	r2, 8006c42 <spi_stm32_init+0x1fa>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8006c1a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8006c1c:	f008 f9ea 	bl	800eff4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8006c28:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006c2a:	6819      	ldr	r1, [r3, #0]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4093      	lsls	r3, r2
 8006c30:	4219      	tst	r1, r3
 8006c32:	d10d      	bne.n	8006c50 <spi_stm32_init+0x208>
 8006c34:	4643      	mov	r3, r8
	if (value != 0)	{
 8006c36:	b16b      	cbz	r3, 8006c54 <spi_stm32_init+0x20c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006c3c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8006c42:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8006c44:	b163      	cbz	r3, 8006c60 <spi_stm32_init+0x218>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8006c46:	4647      	mov	r7, r8
}
 8006c48:	4638      	mov	r0, r7
 8006c4a:	b01a      	add	sp, #104	; 0x68
 8006c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		value = (value != 0) ? 0 : 1;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f0      	b.n	8006c36 <spi_stm32_init+0x1ee>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006c54:	2101      	movs	r1, #1
 8006c56:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006c58:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8006c5e:	e7f0      	b.n	8006c42 <spi_stm32_init+0x1fa>
		ctx->owner = NULL;
 8006c60:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8006c62:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8006c66:	f007 fa65 	bl	800e134 <z_impl_k_sem_give>
}
 8006c6a:	e7ec      	b.n	8006c46 <spi_stm32_init+0x1fe>
 8006c6c:	08014bb4 	.word	0x08014bb4
 8006c70:	08016008 	.word	0x08016008
 8006c74:	08015070 	.word	0x08015070
 8006c78:	08016024 	.word	0x08016024
 8006c7c:	08016044 	.word	0x08016044
 8006c80:	08016058 	.word	0x08016058

08006c84 <transceive_dma>:
{
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	b097      	sub	sp, #92	; 0x5c
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4688      	mov	r8, r1
 8006c8e:	461e      	mov	r6, r3
 8006c90:	f89d 1080 	ldrb.w	r1, [sp, #128]	; 0x80
	const struct spi_stm32_config *cfg = dev->config;
 8006c94:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006c96:	6905      	ldr	r5, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8006c98:	689c      	ldr	r4, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8006c9a:	4693      	mov	fp, r2
 8006c9c:	b352      	cbz	r2, 8006cf4 <transceive_dma+0x70>
	if (asynchronous) {
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	f040 8179 	bne.w	8006f96 <transceive_dma+0x312>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8006ca4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006ca8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006cac:	d004      	beq.n	8006cb8 <transceive_dma+0x34>
 8006cae:	69ab      	ldr	r3, [r5, #24]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <transceive_dma+0x34>
		(ctx->owner == spi_cfg)) {
 8006cb2:	686b      	ldr	r3, [r5, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8006cb4:	4598      	cmp	r8, r3
 8006cb6:	d009      	beq.n	8006ccc <transceive_dma+0x48>
	k_sem_take(&ctx->lock, K_FOREVER);
 8006cb8:	f105 0010 	add.w	r0, r5, #16
	return z_impl_k_sem_take(sem, timeout);
 8006cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cc4:	f007 fa5e 	bl	800e184 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8006cc8:	f8c5 8004 	str.w	r8, [r5, #4]
	k_sem_reset(&data->status_sem);
 8006ccc:	f105 0064 	add.w	r0, r5, #100	; 0x64
	z_impl_k_sem_reset(sem);
 8006cd0:	f007 fa80 	bl	800e1d4 <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7ff fc9e 	bl	8006618 <spi_stm32_configure>
	if (ret) {
 8006cdc:	4680      	mov	r8, r0
 8006cde:	b170      	cbz	r0, 8006cfe <transceive_dma+0x7a>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	889b      	ldrh	r3, [r3, #4]
 8006ce4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006ce8:	f000 814e 	beq.w	8006f88 <transceive_dma+0x304>
}
 8006cec:	4640      	mov	r0, r8
 8006cee:	b017      	add	sp, #92	; 0x5c
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 8006cf4:	2e00      	cmp	r6, #0
 8006cf6:	d1d2      	bne.n	8006c9e <transceive_dma+0x1a>
		return 0;
 8006cf8:	f04f 0800 	mov.w	r8, #0
 8006cfc:	e7f6      	b.n	8006cec <transceive_dma+0x68>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006cfe:	f1bb 0f00 	cmp.w	fp, #0
 8006d02:	d015      	beq.n	8006d30 <transceive_dma+0xac>
 8006d04:	f8db 3000 	ldr.w	r3, [fp]
 8006d08:	646b      	str	r3, [r5, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006d0a:	b19b      	cbz	r3, 8006d34 <transceive_dma+0xb0>
 8006d0c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006d10:	64ab      	str	r3, [r5, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8006d12:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8006d16:	f105 0148 	add.w	r1, r5, #72	; 0x48
	while (*count) {
 8006d1a:	680b      	ldr	r3, [r1, #0]
 8006d1c:	b183      	cbz	r3, 8006d40 <transceive_dma+0xbc>
		if (((*current)->len / dfs) != 0) {
 8006d1e:	6802      	ldr	r2, [r0, #0]
 8006d20:	6853      	ldr	r3, [r2, #4]
 8006d22:	b94b      	cbnz	r3, 8006d38 <transceive_dma+0xb4>
		++(*current);
 8006d24:	3208      	adds	r2, #8
 8006d26:	6002      	str	r2, [r0, #0]
		--(*count);
 8006d28:	680b      	ldr	r3, [r1, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	600b      	str	r3, [r1, #0]
 8006d2e:	e7f4      	b.n	8006d1a <transceive_dma+0x96>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006d30:	465b      	mov	r3, fp
 8006d32:	e7e9      	b.n	8006d08 <transceive_dma+0x84>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e7eb      	b.n	8006d10 <transceive_dma+0x8c>
			*buf_len = (*current)->len / dfs;
 8006d38:	65ab      	str	r3, [r5, #88]	; 0x58
			return (*current)->buf;
 8006d3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	e000      	b.n	8006d42 <transceive_dma+0xbe>
	*buf_len = 0;
 8006d40:	65ab      	str	r3, [r5, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8006d42:	656b      	str	r3, [r5, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006d44:	b19e      	cbz	r6, 8006d6e <transceive_dma+0xea>
 8006d46:	6833      	ldr	r3, [r6, #0]
 8006d48:	64eb      	str	r3, [r5, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006d4a:	b193      	cbz	r3, 8006d72 <transceive_dma+0xee>
 8006d4c:	6873      	ldr	r3, [r6, #4]
 8006d4e:	652b      	str	r3, [r5, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8006d50:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8006d54:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 8006d58:	6813      	ldr	r3, [r2, #0]
 8006d5a:	b183      	cbz	r3, 8006d7e <transceive_dma+0xfa>
		if (((*current)->len / dfs) != 0) {
 8006d5c:	6803      	ldr	r3, [r0, #0]
 8006d5e:	6859      	ldr	r1, [r3, #4]
 8006d60:	b949      	cbnz	r1, 8006d76 <transceive_dma+0xf2>
		++(*current);
 8006d62:	3308      	adds	r3, #8
 8006d64:	6003      	str	r3, [r0, #0]
		--(*count);
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e7f4      	b.n	8006d58 <transceive_dma+0xd4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006d6e:	4633      	mov	r3, r6
 8006d70:	e7ea      	b.n	8006d48 <transceive_dma+0xc4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e7eb      	b.n	8006d4e <transceive_dma+0xca>
			*buf_len = (*current)->len / dfs;
 8006d76:	6629      	str	r1, [r5, #96]	; 0x60
			return (*current)->buf;
 8006d78:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	e000      	b.n	8006d80 <transceive_dma+0xfc>
	*buf_len = 0;
 8006d7e:	662b      	str	r3, [r5, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8006d80:	65eb      	str	r3, [r5, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	642b      	str	r3, [r5, #64]	; 0x40
	spi_stm32_cs_control(dev, true);
 8006d86:	2101      	movs	r1, #1
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f00b fa8a 	bl	80122a2 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d94:	6023      	str	r3, [r4, #0]
}
 8006d96:	e086      	b.n	8006ea6 <transceive_dma+0x222>
		} else if (data->ctx.tx_len == 0) {
 8006d98:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 808c 	beq.w	8006eb8 <transceive_dma+0x234>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 8006da0:	429e      	cmp	r6, r3
 8006da2:	bf28      	it	cs
 8006da4:	461e      	movcs	r6, r3
 8006da6:	e087      	b.n	8006eb8 <transceive_dma+0x234>
	if (!ctx->tx_len) {
		return;
	}

	if (len > ctx->tx_len) {
		LOG_ERR("Update exceeds current buffer");
 8006da8:	2201      	movs	r2, #1
 8006daa:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006dae:	4b7b      	ldr	r3, [pc, #492]	; (8006f9c <transceive_dma+0x318>)
 8006db0:	9314      	str	r3, [sp, #80]	; 0x50
 8006db2:	2300      	movs	r3, #0
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	2102      	movs	r1, #2
 8006db8:	f88d 1004 	strb.w	r1, [sp, #4]
 8006dbc:	9901      	ldr	r1, [sp, #4]
 8006dbe:	9113      	str	r1, [sp, #76]	; 0x4c
 8006dc0:	f363 0900 	bfi	r9, r3, #0, #1
 8006dc4:	f363 0941 	bfi	r9, r3, #1, #1
 8006dc8:	f363 0982 	bfi	r9, r3, #2, #1
 8006dcc:	f363 09c5 	bfi	r9, r3, #3, #3
 8006dd0:	f362 1988 	bfi	r9, r2, #6, #3
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	f362 2952 	bfi	r9, r2, #9, #10
 8006dda:	f363 49de 	bfi	r9, r3, #19, #12
 8006dde:	f363 79df 	bfi	r9, r3, #31, #1
 8006de2:	aa13      	add	r2, sp, #76	; 0x4c
 8006de4:	4649      	mov	r1, r9
 8006de6:	486e      	ldr	r0, [pc, #440]	; (8006fa0 <transceive_dma+0x31c>)
 8006de8:	f00a fc9c 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return;
 8006dec:	e09d      	b.n	8006f2a <transceive_dma+0x2a6>
	}

	ctx->tx_len -= len;
	if (!ctx->tx_len) {
		/* Current buffer is done. Get the next one to be processed. */
		++ctx->current_tx;
 8006dee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006df0:	3308      	adds	r3, #8
 8006df2:	646b      	str	r3, [r5, #68]	; 0x44
		--ctx->tx_count;
 8006df4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006df6:	3b01      	subs	r3, #1
 8006df8:	64ab      	str	r3, [r5, #72]	; 0x48
		ctx->tx_buf = (const uint8_t *)
			spi_context_get_next_buf(&ctx->current_tx,
 8006dfa:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8006dfe:	f105 0248 	add.w	r2, r5, #72	; 0x48
	while (*count) {
 8006e02:	e004      	b.n	8006e0e <transceive_dma+0x18a>
		++(*current);
 8006e04:	3308      	adds	r3, #8
 8006e06:	600b      	str	r3, [r1, #0]
		--(*count);
 8006e08:	6813      	ldr	r3, [r2, #0]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	6013      	str	r3, [r2, #0]
	while (*count) {
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	b13b      	cbz	r3, 8006e22 <transceive_dma+0x19e>
		if (((*current)->len / dfs) != 0) {
 8006e12:	680b      	ldr	r3, [r1, #0]
 8006e14:	6858      	ldr	r0, [r3, #4]
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d0f4      	beq.n	8006e04 <transceive_dma+0x180>
			*buf_len = (*current)->len / dfs;
 8006e1a:	65a8      	str	r0, [r5, #88]	; 0x58
			return (*current)->buf;
 8006e1c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	e000      	b.n	8006e24 <transceive_dma+0x1a0>
	*buf_len = 0;
 8006e22:	65ab      	str	r3, [r5, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8006e24:	656b      	str	r3, [r5, #84]	; 0x54
 8006e26:	e080      	b.n	8006f2a <transceive_dma+0x2a6>
	if (!ctx->rx_len) {
		return;
	}

	if (len > ctx->rx_len) {
		LOG_ERR("Update exceeds current buffer");
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006e2e:	4b5b      	ldr	r3, [pc, #364]	; (8006f9c <transceive_dma+0x318>)
 8006e30:	930e      	str	r3, [sp, #56]	; 0x38
 8006e32:	2300      	movs	r3, #0
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	2102      	movs	r1, #2
 8006e38:	f88d 1004 	strb.w	r1, [sp, #4]
 8006e3c:	9901      	ldr	r1, [sp, #4]
 8006e3e:	910d      	str	r1, [sp, #52]	; 0x34
 8006e40:	f363 0a00 	bfi	sl, r3, #0, #1
 8006e44:	f363 0a41 	bfi	sl, r3, #1, #1
 8006e48:	f363 0a82 	bfi	sl, r3, #2, #1
 8006e4c:	f363 0ac5 	bfi	sl, r3, #3, #3
 8006e50:	f362 1a88 	bfi	sl, r2, #6, #3
 8006e54:	2208      	movs	r2, #8
 8006e56:	f362 2a52 	bfi	sl, r2, #9, #10
 8006e5a:	f363 4ade 	bfi	sl, r3, #19, #12
 8006e5e:	f363 7adf 	bfi	sl, r3, #31, #1
 8006e62:	aa0d      	add	r2, sp, #52	; 0x34
 8006e64:	4651      	mov	r1, sl
 8006e66:	484e      	ldr	r0, [pc, #312]	; (8006fa0 <transceive_dma+0x31c>)
 8006e68:	f00a fc5c 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return;
 8006e6c:	e01b      	b.n	8006ea6 <transceive_dma+0x222>
	}

	ctx->rx_len -= len;
	if (!ctx->rx_len) {
		/* Current buffer is done. Get the next one to be processed. */
		++ctx->current_rx;
 8006e6e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006e70:	3308      	adds	r3, #8
 8006e72:	64eb      	str	r3, [r5, #76]	; 0x4c
		--ctx->rx_count;
 8006e74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006e76:	3b01      	subs	r3, #1
 8006e78:	652b      	str	r3, [r5, #80]	; 0x50
		ctx->rx_buf = (uint8_t *)
			spi_context_get_next_buf(&ctx->current_rx,
 8006e7a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8006e7e:	f105 0250 	add.w	r2, r5, #80	; 0x50
	while (*count) {
 8006e82:	e004      	b.n	8006e8e <transceive_dma+0x20a>
		++(*current);
 8006e84:	3308      	adds	r3, #8
 8006e86:	600b      	str	r3, [r1, #0]
		--(*count);
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
	while (*count) {
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	b13b      	cbz	r3, 8006ea2 <transceive_dma+0x21e>
		if (((*current)->len / dfs) != 0) {
 8006e92:	680b      	ldr	r3, [r1, #0]
 8006e94:	6858      	ldr	r0, [r3, #4]
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d0f4      	beq.n	8006e84 <transceive_dma+0x200>
			*buf_len = (*current)->len / dfs;
 8006e9a:	6628      	str	r0, [r5, #96]	; 0x60
			return (*current)->buf;
 8006e9c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	e000      	b.n	8006ea4 <transceive_dma+0x220>
	*buf_len = 0;
 8006ea2:	662b      	str	r3, [r5, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 8006ea4:	65eb      	str	r3, [r5, #92]	; 0x5c
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8006ea6:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8006ea8:	b916      	cbnz	r6, 8006eb0 <transceive_dma+0x22c>
 8006eaa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d04c      	beq.n	8006f4a <transceive_dma+0x2c6>
		if (data->ctx.rx_len == 0) {
 8006eb0:	2e00      	cmp	r6, #0
 8006eb2:	f47f af71 	bne.w	8006d98 <transceive_dma+0x114>
			dma_len = data->ctx.tx_len;
 8006eb6:	6dae      	ldr	r6, [r5, #88]	; 0x58
		data->status_flags = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	67eb      	str	r3, [r5, #124]	; 0x7c
		ret = spi_dma_move_buffers(dev, dma_len);
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f00b f9a9 	bl	8012216 <spi_dma_move_buffers>
		if (ret != 0) {
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d13f      	bne.n	8006f4a <transceive_dma+0x2c6>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8006eca:	6863      	ldr	r3, [r4, #4]
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	6063      	str	r3, [r4, #4]
		ret = wait_dma_rx_tx_done(dev);
 8006eda:	4638      	mov	r0, r7
 8006edc:	f00b f983 	bl	80121e6 <wait_dma_rx_tx_done>
		if (ret != 0) {
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d131      	bne.n	8006f4a <transceive_dma+0x2c6>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8006ee6:	68a3      	ldr	r3, [r4, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 8006ee8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8006eec:	d1fb      	bne.n	8006ee6 <transceive_dma+0x262>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006eee:	68a3      	ldr	r3, [r4, #8]
 8006ef0:	f013 0f02 	tst.w	r3, #2
 8006ef4:	d0fb      	beq.n	8006eee <transceive_dma+0x26a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006efc:	d1f7      	bne.n	8006eee <transceive_dma+0x26a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8006efe:	6863      	ldr	r3, [r4, #4]
 8006f00:	f023 0302 	bic.w	r3, r3, #2
 8006f04:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6063      	str	r3, [r4, #4]
	if (!ctx->tx_len) {
 8006f0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006f10:	b15b      	cbz	r3, 8006f2a <transceive_dma+0x2a6>
	if (len > ctx->tx_len) {
 8006f12:	429e      	cmp	r6, r3
 8006f14:	f63f af48 	bhi.w	8006da8 <transceive_dma+0x124>
	ctx->tx_len -= len;
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	65ab      	str	r3, [r5, #88]	; 0x58
	if (!ctx->tx_len) {
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f43f af66 	beq.w	8006dee <transceive_dma+0x16a>
	} else if (ctx->tx_buf) {
 8006f22:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006f24:	b10b      	cbz	r3, 8006f2a <transceive_dma+0x2a6>
		ctx->tx_buf += dfs * len;
 8006f26:	4433      	add	r3, r6
 8006f28:	656b      	str	r3, [r5, #84]	; 0x54
	if (!ctx->rx_len) {
 8006f2a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0ba      	beq.n	8006ea6 <transceive_dma+0x222>
	if (len > ctx->rx_len) {
 8006f30:	429e      	cmp	r6, r3
 8006f32:	f63f af79 	bhi.w	8006e28 <transceive_dma+0x1a4>
	ctx->rx_len -= len;
 8006f36:	1b9b      	subs	r3, r3, r6
 8006f38:	662b      	str	r3, [r5, #96]	; 0x60
	if (!ctx->rx_len) {
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d097      	beq.n	8006e6e <transceive_dma+0x1ea>
						 &ctx->rx_count,
						 &ctx->rx_len, dfs);
	} else if (ctx->rx_buf) {
 8006f3e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0b0      	beq.n	8006ea6 <transceive_dma+0x222>
		ctx->rx_buf += dfs * len;
 8006f44:	4433      	add	r3, r6
 8006f46:	65eb      	str	r3, [r5, #92]	; 0x5c
 8006f48:	e7ad      	b.n	8006ea6 <transceive_dma+0x222>
	spi_stm32_complete(dev, ret);
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f00b f9f5 	bl	801233c <spi_stm32_complete>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f58:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	6063      	str	r3, [r4, #4]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 8006f6a:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8006f6e:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 */
__syscall int dma_stop(const struct device *dev, uint32_t channel);

static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
 8006f72:	6883      	ldr	r3, [r0, #8]
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 8006f78:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8006f7c:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
	const struct dma_driver_api *api =
 8006f80:	6883      	ldr	r3, [r0, #8]
	return api->stop(dev, channel);
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 8006f86:	e6ab      	b.n	8006ce0 <transceive_dma+0x5c>
		ctx->owner = NULL;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8006f8c:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8006f90:	f007 f8d0 	bl	800e134 <z_impl_k_sem_give>
}
 8006f94:	e6aa      	b.n	8006cec <transceive_dma+0x68>
		return -ENOTSUP;
 8006f96:	f06f 0885 	mvn.w	r8, #133	; 0x85
 8006f9a:	e6a7      	b.n	8006cec <transceive_dma+0x68>
 8006f9c:	0801607c 	.word	0x0801607c
 8006fa0:	08015070 	.word	0x08015070

08006fa4 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8006fa4:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8006fa6:	4802      	ldr	r0, [pc, #8]	; (8006fb0 <timer_callback+0xc>)
 8006fa8:	f007 fa74 	bl	800e494 <k_work_submit>
}
 8006fac:	bd08      	pop	{r3, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000270 	.word	0x20000270

08006fb4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8006fb4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8006fb6:	f00d f89f 	bl	80140f8 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8006fba:	220a      	movs	r2, #10
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f7f9 fdbd 	bl	8000b3c <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8006fc2:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <RtcGetTimerElapsedTime+0x18>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
}
 8006fc6:	1ac0      	subs	r0, r0, r3
 8006fc8:	bd08      	pop	{r3, pc}
 8006fca:	bf00      	nop
 8006fcc:	20001478 	.word	0x20001478

08006fd0 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8006fd0:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8006fd2:	4802      	ldr	r0, [pc, #8]	; (8006fdc <RtcStopAlarm+0xc>)
 8006fd4:	f00d f8a0 	bl	8014118 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8006fd8:	bd08      	pop	{r3, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000758 	.word	0x20000758

08006fe0 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8006fe0:	b500      	push	{lr}
 8006fe2:	b083      	sub	sp, #12
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8006fe4:	0f83      	lsrs	r3, r0, #30
 8006fe6:	0082      	lsls	r2, r0, #2
 8006fe8:	1812      	adds	r2, r2, r0
 8006fea:	f143 0300 	adc.w	r3, r3, #0
 8006fee:	1892      	adds	r2, r2, r2
 8006ff0:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8006ffa:	4803      	ldr	r0, [pc, #12]	; (8007008 <RtcSetAlarm+0x28>)
 8006ffc:	f008 f85e 	bl	800f0bc <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8007000:	b003      	add	sp, #12
 8007002:	f85d fb04 	ldr.w	pc, [sp], #4
 8007006:	bf00      	nop
 8007008:	20000758 	.word	0x20000758

0800700c <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 800700c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800700e:	f00d f873 	bl	80140f8 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007012:	220a      	movs	r2, #10
 8007014:	2300      	movs	r3, #0
 8007016:	f7f9 fd91 	bl	8000b3c <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 800701a:	4b01      	ldr	r3, [pc, #4]	; (8007020 <RtcSetTimerContext+0x14>)
 800701c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 800701e:	bd08      	pop	{r3, pc}
 8007020:	20001478 	.word	0x20001478

08007024 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <RtcGetTimerContext+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20001478 	.word	0x20001478

08007030 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007034:	f100 0544 	add.w	r5, r0, #68	; 0x44
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007038:	2302      	movs	r3, #2
 800703a:	f3bf 8f5b 	dmb	ish
 800703e:	e855 2f00 	ldrex	r2, [r5]
 8007042:	2a01      	cmp	r2, #1
 8007044:	d103      	bne.n	800704e <modem_release+0x1e>
 8007046:	e845 3100 	strex	r1, r3, [r5]
 800704a:	2900      	cmp	r1, #0
 800704c:	d1f7      	bne.n	800703e <modem_release+0xe>
 800704e:	f3bf 8f5b 	dmb	ish
 8007052:	bf0c      	ite	eq
 8007054:	2601      	moveq	r6, #1
 8007056:	2600      	movne	r6, #0
 8007058:	d10e      	bne.n	8007078 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 800705a:	4b08      	ldr	r3, [pc, #32]	; (800707c <modem_release+0x4c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007064:	f3bf 8f5b 	dmb	ish
 8007068:	e855 2f00 	ldrex	r2, [r5]
 800706c:	e845 3100 	strex	r1, r3, [r5]
 8007070:	2900      	cmp	r1, #0
 8007072:	d1f9      	bne.n	8007068 <modem_release+0x38>
 8007074:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8007078:	4630      	mov	r0, r6
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	080163cc 	.word	0x080163cc

08007080 <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 8007080:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8007082:	4806      	ldr	r0, [pc, #24]	; (800709c <sx12xx_ev_tx_timed_out+0x1c>)
 8007084:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	6143      	str	r3, [r0, #20]

    if (modem_release(&dev_data)) {
 800708a:	f7ff ffd1 	bl	8007030 <modem_release>
 800708e:	b120      	cbz	r0, 800709a <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 8007090:	b11c      	cbz	r4, 800709a <sx12xx_ev_tx_timed_out+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8007092:	2100      	movs	r1, #0
 8007094:	4620      	mov	r0, r4
 8007096:	f008 fb0d 	bl	800f6b4 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 800709a:	bd10      	pop	{r4, pc}
 800709c:	2000147c 	.word	0x2000147c

080070a0 <sx12xx_ev_rx_error_timeout>:

static void sx12xx_ev_rx_error_timeout(void)
{
 80070a0:	b510      	push	{r4, lr}
 80070a2:	b090      	sub	sp, #64	; 0x40
    LOG_DBG("Receive timeout/error");
 80070a4:	2301      	movs	r3, #1
 80070a6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80070aa:	2302      	movs	r3, #2
 80070ac:	f8ad 300a 	strh.w	r3, [sp, #10]
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <sx12xx_ev_rx_error_timeout+0x70>)
 80070b2:	930e      	str	r3, [sp, #56]	; 0x38
 80070b4:	4b17      	ldr	r3, [pc, #92]	; (8007114 <sx12xx_ev_rx_error_timeout+0x74>)
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	2300      	movs	r3, #0
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	2203      	movs	r2, #3
 80070be:	f88d 2004 	strb.w	r2, [sp, #4]
 80070c2:	9a01      	ldr	r2, [sp, #4]
 80070c4:	920d      	str	r2, [sp, #52]	; 0x34
 80070c6:	4619      	mov	r1, r3
 80070c8:	f363 0100 	bfi	r1, r3, #0, #1
 80070cc:	f363 0141 	bfi	r1, r3, #1, #1
 80070d0:	f363 0182 	bfi	r1, r3, #2, #1
 80070d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80070d8:	2204      	movs	r2, #4
 80070da:	f362 1188 	bfi	r1, r2, #6, #3
 80070de:	220c      	movs	r2, #12
 80070e0:	f362 2152 	bfi	r1, r2, #9, #10
 80070e4:	f363 41de 	bfi	r1, r3, #19, #12
 80070e8:	f363 71df 	bfi	r1, r3, #31, #1
 80070ec:	aa0d      	add	r2, sp, #52	; 0x34
 80070ee:	480a      	ldr	r0, [pc, #40]	; (8007118 <sx12xx_ev_rx_error_timeout+0x78>)
 80070f0:	f00a fb18 	bl	8011724 <z_impl_z_log_msg2_static_create>
    struct k_poll_signal *sig = dev_data.operation_done;
 80070f4:	4b09      	ldr	r3, [pc, #36]	; (800711c <sx12xx_ev_rx_error_timeout+0x7c>)
 80070f6:	685c      	ldr	r4, [r3, #4]

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	b113      	cbz	r3, 8007102 <sx12xx_ev_rx_error_timeout+0x62>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 80070fc:	4a07      	ldr	r2, [pc, #28]	; (800711c <sx12xx_ev_rx_error_timeout+0x7c>)
 80070fe:	6810      	ldr	r0, [r2, #0]
 8007100:	4798      	blx	r3
    }

    /* Raise signal if provided */
    if (sig) {
 8007102:	b11c      	cbz	r4, 800710c <sx12xx_ev_rx_error_timeout+0x6c>
 8007104:	2100      	movs	r1, #0
 8007106:	4620      	mov	r0, r4
 8007108:	f008 fad4 	bl	800f6b4 <z_impl_k_poll_signal_raise>
        k_poll_signal_raise(sig, 0);
    }
}
 800710c:	b010      	add	sp, #64	; 0x40
 800710e:	bd10      	pop	{r4, pc}
 8007110:	08016158 	.word	0x08016158
 8007114:	0801625c 	.word	0x0801625c
 8007118:	08015080 	.word	0x08015080
 800711c:	2000147c 	.word	0x2000147c

08007120 <sx12xx_ev_tx_done>:
{
 8007120:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <sx12xx_ev_tx_done+0x18>)
 8007124:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 8007126:	f7ff ff83 	bl	8007030 <modem_release>
 800712a:	b120      	cbz	r0, 8007136 <sx12xx_ev_tx_done+0x16>
		if (sig) {
 800712c:	b11c      	cbz	r4, 8007136 <sx12xx_ev_tx_done+0x16>
 800712e:	2100      	movs	r1, #0
 8007130:	4620      	mov	r0, r4
 8007132:	f008 fabf 	bl	800f6b4 <z_impl_k_poll_signal_raise>
}
 8007136:	bd10      	pop	{r4, pc}
 8007138:	2000147c 	.word	0x2000147c

0800713c <sx12xx_ev_rx_done>:
{
 800713c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713e:	b083      	sub	sp, #12
 8007140:	4617      	mov	r7, r2
 8007142:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 8007144:	4c24      	ldr	r4, [pc, #144]	; (80071d8 <sx12xx_ev_rx_done+0x9c>)
 8007146:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 8007148:	68a4      	ldr	r4, [r4, #8]
 800714a:	b15c      	cbz	r4, 8007164 <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	460a      	mov	r2, r1
 8007152:	4601      	mov	r1, r0
 8007154:	4820      	ldr	r0, [pc, #128]	; (80071d8 <sx12xx_ev_rx_done+0x9c>)
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	47a0      	blx	r4
		Radio.Rx(0);
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <sx12xx_ev_rx_done+0xa0>)
 800715c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715e:	2000      	movs	r0, #0
 8007160:	4798      	blx	r3
		return;
 8007162:	e037      	b.n	80071d4 <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007164:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <sx12xx_ev_rx_done+0xa4>)
 8007166:	2202      	movs	r2, #2
 8007168:	f3bf 8f5b 	dmb	ish
 800716c:	e853 4f00 	ldrex	r4, [r3]
 8007170:	2c01      	cmp	r4, #1
 8007172:	d104      	bne.n	800717e <sx12xx_ev_rx_done+0x42>
 8007174:	e843 2c00 	strex	ip, r2, [r3]
 8007178:	f1bc 0f00 	cmp.w	ip, #0
 800717c:	d1f6      	bne.n	800716c <sx12xx_ev_rx_done+0x30>
 800717e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007182:	d127      	bne.n	80071d4 <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 8007184:	3b44      	subs	r3, #68	; 0x44
 8007186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	428a      	cmp	r2, r1
 800718c:	d900      	bls.n	8007190 <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 800718e:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8007190:	4c11      	ldr	r4, [pc, #68]	; (80071d8 <sx12xx_ev_rx_done+0x9c>)
 8007192:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007194:	781a      	ldrb	r2, [r3, #0]
 8007196:	4601      	mov	r1, r0
 8007198:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800719a:	f00d f963 	bl	8014464 <memcpy>
	if (dev_data.rx_params.rssi) {
 800719e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071a0:	b103      	cbz	r3, 80071a4 <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 80071a2:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <sx12xx_ev_rx_done+0x9c>)
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	b103      	cbz	r3, 80071ac <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 80071aa:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <sx12xx_ev_rx_done+0xa0>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4798      	blx	r3
	dev_data.operation_done = NULL;
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <sx12xx_ev_rx_done+0x9c>)
 80071b4:	2100      	movs	r1, #0
 80071b6:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80071b8:	3344      	adds	r3, #68	; 0x44
 80071ba:	f3bf 8f5b 	dmb	ish
 80071be:	e853 2f00 	ldrex	r2, [r3]
 80071c2:	e843 1000 	strex	r0, r1, [r3]
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d1f9      	bne.n	80071be <sx12xx_ev_rx_done+0x82>
 80071ca:	f3bf 8f5b 	dmb	ish
 80071ce:	4630      	mov	r0, r6
 80071d0:	f008 fa70 	bl	800f6b4 <z_impl_k_poll_signal_raise>
}
 80071d4:	b003      	add	sp, #12
 80071d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d8:	2000147c 	.word	0x2000147c
 80071dc:	080163cc 	.word	0x080163cc
 80071e0:	200014c0 	.word	0x200014c0

080071e4 <__sx12xx_configure_pin>:
{
 80071e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e6:	b087      	sub	sp, #28
 80071e8:	4604      	mov	r4, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4616      	mov	r6, r2
 80071ee:	461d      	mov	r5, r3
 80071f0:	4608      	mov	r0, r1
 80071f2:	f006 fb9f 	bl	800d934 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 80071f6:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 80071f8:	b1f8      	cbz	r0, 800723a <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 80071fa:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 80071fc:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80071fe:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8007202:	d007      	beq.n	8007214 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007204:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8007208:	d004      	beq.n	8007214 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800720a:	f015 0f01 	tst.w	r5, #1
 800720e:	d001      	beq.n	8007214 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007210:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007214:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007218:	f015 0f01 	tst.w	r5, #1
 800721c:	d019      	beq.n	8007252 <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f506 	lsl.w	r5, r1, r6
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	4329      	orrs	r1, r5
 8007228:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4631      	mov	r1, r6
 800722e:	4798      	blx	r3
	if (err) {
 8007230:	4604      	mov	r4, r0
 8007232:	b9b0      	cbnz	r0, 8007262 <__sx12xx_configure_pin+0x7e>
}
 8007234:	4620      	mov	r0, r4
 8007236:	b007      	add	sp, #28
 8007238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 800723a:	9702      	str	r7, [sp, #8]
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <__sx12xx_configure_pin+0x98>)
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	9000      	str	r0, [sp, #0]
 8007242:	4603      	mov	r3, r0
 8007244:	2201      	movs	r2, #1
 8007246:	490e      	ldr	r1, [pc, #56]	; (8007280 <__sx12xx_configure_pin+0x9c>)
 8007248:	f00b fb60 	bl	801290c <z_log_msg2_runtime_create>
		return -EIO;
 800724c:	f06f 0404 	mvn.w	r4, #4
 8007250:	e7f0      	b.n	8007234 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007252:	2101      	movs	r1, #1
 8007254:	fa01 f506 	lsl.w	r5, r1, r6
 8007258:	6821      	ldr	r1, [r4, #0]
 800725a:	ea21 0105 	bic.w	r1, r1, r5
 800725e:	6021      	str	r1, [r4, #0]
 8007260:	e7e3      	b.n	800722a <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 8007262:	9004      	str	r0, [sp, #16]
 8007264:	9603      	str	r6, [sp, #12]
 8007266:	9702      	str	r7, [sp, #8]
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <__sx12xx_configure_pin+0xa0>)
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	2000      	movs	r0, #0
 800726e:	9000      	str	r0, [sp, #0]
 8007270:	4603      	mov	r3, r0
 8007272:	2201      	movs	r2, #1
 8007274:	4902      	ldr	r1, [pc, #8]	; (8007280 <__sx12xx_configure_pin+0x9c>)
 8007276:	f00b fb49 	bl	801290c <z_log_msg2_runtime_create>
		return err;
 800727a:	e7db      	b.n	8007234 <__sx12xx_configure_pin+0x50>
 800727c:	08016174 	.word	0x08016174
 8007280:	08015080 	.word	0x08015080
 8007284:	08016194 	.word	0x08016194

08007288 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800728c:	490f      	ldr	r1, [pc, #60]	; (80072cc <sx12xx_lora_send_async+0x44>)
 800728e:	2001      	movs	r0, #1
 8007290:	f3bf 8f5b 	dmb	ish
 8007294:	e851 4f00 	ldrex	r4, [r1]
 8007298:	2c00      	cmp	r4, #0
 800729a:	d103      	bne.n	80072a4 <sx12xx_lora_send_async+0x1c>
 800729c:	e841 0600 	strex	r6, r0, [r1]
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	d1f7      	bne.n	8007294 <sx12xx_lora_send_async+0xc>
 80072a4:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80072a8:	d10c      	bne.n	80072c4 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 80072aa:	3944      	subs	r1, #68	; 0x44
 80072ac:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80072ae:	4e08      	ldr	r6, [pc, #32]	; (80072d0 <sx12xx_lora_send_async+0x48>)
 80072b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80072b2:	b2d4      	uxtb	r4, r2
 80072b4:	4621      	mov	r1, r4
 80072b6:	4798      	blx	r3

	Radio.Send(data, data_len);
 80072b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80072ba:	4621      	mov	r1, r4
 80072bc:	4628      	mov	r0, r5
 80072be:	4798      	blx	r3

	return 0;
 80072c0:	2000      	movs	r0, #0
}
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 80072c4:	f06f 000f 	mvn.w	r0, #15
 80072c8:	e7fb      	b.n	80072c2 <sx12xx_lora_send_async+0x3a>
 80072ca:	bf00      	nop
 80072cc:	200014c0 	.word	0x200014c0
 80072d0:	080163cc 	.word	0x080163cc

080072d4 <sx12xx_lora_send>:
{
 80072d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d6:	b09d      	sub	sp, #116	; 0x74
 80072d8:	af04      	add	r7, sp, #16
 80072da:	4615      	mov	r5, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80072dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80072e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80072e2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072e4:	2300      	movs	r3, #0
 80072e6:	643b      	str	r3, [r7, #64]	; 0x40
 80072e8:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f0:	633b      	str	r3, [r7, #48]	; 0x30
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
 80072f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80072f8:	2401      	movs	r4, #1
 80072fa:	f364 0304 	bfi	r3, r4, #0, #5
 80072fe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8007302:	637a      	str	r2, [r7, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8007304:	4b5a      	ldr	r3, [pc, #360]	; (8007470 <sx12xx_lora_send+0x19c>)
 8007306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80ae 	beq.w	800746a <sx12xx_lora_send+0x196>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 800730e:	4613      	mov	r3, r2
 8007310:	462a      	mov	r2, r5
 8007312:	f7ff ffb9 	bl	8007288 <sx12xx_lora_send_async>
	if (ret < 0) {
 8007316:	2800      	cmp	r0, #0
 8007318:	db6c      	blt.n	80073f4 <sx12xx_lora_send+0x120>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 800731a:	4b56      	ldr	r3, [pc, #344]	; (8007474 <sx12xx_lora_send+0x1a0>)
 800731c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 800731e:	4854      	ldr	r0, [pc, #336]	; (8007470 <sx12xx_lora_send+0x19c>)
 8007320:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
				   dev_data.tx_cfg.datarate,
 8007324:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
				   dev_data.tx_cfg.coding_rate,
 8007328:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
	air_time = Radio.TimeOnAir(MODEM_LORA,
 800732c:	2601      	movs	r6, #1
 800732e:	9603      	str	r6, [sp, #12]
 8007330:	fa5f fc85 	uxtb.w	ip, r5
 8007334:	f8cd c008 	str.w	ip, [sp, #8]
 8007338:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
 800733c:	f8cd c004 	str.w	ip, [sp, #4]
 8007340:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8007342:	9000      	str	r0, [sp, #0]
 8007344:	4630      	mov	r0, r6
 8007346:	47a0      	blx	r4
 8007348:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 800734a:	80be      	strh	r6, [r7, #4]
 800734c:	2302      	movs	r3, #2
 800734e:	80fb      	strh	r3, [r7, #6]
 8007350:	466e      	mov	r6, sp
 8007352:	b088      	sub	sp, #32
 8007354:	a904      	add	r1, sp, #16
 8007356:	466b      	mov	r3, sp
 8007358:	f113 021c 	adds.w	r2, r3, #28
 800735c:	d04d      	beq.n	80073fa <sx12xx_lora_send+0x126>
 800735e:	2314      	movs	r3, #20
 8007360:	2001      	movs	r0, #1
 8007362:	80b8      	strh	r0, [r7, #4]
 8007364:	b11a      	cbz	r2, 800736e <sx12xx_lora_send+0x9a>
 8007366:	2b04      	cmp	r3, #4
 8007368:	dd01      	ble.n	800736e <sx12xx_lora_send+0x9a>
 800736a:	4843      	ldr	r0, [pc, #268]	; (8007478 <sx12xx_lora_send+0x1a4>)
 800736c:	6108      	str	r0, [r1, #16]
 800736e:	2002      	movs	r0, #2
 8007370:	80f8      	strh	r0, [r7, #6]
 8007372:	b11a      	cbz	r2, 800737c <sx12xx_lora_send+0xa8>
 8007374:	2b08      	cmp	r3, #8
 8007376:	dd01      	ble.n	800737c <sx12xx_lora_send+0xa8>
 8007378:	4840      	ldr	r0, [pc, #256]	; (800747c <sx12xx_lora_send+0x1a8>)
 800737a:	6148      	str	r0, [r1, #20]
 800737c:	b112      	cbz	r2, 8007384 <sx12xx_lora_send+0xb0>
 800737e:	2b0c      	cmp	r3, #12
 8007380:	dd00      	ble.n	8007384 <sx12xx_lora_send+0xb0>
 8007382:	618d      	str	r5, [r1, #24]
 8007384:	b112      	cbz	r2, 800738c <sx12xx_lora_send+0xb8>
 8007386:	2b10      	cmp	r3, #16
 8007388:	dd00      	ble.n	800738c <sx12xx_lora_send+0xb8>
 800738a:	61cc      	str	r4, [r1, #28]
 800738c:	2b13      	cmp	r3, #19
 800738e:	dd37      	ble.n	8007400 <sx12xx_lora_send+0x12c>
 8007390:	2314      	movs	r3, #20
 8007392:	b12a      	cbz	r2, 80073a0 <sx12xx_lora_send+0xcc>
 8007394:	2000      	movs	r0, #0
 8007396:	6038      	str	r0, [r7, #0]
 8007398:	2005      	movs	r0, #5
 800739a:	7038      	strb	r0, [r7, #0]
 800739c:	6838      	ldr	r0, [r7, #0]
 800739e:	60c8      	str	r0, [r1, #12]
 80073a0:	2100      	movs	r1, #0
 80073a2:	f36f 0100 	bfc	r1, #0, #1
 80073a6:	f36f 0141 	bfc	r1, #1, #1
 80073aa:	f36f 0182 	bfc	r1, #2, #1
 80073ae:	f36f 01c5 	bfc	r1, #3, #3
 80073b2:	2004      	movs	r0, #4
 80073b4:	f360 1188 	bfi	r1, r0, #6, #3
 80073b8:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 80073bc:	f363 2152 	bfi	r1, r3, #9, #10
 80073c0:	f36f 41de 	bfc	r1, #19, #12
 80073c4:	f36f 71df 	bfc	r1, #31, #1
 80073c8:	2300      	movs	r3, #0
 80073ca:	482d      	ldr	r0, [pc, #180]	; (8007480 <sx12xx_lora_send+0x1ac>)
 80073cc:	f00a f9aa 	bl	8011724 <z_impl_z_log_msg2_static_create>
 80073d0:	46b5      	mov	sp, r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 80073d2:	0060      	lsls	r0, r4, #1
			return t * ((uint64_t)to_hz / from_hz);
 80073d4:	f3c4 7341 	ubfx	r3, r4, #29, #2
 80073d8:	00e2      	lsls	r2, r4, #3
 80073da:	1812      	adds	r2, r2, r0
 80073dc:	f143 0300 	adc.w	r3, r3, #0
 80073e0:	1892      	adds	r2, r2, r2
 80073e2:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 80073e4:	2101      	movs	r1, #1
 80073e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073ea:	f008 f8b7 	bl	800f55c <z_impl_k_poll>
	if (ret < 0) {
 80073ee:	2800      	cmp	r0, #0
 80073f0:	db09      	blt.n	8007406 <sx12xx_lora_send+0x132>
	return 0;
 80073f2:	2000      	movs	r0, #0
}
 80073f4:	3764      	adds	r7, #100	; 0x64
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 80073fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80073fe:	e7af      	b.n	8007360 <sx12xx_lora_send+0x8c>
 8007400:	f06f 031b 	mvn.w	r3, #27
 8007404:	e7c5      	b.n	8007392 <sx12xx_lora_send+0xbe>
		LOG_ERR("Packet transmission failed!");
 8007406:	2201      	movs	r2, #1
 8007408:	80ba      	strh	r2, [r7, #4]
 800740a:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <sx12xx_lora_send+0x1b0>)
 800740c:	65bb      	str	r3, [r7, #88]	; 0x58
 800740e:	2300      	movs	r3, #0
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	2102      	movs	r1, #2
 8007414:	7039      	strb	r1, [r7, #0]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6579      	str	r1, [r7, #84]	; 0x54
 800741a:	4619      	mov	r1, r3
 800741c:	f363 0100 	bfi	r1, r3, #0, #1
 8007420:	f363 0141 	bfi	r1, r3, #1, #1
 8007424:	f363 0182 	bfi	r1, r3, #2, #1
 8007428:	f363 01c5 	bfi	r1, r3, #3, #3
 800742c:	f362 1188 	bfi	r1, r2, #6, #3
 8007430:	2208      	movs	r2, #8
 8007432:	f362 2152 	bfi	r1, r2, #9, #10
 8007436:	f363 41de 	bfi	r1, r3, #19, #12
 800743a:	f363 71df 	bfi	r1, r3, #31, #1
 800743e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007442:	480f      	ldr	r0, [pc, #60]	; (8007480 <sx12xx_lora_send+0x1ac>)
 8007444:	f00a f96e 	bl	8011724 <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 8007448:	4809      	ldr	r0, [pc, #36]	; (8007470 <sx12xx_lora_send+0x19c>)
 800744a:	f7ff fdf1 	bl	8007030 <modem_release>
 800744e:	b108      	cbz	r0, 8007454 <sx12xx_lora_send+0x180>
	return 0;
 8007450:	2000      	movs	r0, #0
 8007452:	e7cf      	b.n	80073f4 <sx12xx_lora_send+0x120>
 8007454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800745c:	2101      	movs	r1, #1
 800745e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007462:	f008 f87b 	bl	800f55c <z_impl_k_poll>
 8007466:	2000      	movs	r0, #0
 8007468:	e7c4      	b.n	80073f4 <sx12xx_lora_send+0x120>
		return -EINVAL;
 800746a:	f06f 0015 	mvn.w	r0, #21
 800746e:	e7c1      	b.n	80073f4 <sx12xx_lora_send+0x120>
 8007470:	2000147c 	.word	0x2000147c
 8007474:	080163cc 	.word	0x080163cc
 8007478:	080161b4 	.word	0x080161b4
 800747c:	08016278 	.word	0x08016278
 8007480:	08015080 	.word	0x08015080
 8007484:	080161e0 	.word	0x080161e0

08007488 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8007488:	b530      	push	{r4, r5, lr}
 800748a:	b09b      	sub	sp, #108	; 0x6c
 800748c:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007490:	aa10      	add	r2, sp, #64	; 0x40
 8007492:	9210      	str	r2, [sp, #64]	; 0x40
 8007494:	9211      	str	r2, [sp, #68]	; 0x44
 8007496:	2300      	movs	r3, #0
 8007498:	9312      	str	r3, [sp, #72]	; 0x48
 800749a:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800749c:	930b      	str	r3, [sp, #44]	; 0x2c
 800749e:	930c      	str	r3, [sp, #48]	; 0x30
 80074a0:	930d      	str	r3, [sp, #52]	; 0x34
 80074a2:	930e      	str	r3, [sp, #56]	; 0x38
 80074a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80074aa:	2001      	movs	r0, #1
 80074ac:	f360 0304 	bfi	r3, r0, #0, #5
 80074b0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80074b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80074b6:	4b32      	ldr	r3, [pc, #200]	; (8007580 <sx12xx_lora_recv+0xf8>)
 80074b8:	f3bf 8f5b 	dmb	ish
 80074bc:	e853 2f00 	ldrex	r2, [r3]
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	d103      	bne.n	80074cc <sx12xx_lora_recv+0x44>
 80074c4:	e843 0400 	strex	r4, r0, [r3]
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d1f7      	bne.n	80074bc <sx12xx_lora_recv+0x34>
 80074cc:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80074d0:	d153      	bne.n	800757a <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 80074d2:	3b44      	subs	r3, #68	; 0x44
 80074d4:	2400      	movs	r4, #0
 80074d6:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 80074d8:	aa10      	add	r2, sp, #64	; 0x40
 80074da:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80074dc:	6499      	str	r1, [r3, #72]	; 0x48
	dev_data.rx_params.size = &size;
 80074de:	f10d 0207 	add.w	r2, sp, #7
 80074e2:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.rssi = rssi;
 80074e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074e6:	651a      	str	r2, [r3, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 80074e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80074ec:	4d25      	ldr	r5, [pc, #148]	; (8007584 <sx12xx_lora_recv+0xfc>)
 80074ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80074f0:	21ff      	movs	r1, #255	; 0xff
 80074f2:	4798      	blx	r3
	Radio.Rx(0);
 80074f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80074f6:	4620      	mov	r0, r4
 80074f8:	4798      	blx	r3
 80074fa:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 80074fe:	2101      	movs	r1, #1
 8007500:	a80b      	add	r0, sp, #44	; 0x2c
 8007502:	f008 f82b 	bl	800f55c <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8007506:	1e04      	subs	r4, r0, #0
 8007508:	db04      	blt.n	8007514 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 800750a:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 800750e:	4620      	mov	r0, r4
 8007510:	b01b      	add	sp, #108	; 0x6c
 8007512:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 8007514:	481c      	ldr	r0, [pc, #112]	; (8007588 <sx12xx_lora_recv+0x100>)
 8007516:	f7ff fd8b 	bl	8007030 <modem_release>
 800751a:	b950      	cbnz	r0, 8007532 <sx12xx_lora_recv+0xaa>
 800751c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007524:	2101      	movs	r1, #1
 8007526:	a80b      	add	r0, sp, #44	; 0x2c
 8007528:	f008 f818 	bl	800f55c <z_impl_k_poll>
			return size;
 800752c:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8007530:	e7ed      	b.n	800750e <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 8007532:	2301      	movs	r3, #1
 8007534:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007538:	4b14      	ldr	r3, [pc, #80]	; (800758c <sx12xx_lora_recv+0x104>)
 800753a:	9318      	str	r3, [sp, #96]	; 0x60
 800753c:	2300      	movs	r3, #0
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	2202      	movs	r2, #2
 8007542:	f88d 2008 	strb.w	r2, [sp, #8]
 8007546:	9a02      	ldr	r2, [sp, #8]
 8007548:	9217      	str	r2, [sp, #92]	; 0x5c
 800754a:	4619      	mov	r1, r3
 800754c:	f363 0100 	bfi	r1, r3, #0, #1
 8007550:	f363 0141 	bfi	r1, r3, #1, #1
 8007554:	f363 0182 	bfi	r1, r3, #2, #1
 8007558:	f363 01c5 	bfi	r1, r3, #3, #3
 800755c:	2203      	movs	r2, #3
 800755e:	f362 1188 	bfi	r1, r2, #6, #3
 8007562:	2208      	movs	r2, #8
 8007564:	f362 2152 	bfi	r1, r2, #9, #10
 8007568:	f363 41de 	bfi	r1, r3, #19, #12
 800756c:	f363 71df 	bfi	r1, r3, #31, #1
 8007570:	aa17      	add	r2, sp, #92	; 0x5c
 8007572:	4807      	ldr	r0, [pc, #28]	; (8007590 <sx12xx_lora_recv+0x108>)
 8007574:	f00a f8d6 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return ret;
 8007578:	e7c9      	b.n	800750e <sx12xx_lora_recv+0x86>
		return -EBUSY;
 800757a:	f06f 040f 	mvn.w	r4, #15
 800757e:	e7c6      	b.n	800750e <sx12xx_lora_recv+0x86>
 8007580:	200014c0 	.word	0x200014c0
 8007584:	080163cc 	.word	0x080163cc
 8007588:	2000147c 	.word	0x2000147c
 800758c:	080161fc 	.word	0x080161fc
 8007590:	08015080 	.word	0x08015080

08007594 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8007594:	b510      	push	{r4, lr}
 8007596:	b090      	sub	sp, #64	; 0x40
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8007598:	4613      	mov	r3, r2
 800759a:	b302      	cbz	r2, 80075de <sx12xx_lora_recv_async+0x4a>
 800759c:	b103      	cbz	r3, 80075a0 <sx12xx_lora_recv_async+0xc>
 800759e:	b301      	cbz	r1, 80075e2 <sx12xx_lora_recv_async+0x4e>
      LOG_ERR("One of callback functions cannot be equal NULL");
      return -EINVAL;
  }

	/* Cancel ongoing reception */
	if (cb == NULL) {
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d043      	beq.n	800762c <sx12xx_lora_recv_async+0x98>
 80075a4:	4a27      	ldr	r2, [pc, #156]	; (8007644 <sx12xx_lora_recv_async+0xb0>)
 80075a6:	2001      	movs	r0, #1
 80075a8:	f3bf 8f5b 	dmb	ish
 80075ac:	e852 4f00 	ldrex	r4, [r2]
 80075b0:	2c00      	cmp	r4, #0
 80075b2:	d104      	bne.n	80075be <sx12xx_lora_recv_async+0x2a>
 80075b4:	e842 0c00 	strex	ip, r0, [r2]
 80075b8:	f1bc 0f00 	cmp.w	ip, #0
 80075bc:	d1f6      	bne.n	80075ac <sx12xx_lora_recv_async+0x18>
 80075be:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 80075c2:	d13c      	bne.n	800763e <sx12xx_lora_recv_async+0xaa>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 80075c4:	3a44      	subs	r2, #68	; 0x44
 80075c6:	6091      	str	r1, [r2, #8]
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 80075c8:	60d3      	str	r3, [r2, #12]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80075ca:	4c1f      	ldr	r4, [pc, #124]	; (8007648 <sx12xx_lora_recv_async+0xb4>)
 80075cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075ce:	21ff      	movs	r1, #255	; 0xff
 80075d0:	4798      	blx	r3
	Radio.Rx(0);
 80075d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075d4:	2000      	movs	r0, #0
 80075d6:	4798      	blx	r3

	return 0;
 80075d8:	2000      	movs	r0, #0
}
 80075da:	b010      	add	sp, #64	; 0x40
 80075dc:	bd10      	pop	{r4, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80075de:	2900      	cmp	r1, #0
 80075e0:	d0dc      	beq.n	800759c <sx12xx_lora_recv_async+0x8>
      LOG_ERR("One of callback functions cannot be equal NULL");
 80075e2:	2201      	movs	r2, #1
 80075e4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80075e8:	4b18      	ldr	r3, [pc, #96]	; (800764c <sx12xx_lora_recv_async+0xb8>)
 80075ea:	930e      	str	r3, [sp, #56]	; 0x38
 80075ec:	2300      	movs	r3, #0
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	2102      	movs	r1, #2
 80075f2:	f88d 1004 	strb.w	r1, [sp, #4]
 80075f6:	9901      	ldr	r1, [sp, #4]
 80075f8:	910d      	str	r1, [sp, #52]	; 0x34
 80075fa:	4619      	mov	r1, r3
 80075fc:	f363 0100 	bfi	r1, r3, #0, #1
 8007600:	f363 0141 	bfi	r1, r3, #1, #1
 8007604:	f363 0182 	bfi	r1, r3, #2, #1
 8007608:	f363 01c5 	bfi	r1, r3, #3, #3
 800760c:	f362 1188 	bfi	r1, r2, #6, #3
 8007610:	2208      	movs	r2, #8
 8007612:	f362 2152 	bfi	r1, r2, #9, #10
 8007616:	f363 41de 	bfi	r1, r3, #19, #12
 800761a:	f363 71df 	bfi	r1, r3, #31, #1
 800761e:	aa0d      	add	r2, sp, #52	; 0x34
 8007620:	480b      	ldr	r0, [pc, #44]	; (8007650 <sx12xx_lora_recv_async+0xbc>)
 8007622:	f00a f87f 	bl	8011724 <z_impl_z_log_msg2_static_create>
      return -EINVAL;
 8007626:	f06f 0015 	mvn.w	r0, #21
 800762a:	e7d6      	b.n	80075da <sx12xx_lora_recv_async+0x46>
		if (!modem_release(&dev_data)) {
 800762c:	4809      	ldr	r0, [pc, #36]	; (8007654 <sx12xx_lora_recv_async+0xc0>)
 800762e:	f7ff fcff 	bl	8007030 <modem_release>
 8007632:	b108      	cbz	r0, 8007638 <sx12xx_lora_recv_async+0xa4>
		return 0;
 8007634:	2000      	movs	r0, #0
 8007636:	e7d0      	b.n	80075da <sx12xx_lora_recv_async+0x46>
			return -EINVAL;
 8007638:	f06f 0015 	mvn.w	r0, #21
 800763c:	e7cd      	b.n	80075da <sx12xx_lora_recv_async+0x46>
		return -EBUSY;
 800763e:	f06f 000f 	mvn.w	r0, #15
 8007642:	e7ca      	b.n	80075da <sx12xx_lora_recv_async+0x46>
 8007644:	200014c0 	.word	0x200014c0
 8007648:	080163cc 	.word	0x080163cc
 800764c:	0801620c 	.word	0x0801620c
 8007650:	08015080 	.word	0x08015080
 8007654:	2000147c 	.word	0x2000147c

08007658 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	460c      	mov	r4, r1
 800765e:	4b2b      	ldr	r3, [pc, #172]	; (800770c <sx12xx_lora_config+0xb4>)
 8007660:	2201      	movs	r2, #1
 8007662:	f3bf 8f5b 	dmb	ish
 8007666:	e853 1f00 	ldrex	r1, [r3]
 800766a:	2900      	cmp	r1, #0
 800766c:	d103      	bne.n	8007676 <sx12xx_lora_config+0x1e>
 800766e:	e843 2000 	strex	r0, r2, [r3]
 8007672:	2800      	cmp	r0, #0
 8007674:	d1f7      	bne.n	8007666 <sx12xx_lora_config+0xe>
 8007676:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800767a:	d143      	bne.n	8007704 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 800767c:	4b24      	ldr	r3, [pc, #144]	; (8007710 <sx12xx_lora_config+0xb8>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	4798      	blx	r3

	if (config->tx) {
 8007684:	7b63      	ldrb	r3, [r4, #13]
 8007686:	b9eb      	cbnz	r3, 80076c4 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8007688:	7ae2      	ldrb	r2, [r4, #11]
 800768a:	2a00      	cmp	r2, #0
 800768c:	d038      	beq.n	8007700 <sx12xx_lora_config+0xa8>
 800768e:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <sx12xx_lora_config+0xb8>)
 8007692:	699d      	ldr	r5, [r3, #24]
 8007694:	2001      	movs	r0, #1
 8007696:	9009      	str	r0, [sp, #36]	; 0x24
 8007698:	2300      	movs	r3, #0
 800769a:	9308      	str	r3, [sp, #32]
 800769c:	9307      	str	r3, [sp, #28]
 800769e:	9306      	str	r3, [sp, #24]
 80076a0:	9305      	str	r3, [sp, #20]
 80076a2:	9104      	str	r1, [sp, #16]
 80076a4:	9203      	str	r2, [sp, #12]
 80076a6:	220a      	movs	r2, #10
 80076a8:	9202      	str	r2, [sp, #8]
 80076aa:	8922      	ldrh	r2, [r4, #8]
 80076ac:	9201      	str	r2, [sp, #4]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	79a3      	ldrb	r3, [r4, #6]
 80076b2:	7962      	ldrb	r2, [r4, #5]
 80076b4:	7921      	ldrb	r1, [r4, #4]
 80076b6:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 80076b8:	4816      	ldr	r0, [pc, #88]	; (8007714 <sx12xx_lora_config+0xbc>)
 80076ba:	f7ff fcb9 	bl	8007030 <modem_release>
	return 0;
 80076be:	2000      	movs	r0, #0
}
 80076c0:	b00a      	add	sp, #40	; 0x28
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80076c4:	4d14      	ldr	r5, [pc, #80]	; (8007718 <sx12xx_lora_config+0xc0>)
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	68a2      	ldr	r2, [r4, #8]
 80076cc:	68e3      	ldr	r3, [r4, #12]
 80076ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <sx12xx_lora_config+0xb8>)
 80076d2:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 80076d4:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 80076d6:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80076d8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80076dc:	9208      	str	r2, [sp, #32]
 80076de:	2200      	movs	r2, #0
 80076e0:	9207      	str	r2, [sp, #28]
 80076e2:	9206      	str	r2, [sp, #24]
 80076e4:	9205      	str	r2, [sp, #20]
 80076e6:	2001      	movs	r0, #1
 80076e8:	9004      	str	r0, [sp, #16]
 80076ea:	7ae6      	ldrb	r6, [r4, #11]
 80076ec:	9603      	str	r6, [sp, #12]
 80076ee:	8926      	ldrh	r6, [r4, #8]
 80076f0:	9602      	str	r6, [sp, #8]
 80076f2:	9101      	str	r1, [sp, #4]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	7923      	ldrb	r3, [r4, #4]
 80076f8:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80076fc:	47a8      	blx	r5
 80076fe:	e7db      	b.n	80076b8 <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8007700:	2100      	movs	r1, #0
 8007702:	e7c5      	b.n	8007690 <sx12xx_lora_config+0x38>
		return -EBUSY;
 8007704:	f06f 000f 	mvn.w	r0, #15
 8007708:	e7da      	b.n	80076c0 <sx12xx_lora_config+0x68>
 800770a:	bf00      	nop
 800770c:	200014c0 	.word	0x200014c0
 8007710:	080163cc 	.word	0x080163cc
 8007714:	2000147c 	.word	0x2000147c
 8007718:	200014b0 	.word	0x200014b0

0800771c <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 800771c:	b530      	push	{r4, r5, lr}
 800771e:	b099      	sub	sp, #100	; 0x64
 8007720:	4608      	mov	r0, r1
 8007722:	4611      	mov	r1, r2
 8007724:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007726:	ab0e      	add	r3, sp, #56	; 0x38
 8007728:	930e      	str	r3, [sp, #56]	; 0x38
 800772a:	930f      	str	r3, [sp, #60]	; 0x3c
 800772c:	2400      	movs	r4, #0
 800772e:	9410      	str	r4, [sp, #64]	; 0x40
 8007730:	9411      	str	r4, [sp, #68]	; 0x44
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8007732:	9409      	str	r4, [sp, #36]	; 0x24
 8007734:	940a      	str	r4, [sp, #40]	; 0x28
 8007736:	940b      	str	r4, [sp, #44]	; 0x2c
 8007738:	940c      	str	r4, [sp, #48]	; 0x30
 800773a:	940d      	str	r4, [sp, #52]	; 0x34
 800773c:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 8007740:	2401      	movs	r4, #1
 8007742:	f364 0c04 	bfi	ip, r4, #0, #5
 8007746:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
 800774a:	930d      	str	r3, [sp, #52]	; 0x34
 800774c:	4b32      	ldr	r3, [pc, #200]	; (8007818 <sx12xx_lora_test_cw+0xfc>)
 800774e:	f3bf 8f5b 	dmb	ish
 8007752:	e853 2f00 	ldrex	r2, [r3]
 8007756:	2a00      	cmp	r2, #0
 8007758:	d104      	bne.n	8007764 <sx12xx_lora_test_cw+0x48>
 800775a:	e843 4c00 	strex	ip, r4, [r3]
 800775e:	f1bc 0f00 	cmp.w	ip, #0
 8007762:	d1f6      	bne.n	8007752 <sx12xx_lora_test_cw+0x36>
 8007764:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007768:	d153      	bne.n	8007812 <sx12xx_lora_test_cw+0xf6>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 800776a:	3b44      	subs	r3, #68	; 0x44
 800776c:	aa0e      	add	r2, sp, #56	; 0x38
 800776e:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8007770:	4a2a      	ldr	r2, [pc, #168]	; (800781c <sx12xx_lora_test_cw+0x100>)
 8007772:	615a      	str	r2, [r3, #20]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8007774:	4b2a      	ldr	r3, [pc, #168]	; (8007820 <sx12xx_lora_test_cw+0x104>)
 8007776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007778:	462a      	mov	r2, r5
 800777a:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 800777c:	b12d      	cbz	r5, 800778a <sx12xx_lora_test_cw+0x6e>
 800777e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007782:	fb02 f105 	mul.w	r1, r2, r5
 8007786:	2300      	movs	r3, #0
 8007788:	e001      	b.n	800778e <sx12xx_lora_test_cw+0x72>
 800778a:	2100      	movs	r1, #0
 800778c:	460b      	mov	r3, r1
 800778e:	008a      	lsls	r2, r1, #2
 8007790:	1852      	adds	r2, r2, r1
 8007792:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 8007796:	1892      	adds	r2, r2, r2
 8007798:	415b      	adcs	r3, r3
 800779a:	2101      	movs	r1, #1
 800779c:	a809      	add	r0, sp, #36	; 0x24
 800779e:	f007 fedd 	bl	800f55c <z_impl_k_poll>
    if (ret < 0) {
 80077a2:	2800      	cmp	r0, #0
 80077a4:	db02      	blt.n	80077ac <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 80077a6:	2000      	movs	r0, #0
}
 80077a8:	b019      	add	sp, #100	; 0x64
 80077aa:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("CW test failed!");
 80077ac:	2201      	movs	r2, #1
 80077ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <sx12xx_lora_test_cw+0x108>)
 80077b4:	9316      	str	r3, [sp, #88]	; 0x58
 80077b6:	2300      	movs	r3, #0
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	2102      	movs	r1, #2
 80077bc:	f88d 1000 	strb.w	r1, [sp]
 80077c0:	9900      	ldr	r1, [sp, #0]
 80077c2:	9115      	str	r1, [sp, #84]	; 0x54
 80077c4:	4619      	mov	r1, r3
 80077c6:	f363 0100 	bfi	r1, r3, #0, #1
 80077ca:	f363 0141 	bfi	r1, r3, #1, #1
 80077ce:	f363 0182 	bfi	r1, r3, #2, #1
 80077d2:	f363 01c5 	bfi	r1, r3, #3, #3
 80077d6:	f362 1188 	bfi	r1, r2, #6, #3
 80077da:	2208      	movs	r2, #8
 80077dc:	f362 2152 	bfi	r1, r2, #9, #10
 80077e0:	f363 41de 	bfi	r1, r3, #19, #12
 80077e4:	f363 71df 	bfi	r1, r3, #31, #1
 80077e8:	aa15      	add	r2, sp, #84	; 0x54
 80077ea:	480f      	ldr	r0, [pc, #60]	; (8007828 <sx12xx_lora_test_cw+0x10c>)
 80077ec:	f009 ff9a 	bl	8011724 <z_impl_z_log_msg2_static_create>
        if (!modem_release(&dev_data)) {
 80077f0:	480e      	ldr	r0, [pc, #56]	; (800782c <sx12xx_lora_test_cw+0x110>)
 80077f2:	f7ff fc1d 	bl	8007030 <modem_release>
 80077f6:	b118      	cbz	r0, 8007800 <sx12xx_lora_test_cw+0xe4>
        dev_data.events.TxTimeout = NULL;
 80077f8:	2000      	movs	r0, #0
 80077fa:	4b0c      	ldr	r3, [pc, #48]	; (800782c <sx12xx_lora_test_cw+0x110>)
 80077fc:	6158      	str	r0, [r3, #20]
 80077fe:	e7d3      	b.n	80077a8 <sx12xx_lora_test_cw+0x8c>
 8007800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007808:	2101      	movs	r1, #1
 800780a:	a809      	add	r0, sp, #36	; 0x24
 800780c:	f007 fea6 	bl	800f55c <z_impl_k_poll>
 8007810:	e7f2      	b.n	80077f8 <sx12xx_lora_test_cw+0xdc>
		return -EBUSY;
 8007812:	f06f 000f 	mvn.w	r0, #15
 8007816:	e7c7      	b.n	80077a8 <sx12xx_lora_test_cw+0x8c>
 8007818:	200014c0 	.word	0x200014c0
 800781c:	08007081 	.word	0x08007081
 8007820:	080163cc 	.word	0x080163cc
 8007824:	0801623c 	.word	0x0801623c
 8007828:	08015080 	.word	0x08015080
 800782c:	2000147c 	.word	0x2000147c

08007830 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8007830:	b189      	cbz	r1, 8007856 <sx12xx_lora_time_on_air+0x26>
{
 8007832:	b510      	push	{r4, lr}
 8007834:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8007836:	4b09      	ldr	r3, [pc, #36]	; (800785c <sx12xx_lora_time_on_air+0x2c>)
 8007838:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800783a:	2001      	movs	r0, #1
 800783c:	9003      	str	r0, [sp, #12]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	7acb      	ldrb	r3, [r1, #11]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	890b      	ldrh	r3, [r1, #8]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	798b      	ldrb	r3, [r1, #6]
 800784c:	794a      	ldrb	r2, [r1, #5]
 800784e:	7909      	ldrb	r1, [r1, #4]
 8007850:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 8007852:	b004      	add	sp, #16
 8007854:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007856:	f06f 0015 	mvn.w	r0, #21
}
 800785a:	4770      	bx	lr
 800785c:	080163cc 	.word	0x080163cc

08007860 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 8007860:	b311      	cbz	r1, 80078a8 <sx12xx_lora_is_channel_free+0x48>
{
 8007862:	b510      	push	{r4, lr}
 8007864:	4608      	mov	r0, r1
 8007866:	4915      	ldr	r1, [pc, #84]	; (80078bc <sx12xx_lora_is_channel_free+0x5c>)
 8007868:	2401      	movs	r4, #1
 800786a:	f3bf 8f5b 	dmb	ish
 800786e:	e851 cf00 	ldrex	ip, [r1]
 8007872:	f1bc 0f00 	cmp.w	ip, #0
 8007876:	d104      	bne.n	8007882 <sx12xx_lora_is_channel_free+0x22>
 8007878:	e841 4e00 	strex	lr, r4, [r1]
 800787c:	f1be 0f00 	cmp.w	lr, #0
 8007880:	d1f5      	bne.n	800786e <sx12xx_lora_is_channel_free+0xe>
 8007882:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8007886:	d112      	bne.n	80078ae <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8007888:	490d      	ldr	r1, [pc, #52]	; (80078c0 <sx12xx_lora_is_channel_free+0x60>)
 800788a:	690c      	ldr	r4, [r1, #16]
 800788c:	f890 c004 	ldrb.w	ip, [r0, #4]
 8007890:	490c      	ldr	r1, [pc, #48]	; (80078c4 <sx12xx_lora_is_channel_free+0x64>)
 8007892:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	47a0      	blx	r4
 800789a:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 800789c:	480a      	ldr	r0, [pc, #40]	; (80078c8 <sx12xx_lora_is_channel_free+0x68>)
 800789e:	f7ff fbc7 	bl	8007030 <modem_release>
 80078a2:	b138      	cbz	r0, 80078b4 <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 80078a4:	4620      	mov	r0, r4
}
 80078a6:	bd10      	pop	{r4, pc}
        return -EINVAL;
 80078a8:	f06f 0015 	mvn.w	r0, #21
}
 80078ac:	4770      	bx	lr
        return -EBUSY;
 80078ae:	f06f 000f 	mvn.w	r0, #15
 80078b2:	e7f8      	b.n	80078a6 <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 80078b4:	f06f 0015 	mvn.w	r0, #21
 80078b8:	e7f5      	b.n	80078a6 <sx12xx_lora_is_channel_free+0x46>
 80078ba:	bf00      	nop
 80078bc:	200014c0 	.word	0x200014c0
 80078c0:	080163cc 	.word	0x080163cc
 80078c4:	0801628c 	.word	0x0801628c
 80078c8:	2000147c 	.word	0x2000147c

080078cc <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 80078cc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <sx12xx_init+0x40>)
 80078d0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80078d4:	2400      	movs	r4, #0
 80078d6:	f3bf 8f5b 	dmb	ish
 80078da:	e852 1f00 	ldrex	r1, [r2]
 80078de:	e842 4500 	strex	r5, r4, [r2]
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	d1f9      	bne.n	80078da <sx12xx_init+0xe>
 80078e6:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 80078ea:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 80078ec:	4a08      	ldr	r2, [pc, #32]	; (8007910 <sx12xx_init+0x44>)
 80078ee:	611a      	str	r2, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <sx12xx_init+0x48>)
 80078f2:	619a      	str	r2, [r3, #24]
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 80078f4:	4a08      	ldr	r2, [pc, #32]	; (8007918 <sx12xx_init+0x4c>)
 80078f6:	621a      	str	r2, [r3, #32]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 80078f8:	61da      	str	r2, [r3, #28]
	Radio.Init(&dev_data.events);
 80078fa:	4d08      	ldr	r5, [pc, #32]	; (800791c <sx12xx_init+0x50>)
 80078fc:	682a      	ldr	r2, [r5, #0]
 80078fe:	f103 0010 	add.w	r0, r3, #16
 8007902:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8007904:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007906:	4798      	blx	r3

	return 0;
}
 8007908:	4620      	mov	r0, r4
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	2000147c 	.word	0x2000147c
 8007910:	08007121 	.word	0x08007121
 8007914:	0800713d 	.word	0x0800713d
 8007918:	080070a1 	.word	0x080070a1
 800791c:	080163cc 	.word	0x080163cc

08007920 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8007920:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8007922:	4b04      	ldr	r3, [pc, #16]	; (8007934 <sx127x_dio_work_handle+0x14>)
 8007924:	1ac0      	subs	r0, r0, r3
 8007926:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8007928:	4b03      	ldr	r3, [pc, #12]	; (8007938 <sx127x_dio_work_handle+0x18>)
 800792a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800792e:	2000      	movs	r0, #0
 8007930:	4798      	blx	r3
}
 8007932:	bd08      	pop	{r3, pc}
 8007934:	20001528 	.word	0x20001528
 8007938:	20000280 	.word	0x20000280

0800793c <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 800793c:	b510      	push	{r4, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8007944:	f10d 0007 	add.w	r0, sp, #7
 8007948:	9006      	str	r0, [sp, #24]
 800794a:	2001      	movs	r0, #1
 800794c:	9007      	str	r0, [sp, #28]
 800794e:	9208      	str	r2, [sp, #32]
 8007950:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8007952:	ab06      	add	r3, sp, #24
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	2302      	movs	r3, #2
 8007958:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 800795a:	b149      	cbz	r1, 8007970 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 800795c:	490b      	ldr	r1, [pc, #44]	; (800798c <sx127x_transceive+0x50>)
 800795e:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8007960:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8007962:	681c      	ldr	r4, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	aa04      	add	r2, sp, #16
 8007968:	3108      	adds	r1, #8
 800796a:	47a0      	blx	r4
}
 800796c:	b00a      	add	sp, #40	; 0x28
 800796e:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8007970:	ab06      	add	r3, sp, #24
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	2302      	movs	r3, #2
 8007976:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <sx127x_transceive+0x50>)
 800797a:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 800797c:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800797e:	681c      	ldr	r4, [r3, #0]
 8007980:	ab02      	add	r3, sp, #8
 8007982:	aa04      	add	r2, sp, #16
 8007984:	3108      	adds	r1, #8
 8007986:	47a0      	blx	r4
 8007988:	e7f0      	b.n	800796c <sx127x_transceive+0x30>
 800798a:	bf00      	nop
 800798c:	20001504 	.word	0x20001504

08007990 <sx127x_irq_callback>:
{
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	4605      	mov	r5, r0
 8007994:	fa92 f6a2 	rbit	r6, r2
 8007998:	fab6 f686 	clz	r6, r6
 800799c:	b90a      	cbnz	r2, 80079a2 <sx127x_irq_callback+0x12>
 800799e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80079a2:	2400      	movs	r4, #0
 80079a4:	e000      	b.n	80079a8 <sx127x_irq_callback+0x18>
 80079a6:	3401      	adds	r4, #1
 80079a8:	2c03      	cmp	r4, #3
 80079aa:	d813      	bhi.n	80079d4 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 80079ac:	1d23      	adds	r3, r4, #4
 80079ae:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <sx127x_irq_callback+0x48>)
 80079b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	42ab      	cmp	r3, r5
 80079b8:	d1f5      	bne.n	80079a6 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 80079ba:	4b08      	ldr	r3, [pc, #32]	; (80079dc <sx127x_irq_callback+0x4c>)
 80079bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079c0:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 80079c2:	42b3      	cmp	r3, r6
 80079c4:	d1ef      	bne.n	80079a6 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 80079c6:	1ca0      	adds	r0, r4, #2
 80079c8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80079cc:	3004      	adds	r0, #4
 80079ce:	f006 fd61 	bl	800e494 <k_work_submit>
 80079d2:	e7e8      	b.n	80079a6 <sx127x_irq_callback+0x16>
}
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	bf00      	nop
 80079d8:	20001504 	.word	0x20001504
 80079dc:	08016438 	.word	0x08016438

080079e0 <SX1276Reset>:
{
 80079e0:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 80079e2:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <SX1276Reset+0x64>)
 80079e4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80079e6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f013 0f01 	tst.w	r3, #1
 80079ee:	d11b      	bne.n	8007a28 <SX1276Reset+0x48>
 80079f0:	2301      	movs	r3, #1
	if (value != 0)	{
 80079f2:	b1db      	cbz	r3, 8007a2c <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 80079f4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2101      	movs	r1, #1
 80079fa:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 80079fc:	200a      	movs	r0, #10
 80079fe:	2100      	movs	r1, #0
 8007a00:	f007 f91e 	bl	800ec40 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <SX1276Reset+0x64>)
 8007a06:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007a08:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f013 0f01 	tst.w	r3, #1
 8007a10:	d111      	bne.n	8007a36 <SX1276Reset+0x56>
 8007a12:	2300      	movs	r3, #0
	if (value != 0)	{
 8007a14:	b18b      	cbz	r3, 8007a3a <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8007a16:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4798      	blx	r3
 8007a1e:	203c      	movs	r0, #60	; 0x3c
 8007a20:	2100      	movs	r1, #0
 8007a22:	f007 f90d 	bl	800ec40 <z_impl_k_sleep>
}
 8007a26:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e7e2      	b.n	80079f2 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8007a2c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	2101      	movs	r1, #1
 8007a32:	4798      	blx	r3
 8007a34:	e7e2      	b.n	80079fc <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e7ec      	b.n	8007a14 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8007a3a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4798      	blx	r3
 8007a42:	e7ec      	b.n	8007a1e <SX1276Reset+0x3e>
 8007a44:	20001504 	.word	0x20001504

08007a48 <SX1276IoIrqInit>:
{
 8007a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4a:	b095      	sub	sp, #84	; 0x54
 8007a4c:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007a4e:	2400      	movs	r4, #0
 8007a50:	e04c      	b.n	8007aec <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8007a52:	4b5a      	ldr	r3, [pc, #360]	; (8007bbc <SX1276IoIrqInit+0x174>)
 8007a54:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8007a58:	9302      	str	r3, [sp, #8]
 8007a5a:	4b59      	ldr	r3, [pc, #356]	; (8007bc0 <SX1276IoIrqInit+0x178>)
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	9000      	str	r0, [sp, #0]
 8007a60:	4603      	mov	r3, r0
 8007a62:	2201      	movs	r2, #1
 8007a64:	4957      	ldr	r1, [pc, #348]	; (8007bc4 <SX1276IoIrqInit+0x17c>)
 8007a66:	f00a ff6a 	bl	801293e <z_log_msg2_runtime_create>
}
 8007a6a:	b015      	add	sp, #84	; 0x54
 8007a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007a72:	f013 0f01 	tst.w	r3, #1
 8007a76:	d06f      	beq.n	8007b58 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8007a78:	2301      	movs	r3, #1
 8007a7a:	fa03 fc01 	lsl.w	ip, r3, r1
 8007a7e:	6833      	ldr	r3, [r6, #0]
 8007a80:	ea43 030c 	orr.w	r3, r3, ip
 8007a84:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8007a8a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007a8e:	4b4e      	ldr	r3, [pc, #312]	; (8007bc8 <SX1276IoIrqInit+0x180>)
 8007a90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8007a94:	4b49      	ldr	r3, [pc, #292]	; (8007bbc <SX1276IoIrqInit+0x174>)
 8007a96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a9a:	791e      	ldrb	r6, [r3, #4]
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	40b3      	lsls	r3, r6
	callback->handler = handler;
 8007aa0:	4a4a      	ldr	r2, [pc, #296]	; (8007bcc <SX1276IoIrqInit+0x184>)
 8007aa2:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8007aa4:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8007aa6:	1d23      	adds	r3, r4, #4
 8007aa8:	4a49      	ldr	r2, [pc, #292]	; (8007bd0 <SX1276IoIrqInit+0x188>)
 8007aaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007aae:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007ab0:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d057      	beq.n	8007b68 <SX1276IoIrqInit+0x120>
	return api->manage_callback(port, callback, true);
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4798      	blx	r3
 8007abc:	2800      	cmp	r0, #0
 8007abe:	db56      	blt.n	8007b6e <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8007ac0:	1d23      	adds	r3, r4, #4
 8007ac2:	4a43      	ldr	r2, [pc, #268]	; (8007bd0 <SX1276IoIrqInit+0x188>)
 8007ac4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ac8:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007aca:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8007acc:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8007ad4:	421a      	tst	r2, r3
 8007ad6:	d16d      	bne.n	8007bb4 <SX1276IoIrqInit+0x16c>
 8007ad8:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8007adc:	698f      	ldr	r7, [r1, #24]
 8007ade:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8007ae2:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007aea:	3401      	adds	r4, #1
 8007aec:	2c03      	cmp	r4, #3
 8007aee:	d8bc      	bhi.n	8007a6a <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 8007af0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0f8      	beq.n	8007aea <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8007af8:	4b30      	ldr	r3, [pc, #192]	; (8007bbc <SX1276IoIrqInit+0x174>)
 8007afa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8007afe:	f005 ff19 	bl	800d934 <z_impl_device_get_binding>
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	4a32      	ldr	r2, [pc, #200]	; (8007bd0 <SX1276IoIrqInit+0x188>)
 8007b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b0a:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0a0      	beq.n	8007a52 <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8007b10:	4e2f      	ldr	r6, [pc, #188]	; (8007bd0 <SX1276IoIrqInit+0x188>)
 8007b12:	1ca0      	adds	r0, r4, #2
 8007b14:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8007b18:	492e      	ldr	r1, [pc, #184]	; (8007bd4 <SX1276IoIrqInit+0x18c>)
 8007b1a:	3004      	adds	r0, #4
 8007b1c:	f00c f884 	bl	8013c28 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007b20:	1d23      	adds	r3, r4, #4
 8007b22:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007b26:	6870      	ldr	r0, [r6, #4]
 8007b28:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <SX1276IoIrqInit+0x174>)
 8007b2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b2e:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8007b30:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8007b3a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8007b3c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8007b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d093      	beq.n	8007a6e <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007b46:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007b4a:	d090      	beq.n	8007a6e <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8007b4c:	f013 0f01 	tst.w	r3, #1
 8007b50:	d08d      	beq.n	8007a6e <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007b52:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007b56:	e78a      	b.n	8007a6e <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007b58:	2301      	movs	r3, #1
 8007b5a:	fa03 fc01 	lsl.w	ip, r3, r1
 8007b5e:	6833      	ldr	r3, [r6, #0]
 8007b60:	ea23 030c 	bic.w	r3, r3, ip
 8007b64:	6033      	str	r3, [r6, #0]
 8007b66:	e78e      	b.n	8007a86 <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8007b68:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007b6c:	e7a6      	b.n	8007abc <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007b74:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <SX1276IoIrqInit+0x190>)
 8007b76:	9312      	str	r3, [sp, #72]	; 0x48
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	f88d 1014 	strb.w	r1, [sp, #20]
 8007b82:	9905      	ldr	r1, [sp, #20]
 8007b84:	9111      	str	r1, [sp, #68]	; 0x44
 8007b86:	4619      	mov	r1, r3
 8007b88:	f363 0100 	bfi	r1, r3, #0, #1
 8007b8c:	f363 0141 	bfi	r1, r3, #1, #1
 8007b90:	f363 0182 	bfi	r1, r3, #2, #1
 8007b94:	f363 01c5 	bfi	r1, r3, #3, #3
 8007b98:	f362 1188 	bfi	r1, r2, #6, #3
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	f362 2152 	bfi	r1, r2, #9, #10
 8007ba2:	f363 41de 	bfi	r1, r3, #19, #12
 8007ba6:	f363 71df 	bfi	r1, r3, #31, #1
 8007baa:	aa11      	add	r2, sp, #68	; 0x44
 8007bac:	4805      	ldr	r0, [pc, #20]	; (8007bc4 <SX1276IoIrqInit+0x17c>)
 8007bae:	f009 fdb9 	bl	8011724 <z_impl_z_log_msg2_static_create>
			return;
 8007bb2:	e75a      	b.n	8007a6a <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8007bb4:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8007bb8:	e790      	b.n	8007adc <SX1276IoIrqInit+0x94>
 8007bba:	bf00      	nop
 8007bbc:	08016438 	.word	0x08016438
 8007bc0:	08016174 	.word	0x08016174
 8007bc4:	08015078 	.word	0x08015078
 8007bc8:	200014d4 	.word	0x200014d4
 8007bcc:	08007991 	.word	0x08007991
 8007bd0:	20001504 	.word	0x20001504
 8007bd4:	08007921 	.word	0x08007921
 8007bd8:	08016298 	.word	0x08016298

08007bdc <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8007bdc:	b510      	push	{r4, lr}
 8007bde:	b090      	sub	sp, #64	; 0x40
 8007be0:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8007be2:	b2c0      	uxtb	r0, r0
 8007be4:	f00a febd 	bl	8012962 <sx127x_read>
	if (ret < 0) {
 8007be8:	2800      	cmp	r0, #0
 8007bea:	db01      	blt.n	8007bf0 <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8007bec:	b010      	add	sp, #64	; 0x40
 8007bee:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <SX1276ReadBuffer+0x5c>)
 8007bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8007bfa:	940f      	str	r4, [sp, #60]	; 0x3c
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	2103      	movs	r1, #3
 8007c02:	f88d 1004 	strb.w	r1, [sp, #4]
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	910d      	str	r1, [sp, #52]	; 0x34
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f363 0100 	bfi	r1, r3, #0, #1
 8007c10:	f363 0141 	bfi	r1, r3, #1, #1
 8007c14:	f363 0182 	bfi	r1, r3, #2, #1
 8007c18:	f363 01c5 	bfi	r1, r3, #3, #3
 8007c1c:	f362 1188 	bfi	r1, r2, #6, #3
 8007c20:	220c      	movs	r2, #12
 8007c22:	f362 2152 	bfi	r1, r2, #9, #10
 8007c26:	f363 41de 	bfi	r1, r3, #19, #12
 8007c2a:	f363 71df 	bfi	r1, r3, #31, #1
 8007c2e:	aa0d      	add	r2, sp, #52	; 0x34
 8007c30:	4802      	ldr	r0, [pc, #8]	; (8007c3c <SX1276ReadBuffer+0x60>)
 8007c32:	f009 fd77 	bl	8011724 <z_impl_z_log_msg2_static_create>
}
 8007c36:	e7d9      	b.n	8007bec <SX1276ReadBuffer+0x10>
 8007c38:	080162b8 	.word	0x080162b8
 8007c3c:	08015078 	.word	0x08015078

08007c40 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8007c40:	b530      	push	{r4, r5, lr}
 8007c42:	b0a7      	sub	sp, #156	; 0x9c
 8007c44:	4604      	mov	r4, r0
 8007c46:	4882      	ldr	r0, [pc, #520]	; (8007e50 <sx127x_lora_init+0x210>)
 8007c48:	f005 fe74 	bl	800d934 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8007c4c:	4b81      	ldr	r3, [pc, #516]	; (8007e54 <sx127x_lora_init+0x214>)
 8007c4e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8007c50:	b300      	cbz	r0, 8007c94 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8007c52:	4b80      	ldr	r3, [pc, #512]	; (8007e54 <sx127x_lora_init+0x214>)
 8007c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c58:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8007c5a:	4a7f      	ldr	r2, [pc, #508]	; (8007e58 <sx127x_lora_init+0x218>)
 8007c5c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	81da      	strh	r2, [r3, #14]
 8007c62:	487e      	ldr	r0, [pc, #504]	; (8007e5c <sx127x_lora_init+0x21c>)
 8007c64:	f005 fe66 	bl	800d934 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8007c68:	4b7d      	ldr	r3, [pc, #500]	; (8007e60 <sx127x_lora_init+0x220>)
 8007c6a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8007c6c:	b1f8      	cbz	r0, 8007cae <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8007c6e:	4b7c      	ldr	r3, [pc, #496]	; (8007e60 <sx127x_lora_init+0x220>)
 8007c70:	2206      	movs	r2, #6
 8007c72:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8007c74:	2201      	movs	r2, #1
 8007c76:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8007c7c:	4875      	ldr	r0, [pc, #468]	; (8007e54 <sx127x_lora_init+0x214>)
 8007c7e:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8007c80:	f641 2307 	movw	r3, #6663	; 0x1a07
 8007c84:	4975      	ldr	r1, [pc, #468]	; (8007e5c <sx127x_lora_init+0x21c>)
 8007c86:	f7ff faad 	bl	80071e4 <__sx12xx_configure_pin>
	if (ret) {
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	b1e0      	cbz	r0, 8007cc8 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8007c8e:	4628      	mov	r0, r5
 8007c90:	b027      	add	sp, #156	; 0x9c
 8007c92:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8007c94:	4b6e      	ldr	r3, [pc, #440]	; (8007e50 <sx127x_lora_init+0x210>)
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	4b72      	ldr	r3, [pc, #456]	; (8007e64 <sx127x_lora_init+0x224>)
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	9000      	str	r0, [sp, #0]
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4971      	ldr	r1, [pc, #452]	; (8007e68 <sx127x_lora_init+0x228>)
 8007ca4:	f00a fe4b 	bl	801293e <z_log_msg2_runtime_create>
		return -EINVAL;
 8007ca8:	f06f 0515 	mvn.w	r5, #21
 8007cac:	e7ef      	b.n	8007c8e <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 8007cae:	4b6b      	ldr	r3, [pc, #428]	; (8007e5c <sx127x_lora_init+0x21c>)
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	4b6c      	ldr	r3, [pc, #432]	; (8007e64 <sx127x_lora_init+0x224>)
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	9000      	str	r0, [sp, #0]
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2201      	movs	r2, #1
 8007cbc:	496a      	ldr	r1, [pc, #424]	; (8007e68 <sx127x_lora_init+0x228>)
 8007cbe:	f00a fe3e 	bl	801293e <z_log_msg2_runtime_create>
		return -EIO;
 8007cc2:	f06f 0504 	mvn.w	r5, #4
 8007cc6:	e7e2      	b.n	8007c8e <sx127x_lora_init+0x4e>
 8007cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ccc:	2100      	movs	r1, #0
 8007cce:	f006 ffb7 	bl	800ec40 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007cd2:	4b60      	ldr	r3, [pc, #384]	; (8007e54 <sx127x_lora_init+0x214>)
 8007cd4:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007cd6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f013 0f01 	tst.w	r3, #1
 8007cde:	d165      	bne.n	8007dac <sx127x_lora_init+0x16c>
 8007ce0:	462b      	mov	r3, r5
	if (value != 0)	{
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d064      	beq.n	8007db0 <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 8007ce6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2101      	movs	r1, #1
 8007cec:	4798      	blx	r3
 8007cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f006 ffa4 	bl	800ec40 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007cfe:	2042      	movs	r0, #66	; 0x42
 8007d00:	f00a fe2f 	bl	8012962 <sx127x_read>
	if (ret < 0) {
 8007d04:	2800      	cmp	r0, #0
 8007d06:	db58      	blt.n	8007dba <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 8007d08:	2301      	movs	r3, #1
 8007d0a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d0e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8007d12:	4a56      	ldr	r2, [pc, #344]	; (8007e6c <sx127x_lora_init+0x22c>)
 8007d14:	9212      	str	r2, [sp, #72]	; 0x48
 8007d16:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	f88d 2010 	strb.w	r2, [sp, #16]
 8007d22:	9904      	ldr	r1, [sp, #16]
 8007d24:	9111      	str	r1, [sp, #68]	; 0x44
 8007d26:	4619      	mov	r1, r3
 8007d28:	f363 0100 	bfi	r1, r3, #0, #1
 8007d2c:	f363 0141 	bfi	r1, r3, #1, #1
 8007d30:	f363 0182 	bfi	r1, r3, #2, #1
 8007d34:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d38:	f362 1188 	bfi	r1, r2, #6, #3
 8007d3c:	220c      	movs	r2, #12
 8007d3e:	f362 2152 	bfi	r1, r2, #9, #10
 8007d42:	f363 41de 	bfi	r1, r3, #19, #12
 8007d46:	f363 71df 	bfi	r1, r3, #31, #1
 8007d4a:	aa11      	add	r2, sp, #68	; 0x44
 8007d4c:	4846      	ldr	r0, [pc, #280]	; (8007e68 <sx127x_lora_init+0x228>)
 8007d4e:	f009 fce9 	bl	8011724 <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8007d52:	f00a fdf2 	bl	801293a <sx127x_antenna_configure>
	if (ret < 0) {
 8007d56:	2800      	cmp	r0, #0
 8007d58:	db54      	blt.n	8007e04 <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff fdb6 	bl	80078cc <sx12xx_init>
	if (ret < 0) {
 8007d60:	1e04      	subs	r4, r0, #0
 8007d62:	da94      	bge.n	8007c8e <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8007d64:	2201      	movs	r2, #1
 8007d66:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d6a:	4b41      	ldr	r3, [pc, #260]	; (8007e70 <sx127x_lora_init+0x230>)
 8007d6c:	9318      	str	r3, [sp, #96]	; 0x60
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	2102      	movs	r1, #2
 8007d74:	f88d 1010 	strb.w	r1, [sp, #16]
 8007d78:	9904      	ldr	r1, [sp, #16]
 8007d7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f363 0100 	bfi	r1, r3, #0, #1
 8007d82:	f363 0141 	bfi	r1, r3, #1, #1
 8007d86:	f363 0182 	bfi	r1, r3, #2, #1
 8007d8a:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d8e:	f362 1188 	bfi	r1, r2, #6, #3
 8007d92:	2208      	movs	r2, #8
 8007d94:	f362 2152 	bfi	r1, r2, #9, #10
 8007d98:	f363 41de 	bfi	r1, r3, #19, #12
 8007d9c:	f363 71df 	bfi	r1, r3, #31, #1
 8007da0:	aa17      	add	r2, sp, #92	; 0x5c
 8007da2:	4831      	ldr	r0, [pc, #196]	; (8007e68 <sx127x_lora_init+0x228>)
 8007da4:	f009 fcbe 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return ret;
 8007da8:	4625      	mov	r5, r4
 8007daa:	e770      	b.n	8007c8e <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e798      	b.n	8007ce2 <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8007db0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2101      	movs	r1, #1
 8007db6:	4798      	blx	r3
 8007db8:	e799      	b.n	8007cee <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007dc0:	4b2c      	ldr	r3, [pc, #176]	; (8007e74 <sx127x_lora_init+0x234>)
 8007dc2:	9324      	str	r3, [sp, #144]	; 0x90
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	2102      	movs	r1, #2
 8007dca:	f88d 1010 	strb.w	r1, [sp, #16]
 8007dce:	9904      	ldr	r1, [sp, #16]
 8007dd0:	9123      	str	r1, [sp, #140]	; 0x8c
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f363 0100 	bfi	r1, r3, #0, #1
 8007dd8:	f363 0141 	bfi	r1, r3, #1, #1
 8007ddc:	f363 0182 	bfi	r1, r3, #2, #1
 8007de0:	f363 01c5 	bfi	r1, r3, #3, #3
 8007de4:	f362 1188 	bfi	r1, r2, #6, #3
 8007de8:	2208      	movs	r2, #8
 8007dea:	f362 2152 	bfi	r1, r2, #9, #10
 8007dee:	f363 41de 	bfi	r1, r3, #19, #12
 8007df2:	f363 71df 	bfi	r1, r3, #31, #1
 8007df6:	aa23      	add	r2, sp, #140	; 0x8c
 8007df8:	481b      	ldr	r0, [pc, #108]	; (8007e68 <sx127x_lora_init+0x228>)
 8007dfa:	f009 fc93 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007dfe:	f06f 0504 	mvn.w	r5, #4
 8007e02:	e744      	b.n	8007c8e <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 8007e04:	2201      	movs	r2, #1
 8007e06:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <sx127x_lora_init+0x238>)
 8007e0c:	931e      	str	r3, [sp, #120]	; 0x78
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	2102      	movs	r1, #2
 8007e14:	f88d 1010 	strb.w	r1, [sp, #16]
 8007e18:	9904      	ldr	r1, [sp, #16]
 8007e1a:	911d      	str	r1, [sp, #116]	; 0x74
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f363 0100 	bfi	r1, r3, #0, #1
 8007e22:	f363 0141 	bfi	r1, r3, #1, #1
 8007e26:	f363 0182 	bfi	r1, r3, #2, #1
 8007e2a:	f363 01c5 	bfi	r1, r3, #3, #3
 8007e2e:	f362 1188 	bfi	r1, r2, #6, #3
 8007e32:	2208      	movs	r2, #8
 8007e34:	f362 2152 	bfi	r1, r2, #9, #10
 8007e38:	f363 41de 	bfi	r1, r3, #19, #12
 8007e3c:	f363 71df 	bfi	r1, r3, #31, #1
 8007e40:	aa1d      	add	r2, sp, #116	; 0x74
 8007e42:	4809      	ldr	r0, [pc, #36]	; (8007e68 <sx127x_lora_init+0x228>)
 8007e44:	f009 fc6e 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007e48:	f06f 0504 	mvn.w	r5, #4
 8007e4c:	e71f      	b.n	8007c8e <sx127x_lora_init+0x4e>
 8007e4e:	bf00      	nop
 8007e50:	080160a4 	.word	0x080160a4
 8007e54:	20001504 	.word	0x20001504
 8007e58:	000f4240 	.word	0x000f4240
 8007e5c:	08015d18 	.word	0x08015d18
 8007e60:	20001568 	.word	0x20001568
 8007e64:	08016174 	.word	0x08016174
 8007e68:	08015078 	.word	0x08015078
 8007e6c:	080162f4 	.word	0x080162f4
 8007e70:	0801632c 	.word	0x0801632c
 8007e74:	080162d8 	.word	0x080162d8
 8007e78:	08016310 	.word	0x08016310

08007e7c <SX1276WriteBuffer>:
{
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	b090      	sub	sp, #64	; 0x40
 8007e80:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8007e82:	b2c0      	uxtb	r0, r0
 8007e84:	f00a fd74 	bl	8012970 <sx127x_write>
	if (ret < 0) {
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	db01      	blt.n	8007e90 <SX1276WriteBuffer+0x14>
}
 8007e8c:	b010      	add	sp, #64	; 0x40
 8007e8e:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 8007e90:	2201      	movs	r2, #1
 8007e92:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <SX1276WriteBuffer+0x5c>)
 8007e98:	930e      	str	r3, [sp, #56]	; 0x38
 8007e9a:	940f      	str	r4, [sp, #60]	; 0x3c
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	2103      	movs	r1, #3
 8007ea2:	f88d 1004 	strb.w	r1, [sp, #4]
 8007ea6:	9901      	ldr	r1, [sp, #4]
 8007ea8:	910d      	str	r1, [sp, #52]	; 0x34
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f363 0100 	bfi	r1, r3, #0, #1
 8007eb0:	f363 0141 	bfi	r1, r3, #1, #1
 8007eb4:	f363 0182 	bfi	r1, r3, #2, #1
 8007eb8:	f363 01c5 	bfi	r1, r3, #3, #3
 8007ebc:	f362 1188 	bfi	r1, r2, #6, #3
 8007ec0:	220c      	movs	r2, #12
 8007ec2:	f362 2152 	bfi	r1, r2, #9, #10
 8007ec6:	f363 41de 	bfi	r1, r3, #19, #12
 8007eca:	f363 71df 	bfi	r1, r3, #31, #1
 8007ece:	aa0d      	add	r2, sp, #52	; 0x34
 8007ed0:	4802      	ldr	r0, [pc, #8]	; (8007edc <SX1276WriteBuffer+0x60>)
 8007ed2:	f009 fc27 	bl	8011724 <z_impl_z_log_msg2_static_create>
}
 8007ed6:	e7d9      	b.n	8007e8c <SX1276WriteBuffer+0x10>
 8007ed8:	08016350 	.word	0x08016350
 8007edc:	08015078 	.word	0x08015078

08007ee0 <SX1276SetRfTxPower>:
{
 8007ee0:	b530      	push	{r4, r5, lr}
 8007ee2:	b09d      	sub	sp, #116	; 0x74
 8007ee4:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 8007eec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007ef6:	204d      	movs	r0, #77	; 0x4d
 8007ef8:	f00a fd33 	bl	8012962 <sx127x_read>
	if (ret < 0) {
 8007efc:	2800      	cmp	r0, #0
 8007efe:	db2e      	blt.n	8007f5e <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8007f00:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 8007f04:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8007f08:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 8007f0c:	2214      	movs	r2, #20
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4628      	mov	r0, r5
 8007f12:	f00a fd08 	bl	8012926 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8007f16:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 8007f22:	2811      	cmp	r0, #17
 8007f24:	dd3e      	ble.n	8007fa4 <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8007f26:	f044 0407 	orr.w	r4, r4, #7
 8007f2a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007f2e:	3805      	subs	r0, #5
 8007f30:	f000 000f 	and.w	r0, r0, #15
 8007f34:	4318      	orrs	r0, r3
 8007f36:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007f40:	2009      	movs	r0, #9
 8007f42:	f00a fd15 	bl	8012970 <sx127x_write>
	if (ret < 0) {
 8007f46:	2800      	cmp	r0, #0
 8007f48:	db37      	blt.n	8007fba <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007f50:	204d      	movs	r0, #77	; 0x4d
 8007f52:	f00a fd0d 	bl	8012970 <sx127x_write>
	if (ret < 0) {
 8007f56:	2800      	cmp	r0, #0
 8007f58:	db52      	blt.n	8008000 <SX1276SetRfTxPower+0x120>
}
 8007f5a:	b01d      	add	sp, #116	; 0x74
 8007f5c:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007f64:	4b38      	ldr	r3, [pc, #224]	; (8008048 <SX1276SetRfTxPower+0x168>)
 8007f66:	931a      	str	r3, [sp, #104]	; 0x68
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	f88d 1000 	strb.w	r1, [sp]
 8007f72:	9900      	ldr	r1, [sp, #0]
 8007f74:	9119      	str	r1, [sp, #100]	; 0x64
 8007f76:	4619      	mov	r1, r3
 8007f78:	f363 0100 	bfi	r1, r3, #0, #1
 8007f7c:	f363 0141 	bfi	r1, r3, #1, #1
 8007f80:	f363 0182 	bfi	r1, r3, #2, #1
 8007f84:	f363 01c5 	bfi	r1, r3, #3, #3
 8007f88:	f362 1188 	bfi	r1, r2, #6, #3
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	f362 2152 	bfi	r1, r2, #9, #10
 8007f92:	f363 41de 	bfi	r1, r3, #19, #12
 8007f96:	f363 71df 	bfi	r1, r3, #31, #1
 8007f9a:	aa19      	add	r2, sp, #100	; 0x64
 8007f9c:	482b      	ldr	r0, [pc, #172]	; (800804c <SX1276SetRfTxPower+0x16c>)
 8007f9e:	f009 fbc1 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return;
 8007fa2:	e7da      	b.n	8007f5a <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8007fa4:	f044 0404 	orr.w	r4, r4, #4
 8007fa8:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007fac:	3802      	subs	r0, #2
 8007fae:	f000 000f 	and.w	r0, r0, #15
 8007fb2:	4318      	orrs	r0, r3
 8007fb4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8007fb8:	e7bf      	b.n	8007f3a <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007fc0:	4b23      	ldr	r3, [pc, #140]	; (8008050 <SX1276SetRfTxPower+0x170>)
 8007fc2:	9314      	str	r3, [sp, #80]	; 0x50
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2102      	movs	r1, #2
 8007fca:	f88d 1000 	strb.w	r1, [sp]
 8007fce:	9900      	ldr	r1, [sp, #0]
 8007fd0:	9113      	str	r1, [sp, #76]	; 0x4c
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f363 0100 	bfi	r1, r3, #0, #1
 8007fd8:	f363 0141 	bfi	r1, r3, #1, #1
 8007fdc:	f363 0182 	bfi	r1, r3, #2, #1
 8007fe0:	f363 01c5 	bfi	r1, r3, #3, #3
 8007fe4:	f362 1188 	bfi	r1, r2, #6, #3
 8007fe8:	2208      	movs	r2, #8
 8007fea:	f362 2152 	bfi	r1, r2, #9, #10
 8007fee:	f363 41de 	bfi	r1, r3, #19, #12
 8007ff2:	f363 71df 	bfi	r1, r3, #31, #1
 8007ff6:	aa13      	add	r2, sp, #76	; 0x4c
 8007ff8:	4814      	ldr	r0, [pc, #80]	; (800804c <SX1276SetRfTxPower+0x16c>)
 8007ffa:	f009 fb93 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return;
 8007ffe:	e7ac      	b.n	8007f5a <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 8008000:	2201      	movs	r2, #1
 8008002:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <SX1276SetRfTxPower+0x174>)
 8008008:	930e      	str	r3, [sp, #56]	; 0x38
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	2102      	movs	r1, #2
 8008010:	f88d 1000 	strb.w	r1, [sp]
 8008014:	9900      	ldr	r1, [sp, #0]
 8008016:	910d      	str	r1, [sp, #52]	; 0x34
 8008018:	4619      	mov	r1, r3
 800801a:	f363 0100 	bfi	r1, r3, #0, #1
 800801e:	f363 0141 	bfi	r1, r3, #1, #1
 8008022:	f363 0182 	bfi	r1, r3, #2, #1
 8008026:	f363 01c5 	bfi	r1, r3, #3, #3
 800802a:	f362 1188 	bfi	r1, r2, #6, #3
 800802e:	2208      	movs	r2, #8
 8008030:	f362 2152 	bfi	r1, r2, #9, #10
 8008034:	f363 41de 	bfi	r1, r3, #19, #12
 8008038:	f363 71df 	bfi	r1, r3, #31, #1
 800803c:	aa0d      	add	r2, sp, #52	; 0x34
 800803e:	4803      	ldr	r0, [pc, #12]	; (800804c <SX1276SetRfTxPower+0x16c>)
 8008040:	f009 fb70 	bl	8011724 <z_impl_z_log_msg2_static_create>
		return;
 8008044:	e789      	b.n	8007f5a <SX1276SetRfTxPower+0x7a>
 8008046:	bf00      	nop
 8008048:	08016370 	.word	0x08016370
 800804c:	08015078 	.word	0x08015078
 8008050:	08016388 	.word	0x08016388
 8008054:	080163a4 	.word	0x080163a4

08008058 <SX1276GetDio1PinState>:
{
 8008058:	b510      	push	{r4, lr}
 800805a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <SX1276GetDio1PinState+0x34>)
 800805e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8008060:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8008062:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	a901      	add	r1, sp, #4
 8008068:	4798      	blx	r3
	if (ret == 0) {
 800806a:	4603      	mov	r3, r0
 800806c:	b918      	cbnz	r0, 8008076 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	9a01      	ldr	r2, [sp, #4]
 8008072:	404a      	eors	r2, r1
 8008074:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8008076:	b913      	cbnz	r3, 800807e <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	dc02      	bgt.n	8008088 <SX1276GetDio1PinState+0x30>
	return 0U;
 8008082:	2000      	movs	r0, #0
}
 8008084:	b002      	add	sp, #8
 8008086:	bd10      	pop	{r4, pc}
		return 1U;
 8008088:	2001      	movs	r0, #1
 800808a:	e7fb      	b.n	8008084 <SX1276GetDio1PinState+0x2c>
 800808c:	20001504 	.word	0x20001504

08008090 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <TimerInsertTimer+0x28>)
 8008092:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8008094:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8008096:	e001      	b.n	800809c <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8008098:	461a      	mov	r2, r3
            next = next->Next;
 800809a:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 800809c:	6951      	ldr	r1, [r2, #20]
 800809e:	b139      	cbz	r1, 80080b0 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	f8d0 c000 	ldr.w	ip, [r0]
 80080a6:	458c      	cmp	ip, r1
 80080a8:	d8f6      	bhi.n	8008098 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 80080aa:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 80080ac:	6143      	str	r3, [r0, #20]
            return;
 80080ae:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 80080b0:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	6143      	str	r3, [r0, #20]
}
 80080b6:	4770      	bx	lr
 80080b8:	20001574 	.word	0x20001574

080080bc <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <TimerExists+0x18>)
 80080be:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 80080c0:	e000      	b.n	80080c4 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 80080c2:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 80080c4:	b11b      	cbz	r3, 80080ce <TimerExists+0x12>
        if( cur == obj )
 80080c6:	4283      	cmp	r3, r0
 80080c8:	d1fb      	bne.n	80080c2 <TimerExists+0x6>
            return true;
 80080ca:	2001      	movs	r0, #1
    }
    return false;
}
 80080cc:	4770      	bx	lr
    return false;
 80080ce:	2000      	movs	r0, #0
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20001574 	.word	0x20001574

080080d8 <TimerInsertNewHeadTimer>:
{
 80080d8:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <TimerInsertNewHeadTimer+0x18>)
 80080dc:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 80080de:	b10b      	cbz	r3, 80080e4 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 80080e0:	2200      	movs	r2, #0
 80080e2:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 80080e4:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <TimerInsertNewHeadTimer+0x18>)
 80080e8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 80080ea:	f00a fc55 	bl	8012998 <TimerSetTimeout>
}
 80080ee:	bd08      	pop	{r3, pc}
 80080f0:	20001574 	.word	0x20001574

080080f4 <TimerStart>:
{
 80080f4:	b510      	push	{r4, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80080fa:	a801      	add	r0, sp, #4
 80080fc:	f00a fbf6 	bl	80128ec <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008100:	b1f4      	cbz	r4, 8008140 <TimerStart+0x4c>
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff ffda 	bl	80080bc <TimerExists>
 8008108:	b9d0      	cbnz	r0, 8008140 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800810e:	2301      	movs	r3, #1
 8008110:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8008112:	2300      	movs	r3, #0
 8008114:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8008116:	4b11      	ldr	r3, [pc, #68]	; (800815c <TimerStart+0x68>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	b1ab      	cbz	r3, 8008148 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 800811c:	f7fe ff4a 	bl	8006fb4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	4418      	add	r0, r3
 8008124:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <TimerStart+0x68>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4298      	cmp	r0, r3
 800812e:	d211      	bcs.n	8008154 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff ffd1 	bl	80080d8 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8008136:	a801      	add	r0, sp, #4
 8008138:	f00a fbe2 	bl	8012900 <BoardCriticalSectionEnd>
}
 800813c:	b002      	add	sp, #8
 800813e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8008140:	a801      	add	r0, sp, #4
 8008142:	f00a fbdd 	bl	8012900 <BoardCriticalSectionEnd>
        return;
 8008146:	e7f9      	b.n	800813c <TimerStart+0x48>
        RtcSetTimerContext( );
 8008148:	f7fe ff60 	bl	800700c <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff ffc3 	bl	80080d8 <TimerInsertNewHeadTimer>
 8008152:	e7f0      	b.n	8008136 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8008154:	4620      	mov	r0, r4
 8008156:	f7ff ff9b 	bl	8008090 <TimerInsertTimer>
 800815a:	e7ec      	b.n	8008136 <TimerStart+0x42>
 800815c:	20001574 	.word	0x20001574

08008160 <TimerIrqHandler>:
{
 8008160:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8008162:	f7fe ff5f 	bl	8007024 <RtcGetTimerContext>
 8008166:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8008168:	f7fe ff50 	bl	800700c <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 800816c:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8008170:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <TimerIrqHandler+0x84>)
 8008172:	681e      	ldr	r6, [r3, #0]
 8008174:	b16e      	cbz	r6, 8008192 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8008176:	4632      	mov	r2, r6
 8008178:	e002      	b.n	8008180 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 800817a:	2100      	movs	r1, #0
 800817c:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800817e:	6952      	ldr	r2, [r2, #20]
 8008180:	6953      	ldr	r3, [r2, #20]
 8008182:	b133      	cbz	r3, 8008192 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8008184:	6819      	ldr	r1, [r3, #0]
 8008186:	4561      	cmp	r1, ip
 8008188:	d9f7      	bls.n	800817a <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 800818a:	1a2c      	subs	r4, r5, r0
 800818c:	4421      	add	r1, r4
 800818e:	6019      	str	r1, [r3, #0]
 8008190:	e7f5      	b.n	800817e <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8008192:	b146      	cbz	r6, 80081a6 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8008194:	6972      	ldr	r2, [r6, #20]
 8008196:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <TimerIrqHandler+0x84>)
 8008198:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 800819a:	2300      	movs	r3, #0
 800819c:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800819e:	68f3      	ldr	r3, [r6, #12]
 80081a0:	b1a3      	cbz	r3, 80081cc <TimerIrqHandler+0x6c>
 80081a2:	6930      	ldr	r0, [r6, #16]
 80081a4:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <TimerIrqHandler+0x84>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	b18b      	cbz	r3, 80081d0 <TimerIrqHandler+0x70>
 80081ac:	681c      	ldr	r4, [r3, #0]
 80081ae:	f7fe ff01 	bl	8006fb4 <RtcGetTimerElapsedTime>
 80081b2:	4284      	cmp	r4, r0
 80081b4:	d20c      	bcs.n	80081d0 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 80081b6:	4a0b      	ldr	r2, [pc, #44]	; (80081e4 <TimerIrqHandler+0x84>)
 80081b8:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 80081ba:	6959      	ldr	r1, [r3, #20]
 80081bc:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 80081be:	2200      	movs	r2, #0
 80081c0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	b11a      	cbz	r2, 80081ce <TimerIrqHandler+0x6e>
 80081c6:	6918      	ldr	r0, [r3, #16]
 80081c8:	4790      	blx	r2
 80081ca:	e7ec      	b.n	80081a6 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 80081cc:	e7fe      	b.n	80081cc <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 80081ce:	e7fe      	b.n	80081ce <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <TimerIrqHandler+0x84>)
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	b108      	cbz	r0, 80081da <TimerIrqHandler+0x7a>
 80081d6:	7a43      	ldrb	r3, [r0, #9]
 80081d8:	b103      	cbz	r3, 80081dc <TimerIrqHandler+0x7c>
}
 80081da:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 80081dc:	f00a fbdc 	bl	8012998 <TimerSetTimeout>
}
 80081e0:	e7fb      	b.n	80081da <TimerIrqHandler+0x7a>
 80081e2:	bf00      	nop
 80081e4:	20001574 	.word	0x20001574

080081e8 <TimerStop>:
{
 80081e8:	b510      	push	{r4, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80081ee:	a801      	add	r0, sp, #4
 80081f0:	f00a fb7c 	bl	80128ec <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <TimerStop+0x7c>)
 80081f6:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80081f8:	b15a      	cbz	r2, 8008212 <TimerStop+0x2a>
 80081fa:	b154      	cbz	r4, 8008212 <TimerStop+0x2a>
    obj->IsStarted = false;
 80081fc:	2300      	movs	r3, #0
 80081fe:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8008200:	42a2      	cmp	r2, r4
 8008202:	d00a      	beq.n	800821a <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8008204:	4613      	mov	r3, r2
        while( cur != NULL )
 8008206:	b32b      	cbz	r3, 8008254 <TimerStop+0x6c>
            if( cur == obj )
 8008208:	42a3      	cmp	r3, r4
 800820a:	d020      	beq.n	800824e <TimerStop+0x66>
                prev = cur;
 800820c:	461a      	mov	r2, r3
                cur = cur->Next;
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	e7f9      	b.n	8008206 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8008212:	a801      	add	r0, sp, #4
 8008214:	f00a fb74 	bl	8012900 <BoardCriticalSectionEnd>
        return;
 8008218:	e01f      	b.n	800825a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800821a:	7a53      	ldrb	r3, [r2, #9]
 800821c:	b173      	cbz	r3, 800823c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 800821e:	2300      	movs	r3, #0
 8008220:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8008222:	6950      	ldr	r0, [r2, #20]
 8008224:	b120      	cbz	r0, 8008230 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8008226:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <TimerStop+0x7c>)
 8008228:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 800822a:	f00a fbb5 	bl	8012998 <TimerSetTimeout>
 800822e:	e011      	b.n	8008254 <TimerStop+0x6c>
                RtcStopAlarm( );
 8008230:	f7fe fece 	bl	8006fd0 <RtcStopAlarm>
                TimerListHead = NULL;
 8008234:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <TimerStop+0x7c>)
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e00b      	b.n	8008254 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 800823c:	6953      	ldr	r3, [r2, #20]
 800823e:	b113      	cbz	r3, 8008246 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <TimerStop+0x7c>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	e006      	b.n	8008254 <TimerStop+0x6c>
                TimerListHead = NULL;
 8008246:	4b07      	ldr	r3, [pc, #28]	; (8008264 <TimerStop+0x7c>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e002      	b.n	8008254 <TimerStop+0x6c>
                if( cur->Next != NULL )
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	b12b      	cbz	r3, 800825e <TimerStop+0x76>
                    prev->Next = cur;
 8008252:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8008254:	a801      	add	r0, sp, #4
 8008256:	f00a fb53 	bl	8012900 <BoardCriticalSectionEnd>
}
 800825a:	b002      	add	sp, #8
 800825c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 800825e:	2300      	movs	r3, #0
 8008260:	6153      	str	r3, [r2, #20]
 8008262:	e7f7      	b.n	8008254 <TimerStop+0x6c>
 8008264:	20001574 	.word	0x20001574

08008268 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8008268:	4908      	ldr	r1, [pc, #32]	; (800828c <SX1276ConvertFreqInHzToPllStep+0x24>)
 800826a:	fba1 3200 	umull	r3, r2, r1, r0
 800826e:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8008270:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008274:	fb03 0012 	mls	r0, r3, r2, r0
 8008278:	f641 6384 	movw	r3, #7812	; 0x1e84
 800827c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8008280:	fba1 1303 	umull	r1, r3, r1, r3
 8008284:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8008286:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 800828a:	4770      	bx	lr
 800828c:	431bde83 	.word	0x431bde83

08008290 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008290:	2300      	movs	r3, #0
 8008292:	e008      	b.n	80082a6 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008294:	e7fe      	b.n	8008294 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <GetFskBandwidthRegValue+0x4c>)
 8008298:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800829c:	7908      	ldrb	r0, [r1, #4]
}
 800829e:	bc10      	pop	{r4}
 80082a0:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b14      	cmp	r3, #20
 80082a8:	d817      	bhi.n	80082da <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082aa:	4619      	mov	r1, r3
 80082ac:	4a0b      	ldr	r2, [pc, #44]	; (80082dc <GetFskBandwidthRegValue+0x4c>)
 80082ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082b2:	4282      	cmp	r2, r0
 80082b4:	d8f5      	bhi.n	80082a2 <GetFskBandwidthRegValue+0x12>
{
 80082b6:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	4c08      	ldr	r4, [pc, #32]	; (80082dc <GetFskBandwidthRegValue+0x4c>)
 80082bc:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80082c0:	4282      	cmp	r2, r0
 80082c2:	d8e8      	bhi.n	8008296 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b14      	cmp	r3, #20
 80082ca:	d8e3      	bhi.n	8008294 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082cc:	4619      	mov	r1, r3
 80082ce:	4a03      	ldr	r2, [pc, #12]	; (80082dc <GetFskBandwidthRegValue+0x4c>)
 80082d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082d4:	4282      	cmp	r2, r0
 80082d6:	d8f5      	bhi.n	80082c4 <GetFskBandwidthRegValue+0x34>
 80082d8:	e7ee      	b.n	80082b8 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 80082da:	e7fe      	b.n	80082da <GetFskBandwidthRegValue+0x4a>
 80082dc:	08016478 	.word	0x08016478

080082e0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80082e0:	2801      	cmp	r0, #1
 80082e2:	d006      	beq.n	80082f2 <SX1276GetLoRaBandwidthInHz+0x12>
 80082e4:	2802      	cmp	r0, #2
 80082e6:	d006      	beq.n	80082f6 <SX1276GetLoRaBandwidthInHz+0x16>
 80082e8:	b108      	cbz	r0, 80082ee <SX1276GetLoRaBandwidthInHz+0xe>
 80082ea:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 80082ec:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 80082ee:	4803      	ldr	r0, [pc, #12]	; (80082fc <SX1276GetLoRaBandwidthInHz+0x1c>)
 80082f0:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 80082f2:	4803      	ldr	r0, [pc, #12]	; (8008300 <SX1276GetLoRaBandwidthInHz+0x20>)
 80082f4:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 80082f6:	4803      	ldr	r0, [pc, #12]	; (8008304 <SX1276GetLoRaBandwidthInHz+0x24>)
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	0001e848 	.word	0x0001e848
 8008300:	0003d090 	.word	0x0003d090
 8008304:	0007a120 	.word	0x0007a120

08008308 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <SX1276OnDio4Irq+0x1c>)
 800830a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800830e:	b93b      	cbnz	r3, 8008320 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <SX1276OnDio4Irq+0x1c>)
 8008312:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008316:	b91b      	cbnz	r3, 8008320 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <SX1276OnDio4Irq+0x1c>)
 800831a:	2201      	movs	r2, #1
 800831c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	200016ac 	.word	0x200016ac

08008328 <SX1276GetStatus>:
}
 8008328:	4b01      	ldr	r3, [pc, #4]	; (8008330 <SX1276GetStatus+0x8>)
 800832a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 800832e:	4770      	bx	lr
 8008330:	200016ac 	.word	0x200016ac

08008334 <SX1276SetChannel>:
{
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8008338:	f7ff ff96 	bl	8008268 <SX1276ConvertFreqInHzToPllStep>
 800833c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <SX1276SetChannel+0x30>)
 8008340:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8008344:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008348:	2006      	movs	r0, #6
 800834a:	f00a fc1c 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800834e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8008352:	2007      	movs	r0, #7
 8008354:	f00a fc17 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8008358:	b2e1      	uxtb	r1, r4
 800835a:	2008      	movs	r0, #8
 800835c:	f00a fc13 	bl	8012b86 <SX1276Write>
}
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	200016ac 	.word	0x200016ac

08008368 <SX1276OnDio3Irq>:
{
 8008368:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 800836a:	4b14      	ldr	r3, [pc, #80]	; (80083bc <SX1276OnDio3Irq+0x54>)
 800836c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008370:	2b01      	cmp	r3, #1
 8008372:	d000      	beq.n	8008376 <SX1276OnDio3Irq+0xe>
}
 8008374:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8008376:	2012      	movs	r0, #18
 8008378:	f00a fc11 	bl	8012b9e <SX1276Read>
 800837c:	f010 0f01 	tst.w	r0, #1
 8008380:	d00d      	beq.n	800839e <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8008382:	2105      	movs	r1, #5
 8008384:	2012      	movs	r0, #18
 8008386:	f00a fbfe 	bl	8012b86 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <SX1276OnDio3Irq+0x58>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <SX1276OnDio3Irq+0xc>
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0ed      	beq.n	8008374 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8008398:	2001      	movs	r0, #1
 800839a:	4798      	blx	r3
 800839c:	e7ea      	b.n	8008374 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800839e:	2104      	movs	r1, #4
 80083a0:	2012      	movs	r0, #18
 80083a2:	f00a fbf0 	bl	8012b86 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80083a6:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <SX1276OnDio3Irq+0x58>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0e2      	beq.n	8008374 <SX1276OnDio3Irq+0xc>
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0df      	beq.n	8008374 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80083b4:	2000      	movs	r0, #0
 80083b6:	4798      	blx	r3
}
 80083b8:	e7dc      	b.n	8008374 <SX1276OnDio3Irq+0xc>
 80083ba:	bf00      	nop
 80083bc:	200016ac 	.word	0x200016ac
 80083c0:	20001578 	.word	0x20001578

080083c4 <SX1276OnDio2Irq>:
{
 80083c4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80083c6:	4b3a      	ldr	r3, [pc, #232]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 80083c8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d002      	beq.n	80083d6 <SX1276OnDio2Irq+0x12>
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d051      	beq.n	8008478 <SX1276OnDio2Irq+0xb4>
}
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80083d6:	4b36      	ldr	r3, [pc, #216]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 80083d8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80083dc:	b1c3      	cbz	r3, 8008410 <SX1276OnDio2Irq+0x4c>
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d1f8      	bne.n	80083d4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80083e2:	4b33      	ldr	r3, [pc, #204]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 80083e4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f3      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80083ec:	2102      	movs	r1, #2
 80083ee:	2012      	movs	r0, #18
 80083f0:	f00a fbc9 	bl	8012b86 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80083f4:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <SX1276OnDio2Irq+0xf0>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0eb      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
 80083fc:	695c      	ldr	r4, [r3, #20]
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d0e8      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008402:	201c      	movs	r0, #28
 8008404:	f00a fbcb 	bl	8012b9e <SX1276Read>
 8008408:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800840c:	47a0      	blx	r4
 800840e:	e7e1      	b.n	80083d4 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8008410:	4b27      	ldr	r3, [pc, #156]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008414:	b35b      	cbz	r3, 800846e <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8008416:	4b26      	ldr	r3, [pc, #152]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008418:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0d9      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
 8008420:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008422:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1d4      	bne.n	80083d4 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 800842a:	4823      	ldr	r0, [pc, #140]	; (80084b8 <SX1276OnDio2Irq+0xf4>)
 800842c:	f7ff fedc 	bl	80081e8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008430:	4c1f      	ldr	r4, [pc, #124]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008432:	2301      	movs	r3, #1
 8008434:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008438:	2011      	movs	r0, #17
 800843a:	f00a fbb0 	bl	8012b9e <SX1276Read>
 800843e:	0843      	lsrs	r3, r0, #1
 8008440:	425b      	negs	r3, r3
 8008442:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008446:	201b      	movs	r0, #27
 8008448:	f00a fba9 	bl	8012b9e <SX1276Read>
 800844c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800844e:	201c      	movs	r0, #28
 8008450:	f00a fba5 	bl	8012b9e <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008454:	4328      	orrs	r0, r5
 8008456:	f00a fae9 	bl	8012a2c <SX1276ConvertPllStepToFreqInHz>
 800845a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800845e:	200c      	movs	r0, #12
 8008460:	f00a fb9d 	bl	8012b9e <SX1276Read>
 8008464:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8008468:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 800846c:	e7b2      	b.n	80083d4 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008470:	2201      	movs	r2, #1
 8008472:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8008476:	e7ce      	b.n	8008416 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 800847a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800847e:	2b01      	cmp	r3, #1
 8008480:	d1a8      	bne.n	80083d4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008482:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <SX1276OnDio2Irq+0xec>)
 8008484:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0a3      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800848c:	2102      	movs	r1, #2
 800848e:	2012      	movs	r0, #18
 8008490:	f00a fb79 	bl	8012b86 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008494:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <SX1276OnDio2Irq+0xf0>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d09b      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
 800849c:	695c      	ldr	r4, [r3, #20]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d098      	beq.n	80083d4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80084a2:	201c      	movs	r0, #28
 80084a4:	f00a fb7b 	bl	8012b9e <SX1276Read>
 80084a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80084ac:	47a0      	blx	r4
}
 80084ae:	e791      	b.n	80083d4 <SX1276OnDio2Irq+0x10>
 80084b0:	200016ac 	.word	0x200016ac
 80084b4:	20001578 	.word	0x20001578
 80084b8:	2000157c 	.word	0x2000157c

080084bc <SX1276OnDio1Irq>:
{
 80084bc:	b508      	push	{r3, lr}
    SX1276Read(REG_IRQFLAGS1);
 80084be:	203e      	movs	r0, #62	; 0x3e
 80084c0:	f00a fb6d 	bl	8012b9e <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 80084c4:	203f      	movs	r0, #63	; 0x3f
 80084c6:	f00a fb6a 	bl	8012b9e <SX1276Read>
    switch( SX1276.Settings.State )
 80084ca:	4b4b      	ldr	r3, [pc, #300]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80084cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d002      	beq.n	80084da <SX1276OnDio1Irq+0x1e>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d062      	beq.n	800859e <SX1276OnDio1Irq+0xe2>
}
 80084d8:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80084da:	4b47      	ldr	r3, [pc, #284]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80084dc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80084e0:	b1cb      	cbz	r3, 8008516 <SX1276OnDio1Irq+0x5a>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d1f8      	bne.n	80084d8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 80084e6:	f7ff fdb7 	bl	8008058 <SX1276GetDio1PinState>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d0f4      	beq.n	80084d8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutTimer );
 80084ee:	4843      	ldr	r0, [pc, #268]	; (80085fc <SX1276OnDio1Irq+0x140>)
 80084f0:	f7ff fe7a 	bl	80081e8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80084f4:	2180      	movs	r1, #128	; 0x80
 80084f6:	2012      	movs	r0, #18
 80084f8:	f00a fb45 	bl	8012b86 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80084fc:	4b3e      	ldr	r3, [pc, #248]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008504:	4b3e      	ldr	r3, [pc, #248]	; (8008600 <SX1276OnDio1Irq+0x144>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0e5      	beq.n	80084d8 <SX1276OnDio1Irq+0x1c>
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0e2      	beq.n	80084d8 <SX1276OnDio1Irq+0x1c>
                    RadioEvents->RxTimeout( );
 8008512:	4798      	blx	r3
 8008514:	e7e0      	b.n	80084d8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 0 )
 8008516:	f7ff fd9f 	bl	8008058 <SX1276GetDio1PinState>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0dc      	beq.n	80084d8 <SX1276OnDio1Irq+0x1c>
                TimerStop( &RxTimeoutSyncWord );
 800851e:	4839      	ldr	r0, [pc, #228]	; (8008604 <SX1276OnDio1Irq+0x148>)
 8008520:	f7ff fe62 	bl	80081e8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008524:	4b34      	ldr	r3, [pc, #208]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008526:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 800852a:	b95b      	cbnz	r3, 8008544 <SX1276OnDio1Irq+0x88>
 800852c:	4b32      	ldr	r3, [pc, #200]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 800852e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008532:	b93b      	cbnz	r3, 8008544 <SX1276OnDio1Irq+0x88>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008534:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008536:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800853a:	b9eb      	cbnz	r3, 8008578 <SX1276OnDio1Irq+0xbc>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800853c:	2101      	movs	r1, #1
 800853e:	4832      	ldr	r0, [pc, #200]	; (8008608 <SX1276OnDio1Irq+0x14c>)
 8008540:	f00a fae1 	bl	8012b06 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008544:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008546:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800854a:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800854e:	1a88      	subs	r0, r1, r2
 8008550:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008554:	4298      	cmp	r0, r3
 8008556:	db16      	blt.n	8008586 <SX1276OnDio1Irq+0xca>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008558:	1e59      	subs	r1, r3, #1
 800855a:	b2c9      	uxtb	r1, r1
 800855c:	482b      	ldr	r0, [pc, #172]	; (800860c <SX1276OnDio1Irq+0x150>)
 800855e:	4410      	add	r0, r2
 8008560:	f00a fad1 	bl	8012b06 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008564:	4a24      	ldr	r2, [pc, #144]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008566:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 800856a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800856e:	440b      	add	r3, r1
 8008570:	3b01      	subs	r3, #1
 8008572:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8008576:	e7af      	b.n	80084d8 <SX1276OnDio1Irq+0x1c>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008578:	2032      	movs	r0, #50	; 0x32
 800857a:	f00a fb10 	bl	8012b9e <SX1276Read>
 800857e:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008580:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008584:	e7de      	b.n	8008544 <SX1276OnDio1Irq+0x88>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008586:	1a89      	subs	r1, r1, r2
 8008588:	b2c9      	uxtb	r1, r1
 800858a:	4820      	ldr	r0, [pc, #128]	; (800860c <SX1276OnDio1Irq+0x150>)
 800858c:	4410      	add	r0, r2
 800858e:	f00a faba 	bl	8012b06 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008592:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 8008594:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8008598:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800859c:	e79c      	b.n	80084d8 <SX1276OnDio1Irq+0x1c>
            switch( SX1276.Settings.Modem )
 800859e:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80085a0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d197      	bne.n	80084d8 <SX1276OnDio1Irq+0x1c>
                if( SX1276GetDio1PinState( ) == 1 )
 80085a8:	f7ff fd56 	bl	8008058 <SX1276GetDio1PinState>
 80085ac:	2801      	cmp	r0, #1
 80085ae:	d093      	beq.n	80084d8 <SX1276OnDio1Irq+0x1c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80085b2:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80085b6:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80085ba:	eba0 0c02 	sub.w	ip, r0, r2
 80085be:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80085c2:	458c      	cmp	ip, r1
 80085c4:	dd0c      	ble.n	80085e0 <SX1276OnDio1Irq+0x124>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80085c6:	4811      	ldr	r0, [pc, #68]	; (800860c <SX1276OnDio1Irq+0x150>)
 80085c8:	4410      	add	r0, r2
 80085ca:	f00a faa3 	bl	8012b14 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80085ce:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80085d0:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80085d4:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80085d8:	440a      	add	r2, r1
 80085da:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80085de:	e77b      	b.n	80084d8 <SX1276OnDio1Irq+0x1c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085e0:	1a81      	subs	r1, r0, r2
 80085e2:	b2c9      	uxtb	r1, r1
 80085e4:	4809      	ldr	r0, [pc, #36]	; (800860c <SX1276OnDio1Irq+0x150>)
 80085e6:	4410      	add	r0, r2
 80085e8:	f00a fa94 	bl	8012b14 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <SX1276OnDio1Irq+0x13c>)
 80085ee:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80085f2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 80085f6:	e76f      	b.n	80084d8 <SX1276OnDio1Irq+0x1c>
 80085f8:	200016ac 	.word	0x200016ac
 80085fc:	20001594 	.word	0x20001594
 8008600:	20001578 	.word	0x20001578
 8008604:	2000157c 	.word	0x2000157c
 8008608:	200017c2 	.word	0x200017c2
 800860c:	200015ac 	.word	0x200015ac

08008610 <SX1276OnDio0Irq>:
{
 8008610:	b510      	push	{r4, lr}
 8008612:	b082      	sub	sp, #8
    SX1276Read(REG_IRQFLAGS1);
 8008614:	203e      	movs	r0, #62	; 0x3e
 8008616:	f00a fac2 	bl	8012b9e <SX1276Read>
    SX1276Read(REG_IRQFLAGS2);
 800861a:	203f      	movs	r0, #63	; 0x3f
 800861c:	f00a fabf 	bl	8012b9e <SX1276Read>
    volatile uint8_t irqFlags = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8008626:	4bb1      	ldr	r3, [pc, #708]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008628:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800862c:	2b01      	cmp	r3, #1
 800862e:	d004      	beq.n	800863a <SX1276OnDio0Irq+0x2a>
 8008630:	2b02      	cmp	r3, #2
 8008632:	f000 813f 	beq.w	80088b4 <SX1276OnDio0Irq+0x2a4>
}
 8008636:	b002      	add	sp, #8
 8008638:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800863a:	4bac      	ldr	r3, [pc, #688]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800863c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008640:	b343      	cbz	r3, 8008694 <SX1276OnDio0Irq+0x84>
 8008642:	2b01      	cmp	r3, #1
 8008644:	d1f7      	bne.n	8008636 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8008646:	2140      	movs	r1, #64	; 0x40
 8008648:	2012      	movs	r0, #18
 800864a:	f00a fa9c 	bl	8012b86 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800864e:	2012      	movs	r0, #18
 8008650:	f00a faa5 	bl	8012b9e <SX1276Read>
 8008654:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008658:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800865c:	f013 0f20 	tst.w	r3, #32
 8008660:	f000 80bd 	beq.w	80087de <SX1276OnDio0Irq+0x1ce>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008664:	2120      	movs	r1, #32
 8008666:	2012      	movs	r0, #18
 8008668:	f00a fa8d 	bl	8012b86 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800866c:	4b9f      	ldr	r3, [pc, #636]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800866e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8008672:	b91b      	cbnz	r3, 800867c <SX1276OnDio0Irq+0x6c>
                            SX1276.Settings.State = RF_IDLE;
 8008674:	4b9d      	ldr	r3, [pc, #628]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008676:	2200      	movs	r2, #0
 8008678:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 800867c:	489c      	ldr	r0, [pc, #624]	; (80088f0 <SX1276OnDio0Irq+0x2e0>)
 800867e:	f7ff fdb3 	bl	80081e8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008682:	4b9c      	ldr	r3, [pc, #624]	; (80088f4 <SX1276OnDio0Irq+0x2e4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0d5      	beq.n	8008636 <SX1276OnDio0Irq+0x26>
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0d2      	beq.n	8008636 <SX1276OnDio0Irq+0x26>
                            RadioEvents->RxError( );
 8008690:	4798      	blx	r3
 8008692:	e7d0      	b.n	8008636 <SX1276OnDio0Irq+0x26>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8008694:	4b95      	ldr	r3, [pc, #596]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008696:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800869a:	bb0b      	cbnz	r3, 80086e0 <SX1276OnDio0Irq+0xd0>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800869c:	4b93      	ldr	r3, [pc, #588]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800869e:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d15e      	bne.n	8008764 <SX1276OnDio0Irq+0x154>
 80086a6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d15a      	bne.n	8008764 <SX1276OnDio0Irq+0x154>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80086ae:	4b8f      	ldr	r3, [pc, #572]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80086b0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d14e      	bne.n	8008756 <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80086b8:	2101      	movs	r1, #1
 80086ba:	488f      	ldr	r0, [pc, #572]	; (80088f8 <SX1276OnDio0Irq+0x2e8>)
 80086bc:	f00a fa23 	bl	8012b06 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80086c0:	4c8a      	ldr	r4, [pc, #552]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80086c2:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80086c6:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80086ca:	1ac9      	subs	r1, r1, r3
 80086cc:	b2c9      	uxtb	r1, r1
 80086ce:	488b      	ldr	r0, [pc, #556]	; (80088fc <SX1276OnDio0Irq+0x2ec>)
 80086d0:	4418      	add	r0, r3
 80086d2:	f00a fa18 	bl	8012b06 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80086d6:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80086da:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80086de:	e04e      	b.n	800877e <SX1276OnDio0Irq+0x16e>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80086e0:	203f      	movs	r0, #63	; 0x3f
 80086e2:	f00a fa5c 	bl	8012b9e <SX1276Read>
 80086e6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80086ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086ee:	f013 0f02 	tst.w	r3, #2
 80086f2:	d1d3      	bne.n	800869c <SX1276OnDio0Irq+0x8c>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80086f4:	210b      	movs	r1, #11
 80086f6:	203e      	movs	r0, #62	; 0x3e
 80086f8:	f00a fa45 	bl	8012b86 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80086fc:	2110      	movs	r1, #16
 80086fe:	203f      	movs	r0, #63	; 0x3f
 8008700:	f00a fa41 	bl	8012b86 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8008704:	487a      	ldr	r0, [pc, #488]	; (80088f0 <SX1276OnDio0Irq+0x2e0>)
 8008706:	f7ff fd6f 	bl	80081e8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800870a:	4b78      	ldr	r3, [pc, #480]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800870c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008710:	b9bb      	cbnz	r3, 8008742 <SX1276OnDio0Irq+0x132>
                            TimerStop( &RxTimeoutSyncWord );
 8008712:	487b      	ldr	r0, [pc, #492]	; (8008900 <SX1276OnDio0Irq+0x2f0>)
 8008714:	f7ff fd68 	bl	80081e8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8008718:	4b74      	ldr	r3, [pc, #464]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800871a:	2200      	movs	r2, #0
 800871c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008720:	4b74      	ldr	r3, [pc, #464]	; (80088f4 <SX1276OnDio0Irq+0x2e4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b113      	cbz	r3, 800872c <SX1276OnDio0Irq+0x11c>
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	b103      	cbz	r3, 800872c <SX1276OnDio0Irq+0x11c>
                            RadioEvents->RxError( );
 800872a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800872c:	4b6f      	ldr	r3, [pc, #444]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800872e:	2200      	movs	r2, #0
 8008730:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008734:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008738:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800873c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8008740:	e779      	b.n	8008636 <SX1276OnDio0Irq+0x26>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008742:	200d      	movs	r0, #13
 8008744:	f00a fa2b 	bl	8012b9e <SX1276Read>
 8008748:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800874c:	b2c9      	uxtb	r1, r1
 800874e:	200d      	movs	r0, #13
 8008750:	f00a fa19 	bl	8012b86 <SX1276Write>
 8008754:	e7e4      	b.n	8008720 <SX1276OnDio0Irq+0x110>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008756:	2032      	movs	r0, #50	; 0x32
 8008758:	f00a fa21 	bl	8012b9e <SX1276Read>
 800875c:	4b63      	ldr	r3, [pc, #396]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800875e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008762:	e7ad      	b.n	80086c0 <SX1276OnDio0Irq+0xb0>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008764:	4c61      	ldr	r4, [pc, #388]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008766:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800876a:	1ac9      	subs	r1, r1, r3
 800876c:	b2c9      	uxtb	r1, r1
 800876e:	4863      	ldr	r0, [pc, #396]	; (80088fc <SX1276OnDio0Irq+0x2ec>)
 8008770:	4418      	add	r0, r3
 8008772:	f00a f9c8 	bl	8012b06 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008776:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800877a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800877e:	485c      	ldr	r0, [pc, #368]	; (80088f0 <SX1276OnDio0Irq+0x2e0>)
 8008780:	f7ff fd32 	bl	80081e8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8008784:	4b59      	ldr	r3, [pc, #356]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008786:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800878a:	b9f3      	cbnz	r3, 80087ca <SX1276OnDio0Irq+0x1ba>
                    SX1276.Settings.State = RF_IDLE;
 800878c:	4b57      	ldr	r3, [pc, #348]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800878e:	2200      	movs	r2, #0
 8008790:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8008794:	485a      	ldr	r0, [pc, #360]	; (8008900 <SX1276OnDio0Irq+0x2f0>)
 8008796:	f7ff fd27 	bl	80081e8 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800879a:	4b56      	ldr	r3, [pc, #344]	; (80088f4 <SX1276OnDio0Irq+0x2e4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	b14b      	cbz	r3, 80087b4 <SX1276OnDio0Irq+0x1a4>
 80087a0:	689c      	ldr	r4, [r3, #8]
 80087a2:	b13c      	cbz	r4, 80087b4 <SX1276OnDio0Irq+0x1a4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80087a4:	4951      	ldr	r1, [pc, #324]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80087a6:	2300      	movs	r3, #0
 80087a8:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80087ac:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80087b0:	4852      	ldr	r0, [pc, #328]	; (80088fc <SX1276OnDio0Irq+0x2ec>)
 80087b2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80087bc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80087c0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80087c4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80087c8:	e735      	b.n	8008636 <SX1276OnDio0Irq+0x26>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80087ca:	200d      	movs	r0, #13
 80087cc:	f00a f9e7 	bl	8012b9e <SX1276Read>
 80087d0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80087d4:	b2c9      	uxtb	r1, r1
 80087d6:	200d      	movs	r0, #13
 80087d8:	f00a f9d5 	bl	8012b86 <SX1276Write>
 80087dc:	e7dd      	b.n	800879a <SX1276OnDio0Irq+0x18a>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80087de:	2019      	movs	r0, #25
 80087e0:	f00a f9dd 	bl	8012b9e <SX1276Read>
 80087e4:	b243      	sxtb	r3, r0
 80087e6:	3302      	adds	r3, #2
 80087e8:	109b      	asrs	r3, r3, #2
 80087ea:	4c40      	ldr	r4, [pc, #256]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80087ec:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80087f0:	201a      	movs	r0, #26
 80087f2:	f00a f9d4 	bl	8012b9e <SX1276Read>
 80087f6:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80087f8:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	db39      	blt.n	8008874 <SX1276OnDio0Irq+0x264>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008800:	4a3a      	ldr	r2, [pc, #232]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008802:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 8008806:	4a3f      	ldr	r2, [pc, #252]	; (8008904 <SX1276OnDio0Irq+0x2f4>)
 8008808:	4291      	cmp	r1, r2
 800880a:	d94c      	bls.n	80088a6 <SX1276OnDio0Irq+0x296>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800880c:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8008810:	389d      	subs	r0, #157	; 0x9d
 8008812:	4b36      	ldr	r3, [pc, #216]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008814:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8008818:	2013      	movs	r0, #19
 800881a:	f00a f9c0 	bl	8012b9e <SX1276Read>
 800881e:	4c33      	ldr	r4, [pc, #204]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008820:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8008824:	2010      	movs	r0, #16
 8008826:	f00a f9ba 	bl	8012b9e <SX1276Read>
 800882a:	4601      	mov	r1, r0
 800882c:	200d      	movs	r0, #13
 800882e:	f00a f9aa 	bl	8012b86 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8008832:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8008836:	4831      	ldr	r0, [pc, #196]	; (80088fc <SX1276OnDio0Irq+0x2ec>)
 8008838:	f00a f965 	bl	8012b06 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800883c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8008840:	b913      	cbnz	r3, 8008848 <SX1276OnDio0Irq+0x238>
                        SX1276.Settings.State = RF_IDLE;
 8008842:	2200      	movs	r2, #0
 8008844:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8008848:	4829      	ldr	r0, [pc, #164]	; (80088f0 <SX1276OnDio0Irq+0x2e0>)
 800884a:	f7ff fccd 	bl	80081e8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800884e:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <SX1276OnDio0Irq+0x2e4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f43f aeef 	beq.w	8008636 <SX1276OnDio0Irq+0x26>
 8008858:	689c      	ldr	r4, [r3, #8]
 800885a:	2c00      	cmp	r4, #0
 800885c:	f43f aeeb 	beq.w	8008636 <SX1276OnDio0Irq+0x26>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008860:	4922      	ldr	r1, [pc, #136]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 8008862:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8008866:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 800886a:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800886e:	4823      	ldr	r0, [pc, #140]	; (80088fc <SX1276OnDio0Irq+0x2ec>)
 8008870:	47a0      	blx	r4
 8008872:	e6e0      	b.n	8008636 <SX1276OnDio0Irq+0x26>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008874:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8008878:	4922      	ldr	r1, [pc, #136]	; (8008904 <SX1276OnDio0Irq+0x2f4>)
 800887a:	428c      	cmp	r4, r1
 800887c:	d909      	bls.n	8008892 <SX1276OnDio0Irq+0x282>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800887e:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008882:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008884:	fa12 f383 	uxtah	r3, r2, r3
 8008888:	3b9d      	subs	r3, #157	; 0x9d
 800888a:	4a18      	ldr	r2, [pc, #96]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 800888c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8008890:	e7c2      	b.n	8008818 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008892:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008896:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008898:	fa12 f383 	uxtah	r3, r2, r3
 800889c:	3ba4      	subs	r3, #164	; 0xa4
 800889e:	4a13      	ldr	r2, [pc, #76]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80088a0:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80088a4:	e7b8      	b.n	8008818 <SX1276OnDio0Irq+0x208>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80088a6:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80088aa:	38a4      	subs	r0, #164	; 0xa4
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80088ae:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80088b2:	e7b1      	b.n	8008818 <SX1276OnDio0Irq+0x208>
            TimerStop( &TxTimeoutTimer );
 80088b4:	4814      	ldr	r0, [pc, #80]	; (8008908 <SX1276OnDio0Irq+0x2f8>)
 80088b6:	f7ff fc97 	bl	80081e8 <TimerStop>
            switch( SX1276.Settings.Modem )
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80088bc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d00e      	beq.n	80088e2 <SX1276OnDio0Irq+0x2d2>
                SX1276.Settings.State = RF_IDLE;
 80088c4:	4b09      	ldr	r3, [pc, #36]	; (80088ec <SX1276OnDio0Irq+0x2dc>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <SX1276OnDio0Irq+0x2e4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f43f aeb0 	beq.w	8008636 <SX1276OnDio0Irq+0x26>
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f43f aeac 	beq.w	8008636 <SX1276OnDio0Irq+0x26>
                    RadioEvents->TxDone( );
 80088de:	4798      	blx	r3
}
 80088e0:	e6a9      	b.n	8008636 <SX1276OnDio0Irq+0x26>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80088e2:	2108      	movs	r1, #8
 80088e4:	2012      	movs	r0, #18
 80088e6:	f00a f94e 	bl	8012b86 <SX1276Write>
 80088ea:	e7eb      	b.n	80088c4 <SX1276OnDio0Irq+0x2b4>
 80088ec:	200016ac 	.word	0x200016ac
 80088f0:	20001594 	.word	0x20001594
 80088f4:	20001578 	.word	0x20001578
 80088f8:	200017c2 	.word	0x200017c2
 80088fc:	200015ac 	.word	0x200015ac
 8008900:	2000157c 	.word	0x2000157c
 8008904:	1f4add40 	.word	0x1f4add40
 8008908:	200017f0 	.word	0x200017f0

0800890c <RxChainCalibration>:
{
 800890c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800890e:	2009      	movs	r0, #9
 8008910:	f00a f945 	bl	8012b9e <SX1276Read>
 8008914:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008916:	2006      	movs	r0, #6
 8008918:	f00a f941 	bl	8012b9e <SX1276Read>
 800891c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800891e:	2007      	movs	r0, #7
 8008920:	f00a f93d 	bl	8012b9e <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008924:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8008928:	2008      	movs	r0, #8
 800892a:	f00a f938 	bl	8012b9e <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800892e:	4320      	orrs	r0, r4
 8008930:	f00a f87c 	bl	8012a2c <SX1276ConvertPllStepToFreqInHz>
 8008934:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8008936:	2100      	movs	r1, #0
 8008938:	2009      	movs	r0, #9
 800893a:	f00a f924 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800893e:	203b      	movs	r0, #59	; 0x3b
 8008940:	f00a f92d 	bl	8012b9e <SX1276Read>
 8008944:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008948:	b2c9      	uxtb	r1, r1
 800894a:	203b      	movs	r0, #59	; 0x3b
 800894c:	f00a f91b 	bl	8012b86 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008950:	203b      	movs	r0, #59	; 0x3b
 8008952:	f00a f924 	bl	8012b9e <SX1276Read>
 8008956:	f010 0f20 	tst.w	r0, #32
 800895a:	d1f9      	bne.n	8008950 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 800895c:	480c      	ldr	r0, [pc, #48]	; (8008990 <RxChainCalibration+0x84>)
 800895e:	f7ff fce9 	bl	8008334 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008962:	203b      	movs	r0, #59	; 0x3b
 8008964:	f00a f91b 	bl	8012b9e <SX1276Read>
 8008968:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800896c:	b2c9      	uxtb	r1, r1
 800896e:	203b      	movs	r0, #59	; 0x3b
 8008970:	f00a f909 	bl	8012b86 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008974:	203b      	movs	r0, #59	; 0x3b
 8008976:	f00a f912 	bl	8012b9e <SX1276Read>
 800897a:	f010 0f20 	tst.w	r0, #32
 800897e:	d1f9      	bne.n	8008974 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8008980:	4629      	mov	r1, r5
 8008982:	2009      	movs	r0, #9
 8008984:	f00a f8ff 	bl	8012b86 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008988:	4620      	mov	r0, r4
 800898a:	f7ff fcd3 	bl	8008334 <SX1276SetChannel>
}
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	33bca100 	.word	0x33bca100

08008994 <SX1276SetSleep>:
{
 8008994:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8008996:	480a      	ldr	r0, [pc, #40]	; (80089c0 <SX1276SetSleep+0x2c>)
 8008998:	f7ff fc26 	bl	80081e8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800899c:	4809      	ldr	r0, [pc, #36]	; (80089c4 <SX1276SetSleep+0x30>)
 800899e:	f7ff fc23 	bl	80081e8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80089a2:	4809      	ldr	r0, [pc, #36]	; (80089c8 <SX1276SetSleep+0x34>)
 80089a4:	f7ff fc20 	bl	80081e8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80089a8:	2000      	movs	r0, #0
 80089aa:	f00a f904 	bl	8012bb6 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80089ae:	2000      	movs	r0, #0
 80089b0:	f009 ffd5 	bl	801295e <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80089b4:	4b05      	ldr	r3, [pc, #20]	; (80089cc <SX1276SetSleep+0x38>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80089bc:	bd08      	pop	{r3, pc}
 80089be:	bf00      	nop
 80089c0:	20001594 	.word	0x20001594
 80089c4:	200017f0 	.word	0x200017f0
 80089c8:	2000157c 	.word	0x2000157c
 80089cc:	200016ac 	.word	0x200016ac

080089d0 <SX1276SetStby>:
{
 80089d0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80089d2:	4808      	ldr	r0, [pc, #32]	; (80089f4 <SX1276SetStby+0x24>)
 80089d4:	f7ff fc08 	bl	80081e8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80089d8:	4807      	ldr	r0, [pc, #28]	; (80089f8 <SX1276SetStby+0x28>)
 80089da:	f7ff fc05 	bl	80081e8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80089de:	4807      	ldr	r0, [pc, #28]	; (80089fc <SX1276SetStby+0x2c>)
 80089e0:	f7ff fc02 	bl	80081e8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80089e4:	2001      	movs	r0, #1
 80089e6:	f00a f8e6 	bl	8012bb6 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <SX1276SetStby+0x30>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80089f2:	bd08      	pop	{r3, pc}
 80089f4:	20001594 	.word	0x20001594
 80089f8:	200017f0 	.word	0x200017f0
 80089fc:	2000157c 	.word	0x2000157c
 8008a00:	200016ac 	.word	0x200016ac

08008a04 <SX1276SetTx>:
{
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8008a08:	4829      	ldr	r0, [pc, #164]	; (8008ab0 <SX1276SetTx+0xac>)
 8008a0a:	f7ff fbed 	bl	80081e8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4828      	ldr	r0, [pc, #160]	; (8008ab4 <SX1276SetTx+0xb0>)
 8008a12:	f009 ffe0 	bl	80129d6 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8008a16:	4b28      	ldr	r3, [pc, #160]	; (8008ab8 <SX1276SetTx+0xb4>)
 8008a18:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008a1c:	b163      	cbz	r3, 8008a38 <SX1276SetTx+0x34>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d023      	beq.n	8008a6a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8008a22:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <SX1276SetTx+0xb4>)
 8008a24:	2202      	movs	r2, #2
 8008a26:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8008a2a:	4822      	ldr	r0, [pc, #136]	; (8008ab4 <SX1276SetTx+0xb0>)
 8008a2c:	f7ff fb62 	bl	80080f4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008a30:	2003      	movs	r0, #3
 8008a32:	f00a f8c0 	bl	8012bb6 <SX1276SetOpMode>
}
 8008a36:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008a38:	2040      	movs	r0, #64	; 0x40
 8008a3a:	f00a f8b0 	bl	8012b9e <SX1276Read>
 8008a3e:	f000 0103 	and.w	r1, r0, #3
 8008a42:	2040      	movs	r0, #64	; 0x40
 8008a44:	f00a f89f 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008a48:	2041      	movs	r0, #65	; 0x41
 8008a4a:	f00a f8a8 	bl	8012b9e <SX1276Read>
 8008a4e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8008a52:	2041      	movs	r0, #65	; 0x41
 8008a54:	f00a f897 	bl	8012b86 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008a58:	2035      	movs	r0, #53	; 0x35
 8008a5a:	f00a f8a0 	bl	8012b9e <SX1276Read>
 8008a5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008a62:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <SX1276SetTx+0xb4>)
 8008a64:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8008a68:	e7db      	b.n	8008a22 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008a6a:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <SX1276SetTx+0xb4>)
 8008a6c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008a70:	b173      	cbz	r3, 8008a90 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008a72:	21f5      	movs	r1, #245	; 0xf5
 8008a74:	2011      	movs	r0, #17
 8008a76:	f00a f886 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8008a7a:	2040      	movs	r0, #64	; 0x40
 8008a7c:	f00a f88f 	bl	8012b9e <SX1276Read>
 8008a80:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008a84:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008a88:	2040      	movs	r0, #64	; 0x40
 8008a8a:	f00a f87c 	bl	8012b86 <SX1276Write>
 8008a8e:	e7c8      	b.n	8008a22 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008a90:	21f7      	movs	r1, #247	; 0xf7
 8008a92:	2011      	movs	r0, #17
 8008a94:	f00a f877 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8008a98:	2040      	movs	r0, #64	; 0x40
 8008a9a:	f00a f880 	bl	8012b9e <SX1276Read>
 8008a9e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008aa2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008aa6:	2040      	movs	r0, #64	; 0x40
 8008aa8:	f00a f86d 	bl	8012b86 <SX1276Write>
 8008aac:	e7b9      	b.n	8008a22 <SX1276SetTx+0x1e>
 8008aae:	bf00      	nop
 8008ab0:	20001594 	.word	0x20001594
 8008ab4:	200017f0 	.word	0x200017f0
 8008ab8:	200016ac 	.word	0x200016ac

08008abc <SX1276Send>:
{
 8008abc:	b530      	push	{r4, r5, lr}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8008ac6:	4b44      	ldr	r3, [pc, #272]	; (8008bd8 <SX1276Send+0x11c>)
 8008ac8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008acc:	b133      	cbz	r3, 8008adc <SX1276Send+0x20>
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d03a      	beq.n	8008b48 <SX1276Send+0x8c>
 8008ad2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8008ad4:	f7ff ff96 	bl	8008a04 <SX1276SetTx>
}
 8008ad8:	b003      	add	sp, #12
 8008ada:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008adc:	4b3e      	ldr	r3, [pc, #248]	; (8008bd8 <SX1276Send+0x11c>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8008ae4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008ae8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8008aec:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008af0:	b9eb      	cbnz	r3, 8008b2e <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008af2:	2101      	movs	r1, #1
 8008af4:	f10d 0007 	add.w	r0, sp, #7
 8008af8:	f00a f80c 	bl	8012b14 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8008afc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008b00:	1e53      	subs	r3, r2, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b3f      	cmp	r3, #63	; 0x3f
 8008b06:	d816      	bhi.n	8008b36 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008b08:	4b33      	ldr	r3, [pc, #204]	; (8008bd8 <SX1276Send+0x11c>)
 8008b0a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008b0e:	4d32      	ldr	r5, [pc, #200]	; (8008bd8 <SX1276Send+0x11c>)
 8008b10:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8008b14:	4620      	mov	r0, r4
 8008b16:	f009 fffd 	bl	8012b14 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008b1a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8008b1e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8008b22:	4413      	add	r3, r2
 8008b24:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008b28:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8008b2c:	e7d2      	b.n	8008ad4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008b2e:	2032      	movs	r0, #50	; 0x32
 8008b30:	f00a f829 	bl	8012b86 <SX1276Write>
 8008b34:	e7e2      	b.n	8008afc <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8008b36:	4621      	mov	r1, r4
 8008b38:	4828      	ldr	r0, [pc, #160]	; (8008bdc <SX1276Send+0x120>)
 8008b3a:	f009 ff22 	bl	8012982 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008b3e:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <SX1276Send+0x11c>)
 8008b40:	2220      	movs	r2, #32
 8008b42:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8008b46:	e7e2      	b.n	8008b0e <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008b48:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <SX1276Send+0x11c>)
 8008b4a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008b4e:	b353      	cbz	r3, 8008ba6 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008b50:	2033      	movs	r0, #51	; 0x33
 8008b52:	f00a f824 	bl	8012b9e <SX1276Read>
 8008b56:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8008b5a:	2033      	movs	r0, #51	; 0x33
 8008b5c:	f00a f813 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008b60:	2119      	movs	r1, #25
 8008b62:	203b      	movs	r0, #59	; 0x3b
 8008b64:	f00a f80f 	bl	8012b86 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008b68:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008b6c:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <SX1276Send+0x11c>)
 8008b6e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008b72:	2022      	movs	r0, #34	; 0x22
 8008b74:	f00a f807 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008b78:	2100      	movs	r1, #0
 8008b7a:	200e      	movs	r0, #14
 8008b7c:	f00a f803 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008b80:	2100      	movs	r1, #0
 8008b82:	200d      	movs	r0, #13
 8008b84:	f009 ffff 	bl	8012b86 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008b88:	2001      	movs	r0, #1
 8008b8a:	f00a f808 	bl	8012b9e <SX1276Read>
 8008b8e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8008b92:	d01a      	beq.n	8008bca <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8008b94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f009 ffbb 	bl	8012b14 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <SX1276Send+0x11c>)
 8008ba0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8008ba4:	e796      	b.n	8008ad4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008ba6:	2033      	movs	r0, #51	; 0x33
 8008ba8:	f009 fff9 	bl	8012b9e <SX1276Read>
 8008bac:	b241      	sxtb	r1, r0
 8008bae:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008bb2:	f041 0101 	orr.w	r1, r1, #1
 8008bb6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008bba:	2033      	movs	r0, #51	; 0x33
 8008bbc:	f009 ffe3 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008bc0:	211d      	movs	r1, #29
 8008bc2:	203b      	movs	r0, #59	; 0x3b
 8008bc4:	f009 ffdf 	bl	8012b86 <SX1276Write>
 8008bc8:	e7ce      	b.n	8008b68 <SX1276Send+0xac>
                SX1276SetStby( );
 8008bca:	f7ff ff01 	bl	80089d0 <SX1276SetStby>
                DelayMs( 1 );
 8008bce:	2001      	movs	r0, #1
 8008bd0:	f009 ff28 	bl	8012a24 <DelayMs>
 8008bd4:	e7de      	b.n	8008b94 <SX1276Send+0xd8>
 8008bd6:	bf00      	nop
 8008bd8:	200016ac 	.word	0x200016ac
 8008bdc:	200015ac 	.word	0x200015ac

08008be0 <SX1276SetRx>:
{
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8008be4:	489d      	ldr	r0, [pc, #628]	; (8008e5c <SX1276SetRx+0x27c>)
 8008be6:	f7ff faff 	bl	80081e8 <TimerStop>
    switch( SX1276.Settings.Modem )
 8008bea:	4b9d      	ldr	r3, [pc, #628]	; (8008e60 <SX1276SetRx+0x280>)
 8008bec:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008bf0:	b1e3      	cbz	r3, 8008c2c <SX1276SetRx+0x4c>
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d045      	beq.n	8008c82 <SX1276SetRx+0xa2>
 8008bf6:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8008bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4899      	ldr	r0, [pc, #612]	; (8008e64 <SX1276SetRx+0x284>)
 8008c00:	f00b fc3e 	bl	8014480 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8008c04:	4b96      	ldr	r3, [pc, #600]	; (8008e60 <SX1276SetRx+0x280>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	f040 8107 	bne.w	8008e20 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8008c12:	4b93      	ldr	r3, [pc, #588]	; (8008e60 <SX1276SetRx+0x280>)
 8008c14:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 810a 	beq.w	8008e32 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8008c1e:	2e00      	cmp	r6, #0
 8008c20:	f000 8118 	beq.w	8008e54 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8008c24:	2005      	movs	r0, #5
 8008c26:	f009 ffc6 	bl	8012bb6 <SX1276SetOpMode>
}
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8008c2c:	4d8c      	ldr	r5, [pc, #560]	; (8008e60 <SX1276SetRx+0x280>)
 8008c2e:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c32:	2040      	movs	r0, #64	; 0x40
 8008c34:	f009 ffb3 	bl	8012b9e <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8008c38:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c3c:	f041 010c 	orr.w	r1, r1, #12
 8008c40:	2040      	movs	r0, #64	; 0x40
 8008c42:	f009 ffa0 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008c46:	2041      	movs	r0, #65	; 0x41
 8008c48:	f009 ffa9 	bl	8012b9e <SX1276Read>
 8008c4c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8008c50:	b2c9      	uxtb	r1, r1
 8008c52:	2041      	movs	r0, #65	; 0x41
 8008c54:	f009 ff97 	bl	8012b86 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008c58:	2035      	movs	r0, #53	; 0x35
 8008c5a:	f009 ffa0 	bl	8012b9e <SX1276Read>
 8008c5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008c62:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8008c66:	211e      	movs	r1, #30
 8008c68:	200d      	movs	r0, #13
 8008c6a:	f009 ff8c 	bl	8012b86 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008c74:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008c78:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008c7c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8008c80:	e7ba      	b.n	8008bf8 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008c82:	4b77      	ldr	r3, [pc, #476]	; (8008e60 <SX1276SetRx+0x280>)
 8008c84:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008c88:	b353      	cbz	r3, 8008ce0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8008c8a:	2033      	movs	r0, #51	; 0x33
 8008c8c:	f009 ff87 	bl	8012b9e <SX1276Read>
 8008c90:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8008c94:	b2c9      	uxtb	r1, r1
 8008c96:	2033      	movs	r0, #51	; 0x33
 8008c98:	f009 ff75 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008c9c:	2119      	movs	r1, #25
 8008c9e:	203b      	movs	r0, #59	; 0x3b
 8008ca0:	f009 ff71 	bl	8012b86 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8008ca4:	4b6e      	ldr	r3, [pc, #440]	; (8008e60 <SX1276SetRx+0x280>)
 8008ca6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	f200 8087 	bhi.w	8008dbe <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008cb0:	2031      	movs	r0, #49	; 0x31
 8008cb2:	f009 ff74 	bl	8012b9e <SX1276Read>
 8008cb6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008cba:	2031      	movs	r0, #49	; 0x31
 8008cbc:	f009 ff63 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	2030      	movs	r0, #48	; 0x30
 8008cc4:	f009 ff5f 	bl	8012b86 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008cc8:	4b65      	ldr	r3, [pc, #404]	; (8008e60 <SX1276SetRx+0x280>)
 8008cca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d87e      	bhi.n	8008dd0 <SX1276SetRx+0x1f0>
 8008cd2:	e8df f003 	tbb	[pc, r3]
 8008cd6:	2417      	.short	0x2417
 8008cd8:	584b3e31 	.word	0x584b3e31
 8008cdc:	6a65      	.short	0x6a65
 8008cde:	6f          	.byte	0x6f
 8008cdf:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008ce0:	2033      	movs	r0, #51	; 0x33
 8008ce2:	f009 ff5c 	bl	8012b9e <SX1276Read>
 8008ce6:	b241      	sxtb	r1, r0
 8008ce8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008cec:	f041 0101 	orr.w	r1, r1, #1
 8008cf0:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008cf4:	2033      	movs	r0, #51	; 0x33
 8008cf6:	f009 ff46 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008cfa:	211d      	movs	r1, #29
 8008cfc:	203b      	movs	r0, #59	; 0x3b
 8008cfe:	f009 ff42 	bl	8012b86 <SX1276Write>
 8008d02:	e7cf      	b.n	8008ca4 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8008d04:	2148      	movs	r1, #72	; 0x48
 8008d06:	202f      	movs	r0, #47	; 0x2f
 8008d08:	f009 ff3d 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8008d0c:	4b54      	ldr	r3, [pc, #336]	; (8008e60 <SX1276SetRx+0x280>)
 8008d0e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d12:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8008d16:	3002      	adds	r0, #2
 8008d18:	f7ff fb0c 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d1c:	e058      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d1e:	2144      	movs	r1, #68	; 0x44
 8008d20:	202f      	movs	r0, #47	; 0x2f
 8008d22:	f009 ff30 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8008d26:	4b4e      	ldr	r3, [pc, #312]	; (8008e60 <SX1276SetRx+0x280>)
 8008d28:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d2c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8008d30:	3034      	adds	r0, #52	; 0x34
 8008d32:	f7ff faff 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d36:	e04b      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d38:	2144      	movs	r1, #68	; 0x44
 8008d3a:	202f      	movs	r0, #47	; 0x2f
 8008d3c:	f009 ff23 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8008d40:	4b47      	ldr	r3, [pc, #284]	; (8008e60 <SX1276SetRx+0x280>)
 8008d42:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d46:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8008d4a:	3004      	adds	r0, #4
 8008d4c:	f7ff faf2 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d50:	e03e      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d52:	2144      	movs	r1, #68	; 0x44
 8008d54:	202f      	movs	r0, #47	; 0x2f
 8008d56:	f009 ff16 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8008d5a:	4b41      	ldr	r3, [pc, #260]	; (8008e60 <SX1276SetRx+0x280>)
 8008d5c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d60:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8008d64:	305e      	adds	r0, #94	; 0x5e
 8008d66:	f7ff fae5 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d6a:	e031      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d6c:	2144      	movs	r1, #68	; 0x44
 8008d6e:	202f      	movs	r0, #47	; 0x2f
 8008d70:	f009 ff09 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8008d74:	4b3a      	ldr	r3, [pc, #232]	; (8008e60 <SX1276SetRx+0x280>)
 8008d76:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d7a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8008d7e:	3012      	adds	r0, #18
 8008d80:	f7ff fad8 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d84:	e024      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d86:	2144      	movs	r1, #68	; 0x44
 8008d88:	202f      	movs	r0, #47	; 0x2f
 8008d8a:	f009 fefc 	bl	8012b86 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8008d8e:	4b34      	ldr	r3, [pc, #208]	; (8008e60 <SX1276SetRx+0x280>)
 8008d90:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d94:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8008d98:	30c6      	adds	r0, #198	; 0xc6
 8008d9a:	f7ff facb 	bl	8008334 <SX1276SetChannel>
                    break;
 8008d9e:	e017      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008da0:	2140      	movs	r1, #64	; 0x40
 8008da2:	202f      	movs	r0, #47	; 0x2f
 8008da4:	f009 feef 	bl	8012b86 <SX1276Write>
                    break;
 8008da8:	e012      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008daa:	2140      	movs	r1, #64	; 0x40
 8008dac:	202f      	movs	r0, #47	; 0x2f
 8008dae:	f009 feea 	bl	8012b86 <SX1276Write>
                    break;
 8008db2:	e00d      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	202f      	movs	r0, #47	; 0x2f
 8008db8:	f009 fee5 	bl	8012b86 <SX1276Write>
                    break;
 8008dbc:	e008      	b.n	8008dd0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8008dbe:	2031      	movs	r0, #49	; 0x31
 8008dc0:	f009 feed 	bl	8012b9e <SX1276Read>
 8008dc4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008dc8:	b2c9      	uxtb	r1, r1
 8008dca:	2031      	movs	r0, #49	; 0x31
 8008dcc:	f009 fedb 	bl	8012b86 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8008dd0:	4b23      	ldr	r3, [pc, #140]	; (8008e60 <SX1276SetRx+0x280>)
 8008dd2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008dd6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008dda:	b1a3      	cbz	r3, 8008e06 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008ddc:	211d      	movs	r1, #29
 8008dde:	2011      	movs	r0, #17
 8008de0:	f009 fed1 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8008de4:	2040      	movs	r0, #64	; 0x40
 8008de6:	f009 feda 	bl	8012b9e <SX1276Read>
 8008dea:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008dee:	2040      	movs	r0, #64	; 0x40
 8008df0:	f009 fec9 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8008df4:	2100      	movs	r1, #0
 8008df6:	200f      	movs	r0, #15
 8008df8:	f009 fec5 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	200d      	movs	r0, #13
 8008e00:	f009 fec1 	bl	8012b86 <SX1276Write>
        break;
 8008e04:	e6f8      	b.n	8008bf8 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008e06:	211f      	movs	r1, #31
 8008e08:	2011      	movs	r0, #17
 8008e0a:	f009 febc 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008e0e:	2040      	movs	r0, #64	; 0x40
 8008e10:	f009 fec5 	bl	8012b9e <SX1276Read>
 8008e14:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008e18:	2040      	movs	r0, #64	; 0x40
 8008e1a:	f009 feb4 	bl	8012b86 <SX1276Write>
 8008e1e:	e7e9      	b.n	8008df4 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008e20:	4d11      	ldr	r5, [pc, #68]	; (8008e68 <SX1276SetRx+0x288>)
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f009 fdd6 	bl	80129d6 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f7ff f962 	bl	80080f4 <TimerStart>
 8008e30:	e6ef      	b.n	8008c12 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008e32:	2005      	movs	r0, #5
 8008e34:	f009 febf 	bl	8012bb6 <SX1276SetOpMode>
        if( rxContinuous == false )
 8008e38:	2e00      	cmp	r6, #0
 8008e3a:	f47f aef6 	bne.w	8008c2a <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8008e3e:	4c0b      	ldr	r4, [pc, #44]	; (8008e6c <SX1276SetRx+0x28c>)
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <SX1276SetRx+0x280>)
 8008e42:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8008e46:	4620      	mov	r0, r4
 8008e48:	f009 fdc5 	bl	80129d6 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff f951 	bl	80080f4 <TimerStart>
 8008e52:	e6ea      	b.n	8008c2a <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8008e54:	2006      	movs	r0, #6
 8008e56:	f009 feae 	bl	8012bb6 <SX1276SetOpMode>
}
 8008e5a:	e6e6      	b.n	8008c2a <SX1276SetRx+0x4a>
 8008e5c:	200017f0 	.word	0x200017f0
 8008e60:	200016ac 	.word	0x200016ac
 8008e64:	200015ac 	.word	0x200015ac
 8008e68:	20001594 	.word	0x20001594
 8008e6c:	2000157c 	.word	0x2000157c

08008e70 <SX1276ReadRssi>:
{
 8008e70:	b508      	push	{r3, lr}
    switch( modem )
 8008e72:	b120      	cbz	r0, 8008e7e <SX1276ReadRssi+0xe>
 8008e74:	2801      	cmp	r0, #1
 8008e76:	d00a      	beq.n	8008e8e <SX1276ReadRssi+0x1e>
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008e7c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008e7e:	2011      	movs	r0, #17
 8008e80:	f009 fe8d 	bl	8012b9e <SX1276Read>
 8008e84:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8008e88:	4240      	negs	r0, r0
 8008e8a:	b200      	sxth	r0, r0
        break;
 8008e8c:	e7f6      	b.n	8008e7c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008e8e:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <SX1276ReadRssi+0x48>)
 8008e90:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <SX1276ReadRssi+0x4c>)
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d906      	bls.n	8008ea8 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8008e9a:	201b      	movs	r0, #27
 8008e9c:	f009 fe7f 	bl	8012b9e <SX1276Read>
 8008ea0:	b280      	uxth	r0, r0
 8008ea2:	389d      	subs	r0, #157	; 0x9d
 8008ea4:	b200      	sxth	r0, r0
 8008ea6:	e7e9      	b.n	8008e7c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8008ea8:	201b      	movs	r0, #27
 8008eaa:	f009 fe78 	bl	8012b9e <SX1276Read>
 8008eae:	b280      	uxth	r0, r0
 8008eb0:	38a4      	subs	r0, #164	; 0xa4
 8008eb2:	b200      	sxth	r0, r0
 8008eb4:	e7e2      	b.n	8008e7c <SX1276ReadRssi+0xc>
 8008eb6:	bf00      	nop
 8008eb8:	200016ac 	.word	0x200016ac
 8008ebc:	1f4add40 	.word	0x1f4add40

08008ec0 <SX1276SetModem>:
{
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	f009 fe6a 	bl	8012b9e <SX1276Read>
 8008eca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008ece:	d121      	bne.n	8008f14 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8008ed0:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <SX1276SetModem+0x88>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8008ed8:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <SX1276SetModem+0x88>)
 8008eda:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	d017      	beq.n	8008f12 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8008ee2:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <SX1276SetModem+0x88>)
 8008ee4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8008ee8:	2c01      	cmp	r4, #1
 8008eea:	d018      	beq.n	8008f1e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008eec:	2000      	movs	r0, #0
 8008eee:	f009 fe62 	bl	8012bb6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	f009 fe53 	bl	8012b9e <SX1276Read>
 8008ef8:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008efc:	2001      	movs	r0, #1
 8008efe:	f009 fe42 	bl	8012b86 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008f02:	2100      	movs	r1, #0
 8008f04:	2040      	movs	r0, #64	; 0x40
 8008f06:	f009 fe3e 	bl	8012b86 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008f0a:	2130      	movs	r1, #48	; 0x30
 8008f0c:	2041      	movs	r0, #65	; 0x41
 8008f0e:	f009 fe3a 	bl	8012b86 <SX1276Write>
}
 8008f12:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8008f14:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <SX1276SetModem+0x88>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8008f1c:	e7dc      	b.n	8008ed8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008f1e:	2000      	movs	r0, #0
 8008f20:	f009 fe49 	bl	8012bb6 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008f24:	2001      	movs	r0, #1
 8008f26:	f009 fe3a 	bl	8012b9e <SX1276Read>
 8008f2a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008f2e:	b2c9      	uxtb	r1, r1
 8008f30:	2001      	movs	r0, #1
 8008f32:	f009 fe28 	bl	8012b86 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008f36:	2100      	movs	r1, #0
 8008f38:	2040      	movs	r0, #64	; 0x40
 8008f3a:	f009 fe24 	bl	8012b86 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008f3e:	2100      	movs	r1, #0
 8008f40:	2041      	movs	r0, #65	; 0x41
 8008f42:	f009 fe20 	bl	8012b86 <SX1276Write>
        break;
 8008f46:	e7e4      	b.n	8008f12 <SX1276SetModem+0x52>
 8008f48:	200016ac 	.word	0x200016ac

08008f4c <SX1276Init>:
{
 8008f4c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8008f4e:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <SX1276Init+0x68>)
 8008f50:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8008f52:	4c19      	ldr	r4, [pc, #100]	; (8008fb8 <SX1276Init+0x6c>)
 8008f54:	4621      	mov	r1, r4
 8008f56:	4819      	ldr	r0, [pc, #100]	; (8008fbc <SX1276Init+0x70>)
 8008f58:	f009 fd34 	bl	80129c4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4818      	ldr	r0, [pc, #96]	; (8008fc0 <SX1276Init+0x74>)
 8008f60:	f009 fd30 	bl	80129c4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8008f64:	4621      	mov	r1, r4
 8008f66:	4817      	ldr	r0, [pc, #92]	; (8008fc4 <SX1276Init+0x78>)
 8008f68:	f009 fd2c 	bl	80129c4 <TimerInit>
    SX1276Reset( );
 8008f6c:	f7fe fd38 	bl	80079e0 <SX1276Reset>
    RxChainCalibration( );
 8008f70:	f7ff fccc 	bl	800890c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008f74:	2000      	movs	r0, #0
 8008f76:	f009 fe1e 	bl	8012bb6 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8008f7a:	4813      	ldr	r0, [pc, #76]	; (8008fc8 <SX1276Init+0x7c>)
 8008f7c:	f7fe fd64 	bl	8007a48 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008f80:	2400      	movs	r4, #0
 8008f82:	e00c      	b.n	8008f9e <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008f84:	4a11      	ldr	r2, [pc, #68]	; (8008fcc <SX1276Init+0x80>)
 8008f86:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008f8a:	18d5      	adds	r5, r2, r3
 8008f8c:	5cd0      	ldrb	r0, [r2, r3]
 8008f8e:	f7ff ff97 	bl	8008ec0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008f92:	78a9      	ldrb	r1, [r5, #2]
 8008f94:	7868      	ldrb	r0, [r5, #1]
 8008f96:	f009 fdf6 	bl	8012b86 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008f9a:	3401      	adds	r4, #1
 8008f9c:	b2e4      	uxtb	r4, r4
 8008f9e:	2c0f      	cmp	r4, #15
 8008fa0:	d9f0      	bls.n	8008f84 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7ff ff8c 	bl	8008ec0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8008fa8:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <SX1276Init+0x84>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001578 	.word	0x20001578
 8008fb8:	080095cd 	.word	0x080095cd
 8008fbc:	200017f0 	.word	0x200017f0
 8008fc0:	20001594 	.word	0x20001594
 8008fc4:	2000157c 	.word	0x2000157c
 8008fc8:	20000280 	.word	0x20000280
 8008fcc:	08016528 	.word	0x08016528
 8008fd0:	200016ac 	.word	0x200016ac

08008fd4 <SX1276SetRxConfig>:
{
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	4604      	mov	r4, r0
 8008fdc:	9101      	str	r1, [sp, #4]
 8008fde:	4615      	mov	r5, r2
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8008fe6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8008fea:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8008fee:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8008ff2:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8008ff6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8008ffa:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8008ffe:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8009000:	f7ff ff5e 	bl	8008ec0 <SX1276SetModem>
    switch( modem )
 8009004:	b124      	cbz	r4, 8009010 <SX1276SetRxConfig+0x3c>
 8009006:	2c01      	cmp	r4, #1
 8009008:	d069      	beq.n	80090de <SX1276SetRxConfig+0x10a>
}
 800900a:	b005      	add	sp, #20
 800900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8009010:	4ba0      	ldr	r3, [pc, #640]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 8009012:	9c01      	ldr	r4, [sp, #4]
 8009014:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8009018:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800901c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800901e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8009022:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8009026:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800902a:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800902e:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8009032:	9a02      	ldr	r2, [sp, #8]
 8009034:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8009038:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800903c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009040:	fb02 fa0a 	mul.w	sl, r2, sl
 8009044:	fbba f2f5 	udiv	r2, sl, r5
 8009048:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800904c:	4b92      	ldr	r3, [pc, #584]	; (8009298 <SX1276SetRxConfig+0x2c4>)
 800904e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8009052:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009056:	2002      	movs	r0, #2
 8009058:	f009 fd95 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800905c:	b2e9      	uxtb	r1, r5
 800905e:	2003      	movs	r0, #3
 8009060:	f009 fd91 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8009064:	4620      	mov	r0, r4
 8009066:	f7ff f913 	bl	8008290 <GetFskBandwidthRegValue>
 800906a:	4601      	mov	r1, r0
 800906c:	2012      	movs	r0, #18
 800906e:	f009 fd8a 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8009072:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009074:	f7ff f90c 	bl	8008290 <GetFskBandwidthRegValue>
 8009078:	4601      	mov	r1, r0
 800907a:	2013      	movs	r0, #19
 800907c:	f009 fd83 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8009080:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8009084:	2025      	movs	r0, #37	; 0x25
 8009086:	f009 fd7e 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800908a:	fa5f f188 	uxtb.w	r1, r8
 800908e:	2026      	movs	r0, #38	; 0x26
 8009090:	f009 fd79 	bl	8012b86 <SX1276Write>
            if( fixLen == 1 )
 8009094:	b1df      	cbz	r7, 80090ce <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8009096:	4649      	mov	r1, r9
 8009098:	2032      	movs	r0, #50	; 0x32
 800909a:	f009 fd74 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800909e:	2030      	movs	r0, #48	; 0x30
 80090a0:	f009 fd7d 	bl	8012b9e <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80090a4:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80090a8:	b1b7      	cbz	r7, 80090d8 <SX1276SetRxConfig+0x104>
 80090aa:	2300      	movs	r3, #0
 80090ac:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80090ae:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80090b2:	b2c9      	uxtb	r1, r1
 80090b4:	2030      	movs	r0, #48	; 0x30
 80090b6:	f009 fd66 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80090ba:	2031      	movs	r0, #49	; 0x31
 80090bc:	f009 fd6f 	bl	8012b9e <SX1276Read>
 80090c0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80090c4:	b2c9      	uxtb	r1, r1
 80090c6:	2031      	movs	r0, #49	; 0x31
 80090c8:	f009 fd5d 	bl	8012b86 <SX1276Write>
        break;
 80090cc:	e79d      	b.n	800900a <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80090ce:	21ff      	movs	r1, #255	; 0xff
 80090d0:	2032      	movs	r0, #50	; 0x32
 80090d2:	f009 fd58 	bl	8012b86 <SX1276Write>
 80090d6:	e7e2      	b.n	800909e <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80090d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80090dc:	e7e6      	b.n	80090ac <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d900      	bls.n	80090e6 <SX1276SetRxConfig+0x112>
                while( 1 );
 80090e4:	e7fe      	b.n	80090e4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 80090e6:	9c01      	ldr	r4, [sp, #4]
 80090e8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80090ea:	4b6a      	ldr	r3, [pc, #424]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 80090ec:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80090f0:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80090f4:	9a03      	ldr	r2, [sp, #12]
 80090f6:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80090fa:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80090fe:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8009102:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8009106:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800910a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800910e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8009112:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009116:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800911a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800911e:	9a02      	ldr	r2, [sp, #8]
 8009120:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8009124:	2d0c      	cmp	r5, #12
 8009126:	d803      	bhi.n	8009130 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8009128:	2d05      	cmp	r5, #5
 800912a:	d802      	bhi.n	8009132 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 800912c:	2506      	movs	r5, #6
 800912e:	e000      	b.n	8009132 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8009130:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009132:	2c07      	cmp	r4, #7
 8009134:	d063      	beq.n	80091fe <SX1276SetRxConfig+0x22a>
 8009136:	2c08      	cmp	r4, #8
 8009138:	d06a      	beq.n	8009210 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800913a:	4b56      	ldr	r3, [pc, #344]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8009142:	201d      	movs	r0, #29
 8009144:	f009 fd2b 	bl	8012b9e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8009148:	0123      	lsls	r3, r4, #4
 800914a:	b2da      	uxtb	r2, r3
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8009154:	ea43 0107 	orr.w	r1, r3, r7
 8009158:	201d      	movs	r0, #29
 800915a:	f009 fd14 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800915e:	201e      	movs	r0, #30
 8009160:	f009 fd1d 	bl	8012b9e <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8009164:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8009168:	012a      	lsls	r2, r5, #4
 800916a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800916c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800916e:	00b3      	lsls	r3, r6, #2
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8009174:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009178:	4319      	orrs	r1, r3
 800917a:	201e      	movs	r0, #30
 800917c:	f009 fd03 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8009180:	2026      	movs	r0, #38	; 0x26
 8009182:	f009 fd0c 	bl	8012b9e <SX1276Read>
 8009186:	b241      	sxtb	r1, r0
 8009188:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800918c:	4b41      	ldr	r3, [pc, #260]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 800918e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009192:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009196:	b2c9      	uxtb	r1, r1
 8009198:	2026      	movs	r0, #38	; 0x26
 800919a:	f009 fcf4 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800919e:	fa5f f18a 	uxtb.w	r1, sl
 80091a2:	201f      	movs	r0, #31
 80091a4:	f009 fcef 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80091a8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80091ac:	2020      	movs	r0, #32
 80091ae:	f009 fcea 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80091b2:	fa5f f188 	uxtb.w	r1, r8
 80091b6:	2021      	movs	r0, #33	; 0x21
 80091b8:	f009 fce5 	bl	8012b86 <SX1276Write>
            if( fixLen == 1 )
 80091bc:	bb5f      	cbnz	r7, 8009216 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80091be:	4b35      	ldr	r3, [pc, #212]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 80091c0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80091c4:	bb63      	cbnz	r3, 8009220 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80091c6:	2c09      	cmp	r4, #9
 80091c8:	d03a      	beq.n	8009240 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 80091ca:	2c09      	cmp	r4, #9
 80091cc:	d047      	beq.n	800925e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80091ce:	2103      	movs	r1, #3
 80091d0:	2036      	movs	r0, #54	; 0x36
 80091d2:	f009 fcd8 	bl	8012b86 <SX1276Write>
            if( datarate == 6 )
 80091d6:	2d06      	cmp	r5, #6
 80091d8:	d04a      	beq.n	8009270 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80091da:	2031      	movs	r0, #49	; 0x31
 80091dc:	f009 fcdf 	bl	8012b9e <SX1276Read>
 80091e0:	b241      	sxtb	r1, r0
 80091e2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80091e6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80091ea:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80091ee:	2031      	movs	r0, #49	; 0x31
 80091f0:	f009 fcc9 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80091f4:	210a      	movs	r1, #10
 80091f6:	2037      	movs	r0, #55	; 0x37
 80091f8:	f009 fcc5 	bl	8012b86 <SX1276Write>
}
 80091fc:	e705      	b.n	800900a <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80091fe:	f1a5 030b 	sub.w	r3, r5, #11
 8009202:	2b01      	cmp	r3, #1
 8009204:	d897      	bhi.n	8009136 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8009206:	4b23      	ldr	r3, [pc, #140]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800920e:	e798      	b.n	8009142 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009210:	2d0c      	cmp	r5, #12
 8009212:	d192      	bne.n	800913a <SX1276SetRxConfig+0x166>
 8009214:	e7f7      	b.n	8009206 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8009216:	4649      	mov	r1, r9
 8009218:	2022      	movs	r0, #34	; 0x22
 800921a:	f009 fcb4 	bl	8012b86 <SX1276Write>
 800921e:	e7ce      	b.n	80091be <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009220:	2044      	movs	r0, #68	; 0x44
 8009222:	f009 fcbc 	bl	8012b9e <SX1276Read>
 8009226:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800922a:	b2c9      	uxtb	r1, r1
 800922c:	2044      	movs	r0, #68	; 0x44
 800922e:	f009 fcaa 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8009232:	4b18      	ldr	r3, [pc, #96]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 8009234:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8009238:	2024      	movs	r0, #36	; 0x24
 800923a:	f009 fca4 	bl	8012b86 <SX1276Write>
 800923e:	e7c2      	b.n	80091c6 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8009240:	4b14      	ldr	r3, [pc, #80]	; (8009294 <SX1276SetRxConfig+0x2c0>)
 8009242:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8009246:	4b15      	ldr	r3, [pc, #84]	; (800929c <SX1276SetRxConfig+0x2c8>)
 8009248:	429a      	cmp	r2, r3
 800924a:	d9be      	bls.n	80091ca <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800924c:	2102      	movs	r1, #2
 800924e:	2036      	movs	r0, #54	; 0x36
 8009250:	f009 fc99 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8009254:	2164      	movs	r1, #100	; 0x64
 8009256:	203a      	movs	r0, #58	; 0x3a
 8009258:	f009 fc95 	bl	8012b86 <SX1276Write>
 800925c:	e7bb      	b.n	80091d6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800925e:	2102      	movs	r1, #2
 8009260:	2036      	movs	r0, #54	; 0x36
 8009262:	f009 fc90 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8009266:	217f      	movs	r1, #127	; 0x7f
 8009268:	203a      	movs	r0, #58	; 0x3a
 800926a:	f009 fc8c 	bl	8012b86 <SX1276Write>
 800926e:	e7b2      	b.n	80091d6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009270:	2031      	movs	r0, #49	; 0x31
 8009272:	f009 fc94 	bl	8012b9e <SX1276Read>
 8009276:	b241      	sxtb	r1, r0
 8009278:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800927c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009280:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8009284:	2031      	movs	r0, #49	; 0x31
 8009286:	f009 fc7e 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800928a:	210c      	movs	r1, #12
 800928c:	2037      	movs	r0, #55	; 0x37
 800928e:	f009 fc7a 	bl	8012b86 <SX1276Write>
 8009292:	e6ba      	b.n	800900a <SX1276SetRxConfig+0x36>
 8009294:	200016ac 	.word	0x200016ac
 8009298:	01e84800 	.word	0x01e84800
 800929c:	1f4add40 	.word	0x1f4add40

080092a0 <SX1276SetTxConfig>:
{
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b083      	sub	sp, #12
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80092b2:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80092b6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80092ba:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80092be:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80092c2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80092c6:	f7ff fdfb 	bl	8008ec0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7fe fe08 	bl	8007ee0 <SX1276SetRfTxPower>
    switch( modem )
 80092d0:	b124      	cbz	r4, 80092dc <SX1276SetTxConfig+0x3c>
 80092d2:	2c01      	cmp	r4, #1
 80092d4:	d057      	beq.n	8009386 <SX1276SetTxConfig+0xe6>
}
 80092d6:	b003      	add	sp, #12
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 80092dc:	4b81      	ldr	r3, [pc, #516]	; (80094e4 <SX1276SetTxConfig+0x244>)
 80092de:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 80092e2:	9801      	ldr	r0, [sp, #4]
 80092e4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80092e8:	9a00      	ldr	r2, [sp, #0]
 80092ea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 80092ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092f0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80092f4:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 80092f8:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80092fc:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8009300:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8009304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009306:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800930a:	f7fe ffad 	bl	8008268 <SX1276ConvertFreqInHzToPllStep>
 800930e:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8009310:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009314:	2004      	movs	r0, #4
 8009316:	f009 fc36 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800931a:	b2e1      	uxtb	r1, r4
 800931c:	2005      	movs	r0, #5
 800931e:	f009 fc32 	bl	8012b86 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8009322:	4c71      	ldr	r4, [pc, #452]	; (80094e8 <SX1276SetTxConfig+0x248>)
 8009324:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009326:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800932a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800932e:	2002      	movs	r0, #2
 8009330:	f009 fc29 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8009334:	b2e1      	uxtb	r1, r4
 8009336:	2003      	movs	r0, #3
 8009338:	f009 fc25 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800933c:	0a39      	lsrs	r1, r7, #8
 800933e:	2025      	movs	r0, #37	; 0x25
 8009340:	f009 fc21 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8009344:	b2f9      	uxtb	r1, r7
 8009346:	2026      	movs	r0, #38	; 0x26
 8009348:	f009 fc1d 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800934c:	2030      	movs	r0, #48	; 0x30
 800934e:	f009 fc26 	bl	8012b9e <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8009352:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009356:	f1b8 0f00 	cmp.w	r8, #0
 800935a:	d011      	beq.n	8009380 <SX1276SetTxConfig+0xe0>
 800935c:	2300      	movs	r3, #0
 800935e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8009360:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8009364:	b2c9      	uxtb	r1, r1
 8009366:	2030      	movs	r0, #48	; 0x30
 8009368:	f009 fc0d 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800936c:	2031      	movs	r0, #49	; 0x31
 800936e:	f009 fc16 	bl	8012b9e <SX1276Read>
 8009372:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009376:	b2c9      	uxtb	r1, r1
 8009378:	2031      	movs	r0, #49	; 0x31
 800937a:	f009 fc04 	bl	8012b86 <SX1276Write>
        break;
 800937e:	e7aa      	b.n	80092d6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009380:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009384:	e7eb      	b.n	800935e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8009386:	4b57      	ldr	r3, [pc, #348]	; (80094e4 <SX1276SetTxConfig+0x244>)
 8009388:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800938c:	9b00      	ldr	r3, [sp, #0]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d900      	bls.n	8009394 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8009392:	e7fe      	b.n	8009392 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8009394:	9c00      	ldr	r4, [sp, #0]
 8009396:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8009398:	4b52      	ldr	r3, [pc, #328]	; (80094e4 <SX1276SetTxConfig+0x244>)
 800939a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 800939e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80093a4:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80093a8:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80093ac:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80093b0:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80093b4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80093b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80093bc:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80093c0:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80093c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093c6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80093ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093cc:	2b0c      	cmp	r3, #12
 80093ce:	d804      	bhi.n	80093da <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d804      	bhi.n	80093de <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80093d4:	2306      	movs	r3, #6
 80093d6:	930c      	str	r3, [sp, #48]	; 0x30
 80093d8:	e001      	b.n	80093de <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80093da:	230c      	movs	r3, #12
 80093dc:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80093de:	2c07      	cmp	r4, #7
 80093e0:	d051      	beq.n	8009486 <SX1276SetTxConfig+0x1e6>
 80093e2:	2c08      	cmp	r4, #8
 80093e4:	d058      	beq.n	8009498 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80093e6:	4b3f      	ldr	r3, [pc, #252]	; (80094e4 <SX1276SetTxConfig+0x244>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80093ee:	f1bb 0f00 	cmp.w	fp, #0
 80093f2:	d155      	bne.n	80094a0 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80093f4:	201d      	movs	r0, #29
 80093f6:	f009 fbd2 	bl	8012b9e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80093fa:	0123      	lsls	r3, r4, #4
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009402:	b2db      	uxtb	r3, r3
 8009404:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8009406:	ea43 0108 	orr.w	r1, r3, r8
 800940a:	201d      	movs	r0, #29
 800940c:	f009 fbbb 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8009410:	201e      	movs	r0, #30
 8009412:	f009 fbc4 	bl	8012b9e <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8009416:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800941a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8009420:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8009422:	00b3      	lsls	r3, r6, #2
 8009424:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009426:	4319      	orrs	r1, r3
 8009428:	201e      	movs	r0, #30
 800942a:	f009 fbac 	bl	8012b86 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800942e:	2026      	movs	r0, #38	; 0x26
 8009430:	f009 fbb5 	bl	8012b9e <SX1276Read>
 8009434:	b241      	sxtb	r1, r0
 8009436:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800943a:	4b2a      	ldr	r3, [pc, #168]	; (80094e4 <SX1276SetTxConfig+0x244>)
 800943c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009440:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009444:	b2c9      	uxtb	r1, r1
 8009446:	2026      	movs	r0, #38	; 0x26
 8009448:	f009 fb9d 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800944c:	0a39      	lsrs	r1, r7, #8
 800944e:	2020      	movs	r0, #32
 8009450:	f009 fb99 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8009454:	b2f9      	uxtb	r1, r7
 8009456:	2021      	movs	r0, #33	; 0x21
 8009458:	f009 fb95 	bl	8012b86 <SX1276Write>
            if( datarate == 6 )
 800945c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800945e:	2b06      	cmp	r3, #6
 8009460:	d02e      	beq.n	80094c0 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009462:	2031      	movs	r0, #49	; 0x31
 8009464:	f009 fb9b 	bl	8012b9e <SX1276Read>
 8009468:	b241      	sxtb	r1, r0
 800946a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800946e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009472:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8009476:	2031      	movs	r0, #49	; 0x31
 8009478:	f009 fb85 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800947c:	210a      	movs	r1, #10
 800947e:	2037      	movs	r0, #55	; 0x37
 8009480:	f009 fb81 	bl	8012b86 <SX1276Write>
}
 8009484:	e727      	b.n	80092d6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009488:	3b0b      	subs	r3, #11
 800948a:	2b01      	cmp	r3, #1
 800948c:	d8a9      	bhi.n	80093e2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800948e:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <SX1276SetTxConfig+0x244>)
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8009496:	e7aa      	b.n	80093ee <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800949a:	2b0c      	cmp	r3, #12
 800949c:	d1a3      	bne.n	80093e6 <SX1276SetTxConfig+0x146>
 800949e:	e7f6      	b.n	800948e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80094a0:	2044      	movs	r0, #68	; 0x44
 80094a2:	f009 fb7c 	bl	8012b9e <SX1276Read>
 80094a6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80094aa:	b2c9      	uxtb	r1, r1
 80094ac:	2044      	movs	r0, #68	; 0x44
 80094ae:	f009 fb6a 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80094b2:	4b0c      	ldr	r3, [pc, #48]	; (80094e4 <SX1276SetTxConfig+0x244>)
 80094b4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80094b8:	2024      	movs	r0, #36	; 0x24
 80094ba:	f009 fb64 	bl	8012b86 <SX1276Write>
 80094be:	e799      	b.n	80093f4 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80094c0:	2031      	movs	r0, #49	; 0x31
 80094c2:	f009 fb6c 	bl	8012b9e <SX1276Read>
 80094c6:	b241      	sxtb	r1, r0
 80094c8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80094cc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80094d0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80094d4:	2031      	movs	r0, #49	; 0x31
 80094d6:	f009 fb56 	bl	8012b86 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80094da:	210c      	movs	r1, #12
 80094dc:	2037      	movs	r0, #55	; 0x37
 80094de:	f009 fb52 	bl	8012b86 <SX1276Write>
 80094e2:	e6f8      	b.n	80092d6 <SX1276SetTxConfig+0x36>
 80094e4:	200016ac 	.word	0x200016ac
 80094e8:	01e84800 	.word	0x01e84800

080094ec <SX1276SetTxContinuousWave>:
{
 80094ec:	b530      	push	{r4, r5, lr}
 80094ee:	b08b      	sub	sp, #44	; 0x2c
 80094f0:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80094f2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80094f6:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 80094fa:	f7fe ff1b 	bl	8008334 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80094fe:	9408      	str	r4, [sp, #32]
 8009500:	2000      	movs	r0, #0
 8009502:	9007      	str	r0, [sp, #28]
 8009504:	9006      	str	r0, [sp, #24]
 8009506:	9005      	str	r0, [sp, #20]
 8009508:	9004      	str	r0, [sp, #16]
 800950a:	9003      	str	r0, [sp, #12]
 800950c:	2305      	movs	r3, #5
 800950e:	9302      	str	r3, [sp, #8]
 8009510:	9001      	str	r0, [sp, #4]
 8009512:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	4602      	mov	r2, r0
 800951c:	4629      	mov	r1, r5
 800951e:	f7ff febf 	bl	80092a0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8009522:	2031      	movs	r0, #49	; 0x31
 8009524:	f009 fb3b 	bl	8012b9e <SX1276Read>
 8009528:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800952c:	2031      	movs	r0, #49	; 0x31
 800952e:	f009 fb2a 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8009532:	21f0      	movs	r1, #240	; 0xf0
 8009534:	2040      	movs	r0, #64	; 0x40
 8009536:	f009 fb26 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800953a:	21a0      	movs	r1, #160	; 0xa0
 800953c:	2041      	movs	r0, #65	; 0x41
 800953e:	f009 fb22 	bl	8012b86 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009542:	4d08      	ldr	r5, [pc, #32]	; (8009564 <SX1276SetTxContinuousWave+0x78>)
 8009544:	4621      	mov	r1, r4
 8009546:	4628      	mov	r0, r5
 8009548:	f009 fa45 	bl	80129d6 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <SX1276SetTxContinuousWave+0x7c>)
 800954e:	2202      	movs	r2, #2
 8009550:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8009554:	4628      	mov	r0, r5
 8009556:	f7fe fdcd 	bl	80080f4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800955a:	2003      	movs	r0, #3
 800955c:	f009 fb2b 	bl	8012bb6 <SX1276SetOpMode>
}
 8009560:	b00b      	add	sp, #44	; 0x2c
 8009562:	bd30      	pop	{r4, r5, pc}
 8009564:	200017f0 	.word	0x200017f0
 8009568:	200016ac 	.word	0x200016ac

0800956c <SX1276SetMaxPayloadLength>:
{
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8009572:	f7ff fca5 	bl	8008ec0 <SX1276SetModem>
    switch( modem )
 8009576:	b114      	cbz	r4, 800957e <SX1276SetMaxPayloadLength+0x12>
 8009578:	2c01      	cmp	r4, #1
 800957a:	d00a      	beq.n	8009592 <SX1276SetMaxPayloadLength+0x26>
}
 800957c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <SX1276SetMaxPayloadLength+0x30>)
 8009580:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1f9      	bne.n	800957c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009588:	4629      	mov	r1, r5
 800958a:	2032      	movs	r0, #50	; 0x32
 800958c:	f009 fafb 	bl	8012b86 <SX1276Write>
 8009590:	e7f4      	b.n	800957c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8009592:	4629      	mov	r1, r5
 8009594:	2023      	movs	r0, #35	; 0x23
 8009596:	f009 faf6 	bl	8012b86 <SX1276Write>
}
 800959a:	e7ef      	b.n	800957c <SX1276SetMaxPayloadLength+0x10>
 800959c:	200016ac 	.word	0x200016ac

080095a0 <SX1276SetPublicNetwork>:
{
 80095a0:	b510      	push	{r4, lr}
 80095a2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80095a4:	2001      	movs	r0, #1
 80095a6:	f7ff fc8b 	bl	8008ec0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80095aa:	4b07      	ldr	r3, [pc, #28]	; (80095c8 <SX1276SetPublicNetwork+0x28>)
 80095ac:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80095b0:	b124      	cbz	r4, 80095bc <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80095b2:	2134      	movs	r1, #52	; 0x34
 80095b4:	2039      	movs	r0, #57	; 0x39
 80095b6:	f009 fae6 	bl	8012b86 <SX1276Write>
}
 80095ba:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80095bc:	2112      	movs	r1, #18
 80095be:	2039      	movs	r0, #57	; 0x39
 80095c0:	f009 fae1 	bl	8012b86 <SX1276Write>
}
 80095c4:	e7f9      	b.n	80095ba <SX1276SetPublicNetwork+0x1a>
 80095c6:	bf00      	nop
 80095c8:	200016ac 	.word	0x200016ac

080095cc <SX1276OnTimeoutIrq>:
{
 80095cc:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80095ce:	4b33      	ldr	r3, [pc, #204]	; (800969c <SX1276OnTimeoutIrq+0xd0>)
 80095d0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d002      	beq.n	80095de <SX1276OnTimeoutIrq+0x12>
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d033      	beq.n	8009644 <SX1276OnTimeoutIrq+0x78>
}
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80095de:	4b2f      	ldr	r3, [pc, #188]	; (800969c <SX1276OnTimeoutIrq+0xd0>)
 80095e0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80095e4:	b143      	cbz	r3, 80095f8 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095e6:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <SX1276OnTimeoutIrq+0xd4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f6      	beq.n	80095dc <SX1276OnTimeoutIrq+0x10>
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0f3      	beq.n	80095dc <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 80095f4:	4798      	blx	r3
 80095f6:	e7f1      	b.n	80095dc <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80095f8:	4c28      	ldr	r4, [pc, #160]	; (800969c <SX1276OnTimeoutIrq+0xd0>)
 80095fa:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80095fe:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009602:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009606:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800960a:	210b      	movs	r1, #11
 800960c:	203e      	movs	r0, #62	; 0x3e
 800960e:	f009 faba 	bl	8012b86 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009612:	2110      	movs	r1, #16
 8009614:	203f      	movs	r0, #63	; 0x3f
 8009616:	f009 fab6 	bl	8012b86 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800961a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800961e:	b14b      	cbz	r3, 8009634 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009620:	200d      	movs	r0, #13
 8009622:	f009 fabc 	bl	8012b9e <SX1276Read>
 8009626:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800962a:	b2c9      	uxtb	r1, r1
 800962c:	200d      	movs	r0, #13
 800962e:	f009 faaa 	bl	8012b86 <SX1276Write>
 8009632:	e7d8      	b.n	80095e6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <SX1276OnTimeoutIrq+0xd0>)
 8009636:	2200      	movs	r2, #0
 8009638:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800963c:	4819      	ldr	r0, [pc, #100]	; (80096a4 <SX1276OnTimeoutIrq+0xd8>)
 800963e:	f7fe fdd3 	bl	80081e8 <TimerStop>
 8009642:	e7d0      	b.n	80095e6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8009644:	f7fe f9cc 	bl	80079e0 <SX1276Reset>
        RxChainCalibration( );
 8009648:	f7ff f960 	bl	800890c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800964c:	2000      	movs	r0, #0
 800964e:	f009 fab2 	bl	8012bb6 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009652:	2400      	movs	r4, #0
 8009654:	e00c      	b.n	8009670 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8009656:	4a14      	ldr	r2, [pc, #80]	; (80096a8 <SX1276OnTimeoutIrq+0xdc>)
 8009658:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800965c:	18d5      	adds	r5, r2, r3
 800965e:	5cd0      	ldrb	r0, [r2, r3]
 8009660:	f7ff fc2e 	bl	8008ec0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8009664:	78a9      	ldrb	r1, [r5, #2]
 8009666:	7868      	ldrb	r0, [r5, #1]
 8009668:	f009 fa8d 	bl	8012b86 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800966c:	3401      	adds	r4, #1
 800966e:	b2e4      	uxtb	r4, r4
 8009670:	2c0f      	cmp	r4, #15
 8009672:	d9f0      	bls.n	8009656 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8009674:	2000      	movs	r0, #0
 8009676:	f7ff fc23 	bl	8008ec0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800967a:	4c08      	ldr	r4, [pc, #32]	; (800969c <SX1276OnTimeoutIrq+0xd0>)
 800967c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8009680:	f7ff ff8e 	bl	80095a0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8009684:	2300      	movs	r3, #0
 8009686:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <SX1276OnTimeoutIrq+0xd4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0a4      	beq.n	80095dc <SX1276OnTimeoutIrq+0x10>
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0a1      	beq.n	80095dc <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8009698:	4798      	blx	r3
}
 800969a:	e79f      	b.n	80095dc <SX1276OnTimeoutIrq+0x10>
 800969c:	200016ac 	.word	0x200016ac
 80096a0:	20001578 	.word	0x20001578
 80096a4:	2000157c 	.word	0x2000157c
 80096a8:	08016528 	.word	0x08016528

080096ac <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 80096b4:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80096b6:	6843      	ldr	r3, [r0, #4]
 80096b8:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80096ba:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 80096bc:	2a01      	cmp	r2, #1
 80096be:	d015      	beq.n	80096ec <uart_stm32_configure+0x40>
 80096c0:	2a02      	cmp	r2, #2
 80096c2:	d116      	bne.n	80096f2 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 80096c4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80096c8:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d017      	beq.n	80096fe <uart_stm32_configure+0x52>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d018      	beq.n	8009704 <uart_stm32_configure+0x58>
 80096d2:	b18b      	cbz	r3, 80096f8 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 80096d4:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80096d8:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 80096da:	2902      	cmp	r1, #2
 80096dc:	d015      	beq.n	800970a <uart_stm32_configure+0x5e>
 80096de:	2904      	cmp	r1, #4
 80096e0:	d019      	beq.n	8009716 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	f040 8097 	bne.w	8009816 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 80096e8:	2700      	movs	r7, #0
 80096ea:	e016      	b.n	800971a <uart_stm32_configure+0x6e>
	switch (parity) {
 80096ec:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 80096f0:	e7ea      	b.n	80096c8 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 80096f2:	f04f 0e00 	mov.w	lr, #0
 80096f6:	e7e7      	b.n	80096c8 <uart_stm32_configure+0x1c>
	switch (sb) {
 80096f8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 80096fc:	e7ec      	b.n	80096d8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 80096fe:	f04f 0c00 	mov.w	ip, #0
 8009702:	e7e9      	b.n	80096d8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8009704:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8009708:	e7e6      	b.n	80096d8 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800970a:	b10a      	cbz	r2, 8009710 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 800970c:	2700      	movs	r7, #0
 800970e:	e004      	b.n	800971a <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8009710:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8009714:	e001      	b.n	800971a <uart_stm32_configure+0x6e>
	switch (db) {
 8009716:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800971a:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800971e:	f1ba 0f01 	cmp.w	sl, #1
 8009722:	d07b      	beq.n	800981c <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8009724:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8009728:	f1a2 0903 	sub.w	r9, r2, #3
 800972c:	fa5f f989 	uxtb.w	r9, r9
 8009730:	f1b9 0f01 	cmp.w	r9, #1
 8009734:	f240 809e 	bls.w	8009874 <uart_stm32_configure+0x1c8>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8009738:	b112      	cbz	r2, 8009740 <uart_stm32_configure+0x94>
 800973a:	2904      	cmp	r1, #4
 800973c:	f000 809d 	beq.w	800987a <uart_stm32_configure+0x1ce>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 809d 	beq.w	8009880 <uart_stm32_configure+0x1d4>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8009746:	2b02      	cmp	r3, #2
 8009748:	f000 809d 	beq.w	8009886 <uart_stm32_configure+0x1da>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800974c:	2901      	cmp	r1, #1
 800974e:	f240 809d 	bls.w	800988c <uart_stm32_configure+0x1e0>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8009752:	2904      	cmp	r1, #4
 8009754:	f000 809d 	beq.w	8009892 <uart_stm32_configure+0x1e6>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	d017      	beq.n	800978e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800975e:	4b51      	ldr	r3, [pc, #324]	; (80098a4 <uart_stm32_configure+0x1f8>)
 8009760:	429d      	cmp	r5, r3
 8009762:	d010      	beq.n	8009786 <uart_stm32_configure+0xda>
 8009764:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8009768:	429d      	cmp	r5, r3
 800976a:	d00c      	beq.n	8009786 <uart_stm32_configure+0xda>
 800976c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009770:	429d      	cmp	r5, r3
 8009772:	d008      	beq.n	8009786 <uart_stm32_configure+0xda>
 8009774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009778:	429d      	cmp	r5, r3
 800977a:	d004      	beq.n	8009786 <uart_stm32_configure+0xda>
 800977c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009780:	429d      	cmp	r5, r3
 8009782:	f040 8089 	bne.w	8009898 <uart_stm32_configure+0x1ec>
 8009786:	f1ba 0f01 	cmp.w	sl, #1
 800978a:	f040 8088 	bne.w	800989e <uart_stm32_configure+0x1f2>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800978e:	682b      	ldr	r3, [r5, #0]
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009796:	6843      	ldr	r3, [r0, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 80097a0:	459e      	cmp	lr, r3
 80097a2:	d005      	beq.n	80097b0 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80097a4:	6813      	ldr	r3, [r2, #0]
 80097a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097aa:	ea4e 0303 	orr.w	r3, lr, r3
 80097ae:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097b0:	6843      	ldr	r3, [r0, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80097b4:	6853      	ldr	r3, [r2, #4]
 80097b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80097ba:	459c      	cmp	ip, r3
 80097bc:	d005      	beq.n	80097ca <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80097be:	6853      	ldr	r3, [r2, #4]
 80097c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80097c4:	ea4c 0303 	orr.w	r3, ip, r3
 80097c8:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097ca:	6843      	ldr	r3, [r0, #4]
 80097cc:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80097ce:	6813      	ldr	r3, [r2, #0]
 80097d0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80097d4:	429f      	cmp	r7, r3
 80097d6:	d004      	beq.n	80097e2 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80097d8:	6813      	ldr	r3, [r2, #0]
 80097da:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80097de:	431f      	orrs	r7, r3
 80097e0:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097e2:	6843      	ldr	r3, [r0, #4]
 80097e4:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80097e6:	6893      	ldr	r3, [r2, #8]
 80097e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80097ec:	4598      	cmp	r8, r3
 80097ee:	d005      	beq.n	80097fc <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80097f0:	6893      	ldr	r3, [r2, #8]
 80097f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f6:	ea48 0303 	orr.w	r3, r8, r3
 80097fa:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 80097fc:	f8d4 8000 	ldr.w	r8, [r4]
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	4598      	cmp	r8, r3
 8009804:	d10d      	bne.n	8009822 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	f043 0301 	orr.w	r3, r3, #1
 800980c:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800980e:	2000      	movs	r0, #0
};
 8009810:	b002      	add	sp, #8
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8009816:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800981a:	e77e      	b.n	800971a <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 800981c:	f44f 7840 	mov.w	r8, #768	; 0x300
 8009820:	e782      	b.n	8009728 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 8009822:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009824:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009828:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 800982c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009830:	4650      	mov	r0, sl
 8009832:	f00a f8f3 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009836:	b1b8      	cbz	r0, 8009868 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8009838:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	b1b3      	cbz	r3, 800986e <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8009840:	aa01      	add	r2, sp, #4
 8009842:	4649      	mov	r1, r9
 8009844:	4650      	mov	r0, sl
 8009846:	4798      	blx	r3
 8009848:	2800      	cmp	r0, #0
 800984a:	db0a      	blt.n	8009862 <uart_stm32_configure+0x1b6>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009852:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800985a:	fbb3 f3f8 	udiv	r3, r3, r8
 800985e:	b29b      	uxth	r3, r3
 8009860:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	6033      	str	r3, [r6, #0]
 8009866:	e7ce      	b.n	8009806 <uart_stm32_configure+0x15a>
		return -ENODEV;
 8009868:	f06f 0012 	mvn.w	r0, #18
 800986c:	e7ec      	b.n	8009848 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 800986e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009872:	e7e9      	b.n	8009848 <uart_stm32_configure+0x19c>
		return -ENOTSUP;
 8009874:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009878:	e7ca      	b.n	8009810 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800987a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800987e:	e7c7      	b.n	8009810 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009880:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009884:	e7c4      	b.n	8009810 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8009886:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800988a:	e7c1      	b.n	8009810 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 800988c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009890:	e7be      	b.n	8009810 <uart_stm32_configure+0x164>
 8009892:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8009896:	e7bb      	b.n	8009810 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 8009898:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800989c:	e7b8      	b.n	8009810 <uart_stm32_configure+0x164>
 800989e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098a2:	e7b5      	b.n	8009810 <uart_stm32_configure+0x164>
 80098a4:	40013800 	.word	0x40013800

080098a8 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 80098b0:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 80098b2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80098b6:	463e      	mov	r6, r7
 80098b8:	f856 4b08 	ldr.w	r4, [r6], #8
	data->clock = clk;
 80098bc:	4849      	ldr	r0, [pc, #292]	; (80099e4 <uart_stm32_init+0x13c>)
 80098be:	f8c8 0004 	str.w	r0, [r8, #4]
 80098c2:	f00a f8ab 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d074      	beq.n	80099b4 <uart_stm32_init+0x10c>
	const struct clock_control_driver_api *api =
 80098ca:	4846      	ldr	r0, [pc, #280]	; (80099e4 <uart_stm32_init+0x13c>)
 80098cc:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4631      	mov	r1, r6
 80098d2:	4798      	blx	r3
 80098d4:	4606      	mov	r6, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d17f      	bne.n	80099da <uart_stm32_init+0x132>
	ret = pinctrl_lookup_state(config, id, &state);
 80098da:	aa01      	add	r2, sp, #4
 80098dc:	2100      	movs	r1, #0
 80098de:	69f8      	ldr	r0, [r7, #28]
 80098e0:	f009 face 	bl	8012e80 <pinctrl_lookup_state>
	if (ret < 0) {
 80098e4:	1e03      	subs	r3, r0, #0
 80098e6:	db06      	blt.n	80098f6 <uart_stm32_init+0x4e>
	return pinctrl_apply_state_direct(config, state);
 80098e8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80098ea:	2200      	movs	r2, #0
 80098ec:	7919      	ldrb	r1, [r3, #4]
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	f009 fae0 	bl	8012eb4 <pinctrl_configure_pins>
 80098f4:	4603      	mov	r3, r0
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	db72      	blt.n	80099e0 <uart_stm32_init+0x138>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	f043 030c 	orr.w	r3, r3, #12
 8009908:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b02      	cmp	r3, #2
 800990e:	d059      	beq.n	80099c4 <uart_stm32_init+0x11c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8009910:	2b01      	cmp	r3, #1
 8009912:	d052      	beq.n	80099ba <uart_stm32_init+0x112>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8009914:	2200      	movs	r2, #0
		ll_parity = LL_USART_PARITY_NONE;
 8009916:	4611      	mov	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800991e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009922:	430a      	orrs	r2, r1
 8009924:	4313      	orrs	r3, r2
 8009926:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009928:	6863      	ldr	r3, [r4, #4]
 800992a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800992e:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8009930:	7c3b      	ldrb	r3, [r7, #16]
 8009932:	b12b      	cbz	r3, 8009940 <uart_stm32_init+0x98>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009934:	686b      	ldr	r3, [r5, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009938:	6893      	ldr	r3, [r2, #8]
 800993a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800993e:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8009940:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = dev->data;
 8009944:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009946:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800994a:	f859 5b08 	ldr.w	r5, [r9], #8
	if (clock_control_get_rate(data->clock,
 800994e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009952:	4650      	mov	r0, sl
 8009954:	f00a f862 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009958:	2800      	cmp	r0, #0
 800995a:	d038      	beq.n	80099ce <uart_stm32_init+0x126>
	const struct clock_control_driver_api *api =
 800995c:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d036      	beq.n	80099d4 <uart_stm32_init+0x12c>
	return api->get_rate(dev, sys, rate);
 8009966:	aa01      	add	r2, sp, #4
 8009968:	4649      	mov	r1, r9
 800996a:	4650      	mov	r0, sl
 800996c:	4798      	blx	r3
 800996e:	2800      	cmp	r0, #0
 8009970:	db0a      	blt.n	8009988 <uart_stm32_init+0xe0>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009978:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800997a:	9b01      	ldr	r3, [sp, #4]
 800997c:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8009980:	fbb3 f3f8 	udiv	r3, r3, r8
 8009984:	b29b      	uxth	r3, r3
 8009986:	60eb      	str	r3, [r5, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 8009988:	7e3b      	ldrb	r3, [r7, #24]
 800998a:	b11b      	cbz	r3, 8009994 <uart_stm32_init+0xec>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 800998c:	68a3      	ldr	r3, [r4, #8]
 800998e:	f043 0308 	orr.w	r3, r3, #8
 8009992:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800999c:	69e3      	ldr	r3, [r4, #28]
 800999e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80099a2:	d0fb      	beq.n	800999c <uart_stm32_init+0xf4>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80099a4:	69e3      	ldr	r3, [r4, #28]
 80099a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80099aa:	d0fb      	beq.n	80099a4 <uart_stm32_init+0xfc>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80099ac:	4630      	mov	r0, r6
 80099ae:	b002      	add	sp, #8
 80099b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENODEV;
 80099b4:	f06f 0612 	mvn.w	r6, #18
 80099b8:	e78d      	b.n	80098d6 <uart_stm32_init+0x2e>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80099ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80099be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80099c2:	e7a9      	b.n	8009918 <uart_stm32_init+0x70>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80099c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80099c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099cc:	e7a4      	b.n	8009918 <uart_stm32_init+0x70>
		return -ENODEV;
 80099ce:	f06f 0012 	mvn.w	r0, #18
 80099d2:	e7cc      	b.n	800996e <uart_stm32_init+0xc6>
		return -ENOSYS;
 80099d4:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80099d8:	e7c9      	b.n	800996e <uart_stm32_init+0xc6>
		return -EIO;
 80099da:	f06f 0604 	mvn.w	r6, #4
 80099de:	e7e5      	b.n	80099ac <uart_stm32_init+0x104>
		return err;
 80099e0:	461e      	mov	r6, r3
 80099e2:	e7e3      	b.n	80099ac <uart_stm32_init+0x104>
 80099e4:	08014bb4 	.word	0x08014bb4

080099e8 <random_byte_get>:
	return 0;
}
#endif /* !STM32_CONDRST_SUPPORT */

static int random_byte_get(void)
{
 80099e8:	b538      	push	{r3, r4, r5, lr}
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 80099ea:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <random_byte_get+0x60>)
 80099ec:	681c      	ldr	r4, [r3, #0]
	__asm__ volatile(
 80099ee:	f04f 0310 	mov.w	r3, #16
 80099f2:	f3ef 8511 	mrs	r5, BASEPRI
 80099f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80099fa:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a04:	d004      	beq.n	8009a10 <random_byte_get+0x28>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
 8009a06:	4620      	mov	r0, r4
 8009a08:	f009 fa0c 	bl	8012e24 <recover_seed_error>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	db0b      	blt.n	8009a28 <random_byte_get+0x40>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	f013 0f01 	tst.w	r3, #1
 8009a16:	d00a      	beq.n	8009a2e <random_byte_get+0x46>
		retval = -EIO;
		goto out;
	}

	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
		if (entropy_stm32_got_error(rng)) {
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f009 f9f5 	bl	8012e08 <entropy_stm32_got_error>
 8009a1e:	b968      	cbnz	r0, 8009a3c <random_byte_get+0x54>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 8009a20:	68a0      	ldr	r0, [r4, #8]
			retval = -EIO;
			goto out;
		}

		retval = LL_RNG_ReadRandData32(rng);
		if (retval == 0) {
 8009a22:	b170      	cbz	r0, 8009a42 <random_byte_get+0x5a>
			 */
			retval = -EAGAIN;
			goto out;
		}

		retval &= 0xFF;
 8009a24:	b2c0      	uxtb	r0, r0
 8009a26:	e004      	b.n	8009a32 <random_byte_get+0x4a>
		retval = -EIO;
 8009a28:	f06f 0004 	mvn.w	r0, #4
 8009a2c:	e001      	b.n	8009a32 <random_byte_get+0x4a>
	int retval = -EAGAIN;
 8009a2e:	f06f 000a 	mvn.w	r0, #10
	__asm__ volatile(
 8009a32:	f385 8811 	msr	BASEPRI, r5
 8009a36:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
			retval = -EIO;
 8009a3c:	f06f 0004 	mvn.w	r0, #4
 8009a40:	e7f7      	b.n	8009a32 <random_byte_get+0x4a>
			retval = -EAGAIN;
 8009a42:	f06f 000a 	mvn.w	r0, #10
 8009a46:	e7f4      	b.n	8009a32 <random_byte_get+0x4a>
 8009a48:	200002a0 	.word	0x200002a0

08009a4c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 8009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4e:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
 8009a50:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 8009a52:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
 8009a54:	f04f 0310 	mov.w	r3, #16
 8009a58:	f3ef 8c11 	mrs	ip, BASEPRI
 8009a5c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009a60:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 8009a64:	7806      	ldrb	r6, [r0, #0]
 8009a66:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 8009a68:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 8009a6a:	1bad      	subs	r5, r5, r6
 8009a6c:	4025      	ands	r5, r4
	if (available < len) {
 8009a6e:	42aa      	cmp	r2, r5
 8009a70:	d900      	bls.n	8009a74 <rng_pool_get+0x28>
		len = available;
 8009a72:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 8009a74:	18b0      	adds	r0, r6, r2
 8009a76:	4020      	ands	r0, r4
 8009a78:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
 8009a7c:	f38c 8811 	msr	BASEPRI, ip
 8009a80:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
 8009a84:	4608      	mov	r0, r1
}
 8009a86:	e007      	b.n	8009a98 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
 8009a88:	eb0e 0203 	add.w	r2, lr, r3
 8009a8c:	7952      	ldrb	r2, [r2, #5]
 8009a8e:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
 8009a92:	3301      	adds	r3, #1
 8009a94:	4023      	ands	r3, r4
	while (likely(len--)) {
 8009a96:	4662      	mov	r2, ip
 8009a98:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8009a9c:	fa1f fc8c 	uxth.w	ip, ip
 8009aa0:	2a00      	cmp	r2, #0
 8009aa2:	d1f1      	bne.n	8009a88 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
 8009aa4:	42be      	cmp	r6, r7
 8009aa6:	d10f      	bne.n	8009ac8 <rng_pool_get+0x7c>
	__asm__ volatile(
 8009aa8:	f04f 0210 	mov.w	r2, #16
 8009aac:	f3ef 8311 	mrs	r3, BASEPRI
 8009ab0:	f382 8812 	msr	BASEPRI_MAX, r2
 8009ab4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
 8009ab8:	f89e 2000 	ldrb.w	r2, [lr]
 8009abc:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
 8009ac8:	1a40      	subs	r0, r0, r1
 8009aca:	b280      	uxth	r0, r0
	available = available - len;
 8009acc:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
 8009ace:	f89e 3004 	ldrb.w	r3, [lr, #4]
 8009ad2:	42ab      	cmp	r3, r5
 8009ad4:	d305      	bcc.n	8009ae2 <rng_pool_get+0x96>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 8009ad6:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <rng_pool_get+0x98>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	f043 0308 	orr.w	r3, r3, #8
 8009ae0:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 8009ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae4:	200002a0 	.word	0x200002a0

08009ae8 <entropy_stm32_rng_get_entropy_isr>:

static int entropy_stm32_rng_get_entropy_isr(const struct device *dev,
						uint8_t *buf,
						uint16_t len,
					uint32_t flags)
{
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	460d      	mov	r5, r1
 8009aec:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8009aee:	f013 0f01 	tst.w	r3, #1
 8009af2:	d103      	bne.n	8009afc <entropy_stm32_rng_get_entropy_isr+0x14>
		return rng_pool_get(
 8009af4:	481f      	ldr	r0, [pc, #124]	; (8009b74 <entropy_stm32_rng_get_entropy_isr+0x8c>)
 8009af6:	f7ff ffa9 	bl	8009a4c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
 8009afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
 8009afc:	b90a      	cbnz	r2, 8009b02 <entropy_stm32_rng_get_entropy_isr+0x1a>
	return cnt;
 8009afe:	4620      	mov	r0, r4
 8009b00:	e7fb      	b.n	8009afa <entropy_stm32_rng_get_entropy_isr+0x12>
	__asm__ volatile(
 8009b02:	f04f 0310 	mov.w	r3, #16
 8009b06:	f3ef 8611 	mrs	r6, BASEPRI
 8009b0a:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b0e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 8009b12:	2050      	movs	r0, #80	; 0x50
 8009b14:	f7fa f852 	bl	8003bbc <arch_irq_is_enabled>
 8009b18:	4607      	mov	r7, r0
		irq_disable(IRQN);
 8009b1a:	2050      	movs	r0, #80	; 0x50
 8009b1c:	f7fa f83a 	bl	8003b94 <arch_irq_disable>
	__asm__ volatile(
 8009b20:	f386 8811 	msr	BASEPRI, r6
 8009b24:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b28:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <entropy_stm32_rng_get_entropy_isr+0x90>)
 8009b2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b2e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8009b32:	4626      	mov	r6, r4
 8009b34:	e004      	b.n	8009b40 <entropy_stm32_rng_get_entropy_isr+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 8009b36:	f3bf 8f4f 	dsb	sy
				__WFE();
 8009b3a:	bf20      	wfe
				__SEV();
 8009b3c:	bf40      	sev
				__WFE();
 8009b3e:	bf20      	wfe
			while (LL_RNG_IsActiveFlag_DRDY(
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <entropy_stm32_rng_get_entropy_isr+0x94>)
 8009b42:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f013 0f01 	tst.w	r3, #1
 8009b4a:	d0f4      	beq.n	8009b36 <entropy_stm32_rng_get_entropy_isr+0x4e>
			byte = random_byte_get();
 8009b4c:	f7ff ff4c 	bl	80099e8 <random_byte_get>
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <entropy_stm32_rng_get_entropy_isr+0x90>)
 8009b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b56:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
			if (byte < 0) {
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	db02      	blt.n	8009b64 <entropy_stm32_rng_get_entropy_isr+0x7c>
			buf[--len] = byte;
 8009b5e:	3e01      	subs	r6, #1
 8009b60:	b2b6      	uxth	r6, r6
 8009b62:	55a8      	strb	r0, [r5, r6]
		} while (len);
 8009b64:	2e00      	cmp	r6, #0
 8009b66:	d1eb      	bne.n	8009b40 <entropy_stm32_rng_get_entropy_isr+0x58>
		if (irq_enabled) {
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	d0c8      	beq.n	8009afe <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 8009b6c:	2050      	movs	r0, #80	; 0x50
 8009b6e:	f7fa f803 	bl	8003b78 <arch_irq_enable>
 8009b72:	e7c4      	b.n	8009afe <entropy_stm32_rng_get_entropy_isr+0x16>
 8009b74:	200002d8 	.word	0x200002d8
 8009b78:	e000e100 	.word	0xe000e100
 8009b7c:	200002a0 	.word	0x200002a0

08009b80 <stm32_rng_isr>:
{
 8009b80:	b510      	push	{r4, lr}
	byte = random_byte_get();
 8009b82:	f7ff ff31 	bl	80099e8 <random_byte_get>
	if (byte < 0) {
 8009b86:	2800      	cmp	r0, #0
 8009b88:	db06      	blt.n	8009b98 <stm32_rng_isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 8009b8a:	b2c4      	uxtb	r4, r0
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	480b      	ldr	r0, [pc, #44]	; (8009bbc <stm32_rng_isr+0x3c>)
 8009b90:	f009 f95a 	bl	8012e48 <rng_pool_put>
	if (ret < 0) {
 8009b94:	2800      	cmp	r0, #0
 8009b96:	db00      	blt.n	8009b9a <stm32_rng_isr+0x1a>
}
 8009b98:	bd10      	pop	{r4, pc}
		ret = rng_pool_put(
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4808      	ldr	r0, [pc, #32]	; (8009bc0 <stm32_rng_isr+0x40>)
 8009b9e:	f009 f953 	bl	8012e48 <rng_pool_put>
		if (ret < 0) {
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	db03      	blt.n	8009bae <stm32_rng_isr+0x2e>
	z_impl_k_sem_give(sem);
 8009ba6:	4807      	ldr	r0, [pc, #28]	; (8009bc4 <stm32_rng_isr+0x44>)
 8009ba8:	f004 fac4 	bl	800e134 <z_impl_k_sem_give>
}
 8009bac:	e7f4      	b.n	8009b98 <stm32_rng_isr+0x18>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 8009bae:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <stm32_rng_isr+0x48>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 8009bb2:	6813      	ldr	r3, [r2, #0]
 8009bb4:	f023 0308 	bic.w	r3, r3, #8
 8009bb8:	6013      	str	r3, [r2, #0]
}
 8009bba:	e7f4      	b.n	8009ba6 <stm32_rng_isr+0x26>
 8009bbc:	200002d8 	.word	0x200002d8
 8009bc0:	200002ed 	.word	0x200002ed
 8009bc4:	200002c0 	.word	0x200002c0
 8009bc8:	200002a0 	.word	0x200002a0

08009bcc <entropy_stm32_rng_get_entropy>:
{
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	460f      	mov	r7, r1
 8009bd0:	4614      	mov	r4, r2
	while (len) {
 8009bd2:	e007      	b.n	8009be4 <entropy_stm32_rng_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bdc:	f106 0018 	add.w	r0, r6, #24
 8009be0:	f004 fad0 	bl	800e184 <z_impl_k_sem_take>
 8009be4:	b1cc      	cbz	r4, 8009c1a <entropy_stm32_rng_get_entropy+0x4e>
 8009be6:	4d0e      	ldr	r5, [pc, #56]	; (8009c20 <entropy_stm32_rng_get_entropy+0x54>)
 8009be8:	f105 0608 	add.w	r6, r5, #8
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f004 fac5 	bl	800e184 <z_impl_k_sem_take>
		bytes = rng_pool_get(
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8009c02:	f7ff ff23 	bl	8009a4c <rng_pool_get>
 8009c06:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f004 fa93 	bl	800e134 <z_impl_k_sem_give>
		if (bytes == 0U) {
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	d0e0      	beq.n	8009bd4 <entropy_stm32_rng_get_entropy+0x8>
		len -= bytes;
 8009c12:	1b64      	subs	r4, r4, r5
 8009c14:	b2a4      	uxth	r4, r4
		buf += bytes;
 8009c16:	442f      	add	r7, r5
 8009c18:	e7e4      	b.n	8009be4 <entropy_stm32_rng_get_entropy+0x18>
}
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200002a0 	.word	0x200002a0

08009c24 <entropy_stm32_rng_init>:

static int entropy_stm32_rng_init(const struct device *dev)
{
 8009c24:	b538      	push	{r3, r4, r5, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 8009c26:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 8009c28:	6845      	ldr	r5, [r0, #4]
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8009c2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <entropy_stm32_rng_init+0xbc>)
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009c3e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8009c42:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8009c46:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009c4e:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009c56:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8009c58:	4b21      	ldr	r3, [pc, #132]	; (8009ce0 <entropy_stm32_rng_init+0xbc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8009c60:	d0fa      	beq.n	8009c58 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 8009c62:	4a1f      	ldr	r2, [pc, #124]	; (8009ce0 <entropy_stm32_rng_init+0xbc>)
 8009c64:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8009c68:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8009c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 8009c74:	481b      	ldr	r0, [pc, #108]	; (8009ce4 <entropy_stm32_rng_init+0xc0>)
 8009c76:	6060      	str	r0, [r4, #4]
 8009c78:	f009 fed0 	bl	8013a1c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009c7c:	b120      	cbz	r0, 8009c88 <entropy_stm32_rng_init+0x64>
	const struct clock_control_driver_api *api =
 8009c7e:	4819      	ldr	r0, [pc, #100]	; (8009ce4 <entropy_stm32_rng_init+0xc0>)
 8009c80:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4629      	mov	r1, r5
 8009c86:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 8009c88:	6822      	ldr	r2, [r4, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	f043 0308 	orr.w	r3, r3, #8
 8009c90:	6013      	str	r3, [r2, #0]

	LL_RNG_Enable(dev_data->rng);
 8009c92:	4620      	mov	r0, r4
 8009c94:	f850 2b08 	ldr.w	r2, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8009c98:	6813      	ldr	r3, [r2, #0]
 8009c9a:	f043 0304 	orr.w	r3, r3, #4
 8009c9e:	6013      	str	r3, [r2, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	f009 ff8a 	bl	8013bbc <z_impl_k_sem_init>

	/* Locking semaphore initialized to 1 (unlocked) */
	k_sem_init(&dev_data->sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&dev_data->sem_sync, 0, 1);
 8009ca8:	f104 0020 	add.w	r0, r4, #32
 8009cac:	2201      	movs	r2, #1
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f009 ff84 	bl	8013bbc <z_impl_k_sem_init>

	rng_pool_init((struct rng_pool *)(dev_data->thr),
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	2108      	movs	r1, #8
 8009cb8:	f104 004d 	add.w	r0, r4, #77	; 0x4d
 8009cbc:	f009 f8d8 	bl	8012e70 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_THR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
 8009cc0:	220c      	movs	r2, #12
 8009cc2:	2110      	movs	r1, #16
 8009cc4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8009cc8:	f009 f8d2 	bl	8012e70 <rng_pool_init>
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4611      	mov	r1, r2
 8009cd0:	2050      	movs	r0, #80	; 0x50
 8009cd2:	f7f9 ff81 	bl	8003bd8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 8009cd6:	2050      	movs	r0, #80	; 0x50
 8009cd8:	f7f9 ff4e 	bl	8003b78 <arch_irq_enable>

	return 0;
}
 8009cdc:	2000      	movs	r0, #0
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	08014bb4 	.word	0x08014bb4

08009ce8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8009ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cec:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8009cee:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8009cf0:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8009cf2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009cf6:	d101      	bne.n	8009cfc <elapsed+0x14>
	    || (val1 < val2)) {
 8009cf8:	4281      	cmp	r1, r0
 8009cfa:	d208      	bcs.n	8009d0e <elapsed+0x26>
		overflow_cyc += last_load;
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <elapsed+0x34>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <elapsed+0x38>)
 8009d02:	6809      	ldr	r1, [r1, #0]
 8009d04:	440a      	add	r2, r1
 8009d06:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8009d08:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d0c:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8009d0e:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <elapsed+0x38>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	1a1b      	subs	r3, r3, r0
 8009d14:	4a01      	ldr	r2, [pc, #4]	; (8009d1c <elapsed+0x34>)
 8009d16:	6810      	ldr	r0, [r2, #0]
}
 8009d18:	4418      	add	r0, r3
 8009d1a:	4770      	bx	lr
 8009d1c:	20001814 	.word	0x20001814
 8009d20:	20001810 	.word	0x20001810

08009d24 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <sys_clock_driver_init+0x28>)
 8009d26:	2210      	movs	r2, #16
 8009d28:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8009d2c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <sys_clock_driver_init+0x2c>)
 8009d32:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8009d34:	2000      	movs	r0, #0
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <sys_clock_driver_init+0x30>)
 8009d38:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8009d3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d3e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009d40:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	f042 0207 	orr.w	r2, r2, #7
 8009d48:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8009d4a:	4770      	bx	lr
 8009d4c:	e000ed00 	.word	0xe000ed00
 8009d50:	20001810 	.word	0x20001810
 8009d54:	20001814 	.word	0x20001814

08009d58 <sys_clock_isr>:
{
 8009d58:	b508      	push	{r3, lr}
	elapsed();
 8009d5a:	f7ff ffc5 	bl	8009ce8 <elapsed>
	cycle_count += overflow_cyc;
 8009d5e:	4b0c      	ldr	r3, [pc, #48]	; (8009d90 <sys_clock_isr+0x38>)
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	4a0c      	ldr	r2, [pc, #48]	; (8009d94 <sys_clock_isr+0x3c>)
 8009d64:	6811      	ldr	r1, [r2, #0]
 8009d66:	4408      	add	r0, r1
 8009d68:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8009d6e:	4a0a      	ldr	r2, [pc, #40]	; (8009d98 <sys_clock_isr+0x40>)
 8009d70:	6813      	ldr	r3, [r2, #0]
 8009d72:	1ac0      	subs	r0, r0, r3
 8009d74:	4909      	ldr	r1, [pc, #36]	; (8009d9c <sys_clock_isr+0x44>)
 8009d76:	fba1 1000 	umull	r1, r0, r1, r0
 8009d7a:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8009d7c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009d80:	fb01 3300 	mla	r3, r1, r0, r3
 8009d84:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8009d86:	f005 f8b3 	bl	800eef0 <sys_clock_announce>
	z_arm_int_exit();
 8009d8a:	f7fa f827 	bl	8003ddc <z_arm_exc_exit>
}
 8009d8e:	bd08      	pop	{r3, pc}
 8009d90:	20001814 	.word	0x20001814
 8009d94:	2000180c 	.word	0x2000180c
 8009d98:	20001808 	.word	0x20001808
 8009d9c:	10624dd3 	.word	0x10624dd3

08009da0 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8009da0:	b111      	cbz	r1, 8009da8 <sys_clock_set_timeout+0x8>
 8009da2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009da6:	d03a      	beq.n	8009e1e <sys_clock_set_timeout+0x7e>
{
 8009da8:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 8009daa:	4b38      	ldr	r3, [pc, #224]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009dac:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009dae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009db2:	d03f      	beq.n	8009e34 <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009db4:	2801      	cmp	r0, #1
 8009db6:	dd40      	ble.n	8009e3a <sys_clock_set_timeout+0x9a>
 8009db8:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8009dbc:	dc3f      	bgt.n	8009e3e <sys_clock_set_timeout+0x9e>
 8009dbe:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 8009dc0:	f04f 0310 	mov.w	r3, #16
 8009dc4:	f3ef 8611 	mrs	r6, BASEPRI
 8009dc8:	f383 8812 	msr	BASEPRI_MAX, r3
 8009dcc:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8009dd0:	f7ff ff8a 	bl	8009ce8 <elapsed>
	val1 = SysTick->VAL;
 8009dd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009dd8:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 8009dda:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <sys_clock_set_timeout+0xf0>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4410      	add	r0, r2
 8009de0:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8009de2:	4b2c      	ldr	r3, [pc, #176]	; (8009e94 <sys_clock_set_timeout+0xf4>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8009de8:	4b2b      	ldr	r3, [pc, #172]	; (8009e98 <sys_clock_set_timeout+0xf8>)
 8009dea:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8009dec:	1a83      	subs	r3, r0, r2
 8009dee:	d429      	bmi.n	8009e44 <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 8009df0:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 8009df4:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8009df8:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8009dfc:	331f      	adds	r3, #31
 8009dfe:	4c27      	ldr	r4, [pc, #156]	; (8009e9c <sys_clock_set_timeout+0xfc>)
 8009e00:	fba4 4303 	umull	r4, r3, r4, r3
 8009e04:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8009e06:	1a12      	subs	r2, r2, r0
 8009e08:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8009e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e10:	d91d      	bls.n	8009e4e <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 8009e12:	4a23      	ldr	r2, [pc, #140]	; (8009ea0 <sys_clock_set_timeout+0x100>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d91c      	bls.n	8009e52 <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 8009e18:	4b1c      	ldr	r3, [pc, #112]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	e01b      	b.n	8009e56 <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8009e1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009e22:	6913      	ldr	r3, [r2, #16]
 8009e24:	f023 0301 	bic.w	r3, r3, #1
 8009e28:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8009e2a:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009e2c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009e30:	601a      	str	r2, [r3, #0]
		return;
 8009e32:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009e34:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8009e38:	e7be      	b.n	8009db8 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009e3a:	2400      	movs	r4, #0
 8009e3c:	e7c0      	b.n	8009dc0 <sys_clock_set_timeout+0x20>
 8009e3e:	f44f 6403 	mov.w	r4, #2096	; 0x830
 8009e42:	e7bd      	b.n	8009dc0 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	e003      	b.n	8009e56 <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 8009e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8009e52:	4a0e      	ldr	r2, [pc, #56]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009e54:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 8009e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e5a:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 8009e5c:	4a0b      	ldr	r2, [pc, #44]	; (8009e8c <sys_clock_set_timeout+0xec>)
 8009e5e:	6812      	ldr	r2, [r2, #0]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009e64:	2200      	movs	r2, #0
 8009e66:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 8009e68:	42a1      	cmp	r1, r4
 8009e6a:	d209      	bcs.n	8009e80 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 8009e6c:	1b2d      	subs	r5, r5, r4
 8009e6e:	440d      	add	r5, r1
 8009e70:	4428      	add	r0, r5
 8009e72:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <sys_clock_set_timeout+0xf0>)
 8009e74:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8009e76:	f386 8811 	msr	BASEPRI, r6
 8009e7a:	f3bf 8f6f 	isb	sy
}
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8009e80:	1b0d      	subs	r5, r1, r4
 8009e82:	4428      	add	r0, r5
 8009e84:	4b02      	ldr	r3, [pc, #8]	; (8009e90 <sys_clock_set_timeout+0xf0>)
 8009e86:	6018      	str	r0, [r3, #0]
 8009e88:	e7f5      	b.n	8009e76 <sys_clock_set_timeout+0xd6>
 8009e8a:	bf00      	nop
 8009e8c:	20001810 	.word	0x20001810
 8009e90:	2000180c 	.word	0x2000180c
 8009e94:	20001814 	.word	0x20001814
 8009e98:	20001808 	.word	0x20001808
 8009e9c:	10624dd3 	.word	0x10624dd3
 8009ea0:	00ffdc00 	.word	0x00ffdc00

08009ea4 <sys_clock_elapsed>:
{
 8009ea4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009ea6:	f04f 0310 	mov.w	r3, #16
 8009eaa:	f3ef 8411 	mrs	r4, BASEPRI
 8009eae:	f383 8812 	msr	BASEPRI_MAX, r3
 8009eb2:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8009eb6:	f7ff ff17 	bl	8009ce8 <elapsed>
 8009eba:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <sys_clock_elapsed+0x34>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4418      	add	r0, r3
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <sys_clock_elapsed+0x38>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8009ec6:	f384 8811 	msr	BASEPRI, r4
 8009eca:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8009ece:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <sys_clock_elapsed+0x3c>)
 8009ed0:	fba3 3000 	umull	r3, r0, r3, r0
}
 8009ed4:	0a40      	lsrs	r0, r0, #9
 8009ed6:	bd10      	pop	{r4, pc}
 8009ed8:	2000180c 	.word	0x2000180c
 8009edc:	20001808 	.word	0x20001808
 8009ee0:	10624dd3 	.word	0x10624dd3

08009ee4 <sys_clock_cycle_get_32>:
{
 8009ee4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009ee6:	f04f 0310 	mov.w	r3, #16
 8009eea:	f3ef 8411 	mrs	r4, BASEPRI
 8009eee:	f383 8812 	msr	BASEPRI_MAX, r3
 8009ef2:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8009ef6:	f7ff fef7 	bl	8009ce8 <elapsed>
 8009efa:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <sys_clock_cycle_get_32+0x28>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4418      	add	r0, r3
	__asm__ volatile(
 8009f00:	f384 8811 	msr	BASEPRI, r4
 8009f04:	f3bf 8f6f 	isb	sy
}
 8009f08:	bd10      	pop	{r4, pc}
 8009f0a:	bf00      	nop
 8009f0c:	2000180c 	.word	0x2000180c

08009f10 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8009f10:	28af      	cmp	r0, #175	; 0xaf
 8009f12:	d817      	bhi.n	8009f44 <stm32_pin_configure+0x34>
{
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	460d      	mov	r5, r1
 8009f1a:	4616      	mov	r6, r2
 8009f1c:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8009f1e:	4a0b      	ldr	r2, [pc, #44]	; (8009f4c <stm32_pin_configure+0x3c>)
 8009f20:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8009f24:	b15f      	cbz	r7, 8009f3e <stm32_pin_configure+0x2e>
 8009f26:	4638      	mov	r0, r7
 8009f28:	f009 fd78 	bl	8013a1c <z_device_is_ready>
 8009f2c:	b138      	cbz	r0, 8009f3e <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8009f2e:	4633      	mov	r3, r6
 8009f30:	462a      	mov	r2, r5
 8009f32:	f004 010f 	and.w	r1, r4, #15
 8009f36:	4638      	mov	r0, r7
 8009f38:	f008 f91a 	bl	8012170 <gpio_stm32_configure>
}
 8009f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 8009f3e:	f06f 0012 	mvn.w	r0, #18
 8009f42:	e7fb      	b.n	8009f3c <stm32_pin_configure+0x2c>
		return -EINVAL;
 8009f44:	f06f 0015 	mvn.w	r0, #21
}
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	080165c4 	.word	0x080165c4

08009f50 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8009f50:	b530      	push	{r4, r5, lr}
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8009f52:	6893      	ldr	r3, [r2, #8]
                        DMA_InitStruct->Mode                   | \
 8009f54:	68d4      	ldr	r4, [r2, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8009f56:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8009f58:	6914      	ldr	r4, [r2, #16]
                        DMA_InitStruct->Mode                   | \
 8009f5a:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8009f5c:	6954      	ldr	r4, [r2, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8009f5e:	4323      	orrs	r3, r4
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8009f60:	6994      	ldr	r4, [r2, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8009f62:	4323      	orrs	r3, r4
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8009f64:	69d4      	ldr	r4, [r2, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8009f66:	4323      	orrs	r3, r4
                        DMA_InitStruct->Priority);
 8009f68:	6a94      	ldr	r4, [r2, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8009f6a:	4323      	orrs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8009f6c:	4c17      	ldr	r4, [pc, #92]	; (8009fcc <LL_DMA_Init+0x7c>)
 8009f6e:	5c65      	ldrb	r5, [r4, r1]
 8009f70:	eb00 0e05 	add.w	lr, r0, r5
 8009f74:	5944      	ldr	r4, [r0, r5]
 8009f76:	f424 4cff 	bic.w	ip, r4, #32640	; 0x7f80
 8009f7a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8009f7e:	ea43 030c 	orr.w	r3, r3, ip
 8009f82:	5143      	str	r3, [r0, r5]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8009f84:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8009f86:	f8ce 300c 	str.w	r3, [lr, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8009f8a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8009f8c:	f8ce 3008 	str.w	r3, [lr, #8]

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8009f90:	6a14      	ldr	r4, [r2, #32]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8009f92:	f8de 3004 	ldr.w	r3, [lr, #4]
 8009f96:	0c1b      	lsrs	r3, r3, #16
 8009f98:	041b      	lsls	r3, r3, #16
 8009f9a:	4323      	orrs	r3, r4
 8009f9c:	f8ce 3004 	str.w	r3, [lr, #4]
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8009fa0:	6a54      	ldr	r4, [r2, #36]	; 0x24
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8009fa2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8009fa6:	008a      	lsls	r2, r1, #2
 8009fa8:	210f      	movs	r1, #15
 8009faa:	4091      	lsls	r1, r2
 8009fac:	ea23 0301 	bic.w	r3, r3, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fb0:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8009fb4:	b141      	cbz	r1, 8009fc8 <LL_DMA_Init+0x78>
  return __builtin_clz(value);
 8009fb6:	fab1 f181 	clz	r1, r1
 8009fba:	fa04 f101 	lsl.w	r1, r4, r1
 8009fbe:	4319      	orrs	r1, r3
 8009fc0:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	bd30      	pop	{r4, r5, pc}
    return 32U;
 8009fc8:	2120      	movs	r1, #32
 8009fca:	e7f6      	b.n	8009fba <LL_DMA_Init+0x6a>
 8009fcc:	08016600 	.word	0x08016600

08009fd0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009fd0:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009fd2:	6a03      	ldr	r3, [r0, #32]
 8009fd4:	f023 0301 	bic.w	r3, r3, #1
 8009fd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009fda:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009fdc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009fde:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009fe0:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8009fe4:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8009fe8:	680c      	ldr	r4, [r1, #0]
 8009fea:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009fee:	f023 0302 	bic.w	r3, r3, #2
 8009ff2:	690d      	ldr	r5, [r1, #16]
 8009ff4:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009ff6:	f023 0301 	bic.w	r3, r3, #1
 8009ffa:	684d      	ldr	r5, [r1, #4]
 8009ffc:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ffe:	4d13      	ldr	r5, [pc, #76]	; (800a04c <OC1Config+0x7c>)
 800a000:	42a8      	cmp	r0, r5
 800a002:	d007      	beq.n	800a014 <OC1Config+0x44>
 800a004:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800a008:	42a8      	cmp	r0, r5
 800a00a:	d003      	beq.n	800a014 <OC1Config+0x44>
 800a00c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a010:	42a8      	cmp	r0, r5
 800a012:	d112      	bne.n	800a03a <OC1Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800a014:	f023 0308 	bic.w	r3, r3, #8
 800a018:	694d      	ldr	r5, [r1, #20]
 800a01a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800a01e:	f023 0304 	bic.w	r3, r3, #4
 800a022:	688d      	ldr	r5, [r1, #8]
 800a024:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800a028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a02c:	698d      	ldr	r5, [r1, #24]
 800a02e:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800a030:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a034:	69cd      	ldr	r5, [r1, #28]
 800a036:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a03a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800a03c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800a03e:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a040:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a042:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a044:	2000      	movs	r0, #0
 800a046:	bc30      	pop	{r4, r5}
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40012c00 	.word	0x40012c00

0800a050 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a050:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800a052:	6a03      	ldr	r3, [r0, #32]
 800a054:	f023 0310 	bic.w	r3, r3, #16
 800a058:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800a05a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800a05c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800a05e:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800a060:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 800a064:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 800a068:	680c      	ldr	r4, [r1, #0]
 800a06a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800a06e:	f023 0320 	bic.w	r3, r3, #32
 800a072:	690d      	ldr	r5, [r1, #16]
 800a074:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800a078:	f023 0310 	bic.w	r3, r3, #16
 800a07c:	684d      	ldr	r5, [r1, #4]
 800a07e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a082:	4d13      	ldr	r5, [pc, #76]	; (800a0d0 <OC2Config+0x80>)
 800a084:	42a8      	cmp	r0, r5
 800a086:	d007      	beq.n	800a098 <OC2Config+0x48>
 800a088:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800a08c:	42a8      	cmp	r0, r5
 800a08e:	d003      	beq.n	800a098 <OC2Config+0x48>
 800a090:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a094:	42a8      	cmp	r0, r5
 800a096:	d113      	bne.n	800a0c0 <OC2Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800a098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a09c:	694d      	ldr	r5, [r1, #20]
 800a09e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800a0a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a6:	688d      	ldr	r5, [r1, #8]
 800a0a8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800a0ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0b0:	698d      	ldr	r5, [r1, #24]
 800a0b2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800a0b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ba:	69cd      	ldr	r5, [r1, #28]
 800a0bc:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a0c0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800a0c2:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800a0c4:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a0c6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a0c8:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	bc30      	pop	{r4, r5}
 800a0ce:	4770      	bx	lr
 800a0d0:	40012c00 	.word	0x40012c00

0800a0d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a0d4:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800a0d6:	6a03      	ldr	r3, [r0, #32]
 800a0d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800a0de:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800a0e0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800a0e2:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800a0e4:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 800a0e8:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 800a0ec:	680c      	ldr	r4, [r1, #0]
 800a0ee:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800a0f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0f6:	690d      	ldr	r5, [r1, #16]
 800a0f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800a0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a100:	684d      	ldr	r5, [r1, #4]
 800a102:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a106:	4d13      	ldr	r5, [pc, #76]	; (800a154 <OC3Config+0x80>)
 800a108:	42a8      	cmp	r0, r5
 800a10a:	d007      	beq.n	800a11c <OC3Config+0x48>
 800a10c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800a110:	42a8      	cmp	r0, r5
 800a112:	d003      	beq.n	800a11c <OC3Config+0x48>
 800a114:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a118:	42a8      	cmp	r0, r5
 800a11a:	d113      	bne.n	800a144 <OC3Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800a11c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a120:	694d      	ldr	r5, [r1, #20]
 800a122:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800a126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a12a:	688d      	ldr	r5, [r1, #8]
 800a12c:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800a130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a134:	698d      	ldr	r5, [r1, #24]
 800a136:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800a13a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a13e:	69cd      	ldr	r5, [r1, #28]
 800a140:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a144:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800a146:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800a148:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a14a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a14c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a14e:	2000      	movs	r0, #0
 800a150:	bc30      	pop	{r4, r5}
 800a152:	4770      	bx	lr
 800a154:	40012c00 	.word	0x40012c00

0800a158 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a158:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800a15a:	6a03      	ldr	r3, [r0, #32]
 800a15c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a160:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800a162:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800a164:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800a166:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800a168:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a16c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800a170:	680d      	ldr	r5, [r1, #0]
 800a172:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800a176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a17a:	690d      	ldr	r5, [r1, #16]
 800a17c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800a180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a184:	684d      	ldr	r5, [r1, #4]
 800a186:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18a:	4d0c      	ldr	r5, [pc, #48]	; (800a1bc <OC4Config+0x64>)
 800a18c:	42a8      	cmp	r0, r5
 800a18e:	d007      	beq.n	800a1a0 <OC4Config+0x48>
 800a190:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800a194:	42a8      	cmp	r0, r5
 800a196:	d003      	beq.n	800a1a0 <OC4Config+0x48>
 800a198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a19c:	42a8      	cmp	r0, r5
 800a19e:	d104      	bne.n	800a1aa <OC4Config+0x52>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800a1a0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800a1a4:	698d      	ldr	r5, [r1, #24]
 800a1a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800a1aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800a1ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800a1ae:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a1b0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a1b2:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	bc30      	pop	{r4, r5}
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40012c00 	.word	0x40012c00

0800a1c0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a1c0:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800a1c2:	6a03      	ldr	r3, [r0, #32]
 800a1c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800a1ca:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800a1cc:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800a1ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a1d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a1d6:	680c      	ldr	r4, [r1, #0]
 800a1d8:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800a1da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1de:	690c      	ldr	r4, [r1, #16]
 800a1e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800a1e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1e8:	684c      	ldr	r4, [r1, #4]
 800a1ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ee:	4c0d      	ldr	r4, [pc, #52]	; (800a224 <OC5Config+0x64>)
 800a1f0:	42a0      	cmp	r0, r4
 800a1f2:	d007      	beq.n	800a204 <OC5Config+0x44>
 800a1f4:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800a1f8:	42a0      	cmp	r0, r4
 800a1fa:	d003      	beq.n	800a204 <OC5Config+0x44>
 800a1fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a200:	42a0      	cmp	r0, r4
 800a202:	d107      	bne.n	800a214 <OC5Config+0x54>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800a204:	6844      	ldr	r4, [r0, #4]
 800a206:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800a20a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800a20e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 800a212:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800a214:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800a216:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800a218:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800a21a:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a21c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a21e:	2000      	movs	r0, #0
 800a220:	bc10      	pop	{r4}
 800a222:	4770      	bx	lr
 800a224:	40012c00 	.word	0x40012c00

0800a228 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800a228:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800a22a:	6a03      	ldr	r3, [r0, #32]
 800a22c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a230:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800a232:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800a234:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800a236:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a23a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a23e:	680c      	ldr	r4, [r1, #0]
 800a240:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800a244:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a248:	690c      	ldr	r4, [r1, #16]
 800a24a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800a24e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a252:	684c      	ldr	r4, [r1, #4]
 800a254:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a258:	4c0c      	ldr	r4, [pc, #48]	; (800a28c <OC6Config+0x64>)
 800a25a:	42a0      	cmp	r0, r4
 800a25c:	d007      	beq.n	800a26e <OC6Config+0x46>
 800a25e:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800a262:	42a0      	cmp	r0, r4
 800a264:	d003      	beq.n	800a26e <OC6Config+0x46>
 800a266:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a26a:	42a0      	cmp	r0, r4
 800a26c:	d107      	bne.n	800a27e <OC6Config+0x56>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800a26e:	6844      	ldr	r4, [r0, #4]
 800a270:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800a274:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800a278:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 800a27c:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800a27e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800a280:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800a282:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a284:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a286:	2000      	movs	r0, #0
 800a288:	bc10      	pop	{r4}
 800a28a:	4770      	bx	lr
 800a28c:	40012c00 	.word	0x40012c00

0800a290 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a290:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a292:	4a1e      	ldr	r2, [pc, #120]	; (800a30c <LL_TIM_Init+0x7c>)
 800a294:	4290      	cmp	r0, r2
 800a296:	d006      	beq.n	800a2a6 <LL_TIM_Init+0x16>
 800a298:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a29c:	d003      	beq.n	800a2a6 <LL_TIM_Init+0x16>
 800a29e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2a2:	4290      	cmp	r0, r2
 800a2a4:	d103      	bne.n	800a2ae <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	684a      	ldr	r2, [r1, #4]
 800a2ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ae:	4a17      	ldr	r2, [pc, #92]	; (800a30c <LL_TIM_Init+0x7c>)
 800a2b0:	4290      	cmp	r0, r2
 800a2b2:	d00e      	beq.n	800a2d2 <LL_TIM_Init+0x42>
 800a2b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a2b8:	d00b      	beq.n	800a2d2 <LL_TIM_Init+0x42>
 800a2ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2be:	4290      	cmp	r0, r2
 800a2c0:	d007      	beq.n	800a2d2 <LL_TIM_Init+0x42>
 800a2c2:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800a2c6:	4290      	cmp	r0, r2
 800a2c8:	d003      	beq.n	800a2d2 <LL_TIM_Init+0x42>
 800a2ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2ce:	4290      	cmp	r0, r2
 800a2d0:	d103      	bne.n	800a2da <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800a2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d6:	68ca      	ldr	r2, [r1, #12]
 800a2d8:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800a2da:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800a2dc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a2de:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800a2e0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a2e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2e4:	4b09      	ldr	r3, [pc, #36]	; (800a30c <LL_TIM_Init+0x7c>)
 800a2e6:	4298      	cmp	r0, r3
 800a2e8:	d007      	beq.n	800a2fa <LL_TIM_Init+0x6a>
 800a2ea:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800a2ee:	4298      	cmp	r0, r3
 800a2f0:	d003      	beq.n	800a2fa <LL_TIM_Init+0x6a>
 800a2f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2f6:	4298      	cmp	r0, r3
 800a2f8:	d101      	bne.n	800a2fe <LL_TIM_Init+0x6e>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800a2fa:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a2fc:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a2fe:	6943      	ldr	r3, [r0, #20]
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	6143      	str	r3, [r0, #20]
}
 800a306:	2000      	movs	r0, #0
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40012c00 	.word	0x40012c00

0800a310 <UTILS_PLL_IsBusy>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <UTILS_PLL_IsBusy+0x20>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a318:	d007      	beq.n	800a32a <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800a31a:	2001      	movs	r0, #1
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800a31c:	4b04      	ldr	r3, [pc, #16]	; (800a330 <UTILS_PLL_IsBusy+0x20>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800a324:	d000      	beq.n	800a328 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800a326:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800a328:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800a32a:	2000      	movs	r0, #0
 800a32c:	e7f6      	b.n	800a31c <UTILS_PLL_IsBusy+0xc>
 800a32e:	bf00      	nop
 800a330:	40021000 	.word	0x40021000

0800a334 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800a334:	4b01      	ldr	r3, [pc, #4]	; (800a33c <LL_SetSystemCoreClock+0x8>)
 800a336:	6018      	str	r0, [r3, #0]
}
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	200002fc 	.word	0x200002fc

0800a340 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800a340:	1e42      	subs	r2, r0, #1
 800a342:	4b29      	ldr	r3, [pc, #164]	; (800a3e8 <LL_SetFlashLatency+0xa8>)
 800a344:	429a      	cmp	r2, r3
 800a346:	d84c      	bhi.n	800a3e2 <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800a348:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <LL_SetFlashLatency+0xac>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d011      	beq.n	800a37a <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800a356:	4b26      	ldr	r3, [pc, #152]	; (800a3f0 <LL_SetFlashLatency+0xb0>)
 800a358:	4298      	cmp	r0, r3
 800a35a:	d829      	bhi.n	800a3b0 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800a35c:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800a360:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800a364:	4298      	cmp	r0, r3
 800a366:	d832      	bhi.n	800a3ce <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800a368:	4b22      	ldr	r3, [pc, #136]	; (800a3f4 <LL_SetFlashLatency+0xb4>)
 800a36a:	4298      	cmp	r0, r3
 800a36c:	d832      	bhi.n	800a3d4 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <LL_SetFlashLatency+0xb8>)
 800a370:	4298      	cmp	r0, r3
 800a372:	d832      	bhi.n	800a3da <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a374:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a376:	4608      	mov	r0, r1
 800a378:	e01c      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800a37a:	4b20      	ldr	r3, [pc, #128]	; (800a3fc <LL_SetFlashLatency+0xbc>)
 800a37c:	4298      	cmp	r0, r3
 800a37e:	d80b      	bhi.n	800a398 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800a380:	4b1f      	ldr	r3, [pc, #124]	; (800a400 <LL_SetFlashLatency+0xc0>)
 800a382:	4298      	cmp	r0, r3
 800a384:	d80b      	bhi.n	800a39e <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800a386:	4b1f      	ldr	r3, [pc, #124]	; (800a404 <LL_SetFlashLatency+0xc4>)
 800a388:	4298      	cmp	r0, r3
 800a38a:	d80b      	bhi.n	800a3a4 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800a38c:	4b1e      	ldr	r3, [pc, #120]	; (800a408 <LL_SetFlashLatency+0xc8>)
 800a38e:	4298      	cmp	r0, r3
 800a390:	d80b      	bhi.n	800a3aa <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a392:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a394:	4608      	mov	r0, r1
 800a396:	e00d      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800a398:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800a39a:	2000      	movs	r0, #0
 800a39c:	e00a      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800a39e:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e007      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a3a4:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	e004      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a3aa:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e001      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a3b0:	2100      	movs	r1, #0
        status = ERROR;
 800a3b2:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a3b4:	4a15      	ldr	r2, [pc, #84]	; (800a40c <LL_SetFlashLatency+0xcc>)
 800a3b6:	6813      	ldr	r3, [r2, #0]
 800a3b8:	f023 0307 	bic.w	r3, r3, #7
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800a3c6:	4299      	cmp	r1, r3
 800a3c8:	d00a      	beq.n	800a3e0 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800a3ca:	2001      	movs	r0, #1
}
 800a3cc:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800a3ce:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	e7ef      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a3d4:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7ec      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a3da:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e7e9      	b.n	800a3b4 <LL_SetFlashLatency+0x74>
 800a3e0:	4770      	bx	lr
    status = ERROR;
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	04c4b3ff 	.word	0x04c4b3ff
 800a3ec:	40007000 	.word	0x40007000
 800a3f0:	018cba80 	.word	0x018cba80
 800a3f4:	00b71b00 	.word	0x00b71b00
 800a3f8:	005b8d80 	.word	0x005b8d80
 800a3fc:	03d09000 	.word	0x03d09000
 800a400:	02dc6c00 	.word	0x02dc6c00
 800a404:	01e84800 	.word	0x01e84800
 800a408:	00f42400 	.word	0x00f42400
 800a40c:	40022000 	.word	0x40022000

0800a410 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a41a:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800a41c:	5cd3      	ldrb	r3, [r2, r3]
 800a41e:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800a422:	4b25      	ldr	r3, [pc, #148]	; (800a4b8 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	42ab      	cmp	r3, r5
 800a428:	d333      	bcc.n	800a492 <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800a42a:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a42c:	4b23      	ldr	r3, [pc, #140]	; (800a4bc <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a434:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a43c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800a43e:	4b1f      	ldr	r3, [pc, #124]	; (800a4bc <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a446:	d0fa      	beq.n	800a43e <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800a448:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a44c:	6899      	ldr	r1, [r3, #8]
 800a44e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800a452:	430a      	orrs	r2, r1
 800a454:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	f042 0203 	orr.w	r2, r2, #3
 800a45c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a45e:	4b17      	ldr	r3, [pc, #92]	; (800a4bc <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a466:	2b0c      	cmp	r3, #12
 800a468:	d1f9      	bne.n	800a45e <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800a46a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a46c:	4b13      	ldr	r3, [pc, #76]	; (800a4bc <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a46e:	6899      	ldr	r1, [r3, #8]
 800a470:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800a474:	430a      	orrs	r2, r1
 800a476:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800a478:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a47a:	6899      	ldr	r1, [r3, #8]
 800a47c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800a480:	430a      	orrs	r2, r1
 800a482:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	42ab      	cmp	r3, r5
 800a48a:	d809      	bhi.n	800a4a0 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800a48c:	b16e      	cbz	r6, 800a4aa <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800a48e:	4630      	mov	r0, r6
 800a490:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800a492:	4628      	mov	r0, r5
 800a494:	f7ff ff54 	bl	800a340 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800a498:	4606      	mov	r6, r0
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1f2      	bne.n	800a484 <UTILS_EnablePLLAndSwitchSystem+0x74>
 800a49e:	e7c5      	b.n	800a42c <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f7ff ff4d 	bl	800a340 <LL_SetFlashLatency>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	e7f0      	b.n	800a48c <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f7ff ff42 	bl	800a334 <LL_SetSystemCoreClock>
 800a4b0:	e7ed      	b.n	800a48e <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800a4b2:	bf00      	nop
 800a4b4:	080165f0 	.word	0x080165f0
 800a4b8:	200002fc 	.word	0x200002fc
 800a4bc:	40021000 	.word	0x40021000

0800a4c0 <LL_PLL_ConfigSystemClock_HSI>:
{
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800a4c6:	f7ff ff23 	bl	800a310 <UTILS_PLL_IsBusy>
 800a4ca:	bb20      	cbnz	r0, 800a516 <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4813      	ldr	r0, [pc, #76]	; (800a51c <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800a4d0:	f008 fd64 	bl	8012f9c <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a4d4:	4b12      	ldr	r3, [pc, #72]	; (800a520 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a4dc:	d109      	bne.n	800a4f2 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a4de:	4a10      	ldr	r2, [pc, #64]	; (800a520 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a4e0:	6813      	ldr	r3, [r2, #0]
 800a4e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4e6:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a4f0:	d0fa      	beq.n	800a4e8 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	6866      	ldr	r6, [r4, #4]
 800a4f6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800a4f8:	4c09      	ldr	r4, [pc, #36]	; (800a520 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a4fa:	68e7      	ldr	r7, [r4, #12]
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800a4fe:	403b      	ands	r3, r7
 800a500:	f042 0202 	orr.w	r2, r2, #2
 800a504:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800a508:	430a      	orrs	r2, r1
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800a50e:	4629      	mov	r1, r5
 800a510:	f7ff ff7e 	bl	800a410 <UTILS_EnablePLLAndSwitchSystem>
}
 800a514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800a516:	2001      	movs	r0, #1
 800a518:	e7fc      	b.n	800a514 <LL_PLL_ConfigSystemClock_HSI+0x54>
 800a51a:	bf00      	nop
 800a51c:	00f42400 	.word	0x00f42400
 800a520:	40021000 	.word	0x40021000
 800a524:	f9ff808c 	.word	0xf9ff808c

0800a528 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 800a528:	b508      	push	{r3, lr}
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800a52a:	4b06      	ldr	r3, [pc, #24]	; (800a544 <dwt_writetxfctrl+0x1c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	4318      	orrs	r0, r3
 800a532:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800a536:	ea40 32c2 	orr.w	r2, r0, r2, lsl #15
 800a53a:	2100      	movs	r1, #0
 800a53c:	2008      	movs	r0, #8
 800a53e:	f008 fe15 	bl	801316c <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800a542:	bd08      	pop	{r3, pc}
 800a544:	20000300 	.word	0x20000300

0800a548 <dwt_configure>:
{
 800a548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a54c:	4604      	mov	r4, r0
    uint8 chan = config->chan ;
 800a54e:	7805      	ldrb	r5, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800a550:	7942      	ldrb	r2, [r0, #5]
 800a552:	4b79      	ldr	r3, [pc, #484]	; (800a738 <dwt_configure+0x1f0>)
 800a554:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800a558:	7846      	ldrb	r6, [r0, #1]
 800a55a:	3e01      	subs	r6, #1
 800a55c:	b2f6      	uxtb	r6, r6
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800a55e:	2d04      	cmp	r5, #4
 800a560:	f000 80c6 	beq.w	800a6f0 <dwt_configure+0x1a8>
 800a564:	2d07      	cmp	r5, #7
 800a566:	f000 80c1 	beq.w	800a6ec <dwt_configure+0x1a4>
 800a56a:	2700      	movs	r7, #0
    if(DWT_BR_110K == config->dataRate)
 800a56c:	79e3      	ldrb	r3, [r4, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 80c0 	bne.w	800a6f4 <dwt_configure+0x1ac>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800a574:	4b71      	ldr	r3, [pc, #452]	; (800a73c <dwt_configure+0x1f4>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	6913      	ldr	r3, [r2, #16]
 800a57a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a57e:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800a580:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pdw1000local->longFrames = config->phrMode ;
 800a584:	4b6d      	ldr	r3, [pc, #436]	; (800a73c <dwt_configure+0x1f4>)
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	7a23      	ldrb	r3, [r4, #8]
 800a58a:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800a58c:	690a      	ldr	r2, [r1, #16]
 800a58e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a592:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800a594:	7a23      	ldrb	r3, [r4, #8]
 800a596:	041b      	lsls	r3, r3, #16
 800a598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a59c:	431a      	orrs	r2, r3
 800a59e:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	2004      	movs	r0, #4
 800a5a4:	f008 fde2 	bl	801316c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	f642 0104 	movw	r1, #10244	; 0x2804
 800a5ae:	202e      	movs	r0, #46	; 0x2e
 800a5b0:	f008 fdbd 	bl	801312e <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f008 fe10 	bl	80131da <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800a5ba:	4b61      	ldr	r3, [pc, #388]	; (800a740 <dwt_configure+0x1f8>)
 800a5bc:	f813 8005 	ldrb.w	r8, [r3, r5]
 800a5c0:	4b60      	ldr	r3, [pc, #384]	; (800a744 <dwt_configure+0x1fc>)
 800a5c2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800a5c6:	2107      	movs	r1, #7
 800a5c8:	202b      	movs	r0, #43	; 0x2b
 800a5ca:	f008 fdcf 	bl	801316c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800a5ce:	4b5e      	ldr	r3, [pc, #376]	; (800a748 <dwt_configure+0x200>)
 800a5d0:	f813 2008 	ldrb.w	r2, [r3, r8]
 800a5d4:	210b      	movs	r1, #11
 800a5d6:	202b      	movs	r0, #43	; 0x2b
 800a5d8:	f008 fd9b 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800a5dc:	b2ff      	uxtb	r7, r7
 800a5de:	4b5b      	ldr	r3, [pc, #364]	; (800a74c <dwt_configure+0x204>)
 800a5e0:	5dda      	ldrb	r2, [r3, r7]
 800a5e2:	210b      	movs	r1, #11
 800a5e4:	2028      	movs	r0, #40	; 0x28
 800a5e6:	f008 fd94 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800a5ea:	4b59      	ldr	r3, [pc, #356]	; (800a750 <dwt_configure+0x208>)
 800a5ec:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800a5f0:	210c      	movs	r1, #12
 800a5f2:	2028      	movs	r0, #40	; 0x28
 800a5f4:	f008 fdba 	bl	801316c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800a5f8:	79e2      	ldrb	r2, [r4, #7]
 800a5fa:	79a3      	ldrb	r3, [r4, #6]
 800a5fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a600:	4a54      	ldr	r2, [pc, #336]	; (800a754 <dwt_configure+0x20c>)
 800a602:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a606:	2102      	movs	r1, #2
 800a608:	2027      	movs	r0, #39	; 0x27
 800a60a:	f008 fd90 	bl	801312e <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800a60e:	4b52      	ldr	r3, [pc, #328]	; (800a758 <dwt_configure+0x210>)
 800a610:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800a614:	2104      	movs	r1, #4
 800a616:	2027      	movs	r0, #39	; 0x27
 800a618:	f008 fd89 	bl	801312e <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 800a61c:	79e3      	ldrb	r3, [r4, #7]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d06f      	beq.n	800a702 <dwt_configure+0x1ba>
        if(config->txPreambLength == DWT_PLEN_64)
 800a622:	78a3      	ldrb	r3, [r4, #2]
 800a624:	2b04      	cmp	r3, #4
 800a626:	d072      	beq.n	800a70e <dwt_configure+0x1c6>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800a628:	2220      	movs	r2, #32
 800a62a:	2106      	movs	r1, #6
 800a62c:	2027      	movs	r0, #39	; 0x27
 800a62e:	f008 fd7e 	bl	801312e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 800a632:	2228      	movs	r2, #40	; 0x28
 800a634:	2126      	movs	r1, #38	; 0x26
 800a636:	2027      	movs	r0, #39	; 0x27
 800a638:	f008 fd6b 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800a63c:	78e3      	ldrb	r3, [r4, #3]
 800a63e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a642:	4a46      	ldr	r2, [pc, #280]	; (800a75c <dwt_configure+0x214>)
 800a644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a648:	2108      	movs	r1, #8
 800a64a:	2027      	movs	r0, #39	; 0x27
 800a64c:	f008 fd8e 	bl	801316c <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 800a650:	8963      	ldrh	r3, [r4, #10]
 800a652:	b913      	cbnz	r3, 800a65a <dwt_configure+0x112>
        config->sfdTO = DWT_SFDTOC_DEF;
 800a654:	f241 0341 	movw	r3, #4161	; 0x1041
 800a658:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800a65a:	8962      	ldrh	r2, [r4, #10]
 800a65c:	2120      	movs	r1, #32
 800a65e:	2027      	movs	r0, #39	; 0x27
 800a660:	f008 fd65 	bl	801312e <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800a664:	4f3e      	ldr	r7, [pc, #248]	; (800a760 <dwt_configure+0x218>)
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	210c      	movs	r1, #12
 800a66a:	2023      	movs	r0, #35	; 0x23
 800a66c:	f008 fd7e 	bl	801316c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800a670:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 800a674:	88b2      	ldrh	r2, [r6, #4]
 800a676:	2104      	movs	r1, #4
 800a678:	2023      	movs	r0, #35	; 0x23
 800a67a:	f008 fd58 	bl	801312e <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 800a67e:	79a2      	ldrb	r2, [r4, #6]
 800a680:	2a00      	cmp	r2, #0
 800a682:	d14f      	bne.n	800a724 <dwt_configure+0x1dc>
    uint8 useDWnsSFD = 0;
 800a684:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800a686:	f005 030f 	and.w	r3, r5, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800a68a:	012d      	lsls	r5, r5, #4
 800a68c:	b2ed      	uxtb	r5, r5
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800a68e:	432b      	orrs	r3, r5
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800a690:	7860      	ldrb	r0, [r4, #1]
 800a692:	0480      	lsls	r0, r0, #18
 800a694:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800a698:	4303      	orrs	r3, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800a69a:	0512      	lsls	r2, r2, #20
 800a69c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 800a6a0:	4313      	orrs	r3, r2
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800a6a2:	044a      	lsls	r2, r1, #17
 800a6a4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800a6a8:	4313      	orrs	r3, r2
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800a6aa:	7922      	ldrb	r2, [r4, #4]
 800a6ac:	0592      	lsls	r2, r2, #22
 800a6ae:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800a6b2:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 800a6b4:	7962      	ldrb	r2, [r4, #5]
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800a6b6:	ea43 62c2 	orr.w	r2, r3, r2, lsl #27
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	201f      	movs	r0, #31
 800a6be:	f008 fd55 	bl	801316c <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800a6c2:	78a2      	ldrb	r2, [r4, #2]
 800a6c4:	7863      	ldrb	r3, [r4, #1]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	79e2      	ldrb	r2, [r4, #7]
 800a6ca:	0352      	lsls	r2, r2, #13
 800a6cc:	491b      	ldr	r1, [pc, #108]	; (800a73c <dwt_configure+0x1f4>)
 800a6ce:	6809      	ldr	r1, [r1, #0]
 800a6d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6d4:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	2008      	movs	r0, #8
 800a6da:	f008 fd47 	bl	801316c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800a6de:	2242      	movs	r2, #66	; 0x42
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	200d      	movs	r0, #13
 800a6e4:	f008 fd15 	bl	8013112 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800a6ec:	2701      	movs	r7, #1
 800a6ee:	e73d      	b.n	800a56c <dwt_configure+0x24>
 800a6f0:	2701      	movs	r7, #1
 800a6f2:	e73b      	b.n	800a56c <dwt_configure+0x24>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <dwt_configure+0x1f4>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	6913      	ldr	r3, [r2, #16]
 800a6fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a6fe:	6113      	str	r3, [r2, #16]
 800a700:	e740      	b.n	800a584 <dwt_configure+0x3c>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800a702:	2264      	movs	r2, #100	; 0x64
 800a704:	2106      	movs	r1, #6
 800a706:	2027      	movs	r0, #39	; 0x27
 800a708:	f008 fd11 	bl	801312e <dwt_write16bitoffsetreg>
 800a70c:	e796      	b.n	800a63c <dwt_configure+0xf4>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800a70e:	2210      	movs	r2, #16
 800a710:	2106      	movs	r1, #6
 800a712:	2027      	movs	r0, #39	; 0x27
 800a714:	f008 fd0b 	bl	801312e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800a718:	2210      	movs	r2, #16
 800a71a:	2126      	movs	r1, #38	; 0x26
 800a71c:	2027      	movs	r0, #39	; 0x27
 800a71e:	f008 fcf8 	bl	8013112 <dwt_write8bitoffsetreg>
 800a722:	e78b      	b.n	800a63c <dwt_configure+0xf4>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800a724:	79e3      	ldrb	r3, [r4, #7]
 800a726:	4a0f      	ldr	r2, [pc, #60]	; (800a764 <dwt_configure+0x21c>)
 800a728:	5cd2      	ldrb	r2, [r2, r3]
 800a72a:	2100      	movs	r1, #0
 800a72c:	2021      	movs	r0, #33	; 0x21
 800a72e:	f008 fcf0 	bl	8013112 <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 800a732:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
 800a734:	2203      	movs	r2, #3
 800a736:	e7a6      	b.n	800a686 <dwt_configure+0x13e>
 800a738:	08016680 	.word	0x08016680
 800a73c:	20000300 	.word	0x20000300
 800a740:	08016630 	.word	0x08016630
 800a744:	08016660 	.word	0x08016660
 800a748:	08016678 	.word	0x08016678
 800a74c:	080166b4 	.word	0x080166b4
 800a750:	080166c4 	.word	0x080166c4
 800a754:	080166b8 	.word	0x080166b8
 800a758:	08016658 	.word	0x08016658
 800a75c:	08016638 	.word	0x08016638
 800a760:	08016628 	.word	0x08016628
 800a764:	0801665c 	.word	0x0801665c

0800a768 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 800a768:	b410      	push	{r4}
    pdw1000local->cbTxDone = cbTxDone;
 800a76a:	4c04      	ldr	r4, [pc, #16]	; (800a77c <dwt_setcallbacks+0x14>)
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	62a0      	str	r0, [r4, #40]	; 0x28
    pdw1000local->cbRxOk = cbRxOk;
 800a770:	62e1      	str	r1, [r4, #44]	; 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 800a772:	6322      	str	r2, [r4, #48]	; 0x30
    pdw1000local->cbRxErr = cbRxErr;
 800a774:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a776:	bc10      	pop	{r4}
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	20000300 	.word	0x20000300

0800a780 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 800a780:	b508      	push	{r3, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 800a782:	f010 0202 	ands.w	r2, r0, #2
 800a786:	d004      	beq.n	800a792 <dwt_starttx+0x12>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 800a788:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <dwt_starttx+0x58>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2201      	movs	r2, #1
 800a78e:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800a790:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
 800a792:	f010 0f01 	tst.w	r0, #1
 800a796:	d016      	beq.n	800a7c6 <dwt_starttx+0x46>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800a798:	f042 0206 	orr.w	r2, r2, #6
 800a79c:	2100      	movs	r1, #0
 800a79e:	200d      	movs	r0, #13
 800a7a0:	f008 fcb7 	bl	8013112 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800a7a4:	2103      	movs	r1, #3
 800a7a6:	200f      	movs	r0, #15
 800a7a8:	f008 fc93 	bl	80130d2 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800a7ac:	f410 6f81 	tst.w	r0, #1032	; 0x408
 800a7b0:	d101      	bne.n	800a7b6 <dwt_starttx+0x36>
        {
            retval = DWT_SUCCESS ; // All okay
 800a7b2:	2000      	movs	r0, #0
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;
 800a7b4:	e00e      	b.n	800a7d4 <dwt_starttx+0x54>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800a7b6:	2240      	movs	r2, #64	; 0x40
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	200d      	movs	r0, #13
 800a7bc:	f008 fca9 	bl	8013112 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7c4:	e006      	b.n	800a7d4 <dwt_starttx+0x54>
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800a7c6:	f042 0202 	orr.w	r2, r2, #2
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	200d      	movs	r0, #13
 800a7ce:	f008 fca0 	bl	8013112 <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
 800a7d2:	2000      	movs	r0, #0

} // end dwt_starttx()
 800a7d4:	bd08      	pop	{r3, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000300 	.word	0x20000300

0800a7dc <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800a7dc:	b538      	push	{r3, r4, r5, lr}
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800a7de:	2100      	movs	r1, #0
 800a7e0:	200e      	movs	r0, #14
 800a7e2:	f008 fc59 	bl	8013098 <dwt_read32bitoffsetreg>
 800a7e6:	4605      	mov	r5, r0

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800a7e8:	f008 fe33 	bl	8013452 <decamutexon>
 800a7ec:	4604      	mov	r4, r0

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	200e      	movs	r0, #14
 800a7f4:	f008 fcba 	bl	801316c <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800a7f8:	2240      	movs	r2, #64	; 0x40
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	200d      	movs	r0, #13
 800a7fe:	f008 fc88 	bl	8013112 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800a802:	4a0a      	ldr	r2, [pc, #40]	; (800a82c <dwt_forcetrxoff+0x50>)
 800a804:	2100      	movs	r1, #0
 800a806:	200f      	movs	r0, #15
 800a808:	f008 fcb0 	bl	801316c <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800a80c:	f008 fda9 	bl	8013362 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800a810:	462a      	mov	r2, r5
 800a812:	2100      	movs	r1, #0
 800a814:	200e      	movs	r0, #14
 800a816:	f008 fca9 	bl	801316c <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800a81a:	4620      	mov	r0, r4
 800a81c:	f008 fe1b 	bl	8013456 <decamutexoff>
    pdw1000local->wait4resp = 0;
 800a820:	4b03      	ldr	r3, [pc, #12]	; (800a830 <dwt_forcetrxoff+0x54>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2200      	movs	r2, #0
 800a826:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	bf00      	nop
 800a82c:	2427fff8 	.word	0x2427fff8
 800a830:	20000300 	.word	0x20000300

0800a834 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4605      	mov	r5, r0
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800a838:	2103      	movs	r1, #3
 800a83a:	2004      	movs	r0, #4
 800a83c:	f008 fc5b 	bl	80130f6 <dwt_read8bitoffsetreg>
 800a840:	4604      	mov	r4, r0

    if(time > 0)
 800a842:	b195      	cbz	r5, 800a86a <dwt_setrxtimeout+0x36>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 800a844:	462a      	mov	r2, r5
 800a846:	2100      	movs	r1, #0
 800a848:	200c      	movs	r0, #12
 800a84a:	f008 fc70 	bl	801312e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800a84e:	f044 0210 	orr.w	r2, r4, #16
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800a852:	4b0c      	ldr	r3, [pc, #48]	; (800a884 <dwt_setrxtimeout+0x50>)
 800a854:	6819      	ldr	r1, [r3, #0]
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a85c:	610b      	str	r3, [r1, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800a85e:	b2d2      	uxtb	r2, r2
 800a860:	2103      	movs	r1, #3
 800a862:	2004      	movs	r0, #4
 800a864:	f008 fc55 	bl	8013112 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800a868:	bd38      	pop	{r3, r4, r5, pc}
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800a86a:	4b06      	ldr	r3, [pc, #24]	; (800a884 <dwt_setrxtimeout+0x50>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	6913      	ldr	r3, [r2, #16]
 800a870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a874:	6113      	str	r3, [r2, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800a876:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 800a87a:	2103      	movs	r1, #3
 800a87c:	2004      	movs	r0, #4
 800a87e:	f008 fc48 	bl	8013112 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800a882:	e7f1      	b.n	800a868 <dwt_setrxtimeout+0x34>
 800a884:	20000300 	.word	0x20000300

0800a888 <dwt_isr>:
{
 800a888:	b538      	push	{r3, r4, r5, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 800a88a:	4b53      	ldr	r3, [pc, #332]	; (800a9d8 <dwt_isr+0x150>)
 800a88c:	681d      	ldr	r5, [r3, #0]
 800a88e:	2100      	movs	r1, #0
 800a890:	200f      	movs	r0, #15
 800a892:	f008 fc01 	bl	8013098 <dwt_read32bitoffsetreg>
 800a896:	4604      	mov	r4, r0
 800a898:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 800a89a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800a89e:	d109      	bne.n	800a8b4 <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
 800a8a0:	f014 0f80 	tst.w	r4, #128	; 0x80
 800a8a4:	d155      	bne.n	800a952 <dwt_isr+0xca>
    if(status & SYS_STATUS_ALL_RX_TO)
 800a8a6:	f414 1f08 	tst.w	r4, #2228224	; 0x220000
 800a8aa:	d16b      	bne.n	800a984 <dwt_isr+0xfc>
    if(status & SYS_STATUS_ALL_RX_ERR)
 800a8ac:	4b4b      	ldr	r3, [pc, #300]	; (800a9dc <dwt_isr+0x154>)
 800a8ae:	421c      	tst	r4, r3
 800a8b0:	d17d      	bne.n	800a9ae <dwt_isr+0x126>
}
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 800a8b4:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	200f      	movs	r0, #15
 800a8bc:	f008 fc56 	bl	801316c <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 800a8c0:	4d45      	ldr	r5, [pc, #276]	; (800a9d8 <dwt_isr+0x150>)
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 800a8ca:	2010      	movs	r0, #16
 800a8cc:	f008 fc01 	bl	80130d2 <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 800a8d0:	f3c0 0209 	ubfx	r2, r0, #0, #10
        if(pdw1000local->longFrames == 0)
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	7a99      	ldrb	r1, [r3, #10]
 800a8d8:	b909      	cbnz	r1, 800a8de <dwt_isr+0x56>
            len &= RX_FINFO_RXFLEN_MASK;
 800a8da:	f000 027f 	and.w	r2, r0, #127	; 0x7f
        pdw1000local->cbData.datalength = len;
 800a8de:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 800a8e0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800a8e4:	d120      	bne.n	800a928 <dwt_isr+0xa0>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
 800a8e6:	3322      	adds	r3, #34	; 0x22
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	2011      	movs	r0, #17
 800a8ee:	f008 fb99 	bl	8013024 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 800a8f2:	f014 0f08 	tst.w	r4, #8
 800a8f6:	d006      	beq.n	800a906 <dwt_isr+0x7e>
 800a8f8:	4b37      	ldr	r3, [pc, #220]	; (800a9d8 <dwt_isr+0x150>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a900:	f013 0f20 	tst.w	r3, #32
 800a904:	d017      	beq.n	800a936 <dwt_isr+0xae>
        if(pdw1000local->cbRxOk != NULL)
 800a906:	4b34      	ldr	r3, [pc, #208]	; (800a9d8 <dwt_isr+0x150>)
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a90c:	b10b      	cbz	r3, 800a912 <dwt_isr+0x8a>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 800a90e:	301c      	adds	r0, #28
 800a910:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 800a912:	4b31      	ldr	r3, [pc, #196]	; (800a9d8 <dwt_isr+0x150>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	7d1b      	ldrb	r3, [r3, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0c1      	beq.n	800a8a0 <dwt_isr+0x18>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 800a91c:	2201      	movs	r2, #1
 800a91e:	2103      	movs	r1, #3
 800a920:	200d      	movs	r0, #13
 800a922:	f008 fbf6 	bl	8013112 <dwt_write8bitoffsetreg>
 800a926:	e7bb      	b.n	800a8a0 <dwt_isr+0x18>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 800a928:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a92c:	f042 0201 	orr.w	r2, r2, #1
 800a930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a934:	e7d7      	b.n	800a8e6 <dwt_isr+0x5e>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 800a936:	2208      	movs	r2, #8
 800a938:	2100      	movs	r1, #0
 800a93a:	200f      	movs	r0, #15
 800a93c:	f008 fc16 	bl	801316c <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 800a940:	4b25      	ldr	r3, [pc, #148]	; (800a9d8 <dwt_isr+0x150>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	69da      	ldr	r2, [r3, #28]
 800a946:	f022 0208 	bic.w	r2, r2, #8
 800a94a:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 800a94c:	2200      	movs	r2, #0
 800a94e:	755a      	strb	r2, [r3, #21]
 800a950:	e7d9      	b.n	800a906 <dwt_isr+0x7e>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 800a952:	22f8      	movs	r2, #248	; 0xf8
 800a954:	2100      	movs	r1, #0
 800a956:	200f      	movs	r0, #15
 800a958:	f008 fc08 	bl	801316c <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 800a95c:	f014 0f08 	tst.w	r4, #8
 800a960:	d003      	beq.n	800a96a <dwt_isr+0xe2>
 800a962:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <dwt_isr+0x150>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	7d5b      	ldrb	r3, [r3, #21]
 800a968:	b93b      	cbnz	r3, 800a97a <dwt_isr+0xf2>
        if(pdw1000local->cbTxDone != NULL)
 800a96a:	4b1b      	ldr	r3, [pc, #108]	; (800a9d8 <dwt_isr+0x150>)
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a970:	2b00      	cmp	r3, #0
 800a972:	d098      	beq.n	800a8a6 <dwt_isr+0x1e>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 800a974:	301c      	adds	r0, #28
 800a976:	4798      	blx	r3
 800a978:	e795      	b.n	800a8a6 <dwt_isr+0x1e>
            dwt_forcetrxoff(); // Turn the RX off
 800a97a:	f7ff ff2f 	bl	800a7dc <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 800a97e:	f008 fd22 	bl	80133c6 <dwt_rxreset>
 800a982:	e7f2      	b.n	800a96a <dwt_isr+0xe2>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 800a984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a988:	2100      	movs	r1, #0
 800a98a:	200f      	movs	r0, #15
 800a98c:	f008 fbee 	bl	801316c <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 800a990:	4d11      	ldr	r5, [pc, #68]	; (800a9d8 <dwt_isr+0x150>)
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	2200      	movs	r2, #0
 800a996:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 800a998:	f7ff ff20 	bl	800a7dc <dwt_forcetrxoff>
        dwt_rxreset();
 800a99c:	f008 fd13 	bl	80133c6 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 800a9a0:	6828      	ldr	r0, [r5, #0]
 800a9a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d081      	beq.n	800a8ac <dwt_isr+0x24>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 800a9a8:	301c      	adds	r0, #28
 800a9aa:	4798      	blx	r3
 800a9ac:	e77e      	b.n	800a8ac <dwt_isr+0x24>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	200f      	movs	r0, #15
 800a9b4:	f008 fbda 	bl	801316c <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 800a9b8:	4c07      	ldr	r4, [pc, #28]	; (800a9d8 <dwt_isr+0x150>)
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 800a9c0:	f7ff ff0c 	bl	800a7dc <dwt_forcetrxoff>
        dwt_rxreset();
 800a9c4:	f008 fcff 	bl	80133c6 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 800a9c8:	6820      	ldr	r0, [r4, #0]
 800a9ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f43f af70 	beq.w	800a8b2 <dwt_isr+0x2a>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 800a9d2:	301c      	adds	r0, #28
 800a9d4:	4798      	blx	r3
}
 800a9d6:	e76c      	b.n	800a8b2 <dwt_isr+0x2a>
 800a9d8:	20000300 	.word	0x20000300
 800a9dc:	24059000 	.word	0x24059000

0800a9e0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800a9e0:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
 800a9e2:	f008 fcad 	bl	8013340 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	202c      	movs	r0, #44	; 0x2c
 800a9ec:	f008 fb9f 	bl	801312e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2106      	movs	r1, #6
 800a9f4:	202c      	movs	r0, #44	; 0x2c
 800a9f6:	f008 fb8c 	bl	8013112 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800a9fa:	f008 fbe2 	bl	80131c2 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2103      	movs	r1, #3
 800aa02:	2036      	movs	r0, #54	; 0x36
 800aa04:	f008 fb85 	bl	8013112 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800aa08:	2001      	movs	r0, #1
 800aa0a:	f008 fd12 	bl	8013432 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800aa0e:	22f0      	movs	r2, #240	; 0xf0
 800aa10:	2103      	movs	r1, #3
 800aa12:	2036      	movs	r0, #54	; 0x36
 800aa14:	f008 fb7d 	bl	8013112 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800aa18:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <dwt_softreset+0x44>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	755a      	strb	r2, [r3, #21]
}
 800aa20:	bd08      	pop	{r3, pc}
 800aa22:	bf00      	nop
 800aa24:	20000300 	.word	0x20000300

0800aa28 <dwt_initialise>:
{
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	4604      	mov	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800aa2c:	4b6d      	ldr	r3, [pc, #436]	; (800abe4 <dwt_initialise+0x1bc>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2200      	movs	r2, #0
 800aa32:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800aa34:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800aa36:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 800aa38:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 800aa3a:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 800aa3c:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 800aa3e:	635a      	str	r2, [r3, #52]	; 0x34
    uint32_t device_id = dwt_readdevid();
 800aa40:	f008 fb41 	bl	80130c6 <dwt_readdevid>
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800aa44:	4b68      	ldr	r3, [pc, #416]	; (800abe8 <dwt_initialise+0x1c0>)
 800aa46:	4298      	cmp	r0, r3
 800aa48:	f040 80c8 	bne.w	800abdc <dwt_initialise+0x1b4>
 800aa4c:	4601      	mov	r1, r0
    printk("device_id: %08x\n", device_id);
 800aa4e:	4867      	ldr	r0, [pc, #412]	; (800abec <dwt_initialise+0x1c4>)
 800aa50:	f006 faa5 	bl	8010f9e <printk>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800aa54:	f014 0502 	ands.w	r5, r4, #2
 800aa58:	d01c      	beq.n	800aa94 <dwt_initialise+0x6c>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800aa5a:	b115      	cbz	r5, 800aa62 <dwt_initialise+0x3a>
 800aa5c:	f014 0ff8 	tst.w	r4, #248	; 0xf8
 800aa60:	d102      	bne.n	800aa68 <dwt_initialise+0x40>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800aa62:	2000      	movs	r0, #0
 800aa64:	f008 fbe2 	bl	801322c <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800aa68:	2204      	movs	r2, #4
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	2024      	movs	r0, #36	; 0x24
 800aa6e:	f008 fb50 	bl	8013112 <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 800aa72:	b9f5      	cbnz	r5, 800aab2 <dwt_initialise+0x8a>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800aa74:	2004      	movs	r0, #4
 800aa76:	f008 fb8f 	bl	8013198 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 800aa7a:	f010 0fff 	tst.w	r0, #255	; 0xff
 800aa7e:	d10c      	bne.n	800aa9a <dwt_initialise+0x72>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800aa80:	b32d      	cbz	r5, 800aace <dwt_initialise+0xa6>
 800aa82:	f004 030a 	and.w	r3, r4, #10
 800aa86:	2b0a      	cmp	r3, #10
 800aa88:	d021      	beq.n	800aace <dwt_initialise+0xa6>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800aa8a:	4b56      	ldr	r3, [pc, #344]	; (800abe4 <dwt_initialise+0x1bc>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	72d3      	strb	r3, [r2, #11]
 800aa92:	e025      	b.n	800aae0 <dwt_initialise+0xb8>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800aa94:	f7ff ffa4 	bl	800a9e0 <dwt_softreset>
 800aa98:	e7df      	b.n	800aa5a <dwt_initialise+0x32>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	2112      	movs	r1, #18
 800aa9e:	202d      	movs	r0, #45	; 0x2d
 800aaa0:	f008 fb37 	bl	8013112 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800aaa4:	4b4f      	ldr	r3, [pc, #316]	; (800abe4 <dwt_initialise+0x1bc>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	8ad3      	ldrh	r3, [r2, #22]
 800aaaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaae:	82d3      	strh	r3, [r2, #22]
 800aab0:	e7e6      	b.n	800aa80 <dwt_initialise+0x58>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800aab2:	2130      	movs	r1, #48	; 0x30
 800aab4:	2028      	movs	r0, #40	; 0x28
 800aab6:	f008 faef 	bl	8013098 <dwt_read32bitoffsetreg>
 800aaba:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
 800aabe:	d0df      	beq.n	800aa80 <dwt_initialise+0x58>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800aac0:	4b48      	ldr	r3, [pc, #288]	; (800abe4 <dwt_initialise+0x1bc>)
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	8ad3      	ldrh	r3, [r2, #22]
 800aac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaca:	82d3      	strh	r3, [r2, #22]
 800aacc:	e7d8      	b.n	800aa80 <dwt_initialise+0x58>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800aace:	201e      	movs	r0, #30
 800aad0:	f008 fb62 	bl	8013198 <_dwt_otpread>
 800aad4:	b283      	uxth	r3, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800aad6:	4a43      	ldr	r2, [pc, #268]	; (800abe4 <dwt_initialise+0x1bc>)
 800aad8:	6812      	ldr	r2, [r2, #0]
 800aada:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800aade:	72d0      	strb	r0, [r2, #11]
    if(!(DWT_DW_WAKE_UP & config))
 800aae0:	b935      	cbnz	r5, 800aaf0 <dwt_initialise+0xc8>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800aae2:	f013 0f1f 	tst.w	r3, #31
 800aae6:	d100      	bne.n	800aaea <dwt_initialise+0xc2>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800aae8:	2310      	movs	r3, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800aaea:	b2d8      	uxtb	r0, r3
 800aaec:	f008 fc77 	bl	80133de <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 800aaf0:	f014 0f10 	tst.w	r4, #16
 800aaf4:	d140      	bne.n	800ab78 <dwt_initialise+0x150>
        pdw1000local->partID = 0;
 800aaf6:	4b3b      	ldr	r3, [pc, #236]	; (800abe4 <dwt_initialise+0x1bc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 800aafe:	f014 0f20 	tst.w	r4, #32
 800ab02:	d140      	bne.n	800ab86 <dwt_initialise+0x15e>
        pdw1000local->lotID = 0;
 800ab04:	4b37      	ldr	r3, [pc, #220]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 800ab0c:	f014 0f40 	tst.w	r4, #64	; 0x40
 800ab10:	d140      	bne.n	800ab94 <dwt_initialise+0x16c>
        pdw1000local->vBatP = 0;
 800ab12:	4b34      	ldr	r3, [pc, #208]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2200      	movs	r2, #0
 800ab18:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 800ab1a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800ab1e:	d140      	bne.n	800aba2 <dwt_initialise+0x17a>
        pdw1000local->tempP = 0;
 800ab20:	4b30      	ldr	r3, [pc, #192]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2200      	movs	r2, #0
 800ab26:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 800ab28:	2d00      	cmp	r5, #0
 800ab2a:	d14d      	bne.n	800abc8 <dwt_initialise+0x1a0>
        if(DWT_LOADUCODE & config)
 800ab2c:	f014 0f01 	tst.w	r4, #1
 800ab30:	d03e      	beq.n	800abb0 <dwt_initialise+0x188>
            _dwt_loaducodefromrom();
 800ab32:	f008 fbf4 	bl	801331e <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800ab36:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	8ad3      	ldrh	r3, [r2, #22]
 800ab3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab40:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800ab42:	2001      	movs	r0, #1
 800ab44:	f008 fb72 	bl	801322c <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800ab48:	2200      	movs	r2, #0
 800ab4a:	210a      	movs	r1, #10
 800ab4c:	202c      	movs	r0, #44	; 0x2c
 800ab4e:	f008 fae0 	bl	8013112 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800ab52:	4c24      	ldr	r4, [pc, #144]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab54:	6825      	ldr	r5, [r4, #0]
 800ab56:	2100      	movs	r1, #0
 800ab58:	2004      	movs	r0, #4
 800ab5a:	f008 fa9d 	bl	8013098 <dwt_read32bitoffsetreg>
 800ab5e:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800ab60:	6824      	ldr	r4, [r4, #0]
 800ab62:	8a63      	ldrh	r3, [r4, #18]
 800ab64:	f003 0303 	and.w	r3, r3, #3
 800ab68:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	2008      	movs	r0, #8
 800ab6e:	f008 fa93 	bl	8013098 <dwt_read32bitoffsetreg>
 800ab72:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 800ab74:	2000      	movs	r0, #0
} // end dwt_initialise()
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800ab78:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab7a:	681e      	ldr	r6, [r3, #0]
 800ab7c:	2006      	movs	r0, #6
 800ab7e:	f008 fb0b 	bl	8013198 <_dwt_otpread>
 800ab82:	6030      	str	r0, [r6, #0]
 800ab84:	e7bb      	b.n	800aafe <dwt_initialise+0xd6>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800ab86:	4b17      	ldr	r3, [pc, #92]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab88:	681e      	ldr	r6, [r3, #0]
 800ab8a:	2007      	movs	r0, #7
 800ab8c:	f008 fb04 	bl	8013198 <_dwt_otpread>
 800ab90:	6070      	str	r0, [r6, #4]
 800ab92:	e7bb      	b.n	800ab0c <dwt_initialise+0xe4>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800ab94:	2008      	movs	r0, #8
 800ab96:	f008 faff 	bl	8013198 <_dwt_otpread>
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <dwt_initialise+0x1bc>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	7218      	strb	r0, [r3, #8]
 800aba0:	e7bb      	b.n	800ab1a <dwt_initialise+0xf2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800aba2:	2009      	movs	r0, #9
 800aba4:	f008 faf8 	bl	8013198 <_dwt_otpread>
 800aba8:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <dwt_initialise+0x1bc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	7258      	strb	r0, [r3, #9]
 800abae:	e7bb      	b.n	800ab28 <dwt_initialise+0x100>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800abb0:	2105      	movs	r1, #5
 800abb2:	2036      	movs	r0, #54	; 0x36
 800abb4:	f008 fa8d 	bl	80130d2 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 800abb8:	f420 7200 	bic.w	r2, r0, #512	; 0x200
 800abbc:	b292      	uxth	r2, r2
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800abbe:	2105      	movs	r1, #5
 800abc0:	2036      	movs	r0, #54	; 0x36
 800abc2:	f008 fab4 	bl	801312e <dwt_write16bitoffsetreg>
 800abc6:	e7bc      	b.n	800ab42 <dwt_initialise+0x11a>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800abc8:	f014 0f04 	tst.w	r4, #4
 800abcc:	d1b9      	bne.n	800ab42 <dwt_initialise+0x11a>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <dwt_initialise+0x1bc>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	8ad3      	ldrh	r3, [r2, #22]
 800abd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abd8:	82d3      	strh	r3, [r2, #22]
 800abda:	e7b2      	b.n	800ab42 <dwt_initialise+0x11a>
        return DWT_ERROR ;
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abe0:	e7c9      	b.n	800ab76 <dwt_initialise+0x14e>
 800abe2:	bf00      	nop
 800abe4:	20000300 	.word	0x20000300
 800abe8:	deca0130 	.word	0xdeca0130
 800abec:	08016608 	.word	0x08016608

0800abf0 <dwt_spi_write>:
}

static int dwt_spi_write(struct dw1000_dev_data *ctx,
                         uint16_t hdr_len, const uint8_t *hdr_buf,
                         uint32_t data_len, const uint8_t *data)
{
 800abf0:	b510      	push	{r4, lr}
 800abf2:	b096      	sub	sp, #88	; 0x58
 800abf4:	4684      	mov	ip, r0
    struct spi_buf buf[2] = {
 800abf6:	920c      	str	r2, [sp, #48]	; 0x30
 800abf8:	910d      	str	r1, [sp, #52]	; 0x34
 800abfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abfc:	920e      	str	r2, [sp, #56]	; 0x38
 800abfe:	930f      	str	r3, [sp, #60]	; 0x3c
        {.buf = (uint8_t *)hdr_buf, .len = hdr_len},
        {.buf = (uint8_t *)data, .len = data_len}
    };
    struct spi_buf_set buf_set = {.buffers = buf, .count = 2};
 800ac00:	ab0c      	add	r3, sp, #48	; 0x30
 800ac02:	930a      	str	r3, [sp, #40]	; 0x28
 800ac04:	2302      	movs	r3, #2
 800ac06:	930b      	str	r3, [sp, #44]	; 0x2c
    LOG_DBG("spi write, header length %u, data length %u",
            (uint16_t)hdr_len, (uint32_t)data_len);
    LOG_HEXDUMP_DBG(hdr_buf, (uint16_t)hdr_len, "wr: header");
    LOG_HEXDUMP_DBG(data, (uint32_t)data_len, "wr: data");

    if (spi_write(ctx->spi, ctx->spi_cfg, &buf_set)) {
 800ac08:	6880      	ldr	r0, [r0, #8]
 800ac0a:	f8dc 1018 	ldr.w	r1, [ip, #24]
	const struct spi_driver_api *api =
 800ac0e:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800ac10:	681c      	ldr	r4, [r3, #0]
 800ac12:	2300      	movs	r3, #0
 800ac14:	aa0a      	add	r2, sp, #40	; 0x28
 800ac16:	47a0      	blx	r4
 800ac18:	b908      	cbnz	r0, 800ac1e <dwt_spi_write+0x2e>
        LOG_ERR("SPI read failed");
        return -EIO;
    }

    return 0;
}
 800ac1a:	b016      	add	sp, #88	; 0x58
 800ac1c:	bd10      	pop	{r4, pc}
        LOG_ERR("SPI read failed");
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ac24:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <dwt_spi_write+0x78>)
 800ac26:	9314      	str	r3, [sp, #80]	; 0x50
 800ac28:	2300      	movs	r3, #0
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	f88d 1004 	strb.w	r1, [sp, #4]
 800ac32:	9901      	ldr	r1, [sp, #4]
 800ac34:	9113      	str	r1, [sp, #76]	; 0x4c
 800ac36:	4619      	mov	r1, r3
 800ac38:	f363 0100 	bfi	r1, r3, #0, #1
 800ac3c:	f363 0141 	bfi	r1, r3, #1, #1
 800ac40:	f363 0182 	bfi	r1, r3, #2, #1
 800ac44:	f363 01c5 	bfi	r1, r3, #3, #3
 800ac48:	f362 1188 	bfi	r1, r2, #6, #3
 800ac4c:	2208      	movs	r2, #8
 800ac4e:	f362 2152 	bfi	r1, r2, #9, #10
 800ac52:	f363 41de 	bfi	r1, r3, #19, #12
 800ac56:	f363 71df 	bfi	r1, r3, #31, #1
 800ac5a:	aa13      	add	r2, sp, #76	; 0x4c
 800ac5c:	4803      	ldr	r0, [pc, #12]	; (800ac6c <dwt_spi_write+0x7c>)
 800ac5e:	f006 fd61 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800ac62:	f06f 0004 	mvn.w	r0, #4
 800ac66:	e7d8      	b.n	800ac1a <dwt_spi_write+0x2a>
 800ac68:	080166dc 	.word	0x080166dc
 800ac6c:	08015030 	.word	0x08015030

0800ac70 <dwt_spi_read>:
{
 800ac70:	b510      	push	{r4, lr}
 800ac72:	b09a      	sub	sp, #104	; 0x68
 800ac74:	4684      	mov	ip, r0
    const struct spi_buf tx_buf = {
 800ac76:	9212      	str	r2, [sp, #72]	; 0x48
 800ac78:	9113      	str	r1, [sp, #76]	; 0x4c
    const struct spi_buf_set tx = {
 800ac7a:	aa12      	add	r2, sp, #72	; 0x48
 800ac7c:	9210      	str	r2, [sp, #64]	; 0x40
 800ac7e:	2201      	movs	r2, #1
 800ac80:	9211      	str	r2, [sp, #68]	; 0x44
    struct spi_buf rx_buf[2] = {
 800ac82:	2200      	movs	r2, #0
 800ac84:	920c      	str	r2, [sp, #48]	; 0x30
 800ac86:	910d      	str	r1, [sp, #52]	; 0x34
 800ac88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ac8a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac8c:	930f      	str	r3, [sp, #60]	; 0x3c
    const struct spi_buf_set rx = {
 800ac8e:	ab0c      	add	r3, sp, #48	; 0x30
 800ac90:	930a      	str	r3, [sp, #40]	; 0x28
 800ac92:	2302      	movs	r3, #2
 800ac94:	930b      	str	r3, [sp, #44]	; 0x2c
    if (spi_transceive(ctx->spi, ctx->spi_cfg, &tx, &rx)) {
 800ac96:	6880      	ldr	r0, [r0, #8]
 800ac98:	f8dc 1018 	ldr.w	r1, [ip, #24]
	const struct spi_driver_api *api =
 800ac9c:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800ac9e:	681c      	ldr	r4, [r3, #0]
 800aca0:	ab0a      	add	r3, sp, #40	; 0x28
 800aca2:	aa10      	add	r2, sp, #64	; 0x40
 800aca4:	47a0      	blx	r4
 800aca6:	b908      	cbnz	r0, 800acac <dwt_spi_read+0x3c>
}
 800aca8:	b01a      	add	sp, #104	; 0x68
 800acaa:	bd10      	pop	{r4, pc}
        LOG_ERR("SPI transfer failed");
 800acac:	2201      	movs	r2, #1
 800acae:	f8ad 2008 	strh.w	r2, [sp, #8]
 800acb2:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <dwt_spi_read+0x88>)
 800acb4:	9318      	str	r3, [sp, #96]	; 0x60
 800acb6:	2300      	movs	r3, #0
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	2102      	movs	r1, #2
 800acbc:	f88d 1004 	strb.w	r1, [sp, #4]
 800acc0:	9901      	ldr	r1, [sp, #4]
 800acc2:	9117      	str	r1, [sp, #92]	; 0x5c
 800acc4:	4619      	mov	r1, r3
 800acc6:	f363 0100 	bfi	r1, r3, #0, #1
 800acca:	f363 0141 	bfi	r1, r3, #1, #1
 800acce:	f363 0182 	bfi	r1, r3, #2, #1
 800acd2:	f363 01c5 	bfi	r1, r3, #3, #3
 800acd6:	f362 1188 	bfi	r1, r2, #6, #3
 800acda:	2208      	movs	r2, #8
 800acdc:	f362 2152 	bfi	r1, r2, #9, #10
 800ace0:	f363 41de 	bfi	r1, r3, #19, #12
 800ace4:	f363 71df 	bfi	r1, r3, #31, #1
 800ace8:	aa17      	add	r2, sp, #92	; 0x5c
 800acea:	4804      	ldr	r0, [pc, #16]	; (800acfc <dwt_spi_read+0x8c>)
 800acec:	f006 fd1a 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800acf0:	f06f 0004 	mvn.w	r0, #4
 800acf4:	e7d8      	b.n	800aca8 <dwt_spi_read+0x38>
 800acf6:	bf00      	nop
 800acf8:	080166ec 	.word	0x080166ec
 800acfc:	08015030 	.word	0x08015030

0800ad00 <dwt_hw_reset>:
    return dwt_spi_read(ctx, headerLength, headerBuffer,
                        readLength, readBuffer);
}

static int dwt_hw_reset(const struct device *dev)
{
 800ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad02:	b097      	sub	sp, #92	; 0x5c
    struct dw1000_dev_data *ctx = dev->data;
 800ad04:	6905      	ldr	r5, [r0, #16]
    const struct dw1000_dev_config *cfg = dev->config;
 800ad06:	6844      	ldr	r4, [r0, #4]

    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800ad08:	6868      	ldr	r0, [r5, #4]
 800ad0a:	7b21      	ldrb	r1, [r4, #12]
                           GPIO_OUTPUT_ACTIVE | cfg->rst_flags)) {
 800ad0c:	7b63      	ldrb	r3, [r4, #13]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800ad0e:	f443 53d0 	orr.w	r3, r3, #6656	; 0x1a00
	const struct gpio_driver_api *api =
 800ad12:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 800ad14:	6906      	ldr	r6, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800ad16:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800ad1a:	d004      	beq.n	800ad26 <dwt_hw_reset+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800ad1c:	f013 0f01 	tst.w	r3, #1
 800ad20:	d001      	beq.n	800ad26 <dwt_hw_reset+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800ad22:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800ad26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800ad2a:	f013 0f01 	tst.w	r3, #1
 800ad2e:	d047      	beq.n	800adc0 <dwt_hw_reset+0xc0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800ad30:	2301      	movs	r3, #1
 800ad32:	fa03 fc01 	lsl.w	ip, r3, r1
 800ad36:	6833      	ldr	r3, [r6, #0]
 800ad38:	ea43 030c 	orr.w	r3, r3, ip
 800ad3c:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	4798      	blx	r3
 800ad42:	4606      	mov	r6, r0
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d143      	bne.n	800add0 <dwt_hw_reset+0xd0>
	return z_impl_k_sleep(timeout);
 800ad48:	200a      	movs	r0, #10
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	f003 ff78 	bl	800ec40 <z_impl_k_sleep>
        LOG_ERR("Failed to configure GPIO pin %u", cfg->rst_pin);
        return -EINVAL;
    }

    k_sleep(K_MSEC(1));
    gpio_pin_set(ctx->rst_gpio, cfg->rst_pin, 0);
 800ad50:	6868      	ldr	r0, [r5, #4]
 800ad52:	7b21      	ldrb	r1, [r4, #12]
	const struct gpio_driver_data *const data =
 800ad54:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	2301      	movs	r3, #1
 800ad5a:	408b      	lsls	r3, r1
 800ad5c:	421a      	tst	r2, r3
 800ad5e:	d000      	beq.n	800ad62 <dwt_hw_reset+0x62>
		value = (value != 0) ? 0 : 1;
 800ad60:	2601      	movs	r6, #1
	if (value != 0)	{
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d05b      	beq.n	800ae1e <dwt_hw_reset+0x11e>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ad66:	2301      	movs	r3, #1
 800ad68:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ad6c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4798      	blx	r3
 800ad72:	2032      	movs	r0, #50	; 0x32
 800ad74:	2100      	movs	r1, #0
 800ad76:	f003 ff63 	bl	800ec40 <z_impl_k_sleep>
    k_sleep(K_MSEC(5));

    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800ad7a:	6868      	ldr	r0, [r5, #4]
 800ad7c:	7b21      	ldrb	r1, [r4, #12]
                           GPIO_INPUT | cfg->rst_flags)) {
 800ad7e:	7b63      	ldrb	r3, [r4, #13]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800ad80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 800ad84:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 800ad86:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800ad88:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ad8c:	b13a      	cbz	r2, 800ad9e <dwt_hw_reset+0x9e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800ad8e:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800ad92:	d004      	beq.n	800ad9e <dwt_hw_reset+0x9e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800ad94:	f013 0f01 	tst.w	r3, #1
 800ad98:	d001      	beq.n	800ad9e <dwt_hw_reset+0x9e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800ad9a:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800ad9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800ada2:	f013 0f01 	tst.w	r3, #1
 800ada6:	d041      	beq.n	800ae2c <dwt_hw_reset+0x12c>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800ada8:	2301      	movs	r3, #1
 800adaa:	fa03 f701 	lsl.w	r7, r3, r1
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	433b      	orrs	r3, r7
 800adb2:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 800adb4:	6833      	ldr	r3, [r6, #0]
 800adb6:	4798      	blx	r3
 800adb8:	2800      	cmp	r0, #0
 800adba:	d13f      	bne.n	800ae3c <dwt_hw_reset+0x13c>
        LOG_ERR("Failed to configure GPIO pin %u", cfg->rst_pin);
        return -EINVAL;
    }

    return 0;
}
 800adbc:	b017      	add	sp, #92	; 0x5c
 800adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800adc0:	2301      	movs	r3, #1
 800adc2:	fa03 fc01 	lsl.w	ip, r3, r1
 800adc6:	6833      	ldr	r3, [r6, #0]
 800adc8:	ea23 030c 	bic.w	r3, r3, ip
 800adcc:	6033      	str	r3, [r6, #0]
 800adce:	e7b6      	b.n	800ad3e <dwt_hw_reset+0x3e>
        LOG_ERR("Failed to configure GPIO pin %u", cfg->rst_pin);
 800add0:	2201      	movs	r2, #1
 800add2:	f8ad 2008 	strh.w	r2, [sp, #8]
 800add6:	4b2d      	ldr	r3, [pc, #180]	; (800ae8c <dwt_hw_reset+0x18c>)
 800add8:	9314      	str	r3, [sp, #80]	; 0x50
 800adda:	7b23      	ldrb	r3, [r4, #12]
 800addc:	9315      	str	r3, [sp, #84]	; 0x54
 800adde:	2300      	movs	r3, #0
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	2103      	movs	r1, #3
 800ade4:	f88d 1004 	strb.w	r1, [sp, #4]
 800ade8:	9901      	ldr	r1, [sp, #4]
 800adea:	9113      	str	r1, [sp, #76]	; 0x4c
 800adec:	4619      	mov	r1, r3
 800adee:	f363 0100 	bfi	r1, r3, #0, #1
 800adf2:	f363 0141 	bfi	r1, r3, #1, #1
 800adf6:	f363 0182 	bfi	r1, r3, #2, #1
 800adfa:	f363 01c5 	bfi	r1, r3, #3, #3
 800adfe:	f362 1188 	bfi	r1, r2, #6, #3
 800ae02:	220c      	movs	r2, #12
 800ae04:	f362 2152 	bfi	r1, r2, #9, #10
 800ae08:	f363 41de 	bfi	r1, r3, #19, #12
 800ae0c:	f363 71df 	bfi	r1, r3, #31, #1
 800ae10:	aa13      	add	r2, sp, #76	; 0x4c
 800ae12:	481f      	ldr	r0, [pc, #124]	; (800ae90 <dwt_hw_reset+0x190>)
 800ae14:	f006 fc86 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
 800ae18:	f06f 0015 	mvn.w	r0, #21
 800ae1c:	e7ce      	b.n	800adbc <dwt_hw_reset+0xbc>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ae1e:	2301      	movs	r3, #1
 800ae20:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ae24:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	4798      	blx	r3
 800ae2a:	e7a2      	b.n	800ad72 <dwt_hw_reset+0x72>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	fa03 f701 	lsl.w	r7, r3, r1
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	ea23 0307 	bic.w	r3, r3, r7
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	e7bb      	b.n	800adb4 <dwt_hw_reset+0xb4>
        LOG_ERR("Failed to configure GPIO pin %u", cfg->rst_pin);
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ae42:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <dwt_hw_reset+0x18c>)
 800ae44:	930e      	str	r3, [sp, #56]	; 0x38
 800ae46:	7b23      	ldrb	r3, [r4, #12]
 800ae48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	2103      	movs	r1, #3
 800ae50:	f88d 1004 	strb.w	r1, [sp, #4]
 800ae54:	9901      	ldr	r1, [sp, #4]
 800ae56:	910d      	str	r1, [sp, #52]	; 0x34
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f363 0100 	bfi	r1, r3, #0, #1
 800ae5e:	f363 0141 	bfi	r1, r3, #1, #1
 800ae62:	f363 0182 	bfi	r1, r3, #2, #1
 800ae66:	f363 01c5 	bfi	r1, r3, #3, #3
 800ae6a:	f362 1188 	bfi	r1, r2, #6, #3
 800ae6e:	220c      	movs	r2, #12
 800ae70:	f362 2152 	bfi	r1, r2, #9, #10
 800ae74:	f363 41de 	bfi	r1, r3, #19, #12
 800ae78:	f363 71df 	bfi	r1, r3, #31, #1
 800ae7c:	aa0d      	add	r2, sp, #52	; 0x34
 800ae7e:	4804      	ldr	r0, [pc, #16]	; (800ae90 <dwt_hw_reset+0x190>)
 800ae80:	f006 fc50 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
 800ae84:	f06f 0015 	mvn.w	r0, #21
 800ae88:	e798      	b.n	800adbc <dwt_hw_reset+0xbc>
 800ae8a:	bf00      	nop
 800ae8c:	08016700 	.word	0x08016700
 800ae90:	08015030 	.word	0x08015030

0800ae94 <dw1000_init>:

static int dw1000_init(const struct device *dev)
{
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	b0be      	sub	sp, #248	; 0xf8
 800ae9a:	4606      	mov	r6, r0
    struct dw1000_dev_data *ctx = dev->data;
 800ae9c:	6904      	ldr	r4, [r0, #16]
    const struct dw1000_dev_config *cfg = dev->config;
 800ae9e:	6845      	ldr	r5, [r0, #4]

    LOG_INF("Initialize DW1000 Transceiver");
 800aea0:	2301      	movs	r3, #1
 800aea2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800aea6:	4baf      	ldr	r3, [pc, #700]	; (800b164 <dw1000_init+0x2d0>)
 800aea8:	9312      	str	r3, [sp, #72]	; 0x48
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	2202      	movs	r2, #2
 800aeb0:	f88d 2014 	strb.w	r2, [sp, #20]
 800aeb4:	9a05      	ldr	r2, [sp, #20]
 800aeb6:	9211      	str	r2, [sp, #68]	; 0x44
 800aeb8:	4619      	mov	r1, r3
 800aeba:	f363 0100 	bfi	r1, r3, #0, #1
 800aebe:	f363 0141 	bfi	r1, r3, #1, #1
 800aec2:	f363 0182 	bfi	r1, r3, #2, #1
 800aec6:	f363 01c5 	bfi	r1, r3, #3, #3
 800aeca:	2203      	movs	r2, #3
 800aecc:	f362 1188 	bfi	r1, r2, #6, #3
 800aed0:	2208      	movs	r2, #8
 800aed2:	f362 2152 	bfi	r1, r2, #9, #10
 800aed6:	f363 41de 	bfi	r1, r3, #19, #12
 800aeda:	f363 71df 	bfi	r1, r3, #31, #1
 800aede:	aa11      	add	r2, sp, #68	; 0x44
 800aee0:	48a1      	ldr	r0, [pc, #644]	; (800b168 <dw1000_init+0x2d4>)
 800aee2:	f006 fc1f 	bl	8011724 <z_impl_z_log_msg2_static_create>

    /* SPI config */
    ctx->spi_cfg_slow.operation = SPI_WORD_SET(8);
 800aee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeea:	8423      	strh	r3, [r4, #32]
    ctx->spi_cfg_slow.frequency = DWT_SPI_SLOW_FREQ;
 800aeec:	4a9f      	ldr	r2, [pc, #636]	; (800b16c <dw1000_init+0x2d8>)
 800aeee:	61e2      	str	r2, [r4, #28]
    ctx->spi_cfg_slow.slave = cfg->spi_slave;
 800aef0:	f895 2020 	ldrb.w	r2, [r5, #32]
 800aef4:	8462      	strh	r2, [r4, #34]	; 0x22

    ctx->spi_cfg_fast.operation = SPI_WORD_SET(8);
 800aef6:	85a3      	strh	r3, [r4, #44]	; 0x2c
    ctx->spi_cfg_fast.frequency = cfg->spi_freq;
 800aef8:	69eb      	ldr	r3, [r5, #28]
 800aefa:	62a3      	str	r3, [r4, #40]	; 0x28
    ctx->spi_cfg_fast.slave = cfg->spi_slave;
 800aefc:	f895 3020 	ldrb.w	r3, [r5, #32]
 800af00:	85e3      	strh	r3, [r4, #46]	; 0x2e

    ctx->spi = device_get_binding((char *)cfg->spi_port);
 800af02:	6928      	ldr	r0, [r5, #16]
 800af04:	f002 fd16 	bl	800d934 <z_impl_device_get_binding>
 800af08:	60a0      	str	r0, [r4, #8]
    if (!ctx->spi) {
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f000 80fa 	beq.w	800b104 <dw1000_init+0x270>
        return -EINVAL;
    }

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
    ctx->spi_cs.gpio_dev =
		device_get_binding((char *)cfg->spi_cs_port);
 800af10:	69a8      	ldr	r0, [r5, #24]
 800af12:	f002 fd0f 	bl	800d934 <z_impl_device_get_binding>
    ctx->spi_cs.gpio_dev =
 800af16:	60e0      	str	r0, [r4, #12]
	if (!ctx->spi_cs.gpio_dev) {
 800af18:	2800      	cmp	r0, #0
 800af1a:	f000 8100 	beq.w	800b11e <dw1000_init+0x28a>
		LOG_ERR("SPI CS port %s not found", cfg->spi_cs_port);
		return -EINVAL;
	}

	ctx->spi_cs.gpio_pin = cfg->spi_cs_pin;
 800af1e:	7d2b      	ldrb	r3, [r5, #20]
 800af20:	7423      	strb	r3, [r4, #16]
	ctx->spi_cs.gpio_dt_flags = cfg->spi_cs_flags;
 800af22:	7d6b      	ldrb	r3, [r5, #21]
 800af24:	7463      	strb	r3, [r4, #17]
	ctx->spi_cfg_slow.cs = &ctx->spi_cs;
 800af26:	f104 030c 	add.w	r3, r4, #12
 800af2a:	6263      	str	r3, [r4, #36]	; 0x24
	ctx->spi_cfg_fast.cs = &ctx->spi_cs;
 800af2c:	6323      	str	r3, [r4, #48]	; 0x30
#endif

    dwt_set_spi_slow(ctx, DWT_SPI_SLOW_FREQ);
 800af2e:	498f      	ldr	r1, [pc, #572]	; (800b16c <dw1000_init+0x2d8>)
 800af30:	4620      	mov	r0, r4
 800af32:	f008 fa5e 	bl	80133f2 <dwt_set_spi_slow>

    /* Initialize IRQ GPIO */
    ctx->irq_gpio = device_get_binding((char *)cfg->irq_port);
 800af36:	6828      	ldr	r0, [r5, #0]
 800af38:	f002 fcfc 	bl	800d934 <z_impl_device_get_binding>
 800af3c:	6020      	str	r0, [r4, #0]
    if (!ctx->irq_gpio) {
 800af3e:	2800      	cmp	r0, #0
 800af40:	f000 80fa 	beq.w	800b138 <dw1000_init+0x2a4>
        LOG_ERR("GPIO port %s not found", cfg->irq_port);
        return -EINVAL;
    }

    if (gpio_pin_configure(ctx->irq_gpio, cfg->irq_pin,
 800af44:	7929      	ldrb	r1, [r5, #4]
                           GPIO_INPUT | cfg->irq_flags)) {
 800af46:	796b      	ldrb	r3, [r5, #5]
    if (gpio_pin_configure(ctx->irq_gpio, cfg->irq_pin,
 800af48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 800af4c:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
 800af50:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800af52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800af56:	b13a      	cbz	r2, 800af68 <dw1000_init+0xd4>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800af58:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800af5c:	d004      	beq.n	800af68 <dw1000_init+0xd4>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800af5e:	f013 0f01 	tst.w	r3, #1
 800af62:	d001      	beq.n	800af68 <dw1000_init+0xd4>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800af64:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800af68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800af6c:	f013 0f01 	tst.w	r3, #1
 800af70:	f000 80ef 	beq.w	800b152 <dw1000_init+0x2be>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800af74:	2301      	movs	r3, #1
 800af76:	fa03 fe01 	lsl.w	lr, r3, r1
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	ea43 030e 	orr.w	r3, r3, lr
 800af80:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 800af82:	f8dc 3000 	ldr.w	r3, [ip]
 800af86:	4798      	blx	r3
 800af88:	2800      	cmp	r0, #0
 800af8a:	f040 80ff 	bne.w	800b18c <dw1000_init+0x2f8>
        LOG_ERR("Unable to configure GPIO pin %u", cfg->irq_pin);
        return -EINVAL;
    }

    gpio_init_callback(&(ctx->gpio_cb), dwt_gpio_callback,
 800af8e:	f104 0134 	add.w	r1, r4, #52	; 0x34
                       BIT(cfg->irq_pin));
 800af92:	792a      	ldrb	r2, [r5, #4]
 800af94:	2301      	movs	r3, #1
 800af96:	4093      	lsls	r3, r2
	callback->handler = handler;
 800af98:	4a75      	ldr	r2, [pc, #468]	; (800b170 <dw1000_init+0x2dc>)
 800af9a:	63a2      	str	r2, [r4, #56]	; 0x38
	callback->pin_mask = pin_mask;
 800af9c:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (gpio_add_callback(ctx->irq_gpio, &(ctx->gpio_cb))) {
 800af9e:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 800afa0:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8118 	beq.w	800b1da <dw1000_init+0x346>
	return api->manage_callback(port, callback, true);
 800afaa:	2201      	movs	r2, #1
 800afac:	4798      	blx	r3
 800afae:	2800      	cmp	r0, #0
 800afb0:	f040 8116 	bne.w	800b1e0 <dw1000_init+0x34c>
        LOG_ERR("Failed to add IRQ callback");
        return -EINVAL;
    }

    /* Initialize RESET GPIO */
    ctx->rst_gpio = device_get_binding(cfg->rst_port);
 800afb4:	68a8      	ldr	r0, [r5, #8]
 800afb6:	f002 fcbd 	bl	800d934 <z_impl_device_get_binding>
 800afba:	6060      	str	r0, [r4, #4]
    if (ctx->rst_gpio == NULL) {
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f000 8134 	beq.w	800b22a <dw1000_init+0x396>
        LOG_ERR("Could not get GPIO port for RESET");
        return -EIO;
    }

    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800afc2:	7b29      	ldrb	r1, [r5, #12]
                           GPIO_INPUT | cfg->rst_flags)) {
 800afc4:	7b6b      	ldrb	r3, [r5, #13]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800afc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 800afca:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
 800afce:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800afd0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800afd4:	b13a      	cbz	r2, 800afe6 <dw1000_init+0x152>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800afd6:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800afda:	d004      	beq.n	800afe6 <dw1000_init+0x152>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800afdc:	f013 0f01 	tst.w	r3, #1
 800afe0:	d001      	beq.n	800afe6 <dw1000_init+0x152>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800afe2:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800afe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800afea:	f013 0f01 	tst.w	r3, #1
 800afee:	f000 8141 	beq.w	800b274 <dw1000_init+0x3e0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800aff2:	2301      	movs	r3, #1
 800aff4:	fa03 fe01 	lsl.w	lr, r3, r1
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	ea43 030e 	orr.w	r3, r3, lr
 800affe:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 800b000:	f8dc 3000 	ldr.w	r3, [ip]
 800b004:	4798      	blx	r3
 800b006:	4607      	mov	r7, r0
 800b008:	2800      	cmp	r0, #0
 800b00a:	f040 813b 	bne.w	800b284 <dw1000_init+0x3f0>
        LOG_ERR("Unable to configure GPIO pin %u", cfg->rst_pin);
        return -EINVAL;
    }

    LOG_INF("GPIO and SPI configured");
 800b00e:	f04f 0801 	mov.w	r8, #1
 800b012:	f8ad 8018 	strh.w	r8, [sp, #24]
 800b016:	4b57      	ldr	r3, [pc, #348]	; (800b174 <dw1000_init+0x2e0>)
 800b018:	9318      	str	r3, [sp, #96]	; 0x60
 800b01a:	2300      	movs	r3, #0
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	2202      	movs	r2, #2
 800b020:	f88d 2014 	strb.w	r2, [sp, #20]
 800b024:	9a05      	ldr	r2, [sp, #20]
 800b026:	9217      	str	r2, [sp, #92]	; 0x5c
 800b028:	4619      	mov	r1, r3
 800b02a:	f363 0100 	bfi	r1, r3, #0, #1
 800b02e:	f363 0141 	bfi	r1, r3, #1, #1
 800b032:	f363 0182 	bfi	r1, r3, #2, #1
 800b036:	f363 01c5 	bfi	r1, r3, #3, #3
 800b03a:	2203      	movs	r2, #3
 800b03c:	f362 1188 	bfi	r1, r2, #6, #3
 800b040:	2208      	movs	r2, #8
 800b042:	f362 2152 	bfi	r1, r2, #9, #10
 800b046:	f363 41de 	bfi	r1, r3, #19, #12
 800b04a:	f363 71df 	bfi	r1, r3, #31, #1
 800b04e:	aa17      	add	r2, sp, #92	; 0x5c
 800b050:	4845      	ldr	r0, [pc, #276]	; (800b168 <dw1000_init+0x2d4>)
 800b052:	f006 fb67 	bl	8011724 <z_impl_z_log_msg2_static_create>
#endif
#if defined(CONFIG_DW1000_STARTUP_READ_OTP_TMP)
    init_cfg |= DWT_READ_OTP_TMP;
#endif

    dwt_hw_reset(dev);
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff fe52 	bl	800ad00 <dwt_hw_reset>

    if (dwt_initialise(init_cfg) == DWT_ERROR) {
 800b05c:	4640      	mov	r0, r8
 800b05e:	f7ff fce3 	bl	800aa28 <dwt_initialise>
 800b062:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b066:	f000 8134 	beq.w	800b2d2 <dw1000_init+0x43e>
        LOG_ERR("Failed to initialize DW1000");
        return -EIO;
    }

    dwt_set_spi_fast(ctx);
 800b06a:	4620      	mov	r0, r4
 800b06c:	f008 f9c6 	bl	80133fc <dwt_set_spi_fast>
    dwt_configure(&ctx->phy_cfg);
 800b070:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b074:	f7ff fa68 	bl	800a548 <dwt_configure>
    dwt_setrxantennadelay(cfg->rx_ant_delay);
 800b078:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b07a:	f008 f868 	bl	801314e <dwt_setrxantennadelay>
    dwt_settxantennadelay(cfg->tx_ant_delay);
 800b07e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800b080:	f008 f86d 	bl	801315e <dwt_settxantennadelay>

    k_work_init(&ctx->irq_cb_work, dwt_irq_work_handler);
 800b084:	493c      	ldr	r1, [pc, #240]	; (800b178 <dw1000_init+0x2e4>)
 800b086:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800b08a:	f008 fdcd 	bl	8013c28 <k_work_init>
    struct dw1000_dev_data *ctx = dev->data;
 800b08e:	6932      	ldr	r2, [r6, #16]
    const struct dw1000_dev_config *cfg = dev->config;
 800b090:	6873      	ldr	r3, [r6, #4]
    gpio_pin_interrupt_configure(ctx->irq_gpio, cfg->irq_pin, flags);
 800b092:	6810      	ldr	r0, [r2, #0]
 800b094:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
 800b096:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
 800b098:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	2301      	movs	r3, #1
 800b09e:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800b0a0:	421a      	tst	r2, r3
 800b0a2:	f040 813a 	bne.w	800b31a <dw1000_init+0x486>
 800b0a6:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800b0aa:	69a4      	ldr	r4, [r4, #24]
 800b0ac:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 800b0b0:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 800b0b4:	47a0      	blx	r4

    dwt_setup_int(dev, true);

    LOG_INF("DW1000 device initialized and configured");
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b0bc:	4b2f      	ldr	r3, [pc, #188]	; (800b17c <dw1000_init+0x2e8>)
 800b0be:	931e      	str	r3, [sp, #120]	; 0x78
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	f88d 2014 	strb.w	r2, [sp, #20]
 800b0ca:	9a05      	ldr	r2, [sp, #20]
 800b0cc:	921d      	str	r2, [sp, #116]	; 0x74
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	f363 0100 	bfi	r1, r3, #0, #1
 800b0d4:	f363 0141 	bfi	r1, r3, #1, #1
 800b0d8:	f363 0182 	bfi	r1, r3, #2, #1
 800b0dc:	f363 01c5 	bfi	r1, r3, #3, #3
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	f362 1188 	bfi	r1, r2, #6, #3
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	f362 2152 	bfi	r1, r2, #9, #10
 800b0ec:	f363 41de 	bfi	r1, r3, #19, #12
 800b0f0:	f363 71df 	bfi	r1, r3, #31, #1
 800b0f4:	aa1d      	add	r2, sp, #116	; 0x74
 800b0f6:	481c      	ldr	r0, [pc, #112]	; (800b168 <dw1000_init+0x2d4>)
 800b0f8:	f006 fb14 	bl	8011724 <z_impl_z_log_msg2_static_create>

    return 0;
}
 800b0fc:	4638      	mov	r0, r7
 800b0fe:	b03e      	add	sp, #248	; 0xf8
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LOG_ERR("SPI master port %s not found", cfg->spi_port);
 800b104:	692b      	ldr	r3, [r5, #16]
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	4b1d      	ldr	r3, [pc, #116]	; (800b180 <dw1000_init+0x2ec>)
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	9000      	str	r0, [sp, #0]
 800b10e:	4603      	mov	r3, r0
 800b110:	2201      	movs	r2, #1
 800b112:	4915      	ldr	r1, [pc, #84]	; (800b168 <dw1000_init+0x2d4>)
 800b114:	f008 f976 	bl	8013404 <z_log_msg2_runtime_create>
        return -EINVAL;
 800b118:	f06f 0715 	mvn.w	r7, #21
 800b11c:	e7ee      	b.n	800b0fc <dw1000_init+0x268>
		LOG_ERR("SPI CS port %s not found", cfg->spi_cs_port);
 800b11e:	69ab      	ldr	r3, [r5, #24]
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	4b18      	ldr	r3, [pc, #96]	; (800b184 <dw1000_init+0x2f0>)
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	9000      	str	r0, [sp, #0]
 800b128:	4603      	mov	r3, r0
 800b12a:	2201      	movs	r2, #1
 800b12c:	490e      	ldr	r1, [pc, #56]	; (800b168 <dw1000_init+0x2d4>)
 800b12e:	f008 f969 	bl	8013404 <z_log_msg2_runtime_create>
		return -EINVAL;
 800b132:	f06f 0715 	mvn.w	r7, #21
 800b136:	e7e1      	b.n	800b0fc <dw1000_init+0x268>
        LOG_ERR("GPIO port %s not found", cfg->irq_port);
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	4b12      	ldr	r3, [pc, #72]	; (800b188 <dw1000_init+0x2f4>)
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	9000      	str	r0, [sp, #0]
 800b142:	4603      	mov	r3, r0
 800b144:	2201      	movs	r2, #1
 800b146:	4908      	ldr	r1, [pc, #32]	; (800b168 <dw1000_init+0x2d4>)
 800b148:	f008 f95c 	bl	8013404 <z_log_msg2_runtime_create>
        return -EINVAL;
 800b14c:	f06f 0715 	mvn.w	r7, #21
 800b150:	e7d4      	b.n	800b0fc <dw1000_init+0x268>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800b152:	2301      	movs	r3, #1
 800b154:	fa03 fe01 	lsl.w	lr, r3, r1
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	ea23 030e 	bic.w	r3, r3, lr
 800b15e:	603b      	str	r3, [r7, #0]
 800b160:	e70f      	b.n	800af82 <dw1000_init+0xee>
 800b162:	bf00      	nop
 800b164:	08016720 	.word	0x08016720
 800b168:	08015030 	.word	0x08015030
 800b16c:	001e8480 	.word	0x001e8480
 800b170:	08013427 	.word	0x08013427
 800b174:	080167f4 	.word	0x080167f4
 800b178:	0801341f 	.word	0x0801341f
 800b17c:	08016828 	.word	0x08016828
 800b180:	08016740 	.word	0x08016740
 800b184:	08016760 	.word	0x08016760
 800b188:	0801677c 	.word	0x0801677c
        LOG_ERR("Unable to configure GPIO pin %u", cfg->irq_pin);
 800b18c:	2201      	movs	r2, #1
 800b18e:	f8ad 2018 	strh.w	r2, [sp, #24]
 800b192:	4b63      	ldr	r3, [pc, #396]	; (800b320 <dw1000_init+0x48c>)
 800b194:	933c      	str	r3, [sp, #240]	; 0xf0
 800b196:	792b      	ldrb	r3, [r5, #4]
 800b198:	933d      	str	r3, [sp, #244]	; 0xf4
 800b19a:	2300      	movs	r3, #0
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	2103      	movs	r1, #3
 800b1a0:	f88d 1014 	strb.w	r1, [sp, #20]
 800b1a4:	9905      	ldr	r1, [sp, #20]
 800b1a6:	913b      	str	r1, [sp, #236]	; 0xec
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	f363 0100 	bfi	r1, r3, #0, #1
 800b1ae:	f363 0141 	bfi	r1, r3, #1, #1
 800b1b2:	f363 0182 	bfi	r1, r3, #2, #1
 800b1b6:	f363 01c5 	bfi	r1, r3, #3, #3
 800b1ba:	f362 1188 	bfi	r1, r2, #6, #3
 800b1be:	220c      	movs	r2, #12
 800b1c0:	f362 2152 	bfi	r1, r2, #9, #10
 800b1c4:	f363 41de 	bfi	r1, r3, #19, #12
 800b1c8:	f363 71df 	bfi	r1, r3, #31, #1
 800b1cc:	aa3b      	add	r2, sp, #236	; 0xec
 800b1ce:	4855      	ldr	r0, [pc, #340]	; (800b324 <dw1000_init+0x490>)
 800b1d0:	f006 faa8 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
 800b1d4:	f06f 0715 	mvn.w	r7, #21
 800b1d8:	e790      	b.n	800b0fc <dw1000_init+0x268>
		return -ENOTSUP;
 800b1da:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800b1de:	e6e6      	b.n	800afae <dw1000_init+0x11a>
        LOG_ERR("Failed to add IRQ callback");
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 800b1e6:	4b50      	ldr	r3, [pc, #320]	; (800b328 <dw1000_init+0x494>)
 800b1e8:	9336      	str	r3, [sp, #216]	; 0xd8
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9305      	str	r3, [sp, #20]
 800b1ee:	2102      	movs	r1, #2
 800b1f0:	f88d 1014 	strb.w	r1, [sp, #20]
 800b1f4:	9905      	ldr	r1, [sp, #20]
 800b1f6:	9135      	str	r1, [sp, #212]	; 0xd4
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	f363 0100 	bfi	r1, r3, #0, #1
 800b1fe:	f363 0141 	bfi	r1, r3, #1, #1
 800b202:	f363 0182 	bfi	r1, r3, #2, #1
 800b206:	f363 01c5 	bfi	r1, r3, #3, #3
 800b20a:	f362 1188 	bfi	r1, r2, #6, #3
 800b20e:	2208      	movs	r2, #8
 800b210:	f362 2152 	bfi	r1, r2, #9, #10
 800b214:	f363 41de 	bfi	r1, r3, #19, #12
 800b218:	f363 71df 	bfi	r1, r3, #31, #1
 800b21c:	aa35      	add	r2, sp, #212	; 0xd4
 800b21e:	4841      	ldr	r0, [pc, #260]	; (800b324 <dw1000_init+0x490>)
 800b220:	f006 fa80 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
 800b224:	f06f 0715 	mvn.w	r7, #21
 800b228:	e768      	b.n	800b0fc <dw1000_init+0x268>
        LOG_ERR("Could not get GPIO port for RESET");
 800b22a:	2201      	movs	r2, #1
 800b22c:	f8ad 2018 	strh.w	r2, [sp, #24]
 800b230:	4b3e      	ldr	r3, [pc, #248]	; (800b32c <dw1000_init+0x498>)
 800b232:	9330      	str	r3, [sp, #192]	; 0xc0
 800b234:	2300      	movs	r3, #0
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	2102      	movs	r1, #2
 800b23a:	f88d 1014 	strb.w	r1, [sp, #20]
 800b23e:	9905      	ldr	r1, [sp, #20]
 800b240:	912f      	str	r1, [sp, #188]	; 0xbc
 800b242:	4619      	mov	r1, r3
 800b244:	f363 0100 	bfi	r1, r3, #0, #1
 800b248:	f363 0141 	bfi	r1, r3, #1, #1
 800b24c:	f363 0182 	bfi	r1, r3, #2, #1
 800b250:	f363 01c5 	bfi	r1, r3, #3, #3
 800b254:	f362 1188 	bfi	r1, r2, #6, #3
 800b258:	2208      	movs	r2, #8
 800b25a:	f362 2152 	bfi	r1, r2, #9, #10
 800b25e:	f363 41de 	bfi	r1, r3, #19, #12
 800b262:	f363 71df 	bfi	r1, r3, #31, #1
 800b266:	aa2f      	add	r2, sp, #188	; 0xbc
 800b268:	482e      	ldr	r0, [pc, #184]	; (800b324 <dw1000_init+0x490>)
 800b26a:	f006 fa5b 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800b26e:	f06f 0704 	mvn.w	r7, #4
 800b272:	e743      	b.n	800b0fc <dw1000_init+0x268>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800b274:	2301      	movs	r3, #1
 800b276:	fa03 fe01 	lsl.w	lr, r3, r1
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	ea23 030e 	bic.w	r3, r3, lr
 800b280:	603b      	str	r3, [r7, #0]
 800b282:	e6bd      	b.n	800b000 <dw1000_init+0x16c>
        LOG_ERR("Unable to configure GPIO pin %u", cfg->rst_pin);
 800b284:	2201      	movs	r2, #1
 800b286:	f8ad 2018 	strh.w	r2, [sp, #24]
 800b28a:	4b25      	ldr	r3, [pc, #148]	; (800b320 <dw1000_init+0x48c>)
 800b28c:	932a      	str	r3, [sp, #168]	; 0xa8
 800b28e:	7b2b      	ldrb	r3, [r5, #12]
 800b290:	932b      	str	r3, [sp, #172]	; 0xac
 800b292:	2300      	movs	r3, #0
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	2103      	movs	r1, #3
 800b298:	f88d 1014 	strb.w	r1, [sp, #20]
 800b29c:	9905      	ldr	r1, [sp, #20]
 800b29e:	9129      	str	r1, [sp, #164]	; 0xa4
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	f363 0100 	bfi	r1, r3, #0, #1
 800b2a6:	f363 0141 	bfi	r1, r3, #1, #1
 800b2aa:	f363 0182 	bfi	r1, r3, #2, #1
 800b2ae:	f363 01c5 	bfi	r1, r3, #3, #3
 800b2b2:	f362 1188 	bfi	r1, r2, #6, #3
 800b2b6:	220c      	movs	r2, #12
 800b2b8:	f362 2152 	bfi	r1, r2, #9, #10
 800b2bc:	f363 41de 	bfi	r1, r3, #19, #12
 800b2c0:	f363 71df 	bfi	r1, r3, #31, #1
 800b2c4:	aa29      	add	r2, sp, #164	; 0xa4
 800b2c6:	4817      	ldr	r0, [pc, #92]	; (800b324 <dw1000_init+0x490>)
 800b2c8:	f006 fa2c 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
 800b2cc:	f06f 0715 	mvn.w	r7, #21
 800b2d0:	e714      	b.n	800b0fc <dw1000_init+0x268>
        LOG_ERR("Failed to initialize DW1000");
 800b2d2:	f8ad 8018 	strh.w	r8, [sp, #24]
 800b2d6:	4b16      	ldr	r3, [pc, #88]	; (800b330 <dw1000_init+0x49c>)
 800b2d8:	9324      	str	r3, [sp, #144]	; 0x90
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	2102      	movs	r1, #2
 800b2e0:	f88d 1014 	strb.w	r1, [sp, #20]
 800b2e4:	9905      	ldr	r1, [sp, #20]
 800b2e6:	9123      	str	r1, [sp, #140]	; 0x8c
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f363 0100 	bfi	r1, r3, #0, #1
 800b2ee:	f363 0141 	bfi	r1, r3, #1, #1
 800b2f2:	f363 0182 	bfi	r1, r3, #2, #1
 800b2f6:	f363 01c5 	bfi	r1, r3, #3, #3
 800b2fa:	f368 1188 	bfi	r1, r8, #6, #3
 800b2fe:	2208      	movs	r2, #8
 800b300:	f362 2152 	bfi	r1, r2, #9, #10
 800b304:	f363 41de 	bfi	r1, r3, #19, #12
 800b308:	f363 71df 	bfi	r1, r3, #31, #1
 800b30c:	aa23      	add	r2, sp, #140	; 0x8c
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <dw1000_init+0x490>)
 800b310:	f006 fa08 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800b314:	f06f 0704 	mvn.w	r7, #4
 800b318:	e6f0      	b.n	800b0fc <dw1000_init+0x268>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 800b31a:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 800b31e:	e6c4      	b.n	800b0aa <dw1000_init+0x216>
 800b320:	08016794 	.word	0x08016794
 800b324:	08015030 	.word	0x08015030
 800b328:	080167b4 	.word	0x080167b4
 800b32c:	080167d0 	.word	0x080167d0
 800b330:	0801680c 	.word	0x0801680c

0800b334 <writetospi>:
               uint32 bodyLength, const uint8 * bodyBuffer) {
 800b334:	b500      	push	{lr}
 800b336:	b083      	sub	sp, #12
    return dwt_spi_write(ctx, headerLength, headerBuffer,
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	4613      	mov	r3, r2
 800b33c:	460a      	mov	r2, r1
 800b33e:	4601      	mov	r1, r0
 800b340:	4802      	ldr	r0, [pc, #8]	; (800b34c <writetospi+0x18>)
 800b342:	f7ff fc55 	bl	800abf0 <dwt_spi_write>
}
 800b346:	b003      	add	sp, #12
 800b348:	f85d fb04 	ldr.w	pc, [sp], #4
 800b34c:	20000304 	.word	0x20000304

0800b350 <readfromspi>:
                uint32 readLength, uint8 * readBuffer) {
 800b350:	b500      	push	{lr}
 800b352:	b083      	sub	sp, #12
    return dwt_spi_read(ctx, headerLength, headerBuffer,
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	4613      	mov	r3, r2
 800b358:	460a      	mov	r2, r1
 800b35a:	4601      	mov	r1, r0
 800b35c:	4802      	ldr	r0, [pc, #8]	; (800b368 <readfromspi+0x18>)
 800b35e:	f7ff fc87 	bl	800ac70 <dwt_spi_read>
}
 800b362:	b003      	add	sp, #12
 800b364:	f85d fb04 	ldr.w	pc, [sp], #4
 800b368:	20000304 	.word	0x20000304

0800b36c <ws2812_strip_update_channels>:
                                        size_t num_channels) {
 800b36c:	b500      	push	{lr}
 800b36e:	b091      	sub	sp, #68	; 0x44
    LOG_ERR("update_channels not implemented");
 800b370:	2201      	movs	r2, #1
 800b372:	f8ad 2008 	strh.w	r2, [sp, #8]
 800b376:	4b12      	ldr	r3, [pc, #72]	; (800b3c0 <ws2812_strip_update_channels+0x54>)
 800b378:	930e      	str	r3, [sp, #56]	; 0x38
 800b37a:	2300      	movs	r3, #0
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	2102      	movs	r1, #2
 800b380:	f88d 1004 	strb.w	r1, [sp, #4]
 800b384:	9901      	ldr	r1, [sp, #4]
 800b386:	910d      	str	r1, [sp, #52]	; 0x34
 800b388:	4619      	mov	r1, r3
 800b38a:	f363 0100 	bfi	r1, r3, #0, #1
 800b38e:	f363 0141 	bfi	r1, r3, #1, #1
 800b392:	f363 0182 	bfi	r1, r3, #2, #1
 800b396:	f363 01c5 	bfi	r1, r3, #3, #3
 800b39a:	f362 1188 	bfi	r1, r2, #6, #3
 800b39e:	2208      	movs	r2, #8
 800b3a0:	f362 2152 	bfi	r1, r2, #9, #10
 800b3a4:	f363 41de 	bfi	r1, r3, #19, #12
 800b3a8:	f363 71df 	bfi	r1, r3, #31, #1
 800b3ac:	aa0d      	add	r2, sp, #52	; 0x34
 800b3ae:	4805      	ldr	r0, [pc, #20]	; (800b3c4 <ws2812_strip_update_channels+0x58>)
 800b3b0:	f006 f9b8 	bl	8011724 <z_impl_z_log_msg2_static_create>
}
 800b3b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800b3b8:	b011      	add	sp, #68	; 0x44
 800b3ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3be:	bf00      	nop
 800b3c0:	0801688c 	.word	0x0801688c
 800b3c4:	08015088 	.word	0x08015088

0800b3c8 <ws2812_pwm_write>:
static int ws2812_pwm_write(const struct device *dev) {
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	b09b      	sub	sp, #108	; 0x6c
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800b3ce:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 800b3d0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
    TIM_TypeDef *tim = pwm_cfg->timer;
 800b3d8:	681d      	ldr	r5, [r3, #0]
    uint8_t *buf = cfg->px_buf;
 800b3da:	f8d4 9010 	ldr.w	r9, [r4, #16]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	4a6c      	ldr	r2, [pc, #432]	; (800b594 <ws2812_pwm_write+0x1cc>)
 800b3e4:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
    LL_TIM_OC_StructInit(&oc_init);
 800b3e8:	a80c      	add	r0, sp, #48	; 0x30
 800b3ea:	f007 fda3 	bl	8012f34 <LL_TIM_OC_StructInit>
    oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800b3ee:	2360      	movs	r3, #96	; 0x60
 800b3f0:	930c      	str	r3, [sp, #48]	; 0x30
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	930d      	str	r3, [sp, #52]	; 0x34
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 800b3f6:	7b20      	ldrb	r0, [r4, #12]
 800b3f8:	f008 f876 	bl	80134e8 <get_polarity>
 800b3fc:	9010      	str	r0, [sp, #64]	; 0x40
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 800b3fe:	aa0c      	add	r2, sp, #48	; 0x30
 800b400:	4659      	mov	r1, fp
 800b402:	4628      	mov	r0, r5
 800b404:	f007 fda0 	bl	8012f48 <LL_TIM_OC_Init>
 800b408:	bb38      	cbnz	r0, 800b45a <ws2812_pwm_write+0x92>
 800b40a:	4603      	mov	r3, r0
	__asm__ volatile(
 800b40c:	f04f 0210 	mov.w	r2, #16
 800b410:	f3ef 8111 	mrs	r1, BASEPRI
 800b414:	f382 8812 	msr	BASEPRI_MAX, r2
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	9101      	str	r1, [sp, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800b41e:	682a      	ldr	r2, [r5, #0]
 800b420:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b424:	602a      	str	r2, [r5, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b426:	f1bb 0f01 	cmp.w	fp, #1
 800b42a:	d03e      	beq.n	800b4aa <ws2812_pwm_write+0xe2>
 800b42c:	f1bb 0f04 	cmp.w	fp, #4
 800b430:	d03a      	beq.n	800b4a8 <ws2812_pwm_write+0xe0>
 800b432:	f1bb 0f10 	cmp.w	fp, #16
 800b436:	d05a      	beq.n	800b4ee <ws2812_pwm_write+0x126>
 800b438:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800b43c:	d059      	beq.n	800b4f2 <ws2812_pwm_write+0x12a>
 800b43e:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
 800b442:	d058      	beq.n	800b4f6 <ws2812_pwm_write+0x12e>
 800b444:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 800b448:	d057      	beq.n	800b4fa <ws2812_pwm_write+0x132>
 800b44a:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
 800b44e:	d056      	beq.n	800b4fe <ws2812_pwm_write+0x136>
 800b450:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800b454:	d026      	beq.n	800b4a4 <ws2812_pwm_write+0xdc>
 800b456:	2308      	movs	r3, #8
 800b458:	e027      	b.n	800b4aa <ws2812_pwm_write+0xe2>
        LOG_ERR("Could not initialize timer channel output");
 800b45a:	2201      	movs	r2, #1
 800b45c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800b460:	4b4d      	ldr	r3, [pc, #308]	; (800b598 <ws2812_pwm_write+0x1d0>)
 800b462:	9318      	str	r3, [sp, #96]	; 0x60
 800b464:	2300      	movs	r3, #0
 800b466:	9303      	str	r3, [sp, #12]
 800b468:	2102      	movs	r1, #2
 800b46a:	f88d 100c 	strb.w	r1, [sp, #12]
 800b46e:	9903      	ldr	r1, [sp, #12]
 800b470:	9117      	str	r1, [sp, #92]	; 0x5c
 800b472:	4619      	mov	r1, r3
 800b474:	f363 0100 	bfi	r1, r3, #0, #1
 800b478:	f363 0141 	bfi	r1, r3, #1, #1
 800b47c:	f363 0182 	bfi	r1, r3, #2, #1
 800b480:	f363 01c5 	bfi	r1, r3, #3, #3
 800b484:	f362 1188 	bfi	r1, r2, #6, #3
 800b488:	2208      	movs	r2, #8
 800b48a:	f362 2152 	bfi	r1, r2, #9, #10
 800b48e:	f363 41de 	bfi	r1, r3, #19, #12
 800b492:	f363 71df 	bfi	r1, r3, #31, #1
 800b496:	aa17      	add	r2, sp, #92	; 0x5c
 800b498:	4840      	ldr	r0, [pc, #256]	; (800b59c <ws2812_pwm_write+0x1d4>)
 800b49a:	f006 f943 	bl	8011724 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800b49e:	f06f 0004 	mvn.w	r0, #4
 800b4a2:	e073      	b.n	800b58c <ws2812_pwm_write+0x1c4>
 800b4a4:	2307      	movs	r3, #7
 800b4a6:	e000      	b.n	800b4aa <ws2812_pwm_write+0xe2>
 800b4a8:	2301      	movs	r3, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800b4aa:	f105 0218 	add.w	r2, r5, #24
 800b4ae:	493c      	ldr	r1, [pc, #240]	; (800b5a0 <ws2812_pwm_write+0x1d8>)
 800b4b0:	5cc8      	ldrb	r0, [r1, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800b4b2:	5811      	ldr	r1, [r2, r0]
 800b4b4:	4e3b      	ldr	r6, [pc, #236]	; (800b5a4 <ws2812_pwm_write+0x1dc>)
 800b4b6:	5cf6      	ldrb	r6, [r6, r3]
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	40b3      	lsls	r3, r6
 800b4bc:	430b      	orrs	r3, r1
 800b4be:	5013      	str	r3, [r2, r0]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 800b4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4c4:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800b4c6:	62eb      	str	r3, [r5, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b4c8:	696b      	ldr	r3, [r5, #20]
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	616b      	str	r3, [r5, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 800b4d0:	6862      	ldr	r2, [r4, #4]
 800b4d2:	4b35      	ldr	r3, [pc, #212]	; (800b5a8 <ws2812_pwm_write+0x1e0>)
 800b4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d8:	4628      	mov	r0, r5
 800b4da:	4798      	blx	r3
    clear_timer_flag[cfg->pwm.channel](tim);
 800b4dc:	6862      	ldr	r2, [r4, #4]
 800b4de:	4b33      	ldr	r3, [pc, #204]	; (800b5ac <ws2812_pwm_write+0x1e4>)
 800b4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	4798      	blx	r3
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	e02d      	b.n	800b54a <ws2812_pwm_write+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	e7db      	b.n	800b4aa <ws2812_pwm_write+0xe2>
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e7d9      	b.n	800b4aa <ws2812_pwm_write+0xe2>
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	e7d7      	b.n	800b4aa <ws2812_pwm_write+0xe2>
 800b4fa:	2305      	movs	r3, #5
 800b4fc:	e7d5      	b.n	800b4aa <ws2812_pwm_write+0xe2>
 800b4fe:	2306      	movs	r3, #6
 800b500:	e7d3      	b.n	800b4aa <ws2812_pwm_write+0xe2>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800b502:	f8d8 1008 	ldr.w	r1, [r8, #8]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800b506:	6863      	ldr	r3, [r4, #4]
 800b508:	3b01      	subs	r3, #1
 800b50a:	4a29      	ldr	r2, [pc, #164]	; (800b5b0 <ws2812_pwm_write+0x1e8>)
 800b50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b510:	4628      	mov	r0, r5
 800b512:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800b514:	6862      	ldr	r2, [r4, #4]
 800b516:	4b27      	ldr	r3, [pc, #156]	; (800b5b4 <ws2812_pwm_write+0x1ec>)
 800b518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51c:	4628      	mov	r0, r5
 800b51e:	4798      	blx	r3
 800b520:	2800      	cmp	r0, #0
 800b522:	d0f7      	beq.n	800b514 <ws2812_pwm_write+0x14c>
            clear_timer_flag[cfg->pwm.channel](tim);
 800b524:	6862      	ldr	r2, [r4, #4]
 800b526:	4b21      	ldr	r3, [pc, #132]	; (800b5ac <ws2812_pwm_write+0x1e4>)
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	4628      	mov	r0, r5
 800b52e:	4798      	blx	r3
            tmp <<= 1;
 800b530:	0076      	lsls	r6, r6, #1
 800b532:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 800b534:	3701      	adds	r7, #1
 800b536:	2f07      	cmp	r7, #7
 800b538:	dc05      	bgt.n	800b546 <ws2812_pwm_write+0x17e>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800b53a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800b53e:	d1e0      	bne.n	800b502 <ws2812_pwm_write+0x13a>
 800b540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b544:	e7df      	b.n	800b506 <ws2812_pwm_write+0x13e>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800b546:	f10a 0a01 	add.w	sl, sl, #1
 800b54a:	6963      	ldr	r3, [r4, #20]
 800b54c:	459a      	cmp	sl, r3
 800b54e:	d203      	bcs.n	800b558 <ws2812_pwm_write+0x190>
        uint8_t tmp = *buf++;
 800b550:	f819 6b01 	ldrb.w	r6, [r9], #1
        for(int j = 0; j < 8; j++) {
 800b554:	2700      	movs	r7, #0
 800b556:	e7ee      	b.n	800b536 <ws2812_pwm_write+0x16e>
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	4a14      	ldr	r2, [pc, #80]	; (800b5b0 <ws2812_pwm_write+0x1e8>)
 800b55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b562:	2100      	movs	r1, #0
 800b564:	4628      	mov	r0, r5
 800b566:	4798      	blx	r3
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800b568:	6862      	ldr	r2, [r4, #4]
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <ws2812_pwm_write+0x1ec>)
 800b56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b570:	4628      	mov	r0, r5
 800b572:	4798      	blx	r3
 800b574:	2800      	cmp	r0, #0
 800b576:	d0f7      	beq.n	800b568 <ws2812_pwm_write+0x1a0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800b578:	6a2b      	ldr	r3, [r5, #32]
 800b57a:	ea23 030b 	bic.w	r3, r3, fp
 800b57e:	622b      	str	r3, [r5, #32]
	__asm__ volatile(
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
    return 0;
 800b58a:	2000      	movs	r0, #0
}
 800b58c:	b01b      	add	sp, #108	; 0x6c
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b592:	bf00      	nop
 800b594:	08016940 	.word	0x08016940
 800b598:	08015e0c 	.word	0x08015e0c
 800b59c:	08015088 	.word	0x08015088
 800b5a0:	08016928 	.word	0x08016928
 800b5a4:	08016934 	.word	0x08016934
 800b5a8:	08016970 	.word	0x08016970
 800b5ac:	08016958 	.word	0x08016958
 800b5b0:	080169a0 	.word	0x080169a0
 800b5b4:	08016988 	.word	0x08016988

0800b5b8 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800b5ba:	6844      	ldr	r4, [r0, #4]
    uint8_t *px_buf = cfg->px_buf;
 800b5bc:	6925      	ldr	r5, [r4, #16]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 800b5be:	7e23      	ldrb	r3, [r4, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	fba2 3703 	umull	r3, r7, r2, r3
 800b5c6:	b92f      	cbnz	r7, 800b5d4 <ws2812_strip_update_rgb+0x1c>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800b5c8:	b936      	cbnz	r6, 800b5d8 <ws2812_strip_update_rgb+0x20>
 800b5ca:	6966      	ldr	r6, [r4, #20]
 800b5cc:	42b3      	cmp	r3, r6
 800b5ce:	d90b      	bls.n	800b5e8 <ws2812_strip_update_rgb+0x30>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e002      	b.n	800b5da <ws2812_strip_update_rgb+0x22>
 800b5d4:	2601      	movs	r6, #1
 800b5d6:	e7f7      	b.n	800b5c8 <ws2812_strip_update_rgb+0x10>
 800b5d8:	2300      	movs	r3, #0
    if (!num_pixels_ok(cfg, num_pixels)) {
 800b5da:	b13b      	cbz	r3, 800b5ec <ws2812_strip_update_rgb+0x34>
    for (i = 0; i < num_pixels; i++) {
 800b5dc:	f04f 0e00 	mov.w	lr, #0
 800b5e0:	4596      	cmp	lr, r2
 800b5e2:	d22e      	bcs.n	800b642 <ws2812_strip_update_rgb+0x8a>
        for (j = 0; j < cfg->num_colors; j++) {
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e009      	b.n	800b5fc <ws2812_strip_update_rgb+0x44>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e7f6      	b.n	800b5da <ws2812_strip_update_rgb+0x22>
        return -ENOMEM;
 800b5ec:	f06f 050b 	mvn.w	r5, #11
 800b5f0:	e02d      	b.n	800b64e <ws2812_strip_update_rgb+0x96>
                    *px_buf = 0;
 800b5f2:	2600      	movs	r6, #0
 800b5f4:	702e      	strb	r6, [r5, #0]
            px_buf++;
 800b5f6:	3501      	adds	r5, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	f894 c018 	ldrb.w	ip, [r4, #24]
 800b600:	459c      	cmp	ip, r3
 800b602:	d91a      	bls.n	800b63a <ws2812_strip_update_rgb+0x82>
            switch (cfg->color_mapping[j]) {
 800b604:	69e6      	ldr	r6, [r4, #28]
 800b606:	f816 c003 	ldrb.w	ip, [r6, r3]
 800b60a:	f1bc 0f03 	cmp.w	ip, #3
 800b60e:	d820      	bhi.n	800b652 <ws2812_strip_update_rgb+0x9a>
 800b610:	a601      	add	r6, pc, #4	; (adr r6, 800b618 <ws2812_strip_update_rgb+0x60>)
 800b612:	f856 f02c 	ldr.w	pc, [r6, ip, lsl #2]
 800b616:	bf00      	nop
 800b618:	0800b5f3 	.word	0x0800b5f3
 800b61c:	0800b629 	.word	0x0800b629
 800b620:	0800b62f 	.word	0x0800b62f
 800b624:	0800b635 	.word	0x0800b635
                    *px_buf = pixels->r;
 800b628:	784e      	ldrb	r6, [r1, #1]
 800b62a:	702e      	strb	r6, [r5, #0]
                    break;
 800b62c:	e7e3      	b.n	800b5f6 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->g;
 800b62e:	788e      	ldrb	r6, [r1, #2]
 800b630:	702e      	strb	r6, [r5, #0]
                    break;
 800b632:	e7e0      	b.n	800b5f6 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->b;
 800b634:	78ce      	ldrb	r6, [r1, #3]
 800b636:	702e      	strb	r6, [r5, #0]
                    break;
 800b638:	e7dd      	b.n	800b5f6 <ws2812_strip_update_rgb+0x3e>
        pixels++;
 800b63a:	3104      	adds	r1, #4
    for (i = 0; i < num_pixels; i++) {
 800b63c:	f10e 0e01 	add.w	lr, lr, #1
 800b640:	e7ce      	b.n	800b5e0 <ws2812_strip_update_rgb+0x28>
    rc = ws2812_pwm_write(dev);
 800b642:	f7ff fec1 	bl	800b3c8 <ws2812_pwm_write>
 800b646:	4605      	mov	r5, r0
    ws2812_reset_delay(cfg->reset_delay);
 800b648:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	return z_impl_k_usleep(us);
 800b64a:	f008 fca6 	bl	8013f9a <z_impl_k_usleep>
}
 800b64e:	4628      	mov	r0, r5
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (cfg->color_mapping[j]) {
 800b652:	f06f 0515 	mvn.w	r5, #21
 800b656:	e7fa      	b.n	800b64e <ws2812_strip_update_rgb+0x96>

0800b658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	4605      	mov	r5, r0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800b65e:	460e      	mov	r6, r1
 800b660:	b161      	cbz	r1, 800b67c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 800b662:	1b94      	subs	r4, r2, r6
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800b664:	9401      	str	r4, [sp, #4]

	if (__dnew > size_type(_S_local_capacity))
 800b666:	2c0f      	cmp	r4, #15
 800b668:	d80d      	bhi.n	800b686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
 800b66a:	6828      	ldr	r0, [r5, #0]
      // When __n = 1 way faster than the general multichar
      // traits_type::copy/move/assign.
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
	if (__n == 1)
 800b66c:	2c01      	cmp	r4, #1
 800b66e:	d013      	beq.n	800b698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x40>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 800b670:	b1a4      	cbz	r4, 800b69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800b672:	4622      	mov	r2, r4
 800b674:	4631      	mov	r1, r6
 800b676:	f008 fef5 	bl	8014464 <memcpy>
 800b67a:	e00f      	b.n	800b69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800b67c:	4291      	cmp	r1, r2
 800b67e:	d0f0      	beq.n	800b662 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xa>
	  std::__throw_logic_error(__N("basic_string::"
 800b680:	480a      	ldr	r0, [pc, #40]	; (800b6ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x54>)
 800b682:	f008 fed8 	bl	8014436 <_ZSt19__throw_logic_errorPKc>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800b686:	2200      	movs	r2, #0
 800b688:	a901      	add	r1, sp, #4
 800b68a:	4628      	mov	r0, r5
 800b68c:	f004 f876 	bl	800f77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_dataplus._M_p = __p; }
 800b690:	6028      	str	r0, [r5, #0]
	    _M_capacity(__dnew);
 800b692:	9b01      	ldr	r3, [sp, #4]
      { _M_allocated_capacity = __capacity; }
 800b694:	60ab      	str	r3, [r5, #8]
 800b696:	e7e8      	b.n	800b66a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
      { __c1 = __c2; }
 800b698:	7833      	ldrb	r3, [r6, #0]
 800b69a:	7003      	strb	r3, [r0, #0]
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800b69c:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 800b69e:	606b      	str	r3, [r5, #4]
      { return _M_dataplus._M_p; }
 800b6a0:	682a      	ldr	r2, [r5, #0]
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	54d1      	strb	r1, [r2, r3]
      }
 800b6a6:	b002      	add	sp, #8
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	bf00      	nop
 800b6ac:	080169ec 	.word	0x080169ec

0800b6b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	4605      	mov	r5, r0
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800b6b6:	460e      	mov	r6, r1
 800b6b8:	b161      	cbz	r1, 800b6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x24>
 800b6ba:	1b94      	subs	r4, r2, r6
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800b6bc:	9401      	str	r4, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 800b6be:	2c0f      	cmp	r4, #15
 800b6c0:	d80d      	bhi.n	800b6de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2e>
 800b6c2:	6828      	ldr	r0, [r5, #0]
	if (__n == 1)
 800b6c4:	2c01      	cmp	r4, #1
 800b6c6:	d013      	beq.n	800b6f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x40>
	if (__n == 0)
 800b6c8:	b1a4      	cbz	r4, 800b6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	f008 fec9 	bl	8014464 <memcpy>
 800b6d2:	e00f      	b.n	800b6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800b6d4:	4291      	cmp	r1, r2
 800b6d6:	d0f0      	beq.n	800b6ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0xa>
	  std::__throw_logic_error(__N("basic_string::"
 800b6d8:	480a      	ldr	r0, [pc, #40]	; (800b704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x54>)
 800b6da:	f008 feac 	bl	8014436 <_ZSt19__throw_logic_errorPKc>
	    _M_data(_M_create(__dnew, size_type(0)));
 800b6de:	2200      	movs	r2, #0
 800b6e0:	a901      	add	r1, sp, #4
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f004 f84a 	bl	800f77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_dataplus._M_p = __p; }
 800b6e8:	6028      	str	r0, [r5, #0]
	    _M_capacity(__dnew);
 800b6ea:	9b01      	ldr	r3, [sp, #4]
      { _M_allocated_capacity = __capacity; }
 800b6ec:	60ab      	str	r3, [r5, #8]
 800b6ee:	e7e8      	b.n	800b6c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
      { __c1 = __c2; }
 800b6f0:	7833      	ldrb	r3, [r6, #0]
 800b6f2:	7003      	strb	r3, [r0, #0]
	_M_set_length(__dnew);
 800b6f4:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 800b6f6:	606b      	str	r3, [r5, #4]
      { return _M_dataplus._M_p; }
 800b6f8:	682a      	ldr	r2, [r5, #0]
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	54d1      	strb	r1, [r2, r3]
      }
 800b6fe:	b002      	add	sp, #8
 800b700:	bd70      	pop	{r4, r5, r6, pc}
 800b702:	bf00      	nop
 800b704:	080169ec 	.word	0x080169ec

0800b708 <_Z41__static_initialization_and_destruction_0ii>:
    for (i = 4; i >= 0; i--) {
        ts <<= 8;
        ts |= ts_tab[i];
    }
    return ts;
}
 800b708:	2801      	cmp	r0, #1
 800b70a:	d000      	beq.n	800b70e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800b70c:	4770      	bx	lr
 800b70e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b712:	4299      	cmp	r1, r3
 800b714:	d1fa      	bne.n	800b70c <_Z41__static_initialization_and_destruction_0ii+0x4>
 800b716:	b570      	push	{r4, r5, r6, lr}
 800b718:	f5ad 6db1 	sub.w	sp, sp, #1416	; 0x588
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
 800b71c:	48cc      	ldr	r0, [pc, #816]	; (800ba50 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800b71e:	2500      	movs	r5, #0
 800b720:	7105      	strb	r5, [r0, #4]
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
 800b722:	6085      	str	r5, [r0, #8]
      _M_header._M_left = &_M_header;
 800b724:	1d03      	adds	r3, r0, #4
 800b726:	60c3      	str	r3, [r0, #12]
      _M_header._M_right = &_M_header;
 800b728:	6103      	str	r3, [r0, #16]
      _M_node_count = 0;
 800b72a:	6145      	str	r5, [r0, #20]
std::map<std::string,uint8_t> invmap_dataRate,invmap_rxPAC,invmap_txPreambLength;
 800b72c:	4ec9      	ldr	r6, [pc, #804]	; (800ba54 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800b72e:	4cca      	ldr	r4, [pc, #808]	; (800ba58 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800b730:	4632      	mov	r2, r6
 800b732:	4621      	mov	r1, r4
 800b734:	f006 f883 	bl	801183e <__aeabi_atexit>
      _M_header._M_color = _S_red;
 800b738:	48c8      	ldr	r0, [pc, #800]	; (800ba5c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800b73a:	7105      	strb	r5, [r0, #4]
      _M_header._M_parent = 0;
 800b73c:	6085      	str	r5, [r0, #8]
      _M_header._M_left = &_M_header;
 800b73e:	1d03      	adds	r3, r0, #4
 800b740:	60c3      	str	r3, [r0, #12]
      _M_header._M_right = &_M_header;
 800b742:	6103      	str	r3, [r0, #16]
      _M_node_count = 0;
 800b744:	6145      	str	r5, [r0, #20]
 800b746:	4632      	mov	r2, r6
 800b748:	4621      	mov	r1, r4
 800b74a:	f006 f878 	bl	801183e <__aeabi_atexit>
      _M_header._M_color = _S_red;
 800b74e:	48c4      	ldr	r0, [pc, #784]	; (800ba60 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800b750:	7105      	strb	r5, [r0, #4]
      _M_header._M_parent = 0;
 800b752:	6085      	str	r5, [r0, #8]
      _M_header._M_left = &_M_header;
 800b754:	1d03      	adds	r3, r0, #4
 800b756:	60c3      	str	r3, [r0, #12]
      _M_header._M_right = &_M_header;
 800b758:	6103      	str	r3, [r0, #16]
      _M_node_count = 0;
 800b75a:	6145      	str	r5, [r0, #20]
 800b75c:	4632      	mov	r2, r6
 800b75e:	4621      	mov	r1, r4
 800b760:	f006 f86d 	bl	801183e <__aeabi_atexit>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b764:	ac03      	add	r4, sp, #12
 800b766:	2301      	movs	r3, #1
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
 800b76e:	49bd      	ldr	r1, [pc, #756]	; (800ba64 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800b770:	a804      	add	r0, sp, #16
 800b772:	f007 ff60 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b776:	2302      	movs	r3, #2
 800b778:	61e3      	str	r3, [r4, #28]
 800b77a:	f20d 5244 	addw	r2, sp, #1348	; 0x544
 800b77e:	49ba      	ldr	r1, [pc, #744]	; (800ba68 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800b780:	a80b      	add	r0, sp, #44	; 0x2c
 800b782:	f007 ff58 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b786:	2304      	movs	r3, #4
 800b788:	63a3      	str	r3, [r4, #56]	; 0x38
 800b78a:	f50d 62a8 	add.w	r2, sp, #1344	; 0x540
 800b78e:	49b7      	ldr	r1, [pc, #732]	; (800ba6c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800b790:	a812      	add	r0, sp, #72	; 0x48
 800b792:	f007 ff50 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b796:	2308      	movs	r3, #8
 800b798:	6563      	str	r3, [r4, #84]	; 0x54
 800b79a:	f20d 523c 	addw	r2, sp, #1340	; 0x53c
 800b79e:	49b4      	ldr	r1, [pc, #720]	; (800ba70 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800b7a0:	a819      	add	r0, sp, #100	; 0x64
 800b7a2:	f007 ff48 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b7a6:	2310      	movs	r3, #16
 800b7a8:	6723      	str	r3, [r4, #112]	; 0x70
 800b7aa:	f50d 62a7 	add.w	r2, sp, #1336	; 0x538
 800b7ae:	49b1      	ldr	r1, [pc, #708]	; (800ba74 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800b7b0:	a820      	add	r0, sp, #128	; 0x80
 800b7b2:	f007 ff40 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b7b6:	2320      	movs	r3, #32
 800b7b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800b7bc:	f20d 5234 	addw	r2, sp, #1332	; 0x534
 800b7c0:	49ad      	ldr	r1, [pc, #692]	; (800ba78 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800b7c2:	a827      	add	r0, sp, #156	; 0x9c
 800b7c4:	f007 ff37 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b7c8:	2340      	movs	r3, #64	; 0x40
 800b7ca:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800b7ce:	f50d 62a6 	add.w	r2, sp, #1328	; 0x530
 800b7d2:	49aa      	ldr	r1, [pc, #680]	; (800ba7c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800b7d4:	a82e      	add	r0, sp, #184	; 0xb8
 800b7d6:	f007 ff2e 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b7da:	2380      	movs	r3, #128	; 0x80
 800b7dc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800b7e0:	f20d 522c 	addw	r2, sp, #1324	; 0x52c
 800b7e4:	49a6      	ldr	r1, [pc, #664]	; (800ba80 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800b7e6:	a835      	add	r0, sp, #212	; 0xd4
 800b7e8:	f007 ff25 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b7ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7f0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b7f4:	f50d 62a5 	add.w	r2, sp, #1320	; 0x528
 800b7f8:	49a2      	ldr	r1, [pc, #648]	; (800ba84 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800b7fa:	a83c      	add	r0, sp, #240	; 0xf0
 800b7fc:	f007 ff1b 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b800:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b804:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 800b808:	f20d 5224 	addw	r2, sp, #1316	; 0x524
 800b80c:	499e      	ldr	r1, [pc, #632]	; (800ba88 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800b80e:	a843      	add	r0, sp, #268	; 0x10c
 800b810:	f007 ff11 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b818:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800b81c:	f50d 62a4 	add.w	r2, sp, #1312	; 0x520
 800b820:	499a      	ldr	r1, [pc, #616]	; (800ba8c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800b822:	a84a      	add	r0, sp, #296	; 0x128
 800b824:	f007 ff07 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b82c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 800b830:	f20d 521c 	addw	r2, sp, #1308	; 0x51c
 800b834:	4996      	ldr	r1, [pc, #600]	; (800ba90 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800b836:	a851      	add	r0, sp, #324	; 0x144
 800b838:	f007 fefd 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b840:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
 800b844:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
 800b848:	4992      	ldr	r1, [pc, #584]	; (800ba94 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800b84a:	a858      	add	r0, sp, #352	; 0x160
 800b84c:	f007 fef3 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b854:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 800b858:	f20d 5214 	addw	r2, sp, #1300	; 0x514
 800b85c:	498e      	ldr	r1, [pc, #568]	; (800ba98 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800b85e:	a85f      	add	r0, sp, #380	; 0x17c
 800b860:	f007 fee9 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b868:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800b86c:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 800b870:	498a      	ldr	r1, [pc, #552]	; (800ba9c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800b872:	a866      	add	r0, sp, #408	; 0x198
 800b874:	f007 fedf 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b87c:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
 800b880:	f20d 520c 	addw	r2, sp, #1292	; 0x50c
 800b884:	4986      	ldr	r1, [pc, #536]	; (800baa0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800b886:	a86d      	add	r0, sp, #436	; 0x1b4
 800b888:	f007 fed5 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b88c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b890:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 800b894:	f50d 62a1 	add.w	r2, sp, #1288	; 0x508
 800b898:	4982      	ldr	r1, [pc, #520]	; (800baa4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800b89a:	a874      	add	r0, sp, #464	; 0x1d0
 800b89c:	f007 fecb 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b8a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8a4:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
 800b8a8:	f20d 5204 	addw	r2, sp, #1284	; 0x504
 800b8ac:	497e      	ldr	r1, [pc, #504]	; (800baa8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800b8ae:	a87b      	add	r0, sp, #492	; 0x1ec
 800b8b0:	f007 fec1 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b8b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8b8:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 800b8bc:	f50d 62a0 	add.w	r2, sp, #1280	; 0x500
 800b8c0:	497a      	ldr	r1, [pc, #488]	; (800baac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800b8c2:	a882      	add	r0, sp, #520	; 0x208
 800b8c4:	f007 feb7 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b8c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8cc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 800b8d0:	f20d 42fc 	addw	r2, sp, #1276	; 0x4fc
 800b8d4:	4976      	ldr	r1, [pc, #472]	; (800bab0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800b8d6:	a889      	add	r0, sp, #548	; 0x224
 800b8d8:	f007 fead 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b8dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8e0:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
 800b8e4:	f50d 629f 	add.w	r2, sp, #1272	; 0x4f8
 800b8e8:	4972      	ldr	r1, [pc, #456]	; (800bab4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800b8ea:	a890      	add	r0, sp, #576	; 0x240
 800b8ec:	f007 fea3 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b8f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b8f4:	f8c4 324c 	str.w	r3, [r4, #588]	; 0x24c
 800b8f8:	f20d 42f4 	addw	r2, sp, #1268	; 0x4f4
 800b8fc:	496e      	ldr	r1, [pc, #440]	; (800bab8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800b8fe:	a897      	add	r0, sp, #604	; 0x25c
 800b900:	f007 fe99 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b908:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
 800b90c:	f50d 629e 	add.w	r2, sp, #1264	; 0x4f0
 800b910:	496a      	ldr	r1, [pc, #424]	; (800babc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800b912:	a89e      	add	r0, sp, #632	; 0x278
 800b914:	f007 fe8f 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b918:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b91c:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 800b920:	f20d 42ec 	addw	r2, sp, #1260	; 0x4ec
 800b924:	4966      	ldr	r1, [pc, #408]	; (800bac0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800b926:	a8a5      	add	r0, sp, #660	; 0x294
 800b928:	f007 fe85 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b92c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b930:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
 800b934:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
 800b938:	4962      	ldr	r1, [pc, #392]	; (800bac4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800b93a:	a8ac      	add	r0, sp, #688	; 0x2b0
 800b93c:	f007 fe7b 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b944:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 800b948:	f20d 42e4 	addw	r2, sp, #1252	; 0x4e4
 800b94c:	495e      	ldr	r1, [pc, #376]	; (800bac8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800b94e:	a8b3      	add	r0, sp, #716	; 0x2cc
 800b950:	f007 fe71 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b954:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b958:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
 800b95c:	f50d 629c 	add.w	r2, sp, #1248	; 0x4e0
 800b960:	495a      	ldr	r1, [pc, #360]	; (800bacc <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800b962:	a8ba      	add	r0, sp, #744	; 0x2e8
 800b964:	f007 fe67 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b96c:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 800b970:	f20d 42dc 	addw	r2, sp, #1244	; 0x4dc
 800b974:	4956      	ldr	r1, [pc, #344]	; (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800b976:	a8c1      	add	r0, sp, #772	; 0x304
 800b978:	f007 fe5d 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b97c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b980:	f8c4 3310 	str.w	r3, [r4, #784]	; 0x310
 800b984:	f50d 629b 	add.w	r2, sp, #1240	; 0x4d8
 800b988:	4952      	ldr	r1, [pc, #328]	; (800bad4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800b98a:	a8c8      	add	r0, sp, #800	; 0x320
 800b98c:	f007 fe53 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b990:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b994:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 800b998:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800b99c:	494e      	ldr	r1, [pc, #312]	; (800bad8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800b99e:	a8cf      	add	r0, sp, #828	; 0x33c
 800b9a0:	f007 fe49 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9a8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
 800b9ac:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
 800b9b0:	494a      	ldr	r1, [pc, #296]	; (800badc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800b9b2:	a8d6      	add	r0, sp, #856	; 0x358
 800b9b4:	f007 fe3f 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9bc:	f8c4 3364 	str.w	r3, [r4, #868]	; 0x364
 800b9c0:	f20d 42cc 	addw	r2, sp, #1228	; 0x4cc
 800b9c4:	4946      	ldr	r1, [pc, #280]	; (800bae0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800b9c6:	a8dd      	add	r0, sp, #884	; 0x374
 800b9c8:	f007 fe35 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9cc:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 800b9d0:	f50d 6299 	add.w	r2, sp, #1224	; 0x4c8
 800b9d4:	4943      	ldr	r1, [pc, #268]	; (800bae4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800b9d6:	a8e4      	add	r0, sp, #912	; 0x390
 800b9d8:	f007 fe2d 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9dc:	f8c4 539c 	str.w	r5, [r4, #924]	; 0x39c
 800b9e0:	f20d 42c4 	addw	r2, sp, #1220	; 0x4c4
 800b9e4:	4940      	ldr	r1, [pc, #256]	; (800bae8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800b9e6:	a8eb      	add	r0, sp, #940	; 0x3ac
 800b9e8:	f007 fe25 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9ec:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8
 800b9f0:	f50d 6298 	add.w	r2, sp, #1216	; 0x4c0
 800b9f4:	493d      	ldr	r1, [pc, #244]	; (800baec <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800b9f6:	a8f2      	add	r0, sp, #968	; 0x3c8
 800b9f8:	f007 fe1d 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800b9fc:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800ba00:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
 800ba04:	f20d 42bc 	addw	r2, sp, #1212	; 0x4bc
 800ba08:	4939      	ldr	r1, [pc, #228]	; (800baf0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800ba0a:	a8f9      	add	r0, sp, #996	; 0x3e4
 800ba0c:	f007 fe13 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ba10:	f44f 43de 	mov.w	r3, #28416	; 0x6f00
 800ba14:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
 800ba18:	f50d 6297 	add.w	r2, sp, #1208	; 0x4b8
 800ba1c:	4935      	ldr	r1, [pc, #212]	; (800baf4 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800ba1e:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 800ba22:	f007 fe08 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ba26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800ba2a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
 800ba2e:	f20d 42b4 	addw	r2, sp, #1204	; 0x4b4
 800ba32:	4931      	ldr	r1, [pc, #196]	; (800baf8 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800ba34:	f20d 401c 	addw	r0, sp, #1052	; 0x41c
 800ba38:	f007 fdfd 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800ba3c:	4b2f      	ldr	r3, [pc, #188]	; (800bafc <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800ba3e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
 800ba42:	f50d 6296 	add.w	r2, sp, #1200	; 0x4b0
 800ba46:	492e      	ldr	r1, [pc, #184]	; (800bb00 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800ba48:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 800ba4c:	e05a      	b.n	800bb04 <_Z41__static_initialization_and_destruction_0ii+0x3fc>
 800ba4e:	bf00      	nop
 800ba50:	200018d4 	.word	0x200018d4
 800ba54:	2000120c 	.word	0x2000120c
 800ba58:	080135a5 	.word	0x080135a5
 800ba5c:	2000188c 	.word	0x2000188c
 800ba60:	20001904 	.word	0x20001904
 800ba64:	08016a18 	.word	0x08016a18
 800ba68:	08016a3c 	.word	0x08016a3c
 800ba6c:	08016a4c 	.word	0x08016a4c
 800ba70:	08016a68 	.word	0x08016a68
 800ba74:	08016a88 	.word	0x08016a88
 800ba78:	08016aa0 	.word	0x08016aa0
 800ba7c:	08016ab8 	.word	0x08016ab8
 800ba80:	08016ad4 	.word	0x08016ad4
 800ba84:	08016ae8 	.word	0x08016ae8
 800ba88:	08016b0c 	.word	0x08016b0c
 800ba8c:	08016b38 	.word	0x08016b38
 800ba90:	08016b4c 	.word	0x08016b4c
 800ba94:	08016b68 	.word	0x08016b68
 800ba98:	08016b84 	.word	0x08016b84
 800ba9c:	08016ba0 	.word	0x08016ba0
 800baa0:	08016bb4 	.word	0x08016bb4
 800baa4:	08016bc8 	.word	0x08016bc8
 800baa8:	08016bf0 	.word	0x08016bf0
 800baac:	08016c0c 	.word	0x08016c0c
 800bab0:	08016c34 	.word	0x08016c34
 800bab4:	08016c44 	.word	0x08016c44
 800bab8:	08016c58 	.word	0x08016c58
 800babc:	08016c74 	.word	0x08016c74
 800bac0:	08016c84 	.word	0x08016c84
 800bac4:	08016c94 	.word	0x08016c94
 800bac8:	08016ca8 	.word	0x08016ca8
 800bacc:	08016cc0 	.word	0x08016cc0
 800bad0:	08016cd4 	.word	0x08016cd4
 800bad4:	08016cf0 	.word	0x08016cf0
 800bad8:	08016d08 	.word	0x08016d08
 800badc:	08016d2c 	.word	0x08016d2c
 800bae0:	08016d50 	.word	0x08016d50
 800bae4:	08016d7c 	.word	0x08016d7c
 800bae8:	08016da4 	.word	0x08016da4
 800baec:	08016dc0 	.word	0x08016dc0
 800baf0:	08016de0 	.word	0x08016de0
 800baf4:	08016e04 	.word	0x08016e04
 800baf8:	08016e14 	.word	0x08016e14
 800bafc:	24059000 	.word	0x24059000
 800bb00:	08016e30 	.word	0x08016e30
 800bb04:	f007 fd97 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bb08:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 800bb0c:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
 800bb10:	f20d 42ac 	addw	r2, sp, #1196	; 0x4ac
 800bb14:	499c      	ldr	r1, [pc, #624]	; (800bd88 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 800bb16:	f20d 4054 	addw	r0, sp, #1108	; 0x454
 800bb1a:	f007 fd8c 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bb1e:	23f8      	movs	r3, #248	; 0xf8
 800bb20:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
 800bb24:	f50d 6295 	add.w	r2, sp, #1192	; 0x4a8
 800bb28:	4998      	ldr	r1, [pc, #608]	; (800bd8c <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800bb2a:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
 800bb2e:	f007 fd82 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
	};
 800bb32:	f50d 6391 	add.w	r3, sp, #1160	; 0x488
 800bb36:	f8cd 4488 	str.w	r4, [sp, #1160]	; 0x488
 800bb3a:	2229      	movs	r2, #41	; 0x29
 800bb3c:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bb40:	aa01      	add	r2, sp, #4
 800bb42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb46:	e882 0003 	stmia.w	r2, {r0, r1}
      _M_header._M_color = _S_red;
 800bb4a:	4b91      	ldr	r3, [pc, #580]	; (800bd90 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 800bb4c:	711d      	strb	r5, [r3, #4]
      _M_header._M_parent = 0;
 800bb4e:	609d      	str	r5, [r3, #8]
      _M_header._M_left = &_M_header;
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	60da      	str	r2, [r3, #12]
      _M_header._M_right = &_M_header;
 800bb54:	611a      	str	r2, [r3, #16]
      _M_node_count = 0;
 800bb56:	615d      	str	r5, [r3, #20]
      // Functor similar to the previous one but without any pool of nodes to
      // recycle.
      struct _Alloc_node
      {
	_Alloc_node(_Rb_tree& __t)
	: _M_t(__t) { }
 800bb58:	9300      	str	r3, [sp, #0]
      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
	{
	  _Alloc_node __an(*this);
	  for (; __first != __last; ++__first)
 800bb5a:	f50d 6391 	add.w	r3, sp, #1160	; 0x488
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	d007      	beq.n	800bb72 <_Z41__static_initialization_and_destruction_0ii+0x46a>
      : _M_node(__it._M_node) { }
 800bb62:	488b      	ldr	r0, [pc, #556]	; (800bd90 <_Z41__static_initialization_and_destruction_0ii+0x688>)
	    _M_insert_unique_(end(), *__first, __an);
 800bb64:	466b      	mov	r3, sp
 800bb66:	4622      	mov	r2, r4
 800bb68:	1d01      	adds	r1, r0, #4
 800bb6a:	f007 ff21 	bl	80139b0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800bb6e:	341c      	adds	r4, #28
 800bb70:	e7f3      	b.n	800bb5a <_Z41__static_initialization_and_destruction_0ii+0x452>
 800bb72:	f50d 6491 	add.w	r4, sp, #1160	; 0x488
 800bb76:	ab03      	add	r3, sp, #12
 800bb78:	429c      	cmp	r4, r3
 800bb7a:	d00a      	beq.n	800bb92 <_Z41__static_initialization_and_destruction_0ii+0x48a>
 800bb7c:	3c1c      	subs	r4, #28
 800bb7e:	6860      	ldr	r0, [r4, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800bb80:	f104 030c 	add.w	r3, r4, #12
	if (!_M_is_local())
 800bb84:	4298      	cmp	r0, r3
 800bb86:	d0f6      	beq.n	800bb76 <_Z41__static_initialization_and_destruction_0ii+0x46e>
	  _M_destroy(_M_allocated_capacity);
 800bb88:	68e1      	ldr	r1, [r4, #12]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800bb8a:	3101      	adds	r1, #1
 800bb8c:	f008 fb89 	bl	80142a2 <_ZdlPvj>
    struct pair
 800bb90:	e7f1      	b.n	800bb76 <_Z41__static_initialization_and_destruction_0ii+0x46e>
std::map<unsigned long,std::string> map_reg_status {
 800bb92:	4a80      	ldr	r2, [pc, #512]	; (800bd94 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800bb94:	4980      	ldr	r1, [pc, #512]	; (800bd98 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 800bb96:	487e      	ldr	r0, [pc, #504]	; (800bd90 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 800bb98:	f005 fe51 	bl	801183e <__aeabi_atexit>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bb9c:	ac03      	add	r4, sp, #12
 800bb9e:	230c      	movs	r3, #12
 800bba0:	f88d 300c 	strb.w	r3, [sp, #12]
 800bba4:	f50d 62ad 	add.w	r2, sp, #1384	; 0x568
 800bba8:	497c      	ldr	r1, [pc, #496]	; (800bd9c <_Z41__static_initialization_and_destruction_0ii+0x694>)
 800bbaa:	a804      	add	r0, sp, #16
 800bbac:	f007 fd43 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bbb0:	2328      	movs	r3, #40	; 0x28
 800bbb2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bbb6:	f20d 5264 	addw	r2, sp, #1380	; 0x564
 800bbba:	4979      	ldr	r1, [pc, #484]	; (800bda0 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 800bbbc:	a80b      	add	r0, sp, #44	; 0x2c
 800bbbe:	f007 fd3a 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bbc2:	2318      	movs	r3, #24
 800bbc4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800bbc8:	f50d 62ac 	add.w	r2, sp, #1376	; 0x560
 800bbcc:	4975      	ldr	r1, [pc, #468]	; (800bda4 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800bbce:	a812      	add	r0, sp, #72	; 0x48
 800bbd0:	f007 fd31 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bbd4:	2508      	movs	r5, #8
 800bbd6:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
 800bbda:	f20d 525c 	addw	r2, sp, #1372	; 0x55c
 800bbde:	4972      	ldr	r1, [pc, #456]	; (800bda8 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 800bbe0:	a819      	add	r0, sp, #100	; 0x64
 800bbe2:	f007 fd28 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bbe6:	2334      	movs	r3, #52	; 0x34
 800bbe8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bbec:	f50d 62ab 	add.w	r2, sp, #1368	; 0x558
 800bbf0:	496e      	ldr	r1, [pc, #440]	; (800bdac <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 800bbf2:	a820      	add	r0, sp, #128	; 0x80
 800bbf4:	f007 fd1f 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bbf8:	2324      	movs	r3, #36	; 0x24
 800bbfa:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
 800bbfe:	f20d 5254 	addw	r2, sp, #1364	; 0x554
 800bc02:	496b      	ldr	r1, [pc, #428]	; (800bdb0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800bc04:	a827      	add	r0, sp, #156	; 0x9c
 800bc06:	f007 fd16 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bc0a:	2314      	movs	r3, #20
 800bc0c:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 800bc10:	f50d 62aa 	add.w	r2, sp, #1360	; 0x550
 800bc14:	4967      	ldr	r1, [pc, #412]	; (800bdb4 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800bc16:	a82e      	add	r0, sp, #184	; 0xb8
 800bc18:	f007 fd0d 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bc1c:	2304      	movs	r3, #4
 800bc1e:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
 800bc22:	f20d 524c 	addw	r2, sp, #1356	; 0x54c
 800bc26:	4964      	ldr	r1, [pc, #400]	; (800bdb8 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 800bc28:	a835      	add	r0, sp, #212	; 0xd4
 800bc2a:	f007 fd04 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
	};
 800bc2e:	f8cd 4490 	str.w	r4, [sp, #1168]	; 0x490
 800bc32:	f8cd 5494 	str.w	r5, [sp, #1172]	; 0x494
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bc36:	ab01      	add	r3, sp, #4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	e883 0003 	stmia.w	r3, {r0, r1}
      _M_header._M_color = _S_red;
 800bc40:	485e      	ldr	r0, [pc, #376]	; (800bdbc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800bc42:	2300      	movs	r3, #0
 800bc44:	7103      	strb	r3, [r0, #4]
      _M_header._M_parent = 0;
 800bc46:	6083      	str	r3, [r0, #8]
      _M_header._M_left = &_M_header;
 800bc48:	1d02      	adds	r2, r0, #4
 800bc4a:	60c2      	str	r2, [r0, #12]
      _M_header._M_right = &_M_header;
 800bc4c:	6102      	str	r2, [r0, #16]
      _M_node_count = 0;
 800bc4e:	6143      	str	r3, [r0, #20]
       */
      map(initializer_list<value_type> __l,
	  const _Compare& __comp = _Compare(),
	  const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800bc50:	aa3b      	add	r2, sp, #236	; 0xec
 800bc52:	4621      	mov	r1, r4
 800bc54:	f007 fe15 	bl	8013882 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 800bc58:	ac3b      	add	r4, sp, #236	; 0xec
 800bc5a:	ab03      	add	r3, sp, #12
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	d004      	beq.n	800bc6a <_Z41__static_initialization_and_destruction_0ii+0x562>
 800bc60:	3c1c      	subs	r4, #28

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 800bc62:	1d20      	adds	r0, r4, #4
 800bc64:	f008 fbed 	bl	8014442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    struct pair
 800bc68:	e7f7      	b.n	800bc5a <_Z41__static_initialization_and_destruction_0ii+0x552>
std::map<uint8_t,std::string> map_txPreambLength {
 800bc6a:	4a4a      	ldr	r2, [pc, #296]	; (800bd94 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800bc6c:	4954      	ldr	r1, [pc, #336]	; (800bdc0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800bc6e:	4853      	ldr	r0, [pc, #332]	; (800bdbc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800bc70:	f005 fde5 	bl	801183e <__aeabi_atexit>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bc74:	ac03      	add	r4, sp, #12
 800bc76:	2500      	movs	r5, #0
 800bc78:	f88d 500c 	strb.w	r5, [sp, #12]
 800bc7c:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
 800bc80:	4950      	ldr	r1, [pc, #320]	; (800bdc4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800bc82:	a804      	add	r0, sp, #16
 800bc84:	f007 fcd7 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bc8e:	f20d 5274 	addw	r2, sp, #1396	; 0x574
 800bc92:	494d      	ldr	r1, [pc, #308]	; (800bdc8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800bc94:	a80b      	add	r0, sp, #44	; 0x2c
 800bc96:	f007 fcce 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800bca0:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
 800bca4:	4949      	ldr	r1, [pc, #292]	; (800bdcc <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800bca6:	a812      	add	r0, sp, #72	; 0x48
 800bca8:	f007 fcc5 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bcac:	2303      	movs	r3, #3
 800bcae:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bcb2:	f20d 526c 	addw	r2, sp, #1388	; 0x56c
 800bcb6:	4946      	ldr	r1, [pc, #280]	; (800bdd0 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800bcb8:	a819      	add	r0, sp, #100	; 0x64
 800bcba:	f007 fcbc 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
	};
 800bcbe:	f8cd 4498 	str.w	r4, [sp, #1176]	; 0x498
 800bcc2:	2304      	movs	r3, #4
 800bcc4:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c
 800bcc8:	446b      	add	r3, sp
 800bcca:	2104      	movs	r1, #4
 800bccc:	4620      	mov	r0, r4
 800bcce:	e883 0003 	stmia.w	r3, {r0, r1}
      _M_header._M_color = _S_red;
 800bcd2:	4840      	ldr	r0, [pc, #256]	; (800bdd4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800bcd4:	7105      	strb	r5, [r0, #4]
      _M_header._M_parent = 0;
 800bcd6:	6085      	str	r5, [r0, #8]
      _M_header._M_left = &_M_header;
 800bcd8:	1843      	adds	r3, r0, r1
 800bcda:	60c3      	str	r3, [r0, #12]
      _M_header._M_right = &_M_header;
 800bcdc:	6103      	str	r3, [r0, #16]
      _M_node_count = 0;
 800bcde:	6145      	str	r5, [r0, #20]
 800bce0:	aa1f      	add	r2, sp, #124	; 0x7c
 800bce2:	4621      	mov	r1, r4
 800bce4:	f007 fdcd 	bl	8013882 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 800bce8:	ac1f      	add	r4, sp, #124	; 0x7c
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	429c      	cmp	r4, r3
 800bcee:	d004      	beq.n	800bcfa <_Z41__static_initialization_and_destruction_0ii+0x5f2>
 800bcf0:	3c1c      	subs	r4, #28
 800bcf2:	1d20      	adds	r0, r4, #4
 800bcf4:	f008 fba5 	bl	8014442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    struct pair
 800bcf8:	e7f7      	b.n	800bcea <_Z41__static_initialization_and_destruction_0ii+0x5e2>
std::map<uint8_t,std::string> map_rxPAC {
 800bcfa:	4a26      	ldr	r2, [pc, #152]	; (800bd94 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800bcfc:	4930      	ldr	r1, [pc, #192]	; (800bdc0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800bcfe:	4835      	ldr	r0, [pc, #212]	; (800bdd4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800bd00:	f005 fd9d 	bl	801183e <__aeabi_atexit>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bd04:	ac03      	add	r4, sp, #12
 800bd06:	2500      	movs	r5, #0
 800bd08:	f88d 500c 	strb.w	r5, [sp, #12]
 800bd0c:	f20d 5284 	addw	r2, sp, #1412	; 0x584
 800bd10:	4931      	ldr	r1, [pc, #196]	; (800bdd8 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800bd12:	a804      	add	r0, sp, #16
 800bd14:	f007 fc8f 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800bd1e:	f50d 62b0 	add.w	r2, sp, #1408	; 0x580
 800bd22:	492e      	ldr	r1, [pc, #184]	; (800bddc <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800bd24:	a80b      	add	r0, sp, #44	; 0x2c
 800bd26:	f007 fc86 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800bd30:	f20d 527c 	addw	r2, sp, #1404	; 0x57c
 800bd34:	492a      	ldr	r1, [pc, #168]	; (800bde0 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 800bd36:	a812      	add	r0, sp, #72	; 0x48
 800bd38:	f007 fc7d 	bl	8013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
	};
 800bd3c:	f8cd 44a0 	str.w	r4, [sp, #1184]	; 0x4a0
 800bd40:	2303      	movs	r3, #3
 800bd42:	f8cd 34a4 	str.w	r3, [sp, #1188]	; 0x4a4
 800bd46:	ab01      	add	r3, sp, #4
 800bd48:	2103      	movs	r1, #3
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	e883 0003 	stmia.w	r3, {r0, r1}
      _M_header._M_color = _S_red;
 800bd50:	4824      	ldr	r0, [pc, #144]	; (800bde4 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800bd52:	7105      	strb	r5, [r0, #4]
      _M_header._M_parent = 0;
 800bd54:	6085      	str	r5, [r0, #8]
      _M_header._M_left = &_M_header;
 800bd56:	1d03      	adds	r3, r0, #4
 800bd58:	60c3      	str	r3, [r0, #12]
      _M_header._M_right = &_M_header;
 800bd5a:	6103      	str	r3, [r0, #16]
      _M_node_count = 0;
 800bd5c:	6145      	str	r5, [r0, #20]
 800bd5e:	aa18      	add	r2, sp, #96	; 0x60
 800bd60:	4621      	mov	r1, r4
 800bd62:	f007 fd8e 	bl	8013882 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 800bd66:	ac18      	add	r4, sp, #96	; 0x60
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	429c      	cmp	r4, r3
 800bd6c:	d004      	beq.n	800bd78 <_Z41__static_initialization_and_destruction_0ii+0x670>
 800bd6e:	3c1c      	subs	r4, #28
 800bd70:	1d20      	adds	r0, r4, #4
 800bd72:	f008 fb66 	bl	8014442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    struct pair
 800bd76:	e7f7      	b.n	800bd68 <_Z41__static_initialization_and_destruction_0ii+0x660>
std::map<uint8_t,std::string> map_dataRate {
 800bd78:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800bd7a:	4911      	ldr	r1, [pc, #68]	; (800bdc0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800bd7c:	4819      	ldr	r0, [pc, #100]	; (800bde4 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800bd7e:	f005 fd5e 	bl	801183e <__aeabi_atexit>
}
 800bd82:	f50d 6db1 	add.w	sp, sp, #1416	; 0x588
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	08016e40 	.word	0x08016e40
 800bd8c:	08016e5c 	.word	0x08016e5c
 800bd90:	200018bc 	.word	0x200018bc
 800bd94:	2000120c 	.word	0x2000120c
 800bd98:	080135e7 	.word	0x080135e7
 800bd9c:	08016e6c 	.word	0x08016e6c
 800bda0:	08016e7c 	.word	0x08016e7c
 800bda4:	08016e8c 	.word	0x08016e8c
 800bda8:	08016e9c 	.word	0x08016e9c
 800bdac:	08016eac 	.word	0x08016eac
 800bdb0:	08016ebc 	.word	0x08016ebc
 800bdb4:	08016ecc 	.word	0x08016ecc
 800bdb8:	08016edc 	.word	0x08016edc
 800bdbc:	200018ec 	.word	0x200018ec
 800bdc0:	08013629 	.word	0x08013629
 800bdc4:	08016ee8 	.word	0x08016ee8
 800bdc8:	08016ef4 	.word	0x08016ef4
 800bdcc:	08016f00 	.word	0x08016f00
 800bdd0:	08016f0c 	.word	0x08016f0c
 800bdd4:	2000191c 	.word	0x2000191c
 800bdd8:	08016f18 	.word	0x08016f18
 800bddc:	08016f24 	.word	0x08016f24
 800bde0:	08016f30 	.word	0x08016f30
 800bde4:	200018a4 	.word	0x200018a4

0800bde8 <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
 800bde8:	b430      	push	{r4, r5}
    if (!hsv->v)
 800bdea:	78c4      	ldrb	r4, [r0, #3]
 800bdec:	b92c      	cbnz	r4, 800bdfa <led_hsv2rgb+0x12>
    {
        rgb->r = rgb->g = rgb->b = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	70cb      	strb	r3, [r1, #3]
 800bdf2:	708b      	strb	r3, [r1, #2]
 800bdf4:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 800bdf6:	bc30      	pop	{r4, r5}
 800bdf8:	4770      	bx	lr
    else if (!hsv->s)
 800bdfa:	7883      	ldrb	r3, [r0, #2]
 800bdfc:	b91b      	cbnz	r3, 800be06 <led_hsv2rgb+0x1e>
        rgb->r = rgb->g = rgb->b = hsv->v;
 800bdfe:	70cc      	strb	r4, [r1, #3]
 800be00:	708c      	strb	r4, [r1, #2]
 800be02:	704c      	strb	r4, [r1, #1]
 800be04:	e7f7      	b.n	800bdf6 <led_hsv2rgb+0xe>
        int hue = hsv->h % 360;
 800be06:	f9b0 2000 	ldrsh.w	r2, [r0]
 800be0a:	4831      	ldr	r0, [pc, #196]	; (800bed0 <led_hsv2rgb+0xe8>)
 800be0c:	fb80 5002 	smull	r5, r0, r0, r2
 800be10:	4410      	add	r0, r2
 800be12:	17d5      	asrs	r5, r2, #31
 800be14:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 800be18:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800be1c:	fb05 2210 	mls	r2, r5, r0, r2
 800be20:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 800be22:	2a00      	cmp	r2, #0
 800be24:	db2c      	blt.n	800be80 <led_hsv2rgb+0x98>
        int sector = hue / 60;
 800be26:	482b      	ldr	r0, [pc, #172]	; (800bed4 <led_hsv2rgb+0xec>)
 800be28:	fb80 5002 	smull	r5, r0, r0, r2
 800be2c:	4410      	add	r0, r2
 800be2e:	17d5      	asrs	r5, r2, #31
 800be30:	ebc5 1060 	rsb	r0, r5, r0, asr #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800be34:	f010 0f01 	tst.w	r0, #1
 800be38:	d024      	beq.n	800be84 <led_hsv2rgb+0x9c>
 800be3a:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 800be3e:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800be42:	f1cc 0c3c 	rsb	ip, ip, #60	; 0x3c
        int low = (255 - hsv->s) * high / 255;
 800be46:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800be4a:	fb04 f303 	mul.w	r3, r4, r3
 800be4e:	4a22      	ldr	r2, [pc, #136]	; (800bed8 <led_hsv2rgb+0xf0>)
 800be50:	fb82 5203 	smull	r5, r2, r2, r3
 800be54:	441a      	add	r2, r3
 800be56:	17db      	asrs	r3, r3, #31
 800be58:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
        int middle = low + (high - low) * angle / 60;
 800be5c:	1ae2      	subs	r2, r4, r3
 800be5e:	fb0c f202 	mul.w	r2, ip, r2
 800be62:	4d1c      	ldr	r5, [pc, #112]	; (800bed4 <led_hsv2rgb+0xec>)
 800be64:	fb85 5c02 	smull	r5, ip, r5, r2
 800be68:	4494      	add	ip, r2
 800be6a:	17d2      	asrs	r2, r2, #31
 800be6c:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 800be70:	441a      	add	r2, r3
        switch (sector)
 800be72:	2805      	cmp	r0, #5
 800be74:	d8bf      	bhi.n	800bdf6 <led_hsv2rgb+0xe>
 800be76:	e8df f000 	tbb	[pc, r0]
 800be7a:	1713      	.short	0x1713
 800be7c:	27231f1b 	.word	0x27231f1b
        hue = hue < 0 ? 360 + hue : hue;
 800be80:	442a      	add	r2, r5
 800be82:	e7d0      	b.n	800be26 <led_hsv2rgb+0x3e>
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800be84:	4d13      	ldr	r5, [pc, #76]	; (800bed4 <led_hsv2rgb+0xec>)
 800be86:	fb85 5c02 	smull	r5, ip, r5, r2
 800be8a:	eb0c 0502 	add.w	r5, ip, r2
 800be8e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800be92:	ebcc 1c65 	rsb	ip, ip, r5, asr #5
 800be96:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800be9a:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800be9e:	e7d2      	b.n	800be46 <led_hsv2rgb+0x5e>
                rgb->r = high;
 800bea0:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 800bea2:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 800bea4:	70cb      	strb	r3, [r1, #3]
                break;
 800bea6:	e7a6      	b.n	800bdf6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800bea8:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 800beaa:	708c      	strb	r4, [r1, #2]
                rgb->b = low;
 800beac:	70cb      	strb	r3, [r1, #3]
                break;
 800beae:	e7a2      	b.n	800bdf6 <led_hsv2rgb+0xe>
                rgb->r = low;
 800beb0:	704b      	strb	r3, [r1, #1]
                rgb->g = high;
 800beb2:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 800beb4:	70ca      	strb	r2, [r1, #3]
                break;
 800beb6:	e79e      	b.n	800bdf6 <led_hsv2rgb+0xe>
                rgb->r = low;
 800beb8:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 800beba:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 800bebc:	70cc      	strb	r4, [r1, #3]
                break;
 800bebe:	e79a      	b.n	800bdf6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 800bec0:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 800bec2:	708b      	strb	r3, [r1, #2]
                rgb->b = high;
 800bec4:	70cc      	strb	r4, [r1, #3]
                break;
 800bec6:	e796      	b.n	800bdf6 <led_hsv2rgb+0xe>
                rgb->r = high;
 800bec8:	704c      	strb	r4, [r1, #1]
                rgb->g = low;
 800beca:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 800becc:	70ca      	strb	r2, [r1, #3]
}
 800bece:	e792      	b.n	800bdf6 <led_hsv2rgb+0xe>
 800bed0:	b60b60b7 	.word	0xb60b60b7
 800bed4:	88888889 	.word	0x88888889
 800bed8:	80808081 	.word	0x80808081

0800bedc <lora_receive_error_timeout>:

    rc = k_poll_signal_raise(&sig_proc_rx_data, 1);
    k_spin_unlock(&spin, key);
}

void lora_receive_error_timeout(const struct device *dev) {
 800bedc:	b510      	push	{r4, lr}
	__asm__ volatile(
 800bede:	f04f 0210 	mov.w	r2, #16
 800bee2:	f3ef 8311 	mrs	r3, BASEPRI
 800bee6:	f382 8812 	msr	BASEPRI_MAX, r2
 800beea:	f3bf 8f6f 	isb	sy
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    key = k_spin_lock(&spin);
 800beee:	4c06      	ldr	r4, [pc, #24]	; (800bf08 <lora_receive_error_timeout+0x2c>)
 800bef0:	6023      	str	r3, [r4, #0]
	return z_impl_k_poll_signal_raise(sig, result);
 800bef2:	2101      	movs	r1, #1
 800bef4:	4805      	ldr	r0, [pc, #20]	; (800bf0c <lora_receive_error_timeout+0x30>)
 800bef6:	f003 fbdd 	bl	800f6b4 <z_impl_k_poll_signal_raise>

    /* Restart receive */
    k_poll_signal_raise(&sig_rx_mode, 1);

    k_spin_unlock(&spin, key);
 800befa:	6823      	ldr	r3, [r4, #0]
	__asm__ volatile(
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
}
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	bf00      	nop
 800bf08:	20001940 	.word	0x20001940
 800bf0c:	20000414 	.word	0x20000414

0800bf10 <periodic_timer_handler>:
    irq_gpio_dev = dev;
    k_work_submit(&work_button_pressed);
}

void periodic_timer_handler(struct k_timer *tim)
{
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b091      	sub	sp, #68	; 0x44
 800bf14:	af00      	add	r7, sp, #0
    LOG_DBG("Periodic timer handler");
 800bf16:	466c      	mov	r4, sp
 800bf18:	2301      	movs	r3, #1
 800bf1a:	813b      	strh	r3, [r7, #8]
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	817b      	strh	r3, [r7, #10]
 800bf20:	4b21      	ldr	r3, [pc, #132]	; (800bfa8 <periodic_timer_handler+0x98>)
 800bf22:	607b      	str	r3, [r7, #4]
#define VA_STACK_ALIGN(type)	MAX(VA_STACK_MIN_ALIGN, __alignof__(type))
#endif

static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
	for (size_t i = 0; i < len; i++) {
 800bf24:	2300      	movs	r3, #0
 800bf26:	e00a      	b.n	800bf3e <periodic_timer_handler+0x2e>
		dst[i] = src[i];
 800bf28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bf2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf30:	f852 1c3c 	ldr.w	r1, [r2, #-60]
 800bf34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bf38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d0f2      	beq.n	800bf28 <periodic_timer_handler+0x18>
 800bf42:	2302      	movs	r3, #2
 800bf44:	817b      	strh	r3, [r7, #10]
 800bf46:	4b19      	ldr	r3, [pc, #100]	; (800bfac <periodic_timer_handler+0x9c>)
 800bf48:	607b      	str	r3, [r7, #4]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e00a      	b.n	800bf64 <periodic_timer_handler+0x54>
		dst[i] = src[i];
 800bf4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bf52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf56:	f852 1c3c 	ldr.w	r1, [r2, #-60]
 800bf5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bf5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800bf62:	3301      	adds	r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0f2      	beq.n	800bf4e <periodic_timer_handler+0x3e>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	607b      	str	r3, [r7, #4]
 800bf6c:	2203      	movs	r2, #3
 800bf6e:	713a      	strb	r2, [r7, #4]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	637a      	str	r2, [r7, #52]	; 0x34
 800bf74:	4619      	mov	r1, r3
 800bf76:	2204      	movs	r2, #4
 800bf78:	f362 1188 	bfi	r1, r2, #6, #3
 800bf7c:	220c      	movs	r2, #12
 800bf7e:	f362 2152 	bfi	r1, r2, #9, #10
 800bf82:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bf86:	480a      	ldr	r0, [pc, #40]	; (800bfb0 <periodic_timer_handler+0xa0>)
 800bf88:	f005 fbcc 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800bf8c:	46a5      	mov	sp, r4
 800bf8e:	2101      	movs	r1, #1
 800bf90:	4808      	ldr	r0, [pc, #32]	; (800bfb4 <periodic_timer_handler+0xa4>)
 800bf92:	f003 fb8f 	bl	800f6b4 <z_impl_k_poll_signal_raise>
    k_poll_signal_raise(&sig_tx_mode, 1);
    current_state = transmit_state;
 800bf96:	4b08      	ldr	r3, [pc, #32]	; (800bfb8 <periodic_timer_handler+0xa8>)
 800bf98:	4a08      	ldr	r2, [pc, #32]	; (800bfbc <periodic_timer_handler+0xac>)
 800bf9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800bfa2:	3744      	adds	r7, #68	; 0x44
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd90      	pop	{r4, r7, pc}
 800bfa8:	08016f58 	.word	0x08016f58
 800bfac:	08016f74 	.word	0x08016f74
 800bfb0:	08015038 	.word	0x08015038
 800bfb4:	20000424 	.word	0x20000424
 800bfb8:	2000195c 	.word	0x2000195c
 800bfbc:	08017084 	.word	0x08017084

0800bfc0 <lora_receive_cb>:
void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr) {
 800bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc2:	b0a1      	sub	sp, #132	; 0x84
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	80fb      	strh	r3, [r7, #6]
    volatile int rc = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
 800bfce:	f04f 0310 	mov.w	r3, #16
 800bfd2:	f3ef 8111 	mrs	r1, BASEPRI
 800bfd6:	f383 8812 	msr	BASEPRI_MAX, r3
 800bfda:	f3bf 8f6f 	isb	sy
    key = k_spin_lock(&spin);
 800bfde:	4b87      	ldr	r3, [pc, #540]	; (800c1fc <lora_receive_cb+0x23c>)
 800bfe0:	6019      	str	r1, [r3, #0]
    if ((size != MESSAGE_LEN_IN_BYTES) || is_empty_msg(data, size)) {
 800bfe2:	2a02      	cmp	r2, #2
 800bfe4:	d135      	bne.n	800c052 <lora_receive_cb+0x92>
    uint8_t cnt = 0;
 800bfe6:	2000      	movs	r0, #0
    uint8_t i = 0;
 800bfe8:	4603      	mov	r3, r0
 800bfea:	e001      	b.n	800bff0 <lora_receive_cb+0x30>
        i++;
 800bfec:	3301      	adds	r3, #1
 800bfee:	b2db      	uxtb	r3, r3
    while(i < len) {
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d905      	bls.n	800c000 <lora_receive_cb+0x40>
        if (!(*(buf + i))) {
 800bff4:	5cec      	ldrb	r4, [r5, r3]
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	d1f8      	bne.n	800bfec <lora_receive_cb+0x2c>
            cnt++;
 800bffa:	3001      	adds	r0, #1
 800bffc:	b2c0      	uxtb	r0, r0
 800bffe:	e7f5      	b.n	800bfec <lora_receive_cb+0x2c>
 800c000:	4282      	cmp	r2, r0
 800c002:	d026      	beq.n	800c052 <lora_receive_cb+0x92>
    if ((*data) == 13) {
 800c004:	782b      	ldrb	r3, [r5, #0]
 800c006:	2b0d      	cmp	r3, #13
 800c008:	d06c      	beq.n	800c0e4 <lora_receive_cb+0x124>
				 struct k_msgq_attrs *attrs);


static inline uint32_t z_impl_k_msgq_num_free_get(struct k_msgq *msgq)
{
	return msgq->max_msgs - msgq->used_msgs;
 800c00a:	4b7d      	ldr	r3, [pc, #500]	; (800c200 <lora_receive_cb+0x240>)
 800c00c:	691a      	ldr	r2, [r3, #16]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (!k_msgq_num_free_get(&msgq_rx_msg)) {
 800c010:	429a      	cmp	r2, r3
 800c012:	f000 80eb 	beq.w	800c1ec <lora_receive_cb+0x22c>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	4629      	mov	r1, r5
 800c01c:	4878      	ldr	r0, [pc, #480]	; (800c200 <lora_receive_cb+0x240>)
 800c01e:	f001 ff01 	bl	800de24 <z_impl_k_msgq_put>
 800c022:	4b78      	ldr	r3, [pc, #480]	; (800c204 <lora_receive_cb+0x244>)
 800c024:	691a      	ldr	r2, [r3, #16]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (!k_msgq_num_free_get(&msgq_rssi)) {
 800c028:	429a      	cmp	r2, r3
 800c02a:	f000 80e3 	beq.w	800c1f4 <lora_receive_cb+0x234>
 800c02e:	2200      	movs	r2, #0
 800c030:	2300      	movs	r3, #0
 800c032:	1db9      	adds	r1, r7, #6
 800c034:	4873      	ldr	r0, [pc, #460]	; (800c204 <lora_receive_cb+0x244>)
 800c036:	f001 fef5 	bl	800de24 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800c03a:	2101      	movs	r1, #1
 800c03c:	4872      	ldr	r0, [pc, #456]	; (800c208 <lora_receive_cb+0x248>)
 800c03e:	f003 fb39 	bl	800f6b4 <z_impl_k_poll_signal_raise>
    rc = k_poll_signal_raise(&sig_proc_rx_data, 1);
 800c042:	62f8      	str	r0, [r7, #44]	; 0x2c
    k_spin_unlock(&spin, key);
 800c044:	4b6d      	ldr	r3, [pc, #436]	; (800c1fc <lora_receive_cb+0x23c>)
 800c046:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	e045      	b.n	800c0de <lora_receive_cb+0x11e>
        LOG_DBG("Reconfig modem");
 800c052:	466c      	mov	r4, sp
 800c054:	2301      	movs	r3, #1
 800c056:	81bb      	strh	r3, [r7, #12]
 800c058:	2302      	movs	r3, #2
 800c05a:	81fb      	strh	r3, [r7, #14]
 800c05c:	4b6b      	ldr	r3, [pc, #428]	; (800c20c <lora_receive_cb+0x24c>)
 800c05e:	60bb      	str	r3, [r7, #8]
 800c060:	2300      	movs	r3, #0
 800c062:	e00a      	b.n	800c07a <lora_receive_cb+0xba>
		dst[i] = src[i];
 800c064:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c068:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c06c:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c070:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c078:	3301      	adds	r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0f2      	beq.n	800c064 <lora_receive_cb+0xa4>
 800c07e:	2302      	movs	r3, #2
 800c080:	81fb      	strh	r3, [r7, #14]
 800c082:	4b63      	ldr	r3, [pc, #396]	; (800c210 <lora_receive_cb+0x250>)
 800c084:	60bb      	str	r3, [r7, #8]
 800c086:	2300      	movs	r3, #0
 800c088:	e00a      	b.n	800c0a0 <lora_receive_cb+0xe0>
		dst[i] = src[i];
 800c08a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c08e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c092:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c096:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800c09a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c09e:	3301      	adds	r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0f2      	beq.n	800c08a <lora_receive_cb+0xca>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	60bb      	str	r3, [r7, #8]
 800c0a8:	2203      	movs	r2, #3
 800c0aa:	723a      	strb	r2, [r7, #8]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	2204      	movs	r2, #4
 800c0b4:	f362 1188 	bfi	r1, r2, #6, #3
 800c0b8:	220c      	movs	r2, #12
 800c0ba:	f362 2152 	bfi	r1, r2, #9, #10
 800c0be:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c0c2:	4854      	ldr	r0, [pc, #336]	; (800c214 <lora_receive_cb+0x254>)
 800c0c4:	f005 fb2e 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800c0c8:	46a5      	mov	sp, r4
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	4852      	ldr	r0, [pc, #328]	; (800c218 <lora_receive_cb+0x258>)
 800c0ce:	f003 faf1 	bl	800f6b4 <z_impl_k_poll_signal_raise>
        k_spin_unlock(&spin, key);
 800c0d2:	4b4a      	ldr	r3, [pc, #296]	; (800c1fc <lora_receive_cb+0x23c>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
}
 800c0de:	377c      	adds	r7, #124	; 0x7c
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_DBG(" REQUEST");
 800c0e4:	466e      	mov	r6, sp
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	81bb      	strh	r3, [r7, #12]
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	81fb      	strh	r3, [r7, #14]
 800c0ee:	4b4b      	ldr	r3, [pc, #300]	; (800c21c <lora_receive_cb+0x25c>)
 800c0f0:	60bb      	str	r3, [r7, #8]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	b95b      	cbnz	r3, 800c10e <lora_receive_cb+0x14e>
		dst[i] = src[i];
 800c0f6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c0fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c0fe:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c102:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c10a:	3301      	adds	r3, #1
 800c10c:	e7f2      	b.n	800c0f4 <lora_receive_cb+0x134>
 800c10e:	2302      	movs	r3, #2
 800c110:	81fb      	strh	r3, [r7, #14]
 800c112:	4b3f      	ldr	r3, [pc, #252]	; (800c210 <lora_receive_cb+0x250>)
 800c114:	60bb      	str	r3, [r7, #8]
 800c116:	2300      	movs	r3, #0
 800c118:	b95b      	cbnz	r3, 800c132 <lora_receive_cb+0x172>
		dst[i] = src[i];
 800c11a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c11e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c122:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c126:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800c12a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c12e:	3301      	adds	r3, #1
 800c130:	e7f2      	b.n	800c118 <lora_receive_cb+0x158>
 800c132:	2400      	movs	r4, #0
 800c134:	60bc      	str	r4, [r7, #8]
 800c136:	2303      	movs	r3, #3
 800c138:	723b      	strb	r3, [r7, #8]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c13e:	4621      	mov	r1, r4
 800c140:	2304      	movs	r3, #4
 800c142:	f363 1188 	bfi	r1, r3, #6, #3
 800c146:	230c      	movs	r3, #12
 800c148:	f363 2152 	bfi	r1, r3, #9, #10
 800c14c:	4623      	mov	r3, r4
 800c14e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c152:	4830      	ldr	r0, [pc, #192]	; (800c214 <lora_receive_cb+0x254>)
 800c154:	f005 fae6 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800c158:	46b5      	mov	sp, r6
        LOG_DBG(" MESSAGE_TYPE_SYNC");
 800c15a:	466e      	mov	r6, sp
 800c15c:	2301      	movs	r3, #1
 800c15e:	81bb      	strh	r3, [r7, #12]
 800c160:	2302      	movs	r3, #2
 800c162:	81fb      	strh	r3, [r7, #14]
 800c164:	4b2e      	ldr	r3, [pc, #184]	; (800c220 <lora_receive_cb+0x260>)
 800c166:	60bb      	str	r3, [r7, #8]
 800c168:	b95c      	cbnz	r4, 800c182 <lora_receive_cb+0x1c2>
		dst[i] = src[i];
 800c16a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800c16e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800c172:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c176:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c17a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c17e:	3401      	adds	r4, #1
 800c180:	e7f2      	b.n	800c168 <lora_receive_cb+0x1a8>
 800c182:	2302      	movs	r3, #2
 800c184:	81fb      	strh	r3, [r7, #14]
 800c186:	4b22      	ldr	r3, [pc, #136]	; (800c210 <lora_receive_cb+0x250>)
 800c188:	60bb      	str	r3, [r7, #8]
 800c18a:	2300      	movs	r3, #0
 800c18c:	b95b      	cbnz	r3, 800c1a6 <lora_receive_cb+0x1e6>
		dst[i] = src[i];
 800c18e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800c192:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c196:	f852 1c70 	ldr.w	r1, [r2, #-112]
 800c19a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800c19e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	e7f2      	b.n	800c18c <lora_receive_cb+0x1cc>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60bb      	str	r3, [r7, #8]
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	723a      	strb	r2, [r7, #8]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	657a      	str	r2, [r7, #84]	; 0x54
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	f362 1188 	bfi	r1, r2, #6, #3
 800c1ba:	220c      	movs	r2, #12
 800c1bc:	f362 2152 	bfi	r1, r2, #9, #10
 800c1c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c1c4:	4813      	ldr	r0, [pc, #76]	; (800c214 <lora_receive_cb+0x254>)
 800c1c6:	f005 faad 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800c1ca:	46b5      	mov	sp, r6
	z_impl_k_timer_stop(timer);
 800c1cc:	4c15      	ldr	r4, [pc, #84]	; (800c224 <lora_receive_cb+0x264>)
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f007 ffa2 	bl	8014118 <z_impl_k_timer_stop>
	z_impl_k_timer_start(timer, duration, period);
 800c1d4:	f642 1290 	movw	r2, #10640	; 0x2990
 800c1d8:	2300      	movs	r3, #0
 800c1da:	e9cd 2300 	strd	r2, r3, [sp]
 800c1de:	f640 624c 	movw	r2, #3660	; 0xe4c
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f002 ff69 	bl	800f0bc <z_impl_k_timer_start>
 800c1ea:	e70e      	b.n	800c00a <lora_receive_cb+0x4a>
	z_impl_k_msgq_purge(msgq);
 800c1ec:	4804      	ldr	r0, [pc, #16]	; (800c200 <lora_receive_cb+0x240>)
 800c1ee:	f007 fca6 	bl	8013b3e <z_impl_k_msgq_purge>
}
 800c1f2:	e710      	b.n	800c016 <lora_receive_cb+0x56>
	z_impl_k_msgq_purge(msgq);
 800c1f4:	4803      	ldr	r0, [pc, #12]	; (800c204 <lora_receive_cb+0x244>)
 800c1f6:	f007 fca2 	bl	8013b3e <z_impl_k_msgq_purge>
}
 800c1fa:	e718      	b.n	800c02e <lora_receive_cb+0x6e>
 800c1fc:	20001934 	.word	0x20001934
 800c200:	2000087c 	.word	0x2000087c
 800c204:	20000848 	.word	0x20000848
 800c208:	20000404 	.word	0x20000404
 800c20c:	08016f8c 	.word	0x08016f8c
 800c210:	08016fa0 	.word	0x08016fa0
 800c214:	08015038 	.word	0x08015038
 800c218:	20000414 	.word	0x20000414
 800c21c:	08016fb0 	.word	0x08016fb0
 800c220:	08016fc0 	.word	0x08016fc0
 800c224:	20000f98 	.word	0x20000f98

0800c228 <work_buzzer_handler>:
void work_buzzer_handler(struct k_work *item) {
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	e003      	b.n	800c238 <work_buzzer_handler+0x10>
	return z_impl_k_sleep(timeout);
 800c230:	2032      	movs	r0, #50	; 0x32
 800c232:	2100      	movs	r1, #0
 800c234:	f002 fd04 	bl	800ec40 <z_impl_k_sleep>
	return z_impl_k_poll(events, num_events, timeout);
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	2101      	movs	r1, #1
 800c23e:	48bb      	ldr	r0, [pc, #748]	; (800c52c <work_buzzer_handler+0x304>)
 800c240:	f003 f98c 	bl	800f55c <z_impl_k_poll>
    while (k_poll(&event_buzzer, 1, K_NO_WAIT)) {
 800c244:	2800      	cmp	r0, #0
 800c246:	d1f3      	bne.n	800c230 <work_buzzer_handler+0x8>
    switch (event_buzzer.signal->result) {
 800c248:	4bb8      	ldr	r3, [pc, #736]	; (800c52c <work_buzzer_handler+0x304>)
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d048      	beq.n	800c2e4 <work_buzzer_handler+0xbc>
 800c252:	2b03      	cmp	r3, #3
 800c254:	f000 80af 	beq.w	800c3b6 <work_buzzer_handler+0x18e>
 800c258:	2b01      	cmp	r3, #1
 800c25a:	f000 816f 	beq.w	800c53c <work_buzzer_handler+0x314>
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c25e:	4bb4      	ldr	r3, [pc, #720]	; (800c530 <work_buzzer_handler+0x308>)
 800c260:	681d      	ldr	r5, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800c262:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	aa02      	add	r2, sp, #8
 800c268:	2102      	movs	r1, #2
 800c26a:	4628      	mov	r0, r5
 800c26c:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c26e:	bb70      	cbnz	r0, 800c2ce <work_buzzer_handler+0xa6>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c270:	9c02      	ldr	r4, [sp, #8]
 800c272:	9e03      	ldr	r6, [sp, #12]
 800c274:	00b2      	lsls	r2, r6, #2
 800c276:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800c27a:	00a3      	lsls	r3, r4, #2
 800c27c:	191b      	adds	r3, r3, r4
 800c27e:	eb46 0202 	adc.w	r2, r6, r2
 800c282:	00d2      	lsls	r2, r2, #3
 800c284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	1b1b      	subs	r3, r3, r4
 800c28c:	eb62 0206 	sbc.w	r2, r2, r6
 800c290:	0112      	lsls	r2, r2, #4
 800c292:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	191b      	adds	r3, r3, r4
 800c29a:	eb46 0602 	adc.w	r6, r6, r2
 800c29e:	01b6      	lsls	r6, r6, #6
 800c2a0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800c2a4:	019c      	lsls	r4, r3, #6
 800c2a6:	4aa3      	ldr	r2, [pc, #652]	; (800c534 <work_buzzer_handler+0x30c>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	f7f4 fc45 	bl	8000b3c <__aeabi_uldivmod>
 800c2b2:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2b8:	42a3      	cmp	r3, r4
 800c2ba:	4b9f      	ldr	r3, [pc, #636]	; (800c538 <work_buzzer_handler+0x310>)
 800c2bc:	41b3      	sbcs	r3, r6
 800c2be:	d306      	bcc.n	800c2ce <work_buzzer_handler+0xa6>
	api = (struct pwm_driver_api *)dev->api;
 800c2c0:	68ab      	ldr	r3, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c2c2:	681c      	ldr	r4, [r3, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	2102      	movs	r1, #2
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	47a0      	blx	r4
    event_buzzer.signal->signaled = 0;
 800c2ce:	4b97      	ldr	r3, [pc, #604]	; (800c52c <work_buzzer_handler+0x304>)
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6091      	str	r1, [r2, #8]
    event_buzzer.state = K_POLL_STATE_NOT_READY;
 800c2d6:	68da      	ldr	r2, [r3, #12]
 800c2d8:	f361 3252 	bfi	r2, r1, #13, #6
 800c2dc:	60da      	str	r2, [r3, #12]
}
 800c2de:	b004      	add	sp, #16
 800c2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c2e4:	4b92      	ldr	r3, [pc, #584]	; (800c530 <work_buzzer_handler+0x308>)
 800c2e6:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 800c2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	aa02      	add	r2, sp, #8
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d156      	bne.n	800c3aa <work_buzzer_handler+0x182>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c2fc:	9e02      	ldr	r6, [sp, #8]
 800c2fe:	9f03      	ldr	r7, [sp, #12]
 800c300:	00bc      	lsls	r4, r7, #2
 800c302:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800c306:	00b3      	lsls	r3, r6, #2
 800c308:	199b      	adds	r3, r3, r6
 800c30a:	eb47 0404 	adc.w	r4, r7, r4
 800c30e:	00e4      	lsls	r4, r4, #3
 800c310:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	1b9b      	subs	r3, r3, r6
 800c318:	eb64 0407 	sbc.w	r4, r4, r7
 800c31c:	0124      	lsls	r4, r4, #4
 800c31e:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	199b      	adds	r3, r3, r6
 800c326:	eb47 0404 	adc.w	r4, r7, r4
 800c32a:	01a4      	lsls	r4, r4, #6
 800c32c:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800c330:	019d      	lsls	r5, r3, #6
 800c332:	4a80      	ldr	r2, [pc, #512]	; (800c534 <work_buzzer_handler+0x30c>)
 800c334:	2300      	movs	r3, #0
 800c336:	4628      	mov	r0, r5
 800c338:	4621      	mov	r1, r4
 800c33a:	f7f4 fbff 	bl	8000b3c <__aeabi_uldivmod>
 800c33e:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c344:	42ab      	cmp	r3, r5
 800c346:	4b7c      	ldr	r3, [pc, #496]	; (800c538 <work_buzzer_handler+0x310>)
 800c348:	41a3      	sbcs	r3, r4
 800c34a:	d32e      	bcc.n	800c3aa <work_buzzer_handler+0x182>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c34c:	00ba      	lsls	r2, r7, #2
 800c34e:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800c352:	00b3      	lsls	r3, r6, #2
 800c354:	199b      	adds	r3, r3, r6
 800c356:	eb47 0202 	adc.w	r2, r7, r2
 800c35a:	00d2      	lsls	r2, r2, #3
 800c35c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	1b9b      	subs	r3, r3, r6
 800c364:	eb62 0207 	sbc.w	r2, r2, r7
 800c368:	0112      	lsls	r2, r2, #4
 800c36a:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	199e      	adds	r6, r3, r6
 800c372:	eb47 0702 	adc.w	r7, r7, r2
 800c376:	017f      	lsls	r7, r7, #5
 800c378:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 800c37c:	0176      	lsls	r6, r6, #5
 800c37e:	4a6d      	ldr	r2, [pc, #436]	; (800c534 <work_buzzer_handler+0x30c>)
 800c380:	2300      	movs	r3, #0
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f4 fbd9 	bl	8000b3c <__aeabi_uldivmod>
 800c38a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c390:	42b2      	cmp	r2, r6
 800c392:	4a69      	ldr	r2, [pc, #420]	; (800c538 <work_buzzer_handler+0x310>)
 800c394:	41ba      	sbcs	r2, r7
 800c396:	d308      	bcc.n	800c3aa <work_buzzer_handler+0x182>
	api = (struct pwm_driver_api *)dev->api;
 800c398:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c39c:	6814      	ldr	r4, [r2, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	9200      	str	r2, [sp, #0]
 800c3a2:	464a      	mov	r2, r9
 800c3a4:	2102      	movs	r1, #2
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 800c3aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	f002 fc46 	bl	800ec40 <z_impl_k_sleep>
            break;
 800c3b4:	e78b      	b.n	800c2ce <work_buzzer_handler+0xa6>
    switch (event_buzzer.signal->result) {
 800c3b6:	2500      	movs	r5, #0
 800c3b8:	e006      	b.n	800c3c8 <work_buzzer_handler+0x1a0>
 800c3ba:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c3be:	2100      	movs	r1, #0
 800c3c0:	f002 fc3e 	bl	800ec40 <z_impl_k_sleep>
                i++;
 800c3c4:	3501      	adds	r5, #1
 800c3c6:	b2ed      	uxtb	r5, r5
            while (i < 2) {
 800c3c8:	2d01      	cmp	r5, #1
 800c3ca:	d880      	bhi.n	800c2ce <work_buzzer_handler+0xa6>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c3cc:	4b58      	ldr	r3, [pc, #352]	; (800c530 <work_buzzer_handler+0x308>)
 800c3ce:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800c3d0:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	aa02      	add	r2, sp, #8
 800c3d6:	2102      	movs	r1, #2
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d164      	bne.n	800c4aa <work_buzzer_handler+0x282>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c3e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c3e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c3e8:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800c3ec:	ea44 7499 	orr.w	r4, r4, r9, lsr #30
 800c3f0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c3f4:	eb13 0309 	adds.w	r3, r3, r9
 800c3f8:	eb48 0404 	adc.w	r4, r8, r4
 800c3fc:	00e4      	lsls	r4, r4, #3
 800c3fe:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	ebb3 0309 	subs.w	r3, r3, r9
 800c408:	eb64 0408 	sbc.w	r4, r4, r8
 800c40c:	0124      	lsls	r4, r4, #4
 800c40e:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800c412:	011b      	lsls	r3, r3, #4
 800c414:	eb13 0309 	adds.w	r3, r3, r9
 800c418:	eb48 0404 	adc.w	r4, r8, r4
 800c41c:	01a4      	lsls	r4, r4, #6
 800c41e:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800c422:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 800c426:	4a43      	ldr	r2, [pc, #268]	; (800c534 <work_buzzer_handler+0x30c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4650      	mov	r0, sl
 800c42c:	4621      	mov	r1, r4
 800c42e:	f7f4 fb85 	bl	8000b3c <__aeabi_uldivmod>
 800c432:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c438:	4553      	cmp	r3, sl
 800c43a:	4b3f      	ldr	r3, [pc, #252]	; (800c538 <work_buzzer_handler+0x310>)
 800c43c:	41a3      	sbcs	r3, r4
 800c43e:	d334      	bcc.n	800c4aa <work_buzzer_handler+0x282>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c440:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c444:	ea42 7299 	orr.w	r2, r2, r9, lsr #30
 800c448:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c44c:	eb13 0309 	adds.w	r3, r3, r9
 800c450:	eb48 0202 	adc.w	r2, r8, r2
 800c454:	00d2      	lsls	r2, r2, #3
 800c456:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	ebb3 0309 	subs.w	r3, r3, r9
 800c460:	eb62 0208 	sbc.w	r2, r2, r8
 800c464:	0112      	lsls	r2, r2, #4
 800c466:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800c46a:	011b      	lsls	r3, r3, #4
 800c46c:	eb13 0309 	adds.w	r3, r3, r9
 800c470:	eb48 0802 	adc.w	r8, r8, r2
 800c474:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800c478:	ea48 68d3 	orr.w	r8, r8, r3, lsr #27
 800c47c:	015c      	lsls	r4, r3, #5
 800c47e:	4a2d      	ldr	r2, [pc, #180]	; (800c534 <work_buzzer_handler+0x30c>)
 800c480:	2300      	movs	r3, #0
 800c482:	4620      	mov	r0, r4
 800c484:	4641      	mov	r1, r8
 800c486:	f7f4 fb59 	bl	8000b3c <__aeabi_uldivmod>
 800c48a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c48c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c490:	42a2      	cmp	r2, r4
 800c492:	4a29      	ldr	r2, [pc, #164]	; (800c538 <work_buzzer_handler+0x310>)
 800c494:	eb72 0208 	sbcs.w	r2, r2, r8
 800c498:	d307      	bcc.n	800c4aa <work_buzzer_handler+0x282>
	api = (struct pwm_driver_api *)dev->api;
 800c49a:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c49c:	6814      	ldr	r4, [r2, #0]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	9200      	str	r2, [sp, #0]
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	2102      	movs	r1, #2
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	47a0      	blx	r4
 800c4aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	f002 fbc6 	bl	800ec40 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c4b4:	4b1e      	ldr	r3, [pc, #120]	; (800c530 <work_buzzer_handler+0x308>)
 800c4b6:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800c4b8:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	aa02      	add	r2, sp, #8
 800c4be:	2102      	movs	r1, #2
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f47f af78 	bne.w	800c3ba <work_buzzer_handler+0x192>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c4ca:	9c02      	ldr	r4, [sp, #8]
 800c4cc:	9f03      	ldr	r7, [sp, #12]
 800c4ce:	00ba      	lsls	r2, r7, #2
 800c4d0:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800c4d4:	00a3      	lsls	r3, r4, #2
 800c4d6:	191b      	adds	r3, r3, r4
 800c4d8:	eb47 0202 	adc.w	r2, r7, r2
 800c4dc:	00d2      	lsls	r2, r2, #3
 800c4de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	1b1b      	subs	r3, r3, r4
 800c4e6:	eb62 0207 	sbc.w	r2, r2, r7
 800c4ea:	0112      	lsls	r2, r2, #4
 800c4ec:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	191b      	adds	r3, r3, r4
 800c4f4:	eb47 0702 	adc.w	r7, r7, r2
 800c4f8:	01bf      	lsls	r7, r7, #6
 800c4fa:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 800c4fe:	019c      	lsls	r4, r3, #6
 800c500:	4a0c      	ldr	r2, [pc, #48]	; (800c534 <work_buzzer_handler+0x30c>)
 800c502:	2300      	movs	r3, #0
 800c504:	4620      	mov	r0, r4
 800c506:	4639      	mov	r1, r7
 800c508:	f7f4 fb18 	bl	8000b3c <__aeabi_uldivmod>
 800c50c:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c512:	42a3      	cmp	r3, r4
 800c514:	4b08      	ldr	r3, [pc, #32]	; (800c538 <work_buzzer_handler+0x310>)
 800c516:	41bb      	sbcs	r3, r7
 800c518:	f4ff af4f 	bcc.w	800c3ba <work_buzzer_handler+0x192>
	api = (struct pwm_driver_api *)dev->api;
 800c51c:	68b3      	ldr	r3, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c51e:	681c      	ldr	r4, [r3, #0]
 800c520:	2300      	movs	r3, #0
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	2102      	movs	r1, #2
 800c526:	4630      	mov	r0, r6
 800c528:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
 800c52a:	e746      	b.n	800c3ba <work_buzzer_handler+0x192>
 800c52c:	200003b4 	.word	0x200003b4
 800c530:	20001958 	.word	0x20001958
 800c534:	000f4240 	.word	0x000f4240
 800c538:	000f423f 	.word	0x000f423f
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c53c:	4b34      	ldr	r3, [pc, #208]	; (800c610 <work_buzzer_handler+0x3e8>)
 800c53e:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 800c542:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	aa02      	add	r2, sp, #8
 800c54a:	2102      	movs	r1, #2
 800c54c:	4640      	mov	r0, r8
 800c54e:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c550:	2800      	cmp	r0, #0
 800c552:	d156      	bne.n	800c602 <work_buzzer_handler+0x3da>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c554:	9e02      	ldr	r6, [sp, #8]
 800c556:	9f03      	ldr	r7, [sp, #12]
 800c558:	00bc      	lsls	r4, r7, #2
 800c55a:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800c55e:	00b3      	lsls	r3, r6, #2
 800c560:	199b      	adds	r3, r3, r6
 800c562:	eb47 0404 	adc.w	r4, r7, r4
 800c566:	00e4      	lsls	r4, r4, #3
 800c568:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800c56c:	00db      	lsls	r3, r3, #3
 800c56e:	1b9b      	subs	r3, r3, r6
 800c570:	eb64 0407 	sbc.w	r4, r4, r7
 800c574:	0124      	lsls	r4, r4, #4
 800c576:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800c57a:	011b      	lsls	r3, r3, #4
 800c57c:	199b      	adds	r3, r3, r6
 800c57e:	eb47 0404 	adc.w	r4, r7, r4
 800c582:	01a4      	lsls	r4, r4, #6
 800c584:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800c588:	019d      	lsls	r5, r3, #6
 800c58a:	4a22      	ldr	r2, [pc, #136]	; (800c614 <work_buzzer_handler+0x3ec>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4628      	mov	r0, r5
 800c590:	4621      	mov	r1, r4
 800c592:	f7f4 fad3 	bl	8000b3c <__aeabi_uldivmod>
 800c596:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c59c:	42ab      	cmp	r3, r5
 800c59e:	4b1e      	ldr	r3, [pc, #120]	; (800c618 <work_buzzer_handler+0x3f0>)
 800c5a0:	41a3      	sbcs	r3, r4
 800c5a2:	d32e      	bcc.n	800c602 <work_buzzer_handler+0x3da>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c5a4:	00ba      	lsls	r2, r7, #2
 800c5a6:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800c5aa:	00b3      	lsls	r3, r6, #2
 800c5ac:	199b      	adds	r3, r3, r6
 800c5ae:	eb47 0202 	adc.w	r2, r7, r2
 800c5b2:	00d2      	lsls	r2, r2, #3
 800c5b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c5b8:	00db      	lsls	r3, r3, #3
 800c5ba:	1b9b      	subs	r3, r3, r6
 800c5bc:	eb62 0207 	sbc.w	r2, r2, r7
 800c5c0:	0112      	lsls	r2, r2, #4
 800c5c2:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	199e      	adds	r6, r3, r6
 800c5ca:	eb47 0702 	adc.w	r7, r7, r2
 800c5ce:	017f      	lsls	r7, r7, #5
 800c5d0:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 800c5d4:	0176      	lsls	r6, r6, #5
 800c5d6:	4a0f      	ldr	r2, [pc, #60]	; (800c614 <work_buzzer_handler+0x3ec>)
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f4 faad 	bl	8000b3c <__aeabi_uldivmod>
 800c5e2:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c5e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5e8:	42b2      	cmp	r2, r6
 800c5ea:	4a0b      	ldr	r2, [pc, #44]	; (800c618 <work_buzzer_handler+0x3f0>)
 800c5ec:	41ba      	sbcs	r2, r7
 800c5ee:	d308      	bcc.n	800c602 <work_buzzer_handler+0x3da>
	api = (struct pwm_driver_api *)dev->api;
 800c5f0:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c5f4:	6814      	ldr	r4, [r2, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	9200      	str	r2, [sp, #0]
 800c5fa:	464a      	mov	r2, r9
 800c5fc:	2102      	movs	r1, #2
 800c5fe:	4640      	mov	r0, r8
 800c600:	47a0      	blx	r4
 800c602:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c606:	2100      	movs	r1, #0
 800c608:	f002 fb1a 	bl	800ec40 <z_impl_k_sleep>
 800c60c:	e627      	b.n	800c25e <work_buzzer_handler+0x36>
 800c60e:	bf00      	nop
 800c610:	20001958 	.word	0x20001958
 800c614:	000f4240 	.word	0x000f4240
 800c618:	000f423f 	.word	0x000f423f

0800c61c <start_rx>:
{
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
    volatile int rc = 0;
 800c624:	2600      	movs	r6, #0
 800c626:	9601      	str	r6, [sp, #4]
	const struct lora_driver_api *api =
 800c628:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	4632      	mov	r2, r6
 800c62e:	4631      	mov	r1, r6
 800c630:	4798      	blx	r3
    lora_cfg->tx = false;
 800c632:	736e      	strb	r6, [r5, #13]
	const struct lora_driver_api *api =
 800c634:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4629      	mov	r1, r5
 800c63a:	4620      	mov	r0, r4
 800c63c:	4798      	blx	r3
    rc = lora_config(lora_dev, lora_cfg);
 800c63e:	9001      	str	r0, [sp, #4]
    if (!rc) {
 800c640:	9b01      	ldr	r3, [sp, #4]
 800c642:	b983      	cbnz	r3, 800c666 <start_rx+0x4a>
	const struct lora_driver_api *api =
 800c644:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	4a09      	ldr	r2, [pc, #36]	; (800c670 <start_rx+0x54>)
 800c64a:	490a      	ldr	r1, [pc, #40]	; (800c674 <start_rx+0x58>)
 800c64c:	4620      	mov	r0, r4
 800c64e:	4798      	blx	r3
        rc = lora_recv_async(lora_dev, lora_receive_cb, lora_receive_error_timeout);
 800c650:	9001      	str	r0, [sp, #4]
        if (rc < 0) {
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	42b3      	cmp	r3, r6
 800c656:	db01      	blt.n	800c65c <start_rx+0x40>
}
 800c658:	b002      	add	sp, #8
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_poll_signal_raise(sig, result);
 800c65c:	2101      	movs	r1, #1
 800c65e:	4806      	ldr	r0, [pc, #24]	; (800c678 <start_rx+0x5c>)
 800c660:	f003 f828 	bl	800f6b4 <z_impl_k_poll_signal_raise>
 800c664:	e7f8      	b.n	800c658 <start_rx+0x3c>
 800c666:	2101      	movs	r1, #1
 800c668:	4803      	ldr	r0, [pc, #12]	; (800c678 <start_rx+0x5c>)
 800c66a:	f003 f823 	bl	800f6b4 <z_impl_k_poll_signal_raise>
 800c66e:	e7f3      	b.n	800c658 <start_rx+0x3c>
 800c670:	0800bedd 	.word	0x0800bedd
 800c674:	0800bfc1 	.word	0x0800bfc1
 800c678:	20000414 	.word	0x20000414

0800c67c <set_ind>:
{
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	4606      	mov	r6, r0
    if ((duration_min.ticks != K_FOREVER.ticks)) {
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c684:	bf08      	it	eq
 800c686:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800c68a:	d10b      	bne.n	800c6a4 <set_ind+0x28>
 800c68c:	4b12      	ldr	r3, [pc, #72]	; (800c6d8 <set_ind+0x5c>)
 800c68e:	691a      	ldr	r2, [r3, #16]
 800c690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (!k_msgq_num_free_get(&msgq_led_strip)) {
 800c692:	429a      	cmp	r2, r3
 800c694:	d01b      	beq.n	800c6ce <set_ind+0x52>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c696:	2200      	movs	r2, #0
 800c698:	2300      	movs	r3, #0
 800c69a:	4631      	mov	r1, r6
 800c69c:	480e      	ldr	r0, [pc, #56]	; (800c6d8 <set_ind+0x5c>)
 800c69e:	f001 fbc1 	bl	800de24 <z_impl_k_msgq_put>
}
 800c6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a4:	4615      	mov	r5, r2
 800c6a6:	461c      	mov	r4, r3
	z_impl_k_poll_signal_check(sig, signaled, result);
 800c6a8:	4f0c      	ldr	r7, [pc, #48]	; (800c6dc <set_ind+0x60>)
 800c6aa:	4a0d      	ldr	r2, [pc, #52]	; (800c6e0 <set_ind+0x64>)
 800c6ac:	4639      	mov	r1, r7
 800c6ae:	480d      	ldr	r0, [pc, #52]	; (800c6e4 <set_ind+0x68>)
 800c6b0:	f007 fde8 	bl	8014284 <z_impl_k_poll_signal_check>
 800c6b4:	683b      	ldr	r3, [r7, #0]
        if (!indicate_is_enabled()) {
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e8      	bne.n	800c68c <set_ind+0x10>
	return z_impl_k_poll_signal_raise(sig, result);
 800c6ba:	2101      	movs	r1, #1
 800c6bc:	4809      	ldr	r0, [pc, #36]	; (800c6e4 <set_ind+0x68>)
 800c6be:	f002 fff9 	bl	800f6b4 <z_impl_k_poll_signal_raise>
            k_work_schedule(&dwork_disable_ind, duration_min);
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	4623      	mov	r3, r4
 800c6c6:	4808      	ldr	r0, [pc, #32]	; (800c6e8 <set_ind+0x6c>)
 800c6c8:	f001 ff2a 	bl	800e520 <k_work_schedule>
 800c6cc:	e7de      	b.n	800c68c <set_ind+0x10>
	z_impl_k_msgq_purge(msgq);
 800c6ce:	4802      	ldr	r0, [pc, #8]	; (800c6d8 <set_ind+0x5c>)
 800c6d0:	f007 fa35 	bl	8013b3e <z_impl_k_msgq_purge>
}
 800c6d4:	e7df      	b.n	800c696 <set_ind+0x1a>
 800c6d6:	bf00      	nop
 800c6d8:	20000814 	.word	0x20000814
 800c6dc:	2000193c 	.word	0x2000193c
 800c6e0:	20001938 	.word	0x20001938
 800c6e4:	20001a1c 	.word	0x20001a1c
 800c6e8:	20000f68 	.word	0x20000f68

0800c6ec <work_button_pressed_handler>:
void work_button_pressed_handler(struct k_work *item) {
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	b084      	sub	sp, #16
    atomic_t atomic_interval_count = ATOMIC_INIT(0); /* Counted number of function button pressed call */
 800c6f2:	2400      	movs	r4, #0
 800c6f4:	9403      	str	r4, [sp, #12]
    struct led_strip_indicate_s *strip_ind = nullptr;
 800c6f6:	9402      	str	r4, [sp, #8]
 800c6f8:	aa03      	add	r2, sp, #12
 800c6fa:	f3bf 8f5b 	dmb	ish
 800c6fe:	e852 3f00 	ldrex	r3, [r2]
 800c702:	e842 4100 	strex	r1, r4, [r2]
 800c706:	2900      	cmp	r1, #0
 800c708:	d1f9      	bne.n	800c6fe <work_button_pressed_handler+0x12>
 800c70a:	f3bf 8f5b 	dmb	ish
    bool long_pressed_is_set = false;
 800c70e:	46a0      	mov	r8, r4
    bool middle_pressed_is_set = false;
 800c710:	4625      	mov	r5, r4
    while (gpio_pin_get(irq_gpio_dev->port, irq_gpio_dev->pin)) {
 800c712:	4b4b      	ldr	r3, [pc, #300]	; (800c840 <work_button_pressed_handler+0x154>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_data *const data =
 800c71a:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
 800c71c:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	a901      	add	r1, sp, #4
 800c722:	4798      	blx	r3
	if (ret == 0) {
 800c724:	4603      	mov	r3, r0
 800c726:	b918      	cbnz	r0, 800c730 <work_button_pressed_handler+0x44>
		*value ^= data->invert;
 800c728:	6831      	ldr	r1, [r6, #0]
 800c72a:	9a01      	ldr	r2, [sp, #4]
 800c72c:	404a      	eors	r2, r1
 800c72e:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 800c730:	b92b      	cbnz	r3, 800c73e <work_button_pressed_handler+0x52>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 800c732:	2201      	movs	r2, #1
 800c734:	40ba      	lsls	r2, r7
 800c736:	9901      	ldr	r1, [sp, #4]
 800c738:	420a      	tst	r2, r1
 800c73a:	d000      	beq.n	800c73e <work_button_pressed_handler+0x52>
 800c73c:	2301      	movs	r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d04e      	beq.n	800c7e0 <work_button_pressed_handler+0xf4>
	return z_impl_k_sleep(timeout);
 800c742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c746:	2100      	movs	r1, #0
 800c748:	f002 fa7a 	bl	800ec40 <z_impl_k_sleep>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	f3bf 8f5b 	dmb	ish
 800c752:	e853 2f00 	ldrex	r2, [r3]
 800c756:	3201      	adds	r2, #1
 800c758:	e843 2100 	strex	r1, r2, [r3]
 800c75c:	2900      	cmp	r1, #0
 800c75e:	d1f8      	bne.n	800c752 <work_button_pressed_handler+0x66>
 800c760:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c764:	f3bf 8f5b 	dmb	ish
 800c768:	9b03      	ldr	r3, [sp, #12]
 800c76a:	f3bf 8f5b 	dmb	ish
        if ((atomic_get(&atomic_interval_count) > SHORT_PRESSED_MIN_VAL) &&
 800c76e:	2b04      	cmp	r3, #4
 800c770:	dd12      	ble.n	800c798 <work_button_pressed_handler+0xac>
 800c772:	f3bf 8f5b 	dmb	ish
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	f3bf 8f5b 	dmb	ish
 800c77c:	2b0a      	cmp	r3, #10
 800c77e:	dc0b      	bgt.n	800c798 <work_button_pressed_handler+0xac>
            if (!short_pressed_is_set) {
 800c780:	2c00      	cmp	r4, #0
 800c782:	d1c6      	bne.n	800c712 <work_button_pressed_handler+0x26>
                strip_ind = &short_pressed_button_ind;
 800c784:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <work_button_pressed_handler+0x158>)
 800c786:	9302      	str	r3, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c788:	2200      	movs	r2, #0
 800c78a:	2300      	movs	r3, #0
 800c78c:	a902      	add	r1, sp, #8
 800c78e:	482e      	ldr	r0, [pc, #184]	; (800c848 <work_button_pressed_handler+0x15c>)
 800c790:	f001 fb48 	bl	800de24 <z_impl_k_msgq_put>
                short_pressed_is_set = true;
 800c794:	2401      	movs	r4, #1
 800c796:	e7bc      	b.n	800c712 <work_button_pressed_handler+0x26>
 800c798:	f3bf 8f5b 	dmb	ish
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 800c7a2:	2b0b      	cmp	r3, #11
 800c7a4:	dc09      	bgt.n	800c7ba <work_button_pressed_handler+0xce>
 800c7a6:	f3bf 8f5b 	dmb	ish
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	f3bf 8f5b 	dmb	ish
        } else if (atomic_get(&atomic_interval_count) > LONG_PRESSED_MIN_VAL) { /* Long pressed */
 800c7b0:	2b15      	cmp	r3, #21
 800c7b2:	ddae      	ble.n	800c712 <work_button_pressed_handler+0x26>
            long_pressed_is_set = true;
 800c7b4:	f04f 0801 	mov.w	r8, #1
 800c7b8:	e7ab      	b.n	800c712 <work_button_pressed_handler+0x26>
 800c7ba:	f3bf 8f5b 	dmb	ish
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 800c7c4:	2b14      	cmp	r3, #20
 800c7c6:	dcee      	bgt.n	800c7a6 <work_button_pressed_handler+0xba>
            if (!middle_pressed_is_set) {
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	d1a2      	bne.n	800c712 <work_button_pressed_handler+0x26>
                strip_ind = &middle_pressed_button_ind;
 800c7cc:	4b1f      	ldr	r3, [pc, #124]	; (800c84c <work_button_pressed_handler+0x160>)
 800c7ce:	9302      	str	r3, [sp, #8]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	a902      	add	r1, sp, #8
 800c7d6:	481c      	ldr	r0, [pc, #112]	; (800c848 <work_button_pressed_handler+0x15c>)
 800c7d8:	f001 fb24 	bl	800de24 <z_impl_k_msgq_put>
                middle_pressed_is_set = true;
 800c7dc:	2501      	movs	r5, #1
 800c7de:	e798      	b.n	800c712 <work_button_pressed_handler+0x26>
    if (short_pressed_is_set) {
 800c7e0:	b944      	cbnz	r4, 800c7f4 <work_button_pressed_handler+0x108>
    if (short_pressed_is_set && (!middle_pressed_is_set)) { /* Short pressed */
 800c7e2:	b104      	cbz	r4, 800c7e6 <work_button_pressed_handler+0xfa>
 800c7e4:	b175      	cbz	r5, 800c804 <work_button_pressed_handler+0x118>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 800c7e6:	b115      	cbz	r5, 800c7ee <work_button_pressed_handler+0x102>
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	d023      	beq.n	800c836 <work_button_pressed_handler+0x14a>
}
 800c7ee:	b004      	add	sp, #16
 800c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k_work_submit(&work_buzzer);
 800c7f4:	4816      	ldr	r0, [pc, #88]	; (800c850 <work_button_pressed_handler+0x164>)
 800c7f6:	f001 fe4d 	bl	800e494 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	4815      	ldr	r0, [pc, #84]	; (800c854 <work_button_pressed_handler+0x168>)
 800c7fe:	f002 ff59 	bl	800f6b4 <z_impl_k_poll_signal_raise>
 800c802:	e7ee      	b.n	800c7e2 <work_button_pressed_handler+0xf6>
 800c804:	f3bf 8f5b 	dmb	ish
 800c808:	4b13      	ldr	r3, [pc, #76]	; (800c858 <work_button_pressed_handler+0x16c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f3bf 8f5b 	dmb	ish
        if (!atomic_get(&alarm_is_active)) {
 800c810:	b93b      	cbnz	r3, 800c822 <work_button_pressed_handler+0x136>
            strip_ind = &status_ind;
 800c812:	4b12      	ldr	r3, [pc, #72]	; (800c85c <work_button_pressed_handler+0x170>)
 800c814:	9302      	str	r3, [sp, #8]
            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800c816:	4a12      	ldr	r2, [pc, #72]	; (800c860 <work_button_pressed_handler+0x174>)
 800c818:	2300      	movs	r3, #0
 800c81a:	a802      	add	r0, sp, #8
 800c81c:	f7ff ff2e 	bl	800c67c <set_ind>
 800c820:	e7e5      	b.n	800c7ee <work_button_pressed_handler+0x102>
            strip_ind = &alarm_ind;
 800c822:	4b10      	ldr	r3, [pc, #64]	; (800c864 <work_button_pressed_handler+0x178>)
 800c824:	9302      	str	r3, [sp, #8]
            set_ind(&strip_ind, K_FOREVER);
 800c826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c82e:	a802      	add	r0, sp, #8
 800c830:	f7ff ff24 	bl	800c67c <set_ind>
 800c834:	e7db      	b.n	800c7ee <work_button_pressed_handler+0x102>
        work_button_pressed_handler_dev(irq_gpio_dev);
 800c836:	4b02      	ldr	r3, [pc, #8]	; (800c840 <work_button_pressed_handler+0x154>)
 800c838:	6818      	ldr	r0, [r3, #0]
 800c83a:	f7f5 fc6f 	bl	800211c <work_button_pressed_handler_dev>
}
 800c83e:	e7d6      	b.n	800c7ee <work_button_pressed_handler+0x102>
 800c840:	20001964 	.word	0x20001964
 800c844:	200003f8 	.word	0x200003f8
 800c848:	20000814 	.word	0x20000814
 800c84c:	200003c8 	.word	0x200003c8
 800c850:	20001978 	.word	0x20001978
 800c854:	20000434 	.word	0x20000434
 800c858:	20001954 	.word	0x20001954
 800c85c:	20000444 	.word	0x20000444
 800c860:	000927c0 	.word	0x000927c0
 800c864:	20000360 	.word	0x20000360

0800c868 <dwork_disable_ind_handler>:
{
 800c868:	b500      	push	{lr}
 800c86a:	b083      	sub	sp, #12
    struct led_strip_indicate_s *strip_ind = nullptr;
 800c86c:	2200      	movs	r2, #0
 800c86e:	9201      	str	r2, [sp, #4]
    k_poll_signal_raise(&signal_indicate, STANDARD_MODE_INDICATION);
}

static inline void disable_ind()
{
    event_indicate.signal->signaled = 0;
 800c870:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <dwork_disable_ind_handler+0x60>)
 800c872:	6919      	ldr	r1, [r3, #16]
 800c874:	608a      	str	r2, [r1, #8]
    event_indicate.state = K_POLL_STATE_NOT_READY;
 800c876:	68d9      	ldr	r1, [r3, #12]
 800c878:	f362 3152 	bfi	r1, r2, #13, #6
 800c87c:	60d9      	str	r1, [r3, #12]
	z_impl_k_msgq_purge(msgq);
 800c87e:	4813      	ldr	r0, [pc, #76]	; (800c8cc <dwork_disable_ind_handler+0x64>)
 800c880:	f007 f95d 	bl	8013b3e <z_impl_k_msgq_purge>
	return z_impl_k_sleep(timeout);
 800c884:	f241 3088 	movw	r0, #5000	; 0x1388
 800c888:	2100      	movs	r1, #0
 800c88a:	f002 f9d9 	bl	800ec40 <z_impl_k_sleep>
 800c88e:	f3bf 8f5b 	dmb	ish
 800c892:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <dwork_disable_ind_handler+0x68>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f3bf 8f5b 	dmb	ish
    if (!atomic_get(&alarm_is_active)) {
 800c89a:	b95b      	cbnz	r3, 800c8b4 <dwork_disable_ind_handler+0x4c>
        strip_ind = &disable_indication;
 800c89c:	4b0d      	ldr	r3, [pc, #52]	; (800c8d4 <dwork_disable_ind_handler+0x6c>)
 800c89e:	9301      	str	r3, [sp, #4]
        set_ind(&strip_ind, K_FOREVER);
 800c8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8a8:	a801      	add	r0, sp, #4
 800c8aa:	f7ff fee7 	bl	800c67c <set_ind>
}
 800c8ae:	b003      	add	sp, #12
 800c8b0:	f85d fb04 	ldr.w	pc, [sp], #4
        strip_ind = &alarm_ind;
 800c8b4:	4b08      	ldr	r3, [pc, #32]	; (800c8d8 <dwork_disable_ind_handler+0x70>)
 800c8b6:	9301      	str	r3, [sp, #4]
        set_ind(&strip_ind, K_FOREVER);
 800c8b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8c0:	a801      	add	r0, sp, #4
 800c8c2:	f7ff fedb 	bl	800c67c <set_ind>
}
 800c8c6:	e7f2      	b.n	800c8ae <dwork_disable_ind_handler+0x46>
 800c8c8:	200019c8 	.word	0x200019c8
 800c8cc:	20000814 	.word	0x20000814
 800c8d0:	20001954 	.word	0x20001954
 800c8d4:	2000036c 	.word	0x2000036c
 800c8d8:	20000360 	.word	0x20000360

0800c8dc <common_kernel_services_init>:
{
 800c8dc:	b500      	push	{lr}
 800c8de:	b085      	sub	sp, #20
    buzzer_dev = DEVICE_DT_GET(PWM_CTLR);
 800c8e0:	4817      	ldr	r0, [pc, #92]	; (800c940 <common_kernel_services_init+0x64>)
 800c8e2:	4b18      	ldr	r3, [pc, #96]	; (800c944 <common_kernel_services_init+0x68>)
 800c8e4:	6018      	str	r0, [r3, #0]
 800c8e6:	f007 f899 	bl	8013a1c <z_device_is_ready>
    if (!device_is_ready(buzzer_dev)) {
 800c8ea:	b198      	cbz	r0, 800c914 <common_kernel_services_init+0x38>
    k_work_init(&work_buzzer, work_buzzer_handler);
 800c8ec:	4916      	ldr	r1, [pc, #88]	; (800c948 <common_kernel_services_init+0x6c>)
 800c8ee:	4817      	ldr	r0, [pc, #92]	; (800c94c <common_kernel_services_init+0x70>)
 800c8f0:	f007 f99a 	bl	8013c28 <k_work_init>
    k_work_init(&work_button_pressed, work_button_pressed_handler);
 800c8f4:	4916      	ldr	r1, [pc, #88]	; (800c950 <common_kernel_services_init+0x74>)
 800c8f6:	4817      	ldr	r0, [pc, #92]	; (800c954 <common_kernel_services_init+0x78>)
 800c8f8:	f007 f996 	bl	8013c28 <k_work_init>
    k_work_init_delayable(&dwork_disable_ind, dwork_disable_ind_handler); /* For enable and disable indication */
 800c8fc:	4916      	ldr	r1, [pc, #88]	; (800c958 <common_kernel_services_init+0x7c>)
 800c8fe:	4817      	ldr	r0, [pc, #92]	; (800c95c <common_kernel_services_init+0x80>)
 800c900:	f007 f9b9 	bl	8013c76 <k_work_init_delayable>
    k_timer_init(&periodic_timer, periodic_timer_handler, nullptr);
 800c904:	2200      	movs	r2, #0
 800c906:	4916      	ldr	r1, [pc, #88]	; (800c960 <common_kernel_services_init+0x84>)
 800c908:	4816      	ldr	r0, [pc, #88]	; (800c964 <common_kernel_services_init+0x88>)
 800c90a:	f007 fbf9 	bl	8014100 <k_timer_init>
}
 800c90e:	b005      	add	sp, #20
 800c910:	f85d fb04 	ldr.w	pc, [sp], #4
        LOG_DBG("Error: PWM device %s is not ready\n", buzzer_dev->name);
 800c914:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <common_kernel_services_init+0x68>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	9303      	str	r3, [sp, #12]
 800c91c:	4b12      	ldr	r3, [pc, #72]	; (800c968 <common_kernel_services_init+0x8c>)
 800c91e:	9302      	str	r3, [sp, #8]
 800c920:	4b12      	ldr	r3, [pc, #72]	; (800c96c <common_kernel_services_init+0x90>)
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	9000      	str	r0, [sp, #0]
 800c926:	4603      	mov	r3, r0
 800c928:	2204      	movs	r2, #4
 800c92a:	4911      	ldr	r1, [pc, #68]	; (800c970 <common_kernel_services_init+0x94>)
 800c92c:	f007 f85e 	bl	80139ec <z_log_msg2_runtime_create>
 800c930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c938:	f002 f982 	bl	800ec40 <z_impl_k_sleep>
 800c93c:	e7d6      	b.n	800c8ec <common_kernel_services_init+0x10>
 800c93e:	bf00      	nop
 800c940:	08014cd4 	.word	0x08014cd4
 800c944:	20001958 	.word	0x20001958
 800c948:	0800c229 	.word	0x0800c229
 800c94c:	20001978 	.word	0x20001978
 800c950:	0800c6ed 	.word	0x0800c6ed
 800c954:	20001968 	.word	0x20001968
 800c958:	0800c869 	.word	0x0800c869
 800c95c:	20000f68 	.word	0x20000f68
 800c960:	0800bf11 	.word	0x0800bf11
 800c964:	20000f98 	.word	0x20000f98
 800c968:	08016fd8 	.word	0x08016fd8
 800c96c:	08016ff4 	.word	0x08016ff4
 800c970:	08015038 	.word	0x08015038

0800c974 <proc_rx_data>:
{
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	b091      	sub	sp, #68	; 0x44
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	4605      	mov	r5, r0
 800c97e:	460e      	mov	r6, r1
 800c980:	4614      	mov	r4, r2
 800c982:	4698      	mov	r8, r3
 800c984:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 800c988:	2200      	movs	r2, #0
 800c98a:	2300      	movs	r3, #0
 800c98c:	4601      	mov	r1, r0
 800c98e:	48c0      	ldr	r0, [pc, #768]	; (800cc90 <proc_rx_data+0x31c>)
 800c990:	f001 faa4 	bl	800dedc <z_impl_k_msgq_get>
    uint32_t cur_msg = 0;
 800c994:	4648      	mov	r0, r9
    for (uint8_t i = 0; i < len; ++i) {
 800c996:	4649      	mov	r1, r9
 800c998:	e017      	b.n	800c9ca <proc_rx_data+0x56>
        bit = input & BIT(0);
 800c99a:	f002 0c01 	and.w	ip, r2, #1
        output |= bit;
 800c99e:	ea49 0c0c 	orr.w	ip, r9, ip
        output = output << 1;
 800c9a2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c9a6:	fa5f f98c 	uxtb.w	r9, ip
        input = input >> 1;
 800c9aa:	0852      	lsrs	r2, r2, #1
        pos++;
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	b2db      	uxtb	r3, r3
    while( pos < 7 ) {
 800c9b0:	2b06      	cmp	r3, #6
 800c9b2:	d9f2      	bls.n	800c99a <proc_rx_data+0x26>
    bit = input & BIT(0);
 800c9b4:	f002 0201 	and.w	r2, r2, #1
    output |= bit;
 800c9b8:	ea42 0209 	orr.w	r2, r2, r9
        recv_data[i] = reverse(recv_data[i]);
 800c9bc:	f88e 2000 	strb.w	r2, [lr]
        cur_msg |= (recv_data[i]) << i*8;
 800c9c0:	00cb      	lsls	r3, r1, #3
 800c9c2:	409a      	lsls	r2, r3
 800c9c4:	4310      	orrs	r0, r2
    for (uint8_t i = 0; i < len; ++i) {
 800c9c6:	3101      	adds	r1, #1
 800c9c8:	b2c9      	uxtb	r1, r1
 800c9ca:	42b1      	cmp	r1, r6
 800c9cc:	d204      	bcs.n	800c9d8 <proc_rx_data+0x64>
        recv_data[i] = reverse(recv_data[i]);
 800c9ce:	eb05 0e01 	add.w	lr, r5, r1
 800c9d2:	5c6a      	ldrb	r2, [r5, r1]
    uint8_t pos = 0;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e7eb      	b.n	800c9b0 <proc_rx_data+0x3c>
}


static inline void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write)
{
    uint8_t pos = 0;
 800c9d8:	2300      	movs	r3, #0
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800c9da:	4619      	mov	r1, r3
 800c9dc:	e094      	b.n	800cb08 <proc_rx_data+0x194>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 800c9de:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800c9e0:	1c9a      	adds	r2, r3, #2
 800c9e2:	4295      	cmp	r5, r2
 800c9e4:	f280 808e 	bge.w	800cb04 <proc_rx_data+0x190>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c9e8:	1aee      	subs	r6, r5, r3
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	fa02 fc06 	lsl.w	ip, r2, r6
 800c9f0:	7826      	ldrb	r6, [r4, #0]
 800c9f2:	ea26 060c 	bic.w	r6, r6, ip
 800c9f6:	7026      	strb	r6, [r4, #0]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c9f8:	40aa      	lsls	r2, r5
 800c9fa:	4002      	ands	r2, r0
 800c9fc:	40da      	lsrs	r2, r3
 800c9fe:	4332      	orrs	r2, r6
 800ca00:	7022      	strb	r2, [r4, #0]
        (*pos)++;
 800ca02:	3501      	adds	r5, #1
 800ca04:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800ca06:	e7eb      	b.n	800c9e0 <proc_rx_data+0x6c>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 800ca08:	f104 0c01 	add.w	ip, r4, #1
 800ca0c:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800ca0e:	1cda      	adds	r2, r3, #3
 800ca10:	4295      	cmp	r5, r2
 800ca12:	f280 808d 	bge.w	800cb30 <proc_rx_data+0x1bc>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800ca16:	1aee      	subs	r6, r5, r3
 800ca18:	2201      	movs	r2, #1
 800ca1a:	fa02 fe06 	lsl.w	lr, r2, r6
 800ca1e:	f89c 6000 	ldrb.w	r6, [ip]
 800ca22:	ea26 060e 	bic.w	r6, r6, lr
 800ca26:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800ca2a:	40aa      	lsls	r2, r5
 800ca2c:	4002      	ands	r2, r0
 800ca2e:	40da      	lsrs	r2, r3
 800ca30:	4332      	orrs	r2, r6
 800ca32:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 800ca36:	3501      	adds	r5, #1
 800ca38:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800ca3a:	e7e8      	b.n	800ca0e <proc_rx_data+0x9a>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 800ca3c:	f104 0c02 	add.w	ip, r4, #2
 800ca40:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800ca42:	1d1a      	adds	r2, r3, #4
 800ca44:	4295      	cmp	r5, r2
 800ca46:	da75      	bge.n	800cb34 <proc_rx_data+0x1c0>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800ca48:	1aee      	subs	r6, r5, r3
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	fa02 fe06 	lsl.w	lr, r2, r6
 800ca50:	f89c 6000 	ldrb.w	r6, [ip]
 800ca54:	ea26 060e 	bic.w	r6, r6, lr
 800ca58:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800ca5c:	40aa      	lsls	r2, r5
 800ca5e:	4002      	ands	r2, r0
 800ca60:	40da      	lsrs	r2, r3
 800ca62:	4332      	orrs	r2, r6
 800ca64:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 800ca68:	3501      	adds	r5, #1
 800ca6a:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800ca6c:	e7e9      	b.n	800ca42 <proc_rx_data+0xce>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 800ca6e:	f104 0c03 	add.w	ip, r4, #3
 800ca72:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	4295      	cmp	r5, r2
 800ca78:	da5e      	bge.n	800cb38 <proc_rx_data+0x1c4>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800ca7a:	1aee      	subs	r6, r5, r3
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	fa02 fe06 	lsl.w	lr, r2, r6
 800ca82:	f89c 6000 	ldrb.w	r6, [ip]
 800ca86:	ea26 060e 	bic.w	r6, r6, lr
 800ca8a:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800ca8e:	40aa      	lsls	r2, r5
 800ca90:	4002      	ands	r2, r0
 800ca92:	40da      	lsrs	r2, r3
 800ca94:	4332      	orrs	r2, r6
 800ca96:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 800ca9a:	3501      	adds	r5, #1
 800ca9c:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800ca9e:	e7e9      	b.n	800ca74 <proc_rx_data+0x100>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 800caa0:	f104 0c04 	add.w	ip, r4, #4
 800caa4:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	4295      	cmp	r5, r2
 800caaa:	da47      	bge.n	800cb3c <proc_rx_data+0x1c8>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800caac:	1aee      	subs	r6, r5, r3
 800caae:	2201      	movs	r2, #1
 800cab0:	fa02 fe06 	lsl.w	lr, r2, r6
 800cab4:	f89c 6000 	ldrb.w	r6, [ip]
 800cab8:	ea26 060e 	bic.w	r6, r6, lr
 800cabc:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800cac0:	40aa      	lsls	r2, r5
 800cac2:	4002      	ands	r2, r0
 800cac4:	40da      	lsrs	r2, r3
 800cac6:	4332      	orrs	r2, r6
 800cac8:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 800cacc:	3501      	adds	r5, #1
 800cace:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800cad0:	e7e9      	b.n	800caa6 <proc_rx_data+0x132>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
                extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 800cad2:	f104 0c05 	add.w	ip, r4, #5
 800cad6:	461d      	mov	r5, r3
    while ( *pos < start_pos + field_len ) {
 800cad8:	1cda      	adds	r2, r3, #3
 800cada:	4295      	cmp	r5, r2
 800cadc:	da30      	bge.n	800cb40 <proc_rx_data+0x1cc>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800cade:	1aee      	subs	r6, r5, r3
 800cae0:	2201      	movs	r2, #1
 800cae2:	fa02 fe06 	lsl.w	lr, r2, r6
 800cae6:	f89c 6000 	ldrb.w	r6, [ip]
 800caea:	ea26 060e 	bic.w	r6, r6, lr
 800caee:	f88c 6000 	strb.w	r6, [ip]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800caf2:	40aa      	lsls	r2, r5
 800caf4:	4002      	ands	r2, r0
 800caf6:	40da      	lsrs	r2, r3
 800caf8:	4332      	orrs	r2, r6
 800cafa:	f88c 2000 	strb.w	r2, [ip]
        (*pos)++;
 800cafe:	3501      	adds	r5, #1
 800cb00:	b2ed      	uxtb	r5, r5
    while ( *pos < start_pos + field_len ) {
 800cb02:	e7e9      	b.n	800cad8 <proc_rx_data+0x164>
 800cb04:	462b      	mov	r3, r5
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800cb06:	3101      	adds	r1, #1
 800cb08:	2905      	cmp	r1, #5
 800cb0a:	dc1b      	bgt.n	800cb44 <proc_rx_data+0x1d0>
        switch (cur_field) {
 800cb0c:	2905      	cmp	r1, #5
 800cb0e:	d8fa      	bhi.n	800cb06 <proc_rx_data+0x192>
 800cb10:	a201      	add	r2, pc, #4	; (adr r2, 800cb18 <proc_rx_data+0x1a4>)
 800cb12:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800cb16:	bf00      	nop
 800cb18:	0800c9df 	.word	0x0800c9df
 800cb1c:	0800ca09 	.word	0x0800ca09
 800cb20:	0800ca3d 	.word	0x0800ca3d
 800cb24:	0800ca6f 	.word	0x0800ca6f
 800cb28:	0800caa1 	.word	0x0800caa1
 800cb2c:	0800cad3 	.word	0x0800cad3
 800cb30:	462b      	mov	r3, r5
 800cb32:	e7e8      	b.n	800cb06 <proc_rx_data+0x192>
 800cb34:	462b      	mov	r3, r5
 800cb36:	e7e6      	b.n	800cb06 <proc_rx_data+0x192>
 800cb38:	462b      	mov	r3, r5
 800cb3a:	e7e4      	b.n	800cb06 <proc_rx_data+0x192>
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	e7e2      	b.n	800cb06 <proc_rx_data+0x192>
 800cb40:	462b      	mov	r3, r5
 800cb42:	e7e0      	b.n	800cb06 <proc_rx_data+0x192>
    if ( (rx_msg->receiver_addr != BROADCAST_ADDR) &&
 800cb44:	7863      	ldrb	r3, [r4, #1]
 800cb46:	2b04      	cmp	r3, #4
 800cb48:	f000 80c2 	beq.w	800ccd0 <proc_rx_data+0x35c>
 800cb4c:	4543      	cmp	r3, r8
 800cb4e:	f000 80c4 	beq.w	800ccda <proc_rx_data+0x366>
        LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg->receiver_addr, cur_dev_addr);
 800cb52:	466d      	mov	r5, sp
 800cb54:	2301      	movs	r3, #1
 800cb56:	813b      	strh	r3, [r7, #8]
 800cb58:	2302      	movs	r3, #2
 800cb5a:	817b      	strh	r3, [r7, #10]
 800cb5c:	b088      	sub	sp, #32
 800cb5e:	4668      	mov	r0, sp
 800cb60:	f110 020c 	adds.w	r2, r0, #12
 800cb64:	d015      	beq.n	800cb92 <proc_rx_data+0x21e>
 800cb66:	2614      	movs	r6, #20
 800cb68:	2301      	movs	r3, #1
 800cb6a:	813b      	strh	r3, [r7, #8]
 800cb6c:	b1a2      	cbz	r2, 800cb98 <proc_rx_data+0x224>
 800cb6e:	2e04      	cmp	r6, #4
 800cb70:	dd12      	ble.n	800cb98 <proc_rx_data+0x224>
 800cb72:	f100 0c10 	add.w	ip, r0, #16
 800cb76:	4b47      	ldr	r3, [pc, #284]	; (800cc94 <proc_rx_data+0x320>)
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	b963      	cbnz	r3, 800cb98 <proc_rx_data+0x224>
		dst[i] = src[i];
 800cb7e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cb82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cb86:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 800cb8a:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cb8e:	3301      	adds	r3, #1
 800cb90:	e7f4      	b.n	800cb7c <proc_rx_data+0x208>
 800cb92:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800cb96:	e7e7      	b.n	800cb68 <proc_rx_data+0x1f4>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	817b      	strh	r3, [r7, #10]
 800cb9c:	b18a      	cbz	r2, 800cbc2 <proc_rx_data+0x24e>
 800cb9e:	2e08      	cmp	r6, #8
 800cba0:	dd0f      	ble.n	800cbc2 <proc_rx_data+0x24e>
 800cba2:	f100 0c14 	add.w	ip, r0, #20
 800cba6:	4b3c      	ldr	r3, [pc, #240]	; (800cc98 <proc_rx_data+0x324>)
 800cba8:	607b      	str	r3, [r7, #4]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	b94b      	cbnz	r3, 800cbc2 <proc_rx_data+0x24e>
		dst[i] = src[i];
 800cbae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cbb2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cbb6:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 800cbba:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	e7f4      	b.n	800cbac <proc_rx_data+0x238>
 800cbc2:	7863      	ldrb	r3, [r4, #1]
 800cbc4:	b182      	cbz	r2, 800cbe8 <proc_rx_data+0x274>
 800cbc6:	2e0c      	cmp	r6, #12
 800cbc8:	dd0e      	ble.n	800cbe8 <proc_rx_data+0x274>
 800cbca:	f100 0418 	add.w	r4, r0, #24
	z_cbprintf_wcpy((int *)dst, &tmp, 1);
}

static inline void z_cbprintf_cxx_store_arg(uint8_t *dst, unsigned char arg)
{
	int tmp = arg + 0;
 800cbce:	607b      	str	r3, [r7, #4]
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	b94b      	cbnz	r3, 800cbe8 <proc_rx_data+0x274>
		dst[i] = src[i];
 800cbd4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cbd8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cbdc:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 800cbe0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	e7f4      	b.n	800cbd2 <proc_rx_data+0x25e>
 800cbe8:	b18a      	cbz	r2, 800cc0e <proc_rx_data+0x29a>
 800cbea:	2e10      	cmp	r6, #16
 800cbec:	dd0f      	ble.n	800cc0e <proc_rx_data+0x29a>
 800cbee:	f100 041c 	add.w	r4, r0, #28
 800cbf2:	f8c7 8004 	str.w	r8, [r7, #4]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	b94b      	cbnz	r3, 800cc0e <proc_rx_data+0x29a>
		dst[i] = src[i];
 800cbfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800cbfe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cc02:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 800cc06:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	e7f4      	b.n	800cbf8 <proc_rx_data+0x284>
 800cc0e:	2e13      	cmp	r6, #19
 800cc10:	dd29      	ble.n	800cc66 <proc_rx_data+0x2f2>
 800cc12:	2314      	movs	r3, #20
 800cc14:	b12a      	cbz	r2, 800cc22 <proc_rx_data+0x2ae>
 800cc16:	2100      	movs	r1, #0
 800cc18:	6079      	str	r1, [r7, #4]
 800cc1a:	2105      	movs	r1, #5
 800cc1c:	7139      	strb	r1, [r7, #4]
 800cc1e:	6879      	ldr	r1, [r7, #4]
 800cc20:	60c1      	str	r1, [r0, #12]
 800cc22:	2100      	movs	r1, #0
 800cc24:	2004      	movs	r0, #4
 800cc26:	f360 1188 	bfi	r1, r0, #6, #3
 800cc2a:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 800cc2e:	f363 2152 	bfi	r1, r3, #9, #10
 800cc32:	2300      	movs	r3, #0
 800cc34:	4819      	ldr	r0, [pc, #100]	; (800cc9c <proc_rx_data+0x328>)
 800cc36:	f004 fd75 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800cc3a:	46ad      	mov	sp, r5
        LOG_DBG("Packet is filtered");
 800cc3c:	466c      	mov	r4, sp
 800cc3e:	2301      	movs	r3, #1
 800cc40:	813b      	strh	r3, [r7, #8]
 800cc42:	2302      	movs	r3, #2
 800cc44:	817b      	strh	r3, [r7, #10]
 800cc46:	4b16      	ldr	r3, [pc, #88]	; (800cca0 <proc_rx_data+0x32c>)
 800cc48:	607b      	str	r3, [r7, #4]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	b973      	cbnz	r3, 800cc6c <proc_rx_data+0x2f8>
		dst[i] = src[i];
 800cc4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cc52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc56:	f852 1c3c 	ldr.w	r1, [r2, #-60]
 800cc5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800cc5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cc62:	3301      	adds	r3, #1
 800cc64:	e7f2      	b.n	800cc4c <proc_rx_data+0x2d8>
        LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg->receiver_addr, cur_dev_addr);
 800cc66:	f06f 031b 	mvn.w	r3, #27
 800cc6a:	e7d3      	b.n	800cc14 <proc_rx_data+0x2a0>
        LOG_DBG("Packet is filtered");
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	817b      	strh	r3, [r7, #10]
 800cc70:	4b09      	ldr	r3, [pc, #36]	; (800cc98 <proc_rx_data+0x324>)
 800cc72:	607b      	str	r3, [r7, #4]
 800cc74:	2300      	movs	r3, #0
 800cc76:	b9ab      	cbnz	r3, 800cca4 <proc_rx_data+0x330>
		dst[i] = src[i];
 800cc78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cc7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc80:	f852 1c3c 	ldr.w	r1, [r2, #-60]
 800cc84:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cc88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = 0; i < len; i++) {
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	e7f2      	b.n	800cc76 <proc_rx_data+0x302>
 800cc90:	2000087c 	.word	0x2000087c
 800cc94:	0801701c 	.word	0x0801701c
 800cc98:	08017044 	.word	0x08017044
 800cc9c:	08015038 	.word	0x08015038
 800cca0:	08017054 	.word	0x08017054
 800cca4:	2500      	movs	r5, #0
 800cca6:	607d      	str	r5, [r7, #4]
 800cca8:	2303      	movs	r3, #3
 800ccaa:	713b      	strb	r3, [r7, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	637b      	str	r3, [r7, #52]	; 0x34
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	2304      	movs	r3, #4
 800ccb4:	f363 1188 	bfi	r1, r3, #6, #3
 800ccb8:	230c      	movs	r3, #12
 800ccba:	f363 2152 	bfi	r1, r3, #9, #10
 800ccbe:	462b      	mov	r3, r5
 800ccc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ccc4:	4806      	ldr	r0, [pc, #24]	; (800cce0 <proc_rx_data+0x36c>)
 800ccc6:	f004 fd2d 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800ccca:	46a5      	mov	sp, r4
        return false;
 800cccc:	4628      	mov	r0, r5
 800ccce:	e000      	b.n	800ccd2 <proc_rx_data+0x35e>
    return true;
 800ccd0:	2001      	movs	r0, #1
}
 800ccd2:	3744      	adds	r7, #68	; 0x44
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return true;
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e7f9      	b.n	800ccd2 <proc_rx_data+0x35e>
 800ccde:	bf00      	nop
 800cce0:	08015038 	.word	0x08015038

0800cce4 <proc_tx_data>:
{
 800cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce8:	460c      	mov	r4, r1
 800ccea:	4615      	mov	r5, r2
 800ccec:	461f      	mov	r7, r3
 800ccee:	2600      	movs	r6, #0
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 800ccf0:	4b78      	ldr	r3, [pc, #480]	; (800ced4 <proc_tx_data+0x1f0>)
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (k_msgq_num_used_get(&msgq_tx_msg_prio)) {
 800ccf4:	b953      	cbnz	r3, 800cd0c <proc_tx_data+0x28>
 800ccf6:	4b78      	ldr	r3, [pc, #480]	; (800ced8 <proc_tx_data+0x1f4>)
 800ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    } else if (k_msgq_num_used_get(&msgq_tx_msg)) {
 800ccfa:	b98b      	cbnz	r3, 800cd20 <proc_tx_data+0x3c>
        current_state = *current_state.next;
 800ccfc:	4b77      	ldr	r3, [pc, #476]	; (800cedc <proc_tx_data+0x1f8>)
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd04:	e883 0003 	stmia.w	r3, {r0, r1}
        return false;
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e0e0      	b.n	800cece <proc_tx_data+0x1ea>
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4639      	mov	r1, r7
 800cd12:	4870      	ldr	r0, [pc, #448]	; (800ced4 <proc_tx_data+0x1f0>)
 800cd14:	f001 f8e2 	bl	800dedc <z_impl_k_msgq_get>
    uint8_t pos = 0;
 800cd18:	2100      	movs	r1, #0
    uint32_t new_msg = 0;
 800cd1a:	460a      	mov	r2, r1
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800cd1c:	468c      	mov	ip, r1
 800cd1e:	e08e      	b.n	800ce3e <proc_tx_data+0x15a>
 800cd20:	2200      	movs	r2, #0
 800cd22:	2300      	movs	r3, #0
 800cd24:	4639      	mov	r1, r7
 800cd26:	486c      	ldr	r0, [pc, #432]	; (800ced8 <proc_tx_data+0x1f4>)
 800cd28:	f001 f8d8 	bl	800dedc <z_impl_k_msgq_get>
        msgq = &msgq_tx_msg;
 800cd2c:	e7f4      	b.n	800cd18 <proc_tx_data+0x34>
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800cd2e:	f897 8000 	ldrb.w	r8, [r7]
 800cd32:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 800cd34:	1c8b      	adds	r3, r1, #2
 800cd36:	4298      	cmp	r0, r3
 800cd38:	da7e      	bge.n	800ce38 <proc_tx_data+0x154>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	fa03 fe00 	lsl.w	lr, r3, r0
 800cd40:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800cd44:	1a42      	subs	r2, r0, r1
 800cd46:	fa03 f202 	lsl.w	r2, r3, r2
 800cd4a:	ea08 0202 	and.w	r2, r8, r2
 800cd4e:	408a      	lsls	r2, r1
 800cd50:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800cd54:	4418      	add	r0, r3
 800cd56:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800cd58:	e7ec      	b.n	800cd34 <proc_tx_data+0x50>
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 800cd5a:	f897 8001 	ldrb.w	r8, [r7, #1]
 800cd5e:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 800cd60:	1ccb      	adds	r3, r1, #3
 800cd62:	4298      	cmp	r0, r3
 800cd64:	f280 8080 	bge.w	800ce68 <proc_tx_data+0x184>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800cd68:	2301      	movs	r3, #1
 800cd6a:	fa03 fe00 	lsl.w	lr, r3, r0
 800cd6e:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800cd72:	1a42      	subs	r2, r0, r1
 800cd74:	fa03 f202 	lsl.w	r2, r3, r2
 800cd78:	ea08 0202 	and.w	r2, r8, r2
 800cd7c:	408a      	lsls	r2, r1
 800cd7e:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800cd82:	4418      	add	r0, r3
 800cd84:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800cd86:	e7eb      	b.n	800cd60 <proc_tx_data+0x7c>
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 800cd88:	f897 8002 	ldrb.w	r8, [r7, #2]
 800cd8c:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 800cd8e:	1d0b      	adds	r3, r1, #4
 800cd90:	4298      	cmp	r0, r3
 800cd92:	da6b      	bge.n	800ce6c <proc_tx_data+0x188>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800cd94:	2301      	movs	r3, #1
 800cd96:	fa03 fe00 	lsl.w	lr, r3, r0
 800cd9a:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800cd9e:	1a42      	subs	r2, r0, r1
 800cda0:	fa03 f202 	lsl.w	r2, r3, r2
 800cda4:	ea08 0202 	and.w	r2, r8, r2
 800cda8:	408a      	lsls	r2, r1
 800cdaa:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800cdae:	4418      	add	r0, r3
 800cdb0:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800cdb2:	e7ec      	b.n	800cd8e <proc_tx_data+0xaa>
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 800cdb4:	f897 8003 	ldrb.w	r8, [r7, #3]
 800cdb8:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 800cdba:	1c4b      	adds	r3, r1, #1
 800cdbc:	4298      	cmp	r0, r3
 800cdbe:	da57      	bge.n	800ce70 <proc_tx_data+0x18c>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	fa03 fe00 	lsl.w	lr, r3, r0
 800cdc6:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800cdca:	1a42      	subs	r2, r0, r1
 800cdcc:	fa03 f202 	lsl.w	r2, r3, r2
 800cdd0:	ea08 0202 	and.w	r2, r8, r2
 800cdd4:	408a      	lsls	r2, r1
 800cdd6:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800cdda:	4418      	add	r0, r3
 800cddc:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800cdde:	e7ec      	b.n	800cdba <proc_tx_data+0xd6>
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 800cde0:	f897 8004 	ldrb.w	r8, [r7, #4]
 800cde4:	4608      	mov	r0, r1
    while ( *pos < start_pos + field_len ) {
 800cde6:	1c4b      	adds	r3, r1, #1
 800cde8:	4298      	cmp	r0, r3
 800cdea:	da43      	bge.n	800ce74 <proc_tx_data+0x190>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800cdec:	2301      	movs	r3, #1
 800cdee:	fa03 fe00 	lsl.w	lr, r3, r0
 800cdf2:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800cdf6:	1a42      	subs	r2, r0, r1
 800cdf8:	fa03 f202 	lsl.w	r2, r3, r2
 800cdfc:	ea08 0202 	and.w	r2, r8, r2
 800ce00:	408a      	lsls	r2, r1
 800ce02:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800ce06:	4418      	add	r0, r3
 800ce08:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800ce0a:	e7ec      	b.n	800cde6 <proc_tx_data+0x102>
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 800ce0c:	f897 8005 	ldrb.w	r8, [r7, #5]
 800ce10:	460b      	mov	r3, r1
    while ( *pos < start_pos + field_len ) {
 800ce12:	1cc8      	adds	r0, r1, #3
 800ce14:	4283      	cmp	r3, r0
 800ce16:	da2f      	bge.n	800ce78 <proc_tx_data+0x194>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800ce18:	2001      	movs	r0, #1
 800ce1a:	fa00 fe03 	lsl.w	lr, r0, r3
 800ce1e:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800ce22:	1a5a      	subs	r2, r3, r1
 800ce24:	fa00 f202 	lsl.w	r2, r0, r2
 800ce28:	ea08 0202 	and.w	r2, r8, r2
 800ce2c:	408a      	lsls	r2, r1
 800ce2e:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800ce32:	4403      	add	r3, r0
 800ce34:	b2db      	uxtb	r3, r3
    while ( *pos < start_pos + field_len ) {
 800ce36:	e7ec      	b.n	800ce12 <proc_tx_data+0x12e>
 800ce38:	4601      	mov	r1, r0
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800ce3a:	f10c 0c01 	add.w	ip, ip, #1
 800ce3e:	f1bc 0f05 	cmp.w	ip, #5
 800ce42:	dc1b      	bgt.n	800ce7c <proc_tx_data+0x198>
        switch (cur_field) {
 800ce44:	f1bc 0f05 	cmp.w	ip, #5
 800ce48:	d8f7      	bhi.n	800ce3a <proc_tx_data+0x156>
 800ce4a:	a301      	add	r3, pc, #4	; (adr r3, 800ce50 <proc_tx_data+0x16c>)
 800ce4c:	f853 f02c 	ldr.w	pc, [r3, ip, lsl #2]
 800ce50:	0800cd2f 	.word	0x0800cd2f
 800ce54:	0800cd5b 	.word	0x0800cd5b
 800ce58:	0800cd89 	.word	0x0800cd89
 800ce5c:	0800cdb5 	.word	0x0800cdb5
 800ce60:	0800cde1 	.word	0x0800cde1
 800ce64:	0800ce0d 	.word	0x0800ce0d
 800ce68:	4601      	mov	r1, r0
 800ce6a:	e7e6      	b.n	800ce3a <proc_tx_data+0x156>
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	e7e4      	b.n	800ce3a <proc_tx_data+0x156>
 800ce70:	4601      	mov	r1, r0
 800ce72:	e7e2      	b.n	800ce3a <proc_tx_data+0x156>
 800ce74:	4601      	mov	r1, r0
 800ce76:	e7e0      	b.n	800ce3a <proc_tx_data+0x156>
 800ce78:	4619      	mov	r1, r3
 800ce7a:	e7de      	b.n	800ce3a <proc_tx_data+0x156>
    for (uint8_t i = 0; i < len; ++i) {
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	e012      	b.n	800cea6 <proc_tx_data+0x1c2>
        bit = input & BIT(0);
 800ce80:	f00c 0301 	and.w	r3, ip, #1
        output |= bit;
 800ce84:	4333      	orrs	r3, r6
        output = output << 1;
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	b2de      	uxtb	r6, r3
        input = input >> 1;
 800ce8a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        pos++;
 800ce8e:	3001      	adds	r0, #1
 800ce90:	b2c0      	uxtb	r0, r0
    while( pos < 7 ) {
 800ce92:	2806      	cmp	r0, #6
 800ce94:	d9f4      	bls.n	800ce80 <proc_tx_data+0x19c>
    bit = input & BIT(0);
 800ce96:	f00c 0c01 	and.w	ip, ip, #1
    output |= bit;
 800ce9a:	ea46 0c0c 	orr.w	ip, r6, ip
        *(tx_data + i) = reverse(*(tx_data + i));
 800ce9e:	f88e c000 	strb.w	ip, [lr]
    for (uint8_t i = 0; i < len; ++i) {
 800cea2:	3101      	adds	r1, #1
 800cea4:	b2c9      	uxtb	r1, r1
 800cea6:	42a9      	cmp	r1, r5
 800cea8:	d210      	bcs.n	800cecc <proc_tx_data+0x1e8>
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 800ceaa:	00cb      	lsls	r3, r1, #3
 800ceac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ceb0:	fa0c fc03 	lsl.w	ip, ip, r3
 800ceb4:	ea0c 0c02 	and.w	ip, ip, r2
 800ceb8:	fa2c fc03 	lsr.w	ip, ip, r3
 800cebc:	eb04 0e01 	add.w	lr, r4, r1
 800cec0:	fa5f fc8c 	uxtb.w	ip, ip
 800cec4:	f804 c001 	strb.w	ip, [r4, r1]
    uint8_t pos = 0;
 800cec8:	2000      	movs	r0, #0
 800ceca:	e7e2      	b.n	800ce92 <proc_tx_data+0x1ae>
    return true;
 800cecc:	2001      	movs	r0, #1
}
 800cece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced2:	bf00      	nop
 800ced4:	200008e4 	.word	0x200008e4
 800ced8:	200008b0 	.word	0x200008b0
 800cedc:	2000195c 	.word	0x2000195c

0800cee0 <modem_fun>:
{
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	4604      	mov	r4, r0
 800cee4:	460e      	mov	r6, r1
    if (!proc_tx_data(cur_queue, tx_buf, sizeof(tx_buf), &tx_msg)) {
 800cee6:	4b31      	ldr	r3, [pc, #196]	; (800cfac <modem_fun+0xcc>)
 800cee8:	2202      	movs	r2, #2
 800ceea:	4931      	ldr	r1, [pc, #196]	; (800cfb0 <modem_fun+0xd0>)
 800ceec:	2000      	movs	r0, #0
 800ceee:	f7ff fef9 	bl	800cce4 <proc_tx_data>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d035      	beq.n	800cf62 <modem_fun+0x82>
	__asm__ volatile(
 800cef6:	f04f 0310 	mov.w	r3, #16
 800cefa:	f3ef 8211 	mrs	r2, BASEPRI
 800cefe:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf02:	f3bf 8f6f 	isb	sy
    key = k_spin_lock(&spin);
 800cf06:	4b2b      	ldr	r3, [pc, #172]	; (800cfb4 <modem_fun+0xd4>)
 800cf08:	601a      	str	r2, [r3, #0]
	const struct lora_driver_api *api =
 800cf0a:	68a3      	ldr	r3, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	4611      	mov	r1, r2
 800cf12:	4620      	mov	r0, r4
 800cf14:	4798      	blx	r3
    lora_cfg->tx = true;
 800cf16:	2301      	movs	r3, #1
 800cf18:	7373      	strb	r3, [r6, #13]
	const struct lora_driver_api *api =
 800cf1a:	68a3      	ldr	r3, [r4, #8]
	return api->config(dev, config);
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4620      	mov	r0, r4
 800cf22:	4798      	blx	r3
    if (rc < 0) {
 800cf24:	1e05      	subs	r5, r0, #0
 800cf26:	db22      	blt.n	800cf6e <modem_fun+0x8e>
	const struct lora_driver_api *api =
 800cf28:	68a3      	ldr	r3, [r4, #8]
	return api->send(dev, data, data_len);
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	4920      	ldr	r1, [pc, #128]	; (800cfb0 <modem_fun+0xd0>)
 800cf30:	4620      	mov	r0, r4
 800cf32:	4798      	blx	r3
    if (rc < 0) {
 800cf34:	1e05      	subs	r5, r0, #0
 800cf36:	db30      	blt.n	800cf9a <modem_fun+0xba>
    start_rx(lora_dev, lora_cfg);
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f7ff fb6e 	bl	800c61c <start_rx>
    if (tx_msg.message_type == MESSAGE_TYPE_SYNC)
 800cf40:	4b1a      	ldr	r3, [pc, #104]	; (800cfac <modem_fun+0xcc>)
 800cf42:	789b      	ldrb	r3, [r3, #2]
 800cf44:	2b05      	cmp	r3, #5
 800cf46:	d02f      	beq.n	800cfa8 <modem_fun+0xc8>
    current_state = recv_state;
 800cf48:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <modem_fun+0xd8>)
 800cf4a:	4a1c      	ldr	r2, [pc, #112]	; (800cfbc <modem_fun+0xdc>)
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	711a      	strb	r2, [r3, #4]
    k_spin_unlock(&spin, key);
 800cf52:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <modem_fun+0xd4>)
 800cf54:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
}
 800cf5e:	4628      	mov	r0, r5
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
        start_rx(lora_dev, lora_cfg);
 800cf62:	4631      	mov	r1, r6
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff fb59 	bl	800c61c <start_rx>
        return 1;
 800cf6a:	2501      	movs	r5, #1
 800cf6c:	e7f7      	b.n	800cf5e <modem_fun+0x7e>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800cf6e:	2200      	movs	r2, #0
 800cf70:	2300      	movs	r3, #0
 800cf72:	490e      	ldr	r1, [pc, #56]	; (800cfac <modem_fun+0xcc>)
 800cf74:	2000      	movs	r0, #0
 800cf76:	f000 ff55 	bl	800de24 <z_impl_k_msgq_put>
        current_state = recv_state;
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <modem_fun+0xd8>)
 800cf7c:	4a0f      	ldr	r2, [pc, #60]	; (800cfbc <modem_fun+0xdc>)
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	2200      	movs	r2, #0
 800cf82:	711a      	strb	r2, [r3, #4]
        start_rx(lora_dev, lora_cfg);
 800cf84:	4631      	mov	r1, r6
 800cf86:	4620      	mov	r0, r4
 800cf88:	f7ff fb48 	bl	800c61c <start_rx>
        k_spin_unlock(&spin, key);
 800cf8c:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <modem_fun+0xd4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
        return rc;
 800cf98:	e7e1      	b.n	800cf5e <modem_fun+0x7e>
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4903      	ldr	r1, [pc, #12]	; (800cfac <modem_fun+0xcc>)
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f000 ff3f 	bl	800de24 <z_impl_k_msgq_put>
 800cfa6:	e7c7      	b.n	800cf38 <modem_fun+0x58>
        rc = 1;
 800cfa8:	2501      	movs	r5, #1
 800cfaa:	e7cd      	b.n	800cf48 <modem_fun+0x68>
 800cfac:	2000194c 	.word	0x2000194c
 800cfb0:	20001948 	.word	0x20001948
 800cfb4:	20001944 	.word	0x20001944
 800cfb8:	2000195c 	.word	0x2000195c
 800cfbc:	08017084 	.word	0x08017084

0800cfc0 <get_rssi>:
{
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	4601      	mov	r1, r0
	return z_impl_k_msgq_get(msgq, data, timeout);
 800cfc4:	220a      	movs	r2, #10
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	4801      	ldr	r0, [pc, #4]	; (800cfd0 <get_rssi+0x10>)
 800cfca:	f000 ff87 	bl	800dedc <z_impl_k_msgq_get>
}
 800cfce:	bd08      	pop	{r3, pc}
 800cfd0:	20000848 	.word	0x20000848

0800cfd4 <set_msg>:
{
 800cfd4:	b508      	push	{r3, lr}
    if (prio)
 800cfd6:	b131      	cbz	r1, 800cfe6 <set_msg+0x12>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2300      	movs	r3, #0
 800cfdc:	4601      	mov	r1, r0
 800cfde:	4805      	ldr	r0, [pc, #20]	; (800cff4 <set_msg+0x20>)
 800cfe0:	f000 ff20 	bl	800de24 <z_impl_k_msgq_put>
}
 800cfe4:	bd08      	pop	{r3, pc}
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4601      	mov	r1, r0
 800cfec:	4802      	ldr	r0, [pc, #8]	; (800cff8 <set_msg+0x24>)
 800cfee:	f000 ff19 	bl	800de24 <z_impl_k_msgq_put>
 800cff2:	e7f7      	b.n	800cfe4 <set_msg+0x10>
 800cff4:	200008e4 	.word	0x200008e4
 800cff8:	200008b0 	.word	0x200008b0

0800cffc <set_buzzer_mode>:
{
 800cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	b084      	sub	sp, #16
 800d002:	4604      	mov	r4, r0
    uint8_t i = 0;
 800d004:	e003      	b.n	800d00e <set_buzzer_mode+0x12>
	return z_impl_k_sleep(timeout);
 800d006:	2032      	movs	r0, #50	; 0x32
 800d008:	2100      	movs	r1, #0
 800d00a:	f001 fe19 	bl	800ec40 <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
 800d00e:	2200      	movs	r2, #0
 800d010:	2300      	movs	r3, #0
 800d012:	48b7      	ldr	r0, [pc, #732]	; (800d2f0 <set_buzzer_mode+0x2f4>)
 800d014:	f000 ffc2 	bl	800df9c <z_impl_k_mutex_lock>
    while (k_mutex_lock(&mtx_buzzer, K_NO_WAIT)) {
 800d018:	2800      	cmp	r0, #0
 800d01a:	d1f4      	bne.n	800d006 <set_buzzer_mode+0xa>
    switch (buzzer_mode) {
 800d01c:	2c02      	cmp	r4, #2
 800d01e:	d043      	beq.n	800d0a8 <set_buzzer_mode+0xac>
 800d020:	2c03      	cmp	r4, #3
 800d022:	f000 80aa 	beq.w	800d17a <set_buzzer_mode+0x17e>
 800d026:	2c01      	cmp	r4, #1
 800d028:	f000 816a 	beq.w	800d300 <set_buzzer_mode+0x304>
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800d02c:	4bb1      	ldr	r3, [pc, #708]	; (800d2f4 <set_buzzer_mode+0x2f8>)
 800d02e:	681d      	ldr	r5, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800d030:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	aa02      	add	r2, sp, #8
 800d036:	2102      	movs	r1, #2
 800d038:	4628      	mov	r0, r5
 800d03a:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800d03c:	bb70      	cbnz	r0, 800d09c <set_buzzer_mode+0xa0>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800d03e:	9c02      	ldr	r4, [sp, #8]
 800d040:	9e03      	ldr	r6, [sp, #12]
 800d042:	00b2      	lsls	r2, r6, #2
 800d044:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800d048:	00a3      	lsls	r3, r4, #2
 800d04a:	191b      	adds	r3, r3, r4
 800d04c:	eb46 0202 	adc.w	r2, r6, r2
 800d050:	00d2      	lsls	r2, r2, #3
 800d052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	1b1b      	subs	r3, r3, r4
 800d05a:	eb62 0206 	sbc.w	r2, r2, r6
 800d05e:	0112      	lsls	r2, r2, #4
 800d060:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800d064:	011b      	lsls	r3, r3, #4
 800d066:	191b      	adds	r3, r3, r4
 800d068:	eb46 0602 	adc.w	r6, r6, r2
 800d06c:	01b6      	lsls	r6, r6, #6
 800d06e:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800d072:	019c      	lsls	r4, r3, #6
 800d074:	4aa0      	ldr	r2, [pc, #640]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d076:	2300      	movs	r3, #0
 800d078:	4620      	mov	r0, r4
 800d07a:	4631      	mov	r1, r6
 800d07c:	f7f3 fd5e 	bl	8000b3c <__aeabi_uldivmod>
 800d080:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800d082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d086:	42a3      	cmp	r3, r4
 800d088:	4b9c      	ldr	r3, [pc, #624]	; (800d2fc <set_buzzer_mode+0x300>)
 800d08a:	41b3      	sbcs	r3, r6
 800d08c:	d306      	bcc.n	800d09c <set_buzzer_mode+0xa0>
	api = (struct pwm_driver_api *)dev->api;
 800d08e:	68ab      	ldr	r3, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800d090:	681c      	ldr	r4, [r3, #0]
 800d092:	2300      	movs	r3, #0
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	2102      	movs	r1, #2
 800d098:	4628      	mov	r0, r5
 800d09a:	47a0      	blx	r4
	return z_impl_k_mutex_unlock(mutex);
 800d09c:	4894      	ldr	r0, [pc, #592]	; (800d2f0 <set_buzzer_mode+0x2f4>)
 800d09e:	f001 f807 	bl	800e0b0 <z_impl_k_mutex_unlock>
}
 800d0a2:	b004      	add	sp, #16
 800d0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800d0a8:	4b92      	ldr	r3, [pc, #584]	; (800d2f4 <set_buzzer_mode+0x2f8>)
 800d0aa:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 800d0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	aa02      	add	r2, sp, #8
 800d0b6:	2102      	movs	r1, #2
 800d0b8:	4640      	mov	r0, r8
 800d0ba:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d156      	bne.n	800d16e <set_buzzer_mode+0x172>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800d0c0:	9e02      	ldr	r6, [sp, #8]
 800d0c2:	9f03      	ldr	r7, [sp, #12]
 800d0c4:	00bc      	lsls	r4, r7, #2
 800d0c6:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800d0ca:	00b3      	lsls	r3, r6, #2
 800d0cc:	199b      	adds	r3, r3, r6
 800d0ce:	eb47 0404 	adc.w	r4, r7, r4
 800d0d2:	00e4      	lsls	r4, r4, #3
 800d0d4:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	1b9b      	subs	r3, r3, r6
 800d0dc:	eb64 0407 	sbc.w	r4, r4, r7
 800d0e0:	0124      	lsls	r4, r4, #4
 800d0e2:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	199b      	adds	r3, r3, r6
 800d0ea:	eb47 0404 	adc.w	r4, r7, r4
 800d0ee:	01a4      	lsls	r4, r4, #6
 800d0f0:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800d0f4:	019d      	lsls	r5, r3, #6
 800d0f6:	4a80      	ldr	r2, [pc, #512]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	f7f3 fd1d 	bl	8000b3c <__aeabi_uldivmod>
 800d102:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800d104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d108:	42ab      	cmp	r3, r5
 800d10a:	4b7c      	ldr	r3, [pc, #496]	; (800d2fc <set_buzzer_mode+0x300>)
 800d10c:	41a3      	sbcs	r3, r4
 800d10e:	d32e      	bcc.n	800d16e <set_buzzer_mode+0x172>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800d110:	00ba      	lsls	r2, r7, #2
 800d112:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800d116:	00b3      	lsls	r3, r6, #2
 800d118:	199b      	adds	r3, r3, r6
 800d11a:	eb47 0202 	adc.w	r2, r7, r2
 800d11e:	00d2      	lsls	r2, r2, #3
 800d120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	1b9b      	subs	r3, r3, r6
 800d128:	eb62 0207 	sbc.w	r2, r2, r7
 800d12c:	0112      	lsls	r2, r2, #4
 800d12e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800d132:	011b      	lsls	r3, r3, #4
 800d134:	199e      	adds	r6, r3, r6
 800d136:	eb47 0702 	adc.w	r7, r7, r2
 800d13a:	017f      	lsls	r7, r7, #5
 800d13c:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 800d140:	0176      	lsls	r6, r6, #5
 800d142:	4a6d      	ldr	r2, [pc, #436]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d144:	2300      	movs	r3, #0
 800d146:	4630      	mov	r0, r6
 800d148:	4639      	mov	r1, r7
 800d14a:	f7f3 fcf7 	bl	8000b3c <__aeabi_uldivmod>
 800d14e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800d150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d154:	42b2      	cmp	r2, r6
 800d156:	4a69      	ldr	r2, [pc, #420]	; (800d2fc <set_buzzer_mode+0x300>)
 800d158:	41ba      	sbcs	r2, r7
 800d15a:	d308      	bcc.n	800d16e <set_buzzer_mode+0x172>
	api = (struct pwm_driver_api *)dev->api;
 800d15c:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800d160:	6814      	ldr	r4, [r2, #0]
 800d162:	2200      	movs	r2, #0
 800d164:	9200      	str	r2, [sp, #0]
 800d166:	464a      	mov	r2, r9
 800d168:	2102      	movs	r1, #2
 800d16a:	4640      	mov	r0, r8
 800d16c:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 800d16e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d172:	2100      	movs	r1, #0
 800d174:	f001 fd64 	bl	800ec40 <z_impl_k_sleep>
            break;
 800d178:	e790      	b.n	800d09c <set_buzzer_mode+0xa0>
    switch (buzzer_mode) {
 800d17a:	2500      	movs	r5, #0
 800d17c:	e006      	b.n	800d18c <set_buzzer_mode+0x190>
 800d17e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d182:	2100      	movs	r1, #0
 800d184:	f001 fd5c 	bl	800ec40 <z_impl_k_sleep>
                i++;
 800d188:	3501      	adds	r5, #1
 800d18a:	b2ed      	uxtb	r5, r5
            while (i < 2) {
 800d18c:	2d01      	cmp	r5, #1
 800d18e:	d885      	bhi.n	800d09c <set_buzzer_mode+0xa0>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800d190:	4b58      	ldr	r3, [pc, #352]	; (800d2f4 <set_buzzer_mode+0x2f8>)
 800d192:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800d194:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	aa02      	add	r2, sp, #8
 800d19a:	2102      	movs	r1, #2
 800d19c:	4630      	mov	r0, r6
 800d19e:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d164      	bne.n	800d26e <set_buzzer_mode+0x272>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800d1a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d1a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d1ac:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800d1b0:	ea44 7499 	orr.w	r4, r4, r9, lsr #30
 800d1b4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d1b8:	eb13 0309 	adds.w	r3, r3, r9
 800d1bc:	eb48 0404 	adc.w	r4, r8, r4
 800d1c0:	00e4      	lsls	r4, r4, #3
 800d1c2:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	ebb3 0309 	subs.w	r3, r3, r9
 800d1cc:	eb64 0408 	sbc.w	r4, r4, r8
 800d1d0:	0124      	lsls	r4, r4, #4
 800d1d2:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800d1d6:	011b      	lsls	r3, r3, #4
 800d1d8:	eb13 0309 	adds.w	r3, r3, r9
 800d1dc:	eb48 0404 	adc.w	r4, r8, r4
 800d1e0:	01a4      	lsls	r4, r4, #6
 800d1e2:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800d1e6:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 800d1ea:	4a43      	ldr	r2, [pc, #268]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4650      	mov	r0, sl
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	f7f3 fca3 	bl	8000b3c <__aeabi_uldivmod>
 800d1f6:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1fc:	4553      	cmp	r3, sl
 800d1fe:	4b3f      	ldr	r3, [pc, #252]	; (800d2fc <set_buzzer_mode+0x300>)
 800d200:	41a3      	sbcs	r3, r4
 800d202:	d334      	bcc.n	800d26e <set_buzzer_mode+0x272>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800d204:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d208:	ea42 7299 	orr.w	r2, r2, r9, lsr #30
 800d20c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d210:	eb13 0309 	adds.w	r3, r3, r9
 800d214:	eb48 0202 	adc.w	r2, r8, r2
 800d218:	00d2      	lsls	r2, r2, #3
 800d21a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d21e:	00db      	lsls	r3, r3, #3
 800d220:	ebb3 0309 	subs.w	r3, r3, r9
 800d224:	eb62 0208 	sbc.w	r2, r2, r8
 800d228:	0112      	lsls	r2, r2, #4
 800d22a:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	eb13 0309 	adds.w	r3, r3, r9
 800d234:	eb48 0802 	adc.w	r8, r8, r2
 800d238:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800d23c:	ea48 68d3 	orr.w	r8, r8, r3, lsr #27
 800d240:	015c      	lsls	r4, r3, #5
 800d242:	4a2d      	ldr	r2, [pc, #180]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d244:	2300      	movs	r3, #0
 800d246:	4620      	mov	r0, r4
 800d248:	4641      	mov	r1, r8
 800d24a:	f7f3 fc77 	bl	8000b3c <__aeabi_uldivmod>
 800d24e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800d250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d254:	42a2      	cmp	r2, r4
 800d256:	4a29      	ldr	r2, [pc, #164]	; (800d2fc <set_buzzer_mode+0x300>)
 800d258:	eb72 0208 	sbcs.w	r2, r2, r8
 800d25c:	d307      	bcc.n	800d26e <set_buzzer_mode+0x272>
	api = (struct pwm_driver_api *)dev->api;
 800d25e:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800d260:	6814      	ldr	r4, [r2, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	9200      	str	r2, [sp, #0]
 800d266:	463a      	mov	r2, r7
 800d268:	2102      	movs	r1, #2
 800d26a:	4630      	mov	r0, r6
 800d26c:	47a0      	blx	r4
 800d26e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d272:	2100      	movs	r1, #0
 800d274:	f001 fce4 	bl	800ec40 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800d278:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <set_buzzer_mode+0x2f8>)
 800d27a:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800d27c:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	aa02      	add	r2, sp, #8
 800d282:	2102      	movs	r1, #2
 800d284:	4630      	mov	r0, r6
 800d286:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800d288:	2800      	cmp	r0, #0
 800d28a:	f47f af78 	bne.w	800d17e <set_buzzer_mode+0x182>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800d28e:	9c02      	ldr	r4, [sp, #8]
 800d290:	9f03      	ldr	r7, [sp, #12]
 800d292:	00ba      	lsls	r2, r7, #2
 800d294:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800d298:	00a3      	lsls	r3, r4, #2
 800d29a:	191b      	adds	r3, r3, r4
 800d29c:	eb47 0202 	adc.w	r2, r7, r2
 800d2a0:	00d2      	lsls	r2, r2, #3
 800d2a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	1b1b      	subs	r3, r3, r4
 800d2aa:	eb62 0207 	sbc.w	r2, r2, r7
 800d2ae:	0112      	lsls	r2, r2, #4
 800d2b0:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800d2b4:	011b      	lsls	r3, r3, #4
 800d2b6:	191b      	adds	r3, r3, r4
 800d2b8:	eb47 0702 	adc.w	r7, r7, r2
 800d2bc:	01bf      	lsls	r7, r7, #6
 800d2be:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 800d2c2:	019c      	lsls	r4, r3, #6
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <set_buzzer_mode+0x2fc>)
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4639      	mov	r1, r7
 800d2cc:	f7f3 fc36 	bl	8000b3c <__aeabi_uldivmod>
 800d2d0:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800d2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	4b08      	ldr	r3, [pc, #32]	; (800d2fc <set_buzzer_mode+0x300>)
 800d2da:	41bb      	sbcs	r3, r7
 800d2dc:	f4ff af4f 	bcc.w	800d17e <set_buzzer_mode+0x182>
	api = (struct pwm_driver_api *)dev->api;
 800d2e0:	68b3      	ldr	r3, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800d2e2:	681c      	ldr	r4, [r3, #0]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	2102      	movs	r1, #2
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	47a0      	blx	r4
				  (uint32_t)pulse_cycles, flags);
 800d2ee:	e746      	b.n	800d17e <set_buzzer_mode+0x182>
 800d2f0:	200007cc 	.word	0x200007cc
 800d2f4:	20001958 	.word	0x20001958
 800d2f8:	000f4240 	.word	0x000f4240
 800d2fc:	000f423f 	.word	0x000f423f
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800d300:	4b34      	ldr	r3, [pc, #208]	; (800d3d4 <set_buzzer_mode+0x3d8>)
 800d302:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 800d306:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	aa02      	add	r2, sp, #8
 800d30e:	2102      	movs	r1, #2
 800d310:	4640      	mov	r0, r8
 800d312:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800d314:	2800      	cmp	r0, #0
 800d316:	d156      	bne.n	800d3c6 <set_buzzer_mode+0x3ca>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800d318:	9e02      	ldr	r6, [sp, #8]
 800d31a:	9f03      	ldr	r7, [sp, #12]
 800d31c:	00bc      	lsls	r4, r7, #2
 800d31e:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800d322:	00b3      	lsls	r3, r6, #2
 800d324:	199b      	adds	r3, r3, r6
 800d326:	eb47 0404 	adc.w	r4, r7, r4
 800d32a:	00e4      	lsls	r4, r4, #3
 800d32c:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	1b9b      	subs	r3, r3, r6
 800d334:	eb64 0407 	sbc.w	r4, r4, r7
 800d338:	0124      	lsls	r4, r4, #4
 800d33a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800d33e:	011b      	lsls	r3, r3, #4
 800d340:	199b      	adds	r3, r3, r6
 800d342:	eb47 0404 	adc.w	r4, r7, r4
 800d346:	01a4      	lsls	r4, r4, #6
 800d348:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800d34c:	019d      	lsls	r5, r3, #6
 800d34e:	4a22      	ldr	r2, [pc, #136]	; (800d3d8 <set_buzzer_mode+0x3dc>)
 800d350:	2300      	movs	r3, #0
 800d352:	4628      	mov	r0, r5
 800d354:	4621      	mov	r1, r4
 800d356:	f7f3 fbf1 	bl	8000b3c <__aeabi_uldivmod>
 800d35a:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800d35c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d360:	42ab      	cmp	r3, r5
 800d362:	4b1e      	ldr	r3, [pc, #120]	; (800d3dc <set_buzzer_mode+0x3e0>)
 800d364:	41a3      	sbcs	r3, r4
 800d366:	d32e      	bcc.n	800d3c6 <set_buzzer_mode+0x3ca>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800d368:	00ba      	lsls	r2, r7, #2
 800d36a:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800d36e:	00b3      	lsls	r3, r6, #2
 800d370:	199b      	adds	r3, r3, r6
 800d372:	eb47 0202 	adc.w	r2, r7, r2
 800d376:	00d2      	lsls	r2, r2, #3
 800d378:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	1b9b      	subs	r3, r3, r6
 800d380:	eb62 0207 	sbc.w	r2, r2, r7
 800d384:	0112      	lsls	r2, r2, #4
 800d386:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800d38a:	011b      	lsls	r3, r3, #4
 800d38c:	199e      	adds	r6, r3, r6
 800d38e:	eb47 0702 	adc.w	r7, r7, r2
 800d392:	017f      	lsls	r7, r7, #5
 800d394:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 800d398:	0176      	lsls	r6, r6, #5
 800d39a:	4a0f      	ldr	r2, [pc, #60]	; (800d3d8 <set_buzzer_mode+0x3dc>)
 800d39c:	2300      	movs	r3, #0
 800d39e:	4630      	mov	r0, r6
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	f7f3 fbcb 	bl	8000b3c <__aeabi_uldivmod>
 800d3a6:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800d3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3ac:	42b2      	cmp	r2, r6
 800d3ae:	4a0b      	ldr	r2, [pc, #44]	; (800d3dc <set_buzzer_mode+0x3e0>)
 800d3b0:	41ba      	sbcs	r2, r7
 800d3b2:	d308      	bcc.n	800d3c6 <set_buzzer_mode+0x3ca>
	api = (struct pwm_driver_api *)dev->api;
 800d3b4:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 800d3b8:	6814      	ldr	r4, [r2, #0]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	9200      	str	r2, [sp, #0]
 800d3be:	464a      	mov	r2, r9
 800d3c0:	2102      	movs	r1, #2
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	47a0      	blx	r4
 800d3c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	f001 fc38 	bl	800ec40 <z_impl_k_sleep>
 800d3d0:	e62c      	b.n	800d02c <set_buzzer_mode+0x30>
 800d3d2:	bf00      	nop
 800d3d4:	20001958 	.word	0x20001958
 800d3d8:	000f4240 	.word	0x000f4240
 800d3dc:	000f423f 	.word	0x000f423f

0800d3e0 <irq_routine>:
{
 800d3e0:	b508      	push	{r3, lr}
    irq_gpio_dev = dev;
 800d3e2:	4b03      	ldr	r3, [pc, #12]	; (800d3f0 <irq_routine+0x10>)
 800d3e4:	6018      	str	r0, [r3, #0]
    k_work_submit(&work_button_pressed);
 800d3e6:	4803      	ldr	r0, [pc, #12]	; (800d3f4 <irq_routine+0x14>)
 800d3e8:	f001 f854 	bl	800e494 <k_work_submit>
}
 800d3ec:	bd08      	pop	{r3, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20001964 	.word	0x20001964
 800d3f4:	20001968 	.word	0x20001968

0800d3f8 <wait_app_event>:

int8_t wait_app_event()
{
 800d3f8:	b510      	push	{r4, lr}
	return z_impl_k_poll(events, num_events, timeout);
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2103      	movs	r1, #3
 800d400:	4814      	ldr	r0, [pc, #80]	; (800d454 <wait_app_event+0x5c>)
 800d402:	f002 f8ab 	bl	800f55c <z_impl_k_poll>
    if (k_poll(event_app, APPLICATION_EVENTS_NUM, K_NO_WAIT)) {
 800d406:	b120      	cbz	r0, 800d412 <wait_app_event+0x1a>
        return (-1);
 800d408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d40c:	e020      	b.n	800d450 <wait_app_event+0x58>
    }

    for (int8_t i = 0; i < APPLICATION_EVENTS_NUM; ++i) {
 800d40e:	3001      	adds	r0, #1
 800d410:	b240      	sxtb	r0, r0
 800d412:	2802      	cmp	r0, #2
 800d414:	dc1a      	bgt.n	800d44c <wait_app_event+0x54>
        if (event_app[i].state == K_POLL_STATE_SIGNALED) {
 800d416:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800d41a:	4a0e      	ldr	r2, [pc, #56]	; (800d454 <wait_app_event+0x5c>)
 800d41c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	f3c3 3345 	ubfx	r3, r3, #13, #6
 800d426:	2b01      	cmp	r3, #1
 800d428:	d1f1      	bne.n	800d40e <wait_app_event+0x16>
            /* Processing only one event */
            /* Reset event */
            event_app[i].signal->signaled = 0;
 800d42a:	4613      	mov	r3, r2
 800d42c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800d430:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d434:	6914      	ldr	r4, [r2, #16]
 800d436:	2200      	movs	r2, #0
 800d438:	60a2      	str	r2, [r4, #8]
            event_app[i].state = K_POLL_STATE_NOT_READY;
 800d43a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800d43e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d442:	68cb      	ldr	r3, [r1, #12]
 800d444:	f362 3352 	bfi	r3, r2, #13, #6
 800d448:	60cb      	str	r3, [r1, #12]
            return i;
 800d44a:	e001      	b.n	800d450 <wait_app_event+0x58>
        }
    }
    return (-1);
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d450:	bd10      	pop	{r4, pc}
 800d452:	bf00      	nop
 800d454:	20000378 	.word	0x20000378

0800d458 <rx_err_cb>:
{
    cb_routine(cb_data, RX_TO);
}

void rx_err_cb(const dwt_cb_data_t *cb_data)
{
 800d458:	b508      	push	{r3, lr}
    if (cb_data)
 800d45a:	b128      	cbz	r0, 800d468 <rx_err_cb+0x10>
 800d45c:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800d45e:	2200      	movs	r2, #0
 800d460:	2300      	movs	r3, #0
 800d462:	4804      	ldr	r0, [pc, #16]	; (800d474 <rx_err_cb+0x1c>)
 800d464:	f000 fcde 	bl	800de24 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800d468:	2104      	movs	r1, #4
 800d46a:	4803      	ldr	r0, [pc, #12]	; (800d478 <rx_err_cb+0x20>)
 800d46c:	f002 f922 	bl	800f6b4 <z_impl_k_poll_signal_raise>
    cb_routine(cb_data, RX_ERR);
}
 800d470:	bd08      	pop	{r3, pc}
 800d472:	bf00      	nop
 800d474:	200007e0 	.word	0x200007e0
 800d478:	20000478 	.word	0x20000478

0800d47c <tx_ok_cb>:
{
 800d47c:	b508      	push	{r3, lr}
    if (cb_data)
 800d47e:	b128      	cbz	r0, 800d48c <tx_ok_cb+0x10>
 800d480:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800d482:	2200      	movs	r2, #0
 800d484:	2300      	movs	r3, #0
 800d486:	4804      	ldr	r0, [pc, #16]	; (800d498 <tx_ok_cb+0x1c>)
 800d488:	f000 fccc 	bl	800de24 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800d48c:	2101      	movs	r1, #1
 800d48e:	4803      	ldr	r0, [pc, #12]	; (800d49c <tx_ok_cb+0x20>)
 800d490:	f002 f910 	bl	800f6b4 <z_impl_k_poll_signal_raise>
}
 800d494:	bd08      	pop	{r3, pc}
 800d496:	bf00      	nop
 800d498:	200007e0 	.word	0x200007e0
 800d49c:	20000478 	.word	0x20000478

0800d4a0 <rx_ok_cb>:
{
 800d4a0:	b508      	push	{r3, lr}
    if (cb_data)
 800d4a2:	b128      	cbz	r0, 800d4b0 <rx_ok_cb+0x10>
 800d4a4:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4804      	ldr	r0, [pc, #16]	; (800d4bc <rx_ok_cb+0x1c>)
 800d4ac:	f000 fcba 	bl	800de24 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800d4b0:	2102      	movs	r1, #2
 800d4b2:	4803      	ldr	r0, [pc, #12]	; (800d4c0 <rx_ok_cb+0x20>)
 800d4b4:	f002 f8fe 	bl	800f6b4 <z_impl_k_poll_signal_raise>
}
 800d4b8:	bd08      	pop	{r3, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200007e0 	.word	0x200007e0
 800d4c0:	20000478 	.word	0x20000478

0800d4c4 <rx_to_cb>:
{
 800d4c4:	b508      	push	{r3, lr}
    if (cb_data)
 800d4c6:	b128      	cbz	r0, 800d4d4 <rx_to_cb+0x10>
 800d4c8:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4804      	ldr	r0, [pc, #16]	; (800d4e0 <rx_to_cb+0x1c>)
 800d4d0:	f000 fca8 	bl	800de24 <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800d4d4:	2103      	movs	r1, #3
 800d4d6:	4803      	ldr	r0, [pc, #12]	; (800d4e4 <rx_to_cb+0x20>)
 800d4d8:	f002 f8ec 	bl	800f6b4 <z_impl_k_poll_signal_raise>
}
 800d4dc:	bd08      	pop	{r3, pc}
 800d4de:	bf00      	nop
 800d4e0:	200007e0 	.word	0x200007e0
 800d4e4:	20000478 	.word	0x20000478

0800d4e8 <init_twr_1_poll_ds_twr>:

/*
 * Initiator functions begin
 * */
void init_twr_1_poll_ds_twr(msg_header_t *tx_poll_msg, atomic_t *atomic_twr_status)
{
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	460c      	mov	r4, r1
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
 800d4ee:	f7f7 fc0b 	bl	8004d08 <z_impl_sys_rand32_get>
    auto rand_delay =  ((int32_t) sys_rand32_get()) >> 25;
 800d4f2:	1643      	asrs	r3, r0, #25
    k_msleep(RNG_DELAY_MS + rand_delay);
 800d4f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	return k_sleep(Z_TIMEOUT_MS(ms));
 800d4f8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d4fc:	17d1      	asrs	r1, r2, #31
 800d4fe:	0088      	lsls	r0, r1, #2
 800d500:	ea40 7092 	orr.w	r0, r0, r2, lsr #30
 800d504:	0093      	lsls	r3, r2, #2
 800d506:	189b      	adds	r3, r3, r2
 800d508:	eb41 0100 	adc.w	r1, r1, r0
 800d50c:	18d8      	adds	r0, r3, r3
 800d50e:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800d510:	f001 fb96 	bl	800ec40 <z_impl_k_sleep>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800d514:	2307      	movs	r3, #7
 800d516:	f3bf 8f5b 	dmb	ish
 800d51a:	e854 2f00 	ldrex	r2, [r4]
 800d51e:	e844 3100 	strex	r1, r3, [r4]
 800d522:	2900      	cmp	r1, #0
 800d524:	d1f9      	bne.n	800d51a <init_twr_1_poll_ds_twr+0x32>
 800d526:	f3bf 8f5b 	dmb	ish
//    printk("send twr_1_poll\n");
    atomic_set(atomic_twr_status, (atomic_t) msg_id_t::twr_1_poll);

    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 800d52a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d52e:	f005 fe6d 	bl	801320c <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 800d532:	f242 7010 	movw	r0, #10000	; 0x2710
 800d536:	f7fd f97d 	bl	800a834 <dwt_setrxtimeout>

    dwt_setcallbacks(nullptr, rx_ok_cb, rx_to_cb, rx_err_cb);
 800d53a:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <init_twr_1_poll_ds_twr+0x90>)
 800d53c:	4a0f      	ldr	r2, [pc, #60]	; (800d57c <init_twr_1_poll_ds_twr+0x94>)
 800d53e:	4910      	ldr	r1, [pc, #64]	; (800d580 <init_twr_1_poll_ds_twr+0x98>)
 800d540:	2000      	movs	r0, #0
 800d542:	f7fd f911 	bl	800a768 <dwt_setcallbacks>

    dwt_writetxdata(sizeof(*tx_poll_msg), (uint8_t*) tx_poll_msg, 0);
 800d546:	2200      	movs	r2, #0
 800d548:	4629      	mov	r1, r5
 800d54a:	2006      	movs	r0, #6
 800d54c:	f005 fd5a 	bl	8013004 <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(*tx_poll_msg), 0, 1);
 800d550:	2201      	movs	r2, #1
 800d552:	2100      	movs	r1, #0
 800d554:	2006      	movs	r0, #6
 800d556:	f7fc ffe7 	bl	800a528 <dwt_writetxfctrl>
	z_impl_k_msgq_purge(msgq);
 800d55a:	480a      	ldr	r0, [pc, #40]	; (800d584 <init_twr_1_poll_ds_twr+0x9c>)
 800d55c:	f006 faef 	bl	8013b3e <z_impl_k_msgq_purge>
}
 800d560:	e003      	b.n	800d56a <init_twr_1_poll_ds_twr+0x82>
	return z_impl_k_sleep(timeout);
 800d562:	200a      	movs	r0, #10
 800d564:	2100      	movs	r1, #0
 800d566:	f001 fb6b 	bl	800ec40 <z_impl_k_sleep>

    k_msgq_purge(&msgq_dwt_callback_data);

    while(dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED)) {
 800d56a:	2002      	movs	r0, #2
 800d56c:	f7fd f908 	bl	800a780 <dwt_starttx>
 800d570:	2800      	cmp	r0, #0
 800d572:	d1f6      	bne.n	800d562 <init_twr_1_poll_ds_twr+0x7a>
        k_sleep(K_MSEC(1));
//        printk("inf loop\n");
    }
}
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	0800d459 	.word	0x0800d459
 800d57c:	0800d4c5 	.word	0x0800d4c5
 800d580:	0800d4a1 	.word	0x0800d4a1
 800d584:	200007e0 	.word	0x200007e0

0800d588 <init_twr_2_resp_ds_twr>:

void init_twr_2_resp_ds_twr(const struct device *dwm_dev, msg_header_t *tx_poll_msg, atomic_t *atomic_twr_status,
  dwt_cb_data_t *cb_data)
{
 800d588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d58c:	b089      	sub	sp, #36	; 0x24
 800d58e:	4607      	mov	r7, r0
 800d590:	460d      	mov	r5, r1
 800d592:	4616      	mov	r6, r2
 800d594:	461c      	mov	r4, r3
    int rc = 0;
    msg_header_t rx_resp_msg;
    msg_twr_final_t final_msg;
    if (check_correct_recv(&rx_resp_msg, sizeof(rx_resp_msg), cb_data->datalength)) {
 800d596:	889a      	ldrh	r2, [r3, #4]
 800d598:	2106      	movs	r1, #6
 800d59a:	a806      	add	r0, sp, #24
 800d59c:	f006 fa33 	bl	8013a06 <check_correct_recv>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d054      	beq.n	800d64e <init_twr_2_resp_ds_twr+0xc6>
            /* Read receive data */
            dwt_readrxdata((uint8_t*) &rx_resp_msg, cb_data->datalength, 0);
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	88a1      	ldrh	r1, [r4, #4]
 800d5a8:	a806      	add	r0, sp, #24
 800d5aa:	f005 fd5c 	bl	8013066 <dwt_readrxdata>
            if (rx_resp_msg.header.id == msg_id_t::twr_2_resp) {
 800d5ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	d004      	beq.n	800d5c0 <init_twr_2_resp_ds_twr+0x38>
                    init_twr_1_poll_ds_twr(tx_poll_msg, atomic_twr_status);
                }
            } else {
//                printk("Restart after cmp msgs in init_twr_2_resp\n");
                /* Restart twr */
                init_twr_1_poll_ds_twr(tx_poll_msg, atomic_twr_status);
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f7ff ff95 	bl	800d4e8 <init_twr_1_poll_ds_twr>
 800d5be:	e04a      	b.n	800d656 <init_twr_2_resp_ds_twr+0xce>
                uint64_t poll_tx_ts = get_tx_timestamp_u64();
 800d5c0:	f005 ffa6 	bl	8013510 <_Z20get_tx_timestamp_u64v>
 800d5c4:	4681      	mov	r9, r0
                uint64_t resp_rx_ts = get_rx_timestamp_u64();
 800d5c6:	f005 ffbb 	bl	8013540 <_Z20get_rx_timestamp_u64v>
 800d5ca:	4680      	mov	r8, r0
                  (resp_rx_ts +
 800d5cc:	4c23      	ldr	r4, [pc, #140]	; (800d65c <init_twr_2_resp_ds_twr+0xd4>)
 800d5ce:	1904      	adds	r4, r0, r4
 800d5d0:	f141 0100 	adc.w	r1, r1, #0
                    (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 800d5d4:	0a24      	lsrs	r4, r4, #8
 800d5d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
                dwt_setdelayedtrxtime(final_tx_time);
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f005 feba 	bl	8013354 <dwt_setdelayedtrxtime>
                  (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8)
 800d5e0:	0223      	lsls	r3, r4, #8
 800d5e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
                    + ((struct dw1000_dev_config *) dwm_dev->config)->tx_ant_delay;
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	8c52      	ldrh	r2, [r2, #34]	; 0x22
                uint64_t final_tx_ts =
 800d5ee:	189b      	adds	r3, r3, r2
                final_msg.header = tx_poll_msg->header;
 800d5f0:	6828      	ldr	r0, [r5, #0]
 800d5f2:	9001      	str	r0, [sp, #4]
                final_msg.header.id = msg_id_t::twr_3_final;
 800d5f4:	2209      	movs	r2, #9
 800d5f6:	f88d 2004 	strb.w	r2, [sp, #4]
                final_msg.poll_tx_ts = (uint32_t) poll_tx_ts;
 800d5fa:	f8cd 9008 	str.w	r9, [sp, #8]
                final_msg.resp_rx_ts = (uint32_t) resp_rx_ts;
 800d5fe:	f8cd 800c 	str.w	r8, [sp, #12]
                final_msg.final_tx_ts = (uint32_t) final_tx_ts;
 800d602:	9304      	str	r3, [sp, #16]
                dwt_writetxdata(sizeof(final_msg), (uint8_t*) &final_msg, 0); /* Zero offset in TX buffer. */
 800d604:	2200      	movs	r2, #0
 800d606:	a901      	add	r1, sp, #4
 800d608:	2014      	movs	r0, #20
 800d60a:	f005 fcfb 	bl	8013004 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 800d60e:	2201      	movs	r2, #1
 800d610:	2100      	movs	r1, #0
 800d612:	2014      	movs	r0, #20
 800d614:	f7fc ff88 	bl	800a528 <dwt_writetxfctrl>
                dwt_setcallbacks(tx_ok_cb, nullptr, nullptr, nullptr);
 800d618:	2300      	movs	r3, #0
 800d61a:	461a      	mov	r2, r3
 800d61c:	4619      	mov	r1, r3
 800d61e:	4810      	ldr	r0, [pc, #64]	; (800d660 <init_twr_2_resp_ds_twr+0xd8>)
 800d620:	f7fd f8a2 	bl	800a768 <dwt_setcallbacks>
                rc = dwt_starttx(DWT_START_TX_DELAYED);
 800d624:	2001      	movs	r0, #1
 800d626:	f7fd f8ab 	bl	800a780 <dwt_starttx>
                if (!rc) {
 800d62a:	b958      	cbnz	r0, 800d644 <init_twr_2_resp_ds_twr+0xbc>
 800d62c:	2308      	movs	r3, #8
 800d62e:	f3bf 8f5b 	dmb	ish
 800d632:	e856 2f00 	ldrex	r2, [r6]
 800d636:	e846 3100 	strex	r1, r3, [r6]
 800d63a:	2900      	cmp	r1, #0
 800d63c:	d1f9      	bne.n	800d632 <init_twr_2_resp_ds_twr+0xaa>
 800d63e:	f3bf 8f5b 	dmb	ish
 800d642:	e008      	b.n	800d656 <init_twr_2_resp_ds_twr+0xce>
                    init_twr_1_poll_ds_twr(tx_poll_msg, atomic_twr_status);
 800d644:	4631      	mov	r1, r6
 800d646:	4628      	mov	r0, r5
 800d648:	f7ff ff4e 	bl	800d4e8 <init_twr_1_poll_ds_twr>
 800d64c:	e003      	b.n	800d656 <init_twr_2_resp_ds_twr+0xce>
            }
    } else {
//        printk("Restart after checking msg in init_twr_2_resp\n");
        /* Restart twr */
        init_twr_1_poll_ds_twr(tx_poll_msg, atomic_twr_status);
 800d64e:	4631      	mov	r1, r6
 800d650:	4628      	mov	r0, r5
 800d652:	f7ff ff49 	bl	800d4e8 <init_twr_1_poll_ds_twr>
    }
}
 800d656:	b009      	add	sp, #36	; 0x24
 800d658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65c:	13880000 	.word	0x13880000
 800d660:	0800d47d 	.word	0x0800d47d

0800d664 <update_indication_task>:
    }
}


_Noreturn void update_indication_task(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b094      	sub	sp, #80	; 0x50
    uint8_t cnt = 0;
    uint8_t start_led_pos = 0;
    uint8_t end_led_pos = 0;
    uint8_t indication_type = 0;
    struct led_hsv color_hsv = {0};
 800d668:	2400      	movs	r4, #0
 800d66a:	9413      	str	r4, [sp, #76]	; 0x4c
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 800d66c:	2240      	movs	r2, #64	; 0x40
 800d66e:	4621      	mov	r1, r4
 800d670:	a803      	add	r0, sp, #12
 800d672:	f006 ff05 	bl	8014480 <memset>
    struct led_strip_indicate_s *strip_indicate = {0};
 800d676:	9402      	str	r4, [sp, #8]
    union led_strip_state_u led_strip_state = {0};
 800d678:	9400      	str	r4, [sp, #0]
 800d67a:	9401      	str	r4, [sp, #4]
	z_impl_k_poll_signal_init(sig);
 800d67c:	4d87      	ldr	r5, [pc, #540]	; (800d89c <update_indication_task+0x238>)
 800d67e:	4628      	mov	r0, r5
 800d680:	f006 fdfb 	bl	801427a <z_impl_k_poll_signal_init>

    k_poll_signal_init(&signal_indicate);
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
 800d684:	462b      	mov	r3, r5
 800d686:	4622      	mov	r2, r4
 800d688:	2101      	movs	r1, #1
 800d68a:	4885      	ldr	r0, [pc, #532]	; (800d8a0 <update_indication_task+0x23c>)
 800d68c:	f006 fdcd 	bl	801422a <k_poll_event_init>
                      K_POLL_MODE_NOTIFY_ONLY,
                      &signal_indicate);

    if (!device_is_ready(strip_dev)) {
 800d690:	4b84      	ldr	r3, [pc, #528]	; (800d8a4 <update_indication_task+0x240>)
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	f006 f9c2 	bl	8013a1c <z_device_is_ready>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f040 80d2 	bne.w	800d842 <update_indication_task+0x1de>
	return z_impl_k_sleep(timeout);
 800d69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d6a6:	f001 facb 	bl	800ec40 <z_impl_k_sleep>
 800d6aa:	e0ca      	b.n	800d842 <update_indication_task+0x1de>
            /* If "blink" set -> we blinked
             * Esle -> set on strip connection quality and people number */
            switch (indication_type) {
                case INDICATION_TYPE_STATUS_INFO:
                    cnt = start_led_pos;
                    if (led_strip_state.status.con_status >= 0)
 800d6ac:	9e00      	ldr	r6, [sp, #0]
 800d6ae:	2e00      	cmp	r6, #0
 800d6b0:	da0a      	bge.n	800d6c8 <update_indication_task+0x64>
                        set_con_status_pixels(led_strip_state.status.con_status, &cnt);

                    if (led_strip_state.status.people_num >= 0)
 800d6b2:	9e01      	ldr	r6, [sp, #4]
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	da2d      	bge.n	800d714 <update_indication_task+0xb0>
                        set_people_num_pixels(led_strip_state.status.people_num, &cnt);

                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 800d6b8:	4b7a      	ldr	r3, [pc, #488]	; (800d8a4 <update_indication_task+0x240>)
 800d6ba:	6818      	ldr	r0, [r3, #0]
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
 800d6bc:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2210      	movs	r2, #16
 800d6c2:	4979      	ldr	r1, [pc, #484]	; (800d8a8 <update_indication_task+0x244>)
 800d6c4:	4798      	blx	r3
 800d6c6:	e0bc      	b.n	800d842 <update_indication_task+0x1de>
                        set_con_status_pixels(led_strip_state.status.con_status, &cnt);
 800d6c8:	b2f6      	uxtb	r6, r6
                    cnt = start_led_pos;
 800d6ca:	4625      	mov	r5, r4
    while (*pos < start_pos + RSSI_LED_LEN) {
 800d6cc:	e007      	b.n	800d6de <update_indication_task+0x7a>
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 800d6ce:	4b76      	ldr	r3, [pc, #472]	; (800d8a8 <update_indication_task+0x244>)
 800d6d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d6d4:	4875      	ldr	r0, [pc, #468]	; (800d8ac <update_indication_task+0x248>)
 800d6d6:	f7fe fb87 	bl	800bde8 <led_hsv2rgb>
        (*pos)++;
 800d6da:	3501      	adds	r5, #1
 800d6dc:	b2ed      	uxtb	r5, r5
    while (*pos < start_pos + RSSI_LED_LEN) {
 800d6de:	4622      	mov	r2, r4
 800d6e0:	1de3      	adds	r3, r4, #7
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	429d      	cmp	r5, r3
 800d6e6:	dc13      	bgt.n	800d710 <update_indication_task+0xac>
        if (*pos < start_pos + con_status) {
 800d6e8:	1933      	adds	r3, r6, r4
 800d6ea:	42ab      	cmp	r3, r5
 800d6ec:	dd09      	ble.n	800d702 <update_indication_task+0x9e>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 800d6ee:	3201      	adds	r2, #1
 800d6f0:	4291      	cmp	r1, r2
 800d6f2:	dcec      	bgt.n	800d6ce <update_indication_task+0x6a>
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 800d6f4:	4b6c      	ldr	r3, [pc, #432]	; (800d8a8 <update_indication_task+0x244>)
 800d6f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d6fa:	486d      	ldr	r0, [pc, #436]	; (800d8b0 <update_indication_task+0x24c>)
 800d6fc:	f7fe fb74 	bl	800bde8 <led_hsv2rgb>
 800d700:	e7eb      	b.n	800d6da <update_indication_task+0x76>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 800d702:	4b69      	ldr	r3, [pc, #420]	; (800d8a8 <update_indication_task+0x244>)
 800d704:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d708:	486a      	ldr	r0, [pc, #424]	; (800d8b4 <update_indication_task+0x250>)
 800d70a:	f7fe fb6d 	bl	800bde8 <led_hsv2rgb>
 800d70e:	e7e4      	b.n	800d6da <update_indication_task+0x76>
 800d710:	462c      	mov	r4, r5
 800d712:	e7ce      	b.n	800d6b2 <update_indication_task+0x4e>
                        set_people_num_pixels(led_strip_state.status.people_num, &cnt);
 800d714:	b2f6      	uxtb	r6, r6
    while (*pos < start_pos + WORKERS_LED_LEN) {
 800d716:	4625      	mov	r5, r4
 800d718:	e007      	b.n	800d72a <update_indication_task+0xc6>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[*pos]);
 800d71a:	4963      	ldr	r1, [pc, #396]	; (800d8a8 <update_indication_task+0x244>)
 800d71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d720:	4864      	ldr	r0, [pc, #400]	; (800d8b4 <update_indication_task+0x250>)
 800d722:	f7fe fb61 	bl	800bde8 <led_hsv2rgb>
        (*pos)++;
 800d726:	3501      	adds	r5, #1
 800d728:	b2ed      	uxtb	r5, r5
    while (*pos < start_pos + WORKERS_LED_LEN) {
 800d72a:	1d63      	adds	r3, r4, #5
 800d72c:	462a      	mov	r2, r5
 800d72e:	429d      	cmp	r5, r3
 800d730:	dcc2      	bgt.n	800d6b8 <update_indication_task+0x54>
        if (((*pos) - start_pos) < people_num)
 800d732:	1b2b      	subs	r3, r5, r4
 800d734:	42b3      	cmp	r3, r6
 800d736:	daf0      	bge.n	800d71a <update_indication_task+0xb6>
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 800d738:	495b      	ldr	r1, [pc, #364]	; (800d8a8 <update_indication_task+0x244>)
 800d73a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d73e:	485e      	ldr	r0, [pc, #376]	; (800d8b8 <update_indication_task+0x254>)
 800d740:	f7fe fb52 	bl	800bde8 <led_hsv2rgb>
 800d744:	e7ef      	b.n	800d726 <update_indication_task+0xc2>
                    break;
                case INDICATION_TYPE_BLINK:
                    switch (led_strip_state.strip_param.color) {
 800d746:	f89d 3000 	ldrb.w	r3, [sp]
 800d74a:	2b04      	cmp	r3, #4
 800d74c:	d821      	bhi.n	800d792 <update_indication_task+0x12e>
 800d74e:	e8df f003 	tbb	[pc, r3]
 800d752:	0703      	.short	0x0703
 800d754:	0f0b      	.short	0x0f0b
 800d756:	13          	.byte	0x13
 800d757:	00          	.byte	0x00
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 800d758:	4b55      	ldr	r3, [pc, #340]	; (800d8b0 <update_indication_task+0x24c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d75e:	e018      	b.n	800d792 <update_indication_task+0x12e>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 800d760:	4b52      	ldr	r3, [pc, #328]	; (800d8ac <update_indication_task+0x248>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d766:	e014      	b.n	800d792 <update_indication_task+0x12e>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 800d768:	4b53      	ldr	r3, [pc, #332]	; (800d8b8 <update_indication_task+0x254>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d76e:	e010      	b.n	800d792 <update_indication_task+0x12e>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 800d770:	4b52      	ldr	r3, [pc, #328]	; (800d8bc <update_indication_task+0x258>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d776:	e00c      	b.n	800d792 <update_indication_task+0x12e>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 800d778:	4b51      	ldr	r3, [pc, #324]	; (800d8c0 <update_indication_task+0x25c>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 800d77e:	e008      	b.n	800d792 <update_indication_task+0x12e>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800d780:	1c66      	adds	r6, r4, #1
 800d782:	b2f6      	uxtb	r6, r6
 800d784:	ab03      	add	r3, sp, #12
 800d786:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800d78a:	a813      	add	r0, sp, #76	; 0x4c
 800d78c:	f7fe fb2c 	bl	800bde8 <led_hsv2rgb>
 800d790:	4634      	mov	r4, r6
                    while (cnt < end_led_pos) {
 800d792:	42a5      	cmp	r5, r4
 800d794:	d8f4      	bhi.n	800d780 <update_indication_task+0x11c>
                    }

                    cnt = 0;
 800d796:	2400      	movs	r4, #0
 800d798:	e01c      	b.n	800d7d4 <update_indication_task+0x170>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
                        led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 800d79a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800d8a4 <update_indication_task+0x240>
 800d79e:	f8d8 0000 	ldr.w	r0, [r8]
	const struct led_strip_driver_api *api =
 800d7a2:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	a903      	add	r1, sp, #12
 800d7aa:	4798      	blx	r3
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
 800d7ac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800d7b0:	2700      	movs	r7, #0
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	f001 fa43 	bl	800ec40 <z_impl_k_sleep>
                        led_strip_update_rgb(strip_dev, empty_rgb, end_led_pos);
 800d7ba:	f8d8 0000 	ldr.w	r0, [r8]
	const struct led_strip_driver_api *api =
 800d7be:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	493f      	ldr	r1, [pc, #252]	; (800d8c4 <update_indication_task+0x260>)
 800d7c6:	4798      	blx	r3
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	4639      	mov	r1, r7
 800d7cc:	f001 fa38 	bl	800ec40 <z_impl_k_sleep>
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
                        cnt++;
 800d7d0:	3401      	adds	r4, #1
 800d7d2:	b2e4      	uxtb	r4, r4
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 800d7d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	d8de      	bhi.n	800d79a <update_indication_task+0x136>
                    }
                    led_strip_update_rgb(strip_dev, pixels_rgb, end_led_pos);
 800d7dc:	4b31      	ldr	r3, [pc, #196]	; (800d8a4 <update_indication_task+0x240>)
 800d7de:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 800d7e0:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	462a      	mov	r2, r5
 800d7e6:	4930      	ldr	r1, [pc, #192]	; (800d8a8 <update_indication_task+0x244>)
 800d7e8:	4798      	blx	r3
 800d7ea:	e02a      	b.n	800d842 <update_indication_task+0x1de>
                    break;
                case INDICATION_TYPE_STATIC_COLOR:
                    switch (led_strip_state.strip_param.color) {
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 800d7ec:	4b30      	ldr	r3, [pc, #192]	; (800d8b0 <update_indication_task+0x24c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d7f2:	e018      	b.n	800d826 <update_indication_task+0x1c2>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 800d7f4:	4b2d      	ldr	r3, [pc, #180]	; (800d8ac <update_indication_task+0x248>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d7fa:	e014      	b.n	800d826 <update_indication_task+0x1c2>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 800d7fc:	4b2e      	ldr	r3, [pc, #184]	; (800d8b8 <update_indication_task+0x254>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d802:	e010      	b.n	800d826 <update_indication_task+0x1c2>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 800d804:	4b2d      	ldr	r3, [pc, #180]	; (800d8bc <update_indication_task+0x258>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 800d80a:	e00c      	b.n	800d826 <update_indication_task+0x1c2>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 800d80c:	4b2c      	ldr	r3, [pc, #176]	; (800d8c0 <update_indication_task+0x25c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 800d812:	e008      	b.n	800d826 <update_indication_task+0x1c2>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800d814:	1c66      	adds	r6, r4, #1
 800d816:	b2f6      	uxtb	r6, r6
 800d818:	ab03      	add	r3, sp, #12
 800d81a:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800d81e:	a813      	add	r0, sp, #76	; 0x4c
 800d820:	f7fe fae2 	bl	800bde8 <led_hsv2rgb>
 800d824:	4634      	mov	r4, r6
                    while (cnt < end_led_pos) {
 800d826:	42a5      	cmp	r5, r4
 800d828:	d8f4      	bhi.n	800d814 <update_indication_task+0x1b0>
                    }

                    led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 800d82a:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <update_indication_task+0x240>)
 800d82c:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 800d82e:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	462a      	mov	r2, r5
 800d834:	a903      	add	r1, sp, #12
 800d836:	4798      	blx	r3
 800d838:	e003      	b.n	800d842 <update_indication_task+0x1de>
 800d83a:	2064      	movs	r0, #100	; 0x64
 800d83c:	2100      	movs	r1, #0
 800d83e:	f001 f9ff 	bl	800ec40 <z_impl_k_sleep>
	return msgq->used_msgs;
 800d842:	4b21      	ldr	r3, [pc, #132]	; (800d8c8 <update_indication_task+0x264>)
 800d844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 800d846:	2b00      	cmp	r3, #0
 800d848:	d0f7      	beq.n	800d83a <update_indication_task+0x1d6>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	a902      	add	r1, sp, #8
 800d850:	481d      	ldr	r0, [pc, #116]	; (800d8c8 <update_indication_task+0x264>)
 800d852:	f000 fb43 	bl	800dedc <z_impl_k_msgq_get>
            led_strip_state = strip_indicate->led_strip_state;
 800d856:	9b02      	ldr	r3, [sp, #8]
 800d858:	466a      	mov	r2, sp
 800d85a:	1d19      	adds	r1, r3, #4
 800d85c:	c903      	ldmia	r1, {r0, r1}
 800d85e:	e882 0003 	stmia.w	r2, {r0, r1}
            start_led_pos = strip_indicate->start_led_pos;
 800d862:	785c      	ldrb	r4, [r3, #1]
            end_led_pos = strip_indicate->end_led_pos;
 800d864:	789d      	ldrb	r5, [r3, #2]
            indication_type = strip_indicate->indication_type;
 800d866:	781b      	ldrb	r3, [r3, #0]
            switch (indication_type) {
 800d868:	2b01      	cmp	r3, #1
 800d86a:	f43f af1f 	beq.w	800d6ac <update_indication_task+0x48>
 800d86e:	2b02      	cmp	r3, #2
 800d870:	f43f af69 	beq.w	800d746 <update_indication_task+0xe2>
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e4      	bne.n	800d842 <update_indication_task+0x1de>
                    switch (led_strip_state.strip_param.color) {
 800d878:	f89d 3000 	ldrb.w	r3, [sp]
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d8d2      	bhi.n	800d826 <update_indication_task+0x1c2>
 800d880:	a201      	add	r2, pc, #4	; (adr r2, 800d888 <update_indication_task+0x224>)
 800d882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d886:	bf00      	nop
 800d888:	0800d7ed 	.word	0x0800d7ed
 800d88c:	0800d7f5 	.word	0x0800d7f5
 800d890:	0800d7fd 	.word	0x0800d7fd
 800d894:	0800d805 	.word	0x0800d805
 800d898:	0800d80d 	.word	0x0800d80d
 800d89c:	20001a1c 	.word	0x20001a1c
 800d8a0:	200019c8 	.word	0x200019c8
 800d8a4:	20000498 	.word	0x20000498
 800d8a8:	200019dc 	.word	0x200019dc
 800d8ac:	08017094 	.word	0x08017094
 800d8b0:	0801709c 	.word	0x0801709c
 800d8b4:	08017090 	.word	0x08017090
 800d8b8:	0801708c 	.word	0x0801708c
 800d8bc:	08017098 	.word	0x08017098
 800d8c0:	080170a0 	.word	0x080170a0
 800d8c4:	20001988 	.word	0x20001988
 800d8c8:	20000814 	.word	0x20000814

0800d8cc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800d8cc:	4b03      	ldr	r3, [pc, #12]	; (800d8dc <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800d8ce:	e000      	b.n	800d8d2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800d8d0:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800d8d2:	4a03      	ldr	r2, [pc, #12]	; (800d8e0 <z_device_state_init+0x14>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d3fb      	bcc.n	800d8d0 <z_device_state_init+0x4>
	}
}
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	08014bb4 	.word	0x08014bb4
 800d8e0:	08014d64 	.word	0x08014d64

0800d8e4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800d8e8:	4b11      	ldr	r3, [pc, #68]	; (800d930 <z_sys_init_run_level+0x4c>)
 800d8ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800d8ee:	e009      	b.n	800d904 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800d8f0:	4240      	negs	r0, r0
 800d8f2:	e017      	b.n	800d924 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800d8f4:	68eb      	ldr	r3, [r5, #12]
 800d8f6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800d8f8:	68ea      	ldr	r2, [r5, #12]
 800d8fa:	7853      	ldrb	r3, [r2, #1]
 800d8fc:	f043 0301 	orr.w	r3, r3, #1
 800d900:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800d902:	3408      	adds	r4, #8
 800d904:	1c73      	adds	r3, r6, #1
 800d906:	4a0a      	ldr	r2, [pc, #40]	; (800d930 <z_sys_init_run_level+0x4c>)
 800d908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d90c:	42a3      	cmp	r3, r4
 800d90e:	d90d      	bls.n	800d92c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800d910:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	4628      	mov	r0, r5
 800d916:	4798      	blx	r3
		if (dev != NULL) {
 800d918:	2d00      	cmp	r5, #0
 800d91a:	d0f2      	beq.n	800d902 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d0eb      	beq.n	800d8f8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800d920:	2800      	cmp	r0, #0
 800d922:	dbe5      	blt.n	800d8f0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800d924:	28ff      	cmp	r0, #255	; 0xff
 800d926:	dde5      	ble.n	800d8f4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800d928:	20ff      	movs	r0, #255	; 0xff
 800d92a:	e7e3      	b.n	800d8f4 <z_sys_init_run_level+0x10>
		}
	}
}
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
 800d92e:	bf00      	nop
 800d930:	080170a4 	.word	0x080170a4

0800d934 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800d934:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800d936:	4605      	mov	r5, r0
 800d938:	b328      	cbz	r0, 800d986 <z_impl_device_get_binding+0x52>
 800d93a:	7803      	ldrb	r3, [r0, #0]
 800d93c:	b32b      	cbz	r3, 800d98a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800d93e:	4c14      	ldr	r4, [pc, #80]	; (800d990 <z_impl_device_get_binding+0x5c>)
 800d940:	e000      	b.n	800d944 <z_impl_device_get_binding+0x10>
 800d942:	3418      	adds	r4, #24
 800d944:	4b13      	ldr	r3, [pc, #76]	; (800d994 <z_impl_device_get_binding+0x60>)
 800d946:	429c      	cmp	r4, r3
 800d948:	d008      	beq.n	800d95c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800d94a:	4620      	mov	r0, r4
 800d94c:	f006 f866 	bl	8013a1c <z_device_is_ready>
 800d950:	2800      	cmp	r0, #0
 800d952:	d0f6      	beq.n	800d942 <z_impl_device_get_binding+0xe>
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	42ab      	cmp	r3, r5
 800d958:	d1f3      	bne.n	800d942 <z_impl_device_get_binding+0xe>
 800d95a:	e012      	b.n	800d982 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800d95c:	4c0c      	ldr	r4, [pc, #48]	; (800d990 <z_impl_device_get_binding+0x5c>)
 800d95e:	e000      	b.n	800d962 <z_impl_device_get_binding+0x2e>
 800d960:	3418      	adds	r4, #24
 800d962:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <z_impl_device_get_binding+0x60>)
 800d964:	429c      	cmp	r4, r3
 800d966:	d00b      	beq.n	800d980 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800d968:	4620      	mov	r0, r4
 800d96a:	f006 f857 	bl	8013a1c <z_device_is_ready>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d0f6      	beq.n	800d960 <z_impl_device_get_binding+0x2c>
 800d972:	6821      	ldr	r1, [r4, #0]
 800d974:	4628      	mov	r0, r5
 800d976:	f7f3 fa64 	bl	8000e42 <strcmp>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d1f0      	bne.n	800d960 <z_impl_device_get_binding+0x2c>
 800d97e:	e000      	b.n	800d982 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800d980:	2400      	movs	r4, #0
}
 800d982:	4620      	mov	r0, r4
 800d984:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800d986:	4604      	mov	r4, r0
 800d988:	e7fb      	b.n	800d982 <z_impl_device_get_binding+0x4e>
 800d98a:	2400      	movs	r4, #0
 800d98c:	e7f9      	b.n	800d982 <z_impl_device_get_binding+0x4e>
 800d98e:	bf00      	nop
 800d990:	08014bb4 	.word	0x08014bb4
 800d994:	08014d64 	.word	0x08014d64

0800d998 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800d998:	2804      	cmp	r0, #4
 800d99a:	d80c      	bhi.n	800d9b6 <reason_to_str+0x1e>
 800d99c:	e8df f000 	tbb	[pc, r0]
 800d9a0:	07050d03 	.word	0x07050d03
 800d9a4:	09          	.byte	0x09
 800d9a5:	00          	.byte	0x00
 800d9a6:	4806      	ldr	r0, [pc, #24]	; (800d9c0 <reason_to_str+0x28>)
 800d9a8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800d9aa:	4806      	ldr	r0, [pc, #24]	; (800d9c4 <reason_to_str+0x2c>)
 800d9ac:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800d9ae:	4806      	ldr	r0, [pc, #24]	; (800d9c8 <reason_to_str+0x30>)
 800d9b0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800d9b2:	4806      	ldr	r0, [pc, #24]	; (800d9cc <reason_to_str+0x34>)
 800d9b4:	4770      	bx	lr
	default:
		return "Unknown error";
 800d9b6:	4806      	ldr	r0, [pc, #24]	; (800d9d0 <reason_to_str+0x38>)
 800d9b8:	4770      	bx	lr
		return "Unhandled interrupt";
 800d9ba:	4806      	ldr	r0, [pc, #24]	; (800d9d4 <reason_to_str+0x3c>)
	}
}
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	0801710c 	.word	0x0801710c
 800d9c4:	080170e0 	.word	0x080170e0
 800d9c8:	080170f0 	.word	0x080170f0
 800d9cc:	080170fc 	.word	0x080170fc
 800d9d0:	080170bc 	.word	0x080170bc
 800d9d4:	080170cc 	.word	0x080170cc

0800d9d8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800d9d8:	b130      	cbz	r0, 800d9e8 <thread_name_get+0x10>
{
 800d9da:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800d9dc:	f006 f870 	bl	8013ac0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800d9e0:	b120      	cbz	r0, 800d9ec <thread_name_get+0x14>
 800d9e2:	7803      	ldrb	r3, [r0, #0]
 800d9e4:	b123      	cbz	r3, 800d9f0 <thread_name_get+0x18>
}
 800d9e6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800d9e8:	4802      	ldr	r0, [pc, #8]	; (800d9f4 <thread_name_get+0x1c>)
}
 800d9ea:	4770      	bx	lr
		thread_name = "unknown";
 800d9ec:	4801      	ldr	r0, [pc, #4]	; (800d9f4 <thread_name_get+0x1c>)
 800d9ee:	e7fa      	b.n	800d9e6 <thread_name_get+0xe>
 800d9f0:	4800      	ldr	r0, [pc, #0]	; (800d9f4 <thread_name_get+0x1c>)
	return thread_name;
 800d9f2:	e7f8      	b.n	800d9e6 <thread_name_get+0xe>
 800d9f4:	0801711c 	.word	0x0801711c

0800d9f8 <k_sys_fatal_error_handler>:
{
 800d9f8:	b510      	push	{r4, lr}
 800d9fa:	b090      	sub	sp, #64	; 0x40
 800d9fc:	4604      	mov	r4, r0
	z_impl_log_panic();
 800d9fe:	f7f5 fd0d 	bl	800341c <z_impl_log_panic>
	LOG_ERR("Halting system");
 800da02:	2201      	movs	r2, #1
 800da04:	f8ad 2008 	strh.w	r2, [sp, #8]
 800da08:	4b10      	ldr	r3, [pc, #64]	; (800da4c <k_sys_fatal_error_handler+0x54>)
 800da0a:	930e      	str	r3, [sp, #56]	; 0x38
 800da0c:	2300      	movs	r3, #0
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	2102      	movs	r1, #2
 800da12:	f88d 1004 	strb.w	r1, [sp, #4]
 800da16:	9901      	ldr	r1, [sp, #4]
 800da18:	910d      	str	r1, [sp, #52]	; 0x34
 800da1a:	4619      	mov	r1, r3
 800da1c:	f363 0100 	bfi	r1, r3, #0, #1
 800da20:	f363 0141 	bfi	r1, r3, #1, #1
 800da24:	f363 0182 	bfi	r1, r3, #2, #1
 800da28:	f363 01c5 	bfi	r1, r3, #3, #3
 800da2c:	f362 1188 	bfi	r1, r2, #6, #3
 800da30:	2208      	movs	r2, #8
 800da32:	f362 2152 	bfi	r1, r2, #9, #10
 800da36:	f363 41de 	bfi	r1, r3, #19, #12
 800da3a:	f363 71df 	bfi	r1, r3, #31, #1
 800da3e:	aa0d      	add	r2, sp, #52	; 0x34
 800da40:	4803      	ldr	r0, [pc, #12]	; (800da50 <k_sys_fatal_error_handler+0x58>)
 800da42:	f003 fe6f 	bl	8011724 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800da46:	4620      	mov	r0, r4
 800da48:	f006 f802 	bl	8013a50 <arch_system_halt>
 800da4c:	08017124 	.word	0x08017124
 800da50:	08015058 	.word	0x08015058

0800da54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800da54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da56:	b097      	sub	sp, #92	; 0x5c
 800da58:	4605      	mov	r5, r0
 800da5a:	460e      	mov	r6, r1
	__asm__ volatile(
 800da5c:	f04f 0310 	mov.w	r3, #16
 800da60:	f3ef 8711 	mrs	r7, BASEPRI
 800da64:	f383 8812 	msr	BASEPRI_MAX, r3
 800da68:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800da6c:	f001 f900 	bl	800ec70 <z_impl_z_current_get>
 800da70:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800da72:	4628      	mov	r0, r5
 800da74:	f7ff ff90 	bl	800d998 <reason_to_str>
 800da78:	2300      	movs	r3, #0
 800da7a:	9304      	str	r3, [sp, #16]
 800da7c:	9003      	str	r0, [sp, #12]
 800da7e:	9502      	str	r5, [sp, #8]
 800da80:	4a25      	ldr	r2, [pc, #148]	; (800db18 <z_fatal_error+0xc4>)
 800da82:	9201      	str	r2, [sp, #4]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	2201      	movs	r2, #1
 800da88:	4924      	ldr	r1, [pc, #144]	; (800db1c <z_fatal_error+0xc8>)
 800da8a:	4618      	mov	r0, r3
 800da8c:	f005 ffd3 	bl	8013a36 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800da90:	b11e      	cbz	r6, 800da9a <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800da92:	69f3      	ldr	r3, [r6, #28]
 800da94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da98:	b9d3      	cbnz	r3, 800dad0 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7ff ff9c 	bl	800d9d8 <thread_name_get>
 800daa0:	9003      	str	r0, [sp, #12]
 800daa2:	9402      	str	r4, [sp, #8]
 800daa4:	4b1e      	ldr	r3, [pc, #120]	; (800db20 <z_fatal_error+0xcc>)
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	2000      	movs	r0, #0
 800daaa:	9000      	str	r0, [sp, #0]
 800daac:	4603      	mov	r3, r0
 800daae:	2201      	movs	r2, #1
 800dab0:	491a      	ldr	r1, [pc, #104]	; (800db1c <z_fatal_error+0xc8>)
 800dab2:	f005 ffc0 	bl	8013a36 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	f7ff ff9d 	bl	800d9f8 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800dabe:	f387 8811 	msr	BASEPRI, r7
 800dac2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800dac6:	4620      	mov	r0, r4
 800dac8:	f7f6 ff9c 	bl	8004a04 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800dacc:	b017      	add	sp, #92	; 0x5c
 800dace:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800dad0:	2201      	movs	r2, #1
 800dad2:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dad6:	4b13      	ldr	r3, [pc, #76]	; (800db24 <z_fatal_error+0xd0>)
 800dad8:	9314      	str	r3, [sp, #80]	; 0x50
 800dada:	2300      	movs	r3, #0
 800dadc:	9307      	str	r3, [sp, #28]
 800dade:	2102      	movs	r1, #2
 800dae0:	f88d 101c 	strb.w	r1, [sp, #28]
 800dae4:	9907      	ldr	r1, [sp, #28]
 800dae6:	9113      	str	r1, [sp, #76]	; 0x4c
 800dae8:	4619      	mov	r1, r3
 800daea:	f363 0100 	bfi	r1, r3, #0, #1
 800daee:	f363 0141 	bfi	r1, r3, #1, #1
 800daf2:	f363 0182 	bfi	r1, r3, #2, #1
 800daf6:	f363 01c5 	bfi	r1, r3, #3, #3
 800dafa:	f362 1188 	bfi	r1, r2, #6, #3
 800dafe:	2208      	movs	r2, #8
 800db00:	f362 2152 	bfi	r1, r2, #9, #10
 800db04:	f363 41de 	bfi	r1, r3, #19, #12
 800db08:	f363 71df 	bfi	r1, r3, #31, #1
 800db0c:	aa13      	add	r2, sp, #76	; 0x4c
 800db0e:	4803      	ldr	r0, [pc, #12]	; (800db1c <z_fatal_error+0xc8>)
 800db10:	f003 fe08 	bl	8011724 <z_impl_z_log_msg2_static_create>
 800db14:	e7c1      	b.n	800da9a <z_fatal_error+0x46>
 800db16:	bf00      	nop
 800db18:	08017134 	.word	0x08017134
 800db1c:	08015058 	.word	0x08015058
 800db20:	08017180 	.word	0x08017180
 800db24:	0801715c 	.word	0x0801715c

0800db28 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800db28:	b510      	push	{r4, lr}
 800db2a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800db2c:	4c10      	ldr	r4, [pc, #64]	; (800db70 <init_idle_thread+0x48>)
 800db2e:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800db32:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800db36:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <init_idle_thread+0x4c>)
 800db38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800db3c:	2200      	movs	r2, #0
 800db3e:	9205      	str	r2, [sp, #20]
 800db40:	2101      	movs	r1, #1
 800db42:	9104      	str	r1, [sp, #16]
 800db44:	210f      	movs	r1, #15
 800db46:	9103      	str	r1, [sp, #12]
 800db48:	9202      	str	r2, [sp, #8]
 800db4a:	9201      	str	r2, [sp, #4]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <init_idle_thread+0x50>)
 800db50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800db54:	4909      	ldr	r1, [pc, #36]	; (800db7c <init_idle_thread+0x54>)
 800db56:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800db5a:	fb0c 1100 	mla	r1, ip, r0, r1
 800db5e:	4620      	mov	r0, r4
 800db60:	f000 f8ee 	bl	800dd40 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800db64:	7b63      	ldrb	r3, [r4, #13]
 800db66:	f023 0304 	bic.w	r3, r3, #4
 800db6a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800db6c:	b006      	add	sp, #24
 800db6e:	bd10      	pop	{r4, pc}
 800db70:	20000fd0 	.word	0x20000fd0
 800db74:	20001a2c 	.word	0x20001a2c
 800db78:	08013b27 	.word	0x08013b27
 800db7c:	20004640 	.word	0x20004640

0800db80 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800db80:	b570      	push	{r4, r5, r6, lr}
 800db82:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800db84:	f000 ffc0 	bl	800eb08 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800db88:	4d1b      	ldr	r5, [pc, #108]	; (800dbf8 <prepare_multithreading+0x78>)
 800db8a:	4b1c      	ldr	r3, [pc, #112]	; (800dbfc <prepare_multithreading+0x7c>)
 800db8c:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800db8e:	4b1c      	ldr	r3, [pc, #112]	; (800dc00 <prepare_multithreading+0x80>)
 800db90:	9305      	str	r3, [sp, #20]
 800db92:	2301      	movs	r3, #1
 800db94:	9304      	str	r3, [sp, #16]
 800db96:	2400      	movs	r4, #0
 800db98:	9403      	str	r4, [sp, #12]
 800db9a:	9402      	str	r4, [sp, #8]
 800db9c:	9401      	str	r4, [sp, #4]
 800db9e:	9400      	str	r4, [sp, #0]
 800dba0:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <prepare_multithreading+0x84>)
 800dba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dba6:	4918      	ldr	r1, [pc, #96]	; (800dc08 <prepare_multithreading+0x88>)
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f000 f8c9 	bl	800dd40 <z_setup_new_thread>
 800dbae:	4606      	mov	r6, r0
 800dbb0:	7b6b      	ldrb	r3, [r5, #13]
 800dbb2:	f023 0304 	bic.w	r3, r3, #4
 800dbb6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f006 f8f8 	bl	8013dae <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800dbbe:	2c00      	cmp	r4, #0
 800dbc0:	dd02      	ble.n	800dbc8 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	b006      	add	sp, #24
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f7ff ffad 	bl	800db28 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800dbce:	4a0f      	ldr	r2, [pc, #60]	; (800dc0c <prepare_multithreading+0x8c>)
 800dbd0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800dbd4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800dbd8:	4b08      	ldr	r3, [pc, #32]	; (800dbfc <prepare_multithreading+0x7c>)
 800dbda:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800dbde:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800dbe0:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800dbe2:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <prepare_multithreading+0x90>)
 800dbe8:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800dbec:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800dbf0:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800dbf2:	3401      	adds	r4, #1
 800dbf4:	e7e3      	b.n	800dbbe <prepare_multithreading+0x3e>
 800dbf6:	bf00      	nop
 800dbf8:	20001050 	.word	0x20001050
 800dbfc:	20001a2c 	.word	0x20001a2c
 800dc00:	08017198 	.word	0x08017198
 800dc04:	0800dc15 	.word	0x0800dc15
 800dc08:	20003620 	.word	0x20003620
 800dc0c:	20000fd0 	.word	0x20000fd0
 800dc10:	200047a0 	.word	0x200047a0

0800dc14 <bg_thread_main>:
{
 800dc14:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800dc16:	4b0b      	ldr	r3, [pc, #44]	; (800dc44 <bg_thread_main+0x30>)
 800dc18:	2201      	movs	r2, #1
 800dc1a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800dc1c:	2002      	movs	r0, #2
 800dc1e:	f7ff fe61 	bl	800d8e4 <z_sys_init_run_level>
	boot_banner();
 800dc22:	f001 fd71 	bl	800f708 <boot_banner>
	z_cpp_init_static();
 800dc26:	f003 fde4 	bl	80117f2 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f7ff fe5a 	bl	800d8e4 <z_sys_init_run_level>
	z_init_static_threads();
 800dc30:	f000 f8b6 	bl	800dda0 <z_init_static_threads>
	main();
 800dc34:	f006 fb2b 	bl	801428e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800dc38:	4a03      	ldr	r2, [pc, #12]	; (800dc48 <bg_thread_main+0x34>)
 800dc3a:	7b13      	ldrb	r3, [r2, #12]
 800dc3c:	f023 0301 	bic.w	r3, r3, #1
 800dc40:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800dc42:	bd08      	pop	{r3, pc}
 800dc44:	20001a90 	.word	0x20001a90
 800dc48:	20001050 	.word	0x20001050

0800dc4c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800dc4c:	b508      	push	{r3, lr}
 800dc4e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800dc50:	4a01      	ldr	r2, [pc, #4]	; (800dc58 <switch_to_main_thread+0xc>)
 800dc52:	4802      	ldr	r0, [pc, #8]	; (800dc5c <switch_to_main_thread+0x10>)
 800dc54:	f7f6 f898 	bl	8003d88 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800dc58:	0800dc15 	.word	0x0800dc15
 800dc5c:	20001050 	.word	0x20001050

0800dc60 <z_bss_zero>:
{
 800dc60:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800dc62:	4803      	ldr	r0, [pc, #12]	; (800dc70 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 800dc64:	4a03      	ldr	r2, [pc, #12]	; (800dc74 <z_bss_zero+0x14>)
 800dc66:	1a12      	subs	r2, r2, r0
 800dc68:	2100      	movs	r1, #0
 800dc6a:	f006 fc09 	bl	8014480 <memset>
}
 800dc6e:	bd08      	pop	{r3, pc}
 800dc70:	20000930 	.word	0x20000930
 800dc74:	20001a94 	.word	0x20001a94

0800dc78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800dc78:	b500      	push	{lr}
 800dc7a:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800dc7c:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800dc7e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800dc82:	4c1d      	ldr	r4, [pc, #116]	; (800dcf8 <z_cstart+0x80>)
 800dc84:	6963      	ldr	r3, [r4, #20]
 800dc86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc8a:	6163      	str	r3, [r4, #20]
 800dc8c:	23f0      	movs	r3, #240	; 0xf0
 800dc8e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800dc92:	2500      	movs	r5, #0
 800dc94:	77e5      	strb	r5, [r4, #31]
 800dc96:	7625      	strb	r5, [r4, #24]
 800dc98:	7665      	strb	r5, [r4, #25]
 800dc9a:	76a5      	strb	r5, [r4, #26]
 800dc9c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800dca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dca2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dca6:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800dca8:	f7f6 fe6a 	bl	8004980 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800dcac:	f7f5 fe62 	bl	8003974 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800dcb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcb4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800dcb6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800dcb8:	f7f6 ffae 	bl	8004c18 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800dcbc:	f7f6 feb8 	bl	8004a30 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800dcc0:	f7f5 fac8 	bl	8003254 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800dcc4:	2401      	movs	r4, #1
 800dcc6:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800dcca:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800dcce:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800dcd0:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800dcd2:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800dcd4:	4b09      	ldr	r3, [pc, #36]	; (800dcfc <z_cstart+0x84>)
 800dcd6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800dcda:	f7ff fdf7 	bl	800d8cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800dcde:	4628      	mov	r0, r5
 800dce0:	f7ff fe00 	bl	800d8e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800dce4:	4620      	mov	r0, r4
 800dce6:	f7ff fdfd 	bl	800d8e4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800dcea:	f7ff ff49 	bl	800db80 <prepare_multithreading>
 800dcee:	f7ff ffad 	bl	800dc4c <switch_to_main_thread>
 800dcf2:	bf00      	nop
 800dcf4:	20004fc0 	.word	0x20004fc0
 800dcf8:	e000ed00 	.word	0xe000ed00
 800dcfc:	20001a2c 	.word	0x20001a2c

0800dd00 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800dd00:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800dd02:	4c06      	ldr	r4, [pc, #24]	; (800dd1c <init_mem_slab_module+0x1c>)
	int rc = 0;
 800dd04:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800dd06:	e000      	b.n	800dd0a <init_mem_slab_module+0xa>
 800dd08:	3420      	adds	r4, #32
 800dd0a:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <init_mem_slab_module+0x20>)
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	d204      	bcs.n	800dd1a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800dd10:	4620      	mov	r0, r4
 800dd12:	f005 fea6 	bl	8013a62 <create_free_list>
		if (rc < 0) {
 800dd16:	2800      	cmp	r0, #0
 800dd18:	daf6      	bge.n	800dd08 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800dd1a:	bd10      	pop	{r4, pc}
 800dd1c:	20000790 	.word	0x20000790
 800dd20:	20000790 	.word	0x20000790

0800dd24 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800dd24:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800dd26:	ea53 0102 	orrs.w	r1, r3, r2
 800dd2a:	d102      	bne.n	800dd32 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800dd2c:	f005 feca 	bl	8013ac4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800dd30:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800dd32:	4902      	ldr	r1, [pc, #8]	; (800dd3c <schedule_new_thread+0x18>)
 800dd34:	3018      	adds	r0, #24
 800dd36:	f001 f84f 	bl	800edd8 <z_add_timeout>
 800dd3a:	e7f9      	b.n	800dd30 <schedule_new_thread+0xc>
 800dd3c:	08013de7 	.word	0x08013de7

0800dd40 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800dd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd42:	b085      	sub	sp, #20
 800dd44:	4604      	mov	r4, r0
 800dd46:	460e      	mov	r6, r1
 800dd48:	4615      	mov	r5, r2
 800dd4a:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800dd4c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800dd50:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800dd52:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800dd54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd56:	2204      	movs	r2, #4
 800dd58:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dd5a:	f005 feb7 	bl	8013acc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4631      	mov	r1, r6
 800dd62:	4620      	mov	r0, r4
 800dd64:	f005 fe94 	bl	8013a90 <setup_thread_stack>
 800dd68:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800dd6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	463b      	mov	r3, r7
 800dd78:	4602      	mov	r2, r0
 800dd7a:	4631      	mov	r1, r6
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f7f5 ffbd 	bl	8003cfc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800dd82:	2300      	movs	r3, #0
 800dd84:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800dd86:	4b05      	ldr	r3, [pc, #20]	; (800dd9c <z_setup_new_thread+0x5c>)
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	b123      	cbz	r3, 800dd96 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800dd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8e:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800dd90:	4628      	mov	r0, r5
 800dd92:	b005      	add	sp, #20
 800dd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800dd96:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800dd98:	e7fa      	b.n	800dd90 <z_setup_new_thread+0x50>
 800dd9a:	bf00      	nop
 800dd9c:	20001a2c 	.word	0x20001a2c

0800dda0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800dda0:	b510      	push	{r4, lr}
 800dda2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800dda4:	4c1d      	ldr	r4, [pc, #116]	; (800de1c <z_init_static_threads+0x7c>)
 800dda6:	e014      	b.n	800ddd2 <z_init_static_threads+0x32>
		z_setup_new_thread(
 800dda8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ddaa:	9305      	str	r3, [sp, #20]
 800ddac:	6a23      	ldr	r3, [r4, #32]
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	69e3      	ldr	r3, [r4, #28]
 800ddb2:	9303      	str	r3, [sp, #12]
 800ddb4:	69a3      	ldr	r3, [r4, #24]
 800ddb6:	9302      	str	r3, [sp, #8]
 800ddb8:	6963      	ldr	r3, [r4, #20]
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	68e3      	ldr	r3, [r4, #12]
 800ddc2:	68a2      	ldr	r2, [r4, #8]
 800ddc4:	6861      	ldr	r1, [r4, #4]
 800ddc6:	6820      	ldr	r0, [r4, #0]
 800ddc8:	f7ff ffba 	bl	800dd40 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800ddd0:	3430      	adds	r4, #48	; 0x30
 800ddd2:	4b13      	ldr	r3, [pc, #76]	; (800de20 <z_init_static_threads+0x80>)
 800ddd4:	429c      	cmp	r4, r3
 800ddd6:	d3e7      	bcc.n	800dda8 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800ddd8:	f000 fc1a 	bl	800e610 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800dddc:	4c0f      	ldr	r4, [pc, #60]	; (800de1c <z_init_static_threads+0x7c>)
 800ddde:	e000      	b.n	800dde2 <z_init_static_threads+0x42>
 800dde0:	3430      	adds	r4, #48	; 0x30
 800dde2:	4b0f      	ldr	r3, [pc, #60]	; (800de20 <z_init_static_threads+0x80>)
 800dde4:	429c      	cmp	r4, r3
 800dde6:	d214      	bcs.n	800de12 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800dde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddee:	d0f7      	beq.n	800dde0 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800ddf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ddf4:	17d8      	asrs	r0, r3, #31
 800ddf6:	0082      	lsls	r2, r0, #2
 800ddf8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800ddfc:	0099      	lsls	r1, r3, #2
 800ddfe:	18c9      	adds	r1, r1, r3
 800de00:	eb40 0002 	adc.w	r0, r0, r2
 800de04:	184a      	adds	r2, r1, r1
 800de06:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800de0a:	6820      	ldr	r0, [r4, #0]
 800de0c:	f7ff ff8a 	bl	800dd24 <schedule_new_thread>
 800de10:	e7e6      	b.n	800dde0 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800de12:	f000 fe07 	bl	800ea24 <k_sched_unlock>
}
 800de16:	b006      	add	sp, #24
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	bf00      	nop
 800de1c:	200006c8 	.word	0x200006c8
 800de20:	20000758 	.word	0x20000758

0800de24 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de28:	b082      	sub	sp, #8
 800de2a:	4604      	mov	r4, r0
 800de2c:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800de2e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800de32:	f04f 0110 	mov.w	r1, #16
 800de36:	f3ef 8611 	mrs	r6, BASEPRI
 800de3a:	f381 8812 	msr	BASEPRI_MAX, r1
 800de3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800de42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800de44:	6921      	ldr	r1, [r4, #16]
 800de46:	4288      	cmp	r0, r1
 800de48:	d30b      	bcc.n	800de62 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800de4a:	ea53 0102 	orrs.w	r1, r3, r2
 800de4e:	d137      	bne.n	800dec0 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800de50:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800de54:	f386 8811 	msr	BASEPRI, r6
 800de58:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800de5c:	b002      	add	sp, #8
 800de5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800de62:	4620      	mov	r0, r4
 800de64:	f006 f86a 	bl	8013f3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800de68:	4680      	mov	r8, r0
 800de6a:	b180      	cbz	r0, 800de8e <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800de6c:	68e2      	ldr	r2, [r4, #12]
 800de6e:	4629      	mov	r1, r5
 800de70:	6940      	ldr	r0, [r0, #20]
 800de72:	f006 faf7 	bl	8014464 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800de76:	2400      	movs	r4, #0
 800de78:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800de7c:	4640      	mov	r0, r8
 800de7e:	f005 ff96 	bl	8013dae <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800de82:	4631      	mov	r1, r6
 800de84:	4638      	mov	r0, r7
 800de86:	f000 fba7 	bl	800e5d8 <z_reschedule>
			return 0;
 800de8a:	4620      	mov	r0, r4
 800de8c:	e7e6      	b.n	800de5c <z_impl_k_msgq_put+0x38>
 800de8e:	68e2      	ldr	r2, [r4, #12]
 800de90:	4629      	mov	r1, r5
 800de92:	6a20      	ldr	r0, [r4, #32]
 800de94:	f006 fae6 	bl	8014464 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800de98:	68e2      	ldr	r2, [r4, #12]
 800de9a:	6a23      	ldr	r3, [r4, #32]
 800de9c:	4413      	add	r3, r2
 800de9e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800dea0:	69a2      	ldr	r2, [r4, #24]
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d009      	beq.n	800deba <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 800dea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dea8:	3301      	adds	r3, #1
 800deaa:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800deac:	2110      	movs	r1, #16
 800deae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800deb2:	f006 f9d2 	bl	801425a <z_handle_obj_poll_events>
		result = 0;
 800deb6:	2000      	movs	r0, #0
 800deb8:	e7cc      	b.n	800de54 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 800deba:	6963      	ldr	r3, [r4, #20]
 800debc:	6223      	str	r3, [r4, #32]
 800debe:	e7f2      	b.n	800dea6 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 800dec0:	4905      	ldr	r1, [pc, #20]	; (800ded8 <z_impl_k_msgq_put+0xb4>)
 800dec2:	6889      	ldr	r1, [r1, #8]
 800dec4:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800dec6:	9200      	str	r2, [sp, #0]
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	4622      	mov	r2, r4
 800decc:	4631      	mov	r1, r6
 800dece:	4638      	mov	r0, r7
 800ded0:	f000 fcf2 	bl	800e8b8 <z_pend_curr>
		return result;
 800ded4:	e7c2      	b.n	800de5c <z_impl_k_msgq_put+0x38>
 800ded6:	bf00      	nop
 800ded8:	20001a2c 	.word	0x20001a2c

0800dedc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800dedc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dede:	b083      	sub	sp, #12
 800dee0:	4604      	mov	r4, r0
 800dee2:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800dee4:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 800dee8:	f04f 0110 	mov.w	r1, #16
 800deec:	f3ef 8511 	mrs	r5, BASEPRI
 800def0:	f381 8812 	msr	BASEPRI_MAX, r1
 800def4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800def8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800defa:	2900      	cmp	r1, #0
 800defc:	d033      	beq.n	800df66 <z_impl_k_msgq_get+0x8a>
 800defe:	68e2      	ldr	r2, [r4, #12]
 800df00:	69e1      	ldr	r1, [r4, #28]
 800df02:	f006 faaf 	bl	8014464 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800df06:	68e2      	ldr	r2, [r4, #12]
 800df08:	69e3      	ldr	r3, [r4, #28]
 800df0a:	4413      	add	r3, r2
 800df0c:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800df0e:	69a2      	ldr	r2, [r4, #24]
 800df10:	4293      	cmp	r3, r2
 800df12:	d022      	beq.n	800df5a <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 800df14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df16:	3b01      	subs	r3, #1
 800df18:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800df1a:	4620      	mov	r0, r4
 800df1c:	f006 f80e 	bl	8013f3c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800df20:	4607      	mov	r7, r0
 800df22:	2800      	cmp	r0, #0
 800df24:	d035      	beq.n	800df92 <z_impl_k_msgq_get+0xb6>
 800df26:	68e2      	ldr	r2, [r4, #12]
 800df28:	6941      	ldr	r1, [r0, #20]
 800df2a:	6a20      	ldr	r0, [r4, #32]
 800df2c:	f006 fa9a 	bl	8014464 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800df30:	68e2      	ldr	r2, [r4, #12]
 800df32:	6a23      	ldr	r3, [r4, #32]
 800df34:	4413      	add	r3, r2
 800df36:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800df38:	69a2      	ldr	r2, [r4, #24]
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d010      	beq.n	800df60 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800df3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df40:	3301      	adds	r3, #1
 800df42:	6263      	str	r3, [r4, #36]	; 0x24
 800df44:	2400      	movs	r4, #0
 800df46:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800df48:	4638      	mov	r0, r7
 800df4a:	f005 ff30 	bl	8013dae <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800df4e:	4629      	mov	r1, r5
 800df50:	4630      	mov	r0, r6
 800df52:	f000 fb41 	bl	800e5d8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800df56:	4620      	mov	r0, r4
 800df58:	e00e      	b.n	800df78 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 800df5a:	6963      	ldr	r3, [r4, #20]
 800df5c:	61e3      	str	r3, [r4, #28]
 800df5e:	e7d9      	b.n	800df14 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 800df60:	6963      	ldr	r3, [r4, #20]
 800df62:	6223      	str	r3, [r4, #32]
 800df64:	e7eb      	b.n	800df3e <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800df66:	ea53 0102 	orrs.w	r1, r3, r2
 800df6a:	d107      	bne.n	800df7c <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 800df6c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800df70:	f385 8811 	msr	BASEPRI, r5
 800df74:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800df78:	b003      	add	sp, #12
 800df7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800df7c:	4906      	ldr	r1, [pc, #24]	; (800df98 <z_impl_k_msgq_get+0xbc>)
 800df7e:	6889      	ldr	r1, [r1, #8]
 800df80:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800df82:	9200      	str	r2, [sp, #0]
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	4622      	mov	r2, r4
 800df88:	4629      	mov	r1, r5
 800df8a:	4630      	mov	r0, r6
 800df8c:	f000 fc94 	bl	800e8b8 <z_pend_curr>
		return result;
 800df90:	e7f2      	b.n	800df78 <z_impl_k_msgq_get+0x9c>
		result = 0;
 800df92:	2000      	movs	r0, #0
 800df94:	e7ec      	b.n	800df70 <z_impl_k_msgq_get+0x94>
 800df96:	bf00      	nop
 800df98:	20001a2c 	.word	0x20001a2c

0800df9c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800df9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	461d      	mov	r5, r3
	__asm__ volatile(
 800dfa6:	f04f 0310 	mov.w	r3, #16
 800dfaa:	f3ef 8711 	mrs	r7, BASEPRI
 800dfae:	f383 8812 	msr	BASEPRI_MAX, r3
 800dfb2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800dfb6:	68c1      	ldr	r1, [r0, #12]
 800dfb8:	b999      	cbnz	r1, 800dfe2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800dfba:	2900      	cmp	r1, #0
 800dfbc:	d14f      	bne.n	800e05e <z_impl_k_mutex_lock+0xc2>
 800dfbe:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <z_impl_k_mutex_lock+0x10c>)
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800dfc6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800dfc8:	3101      	adds	r1, #1
 800dfca:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800dfcc:	4b36      	ldr	r3, [pc, #216]	; (800e0a8 <z_impl_k_mutex_lock+0x10c>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800dfd2:	f387 8811 	msr	BASEPRI, r7
 800dfd6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800dfda:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800dfdc:	b003      	add	sp, #12
 800dfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfe2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800dfe4:	6882      	ldr	r2, [r0, #8]
 800dfe6:	4b30      	ldr	r3, [pc, #192]	; (800e0a8 <z_impl_k_mutex_lock+0x10c>)
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d0e5      	beq.n	800dfba <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800dfee:	ea55 0106 	orrs.w	r1, r5, r6
 800dff2:	bf0c      	ite	eq
 800dff4:	f04f 0801 	moveq.w	r8, #1
 800dff8:	f04f 0800 	movne.w	r8, #0
 800dffc:	d031      	beq.n	800e062 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800dffe:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800e002:	4649      	mov	r1, r9
 800e004:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800e008:	f005 fdbb 	bl	8013b82 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800e00c:	4581      	cmp	r9, r0
 800e00e:	dc2f      	bgt.n	800e070 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800e010:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800e014:	9600      	str	r6, [sp, #0]
 800e016:	9501      	str	r5, [sp, #4]
 800e018:	4622      	mov	r2, r4
 800e01a:	4639      	mov	r1, r7
 800e01c:	4823      	ldr	r0, [pc, #140]	; (800e0ac <z_impl_k_mutex_lock+0x110>)
 800e01e:	f000 fc4b 	bl	800e8b8 <z_pend_curr>
	if (got_mutex == 0) {
 800e022:	2800      	cmp	r0, #0
 800e024:	d0da      	beq.n	800dfdc <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800e026:	f04f 0310 	mov.w	r3, #16
 800e02a:	f3ef 8511 	mrs	r5, BASEPRI
 800e02e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e032:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800e036:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e038:	42a3      	cmp	r3, r4
 800e03a:	d01f      	beq.n	800e07c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800e03c:	b1f3      	cbz	r3, 800e07c <z_impl_k_mutex_lock+0xe0>
 800e03e:	6921      	ldr	r1, [r4, #16]
 800e040:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800e044:	f005 fd9d 	bl	8013b82 <new_prio_for_inheritance>
 800e048:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800e04a:	4620      	mov	r0, r4
 800e04c:	f005 fda4 	bl	8013b98 <adjust_owner_prio>
 800e050:	b9b0      	cbnz	r0, 800e080 <z_impl_k_mutex_lock+0xe4>
 800e052:	f1b9 0f00 	cmp.w	r9, #0
 800e056:	d015      	beq.n	800e084 <z_impl_k_mutex_lock+0xe8>
 800e058:	f04f 0801 	mov.w	r8, #1
 800e05c:	e012      	b.n	800e084 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800e05e:	6923      	ldr	r3, [r4, #16]
 800e060:	e7b1      	b.n	800dfc6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800e062:	f387 8811 	msr	BASEPRI, r7
 800e066:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800e06a:	f06f 000f 	mvn.w	r0, #15
 800e06e:	e7b5      	b.n	800dfdc <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800e070:	4601      	mov	r1, r0
 800e072:	4620      	mov	r0, r4
 800e074:	f005 fd90 	bl	8013b98 <adjust_owner_prio>
 800e078:	4681      	mov	r9, r0
 800e07a:	e7cb      	b.n	800e014 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800e07c:	6921      	ldr	r1, [r4, #16]
 800e07e:	e7e4      	b.n	800e04a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800e080:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800e084:	f1b8 0f00 	cmp.w	r8, #0
 800e088:	d106      	bne.n	800e098 <z_impl_k_mutex_lock+0xfc>
 800e08a:	f385 8811 	msr	BASEPRI, r5
 800e08e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800e092:	f06f 000a 	mvn.w	r0, #10
 800e096:	e7a1      	b.n	800dfdc <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800e098:	4629      	mov	r1, r5
 800e09a:	4804      	ldr	r0, [pc, #16]	; (800e0ac <z_impl_k_mutex_lock+0x110>)
 800e09c:	f000 fa9c 	bl	800e5d8 <z_reschedule>
	return -EAGAIN;
 800e0a0:	f06f 000a 	mvn.w	r0, #10
 800e0a4:	e79a      	b.n	800dfdc <z_impl_k_mutex_lock+0x40>
 800e0a6:	bf00      	nop
 800e0a8:	20001a2c 	.word	0x20001a2c
 800e0ac:	20001a50 	.word	0x20001a50

0800e0b0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800e0b0:	6882      	ldr	r2, [r0, #8]
 800e0b2:	2a00      	cmp	r2, #0
 800e0b4:	d034      	beq.n	800e120 <z_impl_k_mutex_unlock+0x70>
{
 800e0b6:	b538      	push	{r3, r4, r5, lr}
 800e0b8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800e0ba:	4b1c      	ldr	r3, [pc, #112]	; (800e12c <z_impl_k_mutex_unlock+0x7c>)
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d131      	bne.n	800e126 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800e0c2:	7bda      	ldrb	r2, [r3, #15]
 800e0c4:	3a01      	subs	r2, #1
 800e0c6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800e0c8:	68c3      	ldr	r3, [r0, #12]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d905      	bls.n	800e0da <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800e0d2:	f000 fca7 	bl	800ea24 <k_sched_unlock>

	return 0;
 800e0d6:	2000      	movs	r0, #0
}
 800e0d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800e0da:	f04f 0310 	mov.w	r3, #16
 800e0de:	f3ef 8511 	mrs	r5, BASEPRI
 800e0e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0e6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800e0ea:	6901      	ldr	r1, [r0, #16]
 800e0ec:	f005 fd54 	bl	8013b98 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f005 ff23 	bl	8013f3c <z_unpend_first_thread>
	mutex->owner = new_owner;
 800e0f6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800e0f8:	b158      	cbz	r0, 800e112 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800e0fa:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800e0fe:	6123      	str	r3, [r4, #16]
 800e100:	2300      	movs	r3, #0
 800e102:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800e104:	f005 fe53 	bl	8013dae <z_ready_thread>
		z_reschedule(&lock, key);
 800e108:	4629      	mov	r1, r5
 800e10a:	4809      	ldr	r0, [pc, #36]	; (800e130 <z_impl_k_mutex_unlock+0x80>)
 800e10c:	f000 fa64 	bl	800e5d8 <z_reschedule>
 800e110:	e7df      	b.n	800e0d2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800e116:	f385 8811 	msr	BASEPRI, r5
 800e11a:	f3bf 8f6f 	isb	sy
 800e11e:	e7d8      	b.n	800e0d2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800e120:	f06f 0015 	mvn.w	r0, #21
}
 800e124:	4770      	bx	lr
		return -EPERM;
 800e126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e12a:	e7d5      	b.n	800e0d8 <z_impl_k_mutex_unlock+0x28>
 800e12c:	20001a2c 	.word	0x20001a2c
 800e130:	20001a50 	.word	0x20001a50

0800e134 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4604      	mov	r4, r0
	__asm__ volatile(
 800e138:	f04f 0310 	mov.w	r3, #16
 800e13c:	f3ef 8511 	mrs	r5, BASEPRI
 800e140:	f383 8812 	msr	BASEPRI_MAX, r3
 800e144:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800e148:	f005 fef8 	bl	8013f3c <z_unpend_first_thread>

	if (thread != NULL) {
 800e14c:	b140      	cbz	r0, 800e160 <z_impl_k_sem_give+0x2c>
 800e14e:	2200      	movs	r2, #0
 800e150:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800e152:	f005 fe2c 	bl	8013dae <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800e156:	4629      	mov	r1, r5
 800e158:	4809      	ldr	r0, [pc, #36]	; (800e180 <z_impl_k_sem_give+0x4c>)
 800e15a:	f000 fa3d 	bl	800e5d8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800e15e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800e160:	68a3      	ldr	r3, [r4, #8]
 800e162:	68e2      	ldr	r2, [r4, #12]
 800e164:	4293      	cmp	r3, r2
 800e166:	d008      	beq.n	800e17a <z_impl_k_sem_give+0x46>
 800e168:	2201      	movs	r2, #1
 800e16a:	4413      	add	r3, r2
 800e16c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800e16e:	2102      	movs	r1, #2
 800e170:	f104 0010 	add.w	r0, r4, #16
 800e174:	f006 f871 	bl	801425a <z_handle_obj_poll_events>
}
 800e178:	e7ed      	b.n	800e156 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800e17a:	2200      	movs	r2, #0
 800e17c:	e7f5      	b.n	800e16a <z_impl_k_sem_give+0x36>
 800e17e:	bf00      	nop
 800e180:	20001a54 	.word	0x20001a54

0800e184 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800e184:	b510      	push	{r4, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	f04f 0410 	mov.w	r4, #16
 800e18c:	f3ef 8111 	mrs	r1, BASEPRI
 800e190:	f384 8812 	msr	BASEPRI_MAX, r4
 800e194:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800e198:	6884      	ldr	r4, [r0, #8]
 800e19a:	b144      	cbz	r4, 800e1ae <z_impl_k_sem_take+0x2a>
		sem->count--;
 800e19c:	3c01      	subs	r4, #1
 800e19e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800e1a0:	f381 8811 	msr	BASEPRI, r1
 800e1a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800e1a8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800e1aa:	b002      	add	sp, #8
 800e1ac:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800e1ae:	ea53 0402 	orrs.w	r4, r3, r2
 800e1b2:	d006      	beq.n	800e1c2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800e1b4:	9200      	str	r2, [sp, #0]
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	4805      	ldr	r0, [pc, #20]	; (800e1d0 <z_impl_k_sem_take+0x4c>)
 800e1bc:	f000 fb7c 	bl	800e8b8 <z_pend_curr>
	return ret;
 800e1c0:	e7f3      	b.n	800e1aa <z_impl_k_sem_take+0x26>
 800e1c2:	f381 8811 	msr	BASEPRI, r1
 800e1c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800e1ca:	f06f 000f 	mvn.w	r0, #15
 800e1ce:	e7ec      	b.n	800e1aa <z_impl_k_sem_take+0x26>
 800e1d0:	20001a54 	.word	0x20001a54

0800e1d4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	4604      	mov	r4, r0
	__asm__ volatile(
 800e1d8:	f04f 0310 	mov.w	r3, #16
 800e1dc:	f3ef 8511 	mrs	r5, BASEPRI
 800e1e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800e1e4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800e1e8:	e004      	b.n	800e1f4 <z_impl_k_sem_reset+0x20>
 800e1ea:	f06f 020a 	mvn.w	r2, #10
 800e1ee:	67c2      	str	r2, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800e1f0:	f005 fddd 	bl	8013dae <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f005 fea1 	bl	8013f3c <z_unpend_first_thread>
		if (thread == NULL) {
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d1f5      	bne.n	800e1ea <z_impl_k_sem_reset+0x16>
	}
	sem->count = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800e202:	2102      	movs	r1, #2
 800e204:	f104 0010 	add.w	r0, r4, #16
 800e208:	f006 f827 	bl	801425a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 800e20c:	4629      	mov	r1, r5
 800e20e:	4802      	ldr	r0, [pc, #8]	; (800e218 <z_impl_k_sem_reset+0x44>)
 800e210:	f000 f9e2 	bl	800e5d8 <z_reschedule>
}
 800e214:	bd38      	pop	{r3, r4, r5, pc}
 800e216:	bf00      	nop
 800e218:	20001a54 	.word	0x20001a54

0800e21c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800e21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800e220:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800e222:	f013 0f02 	tst.w	r3, #2
 800e226:	d15c      	bne.n	800e2e2 <submit_to_queue_locked+0xc6>
 800e228:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800e22a:	f013 0f04 	tst.w	r3, #4
 800e22e:	d15d      	bne.n	800e2ec <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800e230:	680b      	ldr	r3, [r1, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d038      	beq.n	800e2a8 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800e236:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800e238:	f013 0f01 	tst.w	r3, #1
 800e23c:	d037      	beq.n	800e2ae <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800e23e:	68a3      	ldr	r3, [r4, #8]
 800e240:	602b      	str	r3, [r5, #0]
			ret = 2;
 800e242:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800e244:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800e246:	2e00      	cmp	r6, #0
 800e248:	d03f      	beq.n	800e2ca <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800e24a:	4b29      	ldr	r3, [pc, #164]	; (800e2f0 <submit_to_queue_locked+0xd4>)
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	42b3      	cmp	r3, r6
 800e250:	d02f      	beq.n	800e2b2 <submit_to_queue_locked+0x96>
 800e252:	2300      	movs	r3, #0
 800e254:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800e256:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800e25a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800e25e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800e262:	f013 0f01 	tst.w	r3, #1
 800e266:	d033      	beq.n	800e2d0 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800e268:	b101      	cbz	r1, 800e26c <submit_to_queue_locked+0x50>
 800e26a:	b3a2      	cbz	r2, 800e2d6 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800e26c:	b100      	cbz	r0, 800e270 <submit_to_queue_locked+0x54>
 800e26e:	b3a9      	cbz	r1, 800e2dc <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800e270:	2300      	movs	r3, #0
 800e272:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800e274:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800e278:	b313      	cbz	r3, 800e2c0 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800e27a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800e27c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800e280:	b12e      	cbz	r6, 800e28e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800e282:	2200      	movs	r2, #0
 800e284:	4611      	mov	r1, r2
 800e286:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800e28a:	f005 fe9a 	bl	8013fc2 <z_sched_wake>
		ret = 1;
 800e28e:	2001      	movs	r0, #1

		if (rc < 0) {
 800e290:	2800      	cmp	r0, #0
 800e292:	db06      	blt.n	800e2a2 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800e294:	68e3      	ldr	r3, [r4, #12]
 800e296:	f043 0304 	orr.w	r3, r3, #4
 800e29a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	dc21      	bgt.n	800e2ea <submit_to_queue_locked+0xce>
 800e2a6:	e01e      	b.n	800e2e6 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800e2a8:	6883      	ldr	r3, [r0, #8]
 800e2aa:	600b      	str	r3, [r1, #0]
 800e2ac:	e7c3      	b.n	800e236 <submit_to_queue_locked+0x1a>
		ret = 1;
 800e2ae:	2701      	movs	r7, #1
 800e2b0:	e7c8      	b.n	800e244 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800e2b2:	f005 fbfc 	bl	8013aae <k_is_in_isr>
 800e2b6:	b908      	cbnz	r0, 800e2bc <submit_to_queue_locked+0xa0>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e7cb      	b.n	800e254 <submit_to_queue_locked+0x38>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e7c9      	b.n	800e254 <submit_to_queue_locked+0x38>
 800e2c0:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800e2c4:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800e2c8:	e7da      	b.n	800e280 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800e2ca:	f06f 0015 	mvn.w	r0, #21
 800e2ce:	e7df      	b.n	800e290 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800e2d0:	f06f 0012 	mvn.w	r0, #18
 800e2d4:	e7dc      	b.n	800e290 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800e2d6:	f06f 000f 	mvn.w	r0, #15
 800e2da:	e7d9      	b.n	800e290 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800e2dc:	f06f 000f 	mvn.w	r0, #15
 800e2e0:	e7d6      	b.n	800e290 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800e2e2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800e2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7fa      	b.n	800e2e6 <submit_to_queue_locked+0xca>
 800e2f0:	20001a2c 	.word	0x20001a2c

0800e2f4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800e2f4:	b508      	push	{r3, lr}
 800e2f6:	4684      	mov	ip, r0
 800e2f8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800e2fa:	ea53 0102 	orrs.w	r1, r3, r2
 800e2fe:	d00c      	beq.n	800e31a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
 800e300:	68c1      	ldr	r1, [r0, #12]
 800e302:	f041 0108 	orr.w	r1, r1, #8
 800e306:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 800e308:	f8dc 1000 	ldr.w	r1, [ip]
 800e30c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800e30e:	4905      	ldr	r1, [pc, #20]	; (800e324 <schedule_for_queue_locked+0x30>)
 800e310:	3010      	adds	r0, #16
 800e312:	f000 fd61 	bl	800edd8 <z_add_timeout>

	return ret;
 800e316:	2001      	movs	r0, #1
}
 800e318:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
 800e31a:	4661      	mov	r1, ip
 800e31c:	f7ff ff7e 	bl	800e21c <submit_to_queue_locked>
 800e320:	e7fa      	b.n	800e318 <schedule_for_queue_locked+0x24>
 800e322:	bf00      	nop
 800e324:	08013be3 	.word	0x08013be3

0800e328 <finalize_cancel_locked>:
{
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800e32c:	68c3      	ldr	r3, [r0, #12]
 800e32e:	f023 0302 	bic.w	r3, r3, #2
 800e332:	60c3      	str	r3, [r0, #12]
	return list->head;
 800e334:	4b1a      	ldr	r3, [pc, #104]	; (800e3a0 <finalize_cancel_locked+0x78>)
 800e336:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800e338:	b1fb      	cbz	r3, 800e37a <finalize_cancel_locked+0x52>
 800e33a:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e33c:	b103      	cbz	r3, 800e340 <finalize_cancel_locked+0x18>
	return node->next;
 800e33e:	681c      	ldr	r4, [r3, #0]
 800e340:	2600      	movs	r6, #0
 800e342:	e01f      	b.n	800e384 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800e344:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800e346:	b166      	cbz	r6, 800e362 <finalize_cancel_locked+0x3a>
	return node->next;
 800e348:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800e34a:	6031      	str	r1, [r6, #0]
	return list->tail;
 800e34c:	4914      	ldr	r1, [pc, #80]	; (800e3a0 <finalize_cancel_locked+0x78>)
 800e34e:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e350:	428b      	cmp	r3, r1
 800e352:	d00f      	beq.n	800e374 <finalize_cancel_locked+0x4c>
	parent->next = child;
 800e354:	2100      	movs	r1, #0
 800e356:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800e358:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800e35c:	f7ff feea 	bl	800e134 <z_impl_k_sem_give>
}
 800e360:	e015      	b.n	800e38e <finalize_cancel_locked+0x66>
	return node->next;
 800e362:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800e364:	490e      	ldr	r1, [pc, #56]	; (800e3a0 <finalize_cancel_locked+0x78>)
 800e366:	6008      	str	r0, [r1, #0]
	return list->tail;
 800e368:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e36a:	428b      	cmp	r3, r1
 800e36c:	d1f2      	bne.n	800e354 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800e36e:	490c      	ldr	r1, [pc, #48]	; (800e3a0 <finalize_cancel_locked+0x78>)
 800e370:	6048      	str	r0, [r1, #4]
}
 800e372:	e7ef      	b.n	800e354 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800e374:	490a      	ldr	r1, [pc, #40]	; (800e3a0 <finalize_cancel_locked+0x78>)
 800e376:	604e      	str	r6, [r1, #4]
}
 800e378:	e7ec      	b.n	800e354 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800e37a:	461c      	mov	r4, r3
 800e37c:	e7e0      	b.n	800e340 <finalize_cancel_locked+0x18>
 800e37e:	4622      	mov	r2, r4
 800e380:	4623      	mov	r3, r4
 800e382:	4614      	mov	r4, r2
 800e384:	b153      	cbz	r3, 800e39c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	42aa      	cmp	r2, r5
 800e38a:	d0db      	beq.n	800e344 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800e38c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800e38e:	2c00      	cmp	r4, #0
 800e390:	d0f5      	beq.n	800e37e <finalize_cancel_locked+0x56>
 800e392:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e394:	2c00      	cmp	r4, #0
 800e396:	d0f3      	beq.n	800e380 <finalize_cancel_locked+0x58>
	return node->next;
 800e398:	6822      	ldr	r2, [r4, #0]
 800e39a:	e7f1      	b.n	800e380 <finalize_cancel_locked+0x58>
}
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
 800e39e:	bf00      	nop
 800e3a0:	20001a5c 	.word	0x20001a5c

0800e3a4 <work_queue_main>:
{
 800e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800e3aa:	e016      	b.n	800e3da <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800e3ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800e3b0:	f023 0204 	bic.w	r2, r3, #4
 800e3b4:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800e3b8:	f013 0f04 	tst.w	r3, #4
 800e3bc:	d159      	bne.n	800e472 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800e3be:	2300      	movs	r3, #0
 800e3c0:	9302      	str	r3, [sp, #8]
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3ca:	e9cd 2300 	strd	r2, r3, [sp]
 800e3ce:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	482e      	ldr	r0, [pc, #184]	; (800e490 <work_queue_main+0xec>)
 800e3d6:	f000 fc89 	bl	800ecec <z_sched_wait>
 800e3da:	f04f 0310 	mov.w	r3, #16
 800e3de:	f3ef 8611 	mrs	r6, BASEPRI
 800e3e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800e3e6:	f3bf 8f6f 	isb	sy
	return list->head;
 800e3ea:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	d0dc      	beq.n	800e3ac <work_queue_main+0x8>
	return node->next;
 800e3f2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800e3f4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800e3f8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800e3fc:	4294      	cmp	r4, r2
 800e3fe:	d035      	beq.n	800e46c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800e400:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e404:	f043 0302 	orr.w	r3, r3, #2
 800e408:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800e40c:	68e3      	ldr	r3, [r4, #12]
 800e40e:	f043 0301 	orr.w	r3, r3, #1
 800e412:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800e414:	f023 0304 	bic.w	r3, r3, #4
 800e418:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800e41a:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	d0ce      	beq.n	800e3be <work_queue_main+0x1a>
	__asm__ volatile(
 800e420:	f386 8811 	msr	BASEPRI, r6
 800e424:	f3bf 8f6f 	isb	sy
		handler(work);
 800e428:	4620      	mov	r0, r4
 800e42a:	4798      	blx	r3
	__asm__ volatile(
 800e42c:	f04f 0310 	mov.w	r3, #16
 800e430:	f3ef 8611 	mrs	r6, BASEPRI
 800e434:	f383 8812 	msr	BASEPRI_MAX, r3
 800e438:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800e43c:	68e3      	ldr	r3, [r4, #12]
 800e43e:	f023 0301 	bic.w	r3, r3, #1
 800e442:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800e444:	f013 0f02 	tst.w	r3, #2
 800e448:	d11e      	bne.n	800e488 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800e44a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e44e:	f023 0302 	bic.w	r3, r3, #2
 800e452:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800e456:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800e45a:	f386 8811 	msr	BASEPRI, r6
 800e45e:	f3bf 8f6f 	isb	sy
		if (yield) {
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1b9      	bne.n	800e3da <work_queue_main+0x36>
	z_impl_k_yield();
 800e466:	f000 fb5b 	bl	800eb20 <z_impl_k_yield>
}
 800e46a:	e7b6      	b.n	800e3da <work_queue_main+0x36>
	list->tail = node;
 800e46c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800e470:	e7c6      	b.n	800e400 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800e472:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800e476:	2200      	movs	r2, #0
 800e478:	2101      	movs	r1, #1
 800e47a:	4638      	mov	r0, r7
 800e47c:	f005 fda1 	bl	8013fc2 <z_sched_wake>
 800e480:	2800      	cmp	r0, #0
 800e482:	d1f8      	bne.n	800e476 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800e484:	2300      	movs	r3, #0
 800e486:	e7c9      	b.n	800e41c <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800e488:	4620      	mov	r0, r4
 800e48a:	f7ff ff4d 	bl	800e328 <finalize_cancel_locked>
 800e48e:	e7dc      	b.n	800e44a <work_queue_main+0xa6>
 800e490:	20001a58 	.word	0x20001a58

0800e494 <k_work_submit>:
{
 800e494:	b508      	push	{r3, lr}
 800e496:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800e498:	4801      	ldr	r0, [pc, #4]	; (800e4a0 <k_work_submit+0xc>)
 800e49a:	f005 fbcc 	bl	8013c36 <k_work_submit_to_queue>
}
 800e49e:	bd08      	pop	{r3, pc}
 800e4a0:	200010d8 	.word	0x200010d8

0800e4a4 <k_work_queue_start>:
{
 800e4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a6:	b089      	sub	sp, #36	; 0x24
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800e4b2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800e4b6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800e4ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800e4be:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800e4c2:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800e4c6:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800e4ca:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
 800e4ce:	b1fd      	cbz	r5, 800e510 <k_work_queue_start+0x6c>
 800e4d0:	7928      	ldrb	r0, [r5, #4]
 800e4d2:	b9f8      	cbnz	r0, 800e514 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800e4d4:	2001      	movs	r0, #1
	*flagp = flags;
 800e4d6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800e4da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e4de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e4e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	9004      	str	r0, [sp, #16]
 800e4ea:	9303      	str	r3, [sp, #12]
 800e4ec:	9002      	str	r0, [sp, #8]
 800e4ee:	9001      	str	r0, [sp, #4]
 800e4f0:	9400      	str	r4, [sp, #0]
 800e4f2:	4b0a      	ldr	r3, [pc, #40]	; (800e51c <k_work_queue_start+0x78>)
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f005 faf4 	bl	8013ae2 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800e4fa:	b125      	cbz	r5, 800e506 <k_work_queue_start+0x62>
 800e4fc:	6829      	ldr	r1, [r5, #0]
 800e4fe:	b111      	cbz	r1, 800e506 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800e500:	4620      	mov	r0, r4
 800e502:	f005 fada 	bl	8013aba <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800e506:	4620      	mov	r0, r4
 800e508:	f005 fadc 	bl	8013ac4 <z_impl_k_thread_start>
}
 800e50c:	b009      	add	sp, #36	; 0x24
 800e50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800e510:	2001      	movs	r0, #1
 800e512:	e7e0      	b.n	800e4d6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800e514:	f240 1001 	movw	r0, #257	; 0x101
 800e518:	e7dd      	b.n	800e4d6 <k_work_queue_start+0x32>
 800e51a:	bf00      	nop
 800e51c:	0800e3a5 	.word	0x0800e3a5

0800e520 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 800e520:	b508      	push	{r3, lr}
 800e522:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
 800e524:	4801      	ldr	r0, [pc, #4]	; (800e52c <k_work_schedule+0xc>)
 800e526:	f005 fbb2 	bl	8013c8e <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
 800e52a:	bd08      	pop	{r3, pc}
 800e52c:	200010d8 	.word	0x200010d8

0800e530 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e534:	bf08      	it	eq
 800e536:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800e53a:	d100      	bne.n	800e53e <add_thread_timeout+0xe>
 800e53c:	4770      	bx	lr
{
 800e53e:	b508      	push	{r3, lr}
 800e540:	4902      	ldr	r1, [pc, #8]	; (800e54c <add_thread_timeout+0x1c>)
 800e542:	3018      	adds	r0, #24
 800e544:	f000 fc48 	bl	800edd8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800e548:	bd08      	pop	{r3, pc}
 800e54a:	bf00      	nop
 800e54c:	08013de7 	.word	0x08013de7

0800e550 <z_reset_time_slice>:
{
 800e550:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800e552:	4b08      	ldr	r3, [pc, #32]	; (800e574 <z_reset_time_slice+0x24>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	b903      	cbnz	r3, 800e55a <z_reset_time_slice+0xa>
}
 800e558:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800e55a:	f7fb fca3 	bl	8009ea4 <sys_clock_elapsed>
 800e55e:	4603      	mov	r3, r0
 800e560:	4a04      	ldr	r2, [pc, #16]	; (800e574 <z_reset_time_slice+0x24>)
 800e562:	6810      	ldr	r0, [r2, #0]
 800e564:	4403      	add	r3, r0
 800e566:	4a04      	ldr	r2, [pc, #16]	; (800e578 <z_reset_time_slice+0x28>)
 800e568:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800e56a:	2100      	movs	r1, #0
 800e56c:	f005 fd95 	bl	801409a <z_set_timeout_expiry>
}
 800e570:	e7f2      	b.n	800e558 <z_reset_time_slice+0x8>
 800e572:	bf00      	nop
 800e574:	20001a70 	.word	0x20001a70
 800e578:	20001a2c 	.word	0x20001a2c

0800e57c <k_sched_time_slice_set>:
{
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	4604      	mov	r4, r0
 800e580:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800e582:	2300      	movs	r3, #0
	__asm__ volatile(
 800e584:	f04f 0210 	mov.w	r2, #16
 800e588:	f3ef 8611 	mrs	r6, BASEPRI
 800e58c:	f382 8812 	msr	BASEPRI_MAX, r2
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	e00c      	b.n	800e5b0 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800e596:	2b02      	cmp	r3, #2
 800e598:	bfb8      	it	lt
 800e59a:	2302      	movlt	r3, #2
 800e59c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800e59e:	4b0b      	ldr	r3, [pc, #44]	; (800e5cc <k_sched_time_slice_set+0x50>)
 800e5a0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800e5a2:	f7ff ffd5 	bl	800e550 <z_reset_time_slice>
	__asm__ volatile(
 800e5a6:	f386 8811 	msr	BASEPRI, r6
 800e5aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	b953      	cbnz	r3, 800e5c8 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800e5b2:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <k_sched_time_slice_set+0x54>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800e5b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e5bc:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800e5be:	4a05      	ldr	r2, [pc, #20]	; (800e5d4 <k_sched_time_slice_set+0x58>)
 800e5c0:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800e5c2:	2c00      	cmp	r4, #0
 800e5c4:	dce7      	bgt.n	800e596 <k_sched_time_slice_set+0x1a>
 800e5c6:	e7ea      	b.n	800e59e <k_sched_time_slice_set+0x22>
}
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	bf00      	nop
 800e5cc:	20001a6c 	.word	0x20001a6c
 800e5d0:	20001a2c 	.word	0x20001a2c
 800e5d4:	20001a70 	.word	0x20001a70

0800e5d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800e5d8:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800e5da:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e5dc:	b921      	cbnz	r1, 800e5e8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5de:	f3ef 8305 	mrs	r3, IPSR
 800e5e2:	b913      	cbnz	r3, 800e5ea <z_reschedule+0x12>
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	e000      	b.n	800e5ea <z_reschedule+0x12>
 800e5e8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800e5ea:	f011 0f01 	tst.w	r1, #1
 800e5ee:	d007      	beq.n	800e600 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800e5f0:	4b06      	ldr	r3, [pc, #24]	; (800e60c <z_reschedule+0x34>)
 800e5f2:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800e5f4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d002      	beq.n	800e600 <z_reschedule+0x28>
	ret = arch_swap(key);
 800e5fa:	f7f5 fb2b 	bl	8003c54 <arch_swap>
		z_swap(lock, key);
 800e5fe:	e003      	b.n	800e608 <z_reschedule+0x30>
 800e600:	f380 8811 	msr	BASEPRI, r0
 800e604:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800e608:	bd08      	pop	{r3, pc}
 800e60a:	bf00      	nop
 800e60c:	20001a2c 	.word	0x20001a2c

0800e610 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800e610:	2300      	movs	r3, #0
	__asm__ volatile(
 800e612:	f04f 0210 	mov.w	r2, #16
 800e616:	f3ef 8111 	mrs	r1, BASEPRI
 800e61a:	f382 8812 	msr	BASEPRI_MAX, r2
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	e009      	b.n	800e638 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800e624:	4b06      	ldr	r3, [pc, #24]	; (800e640 <k_sched_lock+0x30>)
 800e626:	689a      	ldr	r2, [r3, #8]
 800e628:	7bd3      	ldrb	r3, [r2, #15]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800e62e:	f381 8811 	msr	BASEPRI, r1
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	2301      	movs	r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d0f3      	beq.n	800e624 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	20001a2c 	.word	0x20001a2c

0800e644 <update_cache>:
{
 800e644:	b538      	push	{r3, r4, r5, lr}
 800e646:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800e648:	480f      	ldr	r0, [pc, #60]	; (800e688 <update_cache+0x44>)
 800e64a:	f005 fba9 	bl	8013da0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800e64e:	4605      	mov	r5, r0
 800e650:	b170      	cbz	r0, 800e670 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800e652:	b984      	cbnz	r4, 800e676 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800e654:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <update_cache+0x48>)
 800e656:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800e658:	7b5a      	ldrb	r2, [r3, #13]
 800e65a:	f012 0f1f 	tst.w	r2, #31
 800e65e:	d10a      	bne.n	800e676 <update_cache+0x32>
	return node->next != NULL;
 800e660:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800e662:	b942      	cbnz	r2, 800e676 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800e664:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800e666:	2a7f      	cmp	r2, #127	; 0x7f
 800e668:	d905      	bls.n	800e676 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800e66a:	4a08      	ldr	r2, [pc, #32]	; (800e68c <update_cache+0x48>)
 800e66c:	6193      	str	r3, [r2, #24]
 800e66e:	e00a      	b.n	800e686 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800e670:	4b06      	ldr	r3, [pc, #24]	; (800e68c <update_cache+0x48>)
 800e672:	68dd      	ldr	r5, [r3, #12]
 800e674:	e7ed      	b.n	800e652 <update_cache+0xe>
		if (thread != _current) {
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <update_cache+0x48>)
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	42ab      	cmp	r3, r5
 800e67c:	d001      	beq.n	800e682 <update_cache+0x3e>
			z_reset_time_slice();
 800e67e:	f7ff ff67 	bl	800e550 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800e682:	4b02      	ldr	r3, [pc, #8]	; (800e68c <update_cache+0x48>)
 800e684:	619d      	str	r5, [r3, #24]
}
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	20001a48 	.word	0x20001a48
 800e68c:	20001a2c 	.word	0x20001a2c

0800e690 <move_thread_to_end_of_prio_q>:
{
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800e694:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800e696:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	db28      	blt.n	800e6f0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800e69e:	7b6b      	ldrb	r3, [r5, #13]
 800e6a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e6a4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	; (800e710 <move_thread_to_end_of_prio_q+0x80>)
 800e6a8:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e6ac:	429c      	cmp	r4, r3
 800e6ae:	d02d      	beq.n	800e70c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e6b0:	b16c      	cbz	r4, 800e6ce <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f005 fb08 	bl	8013cca <z_sched_prio_cmp>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	dc20      	bgt.n	800e700 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800e6be:	b134      	cbz	r4, 800e6ce <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800e6c0:	4b13      	ldr	r3, [pc, #76]	; (800e710 <move_thread_to_end_of_prio_q+0x80>)
 800e6c2:	6a1b      	ldr	r3, [r3, #32]
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d002      	beq.n	800e6ce <move_thread_to_end_of_prio_q+0x3e>
 800e6c8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e6ca:	2c00      	cmp	r4, #0
 800e6cc:	d1f0      	bne.n	800e6b0 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <move_thread_to_end_of_prio_q+0x80>)
 800e6d0:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800e6d2:	f103 011c 	add.w	r1, r3, #28
 800e6d6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800e6d8:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800e6da:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800e6dc:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800e6de:	4b0c      	ldr	r3, [pc, #48]	; (800e710 <move_thread_to_end_of_prio_q+0x80>)
 800e6e0:	6898      	ldr	r0, [r3, #8]
 800e6e2:	42a8      	cmp	r0, r5
 800e6e4:	bf14      	ite	ne
 800e6e6:	2000      	movne	r0, #0
 800e6e8:	2001      	moveq	r0, #1
 800e6ea:	f7ff ffab 	bl	800e644 <update_cache>
}
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e6f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e6f4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800e6f6:	4601      	mov	r1, r0
 800e6f8:	4806      	ldr	r0, [pc, #24]	; (800e714 <move_thread_to_end_of_prio_q+0x84>)
 800e6fa:	f005 fb25 	bl	8013d48 <z_priq_dumb_remove>
}
 800e6fe:	e7ce      	b.n	800e69e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800e700:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800e702:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800e704:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800e706:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800e708:	6065      	str	r5, [r4, #4]
}
 800e70a:	e7e8      	b.n	800e6de <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e70c:	2400      	movs	r4, #0
 800e70e:	e7cf      	b.n	800e6b0 <move_thread_to_end_of_prio_q+0x20>
 800e710:	20001a2c 	.word	0x20001a2c
 800e714:	20001a48 	.word	0x20001a48

0800e718 <z_time_slice>:
{
 800e718:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e71a:	f04f 0310 	mov.w	r3, #16
 800e71e:	f3ef 8411 	mrs	r4, BASEPRI
 800e722:	f383 8812 	msr	BASEPRI_MAX, r3
 800e726:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800e72a:	4b21      	ldr	r3, [pc, #132]	; (800e7b0 <z_time_slice+0x98>)
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	4a21      	ldr	r2, [pc, #132]	; (800e7b4 <z_time_slice+0x9c>)
 800e730:	6812      	ldr	r2, [r2, #0]
 800e732:	4293      	cmp	r3, r2
 800e734:	d017      	beq.n	800e766 <z_time_slice+0x4e>
	pending_current = NULL;
 800e736:	4a1f      	ldr	r2, [pc, #124]	; (800e7b4 <z_time_slice+0x9c>)
 800e738:	2100      	movs	r1, #0
 800e73a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800e73c:	4a1e      	ldr	r2, [pc, #120]	; (800e7b8 <z_time_slice+0xa0>)
 800e73e:	6812      	ldr	r2, [r2, #0]
 800e740:	b372      	cbz	r2, 800e7a0 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800e742:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800e744:	2a7f      	cmp	r2, #127	; 0x7f
 800e746:	d815      	bhi.n	800e774 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800e748:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800e74a:	f012 0f1f 	tst.w	r2, #31
 800e74e:	d11b      	bne.n	800e788 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800e750:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800e754:	4a19      	ldr	r2, [pc, #100]	; (800e7bc <z_time_slice+0xa4>)
 800e756:	6812      	ldr	r2, [r2, #0]
 800e758:	4291      	cmp	r1, r2
 800e75a:	db17      	blt.n	800e78c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800e75c:	4a18      	ldr	r2, [pc, #96]	; (800e7c0 <z_time_slice+0xa8>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d016      	beq.n	800e790 <z_time_slice+0x78>
 800e762:	2201      	movs	r2, #1
 800e764:	e007      	b.n	800e776 <z_time_slice+0x5e>
		z_reset_time_slice();
 800e766:	f7ff fef3 	bl	800e550 <z_reset_time_slice>
	__asm__ volatile(
 800e76a:	f384 8811 	msr	BASEPRI, r4
 800e76e:	f3bf 8f6f 	isb	sy
		return;
 800e772:	e01c      	b.n	800e7ae <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800e774:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800e776:	b19a      	cbz	r2, 800e7a0 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800e778:	4a0d      	ldr	r2, [pc, #52]	; (800e7b0 <z_time_slice+0x98>)
 800e77a:	6912      	ldr	r2, [r2, #16]
 800e77c:	4282      	cmp	r2, r0
 800e77e:	dd09      	ble.n	800e794 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800e780:	1a10      	subs	r0, r2, r0
 800e782:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <z_time_slice+0x98>)
 800e784:	6118      	str	r0, [r3, #16]
 800e786:	e00e      	b.n	800e7a6 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800e788:	2200      	movs	r2, #0
 800e78a:	e7f4      	b.n	800e776 <z_time_slice+0x5e>
 800e78c:	2200      	movs	r2, #0
 800e78e:	e7f2      	b.n	800e776 <z_time_slice+0x5e>
 800e790:	2200      	movs	r2, #0
 800e792:	e7f0      	b.n	800e776 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff ff7b 	bl	800e690 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800e79a:	f7ff fed9 	bl	800e550 <z_reset_time_slice>
 800e79e:	e002      	b.n	800e7a6 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800e7a0:	4b03      	ldr	r3, [pc, #12]	; (800e7b0 <z_time_slice+0x98>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	611a      	str	r2, [r3, #16]
 800e7a6:	f384 8811 	msr	BASEPRI, r4
 800e7aa:	f3bf 8f6f 	isb	sy
}
 800e7ae:	bd10      	pop	{r4, pc}
 800e7b0:	20001a2c 	.word	0x20001a2c
 800e7b4:	20001a64 	.word	0x20001a64
 800e7b8:	20001a70 	.word	0x20001a70
 800e7bc:	20001a6c 	.word	0x20001a6c
 800e7c0:	20000fd0 	.word	0x20000fd0

0800e7c4 <ready_thread>:
{
 800e7c4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800e7c6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800e7c8:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800e7cc:	2a00      	cmp	r2, #0
 800e7ce:	db2d      	blt.n	800e82c <ready_thread+0x68>
 800e7d0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e7d2:	f013 0f1f 	tst.w	r3, #31
 800e7d6:	d105      	bne.n	800e7e4 <ready_thread+0x20>
	return node->next != NULL;
 800e7d8:	6982      	ldr	r2, [r0, #24]
 800e7da:	b10a      	cbz	r2, 800e7e0 <ready_thread+0x1c>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	e002      	b.n	800e7e6 <ready_thread+0x22>
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	e000      	b.n	800e7e6 <ready_thread+0x22>
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	b30a      	cbz	r2, 800e82c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800e7e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e7ec:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800e7ee:	4b14      	ldr	r3, [pc, #80]	; (800e840 <ready_thread+0x7c>)
 800e7f0:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e7f4:	429d      	cmp	r5, r3
 800e7f6:	d020      	beq.n	800e83a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e7f8:	b16d      	cbz	r5, 800e816 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f005 fa64 	bl	8013cca <z_sched_prio_cmp>
 800e802:	2800      	cmp	r0, #0
 800e804:	dc13      	bgt.n	800e82e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800e806:	b135      	cbz	r5, 800e816 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800e808:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <ready_thread+0x7c>)
 800e80a:	6a1b      	ldr	r3, [r3, #32]
 800e80c:	429d      	cmp	r5, r3
 800e80e:	d002      	beq.n	800e816 <ready_thread+0x52>
 800e810:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e812:	2d00      	cmp	r5, #0
 800e814:	d1f0      	bne.n	800e7f8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800e816:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <ready_thread+0x7c>)
 800e818:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800e81a:	f103 011c 	add.w	r1, r3, #28
 800e81e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800e820:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800e822:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800e824:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800e826:	2000      	movs	r0, #0
 800e828:	f7ff ff0c 	bl	800e644 <update_cache>
}
 800e82c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800e82e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800e830:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800e832:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800e834:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800e836:	606c      	str	r4, [r5, #4]
}
 800e838:	e7f5      	b.n	800e826 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e83a:	2500      	movs	r5, #0
 800e83c:	e7dc      	b.n	800e7f8 <ready_thread+0x34>
 800e83e:	bf00      	nop
 800e840:	20001a2c 	.word	0x20001a2c

0800e844 <z_sched_start>:
{
 800e844:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e846:	f04f 0310 	mov.w	r3, #16
 800e84a:	f3ef 8411 	mrs	r4, BASEPRI
 800e84e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e852:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800e856:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800e858:	f013 0f04 	tst.w	r3, #4
 800e85c:	d104      	bne.n	800e868 <z_sched_start+0x24>
	__asm__ volatile(
 800e85e:	f384 8811 	msr	BASEPRI, r4
 800e862:	f3bf 8f6f 	isb	sy
}
 800e866:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800e868:	f023 0304 	bic.w	r3, r3, #4
 800e86c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800e86e:	f7ff ffa9 	bl	800e7c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800e872:	4621      	mov	r1, r4
 800e874:	4801      	ldr	r0, [pc, #4]	; (800e87c <z_sched_start+0x38>)
 800e876:	f7ff feaf 	bl	800e5d8 <z_reschedule>
 800e87a:	e7f4      	b.n	800e866 <z_sched_start+0x22>
 800e87c:	20001a68 	.word	0x20001a68

0800e880 <unready_thread>:
{
 800e880:	b510      	push	{r4, lr}
 800e882:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800e884:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800e886:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	db08      	blt.n	800e8a0 <unready_thread+0x20>
	update_cache(thread == _current);
 800e88e:	4b08      	ldr	r3, [pc, #32]	; (800e8b0 <unready_thread+0x30>)
 800e890:	6898      	ldr	r0, [r3, #8]
 800e892:	42a0      	cmp	r0, r4
 800e894:	bf14      	ite	ne
 800e896:	2000      	movne	r0, #0
 800e898:	2001      	moveq	r0, #1
 800e89a:	f7ff fed3 	bl	800e644 <update_cache>
}
 800e89e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e8a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e8a4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	4802      	ldr	r0, [pc, #8]	; (800e8b4 <unready_thread+0x34>)
 800e8aa:	f005 fa4d 	bl	8013d48 <z_priq_dumb_remove>
}
 800e8ae:	e7ee      	b.n	800e88e <unready_thread+0xe>
 800e8b0:	20001a2c 	.word	0x20001a2c
 800e8b4:	20001a48 	.word	0x20001a48

0800e8b8 <z_pend_curr>:
{
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	4611      	mov	r1, r2
	pending_current = _current;
 800e8be:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <z_pend_curr+0x20>)
 800e8c0:	6898      	ldr	r0, [r3, #8]
 800e8c2:	4b06      	ldr	r3, [pc, #24]	; (800e8dc <z_pend_curr+0x24>)
 800e8c4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800e8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ca:	f005 faee 	bl	8013eaa <pend>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f7f5 f9c0 	bl	8003c54 <arch_swap>
}
 800e8d4:	bd10      	pop	{r4, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20001a2c 	.word	0x20001a2c
 800e8dc:	20001a64 	.word	0x20001a64

0800e8e0 <z_set_prio>:
{
 800e8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800e8e8:	2300      	movs	r3, #0
	__asm__ volatile(
 800e8ea:	f04f 0210 	mov.w	r2, #16
 800e8ee:	f3ef 8811 	mrs	r8, BASEPRI
 800e8f2:	f382 8812 	msr	BASEPRI_MAX, r2
 800e8f6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800e8fa:	461f      	mov	r7, r3
 800e8fc:	e008      	b.n	800e910 <z_set_prio+0x30>
		if (need_sched) {
 800e8fe:	f012 0701 	ands.w	r7, r2, #1
 800e902:	d111      	bne.n	800e928 <z_set_prio+0x48>
			thread->base.prio = prio;
 800e904:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800e906:	f388 8811 	msr	BASEPRI, r8
 800e90a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e90e:	2301      	movs	r3, #1
 800e910:	461a      	mov	r2, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d13d      	bne.n	800e992 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800e916:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e918:	f013 0f1f 	tst.w	r3, #31
 800e91c:	d1ef      	bne.n	800e8fe <z_set_prio+0x1e>
	return node->next != NULL;
 800e91e:	69a1      	ldr	r1, [r4, #24]
 800e920:	2900      	cmp	r1, #0
 800e922:	d1ec      	bne.n	800e8fe <z_set_prio+0x1e>
 800e924:	2201      	movs	r2, #1
 800e926:	e7ea      	b.n	800e8fe <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e92c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800e92e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800e998 <z_set_prio+0xb8>
 800e932:	4621      	mov	r1, r4
 800e934:	4648      	mov	r0, r9
 800e936:	f005 fa07 	bl	8013d48 <z_priq_dumb_remove>
				thread->base.prio = prio;
 800e93a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800e93c:	7b63      	ldrb	r3, [r4, #13]
 800e93e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e942:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800e944:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e948:	454d      	cmp	r5, r9
 800e94a:	d020      	beq.n	800e98e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e94c:	b16d      	cbz	r5, 800e96a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e94e:	4629      	mov	r1, r5
 800e950:	4620      	mov	r0, r4
 800e952:	f005 f9ba 	bl	8013cca <z_sched_prio_cmp>
 800e956:	2800      	cmp	r0, #0
 800e958:	dc13      	bgt.n	800e982 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800e95a:	b135      	cbz	r5, 800e96a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800e95c:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <z_set_prio+0xbc>)
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	429d      	cmp	r5, r3
 800e962:	d002      	beq.n	800e96a <z_set_prio+0x8a>
 800e964:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e966:	2d00      	cmp	r5, #0
 800e968:	d1f0      	bne.n	800e94c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800e96a:	4b0c      	ldr	r3, [pc, #48]	; (800e99c <z_set_prio+0xbc>)
 800e96c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800e96e:	f103 011c 	add.w	r1, r3, #28
 800e972:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800e974:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800e976:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800e978:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800e97a:	2001      	movs	r0, #1
 800e97c:	f7ff fe62 	bl	800e644 <update_cache>
 800e980:	e7c1      	b.n	800e906 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800e982:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800e984:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800e986:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800e988:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800e98a:	606c      	str	r4, [r5, #4]
}
 800e98c:	e7f5      	b.n	800e97a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e98e:	2500      	movs	r5, #0
 800e990:	e7dc      	b.n	800e94c <z_set_prio+0x6c>
}
 800e992:	4638      	mov	r0, r7
 800e994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e998:	20001a48 	.word	0x20001a48
 800e99c:	20001a2c 	.word	0x20001a2c

0800e9a0 <z_impl_k_thread_suspend>:
{
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800e9a4:	3018      	adds	r0, #24
 800e9a6:	f005 fb5a 	bl	801405e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800e9aa:	2300      	movs	r3, #0
	__asm__ volatile(
 800e9ac:	f04f 0210 	mov.w	r2, #16
 800e9b0:	f3ef 8511 	mrs	r5, BASEPRI
 800e9b4:	f382 8812 	msr	BASEPRI_MAX, r2
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	e010      	b.n	800e9e0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800e9be:	7b63      	ldrb	r3, [r4, #13]
 800e9c0:	f043 0310 	orr.w	r3, r3, #16
 800e9c4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800e9c6:	4b15      	ldr	r3, [pc, #84]	; (800ea1c <z_impl_k_thread_suspend+0x7c>)
 800e9c8:	6898      	ldr	r0, [r3, #8]
 800e9ca:	42a0      	cmp	r0, r4
 800e9cc:	bf14      	ite	ne
 800e9ce:	2000      	movne	r0, #0
 800e9d0:	2001      	moveq	r0, #1
 800e9d2:	f7ff fe37 	bl	800e644 <update_cache>
	__asm__ volatile(
 800e9d6:	f385 8811 	msr	BASEPRI, r5
 800e9da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e9de:	2301      	movs	r3, #1
 800e9e0:	b963      	cbnz	r3, 800e9fc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800e9e2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800e9e4:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	dae8      	bge.n	800e9be <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e9ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e9f0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800e9f2:	4621      	mov	r1, r4
 800e9f4:	480a      	ldr	r0, [pc, #40]	; (800ea20 <z_impl_k_thread_suspend+0x80>)
 800e9f6:	f005 f9a7 	bl	8013d48 <z_priq_dumb_remove>
}
 800e9fa:	e7e0      	b.n	800e9be <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800e9fc:	4b07      	ldr	r3, [pc, #28]	; (800ea1c <z_impl_k_thread_suspend+0x7c>)
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	42a3      	cmp	r3, r4
 800ea02:	d000      	beq.n	800ea06 <z_impl_k_thread_suspend+0x66>
}
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800ea06:	f04f 0310 	mov.w	r3, #16
 800ea0a:	f3ef 8011 	mrs	r0, BASEPRI
 800ea0e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea12:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800ea16:	f005 f982 	bl	8013d1e <z_reschedule_irqlock>
 800ea1a:	e7f3      	b.n	800ea04 <z_impl_k_thread_suspend+0x64>
 800ea1c:	20001a2c 	.word	0x20001a2c
 800ea20:	20001a48 	.word	0x20001a48

0800ea24 <k_sched_unlock>:

void k_sched_unlock(void)
{
 800ea24:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800ea26:	2300      	movs	r3, #0
 800ea28:	f04f 0210 	mov.w	r2, #16
 800ea2c:	f3ef 8411 	mrs	r4, BASEPRI
 800ea30:	f382 8812 	msr	BASEPRI_MAX, r2
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	e00c      	b.n	800ea54 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800ea3a:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <k_sched_unlock+0x4c>)
 800ea3c:	689a      	ldr	r2, [r3, #8]
 800ea3e:	7bd3      	ldrb	r3, [r2, #15]
 800ea40:	3301      	adds	r3, #1
 800ea42:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800ea44:	2000      	movs	r0, #0
 800ea46:	f7ff fdfd 	bl	800e644 <update_cache>
	__asm__ volatile(
 800ea4a:	f384 8811 	msr	BASEPRI, r4
 800ea4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ea52:	2301      	movs	r3, #1
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d0f0      	beq.n	800ea3a <k_sched_unlock+0x16>
	__asm__ volatile(
 800ea58:	f04f 0310 	mov.w	r3, #16
 800ea5c:	f3ef 8011 	mrs	r0, BASEPRI
 800ea60:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea64:	f3bf 8f6f 	isb	sy
 800ea68:	f005 f959 	bl	8013d1e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	bf00      	nop
 800ea70:	20001a2c 	.word	0x20001a2c

0800ea74 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800ea74:	7b43      	ldrb	r3, [r0, #13]
 800ea76:	f013 0f08 	tst.w	r3, #8
 800ea7a:	d142      	bne.n	800eb02 <end_thread+0x8e>
{
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800ea80:	f043 0308 	orr.w	r3, r3, #8
 800ea84:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800ea86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea8a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800ea8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea90:	d12b      	bne.n	800eaea <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800ea92:	68ab      	ldr	r3, [r5, #8]
 800ea94:	b15b      	cbz	r3, 800eaae <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ea96:	4628      	mov	r0, r5
 800ea98:	f005 f915 	bl	8013cc6 <pended_on_thread>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	f005 f953 	bl	8013d48 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800eaa2:	7b6b      	ldrb	r3, [r5, #13]
 800eaa4:	f023 0302 	bic.w	r3, r3, #2
 800eaa8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60ab      	str	r3, [r5, #8]
 800eaae:	f105 0018 	add.w	r0, r5, #24
 800eab2:	f005 fad4 	bl	801405e <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800eab6:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800eab8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800eaba:	42ac      	cmp	r4, r5
 800eabc:	d01d      	beq.n	800eafa <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800eabe:	b1e4      	cbz	r4, 800eafa <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800eac0:	4620      	mov	r0, r4
 800eac2:	f005 f900 	bl	8013cc6 <pended_on_thread>
 800eac6:	4621      	mov	r1, r4
 800eac8:	f005 f93e 	bl	8013d48 <z_priq_dumb_remove>
 800eacc:	7b63      	ldrb	r3, [r4, #13]
 800eace:	f023 0302 	bic.w	r3, r3, #2
 800ead2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ead4:	2600      	movs	r6, #0
 800ead6:	60a6      	str	r6, [r4, #8]
 800ead8:	f104 0018 	add.w	r0, r4, #24
 800eadc:	f005 fabf 	bl	801405e <z_abort_timeout>
 800eae0:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800eae2:	4620      	mov	r0, r4
 800eae4:	f7ff fe6e 	bl	800e7c4 <ready_thread>
 800eae8:	e7e6      	b.n	800eab8 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800eaea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800eaf0:	4601      	mov	r1, r0
 800eaf2:	4804      	ldr	r0, [pc, #16]	; (800eb04 <end_thread+0x90>)
 800eaf4:	f005 f928 	bl	8013d48 <z_priq_dumb_remove>
}
 800eaf8:	e7cb      	b.n	800ea92 <end_thread+0x1e>
		update_cache(1);
 800eafa:	2001      	movs	r0, #1
 800eafc:	f7ff fda2 	bl	800e644 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800eb00:	bd70      	pop	{r4, r5, r6, pc}
 800eb02:	4770      	bx	lr
 800eb04:	20001a48 	.word	0x20001a48

0800eb08 <z_sched_init>:
{
 800eb08:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800eb0a:	4804      	ldr	r0, [pc, #16]	; (800eb1c <z_sched_init+0x14>)
 800eb0c:	f005 fa41 	bl	8013f92 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800eb10:	2100      	movs	r1, #0
 800eb12:	4608      	mov	r0, r1
 800eb14:	f7ff fd32 	bl	800e57c <k_sched_time_slice_set>
}
 800eb18:	bd08      	pop	{r3, pc}
 800eb1a:	bf00      	nop
 800eb1c:	20001a44 	.word	0x20001a44

0800eb20 <z_impl_k_yield>:
{
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	f04f 0310 	mov.w	r3, #16
 800eb26:	f3ef 8611 	mrs	r6, BASEPRI
 800eb2a:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb2e:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800eb32:	4c1c      	ldr	r4, [pc, #112]	; (800eba4 <z_impl_k_yield+0x84>)
 800eb34:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800eb36:	7b4b      	ldrb	r3, [r1, #13]
 800eb38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb3c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800eb3e:	f104 071c 	add.w	r7, r4, #28
 800eb42:	4638      	mov	r0, r7
 800eb44:	f005 f900 	bl	8013d48 <z_priq_dumb_remove>
	queue_thread(_current);
 800eb48:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800eb4a:	7b6b      	ldrb	r3, [r5, #13]
 800eb4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb50:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800eb52:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800eb54:	42bc      	cmp	r4, r7
 800eb56:	d023      	beq.n	800eba0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800eb58:	b16c      	cbz	r4, 800eb76 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f005 f8b4 	bl	8013cca <z_sched_prio_cmp>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	dc16      	bgt.n	800eb94 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800eb66:	b134      	cbz	r4, 800eb76 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800eb68:	4b0e      	ldr	r3, [pc, #56]	; (800eba4 <z_impl_k_yield+0x84>)
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	429c      	cmp	r4, r3
 800eb6e:	d002      	beq.n	800eb76 <z_impl_k_yield+0x56>
 800eb70:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800eb72:	2c00      	cmp	r4, #0
 800eb74:	d1f0      	bne.n	800eb58 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800eb76:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <z_impl_k_yield+0x84>)
 800eb78:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800eb7a:	f103 011c 	add.w	r1, r3, #28
 800eb7e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800eb80:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800eb82:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800eb84:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800eb86:	2001      	movs	r0, #1
 800eb88:	f7ff fd5c 	bl	800e644 <update_cache>
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	f7f5 f861 	bl	8003c54 <arch_swap>
}
 800eb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800eb94:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800eb96:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800eb98:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800eb9a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800eb9c:	6065      	str	r5, [r4, #4]
}
 800eb9e:	e7f2      	b.n	800eb86 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800eba0:	2400      	movs	r4, #0
 800eba2:	e7d9      	b.n	800eb58 <z_impl_k_yield+0x38>
 800eba4:	20001a2c 	.word	0x20001a2c

0800eba8 <z_tick_sleep>:
{
 800eba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800ebac:	ea50 0301 	orrs.w	r3, r0, r1
 800ebb0:	d038      	beq.n	800ec24 <z_tick_sleep+0x7c>
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800ebb6:	f06f 0301 	mvn.w	r3, #1
 800ebba:	1a1b      	subs	r3, r3, r0
 800ebbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebc0:	eb62 0201 	sbc.w	r2, r2, r1
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	f172 0300 	sbcs.w	r3, r2, #0
 800ebca:	db2f      	blt.n	800ec2c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800ebcc:	f06f 0501 	mvn.w	r5, #1
 800ebd0:	1a2d      	subs	r5, r5, r0
 800ebd2:	f04f 0310 	mov.w	r3, #16
 800ebd6:	f3ef 8811 	mrs	r8, BASEPRI
 800ebda:	f383 8812 	msr	BASEPRI_MAX, r3
 800ebde:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800ebe2:	4f14      	ldr	r7, [pc, #80]	; (800ec34 <z_tick_sleep+0x8c>)
 800ebe4:	68b8      	ldr	r0, [r7, #8]
 800ebe6:	4b14      	ldr	r3, [pc, #80]	; (800ec38 <z_tick_sleep+0x90>)
 800ebe8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800ebea:	f7ff fe49 	bl	800e880 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800ebee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4633      	mov	r3, r6
 800ebf4:	4911      	ldr	r1, [pc, #68]	; (800ec3c <z_tick_sleep+0x94>)
 800ebf6:	3018      	adds	r0, #24
 800ebf8:	f000 f8ee 	bl	800edd8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800ebfc:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800ebfe:	7b53      	ldrb	r3, [r2, #13]
 800ec00:	f043 0310 	orr.w	r3, r3, #16
 800ec04:	7353      	strb	r3, [r2, #13]
 800ec06:	4640      	mov	r0, r8
 800ec08:	f7f5 f824 	bl	8003c54 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800ec0c:	f005 fa70 	bl	80140f0 <sys_clock_tick_get_32>
 800ec10:	1a28      	subs	r0, r5, r0
 800ec12:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800ec16:	2801      	cmp	r0, #1
 800ec18:	f173 0300 	sbcs.w	r3, r3, #0
 800ec1c:	da00      	bge.n	800ec20 <z_tick_sleep+0x78>
	return 0;
 800ec1e:	2000      	movs	r0, #0
}
 800ec20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800ec24:	f7ff ff7c 	bl	800eb20 <z_impl_k_yield>
		return 0;
 800ec28:	2000      	movs	r0, #0
 800ec2a:	e7f9      	b.n	800ec20 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800ec2c:	f005 fa60 	bl	80140f0 <sys_clock_tick_get_32>
 800ec30:	1905      	adds	r5, r0, r4
 800ec32:	e7ce      	b.n	800ebd2 <z_tick_sleep+0x2a>
 800ec34:	20001a2c 	.word	0x20001a2c
 800ec38:	20001a64 	.word	0x20001a64
 800ec3c:	08013de7 	.word	0x08013de7

0800ec40 <z_impl_k_sleep>:
{
 800ec40:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800ec42:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800ec46:	bf08      	it	eq
 800ec48:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800ec4c:	d007      	beq.n	800ec5e <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800ec4e:	f7ff ffab 	bl	800eba8 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800ec52:	220a      	movs	r2, #10
 800ec54:	2300      	movs	r3, #0
 800ec56:	17c1      	asrs	r1, r0, #31
 800ec58:	f7f1 ff70 	bl	8000b3c <__aeabi_uldivmod>
}
 800ec5c:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800ec5e:	4b03      	ldr	r3, [pc, #12]	; (800ec6c <z_impl_k_sleep+0x2c>)
 800ec60:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800ec62:	f7ff fe9d 	bl	800e9a0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec6a:	e7f7      	b.n	800ec5c <z_impl_k_sleep+0x1c>
 800ec6c:	20001a2c 	.word	0x20001a2c

0800ec70 <z_impl_z_current_get>:
}
 800ec70:	4b01      	ldr	r3, [pc, #4]	; (800ec78 <z_impl_z_current_get+0x8>)
 800ec72:	6898      	ldr	r0, [r3, #8]
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	20001a2c 	.word	0x20001a2c

0800ec7c <z_impl_k_is_preempt_thread>:
 800ec7c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800ec80:	b933      	cbnz	r3, 800ec90 <z_impl_k_is_preempt_thread+0x14>
 800ec82:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <z_impl_k_is_preempt_thread+0x1c>)
 800ec84:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800ec86:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800ec88:	2b7f      	cmp	r3, #127	; 0x7f
 800ec8a:	d803      	bhi.n	800ec94 <z_impl_k_is_preempt_thread+0x18>
 800ec8c:	2001      	movs	r0, #1
 800ec8e:	4770      	bx	lr
 800ec90:	2000      	movs	r0, #0
 800ec92:	4770      	bx	lr
 800ec94:	2000      	movs	r0, #0
}
 800ec96:	4770      	bx	lr
 800ec98:	20001a2c 	.word	0x20001a2c

0800ec9c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	f04f 0310 	mov.w	r3, #16
 800eca2:	f3ef 8511 	mrs	r5, BASEPRI
 800eca6:	f383 8812 	msr	BASEPRI_MAX, r3
 800ecaa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800ecae:	7b43      	ldrb	r3, [r0, #13]
 800ecb0:	f013 0f08 	tst.w	r3, #8
 800ecb4:	d004      	beq.n	800ecc0 <z_thread_abort+0x24>
	__asm__ volatile(
 800ecb6:	f385 8811 	msr	BASEPRI, r5
 800ecba:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	4604      	mov	r4, r0
	end_thread(thread);
 800ecc2:	f7ff fed7 	bl	800ea74 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800ecc6:	4b08      	ldr	r3, [pc, #32]	; (800ece8 <z_thread_abort+0x4c>)
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	42a3      	cmp	r3, r4
 800eccc:	d004      	beq.n	800ecd8 <z_thread_abort+0x3c>
 800ecce:	f385 8811 	msr	BASEPRI, r5
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	e7f2      	b.n	800ecbe <z_thread_abort+0x22>
 800ecd8:	f3ef 8305 	mrs	r3, IPSR
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1f6      	bne.n	800ecce <z_thread_abort+0x32>
 800ece0:	4628      	mov	r0, r5
 800ece2:	f7f4 ffb7 	bl	8003c54 <arch_swap>
	return ret;
 800ece6:	e7f2      	b.n	800ecce <z_thread_abort+0x32>
 800ece8:	20001a2c 	.word	0x20001a2c

0800ecec <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800ecec:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800ecf0:	b083      	sub	sp, #12
 800ecf2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800ecf4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800ecf8:	e9cd bc00 	strd	fp, ip, [sp]
 800ecfc:	f7ff fddc 	bl	800e8b8 <z_pend_curr>

	if (data != NULL) {
 800ed00:	b11c      	cbz	r4, 800ed0a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800ed02:	4b03      	ldr	r3, [pc, #12]	; (800ed10 <z_sched_wait+0x24>)
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800ed0a:	b003      	add	sp, #12
 800ed0c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800ed10:	20001a2c 	.word	0x20001a2c

0800ed14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800ed14:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800ed16:	4806      	ldr	r0, [pc, #24]	; (800ed30 <z_data_copy+0x1c>)
 800ed18:	4a06      	ldr	r2, [pc, #24]	; (800ed34 <z_data_copy+0x20>)
 800ed1a:	1a12      	subs	r2, r2, r0
 800ed1c:	4906      	ldr	r1, [pc, #24]	; (800ed38 <z_data_copy+0x24>)
 800ed1e:	f005 fba1 	bl	8014464 <memcpy>
 800ed22:	4a06      	ldr	r2, [pc, #24]	; (800ed3c <z_data_copy+0x28>)
 800ed24:	4906      	ldr	r1, [pc, #24]	; (800ed40 <z_data_copy+0x2c>)
 800ed26:	4807      	ldr	r0, [pc, #28]	; (800ed44 <z_data_copy+0x30>)
 800ed28:	f005 fb9c 	bl	8014464 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800ed2c:	bd08      	pop	{r3, pc}
 800ed2e:	bf00      	nop
 800ed30:	20000000 	.word	0x20000000
 800ed34:	20000930 	.word	0x20000930
 800ed38:	080174f8 	.word	0x080174f8
 800ed3c:	00000000 	.word	0x00000000
 800ed40:	080174f8 	.word	0x080174f8
 800ed44:	20000000 	.word	0x20000000

0800ed48 <first>:
	return list->head == list;
 800ed48:	4b03      	ldr	r3, [pc, #12]	; (800ed58 <first+0x10>)
 800ed4a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ed4c:	4298      	cmp	r0, r3
 800ed4e:	d000      	beq.n	800ed52 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800ed50:	4770      	bx	lr
 800ed52:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800ed54:	e7fc      	b.n	800ed50 <first+0x8>
 800ed56:	bf00      	nop
 800ed58:	2000049c 	.word	0x2000049c

0800ed5c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ed5c:	b130      	cbz	r0, 800ed6c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800ed5e:	4a04      	ldr	r2, [pc, #16]	; (800ed70 <next+0x14>)
 800ed60:	6852      	ldr	r2, [r2, #4]
 800ed62:	4290      	cmp	r0, r2
 800ed64:	d001      	beq.n	800ed6a <next+0xe>
 800ed66:	6800      	ldr	r0, [r0, #0]
 800ed68:	4770      	bx	lr
 800ed6a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	2000049c 	.word	0x2000049c

0800ed74 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800ed74:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800ed76:	4b04      	ldr	r3, [pc, #16]	; (800ed88 <elapsed+0x14>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	b10b      	cbz	r3, 800ed80 <elapsed+0xc>
 800ed7c:	2000      	movs	r0, #0
}
 800ed7e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800ed80:	f7fb f890 	bl	8009ea4 <sys_clock_elapsed>
 800ed84:	e7fb      	b.n	800ed7e <elapsed+0xa>
 800ed86:	bf00      	nop
 800ed88:	20001a74 	.word	0x20001a74

0800ed8c <next_timeout>:

static int32_t next_timeout(void)
{
 800ed8c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800ed8e:	f7ff ffdb 	bl	800ed48 <first>
 800ed92:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800ed94:	f7ff ffee 	bl	800ed74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800ed98:	b17c      	cbz	r4, 800edba <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	6962      	ldr	r2, [r4, #20]
 800ed9e:	1a1b      	subs	r3, r3, r0
 800eda0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800eda4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eda8:	f170 0200 	sbcs.w	r2, r0, #0
 800edac:	da08      	bge.n	800edc0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800edae:	2800      	cmp	r0, #0
 800edb0:	db01      	blt.n	800edb6 <next_timeout+0x2a>
 800edb2:	4618      	mov	r0, r3
 800edb4:	e006      	b.n	800edc4 <next_timeout+0x38>
 800edb6:	2300      	movs	r3, #0
 800edb8:	e7fb      	b.n	800edb2 <next_timeout+0x26>
		ret = MAX_WAIT;
 800edba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800edbe:	e001      	b.n	800edc4 <next_timeout+0x38>
 800edc0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800edc4:	4b03      	ldr	r3, [pc, #12]	; (800edd4 <next_timeout+0x48>)
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	b113      	cbz	r3, 800edd0 <next_timeout+0x44>
 800edca:	4283      	cmp	r3, r0
 800edcc:	da00      	bge.n	800edd0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800edce:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800edd0:	bd10      	pop	{r4, pc}
 800edd2:	bf00      	nop
 800edd4:	20001a2c 	.word	0x20001a2c

0800edd8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800edd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eddc:	bf08      	it	eq
 800edde:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800ede2:	d07d      	beq.n	800eee0 <z_add_timeout+0x108>
{
 800ede4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede8:	4604      	mov	r4, r0
 800edea:	4692      	mov	sl, r2
 800edec:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800edee:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800edf0:	2300      	movs	r3, #0
	__asm__ volatile(
 800edf2:	f04f 0210 	mov.w	r2, #16
 800edf6:	f3ef 8711 	mrs	r7, BASEPRI
 800edfa:	f382 8812 	msr	BASEPRI_MAX, r2
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	e021      	b.n	800ee48 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800ee04:	f11a 0801 	adds.w	r8, sl, #1
 800ee08:	f145 0900 	adc.w	r9, r5, #0
 800ee0c:	f7ff ffb2 	bl	800ed74 <elapsed>
 800ee10:	eb18 0300 	adds.w	r3, r8, r0
 800ee14:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800ee18:	6123      	str	r3, [r4, #16]
 800ee1a:	6160      	str	r0, [r4, #20]
 800ee1c:	e036      	b.n	800ee8c <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800ee1e:	1a51      	subs	r1, r2, r1
 800ee20:	eb66 0303 	sbc.w	r3, r6, r3
 800ee24:	6101      	str	r1, [r0, #16]
 800ee26:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800ee28:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800ee2a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800ee2c:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800ee2e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800ee30:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d03e      	beq.n	800eeb4 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800ee36:	f7ff ff87 	bl	800ed48 <first>
 800ee3a:	4284      	cmp	r4, r0
 800ee3c:	d041      	beq.n	800eec2 <z_add_timeout+0xea>
	__asm__ volatile(
 800ee3e:	f387 8811 	msr	BASEPRI, r7
 800ee42:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800ee46:	2301      	movs	r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d147      	bne.n	800eedc <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800ee4c:	4653      	mov	r3, sl
 800ee4e:	f06f 0101 	mvn.w	r1, #1
 800ee52:	ebb1 010a 	subs.w	r1, r1, sl
 800ee56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee5a:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	dbd0      	blt.n	800ee04 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800ee62:	4a20      	ldr	r2, [pc, #128]	; (800eee4 <z_add_timeout+0x10c>)
 800ee64:	6811      	ldr	r1, [r2, #0]
 800ee66:	6852      	ldr	r2, [r2, #4]
 800ee68:	185b      	adds	r3, r3, r1
 800ee6a:	eb42 0205 	adc.w	r2, r2, r5
 800ee6e:	f06f 0101 	mvn.w	r1, #1
 800ee72:	1acb      	subs	r3, r1, r3
 800ee74:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800ee78:	4618      	mov	r0, r3
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	f172 0300 	sbcs.w	r3, r2, #0
 800ee82:	da01      	bge.n	800ee88 <z_add_timeout+0xb0>
 800ee84:	2001      	movs	r0, #1
 800ee86:	2100      	movs	r1, #0
 800ee88:	6120      	str	r0, [r4, #16]
 800ee8a:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800ee8c:	f7ff ff5c 	bl	800ed48 <first>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d0ce      	beq.n	800ee32 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800ee94:	6902      	ldr	r2, [r0, #16]
 800ee96:	6946      	ldr	r6, [r0, #20]
 800ee98:	6921      	ldr	r1, [r4, #16]
 800ee9a:	6963      	ldr	r3, [r4, #20]
 800ee9c:	4291      	cmp	r1, r2
 800ee9e:	eb73 0c06 	sbcs.w	ip, r3, r6
 800eea2:	dbbc      	blt.n	800ee1e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800eea4:	1a89      	subs	r1, r1, r2
 800eea6:	eb63 0306 	sbc.w	r3, r3, r6
 800eeaa:	6121      	str	r1, [r4, #16]
 800eeac:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800eeae:	f7ff ff55 	bl	800ed5c <next>
 800eeb2:	e7ed      	b.n	800ee90 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <z_add_timeout+0x110>)
 800eeb6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800eeb8:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800eeba:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800eebc:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800eebe:	605c      	str	r4, [r3, #4]
}
 800eec0:	e7b9      	b.n	800ee36 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800eec2:	f7ff ff63 	bl	800ed8c <next_timeout>

			if (next_time == 0 ||
 800eec6:	4603      	mov	r3, r0
 800eec8:	b118      	cbz	r0, 800eed2 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800eeca:	4a08      	ldr	r2, [pc, #32]	; (800eeec <z_add_timeout+0x114>)
 800eecc:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800eece:	4282      	cmp	r2, r0
 800eed0:	d0b5      	beq.n	800ee3e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800eed2:	2100      	movs	r1, #0
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fa ff63 	bl	8009da0 <sys_clock_set_timeout>
 800eeda:	e7b0      	b.n	800ee3e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800eedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	200010d0 	.word	0x200010d0
 800eee8:	2000049c 	.word	0x2000049c
 800eeec:	20001a2c 	.word	0x20001a2c

0800eef0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800eef4:	f7ff fc10 	bl	800e718 <z_time_slice>
	__asm__ volatile(
 800eef8:	f04f 0310 	mov.w	r3, #16
 800eefc:	f3ef 8511 	mrs	r5, BASEPRI
 800ef00:	f383 8812 	msr	BASEPRI_MAX, r3
 800ef04:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800ef08:	4b28      	ldr	r3, [pc, #160]	; (800efac <sys_clock_announce+0xbc>)
 800ef0a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800ef0c:	e020      	b.n	800ef50 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800ef0e:	4828      	ldr	r0, [pc, #160]	; (800efb0 <sys_clock_announce+0xc0>)
 800ef10:	6801      	ldr	r1, [r0, #0]
 800ef12:	6846      	ldr	r6, [r0, #4]
 800ef14:	1889      	adds	r1, r1, r2
 800ef16:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800ef1a:	6001      	str	r1, [r0, #0]
 800ef1c:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800ef1e:	1a9b      	subs	r3, r3, r2
 800ef20:	4a22      	ldr	r2, [pc, #136]	; (800efac <sys_clock_announce+0xbc>)
 800ef22:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800ef24:	2200      	movs	r2, #0
 800ef26:	2300      	movs	r3, #0
 800ef28:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f005 f87f 	bl	8014030 <remove_timeout>
	__asm__ volatile(
 800ef32:	f385 8811 	msr	BASEPRI, r5
 800ef36:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800ef3a:	68a3      	ldr	r3, [r4, #8]
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	4798      	blx	r3
	__asm__ volatile(
 800ef40:	f04f 0310 	mov.w	r3, #16
 800ef44:	f3ef 8511 	mrs	r5, BASEPRI
 800ef48:	f383 8812 	msr	BASEPRI_MAX, r3
 800ef4c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800ef50:	f7ff fefa 	bl	800ed48 <first>
 800ef54:	4604      	mov	r4, r0
 800ef56:	b140      	cbz	r0, 800ef6a <sys_clock_announce+0x7a>
 800ef58:	6902      	ldr	r2, [r0, #16]
 800ef5a:	6941      	ldr	r1, [r0, #20]
 800ef5c:	4b13      	ldr	r3, [pc, #76]	; (800efac <sys_clock_announce+0xbc>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	17d8      	asrs	r0, r3, #31
 800ef62:	4293      	cmp	r3, r2
 800ef64:	eb70 0101 	sbcs.w	r1, r0, r1
 800ef68:	dad1      	bge.n	800ef0e <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800ef6a:	b144      	cbz	r4, 800ef7e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800ef6c:	4b0f      	ldr	r3, [pc, #60]	; (800efac <sys_clock_announce+0xbc>)
 800ef6e:	6819      	ldr	r1, [r3, #0]
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	6962      	ldr	r2, [r4, #20]
 800ef74:	1a5b      	subs	r3, r3, r1
 800ef76:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800ef7a:	6123      	str	r3, [r4, #16]
 800ef7c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800ef7e:	4a0c      	ldr	r2, [pc, #48]	; (800efb0 <sys_clock_announce+0xc0>)
 800ef80:	4e0a      	ldr	r6, [pc, #40]	; (800efac <sys_clock_announce+0xbc>)
 800ef82:	6830      	ldr	r0, [r6, #0]
 800ef84:	6813      	ldr	r3, [r2, #0]
 800ef86:	6851      	ldr	r1, [r2, #4]
 800ef88:	181b      	adds	r3, r3, r0
 800ef8a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800ef8e:	6013      	str	r3, [r2, #0]
 800ef90:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800ef92:	2400      	movs	r4, #0
 800ef94:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800ef96:	f7ff fef9 	bl	800ed8c <next_timeout>
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	f7fa ff00 	bl	8009da0 <sys_clock_set_timeout>
	__asm__ volatile(
 800efa0:	f385 8811 	msr	BASEPRI, r5
 800efa4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800efa8:	bd70      	pop	{r4, r5, r6, pc}
 800efaa:	bf00      	nop
 800efac:	20001a74 	.word	0x20001a74
 800efb0:	200010d0 	.word	0x200010d0

0800efb4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800efb4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800efb6:	2300      	movs	r3, #0
	__asm__ volatile(
 800efb8:	f04f 0210 	mov.w	r2, #16
 800efbc:	f3ef 8411 	mrs	r4, BASEPRI
 800efc0:	f382 8812 	msr	BASEPRI_MAX, r2
 800efc4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800efc8:	4618      	mov	r0, r3
 800efca:	4619      	mov	r1, r3
 800efcc:	e00c      	b.n	800efe8 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800efce:	f7fa ff69 	bl	8009ea4 <sys_clock_elapsed>
 800efd2:	4a07      	ldr	r2, [pc, #28]	; (800eff0 <sys_clock_tick_get+0x3c>)
 800efd4:	6813      	ldr	r3, [r2, #0]
 800efd6:	6851      	ldr	r1, [r2, #4]
 800efd8:	18c0      	adds	r0, r0, r3
 800efda:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800efde:	f384 8811 	msr	BASEPRI, r4
 800efe2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800efe6:	2301      	movs	r3, #1
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d0f0      	beq.n	800efce <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800efec:	bd10      	pop	{r4, pc}
 800efee:	bf00      	nop
 800eff0:	200010d0 	.word	0x200010d0

0800eff4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800eff4:	b900      	cbnz	r0, 800eff8 <z_impl_k_busy_wait+0x4>
 800eff6:	4770      	bx	lr
{
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4604      	mov	r4, r0
 800effc:	f7fa ff72 	bl	8009ee4 <sys_clock_cycle_get_32>
 800f000:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800f002:	4907      	ldr	r1, [pc, #28]	; (800f020 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800f004:	4a07      	ldr	r2, [pc, #28]	; (800f024 <z_impl_k_busy_wait+0x30>)
 800f006:	2300      	movs	r3, #0
 800f008:	fba4 0101 	umull	r0, r1, r4, r1
 800f00c:	f7f1 fd96 	bl	8000b3c <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800f010:	4604      	mov	r4, r0
 800f012:	f7fa ff67 	bl	8009ee4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800f016:	1b40      	subs	r0, r0, r5
 800f018:	42a0      	cmp	r0, r4
 800f01a:	d3fa      	bcc.n	800f012 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop
 800f020:	04c4b400 	.word	0x04c4b400
 800f024:	000f4240 	.word	0x000f4240

0800f028 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	4604      	mov	r4, r0
	__asm__ volatile(
 800f02c:	f04f 0310 	mov.w	r3, #16
 800f030:	f3ef 8611 	mrs	r6, BASEPRI
 800f034:	f383 8812 	msr	BASEPRI_MAX, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800f03e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f040:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f042:	ea52 0103 	orrs.w	r1, r2, r3
 800f046:	d005      	beq.n	800f054 <z_timer_expiration_handler+0x2c>
 800f048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f04c:	bf08      	it	eq
 800f04e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800f052:	d126      	bne.n	800f0a2 <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800f054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f056:	3301      	adds	r3, #1
 800f058:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800f05a:	6a23      	ldr	r3, [r4, #32]
 800f05c:	b173      	cbz	r3, 800f07c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800f05e:	f386 8811 	msr	BASEPRI, r6
 800f062:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800f066:	6a23      	ldr	r3, [r4, #32]
 800f068:	4620      	mov	r0, r4
 800f06a:	4798      	blx	r3
	__asm__ volatile(
 800f06c:	f04f 0310 	mov.w	r3, #16
 800f070:	f3ef 8511 	mrs	r5, BASEPRI
 800f074:	f383 8812 	msr	BASEPRI_MAX, r3
 800f078:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800f07c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800f080:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f082:	42a3      	cmp	r3, r4
 800f084:	d013      	beq.n	800f0ae <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800f086:	b194      	cbz	r4, 800f0ae <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800f088:	4620      	mov	r0, r4
 800f08a:	f004 fe28 	bl	8013cde <z_unpend_thread_no_timeout>
 800f08e:	2300      	movs	r3, #0
 800f090:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800f092:	f385 8811 	msr	BASEPRI, r5
 800f096:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800f09a:	4620      	mov	r0, r4
 800f09c:	f004 fe87 	bl	8013dae <z_ready_thread>
}
 800f0a0:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800f0a2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800f0a6:	4904      	ldr	r1, [pc, #16]	; (800f0b8 <z_timer_expiration_handler+0x90>)
 800f0a8:	f7ff fe96 	bl	800edd8 <z_add_timeout>
 800f0ac:	e7d2      	b.n	800f054 <z_timer_expiration_handler+0x2c>
 800f0ae:	f385 8811 	msr	BASEPRI, r5
 800f0b2:	f3bf 8f6f 	isb	sy
		return;
 800f0b6:	e7f3      	b.n	800f0a0 <z_timer_expiration_handler+0x78>
 800f0b8:	0800f029 	.word	0x0800f029

0800f0bc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800f0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c0:	9f06      	ldr	r7, [sp, #24]
 800f0c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800f0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ca:	bf08      	it	eq
 800f0cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800f0d0:	d02f      	beq.n	800f132 <z_impl_k_timer_start+0x76>
 800f0d2:	4605      	mov	r5, r0
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	461e      	mov	r6, r3
 800f0d8:	4611      	mov	r1, r2
 800f0da:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800f0dc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800f0e0:	bf08      	it	eq
 800f0e2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800f0e6:	d00d      	beq.n	800f104 <z_impl_k_timer_start+0x48>
 800f0e8:	ea57 0c08 	orrs.w	ip, r7, r8
 800f0ec:	d00a      	beq.n	800f104 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800f0ee:	f06f 0c01 	mvn.w	ip, #1
 800f0f2:	ebbc 0c07 	subs.w	ip, ip, r7
 800f0f6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f0fa:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800f0fe:	f1bc 0f00 	cmp.w	ip, #0
 800f102:	db18      	blt.n	800f136 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800f104:	f06f 0301 	mvn.w	r3, #1
 800f108:	1a5b      	subs	r3, r3, r1
 800f10a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f10e:	eb63 0300 	sbc.w	r3, r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	db1a      	blt.n	800f14c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800f116:	4628      	mov	r0, r5
 800f118:	f004 ffa1 	bl	801405e <z_abort_timeout>
	timer->period = period;
 800f11c:	62af      	str	r7, [r5, #40]	; 0x28
 800f11e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800f122:	2300      	movs	r3, #0
 800f124:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800f126:	4622      	mov	r2, r4
 800f128:	4633      	mov	r3, r6
 800f12a:	490e      	ldr	r1, [pc, #56]	; (800f164 <z_impl_k_timer_start+0xa8>)
 800f12c:	4628      	mov	r0, r5
 800f12e:	f7ff fe53 	bl	800edd8 <z_add_timeout>
		     duration);
}
 800f132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800f136:	2f02      	cmp	r7, #2
 800f138:	f178 0300 	sbcs.w	r3, r8, #0
 800f13c:	da02      	bge.n	800f144 <z_impl_k_timer_start+0x88>
 800f13e:	2702      	movs	r7, #2
 800f140:	f04f 0800 	mov.w	r8, #0
 800f144:	3f01      	subs	r7, #1
 800f146:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800f14a:	e7db      	b.n	800f104 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800f14c:	460c      	mov	r4, r1
 800f14e:	4606      	mov	r6, r0
 800f150:	2901      	cmp	r1, #1
 800f152:	f170 0300 	sbcs.w	r3, r0, #0
 800f156:	da01      	bge.n	800f15c <z_impl_k_timer_start+0xa0>
 800f158:	2401      	movs	r4, #1
 800f15a:	2600      	movs	r6, #0
 800f15c:	3c01      	subs	r4, #1
 800f15e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800f162:	e7d8      	b.n	800f116 <z_impl_k_timer_start+0x5a>
 800f164:	0800f029 	.word	0x0800f029

0800f168 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	b087      	sub	sp, #28
 800f16e:	4682      	mov	sl, r0
 800f170:	460f      	mov	r7, r1
 800f172:	4693      	mov	fp, r2
 800f174:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800f176:	2500      	movs	r5, #0
	int events_registered = 0;
 800f178:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800f17a:	e02f      	b.n	800f1dc <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800f17c:	6923      	ldr	r3, [r4, #16]
	return sem->count;
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	b1cb      	cbz	r3, 800f1b6 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800f182:	f04f 0902 	mov.w	r9, #2
			return true;
 800f186:	2301      	movs	r3, #1
 800f188:	e015      	b.n	800f1b6 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800f18a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	b193      	cbz	r3, 800f1b6 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800f190:	f04f 0904 	mov.w	r9, #4
			return true;
 800f194:	2301      	movs	r3, #1
 800f196:	e00e      	b.n	800f1b6 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	b15b      	cbz	r3, 800f1b6 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800f19e:	f04f 0901 	mov.w	r9, #1
			return true;
 800f1a2:	464b      	mov	r3, r9
 800f1a4:	e007      	b.n	800f1b6 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1aa:	b123      	cbz	r3, 800f1b6 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800f1ac:	f04f 0910 	mov.w	r9, #16
			return true;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	e000      	b.n	800f1b6 <register_events+0x4e>
	switch (event->type) {
 800f1b4:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d03a      	beq.n	800f230 <register_events+0xc8>
	event->poller = NULL;
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800f1be:	68e3      	ldr	r3, [r4, #12]
 800f1c0:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800f1c4:	ea49 0202 	orr.w	r2, r9, r2
 800f1c8:	f362 3352 	bfi	r3, r2, #13, #6
 800f1cc:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800f1ce:	f88b 1000 	strb.w	r1, [fp]
 800f1d2:	f386 8811 	msr	BASEPRI, r6
 800f1d6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800f1da:	3501      	adds	r5, #1
 800f1dc:	42bd      	cmp	r5, r7
 800f1de:	f280 81b9 	bge.w	800f554 <register_events+0x3ec>
	__asm__ volatile(
 800f1e2:	f04f 0310 	mov.w	r3, #16
 800f1e6:	f3ef 8611 	mrs	r6, BASEPRI
 800f1ea:	f383 8812 	msr	BASEPRI_MAX, r3
 800f1ee:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800f1f2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800f1f6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f1fa:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800f1fe:	7b63      	ldrb	r3, [r4, #13]
 800f200:	f003 031f 	and.w	r3, r3, #31
 800f204:	3b01      	subs	r3, #1
 800f206:	2b07      	cmp	r3, #7
 800f208:	d8d4      	bhi.n	800f1b4 <register_events+0x4c>
 800f20a:	a201      	add	r2, pc, #4	; (adr r2, 800f210 <register_events+0xa8>)
 800f20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f210:	0800f199 	.word	0x0800f199
 800f214:	0800f17d 	.word	0x0800f17d
 800f218:	0800f1b5 	.word	0x0800f1b5
 800f21c:	0800f18b 	.word	0x0800f18b
 800f220:	0800f1b5 	.word	0x0800f1b5
 800f224:	0800f1b5 	.word	0x0800f1b5
 800f228:	0800f1b5 	.word	0x0800f1b5
 800f22c:	0800f1a7 	.word	0x0800f1a7
		} else if (!just_check && poller->is_polling) {
 800f230:	9b00      	ldr	r3, [sp, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1cd      	bne.n	800f1d2 <register_events+0x6a>
 800f236:	f89b 3000 	ldrb.w	r3, [fp]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0c9      	beq.n	800f1d2 <register_events+0x6a>
	switch (event->type) {
 800f23e:	7b63      	ldrb	r3, [r4, #13]
 800f240:	f003 031f 	and.w	r3, r3, #31
 800f244:	3b01      	subs	r3, #1
 800f246:	2b07      	cmp	r3, #7
 800f248:	d848      	bhi.n	800f2dc <register_events+0x174>
 800f24a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f24e:	00cb      	.short	0x00cb
 800f250:	00470008 	.word	0x00470008
 800f254:	0047006d 	.word	0x0047006d
 800f258:	00470047 	.word	0x00470047
 800f25c:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800f25e:	6923      	ldr	r3, [r4, #16]
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	f103 0210 	add.w	r2, r3, #16
 800f266:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800f268:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d02f      	beq.n	800f2ce <register_events+0x166>
 800f26e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800f270:	2b00      	cmp	r3, #0
 800f272:	d02c      	beq.n	800f2ce <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800f274:	6898      	ldr	r0, [r3, #8]
 800f276:	f004 ff6a 	bl	801414e <poller_thread>
 800f27a:	9005      	str	r0, [sp, #20]
 800f27c:	4658      	mov	r0, fp
 800f27e:	f004 ff66 	bl	801414e <poller_thread>
 800f282:	4601      	mov	r1, r0
 800f284:	9003      	str	r0, [sp, #12]
 800f286:	9805      	ldr	r0, [sp, #20]
 800f288:	f004 fd1f 	bl	8013cca <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800f28c:	2800      	cmp	r0, #0
 800f28e:	dc1e      	bgt.n	800f2ce <register_events+0x166>
	return list->head == list;
 800f290:	9b04      	ldr	r3, [sp, #16]
 800f292:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f294:	9a02      	ldr	r2, [sp, #8]
 800f296:	429a      	cmp	r2, r3
 800f298:	d030      	beq.n	800f2fc <register_events+0x194>
 800f29a:	9404      	str	r4, [sp, #16]
 800f29c:	9505      	str	r5, [sp, #20]
 800f29e:	9d02      	ldr	r5, [sp, #8]
 800f2a0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f2a2:	2c00      	cmp	r4, #0
 800f2a4:	d030      	beq.n	800f308 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800f2a6:	68a0      	ldr	r0, [r4, #8]
 800f2a8:	f004 ff51 	bl	801414e <poller_thread>
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	9803      	ldr	r0, [sp, #12]
 800f2b0:	f004 fd0b 	bl	8013cca <z_sched_prio_cmp>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	dc17      	bgt.n	800f2e8 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800f2b8:	2c00      	cmp	r4, #0
 800f2ba:	d028      	beq.n	800f30e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800f2bc:	686b      	ldr	r3, [r5, #4]
 800f2be:	429c      	cmp	r4, r3
 800f2c0:	d02f      	beq.n	800f322 <register_events+0x1ba>
 800f2c2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f2c4:	2c00      	cmp	r4, #0
 800f2c6:	d1ec      	bne.n	800f2a2 <register_events+0x13a>
 800f2c8:	9c04      	ldr	r4, [sp, #16]
 800f2ca:	9d05      	ldr	r5, [sp, #20]
 800f2cc:	e021      	b.n	800f312 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800f2ce:	9a02      	ldr	r2, [sp, #8]
 800f2d0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f2d2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f2d6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f2d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f2da:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800f2dc:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800f2e0:	9b01      	ldr	r3, [sp, #4]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	e774      	b.n	800f1d2 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800f2e8:	9d05      	ldr	r5, [sp, #20]
 800f2ea:	4622      	mov	r2, r4
 800f2ec:	9c04      	ldr	r4, [sp, #16]
 800f2ee:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800f2f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800f2f2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800f2f6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800f2f8:	6054      	str	r4, [r2, #4]
			return;
 800f2fa:	e7ef      	b.n	800f2dc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	9404      	str	r4, [sp, #16]
 800f300:	9505      	str	r5, [sp, #20]
 800f302:	9d02      	ldr	r5, [sp, #8]
 800f304:	461c      	mov	r4, r3
 800f306:	e7cc      	b.n	800f2a2 <register_events+0x13a>
 800f308:	9c04      	ldr	r4, [sp, #16]
 800f30a:	9d05      	ldr	r5, [sp, #20]
 800f30c:	e001      	b.n	800f312 <register_events+0x1aa>
 800f30e:	9c04      	ldr	r4, [sp, #16]
 800f310:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800f312:	9a02      	ldr	r2, [sp, #8]
 800f314:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f316:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f31a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f31c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f31e:	6054      	str	r4, [r2, #4]
}
 800f320:	e7dc      	b.n	800f2dc <register_events+0x174>
 800f322:	9c04      	ldr	r4, [sp, #16]
 800f324:	9d05      	ldr	r5, [sp, #20]
 800f326:	e7f4      	b.n	800f312 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	9304      	str	r3, [sp, #16]
 800f32c:	f103 0214 	add.w	r2, r3, #20
 800f330:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800f332:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800f334:	429a      	cmp	r2, r3
 800f336:	d02d      	beq.n	800f394 <register_events+0x22c>
 800f338:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800f33a:	b35b      	cbz	r3, 800f394 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800f33c:	6898      	ldr	r0, [r3, #8]
 800f33e:	f004 ff06 	bl	801414e <poller_thread>
 800f342:	9005      	str	r0, [sp, #20]
 800f344:	4658      	mov	r0, fp
 800f346:	f004 ff02 	bl	801414e <poller_thread>
 800f34a:	4601      	mov	r1, r0
 800f34c:	9003      	str	r0, [sp, #12]
 800f34e:	9805      	ldr	r0, [sp, #20]
 800f350:	f004 fcbb 	bl	8013cca <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800f354:	2800      	cmp	r0, #0
 800f356:	dc1d      	bgt.n	800f394 <register_events+0x22c>
	return list->head == list;
 800f358:	9b04      	ldr	r3, [sp, #16]
 800f35a:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f35c:	9a02      	ldr	r2, [sp, #8]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d02a      	beq.n	800f3b8 <register_events+0x250>
 800f362:	9404      	str	r4, [sp, #16]
 800f364:	9505      	str	r5, [sp, #20]
 800f366:	9d02      	ldr	r5, [sp, #8]
 800f368:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f36a:	2c00      	cmp	r4, #0
 800f36c:	d02a      	beq.n	800f3c4 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800f36e:	68a0      	ldr	r0, [r4, #8]
 800f370:	f004 feed 	bl	801414e <poller_thread>
 800f374:	4601      	mov	r1, r0
 800f376:	9803      	ldr	r0, [sp, #12]
 800f378:	f004 fca7 	bl	8013cca <z_sched_prio_cmp>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	dc11      	bgt.n	800f3a4 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800f380:	b31c      	cbz	r4, 800f3ca <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800f382:	686b      	ldr	r3, [r5, #4]
 800f384:	429c      	cmp	r4, r3
 800f386:	d02a      	beq.n	800f3de <register_events+0x276>
 800f388:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f38a:	2c00      	cmp	r4, #0
 800f38c:	d1ed      	bne.n	800f36a <register_events+0x202>
 800f38e:	9c04      	ldr	r4, [sp, #16]
 800f390:	9d05      	ldr	r5, [sp, #20]
 800f392:	e01c      	b.n	800f3ce <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800f394:	9a02      	ldr	r2, [sp, #8]
 800f396:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f398:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f39c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f39e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f3a0:	6054      	str	r4, [r2, #4]
		return;
 800f3a2:	e79b      	b.n	800f2dc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800f3a4:	9d05      	ldr	r5, [sp, #20]
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	9c04      	ldr	r4, [sp, #16]
 800f3aa:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800f3ac:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800f3ae:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800f3b2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800f3b4:	6054      	str	r4, [r2, #4]
			return;
 800f3b6:	e791      	b.n	800f2dc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	9404      	str	r4, [sp, #16]
 800f3bc:	9505      	str	r5, [sp, #20]
 800f3be:	9d02      	ldr	r5, [sp, #8]
 800f3c0:	461c      	mov	r4, r3
 800f3c2:	e7d2      	b.n	800f36a <register_events+0x202>
 800f3c4:	9c04      	ldr	r4, [sp, #16]
 800f3c6:	9d05      	ldr	r5, [sp, #20]
 800f3c8:	e001      	b.n	800f3ce <register_events+0x266>
 800f3ca:	9c04      	ldr	r4, [sp, #16]
 800f3cc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800f3ce:	9a02      	ldr	r2, [sp, #8]
 800f3d0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f3d2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f3d6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f3d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f3da:	6054      	str	r4, [r2, #4]
}
 800f3dc:	e77e      	b.n	800f2dc <register_events+0x174>
 800f3de:	9c04      	ldr	r4, [sp, #16]
 800f3e0:	9d05      	ldr	r5, [sp, #20]
 800f3e2:	e7f4      	b.n	800f3ce <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800f3e4:	6922      	ldr	r2, [r4, #16]
 800f3e6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800f3e8:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d02c      	beq.n	800f448 <register_events+0x2e0>
 800f3ee:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800f3f0:	b353      	cbz	r3, 800f448 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800f3f2:	6898      	ldr	r0, [r3, #8]
 800f3f4:	f004 feab 	bl	801414e <poller_thread>
 800f3f8:	9004      	str	r0, [sp, #16]
 800f3fa:	4658      	mov	r0, fp
 800f3fc:	f004 fea7 	bl	801414e <poller_thread>
 800f400:	4601      	mov	r1, r0
 800f402:	9003      	str	r0, [sp, #12]
 800f404:	9804      	ldr	r0, [sp, #16]
 800f406:	f004 fc60 	bl	8013cca <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800f40a:	2800      	cmp	r0, #0
 800f40c:	dc1c      	bgt.n	800f448 <register_events+0x2e0>
	return list->head == list;
 800f40e:	9b02      	ldr	r3, [sp, #8]
 800f410:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f412:	4293      	cmp	r3, r2
 800f414:	d02a      	beq.n	800f46c <register_events+0x304>
 800f416:	9404      	str	r4, [sp, #16]
 800f418:	9505      	str	r5, [sp, #20]
 800f41a:	9d02      	ldr	r5, [sp, #8]
 800f41c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f41e:	2c00      	cmp	r4, #0
 800f420:	d02a      	beq.n	800f478 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800f422:	68a0      	ldr	r0, [r4, #8]
 800f424:	f004 fe93 	bl	801414e <poller_thread>
 800f428:	4601      	mov	r1, r0
 800f42a:	9803      	ldr	r0, [sp, #12]
 800f42c:	f004 fc4d 	bl	8013cca <z_sched_prio_cmp>
 800f430:	2800      	cmp	r0, #0
 800f432:	dc11      	bgt.n	800f458 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800f434:	b31c      	cbz	r4, 800f47e <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800f436:	686b      	ldr	r3, [r5, #4]
 800f438:	429c      	cmp	r4, r3
 800f43a:	d02a      	beq.n	800f492 <register_events+0x32a>
 800f43c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f43e:	2c00      	cmp	r4, #0
 800f440:	d1ed      	bne.n	800f41e <register_events+0x2b6>
 800f442:	9c04      	ldr	r4, [sp, #16]
 800f444:	9d05      	ldr	r5, [sp, #20]
 800f446:	e01c      	b.n	800f482 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800f448:	9a02      	ldr	r2, [sp, #8]
 800f44a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f44c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f450:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f452:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f454:	6054      	str	r4, [r2, #4]
		return;
 800f456:	e741      	b.n	800f2dc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800f458:	9d05      	ldr	r5, [sp, #20]
 800f45a:	4622      	mov	r2, r4
 800f45c:	9c04      	ldr	r4, [sp, #16]
 800f45e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800f460:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800f462:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800f466:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800f468:	6054      	str	r4, [r2, #4]
			return;
 800f46a:	e737      	b.n	800f2dc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f46c:	2300      	movs	r3, #0
 800f46e:	9404      	str	r4, [sp, #16]
 800f470:	9505      	str	r5, [sp, #20]
 800f472:	9d02      	ldr	r5, [sp, #8]
 800f474:	461c      	mov	r4, r3
 800f476:	e7d2      	b.n	800f41e <register_events+0x2b6>
 800f478:	9c04      	ldr	r4, [sp, #16]
 800f47a:	9d05      	ldr	r5, [sp, #20]
 800f47c:	e001      	b.n	800f482 <register_events+0x31a>
 800f47e:	9c04      	ldr	r4, [sp, #16]
 800f480:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800f482:	9a02      	ldr	r2, [sp, #8]
 800f484:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f486:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f48a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f48c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f48e:	6054      	str	r4, [r2, #4]
}
 800f490:	e724      	b.n	800f2dc <register_events+0x174>
 800f492:	9c04      	ldr	r4, [sp, #16]
 800f494:	9d05      	ldr	r5, [sp, #20]
 800f496:	e7f4      	b.n	800f482 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800f498:	6923      	ldr	r3, [r4, #16]
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f4a0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800f4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d02d      	beq.n	800f504 <register_events+0x39c>
 800f4a8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800f4aa:	b35b      	cbz	r3, 800f504 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800f4ac:	6898      	ldr	r0, [r3, #8]
 800f4ae:	f004 fe4e 	bl	801414e <poller_thread>
 800f4b2:	9005      	str	r0, [sp, #20]
 800f4b4:	4658      	mov	r0, fp
 800f4b6:	f004 fe4a 	bl	801414e <poller_thread>
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	9003      	str	r0, [sp, #12]
 800f4be:	9805      	ldr	r0, [sp, #20]
 800f4c0:	f004 fc03 	bl	8013cca <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	dc1d      	bgt.n	800f504 <register_events+0x39c>
	return list->head == list;
 800f4c8:	9b04      	ldr	r3, [sp, #16]
 800f4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800f4cc:	9a02      	ldr	r2, [sp, #8]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d02a      	beq.n	800f528 <register_events+0x3c0>
 800f4d2:	9404      	str	r4, [sp, #16]
 800f4d4:	9505      	str	r5, [sp, #20]
 800f4d6:	9d02      	ldr	r5, [sp, #8]
 800f4d8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f4da:	2c00      	cmp	r4, #0
 800f4dc:	d02a      	beq.n	800f534 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800f4de:	68a0      	ldr	r0, [r4, #8]
 800f4e0:	f004 fe35 	bl	801414e <poller_thread>
 800f4e4:	4601      	mov	r1, r0
 800f4e6:	9803      	ldr	r0, [sp, #12]
 800f4e8:	f004 fbef 	bl	8013cca <z_sched_prio_cmp>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	dc11      	bgt.n	800f514 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800f4f0:	b31c      	cbz	r4, 800f53a <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800f4f2:	686b      	ldr	r3, [r5, #4]
 800f4f4:	429c      	cmp	r4, r3
 800f4f6:	d02a      	beq.n	800f54e <register_events+0x3e6>
 800f4f8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d1ed      	bne.n	800f4da <register_events+0x372>
 800f4fe:	9c04      	ldr	r4, [sp, #16]
 800f500:	9d05      	ldr	r5, [sp, #20]
 800f502:	e01c      	b.n	800f53e <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800f504:	9a02      	ldr	r2, [sp, #8]
 800f506:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f508:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f50c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f50e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f510:	6054      	str	r4, [r2, #4]
		return;
 800f512:	e6e3      	b.n	800f2dc <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800f514:	9d05      	ldr	r5, [sp, #20]
 800f516:	4622      	mov	r2, r4
 800f518:	9c04      	ldr	r4, [sp, #16]
 800f51a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800f51c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800f51e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800f522:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800f524:	6054      	str	r4, [r2, #4]
			return;
 800f526:	e6d9      	b.n	800f2dc <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800f528:	2300      	movs	r3, #0
 800f52a:	9404      	str	r4, [sp, #16]
 800f52c:	9505      	str	r5, [sp, #20]
 800f52e:	9d02      	ldr	r5, [sp, #8]
 800f530:	461c      	mov	r4, r3
 800f532:	e7d2      	b.n	800f4da <register_events+0x372>
 800f534:	9c04      	ldr	r4, [sp, #16]
 800f536:	9d05      	ldr	r5, [sp, #20]
 800f538:	e001      	b.n	800f53e <register_events+0x3d6>
 800f53a:	9c04      	ldr	r4, [sp, #16]
 800f53c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800f53e:	9a02      	ldr	r2, [sp, #8]
 800f540:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800f542:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800f546:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800f548:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f54a:	6054      	str	r4, [r2, #4]
}
 800f54c:	e6c6      	b.n	800f2dc <register_events+0x174>
 800f54e:	9c04      	ldr	r4, [sp, #16]
 800f550:	9d05      	ldr	r5, [sp, #20]
 800f552:	e7f4      	b.n	800f53e <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800f554:	9801      	ldr	r0, [sp, #4]
 800f556:	b007      	add	sp, #28
 800f558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f55c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800f55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	4605      	mov	r5, r0
 800f564:	4690      	mov	r8, r2
 800f566:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800f568:	4b4f      	ldr	r3, [pc, #316]	; (800f6a8 <z_impl_k_poll+0x14c>)
 800f56a:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800f56c:	2301      	movs	r3, #1
 800f56e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800f572:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800f576:	ea57 0302 	orrs.w	r3, r7, r2
 800f57a:	bf0c      	ite	eq
 800f57c:	2301      	moveq	r3, #1
 800f57e:	2300      	movne	r3, #0
 800f580:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800f584:	f7ff fdf0 	bl	800f168 <register_events>
 800f588:	4604      	mov	r4, r0
 800f58a:	f04f 0310 	mov.w	r3, #16
 800f58e:	f3ef 8111 	mrs	r1, BASEPRI
 800f592:	f383 8812 	msr	BASEPRI_MAX, r3
 800f596:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800f59a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800f59e:	b1b3      	cbz	r3, 800f5ce <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800f5a6:	ea57 0308 	orrs.w	r3, r7, r8
 800f5aa:	d043      	beq.n	800f634 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800f5ac:	f8cd 8000 	str.w	r8, [sp]
 800f5b0:	9701      	str	r7, [sp, #4]
 800f5b2:	4a3e      	ldr	r2, [pc, #248]	; (800f6ac <z_impl_k_poll+0x150>)
 800f5b4:	483e      	ldr	r0, [pc, #248]	; (800f6b0 <z_impl_k_poll+0x154>)
 800f5b6:	f7ff f97f 	bl	800e8b8 <z_pend_curr>
 800f5ba:	f04f 0310 	mov.w	r3, #16
 800f5be:	f3ef 8611 	mrs	r6, BASEPRI
 800f5c2:	f383 8812 	msr	BASEPRI_MAX, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	46b4      	mov	ip, r6
	while (num_events--) {
 800f5cc:	e04c      	b.n	800f668 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800f5ce:	460e      	mov	r6, r1
	while (num_events--) {
 800f5d0:	e00c      	b.n	800f5ec <z_impl_k_poll+0x90>
	__asm__ volatile(
 800f5d2:	f386 8811 	msr	BASEPRI, r6
 800f5d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800f5da:	f04f 0310 	mov.w	r3, #16
 800f5de:	f3ef 8611 	mrs	r6, BASEPRI
 800f5e2:	f383 8812 	msr	BASEPRI_MAX, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	1e60      	subs	r0, r4, #1
 800f5ee:	b1dc      	cbz	r4, 800f628 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800f5f0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800f5f4:	009f      	lsls	r7, r3, #2
 800f5f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800f5fe:	7b5a      	ldrb	r2, [r3, #13]
 800f600:	f002 021f 	and.w	r2, r2, #31
 800f604:	2a08      	cmp	r2, #8
 800f606:	d8e4      	bhi.n	800f5d2 <z_impl_k_poll+0x76>
 800f608:	2401      	movs	r4, #1
 800f60a:	fa04 f202 	lsl.w	r2, r4, r2
 800f60e:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800f612:	d0de      	beq.n	800f5d2 <z_impl_k_poll+0x76>
	return node->next != NULL;
 800f614:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800f616:	2a00      	cmp	r2, #0
 800f618:	d0db      	beq.n	800f5d2 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800f61a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800f61c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800f61e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800f620:	2200      	movs	r2, #0
 800f622:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800f624:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800f626:	e7d4      	b.n	800f5d2 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800f628:	f381 8811 	msr	BASEPRI, r1
 800f62c:	f3bf 8f6f 	isb	sy
		return 0;
 800f630:	4620      	mov	r0, r4
 800f632:	e036      	b.n	800f6a2 <z_impl_k_poll+0x146>
 800f634:	f381 8811 	msr	BASEPRI, r1
 800f638:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800f63c:	f06f 000a 	mvn.w	r0, #10
 800f640:	e02f      	b.n	800f6a2 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800f642:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800f644:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800f646:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800f648:	2200      	movs	r2, #0
 800f64a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800f64c:	605a      	str	r2, [r3, #4]
 800f64e:	f38c 8811 	msr	BASEPRI, ip
 800f652:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800f656:	f04f 0310 	mov.w	r3, #16
 800f65a:	f3ef 8c11 	mrs	ip, BASEPRI
 800f65e:	f383 8812 	msr	BASEPRI_MAX, r3
 800f662:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800f666:	4674      	mov	r4, lr
 800f668:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800f66c:	b1ac      	cbz	r4, 800f69a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800f66e:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800f672:	009c      	lsls	r4, r3, #2
 800f674:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800f678:	2200      	movs	r2, #0
 800f67a:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800f67c:	7b5a      	ldrb	r2, [r3, #13]
 800f67e:	f002 021f 	and.w	r2, r2, #31
 800f682:	2a08      	cmp	r2, #8
 800f684:	d8e3      	bhi.n	800f64e <z_impl_k_poll+0xf2>
 800f686:	2101      	movs	r1, #1
 800f688:	fa01 f202 	lsl.w	r2, r1, r2
 800f68c:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800f690:	d0dd      	beq.n	800f64e <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800f692:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800f694:	2a00      	cmp	r2, #0
 800f696:	d1d4      	bne.n	800f642 <z_impl_k_poll+0xe6>
 800f698:	e7d9      	b.n	800f64e <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800f69a:	f386 8811 	msr	BASEPRI, r6
 800f69e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800f6a2:	b002      	add	sp, #8
 800f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a8:	20001a2c 	.word	0x20001a2c
 800f6ac:	200004a4 	.word	0x200004a4
 800f6b0:	20001a78 	.word	0x20001a78

0800f6b4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4603      	mov	r3, r0
	__asm__ volatile(
 800f6b8:	f04f 0210 	mov.w	r2, #16
 800f6bc:	f3ef 8511 	mrs	r5, BASEPRI
 800f6c0:	f382 8812 	msr	BASEPRI_MAX, r2
 800f6c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800f6c8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800f6ce:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800f6d0:	4283      	cmp	r3, r0
 800f6d2:	d011      	beq.n	800f6f8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800f6d4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800f6d6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800f6d8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800f6da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800f6e0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800f6e2:	b148      	cbz	r0, 800f6f8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	f004 fd7e 	bl	80141e6 <signal_poll_event>
 800f6ea:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	4805      	ldr	r0, [pc, #20]	; (800f704 <z_impl_k_poll_signal_raise+0x50>)
 800f6f0:	f7fe ff72 	bl	800e5d8 <z_reschedule>
	return rc;
}
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800f6f8:	f385 8811 	msr	BASEPRI, r5
 800f6fc:	f3bf 8f6f 	isb	sy
		return 0;
 800f700:	2400      	movs	r4, #0
 800f702:	e7f7      	b.n	800f6f4 <z_impl_k_poll_signal_raise+0x40>
 800f704:	20001a78 	.word	0x20001a78

0800f708 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800f708:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800f70a:	4a03      	ldr	r2, [pc, #12]	; (800f718 <boot_banner+0x10>)
 800f70c:	4903      	ldr	r1, [pc, #12]	; (800f71c <boot_banner+0x14>)
 800f70e:	4804      	ldr	r0, [pc, #16]	; (800f720 <boot_banner+0x18>)
 800f710:	f001 fc45 	bl	8010f9e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800f714:	bd08      	pop	{r3, pc}
 800f716:	bf00      	nop
 800f718:	080152b4 	.word	0x080152b4
 800f71c:	080171a4 	.word	0x080171a4
 800f720:	080171c4 	.word	0x080171c4

0800f724 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800f724:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800f726:	4c06      	ldr	r4, [pc, #24]	; (800f740 <statics_init+0x1c>)
 800f728:	e005      	b.n	800f736 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800f72a:	68a2      	ldr	r2, [r4, #8]
 800f72c:	6861      	ldr	r1, [r4, #4]
 800f72e:	4620      	mov	r0, r4
 800f730:	f004 fdaf 	bl	8014292 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800f734:	3418      	adds	r4, #24
 800f736:	4b03      	ldr	r3, [pc, #12]	; (800f744 <statics_init+0x20>)
 800f738:	429c      	cmp	r4, r3
 800f73a:	d3f6      	bcc.n	800f72a <statics_init+0x6>
		}
	}
	return 0;
}
 800f73c:	2000      	movs	r0, #0
 800f73e:	bd10      	pop	{r4, pc}
 800f740:	20000790 	.word	0x20000790
 800f744:	20000790 	.word	0x20000790

0800f748 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800f748:	b510      	push	{r4, lr}
 800f74a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800f74c:	4b08      	ldr	r3, [pc, #32]	; (800f770 <k_sys_work_q_init+0x28>)
 800f74e:	9302      	str	r3, [sp, #8]
 800f750:	2400      	movs	r4, #0
 800f752:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800f756:	ab02      	add	r3, sp, #8
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	4623      	mov	r3, r4
 800f75c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f760:	4904      	ldr	r1, [pc, #16]	; (800f774 <k_sys_work_q_init+0x2c>)
 800f762:	4805      	ldr	r0, [pc, #20]	; (800f778 <k_sys_work_q_init+0x30>)
 800f764:	f7fe fe9e 	bl	800e4a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800f768:	4620      	mov	r0, r4
 800f76a:	b004      	add	sp, #16
 800f76c:	bd10      	pop	{r4, pc}
 800f76e:	bf00      	nop
 800f770:	080171ec 	.word	0x080171ec
 800f774:	20004fc0 	.word	0x20004fc0
 800f778:	200010d8 	.word	0x200010d8

0800f77c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800f77c:	b508      	push	{r3, lr}
 800f77e:	680b      	ldr	r3, [r1, #0]
 800f780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f784:	d302      	bcc.n	800f78c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800f786:	480d      	ldr	r0, [pc, #52]	; (800f7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800f788:	f004 fe58 	bl	801443c <_ZSt20__throw_length_errorPKc>
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d90b      	bls.n	800f7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f790:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f794:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800f798:	d206      	bcs.n	800f7a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f79a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f79e:	bf2a      	itet	cs
 800f7a0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800f7a4:	6008      	strcc	r0, [r1, #0]
 800f7a6:	600b      	strcs	r3, [r1, #0]
 800f7a8:	6808      	ldr	r0, [r1, #0]
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	d501      	bpl.n	800f7b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800f7ae:	f004 fe3f 	bl	8014430 <_ZSt17__throw_bad_allocv>
 800f7b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f7b6:	f004 bd76 	b.w	80142a6 <_Znwj>
 800f7ba:	bf00      	nop
 800f7bc:	08017268 	.word	0x08017268

0800f7c0 <_ZSt15get_new_handlerv>:
 800f7c0:	4b02      	ldr	r3, [pc, #8]	; (800f7cc <_ZSt15get_new_handlerv+0xc>)
 800f7c2:	6818      	ldr	r0, [r3, #0]
 800f7c4:	f3bf 8f5b 	dmb	ish
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop
 800f7cc:	20001a7c 	.word	0x20001a7c

0800f7d0 <__assert_func>:
 800f7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7d2:	4614      	mov	r4, r2
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4b09      	ldr	r3, [pc, #36]	; (800f7fc <__assert_func+0x2c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4605      	mov	r5, r0
 800f7dc:	68d8      	ldr	r0, [r3, #12]
 800f7de:	b14c      	cbz	r4, 800f7f4 <__assert_func+0x24>
 800f7e0:	4b07      	ldr	r3, [pc, #28]	; (800f800 <__assert_func+0x30>)
 800f7e2:	9100      	str	r1, [sp, #0]
 800f7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7e8:	4906      	ldr	r1, [pc, #24]	; (800f804 <__assert_func+0x34>)
 800f7ea:	462b      	mov	r3, r5
 800f7ec:	f000 f80e 	bl	800f80c <fiprintf>
 800f7f0:	f004 fe31 	bl	8014456 <abort>
 800f7f4:	4b04      	ldr	r3, [pc, #16]	; (800f808 <__assert_func+0x38>)
 800f7f6:	461c      	mov	r4, r3
 800f7f8:	e7f3      	b.n	800f7e2 <__assert_func+0x12>
 800f7fa:	bf00      	nop
 800f7fc:	200004ac 	.word	0x200004ac
 800f800:	08017280 	.word	0x08017280
 800f804:	0801728d 	.word	0x0801728d
 800f808:	080172bb 	.word	0x080172bb

0800f80c <fiprintf>:
 800f80c:	b40e      	push	{r1, r2, r3}
 800f80e:	b503      	push	{r0, r1, lr}
 800f810:	4601      	mov	r1, r0
 800f812:	ab03      	add	r3, sp, #12
 800f814:	4805      	ldr	r0, [pc, #20]	; (800f82c <fiprintf+0x20>)
 800f816:	f853 2b04 	ldr.w	r2, [r3], #4
 800f81a:	6800      	ldr	r0, [r0, #0]
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	f000 f8bb 	bl	800f998 <_vfiprintf_r>
 800f822:	b002      	add	sp, #8
 800f824:	f85d eb04 	ldr.w	lr, [sp], #4
 800f828:	b003      	add	sp, #12
 800f82a:	4770      	bx	lr
 800f82c:	200004ac 	.word	0x200004ac

0800f830 <malloc>:
 800f830:	4b02      	ldr	r3, [pc, #8]	; (800f83c <malloc+0xc>)
 800f832:	4601      	mov	r1, r0
 800f834:	6818      	ldr	r0, [r3, #0]
 800f836:	f000 b855 	b.w	800f8e4 <_malloc_r>
 800f83a:	bf00      	nop
 800f83c:	200004ac 	.word	0x200004ac

0800f840 <free>:
 800f840:	4b02      	ldr	r3, [pc, #8]	; (800f84c <free+0xc>)
 800f842:	4601      	mov	r1, r0
 800f844:	6818      	ldr	r0, [r3, #0]
 800f846:	f000 b803 	b.w	800f850 <_free_r>
 800f84a:	bf00      	nop
 800f84c:	200004ac 	.word	0x200004ac

0800f850 <_free_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4605      	mov	r5, r0
 800f854:	2900      	cmp	r1, #0
 800f856:	d041      	beq.n	800f8dc <_free_r+0x8c>
 800f858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f85c:	1f0c      	subs	r4, r1, #4
 800f85e:	2b00      	cmp	r3, #0
 800f860:	bfb8      	it	lt
 800f862:	18e4      	addlt	r4, r4, r3
 800f864:	f000 ffc4 	bl	80107f0 <__malloc_lock>
 800f868:	4a1d      	ldr	r2, [pc, #116]	; (800f8e0 <_free_r+0x90>)
 800f86a:	6813      	ldr	r3, [r2, #0]
 800f86c:	b933      	cbnz	r3, 800f87c <_free_r+0x2c>
 800f86e:	6063      	str	r3, [r4, #4]
 800f870:	6014      	str	r4, [r2, #0]
 800f872:	4628      	mov	r0, r5
 800f874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f878:	f000 bfc0 	b.w	80107fc <__malloc_unlock>
 800f87c:	42a3      	cmp	r3, r4
 800f87e:	d908      	bls.n	800f892 <_free_r+0x42>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	1821      	adds	r1, r4, r0
 800f884:	428b      	cmp	r3, r1
 800f886:	bf01      	itttt	eq
 800f888:	6819      	ldreq	r1, [r3, #0]
 800f88a:	685b      	ldreq	r3, [r3, #4]
 800f88c:	1809      	addeq	r1, r1, r0
 800f88e:	6021      	streq	r1, [r4, #0]
 800f890:	e7ed      	b.n	800f86e <_free_r+0x1e>
 800f892:	461a      	mov	r2, r3
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	b10b      	cbz	r3, 800f89c <_free_r+0x4c>
 800f898:	42a3      	cmp	r3, r4
 800f89a:	d9fa      	bls.n	800f892 <_free_r+0x42>
 800f89c:	6811      	ldr	r1, [r2, #0]
 800f89e:	1850      	adds	r0, r2, r1
 800f8a0:	42a0      	cmp	r0, r4
 800f8a2:	d10b      	bne.n	800f8bc <_free_r+0x6c>
 800f8a4:	6820      	ldr	r0, [r4, #0]
 800f8a6:	4401      	add	r1, r0
 800f8a8:	1850      	adds	r0, r2, r1
 800f8aa:	4283      	cmp	r3, r0
 800f8ac:	6011      	str	r1, [r2, #0]
 800f8ae:	d1e0      	bne.n	800f872 <_free_r+0x22>
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	6053      	str	r3, [r2, #4]
 800f8b6:	4401      	add	r1, r0
 800f8b8:	6011      	str	r1, [r2, #0]
 800f8ba:	e7da      	b.n	800f872 <_free_r+0x22>
 800f8bc:	d902      	bls.n	800f8c4 <_free_r+0x74>
 800f8be:	230c      	movs	r3, #12
 800f8c0:	602b      	str	r3, [r5, #0]
 800f8c2:	e7d6      	b.n	800f872 <_free_r+0x22>
 800f8c4:	6820      	ldr	r0, [r4, #0]
 800f8c6:	1821      	adds	r1, r4, r0
 800f8c8:	428b      	cmp	r3, r1
 800f8ca:	bf04      	itt	eq
 800f8cc:	6819      	ldreq	r1, [r3, #0]
 800f8ce:	685b      	ldreq	r3, [r3, #4]
 800f8d0:	6063      	str	r3, [r4, #4]
 800f8d2:	bf04      	itt	eq
 800f8d4:	1809      	addeq	r1, r1, r0
 800f8d6:	6021      	streq	r1, [r4, #0]
 800f8d8:	6054      	str	r4, [r2, #4]
 800f8da:	e7ca      	b.n	800f872 <_free_r+0x22>
 800f8dc:	bd38      	pop	{r3, r4, r5, pc}
 800f8de:	bf00      	nop
 800f8e0:	20001a80 	.word	0x20001a80

0800f8e4 <_malloc_r>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	1ccd      	adds	r5, r1, #3
 800f8e8:	f025 0503 	bic.w	r5, r5, #3
 800f8ec:	3508      	adds	r5, #8
 800f8ee:	2d0c      	cmp	r5, #12
 800f8f0:	bf38      	it	cc
 800f8f2:	250c      	movcc	r5, #12
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	db01      	blt.n	800f8fe <_malloc_r+0x1a>
 800f8fa:	42a9      	cmp	r1, r5
 800f8fc:	d903      	bls.n	800f906 <_malloc_r+0x22>
 800f8fe:	230c      	movs	r3, #12
 800f900:	6033      	str	r3, [r6, #0]
 800f902:	2000      	movs	r0, #0
 800f904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f906:	f000 ff73 	bl	80107f0 <__malloc_lock>
 800f90a:	4921      	ldr	r1, [pc, #132]	; (800f990 <_malloc_r+0xac>)
 800f90c:	680a      	ldr	r2, [r1, #0]
 800f90e:	4614      	mov	r4, r2
 800f910:	b99c      	cbnz	r4, 800f93a <_malloc_r+0x56>
 800f912:	4f20      	ldr	r7, [pc, #128]	; (800f994 <_malloc_r+0xb0>)
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	b923      	cbnz	r3, 800f922 <_malloc_r+0x3e>
 800f918:	4621      	mov	r1, r4
 800f91a:	4630      	mov	r0, r6
 800f91c:	f000 fcbc 	bl	8010298 <_sbrk_r>
 800f920:	6038      	str	r0, [r7, #0]
 800f922:	4629      	mov	r1, r5
 800f924:	4630      	mov	r0, r6
 800f926:	f000 fcb7 	bl	8010298 <_sbrk_r>
 800f92a:	1c43      	adds	r3, r0, #1
 800f92c:	d123      	bne.n	800f976 <_malloc_r+0x92>
 800f92e:	230c      	movs	r3, #12
 800f930:	6033      	str	r3, [r6, #0]
 800f932:	4630      	mov	r0, r6
 800f934:	f000 ff62 	bl	80107fc <__malloc_unlock>
 800f938:	e7e3      	b.n	800f902 <_malloc_r+0x1e>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	1b5b      	subs	r3, r3, r5
 800f93e:	d417      	bmi.n	800f970 <_malloc_r+0x8c>
 800f940:	2b0b      	cmp	r3, #11
 800f942:	d903      	bls.n	800f94c <_malloc_r+0x68>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	441c      	add	r4, r3
 800f948:	6025      	str	r5, [r4, #0]
 800f94a:	e004      	b.n	800f956 <_malloc_r+0x72>
 800f94c:	6863      	ldr	r3, [r4, #4]
 800f94e:	42a2      	cmp	r2, r4
 800f950:	bf0c      	ite	eq
 800f952:	600b      	streq	r3, [r1, #0]
 800f954:	6053      	strne	r3, [r2, #4]
 800f956:	4630      	mov	r0, r6
 800f958:	f000 ff50 	bl	80107fc <__malloc_unlock>
 800f95c:	f104 000b 	add.w	r0, r4, #11
 800f960:	1d23      	adds	r3, r4, #4
 800f962:	f020 0007 	bic.w	r0, r0, #7
 800f966:	1ac2      	subs	r2, r0, r3
 800f968:	d0cc      	beq.n	800f904 <_malloc_r+0x20>
 800f96a:	1a1b      	subs	r3, r3, r0
 800f96c:	50a3      	str	r3, [r4, r2]
 800f96e:	e7c9      	b.n	800f904 <_malloc_r+0x20>
 800f970:	4622      	mov	r2, r4
 800f972:	6864      	ldr	r4, [r4, #4]
 800f974:	e7cc      	b.n	800f910 <_malloc_r+0x2c>
 800f976:	1cc4      	adds	r4, r0, #3
 800f978:	f024 0403 	bic.w	r4, r4, #3
 800f97c:	42a0      	cmp	r0, r4
 800f97e:	d0e3      	beq.n	800f948 <_malloc_r+0x64>
 800f980:	1a21      	subs	r1, r4, r0
 800f982:	4630      	mov	r0, r6
 800f984:	f000 fc88 	bl	8010298 <_sbrk_r>
 800f988:	3001      	adds	r0, #1
 800f98a:	d1dd      	bne.n	800f948 <_malloc_r+0x64>
 800f98c:	e7cf      	b.n	800f92e <_malloc_r+0x4a>
 800f98e:	bf00      	nop
 800f990:	20001a80 	.word	0x20001a80
 800f994:	20001a84 	.word	0x20001a84

0800f998 <_vfiprintf_r>:
 800f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f99c:	460d      	mov	r5, r1
 800f99e:	b09d      	sub	sp, #116	; 0x74
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	4698      	mov	r8, r3
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	b118      	cbz	r0, 800f9b0 <_vfiprintf_r+0x18>
 800f9a8:	6983      	ldr	r3, [r0, #24]
 800f9aa:	b90b      	cbnz	r3, 800f9b0 <_vfiprintf_r+0x18>
 800f9ac:	f000 fe5e 	bl	801066c <__sinit>
 800f9b0:	4b89      	ldr	r3, [pc, #548]	; (800fbd8 <_vfiprintf_r+0x240>)
 800f9b2:	429d      	cmp	r5, r3
 800f9b4:	d11b      	bne.n	800f9ee <_vfiprintf_r+0x56>
 800f9b6:	6875      	ldr	r5, [r6, #4]
 800f9b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9ba:	07d9      	lsls	r1, r3, #31
 800f9bc:	d405      	bmi.n	800f9ca <_vfiprintf_r+0x32>
 800f9be:	89ab      	ldrh	r3, [r5, #12]
 800f9c0:	059a      	lsls	r2, r3, #22
 800f9c2:	d402      	bmi.n	800f9ca <_vfiprintf_r+0x32>
 800f9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9c6:	f001 ffdc 	bl	8011982 <__retarget_lock_acquire_recursive>
 800f9ca:	89ab      	ldrh	r3, [r5, #12]
 800f9cc:	071b      	lsls	r3, r3, #28
 800f9ce:	d501      	bpl.n	800f9d4 <_vfiprintf_r+0x3c>
 800f9d0:	692b      	ldr	r3, [r5, #16]
 800f9d2:	b9eb      	cbnz	r3, 800fa10 <_vfiprintf_r+0x78>
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f000 fcda 	bl	8010390 <__swsetup_r>
 800f9dc:	b1c0      	cbz	r0, 800fa10 <_vfiprintf_r+0x78>
 800f9de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9e0:	07dc      	lsls	r4, r3, #31
 800f9e2:	d50e      	bpl.n	800fa02 <_vfiprintf_r+0x6a>
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9e8:	b01d      	add	sp, #116	; 0x74
 800f9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	4b7b      	ldr	r3, [pc, #492]	; (800fbdc <_vfiprintf_r+0x244>)
 800f9f0:	429d      	cmp	r5, r3
 800f9f2:	d101      	bne.n	800f9f8 <_vfiprintf_r+0x60>
 800f9f4:	68b5      	ldr	r5, [r6, #8]
 800f9f6:	e7df      	b.n	800f9b8 <_vfiprintf_r+0x20>
 800f9f8:	4b79      	ldr	r3, [pc, #484]	; (800fbe0 <_vfiprintf_r+0x248>)
 800f9fa:	429d      	cmp	r5, r3
 800f9fc:	bf08      	it	eq
 800f9fe:	68f5      	ldreq	r5, [r6, #12]
 800fa00:	e7da      	b.n	800f9b8 <_vfiprintf_r+0x20>
 800fa02:	89ab      	ldrh	r3, [r5, #12]
 800fa04:	0598      	lsls	r0, r3, #22
 800fa06:	d4ed      	bmi.n	800f9e4 <_vfiprintf_r+0x4c>
 800fa08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa0a:	f001 ffc2 	bl	8011992 <__retarget_lock_release_recursive>
 800fa0e:	e7e9      	b.n	800f9e4 <_vfiprintf_r+0x4c>
 800fa10:	2300      	movs	r3, #0
 800fa12:	9309      	str	r3, [sp, #36]	; 0x24
 800fa14:	2320      	movs	r3, #32
 800fa16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa1e:	2330      	movs	r3, #48	; 0x30
 800fa20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fbe4 <_vfiprintf_r+0x24c>
 800fa24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa28:	f04f 0901 	mov.w	r9, #1
 800fa2c:	4623      	mov	r3, r4
 800fa2e:	469a      	mov	sl, r3
 800fa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa34:	b10a      	cbz	r2, 800fa3a <_vfiprintf_r+0xa2>
 800fa36:	2a25      	cmp	r2, #37	; 0x25
 800fa38:	d1f9      	bne.n	800fa2e <_vfiprintf_r+0x96>
 800fa3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa3e:	d00b      	beq.n	800fa58 <_vfiprintf_r+0xc0>
 800fa40:	465b      	mov	r3, fp
 800fa42:	4622      	mov	r2, r4
 800fa44:	4629      	mov	r1, r5
 800fa46:	4630      	mov	r0, r6
 800fa48:	f004 fd37 	bl	80144ba <__sfputs_r>
 800fa4c:	3001      	adds	r0, #1
 800fa4e:	f000 80aa 	beq.w	800fba6 <_vfiprintf_r+0x20e>
 800fa52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa54:	445a      	add	r2, fp
 800fa56:	9209      	str	r2, [sp, #36]	; 0x24
 800fa58:	f89a 3000 	ldrb.w	r3, [sl]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 80a2 	beq.w	800fba6 <_vfiprintf_r+0x20e>
 800fa62:	2300      	movs	r3, #0
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa6c:	f10a 0a01 	add.w	sl, sl, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	9307      	str	r3, [sp, #28]
 800fa74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa78:	931a      	str	r3, [sp, #104]	; 0x68
 800fa7a:	4654      	mov	r4, sl
 800fa7c:	2205      	movs	r2, #5
 800fa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa82:	4858      	ldr	r0, [pc, #352]	; (800fbe4 <_vfiprintf_r+0x24c>)
 800fa84:	f7f0 fb8c 	bl	80001a0 <memchr>
 800fa88:	9a04      	ldr	r2, [sp, #16]
 800fa8a:	b9d8      	cbnz	r0, 800fac4 <_vfiprintf_r+0x12c>
 800fa8c:	06d1      	lsls	r1, r2, #27
 800fa8e:	bf44      	itt	mi
 800fa90:	2320      	movmi	r3, #32
 800fa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa96:	0713      	lsls	r3, r2, #28
 800fa98:	bf44      	itt	mi
 800fa9a:	232b      	movmi	r3, #43	; 0x2b
 800fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faa0:	f89a 3000 	ldrb.w	r3, [sl]
 800faa4:	2b2a      	cmp	r3, #42	; 0x2a
 800faa6:	d015      	beq.n	800fad4 <_vfiprintf_r+0x13c>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	4654      	mov	r4, sl
 800faac:	2000      	movs	r0, #0
 800faae:	f04f 0c0a 	mov.w	ip, #10
 800fab2:	4621      	mov	r1, r4
 800fab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fab8:	3b30      	subs	r3, #48	; 0x30
 800faba:	2b09      	cmp	r3, #9
 800fabc:	d94e      	bls.n	800fb5c <_vfiprintf_r+0x1c4>
 800fabe:	b1b0      	cbz	r0, 800faee <_vfiprintf_r+0x156>
 800fac0:	9207      	str	r2, [sp, #28]
 800fac2:	e014      	b.n	800faee <_vfiprintf_r+0x156>
 800fac4:	eba0 0308 	sub.w	r3, r0, r8
 800fac8:	fa09 f303 	lsl.w	r3, r9, r3
 800facc:	4313      	orrs	r3, r2
 800face:	9304      	str	r3, [sp, #16]
 800fad0:	46a2      	mov	sl, r4
 800fad2:	e7d2      	b.n	800fa7a <_vfiprintf_r+0xe2>
 800fad4:	9b03      	ldr	r3, [sp, #12]
 800fad6:	1d19      	adds	r1, r3, #4
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	9103      	str	r1, [sp, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bfbb      	ittet	lt
 800fae0:	425b      	neglt	r3, r3
 800fae2:	f042 0202 	orrlt.w	r2, r2, #2
 800fae6:	9307      	strge	r3, [sp, #28]
 800fae8:	9307      	strlt	r3, [sp, #28]
 800faea:	bfb8      	it	lt
 800faec:	9204      	strlt	r2, [sp, #16]
 800faee:	7823      	ldrb	r3, [r4, #0]
 800faf0:	2b2e      	cmp	r3, #46	; 0x2e
 800faf2:	d10c      	bne.n	800fb0e <_vfiprintf_r+0x176>
 800faf4:	7863      	ldrb	r3, [r4, #1]
 800faf6:	2b2a      	cmp	r3, #42	; 0x2a
 800faf8:	d135      	bne.n	800fb66 <_vfiprintf_r+0x1ce>
 800fafa:	9b03      	ldr	r3, [sp, #12]
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	9203      	str	r2, [sp, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	bfb8      	it	lt
 800fb06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb0a:	3402      	adds	r4, #2
 800fb0c:	9305      	str	r3, [sp, #20]
 800fb0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fbe8 <_vfiprintf_r+0x250>
 800fb12:	7821      	ldrb	r1, [r4, #0]
 800fb14:	2203      	movs	r2, #3
 800fb16:	4650      	mov	r0, sl
 800fb18:	f7f0 fb42 	bl	80001a0 <memchr>
 800fb1c:	b140      	cbz	r0, 800fb30 <_vfiprintf_r+0x198>
 800fb1e:	2340      	movs	r3, #64	; 0x40
 800fb20:	eba0 000a 	sub.w	r0, r0, sl
 800fb24:	fa03 f000 	lsl.w	r0, r3, r0
 800fb28:	9b04      	ldr	r3, [sp, #16]
 800fb2a:	4303      	orrs	r3, r0
 800fb2c:	3401      	adds	r4, #1
 800fb2e:	9304      	str	r3, [sp, #16]
 800fb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb34:	482d      	ldr	r0, [pc, #180]	; (800fbec <_vfiprintf_r+0x254>)
 800fb36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb3a:	2206      	movs	r2, #6
 800fb3c:	f7f0 fb30 	bl	80001a0 <memchr>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d03f      	beq.n	800fbc4 <_vfiprintf_r+0x22c>
 800fb44:	4b2a      	ldr	r3, [pc, #168]	; (800fbf0 <_vfiprintf_r+0x258>)
 800fb46:	bb1b      	cbnz	r3, 800fb90 <_vfiprintf_r+0x1f8>
 800fb48:	9b03      	ldr	r3, [sp, #12]
 800fb4a:	3307      	adds	r3, #7
 800fb4c:	f023 0307 	bic.w	r3, r3, #7
 800fb50:	3308      	adds	r3, #8
 800fb52:	9303      	str	r3, [sp, #12]
 800fb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb56:	443b      	add	r3, r7
 800fb58:	9309      	str	r3, [sp, #36]	; 0x24
 800fb5a:	e767      	b.n	800fa2c <_vfiprintf_r+0x94>
 800fb5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb60:	460c      	mov	r4, r1
 800fb62:	2001      	movs	r0, #1
 800fb64:	e7a5      	b.n	800fab2 <_vfiprintf_r+0x11a>
 800fb66:	2300      	movs	r3, #0
 800fb68:	3401      	adds	r4, #1
 800fb6a:	9305      	str	r3, [sp, #20]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	f04f 0c0a 	mov.w	ip, #10
 800fb72:	4620      	mov	r0, r4
 800fb74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb78:	3a30      	subs	r2, #48	; 0x30
 800fb7a:	2a09      	cmp	r2, #9
 800fb7c:	d903      	bls.n	800fb86 <_vfiprintf_r+0x1ee>
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d0c5      	beq.n	800fb0e <_vfiprintf_r+0x176>
 800fb82:	9105      	str	r1, [sp, #20]
 800fb84:	e7c3      	b.n	800fb0e <_vfiprintf_r+0x176>
 800fb86:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e7f0      	b.n	800fb72 <_vfiprintf_r+0x1da>
 800fb90:	ab03      	add	r3, sp, #12
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	462a      	mov	r2, r5
 800fb96:	4b17      	ldr	r3, [pc, #92]	; (800fbf4 <_vfiprintf_r+0x25c>)
 800fb98:	a904      	add	r1, sp, #16
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f000 f82c 	bl	800fbf8 <_printf_float>
 800fba0:	4607      	mov	r7, r0
 800fba2:	1c78      	adds	r0, r7, #1
 800fba4:	d1d6      	bne.n	800fb54 <_vfiprintf_r+0x1bc>
 800fba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fba8:	07d9      	lsls	r1, r3, #31
 800fbaa:	d405      	bmi.n	800fbb8 <_vfiprintf_r+0x220>
 800fbac:	89ab      	ldrh	r3, [r5, #12]
 800fbae:	059a      	lsls	r2, r3, #22
 800fbb0:	d402      	bmi.n	800fbb8 <_vfiprintf_r+0x220>
 800fbb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbb4:	f001 feed 	bl	8011992 <__retarget_lock_release_recursive>
 800fbb8:	89ab      	ldrh	r3, [r5, #12]
 800fbba:	065b      	lsls	r3, r3, #25
 800fbbc:	f53f af12 	bmi.w	800f9e4 <_vfiprintf_r+0x4c>
 800fbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbc2:	e711      	b.n	800f9e8 <_vfiprintf_r+0x50>
 800fbc4:	ab03      	add	r3, sp, #12
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	462a      	mov	r2, r5
 800fbca:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <_vfiprintf_r+0x25c>)
 800fbcc:	a904      	add	r1, sp, #16
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f000 fa3c 	bl	801004c <_printf_i>
 800fbd4:	e7e4      	b.n	800fba0 <_vfiprintf_r+0x208>
 800fbd6:	bf00      	nop
 800fbd8:	0801721c 	.word	0x0801721c
 800fbdc:	0801723c 	.word	0x0801723c
 800fbe0:	080171fc 	.word	0x080171fc
 800fbe4:	080173bd 	.word	0x080173bd
 800fbe8:	080173c3 	.word	0x080173c3
 800fbec:	080173c7 	.word	0x080173c7
 800fbf0:	0800fbf9 	.word	0x0800fbf9
 800fbf4:	080144bb 	.word	0x080144bb

0800fbf8 <_printf_float>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	b091      	sub	sp, #68	; 0x44
 800fbfe:	460c      	mov	r4, r1
 800fc00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800fc04:	4616      	mov	r6, r2
 800fc06:	461f      	mov	r7, r3
 800fc08:	4605      	mov	r5, r0
 800fc0a:	f000 fdad 	bl	8010768 <_localeconv_r>
 800fc0e:	6803      	ldr	r3, [r0, #0]
 800fc10:	9309      	str	r3, [sp, #36]	; 0x24
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f1 f91f 	bl	8000e56 <strlen>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	930e      	str	r3, [sp, #56]	; 0x38
 800fc1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc20:	900a      	str	r0, [sp, #40]	; 0x28
 800fc22:	3307      	adds	r3, #7
 800fc24:	f023 0307 	bic.w	r3, r3, #7
 800fc28:	f103 0208 	add.w	r2, r3, #8
 800fc2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fc30:	f8d4 b000 	ldr.w	fp, [r4]
 800fc34:	f8c8 2000 	str.w	r2, [r8]
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800fc44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800fc48:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc4c:	4b9c      	ldr	r3, [pc, #624]	; (800fec0 <_printf_float+0x2c8>)
 800fc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc52:	4640      	mov	r0, r8
 800fc54:	f7f0 ff8c 	bl	8000b70 <__aeabi_dcmpun>
 800fc58:	bb70      	cbnz	r0, 800fcb8 <_printf_float+0xc0>
 800fc5a:	4b99      	ldr	r3, [pc, #612]	; (800fec0 <_printf_float+0x2c8>)
 800fc5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc62:	4640      	mov	r0, r8
 800fc64:	f7f0 ff24 	bl	8000ab0 <__aeabi_dcmple>
 800fc68:	bb30      	cbnz	r0, 800fcb8 <_printf_float+0xc0>
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4640      	mov	r0, r8
 800fc70:	4651      	mov	r1, sl
 800fc72:	f7f0 ff13 	bl	8000a9c <__aeabi_dcmplt>
 800fc76:	b110      	cbz	r0, 800fc7e <_printf_float+0x86>
 800fc78:	232d      	movs	r3, #45	; 0x2d
 800fc7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc7e:	4b91      	ldr	r3, [pc, #580]	; (800fec4 <_printf_float+0x2cc>)
 800fc80:	4891      	ldr	r0, [pc, #580]	; (800fec8 <_printf_float+0x2d0>)
 800fc82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fc86:	bf94      	ite	ls
 800fc88:	4698      	movls	r8, r3
 800fc8a:	4680      	movhi	r8, r0
 800fc8c:	2303      	movs	r3, #3
 800fc8e:	6123      	str	r3, [r4, #16]
 800fc90:	f02b 0304 	bic.w	r3, fp, #4
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	f04f 0a00 	mov.w	sl, #0
 800fc9a:	9700      	str	r7, [sp, #0]
 800fc9c:	4633      	mov	r3, r6
 800fc9e:	aa0f      	add	r2, sp, #60	; 0x3c
 800fca0:	4621      	mov	r1, r4
 800fca2:	4628      	mov	r0, r5
 800fca4:	f004 fcb9 	bl	801461a <_printf_common>
 800fca8:	3001      	adds	r0, #1
 800fcaa:	f040 808f 	bne.w	800fdcc <_printf_float+0x1d4>
 800fcae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcb2:	b011      	add	sp, #68	; 0x44
 800fcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb8:	4642      	mov	r2, r8
 800fcba:	4653      	mov	r3, sl
 800fcbc:	4640      	mov	r0, r8
 800fcbe:	4651      	mov	r1, sl
 800fcc0:	f7f0 ff56 	bl	8000b70 <__aeabi_dcmpun>
 800fcc4:	b140      	cbz	r0, 800fcd8 <_printf_float+0xe0>
 800fcc6:	f1ba 0f00 	cmp.w	sl, #0
 800fcca:	bfbc      	itt	lt
 800fccc:	232d      	movlt	r3, #45	; 0x2d
 800fcce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fcd2:	487e      	ldr	r0, [pc, #504]	; (800fecc <_printf_float+0x2d4>)
 800fcd4:	4b7e      	ldr	r3, [pc, #504]	; (800fed0 <_printf_float+0x2d8>)
 800fcd6:	e7d4      	b.n	800fc82 <_printf_float+0x8a>
 800fcd8:	6863      	ldr	r3, [r4, #4]
 800fcda:	1c5a      	adds	r2, r3, #1
 800fcdc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fce0:	d142      	bne.n	800fd68 <_printf_float+0x170>
 800fce2:	2306      	movs	r3, #6
 800fce4:	6063      	str	r3, [r4, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	9206      	str	r2, [sp, #24]
 800fcea:	aa0e      	add	r2, sp, #56	; 0x38
 800fcec:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800fcf0:	aa0d      	add	r2, sp, #52	; 0x34
 800fcf2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800fcf6:	9203      	str	r2, [sp, #12]
 800fcf8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800fcfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fd00:	6023      	str	r3, [r4, #0]
 800fd02:	6863      	ldr	r3, [r4, #4]
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	4642      	mov	r2, r8
 800fd08:	4653      	mov	r3, sl
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	910b      	str	r1, [sp, #44]	; 0x2c
 800fd0e:	f004 fbe6 	bl	80144de <__cvt>
 800fd12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd14:	2947      	cmp	r1, #71	; 0x47
 800fd16:	4680      	mov	r8, r0
 800fd18:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fd1a:	d108      	bne.n	800fd2e <_printf_float+0x136>
 800fd1c:	1cc8      	adds	r0, r1, #3
 800fd1e:	db02      	blt.n	800fd26 <_printf_float+0x12e>
 800fd20:	6863      	ldr	r3, [r4, #4]
 800fd22:	4299      	cmp	r1, r3
 800fd24:	dd40      	ble.n	800fda8 <_printf_float+0x1b0>
 800fd26:	f1a9 0902 	sub.w	r9, r9, #2
 800fd2a:	fa5f f989 	uxtb.w	r9, r9
 800fd2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fd32:	d81f      	bhi.n	800fd74 <_printf_float+0x17c>
 800fd34:	3901      	subs	r1, #1
 800fd36:	464a      	mov	r2, r9
 800fd38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd3c:	910d      	str	r1, [sp, #52]	; 0x34
 800fd3e:	f004 fc2e 	bl	801459e <__exponent>
 800fd42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd44:	1813      	adds	r3, r2, r0
 800fd46:	2a01      	cmp	r2, #1
 800fd48:	4682      	mov	sl, r0
 800fd4a:	6123      	str	r3, [r4, #16]
 800fd4c:	dc02      	bgt.n	800fd54 <_printf_float+0x15c>
 800fd4e:	6822      	ldr	r2, [r4, #0]
 800fd50:	07d2      	lsls	r2, r2, #31
 800fd52:	d501      	bpl.n	800fd58 <_printf_float+0x160>
 800fd54:	3301      	adds	r3, #1
 800fd56:	6123      	str	r3, [r4, #16]
 800fd58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d09c      	beq.n	800fc9a <_printf_float+0xa2>
 800fd60:	232d      	movs	r3, #45	; 0x2d
 800fd62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd66:	e798      	b.n	800fc9a <_printf_float+0xa2>
 800fd68:	2947      	cmp	r1, #71	; 0x47
 800fd6a:	d1bc      	bne.n	800fce6 <_printf_float+0xee>
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1ba      	bne.n	800fce6 <_printf_float+0xee>
 800fd70:	2301      	movs	r3, #1
 800fd72:	e7b7      	b.n	800fce4 <_printf_float+0xec>
 800fd74:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fd78:	d118      	bne.n	800fdac <_printf_float+0x1b4>
 800fd7a:	2900      	cmp	r1, #0
 800fd7c:	6863      	ldr	r3, [r4, #4]
 800fd7e:	dd0b      	ble.n	800fd98 <_printf_float+0x1a0>
 800fd80:	6121      	str	r1, [r4, #16]
 800fd82:	b913      	cbnz	r3, 800fd8a <_printf_float+0x192>
 800fd84:	6822      	ldr	r2, [r4, #0]
 800fd86:	07d0      	lsls	r0, r2, #31
 800fd88:	d502      	bpl.n	800fd90 <_printf_float+0x198>
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	440b      	add	r3, r1
 800fd8e:	6123      	str	r3, [r4, #16]
 800fd90:	65a1      	str	r1, [r4, #88]	; 0x58
 800fd92:	f04f 0a00 	mov.w	sl, #0
 800fd96:	e7df      	b.n	800fd58 <_printf_float+0x160>
 800fd98:	b913      	cbnz	r3, 800fda0 <_printf_float+0x1a8>
 800fd9a:	6822      	ldr	r2, [r4, #0]
 800fd9c:	07d2      	lsls	r2, r2, #31
 800fd9e:	d501      	bpl.n	800fda4 <_printf_float+0x1ac>
 800fda0:	3302      	adds	r3, #2
 800fda2:	e7f4      	b.n	800fd8e <_printf_float+0x196>
 800fda4:	2301      	movs	r3, #1
 800fda6:	e7f2      	b.n	800fd8e <_printf_float+0x196>
 800fda8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fdac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdae:	4299      	cmp	r1, r3
 800fdb0:	db05      	blt.n	800fdbe <_printf_float+0x1c6>
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	6121      	str	r1, [r4, #16]
 800fdb6:	07d8      	lsls	r0, r3, #31
 800fdb8:	d5ea      	bpl.n	800fd90 <_printf_float+0x198>
 800fdba:	1c4b      	adds	r3, r1, #1
 800fdbc:	e7e7      	b.n	800fd8e <_printf_float+0x196>
 800fdbe:	2900      	cmp	r1, #0
 800fdc0:	bfd4      	ite	le
 800fdc2:	f1c1 0202 	rsble	r2, r1, #2
 800fdc6:	2201      	movgt	r2, #1
 800fdc8:	4413      	add	r3, r2
 800fdca:	e7e0      	b.n	800fd8e <_printf_float+0x196>
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	055a      	lsls	r2, r3, #21
 800fdd0:	d407      	bmi.n	800fde2 <_printf_float+0x1ea>
 800fdd2:	6923      	ldr	r3, [r4, #16]
 800fdd4:	4642      	mov	r2, r8
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4628      	mov	r0, r5
 800fdda:	47b8      	blx	r7
 800fddc:	3001      	adds	r0, #1
 800fdde:	d12b      	bne.n	800fe38 <_printf_float+0x240>
 800fde0:	e765      	b.n	800fcae <_printf_float+0xb6>
 800fde2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fde6:	f240 80dc 	bls.w	800ffa2 <_printf_float+0x3aa>
 800fdea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fdee:	2200      	movs	r2, #0
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	f7f0 fe49 	bl	8000a88 <__aeabi_dcmpeq>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d033      	beq.n	800fe62 <_printf_float+0x26a>
 800fdfa:	4a36      	ldr	r2, [pc, #216]	; (800fed4 <_printf_float+0x2dc>)
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	4631      	mov	r1, r6
 800fe00:	4628      	mov	r0, r5
 800fe02:	47b8      	blx	r7
 800fe04:	3001      	adds	r0, #1
 800fe06:	f43f af52 	beq.w	800fcae <_printf_float+0xb6>
 800fe0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	db02      	blt.n	800fe18 <_printf_float+0x220>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	07d8      	lsls	r0, r3, #31
 800fe16:	d50f      	bpl.n	800fe38 <_printf_float+0x240>
 800fe18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe1c:	4631      	mov	r1, r6
 800fe1e:	4628      	mov	r0, r5
 800fe20:	47b8      	blx	r7
 800fe22:	3001      	adds	r0, #1
 800fe24:	f43f af43 	beq.w	800fcae <_printf_float+0xb6>
 800fe28:	f04f 0800 	mov.w	r8, #0
 800fe2c:	f104 091a 	add.w	r9, r4, #26
 800fe30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe32:	3b01      	subs	r3, #1
 800fe34:	4543      	cmp	r3, r8
 800fe36:	dc09      	bgt.n	800fe4c <_printf_float+0x254>
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	079b      	lsls	r3, r3, #30
 800fe3c:	f100 8101 	bmi.w	8010042 <_printf_float+0x44a>
 800fe40:	68e0      	ldr	r0, [r4, #12]
 800fe42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe44:	4298      	cmp	r0, r3
 800fe46:	bfb8      	it	lt
 800fe48:	4618      	movlt	r0, r3
 800fe4a:	e732      	b.n	800fcb2 <_printf_float+0xba>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	464a      	mov	r2, r9
 800fe50:	4631      	mov	r1, r6
 800fe52:	4628      	mov	r0, r5
 800fe54:	47b8      	blx	r7
 800fe56:	3001      	adds	r0, #1
 800fe58:	f43f af29 	beq.w	800fcae <_printf_float+0xb6>
 800fe5c:	f108 0801 	add.w	r8, r8, #1
 800fe60:	e7e6      	b.n	800fe30 <_printf_float+0x238>
 800fe62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dc37      	bgt.n	800fed8 <_printf_float+0x2e0>
 800fe68:	4a1a      	ldr	r2, [pc, #104]	; (800fed4 <_printf_float+0x2dc>)
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	4628      	mov	r0, r5
 800fe70:	47b8      	blx	r7
 800fe72:	3001      	adds	r0, #1
 800fe74:	f43f af1b 	beq.w	800fcae <_printf_float+0xb6>
 800fe78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	d102      	bne.n	800fe86 <_printf_float+0x28e>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	07d9      	lsls	r1, r3, #31
 800fe84:	d5d8      	bpl.n	800fe38 <_printf_float+0x240>
 800fe86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe8a:	4631      	mov	r1, r6
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	47b8      	blx	r7
 800fe90:	3001      	adds	r0, #1
 800fe92:	f43f af0c 	beq.w	800fcae <_printf_float+0xb6>
 800fe96:	f04f 0900 	mov.w	r9, #0
 800fe9a:	f104 0a1a 	add.w	sl, r4, #26
 800fe9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fea0:	425b      	negs	r3, r3
 800fea2:	454b      	cmp	r3, r9
 800fea4:	dc01      	bgt.n	800feaa <_printf_float+0x2b2>
 800fea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fea8:	e794      	b.n	800fdd4 <_printf_float+0x1dc>
 800feaa:	2301      	movs	r3, #1
 800feac:	4652      	mov	r2, sl
 800feae:	4631      	mov	r1, r6
 800feb0:	4628      	mov	r0, r5
 800feb2:	47b8      	blx	r7
 800feb4:	3001      	adds	r0, #1
 800feb6:	f43f aefa 	beq.w	800fcae <_printf_float+0xb6>
 800feba:	f109 0901 	add.w	r9, r9, #1
 800febe:	e7ee      	b.n	800fe9e <_printf_float+0x2a6>
 800fec0:	7fefffff 	.word	0x7fefffff
 800fec4:	080173ce 	.word	0x080173ce
 800fec8:	080173d2 	.word	0x080173d2
 800fecc:	080173da 	.word	0x080173da
 800fed0:	080173d6 	.word	0x080173d6
 800fed4:	080173de 	.word	0x080173de
 800fed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800feda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fedc:	429a      	cmp	r2, r3
 800fede:	bfa8      	it	ge
 800fee0:	461a      	movge	r2, r3
 800fee2:	2a00      	cmp	r2, #0
 800fee4:	4691      	mov	r9, r2
 800fee6:	dc37      	bgt.n	800ff58 <_printf_float+0x360>
 800fee8:	f04f 0b00 	mov.w	fp, #0
 800feec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fef0:	f104 021a 	add.w	r2, r4, #26
 800fef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800fef8:	ebaa 0309 	sub.w	r3, sl, r9
 800fefc:	455b      	cmp	r3, fp
 800fefe:	dc33      	bgt.n	800ff68 <_printf_float+0x370>
 800ff00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff04:	429a      	cmp	r2, r3
 800ff06:	db3b      	blt.n	800ff80 <_printf_float+0x388>
 800ff08:	6823      	ldr	r3, [r4, #0]
 800ff0a:	07da      	lsls	r2, r3, #31
 800ff0c:	d438      	bmi.n	800ff80 <_printf_float+0x388>
 800ff0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff10:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ff12:	eba3 020a 	sub.w	r2, r3, sl
 800ff16:	eba3 0901 	sub.w	r9, r3, r1
 800ff1a:	4591      	cmp	r9, r2
 800ff1c:	bfa8      	it	ge
 800ff1e:	4691      	movge	r9, r2
 800ff20:	f1b9 0f00 	cmp.w	r9, #0
 800ff24:	dc34      	bgt.n	800ff90 <_printf_float+0x398>
 800ff26:	f04f 0800 	mov.w	r8, #0
 800ff2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff2e:	f104 0a1a 	add.w	sl, r4, #26
 800ff32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ff36:	1a9b      	subs	r3, r3, r2
 800ff38:	eba3 0309 	sub.w	r3, r3, r9
 800ff3c:	4543      	cmp	r3, r8
 800ff3e:	f77f af7b 	ble.w	800fe38 <_printf_float+0x240>
 800ff42:	2301      	movs	r3, #1
 800ff44:	4652      	mov	r2, sl
 800ff46:	4631      	mov	r1, r6
 800ff48:	4628      	mov	r0, r5
 800ff4a:	47b8      	blx	r7
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	f43f aeae 	beq.w	800fcae <_printf_float+0xb6>
 800ff52:	f108 0801 	add.w	r8, r8, #1
 800ff56:	e7ec      	b.n	800ff32 <_printf_float+0x33a>
 800ff58:	4613      	mov	r3, r2
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	4628      	mov	r0, r5
 800ff60:	47b8      	blx	r7
 800ff62:	3001      	adds	r0, #1
 800ff64:	d1c0      	bne.n	800fee8 <_printf_float+0x2f0>
 800ff66:	e6a2      	b.n	800fcae <_printf_float+0xb6>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ff70:	47b8      	blx	r7
 800ff72:	3001      	adds	r0, #1
 800ff74:	f43f ae9b 	beq.w	800fcae <_printf_float+0xb6>
 800ff78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff7a:	f10b 0b01 	add.w	fp, fp, #1
 800ff7e:	e7b9      	b.n	800fef4 <_printf_float+0x2fc>
 800ff80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff84:	4631      	mov	r1, r6
 800ff86:	4628      	mov	r0, r5
 800ff88:	47b8      	blx	r7
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	d1bf      	bne.n	800ff0e <_printf_float+0x316>
 800ff8e:	e68e      	b.n	800fcae <_printf_float+0xb6>
 800ff90:	464b      	mov	r3, r9
 800ff92:	eb08 020a 	add.w	r2, r8, sl
 800ff96:	4631      	mov	r1, r6
 800ff98:	4628      	mov	r0, r5
 800ff9a:	47b8      	blx	r7
 800ff9c:	3001      	adds	r0, #1
 800ff9e:	d1c2      	bne.n	800ff26 <_printf_float+0x32e>
 800ffa0:	e685      	b.n	800fcae <_printf_float+0xb6>
 800ffa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffa4:	2a01      	cmp	r2, #1
 800ffa6:	dc01      	bgt.n	800ffac <_printf_float+0x3b4>
 800ffa8:	07db      	lsls	r3, r3, #31
 800ffaa:	d537      	bpl.n	801001c <_printf_float+0x424>
 800ffac:	2301      	movs	r3, #1
 800ffae:	4642      	mov	r2, r8
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	47b8      	blx	r7
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	f43f ae79 	beq.w	800fcae <_printf_float+0xb6>
 800ffbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	f43f ae71 	beq.w	800fcae <_printf_float+0xb6>
 800ffcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	f7f0 fd58 	bl	8000a88 <__aeabi_dcmpeq>
 800ffd8:	b9d8      	cbnz	r0, 8010012 <_printf_float+0x41a>
 800ffda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffdc:	f108 0201 	add.w	r2, r8, #1
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	4631      	mov	r1, r6
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	47b8      	blx	r7
 800ffe8:	3001      	adds	r0, #1
 800ffea:	d10e      	bne.n	801000a <_printf_float+0x412>
 800ffec:	e65f      	b.n	800fcae <_printf_float+0xb6>
 800ffee:	2301      	movs	r3, #1
 800fff0:	464a      	mov	r2, r9
 800fff2:	4631      	mov	r1, r6
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b8      	blx	r7
 800fff8:	3001      	adds	r0, #1
 800fffa:	f43f ae58 	beq.w	800fcae <_printf_float+0xb6>
 800fffe:	f108 0801 	add.w	r8, r8, #1
 8010002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010004:	3b01      	subs	r3, #1
 8010006:	4543      	cmp	r3, r8
 8010008:	dcf1      	bgt.n	800ffee <_printf_float+0x3f6>
 801000a:	4653      	mov	r3, sl
 801000c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010010:	e6e1      	b.n	800fdd6 <_printf_float+0x1de>
 8010012:	f04f 0800 	mov.w	r8, #0
 8010016:	f104 091a 	add.w	r9, r4, #26
 801001a:	e7f2      	b.n	8010002 <_printf_float+0x40a>
 801001c:	2301      	movs	r3, #1
 801001e:	4642      	mov	r2, r8
 8010020:	e7df      	b.n	800ffe2 <_printf_float+0x3ea>
 8010022:	2301      	movs	r3, #1
 8010024:	464a      	mov	r2, r9
 8010026:	4631      	mov	r1, r6
 8010028:	4628      	mov	r0, r5
 801002a:	47b8      	blx	r7
 801002c:	3001      	adds	r0, #1
 801002e:	f43f ae3e 	beq.w	800fcae <_printf_float+0xb6>
 8010032:	f108 0801 	add.w	r8, r8, #1
 8010036:	68e3      	ldr	r3, [r4, #12]
 8010038:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801003a:	1a5b      	subs	r3, r3, r1
 801003c:	4543      	cmp	r3, r8
 801003e:	dcf0      	bgt.n	8010022 <_printf_float+0x42a>
 8010040:	e6fe      	b.n	800fe40 <_printf_float+0x248>
 8010042:	f04f 0800 	mov.w	r8, #0
 8010046:	f104 0919 	add.w	r9, r4, #25
 801004a:	e7f4      	b.n	8010036 <_printf_float+0x43e>

0801004c <_printf_i>:
 801004c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010050:	7e0f      	ldrb	r7, [r1, #24]
 8010052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010054:	2f78      	cmp	r7, #120	; 0x78
 8010056:	4691      	mov	r9, r2
 8010058:	4680      	mov	r8, r0
 801005a:	460c      	mov	r4, r1
 801005c:	469a      	mov	sl, r3
 801005e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010062:	d807      	bhi.n	8010074 <_printf_i+0x28>
 8010064:	2f62      	cmp	r7, #98	; 0x62
 8010066:	d80a      	bhi.n	801007e <_printf_i+0x32>
 8010068:	2f00      	cmp	r7, #0
 801006a:	f000 80d8 	beq.w	801021e <_printf_i+0x1d2>
 801006e:	2f58      	cmp	r7, #88	; 0x58
 8010070:	f000 80a3 	beq.w	80101ba <_printf_i+0x16e>
 8010074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801007c:	e03a      	b.n	80100f4 <_printf_i+0xa8>
 801007e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010082:	2b15      	cmp	r3, #21
 8010084:	d8f6      	bhi.n	8010074 <_printf_i+0x28>
 8010086:	a101      	add	r1, pc, #4	; (adr r1, 801008c <_printf_i+0x40>)
 8010088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801008c:	080100e5 	.word	0x080100e5
 8010090:	080100f9 	.word	0x080100f9
 8010094:	08010075 	.word	0x08010075
 8010098:	08010075 	.word	0x08010075
 801009c:	08010075 	.word	0x08010075
 80100a0:	08010075 	.word	0x08010075
 80100a4:	080100f9 	.word	0x080100f9
 80100a8:	08010075 	.word	0x08010075
 80100ac:	08010075 	.word	0x08010075
 80100b0:	08010075 	.word	0x08010075
 80100b4:	08010075 	.word	0x08010075
 80100b8:	08010205 	.word	0x08010205
 80100bc:	08010129 	.word	0x08010129
 80100c0:	080101e7 	.word	0x080101e7
 80100c4:	08010075 	.word	0x08010075
 80100c8:	08010075 	.word	0x08010075
 80100cc:	08010227 	.word	0x08010227
 80100d0:	08010075 	.word	0x08010075
 80100d4:	08010129 	.word	0x08010129
 80100d8:	08010075 	.word	0x08010075
 80100dc:	08010075 	.word	0x08010075
 80100e0:	080101ef 	.word	0x080101ef
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	1d1a      	adds	r2, r3, #4
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	602a      	str	r2, [r5, #0]
 80100ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100f4:	2301      	movs	r3, #1
 80100f6:	e0a3      	b.n	8010240 <_printf_i+0x1f4>
 80100f8:	6820      	ldr	r0, [r4, #0]
 80100fa:	6829      	ldr	r1, [r5, #0]
 80100fc:	0606      	lsls	r6, r0, #24
 80100fe:	f101 0304 	add.w	r3, r1, #4
 8010102:	d50a      	bpl.n	801011a <_printf_i+0xce>
 8010104:	680e      	ldr	r6, [r1, #0]
 8010106:	602b      	str	r3, [r5, #0]
 8010108:	2e00      	cmp	r6, #0
 801010a:	da03      	bge.n	8010114 <_printf_i+0xc8>
 801010c:	232d      	movs	r3, #45	; 0x2d
 801010e:	4276      	negs	r6, r6
 8010110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010114:	485e      	ldr	r0, [pc, #376]	; (8010290 <_printf_i+0x244>)
 8010116:	230a      	movs	r3, #10
 8010118:	e019      	b.n	801014e <_printf_i+0x102>
 801011a:	680e      	ldr	r6, [r1, #0]
 801011c:	602b      	str	r3, [r5, #0]
 801011e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010122:	bf18      	it	ne
 8010124:	b236      	sxthne	r6, r6
 8010126:	e7ef      	b.n	8010108 <_printf_i+0xbc>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	1d19      	adds	r1, r3, #4
 801012e:	6029      	str	r1, [r5, #0]
 8010130:	0601      	lsls	r1, r0, #24
 8010132:	d501      	bpl.n	8010138 <_printf_i+0xec>
 8010134:	681e      	ldr	r6, [r3, #0]
 8010136:	e002      	b.n	801013e <_printf_i+0xf2>
 8010138:	0646      	lsls	r6, r0, #25
 801013a:	d5fb      	bpl.n	8010134 <_printf_i+0xe8>
 801013c:	881e      	ldrh	r6, [r3, #0]
 801013e:	4854      	ldr	r0, [pc, #336]	; (8010290 <_printf_i+0x244>)
 8010140:	2f6f      	cmp	r7, #111	; 0x6f
 8010142:	bf0c      	ite	eq
 8010144:	2308      	moveq	r3, #8
 8010146:	230a      	movne	r3, #10
 8010148:	2100      	movs	r1, #0
 801014a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801014e:	6865      	ldr	r5, [r4, #4]
 8010150:	60a5      	str	r5, [r4, #8]
 8010152:	2d00      	cmp	r5, #0
 8010154:	bfa2      	ittt	ge
 8010156:	6821      	ldrge	r1, [r4, #0]
 8010158:	f021 0104 	bicge.w	r1, r1, #4
 801015c:	6021      	strge	r1, [r4, #0]
 801015e:	b90e      	cbnz	r6, 8010164 <_printf_i+0x118>
 8010160:	2d00      	cmp	r5, #0
 8010162:	d04d      	beq.n	8010200 <_printf_i+0x1b4>
 8010164:	4615      	mov	r5, r2
 8010166:	fbb6 f1f3 	udiv	r1, r6, r3
 801016a:	fb03 6711 	mls	r7, r3, r1, r6
 801016e:	5dc7      	ldrb	r7, [r0, r7]
 8010170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010174:	4637      	mov	r7, r6
 8010176:	42bb      	cmp	r3, r7
 8010178:	460e      	mov	r6, r1
 801017a:	d9f4      	bls.n	8010166 <_printf_i+0x11a>
 801017c:	2b08      	cmp	r3, #8
 801017e:	d10b      	bne.n	8010198 <_printf_i+0x14c>
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	07de      	lsls	r6, r3, #31
 8010184:	d508      	bpl.n	8010198 <_printf_i+0x14c>
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	6861      	ldr	r1, [r4, #4]
 801018a:	4299      	cmp	r1, r3
 801018c:	bfde      	ittt	le
 801018e:	2330      	movle	r3, #48	; 0x30
 8010190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010194:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010198:	1b52      	subs	r2, r2, r5
 801019a:	6122      	str	r2, [r4, #16]
 801019c:	f8cd a000 	str.w	sl, [sp]
 80101a0:	464b      	mov	r3, r9
 80101a2:	aa03      	add	r2, sp, #12
 80101a4:	4621      	mov	r1, r4
 80101a6:	4640      	mov	r0, r8
 80101a8:	f004 fa37 	bl	801461a <_printf_common>
 80101ac:	3001      	adds	r0, #1
 80101ae:	d14c      	bne.n	801024a <_printf_i+0x1fe>
 80101b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101b4:	b004      	add	sp, #16
 80101b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ba:	4835      	ldr	r0, [pc, #212]	; (8010290 <_printf_i+0x244>)
 80101bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80101c0:	6829      	ldr	r1, [r5, #0]
 80101c2:	6823      	ldr	r3, [r4, #0]
 80101c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80101c8:	6029      	str	r1, [r5, #0]
 80101ca:	061d      	lsls	r5, r3, #24
 80101cc:	d514      	bpl.n	80101f8 <_printf_i+0x1ac>
 80101ce:	07df      	lsls	r7, r3, #31
 80101d0:	bf44      	itt	mi
 80101d2:	f043 0320 	orrmi.w	r3, r3, #32
 80101d6:	6023      	strmi	r3, [r4, #0]
 80101d8:	b91e      	cbnz	r6, 80101e2 <_printf_i+0x196>
 80101da:	6823      	ldr	r3, [r4, #0]
 80101dc:	f023 0320 	bic.w	r3, r3, #32
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	2310      	movs	r3, #16
 80101e4:	e7b0      	b.n	8010148 <_printf_i+0xfc>
 80101e6:	6823      	ldr	r3, [r4, #0]
 80101e8:	f043 0320 	orr.w	r3, r3, #32
 80101ec:	6023      	str	r3, [r4, #0]
 80101ee:	2378      	movs	r3, #120	; 0x78
 80101f0:	4828      	ldr	r0, [pc, #160]	; (8010294 <_printf_i+0x248>)
 80101f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101f6:	e7e3      	b.n	80101c0 <_printf_i+0x174>
 80101f8:	0659      	lsls	r1, r3, #25
 80101fa:	bf48      	it	mi
 80101fc:	b2b6      	uxthmi	r6, r6
 80101fe:	e7e6      	b.n	80101ce <_printf_i+0x182>
 8010200:	4615      	mov	r5, r2
 8010202:	e7bb      	b.n	801017c <_printf_i+0x130>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	6826      	ldr	r6, [r4, #0]
 8010208:	6961      	ldr	r1, [r4, #20]
 801020a:	1d18      	adds	r0, r3, #4
 801020c:	6028      	str	r0, [r5, #0]
 801020e:	0635      	lsls	r5, r6, #24
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	d501      	bpl.n	8010218 <_printf_i+0x1cc>
 8010214:	6019      	str	r1, [r3, #0]
 8010216:	e002      	b.n	801021e <_printf_i+0x1d2>
 8010218:	0670      	lsls	r0, r6, #25
 801021a:	d5fb      	bpl.n	8010214 <_printf_i+0x1c8>
 801021c:	8019      	strh	r1, [r3, #0]
 801021e:	2300      	movs	r3, #0
 8010220:	6123      	str	r3, [r4, #16]
 8010222:	4615      	mov	r5, r2
 8010224:	e7ba      	b.n	801019c <_printf_i+0x150>
 8010226:	682b      	ldr	r3, [r5, #0]
 8010228:	1d1a      	adds	r2, r3, #4
 801022a:	602a      	str	r2, [r5, #0]
 801022c:	681d      	ldr	r5, [r3, #0]
 801022e:	6862      	ldr	r2, [r4, #4]
 8010230:	2100      	movs	r1, #0
 8010232:	4628      	mov	r0, r5
 8010234:	f7ef ffb4 	bl	80001a0 <memchr>
 8010238:	b108      	cbz	r0, 801023e <_printf_i+0x1f2>
 801023a:	1b40      	subs	r0, r0, r5
 801023c:	6060      	str	r0, [r4, #4]
 801023e:	6863      	ldr	r3, [r4, #4]
 8010240:	6123      	str	r3, [r4, #16]
 8010242:	2300      	movs	r3, #0
 8010244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010248:	e7a8      	b.n	801019c <_printf_i+0x150>
 801024a:	6923      	ldr	r3, [r4, #16]
 801024c:	462a      	mov	r2, r5
 801024e:	4649      	mov	r1, r9
 8010250:	4640      	mov	r0, r8
 8010252:	47d0      	blx	sl
 8010254:	3001      	adds	r0, #1
 8010256:	d0ab      	beq.n	80101b0 <_printf_i+0x164>
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	079b      	lsls	r3, r3, #30
 801025c:	d413      	bmi.n	8010286 <_printf_i+0x23a>
 801025e:	68e0      	ldr	r0, [r4, #12]
 8010260:	9b03      	ldr	r3, [sp, #12]
 8010262:	4298      	cmp	r0, r3
 8010264:	bfb8      	it	lt
 8010266:	4618      	movlt	r0, r3
 8010268:	e7a4      	b.n	80101b4 <_printf_i+0x168>
 801026a:	2301      	movs	r3, #1
 801026c:	4632      	mov	r2, r6
 801026e:	4649      	mov	r1, r9
 8010270:	4640      	mov	r0, r8
 8010272:	47d0      	blx	sl
 8010274:	3001      	adds	r0, #1
 8010276:	d09b      	beq.n	80101b0 <_printf_i+0x164>
 8010278:	3501      	adds	r5, #1
 801027a:	68e3      	ldr	r3, [r4, #12]
 801027c:	9903      	ldr	r1, [sp, #12]
 801027e:	1a5b      	subs	r3, r3, r1
 8010280:	42ab      	cmp	r3, r5
 8010282:	dcf2      	bgt.n	801026a <_printf_i+0x21e>
 8010284:	e7eb      	b.n	801025e <_printf_i+0x212>
 8010286:	2500      	movs	r5, #0
 8010288:	f104 0619 	add.w	r6, r4, #25
 801028c:	e7f5      	b.n	801027a <_printf_i+0x22e>
 801028e:	bf00      	nop
 8010290:	080173e0 	.word	0x080173e0
 8010294:	080173f1 	.word	0x080173f1

08010298 <_sbrk_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4d06      	ldr	r5, [pc, #24]	; (80102b4 <_sbrk_r+0x1c>)
 801029c:	2300      	movs	r3, #0
 801029e:	4604      	mov	r4, r0
 80102a0:	4608      	mov	r0, r1
 80102a2:	602b      	str	r3, [r5, #0]
 80102a4:	f7f4 fd1a 	bl	8004cdc <_sbrk>
 80102a8:	1c43      	adds	r3, r0, #1
 80102aa:	d102      	bne.n	80102b2 <_sbrk_r+0x1a>
 80102ac:	682b      	ldr	r3, [r5, #0]
 80102ae:	b103      	cbz	r3, 80102b2 <_sbrk_r+0x1a>
 80102b0:	6023      	str	r3, [r4, #0]
 80102b2:	bd38      	pop	{r3, r4, r5, pc}
 80102b4:	20001a88 	.word	0x20001a88

080102b8 <raise>:
 80102b8:	4b02      	ldr	r3, [pc, #8]	; (80102c4 <raise+0xc>)
 80102ba:	4601      	mov	r1, r0
 80102bc:	6818      	ldr	r0, [r3, #0]
 80102be:	f004 ba19 	b.w	80146f4 <_raise_r>
 80102c2:	bf00      	nop
 80102c4:	200004ac 	.word	0x200004ac

080102c8 <_kill_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d07      	ldr	r5, [pc, #28]	; (80102e8 <_kill_r+0x20>)
 80102cc:	2300      	movs	r3, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	4608      	mov	r0, r1
 80102d2:	4611      	mov	r1, r2
 80102d4:	602b      	str	r3, [r5, #0]
 80102d6:	f001 fb42 	bl	801195e <_kill>
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	d102      	bne.n	80102e4 <_kill_r+0x1c>
 80102de:	682b      	ldr	r3, [r5, #0]
 80102e0:	b103      	cbz	r3, 80102e4 <_kill_r+0x1c>
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	bd38      	pop	{r3, r4, r5, pc}
 80102e6:	bf00      	nop
 80102e8:	20001a88 	.word	0x20001a88

080102ec <__swbuf_r>:
 80102ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ee:	460e      	mov	r6, r1
 80102f0:	4614      	mov	r4, r2
 80102f2:	4605      	mov	r5, r0
 80102f4:	b118      	cbz	r0, 80102fe <__swbuf_r+0x12>
 80102f6:	6983      	ldr	r3, [r0, #24]
 80102f8:	b90b      	cbnz	r3, 80102fe <__swbuf_r+0x12>
 80102fa:	f000 f9b7 	bl	801066c <__sinit>
 80102fe:	4b21      	ldr	r3, [pc, #132]	; (8010384 <__swbuf_r+0x98>)
 8010300:	429c      	cmp	r4, r3
 8010302:	d12b      	bne.n	801035c <__swbuf_r+0x70>
 8010304:	686c      	ldr	r4, [r5, #4]
 8010306:	69a3      	ldr	r3, [r4, #24]
 8010308:	60a3      	str	r3, [r4, #8]
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	071a      	lsls	r2, r3, #28
 801030e:	d52f      	bpl.n	8010370 <__swbuf_r+0x84>
 8010310:	6923      	ldr	r3, [r4, #16]
 8010312:	b36b      	cbz	r3, 8010370 <__swbuf_r+0x84>
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	6820      	ldr	r0, [r4, #0]
 8010318:	1ac0      	subs	r0, r0, r3
 801031a:	6963      	ldr	r3, [r4, #20]
 801031c:	b2f6      	uxtb	r6, r6
 801031e:	4283      	cmp	r3, r0
 8010320:	4637      	mov	r7, r6
 8010322:	dc04      	bgt.n	801032e <__swbuf_r+0x42>
 8010324:	4621      	mov	r1, r4
 8010326:	4628      	mov	r0, r5
 8010328:	f000 f922 	bl	8010570 <_fflush_r>
 801032c:	bb30      	cbnz	r0, 801037c <__swbuf_r+0x90>
 801032e:	68a3      	ldr	r3, [r4, #8]
 8010330:	3b01      	subs	r3, #1
 8010332:	60a3      	str	r3, [r4, #8]
 8010334:	6823      	ldr	r3, [r4, #0]
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	6022      	str	r2, [r4, #0]
 801033a:	701e      	strb	r6, [r3, #0]
 801033c:	6963      	ldr	r3, [r4, #20]
 801033e:	3001      	adds	r0, #1
 8010340:	4283      	cmp	r3, r0
 8010342:	d004      	beq.n	801034e <__swbuf_r+0x62>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	07db      	lsls	r3, r3, #31
 8010348:	d506      	bpl.n	8010358 <__swbuf_r+0x6c>
 801034a:	2e0a      	cmp	r6, #10
 801034c:	d104      	bne.n	8010358 <__swbuf_r+0x6c>
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f000 f90d 	bl	8010570 <_fflush_r>
 8010356:	b988      	cbnz	r0, 801037c <__swbuf_r+0x90>
 8010358:	4638      	mov	r0, r7
 801035a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801035c:	4b0a      	ldr	r3, [pc, #40]	; (8010388 <__swbuf_r+0x9c>)
 801035e:	429c      	cmp	r4, r3
 8010360:	d101      	bne.n	8010366 <__swbuf_r+0x7a>
 8010362:	68ac      	ldr	r4, [r5, #8]
 8010364:	e7cf      	b.n	8010306 <__swbuf_r+0x1a>
 8010366:	4b09      	ldr	r3, [pc, #36]	; (801038c <__swbuf_r+0xa0>)
 8010368:	429c      	cmp	r4, r3
 801036a:	bf08      	it	eq
 801036c:	68ec      	ldreq	r4, [r5, #12]
 801036e:	e7ca      	b.n	8010306 <__swbuf_r+0x1a>
 8010370:	4621      	mov	r1, r4
 8010372:	4628      	mov	r0, r5
 8010374:	f000 f80c 	bl	8010390 <__swsetup_r>
 8010378:	2800      	cmp	r0, #0
 801037a:	d0cb      	beq.n	8010314 <__swbuf_r+0x28>
 801037c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010380:	e7ea      	b.n	8010358 <__swbuf_r+0x6c>
 8010382:	bf00      	nop
 8010384:	0801721c 	.word	0x0801721c
 8010388:	0801723c 	.word	0x0801723c
 801038c:	080171fc 	.word	0x080171fc

08010390 <__swsetup_r>:
 8010390:	4b32      	ldr	r3, [pc, #200]	; (801045c <__swsetup_r+0xcc>)
 8010392:	b570      	push	{r4, r5, r6, lr}
 8010394:	681d      	ldr	r5, [r3, #0]
 8010396:	4606      	mov	r6, r0
 8010398:	460c      	mov	r4, r1
 801039a:	b125      	cbz	r5, 80103a6 <__swsetup_r+0x16>
 801039c:	69ab      	ldr	r3, [r5, #24]
 801039e:	b913      	cbnz	r3, 80103a6 <__swsetup_r+0x16>
 80103a0:	4628      	mov	r0, r5
 80103a2:	f000 f963 	bl	801066c <__sinit>
 80103a6:	4b2e      	ldr	r3, [pc, #184]	; (8010460 <__swsetup_r+0xd0>)
 80103a8:	429c      	cmp	r4, r3
 80103aa:	d10f      	bne.n	80103cc <__swsetup_r+0x3c>
 80103ac:	686c      	ldr	r4, [r5, #4]
 80103ae:	89a3      	ldrh	r3, [r4, #12]
 80103b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103b4:	0719      	lsls	r1, r3, #28
 80103b6:	d42c      	bmi.n	8010412 <__swsetup_r+0x82>
 80103b8:	06dd      	lsls	r5, r3, #27
 80103ba:	d411      	bmi.n	80103e0 <__swsetup_r+0x50>
 80103bc:	2309      	movs	r3, #9
 80103be:	6033      	str	r3, [r6, #0]
 80103c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103c4:	81a3      	strh	r3, [r4, #12]
 80103c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103ca:	e03e      	b.n	801044a <__swsetup_r+0xba>
 80103cc:	4b25      	ldr	r3, [pc, #148]	; (8010464 <__swsetup_r+0xd4>)
 80103ce:	429c      	cmp	r4, r3
 80103d0:	d101      	bne.n	80103d6 <__swsetup_r+0x46>
 80103d2:	68ac      	ldr	r4, [r5, #8]
 80103d4:	e7eb      	b.n	80103ae <__swsetup_r+0x1e>
 80103d6:	4b24      	ldr	r3, [pc, #144]	; (8010468 <__swsetup_r+0xd8>)
 80103d8:	429c      	cmp	r4, r3
 80103da:	bf08      	it	eq
 80103dc:	68ec      	ldreq	r4, [r5, #12]
 80103de:	e7e6      	b.n	80103ae <__swsetup_r+0x1e>
 80103e0:	0758      	lsls	r0, r3, #29
 80103e2:	d512      	bpl.n	801040a <__swsetup_r+0x7a>
 80103e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103e6:	b141      	cbz	r1, 80103fa <__swsetup_r+0x6a>
 80103e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103ec:	4299      	cmp	r1, r3
 80103ee:	d002      	beq.n	80103f6 <__swsetup_r+0x66>
 80103f0:	4630      	mov	r0, r6
 80103f2:	f7ff fa2d 	bl	800f850 <_free_r>
 80103f6:	2300      	movs	r3, #0
 80103f8:	6363      	str	r3, [r4, #52]	; 0x34
 80103fa:	89a3      	ldrh	r3, [r4, #12]
 80103fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	2300      	movs	r3, #0
 8010404:	6063      	str	r3, [r4, #4]
 8010406:	6923      	ldr	r3, [r4, #16]
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	89a3      	ldrh	r3, [r4, #12]
 801040c:	f043 0308 	orr.w	r3, r3, #8
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	6923      	ldr	r3, [r4, #16]
 8010414:	b94b      	cbnz	r3, 801042a <__swsetup_r+0x9a>
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801041c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010420:	d003      	beq.n	801042a <__swsetup_r+0x9a>
 8010422:	4621      	mov	r1, r4
 8010424:	4630      	mov	r0, r6
 8010426:	f000 f9a3 	bl	8010770 <__smakebuf_r>
 801042a:	89a0      	ldrh	r0, [r4, #12]
 801042c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010430:	f010 0301 	ands.w	r3, r0, #1
 8010434:	d00a      	beq.n	801044c <__swsetup_r+0xbc>
 8010436:	2300      	movs	r3, #0
 8010438:	60a3      	str	r3, [r4, #8]
 801043a:	6963      	ldr	r3, [r4, #20]
 801043c:	425b      	negs	r3, r3
 801043e:	61a3      	str	r3, [r4, #24]
 8010440:	6923      	ldr	r3, [r4, #16]
 8010442:	b943      	cbnz	r3, 8010456 <__swsetup_r+0xc6>
 8010444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010448:	d1ba      	bne.n	80103c0 <__swsetup_r+0x30>
 801044a:	bd70      	pop	{r4, r5, r6, pc}
 801044c:	0781      	lsls	r1, r0, #30
 801044e:	bf58      	it	pl
 8010450:	6963      	ldrpl	r3, [r4, #20]
 8010452:	60a3      	str	r3, [r4, #8]
 8010454:	e7f4      	b.n	8010440 <__swsetup_r+0xb0>
 8010456:	2000      	movs	r0, #0
 8010458:	e7f7      	b.n	801044a <__swsetup_r+0xba>
 801045a:	bf00      	nop
 801045c:	200004ac 	.word	0x200004ac
 8010460:	0801721c 	.word	0x0801721c
 8010464:	0801723c 	.word	0x0801723c
 8010468:	080171fc 	.word	0x080171fc

0801046c <__sflush_r>:
 801046c:	898a      	ldrh	r2, [r1, #12]
 801046e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010470:	4605      	mov	r5, r0
 8010472:	0710      	lsls	r0, r2, #28
 8010474:	460c      	mov	r4, r1
 8010476:	d457      	bmi.n	8010528 <__sflush_r+0xbc>
 8010478:	684b      	ldr	r3, [r1, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	dc04      	bgt.n	8010488 <__sflush_r+0x1c>
 801047e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010480:	2b00      	cmp	r3, #0
 8010482:	dc01      	bgt.n	8010488 <__sflush_r+0x1c>
 8010484:	2000      	movs	r0, #0
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801048a:	2e00      	cmp	r6, #0
 801048c:	d0fa      	beq.n	8010484 <__sflush_r+0x18>
 801048e:	2300      	movs	r3, #0
 8010490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010494:	682f      	ldr	r7, [r5, #0]
 8010496:	602b      	str	r3, [r5, #0]
 8010498:	d032      	beq.n	8010500 <__sflush_r+0x94>
 801049a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801049c:	89a3      	ldrh	r3, [r4, #12]
 801049e:	075a      	lsls	r2, r3, #29
 80104a0:	d505      	bpl.n	80104ae <__sflush_r+0x42>
 80104a2:	6863      	ldr	r3, [r4, #4]
 80104a4:	1ac0      	subs	r0, r0, r3
 80104a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104a8:	b10b      	cbz	r3, 80104ae <__sflush_r+0x42>
 80104aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104ac:	1ac0      	subs	r0, r0, r3
 80104ae:	2300      	movs	r3, #0
 80104b0:	4602      	mov	r2, r0
 80104b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104b4:	6a21      	ldr	r1, [r4, #32]
 80104b6:	4628      	mov	r0, r5
 80104b8:	47b0      	blx	r6
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	d106      	bne.n	80104ce <__sflush_r+0x62>
 80104c0:	6829      	ldr	r1, [r5, #0]
 80104c2:	291d      	cmp	r1, #29
 80104c4:	d82c      	bhi.n	8010520 <__sflush_r+0xb4>
 80104c6:	4a29      	ldr	r2, [pc, #164]	; (801056c <__sflush_r+0x100>)
 80104c8:	40ca      	lsrs	r2, r1
 80104ca:	07d6      	lsls	r6, r2, #31
 80104cc:	d528      	bpl.n	8010520 <__sflush_r+0xb4>
 80104ce:	2200      	movs	r2, #0
 80104d0:	6062      	str	r2, [r4, #4]
 80104d2:	04d9      	lsls	r1, r3, #19
 80104d4:	6922      	ldr	r2, [r4, #16]
 80104d6:	6022      	str	r2, [r4, #0]
 80104d8:	d504      	bpl.n	80104e4 <__sflush_r+0x78>
 80104da:	1c42      	adds	r2, r0, #1
 80104dc:	d101      	bne.n	80104e2 <__sflush_r+0x76>
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	b903      	cbnz	r3, 80104e4 <__sflush_r+0x78>
 80104e2:	6560      	str	r0, [r4, #84]	; 0x54
 80104e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104e6:	602f      	str	r7, [r5, #0]
 80104e8:	2900      	cmp	r1, #0
 80104ea:	d0cb      	beq.n	8010484 <__sflush_r+0x18>
 80104ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104f0:	4299      	cmp	r1, r3
 80104f2:	d002      	beq.n	80104fa <__sflush_r+0x8e>
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7ff f9ab 	bl	800f850 <_free_r>
 80104fa:	2000      	movs	r0, #0
 80104fc:	6360      	str	r0, [r4, #52]	; 0x34
 80104fe:	e7c2      	b.n	8010486 <__sflush_r+0x1a>
 8010500:	6a21      	ldr	r1, [r4, #32]
 8010502:	2301      	movs	r3, #1
 8010504:	4628      	mov	r0, r5
 8010506:	47b0      	blx	r6
 8010508:	1c41      	adds	r1, r0, #1
 801050a:	d1c7      	bne.n	801049c <__sflush_r+0x30>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d0c4      	beq.n	801049c <__sflush_r+0x30>
 8010512:	2b1d      	cmp	r3, #29
 8010514:	d001      	beq.n	801051a <__sflush_r+0xae>
 8010516:	2b16      	cmp	r3, #22
 8010518:	d101      	bne.n	801051e <__sflush_r+0xb2>
 801051a:	602f      	str	r7, [r5, #0]
 801051c:	e7b2      	b.n	8010484 <__sflush_r+0x18>
 801051e:	89a3      	ldrh	r3, [r4, #12]
 8010520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010524:	81a3      	strh	r3, [r4, #12]
 8010526:	e7ae      	b.n	8010486 <__sflush_r+0x1a>
 8010528:	690f      	ldr	r7, [r1, #16]
 801052a:	2f00      	cmp	r7, #0
 801052c:	d0aa      	beq.n	8010484 <__sflush_r+0x18>
 801052e:	0793      	lsls	r3, r2, #30
 8010530:	680e      	ldr	r6, [r1, #0]
 8010532:	bf08      	it	eq
 8010534:	694b      	ldreq	r3, [r1, #20]
 8010536:	600f      	str	r7, [r1, #0]
 8010538:	bf18      	it	ne
 801053a:	2300      	movne	r3, #0
 801053c:	1bf6      	subs	r6, r6, r7
 801053e:	608b      	str	r3, [r1, #8]
 8010540:	2e00      	cmp	r6, #0
 8010542:	dd9f      	ble.n	8010484 <__sflush_r+0x18>
 8010544:	6a21      	ldr	r1, [r4, #32]
 8010546:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801054a:	4633      	mov	r3, r6
 801054c:	463a      	mov	r2, r7
 801054e:	4628      	mov	r0, r5
 8010550:	47e0      	blx	ip
 8010552:	2800      	cmp	r0, #0
 8010554:	dc06      	bgt.n	8010564 <__sflush_r+0xf8>
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801055c:	81a3      	strh	r3, [r4, #12]
 801055e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010562:	e790      	b.n	8010486 <__sflush_r+0x1a>
 8010564:	4407      	add	r7, r0
 8010566:	1a36      	subs	r6, r6, r0
 8010568:	e7ea      	b.n	8010540 <__sflush_r+0xd4>
 801056a:	bf00      	nop
 801056c:	20400001 	.word	0x20400001

08010570 <_fflush_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	690b      	ldr	r3, [r1, #16]
 8010574:	4605      	mov	r5, r0
 8010576:	460c      	mov	r4, r1
 8010578:	b913      	cbnz	r3, 8010580 <_fflush_r+0x10>
 801057a:	2500      	movs	r5, #0
 801057c:	4628      	mov	r0, r5
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	b118      	cbz	r0, 801058a <_fflush_r+0x1a>
 8010582:	6983      	ldr	r3, [r0, #24]
 8010584:	b90b      	cbnz	r3, 801058a <_fflush_r+0x1a>
 8010586:	f000 f871 	bl	801066c <__sinit>
 801058a:	4b14      	ldr	r3, [pc, #80]	; (80105dc <_fflush_r+0x6c>)
 801058c:	429c      	cmp	r4, r3
 801058e:	d11b      	bne.n	80105c8 <_fflush_r+0x58>
 8010590:	686c      	ldr	r4, [r5, #4]
 8010592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d0ef      	beq.n	801057a <_fflush_r+0xa>
 801059a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801059c:	07d0      	lsls	r0, r2, #31
 801059e:	d404      	bmi.n	80105aa <_fflush_r+0x3a>
 80105a0:	0599      	lsls	r1, r3, #22
 80105a2:	d402      	bmi.n	80105aa <_fflush_r+0x3a>
 80105a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105a6:	f001 f9ec 	bl	8011982 <__retarget_lock_acquire_recursive>
 80105aa:	4628      	mov	r0, r5
 80105ac:	4621      	mov	r1, r4
 80105ae:	f7ff ff5d 	bl	801046c <__sflush_r>
 80105b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105b4:	07da      	lsls	r2, r3, #31
 80105b6:	4605      	mov	r5, r0
 80105b8:	d4e0      	bmi.n	801057c <_fflush_r+0xc>
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	059b      	lsls	r3, r3, #22
 80105be:	d4dd      	bmi.n	801057c <_fflush_r+0xc>
 80105c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105c2:	f001 f9e6 	bl	8011992 <__retarget_lock_release_recursive>
 80105c6:	e7d9      	b.n	801057c <_fflush_r+0xc>
 80105c8:	4b05      	ldr	r3, [pc, #20]	; (80105e0 <_fflush_r+0x70>)
 80105ca:	429c      	cmp	r4, r3
 80105cc:	d101      	bne.n	80105d2 <_fflush_r+0x62>
 80105ce:	68ac      	ldr	r4, [r5, #8]
 80105d0:	e7df      	b.n	8010592 <_fflush_r+0x22>
 80105d2:	4b04      	ldr	r3, [pc, #16]	; (80105e4 <_fflush_r+0x74>)
 80105d4:	429c      	cmp	r4, r3
 80105d6:	bf08      	it	eq
 80105d8:	68ec      	ldreq	r4, [r5, #12]
 80105da:	e7da      	b.n	8010592 <_fflush_r+0x22>
 80105dc:	0801721c 	.word	0x0801721c
 80105e0:	0801723c 	.word	0x0801723c
 80105e4:	080171fc 	.word	0x080171fc

080105e8 <std>:
 80105e8:	2300      	movs	r3, #0
 80105ea:	b510      	push	{r4, lr}
 80105ec:	4604      	mov	r4, r0
 80105ee:	e9c0 3300 	strd	r3, r3, [r0]
 80105f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105f6:	6083      	str	r3, [r0, #8]
 80105f8:	8181      	strh	r1, [r0, #12]
 80105fa:	6643      	str	r3, [r0, #100]	; 0x64
 80105fc:	81c2      	strh	r2, [r0, #14]
 80105fe:	6183      	str	r3, [r0, #24]
 8010600:	4619      	mov	r1, r3
 8010602:	2208      	movs	r2, #8
 8010604:	305c      	adds	r0, #92	; 0x5c
 8010606:	f003 ff3b 	bl	8014480 <memset>
 801060a:	4b05      	ldr	r3, [pc, #20]	; (8010620 <std+0x38>)
 801060c:	6263      	str	r3, [r4, #36]	; 0x24
 801060e:	4b05      	ldr	r3, [pc, #20]	; (8010624 <std+0x3c>)
 8010610:	62a3      	str	r3, [r4, #40]	; 0x28
 8010612:	4b05      	ldr	r3, [pc, #20]	; (8010628 <std+0x40>)
 8010614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010616:	4b05      	ldr	r3, [pc, #20]	; (801062c <std+0x44>)
 8010618:	6224      	str	r4, [r4, #32]
 801061a:	6323      	str	r3, [r4, #48]	; 0x30
 801061c:	bd10      	pop	{r4, pc}
 801061e:	bf00      	nop
 8010620:	08014a0f 	.word	0x08014a0f
 8010624:	08014a31 	.word	0x08014a31
 8010628:	08014a69 	.word	0x08014a69
 801062c:	08014a8d 	.word	0x08014a8d

08010630 <_cleanup_r>:
 8010630:	4901      	ldr	r1, [pc, #4]	; (8010638 <_cleanup_r+0x8>)
 8010632:	f004 b932 	b.w	801489a <_fwalk_reent>
 8010636:	bf00      	nop
 8010638:	08010571 	.word	0x08010571

0801063c <__sfp_lock_acquire>:
 801063c:	4801      	ldr	r0, [pc, #4]	; (8010644 <__sfp_lock_acquire+0x8>)
 801063e:	f001 b9a0 	b.w	8011982 <__retarget_lock_acquire_recursive>
 8010642:	bf00      	nop
 8010644:	200007a4 	.word	0x200007a4

08010648 <__sfp_lock_release>:
 8010648:	4801      	ldr	r0, [pc, #4]	; (8010650 <__sfp_lock_release+0x8>)
 801064a:	f001 b9a2 	b.w	8011992 <__retarget_lock_release_recursive>
 801064e:	bf00      	nop
 8010650:	200007a4 	.word	0x200007a4

08010654 <__sinit_lock_acquire>:
 8010654:	4801      	ldr	r0, [pc, #4]	; (801065c <__sinit_lock_acquire+0x8>)
 8010656:	f001 b994 	b.w	8011982 <__retarget_lock_acquire_recursive>
 801065a:	bf00      	nop
 801065c:	200007b8 	.word	0x200007b8

08010660 <__sinit_lock_release>:
 8010660:	4801      	ldr	r0, [pc, #4]	; (8010668 <__sinit_lock_release+0x8>)
 8010662:	f001 b996 	b.w	8011992 <__retarget_lock_release_recursive>
 8010666:	bf00      	nop
 8010668:	200007b8 	.word	0x200007b8

0801066c <__sinit>:
 801066c:	b510      	push	{r4, lr}
 801066e:	4604      	mov	r4, r0
 8010670:	f7ff fff0 	bl	8010654 <__sinit_lock_acquire>
 8010674:	69a3      	ldr	r3, [r4, #24]
 8010676:	b11b      	cbz	r3, 8010680 <__sinit+0x14>
 8010678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801067c:	f7ff bff0 	b.w	8010660 <__sinit_lock_release>
 8010680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010684:	6523      	str	r3, [r4, #80]	; 0x50
 8010686:	4b13      	ldr	r3, [pc, #76]	; (80106d4 <__sinit+0x68>)
 8010688:	4a13      	ldr	r2, [pc, #76]	; (80106d8 <__sinit+0x6c>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	62a2      	str	r2, [r4, #40]	; 0x28
 801068e:	42a3      	cmp	r3, r4
 8010690:	bf04      	itt	eq
 8010692:	2301      	moveq	r3, #1
 8010694:	61a3      	streq	r3, [r4, #24]
 8010696:	4620      	mov	r0, r4
 8010698:	f000 f820 	bl	80106dc <__sfp>
 801069c:	6060      	str	r0, [r4, #4]
 801069e:	4620      	mov	r0, r4
 80106a0:	f000 f81c 	bl	80106dc <__sfp>
 80106a4:	60a0      	str	r0, [r4, #8]
 80106a6:	4620      	mov	r0, r4
 80106a8:	f000 f818 	bl	80106dc <__sfp>
 80106ac:	2200      	movs	r2, #0
 80106ae:	60e0      	str	r0, [r4, #12]
 80106b0:	2104      	movs	r1, #4
 80106b2:	6860      	ldr	r0, [r4, #4]
 80106b4:	f7ff ff98 	bl	80105e8 <std>
 80106b8:	68a0      	ldr	r0, [r4, #8]
 80106ba:	2201      	movs	r2, #1
 80106bc:	2109      	movs	r1, #9
 80106be:	f7ff ff93 	bl	80105e8 <std>
 80106c2:	68e0      	ldr	r0, [r4, #12]
 80106c4:	2202      	movs	r2, #2
 80106c6:	2112      	movs	r1, #18
 80106c8:	f7ff ff8e 	bl	80105e8 <std>
 80106cc:	2301      	movs	r3, #1
 80106ce:	61a3      	str	r3, [r4, #24]
 80106d0:	e7d2      	b.n	8010678 <__sinit+0xc>
 80106d2:	bf00      	nop
 80106d4:	080171f8 	.word	0x080171f8
 80106d8:	08010631 	.word	0x08010631

080106dc <__sfp>:
 80106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106de:	4607      	mov	r7, r0
 80106e0:	f7ff ffac 	bl	801063c <__sfp_lock_acquire>
 80106e4:	4b1e      	ldr	r3, [pc, #120]	; (8010760 <__sfp+0x84>)
 80106e6:	681e      	ldr	r6, [r3, #0]
 80106e8:	69b3      	ldr	r3, [r6, #24]
 80106ea:	b913      	cbnz	r3, 80106f2 <__sfp+0x16>
 80106ec:	4630      	mov	r0, r6
 80106ee:	f7ff ffbd 	bl	801066c <__sinit>
 80106f2:	3648      	adds	r6, #72	; 0x48
 80106f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106f8:	3b01      	subs	r3, #1
 80106fa:	d503      	bpl.n	8010704 <__sfp+0x28>
 80106fc:	6833      	ldr	r3, [r6, #0]
 80106fe:	b30b      	cbz	r3, 8010744 <__sfp+0x68>
 8010700:	6836      	ldr	r6, [r6, #0]
 8010702:	e7f7      	b.n	80106f4 <__sfp+0x18>
 8010704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010708:	b9d5      	cbnz	r5, 8010740 <__sfp+0x64>
 801070a:	4b16      	ldr	r3, [pc, #88]	; (8010764 <__sfp+0x88>)
 801070c:	60e3      	str	r3, [r4, #12]
 801070e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010712:	6665      	str	r5, [r4, #100]	; 0x64
 8010714:	f001 f92c 	bl	8011970 <__retarget_lock_init_recursive>
 8010718:	f7ff ff96 	bl	8010648 <__sfp_lock_release>
 801071c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010724:	6025      	str	r5, [r4, #0]
 8010726:	61a5      	str	r5, [r4, #24]
 8010728:	2208      	movs	r2, #8
 801072a:	4629      	mov	r1, r5
 801072c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010730:	f003 fea6 	bl	8014480 <memset>
 8010734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801073c:	4620      	mov	r0, r4
 801073e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010740:	3468      	adds	r4, #104	; 0x68
 8010742:	e7d9      	b.n	80106f8 <__sfp+0x1c>
 8010744:	2104      	movs	r1, #4
 8010746:	4638      	mov	r0, r7
 8010748:	f004 f891 	bl	801486e <__sfmoreglue>
 801074c:	4604      	mov	r4, r0
 801074e:	6030      	str	r0, [r6, #0]
 8010750:	2800      	cmp	r0, #0
 8010752:	d1d5      	bne.n	8010700 <__sfp+0x24>
 8010754:	f7ff ff78 	bl	8010648 <__sfp_lock_release>
 8010758:	230c      	movs	r3, #12
 801075a:	603b      	str	r3, [r7, #0]
 801075c:	e7ee      	b.n	801073c <__sfp+0x60>
 801075e:	bf00      	nop
 8010760:	080171f8 	.word	0x080171f8
 8010764:	ffff0001 	.word	0xffff0001

08010768 <_localeconv_r>:
 8010768:	4800      	ldr	r0, [pc, #0]	; (801076c <_localeconv_r+0x4>)
 801076a:	4770      	bx	lr
 801076c:	20000600 	.word	0x20000600

08010770 <__smakebuf_r>:
 8010770:	898b      	ldrh	r3, [r1, #12]
 8010772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010774:	079d      	lsls	r5, r3, #30
 8010776:	4606      	mov	r6, r0
 8010778:	460c      	mov	r4, r1
 801077a:	d507      	bpl.n	801078c <__smakebuf_r+0x1c>
 801077c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010780:	6023      	str	r3, [r4, #0]
 8010782:	6123      	str	r3, [r4, #16]
 8010784:	2301      	movs	r3, #1
 8010786:	6163      	str	r3, [r4, #20]
 8010788:	b002      	add	sp, #8
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	ab01      	add	r3, sp, #4
 801078e:	466a      	mov	r2, sp
 8010790:	f004 f8a2 	bl	80148d8 <__swhatbuf_r>
 8010794:	9900      	ldr	r1, [sp, #0]
 8010796:	4605      	mov	r5, r0
 8010798:	4630      	mov	r0, r6
 801079a:	f7ff f8a3 	bl	800f8e4 <_malloc_r>
 801079e:	b948      	cbnz	r0, 80107b4 <__smakebuf_r+0x44>
 80107a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107a4:	059a      	lsls	r2, r3, #22
 80107a6:	d4ef      	bmi.n	8010788 <__smakebuf_r+0x18>
 80107a8:	f023 0303 	bic.w	r3, r3, #3
 80107ac:	f043 0302 	orr.w	r3, r3, #2
 80107b0:	81a3      	strh	r3, [r4, #12]
 80107b2:	e7e3      	b.n	801077c <__smakebuf_r+0xc>
 80107b4:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <__smakebuf_r+0x7c>)
 80107b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	6020      	str	r0, [r4, #0]
 80107bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c0:	81a3      	strh	r3, [r4, #12]
 80107c2:	9b00      	ldr	r3, [sp, #0]
 80107c4:	6163      	str	r3, [r4, #20]
 80107c6:	9b01      	ldr	r3, [sp, #4]
 80107c8:	6120      	str	r0, [r4, #16]
 80107ca:	b15b      	cbz	r3, 80107e4 <__smakebuf_r+0x74>
 80107cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107d0:	4630      	mov	r0, r6
 80107d2:	f000 fb61 	bl	8010e98 <_isatty_r>
 80107d6:	b128      	cbz	r0, 80107e4 <__smakebuf_r+0x74>
 80107d8:	89a3      	ldrh	r3, [r4, #12]
 80107da:	f023 0303 	bic.w	r3, r3, #3
 80107de:	f043 0301 	orr.w	r3, r3, #1
 80107e2:	81a3      	strh	r3, [r4, #12]
 80107e4:	89a0      	ldrh	r0, [r4, #12]
 80107e6:	4305      	orrs	r5, r0
 80107e8:	81a5      	strh	r5, [r4, #12]
 80107ea:	e7cd      	b.n	8010788 <__smakebuf_r+0x18>
 80107ec:	08010631 	.word	0x08010631

080107f0 <__malloc_lock>:
 80107f0:	4801      	ldr	r0, [pc, #4]	; (80107f8 <__malloc_lock+0x8>)
 80107f2:	f001 b8c6 	b.w	8011982 <__retarget_lock_acquire_recursive>
 80107f6:	bf00      	nop
 80107f8:	20000790 	.word	0x20000790

080107fc <__malloc_unlock>:
 80107fc:	4801      	ldr	r0, [pc, #4]	; (8010804 <__malloc_unlock+0x8>)
 80107fe:	f001 b8c8 	b.w	8011992 <__retarget_lock_release_recursive>
 8010802:	bf00      	nop
 8010804:	20000790 	.word	0x20000790

08010808 <_Balloc>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801080c:	4604      	mov	r4, r0
 801080e:	460d      	mov	r5, r1
 8010810:	b976      	cbnz	r6, 8010830 <_Balloc+0x28>
 8010812:	2010      	movs	r0, #16
 8010814:	f7ff f80c 	bl	800f830 <malloc>
 8010818:	4602      	mov	r2, r0
 801081a:	6260      	str	r0, [r4, #36]	; 0x24
 801081c:	b920      	cbnz	r0, 8010828 <_Balloc+0x20>
 801081e:	4b18      	ldr	r3, [pc, #96]	; (8010880 <_Balloc+0x78>)
 8010820:	4818      	ldr	r0, [pc, #96]	; (8010884 <_Balloc+0x7c>)
 8010822:	2166      	movs	r1, #102	; 0x66
 8010824:	f7fe ffd4 	bl	800f7d0 <__assert_func>
 8010828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801082c:	6006      	str	r6, [r0, #0]
 801082e:	60c6      	str	r6, [r0, #12]
 8010830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010832:	68f3      	ldr	r3, [r6, #12]
 8010834:	b183      	cbz	r3, 8010858 <_Balloc+0x50>
 8010836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801083e:	b9b8      	cbnz	r0, 8010870 <_Balloc+0x68>
 8010840:	2101      	movs	r1, #1
 8010842:	fa01 f605 	lsl.w	r6, r1, r5
 8010846:	1d72      	adds	r2, r6, #5
 8010848:	0092      	lsls	r2, r2, #2
 801084a:	4620      	mov	r0, r4
 801084c:	f004 f8d1 	bl	80149f2 <_calloc_r>
 8010850:	b160      	cbz	r0, 801086c <_Balloc+0x64>
 8010852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010856:	e00e      	b.n	8010876 <_Balloc+0x6e>
 8010858:	2221      	movs	r2, #33	; 0x21
 801085a:	2104      	movs	r1, #4
 801085c:	4620      	mov	r0, r4
 801085e:	f004 f8c8 	bl	80149f2 <_calloc_r>
 8010862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010864:	60f0      	str	r0, [r6, #12]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d1e4      	bne.n	8010836 <_Balloc+0x2e>
 801086c:	2000      	movs	r0, #0
 801086e:	bd70      	pop	{r4, r5, r6, pc}
 8010870:	6802      	ldr	r2, [r0, #0]
 8010872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010876:	2300      	movs	r3, #0
 8010878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801087c:	e7f7      	b.n	801086e <_Balloc+0x66>
 801087e:	bf00      	nop
 8010880:	0801740f 	.word	0x0801740f
 8010884:	08017491 	.word	0x08017491

08010888 <_Bfree>:
 8010888:	b570      	push	{r4, r5, r6, lr}
 801088a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801088c:	4605      	mov	r5, r0
 801088e:	460c      	mov	r4, r1
 8010890:	b976      	cbnz	r6, 80108b0 <_Bfree+0x28>
 8010892:	2010      	movs	r0, #16
 8010894:	f7fe ffcc 	bl	800f830 <malloc>
 8010898:	4602      	mov	r2, r0
 801089a:	6268      	str	r0, [r5, #36]	; 0x24
 801089c:	b920      	cbnz	r0, 80108a8 <_Bfree+0x20>
 801089e:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <_Bfree+0x3c>)
 80108a0:	4809      	ldr	r0, [pc, #36]	; (80108c8 <_Bfree+0x40>)
 80108a2:	218a      	movs	r1, #138	; 0x8a
 80108a4:	f7fe ff94 	bl	800f7d0 <__assert_func>
 80108a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108ac:	6006      	str	r6, [r0, #0]
 80108ae:	60c6      	str	r6, [r0, #12]
 80108b0:	b13c      	cbz	r4, 80108c2 <_Bfree+0x3a>
 80108b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80108b4:	6862      	ldr	r2, [r4, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108bc:	6021      	str	r1, [r4, #0]
 80108be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108c2:	bd70      	pop	{r4, r5, r6, pc}
 80108c4:	0801740f 	.word	0x0801740f
 80108c8:	08017491 	.word	0x08017491

080108cc <__multadd>:
 80108cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d0:	690d      	ldr	r5, [r1, #16]
 80108d2:	4607      	mov	r7, r0
 80108d4:	460c      	mov	r4, r1
 80108d6:	461e      	mov	r6, r3
 80108d8:	f101 0c14 	add.w	ip, r1, #20
 80108dc:	2000      	movs	r0, #0
 80108de:	f8dc 3000 	ldr.w	r3, [ip]
 80108e2:	b299      	uxth	r1, r3
 80108e4:	fb02 6101 	mla	r1, r2, r1, r6
 80108e8:	0c1e      	lsrs	r6, r3, #16
 80108ea:	0c0b      	lsrs	r3, r1, #16
 80108ec:	fb02 3306 	mla	r3, r2, r6, r3
 80108f0:	b289      	uxth	r1, r1
 80108f2:	3001      	adds	r0, #1
 80108f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108f8:	4285      	cmp	r5, r0
 80108fa:	f84c 1b04 	str.w	r1, [ip], #4
 80108fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010902:	dcec      	bgt.n	80108de <__multadd+0x12>
 8010904:	b30e      	cbz	r6, 801094a <__multadd+0x7e>
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	42ab      	cmp	r3, r5
 801090a:	dc19      	bgt.n	8010940 <__multadd+0x74>
 801090c:	6861      	ldr	r1, [r4, #4]
 801090e:	4638      	mov	r0, r7
 8010910:	3101      	adds	r1, #1
 8010912:	f7ff ff79 	bl	8010808 <_Balloc>
 8010916:	4680      	mov	r8, r0
 8010918:	b928      	cbnz	r0, 8010926 <__multadd+0x5a>
 801091a:	4602      	mov	r2, r0
 801091c:	4b0c      	ldr	r3, [pc, #48]	; (8010950 <__multadd+0x84>)
 801091e:	480d      	ldr	r0, [pc, #52]	; (8010954 <__multadd+0x88>)
 8010920:	21b5      	movs	r1, #181	; 0xb5
 8010922:	f7fe ff55 	bl	800f7d0 <__assert_func>
 8010926:	6922      	ldr	r2, [r4, #16]
 8010928:	3202      	adds	r2, #2
 801092a:	f104 010c 	add.w	r1, r4, #12
 801092e:	0092      	lsls	r2, r2, #2
 8010930:	300c      	adds	r0, #12
 8010932:	f003 fd97 	bl	8014464 <memcpy>
 8010936:	4621      	mov	r1, r4
 8010938:	4638      	mov	r0, r7
 801093a:	f7ff ffa5 	bl	8010888 <_Bfree>
 801093e:	4644      	mov	r4, r8
 8010940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010944:	3501      	adds	r5, #1
 8010946:	615e      	str	r6, [r3, #20]
 8010948:	6125      	str	r5, [r4, #16]
 801094a:	4620      	mov	r0, r4
 801094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010950:	08017480 	.word	0x08017480
 8010954:	08017491 	.word	0x08017491

08010958 <__i2b>:
 8010958:	b510      	push	{r4, lr}
 801095a:	460c      	mov	r4, r1
 801095c:	2101      	movs	r1, #1
 801095e:	f7ff ff53 	bl	8010808 <_Balloc>
 8010962:	4602      	mov	r2, r0
 8010964:	b928      	cbnz	r0, 8010972 <__i2b+0x1a>
 8010966:	4b05      	ldr	r3, [pc, #20]	; (801097c <__i2b+0x24>)
 8010968:	4805      	ldr	r0, [pc, #20]	; (8010980 <__i2b+0x28>)
 801096a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801096e:	f7fe ff2f 	bl	800f7d0 <__assert_func>
 8010972:	2301      	movs	r3, #1
 8010974:	6144      	str	r4, [r0, #20]
 8010976:	6103      	str	r3, [r0, #16]
 8010978:	bd10      	pop	{r4, pc}
 801097a:	bf00      	nop
 801097c:	08017480 	.word	0x08017480
 8010980:	08017491 	.word	0x08017491

08010984 <__multiply>:
 8010984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010988:	4691      	mov	r9, r2
 801098a:	690a      	ldr	r2, [r1, #16]
 801098c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010990:	429a      	cmp	r2, r3
 8010992:	bfb8      	it	lt
 8010994:	460b      	movlt	r3, r1
 8010996:	460c      	mov	r4, r1
 8010998:	bfbc      	itt	lt
 801099a:	464c      	movlt	r4, r9
 801099c:	4699      	movlt	r9, r3
 801099e:	6927      	ldr	r7, [r4, #16]
 80109a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80109a4:	68a3      	ldr	r3, [r4, #8]
 80109a6:	6861      	ldr	r1, [r4, #4]
 80109a8:	eb07 060a 	add.w	r6, r7, sl
 80109ac:	42b3      	cmp	r3, r6
 80109ae:	b085      	sub	sp, #20
 80109b0:	bfb8      	it	lt
 80109b2:	3101      	addlt	r1, #1
 80109b4:	f7ff ff28 	bl	8010808 <_Balloc>
 80109b8:	b930      	cbnz	r0, 80109c8 <__multiply+0x44>
 80109ba:	4602      	mov	r2, r0
 80109bc:	4b43      	ldr	r3, [pc, #268]	; (8010acc <__multiply+0x148>)
 80109be:	4844      	ldr	r0, [pc, #272]	; (8010ad0 <__multiply+0x14c>)
 80109c0:	f240 115d 	movw	r1, #349	; 0x15d
 80109c4:	f7fe ff04 	bl	800f7d0 <__assert_func>
 80109c8:	f100 0514 	add.w	r5, r0, #20
 80109cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80109d0:	462b      	mov	r3, r5
 80109d2:	2200      	movs	r2, #0
 80109d4:	4543      	cmp	r3, r8
 80109d6:	d321      	bcc.n	8010a1c <__multiply+0x98>
 80109d8:	f104 0314 	add.w	r3, r4, #20
 80109dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80109e0:	f109 0314 	add.w	r3, r9, #20
 80109e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80109e8:	9202      	str	r2, [sp, #8]
 80109ea:	1b3a      	subs	r2, r7, r4
 80109ec:	3a15      	subs	r2, #21
 80109ee:	f022 0203 	bic.w	r2, r2, #3
 80109f2:	3204      	adds	r2, #4
 80109f4:	f104 0115 	add.w	r1, r4, #21
 80109f8:	428f      	cmp	r7, r1
 80109fa:	bf38      	it	cc
 80109fc:	2204      	movcc	r2, #4
 80109fe:	9201      	str	r2, [sp, #4]
 8010a00:	9a02      	ldr	r2, [sp, #8]
 8010a02:	9303      	str	r3, [sp, #12]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d80c      	bhi.n	8010a22 <__multiply+0x9e>
 8010a08:	2e00      	cmp	r6, #0
 8010a0a:	dd03      	ble.n	8010a14 <__multiply+0x90>
 8010a0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d059      	beq.n	8010ac8 <__multiply+0x144>
 8010a14:	6106      	str	r6, [r0, #16]
 8010a16:	b005      	add	sp, #20
 8010a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1c:	f843 2b04 	str.w	r2, [r3], #4
 8010a20:	e7d8      	b.n	80109d4 <__multiply+0x50>
 8010a22:	f8b3 a000 	ldrh.w	sl, [r3]
 8010a26:	f1ba 0f00 	cmp.w	sl, #0
 8010a2a:	d023      	beq.n	8010a74 <__multiply+0xf0>
 8010a2c:	f104 0e14 	add.w	lr, r4, #20
 8010a30:	46a9      	mov	r9, r5
 8010a32:	f04f 0c00 	mov.w	ip, #0
 8010a36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010a3a:	f8d9 1000 	ldr.w	r1, [r9]
 8010a3e:	fa1f fb82 	uxth.w	fp, r2
 8010a42:	b289      	uxth	r1, r1
 8010a44:	fb0a 110b 	mla	r1, sl, fp, r1
 8010a48:	4461      	add	r1, ip
 8010a4a:	f8d9 c000 	ldr.w	ip, [r9]
 8010a4e:	0c12      	lsrs	r2, r2, #16
 8010a50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010a54:	fb0a c202 	mla	r2, sl, r2, ip
 8010a58:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010a5c:	b289      	uxth	r1, r1
 8010a5e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a62:	4577      	cmp	r7, lr
 8010a64:	f849 1b04 	str.w	r1, [r9], #4
 8010a68:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a6c:	d8e3      	bhi.n	8010a36 <__multiply+0xb2>
 8010a6e:	9a01      	ldr	r2, [sp, #4]
 8010a70:	f845 c002 	str.w	ip, [r5, r2]
 8010a74:	9a03      	ldr	r2, [sp, #12]
 8010a76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	f1b9 0f00 	cmp.w	r9, #0
 8010a80:	d020      	beq.n	8010ac4 <__multiply+0x140>
 8010a82:	6829      	ldr	r1, [r5, #0]
 8010a84:	f104 0c14 	add.w	ip, r4, #20
 8010a88:	46ae      	mov	lr, r5
 8010a8a:	f04f 0a00 	mov.w	sl, #0
 8010a8e:	f8bc b000 	ldrh.w	fp, [ip]
 8010a92:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a96:	fb09 220b 	mla	r2, r9, fp, r2
 8010a9a:	4492      	add	sl, r2
 8010a9c:	b289      	uxth	r1, r1
 8010a9e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010aa2:	f84e 1b04 	str.w	r1, [lr], #4
 8010aa6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010aaa:	f8be 1000 	ldrh.w	r1, [lr]
 8010aae:	0c12      	lsrs	r2, r2, #16
 8010ab0:	fb09 1102 	mla	r1, r9, r2, r1
 8010ab4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010ab8:	4567      	cmp	r7, ip
 8010aba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010abe:	d8e6      	bhi.n	8010a8e <__multiply+0x10a>
 8010ac0:	9a01      	ldr	r2, [sp, #4]
 8010ac2:	50a9      	str	r1, [r5, r2]
 8010ac4:	3504      	adds	r5, #4
 8010ac6:	e79b      	b.n	8010a00 <__multiply+0x7c>
 8010ac8:	3e01      	subs	r6, #1
 8010aca:	e79d      	b.n	8010a08 <__multiply+0x84>
 8010acc:	08017480 	.word	0x08017480
 8010ad0:	08017491 	.word	0x08017491

08010ad4 <__pow5mult>:
 8010ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ad8:	4615      	mov	r5, r2
 8010ada:	f012 0203 	ands.w	r2, r2, #3
 8010ade:	4606      	mov	r6, r0
 8010ae0:	460f      	mov	r7, r1
 8010ae2:	d007      	beq.n	8010af4 <__pow5mult+0x20>
 8010ae4:	4c25      	ldr	r4, [pc, #148]	; (8010b7c <__pow5mult+0xa8>)
 8010ae6:	3a01      	subs	r2, #1
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010aee:	f7ff feed 	bl	80108cc <__multadd>
 8010af2:	4607      	mov	r7, r0
 8010af4:	10ad      	asrs	r5, r5, #2
 8010af6:	d03d      	beq.n	8010b74 <__pow5mult+0xa0>
 8010af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010afa:	b97c      	cbnz	r4, 8010b1c <__pow5mult+0x48>
 8010afc:	2010      	movs	r0, #16
 8010afe:	f7fe fe97 	bl	800f830 <malloc>
 8010b02:	4602      	mov	r2, r0
 8010b04:	6270      	str	r0, [r6, #36]	; 0x24
 8010b06:	b928      	cbnz	r0, 8010b14 <__pow5mult+0x40>
 8010b08:	4b1d      	ldr	r3, [pc, #116]	; (8010b80 <__pow5mult+0xac>)
 8010b0a:	481e      	ldr	r0, [pc, #120]	; (8010b84 <__pow5mult+0xb0>)
 8010b0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010b10:	f7fe fe5e 	bl	800f7d0 <__assert_func>
 8010b14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b18:	6004      	str	r4, [r0, #0]
 8010b1a:	60c4      	str	r4, [r0, #12]
 8010b1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010b20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b24:	b94c      	cbnz	r4, 8010b3a <__pow5mult+0x66>
 8010b26:	f240 2171 	movw	r1, #625	; 0x271
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f7ff ff14 	bl	8010958 <__i2b>
 8010b30:	2300      	movs	r3, #0
 8010b32:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b36:	4604      	mov	r4, r0
 8010b38:	6003      	str	r3, [r0, #0]
 8010b3a:	f04f 0900 	mov.w	r9, #0
 8010b3e:	07eb      	lsls	r3, r5, #31
 8010b40:	d50a      	bpl.n	8010b58 <__pow5mult+0x84>
 8010b42:	4639      	mov	r1, r7
 8010b44:	4622      	mov	r2, r4
 8010b46:	4630      	mov	r0, r6
 8010b48:	f7ff ff1c 	bl	8010984 <__multiply>
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	4680      	mov	r8, r0
 8010b50:	4630      	mov	r0, r6
 8010b52:	f7ff fe99 	bl	8010888 <_Bfree>
 8010b56:	4647      	mov	r7, r8
 8010b58:	106d      	asrs	r5, r5, #1
 8010b5a:	d00b      	beq.n	8010b74 <__pow5mult+0xa0>
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	b938      	cbnz	r0, 8010b70 <__pow5mult+0x9c>
 8010b60:	4622      	mov	r2, r4
 8010b62:	4621      	mov	r1, r4
 8010b64:	4630      	mov	r0, r6
 8010b66:	f7ff ff0d 	bl	8010984 <__multiply>
 8010b6a:	6020      	str	r0, [r4, #0]
 8010b6c:	f8c0 9000 	str.w	r9, [r0]
 8010b70:	4604      	mov	r4, r0
 8010b72:	e7e4      	b.n	8010b3e <__pow5mult+0x6a>
 8010b74:	4638      	mov	r0, r7
 8010b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b7a:	bf00      	nop
 8010b7c:	0801725c 	.word	0x0801725c
 8010b80:	0801740f 	.word	0x0801740f
 8010b84:	08017491 	.word	0x08017491

08010b88 <__lshift>:
 8010b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8c:	460c      	mov	r4, r1
 8010b8e:	6849      	ldr	r1, [r1, #4]
 8010b90:	6923      	ldr	r3, [r4, #16]
 8010b92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b96:	68a3      	ldr	r3, [r4, #8]
 8010b98:	4607      	mov	r7, r0
 8010b9a:	4691      	mov	r9, r2
 8010b9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ba0:	f108 0601 	add.w	r6, r8, #1
 8010ba4:	42b3      	cmp	r3, r6
 8010ba6:	db0b      	blt.n	8010bc0 <__lshift+0x38>
 8010ba8:	4638      	mov	r0, r7
 8010baa:	f7ff fe2d 	bl	8010808 <_Balloc>
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b948      	cbnz	r0, 8010bc6 <__lshift+0x3e>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	4b2a      	ldr	r3, [pc, #168]	; (8010c60 <__lshift+0xd8>)
 8010bb6:	482b      	ldr	r0, [pc, #172]	; (8010c64 <__lshift+0xdc>)
 8010bb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010bbc:	f7fe fe08 	bl	800f7d0 <__assert_func>
 8010bc0:	3101      	adds	r1, #1
 8010bc2:	005b      	lsls	r3, r3, #1
 8010bc4:	e7ee      	b.n	8010ba4 <__lshift+0x1c>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	f100 0114 	add.w	r1, r0, #20
 8010bcc:	f100 0210 	add.w	r2, r0, #16
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	4553      	cmp	r3, sl
 8010bd4:	db37      	blt.n	8010c46 <__lshift+0xbe>
 8010bd6:	6920      	ldr	r0, [r4, #16]
 8010bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010bdc:	f104 0314 	add.w	r3, r4, #20
 8010be0:	f019 091f 	ands.w	r9, r9, #31
 8010be4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010be8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010bec:	d02f      	beq.n	8010c4e <__lshift+0xc6>
 8010bee:	f1c9 0e20 	rsb	lr, r9, #32
 8010bf2:	468a      	mov	sl, r1
 8010bf4:	f04f 0c00 	mov.w	ip, #0
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	fa02 f209 	lsl.w	r2, r2, r9
 8010bfe:	ea42 020c 	orr.w	r2, r2, ip
 8010c02:	f84a 2b04 	str.w	r2, [sl], #4
 8010c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c0a:	4298      	cmp	r0, r3
 8010c0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010c10:	d8f2      	bhi.n	8010bf8 <__lshift+0x70>
 8010c12:	1b03      	subs	r3, r0, r4
 8010c14:	3b15      	subs	r3, #21
 8010c16:	f023 0303 	bic.w	r3, r3, #3
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	f104 0215 	add.w	r2, r4, #21
 8010c20:	4290      	cmp	r0, r2
 8010c22:	bf38      	it	cc
 8010c24:	2304      	movcc	r3, #4
 8010c26:	f841 c003 	str.w	ip, [r1, r3]
 8010c2a:	f1bc 0f00 	cmp.w	ip, #0
 8010c2e:	d001      	beq.n	8010c34 <__lshift+0xac>
 8010c30:	f108 0602 	add.w	r6, r8, #2
 8010c34:	3e01      	subs	r6, #1
 8010c36:	4638      	mov	r0, r7
 8010c38:	612e      	str	r6, [r5, #16]
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	f7ff fe24 	bl	8010888 <_Bfree>
 8010c40:	4628      	mov	r0, r5
 8010c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	e7c1      	b.n	8010bd2 <__lshift+0x4a>
 8010c4e:	3904      	subs	r1, #4
 8010c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c58:	4298      	cmp	r0, r3
 8010c5a:	d8f9      	bhi.n	8010c50 <__lshift+0xc8>
 8010c5c:	e7ea      	b.n	8010c34 <__lshift+0xac>
 8010c5e:	bf00      	nop
 8010c60:	08017480 	.word	0x08017480
 8010c64:	08017491 	.word	0x08017491

08010c68 <__mdiff>:
 8010c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	460d      	mov	r5, r1
 8010c6e:	4607      	mov	r7, r0
 8010c70:	4611      	mov	r1, r2
 8010c72:	4628      	mov	r0, r5
 8010c74:	4614      	mov	r4, r2
 8010c76:	f003 fea1 	bl	80149bc <__mcmp>
 8010c7a:	1e06      	subs	r6, r0, #0
 8010c7c:	d111      	bne.n	8010ca2 <__mdiff+0x3a>
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4638      	mov	r0, r7
 8010c82:	f7ff fdc1 	bl	8010808 <_Balloc>
 8010c86:	4602      	mov	r2, r0
 8010c88:	b928      	cbnz	r0, 8010c96 <__mdiff+0x2e>
 8010c8a:	4b39      	ldr	r3, [pc, #228]	; (8010d70 <__mdiff+0x108>)
 8010c8c:	f240 2132 	movw	r1, #562	; 0x232
 8010c90:	4838      	ldr	r0, [pc, #224]	; (8010d74 <__mdiff+0x10c>)
 8010c92:	f7fe fd9d 	bl	800f7d0 <__assert_func>
 8010c96:	2301      	movs	r3, #1
 8010c98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca2:	bfa4      	itt	ge
 8010ca4:	4623      	movge	r3, r4
 8010ca6:	462c      	movge	r4, r5
 8010ca8:	4638      	mov	r0, r7
 8010caa:	6861      	ldr	r1, [r4, #4]
 8010cac:	bfa6      	itte	ge
 8010cae:	461d      	movge	r5, r3
 8010cb0:	2600      	movge	r6, #0
 8010cb2:	2601      	movlt	r6, #1
 8010cb4:	f7ff fda8 	bl	8010808 <_Balloc>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	b918      	cbnz	r0, 8010cc4 <__mdiff+0x5c>
 8010cbc:	4b2c      	ldr	r3, [pc, #176]	; (8010d70 <__mdiff+0x108>)
 8010cbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010cc2:	e7e5      	b.n	8010c90 <__mdiff+0x28>
 8010cc4:	6927      	ldr	r7, [r4, #16]
 8010cc6:	60c6      	str	r6, [r0, #12]
 8010cc8:	692e      	ldr	r6, [r5, #16]
 8010cca:	f104 0014 	add.w	r0, r4, #20
 8010cce:	f105 0914 	add.w	r9, r5, #20
 8010cd2:	f102 0e14 	add.w	lr, r2, #20
 8010cd6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8010cda:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010cde:	3410      	adds	r4, #16
 8010ce0:	46f2      	mov	sl, lr
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ce8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8010cec:	fa1f f883 	uxth.w	r8, r3
 8010cf0:	fa11 f18b 	uxtah	r1, r1, fp
 8010cf4:	0c1b      	lsrs	r3, r3, #16
 8010cf6:	eba1 0808 	sub.w	r8, r1, r8
 8010cfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010cfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010d02:	fa1f f888 	uxth.w	r8, r8
 8010d06:	1419      	asrs	r1, r3, #16
 8010d08:	454e      	cmp	r6, r9
 8010d0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010d0e:	f84a 3b04 	str.w	r3, [sl], #4
 8010d12:	d8e7      	bhi.n	8010ce4 <__mdiff+0x7c>
 8010d14:	1b73      	subs	r3, r6, r5
 8010d16:	3b15      	subs	r3, #21
 8010d18:	f023 0303 	bic.w	r3, r3, #3
 8010d1c:	3304      	adds	r3, #4
 8010d1e:	3515      	adds	r5, #21
 8010d20:	42ae      	cmp	r6, r5
 8010d22:	bf38      	it	cc
 8010d24:	2304      	movcc	r3, #4
 8010d26:	4418      	add	r0, r3
 8010d28:	4473      	add	r3, lr
 8010d2a:	469e      	mov	lr, r3
 8010d2c:	4606      	mov	r6, r0
 8010d2e:	4566      	cmp	r6, ip
 8010d30:	d30e      	bcc.n	8010d50 <__mdiff+0xe8>
 8010d32:	f10c 0103 	add.w	r1, ip, #3
 8010d36:	1a09      	subs	r1, r1, r0
 8010d38:	f021 0103 	bic.w	r1, r1, #3
 8010d3c:	3803      	subs	r0, #3
 8010d3e:	4584      	cmp	ip, r0
 8010d40:	bf38      	it	cc
 8010d42:	2100      	movcc	r1, #0
 8010d44:	4419      	add	r1, r3
 8010d46:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010d4a:	b17b      	cbz	r3, 8010d6c <__mdiff+0x104>
 8010d4c:	6117      	str	r7, [r2, #16]
 8010d4e:	e7a5      	b.n	8010c9c <__mdiff+0x34>
 8010d50:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d54:	fa11 f488 	uxtah	r4, r1, r8
 8010d58:	1425      	asrs	r5, r4, #16
 8010d5a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8010d5e:	b2a4      	uxth	r4, r4
 8010d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010d64:	f84e 4b04 	str.w	r4, [lr], #4
 8010d68:	1429      	asrs	r1, r5, #16
 8010d6a:	e7e0      	b.n	8010d2e <__mdiff+0xc6>
 8010d6c:	3f01      	subs	r7, #1
 8010d6e:	e7ea      	b.n	8010d46 <__mdiff+0xde>
 8010d70:	08017480 	.word	0x08017480
 8010d74:	08017491 	.word	0x08017491

08010d78 <__d2b>:
 8010d78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010d82:	4690      	mov	r8, r2
 8010d84:	461d      	mov	r5, r3
 8010d86:	f7ff fd3f 	bl	8010808 <_Balloc>
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	b930      	cbnz	r0, 8010d9c <__d2b+0x24>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	4b25      	ldr	r3, [pc, #148]	; (8010e28 <__d2b+0xb0>)
 8010d92:	4826      	ldr	r0, [pc, #152]	; (8010e2c <__d2b+0xb4>)
 8010d94:	f240 310a 	movw	r1, #778	; 0x30a
 8010d98:	f7fe fd1a 	bl	800f7d0 <__assert_func>
 8010d9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010da0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010da4:	bb2d      	cbnz	r5, 8010df2 <__d2b+0x7a>
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	f1b8 0300 	subs.w	r3, r8, #0
 8010dac:	d026      	beq.n	8010dfc <__d2b+0x84>
 8010dae:	4668      	mov	r0, sp
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	f003 fdd6 	bl	8014962 <__lo0bits>
 8010db6:	9900      	ldr	r1, [sp, #0]
 8010db8:	b1f0      	cbz	r0, 8010df8 <__d2b+0x80>
 8010dba:	9a01      	ldr	r2, [sp, #4]
 8010dbc:	f1c0 0320 	rsb	r3, r0, #32
 8010dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8010dc4:	430b      	orrs	r3, r1
 8010dc6:	40c2      	lsrs	r2, r0
 8010dc8:	6163      	str	r3, [r4, #20]
 8010dca:	9201      	str	r2, [sp, #4]
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	61a3      	str	r3, [r4, #24]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	bf14      	ite	ne
 8010dd4:	2102      	movne	r1, #2
 8010dd6:	2101      	moveq	r1, #1
 8010dd8:	6121      	str	r1, [r4, #16]
 8010dda:	b1c5      	cbz	r5, 8010e0e <__d2b+0x96>
 8010ddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010de0:	4405      	add	r5, r0
 8010de2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010de6:	603d      	str	r5, [r7, #0]
 8010de8:	6030      	str	r0, [r6, #0]
 8010dea:	4620      	mov	r0, r4
 8010dec:	b002      	add	sp, #8
 8010dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010df6:	e7d6      	b.n	8010da6 <__d2b+0x2e>
 8010df8:	6161      	str	r1, [r4, #20]
 8010dfa:	e7e7      	b.n	8010dcc <__d2b+0x54>
 8010dfc:	a801      	add	r0, sp, #4
 8010dfe:	f003 fdb0 	bl	8014962 <__lo0bits>
 8010e02:	9b01      	ldr	r3, [sp, #4]
 8010e04:	6163      	str	r3, [r4, #20]
 8010e06:	2101      	movs	r1, #1
 8010e08:	6121      	str	r1, [r4, #16]
 8010e0a:	3020      	adds	r0, #32
 8010e0c:	e7e5      	b.n	8010dda <__d2b+0x62>
 8010e0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010e12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010e16:	6038      	str	r0, [r7, #0]
 8010e18:	6918      	ldr	r0, [r3, #16]
 8010e1a:	f003 fd82 	bl	8014922 <__hi0bits>
 8010e1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010e22:	6031      	str	r1, [r6, #0]
 8010e24:	e7e1      	b.n	8010dea <__d2b+0x72>
 8010e26:	bf00      	nop
 8010e28:	08017480 	.word	0x08017480
 8010e2c:	08017491 	.word	0x08017491

08010e30 <_write_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d07      	ldr	r5, [pc, #28]	; (8010e50 <_write_r+0x20>)
 8010e34:	4604      	mov	r4, r0
 8010e36:	4608      	mov	r0, r1
 8010e38:	4611      	mov	r1, r2
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	602a      	str	r2, [r5, #0]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f000 fd7d 	bl	801193e <_write>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	d102      	bne.n	8010e4e <_write_r+0x1e>
 8010e48:	682b      	ldr	r3, [r5, #0]
 8010e4a:	b103      	cbz	r3, 8010e4e <_write_r+0x1e>
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	bd38      	pop	{r3, r4, r5, pc}
 8010e50:	20001a88 	.word	0x20001a88

08010e54 <_close_r>:
 8010e54:	b538      	push	{r3, r4, r5, lr}
 8010e56:	4d06      	ldr	r5, [pc, #24]	; (8010e70 <_close_r+0x1c>)
 8010e58:	2300      	movs	r3, #0
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	4608      	mov	r0, r1
 8010e5e:	602b      	str	r3, [r5, #0]
 8010e60:	f000 fd73 	bl	801194a <_close>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d102      	bne.n	8010e6e <_close_r+0x1a>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	b103      	cbz	r3, 8010e6e <_close_r+0x1a>
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	20001a88 	.word	0x20001a88

08010e74 <_fstat_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d07      	ldr	r5, [pc, #28]	; (8010e94 <_fstat_r+0x20>)
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	4608      	mov	r0, r1
 8010e7e:	4611      	mov	r1, r2
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	f000 fd70 	bl	8011966 <_fstat>
 8010e86:	1c43      	adds	r3, r0, #1
 8010e88:	d102      	bne.n	8010e90 <_fstat_r+0x1c>
 8010e8a:	682b      	ldr	r3, [r5, #0]
 8010e8c:	b103      	cbz	r3, 8010e90 <_fstat_r+0x1c>
 8010e8e:	6023      	str	r3, [r4, #0]
 8010e90:	bd38      	pop	{r3, r4, r5, pc}
 8010e92:	bf00      	nop
 8010e94:	20001a88 	.word	0x20001a88

08010e98 <_isatty_r>:
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	4d06      	ldr	r5, [pc, #24]	; (8010eb4 <_isatty_r+0x1c>)
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	4608      	mov	r0, r1
 8010ea2:	602b      	str	r3, [r5, #0]
 8010ea4:	f000 fd56 	bl	8011954 <_isatty>
 8010ea8:	1c43      	adds	r3, r0, #1
 8010eaa:	d102      	bne.n	8010eb2 <_isatty_r+0x1a>
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	b103      	cbz	r3, 8010eb2 <_isatty_r+0x1a>
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	20001a88 	.word	0x20001a88

08010eb8 <_lseek_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d07      	ldr	r5, [pc, #28]	; (8010ed8 <_lseek_r+0x20>)
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	4608      	mov	r0, r1
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	602a      	str	r2, [r5, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f000 fd42 	bl	8011950 <_lseek>
 8010ecc:	1c43      	adds	r3, r0, #1
 8010ece:	d102      	bne.n	8010ed6 <_lseek_r+0x1e>
 8010ed0:	682b      	ldr	r3, [r5, #0]
 8010ed2:	b103      	cbz	r3, 8010ed6 <_lseek_r+0x1e>
 8010ed4:	6023      	str	r3, [r4, #0]
 8010ed6:	bd38      	pop	{r3, r4, r5, pc}
 8010ed8:	20001a88 	.word	0x20001a88

08010edc <_read_r>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	4d07      	ldr	r5, [pc, #28]	; (8010efc <_read_r+0x20>)
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	4608      	mov	r0, r1
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	602a      	str	r2, [r5, #0]
 8010eea:	461a      	mov	r2, r3
 8010eec:	f000 fd21 	bl	8011932 <_read>
 8010ef0:	1c43      	adds	r3, r0, #1
 8010ef2:	d102      	bne.n	8010efa <_read_r+0x1e>
 8010ef4:	682b      	ldr	r3, [r5, #0]
 8010ef6:	b103      	cbz	r3, 8010efa <_read_r+0x1e>
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	bd38      	pop	{r3, r4, r5, pc}
 8010efc:	20001a88 	.word	0x20001a88

08010f00 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8010f00:	4770      	bx	lr

08010f02 <cbprintf_via_va_list>:
{
 8010f02:	b510      	push	{r4, lr}
 8010f04:	460c      	mov	r4, r1
 8010f06:	4611      	mov	r1, r2
 8010f08:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 8010f0a:	9b02      	ldr	r3, [sp, #8]
 8010f0c:	47a0      	blx	r4
}
 8010f0e:	bd10      	pop	{r4, pc}

08010f10 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 8010f10:	b343      	cbz	r3, 8010f64 <cbpprintf_external+0x54>
{
 8010f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	4607      	mov	r7, r0
 8010f1a:	4688      	mov	r8, r1
 8010f1c:	4691      	mov	r9, r2
 8010f1e:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 8010f20:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 8010f22:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 8010f24:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 8010f26:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010f2a:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 8010f2c:	f04f 0a00 	mov.w	sl, #0
 8010f30:	e00a      	b.n	8010f48 <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 8010f32:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 8010f36:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f7ef ff8b 	bl	8000e56 <strlen>
 8010f40:	3001      	adds	r0, #1
 8010f42:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 8010f44:	f10a 0a01 	add.w	sl, sl, #1
 8010f48:	45b2      	cmp	sl, r6
 8010f4a:	d3f2      	bcc.n	8010f32 <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 8010f4c:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 8010f50:	9300      	str	r3, [sp, #0]
 8010f52:	686b      	ldr	r3, [r5, #4]
 8010f54:	464a      	mov	r2, r9
 8010f56:	4641      	mov	r1, r8
 8010f58:	4638      	mov	r0, r7
 8010f5a:	f7ff ffd2 	bl	8010f02 <cbprintf_via_va_list>
}
 8010f5e:	b002      	add	sp, #8
 8010f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 8010f64:	f06f 0015 	mvn.w	r0, #21
}
 8010f68:	4770      	bx	lr

08010f6a <arch_printk_char_out>:
}
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	4770      	bx	lr

08010f6e <str_out>:
{
 8010f6e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8010f70:	680c      	ldr	r4, [r1, #0]
 8010f72:	b154      	cbz	r4, 8010f8a <str_out+0x1c>
 8010f74:	688a      	ldr	r2, [r1, #8]
 8010f76:	684b      	ldr	r3, [r1, #4]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	da06      	bge.n	8010f8a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d008      	beq.n	8010f94 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 8010f82:	1c53      	adds	r3, r2, #1
 8010f84:	608b      	str	r3, [r1, #8]
 8010f86:	54a0      	strb	r0, [r4, r2]
 8010f88:	e002      	b.n	8010f90 <str_out+0x22>
		ctx->count++;
 8010f8a:	688b      	ldr	r3, [r1, #8]
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	608b      	str	r3, [r1, #8]
}
 8010f90:	bc10      	pop	{r4}
 8010f92:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 8010f94:	1c53      	adds	r3, r2, #1
 8010f96:	608b      	str	r3, [r1, #8]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	54a3      	strb	r3, [r4, r2]
 8010f9c:	e7f8      	b.n	8010f90 <str_out+0x22>

08010f9e <printk>:
{
 8010f9e:	b40f      	push	{r0, r1, r2, r3}
 8010fa0:	b500      	push	{lr}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	a904      	add	r1, sp, #16
 8010fa6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8010faa:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8010fac:	f7f1 fb18 	bl	80025e0 <vprintk>
}
 8010fb0:	b003      	add	sp, #12
 8010fb2:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fb6:	b004      	add	sp, #16
 8010fb8:	4770      	bx	lr

08010fba <snprintk>:
{
 8010fba:	b40c      	push	{r2, r3}
 8010fbc:	b500      	push	{lr}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	ab04      	add	r3, sp, #16
 8010fc2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8010fc6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8010fc8:	f7f1 fb1a 	bl	8002600 <vsnprintk>
}
 8010fcc:	b003      	add	sp, #12
 8010fce:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fd2:	b002      	add	sp, #8
 8010fd4:	4770      	bx	lr

08010fd6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8010fd6:	b508      	push	{r3, lr}
 8010fd8:	4604      	mov	r4, r0
 8010fda:	4608      	mov	r0, r1
 8010fdc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8010fde:	461a      	mov	r2, r3
 8010fe0:	47a0      	blx	r4
	return z_impl_z_current_get();
 8010fe2:	f7fd fe45 	bl	800ec70 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8010fe6:	f7f3 fd0d 	bl	8004a04 <z_impl_k_thread_abort>

08010fea <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 8010fea:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 8010fec:	1d13      	adds	r3, r2, #4
 8010fee:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8010ff2:	b97c      	cbnz	r4, 8011014 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	fa03 f402 	lsl.w	r4, r3, r2
 8010ffa:	68c3      	ldr	r3, [r0, #12]
 8010ffc:	4323      	orrs	r3, r4
 8010ffe:	60c3      	str	r3, [r0, #12]
		b->next = c;
 8011000:	3204      	adds	r2, #4
 8011002:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8011006:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8011008:	1d1a      	adds	r2, r3, #4
 801100a:	b289      	uxth	r1, r1
 801100c:	5281      	strh	r1, [r0, r2]
 801100e:	3306      	adds	r3, #6
 8011010:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 8011012:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
 8011014:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
 8011016:	3204      	adds	r2, #4
 8011018:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
 801101a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
 801101e:	f10c 0e04 	add.w	lr, ip, #4
 8011022:	f820 300e 	strh.w	r3, [r0, lr]
 8011026:	f10c 0c06 	add.w	ip, ip, #6
 801102a:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
 801102e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 8011030:	3306      	adds	r3, #6
 8011032:	b289      	uxth	r1, r1
 8011034:	52c1      	strh	r1, [r0, r3]
 8011036:	5281      	strh	r1, [r0, r2]
 8011038:	e7eb      	b.n	8011012 <free_list_add_bidx+0x28>

0801103a <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 801103a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 801103c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8011040:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8011042:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 8011044:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 8011048:	f1c2 021f 	rsb	r2, r2, #31
 801104c:	f7ff ffcd 	bl	8010fea <free_list_add_bidx>
	}
}
 8011050:	bd08      	pop	{r3, pc}

08011052 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8011052:	b570      	push	{r4, r5, r6, lr}
 8011054:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8011056:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8011058:	1dc8      	adds	r0, r1, #7
 801105a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 801105e:	440a      	add	r2, r1
 8011060:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8011064:	1a12      	subs	r2, r2, r0
 8011066:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8011068:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 801106a:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	60c3      	str	r3, [r0, #12]
 8011070:	fab5 f185 	clz	r1, r5
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8011074:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8011078:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 801107c:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 801107e:	1dce      	adds	r6, r1, #7
 8011080:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8011082:	e005      	b.n	8011090 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
 8011084:	f103 0c04 	add.w	ip, r3, #4
 8011088:	2400      	movs	r4, #0
 801108a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 801108e:	3301      	adds	r3, #1
 8011090:	4573      	cmp	r3, lr
 8011092:	dbf7      	blt.n	8011084 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8011094:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
 8011096:	b2a4      	uxth	r4, r4
 8011098:	8044      	strh	r4, [r0, #2]
 801109a:	f04f 0c00 	mov.w	ip, #0
 801109e:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80110a2:	f044 0401 	orr.w	r4, r4, #1
 80110a6:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80110a8:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80110aa:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
 80110ae:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
 80110b2:	1ca5      	adds	r5, r4, #2
 80110b4:	f820 e005 	strh.w	lr, [r0, r5]
 80110b8:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
 80110ba:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
 80110be:	1c95      	adds	r5, r2, #2
 80110c0:	f820 c005 	strh.w	ip, [r0, r5]
 80110c4:	4402      	add	r2, r0
 80110c6:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80110c8:	8853      	ldrh	r3, [r2, #2]
 80110ca:	f043 0301 	orr.w	r3, r3, #1
 80110ce:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 80110d0:	f7ff ffb3 	bl	801103a <free_list_add>
}
 80110d4:	bd70      	pop	{r4, r5, r6, pc}

080110d6 <outs>:
{
 80110d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110da:	4607      	mov	r7, r0
 80110dc:	460e      	mov	r6, r1
 80110de:	4614      	mov	r4, r2
 80110e0:	4698      	mov	r8, r3
	size_t count = 0;
 80110e2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80110e4:	e006      	b.n	80110f4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 80110e6:	4631      	mov	r1, r6
 80110e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80110ec:	47b8      	blx	r7
		if (rc < 0) {
 80110ee:	2800      	cmp	r0, #0
 80110f0:	db09      	blt.n	8011106 <outs+0x30>
		++count;
 80110f2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 80110f4:	4544      	cmp	r4, r8
 80110f6:	d3f6      	bcc.n	80110e6 <outs+0x10>
 80110f8:	f1b8 0f00 	cmp.w	r8, #0
 80110fc:	d102      	bne.n	8011104 <outs+0x2e>
 80110fe:	7823      	ldrb	r3, [r4, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1f0      	bne.n	80110e6 <outs+0x10>
	return (int)count;
 8011104:	4628      	mov	r0, r5
}
 8011106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801110a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 801110a:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 801110c:	2300      	movs	r3, #0
 801110e:	f36f 0300 	bfc	r3, #0, #1
 8011112:	f043 0302 	orr.w	r3, r3, #2
 8011116:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 801111a:	6a02      	ldr	r2, [r0, #32]
 801111c:	6804      	ldr	r4, [r0, #0]
 801111e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 8011122:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 8011124:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011126:	6902      	ldr	r2, [r0, #16]
 8011128:	f012 0201 	ands.w	r2, r2, #1
 801112c:	d104      	bne.n	8011138 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 801112e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011130:	42a3      	cmp	r3, r4
 8011132:	d304      	bcc.n	801113e <add_skip_item+0x34>
 8011134:	1b1b      	subs	r3, r3, r4
 8011136:	e002      	b.n	801113e <add_skip_item+0x34>
		return i & (buffer->size - 1);
 8011138:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801113a:	3c01      	subs	r4, #1
 801113c:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 801113e:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8011140:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 8011142:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011144:	b922      	cbnz	r2, 8011150 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011146:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011148:	4299      	cmp	r1, r3
 801114a:	d304      	bcc.n	8011156 <add_skip_item+0x4c>
 801114c:	1ac9      	subs	r1, r1, r3
 801114e:	e002      	b.n	8011156 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 8011150:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011152:	3b01      	subs	r3, #1
 8011154:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8011156:	6041      	str	r1, [r0, #4]
}
 8011158:	bc10      	pop	{r4}
 801115a:	4770      	bx	lr

0801115c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011160:	b083      	sub	sp, #12
 8011162:	4604      	mov	r4, r0
 8011164:	9101      	str	r1, [sp, #4]
 8011166:	4615      	mov	r5, r2
 8011168:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 801116a:	2300      	movs	r3, #0
 801116c:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 801116e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8011172:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8011176:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 801117a:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 801117e:	f003 0303 	and.w	r3, r3, #3
 8011182:	2b02      	cmp	r3, #2
 8011184:	d012      	beq.n	80111ac <drop_item_locked+0x50>
	return 0;
 8011186:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 801118a:	69e3      	ldr	r3, [r4, #28]
 801118c:	4650      	mov	r0, sl
 801118e:	4798      	blx	r3
 8011190:	4607      	mov	r7, r0
	if (skip_wlen) {
 8011192:	f1bb 0f00 	cmp.w	fp, #0
 8011196:	d151      	bne.n	801123c <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 8011198:	2d00      	cmp	r5, #0
 801119a:	d05c      	beq.n	8011256 <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 801119c:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 80111a0:	f013 0f02 	tst.w	r3, #2
 80111a4:	d109      	bne.n	80111ba <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 80111a6:	2301      	movs	r3, #1
 80111a8:	7033      	strb	r3, [r6, #0]
 80111aa:	e048      	b.n	801123e <drop_item_locked+0xe2>
		return item->skip.len;
 80111ac:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 80111b0:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 80111b4:	d0e9      	beq.n	801118a <drop_item_locked+0x2e>
		return item->skip.len;
 80111b6:	465f      	mov	r7, fp
 80111b8:	e7eb      	b.n	8011192 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 80111ba:	9901      	ldr	r1, [sp, #4]
 80111bc:	3101      	adds	r1, #1
 80111be:	4620      	mov	r0, r4
 80111c0:	f7ff ffa3 	bl	801110a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80111c4:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 80111c6:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80111c8:	6922      	ldr	r2, [r4, #16]
 80111ca:	f012 0201 	ands.w	r2, r2, #1
 80111ce:	d104      	bne.n	80111da <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 80111d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111d2:	428b      	cmp	r3, r1
 80111d4:	d304      	bcc.n	80111e0 <drop_item_locked+0x84>
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	e002      	b.n	80111e0 <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 80111da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111dc:	3901      	subs	r1, #1
 80111de:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 80111e0:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80111e2:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 80111e4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80111e6:	b922      	cbnz	r2, 80111f2 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 80111e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111ea:	428b      	cmp	r3, r1
 80111ec:	d304      	bcc.n	80111f8 <drop_item_locked+0x9c>
 80111ee:	1a5b      	subs	r3, r3, r1
 80111f0:	e002      	b.n	80111f8 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 80111f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111f4:	3901      	subs	r1, #1
 80111f6:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 80111f8:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 80111fa:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 80111fc:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80111fe:	b922      	cbnz	r2, 801120a <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011202:	4293      	cmp	r3, r2
 8011204:	d304      	bcc.n	8011210 <drop_item_locked+0xb4>
 8011206:	1a9b      	subs	r3, r3, r2
 8011208:	e002      	b.n	8011210 <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 801120a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801120c:	3a01      	subs	r2, #1
 801120e:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 8011210:	6a21      	ldr	r1, [r4, #32]
 8011212:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 8011216:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 801121a:	f002 0203 	and.w	r2, r2, #3
 801121e:	2a02      	cmp	r2, #2
 8011220:	d006      	beq.n	8011230 <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 8011222:	69e3      	ldr	r3, [r4, #28]
 8011224:	4650      	mov	r0, sl
 8011226:	4798      	blx	r3
 8011228:	4407      	add	r7, r0
				*user_packet = true;
 801122a:	2301      	movs	r3, #1
 801122c:	7033      	strb	r3, [r6, #0]
 801122e:	e006      	b.n	801123e <drop_item_locked+0xe2>
		return item->skip.len;
 8011230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 8011234:	089b      	lsrs	r3, r3, #2
 8011236:	d0f4      	beq.n	8011222 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 8011238:	441f      	add	r7, r3
 801123a:	e000      	b.n	801123e <drop_item_locked+0xe2>
		allow_drop = true;
 801123c:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 801123e:	b195      	cbz	r5, 8011266 <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8011240:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 8011242:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011244:	6923      	ldr	r3, [r4, #16]
 8011246:	f013 0f01 	tst.w	r3, #1
 801124a:	d107      	bne.n	801125c <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 801124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801124e:	429f      	cmp	r7, r3
 8011250:	d307      	bcc.n	8011262 <drop_item_locked+0x106>
 8011252:	1aff      	subs	r7, r7, r3
 8011254:	e005      	b.n	8011262 <drop_item_locked+0x106>
		item = NULL;
 8011256:	f04f 0a00 	mov.w	sl, #0
 801125a:	e7f0      	b.n	801123e <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 801125c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801125e:	3b01      	subs	r3, #1
 8011260:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 8011262:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 8011264:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 8011266:	4650      	mov	r0, sl
 8011268:	b003      	add	sp, #12
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801126e <mpsc_pbuf_init>:
{
 801126e:	b538      	push	{r3, r4, r5, lr}
 8011270:	4604      	mov	r4, r0
 8011272:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 8011274:	2220      	movs	r2, #32
 8011276:	2100      	movs	r1, #0
 8011278:	f003 f902 	bl	8014480 <memset>
	buffer->get_wlen = cfg->get_wlen;
 801127c:	68eb      	ldr	r3, [r5, #12]
 801127e:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 8011280:	68ab      	ldr	r3, [r5, #8]
 8011282:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 8011284:	682b      	ldr	r3, [r5, #0]
 8011286:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 8011288:	686b      	ldr	r3, [r5, #4]
 801128a:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 801128c:	692a      	ldr	r2, [r5, #16]
 801128e:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 8011290:	b123      	cbz	r3, 801129c <mpsc_pbuf_init+0x2e>
 8011292:	1e59      	subs	r1, r3, #1
 8011294:	420b      	tst	r3, r1
 8011296:	d00d      	beq.n	80112b4 <mpsc_pbuf_init+0x46>
 8011298:	2300      	movs	r3, #0
 801129a:	e000      	b.n	801129e <mpsc_pbuf_init+0x30>
 801129c:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 801129e:	b113      	cbz	r3, 80112a6 <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 80112a0:	f042 0201 	orr.w	r2, r2, #1
 80112a4:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 80112a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 80112aa:	2201      	movs	r2, #1
 80112ac:	2100      	movs	r1, #0
 80112ae:	f002 fc85 	bl	8013bbc <z_impl_k_sem_init>
}
 80112b2:	bd38      	pop	{r3, r4, r5, pc}
 80112b4:	2301      	movs	r3, #1
 80112b6:	e7f2      	b.n	801129e <mpsc_pbuf_init+0x30>

080112b8 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 80112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112bc:	b085      	sub	sp, #20
 80112be:	9200      	str	r2, [sp, #0]
 80112c0:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 80112c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80112c4:	3b01      	subs	r3, #1
 80112c6:	428b      	cmp	r3, r1
 80112c8:	f0c0 8087 	bcc.w	80113da <mpsc_pbuf_alloc+0x122>
 80112cc:	4605      	mov	r5, r0
 80112ce:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 80112d0:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 80112d4:	46d3      	mov	fp, sl
 80112d6:	e020      	b.n	801131a <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 80112d8:	1b1c      	subs	r4, r3, r4
 80112da:	3c01      	subs	r4, #1
		return false;
 80112dc:	2600      	movs	r6, #0
 80112de:	e02e      	b.n	801133e <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 80112e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112e2:	1b1c      	subs	r4, r3, r4
 80112e4:	3c01      	subs	r4, #1
		return false;
 80112e6:	2600      	movs	r6, #0
 80112e8:	e029      	b.n	801133e <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 80112ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80112ec:	3a01      	subs	r2, #1
 80112ee:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 80112f0:	602b      	str	r3, [r5, #0]
		cont = false;
 80112f2:	2600      	movs	r6, #0
 80112f4:	f387 8811 	msr	BASEPRI, r7
 80112f8:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 80112fc:	b15e      	cbz	r6, 8011316 <mpsc_pbuf_alloc+0x5e>
 80112fe:	f1ba 0f00 	cmp.w	sl, #0
 8011302:	d008      	beq.n	8011316 <mpsc_pbuf_alloc+0x5e>
 8011304:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011308:	b12b      	cbz	r3, 8011316 <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 801130a:	69ab      	ldr	r3, [r5, #24]
 801130c:	4651      	mov	r1, sl
 801130e:	4628      	mov	r0, r5
 8011310:	4798      	blx	r3
			dropped_item = NULL;
 8011312:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 8011316:	2e00      	cmp	r6, #0
 8011318:	d061      	beq.n	80113de <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 801131a:	f04f 0310 	mov.w	r3, #16
 801131e:	f3ef 8811 	mrs	r8, BASEPRI
 8011322:	f383 8812 	msr	BASEPRI_MAX, r3
 8011326:	f3bf 8f6f 	isb	sy
 801132a:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 801132c:	68eb      	ldr	r3, [r5, #12]
 801132e:	682c      	ldr	r4, [r5, #0]
 8011330:	42a3      	cmp	r3, r4
 8011332:	d8d1      	bhi.n	80112d8 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 8011334:	2b00      	cmp	r3, #0
 8011336:	d0d3      	beq.n	80112e0 <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 8011338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801133a:	1b1c      	subs	r4, r3, r4
	return true;
 801133c:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 801133e:	45a1      	cmp	r9, r4
 8011340:	d819      	bhi.n	8011376 <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 8011342:	6a2b      	ldr	r3, [r5, #32]
 8011344:	682a      	ldr	r2, [r5, #0]
			item =
 8011346:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 801134a:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 801134e:	f36f 0100 	bfc	r1, #0, #1
 8011352:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 8011356:	b2c9      	uxtb	r1, r1
 8011358:	f36f 0141 	bfc	r1, #1, #1
 801135c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 8011360:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 8011362:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011364:	692a      	ldr	r2, [r5, #16]
 8011366:	f012 0f01 	tst.w	r2, #1
 801136a:	d1be      	bne.n	80112ea <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 801136c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801136e:	4293      	cmp	r3, r2
 8011370:	d3be      	bcc.n	80112f0 <mpsc_pbuf_alloc+0x38>
 8011372:	1a9b      	subs	r3, r3, r2
 8011374:	e7bc      	b.n	80112f0 <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 8011376:	b9ae      	cbnz	r6, 80113a4 <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8011378:	9b01      	ldr	r3, [sp, #4]
 801137a:	9a00      	ldr	r2, [sp, #0]
 801137c:	4313      	orrs	r3, r2
 801137e:	d003      	beq.n	8011388 <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 8011380:	f002 fb95 	bl	8013aae <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8011384:	4606      	mov	r6, r0
 8011386:	b190      	cbz	r0, 80113ae <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 8011388:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 801138a:	f10d 030f 	add.w	r3, sp, #15
 801138e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8011392:	4621      	mov	r1, r4
 8011394:	4628      	mov	r0, r5
 8011396:	f7ff fee1 	bl	801115c <drop_item_locked>
			cont = dropped_item != NULL;
 801139a:	4682      	mov	sl, r0
 801139c:	1e06      	subs	r6, r0, #0
 801139e:	bf18      	it	ne
 80113a0:	2601      	movne	r6, #1
 80113a2:	e7a7      	b.n	80112f4 <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7ff feaf 	bl	801110a <add_skip_item>
			cont = true;
 80113ac:	e7a2      	b.n	80112f4 <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 80113ae:	f388 8811 	msr	BASEPRI, r8
 80113b2:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 80113b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 80113ba:	9a00      	ldr	r2, [sp, #0]
 80113bc:	9b01      	ldr	r3, [sp, #4]
 80113be:	f7fc fee1 	bl	800e184 <z_impl_k_sem_take>
	__asm__ volatile(
 80113c2:	f04f 0310 	mov.w	r3, #16
 80113c6:	f3ef 8711 	mrs	r7, BASEPRI
 80113ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80113ce:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d18e      	bne.n	80112f4 <mpsc_pbuf_alloc+0x3c>
				cont = true;
 80113d6:	2601      	movs	r6, #1
 80113d8:	e78c      	b.n	80112f4 <mpsc_pbuf_alloc+0x3c>
		return NULL;
 80113da:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 80113de:	4658      	mov	r0, fp
 80113e0:	b005      	add	sp, #20
 80113e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080113e6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 80113e6:	b538      	push	{r3, r4, r5, lr}
 80113e8:	4604      	mov	r4, r0
 80113ea:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 80113ec:	69c3      	ldr	r3, [r0, #28]
 80113ee:	4608      	mov	r0, r1
 80113f0:	4798      	blx	r3
 80113f2:	f04f 0310 	mov.w	r3, #16
 80113f6:	f3ef 8211 	mrs	r2, BASEPRI
 80113fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80113fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 8011402:	782b      	ldrb	r3, [r5, #0]
 8011404:	f043 0301 	orr.w	r3, r3, #1
 8011408:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 801140a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 801140c:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 801140e:	6923      	ldr	r3, [r4, #16]
 8011410:	f013 0f01 	tst.w	r3, #1
 8011414:	d104      	bne.n	8011420 <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011418:	4298      	cmp	r0, r3
 801141a:	d304      	bcc.n	8011426 <mpsc_pbuf_commit+0x40>
 801141c:	1ac0      	subs	r0, r0, r3
 801141e:	e002      	b.n	8011426 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 8011420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011422:	3b01      	subs	r3, #1
 8011424:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 8011426:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 8011428:	f382 8811 	msr	BASEPRI, r2
 801142c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 8011430:	bd38      	pop	{r3, r4, r5, pc}

08011432 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 8011432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011434:	4604      	mov	r4, r0
 8011436:	e039      	b.n	80114ac <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 8011438:	1a9b      	subs	r3, r3, r2
		return false;
 801143a:	e045      	b.n	80114c8 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 801143c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 8011440:	0880      	lsrs	r0, r0, #2
 8011442:	d153      	bne.n	80114ec <mpsc_pbuf_claim+0xba>
 8011444:	e04d      	b.n	80114e2 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 8011446:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011448:	3901      	subs	r1, #1
 801144a:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 801144c:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 801144e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 8011450:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011452:	b922      	cbnz	r2, 801145e <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011456:	4298      	cmp	r0, r3
 8011458:	d304      	bcc.n	8011464 <mpsc_pbuf_claim+0x32>
 801145a:	1ac0      	subs	r0, r0, r3
 801145c:	e002      	b.n	8011464 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 801145e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011460:	3b01      	subs	r3, #1
 8011462:	4018      	ands	r0, r3
				buffer->rd_idx =
 8011464:	60e0      	str	r0, [r4, #12]
				cont = true;
 8011466:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 8011468:	e01b      	b.n	80114a2 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 801146a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 801146e:	f043 0302 	orr.w	r3, r3, #2
 8011472:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 8011476:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 8011478:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 801147a:	4630      	mov	r0, r6
 801147c:	4798      	blx	r3
	uint32_t i = idx + val;
 801147e:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011480:	6923      	ldr	r3, [r4, #16]
 8011482:	f013 0f01 	tst.w	r3, #1
 8011486:	d104      	bne.n	8011492 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801148a:	4298      	cmp	r0, r3
 801148c:	d304      	bcc.n	8011498 <mpsc_pbuf_claim+0x66>
 801148e:	1ac0      	subs	r0, r0, r3
 8011490:	e002      	b.n	8011498 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 8011492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011494:	3b01      	subs	r3, #1
 8011496:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 8011498:	60a0      	str	r0, [r4, #8]
		cont = false;
 801149a:	2300      	movs	r3, #0
 801149c:	e001      	b.n	80114a2 <mpsc_pbuf_claim+0x70>
 801149e:	2300      	movs	r3, #0
			item = NULL;
 80114a0:	461e      	mov	r6, r3
 80114a2:	f385 8811 	msr	BASEPRI, r5
 80114a6:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 80114aa:	b38b      	cbz	r3, 8011510 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 80114ac:	f04f 0310 	mov.w	r3, #16
 80114b0:	f3ef 8511 	mrs	r5, BASEPRI
 80114b4:	f383 8812 	msr	BASEPRI_MAX, r3
 80114b8:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 80114bc:	68a2      	ldr	r2, [r4, #8]
 80114be:	6863      	ldr	r3, [r4, #4]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d9b9      	bls.n	8011438 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 80114c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114c6:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 80114c8:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 80114ca:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0e5      	beq.n	801149e <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 80114d2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 80114d6:	f013 0303 	ands.w	r3, r3, #3
 80114da:	d016      	beq.n	801150a <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d0ad      	beq.n	801143c <mpsc_pbuf_claim+0xa>
	return 0;
 80114e0:	2000      	movs	r0, #0
	return item->hdr.valid;
 80114e2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 80114e6:	f013 0f01 	tst.w	r3, #1
 80114ea:	d1be      	bne.n	801146a <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 80114ec:	b910      	cbnz	r0, 80114f4 <mpsc_pbuf_claim+0xc2>
 80114ee:	69e3      	ldr	r3, [r4, #28]
 80114f0:	4630      	mov	r0, r6
 80114f2:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 80114f4:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 80114f6:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 80114f8:	6922      	ldr	r2, [r4, #16]
 80114fa:	f012 0201 	ands.w	r2, r2, #1
 80114fe:	d1a2      	bne.n	8011446 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 8011500:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011502:	428b      	cmp	r3, r1
 8011504:	d3a2      	bcc.n	801144c <mpsc_pbuf_claim+0x1a>
 8011506:	1a5b      	subs	r3, r3, r1
 8011508:	e7a0      	b.n	801144c <mpsc_pbuf_claim+0x1a>
		cont = false;
 801150a:	2300      	movs	r3, #0
			item = NULL;
 801150c:	461e      	mov	r6, r3
 801150e:	e7c8      	b.n	80114a2 <mpsc_pbuf_claim+0x70>

	return item;
}
 8011510:	4630      	mov	r0, r6
 8011512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011514 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4604      	mov	r4, r0
 8011518:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 801151a:	69c3      	ldr	r3, [r0, #28]
 801151c:	4608      	mov	r0, r1
 801151e:	4798      	blx	r3
 8011520:	f04f 0310 	mov.w	r3, #16
 8011524:	f3ef 8211 	mrs	r2, BASEPRI
 8011528:	f383 8812 	msr	BASEPRI_MAX, r3
 801152c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 8011530:	782b      	ldrb	r3, [r5, #0]
 8011532:	f36f 0300 	bfc	r3, #0, #1
 8011536:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8011538:	6923      	ldr	r3, [r4, #16]
 801153a:	f013 0f02 	tst.w	r3, #2
 801153e:	d00a      	beq.n	8011556 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 8011540:	6a23      	ldr	r3, [r4, #32]
 8011542:	68e1      	ldr	r1, [r4, #12]
 8011544:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 8011548:	42ab      	cmp	r3, r5
 801154a:	d004      	beq.n	8011556 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 801154c:	682b      	ldr	r3, [r5, #0]
 801154e:	f360 039f 	bfi	r3, r0, #2, #30
 8011552:	602b      	str	r3, [r5, #0]
 8011554:	e012      	b.n	801157c <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 8011556:	782b      	ldrb	r3, [r5, #0]
 8011558:	f36f 0341 	bfc	r3, #1, #1
 801155c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801155e:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 8011560:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 8011562:	6923      	ldr	r3, [r4, #16]
 8011564:	f013 0f01 	tst.w	r3, #1
 8011568:	d104      	bne.n	8011574 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 801156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801156c:	4298      	cmp	r0, r3
 801156e:	d304      	bcc.n	801157a <mpsc_pbuf_free+0x66>
 8011570:	1ac0      	subs	r0, r0, r3
 8011572:	e002      	b.n	801157a <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 8011574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011576:	3b01      	subs	r3, #1
 8011578:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 801157a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 801157c:	f382 8811 	msr	BASEPRI, r2
 8011580:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 8011584:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 8011588:	f7fc fdd4 	bl	800e134 <z_impl_k_sem_give>
}
 801158c:	bd38      	pop	{r3, r4, r5, pc}

0801158e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 801158e:	6883      	ldr	r3, [r0, #8]
 8011590:	6842      	ldr	r2, [r0, #4]
 8011592:	4293      	cmp	r3, r2
 8011594:	d905      	bls.n	80115a2 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 8011596:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011598:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 801159a:	3800      	subs	r0, #0
 801159c:	bf18      	it	ne
 801159e:	2001      	movne	r0, #1
 80115a0:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 80115a2:	1ad0      	subs	r0, r2, r3
		return false;
 80115a4:	e7f9      	b.n	801159a <mpsc_pbuf_is_pending+0xc>

080115a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80115a6:	4770      	bx	lr

080115a8 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 80115a8:	2000      	movs	r0, #0
 80115aa:	4770      	bx	lr

080115ac <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 80115ac:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 80115ae:	f013 0f04 	tst.w	r3, #4
 80115b2:	d001      	beq.n	80115b8 <log_msg2_generic_get_wlen+0xc>
	return 0;
 80115b4:	2000      	movs	r0, #0
}
 80115b6:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 80115b8:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 80115ba:	f3c3 2049 	ubfx	r0, r3, #9, #10
 80115be:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 80115c2:	4418      	add	r0, r3
 80115c4:	3013      	adds	r0, #19
 80115c6:	f020 0007 	bic.w	r0, r0, #7
 80115ca:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 80115cc:	4770      	bx	lr

080115ce <dummy_timestamp>:
}
 80115ce:	2000      	movs	r0, #0
 80115d0:	4770      	bx	lr

080115d2 <msg_filter_check>:
}
 80115d2:	2001      	movs	r0, #1
 80115d4:	4770      	bx	lr

080115d6 <default_lf_get_timestamp>:
{
 80115d6:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80115d8:	f002 fd8e 	bl	80140f8 <z_impl_k_uptime_ticks>
 80115dc:	220a      	movs	r2, #10
 80115de:	2300      	movs	r3, #0
 80115e0:	f7ef faac 	bl	8000b3c <__aeabi_uldivmod>
}
 80115e4:	bd08      	pop	{r3, pc}

080115e6 <notify_drop>:
{
 80115e6:	b508      	push	{r3, lr}
	z_log_dropped(true);
 80115e8:	2001      	movs	r0, #1
 80115ea:	f7f1 fdcd 	bl	8003188 <z_log_dropped>
}
 80115ee:	bd08      	pop	{r3, pc}

080115f0 <get_msg>:
{
 80115f0:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 80115f2:	f7f1 fe4d 	bl	8003290 <z_log_msg2_claim>
}
 80115f6:	bd08      	pop	{r3, pc}

080115f8 <next_pending>:
{
 80115f8:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 80115fa:	f7f1 fe83 	bl	8003304 <z_log_msg2_pending>
}
 80115fe:	bd08      	pop	{r3, pc}

08011600 <z_log_get_tag>:
}
 8011600:	2000      	movs	r0, #0
 8011602:	4770      	bx	lr

08011604 <buffer_write>:
{
 8011604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011606:	4607      	mov	r7, r0
 8011608:	460d      	mov	r5, r1
 801160a:	4614      	mov	r4, r2
 801160c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 801160e:	4632      	mov	r2, r6
 8011610:	4621      	mov	r1, r4
 8011612:	4628      	mov	r0, r5
 8011614:	47b8      	blx	r7
		buf += processed;
 8011616:	4405      	add	r5, r0
	} while (len != 0);
 8011618:	1a24      	subs	r4, r4, r0
 801161a:	d1f8      	bne.n	801160e <buffer_write+0xa>
}
 801161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801161e <color_prefix>:
{
 801161e:	b508      	push	{r3, lr}
 8011620:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 8011622:	2201      	movs	r2, #1
 8011624:	f7f1 ffb6 	bl	8003594 <color_print>
}
 8011628:	bd08      	pop	{r3, pc}

0801162a <color_postfix>:
{
 801162a:	b508      	push	{r3, lr}
 801162c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 801162e:	2200      	movs	r2, #0
 8011630:	f7f1 ffb0 	bl	8003594 <color_print>
}
 8011634:	bd08      	pop	{r3, pc}

08011636 <postfix_print>:
{
 8011636:	b538      	push	{r3, r4, r5, lr}
 8011638:	4605      	mov	r5, r0
 801163a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 801163c:	f001 0101 	and.w	r1, r1, #1
 8011640:	f7ff fff3 	bl	801162a <color_postfix>
	newline_print(output, flags);
 8011644:	4621      	mov	r1, r4
 8011646:	4628      	mov	r0, r5
 8011648:	f7f1 ffba 	bl	80035c0 <newline_print>
}
 801164c:	bd38      	pop	{r3, r4, r5, pc}

0801164e <log_msg2_hexdump>:
{
 801164e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011652:	b083      	sub	sp, #12
 8011654:	4680      	mov	r8, r0
 8011656:	460e      	mov	r6, r1
 8011658:	4615      	mov	r5, r2
 801165a:	461f      	mov	r7, r3
 801165c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8011660:	462c      	mov	r4, r5
 8011662:	2d10      	cmp	r5, #16
 8011664:	bf28      	it	cs
 8011666:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 8011668:	f8cd 9000 	str.w	r9, [sp]
 801166c:	463b      	mov	r3, r7
 801166e:	4622      	mov	r2, r4
 8011670:	4631      	mov	r1, r6
 8011672:	4640      	mov	r0, r8
 8011674:	f7f1 ffb8 	bl	80035e8 <hexdump_line_print>
		data += length;
 8011678:	4426      	add	r6, r4
	} while (len);
 801167a:	1b2d      	subs	r5, r5, r4
 801167c:	d1f0      	bne.n	8011660 <log_msg2_hexdump+0x12>
}
 801167e:	b003      	add	sp, #12
 8011680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011684 <log_output_flush>:
{
 8011684:	b510      	push	{r4, lr}
 8011686:	4604      	mov	r4, r0
		     output->control_block->offset,
 8011688:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 801168a:	6853      	ldr	r3, [r2, #4]
 801168c:	6812      	ldr	r2, [r2, #0]
 801168e:	6881      	ldr	r1, [r0, #8]
 8011690:	6800      	ldr	r0, [r0, #0]
 8011692:	f7ff ffb7 	bl	8011604 <buffer_write>
	output->control_block->offset = 0;
 8011696:	6863      	ldr	r3, [r4, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	601a      	str	r2, [r3, #0]
}
 801169c:	bd10      	pop	{r4, pc}

0801169e <out_func>:
{
 801169e:	b538      	push	{r3, r4, r5, lr}
 80116a0:	4605      	mov	r5, r0
 80116a2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 80116a4:	684b      	ldr	r3, [r1, #4]
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	68cb      	ldr	r3, [r1, #12]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d00f      	beq.n	80116ce <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 80116ae:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80116b0:	f3bf 8f5b 	dmb	ish
 80116b4:	e853 2f00 	ldrex	r2, [r3]
 80116b8:	1c51      	adds	r1, r2, #1
 80116ba:	e843 1000 	strex	r0, r1, [r3]
 80116be:	2800      	cmp	r0, #0
 80116c0:	d1f8      	bne.n	80116b4 <out_func+0x16>
 80116c2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 80116c6:	68a3      	ldr	r3, [r4, #8]
 80116c8:	549d      	strb	r5, [r3, r2]
}
 80116ca:	2000      	movs	r0, #0
 80116cc:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 80116ce:	4608      	mov	r0, r1
 80116d0:	f7ff ffd8 	bl	8011684 <log_output_flush>
 80116d4:	e7eb      	b.n	80116ae <out_func+0x10>

080116d6 <cr_out_func>:
{
 80116d6:	b538      	push	{r3, r4, r5, lr}
 80116d8:	4604      	mov	r4, r0
 80116da:	460d      	mov	r5, r1
	out_func(c, ctx);
 80116dc:	f7ff ffdf 	bl	801169e <out_func>
	if (c == '\n') {
 80116e0:	2c0a      	cmp	r4, #10
 80116e2:	d001      	beq.n	80116e8 <cr_out_func+0x12>
}
 80116e4:	2000      	movs	r0, #0
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 80116e8:	4629      	mov	r1, r5
 80116ea:	200d      	movs	r0, #13
 80116ec:	f7ff ffd7 	bl	801169e <out_func>
 80116f0:	e7f8      	b.n	80116e4 <cr_out_func+0xe>

080116f2 <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 80116f2:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 80116f4:	b198      	cbz	r0, 801171e <z_log_msg2_finalize+0x2c>
 80116f6:	460e      	mov	r6, r1
 80116f8:	4614      	mov	r4, r2
 80116fa:	4619      	mov	r1, r3
 80116fc:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 80116fe:	b143      	cbz	r3, 8011712 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 8011700:	f100 030c 	add.w	r3, r0, #12
 8011704:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8011708:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 801170c:	4418      	add	r0, r3
 801170e:	f002 fea9 	bl	8014464 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 8011712:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 8011714:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 8011716:	4628      	mov	r0, r5
 8011718:	f7f1 fe6e 	bl	80033f8 <z_log_msg2_commit>
}
 801171c:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 801171e:	f7f1 fd33 	bl	8003188 <z_log_dropped>
		return;
 8011722:	e7fb      	b.n	801171c <z_log_msg2_finalize+0x2a>

08011724 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 8011724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011728:	4605      	mov	r5, r0
 801172a:	460c      	mov	r4, r1
 801172c:	4617      	mov	r7, r2
 801172e:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 8011730:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 8011734:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 8011738:	4484      	add	ip, r0
 801173a:	f10c 0c13 	add.w	ip, ip, #19
 801173e:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 8011742:	ea4f 009c 	mov.w	r0, ip, lsr #2
 8011746:	f7f1 fd99 	bl	800327c <z_log_msg2_alloc>

	if (msg) {
 801174a:	4680      	mov	r8, r0
 801174c:	b128      	cbz	r0, 801175a <z_impl_z_log_msg2_static_create+0x36>
 801174e:	f3c4 2249 	ubfx	r2, r4, #9, #10
 8011752:	4639      	mov	r1, r7
 8011754:	300c      	adds	r0, #12
 8011756:	f002 fe85 	bl	8014464 <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 801175a:	4633      	mov	r3, r6
 801175c:	4622      	mov	r2, r4
 801175e:	4629      	mov	r1, r5
 8011760:	4640      	mov	r0, r8
 8011762:	f7ff ffc6 	bl	80116f2 <z_log_msg2_finalize>
}
 8011766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801176a <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 801176a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176e:	b085      	sub	sp, #20
 8011770:	4681      	mov	r9, r0
 8011772:	460d      	mov	r5, r1
 8011774:	4690      	mov	r8, r2
 8011776:	461e      	mov	r6, r3
 8011778:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801177c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 801177e:	b3b7      	cbz	r7, 80117ee <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 8011780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011782:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	463b      	mov	r3, r7
 8011788:	2200      	movs	r2, #0
 801178a:	210c      	movs	r1, #12
 801178c:	4610      	mov	r0, r2
 801178e:	f7f0 fcdf 	bl	8002150 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8011792:	4682      	mov	sl, r0
 8011794:	eb00 030b 	add.w	r3, r0, fp
 8011798:	3313      	adds	r3, #19
 801179a:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 801179e:	2400      	movs	r4, #0
 80117a0:	f36f 0400 	bfc	r4, #0, #1
 80117a4:	f36f 0441 	bfc	r4, #1, #1
 80117a8:	f36f 0482 	bfc	r4, #2, #1
 80117ac:	f369 04c5 	bfi	r4, r9, #3, #3
 80117b0:	f368 1488 	bfi	r4, r8, #6, #3
 80117b4:	f360 2452 	bfi	r4, r0, #9, #10
 80117b8:	f36b 44de 	bfi	r4, fp, #19, #12
 80117bc:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 80117c0:	0898      	lsrs	r0, r3, #2
 80117c2:	f7f1 fd5b 	bl	800327c <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 80117c6:	4680      	mov	r8, r0
 80117c8:	b140      	cbz	r0, 80117dc <z_impl_z_log_msg2_runtime_vcreate+0x72>
 80117ca:	b13f      	cbz	r7, 80117dc <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 80117cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	463b      	mov	r3, r7
 80117d2:	2200      	movs	r2, #0
 80117d4:	4651      	mov	r1, sl
 80117d6:	300c      	adds	r0, #12
 80117d8:	f7f0 fcba 	bl	8002150 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 80117dc:	4633      	mov	r3, r6
 80117de:	4622      	mov	r2, r4
 80117e0:	4629      	mov	r1, r5
 80117e2:	4640      	mov	r0, r8
 80117e4:	f7ff ff85 	bl	80116f2 <z_log_msg2_finalize>
}
 80117e8:	b005      	add	sp, #20
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 80117ee:	2000      	movs	r0, #0
 80117f0:	e7cf      	b.n	8011792 <z_impl_z_log_msg2_runtime_vcreate+0x28>

080117f2 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 80117f2:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 80117f4:	f7f2 f8ae 	bl	8003954 <__do_global_ctors_aux>
	__do_init_array_aux();
 80117f8:	f7f2 f89e 	bl	8003938 <__do_init_array_aux>
}
 80117fc:	bd08      	pop	{r3, pc}

080117fe <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
 80117fe:	2000      	movs	r0, #0
 8011800:	4770      	bx	lr

08011802 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8011802:	b538      	push	{r3, r4, r5, lr}
 8011804:	4604      	mov	r4, r0

	if (esf != NULL) {
 8011806:	460d      	mov	r5, r1
 8011808:	b111      	cbz	r1, 8011810 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 801180a:	4608      	mov	r0, r1
 801180c:	f7f2 f8c6 	bl	800399c <esf_dump>
	}
	z_fatal_error(reason, esf);
 8011810:	4629      	mov	r1, r5
 8011812:	4620      	mov	r0, r4
 8011814:	f7fc f91e 	bl	800da54 <z_fatal_error>
}
 8011818:	bd38      	pop	{r3, r4, r5, pc}

0801181a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 801181a:	b508      	push	{r3, lr}
 801181c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 801181e:	6800      	ldr	r0, [r0, #0]
 8011820:	f7ff ffef 	bl	8011802 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8011824:	bd08      	pop	{r3, pc}

08011826 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 8011826:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8011828:	2100      	movs	r1, #0
 801182a:	2001      	movs	r0, #1
 801182c:	f7ff ffe9 	bl	8011802 <z_arm_fatal_error>
}
 8011830:	bd08      	pop	{r3, pc}

08011832 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8011832:	b508      	push	{r3, lr}
	handler();
 8011834:	f7f2 f9e6 	bl	8003c04 <z_SysNmiOnReset>
	z_arm_int_exit();
 8011838:	f7f2 fad0 	bl	8003ddc <z_arm_exc_exit>
}
 801183c:	bd08      	pop	{r3, pc}

0801183e <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
 801183e:	b508      	push	{r3, lr}
 8011840:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
 8011842:	4601      	mov	r1, r0
 8011844:	4618      	mov	r0, r3
 8011846:	f7ff ffda 	bl	80117fe <__cxa_atexit>
}
 801184a:	bd08      	pop	{r3, pc}

0801184c <memory_fault_recoverable>:
}
 801184c:	2000      	movs	r0, #0
 801184e:	4770      	bx	lr

08011850 <z_log_msg2_runtime_create>:
{
 8011850:	b510      	push	{r4, lr}
 8011852:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8011854:	ac0a      	add	r4, sp, #40	; 0x28
 8011856:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 8011858:	9402      	str	r4, [sp, #8]
 801185a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801185c:	9401      	str	r4, [sp, #4]
 801185e:	9c08      	ldr	r4, [sp, #32]
 8011860:	9400      	str	r4, [sp, #0]
 8011862:	f7ff ff82 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 8011866:	b006      	add	sp, #24
 8011868:	bd10      	pop	{r4, pc}

0801186a <fault_handle>:
{
 801186a:	b508      	push	{r3, lr}
	*recoverable = false;
 801186c:	2300      	movs	r3, #0
 801186e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 8011870:	1ecb      	subs	r3, r1, #3
 8011872:	2b09      	cmp	r3, #9
 8011874:	d81a      	bhi.n	80118ac <fault_handle+0x42>
 8011876:	e8df f003 	tbb	[pc, r3]
 801187a:	0905      	.short	0x0905
 801187c:	1919110d 	.word	0x1919110d
 8011880:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 8011884:	4611      	mov	r1, r2
 8011886:	f7f2 ff05 	bl	8004694 <hard_fault>
}
 801188a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 801188c:	2100      	movs	r1, #0
 801188e:	f7f2 fd9f 	bl	80043d0 <mem_manage_fault>
		break;
 8011892:	e7fa      	b.n	801188a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 8011894:	2100      	movs	r1, #0
 8011896:	f7f2 facd 	bl	8003e34 <bus_fault>
		break;
 801189a:	e7f6      	b.n	801188a <fault_handle+0x20>
		reason = usage_fault(esf);
 801189c:	f7f2 fc38 	bl	8004110 <usage_fault>
		break;
 80118a0:	e7f3      	b.n	801188a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 80118a2:	4611      	mov	r1, r2
 80118a4:	f7f2 fd68 	bl	8004378 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80118a8:	2000      	movs	r0, #0
		break;
 80118aa:	e7ee      	b.n	801188a <fault_handle+0x20>
		reserved_exception(esf, fault);
 80118ac:	f7f2 faa4 	bl	8003df8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80118b0:	2000      	movs	r0, #0
	return reason;
 80118b2:	e7ea      	b.n	801188a <fault_handle+0x20>

080118b4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 80118b4:	6843      	ldr	r3, [r0, #4]
 80118b6:	1e5a      	subs	r2, r3, #1
		&&
 80118b8:	4213      	tst	r3, r2
 80118ba:	d106      	bne.n	80118ca <mpu_partition_is_valid+0x16>
		&&
 80118bc:	2b1f      	cmp	r3, #31
 80118be:	d906      	bls.n	80118ce <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 80118c0:	6803      	ldr	r3, [r0, #0]
		&&
 80118c2:	421a      	tst	r2, r3
 80118c4:	d005      	beq.n	80118d2 <mpu_partition_is_valid+0x1e>
 80118c6:	2000      	movs	r0, #0
 80118c8:	4770      	bx	lr
 80118ca:	2000      	movs	r0, #0
 80118cc:	4770      	bx	lr
 80118ce:	2000      	movs	r0, #0
 80118d0:	4770      	bx	lr
 80118d2:	2001      	movs	r0, #1
}
 80118d4:	4770      	bx	lr

080118d6 <mpu_configure_region>:
{
 80118d6:	b500      	push	{lr}
 80118d8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 80118da:	680b      	ldr	r3, [r1, #0]
 80118dc:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 80118de:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80118e0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 80118e2:	2b20      	cmp	r3, #32
 80118e4:	d912      	bls.n	801190c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 80118e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118ea:	d811      	bhi.n	8011910 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80118ec:	3b01      	subs	r3, #1
 80118ee:	fab3 f383 	clz	r3, r3
 80118f2:	f1c3 031f 	rsb	r3, r3, #31
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80118fc:	4313      	orrs	r3, r2
 80118fe:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 8011900:	a901      	add	r1, sp, #4
 8011902:	f7f3 f8c9 	bl	8004a98 <region_allocate_and_init>
}
 8011906:	b005      	add	sp, #20
 8011908:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 801190c:	2308      	movs	r3, #8
 801190e:	e7f5      	b.n	80118fc <mpu_configure_region+0x26>
		return REGION_4G;
 8011910:	233e      	movs	r3, #62	; 0x3e
 8011912:	e7f3      	b.n	80118fc <mpu_configure_region+0x26>

08011914 <arm_core_mpu_configure_static_mpu_regions>:
{
 8011914:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 8011916:	f7f3 f945 	bl	8004ba4 <mpu_configure_static_mpu_regions>
}
 801191a:	bd08      	pop	{r3, pc}

0801191c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 801191c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 801191e:	f7f3 f94b 	bl	8004bb8 <mpu_configure_dynamic_mpu_regions>
}
 8011922:	bd08      	pop	{r3, pc}

08011924 <malloc_prepare>:
}
 8011924:	2000      	movs	r0, #0
 8011926:	4770      	bx	lr

08011928 <_stdout_hook_default>:
}
 8011928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801192c:	4770      	bx	lr

0801192e <_stdin_hook_default>:
}
 801192e:	2000      	movs	r0, #0
 8011930:	4770      	bx	lr

08011932 <_read>:
{
 8011932:	b508      	push	{r3, lr}
 8011934:	4608      	mov	r0, r1
 8011936:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 8011938:	f7f3 f996 	bl	8004c68 <z_impl_zephyr_read_stdin>
}
 801193c:	bd08      	pop	{r3, pc}

0801193e <_write>:
{
 801193e:	b508      	push	{r3, lr}
 8011940:	4608      	mov	r0, r1
 8011942:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8011944:	f7f3 f9a6 	bl	8004c94 <z_impl_zephyr_write_stdout>
}
 8011948:	bd08      	pop	{r3, pc}

0801194a <_close>:
}
 801194a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801194e:	4770      	bx	lr

08011950 <_lseek>:
}
 8011950:	2000      	movs	r0, #0
 8011952:	4770      	bx	lr

08011954 <_isatty>:
}
 8011954:	2802      	cmp	r0, #2
 8011956:	bfcc      	ite	gt
 8011958:	2000      	movgt	r0, #0
 801195a:	2001      	movle	r0, #1
 801195c:	4770      	bx	lr

0801195e <_kill>:
}
 801195e:	2000      	movs	r0, #0
 8011960:	4770      	bx	lr

08011962 <_getpid>:
}
 8011962:	2000      	movs	r0, #0
 8011964:	4770      	bx	lr

08011966 <_fstat>:
	st->st_mode = S_IFCHR;
 8011966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801196a:	604b      	str	r3, [r1, #4]
}
 801196c:	2000      	movs	r0, #0
 801196e:	4770      	bx	lr

08011970 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8011970:	b510      	push	{r4, lr}
 8011972:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 8011974:	2014      	movs	r0, #20
 8011976:	f7fd ff5b 	bl	800f830 <malloc>
 801197a:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 801197c:	f002 f917 	bl	8013bae <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 8011980:	bd10      	pop	{r4, pc}

08011982 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8011982:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 8011984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801198c:	f7fc fb06 	bl	800df9c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 8011990:	bd08      	pop	{r3, pc}

08011992 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8011992:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 8011994:	f7fc fb8c 	bl	800e0b0 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 8011998:	bd08      	pop	{r3, pc}

0801199a <__stm32_exti_isr_0>:
{
 801199a:	b508      	push	{r3, lr}
 801199c:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 801199e:	2101      	movs	r1, #1
 80119a0:	2000      	movs	r0, #0
 80119a2:	f7f3 f9d1 	bl	8004d48 <__stm32_exti_isr>
}
 80119a6:	bd08      	pop	{r3, pc}

080119a8 <__stm32_exti_isr_1>:
{
 80119a8:	b508      	push	{r3, lr}
 80119aa:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80119ac:	2102      	movs	r1, #2
 80119ae:	2001      	movs	r0, #1
 80119b0:	f7f3 f9ca 	bl	8004d48 <__stm32_exti_isr>
}
 80119b4:	bd08      	pop	{r3, pc}

080119b6 <__stm32_exti_isr_2>:
{
 80119b6:	b508      	push	{r3, lr}
 80119b8:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 80119ba:	2103      	movs	r1, #3
 80119bc:	2002      	movs	r0, #2
 80119be:	f7f3 f9c3 	bl	8004d48 <__stm32_exti_isr>
}
 80119c2:	bd08      	pop	{r3, pc}

080119c4 <__stm32_exti_isr_3>:
{
 80119c4:	b508      	push	{r3, lr}
 80119c6:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 80119c8:	2104      	movs	r1, #4
 80119ca:	2003      	movs	r0, #3
 80119cc:	f7f3 f9bc 	bl	8004d48 <__stm32_exti_isr>
}
 80119d0:	bd08      	pop	{r3, pc}

080119d2 <__stm32_exti_isr_4>:
{
 80119d2:	b508      	push	{r3, lr}
 80119d4:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 80119d6:	2105      	movs	r1, #5
 80119d8:	2004      	movs	r0, #4
 80119da:	f7f3 f9b5 	bl	8004d48 <__stm32_exti_isr>
}
 80119de:	bd08      	pop	{r3, pc}

080119e0 <__stm32_exti_isr_9_5>:
{
 80119e0:	b508      	push	{r3, lr}
 80119e2:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 80119e4:	210a      	movs	r1, #10
 80119e6:	2005      	movs	r0, #5
 80119e8:	f7f3 f9ae 	bl	8004d48 <__stm32_exti_isr>
}
 80119ec:	bd08      	pop	{r3, pc}

080119ee <__stm32_exti_isr_15_10>:
{
 80119ee:	b508      	push	{r3, lr}
 80119f0:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 80119f2:	2110      	movs	r1, #16
 80119f4:	200a      	movs	r0, #10
 80119f6:	f7f3 f9a7 	bl	8004d48 <__stm32_exti_isr>
}
 80119fa:	bd08      	pop	{r3, pc}

080119fc <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 80119fc:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80119fe:	2200      	movs	r2, #0
 8011a00:	4611      	mov	r1, r2
 8011a02:	2006      	movs	r0, #6
 8011a04:	f7f2 f8e8 	bl	8003bd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8011a08:	2200      	movs	r2, #0
 8011a0a:	4611      	mov	r1, r2
 8011a0c:	2007      	movs	r0, #7
 8011a0e:	f7f2 f8e3 	bl	8003bd8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8011a12:	2200      	movs	r2, #0
 8011a14:	4611      	mov	r1, r2
 8011a16:	2008      	movs	r0, #8
 8011a18:	f7f2 f8de 	bl	8003bd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	4611      	mov	r1, r2
 8011a20:	2009      	movs	r0, #9
 8011a22:	f7f2 f8d9 	bl	8003bd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8011a26:	2200      	movs	r2, #0
 8011a28:	4611      	mov	r1, r2
 8011a2a:	200a      	movs	r0, #10
 8011a2c:	f7f2 f8d4 	bl	8003bd8 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8011a30:	2200      	movs	r2, #0
 8011a32:	4611      	mov	r1, r2
 8011a34:	2017      	movs	r0, #23
 8011a36:	f7f2 f8cf 	bl	8003bd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4611      	mov	r1, r2
 8011a3e:	2028      	movs	r0, #40	; 0x28
 8011a40:	f7f2 f8ca 	bl	8003bd8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 8011a44:	bd08      	pop	{r3, pc}

08011a46 <stm32_exti_init>:
{
 8011a46:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 8011a48:	f7ff ffd8 	bl	80119fc <__stm32_exti_connect_irqs>
}
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	bd08      	pop	{r3, pc}

08011a50 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8011a50:	2300      	movs	r3, #0
 8011a52:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8011a54:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8011a56:	6083      	str	r3, [r0, #8]
}
 8011a58:	4770      	bx	lr

08011a5a <get_bus_clock>:
}
 8011a5a:	fbb0 f0f1 	udiv	r0, r0, r1
 8011a5e:	4770      	bx	lr

08011a60 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 8011a60:	2300      	movs	r3, #0
 8011a62:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8011a64:	2314      	movs	r3, #20
 8011a66:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8011a68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011a6c:	6083      	str	r3, [r0, #8]
}
 8011a6e:	4770      	bx	lr

08011a70 <dma_stm32_config_irq_0>:
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */

static void dma_stm32_config_irq_0(const struct device *dev)
{
 8011a70:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 8011a72:	2200      	movs	r2, #0
 8011a74:	4611      	mov	r1, r2
 8011a76:	200b      	movs	r0, #11
 8011a78:	f7f2 f8ae 	bl	8003bd8 <z_arm_irq_priority_set>
 8011a7c:	200b      	movs	r0, #11
 8011a7e:	f7f2 f87b 	bl	8003b78 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 8011a82:	2200      	movs	r2, #0
 8011a84:	4611      	mov	r1, r2
 8011a86:	200c      	movs	r0, #12
 8011a88:	f7f2 f8a6 	bl	8003bd8 <z_arm_irq_priority_set>
 8011a8c:	200c      	movs	r0, #12
 8011a8e:	f7f2 f873 	bl	8003b78 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 8011a92:	2200      	movs	r2, #0
 8011a94:	4611      	mov	r1, r2
 8011a96:	200d      	movs	r0, #13
 8011a98:	f7f2 f89e 	bl	8003bd8 <z_arm_irq_priority_set>
 8011a9c:	200d      	movs	r0, #13
 8011a9e:	f7f2 f86b 	bl	8003b78 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	4611      	mov	r1, r2
 8011aa6:	200e      	movs	r0, #14
 8011aa8:	f7f2 f896 	bl	8003bd8 <z_arm_irq_priority_set>
 8011aac:	200e      	movs	r0, #14
 8011aae:	f7f2 f863 	bl	8003b78 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	200f      	movs	r0, #15
 8011ab8:	f7f2 f88e 	bl	8003bd8 <z_arm_irq_priority_set>
 8011abc:	200f      	movs	r0, #15
 8011abe:	f7f2 f85b 	bl	8003b78 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	2010      	movs	r0, #16
 8011ac8:	f7f2 f886 	bl	8003bd8 <z_arm_irq_priority_set>
 8011acc:	2010      	movs	r0, #16
 8011ace:	f7f2 f853 	bl	8003b78 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	2011      	movs	r0, #17
 8011ad8:	f7f2 f87e 	bl	8003bd8 <z_arm_irq_priority_set>
 8011adc:	2011      	movs	r0, #17
 8011ade:	f7f2 f84b 	bl	8003b78 <arch_irq_enable>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 8011ae2:	bd08      	pop	{r3, pc}

08011ae4 <dma_stm32_config_irq_1>:
#endif /* DT_INST_IRQ_HAS_IDX(1, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(1, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(1, 7) */

static void dma_stm32_config_irq_1(const struct device *dev)
{
 8011ae4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(1, 0);
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	4611      	mov	r1, r2
 8011aea:	2038      	movs	r0, #56	; 0x38
 8011aec:	f7f2 f874 	bl	8003bd8 <z_arm_irq_priority_set>
 8011af0:	2038      	movs	r0, #56	; 0x38
 8011af2:	f7f2 f841 	bl	8003b78 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 1);
 8011af6:	2200      	movs	r2, #0
 8011af8:	4611      	mov	r1, r2
 8011afa:	2039      	movs	r0, #57	; 0x39
 8011afc:	f7f2 f86c 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b00:	2039      	movs	r0, #57	; 0x39
 8011b02:	f7f2 f839 	bl	8003b78 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 2);
 8011b06:	2200      	movs	r2, #0
 8011b08:	4611      	mov	r1, r2
 8011b0a:	203a      	movs	r0, #58	; 0x3a
 8011b0c:	f7f2 f864 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b10:	203a      	movs	r0, #58	; 0x3a
 8011b12:	f7f2 f831 	bl	8003b78 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 3);
 8011b16:	2200      	movs	r2, #0
 8011b18:	4611      	mov	r1, r2
 8011b1a:	203b      	movs	r0, #59	; 0x3b
 8011b1c:	f7f2 f85c 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b20:	203b      	movs	r0, #59	; 0x3b
 8011b22:	f7f2 f829 	bl	8003b78 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 4)
	DMA_STM32_IRQ_CONNECT(1, 4);
 8011b26:	2200      	movs	r2, #0
 8011b28:	4611      	mov	r1, r2
 8011b2a:	203c      	movs	r0, #60	; 0x3c
 8011b2c:	f7f2 f854 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b30:	203c      	movs	r0, #60	; 0x3c
 8011b32:	f7f2 f821 	bl	8003b78 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 5)
	DMA_STM32_IRQ_CONNECT(1, 5);
 8011b36:	2200      	movs	r2, #0
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2044      	movs	r0, #68	; 0x44
 8011b3c:	f7f2 f84c 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b40:	2044      	movs	r0, #68	; 0x44
 8011b42:	f7f2 f819 	bl	8003b78 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 6)
	DMA_STM32_IRQ_CONNECT(1, 6);
 8011b46:	2200      	movs	r2, #0
 8011b48:	4611      	mov	r1, r2
 8011b4a:	2045      	movs	r0, #69	; 0x45
 8011b4c:	f7f2 f844 	bl	8003bd8 <z_arm_irq_priority_set>
 8011b50:	2045      	movs	r0, #69	; 0x45
 8011b52:	f7f2 f811 	bl	8003b78 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/*
 * Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series.
 * STM32F0 and STM32G0: if dma2 exits, the channel interrupts overlap with dma1
 */
}
 8011b56:	bd08      	pop	{r3, pc}

08011b58 <dma_stm32_dump_stream_irq>:
{
 8011b58:	b508      	push	{r3, lr}
	const struct dma_stm32_config *config = dev->config;
 8011b5a:	6843      	ldr	r3, [r0, #4]
	stm32_dma_dump_stream_irq(dma, id);
 8011b5c:	6918      	ldr	r0, [r3, #16]
 8011b5e:	f7f4 f88b 	bl	8005c78 <stm32_dma_dump_stream_irq>
}
 8011b62:	bd08      	pop	{r3, pc}

08011b64 <dma_stm32_clear_stream_irq>:
{
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	460c      	mov	r4, r1
	const struct dma_stm32_config *config = dev->config;
 8011b68:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8011b6a:	691d      	ldr	r5, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7f4 f843 	bl	8005bf8 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8011b72:	4621      	mov	r1, r4
 8011b74:	4628      	mov	r0, r5
 8011b76:	f7f4 f837 	bl	8005be8 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f000 f969 	bl	8011e54 <stm32_dma_clear_stream_irq>
}
 8011b82:	bd38      	pop	{r3, r4, r5, pc}

08011b84 <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 8011b84:	b508      	push	{r3, lr}
 8011b86:	2100      	movs	r1, #0
 8011b88:	f7f3 fbb2 	bl	80052f0 <dma_stm32_irq_handler>
 8011b8c:	bd08      	pop	{r3, pc}

08011b8e <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 8011b8e:	b508      	push	{r3, lr}
 8011b90:	2101      	movs	r1, #1
 8011b92:	f7f3 fbad 	bl	80052f0 <dma_stm32_irq_handler>
 8011b96:	bd08      	pop	{r3, pc}

08011b98 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 8011b98:	b508      	push	{r3, lr}
 8011b9a:	2102      	movs	r1, #2
 8011b9c:	f7f3 fba8 	bl	80052f0 <dma_stm32_irq_handler>
 8011ba0:	bd08      	pop	{r3, pc}

08011ba2 <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 8011ba2:	b508      	push	{r3, lr}
 8011ba4:	2103      	movs	r1, #3
 8011ba6:	f7f3 fba3 	bl	80052f0 <dma_stm32_irq_handler>
 8011baa:	bd08      	pop	{r3, pc}

08011bac <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 8011bac:	b508      	push	{r3, lr}
 8011bae:	2104      	movs	r1, #4
 8011bb0:	f7f3 fb9e 	bl	80052f0 <dma_stm32_irq_handler>
 8011bb4:	bd08      	pop	{r3, pc}

08011bb6 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 8011bb6:	b508      	push	{r3, lr}
 8011bb8:	2105      	movs	r1, #5
 8011bba:	f7f3 fb99 	bl	80052f0 <dma_stm32_irq_handler>
 8011bbe:	bd08      	pop	{r3, pc}

08011bc0 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 8011bc0:	b508      	push	{r3, lr}
 8011bc2:	2106      	movs	r1, #6
 8011bc4:	f7f3 fb94 	bl	80052f0 <dma_stm32_irq_handler>
 8011bc8:	bd08      	pop	{r3, pc}

08011bca <dma_stm32_irq_1_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 0);
 8011bca:	b508      	push	{r3, lr}
 8011bcc:	2100      	movs	r1, #0
 8011bce:	f7f3 fb8f 	bl	80052f0 <dma_stm32_irq_handler>
 8011bd2:	bd08      	pop	{r3, pc}

08011bd4 <dma_stm32_irq_1_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 1);
 8011bd4:	b508      	push	{r3, lr}
 8011bd6:	2101      	movs	r1, #1
 8011bd8:	f7f3 fb8a 	bl	80052f0 <dma_stm32_irq_handler>
 8011bdc:	bd08      	pop	{r3, pc}

08011bde <dma_stm32_irq_1_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 2);
 8011bde:	b508      	push	{r3, lr}
 8011be0:	2102      	movs	r1, #2
 8011be2:	f7f3 fb85 	bl	80052f0 <dma_stm32_irq_handler>
 8011be6:	bd08      	pop	{r3, pc}

08011be8 <dma_stm32_irq_1_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 3);
 8011be8:	b508      	push	{r3, lr}
 8011bea:	2103      	movs	r1, #3
 8011bec:	f7f3 fb80 	bl	80052f0 <dma_stm32_irq_handler>
 8011bf0:	bd08      	pop	{r3, pc}

08011bf2 <dma_stm32_irq_1_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 4);
 8011bf2:	b508      	push	{r3, lr}
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	f7f3 fb7b 	bl	80052f0 <dma_stm32_irq_handler>
 8011bfa:	bd08      	pop	{r3, pc}

08011bfc <dma_stm32_irq_1_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 5);
 8011bfc:	b508      	push	{r3, lr}
 8011bfe:	2105      	movs	r1, #5
 8011c00:	f7f3 fb76 	bl	80052f0 <dma_stm32_irq_handler>
 8011c04:	bd08      	pop	{r3, pc}

08011c06 <dma_stm32_irq_1_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(1, 6);
 8011c06:	b508      	push	{r3, lr}
 8011c08:	2106      	movs	r1, #6
 8011c0a:	f7f3 fb71 	bl	80052f0 <dma_stm32_irq_handler>
 8011c0e:	bd08      	pop	{r3, pc}

08011c10 <dma_stm32_disable_stream>:
{
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	4607      	mov	r7, r0
 8011c14:	460e      	mov	r6, r1
	int count = 0;
 8011c16:	2400      	movs	r4, #0
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8011c18:	4631      	mov	r1, r6
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	f7f4 f904 	bl	8005e28 <stm32_dma_disable_stream>
 8011c20:	4603      	mov	r3, r0
 8011c22:	b160      	cbz	r0, 8011c3e <dma_stm32_disable_stream+0x2e>
		if (count++ > (5 * 1000)) {
 8011c24:	1c65      	adds	r5, r4, #1
 8011c26:	f241 3388 	movw	r3, #5000	; 0x1388
 8011c2a:	429c      	cmp	r4, r3
 8011c2c:	dc05      	bgt.n	8011c3a <dma_stm32_disable_stream+0x2a>
	return z_impl_k_sleep(timeout);
 8011c2e:	200a      	movs	r0, #10
 8011c30:	2100      	movs	r1, #0
 8011c32:	f7fd f805 	bl	800ec40 <z_impl_k_sleep>
 8011c36:	462c      	mov	r4, r5
	for (;;) {
 8011c38:	e7ee      	b.n	8011c18 <dma_stm32_disable_stream+0x8>
			return -EBUSY;
 8011c3a:	f06f 030f 	mvn.w	r3, #15
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c42 <dma_stm32_start>:
{
 8011c42:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 8011c44:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8011c46:	691d      	ldr	r5, [r3, #16]
	id = id - STREAM_OFFSET;
 8011c48:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8011c4a:	695b      	ldr	r3, [r3, #20]
 8011c4c:	42a3      	cmp	r3, r4
 8011c4e:	d908      	bls.n	8011c62 <dma_stm32_start+0x20>
	dma_stm32_clear_stream_irq(dev, id);
 8011c50:	4621      	mov	r1, r4
 8011c52:	f7ff ff87 	bl	8011b64 <dma_stm32_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f7f4 f8d7 	bl	8005e0c <stm32_dma_enable_stream>
	return 0;
 8011c5e:	2000      	movs	r0, #0
}
 8011c60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8011c62:	f06f 0015 	mvn.w	r0, #21
 8011c66:	e7fb      	b.n	8011c60 <dma_stm32_start+0x1e>

08011c68 <LL_DMA_IsActiveFlag_GI1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF1) == (DMA_ISR_GIF1)) ? 1UL : 0UL);
 8011c68:	6800      	ldr	r0, [r0, #0]
 8011c6a:	f010 0001 	ands.w	r0, r0, #1
 8011c6e:	d000      	beq.n	8011c72 <LL_DMA_IsActiveFlag_GI1+0xa>
 8011c70:	2001      	movs	r0, #1
}
 8011c72:	4770      	bx	lr

08011c74 <LL_DMA_IsActiveFlag_GI2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF2) == (DMA_ISR_GIF2)) ? 1UL : 0UL);
 8011c74:	6800      	ldr	r0, [r0, #0]
 8011c76:	f010 0010 	ands.w	r0, r0, #16
 8011c7a:	d000      	beq.n	8011c7e <LL_DMA_IsActiveFlag_GI2+0xa>
 8011c7c:	2001      	movs	r0, #1
}
 8011c7e:	4770      	bx	lr

08011c80 <LL_DMA_IsActiveFlag_GI3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF3) == (DMA_ISR_GIF3)) ? 1UL : 0UL);
 8011c80:	6800      	ldr	r0, [r0, #0]
 8011c82:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8011c86:	d000      	beq.n	8011c8a <LL_DMA_IsActiveFlag_GI3+0xa>
 8011c88:	2001      	movs	r0, #1
}
 8011c8a:	4770      	bx	lr

08011c8c <LL_DMA_IsActiveFlag_GI4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF4) == (DMA_ISR_GIF4)) ? 1UL : 0UL);
 8011c8c:	6800      	ldr	r0, [r0, #0]
 8011c8e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8011c92:	d000      	beq.n	8011c96 <LL_DMA_IsActiveFlag_GI4+0xa>
 8011c94:	2001      	movs	r0, #1
}
 8011c96:	4770      	bx	lr

08011c98 <LL_DMA_IsActiveFlag_GI5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF5) == (DMA_ISR_GIF5)) ? 1UL : 0UL);
 8011c98:	6800      	ldr	r0, [r0, #0]
 8011c9a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8011c9e:	d000      	beq.n	8011ca2 <LL_DMA_IsActiveFlag_GI5+0xa>
 8011ca0:	2001      	movs	r0, #1
}
 8011ca2:	4770      	bx	lr

08011ca4 <LL_DMA_IsActiveFlag_GI6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF6) == (DMA_ISR_GIF6)) ? 1UL : 0UL);
 8011ca4:	6800      	ldr	r0, [r0, #0]
 8011ca6:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8011caa:	d000      	beq.n	8011cae <LL_DMA_IsActiveFlag_GI6+0xa>
 8011cac:	2001      	movs	r0, #1
}
 8011cae:	4770      	bx	lr

08011cb0 <LL_DMA_IsActiveFlag_GI7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_GIF7) == (DMA_ISR_GIF7)) ? 1UL : 0UL);
 8011cb0:	6800      	ldr	r0, [r0, #0]
 8011cb2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8011cb6:	d000      	beq.n	8011cba <LL_DMA_IsActiveFlag_GI7+0xa>
 8011cb8:	2001      	movs	r0, #1
}
 8011cba:	4770      	bx	lr

08011cbc <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8011cbc:	6800      	ldr	r0, [r0, #0]
 8011cbe:	f010 0002 	ands.w	r0, r0, #2
 8011cc2:	d000      	beq.n	8011cc6 <LL_DMA_IsActiveFlag_TC1+0xa>
 8011cc4:	2001      	movs	r0, #1
}
 8011cc6:	4770      	bx	lr

08011cc8 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8011cc8:	6800      	ldr	r0, [r0, #0]
 8011cca:	f010 0020 	ands.w	r0, r0, #32
 8011cce:	d000      	beq.n	8011cd2 <LL_DMA_IsActiveFlag_TC2+0xa>
 8011cd0:	2001      	movs	r0, #1
}
 8011cd2:	4770      	bx	lr

08011cd4 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8011cd4:	6800      	ldr	r0, [r0, #0]
 8011cd6:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8011cda:	d000      	beq.n	8011cde <LL_DMA_IsActiveFlag_TC3+0xa>
 8011cdc:	2001      	movs	r0, #1
}
 8011cde:	4770      	bx	lr

08011ce0 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8011ce0:	6800      	ldr	r0, [r0, #0]
 8011ce2:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8011ce6:	d000      	beq.n	8011cea <LL_DMA_IsActiveFlag_TC4+0xa>
 8011ce8:	2001      	movs	r0, #1
}
 8011cea:	4770      	bx	lr

08011cec <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8011cec:	6800      	ldr	r0, [r0, #0]
 8011cee:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8011cf2:	d000      	beq.n	8011cf6 <LL_DMA_IsActiveFlag_TC5+0xa>
 8011cf4:	2001      	movs	r0, #1
}
 8011cf6:	4770      	bx	lr

08011cf8 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8011cf8:	6800      	ldr	r0, [r0, #0]
 8011cfa:	f410 1000 	ands.w	r0, r0, #2097152	; 0x200000
 8011cfe:	d000      	beq.n	8011d02 <LL_DMA_IsActiveFlag_TC6+0xa>
 8011d00:	2001      	movs	r0, #1
}
 8011d02:	4770      	bx	lr

08011d04 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8011d04:	6800      	ldr	r0, [r0, #0]
 8011d06:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8011d0a:	d000      	beq.n	8011d0e <LL_DMA_IsActiveFlag_TC7+0xa>
 8011d0c:	2001      	movs	r0, #1
}
 8011d0e:	4770      	bx	lr

08011d10 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8011d10:	6800      	ldr	r0, [r0, #0]
 8011d12:	f010 0004 	ands.w	r0, r0, #4
 8011d16:	d000      	beq.n	8011d1a <LL_DMA_IsActiveFlag_HT1+0xa>
 8011d18:	2001      	movs	r0, #1
}
 8011d1a:	4770      	bx	lr

08011d1c <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 8011d1c:	6800      	ldr	r0, [r0, #0]
 8011d1e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8011d22:	d000      	beq.n	8011d26 <LL_DMA_IsActiveFlag_HT2+0xa>
 8011d24:	2001      	movs	r0, #1
}
 8011d26:	4770      	bx	lr

08011d28 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 8011d28:	6800      	ldr	r0, [r0, #0]
 8011d2a:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8011d2e:	d000      	beq.n	8011d32 <LL_DMA_IsActiveFlag_HT3+0xa>
 8011d30:	2001      	movs	r0, #1
}
 8011d32:	4770      	bx	lr

08011d34 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 8011d34:	6800      	ldr	r0, [r0, #0]
 8011d36:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8011d3a:	d000      	beq.n	8011d3e <LL_DMA_IsActiveFlag_HT4+0xa>
 8011d3c:	2001      	movs	r0, #1
}
 8011d3e:	4770      	bx	lr

08011d40 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8011d40:	6800      	ldr	r0, [r0, #0]
 8011d42:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 8011d46:	d000      	beq.n	8011d4a <LL_DMA_IsActiveFlag_HT5+0xa>
 8011d48:	2001      	movs	r0, #1
}
 8011d4a:	4770      	bx	lr

08011d4c <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8011d4c:	6800      	ldr	r0, [r0, #0]
 8011d4e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8011d52:	d000      	beq.n	8011d56 <LL_DMA_IsActiveFlag_HT6+0xa>
 8011d54:	2001      	movs	r0, #1
}
 8011d56:	4770      	bx	lr

08011d58 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 8011d58:	6800      	ldr	r0, [r0, #0]
 8011d5a:	f010 6080 	ands.w	r0, r0, #67108864	; 0x4000000
 8011d5e:	d000      	beq.n	8011d62 <LL_DMA_IsActiveFlag_HT7+0xa>
 8011d60:	2001      	movs	r0, #1
}
 8011d62:	4770      	bx	lr

08011d64 <LL_DMA_IsActiveFlag_TE1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8011d64:	6800      	ldr	r0, [r0, #0]
 8011d66:	f010 0008 	ands.w	r0, r0, #8
 8011d6a:	d000      	beq.n	8011d6e <LL_DMA_IsActiveFlag_TE1+0xa>
 8011d6c:	2001      	movs	r0, #1
}
 8011d6e:	4770      	bx	lr

08011d70 <LL_DMA_IsActiveFlag_TE2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8011d70:	6800      	ldr	r0, [r0, #0]
 8011d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d76:	d000      	beq.n	8011d7a <LL_DMA_IsActiveFlag_TE2+0xa>
 8011d78:	2001      	movs	r0, #1
}
 8011d7a:	4770      	bx	lr

08011d7c <LL_DMA_IsActiveFlag_TE3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 8011d7c:	6800      	ldr	r0, [r0, #0]
 8011d7e:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
 8011d82:	d000      	beq.n	8011d86 <LL_DMA_IsActiveFlag_TE3+0xa>
 8011d84:	2001      	movs	r0, #1
}
 8011d86:	4770      	bx	lr

08011d88 <LL_DMA_IsActiveFlag_TE4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4)) ? 1UL : 0UL);
 8011d88:	6800      	ldr	r0, [r0, #0]
 8011d8a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8011d8e:	d000      	beq.n	8011d92 <LL_DMA_IsActiveFlag_TE4+0xa>
 8011d90:	2001      	movs	r0, #1
}
 8011d92:	4770      	bx	lr

08011d94 <LL_DMA_IsActiveFlag_TE5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5)) ? 1UL : 0UL);
 8011d94:	6800      	ldr	r0, [r0, #0]
 8011d96:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8011d9a:	d000      	beq.n	8011d9e <LL_DMA_IsActiveFlag_TE5+0xa>
 8011d9c:	2001      	movs	r0, #1
}
 8011d9e:	4770      	bx	lr

08011da0 <LL_DMA_IsActiveFlag_TE6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 8011da0:	6800      	ldr	r0, [r0, #0]
 8011da2:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
 8011da6:	d000      	beq.n	8011daa <LL_DMA_IsActiveFlag_TE6+0xa>
 8011da8:	2001      	movs	r0, #1
}
 8011daa:	4770      	bx	lr

08011dac <LL_DMA_IsActiveFlag_TE7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF7) == (DMA_ISR_TEIF7)) ? 1UL : 0UL);
 8011dac:	6800      	ldr	r0, [r0, #0]
 8011dae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8011db2:	d000      	beq.n	8011db6 <LL_DMA_IsActiveFlag_TE7+0xa>
 8011db4:	2001      	movs	r0, #1
}
 8011db6:	4770      	bx	lr

08011db8 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8011db8:	2302      	movs	r3, #2
 8011dba:	6043      	str	r3, [r0, #4]
}
 8011dbc:	4770      	bx	lr

08011dbe <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8011dbe:	2320      	movs	r3, #32
 8011dc0:	6043      	str	r3, [r0, #4]
}
 8011dc2:	4770      	bx	lr

08011dc4 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8011dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011dc8:	6043      	str	r3, [r0, #4]
}
 8011dca:	4770      	bx	lr

08011dcc <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8011dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011dd0:	6043      	str	r3, [r0, #4]
}
 8011dd2:	4770      	bx	lr

08011dd4 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8011dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011dd8:	6043      	str	r3, [r0, #4]
}
 8011dda:	4770      	bx	lr

08011ddc <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8011ddc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011de0:	6043      	str	r3, [r0, #4]
}
 8011de2:	4770      	bx	lr

08011de4 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8011de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011de8:	6043      	str	r3, [r0, #4]
}
 8011dea:	4770      	bx	lr

08011dec <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8011dec:	2304      	movs	r3, #4
 8011dee:	6043      	str	r3, [r0, #4]
}
 8011df0:	4770      	bx	lr

08011df2 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 8011df2:	2340      	movs	r3, #64	; 0x40
 8011df4:	6043      	str	r3, [r0, #4]
}
 8011df6:	4770      	bx	lr

08011df8 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8011df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dfc:	6043      	str	r3, [r0, #4]
}
 8011dfe:	4770      	bx	lr

08011e00 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8011e00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011e04:	6043      	str	r3, [r0, #4]
}
 8011e06:	4770      	bx	lr

08011e08 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8011e08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011e0c:	6043      	str	r3, [r0, #4]
}
 8011e0e:	4770      	bx	lr

08011e10 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8011e10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011e14:	6043      	str	r3, [r0, #4]
}
 8011e16:	4770      	bx	lr

08011e18 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8011e18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011e1c:	6043      	str	r3, [r0, #4]
}
 8011e1e:	4770      	bx	lr

08011e20 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8011e20:	2308      	movs	r3, #8
 8011e22:	6043      	str	r3, [r0, #4]
}
 8011e24:	4770      	bx	lr

08011e26 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8011e26:	2380      	movs	r3, #128	; 0x80
 8011e28:	6043      	str	r3, [r0, #4]
}
 8011e2a:	4770      	bx	lr

08011e2c <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8011e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e30:	6043      	str	r3, [r0, #4]
}
 8011e32:	4770      	bx	lr

08011e34 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8011e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e38:	6043      	str	r3, [r0, #4]
}
 8011e3a:	4770      	bx	lr

08011e3c <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8011e3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011e40:	6043      	str	r3, [r0, #4]
}
 8011e42:	4770      	bx	lr

08011e44 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 8011e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011e48:	6043      	str	r3, [r0, #4]
}
 8011e4a:	4770      	bx	lr

08011e4c <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8011e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011e50:	6043      	str	r3, [r0, #4]
}
 8011e52:	4770      	bx	lr

08011e54 <stm32_dma_clear_stream_irq>:
{
 8011e54:	b508      	push	{r3, lr}
	dma_stm32_clear_te(dma, id);
 8011e56:	f7f3 feef 	bl	8005c38 <dma_stm32_clear_te>
}
 8011e5a:	bd08      	pop	{r3, pc}

08011e5c <stm32_dma_is_unexpected_irq_happened>:
}
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	4770      	bx	lr

08011e60 <gpio_stm32_isr>:
{
 8011e60:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8011e62:	684e      	ldr	r6, [r1, #4]
 8011e64:	2501      	movs	r5, #1
 8011e66:	4085      	lsls	r5, r0
	return list->head;
 8011e68:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8011e6a:	b119      	cbz	r1, 8011e74 <gpio_stm32_isr+0x14>
 8011e6c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 8011e6e:	b149      	cbz	r1, 8011e84 <gpio_stm32_isr+0x24>
	return node->next;
 8011e70:	680c      	ldr	r4, [r1, #0]
 8011e72:	e007      	b.n	8011e84 <gpio_stm32_isr+0x24>
 8011e74:	460c      	mov	r4, r1
 8011e76:	e005      	b.n	8011e84 <gpio_stm32_isr+0x24>
 8011e78:	b164      	cbz	r4, 8011e94 <gpio_stm32_isr+0x34>
 8011e7a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8011e7c:	b104      	cbz	r4, 8011e80 <gpio_stm32_isr+0x20>
	return node->next;
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	4621      	mov	r1, r4
 8011e82:	461c      	mov	r4, r3
 8011e84:	b141      	cbz	r1, 8011e98 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 8011e86:	688a      	ldr	r2, [r1, #8]
 8011e88:	402a      	ands	r2, r5
 8011e8a:	d0f5      	beq.n	8011e78 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8011e8c:	684b      	ldr	r3, [r1, #4]
 8011e8e:	4630      	mov	r0, r6
 8011e90:	4798      	blx	r3
 8011e92:	e7f1      	b.n	8011e78 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8011e94:	4623      	mov	r3, r4
 8011e96:	e7f3      	b.n	8011e80 <gpio_stm32_isr+0x20>
}
 8011e98:	bd70      	pop	{r4, r5, r6, pc}

08011e9a <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 8011e9a:	f410 7f00 	tst.w	r0, #512	; 0x200
 8011e9e:	d01b      	beq.n	8011ed8 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8011ea0:	2310      	movs	r3, #16
 8011ea2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8011ea4:	f010 0f02 	tst.w	r0, #2
 8011ea8:	d004      	beq.n	8011eb4 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8011eaa:	f010 0f04 	tst.w	r0, #4
 8011eae:	d02c      	beq.n	8011f0a <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8011eb0:	2350      	movs	r3, #80	; 0x50
 8011eb2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8011eb4:	f010 0310 	ands.w	r3, r0, #16
 8011eb8:	d005      	beq.n	8011ec6 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8011eba:	680b      	ldr	r3, [r1, #0]
 8011ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011ec0:	600b      	str	r3, [r1, #0]
	return 0;
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8011ec6:	f010 0020 	ands.w	r0, r0, #32
 8011eca:	d020      	beq.n	8011f0e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8011ecc:	680a      	ldr	r2, [r1, #0]
 8011ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011ed2:	600a      	str	r2, [r1, #0]
	return 0;
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 8011ed8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011edc:	d011      	beq.n	8011f02 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8011ee2:	f010 0310 	ands.w	r3, r0, #16
 8011ee6:	d004      	beq.n	8011ef2 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8011ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011eec:	600b      	str	r3, [r1, #0]
	return 0;
 8011eee:	2000      	movs	r0, #0
 8011ef0:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8011ef2:	f010 0020 	ands.w	r0, r0, #32
 8011ef6:	d00a      	beq.n	8011f0e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8011ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011efc:	600a      	str	r2, [r1, #0]
	return 0;
 8011efe:	4618      	mov	r0, r3
 8011f00:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8011f02:	2330      	movs	r3, #48	; 0x30
 8011f04:	600b      	str	r3, [r1, #0]
	return 0;
 8011f06:	2000      	movs	r0, #0
 8011f08:	4770      	bx	lr
				return -ENOTSUP;
 8011f0a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8011f0e:	4770      	bx	lr

08011f10 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8011f10:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011f12:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8011f14:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8011f16:	600b      	str	r3, [r1, #0]
}
 8011f18:	2000      	movs	r0, #0
 8011f1a:	4770      	bx	lr

08011f1c <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8011f1c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011f1e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8011f20:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8011f22:	4042      	eors	r2, r0
 8011f24:	400a      	ands	r2, r1
 8011f26:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8011f28:	615a      	str	r2, [r3, #20]
}
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	4770      	bx	lr

08011f2e <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8011f2e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011f30:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8011f32:	6199      	str	r1, [r3, #24]
}
 8011f34:	2000      	movs	r0, #0
 8011f36:	4770      	bx	lr

08011f38 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8011f38:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011f3a:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8011f3c:	6299      	str	r1, [r3, #40]	; 0x28
}
 8011f3e:	2000      	movs	r0, #0
 8011f40:	4770      	bx	lr

08011f42 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8011f42:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011f44:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8011f46:	6953      	ldr	r3, [r2, #20]
 8011f48:	404b      	eors	r3, r1
 8011f4a:	6153      	str	r3, [r2, #20]
}
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	4770      	bx	lr

08011f50 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8011f50:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 8011f52:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 8011f54:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 8011f58:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8011f5a:	b1fb      	cbz	r3, 8011f9c <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	e00d      	b.n	8011f7c <gpio_stm32_manage_callback+0x2c>
	return node->next;
 8011f60:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8011f62:	60a3      	str	r3, [r4, #8]
	return list->tail;
 8011f64:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8011f68:	4281      	cmp	r1, r0
 8011f6a:	d112      	bne.n	8011f92 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8011f6c:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8011f70:	e00f      	b.n	8011f92 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8011f72:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8011f76:	e00c      	b.n	8011f92 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8011f78:	4618      	mov	r0, r3
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	b163      	cbz	r3, 8011f98 <gpio_stm32_manage_callback+0x48>
 8011f7e:	4299      	cmp	r1, r3
 8011f80:	d1fa      	bne.n	8011f78 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d0ec      	beq.n	8011f60 <gpio_stm32_manage_callback+0x10>
	return node->next;
 8011f86:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 8011f88:	6003      	str	r3, [r0, #0]
	return list->tail;
 8011f8a:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8011f8e:	4299      	cmp	r1, r3
 8011f90:	d0ef      	beq.n	8011f72 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 8011f92:	2300      	movs	r3, #0
 8011f94:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8011f96:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8011f98:	b903      	cbnz	r3, 8011f9c <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 8011f9a:	b162      	cbz	r2, 8011fb6 <gpio_stm32_manage_callback+0x66>
	if (set) {
 8011f9c:	b172      	cbz	r2, 8011fbc <gpio_stm32_manage_callback+0x6c>
	return list->head;
 8011f9e:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 8011fa0:	600b      	str	r3, [r1, #0]
	list->head = node;
 8011fa2:	60a1      	str	r1, [r4, #8]
	return list->tail;
 8011fa4:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 8011fa8:	b10b      	cbz	r3, 8011fae <gpio_stm32_manage_callback+0x5e>
	return 0;
 8011faa:	2000      	movs	r0, #0
 8011fac:	e007      	b.n	8011fbe <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 8011fae:	f8cc 1004 	str.w	r1, [ip, #4]
 8011fb2:	2000      	movs	r0, #0
}
 8011fb4:	e003      	b.n	8011fbe <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 8011fb6:	f06f 0015 	mvn.w	r0, #21
 8011fba:	e000      	b.n	8011fbe <gpio_stm32_manage_callback+0x6e>
	return 0;
 8011fbc:	2000      	movs	r0, #0
}
 8011fbe:	bc10      	pop	{r4}
 8011fc0:	4770      	bx	lr

08011fc2 <gpio_stm32_configure_raw>:
{
 8011fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8011fc4:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8011fc6:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8011fc8:	2001      	movs	r0, #1
 8011fca:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8011fcc:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8011fd0:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8011fd4:	6865      	ldr	r5, [r4, #4]
 8011fd6:	ea25 0500 	bic.w	r5, r5, r0
 8011fda:	408e      	lsls	r6, r1
 8011fdc:	4335      	orrs	r5, r6
 8011fde:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8011fe0:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8011fe4:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011fe6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8011fea:	2d00      	cmp	r5, #0
 8011fec:	d04a      	beq.n	8012084 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 8011fee:	fab5 f585 	clz	r5, r5
 8011ff2:	006d      	lsls	r5, r5, #1
 8011ff4:	2703      	movs	r7, #3
 8011ff6:	fa07 f505 	lsl.w	r5, r7, r5
 8011ffa:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011ffe:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8012002:	2d00      	cmp	r5, #0
 8012004:	d040      	beq.n	8012088 <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 8012006:	fab5 f585 	clz	r5, r5
 801200a:	006d      	lsls	r5, r5, #1
 801200c:	fa0e f505 	lsl.w	r5, lr, r5
 8012010:	4335      	orrs	r5, r6
 8012012:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8012014:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8012018:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801201a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 801201e:	b3ad      	cbz	r5, 801208c <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 8012020:	fab5 f585 	clz	r5, r5
 8012024:	006d      	lsls	r5, r5, #1
 8012026:	f04f 0e03 	mov.w	lr, #3
 801202a:	fa0e f505 	lsl.w	r5, lr, r5
 801202e:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012032:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8012036:	b35d      	cbz	r5, 8012090 <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 8012038:	fab5 f585 	clz	r5, r5
 801203c:	006d      	lsls	r5, r5, #1
 801203e:	fa02 f505 	lsl.w	r5, r2, r5
 8012042:	ea4e 0505 	orr.w	r5, lr, r5
 8012046:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8012048:	f1bc 0f20 	cmp.w	ip, #32
 801204c:	d022      	beq.n	8012094 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801204e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8012052:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012054:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 8012058:	2b00      	cmp	r3, #0
 801205a:	d052      	beq.n	8012102 <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 801205c:	fab3 f383 	clz	r3, r3
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	2103      	movs	r1, #3
 8012064:	fa01 f303 	lsl.w	r3, r1, r3
 8012068:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801206c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8012070:	2800      	cmp	r0, #0
 8012072:	d048      	beq.n	8012106 <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 8012074:	fab0 f080 	clz	r0, r0
 8012078:	0040      	lsls	r0, r0, #1
 801207a:	fa0c f000 	lsl.w	r0, ip, r0
 801207e:	4318      	orrs	r0, r3
 8012080:	6020      	str	r0, [r4, #0]
}
 8012082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8012084:	2520      	movs	r5, #32
 8012086:	e7b4      	b.n	8011ff2 <gpio_stm32_configure_raw+0x30>
 8012088:	2520      	movs	r5, #32
 801208a:	e7be      	b.n	801200a <gpio_stm32_configure_raw+0x48>
 801208c:	2520      	movs	r5, #32
 801208e:	e7c9      	b.n	8012024 <gpio_stm32_configure_raw+0x62>
 8012090:	2520      	movs	r5, #32
 8012092:	e7d3      	b.n	801203c <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 8012094:	2907      	cmp	r1, #7
 8012096:	dc19      	bgt.n	80120cc <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8012098:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801209a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 801209e:	b18a      	cbz	r2, 80120c4 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 80120a0:	fab2 f282 	clz	r2, r2
 80120a4:	0092      	lsls	r2, r2, #2
 80120a6:	250f      	movs	r5, #15
 80120a8:	fa05 f202 	lsl.w	r2, r5, r2
 80120ac:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120b0:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80120b4:	b142      	cbz	r2, 80120c8 <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 80120b6:	fab2 f282 	clz	r2, r2
 80120ba:	0092      	lsls	r2, r2, #2
 80120bc:	4093      	lsls	r3, r2
 80120be:	430b      	orrs	r3, r1
 80120c0:	6223      	str	r3, [r4, #32]
}
 80120c2:	e7c4      	b.n	801204e <gpio_stm32_configure_raw+0x8c>
    return 32U;
 80120c4:	2220      	movs	r2, #32
 80120c6:	e7ed      	b.n	80120a4 <gpio_stm32_configure_raw+0xe2>
 80120c8:	2220      	movs	r2, #32
 80120ca:	e7f6      	b.n	80120ba <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80120cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80120ce:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120d0:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80120d4:	b189      	cbz	r1, 80120fa <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 80120d6:	fab1 f181 	clz	r1, r1
 80120da:	0089      	lsls	r1, r1, #2
 80120dc:	260f      	movs	r6, #15
 80120de:	fa06 f101 	lsl.w	r1, r6, r1
 80120e2:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80120e6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80120ea:	b142      	cbz	r2, 80120fe <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 80120ec:	fab2 f282 	clz	r2, r2
 80120f0:	0092      	lsls	r2, r2, #2
 80120f2:	4093      	lsls	r3, r2
 80120f4:	430b      	orrs	r3, r1
 80120f6:	6263      	str	r3, [r4, #36]	; 0x24
}
 80120f8:	e7a9      	b.n	801204e <gpio_stm32_configure_raw+0x8c>
    return 32U;
 80120fa:	2120      	movs	r1, #32
 80120fc:	e7ed      	b.n	80120da <gpio_stm32_configure_raw+0x118>
 80120fe:	2220      	movs	r2, #32
 8012100:	e7f6      	b.n	80120f0 <gpio_stm32_configure_raw+0x12e>
 8012102:	2320      	movs	r3, #32
 8012104:	e7ac      	b.n	8012060 <gpio_stm32_configure_raw+0x9e>
 8012106:	2020      	movs	r0, #32
 8012108:	e7b6      	b.n	8012078 <gpio_stm32_configure_raw+0xb6>

0801210a <gpio_stm32_config>:
{
 801210a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801210c:	b083      	sub	sp, #12
 801210e:	4607      	mov	r7, r0
 8012110:	460d      	mov	r5, r1
 8012112:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 8012114:	a901      	add	r1, sp, #4
 8012116:	4610      	mov	r0, r2
 8012118:	f7ff febf 	bl	8011e9a <gpio_stm32_flags_to_conf>
	if (err != 0) {
 801211c:	4606      	mov	r6, r0
 801211e:	b970      	cbnz	r0, 801213e <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 8012120:	f414 7f00 	tst.w	r4, #512	; 0x200
 8012124:	d005      	beq.n	8012132 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8012126:	f414 6f00 	tst.w	r4, #2048	; 0x800
 801212a:	d10b      	bne.n	8012144 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 801212c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8012130:	d10e      	bne.n	8012150 <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8012132:	2300      	movs	r3, #0
 8012134:	9a01      	ldr	r2, [sp, #4]
 8012136:	4629      	mov	r1, r5
 8012138:	4638      	mov	r0, r7
 801213a:	f7ff ff42 	bl	8011fc2 <gpio_stm32_configure_raw>
}
 801213e:	4630      	mov	r0, r6
 8012140:	b003      	add	sp, #12
 8012142:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8012144:	2101      	movs	r1, #1
 8012146:	40a9      	lsls	r1, r5
 8012148:	4638      	mov	r0, r7
 801214a:	f7ff fef0 	bl	8011f2e <gpio_stm32_port_set_bits_raw>
 801214e:	e7f0      	b.n	8012132 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8012150:	2101      	movs	r1, #1
 8012152:	40a9      	lsls	r1, r5
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff feef 	bl	8011f38 <gpio_stm32_port_clear_bits_raw>
 801215a:	e7ea      	b.n	8012132 <gpio_stm32_config+0x28>

0801215c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 801215c:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 801215e:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 8012160:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 8012162:	2101      	movs	r1, #1
 8012164:	f7f3 feca 	bl	8005efc <gpio_stm32_clock_request>
	if (ret < 0) {
 8012168:	2800      	cmp	r0, #0
 801216a:	db00      	blt.n	801216e <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 801216c:	2000      	movs	r0, #0
}
 801216e:	bd08      	pop	{r3, pc}

08012170 <gpio_stm32_configure>:
{
 8012170:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8012172:	f7ff ff26 	bl	8011fc2 <gpio_stm32_configure_raw>
}
 8012176:	2000      	movs	r0, #0
 8012178:	bd08      	pop	{r3, pc}

0801217a <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 801217a:	6341      	str	r1, [r0, #52]	; 0x34
}
 801217c:	4770      	bx	lr

0801217e <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 801217e:	6381      	str	r1, [r0, #56]	; 0x38
}
 8012180:	4770      	bx	lr

08012182 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8012182:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8012184:	4770      	bx	lr

08012186 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012186:	6401      	str	r1, [r0, #64]	; 0x40
}
 8012188:	4770      	bx	lr

0801218a <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 801218a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801218c:	6581      	str	r1, [r0, #88]	; 0x58
}
 801218e:	4770      	bx	lr

08012190 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 8012190:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8012192:	4770      	bx	lr

08012194 <get_polarity>:
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 8012194:	f010 0f01 	tst.w	r0, #1
 8012198:	d001      	beq.n	801219e <get_polarity+0xa>
	return LL_TIM_OCPOLARITY_LOW;
 801219a:	2002      	movs	r0, #2
 801219c:	4770      	bx	lr
		return LL_TIM_OCPOLARITY_HIGH;
 801219e:	2000      	movs	r0, #0
}
 80121a0:	4770      	bx	lr

080121a2 <pwm_stm32_get_cycles_per_sec>:
	struct pwm_stm32_data *data = dev->data;
 80121a2:	6903      	ldr	r3, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80121a4:	6841      	ldr	r1, [r0, #4]
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	6849      	ldr	r1, [r1, #4]
 80121aa:	3101      	adds	r1, #1
 80121ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80121b0:	2000      	movs	r0, #0
 80121b2:	6013      	str	r3, [r2, #0]
 80121b4:	6050      	str	r0, [r2, #4]
}
 80121b6:	4770      	bx	lr

080121b8 <spi_stm32_transfer_ongoing>:
	return !!(ctx->tx_len);
 80121b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80121ba:	b91b      	cbnz	r3, 80121c4 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 80121bc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80121be:	b91b      	cbnz	r3, 80121c8 <spi_stm32_transfer_ongoing+0x10>
 80121c0:	2000      	movs	r0, #0
 80121c2:	4770      	bx	lr
 80121c4:	2001      	movs	r0, #1
 80121c6:	4770      	bx	lr
 80121c8:	2001      	movs	r0, #1
}
 80121ca:	4770      	bx	lr

080121cc <z_log_msg2_runtime_create>:
{
 80121cc:	b510      	push	{r4, lr}
 80121ce:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80121d0:	ac0a      	add	r4, sp, #40	; 0x28
 80121d2:	9405      	str	r4, [sp, #20]
 80121d4:	9402      	str	r4, [sp, #8]
 80121d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80121d8:	9401      	str	r4, [sp, #4]
 80121da:	9c08      	ldr	r4, [sp, #32]
 80121dc:	9400      	str	r4, [sp, #0]
 80121de:	f7ff fac4 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 80121e2:	b006      	add	sp, #24
 80121e4:	bd10      	pop	{r4, pc}

080121e6 <wait_dma_rx_tx_done>:
{
 80121e6:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80121e8:	6904      	ldr	r4, [r0, #16]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 80121ea:	f104 0064 	add.w	r0, r4, #100	; 0x64
	return z_impl_k_sem_take(sem, timeout);
 80121ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80121f2:	2300      	movs	r3, #0
 80121f4:	f7fb ffc6 	bl	800e184 <z_impl_k_sem_take>
		if (res != 0) {
 80121f8:	4602      	mov	r2, r0
 80121fa:	b950      	cbnz	r0, 8012212 <wait_dma_rx_tx_done+0x2c>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 80121fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80121fe:	f013 0f01 	tst.w	r3, #1
 8012202:	d104      	bne.n	801220e <wait_dma_rx_tx_done+0x28>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 8012204:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8012206:	f013 0f06 	tst.w	r3, #6
 801220a:	d0ee      	beq.n	80121ea <wait_dma_rx_tx_done+0x4>
 801220c:	e001      	b.n	8012212 <wait_dma_rx_tx_done+0x2c>
			return -EIO;
 801220e:	f06f 0204 	mvn.w	r2, #4
}
 8012212:	4610      	mov	r0, r2
 8012214:	bd10      	pop	{r4, pc}

08012216 <spi_dma_move_buffers>:
{
 8012216:	b570      	push	{r4, r5, r6, lr}
 8012218:	4604      	mov	r4, r0
 801221a:	460d      	mov	r5, r1
	struct spi_stm32_data *data = dev->data;
 801221c:	6906      	ldr	r6, [r0, #16]
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 801221e:	f8b6 208e 	ldrh.w	r2, [r6, #142]	; 0x8e
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 8012222:	fbb1 f2f2 	udiv	r2, r1, r2
 8012226:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8012228:	f7f4 fb3a 	bl	80068a0 <spi_stm32_dma_rx_load>
	if (ret != 0) {
 801222c:	b100      	cbz	r0, 8012230 <spi_dma_move_buffers+0x1a>
}
 801222e:	bd70      	pop	{r4, r5, r6, pc}
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8012230:	f8b6 20d8 	ldrh.w	r2, [r6, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 8012234:	fbb5 f2f2 	udiv	r2, r5, r2
 8012238:	6d71      	ldr	r1, [r6, #84]	; 0x54
 801223a:	4620      	mov	r0, r4
 801223c:	f7f4 fb98 	bl	8006970 <spi_stm32_dma_tx_load>
	return ret;
 8012240:	e7f5      	b.n	801222e <spi_dma_move_buffers+0x18>

08012242 <spi_stm32_release>:
{
 8012242:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8012244:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	b1c3      	cbz	r3, 801227c <spi_stm32_release+0x3a>
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	b1b3      	cbz	r3, 801227c <spi_stm32_release+0x3a>
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	b1a2      	cbz	r2, 801227c <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 8012252:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8012254:	f7fc fece 	bl	800eff4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8012258:	6823      	ldr	r3, [r4, #0]
 801225a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 801225c:	6818      	ldr	r0, [r3, #0]
 801225e:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 8012260:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	2301      	movs	r3, #1
 8012266:	408b      	lsls	r3, r1
 8012268:	421a      	tst	r2, r3
 801226a:	d10b      	bne.n	8012284 <spi_stm32_release+0x42>
 801226c:	2300      	movs	r3, #0
	if (value != 0)	{
 801226e:	b15b      	cbz	r3, 8012288 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012270:	2301      	movs	r3, #1
 8012272:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012276:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	4798      	blx	r3
 801227c:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 801227e:	b153      	cbz	r3, 8012296 <spi_stm32_release+0x54>
}
 8012280:	2000      	movs	r0, #0
 8012282:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8012284:	2301      	movs	r3, #1
 8012286:	e7f2      	b.n	801226e <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012288:	2301      	movs	r3, #1
 801228a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 801228e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8012290:	691b      	ldr	r3, [r3, #16]
 8012292:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8012294:	e7f2      	b.n	801227c <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 8012296:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8012298:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 801229c:	f7fb ff4a 	bl	800e134 <z_impl_k_sem_give>
}
 80122a0:	e7ee      	b.n	8012280 <spi_stm32_release+0x3e>

080122a2 <spi_stm32_cs_control>:
{
 80122a2:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 80122a4:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d034      	beq.n	8012316 <spi_stm32_cs_control+0x74>
 80122ac:	689a      	ldr	r2, [r3, #8]
 80122ae:	2a00      	cmp	r2, #0
 80122b0:	d031      	beq.n	8012316 <spi_stm32_cs_control+0x74>
 80122b2:	6810      	ldr	r0, [r2, #0]
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d02e      	beq.n	8012316 <spi_stm32_cs_control+0x74>
		if (on) {
 80122b8:	b9c9      	cbnz	r1, 80122ee <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 80122ba:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 80122bc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80122c0:	d129      	bne.n	8012316 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 80122c2:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 80122c4:	f7fc fe96 	bl	800eff4 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 80122c8:	6823      	ldr	r3, [r4, #0]
 80122ca:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 80122d0:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	2301      	movs	r3, #1
 80122d6:	408b      	lsls	r3, r1
 80122d8:	421a      	tst	r2, r3
 80122da:	d126      	bne.n	801232a <spi_stm32_cs_control+0x88>
 80122dc:	2300      	movs	r3, #0
	if (value != 0)	{
 80122de:	b333      	cbz	r3, 801232e <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80122e0:	2301      	movs	r3, #1
 80122e2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80122e6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80122e8:	68db      	ldr	r3, [r3, #12]
 80122ea:	4798      	blx	r3
 80122ec:	e013      	b.n	8012316 <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 80122ee:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 80122f0:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	2301      	movs	r3, #1
 80122f6:	408b      	lsls	r3, r1
 80122f8:	421a      	tst	r2, r3
 80122fa:	d10d      	bne.n	8012318 <spi_stm32_cs_control+0x76>
 80122fc:	2301      	movs	r3, #1
	if (value != 0)	{
 80122fe:	b16b      	cbz	r3, 801231c <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8012300:	2301      	movs	r3, #1
 8012302:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012306:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	689b      	ldr	r3, [r3, #8]
 8012310:	6898      	ldr	r0, [r3, #8]
 8012312:	f7fc fe6f 	bl	800eff4 <z_impl_k_busy_wait>
}
 8012316:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8012318:	2300      	movs	r3, #0
 801231a:	e7f0      	b.n	80122fe <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801231c:	2301      	movs	r3, #1
 801231e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012322:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8012324:	691b      	ldr	r3, [r3, #16]
 8012326:	4798      	blx	r3
 8012328:	e7f0      	b.n	801230c <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 801232a:	2301      	movs	r3, #1
 801232c:	e7d7      	b.n	80122de <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 801232e:	2301      	movs	r3, #1
 8012330:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8012334:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8012336:	691b      	ldr	r3, [r3, #16]
 8012338:	4798      	blx	r3
 801233a:	e7ec      	b.n	8012316 <spi_stm32_cs_control+0x74>

0801233c <spi_stm32_complete>:
{
 801233c:	b510      	push	{r4, lr}
 801233e:	b082      	sub	sp, #8
	const struct spi_stm32_config *cfg = dev->config;
 8012340:	6843      	ldr	r3, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 8012342:	689c      	ldr	r4, [r3, #8]
	spi_stm32_cs_control(dev, false);
 8012344:	2100      	movs	r1, #0
 8012346:	f7ff ffac 	bl	80122a2 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	f013 0f01 	tst.w	r3, #1
 8012350:	d001      	beq.n	8012356 <spi_stm32_complete+0x1a>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8012352:	68e3      	ldr	r3, [r4, #12]
 8012354:	e7f9      	b.n	801234a <spi_stm32_complete+0xe>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 801235c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012360:	d010      	beq.n	8012384 <spi_stm32_complete+0x48>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8012362:	68a3      	ldr	r3, [r4, #8]
 8012364:	f013 0f20 	tst.w	r3, #32
 8012368:	d006      	beq.n	8012378 <spi_stm32_complete+0x3c>
  tmpreg_sr = SPIx->SR;
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 801236e:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012376:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801237e:	6023      	str	r3, [r4, #0]
}
 8012380:	b002      	add	sp, #8
 8012382:	bd10      	pop	{r4, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8012384:	68a3      	ldr	r3, [r4, #8]
 8012386:	f013 0f80 	tst.w	r3, #128	; 0x80
 801238a:	d1fb      	bne.n	8012384 <spi_stm32_complete+0x48>
 801238c:	e7e9      	b.n	8012362 <spi_stm32_complete+0x26>

0801238e <spi_stm32_shift_m>:
{
 801238e:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8012390:	6883      	ldr	r3, [r0, #8]
 8012392:	f013 0f02 	tst.w	r3, #2
 8012396:	d0fb      	beq.n	8012390 <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8012398:	680b      	ldr	r3, [r1, #0]
 801239a:	889b      	ldrh	r3, [r3, #4]
 801239c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80123a0:	2b08      	cmp	r3, #8
 80123a2:	d009      	beq.n	80123b8 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 80123a4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d03d      	beq.n	8012426 <spi_stm32_shift_m+0x98>
 80123aa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d13c      	bne.n	801242a <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 80123b0:	2a00      	cmp	r2, #0
 80123b2:	d03c      	beq.n	801242e <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	e03b      	b.n	8012430 <spi_stm32_shift_m+0xa2>
 80123b8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80123ba:	b18b      	cbz	r3, 80123e0 <spi_stm32_shift_m+0x52>
 80123bc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80123be:	b98a      	cbnz	r2, 80123e4 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 80123c0:	b192      	cbz	r2, 80123e8 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80123c2:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 80123c4:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 80123c6:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 80123c8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d03a      	beq.n	8012444 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 80123ce:	3b01      	subs	r3, #1
 80123d0:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80123d2:	b15b      	cbz	r3, 80123ec <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 80123d4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d034      	beq.n	8012444 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 80123da:	3301      	adds	r3, #1
 80123dc:	654b      	str	r3, [r1, #84]	; 0x54
 80123de:	e031      	b.n	8012444 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 80123e0:	2200      	movs	r2, #0
 80123e2:	e7ed      	b.n	80123c0 <spi_stm32_shift_m+0x32>
 80123e4:	2201      	movs	r2, #1
 80123e6:	e7eb      	b.n	80123c0 <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 80123e8:	2300      	movs	r3, #0
 80123ea:	e7eb      	b.n	80123c4 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 80123ec:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80123ee:	3308      	adds	r3, #8
 80123f0:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 80123f2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80123f4:	3b01      	subs	r3, #1
 80123f6:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 80123f8:	f101 0444 	add.w	r4, r1, #68	; 0x44
 80123fc:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8012400:	e004      	b.n	801240c <spi_stm32_shift_m+0x7e>
		++(*current);
 8012402:	3308      	adds	r3, #8
 8012404:	6023      	str	r3, [r4, #0]
		--(*count);
 8012406:	6813      	ldr	r3, [r2, #0]
 8012408:	3b01      	subs	r3, #1
 801240a:	6013      	str	r3, [r2, #0]
	while (*count) {
 801240c:	6813      	ldr	r3, [r2, #0]
 801240e:	b13b      	cbz	r3, 8012420 <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 8012410:	6823      	ldr	r3, [r4, #0]
 8012412:	685d      	ldr	r5, [r3, #4]
 8012414:	2d00      	cmp	r5, #0
 8012416:	d0f4      	beq.n	8012402 <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 8012418:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 801241a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	e000      	b.n	8012422 <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 8012420:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8012422:	654b      	str	r3, [r1, #84]	; 0x54
 8012424:	e00e      	b.n	8012444 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 8012426:	2200      	movs	r2, #0
 8012428:	e7c2      	b.n	80123b0 <spi_stm32_shift_m+0x22>
 801242a:	2201      	movs	r2, #1
 801242c:	e7c0      	b.n	80123b0 <spi_stm32_shift_m+0x22>
 801242e:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8012430:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8012432:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8012434:	b133      	cbz	r3, 8012444 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 8012436:	3b01      	subs	r3, #1
 8012438:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 801243a:	b31b      	cbz	r3, 8012484 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 801243c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 801243e:	b10b      	cbz	r3, 8012444 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 8012440:	3302      	adds	r3, #2
 8012442:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8012444:	6883      	ldr	r3, [r0, #8]
 8012446:	f013 0f01 	tst.w	r3, #1
 801244a:	d0fb      	beq.n	8012444 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 801244c:	680b      	ldr	r3, [r1, #0]
 801244e:	889b      	ldrh	r3, [r3, #4]
 8012450:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8012454:	2b08      	cmp	r3, #8
 8012456:	d035      	beq.n	80124c4 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 8012458:	68c3      	ldr	r3, [r0, #12]
 801245a:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 801245c:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 801245e:	2a00      	cmp	r2, #0
 8012460:	d065      	beq.n	801252e <spi_stm32_shift_m+0x1a0>
 8012462:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8012464:	2800      	cmp	r0, #0
 8012466:	d164      	bne.n	8012532 <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8012468:	b100      	cbz	r0, 801246c <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 801246a:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 801246c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 801246e:	b13b      	cbz	r3, 8012480 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 8012470:	3b01      	subs	r3, #1
 8012472:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 8012474:	2b00      	cmp	r3, #0
 8012476:	d05e      	beq.n	8012536 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 8012478:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 801247a:	b10b      	cbz	r3, 8012480 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 801247c:	3302      	adds	r3, #2
 801247e:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8012480:	bc30      	pop	{r4, r5}
 8012482:	4770      	bx	lr
		++ctx->current_tx;
 8012484:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8012486:	3308      	adds	r3, #8
 8012488:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801248a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 801248c:	3b01      	subs	r3, #1
 801248e:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8012490:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8012494:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 8012498:	e005      	b.n	80124a6 <spi_stm32_shift_m+0x118>
		++(*current);
 801249a:	3308      	adds	r3, #8
 801249c:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 80124a0:	6813      	ldr	r3, [r2, #0]
 80124a2:	3b01      	subs	r3, #1
 80124a4:	6013      	str	r3, [r2, #0]
	while (*count) {
 80124a6:	6813      	ldr	r3, [r2, #0]
 80124a8:	b14b      	cbz	r3, 80124be <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 80124aa:	f8dc 3000 	ldr.w	r3, [ip]
 80124ae:	685c      	ldr	r4, [r3, #4]
 80124b0:	2c01      	cmp	r4, #1
 80124b2:	d9f2      	bls.n	801249a <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 80124b4:	0864      	lsrs	r4, r4, #1
 80124b6:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 80124b8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	e000      	b.n	80124c0 <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 80124be:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 80124c0:	654b      	str	r3, [r1, #84]	; 0x54
 80124c2:	e7bf      	b.n	8012444 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 80124c4:	68c3      	ldr	r3, [r0, #12]
 80124c6:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 80124c8:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80124ca:	b17a      	cbz	r2, 80124ec <spi_stm32_shift_m+0x15e>
 80124cc:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80124ce:	b978      	cbnz	r0, 80124f0 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 80124d0:	b100      	cbz	r0, 80124d4 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 80124d2:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 80124d4:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d0d2      	beq.n	8012480 <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 80124da:	3b01      	subs	r3, #1
 80124dc:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80124de:	b14b      	cbz	r3, 80124f4 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 80124e0:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0cc      	beq.n	8012480 <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 80124e6:	3301      	adds	r3, #1
 80124e8:	65cb      	str	r3, [r1, #92]	; 0x5c
 80124ea:	e7c9      	b.n	8012480 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 80124ec:	2000      	movs	r0, #0
 80124ee:	e7ef      	b.n	80124d0 <spi_stm32_shift_m+0x142>
 80124f0:	2001      	movs	r0, #1
 80124f2:	e7ed      	b.n	80124d0 <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 80124f4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80124f6:	3308      	adds	r3, #8
 80124f8:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 80124fa:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80124fc:	3b01      	subs	r3, #1
 80124fe:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8012500:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 8012504:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 8012508:	e004      	b.n	8012514 <spi_stm32_shift_m+0x186>
		++(*current);
 801250a:	3308      	adds	r3, #8
 801250c:	6003      	str	r3, [r0, #0]
		--(*count);
 801250e:	6813      	ldr	r3, [r2, #0]
 8012510:	3b01      	subs	r3, #1
 8012512:	6013      	str	r3, [r2, #0]
	while (*count) {
 8012514:	6813      	ldr	r3, [r2, #0]
 8012516:	b13b      	cbz	r3, 8012528 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 8012518:	6803      	ldr	r3, [r0, #0]
 801251a:	685c      	ldr	r4, [r3, #4]
 801251c:	2c00      	cmp	r4, #0
 801251e:	d0f4      	beq.n	801250a <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 8012520:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 8012522:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	e000      	b.n	801252a <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 8012528:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801252a:	65cb      	str	r3, [r1, #92]	; 0x5c
 801252c:	e7a8      	b.n	8012480 <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 801252e:	2000      	movs	r0, #0
 8012530:	e79a      	b.n	8012468 <spi_stm32_shift_m+0xda>
 8012532:	2001      	movs	r0, #1
 8012534:	e798      	b.n	8012468 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 8012536:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8012538:	3308      	adds	r3, #8
 801253a:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 801253c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 801253e:	3b01      	subs	r3, #1
 8012540:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 8012542:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 8012546:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 801254a:	e004      	b.n	8012556 <spi_stm32_shift_m+0x1c8>
		++(*current);
 801254c:	3308      	adds	r3, #8
 801254e:	6023      	str	r3, [r4, #0]
		--(*count);
 8012550:	6813      	ldr	r3, [r2, #0]
 8012552:	3b01      	subs	r3, #1
 8012554:	6013      	str	r3, [r2, #0]
	while (*count) {
 8012556:	6813      	ldr	r3, [r2, #0]
 8012558:	b143      	cbz	r3, 801256c <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 801255a:	6823      	ldr	r3, [r4, #0]
 801255c:	6858      	ldr	r0, [r3, #4]
 801255e:	2801      	cmp	r0, #1
 8012560:	d9f4      	bls.n	801254c <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 8012562:	0840      	lsrs	r0, r0, #1
 8012564:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8012566:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	e000      	b.n	801256e <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 801256c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801256e:	65cb      	str	r3, [r1, #92]	; 0x5c
 8012570:	e786      	b.n	8012480 <spi_stm32_shift_m+0xf2>

08012572 <spi_stm32_shift_s>:
{
 8012572:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8012574:	6883      	ldr	r3, [r0, #8]
 8012576:	f013 0f02 	tst.w	r3, #2
 801257a:	d065      	beq.n	8012648 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 801257c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 801257e:	2b00      	cmp	r3, #0
 8012580:	d062      	beq.n	8012648 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8012582:	680b      	ldr	r3, [r1, #0]
 8012584:	889b      	ldrh	r3, [r3, #4]
 8012586:	f3c3 1345 	ubfx	r3, r3, #5, #6
 801258a:	2b08      	cmp	r3, #8
 801258c:	d00f      	beq.n	80125ae <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 801258e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012590:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 8012592:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8012594:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8012596:	2b00      	cmp	r3, #0
 8012598:	d05a      	beq.n	8012650 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 801259a:	3b01      	subs	r3, #1
 801259c:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d032      	beq.n	8012608 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 80125a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d053      	beq.n	8012650 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80125a8:	3302      	adds	r3, #2
 80125aa:	654b      	str	r3, [r1, #84]	; 0x54
 80125ac:	e050      	b.n	8012650 <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80125ae:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80125b0:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 80125b2:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 80125b4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d04a      	beq.n	8012650 <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 80125ba:	3b01      	subs	r3, #1
 80125bc:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 80125be:	b12b      	cbz	r3, 80125cc <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 80125c0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d044      	beq.n	8012650 <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 80125c6:	3301      	adds	r3, #1
 80125c8:	654b      	str	r3, [r1, #84]	; 0x54
 80125ca:	e041      	b.n	8012650 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 80125cc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80125ce:	3308      	adds	r3, #8
 80125d0:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 80125d2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80125d4:	3b01      	subs	r3, #1
 80125d6:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 80125d8:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 80125dc:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 80125e0:	6813      	ldr	r3, [r2, #0]
 80125e2:	b173      	cbz	r3, 8012602 <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 80125e4:	f8dc 3000 	ldr.w	r3, [ip]
 80125e8:	685c      	ldr	r4, [r3, #4]
 80125ea:	b934      	cbnz	r4, 80125fa <spi_stm32_shift_s+0x88>
		++(*current);
 80125ec:	3308      	adds	r3, #8
 80125ee:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 80125f2:	6813      	ldr	r3, [r2, #0]
 80125f4:	3b01      	subs	r3, #1
 80125f6:	6013      	str	r3, [r2, #0]
 80125f8:	e7f2      	b.n	80125e0 <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 80125fa:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 80125fc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	e000      	b.n	8012604 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 8012602:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8012604:	654b      	str	r3, [r1, #84]	; 0x54
 8012606:	e023      	b.n	8012650 <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 8012608:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801260a:	3308      	adds	r3, #8
 801260c:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 801260e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8012610:	3b01      	subs	r3, #1
 8012612:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 8012614:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 8012618:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 801261c:	6813      	ldr	r3, [r2, #0]
 801261e:	b183      	cbz	r3, 8012642 <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 8012620:	f8dc 3000 	ldr.w	r3, [ip]
 8012624:	685c      	ldr	r4, [r3, #4]
 8012626:	2c01      	cmp	r4, #1
 8012628:	d806      	bhi.n	8012638 <spi_stm32_shift_s+0xc6>
		++(*current);
 801262a:	3308      	adds	r3, #8
 801262c:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 8012630:	6813      	ldr	r3, [r2, #0]
 8012632:	3b01      	subs	r3, #1
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	e7f1      	b.n	801261c <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 8012638:	0864      	lsrs	r4, r4, #1
 801263a:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 801263c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	e000      	b.n	8012644 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 8012642:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8012644:	654b      	str	r3, [r1, #84]	; 0x54
 8012646:	e003      	b.n	8012650 <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8012648:	6843      	ldr	r3, [r0, #4]
 801264a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801264e:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8012650:	6883      	ldr	r3, [r0, #8]
 8012652:	f013 0f01 	tst.w	r3, #1
 8012656:	d016      	beq.n	8012686 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 8012658:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 801265a:	b1b3      	cbz	r3, 801268a <spi_stm32_shift_s+0x118>
 801265c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 801265e:	b9b2      	cbnz	r2, 801268e <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 8012660:	b18a      	cbz	r2, 8012686 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8012662:	680a      	ldr	r2, [r1, #0]
 8012664:	8892      	ldrh	r2, [r2, #4]
 8012666:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801266a:	2a08      	cmp	r2, #8
 801266c:	d011      	beq.n	8012692 <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 801266e:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8012670:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8012672:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8012674:	b13b      	cbz	r3, 8012686 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 8012676:	3b01      	subs	r3, #1
 8012678:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 801267a:	2b00      	cmp	r3, #0
 801267c:	d033      	beq.n	80126e6 <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 801267e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8012680:	b10b      	cbz	r3, 8012686 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 8012682:	3302      	adds	r3, #2
 8012684:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8012686:	bc10      	pop	{r4}
 8012688:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 801268a:	2200      	movs	r2, #0
 801268c:	e7e8      	b.n	8012660 <spi_stm32_shift_s+0xee>
 801268e:	2201      	movs	r2, #1
 8012690:	e7e6      	b.n	8012660 <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 8012692:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8012694:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8012696:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 8012698:	2b00      	cmp	r3, #0
 801269a:	d0f4      	beq.n	8012686 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 801269c:	3b01      	subs	r3, #1
 801269e:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 80126a0:	b12b      	cbz	r3, 80126ae <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 80126a2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d0ee      	beq.n	8012686 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 80126a8:	3301      	adds	r3, #1
 80126aa:	65cb      	str	r3, [r1, #92]	; 0x5c
 80126ac:	e7eb      	b.n	8012686 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 80126ae:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80126b0:	3308      	adds	r3, #8
 80126b2:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 80126b4:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80126b6:	3b01      	subs	r3, #1
 80126b8:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80126ba:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 80126be:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 80126c2:	6813      	ldr	r3, [r2, #0]
 80126c4:	b163      	cbz	r3, 80126e0 <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 80126c6:	6823      	ldr	r3, [r4, #0]
 80126c8:	6858      	ldr	r0, [r3, #4]
 80126ca:	b928      	cbnz	r0, 80126d8 <spi_stm32_shift_s+0x166>
		++(*current);
 80126cc:	3308      	adds	r3, #8
 80126ce:	6023      	str	r3, [r4, #0]
		--(*count);
 80126d0:	6813      	ldr	r3, [r2, #0]
 80126d2:	3b01      	subs	r3, #1
 80126d4:	6013      	str	r3, [r2, #0]
 80126d6:	e7f4      	b.n	80126c2 <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 80126d8:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 80126da:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	e000      	b.n	80126e2 <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 80126e0:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 80126e2:	65cb      	str	r3, [r1, #92]	; 0x5c
 80126e4:	e7cf      	b.n	8012686 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 80126e6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80126e8:	3308      	adds	r3, #8
 80126ea:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 80126ec:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80126ee:	3b01      	subs	r3, #1
 80126f0:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 80126f2:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 80126f6:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 80126fa:	6813      	ldr	r3, [r2, #0]
 80126fc:	b173      	cbz	r3, 801271c <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 80126fe:	6823      	ldr	r3, [r4, #0]
 8012700:	6858      	ldr	r0, [r3, #4]
 8012702:	2801      	cmp	r0, #1
 8012704:	d805      	bhi.n	8012712 <spi_stm32_shift_s+0x1a0>
		++(*current);
 8012706:	3308      	adds	r3, #8
 8012708:	6023      	str	r3, [r4, #0]
		--(*count);
 801270a:	6813      	ldr	r3, [r2, #0]
 801270c:	3b01      	subs	r3, #1
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	e7f3      	b.n	80126fa <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 8012712:	0840      	lsrs	r0, r0, #1
 8012714:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 8012716:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	e000      	b.n	801271e <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 801271c:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 801271e:	65cb      	str	r3, [r1, #92]	; 0x5c
 8012720:	e7b1      	b.n	8012686 <spi_stm32_shift_s+0x114>

08012722 <spi_stm32_shift_frames>:
{
 8012722:	b510      	push	{r4, lr}
 8012724:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8012726:	680b      	ldr	r3, [r1, #0]
 8012728:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 801272a:	f013 0f01 	tst.w	r3, #1
 801272e:	d105      	bne.n	801273c <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8012730:	f7ff fe2d 	bl	801238e <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8012734:	4620      	mov	r0, r4
 8012736:	f7f3 fed3 	bl	80064e0 <spi_stm32_get_err>
}
 801273a:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 801273c:	f7ff ff19 	bl	8012572 <spi_stm32_shift_s>
 8012740:	e7f8      	b.n	8012734 <spi_stm32_shift_frames+0x12>

08012742 <transceive>:
{
 8012742:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012746:	4606      	mov	r6, r0
 8012748:	4688      	mov	r8, r1
 801274a:	461f      	mov	r7, r3
 801274c:	f89d 1020 	ldrb.w	r1, [sp, #32]
	const struct spi_stm32_config *cfg = dev->config;
 8012750:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8012752:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8012754:	689d      	ldr	r5, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8012756:	4691      	mov	r9, r2
 8012758:	b322      	cbz	r2, 80127a4 <transceive+0x62>
	if (asynchronous) {
 801275a:	2900      	cmp	r1, #0
 801275c:	f040 8092 	bne.w	8012884 <transceive+0x142>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8012760:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8012764:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8012768:	d004      	beq.n	8012774 <transceive+0x32>
 801276a:	69a3      	ldr	r3, [r4, #24]
 801276c:	b913      	cbnz	r3, 8012774 <transceive+0x32>
		(ctx->owner == spi_cfg)) {
 801276e:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8012770:	4598      	cmp	r8, r3
 8012772:	d009      	beq.n	8012788 <transceive+0x46>
	k_sem_take(&ctx->lock, K_FOREVER);
 8012774:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 8012778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012780:	f7fb fd00 	bl	800e184 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8012784:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 8012788:	4641      	mov	r1, r8
 801278a:	4630      	mov	r0, r6
 801278c:	f7f3 ff44 	bl	8006618 <spi_stm32_configure>
	if (ret) {
 8012790:	4680      	mov	r8, r0
 8012792:	b160      	cbz	r0, 80127ae <transceive+0x6c>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8012794:	6823      	ldr	r3, [r4, #0]
 8012796:	889b      	ldrh	r3, [r3, #4]
 8012798:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801279c:	d06b      	beq.n	8012876 <transceive+0x134>
}
 801279e:	4640      	mov	r0, r8
 80127a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 80127a4:	2f00      	cmp	r7, #0
 80127a6:	d1d8      	bne.n	801275a <transceive+0x18>
		return 0;
 80127a8:	f04f 0800 	mov.w	r8, #0
 80127ac:	e7f7      	b.n	801279e <transceive+0x5c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80127ae:	f1b9 0f00 	cmp.w	r9, #0
 80127b2:	d00b      	beq.n	80127cc <transceive+0x8a>
 80127b4:	f8d9 3000 	ldr.w	r3, [r9]
 80127b8:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80127ba:	b14b      	cbz	r3, 80127d0 <transceive+0x8e>
 80127bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127c0:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 80127c2:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80127c6:	f104 0348 	add.w	r3, r4, #72	; 0x48
	while (*count) {
 80127ca:	e008      	b.n	80127de <transceive+0x9c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80127cc:	464b      	mov	r3, r9
 80127ce:	e7f3      	b.n	80127b8 <transceive+0x76>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80127d0:	2300      	movs	r3, #0
 80127d2:	e7f5      	b.n	80127c0 <transceive+0x7e>
		++(*current);
 80127d4:	3208      	adds	r2, #8
 80127d6:	600a      	str	r2, [r1, #0]
		--(*count);
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	3a01      	subs	r2, #1
 80127dc:	601a      	str	r2, [r3, #0]
	while (*count) {
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	b13a      	cbz	r2, 80127f2 <transceive+0xb0>
		if (((*current)->len / dfs) != 0) {
 80127e2:	680a      	ldr	r2, [r1, #0]
 80127e4:	6850      	ldr	r0, [r2, #4]
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d0f4      	beq.n	80127d4 <transceive+0x92>
			*buf_len = (*current)->len / dfs;
 80127ea:	65a0      	str	r0, [r4, #88]	; 0x58
			return (*current)->buf;
 80127ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	e001      	b.n	80127f6 <transceive+0xb4>
	*buf_len = 0;
 80127f2:	2300      	movs	r3, #0
 80127f4:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 80127f6:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 80127f8:	b19f      	cbz	r7, 8012822 <transceive+0xe0>
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80127fe:	b193      	cbz	r3, 8012826 <transceive+0xe4>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8012804:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8012808:	f104 0250 	add.w	r2, r4, #80	; 0x50
	while (*count) {
 801280c:	6813      	ldr	r3, [r2, #0]
 801280e:	b183      	cbz	r3, 8012832 <transceive+0xf0>
		if (((*current)->len / dfs) != 0) {
 8012810:	680b      	ldr	r3, [r1, #0]
 8012812:	6858      	ldr	r0, [r3, #4]
 8012814:	b948      	cbnz	r0, 801282a <transceive+0xe8>
		++(*current);
 8012816:	3308      	adds	r3, #8
 8012818:	600b      	str	r3, [r1, #0]
		--(*count);
 801281a:	6813      	ldr	r3, [r2, #0]
 801281c:	3b01      	subs	r3, #1
 801281e:	6013      	str	r3, [r2, #0]
 8012820:	e7f4      	b.n	801280c <transceive+0xca>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8012822:	463b      	mov	r3, r7
 8012824:	e7ea      	b.n	80127fc <transceive+0xba>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8012826:	2300      	movs	r3, #0
 8012828:	e7eb      	b.n	8012802 <transceive+0xc0>
			*buf_len = (*current)->len / dfs;
 801282a:	6620      	str	r0, [r4, #96]	; 0x60
			return (*current)->buf;
 801282c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	e000      	b.n	8012834 <transceive+0xf2>
	*buf_len = 0;
 8012832:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8012834:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
 8012836:	2300      	movs	r3, #0
 8012838:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 801283a:	68ab      	ldr	r3, [r5, #8]
 801283c:	f013 0f01 	tst.w	r3, #1
 8012840:	d001      	beq.n	8012846 <transceive+0x104>
  return (uint8_t)(READ_REG(SPIx->DR));
 8012842:	68eb      	ldr	r3, [r5, #12]
 8012844:	e7f9      	b.n	801283a <transceive+0xf8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8012846:	682b      	ldr	r3, [r5, #0]
 8012848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801284c:	602b      	str	r3, [r5, #0]
	spi_stm32_cs_control(dev, true);
 801284e:	2101      	movs	r1, #1
 8012850:	4630      	mov	r0, r6
 8012852:	f7ff fd26 	bl	80122a2 <spi_stm32_cs_control>
		ret = spi_stm32_shift_frames(spi, data);
 8012856:	4621      	mov	r1, r4
 8012858:	4628      	mov	r0, r5
 801285a:	f7ff ff62 	bl	8012722 <spi_stm32_shift_frames>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 801285e:	4680      	mov	r8, r0
 8012860:	b920      	cbnz	r0, 801286c <transceive+0x12a>
 8012862:	4620      	mov	r0, r4
 8012864:	f7ff fca8 	bl	80121b8 <spi_stm32_transfer_ongoing>
 8012868:	2800      	cmp	r0, #0
 801286a:	d1f4      	bne.n	8012856 <transceive+0x114>
	spi_stm32_complete(dev, ret);
 801286c:	4641      	mov	r1, r8
 801286e:	4630      	mov	r0, r6
 8012870:	f7ff fd64 	bl	801233c <spi_stm32_complete>
 8012874:	e78e      	b.n	8012794 <transceive+0x52>
		ctx->owner = NULL;
 8012876:	2300      	movs	r3, #0
 8012878:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 801287a:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 801287e:	f7fb fc59 	bl	800e134 <z_impl_k_sem_give>
}
 8012882:	e78c      	b.n	801279e <transceive+0x5c>
		return -ENOTSUP;
 8012884:	f06f 0885 	mvn.w	r8, #133	; 0x85
 8012888:	e789      	b.n	801279e <transceive+0x5c>

0801288a <spi_stm32_transceive>:
{
 801288a:	b530      	push	{r4, r5, lr}
 801288c:	b083      	sub	sp, #12
	struct spi_stm32_data *data = dev->data;
 801288e:	6904      	ldr	r4, [r0, #16]
	if ((data->dma_tx.dma_dev != NULL)
 8012890:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
 8012894:	b115      	cbz	r5, 801289c <spi_stm32_transceive+0x12>
	 && (data->dma_rx.dma_dev != NULL)) {
 8012896:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 801289a:	b934      	cbnz	r4, 80128aa <spi_stm32_transceive+0x20>
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 801289c:	2400      	movs	r4, #0
 801289e:	9401      	str	r4, [sp, #4]
 80128a0:	9400      	str	r4, [sp, #0]
 80128a2:	f7ff ff4e 	bl	8012742 <transceive>
}
 80128a6:	b003      	add	sp, #12
 80128a8:	bd30      	pop	{r4, r5, pc}
		return transceive_dma(dev, config, tx_bufs, rx_bufs,
 80128aa:	2400      	movs	r4, #0
 80128ac:	9401      	str	r4, [sp, #4]
 80128ae:	9400      	str	r4, [sp, #0]
 80128b0:	f7f4 f9e8 	bl	8006c84 <transceive_dma>
 80128b4:	e7f7      	b.n	80128a6 <spi_stm32_transceive+0x1c>

080128b6 <timer_work_handler>:
{
 80128b6:	b508      	push	{r3, lr}
	TimerIrqHandler();
 80128b8:	f7f5 fc52 	bl	8008160 <TimerIrqHandler>
}
 80128bc:	bd08      	pop	{r3, pc}

080128be <RtcGetTimerValue>:
{
 80128be:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80128c0:	f001 fc1a 	bl	80140f8 <z_impl_k_uptime_ticks>
 80128c4:	220a      	movs	r2, #10
 80128c6:	2300      	movs	r3, #0
 80128c8:	f7ee f938 	bl	8000b3c <__aeabi_uldivmod>
}
 80128cc:	bd08      	pop	{r3, pc}

080128ce <RtcGetMinimumTimeout>:
}
 80128ce:	2001      	movs	r0, #1
 80128d0:	4770      	bx	lr

080128d2 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 80128d2:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 80128d4:	0f81      	lsrs	r1, r0, #30
 80128d6:	0083      	lsls	r3, r0, #2
 80128d8:	1818      	adds	r0, r3, r0
 80128da:	f141 0100 	adc.w	r1, r1, #0
 80128de:	1800      	adds	r0, r0, r0
 80128e0:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 80128e2:	f7fc f9ad 	bl	800ec40 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 80128e6:	bd08      	pop	{r3, pc}

080128e8 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 80128e8:	4770      	bx	lr

080128ea <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 80128ea:	4770      	bx	lr

080128ec <BoardCriticalSectionBegin>:
	__asm__ volatile(
 80128ec:	f04f 0210 	mov.w	r2, #16
 80128f0:	f3ef 8311 	mrs	r3, BASEPRI
 80128f4:	f382 8812 	msr	BASEPRI_MAX, r2
 80128f8:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 80128fc:	6003      	str	r3, [r0, #0]
}
 80128fe:	4770      	bx	lr

08012900 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 8012900:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
}
 801290a:	4770      	bx	lr

0801290c <z_log_msg2_runtime_create>:
{
 801290c:	b510      	push	{r4, lr}
 801290e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8012910:	ac0a      	add	r4, sp, #40	; 0x28
 8012912:	9405      	str	r4, [sp, #20]
 8012914:	9402      	str	r4, [sp, #8]
 8012916:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012918:	9401      	str	r4, [sp, #4]
 801291a:	9c08      	ldr	r4, [sp, #32]
 801291c:	9400      	str	r4, [sp, #0]
 801291e:	f7fe ff24 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 8012922:	b006      	add	sp, #24
 8012924:	bd10      	pop	{r4, pc}

08012926 <clamp_int8>:
	if (x < min) {
 8012926:	4288      	cmp	r0, r1
 8012928:	db03      	blt.n	8012932 <clamp_int8+0xc>
	} else if (x > max) {
 801292a:	4290      	cmp	r0, r2
 801292c:	dd02      	ble.n	8012934 <clamp_int8+0xe>
		return max;
 801292e:	4610      	mov	r0, r2
 8012930:	4770      	bx	lr
		return min;
 8012932:	4608      	mov	r0, r1
}
 8012934:	4770      	bx	lr

08012936 <SX1276CheckRfFrequency>:
}
 8012936:	2001      	movs	r0, #1
 8012938:	4770      	bx	lr

0801293a <sx127x_antenna_configure>:
}
 801293a:	2000      	movs	r0, #0
 801293c:	4770      	bx	lr

0801293e <z_log_msg2_runtime_create>:
{
 801293e:	b510      	push	{r4, lr}
 8012940:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8012942:	ac0a      	add	r4, sp, #40	; 0x28
 8012944:	9405      	str	r4, [sp, #20]
 8012946:	9402      	str	r4, [sp, #8]
 8012948:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801294a:	9401      	str	r4, [sp, #4]
 801294c:	9c08      	ldr	r4, [sp, #32]
 801294e:	9400      	str	r4, [sp, #0]
 8012950:	f7fe ff0b 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 8012954:	b006      	add	sp, #24
 8012956:	bd10      	pop	{r4, pc}

08012958 <SX1276GetBoardTcxoWakeupTime>:
}
 8012958:	2000      	movs	r0, #0
 801295a:	4770      	bx	lr

0801295c <SX1276SetAntSwLowPower>:
}
 801295c:	4770      	bx	lr

0801295e <SX1276SetBoardTcxo>:
}
 801295e:	4770      	bx	lr

08012960 <SX1276SetAntSw>:
}
 8012960:	4770      	bx	lr

08012962 <sx127x_read>:
{
 8012962:	b508      	push	{r3, lr}
 8012964:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 8012966:	460a      	mov	r2, r1
 8012968:	2100      	movs	r1, #0
 801296a:	f7f4 ffe7 	bl	800793c <sx127x_transceive>
}
 801296e:	bd08      	pop	{r3, pc}

08012970 <sx127x_write>:
{
 8012970:	b508      	push	{r3, lr}
 8012972:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8012974:	460a      	mov	r2, r1
 8012976:	2101      	movs	r1, #1
 8012978:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 801297c:	f7f4 ffde 	bl	800793c <sx127x_transceive>
}
 8012980:	bd08      	pop	{r3, pc}

08012982 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8012982:	e004      	b.n	801298e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8012984:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012988:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801298c:	461a      	mov	r2, r3
 801298e:	1e53      	subs	r3, r2, #1
 8012990:	b29b      	uxth	r3, r3
 8012992:	2a00      	cmp	r2, #0
 8012994:	d1f6      	bne.n	8012984 <memcpy1+0x2>
    }
}
 8012996:	4770      	bx	lr

08012998 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 801299c:	f7ff ff97 	bl	80128ce <RtcGetMinimumTimeout>
 80129a0:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 80129a2:	2301      	movs	r3, #1
 80129a4:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80129a6:	6826      	ldr	r6, [r4, #0]
 80129a8:	f7f4 fb04 	bl	8006fb4 <RtcGetTimerElapsedTime>
 80129ac:	4428      	add	r0, r5
 80129ae:	4286      	cmp	r6, r0
 80129b0:	d303      	bcc.n	80129ba <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 80129b2:	6820      	ldr	r0, [r4, #0]
 80129b4:	f7f4 fb14 	bl	8006fe0 <RtcSetAlarm>
}
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80129ba:	f7f4 fafb 	bl	8006fb4 <RtcGetTimerElapsedTime>
 80129be:	4405      	add	r5, r0
 80129c0:	6025      	str	r5, [r4, #0]
 80129c2:	e7f6      	b.n	80129b2 <TimerSetTimeout+0x1a>

080129c4 <TimerInit>:
    obj->Timestamp = 0;
 80129c4:	2300      	movs	r3, #0
 80129c6:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 80129c8:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 80129ca:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 80129cc:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 80129ce:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 80129d0:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 80129d2:	6143      	str	r3, [r0, #20]
}
 80129d4:	4770      	bx	lr

080129d6 <TimerSetValue>:
{
 80129d6:	b538      	push	{r3, r4, r5, lr}
 80129d8:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 80129da:	4608      	mov	r0, r1
 80129dc:	f7ff ff84 	bl	80128e8 <RtcMs2Tick>
 80129e0:	4605      	mov	r5, r0
    TimerStop( obj );
 80129e2:	4620      	mov	r0, r4
 80129e4:	f7f5 fc00 	bl	80081e8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 80129e8:	f7ff ff71 	bl	80128ce <RtcGetMinimumTimeout>
    if( ticks < minValue )
 80129ec:	4285      	cmp	r5, r0
 80129ee:	d300      	bcc.n	80129f2 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 80129f0:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 80129f2:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 80129f4:	6060      	str	r0, [r4, #4]
}
 80129f6:	bd38      	pop	{r3, r4, r5, pc}

080129f8 <TimerGetCurrentTime>:
{
 80129f8:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 80129fa:	f7ff ff60 	bl	80128be <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 80129fe:	f7ff ff74 	bl	80128ea <RtcTick2Ms>
}
 8012a02:	bd08      	pop	{r3, pc}

08012a04 <TimerGetElapsedTime>:
{
 8012a04:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8012a06:	4604      	mov	r4, r0
 8012a08:	b908      	cbnz	r0, 8012a0e <TimerGetElapsedTime+0xa>
}
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 8012a0e:	f7ff ff56 	bl	80128be <RtcGetTimerValue>
 8012a12:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8012a14:	4620      	mov	r0, r4
 8012a16:	f7ff ff67 	bl	80128e8 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8012a1a:	1a28      	subs	r0, r5, r0
 8012a1c:	f7ff ff65 	bl	80128ea <RtcTick2Ms>
 8012a20:	4604      	mov	r4, r0
 8012a22:	e7f2      	b.n	8012a0a <TimerGetElapsedTime+0x6>

08012a24 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8012a24:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 8012a26:	f7ff ff54 	bl	80128d2 <DelayMsMcu>
}
 8012a2a:	bd08      	pop	{r3, pc}

08012a2c <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8012a2c:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8012a2e:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8012a32:	b2c3      	uxtb	r3, r0
 8012a34:	fb02 f303 	mul.w	r3, r2, r3
 8012a38:	3380      	adds	r3, #128	; 0x80
 8012a3a:	0a1b      	lsrs	r3, r3, #8
}
 8012a3c:	fb02 3001 	mla	r0, r2, r1, r3
 8012a40:	4770      	bx	lr

08012a42 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 8012a42:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8012a44:	b941      	cbnz	r1, 8012a58 <SX1276GetGfskTimeOnAirNumerator+0x16>
 8012a46:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 8012a48:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 8012a4a:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 8012a4c:	b133      	cbz	r3, 8012a5c <SX1276GetGfskTimeOnAirNumerator+0x1a>
 8012a4e:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 8012a50:	441a      	add	r2, r3
}
 8012a52:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8012a56:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 8012a58:	2100      	movs	r1, #0
 8012a5a:	e7f5      	b.n	8012a48 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e7f7      	b.n	8012a50 <SX1276GetGfskTimeOnAirNumerator+0xe>

08012a60 <SX1276GetLoRaTimeOnAirNumerator>:
{
 8012a60:	b570      	push	{r4, r5, r6, lr}
 8012a62:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012a66:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8012a6a:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8012a6c:	f1a1 0c05 	sub.w	ip, r1, #5
 8012a70:	f1bc 0f01 	cmp.w	ip, #1
 8012a74:	d932      	bls.n	8012adc <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012a76:	b918      	cbnz	r0, 8012a80 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 8012a78:	f1a1 060b 	sub.w	r6, r1, #11
 8012a7c:	2e01      	cmp	r6, #1
 8012a7e:	d935      	bls.n	8012aec <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 8012a80:	2801      	cmp	r0, #1
 8012a82:	d02f      	beq.n	8012ae4 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8012a84:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012a86:	f89d e014 	ldrb.w	lr, [sp, #20]
 8012a8a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8012a8e:	b38d      	cbz	r5, 8012af4 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 8012a90:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012a94:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8012a96:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8012a98:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8012a9c:	b36c      	cbz	r4, 8012afa <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 8012a9e:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8012aa2:	44f4      	add	ip, lr
    if( datarate <= 6 )
 8012aa4:	2906      	cmp	r1, #6
 8012aa6:	d904      	bls.n	8012ab2 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 8012aa8:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 8012aac:	b10e      	cbz	r6, 8012ab2 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 8012aae:	1e88      	subs	r0, r1, #2
 8012ab0:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 8012ab2:	f1bc 0f00 	cmp.w	ip, #0
 8012ab6:	db23      	blt.n	8012b00 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8012ab8:	4484      	add	ip, r0
 8012aba:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8012abe:	fb9c fcf0 	sdiv	ip, ip, r0
 8012ac2:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8012ac6:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 8012aca:	2906      	cmp	r1, #6
 8012acc:	d801      	bhi.n	8012ad2 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 8012ace:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8012ad2:	0080      	lsls	r0, r0, #2
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	3902      	subs	r1, #2
}
 8012ad8:	4088      	lsls	r0, r1
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8012adc:	2b0b      	cmp	r3, #11
 8012ade:	d8ca      	bhi.n	8012a76 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8012ae0:	230c      	movs	r3, #12
 8012ae2:	e7c8      	b.n	8012a76 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012ae4:	290c      	cmp	r1, #12
 8012ae6:	d003      	beq.n	8012af0 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8012ae8:	2600      	movs	r6, #0
 8012aea:	e7cc      	b.n	8012a86 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8012aec:	2601      	movs	r6, #1
 8012aee:	e7ca      	b.n	8012a86 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 8012af0:	2601      	movs	r6, #1
 8012af2:	e7c8      	b.n	8012a86 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8012af4:	f04f 0c00 	mov.w	ip, #0
 8012af8:	e7cc      	b.n	8012a94 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 8012afa:	f04f 0c14 	mov.w	ip, #20
 8012afe:	e7d0      	b.n	8012aa2 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8012b00:	f04f 0c00 	mov.w	ip, #0
 8012b04:	e7d8      	b.n	8012ab8 <SX1276GetLoRaTimeOnAirNumerator+0x58>

08012b06 <SX1276ReadFifo>:
{
 8012b06:	b508      	push	{r3, lr}
 8012b08:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8012b0a:	4601      	mov	r1, r0
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	f7f5 f865 	bl	8007bdc <SX1276ReadBuffer>
}
 8012b12:	bd08      	pop	{r3, pc}

08012b14 <SX1276WriteFifo>:
{
 8012b14:	b508      	push	{r3, lr}
 8012b16:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8012b18:	4601      	mov	r1, r0
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	f7f5 f9ae 	bl	8007e7c <SX1276WriteBuffer>
}
 8012b20:	bd08      	pop	{r3, pc}

08012b22 <SX1276GetTimeOnAir>:
{
 8012b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b24:	b085      	sub	sp, #20
 8012b26:	460e      	mov	r6, r1
 8012b28:	4615      	mov	r5, r2
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 8012b30:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 8012b34:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8012b38:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 8012b3c:	b148      	cbz	r0, 8012b52 <SX1276GetTimeOnAir+0x30>
 8012b3e:	2801      	cmp	r0, #1
 8012b40:	d010      	beq.n	8012b64 <SX1276GetTimeOnAir+0x42>
 8012b42:	2501      	movs	r5, #1
 8012b44:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 8012b46:	1960      	adds	r0, r4, r5
 8012b48:	3801      	subs	r0, #1
}
 8012b4a:	fbb0 f0f5 	udiv	r0, r0, r5
 8012b4e:	b005      	add	sp, #20
 8012b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8012b52:	463a      	mov	r2, r7
 8012b54:	4660      	mov	r0, ip
 8012b56:	f7ff ff74 	bl	8012a42 <SX1276GetGfskTimeOnAirNumerator>
 8012b5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012b5e:	fb00 f404 	mul.w	r4, r0, r4
        break;
 8012b62:	e7f0      	b.n	8012b46 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8012b64:	9302      	str	r3, [sp, #8]
 8012b66:	9701      	str	r7, [sp, #4]
 8012b68:	9100      	str	r1, [sp, #0]
 8012b6a:	4663      	mov	r3, ip
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f7ff ff76 	bl	8012a60 <SX1276GetLoRaTimeOnAirNumerator>
 8012b74:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012b78:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f7f5 fbaf 	bl	80082e0 <SX1276GetLoRaBandwidthInHz>
 8012b82:	4605      	mov	r5, r0
        break;
 8012b84:	e7df      	b.n	8012b46 <SX1276GetTimeOnAir+0x24>

08012b86 <SX1276Write>:
{
 8012b86:	b500      	push	{lr}
 8012b88:	b083      	sub	sp, #12
 8012b8a:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8012b8e:	2201      	movs	r2, #1
 8012b90:	f10d 0107 	add.w	r1, sp, #7
 8012b94:	f7f5 f972 	bl	8007e7c <SX1276WriteBuffer>
}
 8012b98:	b003      	add	sp, #12
 8012b9a:	f85d fb04 	ldr.w	pc, [sp], #4

08012b9e <SX1276Read>:
{
 8012b9e:	b500      	push	{lr}
 8012ba0:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	f10d 0107 	add.w	r1, sp, #7
 8012ba8:	f7f5 f818 	bl	8007bdc <SX1276ReadBuffer>
}
 8012bac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012bb0:	b003      	add	sp, #12
 8012bb2:	f85d fb04 	ldr.w	pc, [sp], #4

08012bb6 <SX1276SetOpMode>:
{
 8012bb6:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8012bb8:	4604      	mov	r4, r0
 8012bba:	b970      	cbnz	r0, 8012bda <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 8012bbc:	2001      	movs	r0, #1
 8012bbe:	f7ff fecd 	bl	801295c <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8012bc2:	2001      	movs	r0, #1
 8012bc4:	f7ff ffeb 	bl	8012b9e <SX1276Read>
 8012bc8:	b241      	sxtb	r1, r0
 8012bca:	f021 0107 	bic.w	r1, r1, #7
 8012bce:	4321      	orrs	r1, r4
 8012bd0:	b2c9      	uxtb	r1, r1
 8012bd2:	2001      	movs	r0, #1
 8012bd4:	f7ff ffd7 	bl	8012b86 <SX1276Write>
}
 8012bd8:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 8012bda:	2001      	movs	r0, #1
 8012bdc:	f7ff febf 	bl	801295e <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8012be0:	2000      	movs	r0, #0
 8012be2:	f7ff febb 	bl	801295c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8012be6:	4620      	mov	r0, r4
 8012be8:	f7ff feba 	bl	8012960 <SX1276SetAntSw>
 8012bec:	e7e9      	b.n	8012bc2 <SX1276SetOpMode+0xc>

08012bee <SX1276IsChannelFree>:
{
 8012bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf0:	4607      	mov	r7, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4616      	mov	r6, r2
 8012bf6:	461d      	mov	r5, r3
    SX1276SetSleep( );
 8012bf8:	f7f5 fecc 	bl	8008994 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	f7f6 f95f 	bl	8008ec0 <SX1276SetModem>
    SX1276SetChannel( freq );
 8012c02:	4638      	mov	r0, r7
 8012c04:	f7f5 fb96 	bl	8008334 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f7f5 fb41 	bl	8008290 <GetFskBandwidthRegValue>
 8012c0e:	4604      	mov	r4, r0
 8012c10:	4601      	mov	r1, r0
 8012c12:	2012      	movs	r0, #18
 8012c14:	f7ff ffb7 	bl	8012b86 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8012c18:	4621      	mov	r1, r4
 8012c1a:	2013      	movs	r0, #19
 8012c1c:	f7ff ffb3 	bl	8012b86 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8012c20:	2005      	movs	r0, #5
 8012c22:	f7ff ffc8 	bl	8012bb6 <SX1276SetOpMode>
    DelayMs( 1 );
 8012c26:	2001      	movs	r0, #1
 8012c28:	f7ff fefc 	bl	8012a24 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8012c2c:	f7ff fee4 	bl	80129f8 <TimerGetCurrentTime>
 8012c30:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8012c32:	4620      	mov	r0, r4
 8012c34:	f7ff fee6 	bl	8012a04 <TimerGetElapsedTime>
 8012c38:	42a8      	cmp	r0, r5
 8012c3a:	d206      	bcs.n	8012c4a <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	f7f6 f917 	bl	8008e70 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8012c42:	42b0      	cmp	r0, r6
 8012c44:	ddf5      	ble.n	8012c32 <SX1276IsChannelFree+0x44>
            status = false;
 8012c46:	2400      	movs	r4, #0
 8012c48:	e000      	b.n	8012c4c <SX1276IsChannelFree+0x5e>
    bool status = true;
 8012c4a:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8012c4c:	f7f5 fea2 	bl	8008994 <SX1276SetSleep>
}
 8012c50:	4620      	mov	r0, r4
 8012c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c54 <SX1276Random>:
{
 8012c54:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 8012c56:	2001      	movs	r0, #1
 8012c58:	f7f6 f932 	bl	8008ec0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8012c5c:	21ff      	movs	r1, #255	; 0xff
 8012c5e:	2011      	movs	r0, #17
 8012c60:	f7ff ff91 	bl	8012b86 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8012c64:	2005      	movs	r0, #5
 8012c66:	f7ff ffa6 	bl	8012bb6 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8012c6a:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 8012c6c:	462c      	mov	r4, r5
 8012c6e:	e00b      	b.n	8012c88 <SX1276Random+0x34>
        DelayMs( 1 );
 8012c70:	2001      	movs	r0, #1
 8012c72:	f7ff fed7 	bl	8012a24 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8012c76:	202c      	movs	r0, #44	; 0x2c
 8012c78:	f7ff ff91 	bl	8012b9e <SX1276Read>
 8012c7c:	f000 0001 	and.w	r0, r0, #1
 8012c80:	40a0      	lsls	r0, r4
 8012c82:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8012c84:	3401      	adds	r4, #1
 8012c86:	b2e4      	uxtb	r4, r4
 8012c88:	2c1f      	cmp	r4, #31
 8012c8a:	d9f1      	bls.n	8012c70 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8012c8c:	f7f5 fe82 	bl	8008994 <SX1276SetSleep>
}
 8012c90:	4628      	mov	r0, r5
 8012c92:	bd38      	pop	{r3, r4, r5, pc}

08012c94 <SX1276GetWakeupTime>:
{
 8012c94:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8012c96:	f7ff fe5f 	bl	8012958 <SX1276GetBoardTcxoWakeupTime>
}
 8012c9a:	3001      	adds	r0, #1
 8012c9c:	bd08      	pop	{r3, pc}

08012c9e <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 8012c9e:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012ca4:	6843      	ldr	r3, [r0, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8012cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012cb2:	d02f      	beq.n	8012d14 <uart_stm32_config_get+0x76>
 8012cb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012cb8:	d12e      	bne.n	8012d18 <uart_stm32_config_get+0x7a>
 8012cba:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8012cbc:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012cbe:	6843      	ldr	r3, [r0, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8012cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ccc:	d028      	beq.n	8012d20 <uart_stm32_config_get+0x82>
 8012cce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012cd2:	d027      	beq.n	8012d24 <uart_stm32_config_get+0x86>
 8012cd4:	b313      	cbz	r3, 8012d1c <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8012cd6:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8012cd8:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012cda:	6843      	ldr	r3, [r0, #4]
 8012cdc:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8012cde:	6813      	ldr	r3, [r2, #0]
 8012ce0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8012ce4:	6812      	ldr	r2, [r2, #0]
 8012ce6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 8012cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cee:	d01d      	beq.n	8012d2c <uart_stm32_config_get+0x8e>
 8012cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012cf4:	d11d      	bne.n	8012d32 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 8012cf6:	b1ba      	cbz	r2, 8012d28 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 8012cf8:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8012cfa:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012cfc:	6843      	ldr	r3, [r0, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8012d00:	689b      	ldr	r3, [r3, #8]
 8012d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8012d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012d0a:	d019      	beq.n	8012d40 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 8012d0c:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8012d0e:	71cb      	strb	r3, [r1, #7]
}
 8012d10:	2000      	movs	r0, #0
 8012d12:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8012d14:	2302      	movs	r3, #2
 8012d16:	e7d1      	b.n	8012cbc <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	e7cf      	b.n	8012cbc <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e7db      	b.n	8012cd8 <uart_stm32_config_get+0x3a>
	switch (sb) {
 8012d20:	2300      	movs	r3, #0
 8012d22:	e7d9      	b.n	8012cd8 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8012d24:	2302      	movs	r3, #2
 8012d26:	e7d7      	b.n	8012cd8 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 8012d28:	2302      	movs	r3, #2
 8012d2a:	e7e6      	b.n	8012cfa <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8012d2c:	b922      	cbnz	r2, 8012d38 <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 8012d2e:	2304      	movs	r3, #4
 8012d30:	e7e3      	b.n	8012cfa <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8012d32:	b91a      	cbnz	r2, 8012d3c <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 8012d34:	2303      	movs	r3, #3
 8012d36:	e7e0      	b.n	8012cfa <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	e7de      	b.n	8012cfa <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 8012d3c:	2302      	movs	r3, #2
 8012d3e:	e7dc      	b.n	8012cfa <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8012d40:	2301      	movs	r3, #1
 8012d42:	e7e4      	b.n	8012d0e <uart_stm32_config_get+0x70>

08012d44 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012d44:	6843      	ldr	r3, [r0, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8012d48:	69da      	ldr	r2, [r3, #28]
 8012d4a:	f012 0f08 	tst.w	r2, #8
 8012d4e:	d001      	beq.n	8012d54 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8012d50:	2208      	movs	r2, #8
 8012d52:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8012d54:	69da      	ldr	r2, [r3, #28]
 8012d56:	f012 0f20 	tst.w	r2, #32
 8012d5a:	d003      	beq.n	8012d64 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8012d5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8012d5e:	700b      	strb	r3, [r1, #0]
	return 0;
 8012d60:	2000      	movs	r0, #0
 8012d62:	4770      	bx	lr
		return -1;
 8012d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8012d68:	4770      	bx	lr

08012d6a <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012d6a:	6843      	ldr	r3, [r0, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8012d6e:	69da      	ldr	r2, [r3, #28]
 8012d70:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012d74:	d0fb      	beq.n	8012d6e <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 8012d76:	f04f 0010 	mov.w	r0, #16
 8012d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8012d7e:	f380 8812 	msr	BASEPRI_MAX, r0
 8012d82:	f3bf 8f6f 	isb	sy
 8012d86:	69d8      	ldr	r0, [r3, #28]
 8012d88:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012d8c:	d104      	bne.n	8012d98 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 8012d8e:	f382 8811 	msr	BASEPRI, r2
 8012d92:	f3bf 8f6f 	isb	sy
}
 8012d96:	e7ea      	b.n	8012d6e <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8012d98:	b289      	uxth	r1, r1
 8012d9a:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 8012d9c:	f382 8811 	msr	BASEPRI, r2
 8012da0:	f3bf 8f6f 	isb	sy
}
 8012da4:	4770      	bx	lr

08012da6 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012da6:	6843      	ldr	r3, [r0, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8012daa:	69d8      	ldr	r0, [r3, #28]
 8012dac:	f010 0008 	ands.w	r0, r0, #8
 8012db0:	d000      	beq.n	8012db4 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 8012db2:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8012db4:	69da      	ldr	r2, [r3, #28]
 8012db6:	f012 0f01 	tst.w	r2, #1
 8012dba:	d001      	beq.n	8012dc0 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 8012dbc:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8012dc0:	69da      	ldr	r2, [r3, #28]
 8012dc2:	f012 0f02 	tst.w	r2, #2
 8012dc6:	d001      	beq.n	8012dcc <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 8012dc8:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 8012dcc:	69da      	ldr	r2, [r3, #28]
 8012dce:	f412 7f80 	tst.w	r2, #256	; 0x100
 8012dd2:	d001      	beq.n	8012dd8 <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 8012dd4:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 8012dd8:	f010 0f08 	tst.w	r0, #8
 8012ddc:	d002      	beq.n	8012de4 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8012dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012de2:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 8012de4:	f010 0f01 	tst.w	r0, #1
 8012de8:	d001      	beq.n	8012dee <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8012dea:	2208      	movs	r2, #8
 8012dec:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8012dee:	f010 0f02 	tst.w	r0, #2
 8012df2:	d001      	beq.n	8012df8 <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8012df4:	2201      	movs	r2, #1
 8012df6:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8012df8:	f010 0f04 	tst.w	r0, #4
 8012dfc:	d001      	beq.n	8012e02 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8012dfe:	2202      	movs	r2, #2
 8012e00:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8012e02:	2204      	movs	r2, #4
 8012e04:	621a      	str	r2, [r3, #32]
}
 8012e06:	4770      	bx	lr

08012e08 <entropy_stm32_got_error>:
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 8012e08:	6843      	ldr	r3, [r0, #4]
 8012e0a:	f013 0f02 	tst.w	r3, #2
 8012e0e:	d105      	bne.n	8012e1c <entropy_stm32_got_error+0x14>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8012e10:	6843      	ldr	r3, [r0, #4]
 8012e12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012e16:	d103      	bne.n	8012e20 <entropy_stm32_got_error+0x18>
	return 0;
 8012e18:	2000      	movs	r0, #0
 8012e1a:	4770      	bx	lr
		return 1;
 8012e1c:	2001      	movs	r0, #1
 8012e1e:	4770      	bx	lr
		return 1;
 8012e20:	2001      	movs	r0, #1
}
 8012e22:	4770      	bx	lr

08012e24 <recover_seed_error>:
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8012e24:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8012e28:	6043      	str	r3, [r0, #4]
	for (int i = 0; i < 12; ++i) {
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	e001      	b.n	8012e32 <recover_seed_error+0xe>
  return (uint32_t)(READ_REG(RNGx->DR));
 8012e2e:	6882      	ldr	r2, [r0, #8]
 8012e30:	3301      	adds	r3, #1
 8012e32:	2b0b      	cmp	r3, #11
 8012e34:	ddfb      	ble.n	8012e2e <recover_seed_error+0xa>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8012e36:	6843      	ldr	r3, [r0, #4]
 8012e38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012e3c:	d101      	bne.n	8012e42 <recover_seed_error+0x1e>
	return 0;
 8012e3e:	2000      	movs	r0, #0
 8012e40:	4770      	bx	lr
		return -EIO;
 8012e42:	f06f 0004 	mvn.w	r0, #4
}
 8012e46:	4770      	bx	lr

08012e48 <rng_pool_put>:
	uint8_t first = rngp->first_read;
 8012e48:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
 8012e4a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
 8012e4c:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
 8012e50:	1a9a      	subs	r2, r3, r2
 8012e52:	ea3c 0202 	bics.w	r2, ip, r2
 8012e56:	d008      	beq.n	8012e6a <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
 8012e58:	18c2      	adds	r2, r0, r3
 8012e5a:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	b25b      	sxtb	r3, r3
 8012e60:	ea03 030c 	and.w	r3, r3, ip
 8012e64:	7083      	strb	r3, [r0, #2]
	return 0;
 8012e66:	2000      	movs	r0, #0
 8012e68:	4770      	bx	lr
		return -ENOBUFS;
 8012e6a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
 8012e6e:	4770      	bx	lr

08012e70 <rng_pool_init>:
	rngp->first_alloc = 0U;
 8012e70:	2300      	movs	r3, #0
 8012e72:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
 8012e74:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
 8012e76:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
 8012e78:	3901      	subs	r1, #1
 8012e7a:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
 8012e7c:	7102      	strb	r2, [r0, #4]
}
 8012e7e:	4770      	bx	lr

08012e80 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8012e80:	b410      	push	{r4}
	*state = &config->states[0];
 8012e82:	6803      	ldr	r3, [r0, #0]
 8012e84:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8012e86:	e001      	b.n	8012e8c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8012e88:	3408      	adds	r4, #8
 8012e8a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8012e8c:	6814      	ldr	r4, [r2, #0]
 8012e8e:	7903      	ldrb	r3, [r0, #4]
 8012e90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012e94:	3b01      	subs	r3, #1
 8012e96:	f8d0 c000 	ldr.w	ip, [r0]
 8012e9a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8012e9e:	429c      	cmp	r4, r3
 8012ea0:	d804      	bhi.n	8012eac <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 8012ea2:	7963      	ldrb	r3, [r4, #5]
 8012ea4:	428b      	cmp	r3, r1
 8012ea6:	d1ef      	bne.n	8012e88 <pinctrl_lookup_state+0x8>
			return 0;
 8012ea8:	2000      	movs	r0, #0
 8012eaa:	e001      	b.n	8012eb0 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 8012eac:	f06f 0001 	mvn.w	r0, #1
}
 8012eb0:	bc10      	pop	{r4}
 8012eb2:	4770      	bx	lr

08012eb4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 8012eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eb6:	4606      	mov	r6, r0
 8012eb8:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8012eba:	2400      	movs	r4, #0
	uint32_t func = 0;
 8012ebc:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8012ebe:	e012      	b.n	8012ee6 <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8012ec0:	f002 031f 	and.w	r3, r2, #31
 8012ec4:	2b10      	cmp	r3, #16
 8012ec6:	d01b      	beq.n	8012f00 <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8012ec8:	0a53      	lsrs	r3, r2, #9
 8012eca:	011b      	lsls	r3, r3, #4
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8012ed2:	f002 021f 	and.w	r2, r2, #31
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	4318      	orrs	r0, r3
 8012eda:	f7f7 f819 	bl	8009f10 <stm32_pin_configure>
		if (ret < 0) {
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	db11      	blt.n	8012f06 <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8012ee2:	3401      	adds	r4, #1
 8012ee4:	b2e4      	uxtb	r4, r4
 8012ee6:	42bc      	cmp	r4, r7
 8012ee8:	d20c      	bcs.n	8012f04 <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 8012eea:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8012eee:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8012ef2:	f012 0f10 	tst.w	r2, #16
 8012ef6:	d1e3      	bne.n	8012ec0 <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8012ef8:	685d      	ldr	r5, [r3, #4]
 8012efa:	f045 0520 	orr.w	r5, r5, #32
 8012efe:	e7e3      	b.n	8012ec8 <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 8012f00:	2530      	movs	r5, #48	; 0x30
 8012f02:	e7e1      	b.n	8012ec8 <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 8012f04:	2000      	movs	r0, #0
}
 8012f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f08 <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	6003      	str	r3, [r0, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 8012f0c:	6043      	str	r3, [r0, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8012f0e:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8012f10:	60c3      	str	r3, [r0, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 8012f12:	6103      	str	r3, [r0, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8012f14:	6143      	str	r3, [r0, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8012f16:	6183      	str	r3, [r0, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8012f18:	61c3      	str	r3, [r0, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8012f1a:	6203      	str	r3, [r0, #32]
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 8012f1c:	6243      	str	r3, [r0, #36]	; 0x24
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8012f1e:	6283      	str	r3, [r0, #40]	; 0x28
}
 8012f20:	4770      	bx	lr

08012f22 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8012f22:	2300      	movs	r3, #0
 8012f24:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8012f26:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8012f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f2c:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8012f2e:	60c3      	str	r3, [r0, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8012f30:	6103      	str	r3, [r0, #16]
}
 8012f32:	4770      	bx	lr

08012f34 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8012f34:	2300      	movs	r3, #0
 8012f36:	6003      	str	r3, [r0, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8012f38:	6043      	str	r3, [r0, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8012f3a:	6083      	str	r3, [r0, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8012f3c:	60c3      	str	r3, [r0, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 8012f3e:	6103      	str	r3, [r0, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8012f40:	6143      	str	r3, [r0, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8012f42:	6183      	str	r3, [r0, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8012f44:	61c3      	str	r3, [r0, #28]
}
 8012f46:	4770      	bx	lr

08012f48 <LL_TIM_OC_Init>:
{
 8012f48:	b508      	push	{r3, lr}
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	4611      	mov	r1, r2
  switch (Channel)
 8012f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f52:	d01d      	beq.n	8012f90 <LL_TIM_OC_Init+0x48>
 8012f54:	d80e      	bhi.n	8012f74 <LL_TIM_OC_Init+0x2c>
 8012f56:	2b10      	cmp	r3, #16
 8012f58:	d017      	beq.n	8012f8a <LL_TIM_OC_Init+0x42>
 8012f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f5e:	d102      	bne.n	8012f66 <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8012f60:	f7f7 f8b8 	bl	800a0d4 <OC3Config>
      break;
 8012f64:	e005      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d102      	bne.n	8012f70 <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8012f6a:	f7f7 f831 	bl	8009fd0 <OC1Config>
      break;
 8012f6e:	e000      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8012f70:	2001      	movs	r0, #1
}
 8012f72:	bd08      	pop	{r3, pc}
  switch (Channel)
 8012f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f78:	d00d      	beq.n	8012f96 <LL_TIM_OC_Init+0x4e>
 8012f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f7e:	d102      	bne.n	8012f86 <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8012f80:	f7f7 f952 	bl	800a228 <OC6Config>
      break;
 8012f84:	e7f5      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8012f86:	2001      	movs	r0, #1
 8012f88:	e7f3      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8012f8a:	f7f7 f861 	bl	800a050 <OC2Config>
      break;
 8012f8e:	e7f0      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8012f90:	f7f7 f8e2 	bl	800a158 <OC4Config>
      break;
 8012f94:	e7ed      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8012f96:	f7f7 f913 	bl	800a1c0 <OC5Config>
      break;
 8012f9a:	e7ea      	b.n	8012f72 <LL_TIM_OC_Init+0x2a>

08012f9c <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012f9c:	680a      	ldr	r2, [r1, #0]
 8012f9e:	0912      	lsrs	r2, r2, #4
 8012fa0:	3201      	adds	r2, #1
 8012fa2:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8012fa6:	684b      	ldr	r3, [r1, #4]
 8012fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fac:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8012fb0:	688b      	ldr	r3, [r1, #8]
 8012fb2:	0e5b      	lsrs	r3, r3, #25
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	005b      	lsls	r3, r3, #1
}
 8012fb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8012fbc:	4770      	bx	lr

08012fbe <dwt_writetodevice>:
{
 8012fbe:	b500      	push	{lr}
 8012fc0:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
 8012fc2:	b951      	cbnz	r1, 8012fda <dwt_writetodevice+0x1c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8012fc4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8012fc8:	f88d 0004 	strb.w	r0, [sp, #4]
 8012fcc:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
 8012fce:	a901      	add	r1, sp, #4
 8012fd0:	f7f8 f9b0 	bl	800b334 <writetospi>
} // end dwt_writetodevice()
 8012fd4:	b003      	add	sp, #12
 8012fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fda:	468c      	mov	ip, r1
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8012fdc:	f060 003f 	orn	r0, r0, #63	; 0x3f
 8012fe0:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8012fe4:	297f      	cmp	r1, #127	; 0x7f
 8012fe6:	d803      	bhi.n	8012ff0 <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8012fe8:	f88d 1005 	strb.w	r1, [sp, #5]
 8012fec:	2002      	movs	r0, #2
 8012fee:	e7ee      	b.n	8012fce <dwt_writetodevice+0x10>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8012ff0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8012ff4:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8012ff8:	f3cc 1cc7 	ubfx	ip, ip, #7, #8
 8012ffc:	f88d c006 	strb.w	ip, [sp, #6]
 8013000:	2003      	movs	r0, #3
 8013002:	e7e4      	b.n	8012fce <dwt_writetodevice+0x10>

08013004 <dwt_writetxdata>:
{
 8013004:	b508      	push	{r3, lr}
 8013006:	460b      	mov	r3, r1
 8013008:	4611      	mov	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 801300a:	4402      	add	r2, r0
 801300c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8013010:	dc05      	bgt.n	801301e <dwt_writetxdata+0x1a>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8013012:	1e82      	subs	r2, r0, #2
 8013014:	2009      	movs	r0, #9
 8013016:	f7ff ffd2 	bl	8012fbe <dwt_writetodevice>
        return DWT_SUCCESS;
 801301a:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 801301c:	bd08      	pop	{r3, pc}
        return DWT_ERROR;
 801301e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013022:	e7fb      	b.n	801301c <dwt_writetxdata+0x18>

08013024 <dwt_readfromdevice>:
{
 8013024:	b500      	push	{lr}
 8013026:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
 8013028:	b941      	cbnz	r1, 801303c <dwt_readfromdevice+0x18>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 801302a:	f88d 0004 	strb.w	r0, [sp, #4]
 801302e:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8013030:	a901      	add	r1, sp, #4
 8013032:	f7f8 f98d 	bl	800b350 <readfromspi>
} // end dwt_readfromdevice()
 8013036:	b003      	add	sp, #12
 8013038:	f85d fb04 	ldr.w	pc, [sp], #4
 801303c:	468c      	mov	ip, r1
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 801303e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8013042:	f88d 0004 	strb.w	r0, [sp, #4]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8013046:	297f      	cmp	r1, #127	; 0x7f
 8013048:	d803      	bhi.n	8013052 <dwt_readfromdevice+0x2e>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 801304a:	f88d 1005 	strb.w	r1, [sp, #5]
 801304e:	2002      	movs	r0, #2
 8013050:	e7ee      	b.n	8013030 <dwt_readfromdevice+0xc>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8013052:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8013056:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 801305a:	f3cc 1cc7 	ubfx	ip, ip, #7, #8
 801305e:	f88d c006 	strb.w	ip, [sp, #6]
 8013062:	2003      	movs	r0, #3
 8013064:	e7e4      	b.n	8013030 <dwt_readfromdevice+0xc>

08013066 <dwt_readrxdata>:
{
 8013066:	b508      	push	{r3, lr}
 8013068:	4603      	mov	r3, r0
 801306a:	468c      	mov	ip, r1
 801306c:	4611      	mov	r1, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 801306e:	4662      	mov	r2, ip
 8013070:	2011      	movs	r0, #17
 8013072:	f7ff ffd7 	bl	8013024 <dwt_readfromdevice>
}
 8013076:	bd08      	pop	{r3, pc}

08013078 <dwt_readtxtimestamp>:
{
 8013078:	b508      	push	{r3, lr}
 801307a:	4603      	mov	r3, r0
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 801307c:	2205      	movs	r2, #5
 801307e:	2100      	movs	r1, #0
 8013080:	2017      	movs	r0, #23
 8013082:	f7ff ffcf 	bl	8013024 <dwt_readfromdevice>
}
 8013086:	bd08      	pop	{r3, pc}

08013088 <dwt_readrxtimestamp>:
{
 8013088:	b508      	push	{r3, lr}
 801308a:	4603      	mov	r3, r0
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 801308c:	2205      	movs	r2, #5
 801308e:	2100      	movs	r1, #0
 8013090:	2015      	movs	r0, #21
 8013092:	f7ff ffc7 	bl	8013024 <dwt_readfromdevice>
}
 8013096:	bd08      	pop	{r3, pc}

08013098 <dwt_read32bitoffsetreg>:
{
 8013098:	b500      	push	{lr}
 801309a:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 801309c:	ab01      	add	r3, sp, #4
 801309e:	2204      	movs	r2, #4
 80130a0:	b289      	uxth	r1, r1
 80130a2:	b280      	uxth	r0, r0
 80130a4:	f7ff ffbe 	bl	8013024 <dwt_readfromdevice>
    for (j = 3 ; j >= 0 ; j --)
 80130a8:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 80130aa:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80130ac:	e006      	b.n	80130bc <dwt_read32bitoffsetreg+0x24>
        regval = (regval << 8) + buffer[j] ;
 80130ae:	aa02      	add	r2, sp, #8
 80130b0:	441a      	add	r2, r3
 80130b2:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 80130b6:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 80130ba:	3b01      	subs	r3, #1
 80130bc:	2b00      	cmp	r3, #0
 80130be:	daf6      	bge.n	80130ae <dwt_read32bitoffsetreg+0x16>
} // end dwt_read32bitoffsetreg()
 80130c0:	b003      	add	sp, #12
 80130c2:	f85d fb04 	ldr.w	pc, [sp], #4

080130c6 <dwt_readdevid>:
{
 80130c6:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80130c8:	2100      	movs	r1, #0
 80130ca:	4608      	mov	r0, r1
 80130cc:	f7ff ffe4 	bl	8013098 <dwt_read32bitoffsetreg>
}
 80130d0:	bd08      	pop	{r3, pc}

080130d2 <dwt_read16bitoffsetreg>:
{
 80130d2:	b500      	push	{lr}
 80130d4:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80130d6:	ab01      	add	r3, sp, #4
 80130d8:	2202      	movs	r2, #2
 80130da:	b289      	uxth	r1, r1
 80130dc:	b280      	uxth	r0, r0
 80130de:	f7ff ffa1 	bl	8013024 <dwt_readfromdevice>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80130e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80130ea:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 80130ee:	b280      	uxth	r0, r0
 80130f0:	b003      	add	sp, #12
 80130f2:	f85d fb04 	ldr.w	pc, [sp], #4

080130f6 <dwt_read8bitoffsetreg>:
{
 80130f6:	b500      	push	{lr}
 80130f8:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80130fa:	f10d 0307 	add.w	r3, sp, #7
 80130fe:	2201      	movs	r2, #1
 8013100:	b289      	uxth	r1, r1
 8013102:	b280      	uxth	r0, r0
 8013104:	f7ff ff8e 	bl	8013024 <dwt_readfromdevice>
}
 8013108:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801310c:	b003      	add	sp, #12
 801310e:	f85d fb04 	ldr.w	pc, [sp], #4

08013112 <dwt_write8bitoffsetreg>:
{
 8013112:	b500      	push	{lr}
 8013114:	b083      	sub	sp, #12
 8013116:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 801311a:	f10d 0307 	add.w	r3, sp, #7
 801311e:	2201      	movs	r2, #1
 8013120:	b289      	uxth	r1, r1
 8013122:	b280      	uxth	r0, r0
 8013124:	f7ff ff4b 	bl	8012fbe <dwt_writetodevice>
}
 8013128:	b003      	add	sp, #12
 801312a:	f85d fb04 	ldr.w	pc, [sp], #4

0801312e <dwt_write16bitoffsetreg>:
{
 801312e:	b500      	push	{lr}
 8013130:	b083      	sub	sp, #12
    buffer[0] = regval & 0xFF;
 8013132:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8013136:	0a12      	lsrs	r2, r2, #8
 8013138:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 801313c:	ab01      	add	r3, sp, #4
 801313e:	2202      	movs	r2, #2
 8013140:	b289      	uxth	r1, r1
 8013142:	b280      	uxth	r0, r0
 8013144:	f7ff ff3b 	bl	8012fbe <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8013148:	b003      	add	sp, #12
 801314a:	f85d fb04 	ldr.w	pc, [sp], #4

0801314e <dwt_setrxantennadelay>:
{
 801314e:	b508      	push	{r3, lr}
 8013150:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8013152:	f641 0104 	movw	r1, #6148	; 0x1804
 8013156:	202e      	movs	r0, #46	; 0x2e
 8013158:	f7ff ffe9 	bl	801312e <dwt_write16bitoffsetreg>
}
 801315c:	bd08      	pop	{r3, pc}

0801315e <dwt_settxantennadelay>:
{
 801315e:	b508      	push	{r3, lr}
 8013160:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8013162:	2100      	movs	r1, #0
 8013164:	2018      	movs	r0, #24
 8013166:	f7ff ffe2 	bl	801312e <dwt_write16bitoffsetreg>
}
 801316a:	bd08      	pop	{r3, pc}

0801316c <dwt_write32bitoffsetreg>:
{
 801316c:	b500      	push	{lr}
 801316e:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
 8013170:	2300      	movs	r3, #0
 8013172:	e006      	b.n	8013182 <dwt_write32bitoffsetreg+0x16>
        buffer[j] = regval & 0xff ;
 8013174:	f10d 0c08 	add.w	ip, sp, #8
 8013178:	449c      	add	ip, r3
 801317a:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
 801317e:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8013180:	3301      	adds	r3, #1
 8013182:	2b03      	cmp	r3, #3
 8013184:	ddf6      	ble.n	8013174 <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8013186:	ab01      	add	r3, sp, #4
 8013188:	2204      	movs	r2, #4
 801318a:	b289      	uxth	r1, r1
 801318c:	b280      	uxth	r0, r0
 801318e:	f7ff ff16 	bl	8012fbe <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8013192:	b003      	add	sp, #12
 8013194:	f85d fb04 	ldr.w	pc, [sp], #4

08013198 <_dwt_otpread>:
{
 8013198:	b508      	push	{r3, lr}
 801319a:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 801319c:	2104      	movs	r1, #4
 801319e:	202d      	movs	r0, #45	; 0x2d
 80131a0:	f7ff ffc5 	bl	801312e <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80131a4:	2203      	movs	r2, #3
 80131a6:	2106      	movs	r1, #6
 80131a8:	202d      	movs	r0, #45	; 0x2d
 80131aa:	f7ff ffb2 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80131ae:	2200      	movs	r2, #0
 80131b0:	2106      	movs	r1, #6
 80131b2:	202d      	movs	r0, #45	; 0x2d
 80131b4:	f7ff ffad 	bl	8013112 <dwt_write8bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80131b8:	210a      	movs	r1, #10
 80131ba:	202d      	movs	r0, #45	; 0x2d
 80131bc:	f7ff ff6c 	bl	8013098 <dwt_read32bitoffsetreg>
}
 80131c0:	bd08      	pop	{r3, pc}

080131c2 <_dwt_aonarrayupload>:
{
 80131c2:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80131c4:	2200      	movs	r2, #0
 80131c6:	2102      	movs	r1, #2
 80131c8:	202c      	movs	r0, #44	; 0x2c
 80131ca:	f7ff ffa2 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80131ce:	2202      	movs	r2, #2
 80131d0:	4611      	mov	r1, r2
 80131d2:	202c      	movs	r0, #44	; 0x2c
 80131d4:	f7ff ff9d 	bl	8013112 <dwt_write8bitoffsetreg>
}
 80131d8:	bd08      	pop	{r3, pc}

080131da <_dwt_configlde>:
{
 80131da:	b510      	push	{r4, lr}
 80131dc:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80131de:	226d      	movs	r2, #109	; 0x6d
 80131e0:	f640 0106 	movw	r1, #2054	; 0x806
 80131e4:	202e      	movs	r0, #46	; 0x2e
 80131e6:	f7ff ff94 	bl	8013112 <dwt_write8bitoffsetreg>
    if(prfIndex)
 80131ea:	b13c      	cbz	r4, 80131fc <_dwt_configlde+0x22>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80131ec:	f240 6207 	movw	r2, #1543	; 0x607
 80131f0:	f641 0106 	movw	r1, #6150	; 0x1806
 80131f4:	202e      	movs	r0, #46	; 0x2e
 80131f6:	f7ff ff9a 	bl	801312e <dwt_write16bitoffsetreg>
}
 80131fa:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80131fc:	f241 6207 	movw	r2, #5639	; 0x1607
 8013200:	f641 0106 	movw	r1, #6150	; 0x1806
 8013204:	202e      	movs	r0, #46	; 0x2e
 8013206:	f7ff ff92 	bl	801312e <dwt_write16bitoffsetreg>
}
 801320a:	e7f6      	b.n	80131fa <_dwt_configlde+0x20>

0801320c <dwt_setrxaftertxdelay>:
{
 801320c:	b510      	push	{r4, lr}
 801320e:	4604      	mov	r4, r0
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8013210:	2100      	movs	r1, #0
 8013212:	201a      	movs	r0, #26
 8013214:	f7ff ff40 	bl	8013098 <dwt_read32bitoffsetreg>
    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8013218:	0d00      	lsrs	r0, r0, #20
 801321a:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 801321c:	f3c4 0213 	ubfx	r2, r4, #0, #20
    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8013220:	4302      	orrs	r2, r0
 8013222:	2100      	movs	r1, #0
 8013224:	201a      	movs	r0, #26
 8013226:	f7ff ffa1 	bl	801316c <dwt_write32bitoffsetreg>
}
 801322a:	bd10      	pop	{r4, pc}

0801322c <_dwt_enableclocks>:
{
 801322c:	b510      	push	{r4, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	4604      	mov	r4, r0
    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8013232:	ab01      	add	r3, sp, #4
 8013234:	2202      	movs	r2, #2
 8013236:	2100      	movs	r1, #0
 8013238:	2036      	movs	r0, #54	; 0x36
 801323a:	f7ff fef3 	bl	8013024 <dwt_readfromdevice>
    switch(clocks)
 801323e:	2c0e      	cmp	r4, #14
 8013240:	d812      	bhi.n	8013268 <_dwt_enableclocks+0x3c>
 8013242:	e8df f004 	tbb	[pc, r4]
 8013246:	0820      	.short	0x0820
 8013248:	11111129 	.word	0x11111129
 801324c:	11413211 	.word	0x11413211
 8013250:	5c554e11 	.word	0x5c554e11
 8013254:	65          	.byte	0x65
 8013255:	00          	.byte	0x00
            reg[0] = 0x00 ;
 8013256:	2300      	movs	r3, #0
 8013258:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
 801325c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013260:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013264:	f88d 3005 	strb.w	r3, [sp, #5]
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8013268:	ab01      	add	r3, sp, #4
 801326a:	2201      	movs	r2, #1
 801326c:	2100      	movs	r1, #0
 801326e:	2036      	movs	r0, #54	; 0x36
 8013270:	f7ff fea5 	bl	8012fbe <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8013274:	f10d 0305 	add.w	r3, sp, #5
 8013278:	2201      	movs	r2, #1
 801327a:	4611      	mov	r1, r2
 801327c:	2036      	movs	r0, #54	; 0x36
 801327e:	f7ff fe9e 	bl	8012fbe <dwt_writetodevice>
} // end _dwt_enableclocks()
 8013282:	b002      	add	sp, #8
 8013284:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8013286:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 801328a:	f023 0303 	bic.w	r3, r3, #3
 801328e:	f043 0301 	orr.w	r3, r3, #1
 8013292:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 8013296:	e7e7      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8013298:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 801329c:	f023 0303 	bic.w	r3, r3, #3
 80132a0:	f043 0302 	orr.w	r3, r3, #2
 80132a4:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 80132a8:	e7de      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80132aa:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80132ae:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80132b2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80132b6:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
 80132ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80132c2:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 80132c6:	e7cf      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[0] = reg[0] & 0xb3;
 80132c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132cc:	f003 03b3 	and.w	r3, r3, #179	; 0xb3
 80132d0:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
 80132d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132dc:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 80132e0:	e7c2      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[1] = 0x02 | reg[1];
 80132e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132e6:	f043 0302 	orr.w	r3, r3, #2
 80132ea:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 80132ee:	e7bb      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[1] = reg[1] & 0xfd;
 80132f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132f4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80132f8:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 80132fc:	e7b4      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 80132fe:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8013302:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8013306:	f043 0320 	orr.w	r3, r3, #32
 801330a:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 801330e:	e7ab      	b.n	8013268 <_dwt_enableclocks+0x3c>
            reg[0] = 0x01;
 8013310:	2301      	movs	r3, #1
 8013312:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
 8013316:	2303      	movs	r3, #3
 8013318:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 801331c:	e7a4      	b.n	8013268 <_dwt_enableclocks+0x3c>

0801331e <_dwt_loaducodefromrom>:
{
 801331e:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
 8013320:	200e      	movs	r0, #14
 8013322:	f7ff ff83 	bl	801322c <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8013326:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801332a:	2106      	movs	r1, #6
 801332c:	202d      	movs	r0, #45	; 0x2d
 801332e:	f7ff fefe 	bl	801312e <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8013332:	2001      	movs	r0, #1
 8013334:	f000 f87d 	bl	8013432 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8013338:	2001      	movs	r0, #1
 801333a:	f7ff ff77 	bl	801322c <_dwt_enableclocks>
}
 801333e:	bd08      	pop	{r3, pc}

08013340 <_dwt_disablesequencing>:
{
 8013340:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8013342:	2000      	movs	r0, #0
 8013344:	f7ff ff72 	bl	801322c <_dwt_enableclocks>
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8013348:	2200      	movs	r2, #0
 801334a:	2104      	movs	r1, #4
 801334c:	2036      	movs	r0, #54	; 0x36
 801334e:	f7ff feee 	bl	801312e <dwt_write16bitoffsetreg>
}
 8013352:	bd08      	pop	{r3, pc}

08013354 <dwt_setdelayedtrxtime>:
{
 8013354:	b508      	push	{r3, lr}
 8013356:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8013358:	2101      	movs	r1, #1
 801335a:	200a      	movs	r0, #10
 801335c:	f7ff ff06 	bl	801316c <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 8013360:	bd08      	pop	{r3, pc}

08013362 <dwt_syncrxbufptrs>:
{
 8013362:	b508      	push	{r3, lr}
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8013364:	2103      	movs	r1, #3
 8013366:	200f      	movs	r0, #15
 8013368:	f7ff fec5 	bl	80130f6 <dwt_read8bitoffsetreg>
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 801336c:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
 8013370:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013374:	d100      	bne.n	8013378 <dwt_syncrxbufptrs+0x16>
}
 8013376:	bd08      	pop	{r3, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8013378:	2201      	movs	r2, #1
 801337a:	2103      	movs	r1, #3
 801337c:	200d      	movs	r0, #13
 801337e:	f7ff fec8 	bl	8013112 <dwt_write8bitoffsetreg>
}
 8013382:	e7f8      	b.n	8013376 <dwt_syncrxbufptrs+0x14>

08013384 <dwt_setinterrupt>:
{
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	4606      	mov	r6, r0
 8013388:	460c      	mov	r4, r1
    stat = decamutexon() ;
 801338a:	f000 f862 	bl	8013452 <decamutexon>
 801338e:	4605      	mov	r5, r0
    if(operation == 2)
 8013390:	2c02      	cmp	r4, #2
 8013392:	d00f      	beq.n	80133b4 <dwt_setinterrupt+0x30>
        mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
 8013394:	2100      	movs	r1, #0
 8013396:	200e      	movs	r0, #14
 8013398:	f7ff fe7e 	bl	8013098 <dwt_read32bitoffsetreg>
        if(operation == 1)
 801339c:	2c01      	cmp	r4, #1
 801339e:	d00f      	beq.n	80133c0 <dwt_setinterrupt+0x3c>
            mask &= ~bitmask ; // Clear the bit
 80133a0:	ea20 0206 	bic.w	r2, r0, r6
        dwt_write32bitreg(SYS_MASK_ID, mask) ; // New value
 80133a4:	2100      	movs	r1, #0
 80133a6:	200e      	movs	r0, #14
 80133a8:	f7ff fee0 	bl	801316c <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 80133ac:	4628      	mov	r0, r5
 80133ae:	f000 f852 	bl	8013456 <decamutexoff>
}
 80133b2:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
 80133b4:	4632      	mov	r2, r6
 80133b6:	2100      	movs	r1, #0
 80133b8:	200e      	movs	r0, #14
 80133ba:	f7ff fed7 	bl	801316c <dwt_write32bitoffsetreg>
 80133be:	e7f5      	b.n	80133ac <dwt_setinterrupt+0x28>
            mask |= bitmask ;
 80133c0:	ea40 0206 	orr.w	r2, r0, r6
 80133c4:	e7ee      	b.n	80133a4 <dwt_setinterrupt+0x20>

080133c6 <dwt_rxreset>:
{
 80133c6:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80133c8:	22e0      	movs	r2, #224	; 0xe0
 80133ca:	2103      	movs	r1, #3
 80133cc:	2036      	movs	r0, #54	; 0x36
 80133ce:	f7ff fea0 	bl	8013112 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80133d2:	22f0      	movs	r2, #240	; 0xf0
 80133d4:	2103      	movs	r1, #3
 80133d6:	2036      	movs	r0, #54	; 0x36
 80133d8:	f7ff fe9b 	bl	8013112 <dwt_write8bitoffsetreg>
}
 80133dc:	bd08      	pop	{r3, pc}

080133de <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 80133de:	b508      	push	{r3, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 80133e0:	f000 021f 	and.w	r2, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 80133e4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80133e8:	210e      	movs	r1, #14
 80133ea:	202b      	movs	r0, #43	; 0x2b
 80133ec:	f7ff fe91 	bl	8013112 <dwt_write8bitoffsetreg>
}
 80133f0:	bd08      	pop	{r3, pc}

080133f2 <dwt_set_spi_slow>:
    ctx->spi_cfg_slow.frequency = freq;
 80133f2:	4603      	mov	r3, r0
 80133f4:	f843 1f1c 	str.w	r1, [r3, #28]!
    ctx->spi_cfg = &ctx->spi_cfg_slow;
 80133f8:	6183      	str	r3, [r0, #24]
}
 80133fa:	4770      	bx	lr

080133fc <dwt_set_spi_fast>:
    ctx->spi_cfg = &ctx->spi_cfg_fast;
 80133fc:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8013400:	6183      	str	r3, [r0, #24]
}
 8013402:	4770      	bx	lr

08013404 <z_log_msg2_runtime_create>:
{
 8013404:	b510      	push	{r4, lr}
 8013406:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8013408:	ac0a      	add	r4, sp, #40	; 0x28
 801340a:	9405      	str	r4, [sp, #20]
 801340c:	9402      	str	r4, [sp, #8]
 801340e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013410:	9401      	str	r4, [sp, #4]
 8013412:	9c08      	ldr	r4, [sp, #32]
 8013414:	9400      	str	r4, [sp, #0]
 8013416:	f7fe f9a8 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 801341a:	b006      	add	sp, #24
 801341c:	bd10      	pop	{r4, pc}

0801341e <dwt_irq_work_handler>:
{
 801341e:	b508      	push	{r3, lr}
    dwt_isr();
 8013420:	f7f7 fa32 	bl	800a888 <dwt_isr>
}
 8013424:	bd08      	pop	{r3, pc}

08013426 <dwt_gpio_callback>:
{
 8013426:	b508      	push	{r3, lr}
    k_work_submit(&ctx->irq_cb_work);
 8013428:	f101 000c 	add.w	r0, r1, #12
 801342c:	f7fb f832 	bl	800e494 <k_work_submit>
}
 8013430:	bd08      	pop	{r3, pc}

08013432 <deca_sleep>:
{
 8013432:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
 8013434:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8013438:	17d9      	asrs	r1, r3, #31
 801343a:	008a      	lsls	r2, r1, #2
 801343c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8013440:	0098      	lsls	r0, r3, #2
 8013442:	18c0      	adds	r0, r0, r3
 8013444:	eb41 0102 	adc.w	r1, r1, r2
 8013448:	1800      	adds	r0, r0, r0
 801344a:	4149      	adcs	r1, r1
 801344c:	f7fb fbf8 	bl	800ec40 <z_impl_k_sleep>
}
 8013450:	bd08      	pop	{r3, pc}

08013452 <decamutexon>:
}
 8013452:	2000      	movs	r0, #0
 8013454:	4770      	bx	lr

08013456 <decamutexoff>:
}
 8013456:	4770      	bx	lr

08013458 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8013458:	6341      	str	r1, [r0, #52]	; 0x34
}
 801345a:	4770      	bx	lr

0801345c <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 801345c:	6381      	str	r1, [r0, #56]	; 0x38
}
 801345e:	4770      	bx	lr

08013460 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8013460:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8013462:	4770      	bx	lr

08013464 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8013464:	6401      	str	r1, [r0, #64]	; 0x40
}
 8013466:	4770      	bx	lr

08013468 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8013468:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801346a:	6581      	str	r1, [r0, #88]	; 0x58
}
 801346c:	4770      	bx	lr

0801346e <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 801346e:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8013470:	4770      	bx	lr

08013472 <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8013472:	f06f 0302 	mvn.w	r3, #2
 8013476:	6103      	str	r3, [r0, #16]
}
 8013478:	4770      	bx	lr

0801347a <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 801347a:	6900      	ldr	r0, [r0, #16]
 801347c:	f010 0002 	ands.w	r0, r0, #2
 8013480:	d000      	beq.n	8013484 <LL_TIM_IsActiveFlag_CC1+0xa>
 8013482:	2001      	movs	r0, #1
}
 8013484:	4770      	bx	lr

08013486 <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8013486:	f06f 0304 	mvn.w	r3, #4
 801348a:	6103      	str	r3, [r0, #16]
}
 801348c:	4770      	bx	lr

0801348e <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801348e:	6900      	ldr	r0, [r0, #16]
 8013490:	f010 0004 	ands.w	r0, r0, #4
 8013494:	d000      	beq.n	8013498 <LL_TIM_IsActiveFlag_CC2+0xa>
 8013496:	2001      	movs	r0, #1
}
 8013498:	4770      	bx	lr

0801349a <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801349a:	f06f 0308 	mvn.w	r3, #8
 801349e:	6103      	str	r3, [r0, #16]
}
 80134a0:	4770      	bx	lr

080134a2 <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80134a2:	6900      	ldr	r0, [r0, #16]
 80134a4:	f010 0008 	ands.w	r0, r0, #8
 80134a8:	d000      	beq.n	80134ac <LL_TIM_IsActiveFlag_CC3+0xa>
 80134aa:	2001      	movs	r0, #1
}
 80134ac:	4770      	bx	lr

080134ae <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80134ae:	f06f 0310 	mvn.w	r3, #16
 80134b2:	6103      	str	r3, [r0, #16]
}
 80134b4:	4770      	bx	lr

080134b6 <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80134b6:	6900      	ldr	r0, [r0, #16]
 80134b8:	f010 0010 	ands.w	r0, r0, #16
 80134bc:	d000      	beq.n	80134c0 <LL_TIM_IsActiveFlag_CC4+0xa>
 80134be:	2001      	movs	r0, #1
}
 80134c0:	4770      	bx	lr

080134c2 <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 80134c2:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 80134c6:	6103      	str	r3, [r0, #16]
}
 80134c8:	4770      	bx	lr

080134ca <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 80134ca:	6900      	ldr	r0, [r0, #16]
 80134cc:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80134d0:	d000      	beq.n	80134d4 <LL_TIM_IsActiveFlag_CC5+0xa>
 80134d2:	2001      	movs	r0, #1
}
 80134d4:	4770      	bx	lr

080134d6 <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 80134d6:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 80134da:	6103      	str	r3, [r0, #16]
}
 80134dc:	4770      	bx	lr

080134de <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 80134de:	6943      	ldr	r3, [r0, #20]
 80134e0:	f043 0302 	orr.w	r3, r3, #2
 80134e4:	6143      	str	r3, [r0, #20]
}
 80134e6:	4770      	bx	lr

080134e8 <get_polarity>:
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 80134e8:	f010 0f01 	tst.w	r0, #1
 80134ec:	d001      	beq.n	80134f2 <get_polarity+0xa>
    return LL_TIM_OCPOLARITY_LOW;
 80134ee:	2002      	movs	r0, #2
 80134f0:	4770      	bx	lr
        return LL_TIM_OCPOLARITY_HIGH;
 80134f2:	2000      	movs	r0, #0
}
 80134f4:	4770      	bx	lr

080134f6 <z_log_msg2_runtime_create>:
{
 80134f6:	b510      	push	{r4, lr}
 80134f8:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80134fa:	ac0a      	add	r4, sp, #40	; 0x28
 80134fc:	9405      	str	r4, [sp, #20]
 80134fe:	9402      	str	r4, [sp, #8]
 8013500:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013502:	9401      	str	r4, [sp, #4]
 8013504:	9c08      	ldr	r4, [sp, #32]
 8013506:	9400      	str	r4, [sp, #0]
 8013508:	f7fe f92f 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 801350c:	b006      	add	sp, #24
 801350e:	bd10      	pop	{r4, pc}

08013510 <_Z20get_tx_timestamp_u64v>:
{
 8013510:	b500      	push	{lr}
 8013512:	b083      	sub	sp, #12
    dwt_readtxtimestamp(ts_tab);
 8013514:	4668      	mov	r0, sp
 8013516:	f7ff fdaf 	bl	8013078 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--) {
 801351a:	2304      	movs	r3, #4
    uint64_t ts = 0;
 801351c:	2000      	movs	r0, #0
 801351e:	4601      	mov	r1, r0
 8013520:	e009      	b.n	8013536 <_Z20get_tx_timestamp_u64v+0x26>
        ts <<= 8;
 8013522:	0209      	lsls	r1, r1, #8
 8013524:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8013528:	aa02      	add	r2, sp, #8
 801352a:	441a      	add	r2, r3
 801352c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8013530:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--) {
 8013534:	3b01      	subs	r3, #1
 8013536:	2b00      	cmp	r3, #0
 8013538:	daf3      	bge.n	8013522 <_Z20get_tx_timestamp_u64v+0x12>
}
 801353a:	b003      	add	sp, #12
 801353c:	f85d fb04 	ldr.w	pc, [sp], #4

08013540 <_Z20get_rx_timestamp_u64v>:
{
 8013540:	b500      	push	{lr}
 8013542:	b083      	sub	sp, #12
    dwt_readrxtimestamp(ts_tab);
 8013544:	4668      	mov	r0, sp
 8013546:	f7ff fd9f 	bl	8013088 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--) {
 801354a:	2304      	movs	r3, #4
    uint64_t ts = 0;
 801354c:	2000      	movs	r0, #0
 801354e:	4601      	mov	r1, r0
 8013550:	e009      	b.n	8013566 <_Z20get_rx_timestamp_u64v+0x26>
        ts <<= 8;
 8013552:	0209      	lsls	r1, r1, #8
 8013554:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8013558:	aa02      	add	r2, sp, #8
 801355a:	441a      	add	r2, r3
 801355c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8013560:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--) {
 8013564:	3b01      	subs	r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	daf3      	bge.n	8013552 <_Z20get_rx_timestamp_u64v+0x12>
}
 801356a:	b003      	add	sp, #12
 801356c:	f85d fb04 	ldr.w	pc, [sp], #4

08013570 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013570:	b570      	push	{r4, r5, r6, lr}
 8013572:	4606      	mov	r6, r0
 8013574:	460c      	mov	r4, r1
 8013576:	e004      	b.n	8013582 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
	::operator delete(__p
 8013578:	212c      	movs	r1, #44	; 0x2c
 801357a:	4620      	mov	r0, r4
 801357c:	f000 fe91 	bl	80142a2 <_ZdlPvj>
      while (__x != 0)
	{
	  _M_erase(_S_right(__x));
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
 8013580:	462c      	mov	r4, r5
      while (__x != 0)
 8013582:	b174      	cbz	r4, 80135a2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x32>
	  _M_erase(_S_right(__x));
 8013584:	68e1      	ldr	r1, [r4, #12]
 8013586:	4630      	mov	r0, r6
 8013588:	f7ff fff2 	bl	8013570 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      { return static_cast<_Link_type>(__x->_M_left); }
 801358c:	68a5      	ldr	r5, [r4, #8]
      { return _M_dataplus._M_p; }
 801358e:	6920      	ldr	r0, [r4, #16]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8013590:	f104 0318 	add.w	r3, r4, #24
	if (!_M_is_local())
 8013594:	4298      	cmp	r0, r3
 8013596:	d0ef      	beq.n	8013578 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
	  _M_destroy(_M_allocated_capacity);
 8013598:	69a1      	ldr	r1, [r4, #24]
 801359a:	3101      	adds	r1, #1
 801359c:	f000 fe81 	bl	80142a2 <_ZdlPvj>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80135a0:	e7ea      	b.n	8013578 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
	}
    }
 80135a2:	bd70      	pop	{r4, r5, r6, pc}

080135a4 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhSt4lessIS5_ESaISt4pairIKS5_hEEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80135a4:	b510      	push	{r4, lr}
 80135a6:	4604      	mov	r4, r0
      { _M_erase(_M_begin()); }
 80135a8:	6881      	ldr	r1, [r0, #8]
 80135aa:	f7ff ffe1 	bl	8013570 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 80135ae:	4620      	mov	r0, r4
 80135b0:	bd10      	pop	{r4, pc}

080135b2 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80135b2:	b570      	push	{r4, r5, r6, lr}
 80135b4:	4606      	mov	r6, r0
 80135b6:	460c      	mov	r4, r1
 80135b8:	e004      	b.n	80135c4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
 80135ba:	212c      	movs	r1, #44	; 0x2c
 80135bc:	4620      	mov	r0, r4
 80135be:	f000 fe70 	bl	80142a2 <_ZdlPvj>
	  __x = __y;
 80135c2:	462c      	mov	r4, r5
      while (__x != 0)
 80135c4:	b174      	cbz	r4, 80135e4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x32>
	  _M_erase(_S_right(__x));
 80135c6:	68e1      	ldr	r1, [r4, #12]
 80135c8:	4630      	mov	r0, r6
 80135ca:	f7ff fff2 	bl	80135b2 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      { return static_cast<_Link_type>(__x->_M_left); }
 80135ce:	68a5      	ldr	r5, [r4, #8]
      { return _M_dataplus._M_p; }
 80135d0:	6960      	ldr	r0, [r4, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 80135d2:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 80135d6:	4298      	cmp	r0, r3
 80135d8:	d0ef      	beq.n	80135ba <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
	  _M_destroy(_M_allocated_capacity);
 80135da:	69e1      	ldr	r1, [r4, #28]
 80135dc:	3101      	adds	r1, #1
 80135de:	f000 fe60 	bl	80142a2 <_ZdlPvj>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80135e2:	e7ea      	b.n	80135ba <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
    }
 80135e4:	bd70      	pop	{r4, r5, r6, pc}

080135e6 <_ZNSt3mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessImESaISt4pairIKmS5_EEED1Ev>:
 80135e6:	b510      	push	{r4, lr}
 80135e8:	4604      	mov	r4, r0
      { _M_erase(_M_begin()); }
 80135ea:	6881      	ldr	r1, [r0, #8]
 80135ec:	f7ff ffe1 	bl	80135b2 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 80135f0:	4620      	mov	r0, r4
 80135f2:	bd10      	pop	{r4, pc}

080135f4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80135f4:	b570      	push	{r4, r5, r6, lr}
 80135f6:	4606      	mov	r6, r0
 80135f8:	460c      	mov	r4, r1
 80135fa:	e004      	b.n	8013606 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x12>
 80135fc:	212c      	movs	r1, #44	; 0x2c
 80135fe:	4620      	mov	r0, r4
 8013600:	f000 fe4f 	bl	80142a2 <_ZdlPvj>
	  __x = __y;
 8013604:	462c      	mov	r4, r5
      while (__x != 0)
 8013606:	b174      	cbz	r4, 8013626 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x32>
	  _M_erase(_S_right(__x));
 8013608:	68e1      	ldr	r1, [r4, #12]
 801360a:	4630      	mov	r0, r6
 801360c:	f7ff fff2 	bl	80135f4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      { return static_cast<_Link_type>(__x->_M_left); }
 8013610:	68a5      	ldr	r5, [r4, #8]
      { return _M_dataplus._M_p; }
 8013612:	6960      	ldr	r0, [r4, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8013614:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 8013618:	4298      	cmp	r0, r3
 801361a:	d0ef      	beq.n	80135fc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
	  _M_destroy(_M_allocated_capacity);
 801361c:	69e1      	ldr	r1, [r4, #28]
 801361e:	3101      	adds	r1, #1
 8013620:	f000 fe3f 	bl	80142a2 <_ZdlPvj>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8013624:	e7ea      	b.n	80135fc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x8>
    }
 8013626:	bd70      	pop	{r4, r5, r6, pc}

08013628 <_ZNSt3mapIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIhESaISt4pairIKhS5_EEED1Ev>:
 8013628:	b510      	push	{r4, lr}
 801362a:	4604      	mov	r4, r0
      { _M_erase(_M_begin()); }
 801362c:	6881      	ldr	r1, [r0, #8]
 801362e:	f7ff ffe1 	bl	80135f4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8013632:	4620      	mov	r0, r4
 8013634:	bd10      	pop	{r4, pc}

08013636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8013636:	b538      	push	{r3, r4, r5, lr}
 8013638:	4604      	mov	r4, r0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 801363a:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(__a), _M_p(__dat) { }
 801363e:	6003      	str	r3, [r0, #0]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8013640:	460d      	mov	r5, r1
 8013642:	b159      	cbz	r1, 801365c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x26>
	return __builtin_strlen(__s);
 8013644:	4608      	mov	r0, r1
 8013646:	f7ed fc06 	bl	8000e56 <strlen>
 801364a:	182a      	adds	r2, r5, r0
          _M_construct(__beg, __end, _Tag());
 801364c:	f04f 0300 	mov.w	r3, #0
 8013650:	4629      	mov	r1, r5
 8013652:	4620      	mov	r0, r4
 8013654:	f7f8 f800 	bl	800b658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 8013658:	4620      	mov	r0, r4
 801365a:	bd38      	pop	{r3, r4, r5, pc}
 801365c:	1e4a      	subs	r2, r1, #1
 801365e:	e7f5      	b.n	801364c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x16>

08013660 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013662:	4607      	mov	r7, r0
 8013664:	4615      	mov	r5, r2
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8013666:	688c      	ldr	r4, [r1, #8]
      { return &this->_M_impl._M_header; }
 8013668:	1d0e      	adds	r6, r1, #4
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
 801366a:	2201      	movs	r2, #1
 801366c:	e002      	b.n	8013674 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x14>
      { return static_cast<_Link_type>(__x->_M_right); }
 801366e:	68e3      	ldr	r3, [r4, #12]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013670:	4626      	mov	r6, r4
 8013672:	461c      	mov	r4, r3
      while (__x != 0)
 8013674:	b14c      	cbz	r4, 801368a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x2a>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 8013676:	782b      	ldrb	r3, [r5, #0]
 8013678:	f894 c010 	ldrb.w	ip, [r4, #16]
 801367c:	459c      	cmp	ip, r3
 801367e:	bf8c      	ite	hi
 8013680:	2201      	movhi	r2, #1
 8013682:	2200      	movls	r2, #0
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8013684:	d9f3      	bls.n	801366e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xe>
      { return static_cast<_Link_type>(__x->_M_left); }
 8013686:	68a3      	ldr	r3, [r4, #8]
 8013688:	e7f2      	b.n	8013670 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x10>
      : _M_node(__x) { }
 801368a:	4630      	mov	r0, r6
	}
      iterator __j = iterator(__y);
      if (__comp)
 801368c:	b122      	cbz	r2, 8013698 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x38>
      { return iterator(this->_M_impl._M_header._M_left); }
 801368e:	68cb      	ldr	r3, [r1, #12]
	{
	  if (__j == begin())
 8013690:	42b3      	cmp	r3, r6
 8013692:	d009      	beq.n	80136a8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x48>
	_M_node = _Rb_tree_decrement(_M_node);
 8013694:	f000 fe6f 	bl	8014376 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8013698:	7c02      	ldrb	r2, [r0, #16]
 801369a:	782b      	ldrb	r3, [r5, #0]
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801369c:	429a      	cmp	r2, r3
 801369e:	d206      	bcs.n	80136ae <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x4e>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80136a0:	603c      	str	r4, [r7, #0]
 80136a2:	607e      	str	r6, [r7, #4]
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 80136a4:	4638      	mov	r0, r7
 80136a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136a8:	603c      	str	r4, [r7, #0]
 80136aa:	607e      	str	r6, [r7, #4]
 80136ac:	e7fa      	b.n	80136a4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x44>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80136ae:	6038      	str	r0, [r7, #0]
 80136b0:	2300      	movs	r3, #0
 80136b2:	607b      	str	r3, [r7, #4]
 80136b4:	e7f6      	b.n	80136a4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x44>

080136b6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80136b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ba:	4607      	mov	r7, r0
 80136bc:	4688      	mov	r8, r1
 80136be:	461d      	mov	r5, r3
      { return &this->_M_impl._M_header; }
 80136c0:	1d0b      	adds	r3, r1, #4
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d012      	beq.n	80136ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x36>
 80136c6:	4614      	mov	r4, r2
 80136c8:	782e      	ldrb	r6, [r5, #0]
 80136ca:	7c13      	ldrb	r3, [r2, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80136cc:	42b3      	cmp	r3, r6
 80136ce:	d92c      	bls.n	801372a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x74>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 80136d0:	68cb      	ldr	r3, [r1, #12]
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d01d      	beq.n	8013712 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x5c>
	_M_node = _Rb_tree_decrement(_M_node);
 80136d6:	4610      	mov	r0, r2
 80136d8:	f000 fe4d 	bl	8014376 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80136dc:	7c03      	ldrb	r3, [r0, #16]
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80136de:	42b3      	cmp	r3, r6
 80136e0:	d21d      	bcs.n	801371e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
      { return static_cast<_Link_type>(__x->_M_right); }
 80136e2:	68c3      	ldr	r3, [r0, #12]
	    {
	      if (_S_right(__before._M_node) == 0)
 80136e4:	b1c3      	cbz	r3, 8013718 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x62>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80136e6:	603c      	str	r4, [r7, #0]
 80136e8:	607c      	str	r4, [r7, #4]
 80136ea:	e00f      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
      { return _M_impl._M_node_count; }
 80136ec:	694b      	ldr	r3, [r1, #20]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80136ee:	b143      	cbz	r3, 8013702 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x4c>
 80136f0:	690b      	ldr	r3, [r1, #16]
 80136f2:	7c1a      	ldrb	r2, [r3, #16]
 80136f4:	7829      	ldrb	r1, [r5, #0]
 80136f6:	4291      	cmp	r1, r2
 80136f8:	d903      	bls.n	8013702 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x4c>
       : first(__x), second(std::forward<_U2>(__y)) { }
 80136fa:	2200      	movs	r2, #0
 80136fc:	6002      	str	r2, [r0, #0]
 80136fe:	6043      	str	r3, [r0, #4]
 8013700:	e004      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 8013702:	462a      	mov	r2, r5
 8013704:	4641      	mov	r1, r8
 8013706:	4638      	mov	r0, r7
 8013708:	f7ff ffaa 	bl	8013660 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
	    return _M_get_insert_unique_pos(__k);
	}
      else
	// Equivalent keys.
	return _Res(__pos._M_node, 0);
    }
 801370c:	4638      	mov	r0, r7
 801370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013712:	6003      	str	r3, [r0, #0]
 8013714:	6043      	str	r3, [r0, #4]
 8013716:	e7f9      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(__x), second(std::forward<_U2>(__y)) { }
 8013718:	603b      	str	r3, [r7, #0]
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	e7f6      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 801371e:	462a      	mov	r2, r5
 8013720:	4641      	mov	r1, r8
 8013722:	4638      	mov	r0, r7
 8013724:	f7ff ff9c 	bl	8013660 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
 8013728:	e7f0      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801372a:	42b3      	cmp	r3, r6
 801372c:	d21a      	bcs.n	8013764 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xae>
	  if (__pos._M_node == _M_rightmost())
 801372e:	690b      	ldr	r3, [r1, #16]
 8013730:	4293      	cmp	r3, r2
 8013732:	d00a      	beq.n	801374a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x94>
	_M_node = _Rb_tree_increment(_M_node);
 8013734:	4610      	mov	r0, r2
 8013736:	f000 fe1c 	bl	8014372 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801373a:	7c03      	ldrb	r3, [r0, #16]
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801373c:	429e      	cmp	r6, r3
 801373e:	d20b      	bcs.n	8013758 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xa2>
      { return static_cast<_Link_type>(__x->_M_right); }
 8013740:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
 8013742:	b133      	cbz	r3, 8013752 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x9c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013744:	6038      	str	r0, [r7, #0]
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	e7e0      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(__x), second(std::forward<_U2>(__y)) { }
 801374a:	2200      	movs	r2, #0
 801374c:	6002      	str	r2, [r0, #0]
 801374e:	6043      	str	r3, [r0, #4]
 8013750:	e7dc      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
 8013752:	603b      	str	r3, [r7, #0]
 8013754:	607c      	str	r4, [r7, #4]
 8013756:	e7d9      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 8013758:	462a      	mov	r2, r5
 801375a:	4641      	mov	r1, r8
 801375c:	4638      	mov	r0, r7
 801375e:	f7ff ff7f 	bl	8013660 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
 8013762:	e7d3      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(std::forward<_U1>(__x)), second(__y) { }
 8013764:	603a      	str	r2, [r7, #0]
 8013766:	2300      	movs	r3, #0
 8013768:	6043      	str	r3, [r0, #4]
 801376a:	e7cf      	b.n	801370c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>

0801376c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013770:	4606      	mov	r6, r0
 8013772:	4617      	mov	r7, r2
 8013774:	461d      	mov	r5, r3
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8013776:	b319      	cbz	r1, 80137c0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x54>
 8013778:	f04f 0801 	mov.w	r8, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801377c:	202c      	movs	r0, #44	; 0x2c
 801377e:	f000 fd92 	bl	80142a6 <_Znwj>
 8013782:	4604      	mov	r4, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8013784:	f110 0f10 	cmn.w	r0, #16
 8013788:	d00e      	beq.n	80137a8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x3c>
      constexpr pair(const pair&) = default;	///< Copy constructor
 801378a:	462b      	mov	r3, r5
 801378c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013790:	6102      	str	r2, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8013792:	f100 021c 	add.w	r2, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8013796:	6142      	str	r2, [r0, #20]
      { return _M_dataplus._M_p; }
 8013798:	6869      	ldr	r1, [r5, #4]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
 801379a:	685a      	ldr	r2, [r3, #4]
          _M_construct(__beg, __end, _Tag());
 801379c:	f04f 0300 	mov.w	r3, #0
 80137a0:	440a      	add	r2, r1
 80137a2:	3014      	adds	r0, #20
 80137a4:	f7f7 ff84 	bl	800b6b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80137a8:	1d33      	adds	r3, r6, #4
 80137aa:	463a      	mov	r2, r7
 80137ac:	4621      	mov	r1, r4
 80137ae:	4640      	mov	r0, r8
 80137b0:	f000 fde3 	bl	801437a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80137b4:	6973      	ldr	r3, [r6, #20]
 80137b6:	3301      	adds	r3, #1
 80137b8:	6173      	str	r3, [r6, #20]
      }
 80137ba:	4620      	mov	r0, r4
 80137bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return &this->_M_impl._M_header; }
 80137c0:	1d03      	adds	r3, r0, #4
	bool __insert_left = (__x != 0 || __p == _M_end()
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d006      	beq.n	80137d4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x68>
 80137c6:	682b      	ldr	r3, [r5, #0]
 80137c8:	6912      	ldr	r2, [r2, #16]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d805      	bhi.n	80137da <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x6e>
 80137ce:	f04f 0800 	mov.w	r8, #0
 80137d2:	e7d3      	b.n	801377c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>
 80137d4:	f04f 0801 	mov.w	r8, #1
 80137d8:	e7d0      	b.n	801377c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>
 80137da:	f04f 0801 	mov.w	r8, #1
 80137de:	e7cd      	b.n	801377c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>

080137e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80137e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137e4:	4606      	mov	r6, r0
 80137e6:	4617      	mov	r7, r2
 80137e8:	461d      	mov	r5, r3
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80137ea:	b319      	cbz	r1, 8013834 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x54>
 80137ec:	f04f 0801 	mov.w	r8, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80137f0:	202c      	movs	r0, #44	; 0x2c
 80137f2:	f000 fd58 	bl	80142a6 <_Znwj>
 80137f6:	4604      	mov	r4, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80137f8:	f110 0f10 	cmn.w	r0, #16
 80137fc:	d00e      	beq.n	801381c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x3c>
 80137fe:	462b      	mov	r3, r5
 8013800:	f813 2b04 	ldrb.w	r2, [r3], #4
 8013804:	7402      	strb	r2, [r0, #16]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8013806:	f100 021c 	add.w	r2, r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 801380a:	6142      	str	r2, [r0, #20]
      { return _M_dataplus._M_p; }
 801380c:	6869      	ldr	r1, [r5, #4]
      { return _M_string_length; }
 801380e:	685a      	ldr	r2, [r3, #4]
          _M_construct(__beg, __end, _Tag());
 8013810:	f04f 0300 	mov.w	r3, #0
 8013814:	440a      	add	r2, r1
 8013816:	3014      	adds	r0, #20
 8013818:	f7f7 ff4a 	bl	800b6b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801381c:	1d33      	adds	r3, r6, #4
 801381e:	463a      	mov	r2, r7
 8013820:	4621      	mov	r1, r4
 8013822:	4640      	mov	r0, r8
 8013824:	f000 fda9 	bl	801437a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8013828:	6973      	ldr	r3, [r6, #20]
 801382a:	3301      	adds	r3, #1
 801382c:	6173      	str	r3, [r6, #20]
      }
 801382e:	4620      	mov	r0, r4
 8013830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return &this->_M_impl._M_header; }
 8013834:	1d03      	adds	r3, r0, #4
	bool __insert_left = (__x != 0 || __p == _M_end()
 8013836:	429a      	cmp	r2, r3
 8013838:	d006      	beq.n	8013848 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x68>
 801383a:	782b      	ldrb	r3, [r5, #0]
 801383c:	7c12      	ldrb	r2, [r2, #16]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 801383e:	429a      	cmp	r2, r3
 8013840:	d805      	bhi.n	801384e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x6e>
 8013842:	f04f 0800 	mov.w	r8, #0
 8013846:	e7d3      	b.n	80137f0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>
 8013848:	f04f 0801 	mov.w	r8, #1
 801384c:	e7d0      	b.n	80137f0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>
 801384e:	f04f 0801 	mov.w	r8, #1
 8013852:	e7cd      	b.n	80137f0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x10>

08013854 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>:
    template<typename _Arg, typename _NodeGen>
#else
    template<typename _NodeGen>
#endif
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013854:	b570      	push	{r4, r5, r6, lr}
 8013856:	b084      	sub	sp, #16
 8013858:	4604      	mov	r4, r0
 801385a:	4615      	mov	r5, r2
 801385c:	461e      	mov	r6, r3
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 801385e:	4613      	mov	r3, r2
 8013860:	460a      	mov	r2, r1
 8013862:	4601      	mov	r1, r0
 8013864:	a802      	add	r0, sp, #8
 8013866:	f7ff ff26 	bl	80136b6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>

      if (__res.second)
 801386a:	9a03      	ldr	r2, [sp, #12]
 801386c:	b13a      	cbz	r2, 801387e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x2a>
	return _M_insert_(__res.first, __res.second,
 801386e:	9600      	str	r6, [sp, #0]
 8013870:	462b      	mov	r3, r5
 8013872:	9902      	ldr	r1, [sp, #8]
 8013874:	4620      	mov	r0, r4
 8013876:	f7ff ffb3 	bl	80137e0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
			  _GLIBCXX_FORWARD(_Arg, __v),
			  __node_gen);
      return iterator(__res.first);
    }
 801387a:	b004      	add	sp, #16
 801387c:	bd70      	pop	{r4, r5, r6, pc}
      return iterator(__res.first);
 801387e:	9802      	ldr	r0, [sp, #8]
 8013880:	e7fb      	b.n	801387a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x26>

08013882 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8013882:	b570      	push	{r4, r5, r6, lr}
 8013884:	b082      	sub	sp, #8
 8013886:	4605      	mov	r5, r0
 8013888:	460c      	mov	r4, r1
 801388a:	4616      	mov	r6, r2
	: _M_t(__t) { }
 801388c:	9001      	str	r0, [sp, #4]
 801388e:	e006      	b.n	801389e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x1c>
	    _M_insert_unique_(end(), *__first, __an);
 8013890:	ab01      	add	r3, sp, #4
 8013892:	4622      	mov	r2, r4
 8013894:	1d29      	adds	r1, r5, #4
 8013896:	4628      	mov	r0, r5
 8013898:	f7ff ffdc 	bl	8013854 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801389c:	341c      	adds	r4, #28
 801389e:	42b4      	cmp	r4, r6
 80138a0:	d1f6      	bne.n	8013890 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0xe>
	}
 80138a2:	b002      	add	sp, #8
 80138a4:	bd70      	pop	{r4, r5, r6, pc}

080138a6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80138a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a8:	4607      	mov	r7, r0
 80138aa:	4615      	mov	r5, r2
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80138ac:	688c      	ldr	r4, [r1, #8]
      { return &this->_M_impl._M_header; }
 80138ae:	1d0e      	adds	r6, r1, #4
      bool __comp = true;
 80138b0:	2201      	movs	r2, #1
 80138b2:	e002      	b.n	80138ba <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x14>
      { return static_cast<_Link_type>(__x->_M_right); }
 80138b4:	68e3      	ldr	r3, [r4, #12]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80138b6:	4626      	mov	r6, r4
 80138b8:	461c      	mov	r4, r3
      while (__x != 0)
 80138ba:	b144      	cbz	r4, 80138ce <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	6922      	ldr	r2, [r4, #16]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	bf8c      	ite	hi
 80138c4:	2201      	movhi	r2, #1
 80138c6:	2200      	movls	r2, #0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80138c8:	d9f4      	bls.n	80138b4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0xe>
      { return static_cast<_Link_type>(__x->_M_left); }
 80138ca:	68a3      	ldr	r3, [r4, #8]
 80138cc:	e7f3      	b.n	80138b6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x10>
      : _M_node(__x) { }
 80138ce:	4630      	mov	r0, r6
      if (__comp)
 80138d0:	b122      	cbz	r2, 80138dc <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x36>
      { return iterator(this->_M_impl._M_header._M_left); }
 80138d2:	68cb      	ldr	r3, [r1, #12]
	  if (__j == begin())
 80138d4:	42b3      	cmp	r3, r6
 80138d6:	d009      	beq.n	80138ec <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x46>
	_M_node = _Rb_tree_decrement(_M_node);
 80138d8:	f000 fd4d 	bl	8014376 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80138dc:	6902      	ldr	r2, [r0, #16]
 80138de:	682b      	ldr	r3, [r5, #0]
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d206      	bcs.n	80138f2 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x4c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80138e4:	603c      	str	r4, [r7, #0]
 80138e6:	607e      	str	r6, [r7, #4]
    }
 80138e8:	4638      	mov	r0, r7
 80138ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ec:	603c      	str	r4, [r7, #0]
 80138ee:	607e      	str	r6, [r7, #4]
 80138f0:	e7fa      	b.n	80138e8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x42>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80138f2:	6038      	str	r0, [r7, #0]
 80138f4:	2300      	movs	r3, #0
 80138f6:	607b      	str	r3, [r7, #4]
 80138f8:	e7f6      	b.n	80138e8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x42>

080138fa <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80138fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138fe:	4607      	mov	r7, r0
 8013900:	4688      	mov	r8, r1
 8013902:	461d      	mov	r5, r3
      { return &this->_M_impl._M_header; }
 8013904:	1d0b      	adds	r3, r1, #4
      if (__pos._M_node == _M_end())
 8013906:	429a      	cmp	r2, r3
 8013908:	d012      	beq.n	8013930 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x36>
 801390a:	4614      	mov	r4, r2
 801390c:	682e      	ldr	r6, [r5, #0]
 801390e:	6913      	ldr	r3, [r2, #16]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8013910:	42b3      	cmp	r3, r6
 8013912:	d92c      	bls.n	801396e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x74>
	  if (__pos._M_node == _M_leftmost()) // begin()
 8013914:	68cb      	ldr	r3, [r1, #12]
 8013916:	4293      	cmp	r3, r2
 8013918:	d01d      	beq.n	8013956 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x5c>
	_M_node = _Rb_tree_decrement(_M_node);
 801391a:	4610      	mov	r0, r2
 801391c:	f000 fd2b 	bl	8014376 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8013920:	6903      	ldr	r3, [r0, #16]
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8013922:	42b3      	cmp	r3, r6
 8013924:	d21d      	bcs.n	8013962 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
      { return static_cast<_Link_type>(__x->_M_right); }
 8013926:	68c3      	ldr	r3, [r0, #12]
	      if (_S_right(__before._M_node) == 0)
 8013928:	b1c3      	cbz	r3, 801395c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x62>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801392a:	603c      	str	r4, [r7, #0]
 801392c:	607c      	str	r4, [r7, #4]
 801392e:	e00f      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
      { return _M_impl._M_node_count; }
 8013930:	694b      	ldr	r3, [r1, #20]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8013932:	b143      	cbz	r3, 8013946 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x4c>
 8013934:	690b      	ldr	r3, [r1, #16]
 8013936:	691a      	ldr	r2, [r3, #16]
 8013938:	6829      	ldr	r1, [r5, #0]
 801393a:	4291      	cmp	r1, r2
 801393c:	d903      	bls.n	8013946 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x4c>
       : first(__x), second(std::forward<_U2>(__y)) { }
 801393e:	2200      	movs	r2, #0
 8013940:	6002      	str	r2, [r0, #0]
 8013942:	6043      	str	r3, [r0, #4]
 8013944:	e004      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 8013946:	462a      	mov	r2, r5
 8013948:	4641      	mov	r1, r8
 801394a:	4638      	mov	r0, r7
 801394c:	f7ff ffab 	bl	80138a6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>
    }
 8013950:	4638      	mov	r0, r7
 8013952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013956:	6003      	str	r3, [r0, #0]
 8013958:	6043      	str	r3, [r0, #4]
 801395a:	e7f9      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(__x), second(std::forward<_U2>(__y)) { }
 801395c:	603b      	str	r3, [r7, #0]
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	e7f6      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 8013962:	462a      	mov	r2, r5
 8013964:	4641      	mov	r1, r8
 8013966:	4638      	mov	r0, r7
 8013968:	f7ff ff9d 	bl	80138a6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>
 801396c:	e7f0      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801396e:	42b3      	cmp	r3, r6
 8013970:	d21a      	bcs.n	80139a8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xae>
	  if (__pos._M_node == _M_rightmost())
 8013972:	690b      	ldr	r3, [r1, #16]
 8013974:	4293      	cmp	r3, r2
 8013976:	d00a      	beq.n	801398e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x94>
	_M_node = _Rb_tree_increment(_M_node);
 8013978:	4610      	mov	r0, r2
 801397a:	f000 fcfa 	bl	8014372 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801397e:	6903      	ldr	r3, [r0, #16]
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8013980:	429e      	cmp	r6, r3
 8013982:	d20b      	bcs.n	801399c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xa2>
      { return static_cast<_Link_type>(__x->_M_right); }
 8013984:	68e3      	ldr	r3, [r4, #12]
	      if (_S_right(__pos._M_node) == 0)
 8013986:	b133      	cbz	r3, 8013996 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x9c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013988:	6038      	str	r0, [r7, #0]
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	e7e0      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(__x), second(std::forward<_U2>(__y)) { }
 801398e:	2200      	movs	r2, #0
 8013990:	6002      	str	r2, [r0, #0]
 8013992:	6043      	str	r3, [r0, #4]
 8013994:	e7dc      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
 8013996:	603b      	str	r3, [r7, #0]
 8013998:	607c      	str	r4, [r7, #4]
 801399a:	e7d9      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
	    return _M_get_insert_unique_pos(__k);
 801399c:	462a      	mov	r2, r5
 801399e:	4641      	mov	r1, r8
 80139a0:	4638      	mov	r0, r7
 80139a2:	f7ff ff80 	bl	80138a6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>
 80139a6:	e7d3      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>
       : first(std::forward<_U1>(__x)), second(__y) { }
 80139a8:	603a      	str	r2, [r7, #0]
 80139aa:	2300      	movs	r3, #0
 80139ac:	6043      	str	r3, [r0, #4]
 80139ae:	e7cf      	b.n	8013950 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x56>

080139b0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80139b0:	b570      	push	{r4, r5, r6, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	4604      	mov	r4, r0
 80139b6:	4615      	mov	r5, r2
 80139b8:	461e      	mov	r6, r3
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80139ba:	4613      	mov	r3, r2
 80139bc:	460a      	mov	r2, r1
 80139be:	4601      	mov	r1, r0
 80139c0:	a802      	add	r0, sp, #8
 80139c2:	f7ff ff9a 	bl	80138fa <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>
      if (__res.second)
 80139c6:	9a03      	ldr	r2, [sp, #12]
 80139c8:	b13a      	cbz	r2, 80139da <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x2a>
	return _M_insert_(__res.first, __res.second,
 80139ca:	9600      	str	r6, [sp, #0]
 80139cc:	462b      	mov	r3, r5
 80139ce:	9902      	ldr	r1, [sp, #8]
 80139d0:	4620      	mov	r0, r4
 80139d2:	f7ff fecb 	bl	801376c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
    }
 80139d6:	b004      	add	sp, #16
 80139d8:	bd70      	pop	{r4, r5, r6, pc}
      return iterator(__res.first);
 80139da:	9802      	ldr	r0, [sp, #8]
 80139dc:	e7fb      	b.n	80139d6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x26>

080139de <_GLOBAL__sub_I_log_const_meshposition>:
 80139de:	b508      	push	{r3, lr}
 80139e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80139e4:	2001      	movs	r0, #1
 80139e6:	f7f7 fe8f 	bl	800b708 <_Z41__static_initialization_and_destruction_0ii>
 80139ea:	bd08      	pop	{r3, pc}

080139ec <z_log_msg2_runtime_create>:
{
 80139ec:	b510      	push	{r4, lr}
 80139ee:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80139f0:	ac0a      	add	r4, sp, #40	; 0x28
 80139f2:	9405      	str	r4, [sp, #20]
 80139f4:	9402      	str	r4, [sp, #8]
 80139f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80139f8:	9401      	str	r4, [sp, #4]
 80139fa:	9c08      	ldr	r4, [sp, #32]
 80139fc:	9400      	str	r4, [sp, #0]
 80139fe:	f7fd feb4 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 8013a02:	b006      	add	sp, #24
 8013a04:	bd10      	pop	{r4, pc}

08013a06 <check_correct_recv>:
    if (recv_size == expect_size) {
 8013a06:	428a      	cmp	r2, r1
 8013a08:	d001      	beq.n	8013a0e <check_correct_recv+0x8>
    bool res = false;
 8013a0a:	2000      	movs	r0, #0
}
 8013a0c:	4770      	bx	lr
{
 8013a0e:	b508      	push	{r3, lr}
        dwt_readrxdata((uint8_t *) expect_msg, expect_size, 0);
 8013a10:	2200      	movs	r2, #0
 8013a12:	b289      	uxth	r1, r1
 8013a14:	f7ff fb27 	bl	8013066 <dwt_readrxdata>
        res = true;
 8013a18:	2001      	movs	r0, #1
}
 8013a1a:	bd08      	pop	{r3, pc}

08013a1c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8013a1c:	b148      	cbz	r0, 8013a32 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8013a1e:	68c3      	ldr	r3, [r0, #12]
 8013a20:	8818      	ldrh	r0, [r3, #0]
 8013a22:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8013a26:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8013a2a:	bf14      	ite	ne
 8013a2c:	2000      	movne	r0, #0
 8013a2e:	2001      	moveq	r0, #1
 8013a30:	4770      	bx	lr
		return false;
 8013a32:	2000      	movs	r0, #0
}
 8013a34:	4770      	bx	lr

08013a36 <z_log_msg2_runtime_create>:
{
 8013a36:	b510      	push	{r4, lr}
 8013a38:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8013a3a:	ac0a      	add	r4, sp, #40	; 0x28
 8013a3c:	9405      	str	r4, [sp, #20]
 8013a3e:	9402      	str	r4, [sp, #8]
 8013a40:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013a42:	9401      	str	r4, [sp, #4]
 8013a44:	9c08      	ldr	r4, [sp, #32]
 8013a46:	9400      	str	r4, [sp, #0]
 8013a48:	f7fd fe8f 	bl	801176a <z_impl_z_log_msg2_runtime_vcreate>
}
 8013a4c:	b006      	add	sp, #24
 8013a4e:	bd10      	pop	{r4, pc}

08013a50 <arch_system_halt>:
	__asm__ volatile(
 8013a50:	f04f 0210 	mov.w	r2, #16
 8013a54:	f3ef 8311 	mrs	r3, BASEPRI
 8013a58:	f382 8812 	msr	BASEPRI_MAX, r2
 8013a5c:	f3bf 8f6f 	isb	sy
	for (;;) {
 8013a60:	e7fe      	b.n	8013a60 <arch_system_halt+0x10>

08013a62 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8013a62:	6902      	ldr	r2, [r0, #16]
 8013a64:	6943      	ldr	r3, [r0, #20]
 8013a66:	431a      	orrs	r2, r3
 8013a68:	f012 0203 	ands.w	r2, r2, #3
 8013a6c:	d10d      	bne.n	8013a8a <create_free_list+0x28>
	slab->free_list = NULL;
 8013a6e:	2100      	movs	r1, #0
 8013a70:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8013a72:	e005      	b.n	8013a80 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 8013a74:	6981      	ldr	r1, [r0, #24]
 8013a76:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 8013a78:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 8013a7a:	6901      	ldr	r1, [r0, #16]
 8013a7c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 8013a7e:	3201      	adds	r2, #1
 8013a80:	68c1      	ldr	r1, [r0, #12]
 8013a82:	4291      	cmp	r1, r2
 8013a84:	d8f6      	bhi.n	8013a74 <create_free_list+0x12>
	return 0;
 8013a86:	2000      	movs	r0, #0
 8013a88:	4770      	bx	lr
		return -EINVAL;
 8013a8a:	f06f 0015 	mvn.w	r0, #21
}
 8013a8e:	4770      	bx	lr

08013a90 <setup_thread_stack>:
{
 8013a90:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8013a92:	3207      	adds	r2, #7
 8013a94:	f022 0207 	bic.w	r2, r2, #7
 8013a98:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8013a9c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 8013aa0:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 8013aa2:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	6702      	str	r2, [r0, #112]	; 0x70
}
 8013aa8:	18c8      	adds	r0, r1, r3
 8013aaa:	bc10      	pop	{r4}
 8013aac:	4770      	bx	lr

08013aae <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aae:	f3ef 8005 	mrs	r0, IPSR
}
 8013ab2:	3800      	subs	r0, #0
 8013ab4:	bf18      	it	ne
 8013ab6:	2001      	movne	r0, #1
 8013ab8:	4770      	bx	lr

08013aba <z_impl_k_thread_name_set>:
}
 8013aba:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8013abe:	4770      	bx	lr

08013ac0 <k_thread_name_get>:
}
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	4770      	bx	lr

08013ac4 <z_impl_k_thread_start>:
{
 8013ac4:	b508      	push	{r3, lr}
	z_sched_start(thread);
 8013ac6:	f7fa febd 	bl	800e844 <z_sched_start>
}
 8013aca:	bd08      	pop	{r3, pc}

08013acc <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 8013acc:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 8013ace:	2400      	movs	r4, #0
 8013ad0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 8013ad2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8013ad4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 8013ad6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 8013ad8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 8013ada:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 8013adc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 8013ade:	bc10      	pop	{r4}
 8013ae0:	4770      	bx	lr

08013ae2 <z_impl_k_thread_create>:
{
 8013ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae4:	b087      	sub	sp, #28
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8013aea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8013aec:	2700      	movs	r7, #0
 8013aee:	9705      	str	r7, [sp, #20]
 8013af0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013af2:	9704      	str	r7, [sp, #16]
 8013af4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013af6:	9703      	str	r7, [sp, #12]
 8013af8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8013afa:	9702      	str	r7, [sp, #8]
 8013afc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013afe:	9701      	str	r7, [sp, #4]
 8013b00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013b02:	9700      	str	r7, [sp, #0]
 8013b04:	f7fa f91c 	bl	800dd40 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8013b08:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8013b0c:	bf08      	it	eq
 8013b0e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8013b12:	d102      	bne.n	8013b1a <z_impl_k_thread_create+0x38>
}
 8013b14:	4620      	mov	r0, r4
 8013b16:	b007      	add	sp, #28
 8013b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 8013b1a:	4632      	mov	r2, r6
 8013b1c:	462b      	mov	r3, r5
 8013b1e:	4620      	mov	r0, r4
 8013b20:	f7fa f900 	bl	800dd24 <schedule_new_thread>
 8013b24:	e7f6      	b.n	8013b14 <z_impl_k_thread_create+0x32>

08013b26 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8013b26:	b508      	push	{r3, lr}
 8013b28:	f04f 0210 	mov.w	r2, #16
 8013b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8013b30:	f382 8812 	msr	BASEPRI_MAX, r2
 8013b34:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8013b38:	f7ef ff22 	bl	8003980 <arch_cpu_idle>
 8013b3c:	e7f4      	b.n	8013b28 <idle+0x2>

08013b3e <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
 8013b3e:	b570      	push	{r4, r5, r6, lr}
 8013b40:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
 8013b42:	f100 0508 	add.w	r5, r0, #8
 8013b46:	f04f 0310 	mov.w	r3, #16
 8013b4a:	f3ef 8611 	mrs	r6, BASEPRI
 8013b4e:	f383 8812 	msr	BASEPRI_MAX, r3
 8013b52:	f3bf 8f6f 	isb	sy
 8013b56:	e005      	b.n	8013b64 <z_impl_k_msgq_purge+0x26>
 8013b58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8013b5c:	67da      	str	r2, [r3, #124]	; 0x7c
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f000 f925 	bl	8013dae <z_ready_thread>
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
 8013b64:	4620      	mov	r0, r4
 8013b66:	f000 f9e9 	bl	8013f3c <z_unpend_first_thread>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	2800      	cmp	r0, #0
 8013b6e:	d1f3      	bne.n	8013b58 <z_impl_k_msgq_purge+0x1a>
	}

	msgq->used_msgs = 0;
 8013b70:	2300      	movs	r3, #0
 8013b72:	6263      	str	r3, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
 8013b74:	6a23      	ldr	r3, [r4, #32]
 8013b76:	61e3      	str	r3, [r4, #28]

	z_reschedule(&msgq->lock, key);
 8013b78:	4631      	mov	r1, r6
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	f7fa fd2c 	bl	800e5d8 <z_reschedule>
}
 8013b80:	bd70      	pop	{r4, r5, r6, pc}

08013b82 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 8013b82:	4288      	cmp	r0, r1
 8013b84:	da00      	bge.n	8013b88 <new_prio_for_inheritance+0x6>
 8013b86:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8013b88:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 8013b8c:	db01      	blt.n	8013b92 <new_prio_for_inheritance+0x10>
 8013b8e:	4608      	mov	r0, r1
 8013b90:	4770      	bx	lr
 8013b92:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 8013b96:	4770      	bx	lr

08013b98 <adjust_owner_prio>:
{
 8013b98:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 8013b9a:	6880      	ldr	r0, [r0, #8]
 8013b9c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8013ba0:	428b      	cmp	r3, r1
 8013ba2:	d101      	bne.n	8013ba8 <adjust_owner_prio+0x10>
	return false;
 8013ba4:	2000      	movs	r0, #0
}
 8013ba6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 8013ba8:	f7fa fe9a 	bl	800e8e0 <z_set_prio>
 8013bac:	e7fb      	b.n	8013ba6 <adjust_owner_prio+0xe>

08013bae <z_impl_k_mutex_init>:
{
 8013bae:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 8013bb4:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 8013bb6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 8013bb8:	605b      	str	r3, [r3, #4]
}
 8013bba:	4770      	bx	lr

08013bbc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 8013bbc:	b15a      	cbz	r2, 8013bd6 <z_impl_k_sem_init+0x1a>
 8013bbe:	428a      	cmp	r2, r1
 8013bc0:	d30c      	bcc.n	8013bdc <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 8013bc2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 8013bc4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 8013bc6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 8013bc8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 8013bca:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 8013bce:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 8013bd0:	6143      	str	r3, [r0, #20]
	return 0;
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	4770      	bx	lr
		return -EINVAL;
 8013bd6:	f06f 0015 	mvn.w	r0, #21
 8013bda:	4770      	bx	lr
 8013bdc:	f06f 0015 	mvn.w	r0, #21
}
 8013be0:	4770      	bx	lr

08013be2 <work_timeout>:
{
 8013be2:	b510      	push	{r4, lr}
 8013be4:	b082      	sub	sp, #8
 8013be6:	4603      	mov	r3, r0
 8013be8:	f04f 0210 	mov.w	r2, #16
 8013bec:	f3ef 8411 	mrs	r4, BASEPRI
 8013bf0:	f382 8812 	msr	BASEPRI_MAX, r2
 8013bf4:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 8013bfc:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 8013c00:	f022 0108 	bic.w	r1, r2, #8
 8013c04:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 8013c08:	f012 0f08 	tst.w	r2, #8
 8013c0c:	d105      	bne.n	8013c1a <work_timeout+0x38>
	__asm__ volatile(
 8013c0e:	f384 8811 	msr	BASEPRI, r4
 8013c12:	f3bf 8f6f 	isb	sy
}
 8013c16:	b002      	add	sp, #8
 8013c18:	bd10      	pop	{r4, pc}
 8013c1a:	3810      	subs	r0, #16
		queue = dw->queue;
 8013c1c:	699b      	ldr	r3, [r3, #24]
 8013c1e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 8013c20:	a901      	add	r1, sp, #4
 8013c22:	f7fa fafb 	bl	800e21c <submit_to_queue_locked>
 8013c26:	e7f2      	b.n	8013c0e <work_timeout+0x2c>

08013c28 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 8013c28:	2300      	movs	r3, #0
 8013c2a:	6003      	str	r3, [r0, #0]
 8013c2c:	6043      	str	r3, [r0, #4]
 8013c2e:	6083      	str	r3, [r0, #8]
 8013c30:	60c3      	str	r3, [r0, #12]
 8013c32:	6041      	str	r1, [r0, #4]
}
 8013c34:	4770      	bx	lr

08013c36 <k_work_submit_to_queue>:
{
 8013c36:	b530      	push	{r4, r5, lr}
 8013c38:	b083      	sub	sp, #12
 8013c3a:	9001      	str	r0, [sp, #4]
 8013c3c:	4608      	mov	r0, r1
	__asm__ volatile(
 8013c3e:	f04f 0310 	mov.w	r3, #16
 8013c42:	f3ef 8511 	mrs	r5, BASEPRI
 8013c46:	f383 8812 	msr	BASEPRI_MAX, r3
 8013c4a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 8013c4e:	a901      	add	r1, sp, #4
 8013c50:	f7fa fae4 	bl	800e21c <submit_to_queue_locked>
 8013c54:	4604      	mov	r4, r0
	__asm__ volatile(
 8013c56:	f385 8811 	msr	BASEPRI, r5
 8013c5a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	dc02      	bgt.n	8013c68 <k_work_submit_to_queue+0x32>
}
 8013c62:	4620      	mov	r0, r4
 8013c64:	b003      	add	sp, #12
 8013c66:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 8013c68:	f7fb f808 	bl	800ec7c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	d0f8      	beq.n	8013c62 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 8013c70:	f7fa ff56 	bl	800eb20 <z_impl_k_yield>
	return ret;
 8013c74:	e7f5      	b.n	8013c62 <k_work_submit_to_queue+0x2c>

08013c76 <k_work_init_delayable>:
{
 8013c76:	b538      	push	{r3, r4, r5, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 8013c7c:	2230      	movs	r2, #48	; 0x30
 8013c7e:	2100      	movs	r1, #0
 8013c80:	f000 fbfe 	bl	8014480 <memset>
 8013c84:	6065      	str	r5, [r4, #4]
 8013c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013c8a:	60e3      	str	r3, [r4, #12]
}
 8013c8c:	bd38      	pop	{r3, r4, r5, pc}

08013c8e <k_work_schedule_for_queue>:
{
 8013c8e:	b510      	push	{r4, lr}
 8013c90:	b082      	sub	sp, #8
 8013c92:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 8013c94:	f04f 0010 	mov.w	r0, #16
 8013c98:	f3ef 8411 	mrs	r4, BASEPRI
 8013c9c:	f380 8812 	msr	BASEPRI_MAX, r0
 8013ca0:	f3bf 8f6f 	isb	sy
	return *flagp;
 8013ca4:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 8013ca6:	f010 0f0e 	tst.w	r0, #14
 8013caa:	d006      	beq.n	8013cba <k_work_schedule_for_queue+0x2c>
	int ret = 0;
 8013cac:	2000      	movs	r0, #0
	__asm__ volatile(
 8013cae:	f384 8811 	msr	BASEPRI, r4
 8013cb2:	f3bf 8f6f 	isb	sy
}
 8013cb6:	b002      	add	sp, #8
 8013cb8:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
 8013cba:	a801      	add	r0, sp, #4
 8013cbc:	f7fa fb1a 	bl	800e2f4 <schedule_for_queue_locked>
 8013cc0:	e7f5      	b.n	8013cae <k_work_schedule_for_queue+0x20>

08013cc2 <thread_active_elsewhere>:
}
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	4770      	bx	lr

08013cc6 <pended_on_thread>:
}
 8013cc6:	6880      	ldr	r0, [r0, #8]
 8013cc8:	4770      	bx	lr

08013cca <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 8013cca:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8013cce:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8013cd2:	4283      	cmp	r3, r0
 8013cd4:	d001      	beq.n	8013cda <z_sched_prio_cmp+0x10>
		return b2 - b1;
 8013cd6:	1ac0      	subs	r0, r0, r3
 8013cd8:	4770      	bx	lr
	return 0;
 8013cda:	2000      	movs	r0, #0
}
 8013cdc:	4770      	bx	lr

08013cde <z_unpend_thread_no_timeout>:
{
 8013cde:	b538      	push	{r3, r4, r5, lr}
 8013ce0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8013ce2:	2300      	movs	r3, #0
	__asm__ volatile(
 8013ce4:	f04f 0210 	mov.w	r2, #16
 8013ce8:	f3ef 8511 	mrs	r5, BASEPRI
 8013cec:	f382 8812 	msr	BASEPRI_MAX, r2
 8013cf0:	f3bf 8f6f 	isb	sy
 8013cf4:	e010      	b.n	8013d18 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f7ff ffe5 	bl	8013cc6 <pended_on_thread>
 8013cfc:	4621      	mov	r1, r4
 8013cfe:	f000 f823 	bl	8013d48 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8013d02:	7b63      	ldrb	r3, [r4, #13]
 8013d04:	f023 0302 	bic.w	r3, r3, #2
 8013d08:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8013d0e:	f385 8811 	msr	BASEPRI, r5
 8013d12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013d16:	2301      	movs	r3, #1
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d0ec      	beq.n	8013cf6 <z_unpend_thread_no_timeout+0x18>
}
 8013d1c:	bd38      	pop	{r3, r4, r5, pc}

08013d1e <z_reschedule_irqlock>:
{
 8013d1e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8013d20:	4603      	mov	r3, r0
 8013d22:	b920      	cbnz	r0, 8013d2e <z_reschedule_irqlock+0x10>
 8013d24:	f3ef 8205 	mrs	r2, IPSR
 8013d28:	b942      	cbnz	r2, 8013d3c <z_reschedule_irqlock+0x1e>
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	e000      	b.n	8013d30 <z_reschedule_irqlock+0x12>
 8013d2e:	2200      	movs	r2, #0
	if (resched(key)) {
 8013d30:	b932      	cbnz	r2, 8013d40 <z_reschedule_irqlock+0x22>
 8013d32:	f383 8811 	msr	BASEPRI, r3
 8013d36:	f3bf 8f6f 	isb	sy
}
 8013d3a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	e7f7      	b.n	8013d30 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7ef ff87 	bl	8003c54 <arch_swap>
	return ret;
 8013d46:	e7f8      	b.n	8013d3a <z_reschedule_irqlock+0x1c>

08013d48 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 8013d48:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 8013d4a:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 8013d4c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8013d4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8013d50:	2300      	movs	r3, #0
 8013d52:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 8013d54:	604b      	str	r3, [r1, #4]
}
 8013d56:	4770      	bx	lr

08013d58 <z_unpend_thread>:
{
 8013d58:	b538      	push	{r3, r4, r5, lr}
 8013d5a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8013d5c:	2300      	movs	r3, #0
	__asm__ volatile(
 8013d5e:	f04f 0210 	mov.w	r2, #16
 8013d62:	f3ef 8511 	mrs	r5, BASEPRI
 8013d66:	f382 8812 	msr	BASEPRI_MAX, r2
 8013d6a:	f3bf 8f6f 	isb	sy
 8013d6e:	e010      	b.n	8013d92 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8013d70:	4620      	mov	r0, r4
 8013d72:	f7ff ffa8 	bl	8013cc6 <pended_on_thread>
 8013d76:	4621      	mov	r1, r4
 8013d78:	f7ff ffe6 	bl	8013d48 <z_priq_dumb_remove>
 8013d7c:	7b63      	ldrb	r3, [r4, #13]
 8013d7e:	f023 0302 	bic.w	r3, r3, #2
 8013d82:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8013d84:	2300      	movs	r3, #0
 8013d86:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8013d88:	f385 8811 	msr	BASEPRI, r5
 8013d8c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013d90:	2301      	movs	r3, #1
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d0ec      	beq.n	8013d70 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 8013d96:	f104 0018 	add.w	r0, r4, #24
 8013d9a:	f000 f960 	bl	801405e <z_abort_timeout>
}
 8013d9e:	bd38      	pop	{r3, r4, r5, pc}

08013da0 <z_priq_dumb_best>:
{
 8013da0:	4603      	mov	r3, r0
	return list->head == list;
 8013da2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8013da4:	4283      	cmp	r3, r0
 8013da6:	d000      	beq.n	8013daa <z_priq_dumb_best+0xa>
}
 8013da8:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8013daa:	2000      	movs	r0, #0
	return thread;
 8013dac:	e7fc      	b.n	8013da8 <z_priq_dumb_best+0x8>

08013dae <z_ready_thread>:
{
 8013dae:	b538      	push	{r3, r4, r5, lr}
 8013db0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8013db2:	2300      	movs	r3, #0
	__asm__ volatile(
 8013db4:	f04f 0210 	mov.w	r2, #16
 8013db8:	f3ef 8511 	mrs	r5, BASEPRI
 8013dbc:	f382 8812 	msr	BASEPRI_MAX, r2
 8013dc0:	f3bf 8f6f 	isb	sy
 8013dc4:	e004      	b.n	8013dd0 <z_ready_thread+0x22>
	__asm__ volatile(
 8013dc6:	f385 8811 	msr	BASEPRI, r5
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	2301      	movs	r3, #1
 8013dd0:	b943      	cbnz	r3, 8013de4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f7ff ff75 	bl	8013cc2 <thread_active_elsewhere>
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d1f4      	bne.n	8013dc6 <z_ready_thread+0x18>
			ready_thread(thread);
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7fa fcf1 	bl	800e7c4 <ready_thread>
 8013de2:	e7f0      	b.n	8013dc6 <z_ready_thread+0x18>
}
 8013de4:	bd38      	pop	{r3, r4, r5, pc}

08013de6 <z_thread_timeout>:
{
 8013de6:	b570      	push	{r4, r5, r6, lr}
 8013de8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8013dea:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 8013dee:	2300      	movs	r3, #0
	__asm__ volatile(
 8013df0:	f04f 0210 	mov.w	r2, #16
 8013df4:	f3ef 8611 	mrs	r6, BASEPRI
 8013df8:	f382 8812 	msr	BASEPRI_MAX, r2
 8013dfc:	f3bf 8f6f 	isb	sy
 8013e00:	e011      	b.n	8013e26 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8013e02:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8013e06:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8013e0a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8013e0e:	f023 0310 	bic.w	r3, r3, #16
 8013e12:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8013e16:	4628      	mov	r0, r5
 8013e18:	f7fa fcd4 	bl	800e7c4 <ready_thread>
	__asm__ volatile(
 8013e1c:	f386 8811 	msr	BASEPRI, r6
 8013e20:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013e24:	2301      	movs	r3, #1
 8013e26:	b9ab      	cbnz	r3, 8013e54 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 8013e28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 8013e2c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8013e30:	d1f4      	bne.n	8013e1c <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 8013e32:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d0e3      	beq.n	8013e02 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f7ff ff43 	bl	8013cc6 <pended_on_thread>
 8013e40:	4629      	mov	r1, r5
 8013e42:	f7ff ff81 	bl	8013d48 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8013e46:	7b6b      	ldrb	r3, [r5, #13]
 8013e48:	f023 0302 	bic.w	r3, r3, #2
 8013e4c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	60ab      	str	r3, [r5, #8]
}
 8013e52:	e7d6      	b.n	8013e02 <z_thread_timeout+0x1c>
}
 8013e54:	bd70      	pop	{r4, r5, r6, pc}

08013e56 <add_to_waitq_locked>:
{
 8013e56:	b570      	push	{r4, r5, r6, lr}
 8013e58:	4605      	mov	r5, r0
 8013e5a:	460e      	mov	r6, r1
	unready_thread(thread);
 8013e5c:	f7fa fd10 	bl	800e880 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8013e60:	7b6b      	ldrb	r3, [r5, #13]
 8013e62:	f043 0302 	orr.w	r3, r3, #2
 8013e66:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 8013e68:	b1b6      	cbz	r6, 8013e98 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 8013e6a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 8013e6c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8013e6e:	42a6      	cmp	r6, r4
 8013e70:	d019      	beq.n	8013ea6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8013e72:	b164      	cbz	r4, 8013e8e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8013e74:	4621      	mov	r1, r4
 8013e76:	4628      	mov	r0, r5
 8013e78:	f7ff ff27 	bl	8013cca <z_sched_prio_cmp>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	dc0c      	bgt.n	8013e9a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8013e80:	b12c      	cbz	r4, 8013e8e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 8013e82:	6873      	ldr	r3, [r6, #4]
 8013e84:	429c      	cmp	r4, r3
 8013e86:	d002      	beq.n	8013e8e <add_to_waitq_locked+0x38>
 8013e88:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8013e8a:	2c00      	cmp	r4, #0
 8013e8c:	d1f1      	bne.n	8013e72 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 8013e8e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 8013e90:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 8013e92:	606b      	str	r3, [r5, #4]
	tail->next = node;
 8013e94:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8013e96:	6075      	str	r5, [r6, #4]
}
 8013e98:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 8013e9a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8013e9c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8013e9e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8013ea0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8013ea2:	6065      	str	r5, [r4, #4]
}
 8013ea4:	e7f8      	b.n	8013e98 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8013ea6:	2400      	movs	r4, #0
 8013ea8:	e7e3      	b.n	8013e72 <add_to_waitq_locked+0x1c>

08013eaa <pend>:
{
 8013eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eae:	4605      	mov	r5, r0
 8013eb0:	460e      	mov	r6, r1
 8013eb2:	4691      	mov	r9, r2
 8013eb4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8013eb6:	2400      	movs	r4, #0
	__asm__ volatile(
 8013eb8:	f04f 0310 	mov.w	r3, #16
 8013ebc:	f3ef 8711 	mrs	r7, BASEPRI
 8013ec0:	f383 8812 	msr	BASEPRI_MAX, r3
 8013ec4:	f3bf 8f6f 	isb	sy
 8013ec8:	e008      	b.n	8013edc <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f7ff ffc2 	bl	8013e56 <add_to_waitq_locked>
	__asm__ volatile(
 8013ed2:	f387 8811 	msr	BASEPRI, r7
 8013ed6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013eda:	2401      	movs	r4, #1
 8013edc:	2c00      	cmp	r4, #0
 8013ede:	d0f4      	beq.n	8013eca <pend+0x20>
	add_thread_timeout(thread, timeout);
 8013ee0:	464a      	mov	r2, r9
 8013ee2:	4643      	mov	r3, r8
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f7fa fb23 	bl	800e530 <add_thread_timeout>
}
 8013eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013eee <z_unpend1_no_timeout>:
{
 8013eee:	b570      	push	{r4, r5, r6, lr}
 8013ef0:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8013ef2:	2300      	movs	r3, #0
	__asm__ volatile(
 8013ef4:	f04f 0210 	mov.w	r2, #16
 8013ef8:	f3ef 8611 	mrs	r6, BASEPRI
 8013efc:	f382 8812 	msr	BASEPRI_MAX, r2
 8013f00:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8013f04:	461c      	mov	r4, r3
 8013f06:	e004      	b.n	8013f12 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 8013f08:	f386 8811 	msr	BASEPRI, r6
 8013f0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013f10:	2301      	movs	r3, #1
 8013f12:	b98b      	cbnz	r3, 8013f38 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 8013f14:	4628      	mov	r0, r5
 8013f16:	f7ff ff43 	bl	8013da0 <z_priq_dumb_best>
		if (thread != NULL) {
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	d0f3      	beq.n	8013f08 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8013f20:	f7ff fed1 	bl	8013cc6 <pended_on_thread>
 8013f24:	4621      	mov	r1, r4
 8013f26:	f7ff ff0f 	bl	8013d48 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8013f2a:	7b63      	ldrb	r3, [r4, #13]
 8013f2c:	f023 0302 	bic.w	r3, r3, #2
 8013f30:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8013f32:	2300      	movs	r3, #0
 8013f34:	60a3      	str	r3, [r4, #8]
}
 8013f36:	e7e7      	b.n	8013f08 <z_unpend1_no_timeout+0x1a>
}
 8013f38:	4620      	mov	r0, r4
 8013f3a:	bd70      	pop	{r4, r5, r6, pc}

08013f3c <z_unpend_first_thread>:
{
 8013f3c:	b570      	push	{r4, r5, r6, lr}
 8013f3e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 8013f40:	2300      	movs	r3, #0
	__asm__ volatile(
 8013f42:	f04f 0210 	mov.w	r2, #16
 8013f46:	f3ef 8611 	mrs	r6, BASEPRI
 8013f4a:	f382 8812 	msr	BASEPRI_MAX, r2
 8013f4e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8013f52:	461c      	mov	r4, r3
 8013f54:	e004      	b.n	8013f60 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 8013f56:	f386 8811 	msr	BASEPRI, r6
 8013f5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013f5e:	2301      	movs	r3, #1
 8013f60:	b9ab      	cbnz	r3, 8013f8e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 8013f62:	4628      	mov	r0, r5
 8013f64:	f7ff ff1c 	bl	8013da0 <z_priq_dumb_best>
		if (thread != NULL) {
 8013f68:	4604      	mov	r4, r0
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	d0f3      	beq.n	8013f56 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8013f6e:	f7ff feaa 	bl	8013cc6 <pended_on_thread>
 8013f72:	4621      	mov	r1, r4
 8013f74:	f7ff fee8 	bl	8013d48 <z_priq_dumb_remove>
 8013f78:	7b63      	ldrb	r3, [r4, #13]
 8013f7a:	f023 0302 	bic.w	r3, r3, #2
 8013f7e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8013f80:	2300      	movs	r3, #0
 8013f82:	60a3      	str	r3, [r4, #8]
 8013f84:	f104 0018 	add.w	r0, r4, #24
 8013f88:	f000 f869 	bl	801405e <z_abort_timeout>
 8013f8c:	e7e3      	b.n	8013f56 <z_unpend_first_thread+0x1a>
}
 8013f8e:	4620      	mov	r0, r4
 8013f90:	bd70      	pop	{r4, r5, r6, pc}

08013f92 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 8013f92:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 8013f94:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 8013f96:	6083      	str	r3, [r0, #8]
}
 8013f98:	4770      	bx	lr

08013f9a <z_impl_k_usleep>:
{
 8013f9a:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
 8013f9c:	17c1      	asrs	r1, r0, #31
		t += off;
 8013f9e:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 8013fa0:	f04f 0264 	mov.w	r2, #100	; 0x64
 8013fa4:	f04f 0300 	mov.w	r3, #0
 8013fa8:	f141 0100 	adc.w	r1, r1, #0
 8013fac:	f7ec fdc6 	bl	8000b3c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 8013fb0:	17c1      	asrs	r1, r0, #31
 8013fb2:	f7fa fdf9 	bl	800eba8 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 8013fb6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013fba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
 8013fbe:	1818      	adds	r0, r3, r0
 8013fc0:	bd08      	pop	{r3, pc}

08013fc2 <z_sched_wake>:
{
 8013fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	4688      	mov	r8, r1
 8013fca:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 8013fcc:	2300      	movs	r3, #0
	__asm__ volatile(
 8013fce:	f04f 0210 	mov.w	r2, #16
 8013fd2:	f3ef 8611 	mrs	r6, BASEPRI
 8013fd6:	f382 8812 	msr	BASEPRI_MAX, r2
 8013fda:	f3bf 8f6f 	isb	sy
	bool ret = false;
 8013fde:	4699      	mov	r9, r3
 8013fe0:	e004      	b.n	8013fec <z_sched_wake+0x2a>
	__asm__ volatile(
 8013fe2:	f386 8811 	msr	BASEPRI, r6
 8013fe6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8013fea:	2301      	movs	r3, #1
 8013fec:	b9eb      	cbnz	r3, 801402a <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 8013fee:	4628      	mov	r0, r5
 8013ff0:	f7ff fed6 	bl	8013da0 <z_priq_dumb_best>
		if (thread != NULL) {
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	d0f3      	beq.n	8013fe2 <z_sched_wake+0x20>
 8013ffa:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 8013ffe:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8014000:	f7ff fe61 	bl	8013cc6 <pended_on_thread>
 8014004:	4621      	mov	r1, r4
 8014006:	f7ff fe9f 	bl	8013d48 <z_priq_dumb_remove>
 801400a:	7b63      	ldrb	r3, [r4, #13]
 801400c:	f023 0302 	bic.w	r3, r3, #2
 8014010:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8014012:	2300      	movs	r3, #0
 8014014:	60a3      	str	r3, [r4, #8]
 8014016:	f104 0018 	add.w	r0, r4, #24
 801401a:	f000 f820 	bl	801405e <z_abort_timeout>
			ready_thread(thread);
 801401e:	4620      	mov	r0, r4
 8014020:	f7fa fbd0 	bl	800e7c4 <ready_thread>
			ret = true;
 8014024:	f04f 0901 	mov.w	r9, #1
 8014028:	e7db      	b.n	8013fe2 <z_sched_wake+0x20>
}
 801402a:	4648      	mov	r0, r9
 801402c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014030 <remove_timeout>:
{
 8014030:	b510      	push	{r4, lr}
 8014032:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 8014034:	f7fa fe92 	bl	800ed5c <next>
 8014038:	b148      	cbz	r0, 801404e <remove_timeout+0x1e>
 801403a:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 801403c:	6920      	ldr	r0, [r4, #16]
 801403e:	6961      	ldr	r1, [r4, #20]
 8014040:	6913      	ldr	r3, [r2, #16]
 8014042:	181b      	adds	r3, r3, r0
 8014044:	6950      	ldr	r0, [r2, #20]
 8014046:	eb41 0100 	adc.w	r1, r1, r0
 801404a:	6113      	str	r3, [r2, #16]
 801404c:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 801404e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 8014050:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 8014052:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8014054:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8014056:	2300      	movs	r3, #0
 8014058:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 801405a:	6063      	str	r3, [r4, #4]
}
 801405c:	bd10      	pop	{r4, pc}

0801405e <z_abort_timeout>:
{
 801405e:	b570      	push	{r4, r5, r6, lr}
 8014060:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8014062:	2300      	movs	r3, #0
	__asm__ volatile(
 8014064:	f04f 0210 	mov.w	r2, #16
 8014068:	f3ef 8611 	mrs	r6, BASEPRI
 801406c:	f382 8812 	msr	BASEPRI_MAX, r2
 8014070:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 8014074:	f06f 0015 	mvn.w	r0, #21
 8014078:	e004      	b.n	8014084 <z_abort_timeout+0x26>
	__asm__ volatile(
 801407a:	f386 8811 	msr	BASEPRI, r6
 801407e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8014082:	2301      	movs	r3, #1
 8014084:	461d      	mov	r5, r3
 8014086:	b93b      	cbnz	r3, 8014098 <z_abort_timeout+0x3a>
	return node->next != NULL;
 8014088:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 801408a:	2b00      	cmp	r3, #0
 801408c:	d0f5      	beq.n	801407a <z_abort_timeout+0x1c>
			remove_timeout(to);
 801408e:	4620      	mov	r0, r4
 8014090:	f7ff ffce 	bl	8014030 <remove_timeout>
			ret = 0;
 8014094:	4628      	mov	r0, r5
 8014096:	e7f0      	b.n	801407a <z_abort_timeout+0x1c>
}
 8014098:	bd70      	pop	{r4, r5, r6, pc}

0801409a <z_set_timeout_expiry>:
{
 801409a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409c:	4605      	mov	r5, r0
 801409e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 80140a0:	2300      	movs	r3, #0
	__asm__ volatile(
 80140a2:	f04f 0210 	mov.w	r2, #16
 80140a6:	f3ef 8611 	mrs	r6, BASEPRI
 80140aa:	f382 8812 	msr	BASEPRI_MAX, r2
 80140ae:	f3bf 8f6f 	isb	sy
 80140b2:	e00a      	b.n	80140ca <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 80140b4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 80140b6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80140ba:	2801      	cmp	r0, #1
 80140bc:	dd00      	ble.n	80140c0 <z_set_timeout_expiry+0x26>
 80140be:	b97c      	cbnz	r4, 80140e0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 80140c0:	f386 8811 	msr	BASEPRI, r6
 80140c4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80140c8:	2301      	movs	r3, #1
 80140ca:	461c      	mov	r4, r3
 80140cc:	b97b      	cbnz	r3, 80140ee <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 80140ce:	f7fa fe5d 	bl	800ed8c <next_timeout>
			      || (ticks <= next_to);
 80140d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80140d6:	d0ed      	beq.n	80140b4 <z_set_timeout_expiry+0x1a>
 80140d8:	42a8      	cmp	r0, r5
 80140da:	dbec      	blt.n	80140b6 <z_set_timeout_expiry+0x1c>
 80140dc:	2401      	movs	r4, #1
 80140de:	e7ea      	b.n	80140b6 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80140e0:	4639      	mov	r1, r7
 80140e2:	42a8      	cmp	r0, r5
 80140e4:	bfa8      	it	ge
 80140e6:	4628      	movge	r0, r5
 80140e8:	f7f5 fe5a 	bl	8009da0 <sys_clock_set_timeout>
 80140ec:	e7e8      	b.n	80140c0 <z_set_timeout_expiry+0x26>
}
 80140ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080140f0 <sys_clock_tick_get_32>:
{
 80140f0:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 80140f2:	f7fa ff5f 	bl	800efb4 <sys_clock_tick_get>
}
 80140f6:	bd08      	pop	{r3, pc}

080140f8 <z_impl_k_uptime_ticks>:
{
 80140f8:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 80140fa:	f7fa ff5b 	bl	800efb4 <sys_clock_tick_get>
}
 80140fe:	bd08      	pop	{r3, pc}

08014100 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 8014100:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 8014102:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 8014104:	2300      	movs	r3, #0
 8014106:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 8014108:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 801410c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 801410e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 8014110:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8014112:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 8014114:	6343      	str	r3, [r0, #52]	; 0x34
}
 8014116:	4770      	bx	lr

08014118 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 8014118:	b510      	push	{r4, lr}
 801411a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 801411c:	f7ff ff9f 	bl	801405e <z_abort_timeout>

	if (inactive) {
 8014120:	b9a0      	cbnz	r0, 801414c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 8014122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014124:	b10b      	cbz	r3, 801412a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 8014126:	4620      	mov	r0, r4
 8014128:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 801412a:	f104 0018 	add.w	r0, r4, #24
 801412e:	f7ff fede 	bl	8013eee <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 8014132:	b158      	cbz	r0, 801414c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 8014134:	f7ff fe3b 	bl	8013dae <z_ready_thread>
	__asm__ volatile(
 8014138:	f04f 0310 	mov.w	r3, #16
 801413c:	f3ef 8011 	mrs	r0, BASEPRI
 8014140:	f383 8812 	msr	BASEPRI_MAX, r3
 8014144:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8014148:	f7ff fde9 	bl	8013d1e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 801414c:	bd10      	pop	{r4, pc}

0801414e <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801414e:	b108      	cbz	r0, 8014154 <poller_thread+0x6>
 8014150:	3860      	subs	r0, #96	; 0x60
 8014152:	4770      	bx	lr
}
 8014154:	4770      	bx	lr

08014156 <signal_poller>:
{
 8014156:	b538      	push	{r3, r4, r5, lr}
 8014158:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 801415a:	6880      	ldr	r0, [r0, #8]
 801415c:	f7ff fff7 	bl	801414e <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 8014160:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 8014162:	f013 0f02 	tst.w	r3, #2
 8014166:	d024      	beq.n	80141b2 <signal_poller+0x5c>
 8014168:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 801416a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801416c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 801416e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014172:	bf08      	it	eq
 8014174:	f112 0f02 	cmneq.w	r2, #2
 8014178:	d01d      	beq.n	80141b6 <signal_poller+0x60>
	z_unpend_thread(thread);
 801417a:	f7ff fded 	bl	8013d58 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801417e:	2d08      	cmp	r5, #8
 8014180:	d009      	beq.n	8014196 <signal_poller+0x40>
 8014182:	2300      	movs	r3, #0
 8014184:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 8014186:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8014188:	f013 0f1f 	tst.w	r3, #31
 801418c:	d108      	bne.n	80141a0 <signal_poller+0x4a>
	return node->next != NULL;
 801418e:	69a3      	ldr	r3, [r4, #24]
 8014190:	b123      	cbz	r3, 801419c <signal_poller+0x46>
 8014192:	2300      	movs	r3, #0
 8014194:	e005      	b.n	80141a2 <signal_poller+0x4c>
 8014196:	f06f 0303 	mvn.w	r3, #3
 801419a:	e7f3      	b.n	8014184 <signal_poller+0x2e>
 801419c:	2301      	movs	r3, #1
 801419e:	e000      	b.n	80141a2 <signal_poller+0x4c>
 80141a0:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 80141a2:	b90b      	cbnz	r3, 80141a8 <signal_poller+0x52>
		return 0;
 80141a4:	2000      	movs	r0, #0
 80141a6:	e005      	b.n	80141b4 <signal_poller+0x5e>
	z_ready_thread(thread);
 80141a8:	4620      	mov	r0, r4
 80141aa:	f7ff fe00 	bl	8013dae <z_ready_thread>
	return 0;
 80141ae:	2000      	movs	r0, #0
 80141b0:	e000      	b.n	80141b4 <signal_poller+0x5e>
		return 0;
 80141b2:	2000      	movs	r0, #0
}
 80141b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 80141b6:	f06f 000a 	mvn.w	r0, #10
 80141ba:	e7fb      	b.n	80141b4 <signal_poller+0x5e>

080141bc <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 80141bc:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 80141be:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 80141c0:	7823      	ldrb	r3, [r4, #0]
 80141c2:	b173      	cbz	r3, 80141e2 <signal_triggered_work+0x26>
 80141c4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80141c8:	b15d      	cbz	r5, 80141e2 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 80141ca:	f1a4 0614 	sub.w	r6, r4, #20
 80141ce:	f104 0014 	add.w	r0, r4, #20
 80141d2:	f7ff ff44 	bl	801405e <z_abort_timeout>
		twork->poll_result = 0;
 80141d6:	2300      	movs	r3, #0
 80141d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 80141da:	4631      	mov	r1, r6
 80141dc:	4628      	mov	r0, r5
 80141de:	f7ff fd2a 	bl	8013c36 <k_work_submit_to_queue>
	}

	return 0;
}
 80141e2:	2000      	movs	r0, #0
 80141e4:	bd70      	pop	{r4, r5, r6, pc}

080141e6 <signal_poll_event>:
{
 80141e6:	b570      	push	{r4, r5, r6, lr}
 80141e8:	4604      	mov	r4, r0
 80141ea:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 80141ec:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 80141ee:	b1d6      	cbz	r6, 8014226 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 80141f0:	7873      	ldrb	r3, [r6, #1]
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d00d      	beq.n	8014212 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 80141f6:	2b02      	cmp	r3, #2
 80141f8:	d012      	beq.n	8014220 <signal_poll_event+0x3a>
		poller->is_polling = false;
 80141fa:	2000      	movs	r0, #0
 80141fc:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 80141fe:	2300      	movs	r3, #0
 8014200:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 8014202:	68e3      	ldr	r3, [r4, #12]
 8014204:	f3c3 3145 	ubfx	r1, r3, #13, #6
 8014208:	430d      	orrs	r5, r1
 801420a:	f365 3352 	bfi	r3, r5, #13, #6
 801420e:	60e3      	str	r3, [r4, #12]
}
 8014210:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 8014212:	f7ff ffa0 	bl	8014156 <signal_poller>
		poller->is_polling = false;
 8014216:	2300      	movs	r3, #0
 8014218:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 801421a:	4298      	cmp	r0, r3
 801421c:	daef      	bge.n	80141fe <signal_poll_event+0x18>
 801421e:	e7f7      	b.n	8014210 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 8014220:	f7ff ffcc 	bl	80141bc <signal_triggered_work>
 8014224:	e7f7      	b.n	8014216 <signal_poll_event+0x30>
	int retcode = 0;
 8014226:	2000      	movs	r0, #0
 8014228:	e7e9      	b.n	80141fe <signal_poll_event+0x18>

0801422a <k_poll_event_init>:
{
 801422a:	b410      	push	{r4}
	event->poller = NULL;
 801422c:	2400      	movs	r4, #0
 801422e:	6084      	str	r4, [r0, #8]
	event->type = type;
 8014230:	f890 c00d 	ldrb.w	ip, [r0, #13]
 8014234:	f361 0c04 	bfi	ip, r1, #0, #5
 8014238:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
 801423c:	68c1      	ldr	r1, [r0, #12]
 801423e:	f364 3152 	bfi	r1, r4, #13, #6
 8014242:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
 8014244:	7b81      	ldrb	r1, [r0, #14]
 8014246:	f362 01c3 	bfi	r1, r2, #3, #1
 801424a:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
 801424c:	89c2      	ldrh	r2, [r0, #14]
 801424e:	f364 120f 	bfi	r2, r4, #4, #12
 8014252:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 8014254:	6103      	str	r3, [r0, #16]
}
 8014256:	bc10      	pop	{r4}
 8014258:	4770      	bx	lr

0801425a <z_handle_obj_poll_events>:
{
 801425a:	b508      	push	{r3, lr}
 801425c:	4603      	mov	r3, r0
	return list->head == list;
 801425e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 8014260:	4283      	cmp	r3, r0
 8014262:	d009      	beq.n	8014278 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 8014264:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8014266:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8014268:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801426a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801426c:	2300      	movs	r3, #0
 801426e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8014270:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 8014272:	b108      	cbz	r0, 8014278 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 8014274:	f7ff ffb7 	bl	80141e6 <signal_poll_event>
}
 8014278:	bd08      	pop	{r3, pc}

0801427a <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
 801427a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 801427c:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
 801427e:	2300      	movs	r3, #0
 8014280:	6083      	str	r3, [r0, #8]
}
 8014282:	4770      	bx	lr

08014284 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 8014284:	6883      	ldr	r3, [r0, #8]
 8014286:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 8014288:	68c3      	ldr	r3, [r0, #12]
 801428a:	6013      	str	r3, [r2, #0]
}
 801428c:	4770      	bx	lr

0801428e <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 801428e:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 8014290:	4770      	bx	lr

08014292 <k_heap_init>:
{
 8014292:	b510      	push	{r4, lr}
 8014294:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 8014298:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 801429a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 801429c:	f7fc fed9 	bl	8011052 <sys_heap_init>
}
 80142a0:	bd10      	pop	{r4, pc}

080142a2 <_ZdlPvj>:
 80142a2:	f000 b8d6 	b.w	8014452 <_ZdlPv>

080142a6 <_Znwj>:
 80142a6:	2801      	cmp	r0, #1
 80142a8:	bf38      	it	cc
 80142aa:	2001      	movcc	r0, #1
 80142ac:	b510      	push	{r4, lr}
 80142ae:	4604      	mov	r4, r0
 80142b0:	4620      	mov	r0, r4
 80142b2:	f7fb fabd 	bl	800f830 <malloc>
 80142b6:	b930      	cbnz	r0, 80142c6 <_Znwj+0x20>
 80142b8:	f7fb fa82 	bl	800f7c0 <_ZSt15get_new_handlerv>
 80142bc:	b908      	cbnz	r0, 80142c2 <_Znwj+0x1c>
 80142be:	f000 f8ca 	bl	8014456 <abort>
 80142c2:	4780      	blx	r0
 80142c4:	e7f4      	b.n	80142b0 <_Znwj+0xa>
 80142c6:	bd10      	pop	{r4, pc}

080142c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80142c8:	68c3      	ldr	r3, [r0, #12]
 80142ca:	689a      	ldr	r2, [r3, #8]
 80142cc:	60c2      	str	r2, [r0, #12]
 80142ce:	b510      	push	{r4, lr}
 80142d0:	b102      	cbz	r2, 80142d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80142d2:	6050      	str	r0, [r2, #4]
 80142d4:	6842      	ldr	r2, [r0, #4]
 80142d6:	605a      	str	r2, [r3, #4]
 80142d8:	680c      	ldr	r4, [r1, #0]
 80142da:	4284      	cmp	r4, r0
 80142dc:	d103      	bne.n	80142e6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80142de:	600b      	str	r3, [r1, #0]
 80142e0:	6098      	str	r0, [r3, #8]
 80142e2:	6043      	str	r3, [r0, #4]
 80142e4:	bd10      	pop	{r4, pc}
 80142e6:	6891      	ldr	r1, [r2, #8]
 80142e8:	4281      	cmp	r1, r0
 80142ea:	bf0c      	ite	eq
 80142ec:	6093      	streq	r3, [r2, #8]
 80142ee:	60d3      	strne	r3, [r2, #12]
 80142f0:	e7f6      	b.n	80142e0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080142f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80142f2:	6883      	ldr	r3, [r0, #8]
 80142f4:	68da      	ldr	r2, [r3, #12]
 80142f6:	6082      	str	r2, [r0, #8]
 80142f8:	b510      	push	{r4, lr}
 80142fa:	b102      	cbz	r2, 80142fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80142fc:	6050      	str	r0, [r2, #4]
 80142fe:	6842      	ldr	r2, [r0, #4]
 8014300:	605a      	str	r2, [r3, #4]
 8014302:	680c      	ldr	r4, [r1, #0]
 8014304:	4284      	cmp	r4, r0
 8014306:	d103      	bne.n	8014310 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8014308:	600b      	str	r3, [r1, #0]
 801430a:	60d8      	str	r0, [r3, #12]
 801430c:	6043      	str	r3, [r0, #4]
 801430e:	bd10      	pop	{r4, pc}
 8014310:	68d1      	ldr	r1, [r2, #12]
 8014312:	4281      	cmp	r1, r0
 8014314:	bf0c      	ite	eq
 8014316:	60d3      	streq	r3, [r2, #12]
 8014318:	6093      	strne	r3, [r2, #8]
 801431a:	e7f6      	b.n	801430a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801431c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801431c:	68c3      	ldr	r3, [r0, #12]
 801431e:	b123      	cbz	r3, 801432a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8014320:	4618      	mov	r0, r3
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d1fb      	bne.n	8014320 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8014328:	4770      	bx	lr
 801432a:	6843      	ldr	r3, [r0, #4]
 801432c:	68da      	ldr	r2, [r3, #12]
 801432e:	4282      	cmp	r2, r0
 8014330:	d102      	bne.n	8014338 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8014332:	4618      	mov	r0, r3
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	e7f9      	b.n	801432c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8014338:	68c2      	ldr	r2, [r0, #12]
 801433a:	4293      	cmp	r3, r2
 801433c:	bf18      	it	ne
 801433e:	4618      	movne	r0, r3
 8014340:	4770      	bx	lr

08014342 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8014342:	7802      	ldrb	r2, [r0, #0]
 8014344:	4603      	mov	r3, r0
 8014346:	b92a      	cbnz	r2, 8014354 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8014348:	6842      	ldr	r2, [r0, #4]
 801434a:	6852      	ldr	r2, [r2, #4]
 801434c:	4282      	cmp	r2, r0
 801434e:	d101      	bne.n	8014354 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8014350:	68d0      	ldr	r0, [r2, #12]
 8014352:	4770      	bx	lr
 8014354:	689a      	ldr	r2, [r3, #8]
 8014356:	b122      	cbz	r2, 8014362 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8014358:	4610      	mov	r0, r2
 801435a:	68d2      	ldr	r2, [r2, #12]
 801435c:	2a00      	cmp	r2, #0
 801435e:	d1fb      	bne.n	8014358 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8014360:	4770      	bx	lr
 8014362:	6858      	ldr	r0, [r3, #4]
 8014364:	6882      	ldr	r2, [r0, #8]
 8014366:	429a      	cmp	r2, r3
 8014368:	d102      	bne.n	8014370 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 801436a:	4603      	mov	r3, r0
 801436c:	6840      	ldr	r0, [r0, #4]
 801436e:	e7f9      	b.n	8014364 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 8014370:	4770      	bx	lr

08014372 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8014372:	f7ff bfd3 	b.w	801431c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08014376 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8014376:	f7ff bfe4 	b.w	8014342 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801437a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801437a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801437e:	461e      	mov	r6, r3
 8014380:	f103 0804 	add.w	r8, r3, #4
 8014384:	2300      	movs	r3, #0
 8014386:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801438a:	460c      	mov	r4, r1
 801438c:	604a      	str	r2, [r1, #4]
 801438e:	700b      	strb	r3, [r1, #0]
 8014390:	b300      	cbz	r0, 80143d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8014392:	4296      	cmp	r6, r2
 8014394:	6091      	str	r1, [r2, #8]
 8014396:	d118      	bne.n	80143ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8014398:	6071      	str	r1, [r6, #4]
 801439a:	60f4      	str	r4, [r6, #12]
 801439c:	2701      	movs	r7, #1
 801439e:	f04f 0900 	mov.w	r9, #0
 80143a2:	6873      	ldr	r3, [r6, #4]
 80143a4:	42a3      	cmp	r3, r4
 80143a6:	d03f      	beq.n	8014428 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80143a8:	6860      	ldr	r0, [r4, #4]
 80143aa:	7802      	ldrb	r2, [r0, #0]
 80143ac:	2a00      	cmp	r2, #0
 80143ae:	d13b      	bne.n	8014428 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80143b0:	6845      	ldr	r5, [r0, #4]
 80143b2:	68ab      	ldr	r3, [r5, #8]
 80143b4:	4298      	cmp	r0, r3
 80143b6:	d123      	bne.n	8014400 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80143b8:	68eb      	ldr	r3, [r5, #12]
 80143ba:	b183      	cbz	r3, 80143de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80143bc:	781a      	ldrb	r2, [r3, #0]
 80143be:	b972      	cbnz	r2, 80143de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80143c0:	7007      	strb	r7, [r0, #0]
 80143c2:	701f      	strb	r7, [r3, #0]
 80143c4:	702a      	strb	r2, [r5, #0]
 80143c6:	462c      	mov	r4, r5
 80143c8:	e7eb      	b.n	80143a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80143ca:	68b3      	ldr	r3, [r6, #8]
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d1e5      	bne.n	801439c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80143d0:	60b1      	str	r1, [r6, #8]
 80143d2:	e7e3      	b.n	801439c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80143d4:	60d1      	str	r1, [r2, #12]
 80143d6:	68f3      	ldr	r3, [r6, #12]
 80143d8:	4293      	cmp	r3, r2
 80143da:	d1df      	bne.n	801439c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80143dc:	e7dd      	b.n	801439a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80143de:	68c3      	ldr	r3, [r0, #12]
 80143e0:	42a3      	cmp	r3, r4
 80143e2:	d103      	bne.n	80143ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80143e4:	4641      	mov	r1, r8
 80143e6:	f7ff ff6f 	bl	80142c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80143ea:	4604      	mov	r4, r0
 80143ec:	6863      	ldr	r3, [r4, #4]
 80143ee:	4641      	mov	r1, r8
 80143f0:	701f      	strb	r7, [r3, #0]
 80143f2:	4628      	mov	r0, r5
 80143f4:	f885 9000 	strb.w	r9, [r5]
 80143f8:	f7ff ff7b 	bl	80142f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80143fc:	4625      	mov	r5, r4
 80143fe:	e7e2      	b.n	80143c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8014400:	b113      	cbz	r3, 8014408 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8014402:	781a      	ldrb	r2, [r3, #0]
 8014404:	2a00      	cmp	r2, #0
 8014406:	d0db      	beq.n	80143c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8014408:	6883      	ldr	r3, [r0, #8]
 801440a:	42a3      	cmp	r3, r4
 801440c:	d103      	bne.n	8014416 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801440e:	4641      	mov	r1, r8
 8014410:	f7ff ff6f 	bl	80142f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8014414:	4604      	mov	r4, r0
 8014416:	6863      	ldr	r3, [r4, #4]
 8014418:	4641      	mov	r1, r8
 801441a:	701f      	strb	r7, [r3, #0]
 801441c:	4628      	mov	r0, r5
 801441e:	f885 9000 	strb.w	r9, [r5]
 8014422:	f7ff ff51 	bl	80142c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8014426:	e7e9      	b.n	80143fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8014428:	2201      	movs	r2, #1
 801442a:	701a      	strb	r2, [r3, #0]
 801442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014430 <_ZSt17__throw_bad_allocv>:
 8014430:	b508      	push	{r3, lr}
 8014432:	f000 f810 	bl	8014456 <abort>

08014436 <_ZSt19__throw_logic_errorPKc>:
 8014436:	b508      	push	{r3, lr}
 8014438:	f000 f80d 	bl	8014456 <abort>

0801443c <_ZSt20__throw_length_errorPKc>:
 801443c:	b508      	push	{r3, lr}
 801443e:	f000 f80a 	bl	8014456 <abort>

08014442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8014442:	4603      	mov	r3, r0
 8014444:	f853 0b08 	ldr.w	r0, [r3], #8
 8014448:	4298      	cmp	r0, r3
 801444a:	d001      	beq.n	8014450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801444c:	f000 b801 	b.w	8014452 <_ZdlPv>
 8014450:	4770      	bx	lr

08014452 <_ZdlPv>:
 8014452:	f7fb b9f5 	b.w	800f840 <free>

08014456 <abort>:
 8014456:	b508      	push	{r3, lr}
 8014458:	2006      	movs	r0, #6
 801445a:	f7fb ff2d 	bl	80102b8 <raise>
 801445e:	2001      	movs	r0, #1
 8014460:	f7f0 fc32 	bl	8004cc8 <_exit>

08014464 <memcpy>:
 8014464:	440a      	add	r2, r1
 8014466:	4291      	cmp	r1, r2
 8014468:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801446c:	d100      	bne.n	8014470 <memcpy+0xc>
 801446e:	4770      	bx	lr
 8014470:	b510      	push	{r4, lr}
 8014472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014476:	f803 4f01 	strb.w	r4, [r3, #1]!
 801447a:	4291      	cmp	r1, r2
 801447c:	d1f9      	bne.n	8014472 <memcpy+0xe>
 801447e:	bd10      	pop	{r4, pc}

08014480 <memset>:
 8014480:	4402      	add	r2, r0
 8014482:	4603      	mov	r3, r0
 8014484:	4293      	cmp	r3, r2
 8014486:	d100      	bne.n	801448a <memset+0xa>
 8014488:	4770      	bx	lr
 801448a:	f803 1b01 	strb.w	r1, [r3], #1
 801448e:	e7f9      	b.n	8014484 <memset+0x4>

08014490 <__sfputc_r>:
 8014490:	6893      	ldr	r3, [r2, #8]
 8014492:	3b01      	subs	r3, #1
 8014494:	2b00      	cmp	r3, #0
 8014496:	b410      	push	{r4}
 8014498:	6093      	str	r3, [r2, #8]
 801449a:	da07      	bge.n	80144ac <__sfputc_r+0x1c>
 801449c:	6994      	ldr	r4, [r2, #24]
 801449e:	42a3      	cmp	r3, r4
 80144a0:	db01      	blt.n	80144a6 <__sfputc_r+0x16>
 80144a2:	290a      	cmp	r1, #10
 80144a4:	d102      	bne.n	80144ac <__sfputc_r+0x1c>
 80144a6:	bc10      	pop	{r4}
 80144a8:	f7fb bf20 	b.w	80102ec <__swbuf_r>
 80144ac:	6813      	ldr	r3, [r2, #0]
 80144ae:	1c58      	adds	r0, r3, #1
 80144b0:	6010      	str	r0, [r2, #0]
 80144b2:	7019      	strb	r1, [r3, #0]
 80144b4:	4608      	mov	r0, r1
 80144b6:	bc10      	pop	{r4}
 80144b8:	4770      	bx	lr

080144ba <__sfputs_r>:
 80144ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144bc:	4606      	mov	r6, r0
 80144be:	460f      	mov	r7, r1
 80144c0:	4614      	mov	r4, r2
 80144c2:	18d5      	adds	r5, r2, r3
 80144c4:	42ac      	cmp	r4, r5
 80144c6:	d101      	bne.n	80144cc <__sfputs_r+0x12>
 80144c8:	2000      	movs	r0, #0
 80144ca:	e007      	b.n	80144dc <__sfputs_r+0x22>
 80144cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d0:	463a      	mov	r2, r7
 80144d2:	4630      	mov	r0, r6
 80144d4:	f7ff ffdc 	bl	8014490 <__sfputc_r>
 80144d8:	1c43      	adds	r3, r0, #1
 80144da:	d1f3      	bne.n	80144c4 <__sfputs_r+0xa>
 80144dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144de <__cvt>:
 80144de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e2:	b088      	sub	sp, #32
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	461f      	mov	r7, r3
 80144e8:	4614      	mov	r4, r2
 80144ea:	bfb8      	it	lt
 80144ec:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80144f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80144f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80144f8:	bfb6      	itet	lt
 80144fa:	461f      	movlt	r7, r3
 80144fc:	2300      	movge	r3, #0
 80144fe:	232d      	movlt	r3, #45	; 0x2d
 8014500:	7013      	strb	r3, [r2, #0]
 8014502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014504:	f023 0820 	bic.w	r8, r3, #32
 8014508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801450c:	d005      	beq.n	801451a <__cvt+0x3c>
 801450e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014512:	d100      	bne.n	8014516 <__cvt+0x38>
 8014514:	3501      	adds	r5, #1
 8014516:	2302      	movs	r3, #2
 8014518:	e000      	b.n	801451c <__cvt+0x3e>
 801451a:	2303      	movs	r3, #3
 801451c:	aa07      	add	r2, sp, #28
 801451e:	9204      	str	r2, [sp, #16]
 8014520:	aa06      	add	r2, sp, #24
 8014522:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014526:	e9cd 3500 	strd	r3, r5, [sp]
 801452a:	4622      	mov	r2, r4
 801452c:	463b      	mov	r3, r7
 801452e:	f7ec fd0b 	bl	8000f48 <_dtoa_r>
 8014532:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014536:	4606      	mov	r6, r0
 8014538:	d102      	bne.n	8014540 <__cvt+0x62>
 801453a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801453c:	07db      	lsls	r3, r3, #31
 801453e:	d522      	bpl.n	8014586 <__cvt+0xa8>
 8014540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014544:	eb06 0905 	add.w	r9, r6, r5
 8014548:	d110      	bne.n	801456c <__cvt+0x8e>
 801454a:	7833      	ldrb	r3, [r6, #0]
 801454c:	2b30      	cmp	r3, #48	; 0x30
 801454e:	d10a      	bne.n	8014566 <__cvt+0x88>
 8014550:	2200      	movs	r2, #0
 8014552:	2300      	movs	r3, #0
 8014554:	4620      	mov	r0, r4
 8014556:	4639      	mov	r1, r7
 8014558:	f7ec fa96 	bl	8000a88 <__aeabi_dcmpeq>
 801455c:	b918      	cbnz	r0, 8014566 <__cvt+0x88>
 801455e:	f1c5 0501 	rsb	r5, r5, #1
 8014562:	f8ca 5000 	str.w	r5, [sl]
 8014566:	f8da 3000 	ldr.w	r3, [sl]
 801456a:	4499      	add	r9, r3
 801456c:	2200      	movs	r2, #0
 801456e:	2300      	movs	r3, #0
 8014570:	4620      	mov	r0, r4
 8014572:	4639      	mov	r1, r7
 8014574:	f7ec fa88 	bl	8000a88 <__aeabi_dcmpeq>
 8014578:	b108      	cbz	r0, 801457e <__cvt+0xa0>
 801457a:	f8cd 901c 	str.w	r9, [sp, #28]
 801457e:	2230      	movs	r2, #48	; 0x30
 8014580:	9b07      	ldr	r3, [sp, #28]
 8014582:	454b      	cmp	r3, r9
 8014584:	d307      	bcc.n	8014596 <__cvt+0xb8>
 8014586:	9b07      	ldr	r3, [sp, #28]
 8014588:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801458a:	1b9b      	subs	r3, r3, r6
 801458c:	4630      	mov	r0, r6
 801458e:	6013      	str	r3, [r2, #0]
 8014590:	b008      	add	sp, #32
 8014592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014596:	1c59      	adds	r1, r3, #1
 8014598:	9107      	str	r1, [sp, #28]
 801459a:	701a      	strb	r2, [r3, #0]
 801459c:	e7f0      	b.n	8014580 <__cvt+0xa2>

0801459e <__exponent>:
 801459e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145a0:	4603      	mov	r3, r0
 80145a2:	2900      	cmp	r1, #0
 80145a4:	bfb8      	it	lt
 80145a6:	4249      	neglt	r1, r1
 80145a8:	f803 2b02 	strb.w	r2, [r3], #2
 80145ac:	bfb4      	ite	lt
 80145ae:	222d      	movlt	r2, #45	; 0x2d
 80145b0:	222b      	movge	r2, #43	; 0x2b
 80145b2:	2909      	cmp	r1, #9
 80145b4:	7042      	strb	r2, [r0, #1]
 80145b6:	dd2a      	ble.n	801460e <__exponent+0x70>
 80145b8:	f10d 0407 	add.w	r4, sp, #7
 80145bc:	46a4      	mov	ip, r4
 80145be:	270a      	movs	r7, #10
 80145c0:	46a6      	mov	lr, r4
 80145c2:	460a      	mov	r2, r1
 80145c4:	fb91 f6f7 	sdiv	r6, r1, r7
 80145c8:	fb07 1516 	mls	r5, r7, r6, r1
 80145cc:	3530      	adds	r5, #48	; 0x30
 80145ce:	2a63      	cmp	r2, #99	; 0x63
 80145d0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80145d4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80145d8:	4631      	mov	r1, r6
 80145da:	dcf1      	bgt.n	80145c0 <__exponent+0x22>
 80145dc:	3130      	adds	r1, #48	; 0x30
 80145de:	f1ae 0502 	sub.w	r5, lr, #2
 80145e2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80145e6:	1c44      	adds	r4, r0, #1
 80145e8:	4629      	mov	r1, r5
 80145ea:	4561      	cmp	r1, ip
 80145ec:	d30a      	bcc.n	8014604 <__exponent+0x66>
 80145ee:	f10d 0209 	add.w	r2, sp, #9
 80145f2:	eba2 020e 	sub.w	r2, r2, lr
 80145f6:	4565      	cmp	r5, ip
 80145f8:	bf88      	it	hi
 80145fa:	2200      	movhi	r2, #0
 80145fc:	4413      	add	r3, r2
 80145fe:	1a18      	subs	r0, r3, r0
 8014600:	b003      	add	sp, #12
 8014602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014604:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014608:	f804 2f01 	strb.w	r2, [r4, #1]!
 801460c:	e7ed      	b.n	80145ea <__exponent+0x4c>
 801460e:	2330      	movs	r3, #48	; 0x30
 8014610:	3130      	adds	r1, #48	; 0x30
 8014612:	7083      	strb	r3, [r0, #2]
 8014614:	70c1      	strb	r1, [r0, #3]
 8014616:	1d03      	adds	r3, r0, #4
 8014618:	e7f1      	b.n	80145fe <__exponent+0x60>

0801461a <_printf_common>:
 801461a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801461e:	4616      	mov	r6, r2
 8014620:	4699      	mov	r9, r3
 8014622:	688a      	ldr	r2, [r1, #8]
 8014624:	690b      	ldr	r3, [r1, #16]
 8014626:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801462a:	4293      	cmp	r3, r2
 801462c:	bfb8      	it	lt
 801462e:	4613      	movlt	r3, r2
 8014630:	6033      	str	r3, [r6, #0]
 8014632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014636:	4607      	mov	r7, r0
 8014638:	460c      	mov	r4, r1
 801463a:	b10a      	cbz	r2, 8014640 <_printf_common+0x26>
 801463c:	3301      	adds	r3, #1
 801463e:	6033      	str	r3, [r6, #0]
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	0699      	lsls	r1, r3, #26
 8014644:	bf42      	ittt	mi
 8014646:	6833      	ldrmi	r3, [r6, #0]
 8014648:	3302      	addmi	r3, #2
 801464a:	6033      	strmi	r3, [r6, #0]
 801464c:	6825      	ldr	r5, [r4, #0]
 801464e:	f015 0506 	ands.w	r5, r5, #6
 8014652:	d106      	bne.n	8014662 <_printf_common+0x48>
 8014654:	f104 0a19 	add.w	sl, r4, #25
 8014658:	68e3      	ldr	r3, [r4, #12]
 801465a:	6832      	ldr	r2, [r6, #0]
 801465c:	1a9b      	subs	r3, r3, r2
 801465e:	42ab      	cmp	r3, r5
 8014660:	dc26      	bgt.n	80146b0 <_printf_common+0x96>
 8014662:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014666:	1e13      	subs	r3, r2, #0
 8014668:	6822      	ldr	r2, [r4, #0]
 801466a:	bf18      	it	ne
 801466c:	2301      	movne	r3, #1
 801466e:	0692      	lsls	r2, r2, #26
 8014670:	d42b      	bmi.n	80146ca <_printf_common+0xb0>
 8014672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014676:	4649      	mov	r1, r9
 8014678:	4638      	mov	r0, r7
 801467a:	47c0      	blx	r8
 801467c:	3001      	adds	r0, #1
 801467e:	d01e      	beq.n	80146be <_printf_common+0xa4>
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	68e5      	ldr	r5, [r4, #12]
 8014684:	6832      	ldr	r2, [r6, #0]
 8014686:	f003 0306 	and.w	r3, r3, #6
 801468a:	2b04      	cmp	r3, #4
 801468c:	bf08      	it	eq
 801468e:	1aad      	subeq	r5, r5, r2
 8014690:	68a3      	ldr	r3, [r4, #8]
 8014692:	6922      	ldr	r2, [r4, #16]
 8014694:	bf0c      	ite	eq
 8014696:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801469a:	2500      	movne	r5, #0
 801469c:	4293      	cmp	r3, r2
 801469e:	bfc4      	itt	gt
 80146a0:	1a9b      	subgt	r3, r3, r2
 80146a2:	18ed      	addgt	r5, r5, r3
 80146a4:	2600      	movs	r6, #0
 80146a6:	341a      	adds	r4, #26
 80146a8:	42b5      	cmp	r5, r6
 80146aa:	d11a      	bne.n	80146e2 <_printf_common+0xc8>
 80146ac:	2000      	movs	r0, #0
 80146ae:	e008      	b.n	80146c2 <_printf_common+0xa8>
 80146b0:	2301      	movs	r3, #1
 80146b2:	4652      	mov	r2, sl
 80146b4:	4649      	mov	r1, r9
 80146b6:	4638      	mov	r0, r7
 80146b8:	47c0      	blx	r8
 80146ba:	3001      	adds	r0, #1
 80146bc:	d103      	bne.n	80146c6 <_printf_common+0xac>
 80146be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c6:	3501      	adds	r5, #1
 80146c8:	e7c6      	b.n	8014658 <_printf_common+0x3e>
 80146ca:	18e1      	adds	r1, r4, r3
 80146cc:	1c5a      	adds	r2, r3, #1
 80146ce:	2030      	movs	r0, #48	; 0x30
 80146d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146d4:	4422      	add	r2, r4
 80146d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146de:	3302      	adds	r3, #2
 80146e0:	e7c7      	b.n	8014672 <_printf_common+0x58>
 80146e2:	2301      	movs	r3, #1
 80146e4:	4622      	mov	r2, r4
 80146e6:	4649      	mov	r1, r9
 80146e8:	4638      	mov	r0, r7
 80146ea:	47c0      	blx	r8
 80146ec:	3001      	adds	r0, #1
 80146ee:	d0e6      	beq.n	80146be <_printf_common+0xa4>
 80146f0:	3601      	adds	r6, #1
 80146f2:	e7d9      	b.n	80146a8 <_printf_common+0x8e>

080146f4 <_raise_r>:
 80146f4:	291f      	cmp	r1, #31
 80146f6:	b538      	push	{r3, r4, r5, lr}
 80146f8:	4604      	mov	r4, r0
 80146fa:	460d      	mov	r5, r1
 80146fc:	d904      	bls.n	8014708 <_raise_r+0x14>
 80146fe:	2316      	movs	r3, #22
 8014700:	6003      	str	r3, [r0, #0]
 8014702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014706:	bd38      	pop	{r3, r4, r5, pc}
 8014708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801470a:	b112      	cbz	r2, 8014712 <_raise_r+0x1e>
 801470c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014710:	b94b      	cbnz	r3, 8014726 <_raise_r+0x32>
 8014712:	4620      	mov	r0, r4
 8014714:	f000 f816 	bl	8014744 <_getpid_r>
 8014718:	462a      	mov	r2, r5
 801471a:	4601      	mov	r1, r0
 801471c:	4620      	mov	r0, r4
 801471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014722:	f7fb bdd1 	b.w	80102c8 <_kill_r>
 8014726:	2b01      	cmp	r3, #1
 8014728:	d00a      	beq.n	8014740 <_raise_r+0x4c>
 801472a:	1c59      	adds	r1, r3, #1
 801472c:	d103      	bne.n	8014736 <_raise_r+0x42>
 801472e:	2316      	movs	r3, #22
 8014730:	6003      	str	r3, [r0, #0]
 8014732:	2001      	movs	r0, #1
 8014734:	e7e7      	b.n	8014706 <_raise_r+0x12>
 8014736:	2400      	movs	r4, #0
 8014738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801473c:	4628      	mov	r0, r5
 801473e:	4798      	blx	r3
 8014740:	2000      	movs	r0, #0
 8014742:	e7e0      	b.n	8014706 <_raise_r+0x12>

08014744 <_getpid_r>:
 8014744:	f7fd b90d 	b.w	8011962 <_getpid>

08014748 <strnlen>:
 8014748:	b510      	push	{r4, lr}
 801474a:	4602      	mov	r2, r0
 801474c:	4401      	add	r1, r0
 801474e:	428a      	cmp	r2, r1
 8014750:	4613      	mov	r3, r2
 8014752:	d003      	beq.n	801475c <strnlen+0x14>
 8014754:	781c      	ldrb	r4, [r3, #0]
 8014756:	3201      	adds	r2, #1
 8014758:	2c00      	cmp	r4, #0
 801475a:	d1f8      	bne.n	801474e <strnlen+0x6>
 801475c:	1a18      	subs	r0, r3, r0
 801475e:	bd10      	pop	{r4, pc}

08014760 <quorem>:
 8014760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014764:	6903      	ldr	r3, [r0, #16]
 8014766:	690c      	ldr	r4, [r1, #16]
 8014768:	42a3      	cmp	r3, r4
 801476a:	4607      	mov	r7, r0
 801476c:	db7d      	blt.n	801486a <quorem+0x10a>
 801476e:	3c01      	subs	r4, #1
 8014770:	f101 0814 	add.w	r8, r1, #20
 8014774:	f100 0514 	add.w	r5, r0, #20
 8014778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801477c:	9301      	str	r3, [sp, #4]
 801477e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014786:	3301      	adds	r3, #1
 8014788:	429a      	cmp	r2, r3
 801478a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801478e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014792:	fbb2 f6f3 	udiv	r6, r2, r3
 8014796:	d32e      	bcc.n	80147f6 <quorem+0x96>
 8014798:	f04f 0e00 	mov.w	lr, #0
 801479c:	4640      	mov	r0, r8
 801479e:	46ac      	mov	ip, r5
 80147a0:	46f2      	mov	sl, lr
 80147a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80147a6:	b293      	uxth	r3, r2
 80147a8:	fb06 e303 	mla	r3, r6, r3, lr
 80147ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80147b0:	0c12      	lsrs	r2, r2, #16
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	fb06 e202 	mla	r2, r6, r2, lr
 80147b8:	ebaa 0303 	sub.w	r3, sl, r3
 80147bc:	f8dc a000 	ldr.w	sl, [ip]
 80147c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147c4:	b292      	uxth	r2, r2
 80147c6:	fa13 f38a 	uxtah	r3, r3, sl
 80147ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80147ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147d8:	4581      	cmp	r9, r0
 80147da:	f84c 3b04 	str.w	r3, [ip], #4
 80147de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80147e2:	d2de      	bcs.n	80147a2 <quorem+0x42>
 80147e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80147e8:	b92b      	cbnz	r3, 80147f6 <quorem+0x96>
 80147ea:	9b01      	ldr	r3, [sp, #4]
 80147ec:	3b04      	subs	r3, #4
 80147ee:	429d      	cmp	r5, r3
 80147f0:	461a      	mov	r2, r3
 80147f2:	d32e      	bcc.n	8014852 <quorem+0xf2>
 80147f4:	613c      	str	r4, [r7, #16]
 80147f6:	4638      	mov	r0, r7
 80147f8:	f000 f8e0 	bl	80149bc <__mcmp>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	db24      	blt.n	801484a <quorem+0xea>
 8014800:	3601      	adds	r6, #1
 8014802:	4628      	mov	r0, r5
 8014804:	f04f 0c00 	mov.w	ip, #0
 8014808:	f858 2b04 	ldr.w	r2, [r8], #4
 801480c:	f8d0 e000 	ldr.w	lr, [r0]
 8014810:	b293      	uxth	r3, r2
 8014812:	ebac 0303 	sub.w	r3, ip, r3
 8014816:	0c12      	lsrs	r2, r2, #16
 8014818:	fa13 f38e 	uxtah	r3, r3, lr
 801481c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014824:	b29b      	uxth	r3, r3
 8014826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801482a:	45c1      	cmp	r9, r8
 801482c:	f840 3b04 	str.w	r3, [r0], #4
 8014830:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014834:	d2e8      	bcs.n	8014808 <quorem+0xa8>
 8014836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801483a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801483e:	b922      	cbnz	r2, 801484a <quorem+0xea>
 8014840:	3b04      	subs	r3, #4
 8014842:	429d      	cmp	r5, r3
 8014844:	461a      	mov	r2, r3
 8014846:	d30a      	bcc.n	801485e <quorem+0xfe>
 8014848:	613c      	str	r4, [r7, #16]
 801484a:	4630      	mov	r0, r6
 801484c:	b003      	add	sp, #12
 801484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014852:	6812      	ldr	r2, [r2, #0]
 8014854:	3b04      	subs	r3, #4
 8014856:	2a00      	cmp	r2, #0
 8014858:	d1cc      	bne.n	80147f4 <quorem+0x94>
 801485a:	3c01      	subs	r4, #1
 801485c:	e7c7      	b.n	80147ee <quorem+0x8e>
 801485e:	6812      	ldr	r2, [r2, #0]
 8014860:	3b04      	subs	r3, #4
 8014862:	2a00      	cmp	r2, #0
 8014864:	d1f0      	bne.n	8014848 <quorem+0xe8>
 8014866:	3c01      	subs	r4, #1
 8014868:	e7eb      	b.n	8014842 <quorem+0xe2>
 801486a:	2000      	movs	r0, #0
 801486c:	e7ee      	b.n	801484c <quorem+0xec>

0801486e <__sfmoreglue>:
 801486e:	b570      	push	{r4, r5, r6, lr}
 8014870:	2268      	movs	r2, #104	; 0x68
 8014872:	1e4d      	subs	r5, r1, #1
 8014874:	4355      	muls	r5, r2
 8014876:	460e      	mov	r6, r1
 8014878:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801487c:	f7fb f832 	bl	800f8e4 <_malloc_r>
 8014880:	4604      	mov	r4, r0
 8014882:	b140      	cbz	r0, 8014896 <__sfmoreglue+0x28>
 8014884:	2100      	movs	r1, #0
 8014886:	e9c0 1600 	strd	r1, r6, [r0]
 801488a:	300c      	adds	r0, #12
 801488c:	60a0      	str	r0, [r4, #8]
 801488e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014892:	f7ff fdf5 	bl	8014480 <memset>
 8014896:	4620      	mov	r0, r4
 8014898:	bd70      	pop	{r4, r5, r6, pc}

0801489a <_fwalk_reent>:
 801489a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801489e:	4606      	mov	r6, r0
 80148a0:	4688      	mov	r8, r1
 80148a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80148a6:	2700      	movs	r7, #0
 80148a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148ac:	f1b9 0901 	subs.w	r9, r9, #1
 80148b0:	d505      	bpl.n	80148be <_fwalk_reent+0x24>
 80148b2:	6824      	ldr	r4, [r4, #0]
 80148b4:	2c00      	cmp	r4, #0
 80148b6:	d1f7      	bne.n	80148a8 <_fwalk_reent+0xe>
 80148b8:	4638      	mov	r0, r7
 80148ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148be:	89ab      	ldrh	r3, [r5, #12]
 80148c0:	2b01      	cmp	r3, #1
 80148c2:	d907      	bls.n	80148d4 <_fwalk_reent+0x3a>
 80148c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148c8:	3301      	adds	r3, #1
 80148ca:	d003      	beq.n	80148d4 <_fwalk_reent+0x3a>
 80148cc:	4629      	mov	r1, r5
 80148ce:	4630      	mov	r0, r6
 80148d0:	47c0      	blx	r8
 80148d2:	4307      	orrs	r7, r0
 80148d4:	3568      	adds	r5, #104	; 0x68
 80148d6:	e7e9      	b.n	80148ac <_fwalk_reent+0x12>

080148d8 <__swhatbuf_r>:
 80148d8:	b570      	push	{r4, r5, r6, lr}
 80148da:	460e      	mov	r6, r1
 80148dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148e0:	2900      	cmp	r1, #0
 80148e2:	b096      	sub	sp, #88	; 0x58
 80148e4:	4614      	mov	r4, r2
 80148e6:	461d      	mov	r5, r3
 80148e8:	da08      	bge.n	80148fc <__swhatbuf_r+0x24>
 80148ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	602a      	str	r2, [r5, #0]
 80148f2:	061a      	lsls	r2, r3, #24
 80148f4:	d410      	bmi.n	8014918 <__swhatbuf_r+0x40>
 80148f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148fa:	e00e      	b.n	801491a <__swhatbuf_r+0x42>
 80148fc:	466a      	mov	r2, sp
 80148fe:	f7fc fab9 	bl	8010e74 <_fstat_r>
 8014902:	2800      	cmp	r0, #0
 8014904:	dbf1      	blt.n	80148ea <__swhatbuf_r+0x12>
 8014906:	9a01      	ldr	r2, [sp, #4]
 8014908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801490c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014910:	425a      	negs	r2, r3
 8014912:	415a      	adcs	r2, r3
 8014914:	602a      	str	r2, [r5, #0]
 8014916:	e7ee      	b.n	80148f6 <__swhatbuf_r+0x1e>
 8014918:	2340      	movs	r3, #64	; 0x40
 801491a:	2000      	movs	r0, #0
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	b016      	add	sp, #88	; 0x58
 8014920:	bd70      	pop	{r4, r5, r6, pc}

08014922 <__hi0bits>:
 8014922:	0c02      	lsrs	r2, r0, #16
 8014924:	0412      	lsls	r2, r2, #16
 8014926:	4603      	mov	r3, r0
 8014928:	b9ca      	cbnz	r2, 801495e <__hi0bits+0x3c>
 801492a:	0403      	lsls	r3, r0, #16
 801492c:	2010      	movs	r0, #16
 801492e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014932:	bf04      	itt	eq
 8014934:	021b      	lsleq	r3, r3, #8
 8014936:	3008      	addeq	r0, #8
 8014938:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801493c:	bf04      	itt	eq
 801493e:	011b      	lsleq	r3, r3, #4
 8014940:	3004      	addeq	r0, #4
 8014942:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014946:	bf04      	itt	eq
 8014948:	009b      	lsleq	r3, r3, #2
 801494a:	3002      	addeq	r0, #2
 801494c:	2b00      	cmp	r3, #0
 801494e:	db05      	blt.n	801495c <__hi0bits+0x3a>
 8014950:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014954:	f100 0001 	add.w	r0, r0, #1
 8014958:	bf08      	it	eq
 801495a:	2020      	moveq	r0, #32
 801495c:	4770      	bx	lr
 801495e:	2000      	movs	r0, #0
 8014960:	e7e5      	b.n	801492e <__hi0bits+0xc>

08014962 <__lo0bits>:
 8014962:	6803      	ldr	r3, [r0, #0]
 8014964:	4602      	mov	r2, r0
 8014966:	f013 0007 	ands.w	r0, r3, #7
 801496a:	d00b      	beq.n	8014984 <__lo0bits+0x22>
 801496c:	07d9      	lsls	r1, r3, #31
 801496e:	d421      	bmi.n	80149b4 <__lo0bits+0x52>
 8014970:	0798      	lsls	r0, r3, #30
 8014972:	bf49      	itett	mi
 8014974:	085b      	lsrmi	r3, r3, #1
 8014976:	089b      	lsrpl	r3, r3, #2
 8014978:	2001      	movmi	r0, #1
 801497a:	6013      	strmi	r3, [r2, #0]
 801497c:	bf5c      	itt	pl
 801497e:	6013      	strpl	r3, [r2, #0]
 8014980:	2002      	movpl	r0, #2
 8014982:	4770      	bx	lr
 8014984:	b299      	uxth	r1, r3
 8014986:	b909      	cbnz	r1, 801498c <__lo0bits+0x2a>
 8014988:	0c1b      	lsrs	r3, r3, #16
 801498a:	2010      	movs	r0, #16
 801498c:	b2d9      	uxtb	r1, r3
 801498e:	b909      	cbnz	r1, 8014994 <__lo0bits+0x32>
 8014990:	3008      	adds	r0, #8
 8014992:	0a1b      	lsrs	r3, r3, #8
 8014994:	0719      	lsls	r1, r3, #28
 8014996:	bf04      	itt	eq
 8014998:	091b      	lsreq	r3, r3, #4
 801499a:	3004      	addeq	r0, #4
 801499c:	0799      	lsls	r1, r3, #30
 801499e:	bf04      	itt	eq
 80149a0:	089b      	lsreq	r3, r3, #2
 80149a2:	3002      	addeq	r0, #2
 80149a4:	07d9      	lsls	r1, r3, #31
 80149a6:	d403      	bmi.n	80149b0 <__lo0bits+0x4e>
 80149a8:	085b      	lsrs	r3, r3, #1
 80149aa:	f100 0001 	add.w	r0, r0, #1
 80149ae:	d003      	beq.n	80149b8 <__lo0bits+0x56>
 80149b0:	6013      	str	r3, [r2, #0]
 80149b2:	4770      	bx	lr
 80149b4:	2000      	movs	r0, #0
 80149b6:	4770      	bx	lr
 80149b8:	2020      	movs	r0, #32
 80149ba:	4770      	bx	lr

080149bc <__mcmp>:
 80149bc:	690a      	ldr	r2, [r1, #16]
 80149be:	4603      	mov	r3, r0
 80149c0:	6900      	ldr	r0, [r0, #16]
 80149c2:	1a80      	subs	r0, r0, r2
 80149c4:	b530      	push	{r4, r5, lr}
 80149c6:	d10d      	bne.n	80149e4 <__mcmp+0x28>
 80149c8:	3314      	adds	r3, #20
 80149ca:	3114      	adds	r1, #20
 80149cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80149d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80149d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80149d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80149dc:	4295      	cmp	r5, r2
 80149de:	d002      	beq.n	80149e6 <__mcmp+0x2a>
 80149e0:	d304      	bcc.n	80149ec <__mcmp+0x30>
 80149e2:	2001      	movs	r0, #1
 80149e4:	bd30      	pop	{r4, r5, pc}
 80149e6:	42a3      	cmp	r3, r4
 80149e8:	d3f4      	bcc.n	80149d4 <__mcmp+0x18>
 80149ea:	e7fb      	b.n	80149e4 <__mcmp+0x28>
 80149ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149f0:	e7f8      	b.n	80149e4 <__mcmp+0x28>

080149f2 <_calloc_r>:
 80149f2:	b538      	push	{r3, r4, r5, lr}
 80149f4:	fb02 f501 	mul.w	r5, r2, r1
 80149f8:	4629      	mov	r1, r5
 80149fa:	f7fa ff73 	bl	800f8e4 <_malloc_r>
 80149fe:	4604      	mov	r4, r0
 8014a00:	b118      	cbz	r0, 8014a0a <_calloc_r+0x18>
 8014a02:	462a      	mov	r2, r5
 8014a04:	2100      	movs	r1, #0
 8014a06:	f7ff fd3b 	bl	8014480 <memset>
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	bd38      	pop	{r3, r4, r5, pc}

08014a0e <__sread>:
 8014a0e:	b510      	push	{r4, lr}
 8014a10:	460c      	mov	r4, r1
 8014a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a16:	f7fc fa61 	bl	8010edc <_read_r>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	bfab      	itete	ge
 8014a1e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a20:	89a3      	ldrhlt	r3, [r4, #12]
 8014a22:	181b      	addge	r3, r3, r0
 8014a24:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a28:	bfac      	ite	ge
 8014a2a:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a2c:	81a3      	strhlt	r3, [r4, #12]
 8014a2e:	bd10      	pop	{r4, pc}

08014a30 <__swrite>:
 8014a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a34:	461f      	mov	r7, r3
 8014a36:	898b      	ldrh	r3, [r1, #12]
 8014a38:	05db      	lsls	r3, r3, #23
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	460c      	mov	r4, r1
 8014a3e:	4616      	mov	r6, r2
 8014a40:	d505      	bpl.n	8014a4e <__swrite+0x1e>
 8014a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a46:	2302      	movs	r3, #2
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f7fc fa35 	bl	8010eb8 <_lseek_r>
 8014a4e:	89a3      	ldrh	r3, [r4, #12]
 8014a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a58:	81a3      	strh	r3, [r4, #12]
 8014a5a:	4632      	mov	r2, r6
 8014a5c:	463b      	mov	r3, r7
 8014a5e:	4628      	mov	r0, r5
 8014a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a64:	f7fc b9e4 	b.w	8010e30 <_write_r>

08014a68 <__sseek>:
 8014a68:	b510      	push	{r4, lr}
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a70:	f7fc fa22 	bl	8010eb8 <_lseek_r>
 8014a74:	1c43      	adds	r3, r0, #1
 8014a76:	89a3      	ldrh	r3, [r4, #12]
 8014a78:	bf15      	itete	ne
 8014a7a:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a7c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a80:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a84:	81a3      	strheq	r3, [r4, #12]
 8014a86:	bf18      	it	ne
 8014a88:	81a3      	strhne	r3, [r4, #12]
 8014a8a:	bd10      	pop	{r4, pc}

08014a8c <__sclose>:
 8014a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a90:	f7fc b9e0 	b.w	8010e54 <_close_r>

08014a94 <__ascii_mbtowc>:
 8014a94:	b082      	sub	sp, #8
 8014a96:	b901      	cbnz	r1, 8014a9a <__ascii_mbtowc+0x6>
 8014a98:	a901      	add	r1, sp, #4
 8014a9a:	b142      	cbz	r2, 8014aae <__ascii_mbtowc+0x1a>
 8014a9c:	b14b      	cbz	r3, 8014ab2 <__ascii_mbtowc+0x1e>
 8014a9e:	7813      	ldrb	r3, [r2, #0]
 8014aa0:	600b      	str	r3, [r1, #0]
 8014aa2:	7812      	ldrb	r2, [r2, #0]
 8014aa4:	1e10      	subs	r0, r2, #0
 8014aa6:	bf18      	it	ne
 8014aa8:	2001      	movne	r0, #1
 8014aaa:	b002      	add	sp, #8
 8014aac:	4770      	bx	lr
 8014aae:	4610      	mov	r0, r2
 8014ab0:	e7fb      	b.n	8014aaa <__ascii_mbtowc+0x16>
 8014ab2:	f06f 0001 	mvn.w	r0, #1
 8014ab6:	e7f8      	b.n	8014aaa <__ascii_mbtowc+0x16>

08014ab8 <__ascii_wctomb>:
 8014ab8:	4603      	mov	r3, r0
 8014aba:	4608      	mov	r0, r1
 8014abc:	b141      	cbz	r1, 8014ad0 <__ascii_wctomb+0x18>
 8014abe:	2aff      	cmp	r2, #255	; 0xff
 8014ac0:	d904      	bls.n	8014acc <__ascii_wctomb+0x14>
 8014ac2:	228a      	movs	r2, #138	; 0x8a
 8014ac4:	601a      	str	r2, [r3, #0]
 8014ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aca:	4770      	bx	lr
 8014acc:	700a      	strb	r2, [r1, #0]
 8014ace:	2001      	movs	r0, #1
 8014ad0:	4770      	bx	lr

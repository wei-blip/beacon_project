
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 3a 00 20 d9 33 00 08 a9 2f 00 08 ad 33 00 08     .:. .3.../...3..
 8000010:	ad 33 00 08 ad 33 00 08 ad 33 00 08 00 00 00 00     .3...3...3......
	...
 800002c:	95 30 00 08 ad 33 00 08 00 00 00 00 41 30 00 08     .0...3......A0..
 800003c:	11 8c 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000050:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000060:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000070:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000080:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000090:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000a0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000b0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000c0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000d0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000e0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 80000f0:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000100:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000110:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000120:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000130:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000140:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000150:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000160:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000170:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000180:	49 31 00 08 49 31 00 08 49 31 00 08 49 31 00 08     I1..I1..I1..I1..
 8000190:	49 31 00 08                                         I1..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_d2iz>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d215      	bcs.n	8000b22 <__aeabi_d2iz+0x36>
 8000af6:	d511      	bpl.n	8000b1c <__aeabi_d2iz+0x30>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d912      	bls.n	8000b28 <__aeabi_d2iz+0x3c>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b26:	d105      	bne.n	8000b34 <__aeabi_d2iz+0x48>
 8000b28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	bf08      	it	eq
 8000b2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 b82a 	b.w	8000be8 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f855 	bl	8000c4a <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2ulz>:
 8000bac:	b5d0      	push	{r4, r6, r7, lr}
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__aeabi_d2ulz+0x34>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	f7ff fcff 	bl	80005b8 <__aeabi_dmul>
 8000bba:	f7ff ffbf 	bl	8000b3c <__aeabi_d2uiz>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	f7ff fc80 	bl	80004c4 <__aeabi_ui2d>
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <__aeabi_d2ulz+0x38>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f7ff fcf6 	bl	80005b8 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	f7ff fb38 	bl	8000248 <__aeabi_dsub>
 8000bd8:	f7ff ffb0 	bl	8000b3c <__aeabi_d2uiz>
 8000bdc:	4621      	mov	r1, r4
 8000bde:	bdd0      	pop	{r4, r6, r7, pc}
 8000be0:	3df00000 	.word	0x3df00000
 8000be4:	41f00000 	.word	0x41f00000

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4628      	mov	r0, r5
 8000c24:	4621      	mov	r1, r4
 8000c26:	f7ff ff39 	bl	8000a9c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x20>
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	4621      	mov	r1, r4
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f7ff bfba 	b.w	8000bac <__aeabi_d2ulz>
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c3e:	f7ff ffb5 	bl	8000bac <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}

08000c4a <__udivmoddi4>:
 8000c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c4e:	4607      	mov	r7, r0
 8000c50:	468c      	mov	ip, r1
 8000c52:	4608      	mov	r0, r1
 8000c54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c56:	4615      	mov	r5, r2
 8000c58:	463c      	mov	r4, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f040 80c6 	bne.w	8000dee <__udivmoddi4+0x1a4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	fab2 f782 	clz	r7, r2
 8000c68:	d946      	bls.n	8000cf8 <__udivmoddi4+0xae>
 8000c6a:	b14f      	cbz	r7, 8000c80 <__udivmoddi4+0x36>
 8000c6c:	f1c7 0e20 	rsb	lr, r7, #32
 8000c70:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000c74:	fa00 f307 	lsl.w	r3, r0, r7
 8000c78:	40bd      	lsls	r5, r7
 8000c7a:	ea4e 0c03 	orr.w	ip, lr, r3
 8000c7e:	40bc      	lsls	r4, r7
 8000c80:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c84:	fa1f fe85 	uxth.w	lr, r5
 8000c88:	fbbc f9f8 	udiv	r9, ip, r8
 8000c8c:	0c22      	lsrs	r2, r4, #16
 8000c8e:	fb08 c319 	mls	r3, r8, r9, ip
 8000c92:	fb09 fa0e 	mul.w	sl, r9, lr
 8000c96:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000c9a:	459a      	cmp	sl, r3
 8000c9c:	d928      	bls.n	8000cf0 <__udivmoddi4+0xa6>
 8000c9e:	18eb      	adds	r3, r5, r3
 8000ca0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca4:	d204      	bcs.n	8000cb0 <__udivmoddi4+0x66>
 8000ca6:	459a      	cmp	sl, r3
 8000ca8:	d902      	bls.n	8000cb0 <__udivmoddi4+0x66>
 8000caa:	f1a9 0002 	sub.w	r0, r9, #2
 8000cae:	442b      	add	r3, r5
 8000cb0:	eba3 030a 	sub.w	r3, r3, sl
 8000cb4:	b2a4      	uxth	r4, r4
 8000cb6:	fbb3 f2f8 	udiv	r2, r3, r8
 8000cba:	fb08 3312 	mls	r3, r8, r2, r3
 8000cbe:	fb02 fe0e 	mul.w	lr, r2, lr
 8000cc2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0xaa>
 8000cca:	192c      	adds	r4, r5, r4
 8000ccc:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000cd0:	d203      	bcs.n	8000cda <__udivmoddi4+0x90>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	d901      	bls.n	8000cda <__udivmoddi4+0x90>
 8000cd6:	1e93      	subs	r3, r2, #2
 8000cd8:	442c      	add	r4, r5
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa2>
 8000ce4:	40fc      	lsrs	r4, r7
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	6034      	str	r4, [r6, #0]
 8000cea:	6073      	str	r3, [r6, #4]
 8000cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0x66>
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	e7f0      	b.n	8000cda <__udivmoddi4+0x90>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xb2>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	bb87      	cbnz	r7, 8000d60 <__udivmoddi4+0x116>
 8000cfe:	1a83      	subs	r3, r0, r2
 8000d00:	2101      	movs	r1, #1
 8000d02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d06:	b2aa      	uxth	r2, r5
 8000d08:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d12:	fb0c f802 	mul.w	r8, ip, r2
 8000d16:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d1a:	4598      	cmp	r8, r3
 8000d1c:	d963      	bls.n	8000de6 <__udivmoddi4+0x19c>
 8000d1e:	18eb      	adds	r3, r5, r3
 8000d20:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d24:	d204      	bcs.n	8000d30 <__udivmoddi4+0xe6>
 8000d26:	4598      	cmp	r8, r3
 8000d28:	d902      	bls.n	8000d30 <__udivmoddi4+0xe6>
 8000d2a:	f1ac 0002 	sub.w	r0, ip, #2
 8000d2e:	442b      	add	r3, r5
 8000d30:	eba3 0308 	sub.w	r3, r3, r8
 8000d34:	b2a4      	uxth	r4, r4
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d3e:	fb0c f202 	mul.w	r2, ip, r2
 8000d42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d46:	42a2      	cmp	r2, r4
 8000d48:	d94f      	bls.n	8000dea <__udivmoddi4+0x1a0>
 8000d4a:	192c      	adds	r4, r5, r4
 8000d4c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000d50:	d204      	bcs.n	8000d5c <__udivmoddi4+0x112>
 8000d52:	42a2      	cmp	r2, r4
 8000d54:	d902      	bls.n	8000d5c <__udivmoddi4+0x112>
 8000d56:	f1ac 0302 	sub.w	r3, ip, #2
 8000d5a:	442c      	add	r4, r5
 8000d5c:	1aa4      	subs	r4, r4, r2
 8000d5e:	e7be      	b.n	8000cde <__udivmoddi4+0x94>
 8000d60:	f1c7 0c20 	rsb	ip, r7, #32
 8000d64:	fa20 f80c 	lsr.w	r8, r0, ip
 8000d68:	fa00 f307 	lsl.w	r3, r0, r7
 8000d6c:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000d70:	40bd      	lsls	r5, r7
 8000d72:	ea4c 0203 	orr.w	r2, ip, r3
 8000d76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7a:	b2ab      	uxth	r3, r5
 8000d7c:	fbb8 fcfe 	udiv	ip, r8, lr
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	fb0e 801c 	mls	r0, lr, ip, r8
 8000d86:	fb0c f903 	mul.w	r9, ip, r3
 8000d8a:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000d8e:	4581      	cmp	r9, r0
 8000d90:	fa04 f407 	lsl.w	r4, r4, r7
 8000d94:	d923      	bls.n	8000dde <__udivmoddi4+0x194>
 8000d96:	1828      	adds	r0, r5, r0
 8000d98:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000d9c:	d204      	bcs.n	8000da8 <__udivmoddi4+0x15e>
 8000d9e:	4581      	cmp	r9, r0
 8000da0:	d902      	bls.n	8000da8 <__udivmoddi4+0x15e>
 8000da2:	f1ac 0102 	sub.w	r1, ip, #2
 8000da6:	4428      	add	r0, r5
 8000da8:	eba0 0009 	sub.w	r0, r0, r9
 8000dac:	b292      	uxth	r2, r2
 8000dae:	fbb0 fcfe 	udiv	ip, r0, lr
 8000db2:	fb0e 001c 	mls	r0, lr, ip, r0
 8000db6:	fb0c f803 	mul.w	r8, ip, r3
 8000dba:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000dbe:	4598      	cmp	r8, r3
 8000dc0:	d90f      	bls.n	8000de2 <__udivmoddi4+0x198>
 8000dc2:	18eb      	adds	r3, r5, r3
 8000dc4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000dc8:	d204      	bcs.n	8000dd4 <__udivmoddi4+0x18a>
 8000dca:	4598      	cmp	r8, r3
 8000dcc:	d902      	bls.n	8000dd4 <__udivmoddi4+0x18a>
 8000dce:	f1ac 0202 	sub.w	r2, ip, #2
 8000dd2:	442b      	add	r3, r5
 8000dd4:	eba3 0308 	sub.w	r3, r3, r8
 8000dd8:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000ddc:	e791      	b.n	8000d02 <__udivmoddi4+0xb8>
 8000dde:	4661      	mov	r1, ip
 8000de0:	e7e2      	b.n	8000da8 <__udivmoddi4+0x15e>
 8000de2:	4662      	mov	r2, ip
 8000de4:	e7f6      	b.n	8000dd4 <__udivmoddi4+0x18a>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7a2      	b.n	8000d30 <__udivmoddi4+0xe6>
 8000dea:	4663      	mov	r3, ip
 8000dec:	e7b6      	b.n	8000d5c <__udivmoddi4+0x112>
 8000dee:	4283      	cmp	r3, r0
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0x1b4>
 8000df2:	b10e      	cbz	r6, 8000df8 <__udivmoddi4+0x1ae>
 8000df4:	e9c6 7000 	strd	r7, r0, [r6]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e776      	b.n	8000cec <__udivmoddi4+0xa2>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	b981      	cbnz	r1, 8000e26 <__udivmoddi4+0x1dc>
 8000e04:	4283      	cmp	r3, r0
 8000e06:	d301      	bcc.n	8000e0c <__udivmoddi4+0x1c2>
 8000e08:	42ba      	cmp	r2, r7
 8000e0a:	d80a      	bhi.n	8000e22 <__udivmoddi4+0x1d8>
 8000e0c:	1abc      	subs	r4, r7, r2
 8000e0e:	eb60 0303 	sbc.w	r3, r0, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	469c      	mov	ip, r3
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d068      	beq.n	8000eec <__udivmoddi4+0x2a2>
 8000e1a:	e9c6 4c00 	strd	r4, ip, [r6]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e764      	b.n	8000cec <__udivmoddi4+0xa2>
 8000e22:	4608      	mov	r0, r1
 8000e24:	e7f7      	b.n	8000e16 <__udivmoddi4+0x1cc>
 8000e26:	f1c1 0c20 	rsb	ip, r1, #32
 8000e2a:	408b      	lsls	r3, r1
 8000e2c:	fa22 f40c 	lsr.w	r4, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa02 f501 	lsl.w	r5, r2, r1
 8000e36:	fa00 f301 	lsl.w	r3, r0, r1
 8000e3a:	fa27 f20c 	lsr.w	r2, r7, ip
 8000e3e:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000e42:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000e46:	4313      	orrs	r3, r2
 8000e48:	fbbb f8f9 	udiv	r8, fp, r9
 8000e4c:	fa1f fe84 	uxth.w	lr, r4
 8000e50:	fb09 bb18 	mls	fp, r9, r8, fp
 8000e54:	0c1a      	lsrs	r2, r3, #16
 8000e56:	fb08 fa0e 	mul.w	sl, r8, lr
 8000e5a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000e5e:	4592      	cmp	sl, r2
 8000e60:	fa07 f701 	lsl.w	r7, r7, r1
 8000e64:	d93e      	bls.n	8000ee4 <__udivmoddi4+0x29a>
 8000e66:	18a2      	adds	r2, r4, r2
 8000e68:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000e6c:	d204      	bcs.n	8000e78 <__udivmoddi4+0x22e>
 8000e6e:	4592      	cmp	sl, r2
 8000e70:	d902      	bls.n	8000e78 <__udivmoddi4+0x22e>
 8000e72:	f1a8 0002 	sub.w	r0, r8, #2
 8000e76:	4422      	add	r2, r4
 8000e78:	eba2 020a 	sub.w	r2, r2, sl
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	fbb2 f8f9 	udiv	r8, r2, r9
 8000e82:	fb09 2218 	mls	r2, r9, r8, r2
 8000e86:	fb08 fe0e 	mul.w	lr, r8, lr
 8000e8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000e8e:	4596      	cmp	lr, r2
 8000e90:	d92a      	bls.n	8000ee8 <__udivmoddi4+0x29e>
 8000e92:	18a2      	adds	r2, r4, r2
 8000e94:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000e98:	d204      	bcs.n	8000ea4 <__udivmoddi4+0x25a>
 8000e9a:	4596      	cmp	lr, r2
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x25a>
 8000e9e:	f1a8 0302 	sub.w	r3, r8, #2
 8000ea2:	4422      	add	r2, r4
 8000ea4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ea8:	fba0 9305 	umull	r9, r3, r0, r5
 8000eac:	eba2 020e 	sub.w	r2, r2, lr
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	46ce      	mov	lr, r9
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	d302      	bcc.n	8000ebe <__udivmoddi4+0x274>
 8000eb8:	d106      	bne.n	8000ec8 <__udivmoddi4+0x27e>
 8000eba:	454f      	cmp	r7, r9
 8000ebc:	d204      	bcs.n	8000ec8 <__udivmoddi4+0x27e>
 8000ebe:	ebb9 0e05 	subs.w	lr, r9, r5
 8000ec2:	eb63 0804 	sbc.w	r8, r3, r4
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	b186      	cbz	r6, 8000eec <__udivmoddi4+0x2a2>
 8000eca:	ebb7 030e 	subs.w	r3, r7, lr
 8000ece:	eb62 0708 	sbc.w	r7, r2, r8
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	ea4c 0303 	orr.w	r3, ip, r3
 8000edc:	40cf      	lsrs	r7, r1
 8000ede:	e9c6 3700 	strd	r3, r7, [r6]
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x1d4>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7c7      	b.n	8000e78 <__udivmoddi4+0x22e>
 8000ee8:	4643      	mov	r3, r8
 8000eea:	e7db      	b.n	8000ea4 <__udivmoddi4+0x25a>
 8000eec:	4631      	mov	r1, r6
 8000eee:	e6fd      	b.n	8000cec <__udivmoddi4+0xa2>

08000ef0 <strcmp>:
 8000ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ef8:	2a01      	cmp	r2, #1
 8000efa:	bf28      	it	cs
 8000efc:	429a      	cmpcs	r2, r3
 8000efe:	d0f7      	beq.n	8000ef0 <strcmp>
 8000f00:	1ad0      	subs	r0, r2, r3
 8000f02:	4770      	bx	lr

08000f04 <strlen>:
 8000f04:	4603      	mov	r3, r0
 8000f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d1fb      	bne.n	8000f06 <strlen+0x2>
 8000f0e:	1a18      	subs	r0, r3, r0
 8000f10:	3801      	subs	r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	0000      	movs	r0, r0
	...

08000f18 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000f1a:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000f1c:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000f1e:	6820      	ldr	r0, [r4, #0]
static int ws2812_pwm_init(const struct device *dev) {
 8000f20:	b083      	sub	sp, #12
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000f22:	f00c f87b 	bl	800d01c <z_device_is_ready>
    if (!device_is_ready(cfg->pwm.dev)) {
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d03d      	beq.n	8000fa6 <ws2812_pwm_init+0x8e>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000f2a:	7e21      	ldrb	r1, [r4, #24]
 8000f2c:	b179      	cbz	r1, 8000f4e <ws2812_pwm_init+0x36>
        switch (cfg->color_mapping[i]) {
 8000f2e:	69e2      	ldr	r2, [r4, #28]
 8000f30:	3901      	subs	r1, #1
 8000f32:	1e53      	subs	r3, r2, #1
 8000f34:	fa52 f181 	uxtab	r1, r2, r1
 8000f38:	e001      	b.n	8000f3e <ws2812_pwm_init+0x26>
    for (i = 0; i < cfg->num_colors; i++) {
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d007      	beq.n	8000f4e <ws2812_pwm_init+0x36>
        switch (cfg->color_mapping[i]) {
 8000f3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000f42:	2a03      	cmp	r2, #3
 8000f44:	d9f9      	bls.n	8000f3a <ws2812_pwm_init+0x22>
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000f46:	f06f 0015 	mvn.w	r0, #21
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);

    return 0;
}
 8000f4a:	b003      	add	sp, #12
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000f4e:	e9d4 0100 	ldrd	r0, r1, [r4]
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000f52:	6883      	ldr	r3, [r0, #8]
 8000f54:	466a      	mov	r2, sp
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4798      	blx	r3
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f5a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8000f5c:	9d00      	ldr	r5, [sp, #0]
 8000f5e:	9f01      	ldr	r7, [sp, #4]
 8000f60:	fba3 0105 	umull	r0, r1, r3, r5
 8000f64:	fb03 1107 	mla	r1, r3, r7, r1
 8000f68:	a311      	add	r3, pc, #68	; (adr r3, 8000fb0 <ws2812_pwm_init+0x98>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff fe05 	bl	8000b7c <__aeabi_uldivmod>
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f72:	8c21      	ldrh	r1, [r4, #32]
    ctx->pwm_period_cycles = (uint32_t)
 8000f74:	6030      	str	r0, [r6, #0]
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f76:	fba1 0c05 	umull	r0, ip, r1, r5
 8000f7a:	a30d      	add	r3, pc, #52	; (adr r3, 8000fb0 <ws2812_pwm_init+0x98>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	fb01 c107 	mla	r1, r1, r7, ip
 8000f84:	f7ff fdfa 	bl	8000b7c <__aeabi_uldivmod>
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f88:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f8a:	6070      	str	r0, [r6, #4]
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f8c:	fba3 0105 	umull	r0, r1, r3, r5
 8000f90:	fb03 1107 	mla	r1, r3, r7, r1
 8000f94:	a306      	add	r3, pc, #24	; (adr r3, 8000fb0 <ws2812_pwm_init+0x98>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fdef 	bl	8000b7c <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f9e:	60b0      	str	r0, [r6, #8]
    return 0;
 8000fa0:	2000      	movs	r0, #0
}
 8000fa2:	b003      	add	sp, #12
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -ENODEV;
 8000fa6:	f06f 0012 	mvn.w	r0, #18
 8000faa:	e7fa      	b.n	8000fa2 <ws2812_pwm_init+0x8a>
 8000fac:	f3af 8000 	nop.w
 8000fb0:	3b9aca00 	.word	0x3b9aca00
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <calc_dist_ds_twr>:
    } else {
        resp_twr_1_poll_ds_twr(twr_status);
    }
}

double calc_dist_ds_twr(msg_twr_final_t *final_msg, uint32_t poll_rx_ts, uint32_t resp_tx_ts, uint32_t final_rx_ts) {
 8000fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    auto Ra = (double)
      (final_msg->resp_rx_ts - final_msg->poll_tx_ts);
 8000fbc:	6886      	ldr	r6, [r0, #8]
double calc_dist_ds_twr(msg_twr_final_t *final_msg, uint32_t poll_rx_ts, uint32_t resp_tx_ts, uint32_t final_rx_ts) {
 8000fbe:	4607      	mov	r7, r0
      (final_msg->resp_rx_ts - final_msg->poll_tx_ts);
 8000fc0:	6840      	ldr	r0, [r0, #4]
double calc_dist_ds_twr(msg_twr_final_t *final_msg, uint32_t poll_rx_ts, uint32_t resp_tx_ts, uint32_t final_rx_ts) {
 8000fc2:	b083      	sub	sp, #12
    auto Ra = (double)
 8000fc4:	1a30      	subs	r0, r6, r0
double calc_dist_ds_twr(msg_twr_final_t *final_msg, uint32_t poll_rx_ts, uint32_t resp_tx_ts, uint32_t final_rx_ts) {
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	4690      	mov	r8, r2
 8000fca:	4689      	mov	r9, r1
    auto Ra = (double)
 8000fcc:	f7ff fa7a 	bl	80004c4 <__aeabi_ui2d>
 8000fd0:	4602      	mov	r2, r0
    auto Rb = (double)
 8000fd2:	eba5 0008 	sub.w	r0, r5, r8
    auto Ra = (double)
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	460d      	mov	r5, r1
    auto Rb = (double)
 8000fda:	f7ff fa73 	bl	80004c4 <__aeabi_ui2d>
 8000fde:	4602      	mov	r2, r0
      (final_rx_ts - resp_tx_ts);
    auto Da = (double)
      (final_msg->final_tx_ts - final_msg->resp_rx_ts);
 8000fe0:	68f8      	ldr	r0, [r7, #12]
    auto Da = (double)
 8000fe2:	1b80      	subs	r0, r0, r6
    auto Rb = (double)
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	4616      	mov	r6, r2
    auto Da = (double)
 8000fe8:	f7ff fa6c 	bl	80004c4 <__aeabi_ui2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
    auto Db = (double)
 8000ff0:	eba8 0009 	sub.w	r0, r8, r9
    auto Da = (double)
 8000ff4:	e9cd 2300 	strd	r2, r3, [sp]
    auto Db = (double)
 8000ff8:	f7ff fa64 	bl	80004c4 <__aeabi_ui2d>
      (resp_tx_ts - poll_rx_ts);
    auto tof_dtu = (int64_t)
      ((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8000ffc:	4632      	mov	r2, r6
    auto Db = (double)
 8000ffe:	4682      	mov	sl, r0
 8001000:	468b      	mov	fp, r1
      ((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8001002:	463b      	mov	r3, r7
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff fad6 	bl	80005b8 <__aeabi_dmul>
 800100c:	4652      	mov	r2, sl
 800100e:	4680      	mov	r8, r0
 8001010:	4689      	mov	r9, r1
 8001012:	465b      	mov	r3, fp
 8001014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001018:	f7ff face 	bl	80005b8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4640      	mov	r0, r8
 8001022:	4649      	mov	r1, r9
 8001024:	f7ff f910 	bl	8000248 <__aeabi_dsub>
 8001028:	4632      	mov	r2, r6
 800102a:	4680      	mov	r8, r0
 800102c:	4689      	mov	r9, r1
 800102e:	463b      	mov	r3, r7
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	f7ff f90a 	bl	800024c <__adddf3>
 8001038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800103c:	f7ff f906 	bl	800024c <__adddf3>
 8001040:	4652      	mov	r2, sl
 8001042:	465b      	mov	r3, fp
 8001044:	f7ff f902 	bl	800024c <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4640      	mov	r0, r8
 800104e:	4649      	mov	r1, r9
 8001050:	f7ff fbdc 	bl	800080c <__aeabi_ddiv>
    auto tof_dtu = (int64_t)
 8001054:	f7ff fde0 	bl	8000c18 <__aeabi_d2lz>
    double tof = (double) tof_dtu * DWT_TIME_UNITS;
 8001058:	f7ff fa80 	bl	800055c <__aeabi_l2d>
 800105c:	a308      	add	r3, pc, #32	; (adr r3, 8001080 <calc_dist_ds_twr+0xc8>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff faa9 	bl	80005b8 <__aeabi_dmul>
    return fabs(tof * SPEED_OF_LIGHT);
 8001066:	a308      	add	r3, pc, #32	; (adr r3, 8001088 <calc_dist_ds_twr+0xd0>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff faa4 	bl	80005b8 <__aeabi_dmul>
}
 8001070:	b003      	add	sp, #12
 8001072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return fabs(tof * SPEED_OF_LIGHT);
 8001076:	f00f bf15 	b.w	8010ea4 <fabs>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	3bce48fa 	.word	0x3bce48fa
 8001084:	3db13518 	.word	0x3db13518
 8001088:	13000000 	.word	0x13000000
 800108c:	41b1dd19 	.word	0x41b1dd19

08001090 <_dtoa_r>:
 8001090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001094:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001096:	b099      	sub	sp, #100	; 0x64
 8001098:	4616      	mov	r6, r2
 800109a:	461f      	mov	r7, r3
 800109c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80010a0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80010a4:	4605      	mov	r5, r0
 80010a6:	b974      	cbnz	r4, 80010c6 <_dtoa_r+0x36>
 80010a8:	2010      	movs	r0, #16
 80010aa:	f00e f999 	bl	800f3e0 <malloc>
 80010ae:	4602      	mov	r2, r0
 80010b0:	6268      	str	r0, [r5, #36]	; 0x24
 80010b2:	b920      	cbnz	r0, 80010be <_dtoa_r+0x2e>
 80010b4:	4ba8      	ldr	r3, [pc, #672]	; (8001358 <_dtoa_r+0x2c8>)
 80010b6:	21ea      	movs	r1, #234	; 0xea
 80010b8:	48a8      	ldr	r0, [pc, #672]	; (800135c <_dtoa_r+0x2cc>)
 80010ba:	f00e f961 	bl	800f380 <__assert_func>
 80010be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80010c2:	6004      	str	r4, [r0, #0]
 80010c4:	60c4      	str	r4, [r0, #12]
 80010c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	b151      	cbz	r1, 80010e2 <_dtoa_r+0x52>
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	604a      	str	r2, [r1, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	4093      	lsls	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
 80010d6:	4628      	mov	r0, r5
 80010d8:	f00f f9ce 	bl	8010478 <_Bfree>
 80010dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	1e3b      	subs	r3, r7, #0
 80010e4:	bfb9      	ittee	lt
 80010e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80010ea:	9305      	strlt	r3, [sp, #20]
 80010ec:	2300      	movge	r3, #0
 80010ee:	f8c8 3000 	strge.w	r3, [r8]
 80010f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80010f6:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <_dtoa_r+0x2d0>)
 80010f8:	bfbc      	itt	lt
 80010fa:	2201      	movlt	r2, #1
 80010fc:	f8c8 2000 	strlt.w	r2, [r8]
 8001100:	ea33 0309 	bics.w	r3, r3, r9
 8001104:	d119      	bne.n	800113a <_dtoa_r+0xaa>
 8001106:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001108:	f242 730f 	movw	r3, #9999	; 0x270f
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8001112:	4333      	orrs	r3, r6
 8001114:	f000 8580 	beq.w	8001c18 <_dtoa_r+0xb88>
 8001118:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800111a:	b953      	cbnz	r3, 8001132 <_dtoa_r+0xa2>
 800111c:	4b91      	ldr	r3, [pc, #580]	; (8001364 <_dtoa_r+0x2d4>)
 800111e:	e022      	b.n	8001166 <_dtoa_r+0xd6>
 8001120:	4b91      	ldr	r3, [pc, #580]	; (8001368 <_dtoa_r+0x2d8>)
 8001122:	9303      	str	r3, [sp, #12]
 8001124:	3308      	adds	r3, #8
 8001126:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	9803      	ldr	r0, [sp, #12]
 800112c:	b019      	add	sp, #100	; 0x64
 800112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001132:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <_dtoa_r+0x2d4>)
 8001134:	9303      	str	r3, [sp, #12]
 8001136:	3303      	adds	r3, #3
 8001138:	e7f5      	b.n	8001126 <_dtoa_r+0x96>
 800113a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800113e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8001142:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001146:	2200      	movs	r2, #0
 8001148:	2300      	movs	r3, #0
 800114a:	f7ff fc9d 	bl	8000a88 <__aeabi_dcmpeq>
 800114e:	4680      	mov	r8, r0
 8001150:	b158      	cbz	r0, 800116a <_dtoa_r+0xda>
 8001152:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001154:	2301      	movs	r3, #1
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8559 	beq.w	8001c12 <_dtoa_r+0xb82>
 8001160:	4882      	ldr	r0, [pc, #520]	; (800136c <_dtoa_r+0x2dc>)
 8001162:	6018      	str	r0, [r3, #0]
 8001164:	1e43      	subs	r3, r0, #1
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	e7df      	b.n	800112a <_dtoa_r+0x9a>
 800116a:	ab16      	add	r3, sp, #88	; 0x58
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	ab17      	add	r3, sp, #92	; 0x5c
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4628      	mov	r0, r5
 8001174:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001178:	f00f fbf6 	bl	8010968 <__d2b>
 800117c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001180:	4683      	mov	fp, r0
 8001182:	2c00      	cmp	r4, #0
 8001184:	d07e      	beq.n	8001284 <_dtoa_r+0x1f4>
 8001186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001188:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800118c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001194:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001198:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800119c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80011a0:	4b73      	ldr	r3, [pc, #460]	; (8001370 <_dtoa_r+0x2e0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f7ff f850 	bl	8000248 <__aeabi_dsub>
 80011a8:	a365      	add	r3, pc, #404	; (adr r3, 8001340 <_dtoa_r+0x2b0>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa03 	bl	80005b8 <__aeabi_dmul>
 80011b2:	a365      	add	r3, pc, #404	; (adr r3, 8001348 <_dtoa_r+0x2b8>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f848 	bl	800024c <__adddf3>
 80011bc:	4606      	mov	r6, r0
 80011be:	4620      	mov	r0, r4
 80011c0:	460f      	mov	r7, r1
 80011c2:	f7ff f98f 	bl	80004e4 <__aeabi_i2d>
 80011c6:	a362      	add	r3, pc, #392	; (adr r3, 8001350 <_dtoa_r+0x2c0>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f9f4 	bl	80005b8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4630      	mov	r0, r6
 80011d6:	4639      	mov	r1, r7
 80011d8:	f7ff f838 	bl	800024c <__adddf3>
 80011dc:	4606      	mov	r6, r0
 80011de:	460f      	mov	r7, r1
 80011e0:	f7ff fc84 	bl	8000aec <__aeabi_d2iz>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4682      	mov	sl, r0
 80011e8:	2300      	movs	r3, #0
 80011ea:	4630      	mov	r0, r6
 80011ec:	4639      	mov	r1, r7
 80011ee:	f7ff fc55 	bl	8000a9c <__aeabi_dcmplt>
 80011f2:	b148      	cbz	r0, 8001208 <_dtoa_r+0x178>
 80011f4:	4650      	mov	r0, sl
 80011f6:	f7ff f975 	bl	80004e4 <__aeabi_i2d>
 80011fa:	4632      	mov	r2, r6
 80011fc:	463b      	mov	r3, r7
 80011fe:	f7ff fc43 	bl	8000a88 <__aeabi_dcmpeq>
 8001202:	b908      	cbnz	r0, 8001208 <_dtoa_r+0x178>
 8001204:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001208:	f1ba 0f16 	cmp.w	sl, #22
 800120c:	d857      	bhi.n	80012be <_dtoa_r+0x22e>
 800120e:	4b59      	ldr	r3, [pc, #356]	; (8001374 <_dtoa_r+0x2e4>)
 8001210:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800121c:	f7ff fc3e 	bl	8000a9c <__aeabi_dcmplt>
 8001220:	2800      	cmp	r0, #0
 8001222:	d04e      	beq.n	80012c2 <_dtoa_r+0x232>
 8001224:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001228:	2300      	movs	r3, #0
 800122a:	930f      	str	r3, [sp, #60]	; 0x3c
 800122c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800122e:	1b1c      	subs	r4, r3, r4
 8001230:	1e63      	subs	r3, r4, #1
 8001232:	9309      	str	r3, [sp, #36]	; 0x24
 8001234:	bf45      	ittet	mi
 8001236:	f1c4 0301 	rsbmi	r3, r4, #1
 800123a:	9306      	strmi	r3, [sp, #24]
 800123c:	2300      	movpl	r3, #0
 800123e:	2300      	movmi	r3, #0
 8001240:	bf4c      	ite	mi
 8001242:	9309      	strmi	r3, [sp, #36]	; 0x24
 8001244:	9306      	strpl	r3, [sp, #24]
 8001246:	f1ba 0f00 	cmp.w	sl, #0
 800124a:	db3c      	blt.n	80012c6 <_dtoa_r+0x236>
 800124c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800124e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8001252:	4453      	add	r3, sl
 8001254:	9309      	str	r3, [sp, #36]	; 0x24
 8001256:	2300      	movs	r3, #0
 8001258:	930a      	str	r3, [sp, #40]	; 0x28
 800125a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800125c:	2b09      	cmp	r3, #9
 800125e:	f200 808d 	bhi.w	800137c <_dtoa_r+0x2ec>
 8001262:	2b05      	cmp	r3, #5
 8001264:	bfc4      	itt	gt
 8001266:	3b04      	subgt	r3, #4
 8001268:	9322      	strgt	r3, [sp, #136]	; 0x88
 800126a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800126c:	f1a3 0302 	sub.w	r3, r3, #2
 8001270:	bfcc      	ite	gt
 8001272:	2400      	movgt	r4, #0
 8001274:	2401      	movle	r4, #1
 8001276:	2b03      	cmp	r3, #3
 8001278:	f200 808c 	bhi.w	8001394 <_dtoa_r+0x304>
 800127c:	e8df f003 	tbb	[pc, r3]
 8001280:	5b4d4f2d 	.word	0x5b4d4f2d
 8001284:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001288:	441c      	add	r4, r3
 800128a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800128e:	2b20      	cmp	r3, #32
 8001290:	bfc3      	ittte	gt
 8001292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8001296:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800129a:	fa09 f303 	lslgt.w	r3, r9, r3
 800129e:	f1c3 0320 	rsble	r3, r3, #32
 80012a2:	bfc6      	itte	gt
 80012a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80012a8:	4318      	orrgt	r0, r3
 80012aa:	fa06 f003 	lslle.w	r0, r6, r3
 80012ae:	f7ff f909 	bl	80004c4 <__aeabi_ui2d>
 80012b2:	2301      	movs	r3, #1
 80012b4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80012b8:	3c01      	subs	r4, #1
 80012ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80012bc:	e770      	b.n	80011a0 <_dtoa_r+0x110>
 80012be:	2301      	movs	r3, #1
 80012c0:	e7b3      	b.n	800122a <_dtoa_r+0x19a>
 80012c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80012c4:	e7b2      	b.n	800122c <_dtoa_r+0x19c>
 80012c6:	9b06      	ldr	r3, [sp, #24]
 80012c8:	eba3 030a 	sub.w	r3, r3, sl
 80012cc:	9306      	str	r3, [sp, #24]
 80012ce:	f1ca 0300 	rsb	r3, sl, #0
 80012d2:	930a      	str	r3, [sp, #40]	; 0x28
 80012d4:	2300      	movs	r3, #0
 80012d6:	930e      	str	r3, [sp, #56]	; 0x38
 80012d8:	e7bf      	b.n	800125a <_dtoa_r+0x1ca>
 80012da:	2300      	movs	r3, #0
 80012dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80012de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dc5a      	bgt.n	800139a <_dtoa_r+0x30a>
 80012e4:	f04f 0901 	mov.w	r9, #1
 80012e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80012ec:	464b      	mov	r3, r9
 80012ee:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80012f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80012f4:	2200      	movs	r2, #0
 80012f6:	6042      	str	r2, [r0, #4]
 80012f8:	2204      	movs	r2, #4
 80012fa:	f102 0614 	add.w	r6, r2, #20
 80012fe:	429e      	cmp	r6, r3
 8001300:	6841      	ldr	r1, [r0, #4]
 8001302:	d950      	bls.n	80013a6 <_dtoa_r+0x316>
 8001304:	4628      	mov	r0, r5
 8001306:	f00f f877 	bl	80103f8 <_Balloc>
 800130a:	9003      	str	r0, [sp, #12]
 800130c:	2800      	cmp	r0, #0
 800130e:	d14e      	bne.n	80013ae <_dtoa_r+0x31e>
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <_dtoa_r+0x2e8>)
 8001312:	4602      	mov	r2, r0
 8001314:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001318:	e6ce      	b.n	80010b8 <_dtoa_r+0x28>
 800131a:	2301      	movs	r3, #1
 800131c:	e7de      	b.n	80012dc <_dtoa_r+0x24c>
 800131e:	2300      	movs	r3, #0
 8001320:	930b      	str	r3, [sp, #44]	; 0x2c
 8001322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001324:	eb0a 0903 	add.w	r9, sl, r3
 8001328:	f109 0301 	add.w	r3, r9, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	9308      	str	r3, [sp, #32]
 8001330:	bfb8      	it	lt
 8001332:	2301      	movlt	r3, #1
 8001334:	e7dd      	b.n	80012f2 <_dtoa_r+0x262>
 8001336:	2301      	movs	r3, #1
 8001338:	e7f2      	b.n	8001320 <_dtoa_r+0x290>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	636f4361 	.word	0x636f4361
 8001344:	3fd287a7 	.word	0x3fd287a7
 8001348:	8b60c8b3 	.word	0x8b60c8b3
 800134c:	3fc68a28 	.word	0x3fc68a28
 8001350:	509f79fb 	.word	0x509f79fb
 8001354:	3fd34413 	.word	0x3fd34413
 8001358:	08012d77 	.word	0x08012d77
 800135c:	08012d8e 	.word	0x08012d8e
 8001360:	7ff00000 	.word	0x7ff00000
 8001364:	08012d73 	.word	0x08012d73
 8001368:	08012d6a 	.word	0x08012d6a
 800136c:	08012d47 	.word	0x08012d47
 8001370:	3ff80000 	.word	0x3ff80000
 8001374:	08011cc8 	.word	0x08011cc8
 8001378:	08012de8 	.word	0x08012de8
 800137c:	2401      	movs	r4, #1
 800137e:	2300      	movs	r3, #0
 8001380:	9322      	str	r3, [sp, #136]	; 0x88
 8001382:	940b      	str	r4, [sp, #44]	; 0x2c
 8001384:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001388:	2200      	movs	r2, #0
 800138a:	f8cd 9020 	str.w	r9, [sp, #32]
 800138e:	2312      	movs	r3, #18
 8001390:	9223      	str	r2, [sp, #140]	; 0x8c
 8001392:	e7ae      	b.n	80012f2 <_dtoa_r+0x262>
 8001394:	2301      	movs	r3, #1
 8001396:	930b      	str	r3, [sp, #44]	; 0x2c
 8001398:	e7f4      	b.n	8001384 <_dtoa_r+0x2f4>
 800139a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800139e:	f8cd 9020 	str.w	r9, [sp, #32]
 80013a2:	464b      	mov	r3, r9
 80013a4:	e7a5      	b.n	80012f2 <_dtoa_r+0x262>
 80013a6:	3101      	adds	r1, #1
 80013a8:	6041      	str	r1, [r0, #4]
 80013aa:	0052      	lsls	r2, r2, #1
 80013ac:	e7a5      	b.n	80012fa <_dtoa_r+0x26a>
 80013ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013b0:	9a03      	ldr	r2, [sp, #12]
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	9b08      	ldr	r3, [sp, #32]
 80013b6:	2b0e      	cmp	r3, #14
 80013b8:	f200 80a8 	bhi.w	800150c <_dtoa_r+0x47c>
 80013bc:	2c00      	cmp	r4, #0
 80013be:	f000 80a5 	beq.w	800150c <_dtoa_r+0x47c>
 80013c2:	f1ba 0f00 	cmp.w	sl, #0
 80013c6:	dd34      	ble.n	8001432 <_dtoa_r+0x3a2>
 80013c8:	4a9a      	ldr	r2, [pc, #616]	; (8001634 <_dtoa_r+0x5a4>)
 80013ca:	f00a 030f 	and.w	r3, sl, #15
 80013ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80013d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013d6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80013da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80013de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80013e2:	d016      	beq.n	8001412 <_dtoa_r+0x382>
 80013e4:	4b94      	ldr	r3, [pc, #592]	; (8001638 <_dtoa_r+0x5a8>)
 80013e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80013ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013ee:	f7ff fa0d 	bl	800080c <__aeabi_ddiv>
 80013f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013f6:	f004 040f 	and.w	r4, r4, #15
 80013fa:	2703      	movs	r7, #3
 80013fc:	4e8e      	ldr	r6, [pc, #568]	; (8001638 <_dtoa_r+0x5a8>)
 80013fe:	b954      	cbnz	r4, 8001416 <_dtoa_r+0x386>
 8001400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001408:	f7ff fa00 	bl	800080c <__aeabi_ddiv>
 800140c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001410:	e029      	b.n	8001466 <_dtoa_r+0x3d6>
 8001412:	2702      	movs	r7, #2
 8001414:	e7f2      	b.n	80013fc <_dtoa_r+0x36c>
 8001416:	07e1      	lsls	r1, r4, #31
 8001418:	d508      	bpl.n	800142c <_dtoa_r+0x39c>
 800141a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800141e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001422:	f7ff f8c9 	bl	80005b8 <__aeabi_dmul>
 8001426:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800142a:	3701      	adds	r7, #1
 800142c:	1064      	asrs	r4, r4, #1
 800142e:	3608      	adds	r6, #8
 8001430:	e7e5      	b.n	80013fe <_dtoa_r+0x36e>
 8001432:	f000 80a5 	beq.w	8001580 <_dtoa_r+0x4f0>
 8001436:	f1ca 0400 	rsb	r4, sl, #0
 800143a:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <_dtoa_r+0x5a4>)
 800143c:	4e7e      	ldr	r6, [pc, #504]	; (8001638 <_dtoa_r+0x5a8>)
 800143e:	f004 020f 	and.w	r2, r4, #15
 8001442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800144e:	f7ff f8b3 	bl	80005b8 <__aeabi_dmul>
 8001452:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001456:	1124      	asrs	r4, r4, #4
 8001458:	2300      	movs	r3, #0
 800145a:	2702      	movs	r7, #2
 800145c:	2c00      	cmp	r4, #0
 800145e:	f040 8084 	bne.w	800156a <_dtoa_r+0x4da>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1d2      	bne.n	800140c <_dtoa_r+0x37c>
 8001466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 808b 	beq.w	8001584 <_dtoa_r+0x4f4>
 800146e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001472:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001476:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800147a:	4b70      	ldr	r3, [pc, #448]	; (800163c <_dtoa_r+0x5ac>)
 800147c:	2200      	movs	r2, #0
 800147e:	f7ff fb0d 	bl	8000a9c <__aeabi_dcmplt>
 8001482:	2800      	cmp	r0, #0
 8001484:	d07e      	beq.n	8001584 <_dtoa_r+0x4f4>
 8001486:	9b08      	ldr	r3, [sp, #32]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d07b      	beq.n	8001584 <_dtoa_r+0x4f4>
 800148c:	f1b9 0f00 	cmp.w	r9, #0
 8001490:	dd38      	ble.n	8001504 <_dtoa_r+0x474>
 8001492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001496:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <_dtoa_r+0x5b0>)
 8001498:	2200      	movs	r2, #0
 800149a:	f7ff f88d 	bl	80005b8 <__aeabi_dmul>
 800149e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014a2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80014a6:	3701      	adds	r7, #1
 80014a8:	464c      	mov	r4, r9
 80014aa:	4638      	mov	r0, r7
 80014ac:	f7ff f81a 	bl	80004e4 <__aeabi_i2d>
 80014b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014b4:	f7ff f880 	bl	80005b8 <__aeabi_dmul>
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <_dtoa_r+0x5b4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f7fe fec6 	bl	800024c <__adddf3>
 80014c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80014c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014c8:	9611      	str	r6, [sp, #68]	; 0x44
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	d15d      	bne.n	800158a <_dtoa_r+0x4fa>
 80014ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <_dtoa_r+0x5b8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f7fe feb7 	bl	8000248 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014e4:	4633      	mov	r3, r6
 80014e6:	f7ff faf7 	bl	8000ad8 <__aeabi_dcmpgt>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	f040 829c 	bne.w	8001a28 <_dtoa_r+0x998>
 80014f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80014fa:	f7ff facf 	bl	8000a9c <__aeabi_dcmplt>
 80014fe:	2800      	cmp	r0, #0
 8001500:	f040 8290 	bne.w	8001a24 <_dtoa_r+0x994>
 8001504:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8001508:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800150c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800150e:	2b00      	cmp	r3, #0
 8001510:	f2c0 8152 	blt.w	80017b8 <_dtoa_r+0x728>
 8001514:	f1ba 0f0e 	cmp.w	sl, #14
 8001518:	f300 814e 	bgt.w	80017b8 <_dtoa_r+0x728>
 800151c:	4b45      	ldr	r3, [pc, #276]	; (8001634 <_dtoa_r+0x5a4>)
 800151e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001522:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001526:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800152a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800152c:	2b00      	cmp	r3, #0
 800152e:	f280 80db 	bge.w	80016e8 <_dtoa_r+0x658>
 8001532:	9b08      	ldr	r3, [sp, #32]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f300 80d7 	bgt.w	80016e8 <_dtoa_r+0x658>
 800153a:	f040 8272 	bne.w	8001a22 <_dtoa_r+0x992>
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <_dtoa_r+0x5b8>)
 8001540:	2200      	movs	r2, #0
 8001542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001546:	f7ff f837 	bl	80005b8 <__aeabi_dmul>
 800154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800154e:	f7ff fab9 	bl	8000ac4 <__aeabi_dcmpge>
 8001552:	9c08      	ldr	r4, [sp, #32]
 8001554:	4626      	mov	r6, r4
 8001556:	2800      	cmp	r0, #0
 8001558:	f040 8248 	bne.w	80019ec <_dtoa_r+0x95c>
 800155c:	9f03      	ldr	r7, [sp, #12]
 800155e:	2331      	movs	r3, #49	; 0x31
 8001560:	f807 3b01 	strb.w	r3, [r7], #1
 8001564:	f10a 0a01 	add.w	sl, sl, #1
 8001568:	e244      	b.n	80019f4 <_dtoa_r+0x964>
 800156a:	07e2      	lsls	r2, r4, #31
 800156c:	d505      	bpl.n	800157a <_dtoa_r+0x4ea>
 800156e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001572:	f7ff f821 	bl	80005b8 <__aeabi_dmul>
 8001576:	3701      	adds	r7, #1
 8001578:	2301      	movs	r3, #1
 800157a:	1064      	asrs	r4, r4, #1
 800157c:	3608      	adds	r6, #8
 800157e:	e76d      	b.n	800145c <_dtoa_r+0x3cc>
 8001580:	2702      	movs	r7, #2
 8001582:	e770      	b.n	8001466 <_dtoa_r+0x3d6>
 8001584:	9c08      	ldr	r4, [sp, #32]
 8001586:	46d0      	mov	r8, sl
 8001588:	e78f      	b.n	80014aa <_dtoa_r+0x41a>
 800158a:	9903      	ldr	r1, [sp, #12]
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <_dtoa_r+0x5a4>)
 800158e:	4421      	add	r1, r4
 8001590:	9112      	str	r1, [sp, #72]	; 0x48
 8001592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001594:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001598:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800159c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d055      	beq.n	8001650 <_dtoa_r+0x5c0>
 80015a4:	4929      	ldr	r1, [pc, #164]	; (800164c <_dtoa_r+0x5bc>)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff f930 	bl	800080c <__aeabi_ddiv>
 80015ac:	463b      	mov	r3, r7
 80015ae:	4632      	mov	r2, r6
 80015b0:	f7fe fe4a 	bl	8000248 <__aeabi_dsub>
 80015b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80015b8:	9f03      	ldr	r7, [sp, #12]
 80015ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015be:	f7ff fa95 	bl	8000aec <__aeabi_d2iz>
 80015c2:	4604      	mov	r4, r0
 80015c4:	f7fe ff8e 	bl	80004e4 <__aeabi_i2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_dsub>
 80015d4:	3430      	adds	r4, #48	; 0x30
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015de:	f807 4b01 	strb.w	r4, [r7], #1
 80015e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80015e6:	f7ff fa59 	bl	8000a9c <__aeabi_dcmplt>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d174      	bne.n	80016d8 <_dtoa_r+0x648>
 80015ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80015f2:	4912      	ldr	r1, [pc, #72]	; (800163c <_dtoa_r+0x5ac>)
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7fe fe27 	bl	8000248 <__aeabi_dsub>
 80015fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80015fe:	f7ff fa4d 	bl	8000a9c <__aeabi_dcmplt>
 8001602:	2800      	cmp	r0, #0
 8001604:	f040 80b7 	bne.w	8001776 <_dtoa_r+0x6e6>
 8001608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800160a:	429f      	cmp	r7, r3
 800160c:	f43f af7a 	beq.w	8001504 <_dtoa_r+0x474>
 8001610:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <_dtoa_r+0x5b0>)
 8001616:	2200      	movs	r2, #0
 8001618:	f7fe ffce 	bl	80005b8 <__aeabi_dmul>
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_dtoa_r+0x5b0>)
 800161e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001622:	2200      	movs	r2, #0
 8001624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001628:	f7fe ffc6 	bl	80005b8 <__aeabi_dmul>
 800162c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001630:	e7c3      	b.n	80015ba <_dtoa_r+0x52a>
 8001632:	bf00      	nop
 8001634:	08011cc8 	.word	0x08011cc8
 8001638:	08011ca0 	.word	0x08011ca0
 800163c:	3ff00000 	.word	0x3ff00000
 8001640:	40240000 	.word	0x40240000
 8001644:	401c0000 	.word	0x401c0000
 8001648:	40140000 	.word	0x40140000
 800164c:	3fe00000 	.word	0x3fe00000
 8001650:	4630      	mov	r0, r6
 8001652:	4639      	mov	r1, r7
 8001654:	f7fe ffb0 	bl	80005b8 <__aeabi_dmul>
 8001658:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800165c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800165e:	9c03      	ldr	r4, [sp, #12]
 8001660:	9314      	str	r3, [sp, #80]	; 0x50
 8001662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001666:	f7ff fa41 	bl	8000aec <__aeabi_d2iz>
 800166a:	9015      	str	r0, [sp, #84]	; 0x54
 800166c:	f7fe ff3a 	bl	80004e4 <__aeabi_i2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001678:	f7fe fde6 	bl	8000248 <__aeabi_dsub>
 800167c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800167e:	3330      	adds	r3, #48	; 0x30
 8001680:	f804 3b01 	strb.w	r3, [r4], #1
 8001684:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001686:	429c      	cmp	r4, r3
 8001688:	4606      	mov	r6, r0
 800168a:	460f      	mov	r7, r1
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	d124      	bne.n	80016dc <_dtoa_r+0x64c>
 8001692:	4ba4      	ldr	r3, [pc, #656]	; (8001924 <_dtoa_r+0x894>)
 8001694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001698:	f7fe fdd8 	bl	800024c <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4630      	mov	r0, r6
 80016a2:	4639      	mov	r1, r7
 80016a4:	f7ff fa18 	bl	8000ad8 <__aeabi_dcmpgt>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d163      	bne.n	8001774 <_dtoa_r+0x6e4>
 80016ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80016b0:	499c      	ldr	r1, [pc, #624]	; (8001924 <_dtoa_r+0x894>)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7fe fdc8 	bl	8000248 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4630      	mov	r0, r6
 80016be:	4639      	mov	r1, r7
 80016c0:	f7ff f9ec 	bl	8000a9c <__aeabi_dcmplt>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f43f af1d 	beq.w	8001504 <_dtoa_r+0x474>
 80016ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80016cc:	1e7b      	subs	r3, r7, #1
 80016ce:	9314      	str	r3, [sp, #80]	; 0x50
 80016d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80016d4:	2b30      	cmp	r3, #48	; 0x30
 80016d6:	d0f8      	beq.n	80016ca <_dtoa_r+0x63a>
 80016d8:	46c2      	mov	sl, r8
 80016da:	e03b      	b.n	8001754 <_dtoa_r+0x6c4>
 80016dc:	4b92      	ldr	r3, [pc, #584]	; (8001928 <_dtoa_r+0x898>)
 80016de:	f7fe ff6b 	bl	80005b8 <__aeabi_dmul>
 80016e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80016e6:	e7bc      	b.n	8001662 <_dtoa_r+0x5d2>
 80016e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80016ec:	9f03      	ldr	r7, [sp, #12]
 80016ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80016f2:	4640      	mov	r0, r8
 80016f4:	4649      	mov	r1, r9
 80016f6:	f7ff f889 	bl	800080c <__aeabi_ddiv>
 80016fa:	f7ff f9f7 	bl	8000aec <__aeabi_d2iz>
 80016fe:	4604      	mov	r4, r0
 8001700:	f7fe fef0 	bl	80004e4 <__aeabi_i2d>
 8001704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001708:	f7fe ff56 	bl	80005b8 <__aeabi_dmul>
 800170c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4640      	mov	r0, r8
 8001716:	4649      	mov	r1, r9
 8001718:	f7fe fd96 	bl	8000248 <__aeabi_dsub>
 800171c:	f807 6b01 	strb.w	r6, [r7], #1
 8001720:	9e03      	ldr	r6, [sp, #12]
 8001722:	f8dd c020 	ldr.w	ip, [sp, #32]
 8001726:	1bbe      	subs	r6, r7, r6
 8001728:	45b4      	cmp	ip, r6
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	d136      	bne.n	800179e <_dtoa_r+0x70e>
 8001730:	f7fe fd8c 	bl	800024c <__adddf3>
 8001734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001738:	4680      	mov	r8, r0
 800173a:	4689      	mov	r9, r1
 800173c:	f7ff f9cc 	bl	8000ad8 <__aeabi_dcmpgt>
 8001740:	bb58      	cbnz	r0, 800179a <_dtoa_r+0x70a>
 8001742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001746:	4640      	mov	r0, r8
 8001748:	4649      	mov	r1, r9
 800174a:	f7ff f99d 	bl	8000a88 <__aeabi_dcmpeq>
 800174e:	b108      	cbz	r0, 8001754 <_dtoa_r+0x6c4>
 8001750:	07e1      	lsls	r1, r4, #31
 8001752:	d422      	bmi.n	800179a <_dtoa_r+0x70a>
 8001754:	4628      	mov	r0, r5
 8001756:	4659      	mov	r1, fp
 8001758:	f00e fe8e 	bl	8010478 <_Bfree>
 800175c:	2300      	movs	r3, #0
 800175e:	703b      	strb	r3, [r7, #0]
 8001760:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001762:	f10a 0001 	add.w	r0, sl, #1
 8001766:	6018      	str	r0, [r3, #0]
 8001768:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800176a:	2b00      	cmp	r3, #0
 800176c:	f43f acdd 	beq.w	800112a <_dtoa_r+0x9a>
 8001770:	601f      	str	r7, [r3, #0]
 8001772:	e4da      	b.n	800112a <_dtoa_r+0x9a>
 8001774:	4627      	mov	r7, r4
 8001776:	463b      	mov	r3, r7
 8001778:	461f      	mov	r7, r3
 800177a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800177e:	2a39      	cmp	r2, #57	; 0x39
 8001780:	d107      	bne.n	8001792 <_dtoa_r+0x702>
 8001782:	9a03      	ldr	r2, [sp, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d1f7      	bne.n	8001778 <_dtoa_r+0x6e8>
 8001788:	9903      	ldr	r1, [sp, #12]
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	f108 0801 	add.w	r8, r8, #1
 8001790:	700a      	strb	r2, [r1, #0]
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	3201      	adds	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e79e      	b.n	80016d8 <_dtoa_r+0x648>
 800179a:	46d0      	mov	r8, sl
 800179c:	e7eb      	b.n	8001776 <_dtoa_r+0x6e6>
 800179e:	4b62      	ldr	r3, [pc, #392]	; (8001928 <_dtoa_r+0x898>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f7fe ff09 	bl	80005b8 <__aeabi_dmul>
 80017a6:	2200      	movs	r2, #0
 80017a8:	2300      	movs	r3, #0
 80017aa:	4680      	mov	r8, r0
 80017ac:	4689      	mov	r9, r1
 80017ae:	f7ff f96b 	bl	8000a88 <__aeabi_dcmpeq>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d09b      	beq.n	80016ee <_dtoa_r+0x65e>
 80017b6:	e7cd      	b.n	8001754 <_dtoa_r+0x6c4>
 80017b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	f000 80d0 	beq.w	8001960 <_dtoa_r+0x8d0>
 80017c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80017c2:	2a01      	cmp	r2, #1
 80017c4:	f300 80b2 	bgt.w	800192c <_dtoa_r+0x89c>
 80017c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	f000 80a6 	beq.w	800191c <_dtoa_r+0x88c>
 80017d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80017d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80017d6:	9f06      	ldr	r7, [sp, #24]
 80017d8:	9a06      	ldr	r2, [sp, #24]
 80017da:	441a      	add	r2, r3
 80017dc:	9206      	str	r2, [sp, #24]
 80017de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e0:	2101      	movs	r1, #1
 80017e2:	441a      	add	r2, r3
 80017e4:	4628      	mov	r0, r5
 80017e6:	9209      	str	r2, [sp, #36]	; 0x24
 80017e8:	f00e feae 	bl	8010548 <__i2b>
 80017ec:	4606      	mov	r6, r0
 80017ee:	2f00      	cmp	r7, #0
 80017f0:	dd0c      	ble.n	800180c <_dtoa_r+0x77c>
 80017f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd09      	ble.n	800180c <_dtoa_r+0x77c>
 80017f8:	42bb      	cmp	r3, r7
 80017fa:	9a06      	ldr	r2, [sp, #24]
 80017fc:	bfa8      	it	ge
 80017fe:	463b      	movge	r3, r7
 8001800:	1ad2      	subs	r2, r2, r3
 8001802:	9206      	str	r2, [sp, #24]
 8001804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001806:	1aff      	subs	r7, r7, r3
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	9309      	str	r3, [sp, #36]	; 0x24
 800180c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800180e:	b1f3      	cbz	r3, 800184e <_dtoa_r+0x7be>
 8001810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a8 	beq.w	8001968 <_dtoa_r+0x8d8>
 8001818:	2c00      	cmp	r4, #0
 800181a:	dd10      	ble.n	800183e <_dtoa_r+0x7ae>
 800181c:	4631      	mov	r1, r6
 800181e:	4622      	mov	r2, r4
 8001820:	4628      	mov	r0, r5
 8001822:	f00e ff4f 	bl	80106c4 <__pow5mult>
 8001826:	465a      	mov	r2, fp
 8001828:	4601      	mov	r1, r0
 800182a:	4606      	mov	r6, r0
 800182c:	4628      	mov	r0, r5
 800182e:	f00e fea1 	bl	8010574 <__multiply>
 8001832:	4659      	mov	r1, fp
 8001834:	4680      	mov	r8, r0
 8001836:	4628      	mov	r0, r5
 8001838:	f00e fe1e 	bl	8010478 <_Bfree>
 800183c:	46c3      	mov	fp, r8
 800183e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001840:	1b1a      	subs	r2, r3, r4
 8001842:	d004      	beq.n	800184e <_dtoa_r+0x7be>
 8001844:	4659      	mov	r1, fp
 8001846:	4628      	mov	r0, r5
 8001848:	f00e ff3c 	bl	80106c4 <__pow5mult>
 800184c:	4683      	mov	fp, r0
 800184e:	2101      	movs	r1, #1
 8001850:	4628      	mov	r0, r5
 8001852:	f00e fe79 	bl	8010548 <__i2b>
 8001856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001858:	2b00      	cmp	r3, #0
 800185a:	4604      	mov	r4, r0
 800185c:	f340 8086 	ble.w	800196c <_dtoa_r+0x8dc>
 8001860:	461a      	mov	r2, r3
 8001862:	4601      	mov	r1, r0
 8001864:	4628      	mov	r0, r5
 8001866:	f00e ff2d 	bl	80106c4 <__pow5mult>
 800186a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800186c:	2b01      	cmp	r3, #1
 800186e:	4604      	mov	r4, r0
 8001870:	dd7f      	ble.n	8001972 <_dtoa_r+0x8e2>
 8001872:	f04f 0800 	mov.w	r8, #0
 8001876:	6923      	ldr	r3, [r4, #16]
 8001878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800187c:	6918      	ldr	r0, [r3, #16]
 800187e:	f00f fd94 	bl	80113aa <__hi0bits>
 8001882:	f1c0 0020 	rsb	r0, r0, #32
 8001886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001888:	4418      	add	r0, r3
 800188a:	f010 001f 	ands.w	r0, r0, #31
 800188e:	f000 8092 	beq.w	80019b6 <_dtoa_r+0x926>
 8001892:	f1c0 0320 	rsb	r3, r0, #32
 8001896:	2b04      	cmp	r3, #4
 8001898:	f340 808a 	ble.w	80019b0 <_dtoa_r+0x920>
 800189c:	f1c0 001c 	rsb	r0, r0, #28
 80018a0:	9b06      	ldr	r3, [sp, #24]
 80018a2:	4403      	add	r3, r0
 80018a4:	9306      	str	r3, [sp, #24]
 80018a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018a8:	4403      	add	r3, r0
 80018aa:	4407      	add	r7, r0
 80018ac:	9309      	str	r3, [sp, #36]	; 0x24
 80018ae:	9b06      	ldr	r3, [sp, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	dd05      	ble.n	80018c0 <_dtoa_r+0x830>
 80018b4:	4659      	mov	r1, fp
 80018b6:	461a      	mov	r2, r3
 80018b8:	4628      	mov	r0, r5
 80018ba:	f00e ff5d 	bl	8010778 <__lshift>
 80018be:	4683      	mov	fp, r0
 80018c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dd05      	ble.n	80018d2 <_dtoa_r+0x842>
 80018c6:	4621      	mov	r1, r4
 80018c8:	461a      	mov	r2, r3
 80018ca:	4628      	mov	r0, r5
 80018cc:	f00e ff54 	bl	8010778 <__lshift>
 80018d0:	4604      	mov	r4, r0
 80018d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d070      	beq.n	80019ba <_dtoa_r+0x92a>
 80018d8:	4621      	mov	r1, r4
 80018da:	4658      	mov	r0, fp
 80018dc:	f00f fdb2 	bl	8011444 <__mcmp>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	da6a      	bge.n	80019ba <_dtoa_r+0x92a>
 80018e4:	2300      	movs	r3, #0
 80018e6:	4659      	mov	r1, fp
 80018e8:	220a      	movs	r2, #10
 80018ea:	4628      	mov	r0, r5
 80018ec:	f00e fde6 	bl	80104bc <__multadd>
 80018f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80018f6:	4683      	mov	fp, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8194 	beq.w	8001c26 <_dtoa_r+0xb96>
 80018fe:	4631      	mov	r1, r6
 8001900:	2300      	movs	r3, #0
 8001902:	220a      	movs	r2, #10
 8001904:	4628      	mov	r0, r5
 8001906:	f00e fdd9 	bl	80104bc <__multadd>
 800190a:	f1b9 0f00 	cmp.w	r9, #0
 800190e:	4606      	mov	r6, r0
 8001910:	f300 8093 	bgt.w	8001a3a <_dtoa_r+0x9aa>
 8001914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001916:	2b02      	cmp	r3, #2
 8001918:	dc57      	bgt.n	80019ca <_dtoa_r+0x93a>
 800191a:	e08e      	b.n	8001a3a <_dtoa_r+0x9aa>
 800191c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800191e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001922:	e757      	b.n	80017d4 <_dtoa_r+0x744>
 8001924:	3fe00000 	.word	0x3fe00000
 8001928:	40240000 	.word	0x40240000
 800192c:	9b08      	ldr	r3, [sp, #32]
 800192e:	1e5c      	subs	r4, r3, #1
 8001930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001932:	42a3      	cmp	r3, r4
 8001934:	bfbf      	itttt	lt
 8001936:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001938:	940a      	strlt	r4, [sp, #40]	; 0x28
 800193a:	1ae2      	sublt	r2, r4, r3
 800193c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800193e:	bfb6      	itet	lt
 8001940:	189b      	addlt	r3, r3, r2
 8001942:	1b1c      	subge	r4, r3, r4
 8001944:	930e      	strlt	r3, [sp, #56]	; 0x38
 8001946:	9b08      	ldr	r3, [sp, #32]
 8001948:	bfb8      	it	lt
 800194a:	2400      	movlt	r4, #0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bfb9      	ittee	lt
 8001950:	9b06      	ldrlt	r3, [sp, #24]
 8001952:	9a08      	ldrlt	r2, [sp, #32]
 8001954:	9f06      	ldrge	r7, [sp, #24]
 8001956:	9b08      	ldrge	r3, [sp, #32]
 8001958:	bfbc      	itt	lt
 800195a:	1a9f      	sublt	r7, r3, r2
 800195c:	2300      	movlt	r3, #0
 800195e:	e73b      	b.n	80017d8 <_dtoa_r+0x748>
 8001960:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001962:	9f06      	ldr	r7, [sp, #24]
 8001964:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001966:	e742      	b.n	80017ee <_dtoa_r+0x75e>
 8001968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800196a:	e76b      	b.n	8001844 <_dtoa_r+0x7b4>
 800196c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800196e:	2b01      	cmp	r3, #1
 8001970:	dc19      	bgt.n	80019a6 <_dtoa_r+0x916>
 8001972:	9b04      	ldr	r3, [sp, #16]
 8001974:	b9bb      	cbnz	r3, 80019a6 <_dtoa_r+0x916>
 8001976:	9b05      	ldr	r3, [sp, #20]
 8001978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197c:	b99b      	cbnz	r3, 80019a6 <_dtoa_r+0x916>
 800197e:	9b05      	ldr	r3, [sp, #20]
 8001980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001984:	0d1b      	lsrs	r3, r3, #20
 8001986:	051b      	lsls	r3, r3, #20
 8001988:	b183      	cbz	r3, 80019ac <_dtoa_r+0x91c>
 800198a:	9b06      	ldr	r3, [sp, #24]
 800198c:	3301      	adds	r3, #1
 800198e:	9306      	str	r3, [sp, #24]
 8001990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001992:	3301      	adds	r3, #1
 8001994:	9309      	str	r3, [sp, #36]	; 0x24
 8001996:	f04f 0801 	mov.w	r8, #1
 800199a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800199c:	2b00      	cmp	r3, #0
 800199e:	f47f af6a 	bne.w	8001876 <_dtoa_r+0x7e6>
 80019a2:	2001      	movs	r0, #1
 80019a4:	e76f      	b.n	8001886 <_dtoa_r+0x7f6>
 80019a6:	f04f 0800 	mov.w	r8, #0
 80019aa:	e7f6      	b.n	800199a <_dtoa_r+0x90a>
 80019ac:	4698      	mov	r8, r3
 80019ae:	e7f4      	b.n	800199a <_dtoa_r+0x90a>
 80019b0:	f43f af7d 	beq.w	80018ae <_dtoa_r+0x81e>
 80019b4:	4618      	mov	r0, r3
 80019b6:	301c      	adds	r0, #28
 80019b8:	e772      	b.n	80018a0 <_dtoa_r+0x810>
 80019ba:	9b08      	ldr	r3, [sp, #32]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	dc36      	bgt.n	8001a2e <_dtoa_r+0x99e>
 80019c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	dd33      	ble.n	8001a2e <_dtoa_r+0x99e>
 80019c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019ca:	f1b9 0f00 	cmp.w	r9, #0
 80019ce:	d10d      	bne.n	80019ec <_dtoa_r+0x95c>
 80019d0:	4621      	mov	r1, r4
 80019d2:	464b      	mov	r3, r9
 80019d4:	2205      	movs	r2, #5
 80019d6:	4628      	mov	r0, r5
 80019d8:	f00e fd70 	bl	80104bc <__multadd>
 80019dc:	4601      	mov	r1, r0
 80019de:	4604      	mov	r4, r0
 80019e0:	4658      	mov	r0, fp
 80019e2:	f00f fd2f 	bl	8011444 <__mcmp>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	f73f adb8 	bgt.w	800155c <_dtoa_r+0x4cc>
 80019ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80019ee:	9f03      	ldr	r7, [sp, #12]
 80019f0:	ea6f 0a03 	mvn.w	sl, r3
 80019f4:	f04f 0800 	mov.w	r8, #0
 80019f8:	4621      	mov	r1, r4
 80019fa:	4628      	mov	r0, r5
 80019fc:	f00e fd3c 	bl	8010478 <_Bfree>
 8001a00:	2e00      	cmp	r6, #0
 8001a02:	f43f aea7 	beq.w	8001754 <_dtoa_r+0x6c4>
 8001a06:	f1b8 0f00 	cmp.w	r8, #0
 8001a0a:	d005      	beq.n	8001a18 <_dtoa_r+0x988>
 8001a0c:	45b0      	cmp	r8, r6
 8001a0e:	d003      	beq.n	8001a18 <_dtoa_r+0x988>
 8001a10:	4641      	mov	r1, r8
 8001a12:	4628      	mov	r0, r5
 8001a14:	f00e fd30 	bl	8010478 <_Bfree>
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f00e fd2c 	bl	8010478 <_Bfree>
 8001a20:	e698      	b.n	8001754 <_dtoa_r+0x6c4>
 8001a22:	2400      	movs	r4, #0
 8001a24:	4626      	mov	r6, r4
 8001a26:	e7e1      	b.n	80019ec <_dtoa_r+0x95c>
 8001a28:	46c2      	mov	sl, r8
 8001a2a:	4626      	mov	r6, r4
 8001a2c:	e596      	b.n	800155c <_dtoa_r+0x4cc>
 8001a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80fd 	beq.w	8001c34 <_dtoa_r+0xba4>
 8001a3a:	2f00      	cmp	r7, #0
 8001a3c:	dd05      	ble.n	8001a4a <_dtoa_r+0x9ba>
 8001a3e:	4631      	mov	r1, r6
 8001a40:	463a      	mov	r2, r7
 8001a42:	4628      	mov	r0, r5
 8001a44:	f00e fe98 	bl	8010778 <__lshift>
 8001a48:	4606      	mov	r6, r0
 8001a4a:	f1b8 0f00 	cmp.w	r8, #0
 8001a4e:	d05c      	beq.n	8001b0a <_dtoa_r+0xa7a>
 8001a50:	6871      	ldr	r1, [r6, #4]
 8001a52:	4628      	mov	r0, r5
 8001a54:	f00e fcd0 	bl	80103f8 <_Balloc>
 8001a58:	4607      	mov	r7, r0
 8001a5a:	b928      	cbnz	r0, 8001a68 <_dtoa_r+0x9d8>
 8001a5c:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <_dtoa_r+0xbd0>)
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8001a64:	f7ff bb28 	b.w	80010b8 <_dtoa_r+0x28>
 8001a68:	6932      	ldr	r2, [r6, #16]
 8001a6a:	3202      	adds	r2, #2
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	f106 010c 	add.w	r1, r6, #12
 8001a72:	300c      	adds	r0, #12
 8001a74:	f00f fa20 	bl	8010eb8 <memcpy>
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4639      	mov	r1, r7
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f00e fe7b 	bl	8010778 <__lshift>
 8001a82:	9b03      	ldr	r3, [sp, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	9308      	str	r3, [sp, #32]
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	444b      	add	r3, r9
 8001a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8001a8e:	9b04      	ldr	r3, [sp, #16]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	46b0      	mov	r8, r6
 8001a96:	9309      	str	r3, [sp, #36]	; 0x24
 8001a98:	4606      	mov	r6, r0
 8001a9a:	9b08      	ldr	r3, [sp, #32]
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	4658      	mov	r0, fp
 8001aa2:	9304      	str	r3, [sp, #16]
 8001aa4:	f00f fba0 	bl	80111e8 <quorem>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	9006      	str	r0, [sp, #24]
 8001aae:	4641      	mov	r1, r8
 8001ab0:	4658      	mov	r0, fp
 8001ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ab4:	f00f fcc6 	bl	8011444 <__mcmp>
 8001ab8:	4632      	mov	r2, r6
 8001aba:	4681      	mov	r9, r0
 8001abc:	4621      	mov	r1, r4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f00e feca 	bl	8010858 <__mdiff>
 8001ac4:	68c2      	ldr	r2, [r0, #12]
 8001ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ac8:	4607      	mov	r7, r0
 8001aca:	bb02      	cbnz	r2, 8001b0e <_dtoa_r+0xa7e>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4658      	mov	r0, fp
 8001ad0:	f00f fcb8 	bl	8011444 <__mcmp>
 8001ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4639      	mov	r1, r7
 8001ada:	4628      	mov	r0, r5
 8001adc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001ae0:	f00e fcca 	bl	8010478 <_Bfree>
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ae8:	9f08      	ldr	r7, [sp, #32]
 8001aea:	ea43 0102 	orr.w	r1, r3, r2
 8001aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001af0:	430b      	orrs	r3, r1
 8001af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001af4:	d10d      	bne.n	8001b12 <_dtoa_r+0xa82>
 8001af6:	2b39      	cmp	r3, #57	; 0x39
 8001af8:	d029      	beq.n	8001b4e <_dtoa_r+0xabe>
 8001afa:	f1b9 0f00 	cmp.w	r9, #0
 8001afe:	dd01      	ble.n	8001b04 <_dtoa_r+0xa74>
 8001b00:	9b06      	ldr	r3, [sp, #24]
 8001b02:	3331      	adds	r3, #49	; 0x31
 8001b04:	9a04      	ldr	r2, [sp, #16]
 8001b06:	7013      	strb	r3, [r2, #0]
 8001b08:	e776      	b.n	80019f8 <_dtoa_r+0x968>
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	e7b9      	b.n	8001a82 <_dtoa_r+0x9f2>
 8001b0e:	2201      	movs	r2, #1
 8001b10:	e7e2      	b.n	8001ad8 <_dtoa_r+0xa48>
 8001b12:	f1b9 0f00 	cmp.w	r9, #0
 8001b16:	db06      	blt.n	8001b26 <_dtoa_r+0xa96>
 8001b18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001b1a:	ea41 0909 	orr.w	r9, r1, r9
 8001b1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001b20:	ea59 0101 	orrs.w	r1, r9, r1
 8001b24:	d120      	bne.n	8001b68 <_dtoa_r+0xad8>
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	ddec      	ble.n	8001b04 <_dtoa_r+0xa74>
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4628      	mov	r0, r5
 8001b30:	9308      	str	r3, [sp, #32]
 8001b32:	f00e fe21 	bl	8010778 <__lshift>
 8001b36:	4621      	mov	r1, r4
 8001b38:	4683      	mov	fp, r0
 8001b3a:	f00f fc83 	bl	8011444 <__mcmp>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	9b08      	ldr	r3, [sp, #32]
 8001b42:	dc02      	bgt.n	8001b4a <_dtoa_r+0xaba>
 8001b44:	d1de      	bne.n	8001b04 <_dtoa_r+0xa74>
 8001b46:	07da      	lsls	r2, r3, #31
 8001b48:	d5dc      	bpl.n	8001b04 <_dtoa_r+0xa74>
 8001b4a:	2b39      	cmp	r3, #57	; 0x39
 8001b4c:	d1d8      	bne.n	8001b00 <_dtoa_r+0xa70>
 8001b4e:	9a04      	ldr	r2, [sp, #16]
 8001b50:	2339      	movs	r3, #57	; 0x39
 8001b52:	7013      	strb	r3, [r2, #0]
 8001b54:	463b      	mov	r3, r7
 8001b56:	461f      	mov	r7, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001b5e:	2a39      	cmp	r2, #57	; 0x39
 8001b60:	d050      	beq.n	8001c04 <_dtoa_r+0xb74>
 8001b62:	3201      	adds	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e747      	b.n	80019f8 <_dtoa_r+0x968>
 8001b68:	2a00      	cmp	r2, #0
 8001b6a:	dd03      	ble.n	8001b74 <_dtoa_r+0xae4>
 8001b6c:	2b39      	cmp	r3, #57	; 0x39
 8001b6e:	d0ee      	beq.n	8001b4e <_dtoa_r+0xabe>
 8001b70:	3301      	adds	r3, #1
 8001b72:	e7c7      	b.n	8001b04 <_dtoa_r+0xa74>
 8001b74:	9a08      	ldr	r2, [sp, #32]
 8001b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001b7c:	428a      	cmp	r2, r1
 8001b7e:	d02a      	beq.n	8001bd6 <_dtoa_r+0xb46>
 8001b80:	4659      	mov	r1, fp
 8001b82:	2300      	movs	r3, #0
 8001b84:	220a      	movs	r2, #10
 8001b86:	4628      	mov	r0, r5
 8001b88:	f00e fc98 	bl	80104bc <__multadd>
 8001b8c:	45b0      	cmp	r8, r6
 8001b8e:	4683      	mov	fp, r0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	f04f 020a 	mov.w	r2, #10
 8001b98:	4641      	mov	r1, r8
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	d107      	bne.n	8001bae <_dtoa_r+0xb1e>
 8001b9e:	f00e fc8d 	bl	80104bc <__multadd>
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	4606      	mov	r6, r0
 8001ba6:	9b08      	ldr	r3, [sp, #32]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	9308      	str	r3, [sp, #32]
 8001bac:	e775      	b.n	8001a9a <_dtoa_r+0xa0a>
 8001bae:	f00e fc85 	bl	80104bc <__multadd>
 8001bb2:	4631      	mov	r1, r6
 8001bb4:	4680      	mov	r8, r0
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	220a      	movs	r2, #10
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f00e fc7e 	bl	80104bc <__multadd>
 8001bc0:	4606      	mov	r6, r0
 8001bc2:	e7f0      	b.n	8001ba6 <_dtoa_r+0xb16>
 8001bc4:	f1b9 0f00 	cmp.w	r9, #0
 8001bc8:	9a03      	ldr	r2, [sp, #12]
 8001bca:	bfcc      	ite	gt
 8001bcc:	464f      	movgt	r7, r9
 8001bce:	2701      	movle	r7, #1
 8001bd0:	4417      	add	r7, r2
 8001bd2:	f04f 0800 	mov.w	r8, #0
 8001bd6:	4659      	mov	r1, fp
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4628      	mov	r0, r5
 8001bdc:	9308      	str	r3, [sp, #32]
 8001bde:	f00e fdcb 	bl	8010778 <__lshift>
 8001be2:	4621      	mov	r1, r4
 8001be4:	4683      	mov	fp, r0
 8001be6:	f00f fc2d 	bl	8011444 <__mcmp>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	dcb2      	bgt.n	8001b54 <_dtoa_r+0xac4>
 8001bee:	d102      	bne.n	8001bf6 <_dtoa_r+0xb66>
 8001bf0:	9b08      	ldr	r3, [sp, #32]
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	d4ae      	bmi.n	8001b54 <_dtoa_r+0xac4>
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	461f      	mov	r7, r3
 8001bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001bfe:	2a30      	cmp	r2, #48	; 0x30
 8001c00:	d0fa      	beq.n	8001bf8 <_dtoa_r+0xb68>
 8001c02:	e6f9      	b.n	80019f8 <_dtoa_r+0x968>
 8001c04:	9a03      	ldr	r2, [sp, #12]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d1a5      	bne.n	8001b56 <_dtoa_r+0xac6>
 8001c0a:	f10a 0a01 	add.w	sl, sl, #1
 8001c0e:	2331      	movs	r3, #49	; 0x31
 8001c10:	e779      	b.n	8001b06 <_dtoa_r+0xa76>
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <_dtoa_r+0xbd4>)
 8001c14:	f7ff baa7 	b.w	8001166 <_dtoa_r+0xd6>
 8001c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f aa80 	bne.w	8001120 <_dtoa_r+0x90>
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_dtoa_r+0xbd8>)
 8001c22:	f7ff baa0 	b.w	8001166 <_dtoa_r+0xd6>
 8001c26:	f1b9 0f00 	cmp.w	r9, #0
 8001c2a:	dc03      	bgt.n	8001c34 <_dtoa_r+0xba4>
 8001c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f73f aecb 	bgt.w	80019ca <_dtoa_r+0x93a>
 8001c34:	9f03      	ldr	r7, [sp, #12]
 8001c36:	4621      	mov	r1, r4
 8001c38:	4658      	mov	r0, fp
 8001c3a:	f00f fad5 	bl	80111e8 <quorem>
 8001c3e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001c42:	f807 3b01 	strb.w	r3, [r7], #1
 8001c46:	9a03      	ldr	r2, [sp, #12]
 8001c48:	1aba      	subs	r2, r7, r2
 8001c4a:	4591      	cmp	r9, r2
 8001c4c:	ddba      	ble.n	8001bc4 <_dtoa_r+0xb34>
 8001c4e:	4659      	mov	r1, fp
 8001c50:	2300      	movs	r3, #0
 8001c52:	220a      	movs	r2, #10
 8001c54:	4628      	mov	r0, r5
 8001c56:	f00e fc31 	bl	80104bc <__multadd>
 8001c5a:	4683      	mov	fp, r0
 8001c5c:	e7eb      	b.n	8001c36 <_dtoa_r+0xba6>
 8001c5e:	bf00      	nop
 8001c60:	08012de8 	.word	0x08012de8
 8001c64:	08012d46 	.word	0x08012d46
 8001c68:	08012d6a 	.word	0x08012d6a

08001c6c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop

08001c70 <_ZL23dwork_send_dist_handlerP6k_work>:
        }
    }
}

void dwork_send_dist_handler(struct k_work *item)
{
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c74:	b085      	sub	sp, #20
 8001c76:	2300      	movs	r3, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
 8001c78:	4c23      	ldr	r4, [pc, #140]	; (8001d08 <_ZL23dwork_send_dist_handlerP6k_work+0x98>)
 8001c7a:	9001      	str	r0, [sp, #4]
    uint8_t i, cnt = 0;
 8001c7c:	f88d 300f 	strb.w	r3, [sp, #15]
 8001c80:	e003      	b.n	8001c8a <_ZL23dwork_send_dist_handlerP6k_work+0x1a>
	return z_impl_k_sleep(timeout);
 8001c82:	200a      	movs	r0, #10
 8001c84:	2100      	movs	r1, #0
 8001c86:	f00c fc29 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f00b fc9a 	bl	800d5c8 <z_impl_k_mutex_lock>

    while (k_mutex_lock(&mtx_dwt_dist, K_NO_WAIT)) {
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d1f4      	bne.n	8001c82 <_ZL23dwork_send_dist_handlerP6k_work+0x12>
        k_sleep(K_MSEC(1));
    }

    while (i < NUMBER_OF_NODES) {
 8001c98:	4d1c      	ldr	r5, [pc, #112]	; (8001d0c <_ZL23dwork_send_dist_handlerP6k_work+0x9c>)
 8001c9a:	f89d a00f 	ldrb.w	sl, [sp, #15]
 8001c9e:	4e1c      	ldr	r6, [pc, #112]	; (8001d10 <_ZL23dwork_send_dist_handlerP6k_work+0xa0>)
        if (active_nodes[i] && (dist[i] <= MAX_RANGE_M) ) {
 8001ca0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001d14 <_ZL23dwork_send_dist_handlerP6k_work+0xa4>
    while (i < NUMBER_OF_NODES) {
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f105 0b08 	add.w	fp, r5, #8
        if (active_nodes[i] && (dist[i] <= MAX_RANGE_M) ) {
 8001caa:	f04f 0800 	mov.w	r8, #0
 8001cae:	f815 7f01 	ldrb.w	r7, [r5, #1]!
 8001cb2:	4642      	mov	r2, r8
 8001cb4:	464b      	mov	r3, r9
 8001cb6:	b167      	cbz	r7, 8001cd2 <_ZL23dwork_send_dist_handlerP6k_work+0x62>
 8001cb8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001cbc:	f7fe fef8 	bl	8000ab0 <__aeabi_dcmple>
 8001cc0:	b138      	cbz	r0, 8001cd2 <_ZL23dwork_send_dist_handlerP6k_work+0x62>
            active_nodes[i] = false;
            cnt++;
 8001cc2:	f10a 0a01 	add.w	sl, sl, #1
            active_nodes[i] = false;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	702b      	strb	r3, [r5, #0]
            cnt++;
 8001ccc:	fa5f fa8a 	uxtb.w	sl, sl
 8001cd0:	463c      	mov	r4, r7
    while (i < NUMBER_OF_NODES) {
 8001cd2:	455d      	cmp	r5, fp
 8001cd4:	f106 0608 	add.w	r6, r6, #8
 8001cd8:	d1e9      	bne.n	8001cae <_ZL23dwork_send_dist_handlerP6k_work+0x3e>
 8001cda:	b10c      	cbz	r4, 8001ce0 <_ZL23dwork_send_dist_handlerP6k_work+0x70>
 8001cdc:	f88d a00f 	strb.w	sl, [sp, #15]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <_ZL23dwork_send_dist_handlerP6k_work+0x98>)
 8001ce2:	f00b fcf5 	bl	800d6d0 <z_impl_k_mutex_unlock>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f10d 010f 	add.w	r1, sp, #15
 8001cec:	2300      	movs	r3, #0
 8001cee:	480a      	ldr	r0, [pc, #40]	; (8001d18 <_ZL23dwork_send_dist_handlerP6k_work+0xa8>)
 8001cf0:	f00b fb84 	bl	800d3fc <z_impl_k_msgq_put>
//    cnt = NUMBER_OF_NODES;

    k_mutex_unlock(&mtx_dwt_dist);

    k_msgq_put(&msgq_dwm_dist, &cnt, K_NO_WAIT);
    k_work_reschedule(k_work_delayable_from_work(item), K_SECONDS(PROCESSING_INTERVAL_SEC));
 8001cf4:	9801      	ldr	r0, [sp, #4]
 8001cf6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f00b ffa0 	bl	800dc40 <k_work_reschedule>
 8001d00:	b005      	add	sp, #20
 8001d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	20000780 	.word	0x20000780
 8001d0c:	20000d4f 	.word	0x20000d4f
 8001d10:	20000900 	.word	0x20000900
 8001d14:	40140000 	.word	0x40140000
 8001d18:	20000794 	.word	0x20000794

08001d1c <dwm_task>:
{
 8001d1c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001d20:	b0a5      	sub	sp, #148	; 0x94
    dwt_cb_data_t dwt_cb_data = {0};
 8001d22:	2100      	movs	r1, #0
    atomic_t atomic_twr_status = ATOMIC_INIT((atomic_t) msg_id_t::twr_3_final);
 8001d24:	2309      	movs	r3, #9
    struct k_work_delayable dwork_send_dist = {{{nullptr}}};
 8001d26:	2230      	movs	r2, #48	; 0x30
 8001d28:	a818      	add	r0, sp, #96	; 0x60
    dwt_cb_data_t dwt_cb_data = {0};
 8001d2a:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
    atomic_t atomic_twr_status = ATOMIC_INIT((atomic_t) msg_id_t::twr_3_final);
 8001d2e:	930b      	str	r3, [sp, #44]	; 0x2c
    dwt_cb_data_t dwt_cb_data = {0};
 8001d30:	9112      	str	r1, [sp, #72]	; 0x48
 8001d32:	4c61      	ldr	r4, [pc, #388]	; (8001eb8 <dwm_task+0x19c>)
    struct k_work_delayable dwork_send_dist = {{{nullptr}}};
 8001d34:	f00f f8e8 	bl	8010f08 <memset>
 8001d38:	e003      	b.n	8001d42 <dwm_task+0x26>
	return z_impl_k_sleep(timeout);
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f00c fbcd 	bl	800e4dc <z_impl_k_sleep>
 8001d42:	4620      	mov	r0, r4
 8001d44:	f00b f96a 	bl	800d01c <z_device_is_ready>
    while(!device_is_ready(dwm_dev)) {
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d0f6      	beq.n	8001d3a <dwm_task+0x1e>
    k_work_init_delayable(&dwork_send_dist, dwork_send_dist_handler);
 8001d4c:	a818      	add	r0, sp, #96	; 0x60
 8001d4e:	495b      	ldr	r1, [pc, #364]	; (8001ebc <dwm_task+0x1a0>)
 8001d50:	f00b ff3c 	bl	800dbcc <k_work_init_delayable>
    dwt_setcallbacks(nullptr, rx_ok_cb, rx_to_cb, rx_err_cb);
 8001d54:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <dwm_task+0x1a4>)
 8001d56:	4a5b      	ldr	r2, [pc, #364]	; (8001ec4 <dwm_task+0x1a8>)
 8001d58:	495b      	ldr	r1, [pc, #364]	; (8001ec8 <dwm_task+0x1ac>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f007 ffbc 	bl	8009cd8 <dwt_setcallbacks>
    dwt_setinterrupt((DWT_INT_RFCG | DWT_INT_RPHE | DWT_INT_RFCE | DWT_INT_RFSL | DWT_INT_RFTO
 8001d60:	485a      	ldr	r0, [pc, #360]	; (8001ecc <dwm_task+0x1b0>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	f008 f9ac 	bl	800a0c0 <dwt_setinterrupt>
	z_impl_k_yield();
 8001d68:	f00c fb1a 	bl	800e3a0 <z_impl_k_yield>
    k_work_schedule(&dwork_send_dist, K_SECONDS(PROCESSING_INTERVAL_SEC));
 8001d6c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d70:	2300      	movs	r3, #0
 8001d72:	a818      	add	r0, sp, #96	; 0x60
 8001d74:	f00b ff36 	bl	800dbe4 <k_work_schedule>
    resp_twr_1_poll_ds_twr(&atomic_twr_status);
 8001d78:	a80b      	add	r0, sp, #44	; 0x2c
 8001d7a:	f00a ff29 	bl	800cbd0 <resp_twr_1_poll_ds_twr>
    uint64_t poll_rx_ts = 0;
 8001d7e:	2700      	movs	r7, #0
 8001d80:	4c53      	ldr	r4, [pc, #332]	; (8001ed0 <dwm_task+0x1b4>)
 8001d82:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001ed4 <dwm_task+0x1b8>
 8001d86:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8001ed8 <dwm_task+0x1bc>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001d8a:	4d54      	ldr	r5, [pc, #336]	; (8001edc <dwm_task+0x1c0>)
 8001d8c:	463e      	mov	r6, r7
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2300      	movs	r3, #0
 8001d92:	2101      	movs	r1, #1
 8001d94:	4620      	mov	r0, r4
 8001d96:	f00d f99d 	bl	800f0d4 <z_impl_k_poll>
        while (k_poll(&ev_dwm[0], 1, K_NO_WAIT)) {
 8001d9a:	b120      	cbz	r0, 8001da6 <dwm_task+0x8a>
	return z_impl_k_sleep(timeout);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f00c fb9c 	bl	800e4dc <z_impl_k_sleep>
 8001da4:	e7f3      	b.n	8001d8e <dwm_task+0x72>
        if (ev_dwm[0].state != K_POLL_STATE_SIGNALED) {
 8001da6:	68e3      	ldr	r3, [r4, #12]
 8001da8:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
 8001dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db0:	d1ed      	bne.n	8001d8e <dwm_task+0x72>
        ev_dwm[0].signal->signaled = 0;
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	6098      	str	r0, [r3, #8]
        ev_dwm[0].state = K_POLL_STATE_NOT_READY;
 8001db6:	68e3      	ldr	r3, [r4, #12]
 8001db8:	f360 3352 	bfi	r3, r0, #13, #6
 8001dbc:	60e3      	str	r3, [r4, #12]
 8001dbe:	e003      	b.n	8001dc8 <dwm_task+0xac>
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f00c fb8a 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2300      	movs	r3, #0
 8001dcc:	a910      	add	r1, sp, #64	; 0x40
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f00b fb70 	bl	800d4b4 <z_impl_k_msgq_get>
        while(k_msgq_get(&msgq_dwt_callback_data, &dwt_cb_data, K_NO_WAIT)) {
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d1f3      	bne.n	8001dc0 <dwm_task+0xa4>
        switch (ev_dwm[0].signal->result) {
 8001dd8:	6923      	ldr	r3, [r4, #16]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	4680      	mov	r8, r0
 8001de0:	d006      	beq.n	8001df0 <dwm_task+0xd4>
 8001de2:	3b03      	subs	r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d8d2      	bhi.n	8001d8e <dwm_task+0x72>
                    resp_twr_1_poll_ds_twr(&atomic_twr_status);
 8001de8:	a80b      	add	r0, sp, #44	; 0x2c
 8001dea:	f00a fef1 	bl	800cbd0 <resp_twr_1_poll_ds_twr>
 8001dee:	e7ce      	b.n	8001d8e <dwm_task+0x72>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001df0:	f3bf 8f5b 	dmb	ish
 8001df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001df6:	f3bf 8f5b 	dmb	ish
                if (atomic_get(&atomic_twr_status) == ((atomic_t) msg_id_t::twr_3_final)) {
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	d037      	beq.n	8001e6e <dwm_task+0x152>
 8001dfe:	f3bf 8f5b 	dmb	ish
 8001e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e04:	f3bf 8f5b 	dmb	ish
                } else if (atomic_get(&atomic_twr_status) == ((atomic_t) msg_id_t::twr_2_resp)) {
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d1c0      	bne.n	8001d8e <dwm_task+0x72>
                    if (!check_correct_recv(&final_msg, sizeof(final_msg), dwt_cb_data.datalength)) {
 8001e0c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8001e10:	2114      	movs	r1, #20
 8001e12:	a813      	add	r0, sp, #76	; 0x4c
 8001e14:	f00a fed0 	bl	800cbb8 <check_correct_recv>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d0e5      	beq.n	8001de8 <dwm_task+0xcc>
                    resp_tx_ts  = get_tx_timestamp_u64();
 8001e1c:	f009 fa32 	bl	800b284 <_Z20get_tx_timestamp_u64v>
 8001e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
                    final_rx_ts = get_rx_timestamp_u64();
 8001e24:	f009 fa44 	bl	800b2b0 <_Z20get_rx_timestamp_u64v>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001e28:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001ee0 <dwm_task+0x1c4>
 8001e2c:	9107      	str	r1, [sp, #28]
 8001e2e:	4683      	mov	fp, r0
 8001e30:	e003      	b.n	8001e3a <dwm_task+0x11e>
	return z_impl_k_sleep(timeout);
 8001e32:	200a      	movs	r0, #10
 8001e34:	2100      	movs	r1, #0
 8001e36:	f00c fb51 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f00b fbc2 	bl	800d5c8 <z_impl_k_mutex_lock>
                    while(k_mutex_lock(&mtx_dwt_dist, K_NO_WAIT)) {
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d1f4      	bne.n	8001e32 <dwm_task+0x116>
                    resp_final_msg_poll_ds_twr(&final_msg, poll_rx_ts, resp_tx_ts, final_rx_ts, dist, active_nodes);
 8001e48:	9b07      	ldr	r3, [sp, #28]
 8001e4a:	9303      	str	r3, [sp, #12]
 8001e4c:	9b08      	ldr	r3, [sp, #32]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	e9cd 9a04 	strd	r9, sl, [sp, #16]
 8001e58:	f8cd b008 	str.w	fp, [sp, #8]
 8001e5c:	463a      	mov	r2, r7
 8001e5e:	4633      	mov	r3, r6
 8001e60:	a813      	add	r0, sp, #76	; 0x4c
 8001e62:	f00a ff13 	bl	800cc8c <resp_final_msg_poll_ds_twr>
	return z_impl_k_mutex_unlock(mutex);
 8001e66:	481e      	ldr	r0, [pc, #120]	; (8001ee0 <dwm_task+0x1c4>)
 8001e68:	f00b fc32 	bl	800d6d0 <z_impl_k_mutex_unlock>
 8001e6c:	e7bc      	b.n	8001de8 <dwm_task+0xcc>
                    if (!check_correct_recv(&rx_poll_msg, sizeof(rx_poll_msg), dwt_cb_data.datalength)) {
 8001e6e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8001e72:	2106      	movs	r1, #6
 8001e74:	a80c      	add	r0, sp, #48	; 0x30
 8001e76:	f00a fe9f 	bl	800cbb8 <check_correct_recv>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d0b4      	beq.n	8001de8 <dwm_task+0xcc>
                    poll_rx_ts = get_rx_timestamp_u64();
 8001e7e:	f009 fa17 	bl	800b2b0 <_Z20get_rx_timestamp_u64v>
                    resp_twr_2_resp_ds_twr(&rx_poll_msg, poll_rx_ts, &tx_resp_msg, &atomic_twr_status);
 8001e82:	ab0b      	add	r3, sp, #44	; 0x2c
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	ab0e      	add	r3, sp, #56	; 0x38
 8001e88:	9300      	str	r3, [sp, #0]
                       (uint8_t) (rx_poll_msg.header.sequence + 1),
 8001e8a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
                    tx_resp_msg = {
 8001e8e:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
                       (uint8_t) (rx_poll_msg.header.sequence + 1),
 8001e92:	3301      	adds	r3, #1
                    tx_resp_msg = {
 8001e94:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8001e98:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8001e9c:	ba5b      	rev16	r3, r3
 8001e9e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8001ea2:	2308      	movs	r3, #8
                    poll_rx_ts = get_rx_timestamp_u64();
 8001ea4:	4607      	mov	r7, r0
                    tx_resp_msg = {
 8001ea6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                    resp_twr_2_resp_ds_twr(&rx_poll_msg, poll_rx_ts, &tx_resp_msg, &atomic_twr_status);
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	a80c      	add	r0, sp, #48	; 0x30
                    poll_rx_ts = get_rx_timestamp_u64();
 8001eb0:	460e      	mov	r6, r1
                    resp_twr_2_resp_ds_twr(&rx_poll_msg, poll_rx_ts, &tx_resp_msg, &atomic_twr_status);
 8001eb2:	f00a feb1 	bl	800cc18 <resp_twr_2_resp_ds_twr>
 8001eb6:	e76a      	b.n	8001d8e <dwm_task+0x72>
 8001eb8:	0801189c 	.word	0x0801189c
 8001ebc:	08001c71 	.word	0x08001c71
 8001ec0:	0800cbad 	.word	0x0800cbad
 8001ec4:	0800cba1 	.word	0x0800cba1
 8001ec8:	0800cb75 	.word	0x0800cb75
 8001ecc:	2423d000 	.word	0x2423d000
 8001ed0:	200003c0 	.word	0x200003c0
 8001ed4:	20000d50 	.word	0x20000d50
 8001ed8:	20000900 	.word	0x20000900
 8001edc:	200007c8 	.word	0x200007c8
 8001ee0:	20000780 	.word	0x20000780

08001ee4 <proc_task>:
    tim_start(K_NO_WAIT, K_MSEC(PERIOD_TIME_MSEC));
}


[[noreturn]] void proc_task()
{
 8001ee4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001ee8:	b08b      	sub	sp, #44	; 0x2c
    uint8_t rssi_num = 0;
    uint8_t workers_in_safe_zone = 0;
 8001eea:	2300      	movs	r3, #0
    uint8_t alarm_addr = 0;
    int16_t rssi = 0;
    uint8_t rx_buf[MESSAGE_LEN_IN_BYTES];
    struct message_s rx_msg = {0};
    struct message_s tx_msg = {
 8001eec:	2204      	movs	r2, #4
 8001eee:	4f64      	ldr	r7, [pc, #400]	; (8002080 <proc_task+0x19c>)
 8001ef0:	4e64      	ldr	r6, [pc, #400]	; (8002084 <proc_task+0x1a0>)
 8001ef2:	4d65      	ldr	r5, [pc, #404]	; (8002088 <proc_task+0x1a4>)
 8001ef4:	f8df a194 	ldr.w	sl, [pc, #404]	; 800208c <proc_task+0x1a8>
 8001ef8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8002090 <proc_task+0x1ac>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001efc:	4c65      	ldr	r4, [pc, #404]	; (8002094 <proc_task+0x1b0>)
 8001efe:	9308      	str	r3, [sp, #32]
    uint8_t workers_in_safe_zone = 0;
 8001f00:	f88d 300f 	strb.w	r3, [sp, #15]
    struct message_s rx_msg = {0};
 8001f04:	9306      	str	r3, [sp, #24]
 8001f06:	f8ad 301c 	strh.w	r3, [sp, #28]
    struct message_s tx_msg = {
 8001f0a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8001f0e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
      .direction = RESPONSE,
      .battery_level = BATTERY_LEVEL_GOOD,
      .workers_in_safe_zone = workers_in_safe_zone

    };
    struct led_strip_indicate_s *strip_ind = nullptr;
 8001f12:	9305      	str	r3, [sp, #20]
    uint8_t alarm_addr = 0;
 8001f14:	4698      	mov	r8, r3
 8001f16:	2200      	movs	r2, #0
 8001f18:	f10d 010f 	add.w	r1, sp, #15
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f00b fac8 	bl	800d4b4 <z_impl_k_msgq_get>

    while (true) {
        /* Always update info about workers in safe zone if it is possible */
        if (!k_msgq_get(&msgq_dwm_dist, &workers_in_safe_zone, K_NO_WAIT)) {
 8001f24:	b918      	cbnz	r0, 8001f2e <proc_task+0x4a>
            sync_msg.workers_in_safe_zone = workers_in_safe_zone;
 8001f26:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001f2a:	717b      	strb	r3, [r7, #5]
            home_msg.workers_in_safe_zone = workers_in_safe_zone;
            disable_alarm_msg.workers_in_safe_zone = workers_in_safe_zone;
 8001f2c:	7173      	strb	r3, [r6, #5]
        }

        if (!radio_rx_queue_is_empty()) {
 8001f2e:	f00a fbd5 	bl	800c6dc <radio_rx_queue_is_empty>
 8001f32:	4683      	mov	fp, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d137      	bne.n	8001fa8 <proc_task+0xc4>
            /**
             * Processing receive data
             * */
            /* Processing receiving data */
            if (!proc_rx_data(rx_buf, sizeof(rx_buf), &rx_msg, cur_dev_addr)) {
 8001f38:	4603      	mov	r3, r0
 8001f3a:	aa06      	add	r2, sp, #24
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	a804      	add	r0, sp, #16
 8001f40:	f00a fa24 	bl	800c38c <proc_rx_data>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d0e6      	beq.n	8001f16 <proc_task+0x32>
                continue;
            }
//            LOG_DBG("Message direction");

            switch (rx_msg.direction) {
 8001f48:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8001f4c:	2901      	cmp	r1, #1
 8001f4e:	d1e2      	bne.n	8001f16 <proc_task+0x32>
                case REQUEST:
                    LOG_DBG(" REQUEST");
                    LOG_DBG("Message type:");

                    tx_msg.sender_addr = rx_msg.sender_addr;
                    tx_msg.message_type = rx_msg.message_type;
 8001f50:	f89d 301a 	ldrb.w	r3, [sp, #26]
                    tx_msg.sender_addr = rx_msg.sender_addr;
 8001f54:	f89d 2018 	ldrb.w	r2, [sp, #24]
                    tx_msg.workers_in_safe_zone = workers_in_safe_zone;
 8001f58:	f89d 000f 	ldrb.w	r0, [sp, #15]
                    tx_msg.message_type = rx_msg.message_type;
 8001f5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8001f60:	2b01      	cmp	r3, #1
                    tx_msg.sender_addr = rx_msg.sender_addr;
 8001f62:	f88d 2020 	strb.w	r2, [sp, #32]
                    tx_msg.workers_in_safe_zone = workers_in_safe_zone;
 8001f66:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25

                    switch (rx_msg.message_type) {
 8001f6a:	d062      	beq.n	8002032 <proc_task+0x14e>
 8001f6c:	d82b      	bhi.n	8001fc6 <proc_task+0xe2>
                            set_msg(&tx_msg, true);
                            break;

                        case MESSAGE_TYPE_ALARM:
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
                            strip_ind = &alarm_ind;
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <proc_task+0x1b4>)
 8001f70:	9305      	str	r3, [sp, #20]
                            set_ind(&strip_ind, K_FOREVER);
 8001f72:	a805      	add	r0, sp, #20
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7c:	9101      	str	r1, [sp, #4]
 8001f7e:	f00a f8ef 	bl	800c160 <set_ind>
                            set_buzzer_mode(BUZZER_MODE_CONTINUOUS);
 8001f82:	2002      	movs	r0, #2
 8001f84:	f00a fbd4 	bl	800c730 <set_buzzer_mode>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001f88:	9901      	ldr	r1, [sp, #4]
 8001f8a:	f3bf 8f5b 	dmb	ish
 8001f8e:	e855 3f00 	ldrex	r3, [r5]
 8001f92:	e845 1200 	strex	r2, r1, [r5]
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d1f9      	bne.n	8001f8e <proc_task+0xaa>
 8001f9a:	f3bf 8f5b 	dmb	ish

                            atomic_set(&alarm_is_active, true);
                            /* Save alarm address in few railways case */
                            alarm_addr = rx_msg.sender_addr;
                            /* Retransmit alarm message */
                            set_msg(&tx_msg, true);
 8001f9e:	a808      	add	r0, sp, #32
                            alarm_addr = rx_msg.sender_addr;
 8001fa0:	f89d 8018 	ldrb.w	r8, [sp, #24]
                            set_msg(&tx_msg, true);
 8001fa4:	f00a fba2 	bl	800c6ec <set_msg>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001fa8:	f3bf 8f5b 	dmb	ish
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	f3bf 8f5b 	dmb	ish
//            atomic_set(&status_ind.led_strip_state.status.people_num, rx_msg.workers_in_safe_zone);
//            strip_ind = &status_ind;
//            set_ind(&strip_ind, K_FOREVER);
        }

        if (atomic_get(&alarm_is_active)) {
 8001fb2:	b11b      	cbz	r3, 8001fbc <proc_task+0xd8>
            /* If number workers in safe zone equal NUMBER_OF_NODES then buzzer switching in idle mode and
             * sending message disable_alarm_msg for signalman */
            if (workers_in_safe_zone == NUMBER_OF_NODES) {
 8001fb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d00c      	beq.n	8001fd6 <proc_task+0xf2>
	return z_impl_k_sleep(timeout);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f00c fa8c 	bl	800e4dc <z_impl_k_sleep>
 8001fc4:	e7a7      	b.n	8001f16 <proc_task+0x32>
 8001fc6:	3b03      	subs	r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d8a4      	bhi.n	8001f16 <proc_task+0x32>
                            set_msg(&tx_msg, false);
 8001fcc:	4659      	mov	r1, fp
 8001fce:	a808      	add	r0, sp, #32
 8001fd0:	f00a fb8c 	bl	800c6ec <set_msg>
                            break;
 8001fd4:	e7e8      	b.n	8001fa8 <proc_task+0xc4>

                disable_alarm_msg.workers_in_safe_zone = workers_in_safe_zone;
                set_buzzer_mode(BUZZER_MODE_IDLE);
 8001fd6:	2004      	movs	r0, #4
                disable_alarm_msg.workers_in_safe_zone = workers_in_safe_zone;
 8001fd8:	7173      	strb	r3, [r6, #5]
                set_buzzer_mode(BUZZER_MODE_IDLE);
 8001fda:	f00a fba9 	bl	800c730 <set_buzzer_mode>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001fde:	f3bf 8f5b 	dmb	ish
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e855 2f00 	ldrex	r2, [r5]
 8001fe8:	e845 3100 	strex	r1, r3, [r5]
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d1f9      	bne.n	8001fe4 <proc_task+0x100>
 8001ff0:	f3bf 8f5b 	dmb	ish
                atomic_set(&alarm_is_active, false);

                switch (alarm_addr) {
 8001ff4:	f1b8 0f01 	cmp.w	r8, #1
 8001ff8:	d002      	beq.n	8002000 <proc_task+0x11c>
 8001ffa:	f1b8 0f02 	cmp.w	r8, #2
 8001ffe:	d105      	bne.n	800200c <proc_task+0x128>
                        disable_alarm_msg.receiver_addr = SIGNALMAN_1_ADDR;
                        set_msg(&disable_alarm_msg, true);
                        break;
                    case SIGNALMAN_2_ADDR:
                        disable_alarm_msg.receiver_addr = SIGNALMAN_2_ADDR;
                        set_msg(&disable_alarm_msg, true);
 8002000:	2101      	movs	r1, #1
 8002002:	4630      	mov	r0, r6
                        disable_alarm_msg.receiver_addr = SIGNALMAN_2_ADDR;
 8002004:	f886 8001 	strb.w	r8, [r6, #1]
                        set_msg(&disable_alarm_msg, true);
 8002008:	f00a fb70 	bl	800c6ec <set_msg>
                    default:
                        break;
                }

                strip_ind = &msg_recv_ind;
                set_ind(&strip_ind, K_FOREVER);
 800200c:	a805      	add	r0, sp, #20
 800200e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                strip_ind = &msg_recv_ind;
 8002016:	f8cd a014 	str.w	sl, [sp, #20]
                set_ind(&strip_ind, K_FOREVER);
 800201a:	f00a f8a1 	bl	800c160 <set_ind>
                strip_ind = &disable_indication;
                set_ind(&strip_ind, K_FOREVER);
 800201e:	a805      	add	r0, sp, #20
 8002020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                strip_ind = &disable_indication;
 8002028:	f8cd 9014 	str.w	r9, [sp, #20]
                set_ind(&strip_ind, K_FOREVER);
 800202c:	f00a f898 	bl	800c160 <set_ind>
 8002030:	e7c4      	b.n	8001fbc <proc_task+0xd8>
                            switch (rx_msg.sender_addr) {
 8002032:	2a03      	cmp	r2, #3
 8002034:	d016      	beq.n	8002064 <proc_task+0x180>
                            set_ind(&strip_ind, K_FOREVER);
 8002036:	a805      	add	r0, sp, #20
 8002038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                            strip_ind = &msg_recv_ind;
 8002040:	f8cd a014 	str.w	sl, [sp, #20]
                            set_ind(&strip_ind, K_FOREVER);
 8002044:	f00a f88c 	bl	800c160 <set_ind>
                            set_ind(&strip_ind, K_FOREVER);
 8002048:	a805      	add	r0, sp, #20
 800204a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                            strip_ind = &disable_indication;
 8002052:	f8cd 9014 	str.w	r9, [sp, #20]
                            set_ind(&strip_ind, K_FOREVER);
 8002056:	f00a f883 	bl	800c160 <set_ind>
                            set_msg(&tx_msg, true);
 800205a:	2101      	movs	r1, #1
 800205c:	a808      	add	r0, sp, #32
 800205e:	f00a fb45 	bl	800c6ec <set_msg>
                            break;
 8002062:	e7a1      	b.n	8001fa8 <proc_task+0xc4>
                                    set_buzzer_mode(BUZZER_MODE_IDLE);
 8002064:	2004      	movs	r0, #4
 8002066:	f00a fb63 	bl	800c730 <set_buzzer_mode>
 800206a:	f3bf 8f5b 	dmb	ish
 800206e:	e855 3f00 	ldrex	r3, [r5]
 8002072:	e845 b200 	strex	r2, fp, [r5]
 8002076:	2a00      	cmp	r2, #0
 8002078:	d1f9      	bne.n	800206e <proc_task+0x18a>
 800207a:	f3bf 8f5b 	dmb	ish
 800207e:	e7da      	b.n	8002036 <proc_task+0x152>
 8002080:	20000008 	.word	0x20000008
 8002084:	20000000 	.word	0x20000000
 8002088:	20001498 	.word	0x20001498
 800208c:	2000038c 	.word	0x2000038c
 8002090:	20000360 	.word	0x20000360
 8002094:	20000794 	.word	0x20000794
 8002098:	20000354 	.word	0x20000354

0800209c <modem_task>:
        k_sleep(K_MSEC(1));
    }
}

[[noreturn]] void modem_task()
{
 800209c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    /**
     * Lora config begin
     * */
    const struct device *lora_dev = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
    struct lora_modem_config lora_cfg = {
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <modem_task+0x18c>)
 80020a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 80020a4:	b087      	sub	sp, #28
    struct lora_modem_config lora_cfg = {
 80020a6:	f10d 0808 	add.w	r8, sp, #8
 80020aa:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 80020ae:	485f      	ldr	r0, [pc, #380]	; (800222c <modem_task+0x190>)
 80020b0:	f00a ffb4 	bl	800d01c <z_device_is_ready>
      .fixed_len = true,
      .tx_power = 0,
      .tx = true,
    };

    if (!device_is_ready(lora_dev)) {
 80020b4:	2800      	cmp	r0, #0
 80020b6:	f000 80b0 	beq.w	800221a <modem_task+0x17e>
    struct led_strip_indicate_s *strip_ind = &status_ind;
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <modem_task+0x194>)
 80020bc:	9301      	str	r3, [sp, #4]
    common_kernel_services_init();
 80020be:	f00a f92f 	bl	800c320 <common_kernel_services_init>
    set_ind(&strip_ind, K_FOREVER);
 80020c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c6:	a801      	add	r0, sp, #4
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020cc:	f00a f848 	bl	800c160 <set_ind>
    current_state = recv_state;
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <modem_task+0x198>)
 80020d2:	4f59      	ldr	r7, [pc, #356]	; (8002238 <modem_task+0x19c>)
 80020d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020d8:	e887 0003 	stmia.w	r7, {r0, r1}
    set_buzzer_mode(BUZZER_MODE_SINGLE);
 80020dc:	2001      	movs	r0, #1
 80020de:	f00a fb27 	bl	800c730 <set_buzzer_mode>
    tim_start(K_NO_WAIT, K_MSEC(PERIOD_TIME_MSEC));
 80020e2:	f247 7288 	movw	r2, #30600	; 0x7788
 80020e6:	2300      	movs	r3, #0
 80020e8:	2000      	movs	r0, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	f00a fb10 	bl	800c710 <tim_start>
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020f8:	f00c f9f0 	bl	800e4dc <z_impl_k_sleep>
 80020fc:	4c4b      	ldr	r4, [pc, #300]	; (800222c <modem_task+0x190>)
 80020fe:	4d4f      	ldr	r5, [pc, #316]	; (800223c <modem_task+0x1a0>)
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 8002100:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8002240 <modem_task+0x1a4>
 8002104:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8002244 <modem_task+0x1a8>
 8002108:	e009      	b.n	800211e <modem_task+0x82>
 800210a:	6933      	ldr	r3, [r6, #16]
 800210c:	4652      	mov	r2, sl
 800210e:	4649      	mov	r1, r9
 8002110:	4620      	mov	r0, r4
 8002112:	4798      	blx	r3
            lora_recv_async(lora_dev, nullptr, nullptr);
            lora_cfg->tx = false;
            rc = lora_config(lora_dev, lora_cfg);
            if (!rc) {
                rc = lora_recv_async(lora_dev, lora_receive_cb, lora_receive_error_timeout);
                if (rc) {
 8002114:	bb18      	cbnz	r0, 800215e <modem_task+0xc2>
 8002116:	200a      	movs	r0, #10
 8002118:	2100      	movs	r1, #0
 800211a:	f00c f9df 	bl	800e4dc <z_impl_k_sleep>
    if (current_state.state == TRANSMIT) {
 800211e:	793e      	ldrb	r6, [r7, #4]
 8002120:	2e01      	cmp	r6, #1
 8002122:	d028      	beq.n	8002176 <modem_task+0xda>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8002124:	f3bf 8f5b 	dmb	ish
 8002128:	f04f 0b00 	mov.w	fp, #0
 800212c:	e855 3f00 	ldrex	r3, [r5]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d103      	bne.n	800213c <modem_task+0xa0>
 8002134:	e845 b200 	strex	r2, fp, [r5]
 8002138:	2a00      	cmp	r2, #0
 800213a:	d1f7      	bne.n	800212c <modem_task+0x90>
 800213c:	f3bf 8f5b 	dmb	ish
        if (atomic_cas(&reconfig_modem, 1, 0)) {
 8002140:	d1e9      	bne.n	8002116 <modem_task+0x7a>
	const struct lora_driver_api *api =
 8002142:	68a6      	ldr	r6, [r4, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002144:	4659      	mov	r1, fp
 8002146:	6933      	ldr	r3, [r6, #16]
 8002148:	465a      	mov	r2, fp
 800214a:	4620      	mov	r0, r4
 800214c:	4798      	blx	r3
	return api->config(dev, config);
 800214e:	6833      	ldr	r3, [r6, #0]
            lora_cfg->tx = false;
 8002150:	f88d b015 	strb.w	fp, [sp, #21]
 8002154:	4641      	mov	r1, r8
 8002156:	4620      	mov	r0, r4
 8002158:	4798      	blx	r3
            if (!rc) {
 800215a:	2800      	cmp	r0, #0
 800215c:	d0d5      	beq.n	800210a <modem_task+0x6e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800215e:	f3bf 8f5b 	dmb	ish
 8002162:	2301      	movs	r3, #1
 8002164:	e855 2f00 	ldrex	r2, [r5]
 8002168:	e845 3100 	strex	r1, r3, [r5]
 800216c:	2900      	cmp	r1, #0
 800216e:	d1f9      	bne.n	8002164 <modem_task+0xc8>
 8002170:	f3bf 8f5b 	dmb	ish
 8002174:	e7cf      	b.n	8002116 <modem_task+0x7a>
        if (!proc_tx_data(cur_queue, tx_buf, sizeof(tx_buf), &tx_msg)) {
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <modem_task+0x1ac>)
 8002178:	4934      	ldr	r1, [pc, #208]	; (800224c <modem_task+0x1b0>)
 800217a:	2202      	movs	r2, #2
 800217c:	2000      	movs	r0, #0
 800217e:	f00a f9d9 	bl	800c534 <proc_tx_data>
 8002182:	2800      	cmp	r0, #0
 8002184:	d0c7      	beq.n	8002116 <modem_task+0x7a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002186:	f04f 0310 	mov.w	r3, #16
 800218a:	f3ef 8011 	mrs	r0, BASEPRI
 800218e:	f383 8812 	msr	BASEPRI_MAX, r3
 8002192:	f3bf 8f6f 	isb	sy
        key = k_spin_lock(&spin);
 8002196:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002250 <modem_task+0x1b4>
	const struct lora_driver_api *api =
 800219a:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800219e:	f8cc 0000 	str.w	r0, [ip]
	return api->recv_async(dev, cb, error_timeout_cb);
 80021a2:	2200      	movs	r2, #0
 80021a4:	4611      	mov	r1, r2
 80021a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80021aa:	4620      	mov	r0, r4
 80021ac:	4798      	blx	r3
	return api->config(dev, config);
 80021ae:	f8db 3000 	ldr.w	r3, [fp]
        lora_cfg->tx = true;
 80021b2:	f88d 6015 	strb.w	r6, [sp, #21]
 80021b6:	4641      	mov	r1, r8
 80021b8:	4620      	mov	r0, r4
 80021ba:	4798      	blx	r3
        if (rc < 0) {
 80021bc:	2800      	cmp	r0, #0
 80021be:	db1e      	blt.n	80021fe <modem_task+0x162>
	return api->send(dev, data, data_len);
 80021c0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80021c4:	4921      	ldr	r1, [pc, #132]	; (800224c <modem_task+0x1b0>)
 80021c6:	2202      	movs	r2, #2
 80021c8:	4620      	mov	r0, r4
 80021ca:	4798      	blx	r3
        if (rc < 0) {
 80021cc:	2800      	cmp	r0, #0
 80021ce:	db1d      	blt.n	800220c <modem_task+0x170>
 80021d0:	f3bf 8f5b 	dmb	ish
 80021d4:	2301      	movs	r3, #1
 80021d6:	e855 2f00 	ldrex	r2, [r5]
 80021da:	e845 3100 	strex	r1, r3, [r5]
 80021de:	2900      	cmp	r1, #0
 80021e0:	d1f9      	bne.n	80021d6 <modem_task+0x13a>
 80021e2:	f3bf 8f5b 	dmb	ish
        current_state = *current_state.next;
 80021e6:	683b      	ldr	r3, [r7, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <modem_task+0x1b4>)
 80021ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	e887 0003 	stmia.w	r7, {r0, r1}
 80021f4:	f382 8811 	msr	BASEPRI, r2
 80021f8:	f3bf 8f6f 	isb	sy
        return rc;
 80021fc:	e78b      	b.n	8002116 <modem_task+0x7a>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80021fe:	4912      	ldr	r1, [pc, #72]	; (8002248 <modem_task+0x1ac>)
 8002200:	2200      	movs	r2, #0
 8002202:	2300      	movs	r3, #0
 8002204:	2000      	movs	r0, #0
 8002206:	f00b f8f9 	bl	800d3fc <z_impl_k_msgq_put>
            current_state = *current_state.next;
 800220a:	e7ec      	b.n	80021e6 <modem_task+0x14a>
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <modem_task+0x1ac>)
 800220e:	2200      	movs	r2, #0
 8002210:	2300      	movs	r3, #0
 8002212:	2000      	movs	r0, #0
 8002214:	f00b f8f2 	bl	800d3fc <z_impl_k_msgq_put>
 8002218:	e7da      	b.n	80021d0 <modem_task+0x134>
	return z_impl_k_sleep(timeout);
 800221a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800221e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002222:	f00c f95b 	bl	800e4dc <z_impl_k_sleep>
 8002226:	e748      	b.n	80020ba <modem_task+0x1e>
 8002228:	08011c68 	.word	0x08011c68
 800222c:	080118b4 	.word	0x080118b4
 8002230:	200003b4 	.word	0x200003b4
 8002234:	08012ac4 	.word	0x08012ac4
 8002238:	200014a0 	.word	0x200014a0
 800223c:	200014ac 	.word	0x200014ac
 8002240:	0800bbe5 	.word	0x0800bbe5
 8002244:	0800bc2d 	.word	0x0800bc2d
 8002248:	20000d60 	.word	0x20000d60
 800224c:	20000d5c 	.word	0x20000d5c
 8002250:	20000d58 	.word	0x20000d58

08002254 <work_button_pressed_handler_dev>:
}

void work_button_pressed_handler_dev(struct gpio_dt_spec *irq_gpio)
{
    /* For this device do nothing */
}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <periodic_timer_handler>:

void periodic_timer_handler(struct k_timer *tim)
{
    static uint8_t cnt = 5;
    LOG_DBG("Periodic timer handler");
    current_state = transmit_state;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <periodic_timer_handler+0x34>)
 800225a:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 800225e:	b510      	push	{r4, lr}
    current_state = transmit_state;
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <periodic_timer_handler+0x38>)

    if (cnt == 5) {
 8002262:	4c0c      	ldr	r4, [pc, #48]	; (8002294 <periodic_timer_handler+0x3c>)
    current_state = transmit_state;
 8002264:	e883 0003 	stmia.w	r3, {r0, r1}
    if (cnt == 5) {
 8002268:	7823      	ldrb	r3, [r4, #0]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d008      	beq.n	8002280 <periodic_timer_handler+0x28>
        set_msg(&sync_msg, false);
        cnt = 0;
    }
    cnt++;
 800226e:	3301      	adds	r3, #1
 8002270:	b2db      	uxtb	r3, r3
    k_wakeup(modem_task_id);
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <periodic_timer_handler+0x40>)
    cnt++;
 8002274:	7023      	strb	r3, [r4, #0]
    k_wakeup(modem_task_id);
 8002276:	6810      	ldr	r0, [r2, #0]
}
 8002278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_impl_k_wakeup(thread);
 800227c:	f00c b95a 	b.w	800e534 <z_impl_k_wakeup>
        set_msg(&sync_msg, false);
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <periodic_timer_handler+0x44>)
 8002282:	2100      	movs	r1, #0
 8002284:	f00a fa32 	bl	800c6ec <set_msg>
        cnt = 0;
 8002288:	2301      	movs	r3, #1
 800228a:	e7f2      	b.n	8002272 <periodic_timer_handler+0x1a>
 800228c:	08012acc 	.word	0x08012acc
 8002290:	200014a0 	.word	0x200014a0
 8002294:	200005ec 	.word	0x200005ec
 8002298:	08011dbc 	.word	0x08011dbc
 800229c:	20000008 	.word	0x20000008

080022a0 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
 80022a0:	2000      	movs	r0, #0
 80022a2:	4770      	bx	lr

080022a4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80022a4:	680b      	ldr	r3, [r1, #0]
	return _char_out(c);
 80022a6:	4a02      	ldr	r2, [pc, #8]	; (80022b0 <char_out+0xc>)
	ctx->count++;
 80022a8:	3301      	adds	r3, #1
	return _char_out(c);
 80022aa:	6812      	ldr	r2, [r2, #0]
	ctx->count++;
 80022ac:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80022ae:	4710      	bx	r2
 80022b0:	20000010 	.word	0x20000010

080022b4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
 80022b4:	b40f      	push	{r0, r1, r2, r3}
 80022b6:	b510      	push	{r4, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	ab04      	add	r3, sp, #16
		struct out_context ctx = { 0 };
 80022bc:	2400      	movs	r4, #0
{
 80022be:	f853 2b04 	ldr.w	r2, [r3], #4
		cbvprintf(char_out, &ctx, fmt, ap);
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <printk+0x24>)
	va_list ap;

	va_start(ap, fmt);
 80022c4:	9300      	str	r3, [sp, #0]
		cbvprintf(char_out, &ctx, fmt, ap);
 80022c6:	a901      	add	r1, sp, #4
		struct out_context ctx = { 0 };
 80022c8:	9401      	str	r4, [sp, #4]
		cbvprintf(char_out, &ctx, fmt, ap);
 80022ca:	f000 f8e1 	bl	8002490 <cbvprintf>

	vprintk(fmt, ap);

	va_end(ap);
}
 80022ce:	b002      	add	sp, #8
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022d4:	b004      	add	sp, #16
 80022d6:	4770      	bx	lr
 80022d8:	080022a5 	.word	0x080022a5

080022dc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80022dc:	468c      	mov	ip, r1
 80022de:	4604      	mov	r4, r0
 80022e0:	4611      	mov	r1, r2
 80022e2:	b508      	push	{r3, lr}
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80022e4:	461a      	mov	r2, r3
 80022e6:	4660      	mov	r0, ip
 80022e8:	47a0      	blx	r4
	return z_impl_z_current_get();
 80022ea:	f00c f95d 	bl	800e5a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80022ee:	f001 f889 	bl	8003404 <z_impl_k_thread_abort>
 80022f2:	bf00      	nop

080022f4 <free_list_add>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 80022f4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	885b      	ldrh	r3, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80022fc:	085b      	lsrs	r3, r3, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	f1c3 031f 	rsb	r3, r3, #31
 8002306:	eb00 0483 	add.w	r4, r0, r3, lsl #2
	void *cmem = &buf[c];
 800230a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 800230c:	1d15      	adds	r5, r2, #4
 800230e:	f102 0c06 	add.w	ip, r2, #6
	if (b->next == 0U) {
 8002312:	6922      	ldr	r2, [r4, #16]
 8002314:	fa1f fe81 	uxth.w	lr, r1
 8002318:	b95a      	cbnz	r2, 8002332 <free_list_add+0x3e>
		h->avail_buckets |= BIT(bidx);
 800231a:	68c2      	ldr	r2, [r0, #12]
 800231c:	2601      	movs	r6, #1
 800231e:	fa06 f303 	lsl.w	r3, r6, r3
 8002322:	431a      	orrs	r2, r3
 8002324:	60c2      	str	r2, [r0, #12]
		b->next = c;
 8002326:	6121      	str	r1, [r4, #16]
 8002328:	f820 e005 	strh.w	lr, [r0, r5]
 800232c:	f820 e00c 	strh.w	lr, [r0, ip]
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
 8002330:	bd70      	pop	{r4, r5, r6, pc}
	void *cmem = &buf[c];
 8002332:	00d3      	lsls	r3, r2, #3
		return ((uint16_t *)cmem)[f];
 8002334:	3304      	adds	r3, #4
 8002336:	5ac1      	ldrh	r1, [r0, r3]
		((uint16_t *)cmem)[f] = val;
 8002338:	5341      	strh	r1, [r0, r5]
 800233a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800233e:	f820 200c 	strh.w	r2, [r0, ip]
 8002342:	f8a1 e006 	strh.w	lr, [r1, #6]
 8002346:	f820 e003 	strh.w	lr, [r0, r3]
 800234a:	bd70      	pop	{r4, r5, r6, pc}

0800234c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800234c:	f1a2 0c04 	sub.w	ip, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002350:	448c      	add	ip, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002352:	1dca      	adds	r2, r1, #7
 8002354:	f022 0207 	bic.w	r2, r2, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002358:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800235c:	ebac 0c02 	sub.w	ip, ip, r2
{
 8002360:	b430      	push	{r4, r5}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8002362:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8002366:	6002      	str	r2, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 8002368:	fab5 f085 	clz	r0, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800236c:	f1c0 0124 	rsb	r1, r0, #36	; 0x24
 8002370:	0089      	lsls	r1, r1, #2
	h->avail_buckets = 0;
 8002372:	2400      	movs	r4, #0
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8002374:	3107      	adds	r1, #7
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8002376:	f1d0 0020 	rsbs	r0, r0, #32
	h->avail_buckets = 0;
 800237a:	e9c2 5402 	strd	r5, r4, [r2, #8]
 800237e:	ea4f 01d1 	mov.w	r1, r1, lsr #3
	for (int i = 0; i < nb_buckets; i++) {
 8002382:	d007      	beq.n	8002394 <sys_heap_init+0x48>
 8002384:	f102 030c 	add.w	r3, r2, #12
 8002388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		h->buckets[i].next = 0;
 800238c:	f843 4f04 	str.w	r4, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 8002390:	4283      	cmp	r3, r0
 8002392:	d1fb      	bne.n	800238c <sys_heap_init+0x40>
		((uint16_t *)cmem)[f] = val;
 8002394:	2300      	movs	r3, #0
 8002396:	8013      	strh	r3, [r2, #0]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8002398:	004b      	lsls	r3, r1, #1
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800239a:	1a6d      	subs	r5, r5, r1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800239c:	f043 0301 	orr.w	r3, r3, #1
		((uint16_t *)cmem)[f] = val;
 80023a0:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80023a4:	8053      	strh	r3, [r2, #2]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80023a6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 80023a8:	eb02 030c 	add.w	r3, r2, ip
 80023ac:	8044      	strh	r4, [r0, #2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80023ae:	2001      	movs	r0, #1
		((uint16_t *)cmem)[f] = val;
 80023b0:	f822 1031 	strh.w	r1, [r2, r1, lsl #3]
 80023b4:	f822 500c 	strh.w	r5, [r2, ip]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80023b8:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 80023ba:	bc30      	pop	{r4, r5}
	free_list_add(h, chunk0_size);
 80023bc:	4610      	mov	r0, r2
 80023be:	f7ff bf99 	b.w	80022f4 <free_list_add>
 80023c2:	bf00      	nop

080023c4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80023c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c8:	4692      	mov	sl, r2
 80023ca:	4698      	mov	r8, r3
	bool upcase = isupper((int)conv->specifier);
 80023cc:	78d3      	ldrb	r3, [r2, #3]
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <encode_uint+0xc8>)
{
 80023d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023d2:	f813 9002 	ldrb.w	r9, [r3, r2]
	switch (specifier) {
 80023d6:	2b6f      	cmp	r3, #111	; 0x6f
{
 80023d8:	4604      	mov	r4, r0
 80023da:	460d      	mov	r5, r1
 80023dc:	f009 0903 	and.w	r9, r9, #3
	switch (specifier) {
 80023e0:	d03e      	beq.n	8002460 <encode_uint+0x9c>
 80023e2:	d938      	bls.n	8002456 <encode_uint+0x92>
 80023e4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d036      	beq.n	800245a <encode_uint+0x96>
 80023ec:	270a      	movs	r7, #10
		return 10;
 80023ee:	46bb      	mov	fp, r7
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 80023f0:	e00c      	b.n	800240c <encode_uint+0x48>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80023f2:	f10c 0357 	add.w	r3, ip, #87	; 0x57
 80023f6:	b2db      	uxtb	r3, r3
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
 80023f8:	42bc      	cmp	r4, r7
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80023fa:	f806 3d01 	strb.w	r3, [r6, #-1]!
	} while ((value != 0) && (bps < bp));
 80023fe:	f175 0300 	sbcs.w	r3, r5, #0
 8002402:	d31b      	bcc.n	800243c <encode_uint+0x78>
 8002404:	4546      	cmp	r6, r8
		value /= radix;
 8002406:	4604      	mov	r4, r0
 8002408:	460d      	mov	r5, r1
	} while ((value != 0) && (bps < bp));
 800240a:	d917      	bls.n	800243c <encode_uint+0x78>
		unsigned int lsv = (unsigned int)(value % radix);
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	463a      	mov	r2, r7
 8002412:	2300      	movs	r3, #0
 8002414:	f7fe fbb2 	bl	8000b7c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002418:	fa5f fc82 	uxtb.w	ip, r2
 800241c:	2a09      	cmp	r2, #9
 800241e:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8002422:	d9e8      	bls.n	80023f6 <encode_uint+0x32>
 8002424:	f1b9 0f01 	cmp.w	r9, #1
 8002428:	d1e3      	bne.n	80023f2 <encode_uint+0x2e>
 800242a:	f10c 0337 	add.w	r3, ip, #55	; 0x37
 800242e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
 8002430:	42bc      	cmp	r4, r7
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002432:	f806 3d01 	strb.w	r3, [r6, #-1]!
	} while ((value != 0) && (bps < bp));
 8002436:	f175 0300 	sbcs.w	r3, r5, #0
 800243a:	d2e3      	bcs.n	8002404 <encode_uint+0x40>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800243c:	f89a 3000 	ldrb.w	r3, [sl]
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	d505      	bpl.n	8002450 <encode_uint+0x8c>
		if (radix == 8) {
 8002444:	f1bb 0f08 	cmp.w	fp, #8
 8002448:	d00d      	beq.n	8002466 <encode_uint+0xa2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 800244a:	f1bb 0f10 	cmp.w	fp, #16
 800244e:	d013      	beq.n	8002478 <encode_uint+0xb4>
			;
		}
	}

	return bp;
}
 8002450:	4630      	mov	r0, r6
 8002452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8002456:	2b58      	cmp	r3, #88	; 0x58
 8002458:	d1c8      	bne.n	80023ec <encode_uint+0x28>
 800245a:	2710      	movs	r7, #16
		return 16;
 800245c:	46bb      	mov	fp, r7
 800245e:	e7d5      	b.n	800240c <encode_uint+0x48>
	switch (specifier) {
 8002460:	2708      	movs	r7, #8
 8002462:	46bb      	mov	fp, r7
 8002464:	e7d2      	b.n	800240c <encode_uint+0x48>
			conv->altform_0 = true;
 8002466:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	f88a 3002 	strb.w	r3, [sl, #2]
}
 8002472:	4630      	mov	r0, r6
 8002474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0c = true;
 8002478:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800247c:	f043 0310 	orr.w	r3, r3, #16
 8002480:	f88a 3002 	strb.w	r3, [sl, #2]
}
 8002484:	4630      	mov	r0, r6
 8002486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248a:	bf00      	nop
 800248c:	08012c25 	.word	0x08012c25

08002490 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002494:	4683      	mov	fp, r0
 8002496:	b091      	sub	sp, #68	; 0x44
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002498:	7810      	ldrb	r0, [r2, #0]
{
 800249a:	9302      	str	r3, [sp, #8]
	while (*fp != 0) {
 800249c:	b188      	cbz	r0, 80024c2 <cbvprintf+0x32>
 800249e:	4616      	mov	r6, r2
 80024a0:	460c      	mov	r4, r1
	size_t count = 0;
 80024a2:	2500      	movs	r5, #0
			conv->flag_plus = true;
 80024a4:	465f      	mov	r7, fp
		if (*fp != '%') {
 80024a6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
 80024a8:	f106 0801 	add.w	r8, r6, #1
		if (*fp != '%') {
 80024ac:	d00c      	beq.n	80024c8 <cbvprintf+0x38>
			OUTC(*fp++);
 80024ae:	4621      	mov	r1, r4
 80024b0:	47b8      	blx	r7
 80024b2:	2800      	cmp	r0, #0
 80024b4:	db05      	blt.n	80024c2 <cbvprintf+0x32>
 80024b6:	3501      	adds	r5, #1
 80024b8:	4646      	mov	r6, r8
	while (*fp != 0) {
 80024ba:	7830      	ldrb	r0, [r6, #0]
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1f2      	bne.n	80024a6 <cbvprintf+0x16>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80024c0:	4628      	mov	r0, r5
#undef OUTS
#undef OUTC
}
 80024c2:	b011      	add	sp, #68	; 0x44
 80024c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (*sp == '%') {
 80024c8:	7873      	ldrb	r3, [r6, #1]
		} state = {
 80024ca:	2100      	movs	r1, #0
	if (*sp == '%') {
 80024cc:	2b25      	cmp	r3, #37	; 0x25
		} state = {
 80024ce:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80024d2:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80024d6:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
	if (*sp == '%') {
 80024da:	f000 80ea 	beq.w	80026b2 <cbvprintf+0x222>
 80024de:	468c      	mov	ip, r1
 80024e0:	4608      	mov	r0, r1
 80024e2:	468e      	mov	lr, r1
 80024e4:	4689      	mov	r9, r1
		switch (*sp) {
 80024e6:	f1a3 0220 	sub.w	r2, r3, #32
 80024ea:	2a10      	cmp	r2, #16
 80024ec:	d80a      	bhi.n	8002504 <cbvprintf+0x74>
 80024ee:	e8df f002 	tbb	[pc, r2]
 80024f2:	09d8      	.short	0x09d8
 80024f4:	0909d509 	.word	0x0909d509
 80024f8:	09090909 	.word	0x09090909
 80024fc:	dd09da09 	.word	0xdd09da09
 8002500:	0909      	.short	0x0909
 8002502:	d1          	.byte	0xd1
 8002503:	00          	.byte	0x00
 8002504:	f1b9 0f00 	cmp.w	r9, #0
 8002508:	d005      	beq.n	8002516 <cbvprintf+0x86>
 800250a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800250e:	f042 0204 	orr.w	r2, r2, #4
 8002512:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8002516:	f1be 0f00 	cmp.w	lr, #0
 800251a:	d005      	beq.n	8002528 <cbvprintf+0x98>
 800251c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8002520:	f042 0208 	orr.w	r2, r2, #8
 8002524:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8002528:	b128      	cbz	r0, 8002536 <cbvprintf+0xa6>
 800252a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8002536:	f1bc 0f00 	cmp.w	ip, #0
 800253a:	d005      	beq.n	8002548 <cbvprintf+0xb8>
 800253c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8002548:	b129      	cbz	r1, 8002556 <cbvprintf+0xc6>
 800254a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800254e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002552:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
 8002556:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800255a:	f002 0144 	and.w	r1, r2, #68	; 0x44
 800255e:	2944      	cmp	r1, #68	; 0x44
 8002560:	f000 8198 	beq.w	8002894 <cbvprintf+0x404>
	conv->width_present = true;
 8002564:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8002568:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
 800256a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
 8002572:	f000 8171 	beq.w	8002858 <cbvprintf+0x3c8>
	while (isdigit((int)(unsigned char)*sp)) {
 8002576:	f8df c268 	ldr.w	ip, [pc, #616]	; 80027e0 <cbvprintf+0x350>
 800257a:	f81c 2003 	ldrb.w	r2, [ip, r3]
 800257e:	0752      	lsls	r2, r2, #29
 8002580:	4618      	mov	r0, r3
 8002582:	4641      	mov	r1, r8
	size_t val = 0;
 8002584:	bf48      	it	mi
 8002586:	2200      	movmi	r2, #0
	while (isdigit((int)(unsigned char)*sp)) {
 8002588:	d517      	bpl.n	80025ba <cbvprintf+0x12a>
 800258a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800258e:	f81c e003 	ldrb.w	lr, [ip, r3]
		val = 10U * val + *sp++ - '0';
 8002592:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002596:	eb00 0242 	add.w	r2, r0, r2, lsl #1
	while (isdigit((int)(unsigned char)*sp)) {
 800259a:	f01e 0f04 	tst.w	lr, #4
		val = 10U * val + *sp++ - '0';
 800259e:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80025a2:	4618      	mov	r0, r3
 80025a4:	d1f1      	bne.n	800258a <cbvprintf+0xfa>
	if (sp != wp) {
 80025a6:	4588      	cmp	r8, r1
 80025a8:	d007      	beq.n	80025ba <cbvprintf+0x12a>
		conv->unsupported |= ((conv->width_value < 0)
 80025aa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
		conv->width_value = width;
 80025ae:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
 80025b0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
 80025b2:	f362 0041 	bfi	r0, r2, #1, #1
 80025b6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	conv->prec_present = (*sp == '.');
 80025ba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80025be:	2b2e      	cmp	r3, #46	; 0x2e
 80025c0:	bf0c      	ite	eq
 80025c2:	2001      	moveq	r0, #1
 80025c4:	2000      	movne	r0, #0
 80025c6:	f360 0241 	bfi	r2, r0, #1, #1
 80025ca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 80025ce:	d12a      	bne.n	8002626 <cbvprintf+0x196>
	if (*sp == '*') {
 80025d0:	784b      	ldrb	r3, [r1, #1]
 80025d2:	2b2a      	cmp	r3, #42	; 0x2a
 80025d4:	f000 8163 	beq.w	800289e <cbvprintf+0x40e>
	while (isdigit((int)(unsigned char)*sp)) {
 80025d8:	f8df c204 	ldr.w	ip, [pc, #516]	; 80027e0 <cbvprintf+0x350>
 80025dc:	f81c 2003 	ldrb.w	r2, [ip, r3]
 80025e0:	f012 0204 	ands.w	r2, r2, #4
 80025e4:	4618      	mov	r0, r3
	++sp;
 80025e6:	f101 0101 	add.w	r1, r1, #1
	while (isdigit((int)(unsigned char)*sp)) {
 80025ea:	bf08      	it	eq
 80025ec:	4610      	moveq	r0, r2
 80025ee:	d00f      	beq.n	8002610 <cbvprintf+0x180>
	size_t val = 0;
 80025f0:	2200      	movs	r2, #0
	while (isdigit((int)(unsigned char)*sp)) {
 80025f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80025f6:	f81c e003 	ldrb.w	lr, [ip, r3]
		val = 10U * val + *sp++ - '0';
 80025fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025fe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
	while (isdigit((int)(unsigned char)*sp)) {
 8002602:	f01e 0f04 	tst.w	lr, #4
		val = 10U * val + *sp++ - '0';
 8002606:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800260a:	4618      	mov	r0, r3
 800260c:	d1f1      	bne.n	80025f2 <cbvprintf+0x162>
			      || (prec != (size_t)conv->prec_value));
 800260e:	0fd0      	lsrs	r0, r2, #31
	conv->prec_value = prec;
 8002610:	920e      	str	r2, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 8002612:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8002616:	f3c2 0c40 	ubfx	ip, r2, #1, #1
 800261a:	ea40 000c 	orr.w	r0, r0, ip
 800261e:	f360 0241 	bfi	r2, r0, #1, #1
 8002622:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	switch (*sp) {
 8002626:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
		if (*++sp == 'h') {
 800262a:	1c48      	adds	r0, r1, #1
	switch (*sp) {
 800262c:	2a2e      	cmp	r2, #46	; 0x2e
 800262e:	f200 814a 	bhi.w	80028c6 <cbvprintf+0x436>
 8002632:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002636:	02d7      	.short	0x02d7
 8002638:	01480148 	.word	0x01480148
 800263c:	01480148 	.word	0x01480148
 8002640:	01480148 	.word	0x01480148
 8002644:	01480148 	.word	0x01480148
 8002648:	01480148 	.word	0x01480148
 800264c:	01480148 	.word	0x01480148
 8002650:	01480148 	.word	0x01480148
 8002654:	01480148 	.word	0x01480148
 8002658:	01480148 	.word	0x01480148
 800265c:	01480148 	.word	0x01480148
 8002660:	01480148 	.word	0x01480148
 8002664:	01480148 	.word	0x01480148
 8002668:	01480148 	.word	0x01480148
 800266c:	02c70148 	.word	0x02c70148
 8002670:	02c30148 	.word	0x02c30148
 8002674:	02b30148 	.word	0x02b30148
 8002678:	01480148 	.word	0x01480148
 800267c:	01480148 	.word	0x01480148
 8002680:	01480148 	.word	0x01480148
 8002684:	02af0148 	.word	0x02af0148
 8002688:	01480148 	.word	0x01480148
 800268c:	01480148 	.word	0x01480148
 8002690:	02a20148 	.word	0x02a20148
			conv->flag_zero = true;
 8002694:	2101      	movs	r1, #1
		switch (*sp) {
 8002696:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800269a:	e724      	b.n	80024e6 <cbvprintf+0x56>
			conv->flag_hash = true;
 800269c:	f04f 0c01 	mov.w	ip, #1
			break;
 80026a0:	e7f9      	b.n	8002696 <cbvprintf+0x206>
			conv->flag_space = true;
 80026a2:	2001      	movs	r0, #1
			break;
 80026a4:	e7f7      	b.n	8002696 <cbvprintf+0x206>
			conv->flag_plus = true;
 80026a6:	f04f 0e01 	mov.w	lr, #1
 80026aa:	e7f4      	b.n	8002696 <cbvprintf+0x206>
		switch (*sp) {
 80026ac:	f04f 0901 	mov.w	r9, #1
 80026b0:	e7f1      	b.n	8002696 <cbvprintf+0x206>
		conv->specifier = *sp++;
 80026b2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
 80026b6:	460a      	mov	r2, r1
 80026b8:	f106 0b02 	add.w	fp, r6, #2
 80026bc:	4608      	mov	r0, r1
 80026be:	460b      	mov	r3, r1
 80026c0:	468e      	mov	lr, r1
		} else if (conv->width_present) {
 80026c2:	f99d c030 	ldrsb.w	ip, [sp, #48]	; 0x30
 80026c6:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 80026ca:	f1bc 0f00 	cmp.w	ip, #0
			width = conv->width_value;
 80026ce:	bfb4      	ite	lt
 80026d0:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
 80026d4:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
		if (conv->prec_star) {
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8083 	beq.w	80027e4 <cbvprintf+0x354>
			int arg = va_arg(ap, int);
 80026de:	9b02      	ldr	r3, [sp, #8]
 80026e0:	f853 8b04 	ldr.w	r8, [r3], #4
			if (arg < 0) {
 80026e4:	f1b8 0f00 	cmp.w	r8, #0
 80026e8:	da07      	bge.n	80026fa <cbvprintf+0x26a>
				conv->prec_present = false;
 80026ea:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 80026ee:	f36f 0c41 	bfc	ip, #1, #1
 80026f2:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
		int precision = -1;
 80026f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		conv->pad0_value = 0;
 80026fa:	f04f 0c00 	mov.w	ip, #0
		if (specifier_cat == SPECIFIER_SINT) {
 80026fe:	2801      	cmp	r0, #1
		conv->pad0_pre_exp = 0;
 8002700:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
		if (specifier_cat == SPECIFIER_SINT) {
 8002704:	d07d      	beq.n	8002802 <cbvprintf+0x372>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002706:	2802      	cmp	r0, #2
 8002708:	f000 80b1 	beq.w	800286e <cbvprintf+0x3de>
		} else if (specifier_cat == SPECIFIER_FP) {
 800270c:	2804      	cmp	r0, #4
 800270e:	f000 80cf 	beq.w	80028b0 <cbvprintf+0x420>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002712:	2803      	cmp	r0, #3
 8002714:	f000 8344 	beq.w	8002da0 <cbvprintf+0x910>
 8002718:	9302      	str	r3, [sp, #8]
		if (conv->invalid || conv->unsupported) {
 800271a:	f01a 0f03 	tst.w	sl, #3
 800271e:	f040 8085 	bne.w	800282c <cbvprintf+0x39c>
		switch (conv->specifier) {
 8002722:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002726:	3b25      	subs	r3, #37	; 0x25
 8002728:	2b53      	cmp	r3, #83	; 0x53
 800272a:	d856      	bhi.n	80027da <cbvprintf+0x34a>
 800272c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002730:	00550282 	.word	0x00550282
 8002734:	00550055 	.word	0x00550055
 8002738:	00550055 	.word	0x00550055
 800273c:	00550055 	.word	0x00550055
 8002740:	00550055 	.word	0x00550055
 8002744:	00550055 	.word	0x00550055
 8002748:	00550055 	.word	0x00550055
 800274c:	00550055 	.word	0x00550055
 8002750:	00550055 	.word	0x00550055
 8002754:	00550055 	.word	0x00550055
 8002758:	00550055 	.word	0x00550055
 800275c:	00550055 	.word	0x00550055
 8002760:	00550055 	.word	0x00550055
 8002764:	00550055 	.word	0x00550055
 8002768:	00550055 	.word	0x00550055
 800276c:	00550055 	.word	0x00550055
 8002770:	00550055 	.word	0x00550055
 8002774:	00550055 	.word	0x00550055
 8002778:	00550055 	.word	0x00550055
 800277c:	00550055 	.word	0x00550055
 8002780:	00550055 	.word	0x00550055
 8002784:	00550055 	.word	0x00550055
 8002788:	00550055 	.word	0x00550055
 800278c:	00550055 	.word	0x00550055
 8002790:	00550055 	.word	0x00550055
 8002794:	01850055 	.word	0x01850055
 8002798:	00550055 	.word	0x00550055
 800279c:	00550055 	.word	0x00550055
 80027a0:	00550055 	.word	0x00550055
 80027a4:	00550055 	.word	0x00550055
 80027a8:	00550055 	.word	0x00550055
 80027ac:	020f0278 	.word	0x020f0278
 80027b0:	00550055 	.word	0x00550055
 80027b4:	00550055 	.word	0x00550055
 80027b8:	0055020f 	.word	0x0055020f
 80027bc:	00550055 	.word	0x00550055
 80027c0:	02a80055 	.word	0x02a80055
 80027c4:	029d0185 	.word	0x029d0185
 80027c8:	00550055 	.word	0x00550055
 80027cc:	0055028b 	.word	0x0055028b
 80027d0:	00550185 	.word	0x00550185
 80027d4:	01850055 	.word	0x01850055
			OUTS(bps, bpe);
 80027d8:	4655      	mov	r5, sl
 80027da:	465e      	mov	r6, fp
 80027dc:	e66d      	b.n	80024ba <cbvprintf+0x2a>
 80027de:	bf00      	nop
 80027e0:	08012c25 	.word	0x08012c25
		} else if (conv->prec_present) {
 80027e4:	f01e 0f02 	tst.w	lr, #2
			precision = conv->prec_value;
 80027e8:	bf18      	it	ne
 80027ea:	f8dd 8038 	ldrne.w	r8, [sp, #56]	; 0x38
 80027ee:	9b02      	ldr	r3, [sp, #8]
		int precision = -1;
 80027f0:	bf08      	it	eq
 80027f2:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
		conv->pad0_value = 0;
 80027f6:	f04f 0c00 	mov.w	ip, #0
		if (specifier_cat == SPECIFIER_SINT) {
 80027fa:	2801      	cmp	r0, #1
		conv->pad0_pre_exp = 0;
 80027fc:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
		if (specifier_cat == SPECIFIER_SINT) {
 8002800:	d181      	bne.n	8002706 <cbvprintf+0x276>
			switch (length_mod) {
 8002802:	1ec8      	subs	r0, r1, #3
 8002804:	2804      	cmp	r0, #4
 8002806:	f200 80d5 	bhi.w	80029b4 <cbvprintf+0x524>
 800280a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800280e:	010e      	.short	0x010e
 8002810:	00050005 	.word	0x00050005
 8002814:	00d300d3 	.word	0x00d300d3
					(uint_value_type)va_arg(ap,
 8002818:	3307      	adds	r3, #7
 800281a:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
 800281e:	4618      	mov	r0, r3
 8002820:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002824:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002828:	9002      	str	r0, [sp, #8]
				break;
 800282a:	e776      	b.n	800271a <cbvprintf+0x28a>
	size_t count = 0;
 800282c:	f04f 0800 	mov.w	r8, #0
 8002830:	e007      	b.n	8002842 <cbvprintf+0x3b2>
		int rc = out((int)*sp++, ctx);
 8002832:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002836:	47b8      	blx	r7
		if (rc < 0) {
 8002838:	2800      	cmp	r0, #0
 800283a:	f6ff ae42 	blt.w	80024c2 <cbvprintf+0x32>
		++count;
 800283e:	f108 0801 	add.w	r8, r8, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002842:	455e      	cmp	r6, fp
		int rc = out((int)*sp++, ctx);
 8002844:	4621      	mov	r1, r4
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002846:	d3f4      	bcc.n	8002832 <cbvprintf+0x3a2>
			OUTS(sp, fp);
 8002848:	f1b8 0f00 	cmp.w	r8, #0
	return (int)count;
 800284c:	4640      	mov	r0, r8
			OUTS(sp, fp);
 800284e:	f6ff ae38 	blt.w	80024c2 <cbvprintf+0x32>
 8002852:	4445      	add	r5, r8
			continue;
 8002854:	465e      	mov	r6, fp
 8002856:	e630      	b.n	80024ba <cbvprintf+0x2a>
		conv->width_star = true;
 8002858:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
 8002864:	f898 3001 	ldrb.w	r3, [r8, #1]
			++sp;
 8002868:	f108 0101 	add.w	r1, r8, #1
		return ++sp;
 800286c:	e6a5      	b.n	80025ba <cbvprintf+0x12a>
			switch (length_mod) {
 800286e:	1ec8      	subs	r0, r1, #3
 8002870:	2804      	cmp	r0, #4
 8002872:	f200 80b0 	bhi.w	80029d6 <cbvprintf+0x546>
 8002876:	f20f 0c08 	addw	ip, pc, #8
 800287a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
 800287e:	bf00      	nop
 8002880:	08002b15 	.word	0x08002b15
 8002884:	08002819 	.word	0x08002819
 8002888:	08002819 	.word	0x08002819
 800288c:	080029d7 	.word	0x080029d7
 8002890:	080029d7 	.word	0x080029d7
		conv->flag_zero = false;
 8002894:	f36f 1286 	bfc	r2, #6, #1
 8002898:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800289c:	e662      	b.n	8002564 <cbvprintf+0xd4>
		conv->prec_star = true;
 800289e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	switch (*sp) {
 80028aa:	788b      	ldrb	r3, [r1, #2]
		return ++sp;
 80028ac:	3102      	adds	r1, #2
 80028ae:	e6ba      	b.n	8002626 <cbvprintf+0x196>
					(sint_value_type)va_arg(ap, long long);
 80028b0:	3307      	adds	r3, #7
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	f103 0008 	add.w	r0, r3, #8
 80028ba:	9002      	str	r0, [sp, #8]
				value->ldbl = va_arg(ap, long double);
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80028c4:	e729      	b.n	800271a <cbvprintf+0x28a>
	conv->unsupported |= unsupported;
 80028c6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 80028ca:	4608      	mov	r0, r1
 80028cc:	f3c8 0840 	ubfx	r8, r8, #1, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80028d0:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 80028d4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	switch (conv->specifier) {
 80028d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
	conv->specifier = *sp++;
 80028dc:	f100 0b01 	add.w	fp, r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
 80028e0:	46e6      	mov	lr, ip
	switch (conv->specifier) {
 80028e2:	2a37      	cmp	r2, #55	; 0x37
 80028e4:	d839      	bhi.n	800295a <cbvprintf+0x4ca>
 80028e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80028ea:	005b      	.short	0x005b
 80028ec:	00380038 	.word	0x00380038
 80028f0:	005b0038 	.word	0x005b0038
 80028f4:	005b005b 	.word	0x005b005b
 80028f8:	00380038 	.word	0x00380038
 80028fc:	00380038 	.word	0x00380038
 8002900:	00380038 	.word	0x00380038
 8002904:	00380038 	.word	0x00380038
 8002908:	00380038 	.word	0x00380038
 800290c:	00380038 	.word	0x00380038
 8002910:	00380038 	.word	0x00380038
 8002914:	00380038 	.word	0x00380038
 8002918:	00380088 	.word	0x00380088
 800291c:	00380038 	.word	0x00380038
 8002920:	00380038 	.word	0x00380038
 8002924:	00380038 	.word	0x00380038
 8002928:	005b0038 	.word	0x005b0038
 800292c:	00880038 	.word	0x00880038
 8002930:	005b0129 	.word	0x005b0129
 8002934:	005b005b 	.word	0x005b005b
 8002938:	01290038 	.word	0x01290038
 800293c:	00380038 	.word	0x00380038
 8002940:	00380038 	.word	0x00380038
 8002944:	0088018d 	.word	0x0088018d
 8002948:	0038011c 	.word	0x0038011c
 800294c:	011c0038 	.word	0x011c0038
 8002950:	00880038 	.word	0x00880038
 8002954:	00380038 	.word	0x00380038
 8002958:	0088      	.short	0x0088
		conv->invalid = true;
 800295a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
 8002966:	2000      	movs	r0, #0
	conv->unsupported |= unsupported;
 8002968:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
			= (enum length_mod_enum)conv->length_mod;
 800296c:	f3cc 01c3 	ubfx	r1, ip, #3, #4
	conv->unsupported |= unsupported;
 8002970:	f368 0341 	bfi	r3, r8, #1, #1
		if (conv->width_star) {
 8002974:	f01c 0f01 	tst.w	ip, #1
	conv->unsupported |= unsupported;
 8002978:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		enum length_mod_enum length_mod
 800297c:	460a      	mov	r2, r1
		if (conv->prec_star) {
 800297e:	f00c 0304 	and.w	r3, ip, #4
		if (conv->width_star) {
 8002982:	f43f ae9e 	beq.w	80026c2 <cbvprintf+0x232>
			width = va_arg(ap, int);
 8002986:	f8dd c008 	ldr.w	ip, [sp, #8]
 800298a:	f85c 9b04 	ldr.w	r9, [ip], #4
			if (width < 0) {
 800298e:	f1b9 0f00 	cmp.w	r9, #0
 8002992:	f2c0 81fa 	blt.w	8002d8a <cbvprintf+0x8fa>
		if (conv->invalid || conv->unsupported) {
 8002996:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
			width = va_arg(ap, int);
 800299a:	f8cd c008 	str.w	ip, [sp, #8]
 800299e:	e69b      	b.n	80026d8 <cbvprintf+0x248>
		conv->specifier_cat = SPECIFIER_FP;
 80029a0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 80029a4:	2004      	movs	r0, #4
 80029a6:	f360 0302 	bfi	r3, r0, #0, #3
 80029aa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			break;
 80029ae:	f04f 0801 	mov.w	r8, #1
 80029b2:	e7d9      	b.n	8002968 <cbvprintf+0x4d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80029b4:	4618      	mov	r0, r3
			if (length_mod == LENGTH_HH) {
 80029b6:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80029b8:	f850 3b04 	ldr.w	r3, [r0], #4
 80029bc:	930a      	str	r3, [sp, #40]	; 0x28
 80029be:	ea4f 73e3 	mov.w	r3, r3, asr #31
 80029c2:	9002      	str	r0, [sp, #8]
 80029c4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80029c6:	f040 81f1 	bne.w	8002dac <cbvprintf+0x91c>
				value->uint = (unsigned char)value->uint;
 80029ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80029ce:	930a      	str	r3, [sp, #40]	; 0x28
 80029d0:	2300      	movs	r3, #0
 80029d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80029d4:	e6a1      	b.n	800271a <cbvprintf+0x28a>
					(uint_value_type)va_arg(ap, size_t);
 80029d6:	4618      	mov	r0, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 80029dc:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
 80029de:	f850 3b04 	ldr.w	r3, [r0], #4
 80029e2:	9002      	str	r0, [sp, #8]
 80029e4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 80029e6:	d0f0      	beq.n	80029ca <cbvprintf+0x53a>
			} else if (length_mod == LENGTH_H) {
 80029e8:	2a02      	cmp	r2, #2
 80029ea:	f47f ae96 	bne.w	800271a <cbvprintf+0x28a>
				value->uint = (unsigned short)value->uint;
 80029ee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80029f2:	930a      	str	r3, [sp, #40]	; 0x28
 80029f4:	2300      	movs	r3, #0
 80029f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80029f8:	e68f      	b.n	800271a <cbvprintf+0x28a>
		conv->specifier_cat = SPECIFIER_UINT;
 80029fa:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80029fe:	2002      	movs	r0, #2
 8002a00:	f360 0202 	bfi	r2, r0, #0, #3
 8002a04:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a08:	f00c 0278 	and.w	r2, ip, #120	; 0x78
 8002a0c:	2a40      	cmp	r2, #64	; 0x40
 8002a0e:	d105      	bne.n	8002a1c <cbvprintf+0x58c>
			conv->invalid = true;
 8002a10:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8002a14:	f041 0101 	orr.w	r1, r1, #1
 8002a18:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
 8002a1c:	2b63      	cmp	r3, #99	; 0x63
 8002a1e:	d1a3      	bne.n	8002968 <cbvprintf+0x4d8>
	conv->unsupported |= unsupported;
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	bf18      	it	ne
 8002a24:	f048 0801 	orrne.w	r8, r8, #1
 8002a28:	e79e      	b.n	8002968 <cbvprintf+0x4d8>
					value->sint = va_arg(ap, long);
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f852 3b04 	ldr.w	r3, [r2], #4
 8002a30:	930a      	str	r3, [sp, #40]	; 0x28
 8002a32:	17db      	asrs	r3, r3, #31
 8002a34:	9202      	str	r2, [sp, #8]
 8002a36:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
 8002a38:	e66f      	b.n	800271a <cbvprintf+0x28a>
		switch (conv->specifier) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9303      	str	r3, [sp, #12]
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002a3e:	f10d 0a26 	add.w	sl, sp, #38	; 0x26
 8002a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002a46:	f8cd a000 	str.w	sl, [sp]
 8002a4a:	ab04      	add	r3, sp, #16
 8002a4c:	aa0c      	add	r2, sp, #48	; 0x30
 8002a4e:	f7ff fcb9 	bl	80023c4 <encode_uint>
 8002a52:	4606      	mov	r6, r0
			if (precision >= 0) {
 8002a54:	f1b8 0f00 	cmp.w	r8, #0
 8002a58:	db0c      	blt.n	8002a74 <cbvprintf+0x5e4>
				conv->flag_zero = false;
 8002a5a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002a5e:	f36f 1386 	bfc	r3, #6, #1
 8002a62:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8002a66:	ebaa 0306 	sub.w	r3, sl, r6
				if (len < (size_t)precision) {
 8002a6a:	4598      	cmp	r8, r3
 8002a6c:	d902      	bls.n	8002a74 <cbvprintf+0x5e4>
					conv->pad0_value = precision - (int)len;
 8002a6e:	eba8 0303 	sub.w	r3, r8, r3
 8002a72:	930d      	str	r3, [sp, #52]	; 0x34
		if (bps == NULL) {
 8002a74:	2e00      	cmp	r6, #0
 8002a76:	f43f aeb0 	beq.w	80027da <cbvprintf+0x34a>
		if (sign != 0) {
 8002a7a:	9a03      	ldr	r2, [sp, #12]
		nj_len += conv->pad0_value;
 8002a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		size_t nj_len = (bpe - bps);
 8002a7e:	ebaa 0006 	sub.w	r0, sl, r6
		if (sign != 0) {
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	f000 81e1 	beq.w	8002e4a <cbvprintf+0x9ba>
			nj_len += 1U;
 8002a88:	3001      	adds	r0, #1
 8002a8a:	46d0      	mov	r8, sl
		if (conv->altform_0c) {
 8002a8c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8002a90:	06d1      	lsls	r1, r2, #27
 8002a92:	f140 813a 	bpl.w	8002d0a <cbvprintf+0x87a>
			nj_len += 2U;
 8002a96:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
 8002a98:	4418      	add	r0, r3
		if (conv->pad_fp) {
 8002a9a:	0653      	lsls	r3, r2, #25
			nj_len += conv->pad0_pre_exp;
 8002a9c:	bf44      	itt	mi
 8002a9e:	9b0e      	ldrmi	r3, [sp, #56]	; 0x38
 8002aa0:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
 8002aa2:	f1b9 0f00 	cmp.w	r9, #0
 8002aa6:	f340 8105 	ble.w	8002cb4 <cbvprintf+0x824>
			if (!conv->flag_dash) {
 8002aaa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002aae:	0759      	lsls	r1, r3, #29
			width -= (int)nj_len;
 8002ab0:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
 8002ab4:	f3c3 0a80 	ubfx	sl, r3, #2, #1
 8002ab8:	f100 80fc 	bmi.w	8002cb4 <cbvprintf+0x824>
				if (conv->flag_zero) {
 8002abc:	065b      	lsls	r3, r3, #25
 8002abe:	f140 8188 	bpl.w	8002dd2 <cbvprintf+0x942>
					if (sign != 0) {
 8002ac2:	9b03      	ldr	r3, [sp, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 817a 	beq.w	8002dbe <cbvprintf+0x92e>
						OUTC(sign);
 8002aca:	4618      	mov	r0, r3
 8002acc:	4621      	mov	r1, r4
 8002ace:	47b8      	blx	r7
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	f6ff acf6 	blt.w	80024c2 <cbvprintf+0x32>
				while (width-- > 0) {
 8002ad6:	f1b9 0f00 	cmp.w	r9, #0
						OUTC(sign);
 8002ada:	f105 0501 	add.w	r5, r5, #1
				while (width-- > 0) {
 8002ade:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8002ae2:	f340 814e 	ble.w	8002d82 <cbvprintf+0x8f2>
						sign = 0;
 8002ae6:	f8cd a00c 	str.w	sl, [sp, #12]
				while (width-- > 0) {
 8002aea:	2230      	movs	r2, #48	; 0x30
 8002aec:	3501      	adds	r5, #1
 8002aee:	469a      	mov	sl, r3
 8002af0:	441d      	add	r5, r3
 8002af2:	4691      	mov	r9, r2
 8002af4:	e006      	b.n	8002b04 <cbvprintf+0x674>
 8002af6:	f1ba 0f00 	cmp.w	sl, #0
 8002afa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8002afe:	f340 80d7 	ble.w	8002cb0 <cbvprintf+0x820>
 8002b02:	469a      	mov	sl, r3
					OUTC(pad);
 8002b04:	4621      	mov	r1, r4
 8002b06:	4648      	mov	r0, r9
 8002b08:	47b8      	blx	r7
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	eba5 020a 	sub.w	r2, r5, sl
 8002b10:	daf1      	bge.n	8002af6 <cbvprintf+0x666>
 8002b12:	e4d6      	b.n	80024c2 <cbvprintf+0x32>
				value->sint = va_arg(ap, int);
 8002b14:	1d18      	adds	r0, r3, #4
 8002b16:	9002      	str	r0, [sp, #8]
					value->uint = (wchar_t)va_arg(ap,
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b20:	e5fb      	b.n	800271a <cbvprintf+0x28a>
		conv->specifier_cat = SPECIFIER_PTR;
 8002b22:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002b26:	2003      	movs	r0, #3
		if (conv->length_mod != LENGTH_NONE) {
 8002b28:	f01c 0f78 	tst.w	ip, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
 8002b2c:	f360 0302 	bfi	r3, r0, #0, #3
	conv->unsupported |= unsupported;
 8002b30:	bf18      	it	ne
 8002b32:	f048 0801 	orrne.w	r8, r8, #1
		conv->specifier_cat = SPECIFIER_PTR;
 8002b36:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 8002b3a:	e715      	b.n	8002968 <cbvprintf+0x4d8>
		conv->specifier_cat = SPECIFIER_SINT;
 8002b3c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8002b40:	2101      	movs	r1, #1
 8002b42:	f361 0202 	bfi	r2, r1, #0, #3
 8002b46:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		goto int_conv;
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	e75c      	b.n	8002a08 <cbvprintf+0x578>
			if (conv->flag_plus) {
 8002b4e:	f01a 0f08 	tst.w	sl, #8
 8002b52:	f040 8148 	bne.w	8002de6 <cbvprintf+0x956>
				sign = ' ';
 8002b56:	f01a 0310 	ands.w	r3, sl, #16
 8002b5a:	bf18      	it	ne
 8002b5c:	2320      	movne	r3, #32
 8002b5e:	9303      	str	r3, [sp, #12]
			sint = value->sint;
 8002b60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f6bf af6a 	bge.w	8002a3e <cbvprintf+0x5ae>
				value->uint = (uint_value_type)-sint;
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002b70:	930b      	str	r3, [sp, #44]	; 0x2c
				sign = '-';
 8002b72:	232d      	movs	r3, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
 8002b74:	920a      	str	r2, [sp, #40]	; 0x28
				sign = '-';
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	e761      	b.n	8002a3e <cbvprintf+0x5ae>
		conv->length_mod = LENGTH_Z;
 8002b7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002b7e:	2206      	movs	r2, #6
 8002b80:	f362 03c6 	bfi	r3, r2, #3, #4
	conv->unsupported |= unsupported;
 8002b84:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		conv->length_mod = LENGTH_Z;
 8002b88:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 8002b8c:	784b      	ldrb	r3, [r1, #1]
	conv->unsupported |= unsupported;
 8002b8e:	f3c8 0840 	ubfx	r8, r8, #1, #1
		break;
 8002b92:	e69d      	b.n	80028d0 <cbvprintf+0x440>
		conv->length_mod = LENGTH_T;
 8002b94:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002b98:	2207      	movs	r2, #7
 8002b9a:	e7f1      	b.n	8002b80 <cbvprintf+0x6f0>
		if (*++sp == 'l') {
 8002b9c:	784b      	ldrb	r3, [r1, #1]
	conv->unsupported |= unsupported;
 8002b9e:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		if (*++sp == 'l') {
 8002ba2:	2b6c      	cmp	r3, #108	; 0x6c
	conv->unsupported |= unsupported;
 8002ba4:	f3c8 0840 	ubfx	r8, r8, #1, #1
		if (*++sp == 'l') {
 8002ba8:	f000 8145 	beq.w	8002e36 <cbvprintf+0x9a6>
			conv->length_mod = LENGTH_L;
 8002bac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	f361 02c6 	bfi	r2, r1, #3, #4
 8002bb6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8002bba:	e689      	b.n	80028d0 <cbvprintf+0x440>
		conv->length_mod = LENGTH_J;
 8002bbc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	e7dd      	b.n	8002b80 <cbvprintf+0x6f0>
		if (*++sp == 'h') {
 8002bc4:	784b      	ldrb	r3, [r1, #1]
	conv->unsupported |= unsupported;
 8002bc6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		if (*++sp == 'h') {
 8002bca:	2b68      	cmp	r3, #104	; 0x68
	conv->unsupported |= unsupported;
 8002bcc:	f3c8 0840 	ubfx	r8, r8, #1, #1
		if (*++sp == 'h') {
 8002bd0:	f000 8127 	beq.w	8002e22 <cbvprintf+0x992>
			conv->length_mod = LENGTH_H;
 8002bd4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8002bd8:	2102      	movs	r1, #2
 8002bda:	f361 02c6 	bfi	r2, r1, #3, #4
 8002bde:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8002be2:	e675      	b.n	80028d0 <cbvprintf+0x440>
		conv->unsupported = true;
 8002be4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conv->specifier = *sp++;
 8002be8:	784b      	ldrb	r3, [r1, #1]
		conv->unsupported = true;
 8002bea:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8002bee:	f022 0202 	bic.w	r2, r2, #2
 8002bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf6:	f042 0202 	orr.w	r2, r2, #2
 8002bfa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
		break;
 8002bfe:	f04f 0801 	mov.w	r8, #1
 8002c02:	e665      	b.n	80028d0 <cbvprintf+0x440>
		conv->specifier_cat = SPECIFIER_PTR;
 8002c04:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f360 0302 	bfi	r3, r0, #0, #3
 8002c0e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002c12:	f00c 0378 	and.w	r3, ip, #120	; 0x78
	conv->unsupported |= unsupported;
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	bf08      	it	eq
 8002c1a:	f048 0801 	orreq.w	r8, r8, #1
 8002c1e:	e6a3      	b.n	8002968 <cbvprintf+0x4d8>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c22:	f88d 3010 	strb.w	r3, [sp, #16]
		char sign = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	9303      	str	r3, [sp, #12]
			bpe = buf + 1;
 8002c2a:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
 8002c2e:	ae04      	add	r6, sp, #16
		size_t nj_len = (bpe - bps);
 8002c30:	2001      	movs	r0, #1
 8002c32:	e72b      	b.n	8002a8c <cbvprintf+0x5fc>
			OUTC('%');
 8002c34:	4621      	mov	r1, r4
 8002c36:	2025      	movs	r0, #37	; 0x25
 8002c38:	47b8      	blx	r7
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	f6ff ac41 	blt.w	80024c2 <cbvprintf+0x32>
 8002c40:	3501      	adds	r5, #1
 8002c42:	465e      	mov	r6, fp
 8002c44:	e439      	b.n	80024ba <cbvprintf+0x2a>
			if (precision >= 0) {
 8002c46:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
 8002c4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if (precision >= 0) {
 8002c4c:	f2c0 80ce 	blt.w	8002dec <cbvprintf+0x95c>
				len = strnlen(bps, precision);
 8002c50:	4641      	mov	r1, r8
 8002c52:	4630      	mov	r0, r6
 8002c54:	f00e fabc 	bl	80111d0 <strnlen>
			bpe = bps + len;
 8002c58:	eb06 0800 	add.w	r8, r6, r0
		if (bps == NULL) {
 8002c5c:	2e00      	cmp	r6, #0
 8002c5e:	f43f adbc 	beq.w	80027da <cbvprintf+0x34a>
		char sign = 0;
 8002c62:	2200      	movs	r2, #0
		nj_len += conv->pad0_value;
 8002c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		char sign = 0;
 8002c66:	9203      	str	r2, [sp, #12]
 8002c68:	e710      	b.n	8002a8c <cbvprintf+0x5fc>
			if (value->ptr != NULL) {
 8002c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	f040 80c1 	bne.w	8002df4 <cbvprintf+0x964>
 8002c72:	4e77      	ldr	r6, [pc, #476]	; (8002e50 <cbvprintf+0x9c0>)
		char sign = 0;
 8002c74:	9003      	str	r0, [sp, #12]
 8002c76:	4603      	mov	r3, r0
			bpe = bps + 5;
 8002c78:	f106 0805 	add.w	r8, r6, #5
		size_t nj_len = (bpe - bps);
 8002c7c:	2005      	movs	r0, #5
 8002c7e:	e705      	b.n	8002a8c <cbvprintf+0x5fc>
				store_count(conv, value->ptr, count);
 8002c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8002c82:	2907      	cmp	r1, #7
 8002c84:	f63f ada9 	bhi.w	80027da <cbvprintf+0x34a>
 8002c88:	e8df f001 	tbb	[pc, r1]
 8002c8c:	040c0f04 	.word	0x040c0f04
 8002c90:	04040707 	.word	0x04040707
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002c94:	601d      	str	r5, [r3, #0]
 8002c96:	465e      	mov	r6, fp
 8002c98:	e40f      	b.n	80024ba <cbvprintf+0x2a>
		*(intmax_t *)dp = (intmax_t)count;
 8002c9a:	17ea      	asrs	r2, r5, #31
 8002c9c:	601d      	str	r5, [r3, #0]
 8002c9e:	465e      	mov	r6, fp
 8002ca0:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
 8002ca2:	e40a      	b.n	80024ba <cbvprintf+0x2a>
		*(short *)dp = (short)count;
 8002ca4:	801d      	strh	r5, [r3, #0]
 8002ca6:	465e      	mov	r6, fp
 8002ca8:	e407      	b.n	80024ba <cbvprintf+0x2a>
		*(signed char *)dp = (signed char)count;
 8002caa:	701d      	strb	r5, [r3, #0]
 8002cac:	465e      	mov	r6, fp
 8002cae:	e404      	b.n	80024ba <cbvprintf+0x2a>
					OUTC(pad);
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4615      	mov	r5, r2
		if (sign != 0) {
 8002cb4:	9b03      	ldr	r3, [sp, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d064      	beq.n	8002d84 <cbvprintf+0x8f4>
			OUTC(sign);
 8002cba:	9803      	ldr	r0, [sp, #12]
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	47b8      	blx	r7
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	f6ff abfe 	blt.w	80024c2 <cbvprintf+0x32>
 8002cc6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8002cca:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8002ccc:	06d0      	lsls	r0, r2, #27
 8002cce:	d44e      	bmi.n	8002d6e <cbvprintf+0x8de>
 8002cd0:	0711      	lsls	r1, r2, #28
 8002cd2:	d44c      	bmi.n	8002d6e <cbvprintf+0x8de>
			if (conv->altform_0c) {
 8002cd4:	06d3      	lsls	r3, r2, #27
 8002cd6:	d507      	bpl.n	8002ce8 <cbvprintf+0x858>
				OUTC(conv->specifier);
 8002cd8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8002cdc:	4621      	mov	r1, r4
 8002cde:	47b8      	blx	r7
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f6ff abee 	blt.w	80024c2 <cbvprintf+0x32>
 8002ce6:	3501      	adds	r5, #1
			pad_len = conv->pad0_value;
 8002ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	dd11      	ble.n	8002d12 <cbvprintf+0x882>
 8002cee:	eb03 0a05 	add.w	sl, r3, r5
 8002cf2:	e001      	b.n	8002cf8 <cbvprintf+0x868>
 8002cf4:	4555      	cmp	r5, sl
 8002cf6:	d00d      	beq.n	8002d14 <cbvprintf+0x884>
				OUTC('0');
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	2030      	movs	r0, #48	; 0x30
 8002cfc:	47b8      	blx	r7
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	f105 0501 	add.w	r5, r5, #1
 8002d04:	daf6      	bge.n	8002cf4 <cbvprintf+0x864>
 8002d06:	f7ff bbdc 	b.w	80024c2 <cbvprintf+0x32>
		} else if (conv->altform_0) {
 8002d0a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8002d0c:	bf48      	it	mi
 8002d0e:	3001      	addmi	r0, #1
 8002d10:	e6c2      	b.n	8002a98 <cbvprintf+0x608>
			while (pad_len-- > 0) {
 8002d12:	46aa      	mov	sl, r5
 8002d14:	4623      	mov	r3, r4
	size_t count = 0;
 8002d16:	2500      	movs	r5, #0
 8002d18:	4644      	mov	r4, r8
 8002d1a:	4698      	mov	r8, r3
 8002d1c:	e007      	b.n	8002d2e <cbvprintf+0x89e>
		int rc = out((int)*sp++, ctx);
 8002d1e:	7830      	ldrb	r0, [r6, #0]
 8002d20:	47b8      	blx	r7
		if (rc < 0) {
 8002d22:	2800      	cmp	r0, #0
		int rc = out((int)*sp++, ctx);
 8002d24:	f106 0601 	add.w	r6, r6, #1
		if (rc < 0) {
 8002d28:	f6ff abcb 	blt.w	80024c2 <cbvprintf+0x32>
		++count;
 8002d2c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002d2e:	42a6      	cmp	r6, r4
		int rc = out((int)*sp++, ctx);
 8002d30:	4641      	mov	r1, r8
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8002d32:	d3f4      	bcc.n	8002d1e <cbvprintf+0x88e>
 8002d34:	b914      	cbnz	r4, 8002d3c <cbvprintf+0x8ac>
 8002d36:	7830      	ldrb	r0, [r6, #0]
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	d1f1      	bne.n	8002d20 <cbvprintf+0x890>
			OUTS(bps, bpe);
 8002d3c:	2d00      	cmp	r5, #0
	return (int)count;
 8002d3e:	4644      	mov	r4, r8
 8002d40:	4628      	mov	r0, r5
			OUTS(bps, bpe);
 8002d42:	f6ff abbe 	blt.w	80024c2 <cbvprintf+0x32>
		while (width > 0) {
 8002d46:	f1b9 0f00 	cmp.w	r9, #0
			OUTS(bps, bpe);
 8002d4a:	44aa      	add	sl, r5
		while (width > 0) {
 8002d4c:	f77f ad44 	ble.w	80027d8 <cbvprintf+0x348>
 8002d50:	eb09 050a 	add.w	r5, r9, sl
 8002d54:	e002      	b.n	8002d5c <cbvprintf+0x8cc>
 8002d56:	45aa      	cmp	sl, r5
 8002d58:	f43f ad3f 	beq.w	80027da <cbvprintf+0x34a>
			OUTC(' ');
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	2020      	movs	r0, #32
 8002d60:	47b8      	blx	r7
 8002d62:	2800      	cmp	r0, #0
 8002d64:	f10a 0a01 	add.w	sl, sl, #1
 8002d68:	daf5      	bge.n	8002d56 <cbvprintf+0x8c6>
 8002d6a:	f7ff bbaa 	b.w	80024c2 <cbvprintf+0x32>
				OUTC('0');
 8002d6e:	4621      	mov	r1, r4
 8002d70:	2030      	movs	r0, #48	; 0x30
 8002d72:	47b8      	blx	r7
 8002d74:	2800      	cmp	r0, #0
 8002d76:	f6ff aba4 	blt.w	80024c2 <cbvprintf+0x32>
 8002d7a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7a8      	b.n	8002cd4 <cbvprintf+0x844>
				while (width-- > 0) {
 8002d82:	4699      	mov	r9, r3
 8002d84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8002d88:	e7a0      	b.n	8002ccc <cbvprintf+0x83c>
				conv->flag_dash = true;
 8002d8a:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
			width = va_arg(ap, int);
 8002d8e:	f8cd c008 	str.w	ip, [sp, #8]
				conv->flag_dash = true;
 8002d92:	f04a 0a04 	orr.w	sl, sl, #4
				width = -width;
 8002d96:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
 8002d9a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
				width = -width;
 8002d9e:	e49b      	b.n	80026d8 <cbvprintf+0x248>
			value->ptr = va_arg(ap, void *);
 8002da0:	461a      	mov	r2, r3
 8002da2:	f852 3b04 	ldr.w	r3, [r2], #4
 8002da6:	9202      	str	r2, [sp, #8]
 8002da8:	930a      	str	r3, [sp, #40]	; 0x28
 8002daa:	e4b6      	b.n	800271a <cbvprintf+0x28a>
			} else if (length_mod == LENGTH_H) {
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	f47f acb4 	bne.w	800271a <cbvprintf+0x28a>
				value->sint = (short)value->sint;
 8002db2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8002db6:	930a      	str	r3, [sp, #40]	; 0x28
 8002db8:	17db      	asrs	r3, r3, #31
 8002dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dbc:	e4ad      	b.n	800271a <cbvprintf+0x28a>
				while (width-- > 0) {
 8002dbe:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8002dc2:	f1b9 0f00 	cmp.w	r9, #0
 8002dc6:	bfd8      	it	le
 8002dc8:	4699      	movle	r9, r3
 8002dca:	f77f af7f 	ble.w	8002ccc <cbvprintf+0x83c>
 8002dce:	2230      	movs	r2, #48	; 0x30
 8002dd0:	e68c      	b.n	8002aec <cbvprintf+0x65c>
 8002dd2:	f1b9 0f00 	cmp.w	r9, #0
 8002dd6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8002dda:	bfc8      	it	gt
 8002ddc:	2220      	movgt	r2, #32
 8002dde:	f73f ae85 	bgt.w	8002aec <cbvprintf+0x65c>
 8002de2:	4699      	mov	r9, r3
 8002de4:	e766      	b.n	8002cb4 <cbvprintf+0x824>
				sign = '+';
 8002de6:	232b      	movs	r3, #43	; 0x2b
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	e6b9      	b.n	8002b60 <cbvprintf+0x6d0>
				len = strlen(bps);
 8002dec:	4630      	mov	r0, r6
 8002dee:	f7fe f889 	bl	8000f04 <strlen>
 8002df2:	e731      	b.n	8002c58 <cbvprintf+0x7c8>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002df4:	f10d 0a26 	add.w	sl, sp, #38	; 0x26
 8002df8:	ab04      	add	r3, sp, #16
 8002dfa:	f8cd a000 	str.w	sl, [sp]
 8002dfe:	aa0c      	add	r2, sp, #48	; 0x30
 8002e00:	2100      	movs	r1, #0
 8002e02:	f7ff fadf 	bl	80023c4 <encode_uint>
				conv->altform_0c = true;
 8002e06:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8002e0a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002e0e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8002e1a:	2300      	movs	r3, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002e1c:	4606      	mov	r6, r0
		char sign = 0;
 8002e1e:	9303      	str	r3, [sp, #12]
				goto prec_int_pad0;
 8002e20:	e618      	b.n	8002a54 <cbvprintf+0x5c4>
			conv->length_mod = LENGTH_HH;
 8002e22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002e26:	2201      	movs	r2, #1
 8002e28:	f362 03c6 	bfi	r3, r2, #3, #4
 8002e2c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 8002e30:	788b      	ldrb	r3, [r1, #2]
			++sp;
 8002e32:	1c88      	adds	r0, r1, #2
 8002e34:	e54c      	b.n	80028d0 <cbvprintf+0x440>
			conv->length_mod = LENGTH_LL;
 8002e36:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	f362 03c6 	bfi	r3, r2, #3, #4
 8002e40:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
 8002e44:	788b      	ldrb	r3, [r1, #2]
			++sp;
 8002e46:	1c88      	adds	r0, r1, #2
 8002e48:	e542      	b.n	80028d0 <cbvprintf+0x440>
 8002e4a:	46d0      	mov	r8, sl
 8002e4c:	e61e      	b.n	8002a8c <cbvprintf+0x5fc>
 8002e4e:	bf00      	nop
 8002e50:	08011dc0 	.word	0x08011dc0

08002e54 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <stm32l4_init>:
	__asm__ volatile(
 8002e58:	f04f 0210 	mov.w	r2, #16
 8002e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e60:	f382 8812 	msr	BASEPRI_MAX, r2
 8002e64:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <stm32l4_init+0x24>)
 8002e72:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <stm32l4_init+0x28>)
 8002e74:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	200002f0 	.word	0x200002f0
 8002e80:	003d0900 	.word	0x003d0900

08002e84 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002e84:	2000      	movs	r0, #0
 8002e86:	4770      	bx	lr

08002e88 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8002e88:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 8002e8a:	f000 f815 	bl	8002eb8 <__do_global_ctors_aux>
	__do_init_array_aux();
}
 8002e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
 8002e92:	f000 b801 	b.w	8002e98 <__do_init_array_aux>
 8002e96:	bf00      	nop

08002e98 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8002e98:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 8002e9a:	4c05      	ldr	r4, [pc, #20]	; (8002eb0 <__do_init_array_aux+0x18>)
 8002e9c:	4d05      	ldr	r5, [pc, #20]	; (8002eb4 <__do_init_array_aux+0x1c>)
 8002e9e:	42ac      	cmp	r4, r5
 8002ea0:	d204      	bcs.n	8002eac <__do_init_array_aux+0x14>
		func < __init_array_end;
		func++) {
		(*func)();
 8002ea2:	f854 3b04 	ldr.w	r3, [r4], #4
 8002ea6:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8002ea8:	42ac      	cmp	r4, r5
 8002eaa:	d3fa      	bcc.n	8002ea2 <__do_init_array_aux+0xa>
	}
}
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
 8002eae:	bf00      	nop
 8002eb0:	08011b94 	.word	0x08011b94
 8002eb4:	08011b98 	.word	0x08011b98

08002eb8 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8002eb8:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8002eba:	4d06      	ldr	r5, [pc, #24]	; (8002ed4 <__do_global_ctors_aux+0x1c>)
 8002ebc:	682c      	ldr	r4, [r5, #0]

	while (nCtors >= 1U) {
 8002ebe:	b144      	cbz	r4, 8002ed2 <__do_global_ctors_aux+0x1a>
 8002ec0:	1c63      	adds	r3, r4, #1
 8002ec2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		__CTOR_LIST__[nCtors--]();
 8002ec6:	3c01      	subs	r4, #1
 8002ec8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002ecc:	4798      	blx	r3
	while (nCtors >= 1U) {
 8002ece:	2c00      	cmp	r4, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <__do_global_ctors_aux+0xe>
	}
}
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	08011b8c 	.word	0x08011b8c

08002ed8 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	4770      	bx	lr

08002edc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002edc:	4901      	ldr	r1, [pc, #4]	; (8002ee4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8002ede:	2210      	movs	r2, #16
	str	r2, [r1]
 8002ee0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8002ee2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002ee4:	e000ed10 	.word	0xe000ed10

08002ee8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8002ee8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8002eea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002eec:	f380 8811 	msr	BASEPRI, r0
	isb
 8002ef0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8002ef4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8002ef8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8002efa:	b662      	cpsie	i
	isb
 8002efc:	f3bf 8f6f 	isb	sy

	bx	lr
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002f04:	f00a b8a4 	b.w	800d050 <z_fatal_error>

08002f08 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002f08:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002f0a:	6800      	ldr	r0, [r0, #0]
 8002f0c:	f00a b8a0 	b.w	800d050 <z_fatal_error>

08002f10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002f10:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db08      	blt.n	8002f28 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	4905      	ldr	r1, [pc, #20]	; (8002f2c <arch_irq_enable+0x1c>)
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f000 001f 	and.w	r0, r0, #31
 8002f20:	fa02 f000 	lsl.w	r0, r2, r0
 8002f24:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 8002f30:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0d      	blt.n	8002f52 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	4906      	ldr	r1, [pc, #24]	; (8002f54 <arch_irq_disable+0x24>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	3320      	adds	r3, #32
 8002f3e:	f000 001f 	and.w	r0, r0, #31
 8002f42:	fa02 f000 	lsl.w	r0, r2, r0
 8002f46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f4e:	f3bf 8f6f 	isb	sy
}
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <arch_irq_is_enabled+0x18>)
 8002f5a:	0942      	lsrs	r2, r0, #5
 8002f5c:	f000 001f 	and.w	r0, r0, #31
 8002f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f64:	2301      	movs	r3, #1
 8002f66:	fa03 f000 	lsl.w	r0, r3, r0
}
 8002f6a:	4010      	ands	r0, r2
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000e100 	.word	0xe000e100

08002f74 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8002f74:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002f76:	b243      	sxtb	r3, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	0109      	lsls	r1, r1, #4
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	db06      	blt.n	8002f8e <z_arm_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002f84:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002f88:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8002f8c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <z_arm_irq_priority_set+0x28>)
 8002f90:	f000 000f 	and.w	r0, r0, #15
 8002f94:	4403      	add	r3, r0
 8002f96:	7619      	strb	r1, [r3, #24]
}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ecfc 	.word	0xe000ecfc

08002fa0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff bfae 	b.w	8002f04 <z_arm_fatal_error>

08002fa8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002fa8:	b508      	push	{r3, lr}
	handler();
 8002faa:	f000 f805 	bl	8002fb8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002fb2:	f000 b8e3 	b.w	800317c <z_arm_exc_exit>
 8002fb6:	bf00      	nop

08002fb8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002fb8:	bf30      	wfi
    b z_SysNmiOnReset
 8002fba:	f7ff bffd 	b.w	8002fb8 <z_SysNmiOnReset>
 8002fbe:	bf00      	nop

08002fc0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002fc0:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8002fc2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <z_arm_prep_c+0x44>)
 8002fc6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002fca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fd0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fd8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002fe0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8002fe8:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8002fec:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8002ff0:	f00a f866 	bl	800d0c0 <z_bss_zero>
	z_data_copy();
 8002ff4:	f00b fba2 	bl	800e73c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002ff8:	f000 f9e2 	bl	80033c0 <z_arm_interrupt_init>
	z_cstart();
 8002ffc:	f00a f86a 	bl	800d0d4 <z_cstart>
 8003000:	08000000 	.word	0x08000000
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
 8003008:	b410      	push	{r4}
	/* store off key and return value */
	_current->arch.basepri = key;
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <arch_swap+0x30>)
	_current->arch.basepri = key;
 800300e:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003010:	6824      	ldr	r4, [r4, #0]

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <arch_swap+0x34>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003014:	e9c3 041e 	strd	r0, r4, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003018:	684b      	ldr	r3, [r1, #4]
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301e:	2000      	movs	r0, #0
 8003020:	604b      	str	r3, [r1, #4]
 8003022:	f380 8811 	msr	BASEPRI, r0
 8003026:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800302a:	6893      	ldr	r3, [r2, #8]
}
 800302c:	bc10      	pop	{r4}
 800302e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000159c 	.word	0x2000159c
 8003038:	08012b48 	.word	0x08012b48
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003040:	4912      	ldr	r1, [pc, #72]	; (800308c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003042:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003044:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003048:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800304a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800304e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003052:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003054:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003058:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800305c:	4f0c      	ldr	r7, [pc, #48]	; (8003090 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800305e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003062:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003064:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003066:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003068:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 800306a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 800306c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 800306e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003072:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003074:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003076:	f000 f9e7 	bl	8003448 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800307a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800307e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003082:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003086:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800308a:	4770      	bx	lr
    ldr r1, =_kernel
 800308c:	2000159c 	.word	0x2000159c
    ldr v4, =_SCS_ICSR
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003094:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003098:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800309a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800309e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80030a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80030a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80030a8:	2902      	cmp	r1, #2
    beq _oops
 80030aa:	d0ff      	beq.n	80030ac <_oops>

080030ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80030ac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80030ae:	f7ff ff2b 	bl	8002f08 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80030b2:	bd01      	pop	{r0, pc}

080030b4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80030b4:	b410      	push	{r4}
 80030b6:	9901      	ldr	r1, [sp, #4]
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
	iframe->a2 = (uint32_t)p1;
 80030b8:	f842 1c1c 	str.w	r1, [r2, #-28]
{
 80030bc:	9902      	ldr	r1, [sp, #8]
	iframe->a3 = (uint32_t)p2;
 80030be:	f842 1c18 	str.w	r1, [r2, #-24]
	iframe->pc &= 0xfffffffe;
 80030c2:	490a      	ldr	r1, [pc, #40]	; (80030ec <arch_new_thread+0x38>)
	iframe->a1 = (uint32_t)entry;
 80030c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->pc &= 0xfffffffe;
 80030c8:	f021 0101 	bic.w	r1, r1, #1
	iframe->a4 = (uint32_t)p3;
 80030cc:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
 80030ce:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
 80030d2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 80030d6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80030da:	f1a2 0120 	sub.w	r1, r2, #32
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 80030de:	2300      	movs	r3, #0
	iframe->xpsr =
 80030e0:	f842 4c04 	str.w	r4, [r2, #-4]
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80030e4:	bc10      	pop	{r4}
	thread->callee_saved.psp = (uint32_t)iframe;
 80030e6:	6501      	str	r1, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80030e8:	6783      	str	r3, [r0, #120]	; 0x78
}
 80030ea:	4770      	bx	lr
 80030ec:	080022dd 	.word	0x080022dd

080030f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <z_check_thread_stack_fail+0x28>)
 80030f2:	689b      	ldr	r3, [r3, #8]
{
 80030f4:	4602      	mov	r2, r0

	if (thread == NULL) {
 80030f6:	b16b      	cbz	r3, 8003114 <z_check_thread_stack_fail+0x24>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80030f8:	f112 0f16 	cmn.w	r2, #22
 80030fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80030fe:	d005      	beq.n	800310c <z_check_thread_stack_fail+0x1c>
 8003100:	f1a0 0320 	sub.w	r3, r0, #32
 8003104:	4293      	cmp	r3, r2
 8003106:	d805      	bhi.n	8003114 <z_check_thread_stack_fail+0x24>
 8003108:	4282      	cmp	r2, r0
 800310a:	d203      	bcs.n	8003114 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800310c:	4281      	cmp	r1, r0
 800310e:	bf28      	it	cs
 8003110:	2000      	movcs	r0, #0
 8003112:	4770      	bx	lr
 8003114:	2000      	movs	r0, #0
}
 8003116:	4770      	bx	lr
 8003118:	2000159c 	.word	0x2000159c

0800311c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 800311c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <arch_switch_to_main_thread+0x28>)
 8003120:	6098      	str	r0, [r3, #8]
{
 8003122:	460d      	mov	r5, r1
 8003124:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003126:	f000 f98f 	bl	8003448 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800312a:	4620      	mov	r0, r4
 800312c:	f385 8809 	msr	PSP, r5
 8003130:	2100      	movs	r1, #0
 8003132:	b663      	cpsie	if
 8003134:	f381 8811 	msr	BASEPRI, r1
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	2200      	movs	r2, #0
 800313e:	2300      	movs	r3, #0
 8003140:	f7ff f8cc 	bl	80022dc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003144:	2000159c 	.word	0x2000159c

08003148 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003148:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800314a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800314e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003152:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003156:	4904      	ldr	r1, [pc, #16]	; (8003168 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003158:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800315a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 800315c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800315e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003162:	4902      	ldr	r1, [pc, #8]	; (800316c <_isr_wrapper+0x24>)
	bx r1
 8003164:	4708      	bx	r1
 8003166:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003168:	080118e4 	.word	0x080118e4
	ldr r1, =z_arm_int_exit
 800316c:	0800317d 	.word	0x0800317d

08003170 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
 8003170:	4603      	mov	r3, r0
	return __cxa_atexit(destructor, objptr, dso);
 8003172:	4608      	mov	r0, r1
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff beaf 	b.w	8002ed8 <__cxa_atexit>
 800317a:	bf00      	nop

0800317c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 800317e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003180:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003182:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003184:	d003      	beq.n	800318e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003186:	4903      	ldr	r1, [pc, #12]	; (8003194 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800318c:	600a      	str	r2, [r1, #0]

0800318e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800318e:	4770      	bx	lr
	ldr r3, =_kernel
 8003190:	2000159c 	.word	0x2000159c
	ldr r1, =_SCS_ICSR
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8003198:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <mem_manage_fault+0x6c>)
 800319c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 800319e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80031a0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80031a2:	07ad      	lsls	r5, r5, #30
{
 80031a4:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80031a6:	d503      	bpl.n	80031b0 <mem_manage_fault+0x18>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 80031a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80031aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ac:	0612      	lsls	r2, r2, #24
 80031ae:	d421      	bmi.n	80031f4 <mem_manage_fault+0x5c>
	uint32_t mmfar = -EINVAL;
 80031b0:	f06f 0515 	mvn.w	r5, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <mem_manage_fault+0x6c>)
 80031b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80031ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031bc:	06d1      	lsls	r1, r2, #27
 80031be:	d40b      	bmi.n	80031d8 <mem_manage_fault+0x40>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80031c2:	079a      	lsls	r2, r3, #30
 80031c4:	d408      	bmi.n	80031d8 <mem_manage_fault+0x40>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80031c6:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <mem_manage_fault+0x6c>)
 80031ca:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 80031cc:	2100      	movs	r1, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80031ce:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80031d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80031d4:	7021      	strb	r1, [r4, #0]

	return reason;
}
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <mem_manage_fault+0x6c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	051b      	lsls	r3, r3, #20
 80031de:	d5f2      	bpl.n	80031c6 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80031e0:	4601      	mov	r1, r0
 80031e2:	4628      	mov	r0, r5
 80031e4:	f7ff ff84 	bl	80030f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d0ec      	beq.n	80031c6 <mem_manage_fault+0x2e>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80031ec:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80031f0:	2002      	movs	r0, #2
 80031f2:	e7e9      	b.n	80031c8 <mem_manage_fault+0x30>
			if (from_hard_fault != 0) {
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d0dd      	beq.n	80031b4 <mem_manage_fault+0x1c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003200:	e7d8      	b.n	80031b4 <mem_manage_fault+0x1c>
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <bus_fault.constprop.0+0x3c>)
 800320a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800320e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003210:	0592      	lsls	r2, r2, #22
 8003212:	d508      	bpl.n	8003226 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003218:	0412      	lsls	r2, r2, #16
 800321a:	d504      	bpl.n	8003226 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 800321c:	b118      	cbz	r0, 8003226 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800321e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <bus_fault.constprop.0+0x3c>)
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800322a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322c:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <bus_fault.constprop.0+0x3c>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003230:	bf58      	it	pl
 8003232:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003234:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8003236:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003238:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800323c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800323e:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8003248:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800324a:	4b53      	ldr	r3, [pc, #332]	; (8003398 <z_arm_fault+0x150>)
 800324c:	685b      	ldr	r3, [r3, #4]
{
 800324e:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003254:	2500      	movs	r5, #0
 8003256:	f385 8811 	msr	BASEPRI, r5
 800325a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800325e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 8003262:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 8003266:	d171      	bne.n	800334c <z_arm_fault+0x104>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003268:	f002 040c 	and.w	r4, r2, #12
 800326c:	2c08      	cmp	r4, #8
 800326e:	d06d      	beq.n	800334c <z_arm_fault+0x104>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003270:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8003272:	bf47      	ittee	mi
 8003274:	460c      	movmi	r4, r1
	*nested_exc = false;
 8003276:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
 8003278:	4604      	movpl	r4, r0
			*nested_exc = true;
 800327a:	2601      	movpl	r6, #1
	*recoverable = false;
 800327c:	2200      	movs	r2, #0
	switch (fault) {
 800327e:	3b03      	subs	r3, #3
	*recoverable = false;
 8003280:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8003284:	2b03      	cmp	r3, #3
 8003286:	d86f      	bhi.n	8003368 <z_arm_fault+0x120>
 8003288:	e8df f003 	tbb	[pc, r3]
 800328c:	022d3943 	.word	0x022d3943
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003290:	4b41      	ldr	r3, [pc, #260]	; (8003398 <z_arm_fault+0x150>)
		reason = usage_fault(esf);
 8003292:	2500      	movs	r5, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800329a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800329c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800329e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 80032a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a2:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80032a6:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	6861      	ldr	r1, [r4, #4]
 80032b0:	68a2      	ldr	r2, [r4, #8]
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	f10d 0c08 	add.w	ip, sp, #8
 80032b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032bc:	6920      	ldr	r0, [r4, #16]
 80032be:	6961      	ldr	r1, [r4, #20]
 80032c0:	69a2      	ldr	r2, [r4, #24]
 80032c2:	69e3      	ldr	r3, [r4, #28]
 80032c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80032c8:	2e00      	cmp	r6, #0
 80032ca:	d042      	beq.n	8003352 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80032cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032d4:	b90a      	cbnz	r2, 80032da <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80032d6:	430b      	orrs	r3, r1
 80032d8:	9309      	str	r3, [sp, #36]	; 0x24
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
 80032da:	a902      	add	r1, sp, #8
 80032dc:	4628      	mov	r0, r5
 80032de:	f7ff fe11 	bl	8002f04 <z_arm_fatal_error>
}
 80032e2:	b00a      	add	sp, #40	; 0x28
 80032e4:	bd70      	pop	{r4, r5, r6, pc}
		reason = bus_fault(esf, 0, recoverable);
 80032e6:	f10d 0107 	add.w	r1, sp, #7
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7ff ff8c 	bl	8003208 <bus_fault.constprop.0>
	if (recoverable) {
 80032f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = bus_fault(esf, 0, recoverable);
 80032f4:	4605      	mov	r5, r0
	if (recoverable) {
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0d8      	beq.n	80032ac <z_arm_fault+0x64>
}
 80032fa:	b00a      	add	sp, #40	; 0x28
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80032fe:	f10d 0207 	add.w	r2, sp, #7
 8003302:	2100      	movs	r1, #0
 8003304:	4620      	mov	r0, r4
 8003306:	f7ff ff47 	bl	8003198 <mem_manage_fault>
	if (recoverable) {
 800330a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = mem_manage_fault(esf, 0, recoverable);
 800330e:	4605      	mov	r5, r0
		break;
 8003310:	e7f1      	b.n	80032f6 <z_arm_fault+0xae>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <z_arm_fault+0x150>)
 8003314:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003316:	f015 0502 	ands.w	r5, r5, #2
 800331a:	d125      	bne.n	8003368 <z_arm_fault+0x120>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	2a00      	cmp	r2, #0
 8003320:	dbc4      	blt.n	80032ac <z_arm_fault+0x64>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	0052      	lsls	r2, r2, #1
 8003326:	d5c1      	bpl.n	80032ac <z_arm_fault+0x64>
	uint16_t fault_insn = *(ret_addr - 1);
 8003328:	69a2      	ldr	r2, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800332a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 800332e:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8003332:	4291      	cmp	r1, r2
 8003334:	d024      	beq.n	8003380 <z_arm_fault+0x138>
		} else if (SCB_MMFSR != 0) {
 8003336:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800333a:	b9ba      	cbnz	r2, 800336c <z_arm_fault+0x124>
		} else if (SCB_BFSR != 0) {
 800333c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003340:	bb02      	cbnz	r2, 8003384 <z_arm_fault+0x13c>
		} else if (SCB_UFSR != 0) {
 8003342:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003344:	b292      	uxth	r2, r2
 8003346:	2a00      	cmp	r2, #0
 8003348:	d0b0      	beq.n	80032ac <z_arm_fault+0x64>
 800334a:	e7a3      	b.n	8003294 <z_arm_fault+0x4c>
	*nested_exc = false;
 800334c:	462e      	mov	r6, r5
		return NULL;
 800334e:	462c      	mov	r4, r5
 8003350:	e794      	b.n	800327c <z_arm_fault+0x34>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003354:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003358:	f023 0301 	bic.w	r3, r3, #1
	z_arm_fatal_error(reason, &esf_copy);
 800335c:	a902      	add	r1, sp, #8
 800335e:	4628      	mov	r0, r5
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
	z_arm_fatal_error(reason, &esf_copy);
 8003362:	f7ff fdcf 	bl	8002f04 <z_arm_fatal_error>
 8003366:	e7bc      	b.n	80032e2 <z_arm_fault+0x9a>
	switch (fault) {
 8003368:	2500      	movs	r5, #0
 800336a:	e79f      	b.n	80032ac <z_arm_fault+0x64>
			reason = mem_manage_fault(esf, 1, recoverable);
 800336c:	f10d 0207 	add.w	r2, sp, #7
 8003370:	2101      	movs	r1, #1
 8003372:	4620      	mov	r0, r4
 8003374:	f7ff ff10 	bl	8003198 <mem_manage_fault>
	if (recoverable) {
 8003378:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = mem_manage_fault(esf, 1, recoverable);
 800337c:	4605      	mov	r5, r0
 800337e:	e7ba      	b.n	80032f6 <z_arm_fault+0xae>
			reason = esf->basic.r0;
 8003380:	6825      	ldr	r5, [r4, #0]
 8003382:	e793      	b.n	80032ac <z_arm_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
 8003384:	f10d 0107 	add.w	r1, sp, #7
 8003388:	2001      	movs	r0, #1
 800338a:	f7ff ff3d 	bl	8003208 <bus_fault.constprop.0>
	if (recoverable) {
 800338e:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = bus_fault(esf, 1, recoverable);
 8003392:	4605      	mov	r5, r0
 8003394:	e7af      	b.n	80032f6 <z_arm_fault+0xae>
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 800339c:	4a02      	ldr	r2, [pc, #8]	; (80033a8 <z_arm_fault_init+0xc>)
 800339e:	6953      	ldr	r3, [r2, #20]
 80033a0:	f043 0310 	orr.w	r3, r3, #16
 80033a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80033ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80033b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80033b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80033b6:	4672      	mov	r2, lr
	bl z_arm_fault
 80033b8:	f7ff ff46 	bl	8003248 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80033bc:	bd01      	pop	{r0, pc}
 80033be:	bf00      	nop

080033c0 <z_arm_interrupt_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	4804      	ldr	r0, [pc, #16]	; (80033d4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	2110      	movs	r1, #16
 80033c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80033c8:	3301      	adds	r3, #1
 80033ca:	2b55      	cmp	r3, #85	; 0x55
 80033cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80033d0:	d1f9      	bne.n	80033c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80033d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80033da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80033e0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80033e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80033e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80033ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80033ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80033f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80033f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80033f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80033fa:	f7ff fde1 	bl	8002fc0 <z_arm_prep_c>
 80033fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8003400:	20003c00 	.word	0x20003c00

08003404 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <z_impl_k_thread_abort+0x24>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4283      	cmp	r3, r0
 800340a:	d001      	beq.n	8003410 <z_impl_k_thread_abort+0xc>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 800340c:	f00b b8e2 	b.w	800e5d4 <z_thread_abort>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003410:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f9      	beq.n	800340c <z_impl_k_thread_abort+0x8>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <z_impl_k_thread_abort+0x28>)
 800341a:	6853      	ldr	r3, [r2, #4]
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6053      	str	r3, [r2, #4]
	z_thread_abort(thread);
 8003422:	f00b b8d7 	b.w	800e5d4 <z_thread_abort>
 8003426:	bf00      	nop
 8003428:	2000159c 	.word	0x2000159c
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <z_arm_configure_static_mpu_regions+0xc>)
 8003432:	4a03      	ldr	r2, [pc, #12]	; (8003440 <z_arm_configure_static_mpu_regions+0x10>)
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <z_arm_configure_static_mpu_regions+0x14>)
 8003436:	2101      	movs	r1, #1
 8003438:	f000 b85e 	b.w	80034f8 <arm_core_mpu_configure_static_mpu_regions>
 800343c:	20028000 	.word	0x20028000
 8003440:	20000000 	.word	0x20000000
 8003444:	08011dc8 	.word	0x08011dc8

08003448 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8003448:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <z_arm_configure_dynamic_mpu_regions+0x1c>)
{
 800344c:	b410      	push	{r4}
	dynamic_regions[region_num].size = guard_size;
 800344e:	2020      	movs	r0, #32
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8003450:	4c05      	ldr	r4, [pc, #20]	; (8003468 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8003452:	609c      	str	r4, [r3, #8]
		guard_start = thread->stack_info.start - guard_size;
 8003454:	3a20      	subs	r2, #32
	dynamic_regions[region_num].size = guard_size;
 8003456:	e9c3 2000 	strd	r2, r0, [r3]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 800345a:	bc10      	pop	{r4}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 b854 	b.w	800350c <arm_core_mpu_configure_dynamic_mpu_regions>
 8003464:	20000d6c 	.word	0x20000d6c
 8003468:	150b0000 	.word	0x150b0000

0800346c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800346c:	4684      	mov	ip, r0
	int i;
	int reg_index = start_reg_index;
 800346e:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
 8003470:	2900      	cmp	r1, #0
 8003472:	d03e      	beq.n	80034f2 <mpu_configure_regions+0x86>
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8003476:	4f1f      	ldr	r7, [pc, #124]	; (80034f4 <mpu_configure_regions+0x88>)
	for (i = 0; i < regions_num; i++) {
 8003478:	f04f 0e00 	mov.w	lr, #0
		if (regions[i].size == 0U) {
 800347c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003480:	b364      	cbz	r4, 80034dc <mpu_configure_regions+0x70>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8003482:	f8dc 5000 	ldr.w	r5, [ip]
 8003486:	b14b      	cbz	r3, 800349c <mpu_configure_regions+0x30>
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
		&&
 8003488:	2c1f      	cmp	r4, #31
 800348a:	d904      	bls.n	8003496 <mpu_configure_regions+0x2a>
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800348c:	ea44 0205 	orr.w	r2, r4, r5
		((part->size & (part->size - 1U)) == 0U)
 8003490:	1e66      	subs	r6, r4, #1
		&&
 8003492:	4232      	tst	r2, r6
 8003494:	d002      	beq.n	800349c <mpu_configure_regions+0x30>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
 8003496:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800349a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800349c:	2c20      	cmp	r4, #32
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800349e:	f8dc 6008 	ldr.w	r6, [ip, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80034a2:	b2c0      	uxtb	r0, r0
	if (size <= 32U) {
 80034a4:	d921      	bls.n	80034ea <mpu_configure_regions+0x7e>
	if (size > (1UL << 31)) {
 80034a6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80034aa:	d820      	bhi.n	80034ee <mpu_configure_regions+0x82>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80034ac:	3c01      	subs	r4, #1
 80034ae:	fab4 f484 	clz	r4, r4
 80034b2:	f1c4 041f 	rsb	r4, r4, #31
 80034b6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 80034b8:	2807      	cmp	r0, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80034ba:	ea44 0406 	orr.w	r4, r4, r6
 80034be:	d8ea      	bhi.n	8003496 <mpu_configure_regions+0x2a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80034c0:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80034c4:	4305      	orrs	r5, r0
 80034c6:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80034ca:	f044 0401 	orr.w	r4, r4, #1
 80034ce:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80034d2:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 80034d6:	3001      	adds	r0, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80034d8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 80034dc:	f10e 0e01 	add.w	lr, lr, #1
 80034e0:	458e      	cmp	lr, r1
 80034e2:	f10c 0c0c 	add.w	ip, ip, #12
 80034e6:	d1c9      	bne.n	800347c <mpu_configure_regions+0x10>
}
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return REGION_32B;
 80034ea:	2408      	movs	r4, #8
 80034ec:	e7e4      	b.n	80034b8 <mpu_configure_regions+0x4c>
		return REGION_4G;
 80034ee:	243e      	movs	r4, #62	; 0x3e
 80034f0:	e7e2      	b.n	80034b8 <mpu_configure_regions+0x4c>
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 80034f8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80034fa:	4c03      	ldr	r4, [pc, #12]	; (8003508 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80034fc:	2301      	movs	r3, #1
 80034fe:	7822      	ldrb	r2, [r4, #0]
 8003500:	f7ff ffb4 	bl	800346c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8003504:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8003506:	bd10      	pop	{r4, pc}
 8003508:	200015f8 	.word	0x200015f8

0800350c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800350c:	b508      	push	{r3, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8003510:	2300      	movs	r3, #0
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	f7ff ffaa 	bl	800346c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8003518:	f110 0f16 	cmn.w	r0, #22
 800351c:	d009      	beq.n	8003532 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800351e:	2807      	cmp	r0, #7
 8003520:	dc07      	bgt.n	8003532 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
 8003524:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 8003528:	3001      	adds	r0, #1
 800352a:	2808      	cmp	r0, #8
  MPU->RASR = 0U;
 800352c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003530:	d1f8      	bne.n	8003524 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8003532:	bd08      	pop	{r3, pc}
 8003534:	200015f8 	.word	0x200015f8
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <z_arm_mpu_init+0x68>)
{
 800353e:	b410      	push	{r4}
	if (mpu_config.num_regions > get_num_regions()) {
 8003540:	681c      	ldr	r4, [r3, #0]
 8003542:	2c08      	cmp	r4, #8
 8003544:	d82b      	bhi.n	800359e <z_arm_mpu_init+0x62>
  __ASM volatile ("dmb 0xF":::"memory");
 8003546:	f3bf 8f5f 	dmb	sy
	MPU->CTRL = 0;
 800354a:	4817      	ldr	r0, [pc, #92]	; (80035a8 <z_arm_mpu_init+0x6c>)
 800354c:	2200      	movs	r2, #0
 800354e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8003552:	b314      	cbz	r4, 800359a <z_arm_mpu_init+0x5e>
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8003560:	4313      	orrs	r3, r2
 8003562:	f043 0310 	orr.w	r3, r3, #16
 8003566:	310c      	adds	r1, #12
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003568:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800356c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003570:	3201      	adds	r2, #1
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	42a2      	cmp	r2, r4
 8003578:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800357c:	d1eb      	bne.n	8003556 <z_arm_mpu_init+0x1a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	480a      	ldr	r0, [pc, #40]	; (80035ac <z_arm_mpu_init+0x70>)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <z_arm_mpu_init+0x6c>)
	static_regions_num = mpu_config.num_regions;
 8003584:	7002      	strb	r2, [r0, #0]
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003586:	2105      	movs	r1, #5
 8003588:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 800358c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003590:	f3bf 8f6f 	isb	sy
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8003594:	2000      	movs	r0, #0
}
 8003596:	bc10      	pop	{r4}
 8003598:	4770      	bx	lr
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800359a:	4622      	mov	r2, r4
 800359c:	e7f0      	b.n	8003580 <z_arm_mpu_init+0x44>
		return -1;
 800359e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a2:	e7f8      	b.n	8003596 <z_arm_mpu_init+0x5a>
 80035a4:	08011dec 	.word	0x08011dec
 80035a8:	e000ed00 	.word	0xe000ed00
 80035ac:	200015f8 	.word	0x200015f8

080035b0 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr

080035b4 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
 80035bc:	2000      	movs	r0, #0
 80035be:	4770      	bx	lr

080035c0 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b083      	sub	sp, #12
 80035c4:	9101      	str	r1, [sp, #4]
	for (i = 0; i < nbytes; i++) {
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	dd16      	ble.n	80035f8 <_read+0x38>
 80035ca:	3a01      	subs	r2, #1
 80035cc:	4f0b      	ldr	r7, [pc, #44]	; (80035fc <_read+0x3c>)
 80035ce:	460e      	mov	r6, r1
 80035d0:	1e4c      	subs	r4, r1, #1
 80035d2:	188d      	adds	r5, r1, r2
 80035d4:	e003      	b.n	80035de <_read+0x1e>
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80035d6:	280d      	cmp	r0, #13
 80035d8:	d00b      	beq.n	80035f2 <_read+0x32>
	for (i = 0; i < nbytes; i++) {
 80035da:	42ac      	cmp	r4, r5
 80035dc:	d009      	beq.n	80035f2 <_read+0x32>
		*(buf + i) = _stdin_hook();
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80035e2:	4623      	mov	r3, r4
 80035e4:	3302      	adds	r3, #2
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80035e6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 80035e8:	f804 0f01 	strb.w	r0, [r4, #1]!
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80035ec:	eba3 0306 	sub.w	r3, r3, r6
 80035f0:	d1f1      	bne.n	80035d6 <_read+0x16>
	ARG_UNUSED(fd);

	return zephyr_read_stdin(buf, nbytes);
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	b003      	add	sp, #12
 80035f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < nbytes; i++) {
 80035f8:	2300      	movs	r3, #0
	return zephyr_read_stdin(buf, nbytes);
 80035fa:	e7fa      	b.n	80035f2 <_read+0x32>
 80035fc:	20000014 	.word	0x20000014

08003600 <_write>:
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	4617      	mov	r7, r2
	for (i = 0; i < nbytes; i++) {
 8003604:	2a00      	cmp	r2, #0
 8003606:	dd0f      	ble.n	8003628 <_write+0x28>
 8003608:	1e55      	subs	r5, r2, #1
 800360a:	4e08      	ldr	r6, [pc, #32]	; (800362c <_write+0x2c>)
 800360c:	1e4c      	subs	r4, r1, #1
 800360e:	440d      	add	r5, r1
		if (*(buf + i) == '\n') {
 8003610:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003614:	280a      	cmp	r0, #10
 8003616:	d103      	bne.n	8003620 <_write+0x20>
			_stdout_hook('\r');
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	200d      	movs	r0, #13
 800361c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800361e:	7820      	ldrb	r0, [r4, #0]
 8003620:	6833      	ldr	r3, [r6, #0]
 8003622:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8003624:	42ac      	cmp	r4, r5
 8003626:	d1f3      	bne.n	8003610 <_write+0x10>
	ARG_UNUSED(fd);

	return zephyr_write_stdout(buf, nbytes);
}
 8003628:	4638      	mov	r0, r7
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362c:	20000018 	.word	0x20000018

08003630 <_close>:
 8003630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003638:	2000      	movs	r0, #0
 800363a:	4770      	bx	lr

0800363c <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
 800363c:	2802      	cmp	r0, #2
 800363e:	bfcc      	ite	gt
 8003640:	2000      	movgt	r0, #0
 8003642:	2001      	movle	r0, #1
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
 8003648:	2000      	movs	r0, #0
 800364a:	4770      	bx	lr

0800364c <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
 800364c:	2000      	movs	r0, #0
 800364e:	4770      	bx	lr

08003650 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003656:	2000      	movs	r0, #0
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (*(buf + i) == '\n') {
 800365e:	4c0b      	ldr	r4, [pc, #44]	; (800368c <_exit+0x30>)
 8003660:	4e0b      	ldr	r6, [pc, #44]	; (8003690 <_exit+0x34>)
 8003662:	1d27      	adds	r7, r4, #4
 8003664:	2565      	movs	r5, #101	; 0x65
		_stdout_hook(*(buf + i));
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	4628      	mov	r0, r5
 800366a:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800366c:	42bc      	cmp	r4, r7
 800366e:	d00b      	beq.n	8003688 <_exit+0x2c>
		if (*(buf + i) == '\n') {
 8003670:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8003674:	2d0a      	cmp	r5, #10
 8003676:	d1f6      	bne.n	8003666 <_exit+0xa>
			_stdout_hook('\r');
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	200d      	movs	r0, #13
 800367c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 800367e:	6833      	ldr	r3, [r6, #0]
 8003680:	4628      	mov	r0, r5
 8003682:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8003684:	42bc      	cmp	r4, r7
 8003686:	d1f3      	bne.n	8003670 <_exit+0x14>
	_write(1, "exit\n", 5);
	while (1) {
 8003688:	e7fe      	b.n	8003688 <_exit+0x2c>
 800368a:	bf00      	nop
 800368c:	08011dd4 	.word	0x08011dd4
 8003690:	20000018 	.word	0x20000018

08003694 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8003694:	b430      	push	{r4, r5}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8003696:	4c08      	ldr	r4, [pc, #32]	; (80036b8 <_sbrk+0x24>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8003698:	4d08      	ldr	r5, [pc, #32]	; (80036bc <_sbrk+0x28>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800369a:	6823      	ldr	r3, [r4, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800369c:	f1c5 5100 	rsb	r1, r5, #536870912	; 0x20000000
 80036a0:	18c2      	adds	r2, r0, r3
 80036a2:	f501 3120 	add.w	r1, r1, #163840	; 0x28000
 80036a6:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80036a8:	bf3a      	itte	cc
 80036aa:	1958      	addcc	r0, r3, r5
		heap_sz += count;
 80036ac:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 80036ae:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 80036b2:	bc30      	pop	{r4, r5}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000d78 	.word	0x20000d78
 80036bc:	2000498a 	.word	0x2000498a

080036c0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 80036c4:	2014      	movs	r0, #20
 80036c6:	f00b fe8b 	bl	800f3e0 <malloc>
 80036ca:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 80036d0:	f009 bf72 	b.w	800d5b8 <z_impl_k_mutex_init>

080036d4 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_mutex_lock(mutex, timeout);
 80036dc:	f009 bf74 	b.w	800d5c8 <z_impl_k_mutex_lock>

080036e0 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 80036e0:	f009 bff6 	b.w	800d6d0 <z_impl_k_mutex_unlock>

080036e4 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 80036e4:	2200      	movs	r2, #0
{
 80036e6:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 80036e8:	4611      	mov	r1, r2
 80036ea:	2006      	movs	r0, #6
 80036ec:	f7ff fc42 	bl	8002f74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 80036f0:	2200      	movs	r2, #0
 80036f2:	4611      	mov	r1, r2
 80036f4:	2007      	movs	r0, #7
 80036f6:	f7ff fc3d 	bl	8002f74 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 80036fa:	2200      	movs	r2, #0
 80036fc:	4611      	mov	r1, r2
 80036fe:	2008      	movs	r0, #8
 8003700:	f7ff fc38 	bl	8002f74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8003704:	2200      	movs	r2, #0
 8003706:	4611      	mov	r1, r2
 8003708:	2009      	movs	r0, #9
 800370a:	f7ff fc33 	bl	8002f74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800370e:	2200      	movs	r2, #0
 8003710:	4611      	mov	r1, r2
 8003712:	200a      	movs	r0, #10
 8003714:	f7ff fc2e 	bl	8002f74 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003718:	2200      	movs	r2, #0
 800371a:	4611      	mov	r1, r2
 800371c:	2017      	movs	r0, #23
 800371e:	f7ff fc29 	bl	8002f74 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003722:	2200      	movs	r2, #0
 8003724:	2028      	movs	r0, #40	; 0x28
 8003726:	4611      	mov	r1, r2
 8003728:	f7ff fc24 	bl	8002f74 <z_arm_irq_priority_set>
}
 800372c:	2000      	movs	r0, #0
 800372e:	bd08      	pop	{r3, pc}

08003730 <__stm32_exti_isr_15_10>:
{
 8003730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	6907      	ldr	r7, [r0, #16]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003736:	4d0e      	ldr	r5, [pc, #56]	; (8003770 <__stm32_exti_isr_15_10+0x40>)
	for (line = min; line < max; line++) {
 8003738:	240a      	movs	r4, #10
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800373a:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 800373c:	f107 0804 	add.w	r8, r7, #4
 8003740:	e002      	b.n	8003748 <__stm32_exti_isr_15_10+0x18>
	for (line = min; line < max; line++) {
 8003742:	3401      	adds	r4, #1
 8003744:	2c10      	cmp	r4, #16
 8003746:	d011      	beq.n	800376c <__stm32_exti_isr_15_10+0x3c>
 8003748:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800374a:	fa06 f304 	lsl.w	r3, r6, r4
 800374e:	ea33 0202 	bics.w	r2, r3, r2
 8003752:	d1f6      	bne.n	8003742 <__stm32_exti_isr_15_10+0x12>
			if (!data->cb[line].cb) {
 8003754:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003758:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 800375a:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 800375c:	2a00      	cmp	r2, #0
 800375e:	d0f0      	beq.n	8003742 <__stm32_exti_isr_15_10+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8003760:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8003764:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 8003766:	4790      	blx	r2
	for (line = min; line < max; line++) {
 8003768:	2c10      	cmp	r4, #16
 800376a:	d1ed      	bne.n	8003748 <__stm32_exti_isr_15_10+0x18>
}
 800376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003770:	40010400 	.word	0x40010400

08003774 <__stm32_exti_isr_0>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <__stm32_exti_isr_0+0x1c>)
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	07d2      	lsls	r2, r2, #31
 800377a:	d400      	bmi.n	800377e <__stm32_exti_isr_0+0xa>
}
 800377c:	4770      	bx	lr
 800377e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8003780:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003782:	2001      	movs	r0, #1
 8003784:	6158      	str	r0, [r3, #20]
 8003786:	2a00      	cmp	r2, #0
 8003788:	d0f8      	beq.n	800377c <__stm32_exti_isr_0+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 800378a:	6849      	ldr	r1, [r1, #4]
 800378c:	2000      	movs	r0, #0
 800378e:	4710      	bx	r2
 8003790:	40010400 	.word	0x40010400

08003794 <__stm32_exti_isr_1>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <__stm32_exti_isr_1+0x1c>)
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	0792      	lsls	r2, r2, #30
 800379a:	d400      	bmi.n	800379e <__stm32_exti_isr_1+0xa>
}
 800379c:	4770      	bx	lr
 800379e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 80037a0:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80037a2:	2002      	movs	r0, #2
 80037a4:	6158      	str	r0, [r3, #20]
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	d0f8      	beq.n	800379c <__stm32_exti_isr_1+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 80037aa:	68c9      	ldr	r1, [r1, #12]
 80037ac:	2001      	movs	r0, #1
 80037ae:	4710      	bx	r2
 80037b0:	40010400 	.word	0x40010400

080037b4 <__stm32_exti_isr_2>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <__stm32_exti_isr_2+0x1c>)
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	0752      	lsls	r2, r2, #29
 80037ba:	d400      	bmi.n	80037be <__stm32_exti_isr_2+0xa>
}
 80037bc:	4770      	bx	lr
 80037be:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 80037c0:	690a      	ldr	r2, [r1, #16]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80037c2:	2004      	movs	r0, #4
 80037c4:	6158      	str	r0, [r3, #20]
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d0f8      	beq.n	80037bc <__stm32_exti_isr_2+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 80037ca:	6949      	ldr	r1, [r1, #20]
 80037cc:	2002      	movs	r0, #2
 80037ce:	4710      	bx	r2
 80037d0:	40010400 	.word	0x40010400

080037d4 <__stm32_exti_isr_3>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <__stm32_exti_isr_3+0x1c>)
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	0712      	lsls	r2, r2, #28
 80037da:	d400      	bmi.n	80037de <__stm32_exti_isr_3+0xa>
}
 80037dc:	4770      	bx	lr
 80037de:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 80037e0:	698a      	ldr	r2, [r1, #24]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80037e2:	2008      	movs	r0, #8
 80037e4:	6158      	str	r0, [r3, #20]
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	d0f8      	beq.n	80037dc <__stm32_exti_isr_3+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 80037ea:	69c9      	ldr	r1, [r1, #28]
 80037ec:	2003      	movs	r0, #3
 80037ee:	4710      	bx	r2
 80037f0:	40010400 	.word	0x40010400

080037f4 <__stm32_exti_isr_4>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <__stm32_exti_isr_4+0x1c>)
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	06d2      	lsls	r2, r2, #27
 80037fa:	d400      	bmi.n	80037fe <__stm32_exti_isr_4+0xa>
}
 80037fc:	4770      	bx	lr
 80037fe:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8003800:	6a0a      	ldr	r2, [r1, #32]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003802:	2010      	movs	r0, #16
 8003804:	6158      	str	r0, [r3, #20]
 8003806:	2a00      	cmp	r2, #0
 8003808:	d0f8      	beq.n	80037fc <__stm32_exti_isr_4+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 800380a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800380c:	2004      	movs	r0, #4
 800380e:	4710      	bx	r2
 8003810:	40010400 	.word	0x40010400

08003814 <__stm32_exti_isr_9_5>:
{
 8003814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	6907      	ldr	r7, [r0, #16]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800381a:	4d0e      	ldr	r5, [pc, #56]	; (8003854 <__stm32_exti_isr_9_5+0x40>)
	for (line = min; line < max; line++) {
 800381c:	2405      	movs	r4, #5
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800381e:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 8003820:	f107 0804 	add.w	r8, r7, #4
 8003824:	e002      	b.n	800382c <__stm32_exti_isr_9_5+0x18>
	for (line = min; line < max; line++) {
 8003826:	3401      	adds	r4, #1
 8003828:	2c0a      	cmp	r4, #10
 800382a:	d011      	beq.n	8003850 <__stm32_exti_isr_9_5+0x3c>
 800382c:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800382e:	fa06 f304 	lsl.w	r3, r6, r4
 8003832:	ea33 0202 	bics.w	r2, r3, r2
 8003836:	d1f6      	bne.n	8003826 <__stm32_exti_isr_9_5+0x12>
			if (!data->cb[line].cb) {
 8003838:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800383c:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 800383e:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 8003840:	2a00      	cmp	r2, #0
 8003842:	d0f0      	beq.n	8003826 <__stm32_exti_isr_9_5+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8003844:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8003848:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 800384a:	4790      	blx	r2
	for (line = min; line < max; line++) {
 800384c:	2c0a      	cmp	r4, #10
 800384e:	d1ed      	bne.n	800382c <__stm32_exti_isr_9_5+0x18>
}
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003854:	40010400 	.word	0x40010400

08003858 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003858:	4a05      	ldr	r2, [pc, #20]	; (8003870 <stm32_exti_enable+0x18>)
	irqnum = exti_irq_table[line];
 800385a:	4906      	ldr	r1, [pc, #24]	; (8003874 <stm32_exti_enable+0x1c>)
{
 800385c:	b410      	push	{r4}
	LL_EXTI_EnableIT_0_31(1 << line);
 800385e:	2301      	movs	r3, #1
 8003860:	6814      	ldr	r4, [r2, #0]
 8003862:	4083      	lsls	r3, r0
 8003864:	4323      	orrs	r3, r4
	irq_enable(irqnum);
 8003866:	5608      	ldrsb	r0, [r1, r0]
}
 8003868:	bc10      	pop	{r4}
 800386a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800386c:	f7ff bb50 	b.w	8002f10 <arch_irq_enable>
 8003870:	40010400 	.word	0x40010400
 8003874:	08011e2c 	.word	0x08011e2c

08003878 <stm32_exti_disable>:
	if (line < 32) {
 8003878:	281f      	cmp	r0, #31
 800387a:	dc07      	bgt.n	800388c <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800387c:	4904      	ldr	r1, [pc, #16]	; (8003890 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 800387e:	2201      	movs	r2, #1
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	fa02 f000 	lsl.w	r0, r2, r0
 8003886:	ea23 0000 	bic.w	r0, r3, r0
 800388a:	6008      	str	r0, [r1, #0]
}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010400 	.word	0x40010400

08003894 <stm32_exti_trigger>:
	switch (trigger) {
 8003894:	2903      	cmp	r1, #3
 8003896:	d80d      	bhi.n	80038b4 <stm32_exti_trigger+0x20>
 8003898:	e8df f001 	tbb	[pc, r1]
 800389c:	020d1925 	.word	0x020d1925
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80038a2:	2301      	movs	r3, #1
 80038a4:	6891      	ldr	r1, [r2, #8]
 80038a6:	fa03 f000 	lsl.w	r0, r3, r0
 80038aa:	4301      	orrs	r1, r0
 80038ac:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80038ae:	68d3      	ldr	r3, [r2, #12]
 80038b0:	4318      	orrs	r0, r3
 80038b2:	60d0      	str	r0, [r2, #12]
}
 80038b4:	4770      	bx	lr
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80038b8:	2201      	movs	r2, #1
 80038ba:	68d9      	ldr	r1, [r3, #12]
 80038bc:	fa02 f000 	lsl.w	r0, r2, r0
 80038c0:	4301      	orrs	r1, r0
 80038c2:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	ea22 0000 	bic.w	r0, r2, r0
 80038ca:	6098      	str	r0, [r3, #8]
}
 80038cc:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80038d0:	2201      	movs	r2, #1
 80038d2:	6899      	ldr	r1, [r3, #8]
 80038d4:	fa02 f000 	lsl.w	r0, r2, r0
 80038d8:	4301      	orrs	r1, r0
 80038da:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	ea22 0000 	bic.w	r0, r2, r0
 80038e2:	60d8      	str	r0, [r3, #12]
}
 80038e4:	4770      	bx	lr
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <stm32_exti_trigger+0x6c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80038e8:	2201      	movs	r2, #1
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	fa02 f000 	lsl.w	r0, r2, r0
 80038f0:	ea21 0100 	bic.w	r1, r1, r0
 80038f4:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	ea22 0000 	bic.w	r0, r2, r0
 80038fc:	60d8      	str	r0, [r3, #12]
}
 80038fe:	4770      	bx	lr
 8003900:	40010400 	.word	0x40010400

08003904 <stm32_exti_set_callback>:
	if (data->cb[line].cb) {
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <stm32_exti_set_callback+0x20>)
{
 8003906:	b410      	push	{r4}
	if (data->cb[line].cb) {
 8003908:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 800390c:	b93c      	cbnz	r4, 800391e <stm32_exti_set_callback+0x1a>
	data->cb[line].cb = cb;
 800390e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8003912:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	return 0;
 8003916:	4620      	mov	r0, r4
	data->cb[line].data = arg;
 8003918:	605a      	str	r2, [r3, #4]
}
 800391a:	bc10      	pop	{r4}
 800391c:	4770      	bx	lr
		return -EBUSY;
 800391e:	f06f 000f 	mvn.w	r0, #15
 8003922:	e7fa      	b.n	800391a <stm32_exti_set_callback+0x16>
 8003924:	20000d7c 	.word	0x20000d7c

08003928 <stm32_exti_unset_callback>:
	data->cb[line].cb = NULL;
 8003928:	4a03      	ldr	r2, [pc, #12]	; (8003938 <stm32_exti_unset_callback+0x10>)
	data->cb[line].data = NULL;
 800392a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
	data->cb[line].cb = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8003934:	604b      	str	r3, [r1, #4]
}
 8003936:	4770      	bx	lr
 8003938:	20000d7c 	.word	0x20000d7c

0800393c <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d804      	bhi.n	800394c <stm32_clock_control_get_subsys_rate+0x10>
	uint32_t ahb_clock = SystemCoreClock;
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <stm32_clock_control_get_subsys_rate+0x1c>)
 8003944:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8003946:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8003948:	2000      	movs	r0, #0
		break;
 800394a:	4770      	bx	lr
	switch (pclken->bus) {
 800394c:	2b06      	cmp	r3, #6
 800394e:	d0f8      	beq.n	8003942 <stm32_clock_control_get_subsys_rate+0x6>
 8003950:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200002f0 	.word	0x200002f0

0800395c <stm32_clock_control_on>:
	switch (pclken->bus) {
 800395c:	680b      	ldr	r3, [r1, #0]
{
 800395e:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8003960:	2b06      	cmp	r3, #6
 8003962:	d84d      	bhi.n	8003a00 <stm32_clock_control_on+0xa4>
 8003964:	e8df f003 	tbb	[pc, r3]
 8003968:	34281c10 	.word	0x34281c10
 800396c:	4c40      	.short	0x4c40
 800396e:	04          	.byte	0x04
 800396f:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8003972:	684b      	ldr	r3, [r1, #4]
 8003974:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003976:	4319      	orrs	r1, r3
 8003978:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800397a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800397c:	4013      	ands	r3, r2
 800397e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003980:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8003982:	2000      	movs	r0, #0
}
 8003984:	b006      	add	sp, #24
 8003986:	4770      	bx	lr
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800398a:	684b      	ldr	r3, [r1, #4]
 800398c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800398e:	4319      	orrs	r1, r3
 8003990:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003992:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003994:	4013      	ands	r3, r2
 8003996:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	2000      	movs	r0, #0
}
 800399c:	b006      	add	sp, #24
 800399e:	4770      	bx	lr
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80039a2:	684b      	ldr	r3, [r1, #4]
 80039a4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80039a6:	4319      	orrs	r1, r3
 80039a8:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039ac:	4013      	ands	r3, r2
 80039ae:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80039b0:	9b00      	ldr	r3, [sp, #0]
	return 0;
 80039b2:	2000      	movs	r0, #0
}
 80039b4:	b006      	add	sp, #24
 80039b6:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80039ba:	684b      	ldr	r3, [r1, #4]
 80039bc:	6d91      	ldr	r1, [r2, #88]	; 0x58
 80039be:	4319      	orrs	r1, r3
 80039c0:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80039c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80039c4:	4013      	ands	r3, r2
 80039c6:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80039c8:	9b02      	ldr	r3, [sp, #8]
	return 0;
 80039ca:	2000      	movs	r0, #0
}
 80039cc:	b006      	add	sp, #24
 80039ce:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80039d2:	684b      	ldr	r3, [r1, #4]
 80039d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80039d6:	4319      	orrs	r1, r3
 80039d8:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039da:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80039dc:	4013      	ands	r3, r2
 80039de:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80039e0:	9b04      	ldr	r3, [sp, #16]
	return 0;
 80039e2:	2000      	movs	r0, #0
}
 80039e4:	b006      	add	sp, #24
 80039e6:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR2, Periphs);
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80039ea:	684b      	ldr	r3, [r1, #4]
 80039ec:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80039ee:	4319      	orrs	r1, r3
 80039f0:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80039f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039f4:	4013      	ands	r3, r2
 80039f6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80039f8:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	b006      	add	sp, #24
 80039fe:	4770      	bx	lr
	switch (pclken->bus) {
 8003a00:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003a04:	e7be      	b.n	8003984 <stm32_clock_control_on+0x28>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <stm32_clock_control_off>:
	switch (pclken->bus) {
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d835      	bhi.n	8003a7e <stm32_clock_control_off+0x72>
 8003a12:	e8df f003 	tbb	[pc, r3]
 8003a16:	140c      	.short	0x140c
 8003a18:	342c241c 	.word	0x342c241c
 8003a1c:	04          	.byte	0x04
 8003a1d:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8003a1e:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a20:	6849      	ldr	r1, [r1, #4]
 8003a22:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a24:	ea23 0301 	bic.w	r3, r3, r1
	return 0;
 8003a28:	2000      	movs	r0, #0
 8003a2a:	6513      	str	r3, [r2, #80]	; 0x50
}
 8003a2c:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a30:	6849      	ldr	r1, [r1, #4]
 8003a32:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003a34:	ea23 0301 	bic.w	r3, r3, r1
 8003a38:	2000      	movs	r0, #0
 8003a3a:	6493      	str	r3, [r2, #72]	; 0x48
 8003a3c:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003a3e:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a40:	6849      	ldr	r1, [r1, #4]
 8003a42:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003a44:	ea23 0301 	bic.w	r3, r3, r1
 8003a48:	2000      	movs	r0, #0
 8003a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003a4c:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a50:	6849      	ldr	r1, [r1, #4]
 8003a52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a54:	ea23 0301 	bic.w	r3, r3, r1
 8003a58:	2000      	movs	r0, #0
 8003a5a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003a5c:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a60:	6849      	ldr	r1, [r1, #4]
 8003a62:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003a64:	ea23 0301 	bic.w	r3, r3, r1
 8003a68:	2000      	movs	r0, #0
 8003a6a:	6613      	str	r3, [r2, #96]	; 0x60
}
 8003a6c:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <stm32_clock_control_off+0x78>)
 8003a70:	6849      	ldr	r1, [r1, #4]
 8003a72:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003a74:	ea23 0301 	bic.w	r3, r3, r1
 8003a78:	2000      	movs	r0, #0
 8003a7a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003a7c:	4770      	bx	lr
	switch (pclken->bus) {
 8003a7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003a82:	4770      	bx	lr
 8003a84:	40021000 	.word	0x40021000

08003a88 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8003a8c:	2300      	movs	r3, #0
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8003a8e:	e9cd 3300 	strd	r3, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8003a92:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8003a94:	f000 f842 	bl	8003b1c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8003a98:	a803      	add	r0, sp, #12
 8003a9a:	f000 f837 	bl	8003b0c <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <stm32_clock_control_init+0x80>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	0551      	lsls	r1, r2, #21
 8003aa4:	d406      	bmi.n	8003ab4 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	0552      	lsls	r2, r2, #21
 8003ab2:	d5fc      	bpl.n	8003aae <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003ab4:	4c14      	ldr	r4, [pc, #80]	; (8003b08 <stm32_clock_control_init+0x80>)
 8003ab6:	68a3      	ldr	r3, [r4, #8]
 8003ab8:	f023 0303 	bic.w	r3, r3, #3
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac8:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003aca:	68a3      	ldr	r3, [r4, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d1fa      	bne.n	8003aca <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003adc:	68e3      	ldr	r3, [r4, #12]
 8003ade:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae6:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8003ae8:	4669      	mov	r1, sp
 8003aea:	a803      	add	r0, sp, #12
 8003aec:	f005 fcd0 	bl	8009490 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003af8:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003afa:	2000      	movs	r0, #0
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	b006      	add	sp, #24
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000

08003b0c <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2214      	movs	r2, #20
 8003b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <config_enable_default_clocks+0x1c>)
 8003b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003b28:	b082      	sub	sp, #8
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003b30:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8003b32:	b002      	add	sp, #8
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <dma_stm32_config_irq_0>:

static void dma_stm32_config_irq_0(const struct device *dev)
{
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 8003b3c:	2200      	movs	r2, #0
{
 8003b3e:	b508      	push	{r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 0);
 8003b40:	4611      	mov	r1, r2
 8003b42:	200b      	movs	r0, #11
 8003b44:	f7ff fa16 	bl	8002f74 <z_arm_irq_priority_set>
 8003b48:	200b      	movs	r0, #11
 8003b4a:	f7ff f9e1 	bl	8002f10 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	4611      	mov	r1, r2
 8003b52:	200c      	movs	r0, #12
 8003b54:	f7ff fa0e 	bl	8002f74 <z_arm_irq_priority_set>
 8003b58:	200c      	movs	r0, #12
 8003b5a:	f7ff f9d9 	bl	8002f10 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4611      	mov	r1, r2
 8003b62:	200d      	movs	r0, #13
 8003b64:	f7ff fa06 	bl	8002f74 <z_arm_irq_priority_set>
 8003b68:	200d      	movs	r0, #13
 8003b6a:	f7ff f9d1 	bl	8002f10 <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4611      	mov	r1, r2
 8003b72:	200e      	movs	r0, #14
 8003b74:	f7ff f9fe 	bl	8002f74 <z_arm_irq_priority_set>
 8003b78:	200e      	movs	r0, #14
 8003b7a:	f7ff f9c9 	bl	8002f10 <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4611      	mov	r1, r2
 8003b82:	200f      	movs	r0, #15
 8003b84:	f7ff f9f6 	bl	8002f74 <z_arm_irq_priority_set>
 8003b88:	200f      	movs	r0, #15
 8003b8a:	f7ff f9c1 	bl	8002f10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4611      	mov	r1, r2
 8003b92:	2010      	movs	r0, #16
 8003b94:	f7ff f9ee 	bl	8002f74 <z_arm_irq_priority_set>
 8003b98:	2010      	movs	r0, #16
 8003b9a:	f7ff f9b9 	bl	8002f10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2011      	movs	r0, #17
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	f7ff f9e6 	bl	8002f74 <z_arm_irq_priority_set>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 8003ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 6);
 8003bac:	2011      	movs	r0, #17
 8003bae:	f7ff b9af 	b.w	8002f10 <arch_irq_enable>
 8003bb2:	bf00      	nop

08003bb4 <dma_stm32_config_irq_1>:
static void dma_stm32_config_irq_1(const struct device *dev)
{
	ARG_UNUSED(dev);

#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(1, 0);
 8003bb4:	2200      	movs	r2, #0
{
 8003bb6:	b508      	push	{r3, lr}
	DMA_STM32_IRQ_CONNECT(1, 0);
 8003bb8:	4611      	mov	r1, r2
 8003bba:	2038      	movs	r0, #56	; 0x38
 8003bbc:	f7ff f9da 	bl	8002f74 <z_arm_irq_priority_set>
 8003bc0:	2038      	movs	r0, #56	; 0x38
 8003bc2:	f7ff f9a5 	bl	8002f10 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 1);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4611      	mov	r1, r2
 8003bca:	2039      	movs	r0, #57	; 0x39
 8003bcc:	f7ff f9d2 	bl	8002f74 <z_arm_irq_priority_set>
 8003bd0:	2039      	movs	r0, #57	; 0x39
 8003bd2:	f7ff f99d 	bl	8002f10 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 2);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4611      	mov	r1, r2
 8003bda:	203a      	movs	r0, #58	; 0x3a
 8003bdc:	f7ff f9ca 	bl	8002f74 <z_arm_irq_priority_set>
 8003be0:	203a      	movs	r0, #58	; 0x3a
 8003be2:	f7ff f995 	bl	8002f10 <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 3);
 8003be6:	2200      	movs	r2, #0
 8003be8:	4611      	mov	r1, r2
 8003bea:	203b      	movs	r0, #59	; 0x3b
 8003bec:	f7ff f9c2 	bl	8002f74 <z_arm_irq_priority_set>
 8003bf0:	203b      	movs	r0, #59	; 0x3b
 8003bf2:	f7ff f98d 	bl	8002f10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 4)
	DMA_STM32_IRQ_CONNECT(1, 4);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	203c      	movs	r0, #60	; 0x3c
 8003bfc:	f7ff f9ba 	bl	8002f74 <z_arm_irq_priority_set>
 8003c00:	203c      	movs	r0, #60	; 0x3c
 8003c02:	f7ff f985 	bl	8002f10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 5)
	DMA_STM32_IRQ_CONNECT(1, 5);
 8003c06:	2200      	movs	r2, #0
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2044      	movs	r0, #68	; 0x44
 8003c0c:	f7ff f9b2 	bl	8002f74 <z_arm_irq_priority_set>
 8003c10:	2044      	movs	r0, #68	; 0x44
 8003c12:	f7ff f97d 	bl	8002f10 <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 6)
	DMA_STM32_IRQ_CONNECT(1, 6);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2045      	movs	r0, #69	; 0x45
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	f7ff f9aa 	bl	8002f74 <z_arm_irq_priority_set>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/*
 * Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series.
 * STM32F0 and STM32G0: if dma2 exits, the channel interrupts overlap with dma1
 */
}
 8003c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_STM32_IRQ_CONNECT(1, 6);
 8003c24:	2045      	movs	r0, #69	; 0x45
 8003c26:	f7ff b973 	b.w	8002f10 <arch_irq_enable>
 8003c2a:	bf00      	nop

08003c2c <dma_stm32_get_status>:
	const struct dma_stm32_config *config = dev->config;
 8003c2c:	6843      	ldr	r3, [r0, #4]
{
 8003c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (id >= config->max_streams) {
 8003c32:	695d      	ldr	r5, [r3, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003c34:	691f      	ldr	r7, [r3, #16]
	id = id - STREAM_OFFSET;
 8003c36:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 8003c38:	4285      	cmp	r5, r0
 8003c3a:	d917      	bls.n	8003c6c <dma_stm32_get_status+0x40>
	stream = &config->streams[id];
 8003c3c:	699d      	ldr	r5, [r3, #24]
 8003c3e:	4614      	mov	r4, r2
 8003c40:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003c44:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003c48:	ea4f 08c2 	mov.w	r8, r2, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 8003c4c:	f000 fb64 	bl	8004318 <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <dma_stm32_get_status+0x48>)
	stat->dir = stream->direction;
 8003c52:	f855 2008 	ldr.w	r2, [r5, r8]
 8003c56:	5c1b      	ldrb	r3, [r3, r0]
 8003c58:	443b      	add	r3, r7
	return 0;
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	685b      	ldr	r3, [r3, #4]
	stat->dir = stream->direction;
 8003c5e:	7062      	strb	r2, [r4, #1]
	stat->busy = stream->busy;
 8003c60:	79b2      	ldrb	r2, [r6, #6]
 8003c62:	7022      	strb	r2, [r4, #0]
 8003c64:	b29b      	uxth	r3, r3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 8003c66:	6063      	str	r3, [r4, #4]
}
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8003c6c:	f06f 0015 	mvn.w	r0, #21
 8003c70:	e7fa      	b.n	8003c68 <dma_stm32_get_status+0x3c>
 8003c72:	bf00      	nop
 8003c74:	08011e5c 	.word	0x08011e5c

08003c78 <dma_stm32_init>:
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
	const struct dma_stm32_config *config = dev->config;
 8003c7a:	6846      	ldr	r6, [r0, #4]
{
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4d12      	ldr	r5, [pc, #72]	; (8003cc8 <dma_stm32_init+0x50>)
 8003c80:	4628      	mov	r0, r5
 8003c82:	f009 f9cb 	bl	800d01c <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8003c86:	b1e0      	cbz	r0, 8003cc2 <dma_stm32_init+0x4a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003c88:	68ab      	ldr	r3, [r5, #8]
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4798      	blx	r3
	if (clock_control_on(clk,
 8003c92:	4605      	mov	r5, r0
 8003c94:	b9a8      	cbnz	r0, 8003cc2 <dma_stm32_init+0x4a>
	config->config_irq(dev);
 8003c96:	68b3      	ldr	r3, [r6, #8]
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8003c9c:	6972      	ldr	r2, [r6, #20]
 8003c9e:	b14a      	cbz	r2, 8003cb4 <dma_stm32_init+0x3c>
 8003ca0:	69b3      	ldr	r3, [r6, #24]
 8003ca2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ca6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		config->streams[i].busy = false;
 8003caa:	4629      	mov	r1, r5
 8003cac:	7199      	strb	r1, [r3, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8003cae:	3318      	adds	r3, #24
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d1fb      	bne.n	8003cac <dma_stm32_init+0x34>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	2200      	movs	r2, #0
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8003cb8:	e9c3 2200 	strd	r2, r2, [r3]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8003cbc:	609a      	str	r2, [r3, #8]
}
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8003cc2:	f06f 0504 	mvn.w	r5, #4
 8003cc6:	e7fa      	b.n	8003cbe <dma_stm32_init+0x46>
 8003cc8:	08011734 	.word	0x08011734

08003ccc <dma_stm32_irq_handler>:
	const struct dma_stm32_config *config = dev->config;
 8003ccc:	6843      	ldr	r3, [r0, #4]
{
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stream = &config->streams[id];
 8003cd2:	699c      	ldr	r4, [r3, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003cd4:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 8003cd6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8003cda:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		stream->busy = false;
 8003cde:	2300      	movs	r3, #0
{
 8003ce0:	4606      	mov	r6, r0
		stream->busy = false;
 8003ce2:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8003ce4:	4638      	mov	r0, r7
{
 8003ce6:	460d      	mov	r5, r1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8003ce8:	f000 fb44 	bl	8004374 <stm32_dma_is_ht_irq_active>
	callback_arg = id + STREAM_OFFSET;
 8003cec:	f105 0801 	add.w	r8, r5, #1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8003cf0:	b178      	cbz	r0, 8003d12 <dma_stm32_irq_handler+0x46>
		if (!stream->hal_override) {
 8003cf2:	7963      	ldrb	r3, [r4, #5]
 8003cf4:	b143      	cbz	r3, 8003d08 <dma_stm32_irq_handler+0x3c>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8003cf6:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
		stream->dma_callback(dev, stream->user_data,
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	46ac      	mov	ip, r5
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		stream->dma_callback(dev, stream->user_data,
 8003d06:	4760      	bx	ip
			dma_stm32_clear_ht(dma, id);
 8003d08:	4629      	mov	r1, r5
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f000 fb0a 	bl	8004324 <dma_stm32_clear_ht>
 8003d10:	e7f1      	b.n	8003cf6 <dma_stm32_irq_handler+0x2a>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 8003d12:	4629      	mov	r1, r5
 8003d14:	4638      	mov	r0, r7
 8003d16:	f000 fb13 	bl	8004340 <stm32_dma_is_tc_irq_active>
 8003d1a:	b138      	cbz	r0, 8003d2c <dma_stm32_irq_handler+0x60>
		if (!stream->hal_override) {
 8003d1c:	7963      	ldrb	r3, [r4, #5]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e9      	bne.n	8003cf6 <dma_stm32_irq_handler+0x2a>
			dma_stm32_clear_tc(dma, id);
 8003d22:	4629      	mov	r1, r5
 8003d24:	4638      	mov	r0, r7
 8003d26:	f000 fb03 	bl	8004330 <dma_stm32_clear_tc>
 8003d2a:	e7e4      	b.n	8003cf6 <dma_stm32_irq_handler+0x2a>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	4629      	mov	r1, r5
 8003d30:	f000 fb40 	bl	80043b4 <stm32_dma_is_unexpected_irq_happened>
 8003d34:	b148      	cbz	r0, 8003d4a <dma_stm32_irq_handler+0x7e>
		stream->dma_callback(dev, stream->user_data,
 8003d36:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	46ac      	mov	ip, r5
 8003d40:	f06f 0304 	mvn.w	r3, #4
}
 8003d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		stream->dma_callback(dev, stream->user_data,
 8003d48:	4760      	bx	ip
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003d4a:	6873      	ldr	r3, [r6, #4]
	stm32_dma_dump_stream_irq(dma, id);
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	6918      	ldr	r0, [r3, #16]
 8003d50:	f000 faf4 	bl	800433c <stm32_dma_dump_stream_irq>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003d54:	6873      	ldr	r3, [r6, #4]
 8003d56:	691f      	ldr	r7, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8003d58:	4629      	mov	r1, r5
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	f000 fae8 	bl	8004330 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8003d60:	4629      	mov	r1, r5
 8003d62:	4638      	mov	r0, r7
 8003d64:	f000 fade 	bl	8004324 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f000 fb1c 	bl	80043a8 <stm32_dma_clear_stream_irq>
 8003d70:	e7e1      	b.n	8003d36 <dma_stm32_irq_handler+0x6a>
 8003d72:	bf00      	nop

08003d74 <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 8003d74:	2100      	movs	r1, #0
 8003d76:	f7ff bfa9 	b.w	8003ccc <dma_stm32_irq_handler>
 8003d7a:	bf00      	nop

08003d7c <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	f7ff bfa5 	b.w	8003ccc <dma_stm32_irq_handler>
 8003d82:	bf00      	nop

08003d84 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 8003d84:	2102      	movs	r1, #2
 8003d86:	f7ff bfa1 	b.w	8003ccc <dma_stm32_irq_handler>
 8003d8a:	bf00      	nop

08003d8c <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	f7ff bf9d 	b.w	8003ccc <dma_stm32_irq_handler>
 8003d92:	bf00      	nop

08003d94 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 8003d94:	2104      	movs	r1, #4
 8003d96:	f7ff bf99 	b.w	8003ccc <dma_stm32_irq_handler>
 8003d9a:	bf00      	nop

08003d9c <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	f7ff bf95 	b.w	8003ccc <dma_stm32_irq_handler>
 8003da2:	bf00      	nop

08003da4 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 8003da4:	2106      	movs	r1, #6
 8003da6:	f7ff bf91 	b.w	8003ccc <dma_stm32_irq_handler>
 8003daa:	bf00      	nop

08003dac <dma_stm32_irq_1_6>:
 8003dac:	2106      	movs	r1, #6
 8003dae:	f7ff bf8d 	b.w	8003ccc <dma_stm32_irq_handler>
 8003db2:	bf00      	nop

08003db4 <dma_stm32_irq_1_0>:
 8003db4:	2100      	movs	r1, #0
 8003db6:	f7ff bf89 	b.w	8003ccc <dma_stm32_irq_handler>
 8003dba:	bf00      	nop

08003dbc <dma_stm32_irq_1_1>:
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	f7ff bf85 	b.w	8003ccc <dma_stm32_irq_handler>
 8003dc2:	bf00      	nop

08003dc4 <dma_stm32_irq_1_2>:
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	f7ff bf81 	b.w	8003ccc <dma_stm32_irq_handler>
 8003dca:	bf00      	nop

08003dcc <dma_stm32_irq_1_3>:
 8003dcc:	2103      	movs	r1, #3
 8003dce:	f7ff bf7d 	b.w	8003ccc <dma_stm32_irq_handler>
 8003dd2:	bf00      	nop

08003dd4 <dma_stm32_irq_1_4>:
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	f7ff bf79 	b.w	8003ccc <dma_stm32_irq_handler>
 8003dda:	bf00      	nop

08003ddc <dma_stm32_irq_1_5>:
 8003ddc:	2105      	movs	r1, #5
 8003dde:	f7ff bf75 	b.w	8003ccc <dma_stm32_irq_handler>
 8003de2:	bf00      	nop

08003de4 <dma_stm32_start>:
{
 8003de4:	b538      	push	{r3, r4, r5, lr}
	const struct dma_stm32_config *config = dev->config;
 8003de6:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003de8:	e9d3 5204 	ldrd	r5, r2, [r3, #16]
	id = id - STREAM_OFFSET;
 8003dec:	1e4c      	subs	r4, r1, #1
	if (id >= config->max_streams) {
 8003dee:	42a2      	cmp	r2, r4
 8003df0:	d911      	bls.n	8003e16 <dma_stm32_start+0x32>
	dma_stm32_clear_tc(dma, id);
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fa9b 	bl	8004330 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 fa91 	bl	8004324 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 facf 	bl	80043a8 <stm32_dma_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	f000 fad3 	bl	80043b8 <stm32_dma_enable_stream>
	return 0;
 8003e12:	2000      	movs	r0, #0
}
 8003e14:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 8003e16:	f06f 0015 	mvn.w	r0, #21
}
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}

08003e1c <dma_stm32_stop>:
	const struct dma_stm32_config *config = dev->config;
 8003e1c:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8003e1e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
 8003e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8003e26:	00db      	lsls	r3, r3, #3
{
 8003e28:	4607      	mov	r7, r0
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 8003e2a:	6990      	ldr	r0, [r2, #24]
 8003e2c:	3b18      	subs	r3, #24
 8003e2e:	eb00 0803 	add.w	r8, r0, r3
	if (id >= config->max_streams) {
 8003e32:	e9d2 6304 	ldrd	r6, r3, [r2, #16]
	id = id - STREAM_OFFSET;
 8003e36:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 8003e38:	42ab      	cmp	r3, r5
 8003e3a:	d92a      	bls.n	8003e92 <dma_stm32_stop+0x76>
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f000 fa6b 	bl	8004318 <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <dma_stm32_stop+0x7c>)
 8003e44:	5c1a      	ldrb	r2, [r3, r0]
 8003e46:	5993      	ldr	r3, [r2, r6]
 8003e48:	f023 0302 	bic.w	r3, r3, #2
 8003e4c:	5193      	str	r3, [r2, r6]
 8003e4e:	f241 348a 	movw	r4, #5002	; 0x138a
 8003e52:	e005      	b.n	8003e60 <dma_stm32_stop+0x44>
		if (count++ > (5 * 1000)) {
 8003e54:	3c01      	subs	r4, #1
 8003e56:	d009      	beq.n	8003e6c <dma_stm32_stop+0x50>
	return z_impl_k_sleep(timeout);
 8003e58:	200a      	movs	r0, #10
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f00a fb3e 	bl	800e4dc <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8003e60:	4629      	mov	r1, r5
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 fab6 	bl	80043d4 <stm32_dma_disable_stream>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1f3      	bne.n	8003e54 <dma_stm32_stop+0x38>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691c      	ldr	r4, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8003e70:	4629      	mov	r1, r5
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 fa5c 	bl	8004330 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 fa52 	bl	8004324 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8003e80:	4620      	mov	r0, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	f000 fa90 	bl	80043a8 <stm32_dma_clear_stream_irq>
	stream->busy = false;
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f888 0006 	strb.w	r0, [r8, #6]
}
 8003e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8003e92:	f06f 0015 	mvn.w	r0, #21
 8003e96:	e7fa      	b.n	8003e8e <dma_stm32_stop+0x72>
 8003e98:	08011e5c 	.word	0x08011e5c

08003e9c <dma_stm32_reload>:
{
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *config = dev->config;
 8003ea0:	6840      	ldr	r0, [r0, #4]
{
 8003ea2:	4699      	mov	r9, r3
	if (id >= config->max_streams) {
 8003ea4:	6943      	ldr	r3, [r0, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003ea6:	6906      	ldr	r6, [r0, #16]
{
 8003ea8:	b083      	sub	sp, #12
	id = id - STREAM_OFFSET;
 8003eaa:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 8003eac:	42ab      	cmp	r3, r5
{
 8003eae:	9201      	str	r2, [sp, #4]
	if (id >= config->max_streams) {
 8003eb0:	d91e      	bls.n	8003ef0 <dma_stm32_reload+0x54>
	stream = &config->streams[id];
 8003eb2:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8003eb6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003eba:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 8003ebe:	f241 348a 	movw	r4, #5002	; 0x138a
 8003ec2:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
	int count = 0;
 8003ec6:	e005      	b.n	8003ed4 <dma_stm32_reload+0x38>
		if (count++ > (5 * 1000)) {
 8003ec8:	3c01      	subs	r4, #1
 8003eca:	d056      	beq.n	8003f7a <dma_stm32_reload+0xde>
 8003ecc:	200a      	movs	r0, #10
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f00a fb04 	bl	800e4dc <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f000 fa7c 	bl	80043d4 <stm32_dma_disable_stream>
 8003edc:	4680      	mov	r8, r0
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d1f2      	bne.n	8003ec8 <dma_stm32_reload+0x2c>
	switch (stream->direction) {
 8003ee2:	f85a 200b 	ldr.w	r2, [sl, fp]
 8003ee6:	2a01      	cmp	r2, #1
 8003ee8:	d008      	beq.n	8003efc <dma_stm32_reload+0x60>
 8003eea:	f032 0302 	bics.w	r3, r2, #2
 8003eee:	d02c      	beq.n	8003f4a <dma_stm32_reload+0xae>
 8003ef0:	f06f 0815 	mvn.w	r8, #21
}
 8003ef4:	4640      	mov	r0, r8
 8003ef6:	b003      	add	sp, #12
 8003ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fa0b 	bl	8004318 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8003f02:	4c21      	ldr	r4, [pc, #132]	; (8003f88 <dma_stm32_reload+0xec>)
 8003f04:	9b01      	ldr	r3, [sp, #4]
 8003f06:	5c22      	ldrb	r2, [r4, r0]
 8003f08:	4432      	add	r2, r6
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	60d3      	str	r3, [r2, #12]
 8003f0e:	f000 fa03 	bl	8004318 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8003f12:	5c22      	ldrb	r2, [r4, r0]
 8003f14:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003f16:	4628      	mov	r0, r5
 8003f18:	f8c2 9008 	str.w	r9, [r2, #8]
	if (stream->source_periph) {
 8003f1c:	793a      	ldrb	r2, [r7, #4]
 8003f1e:	b33a      	cbz	r2, 8003f70 <dma_stm32_reload+0xd4>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003f20:	f000 f9fa 	bl	8004318 <dma_stm32_id_to_stream>
 8003f24:	68ba      	ldr	r2, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003f26:	5c20      	ldrb	r0, [r4, r0]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f2e:	4430      	add	r0, r6
 8003f30:	6841      	ldr	r1, [r0, #4]
 8003f32:	0c09      	lsrs	r1, r1, #16
 8003f34:	0409      	lsls	r1, r1, #16
 8003f36:	430a      	orrs	r2, r1
 8003f38:	6042      	str	r2, [r0, #4]
	stm32_dma_enable_stream(dma, id);
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 fa3b 	bl	80043b8 <stm32_dma_enable_stream>
}
 8003f42:	4640      	mov	r0, r8
 8003f44:	b003      	add	sp, #12
 8003f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 f9e4 	bl	8004318 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8003f50:	4c0d      	ldr	r4, [pc, #52]	; (8003f88 <dma_stm32_reload+0xec>)
 8003f52:	9b01      	ldr	r3, [sp, #4]
 8003f54:	5c22      	ldrb	r2, [r4, r0]
 8003f56:	4432      	add	r2, r6
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8003f58:	4628      	mov	r0, r5
 8003f5a:	6093      	str	r3, [r2, #8]
 8003f5c:	f000 f9dc 	bl	8004318 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8003f60:	5c22      	ldrb	r2, [r4, r0]
 8003f62:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003f64:	4628      	mov	r0, r5
 8003f66:	f8c2 900c 	str.w	r9, [r2, #12]
	if (stream->source_periph) {
 8003f6a:	793a      	ldrb	r2, [r7, #4]
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	d1d7      	bne.n	8003f20 <dma_stm32_reload+0x84>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003f70:	f000 f9d2 	bl	8004318 <dma_stm32_id_to_stream>
 8003f74:	68fa      	ldr	r2, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003f76:	5c20      	ldrb	r0, [r4, r0]
 8003f78:	e7d6      	b.n	8003f28 <dma_stm32_reload+0x8c>
		return -EBUSY;
 8003f7a:	f06f 080f 	mvn.w	r8, #15
}
 8003f7e:	4640      	mov	r0, r8
 8003f80:	b003      	add	sp, #12
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	08011e5c 	.word	0x08011e5c

08003f8c <dma_stm32_configure>:
{
 8003f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *dev_config = dev->config;
 8003f90:	6844      	ldr	r4, [r0, #4]
{
 8003f92:	b08f      	sub	sp, #60	; 0x3c
 8003f94:	4617      	mov	r7, r2
 8003f96:	4682      	mov	sl, r0
	LL_DMA_StructInit(&DMA_InitStruct);
 8003f98:	a803      	add	r0, sp, #12
	struct dma_stm32_stream *stream =
 8003f9a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 8003f9e:	6926      	ldr	r6, [r4, #16]
				&dev_config->streams[id - STREAM_OFFSET];
 8003fa0:	eb01 0841 	add.w	r8, r1, r1, lsl #1
	id = id - STREAM_OFFSET;
 8003fa4:	1e4d      	subs	r5, r1, #1
	LL_DMA_StructInit(&DMA_InitStruct);
 8003fa6:	f004 fff9 	bl	8008f9c <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003faa:	887b      	ldrh	r3, [r7, #2]
				&dev_config->streams[id - STREAM_OFFSET];
 8003fac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003fb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
				&dev_config->streams[id - STREAM_OFFSET];
 8003fb4:	f1a8 0818 	sub.w	r8, r8, #24
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003fb8:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
	struct dma_stm32_stream *stream =
 8003fbc:	eb0b 0908 	add.w	r9, fp, r8
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003fc0:	f000 8088 	beq.w	80040d4 <dma_stm32_configure+0x148>
	if (id >= dev_config->max_streams) {
 8003fc4:	6963      	ldr	r3, [r4, #20]
 8003fc6:	42ab      	cmp	r3, r5
 8003fc8:	d97e      	bls.n	80040c8 <dma_stm32_configure+0x13c>
	if (stream->busy) {
 8003fca:	f899 3006 	ldrb.w	r3, [r9, #6]
 8003fce:	f241 348a 	movw	r4, #5002	; 0x138a
 8003fd2:	b13b      	cbz	r3, 8003fe4 <dma_stm32_configure+0x58>
 8003fd4:	e0a3      	b.n	800411e <dma_stm32_configure+0x192>
		if (count++ > (5 * 1000)) {
 8003fd6:	3c01      	subs	r4, #1
 8003fd8:	f000 80a1 	beq.w	800411e <dma_stm32_configure+0x192>
 8003fdc:	200a      	movs	r0, #10
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f00a fa7c 	bl	800e4dc <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 f9f4 	bl	80043d4 <stm32_dma_disable_stream>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1f2      	bne.n	8003fd6 <dma_stm32_configure+0x4a>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003ff0:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003ff4:	9001      	str	r0, [sp, #4]
 8003ff6:	6914      	ldr	r4, [r2, #16]
	dma_stm32_clear_tc(dma, id);
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f000 f998 	bl	8004330 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8004000:	4629      	mov	r1, r5
 8004002:	4620      	mov	r0, r4
 8004004:	f000 f98e 	bl	8004324 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 8004008:	4629      	mov	r1, r5
 800400a:	4620      	mov	r0, r4
 800400c:	f000 f9cc 	bl	80043a8 <stm32_dma_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 8004010:	6939      	ldr	r1, [r7, #16]
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	694a      	ldr	r2, [r1, #20]
 8004016:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800401a:	d255      	bcs.n	80040c8 <dma_stm32_configure+0x13c>
	if ((config->dest_data_size != config->source_data_size)) {
 800401c:	88fc      	ldrh	r4, [r7, #6]
 800401e:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 8004022:	4564      	cmp	r4, ip
 8004024:	d150      	bne.n	80040c8 <dma_stm32_configure+0x13c>
	if (config->source_data_size != 4U &&
 8004026:	2c04      	cmp	r4, #4
 8004028:	d002      	beq.n	8004030 <dma_stm32_configure+0xa4>
	    config->source_data_size != 2U &&
 800402a:	1e62      	subs	r2, r4, #1
 800402c:	2a01      	cmp	r2, #1
 800402e:	d84b      	bhi.n	80040c8 <dma_stm32_configure+0x13c>
	if (config->head_block->source_reload_en !=
 8004030:	7f0a      	ldrb	r2, [r1, #28]
 8004032:	f3c2 1080 	ubfx	r0, r2, #6, #1
 8004036:	ebb0 1fd2 	cmp.w	r0, r2, lsr #7
 800403a:	d145      	bne.n	80040c8 <dma_stm32_configure+0x13c>
	stream->direction	= config->channel_direction;
 800403c:	883a      	ldrh	r2, [r7, #0]
	stream->dma_callback	= config->dma_callback;
 800403e:	69b8      	ldr	r0, [r7, #24]
 8004040:	f8c9 0014 	str.w	r0, [r9, #20]
	stream->direction	= config->channel_direction;
 8004044:	f3c2 12c2 	ubfx	r2, r2, #7, #3
	stream->user_data       = config->user_data;
 8004048:	6978      	ldr	r0, [r7, #20]
	stream->busy		= true;
 800404a:	f04f 0e01 	mov.w	lr, #1
 800404e:	f889 e006 	strb.w	lr, [r9, #6]
	stream->direction	= config->channel_direction;
 8004052:	f84b 2008 	str.w	r2, [fp, r8]
	stream->user_data       = config->user_data;
 8004056:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((config->head_block->dest_address == 0)) {
 800405a:	e9d1 e000 	ldrd	lr, r0, [r1]
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 800405e:	2a01      	cmp	r2, #1
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8004060:	bf0c      	ite	eq
 8004062:	e9cd 0e03 	strdeq	r0, lr, [sp, #12]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8004066:	e9cd e003 	strdne	lr, r0, [sp, #12]
	ret = dma_stm32_get_priority(config->channel_priority,
 800406a:	6838      	ldr	r0, [r7, #0]
	switch (priority) {
 800406c:	f3c0 3083 	ubfx	r0, r0, #14, #4
	stream->dst_size	= config->dest_data_size;
 8004070:	e9c9 c402 	strd	ip, r4, [r9, #8]
	switch (priority) {
 8004074:	2803      	cmp	r0, #3
 8004076:	d827      	bhi.n	80040c8 <dma_stm32_configure+0x13c>
 8004078:	e8df f000 	tbb	[pc, r0]
 800407c:	024a463a 	.word	0x024a463a
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8004080:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004084:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 8004086:	2a01      	cmp	r2, #1
 8004088:	d036      	beq.n	80040f8 <dma_stm32_configure+0x16c>
 800408a:	2a02      	cmp	r2, #2
 800408c:	d044      	beq.n	8004118 <dma_stm32_configure+0x18c>
 800408e:	b9da      	cbnz	r2, 80040c8 <dma_stm32_configure+0x13c>
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8004090:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004094:	9205      	str	r2, [sp, #20]
		memory_addr_adj = config->head_block->dest_addr_adj;
 8004096:	7f0a      	ldrb	r2, [r1, #28]
 8004098:	f3c2 1e01 	ubfx	lr, r2, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 800409c:	f3c2 0a81 	ubfx	sl, r2, #2, #2
	switch (increment) {
 80040a0:	f1be 0f01 	cmp.w	lr, #1
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 80040a4:	fa5f f08e 	uxtb.w	r0, lr
	switch (increment) {
 80040a8:	d03f      	beq.n	800412a <dma_stm32_configure+0x19e>
 80040aa:	2802      	cmp	r0, #2
 80040ac:	d040      	beq.n	8004130 <dma_stm32_configure+0x1a4>
 80040ae:	b958      	cbnz	r0, 80040c8 <dma_stm32_configure+0x13c>
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 80040b0:	2080      	movs	r0, #128	; 0x80
 80040b2:	9008      	str	r0, [sp, #32]
	switch (increment) {
 80040b4:	f1ba 0f01 	cmp.w	sl, #1
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 80040b8:	fa5f f08a 	uxtb.w	r0, sl
	switch (increment) {
 80040bc:	d035      	beq.n	800412a <dma_stm32_configure+0x19e>
 80040be:	2802      	cmp	r0, #2
 80040c0:	f000 8095 	beq.w	80041ee <dma_stm32_configure+0x262>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d036      	beq.n	8004136 <dma_stm32_configure+0x1aa>
		return -EINVAL;
 80040c8:	f06f 0315 	mvn.w	r3, #21
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	b00f      	add	sp, #60	; 0x3c
 80040d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stream->busy = true;
 80040d4:	2301      	movs	r3, #1
		stream->dma_callback = config->dma_callback;
 80040d6:	69b9      	ldr	r1, [r7, #24]
		stream->user_data = config->user_data;
 80040d8:	697a      	ldr	r2, [r7, #20]
		stream->busy = true;
 80040da:	f889 3006 	strb.w	r3, [r9, #6]
		stream->hal_override = true;
 80040de:	f889 3005 	strb.w	r3, [r9, #5]
		return 0;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
		stream->user_data = config->user_data;
 80040e6:	e9c9 2104 	strd	r2, r1, [r9, #16]
}
 80040ea:	b00f      	add	sp, #60	; 0x3c
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*ll_priority = LL_DMA_PRIORITY_LOW;
 80040f0:	2000      	movs	r0, #0
	switch (direction) {
 80040f2:	2a01      	cmp	r2, #1
		*ll_priority = LL_DMA_PRIORITY_LOW;
 80040f4:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 80040f6:	d1c8      	bne.n	800408a <dma_stm32_configure+0xfe>
		memory_addr_adj = config->head_block->source_addr_adj;
 80040f8:	7f0a      	ldrb	r2, [r1, #28]
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80040fa:	2010      	movs	r0, #16
 80040fc:	9005      	str	r0, [sp, #20]
		memory_addr_adj = config->head_block->source_addr_adj;
 80040fe:	f3c2 0e81 	ubfx	lr, r2, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 8004102:	f3c2 1a01 	ubfx	sl, r2, #4, #2
		break;
 8004106:	e7cb      	b.n	80040a0 <dma_stm32_configure+0x114>
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 8004108:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800410c:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 800410e:	e7ba      	b.n	8004086 <dma_stm32_configure+0xfa>
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 8004110:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004114:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 8004116:	e7b6      	b.n	8004086 <dma_stm32_configure+0xfa>
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8004118:	2200      	movs	r2, #0
 800411a:	9205      	str	r2, [sp, #20]
	if (ret < 0) {
 800411c:	e7bb      	b.n	8004096 <dma_stm32_configure+0x10a>
		return -EBUSY;
 800411e:	f06f 030f 	mvn.w	r3, #15
}
 8004122:	4618      	mov	r0, r3
 8004124:	b00f      	add	sp, #60	; 0x3c
 8004126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
 800412a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800412e:	e7cd      	b.n	80040cc <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 8004130:	2000      	movs	r0, #0
 8004132:	9008      	str	r0, [sp, #32]
	if (ret < 0) {
 8004134:	e7be      	b.n	80040b4 <dma_stm32_configure+0x128>
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 8004136:	2040      	movs	r0, #64	; 0x40
 8004138:	9007      	str	r0, [sp, #28]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 800413a:	f85b 0008 	ldr.w	r0, [fp, r8]
		DMA_InitStruct.NbData = config->head_block->block_size /
 800413e:	6949      	ldr	r1, [r1, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8004140:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80041f4 <dma_stm32_configure+0x268>
 8004144:	9301      	str	r3, [sp, #4]
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8004146:	f012 0f40 	tst.w	r2, #64	; 0x40
 800414a:	bf14      	ite	ne
 800414c:	2220      	movne	r2, #32
 800414e:	2200      	moveq	r2, #0
 8004150:	9206      	str	r2, [sp, #24]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8004152:	f1a0 0202 	sub.w	r2, r0, #2
 8004156:	fab2 f282 	clz	r2, r2
 800415a:	0952      	lsrs	r2, r2, #5
 800415c:	f889 2004 	strb.w	r2, [r9, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8004160:	f1bc 0f00 	cmp.w	ip, #0
 8004164:	fa9c f2ac 	rbit	r2, ip
 8004168:	fab2 f282 	clz	r2, r2
 800416c:	bf08      	it	eq
 800416e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8004172:	2c00      	cmp	r4, #0
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8004174:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004178:	9209      	str	r2, [sp, #36]	; 0x24
 800417a:	fa94 f2a4 	rbit	r2, r4
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800417e:	f8df e078 	ldr.w	lr, [pc, #120]	; 80041f8 <dma_stm32_configure+0x26c>
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	bf08      	it	eq
 8004188:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
	if (stream->source_periph) {
 800418c:	2802      	cmp	r0, #2
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800418e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004192:	920a      	str	r2, [sp, #40]	; 0x28
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8004194:	783a      	ldrb	r2, [r7, #0]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8004196:	bf18      	it	ne
 8004198:	fbb1 f1f4 	udivne	r1, r1, r4
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 800419c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 80041a0:	4628      	mov	r0, r5
		DMA_InitStruct.NbData = config->head_block->block_size /
 80041a2:	bf08      	it	eq
 80041a4:	fbb1 f1fc 	udiveq	r1, r1, ip
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 80041a8:	920c      	str	r2, [sp, #48]	; 0x30
 80041aa:	910b      	str	r1, [sp, #44]	; 0x2c
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 80041ac:	f000 f8b4 	bl	8004318 <dma_stm32_id_to_stream>
 80041b0:	aa03      	add	r2, sp, #12
 80041b2:	4601      	mov	r1, r0
 80041b4:	4630      	mov	r0, r6
 80041b6:	f004 feb3 	bl	8008f20 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f8ac 	bl	8004318 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80041c0:	4c0e      	ldr	r4, [pc, #56]	; (80041fc <dma_stm32_configure+0x270>)
	if (config->head_block->source_reload_en) {
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	5c21      	ldrb	r1, [r4, r0]
 80041c6:	7f17      	ldrb	r7, [r2, #28]
 80041c8:	598a      	ldr	r2, [r1, r6]
 80041ca:	9b01      	ldr	r3, [sp, #4]
 80041cc:	f042 0202 	orr.w	r2, r2, #2
 80041d0:	f017 0f40 	tst.w	r7, #64	; 0x40
 80041d4:	518a      	str	r2, [r1, r6]
 80041d6:	f43f af79 	beq.w	80040cc <dma_stm32_configure+0x140>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 f89c 	bl	8004318 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 80041e0:	5c21      	ldrb	r1, [r4, r0]
}
 80041e2:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 80041e4:	598a      	ldr	r2, [r1, r6]
 80041e6:	f042 0204 	orr.w	r2, r2, #4
 80041ea:	518a      	str	r2, [r1, r6]
}
 80041ec:	e76e      	b.n	80040cc <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 80041ee:	2000      	movs	r0, #0
 80041f0:	9007      	str	r0, [sp, #28]
	if (ret < 0) {
 80041f2:	e7a2      	b.n	800413a <dma_stm32_configure+0x1ae>
 80041f4:	08011ec8 	.word	0x08011ec8
 80041f8:	08011ebc 	.word	0x08011ebc
 80041fc:	08011e5c 	.word	0x08011e5c

08004200 <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8004200:	6800      	ldr	r0, [r0, #0]
}
 8004202:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004206:	4770      	bx	lr

08004208 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8004208:	6800      	ldr	r0, [r0, #0]
}
 800420a:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800420e:	4770      	bx	lr

08004210 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8004210:	6800      	ldr	r0, [r0, #0]
}
 8004212:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8004216:	4770      	bx	lr

08004218 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 8004218:	6800      	ldr	r0, [r0, #0]
}
 800421a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800421e:	4770      	bx	lr

08004220 <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 8004220:	6800      	ldr	r0, [r0, #0]
}
 8004222:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8004226:	4770      	bx	lr

08004228 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8004228:	6800      	ldr	r0, [r0, #0]
}
 800422a:	f3c0 5040 	ubfx	r0, r0, #21, #1
 800422e:	4770      	bx	lr

08004230 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8004230:	6800      	ldr	r0, [r0, #0]
}
 8004232:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8004236:	4770      	bx	lr

08004238 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8004238:	6800      	ldr	r0, [r0, #0]
}
 800423a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800423e:	4770      	bx	lr

08004240 <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 8004240:	6800      	ldr	r0, [r0, #0]
}
 8004242:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8004246:	4770      	bx	lr

08004248 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 8004248:	6800      	ldr	r0, [r0, #0]
}
 800424a:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800424e:	4770      	bx	lr

08004250 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 8004250:	6800      	ldr	r0, [r0, #0]
}
 8004252:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8004256:	4770      	bx	lr

08004258 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8004258:	6800      	ldr	r0, [r0, #0]
}
 800425a:	f3c0 4080 	ubfx	r0, r0, #18, #1
 800425e:	4770      	bx	lr

08004260 <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8004260:	6800      	ldr	r0, [r0, #0]
}
 8004262:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8004266:	4770      	bx	lr

08004268 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 8004268:	6800      	ldr	r0, [r0, #0]
}
 800426a:	f3c0 6080 	ubfx	r0, r0, #26, #1
 800426e:	4770      	bx	lr

08004270 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004270:	2302      	movs	r3, #2
 8004272:	6043      	str	r3, [r0, #4]
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8004278:	2320      	movs	r3, #32
 800427a:	6043      	str	r3, [r0, #4]
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8004280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004284:	6043      	str	r3, [r0, #4]
}
 8004286:	4770      	bx	lr

08004288 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8004288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800428c:	6043      	str	r3, [r0, #4]
}
 800428e:	4770      	bx	lr

08004290 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8004290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004294:	6043      	str	r3, [r0, #4]
}
 8004296:	4770      	bx	lr

08004298 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8004298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800429c:	6043      	str	r3, [r0, #4]
}
 800429e:	4770      	bx	lr

080042a0 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80042a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a4:	6043      	str	r3, [r0, #4]
}
 80042a6:	4770      	bx	lr

080042a8 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80042a8:	2304      	movs	r3, #4
 80042aa:	6043      	str	r3, [r0, #4]
}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 80042b0:	2340      	movs	r3, #64	; 0x40
 80042b2:	6043      	str	r3, [r0, #4]
}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 80042b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042bc:	6043      	str	r3, [r0, #4]
}
 80042be:	4770      	bx	lr

080042c0 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 80042c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042c4:	6043      	str	r3, [r0, #4]
}
 80042c6:	4770      	bx	lr

080042c8 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 80042c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042cc:	6043      	str	r3, [r0, #4]
}
 80042ce:	4770      	bx	lr

080042d0 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80042d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042d4:	6043      	str	r3, [r0, #4]
}
 80042d6:	4770      	bx	lr

080042d8 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 80042d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042dc:	6043      	str	r3, [r0, #4]
}
 80042de:	4770      	bx	lr

080042e0 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80042e0:	2308      	movs	r3, #8
 80042e2:	6043      	str	r3, [r0, #4]
}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop

080042e8 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	6043      	str	r3, [r0, #4]
}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop

080042f0 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 80042f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042f4:	6043      	str	r3, [r0, #4]
}
 80042f6:	4770      	bx	lr

080042f8 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 80042f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fc:	6043      	str	r3, [r0, #4]
}
 80042fe:	4770      	bx	lr

08004300 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8004300:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004304:	6043      	str	r3, [r0, #4]
}
 8004306:	4770      	bx	lr

08004308 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 8004308:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800430c:	6043      	str	r3, [r0, #4]
}
 800430e:	4770      	bx	lr

08004310 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8004310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004314:	6043      	str	r3, [r0, #4]
}
 8004316:	4770      	bx	lr

08004318 <dma_stm32_id_to_stream>:
#endif /* LL_DMA_CHANNEL_6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
 8004318:	4b01      	ldr	r3, [pc, #4]	; (8004320 <dma_stm32_id_to_stream+0x8>)
}
 800431a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800431e:	4770      	bx	lr
 8004320:	08011f68 	.word	0x08011f68

08004324 <dma_stm32_clear_ht>:
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8004324:	4b01      	ldr	r3, [pc, #4]	; (800432c <dma_stm32_clear_ht+0x8>)
 8004326:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800432a:	4718      	bx	r3
 800432c:	08011f4c 	.word	0x08011f4c

08004330 <dma_stm32_clear_tc>:
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8004330:	4b01      	ldr	r3, [pc, #4]	; (8004338 <dma_stm32_clear_tc+0x8>)
 8004332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004336:	4718      	bx	r3
 8004338:	08011f30 	.word	0x08011f30

0800433c <stm32_dma_dump_stream_irq>:
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8004340:	b508      	push	{r3, lr}
	return stream_nr[id];
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <stm32_dma_is_tc_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004344:	4a09      	ldr	r2, [pc, #36]	; (800436c <stm32_dma_is_tc_irq_active+0x2c>)
 8004346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800434a:	5cd2      	ldrb	r2, [r2, r3]
 800434c:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 800434e:	f013 0302 	ands.w	r3, r3, #2
 8004352:	d007      	beq.n	8004364 <stm32_dma_is_tc_irq_active+0x24>
	return func[id](DMAx);
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <stm32_dma_is_tc_irq_active+0x30>)
 8004356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800435a:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 800435c:	3800      	subs	r0, #0
 800435e:	bf18      	it	ne
 8004360:	2001      	movne	r0, #1
	       dma_stm32_is_tc_active(dma, id);
}
 8004362:	bd08      	pop	{r3, pc}
 8004364:	4618      	mov	r0, r3
 8004366:	bd08      	pop	{r3, pc}
 8004368:	08011f68 	.word	0x08011f68
 800436c:	08011ed4 	.word	0x08011ed4
 8004370:	08011ef8 	.word	0x08011ef8

08004374 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8004374:	b508      	push	{r3, lr}
	return stream_nr[id];
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <stm32_dma_is_ht_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <stm32_dma_is_ht_irq_active+0x2c>)
 800437a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800437e:	5cd2      	ldrb	r2, [r2, r3]
 8004380:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8004382:	f013 0304 	ands.w	r3, r3, #4
 8004386:	d007      	beq.n	8004398 <stm32_dma_is_ht_irq_active+0x24>
	return func[id](DMAx);
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <stm32_dma_is_ht_irq_active+0x30>)
 800438a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800438e:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8004390:	3800      	subs	r0, #0
 8004392:	bf18      	it	ne
 8004394:	2001      	movne	r0, #1
	       dma_stm32_is_ht_active(dma, id);
}
 8004396:	bd08      	pop	{r3, pc}
 8004398:	4618      	mov	r0, r3
 800439a:	bd08      	pop	{r3, pc}
 800439c:	08011f68 	.word	0x08011f68
 80043a0:	08011ed4 	.word	0x08011ed4
 80043a4:	08011f14 	.word	0x08011f14

080043a8 <stm32_dma_clear_stream_irq>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <stm32_dma_clear_stream_irq+0x8>)
 80043aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043ae:	4718      	bx	r3
 80043b0:	08011edc 	.word	0x08011edc

080043b4 <stm32_dma_is_unexpected_irq_happened>:

bool stm32_dma_is_unexpected_irq_happened(DMA_TypeDef *dma, uint32_t id)
{
	/* Preserve for future amending. */
	return false;
}
 80043b4:	2000      	movs	r0, #0
 80043b6:	4770      	bx	lr

080043b8 <stm32_dma_enable_stream>:
	return stream_nr[id];
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <stm32_dma_enable_stream+0x14>)
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <stm32_dma_enable_stream+0x18>)
 80043bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043c0:	5cd2      	ldrb	r2, [r2, r3]
 80043c2:	5883      	ldr	r3, [r0, r2]
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	5083      	str	r3, [r0, r2]

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
}
 80043ca:	4770      	bx	lr
 80043cc:	08011f68 	.word	0x08011f68
 80043d0:	08011ed4 	.word	0x08011ed4

080043d4 <stm32_dma_disable_stream>:
	return stream_nr[id];
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <stm32_dma_disable_stream+0x24>)
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <stm32_dma_disable_stream+0x28>)
 80043d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	58c2      	ldr	r2, [r0, r3]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	50c2      	str	r2, [r0, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80043e6:	58c3      	ldr	r3, [r0, r3]
int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
 80043e8:	f013 0f01 	tst.w	r3, #1
	}

	return -EAGAIN;
}
 80043ec:	bf14      	ite	ne
 80043ee:	f06f 000a 	mvnne.w	r0, #10
 80043f2:	2000      	moveq	r0, #0
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08011f68 	.word	0x08011f68
 80043fc:	08011ed4 	.word	0x08011ed4

08004400 <gpio_stm32_port_get_raw>:
}

static int gpio_stm32_port_get_raw(const struct device *dev, uint32_t *value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004400:	6843      	ldr	r3, [r0, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8004404:	691b      	ldr	r3, [r3, #16]

	*value = LL_GPIO_ReadInputPort(gpio);
 8004406:	600b      	str	r3, [r1, #0]

	return 0;
}
 8004408:	2000      	movs	r0, #0
 800440a:	4770      	bx	lr

0800440c <gpio_stm32_port_set_masked_raw>:
static int gpio_stm32_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800440c:	6843      	ldr	r3, [r0, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
{
 8004410:	b410      	push	{r4}
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8004412:	695c      	ldr	r4, [r3, #20]
	uint32_t port_value;

	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	port_value = LL_GPIO_ReadOutputPort(gpio);
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8004414:	4062      	eors	r2, r4
 8004416:	400a      	ands	r2, r1
 8004418:	4062      	eors	r2, r4

	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 800441a:	2000      	movs	r0, #0
 800441c:	bc10      	pop	{r4}
  WRITE_REG(GPIOx->ODR, PortValue);
 800441e:	615a      	str	r2, [r3, #20]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <gpio_stm32_port_set_bits_raw>:

static int gpio_stm32_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004424:	6843      	ldr	r3, [r0, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	WRITE_REG(gpio->BSRR, pins);

	return 0;
}
 8004428:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 800442a:	6199      	str	r1, [r3, #24]
}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop

08004430 <gpio_stm32_port_clear_bits_raw>:

static int gpio_stm32_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8004430:	6843      	ldr	r3, [r0, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
	/* On other series, LL abstraction is needed  */
	LL_GPIO_ResetOutputPin(gpio, pins);
#endif

	return 0;
}
 8004434:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004436:	6299      	str	r1, [r3, #40]	; 0x28
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop

0800443c <gpio_stm32_port_toggle_bits>:

static int gpio_stm32_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800443c:	6843      	ldr	r3, [r0, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
	/*
	 * On F1 series, using LL API requires a costly pin mask translation.
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004440:	6953      	ldr	r3, [r2, #20]
 8004442:	404b      	eors	r3, r1
	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 8004444:	2000      	movs	r0, #0
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8004446:	6153      	str	r3, [r2, #20]
}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800444c:	b470      	push	{r4, r5, r6}
	struct gpio_stm32_data *data = dev->data;
 800444e:	6905      	ldr	r5, [r0, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8004450:	68ae      	ldr	r6, [r5, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8004452:	b1e6      	cbz	r6, 800448e <gpio_stm32_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8004454:	4633      	mov	r3, r6
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004456:	2400      	movs	r4, #0
 8004458:	e000      	b.n	800445c <gpio_stm32_manage_callback+0x10>
 800445a:	4603      	mov	r3, r0
 800445c:	4299      	cmp	r1, r3
 800445e:	d00d      	beq.n	800447c <gpio_stm32_manage_callback+0x30>
	return node->next;
 8004460:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8004462:	461c      	mov	r4, r3
 8004464:	2800      	cmp	r0, #0
 8004466:	d1f8      	bne.n	800445a <gpio_stm32_manage_callback+0xe>
			if (!set) {
				return -EINVAL;
 8004468:	f06f 0015 	mvn.w	r0, #21
			if (!set) {
 800446c:	b122      	cbz	r2, 8004478 <gpio_stm32_manage_callback+0x2c>
Z_GENLIST_PREPEND(slist, snode)
 800446e:	68e8      	ldr	r0, [r5, #12]
	parent->next = child;
 8004470:	600e      	str	r6, [r1, #0]
	list->head = node;
 8004472:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 8004474:	b198      	cbz	r0, 800449e <gpio_stm32_manage_callback+0x52>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8004476:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8004478:	bc70      	pop	{r4, r5, r6}
 800447a:	4770      	bx	lr
	return node->next;
 800447c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
 800447e:	68e8      	ldr	r0, [r5, #12]
Z_GENLIST_REMOVE(slist, snode)
 8004480:	b184      	cbz	r4, 80044a4 <gpio_stm32_manage_callback+0x58>
 8004482:	4281      	cmp	r1, r0
	parent->next = child;
 8004484:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8004486:	bf08      	it	eq
 8004488:	60ec      	streq	r4, [r5, #12]
	parent->next = child;
 800448a:	2300      	movs	r3, #0
 800448c:	600b      	str	r3, [r1, #0]
	if (set) {
 800448e:	2a00      	cmp	r2, #0
 8004490:	d0f1      	beq.n	8004476 <gpio_stm32_manage_callback+0x2a>
Z_GENLIST_PREPEND(slist, snode)
 8004492:	68e8      	ldr	r0, [r5, #12]
	return list->head;
 8004494:	68ae      	ldr	r6, [r5, #8]
	parent->next = child;
 8004496:	600e      	str	r6, [r1, #0]
	list->head = node;
 8004498:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 800449a:	2800      	cmp	r0, #0
 800449c:	d1eb      	bne.n	8004476 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 800449e:	60e9      	str	r1, [r5, #12]
 80044a0:	bc70      	pop	{r4, r5, r6}
 80044a2:	4770      	bx	lr
Z_GENLIST_REMOVE(slist, snode)
 80044a4:	4281      	cmp	r1, r0
	list->head = node;
 80044a6:	60ab      	str	r3, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
 80044a8:	d1ef      	bne.n	800448a <gpio_stm32_manage_callback+0x3e>
	list->tail = node;
 80044aa:	60eb      	str	r3, [r5, #12]
}
 80044ac:	e7ed      	b.n	800448a <gpio_stm32_manage_callback+0x3e>
 80044ae:	bf00      	nop

080044b0 <gpio_stm32_pin_interrupt_configure>:
{
 80044b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044b4:	4694      	mov	ip, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80044b6:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80044ba:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80044bc:	6902      	ldr	r2, [r0, #16]
{
 80044be:	b083      	sub	sp, #12
 80044c0:	460c      	mov	r4, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
 80044c2:	d056      	beq.n	8004572 <gpio_stm32_pin_interrupt_configure+0xc2>
	if (mode == GPIO_INT_MODE_LEVEL) {
 80044c4:	f5bc 4f80 	cmp.w	ip, #16384	; 0x4000
 80044c8:	d07c      	beq.n	80045c4 <gpio_stm32_pin_interrupt_configure+0x114>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80044ca:	4940      	ldr	r1, [pc, #256]	; (80045cc <gpio_stm32_pin_interrupt_configure+0x11c>)
 80044cc:	4620      	mov	r0, r4
 80044ce:	461d      	mov	r5, r3
 80044d0:	f7ff fa18 	bl	8003904 <stm32_exti_set_callback>
 80044d4:	4606      	mov	r6, r0
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d171      	bne.n	80045be <gpio_stm32_pin_interrupt_configure+0x10e>
	struct stm32_pclken pclken = {
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <gpio_stm32_pin_interrupt_configure+0x120>)
	gpio_stm32_enable_int(cfg->port, pin);
 80044dc:	f8d7 8008 	ldr.w	r8, [r7, #8]
	struct stm32_pclken pclken = {
 80044e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044e4:	466f      	mov	r7, sp
 80044e6:	e887 0003 	stmia.w	r7, {r0, r1}
 80044ea:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80045d4 <gpio_stm32_pin_interrupt_configure+0x124>
 80044ee:	4648      	mov	r0, r9
 80044f0:	f008 fd94 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80044f4:	b130      	cbz	r0, 8004504 <gpio_stm32_pin_interrupt_configure+0x54>
	return api->on(dev, sys);
 80044f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80044fa:	4639      	mov	r1, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4648      	mov	r0, r9
 8004500:	4798      	blx	r3
	if (ret != 0) {
 8004502:	b1a0      	cbz	r0, 800452e <gpio_stm32_pin_interrupt_configure+0x7e>
	switch (trig) {
 8004504:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8004508:	d02f      	beq.n	800456a <gpio_stm32_pin_interrupt_configure+0xba>
 800450a:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 800450e:	d02e      	beq.n	800456e <gpio_stm32_pin_interrupt_configure+0xbe>
 8004510:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8004514:	bf14      	ite	ne
 8004516:	2100      	movne	r1, #0
 8004518:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff f9ba 	bl	8003894 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff f999 	bl	8003858 <stm32_exti_enable>
}
 8004526:	4630      	mov	r0, r6
 8004528:	b003      	add	sp, #12
 800452a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800452e:	f004 0203 	and.w	r2, r4, #3
 8004532:	3204      	adds	r2, #4
 8004534:	0093      	lsls	r3, r2, #2
 8004536:	220f      	movs	r2, #15
 8004538:	409a      	lsls	r2, r3
 800453a:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800453e:	b2d3      	uxtb	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004546:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800454a:	0c11      	lsrs	r1, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8004550:	fab1 f181 	clz	r1, r1
 8004554:	fa08 f801 	lsl.w	r8, r8, r1
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	ea21 4212 	bic.w	r2, r1, r2, lsr #16
 800455e:	ea48 0202 	orr.w	r2, r8, r2
	switch (trig) {
 8004562:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	d1cf      	bne.n	800450a <gpio_stm32_pin_interrupt_configure+0x5a>
		edge = STM32_EXTI_TRIG_RISING;
 800456a:	2101      	movs	r1, #1
 800456c:	e7d5      	b.n	800451a <gpio_stm32_pin_interrupt_configure+0x6a>
		edge = STM32_EXTI_TRIG_BOTH;
 800456e:	2103      	movs	r1, #3
 8004570:	e7d3      	b.n	800451a <gpio_stm32_pin_interrupt_configure+0x6a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004572:	f001 0303 	and.w	r3, r1, #3
 8004576:	3304      	adds	r3, #4
 8004578:	009a      	lsls	r2, r3, #2
 800457a:	230f      	movs	r3, #15
 800457c:	4093      	lsls	r3, r2
 800457e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8004582:	b2da      	uxtb	r2, r3
 8004584:	4914      	ldr	r1, [pc, #80]	; (80045d8 <gpio_stm32_pin_interrupt_configure+0x128>)
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	3202      	adds	r2, #2
 800458a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800458e:	0c19      	lsrs	r1, r3, #16
 8004590:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	40d3      	lsrs	r3, r2
 800459e:	4298      	cmp	r0, r3
 80045a0:	d001      	beq.n	80045a6 <gpio_stm32_pin_interrupt_configure+0xf6>
	int err = 0;
 80045a2:	2600      	movs	r6, #0
 80045a4:	e7bf      	b.n	8004526 <gpio_stm32_pin_interrupt_configure+0x76>
			stm32_exti_disable(pin);
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff f966 	bl	8003878 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80045ac:	4620      	mov	r0, r4
 80045ae:	f7ff f9bb 	bl	8003928 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80045b2:	2100      	movs	r1, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff f96d 	bl	8003894 <stm32_exti_trigger>
	int err = 0;
 80045ba:	2600      	movs	r6, #0
 80045bc:	e7b3      	b.n	8004526 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -EBUSY;
 80045be:	f06f 060f 	mvn.w	r6, #15
	return err;
 80045c2:	e7b0      	b.n	8004526 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -ENOTSUP;
 80045c4:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80045c8:	e7ad      	b.n	8004526 <gpio_stm32_pin_interrupt_configure+0x76>
 80045ca:	bf00      	nop
 80045cc:	0800479d 	.word	0x0800479d
 80045d0:	08011c78 	.word	0x08011c78
 80045d4:	08011734 	.word	0x08011734
 80045d8:	40010000 	.word	0x40010000

080045dc <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 80045dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80045de:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 80045e0:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045e2:	6866      	ldr	r6, [r4, #4]
 80045e4:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80045e6:	f3c2 1580 	ubfx	r5, r2, #6, #1
 80045ea:	ea26 0600 	bic.w	r6, r6, r0
 80045ee:	408d      	lsls	r5, r1
 80045f0:	4335      	orrs	r5, r6
 80045f2:	6065      	str	r5, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80045f4:	68a7      	ldr	r7, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	fa90 f6a0 	rbit	r6, r0
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 80045fa:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 80045fe:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  if (value == 0U)
 8004602:	b13e      	cbz	r6, 8004614 <gpio_stm32_configure_raw.isra.0+0x38>
  return __builtin_clz(value);
 8004604:	fab6 f686 	clz	r6, r6
 8004608:	0076      	lsls	r6, r6, #1
 800460a:	2503      	movs	r5, #3
 800460c:	fa05 f606 	lsl.w	r6, r5, r6
 8004610:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004618:	2d00      	cmp	r5, #0
 800461a:	d054      	beq.n	80046c6 <gpio_stm32_configure_raw.isra.0+0xea>
  return __builtin_clz(value);
 800461c:	fab5 f585 	clz	r5, r5
 8004620:	006d      	lsls	r5, r5, #1
 8004622:	fa0e f505 	lsl.w	r5, lr, r5
 8004626:	433d      	orrs	r5, r7
 8004628:	60a5      	str	r5, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800462a:	68e7      	ldr	r7, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	fa90 f6a0 	rbit	r6, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8004630:	f3c2 2241 	ubfx	r2, r2, #9, #2
  if (value == 0U)
 8004634:	b13e      	cbz	r6, 8004646 <gpio_stm32_configure_raw.isra.0+0x6a>
  return __builtin_clz(value);
 8004636:	fab6 f686 	clz	r6, r6
 800463a:	0076      	lsls	r6, r6, #1
 800463c:	2503      	movs	r5, #3
 800463e:	fa05 f606 	lsl.w	r6, r5, r6
 8004642:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800464a:	b3d5      	cbz	r5, 80046c2 <gpio_stm32_configure_raw.isra.0+0xe6>
  return __builtin_clz(value);
 800464c:	fab5 f585 	clz	r5, r5
 8004650:	006d      	lsls	r5, r5, #1
 8004652:	fa02 f505 	lsl.w	r5, r2, r5
 8004656:	433d      	orrs	r5, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8004658:	f1bc 0f20 	cmp.w	ip, #32
 800465c:	60e5      	str	r5, [r4, #12]
 800465e:	d018      	beq.n	8004692 <gpio_stm32_configure_raw.isra.0+0xb6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004664:	6821      	ldr	r1, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8004666:	ea4f 131c 	mov.w	r3, ip, lsr #4
  if (value == 0U)
 800466a:	b13a      	cbz	r2, 800467c <gpio_stm32_configure_raw.isra.0+0xa0>
  return __builtin_clz(value);
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	2503      	movs	r5, #3
 8004674:	fa05 f202 	lsl.w	r2, r5, r2
 8004678:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004680:	b318      	cbz	r0, 80046ca <gpio_stm32_configure_raw.isra.0+0xee>
  return __builtin_clz(value);
 8004682:	fab0 f080 	clz	r0, r0
 8004686:	0040      	lsls	r0, r0, #1
 8004688:	fa03 f000 	lsl.w	r0, r3, r0
 800468c:	4308      	orrs	r0, r1
 800468e:	6020      	str	r0, [r4, #0]
}
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pin < 8) {
 8004692:	2907      	cmp	r1, #7
 8004694:	dc1f      	bgt.n	80046d6 <gpio_stm32_configure_raw.isra.0+0xfa>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800469a:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 800469c:	b13a      	cbz	r2, 80046ae <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 800469e:	fab2 f282 	clz	r2, r2
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	250f      	movs	r5, #15
 80046a6:	fa05 f202 	lsl.w	r2, r5, r2
 80046aa:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80046b2:	b34a      	cbz	r2, 8004708 <gpio_stm32_configure_raw.isra.0+0x12c>
  return __builtin_clz(value);
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	0092      	lsls	r2, r2, #2
 80046ba:	4093      	lsls	r3, r2
 80046bc:	430b      	orrs	r3, r1
 80046be:	6223      	str	r3, [r4, #32]
}
 80046c0:	e7ce      	b.n	8004660 <gpio_stm32_configure_raw.isra.0+0x84>
 80046c2:	2540      	movs	r5, #64	; 0x40
 80046c4:	e7c5      	b.n	8004652 <gpio_stm32_configure_raw.isra.0+0x76>
 80046c6:	2540      	movs	r5, #64	; 0x40
 80046c8:	e7ab      	b.n	8004622 <gpio_stm32_configure_raw.isra.0+0x46>
 80046ca:	2040      	movs	r0, #64	; 0x40
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80046cc:	fa03 f000 	lsl.w	r0, r3, r0
 80046d0:	4308      	orrs	r0, r1
 80046d2:	6020      	str	r0, [r4, #0]
}
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80046d6:	0a02      	lsrs	r2, r0, #8
 80046d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80046de:	b139      	cbz	r1, 80046f0 <gpio_stm32_configure_raw.isra.0+0x114>
  return __builtin_clz(value);
 80046e0:	fab1 f181 	clz	r1, r1
 80046e4:	0089      	lsls	r1, r1, #2
 80046e6:	260f      	movs	r6, #15
 80046e8:	fa06 f101 	lsl.w	r1, r6, r1
 80046ec:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80046f4:	b132      	cbz	r2, 8004704 <gpio_stm32_configure_raw.isra.0+0x128>
  return __builtin_clz(value);
 80046f6:	fab2 f282 	clz	r2, r2
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	4093      	lsls	r3, r2
 80046fe:	432b      	orrs	r3, r5
 8004700:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004702:	e7ad      	b.n	8004660 <gpio_stm32_configure_raw.isra.0+0x84>
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	e7f9      	b.n	80046fc <gpio_stm32_configure_raw.isra.0+0x120>
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	e7d6      	b.n	80046ba <gpio_stm32_configure_raw.isra.0+0xde>

0800470c <gpio_stm32_config>:
{
 800470c:	b508      	push	{r3, lr}
 800470e:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8004710:	0592      	lsls	r2, r2, #22
 8004712:	d515      	bpl.n	8004740 <gpio_stm32_config+0x34>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8004714:	079a      	lsls	r2, r3, #30
 8004716:	d421      	bmi.n	800475c <gpio_stm32_config+0x50>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004718:	f013 0f10 	tst.w	r3, #16
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800471c:	f04f 0210 	mov.w	r2, #16
		if ((flags & GPIO_PULL_UP) != 0) {
 8004720:	d023      	beq.n	800476a <gpio_stm32_config+0x5e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004726:	f413 6f00 	tst.w	r3, #2048	; 0x800
	const struct gpio_stm32_config *cfg = dev->config;
 800472a:	6840      	ldr	r0, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800472c:	d126      	bne.n	800477c <gpio_stm32_config+0x70>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800472e:	055b      	lsls	r3, r3, #21
 8004730:	d50a      	bpl.n	8004748 <gpio_stm32_config+0x3c>
  WRITE_REG(GPIOx->BRR, PinMask);
 8004732:	f8d0 c004 	ldr.w	ip, [r0, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8004736:	2301      	movs	r3, #1
 8004738:	408b      	lsls	r3, r1
 800473a:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
	return 0;
 800473e:	e003      	b.n	8004748 <gpio_stm32_config+0x3c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004740:	05da      	lsls	r2, r3, #23
	const struct gpio_stm32_config *cfg = dev->config;
 8004742:	6840      	ldr	r0, [r0, #4]
	} else if  ((flags & GPIO_INPUT) != 0) {
 8004744:	d405      	bmi.n	8004752 <gpio_stm32_config+0x46>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8004746:	2230      	movs	r2, #48	; 0x30
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8004748:	2300      	movs	r3, #0
 800474a:	f7ff ff47 	bl	80045dc <gpio_stm32_configure_raw.isra.0>
	return 0;
 800474e:	2000      	movs	r0, #0
}
 8004750:	bd08      	pop	{r3, pc}
		if ((flags & GPIO_PULL_UP) != 0) {
 8004752:	06da      	lsls	r2, r3, #27
 8004754:	d519      	bpl.n	800478a <gpio_stm32_config+0x7e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	e7f5      	b.n	8004748 <gpio_stm32_config+0x3c>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800475c:	075a      	lsls	r2, r3, #29
 800475e:	d51a      	bpl.n	8004796 <gpio_stm32_config+0x8a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8004760:	f013 0f10 	tst.w	r3, #16
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8004764:	f04f 0250 	mov.w	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8004768:	d1db      	bne.n	8004722 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800476a:	f013 0f20 	tst.w	r3, #32
 800476e:	d0da      	beq.n	8004726 <gpio_stm32_config+0x1a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8004770:	f413 6f00 	tst.w	r3, #2048	; 0x800
	const struct gpio_stm32_config *cfg = dev->config;
 8004774:	6840      	ldr	r0, [r0, #4]
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8004776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800477a:	d0d8      	beq.n	800472e <gpio_stm32_config+0x22>
	WRITE_REG(gpio->BSRR, pins);
 800477c:	f8d0 c004 	ldr.w	ip, [r0, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8004780:	2301      	movs	r3, #1
 8004782:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8004784:	f8cc 3018 	str.w	r3, [ip, #24]
	return 0;
 8004788:	e7de      	b.n	8004748 <gpio_stm32_config+0x3c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800478a:	f013 0220 	ands.w	r2, r3, #32
 800478e:	bf18      	it	ne
 8004790:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8004794:	e7d8      	b.n	8004748 <gpio_stm32_config+0x3c>
				return -ENOTSUP;
 8004796:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800479a:	bd08      	pop	{r3, pc}

0800479c <gpio_stm32_isr>:
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800479c:	688b      	ldr	r3, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800479e:	b183      	cbz	r3, 80047c2 <gpio_stm32_isr+0x26>
{
 80047a0:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80047a2:	2501      	movs	r5, #1
 80047a4:	684e      	ldr	r6, [r1, #4]
	return node->next;
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	402a      	ands	r2, r5
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80047ae:	4619      	mov	r1, r3
 80047b0:	4630      	mov	r0, r6
		if (cb->pin_mask & pins) {
 80047b2:	d001      	beq.n	80047b8 <gpio_stm32_isr+0x1c>
			cb->handler(port, cb, cb->pin_mask & pins);
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80047b8:	b114      	cbz	r4, 80047c0 <gpio_stm32_isr+0x24>
 80047ba:	4623      	mov	r3, r4
 80047bc:	6824      	ldr	r4, [r4, #0]
 80047be:	e7f4      	b.n	80047aa <gpio_stm32_isr+0xe>
}
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	4770      	bx	lr

080047c4 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80047c4:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 80047c6:	6903      	ldr	r3, [r0, #16]
					(clock_control_subsys_t *)&cfg->pclken);
 80047c8:	6844      	ldr	r4, [r0, #4]
	data->dev = dev;
 80047ca:	6058      	str	r0, [r3, #4]
 80047cc:	4d08      	ldr	r5, [pc, #32]	; (80047f0 <gpio_stm32_init+0x2c>)
 80047ce:	4628      	mov	r0, r5
 80047d0:	f008 fc24 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80047d4:	b140      	cbz	r0, 80047e8 <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 80047d6:	68ab      	ldr	r3, [r5, #8]
 80047d8:	340c      	adds	r4, #12
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4621      	mov	r1, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	4798      	blx	r3
 80047e2:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	f06f 0012 	mvn.w	r0, #18
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	08011734 	.word	0x08011734

080047f4 <gpio_stm32_configure>:
{
 80047f4:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 80047f6:	6840      	ldr	r0, [r0, #4]
 80047f8:	f7ff fef0 	bl	80045dc <gpio_stm32_configure_raw.isra.0>
}
 80047fc:	2000      	movs	r0, #0
 80047fe:	bd08      	pop	{r3, pc}

08004800 <LL_TIM_OC_SetCompareCH1>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004800:	6341      	str	r1, [r0, #52]	; 0x34
}
 8004802:	4770      	bx	lr

08004804 <LL_TIM_OC_SetCompareCH2>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004804:	6381      	str	r1, [r0, #56]	; 0x38
}
 8004806:	4770      	bx	lr

08004808 <LL_TIM_OC_SetCompareCH3>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004808:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800480a:	4770      	bx	lr

0800480c <LL_TIM_OC_SetCompareCH4>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR4, CompareValue);
 800480c:	6401      	str	r1, [r0, #64]	; 0x40
}
 800480e:	4770      	bx	lr

08004810 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004810:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004812:	6581      	str	r1, [r0, #88]	; 0x58
}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004818:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800481a:	4770      	bx	lr

0800481c <pwm_stm32_get_cycles_per_sec>:
					uint64_t *cycles)
{
	struct pwm_stm32_data *data = dev->data;
	const struct pwm_stm32_config *cfg = dev->config;

	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 800481c:	6841      	ldr	r1, [r0, #4]
 800481e:	6903      	ldr	r3, [r0, #16]
 8004820:	6849      	ldr	r1, [r1, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2000      	movs	r0, #0
 8004826:	3101      	adds	r1, #1
 8004828:	6050      	str	r0, [r2, #4]
 800482a:	fbb3 f3f1 	udiv	r3, r3, r1
 800482e:	6013      	str	r3, [r2, #0]

	return 0;
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <pwm_stm32_pin_set>:
{
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8004838:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
 800483c:	b088      	sub	sp, #32
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 800483e:	f1bc 0f05 	cmp.w	ip, #5
{
 8004842:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
	const struct pwm_stm32_config *cfg = dev->config;
 8004846:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 800484a:	f200 80ae 	bhi.w	80049aa <pwm_stm32_pin_set+0x176>
	if (pulse_cycles > period_cycles) {
 800484e:	429a      	cmp	r2, r3
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	f0c0 80a9 	bcc.w	80049aa <pwm_stm32_pin_set+0x176>
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8004858:	f8d8 3000 	ldr.w	r3, [r8]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d003      	beq.n	800486a <pwm_stm32_pin_set+0x36>
 8004862:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004866:	f200 80b4 	bhi.w	80049d2 <pwm_stm32_pin_set+0x19e>
	channel = ch2ll[pwm - 1u];
 800486a:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <pwm_stm32_pin_set+0x1b0>)
 800486c:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
	if (period_cycles == 0u) {
 8004870:	2c00      	cmp	r4, #0
 8004872:	d068      	beq.n	8004946 <pwm_stm32_pin_set+0x112>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	ea02 0107 	and.w	r1, r2, r7
 800487a:	ea37 0202 	bics.w	r2, r7, r2
 800487e:	f00e 0601 	and.w	r6, lr, #1
 8004882:	d031      	beq.n	80048e8 <pwm_stm32_pin_set+0xb4>
		LL_TIM_OC_StructInit(&oc_init);
 8004884:	4668      	mov	r0, sp
 8004886:	f004 fbdb 	bl	8009040 <LL_TIM_OC_StructInit>
		return LL_TIM_OCPOLARITY_HIGH;
 800488a:	0076      	lsls	r6, r6, #1
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 800488c:	f8d8 0000 	ldr.w	r0, [r8]
		oc_init.CompareValue = pulse_cycles;
 8004890:	9503      	str	r5, [sp, #12]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8004892:	2301      	movs	r3, #1
 8004894:	2560      	movs	r5, #96	; 0x60
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8004896:	466a      	mov	r2, sp
 8004898:	4639      	mov	r1, r7
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800489a:	e9cd 5300 	strd	r5, r3, [sp]
		oc_init.OCPolarity = get_polarity(flags);
 800489e:	9604      	str	r6, [sp, #16]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80048a0:	f004 fbd8 	bl	8009054 <LL_TIM_OC_Init>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f040 8091 	bne.w	80049cc <pwm_stm32_pin_set+0x198>
		LL_TIM_EnableARRPreload(cfg->timer);
 80048aa:	f8d8 3000 	ldr.w	r3, [r8]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80048ae:	681a      	ldr	r2, [r3, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80048b0:	2f01      	cmp	r7, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80048b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048b6:	601a      	str	r2, [r3, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80048b8:	d035      	beq.n	8004926 <pwm_stm32_pin_set+0xf2>
 80048ba:	2f04      	cmp	r7, #4
 80048bc:	d033      	beq.n	8004926 <pwm_stm32_pin_set+0xf2>
 80048be:	2f10      	cmp	r7, #16
 80048c0:	d05e      	beq.n	8004980 <pwm_stm32_pin_set+0x14c>
 80048c2:	2f40      	cmp	r7, #64	; 0x40
 80048c4:	d02f      	beq.n	8004926 <pwm_stm32_pin_set+0xf2>
 80048c6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80048ca:	d061      	beq.n	8004990 <pwm_stm32_pin_set+0x15c>
 80048cc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80048d0:	d05e      	beq.n	8004990 <pwm_stm32_pin_set+0x15c>
 80048d2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80048d6:	d070      	beq.n	80049ba <pwm_stm32_pin_set+0x186>
 80048d8:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80048dc:	bf0c      	ite	eq
 80048de:	2208      	moveq	r2, #8
 80048e0:	f44f 6200 	movne.w	r2, #2048	; 0x800
 80048e4:	203c      	movs	r0, #60	; 0x3c
 80048e6:	e01f      	b.n	8004928 <pwm_stm32_pin_set+0xf4>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80048e8:	2901      	cmp	r1, #1
	return LL_TIM_OCPOLARITY_LOW;
 80048ea:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 80048ee:	d032      	beq.n	8004956 <pwm_stm32_pin_set+0x122>
 80048f0:	2904      	cmp	r1, #4
 80048f2:	d050      	beq.n	8004996 <pwm_stm32_pin_set+0x162>
 80048f4:	2910      	cmp	r1, #16
 80048f6:	d053      	beq.n	80049a0 <pwm_stm32_pin_set+0x16c>
 80048f8:	2940      	cmp	r1, #64	; 0x40
 80048fa:	d044      	beq.n	8004986 <pwm_stm32_pin_set+0x152>
 80048fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004900:	d056      	beq.n	80049b0 <pwm_stm32_pin_set+0x17c>
 8004902:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004906:	d05c      	beq.n	80049c2 <pwm_stm32_pin_set+0x18e>
 8004908:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800490c:	d064      	beq.n	80049d8 <pwm_stm32_pin_set+0x1a4>
 800490e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8004912:	bf07      	ittee	eq
 8004914:	ea4f 4e0e 	moveq.w	lr, lr, lsl #16
 8004918:	f46f 3200 	mvneq.w	r2, #131072	; 0x20000
 800491c:	ea4f 5e0e 	movne.w	lr, lr, lsl #20
 8004920:	f46f 1200 	mvnne.w	r2, #2097152	; 0x200000
 8004924:	e019      	b.n	800495a <pwm_stm32_pin_set+0x126>
 8004926:	2208      	movs	r2, #8
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004928:	f103 0518 	add.w	r5, r3, #24
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800492c:	3c01      	subs	r4, #1
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800492e:	5829      	ldr	r1, [r5, r0]
 8004930:	4311      	orrs	r1, r2
 8004932:	5029      	str	r1, [r5, r0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004934:	62dc      	str	r4, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	f042 0201 	orr.w	r2, r2, #1
	return 0;
 800493c:	2000      	movs	r0, #0
 800493e:	615a      	str	r2, [r3, #20]
}
 8004940:	b008      	add	sp, #32
 8004942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(TIMx->CCER, Channels);
 8004946:	6a1a      	ldr	r2, [r3, #32]
		return 0;
 8004948:	4620      	mov	r0, r4
 800494a:	ea22 0207 	bic.w	r2, r2, r7
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	b008      	add	sp, #32
 8004952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004956:	f06f 0202 	mvn.w	r2, #2
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800495a:	6a1e      	ldr	r6, [r3, #32]
 800495c:	4016      	ands	r6, r2
 800495e:	ea46 060e 	orr.w	r6, r6, lr
 8004962:	621e      	str	r6, [r3, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8004964:	4618      	mov	r0, r3
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <pwm_stm32_pin_set+0x1b4>)
 8004968:	4629      	mov	r1, r5
 800496a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800496e:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8004970:	f8d8 3000 	ldr.w	r3, [r8]
 8004974:	3c01      	subs	r4, #1
	return 0;
 8004976:	2000      	movs	r0, #0
  WRITE_REG(TIMx->ARR, AutoReload);
 8004978:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 800497a:	b008      	add	sp, #32
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004984:	e7d0      	b.n	8004928 <pwm_stm32_pin_set+0xf4>
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8004986:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 800498a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800498e:	e7e4      	b.n	800495a <pwm_stm32_pin_set+0x126>
 8004990:	2208      	movs	r2, #8
 8004992:	2004      	movs	r0, #4
 8004994:	e7c8      	b.n	8004928 <pwm_stm32_pin_set+0xf4>
 8004996:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800499a:	f06f 0208 	mvn.w	r2, #8
 800499e:	e7dc      	b.n	800495a <pwm_stm32_pin_set+0x126>
 80049a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 80049a4:	f06f 0220 	mvn.w	r2, #32
 80049a8:	e7d7      	b.n	800495a <pwm_stm32_pin_set+0x126>
		return -EINVAL;
 80049aa:	f06f 0015 	mvn.w	r0, #21
 80049ae:	e7c7      	b.n	8004940 <pwm_stm32_pin_set+0x10c>
 80049b0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80049b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80049b8:	e7cf      	b.n	800495a <pwm_stm32_pin_set+0x126>
 80049ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049be:	2004      	movs	r0, #4
 80049c0:	e7b2      	b.n	8004928 <pwm_stm32_pin_set+0xf4>
 80049c2:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80049c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049ca:	e7c6      	b.n	800495a <pwm_stm32_pin_set+0x126>
			return -EIO;
 80049cc:	f06f 0004 	mvn.w	r0, #4
 80049d0:	e7b6      	b.n	8004940 <pwm_stm32_pin_set+0x10c>
		return -ENOTSUP;
 80049d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80049d6:	e7b3      	b.n	8004940 <pwm_stm32_pin_set+0x10c>
 80049d8:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 80049dc:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 80049e0:	e7bb      	b.n	800495a <pwm_stm32_pin_set+0x126>
 80049e2:	bf00      	nop
 80049e4:	08012078 	.word	0x08012078
 80049e8:	080120ac 	.word	0x080120ac

080049ec <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pwm_stm32_data *data = dev->data;
	const struct pwm_stm32_config *cfg = dev->config;
 80049f0:	6845      	ldr	r5, [r0, #4]
	struct pwm_stm32_data *data = dev->data;
 80049f2:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 80049f6:	b086      	sub	sp, #24
 80049f8:	4c2f      	ldr	r4, [pc, #188]	; (8004ab8 <pwm_stm32_init+0xcc>)
 80049fa:	4620      	mov	r0, r4
 80049fc:	f008 fb0e 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d055      	beq.n	8004ab0 <pwm_stm32_init+0xc4>
	return api->on(dev, sys);
 8004a04:	68a7      	ldr	r7, [r4, #8]
 8004a06:	f105 0608 	add.w	r6, r5, #8
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4798      	blx	r3

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
	if (r < 0) {
 8004a12:	2800      	cmp	r0, #0
 8004a14:	db41      	blt.n	8004a9a <pwm_stm32_init+0xae>
 8004a16:	4620      	mov	r0, r4
 8004a18:	f008 fb00 	bl	800d01c <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d047      	beq.n	8004ab0 <pwm_stm32_init+0xc4>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
		return -ENOSYS;
 8004a22:	f06f 0057 	mvn.w	r0, #87	; 0x57
	if (api->get_rate == NULL) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d037      	beq.n	8004a9a <pwm_stm32_init+0xae>
	}

	return api->get_rate(dev, sys, rate);
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	aa01      	add	r2, sp, #4
 8004a30:	4798      	blx	r3
	if (r < 0) {
 8004a32:	2800      	cmp	r0, #0
 8004a34:	db31      	blt.n	8004a9a <pwm_stm32_init+0xae>
		*tim_clk = bus_clk;
 8004a36:	9b01      	ldr	r3, [sp, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8004a38:	6928      	ldr	r0, [r5, #16]
 8004a3a:	f8c8 3000 	str.w	r3, [r8]
 8004a3e:	aa01      	add	r2, sp, #4
 8004a40:	2100      	movs	r1, #0
 8004a42:	f004 fa01 	bl	8008e48 <pinctrl_lookup_state>
	if (ret < 0) {
 8004a46:	2800      	cmp	r0, #0
 8004a48:	db27      	blt.n	8004a9a <pwm_stm32_init+0xae>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8004a4a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	7919      	ldrb	r1, [r3, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	f004 fa1d 	bl	8008e90 <pinctrl_configure_pins>
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 8004a56:	2800      	cmp	r0, #0
 8004a58:	db1f      	blt.n	8004a9a <pwm_stm32_init+0xae>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 8004a5a:	a801      	add	r0, sp, #4
 8004a5c:	f004 faac 	bl	8008fb8 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 8004a60:	686a      	ldr	r2, [r5, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
	init.Autoreload = 0u;
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8004a62:	6828      	ldr	r0, [r5, #0]
	init.Prescaler = cfg->prescaler;
 8004a64:	f8ad 2004 	strh.w	r2, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004a68:	2300      	movs	r3, #0
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8004a6a:	a901      	add	r1, sp, #4
	init.Autoreload = 0u;
 8004a6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004a70:	9304      	str	r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8004a72:	f004 faab 	bl	8008fcc <LL_TIM_Init>
 8004a76:	b9c0      	cbnz	r0, 8004aaa <pwm_stm32_init+0xbe>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <pwm_stm32_init+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00f      	beq.n	8004aa0 <pwm_stm32_init+0xb4>
 8004a80:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <pwm_stm32_init+0xb4>
 8004a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <pwm_stm32_init+0xb4>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 8004a96:	2000      	movs	r0, #0
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	b006      	add	sp, #24
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa6:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004aa8:	e7f2      	b.n	8004a90 <pwm_stm32_init+0xa4>
		return -EIO;
 8004aaa:	f06f 0004 	mvn.w	r0, #4
 8004aae:	e7f4      	b.n	8004a9a <pwm_stm32_init+0xae>
		return -ENODEV;
 8004ab0:	f06f 0012 	mvn.w	r0, #18
 8004ab4:	e7f1      	b.n	8004a9a <pwm_stm32_init+0xae>
 8004ab6:	bf00      	nop
 8004ab8:	08011734 	.word	0x08011734
 8004abc:	40012c00 	.word	0x40012c00

08004ac0 <dma_callback>:
			 uint32_t channel, int status)
{
	/* arg directly holds the spi device */
	struct spi_stm32_data *data = arg;

	if (status != 0) {
 8004ac0:	b13b      	cbz	r3, 8004ad2 <dma_callback+0x12>
		LOG_ERR("DMA callback error with channel %d.", channel);
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8004ac2:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	67cb      	str	r3, [r1, #124]	; 0x7c
	z_impl_k_sem_give(sem);
 8004aca:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8004ace:	f008 be57 	b.w	800d780 <z_impl_k_sem_give>
	} else {
		/* identify the origin of this callback */
		if (channel == data->dma_tx.channel) {
 8004ad2:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00d      	beq.n	8004af6 <dma_callback+0x36>
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
		} else if (channel == data->dma_rx.channel) {
 8004ada:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8004ade:	4293      	cmp	r3, r2
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 8004ae0:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8004ae2:	bf0c      	ite	eq
 8004ae4:	f043 0302 	orreq.w	r3, r3, #2
		} else {
			LOG_ERR("DMA callback channel %d is not valid.",
								channel);
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8004ae8:	f043 0301 	orrne.w	r3, r3, #1
 8004aec:	67cb      	str	r3, [r1, #124]	; 0x7c
 8004aee:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8004af2:	f008 be45 	b.w	800d780 <z_impl_k_sem_give>
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 8004af6:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	67cb      	str	r3, [r1, #124]	; 0x7c
 8004afe:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8004b02:	f008 be3d 	b.w	800d780 <z_impl_k_sem_give>
 8004b06:	bf00      	nop

08004b08 <spi_stm32_configure.isra.0>:
		spi_stm32_complete(dev, err);
	}
}
#endif

static int spi_stm32_configure(const struct device *dev,
 8004b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct spi_config *config)
{
	const struct spi_stm32_config *cfg = dev->config;
	struct spi_stm32_data *data = dev->data;
	const uint32_t scaler[] = {
 8004b0c:	4d51      	ldr	r5, [pc, #324]	; (8004c54 <spi_stm32_configure.isra.0+0x14c>)
static int spi_stm32_configure(const struct device *dev,
 8004b0e:	460f      	mov	r7, r1
 8004b10:	4616      	mov	r6, r2
 8004b12:	4680      	mov	r8, r0
	const uint32_t scaler[] = {
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int spi_stm32_configure(const struct device *dev,
 8004b16:	b08a      	sub	sp, #40	; 0x28
	const uint32_t scaler[] = {
 8004b18:	ac02      	add	r4, sp, #8
 8004b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	};
	SPI_TypeDef *spi = cfg->spi;
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	42b3      	cmp	r3, r6
 8004b28:	f000 8089 	beq.w	8004c3e <spi_stm32_configure.isra.0+0x136>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004b2c:	88b3      	ldrh	r3, [r6, #4]
 8004b2e:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8004b32:	2a08      	cmp	r2, #8
 8004b34:	d002      	beq.n	8004b3c <spi_stm32_configure.isra.0+0x34>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8004b36:	2a10      	cmp	r2, #16
 8004b38:	f040 8088 	bne.w	8004c4c <spi_stm32_configure.isra.0+0x144>
	SPI_TypeDef *spi = cfg->spi;
 8004b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8004b40:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	bf14      	ite	ne
 8004b48:	f043 0310 	orrne.w	r3, r3, #16
 8004b4c:	f023 0310 	biceq.w	r3, r3, #16
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	4d41      	ldr	r5, [pc, #260]	; (8004c58 <spi_stm32_configure.isra.0+0x150>)
 8004b54:	4628      	mov	r0, r5
 8004b56:	f008 fa61 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d073      	beq.n	8004c46 <spi_stm32_configure.isra.0+0x13e>
	if (api->get_rate == NULL) {
 8004b5e:	68ab      	ldr	r3, [r5, #8]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06f      	beq.n	8004c46 <spi_stm32_configure.isra.0+0x13e>
	return api->get_rate(dev, sys, rate);
 8004b66:	4641      	mov	r1, r8
 8004b68:	4628      	mov	r0, r5
 8004b6a:	aa01      	add	r2, sp, #4
 8004b6c:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	db69      	blt.n	8004c46 <spi_stm32_configure.isra.0+0x13e>
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
		uint32_t clk = clock >> br;
 8004b72:	9801      	ldr	r0, [sp, #4]

		if (clk <= config->frequency) {
 8004b74:	6831      	ldr	r1, [r6, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004b76:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 8004b78:	fa20 f203 	lsr.w	r2, r0, r3
		if (clk <= config->frequency) {
 8004b7c:	428a      	cmp	r2, r1
 8004b7e:	d907      	bls.n	8004b90 <spi_stm32_configure.isra.0+0x88>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004b80:	3301      	adds	r3, #1
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	d1f8      	bne.n	8004b78 <spi_stm32_configure.isra.0+0x70>
	if (br > ARRAY_SIZE(scaler)) {
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
			    config->frequency,
			    clock >> 1,
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
 8004b86:	f06f 0015 	mvn.w	r0, #21
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
}
 8004b8a:	b00a      	add	sp, #40	; 0x28
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004b90:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004b92:	a90a      	add	r1, sp, #40	; 0x28
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	6022      	str	r2, [r4, #0]
 8004b9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004ba4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004ba8:	431a      	orrs	r2, r3
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8004baa:	88b3      	ldrh	r3, [r6, #4]
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	079a      	lsls	r2, r3, #30
 8004bb0:	d440      	bmi.n	8004c34 <spi_stm32_configure.isra.0+0x12c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	f022 0202 	bic.w	r2, r2, #2
 8004bb8:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004bba:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8004bbc:	075d      	lsls	r5, r3, #29
 8004bbe:	bf4c      	ite	mi
 8004bc0:	f042 0201 	orrmi.w	r2, r2, #1
 8004bc4:	f022 0201 	bicpl.w	r2, r2, #1
 8004bc8:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8004bd0:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004bd2:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8004bd4:	06d8      	lsls	r0, r3, #27
 8004bd6:	bf4c      	ite	mi
 8004bd8:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8004bdc:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8004be0:	6022      	str	r2, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004be2:	6822      	ldr	r2, [r4, #0]
 8004be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be8:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf0:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004bf2:	6862      	ldr	r2, [r4, #4]
 8004bf4:	f022 0204 	bic.w	r2, r2, #4
 8004bf8:	6062      	str	r2, [r4, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004bfa:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8004bfc:	07d9      	lsls	r1, r3, #31
 8004bfe:	bf4c      	ite	mi
 8004c00:	f422 7282 	bicmi.w	r2, r2, #260	; 0x104
 8004c04:	f442 7282 	orrpl.w	r2, r2, #260	; 0x104
 8004c08:	6022      	str	r2, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8004c0a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004c0e:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	bf06      	itte	eq
 8004c14:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 8004c18:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 8004c1c:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8004c20:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8004c22:	6863      	ldr	r3, [r4, #4]
	return 0;
 8004c24:	2000      	movs	r0, #0
 8004c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c2a:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 8004c2c:	603e      	str	r6, [r7, #0]
}
 8004c2e:	b00a      	add	sp, #40	; 0x28
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	f042 0202 	orr.w	r2, r2, #2
 8004c3a:	6022      	str	r2, [r4, #0]
}
 8004c3c:	e7bd      	b.n	8004bba <spi_stm32_configure.isra.0+0xb2>
		return 0;
 8004c3e:	2000      	movs	r0, #0
}
 8004c40:	b00a      	add	sp, #40	; 0x28
 8004c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8004c46:	f06f 0004 	mvn.w	r0, #4
 8004c4a:	e79e      	b.n	8004b8a <spi_stm32_configure.isra.0+0x82>
		return -ENOTSUP;
 8004c4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004c50:	e79b      	b.n	8004b8a <spi_stm32_configure.isra.0+0x82>
 8004c52:	bf00      	nop
 8004c54:	08011c80 	.word	0x08011c80
 8004c58:	08011734 	.word	0x08011734

08004c5c <spi_stm32_release>:

static int spi_stm32_release(const struct device *dev,
			     const struct spi_config *config)
{
 8004c5c:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8004c5e:	6904      	ldr	r4, [r0, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	b1a3      	cbz	r3, 8004c8e <spi_stm32_release+0x32>
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	b193      	cbz	r3, 8004c8e <spi_stm32_release+0x32>
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	b182      	cbz	r2, 8004c8e <spi_stm32_release+0x32>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8004c6c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004c6e:	f009 ff27 	bl	800eac0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
 8004c76:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004c78:	791b      	ldrb	r3, [r3, #4]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4099      	lsls	r1, r3
 8004c7e:	6903      	ldr	r3, [r0, #16]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004c84:	6883      	ldr	r3, [r0, #8]
 8004c86:	bf0c      	ite	eq
 8004c88:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004c8a:	68db      	ldrne	r3, [r3, #12]
 8004c8c:	4798      	blx	r3
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8004c8e:	69a3      	ldr	r3, [r4, #24]
 8004c90:	b10b      	cbz	r3, 8004c96 <spi_stm32_release+0x3a>

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8004c92:	2000      	movs	r0, #0
 8004c94:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
 8004c96:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 8004c98:	f104 0010 	add.w	r0, r4, #16
 8004c9c:	f008 fd70 	bl	800d780 <z_impl_k_sem_give>
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	bd10      	pop	{r4, pc}

08004ca4 <spi_stm32_complete.constprop.0.isra.0>:
static void spi_stm32_complete(const struct device *dev, int status)
 8004ca4:	b530      	push	{r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004ca6:	680b      	ldr	r3, [r1, #0]
	SPI_TypeDef *spi = cfg->spi;
 8004ca8:	6884      	ldr	r4, [r0, #8]
static void spi_stm32_complete(const struct device *dev, int status)
 8004caa:	b083      	sub	sp, #12
 8004cac:	b1e3      	cbz	r3, 8004ce8 <spi_stm32_complete.constprop.0.isra.0+0x44>
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	b1d2      	cbz	r2, 8004ce8 <spi_stm32_complete.constprop.0.isra.0+0x44>
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	b1b9      	cbz	r1, 8004ce8 <spi_stm32_complete.constprop.0.isra.0+0x44>
			if (!force_off &&
 8004cb8:	889b      	ldrh	r3, [r3, #4]
 8004cba:	04d8      	lsls	r0, r3, #19
 8004cbc:	d414      	bmi.n	8004ce8 <spi_stm32_complete.constprop.0.isra.0+0x44>
			k_busy_wait(ctx->config->cs->delay);
 8004cbe:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004cc0:	f009 fefe 	bl	800eac0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8004cc8:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4099      	lsls	r1, r3
 8004cd0:	6903      	ldr	r3, [r0, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004cd6:	6883      	ldr	r3, [r0, #8]
 8004cd8:	bf0c      	ite	eq
 8004cda:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004cdc:	68db      	ldrne	r3, [r3, #12]
 8004cde:	4798      	blx	r3
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004ce0:	68a3      	ldr	r3, [r4, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8004ce2:	07d9      	lsls	r1, r3, #31
 8004ce4:	d503      	bpl.n	8004cee <spi_stm32_complete.constprop.0.isra.0+0x4a>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8004ce6:	68e3      	ldr	r3, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004ce8:	68a3      	ldr	r3, [r4, #8]
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	d4fb      	bmi.n	8004ce6 <spi_stm32_complete.constprop.0.isra.0+0x42>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8004cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf8:	d00f      	beq.n	8004d1a <spi_stm32_complete.constprop.0.isra.0+0x76>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	069b      	lsls	r3, r3, #26
 8004cfe:	d506      	bpl.n	8004d0e <spi_stm32_complete.constprop.0.isra.0+0x6a>
  tmpreg_sr = SPIx->SR;
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 8004d04:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0c:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	6023      	str	r3, [r4, #0]
}
 8004d16:	b003      	add	sp, #12
 8004d18:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	061a      	lsls	r2, r3, #24
 8004d1e:	d5ec      	bpl.n	8004cfa <spi_stm32_complete.constprop.0.isra.0+0x56>
 8004d20:	68a3      	ldr	r3, [r4, #8]
 8004d22:	061a      	lsls	r2, r3, #24
 8004d24:	d4f9      	bmi.n	8004d1a <spi_stm32_complete.constprop.0.isra.0+0x76>
 8004d26:	e7e8      	b.n	8004cfa <spi_stm32_complete.constprop.0.isra.0+0x56>

08004d28 <spi_stm32_transceive>:

static int spi_stm32_transceive(const struct device *dev,
				const struct spi_config *config,
				const struct spi_buf_set *tx_bufs,
				const struct spi_buf_set *rx_bufs)
{
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef CONFIG_SPI_STM32_DMA
	struct spi_stm32_data *data = dev->data;
 8004d2c:	6906      	ldr	r6, [r0, #16]
{
 8004d2e:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 8004d30:	6843      	ldr	r3, [r0, #4]
 8004d32:	689d      	ldr	r5, [r3, #8]

	if ((data->dma_tx.dma_dev != NULL)
 8004d34:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
{
 8004d38:	b085      	sub	sp, #20
 8004d3a:	4680      	mov	r8, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	4691      	mov	r9, r2
	if ((data->dma_tx.dma_dev != NULL)
 8004d40:	b123      	cbz	r3, 8004d4c <spi_stm32_transceive+0x24>
	 && (data->dma_rx.dma_dev != NULL)) {
 8004d42:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 80da 	bne.w	8004f00 <spi_stm32_transceive+0x1d8>
	if (!tx_bufs && !rx_bufs) {
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	f000 824d 	beq.w	80051ee <spi_stm32_transceive+0x4c6>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8004d54:	88a3      	ldrh	r3, [r4, #4]
 8004d56:	0499      	lsls	r1, r3, #18
 8004d58:	d504      	bpl.n	8004d64 <spi_stm32_transceive+0x3c>
 8004d5a:	69b3      	ldr	r3, [r6, #24]
 8004d5c:	b913      	cbnz	r3, 8004d64 <spi_stm32_transceive+0x3c>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8004d5e:	6873      	ldr	r3, [r6, #4]
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d008      	beq.n	8004d76 <spi_stm32_transceive+0x4e>
	return z_impl_k_sem_take(sem, timeout);
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d68:	f106 0010 	add.w	r0, r6, #16
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d70:	f008 fd30 	bl	800d7d4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8004d74:	6074      	str	r4, [r6, #4]
	ret = spi_stm32_configure(dev, config);
 8004d76:	4622      	mov	r2, r4
 8004d78:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004d7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004d80:	f7ff fec2 	bl	8004b08 <spi_stm32_configure.isra.0>
	if (ret) {
 8004d84:	4604      	mov	r4, r0
 8004d86:	b148      	cbz	r0, 8004d9c <spi_stm32_transceive+0x74>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8004d88:	6833      	ldr	r3, [r6, #0]
 8004d8a:	889b      	ldrh	r3, [r3, #4]
 8004d8c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004d90:	f000 80ad 	beq.w	8004eee <spi_stm32_transceive+0x1c6>
		return transceive_dma(dev, config, tx_bufs, rx_bufs,
				      false, NULL);
	}
#endif /* CONFIG_SPI_STM32_DMA */
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
}
 8004d94:	4620      	mov	r0, r4
 8004d96:	b005      	add	sp, #20
 8004d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8004d9c:	f1b9 0f00 	cmp.w	r9, #0
 8004da0:	f000 8398 	beq.w	80054d4 <spi_stm32_transceive+0x7ac>
 8004da4:	f8d9 2000 	ldr.w	r2, [r9]
 8004da8:	6472      	str	r2, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	f000 8422 	beq.w	80055f4 <spi_stm32_transceive+0x8cc>
 8004db0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004db4:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004db6:	b933      	cbnz	r3, 8004dc6 <spi_stm32_transceive+0x9e>
 8004db8:	e38e      	b.n	80054d8 <spi_stm32_transceive+0x7b0>
		++(*current);
 8004dba:	3208      	adds	r2, #8
		--(*count);
 8004dbc:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8389 	beq.w	80054d8 <spi_stm32_transceive+0x7b0>
		if (((*current)->len / dfs) != 0) {
 8004dc6:	6851      	ldr	r1, [r2, #4]
		--(*count);
 8004dc8:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d0f5      	beq.n	8004dba <spi_stm32_transceive+0x92>
			return (*current)->buf;
 8004dce:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8004dd0:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8004dd2:	6573      	str	r3, [r6, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	f000 8378 	beq.w	80054ca <spi_stm32_transceive+0x7a2>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	64f3      	str	r3, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8406 	beq.w	80055f0 <spi_stm32_transceive+0x8c8>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6532      	str	r2, [r6, #80]	; 0x50
	while (*count) {
 8004de8:	b932      	cbnz	r2, 8004df8 <spi_stm32_transceive+0xd0>
 8004dea:	e370      	b.n	80054ce <spi_stm32_transceive+0x7a6>
		++(*current);
 8004dec:	3308      	adds	r3, #8
		--(*count);
 8004dee:	e9c6 3213 	strd	r3, r2, [r6, #76]	; 0x4c
	while (*count) {
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	f000 836b 	beq.w	80054ce <spi_stm32_transceive+0x7a6>
		if (((*current)->len / dfs) != 0) {
 8004df8:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8004dfa:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d0f5      	beq.n	8004dec <spi_stm32_transceive+0xc4>
			return (*current)->buf;
 8004e00:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8004e02:	6631      	str	r1, [r6, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8004e04:	65f3      	str	r3, [r6, #92]	; 0x5c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	6433      	str	r3, [r6, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004e0a:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8004e0c:	07da      	lsls	r2, r3, #31
 8004e0e:	d503      	bpl.n	8004e18 <spi_stm32_transceive+0xf0>
  return (uint8_t)(READ_REG(SPIx->DR));
 8004e10:	68eb      	ldr	r3, [r5, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004e12:	68ab      	ldr	r3, [r5, #8]
 8004e14:	07db      	lsls	r3, r3, #31
 8004e16:	d4fb      	bmi.n	8004e10 <spi_stm32_transceive+0xe8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004e18:	682b      	ldr	r3, [r5, #0]
	struct spi_stm32_data *data = dev->data;
 8004e1a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e22:	602b      	str	r3, [r5, #0]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	b19b      	cbz	r3, 8004e50 <spi_stm32_transceive+0x128>
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	b18b      	cbz	r3, 8004e50 <spi_stm32_transceive+0x128>
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	b178      	cbz	r0, 8004e50 <spi_stm32_transceive+0x128>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004e30:	791a      	ldrb	r2, [r3, #4]
 8004e32:	6903      	ldr	r3, [r0, #16]
 8004e34:	2101      	movs	r1, #1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4091      	lsls	r1, r2
 8004e3a:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004e3c:	6883      	ldr	r3, [r0, #8]
 8004e3e:	bf14      	ite	ne
 8004e40:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004e42:	68db      	ldreq	r3, [r3, #12]
 8004e44:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004e4c:	f009 fe38 	bl	800eac0 <z_impl_k_busy_wait>
	*buf_len = 0;
 8004e50:	2100      	movs	r1, #0
	uint16_t operation = data->ctx.config->operation;
 8004e52:	6830      	ldr	r0, [r6, #0]
 8004e54:	8883      	ldrh	r3, [r0, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8004e56:	07df      	lsls	r7, r3, #31
 8004e58:	f140 81ce 	bpl.w	80051f8 <spi_stm32_transceive+0x4d0>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004e5c:	68aa      	ldr	r2, [r5, #8]
 8004e5e:	0790      	lsls	r0, r2, #30
 8004e60:	f140 8244 	bpl.w	80052ec <spi_stm32_transceive+0x5c4>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8004e64:	6db2      	ldr	r2, [r6, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	f000 8240 	beq.w	80052ec <spi_stm32_transceive+0x5c4>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004e6c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004e70:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004e72:	6d70      	ldr	r0, [r6, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004e74:	f000 8333 	beq.w	80054de <spi_stm32_transceive+0x7b6>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8004e78:	8803      	ldrh	r3, [r0, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8004e7a:	81ab      	strh	r3, [r5, #12]
	ctx->tx_len -= len;
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	65b2      	str	r2, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	f000 8362 	beq.w	800554a <spi_stm32_transceive+0x822>
		ctx->tx_buf += dfs * len;
 8004e86:	3002      	adds	r0, #2
 8004e88:	6570      	str	r0, [r6, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004e8a:	68ab      	ldr	r3, [r5, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8004e8c:	07da      	lsls	r2, r3, #31
 8004e8e:	d517      	bpl.n	8004ec0 <spi_stm32_transceive+0x198>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8004e90:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004e92:	b1ab      	cbz	r3, 8004ec0 <spi_stm32_transceive+0x198>
 8004e94:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8004e96:	b19a      	cbz	r2, 8004ec0 <spi_stm32_transceive+0x198>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004e98:	6832      	ldr	r2, [r6, #0]
 8004e9a:	8892      	ldrh	r2, [r2, #4]
 8004e9c:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004ea0:	2a08      	cmp	r2, #8
 8004ea2:	f000 832c 	beq.w	80054fe <spi_stm32_transceive+0x7d6>
  return (uint16_t)(READ_REG(SPIx->DR));
 8004ea6:	68ea      	ldr	r2, [r5, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8004ea8:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004eaa:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004eac:	b143      	cbz	r3, 8004ec0 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 837c 	beq.w	80055b0 <spi_stm32_transceive+0x888>
	} else if (ctx->rx_buf) {
 8004eb8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004eba:	b10b      	cbz	r3, 8004ec0 <spi_stm32_transceive+0x198>
		ctx->rx_buf += dfs * len;
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	65f3      	str	r3, [r6, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8004ec0:	68ab      	ldr	r3, [r5, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8004ec2:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8004ec6:	f040 8387 	bne.w	80055d8 <spi_stm32_transceive+0x8b0>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8004eca:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1c0      	bne.n	8004e52 <spi_stm32_transceive+0x12a>
 8004ed0:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1bd      	bne.n	8004e52 <spi_stm32_transceive+0x12a>
	spi_stm32_complete(dev, ret);
 8004ed6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004eda:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004ede:	f7ff fee1 	bl	8004ca4 <spi_stm32_complete.constprop.0.isra.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8004ee2:	6833      	ldr	r3, [r6, #0]
 8004ee4:	889b      	ldrh	r3, [r3, #4]
 8004ee6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004eea:	f47f af53 	bne.w	8004d94 <spi_stm32_transceive+0x6c>
		ctx->owner = NULL;
 8004eee:	6073      	str	r3, [r6, #4]
	z_impl_k_sem_give(sem);
 8004ef0:	f106 0010 	add.w	r0, r6, #16
 8004ef4:	f008 fc44 	bl	800d780 <z_impl_k_sem_give>
}
 8004ef8:	4620      	mov	r0, r4
 8004efa:	b005      	add	sp, #20
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	f000 831d 	beq.w	8005540 <spi_stm32_transceive+0x818>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8004f06:	88a3      	ldrh	r3, [r4, #4]
 8004f08:	049a      	lsls	r2, r3, #18
 8004f0a:	d504      	bpl.n	8004f16 <spi_stm32_transceive+0x1ee>
 8004f0c:	69b3      	ldr	r3, [r6, #24]
 8004f0e:	b913      	cbnz	r3, 8004f16 <spi_stm32_transceive+0x1ee>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8004f10:	6873      	ldr	r3, [r6, #4]
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d008      	beq.n	8004f28 <spi_stm32_transceive+0x200>
	return z_impl_k_sem_take(sem, timeout);
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f1a:	f106 0010 	add.w	r0, r6, #16
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f22:	f008 fc57 	bl	800d7d4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8004f26:	6074      	str	r4, [r6, #4]
	z_impl_k_sem_reset(sem);
 8004f28:	f106 0064 	add.w	r0, r6, #100	; 0x64
 8004f2c:	f008 fc7e 	bl	800d82c <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 8004f30:	4622      	mov	r2, r4
 8004f32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004f36:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004f3a:	f7ff fde5 	bl	8004b08 <spi_stm32_configure.isra.0>
	if (ret) {
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f47f af21 	bne.w	8004d88 <spi_stm32_transceive+0x60>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8004f46:	f1b9 0f00 	cmp.w	r9, #0
 8004f4a:	f000 8318 	beq.w	800557e <spi_stm32_transceive+0x856>
 8004f4e:	f8d9 3000 	ldr.w	r3, [r9]
 8004f52:	6473      	str	r3, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8354 	beq.w	8005602 <spi_stm32_transceive+0x8da>
 8004f5a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004f5e:	64b2      	str	r2, [r6, #72]	; 0x48
	while (*count) {
 8004f60:	b932      	cbnz	r2, 8004f70 <spi_stm32_transceive+0x248>
 8004f62:	e30e      	b.n	8005582 <spi_stm32_transceive+0x85a>
		++(*current);
 8004f64:	3308      	adds	r3, #8
		--(*count);
 8004f66:	e9c6 3211 	strd	r3, r2, [r6, #68]	; 0x44
	while (*count) {
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	f000 8309 	beq.w	8005582 <spi_stm32_transceive+0x85a>
		if (((*current)->len / dfs) != 0) {
 8004f70:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8004f72:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d0f5      	beq.n	8004f64 <spi_stm32_transceive+0x23c>
			return (*current)->buf;
 8004f78:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8004f7a:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8004f7c:	6573      	str	r3, [r6, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004f7e:	2f00      	cmp	r7, #0
 8004f80:	f000 82f8 	beq.w	8005574 <spi_stm32_transceive+0x84c>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	64f3      	str	r3, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8338 	beq.w	80055fe <spi_stm32_transceive+0x8d6>
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6532      	str	r2, [r6, #80]	; 0x50
	while (*count) {
 8004f92:	b932      	cbnz	r2, 8004fa2 <spi_stm32_transceive+0x27a>
 8004f94:	e2f0      	b.n	8005578 <spi_stm32_transceive+0x850>
		++(*current);
 8004f96:	3308      	adds	r3, #8
		--(*count);
 8004f98:	e9c6 3213 	strd	r3, r2, [r6, #76]	; 0x4c
	while (*count) {
 8004f9c:	2a00      	cmp	r2, #0
 8004f9e:	f000 82eb 	beq.w	8005578 <spi_stm32_transceive+0x850>
		if (((*current)->len / dfs) != 0) {
 8004fa2:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8004fa4:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	d0f5      	beq.n	8004f96 <spi_stm32_transceive+0x26e>
			return (*current)->buf;
 8004faa:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8004fac:	6631      	str	r1, [r6, #96]	; 0x60
	struct spi_stm32_data *data = dev->data;
 8004fae:	f8d8 a010 	ldr.w	sl, [r8, #16]
	ctx->rx_buf = (uint8_t *)
 8004fb2:	65f3      	str	r3, [r6, #92]	; 0x5c
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004fb4:	f8da 3000 	ldr.w	r3, [sl]
	ctx->sync_status = 0;
 8004fb8:	2200      	movs	r2, #0
 8004fba:	6432      	str	r2, [r6, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004fbc:	b1b3      	cbz	r3, 8004fec <spi_stm32_transceive+0x2c4>
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	b1a3      	cbz	r3, 8004fec <spi_stm32_transceive+0x2c4>
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	b190      	cbz	r0, 8004fec <spi_stm32_transceive+0x2c4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004fc6:	791a      	ldrb	r2, [r3, #4]
 8004fc8:	6903      	ldr	r3, [r0, #16]
 8004fca:	2101      	movs	r1, #1
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4091      	lsls	r1, r2
 8004fd0:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004fd2:	6883      	ldr	r3, [r0, #8]
 8004fd4:	bf14      	ite	ne
 8004fd6:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004fd8:	68db      	ldreq	r3, [r3, #12]
 8004fda:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8004fdc:	f8da 3000 	ldr.w	r3, [sl]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004fe4:	f009 fd6c 	bl	800eac0 <z_impl_k_busy_wait>
	struct spi_stm32_data *data = dev->data;
 8004fe8:	f8d8 a010 	ldr.w	sl, [r8, #16]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004fec:	682b      	ldr	r3, [r5, #0]
		} else if (data->ctx.tx_len == 0) {
 8004fee:	6db4      	ldr	r4, [r6, #88]	; 0x58
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8004ff0:	f8d6 9060 	ldr.w	r9, [r6, #96]	; 0x60
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	464c      	mov	r4, r9
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	f000 816e 	beq.w	80052e0 <spi_stm32_transceive+0x5b8>
		} else if (data->ctx.tx_len == 0) {
 8005004:	b112      	cbz	r2, 800500c <spi_stm32_transceive+0x2e4>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 8005006:	4294      	cmp	r4, r2
 8005008:	bf28      	it	cs
 800500a:	4614      	movcs	r4, r2
		data->status_flags = 0;
 800500c:	2100      	movs	r1, #0
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 800500e:	f8da b05c 	ldr.w	fp, [sl, #92]	; 0x5c
 8005012:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->status_flags = 0;
 8005016:	67f1      	str	r1, [r6, #124]	; 0x7c
	blk_cfg = &stream->dma_blk_cfg;
 8005018:	f10a 09a4 	add.w	r9, sl, #164	; 0xa4

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800501c:	2220      	movs	r2, #32
 800501e:	4648      	mov	r0, r9
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 8005020:	f8ba 708e 	ldrh.w	r7, [sl, #142]	; 0x8e
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	fbb4 f7f7 	udiv	r7, r4, r7
 800502a:	f00b ff6d 	bl	8010f08 <memset>
	if (buf == NULL) {
 800502e:	9b01      	ldr	r3, [sp, #4]
	blk_cfg->block_size = len;
 8005030:	f8ca 70b8 	str.w	r7, [sl, #184]	; 0xb8
	if (buf == NULL) {
 8005034:	2100      	movs	r1, #0
 8005036:	f1bb 0f00 	cmp.w	fp, #0
 800503a:	f000 81ab 	beq.w	8005394 <spi_stm32_transceive+0x66c>
		if (data->dma_rx.dst_addr_increment) {
 800503e:	f89a 20c6 	ldrb.w	r2, [sl, #198]	; 0xc6
		blk_cfg->dest_address = (uint32_t)buf;
 8005042:	f8ca b0a8 	str.w	fp, [sl, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 8005046:	2a00      	cmp	r2, #0
 8005048:	f000 8163 	beq.w	8005312 <spi_stm32_transceive+0x5ea>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 800504c:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8005050:	f361 1205 	bfi	r2, r1, #4, #2
 8005054:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
  return (uint32_t) &(SPIx->DR);
 8005058:	689b      	ldr	r3, [r3, #8]
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 800505a:	f8da 20c8 	ldr.w	r2, [sl, #200]	; 0xc8
	stream->dma_cfg.head_block = blk_cfg;
 800505e:	f8ca 9098 	str.w	r9, [sl, #152]	; 0x98
 8005062:	330c      	adds	r3, #12
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 8005064:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 8005068:	f89a 30c5 	ldrb.w	r3, [sl, #197]	; 0xc5
	stream->dma_cfg.user_data = data;
 800506c:	f8ca a09c 	str.w	sl, [sl, #156]	; 0x9c
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2300      	movne	r3, #0
 8005076:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 8005078:	f002 020f 	and.w	r2, r2, #15
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005082:	f8ba 20c0 	ldrh.w	r2, [sl, #192]	; 0xc0
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 8005086:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
 800508a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800508e:	f022 020c 	bic.w	r2, r2, #12
 8005092:	4313      	orrs	r3, r2
 8005094:	f8aa 30c0 	strh.w	r3, [sl, #192]	; 0xc0
 8005098:	6883      	ldr	r3, [r0, #8]
 800509a:	f10a 0288 	add.w	r2, sl, #136	; 0x88
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4798      	blx	r3
	if (ret != 0) {
 80050a2:	4601      	mov	r1, r0
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f040 8126 	bne.w	80052f6 <spi_stm32_transceive+0x5ce>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 80050aa:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 80050ae:	6883      	ldr	r3, [r0, #8]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4798      	blx	r3
	if (ret != 0) {
 80050b4:	4601      	mov	r1, r0
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f040 811d 	bne.w	80052f6 <spi_stm32_transceive+0x5ce>
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 80050bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80050c0:	9001      	str	r0, [sp, #4]
	blk_cfg = &stream->dma_blk_cfg;
 80050c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050c6:	4618      	mov	r0, r3
 80050c8:	2220      	movs	r2, #32
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 80050ca:	f8ba 90d8 	ldrh.w	r9, [sl, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 80050ce:	f8da b054 	ldr.w	fp, [sl, #84]	; 0x54
 80050d2:	f8d8 a004 	ldr.w	sl, [r8, #4]
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 80050d6:	fbb4 f9f9 	udiv	r9, r4, r9
 80050da:	f00b ff15 	bl	8010f08 <memset>
	if (buf == NULL) {
 80050de:	9901      	ldr	r1, [sp, #4]
	blk_cfg->block_size = len;
 80050e0:	f8c7 9104 	str.w	r9, [r7, #260]	; 0x104
 80050e4:	4603      	mov	r3, r0
	if (buf == NULL) {
 80050e6:	f1bb 0f00 	cmp.w	fp, #0
 80050ea:	f000 816f 	beq.w	80053cc <spi_stm32_transceive+0x6a4>
		if (data->dma_tx.src_addr_increment) {
 80050ee:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
		blk_cfg->source_address = (uint32_t)buf;
 80050f2:	f8c7 b0f0 	str.w	fp, [r7, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	f000 8159 	beq.w	80053ae <spi_stm32_transceive+0x686>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80050fc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8005100:	f361 0283 	bfi	r2, r1, #2, #2
 8005104:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8005108:	f8da 2008 	ldr.w	r2, [sl, #8]
	stream->dma_cfg.head_block = blk_cfg;
 800510c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (data->dma_tx.dst_addr_increment) {
 8005110:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 8005114:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
	stream->dma_cfg.user_data = data;
 8005118:	f8c7 70e8 	str.w	r7, [r7, #232]	; 0xe8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800511c:	2b00      	cmp	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	f102 020c 	add.w	r2, r2, #12
 8005126:	f003 010f 	and.w	r1, r3, #15
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 800512a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800512e:	bf18      	it	ne
 8005130:	2300      	movne	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 8005132:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8005136:	bf08      	it	eq
 8005138:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	f422 6273 	bic.w	r2, r2, #3888	; 0xf30
 8005140:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005144:	4313      	orrs	r3, r2
 8005146:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	return api->config(dev, channel, config);
 800514a:	6883      	ldr	r3, [r0, #8]
 800514c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8005156:	4798      	blx	r3
	if (ret != 0) {
 8005158:	4601      	mov	r1, r0
 800515a:	2800      	cmp	r0, #0
 800515c:	f040 80cb 	bne.w	80052f6 <spi_stm32_transceive+0x5ce>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 8005160:	e9d7 0133 	ldrd	r0, r1, [r7, #204]	; 0xcc
	return api->start(dev, channel);
 8005164:	6883      	ldr	r3, [r0, #8]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4798      	blx	r3
		if (ret != 0) {
 800516a:	4601      	mov	r1, r0
 800516c:	2800      	cmp	r0, #0
 800516e:	f040 80c2 	bne.w	80052f6 <spi_stm32_transceive+0x5ce>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8005172:	686b      	ldr	r3, [r5, #4]
 8005174:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800517e:	686b      	ldr	r3, [r5, #4]
 8005180:	f043 0302 	orr.w	r3, r3, #2
 8005184:	606b      	str	r3, [r5, #4]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 8005186:	f107 0964 	add.w	r9, r7, #100	; 0x64
 800518a:	e007      	b.n	800519c <spi_stm32_transceive+0x474>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 800518c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	f100 80f2 	bmi.w	8005378 <spi_stm32_transceive+0x650>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 8005194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005196:	f013 0f06 	tst.w	r3, #6
 800519a:	d16e      	bne.n	800527a <spi_stm32_transceive+0x552>
	return z_impl_k_sem_take(sem, timeout);
 800519c:	f242 7210 	movw	r2, #10000	; 0x2710
 80051a0:	2300      	movs	r3, #0
 80051a2:	4648      	mov	r0, r9
 80051a4:	f008 fb16 	bl	800d7d4 <z_impl_k_sem_take>
		if (res != 0) {
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d0ef      	beq.n	800518c <spi_stm32_transceive+0x464>
 80051ac:	f8d8 a010 	ldr.w	sl, [r8, #16]
 80051b0:	4604      	mov	r4, r0
	spi_stm32_complete(dev, ret);
 80051b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80051b6:	4651      	mov	r1, sl
 80051b8:	f7ff fd74 	bl	8004ca4 <spi_stm32_complete.constprop.0.isra.0>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80051bc:	682b      	ldr	r3, [r5, #0]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 80051be:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80051c2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 80051c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ca:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80051cc:	686b      	ldr	r3, [r5, #4]
 80051ce:	f023 0302 	bic.w	r3, r3, #2
 80051d2:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80051d4:	686b      	ldr	r3, [r5, #4]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	606b      	str	r3, [r5, #4]
static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 80051dc:	6883      	ldr	r3, [r0, #8]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 80051e2:	e9d6 0133 	ldrd	r0, r1, [r6, #204]	; 0xcc
 80051e6:	6883      	ldr	r3, [r0, #8]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 80051ec:	e5cc      	b.n	8004d88 <spi_stm32_transceive+0x60>
	if (!tx_bufs && !rx_bufs) {
 80051ee:	2f00      	cmp	r7, #0
 80051f0:	f47f adb0 	bne.w	8004d54 <spi_stm32_transceive+0x2c>
		return 0;
 80051f4:	463c      	mov	r4, r7
 80051f6:	e5cd      	b.n	8004d94 <spi_stm32_transceive+0x6c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80051f8:	68aa      	ldr	r2, [r5, #8]
 80051fa:	0792      	lsls	r2, r2, #30
 80051fc:	d5fc      	bpl.n	80051f8 <spi_stm32_transceive+0x4d0>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80051fe:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8005202:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8005204:	6d72      	ldr	r2, [r6, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005206:	f000 80a1 	beq.w	800534c <spi_stm32_transceive+0x624>
	return !!(ctx->tx_len);
 800520a:	6db3      	ldr	r3, [r6, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
 800520c:	2a00      	cmp	r2, #0
 800520e:	f000 80ea 	beq.w	80053e6 <spi_stm32_transceive+0x6be>
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 80b5 	bne.w	8005382 <spi_stm32_transceive+0x65a>
  *spidr = TxData;
 8005218:	81ab      	strh	r3, [r5, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800521a:	68ab      	ldr	r3, [r5, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 800521c:	07df      	lsls	r7, r3, #31
 800521e:	d5fc      	bpl.n	800521a <spi_stm32_transceive+0x4f2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005220:	8882      	ldrh	r2, [r0, #4]
	return !!(ctx->rx_buf && ctx->rx_len);
 8005222:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8005224:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8005226:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800522a:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 800522c:	68ea      	ldr	r2, [r5, #12]
 800522e:	d078      	beq.n	8005322 <spi_stm32_transceive+0x5fa>
 8005230:	b120      	cbz	r0, 800523c <spi_stm32_transceive+0x514>
 8005232:	2b00      	cmp	r3, #0
 8005234:	f43f ae44 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8005238:	8002      	strh	r2, [r0, #0]
 800523a:	6e33      	ldr	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 800523c:	2b00      	cmp	r3, #0
 800523e:	f43f ae3f 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8005242:	3b01      	subs	r3, #1
 8005244:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8005246:	2b00      	cmp	r3, #0
 8005248:	f47f ae36 	bne.w	8004eb8 <spi_stm32_transceive+0x190>
		++ctx->current_rx;
 800524c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 800524e:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8005250:	3208      	adds	r2, #8
		--ctx->rx_count;
 8005252:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8005254:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8005256:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8005258:	b933      	cbnz	r3, 8005268 <spi_stm32_transceive+0x540>
 800525a:	e120      	b.n	800549e <spi_stm32_transceive+0x776>
		++(*current);
 800525c:	3208      	adds	r2, #8
		--(*count);
 800525e:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 811b 	beq.w	800549e <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8005268:	6850      	ldr	r0, [r2, #4]
 800526a:	2801      	cmp	r0, #1
		--(*count);
 800526c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8005270:	d9f4      	bls.n	800525c <spi_stm32_transceive+0x534>
			*buf_len = (*current)->len / dfs;
 8005272:	0840      	lsrs	r0, r0, #1
			return (*current)->buf;
 8005274:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8005276:	6630      	str	r0, [r6, #96]	; 0x60
			return (*current)->buf;
 8005278:	e621      	b.n	8004ebe <spi_stm32_transceive+0x196>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 800527a:	68ab      	ldr	r3, [r5, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 800527c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8005280:	d1fb      	bne.n	800527a <spi_stm32_transceive+0x552>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8005282:	68ab      	ldr	r3, [r5, #8]
 8005284:	079f      	lsls	r7, r3, #30
 8005286:	d5fc      	bpl.n	8005282 <spi_stm32_transceive+0x55a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8005288:	68ab      	ldr	r3, [r5, #8]
 800528a:	0618      	lsls	r0, r3, #24
 800528c:	d4f9      	bmi.n	8005282 <spi_stm32_transceive+0x55a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800528e:	686b      	ldr	r3, [r5, #4]
	if (!ctx->tx_len) {
 8005290:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005292:	f023 0302 	bic.w	r3, r3, #2
 8005296:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8005298:	686b      	ldr	r3, [r5, #4]
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	606b      	str	r3, [r5, #4]
 80052a0:	b152      	cbz	r2, 80052b8 <spi_stm32_transceive+0x590>
	if (len > ctx->tx_len) {
 80052a2:	4294      	cmp	r4, r2
 80052a4:	d808      	bhi.n	80052b8 <spi_stm32_transceive+0x590>
	ctx->tx_len -= len;
 80052a6:	1b12      	subs	r2, r2, r4
 80052a8:	65b2      	str	r2, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	f000 80d1 	beq.w	8005452 <spi_stm32_transceive+0x72a>
	} else if (ctx->tx_buf) {
 80052b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80052b2:	b10b      	cbz	r3, 80052b8 <spi_stm32_transceive+0x590>
		ctx->tx_buf += dfs * len;
 80052b4:	4423      	add	r3, r4
 80052b6:	6573      	str	r3, [r6, #84]	; 0x54
	if (!ctx->rx_len) {
 80052b8:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80052ba:	b31b      	cbz	r3, 8005304 <spi_stm32_transceive+0x5dc>
	if (len > ctx->rx_len) {
 80052bc:	429c      	cmp	r4, r3
 80052be:	d874      	bhi.n	80053aa <spi_stm32_transceive+0x682>
	ctx->rx_len -= len;
 80052c0:	1b1b      	subs	r3, r3, r4
 80052c2:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80ae 	beq.w	8005426 <spi_stm32_transceive+0x6fe>
	} else if (ctx->rx_buf) {
 80052ca:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 80052cc:	2900      	cmp	r1, #0
 80052ce:	d06c      	beq.n	80053aa <spi_stm32_transceive+0x682>
		ctx->rx_buf += dfs * len;
 80052d0:	4421      	add	r1, r4
 80052d2:	65f1      	str	r1, [r6, #92]	; 0x5c
 80052d4:	461c      	mov	r4, r3
	struct spi_stm32_data *data = dev->data;
 80052d6:	f8d8 a010 	ldr.w	sl, [r8, #16]
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 80052da:	2c00      	cmp	r4, #0
 80052dc:	f47f ae92 	bne.w	8005004 <spi_stm32_transceive+0x2dc>
 80052e0:	4614      	mov	r4, r2
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	f47f ae92 	bne.w	800500c <spi_stm32_transceive+0x2e4>
 80052e8:	4614      	mov	r4, r2
 80052ea:	e762      	b.n	80051b2 <spi_stm32_transceive+0x48a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80052ec:	686b      	ldr	r3, [r5, #4]
 80052ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f2:	606b      	str	r3, [r5, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 80052f4:	e5c9      	b.n	8004e8a <spi_stm32_transceive+0x162>
 80052f6:	f8d8 a010 	ldr.w	sl, [r8, #16]
 80052fa:	460c      	mov	r4, r1
 80052fc:	e759      	b.n	80051b2 <spi_stm32_transceive+0x48a>
	*buf_len = 0;
 80052fe:	2300      	movs	r3, #0
		ctx->rx_buf = (uint8_t *)
 8005300:	e9c6 3317 	strd	r3, r3, [r6, #92]	; 0x5c
	struct spi_stm32_data *data = dev->data;
 8005304:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8005308:	4614      	mov	r4, r2
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 800530a:	2a00      	cmp	r2, #0
 800530c:	f47f ae7e 	bne.w	800500c <spi_stm32_transceive+0x2e4>
 8005310:	e7ea      	b.n	80052e8 <spi_stm32_transceive+0x5c0>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8005312:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8005316:	2102      	movs	r1, #2
 8005318:	f361 1205 	bfi	r2, r1, #4, #2
 800531c:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 8005320:	e69a      	b.n	8005058 <spi_stm32_transceive+0x330>
	return !!(ctx->rx_buf && ctx->rx_len);
 8005322:	b120      	cbz	r0, 800532e <spi_stm32_transceive+0x606>
 8005324:	2b00      	cmp	r3, #0
 8005326:	f43f adcb 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
  return (uint8_t)(READ_REG(SPIx->DR));
 800532a:	7002      	strb	r2, [r0, #0]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800532c:	6e33      	ldr	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 800532e:	2b00      	cmp	r3, #0
 8005330:	f43f adc6 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8005334:	3b01      	subs	r3, #1
 8005336:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 809f 	beq.w	800547c <spi_stm32_transceive+0x754>
	} else if (ctx->rx_buf) {
 800533e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005340:	2b00      	cmp	r3, #0
 8005342:	f43f adbd 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
		ctx->rx_buf += dfs * len;
 8005346:	3301      	adds	r3, #1
 8005348:	65f3      	str	r3, [r6, #92]	; 0x5c
 800534a:	e5b9      	b.n	8004ec0 <spi_stm32_transceive+0x198>
	return !!(ctx->tx_buf && ctx->tx_len);
 800534c:	b11a      	cbz	r2, 8005356 <spi_stm32_transceive+0x62e>
 800534e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8005350:	2b00      	cmp	r3, #0
 8005352:	d134      	bne.n	80053be <spi_stm32_transceive+0x696>
 8005354:	461a      	mov	r2, r3
  *spidr = TxData;
 8005356:	732a      	strb	r2, [r5, #12]
	if (!ctx->tx_len) {
 8005358:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800535a:	2b00      	cmp	r3, #0
 800535c:	d034      	beq.n	80053c8 <spi_stm32_transceive+0x6a0>
	ctx->tx_len -= len;
 800535e:	3b01      	subs	r3, #1
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8005360:	6830      	ldr	r0, [r6, #0]
 8005362:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 809d 	beq.w	80054a4 <spi_stm32_transceive+0x77c>
	} else if (ctx->tx_buf) {
 800536a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800536c:	2b00      	cmp	r3, #0
 800536e:	f43f af54 	beq.w	800521a <spi_stm32_transceive+0x4f2>
		ctx->tx_buf += dfs * len;
 8005372:	3301      	adds	r3, #1
 8005374:	6573      	str	r3, [r6, #84]	; 0x54
 8005376:	e750      	b.n	800521a <spi_stm32_transceive+0x4f2>
 8005378:	f8d8 a010 	ldr.w	sl, [r8, #16]
			return -EIO;
 800537c:	f06f 0404 	mvn.w	r4, #4
 8005380:	e717      	b.n	80051b2 <spi_stm32_transceive+0x48a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8005382:	8817      	ldrh	r7, [r2, #0]
  *spidr = TxData;
 8005384:	81af      	strh	r7, [r5, #12]
	ctx->tx_len -= len;
 8005386:	3b01      	subs	r3, #1
 8005388:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 800538a:	2b00      	cmp	r3, #0
 800538c:	d034      	beq.n	80053f8 <spi_stm32_transceive+0x6d0>
		ctx->tx_buf += dfs * len;
 800538e:	3202      	adds	r2, #2
 8005390:	6572      	str	r2, [r6, #84]	; 0x54
 8005392:	e742      	b.n	800521a <spi_stm32_transceive+0x4f2>
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 8005394:	4a9c      	ldr	r2, [pc, #624]	; (8005608 <spi_stm32_transceive+0x8e0>)
 8005396:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 800539a:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 800539e:	2102      	movs	r1, #2
 80053a0:	f361 1205 	bfi	r2, r1, #4, #2
 80053a4:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 80053a8:	e656      	b.n	8005058 <spi_stm32_transceive+0x330>
 80053aa:	461c      	mov	r4, r3
 80053ac:	e793      	b.n	80052d6 <spi_stm32_transceive+0x5ae>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80053ae:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80053b2:	2102      	movs	r1, #2
 80053b4:	f361 0283 	bfi	r2, r1, #2, #2
 80053b8:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 80053bc:	e6a4      	b.n	8005108 <spi_stm32_transceive+0x3e0>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80053be:	7812      	ldrb	r2, [r2, #0]
  *spidr = TxData;
 80053c0:	732a      	strb	r2, [r5, #12]
	if (!ctx->tx_len) {
 80053c2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ca      	bne.n	800535e <spi_stm32_transceive+0x636>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80053c8:	6830      	ldr	r0, [r6, #0]
 80053ca:	e726      	b.n	800521a <spi_stm32_transceive+0x4f2>
		dummy_rx_tx_buffer = 0;
 80053cc:	4a8e      	ldr	r2, [pc, #568]	; (8005608 <spi_stm32_transceive+0x8e0>)
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 80053ce:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
		dummy_rx_tx_buffer = 0;
 80053d2:	f8c2 b000 	str.w	fp, [r2]
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80053d6:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80053da:	2102      	movs	r1, #2
 80053dc:	f361 0283 	bfi	r2, r1, #2, #2
 80053e0:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 80053e4:	e690      	b.n	8005108 <spi_stm32_transceive+0x3e0>
  *spidr = TxData;
 80053e6:	81aa      	strh	r2, [r5, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f43f af16 	beq.w	800521a <spi_stm32_transceive+0x4f2>
	ctx->tx_len -= len;
 80053ee:	3b01      	subs	r3, #1
 80053f0:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f af11 	bne.w	800521a <spi_stm32_transceive+0x4f2>
		++ctx->current_tx;
 80053f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 80053fa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 80053fc:	3208      	adds	r2, #8
		--ctx->tx_count;
 80053fe:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8005400:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8005402:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8005404:	b92b      	cbnz	r3, 8005412 <spi_stm32_transceive+0x6ea>
 8005406:	e05d      	b.n	80054c4 <spi_stm32_transceive+0x79c>
		++(*current);
 8005408:	3208      	adds	r2, #8
		--(*count);
 800540a:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 800540e:	2b00      	cmp	r3, #0
 8005410:	d058      	beq.n	80054c4 <spi_stm32_transceive+0x79c>
		if (((*current)->len / dfs) != 0) {
 8005412:	6857      	ldr	r7, [r2, #4]
 8005414:	2f01      	cmp	r7, #1
		--(*count);
 8005416:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 800541a:	d9f5      	bls.n	8005408 <spi_stm32_transceive+0x6e0>
			*buf_len = (*current)->len / dfs;
 800541c:	087f      	lsrs	r7, r7, #1
			return (*current)->buf;
 800541e:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8005420:	65b7      	str	r7, [r6, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8005422:	6573      	str	r3, [r6, #84]	; 0x54
 8005424:	e6f9      	b.n	800521a <spi_stm32_transceive+0x4f2>
		++ctx->current_rx;
 8005426:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8005428:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 800542a:	3108      	adds	r1, #8
		--ctx->rx_count;
 800542c:	3b01      	subs	r3, #1
		++ctx->current_rx;
 800542e:	64f1      	str	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8005430:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8005432:	b933      	cbnz	r3, 8005442 <spi_stm32_transceive+0x71a>
 8005434:	e763      	b.n	80052fe <spi_stm32_transceive+0x5d6>
		++(*current);
 8005436:	3108      	adds	r1, #8
		--(*count);
 8005438:	e9c6 1313 	strd	r1, r3, [r6, #76]	; 0x4c
	while (*count) {
 800543c:	2b00      	cmp	r3, #0
 800543e:	f43f af5e 	beq.w	80052fe <spi_stm32_transceive+0x5d6>
		if (((*current)->len / dfs) != 0) {
 8005442:	684c      	ldr	r4, [r1, #4]
		--(*count);
 8005444:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8005446:	2c00      	cmp	r4, #0
 8005448:	d0f5      	beq.n	8005436 <spi_stm32_transceive+0x70e>
		ctx->rx_buf = (uint8_t *)
 800544a:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 800544c:	e9c6 3417 	strd	r3, r4, [r6, #92]	; 0x5c
			return (*current)->buf;
 8005450:	e741      	b.n	80052d6 <spi_stm32_transceive+0x5ae>
		++ctx->current_tx;
 8005452:	6c71      	ldr	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 8005454:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8005456:	3108      	adds	r1, #8
		--ctx->tx_count;
 8005458:	3b01      	subs	r3, #1
		++ctx->current_tx;
 800545a:	6471      	str	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 800545c:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 800545e:	b92b      	cbnz	r3, 800546c <spi_stm32_transceive+0x744>
 8005460:	e06b      	b.n	800553a <spi_stm32_transceive+0x812>
		++(*current);
 8005462:	3108      	adds	r1, #8
		--(*count);
 8005464:	e9c6 1311 	strd	r1, r3, [r6, #68]	; 0x44
	while (*count) {
 8005468:	2b00      	cmp	r3, #0
 800546a:	d066      	beq.n	800553a <spi_stm32_transceive+0x812>
		if (((*current)->len / dfs) != 0) {
 800546c:	6848      	ldr	r0, [r1, #4]
		--(*count);
 800546e:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8005470:	2800      	cmp	r0, #0
 8005472:	d0f6      	beq.n	8005462 <spi_stm32_transceive+0x73a>
			return (*current)->buf;
 8005474:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 8005476:	65b0      	str	r0, [r6, #88]	; 0x58
		if (((*current)->len / dfs) != 0) {
 8005478:	4602      	mov	r2, r0
			return (*current)->buf;
 800547a:	e71c      	b.n	80052b6 <spi_stm32_transceive+0x58e>
		++ctx->current_rx;
 800547c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 800547e:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8005480:	3208      	adds	r2, #8
		--ctx->rx_count;
 8005482:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8005484:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8005486:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8005488:	b14b      	cbz	r3, 800549e <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 800548a:	6850      	ldr	r0, [r2, #4]
		--(*count);
 800548c:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 800548e:	2800      	cmp	r0, #0
 8005490:	f47f aef0 	bne.w	8005274 <spi_stm32_transceive+0x54c>
		++(*current);
 8005494:	3208      	adds	r2, #8
		--(*count);
 8005496:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f5      	bne.n	800548a <spi_stm32_transceive+0x762>
	*buf_len = 0;
 800549e:	6631      	str	r1, [r6, #96]	; 0x60
	return NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e50c      	b.n	8004ebe <spi_stm32_transceive+0x196>
		++ctx->current_tx;
 80054a4:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 80054a6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 80054a8:	3208      	adds	r2, #8
		--ctx->tx_count;
 80054aa:	3b01      	subs	r3, #1
		++ctx->current_tx;
 80054ac:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 80054ae:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 80054b0:	b143      	cbz	r3, 80054c4 <spi_stm32_transceive+0x79c>
		if (((*current)->len / dfs) != 0) {
 80054b2:	6857      	ldr	r7, [r2, #4]
		--(*count);
 80054b4:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	d1b1      	bne.n	800541e <spi_stm32_transceive+0x6f6>
		++(*current);
 80054ba:	3208      	adds	r2, #8
		--(*count);
 80054bc:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f6      	bne.n	80054b2 <spi_stm32_transceive+0x78a>
	*buf_len = 0;
 80054c4:	65b1      	str	r1, [r6, #88]	; 0x58
	return NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e7ab      	b.n	8005422 <spi_stm32_transceive+0x6fa>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80054ca:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 80054d2:	e497      	b.n	8004e04 <spi_stm32_transceive+0xdc>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80054d4:	e9c6 0011 	strd	r0, r0, [r6, #68]	; 0x44
	*buf_len = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 80054dc:	e479      	b.n	8004dd2 <spi_stm32_transceive+0xaa>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80054de:	7803      	ldrb	r3, [r0, #0]
  *spidr = TxData;
 80054e0:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 80054e2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f43f acd0 	beq.w	8004e8a <spi_stm32_transceive+0x162>
	ctx->tx_len -= len;
 80054ea:	3b01      	subs	r3, #1
 80054ec:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04a      	beq.n	8005588 <spi_stm32_transceive+0x860>
	} else if (ctx->tx_buf) {
 80054f2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f43f acc8 	beq.w	8004e8a <spi_stm32_transceive+0x162>
		ctx->tx_buf += dfs * len;
 80054fa:	3301      	adds	r3, #1
 80054fc:	e056      	b.n	80055ac <spi_stm32_transceive+0x884>
  return (uint8_t)(READ_REG(SPIx->DR));
 80054fe:	68ea      	ldr	r2, [r5, #12]
 8005500:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8005502:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8005504:	2b00      	cmp	r3, #0
 8005506:	f43f acdb 	beq.w	8004ec0 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 800550a:	3b01      	subs	r3, #1
 800550c:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 800550e:	2b00      	cmp	r3, #0
 8005510:	f47f af15 	bne.w	800533e <spi_stm32_transceive+0x616>
		++ctx->current_rx;
 8005514:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8005516:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8005518:	3208      	adds	r2, #8
		--ctx->rx_count;
 800551a:	3b01      	subs	r3, #1
		++ctx->current_rx;
 800551c:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 800551e:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0bc      	beq.n	800549e <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8005524:	6850      	ldr	r0, [r2, #4]
		--(*count);
 8005526:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8005528:	2800      	cmp	r0, #0
 800552a:	f47f aea3 	bne.w	8005274 <spi_stm32_transceive+0x54c>
		++(*current);
 800552e:	3208      	adds	r2, #8
		--(*count);
 8005530:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1f5      	bne.n	8005524 <spi_stm32_transceive+0x7fc>
 8005538:	e7b1      	b.n	800549e <spi_stm32_transceive+0x776>
	*buf_len = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 800553e:	e6ba      	b.n	80052b6 <spi_stm32_transceive+0x58e>
	if (!tx_bufs && !rx_bufs) {
 8005540:	2f00      	cmp	r7, #0
 8005542:	f47f ace0 	bne.w	8004f06 <spi_stm32_transceive+0x1de>
		return 0;
 8005546:	463c      	mov	r4, r7
 8005548:	e424      	b.n	8004d94 <spi_stm32_transceive+0x6c>
		++ctx->current_tx;
 800554a:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 800554c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 800554e:	3208      	adds	r2, #8
		--ctx->tx_count;
 8005550:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8005552:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8005554:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8005556:	b923      	cbnz	r3, 8005562 <spi_stm32_transceive+0x83a>
 8005558:	e026      	b.n	80055a8 <spi_stm32_transceive+0x880>
		++(*current);
 800555a:	3208      	adds	r2, #8
		--(*count);
 800555c:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8005560:	b313      	cbz	r3, 80055a8 <spi_stm32_transceive+0x880>
		if (((*current)->len / dfs) != 0) {
 8005562:	6850      	ldr	r0, [r2, #4]
 8005564:	2801      	cmp	r0, #1
		--(*count);
 8005566:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 800556a:	d9f6      	bls.n	800555a <spi_stm32_transceive+0x832>
			*buf_len = (*current)->len / dfs;
 800556c:	0840      	lsrs	r0, r0, #1
			return (*current)->buf;
 800556e:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8005570:	65b0      	str	r0, [r6, #88]	; 0x58
			return (*current)->buf;
 8005572:	e01b      	b.n	80055ac <spi_stm32_transceive+0x884>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8005574:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 800557c:	e517      	b.n	8004fae <spi_stm32_transceive+0x286>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800557e:	e9c6 9911 	strd	r9, r9, [r6, #68]	; 0x44
	*buf_len = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8005586:	e4f9      	b.n	8004f7c <spi_stm32_transceive+0x254>
		++ctx->current_tx;
 8005588:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 800558a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 800558c:	3208      	adds	r2, #8
		--ctx->tx_count;
 800558e:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8005590:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8005592:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8005594:	b143      	cbz	r3, 80055a8 <spi_stm32_transceive+0x880>
		if (((*current)->len / dfs) != 0) {
 8005596:	6850      	ldr	r0, [r2, #4]
		--(*count);
 8005598:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 800559a:	2800      	cmp	r0, #0
 800559c:	d1e7      	bne.n	800556e <spi_stm32_transceive+0x846>
		++(*current);
 800559e:	3208      	adds	r2, #8
		--(*count);
 80055a0:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f6      	bne.n	8005596 <spi_stm32_transceive+0x86e>
	*buf_len = 0;
 80055a8:	65b1      	str	r1, [r6, #88]	; 0x58
	return NULL;
 80055aa:	2300      	movs	r3, #0
		ctx->tx_buf += dfs * len;
 80055ac:	6573      	str	r3, [r6, #84]	; 0x54
 80055ae:	e46c      	b.n	8004e8a <spi_stm32_transceive+0x162>
		++ctx->current_rx;
 80055b0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 80055b2:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 80055b4:	3208      	adds	r2, #8
		--ctx->rx_count;
 80055b6:	3b01      	subs	r3, #1
		++ctx->current_rx;
 80055b8:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 80055ba:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 80055bc:	b933      	cbnz	r3, 80055cc <spi_stm32_transceive+0x8a4>
 80055be:	e76e      	b.n	800549e <spi_stm32_transceive+0x776>
		++(*current);
 80055c0:	3208      	adds	r2, #8
		--(*count);
 80055c2:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f43f af69 	beq.w	800549e <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 80055cc:	6850      	ldr	r0, [r2, #4]
 80055ce:	2801      	cmp	r0, #1
		--(*count);
 80055d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 80055d4:	d9f4      	bls.n	80055c0 <spi_stm32_transceive+0x898>
 80055d6:	e64c      	b.n	8005272 <spi_stm32_transceive+0x54a>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80055d8:	68ab      	ldr	r3, [r5, #8]
 80055da:	065b      	lsls	r3, r3, #25
 80055dc:	d50c      	bpl.n	80055f8 <spi_stm32_transceive+0x8d0>
  tmpreg = SPIx->DR;
 80055de:	68eb      	ldr	r3, [r5, #12]
 80055e0:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 80055e2:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 80055e4:	68ab      	ldr	r3, [r5, #8]
 80055e6:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 80055e8:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 80055ea:	f06f 0404 	mvn.w	r4, #4
 80055ee:	e472      	b.n	8004ed6 <spi_stm32_transceive+0x1ae>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80055f0:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 80055f2:	e76c      	b.n	80054ce <spi_stm32_transceive+0x7a6>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80055f4:	64b0      	str	r0, [r6, #72]	; 0x48
	while (*count) {
 80055f6:	e76f      	b.n	80054d8 <spi_stm32_transceive+0x7b0>
 80055f8:	f06f 0404 	mvn.w	r4, #4
 80055fc:	e46b      	b.n	8004ed6 <spi_stm32_transceive+0x1ae>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 80055fe:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8005600:	e7ba      	b.n	8005578 <spi_stm32_transceive+0x850>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8005602:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8005604:	e7bd      	b.n	8005582 <spi_stm32_transceive+0x85a>
 8005606:	bf00      	nop
 8005608:	20000fc8 	.word	0x20000fc8

0800560c <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 800560c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8005610:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8005612:	6846      	ldr	r6, [r0, #4]
{
 8005614:	b082      	sub	sp, #8
 8005616:	4c4d      	ldr	r4, [pc, #308]	; (800574c <spi_stm32_init+0x140>)
 8005618:	4620      	mov	r0, r4
 800561a:	f007 fcff 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 800561e:	2800      	cmp	r0, #0
 8005620:	f000 8090 	beq.w	8005744 <spi_stm32_init+0x138>
	return api->on(dev, sys);
 8005624:	68a3      	ldr	r3, [r4, #8]
 8005626:	4631      	mov	r1, r6
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4620      	mov	r0, r4
 800562c:	4798      	blx	r3
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800562e:	4607      	mov	r7, r0
 8005630:	2800      	cmp	r0, #0
 8005632:	f040 8087 	bne.w	8005744 <spi_stm32_init+0x138>
	ret = pinctrl_lookup_state(config, id, &state);
 8005636:	68f0      	ldr	r0, [r6, #12]
 8005638:	aa01      	add	r2, sp, #4
 800563a:	4639      	mov	r1, r7
 800563c:	f003 fc04 	bl	8008e48 <pinctrl_lookup_state>
	if (ret < 0) {
 8005640:	2800      	cmp	r0, #0
 8005642:	db57      	blt.n	80056f4 <spi_stm32_init+0xe8>
	return pinctrl_apply_state_direct(config, state);
 8005644:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8005646:	463a      	mov	r2, r7
 8005648:	7919      	ldrb	r1, [r3, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	f003 fc20 	bl	8008e90 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8005650:	2800      	cmp	r0, #0
 8005652:	db4f      	blt.n	80056f4 <spi_stm32_init+0xe8>
#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
#endif

#ifdef CONFIG_SPI_STM32_DMA
	if ((data->dma_rx.dma_dev != NULL) &&
 8005654:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8005658:	b118      	cbz	r0, 8005662 <spi_stm32_init+0x56>
 800565a:	f007 fcdf 	bl	800d01c <z_device_is_ready>
 800565e:	2800      	cmp	r0, #0
 8005660:	d042      	beq.n	80056e8 <spi_stm32_init+0xdc>
				!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
		return -ENODEV;
	}

	if ((data->dma_tx.dma_dev != NULL) &&
 8005662:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8005666:	b118      	cbz	r0, 8005670 <spi_stm32_init+0x64>
 8005668:	f007 fcd8 	bl	800d01c <z_device_is_ready>
 800566c:	2800      	cmp	r0, #0
 800566e:	d03b      	beq.n	80056e8 <spi_stm32_init+0xdc>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8005670:	e9d5 4302 	ldrd	r4, r3, [r5, #8]
 8005674:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005678:	429c      	cmp	r4, r3
 800567a:	d240      	bcs.n	80056fe <spi_stm32_init+0xf2>
 800567c:	3408      	adds	r4, #8
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800567e:	f04f 0801 	mov.w	r8, #1
 8005682:	e02a      	b.n	80056da <spi_stm32_init+0xce>
 8005684:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8005688:	f814 1c04 	ldrb.w	r1, [r4, #-4]
 800568c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
 8005690:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 8005694:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005698:	f8de c000 	ldr.w	ip, [lr]
	return api->pin_configure(port, pin, flags);
 800569c:	f8d9 9000 	ldr.w	r9, [r9]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80056a0:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 80056a2:	bf54      	ite	pl
 80056a4:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80056a8:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80056ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80056b0:	fa08 fa01 	lsl.w	sl, r8, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80056b4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80056b6:	bf4c      	ite	mi
 80056b8:	ea4c 030a 	orrmi.w	r3, ip, sl
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80056bc:	ea2c 030a 	bicpl.w	r3, ip, sl
 80056c0:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
 80056c4:	47c8      	blx	r9
		if (ret < 0) {
 80056c6:	2800      	cmp	r0, #0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80056c8:	f104 0408 	add.w	r4, r4, #8
		if (ret < 0) {
 80056cc:	db12      	blt.n	80056f4 <spi_stm32_init+0xe8>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 80056ce:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80056d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d6:	429e      	cmp	r6, r3
 80056d8:	d211      	bcs.n	80056fe <spi_stm32_init+0xf2>
		if (!device_is_ready(cs_gpio->port)) {
 80056da:	f854 0c08 	ldr.w	r0, [r4, #-8]
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
 80056de:	4626      	mov	r6, r4
 80056e0:	f007 fc9c 	bl	800d01c <z_device_is_ready>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1cd      	bne.n	8005684 <spi_stm32_init+0x78>
		return -ENODEV;
 80056e8:	f06f 0712 	mvn.w	r7, #18
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 80056ec:	4638      	mov	r0, r7
 80056ee:	b002      	add	sp, #8
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (err < 0) {
 80056f4:	4607      	mov	r7, r0
}
 80056f6:	4638      	mov	r0, r7
 80056f8:	b002      	add	sp, #8
 80056fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	b1a3      	cbz	r3, 800572c <spi_stm32_init+0x120>
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	b193      	cbz	r3, 800572c <spi_stm32_init+0x120>
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	b182      	cbz	r2, 800572c <spi_stm32_init+0x120>
			k_busy_wait(ctx->config->cs->delay);
 800570a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800570c:	f009 f9d8 	bl	800eac0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8005714:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005716:	791a      	ldrb	r2, [r3, #4]
 8005718:	6903      	ldr	r3, [r0, #16]
 800571a:	2101      	movs	r1, #1
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4091      	lsls	r1, r2
 8005720:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
 8005722:	6883      	ldr	r3, [r0, #8]
 8005724:	bf14      	ite	ne
 8005726:	68db      	ldrne	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8005728:	691b      	ldreq	r3, [r3, #16]
 800572a:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 800572c:	69ab      	ldr	r3, [r5, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1dc      	bne.n	80056ec <spi_stm32_init+0xe0>
		ctx->owner = NULL;
 8005732:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 8005734:	f105 0010 	add.w	r0, r5, #16
 8005738:	f008 f822 	bl	800d780 <z_impl_k_sem_give>
 800573c:	4638      	mov	r0, r7
 800573e:	b002      	add	sp, #8
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
 8005744:	f06f 0704 	mvn.w	r7, #4
 8005748:	e7d0      	b.n	80056ec <spi_stm32_init+0xe0>
 800574a:	bf00      	nop
 800574c:	08011734 	.word	0x08011734

08005750 <timer_work_handler>:
/* TODO: Use Non-volatile memory for backup */
static volatile uint32_t backup_reg[2];

static void timer_work_handler(struct k_work *work)
{
	TimerIrqHandler();
 8005750:	f000 bee6 	b.w	8006520 <TimerIrqHandler>

08005754 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <timer_callback+0x8>)
 8005756:	f008 b9dd 	b.w	800db14 <k_work_submit>
 800575a:	bf00      	nop
 800575c:	20000264 	.word	0x20000264

08005760 <RtcGetTimerValue>:
	/* Return in seconds */
	return now / MSEC_PER_SEC;
}

uint32_t RtcGetTimerValue(void)
{
 8005760:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8005762:	f009 f995 	bl	800ea90 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 8005766:	220a      	movs	r2, #10
 8005768:	2300      	movs	r3, #0
 800576a:	f7fb fa07 	bl	8000b7c <__aeabi_uldivmod>
	return k_uptime_get_32();
}
 800576e:	bd08      	pop	{r3, pc}

08005770 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime(void)
{
 8005770:	b508      	push	{r3, lr}
 8005772:	f009 f98d 	bl	800ea90 <z_impl_k_uptime_ticks>
 8005776:	220a      	movs	r2, #10
 8005778:	2300      	movs	r3, #0
 800577a:	f7fb f9ff 	bl	8000b7c <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 800577e:	4b02      	ldr	r3, [pc, #8]	; (8005788 <RtcGetTimerElapsedTime+0x18>)
 8005780:	681b      	ldr	r3, [r3, #0]
}
 8005782:	1ac0      	subs	r0, r0, r3
 8005784:	bd08      	pop	{r3, pc}
 8005786:	bf00      	nop
 8005788:	20000fcc 	.word	0x20000fcc

0800578c <RtcGetMinimumTimeout>:

uint32_t RtcGetMinimumTimeout(void)
{
	return 1;
}
 800578c:	2001      	movs	r0, #1
 800578e:	4770      	bx	lr

08005790 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <RtcStopAlarm+0x8>)
 8005792:	f009 ba5d 	b.w	800ec50 <z_impl_k_timer_stop>
 8005796:	bf00      	nop
 8005798:	200006f8 	.word	0x200006f8

0800579c <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 800579c:	b530      	push	{r4, r5, lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800579e:	220a      	movs	r2, #10
 80057a0:	b083      	sub	sp, #12
 80057a2:	fba0 2302 	umull	r2, r3, r0, r2
 80057a6:	2400      	movs	r4, #0
 80057a8:	2500      	movs	r5, #0
	z_impl_k_timer_start(timer, duration, period);
 80057aa:	4803      	ldr	r0, [pc, #12]	; (80057b8 <RtcSetAlarm+0x1c>)
 80057ac:	e9cd 4500 	strd	r4, r5, [sp]
 80057b0:	f009 f9f6 	bl	800eba0 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 80057b4:	b003      	add	sp, #12
 80057b6:	bd30      	pop	{r4, r5, pc}
 80057b8:	200006f8 	.word	0x200006f8

080057bc <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 80057bc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80057be:	f009 f967 	bl	800ea90 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80057c2:	220a      	movs	r2, #10
 80057c4:	2300      	movs	r3, #0
 80057c6:	f7fb f9d9 	bl	8000b7c <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 80057ca:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <RtcSetTimerContext+0x14>)
 80057cc:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 80057ce:	bd08      	pop	{r3, pc}
 80057d0:	20000fcc 	.word	0x20000fcc

080057d4 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
 80057d4:	4b01      	ldr	r3, [pc, #4]	; (80057dc <RtcGetTimerContext+0x8>)
}
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000fcc 	.word	0x20000fcc

080057e0 <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 80057e0:	210a      	movs	r1, #10
 80057e2:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 80057e6:	f008 be79 	b.w	800e4dc <z_impl_k_sleep>
 80057ea:	bf00      	nop

080057ec <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <RtcTick2Ms>:
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 80057f4:	f04f 0210 	mov.w	r2, #16
 80057f8:	f3ef 8311 	mrs	r3, BASEPRI
 80057fc:	f382 8812 	msr	BASEPRI_MAX, r2
 8005800:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8005804:	6003      	str	r3, [r0, #0]
}
 8005806:	4770      	bx	lr

08005808 <BoardCriticalSectionEnd>:
	__asm__ volatile(
 8005808:	6803      	ldr	r3, [r0, #0]
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 8005812:	4770      	bx	lr

08005814 <sx12xx_ev_rx_error_timeout>:
}

static void sx12xx_ev_rx_error_timeout(void)
{
    LOG_DBG("Receive timeout/error");
    struct k_poll_signal *sig = dev_data.operation_done;
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <sx12xx_ev_rx_error_timeout+0x20>)

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 8005816:	68da      	ldr	r2, [r3, #12]
{
 8005818:	b510      	push	{r4, lr}
    struct k_poll_signal *sig = dev_data.operation_done;
 800581a:	685c      	ldr	r4, [r3, #4]
    if (dev_data.async_rx_error_timeout_cb) {
 800581c:	b10a      	cbz	r2, 8005822 <sx12xx_ev_rx_error_timeout+0xe>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	4790      	blx	r2
    }

    /* Raise signal if provided */
    if (sig) {
 8005822:	b12c      	cbz	r4, 8005830 <sx12xx_ev_rx_error_timeout+0x1c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8005824:	2100      	movs	r1, #0
 8005826:	4620      	mov	r0, r4
        k_poll_signal_raise(sig, 0);
    }
}
 8005828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582c:	f009 bd1e 	b.w	800f26c <z_impl_k_poll_signal_raise>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	bf00      	nop
 8005834:	20000fd0 	.word	0x20000fd0

08005838 <sx12xx_ev_rx_done>:
{
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dev_data.async_rx_cb) {
 800583c:	4c27      	ldr	r4, [pc, #156]	; (80058dc <sx12xx_ev_rx_done+0xa4>)
 800583e:	68a5      	ldr	r5, [r4, #8]
{
 8005840:	468c      	mov	ip, r1
 8005842:	b084      	sub	sp, #16
 8005844:	4601      	mov	r1, r0
 8005846:	4617      	mov	r7, r2
 8005848:	461e      	mov	r6, r3
	if (dev_data.async_rx_cb) {
 800584a:	b165      	cbz	r5, 8005866 <sx12xx_ev_rx_done+0x2e>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	4662      	mov	r2, ip
 8005854:	47a8      	blx	r5
		Radio.Rx(0);
 8005856:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <sx12xx_ev_rx_done+0xa8>)
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	2000      	movs	r0, #0
}
 800585e:	b004      	add	sp, #16
 8005860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Radio.Rx(0);
 8005864:	4718      	bx	r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005866:	f104 0544 	add.w	r5, r4, #68	; 0x44
 800586a:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 800586c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8005870:	f3bf 8f5b 	dmb	ish
 8005874:	e855 2f00 	ldrex	r2, [r5]
 8005878:	2a01      	cmp	r2, #1
 800587a:	d103      	bne.n	8005884 <sx12xx_ev_rx_done+0x4c>
 800587c:	e845 3000 	strex	r0, r3, [r5]
 8005880:	2800      	cmp	r0, #0
 8005882:	d1f7      	bne.n	8005874 <sx12xx_ev_rx_done+0x3c>
 8005884:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005888:	d125      	bne.n	80058d6 <sx12xx_ev_rx_done+0x9e>
	if (size < *dev_data.rx_params.size) {
 800588a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	4562      	cmp	r2, ip
 8005890:	d903      	bls.n	800589a <sx12xx_ev_rx_done+0x62>
		*dev_data.rx_params.size = size;
 8005892:	f883 c000 	strb.w	ip, [r3]
	memcpy(dev_data.rx_params.buf, payload,
 8005896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005898:	781a      	ldrb	r2, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800589a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800589c:	f00b fb0c 	bl	8010eb8 <memcpy>
	if (dev_data.rx_params.rssi) {
 80058a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058a2:	b103      	cbz	r3, 80058a6 <sx12xx_ev_rx_done+0x6e>
		*dev_data.rx_params.rssi = rssi;
 80058a4:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 80058a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058a8:	b103      	cbz	r3, 80058ac <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.snr = snr;
 80058aa:	701e      	strb	r6, [r3, #0]
	Radio.Sleep();
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <sx12xx_ev_rx_done+0xa8>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	4798      	blx	r3
	dev_data.operation_done = NULL;
 80058b2:	2100      	movs	r1, #0
 80058b4:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80058b6:	f3bf 8f5b 	dmb	ish
 80058ba:	e855 3f00 	ldrex	r3, [r5]
 80058be:	e845 1200 	strex	r2, r1, [r5]
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d1f9      	bne.n	80058ba <sx12xx_ev_rx_done+0x82>
 80058c6:	f3bf 8f5b 	dmb	ish
 80058ca:	4640      	mov	r0, r8
}
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d2:	f009 bccb 	b.w	800f26c <z_impl_k_poll_signal_raise>
 80058d6:	b004      	add	sp, #16
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	20000fd0 	.word	0x20000fd0
 80058e0:	08012170 	.word	0x08012170

080058e4 <sx12xx_ev_tx_done>:
{
 80058e4:	b570      	push	{r4, r5, r6, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80058e6:	4d14      	ldr	r5, [pc, #80]	; (8005938 <sx12xx_ev_tx_done+0x54>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80058e8:	2302      	movs	r3, #2
 80058ea:	f105 0444 	add.w	r4, r5, #68	; 0x44
 80058ee:	686e      	ldr	r6, [r5, #4]
 80058f0:	f3bf 8f5b 	dmb	ish
 80058f4:	e854 2f00 	ldrex	r2, [r4]
 80058f8:	2a01      	cmp	r2, #1
 80058fa:	d103      	bne.n	8005904 <sx12xx_ev_tx_done+0x20>
 80058fc:	e844 3100 	strex	r1, r3, [r4]
 8005900:	2900      	cmp	r1, #0
 8005902:	d1f7      	bne.n	80058f4 <sx12xx_ev_tx_done+0x10>
 8005904:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005908:	d114      	bne.n	8005934 <sx12xx_ev_tx_done+0x50>
	Radio.Sleep();
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <sx12xx_ev_tx_done+0x58>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	4798      	blx	r3
	data->operation_done = NULL;
 8005910:	2100      	movs	r1, #0
 8005912:	6069      	str	r1, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005914:	f3bf 8f5b 	dmb	ish
 8005918:	e854 3f00 	ldrex	r3, [r4]
 800591c:	e844 1200 	strex	r2, r1, [r4]
 8005920:	2a00      	cmp	r2, #0
 8005922:	d1f9      	bne.n	8005918 <sx12xx_ev_tx_done+0x34>
 8005924:	f3bf 8f5b 	dmb	ish
		if (sig) {
 8005928:	b126      	cbz	r6, 8005934 <sx12xx_ev_tx_done+0x50>
 800592a:	4630      	mov	r0, r6
}
 800592c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005930:	f009 bc9c 	b.w	800f26c <z_impl_k_poll_signal_raise>
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	bf00      	nop
 8005938:	20000fd0 	.word	0x20000fd0
 800593c:	08012170 	.word	0x08012170

08005940 <sx12xx_ev_tx_timed_out>:
{
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8005942:	4c15      	ldr	r4, [pc, #84]	; (8005998 <sx12xx_ev_tx_timed_out+0x58>)
    dev_data.events.TxTimeout = NULL;
 8005944:	2600      	movs	r6, #0
 8005946:	6166      	str	r6, [r4, #20]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005948:	f104 0544 	add.w	r5, r4, #68	; 0x44
 800594c:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 800594e:	6867      	ldr	r7, [r4, #4]
 8005950:	f3bf 8f5b 	dmb	ish
 8005954:	e855 2f00 	ldrex	r2, [r5]
 8005958:	2a01      	cmp	r2, #1
 800595a:	d103      	bne.n	8005964 <sx12xx_ev_tx_timed_out+0x24>
 800595c:	e845 3100 	strex	r1, r3, [r5]
 8005960:	2900      	cmp	r1, #0
 8005962:	d1f7      	bne.n	8005954 <sx12xx_ev_tx_timed_out+0x14>
 8005964:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005968:	d114      	bne.n	8005994 <sx12xx_ev_tx_timed_out+0x54>
	Radio.Sleep();
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <sx12xx_ev_tx_timed_out+0x5c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4798      	blx	r3
	data->operation_done = NULL;
 8005970:	6066      	str	r6, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005972:	f3bf 8f5b 	dmb	ish
 8005976:	e855 3f00 	ldrex	r3, [r5]
 800597a:	e845 6200 	strex	r2, r6, [r5]
 800597e:	2a00      	cmp	r2, #0
 8005980:	d1f9      	bne.n	8005976 <sx12xx_ev_tx_timed_out+0x36>
 8005982:	f3bf 8f5b 	dmb	ish
		if (sig) {
 8005986:	b12f      	cbz	r7, 8005994 <sx12xx_ev_tx_timed_out+0x54>
 8005988:	4631      	mov	r1, r6
 800598a:	4638      	mov	r0, r7
}
 800598c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005990:	f009 bc6c 	b.w	800f26c <z_impl_k_poll_signal_raise>
 8005994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005996:	bf00      	nop
 8005998:	20000fd0 	.word	0x20000fd0
 800599c:	08012170 	.word	0x08012170

080059a0 <__sx12xx_configure_pin>:
{
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4605      	mov	r5, r0
 80059a4:	4616      	mov	r6, r2
 80059a6:	4608      	mov	r0, r1
 80059a8:	461c      	mov	r4, r3
	return z_impl_device_get_binding(name);
 80059aa:	f007 fb03 	bl	800cfb4 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 80059ae:	6028      	str	r0, [r5, #0]
	if (!(*dev)) {
 80059b0:	b300      	cbz	r0, 80059f4 <__sx12xx_configure_pin+0x54>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80059b2:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
 80059b4:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
 80059b6:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80059b8:	d506      	bpl.n	80059c8 <__sx12xx_configure_pin+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80059ba:	f414 6f40 	tst.w	r4, #3072	; 0xc00
 80059be:	d003      	beq.n	80059c8 <__sx12xx_configure_pin+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80059c0:	07e3      	lsls	r3, r4, #31
 80059c2:	d50f      	bpl.n	80059e4 <__sx12xx_configure_pin+0x44>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80059c4:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80059c8:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80059cc:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80059ce:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80059d0:	d50b      	bpl.n	80059ea <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80059d2:	2401      	movs	r4, #1
 80059d4:	40b4      	lsls	r4, r6
 80059d6:	4323      	orrs	r3, r4
 80059d8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 80059da:	680b      	ldr	r3, [r1, #0]
 80059dc:	4631      	mov	r1, r6
}
 80059de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059e2:	4718      	bx	r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80059ea:	2401      	movs	r4, #1
 80059ec:	40b4      	lsls	r4, r6
 80059ee:	ea23 0304 	bic.w	r3, r3, r4
 80059f2:	e7f1      	b.n	80059d8 <__sx12xx_configure_pin+0x38>
 80059f4:	f06f 0004 	mvn.w	r0, #4
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	bf00      	nop

080059fc <sx12xx_lora_send>:

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		&done);
	uint32_t air_time;
	int ret;

	/* Validate that we have a TX configuration */
	if (!dev_data.tx_cfg.frequency) {
 8005a00:	4d41      	ldr	r5, [pc, #260]	; (8005b08 <sx12xx_lora_send+0x10c>)
{
 8005a02:	b08e      	sub	sp, #56	; 0x38
 8005a04:	468a      	mov	sl, r1
	if (!dev_data.tx_cfg.frequency) {
 8005a06:	6b69      	ldr	r1, [r5, #52]	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005a08:	2400      	movs	r4, #0
 8005a0a:	ab05      	add	r3, sp, #20
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005a0c:	2701      	movs	r7, #1
 8005a0e:	940c      	str	r4, [sp, #48]	; 0x30
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005a10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005a14:	e9cd 4407 	strd	r4, r4, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005a18:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005a1c:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a20:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
	if (!dev_data.tx_cfg.frequency) {
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d068      	beq.n	8005afa <sx12xx_lora_send+0xfe>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005a28:	f3bf 8f5b 	dmb	ish
 8005a2c:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8005a30:	e858 1f00 	ldrex	r1, [r8]
 8005a34:	42a1      	cmp	r1, r4
 8005a36:	d103      	bne.n	8005a40 <sx12xx_lora_send+0x44>
 8005a38:	e848 7000 	strex	r0, r7, [r8]
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d1f7      	bne.n	8005a30 <sx12xx_lora_send+0x34>
 8005a40:	f3bf 8f5b 	dmb	ish

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005a44:	d15c      	bne.n	8005b00 <sx12xx_lora_send+0x104>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005a46:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005b0c <sx12xx_lora_send+0x110>
	dev_data.operation_done = async;
 8005a4a:	606b      	str	r3, [r5, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005a4c:	b2d6      	uxtb	r6, r2
 8005a4e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8005a52:	4631      	mov	r1, r6
 8005a54:	4638      	mov	r0, r7
 8005a56:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005a58:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4798      	blx	r3
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005a62:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8005a6a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a74:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 8005a78:	f8d9 6024 	ldr.w	r6, [r9, #36]	; 0x24
 8005a7c:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 8005a80:	4638      	mov	r0, r7
 8005a82:	47b0      	blx	r6
 8005a84:	220a      	movs	r2, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8005a86:	40b8      	lsls	r0, r7
 8005a88:	fba0 2302 	umull	r2, r3, r0, r2
	return z_impl_k_poll(events, num_events, timeout);
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	a809      	add	r0, sp, #36	; 0x24
 8005a90:	f009 fb20 	bl	800f0d4 <z_impl_k_poll>
	if (ret < 0) {
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	db03      	blt.n	8005aa0 <sx12xx_lora_send+0xa4>
	return 0;
 8005a98:	4620      	mov	r0, r4
}
 8005a9a:	b00e      	add	sp, #56	; 0x38
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f3bf 8f5b 	dmb	ish
 8005aa6:	e858 2f00 	ldrex	r2, [r8]
 8005aaa:	42ba      	cmp	r2, r7
 8005aac:	d103      	bne.n	8005ab6 <sx12xx_lora_send+0xba>
 8005aae:	e848 3100 	strex	r1, r3, [r8]
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d1f7      	bne.n	8005aa6 <sx12xx_lora_send+0xaa>
 8005ab6:	f3bf 8f5b 	dmb	ish
 8005aba:	bf0c      	ite	eq
 8005abc:	463e      	moveq	r6, r7
 8005abe:	4626      	movne	r6, r4
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005ac0:	d111      	bne.n	8005ae6 <sx12xx_lora_send+0xea>
	Radio.Sleep();
 8005ac2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8005ac6:	4798      	blx	r3
	data->operation_done = NULL;
 8005ac8:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005aca:	f3bf 8f5b 	dmb	ish
 8005ace:	e858 3f00 	ldrex	r3, [r8]
 8005ad2:	e848 4200 	strex	r2, r4, [r8]
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d1f9      	bne.n	8005ace <sx12xx_lora_send+0xd2>
 8005ada:	f3bf 8f5b 	dmb	ish
	return 0;
 8005ade:	4620      	mov	r0, r4
}
 8005ae0:	b00e      	add	sp, #56	; 0x38
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aee:	4639      	mov	r1, r7
 8005af0:	a809      	add	r0, sp, #36	; 0x24
 8005af2:	f009 faef 	bl	800f0d4 <z_impl_k_poll>
	return 0;
 8005af6:	4630      	mov	r0, r6
 8005af8:	e7cf      	b.n	8005a9a <sx12xx_lora_send+0x9e>
		return -EINVAL;
 8005afa:	f06f 0015 	mvn.w	r0, #21
 8005afe:	e7cc      	b.n	8005a9a <sx12xx_lora_send+0x9e>
		return -EBUSY;
 8005b00:	f06f 000f 	mvn.w	r0, #15
 8005b04:	e7c9      	b.n	8005a9a <sx12xx_lora_send+0x9e>
 8005b06:	bf00      	nop
 8005b08:	20000fd0 	.word	0x20000fd0
 8005b0c:	08012170 	.word	0x08012170

08005b10 <sx12xx_lora_send_async>:
{
 8005b10:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005b12:	4d11      	ldr	r5, [pc, #68]	; (8005b58 <sx12xx_lora_send_async+0x48>)
 8005b14:	f3bf 8f5b 	dmb	ish
 8005b18:	460e      	mov	r6, r1
 8005b1a:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8005b1e:	2001      	movs	r0, #1
 8005b20:	e854 1f00 	ldrex	r1, [r4]
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d104      	bne.n	8005b32 <sx12xx_lora_send_async+0x22>
 8005b28:	e844 0c00 	strex	ip, r0, [r4]
 8005b2c:	f1bc 0f00 	cmp.w	ip, #0
 8005b30:	d1f6      	bne.n	8005b20 <sx12xx_lora_send_async+0x10>
 8005b32:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 8005b36:	d10b      	bne.n	8005b50 <sx12xx_lora_send_async+0x40>
	dev_data.operation_done = async;
 8005b38:	606b      	str	r3, [r5, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005b3a:	4d08      	ldr	r5, [pc, #32]	; (8005b5c <sx12xx_lora_send_async+0x4c>)
 8005b3c:	b2d4      	uxtb	r4, r2
 8005b3e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005b40:	4621      	mov	r1, r4
 8005b42:	4798      	blx	r3
	Radio.Send(data, data_len);
 8005b44:	4630      	mov	r0, r6
 8005b46:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4798      	blx	r3

	return 0;
 8005b4c:	2000      	movs	r0, #0
}
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005b50:	f06f 000f 	mvn.w	r0, #15
}
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	bf00      	nop
 8005b58:	20000fd0 	.word	0x20000fd0
 8005b5c:	08012170 	.word	0x08012170

08005b60 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8005b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b64:	b08d      	sub	sp, #52	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005b66:	2400      	movs	r4, #0
 8005b68:	ab03      	add	r3, sp, #12
 8005b6a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005b6e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005b72:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005b76:	4d34      	ldr	r5, [pc, #208]	; (8005c48 <sx12xx_lora_recv+0xe8>)
 8005b78:	940a      	str	r4, [sp, #40]	; 0x28
 8005b7a:	2701      	movs	r7, #1
{
 8005b7c:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005b80:	9409      	str	r4, [sp, #36]	; 0x24
 8005b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b84:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8005b88:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8005b8c:	f3bf 8f5b 	dmb	ish
 8005b90:	e858 2f00 	ldrex	r2, [r8]
 8005b94:	42a2      	cmp	r2, r4
 8005b96:	d103      	bne.n	8005ba0 <sx12xx_lora_recv+0x40>
 8005b98:	e848 7000 	strex	r0, r7, [r8]
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1f7      	bne.n	8005b90 <sx12xx_lora_recv+0x30>
 8005ba0:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8005ba4:	d14d      	bne.n	8005c42 <sx12xx_lora_recv+0xe2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
 8005ba6:	606b      	str	r3, [r5, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
	dev_data.rx_params.rssi = rssi;
 8005ba8:	9b16      	ldr	r3, [sp, #88]	; 0x58
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005baa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8005c4c <sx12xx_lora_recv+0xec>
	dev_data.rx_params.rssi = rssi;
 8005bae:	652b      	str	r3, [r5, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 8005bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bb2:	656b      	str	r3, [r5, #84]	; 0x54
	dev_data.rx_params.size = &size;
 8005bb4:	f10d 0307 	add.w	r3, sp, #7
	dev_data.rx_params.buf = data;
 8005bb8:	64a9      	str	r1, [r5, #72]	; 0x48
	dev_data.rx_params.size = &size;
 8005bba:	64eb      	str	r3, [r5, #76]	; 0x4c
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005bbc:	21ff      	movs	r1, #255	; 0xff
 8005bbe:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
	dev_data.async_rx_cb = NULL;
 8005bc2:	60ac      	str	r4, [r5, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	4798      	blx	r3
	Radio.Rx(0);
 8005bc8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4798      	blx	r3
 8005bd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	a807      	add	r0, sp, #28
 8005bd8:	f009 fa7c 	bl	800f0d4 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8005bdc:	1e06      	subs	r6, r0, #0
 8005bde:	db05      	blt.n	8005bec <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8005be0:	f89d 6007 	ldrb.w	r6, [sp, #7]
}
 8005be4:	4630      	mov	r0, r6
 8005be6:	b00d      	add	sp, #52	; 0x34
 8005be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bec:	2302      	movs	r3, #2
 8005bee:	f3bf 8f5b 	dmb	ish
 8005bf2:	e858 2f00 	ldrex	r2, [r8]
 8005bf6:	42ba      	cmp	r2, r7
 8005bf8:	d103      	bne.n	8005c02 <sx12xx_lora_recv+0xa2>
 8005bfa:	e848 3100 	strex	r1, r3, [r8]
 8005bfe:	2900      	cmp	r1, #0
 8005c00:	d1f7      	bne.n	8005bf2 <sx12xx_lora_recv+0x92>
 8005c02:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005c06:	d111      	bne.n	8005c2c <sx12xx_lora_recv+0xcc>
	Radio.Sleep();
 8005c08:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8005c0c:	4798      	blx	r3
	data->operation_done = NULL;
 8005c0e:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005c10:	f3bf 8f5b 	dmb	ish
 8005c14:	e858 3f00 	ldrex	r3, [r8]
 8005c18:	e848 4200 	strex	r2, r4, [r8]
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d1f9      	bne.n	8005c14 <sx12xx_lora_recv+0xb4>
 8005c20:	f3bf 8f5b 	dmb	ish
}
 8005c24:	4630      	mov	r0, r6
 8005c26:	b00d      	add	sp, #52	; 0x34
 8005c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c34:	4639      	mov	r1, r7
 8005c36:	a807      	add	r0, sp, #28
 8005c38:	f009 fa4c 	bl	800f0d4 <z_impl_k_poll>
			return size;
 8005c3c:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8005c40:	e7d0      	b.n	8005be4 <sx12xx_lora_recv+0x84>
		return -EBUSY;
 8005c42:	f06f 060f 	mvn.w	r6, #15
 8005c46:	e7cd      	b.n	8005be4 <sx12xx_lora_recv+0x84>
 8005c48:	20000fd0 	.word	0x20000fd0
 8005c4c:	08012170 	.word	0x08012170

08005c50 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	460c      	mov	r4, r1
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8005c54:	b1ea      	cbz	r2, 8005c92 <sx12xx_lora_recv_async+0x42>
 8005c56:	2900      	cmp	r1, #0
 8005c58:	d03d      	beq.n	8005cd6 <sx12xx_lora_recv_async+0x86>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005c5a:	f3bf 8f5b 	dmb	ish
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <sx12xx_lora_recv_async+0x94>)
 8005c60:	2001      	movs	r0, #1
 8005c62:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005c66:	e851 5f00 	ldrex	r5, [r1]
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	d103      	bne.n	8005c76 <sx12xx_lora_recv_async+0x26>
 8005c6e:	e841 0600 	strex	r6, r0, [r1]
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d1f7      	bne.n	8005c66 <sx12xx_lora_recv_async+0x16>
 8005c76:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 8005c7a:	d12f      	bne.n	8005cdc <sx12xx_lora_recv_async+0x8c>
	/* Store parameters */
	dev_data.async_rx_cb = cb;
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005c7c:	4d1a      	ldr	r5, [pc, #104]	; (8005ce8 <sx12xx_lora_recv_async+0x98>)
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 8005c7e:	e9c3 4202 	strd	r4, r2, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005c82:	21ff      	movs	r1, #255	; 0xff
 8005c84:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005c86:	4798      	blx	r3
	Radio.Rx(0);
 8005c88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	4798      	blx	r3

	return 0;
 8005c8e:	2000      	movs	r0, #0
}
 8005c90:	bd70      	pop	{r4, r5, r6, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 8005c92:	bb01      	cbnz	r1, 8005cd6 <sx12xx_lora_recv_async+0x86>
 8005c94:	f3bf 8f5b 	dmb	ish
 8005c98:	4e12      	ldr	r6, [pc, #72]	; (8005ce4 <sx12xx_lora_recv_async+0x94>)
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	f106 0544 	add.w	r5, r6, #68	; 0x44
 8005ca0:	e855 2f00 	ldrex	r2, [r5]
 8005ca4:	2a01      	cmp	r2, #1
 8005ca6:	d103      	bne.n	8005cb0 <sx12xx_lora_recv_async+0x60>
 8005ca8:	e845 3100 	strex	r1, r3, [r5]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d1f7      	bne.n	8005ca0 <sx12xx_lora_recv_async+0x50>
 8005cb0:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005cb4:	d10f      	bne.n	8005cd6 <sx12xx_lora_recv_async+0x86>
	Radio.Sleep();
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <sx12xx_lora_recv_async+0x98>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	4798      	blx	r3
	data->operation_done = NULL;
 8005cbc:	6074      	str	r4, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005cbe:	f3bf 8f5b 	dmb	ish
 8005cc2:	e855 3f00 	ldrex	r3, [r5]
 8005cc6:	e845 4200 	strex	r2, r4, [r5]
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1f9      	bne.n	8005cc2 <sx12xx_lora_recv_async+0x72>
 8005cce:	f3bf 8f5b 	dmb	ish
		return 0;
 8005cd2:	4620      	mov	r0, r4
}
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
      return -EINVAL;
 8005cd6:	f06f 0015 	mvn.w	r0, #21
}
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005cdc:	f06f 000f 	mvn.w	r0, #15
}
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000fd0 	.word	0x20000fd0
 8005ce8:	08012170 	.word	0x08012170

08005cec <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8005cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005cf0:	4e3e      	ldr	r6, [pc, #248]	; (8005dec <sx12xx_lora_config+0x100>)
 8005cf2:	f3bf 8f5b 	dmb	ish
 8005cf6:	b08c      	sub	sp, #48	; 0x30
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	f106 0544 	add.w	r5, r6, #68	; 0x44
 8005cfe:	f04f 0801 	mov.w	r8, #1
 8005d02:	e855 3f00 	ldrex	r3, [r5]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <sx12xx_lora_config+0x26>
 8005d0a:	e845 8200 	strex	r2, r8, [r5]
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	d1f7      	bne.n	8005d02 <sx12xx_lora_config+0x16>
 8005d12:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8005d16:	d165      	bne.n	8005de4 <sx12xx_lora_config+0xf8>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005d18:	4f35      	ldr	r7, [pc, #212]	; (8005df0 <sx12xx_lora_config+0x104>)
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4798      	blx	r3

	if (config->tx) {
 8005d20:	7b63      	ldrb	r3, [r4, #13]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d13c      	bne.n	8005da0 <sx12xx_lora_config+0xb4>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8005d26:	7ae3      	ldrb	r3, [r4, #11]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d137      	bne.n	8005d9c <sx12xx_lora_config+0xb0>
 8005d2c:	461a      	mov	r2, r3

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8005d2e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8005d32:	230a      	movs	r3, #10
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	8923      	ldrh	r3, [r4, #8]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d44:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005d48:	2001      	movs	r0, #1
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	9009      	str	r0, [sp, #36]	; 0x24
 8005d4e:	79a3      	ldrb	r3, [r4, #6]
 8005d50:	7962      	ldrb	r2, [r4, #5]
 8005d52:	7921      	ldrb	r1, [r4, #4]
 8005d54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005d56:	47a0      	blx	r4
 8005d58:	f3bf 8f5b 	dmb	ish
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e855 2f00 	ldrex	r2, [r5]
 8005d62:	2a01      	cmp	r2, #1
 8005d64:	d103      	bne.n	8005d6e <sx12xx_lora_config+0x82>
 8005d66:	e845 3100 	strex	r1, r3, [r5]
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	d1f7      	bne.n	8005d5e <sx12xx_lora_config+0x72>
 8005d6e:	f3bf 8f5b 	dmb	ish
 8005d72:	bf0c      	ite	eq
 8005d74:	2001      	moveq	r0, #1
 8005d76:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005d78:	d10d      	bne.n	8005d96 <sx12xx_lora_config+0xaa>
	Radio.Sleep();
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	4798      	blx	r3
	data->operation_done = NULL;
 8005d7e:	2000      	movs	r0, #0
 8005d80:	6070      	str	r0, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005d82:	f3bf 8f5b 	dmb	ish
 8005d86:	e855 3f00 	ldrex	r3, [r5]
 8005d8a:	e845 0200 	strex	r2, r0, [r5]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d1f9      	bne.n	8005d86 <sx12xx_lora_config+0x9a>
 8005d92:	f3bf 8f5b 	dmb	ish
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
	return 0;
}
 8005d96:	b00c      	add	sp, #48	; 0x30
 8005d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8005d9c:	7aa2      	ldrb	r2, [r4, #10]
 8005d9e:	e7c6      	b.n	8005d2e <sx12xx_lora_config+0x42>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8005da0:	f8cd 8010 	str.w	r8, [sp, #16]
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	6861      	ldr	r1, [r4, #4]
 8005da8:	68a2      	ldr	r2, [r4, #8]
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	f106 0c34 	add.w	ip, r6, #52	; 0x34
 8005db0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8005db4:	2200      	movs	r2, #0
 8005db6:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8005dba:	9205      	str	r2, [sp, #20]
 8005dbc:	7ae3      	ldrb	r3, [r4, #11]
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	8923      	ldrh	r3, [r4, #8]
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	79a3      	ldrb	r3, [r4, #6]
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	7963      	ldrb	r3, [r4, #5]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd6:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8005dda:	7923      	ldrb	r3, [r4, #4]
 8005ddc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005dde:	4640      	mov	r0, r8
 8005de0:	47a0      	blx	r4
 8005de2:	e7b9      	b.n	8005d58 <sx12xx_lora_config+0x6c>
		return -EBUSY;
 8005de4:	f06f 000f 	mvn.w	r0, #15
 8005de8:	e7d5      	b.n	8005d96 <sx12xx_lora_config+0xaa>
 8005dea:	bf00      	nop
 8005dec:	20000fd0 	.word	0x20000fd0
 8005df0:	08012170 	.word	0x08012170

08005df4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df6:	b08b      	sub	sp, #44	; 0x2c
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005df8:	2500      	movs	r5, #0
 8005dfa:	ae01      	add	r6, sp, #4
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005dfc:	9508      	str	r5, [sp, #32]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005dfe:	e9cd 5503 	strd	r5, r5, [sp, #12]
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005e02:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8005e06:	9505      	str	r5, [sp, #20]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005e08:	e9cd 6601 	strd	r6, r6, [sp, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005e0c:	4d31      	ldr	r5, [pc, #196]	; (8005ed4 <sx12xx_lora_test_cw+0xe0>)
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005e0e:	9609      	str	r6, [sp, #36]	; 0x24
{
 8005e10:	461c      	mov	r4, r3
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005e12:	2301      	movs	r3, #1
{
 8005e14:	4608      	mov	r0, r1
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005e16:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
{
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	f105 0744 	add.w	r7, r5, #68	; 0x44
 8005e20:	f3bf 8f5b 	dmb	ish
 8005e24:	e857 2f00 	ldrex	r2, [r7]
 8005e28:	2a00      	cmp	r2, #0
 8005e2a:	d104      	bne.n	8005e36 <sx12xx_lora_test_cw+0x42>
 8005e2c:	e847 3c00 	strex	ip, r3, [r7]
 8005e30:	f1bc 0f00 	cmp.w	ip, #0
 8005e34:	d1f6      	bne.n	8005e24 <sx12xx_lora_test_cw+0x30>
 8005e36:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005e3a:	d148      	bne.n	8005ece <sx12xx_lora_test_cw+0xda>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 8005e3c:	606e      	str	r6, [r5, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8005e3e:	4e26      	ldr	r6, [pc, #152]	; (8005ed8 <sx12xx_lora_test_cw+0xe4>)
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 8005e40:	4b26      	ldr	r3, [pc, #152]	; (8005edc <sx12xx_lora_test_cw+0xe8>)
 8005e42:	616b      	str	r3, [r5, #20]
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8005e44:	4622      	mov	r2, r4
 8005e46:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005e48:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 8005e4a:	b954      	cbnz	r4, 8005e62 <sx12xx_lora_test_cw+0x6e>
	compiler_barrier();
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4623      	mov	r3, r4
	return z_impl_k_poll(events, num_events, timeout);
 8005e50:	2101      	movs	r1, #1
 8005e52:	a805      	add	r0, sp, #20
 8005e54:	f009 f93e 	bl	800f0d4 <z_impl_k_poll>
    if (ret < 0) {
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	db0f      	blt.n	8005e7c <sx12xx_lora_test_cw+0x88>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 8005e5c:	2000      	movs	r0, #0
}
 8005e5e:	b00b      	add	sp, #44	; 0x2c
 8005e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 8005e62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e66:	fb02 f404 	mul.w	r4, r2, r4
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	fb84 2302 	smull	r2, r3, r4, r2
 8005e70:	2101      	movs	r1, #1
 8005e72:	a805      	add	r0, sp, #20
 8005e74:	f009 f92e 	bl	800f0d4 <z_impl_k_poll>
    if (ret < 0) {
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	daef      	bge.n	8005e5c <sx12xx_lora_test_cw+0x68>
 8005e7c:	f3bf 8f5b 	dmb	ish
 8005e80:	2302      	movs	r3, #2
 8005e82:	e857 2f00 	ldrex	r2, [r7]
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	d103      	bne.n	8005e92 <sx12xx_lora_test_cw+0x9e>
 8005e8a:	e847 3100 	strex	r1, r3, [r7]
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	d1f7      	bne.n	8005e82 <sx12xx_lora_test_cw+0x8e>
 8005e92:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005e96:	d111      	bne.n	8005ebc <sx12xx_lora_test_cw+0xc8>
	Radio.Sleep();
 8005e98:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005e9a:	4798      	blx	r3
	data->operation_done = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005ea0:	f3bf 8f5b 	dmb	ish
 8005ea4:	e857 2f00 	ldrex	r2, [r7]
 8005ea8:	e847 3100 	strex	r1, r3, [r7]
 8005eac:	2900      	cmp	r1, #0
 8005eae:	d1f9      	bne.n	8005ea4 <sx12xx_lora_test_cw+0xb0>
 8005eb0:	f3bf 8f5b 	dmb	ish
        dev_data.events.TxTimeout = NULL;
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	6168      	str	r0, [r5, #20]
}
 8005eb8:	b00b      	add	sp, #44	; 0x2c
 8005eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	a805      	add	r0, sp, #20
 8005ec8:	f009 f904 	bl	800f0d4 <z_impl_k_poll>
 8005ecc:	e7f2      	b.n	8005eb4 <sx12xx_lora_test_cw+0xc0>
		return -EBUSY;
 8005ece:	f06f 000f 	mvn.w	r0, #15
 8005ed2:	e7c4      	b.n	8005e5e <sx12xx_lora_test_cw+0x6a>
 8005ed4:	20000fd0 	.word	0x20000fd0
 8005ed8:	08012170 	.word	0x08012170
 8005edc:	08005941 	.word	0x08005941

08005ee0 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8005ee0:	b189      	cbz	r1, 8005f06 <sx12xx_lora_time_on_air+0x26>
{
 8005ee2:	b530      	push	{r4, r5, lr}
 8005ee4:	b085      	sub	sp, #20
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8005ee6:	7acd      	ldrb	r5, [r1, #11]
 8005ee8:	890b      	ldrh	r3, [r1, #8]
 8005eea:	4c08      	ldr	r4, [pc, #32]	; (8005f0c <sx12xx_lora_time_on_air+0x2c>)
 8005eec:	9501      	str	r5, [sp, #4]
 8005eee:	2001      	movs	r0, #1
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	9202      	str	r2, [sp, #8]
 8005ef4:	9003      	str	r0, [sp, #12]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	798b      	ldrb	r3, [r1, #6]
 8005efa:	794a      	ldrb	r2, [r1, #5]
 8005efc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8005efe:	7909      	ldrb	r1, [r1, #4]
 8005f00:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 8005f02:	b005      	add	sp, #20
 8005f04:	bd30      	pop	{r4, r5, pc}
        return -EINVAL;
 8005f06:	f06f 0015 	mvn.w	r0, #21
}
 8005f0a:	4770      	bx	lr
 8005f0c:	08012170 	.word	0x08012170

08005f10 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d03e      	beq.n	8005f92 <sx12xx_lora_is_channel_free+0x82>
{
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005f16:	4e20      	ldr	r6, [pc, #128]	; (8005f98 <sx12xx_lora_is_channel_free+0x88>)
 8005f18:	f3bf 8f5b 	dmb	ish
 8005f1c:	f106 0444 	add.w	r4, r6, #68	; 0x44
 8005f20:	2001      	movs	r0, #1
 8005f22:	e854 5f00 	ldrex	r5, [r4]
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d103      	bne.n	8005f32 <sx12xx_lora_is_channel_free+0x22>
 8005f2a:	e844 0700 	strex	r7, r0, [r4]
 8005f2e:	2f00      	cmp	r7, #0
 8005f30:	d1f7      	bne.n	8005f22 <sx12xx_lora_is_channel_free+0x12>
 8005f32:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 8005f36:	d129      	bne.n	8005f8c <sx12xx_lora_is_channel_free+0x7c>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 8005f38:	790d      	ldrb	r5, [r1, #4]
 8005f3a:	6808      	ldr	r0, [r1, #0]
 8005f3c:	4f17      	ldr	r7, [pc, #92]	; (8005f9c <sx12xx_lora_is_channel_free+0x8c>)
 8005f3e:	4918      	ldr	r1, [pc, #96]	; (8005fa0 <sx12xx_lora_is_channel_free+0x90>)
 8005f40:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005f44:	693d      	ldr	r5, [r7, #16]
 8005f46:	47a8      	blx	r5
 8005f48:	f3bf 8f5b 	dmb	ish
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e854 2f00 	ldrex	r2, [r4]
 8005f54:	2a01      	cmp	r2, #1
 8005f56:	d103      	bne.n	8005f60 <sx12xx_lora_is_channel_free+0x50>
 8005f58:	e844 3100 	strex	r1, r3, [r4]
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d1f7      	bne.n	8005f50 <sx12xx_lora_is_channel_free+0x40>
 8005f60:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005f64:	d10f      	bne.n	8005f86 <sx12xx_lora_is_channel_free+0x76>
	Radio.Sleep();
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	4798      	blx	r3
	data->operation_done = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6073      	str	r3, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005f6e:	f3bf 8f5b 	dmb	ish
 8005f72:	e854 2f00 	ldrex	r2, [r4]
 8005f76:	e844 3100 	strex	r1, r3, [r4]
 8005f7a:	2900      	cmp	r1, #0
 8005f7c:	d1f9      	bne.n	8005f72 <sx12xx_lora_is_channel_free+0x62>
 8005f7e:	f3bf 8f5b 	dmb	ish
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 8005f82:	4628      	mov	r0, r5
}
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 8005f86:	f06f 0015 	mvn.w	r0, #21
}
 8005f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EBUSY;
 8005f8c:	f06f 000f 	mvn.w	r0, #15
}
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 8005f92:	f06f 0015 	mvn.w	r0, #21
}
 8005f96:	4770      	bx	lr
 8005f98:	20000fd0 	.word	0x20000fd0
 8005f9c:	08012170 	.word	0x08012170
 8005fa0:	0801215c 	.word	0x0801215c

08005fa4 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <sx12xx_init+0x40>)
 8005fa8:	f3bf 8f5b 	dmb	ish
 8005fac:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8005fb0:	2400      	movs	r4, #0
 8005fb2:	e852 1f00 	ldrex	r1, [r2]
 8005fb6:	e842 4500 	strex	r5, r4, [r2]
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	d1f9      	bne.n	8005fb2 <sx12xx_init+0xe>
 8005fbe:	f3bf 8f5b 	dmb	ish
	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
	Radio.Init(&dev_data.events);
 8005fc2:	4d09      	ldr	r5, [pc, #36]	; (8005fe8 <sx12xx_init+0x44>)
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 8005fc4:	4a09      	ldr	r2, [pc, #36]	; (8005fec <sx12xx_init+0x48>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8005fc6:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <sx12xx_init+0x4c>)
 8005fc8:	6119      	str	r1, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8005fca:	490a      	ldr	r1, [pc, #40]	; (8005ff4 <sx12xx_init+0x50>)
 8005fcc:	6199      	str	r1, [r3, #24]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 8005fce:	e9c3 2207 	strd	r2, r2, [r3, #28]
	dev_data.dev = dev;
 8005fd2:	6018      	str	r0, [r3, #0]
	Radio.Init(&dev_data.events);
 8005fd4:	682a      	ldr	r2, [r5, #0]
 8005fd6:	f103 0010 	add.w	r0, r3, #16
 8005fda:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8005fdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005fde:	4798      	blx	r3

	return 0;
}
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20000fd0 	.word	0x20000fd0
 8005fe8:	08012170 	.word	0x08012170
 8005fec:	08005815 	.word	0x08005815
 8005ff0:	080058e5 	.word	0x080058e5
 8005ff4:	08005839 	.word	0x08005839

08005ff8 <SX1276CheckRfFrequency>:

bool SX127xCheckRfFrequency(uint32_t frequency)
{
	/* TODO */
	return true;
}
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	4770      	bx	lr

08005ffc <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <sx127x_dio_work_handle+0x10>)

	(*DioIrq[dio])(NULL);
 8005ffe:	4a04      	ldr	r2, [pc, #16]	; (8006010 <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
 8006000:	1ac3      	subs	r3, r0, r3
 8006002:	111b      	asrs	r3, r3, #4
	(*DioIrq[dio])(NULL);
 8006004:	2000      	movs	r0, #0
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	4718      	bx	r3
 800600c:	2000107c 	.word	0x2000107c
 8006010:	20000274 	.word	0x20000274

08006014 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	4c10      	ldr	r4, [pc, #64]	; (800605c <sx127x_irq_callback+0x48>)
 800601a:	4e11      	ldr	r6, [pc, #68]	; (8006060 <sx127x_irq_callback+0x4c>)
 800601c:	2a00      	cmp	r2, #0
 800601e:	f104 0510 	add.w	r5, r4, #16
 8006022:	fa92 f7a2 	rbit	r7, r2
 8006026:	fab7 f787 	clz	r7, r7
 800602a:	4680      	mov	r8, r0
 800602c:	bf08      	it	eq
 800602e:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8006032:	46a9      	mov	r9, r5
		if (dev == dev_data.dio_dev[i] &&
 8006034:	f854 3b04 	ldr.w	r3, [r4], #4
 8006038:	4543      	cmp	r3, r8
 800603a:	d007      	beq.n	800604c <sx127x_irq_callback+0x38>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800603c:	454c      	cmp	r4, r9
 800603e:	f105 0510 	add.w	r5, r5, #16
 8006042:	f106 0608 	add.w	r6, r6, #8
 8006046:	d1f5      	bne.n	8006034 <sx127x_irq_callback+0x20>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
 8006048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    pin == sx127x_dios[i].pin) {
 800604c:	7933      	ldrb	r3, [r6, #4]
		if (dev == dev_data.dio_dev[i] &&
 800604e:	42bb      	cmp	r3, r7
 8006050:	d1f4      	bne.n	800603c <sx127x_irq_callback+0x28>
			k_work_submit(&dev_data.dio_work[i]);
 8006052:	4628      	mov	r0, r5
 8006054:	f007 fd5e 	bl	800db14 <k_work_submit>
 8006058:	e7f0      	b.n	800603c <sx127x_irq_callback+0x28>
 800605a:	bf00      	nop
 800605c:	2000106c 	.word	0x2000106c
 8006060:	080121dc 	.word	0x080121dc

08006064 <SX1276WriteBuffer>:
{
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
}

void SX127xWriteBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8006064:	b530      	push	{r4, r5, lr}
 8006066:	b089      	sub	sp, #36	; 0x24
	const struct spi_buf buf[2] = {
 8006068:	f10d 0507 	add.w	r5, sp, #7
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 800606c:	4c0b      	ldr	r4, [pc, #44]	; (800609c <SX1276WriteBuffer+0x38>)
	const struct spi_buf buf[2] = {
 800606e:	2301      	movs	r3, #1
 8006070:	e9cd 5304 	strd	r5, r3, [sp, #16]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8006074:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
 8006078:	ad04      	add	r5, sp, #16
 800607a:	2302      	movs	r3, #2
 800607c:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8006080:	e9cd 1206 	strd	r1, r2, [sp, #24]
	struct spi_buf_set tx = {
 8006084:	e9cd 5302 	strd	r5, r3, [sp, #8]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8006088:	6860      	ldr	r0, [r4, #4]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800608a:	6882      	ldr	r2, [r0, #8]
 800608c:	2300      	movs	r3, #0
 800608e:	6815      	ldr	r5, [r2, #0]
 8006090:	f104 0108 	add.w	r1, r4, #8
 8006094:	aa02      	add	r2, sp, #8
 8006096:	47a8      	blx	r5

	ret = sx127x_write(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}
 8006098:	b009      	add	sp, #36	; 0x24
 800609a:	bd30      	pop	{r4, r5, pc}
 800609c:	20001058 	.word	0x20001058

080060a0 <SX1276ReadBuffer>:

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 80060a0:	b530      	push	{r4, r5, lr}
 80060a2:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_buf buf[2] = {
 80060a4:	f10d 0307 	add.w	r3, sp, #7
	struct spi_buf_set tx = {
 80060a8:	ad06      	add	r5, sp, #24
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80060aa:	4c0b      	ldr	r4, [pc, #44]	; (80060d8 <SX1276ReadBuffer+0x38>)
	const struct spi_buf buf[2] = {
 80060ac:	9306      	str	r3, [sp, #24]
	struct spi_buf_set tx = {
 80060ae:	2302      	movs	r3, #2
 80060b0:	e9cd 5302 	strd	r5, r3, [sp, #8]
		const struct spi_buf_set rx = {
 80060b4:	e9cd 5304 	strd	r5, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 80060b8:	2301      	movs	r3, #1
	int ret;

	ret = sx127x_read(addr, buffer, size);
 80060ba:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 80060be:	9108      	str	r1, [sp, #32]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80060c0:	6860      	ldr	r0, [r4, #4]
	return sx127x_transceive(reg_addr, false, data, len);
 80060c2:	9209      	str	r2, [sp, #36]	; 0x24
	const struct spi_buf buf[2] = {
 80060c4:	9307      	str	r3, [sp, #28]
 80060c6:	6882      	ldr	r2, [r0, #8]
 80060c8:	ab04      	add	r3, sp, #16
 80060ca:	6815      	ldr	r5, [r2, #0]
 80060cc:	f104 0108 	add.w	r1, r4, #8
 80060d0:	aa02      	add	r2, sp, #8
 80060d2:	47a8      	blx	r5
	if (ret < 0) {
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 80060d4:	b00b      	add	sp, #44	; 0x2c
 80060d6:	bd30      	pop	{r4, r5, pc}
 80060d8:	20001058 	.word	0x20001058

080060dc <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 80060dc:	b530      	push	{r4, r5, lr}
 80060de:	4605      	mov	r5, r0
 80060e0:	b08b      	sub	sp, #44	; 0x2c
 80060e2:	482f      	ldr	r0, [pc, #188]	; (80061a0 <sx127x_lora_init+0xc4>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 80060e4:	4c2f      	ldr	r4, [pc, #188]	; (80061a4 <sx127x_lora_init+0xc8>)
 80060e6:	f006 ff65 	bl	800cfb4 <z_impl_device_get_binding>
 80060ea:	6060      	str	r0, [r4, #4]
	if (!dev_data.spi) {
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d054      	beq.n	800619a <sx127x_lora_init+0xbe>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <sx127x_lora_init+0xcc>)
 80060f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80060fa:	482c      	ldr	r0, [pc, #176]	; (80061ac <sx127x_lora_init+0xd0>)
 80060fc:	f006 ff5a 	bl	800cfb4 <z_impl_device_get_binding>
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8006100:	492b      	ldr	r1, [pc, #172]	; (80061b0 <sx127x_lora_init+0xd4>)
 8006102:	6008      	str	r0, [r1, #0]
	if (!spi_cs.gpio_dev) {
 8006104:	2800      	cmp	r0, #0
 8006106:	d045      	beq.n	8006194 <sx127x_lora_init+0xb8>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8006108:	f44f 7383 	mov.w	r3, #262	; 0x106
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
	spi_cs.delay = 0U;
 800610c:	2200      	movs	r2, #0
	spi_cs.gpio_pin = GPIO_CS_PIN;
 800610e:	808b      	strh	r3, [r1, #4]
	spi_cs.delay = 0U;
 8006110:	608a      	str	r2, [r1, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8006112:	6121      	str	r1, [r4, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8006114:	f641 2307 	movw	r3, #6663	; 0x1a07
 8006118:	4924      	ldr	r1, [pc, #144]	; (80061ac <sx127x_lora_init+0xd0>)
 800611a:	4620      	mov	r0, r4
 800611c:	f7ff fc40 	bl	80059a0 <__sx12xx_configure_pin>
	if (ret) {
 8006120:	b108      	cbz	r0, 8006126 <sx127x_lora_init+0x4a>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8006122:	b00b      	add	sp, #44	; 0x2c
 8006124:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sleep(timeout);
 8006126:	2100      	movs	r1, #0
 8006128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800612c:	f008 f9d6 	bl	800e4dc <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8006130:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006132:	6903      	ldr	r3, [r0, #16]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	07db      	lsls	r3, r3, #31
	return api->port_clear_bits_raw(port, pins);
 8006138:	6883      	ldr	r3, [r0, #8]
 800613a:	f04f 0101 	mov.w	r1, #1
 800613e:	bf54      	ite	pl
 8006140:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8006142:	68db      	ldrmi	r3, [r3, #12]
 8006144:	4798      	blx	r3
 8006146:	2100      	movs	r1, #0
 8006148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800614c:	f008 f9c6 	bl	800e4dc <z_impl_k_sleep>
	struct spi_buf_set tx = {
 8006150:	aa06      	add	r2, sp, #24
 8006152:	2302      	movs	r3, #2
 8006154:	e9cd 2302 	strd	r2, r3, [sp, #8]
		const struct spi_buf_set rx = {
 8006158:	e9cd 2304 	strd	r2, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 800615c:	2101      	movs	r1, #1
 800615e:	2042      	movs	r0, #66	; 0x42
 8006160:	f10d 0207 	add.w	r2, sp, #7
 8006164:	f10d 0306 	add.w	r3, sp, #6
 8006168:	f88d 0007 	strb.w	r0, [sp, #7]
 800616c:	9107      	str	r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 800616e:	6860      	ldr	r0, [r4, #4]
	const struct spi_buf buf[2] = {
 8006170:	9109      	str	r1, [sp, #36]	; 0x24
 8006172:	9206      	str	r2, [sp, #24]
 8006174:	9308      	str	r3, [sp, #32]
 8006176:	6882      	ldr	r2, [r0, #8]
 8006178:	490e      	ldr	r1, [pc, #56]	; (80061b4 <sx127x_lora_init+0xd8>)
 800617a:	6814      	ldr	r4, [r2, #0]
 800617c:	ab04      	add	r3, sp, #16
 800617e:	aa02      	add	r2, sp, #8
 8006180:	47a0      	blx	r4
	if (ret < 0) {
 8006182:	2800      	cmp	r0, #0
 8006184:	db06      	blt.n	8006194 <sx127x_lora_init+0xb8>
	ret = sx12xx_init(dev);
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff ff0c 	bl	8005fa4 <sx12xx_init>
	if (ret < 0) {
 800618c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 8006190:	b00b      	add	sp, #44	; 0x2c
 8006192:	bd30      	pop	{r4, r5, pc}
		return -EIO;
 8006194:	f06f 0004 	mvn.w	r0, #4
 8006198:	e7c3      	b.n	8006122 <sx127x_lora_init+0x46>
		return -EINVAL;
 800619a:	f06f 0015 	mvn.w	r0, #21
 800619e:	e7c0      	b.n	8006122 <sx127x_lora_init+0x46>
 80061a0:	080120cc 	.word	0x080120cc
 80061a4:	20001058 	.word	0x20001058
 80061a8:	000f4240 	.word	0x000f4240
 80061ac:	08011fa4 	.word	0x08011fa4
 80061b0:	200010bc 	.word	0x200010bc
 80061b4:	20001060 	.word	0x20001060

080061b8 <SX1276GetBoardTcxoWakeupTime>:
}
 80061b8:	2000      	movs	r0, #0
 80061ba:	4770      	bx	lr

080061bc <SX1276SetAntSwLowPower>:
}
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop

080061c0 <SX1276SetBoardTcxo>:
}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop

080061c4 <SX1276SetAntSw>:
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop

080061c8 <SX1276Reset>:
{
 80061c8:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 80061ca:	4c10      	ldr	r4, [pc, #64]	; (800620c <SX1276Reset+0x44>)
 80061cc:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80061ce:	6903      	ldr	r3, [r0, #16]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	07da      	lsls	r2, r3, #31
	return api->port_set_bits_raw(port, pins);
 80061d4:	6883      	ldr	r3, [r0, #8]
 80061d6:	f04f 0101 	mov.w	r1, #1
 80061da:	bf54      	ite	pl
 80061dc:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80061de:	691b      	ldrmi	r3, [r3, #16]
 80061e0:	4798      	blx	r3
 80061e2:	2100      	movs	r1, #0
 80061e4:	200a      	movs	r0, #10
 80061e6:	f008 f979 	bl	800e4dc <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 80061ea:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80061ec:	6903      	ldr	r3, [r0, #16]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	07db      	lsls	r3, r3, #31
	return api->port_set_bits_raw(port, pins);
 80061f2:	6883      	ldr	r3, [r0, #8]
 80061f4:	f04f 0101 	mov.w	r1, #1
 80061f8:	bf4c      	ite	mi
 80061fa:	68db      	ldrmi	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80061fc:	691b      	ldrpl	r3, [r3, #16]
 80061fe:	4798      	blx	r3
 8006200:	203c      	movs	r0, #60	; 0x3c
}
 8006202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006206:	2100      	movs	r1, #0
 8006208:	f008 b968 	b.w	800e4dc <z_impl_k_sleep>
 800620c:	20001058 	.word	0x20001058

08006210 <SX1276IoIrqInit>:
{
 8006210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	4c31      	ldr	r4, [pc, #196]	; (80062dc <SX1276IoIrqInit+0xcc>)
 8006216:	4e32      	ldr	r6, [pc, #200]	; (80062e0 <SX1276IoIrqInit+0xd0>)
 8006218:	4d32      	ldr	r5, [pc, #200]	; (80062e4 <SX1276IoIrqInit+0xd4>)
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 800621a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80062e8 <SX1276IoIrqInit+0xd8>
 800621e:	f104 0810 	add.w	r8, r4, #16
 8006222:	f1a0 0904 	sub.w	r9, r0, #4
		if (!irqHandlers[i]) {
 8006226:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800622a:	2b00      	cmp	r3, #0
 800622c:	d041      	beq.n	80062b2 <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 800622e:	6828      	ldr	r0, [r5, #0]
 8006230:	f006 fec0 	bl	800cfb4 <z_impl_device_get_binding>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8006234:	4651      	mov	r1, sl
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8006236:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
 8006238:	2800      	cmp	r0, #0
 800623a:	d044      	beq.n	80062c6 <SX1276IoIrqInit+0xb6>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 800623c:	4640      	mov	r0, r8
 800623e:	f007 fc3f 	bl	800dac0 <k_work_init>
				   | sx127x_dios[i].flags);
 8006242:	f895 e005 	ldrb.w	lr, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	7929      	ldrb	r1, [r5, #4]
 800624a:	f44e 2b00 	orr.w	fp, lr, #524288	; 0x80000
 800624e:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006252:	2301      	movs	r3, #1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006254:	f01e 0f01 	tst.w	lr, #1
	struct gpio_driver_data *data =
 8006258:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 800625c:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800625e:	fa03 f301 	lsl.w	r3, r3, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006262:	d032      	beq.n	80062ca <SX1276IoIrqInit+0xba>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006264:	f8dc 2000 	ldr.w	r2, [ip]
 8006268:	4313      	orrs	r3, r2
	return api->pin_configure(port, pin, flags);
 800626a:	465a      	mov	r2, fp
 800626c:	f8cc 3000 	str.w	r3, [ip]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8006274:	6820      	ldr	r0, [r4, #0]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <SX1276IoIrqInit+0xdc>)
 8006278:	6073      	str	r3, [r6, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 800627a:	6883      	ldr	r3, [r0, #8]
				   BIT(sx127x_dios[i].pin));
 800627c:	f895 b004 	ldrb.w	fp, [r5, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	2201      	movs	r2, #1
 8006284:	fa02 f70b 	lsl.w	r7, r2, fp
	callback->pin_mask = pin_mask;
 8006288:	60b7      	str	r7, [r6, #8]
	if (api->manage_callback == NULL) {
 800628a:	b1e3      	cbz	r3, 80062c6 <SX1276IoIrqInit+0xb6>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800628c:	4631      	mov	r1, r6
 800628e:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8006290:	2800      	cmp	r0, #0
 8006292:	db18      	blt.n	80062c6 <SX1276IoIrqInit+0xb6>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8006294:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8006296:	6903      	ldr	r3, [r0, #16]
 8006298:	681b      	ldr	r3, [r3, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800629a:	421f      	tst	r7, r3
	const struct gpio_driver_api *api =
 800629c:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800629e:	4659      	mov	r1, fp
 80062a0:	699f      	ldr	r7, [r3, #24]
 80062a2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 80062a6:	bf0c      	ite	eq
 80062a8:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 80062ac:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80062b0:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <SX1276IoIrqInit+0xe0>)
 80062b4:	3404      	adds	r4, #4
 80062b6:	429c      	cmp	r4, r3
 80062b8:	f106 060c 	add.w	r6, r6, #12
 80062bc:	f105 0508 	add.w	r5, r5, #8
 80062c0:	f108 0810 	add.w	r8, r8, #16
 80062c4:	d1af      	bne.n	8006226 <SX1276IoIrqInit+0x16>
}
 80062c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80062ca:	f8dc 3000 	ldr.w	r3, [ip]
 80062ce:	f04f 0e01 	mov.w	lr, #1
 80062d2:	fa0e fe01 	lsl.w	lr, lr, r1
 80062d6:	ea23 030e 	bic.w	r3, r3, lr
 80062da:	e7c6      	b.n	800626a <SX1276IoIrqInit+0x5a>
 80062dc:	2000106c 	.word	0x2000106c
 80062e0:	20001028 	.word	0x20001028
 80062e4:	080121dc 	.word	0x080121dc
 80062e8:	08005ffd 	.word	0x08005ffd
 80062ec:	08006015 	.word	0x08006015
 80062f0:	2000107c 	.word	0x2000107c

080062f4 <SX1276SetRfTxPower>:
{
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	b08a      	sub	sp, #40	; 0x28
	struct spi_buf_set tx = {
 80062fa:	2302      	movs	r3, #2
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80062fc:	4e39      	ldr	r6, [pc, #228]	; (80063e4 <SX1276SetRfTxPower+0xf0>)
	struct spi_buf_set tx = {
 80062fe:	9303      	str	r3, [sp, #12]
		const struct spi_buf_set rx = {
 8006300:	9305      	str	r3, [sp, #20]
	const struct spi_buf buf[2] = {
 8006302:	f10d 0307 	add.w	r3, sp, #7
	uint8_t pa_config = 0;
 8006306:	2100      	movs	r1, #0
	const struct spi_buf buf[2] = {
 8006308:	2201      	movs	r2, #1
	struct spi_buf_set tx = {
 800630a:	ad06      	add	r5, sp, #24
 800630c:	244d      	movs	r4, #77	; 0x4d
	const struct spi_buf buf[2] = {
 800630e:	9306      	str	r3, [sp, #24]
 8006310:	f10d 0306 	add.w	r3, sp, #6
 8006314:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t pa_config = 0;
 8006318:	f88d 1005 	strb.w	r1, [sp, #5]
{
 800631c:	4604      	mov	r4, r0
	uint8_t pa_dac = 0;
 800631e:	f88d 1006 	strb.w	r1, [sp, #6]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8006322:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 8006324:	9207      	str	r2, [sp, #28]
 8006326:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
 8006328:	9502      	str	r5, [sp, #8]
		const struct spi_buf_set rx = {
 800632a:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 800632c:	9308      	str	r3, [sp, #32]
 800632e:	6883      	ldr	r3, [r0, #8]
 8006330:	aa02      	add	r2, sp, #8
 8006332:	681f      	ldr	r7, [r3, #0]
 8006334:	f106 0108 	add.w	r1, r6, #8
 8006338:	ab04      	add	r3, sp, #16
 800633a:	47b8      	blx	r7
	if (ret < 0) {
 800633c:	2800      	cmp	r0, #0
 800633e:	db44      	blt.n	80063ca <SX1276SetRfTxPower+0xd6>
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8006340:	2c14      	cmp	r4, #20
 8006342:	4623      	mov	r3, r4
 8006344:	bfa8      	it	ge
 8006346:	2314      	movge	r3, #20
 8006348:	2b02      	cmp	r3, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 800634a:	f89d 2006 	ldrb.w	r2, [sp, #6]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 800634e:	f99d 1005 	ldrsb.w	r1, [sp, #5]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8006352:	bfb8      	it	lt
 8006354:	2302      	movlt	r3, #2
		if (power > 17) {
 8006356:	2c11      	cmp	r4, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8006358:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800635c:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8006360:	b2db      	uxtb	r3, r3
		if (power > 17) {
 8006362:	dc35      	bgt.n	80063d0 <SX1276SetRfTxPower+0xdc>
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8006364:	3b02      	subs	r3, #2
 8006366:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8006368:	f042 0204 	orr.w	r2, r2, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800636c:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8006370:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf buf[2] = {
 8006374:	ab02      	add	r3, sp, #8
 8006376:	9306      	str	r3, [sp, #24]
 8006378:	2389      	movs	r3, #137	; 0x89
 800637a:	2401      	movs	r4, #1
 800637c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct spi_buf_set tx = {
 8006380:	2702      	movs	r7, #2
	const struct spi_buf buf[2] = {
 8006382:	f10d 0305 	add.w	r3, sp, #5
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8006386:	6870      	ldr	r0, [r6, #4]
	struct spi_buf_set tx = {
 8006388:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 800638a:	9407      	str	r4, [sp, #28]
 800638c:	9409      	str	r4, [sp, #36]	; 0x24
 800638e:	9308      	str	r3, [sp, #32]
	struct spi_buf_set tx = {
 8006390:	9705      	str	r7, [sp, #20]
 8006392:	6883      	ldr	r3, [r0, #8]
 8006394:	4914      	ldr	r1, [pc, #80]	; (80063e8 <SX1276SetRfTxPower+0xf4>)
 8006396:	f8d3 8000 	ldr.w	r8, [r3]
 800639a:	aa04      	add	r2, sp, #16
 800639c:	2300      	movs	r3, #0
 800639e:	47c0      	blx	r8
	if (ret < 0) {
 80063a0:	2800      	cmp	r0, #0
 80063a2:	db12      	blt.n	80063ca <SX1276SetRfTxPower+0xd6>
	const struct spi_buf buf[2] = {
 80063a4:	ab02      	add	r3, sp, #8
 80063a6:	9306      	str	r3, [sp, #24]
 80063a8:	f10d 0306 	add.w	r3, sp, #6
 80063ac:	9308      	str	r3, [sp, #32]
 80063ae:	23cd      	movs	r3, #205	; 0xcd
	struct spi_buf_set tx = {
 80063b0:	e9cd 5704 	strd	r5, r7, [sp, #16]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 80063b4:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 80063b6:	9407      	str	r4, [sp, #28]
 80063b8:	9409      	str	r4, [sp, #36]	; 0x24
 80063ba:	f88d 3008 	strb.w	r3, [sp, #8]
 80063be:	6883      	ldr	r3, [r0, #8]
 80063c0:	4909      	ldr	r1, [pc, #36]	; (80063e8 <SX1276SetRfTxPower+0xf4>)
 80063c2:	681c      	ldr	r4, [r3, #0]
 80063c4:	aa04      	add	r2, sp, #16
 80063c6:	2300      	movs	r3, #0
 80063c8:	47a0      	blx	r4
}
 80063ca:	b00a      	add	sp, #40	; 0x28
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 80063d0:	3b05      	subs	r3, #5
 80063d2:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_ON;
 80063d4:	f042 0207 	orr.w	r2, r2, #7
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 80063d8:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_ON;
 80063dc:	f88d 2006 	strb.w	r2, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 80063e0:	e7c8      	b.n	8006374 <SX1276SetRfTxPower+0x80>
 80063e2:	bf00      	nop
 80063e4:	20001058 	.word	0x20001058
 80063e8:	20001060 	.word	0x20001060

080063ec <SX1276GetDio1PinState>:
{
 80063ec:	b510      	push	{r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <SX1276GetDio1PinState+0x30>)
 80063f0:	6998      	ldr	r0, [r3, #24]
{
 80063f2:	b082      	sub	sp, #8
	const struct gpio_driver_data *const data =
 80063f4:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
 80063f6:	6883      	ldr	r3, [r0, #8]
 80063f8:	a901      	add	r1, sp, #4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4798      	blx	r3
	if (ret == 0) {
 80063fe:	2800      	cmp	r0, #0
 8006400:	d004      	beq.n	800640c <SX1276GetDio1PinState+0x20>
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8006402:	bfcc      	ite	gt
 8006404:	2001      	movgt	r0, #1
 8006406:	2000      	movle	r0, #0
}
 8006408:	b002      	add	sp, #8
 800640a:	bd10      	pop	{r4, pc}
		*value ^= data->invert;
 800640c:	9801      	ldr	r0, [sp, #4]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8006412:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8006416:	b002      	add	sp, #8
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	20001058 	.word	0x20001058

08006420 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8006420:	b13a      	cbz	r2, 8006432 <memcpy1+0x12>
 8006422:	3801      	subs	r0, #1
 8006424:	440a      	add	r2, r1
    {
        *dst++ = *src++;
 8006426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800642a:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 800642e:	4291      	cmp	r1, r2
 8006430:	d1f9      	bne.n	8006426 <memcpy1+0x6>
    }
}
 8006432:	4770      	bx	lr

08006434 <TimerInit>:
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
    obj->Timestamp = 0;
 8006434:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8006436:	e9c0 3300 	strd	r3, r3, [r0]
    obj->IsStarted = false;
    obj->IsNext2Expire = false;
    obj->Callback = callback;
    obj->Context = NULL;
 800643a:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 800643e:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 8006440:	6143      	str	r3, [r0, #20]
}
 8006442:	4770      	bx	lr

08006444 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8006444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006446:	b083      	sub	sp, #12
 8006448:	4605      	mov	r5, r0
    uint32_t elapsedTime = 0;

    CRITICAL_SECTION_BEGIN( );
 800644a:	a801      	add	r0, sp, #4
 800644c:	f7ff f9d2 	bl	80057f4 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006450:	b13d      	cbz	r5, 8006462 <TimerStart+0x1e>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006452:	4e32      	ldr	r6, [pc, #200]	; (800651c <TimerStart+0xd8>)
 8006454:	6834      	ldr	r4, [r6, #0]

    while( cur != NULL )
 8006456:	b914      	cbnz	r4, 800645e <TimerStart+0x1a>
 8006458:	e044      	b.n	80064e4 <TimerStart+0xa0>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 800645a:	6964      	ldr	r4, [r4, #20]
    while( cur != NULL )
 800645c:	b134      	cbz	r4, 800646c <TimerStart+0x28>
        if( cur == obj )
 800645e:	42a5      	cmp	r5, r4
 8006460:	d1fb      	bne.n	800645a <TimerStart+0x16>
        CRITICAL_SECTION_END( );
 8006462:	a801      	add	r0, sp, #4
 8006464:	f7ff f9d0 	bl	8005808 <BoardCriticalSectionEnd>
}
 8006468:	b003      	add	sp, #12
 800646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 800646c:	686b      	ldr	r3, [r5, #4]
 800646e:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 8006470:	2701      	movs	r7, #1
 8006472:	812f      	strh	r7, [r5, #8]
        elapsedTime = RtcGetTimerElapsedTime( );
 8006474:	f7ff f97c 	bl	8005770 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8006478:	682b      	ldr	r3, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800647a:	6831      	ldr	r1, [r6, #0]
        obj->Timestamp += elapsedTime;
 800647c:	4418      	add	r0, r3
 800647e:	6028      	str	r0, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8006480:	680b      	ldr	r3, [r1, #0]
 8006482:	4298      	cmp	r0, r3
 8006484:	d214      	bcs.n	80064b0 <TimerStart+0x6c>
        cur->IsNext2Expire = false;
 8006486:	724c      	strb	r4, [r1, #9]
    obj->Next = cur;
 8006488:	6169      	str	r1, [r5, #20]
    TimerListHead = obj;
 800648a:	6035      	str	r5, [r6, #0]
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    int32_t minTicks= RtcGetMinimumTimeout( );
 800648c:	f7ff f97e 	bl	800578c <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8006490:	726f      	strb	r7, [r5, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006492:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006494:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006496:	f7ff f96b 	bl	8005770 <RtcGetTimerElapsedTime>
 800649a:	4420      	add	r0, r4
 800649c:	4286      	cmp	r6, r0
 800649e:	d337      	bcc.n	8006510 <TimerStart+0xcc>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 80064a0:	6828      	ldr	r0, [r5, #0]
 80064a2:	f7ff f97b 	bl	800579c <RtcSetAlarm>
        CRITICAL_SECTION_END( );
 80064a6:	a801      	add	r0, sp, #4
 80064a8:	f7ff f9ae 	bl	8005808 <BoardCriticalSectionEnd>
}
 80064ac:	b003      	add	sp, #12
 80064ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TimerEvent_t* next = TimerListHead->Next;
 80064b0:	694b      	ldr	r3, [r1, #20]
    while( cur->Next != NULL )
 80064b2:	b96b      	cbnz	r3, 80064d0 <TimerStart+0x8c>
 80064b4:	460b      	mov	r3, r1
    obj->Next = NULL;
 80064b6:	2200      	movs	r2, #0
    cur->Next = obj;
 80064b8:	615d      	str	r5, [r3, #20]
        CRITICAL_SECTION_END( );
 80064ba:	a801      	add	r0, sp, #4
    obj->Next = NULL;
 80064bc:	616a      	str	r2, [r5, #20]
        CRITICAL_SECTION_END( );
 80064be:	f7ff f9a3 	bl	8005808 <BoardCriticalSectionEnd>
}
 80064c2:	b003      	add	sp, #12
 80064c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            next = next->Next;
 80064c6:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 80064c8:	4619      	mov	r1, r3
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d0f3      	beq.n	80064b6 <TimerStart+0x72>
 80064ce:	4613      	mov	r3, r2
        if( obj->Timestamp > next->Timestamp )
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4290      	cmp	r0, r2
 80064d4:	d8f7      	bhi.n	80064c6 <TimerStart+0x82>
            cur->Next = obj;
 80064d6:	614d      	str	r5, [r1, #20]
        CRITICAL_SECTION_END( );
 80064d8:	a801      	add	r0, sp, #4
            obj->Next = next;
 80064da:	616b      	str	r3, [r5, #20]
        CRITICAL_SECTION_END( );
 80064dc:	f7ff f994 	bl	8005808 <BoardCriticalSectionEnd>
}
 80064e0:	b003      	add	sp, #12
 80064e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 80064e4:	686b      	ldr	r3, [r5, #4]
 80064e6:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 80064e8:	2301      	movs	r3, #1
 80064ea:	812b      	strh	r3, [r5, #8]
        RtcSetTimerContext( );
 80064ec:	f7ff f966 	bl	80057bc <RtcSetTimerContext>
    TimerEvent_t* cur = TimerListHead;
 80064f0:	6833      	ldr	r3, [r6, #0]
    if( cur != NULL )
 80064f2:	b103      	cbz	r3, 80064f6 <TimerStart+0xb2>
        cur->IsNext2Expire = false;
 80064f4:	725c      	strb	r4, [r3, #9]
    obj->Next = cur;
 80064f6:	616b      	str	r3, [r5, #20]
    TimerListHead = obj;
 80064f8:	6035      	str	r5, [r6, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 80064fa:	f7ff f947 	bl	800578c <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 80064fe:	2301      	movs	r3, #1
 8006500:	726b      	strb	r3, [r5, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006502:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006504:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006506:	f7ff f933 	bl	8005770 <RtcGetTimerElapsedTime>
 800650a:	4420      	add	r0, r4
 800650c:	4286      	cmp	r6, r0
 800650e:	d2c7      	bcs.n	80064a0 <TimerStart+0x5c>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8006510:	f7ff f92e 	bl	8005770 <RtcGetTimerElapsedTime>
 8006514:	4420      	add	r0, r4
 8006516:	6028      	str	r0, [r5, #0]
 8006518:	e7c3      	b.n	80064a2 <TimerStart+0x5e>
 800651a:	bf00      	nop
 800651c:	200010c8 	.word	0x200010c8

08006520 <TimerIrqHandler>:
{
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 8006522:	f7ff f957 	bl	80057d4 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 8006526:	4c27      	ldr	r4, [pc, #156]	; (80065c4 <TimerIrqHandler+0xa4>)
    uint32_t old =  RtcGetTimerContext( );
 8006528:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 800652a:	f7ff f947 	bl	80057bc <RtcSetTimerContext>
    if( TimerListHead != NULL )
 800652e:	6827      	ldr	r7, [r4, #0]
 8006530:	2f00      	cmp	r7, #0
 8006532:	d02f      	beq.n	8006594 <TimerIrqHandler+0x74>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006534:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8006538:	f1bc 0f00 	cmp.w	ip, #0
 800653c:	d00c      	beq.n	8006558 <TimerIrqHandler+0x38>
    uint32_t deltaContext = now - old; // intentional wrap around
 800653e:	1b46      	subs	r6, r0, r5
 8006540:	4663      	mov	r3, ip
                next->Timestamp -= deltaContext;
 8006542:	1a28      	subs	r0, r5, r0
            if( next->Timestamp > deltaContext )
 8006544:	6819      	ldr	r1, [r3, #0]
 8006546:	42b1      	cmp	r1, r6
                next->Timestamp = 0;
 8006548:	f04f 0200 	mov.w	r2, #0
                next->Timestamp -= deltaContext;
 800654c:	bf88      	it	hi
 800654e:	1842      	addhi	r2, r0, r1
 8006550:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f5      	bne.n	8006544 <TimerIrqHandler+0x24>
        ExecuteCallBack( cur->Callback, cur->Context );
 8006558:	68fb      	ldr	r3, [r7, #12]
        TimerListHead = TimerListHead->Next;
 800655a:	f8c4 c000 	str.w	ip, [r4]
        cur->IsStarted = false;
 800655e:	2600      	movs	r6, #0
 8006560:	723e      	strb	r6, [r7, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006562:	b1cb      	cbz	r3, 8006598 <TimerIrqHandler+0x78>
 8006564:	6938      	ldr	r0, [r7, #16]
 8006566:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	b953      	cbnz	r3, 8006582 <TimerIrqHandler+0x62>
 800656c:	e012      	b.n	8006594 <TimerIrqHandler+0x74>
        cur = TimerListHead;
 800656e:	6823      	ldr	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006570:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	6021      	str	r1, [r4, #0]
        cur->IsStarted = false;
 8006576:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006578:	b16a      	cbz	r2, 8006596 <TimerIrqHandler+0x76>
 800657a:	6918      	ldr	r0, [r3, #16]
 800657c:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	b143      	cbz	r3, 8006594 <TimerIrqHandler+0x74>
 8006582:	681d      	ldr	r5, [r3, #0]
 8006584:	f7ff f8f4 	bl	8005770 <RtcGetTimerElapsedTime>
 8006588:	4285      	cmp	r5, r0
 800658a:	d3f0      	bcc.n	800656e <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800658c:	6824      	ldr	r4, [r4, #0]
 800658e:	b10c      	cbz	r4, 8006594 <TimerIrqHandler+0x74>
 8006590:	7a63      	ldrb	r3, [r4, #9]
 8006592:	b113      	cbz	r3, 800659a <TimerIrqHandler+0x7a>
}
 8006594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 8006596:	e7fe      	b.n	8006596 <TimerIrqHandler+0x76>
        ExecuteCallBack( cur->Callback, cur->Context );
 8006598:	e7fe      	b.n	8006598 <TimerIrqHandler+0x78>
    int32_t minTicks= RtcGetMinimumTimeout( );
 800659a:	f7ff f8f7 	bl	800578c <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800659e:	2301      	movs	r3, #1
 80065a0:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80065a2:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 80065a4:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 80065a6:	f7ff f8e3 	bl	8005770 <RtcGetTimerElapsedTime>
 80065aa:	182b      	adds	r3, r5, r0
 80065ac:	429e      	cmp	r6, r3
 80065ae:	d304      	bcc.n	80065ba <TimerIrqHandler+0x9a>
    RtcSetAlarm( obj->Timestamp );
 80065b0:	6820      	ldr	r0, [r4, #0]
}
 80065b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    RtcSetAlarm( obj->Timestamp );
 80065b6:	f7ff b8f1 	b.w	800579c <RtcSetAlarm>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 80065ba:	f7ff f8d9 	bl	8005770 <RtcGetTimerElapsedTime>
 80065be:	4428      	add	r0, r5
 80065c0:	6020      	str	r0, [r4, #0]
 80065c2:	e7f6      	b.n	80065b2 <TimerIrqHandler+0x92>
 80065c4:	200010c8 	.word	0x200010c8

080065c8 <TimerStop>:
{
 80065c8:	b570      	push	{r4, r5, r6, lr}
    TimerEvent_t* prev = TimerListHead;
 80065ca:	4d22      	ldr	r5, [pc, #136]	; (8006654 <TimerStop+0x8c>)
{
 80065cc:	b082      	sub	sp, #8
 80065ce:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 80065d0:	a801      	add	r0, sp, #4
 80065d2:	f7ff f90f 	bl	80057f4 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 80065d6:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80065d8:	b15b      	cbz	r3, 80065f2 <TimerStop+0x2a>
 80065da:	b154      	cbz	r4, 80065f2 <TimerStop+0x2a>
    obj->IsStarted = false;
 80065dc:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 80065de:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 80065e0:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 80065e2:	d102      	bne.n	80065ea <TimerStop+0x22>
 80065e4:	e011      	b.n	800660a <TimerStop+0x42>
            if( cur == obj )
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d008      	beq.n	80065fc <TimerStop+0x34>
                cur = cur->Next;
 80065ea:	461a      	mov	r2, r3
 80065ec:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f9      	bne.n	80065e6 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 80065f2:	a801      	add	r0, sp, #4
 80065f4:	f7ff f908 	bl	8005808 <BoardCriticalSectionEnd>
}
 80065f8:	b002      	add	sp, #8
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
                if( cur->Next != NULL )
 80065fc:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 80065fe:	6153      	str	r3, [r2, #20]
        CRITICAL_SECTION_END( );
 8006600:	a801      	add	r0, sp, #4
 8006602:	f7ff f901 	bl	8005808 <BoardCriticalSectionEnd>
}
 8006606:	b002      	add	sp, #8
 8006608:	bd70      	pop	{r4, r5, r6, pc}
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800660a:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 800660c:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 800660e:	b189      	cbz	r1, 8006634 <TimerStop+0x6c>
            TimerListHead->IsNext2Expire = false;
 8006610:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006612:	b1ac      	cbz	r4, 8006640 <TimerStop+0x78>
                TimerListHead = TimerListHead->Next;
 8006614:	602c      	str	r4, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006616:	f7ff f8b9 	bl	800578c <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 800661a:	2301      	movs	r3, #1
 800661c:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800661e:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006620:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006622:	f7ff f8a5 	bl	8005770 <RtcGetTimerElapsedTime>
 8006626:	4428      	add	r0, r5
 8006628:	4286      	cmp	r6, r0
 800662a:	d30d      	bcc.n	8006648 <TimerStop+0x80>
    RtcSetAlarm( obj->Timestamp );
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	f7ff f8b5 	bl	800579c <RtcSetAlarm>
}
 8006632:	e7de      	b.n	80065f2 <TimerStop+0x2a>
        CRITICAL_SECTION_END( );
 8006634:	a801      	add	r0, sp, #4
                TimerListHead = NULL;
 8006636:	602c      	str	r4, [r5, #0]
        CRITICAL_SECTION_END( );
 8006638:	f7ff f8e6 	bl	8005808 <BoardCriticalSectionEnd>
}
 800663c:	b002      	add	sp, #8
 800663e:	bd70      	pop	{r4, r5, r6, pc}
                RtcStopAlarm( );
 8006640:	f7ff f8a6 	bl	8005790 <RtcStopAlarm>
                TimerListHead = NULL;
 8006644:	602c      	str	r4, [r5, #0]
 8006646:	e7d4      	b.n	80065f2 <TimerStop+0x2a>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8006648:	f7ff f892 	bl	8005770 <RtcGetTimerElapsedTime>
 800664c:	4428      	add	r0, r5
 800664e:	6020      	str	r0, [r4, #0]
 8006650:	e7ed      	b.n	800662e <TimerStop+0x66>
 8006652:	bf00      	nop
 8006654:	200010c8 	.word	0x200010c8

08006658 <TimerSetValue>:
{
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 800665c:	4608      	mov	r0, r1
 800665e:	f7ff f8c5 	bl	80057ec <RtcMs2Tick>
 8006662:	4604      	mov	r4, r0
    TimerStop( obj );
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff ffaf 	bl	80065c8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800666a:	f7ff f88f 	bl	800578c <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800666e:	42a0      	cmp	r0, r4
 8006670:	bf38      	it	cc
 8006672:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 8006674:	e9c5 0000 	strd	r0, r0, [r5]
}
 8006678:	bd38      	pop	{r3, r4, r5, pc}
 800667a:	bf00      	nop

0800667c <TimerGetCurrentTime>:
{
 800667c:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800667e:	f7ff f86f 	bl	8005760 <RtcGetTimerValue>
}
 8006682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 8006686:	f7ff b8b3 	b.w	80057f0 <RtcTick2Ms>
 800668a:	bf00      	nop

0800668c <TimerGetElapsedTime>:
    if ( past == 0 )
 800668c:	b900      	cbnz	r0, 8006690 <TimerGetElapsedTime+0x4>
}
 800668e:	4770      	bx	lr
{
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
    uint32_t nowInTicks = RtcGetTimerValue( );
 8006694:	f7ff f864 	bl	8005760 <RtcGetTimerValue>
 8006698:	4603      	mov	r3, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800669a:	4620      	mov	r0, r4
    uint32_t nowInTicks = RtcGetTimerValue( );
 800669c:	461c      	mov	r4, r3
    uint32_t pastInTicks = RtcMs2Tick( past );
 800669e:	f7ff f8a5 	bl	80057ec <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80066a2:	1a20      	subs	r0, r4, r0
}
 80066a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80066a8:	f7ff b8a2 	b.w	80057f0 <RtcTick2Ms>

080066ac <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 80066ac:	f7ff b898 	b.w	80057e0 <DelayMsMcu>

080066b0 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void* context )
{
 80066b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80066b2:	4c42      	ldr	r4, [pc, #264]	; (80067bc <SX1276OnDio2Irq+0x10c>)
 80066b4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 80066b8:	2b01      	cmp	r3, #1
{
 80066ba:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 80066bc:	d007      	beq.n	80066ce <SX1276OnDio2Irq+0x1e>
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d103      	bne.n	80066ca <SX1276OnDio2Irq+0x1a>
            default:
                break;
            }
            break;
        case RF_TX_RUNNING:
            switch( SX1276.Settings.Modem )
 80066c2:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80066c6:	2d01      	cmp	r5, #1
 80066c8:	d029      	beq.n	800671e <SX1276OnDio2Irq+0x6e>
            }
            break;
        default:
            break;
    }
}
 80066ca:	b002      	add	sp, #8
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80066ce:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80066d2:	b34d      	cbz	r5, 8006728 <SX1276OnDio2Irq+0x78>
 80066d4:	2d01      	cmp	r5, #1
 80066d6:	d1f8      	bne.n	80066ca <SX1276OnDio2Irq+0x1a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80066d8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f4      	beq.n	80066ca <SX1276OnDio2Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80066e0:	2302      	movs	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 80066e2:	462a      	mov	r2, r5
 80066e4:	f10d 0107 	add.w	r1, sp, #7
 80066e8:	2012      	movs	r0, #18
 80066ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80066ee:	f7ff fcb9 	bl	8006064 <SX1276WriteBuffer>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80066f2:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <SX1276OnDio2Irq+0x110>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0e7      	beq.n	80066ca <SX1276OnDio2Irq+0x1a>
 80066fa:	695c      	ldr	r4, [r3, #20]
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	d0e4      	beq.n	80066ca <SX1276OnDio2Irq+0x1a>
    SX1276ReadBuffer( addr, &data, 1 );
 8006700:	201c      	movs	r0, #28
 8006702:	462a      	mov	r2, r5
 8006704:	f10d 0107 	add.w	r1, sp, #7
 8006708:	f7ff fcca 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800670c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8006710:	4623      	mov	r3, r4
 8006712:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8006716:	b002      	add	sp, #8
 8006718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800671c:	4718      	bx	r3
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800671e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
 8006722:	2a00      	cmp	r2, #0
 8006724:	d0d1      	beq.n	80066ca <SX1276OnDio2Irq+0x1a>
 8006726:	e7dc      	b.n	80066e2 <SX1276OnDio2Irq+0x32>
                if( SX1276.DIO4.port == NULL )
 8006728:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800672a:	2a00      	cmp	r2, #0
 800672c:	d043      	beq.n	80067b6 <SX1276OnDio2Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800672e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c9      	beq.n	80066ca <SX1276OnDio2Irq+0x1a>
 8006736:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1c5      	bne.n	80066ca <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800673e:	2601      	movs	r6, #1
                    TimerStop( &RxTimeoutSyncWord );
 8006740:	4820      	ldr	r0, [pc, #128]	; (80067c4 <SX1276OnDio2Irq+0x114>)
 8006742:	f7ff ff41 	bl	80065c8 <TimerStop>
    SX1276ReadBuffer( addr, &data, 1 );
 8006746:	4632      	mov	r2, r6
 8006748:	f10d 0107 	add.w	r1, sp, #7
 800674c:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800674e:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
    SX1276ReadBuffer( addr, &data, 1 );
 8006752:	f7ff fca5 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006756:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800675a:	40f3      	lsrs	r3, r6
 800675c:	425b      	negs	r3, r3
    SX1276ReadBuffer( addr, &data, 1 );
 800675e:	4632      	mov	r2, r6
 8006760:	f10d 0107 	add.w	r1, sp, #7
 8006764:	201b      	movs	r0, #27
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006766:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
    SX1276ReadBuffer( addr, &data, 1 );
 800676a:	f7ff fc99 	bl	80060a0 <SX1276ReadBuffer>
 800676e:	4632      	mov	r2, r6
 8006770:	f10d 0107 	add.w	r1, sp, #7
 8006774:	201c      	movs	r0, #28
    return data;
 8006776:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 800677a:	f7ff fc91 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800677e:	f89d 0007 	ldrb.w	r0, [sp, #7]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8006782:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006786:	f643 5509 	movw	r5, #15625	; 0x3d09
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800678a:	0a1b      	lsrs	r3, r3, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800678c:	fb05 f000 	mul.w	r0, r5, r0
 8006790:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006792:	fb05 f303 	mul.w	r3, r5, r3
 8006796:	eb03 2310 	add.w	r3, r3, r0, lsr #8
    SX1276ReadBuffer( addr, &data, 1 );
 800679a:	4632      	mov	r2, r6
 800679c:	f10d 0107 	add.w	r1, sp, #7
 80067a0:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80067a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    SX1276ReadBuffer( addr, &data, 1 );
 80067a6:	f7ff fc7b 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80067aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 80067b4:	e789      	b.n	80066ca <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80067b6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80067ba:	e7bc      	b.n	8006736 <SX1276OnDio2Irq+0x86>
 80067bc:	20001200 	.word	0x20001200
 80067c0:	200010cc 	.word	0x200010cc
 80067c4:	200010d0 	.word	0x200010d0

080067c8 <SX1276OnDio1Irq>:
{
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 80067cc:	2201      	movs	r2, #1
 80067ce:	f10d 0107 	add.w	r1, sp, #7
 80067d2:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 80067d4:	4c4f      	ldr	r4, [pc, #316]	; (8006914 <SX1276OnDio1Irq+0x14c>)
    SX1276ReadBuffer( addr, &data, 1 );
 80067d6:	f7ff fc63 	bl	80060a0 <SX1276ReadBuffer>
 80067da:	2201      	movs	r2, #1
 80067dc:	f10d 0107 	add.w	r1, sp, #7
 80067e0:	203f      	movs	r0, #63	; 0x3f
 80067e2:	f7ff fc5d 	bl	80060a0 <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 80067e6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
 80067ea:	2d01      	cmp	r5, #1
 80067ec:	d006      	beq.n	80067fc <SX1276OnDio1Irq+0x34>
 80067ee:	2d02      	cmp	r5, #2
 80067f0:	d102      	bne.n	80067f8 <SX1276OnDio1Irq+0x30>
            switch( SX1276.Settings.Modem )
 80067f2:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80067f6:	b32d      	cbz	r5, 8006844 <SX1276OnDio1Irq+0x7c>
}
 80067f8:	b002      	add	sp, #8
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80067fc:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 8006800:	2e00      	cmp	r6, #0
 8006802:	d039      	beq.n	8006878 <SX1276OnDio1Irq+0xb0>
 8006804:	2e01      	cmp	r6, #1
 8006806:	d1f7      	bne.n	80067f8 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8006808:	f7ff fdf0 	bl	80063ec <SX1276GetDio1PinState>
 800680c:	2800      	cmp	r0, #0
 800680e:	d0f3      	beq.n	80067f8 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutTimer );
 8006810:	4841      	ldr	r0, [pc, #260]	; (8006918 <SX1276OnDio1Irq+0x150>)
 8006812:	f7ff fed9 	bl	80065c8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006816:	2380      	movs	r3, #128	; 0x80
    SX1276WriteBuffer( addr, &data, 1 );
 8006818:	4632      	mov	r2, r6
 800681a:	f10d 0107 	add.w	r1, sp, #7
 800681e:	2012      	movs	r0, #18
 8006820:	f88d 3007 	strb.w	r3, [sp, #7]
 8006824:	f7ff fc1e 	bl	8006064 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006828:	4b3c      	ldr	r3, [pc, #240]	; (800691c <SX1276OnDio1Irq+0x154>)
 800682a:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 800682c:	2200      	movs	r2, #0
 800682e:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0e0      	beq.n	80067f8 <SX1276OnDio1Irq+0x30>
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0dd      	beq.n	80067f8 <SX1276OnDio1Irq+0x30>
}
 800683c:	b002      	add	sp, #8
 800683e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 8006842:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 1 )
 8006844:	f7ff fdd2 	bl	80063ec <SX1276GetDio1PinState>
 8006848:	2801      	cmp	r0, #1
 800684a:	d0d5      	beq.n	80067f8 <SX1276OnDio1Irq+0x30>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800684c:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
 8006850:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006854:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006858:	4931      	ldr	r1, [pc, #196]	; (8006920 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800685a:	1a1b      	subs	r3, r3, r0
 800685c:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800685e:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006860:	dd39      	ble.n	80068d6 <SX1276OnDio1Irq+0x10e>
    SX1276WriteBuffer( 0, buffer, size );
 8006862:	4628      	mov	r0, r5
 8006864:	f7ff fbfe 	bl	8006064 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006868:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800686c:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006870:	4413      	add	r3, r2
 8006872:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8006876:	e7bf      	b.n	80067f8 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8006878:	f7ff fdb8 	bl	80063ec <SX1276GetDio1PinState>
 800687c:	2800      	cmp	r0, #0
 800687e:	d0bb      	beq.n	80067f8 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutSyncWord );
 8006880:	4828      	ldr	r0, [pc, #160]	; (8006924 <SX1276OnDio1Irq+0x15c>)
 8006882:	f7ff fea1 	bl	80065c8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006886:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 800688a:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 800688e:	ea52 0301 	orrs.w	r3, r2, r1
 8006892:	d10b      	bne.n	80068ac <SX1276OnDio1Irq+0xe4>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006894:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    SX1276ReadBuffer( 0, buffer, size );
 8006898:	462a      	mov	r2, r5
                    if( SX1276.Settings.Fsk.FixLen == false )
 800689a:	bb70      	cbnz	r0, 80068fa <SX1276OnDio1Irq+0x132>
    SX1276ReadBuffer( 0, buffer, size );
 800689c:	f504 718b 	add.w	r1, r4, #278	; 0x116
 80068a0:	f7ff fbfe 	bl	80060a0 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80068a4:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 80068a8:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80068ac:	f894 011a 	ldrb.w	r0, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80068b2:	1a52      	subs	r2, r2, r1
 80068b4:	4282      	cmp	r2, r0
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80068b6:	4419      	add	r1, r3
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80068b8:	db16      	blt.n	80068e8 <SX1276OnDio1Irq+0x120>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80068ba:	1e42      	subs	r2, r0, #1
    SX1276ReadBuffer( 0, buffer, size );
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	2000      	movs	r0, #0
 80068c0:	f7ff fbee 	bl	80060a0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80068c4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80068c8:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
 80068cc:	3a01      	subs	r2, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80068d4:	e790      	b.n	80067f8 <SX1276OnDio1Irq+0x30>
    SX1276WriteBuffer( 0, buffer, size );
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff fbc3 	bl	8006064 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80068de:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80068e2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
 80068e6:	e787      	b.n	80067f8 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( 0, buffer, size );
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7ff fbd8 	bl	80060a0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80068f0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80068f4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80068f8:	e77e      	b.n	80067f8 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( addr, &data, 1 );
 80068fa:	f10d 0107 	add.w	r1, sp, #7
 80068fe:	2032      	movs	r0, #50	; 0x32
 8006900:	f7ff fbce 	bl	80060a0 <SX1276ReadBuffer>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006904:	f89d 2007 	ldrb.w	r2, [sp, #7]
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006908:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800690c:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 8006910:	e7cc      	b.n	80068ac <SX1276OnDio1Irq+0xe4>
 8006912:	bf00      	nop
 8006914:	20001200 	.word	0x20001200
 8006918:	200010e8 	.word	0x200010e8
 800691c:	200010cc 	.word	0x200010cc
 8006920:	20001100 	.word	0x20001100
 8006924:	200010d0 	.word	0x200010d0

08006928 <SX1276OnDio0Irq>:
{
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 800692c:	2201      	movs	r2, #1
 800692e:	f10d 0107 	add.w	r1, sp, #7
 8006932:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 8006934:	4cbf      	ldr	r4, [pc, #764]	; (8006c34 <SX1276OnDio0Irq+0x30c>)
    SX1276ReadBuffer( addr, &data, 1 );
 8006936:	f7ff fbb3 	bl	80060a0 <SX1276ReadBuffer>
 800693a:	2201      	movs	r2, #1
 800693c:	f10d 0107 	add.w	r1, sp, #7
 8006940:	203f      	movs	r0, #63	; 0x3f
 8006942:	f7ff fbad 	bl	80060a0 <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 8006946:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
    volatile uint8_t irqFlags = 0;
 800694a:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800694c:	2d01      	cmp	r5, #1
    volatile uint8_t irqFlags = 0;
 800694e:	f88d 3006 	strb.w	r3, [sp, #6]
    switch( SX1276.Settings.State )
 8006952:	d014      	beq.n	800697e <SX1276OnDio0Irq+0x56>
 8006954:	2d02      	cmp	r5, #2
 8006956:	d118      	bne.n	800698a <SX1276OnDio0Irq+0x62>
            TimerStop( &TxTimeoutTimer );
 8006958:	48b7      	ldr	r0, [pc, #732]	; (8006c38 <SX1276OnDio0Irq+0x310>)
 800695a:	f7ff fe35 	bl	80065c8 <TimerStop>
            switch( SX1276.Settings.Modem )
 800695e:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
 8006962:	2a01      	cmp	r2, #1
 8006964:	d043      	beq.n	80069ee <SX1276OnDio0Irq+0xc6>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006966:	4bb5      	ldr	r3, [pc, #724]	; (8006c3c <SX1276OnDio0Irq+0x314>)
 8006968:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 800696a:	2200      	movs	r2, #0
 800696c:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006970:	b15b      	cbz	r3, 800698a <SX1276OnDio0Irq+0x62>
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b14b      	cbz	r3, 800698a <SX1276OnDio0Irq+0x62>
}
 8006976:	b002      	add	sp, #8
 8006978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 800697c:	4718      	bx	r3
            switch( SX1276.Settings.Modem )
 800697e:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 8006982:	2e00      	cmp	r6, #0
 8006984:	d03c      	beq.n	8006a00 <SX1276OnDio0Irq+0xd8>
 8006986:	2e01      	cmp	r6, #1
 8006988:	d001      	beq.n	800698e <SX1276OnDio0Irq+0x66>
}
 800698a:	b002      	add	sp, #8
 800698c:	bd70      	pop	{r4, r5, r6, pc}
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800698e:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006990:	4632      	mov	r2, r6
 8006992:	2012      	movs	r0, #18
 8006994:	f10d 0107 	add.w	r1, sp, #7
 8006998:	f88d 3007 	strb.w	r3, [sp, #7]
 800699c:	f7ff fb62 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80069a0:	4632      	mov	r2, r6
 80069a2:	f10d 0107 	add.w	r1, sp, #7
 80069a6:	2012      	movs	r0, #18
 80069a8:	f7ff fb7a 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80069ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80069b0:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80069b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80069b8:	069b      	lsls	r3, r3, #26
 80069ba:	d574      	bpl.n	8006aa6 <SX1276OnDio0Irq+0x17e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80069bc:	2320      	movs	r3, #32
    SX1276WriteBuffer( addr, &data, 1 );
 80069be:	4632      	mov	r2, r6
 80069c0:	f10d 0107 	add.w	r1, sp, #7
 80069c4:	2012      	movs	r0, #18
 80069c6:	f88d 3007 	strb.w	r3, [sp, #7]
 80069ca:	f7ff fb4b 	bl	8006064 <SX1276WriteBuffer>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80069ce:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80069d2:	b90b      	cbnz	r3, 80069d8 <SX1276OnDio0Irq+0xb0>
                            SX1276.Settings.State = RF_IDLE;
 80069d4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 80069d8:	4899      	ldr	r0, [pc, #612]	; (8006c40 <SX1276OnDio0Irq+0x318>)
 80069da:	f7ff fdf5 	bl	80065c8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80069de:	4b97      	ldr	r3, [pc, #604]	; (8006c3c <SX1276OnDio0Irq+0x314>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0d1      	beq.n	800698a <SX1276OnDio0Irq+0x62>
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1c4      	bne.n	8006976 <SX1276OnDio0Irq+0x4e>
 80069ec:	e7cd      	b.n	800698a <SX1276OnDio0Irq+0x62>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80069ee:	2308      	movs	r3, #8
    SX1276WriteBuffer( addr, &data, 1 );
 80069f0:	f10d 0107 	add.w	r1, sp, #7
 80069f4:	2012      	movs	r0, #18
 80069f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80069fa:	f7ff fb33 	bl	8006064 <SX1276WriteBuffer>
 80069fe:	e7b2      	b.n	8006966 <SX1276OnDio0Irq+0x3e>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006a00:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 80bf 	bne.w	8006b88 <SX1276OnDio0Irq+0x260>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006a0a:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 8006a0e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006a12:	ea52 0103 	orrs.w	r1, r2, r3
 8006a16:	d10c      	bne.n	8006a32 <SX1276OnDio0Irq+0x10a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006a18:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f040 80ea 	bne.w	8006bf6 <SX1276OnDio0Irq+0x2ce>
    SX1276ReadBuffer( 0, buffer, size );
 8006a22:	2201      	movs	r2, #1
 8006a24:	4987      	ldr	r1, [pc, #540]	; (8006c44 <SX1276OnDio0Irq+0x31c>)
 8006a26:	f7ff fb3b 	bl	80060a0 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a2a:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 8006a2e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a32:	4985      	ldr	r1, [pc, #532]	; (8006c48 <SX1276OnDio0Irq+0x320>)
 8006a34:	1ad2      	subs	r2, r2, r3
    SX1276ReadBuffer( 0, buffer, size );
 8006a36:	4419      	add	r1, r3
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	f7ff fb30 	bl	80060a0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a40:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
 8006a44:	487e      	ldr	r0, [pc, #504]	; (8006c40 <SX1276OnDio0Irq+0x318>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006a46:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 8006a4a:	f7ff fdbd 	bl	80065c8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006a4e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 8085 	beq.w	8006b62 <SX1276OnDio0Irq+0x23a>
    SX1276ReadBuffer( addr, &data, 1 );
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f10d 0107 	add.w	r1, sp, #7
 8006a5e:	200d      	movs	r0, #13
 8006a60:	f7ff fb1e 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a68:	2201      	movs	r2, #1
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006a6e:	f10d 0107 	add.w	r1, sp, #7
 8006a72:	200d      	movs	r0, #13
 8006a74:	f88d 3007 	strb.w	r3, [sp, #7]
 8006a78:	f7ff faf4 	bl	8006064 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <SX1276OnDio0Irq+0x314>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	b143      	cbz	r3, 8006a94 <SX1276OnDio0Irq+0x16c>
 8006a82:	689d      	ldr	r5, [r3, #8]
 8006a84:	b135      	cbz	r5, 8006a94 <SX1276OnDio0Irq+0x16c>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006a86:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
 8006a8a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8006a8e:	486e      	ldr	r0, [pc, #440]	; (8006c48 <SX1276OnDio0Irq+0x320>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	47a8      	blx	r5
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006a9a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006a9e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
}
 8006aa2:	b002      	add	sp, #8
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 8006aa6:	4632      	mov	r2, r6
 8006aa8:	f10d 0107 	add.w	r1, sp, #7
 8006aac:	2019      	movs	r0, #25
 8006aae:	f7ff faf7 	bl	80060a0 <SX1276ReadBuffer>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006ab2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	109b      	asrs	r3, r3, #2
    SX1276ReadBuffer( addr, &data, 1 );
 8006aba:	4632      	mov	r2, r6
 8006abc:	f10d 0107 	add.w	r1, sp, #7
 8006ac0:	201a      	movs	r0, #26
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006ac2:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    SX1276ReadBuffer( addr, &data, 1 );
 8006ac6:	f7ff faeb 	bl	80060a0 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006aca:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
    return data;
 8006ace:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006ad2:	2a00      	cmp	r2, #0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006ad4:	ea4f 1113 	mov.w	r1, r3, lsr #4
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006ad8:	db49      	blt.n	8006b6e <SX1276OnDio0Irq+0x246>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006ada:	4a5c      	ldr	r2, [pc, #368]	; (8006c4c <SX1276OnDio0Irq+0x324>)
 8006adc:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006ae0:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006ae2:	4290      	cmp	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006ae4:	bf8c      	ite	hi
 8006ae6:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006ae8:	3ba4      	subls	r3, #164	; 0xa4
 8006aea:	440b      	add	r3, r1
 8006aec:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
    SX1276ReadBuffer( addr, &data, 1 );
 8006af0:	2201      	movs	r2, #1
 8006af2:	f10d 0107 	add.w	r1, sp, #7
 8006af6:	2013      	movs	r0, #19
 8006af8:	f7ff fad2 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006b00:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276ReadBuffer( addr, &data, 1 );
 8006b04:	2201      	movs	r2, #1
 8006b06:	f10d 0107 	add.w	r1, sp, #7
 8006b0a:	2010      	movs	r0, #16
 8006b0c:	f7ff fac8 	bl	80060a0 <SX1276ReadBuffer>
    SX1276WriteBuffer( addr, &data, 1 );
 8006b10:	2201      	movs	r2, #1
 8006b12:	f10d 0107 	add.w	r1, sp, #7
 8006b16:	200d      	movs	r0, #13
 8006b18:	f7ff faa4 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( 0, buffer, size );
 8006b1c:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8006b20:	4949      	ldr	r1, [pc, #292]	; (8006c48 <SX1276OnDio0Irq+0x320>)
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7ff fabc 	bl	80060a0 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006b28:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8006b2c:	b90b      	cbnz	r3, 8006b32 <SX1276OnDio0Irq+0x20a>
                        SX1276.Settings.State = RF_IDLE;
 8006b2e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8006b32:	4843      	ldr	r0, [pc, #268]	; (8006c40 <SX1276OnDio0Irq+0x318>)
 8006b34:	f7ff fd48 	bl	80065c8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006b38:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <SX1276OnDio0Irq+0x314>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f43f af24 	beq.w	800698a <SX1276OnDio0Irq+0x62>
 8006b42:	689d      	ldr	r5, [r3, #8]
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	f43f af20 	beq.w	800698a <SX1276OnDio0Irq+0x62>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006b4a:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 8006b4e:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
 8006b52:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8006b56:	483c      	ldr	r0, [pc, #240]	; (8006c48 <SX1276OnDio0Irq+0x320>)
 8006b58:	46ac      	mov	ip, r5
}
 8006b5a:	b002      	add	sp, #8
 8006b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006b60:	4760      	bx	ip
                    TimerStop( &RxTimeoutSyncWord );
 8006b62:	483b      	ldr	r0, [pc, #236]	; (8006c50 <SX1276OnDio0Irq+0x328>)
                    SX1276.Settings.State = RF_IDLE;
 8006b64:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8006b68:	f7ff fd2e 	bl	80065c8 <TimerStop>
 8006b6c:	e786      	b.n	8006a7c <SX1276OnDio0Irq+0x154>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006b6e:	441a      	add	r2, r3
 8006b70:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006b74:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <SX1276OnDio0Irq+0x324>)
 8006b76:	b292      	uxth	r2, r2
 8006b78:	4298      	cmp	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006b7a:	bf8c      	ite	hi
 8006b7c:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006b7e:	3aa4      	subls	r2, #164	; 0xa4
 8006b80:	188b      	adds	r3, r1, r2
 8006b82:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 8006b86:	e7b3      	b.n	8006af0 <SX1276OnDio0Irq+0x1c8>
    SX1276ReadBuffer( addr, &data, 1 );
 8006b88:	462a      	mov	r2, r5
 8006b8a:	f10d 0107 	add.w	r1, sp, #7
 8006b8e:	203f      	movs	r0, #63	; 0x3f
 8006b90:	f7ff fa86 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006b98:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006b9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ba0:	079a      	lsls	r2, r3, #30
 8006ba2:	f53f af32 	bmi.w	8006a0a <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006ba6:	230b      	movs	r3, #11
    SX1276WriteBuffer( addr, &data, 1 );
 8006ba8:	462a      	mov	r2, r5
 8006baa:	f10d 0107 	add.w	r1, sp, #7
 8006bae:	203e      	movs	r0, #62	; 0x3e
 8006bb0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006bb4:	f7ff fa56 	bl	8006064 <SX1276WriteBuffer>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006bb8:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 8006bba:	462a      	mov	r2, r5
 8006bbc:	f10d 0107 	add.w	r1, sp, #7
 8006bc0:	203f      	movs	r0, #63	; 0x3f
 8006bc2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006bc6:	f7ff fa4d 	bl	8006064 <SX1276WriteBuffer>
                        TimerStop( &RxTimeoutTimer );
 8006bca:	481d      	ldr	r0, [pc, #116]	; (8006c40 <SX1276OnDio0Irq+0x318>)
 8006bcc:	f7ff fcfc 	bl	80065c8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006bd0:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
 8006bd4:	b9d6      	cbnz	r6, 8006c0c <SX1276OnDio0Irq+0x2e4>
                            TimerStop( &RxTimeoutSyncWord );
 8006bd6:	481e      	ldr	r0, [pc, #120]	; (8006c50 <SX1276OnDio0Irq+0x328>)
 8006bd8:	f7ff fcf6 	bl	80065c8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8006bdc:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006be0:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <SX1276OnDio0Irq+0x314>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f43f af55 	beq.w	8006a94 <SX1276OnDio0Irq+0x16c>
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f43f af51 	beq.w	8006a94 <SX1276OnDio0Irq+0x16c>
                            RadioEvents->RxError( );
 8006bf2:	4798      	blx	r3
 8006bf4:	e74e      	b.n	8006a94 <SX1276OnDio0Irq+0x16c>
    SX1276ReadBuffer( addr, &data, 1 );
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f10d 0107 	add.w	r1, sp, #7
 8006bfc:	2032      	movs	r0, #50	; 0x32
 8006bfe:	f7ff fa4f 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006c02:	f89d 2007 	ldrb.w	r2, [sp, #7]
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006c06:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 8006c0a:	e710      	b.n	8006a2e <SX1276OnDio0Irq+0x106>
    SX1276ReadBuffer( addr, &data, 1 );
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	f10d 0107 	add.w	r1, sp, #7
 8006c12:	200d      	movs	r0, #13
 8006c14:	f7ff fa44 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006c1c:	462a      	mov	r2, r5
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006c22:	f10d 0107 	add.w	r1, sp, #7
 8006c26:	200d      	movs	r0, #13
 8006c28:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c2c:	f7ff fa1a 	bl	8006064 <SX1276WriteBuffer>
 8006c30:	e7d6      	b.n	8006be0 <SX1276OnDio0Irq+0x2b8>
 8006c32:	bf00      	nop
 8006c34:	20001200 	.word	0x20001200
 8006c38:	20001344 	.word	0x20001344
 8006c3c:	200010cc 	.word	0x200010cc
 8006c40:	200010e8 	.word	0x200010e8
 8006c44:	20001316 	.word	0x20001316
 8006c48:	20001100 	.word	0x20001100
 8006c4c:	1f4add40 	.word	0x1f4add40
 8006c50:	200010d0 	.word	0x200010d0

08006c54 <SX1276SetOpMode>:
{
 8006c54:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 8006c56:	4604      	mov	r4, r0
{
 8006c58:	b082      	sub	sp, #8
    if( opMode == RF_OPMODE_SLEEP )
 8006c5a:	b9b8      	cbnz	r0, 8006c8c <SX1276SetOpMode+0x38>
        SX1276SetAntSwLowPower( true );
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	f7ff faad 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006c62:	2201      	movs	r2, #1
 8006c64:	4610      	mov	r0, r2
 8006c66:	f10d 0107 	add.w	r1, sp, #7
 8006c6a:	f7ff fa19 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006c72:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006c74:	f023 0307 	bic.w	r3, r3, #7
 8006c78:	4323      	orrs	r3, r4
    SX1276WriteBuffer( addr, &data, 1 );
 8006c7a:	f10d 0107 	add.w	r1, sp, #7
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c84:	f7ff f9ee 	bl	8006064 <SX1276WriteBuffer>
}
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	f7ff fa97 	bl	80061c0 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8006c92:	2000      	movs	r0, #0
 8006c94:	f7ff fa92 	bl	80061bc <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fa93 	bl	80061c4 <SX1276SetAntSw>
 8006c9e:	e7e0      	b.n	8006c62 <SX1276SetOpMode+0xe>

08006ca0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <SX1276OnDio4Irq+0x18>)
 8006ca2:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8006ca6:	b92a      	cbnz	r2, 8006cb4 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8006ca8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8006cac:	b912      	cbnz	r2, 8006cb4 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20001200 	.word	0x20001200

08006cbc <SX1276OnDio3Irq>:
{
 8006cbc:	b530      	push	{r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <SX1276OnDio3Irq+0x78>)
 8006cc0:	f893 40e1 	ldrb.w	r4, [r3, #225]	; 0xe1
 8006cc4:	2c01      	cmp	r4, #1
{
 8006cc6:	b083      	sub	sp, #12
    switch( SX1276.Settings.Modem )
 8006cc8:	d001      	beq.n	8006cce <SX1276OnDio3Irq+0x12>
}
 8006cca:	b003      	add	sp, #12
 8006ccc:	bd30      	pop	{r4, r5, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 8006cce:	2012      	movs	r0, #18
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	f10d 0107 	add.w	r1, sp, #7
 8006cd6:	f7ff f9e3 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006cda:	f89d 0007 	ldrb.w	r0, [sp, #7]
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8006cde:	f010 0501 	ands.w	r5, r0, #1
 8006ce2:	d014      	beq.n	8006d0e <SX1276OnDio3Irq+0x52>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8006ce4:	2305      	movs	r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	f10d 0107 	add.w	r1, sp, #7
 8006cec:	2012      	movs	r0, #18
 8006cee:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cf2:	f7ff f9b7 	bl	8006064 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <SX1276OnDio3Irq+0x7c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0e5      	beq.n	8006cca <SX1276OnDio3Irq+0xe>
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0e2      	beq.n	8006cca <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( true );
 8006d04:	4620      	mov	r0, r4
}
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                RadioEvents->CadDone( false );
 8006d0c:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8006d0e:	2304      	movs	r3, #4
    SX1276WriteBuffer( addr, &data, 1 );
 8006d10:	4622      	mov	r2, r4
 8006d12:	f10d 0107 	add.w	r1, sp, #7
 8006d16:	2012      	movs	r0, #18
 8006d18:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d1c:	f7ff f9a2 	bl	8006064 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <SX1276OnDio3Irq+0x7c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0d0      	beq.n	8006cca <SX1276OnDio3Irq+0xe>
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0cd      	beq.n	8006cca <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( false );
 8006d2e:	4628      	mov	r0, r5
 8006d30:	e7e9      	b.n	8006d06 <SX1276OnDio3Irq+0x4a>
 8006d32:	bf00      	nop
 8006d34:	20001200 	.word	0x20001200
 8006d38:	200010cc 	.word	0x200010cc

08006d3c <SX1276GetStatus>:
    return SX1276.Settings.State;
 8006d3c:	4b01      	ldr	r3, [pc, #4]	; (8006d44 <SX1276GetStatus+0x8>)
}
 8006d3e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8006d42:	4770      	bx	lr
 8006d44:	20001200 	.word	0x20001200

08006d48 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006d48:	4918      	ldr	r1, [pc, #96]	; (8006dac <SX1276SetChannel+0x64>)
{
 8006d4a:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006d4c:	fba1 2300 	umull	r2, r3, r1, r0
 8006d50:	0b1b      	lsrs	r3, r3, #12
 8006d52:	f643 5409 	movw	r4, #15625	; 0x3d09
 8006d56:	fb04 0213 	mls	r2, r4, r3, r0
 8006d5a:	f641 6484 	movw	r4, #7812	; 0x1e84
 8006d5e:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8006d62:	fba1 2404 	umull	r2, r4, r1, r4
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006d66:	021b      	lsls	r3, r3, #8
{
 8006d68:	b082      	sub	sp, #8
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8006d6a:	eb03 3414 	add.w	r4, r3, r4, lsr #12
    SX1276.Settings.Channel = freq;
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <SX1276SetChannel+0x68>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8006d70:	0c21      	lsrs	r1, r4, #16
 8006d72:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276.Settings.Channel = freq;
 8006d76:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 8006d7a:	f10d 0107 	add.w	r1, sp, #7
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2006      	movs	r0, #6
 8006d82:	f7ff f96f 	bl	8006064 <SX1276WriteBuffer>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8006d86:	0a23      	lsrs	r3, r4, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006d88:	f10d 0107 	add.w	r1, sp, #7
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2007      	movs	r0, #7
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8006d90:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006d94:	f7ff f966 	bl	8006064 <SX1276WriteBuffer>
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f10d 0107 	add.w	r1, sp, #7
 8006d9e:	2008      	movs	r0, #8
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8006da0:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006da4:	f7ff f95e 	bl	8006064 <SX1276WriteBuffer>
}
 8006da8:	b002      	add	sp, #8
 8006daa:	bd10      	pop	{r4, pc}
 8006dac:	431bde83 	.word	0x431bde83
 8006db0:	20001200 	.word	0x20001200

08006db4 <RxChainCalibration>:
{
 8006db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db6:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8006db8:	2201      	movs	r2, #1
 8006dba:	f10d 0107 	add.w	r1, sp, #7
 8006dbe:	2009      	movs	r0, #9
 8006dc0:	f7ff f96e 	bl	80060a0 <SX1276ReadBuffer>
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f10d 0107 	add.w	r1, sp, #7
 8006dca:	2006      	movs	r0, #6
    return data;
 8006dcc:	f89d 6007 	ldrb.w	r6, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8006dd0:	f7ff f966 	bl	80060a0 <SX1276ReadBuffer>
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f10d 0107 	add.w	r1, sp, #7
 8006dda:	2007      	movs	r0, #7
    return data;
 8006ddc:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8006de0:	f7ff f95e 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006de4:	f89d 4007 	ldrb.w	r4, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8006de8:	2201      	movs	r2, #1
 8006dea:	f10d 0107 	add.w	r1, sp, #7
 8006dee:	2008      	movs	r0, #8
 8006df0:	f7ff f956 	bl	80060a0 <SX1276ReadBuffer>
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006df4:	0224      	lsls	r4, r4, #8
    return data;
 8006df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006dfa:	f643 5209 	movw	r2, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006e02:	fb02 f303 	mul.w	r3, r2, r3
 8006e06:	2100      	movs	r1, #0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8006e08:	0a2d      	lsrs	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006e0a:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006e0c:	fb02 f505 	mul.w	r5, r2, r5
 8006e10:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006e14:	2201      	movs	r2, #1
 8006e16:	f10d 0107 	add.w	r1, sp, #7
 8006e1a:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8006e1c:	eb05 2513 	add.w	r5, r5, r3, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006e20:	f7ff f920 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006e24:	2201      	movs	r2, #1
 8006e26:	f10d 0107 	add.w	r1, sp, #7
 8006e2a:	203b      	movs	r0, #59	; 0x3b
 8006e2c:	f7ff f938 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006e34:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006e3a:	f10d 0107 	add.w	r1, sp, #7
 8006e3e:	203b      	movs	r0, #59	; 0x3b
 8006e40:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e44:	f7ff f90e 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f10d 0107 	add.w	r1, sp, #7
 8006e4e:	203b      	movs	r0, #59	; 0x3b
 8006e50:	f7ff f926 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006e58:	f013 0420 	ands.w	r4, r3, #32
 8006e5c:	d1f4      	bne.n	8006e48 <RxChainCalibration+0x94>
    SX1276.Settings.Channel = freq;
 8006e5e:	4b23      	ldr	r3, [pc, #140]	; (8006eec <RxChainCalibration+0x138>)
 8006e60:	4f23      	ldr	r7, [pc, #140]	; (8006ef0 <RxChainCalibration+0x13c>)
 8006e62:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 8006e66:	2201      	movs	r2, #1
 8006e68:	23d9      	movs	r3, #217	; 0xd9
 8006e6a:	f10d 0107 	add.w	r1, sp, #7
 8006e6e:	2006      	movs	r0, #6
 8006e70:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e74:	f7ff f8f6 	bl	8006064 <SX1276WriteBuffer>
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f10d 0107 	add.w	r1, sp, #7
 8006e7e:	2007      	movs	r0, #7
 8006e80:	f88d 4007 	strb.w	r4, [sp, #7]
 8006e84:	f7ff f8ee 	bl	8006064 <SX1276WriteBuffer>
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f10d 0107 	add.w	r1, sp, #7
 8006e8e:	2008      	movs	r0, #8
 8006e90:	f88d 4007 	strb.w	r4, [sp, #7]
 8006e94:	f7ff f8e6 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f10d 0107 	add.w	r1, sp, #7
 8006e9e:	203b      	movs	r0, #59	; 0x3b
 8006ea0:	f7ff f8fe 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006ea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ea8:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006eae:	f10d 0107 	add.w	r1, sp, #7
 8006eb2:	203b      	movs	r0, #59	; 0x3b
 8006eb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8006eb8:	f7ff f8d4 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f10d 0107 	add.w	r1, sp, #7
 8006ec2:	203b      	movs	r0, #59	; 0x3b
 8006ec4:	f7ff f8ec 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8006ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006ecc:	069b      	lsls	r3, r3, #26
 8006ece:	d4f5      	bmi.n	8006ebc <RxChainCalibration+0x108>
    SX1276WriteBuffer( addr, &data, 1 );
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f10d 0107 	add.w	r1, sp, #7
 8006ed6:	2009      	movs	r0, #9
 8006ed8:	f88d 6007 	strb.w	r6, [sp, #7]
 8006edc:	f7ff f8c2 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetChannel( initialFreq );
 8006ee0:	4628      	mov	r0, r5
}
 8006ee2:	b003      	add	sp, #12
 8006ee4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    SX1276SetChannel( initialFreq );
 8006ee8:	f7ff bf2e 	b.w	8006d48 <SX1276SetChannel>
 8006eec:	20001200 	.word	0x20001200
 8006ef0:	33bca100 	.word	0x33bca100

08006ef4 <SX1276GetTimeOnAir>:
{
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8006efa:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8006efe:	f89d e018 	ldrb.w	lr, [sp, #24]
 8006f02:	f89d 501c 	ldrb.w	r5, [sp, #28]
    switch( modem )
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d041      	beq.n	8006f8e <SX1276GetTimeOnAir+0x9a>
 8006f0a:	2801      	cmp	r0, #1
 8006f0c:	d13d      	bne.n	8006f8a <SX1276GetTimeOnAir+0x96>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006f0e:	1f50      	subs	r0, r2, #5
 8006f10:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 8006f12:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006f16:	d955      	bls.n	8006fc4 <SX1276GetTimeOnAir+0xd0>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d04c      	beq.n	8006fb6 <SX1276GetTimeOnAir+0xc2>
 8006f1c:	2901      	cmp	r1, #1
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006f1e:	bf03      	ittte	eq
 8006f20:	f1a2 060c 	subeq.w	r6, r2, #12
 8006f24:	fab6 f686 	clzeq	r6, r6
 8006f28:	0976      	lsreq	r6, r6, #5
    bool    lowDatareOptimize = false;
 8006f2a:	2600      	movne	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006f2c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8006f30:	b10d      	cbz	r5, 8006f36 <SX1276GetTimeOnAir+0x42>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006f32:	f10e 0e10 	add.w	lr, lr, #16
                            ( crcOn ? 16 : 0 ) -
 8006f36:	ebae 0e82 	sub.w	lr, lr, r2, lsl #2
                            ( 4 * datarate ) +
 8006f3a:	0090      	lsls	r0, r2, #2
                            ( fixLen ? 0 : 20 );
 8006f3c:	b90c      	cbnz	r4, 8006f42 <SX1276GetTimeOnAir+0x4e>
                            ( 4 * datarate ) +
 8006f3e:	f10e 0e14 	add.w	lr, lr, #20
    if( datarate <= 6 )
 8006f42:	2a06      	cmp	r2, #6
            ceilDenominator = 4 * ( datarate - 2 );
 8006f44:	f1a2 0402 	sub.w	r4, r2, #2
    if( datarate <= 6 )
 8006f48:	d844      	bhi.n	8006fd4 <SX1276GetTimeOnAir+0xe0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006f4a:	f1be 0f00 	cmp.w	lr, #0
 8006f4e:	bfac      	ite	ge
 8006f50:	eb00 020e 	addge.w	r2, r0, lr
 8006f54:	1c02      	addlt	r2, r0, #0
 8006f56:	3a01      	subs	r2, #1
 8006f58:	fb92 f2f0 	sdiv	r2, r2, r0
 8006f5c:	fb03 cc02 	mla	ip, r3, r2, ip
        intermediate += 2;
 8006f60:	f10c 0c0e 	add.w	ip, ip, #14
    switch( bw )
 8006f64:	2902      	cmp	r1, #2
 8006f66:	d849      	bhi.n	8006ffc <SX1276GetTimeOnAir+0x108>
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <SX1276GetTimeOnAir+0x10c>)
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006f6a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006f6e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8006f72:	f10c 0001 	add.w	r0, ip, #1
 8006f76:	fa00 fc04 	lsl.w	ip, r0, r4
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8006f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 8006f7e:	1e50      	subs	r0, r2, #1
 8006f80:	fb03 000c 	mla	r0, r3, ip, r0
 8006f84:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8006f88:	bd70      	pop	{r4, r5, r6, pc}
    switch( modem )
 8006f8a:	2000      	movs	r0, #0
}
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
    return ( preambleLen << 3 ) +
 8006f8e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006f92:	b90c      	cbnz	r4, 8006f98 <SX1276GetTimeOnAir+0xa4>
    return ( preambleLen << 3 ) +
 8006f94:	f10c 0c08 	add.w	ip, ip, #8
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006f98:	f10c 0c18 	add.w	ip, ip, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006f9c:	b10d      	cbz	r5, 8006fa2 <SX1276GetTimeOnAir+0xae>
               ( 0 ) + // Address filter size
 8006f9e:	f10e 0e02 	add.w	lr, lr, #2
             ( syncWordLength << 3 ) +
 8006fa2:	eb0c 0ece 	add.w	lr, ip, lr, lsl #3
    return ( numerator + denominator - 1 ) / denominator;
 8006fa6:	1e50      	subs	r0, r2, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8006fa8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 8006fac:	fb0c 000e 	mla	r0, ip, lr, r0
 8006fb0:	fbb0 f0f2 	udiv	r0, r0, r2
}
 8006fb4:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006fb6:	f1a2 060b 	sub.w	r6, r2, #11
 8006fba:	2e01      	cmp	r6, #1
 8006fbc:	bf8c      	ite	hi
 8006fbe:	2600      	movhi	r6, #0
 8006fc0:	2601      	movls	r6, #1
 8006fc2:	e7b3      	b.n	8006f2c <SX1276GetTimeOnAir+0x38>
        if( preambleLen < 12 )
 8006fc4:	f1bc 0f0c 	cmp.w	ip, #12
 8006fc8:	bf38      	it	cc
 8006fca:	f04f 0c0c 	movcc.w	ip, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	d1a4      	bne.n	8006f1c <SX1276GetTimeOnAir+0x28>
 8006fd2:	e7f0      	b.n	8006fb6 <SX1276GetTimeOnAir+0xc2>
        ceilNumerator += 8;
 8006fd4:	f10e 0e08 	add.w	lr, lr, #8
        if( lowDatareOptimize == true )
 8006fd8:	b176      	cbz	r6, 8006ff8 <SX1276GetTimeOnAir+0x104>
            ceilDenominator = 4 * ( datarate - 2 );
 8006fda:	00a2      	lsls	r2, r4, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006fdc:	f1be 0f00 	cmp.w	lr, #0
 8006fe0:	bfac      	ite	ge
 8006fe2:	eb02 000e 	addge.w	r0, r2, lr
 8006fe6:	1c10      	addlt	r0, r2, #0
 8006fe8:	3801      	subs	r0, #1
 8006fea:	fb90 f2f2 	sdiv	r2, r0, r2
 8006fee:	fb03 cc02 	mla	ip, r3, r2, ip
    int32_t intermediate =
 8006ff2:	f10c 0c0c 	add.w	ip, ip, #12
    if( datarate <= 6 )
 8006ff6:	e7b5      	b.n	8006f64 <SX1276GetTimeOnAir+0x70>
            ceilDenominator = 4 * datarate;
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	e7ef      	b.n	8006fdc <SX1276GetTimeOnAir+0xe8>
    return ( numerator + denominator - 1 ) / denominator;
 8006ffc:	deff      	udf	#255	; 0xff
 8006ffe:	bf00      	nop
 8007000:	0801221c 	.word	0x0801221c

08007004 <SX1276Send>:
{
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 8007006:	4c98      	ldr	r4, [pc, #608]	; (8007268 <SX1276Send+0x264>)
{
 8007008:	b085      	sub	sp, #20
    switch( SX1276.Settings.Modem )
 800700a:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
{
 800700e:	f88d 1007 	strb.w	r1, [sp, #7]
 8007012:	4607      	mov	r7, r0
    switch( SX1276.Settings.Modem )
 8007014:	2d00      	cmp	r5, #0
 8007016:	f000 80ba 	beq.w	800718e <SX1276Send+0x18a>
 800701a:	2d01      	cmp	r5, #1
 800701c:	d14c      	bne.n	80070b8 <SX1276Send+0xb4>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800701e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 8007022:	f10d 060f 	add.w	r6, sp, #15
 8007026:	462a      	mov	r2, r5
 8007028:	4631      	mov	r1, r6
 800702a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80e3 	beq.w	80071f8 <SX1276Send+0x1f4>
    SX1276ReadBuffer( addr, &data, 1 );
 8007032:	f7ff f835 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007036:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 800703a:	462a      	mov	r2, r5
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800703c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 8007040:	4631      	mov	r1, r6
 8007042:	2033      	movs	r0, #51	; 0x33
 8007044:	f88d 300f 	strb.w	r3, [sp, #15]
 8007048:	f7ff f80c 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800704c:	2319      	movs	r3, #25
    SX1276WriteBuffer( addr, &data, 1 );
 800704e:	462a      	mov	r2, r5
 8007050:	4631      	mov	r1, r6
 8007052:	203b      	movs	r0, #59	; 0x3b
 8007054:	f88d 300f 	strb.w	r3, [sp, #15]
 8007058:	f7ff f804 	bl	8006064 <SX1276WriteBuffer>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800705c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007060:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276WriteBuffer( addr, &data, 1 );
 8007064:	2201      	movs	r2, #1
 8007066:	4631      	mov	r1, r6
 8007068:	2022      	movs	r0, #34	; 0x22
 800706a:	f88d 300f 	strb.w	r3, [sp, #15]
 800706e:	2500      	movs	r5, #0
 8007070:	f7fe fff8 	bl	8006064 <SX1276WriteBuffer>
 8007074:	2201      	movs	r2, #1
 8007076:	4631      	mov	r1, r6
 8007078:	200e      	movs	r0, #14
 800707a:	f88d 500f 	strb.w	r5, [sp, #15]
 800707e:	f7fe fff1 	bl	8006064 <SX1276WriteBuffer>
 8007082:	2201      	movs	r2, #1
 8007084:	4631      	mov	r1, r6
 8007086:	200d      	movs	r0, #13
 8007088:	f88d 500f 	strb.w	r5, [sp, #15]
 800708c:	f7fe ffea 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007090:	2201      	movs	r2, #1
 8007092:	4631      	mov	r1, r6
 8007094:	4610      	mov	r0, r2
 8007096:	f7ff f803 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800709a:	f89d 300f 	ldrb.w	r3, [sp, #15]
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800709e:	f033 05f8 	bics.w	r5, r3, #248	; 0xf8
 80070a2:	f000 80cf 	beq.w	8007244 <SX1276Send+0x240>
    SX1276WriteBuffer( 0, buffer, size );
 80070a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80070aa:	4639      	mov	r1, r7
 80070ac:	2000      	movs	r0, #0
 80070ae:	f7fe ffd9 	bl	8006064 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80070b2:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
 80070b6:	e000      	b.n	80070ba <SX1276Send+0xb6>
    switch( SX1276.Settings.Modem )
 80070b8:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
 80070ba:	486c      	ldr	r0, [pc, #432]	; (800726c <SX1276Send+0x268>)
 80070bc:	f7ff fa84 	bl	80065c8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80070c0:	4629      	mov	r1, r5
 80070c2:	486b      	ldr	r0, [pc, #428]	; (8007270 <SX1276Send+0x26c>)
 80070c4:	f7ff fac8 	bl	8006658 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80070c8:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 80070cc:	b375      	cbz	r5, 800712c <SX1276Send+0x128>
 80070ce:	2d01      	cmp	r5, #1
 80070d0:	d121      	bne.n	8007116 <SX1276Send+0x112>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80070d2:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 809f 	beq.w	800721a <SX1276Send+0x216>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80070dc:	23f5      	movs	r3, #245	; 0xf5
    SX1276WriteBuffer( addr, &data, 1 );
 80070de:	462a      	mov	r2, r5
 80070e0:	f10d 010f 	add.w	r1, sp, #15
 80070e4:	2011      	movs	r0, #17
 80070e6:	f88d 300f 	strb.w	r3, [sp, #15]
 80070ea:	f7fe ffbb 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80070ee:	462a      	mov	r2, r5
 80070f0:	f10d 010f 	add.w	r1, sp, #15
 80070f4:	2040      	movs	r0, #64	; 0x40
 80070f6:	f7fe ffd3 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80070fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 80070fe:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8007100:	f003 0333 	and.w	r3, r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8007108:	f10d 010f 	add.w	r1, sp, #15
 800710c:	2040      	movs	r0, #64	; 0x40
 800710e:	f88d 300f 	strb.w	r3, [sp, #15]
 8007112:	f7fe ffa7 	bl	8006064 <SX1276WriteBuffer>
    SX1276.Settings.State = RF_TX_RUNNING;
 8007116:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8007118:	4855      	ldr	r0, [pc, #340]	; (8007270 <SX1276Send+0x26c>)
    SX1276.Settings.State = RF_TX_RUNNING;
 800711a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800711e:	f7ff f991 	bl	8006444 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007122:	2003      	movs	r0, #3
 8007124:	f7ff fd96 	bl	8006c54 <SX1276SetOpMode>
}
 8007128:	b005      	add	sp, #20
 800712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 800712c:	2201      	movs	r2, #1
 800712e:	f10d 010f 	add.w	r1, sp, #15
 8007132:	2040      	movs	r0, #64	; 0x40
 8007134:	f7fe ffb4 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007138:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 800713c:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800713e:	f003 0303 	and.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007142:	f10d 010f 	add.w	r1, sp, #15
 8007146:	2040      	movs	r0, #64	; 0x40
 8007148:	f88d 300f 	strb.w	r3, [sp, #15]
 800714c:	f7fe ff8a 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007150:	2201      	movs	r2, #1
 8007152:	f10d 010f 	add.w	r1, sp, #15
 8007156:	2041      	movs	r0, #65	; 0x41
 8007158:	f7fe ffa2 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800715c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8007160:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8007162:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 8007166:	f10d 010f 	add.w	r1, sp, #15
 800716a:	2041      	movs	r0, #65	; 0x41
 800716c:	f88d 300f 	strb.w	r3, [sp, #15]
 8007170:	f7fe ff78 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007174:	2201      	movs	r2, #1
 8007176:	f10d 010f 	add.w	r1, sp, #15
 800717a:	2035      	movs	r0, #53	; 0x35
 800717c:	f7fe ff90 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007180:	f89d 300f 	ldrb.w	r3, [sp, #15]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007188:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
        break;
 800718c:	e7c3      	b.n	8007116 <SX1276Send+0x112>
            if( SX1276.Settings.Fsk.FixLen == false )
 800718e:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
 8007192:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007196:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 800719a:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    SX1276WriteBuffer( 0, buffer, size );
 800719e:	2201      	movs	r2, #1
            if( SX1276.Settings.Fsk.FixLen == false )
 80071a0:	b1d8      	cbz	r0, 80071da <SX1276Send+0x1d6>
    SX1276WriteBuffer( addr, &data, 1 );
 80071a2:	f10d 010f 	add.w	r1, sp, #15
 80071a6:	2032      	movs	r0, #50	; 0x32
 80071a8:	f88d 300f 	strb.w	r3, [sp, #15]
 80071ac:	f7fe ff5a 	bl	8006064 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 80071b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80071b4:	1e53      	subs	r3, r2, #1
 80071b6:	2b3f      	cmp	r3, #63	; 0x3f
 80071b8:	d818      	bhi.n	80071ec <SX1276Send+0x1e8>
    SX1276WriteBuffer( 0, buffer, size );
 80071ba:	4639      	mov	r1, r7
 80071bc:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80071be:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
 80071c2:	f7fe ff4f 	bl	8006064 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80071c6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80071ca:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80071ce:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80071d2:	4413      	add	r3, r2
 80071d4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
 80071d8:	e76f      	b.n	80070ba <SX1276Send+0xb6>
    SX1276WriteBuffer( 0, buffer, size );
 80071da:	f10d 0107 	add.w	r1, sp, #7
 80071de:	f7fe ff41 	bl	8006064 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 80071e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80071e6:	1e53      	subs	r3, r2, #1
 80071e8:	2b3f      	cmp	r3, #63	; 0x3f
 80071ea:	d9e6      	bls.n	80071ba <SX1276Send+0x1b6>
                memcpy1( RxTxBuffer, buffer, size );
 80071ec:	4821      	ldr	r0, [pc, #132]	; (8007274 <SX1276Send+0x270>)
 80071ee:	4639      	mov	r1, r7
 80071f0:	f7ff f916 	bl	8006420 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80071f4:	2220      	movs	r2, #32
 80071f6:	e7e0      	b.n	80071ba <SX1276Send+0x1b6>
    SX1276ReadBuffer( addr, &data, 1 );
 80071f8:	f7fe ff52 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80071fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8007200:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8007204:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 8007208:	462a      	mov	r2, r5
 800720a:	4631      	mov	r1, r6
 800720c:	2033      	movs	r0, #51	; 0x33
 800720e:	f88d 300f 	strb.w	r3, [sp, #15]
 8007212:	f7fe ff27 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007216:	231d      	movs	r3, #29
 8007218:	e719      	b.n	800704e <SX1276Send+0x4a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800721a:	23f7      	movs	r3, #247	; 0xf7
    SX1276WriteBuffer( addr, &data, 1 );
 800721c:	462a      	mov	r2, r5
 800721e:	2011      	movs	r0, #17
 8007220:	f10d 010f 	add.w	r1, sp, #15
 8007224:	f88d 300f 	strb.w	r3, [sp, #15]
 8007228:	f7fe ff1c 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800722c:	462a      	mov	r2, r5
 800722e:	f10d 010f 	add.w	r1, sp, #15
 8007232:	2040      	movs	r0, #64	; 0x40
 8007234:	f7fe ff34 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007238:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 800723c:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800723e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007242:	e75f      	b.n	8007104 <SX1276Send+0x100>
    TimerStop( &RxTimeoutTimer );
 8007244:	4809      	ldr	r0, [pc, #36]	; (800726c <SX1276Send+0x268>)
 8007246:	f7ff f9bf 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800724a:	4809      	ldr	r0, [pc, #36]	; (8007270 <SX1276Send+0x26c>)
 800724c:	f7ff f9bc 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007250:	4809      	ldr	r0, [pc, #36]	; (8007278 <SX1276Send+0x274>)
 8007252:	f7ff f9b9 	bl	80065c8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8007256:	2001      	movs	r0, #1
 8007258:	f7ff fcfc 	bl	8006c54 <SX1276SetOpMode>
                DelayMs( 1 );
 800725c:	2001      	movs	r0, #1
    SX1276.Settings.State = RF_IDLE;
 800725e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
                DelayMs( 1 );
 8007262:	f7ff fa23 	bl	80066ac <DelayMs>
 8007266:	e71e      	b.n	80070a6 <SX1276Send+0xa2>
 8007268:	20001200 	.word	0x20001200
 800726c:	200010e8 	.word	0x200010e8
 8007270:	20001344 	.word	0x20001344
 8007274:	20001100 	.word	0x20001100
 8007278:	200010d0 	.word	0x200010d0

0800727c <SX1276SetSleep>:
{
 800727c:	b500      	push	{lr}
    TimerStop( &RxTimeoutTimer );
 800727e:	4814      	ldr	r0, [pc, #80]	; (80072d0 <SX1276SetSleep+0x54>)
{
 8007280:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 8007282:	f7ff f9a1 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007286:	4813      	ldr	r0, [pc, #76]	; (80072d4 <SX1276SetSleep+0x58>)
 8007288:	f7ff f99e 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800728c:	4812      	ldr	r0, [pc, #72]	; (80072d8 <SX1276SetSleep+0x5c>)
 800728e:	f7ff f99b 	bl	80065c8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8007292:	2001      	movs	r0, #1
 8007294:	f7fe ff92 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8007298:	2201      	movs	r2, #1
 800729a:	4610      	mov	r0, r2
 800729c:	f10d 0107 	add.w	r1, sp, #7
 80072a0:	f7fe fefe 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80072a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80072a8:	2201      	movs	r2, #1
 80072aa:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80072ac:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80072b0:	f10d 0107 	add.w	r1, sp, #7
 80072b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80072b8:	f7fe fed4 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 80072bc:	2000      	movs	r0, #0
 80072be:	f7fe ff7f 	bl	80061c0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <SX1276SetSleep+0x60>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80072ca:	b003      	add	sp, #12
 80072cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80072d0:	200010e8 	.word	0x200010e8
 80072d4:	20001344 	.word	0x20001344
 80072d8:	200010d0 	.word	0x200010d0
 80072dc:	20001200 	.word	0x20001200

080072e0 <SX1276SetStby>:
{
 80072e0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80072e2:	4808      	ldr	r0, [pc, #32]	; (8007304 <SX1276SetStby+0x24>)
 80072e4:	f7ff f970 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80072e8:	4807      	ldr	r0, [pc, #28]	; (8007308 <SX1276SetStby+0x28>)
 80072ea:	f7ff f96d 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80072ee:	4807      	ldr	r0, [pc, #28]	; (800730c <SX1276SetStby+0x2c>)
 80072f0:	f7ff f96a 	bl	80065c8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80072f4:	2001      	movs	r0, #1
 80072f6:	f7ff fcad 	bl	8006c54 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <SX1276SetStby+0x30>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007302:	bd08      	pop	{r3, pc}
 8007304:	200010e8 	.word	0x200010e8
 8007308:	20001344 	.word	0x20001344
 800730c:	200010d0 	.word	0x200010d0
 8007310:	20001200 	.word	0x20001200

08007314 <SX1276SetRx>:
{
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch( SX1276.Settings.Modem )
 8007318:	4cd2      	ldr	r4, [pc, #840]	; (8007664 <SX1276SetRx+0x350>)
{
 800731a:	b082      	sub	sp, #8
 800731c:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
 800731e:	48d2      	ldr	r0, [pc, #840]	; (8007668 <SX1276SetRx+0x354>)
 8007320:	f7ff f952 	bl	80065c8 <TimerStop>
    switch( SX1276.Settings.Modem )
 8007324:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8007328:	2d00      	cmp	r5, #0
 800732a:	d071      	beq.n	8007410 <SX1276SetRx+0xfc>
 800732c:	2d01      	cmp	r5, #1
 800732e:	d14f      	bne.n	80073d0 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007330:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 8007334:	f10d 0707 	add.w	r7, sp, #7
 8007338:	462a      	mov	r2, r5
 800733a:	4639      	mov	r1, r7
 800733c:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800733e:	2b00      	cmp	r3, #0
 8007340:	f040 80bb 	bne.w	80074ba <SX1276SetRx+0x1a6>
    SX1276ReadBuffer( addr, &data, 1 );
 8007344:	f7fe feac 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007348:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800734c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8007350:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 8007354:	462a      	mov	r2, r5
 8007356:	4639      	mov	r1, r7
 8007358:	2033      	movs	r0, #51	; 0x33
 800735a:	f88d 3007 	strb.w	r3, [sp, #7]
 800735e:	f7fe fe81 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007362:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 8007364:	462a      	mov	r2, r5
 8007366:	4639      	mov	r1, r7
 8007368:	203b      	movs	r0, #59	; 0x3b
 800736a:	f88d 3007 	strb.w	r3, [sp, #7]
 800736e:	f7fe fe79 	bl	8006064 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8007372:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007376:	2b08      	cmp	r3, #8
    SX1276ReadBuffer( addr, &data, 1 );
 8007378:	f04f 0201 	mov.w	r2, #1
 800737c:	4639      	mov	r1, r7
 800737e:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8007382:	f200 80de 	bhi.w	8007542 <SX1276SetRx+0x22e>
    SX1276ReadBuffer( addr, &data, 1 );
 8007386:	f7fe fe8b 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800738a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800738e:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8007390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8007394:	4639      	mov	r1, r7
 8007396:	2031      	movs	r0, #49	; 0x31
 8007398:	f88d 3007 	strb.w	r3, [sp, #7]
 800739c:	f7fe fe62 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80073a0:	2300      	movs	r3, #0
    SX1276WriteBuffer( addr, &data, 1 );
 80073a2:	2201      	movs	r2, #1
 80073a4:	4639      	mov	r1, r7
 80073a6:	2030      	movs	r0, #48	; 0x30
 80073a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80073ac:	f7fe fe5a 	bl	8006064 <SX1276WriteBuffer>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80073b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	f200 8097 	bhi.w	80074e8 <SX1276SetRx+0x1d4>
 80073ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 80073be:	0142      	.short	0x0142
 80073c0:	01220132 	.word	0x01220132
 80073c4:	01020112 	.word	0x01020112
 80073c8:	008d00f2 	.word	0x008d00f2
 80073cc:	008d008d 	.word	0x008d008d
    switch( SX1276.Settings.Modem )
 80073d0:	f04f 0800 	mov.w	r8, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 80073d4:	48a5      	ldr	r0, [pc, #660]	; (800766c <SX1276SetRx+0x358>)
 80073d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073da:	2100      	movs	r1, #0
 80073dc:	f009 fd94 	bl	8010f08 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	d15f      	bne.n	80074aa <SX1276SetRx+0x196>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80073ea:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d052      	beq.n	8007498 <SX1276SetRx+0x184>
        if( rxContinuous == true )
 80073f2:	f1b8 0f00 	cmp.w	r8, #0
 80073f6:	d105      	bne.n	8007404 <SX1276SetRx+0xf0>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80073f8:	2006      	movs	r0, #6
}
 80073fa:	b002      	add	sp, #8
 80073fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8007400:	f7ff bc28 	b.w	8006c54 <SX1276SetOpMode>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8007404:	2005      	movs	r0, #5
}
 8007406:	b002      	add	sp, #8
 8007408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800740c:	f7ff bc22 	b.w	8006c54 <SX1276SetOpMode>
    SX1276ReadBuffer( addr, &data, 1 );
 8007410:	2201      	movs	r2, #1
 8007412:	f10d 0107 	add.w	r1, sp, #7
 8007416:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8007418:	f894 8102 	ldrb.w	r8, [r4, #258]	; 0x102
    SX1276ReadBuffer( addr, &data, 1 );
 800741c:	f7fe fe40 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007420:	f89d 3007 	ldrb.w	r3, [sp, #7]
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8007424:	f003 0303 	and.w	r3, r3, #3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8007428:	f043 030c 	orr.w	r3, r3, #12
    SX1276WriteBuffer( addr, &data, 1 );
 800742c:	2201      	movs	r2, #1
 800742e:	f10d 0107 	add.w	r1, sp, #7
 8007432:	2040      	movs	r0, #64	; 0x40
 8007434:	f88d 3007 	strb.w	r3, [sp, #7]
 8007438:	f7fe fe14 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800743c:	2201      	movs	r2, #1
 800743e:	f10d 0107 	add.w	r1, sp, #7
 8007442:	2041      	movs	r0, #65	; 0x41
 8007444:	f7fe fe2c 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800744c:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800744e:	f063 033e 	orn	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 8007452:	f10d 0107 	add.w	r1, sp, #7
 8007456:	2041      	movs	r0, #65	; 0x41
 8007458:	f88d 3007 	strb.w	r3, [sp, #7]
 800745c:	f7fe fe02 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007460:	2201      	movs	r2, #1
 8007462:	f10d 0107 	add.w	r1, sp, #7
 8007466:	2035      	movs	r0, #53	; 0x35
 8007468:	f7fe fe1a 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800746c:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007474:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
    SX1276WriteBuffer( addr, &data, 1 );
 8007478:	f10d 0107 	add.w	r1, sp, #7
 800747c:	231e      	movs	r3, #30
 800747e:	2201      	movs	r2, #1
 8007480:	200d      	movs	r0, #13
 8007482:	f88d 3007 	strb.w	r3, [sp, #7]
 8007486:	f7fe fded 	bl	8006064 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800748a:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800748e:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007492:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
 8007496:	e79d      	b.n	80073d4 <SX1276SetRx+0xc0>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007498:	2005      	movs	r0, #5
 800749a:	f7ff fbdb 	bl	8006c54 <SX1276SetOpMode>
        if( rxContinuous == false )
 800749e:	f1b8 0f00 	cmp.w	r8, #0
 80074a2:	d073      	beq.n	800758c <SX1276SetRx+0x278>
}
 80074a4:	b002      	add	sp, #8
 80074a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TimerSetValue( &RxTimeoutTimer, timeout );
 80074aa:	4871      	ldr	r0, [pc, #452]	; (8007670 <SX1276SetRx+0x35c>)
 80074ac:	4631      	mov	r1, r6
 80074ae:	f7ff f8d3 	bl	8006658 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80074b2:	486f      	ldr	r0, [pc, #444]	; (8007670 <SX1276SetRx+0x35c>)
 80074b4:	f7fe ffc6 	bl	8006444 <TimerStart>
 80074b8:	e797      	b.n	80073ea <SX1276SetRx+0xd6>
    SX1276ReadBuffer( addr, &data, 1 );
 80074ba:	f7fe fdf1 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80074be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80074c2:	462a      	mov	r2, r5
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80074c4:	f043 0341 	orr.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 80074c8:	4639      	mov	r1, r7
 80074ca:	2033      	movs	r0, #51	; 0x33
 80074cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80074d0:	f7fe fdc8 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80074d4:	2319      	movs	r3, #25
 80074d6:	e745      	b.n	8007364 <SX1276SetRx+0x50>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80074d8:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80074da:	2201      	movs	r2, #1
 80074dc:	4639      	mov	r1, r7
 80074de:	202f      	movs	r0, #47	; 0x2f
 80074e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80074e4:	f7fe fdbe 	bl	8006064 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80074e8:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80074ec:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80074f0:	b3d3      	cbz	r3, 8007568 <SX1276SetRx+0x254>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80074f2:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 80074f4:	2201      	movs	r2, #1
 80074f6:	4639      	mov	r1, r7
 80074f8:	2011      	movs	r0, #17
 80074fa:	f88d 3007 	strb.w	r3, [sp, #7]
 80074fe:	f7fe fdb1 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007502:	2201      	movs	r2, #1
 8007504:	4639      	mov	r1, r7
 8007506:	2040      	movs	r0, #64	; 0x40
 8007508:	f7fe fdca 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800750c:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8007510:	f003 0333 	and.w	r3, r3, #51	; 0x33
    SX1276WriteBuffer( addr, &data, 1 );
 8007514:	4639      	mov	r1, r7
 8007516:	2201      	movs	r2, #1
 8007518:	2040      	movs	r0, #64	; 0x40
 800751a:	f88d 3007 	strb.w	r3, [sp, #7]
 800751e:	2500      	movs	r5, #0
 8007520:	f7fe fda0 	bl	8006064 <SX1276WriteBuffer>
 8007524:	4639      	mov	r1, r7
 8007526:	2201      	movs	r2, #1
 8007528:	200f      	movs	r0, #15
 800752a:	f88d 5007 	strb.w	r5, [sp, #7]
 800752e:	f7fe fd99 	bl	8006064 <SX1276WriteBuffer>
 8007532:	4639      	mov	r1, r7
 8007534:	2201      	movs	r2, #1
 8007536:	200d      	movs	r0, #13
 8007538:	f88d 5007 	strb.w	r5, [sp, #7]
 800753c:	f7fe fd92 	bl	8006064 <SX1276WriteBuffer>
        break;
 8007540:	e748      	b.n	80073d4 <SX1276SetRx+0xc0>
    SX1276ReadBuffer( addr, &data, 1 );
 8007542:	f7fe fdad 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007546:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800754a:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800754c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8007550:	4639      	mov	r1, r7
 8007552:	2031      	movs	r0, #49	; 0x31
 8007554:	f88d 3007 	strb.w	r3, [sp, #7]
 8007558:	f7fe fd84 	bl	8006064 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800755c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8007560:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1c4      	bne.n	80074f2 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007568:	231f      	movs	r3, #31
    SX1276WriteBuffer( addr, &data, 1 );
 800756a:	2201      	movs	r2, #1
 800756c:	4639      	mov	r1, r7
 800756e:	2011      	movs	r0, #17
 8007570:	f88d 3007 	strb.w	r3, [sp, #7]
 8007574:	f7fe fd76 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007578:	2201      	movs	r2, #1
 800757a:	4639      	mov	r1, r7
 800757c:	2040      	movs	r0, #64	; 0x40
 800757e:	f7fe fd8f 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007582:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8007586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800758a:	e7c3      	b.n	8007514 <SX1276SetRx+0x200>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800758c:	4839      	ldr	r0, [pc, #228]	; (8007674 <SX1276SetRx+0x360>)
 800758e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 8007592:	f7ff f861 	bl	8006658 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8007596:	4837      	ldr	r0, [pc, #220]	; (8007674 <SX1276SetRx+0x360>)
}
 8007598:	b002      	add	sp, #8
 800759a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            TimerStart( &RxTimeoutSyncWord );
 800759e:	f7fe bf51 	b.w	8006444 <TimerStart>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80075a2:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 80075a4:	2201      	movs	r2, #1
 80075a6:	4639      	mov	r1, r7
 80075a8:	202f      	movs	r0, #47	; 0x2f
 80075aa:	f88d 3007 	strb.w	r3, [sp, #7]
 80075ae:	f7fe fd59 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80075b2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80075b6:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 80075ba:	30c6      	adds	r0, #198	; 0xc6
 80075bc:	f7ff fbc4 	bl	8006d48 <SX1276SetChannel>
                    break;
 80075c0:	e792      	b.n	80074e8 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80075c2:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 80075c4:	2201      	movs	r2, #1
 80075c6:	4639      	mov	r1, r7
 80075c8:	202f      	movs	r0, #47	; 0x2f
 80075ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80075ce:	f7fe fd49 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80075d2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80075d6:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 80075da:	3012      	adds	r0, #18
 80075dc:	f7ff fbb4 	bl	8006d48 <SX1276SetChannel>
                    break;
 80075e0:	e782      	b.n	80074e8 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80075e2:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 80075e4:	2201      	movs	r2, #1
 80075e6:	4639      	mov	r1, r7
 80075e8:	202f      	movs	r0, #47	; 0x2f
 80075ea:	f88d 3007 	strb.w	r3, [sp, #7]
 80075ee:	f7fe fd39 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80075f2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80075f6:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 80075fa:	305e      	adds	r0, #94	; 0x5e
 80075fc:	f7ff fba4 	bl	8006d48 <SX1276SetChannel>
                    break;
 8007600:	e772      	b.n	80074e8 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007602:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8007604:	2201      	movs	r2, #1
 8007606:	4639      	mov	r1, r7
 8007608:	202f      	movs	r0, #47	; 0x2f
 800760a:	f88d 3007 	strb.w	r3, [sp, #7]
 800760e:	f7fe fd29 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8007612:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8007616:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 800761a:	3004      	adds	r0, #4
 800761c:	f7ff fb94 	bl	8006d48 <SX1276SetChannel>
                    break;
 8007620:	e762      	b.n	80074e8 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007622:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8007624:	2201      	movs	r2, #1
 8007626:	4639      	mov	r1, r7
 8007628:	202f      	movs	r0, #47	; 0x2f
 800762a:	f88d 3007 	strb.w	r3, [sp, #7]
 800762e:	f7fe fd19 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8007632:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8007636:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 800763a:	3034      	adds	r0, #52	; 0x34
 800763c:	f7ff fb84 	bl	8006d48 <SX1276SetChannel>
                    break;
 8007640:	e752      	b.n	80074e8 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8007642:	2348      	movs	r3, #72	; 0x48
    SX1276WriteBuffer( addr, &data, 1 );
 8007644:	2201      	movs	r2, #1
 8007646:	4639      	mov	r1, r7
 8007648:	202f      	movs	r0, #47	; 0x2f
 800764a:	f88d 3007 	strb.w	r3, [sp, #7]
 800764e:	f7fe fd09 	bl	8006064 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8007652:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8007656:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 800765a:	3002      	adds	r0, #2
 800765c:	f7ff fb74 	bl	8006d48 <SX1276SetChannel>
                    break;
 8007660:	e742      	b.n	80074e8 <SX1276SetRx+0x1d4>
 8007662:	bf00      	nop
 8007664:	20001200 	.word	0x20001200
 8007668:	20001344 	.word	0x20001344
 800766c:	20001100 	.word	0x20001100
 8007670:	200010e8 	.word	0x200010e8
 8007674:	200010d0 	.word	0x200010d0

08007678 <SX1276SetModem>:
{
 8007678:	b530      	push	{r4, r5, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800767a:	2201      	movs	r2, #1
{
 800767c:	b083      	sub	sp, #12
 800767e:	4604      	mov	r4, r0
    SX1276ReadBuffer( addr, &data, 1 );
 8007680:	f10d 0107 	add.w	r1, sp, #7
 8007684:	4610      	mov	r0, r2
 8007686:	f7fe fd0b 	bl	80060a0 <SX1276ReadBuffer>
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800768a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if( SX1276.Settings.Modem == modem )
 800768e:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
 8007692:	d079      	beq.n	8007788 <SX1276SetModem+0x110>
    SX1276.Settings.Modem = modem;
 8007694:	4b3f      	ldr	r3, [pc, #252]	; (8007794 <SX1276SetModem+0x11c>)
    switch( SX1276.Settings.Modem )
 8007696:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 8007698:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 800769c:	d03a      	beq.n	8007714 <SX1276SetModem+0x9c>
        SX1276SetAntSwLowPower( true );
 800769e:	2001      	movs	r0, #1
 80076a0:	f7fe fd8c 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80076a4:	2201      	movs	r2, #1
 80076a6:	f10d 0107 	add.w	r1, sp, #7
 80076aa:	4610      	mov	r0, r2
 80076ac:	f7fe fcf8 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80076b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80076b4:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80076b6:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80076ba:	f10d 0107 	add.w	r1, sp, #7
 80076be:	4610      	mov	r0, r2
 80076c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80076c4:	f7fe fcce 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80076c8:	2201      	movs	r2, #1
 80076ca:	f10d 0107 	add.w	r1, sp, #7
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fe fce6 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80076d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80076d8:	2201      	movs	r2, #1
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80076da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 80076de:	f10d 0107 	add.w	r1, sp, #7
 80076e2:	4610      	mov	r0, r2
 80076e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80076e8:	f7fe fcbc 	bl	8006064 <SX1276WriteBuffer>
 80076ec:	f10d 0107 	add.w	r1, sp, #7
 80076f0:	2300      	movs	r3, #0
 80076f2:	2201      	movs	r2, #1
 80076f4:	2040      	movs	r0, #64	; 0x40
 80076f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80076fa:	f7fe fcb3 	bl	8006064 <SX1276WriteBuffer>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80076fe:	2330      	movs	r3, #48	; 0x30
    SX1276WriteBuffer( addr, &data, 1 );
 8007700:	2201      	movs	r2, #1
 8007702:	f10d 0107 	add.w	r1, sp, #7
 8007706:	2041      	movs	r0, #65	; 0x41
 8007708:	f88d 3007 	strb.w	r3, [sp, #7]
 800770c:	f7fe fcaa 	bl	8006064 <SX1276WriteBuffer>
}
 8007710:	b003      	add	sp, #12
 8007712:	bd30      	pop	{r4, r5, pc}
        SX1276SetAntSwLowPower( true );
 8007714:	4620      	mov	r0, r4
 8007716:	f7fe fd51 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 800771a:	4622      	mov	r2, r4
 800771c:	f10d 0107 	add.w	r1, sp, #7
 8007720:	4620      	mov	r0, r4
 8007722:	f7fe fcbd 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800772a:	4622      	mov	r2, r4
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800772c:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8007730:	f10d 0107 	add.w	r1, sp, #7
 8007734:	4620      	mov	r0, r4
 8007736:	f88d 3007 	strb.w	r3, [sp, #7]
 800773a:	f7fe fc93 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800773e:	4622      	mov	r2, r4
 8007740:	f10d 0107 	add.w	r1, sp, #7
 8007744:	4620      	mov	r0, r4
 8007746:	f7fe fcab 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800774a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800774e:	4622      	mov	r2, r4
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8007750:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8007754:	f10d 0107 	add.w	r1, sp, #7
 8007758:	4620      	mov	r0, r4
 800775a:	f88d 3007 	strb.w	r3, [sp, #7]
 800775e:	2500      	movs	r5, #0
 8007760:	f7fe fc80 	bl	8006064 <SX1276WriteBuffer>
 8007764:	4622      	mov	r2, r4
 8007766:	f10d 0107 	add.w	r1, sp, #7
 800776a:	2040      	movs	r0, #64	; 0x40
 800776c:	f88d 5007 	strb.w	r5, [sp, #7]
 8007770:	f7fe fc78 	bl	8006064 <SX1276WriteBuffer>
 8007774:	4622      	mov	r2, r4
 8007776:	f10d 0107 	add.w	r1, sp, #7
 800777a:	2041      	movs	r0, #65	; 0x41
 800777c:	f88d 5007 	strb.w	r5, [sp, #7]
 8007780:	f7fe fc70 	bl	8006064 <SX1276WriteBuffer>
}
 8007784:	b003      	add	sp, #12
 8007786:	bd30      	pop	{r4, r5, pc}
 8007788:	09da      	lsrs	r2, r3, #7
 800778a:	4b02      	ldr	r3, [pc, #8]	; (8007794 <SX1276SetModem+0x11c>)
 800778c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8007790:	b003      	add	sp, #12
 8007792:	bd30      	pop	{r4, r5, pc}
 8007794:	20001200 	.word	0x20001200

08007798 <SX1276Init>:
{
 8007798:	b530      	push	{r4, r5, lr}
    RadioEvents = events;
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <SX1276Init+0x94>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800779c:	4924      	ldr	r1, [pc, #144]	; (8007830 <SX1276Init+0x98>)
 800779e:	4c25      	ldr	r4, [pc, #148]	; (8007834 <SX1276Init+0x9c>)
{
 80077a0:	b083      	sub	sp, #12
 80077a2:	4602      	mov	r2, r0
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80077a4:	4824      	ldr	r0, [pc, #144]	; (8007838 <SX1276Init+0xa0>)
    RadioEvents = events;
 80077a6:	601a      	str	r2, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80077a8:	f7fe fe44 	bl	8006434 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80077ac:	4920      	ldr	r1, [pc, #128]	; (8007830 <SX1276Init+0x98>)
 80077ae:	4823      	ldr	r0, [pc, #140]	; (800783c <SX1276Init+0xa4>)
 80077b0:	f7fe fe40 	bl	8006434 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80077b4:	491e      	ldr	r1, [pc, #120]	; (8007830 <SX1276Init+0x98>)
 80077b6:	4822      	ldr	r0, [pc, #136]	; (8007840 <SX1276Init+0xa8>)
 80077b8:	f7fe fe3c 	bl	8006434 <TimerInit>
    SX1276Reset( );
 80077bc:	f7fe fd04 	bl	80061c8 <SX1276Reset>
    RxChainCalibration( );
 80077c0:	f7ff faf8 	bl	8006db4 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 80077c4:	2001      	movs	r0, #1
 80077c6:	f7fe fcf9 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80077ca:	2201      	movs	r2, #1
 80077cc:	4610      	mov	r0, r2
 80077ce:	f10d 0107 	add.w	r1, sp, #7
 80077d2:	f7fe fc65 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80077d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80077da:	2201      	movs	r2, #1
 80077dc:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80077de:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80077e2:	f10d 0107 	add.w	r1, sp, #7
 80077e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80077ea:	f7fe fc3b 	bl	8006064 <SX1276WriteBuffer>
    SX1276IoIrqInit( DioIrq );
 80077ee:	4815      	ldr	r0, [pc, #84]	; (8007844 <SX1276Init+0xac>)
 80077f0:	f7fe fd0e 	bl	8006210 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80077f4:	f104 052d 	add.w	r5, r4, #45	; 0x2d
    SX1276IoIrqInit( DioIrq );
 80077f8:	2000      	movs	r0, #0
 80077fa:	e001      	b.n	8007800 <SX1276Init+0x68>
        SX1276SetModem( RadioRegsInit[i].Modem );
 80077fc:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8007800:	f7ff ff3a 	bl	8007678 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007804:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 8007806:	7860      	ldrb	r0, [r4, #1]
 8007808:	f88d 3007 	strb.w	r3, [sp, #7]
 800780c:	2201      	movs	r2, #1
 800780e:	f10d 0107 	add.w	r1, sp, #7
 8007812:	f7fe fc27 	bl	8006064 <SX1276WriteBuffer>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007816:	42ac      	cmp	r4, r5
 8007818:	d1f0      	bne.n	80077fc <SX1276Init+0x64>
    SX1276SetModem( MODEM_FSK );
 800781a:	2000      	movs	r0, #0
 800781c:	f7ff ff2c 	bl	8007678 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <SX1276Init+0xb0>)
 8007822:	2200      	movs	r2, #0
 8007824:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007828:	b003      	add	sp, #12
 800782a:	bd30      	pop	{r4, r5, pc}
 800782c:	200010cc 	.word	0x200010cc
 8007830:	08008235 	.word	0x08008235
 8007834:	080122d8 	.word	0x080122d8
 8007838:	20001344 	.word	0x20001344
 800783c:	200010e8 	.word	0x200010e8
 8007840:	200010d0 	.word	0x200010d0
 8007844:	20000274 	.word	0x20000274
 8007848:	20001200 	.word	0x20001200

0800784c <SX1276IsChannelFree>:
{
 800784c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007850:	4681      	mov	r9, r0
 8007852:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 8007854:	484d      	ldr	r0, [pc, #308]	; (800798c <SX1276IsChannelFree+0x140>)
    SX1276.Settings.State = RF_IDLE;
 8007856:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8007990 <SX1276IsChannelFree+0x144>
{
 800785a:	461e      	mov	r6, r3
 800785c:	460d      	mov	r5, r1
 800785e:	4617      	mov	r7, r2
    TimerStop( &RxTimeoutTimer );
 8007860:	f7fe feb2 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007864:	484b      	ldr	r0, [pc, #300]	; (8007994 <SX1276IsChannelFree+0x148>)
 8007866:	f7fe feaf 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800786a:	484b      	ldr	r0, [pc, #300]	; (8007998 <SX1276IsChannelFree+0x14c>)
 800786c:	f7fe feac 	bl	80065c8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8007870:	2001      	movs	r0, #1
 8007872:	f7fe fca3 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8007876:	2201      	movs	r2, #1
 8007878:	4610      	mov	r0, r2
 800787a:	f10d 0107 	add.w	r1, sp, #7
 800787e:	f7fe fc0f 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007882:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8007886:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007888:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800788c:	4610      	mov	r0, r2
    SX1276.Settings.State = RF_IDLE;
 800788e:	2400      	movs	r4, #0
    SX1276WriteBuffer( addr, &data, 1 );
 8007890:	f10d 0107 	add.w	r1, sp, #7
 8007894:	f88d 3007 	strb.w	r3, [sp, #7]
 8007898:	f7fe fbe4 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 800789c:	4620      	mov	r0, r4
 800789e:	f7fe fc8f 	bl	80061c0 <SX1276SetBoardTcxo>
    SX1276SetModem( MODEM_FSK );
 80078a2:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 80078a4:	f888 40e0 	strb.w	r4, [r8, #224]	; 0xe0
    SX1276SetModem( MODEM_FSK );
 80078a8:	f7ff fee6 	bl	8007678 <SX1276SetModem>
    SX1276SetChannel( freq );
 80078ac:	4648      	mov	r0, r9
 80078ae:	f7ff fa4b 	bl	8006d48 <SX1276SetChannel>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80078b2:	4a3a      	ldr	r2, [pc, #232]	; (800799c <SX1276IsChannelFree+0x150>)
    SX1276SetChannel( freq );
 80078b4:	4620      	mov	r0, r4
 80078b6:	f640 2328 	movw	r3, #2600	; 0xa28
 80078ba:	4614      	mov	r4, r2
 80078bc:	e001      	b.n	80078c2 <SX1276IsChannelFree+0x76>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80078be:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80078c2:	429d      	cmp	r5, r3
 80078c4:	d302      	bcc.n	80078cc <SX1276IsChannelFree+0x80>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	429d      	cmp	r5, r3
 80078ca:	d303      	bcc.n	80078d4 <SX1276IsChannelFree+0x88>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80078cc:	3001      	adds	r0, #1
 80078ce:	2815      	cmp	r0, #21
 80078d0:	d1f5      	bne.n	80078be <SX1276IsChannelFree+0x72>
    while( 1 );
 80078d2:	e7fe      	b.n	80078d2 <SX1276IsChannelFree+0x86>
            return FskBandwidths[i].RegValue;
 80078d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 80078d8:	f10d 0107 	add.w	r1, sp, #7
            return FskBandwidths[i].RegValue;
 80078dc:	7914      	ldrb	r4, [r2, #4]
 80078de:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80078e2:	2201      	movs	r2, #1
 80078e4:	2012      	movs	r0, #18
 80078e6:	f7fe fbbd 	bl	8006064 <SX1276WriteBuffer>
 80078ea:	2201      	movs	r2, #1
 80078ec:	f10d 0107 	add.w	r1, sp, #7
 80078f0:	2013      	movs	r0, #19
 80078f2:	f88d 4007 	strb.w	r4, [sp, #7]
 80078f6:	f7fe fbb5 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80078fa:	2005      	movs	r0, #5
 80078fc:	f7ff f9aa 	bl	8006c54 <SX1276SetOpMode>
    DelayMs( 1 );
 8007900:	2001      	movs	r0, #1
 8007902:	f7fe fed3 	bl	80066ac <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8007906:	f7fe feb9 	bl	800667c <TimerGetCurrentTime>
 800790a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800790c:	e007      	b.n	800791e <SX1276IsChannelFree+0xd2>
    SX1276ReadBuffer( addr, &data, 1 );
 800790e:	f7fe fbc7 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007912:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	425b      	negs	r3, r3
        if( rssi > rssiThresh )
 800791a:	429f      	cmp	r7, r3
 800791c:	db34      	blt.n	8007988 <SX1276IsChannelFree+0x13c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800791e:	4620      	mov	r0, r4
 8007920:	f7fe feb4 	bl	800668c <TimerGetElapsedTime>
 8007924:	4603      	mov	r3, r0
 8007926:	42b3      	cmp	r3, r6
    SX1276ReadBuffer( addr, &data, 1 );
 8007928:	f04f 0201 	mov.w	r2, #1
 800792c:	f10d 0107 	add.w	r1, sp, #7
 8007930:	f04f 0011 	mov.w	r0, #17
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007934:	d3eb      	bcc.n	800790e <SX1276IsChannelFree+0xc2>
    bool status = true;
 8007936:	4614      	mov	r4, r2
    TimerStop( &RxTimeoutTimer );
 8007938:	4814      	ldr	r0, [pc, #80]	; (800798c <SX1276IsChannelFree+0x140>)
 800793a:	f7fe fe45 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800793e:	4815      	ldr	r0, [pc, #84]	; (8007994 <SX1276IsChannelFree+0x148>)
 8007940:	f7fe fe42 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007944:	4814      	ldr	r0, [pc, #80]	; (8007998 <SX1276IsChannelFree+0x14c>)
 8007946:	f7fe fe3f 	bl	80065c8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 800794a:	2001      	movs	r0, #1
 800794c:	f7fe fc36 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8007950:	2201      	movs	r2, #1
 8007952:	f10d 0107 	add.w	r1, sp, #7
 8007956:	4610      	mov	r0, r2
 8007958:	f7fe fba2 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800795c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8007960:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007962:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8007966:	4610      	mov	r0, r2
 8007968:	f10d 0107 	add.w	r1, sp, #7
 800796c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007970:	f7fe fb78 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8007974:	2000      	movs	r0, #0
 8007976:	f7fe fc23 	bl	80061c0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 800797e:	f888 30e0 	strb.w	r3, [r8, #224]	; 0xe0
}
 8007982:	b003      	add	sp, #12
 8007984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            status = false;
 8007988:	2400      	movs	r4, #0
 800798a:	e7d5      	b.n	8007938 <SX1276IsChannelFree+0xec>
 800798c:	200010e8 	.word	0x200010e8
 8007990:	20001200 	.word	0x20001200
 8007994:	20001344 	.word	0x20001344
 8007998:	200010d0 	.word	0x200010d0
 800799c:	08012228 	.word	0x08012228

080079a0 <SX1276Random>:
{
 80079a0:	b530      	push	{r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 80079a2:	2001      	movs	r0, #1
{
 80079a4:	b083      	sub	sp, #12
    SX1276SetModem( MODEM_LORA );
 80079a6:	f7ff fe67 	bl	8007678 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80079aa:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 80079ac:	2201      	movs	r2, #1
 80079ae:	f10d 0107 	add.w	r1, sp, #7
 80079b2:	2011      	movs	r0, #17
 80079b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80079b8:	f7fe fb54 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80079bc:	2005      	movs	r0, #5
 80079be:	f7ff f949 	bl	8006c54 <SX1276SetOpMode>
 80079c2:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 80079c4:	4625      	mov	r5, r4
        DelayMs( 1 );
 80079c6:	2001      	movs	r0, #1
 80079c8:	f7fe fe70 	bl	80066ac <DelayMs>
    SX1276ReadBuffer( addr, &data, 1 );
 80079cc:	2201      	movs	r2, #1
 80079ce:	f10d 0107 	add.w	r1, sp, #7
 80079d2:	202c      	movs	r0, #44	; 0x2c
 80079d4:	f7fe fb64 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80079d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	40a3      	lsls	r3, r4
    for( i = 0; i < 32; i++ )
 80079e2:	3401      	adds	r4, #1
 80079e4:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80079e6:	ea45 0503 	orr.w	r5, r5, r3
    for( i = 0; i < 32; i++ )
 80079ea:	d1ec      	bne.n	80079c6 <SX1276Random+0x26>
    TimerStop( &RxTimeoutTimer );
 80079ec:	4813      	ldr	r0, [pc, #76]	; (8007a3c <SX1276Random+0x9c>)
 80079ee:	f7fe fdeb 	bl	80065c8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80079f2:	4813      	ldr	r0, [pc, #76]	; (8007a40 <SX1276Random+0xa0>)
 80079f4:	f7fe fde8 	bl	80065c8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80079f8:	4812      	ldr	r0, [pc, #72]	; (8007a44 <SX1276Random+0xa4>)
 80079fa:	f7fe fde5 	bl	80065c8 <TimerStop>
        SX1276SetAntSwLowPower( true );
 80079fe:	2001      	movs	r0, #1
 8007a00:	f7fe fbdc 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8007a04:	2201      	movs	r2, #1
 8007a06:	4610      	mov	r0, r2
 8007a08:	f10d 0107 	add.w	r1, sp, #7
 8007a0c:	f7fe fb48 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8007a14:	2201      	movs	r2, #1
 8007a16:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007a18:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8007a1c:	f10d 0107 	add.w	r1, sp, #7
 8007a20:	f88d 3007 	strb.w	r3, [sp, #7]
 8007a24:	f7fe fb1e 	bl	8006064 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7fe fbc9 	bl	80061c0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <SX1276Random+0xa8>)
 8007a30:	2200      	movs	r2, #0
}
 8007a32:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_IDLE;
 8007a34:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007a38:	b003      	add	sp, #12
 8007a3a:	bd30      	pop	{r4, r5, pc}
 8007a3c:	200010e8 	.word	0x200010e8
 8007a40:	20001344 	.word	0x20001344
 8007a44:	200010d0 	.word	0x200010d0
 8007a48:	20001200 	.word	0x20001200

08007a4c <SX1276SetRxConfig>:
{
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	b089      	sub	sp, #36	; 0x24
 8007a52:	461e      	mov	r6, r3
 8007a54:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8007a5e:	9303      	str	r3, [sp, #12]
 8007a60:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8007a72:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 8007a76:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 8007a7a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8007a7e:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	468b      	mov	fp, r1
 8007a86:	4615      	mov	r5, r2
    SX1276SetModem( modem );
 8007a88:	f7ff fdf6 	bl	8007678 <SX1276SetModem>
    switch( modem )
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	f000 80c3 	beq.w	8007c18 <SX1276SetRxConfig+0x1cc>
 8007a92:	2c01      	cmp	r4, #1
 8007a94:	f040 80bc 	bne.w	8007c10 <SX1276SetRxConfig+0x1c4>
            if( bandwidth > 2 )
 8007a98:	f1bb 0f02 	cmp.w	fp, #2
 8007a9c:	f200 80bb 	bhi.w	8007c16 <SX1276SetRxConfig+0x1ca>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007aa0:	4bbf      	ldr	r3, [pc, #764]	; (8007da0 <SX1276SetRxConfig+0x354>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8007aa2:	9a04      	ldr	r2, [sp, #16]
 8007aa4:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8007aa8:	2d06      	cmp	r5, #6
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007aaa:	9a05      	ldr	r2, [sp, #20]
 8007aac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8007ab0:	f883 8132 	strb.w	r8, [r3, #306]	; 0x132
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8007aba:	46a8      	mov	r8, r5
 8007abc:	bf38      	it	cc
 8007abe:	f04f 0806 	movcc.w	r8, #6
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8007ac2:	9a03      	ldr	r2, [sp, #12]
 8007ac4:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
            bandwidth += 7;
 8007ac8:	f10b 0407 	add.w	r4, fp, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007acc:	f1b8 0f0c 	cmp.w	r8, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007ad0:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007ad2:	f883 9131 	strb.w	r9, [r3, #305]	; 0x131
 8007ad6:	bf28      	it	cs
 8007ad8:	f04f 080c 	movcs.w	r8, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007adc:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8007ade:	e9c3 4548 	strd	r4, r5, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 8007ae2:	f883 6129 	strb.w	r6, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007ae6:	f8a3 a12a 	strh.w	sl, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007aea:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007aee:	f000 8120 	beq.w	8007d32 <SX1276SetRxConfig+0x2e6>
 8007af2:	2c08      	cmp	r4, #8
 8007af4:	f000 814e 	beq.w	8007d94 <SX1276SetRxConfig+0x348>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007af8:	2200      	movs	r2, #0
    SX1276ReadBuffer( addr, &data, 1 );
 8007afa:	f10d 091f 	add.w	r9, sp, #31
 8007afe:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8007b02:	4649      	mov	r1, r9
 8007b04:	2201      	movs	r2, #1
 8007b06:	201d      	movs	r0, #29
 8007b08:	f7fe faca 	bl	80060a0 <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007b0c:	f8dd b004 	ldr.w	fp, [sp, #4]
 8007b10:	ea4b 0246 	orr.w	r2, fp, r6, lsl #1
 8007b14:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8007b18:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	2201      	movs	r2, #1
 8007b20:	201d      	movs	r0, #29
 8007b22:	f7fe fa9f 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007b26:	2201      	movs	r2, #1
 8007b28:	4649      	mov	r1, r9
 8007b2a:	201e      	movs	r0, #30
 8007b2c:	f7fe fab8 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007b30:	f89d 201f 	ldrb.w	r2, [sp, #31]
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007b34:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8007b36:	f002 0108 	and.w	r1, r2, #8
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8007b3a:	f3c7 2201 	ubfx	r2, r7, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8007b44:	ea42 1808 	orr.w	r8, r2, r8, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 8007b48:	4649      	mov	r1, r9
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	201e      	movs	r0, #30
 8007b4e:	f88d 801f 	strb.w	r8, [sp, #31]
 8007b52:	f7fe fa87 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007b56:	2201      	movs	r2, #1
 8007b58:	4649      	mov	r1, r9
 8007b5a:	2026      	movs	r0, #38	; 0x26
 8007b5c:	f7fe faa0 	bl	80060a0 <SX1276ReadBuffer>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007b60:	4b8f      	ldr	r3, [pc, #572]	; (8007da0 <SX1276SetRxConfig+0x354>)
    return data;
 8007b62:	f89d 201f 	ldrb.w	r2, [sp, #31]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007b66:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007b6a:	f022 0208 	bic.w	r2, r2, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007b6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007b72:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007b76:	4649      	mov	r1, r9
 8007b78:	2201      	movs	r2, #1
 8007b7a:	2026      	movs	r0, #38	; 0x26
 8007b7c:	f7fe fa72 	bl	8006064 <SX1276WriteBuffer>
 8007b80:	2201      	movs	r2, #1
 8007b82:	4649      	mov	r1, r9
 8007b84:	201f      	movs	r0, #31
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8007b86:	f88d 701f 	strb.w	r7, [sp, #31]
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007b8a:	ea4f 261a 	mov.w	r6, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007b8e:	f7fe fa69 	bl	8006064 <SX1276WriteBuffer>
 8007b92:	2201      	movs	r2, #1
 8007b94:	4649      	mov	r1, r9
 8007b96:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007b98:	f88d 601f 	strb.w	r6, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007b9c:	f7fe fa62 	bl	8006064 <SX1276WriteBuffer>
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007ba6:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007baa:	f7fe fa5b 	bl	8006064 <SX1276WriteBuffer>
            if( fixLen == 1 )
 8007bae:	465a      	mov	r2, fp
 8007bb0:	4b7b      	ldr	r3, [pc, #492]	; (8007da0 <SX1276SetRxConfig+0x354>)
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	f040 80e0 	bne.w	8007d78 <SX1276SetRxConfig+0x32c>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007bb8:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
 8007bbc:	2a00      	cmp	r2, #0
 8007bbe:	f040 80bf 	bne.w	8007d40 <SX1276SetRxConfig+0x2f4>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007bc2:	2c09      	cmp	r4, #9
 8007bc4:	f000 809c 	beq.w	8007d00 <SX1276SetRxConfig+0x2b4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8007bc8:	2303      	movs	r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4649      	mov	r1, r9
 8007bce:	2036      	movs	r0, #54	; 0x36
 8007bd0:	f88d 301f 	strb.w	r3, [sp, #31]
 8007bd4:	f7fe fa46 	bl	8006064 <SX1276WriteBuffer>
            if( datarate == 6 )
 8007bd8:	2d06      	cmp	r5, #6
 8007bda:	d97d      	bls.n	8007cd8 <SX1276SetRxConfig+0x28c>
    SX1276ReadBuffer( addr, &data, 1 );
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4649      	mov	r1, r9
 8007be0:	2031      	movs	r0, #49	; 0x31
 8007be2:	f7fe fa5d 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007be6:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007bea:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007bee:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	2031      	movs	r0, #49	; 0x31
 8007bf8:	f88d 301f 	strb.w	r3, [sp, #31]
 8007bfc:	f7fe fa32 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007c00:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8007c02:	2201      	movs	r2, #1
 8007c04:	4649      	mov	r1, r9
 8007c06:	2037      	movs	r0, #55	; 0x37
 8007c08:	f88d 301f 	strb.w	r3, [sp, #31]
 8007c0c:	f7fe fa2a 	bl	8006064 <SX1276WriteBuffer>
}
 8007c10:	b009      	add	sp, #36	; 0x24
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 8007c16:	e7fe      	b.n	8007c16 <SX1276SetRxConfig+0x1ca>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007c18:	4b61      	ldr	r3, [pc, #388]	; (8007da0 <SX1276SetRxConfig+0x354>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8007c1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c1c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007c20:	9a01      	ldr	r2, [sp, #4]
 8007c22:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8007c26:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007c28:	f883 9101 	strb.w	r9, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8007c2c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8007c30:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007c34:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8007c36:	f883 8102 	strb.w	r8, [r3, #258]	; 0x102
    SX1276WriteBuffer( addr, &data, 1 );
 8007c3a:	f10d 091f 	add.w	r9, sp, #31
            SX1276.Settings.Fsk.Datarate = datarate;
 8007c3e:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007c42:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8007c46:	fb0e f707 	mul.w	r7, lr, r7
 8007c4a:	4e56      	ldr	r6, [pc, #344]	; (8007da4 <SX1276SetRxConfig+0x358>)
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8007c4c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8007da8 <SX1276SetRxConfig+0x35c>
 8007c50:	fbb8 f8f5 	udiv	r8, r8, r5
    SX1276WriteBuffer( addr, &data, 1 );
 8007c54:	2201      	movs	r2, #1
 8007c56:	4649      	mov	r1, r9
 8007c58:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8007c5a:	fbb7 f5f5 	udiv	r5, r7, r5
 8007c5e:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8007c62:	ea4f 2518 	mov.w	r5, r8, lsr #8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007c66:	f8c3 b0f0 	str.w	fp, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007c6a:	f8a3 a0fc 	strh.w	sl, [r3, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8007c6e:	f88d 501f 	strb.w	r5, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007c72:	f7fe f9f7 	bl	8006064 <SX1276WriteBuffer>
 8007c76:	2201      	movs	r2, #1
 8007c78:	4649      	mov	r1, r9
 8007c7a:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8007c7c:	f88d 801f 	strb.w	r8, [sp, #31]
 8007c80:	4635      	mov	r5, r6
    SX1276WriteBuffer( addr, &data, 1 );
 8007c82:	f7fe f9ef 	bl	8006064 <SX1276WriteBuffer>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8007c86:	4631      	mov	r1, r6
 8007c88:	f640 2228 	movw	r2, #2600	; 0xa28
 8007c8c:	e001      	b.n	8007c92 <SX1276SetRxConfig+0x246>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007c8e:	f851 2f08 	ldr.w	r2, [r1, #8]!
 8007c92:	4593      	cmp	fp, r2
 8007c94:	d302      	bcc.n	8007c9c <SX1276SetRxConfig+0x250>
 8007c96:	688b      	ldr	r3, [r1, #8]
 8007c98:	459b      	cmp	fp, r3
 8007c9a:	d303      	bcc.n	8007ca4 <SX1276SetRxConfig+0x258>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007c9c:	3401      	adds	r4, #1
 8007c9e:	2c15      	cmp	r4, #21
 8007ca0:	d1f5      	bne.n	8007c8e <SX1276SetRxConfig+0x242>
    while( 1 );
 8007ca2:	e7fe      	b.n	8007ca2 <SX1276SetRxConfig+0x256>
            return FskBandwidths[i].RegValue;
 8007ca4:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007ca8:	2201      	movs	r2, #1
 8007caa:	7923      	ldrb	r3, [r4, #4]
 8007cac:	f88d 301f 	strb.w	r3, [sp, #31]
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	2012      	movs	r0, #18
 8007cb4:	f7fe f9d6 	bl	8006064 <SX1276WriteBuffer>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007cb8:	9912      	ldr	r1, [sp, #72]	; 0x48
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f640 2228 	movw	r2, #2600	; 0xa28
 8007cc0:	e001      	b.n	8007cc6 <SX1276SetRxConfig+0x27a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007cc2:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d302      	bcc.n	8007cd0 <SX1276SetRxConfig+0x284>
 8007cca:	68b2      	ldr	r2, [r6, #8]
 8007ccc:	4291      	cmp	r1, r2
 8007cce:	d36f      	bcc.n	8007db0 <SX1276SetRxConfig+0x364>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	2b15      	cmp	r3, #21
 8007cd4:	d1f5      	bne.n	8007cc2 <SX1276SetRxConfig+0x276>
    while( 1 );
 8007cd6:	e7fe      	b.n	8007cd6 <SX1276SetRxConfig+0x28a>
    SX1276ReadBuffer( addr, &data, 1 );
 8007cd8:	4649      	mov	r1, r9
 8007cda:	2201      	movs	r2, #1
 8007cdc:	2031      	movs	r0, #49	; 0x31
 8007cde:	f7fe f9df 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007ce2:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007ce6:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007cea:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8007cee:	4649      	mov	r1, r9
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	2031      	movs	r0, #49	; 0x31
 8007cf4:	f88d 301f 	strb.w	r3, [sp, #31]
 8007cf8:	f7fe f9b4 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	e780      	b.n	8007c02 <SX1276SetRxConfig+0x1b6>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007d00:	4a2a      	ldr	r2, [pc, #168]	; (8007dac <SX1276SetRxConfig+0x360>)
 8007d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d06:	4293      	cmp	r3, r2
 8007d08:	f04f 0302 	mov.w	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	f04f 0201 	mov.w	r2, #1
 8007d12:	f88d 301f 	strb.w	r3, [sp, #31]
 8007d16:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007d1a:	d837      	bhi.n	8007d8c <SX1276SetRxConfig+0x340>
    SX1276WriteBuffer( addr, &data, 1 );
 8007d1c:	f7fe f9a2 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8007d20:	237f      	movs	r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8007d22:	2201      	movs	r2, #1
 8007d24:	4649      	mov	r1, r9
 8007d26:	203a      	movs	r0, #58	; 0x3a
 8007d28:	f88d 301f 	strb.w	r3, [sp, #31]
 8007d2c:	f7fe f99a 	bl	8006064 <SX1276WriteBuffer>
 8007d30:	e752      	b.n	8007bd8 <SX1276SetRxConfig+0x18c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007d32:	f1a8 020b 	sub.w	r2, r8, #11
 8007d36:	2a01      	cmp	r2, #1
 8007d38:	bf8c      	ite	hi
 8007d3a:	2200      	movhi	r2, #0
 8007d3c:	2201      	movls	r2, #1
 8007d3e:	e6dc      	b.n	8007afa <SX1276SetRxConfig+0xae>
    SX1276ReadBuffer( addr, &data, 1 );
 8007d40:	2201      	movs	r2, #1
 8007d42:	4649      	mov	r1, r9
 8007d44:	2044      	movs	r0, #68	; 0x44
 8007d46:	f7fe f9ab 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007d4a:	f89d 201f 	ldrb.w	r2, [sp, #31]
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d52:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007d56:	4649      	mov	r1, r9
 8007d58:	2201      	movs	r2, #1
 8007d5a:	2044      	movs	r0, #68	; 0x44
 8007d5c:	f7fe f982 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007d60:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <SX1276SetRxConfig+0x354>)
 8007d62:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8007d66:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	2024      	movs	r0, #36	; 0x24
 8007d70:	f7fe f978 	bl	8006064 <SX1276WriteBuffer>
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <SX1276SetRxConfig+0x354>)
 8007d76:	e724      	b.n	8007bc2 <SX1276SetRxConfig+0x176>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4649      	mov	r1, r9
 8007d82:	2022      	movs	r0, #34	; 0x22
 8007d84:	f7fe f96e 	bl	8006064 <SX1276WriteBuffer>
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <SX1276SetRxConfig+0x354>)
 8007d8a:	e715      	b.n	8007bb8 <SX1276SetRxConfig+0x16c>
 8007d8c:	f7fe f96a 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8007d90:	2364      	movs	r3, #100	; 0x64
 8007d92:	e7c6      	b.n	8007d22 <SX1276SetRxConfig+0x2d6>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007d94:	2d0b      	cmp	r5, #11
 8007d96:	bf94      	ite	ls
 8007d98:	2200      	movls	r2, #0
 8007d9a:	2201      	movhi	r2, #1
 8007d9c:	e6ad      	b.n	8007afa <SX1276SetRxConfig+0xae>
 8007d9e:	bf00      	nop
 8007da0:	20001200 	.word	0x20001200
 8007da4:	08012228 	.word	0x08012228
 8007da8:	01e84800 	.word	0x01e84800
 8007dac:	1f4add40 	.word	0x1f4add40
            return FskBandwidths[i].RegValue;
 8007db0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007db4:	2201      	movs	r2, #1
 8007db6:	791b      	ldrb	r3, [r3, #4]
 8007db8:	f88d 301f 	strb.w	r3, [sp, #31]
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	2013      	movs	r0, #19
 8007dc0:	f7fe f950 	bl	8006064 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007dc4:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007dc8:	2201      	movs	r2, #1
 8007dca:	4649      	mov	r1, r9
 8007dcc:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007dce:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007dd2:	f7fe f947 	bl	8006064 <SX1276WriteBuffer>
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	4649      	mov	r1, r9
 8007dda:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007ddc:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007de0:	f7fe f940 	bl	8006064 <SX1276WriteBuffer>
            if( fixLen == 1 )
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	b35b      	cbz	r3, 8007e40 <SX1276SetRxConfig+0x3f4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8007de8:	9b03      	ldr	r3, [sp, #12]
 8007dea:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007dee:	2201      	movs	r2, #1
 8007df0:	4649      	mov	r1, r9
 8007df2:	2032      	movs	r0, #50	; 0x32
 8007df4:	f7fe f936 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007df8:	2201      	movs	r2, #1
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	2030      	movs	r0, #48	; 0x30
 8007dfe:	f7fe f94f 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007e02:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 8007e06:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007e0a:	9a02      	ldr	r2, [sp, #8]
    SX1276WriteBuffer( addr, &data, 1 );
 8007e0c:	4649      	mov	r1, r9
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007e0e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 8007e12:	2030      	movs	r0, #48	; 0x30
 8007e14:	2201      	movs	r2, #1
 8007e16:	f88d 301f 	strb.w	r3, [sp, #31]
 8007e1a:	f7fe f923 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007e1e:	4649      	mov	r1, r9
 8007e20:	2201      	movs	r2, #1
 8007e22:	2031      	movs	r0, #49	; 0x31
 8007e24:	f7fe f93c 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007e28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007e2c:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8007e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8007e32:	4649      	mov	r1, r9
 8007e34:	2031      	movs	r0, #49	; 0x31
 8007e36:	f88d 301f 	strb.w	r3, [sp, #31]
 8007e3a:	f7fe f913 	bl	8006064 <SX1276WriteBuffer>
        break;
 8007e3e:	e6e7      	b.n	8007c10 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8007e40:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 8007e42:	2201      	movs	r2, #1
 8007e44:	4649      	mov	r1, r9
 8007e46:	2032      	movs	r0, #50	; 0x32
 8007e48:	f88d 301f 	strb.w	r3, [sp, #31]
 8007e4c:	f7fe f90a 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007e50:	2201      	movs	r2, #1
 8007e52:	4649      	mov	r1, r9
 8007e54:	2030      	movs	r0, #48	; 0x30
 8007e56:	f7fe f923 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007e5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 8007e5e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e66:	e7d0      	b.n	8007e0a <SX1276SetRxConfig+0x3be>

08007e68 <SX1276SetTxConfig>:
{
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	b087      	sub	sp, #28
 8007e6e:	461d      	mov	r5, r3
 8007e70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8007e74:	9302      	str	r3, [sp, #8]
 8007e76:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8007e82:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
 8007e86:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
 8007e8a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 8007e8e:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	4607      	mov	r7, r0
 8007e96:	4616      	mov	r6, r2
    SX1276SetModem( modem );
 8007e98:	f7ff fbee 	bl	8007678 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7fe fa29 	bl	80062f4 <SX1276SetRfTxPower>
    switch( modem )
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	f000 80a4 	beq.w	8007ff0 <SX1276SetTxConfig+0x188>
 8007ea8:	2f01      	cmp	r7, #1
 8007eaa:	f040 809d 	bne.w	8007fe8 <SX1276SetTxConfig+0x180>
            SX1276.Settings.LoRa.Power = power;
 8007eae:	4eb3      	ldr	r6, [pc, #716]	; (800817c <SX1276SetTxConfig+0x314>)
            if( bandwidth > 2 )
 8007eb0:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
 8007eb2:	f886 411c 	strb.w	r4, [r6, #284]	; 0x11c
            if( bandwidth > 2 )
 8007eb6:	f200 809a 	bhi.w	8007fee <SX1276SetTxConfig+0x186>
            bandwidth += 7;
 8007eba:	9c10      	ldr	r4, [sp, #64]	; 0x40
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
 8007ec2:	2c06      	cmp	r4, #6
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	f886 3131 	strb.w	r3, [r6, #305]	; 0x131
 8007eca:	bf38      	it	cc
 8007ecc:	2406      	movcc	r4, #6
            SX1276.Settings.LoRa.Datarate = datarate;
 8007ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ed0:	f8c6 3124 	str.w	r3, [r6, #292]	; 0x124
            bandwidth += 7;
 8007ed4:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	f886 3129 	strb.w	r3, [r6, #297]	; 0x129
 8007edc:	2c0c      	cmp	r4, #12
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007ede:	9b18      	ldr	r3, [sp, #96]	; 0x60
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007ee0:	f8c6 5120 	str.w	r5, [r6, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007ee4:	bf28      	it	cs
 8007ee6:	240c      	movcs	r4, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007ee8:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007eea:	f8a6 912a 	strh.w	r9, [r6, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007eee:	f886 812c 	strb.w	r8, [r6, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8007ef2:	f886 b12f 	strb.w	fp, [r6, #303]	; 0x12f
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007ef6:	f886 a12e 	strb.w	sl, [r6, #302]	; 0x12e
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007efa:	f8c6 3134 	str.w	r3, [r6, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007efe:	f000 80ff 	beq.w	8008100 <SX1276SetTxConfig+0x298>
 8007f02:	2d08      	cmp	r5, #8
 8007f04:	f000 8133 	beq.w	800816e <SX1276SetTxConfig+0x306>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007f0e:	f1bb 0f00 	cmp.w	fp, #0
 8007f12:	f040 8110 	bne.w	8008136 <SX1276SetTxConfig+0x2ce>
 8007f16:	f10d 0b17 	add.w	fp, sp, #23
    SX1276ReadBuffer( addr, &data, 1 );
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	201d      	movs	r0, #29
 8007f20:	f7fe f8be 	bl	80060a0 <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	ea48 0843 	orr.w	r8, r8, r3, lsl #1
    SX1276WriteBuffer( addr, &data, 1 );
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007f30:	ea48 1505 	orr.w	r5, r8, r5, lsl #4
 8007f34:	f88d 5017 	strb.w	r5, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007f38:	f7fe f894 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4659      	mov	r1, fp
 8007f40:	201e      	movs	r0, #30
 8007f42:	f7fe f8ad 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007f46:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RFLR_MODEMCONFIG2_SF_MASK &
 8007f4a:	f003 030b 	and.w	r3, r3, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007f4e:	ea43 0a8a 	orr.w	sl, r3, sl, lsl #2
    SX1276WriteBuffer( addr, &data, 1 );
 8007f52:	2201      	movs	r2, #1
 8007f54:	4659      	mov	r1, fp
 8007f56:	201e      	movs	r0, #30
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007f58:	ea4a 1404 	orr.w	r4, sl, r4, lsl #4
 8007f5c:	f88d 4017 	strb.w	r4, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007f60:	f7fe f880 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8007f64:	2201      	movs	r2, #1
 8007f66:	4659      	mov	r1, fp
 8007f68:	2026      	movs	r0, #38	; 0x26
 8007f6a:	f7fe f899 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007f6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007f72:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007f76:	f023 0308 	bic.w	r3, r3, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007f7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007f7e:	4659      	mov	r1, fp
 8007f80:	2201      	movs	r2, #1
 8007f82:	2026      	movs	r0, #38	; 0x26
 8007f84:	f88d 3017 	strb.w	r3, [sp, #23]
 8007f88:	f7fe f86c 	bl	8006064 <SX1276WriteBuffer>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007f8c:	ea4f 2319 	mov.w	r3, r9, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007f90:	2201      	movs	r2, #1
 8007f92:	4659      	mov	r1, fp
 8007f94:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007f96:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007f9a:	f7fe f863 	bl	8006064 <SX1276WriteBuffer>
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8007fa4:	f88d 9017 	strb.w	r9, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007fa8:	f7fe f85c 	bl	8006064 <SX1276WriteBuffer>
            if( datarate == 6 )
 8007fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	f240 80ad 	bls.w	800810e <SX1276SetTxConfig+0x2a6>
    SX1276ReadBuffer( addr, &data, 1 );
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4659      	mov	r1, fp
 8007fb8:	2031      	movs	r0, #49	; 0x31
 8007fba:	f7fe f871 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8007fbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007fc6:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4659      	mov	r1, fp
 8007fce:	2031      	movs	r0, #49	; 0x31
 8007fd0:	f88d 3017 	strb.w	r3, [sp, #23]
 8007fd4:	f7fe f846 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007fd8:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4659      	mov	r1, fp
 8007fde:	2037      	movs	r0, #55	; 0x37
 8007fe0:	f88d 3017 	strb.w	r3, [sp, #23]
 8007fe4:	f7fe f83e 	bl	8006064 <SX1276WriteBuffer>
}
 8007fe8:	b007      	add	sp, #28
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 8007fee:	e7fe      	b.n	8007fee <SX1276SetTxConfig+0x186>
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8007ff0:	4a63      	ldr	r2, [pc, #396]	; (8008180 <SX1276SetTxConfig+0x318>)
 8007ff2:	fba2 1b06 	umull	r1, fp, r2, r6
 8007ff6:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007ffa:	ea4f 3b1b 	mov.w	fp, fp, lsr #12
 8007ffe:	fb03 611b 	mls	r1, r3, fp, r6
 8008002:	f641 6384 	movw	r3, #7812	; 0x1e84
 8008006:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800800a:	fba2 2303 	umull	r2, r3, r2, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800800e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 8008012:	eb0b 3713 	add.w	r7, fp, r3, lsr #12
            SX1276.Settings.Fsk.Power = power;
 8008016:	4b59      	ldr	r3, [pc, #356]	; (800817c <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008018:	9a01      	ldr	r2, [sp, #4]
 800801a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.Datarate = datarate;
 800801e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008020:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    SX1276WriteBuffer( addr, &data, 1 );
 8008024:	f10d 0b17 	add.w	fp, sp, #23
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8008028:	9a18      	ldr	r2, [sp, #96]	; 0x60
            SX1276.Settings.Fsk.Power = power;
 800802a:	f883 40e8 	strb.w	r4, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800802e:	e9c3 653b 	strd	r6, r5, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008032:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008036:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800803a:	f883 a100 	strb.w	sl, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800803e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    SX1276WriteBuffer( addr, &data, 1 );
 8008042:	4659      	mov	r1, fp
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8008044:	0a3b      	lsrs	r3, r7, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8008046:	2201      	movs	r2, #1
 8008048:	2004      	movs	r0, #4
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800804a:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 800804e:	f7fe f809 	bl	8006064 <SX1276WriteBuffer>
 8008052:	4659      	mov	r1, fp
 8008054:	2201      	movs	r2, #1
 8008056:	2005      	movs	r0, #5
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8008058:	f88d 7017 	strb.w	r7, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 800805c:	f7fe f802 	bl	8006064 <SX1276WriteBuffer>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8008060:	4f48      	ldr	r7, [pc, #288]	; (8008184 <SX1276SetTxConfig+0x31c>)
 8008062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008064:	fbb7 f7f3 	udiv	r7, r7, r3
    SX1276WriteBuffer( addr, &data, 1 );
 8008068:	4659      	mov	r1, fp
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800806a:	0a3b      	lsrs	r3, r7, #8
    SX1276WriteBuffer( addr, &data, 1 );
 800806c:	2201      	movs	r2, #1
 800806e:	2002      	movs	r0, #2
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8008070:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8008074:	f7fd fff6 	bl	8006064 <SX1276WriteBuffer>
 8008078:	4659      	mov	r1, fp
 800807a:	2201      	movs	r2, #1
 800807c:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800807e:	f88d 7017 	strb.w	r7, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8008082:	f7fd ffef 	bl	8006064 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008086:	ea4f 2319 	mov.w	r3, r9, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 800808a:	4659      	mov	r1, fp
 800808c:	2201      	movs	r2, #1
 800808e:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008090:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8008094:	f7fd ffe6 	bl	8006064 <SX1276WriteBuffer>
 8008098:	4659      	mov	r1, fp
 800809a:	2201      	movs	r2, #1
 800809c:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800809e:	f88d 9017 	strb.w	r9, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80080a2:	f7fd ffdf 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80080a6:	2201      	movs	r2, #1
 80080a8:	4659      	mov	r1, fp
 80080aa:	2030      	movs	r0, #48	; 0x30
 80080ac:	f7fd fff8 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80080b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80080b4:	f1b8 0f00 	cmp.w	r8, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 80080b8:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80080bc:	bf14      	ite	ne
 80080be:	2200      	movne	r2, #0
 80080c0:	f06f 027f 	mvneq.w	r2, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80080c4:	ea43 1a0a 	orr.w	sl, r3, sl, lsl #4
 80080c8:	ea42 0a0a 	orr.w	sl, r2, sl
    SX1276WriteBuffer( addr, &data, 1 );
 80080cc:	4659      	mov	r1, fp
 80080ce:	2201      	movs	r2, #1
 80080d0:	2030      	movs	r0, #48	; 0x30
 80080d2:	f88d a017 	strb.w	sl, [sp, #23]
 80080d6:	f7fd ffc5 	bl	8006064 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80080da:	4659      	mov	r1, fp
 80080dc:	2201      	movs	r2, #1
 80080de:	2031      	movs	r0, #49	; 0x31
 80080e0:	f7fd ffde 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80080e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80080e8:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80080ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80080ee:	4659      	mov	r1, fp
 80080f0:	2031      	movs	r0, #49	; 0x31
 80080f2:	f88d 3017 	strb.w	r3, [sp, #23]
 80080f6:	f7fd ffb5 	bl	8006064 <SX1276WriteBuffer>
}
 80080fa:	b007      	add	sp, #28
 80080fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008100:	f1a4 030b 	sub.w	r3, r4, #11
 8008104:	2b01      	cmp	r3, #1
 8008106:	bf8c      	ite	hi
 8008108:	2300      	movhi	r3, #0
 800810a:	2301      	movls	r3, #1
 800810c:	e6fd      	b.n	8007f0a <SX1276SetTxConfig+0xa2>
    SX1276ReadBuffer( addr, &data, 1 );
 800810e:	4659      	mov	r1, fp
 8008110:	2201      	movs	r2, #1
 8008112:	2031      	movs	r0, #49	; 0x31
 8008114:	f7fd ffc4 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8008118:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800811c:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008120:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8008124:	4659      	mov	r1, fp
 8008126:	2201      	movs	r2, #1
 8008128:	2031      	movs	r0, #49	; 0x31
 800812a:	f88d 3017 	strb.w	r3, [sp, #23]
 800812e:	f7fd ff99 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008132:	230c      	movs	r3, #12
 8008134:	e751      	b.n	8007fda <SX1276SetTxConfig+0x172>
    SX1276ReadBuffer( addr, &data, 1 );
 8008136:	f10d 0b17 	add.w	fp, sp, #23
 800813a:	4659      	mov	r1, fp
 800813c:	2201      	movs	r2, #1
 800813e:	2044      	movs	r0, #68	; 0x44
 8008140:	f7fd ffae 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8008144:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8008148:	4659      	mov	r1, fp
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800814a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 800814e:	2201      	movs	r2, #1
 8008150:	2044      	movs	r0, #68	; 0x44
 8008152:	f88d 3017 	strb.w	r3, [sp, #23]
 8008156:	f7fd ff85 	bl	8006064 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800815a:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800815e:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8008162:	2201      	movs	r2, #1
 8008164:	4659      	mov	r1, fp
 8008166:	2024      	movs	r0, #36	; 0x24
 8008168:	f7fd ff7c 	bl	8006064 <SX1276WriteBuffer>
 800816c:	e6d5      	b.n	8007f1a <SX1276SetTxConfig+0xb2>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800816e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008170:	2b0b      	cmp	r3, #11
 8008172:	bf94      	ite	ls
 8008174:	2300      	movls	r3, #0
 8008176:	2301      	movhi	r3, #1
 8008178:	e6c7      	b.n	8007f0a <SX1276SetTxConfig+0xa2>
 800817a:	bf00      	nop
 800817c:	20001200 	.word	0x20001200
 8008180:	431bde83 	.word	0x431bde83
 8008184:	01e84800 	.word	0x01e84800

08008188 <SX1276SetTxContinuousWave>:
{
 8008188:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800818a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800818e:	b08d      	sub	sp, #52	; 0x34
    uint32_t timeout = ( uint32_t )time * 1000;
 8008190:	fb02 f404 	mul.w	r4, r2, r4
{
 8008194:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
 8008196:	f7fe fdd7 	bl	8006d48 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800819a:	2300      	movs	r3, #0
 800819c:	2005      	movs	r0, #5
 800819e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80081a2:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80081a6:	e9cd 3407 	strd	r3, r4, [sp, #28]
 80081aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80081ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80081b2:	4618      	mov	r0, r3
 80081b4:	4629      	mov	r1, r5
 80081b6:	9200      	str	r2, [sp, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	f7ff fe55 	bl	8007e68 <SX1276SetTxConfig>
    SX1276ReadBuffer( addr, &data, 1 );
 80081be:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80081c2:	2201      	movs	r2, #1
 80081c4:	2031      	movs	r0, #49	; 0x31
 80081c6:	f7fd ff6b 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 80081ca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    TimerSetValue( &TxTimeoutTimer, timeout );
 80081ce:	4d17      	ldr	r5, [pc, #92]	; (800822c <SX1276SetTxContinuousWave+0xa4>)
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80081d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80081d4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80081d8:	2201      	movs	r2, #1
 80081da:	2031      	movs	r0, #49	; 0x31
 80081dc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80081e0:	f7fd ff40 	bl	8006064 <SX1276WriteBuffer>
 80081e4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80081e8:	23f0      	movs	r3, #240	; 0xf0
 80081ea:	2201      	movs	r2, #1
 80081ec:	2040      	movs	r0, #64	; 0x40
 80081ee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80081f2:	f7fd ff37 	bl	8006064 <SX1276WriteBuffer>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80081f6:	23a0      	movs	r3, #160	; 0xa0
    SX1276WriteBuffer( addr, &data, 1 );
 80081f8:	2201      	movs	r2, #1
 80081fa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80081fe:	2041      	movs	r0, #65	; 0x41
 8008200:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8008204:	f7fd ff2e 	bl	8006064 <SX1276WriteBuffer>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f7fe fa24 	bl	8006658 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <SX1276SetTxContinuousWave+0xa8>)
    TimerStart( &TxTimeoutTimer );
 8008212:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8008214:	2202      	movs	r2, #2
 8008216:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800821a:	f7fe f913 	bl	8006444 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800821e:	2003      	movs	r0, #3
}
 8008220:	b00d      	add	sp, #52	; 0x34
 8008222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008226:	f7fe bd15 	b.w	8006c54 <SX1276SetOpMode>
 800822a:	bf00      	nop
 800822c:	20001344 	.word	0x20001344
 8008230:	20001200 	.word	0x20001200

08008234 <SX1276OnTimeoutIrq>:
{
 8008234:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8008236:	4e4b      	ldr	r6, [pc, #300]	; (8008364 <SX1276OnTimeoutIrq+0x130>)
 8008238:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
 800823c:	2c01      	cmp	r4, #1
{
 800823e:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 8008240:	d04e      	beq.n	80082e0 <SX1276OnTimeoutIrq+0xac>
 8008242:	2c02      	cmp	r4, #2
 8008244:	d155      	bne.n	80082f2 <SX1276OnTimeoutIrq+0xbe>
        SX1276Reset( );
 8008246:	f7fd ffbf 	bl	80061c8 <SX1276Reset>
        RxChainCalibration( );
 800824a:	f7fe fdb3 	bl	8006db4 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 800824e:	2001      	movs	r0, #1
 8008250:	f7fd ffb4 	bl	80061bc <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8008254:	2201      	movs	r2, #1
 8008256:	4610      	mov	r0, r2
 8008258:	f10d 0107 	add.w	r1, sp, #7
 800825c:	f7fd ff20 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 8008260:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008264:	4c40      	ldr	r4, [pc, #256]	; (8008368 <SX1276OnTimeoutIrq+0x134>)
    SX1276WriteBuffer( addr, &data, 1 );
 8008266:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8008268:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800826c:	4610      	mov	r0, r2
 800826e:	f10d 0107 	add.w	r1, sp, #7
 8008272:	f88d 3007 	strb.w	r3, [sp, #7]
 8008276:	f104 052d 	add.w	r5, r4, #45	; 0x2d
 800827a:	f7fd fef3 	bl	8006064 <SX1276WriteBuffer>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800827e:	2000      	movs	r0, #0
 8008280:	e001      	b.n	8008286 <SX1276OnTimeoutIrq+0x52>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8008282:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8008286:	f7ff f9f7 	bl	8007678 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800828a:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 800828c:	7860      	ldrb	r0, [r4, #1]
 800828e:	f88d 3007 	strb.w	r3, [sp, #7]
 8008292:	2201      	movs	r2, #1
 8008294:	f10d 0107 	add.w	r1, sp, #7
 8008298:	f7fd fee4 	bl	8006064 <SX1276WriteBuffer>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800829c:	42ac      	cmp	r4, r5
 800829e:	d1f0      	bne.n	8008282 <SX1276OnTimeoutIrq+0x4e>
        SX1276SetModem( MODEM_FSK );
 80082a0:	2000      	movs	r0, #0
 80082a2:	f7ff f9e9 	bl	8007678 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80082a6:	f896 4138 	ldrb.w	r4, [r6, #312]	; 0x138
    SX1276SetModem( MODEM_LORA );
 80082aa:	2001      	movs	r0, #1
 80082ac:	f7ff f9e4 	bl	8007678 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80082b0:	f886 4138 	strb.w	r4, [r6, #312]	; 0x138
    if( enable == true )
 80082b4:	b9fc      	cbnz	r4, 80082f6 <SX1276OnTimeoutIrq+0xc2>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80082b6:	2312      	movs	r3, #18
    SX1276WriteBuffer( addr, &data, 1 );
 80082b8:	2201      	movs	r2, #1
 80082ba:	f10d 0107 	add.w	r1, sp, #7
 80082be:	2039      	movs	r0, #57	; 0x39
 80082c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80082c4:	f7fd fece 	bl	8006064 <SX1276WriteBuffer>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80082c8:	4b28      	ldr	r3, [pc, #160]	; (800836c <SX1276OnTimeoutIrq+0x138>)
 80082ca:	681b      	ldr	r3, [r3, #0]
        SX1276.Settings.State = RF_IDLE;
 80082cc:	2200      	movs	r2, #0
 80082ce:	f886 20e0 	strb.w	r2, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80082d2:	b173      	cbz	r3, 80082f2 <SX1276OnTimeoutIrq+0xbe>
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	b163      	cbz	r3, 80082f2 <SX1276OnTimeoutIrq+0xbe>
}
 80082d8:	b002      	add	sp, #8
 80082da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 80082de:	4718      	bx	r3
        if( SX1276.Settings.Modem == MODEM_FSK )
 80082e0:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
 80082e4:	b14b      	cbz	r3, 80082fa <SX1276OnTimeoutIrq+0xc6>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80082e6:	4b21      	ldr	r3, [pc, #132]	; (800836c <SX1276OnTimeoutIrq+0x138>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	b113      	cbz	r3, 80082f2 <SX1276OnTimeoutIrq+0xbe>
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1f2      	bne.n	80082d8 <SX1276OnTimeoutIrq+0xa4>
}
 80082f2:	b002      	add	sp, #8
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80082f6:	2334      	movs	r3, #52	; 0x34
 80082f8:	e7de      	b.n	80082b8 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80082fa:	210b      	movs	r1, #11
    SX1276WriteBuffer( addr, &data, 1 );
 80082fc:	4622      	mov	r2, r4
 80082fe:	f88d 1007 	strb.w	r1, [sp, #7]
 8008302:	203e      	movs	r0, #62	; 0x3e
 8008304:	f10d 0107 	add.w	r1, sp, #7
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008308:	f8a6 310c 	strh.w	r3, [r6, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800830c:	f8a6 3118 	strh.w	r3, [r6, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008310:	f8a6 3116 	strh.w	r3, [r6, #278]	; 0x116
    SX1276WriteBuffer( addr, &data, 1 );
 8008314:	f7fd fea6 	bl	8006064 <SX1276WriteBuffer>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8008318:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 800831a:	4622      	mov	r2, r4
 800831c:	f10d 0107 	add.w	r1, sp, #7
 8008320:	203f      	movs	r0, #63	; 0x3f
 8008322:	f88d 3007 	strb.w	r3, [sp, #7]
 8008326:	f7fd fe9d 	bl	8006064 <SX1276WriteBuffer>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800832a:	f896 3102 	ldrb.w	r3, [r6, #258]	; 0x102
 800832e:	b193      	cbz	r3, 8008356 <SX1276OnTimeoutIrq+0x122>
    SX1276ReadBuffer( addr, &data, 1 );
 8008330:	4622      	mov	r2, r4
 8008332:	f10d 0107 	add.w	r1, sp, #7
 8008336:	200d      	movs	r0, #13
 8008338:	f7fd feb2 	bl	80060a0 <SX1276ReadBuffer>
    return data;
 800833c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8008340:	4622      	mov	r2, r4
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8008346:	f10d 0107 	add.w	r1, sp, #7
 800834a:	200d      	movs	r0, #13
 800834c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008350:	f7fd fe88 	bl	8006064 <SX1276WriteBuffer>
 8008354:	e7c7      	b.n	80082e6 <SX1276OnTimeoutIrq+0xb2>
                TimerStop( &RxTimeoutSyncWord );
 8008356:	4806      	ldr	r0, [pc, #24]	; (8008370 <SX1276OnTimeoutIrq+0x13c>)
                SX1276.Settings.State = RF_IDLE;
 8008358:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800835c:	f7fe f934 	bl	80065c8 <TimerStop>
 8008360:	e7c1      	b.n	80082e6 <SX1276OnTimeoutIrq+0xb2>
 8008362:	bf00      	nop
 8008364:	20001200 	.word	0x20001200
 8008368:	080122d8 	.word	0x080122d8
 800836c:	200010cc 	.word	0x200010cc
 8008370:	200010d0 	.word	0x200010d0

08008374 <SX1276Write>:
{
 8008374:	b500      	push	{lr}
 8008376:	b083      	sub	sp, #12
 8008378:	460b      	mov	r3, r1
    SX1276WriteBuffer( addr, &data, 1 );
 800837a:	2201      	movs	r2, #1
 800837c:	f10d 0107 	add.w	r1, sp, #7
{
 8008380:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8008384:	f7fd fe6e 	bl	8006064 <SX1276WriteBuffer>
}
 8008388:	b003      	add	sp, #12
 800838a:	f85d fb04 	ldr.w	pc, [sp], #4
 800838e:	bf00      	nop

08008390 <SX1276Read>:
{
 8008390:	b500      	push	{lr}
 8008392:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8008394:	2201      	movs	r2, #1
 8008396:	f10d 0107 	add.w	r1, sp, #7
 800839a:	f7fd fe81 	bl	80060a0 <SX1276ReadBuffer>
}
 800839e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80083a2:	b003      	add	sp, #12
 80083a4:	f85d fb04 	ldr.w	pc, [sp], #4

080083a8 <SX1276SetMaxPayloadLength>:
{
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	4604      	mov	r4, r0
 80083ac:	b083      	sub	sp, #12
 80083ae:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 80083b0:	f7ff f962 	bl	8007678 <SX1276SetModem>
    switch( modem )
 80083b4:	b15c      	cbz	r4, 80083ce <SX1276SetMaxPayloadLength+0x26>
 80083b6:	2c01      	cmp	r4, #1
 80083b8:	d107      	bne.n	80083ca <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 80083ba:	4622      	mov	r2, r4
 80083bc:	f10d 0107 	add.w	r1, sp, #7
 80083c0:	2023      	movs	r0, #35	; 0x23
 80083c2:	f88d 5007 	strb.w	r5, [sp, #7]
 80083c6:	f7fd fe4d 	bl	8006064 <SX1276WriteBuffer>
}
 80083ca:	b003      	add	sp, #12
 80083cc:	bd30      	pop	{r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <SX1276SetMaxPayloadLength+0x44>)
 80083d0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1f8      	bne.n	80083ca <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 80083d8:	2201      	movs	r2, #1
 80083da:	f10d 0107 	add.w	r1, sp, #7
 80083de:	2032      	movs	r0, #50	; 0x32
 80083e0:	f88d 5007 	strb.w	r5, [sp, #7]
 80083e4:	f7fd fe3e 	bl	8006064 <SX1276WriteBuffer>
}
 80083e8:	b003      	add	sp, #12
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	20001200 	.word	0x20001200

080083f0 <SX1276SetPublicNetwork>:
{
 80083f0:	b510      	push	{r4, lr}
 80083f2:	4604      	mov	r4, r0
 80083f4:	b082      	sub	sp, #8
    SX1276SetModem( MODEM_LORA );
 80083f6:	2001      	movs	r0, #1
 80083f8:	f7ff f93e 	bl	8007678 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80083fc:	4b08      	ldr	r3, [pc, #32]	; (8008420 <SX1276SetPublicNetwork+0x30>)
 80083fe:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8008402:	b154      	cbz	r4, 800841a <SX1276SetPublicNetwork+0x2a>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8008404:	2334      	movs	r3, #52	; 0x34
    SX1276WriteBuffer( addr, &data, 1 );
 8008406:	2201      	movs	r2, #1
 8008408:	f10d 0107 	add.w	r1, sp, #7
 800840c:	2039      	movs	r0, #57	; 0x39
 800840e:	f88d 3007 	strb.w	r3, [sp, #7]
 8008412:	f7fd fe27 	bl	8006064 <SX1276WriteBuffer>
}
 8008416:	b002      	add	sp, #8
 8008418:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800841a:	2312      	movs	r3, #18
 800841c:	e7f3      	b.n	8008406 <SX1276SetPublicNetwork+0x16>
 800841e:	bf00      	nop
 8008420:	20001200 	.word	0x20001200

08008424 <SX1276GetWakeupTime>:
{
 8008424:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8008426:	f7fd fec7 	bl	80061b8 <SX1276GetBoardTcxoWakeupTime>
}
 800842a:	3001      	adds	r0, #1
 800842c:	bd08      	pop	{r3, pc}
 800842e:	bf00      	nop

08008430 <uart_stm32_config_get>:
	LL_USART_SetParity(UartInstance, parity);
}

static inline uint32_t uart_stm32_get_parity(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008430:	6843      	ldr	r3, [r0, #4]
static int uart_stm32_config_get(const struct device *dev,
				 struct uart_config *cfg)
{
	struct uart_stm32_data *data = dev->data;

	cfg->baudrate = data->baud_rate;
 8008432:	6900      	ldr	r0, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008434:	681a      	ldr	r2, [r3, #0]
	cfg->baudrate = data->baud_rate;
 8008436:	6800      	ldr	r0, [r0, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8008438:	6813      	ldr	r3, [r2, #0]
 800843a:	6008      	str	r0, [r1, #0]
 800843c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8008440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return UART_CFG_PARITY_NONE;
 8008444:	bf1d      	ittte	ne
 8008446:	f5a3 63c0 	subne.w	r3, r3, #1536	; 0x600
 800844a:	fab3 f383 	clzne	r3, r3
 800844e:	095b      	lsrne	r3, r3, #5
	switch (parity) {
 8008450:	2302      	moveq	r3, #2
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8008452:	710b      	strb	r3, [r1, #4]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8008454:	6853      	ldr	r3, [r2, #4]
 8008456:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800845a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845e:	d02f      	beq.n	80084c0 <uart_stm32_config_get+0x90>
 8008460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008464:	d020      	beq.n	80084a8 <uart_stm32_config_get+0x78>
 8008466:	2b00      	cmp	r3, #0
 8008468:	bf14      	ite	ne
 800846a:	2303      	movne	r3, #3
 800846c:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800846e:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8008470:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8008472:	6810      	ldr	r0, [r2, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8008474:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8008478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800847c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8008480:	d019      	beq.n	80084b6 <uart_stm32_config_get+0x86>
 8008482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008486:	d111      	bne.n	80084ac <uart_stm32_config_get+0x7c>
			return UART_CFG_DATA_BITS_6;
 8008488:	2800      	cmp	r0, #0
 800848a:	bf0c      	ite	eq
 800848c:	2302      	moveq	r3, #2
 800848e:	2301      	movne	r3, #1
		uart_stm32_get_stopbits(dev));
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8008490:	718b      	strb	r3, [r1, #6]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8008492:	6893      	ldr	r3, [r2, #8]
 8008494:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8008498:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800849c:	fab3 f383 	clz	r3, r3
 80084a0:	095b      	lsrs	r3, r3, #5
		uart_stm32_get_databits(dev), uart_stm32_get_parity(dev));
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
		uart_stm32_get_hwctrl(dev));
	return 0;
}
 80084a2:	2000      	movs	r0, #0
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80084a4:	71cb      	strb	r3, [r1, #7]
}
 80084a6:	4770      	bx	lr
		return UART_CFG_STOP_BITS_1_5;
 80084a8:	2302      	movs	r3, #2
 80084aa:	e7e0      	b.n	800846e <uart_stm32_config_get+0x3e>
			return UART_CFG_DATA_BITS_8;
 80084ac:	2800      	cmp	r0, #0
 80084ae:	bf14      	ite	ne
 80084b0:	2302      	movne	r3, #2
 80084b2:	2303      	moveq	r3, #3
 80084b4:	e7ec      	b.n	8008490 <uart_stm32_config_get+0x60>
			return UART_CFG_DATA_BITS_9;
 80084b6:	2800      	cmp	r0, #0
 80084b8:	bf14      	ite	ne
 80084ba:	2303      	movne	r3, #3
 80084bc:	2304      	moveq	r3, #4
 80084be:	e7e7      	b.n	8008490 <uart_stm32_config_get+0x60>
		return UART_CFG_STOP_BITS_0_5;
 80084c0:	2300      	movs	r3, #0
 80084c2:	e7d4      	b.n	800846e <uart_stm32_config_get+0x3e>

080084c4 <uart_stm32_poll_in>:
#endif /* CONFIG_UART_USE_RUNTIME_CONFIGURE */

static int uart_stm32_poll_in(const struct device *dev, unsigned char *c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084c4:	6843      	ldr	r3, [r0, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80084c8:	69da      	ldr	r2, [r3, #28]
 80084ca:	0710      	lsls	r0, r2, #28
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80084cc:	bf44      	itt	mi
 80084ce:	2208      	movmi	r2, #8
 80084d0:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80084d2:	69da      	ldr	r2, [r3, #28]
 80084d4:	0692      	lsls	r2, r2, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80084d6:	bf43      	ittte	mi
 80084d8:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 80084da:	700b      	strbmi	r3, [r1, #0]
		return -1;
	}

	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);

	return 0;
 80084dc:	2000      	movmi	r0, #0
		return -1;
 80084de:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80084e2:	4770      	bx	lr

080084e4 <uart_stm32_poll_out>:

static void uart_stm32_poll_out(const struct device *dev,
					unsigned char c)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80084e4:	6843      	ldr	r3, [r0, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80084e8:	69da      	ldr	r2, [r3, #28]
 80084ea:	0612      	lsls	r2, r2, #24
 80084ec:	d5fc      	bpl.n	80084e8 <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 80084ee:	f04f 0010 	mov.w	r0, #16
 80084f2:	f3ef 8211 	mrs	r2, BASEPRI
 80084f6:	f380 8812 	msr	BASEPRI_MAX, r0
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	69d8      	ldr	r0, [r3, #28]
 8008500:	0600      	lsls	r0, r0, #24
 8008502:	d407      	bmi.n	8008514 <uart_stm32_poll_out+0x30>
	__asm__ volatile(
 8008504:	f382 8811 	msr	BASEPRI, r2
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	69da      	ldr	r2, [r3, #28]
 800850e:	0612      	lsls	r2, r2, #24
 8008510:	d5ea      	bpl.n	80084e8 <uart_stm32_poll_out+0x4>
 8008512:	e7ec      	b.n	80084ee <uart_stm32_poll_out+0xa>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8008514:	b289      	uxth	r1, r1
 8008516:	8519      	strh	r1, [r3, #40]	; 0x28
 8008518:	f382 8811 	msr	BASEPRI, r2
 800851c:	f3bf 8f6f 	isb	sy
	}
#endif /* CONFIG_PM */

	LL_USART_TransmitData8(UartInstance, (uint8_t)c);
	irq_unlock(key);
}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop

08008524 <uart_stm32_err_check>:

static int uart_stm32_err_check(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008524:	6843      	ldr	r3, [r0, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008528:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800852a:	69da      	ldr	r2, [r3, #28]
	 */
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
		err |= UART_ERROR_OVERRUN;
	}

	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800852c:	07d1      	lsls	r1, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800852e:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008530:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8008534:	bf48      	it	mi
 8008536:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800853a:	0792      	lsls	r2, r2, #30
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800853c:	69da      	ldr	r2, [r3, #28]
	}

	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
		err |= UART_ERROR_FRAMING;
 800853e:	bf48      	it	mi
 8008540:	f040 0004 	orrmi.w	r0, r0, #4
 8008544:	05d1      	lsls	r1, r2, #23
 8008546:	d504      	bpl.n	8008552 <uart_stm32_err_check+0x2e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 8008548:	f44f 7280 	mov.w	r2, #256	; 0x100
	}

#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	if (LL_USART_IsActiveFlag_LBD(UartInstance)) {
		err |= UART_BREAK;
 800854c:	f040 0008 	orr.w	r0, r0, #8
 8008550:	621a      	str	r2, [r3, #32]
	/* Clearing error :
	 * the stm32 F4X, F1X, and F2X sw sequence is reading the usart SR
	 * then the usart DR to clear the Error flags ORE, PE, FE, NE
	 * --> so is the RXNE flag also cleared !
	 */
	if (err & UART_ERROR_OVERRUN) {
 8008552:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8008554:	bf44      	itt	mi
 8008556:	2208      	movmi	r2, #8
 8008558:	621a      	strmi	r2, [r3, #32]
		LL_USART_ClearFlag_ORE(UartInstance);
	}

	if (err & UART_ERROR_PARITY) {
 800855a:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800855c:	bf44      	itt	mi
 800855e:	2201      	movmi	r2, #1
 8008560:	621a      	strmi	r2, [r3, #32]
		LL_USART_ClearFlag_PE(UartInstance);
	}

	if (err & UART_ERROR_FRAMING) {
 8008562:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8008564:	bf44      	itt	mi
 8008566:	2202      	movmi	r2, #2
 8008568:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800856a:	2204      	movs	r2, #4
 800856c:	621a      	str	r2, [r3, #32]
	 * it is not represented by the errors enum
	 */
	LL_USART_ClearFlag_NE(UartInstance);

	return err;
}
 800856e:	4770      	bx	lr

08008570 <uart_stm32_configure>:
{
 8008570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008574:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008576:	6841      	ldr	r1, [r0, #4]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8008578:	792a      	ldrb	r2, [r5, #4]
	struct uart_stm32_data *data = dev->data;
 800857a:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800857c:	680c      	ldr	r4, [r1, #0]
	switch (parity) {
 800857e:	2a01      	cmp	r2, #1
{
 8008580:	b082      	sub	sp, #8
	switch (parity) {
 8008582:	f000 80bb 	beq.w	80086fc <uart_stm32_configure+0x18c>
		return LL_USART_PARITY_NONE;
 8008586:	2a02      	cmp	r2, #2
 8008588:	bf0c      	ite	eq
 800858a:	f44f 6e80 	moveq.w	lr, #1024	; 0x400
 800858e:	f04f 0e00 	movne.w	lr, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8008592:	f895 8005 	ldrb.w	r8, [r5, #5]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8008596:	f895 9007 	ldrb.w	r9, [r5, #7]
 800859a:	f1b8 0f02 	cmp.w	r8, #2
 800859e:	bf9c      	itt	ls
 80085a0:	4b5d      	ldrls	r3, [pc, #372]	; (8008718 <uart_stm32_configure+0x1a8>)
 80085a2:	f853 7028 	ldrls.w	r7, [r3, r8, lsl #2]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80085a6:	79ab      	ldrb	r3, [r5, #6]
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80085a8:	bf88      	it	hi
 80085aa:	f44f 5700 	movhi.w	r7, #8192	; 0x2000
	switch (db) {
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	f000 80a0 	beq.w	80086f4 <uart_stm32_configure+0x184>
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d04b      	beq.n	8008650 <uart_stm32_configure+0xe0>
		if (p == UART_CFG_PARITY_NONE) {
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d149      	bne.n	8008650 <uart_stm32_configure+0xe0>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80085bc:	f1b9 0f01 	cmp.w	r9, #1
 80085c0:	f000 80a6 	beq.w	8008710 <uart_stm32_configure+0x1a0>
	return LL_USART_HWCONTROL_NONE;
 80085c4:	4610      	mov	r0, r2
			return LL_USART_DATAWIDTH_8B;
 80085c6:	4694      	mov	ip, r2
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80085c8:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 80085cc:	d051      	beq.n	8008672 <uart_stm32_configure+0x102>
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d94f      	bls.n	8008672 <uart_stm32_configure+0x102>
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d04d      	beq.n	8008672 <uart_stm32_configure+0x102>
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80085d6:	f1b9 0f00 	cmp.w	r9, #0
 80085da:	d154      	bne.n	8008686 <uart_stm32_configure+0x116>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	f023 0301 	bic.w	r3, r3, #1
 80085e2:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 80085ea:	459e      	cmp	lr, r3
 80085ec:	d005      	beq.n	80085fa <uart_stm32_configure+0x8a>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085f4:	ea43 030e 	orr.w	r3, r3, lr
 80085f8:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8008600:	429f      	cmp	r7, r3
 8008602:	d004      	beq.n	800860e <uart_stm32_configure+0x9e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800860a:	431f      	orrs	r7, r3
 800860c:	6067      	str	r7, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8008614:	4563      	cmp	r3, ip
 8008616:	d005      	beq.n	8008624 <uart_stm32_configure+0xb4>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800861e:	ea43 030c 	orr.w	r3, r3, ip
 8008622:	6023      	str	r3, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8008624:	68a3      	ldr	r3, [r4, #8]
 8008626:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800862a:	4283      	cmp	r3, r0
 800862c:	d004      	beq.n	8008638 <uart_stm32_configure+0xc8>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800862e:	68a3      	ldr	r3, [r4, #8]
 8008630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008634:	4318      	orrs	r0, r3
 8008636:	60a0      	str	r0, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 8008638:	682f      	ldr	r7, [r5, #0]
 800863a:	6833      	ldr	r3, [r6, #0]
 800863c:	429f      	cmp	r7, r3
 800863e:	d139      	bne.n	80086b4 <uart_stm32_configure+0x144>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	f043 0301 	orr.w	r3, r3, #1
	return 0;
 8008646:	2000      	movs	r0, #0
 8008648:	6023      	str	r3, [r4, #0]
};
 800864a:	b002      	add	sp, #8
 800864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (db) {
 8008650:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
		return LL_USART_HWCONTROL_RTS_CTS;
 8008654:	f1b9 0f01 	cmp.w	r9, #1
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8008658:	f1a2 0a03 	sub.w	sl, r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800865c:	bf14      	ite	ne
 800865e:	2000      	movne	r0, #0
 8008660:	f44f 7040 	moveq.w	r0, #768	; 0x300
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8008664:	f1ba 0f01 	cmp.w	sl, #1
 8008668:	d903      	bls.n	8008672 <uart_stm32_configure+0x102>
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800866a:	2a00      	cmp	r2, #0
 800866c:	d0ac      	beq.n	80085c8 <uart_stm32_configure+0x58>
 800866e:	2b04      	cmp	r3, #4
 8008670:	d1aa      	bne.n	80085c8 <uart_stm32_configure+0x58>
		return -ENOTSUP;
 8008672:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008676:	e7e8      	b.n	800864a <uart_stm32_configure+0xda>
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8008678:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 800867c:	d0f9      	beq.n	8008672 <uart_stm32_configure+0x102>
		return LL_USART_HWCONTROL_RTS_CTS;
 800867e:	f44f 7040 	mov.w	r0, #768	; 0x300
			return LL_USART_DATAWIDTH_7B;
 8008682:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8008686:	4b25      	ldr	r3, [pc, #148]	; (800871c <uart_stm32_configure+0x1ac>)
 8008688:	429c      	cmp	r4, r3
 800868a:	d00f      	beq.n	80086ac <uart_stm32_configure+0x13c>
 800868c:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8008690:	429c      	cmp	r4, r3
 8008692:	d00b      	beq.n	80086ac <uart_stm32_configure+0x13c>
 8008694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008698:	429c      	cmp	r4, r3
 800869a:	d007      	beq.n	80086ac <uart_stm32_configure+0x13c>
 800869c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a0:	429c      	cmp	r4, r3
 80086a2:	d003      	beq.n	80086ac <uart_stm32_configure+0x13c>
 80086a4:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d1e2      	bne.n	8008672 <uart_stm32_configure+0x102>
 80086ac:	f1b9 0f01 	cmp.w	r9, #1
 80086b0:	d094      	beq.n	80085dc <uart_stm32_configure+0x6c>
 80086b2:	e7de      	b.n	8008672 <uart_stm32_configure+0x102>
	if (clock_control_get_rate(data->clock,
 80086b4:	f8d6 8004 	ldr.w	r8, [r6, #4]
			       (clock_control_subsys_t *)&config->pclken,
 80086b8:	f101 0908 	add.w	r9, r1, #8
 80086bc:	4640      	mov	r0, r8
 80086be:	f004 fcad 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80086c2:	b1a0      	cbz	r0, 80086ee <uart_stm32_configure+0x17e>
	if (api->get_rate == NULL) {
 80086c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	b183      	cbz	r3, 80086ee <uart_stm32_configure+0x17e>
	return api->get_rate(dev, sys, rate);
 80086cc:	4649      	mov	r1, r9
 80086ce:	4640      	mov	r0, r8
 80086d0:	aa01      	add	r2, sp, #4
 80086d2:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 80086d4:	2800      	cmp	r0, #0
 80086d6:	db0a      	blt.n	80086ee <uart_stm32_configure+0x17e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086de:	6023      	str	r3, [r4, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 80086e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	60e3      	str	r3, [r4, #12]
		data->baud_rate = cfg->baudrate;
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	6033      	str	r3, [r6, #0]
 80086f2:	e7a5      	b.n	8008640 <uart_stm32_configure+0xd0>
		if (p == UART_CFG_PARITY_NONE) {
 80086f4:	b12a      	cbz	r2, 8008702 <uart_stm32_configure+0x192>
			return LL_USART_DATAWIDTH_8B;
 80086f6:	f04f 0c00 	mov.w	ip, #0
 80086fa:	e7ab      	b.n	8008654 <uart_stm32_configure+0xe4>
	switch (parity) {
 80086fc:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8008700:	e747      	b.n	8008592 <uart_stm32_configure+0x22>
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8008702:	f1b9 0f01 	cmp.w	r9, #1
 8008706:	d0b7      	beq.n	8008678 <uart_stm32_configure+0x108>
	return LL_USART_HWCONTROL_NONE;
 8008708:	4610      	mov	r0, r2
			return LL_USART_DATAWIDTH_7B;
 800870a:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
 800870e:	e75b      	b.n	80085c8 <uart_stm32_configure+0x58>
			return LL_USART_DATAWIDTH_8B;
 8008710:	4694      	mov	ip, r2
		return LL_USART_HWCONTROL_RTS_CTS;
 8008712:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008716:	e757      	b.n	80085c8 <uart_stm32_configure+0x58>
 8008718:	08012310 	.word	0x08012310
 800871c:	40013800 	.word	0x40013800

08008720 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8008720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uart_stm32_config *config = dev->config;
 8008724:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8008726:	f8d0 8010 	ldr.w	r8, [r0, #16]
	data->clock = clk;
 800872a:	4d46      	ldr	r5, [pc, #280]	; (8008844 <uart_stm32_init+0x124>)
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800872c:	46b9      	mov	r9, r7
{
 800872e:	b082      	sub	sp, #8
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008730:	f859 4b08 	ldr.w	r4, [r9], #8
	data->clock = clk;
 8008734:	f8c8 5004 	str.w	r5, [r8, #4]
{
 8008738:	4606      	mov	r6, r0
 800873a:	4628      	mov	r0, r5
 800873c:	f004 fc6e 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8008740:	2800      	cmp	r0, #0
 8008742:	d07b      	beq.n	800883c <uart_stm32_init+0x11c>
	return api->on(dev, sys);
 8008744:	68ab      	ldr	r3, [r5, #8]
 8008746:	4628      	mov	r0, r5
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4649      	mov	r1, r9
 800874c:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800874e:	4605      	mov	r5, r0
 8008750:	2800      	cmp	r0, #0
 8008752:	d173      	bne.n	800883c <uart_stm32_init+0x11c>
	ret = pinctrl_lookup_state(config, id, &state);
 8008754:	69f8      	ldr	r0, [r7, #28]
 8008756:	aa01      	add	r2, sp, #4
 8008758:	4629      	mov	r1, r5
 800875a:	f000 fb75 	bl	8008e48 <pinctrl_lookup_state>
	if (ret < 0) {
 800875e:	2800      	cmp	r0, #0
 8008760:	db67      	blt.n	8008832 <uart_stm32_init+0x112>
	return pinctrl_apply_state_direct(config, state);
 8008762:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8008764:	462a      	mov	r2, r5
 8008766:	7919      	ldrb	r1, [r3, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
 800876a:	f000 fb91 	bl	8008e90 <pinctrl_configure_pins>
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 800876e:	2800      	cmp	r0, #0
 8008770:	db5f      	blt.n	8008832 <uart_stm32_init+0x112>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f043 030c 	orr.w	r3, r3, #12
 8008780:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	d051      	beq.n	800882c <uart_stm32_init+0x10c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8008788:	2b01      	cmp	r3, #1
 800878a:	bf0c      	ite	eq
 800878c:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
 8008790:	2200      	movne	r2, #0
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8008792:	6823      	ldr	r3, [r4, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008794:	6871      	ldr	r1, [r6, #4]
 8008796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800879a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800879e:	4313      	orrs	r3, r2
 80087a0:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	f8d1 9000 	ldr.w	r9, [r1]
 80087a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087ac:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80087ae:	7c3b      	ldrb	r3, [r7, #16]
 80087b0:	b12b      	cbz	r3, 80087be <uart_stm32_init+0x9e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80087b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80087b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087ba:	f8c9 3008 	str.w	r3, [r9, #8]
	if (clock_control_get_rate(data->clock,
 80087be:	6933      	ldr	r3, [r6, #16]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80087c0:	f8d8 8000 	ldr.w	r8, [r8]
	if (clock_control_get_rate(data->clock,
 80087c4:	f8d3 a004 	ldr.w	sl, [r3, #4]
			       (clock_control_subsys_t *)&config->pclken,
 80087c8:	f101 0608 	add.w	r6, r1, #8
 80087cc:	4650      	mov	r0, sl
 80087ce:	f004 fc25 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80087d2:	b1b8      	cbz	r0, 8008804 <uart_stm32_init+0xe4>
	if (api->get_rate == NULL) {
 80087d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	b19b      	cbz	r3, 8008804 <uart_stm32_init+0xe4>
	return api->get_rate(dev, sys, rate);
 80087dc:	aa01      	add	r2, sp, #4
 80087de:	4631      	mov	r1, r6
 80087e0:	4650      	mov	r0, sl
 80087e2:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 80087e4:	2800      	cmp	r0, #0
 80087e6:	db0d      	blt.n	8008804 <uart_stm32_init+0xe4>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80087e8:	f8d9 3000 	ldr.w	r3, [r9]
 80087ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f0:	f8c9 3000 	str.w	r3, [r9]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80087fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f8c9 300c 	str.w	r3, [r9, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 8008804:	7e3b      	ldrb	r3, [r7, #24]
 8008806:	b11b      	cbz	r3, 8008810 <uart_stm32_init+0xf0>
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	f043 0308 	orr.w	r3, r3, #8
 800880e:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8008818:	69e3      	ldr	r3, [r4, #28]
 800881a:	029a      	lsls	r2, r3, #10
 800881c:	d5fc      	bpl.n	8008818 <uart_stm32_init+0xf8>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	025b      	lsls	r3, r3, #9
 8008822:	d5fc      	bpl.n	800881e <uart_stm32_init+0xfe>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8008824:	4628      	mov	r0, r5
 8008826:	b002      	add	sp, #8
 8008828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008830:	e7af      	b.n	8008792 <uart_stm32_init+0x72>
	if (err < 0) {
 8008832:	4605      	mov	r5, r0
}
 8008834:	4628      	mov	r0, r5
 8008836:	b002      	add	sp, #8
 8008838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
 800883c:	f06f 0504 	mvn.w	r5, #4
 8008840:	e7f0      	b.n	8008824 <uart_stm32_init+0x104>
 8008842:	bf00      	nop
 8008844:	08011734 	.word	0x08011734

08008848 <random_byte_get>:

static int random_byte_get(void)
{
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <random_byte_get+0x64>)
 800884a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
 800884c:	f04f 0310 	mov.w	r3, #16
 8008850:	f3ef 8c11 	mrs	ip, BASEPRI
 8008854:	f383 8812 	msr	BASEPRI_MAX, r3
 8008858:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 800885c:	6853      	ldr	r3, [r2, #4]
 800885e:	0659      	lsls	r1, r3, #25
 8008860:	d510      	bpl.n	8008884 <random_byte_get+0x3c>
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_SEIS(RNG_TypeDef *RNGx)
{
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8008862:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8008866:	6053      	str	r3, [r2, #4]
 8008868:	230c      	movs	r3, #12
	for (int i = 0; i < 12; ++i) {
 800886a:	3b01      	subs	r3, #1
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 800886c:	6891      	ldr	r1, [r2, #8]
 800886e:	d1fc      	bne.n	800886a <random_byte_get+0x22>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8008870:	6853      	ldr	r3, [r2, #4]
 8008872:	0658      	lsls	r0, r3, #25
 8008874:	d506      	bpl.n	8008884 <random_byte_get+0x3c>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
		retval = -EIO;
 8008876:	f06f 0004 	mvn.w	r0, #4
	__asm__ volatile(
 800887a:	f38c 8811 	msr	BASEPRI, ip
 800887e:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 8008882:	4770      	bx	lr
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8008884:	6853      	ldr	r3, [r2, #4]
	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
 8008886:	07db      	lsls	r3, r3, #31
 8008888:	d50d      	bpl.n	80088a6 <random_byte_get+0x5e>
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 800888a:	6853      	ldr	r3, [r2, #4]
 800888c:	0799      	lsls	r1, r3, #30
 800888e:	d4f2      	bmi.n	8008876 <random_byte_get+0x2e>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8008890:	6853      	ldr	r3, [r2, #4]
 8008892:	065b      	lsls	r3, r3, #25
 8008894:	d4ef      	bmi.n	8008876 <random_byte_get+0x2e>
  return (uint32_t)(READ_REG(RNGx->DR));
 8008896:	6890      	ldr	r0, [r2, #8]
		if (retval == 0) {
 8008898:	b128      	cbz	r0, 80088a6 <random_byte_get+0x5e>
		retval &= 0xFF;
 800889a:	b2c0      	uxtb	r0, r0
 800889c:	f38c 8811 	msr	BASEPRI, ip
 80088a0:	f3bf 8f6f 	isb	sy
}
 80088a4:	4770      	bx	lr
	int retval = -EAGAIN;
 80088a6:	f06f 000a 	mvn.w	r0, #10
 80088aa:	e7e6      	b.n	800887a <random_byte_get+0x32>
 80088ac:	20000294 	.word	0x20000294

080088b0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 80088b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b2:	4684      	mov	ip, r0
	uint32_t last  = rngp->last;
 80088b4:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
 80088b6:	78c4      	ldrb	r4, [r0, #3]
{
 80088b8:	4610      	mov	r0, r2
	__asm__ volatile(
 80088ba:	f04f 0210 	mov.w	r2, #16
 80088be:	f3ef 8e11 	mrs	lr, BASEPRI
 80088c2:	f382 8812 	msr	BASEPRI_MAX, r2
 80088c6:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 80088ca:	f89c 6000 	ldrb.w	r6, [ip]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 80088ce:	f89c 7001 	ldrb.w	r7, [ip, #1]

	available = (last - first) & mask;
 80088d2:	1b9a      	subs	r2, r3, r6
 80088d4:	4022      	ands	r2, r4
	if (available < len) {
 80088d6:	4290      	cmp	r0, r2
		len = available;
 80088d8:	bf88      	it	hi
 80088da:	b290      	uxthhi	r0, r2

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 80088dc:	1835      	adds	r5, r6, r0
 80088de:	4025      	ands	r5, r4
	first = rngp->first_alloc;
 80088e0:	4633      	mov	r3, r6
	rngp->first_alloc = (first + len) & mask;
 80088e2:	f88c 5000 	strb.w	r5, [ip]
	__asm__ volatile(
 80088e6:	f38e 8811 	msr	BASEPRI, lr
 80088ea:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	while (likely(len--)) {
 80088ee:	b160      	cbz	r0, 800890a <rng_pool_get+0x5a>
 80088f0:	180d      	adds	r5, r1, r0
		*dst++ = rngp->buffer[first];
 80088f2:	eb0c 0e03 	add.w	lr, ip, r3
		first = (first + 1) & mask;
 80088f6:	3301      	adds	r3, #1
		*dst++ = rngp->buffer[first];
 80088f8:	f89e e005 	ldrb.w	lr, [lr, #5]
 80088fc:	f801 eb01 	strb.w	lr, [r1], #1
	while (likely(len--)) {
 8008900:	42a9      	cmp	r1, r5
		first = (first + 1) & mask;
 8008902:	ea03 0304 	and.w	r3, r3, r4
	while (likely(len--)) {
 8008906:	d1f4      	bne.n	80088f2 <rng_pool_get+0x42>
		rngp->first_read = rngp->first_alloc;
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
 8008908:	1a12      	subs	r2, r2, r0
	if (likely(!other_read_in_progress)) {
 800890a:	42be      	cmp	r6, r7
 800890c:	d10f      	bne.n	800892e <rng_pool_get+0x7e>
	__asm__ volatile(
 800890e:	f04f 0110 	mov.w	r1, #16
 8008912:	f3ef 8311 	mrs	r3, BASEPRI
 8008916:	f381 8812 	msr	BASEPRI_MAX, r1
 800891a:	f3bf 8f6f 	isb	sy
		rngp->first_read = rngp->first_alloc;
 800891e:	f89c 1000 	ldrb.w	r1, [ip]
 8008922:	f88c 1001 	strb.w	r1, [ip, #1]
	__asm__ volatile(
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
	if (available <= rngp->threshold) {
 800892e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8008932:	4293      	cmp	r3, r2
 8008934:	d305      	bcc.n	8008942 <rng_pool_get+0x92>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 8008936:	4b03      	ldr	r3, [pc, #12]	; (8008944 <rng_pool_get+0x94>)
 8008938:	681a      	ldr	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	6013      	str	r3, [r2, #0]
	}

	return len;
}
 8008942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008944:	20000294 	.word	0x20000294

08008948 <stm32_rng_isr>:
	rngp->mask	  = size - 1;
	rngp->threshold	  = threshold;
}

static void stm32_rng_isr(const void *arg)
{
 8008948:	b508      	push	{r3, lr}
	int byte, ret;

	ARG_UNUSED(arg);

	byte = random_byte_get();
 800894a:	f7ff ff7d 	bl	8008848 <random_byte_get>
	if (byte < 0) {
 800894e:	2800      	cmp	r0, #0
 8008950:	db13      	blt.n	800897a <stm32_rng_isr+0x32>
	uint8_t last  = rngp->last;
 8008952:	4a19      	ldr	r2, [pc, #100]	; (80089b8 <stm32_rng_isr+0x70>)
 8008954:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	if (((last - first) & mask) == mask) {
 8008958:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
	uint8_t mask  = rngp->mask;
 800895c:	f892 c03b 	ldrb.w	ip, [r2, #59]	; 0x3b
	if (((last - first) & mask) == mask) {
 8008960:	1a59      	subs	r1, r3, r1
 8008962:	ea3c 0101 	bics.w	r1, ip, r1
		return;
	}

	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 8008966:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
 8008968:	d008      	beq.n	800897c <stm32_rng_isr+0x34>
	rngp->buffer[last] = byte;
 800896a:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 800896c:	3301      	adds	r3, #1
 800896e:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8008972:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
	rngp->last = (last + 1) & mask;
 8008976:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
		}

		k_sem_give(&entropy_stm32_rng_data.sem_sync);
	}
}
 800897a:	bd08      	pop	{r3, pc}
	uint8_t last  = rngp->last;
 800897c:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
	if (((last - first) & mask) == mask) {
 8008980:	f892 104e 	ldrb.w	r1, [r2, #78]	; 0x4e
	uint8_t mask  = rngp->mask;
 8008984:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
	if (((last - first) & mask) == mask) {
 8008988:	1a59      	subs	r1, r3, r1
 800898a:	ea3c 0101 	bics.w	r1, ip, r1
 800898e:	d00c      	beq.n	80089aa <stm32_rng_isr+0x62>
	rngp->buffer[last] = byte;
 8008990:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 8008992:	3301      	adds	r3, #1
 8008994:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8008998:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
	rngp->last = (last + 1) & mask;
 800899c:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
	z_impl_k_sem_give(sem);
 80089a0:	4806      	ldr	r0, [pc, #24]	; (80089bc <stm32_rng_isr+0x74>)
}
 80089a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089a6:	f004 beeb 	b.w	800d780 <z_impl_k_sem_give>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 80089aa:	6812      	ldr	r2, [r2, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 80089ac:	6813      	ldr	r3, [r2, #0]
 80089ae:	f023 0308 	bic.w	r3, r3, #8
 80089b2:	6013      	str	r3, [r2, #0]
}
 80089b4:	e7f4      	b.n	80089a0 <stm32_rng_isr+0x58>
 80089b6:	bf00      	nop
 80089b8:	20000294 	.word	0x20000294
 80089bc:	200002b4 	.word	0x200002b4

080089c0 <entropy_stm32_rng_get_entropy>:
					 uint16_t len)
{
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	while (len) {
 80089c0:	b34a      	cbz	r2, 8008a16 <entropy_stm32_rng_get_entropy+0x56>
{
 80089c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
 80089c6:	4f15      	ldr	r7, [pc, #84]	; (8008a1c <entropy_stm32_rng_get_entropy+0x5c>)
 80089c8:	460e      	mov	r6, r1
 80089ca:	4615      	mov	r5, r2
		uint16_t bytes;

		k_sem_take(&entropy_stm32_rng_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get(
 80089cc:	f107 0845 	add.w	r8, r7, #69	; 0x45
 80089d0:	f107 0918 	add.w	r9, r7, #24
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089dc:	4638      	mov	r0, r7
 80089de:	f004 fef9 	bl	800d7d4 <z_impl_k_sem_take>
 80089e2:	462a      	mov	r2, r5
 80089e4:	4631      	mov	r1, r6
 80089e6:	4640      	mov	r0, r8
 80089e8:	f7ff ff62 	bl	80088b0 <rng_pool_get>
 80089ec:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 80089ee:	4638      	mov	r0, r7
 80089f0:	f004 fec6 	bl	800d780 <z_impl_k_sem_give>
			/* Pool is empty: Sleep until next interrupt. */
			k_sem_take(&entropy_stm32_rng_data.sem_sync, K_FOREVER);
			continue;
		}

		len -= bytes;
 80089f4:	1b2b      	subs	r3, r5, r4
		if (bytes == 0U) {
 80089f6:	b134      	cbz	r4, 8008a06 <entropy_stm32_rng_get_entropy+0x46>
		len -= bytes;
 80089f8:	b29d      	uxth	r5, r3
		buf += bytes;
 80089fa:	4426      	add	r6, r4
	while (len) {
 80089fc:	2d00      	cmp	r5, #0
 80089fe:	d1e9      	bne.n	80089d4 <entropy_stm32_rng_get_entropy+0x14>
	}

	return 0;
}
 8008a00:	2000      	movs	r0, #0
 8008a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_take(sem, timeout);
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0e:	4648      	mov	r0, r9
 8008a10:	f004 fee0 	bl	800d7d4 <z_impl_k_sem_take>
	while (len) {
 8008a14:	e7de      	b.n	80089d4 <entropy_stm32_rng_get_entropy+0x14>
}
 8008a16:	2000      	movs	r0, #0
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	2000029c 	.word	0x2000029c

08008a20 <entropy_stm32_rng_init>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8008a20:	4b33      	ldr	r3, [pc, #204]	; (8008af0 <entropy_stm32_rng_init+0xd0>)
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008a28:	f042 0201 	orr.w	r2, r2, #1

	return cnt;
}

static int entropy_stm32_rng_init(const struct device *dev)
{
 8008a2c:	b570      	push	{r4, r5, r6, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 8008a2e:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 8008a30:	6846      	ldr	r6, [r0, #4]
 8008a32:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008a3a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8008a3e:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8008a42:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a4a:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 8008a4c:	691a      	ldr	r2, [r3, #16]
 8008a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008a52:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	0112      	lsls	r2, r2, #4
 8008a58:	d5fc      	bpl.n	8008a54 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 8008a5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 8008a5e:	4d25      	ldr	r5, [pc, #148]	; (8008af4 <entropy_stm32_rng_init+0xd4>)
 8008a60:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008a64:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008a6c:	6065      	str	r5, [r4, #4]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f004 fad4 	bl	800d01c <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8008a74:	b120      	cbz	r0, 8008a80 <entropy_stm32_rng_init+0x60>
	return api->on(dev, sys);
 8008a76:	68ab      	ldr	r3, [r5, #8]
 8008a78:	4631      	mov	r1, r6
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 8008a80:	4620      	mov	r0, r4
 8008a82:	f850 3b08 	ldr.w	r3, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	f042 0208 	orr.w	r2, r2, #8
 8008a8c:	601a      	str	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f042 0204 	orr.w	r2, r2, #4
 8008a94:	601a      	str	r2, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8008a96:	2201      	movs	r2, #1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	f004 fe61 	bl	800d760 <z_impl_k_sem_init>
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	f104 0020 	add.w	r0, r4, #32
 8008aa6:	f004 fe5b 	bl	800d760 <z_impl_k_sem_init>
	rngp->threshold	  = threshold;
 8008aaa:	2304      	movs	r3, #4
	rngp->first_alloc = 0U;
 8008aac:	2500      	movs	r5, #0
	rngp->threshold	  = threshold;
 8008aae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	rngp->mask	  = size - 1;
 8008ab2:	2207      	movs	r2, #7
	rngp->threshold	  = threshold;
 8008ab4:	230c      	movs	r3, #12
	rngp->mask	  = size - 1;
 8008ab6:	210f      	movs	r1, #15
 8008ab8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8008abc:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8008ac0:	462a      	mov	r2, r5
	rngp->threshold	  = threshold;
 8008ac2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8008ac6:	4629      	mov	r1, r5
	rngp->first_alloc = 0U;
 8008ac8:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
	rngp->first_read  = 0U;
 8008acc:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
	rngp->last	  = 0U;
 8008ad0:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
	rngp->first_alloc = 0U;
 8008ad4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	rngp->first_read  = 0U;
 8008ad8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
	rngp->last	  = 0U;
 8008adc:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8008ae0:	2050      	movs	r0, #80	; 0x50
 8008ae2:	f7fa fa47 	bl	8002f74 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 8008ae6:	2050      	movs	r0, #80	; 0x50
 8008ae8:	f7fa fa12 	bl	8002f10 <arch_irq_enable>

	return 0;
}
 8008aec:	4628      	mov	r0, r5
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	40021000 	.word	0x40021000
 8008af4:	08011734 	.word	0x08011734

08008af8 <entropy_stm32_rng_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8008af8:	07d8      	lsls	r0, r3, #31
{
 8008afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8008afe:	d404      	bmi.n	8008b0a <entropy_stm32_rng_get_entropy_isr+0x12>
		return rng_pool_get(
 8008b00:	4823      	ldr	r0, [pc, #140]	; (8008b90 <entropy_stm32_rng_get_entropy_isr+0x98>)
 8008b02:	f7ff fed5 	bl	80088b0 <rng_pool_get>
}
 8008b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 8008b0a:	4614      	mov	r4, r2
 8008b0c:	b912      	cbnz	r2, 8008b14 <entropy_stm32_rng_get_entropy_isr+0x1c>
	return cnt;
 8008b0e:	4620      	mov	r0, r4
}
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	460d      	mov	r5, r1
	__asm__ volatile(
 8008b16:	f04f 0310 	mov.w	r3, #16
 8008b1a:	f3ef 8611 	mrs	r6, BASEPRI
 8008b1e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008b22:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 8008b26:	2050      	movs	r0, #80	; 0x50
 8008b28:	f7fa fa16 	bl	8002f58 <arch_irq_is_enabled>
 8008b2c:	4680      	mov	r8, r0
		irq_disable(IRQN);
 8008b2e:	2050      	movs	r0, #80	; 0x50
 8008b30:	f7fa f9fe 	bl	8002f30 <arch_irq_disable>
	__asm__ volatile(
 8008b34:	f386 8811 	msr	BASEPRI, r6
 8008b38:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b3c:	4e15      	ldr	r6, [pc, #84]	; (8008b94 <entropy_stm32_rng_get_entropy_isr+0x9c>)
 8008b3e:	f8df a058 	ldr.w	sl, [pc, #88]	; 8008b98 <entropy_stm32_rng_get_entropy_isr+0xa0>
 8008b42:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8008b46:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 8008b4a:	46a1      	mov	r9, r4
			while (LL_RNG_IsActiveFlag_DRDY(
 8008b4c:	f8da 3000 	ldr.w	r3, [sl]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	07db      	lsls	r3, r3, #31
 8008b54:	d516      	bpl.n	8008b84 <entropy_stm32_rng_get_entropy_isr+0x8c>
			byte = random_byte_get();
 8008b56:	f7ff fe77 	bl	8008848 <random_byte_get>
			if (byte < 0) {
 8008b5a:	2800      	cmp	r0, #0
			buf[--len] = byte;
 8008b5c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8008b60:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
			if (byte < 0) {
 8008b64:	dbf2      	blt.n	8008b4c <entropy_stm32_rng_get_entropy_isr+0x54>
			buf[--len] = byte;
 8008b66:	fa1f f983 	uxth.w	r9, r3
 8008b6a:	f805 0009 	strb.w	r0, [r5, r9]
		} while (len);
 8008b6e:	f1b9 0f00 	cmp.w	r9, #0
 8008b72:	d1eb      	bne.n	8008b4c <entropy_stm32_rng_get_entropy_isr+0x54>
		if (irq_enabled) {
 8008b74:	f1b8 0f00 	cmp.w	r8, #0
 8008b78:	d0c9      	beq.n	8008b0e <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 8008b7a:	2050      	movs	r0, #80	; 0x50
 8008b7c:	f7fa f9c8 	bl	8002f10 <arch_irq_enable>
	return cnt;
 8008b80:	4620      	mov	r0, r4
 8008b82:	e7c5      	b.n	8008b10 <entropy_stm32_rng_get_entropy_isr+0x18>
  __ASM volatile ("dsb 0xF":::"memory");
 8008b84:	f3bf 8f4f 	dsb	sy
				__WFE();
 8008b88:	bf20      	wfe
				__SEV();
 8008b8a:	bf40      	sev
				__WFE();
 8008b8c:	bf20      	wfe
 8008b8e:	e7dd      	b.n	8008b4c <entropy_stm32_rng_get_entropy_isr+0x54>
 8008b90:	200002cc 	.word	0x200002cc
 8008b94:	e000e100 	.word	0xe000e100
 8008b98:	20000294 	.word	0x20000294

08008b9c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8008b9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
{
 8008ba0:	b430      	push	{r4, r5}
	uint32_t val1 = SysTick->VAL;	/* A */
 8008ba2:	6995      	ldr	r5, [r2, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8008ba4:	6913      	ldr	r3, [r2, #16]
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
	    || (val1 < val2)) {
		overflow_cyc += last_load;
 8008ba6:	4909      	ldr	r1, [pc, #36]	; (8008bcc <elapsed+0x30>)
	uint32_t val2 = SysTick->VAL;	/* C */
 8008ba8:	6990      	ldr	r0, [r2, #24]
		overflow_cyc += last_load;
 8008baa:	680c      	ldr	r4, [r1, #0]
 8008bac:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <elapsed+0x34>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8008bae:	03db      	lsls	r3, r3, #15
 8008bb0:	d401      	bmi.n	8008bb6 <elapsed+0x1a>
	    || (val1 < val2)) {
 8008bb2:	4285      	cmp	r5, r0
 8008bb4:	d205      	bcs.n	8008bc2 <elapsed+0x26>
		overflow_cyc += last_load;
 8008bb6:	6811      	ldr	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8008bb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		overflow_cyc += last_load;
 8008bbc:	4421      	add	r1, r4
 8008bbe:	6011      	str	r1, [r2, #0]
		(void)SysTick->CTRL;
 8008bc0:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	4423      	add	r3, r4
}
 8008bc6:	1a18      	subs	r0, r3, r0
 8008bc8:	bc30      	pop	{r4, r5}
 8008bca:	4770      	bx	lr
 8008bcc:	20001364 	.word	0x20001364
 8008bd0:	20001368 	.word	0x20001368

08008bd4 <sys_clock_driver_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

static int sys_clock_driver_init(const struct device *dev)
{
 8008bd4:	b430      	push	{r4, r5}
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
	SysTick->LOAD = last_load;
 8008bd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bda:	4d0a      	ldr	r5, [pc, #40]	; (8008c04 <sys_clock_driver_init+0x30>)
	last_load = CYC_PER_TICK - 1;
 8008bdc:	4c0a      	ldr	r4, [pc, #40]	; (8008c08 <sys_clock_driver_init+0x34>)
	overflow_cyc = 0U;
 8008bde:	490b      	ldr	r1, [pc, #44]	; (8008c0c <sys_clock_driver_init+0x38>)
 8008be0:	2000      	movs	r0, #0
	last_load = CYC_PER_TICK - 1;
 8008be2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8008be6:	f04f 0c10 	mov.w	ip, #16
 8008bea:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
 8008bee:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0U;
 8008bf0:	6008      	str	r0, [r1, #0]
	SysTick->LOAD = last_load;
 8008bf2:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8008bf4:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8008bf6:	691a      	ldr	r2, [r3, #16]
 8008bf8:	f042 0207 	orr.w	r2, r2, #7
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8008bfc:	bc30      	pop	{r4, r5}
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8008bfe:	611a      	str	r2, [r3, #16]
}
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	e000ed00 	.word	0xe000ed00
 8008c08:	20001364 	.word	0x20001364
 8008c0c:	20001368 	.word	0x20001368

08008c10 <sys_clock_isr>:
{
 8008c10:	b538      	push	{r3, r4, r5, lr}
	elapsed();
 8008c12:	f7ff ffc3 	bl	8008b9c <elapsed>
	cycle_count += overflow_cyc;
 8008c16:	4c0d      	ldr	r4, [pc, #52]	; (8008c4c <sys_clock_isr+0x3c>)
 8008c18:	480d      	ldr	r0, [pc, #52]	; (8008c50 <sys_clock_isr+0x40>)
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	6802      	ldr	r2, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008c1e:	490d      	ldr	r1, [pc, #52]	; (8008c54 <sys_clock_isr+0x44>)
	cycle_count += overflow_cyc;
 8008c20:	441a      	add	r2, r3
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008c22:	680b      	ldr	r3, [r1, #0]
	cycle_count += overflow_cyc;
 8008c24:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0;
 8008c26:	2500      	movs	r5, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008c28:	4c0b      	ldr	r4, [pc, #44]	; (8008c58 <sys_clock_isr+0x48>)
	overflow_cyc = 0;
 8008c2a:	6005      	str	r5, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008c2c:	1ad0      	subs	r0, r2, r3
 8008c2e:	fba4 4000 	umull	r4, r0, r4, r0
		announced_cycles += dticks * CYC_PER_TICK;
 8008c32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008c36:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8008c38:	fb02 3300 	mla	r3, r2, r0, r3
 8008c3c:	600b      	str	r3, [r1, #0]
		sys_clock_announce(dticks);
 8008c3e:	f005 fe9b 	bl	800e978 <sys_clock_announce>
}
 8008c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_arm_int_exit();
 8008c46:	f7fa ba99 	b.w	800317c <z_arm_exc_exit>
 8008c4a:	bf00      	nop
 8008c4c:	20001360 	.word	0x20001360
 8008c50:	20001368 	.word	0x20001368
 8008c54:	2000135c 	.word	0x2000135c
 8008c58:	10624dd3 	.word	0x10624dd3

08008c5c <sys_clock_set_timeout>:
{
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d03d      	beq.n	8008cde <sys_clock_set_timeout+0x82>
 8008c62:	1c42      	adds	r2, r0, #1
 8008c64:	d066      	beq.n	8008d34 <sys_clock_set_timeout+0xd8>
	uint32_t last_load_ = last_load;
 8008c66:	4f3a      	ldr	r7, [pc, #232]	; (8008d50 <sys_clock_set_timeout+0xf4>)
 8008c68:	683c      	ldr	r4, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8008c6a:	2801      	cmp	r0, #1
 8008c6c:	dd3e      	ble.n	8008cec <sys_clock_set_timeout+0x90>
 8008c6e:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8008c72:	dd6a      	ble.n	8008d4a <sys_clock_set_timeout+0xee>
 8008c74:	f44f 6503 	mov.w	r5, #2096	; 0x830
	__asm__ volatile(
 8008c78:	f04f 0310 	mov.w	r3, #16
 8008c7c:	f3ef 8611 	mrs	r6, BASEPRI
 8008c80:	f383 8812 	msr	BASEPRI_MAX, r3
 8008c84:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8008c88:	f7ff ff88 	bl	8008b9c <elapsed>
	cycle_count += pending;
 8008c8c:	4a31      	ldr	r2, [pc, #196]	; (8008d54 <sys_clock_set_timeout+0xf8>)
	uint32_t unannounced = cycle_count - announced_cycles;
 8008c8e:	4b32      	ldr	r3, [pc, #200]	; (8008d58 <sys_clock_set_timeout+0xfc>)
 8008c90:	6819      	ldr	r1, [r3, #0]
	cycle_count += pending;
 8008c92:	6813      	ldr	r3, [r2, #0]
	val1 = SysTick->VAL;
 8008c94:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	cycle_count += pending;
 8008c98:	4418      	add	r0, r3
	overflow_cyc = 0U;
 8008c9a:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <sys_clock_set_timeout+0x100>)
	val1 = SysTick->VAL;
 8008c9c:	f8dc c018 	ldr.w	ip, [ip, #24]
	cycle_count += pending;
 8008ca0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
 8008ca2:	f04f 0e00 	mov.w	lr, #0
 8008ca6:	f8c3 e000 	str.w	lr, [r3]
	if ((int32_t)unannounced < 0) {
 8008caa:	1a43      	subs	r3, r0, r1
 8008cac:	d420      	bmi.n	8008cf0 <sys_clock_set_timeout+0x94>
		delay = ticks * CYC_PER_TICK;
 8008cae:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8008cb2:	fb0e 3305 	mla	r3, lr, r5, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8008cb6:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8008cba:	4d29      	ldr	r5, [pc, #164]	; (8008d60 <sys_clock_set_timeout+0x104>)
 8008cbc:	331f      	adds	r3, #31
 8008cbe:	fba5 5303 	umull	r5, r3, r5, r3
		delay -= unannounced;
 8008cc2:	1a09      	subs	r1, r1, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8008cc4:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8008cc6:	fb0e 1303 	mla	r3, lr, r3, r1
		delay = MAX(delay, MIN_DELAY);
 8008cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cce:	d928      	bls.n	8008d22 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8008cd0:	4924      	ldr	r1, [pc, #144]	; (8008d64 <sys_clock_set_timeout+0x108>)
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d92b      	bls.n	8008d2e <sys_clock_set_timeout+0xd2>
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8008cd6:	f8df e090 	ldr.w	lr, [pc, #144]	; 8008d68 <sys_clock_set_timeout+0x10c>
			last_load = MAX_CYCLES;
 8008cda:	6039      	str	r1, [r7, #0]
 8008cdc:	e00d      	b.n	8008cfa <sys_clock_set_timeout+0x9e>
	uint32_t last_load_ = last_load;
 8008cde:	4f1c      	ldr	r7, [pc, #112]	; (8008d50 <sys_clock_set_timeout+0xf4>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8008ce0:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8008ce2:	683c      	ldr	r4, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8008ce4:	d1c1      	bne.n	8008c6a <sys_clock_set_timeout+0xe>
 8008ce6:	f640 052f 	movw	r5, #2095	; 0x82f
 8008cea:	e7c5      	b.n	8008c78 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8008cec:	2500      	movs	r5, #0
 8008cee:	e7c3      	b.n	8008c78 <sys_clock_set_timeout+0x1c>
		last_load = MIN_DELAY;
 8008cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	f240 3eff 	movw	lr, #1023	; 0x3ff
	val2 = SysTick->VAL;
 8008cfa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	SysTick->VAL = 0; /* resets timer to last_load */
 8008cfe:	2500      	movs	r5, #0
	val2 = SysTick->VAL;
 8008d00:	698b      	ldr	r3, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8008d02:	f8c1 e014 	str.w	lr, [r1, #20]
	if (val1 < val2) {
 8008d06:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8008d08:	ebac 0303 	sub.w	r3, ip, r3
 8008d0c:	bf3a      	itte	cc
 8008d0e:	18e4      	addcc	r4, r4, r3
 8008d10:	1900      	addcc	r0, r0, r4
		cycle_count += (val1 - val2);
 8008d12:	18c0      	addcs	r0, r0, r3
	SysTick->VAL = 0; /* resets timer to last_load */
 8008d14:	618d      	str	r5, [r1, #24]
		cycle_count += (val1 - val2);
 8008d16:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
 8008d18:	f386 8811 	msr	BASEPRI, r6
 8008d1c:	f3bf 8f6f 	isb	sy
}
 8008d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d22:	f240 3eff 	movw	lr, #1023	; 0x3ff
		delay = MAX(delay, MIN_DELAY);
 8008d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	e7e5      	b.n	8008cfa <sys_clock_set_timeout+0x9e>
	SysTick->LOAD = last_load - 1;
 8008d2e:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8008d32:	e7fa      	b.n	8008d2a <sys_clock_set_timeout+0xce>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8008d34:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = TIMER_STOPPED;
 8008d38:	4905      	ldr	r1, [pc, #20]	; (8008d50 <sys_clock_set_timeout+0xf4>)
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8008d3a:	6913      	ldr	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8008d3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8008d46:	6008      	str	r0, [r1, #0]
}
 8008d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8008d4a:	1e45      	subs	r5, r0, #1
 8008d4c:	e794      	b.n	8008c78 <sys_clock_set_timeout+0x1c>
 8008d4e:	bf00      	nop
 8008d50:	20001364 	.word	0x20001364
 8008d54:	20001360 	.word	0x20001360
 8008d58:	2000135c 	.word	0x2000135c
 8008d5c:	20001368 	.word	0x20001368
 8008d60:	10624dd3 	.word	0x10624dd3
 8008d64:	00ffdc00 	.word	0x00ffdc00
 8008d68:	00ffdbff 	.word	0x00ffdbff

08008d6c <sys_clock_elapsed>:
{
 8008d6c:	b410      	push	{r4}
	__asm__ volatile(
 8008d6e:	f04f 0310 	mov.w	r3, #16
 8008d72:	f3ef 8c11 	mrs	ip, BASEPRI
 8008d76:	f383 8812 	msr	BASEPRI_MAX, r3
 8008d7a:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 8008d7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d82:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8008d84:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8008d86:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8008d88:	03d3      	lsls	r3, r2, #15
 8008d8a:	d401      	bmi.n	8008d90 <sys_clock_elapsed+0x24>
	    || (val1 < val2)) {
 8008d8c:	42a1      	cmp	r1, r4
 8008d8e:	d21b      	bcs.n	8008dc8 <sys_clock_elapsed+0x5c>
		overflow_cyc += last_load;
 8008d90:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <sys_clock_elapsed+0x64>)
 8008d92:	4910      	ldr	r1, [pc, #64]	; (8008dd4 <sys_clock_elapsed+0x68>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	6809      	ldr	r1, [r1, #0]
 8008d98:	440a      	add	r2, r1
 8008d9a:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 8008d9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008da0:	6912      	ldr	r2, [r2, #16]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8008da2:	4a0d      	ldr	r2, [pc, #52]	; (8008dd8 <sys_clock_elapsed+0x6c>)
	return (last_load - val2) + overflow_cyc;
 8008da4:	6818      	ldr	r0, [r3, #0]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	4418      	add	r0, r3
 8008daa:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <sys_clock_elapsed+0x70>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	1b00      	subs	r0, r0, r4
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	4408      	add	r0, r1
	__asm__ volatile(
 8008db4:	f38c 8811 	msr	BASEPRI, ip
 8008db8:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8008dbc:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <sys_clock_elapsed+0x74>)
}
 8008dbe:	bc10      	pop	{r4}
	return cyc / CYC_PER_TICK;
 8008dc0:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008dc4:	0a40      	lsrs	r0, r0, #9
 8008dc6:	4770      	bx	lr
		overflow_cyc += last_load;
 8008dc8:	4a02      	ldr	r2, [pc, #8]	; (8008dd4 <sys_clock_elapsed+0x68>)
 8008dca:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <sys_clock_elapsed+0x64>)
 8008dcc:	6811      	ldr	r1, [r2, #0]
 8008dce:	e7e8      	b.n	8008da2 <sys_clock_elapsed+0x36>
 8008dd0:	20001368 	.word	0x20001368
 8008dd4:	20001364 	.word	0x20001364
 8008dd8:	20001360 	.word	0x20001360
 8008ddc:	2000135c 	.word	0x2000135c
 8008de0:	10624dd3 	.word	0x10624dd3

08008de4 <sys_clock_cycle_get_32>:
{
 8008de4:	b410      	push	{r4}
	__asm__ volatile(
 8008de6:	f04f 0310 	mov.w	r3, #16
 8008dea:	f3ef 8c11 	mrs	ip, BASEPRI
 8008dee:	f383 8812 	msr	BASEPRI_MAX, r3
 8008df2:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 8008df6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dfa:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8008dfc:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8008dfe:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8008e00:	03d3      	lsls	r3, r2, #15
 8008e02:	d401      	bmi.n	8008e08 <sys_clock_cycle_get_32+0x24>
	    || (val1 < val2)) {
 8008e04:	42a1      	cmp	r1, r4
 8008e06:	d214      	bcs.n	8008e32 <sys_clock_cycle_get_32+0x4e>
		overflow_cyc += last_load;
 8008e08:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <sys_clock_cycle_get_32+0x58>)
 8008e0a:	490d      	ldr	r1, [pc, #52]	; (8008e40 <sys_clock_cycle_get_32+0x5c>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	6809      	ldr	r1, [r1, #0]
 8008e10:	440a      	add	r2, r1
 8008e12:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 8008e14:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008e18:	6912      	ldr	r2, [r2, #16]
	uint32_t ret = elapsed() + cycle_count;
 8008e1a:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <sys_clock_cycle_get_32+0x60>)
	return (last_load - val2) + overflow_cyc;
 8008e1c:	6818      	ldr	r0, [r3, #0]
	uint32_t ret = elapsed() + cycle_count;
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	4418      	add	r0, r3
 8008e22:	1b00      	subs	r0, r0, r4
 8008e24:	4408      	add	r0, r1
	__asm__ volatile(
 8008e26:	f38c 8811 	msr	BASEPRI, ip
 8008e2a:	f3bf 8f6f 	isb	sy
}
 8008e2e:	bc10      	pop	{r4}
 8008e30:	4770      	bx	lr
		overflow_cyc += last_load;
 8008e32:	4a03      	ldr	r2, [pc, #12]	; (8008e40 <sys_clock_cycle_get_32+0x5c>)
 8008e34:	4b01      	ldr	r3, [pc, #4]	; (8008e3c <sys_clock_cycle_get_32+0x58>)
 8008e36:	6811      	ldr	r1, [r2, #0]
 8008e38:	e7ef      	b.n	8008e1a <sys_clock_cycle_get_32+0x36>
 8008e3a:	bf00      	nop
 8008e3c:	20001368 	.word	0x20001368
 8008e40:	20001364 	.word	0x20001364
 8008e44:	20001360 	.word	0x20001360

08008e48 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 8008e48:	b500      	push	{lr}
	*state = &config->states[0];
 8008e4a:	6803      	ldr	r3, [r0, #0]
 8008e4c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8008e4e:	f890 e004 	ldrb.w	lr, [r0, #4]
 8008e52:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8008e56:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8008e5a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
 8008e5e:	4563      	cmp	r3, ip
 8008e60:	bf98      	it	ls
 8008e62:	ea4f 0ece 	movls.w	lr, lr, lsl #3
 8008e66:	d906      	bls.n	8008e76 <pinctrl_lookup_state+0x2e>
 8008e68:	e00e      	b.n	8008e88 <pinctrl_lookup_state+0x40>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 8008e6a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 8008e6c:	f8d0 c000 	ldr.w	ip, [r0]
 8008e70:	44f4      	add	ip, lr
 8008e72:	4563      	cmp	r3, ip
 8008e74:	d808      	bhi.n	8008e88 <pinctrl_lookup_state+0x40>
		if (id == (*state)->id) {
 8008e76:	f893 c005 	ldrb.w	ip, [r3, #5]
 8008e7a:	458c      	cmp	ip, r1
		(*state)++;
 8008e7c:	f103 0308 	add.w	r3, r3, #8
		if (id == (*state)->id) {
 8008e80:	d1f3      	bne.n	8008e6a <pinctrl_lookup_state+0x22>
			return 0;
 8008e82:	2000      	movs	r0, #0
	}

	return -ENOENT;
}
 8008e84:	f85d fb04 	ldr.w	pc, [sp], #4
	return -ENOENT;
 8008e88:	f06f 0001 	mvn.w	r0, #1
}
 8008e8c:	f85d fb04 	ldr.w	pc, [sp], #4

08008e90 <pinctrl_configure_pins>:
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8008e90:	2900      	cmp	r1, #0
 8008e92:	d041      	beq.n	8008f18 <pinctrl_configure_pins+0x88>
 8008e94:	3901      	subs	r1, #1
{
 8008e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9a:	b2c9      	uxtb	r1, r1
 8008e9c:	f100 0708 	add.w	r7, r0, #8
	port_device = gpio_ports[STM32_PORT(pin)];
 8008ea0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008f1c <pinctrl_configure_pins+0x8c>
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	eb07 07c1 	add.w	r7, r7, r1, lsl #3
	uint32_t func = 0;
 8008eaa:	2600      	movs	r6, #0
 8008eac:	e020      	b.n	8008ef0 <pinctrl_configure_pins+0x60>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 8008eae:	686e      	ldr	r6, [r5, #4]
 8008eb0:	f046 0620 	orr.w	r6, r6, #32
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8008eb4:	f3c4 2243 	ubfx	r2, r4, #9, #4
 8008eb8:	2a0a      	cmp	r2, #10
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8008eba:	f3c4 1447 	ubfx	r4, r4, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8008ebe:	d828      	bhi.n	8008f12 <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8008ec0:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8008ec4:	f1b9 0f00 	cmp.w	r9, #0
 8008ec8:	d01f      	beq.n	8008f0a <pinctrl_configure_pins+0x7a>
 8008eca:	4648      	mov	r0, r9
 8008ecc:	f004 f8a6 	bl	800d01c <z_device_is_ready>
 8008ed0:	4684      	mov	ip, r0
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8008ed2:	3508      	adds	r5, #8
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8008ed4:	4653      	mov	r3, sl
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	f004 010f 	and.w	r1, r4, #15
 8008edc:	4648      	mov	r0, r9
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8008ede:	f1bc 0f00 	cmp.w	ip, #0
 8008ee2:	d012      	beq.n	8008f0a <pinctrl_configure_pins+0x7a>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8008ee4:	f7fb fc86 	bl	80047f4 <gpio_stm32_configure>
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
		if (ret < 0) {
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	db0c      	blt.n	8008f06 <pinctrl_configure_pins+0x76>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8008eec:	42af      	cmp	r7, r5
 8008eee:	d009      	beq.n	8008f04 <pinctrl_configure_pins+0x74>
		mux = pins[i].pinmux;
 8008ef0:	682c      	ldr	r4, [r5, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8008ef2:	06e3      	lsls	r3, r4, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8008ef4:	f004 0a1f 	and.w	sl, r4, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8008ef8:	d5d9      	bpl.n	8008eae <pinctrl_configure_pins+0x1e>
			func = STM32_MODER_ANALOG_MODE;
 8008efa:	f1ba 0f10 	cmp.w	sl, #16
 8008efe:	bf08      	it	eq
 8008f00:	2630      	moveq	r6, #48	; 0x30
 8008f02:	e7d7      	b.n	8008eb4 <pinctrl_configure_pins+0x24>
			return ret;
		}
	}

	return 0;
 8008f04:	2000      	movs	r0, #0
}
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENODEV;
 8008f0a:	f06f 0012 	mvn.w	r0, #18
}
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 8008f12:	f06f 0015 	mvn.w	r0, #21
 8008f16:	e7f6      	b.n	8008f06 <pinctrl_configure_pins+0x76>
	return 0;
 8008f18:	2000      	movs	r0, #0
}
 8008f1a:	4770      	bx	lr
 8008f1c:	08012384 	.word	0x08012384

08008f20 <LL_DMA_Init>:
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8008f20:	4b1d      	ldr	r3, [pc, #116]	; (8008f98 <LL_DMA_Init+0x78>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8008f22:	b530      	push	{r4, r5, lr}
 8008f24:	5c5c      	ldrb	r4, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8008f26:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
 8008f2a:	432b      	orrs	r3, r5
                        DMA_InitStruct->Mode                   | \
 8008f2c:	6915      	ldr	r5, [r2, #16]
 8008f2e:	432b      	orrs	r3, r5
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8008f30:	6955      	ldr	r5, [r2, #20]
 8008f32:	432b      	orrs	r3, r5
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8008f34:	6995      	ldr	r5, [r2, #24]
 8008f36:	432b      	orrs	r3, r5
 8008f38:	5825      	ldr	r5, [r4, r0]
 8008f3a:	f425 4eff 	bic.w	lr, r5, #32640	; 0x7f80
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8008f3e:	69d5      	ldr	r5, [r2, #28]
 8008f40:	432b      	orrs	r3, r5
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8008f42:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8008f44:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
 8008f48:	432b      	orrs	r3, r5
 8008f4a:	eb04 0c00 	add.w	ip, r4, r0
 8008f4e:	ea43 030e 	orr.w	r3, r3, lr
 8008f52:	5023      	str	r3, [r4, r0]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8008f54:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8008f56:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8008f5a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8008f5c:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8008f60:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008f64:	6a14      	ldr	r4, [r2, #32]
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	041b      	lsls	r3, r3, #16
 8008f6a:	4323      	orrs	r3, r4
 8008f6c:	f8cc 3004 	str.w	r3, [ip, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8008f70:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8008f74:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008f76:	0089      	lsls	r1, r1, #2
 8008f78:	220f      	movs	r2, #15
 8008f7a:	408a      	lsls	r2, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f7c:	fa92 f1a2 	rbit	r1, r2
  return __builtin_clz(value);
 8008f80:	fab1 f181 	clz	r1, r1
 8008f84:	ea24 0202 	bic.w	r2, r4, r2
 8008f88:	fa03 f101 	lsl.w	r1, r3, r1
 8008f8c:	4311      	orrs	r1, r2
 8008f8e:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 8008f92:	2000      	movs	r0, #0
 8008f94:	bd30      	pop	{r4, r5, pc}
 8008f96:	bf00      	nop
 8008f98:	080123c0 	.word	0x080123c0

08008f9c <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8008f9c:	2300      	movs	r3, #0
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 8008f9e:	e9c0 3300 	strd	r3, r3, [r0]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8008fa2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8008fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8008faa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  DMA_InitStruct->NbData                 = 0x00000000U;
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 8008fae:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8008fb2:	6283      	str	r3, [r0, #40]	; 0x28
}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop

08008fb8 <LL_TIM_StructInit>:
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8008fb8:	2300      	movs	r3, #0
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbe:	e9c0 3201 	strd	r3, r2, [r0, #4]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8008fc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8008fc6:	8003      	strh	r3, [r0, #0]
}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop

08008fcc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8008fcc:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fce:	4d1b      	ldr	r5, [pc, #108]	; (800903c <LL_TIM_Init+0x70>)

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8008fd0:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008fd2:	6803      	ldr	r3, [r0, #0]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8008fd4:	880a      	ldrh	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd6:	42a8      	cmp	r0, r5
 8008fd8:	d02a      	beq.n	8009030 <LL_TIM_Init+0x64>
 8008fda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fde:	d015      	beq.n	800900c <LL_TIM_Init+0x40>
 8008fe0:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8008fe4:	42a8      	cmp	r0, r5
 8008fe6:	d011      	beq.n	800900c <LL_TIM_Init+0x40>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fe8:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00
 8008fec:	42a8      	cmp	r0, r5
 8008fee:	d003      	beq.n	8008ff8 <LL_TIM_Init+0x2c>
 8008ff0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ff4:	42a8      	cmp	r0, r5
 8008ff6:	d111      	bne.n	800901c <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8008ff8:	68cd      	ldr	r5, [r1, #12]
 8008ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ffe:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8009000:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009002:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009004:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8009006:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009008:	6303      	str	r3, [r0, #48]	; 0x30
}
 800900a:	e00a      	b.n	8009022 <LL_TIM_Init+0x56>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800900c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800900e:	68c9      	ldr	r1, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800901a:	430b      	orrs	r3, r1
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800901c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800901e:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8009020:	6282      	str	r2, [r0, #40]	; 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009022:	6943      	ldr	r3, [r0, #20]
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800902a:	bc30      	pop	{r4, r5}
 800902c:	2000      	movs	r0, #0
 800902e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8009030:	684d      	ldr	r5, [r1, #4]
 8009032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009036:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8009038:	e7de      	b.n	8008ff8 <LL_TIM_Init+0x2c>
 800903a:	bf00      	nop
 800903c:	40012c00 	.word	0x40012c00

08009040 <LL_TIM_OC_StructInit>:
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8009040:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8009042:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8009046:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800904a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800904e:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 8009052:	4770      	bx	lr

08009054 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8009054:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8009058:	b430      	push	{r4, r5}
 800905a:	4603      	mov	r3, r0
  switch (Channel)
 800905c:	f000 80f1 	beq.w	8009242 <LL_TIM_OC_Init+0x1ee>
 8009060:	d830      	bhi.n	80090c4 <LL_TIM_OC_Init+0x70>
 8009062:	2910      	cmp	r1, #16
 8009064:	f000 811e 	beq.w	80092a4 <LL_TIM_OC_Init+0x250>
 8009068:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800906c:	d15a      	bne.n	8009124 <LL_TIM_OC_Init+0xd0>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800906e:	6a01      	ldr	r1, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009070:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009072:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009076:	6201      	str	r1, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009078:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800907a:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800907c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800907e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8009082:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009086:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800908a:	6814      	ldr	r4, [r2, #0]
 800908c:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8009090:	4304      	orrs	r4, r0

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009092:	6850      	ldr	r0, [r2, #4]
 8009094:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009098:	ea41 2100 	orr.w	r1, r1, r0, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909c:	48a1      	ldr	r0, [pc, #644]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 800909e:	4283      	cmp	r3, r0
 80090a0:	f000 8081 	beq.w	80091a6 <LL_TIM_OC_Init+0x152>
 80090a4:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
 80090a8:	4283      	cmp	r3, r0
 80090aa:	d07c      	beq.n	80091a6 <LL_TIM_OC_Init+0x152>
 80090ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80090b0:	4283      	cmp	r3, r0
 80090b2:	d078      	beq.n	80091a6 <LL_TIM_OC_Init+0x152>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80090b4:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80090b6:	605d      	str	r5, [r3, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80090b8:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80090ba:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80090be:	bc30      	pop	{r4, r5}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80090c0:	6219      	str	r1, [r3, #32]
}
 80090c2:	4770      	bx	lr
  switch (Channel)
 80090c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80090c8:	f000 808a 	beq.w	80091e0 <LL_TIM_OC_Init+0x18c>
 80090cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80090d0:	d152      	bne.n	8009178 <LL_TIM_OC_Init+0x124>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80090d2:	6a01      	ldr	r1, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80090d4:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80090d6:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80090da:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80090dc:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80090de:	6d40      	ldr	r0, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80090e0:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80090e4:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 80090e8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80090ec:	6914      	ldr	r4, [r2, #16]
 80090ee:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80090f2:	ea41 5104 	orr.w	r1, r1, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80090f6:	6854      	ldr	r4, [r2, #4]
 80090f8:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 80090fc:	ea41 5104 	orr.w	r1, r1, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009100:	4c88      	ldr	r4, [pc, #544]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 8009102:	42a3      	cmp	r3, r4
 8009104:	d064      	beq.n	80091d0 <LL_TIM_OC_Init+0x17c>
 8009106:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800910a:	42a3      	cmp	r3, r4
 800910c:	d060      	beq.n	80091d0 <LL_TIM_OC_Init+0x17c>
 800910e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009112:	42a3      	cmp	r3, r4
 8009114:	d05c      	beq.n	80091d0 <LL_TIM_OC_Init+0x17c>

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8009116:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009118:	6558      	str	r0, [r3, #84]	; 0x54
}
 800911a:	bc30      	pop	{r4, r5}
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800911c:	2000      	movs	r0, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 800911e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009120:	6219      	str	r1, [r3, #32]
}
 8009122:	4770      	bx	lr
  switch (Channel)
 8009124:	2901      	cmp	r1, #1
 8009126:	d127      	bne.n	8009178 <LL_TIM_OC_Init+0x124>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009128:	6a01      	ldr	r1, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800912a:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800912c:	f021 0101 	bic.w	r1, r1, #1
 8009130:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009132:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009134:	6840      	ldr	r0, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009136:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009138:	f021 0102 	bic.w	r1, r1, #2
 800913c:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800913e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8009142:	6815      	ldr	r5, [r2, #0]
 8009144:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8009148:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800914a:	6855      	ldr	r5, [r2, #4]
 800914c:	f021 0101 	bic.w	r1, r1, #1
 8009150:	4329      	orrs	r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009152:	4d74      	ldr	r5, [pc, #464]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 8009154:	42ab      	cmp	r3, r5
 8009156:	d012      	beq.n	800917e <LL_TIM_OC_Init+0x12a>
 8009158:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800915c:	42ab      	cmp	r3, r5
 800915e:	d00e      	beq.n	800917e <LL_TIM_OC_Init+0x12a>
 8009160:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009164:	42ab      	cmp	r3, r5
 8009166:	d00a      	beq.n	800917e <LL_TIM_OC_Init+0x12a>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009168:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800916a:	6058      	str	r0, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800916c:	619c      	str	r4, [r3, #24]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800916e:	2000      	movs	r0, #0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009170:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009172:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009174:	6219      	str	r1, [r3, #32]
}
 8009176:	4770      	bx	lr
  switch (Channel)
 8009178:	2001      	movs	r0, #1
}
 800917a:	bc30      	pop	{r4, r5}
 800917c:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800917e:	6955      	ldr	r5, [r2, #20]
 8009180:	f021 0108 	bic.w	r1, r1, #8
 8009184:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009188:	6995      	ldr	r5, [r2, #24]
 800918a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800918e:	4328      	orrs	r0, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009190:	6895      	ldr	r5, [r2, #8]
 8009192:	f021 0104 	bic.w	r1, r1, #4
 8009196:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800919a:	69d5      	ldr	r5, [r2, #28]
 800919c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80091a0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 80091a4:	e7e0      	b.n	8009168 <LL_TIM_OC_Init+0x114>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80091a6:	6950      	ldr	r0, [r2, #20]
 80091a8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80091ac:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80091b0:	6990      	ldr	r0, [r2, #24]
 80091b2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80091b6:	ea45 1500 	orr.w	r5, r5, r0, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80091ba:	6890      	ldr	r0, [r2, #8]
 80091bc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80091c0:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80091c4:	69d0      	ldr	r0, [r2, #28]
 80091c6:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 80091ca:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
 80091ce:	e771      	b.n	80090b4 <LL_TIM_OC_Init+0x60>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80091d0:	685c      	ldr	r4, [r3, #4]
 80091d2:	6995      	ldr	r5, [r2, #24]
 80091d4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80091d8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 80091dc:	605c      	str	r4, [r3, #4]
 80091de:	e79a      	b.n	8009116 <LL_TIM_OC_Init+0xc2>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80091e0:	6a01      	ldr	r1, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80091e2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80091e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80091e8:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80091ea:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80091ec:	6d40      	ldr	r0, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80091ee:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80091f2:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80091f6:	4320      	orrs	r0, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80091f8:	6914      	ldr	r4, [r2, #16]
 80091fa:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 80091fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8009202:	6854      	ldr	r4, [r2, #4]
 8009204:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009208:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800920c:	4c45      	ldr	r4, [pc, #276]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 800920e:	42a3      	cmp	r3, r4
 8009210:	d00f      	beq.n	8009232 <LL_TIM_OC_Init+0x1de>
 8009212:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009216:	42a3      	cmp	r3, r4
 8009218:	d00b      	beq.n	8009232 <LL_TIM_OC_Init+0x1de>
 800921a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800921e:	42a3      	cmp	r3, r4
 8009220:	d007      	beq.n	8009232 <LL_TIM_OC_Init+0x1de>
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009222:	6558      	str	r0, [r3, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8009224:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8009226:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009228:	659a      	str	r2, [r3, #88]	; 0x58
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800922a:	2000      	movs	r0, #0
}
 800922c:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800922e:	6219      	str	r1, [r3, #32]
}
 8009230:	4770      	bx	lr
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8009232:	685c      	ldr	r4, [r3, #4]
 8009234:	6995      	ldr	r5, [r2, #24]
 8009236:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800923a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800923e:	605c      	str	r4, [r3, #4]
 8009240:	e7ef      	b.n	8009222 <LL_TIM_OC_Init+0x1ce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009242:	6a01      	ldr	r1, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009244:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009246:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800924a:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800924c:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800924e:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009250:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009252:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009256:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800925a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800925e:	6814      	ldr	r4, [r2, #0]
 8009260:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 8009264:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009268:	6850      	ldr	r0, [r2, #4]
 800926a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800926e:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009272:	482c      	ldr	r0, [pc, #176]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 8009274:	4283      	cmp	r3, r0
 8009276:	d00f      	beq.n	8009298 <LL_TIM_OC_Init+0x244>
 8009278:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
 800927c:	4283      	cmp	r3, r0
 800927e:	d00b      	beq.n	8009298 <LL_TIM_OC_Init+0x244>
 8009280:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009284:	4283      	cmp	r3, r0
 8009286:	d007      	beq.n	8009298 <LL_TIM_OC_Init+0x244>
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009288:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800928a:	605d      	str	r5, [r3, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800928c:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800928e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009292:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009294:	6219      	str	r1, [r3, #32]
}
 8009296:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009298:	6990      	ldr	r0, [r2, #24]
 800929a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
 800929e:	ea45 1580 	orr.w	r5, r5, r0, lsl #6
 80092a2:	e7f1      	b.n	8009288 <LL_TIM_OC_Init+0x234>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80092a4:	6a01      	ldr	r1, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80092a6:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80092a8:	f021 0110 	bic.w	r1, r1, #16
 80092ac:	6201      	str	r1, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80092ae:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80092b0:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80092b2:	6980      	ldr	r0, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80092b4:	f021 0120 	bic.w	r1, r1, #32
 80092b8:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80092bc:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 80092c0:	6814      	ldr	r4, [r2, #0]
 80092c2:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 80092c6:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80092ca:	6850      	ldr	r0, [r2, #4]
 80092cc:	f021 0110 	bic.w	r1, r1, #16
 80092d0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d4:	4813      	ldr	r0, [pc, #76]	; (8009324 <LL_TIM_OC_Init+0x2d0>)
 80092d6:	4283      	cmp	r3, r0
 80092d8:	d00f      	beq.n	80092fa <LL_TIM_OC_Init+0x2a6>
 80092da:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
 80092de:	4283      	cmp	r3, r0
 80092e0:	d00b      	beq.n	80092fa <LL_TIM_OC_Init+0x2a6>
 80092e2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80092e6:	4283      	cmp	r3, r0
 80092e8:	d007      	beq.n	80092fa <LL_TIM_OC_Init+0x2a6>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80092ea:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80092ec:	605d      	str	r5, [r3, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80092ee:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80092f0:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80092f4:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80092f6:	6219      	str	r1, [r3, #32]
}
 80092f8:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80092fa:	6950      	ldr	r0, [r2, #20]
 80092fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009300:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009304:	6990      	ldr	r0, [r2, #24]
 8009306:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800930a:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800930e:	6890      	ldr	r0, [r2, #8]
 8009310:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009314:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009318:	69d0      	ldr	r0, [r2, #28]
 800931a:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800931e:	ea45 05c0 	orr.w	r5, r5, r0, lsl #3
 8009322:	e7e2      	b.n	80092ea <LL_TIM_OC_Init+0x296>
 8009324:	40012c00 	.word	0x40012c00

08009328 <LL_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8009328:	4b22      	ldr	r3, [pc, #136]	; (80093b4 <LL_SetFlashLatency.part.0+0x8c>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8009330:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
ErrorStatus LL_SetFlashLatency(uint32_t HCLKFrequency)
 8009334:	4603      	mov	r3, r0
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8009336:	d025      	beq.n	8009384 <LL_SetFlashLatency.part.0+0x5c>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8009338:	4a1f      	ldr	r2, [pc, #124]	; (80093b8 <LL_SetFlashLatency.part.0+0x90>)
 800933a:	4290      	cmp	r0, r2
 800933c:	d90e      	bls.n	800935c <LL_SetFlashLatency.part.0+0x34>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800933e:	2300      	movs	r3, #0
      {
        /* Unexpected HCLK > 26 */
        status = ERROR;
 8009340:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8009342:	491e      	ldr	r1, [pc, #120]	; (80093bc <LL_SetFlashLatency.part.0+0x94>)
 8009344:	680a      	ldr	r2, [r1, #0]
 8009346:	f022 0207 	bic.w	r2, r2, #7
 800934a:	431a      	orrs	r2, r3
 800934c:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800934e:	680a      	ldr	r2, [r1, #0]
 8009350:	f002 0207 	and.w	r2, r2, #7
    {
      status = ERROR;
    }
  }
  return status;
}
 8009354:	4293      	cmp	r3, r2
 8009356:	bf18      	it	ne
 8009358:	2001      	movne	r0, #1
 800935a:	4770      	bx	lr
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800935c:	f5a2 02f4 	sub.w	r2, r2, #7995392	; 0x7a0000
 8009360:	f5a2 5290 	sub.w	r2, r2, #4608	; 0x1200
 8009364:	4290      	cmp	r0, r2
 8009366:	d80a      	bhi.n	800937e <LL_SetFlashLatency.part.0+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8009368:	4a15      	ldr	r2, [pc, #84]	; (80093c0 <LL_SetFlashLatency.part.0+0x98>)
 800936a:	4290      	cmp	r0, r2
 800936c:	d813      	bhi.n	8009396 <LL_SetFlashLatency.part.0+0x6e>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800936e:	4a15      	ldr	r2, [pc, #84]	; (80093c4 <LL_SetFlashLatency.part.0+0x9c>)
 8009370:	4293      	cmp	r3, r2
  ErrorStatus status = SUCCESS;
 8009372:	f04f 0000 	mov.w	r0, #0
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8009376:	bf94      	ite	ls
 8009378:	2300      	movls	r3, #0
 800937a:	2301      	movhi	r3, #1
 800937c:	e7e1      	b.n	8009342 <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_3;
 800937e:	2303      	movs	r3, #3
  ErrorStatus status = SUCCESS;
 8009380:	2000      	movs	r0, #0
 8009382:	e7de      	b.n	8009342 <LL_SetFlashLatency.part.0+0x1a>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8009384:	4a10      	ldr	r2, [pc, #64]	; (80093c8 <LL_SetFlashLatency.part.0+0xa0>)
 8009386:	4290      	cmp	r0, r2
 8009388:	d808      	bhi.n	800939c <LL_SetFlashLatency.part.0+0x74>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <LL_SetFlashLatency.part.0+0xa4>)
 800938c:	4290      	cmp	r0, r2
 800938e:	d8f6      	bhi.n	800937e <LL_SetFlashLatency.part.0+0x56>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <LL_SetFlashLatency.part.0+0xa8>)
 8009392:	4290      	cmp	r0, r2
 8009394:	d905      	bls.n	80093a2 <LL_SetFlashLatency.part.0+0x7a>
        latency = LL_FLASH_LATENCY_2;
 8009396:	2302      	movs	r3, #2
  ErrorStatus status = SUCCESS;
 8009398:	2000      	movs	r0, #0
 800939a:	e7d2      	b.n	8009342 <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 800939c:	2304      	movs	r3, #4
  ErrorStatus status = SUCCESS;
 800939e:	2000      	movs	r0, #0
 80093a0:	e7cf      	b.n	8009342 <LL_SetFlashLatency.part.0+0x1a>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80093a2:	4a0c      	ldr	r2, [pc, #48]	; (80093d4 <LL_SetFlashLatency.part.0+0xac>)
 80093a4:	4293      	cmp	r3, r2
  ErrorStatus status = SUCCESS;
 80093a6:	f04f 0000 	mov.w	r0, #0
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80093aa:	bf94      	ite	ls
 80093ac:	2300      	movls	r3, #0
 80093ae:	2301      	movhi	r3, #1
 80093b0:	e7c7      	b.n	8009342 <LL_SetFlashLatency.part.0+0x1a>
 80093b2:	bf00      	nop
 80093b4:	40007000 	.word	0x40007000
 80093b8:	018cba80 	.word	0x018cba80
 80093bc:	40022000 	.word	0x40022000
 80093c0:	00b71b00 	.word	0x00b71b00
 80093c4:	005b8d80 	.word	0x005b8d80
 80093c8:	03d09000 	.word	0x03d09000
 80093cc:	02dc6c00 	.word	0x02dc6c00
 80093d0:	01e84800 	.word	0x01e84800
 80093d4:	00f42400 	.word	0x00f42400

080093d8 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80093da:	680f      	ldr	r7, [r1, #0]
 80093dc:	4a28      	ldr	r2, [pc, #160]	; (8009480 <UTILS_EnablePLLAndSwitchSystem+0xa8>)

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80093de:	4e29      	ldr	r6, [pc, #164]	; (8009484 <UTILS_EnablePLLAndSwitchSystem+0xac>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80093e0:	f3c7 1303 	ubfx	r3, r7, #4, #4
{
 80093e4:	460d      	mov	r5, r1
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80093e6:	5cd3      	ldrb	r3, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 80093e8:	6831      	ldr	r1, [r6, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80093ea:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80093ee:	42a1      	cmp	r1, r4
 80093f0:	d20c      	bcs.n	800940c <UTILS_EnablePLLAndSwitchSystem+0x34>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 80093f2:	4b25      	ldr	r3, [pc, #148]	; (8009488 <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 80093f4:	1e62      	subs	r2, r4, #1
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d901      	bls.n	80093fe <UTILS_EnablePLLAndSwitchSystem+0x26>
    status = ERROR;
 80093fa:	2001      	movs	r0, #1
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fe:	4620      	mov	r0, r4
 8009400:	f7ff ff92 	bl	8009328 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8009404:	2800      	cmp	r0, #0
 8009406:	d136      	bne.n	8009476 <UTILS_EnablePLLAndSwitchSystem+0x9e>
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8009408:	682f      	ldr	r7, [r5, #0]
  if(SystemCoreClock > hclk_frequency)
 800940a:	6831      	ldr	r1, [r6, #0]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800940c:	4b1f      	ldr	r3, [pc, #124]	; (800948c <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009414:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800941c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	0192      	lsls	r2, r2, #6
 8009422:	d5fc      	bpl.n	800941e <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009424:	689a      	ldr	r2, [r3, #8]
 8009426:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800942a:	433a      	orrs	r2, r7
 800942c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	f042 0203 	orr.w	r2, r2, #3
 8009434:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009436:	4a15      	ldr	r2, [pc, #84]	; (800948c <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 8009438:	6893      	ldr	r3, [r2, #8]
 800943a:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800943e:	2b0c      	cmp	r3, #12
 8009440:	d1fa      	bne.n	8009438 <UTILS_EnablePLLAndSwitchSystem+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009442:	6893      	ldr	r3, [r2, #8]
 8009444:	6868      	ldr	r0, [r5, #4]
 8009446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800944a:	4303      	orrs	r3, r0
 800944c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800944e:	6893      	ldr	r3, [r2, #8]
 8009450:	68a8      	ldr	r0, [r5, #8]
 8009452:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8009456:	4303      	orrs	r3, r0
  if(SystemCoreClock > hclk_frequency)
 8009458:	428c      	cmp	r4, r1
 800945a:	6093      	str	r3, [r2, #8]
 800945c:	d208      	bcs.n	8009470 <UTILS_EnablePLLAndSwitchSystem+0x98>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800945e:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 8009460:	1e62      	subs	r2, r4, #1
 8009462:	429a      	cmp	r2, r3
 8009464:	d8c9      	bhi.n	80093fa <UTILS_EnablePLLAndSwitchSystem+0x22>
 8009466:	4620      	mov	r0, r4
 8009468:	f7ff ff5e 	bl	8009328 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 800946c:	2800      	cmp	r0, #0
 800946e:	d1c5      	bne.n	80093fc <UTILS_EnablePLLAndSwitchSystem+0x24>
  SystemCoreClock = HCLKFrequency;
 8009470:	6034      	str	r4, [r6, #0]
}
 8009472:	2000      	movs	r0, #0
}
 8009474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(SystemCoreClock > hclk_frequency)
 8009476:	6833      	ldr	r3, [r6, #0]
 8009478:	42a3      	cmp	r3, r4
 800947a:	d9bf      	bls.n	80093fc <UTILS_EnablePLLAndSwitchSystem+0x24>
 800947c:	e7f3      	b.n	8009466 <UTILS_EnablePLLAndSwitchSystem+0x8e>
 800947e:	bf00      	nop
 8009480:	080123b0 	.word	0x080123b0
 8009484:	200002f0 	.word	0x200002f0
 8009488:	04c4b3ff 	.word	0x04c4b3ff
 800948c:	40021000 	.word	0x40021000

08009490 <LL_PLL_ConfigSystemClock_HSI>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8009490:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	0192      	lsls	r2, r2, #6
 8009496:	d502      	bpl.n	800949e <LL_PLL_ConfigSystemClock_HSI+0xe>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8009498:	681b      	ldr	r3, [r3, #0]
}
 800949a:	2001      	movs	r0, #1
 800949c:	4770      	bx	lr
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	0112      	lsls	r2, r2, #4
 80094a2:	d4fa      	bmi.n	800949a <LL_PLL_ConfigSystemClock_HSI+0xa>
{
 80094a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80094a6:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80094aa:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80094ac:	f8d3 e000 	ldr.w	lr, [r3]
 80094b0:	4f15      	ldr	r7, [pc, #84]	; (8009508 <LL_PLL_ConfigSystemClock_HSI+0x78>)
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80094b2:	0e60      	lsrs	r0, r4, #25
 80094b4:	3001      	adds	r0, #1
 80094b6:	0042      	lsls	r2, r0, #1
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80094b8:	ea4f 1c15 	mov.w	ip, r5, lsr #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80094bc:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 80094c0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80094c4:	f10c 0c01 	add.w	ip, ip, #1
 80094c8:	fbb7 fcfc 	udiv	ip, r7, ip
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80094cc:	fb0c f000 	mul.w	r0, ip, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80094d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80094d4:	d106      	bne.n	80094e4 <LL_PLL_ConfigSystemClock_HSI+0x54>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094dc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	0552      	lsls	r2, r2, #21
 80094e2:	d5fc      	bpl.n	80094de <LL_PLL_ConfigSystemClock_HSI+0x4e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80094e4:	4a07      	ldr	r2, [pc, #28]	; (8009504 <LL_PLL_ConfigSystemClock_HSI+0x74>)
 80094e6:	4b09      	ldr	r3, [pc, #36]	; (800950c <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 80094e8:	68d7      	ldr	r7, [r2, #12]
 80094ea:	403b      	ands	r3, r7
 80094ec:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80094f0:	432b      	orrs	r3, r5
 80094f2:	4323      	orrs	r3, r4
 80094f4:	f043 0302 	orr.w	r3, r3, #2
}
 80094f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80094fc:	60d3      	str	r3, [r2, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80094fe:	f7ff bf6b 	b.w	80093d8 <UTILS_EnablePLLAndSwitchSystem>
 8009502:	bf00      	nop
 8009504:	40021000 	.word	0x40021000
 8009508:	00f42400 	.word	0x00f42400
 800950c:	f9ff808c 	.word	0xf9ff808c

08009510 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8009510:	b500      	push	{lr}
 8009512:	b083      	sub	sp, #12
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
    buffer[1] = regval >> 8 ;
 8009514:	0a03      	lsrs	r3, r0, #8
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009516:	2184      	movs	r1, #132	; 0x84
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009518:	f04f 0eee 	mov.w	lr, #238	; 0xee
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800951c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    buffer[0] = regval & 0xFF;
 8009520:	f88d 0000 	strb.w	r0, [sp]
    buffer[1] = regval >> 8 ;
 8009524:	f88d 3001 	strb.w	r3, [sp, #1]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009528:	f88d 1005 	strb.w	r1, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800952c:	466b      	mov	r3, sp
 800952e:	2202      	movs	r2, #2
 8009530:	a901      	add	r1, sp, #4
 8009532:	2003      	movs	r0, #3
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009534:	f88d e004 	strb.w	lr, [sp, #4]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009538:	f88d c006 	strb.w	ip, [sp, #6]
    writetospi(cnt,header,length,buffer);
 800953c:	f001 f994 	bl	800a868 <writetospi>
}
 8009540:	b003      	add	sp, #12
 8009542:	f85d fb04 	ldr.w	pc, [sp], #4
 8009546:	bf00      	nop

08009548 <dwt_settxantennadelay>:
{
 8009548:	b500      	push	{lr}
 800954a:	b083      	sub	sp, #12
    buffer[1] = regval >> 8 ;
 800954c:	0a01      	lsrs	r1, r0, #8
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800954e:	f04f 0c98 	mov.w	ip, #152	; 0x98
    buffer[0] = regval & 0xFF;
 8009552:	f88d 0000 	strb.w	r0, [sp]
    buffer[1] = regval >> 8 ;
 8009556:	f88d 1001 	strb.w	r1, [sp, #1]
    writetospi(cnt,header,length,buffer);
 800955a:	466b      	mov	r3, sp
 800955c:	2202      	movs	r2, #2
 800955e:	a901      	add	r1, sp, #4
 8009560:	2001      	movs	r0, #1
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009562:	f88d c004 	strb.w	ip, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009566:	f001 f97f 	bl	800a868 <writetospi>
}
 800956a:	b003      	add	sp, #12
 800956c:	f85d fb04 	ldr.w	pc, [sp], #4

08009570 <dwt_writetxdata>:
{
 8009570:	b510      	push	{r4, lr}
 8009572:	4614      	mov	r4, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 8009574:	4402      	add	r2, r0
 8009576:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 800957a:	b082      	sub	sp, #8
    if ((txBufferOffset + txFrameLength) <= 1024)
 800957c:	dc1f      	bgt.n	80095be <dwt_writetxdata+0x4e>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800957e:	460b      	mov	r3, r1
 8009580:	1e82      	subs	r2, r0, #2
    if (index == 0) // For index of 0, no sub-index is required
 8009582:	b174      	cbz	r4, 80095a2 <dwt_writetxdata+0x32>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009584:	21c9      	movs	r1, #201	; 0xc9
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009586:	2c7f      	cmp	r4, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009588:	f88d 1004 	strb.w	r1, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800958c:	b2e1      	uxtb	r1, r4
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800958e:	d80d      	bhi.n	80095ac <dwt_writetxdata+0x3c>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009590:	f88d 1005 	strb.w	r1, [sp, #5]
 8009594:	2002      	movs	r0, #2
    writetospi(cnt,header,length,buffer);
 8009596:	a901      	add	r1, sp, #4
 8009598:	f001 f966 	bl	800a868 <writetospi>
        return DWT_SUCCESS;
 800959c:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 800959e:	b002      	add	sp, #8
 80095a0:	bd10      	pop	{r4, pc}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80095a2:	2189      	movs	r1, #137	; 0x89
 80095a4:	f88d 1004 	strb.w	r1, [sp, #4]
 80095a8:	2001      	movs	r0, #1
 80095aa:	e7f4      	b.n	8009596 <dwt_writetxdata+0x26>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80095ac:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80095b0:	09e4      	lsrs	r4, r4, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80095b2:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80095b6:	f88d 4006 	strb.w	r4, [sp, #6]
 80095ba:	2003      	movs	r0, #3
 80095bc:	e7eb      	b.n	8009596 <dwt_writetxdata+0x26>
        return DWT_ERROR;
 80095be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c2:	e7ec      	b.n	800959e <dwt_writetxdata+0x2e>

080095c4 <dwt_writetxfctrl>:
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80095c4:	4b11      	ldr	r3, [pc, #68]	; (800960c <dwt_writetxfctrl+0x48>)
 80095c6:	681b      	ldr	r3, [r3, #0]
{
 80095c8:	b500      	push	{lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 80095d0:	4303      	orrs	r3, r0
{
 80095d2:	b083      	sub	sp, #12
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80095d4:	ea43 5181 	orr.w	r1, r3, r1, lsl #22
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
    {
        buffer[j] = regval & 0xff ;
        regval >>= 8 ;
 80095d8:	0a0b      	lsrs	r3, r1, #8
 80095da:	0e08      	lsrs	r0, r1, #24
 80095dc:	ea4f 4e11 	mov.w	lr, r1, lsr #16
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80095e0:	f04f 0c88 	mov.w	ip, #136	; 0x88
        buffer[j] = regval & 0xff ;
 80095e4:	f88d 1004 	strb.w	r1, [sp, #4]
 80095e8:	f88d 3005 	strb.w	r3, [sp, #5]
 80095ec:	f88d 0007 	strb.w	r0, [sp, #7]
    writetospi(cnt,header,length,buffer);
 80095f0:	ab01      	add	r3, sp, #4
 80095f2:	2204      	movs	r2, #4
 80095f4:	4669      	mov	r1, sp
 80095f6:	2001      	movs	r0, #1
        buffer[j] = regval & 0xff ;
 80095f8:	f88d e006 	strb.w	lr, [sp, #6]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80095fc:	f88d c000 	strb.w	ip, [sp]
    writetospi(cnt,header,length,buffer);
 8009600:	f001 f932 	bl	800a868 <writetospi>
} // end dwt_writetxfctrl()
 8009604:	b003      	add	sp, #12
 8009606:	f85d fb04 	ldr.w	pc, [sp], #4
 800960a:	bf00      	nop
 800960c:	200002f4 	.word	0x200002f4

08009610 <dwt_readrxdata>:
{
 8009610:	b500      	push	{lr}
 8009612:	4694      	mov	ip, r2
 8009614:	b083      	sub	sp, #12
 8009616:	4603      	mov	r3, r0
 8009618:	460a      	mov	r2, r1
    if (index == 0) // For index of 0, no sub-index is required
 800961a:	f1bc 0f00 	cmp.w	ip, #0
 800961e:	d109      	bne.n	8009634 <dwt_readrxdata+0x24>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009620:	2111      	movs	r1, #17
 8009622:	f88d 1004 	strb.w	r1, [sp, #4]
 8009626:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009628:	a901      	add	r1, sp, #4
 800962a:	f001 f937 	bl	800a89c <readfromspi>
}
 800962e:	b003      	add	sp, #12
 8009630:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009634:	2151      	movs	r1, #81	; 0x51
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009636:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800963a:	f88d 1004 	strb.w	r1, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800963e:	fa5f f18c 	uxtb.w	r1, ip
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009642:	d808      	bhi.n	8009656 <dwt_readrxdata+0x46>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009644:	f88d 1005 	strb.w	r1, [sp, #5]
 8009648:	2002      	movs	r0, #2
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800964a:	a901      	add	r1, sp, #4
 800964c:	f001 f926 	bl	800a89c <readfromspi>
}
 8009650:	b003      	add	sp, #12
 8009652:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009656:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800965a:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800965e:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009662:	2003      	movs	r0, #3
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009664:	a901      	add	r1, sp, #4
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009666:	f88d c006 	strb.w	ip, [sp, #6]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800966a:	f001 f917 	bl	800a89c <readfromspi>
}
 800966e:	b003      	add	sp, #12
 8009670:	f85d fb04 	ldr.w	pc, [sp], #4

08009674 <dwt_readtxtimestamp>:
{
 8009674:	b500      	push	{lr}
 8009676:	b083      	sub	sp, #12
 8009678:	4603      	mov	r3, r0
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800967a:	f04f 0c17 	mov.w	ip, #23
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800967e:	2205      	movs	r2, #5
 8009680:	a901      	add	r1, sp, #4
 8009682:	2001      	movs	r0, #1
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009684:	f88d c004 	strb.w	ip, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009688:	f001 f908 	bl	800a89c <readfromspi>
}
 800968c:	b003      	add	sp, #12
 800968e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009692:	bf00      	nop

08009694 <dwt_readrxtimestamp>:
{
 8009694:	b500      	push	{lr}
 8009696:	b083      	sub	sp, #12
 8009698:	4603      	mov	r3, r0
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800969a:	f04f 0c15 	mov.w	ip, #21
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800969e:	2205      	movs	r2, #5
 80096a0:	a901      	add	r1, sp, #4
 80096a2:	2001      	movs	r0, #1
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80096a4:	f88d c004 	strb.w	ip, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80096a8:	f001 f8f8 	bl	800a89c <readfromspi>
}
 80096ac:	b003      	add	sp, #12
 80096ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80096b2:	bf00      	nop

080096b4 <dwt_writetodevice>:
{
 80096b4:	b500      	push	{lr}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80096b6:	b2c0      	uxtb	r0, r0
{
 80096b8:	b083      	sub	sp, #12
    if (index == 0) // For index of 0, no sub-index is required
 80096ba:	b951      	cbnz	r1, 80096d2 <dwt_writetodevice+0x1e>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80096bc:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80096c0:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 80096c4:	a901      	add	r1, sp, #4
 80096c6:	2001      	movs	r0, #1
 80096c8:	f001 f8ce 	bl	800a868 <writetospi>
} // end dwt_writetodevice()
 80096cc:	b003      	add	sp, #12
 80096ce:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80096d2:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80096d6:	297f      	cmp	r1, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80096d8:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80096dc:	b2c8      	uxtb	r0, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80096de:	d808      	bhi.n	80096f2 <dwt_writetodevice+0x3e>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80096e0:	f88d 0005 	strb.w	r0, [sp, #5]
    writetospi(cnt,header,length,buffer);
 80096e4:	a901      	add	r1, sp, #4
 80096e6:	2002      	movs	r0, #2
 80096e8:	f001 f8be 	bl	800a868 <writetospi>
} // end dwt_writetodevice()
 80096ec:	b003      	add	sp, #12
 80096ee:	f85d fb04 	ldr.w	pc, [sp], #4
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80096f2:	f060 007f 	orn	r0, r0, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80096f6:	09c9      	lsrs	r1, r1, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80096f8:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80096fc:	f88d 1006 	strb.w	r1, [sp, #6]
 8009700:	2003      	movs	r0, #3
    writetospi(cnt,header,length,buffer);
 8009702:	a901      	add	r1, sp, #4
 8009704:	f001 f8b0 	bl	800a868 <writetospi>
} // end dwt_writetodevice()
 8009708:	b003      	add	sp, #12
 800970a:	f85d fb04 	ldr.w	pc, [sp], #4
 800970e:	bf00      	nop

08009710 <dwt_read32bitoffsetreg>:
{
 8009710:	b510      	push	{r4, lr}
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8009712:	b28b      	uxth	r3, r1
{
 8009714:	b082      	sub	sp, #8
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009716:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
 8009718:	b9ab      	cbnz	r3, 8009746 <dwt_read32bitoffsetreg+0x36>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800971a:	f88d 0000 	strb.w	r0, [sp]
 800971e:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009720:	ac01      	add	r4, sp, #4
 8009722:	2204      	movs	r2, #4
 8009724:	4623      	mov	r3, r4
 8009726:	4669      	mov	r1, sp
 8009728:	f001 f8b8 	bl	800a89c <readfromspi>
    for (j = 3 ; j >= 0 ; j --)
 800972c:	f10d 0207 	add.w	r2, sp, #7
    uint32  regval = 0 ;
 8009730:	2000      	movs	r0, #0
        regval = (regval << 8) + buffer[j] ;
 8009732:	f892 c000 	ldrb.w	ip, [r2]
    for (j = 3 ; j >= 0 ; j --)
 8009736:	42a2      	cmp	r2, r4
        regval = (regval << 8) + buffer[j] ;
 8009738:	eb0c 2000 	add.w	r0, ip, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 800973c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009740:	d1f7      	bne.n	8009732 <dwt_read32bitoffsetreg+0x22>
} // end dwt_read32bitoffsetreg()
 8009742:	b002      	add	sp, #8
 8009744:	bd10      	pop	{r4, pc}
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009746:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800974a:	2b7f      	cmp	r3, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800974c:	f88d 0000 	strb.w	r0, [sp]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009750:	b2c9      	uxtb	r1, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009752:	d803      	bhi.n	800975c <dwt_read32bitoffsetreg+0x4c>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009754:	f88d 1001 	strb.w	r1, [sp, #1]
 8009758:	2002      	movs	r0, #2
 800975a:	e7e1      	b.n	8009720 <dwt_read32bitoffsetreg+0x10>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800975c:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009760:	09db      	lsrs	r3, r3, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009762:	f88d 1001 	strb.w	r1, [sp, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009766:	f88d 3002 	strb.w	r3, [sp, #2]
 800976a:	2003      	movs	r0, #3
 800976c:	e7d8      	b.n	8009720 <dwt_read32bitoffsetreg+0x10>
 800976e:	bf00      	nop

08009770 <dwt_read16bitoffsetreg>:
{
 8009770:	b500      	push	{lr}
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8009772:	b28b      	uxth	r3, r1
{
 8009774:	b083      	sub	sp, #12
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009776:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
 8009778:	b98b      	cbnz	r3, 800979e <dwt_read16bitoffsetreg+0x2e>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800977a:	f88d 0004 	strb.w	r0, [sp, #4]
 800977e:	2001      	movs	r0, #1
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009780:	466b      	mov	r3, sp
 8009782:	2202      	movs	r2, #2
 8009784:	a901      	add	r1, sp, #4
 8009786:	f001 f889 	bl	800a89c <readfromspi>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800978a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800978e:	f89d 0000 	ldrb.w	r0, [sp]
 8009792:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 8009796:	b280      	uxth	r0, r0
 8009798:	b003      	add	sp, #12
 800979a:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800979e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80097a2:	2b7f      	cmp	r3, #127	; 0x7f
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80097a4:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80097a8:	b2c9      	uxtb	r1, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80097aa:	d803      	bhi.n	80097b4 <dwt_read16bitoffsetreg+0x44>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80097ac:	f88d 1005 	strb.w	r1, [sp, #5]
 80097b0:	2002      	movs	r0, #2
 80097b2:	e7e5      	b.n	8009780 <dwt_read16bitoffsetreg+0x10>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80097b4:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80097b8:	09db      	lsrs	r3, r3, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80097ba:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80097be:	f88d 3006 	strb.w	r3, [sp, #6]
 80097c2:	2003      	movs	r0, #3
 80097c4:	e7dc      	b.n	8009780 <dwt_read16bitoffsetreg+0x10>
 80097c6:	bf00      	nop

080097c8 <dwt_write16bitoffsetreg>:
{
 80097c8:	b500      	push	{lr}
 80097ca:	b083      	sub	sp, #12
    buffer[1] = regval >> 8 ;
 80097cc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80097d0:	b28b      	uxth	r3, r1
    buffer[0] = regval & 0xFF;
 80097d2:	f88d 2000 	strb.w	r2, [sp]
    buffer[1] = regval >> 8 ;
 80097d6:	f88d c001 	strb.w	ip, [sp, #1]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80097da:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
 80097dc:	b963      	cbnz	r3, 80097f8 <dwt_write16bitoffsetreg+0x30>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80097de:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80097e2:	f88d 0004 	strb.w	r0, [sp, #4]
 80097e6:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
 80097e8:	466b      	mov	r3, sp
 80097ea:	2202      	movs	r2, #2
 80097ec:	a901      	add	r1, sp, #4
 80097ee:	f001 f83b 	bl	800a868 <writetospi>
} // end dwt_write16bitoffsetreg()
 80097f2:	b003      	add	sp, #12
 80097f4:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80097f8:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80097fc:	2b7f      	cmp	r3, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80097fe:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009802:	b2c9      	uxtb	r1, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009804:	d803      	bhi.n	800980e <dwt_write16bitoffsetreg+0x46>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009806:	f88d 1005 	strb.w	r1, [sp, #5]
 800980a:	2002      	movs	r0, #2
 800980c:	e7ec      	b.n	80097e8 <dwt_write16bitoffsetreg+0x20>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800980e:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009812:	09db      	lsrs	r3, r3, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009814:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009818:	f88d 3006 	strb.w	r3, [sp, #6]
 800981c:	2003      	movs	r0, #3
 800981e:	e7e3      	b.n	80097e8 <dwt_write16bitoffsetreg+0x20>

08009820 <dwt_write32bitoffsetreg>:
{
 8009820:	b500      	push	{lr}
 8009822:	b083      	sub	sp, #12
        regval >>= 8 ;
 8009824:	0c13      	lsrs	r3, r2, #16
 8009826:	ea4f 2c12 	mov.w	ip, r2, lsr #8
        buffer[j] = regval & 0xff ;
 800982a:	f88d 2004 	strb.w	r2, [sp, #4]
 800982e:	f88d 3006 	strb.w	r3, [sp, #6]
        regval >>= 8 ;
 8009832:	0e12      	lsrs	r2, r2, #24
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8009834:	b28b      	uxth	r3, r1
        buffer[j] = regval & 0xff ;
 8009836:	f88d c005 	strb.w	ip, [sp, #5]
 800983a:	f88d 2007 	strb.w	r2, [sp, #7]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800983e:	b2c0      	uxtb	r0, r0
    if (index == 0) // For index of 0, no sub-index is required
 8009840:	b963      	cbnz	r3, 800985c <dwt_write32bitoffsetreg+0x3c>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009842:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8009846:	f88d 0000 	strb.w	r0, [sp]
 800984a:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
 800984c:	ab01      	add	r3, sp, #4
 800984e:	2204      	movs	r2, #4
 8009850:	4669      	mov	r1, sp
 8009852:	f001 f809 	bl	800a868 <writetospi>
} // end dwt_write32bitoffsetreg()
 8009856:	b003      	add	sp, #12
 8009858:	f85d fb04 	ldr.w	pc, [sp], #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800985c:	f060 003f 	orn	r0, r0, #63	; 0x3f
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009860:	2b7f      	cmp	r3, #127	; 0x7f
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009862:	f88d 0000 	strb.w	r0, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009866:	b2c9      	uxtb	r1, r1
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8009868:	d803      	bhi.n	8009872 <dwt_write32bitoffsetreg+0x52>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800986a:	f88d 1001 	strb.w	r1, [sp, #1]
 800986e:	2002      	movs	r0, #2
 8009870:	e7ec      	b.n	800984c <dwt_write32bitoffsetreg+0x2c>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009872:	f061 017f 	orn	r1, r1, #127	; 0x7f
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8009876:	09db      	lsrs	r3, r3, #7
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009878:	f88d 1001 	strb.w	r1, [sp, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800987c:	f88d 3002 	strb.w	r3, [sp, #2]
 8009880:	2003      	movs	r0, #3
 8009882:	e7e3      	b.n	800984c <dwt_write32bitoffsetreg+0x2c>

08009884 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8009884:	b530      	push	{r4, r5, lr}
 8009886:	b083      	sub	sp, #12
    writetospi(cnt,header,length,buffer);
 8009888:	2202      	movs	r2, #2
    buffer[1] = regval >> 8 ;
 800988a:	0a03      	lsrs	r3, r0, #8
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800988c:	24ed      	movs	r4, #237	; 0xed
    buffer[1] = regval >> 8 ;
 800988e:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[0] = regval & 0xFF;
 8009892:	f88d 0000 	strb.w	r0, [sp]
    writetospi(cnt,header,length,buffer);
 8009896:	466b      	mov	r3, sp
 8009898:	a901      	add	r1, sp, #4
 800989a:	4610      	mov	r0, r2
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800989c:	2504      	movs	r5, #4
 800989e:	f88d 5005 	strb.w	r5, [sp, #5]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80098a2:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 80098a6:	f000 ffdf 	bl	800a868 <writetospi>

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80098aa:	2203      	movs	r2, #3
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80098ac:	2506      	movs	r5, #6
    writetospi(cnt,header,length,buffer);
 80098ae:	466b      	mov	r3, sp
 80098b0:	f88d 2000 	strb.w	r2, [sp]
 80098b4:	a901      	add	r1, sp, #4
 80098b6:	2201      	movs	r2, #1
 80098b8:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80098ba:	f88d 4004 	strb.w	r4, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80098be:	f88d 5005 	strb.w	r5, [sp, #5]
    writetospi(cnt,header,length,buffer);
 80098c2:	f000 ffd1 	bl	800a868 <writetospi>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80098c6:	2200      	movs	r2, #0
    writetospi(cnt,header,length,buffer);
 80098c8:	a901      	add	r1, sp, #4
 80098ca:	f88d 2000 	strb.w	r2, [sp]
 80098ce:	466b      	mov	r3, sp
 80098d0:	2201      	movs	r2, #1
 80098d2:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80098d4:	f88d 4004 	strb.w	r4, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80098d8:	f88d 5005 	strb.w	r5, [sp, #5]
    writetospi(cnt,header,length,buffer);
 80098dc:	f000 ffc4 	bl	800a868 <writetospi>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80098e0:	210a      	movs	r1, #10
 80098e2:	202d      	movs	r0, #45	; 0x2d

    // Return the 32bit of read data
    return ret_data;
}
 80098e4:	b003      	add	sp, #12
 80098e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80098ea:	f7ff bf11 	b.w	8009710 <dwt_read32bitoffsetreg>
 80098ee:	bf00      	nop

080098f0 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	236d      	movs	r3, #109	; 0x6d
 80098f6:	f88d 3000 	strb.w	r3, [sp]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80098fa:	2310      	movs	r3, #16
 80098fc:	f88d 3006 	strb.w	r3, [sp, #6]
    writetospi(cnt,header,length,buffer);
 8009900:	2201      	movs	r2, #1
 8009902:	466b      	mov	r3, sp
 8009904:	a901      	add	r1, sp, #4
{
 8009906:	4604      	mov	r4, r0
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009908:	26ee      	movs	r6, #238	; 0xee
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800990a:	2586      	movs	r5, #134	; 0x86
    writetospi(cnt,header,length,buffer);
 800990c:	2003      	movs	r0, #3
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800990e:	f88d 6004 	strb.w	r6, [sp, #4]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009912:	f88d 5005 	strb.w	r5, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009916:	f000 ffa7 	bl	800a868 <writetospi>
    buffer[0] = regval & 0xFF;
 800991a:	2207      	movs	r2, #7
    writetospi(cnt,header,length,buffer);
 800991c:	466b      	mov	r3, sp
 800991e:	a901      	add	r1, sp, #4
    buffer[0] = regval & 0xFF;
 8009920:	f88d 2000 	strb.w	r2, [sp]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register

    if(prfIndex)
 8009924:	b17c      	cbz	r4, 8009946 <_dwt_configlde+0x56>
    buffer[1] = regval >> 8 ;
 8009926:	2206      	movs	r2, #6
 8009928:	f88d 2001 	strb.w	r2, [sp, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800992c:	2430      	movs	r4, #48	; 0x30
    writetospi(cnt,header,length,buffer);
 800992e:	2202      	movs	r2, #2
 8009930:	2003      	movs	r0, #3
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009932:	f88d 6004 	strb.w	r6, [sp, #4]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8009936:	f88d 5005 	strb.w	r5, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800993a:	f88d 4006 	strb.w	r4, [sp, #6]
    writetospi(cnt,header,length,buffer);
 800993e:	f000 ff93 	bl	800a868 <writetospi>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8009942:	b002      	add	sp, #8
 8009944:	bd70      	pop	{r4, r5, r6, pc}
    buffer[1] = regval >> 8 ;
 8009946:	2216      	movs	r2, #22
 8009948:	e7ee      	b.n	8009928 <_dwt_configlde+0x38>
 800994a:	bf00      	nop

0800994c <dwt_configure>:
{
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8 chan = config->chan ;
 8009950:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8009952:	7942      	ldrb	r2, [r0, #5]
 8009954:	4bc2      	ldr	r3, [pc, #776]	; (8009c60 <dwt_configure+0x314>)
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8009956:	4dc3      	ldr	r5, [pc, #780]	; (8009c64 <dwt_configure+0x318>)
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8009958:	7847      	ldrb	r7, [r0, #1]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800995a:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
    if(DWT_BR_110K == config->dataRate)
 800995e:	79c3      	ldrb	r3, [r0, #7]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8009960:	2e04      	cmp	r6, #4
 8009962:	bf18      	it	ne
 8009964:	f1a6 0807 	subne.w	r8, r6, #7
{
 8009968:	4604      	mov	r4, r0
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800996a:	6828      	ldr	r0, [r5, #0]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800996c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8009970:	bf18      	it	ne
 8009972:	fab8 f888 	clzne	r8, r8
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8009976:	6902      	ldr	r2, [r0, #16]
{
 8009978:	b082      	sub	sp, #8
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800997a:	b2ff      	uxtb	r7, r7
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800997c:	bf14      	ite	ne
 800997e:	ea4f 1858 	movne.w	r8, r8, lsr #5
 8009982:	f04f 0801 	moveq.w	r8, #1
    if(DWT_BR_110K == config->dataRate)
 8009986:	2b00      	cmp	r3, #0
 8009988:	f040 8142 	bne.w	8009c10 <dwt_configure+0x2c4>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800998c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8009990:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    pdw1000local->longFrames = config->phrMode ;
 8009994:	7a23      	ldrb	r3, [r4, #8]
 8009996:	7283      	strb	r3, [r0, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8009998:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800999c:	041a      	lsls	r2, r3, #16
 800999e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80099a2:	430a      	orrs	r2, r1
 80099a4:	6102      	str	r2, [r0, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80099a6:	2100      	movs	r1, #0
 80099a8:	2004      	movs	r0, #4
 80099aa:	f7ff ff39 	bl	8009820 <dwt_write32bitoffsetreg>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80099ae:	20ee      	movs	r0, #238	; 0xee
 80099b0:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80099b4:	2084      	movs	r0, #132	; 0x84
 80099b6:	f88d 0005 	strb.w	r0, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80099ba:	2050      	movs	r0, #80	; 0x50
    writetospi(cnt,header,length,buffer);
 80099bc:	466b      	mov	r3, sp
 80099be:	2202      	movs	r2, #2
 80099c0:	a901      	add	r1, sp, #4
    buffer[0] = regval & 0xFF;
 80099c2:	f88d 9000 	strb.w	r9, [sp]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80099c6:	f88d 0006 	strb.w	r0, [sp, #6]
    buffer[1] = regval >> 8 ;
 80099ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
    writetospi(cnt,header,length,buffer);
 80099ce:	2003      	movs	r0, #3
    buffer[1] = regval >> 8 ;
 80099d0:	f88d 9001 	strb.w	r9, [sp, #1]
    writetospi(cnt,header,length,buffer);
 80099d4:	f000 ff48 	bl	800a868 <writetospi>
    _dwt_configlde(prfIndex);
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ff89 	bl	80098f0 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80099de:	4ba2      	ldr	r3, [pc, #648]	; (8009c68 <dwt_configure+0x31c>)
 80099e0:	f813 9006 	ldrb.w	r9, [r3, r6]
 80099e4:	4ba1      	ldr	r3, [pc, #644]	; (8009c6c <dwt_configure+0x320>)
 80099e6:	2107      	movs	r1, #7
 80099e8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 80099ec:	202b      	movs	r0, #43	; 0x2b
 80099ee:	f7ff ff17 	bl	8009820 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 80099f2:	4b9f      	ldr	r3, [pc, #636]	; (8009c70 <dwt_configure+0x324>)
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80099f4:	20eb      	movs	r0, #235	; 0xeb
 80099f6:	f813 3009 	ldrb.w	r3, [r3, r9]
 80099fa:	f88d 3000 	strb.w	r3, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80099fe:	f04f 0a0b 	mov.w	sl, #11
    writetospi(cnt,header,length,buffer);
 8009a02:	466b      	mov	r3, sp
 8009a04:	2201      	movs	r2, #1
 8009a06:	a901      	add	r1, sp, #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a08:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009a0c:	2002      	movs	r0, #2
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009a0e:	f88d a005 	strb.w	sl, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009a12:	f000 ff29 	bl	800a868 <writetospi>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8009a16:	4b97      	ldr	r3, [pc, #604]	; (8009c74 <dwt_configure+0x328>)
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009a18:	f88d a005 	strb.w	sl, [sp, #5]
 8009a1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009a20:	f88d 3000 	strb.w	r3, [sp]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a24:	20e8      	movs	r0, #232	; 0xe8
    writetospi(cnt,header,length,buffer);
 8009a26:	466b      	mov	r3, sp
 8009a28:	2201      	movs	r2, #1
 8009a2a:	a901      	add	r1, sp, #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a2c:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009a30:	2002      	movs	r0, #2
 8009a32:	f000 ff19 	bl	800a868 <writetospi>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8009a36:	4b90      	ldr	r3, [pc, #576]	; (8009c78 <dwt_configure+0x32c>)
 8009a38:	210c      	movs	r1, #12
 8009a3a:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8009a3e:	2028      	movs	r0, #40	; 0x28
 8009a40:	f7ff feee 	bl	8009820 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8009a44:	79e2      	ldrb	r2, [r4, #7]
 8009a46:	79a3      	ldrb	r3, [r4, #6]
 8009a48:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009a4c:	4a8b      	ldr	r2, [pc, #556]	; (8009c7c <dwt_configure+0x330>)
 8009a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    buffer[0] = regval & 0xFF;
 8009a52:	f88d 3000 	strb.w	r3, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009a56:	f04f 0802 	mov.w	r8, #2
    buffer[1] = regval >> 8 ;
 8009a5a:	0a1b      	lsrs	r3, r3, #8
 8009a5c:	f88d 3001 	strb.w	r3, [sp, #1]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a60:	f04f 09e7 	mov.w	r9, #231	; 0xe7
    writetospi(cnt,header,length,buffer);
 8009a64:	466b      	mov	r3, sp
 8009a66:	4642      	mov	r2, r8
 8009a68:	a901      	add	r1, sp, #4
 8009a6a:	4640      	mov	r0, r8
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009a6c:	f88d 8005 	strb.w	r8, [sp, #5]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a70:	f88d 9004 	strb.w	r9, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009a74:	f000 fef8 	bl	800a868 <writetospi>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8009a78:	4b81      	ldr	r3, [pc, #516]	; (8009c80 <dwt_configure+0x334>)
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009a7a:	f88d 9004 	strb.w	r9, [sp, #4]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8009a7e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
    buffer[0] = regval & 0xFF;
 8009a82:	f88d 3000 	strb.w	r3, [sp]
    buffer[1] = regval >> 8 ;
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	f88d 3001 	strb.w	r3, [sp, #1]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009a92:	4642      	mov	r2, r8
 8009a94:	466b      	mov	r3, sp
 8009a96:	a901      	add	r1, sp, #4
 8009a98:	4640      	mov	r0, r8
 8009a9a:	f000 fee5 	bl	800a868 <writetospi>
    if(config->dataRate == DWT_BR_110K)
 8009a9e:	79e3      	ldrb	r3, [r4, #7]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80cb 	beq.w	8009c3c <dwt_configure+0x2f0>
        if(config->txPreambLength == DWT_PLEN_64)
 8009aa6:	78a3      	ldrb	r3, [r4, #2]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009aa8:	f88d 9004 	strb.w	r9, [sp, #4]
        if(config->txPreambLength == DWT_PLEN_64)
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	f000 8093 	beq.w	8009bd8 <dwt_configure+0x28c>
    buffer[0] = regval & 0xFF;
 8009ab2:	2020      	movs	r0, #32
 8009ab4:	f88d 0000 	strb.w	r0, [sp]
    buffer[1] = regval >> 8 ;
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f88d 0001 	strb.w	r0, [sp, #1]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009abe:	2006      	movs	r0, #6
    writetospi(cnt,header,length,buffer);
 8009ac0:	466b      	mov	r3, sp
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009ac2:	f88d 0005 	strb.w	r0, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	a901      	add	r1, sp, #4
 8009aca:	4640      	mov	r0, r8
 8009acc:	f000 fecc 	bl	800a868 <writetospi>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8009ad0:	2328      	movs	r3, #40	; 0x28
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009ad2:	f88d 9004 	strb.w	r9, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f88d 3000 	strb.w	r3, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009adc:	2326      	movs	r3, #38	; 0x26
 8009ade:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	466b      	mov	r3, sp
 8009ae6:	a901      	add	r1, sp, #4
 8009ae8:	f000 febe 	bl	800a868 <writetospi>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8009aec:	78e3      	ldrb	r3, [r4, #3]
 8009aee:	4a65      	ldr	r2, [pc, #404]	; (8009c84 <dwt_configure+0x338>)
 8009af0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8009af4:	2108      	movs	r1, #8
 8009af6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009afa:	2027      	movs	r0, #39	; 0x27
 8009afc:	f7ff fe90 	bl	8009820 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 8009b00:	8963      	ldrh	r3, [r4, #10]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d07e      	beq.n	8009c04 <dwt_configure+0x2b8>
    buffer[0] = regval & 0xFF;
 8009b06:	b2da      	uxtb	r2, r3
    buffer[1] = regval >> 8 ;
 8009b08:	0a1b      	lsrs	r3, r3, #8
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8009b0a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009c88 <dwt_configure+0x33c>
    buffer[0] = regval & 0xFF;
 8009b0e:	f88d 2000 	strb.w	r2, [sp]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009b12:	f04f 0ce7 	mov.w	ip, #231	; 0xe7
    writetospi(cnt,header,length,buffer);
 8009b16:	2202      	movs	r2, #2
    buffer[1] = regval >> 8 ;
 8009b18:	f88d 3001 	strb.w	r3, [sp, #1]
    writetospi(cnt,header,length,buffer);
 8009b1c:	a901      	add	r1, sp, #4
 8009b1e:	466b      	mov	r3, sp
 8009b20:	4610      	mov	r0, r2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009b22:	f88d c004 	strb.w	ip, [sp, #4]
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8009b26:	eb08 0747 	add.w	r7, r8, r7, lsl #1
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009b2a:	f04f 0c20 	mov.w	ip, #32
 8009b2e:	f88d c005 	strb.w	ip, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009b32:	f000 fe99 	bl	800a868 <writetospi>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8009b36:	f8d8 2000 	ldr.w	r2, [r8]
 8009b3a:	210c      	movs	r1, #12
 8009b3c:	2023      	movs	r0, #35	; 0x23
 8009b3e:	f7ff fe6f 	bl	8009820 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8009b42:	88bb      	ldrh	r3, [r7, #4]
    buffer[0] = regval & 0xFF;
 8009b44:	f88d 3000 	strb.w	r3, [sp]
    buffer[1] = regval >> 8 ;
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	f88d 3001 	strb.w	r3, [sp, #1]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009b4e:	23e3      	movs	r3, #227	; 0xe3
    writetospi(cnt,header,length,buffer);
 8009b50:	2202      	movs	r2, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009b52:	f88d 3004 	strb.w	r3, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009b56:	2304      	movs	r3, #4
 8009b58:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009b5c:	a901      	add	r1, sp, #4
 8009b5e:	466b      	mov	r3, sp
 8009b60:	4610      	mov	r0, r2
 8009b62:	f000 fe81 	bl	800a868 <writetospi>
    if(config->nsSFD)
 8009b66:	79a0      	ldrb	r0, [r4, #6]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d154      	bne.n	8009c16 <dwt_configure+0x2ca>
 8009b6c:	4602      	mov	r2, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8009b6e:	7863      	ldrb	r3, [r4, #1]
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8009b70:	f894 c005 	ldrb.w	ip, [r4, #5]
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8009b74:	7921      	ldrb	r1, [r4, #4]
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8009b76:	049b      	lsls	r3, r3, #18
 8009b78:	f403 2740 	and.w	r7, r3, #786432	; 0xc0000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8009b7c:	f006 030f 	and.w	r3, r6, #15
 8009b80:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8009b84:	0589      	lsls	r1, r1, #22
 8009b86:	f001 61f8 	and.w	r1, r1, #130023424	; 0x7c00000
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8009b8a:	433b      	orrs	r3, r7
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8009b8c:	0136      	lsls	r6, r6, #4
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8009b8e:	430b      	orrs	r3, r1
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8009b90:	b2f6      	uxtb	r6, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8009b92:	4333      	orrs	r3, r6
 8009b94:	4303      	orrs	r3, r0
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8009b96:	431a      	orrs	r2, r3
 8009b98:	2100      	movs	r1, #0
 8009b9a:	201f      	movs	r0, #31
 8009b9c:	f7ff fe40 	bl	8009820 <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8009ba0:	78a2      	ldrb	r2, [r4, #2]
 8009ba2:	7863      	ldrb	r3, [r4, #1]
 8009ba4:	6829      	ldr	r1, [r5, #0]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	79e2      	ldrb	r2, [r4, #7]
 8009baa:	0352      	lsls	r2, r2, #13
 8009bac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bb0:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8009bb2:	2008      	movs	r0, #8
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	f7ff fe33 	bl	8009820 <dwt_write32bitoffsetreg>
    writetospi(cnt,header,length,buffer);
 8009bba:	2201      	movs	r2, #1
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009bbc:	208d      	movs	r0, #141	; 0x8d
 8009bbe:	f88d 0004 	strb.w	r0, [sp, #4]
 8009bc2:	2442      	movs	r4, #66	; 0x42
    writetospi(cnt,header,length,buffer);
 8009bc4:	466b      	mov	r3, sp
 8009bc6:	a901      	add	r1, sp, #4
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f88d 4000 	strb.w	r4, [sp]
 8009bce:	f000 fe4b 	bl	800a868 <writetospi>
} // end dwt_configure()
 8009bd2:	b002      	add	sp, #8
 8009bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    buffer[1] = regval >> 8 ;
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f88d 0001 	strb.w	r0, [sp, #1]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009bde:	2006      	movs	r0, #6
    buffer[0] = regval & 0xFF;
 8009be0:	f04f 0a10 	mov.w	sl, #16
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009be4:	f88d 0005 	strb.w	r0, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009be8:	466b      	mov	r3, sp
 8009bea:	4642      	mov	r2, r8
 8009bec:	a901      	add	r1, sp, #4
 8009bee:	4640      	mov	r0, r8
    buffer[0] = regval & 0xFF;
 8009bf0:	f88d a000 	strb.w	sl, [sp]
    writetospi(cnt,header,length,buffer);
 8009bf4:	f000 fe38 	bl	800a868 <writetospi>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8009bf8:	f88d a000 	strb.w	sl, [sp]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009bfc:	f88d 9004 	strb.w	r9, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009c00:	4640      	mov	r0, r8
 8009c02:	e76b      	b.n	8009adc <dwt_configure+0x190>
        config->sfdTO = DWT_SFDTOC_DEF;
 8009c04:	f241 0341 	movw	r3, #4161	; 0x1041
 8009c08:	8163      	strh	r3, [r4, #10]
 8009c0a:	2241      	movs	r2, #65	; 0x41
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	e77c      	b.n	8009b0a <dwt_configure+0x1be>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8009c10:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8009c14:	e6be      	b.n	8009994 <dwt_configure+0x48>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8009c16:	79e3      	ldrb	r3, [r4, #7]
 8009c18:	4a1c      	ldr	r2, [pc, #112]	; (8009c8c <dwt_configure+0x340>)
 8009c1a:	5cd3      	ldrb	r3, [r2, r3]
 8009c1c:	f88d 3000 	strb.w	r3, [sp]
    writetospi(cnt,header,length,buffer);
 8009c20:	2201      	movs	r2, #1
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009c22:	23a1      	movs	r3, #161	; 0xa1
 8009c24:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009c28:	4610      	mov	r0, r2
 8009c2a:	466b      	mov	r3, sp
 8009c2c:	a901      	add	r1, sp, #4
 8009c2e:	f000 fe1b 	bl	800a868 <writetospi>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8009c32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009c36:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8009c3a:	e798      	b.n	8009b6e <dwt_configure+0x222>
    buffer[1] = regval >> 8 ;
 8009c3c:	f88d 3001 	strb.w	r3, [sp, #1]
    buffer[0] = regval & 0xFF;
 8009c40:	2364      	movs	r3, #100	; 0x64
 8009c42:	f88d 3000 	strb.w	r3, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009c46:	2306      	movs	r3, #6
 8009c48:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	466b      	mov	r3, sp
 8009c50:	4640      	mov	r0, r8
 8009c52:	a901      	add	r1, sp, #4
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009c54:	f88d 9004 	strb.w	r9, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009c58:	f000 fe06 	bl	800a868 <writetospi>
} // end dwt_write16bitoffsetreg()
 8009c5c:	e746      	b.n	8009aec <dwt_configure+0x1a0>
 8009c5e:	bf00      	nop
 8009c60:	08012434 	.word	0x08012434
 8009c64:	200002f4 	.word	0x200002f4
 8009c68:	080123e4 	.word	0x080123e4
 8009c6c:	08012414 	.word	0x08012414
 8009c70:	0801242c 	.word	0x0801242c
 8009c74:	08012468 	.word	0x08012468
 8009c78:	08012478 	.word	0x08012478
 8009c7c:	0801246c 	.word	0x0801246c
 8009c80:	0801240c 	.word	0x0801240c
 8009c84:	080123ec 	.word	0x080123ec
 8009c88:	080123dc 	.word	0x080123dc
 8009c8c:	08012410 	.word	0x08012410

08009c90 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8009c90:	b510      	push	{r4, lr}
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8009c92:	2100      	movs	r1, #0
{
 8009c94:	b082      	sub	sp, #8
 8009c96:	4604      	mov	r4, r0
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8009c98:	201a      	movs	r0, #26
 8009c9a:	f7ff fd39 	bl	8009710 <dwt_read32bitoffsetreg>

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8009c9e:	0d00      	lsrs	r0, r0, #20

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8009ca0:	f3c4 0413 	ubfx	r4, r4, #0, #20
    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8009ca4:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8009ca6:	4320      	orrs	r0, r4
        regval >>= 8 ;
 8009ca8:	0a03      	lsrs	r3, r0, #8
 8009caa:	0e01      	lsrs	r1, r0, #24
 8009cac:	ea4f 4c10 	mov.w	ip, r0, lsr #16
        buffer[j] = regval & 0xff ;
 8009cb0:	f88d 0004 	strb.w	r0, [sp, #4]
 8009cb4:	f88d 3005 	strb.w	r3, [sp, #5]
 8009cb8:	f88d 1007 	strb.w	r1, [sp, #7]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009cbc:	249a      	movs	r4, #154	; 0x9a
    writetospi(cnt,header,length,buffer);
 8009cbe:	ab01      	add	r3, sp, #4
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	4669      	mov	r1, sp
 8009cc4:	2001      	movs	r0, #1
        buffer[j] = regval & 0xff ;
 8009cc6:	f88d c006 	strb.w	ip, [sp, #6]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009cca:	f88d 4000 	strb.w	r4, [sp]
    writetospi(cnt,header,length,buffer);
 8009cce:	f000 fdcb 	bl	800a868 <writetospi>

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
}
 8009cd2:	b002      	add	sp, #8
 8009cd4:	bd10      	pop	{r4, pc}
 8009cd6:	bf00      	nop

08009cd8 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 8009cd8:	b410      	push	{r4}
    pdw1000local->cbTxDone = cbTxDone;
 8009cda:	4c04      	ldr	r4, [pc, #16]	; (8009cec <dwt_setcallbacks+0x14>)
 8009cdc:	6824      	ldr	r4, [r4, #0]
    pdw1000local->cbRxOk = cbRxOk;
 8009cde:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    pdw1000local->cbRxTo = cbRxTo;
    pdw1000local->cbRxErr = cbRxErr;
 8009ce2:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
}
 8009ce6:	bc10      	pop	{r4}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	200002f4 	.word	0x200002f4

08009cf0 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	b082      	sub	sp, #8
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009cf4:	2236      	movs	r2, #54	; 0x36
{
 8009cf6:	4604      	mov	r4, r0
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009cf8:	f88d 2004 	strb.w	r2, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009cfc:	466b      	mov	r3, sp
 8009cfe:	2202      	movs	r2, #2
 8009d00:	a901      	add	r1, sp, #4
 8009d02:	2001      	movs	r0, #1
 8009d04:	f000 fdca 	bl	800a89c <readfromspi>
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
    switch(clocks)
 8009d08:	2c0e      	cmp	r4, #14
 8009d0a:	d812      	bhi.n	8009d32 <_dwt_enableclocks+0x42>
 8009d0c:	e8df f004 	tbb	[pc, r4]
 8009d10:	1138082f 	.word	0x1138082f
 8009d14:	41111111 	.word	0x41111111
 8009d18:	5d111150 	.word	0x5d111150
 8009d1c:	6b64      	.short	0x6b64
 8009d1e:	28          	.byte	0x28
 8009d1f:	00          	.byte	0x00
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
            reg[1] = reg[1] & 0xfe;
 8009d20:	f89d 3001 	ldrb.w	r3, [sp, #1]
            reg[0] = 0x00 ;
 8009d24:	2200      	movs	r2, #0
            reg[1] = reg[1] & 0xfe;
 8009d26:	f023 0301 	bic.w	r3, r3, #1
            reg[0] = 0x00 ;
 8009d2a:	f88d 2000 	strb.w	r2, [sp]
            reg[1] = reg[1] & 0xfe;
 8009d2e:	f88d 3001 	strb.w	r3, [sp, #1]
    writetospi(cnt,header,length,buffer);
 8009d32:	2201      	movs	r2, #1
 8009d34:	466b      	mov	r3, sp
 8009d36:	a901      	add	r1, sp, #4
 8009d38:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009d3a:	24b6      	movs	r4, #182	; 0xb6
 8009d3c:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009d40:	f000 fd92 	bl	800a868 <writetospi>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009d44:	2201      	movs	r2, #1
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009d46:	20f6      	movs	r0, #246	; 0xf6
 8009d48:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009d4c:	eb0d 0302 	add.w	r3, sp, r2
 8009d50:	a901      	add	r1, sp, #4
 8009d52:	2002      	movs	r0, #2
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009d54:	f88d 2005 	strb.w	r2, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009d58:	f000 fd86 	bl	800a868 <writetospi>

    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);

} // end _dwt_enableclocks()
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd10      	pop	{r4, pc}
            reg[0] = 0x01;
 8009d60:	2201      	movs	r2, #1
            reg[1] = 0x03;
 8009d62:	2303      	movs	r3, #3
            reg[0] = 0x01;
 8009d64:	f88d 2000 	strb.w	r2, [sp]
            reg[1] = 0x03;
 8009d68:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8009d6c:	e7e1      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8009d6e:	f89d 3000 	ldrb.w	r3, [sp]
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	f88d 3000 	strb.w	r3, [sp]
        break;
 8009d7e:	e7d8      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8009d80:	f89d 3000 	ldrb.w	r3, [sp]
 8009d84:	f023 0303 	bic.w	r3, r3, #3
 8009d88:	f043 0302 	orr.w	r3, r3, #2
 8009d8c:	f88d 3000 	strb.w	r3, [sp]
        break;
 8009d90:	e7cf      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8009d92:	f89d 3000 	ldrb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 8009d96:	f89d 2001 	ldrb.w	r2, [sp, #1]
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8009d9a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8009d9e:	f043 0348 	orr.w	r3, r3, #72	; 0x48
            reg[1] = 0x80 | reg[1];
 8009da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8009da6:	f88d 3000 	strb.w	r3, [sp]
            reg[1] = 0x80 | reg[1];
 8009daa:	f88d 2001 	strb.w	r2, [sp, #1]
        break;
 8009dae:	e7c0      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[0] = reg[0] & 0xb3;
 8009db0:	f89d 2000 	ldrb.w	r2, [sp]
            reg[1] = 0x7f & reg[1];
 8009db4:	f89d 3001 	ldrb.w	r3, [sp, #1]
            reg[0] = reg[0] & 0xb3;
 8009db8:	f022 024c 	bic.w	r2, r2, #76	; 0x4c
            reg[1] = 0x7f & reg[1];
 8009dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            reg[0] = reg[0] & 0xb3;
 8009dc0:	f88d 2000 	strb.w	r2, [sp]
            reg[1] = 0x7f & reg[1];
 8009dc4:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8009dc8:	e7b3      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[1] = 0x02 | reg[1];
 8009dca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009dce:	f043 0302 	orr.w	r3, r3, #2
 8009dd2:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8009dd6:	e7ac      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[1] = reg[1] & 0xfd;
 8009dd8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009ddc:	f023 0302 	bic.w	r3, r3, #2
 8009de0:	f88d 3001 	strb.w	r3, [sp, #1]
        break;
 8009de4:	e7a5      	b.n	8009d32 <_dwt_enableclocks+0x42>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8009de6:	f89d 3000 	ldrb.w	r3, [sp]
 8009dea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009dee:	f043 0320 	orr.w	r3, r3, #32
 8009df2:	f88d 3000 	strb.w	r3, [sp]
        break;
 8009df6:	e79c      	b.n	8009d32 <_dwt_enableclocks+0x42>

08009df8 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8009df8:	b500      	push	{lr}
 8009dfa:	b083      	sub	sp, #12
        regval >>= 8 ;
 8009dfc:	0a03      	lsrs	r3, r0, #8
 8009dfe:	0c01      	lsrs	r1, r0, #16
 8009e00:	0e02      	lsrs	r2, r0, #24
        buffer[j] = regval & 0xff ;
 8009e02:	f88d 0004 	strb.w	r0, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009e06:	2001      	movs	r0, #1
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009e08:	f04f 0cca 	mov.w	ip, #202	; 0xca
        buffer[j] = regval & 0xff ;
 8009e0c:	f88d 3005 	strb.w	r3, [sp, #5]
 8009e10:	f88d 1006 	strb.w	r1, [sp, #6]
 8009e14:	f88d 2007 	strb.w	r2, [sp, #7]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009e18:	f88d 0001 	strb.w	r0, [sp, #1]
    writetospi(cnt,header,length,buffer);
 8009e1c:	ab01      	add	r3, sp, #4
 8009e1e:	2204      	movs	r2, #4
 8009e20:	4669      	mov	r1, sp
 8009e22:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009e24:	f88d c000 	strb.w	ip, [sp]
    writetospi(cnt,header,length,buffer);
 8009e28:	f000 fd1e 	bl	800a868 <writetospi>
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored

} // end dwt_setdelayedtrxtime()
 8009e2c:	b003      	add	sp, #12
 8009e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e32:	bf00      	nop

08009e34 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8009e34:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 8009e36:	f010 0302 	ands.w	r3, r0, #2
{
 8009e3a:	b082      	sub	sp, #8
    if(mode & DWT_RESPONSE_EXPECTED)
 8009e3c:	d004      	beq.n	8009e48 <dwt_starttx+0x14>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 8009e3e:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <dwt_starttx+0xa0>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	2101      	movs	r1, #1
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8009e44:	2380      	movs	r3, #128	; 0x80
        pdw1000local->wait4resp = 1;
 8009e46:	7551      	strb	r1, [r2, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8009e48:	f010 0401 	ands.w	r4, r0, #1
    writetospi(cnt,header,length,buffer);
 8009e4c:	f04f 0201 	mov.w	r2, #1
    if (mode & DWT_START_TX_DELAYED)
 8009e50:	d022      	beq.n	8009e98 <dwt_starttx+0x64>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8009e52:	f043 0106 	orr.w	r1, r3, #6
 8009e56:	f88d 1000 	strb.w	r1, [sp]
    writetospi(cnt,header,length,buffer);
 8009e5a:	466b      	mov	r3, sp
 8009e5c:	a901      	add	r1, sp, #4
 8009e5e:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009e60:	248d      	movs	r4, #141	; 0x8d
 8009e62:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009e66:	f000 fcff 	bl	800a868 <writetospi>
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009e6a:	234f      	movs	r3, #79	; 0x4f
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009e6c:	2202      	movs	r2, #2
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009e6e:	f88d 3004 	strb.w	r3, [sp, #4]
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009e72:	2303      	movs	r3, #3
 8009e74:	f88d 3005 	strb.w	r3, [sp, #5]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009e78:	a901      	add	r1, sp, #4
 8009e7a:	466b      	mov	r3, sp
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f000 fd0d 	bl	800a89c <readfromspi>
    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8009e82:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009e86:	f89d 0000 	ldrb.w	r0, [sp]
 8009e8a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8009e8e:	f410 6081 	ands.w	r0, r0, #1032	; 0x408
 8009e92:	d110      	bne.n	8009eb6 <dwt_starttx+0x82>
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;

} // end dwt_starttx()
 8009e94:	b002      	add	sp, #8
 8009e96:	bd10      	pop	{r4, pc}
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8009e98:	f043 0102 	orr.w	r1, r3, #2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009e9c:	208d      	movs	r0, #141	; 0x8d
 8009e9e:	f88d 1000 	strb.w	r1, [sp]
 8009ea2:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009ea6:	466b      	mov	r3, sp
 8009ea8:	a901      	add	r1, sp, #4
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f000 fcdc 	bl	800a868 <writetospi>
    int retval = DWT_SUCCESS ;
 8009eb0:	4620      	mov	r0, r4
} // end dwt_starttx()
 8009eb2:	b002      	add	sp, #8
 8009eb4:	bd10      	pop	{r4, pc}
    writetospi(cnt,header,length,buffer);
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	2040      	movs	r0, #64	; 0x40
 8009eba:	f88d 0000 	strb.w	r0, [sp]
 8009ebe:	466b      	mov	r3, sp
 8009ec0:	a901      	add	r1, sp, #4
 8009ec2:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009ec4:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009ec8:	f000 fcce 	bl	800a868 <writetospi>
            retval = DWT_ERROR ; // Failed !
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed0:	e7e0      	b.n	8009e94 <dwt_starttx+0x60>
 8009ed2:	bf00      	nop
 8009ed4:	200002f4 	.word	0x200002f4

08009ed8 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	b082      	sub	sp, #8
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009edc:	224f      	movs	r2, #79	; 0x4f
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009ede:	2403      	movs	r4, #3
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009ee0:	eb0d 0304 	add.w	r3, sp, r4
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009ee4:	f88d 2004 	strb.w	r2, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009ee8:	a901      	add	r1, sp, #4
 8009eea:	2201      	movs	r2, #1
 8009eec:	2002      	movs	r0, #2
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009eee:	f88d 4005 	strb.w	r4, [sp, #5]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009ef2:	f000 fcd3 	bl	800a89c <readfromspi>
    return regval ;
 8009ef6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8009efa:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
 8009efe:	061b      	lsls	r3, r3, #24
 8009f00:	d401      	bmi.n	8009f06 <dwt_syncrxbufptrs+0x2e>
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 8009f02:	b002      	add	sp, #8
 8009f04:	bd10      	pop	{r4, pc}
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009f06:	20cd      	movs	r0, #205	; 0xcd
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f88d 0004 	strb.w	r0, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009f0e:	eb0d 0304 	add.w	r3, sp, r4
 8009f12:	a901      	add	r1, sp, #4
 8009f14:	2002      	movs	r0, #2
 8009f16:	f88d 2003 	strb.w	r2, [sp, #3]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009f1a:	f88d 4005 	strb.w	r4, [sp, #5]
    writetospi(cnt,header,length,buffer);
 8009f1e:	f000 fca3 	bl	800a868 <writetospi>
}
 8009f22:	b002      	add	sp, #8
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	bf00      	nop

08009f28 <dwt_forcetrxoff>:
{
 8009f28:	b530      	push	{r4, r5, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8009f2a:	2100      	movs	r1, #0
{
 8009f2c:	b083      	sub	sp, #12
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8009f2e:	200e      	movs	r0, #14
 8009f30:	f7ff fbee 	bl	8009710 <dwt_read32bitoffsetreg>
 8009f34:	4605      	mov	r5, r0
    stat = decamutexon() ;
 8009f36:	f000 fc93 	bl	800a860 <decamutexon>
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8009f3a:	2200      	movs	r2, #0
    stat = decamutexon() ;
 8009f3c:	4604      	mov	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8009f3e:	4611      	mov	r1, r2
 8009f40:	200e      	movs	r0, #14
 8009f42:	f7ff fc6d 	bl	8009820 <dwt_write32bitoffsetreg>
    writetospi(cnt,header,length,buffer);
 8009f46:	2201      	movs	r2, #1
 8009f48:	2040      	movs	r0, #64	; 0x40
 8009f4a:	f10d 0303 	add.w	r3, sp, #3
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009f4e:	f04f 0c8d 	mov.w	ip, #141	; 0x8d
    writetospi(cnt,header,length,buffer);
 8009f52:	a901      	add	r1, sp, #4
 8009f54:	f88d 0003 	strb.w	r0, [sp, #3]
 8009f58:	4610      	mov	r0, r2
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009f5a:	f88d c004 	strb.w	ip, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009f5e:	f000 fc83 	bl	800a868 <writetospi>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8009f62:	4a0a      	ldr	r2, [pc, #40]	; (8009f8c <dwt_forcetrxoff+0x64>)
 8009f64:	2100      	movs	r1, #0
 8009f66:	200f      	movs	r0, #15
 8009f68:	f7ff fc5a 	bl	8009820 <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 8009f6c:	f7ff ffb4 	bl	8009ed8 <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8009f70:	462a      	mov	r2, r5
 8009f72:	2100      	movs	r1, #0
 8009f74:	200e      	movs	r0, #14
 8009f76:	f7ff fc53 	bl	8009820 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fc72 	bl	800a864 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8009f80:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <dwt_forcetrxoff+0x68>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2200      	movs	r2, #0
 8009f86:	755a      	strb	r2, [r3, #21]
} // end deviceforcetrxoff()
 8009f88:	b003      	add	sp, #12
 8009f8a:	bd30      	pop	{r4, r5, pc}
 8009f8c:	2427fff8 	.word	0x2427fff8
 8009f90:	200002f4 	.word	0x200002f4

08009f94 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8009f94:	b530      	push	{r4, r5, lr}
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8009f96:	0743      	lsls	r3, r0, #29
{
 8009f98:	b083      	sub	sp, #12
 8009f9a:	4604      	mov	r4, r0
    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8009f9c:	d534      	bpl.n	800a008 <dwt_rxenable+0x74>
        dwt_syncrxbufptrs();
    }

    temp = (uint16)SYS_CTRL_RXENAB ;

    if (mode & DWT_START_RX_DELAYED)
 8009f9e:	f014 0501 	ands.w	r5, r4, #1
 8009fa2:	d021      	beq.n	8009fe8 <dwt_rxenable+0x54>
    buffer[0] = regval & 0xFF;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f88d 3000 	strb.w	r3, [sp]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009faa:	238d      	movs	r3, #141	; 0x8d
    buffer[1] = regval >> 8 ;
 8009fac:	2503      	movs	r5, #3
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009fae:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	466b      	mov	r3, sp
 8009fb6:	a901      	add	r1, sp, #4
 8009fb8:	2001      	movs	r0, #1
    buffer[1] = regval >> 8 ;
 8009fba:	f88d 5001 	strb.w	r5, [sp, #1]
    writetospi(cnt,header,length,buffer);
 8009fbe:	f000 fc53 	bl	800a868 <writetospi>
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8009fc2:	224f      	movs	r2, #79	; 0x4f
 8009fc4:	f88d 2004 	strb.w	r2, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009fc8:	466b      	mov	r3, sp
 8009fca:	2201      	movs	r2, #1
 8009fcc:	a901      	add	r1, sp, #4
 8009fce:	2002      	movs	r0, #2
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8009fd0:	f88d 5005 	strb.w	r5, [sp, #5]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8009fd4:	f000 fc62 	bl	800a89c <readfromspi>
    return regval ;
 8009fd8:	f89d 5000 	ldrb.w	r5, [sp]
    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);

    if (mode & DWT_START_RX_DELAYED) // check for errors
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8009fdc:	f015 0508 	ands.w	r5, r5, #8
 8009fe0:	d115      	bne.n	800a00e <dwt_rxenable+0x7a>
            return DWT_ERROR; // return warning indication
        }
    }

    return DWT_SUCCESS;
} // end dwt_rxenable()
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	b003      	add	sp, #12
 8009fe6:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8009fe8:	218d      	movs	r1, #141	; 0x8d
 8009fea:	f88d 1004 	strb.w	r1, [sp, #4]
    buffer[1] = regval >> 8 ;
 8009fee:	2001      	movs	r0, #1
    writetospi(cnt,header,length,buffer);
 8009ff0:	466b      	mov	r3, sp
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	a901      	add	r1, sp, #4
    buffer[0] = regval & 0xFF;
 8009ff6:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = regval >> 8 ;
 8009ffa:	f88d 0001 	strb.w	r0, [sp, #1]
    writetospi(cnt,header,length,buffer);
 8009ffe:	f000 fc33 	bl	800a868 <writetospi>
} // end dwt_rxenable()
 800a002:	4628      	mov	r0, r5
 800a004:	b003      	add	sp, #12
 800a006:	bd30      	pop	{r4, r5, pc}
        dwt_syncrxbufptrs();
 800a008:	f7ff ff66 	bl	8009ed8 <dwt_syncrxbufptrs>
 800a00c:	e7c7      	b.n	8009f9e <dwt_rxenable+0xa>
            dwt_forcetrxoff(); // turn the delayed receive off
 800a00e:	f7ff ff8b 	bl	8009f28 <dwt_forcetrxoff>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 800a012:	f014 0102 	ands.w	r1, r4, #2
 800a016:	d002      	beq.n	800a01e <dwt_rxenable+0x8a>
            return DWT_ERROR; // return warning indication
 800a018:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a01c:	e7e1      	b.n	8009fe2 <dwt_rxenable+0x4e>
    buffer[1] = regval >> 8 ;
 800a01e:	2001      	movs	r0, #1
 800a020:	f88d 0005 	strb.w	r0, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800a024:	ab01      	add	r3, sp, #4
 800a026:	2202      	movs	r2, #2
 800a028:	200d      	movs	r0, #13
    buffer[0] = regval & 0xFF;
 800a02a:	f88d 1004 	strb.w	r1, [sp, #4]
            return DWT_ERROR; // return warning indication
 800a02e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800a032:	f7ff fb3f 	bl	80096b4 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800a036:	e7d4      	b.n	8009fe2 <dwt_rxenable+0x4e>

0800a038 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	b082      	sub	sp, #8
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a03c:	2344      	movs	r3, #68	; 0x44
 800a03e:	f88d 3004 	strb.w	r3, [sp, #4]
{
 800a042:	4604      	mov	r4, r0
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a044:	2603      	movs	r6, #3
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800a046:	466b      	mov	r3, sp
 800a048:	2201      	movs	r2, #1
 800a04a:	a901      	add	r1, sp, #4
 800a04c:	2002      	movs	r0, #2
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a04e:	f88d 6005 	strb.w	r6, [sp, #5]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800a052:	f000 fc23 	bl	800a89c <readfromspi>
    return regval ;
 800a056:	f89d 5000 	ldrb.w	r5, [sp]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only

    if(time > 0)
 800a05a:	b324      	cbz	r4, 800a0a6 <dwt_setrxtimeout+0x6e>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a05c:	238c      	movs	r3, #140	; 0x8c
    buffer[0] = regval & 0xFF;
 800a05e:	f88d 4000 	strb.w	r4, [sp]
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a062:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a066:	a901      	add	r1, sp, #4
 800a068:	466b      	mov	r3, sp
 800a06a:	2202      	movs	r2, #2
    buffer[1] = regval >> 8 ;
 800a06c:	0a24      	lsrs	r4, r4, #8
    writetospi(cnt,header,length,buffer);
 800a06e:	2001      	movs	r0, #1
    buffer[1] = regval >> 8 ;
 800a070:	f88d 4001 	strb.w	r4, [sp, #1]
    writetospi(cnt,header,length,buffer);
 800a074:	f000 fbf8 	bl	800a868 <writetospi>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800a078:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <dwt_setrxtimeout+0x84>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	6902      	ldr	r2, [r0, #16]
        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800a07e:	f045 0510 	orr.w	r5, r5, #16
    writetospi(cnt,header,length,buffer);
 800a082:	466b      	mov	r3, sp
 800a084:	a901      	add	r1, sp, #4
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 800a086:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    }
    else
    {
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
        // AND in inverted 32bit value (1 bit clear), I know this is in high byte.
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800a08a:	6102      	str	r2, [r0, #16]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a08c:	22c4      	movs	r2, #196	; 0xc4
 800a08e:	f88d 2004 	strb.w	r2, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a092:	2002      	movs	r0, #2
 800a094:	2201      	movs	r2, #1
 800a096:	f88d 5000 	strb.w	r5, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a09a:	f88d 6005 	strb.w	r6, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a09e:	f000 fbe3 	bl	800a868 <writetospi>

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 800a0a2:	b002      	add	sp, #8
 800a0a4:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <dwt_setrxtimeout+0x84>)
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	6902      	ldr	r2, [r0, #16]
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 800a0ac:	f025 0510 	bic.w	r5, r5, #16
    writetospi(cnt,header,length,buffer);
 800a0b0:	466b      	mov	r3, sp
 800a0b2:	a901      	add	r1, sp, #4
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 800a0b4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a0b8:	e7e7      	b.n	800a08a <dwt_setrxtimeout+0x52>
 800a0ba:	bf00      	nop
 800a0bc:	200002f4 	.word	0x200002f4

0800a0c0 <dwt_setinterrupt>:
 * output parameters
 *
 * no return value
 */
void dwt_setinterrupt(uint32 bitmask, uint8 operation)
{
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	4606      	mov	r6, r0
    decaIrqStatus_t stat ;
    uint32 mask ;

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    stat = decamutexon() ;
 800a0c6:	f000 fbcb 	bl	800a860 <decamutexon>

    if(operation == 2)
 800a0ca:	2c02      	cmp	r4, #2
    stat = decamutexon() ;
 800a0cc:	4605      	mov	r5, r0
    if(operation == 2)
 800a0ce:	d012      	beq.n	800a0f6 <dwt_setinterrupt+0x36>
    {
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
    }
    else
    {
        mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read register
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	200e      	movs	r0, #14
 800a0d4:	f7ff fb1c 	bl	8009710 <dwt_read32bitoffsetreg>
        if(operation == 1)
 800a0d8:	2c01      	cmp	r4, #1
        {
            mask |= bitmask ;
 800a0da:	bf0c      	ite	eq
 800a0dc:	ea40 0206 	orreq.w	r2, r0, r6
        }
        else
        {
            mask &= ~bitmask ; // Clear the bit
 800a0e0:	ea20 0206 	bicne.w	r2, r0, r6
        }
        dwt_write32bitreg(SYS_MASK_ID, mask) ; // New value
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	200e      	movs	r0, #14
 800a0e8:	f7ff fb9a 	bl	8009820 <dwt_write32bitoffsetreg>
    }

    decamutexoff(stat) ;
 800a0ec:	4628      	mov	r0, r5
}
 800a0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    decamutexoff(stat) ;
 800a0f2:	f000 bbb7 	b.w	800a864 <decamutexoff>
        dwt_write32bitreg(SYS_MASK_ID, bitmask) ; // New value
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	200e      	movs	r0, #14
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	f7ff fb90 	bl	8009820 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 800a100:	4628      	mov	r0, r5
}
 800a102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    decamutexoff(stat) ;
 800a106:	f000 bbad 	b.w	800a864 <decamutexoff>
 800a10a:	bf00      	nop

0800a10c <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800a10c:	b530      	push	{r4, r5, lr}
 800a10e:	b083      	sub	sp, #12
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a110:	2403      	movs	r4, #3
 800a112:	22e0      	movs	r2, #224	; 0xe0
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a114:	25f6      	movs	r5, #246	; 0xf6
    writetospi(cnt,header,length,buffer);
 800a116:	eb0d 0304 	add.w	r3, sp, r4
 800a11a:	f88d 2003 	strb.w	r2, [sp, #3]
 800a11e:	a901      	add	r1, sp, #4
 800a120:	2201      	movs	r2, #1
 800a122:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a124:	f88d 5004 	strb.w	r5, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a128:	f88d 4005 	strb.w	r4, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a12c:	f000 fb9c 	bl	800a868 <writetospi>
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800a130:	22f0      	movs	r2, #240	; 0xf0
 800a132:	f88d 2003 	strb.w	r2, [sp, #3]
    writetospi(cnt,header,length,buffer);
 800a136:	eb0d 0304 	add.w	r3, sp, r4
 800a13a:	a901      	add	r1, sp, #4
 800a13c:	2201      	movs	r2, #1
 800a13e:	2002      	movs	r0, #2
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a140:	f88d 5004 	strb.w	r5, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a144:	f88d 4005 	strb.w	r4, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a148:	f000 fb8e 	bl	800a868 <writetospi>
}
 800a14c:	b003      	add	sp, #12
 800a14e:	bd30      	pop	{r4, r5, pc}

0800a150 <dwt_isr>:
{
 800a150:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 800a152:	4e55      	ldr	r6, [pc, #340]	; (800a2a8 <dwt_isr+0x158>)
{
 800a154:	b082      	sub	sp, #8
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 800a156:	2100      	movs	r1, #0
 800a158:	200f      	movs	r0, #15
 800a15a:	6835      	ldr	r5, [r6, #0]
 800a15c:	f7ff fad8 	bl	8009710 <dwt_read32bitoffsetreg>
 800a160:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 800a162:	0445      	lsls	r5, r0, #17
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 800a164:	4604      	mov	r4, r0
    if(status & SYS_STATUS_RXFCG)
 800a166:	d409      	bmi.n	800a17c <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
 800a168:	0622      	lsls	r2, r4, #24
 800a16a:	d44c      	bmi.n	800a206 <dwt_isr+0xb6>
    if(status & SYS_STATUS_ALL_RX_TO)
 800a16c:	f414 1f08 	tst.w	r4, #2228224	; 0x220000
 800a170:	d160      	bne.n	800a234 <dwt_isr+0xe4>
    if(status & SYS_STATUS_ALL_RX_ERR)
 800a172:	4a4e      	ldr	r2, [pc, #312]	; (800a2ac <dwt_isr+0x15c>)
 800a174:	4214      	tst	r4, r2
 800a176:	d173      	bne.n	800a260 <dwt_isr+0x110>
}
 800a178:	b002      	add	sp, #8
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 800a17c:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 800a180:	2100      	movs	r1, #0
 800a182:	200f      	movs	r0, #15
 800a184:	f7ff fb4c 	bl	8009820 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 800a188:	6833      	ldr	r3, [r6, #0]
 800a18a:	2100      	movs	r1, #0
 800a18c:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 800a190:	2010      	movs	r0, #16
 800a192:	f7ff faed 	bl	8009770 <dwt_read16bitoffsetreg>
        if(pdw1000local->longFrames == 0)
 800a196:	6833      	ldr	r3, [r6, #0]
 800a198:	7a9a      	ldrb	r2, [r3, #10]
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	d075      	beq.n	800a28a <dwt_isr+0x13a>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 800a19e:	f3c0 0209 	ubfx	r2, r0, #0, #10
        if(finfo16 & RX_FINFO_RNG)
 800a1a2:	0400      	lsls	r0, r0, #16
        pdw1000local->cbData.datalength = len;
 800a1a4:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 800a1a6:	d505      	bpl.n	800a1b4 <dwt_isr+0x64>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 800a1a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a1ac:	f042 0201 	orr.w	r2, r2, #1
 800a1b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a1b4:	2211      	movs	r2, #17
 800a1b6:	f88d 2004 	strb.w	r2, [sp, #4]
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800a1ba:	a901      	add	r1, sp, #4
 800a1bc:	3322      	adds	r3, #34	; 0x22
 800a1be:	2202      	movs	r2, #2
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	f000 fb6b 	bl	800a89c <readfromspi>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 800a1c6:	0721      	lsls	r1, r4, #28
 800a1c8:	6830      	ldr	r0, [r6, #0]
 800a1ca:	d504      	bpl.n	800a1d6 <dwt_isr+0x86>
 800a1cc:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
 800a1d0:	f011 0520 	ands.w	r5, r1, #32
 800a1d4:	d05c      	beq.n	800a290 <dwt_isr+0x140>
        if(pdw1000local->cbRxOk != NULL)
 800a1d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a1d8:	b113      	cbz	r3, 800a1e0 <dwt_isr+0x90>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 800a1da:	301c      	adds	r0, #28
 800a1dc:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 800a1de:	6830      	ldr	r0, [r6, #0]
 800a1e0:	7d03      	ldrb	r3, [r0, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0c0      	beq.n	800a168 <dwt_isr+0x18>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a1e6:	23cd      	movs	r3, #205	; 0xcd
 800a1e8:	f88d 3004 	strb.w	r3, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a1f4:	a901      	add	r1, sp, #4
 800a1f6:	446b      	add	r3, sp
 800a1f8:	2002      	movs	r0, #2
 800a1fa:	f88d 2003 	strb.w	r2, [sp, #3]
 800a1fe:	f000 fb33 	bl	800a868 <writetospi>
    if(status & SYS_STATUS_TXFRS)
 800a202:	0622      	lsls	r2, r4, #24
 800a204:	d5b2      	bpl.n	800a16c <dwt_isr+0x1c>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 800a206:	200f      	movs	r0, #15
 800a208:	22f8      	movs	r2, #248	; 0xf8
 800a20a:	2100      	movs	r1, #0
 800a20c:	f7ff fb08 	bl	8009820 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 800a210:	0723      	lsls	r3, r4, #28
 800a212:	6830      	ldr	r0, [r6, #0]
 800a214:	d506      	bpl.n	800a224 <dwt_isr+0xd4>
 800a216:	7d43      	ldrb	r3, [r0, #21]
 800a218:	b123      	cbz	r3, 800a224 <dwt_isr+0xd4>
            dwt_forcetrxoff(); // Turn the RX off
 800a21a:	f7ff fe85 	bl	8009f28 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 800a21e:	f7ff ff75 	bl	800a10c <dwt_rxreset>
        if(pdw1000local->cbTxDone != NULL)
 800a222:	6830      	ldr	r0, [r6, #0]
 800a224:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0a0      	beq.n	800a16c <dwt_isr+0x1c>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 800a22a:	301c      	adds	r0, #28
 800a22c:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_TO)
 800a22e:	f414 1f08 	tst.w	r4, #2228224	; 0x220000
 800a232:	d09e      	beq.n	800a172 <dwt_isr+0x22>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 800a234:	200f      	movs	r0, #15
 800a236:	2100      	movs	r1, #0
 800a238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a23c:	f7ff faf0 	bl	8009820 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 800a240:	6833      	ldr	r3, [r6, #0]
 800a242:	2200      	movs	r2, #0
 800a244:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 800a246:	f7ff fe6f 	bl	8009f28 <dwt_forcetrxoff>
        dwt_rxreset();
 800a24a:	f7ff ff5f 	bl	800a10c <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 800a24e:	6830      	ldr	r0, [r6, #0]
 800a250:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a252:	2b00      	cmp	r3, #0
 800a254:	d08d      	beq.n	800a172 <dwt_isr+0x22>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 800a256:	301c      	adds	r0, #28
 800a258:	4798      	blx	r3
    if(status & SYS_STATUS_ALL_RX_ERR)
 800a25a:	4a14      	ldr	r2, [pc, #80]	; (800a2ac <dwt_isr+0x15c>)
 800a25c:	4214      	tst	r4, r2
 800a25e:	d08b      	beq.n	800a178 <dwt_isr+0x28>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 800a260:	200f      	movs	r0, #15
 800a262:	2100      	movs	r1, #0
 800a264:	f7ff fadc 	bl	8009820 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 800a268:	6833      	ldr	r3, [r6, #0]
 800a26a:	2200      	movs	r2, #0
 800a26c:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 800a26e:	f7ff fe5b 	bl	8009f28 <dwt_forcetrxoff>
        dwt_rxreset();
 800a272:	f7ff ff4b 	bl	800a10c <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 800a276:	6830      	ldr	r0, [r6, #0]
 800a278:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f43f af7c 	beq.w	800a178 <dwt_isr+0x28>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 800a280:	301c      	adds	r0, #28
}
 800a282:	b002      	add	sp, #8
 800a284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 800a288:	4718      	bx	r3
            len &= RX_FINFO_RXFLEN_MASK;
 800a28a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800a28e:	e788      	b.n	800a1a2 <dwt_isr+0x52>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 800a290:	200f      	movs	r0, #15
 800a292:	2208      	movs	r2, #8
 800a294:	4629      	mov	r1, r5
 800a296:	f7ff fac3 	bl	8009820 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 800a29a:	6830      	ldr	r0, [r6, #0]
 800a29c:	69c3      	ldr	r3, [r0, #28]
            pdw1000local->wait4resp = 0;
 800a29e:	7545      	strb	r5, [r0, #21]
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 800a2a0:	f023 0308 	bic.w	r3, r3, #8
 800a2a4:	61c3      	str	r3, [r0, #28]
            pdw1000local->wait4resp = 0;
 800a2a6:	e796      	b.n	800a1d6 <dwt_isr+0x86>
 800a2a8:	200002f4 	.word	0x200002f4
 800a2ac:	24059000 	.word	0x24059000

0800a2b0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800a2b2:	2000      	movs	r0, #0
{
 800a2b4:	b083      	sub	sp, #12
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800a2b6:	f7ff fd1b 	bl	8009cf0 <_dwt_enableclocks>
    writetospi(cnt,header,length,buffer);
 800a2ba:	2202      	movs	r2, #2
    buffer[0] = regval & 0xFF;
 800a2bc:	2400      	movs	r4, #0
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a2be:	26f6      	movs	r6, #246	; 0xf6
    writetospi(cnt,header,length,buffer);
 800a2c0:	466b      	mov	r3, sp
 800a2c2:	a901      	add	r1, sp, #4
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a2c4:	2504      	movs	r5, #4
    writetospi(cnt,header,length,buffer);
 800a2c6:	4610      	mov	r0, r2
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a2c8:	f88d 5005 	strb.w	r5, [sp, #5]
    buffer[0] = regval & 0xFF;
 800a2cc:	f88d 4000 	strb.w	r4, [sp]
    buffer[1] = regval >> 8 ;
 800a2d0:	f88d 4001 	strb.w	r4, [sp, #1]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a2d4:	f88d 6004 	strb.w	r6, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a2d8:	f000 fac6 	bl	800a868 <writetospi>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a2dc:	23ac      	movs	r3, #172	; 0xac
    writetospi(cnt,header,length,buffer);
 800a2de:	eb0d 0105 	add.w	r1, sp, r5
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a2e2:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	466b      	mov	r3, sp
 800a2ea:	2001      	movs	r0, #1
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a2ec:	2502      	movs	r5, #2
    buffer[0] = regval & 0xFF;
 800a2ee:	f88d 4000 	strb.w	r4, [sp]
    buffer[1] = regval >> 8 ;
 800a2f2:	f88d 4001 	strb.w	r4, [sp, #1]
    writetospi(cnt,header,length,buffer);
 800a2f6:	f000 fab7 	bl	800a868 <writetospi>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a2fa:	2006      	movs	r0, #6
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a2fc:	27ec      	movs	r7, #236	; 0xec
    writetospi(cnt,header,length,buffer);
 800a2fe:	466b      	mov	r3, sp
 800a300:	a901      	add	r1, sp, #4
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a302:	f88d 0005 	strb.w	r0, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a306:	2201      	movs	r2, #1
 800a308:	4628      	mov	r0, r5
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a30a:	f88d 7004 	strb.w	r7, [sp, #4]
 800a30e:	f88d 4000 	strb.w	r4, [sp]
    writetospi(cnt,header,length,buffer);
 800a312:	f000 faa9 	bl	800a868 <writetospi>
 800a316:	466b      	mov	r3, sp
 800a318:	a901      	add	r1, sp, #4
 800a31a:	2201      	movs	r2, #1
 800a31c:	4628      	mov	r0, r5
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a31e:	f88d 7004 	strb.w	r7, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a322:	f88d 5005 	strb.w	r5, [sp, #5]
 800a326:	f88d 4000 	strb.w	r4, [sp]
    writetospi(cnt,header,length,buffer);
 800a32a:	f000 fa9d 	bl	800a868 <writetospi>
 800a32e:	466b      	mov	r3, sp
 800a330:	a901      	add	r1, sp, #4
 800a332:	2201      	movs	r2, #1
 800a334:	4628      	mov	r0, r5
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a336:	f88d 7004 	strb.w	r7, [sp, #4]
 800a33a:	f88d 5000 	strb.w	r5, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a33e:	f88d 5005 	strb.w	r5, [sp, #5]
 800a342:	2703      	movs	r7, #3
    writetospi(cnt,header,length,buffer);
 800a344:	f000 fa90 	bl	800a868 <writetospi>
 800a348:	466b      	mov	r3, sp
 800a34a:	a901      	add	r1, sp, #4
 800a34c:	2201      	movs	r2, #1
 800a34e:	4628      	mov	r0, r5
 800a350:	f88d 4000 	strb.w	r4, [sp]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a354:	f88d 6004 	strb.w	r6, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a358:	f88d 7005 	strb.w	r7, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a35c:	f000 fa84 	bl	800a868 <writetospi>
    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800a360:	2001      	movs	r0, #1
 800a362:	f000 fa75 	bl	800a850 <deca_sleep>
    writetospi(cnt,header,length,buffer);
 800a366:	466b      	mov	r3, sp
 800a368:	a901      	add	r1, sp, #4
 800a36a:	4628      	mov	r0, r5
 800a36c:	2201      	movs	r2, #1
 800a36e:	25f0      	movs	r5, #240	; 0xf0
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a370:	f88d 6004 	strb.w	r6, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a374:	f88d 7005 	strb.w	r7, [sp, #5]
 800a378:	f88d 5000 	strb.w	r5, [sp]
    writetospi(cnt,header,length,buffer);
 800a37c:	f000 fa74 	bl	800a868 <writetospi>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);

    pdw1000local->wait4resp = 0;
 800a380:	4b02      	ldr	r3, [pc, #8]	; (800a38c <dwt_softreset+0xdc>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	755c      	strb	r4, [r3, #21]
}
 800a386:	b003      	add	sp, #12
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200002f4 	.word	0x200002f4

0800a390 <dwt_initialise>:
{
 800a390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800a394:	4da0      	ldr	r5, [pc, #640]	; (800a618 <dwt_initialise+0x288>)
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	2100      	movs	r1, #0
    pdw1000local->cbRxOk = NULL;
 800a39a:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
    pdw1000local->cbRxErr = NULL;
 800a39e:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800a3a2:	6159      	str	r1, [r3, #20]
{
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	4604      	mov	r4, r0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	f7ff f9b1 	bl	8009710 <dwt_read32bitoffsetreg>
    if (DWT_DEVICE_ID != device_id) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 800a3ae:	4b9b      	ldr	r3, [pc, #620]	; (800a61c <dwt_initialise+0x28c>)
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	f040 812e 	bne.w	800a612 <dwt_initialise+0x282>
    printk("device_id: %08x\n", device_id);
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	4899      	ldr	r0, [pc, #612]	; (800a620 <dwt_initialise+0x290>)
 800a3ba:	f7f7 ff7b 	bl	80022b4 <printk>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800a3be:	f014 0802 	ands.w	r8, r4, #2
 800a3c2:	f000 808c 	beq.w	800a4de <dwt_initialise+0x14e>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800a3c6:	f014 00f8 	ands.w	r0, r4, #248	; 0xf8
 800a3ca:	f000 8101 	beq.w	800a5d0 <dwt_initialise+0x240>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800a3ce:	2304      	movs	r3, #4
    writetospi(cnt,header,length,buffer);
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f88d 3000 	strb.w	r3, [sp]
 800a3d6:	466f      	mov	r7, sp
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a3d8:	23a4      	movs	r3, #164	; 0xa4
    writetospi(cnt,header,length,buffer);
 800a3da:	ae01      	add	r6, sp, #4
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a3dc:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f000 fa3f 	bl	800a868 <writetospi>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800a3ea:	2130      	movs	r1, #48	; 0x30
 800a3ec:	2028      	movs	r0, #40	; 0x28
 800a3ee:	f7ff f98f 	bl	8009710 <dwt_read32bitoffsetreg>
 800a3f2:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
 800a3f6:	d004      	beq.n	800a402 <dwt_initialise+0x72>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800a3f8:	682a      	ldr	r2, [r5, #0]
 800a3fa:	8ad3      	ldrh	r3, [r2, #22]
 800a3fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a400:	82d3      	strh	r3, [r2, #22]
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800a402:	f004 030a 	and.w	r3, r4, #10
 800a406:	2b0a      	cmp	r3, #10
 800a408:	f000 80f9 	beq.w	800a5fe <dwt_initialise+0x26e>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800a40c:	f8d5 9000 	ldr.w	r9, [r5]
 800a410:	2300      	movs	r3, #0
 800a412:	f889 300b 	strb.w	r3, [r9, #11]
    if(DWT_READ_OTP_PID & config)
 800a416:	f014 0310 	ands.w	r3, r4, #16
 800a41a:	f040 8099 	bne.w	800a550 <dwt_initialise+0x1c0>
        pdw1000local->partID = 0;
 800a41e:	f8c9 3000 	str.w	r3, [r9]
    if(DWT_READ_OTP_LID & config)
 800a422:	f014 0320 	ands.w	r3, r4, #32
 800a426:	f040 809e 	bne.w	800a566 <dwt_initialise+0x1d6>
        pdw1000local->lotID = 0;
 800a42a:	f8c9 3004 	str.w	r3, [r9, #4]
    if(DWT_READ_OTP_BAT & config)
 800a42e:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800a432:	f040 80a1 	bne.w	800a578 <dwt_initialise+0x1e8>
        pdw1000local->vBatP = 0;
 800a436:	682a      	ldr	r2, [r5, #0]
 800a438:	7213      	strb	r3, [r2, #8]
    if(DWT_READ_OTP_TMP & config)
 800a43a:	f014 0380 	ands.w	r3, r4, #128	; 0x80
 800a43e:	f040 80a4 	bne.w	800a58a <dwt_initialise+0x1fa>
        pdw1000local->tempP = 0;
 800a442:	682a      	ldr	r2, [r5, #0]
 800a444:	7253      	strb	r3, [r2, #9]
    if(!(DWT_DW_WAKE_UP & config))
 800a446:	f1b8 0f00 	cmp.w	r8, #0
 800a44a:	f040 80a7 	bne.w	800a59c <dwt_initialise+0x20c>
        if(DWT_LOADUCODE & config)
 800a44e:	07e1      	lsls	r1, r4, #31
 800a450:	f140 80ad 	bpl.w	800a5ae <dwt_initialise+0x21e>
    _dwt_enableclocks(FORCE_LDE);
 800a454:	200e      	movs	r0, #14
 800a456:	f7ff fc4b 	bl	8009cf0 <_dwt_enableclocks>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a45a:	24ed      	movs	r4, #237	; 0xed
    writetospi(cnt,header,length,buffer);
 800a45c:	2202      	movs	r2, #2
    buffer[1] = regval >> 8 ;
 800a45e:	2180      	movs	r1, #128	; 0x80
    writetospi(cnt,header,length,buffer);
 800a460:	463b      	mov	r3, r7
 800a462:	4610      	mov	r0, r2
    buffer[1] = regval >> 8 ;
 800a464:	f88d 1001 	strb.w	r1, [sp, #1]
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a468:	f88d 4004 	strb.w	r4, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a46c:	4631      	mov	r1, r6
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a46e:	2406      	movs	r4, #6
    buffer[0] = regval & 0xFF;
 800a470:	f88d 8000 	strb.w	r8, [sp]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a474:	f88d 4005 	strb.w	r4, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a478:	f000 f9f6 	bl	800a868 <writetospi>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800a47c:	2001      	movs	r0, #1
 800a47e:	f000 f9e7 	bl	800a850 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800a482:	2001      	movs	r0, #1
 800a484:	f7ff fc34 	bl	8009cf0 <_dwt_enableclocks>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800a488:	682a      	ldr	r2, [r5, #0]
 800a48a:	8ad3      	ldrh	r3, [r2, #22]
 800a48c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a490:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800a492:	2001      	movs	r0, #1
 800a494:	f7ff fc2c 	bl	8009cf0 <_dwt_enableclocks>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a498:	22ec      	movs	r2, #236	; 0xec
 800a49a:	f88d 2004 	strb.w	r2, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a49e:	220a      	movs	r2, #10
 800a4a0:	2400      	movs	r4, #0
    writetospi(cnt,header,length,buffer);
 800a4a2:	463b      	mov	r3, r7
 800a4a4:	4631      	mov	r1, r6
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a4a6:	f88d 2005 	strb.w	r2, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a4aa:	2002      	movs	r0, #2
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f88d 4000 	strb.w	r4, [sp]
 800a4b2:	f000 f9d9 	bl	800a868 <writetospi>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	2004      	movs	r0, #4
 800a4ba:	682e      	ldr	r6, [r5, #0]
 800a4bc:	f7ff f928 	bl	8009710 <dwt_read32bitoffsetreg>
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800a4c0:	682d      	ldr	r5, [r5, #0]
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800a4c2:	6130      	str	r0, [r6, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800a4c4:	8a6b      	ldrh	r3, [r5, #18]
 800a4c6:	f003 0303 	and.w	r3, r3, #3
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800a4ca:	4621      	mov	r1, r4
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800a4cc:	72ab      	strb	r3, [r5, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800a4ce:	2008      	movs	r0, #8
 800a4d0:	f7ff f91e 	bl	8009710 <dwt_read32bitoffsetreg>
 800a4d4:	60e8      	str	r0, [r5, #12]
    return DWT_SUCCESS ;
 800a4d6:	4620      	mov	r0, r4
} // end dwt_initialise()
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800a4de:	f7ff fee7 	bl	800a2b0 <dwt_softreset>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800a4e2:	f04f 0904 	mov.w	r9, #4
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	f7ff fc02 	bl	8009cf0 <_dwt_enableclocks>
    writetospi(cnt,header,length,buffer);
 800a4ec:	466f      	mov	r7, sp
 800a4ee:	2201      	movs	r2, #1
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a4f0:	23a4      	movs	r3, #164	; 0xa4
    writetospi(cnt,header,length,buffer);
 800a4f2:	eb0d 0609 	add.w	r6, sp, r9
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800a4f6:	f88d 3004 	strb.w	r3, [sp, #4]
    writetospi(cnt,header,length,buffer);
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	4610      	mov	r0, r2
 800a500:	f88d 9000 	strb.w	r9, [sp]
 800a504:	f000 f9b0 	bl	800a868 <writetospi>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800a508:	4648      	mov	r0, r9
 800a50a:	f7ff f9bb 	bl	8009884 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 800a50e:	b2c0      	uxtb	r0, r0
 800a510:	2800      	cmp	r0, #0
 800a512:	d160      	bne.n	800a5d6 <dwt_initialise+0x246>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800a514:	201e      	movs	r0, #30
 800a516:	f7ff f9b5 	bl	8009884 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800a520:	72da      	strb	r2, [r3, #11]
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800a522:	06c3      	lsls	r3, r0, #27
 800a524:	d14f      	bne.n	800a5c6 <dwt_initialise+0x236>
 800a526:	2070      	movs	r0, #112	; 0x70
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a528:	23eb      	movs	r3, #235	; 0xeb
 800a52a:	f88d 3004 	strb.w	r3, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a52e:	230e      	movs	r3, #14
 800a530:	f88d 0000 	strb.w	r0, [sp]
 800a534:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a538:	2201      	movs	r2, #1
 800a53a:	463b      	mov	r3, r7
 800a53c:	4631      	mov	r1, r6
 800a53e:	2002      	movs	r0, #2
 800a540:	f000 f992 	bl	800a868 <writetospi>
    if(DWT_READ_OTP_PID & config)
 800a544:	f014 0310 	ands.w	r3, r4, #16
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800a548:	f8d5 9000 	ldr.w	r9, [r5]
    if(DWT_READ_OTP_PID & config)
 800a54c:	f43f af67 	beq.w	800a41e <dwt_initialise+0x8e>
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800a550:	2006      	movs	r0, #6
 800a552:	f7ff f997 	bl	8009884 <_dwt_otpread>
    if(DWT_READ_OTP_LID & config)
 800a556:	f014 0320 	ands.w	r3, r4, #32
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800a55a:	f8c9 0000 	str.w	r0, [r9]
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800a55e:	f8d5 9000 	ldr.w	r9, [r5]
    if(DWT_READ_OTP_LID & config)
 800a562:	f43f af62 	beq.w	800a42a <dwt_initialise+0x9a>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800a566:	2007      	movs	r0, #7
 800a568:	f7ff f98c 	bl	8009884 <_dwt_otpread>
    if(DWT_READ_OTP_BAT & config)
 800a56c:	f014 0340 	ands.w	r3, r4, #64	; 0x40
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800a570:	f8c9 0004 	str.w	r0, [r9, #4]
    if(DWT_READ_OTP_BAT & config)
 800a574:	f43f af5f 	beq.w	800a436 <dwt_initialise+0xa6>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800a578:	2008      	movs	r0, #8
 800a57a:	f7ff f983 	bl	8009884 <_dwt_otpread>
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	7218      	strb	r0, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 800a582:	f014 0380 	ands.w	r3, r4, #128	; 0x80
 800a586:	f43f af5c 	beq.w	800a442 <dwt_initialise+0xb2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800a58a:	2009      	movs	r0, #9
 800a58c:	f7ff f97a 	bl	8009884 <_dwt_otpread>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	7258      	strb	r0, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 800a594:	f1b8 0f00 	cmp.w	r8, #0
 800a598:	f43f af59 	beq.w	800a44e <dwt_initialise+0xbe>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800a59c:	0762      	lsls	r2, r4, #29
 800a59e:	f53f af78 	bmi.w	800a492 <dwt_initialise+0x102>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800a5a2:	682a      	ldr	r2, [r5, #0]
 800a5a4:	8ad3      	ldrh	r3, [r2, #22]
 800a5a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a5aa:	82d3      	strh	r3, [r2, #22]
 800a5ac:	e771      	b.n	800a492 <dwt_initialise+0x102>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800a5ae:	2105      	movs	r1, #5
 800a5b0:	2036      	movs	r0, #54	; 0x36
 800a5b2:	f7ff f8dd 	bl	8009770 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 800a5b6:	f420 7200 	bic.w	r2, r0, #512	; 0x200
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800a5ba:	b292      	uxth	r2, r2
 800a5bc:	2105      	movs	r1, #5
 800a5be:	2036      	movs	r0, #54	; 0x36
 800a5c0:	f7ff f902 	bl	80097c8 <dwt_write16bitoffsetreg>
 800a5c4:	e765      	b.n	800a492 <dwt_initialise+0x102>
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800a5c6:	f000 001f 	and.w	r0, r0, #31
 800a5ca:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 800a5ce:	e7ab      	b.n	800a528 <dwt_initialise+0x198>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800a5d0:	f7ff fb8e 	bl	8009cf0 <_dwt_enableclocks>
 800a5d4:	e6fb      	b.n	800a3ce <dwt_initialise+0x3e>
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800a5d6:	23ed      	movs	r3, #237	; 0xed
 800a5d8:	f88d 3004 	strb.w	r3, [sp, #4]
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800a5dc:	2312      	movs	r3, #18
 800a5de:	2002      	movs	r0, #2
 800a5e0:	f88d 3005 	strb.w	r3, [sp, #5]
    writetospi(cnt,header,length,buffer);
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	f88d 0000 	strb.w	r0, [sp]
 800a5ee:	f000 f93b 	bl	800a868 <writetospi>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800a5f2:	682a      	ldr	r2, [r5, #0]
 800a5f4:	8ad3      	ldrh	r3, [r2, #22]
 800a5f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5fa:	82d3      	strh	r3, [r2, #22]
 800a5fc:	e78a      	b.n	800a514 <dwt_initialise+0x184>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800a5fe:	201e      	movs	r0, #30
 800a600:	f7ff f940 	bl	8009884 <_dwt_otpread>
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800a604:	f8d5 9000 	ldr.w	r9, [r5]
 800a608:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a60c:	f889 000b 	strb.w	r0, [r9, #11]
    if(!(DWT_DW_WAKE_UP & config))
 800a610:	e701      	b.n	800a416 <dwt_initialise+0x86>
        return DWT_ERROR ;
 800a612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a616:	e75f      	b.n	800a4d8 <dwt_initialise+0x148>
 800a618:	200002f4 	.word	0x200002f4
 800a61c:	deca0130 	.word	0xdeca0130
 800a620:	080123c8 	.word	0x080123c8

0800a624 <dwt_irq_work_handler>:
    gpio_pin_interrupt_configure(ctx->irq_gpio, cfg->irq_pin, flags);
}

static void dwt_irq_work_handler(struct k_work *item)
{
    dwt_isr();
 800a624:	f7ff bd94 	b.w	800a150 <dwt_isr>

0800a628 <dwt_gpio_callback>:
    k_work_submit(&ctx->irq_cb_work);
 800a628:	f101 000c 	add.w	r0, r1, #12
 800a62c:	f003 ba72 	b.w	800db14 <k_work_submit>

0800a630 <dw1000_init>:

    return 0;
}

static int dw1000_init(const struct device *dev)
{
 800a630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct dw1000_dev_data *ctx = dev->data;
 800a634:	6904      	ldr	r4, [r0, #16]
    const struct dw1000_dev_config *cfg = dev->config;
 800a636:	6845      	ldr	r5, [r0, #4]

    LOG_INF("Initialize DW1000 Transceiver");

    /* SPI config */
    ctx->spi_cfg_slow.operation = SPI_WORD_SET(8);
    ctx->spi_cfg_slow.frequency = DWT_SPI_SLOW_FREQ;
 800a638:	4f82      	ldr	r7, [pc, #520]	; (800a844 <dw1000_init+0x214>)
 800a63a:	61e7      	str	r7, [r4, #28]
    ctx->spi_cfg_slow.operation = SPI_WORD_SET(8);
 800a63c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a640:	8422      	strh	r2, [r4, #32]
    ctx->spi_cfg_slow.slave = cfg->spi_slave;
 800a642:	f895 3020 	ldrb.w	r3, [r5, #32]

    ctx->spi_cfg_fast.operation = SPI_WORD_SET(8);
 800a646:	85a2      	strh	r2, [r4, #44]	; 0x2c
    ctx->spi_cfg_fast.frequency = cfg->spi_freq;
 800a648:	69ea      	ldr	r2, [r5, #28]
    ctx->spi_cfg_slow.slave = cfg->spi_slave;
 800a64a:	8463      	strh	r3, [r4, #34]	; 0x22
{
 800a64c:	4606      	mov	r6, r0
    ctx->spi_cfg_fast.frequency = cfg->spi_freq;
 800a64e:	62a2      	str	r2, [r4, #40]	; 0x28
    ctx->spi_cfg_fast.slave = cfg->spi_slave;

    ctx->spi = device_get_binding((char *)cfg->spi_port);
 800a650:	6928      	ldr	r0, [r5, #16]
    ctx->spi_cfg_fast.slave = cfg->spi_slave;
 800a652:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800a654:	f002 fcae 	bl	800cfb4 <z_impl_device_get_binding>
    ctx->spi = device_get_binding((char *)cfg->spi_port);
 800a658:	60a0      	str	r0, [r4, #8]
    if (!ctx->spi) {
 800a65a:	2800      	cmp	r0, #0
 800a65c:	f000 80eb 	beq.w	800a836 <dw1000_init+0x206>
        return -EINVAL;
    }

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
    ctx->spi_cs.gpio_dev =
		device_get_binding((char *)cfg->spi_cs_port);
 800a660:	69a8      	ldr	r0, [r5, #24]
 800a662:	f002 fca7 	bl	800cfb4 <z_impl_device_get_binding>
    ctx->spi_cs.gpio_dev =
 800a666:	60e0      	str	r0, [r4, #12]
	if (!ctx->spi_cs.gpio_dev) {
 800a668:	2800      	cmp	r0, #0
 800a66a:	f000 80e4 	beq.w	800a836 <dw1000_init+0x206>
		LOG_ERR("SPI CS port %s not found", cfg->spi_cs_port);
		return -EINVAL;
	}

	ctx->spi_cs.gpio_pin = cfg->spi_cs_pin;
 800a66e:	7d2b      	ldrb	r3, [r5, #20]
 800a670:	7423      	strb	r3, [r4, #16]
	ctx->spi_cs.gpio_dt_flags = cfg->spi_cs_flags;
 800a672:	7d6b      	ldrb	r3, [r5, #21]
 800a674:	7463      	strb	r3, [r4, #17]
	ctx->spi_cfg_slow.cs = &ctx->spi_cs;
 800a676:	f104 030c 	add.w	r3, r4, #12
 800a67a:	6263      	str	r3, [r4, #36]	; 0x24
	ctx->spi_cfg_fast.cs = &ctx->spi_cs;
 800a67c:	6323      	str	r3, [r4, #48]	; 0x30
    ctx->spi_cfg_slow.frequency = freq;
 800a67e:	4623      	mov	r3, r4
#endif

    dwt_set_spi_slow(ctx, DWT_SPI_SLOW_FREQ);

    /* Initialize IRQ GPIO */
    ctx->irq_gpio = device_get_binding((char *)cfg->irq_port);
 800a680:	6828      	ldr	r0, [r5, #0]
    ctx->spi_cfg_slow.frequency = freq;
 800a682:	f843 7f1c 	str.w	r7, [r3, #28]!
    ctx->spi_cfg = &ctx->spi_cfg_slow;
 800a686:	61a3      	str	r3, [r4, #24]
 800a688:	f002 fc94 	bl	800cfb4 <z_impl_device_get_binding>
    ctx->irq_gpio = device_get_binding((char *)cfg->irq_port);
 800a68c:	6020      	str	r0, [r4, #0]
    if (!ctx->irq_gpio) {
 800a68e:	2800      	cmp	r0, #0
 800a690:	f000 80d1 	beq.w	800a836 <dw1000_init+0x206>
        LOG_ERR("GPIO port %s not found", cfg->irq_port);
        return -EINVAL;
    }

    if (gpio_pin_configure(ctx->irq_gpio, cfg->irq_pin,
                           GPIO_INPUT | cfg->irq_flags)) {
 800a694:	f895 c005 	ldrb.w	ip, [r5, #5]
    if (gpio_pin_configure(ctx->irq_gpio, cfg->irq_pin,
 800a698:	7929      	ldrb	r1, [r5, #4]
 800a69a:	f44c 7880 	orr.w	r8, ip, #256	; 0x100
	struct gpio_driver_data *data =
 800a69e:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
 800a6a0:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	408b      	lsls	r3, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a6aa:	f01c 0f01 	tst.w	ip, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a6ae:	bf14      	ite	ne
 800a6b0:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a6b2:	ea22 0303 	biceq.w	r3, r2, r3
 800a6b6:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	f8de 3000 	ldr.w	r3, [lr]
 800a6be:	4798      	blx	r3
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f040 80b8 	bne.w	800a836 <dw1000_init+0x206>
        LOG_ERR("Unable to configure GPIO pin %u", cfg->irq_pin);
        return -EINVAL;
    }

    gpio_init_callback(&(ctx->gpio_cb), dwt_gpio_callback,
                       BIT(cfg->irq_pin));
 800a6c6:	792b      	ldrb	r3, [r5, #4]

    if (gpio_add_callback(ctx->irq_gpio, &(ctx->gpio_cb))) {
 800a6c8:	6820      	ldr	r0, [r4, #0]
	callback->handler = handler;
 800a6ca:	4a5f      	ldr	r2, [pc, #380]	; (800a848 <dw1000_init+0x218>)
                       BIT(cfg->irq_pin));
 800a6cc:	2701      	movs	r7, #1
 800a6ce:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
 800a6d2:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (api->manage_callback == NULL) {
 800a6d4:	6883      	ldr	r3, [r0, #8]
 800a6d6:	69db      	ldr	r3, [r3, #28]
	callback->handler = handler;
 800a6d8:	63a2      	str	r2, [r4, #56]	; 0x38
    gpio_init_callback(&(ctx->gpio_cb), dwt_gpio_callback,
 800a6da:	f104 0134 	add.w	r1, r4, #52	; 0x34
	if (api->manage_callback == NULL) {
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 80a9 	beq.w	800a836 <dw1000_init+0x206>
	return api->manage_callback(port, callback, true);
 800a6e4:	463a      	mov	r2, r7
 800a6e6:	4798      	blx	r3
    if (gpio_add_callback(ctx->irq_gpio, &(ctx->gpio_cb))) {
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	f040 80a4 	bne.w	800a836 <dw1000_init+0x206>
        LOG_ERR("Failed to add IRQ callback");
        return -EINVAL;
    }

    /* Initialize RESET GPIO */
    ctx->rst_gpio = device_get_binding(cfg->rst_port);
 800a6ee:	68a8      	ldr	r0, [r5, #8]
 800a6f0:	f002 fc60 	bl	800cfb4 <z_impl_device_get_binding>
 800a6f4:	6060      	str	r0, [r4, #4]
    if (ctx->rst_gpio == NULL) {
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f000 80a0 	beq.w	800a83c <dw1000_init+0x20c>
        LOG_ERR("Could not get GPIO port for RESET");
        return -EIO;
    }

    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
                           GPIO_INPUT | cfg->rst_flags)) {
 800a6fc:	f895 c00d 	ldrb.w	ip, [r5, #13]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800a700:	7b29      	ldrb	r1, [r5, #12]
 800a702:	f44c 7880 	orr.w	r8, ip, #256	; 0x100
	struct gpio_driver_data *data =
 800a706:	6903      	ldr	r3, [r0, #16]
	const struct gpio_driver_api *api =
 800a708:	f8d0 e008 	ldr.w	lr, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a710:	f01c 0f01 	tst.w	ip, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a714:	bf14      	ite	ne
 800a716:	4317      	orrne	r7, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a718:	ea22 0707 	biceq.w	r7, r2, r7
 800a71c:	601f      	str	r7, [r3, #0]
	return api->pin_configure(port, pin, flags);
 800a71e:	4642      	mov	r2, r8
 800a720:	f8de 3000 	ldr.w	r3, [lr]
 800a724:	4798      	blx	r3
 800a726:	4680      	mov	r8, r0
 800a728:	2800      	cmp	r0, #0
 800a72a:	f040 8084 	bne.w	800a836 <dw1000_init+0x206>
#endif
#if defined(CONFIG_DW1000_STARTUP_READ_OTP_TMP)
    init_cfg |= DWT_READ_OTP_TMP;
#endif

    dwt_hw_reset(dev);
 800a72e:	6877      	ldr	r7, [r6, #4]
 800a730:	f8d6 9010 	ldr.w	r9, [r6, #16]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800a734:	7b39      	ldrb	r1, [r7, #12]
 800a736:	f8d9 0004 	ldr.w	r0, [r9, #4]
                           GPIO_OUTPUT_ACTIVE | cfg->rst_flags)) {
 800a73a:	7b7b      	ldrb	r3, [r7, #13]
	struct gpio_driver_data *data =
 800a73c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 800a740:	f8d0 a008 	ldr.w	sl, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a744:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800a748:	07da      	lsls	r2, r3, #31
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800a74a:	bf54      	ite	pl
 800a74c:	f443 53d0 	orrpl.w	r3, r3, #6656	; 0x1a00
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800a750:	f483 53b0 	eormi.w	r3, r3, #5632	; 0x1600
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a754:	f04f 0b01 	mov.w	fp, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800a758:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a75c:	fa0b fb01 	lsl.w	fp, fp, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a760:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a762:	bf4c      	ite	mi
 800a764:	ea4b 030c 	orrmi.w	r3, fp, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a768:	ea2c 030b 	bicpl.w	r3, ip, fp
 800a76c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
 800a770:	f8da 3000 	ldr.w	r3, [sl]
 800a774:	4798      	blx	r3
 800a776:	bb58      	cbnz	r0, 800a7d0 <dw1000_init+0x1a0>
	return z_impl_k_sleep(timeout);
 800a778:	2100      	movs	r1, #0
 800a77a:	200a      	movs	r0, #10
 800a77c:	f003 feae 	bl	800e4dc <z_impl_k_sleep>
    gpio_pin_set(ctx->rst_gpio, cfg->rst_pin, 0);
 800a780:	f8d9 0004 	ldr.w	r0, [r9, #4]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800a784:	7b3a      	ldrb	r2, [r7, #12]
 800a786:	6903      	ldr	r3, [r0, #16]
 800a788:	2101      	movs	r1, #1
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4091      	lsls	r1, r2
 800a78e:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
 800a790:	6883      	ldr	r3, [r0, #8]
 800a792:	bf14      	ite	ne
 800a794:	68db      	ldrne	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800a796:	691b      	ldreq	r3, [r3, #16]
 800a798:	4798      	blx	r3
 800a79a:	2100      	movs	r1, #0
 800a79c:	2032      	movs	r0, #50	; 0x32
 800a79e:	f003 fe9d 	bl	800e4dc <z_impl_k_sleep>
                           GPIO_INPUT | cfg->rst_flags)) {
 800a7a2:	7b7b      	ldrb	r3, [r7, #13]
    if (gpio_pin_configure(ctx->rst_gpio, cfg->rst_pin,
 800a7a4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a7a8:	7b39      	ldrb	r1, [r7, #12]
 800a7aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a7ae:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
 800a7b0:	f8d0 e008 	ldr.w	lr, [r0, #8]
	struct gpio_driver_data *data =
 800a7b4:	f8d0 c010 	ldr.w	ip, [r0, #16]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a7b8:	d437      	bmi.n	800a82a <dw1000_init+0x1fa>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a7ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a7be:	2701      	movs	r7, #1
 800a7c0:	408f      	lsls	r7, r1
 800a7c2:	ea23 0307 	bic.w	r3, r3, r7
 800a7c6:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
 800a7ca:	f8de 3000 	ldr.w	r3, [lr]
 800a7ce:	4798      	blx	r3

    if (dwt_initialise(init_cfg) == DWT_ERROR) {
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f7ff fddd 	bl	800a390 <dwt_initialise>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d030      	beq.n	800a83c <dw1000_init+0x20c>
    ctx->spi_cfg = &ctx->spi_cfg_fast;
 800a7da:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800a7de:	61a3      	str	r3, [r4, #24]
        LOG_ERR("Failed to initialize DW1000");
        return -EIO;
    }

    dwt_set_spi_fast(ctx);
    dwt_configure(&ctx->phy_cfg);
 800a7e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7e4:	f7ff f8b2 	bl	800994c <dwt_configure>
    dwt_setrxantennadelay(cfg->rx_ant_delay);
 800a7e8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800a7ea:	f7fe fe91 	bl	8009510 <dwt_setrxantennadelay>
    dwt_settxantennadelay(cfg->tx_ant_delay);
 800a7ee:	8c68      	ldrh	r0, [r5, #34]	; 0x22
 800a7f0:	f7fe feaa 	bl	8009548 <dwt_settxantennadelay>

    k_work_init(&ctx->irq_cb_work, dwt_irq_work_handler);
 800a7f4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800a7f8:	4914      	ldr	r1, [pc, #80]	; (800a84c <dw1000_init+0x21c>)
 800a7fa:	f003 f961 	bl	800dac0 <k_work_init>
    gpio_pin_interrupt_configure(ctx->irq_gpio, cfg->irq_pin, flags);
 800a7fe:	6932      	ldr	r2, [r6, #16]
 800a800:	6873      	ldr	r3, [r6, #4]
 800a802:	6810      	ldr	r0, [r2, #0]
 800a804:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_api *api =
 800a806:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800a808:	6903      	ldr	r3, [r0, #16]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800a80a:	6994      	ldr	r4, [r2, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	2301      	movs	r3, #1
 800a810:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800a812:	4213      	tst	r3, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800a814:	bf0c      	ite	eq
 800a816:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 800a81a:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800a81e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800a822:	47a0      	blx	r4
    dwt_setup_int(dev, true);

    LOG_INF("DW1000 device initialized and configured");

    return 0;
}
 800a824:	4640      	mov	r0, r8
 800a826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a82a:	f8dc 7000 	ldr.w	r7, [ip]
 800a82e:	2301      	movs	r3, #1
 800a830:	408b      	lsls	r3, r1
 800a832:	433b      	orrs	r3, r7
 800a834:	e7c7      	b.n	800a7c6 <dw1000_init+0x196>
        return -EINVAL;
 800a836:	f06f 0815 	mvn.w	r8, #21
 800a83a:	e7f3      	b.n	800a824 <dw1000_init+0x1f4>
        return -EIO;
 800a83c:	f06f 0804 	mvn.w	r8, #4
 800a840:	e7f0      	b.n	800a824 <dw1000_init+0x1f4>
 800a842:	bf00      	nop
 800a844:	001e8480 	.word	0x001e8480
 800a848:	0800a629 	.word	0x0800a629
 800a84c:	0800a625 	.word	0x0800a625

0800a850 <deca_sleep>:
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 800a850:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			return t * ((uint64_t)to_hz / from_hz);
 800a854:	210a      	movs	r1, #10
 800a856:	fb80 0101 	smull	r0, r1, r0, r1
 800a85a:	f003 be3f 	b.w	800e4dc <z_impl_k_sleep>
 800a85e:	bf00      	nop

0800a860 <decamutexon>:
}
 800a860:	2000      	movs	r0, #0
 800a862:	4770      	bx	lr

0800a864 <decamutexoff>:
}
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <writetospi>:
               uint32 bodyLength, const uint8 * bodyBuffer) {
 800a868:	b530      	push	{r4, r5, lr}
 800a86a:	b087      	sub	sp, #28
    if (spi_write(ctx->spi, ctx->spi_cfg, &buf_set)) {
 800a86c:	4c0a      	ldr	r4, [pc, #40]	; (800a898 <writetospi+0x30>)
    struct spi_buf_set buf_set = {.buffers = buf, .count = 2};
 800a86e:	ad02      	add	r5, sp, #8
 800a870:	9500      	str	r5, [sp, #0]
 800a872:	2502      	movs	r5, #2
    struct spi_buf buf[2] = {
 800a874:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800a878:	e9cd 3204 	strd	r3, r2, [sp, #16]
    if (spi_write(ctx->spi, ctx->spi_cfg, &buf_set)) {
 800a87c:	68a0      	ldr	r0, [r4, #8]
 800a87e:	69a1      	ldr	r1, [r4, #24]
    struct spi_buf_set buf_set = {.buffers = buf, .count = 2};
 800a880:	9501      	str	r5, [sp, #4]
 800a882:	6882      	ldr	r2, [r0, #8]
 800a884:	2300      	movs	r3, #0
 800a886:	6814      	ldr	r4, [r2, #0]
 800a888:	466a      	mov	r2, sp
 800a88a:	47a0      	blx	r4
        return -EIO;
 800a88c:	2800      	cmp	r0, #0
}
 800a88e:	bf18      	it	ne
 800a890:	f06f 0004 	mvnne.w	r0, #4
 800a894:	b007      	add	sp, #28
 800a896:	bd30      	pop	{r4, r5, pc}
 800a898:	200002f8 	.word	0x200002f8

0800a89c <readfromspi>:
                uint32 readLength, uint8 * readBuffer) {
 800a89c:	b530      	push	{r4, r5, lr}
 800a89e:	b08b      	sub	sp, #44	; 0x2c
    if (spi_transceive(ctx->spi, ctx->spi_cfg, &tx, &rx)) {
 800a8a0:	4c0e      	ldr	r4, [pc, #56]	; (800a8dc <readfromspi+0x40>)
    struct spi_buf rx_buf[2] = {
 800a8a2:	9308      	str	r3, [sp, #32]
    const struct spi_buf_set rx = {
 800a8a4:	ad06      	add	r5, sp, #24
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e9cd 5304 	strd	r5, r3, [sp, #16]
    struct spi_buf rx_buf[2] = {
 800a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ae:	2300      	movs	r3, #0
    const struct spi_buf_set tx = {
 800a8b0:	2201      	movs	r2, #1
    const struct spi_buf tx_buf = {
 800a8b2:	e9cd 1000 	strd	r1, r0, [sp]
    struct spi_buf rx_buf[2] = {
 800a8b6:	9007      	str	r0, [sp, #28]
    if (spi_transceive(ctx->spi, ctx->spi_cfg, &tx, &rx)) {
 800a8b8:	69a1      	ldr	r1, [r4, #24]
 800a8ba:	68a0      	ldr	r0, [r4, #8]
    const struct spi_buf_set tx = {
 800a8bc:	f8cd d008 	str.w	sp, [sp, #8]
 800a8c0:	9203      	str	r2, [sp, #12]
    struct spi_buf rx_buf[2] = {
 800a8c2:	9306      	str	r3, [sp, #24]
 800a8c4:	6882      	ldr	r2, [r0, #8]
 800a8c6:	ab04      	add	r3, sp, #16
 800a8c8:	6814      	ldr	r4, [r2, #0]
 800a8ca:	aa02      	add	r2, sp, #8
 800a8cc:	47a0      	blx	r4
        return -EIO;
 800a8ce:	2800      	cmp	r0, #0
}
 800a8d0:	bf18      	it	ne
 800a8d2:	f06f 0004 	mvnne.w	r0, #4
 800a8d6:	b00b      	add	sp, #44	; 0x2c
 800a8d8:	bd30      	pop	{r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	200002f8 	.word	0x200002f8

0800a8e0 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a8e0:	6341      	str	r1, [r0, #52]	; 0x34
}
 800a8e2:	4770      	bx	lr

0800a8e4 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a8e4:	6381      	str	r1, [r0, #56]	; 0x38
}
 800a8e6:	4770      	bx	lr

0800a8e8 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a8e8:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800a8ea:	4770      	bx	lr

0800a8ec <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a8ec:	6401      	str	r1, [r0, #64]	; 0x40
}
 800a8ee:	4770      	bx	lr

0800a8f0 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800a8f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a8f2:	6581      	str	r1, [r0, #88]	; 0x58
}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop

0800a8f8 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800a8f8:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800a8fa:	4770      	bx	lr

0800a8fc <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800a8fc:	f06f 0302 	mvn.w	r3, #2
 800a900:	6103      	str	r3, [r0, #16]
}
 800a902:	4770      	bx	lr

0800a904 <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800a904:	6900      	ldr	r0, [r0, #16]
}
 800a906:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a90a:	4770      	bx	lr

0800a90c <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800a90c:	f06f 0304 	mvn.w	r3, #4
 800a910:	6103      	str	r3, [r0, #16]
}
 800a912:	4770      	bx	lr

0800a914 <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800a914:	6900      	ldr	r0, [r0, #16]
}
 800a916:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800a91a:	4770      	bx	lr

0800a91c <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800a91c:	f06f 0308 	mvn.w	r3, #8
 800a920:	6103      	str	r3, [r0, #16]
}
 800a922:	4770      	bx	lr

0800a924 <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800a924:	6900      	ldr	r0, [r0, #16]
}
 800a926:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800a92a:	4770      	bx	lr

0800a92c <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800a92c:	f06f 0310 	mvn.w	r3, #16
 800a930:	6103      	str	r3, [r0, #16]
}
 800a932:	4770      	bx	lr

0800a934 <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800a934:	6900      	ldr	r0, [r0, #16]
}
 800a936:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800a93a:	4770      	bx	lr

0800a93c <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 800a93c:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 800a940:	6103      	str	r3, [r0, #16]
}
 800a942:	4770      	bx	lr

0800a944 <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 800a944:	6900      	ldr	r0, [r0, #16]
}
 800a946:	f3c0 4000 	ubfx	r0, r0, #16, #1
 800a94a:	4770      	bx	lr

0800a94c <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 800a94c:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 800a950:	6103      	str	r3, [r0, #16]
}
 800a952:	4770      	bx	lr

0800a954 <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800a954:	6943      	ldr	r3, [r0, #20]
 800a956:	f043 0302 	orr.w	r3, r3, #2
 800a95a:	6143      	str	r3, [r0, #20]
}
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop

0800a960 <ws2812_strip_update_channels>:
}
 800a960:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop

0800a968 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800a96c:	f8d0 9004 	ldr.w	r9, [r0, #4]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 800a970:	f899 5018 	ldrb.w	r5, [r9, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800a974:	fba2 4305 	umull	r4, r3, r2, r5
 800a978:	1e1e      	subs	r6, r3, #0
                                   size_t num_pixels) {
 800a97a:	b08f      	sub	sp, #60	; 0x3c
 800a97c:	bf18      	it	ne
 800a97e:	2601      	movne	r6, #1
 800a980:	9600      	str	r6, [sp, #0]
    return !overflow && (nbytes <= cfg->px_buf_size);
 800a982:	b9c3      	cbnz	r3, 800a9b6 <ws2812_strip_update_rgb+0x4e>
 800a984:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a988:	429c      	cmp	r4, r3
 800a98a:	d814      	bhi.n	800a9b6 <ws2812_strip_update_rgb+0x4e>
    uint8_t *px_buf = cfg->px_buf;
 800a98c:	f8d9 8010 	ldr.w	r8, [r9, #16]
    for (i = 0; i < num_pixels; i++) {
 800a990:	46cb      	mov	fp, r9
 800a992:	b352      	cbz	r2, 800a9ea <ws2812_strip_update_rgb+0x82>
 800a994:	9f00      	ldr	r7, [sp, #0]
 800a996:	463e      	mov	r6, r7
        for (j = 0; j < cfg->num_colors; j++) {
 800a998:	b1f5      	cbz	r5, 800a9d8 <ws2812_strip_update_rgb+0x70>
 800a99a:	2400      	movs	r4, #0
 800a99c:	4623      	mov	r3, r4
            switch (cfg->color_mapping[j]) {
 800a99e:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800a9a2:	5ceb      	ldrb	r3, [r5, r3]
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	f200 8102 	bhi.w	800abae <ws2812_strip_update_rgb+0x246>
 800a9aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a9ae:	00ee      	.short	0x00ee
 800a9b0:	00e600ea 	.word	0x00e600ea
 800a9b4:	000a      	.short	0x000a
        return -ENOMEM;
 800a9b6:	f06f 040b 	mvn.w	r4, #11
}
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	b00f      	add	sp, #60	; 0x3c
 800a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    *px_buf = pixels->b;
 800a9c2:	78cb      	ldrb	r3, [r1, #3]
 800a9c4:	f888 3000 	strb.w	r3, [r8]
        for (j = 0; j < cfg->num_colors; j++) {
 800a9c8:	f899 5018 	ldrb.w	r5, [r9, #24]
 800a9cc:	3401      	adds	r4, #1
 800a9ce:	b2e3      	uxtb	r3, r4
 800a9d0:	429d      	cmp	r5, r3
            px_buf++;
 800a9d2:	f108 0801 	add.w	r8, r8, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800a9d6:	d8e2      	bhi.n	800a99e <ws2812_strip_update_rgb+0x36>
    for (i = 0; i < num_pixels; i++) {
 800a9d8:	3601      	adds	r6, #1
 800a9da:	42b2      	cmp	r2, r6
        pixels++;
 800a9dc:	f101 0104 	add.w	r1, r1, #4
    for (i = 0; i < num_pixels; i++) {
 800a9e0:	d1da      	bne.n	800a998 <ws2812_strip_update_rgb+0x30>
 800a9e2:	f8d0 b004 	ldr.w	fp, [r0, #4]
    uint8_t *buf = cfg->px_buf;
 800a9e6:	f8db 8010 	ldr.w	r8, [fp, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 800a9ea:	f8db 2000 	ldr.w	r2, [fp]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800a9ee:	4971      	ldr	r1, [pc, #452]	; (800abb4 <ws2812_strip_update_rgb+0x24c>)
    TIM_TypeDef *tim = pwm_cfg->timer;
 800a9f0:	6852      	ldr	r2, [r2, #4]
 800a9f2:	f8d0 a010 	ldr.w	sl, [r0, #16]
 800a9f6:	6814      	ldr	r4, [r2, #0]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800a9f8:	f8db 2004 	ldr.w	r2, [fp, #4]
 800a9fc:	3a01      	subs	r2, #1
    LL_TIM_OC_StructInit(&oc_init);
 800a9fe:	a806      	add	r0, sp, #24
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800aa00:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800aa04:	9303      	str	r3, [sp, #12]
 800aa06:	461d      	mov	r5, r3
    LL_TIM_OC_StructInit(&oc_init);
 800aa08:	f7fe fb1a 	bl	8009040 <LL_TIM_OC_StructInit>
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800aa0c:	f89b 100c 	ldrb.w	r1, [fp, #12]
        return LL_TIM_OCPOLARITY_HIGH;
 800aa10:	f011 0f01 	tst.w	r1, #1
 800aa14:	bf14      	ite	ne
 800aa16:	2102      	movne	r1, #2
 800aa18:	2100      	moveq	r1, #0
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 800aa1a:	910a      	str	r1, [sp, #40]	; 0x28
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800aa1c:	2360      	movs	r3, #96	; 0x60
 800aa1e:	2101      	movs	r1, #1
 800aa20:	e9cd 3106 	strd	r3, r1, [sp, #24]
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 800aa24:	aa06      	add	r2, sp, #24
 800aa26:	4629      	mov	r1, r5
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7fe fb13 	bl	8009054 <LL_TIM_OC_Init>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f040 80b9 	bne.w	800aba8 <ws2812_strip_update_rgb+0x240>
	__asm__ volatile(
 800aa36:	f04f 0110 	mov.w	r1, #16
 800aa3a:	f3ef 8311 	mrs	r3, BASEPRI
 800aa3e:	f381 8812 	msr	BASEPRI_MAX, r1
 800aa42:	f3bf 8f6f 	isb	sy
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800aa46:	6821      	ldr	r1, [r4, #0]
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800aa4e:	2d01      	cmp	r5, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800aa50:	6021      	str	r1, [r4, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800aa52:	f000 809d 	beq.w	800ab90 <ws2812_strip_update_rgb+0x228>
 800aa56:	2d04      	cmp	r5, #4
 800aa58:	f000 809a 	beq.w	800ab90 <ws2812_strip_update_rgb+0x228>
 800aa5c:	2d10      	cmp	r5, #16
 800aa5e:	f000 8099 	beq.w	800ab94 <ws2812_strip_update_rgb+0x22c>
 800aa62:	2d40      	cmp	r5, #64	; 0x40
 800aa64:	f000 8094 	beq.w	800ab90 <ws2812_strip_update_rgb+0x228>
 800aa68:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800aa6c:	f000 8095 	beq.w	800ab9a <ws2812_strip_update_rgb+0x232>
 800aa70:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800aa74:	f000 8091 	beq.w	800ab9a <ws2812_strip_update_rgb+0x232>
 800aa78:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800aa7c:	f000 8090 	beq.w	800aba0 <ws2812_strip_update_rgb+0x238>
 800aa80:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800aa84:	bf0c      	ite	eq
 800aa86:	2108      	moveq	r1, #8
 800aa88:	f44f 6100 	movne.w	r1, #2048	; 0x800
 800aa8c:	223c      	movs	r2, #60	; 0x3c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800aa8e:	f104 0018 	add.w	r0, r4, #24
    generate_timer_event[cfg->pwm.channel](tim);
 800aa92:	4d49      	ldr	r5, [pc, #292]	; (800abb8 <ws2812_strip_update_rgb+0x250>)
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aa94:	5886      	ldr	r6, [r0, r2]
 800aa96:	4331      	orrs	r1, r6
 800aa98:	5081      	str	r1, [r0, r2]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 800aa9a:	f8da 2000 	ldr.w	r2, [sl]
 800aa9e:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800aaa0:	62e2      	str	r2, [r4, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800aaa2:	6962      	ldr	r2, [r4, #20]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	6162      	str	r2, [r4, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 800aaaa:	f8db 2004 	ldr.w	r2, [fp, #4]
 800aaae:	4620      	mov	r0, r4
 800aab0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800aab4:	4d41      	ldr	r5, [pc, #260]	; (800abbc <ws2812_strip_update_rgb+0x254>)
 800aab6:	4790      	blx	r2
    clear_timer_flag[cfg->pwm.channel](tim);
 800aab8:	4b41      	ldr	r3, [pc, #260]	; (800abc0 <ws2812_strip_update_rgb+0x258>)
 800aaba:	f8db 2004 	ldr.w	r2, [fp, #4]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aac4:	4790      	blx	r2
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800aac6:	f8db 2014 	ldr.w	r2, [fp, #20]
 800aaca:	4b3e      	ldr	r3, [pc, #248]	; (800abc4 <ws2812_strip_update_rgb+0x25c>)
 800aacc:	9302      	str	r3, [sp, #8]
 800aace:	b39a      	cbz	r2, 800ab38 <ws2812_strip_update_rgb+0x1d0>
 800aad0:	f8cd 8004 	str.w	r8, [sp, #4]
 800aad4:	f8dd 8000 	ldr.w	r8, [sp]
 800aad8:	f8cd 9014 	str.w	r9, [sp, #20]
 800aadc:	4699      	mov	r9, r3
        uint8_t tmp = *buf++;
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	2708      	movs	r7, #8
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800aae8:	f8db 3004 	ldr.w	r3, [fp, #4]
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800aaec:	e9da 1201 	ldrd	r1, r2, [sl, #4]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800aaf0:	3b01      	subs	r3, #1
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800aaf2:	f016 0f80 	tst.w	r6, #128	; 0x80
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800aaf6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aafa:	bf18      	it	ne
 800aafc:	4611      	movne	r1, r2
 800aafe:	4620      	mov	r0, r4
 800ab00:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800ab02:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ab0c:	4798      	blx	r3
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0f7      	beq.n	800ab02 <ws2812_strip_update_rgb+0x19a>
            clear_timer_flag[cfg->pwm.channel](tim);
 800ab12:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab16:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <ws2812_strip_update_rgb+0x258>)
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab1e:	4798      	blx	r3
            tmp <<= 1;
 800ab20:	0076      	lsls	r6, r6, #1
        for(int j = 0; j < 8; j++) {
 800ab22:	3f01      	subs	r7, #1
            tmp <<= 1;
 800ab24:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 800ab26:	d1df      	bne.n	800aae8 <ws2812_strip_update_rgb+0x180>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800ab28:	f8db 2014 	ldr.w	r2, [fp, #20]
 800ab2c:	f108 0801 	add.w	r8, r8, #1
 800ab30:	4590      	cmp	r8, r2
 800ab32:	d3d4      	bcc.n	800aade <ws2812_strip_update_rgb+0x176>
 800ab34:	f8dd 9014 	ldr.w	r9, [sp, #20]
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 800ab38:	f8db 2004 	ldr.w	r2, [fp, #4]
 800ab3c:	9b02      	ldr	r3, [sp, #8]
 800ab3e:	3a01      	subs	r2, #1
 800ab40:	2100      	movs	r1, #0
 800ab42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab46:	4620      	mov	r0, r4
 800ab48:	4790      	blx	r2
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800ab4a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ab54:	4798      	blx	r3
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d0f7      	beq.n	800ab4a <ws2812_strip_update_rgb+0x1e2>
  CLEAR_BIT(TIMx->CCER, Channels);
 800ab5a:	6a23      	ldr	r3, [r4, #32]
 800ab5c:	9a03      	ldr	r2, [sp, #12]
 800ab5e:	ea23 0302 	bic.w	r3, r3, r2
 800ab62:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
    return 0;
 800ab6e:	2400      	movs	r4, #0
    k_usleep(delay);
 800ab70:	f8b9 0026 	ldrh.w	r0, [r9, #38]	; 0x26
	return z_impl_k_usleep(us);
 800ab74:	f003 fcca 	bl	800e50c <z_impl_k_usleep>
    return rc;
 800ab78:	e71f      	b.n	800a9ba <ws2812_strip_update_rgb+0x52>
                    *px_buf = pixels->g;
 800ab7a:	788b      	ldrb	r3, [r1, #2]
 800ab7c:	f888 3000 	strb.w	r3, [r8]
                    break;
 800ab80:	e722      	b.n	800a9c8 <ws2812_strip_update_rgb+0x60>
                    *px_buf = pixels->r;
 800ab82:	784b      	ldrb	r3, [r1, #1]
 800ab84:	f888 3000 	strb.w	r3, [r8]
                    break;
 800ab88:	e71e      	b.n	800a9c8 <ws2812_strip_update_rgb+0x60>
                    *px_buf = 0;
 800ab8a:	f888 7000 	strb.w	r7, [r8]
                    break;
 800ab8e:	e71b      	b.n	800a9c8 <ws2812_strip_update_rgb+0x60>
 800ab90:	2108      	movs	r1, #8
 800ab92:	e77c      	b.n	800aa8e <ws2812_strip_update_rgb+0x126>
 800ab94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab98:	e779      	b.n	800aa8e <ws2812_strip_update_rgb+0x126>
 800ab9a:	2108      	movs	r1, #8
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	e776      	b.n	800aa8e <ws2812_strip_update_rgb+0x126>
 800aba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aba4:	2204      	movs	r2, #4
 800aba6:	e772      	b.n	800aa8e <ws2812_strip_update_rgb+0x126>
        return -EIO;
 800aba8:	f06f 0404 	mvn.w	r4, #4
 800abac:	e7e0      	b.n	800ab70 <ws2812_strip_update_rgb+0x208>
            switch (cfg->color_mapping[j]) {
 800abae:	f06f 0415 	mvn.w	r4, #21
 800abb2:	e702      	b.n	800a9ba <ws2812_strip_update_rgb+0x52>
 800abb4:	080124c8 	.word	0x080124c8
 800abb8:	080124f8 	.word	0x080124f8
 800abbc:	08012510 	.word	0x08012510
 800abc0:	080124e0 	.word	0x080124e0
 800abc4:	08012528 	.word	0x08012528

0800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>:
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800abca:	f100 0708 	add.w	r7, r0, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800abce:	b083      	sub	sp, #12
	: allocator_type(__a), _M_p(__dat) { }
 800abd0:	6007      	str	r7, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800abd2:	b331      	cbz	r1, 800ac22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x5a>
 800abd4:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 800abd6:	4608      	mov	r0, r1
 800abd8:	460e      	mov	r6, r1
 800abda:	f7f6 f993 	bl	8000f04 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 800abde:	280f      	cmp	r0, #15
 800abe0:	4605      	mov	r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800abe2:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 800abe4:	d80e      	bhi.n	800ac04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x3c>
	if (__n == 1)
 800abe6:	2801      	cmp	r0, #1
 800abe8:	d109      	bne.n	800abfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x36>
      { __c1 = __c2; }
 800abea:	7833      	ldrb	r3, [r6, #0]
 800abec:	7223      	strb	r3, [r4, #8]
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
 800abf2:	6063      	str	r3, [r4, #4]
 800abf4:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 800abf6:	4620      	mov	r0, r4
 800abf8:	54d1      	strb	r1, [r2, r3]
 800abfa:	b003      	add	sp, #12
 800abfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d0f5      	beq.n	800abee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x26>
 800ac02:	e008      	b.n	800ac16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x4e>
	    _M_data(_M_create(__dnew, size_type(0)));
 800ac04:	2200      	movs	r2, #0
 800ac06:	a901      	add	r1, sp, #4
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f004 fb8f 	bl	800f32c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 800ac0e:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 800ac10:	6020      	str	r0, [r4, #0]
 800ac12:	4607      	mov	r7, r0
      { _M_allocated_capacity = __capacity; }
 800ac14:	60a3      	str	r3, [r4, #8]
	  return __s1;
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800ac16:	462a      	mov	r2, r5
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	f006 f94c 	bl	8010eb8 <memcpy>
 800ac20:	e7e5      	b.n	800abee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x26>
	  std::__throw_logic_error(__N("basic_string::"
 800ac22:	4801      	ldr	r0, [pc, #4]	; (800ac28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0+0x60>)
 800ac24:	f006 f92e 	bl	8010e84 <_ZSt19__throw_logic_errorPKc>
 800ac28:	08012574 	.word	0x08012574

0800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0>:
      basic_string<_CharT, _Traits, _Alloc>::
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b082      	sub	sp, #8
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800ac32:	b311      	cbz	r1, 800ac7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x4e>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 800ac34:	1a54      	subs	r4, r2, r1
	if (__dnew > size_type(_S_local_capacity))
 800ac36:	2c0f      	cmp	r4, #15
 800ac38:	460e      	mov	r6, r1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800ac3a:	9401      	str	r4, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
 800ac3c:	d80b      	bhi.n	800ac56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x2a>
	if (__n == 1)
 800ac3e:	2c01      	cmp	r4, #1
      { return _M_dataplus._M_p; }
 800ac40:	6800      	ldr	r0, [r0, #0]
	if (__n == 1)
 800ac42:	d122      	bne.n	800ac8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x5e>
      { __c1 = __c2; }
 800ac44:	780b      	ldrb	r3, [r1, #0]
 800ac46:	7003      	strb	r3, [r0, #0]
	_M_set_length(__dnew);
 800ac48:	9c01      	ldr	r4, [sp, #4]
      { return _M_dataplus._M_p; }
 800ac4a:	6828      	ldr	r0, [r5, #0]
      { _M_string_length = __length; }
 800ac4c:	606c      	str	r4, [r5, #4]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	5503      	strb	r3, [r0, r4]
      }
 800ac52:	b002      	add	sp, #8
 800ac54:	bd70      	pop	{r4, r5, r6, pc}
	    _M_data(_M_create(__dnew, size_type(0)));
 800ac56:	2200      	movs	r2, #0
 800ac58:	a901      	add	r1, sp, #4
 800ac5a:	f004 fb67 	bl	800f32c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
 800ac5e:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
 800ac60:	6028      	str	r0, [r5, #0]
      { _M_allocated_capacity = __capacity; }
 800ac62:	60ab      	str	r3, [r5, #8]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800ac64:	4622      	mov	r2, r4
 800ac66:	4631      	mov	r1, r6
 800ac68:	f006 f926 	bl	8010eb8 <memcpy>
	_M_set_length(__dnew);
 800ac6c:	9c01      	ldr	r4, [sp, #4]
      { return _M_dataplus._M_p; }
 800ac6e:	6828      	ldr	r0, [r5, #0]
      { _M_string_length = __length; }
 800ac70:	606c      	str	r4, [r5, #4]
      { __c1 = __c2; }
 800ac72:	2300      	movs	r3, #0
 800ac74:	5503      	strb	r3, [r0, r4]
      }
 800ac76:	b002      	add	sp, #8
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800ac7a:	b94a      	cbnz	r2, 800ac90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x64>
      { return _M_dataplus._M_p; }
 800ac7c:	6800      	ldr	r0, [r0, #0]
 800ac7e:	4614      	mov	r4, r2
 800ac80:	2300      	movs	r3, #0
      { _M_string_length = __length; }
 800ac82:	606c      	str	r4, [r5, #4]
 800ac84:	5503      	strb	r3, [r0, r4]
      }
 800ac86:	b002      	add	sp, #8
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
	if (__n == 0)
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d0de      	beq.n	800ac4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x20>
 800ac8e:	e7e9      	b.n	800ac64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x38>
	  std::__throw_logic_error(__N("basic_string::"
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0+0x6c>)
 800ac92:	f006 f8f7 	bl	8010e84 <_ZSt19__throw_logic_errorPKc>
 800ac96:	bf00      	nop
 800ac98:	08012574 	.word	0x08012574

0800ac9c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	b083      	sub	sp, #12
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800aca2:	9000      	str	r0, [sp, #0]
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f000 80d8 	beq.w	800ae5a <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acaa:	9b00      	ldr	r3, [sp, #0]
 800acac:	f8d3 900c 	ldr.w	r9, [r3, #12]
      while (__x != 0)
 800acb0:	f1b9 0f00 	cmp.w	r9, #0
 800acb4:	f000 80bf 	beq.w	800ae36 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acb8:	f8d9 a00c 	ldr.w	sl, [r9, #12]
      while (__x != 0)
 800acbc:	f1ba 0f00 	cmp.w	sl, #0
 800acc0:	f000 80a5 	beq.w	800ae0e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acc4:	f8da b00c 	ldr.w	fp, [sl, #12]
      while (__x != 0)
 800acc8:	f1bb 0f00 	cmp.w	fp, #0
 800accc:	f000 808b 	beq.w	800ade6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acd0:	f8db 400c 	ldr.w	r4, [fp, #12]
      while (__x != 0)
 800acd4:	2c00      	cmp	r4, #0
 800acd6:	d05e      	beq.n	800ad96 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acd8:	68e5      	ldr	r5, [r4, #12]
      while (__x != 0)
 800acda:	2d00      	cmp	r5, #0
 800acdc:	d038      	beq.n	800ad50 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acde:	68ee      	ldr	r6, [r5, #12]
      while (__x != 0)
 800ace0:	2e00      	cmp	r6, #0
 800ace2:	d046      	beq.n	800ad72 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
      { return static_cast<_Link_type>(__x->_M_right); }
 800ace4:	68f7      	ldr	r7, [r6, #12]
      while (__x != 0)
 800ace6:	2f00      	cmp	r7, #0
 800ace8:	d069      	beq.n	800adbe <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
      { return static_cast<_Link_type>(__x->_M_right); }
 800acea:	f8d7 800c 	ldr.w	r8, [r7, #12]
      while (__x != 0)
 800acee:	f1b8 0f00 	cmp.w	r8, #0
 800acf2:	d019      	beq.n	800ad28 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x8c>
	{
	  _M_erase(_S_right(__x));
 800acf4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800acf8:	f8cd 8004 	str.w	r8, [sp, #4]
 800acfc:	f7ff ffce 	bl	800ac9c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800ad00:	9a01      	ldr	r2, [sp, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ad02:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800ad06:	6950      	ldr	r0, [r2, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ad08:	f102 011c 	add.w	r1, r2, #28
	if (!_M_is_local())
 800ad0c:	4288      	cmp	r0, r1
 800ad0e:	d004      	beq.n	800ad1a <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x7e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ad10:	69d1      	ldr	r1, [r2, #28]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800ad12:	3101      	adds	r1, #1
 800ad14:	f005 ffec 	bl	8010cf0 <_ZdlPvj>
 800ad18:	9a01      	ldr	r2, [sp, #4]
 800ad1a:	212c      	movs	r1, #44	; 0x2c
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	f005 ffe7 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ad22:	f1b8 0f00 	cmp.w	r8, #0
 800ad26:	d1e5      	bne.n	800acf4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x58>
      { return _M_dataplus._M_p; }
 800ad28:	6978      	ldr	r0, [r7, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ad2a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ad2e:	f107 021c 	add.w	r2, r7, #28
	if (!_M_is_local())
 800ad32:	4290      	cmp	r0, r2
 800ad34:	d003      	beq.n	800ad3e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xa2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ad36:	69f9      	ldr	r1, [r7, #28]
 800ad38:	3101      	adds	r1, #1
 800ad3a:	f005 ffd9 	bl	8010cf0 <_ZdlPvj>
 800ad3e:	212c      	movs	r1, #44	; 0x2c
 800ad40:	4638      	mov	r0, r7
 800ad42:	f005 ffd5 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ad46:	f1b8 0f00 	cmp.w	r8, #0
 800ad4a:	d038      	beq.n	800adbe <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
 800ad4c:	4647      	mov	r7, r8
 800ad4e:	e7cc      	b.n	800acea <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4e>
      { return _M_dataplus._M_p; }
 800ad50:	6960      	ldr	r0, [r4, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ad52:	68a5      	ldr	r5, [r4, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ad54:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 800ad58:	4298      	cmp	r0, r3
 800ad5a:	d003      	beq.n	800ad64 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xc8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ad5c:	69e1      	ldr	r1, [r4, #28]
 800ad5e:	3101      	adds	r1, #1
 800ad60:	f005 ffc6 	bl	8010cf0 <_ZdlPvj>
 800ad64:	212c      	movs	r1, #44	; 0x2c
 800ad66:	4620      	mov	r0, r4
 800ad68:	f005 ffc2 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ad6c:	b19d      	cbz	r5, 800ad96 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
 800ad6e:	462c      	mov	r4, r5
 800ad70:	e7b2      	b.n	800acd8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x3c>
      { return _M_dataplus._M_p; }
 800ad72:	6968      	ldr	r0, [r5, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ad74:	68ae      	ldr	r6, [r5, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ad76:	f105 031c 	add.w	r3, r5, #28
	if (!_M_is_local())
 800ad7a:	4298      	cmp	r0, r3
 800ad7c:	d003      	beq.n	800ad86 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xea>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ad7e:	69e9      	ldr	r1, [r5, #28]
 800ad80:	3101      	adds	r1, #1
 800ad82:	f005 ffb5 	bl	8010cf0 <_ZdlPvj>
 800ad86:	212c      	movs	r1, #44	; 0x2c
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f005 ffb1 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	d0de      	beq.n	800ad50 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
 800ad92:	4635      	mov	r5, r6
 800ad94:	e7a3      	b.n	800acde <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x42>
      { return _M_dataplus._M_p; }
 800ad96:	f8db 0014 	ldr.w	r0, [fp, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ad9a:	f8db 4008 	ldr.w	r4, [fp, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ad9e:	f10b 031c 	add.w	r3, fp, #28
	if (!_M_is_local())
 800ada2:	4298      	cmp	r0, r3
 800ada4:	d004      	beq.n	800adb0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x114>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ada6:	f8db 101c 	ldr.w	r1, [fp, #28]
 800adaa:	3101      	adds	r1, #1
 800adac:	f005 ffa0 	bl	8010cf0 <_ZdlPvj>
 800adb0:	212c      	movs	r1, #44	; 0x2c
 800adb2:	4658      	mov	r0, fp
 800adb4:	f005 ff9c 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800adb8:	b1ac      	cbz	r4, 800ade6 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
 800adba:	46a3      	mov	fp, r4
 800adbc:	e788      	b.n	800acd0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x34>
      { return _M_dataplus._M_p; }
 800adbe:	6970      	ldr	r0, [r6, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800adc0:	f8d6 8008 	ldr.w	r8, [r6, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800adc4:	f106 031c 	add.w	r3, r6, #28
	if (!_M_is_local())
 800adc8:	4298      	cmp	r0, r3
 800adca:	d003      	beq.n	800add4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x138>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800adcc:	69f1      	ldr	r1, [r6, #28]
 800adce:	3101      	adds	r1, #1
 800add0:	f005 ff8e 	bl	8010cf0 <_ZdlPvj>
 800add4:	212c      	movs	r1, #44	; 0x2c
 800add6:	4630      	mov	r0, r6
 800add8:	f005 ff8a 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800addc:	f1b8 0f00 	cmp.w	r8, #0
 800ade0:	d0c7      	beq.n	800ad72 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
 800ade2:	4646      	mov	r6, r8
 800ade4:	e77e      	b.n	800ace4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x48>
      { return _M_dataplus._M_p; }
 800ade6:	f8da 0014 	ldr.w	r0, [sl, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800adea:	f8da 4008 	ldr.w	r4, [sl, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800adee:	f10a 031c 	add.w	r3, sl, #28
	if (!_M_is_local())
 800adf2:	4298      	cmp	r0, r3
 800adf4:	d004      	beq.n	800ae00 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x164>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800adf6:	f8da 101c 	ldr.w	r1, [sl, #28]
 800adfa:	3101      	adds	r1, #1
 800adfc:	f005 ff78 	bl	8010cf0 <_ZdlPvj>
 800ae00:	212c      	movs	r1, #44	; 0x2c
 800ae02:	4650      	mov	r0, sl
 800ae04:	f005 ff74 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ae08:	b10c      	cbz	r4, 800ae0e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
 800ae0a:	46a2      	mov	sl, r4
 800ae0c:	e75a      	b.n	800acc4 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
      { return _M_dataplus._M_p; }
 800ae0e:	f8d9 0014 	ldr.w	r0, [r9, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ae12:	f8d9 4008 	ldr.w	r4, [r9, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ae16:	f109 031c 	add.w	r3, r9, #28
	if (!_M_is_local())
 800ae1a:	4298      	cmp	r0, r3
 800ae1c:	d004      	beq.n	800ae28 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x18c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ae1e:	f8d9 101c 	ldr.w	r1, [r9, #28]
 800ae22:	3101      	adds	r1, #1
 800ae24:	f005 ff64 	bl	8010cf0 <_ZdlPvj>
 800ae28:	212c      	movs	r1, #44	; 0x2c
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f005 ff60 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ae30:	b10c      	cbz	r4, 800ae36 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
 800ae32:	46a1      	mov	r9, r4
 800ae34:	e740      	b.n	800acb8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
      { return _M_dataplus._M_p; }
 800ae36:	9a00      	ldr	r2, [sp, #0]
 800ae38:	6950      	ldr	r0, [r2, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800ae3a:	6894      	ldr	r4, [r2, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ae3c:	f102 031c 	add.w	r3, r2, #28
	if (!_M_is_local())
 800ae40:	4298      	cmp	r0, r3
 800ae42:	d003      	beq.n	800ae4c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1b0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ae44:	69d1      	ldr	r1, [r2, #28]
 800ae46:	3101      	adds	r1, #1
 800ae48:	f005 ff52 	bl	8010cf0 <_ZdlPvj>
 800ae4c:	9800      	ldr	r0, [sp, #0]
 800ae4e:	212c      	movs	r1, #44	; 0x2c
 800ae50:	f005 ff4e 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ae54:	b10c      	cbz	r4, 800ae5a <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
 800ae56:	9400      	str	r4, [sp, #0]
 800ae58:	e727      	b.n	800acaa <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xe>
	  _Link_type __y = _S_left(__x);
	  _M_drop_node(__x);
	  __x = __y;
	}
    }
 800ae5a:	b003      	add	sp, #12
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae60 <_ZNSt3mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessImESaISt4pairIKmS5_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800ae60:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800ae62:	6884      	ldr	r4, [r0, #8]
 800ae64:	4606      	mov	r6, r0
      while (__x != 0)
 800ae66:	b19c      	cbz	r4, 800ae90 <_ZNSt3mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessImESaISt4pairIKmS5_EEED1Ev+0x30>
	  _M_erase(_S_right(__x));
 800ae68:	68e0      	ldr	r0, [r4, #12]
 800ae6a:	f7ff ff17 	bl	800ac9c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800ae6e:	6960      	ldr	r0, [r4, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800ae70:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 800ae74:	4298      	cmp	r0, r3
 800ae76:	4625      	mov	r5, r4
      { return static_cast<_Link_type>(__x->_M_left); }
 800ae78:	68a4      	ldr	r4, [r4, #8]
 800ae7a:	d003      	beq.n	800ae84 <_ZNSt3mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessImESaISt4pairIKmS5_EEED1Ev+0x24>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800ae7c:	69e9      	ldr	r1, [r5, #28]
 800ae7e:	3101      	adds	r1, #1
 800ae80:	f005 ff36 	bl	8010cf0 <_ZdlPvj>
 800ae84:	212c      	movs	r1, #44	; 0x2c
 800ae86:	4628      	mov	r0, r5
 800ae88:	f005 ff32 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d1eb      	bne.n	800ae68 <_ZNSt3mapImNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessImESaISt4pairIKmS5_EEED1Ev+0x8>
 800ae90:	4630      	mov	r0, r6
 800ae92:	bd70      	pop	{r4, r5, r6, pc}

0800ae94 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae98:	b083      	sub	sp, #12
      while (__x != 0)
 800ae9a:	9000      	str	r0, [sp, #0]
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f000 80d8 	beq.w	800b052 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	f8d3 900c 	ldr.w	r9, [r3, #12]
      while (__x != 0)
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	f000 80bf 	beq.w	800b02e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aeb0:	f8d9 a00c 	ldr.w	sl, [r9, #12]
      while (__x != 0)
 800aeb4:	f1ba 0f00 	cmp.w	sl, #0
 800aeb8:	f000 80a5 	beq.w	800b006 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aebc:	f8da b00c 	ldr.w	fp, [sl, #12]
      while (__x != 0)
 800aec0:	f1bb 0f00 	cmp.w	fp, #0
 800aec4:	f000 808b 	beq.w	800afde <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aec8:	f8db 400c 	ldr.w	r4, [fp, #12]
      while (__x != 0)
 800aecc:	2c00      	cmp	r4, #0
 800aece:	d05e      	beq.n	800af8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aed0:	68e5      	ldr	r5, [r4, #12]
      while (__x != 0)
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	d038      	beq.n	800af48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aed6:	68ee      	ldr	r6, [r5, #12]
      while (__x != 0)
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	d046      	beq.n	800af6a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aedc:	68f7      	ldr	r7, [r6, #12]
      while (__x != 0)
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d069      	beq.n	800afb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
      { return static_cast<_Link_type>(__x->_M_right); }
 800aee2:	f8d7 800c 	ldr.w	r8, [r7, #12]
      while (__x != 0)
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	d019      	beq.n	800af20 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x8c>
	  _M_erase(_S_right(__x));
 800aeec:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800aef0:	f8cd 8004 	str.w	r8, [sp, #4]
 800aef4:	f7ff ffce 	bl	800ae94 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800aef8:	9a01      	ldr	r2, [sp, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800aefa:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800aefe:	6910      	ldr	r0, [r2, #16]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800af00:	f102 0118 	add.w	r1, r2, #24
	if (!_M_is_local())
 800af04:	4288      	cmp	r0, r1
 800af06:	d004      	beq.n	800af12 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x7e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800af08:	6991      	ldr	r1, [r2, #24]
 800af0a:	3101      	adds	r1, #1
 800af0c:	f005 fef0 	bl	8010cf0 <_ZdlPvj>
 800af10:	9a01      	ldr	r2, [sp, #4]
 800af12:	212c      	movs	r1, #44	; 0x2c
 800af14:	4610      	mov	r0, r2
 800af16:	f005 feeb 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800af1a:	f1b8 0f00 	cmp.w	r8, #0
 800af1e:	d1e5      	bne.n	800aeec <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x58>
      { return _M_dataplus._M_p; }
 800af20:	6938      	ldr	r0, [r7, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800af22:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800af26:	f107 0218 	add.w	r2, r7, #24
	if (!_M_is_local())
 800af2a:	4290      	cmp	r0, r2
 800af2c:	d003      	beq.n	800af36 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xa2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800af2e:	69b9      	ldr	r1, [r7, #24]
 800af30:	3101      	adds	r1, #1
 800af32:	f005 fedd 	bl	8010cf0 <_ZdlPvj>
 800af36:	212c      	movs	r1, #44	; 0x2c
 800af38:	4638      	mov	r0, r7
 800af3a:	f005 fed9 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	d038      	beq.n	800afb6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
 800af44:	4647      	mov	r7, r8
 800af46:	e7cc      	b.n	800aee2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4e>
      { return _M_dataplus._M_p; }
 800af48:	6920      	ldr	r0, [r4, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800af4a:	68a5      	ldr	r5, [r4, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800af4c:	f104 0318 	add.w	r3, r4, #24
	if (!_M_is_local())
 800af50:	4298      	cmp	r0, r3
 800af52:	d003      	beq.n	800af5c <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xc8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800af54:	69a1      	ldr	r1, [r4, #24]
 800af56:	3101      	adds	r1, #1
 800af58:	f005 feca 	bl	8010cf0 <_ZdlPvj>
 800af5c:	212c      	movs	r1, #44	; 0x2c
 800af5e:	4620      	mov	r0, r4
 800af60:	f005 fec6 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800af64:	b19d      	cbz	r5, 800af8e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
 800af66:	462c      	mov	r4, r5
 800af68:	e7b2      	b.n	800aed0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x3c>
      { return _M_dataplus._M_p; }
 800af6a:	6928      	ldr	r0, [r5, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800af6c:	68ae      	ldr	r6, [r5, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800af6e:	f105 0318 	add.w	r3, r5, #24
	if (!_M_is_local())
 800af72:	4298      	cmp	r0, r3
 800af74:	d003      	beq.n	800af7e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xea>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800af76:	69a9      	ldr	r1, [r5, #24]
 800af78:	3101      	adds	r1, #1
 800af7a:	f005 feb9 	bl	8010cf0 <_ZdlPvj>
 800af7e:	212c      	movs	r1, #44	; 0x2c
 800af80:	4628      	mov	r0, r5
 800af82:	f005 feb5 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800af86:	2e00      	cmp	r6, #0
 800af88:	d0de      	beq.n	800af48 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
 800af8a:	4635      	mov	r5, r6
 800af8c:	e7a3      	b.n	800aed6 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x42>
      { return _M_dataplus._M_p; }
 800af8e:	f8db 0010 	ldr.w	r0, [fp, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800af92:	f8db 4008 	ldr.w	r4, [fp, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800af96:	f10b 0318 	add.w	r3, fp, #24
	if (!_M_is_local())
 800af9a:	4298      	cmp	r0, r3
 800af9c:	d004      	beq.n	800afa8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x114>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800af9e:	f8db 1018 	ldr.w	r1, [fp, #24]
 800afa2:	3101      	adds	r1, #1
 800afa4:	f005 fea4 	bl	8010cf0 <_ZdlPvj>
 800afa8:	212c      	movs	r1, #44	; 0x2c
 800afaa:	4658      	mov	r0, fp
 800afac:	f005 fea0 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800afb0:	b1ac      	cbz	r4, 800afde <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
 800afb2:	46a3      	mov	fp, r4
 800afb4:	e788      	b.n	800aec8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x34>
      { return _M_dataplus._M_p; }
 800afb6:	6930      	ldr	r0, [r6, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800afb8:	f8d6 8008 	ldr.w	r8, [r6, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800afbc:	f106 0318 	add.w	r3, r6, #24
	if (!_M_is_local())
 800afc0:	4298      	cmp	r0, r3
 800afc2:	d003      	beq.n	800afcc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x138>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800afc4:	69b1      	ldr	r1, [r6, #24]
 800afc6:	3101      	adds	r1, #1
 800afc8:	f005 fe92 	bl	8010cf0 <_ZdlPvj>
 800afcc:	212c      	movs	r1, #44	; 0x2c
 800afce:	4630      	mov	r0, r6
 800afd0:	f005 fe8e 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800afd4:	f1b8 0f00 	cmp.w	r8, #0
 800afd8:	d0c7      	beq.n	800af6a <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
 800afda:	4646      	mov	r6, r8
 800afdc:	e77e      	b.n	800aedc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x48>
      { return _M_dataplus._M_p; }
 800afde:	f8da 0010 	ldr.w	r0, [sl, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800afe2:	f8da 4008 	ldr.w	r4, [sl, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800afe6:	f10a 0318 	add.w	r3, sl, #24
	if (!_M_is_local())
 800afea:	4298      	cmp	r0, r3
 800afec:	d004      	beq.n	800aff8 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x164>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800afee:	f8da 1018 	ldr.w	r1, [sl, #24]
 800aff2:	3101      	adds	r1, #1
 800aff4:	f005 fe7c 	bl	8010cf0 <_ZdlPvj>
 800aff8:	212c      	movs	r1, #44	; 0x2c
 800affa:	4650      	mov	r0, sl
 800affc:	f005 fe78 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b000:	b10c      	cbz	r4, 800b006 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
 800b002:	46a2      	mov	sl, r4
 800b004:	e75a      	b.n	800aebc <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
      { return _M_dataplus._M_p; }
 800b006:	f8d9 0010 	ldr.w	r0, [r9, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b00a:	f8d9 4008 	ldr.w	r4, [r9, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b00e:	f109 0318 	add.w	r3, r9, #24
	if (!_M_is_local())
 800b012:	4298      	cmp	r0, r3
 800b014:	d004      	beq.n	800b020 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x18c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b016:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800b01a:	3101      	adds	r1, #1
 800b01c:	f005 fe68 	bl	8010cf0 <_ZdlPvj>
 800b020:	212c      	movs	r1, #44	; 0x2c
 800b022:	4648      	mov	r0, r9
 800b024:	f005 fe64 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b028:	b10c      	cbz	r4, 800b02e <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
 800b02a:	46a1      	mov	r9, r4
 800b02c:	e740      	b.n	800aeb0 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
      { return _M_dataplus._M_p; }
 800b02e:	9a00      	ldr	r2, [sp, #0]
 800b030:	6910      	ldr	r0, [r2, #16]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b032:	6894      	ldr	r4, [r2, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b034:	f102 0318 	add.w	r3, r2, #24
	if (!_M_is_local())
 800b038:	4298      	cmp	r0, r3
 800b03a:	d003      	beq.n	800b044 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1b0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b03c:	6991      	ldr	r1, [r2, #24]
 800b03e:	3101      	adds	r1, #1
 800b040:	f005 fe56 	bl	8010cf0 <_ZdlPvj>
 800b044:	9800      	ldr	r0, [sp, #0]
 800b046:	212c      	movs	r1, #44	; 0x2c
 800b048:	f005 fe52 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b04c:	b10c      	cbz	r4, 800b052 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
 800b04e:	9400      	str	r4, [sp, #0]
 800b050:	e727      	b.n	800aea2 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xe>
    }
 800b052:	b003      	add	sp, #12
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b058 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhSt4lessIS5_ESaISt4pairIKS5_hEEED1Ev>:
 800b058:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b05a:	6884      	ldr	r4, [r0, #8]
 800b05c:	4606      	mov	r6, r0
      while (__x != 0)
 800b05e:	b19c      	cbz	r4, 800b088 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhSt4lessIS5_ESaISt4pairIKS5_hEEED1Ev+0x30>
	  _M_erase(_S_right(__x));
 800b060:	68e0      	ldr	r0, [r4, #12]
 800b062:	f7ff ff17 	bl	800ae94 <_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_hESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800b066:	6920      	ldr	r0, [r4, #16]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b068:	f104 0318 	add.w	r3, r4, #24
	if (!_M_is_local())
 800b06c:	4298      	cmp	r0, r3
 800b06e:	4625      	mov	r5, r4
      { return static_cast<_Link_type>(__x->_M_left); }
 800b070:	68a4      	ldr	r4, [r4, #8]
 800b072:	d003      	beq.n	800b07c <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhSt4lessIS5_ESaISt4pairIKS5_hEEED1Ev+0x24>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b074:	69a9      	ldr	r1, [r5, #24]
 800b076:	3101      	adds	r1, #1
 800b078:	f005 fe3a 	bl	8010cf0 <_ZdlPvj>
 800b07c:	212c      	movs	r1, #44	; 0x2c
 800b07e:	4628      	mov	r0, r5
 800b080:	f005 fe36 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b084:	2c00      	cmp	r4, #0
 800b086:	d1eb      	bne.n	800b060 <_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhSt4lessIS5_ESaISt4pairIKS5_hEEED1Ev+0x8>
 800b088:	4630      	mov	r0, r6
 800b08a:	bd70      	pop	{r4, r5, r6, pc}

0800b08c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	b083      	sub	sp, #12
      while (__x != 0)
 800b092:	9000      	str	r0, [sp, #0]
 800b094:	2800      	cmp	r0, #0
 800b096:	f000 80d8 	beq.w	800b24a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b09a:	9b00      	ldr	r3, [sp, #0]
 800b09c:	f8d3 900c 	ldr.w	r9, [r3, #12]
      while (__x != 0)
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	f000 80bf 	beq.w	800b226 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0a8:	f8d9 a00c 	ldr.w	sl, [r9, #12]
      while (__x != 0)
 800b0ac:	f1ba 0f00 	cmp.w	sl, #0
 800b0b0:	f000 80a5 	beq.w	800b1fe <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0b4:	f8da b00c 	ldr.w	fp, [sl, #12]
      while (__x != 0)
 800b0b8:	f1bb 0f00 	cmp.w	fp, #0
 800b0bc:	f000 808b 	beq.w	800b1d6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0c0:	f8db 400c 	ldr.w	r4, [fp, #12]
      while (__x != 0)
 800b0c4:	2c00      	cmp	r4, #0
 800b0c6:	d05e      	beq.n	800b186 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0c8:	68e5      	ldr	r5, [r4, #12]
      while (__x != 0)
 800b0ca:	2d00      	cmp	r5, #0
 800b0cc:	d038      	beq.n	800b140 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0ce:	68ee      	ldr	r6, [r5, #12]
      while (__x != 0)
 800b0d0:	2e00      	cmp	r6, #0
 800b0d2:	d046      	beq.n	800b162 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0d4:	68f7      	ldr	r7, [r6, #12]
      while (__x != 0)
 800b0d6:	2f00      	cmp	r7, #0
 800b0d8:	d069      	beq.n	800b1ae <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
      { return static_cast<_Link_type>(__x->_M_right); }
 800b0da:	f8d7 800c 	ldr.w	r8, [r7, #12]
      while (__x != 0)
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	d019      	beq.n	800b118 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x8c>
	  _M_erase(_S_right(__x));
 800b0e4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b0e8:	f8cd 8004 	str.w	r8, [sp, #4]
 800b0ec:	f7ff ffce 	bl	800b08c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800b0f0:	9a01      	ldr	r2, [sp, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b0f2:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800b0f6:	6950      	ldr	r0, [r2, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b0f8:	f102 011c 	add.w	r1, r2, #28
	if (!_M_is_local())
 800b0fc:	4288      	cmp	r0, r1
 800b0fe:	d004      	beq.n	800b10a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x7e>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b100:	69d1      	ldr	r1, [r2, #28]
 800b102:	3101      	adds	r1, #1
 800b104:	f005 fdf4 	bl	8010cf0 <_ZdlPvj>
 800b108:	9a01      	ldr	r2, [sp, #4]
 800b10a:	212c      	movs	r1, #44	; 0x2c
 800b10c:	4610      	mov	r0, r2
 800b10e:	f005 fdef 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b112:	f1b8 0f00 	cmp.w	r8, #0
 800b116:	d1e5      	bne.n	800b0e4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x58>
      { return _M_dataplus._M_p; }
 800b118:	6978      	ldr	r0, [r7, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b11a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b11e:	f107 021c 	add.w	r2, r7, #28
	if (!_M_is_local())
 800b122:	4290      	cmp	r0, r2
 800b124:	d003      	beq.n	800b12e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xa2>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	3101      	adds	r1, #1
 800b12a:	f005 fde1 	bl	8010cf0 <_ZdlPvj>
 800b12e:	212c      	movs	r1, #44	; 0x2c
 800b130:	4638      	mov	r0, r7
 800b132:	f005 fddd 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b136:	f1b8 0f00 	cmp.w	r8, #0
 800b13a:	d038      	beq.n	800b1ae <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x122>
 800b13c:	4647      	mov	r7, r8
 800b13e:	e7cc      	b.n	800b0da <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x4e>
      { return _M_dataplus._M_p; }
 800b140:	6960      	ldr	r0, [r4, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b142:	68a5      	ldr	r5, [r4, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b144:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 800b148:	4298      	cmp	r0, r3
 800b14a:	d003      	beq.n	800b154 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xc8>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b14c:	69e1      	ldr	r1, [r4, #28]
 800b14e:	3101      	adds	r1, #1
 800b150:	f005 fdce 	bl	8010cf0 <_ZdlPvj>
 800b154:	212c      	movs	r1, #44	; 0x2c
 800b156:	4620      	mov	r0, r4
 800b158:	f005 fdca 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b15c:	b19d      	cbz	r5, 800b186 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xfa>
 800b15e:	462c      	mov	r4, r5
 800b160:	e7b2      	b.n	800b0c8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x3c>
      { return _M_dataplus._M_p; }
 800b162:	6968      	ldr	r0, [r5, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b164:	68ae      	ldr	r6, [r5, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b166:	f105 031c 	add.w	r3, r5, #28
	if (!_M_is_local())
 800b16a:	4298      	cmp	r0, r3
 800b16c:	d003      	beq.n	800b176 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xea>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b16e:	69e9      	ldr	r1, [r5, #28]
 800b170:	3101      	adds	r1, #1
 800b172:	f005 fdbd 	bl	8010cf0 <_ZdlPvj>
 800b176:	212c      	movs	r1, #44	; 0x2c
 800b178:	4628      	mov	r0, r5
 800b17a:	f005 fdb9 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d0de      	beq.n	800b140 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xb4>
 800b182:	4635      	mov	r5, r6
 800b184:	e7a3      	b.n	800b0ce <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x42>
      { return _M_dataplus._M_p; }
 800b186:	f8db 0014 	ldr.w	r0, [fp, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b18a:	f8db 4008 	ldr.w	r4, [fp, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b18e:	f10b 031c 	add.w	r3, fp, #28
	if (!_M_is_local())
 800b192:	4298      	cmp	r0, r3
 800b194:	d004      	beq.n	800b1a0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x114>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b196:	f8db 101c 	ldr.w	r1, [fp, #28]
 800b19a:	3101      	adds	r1, #1
 800b19c:	f005 fda8 	bl	8010cf0 <_ZdlPvj>
 800b1a0:	212c      	movs	r1, #44	; 0x2c
 800b1a2:	4658      	mov	r0, fp
 800b1a4:	f005 fda4 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b1a8:	b1ac      	cbz	r4, 800b1d6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x14a>
 800b1aa:	46a3      	mov	fp, r4
 800b1ac:	e788      	b.n	800b0c0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x34>
      { return _M_dataplus._M_p; }
 800b1ae:	6970      	ldr	r0, [r6, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b1b0:	f8d6 8008 	ldr.w	r8, [r6, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b1b4:	f106 031c 	add.w	r3, r6, #28
	if (!_M_is_local())
 800b1b8:	4298      	cmp	r0, r3
 800b1ba:	d003      	beq.n	800b1c4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x138>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b1bc:	69f1      	ldr	r1, [r6, #28]
 800b1be:	3101      	adds	r1, #1
 800b1c0:	f005 fd96 	bl	8010cf0 <_ZdlPvj>
 800b1c4:	212c      	movs	r1, #44	; 0x2c
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f005 fd92 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b1cc:	f1b8 0f00 	cmp.w	r8, #0
 800b1d0:	d0c7      	beq.n	800b162 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xd6>
 800b1d2:	4646      	mov	r6, r8
 800b1d4:	e77e      	b.n	800b0d4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x48>
      { return _M_dataplus._M_p; }
 800b1d6:	f8da 0014 	ldr.w	r0, [sl, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b1da:	f8da 4008 	ldr.w	r4, [sl, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b1de:	f10a 031c 	add.w	r3, sl, #28
	if (!_M_is_local())
 800b1e2:	4298      	cmp	r0, r3
 800b1e4:	d004      	beq.n	800b1f0 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x164>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b1e6:	f8da 101c 	ldr.w	r1, [sl, #28]
 800b1ea:	3101      	adds	r1, #1
 800b1ec:	f005 fd80 	bl	8010cf0 <_ZdlPvj>
 800b1f0:	212c      	movs	r1, #44	; 0x2c
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	f005 fd7c 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b1f8:	b10c      	cbz	r4, 800b1fe <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x172>
 800b1fa:	46a2      	mov	sl, r4
 800b1fc:	e75a      	b.n	800b0b4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x28>
      { return _M_dataplus._M_p; }
 800b1fe:	f8d9 0014 	ldr.w	r0, [r9, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b202:	f8d9 4008 	ldr.w	r4, [r9, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b206:	f109 031c 	add.w	r3, r9, #28
	if (!_M_is_local())
 800b20a:	4298      	cmp	r0, r3
 800b20c:	d004      	beq.n	800b218 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x18c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b20e:	f8d9 101c 	ldr.w	r1, [r9, #28]
 800b212:	3101      	adds	r1, #1
 800b214:	f005 fd6c 	bl	8010cf0 <_ZdlPvj>
 800b218:	212c      	movs	r1, #44	; 0x2c
 800b21a:	4648      	mov	r0, r9
 800b21c:	f005 fd68 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b220:	b10c      	cbz	r4, 800b226 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x19a>
 800b222:	46a1      	mov	r9, r4
 800b224:	e740      	b.n	800b0a8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1c>
      { return _M_dataplus._M_p; }
 800b226:	9a00      	ldr	r2, [sp, #0]
 800b228:	6950      	ldr	r0, [r2, #20]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b22a:	6894      	ldr	r4, [r2, #8]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b22c:	f102 031c 	add.w	r3, r2, #28
	if (!_M_is_local())
 800b230:	4298      	cmp	r0, r3
 800b232:	d003      	beq.n	800b23c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1b0>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b234:	69d1      	ldr	r1, [r2, #28]
 800b236:	3101      	adds	r1, #1
 800b238:	f005 fd5a 	bl	8010cf0 <_ZdlPvj>
 800b23c:	9800      	ldr	r0, [sp, #0]
 800b23e:	212c      	movs	r1, #44	; 0x2c
 800b240:	f005 fd56 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b244:	b10c      	cbz	r4, 800b24a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0x1be>
 800b246:	9400      	str	r4, [sp, #0]
 800b248:	e727      	b.n	800b09a <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0+0xe>
    }
 800b24a:	b003      	add	sp, #12
 800b24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b250 <_ZNSt3mapIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIhESaISt4pairIKhS5_EEED1Ev>:
 800b250:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b252:	6884      	ldr	r4, [r0, #8]
 800b254:	4606      	mov	r6, r0
      while (__x != 0)
 800b256:	b19c      	cbz	r4, 800b280 <_ZNSt3mapIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIhESaISt4pairIKhS5_EEED1Ev+0x30>
	  _M_erase(_S_right(__x));
 800b258:	68e0      	ldr	r0, [r4, #12]
 800b25a:	f7ff ff17 	bl	800b08c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E.isra.0>
      { return _M_dataplus._M_p; }
 800b25e:	6960      	ldr	r0, [r4, #20]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800b260:	f104 031c 	add.w	r3, r4, #28
	if (!_M_is_local())
 800b264:	4298      	cmp	r0, r3
 800b266:	4625      	mov	r5, r4
      { return static_cast<_Link_type>(__x->_M_left); }
 800b268:	68a4      	ldr	r4, [r4, #8]
 800b26a:	d003      	beq.n	800b274 <_ZNSt3mapIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIhESaISt4pairIKhS5_EEED1Ev+0x24>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b26c:	69e9      	ldr	r1, [r5, #28]
 800b26e:	3101      	adds	r1, #1
 800b270:	f005 fd3e 	bl	8010cf0 <_ZdlPvj>
 800b274:	212c      	movs	r1, #44	; 0x2c
 800b276:	4628      	mov	r0, r5
 800b278:	f005 fd3a 	bl	8010cf0 <_ZdlPvj>
      while (__x != 0)
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d1eb      	bne.n	800b258 <_ZNSt3mapIhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIhESaISt4pairIKhS5_EEED1Ev+0x8>
 800b280:	4630      	mov	r0, r6
 800b282:	bd70      	pop	{r4, r5, r6, pc}

0800b284 <_Z20get_tx_timestamp_u64v>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 800b284:	b510      	push	{r4, lr}
 800b286:	b082      	sub	sp, #8
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int i;

    dwt_readtxtimestamp(ts_tab);
 800b288:	466c      	mov	r4, sp
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7fe f9f2 	bl	8009674 <dwt_readtxtimestamp>
    uint64_t ts = 0;
 800b290:	2000      	movs	r0, #0
 800b292:	ab01      	add	r3, sp, #4
 800b294:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--) {
        ts <<= 8;
        ts |= ts_tab[i];
 800b296:	f893 c000 	ldrb.w	ip, [r3]
        ts <<= 8;
 800b29a:	0209      	lsls	r1, r1, #8
    for (i = 4; i >= 0; i--) {
 800b29c:	42a3      	cmp	r3, r4
        ts <<= 8;
 800b29e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    for (i = 4; i >= 0; i--) {
 800b2a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        ts |= ts_tab[i];
 800b2a6:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
    for (i = 4; i >= 0; i--) {
 800b2aa:	d1f4      	bne.n	800b296 <_Z20get_tx_timestamp_u64v+0x12>
    }
    return ts;
}
 800b2ac:	b002      	add	sp, #8
 800b2ae:	bd10      	pop	{r4, pc}

0800b2b0 <_Z20get_rx_timestamp_u64v>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	b082      	sub	sp, #8
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int i;

    dwt_readrxtimestamp(ts_tab);
 800b2b4:	466c      	mov	r4, sp
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7fe f9ec 	bl	8009694 <dwt_readrxtimestamp>
    uint64_t ts = 0;
 800b2bc:	2000      	movs	r0, #0
 800b2be:	ab01      	add	r3, sp, #4
 800b2c0:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--) {
        ts <<= 8;
        ts |= ts_tab[i];
 800b2c2:	f893 c000 	ldrb.w	ip, [r3]
        ts <<= 8;
 800b2c6:	0209      	lsls	r1, r1, #8
    for (i = 4; i >= 0; i--) {
 800b2c8:	42a3      	cmp	r3, r4
        ts <<= 8;
 800b2ca:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
    for (i = 4; i >= 0; i--) {
 800b2ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        ts |= ts_tab[i];
 800b2d2:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
    for (i = 4; i >= 0; i--) {
 800b2d6:	d1f4      	bne.n	800b2c2 <_Z20get_rx_timestamp_u64v+0x12>
    }
    return ts;
}
 800b2d8:	b002      	add	sp, #8
 800b2da:	bd10      	pop	{r4, pc}

0800b2dc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b2de:	688c      	ldr	r4, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	4617      	mov	r7, r2
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 800b2e4:	b1d4      	cbz	r4, 800b31c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x40>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 800b2e6:	f892 e000 	ldrb.w	lr, [r2]
 800b2ea:	e000      	b.n	800b2ee <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x12>
 800b2ec:	461c      	mov	r4, r3
 800b2ee:	f894 c010 	ldrb.w	ip, [r4, #16]
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b2f2:	68e2      	ldr	r2, [r4, #12]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b2f4:	68a3      	ldr	r3, [r4, #8]
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b2f6:	45f4      	cmp	ip, lr
 800b2f8:	bf96      	itet	ls
 800b2fa:	4613      	movls	r3, r2
 800b2fc:	2501      	movhi	r5, #1
 800b2fe:	2500      	movls	r5, #0
      while (__x != 0)
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f3      	bne.n	800b2ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x10>
	}
      iterator __j = iterator(__y);
      if (__comp)
 800b304:	b95d      	cbnz	r5, 800b31e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x42>
 800b306:	4623      	mov	r3, r4
	  if (__j == begin())
	    return _Res(__x, __y);
	  else
	    --__j;
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b308:	45e6      	cmp	lr, ip
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b30a:	bf8b      	itete	hi
 800b30c:	2200      	movhi	r2, #0
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b30e:	2300      	movls	r3, #0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b310:	e9c6 2300 	strdhi	r2, r3, [r6]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b314:	e9c6 4300 	strdls	r4, r3, [r6]
	return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }
 800b318:	4630      	mov	r0, r6
 800b31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return &this->_M_impl._M_header; }
 800b31c:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 800b31e:	68cb      	ldr	r3, [r1, #12]
 800b320:	42a3      	cmp	r3, r4
 800b322:	d009      	beq.n	800b338 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x5c>
	_M_node = _Rb_tree_decrement(_M_node);
 800b324:	4620      	mov	r0, r4
 800b326:	f005 fd4d 	bl	8010dc4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	return *this;
 800b32a:	4623      	mov	r3, r4
 800b32c:	f897 e000 	ldrb.w	lr, [r7]
 800b330:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b334:	4604      	mov	r4, r0
 800b336:	e7e7      	b.n	800b308 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x2c>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b338:	2300      	movs	r3, #0
 800b33a:	e9c6 3400 	strd	r3, r4, [r6]
    }
 800b33e:	4630      	mov	r0, r6
 800b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b342:	bf00      	nop

0800b344 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>:
	   typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b348:	4614      	mov	r4, r2
      { return &this->_M_impl._M_header; }
 800b34a:	1d0a      	adds	r2, r1, #4
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;

      // end()
      if (__pos._M_node == _M_end())
 800b34c:	4294      	cmp	r4, r2
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b34e:	460f      	mov	r7, r1
 800b350:	4606      	mov	r6, r0
 800b352:	461d      	mov	r5, r3
      if (__pos._M_node == _M_end())
 800b354:	d023      	beq.n	800b39e <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x5a>
 800b356:	f893 8000 	ldrb.w	r8, [r3]
 800b35a:	7c23      	ldrb	r3, [r4, #16]
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
	    return _Res(0, _M_rightmost());
	  else
	    return _M_get_insert_unique_pos(__k);
	}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b35c:	4543      	cmp	r3, r8
 800b35e:	d90f      	bls.n	800b380 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x3c>
	{
	  // First, try before...
	  iterator __before = __pos;
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b360:	68cb      	ldr	r3, [r1, #12]
 800b362:	42a3      	cmp	r3, r4
 800b364:	d036      	beq.n	800b3d4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
 800b366:	4620      	mov	r0, r4
 800b368:	f005 fd2c 	bl	8010dc4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	    return _Res(_M_leftmost(), _M_leftmost());
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b36c:	7c03      	ldrb	r3, [r0, #16]
 800b36e:	4543      	cmp	r3, r8
 800b370:	d21c      	bcs.n	800b3ac <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
	    {
	      if (_S_right(__before._M_node) == 0)
 800b372:	68c3      	ldr	r3, [r0, #12]
 800b374:	b39b      	cbz	r3, 800b3de <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x9a>
 800b376:	e9c6 4400 	strd	r4, r4, [r6]
	    return _M_get_insert_unique_pos(__k);
	}
      else
	// Equivalent keys.
	return _Res(__pos._M_node, 0);
    }
 800b37a:	4630      	mov	r0, r6
 800b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b380:	d21c      	bcs.n	800b3bc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x78>
	  if (__pos._M_node == _M_rightmost())
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	42a3      	cmp	r3, r4
 800b386:	d01f      	beq.n	800b3c8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x84>
	_M_node = _Rb_tree_increment(_M_node);
 800b388:	4620      	mov	r0, r4
 800b38a:	f005 fd19 	bl	8010dc0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b38e:	7c03      	ldrb	r3, [r0, #16]
 800b390:	4543      	cmp	r3, r8
 800b392:	d90b      	bls.n	800b3ac <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
	      if (_S_right(__pos._M_node) == 0)
 800b394:	68e3      	ldr	r3, [r4, #12]
 800b396:	b32b      	cbz	r3, 800b3e4 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xa0>
 800b398:	e9c6 0000 	strd	r0, r0, [r6]
 800b39c:	e00b      	b.n	800b3b6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x72>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b39e:	694b      	ldr	r3, [r1, #20]
 800b3a0:	b123      	cbz	r3, 800b3ac <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	7829      	ldrb	r1, [r5, #0]
 800b3a6:	7c1a      	ldrb	r2, [r3, #16]
 800b3a8:	4291      	cmp	r1, r2
 800b3aa:	d80d      	bhi.n	800b3c8 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x84>
	    return _M_get_insert_unique_pos(__k);
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	4639      	mov	r1, r7
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff ff93 	bl	800b2dc <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
    }
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b3bc:	2300      	movs	r3, #0
 800b3be:	e9c0 4300 	strd	r4, r3, [r0]
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       : first(__x), second(std::forward<_U2>(__y)) { }
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	e9c6 2300 	strd	r2, r3, [r6]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b3d4:	e9c0 3300 	strd	r3, r3, [r0]
 800b3d8:	4630      	mov	r0, r6
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       : first(__x), second(std::forward<_U2>(__y)) { }
 800b3de:	e9c6 3000 	strd	r3, r0, [r6]
 800b3e2:	e7e8      	b.n	800b3b6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x72>
 800b3e4:	e9c6 3400 	strd	r3, r4, [r6]
 800b3e8:	e7e5      	b.n	800b3b6 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x72>
 800b3ea:	bf00      	nop

0800b3ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>:
	  for (; __first != __last; ++__first)
 800b3ec:	4291      	cmp	r1, r2
 800b3ee:	d045      	beq.n	800b47c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x90>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	4691      	mov	r9, r2
 800b3fa:	4607      	mov	r7, r0
      { return iterator(&this->_M_impl._M_header); }
 800b3fc:	f100 0804 	add.w	r8, r0, #4
 800b400:	e01c      	b.n	800b43c <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x50>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b402:	202c      	movs	r0, #44	; 0x2c
 800b404:	f005 fc76 	bl	8010cf4 <_Znwj>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 800b408:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800b40c:	4605      	mov	r5, r0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800b40e:	f100 031c 	add.w	r3, r0, #28
      constexpr pair(const pair&) = default;	///< Copy constructor
 800b412:	f894 c000 	ldrb.w	ip, [r4]
 800b416:	f885 c010 	strb.w	ip, [r5, #16]
          _M_construct(__beg, __end, _Tag());
 800b41a:	440a      	add	r2, r1
 800b41c:	3014      	adds	r0, #20
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800b41e:	616b      	str	r3, [r5, #20]
          _M_construct(__beg, __end, _Tag());
 800b420:	f7ff fc04 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0>
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800b424:	4643      	mov	r3, r8
 800b426:	4632      	mov	r2, r6
 800b428:	4629      	mov	r1, r5
 800b42a:	4650      	mov	r0, sl
 800b42c:	f005 fccc 	bl	8010dc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	3301      	adds	r3, #1
 800b434:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first)
 800b436:	341c      	adds	r4, #28
 800b438:	45a1      	cmp	r9, r4
 800b43a:	d019      	beq.n	800b470 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x84>
			const _Val& __v,
#endif
			_NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b43c:	4623      	mov	r3, r4
 800b43e:	4642      	mov	r2, r8
 800b440:	4639      	mov	r1, r7
 800b442:	4668      	mov	r0, sp
 800b444:	f7ff ff7e 	bl	800b344 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>
 800b448:	9e01      	ldr	r6, [sp, #4]

      if (__res.second)
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d0f3      	beq.n	800b436 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	f04f 0a01 	mov.w	sl, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1d4      	bne.n	800b402 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x16>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b458:	45b0      	cmp	r8, r6
 800b45a:	d00c      	beq.n	800b476 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x8a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b45c:	f894 a000 	ldrb.w	sl, [r4]
 800b460:	7c33      	ldrb	r3, [r6, #16]
 800b462:	459a      	cmp	sl, r3
 800b464:	bf2c      	ite	cs
 800b466:	f04f 0a00 	movcs.w	sl, #0
 800b46a:	f04f 0a01 	movcc.w	sl, #1
 800b46e:	e7c8      	b.n	800b402 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x16>
	}
 800b470:	b002      	add	sp, #8
 800b472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b476:	f04f 0a01 	mov.w	sl, #1
 800b47a:	e7c2      	b.n	800b402 <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x16>
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop

0800b480 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b484:	688c      	ldr	r4, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b486:	4680      	mov	r8, r0
 800b488:	4691      	mov	r9, r2
      while (__x != 0)
 800b48a:	b1cc      	cbz	r4, 800b4c0 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x40>
 800b48c:	6816      	ldr	r6, [r2, #0]
 800b48e:	e000      	b.n	800b492 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x12>
 800b490:	461c      	mov	r4, r3
 800b492:	6925      	ldr	r5, [r4, #16]
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b494:	68e2      	ldr	r2, [r4, #12]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b496:	68a3      	ldr	r3, [r4, #8]
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b498:	42b5      	cmp	r5, r6
 800b49a:	bf96      	itet	ls
 800b49c:	4613      	movls	r3, r2
 800b49e:	2701      	movhi	r7, #1
 800b4a0:	2700      	movls	r7, #0
      while (__x != 0)
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1f4      	bne.n	800b490 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x10>
      if (__comp)
 800b4a6:	b967      	cbnz	r7, 800b4c2 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x42>
 800b4a8:	4623      	mov	r3, r4
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b4aa:	42ae      	cmp	r6, r5
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b4ac:	bf8b      	itete	hi
 800b4ae:	2200      	movhi	r2, #0
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b4b0:	2300      	movls	r3, #0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b4b2:	e9c8 2300 	strdhi	r2, r3, [r8]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800b4b6:	e9c8 4300 	strdls	r4, r3, [r8]
    }
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return &this->_M_impl._M_header; }
 800b4c0:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 800b4c2:	68cb      	ldr	r3, [r1, #12]
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d008      	beq.n	800b4da <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x5a>
	_M_node = _Rb_tree_decrement(_M_node);
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f005 fc7b 	bl	8010dc4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	return *this;
 800b4ce:	4623      	mov	r3, r4
 800b4d0:	f8d9 6000 	ldr.w	r6, [r9]
 800b4d4:	6905      	ldr	r5, [r0, #16]
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	e7e7      	b.n	800b4aa <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_+0x2a>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e9c8 3400 	strd	r3, r4, [r8]
    }
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	bf00      	nop

0800b4e8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>:
	  for (; __first != __last; ++__first)
 800b4e8:	4291      	cmp	r1, r2
 800b4ea:	d04d      	beq.n	800b588 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0xa0>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4690      	mov	r8, r2
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	4606      	mov	r6, r0
      { return iterator(&this->_M_impl._M_header); }
 800b4f6:	f100 0904 	add.w	r9, r0, #4
 800b4fa:	f101 041c 	add.w	r4, r1, #28
 800b4fe:	e02e      	b.n	800b55e <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x76>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b500:	6937      	ldr	r7, [r6, #16]
 800b502:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800b506:	6939      	ldr	r1, [r7, #16]
 800b508:	4299      	cmp	r1, r3
 800b50a:	d22d      	bcs.n	800b568 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x80>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b50c:	45b9      	cmp	r9, r7
 800b50e:	d035      	beq.n	800b57c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x94>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b510:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	429a      	cmp	r2, r3
 800b518:	bf2c      	ite	cs
 800b51a:	f04f 0a00 	movcs.w	sl, #0
 800b51e:	f04f 0a01 	movcc.w	sl, #1
 800b522:	202c      	movs	r0, #44	; 0x2c
 800b524:	f005 fbe6 	bl	8010cf4 <_Znwj>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 800b528:	e954 1206 	ldrd	r1, r2, [r4, #-24]
      constexpr pair(const pair&) = default;	///< Copy constructor
 800b52c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800b530:	4605      	mov	r5, r0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800b532:	301c      	adds	r0, #28
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 800b534:	e9c5 3004 	strd	r3, r0, [r5, #16]
          _M_construct(__beg, __end, _Tag());
 800b538:	440a      	add	r2, r1
 800b53a:	f105 0014 	add.w	r0, r5, #20
 800b53e:	f7ff fb75 	bl	800ac2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0>
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800b542:	464b      	mov	r3, r9
 800b544:	463a      	mov	r2, r7
 800b546:	4629      	mov	r1, r5
 800b548:	4650      	mov	r0, sl
 800b54a:	f005 fc3d 	bl	8010dc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800b54e:	6973      	ldr	r3, [r6, #20]
 800b550:	3301      	adds	r3, #1
 800b552:	6173      	str	r3, [r6, #20]
	  for (; __first != __last; ++__first)
 800b554:	45a0      	cmp	r8, r4
 800b556:	f104 031c 	add.w	r3, r4, #28
 800b55a:	d012      	beq.n	800b582 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x9a>
 800b55c:	461c      	mov	r4, r3
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b55e:	6973      	ldr	r3, [r6, #20]
 800b560:	f1a4 021c 	sub.w	r2, r4, #28
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1cb      	bne.n	800b500 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x18>
	    return _M_get_insert_unique_pos(__k);
 800b568:	4631      	mov	r1, r6
 800b56a:	4668      	mov	r0, sp
 800b56c:	f7ff ff88 	bl	800b480 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE24_M_get_insert_unique_posERS1_>
 800b570:	e9dd 3700 	ldrd	r3, r7, [sp]
      if (__res.second)
 800b574:	2f00      	cmp	r7, #0
 800b576:	d0ed      	beq.n	800b554 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x6c>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0c7      	beq.n	800b50c <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x24>
 800b57c:	f04f 0a01 	mov.w	sl, #1
 800b580:	e7cf      	b.n	800b522 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x3a>
	}
 800b582:	b002      	add	sp, #8
 800b584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop

0800b58c <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
 800b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
      _M_header._M_color = _S_red;
 800b58e:	48b5      	ldr	r0, [pc, #724]	; (800b864 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
std::map<std::string,uint8_t> invmap_dataRate,invmap_rxPAC,invmap_txPreambLength;
 800b590:	4ab5      	ldr	r2, [pc, #724]	; (800b868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
 800b592:	49b6      	ldr	r1, [pc, #728]	; (800b86c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
 800b594:	2400      	movs	r4, #0
      _M_header._M_left = &_M_header;
 800b596:	1d03      	adds	r3, r0, #4
}
 800b598:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 800b59c:	e9c0 4302 	strd	r4, r3, [r0, #8]
      _M_node_count = 0;
 800b5a0:	e9c0 3404 	strd	r3, r4, [r0, #16]
      _M_header._M_color = _S_red;
 800b5a4:	7104      	strb	r4, [r0, #4]
std::map<std::string,uint8_t> invmap_dataRate,invmap_rxPAC,invmap_txPreambLength;
 800b5a6:	f7f7 fde3 	bl	8003170 <__aeabi_atexit>
 800b5aa:	48b1      	ldr	r0, [pc, #708]	; (800b870 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
 800b5ac:	4aae      	ldr	r2, [pc, #696]	; (800b868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
 800b5ae:	49af      	ldr	r1, [pc, #700]	; (800b86c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
 800b5b0:	7104      	strb	r4, [r0, #4]
      _M_header._M_left = &_M_header;
 800b5b2:	1d03      	adds	r3, r0, #4
 800b5b4:	e9c0 4302 	strd	r4, r3, [r0, #8]
      _M_node_count = 0;
 800b5b8:	e9c0 3404 	strd	r3, r4, [r0, #16]
 800b5bc:	f7f7 fdd8 	bl	8003170 <__aeabi_atexit>
      _M_header._M_color = _S_red;
 800b5c0:	48ac      	ldr	r0, [pc, #688]	; (800b874 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
 800b5c2:	4aa9      	ldr	r2, [pc, #676]	; (800b868 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
 800b5c4:	49a9      	ldr	r1, [pc, #676]	; (800b86c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
 800b5c6:	7104      	strb	r4, [r0, #4]
      _M_header._M_left = &_M_header;
 800b5c8:	1d03      	adds	r3, r0, #4
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b5ca:	ad01      	add	r5, sp, #4
 800b5cc:	e9c0 4302 	strd	r4, r3, [r0, #8]
      _M_node_count = 0;
 800b5d0:	e9c0 3404 	strd	r3, r4, [r0, #16]
 800b5d4:	f7f7 fdcc 	bl	8003170 <__aeabi_atexit>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	49a7      	ldr	r1, [pc, #668]	; (800b878 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	a802      	add	r0, sp, #8
 800b5e0:	f7ff faf2 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	49a5      	ldr	r1, [pc, #660]	; (800b87c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
 800b5e8:	61eb      	str	r3, [r5, #28]
 800b5ea:	a809      	add	r0, sp, #36	; 0x24
 800b5ec:	f7ff faec 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	49a3      	ldr	r1, [pc, #652]	; (800b880 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
 800b5f4:	63ab      	str	r3, [r5, #56]	; 0x38
 800b5f6:	a810      	add	r0, sp, #64	; 0x40
 800b5f8:	f7ff fae6 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b5fc:	2308      	movs	r3, #8
 800b5fe:	49a1      	ldr	r1, [pc, #644]	; (800b884 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
 800b600:	656b      	str	r3, [r5, #84]	; 0x54
 800b602:	a817      	add	r0, sp, #92	; 0x5c
 800b604:	f7ff fae0 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b608:	2310      	movs	r3, #16
 800b60a:	499f      	ldr	r1, [pc, #636]	; (800b888 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
 800b60c:	672b      	str	r3, [r5, #112]	; 0x70
 800b60e:	a81e      	add	r0, sp, #120	; 0x78
 800b610:	f7ff fada 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b614:	2320      	movs	r3, #32
 800b616:	499d      	ldr	r1, [pc, #628]	; (800b88c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
 800b618:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800b61c:	a825      	add	r0, sp, #148	; 0x94
 800b61e:	f7ff fad3 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	499a      	ldr	r1, [pc, #616]	; (800b890 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
 800b626:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800b62a:	a82c      	add	r0, sp, #176	; 0xb0
 800b62c:	f7ff facc 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b630:	2380      	movs	r3, #128	; 0x80
 800b632:	4998      	ldr	r1, [pc, #608]	; (800b894 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
 800b634:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
 800b638:	a833      	add	r0, sp, #204	; 0xcc
 800b63a:	f7ff fac5 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b63e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b642:	4995      	ldr	r1, [pc, #596]	; (800b898 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
 800b644:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b648:	a83a      	add	r0, sp, #232	; 0xe8
 800b64a:	f7ff fabd 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b64e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b652:	4992      	ldr	r1, [pc, #584]	; (800b89c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
 800b654:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
 800b658:	a841      	add	r0, sp, #260	; 0x104
 800b65a:	f7ff fab5 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b662:	498f      	ldr	r1, [pc, #572]	; (800b8a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
 800b664:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 800b668:	a848      	add	r0, sp, #288	; 0x120
 800b66a:	f7ff faad 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b66e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b672:	498c      	ldr	r1, [pc, #560]	; (800b8a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
 800b674:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
 800b678:	a84f      	add	r0, sp, #316	; 0x13c
 800b67a:	f7ff faa5 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b682:	4989      	ldr	r1, [pc, #548]	; (800b8a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
 800b684:	f8c5 3150 	str.w	r3, [r5, #336]	; 0x150
 800b688:	a856      	add	r0, sp, #344	; 0x158
 800b68a:	f7ff fa9d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b68e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b692:	4986      	ldr	r1, [pc, #536]	; (800b8ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
 800b694:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
 800b698:	a85d      	add	r0, sp, #372	; 0x174
 800b69a:	f7ff fa95 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b69e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6a2:	4983      	ldr	r1, [pc, #524]	; (800b8b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>)
 800b6a4:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
 800b6a8:	a864      	add	r0, sp, #400	; 0x190
 800b6aa:	f7ff fa8d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b2:	4980      	ldr	r1, [pc, #512]	; (800b8b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>)
 800b6b4:	f8c5 31a4 	str.w	r3, [r5, #420]	; 0x1a4
 800b6b8:	a86b      	add	r0, sp, #428	; 0x1ac
 800b6ba:	f7ff fa85 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6c2:	497d      	ldr	r1, [pc, #500]	; (800b8b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>)
 800b6c4:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
 800b6c8:	a872      	add	r0, sp, #456	; 0x1c8
 800b6ca:	f7ff fa7d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6d2:	497a      	ldr	r1, [pc, #488]	; (800b8bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
 800b6d4:	f8c5 31dc 	str.w	r3, [r5, #476]	; 0x1dc
 800b6d8:	a879      	add	r0, sp, #484	; 0x1e4
 800b6da:	f7ff fa75 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6e2:	4977      	ldr	r1, [pc, #476]	; (800b8c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>)
 800b6e4:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
 800b6e8:	a880      	add	r0, sp, #512	; 0x200
 800b6ea:	f7ff fa6d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6f2:	4974      	ldr	r1, [pc, #464]	; (800b8c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>)
 800b6f4:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800b6f8:	a887      	add	r0, sp, #540	; 0x21c
 800b6fa:	f7ff fa65 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b6fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b702:	4971      	ldr	r1, [pc, #452]	; (800b8c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
 800b704:	f8c5 3230 	str.w	r3, [r5, #560]	; 0x230
 800b708:	a88e      	add	r0, sp, #568	; 0x238
 800b70a:	f7ff fa5d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b70e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b712:	496e      	ldr	r1, [pc, #440]	; (800b8cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
 800b714:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 800b718:	a895      	add	r0, sp, #596	; 0x254
 800b71a:	f7ff fa55 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b71e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b722:	496b      	ldr	r1, [pc, #428]	; (800b8d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
 800b724:	f8c5 3268 	str.w	r3, [r5, #616]	; 0x268
 800b728:	a89c      	add	r0, sp, #624	; 0x270
 800b72a:	f7ff fa4d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b72e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b732:	4968      	ldr	r1, [pc, #416]	; (800b8d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
 800b734:	f8c5 3284 	str.w	r3, [r5, #644]	; 0x284
 800b738:	a8a3      	add	r0, sp, #652	; 0x28c
 800b73a:	f7ff fa45 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b73e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b742:	4965      	ldr	r1, [pc, #404]	; (800b8d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
 800b744:	f8c5 32a0 	str.w	r3, [r5, #672]	; 0x2a0
 800b748:	a8aa      	add	r0, sp, #680	; 0x2a8
 800b74a:	f7ff fa3d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b74e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b752:	4962      	ldr	r1, [pc, #392]	; (800b8dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
 800b754:	f8c5 32bc 	str.w	r3, [r5, #700]	; 0x2bc
 800b758:	a8b1      	add	r0, sp, #708	; 0x2c4
 800b75a:	f7ff fa35 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b75e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b762:	495f      	ldr	r1, [pc, #380]	; (800b8e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
 800b764:	f8c5 32d8 	str.w	r3, [r5, #728]	; 0x2d8
 800b768:	a8b8      	add	r0, sp, #736	; 0x2e0
 800b76a:	f7ff fa2d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b76e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b772:	495c      	ldr	r1, [pc, #368]	; (800b8e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
 800b774:	f8c5 32f4 	str.w	r3, [r5, #756]	; 0x2f4
 800b778:	a8bf      	add	r0, sp, #764	; 0x2fc
 800b77a:	f7ff fa25 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b77e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b782:	4959      	ldr	r1, [pc, #356]	; (800b8e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
 800b784:	f8c5 3310 	str.w	r3, [r5, #784]	; 0x310
 800b788:	a8c6      	add	r0, sp, #792	; 0x318
 800b78a:	f7ff fa1d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b78e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800b792:	4956      	ldr	r1, [pc, #344]	; (800b8ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
 800b794:	f8c5 332c 	str.w	r3, [r5, #812]	; 0x32c
 800b798:	a8cd      	add	r0, sp, #820	; 0x334
 800b79a:	f7ff fa15 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b79e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7a2:	4953      	ldr	r1, [pc, #332]	; (800b8f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
 800b7a4:	f8c5 3348 	str.w	r3, [r5, #840]	; 0x348
 800b7a8:	a8d4      	add	r0, sp, #848	; 0x350
 800b7aa:	f7ff fa0d 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7b2:	f8c5 3364 	str.w	r3, [r5, #868]	; 0x364
 800b7b6:	494f      	ldr	r1, [pc, #316]	; (800b8f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
 800b7b8:	a8db      	add	r0, sp, #876	; 0x36c
 800b7ba:	f7ff fa05 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7be:	494e      	ldr	r1, [pc, #312]	; (800b8f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
 800b7c0:	f8c5 4380 	str.w	r4, [r5, #896]	; 0x380
 800b7c4:	a8e2      	add	r0, sp, #904	; 0x388
 800b7c6:	f7ff f9ff 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7ca:	494c      	ldr	r1, [pc, #304]	; (800b8fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
 800b7cc:	f8c5 439c 	str.w	r4, [r5, #924]	; 0x39c
 800b7d0:	a8e9      	add	r0, sp, #932	; 0x3a4
 800b7d2:	f7ff f9f9 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7d6:	494a      	ldr	r1, [pc, #296]	; (800b900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
 800b7d8:	f8c5 43b8 	str.w	r4, [r5, #952]	; 0x3b8
 800b7dc:	a8f0      	add	r0, sp, #960	; 0x3c0
 800b7de:	f7ff f9f3 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7e2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800b7e6:	4947      	ldr	r1, [pc, #284]	; (800b904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
 800b7e8:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
 800b7ec:	a8f7      	add	r0, sp, #988	; 0x3dc
 800b7ee:	f7ff f9eb 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b7f2:	f44f 43de 	mov.w	r3, #28416	; 0x6f00
 800b7f6:	4944      	ldr	r1, [pc, #272]	; (800b908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
 800b7f8:	f8c5 33f0 	str.w	r3, [r5, #1008]	; 0x3f0
 800b7fc:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800b7fe:	f7ff f9e3 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b802:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800b806:	4941      	ldr	r1, [pc, #260]	; (800b90c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
 800b808:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
 800b80c:	f20d 4014 	addw	r0, sp, #1044	; 0x414
 800b810:	f7ff f9da 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b814:	4b3e      	ldr	r3, [pc, #248]	; (800b910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
 800b816:	493f      	ldr	r1, [pc, #252]	; (800b914 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
 800b818:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
 800b81c:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
 800b820:	f7ff f9d2 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b824:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 800b828:	493b      	ldr	r1, [pc, #236]	; (800b918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
 800b82a:	f8c5 3444 	str.w	r3, [r5, #1092]	; 0x444
 800b82e:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 800b832:	f7ff f9c9 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b836:	23f8      	movs	r3, #248	; 0xf8
 800b838:	4938      	ldr	r1, [pc, #224]	; (800b91c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
 800b83a:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
 800b83e:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 800b842:	f7ff f9c1 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
      _M_header._M_color = _S_red;
 800b846:	4836      	ldr	r0, [pc, #216]	; (800b920 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
      _M_header._M_left = &_M_header;
 800b848:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
 800b84a:	7104      	strb	r4, [r0, #4]
      _M_header._M_parent = 0;
 800b84c:	6084      	str	r4, [r0, #8]
      _M_node_count = 0;
 800b84e:	6144      	str	r4, [r0, #20]
      _M_header._M_right = &_M_header;
 800b850:	e9c0 3303 	strd	r3, r3, [r0, #12]
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800b854:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
 800b858:	4629      	mov	r1, r5
 800b85a:	f7ff fe45 	bl	800b4e8 <_ZNSt8_Rb_treeImSt4pairIKmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessImESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b85e:	f20d 4464 	addw	r4, sp, #1124	; 0x464
 800b862:	e060      	b.n	800b926 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39a>
 800b864:	20001428 	.word	0x20001428
 800b868:	20000d68 	.word	0x20000d68
 800b86c:	0800b059 	.word	0x0800b059
 800b870:	200013e0 	.word	0x200013e0
 800b874:	20001458 	.word	0x20001458
 800b878:	080125a0 	.word	0x080125a0
 800b87c:	080125c4 	.word	0x080125c4
 800b880:	080125d4 	.word	0x080125d4
 800b884:	080125f0 	.word	0x080125f0
 800b888:	08012610 	.word	0x08012610
 800b88c:	08012628 	.word	0x08012628
 800b890:	08012640 	.word	0x08012640
 800b894:	0801265c 	.word	0x0801265c
 800b898:	08012670 	.word	0x08012670
 800b89c:	08012694 	.word	0x08012694
 800b8a0:	080126c0 	.word	0x080126c0
 800b8a4:	080126d4 	.word	0x080126d4
 800b8a8:	080126f0 	.word	0x080126f0
 800b8ac:	0801270c 	.word	0x0801270c
 800b8b0:	08012728 	.word	0x08012728
 800b8b4:	0801273c 	.word	0x0801273c
 800b8b8:	08012750 	.word	0x08012750
 800b8bc:	08012778 	.word	0x08012778
 800b8c0:	08012794 	.word	0x08012794
 800b8c4:	080127bc 	.word	0x080127bc
 800b8c8:	080127cc 	.word	0x080127cc
 800b8cc:	080127e0 	.word	0x080127e0
 800b8d0:	080127fc 	.word	0x080127fc
 800b8d4:	0801280c 	.word	0x0801280c
 800b8d8:	0801281c 	.word	0x0801281c
 800b8dc:	08012830 	.word	0x08012830
 800b8e0:	08012848 	.word	0x08012848
 800b8e4:	0801285c 	.word	0x0801285c
 800b8e8:	08012878 	.word	0x08012878
 800b8ec:	08012890 	.word	0x08012890
 800b8f0:	080128b4 	.word	0x080128b4
 800b8f4:	080128d8 	.word	0x080128d8
 800b8f8:	08012904 	.word	0x08012904
 800b8fc:	0801292c 	.word	0x0801292c
 800b900:	08012948 	.word	0x08012948
 800b904:	08012968 	.word	0x08012968
 800b908:	0801298c 	.word	0x0801298c
 800b90c:	0801299c 	.word	0x0801299c
 800b910:	24059000 	.word	0x24059000
 800b914:	080129b8 	.word	0x080129b8
 800b918:	080129c8 	.word	0x080129c8
 800b91c:	080129e4 	.word	0x080129e4
 800b920:	20001410 	.word	0x20001410
 800b924:	461c      	mov	r4, r3
      { return _M_dataplus._M_p; }
 800b926:	6860      	ldr	r0, [r4, #4]
	if (!_M_is_local())
 800b928:	f104 030c 	add.w	r3, r4, #12
 800b92c:	4298      	cmp	r0, r3
 800b92e:	d003      	beq.n	800b938 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3ac>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800b930:	68e1      	ldr	r1, [r4, #12]
	::operator delete(__p
 800b932:	3101      	adds	r1, #1
 800b934:	f005 f9dc 	bl	8010cf0 <_ZdlPvj>
	};
 800b938:	42a5      	cmp	r5, r4
 800b93a:	f1a4 031c 	sub.w	r3, r4, #28
 800b93e:	d1f1      	bne.n	800b924 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>
std::map<unsigned long,std::string> map_reg_status {
 800b940:	4a5b      	ldr	r2, [pc, #364]	; (800bab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x524>)
 800b942:	495c      	ldr	r1, [pc, #368]	; (800bab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x528>)
 800b944:	485c      	ldr	r0, [pc, #368]	; (800bab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x52c>)
 800b946:	f7f7 fc13 	bl	8003170 <__aeabi_atexit>
 800b94a:	230c      	movs	r3, #12
 800b94c:	495b      	ldr	r1, [pc, #364]	; (800babc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x530>)
 800b94e:	702b      	strb	r3, [r5, #0]
 800b950:	a802      	add	r0, sp, #8
 800b952:	f7ff f939 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b956:	2328      	movs	r3, #40	; 0x28
 800b958:	4959      	ldr	r1, [pc, #356]	; (800bac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x534>)
 800b95a:	772b      	strb	r3, [r5, #28]
 800b95c:	a809      	add	r0, sp, #36	; 0x24
 800b95e:	f7ff f933 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b962:	2318      	movs	r3, #24
 800b964:	4957      	ldr	r1, [pc, #348]	; (800bac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x538>)
 800b966:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800b96a:	a810      	add	r0, sp, #64	; 0x40
 800b96c:	f7ff f92c 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b970:	2308      	movs	r3, #8
 800b972:	4955      	ldr	r1, [pc, #340]	; (800bac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x53c>)
 800b974:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 800b978:	a817      	add	r0, sp, #92	; 0x5c
 800b97a:	f7ff f925 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b97e:	2334      	movs	r3, #52	; 0x34
 800b980:	4952      	ldr	r1, [pc, #328]	; (800bacc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x540>)
 800b982:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
 800b986:	a81e      	add	r0, sp, #120	; 0x78
 800b988:	f7ff f91e 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b98c:	2324      	movs	r3, #36	; 0x24
 800b98e:	4950      	ldr	r1, [pc, #320]	; (800bad0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x544>)
 800b990:	f885 308c 	strb.w	r3, [r5, #140]	; 0x8c
 800b994:	a825      	add	r0, sp, #148	; 0x94
 800b996:	f7ff f917 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b99a:	2314      	movs	r3, #20
 800b99c:	494d      	ldr	r1, [pc, #308]	; (800bad4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x548>)
 800b99e:	f885 30a8 	strb.w	r3, [r5, #168]	; 0xa8
 800b9a2:	a82c      	add	r0, sp, #176	; 0xb0
 800b9a4:	f7ff f910 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	494b      	ldr	r1, [pc, #300]	; (800bad8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x54c>)
 800b9ac:	f885 30c4 	strb.w	r3, [r5, #196]	; 0xc4
 800b9b0:	a833      	add	r0, sp, #204	; 0xcc
 800b9b2:	f7ff f909 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
      _M_header._M_color = _S_red;
 800b9b6:	4849      	ldr	r0, [pc, #292]	; (800badc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x550>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	7103      	strb	r3, [r0, #4]
      _M_header._M_parent = 0;
 800b9bc:	6083      	str	r3, [r0, #8]
      _M_node_count = 0;
 800b9be:	6143      	str	r3, [r0, #20]
      _M_header._M_left = &_M_header;
 800b9c0:	1d03      	adds	r3, r0, #4
      _M_header._M_right = &_M_header;
 800b9c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9c6:	aa39      	add	r2, sp, #228	; 0xe4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	f7ff fd0f 	bl	800b3ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b9ce:	ac32      	add	r4, sp, #200	; 0xc8

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 800b9d0:	1d20      	adds	r0, r4, #4
 800b9d2:	f005 fa5d 	bl	8010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	};
 800b9d6:	42a5      	cmp	r5, r4
 800b9d8:	f1a4 041c 	sub.w	r4, r4, #28
 800b9dc:	d1f8      	bne.n	800b9d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x444>
std::map<uint8_t,std::string> map_txPreambLength {
 800b9de:	4a34      	ldr	r2, [pc, #208]	; (800bab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x524>)
 800b9e0:	493f      	ldr	r1, [pc, #252]	; (800bae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x554>)
 800b9e2:	483e      	ldr	r0, [pc, #248]	; (800badc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x550>)
 800b9e4:	2400      	movs	r4, #0
 800b9e6:	f7f7 fbc3 	bl	8003170 <__aeabi_atexit>
 800b9ea:	493e      	ldr	r1, [pc, #248]	; (800bae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x558>)
 800b9ec:	702c      	strb	r4, [r5, #0]
 800b9ee:	a802      	add	r0, sp, #8
 800b9f0:	f7ff f8ea 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	493c      	ldr	r1, [pc, #240]	; (800bae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x55c>)
 800b9f8:	772b      	strb	r3, [r5, #28]
 800b9fa:	a809      	add	r0, sp, #36	; 0x24
 800b9fc:	f7ff f8e4 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800ba00:	2302      	movs	r3, #2
 800ba02:	493a      	ldr	r1, [pc, #232]	; (800baec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x560>)
 800ba04:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800ba08:	a810      	add	r0, sp, #64	; 0x40
 800ba0a:	f7ff f8dd 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800ba0e:	2303      	movs	r3, #3
 800ba10:	4937      	ldr	r1, [pc, #220]	; (800baf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x564>)
 800ba12:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 800ba16:	a817      	add	r0, sp, #92	; 0x5c
 800ba18:	f7ff f8d6 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
      _M_header._M_color = _S_red;
 800ba1c:	4835      	ldr	r0, [pc, #212]	; (800baf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x568>)
      _M_header._M_left = &_M_header;
 800ba1e:	1d03      	adds	r3, r0, #4
      _M_header._M_color = _S_red;
 800ba20:	7104      	strb	r4, [r0, #4]
      _M_header._M_parent = 0;
 800ba22:	6084      	str	r4, [r0, #8]
      _M_node_count = 0;
 800ba24:	6144      	str	r4, [r0, #20]
 800ba26:	aa1d      	add	r2, sp, #116	; 0x74
      _M_header._M_right = &_M_header;
 800ba28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba2c:	4629      	mov	r1, r5
	};
 800ba2e:	4614      	mov	r4, r2
 800ba30:	f7ff fcdc 	bl	800b3ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 800ba34:	3c1c      	subs	r4, #28
 800ba36:	1d26      	adds	r6, r4, #4
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f005 fa29 	bl	8010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ba3e:	42ac      	cmp	r4, r5
 800ba40:	d1f8      	bne.n	800ba34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x4a8>
std::map<uint8_t,std::string> map_rxPAC {
 800ba42:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x524>)
 800ba44:	4926      	ldr	r1, [pc, #152]	; (800bae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x554>)
 800ba46:	482b      	ldr	r0, [pc, #172]	; (800baf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x568>)
      _M_header._M_color = _S_red;
 800ba48:	4d2b      	ldr	r5, [pc, #172]	; (800baf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x56c>)
 800ba4a:	2700      	movs	r7, #0
 800ba4c:	f7f7 fb90 	bl	8003170 <__aeabi_atexit>
 800ba50:	492a      	ldr	r1, [pc, #168]	; (800bafc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x570>)
 800ba52:	7027      	strb	r7, [r4, #0]
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff f8b7 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	7723      	strb	r3, [r4, #28]
 800ba5e:	4928      	ldr	r1, [pc, #160]	; (800bb00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x574>)
 800ba60:	a809      	add	r0, sp, #36	; 0x24
 800ba62:	f7ff f8b1 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
 800ba66:	2302      	movs	r3, #2
 800ba68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800ba6c:	4925      	ldr	r1, [pc, #148]	; (800bb04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x578>)
 800ba6e:	a810      	add	r0, sp, #64	; 0x40
 800ba70:	f7ff f8aa 	bl	800abc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0>
      _M_header._M_left = &_M_header;
 800ba74:	1d2b      	adds	r3, r5, #4
 800ba76:	4621      	mov	r1, r4
 800ba78:	aa16      	add	r2, sp, #88	; 0x58
      _M_header._M_right = &_M_header;
 800ba7a:	e9c5 3303 	strd	r3, r3, [r5, #12]
 800ba7e:	4628      	mov	r0, r5
      _M_header._M_color = _S_red;
 800ba80:	712f      	strb	r7, [r5, #4]
      _M_header._M_parent = 0;
 800ba82:	60af      	str	r7, [r5, #8]
      _M_node_count = 0;
 800ba84:	616f      	str	r7, [r5, #20]
 800ba86:	f7ff fcb1 	bl	800b3ec <_ZNSt8_Rb_treeIhSt4pairIKhNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 800ba8a:	a810      	add	r0, sp, #64	; 0x40
 800ba8c:	f005 fa00 	bl	8010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ba90:	a809      	add	r0, sp, #36	; 0x24
 800ba92:	f005 f9fd 	bl	8010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ba96:	4630      	mov	r0, r6
 800ba98:	f005 f9fa 	bl	8010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
std::map<uint8_t,std::string> map_dataRate {
 800ba9c:	4a04      	ldr	r2, [pc, #16]	; (800bab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x524>)
 800ba9e:	4910      	ldr	r1, [pc, #64]	; (800bae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x554>)
 800baa0:	4628      	mov	r0, r5
}
 800baa2:	f20d 4d84 	addw	sp, sp, #1156	; 0x484
 800baa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
std::map<uint8_t,std::string> map_dataRate {
 800baaa:	f7f7 bb61 	b.w	8003170 <__aeabi_atexit>
 800baae:	bf00      	nop
 800bab0:	20000d68 	.word	0x20000d68
 800bab4:	0800ae61 	.word	0x0800ae61
 800bab8:	20001410 	.word	0x20001410
 800babc:	080129f4 	.word	0x080129f4
 800bac0:	08012a04 	.word	0x08012a04
 800bac4:	08012a14 	.word	0x08012a14
 800bac8:	08012a24 	.word	0x08012a24
 800bacc:	08012a34 	.word	0x08012a34
 800bad0:	08012a44 	.word	0x08012a44
 800bad4:	08012a54 	.word	0x08012a54
 800bad8:	08012a64 	.word	0x08012a64
 800badc:	20001440 	.word	0x20001440
 800bae0:	0800b251 	.word	0x0800b251
 800bae4:	08012a70 	.word	0x08012a70
 800bae8:	08012a7c 	.word	0x08012a7c
 800baec:	08012a88 	.word	0x08012a88
 800baf0:	08012a94 	.word	0x08012a94
 800baf4:	20001470 	.word	0x20001470
 800baf8:	200013f8 	.word	0x200013f8
 800bafc:	08012aa0 	.word	0x08012aa0
 800bb00:	08012aac 	.word	0x08012aac
 800bb04:	08012ab8 	.word	0x08012ab8

0800bb08 <_GLOBAL__sub_I_dwt_ctx>:
}
 800bb08:	f7ff bd40 	b.w	800b58c <_Z41__static_initialization_and_destruction_0ii.constprop.0>

0800bb0c <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
    if (!hsv->v)
 800bb0c:	78c3      	ldrb	r3, [r0, #3]
 800bb0e:	b91b      	cbnz	r3, 800bb18 <led_hsv2rgb+0xc>
    {
        rgb->r = rgb->g = rgb->b = 0;
 800bb10:	70cb      	strb	r3, [r1, #3]
 800bb12:	708b      	strb	r3, [r1, #2]
 800bb14:	704b      	strb	r3, [r1, #1]
 800bb16:	4770      	bx	lr
{
 800bb18:	b430      	push	{r4, r5}
    }
    else if (!hsv->s)
 800bb1a:	7884      	ldrb	r4, [r0, #2]
 800bb1c:	b924      	cbnz	r4, 800bb28 <led_hsv2rgb+0x1c>
    {
        rgb->r = rgb->g = rgb->b = hsv->v;
 800bb1e:	70cb      	strb	r3, [r1, #3]
 800bb20:	708b      	strb	r3, [r1, #2]
 800bb22:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 800bb24:	bc30      	pop	{r4, r5}
 800bb26:	4770      	bx	lr
        int hue = hsv->h % 360;
 800bb28:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bb2c:	482a      	ldr	r0, [pc, #168]	; (800bbd8 <led_hsv2rgb+0xcc>)
 800bb2e:	fb80 5002 	smull	r5, r0, r0, r2
 800bb32:	4410      	add	r0, r2
 800bb34:	17d5      	asrs	r5, r2, #31
 800bb36:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 800bb3a:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800bb3e:	fb05 2210 	mls	r2, r5, r0, r2
 800bb42:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 800bb44:	2a00      	cmp	r2, #0
 800bb46:	bfb8      	it	lt
 800bb48:	1952      	addlt	r2, r2, r5
        int sector = hue / 60;
 800bb4a:	4824      	ldr	r0, [pc, #144]	; (800bbdc <led_hsv2rgb+0xd0>)
 800bb4c:	bfb8      	it	lt
 800bb4e:	b212      	sxthlt	r2, r2
 800bb50:	fba0 5002 	umull	r5, r0, r0, r2
 800bb54:	0940      	lsrs	r0, r0, #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800bb56:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 800bb5a:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
        int low = (255 - hsv->s) * high / 255;
 800bb5e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800bb62:	07c5      	lsls	r5, r0, #31
        switch (sector)
 800bb64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        int low = (255 - hsv->s) * high / 255;
 800bb68:	481d      	ldr	r0, [pc, #116]	; (800bbe0 <led_hsv2rgb+0xd4>)
        int middle = low + (high - low) * angle / 60;
 800bb6a:	4d1c      	ldr	r5, [pc, #112]	; (800bbdc <led_hsv2rgb+0xd0>)
        int low = (255 - hsv->s) * high / 255;
 800bb6c:	fb03 f404 	mul.w	r4, r3, r4
 800bb70:	fba0 0404 	umull	r0, r4, r0, r4
        int middle = low + (high - low) * angle / 60;
 800bb74:	eba3 10d4 	sub.w	r0, r3, r4, lsr #7
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800bb78:	bf48      	it	mi
 800bb7a:	f1c2 023c 	rsbmi	r2, r2, #60	; 0x3c
        int middle = low + (high - low) * angle / 60;
 800bb7e:	fb00 f202 	mul.w	r2, r0, r2
 800bb82:	fb85 5002 	smull	r5, r0, r5, r2
 800bb86:	4410      	add	r0, r2
 800bb88:	17d2      	asrs	r2, r2, #31
 800bb8a:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 800bb8e:	eb02 12d4 	add.w	r2, r2, r4, lsr #7
                rgb->g = middle;
 800bb92:	b2d2      	uxtb	r2, r2
                rgb->b = low;
 800bb94:	f3c4 14c7 	ubfx	r4, r4, #7, #8
        switch (sector)
 800bb98:	f1bc 0f04 	cmp.w	ip, #4
 800bb9c:	d818      	bhi.n	800bbd0 <led_hsv2rgb+0xc4>
 800bb9e:	e8df f00c 	tbb	[pc, ip]
 800bba2:	0b07      	.short	0x0b07
 800bba4:	130f      	.short	0x130f
 800bba6:	03          	.byte	0x03
 800bba7:	00          	.byte	0x00
                rgb->r = high;
 800bba8:	704b      	strb	r3, [r1, #1]
                rgb->g = low;
 800bbaa:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 800bbac:	70ca      	strb	r2, [r1, #3]
}
 800bbae:	e7b9      	b.n	800bb24 <led_hsv2rgb+0x18>
                rgb->r = middle;
 800bbb0:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 800bbb2:	708b      	strb	r3, [r1, #2]
                rgb->b = low;
 800bbb4:	70cc      	strb	r4, [r1, #3]
                break;
 800bbb6:	e7b5      	b.n	800bb24 <led_hsv2rgb+0x18>
                rgb->r = low;
 800bbb8:	704c      	strb	r4, [r1, #1]
                rgb->g = high;
 800bbba:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 800bbbc:	70ca      	strb	r2, [r1, #3]
                break;
 800bbbe:	e7b1      	b.n	800bb24 <led_hsv2rgb+0x18>
                rgb->r = low;
 800bbc0:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 800bbc2:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 800bbc4:	70cb      	strb	r3, [r1, #3]
                break;
 800bbc6:	e7ad      	b.n	800bb24 <led_hsv2rgb+0x18>
                rgb->r = middle;
 800bbc8:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 800bbca:	708c      	strb	r4, [r1, #2]
                rgb->b = high;
 800bbcc:	70cb      	strb	r3, [r1, #3]
                break;
 800bbce:	e7a9      	b.n	800bb24 <led_hsv2rgb+0x18>
                rgb->r = high;
 800bbd0:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 800bbd2:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 800bbd4:	70cc      	strb	r4, [r1, #3]
                break;
 800bbd6:	e7a5      	b.n	800bb24 <led_hsv2rgb+0x18>
 800bbd8:	b60b60b7 	.word	0xb60b60b7
 800bbdc:	88888889 	.word	0x88888889
 800bbe0:	80808081 	.word	0x80808081

0800bbe4 <lora_receive_error_timeout>:
    k_msgq_put(&msgq_rx_msg, data, K_NO_WAIT);
    k_msgq_put(&msgq_rssi, &rssi, K_NO_WAIT);
    k_spin_unlock(&spin, key);
}

void lora_receive_error_timeout(const struct device *dev) {
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4604      	mov	r4, r0
	__asm__ volatile(
 800bbe8:	f04f 0310 	mov.w	r3, #16
 800bbec:	f3ef 8211 	mrs	r2, BASEPRI
 800bbf0:	f383 8812 	msr	BASEPRI_MAX, r3
 800bbf4:	f3bf 8f6f 	isb	sy
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    key = k_spin_lock(&spin);
 800bbf8:	4d09      	ldr	r5, [pc, #36]	; (800bc20 <lora_receive_error_timeout+0x3c>)
	return api->recv_async(dev, cb, error_timeout_cb);
 800bbfa:	6883      	ldr	r3, [r0, #8]
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4611      	mov	r1, r2
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	4798      	blx	r3
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	4a06      	ldr	r2, [pc, #24]	; (800bc24 <lora_receive_error_timeout+0x40>)
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	4906      	ldr	r1, [pc, #24]	; (800bc28 <lora_receive_error_timeout+0x44>)
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4798      	blx	r3
	__asm__ volatile(
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
    /* Restart receive */
    lora_recv_async(dev, nullptr, nullptr);
    lora_recv_async(dev, lora_receive_cb, lora_receive_error_timeout);

    k_spin_unlock(&spin, key);
}
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	20001494 	.word	0x20001494
 800bc24:	0800bbe5 	.word	0x0800bbe5
 800bc28:	0800bc2d 	.word	0x0800bc2d

0800bc2c <lora_receive_cb>:
void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr) {
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	4615      	mov	r5, r2
 800bc32:	460c      	mov	r4, r1
 800bc34:	f8ad 300e 	strh.w	r3, [sp, #14]
    volatile uint16_t len = size;
 800bc38:	f8ad 2016 	strh.w	r2, [sp, #22]
	__asm__ volatile(
 800bc3c:	f04f 0310 	mov.w	r3, #16
 800bc40:	f3ef 8211 	mrs	r2, BASEPRI
 800bc44:	f383 8812 	msr	BASEPRI_MAX, r3
 800bc48:	f3bf 8f6f 	isb	sy
    if ((*data) == 13) {
 800bc4c:	780b      	ldrb	r3, [r1, #0]
    key = k_spin_lock(&spin);
 800bc4e:	4e22      	ldr	r6, [pc, #136]	; (800bcd8 <lora_receive_cb+0xac>)
    if ((*data) == 13) {
 800bc50:	2b0d      	cmp	r3, #13
    key = k_spin_lock(&spin);
 800bc52:	6032      	str	r2, [r6, #0]
    if ((*data) == 13) {
 800bc54:	d02c      	beq.n	800bcb0 <lora_receive_cb+0x84>
    if ((size != MESSAGE_LEN_IN_BYTES) || is_empty_msg(data, size)) {
 800bc56:	2d02      	cmp	r5, #2
 800bc58:	d103      	bne.n	800bc62 <lora_receive_cb+0x36>
        if (!(*(buf + i))) {
 800bc5a:	7823      	ldrb	r3, [r4, #0]
 800bc5c:	b9a3      	cbnz	r3, 800bc88 <lora_receive_cb+0x5c>
 800bc5e:	7863      	ldrb	r3, [r4, #1]
 800bc60:	b993      	cbnz	r3, 800bc88 <lora_receive_cb+0x5c>
 800bc62:	f3bf 8f5b 	dmb	ish
 800bc66:	4b1d      	ldr	r3, [pc, #116]	; (800bcdc <lora_receive_cb+0xb0>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	e853 1f00 	ldrex	r1, [r3]
 800bc6e:	e843 2000 	strex	r0, r2, [r3]
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d1f9      	bne.n	800bc6a <lora_receive_cb+0x3e>
 800bc76:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 800bc7a:	6833      	ldr	r3, [r6, #0]
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
}
 800bc84:	b006      	add	sp, #24
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_msgq_put(msgq, data, timeout);
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4814      	ldr	r0, [pc, #80]	; (800bce0 <lora_receive_cb+0xb4>)
 800bc90:	f001 fbb4 	bl	800d3fc <z_impl_k_msgq_put>
 800bc94:	2200      	movs	r2, #0
 800bc96:	2300      	movs	r3, #0
 800bc98:	f10d 010e 	add.w	r1, sp, #14
 800bc9c:	4811      	ldr	r0, [pc, #68]	; (800bce4 <lora_receive_cb+0xb8>)
 800bc9e:	f001 fbad 	bl	800d3fc <z_impl_k_msgq_put>
 800bca2:	6833      	ldr	r3, [r6, #0]
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	b006      	add	sp, #24
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
	z_impl_k_timer_stop(timer);
 800bcb0:	480d      	ldr	r0, [pc, #52]	; (800bce8 <lora_receive_cb+0xbc>)
 800bcb2:	f002 ffcd 	bl	800ec50 <z_impl_k_timer_stop>
	return z_impl_k_sleep(timeout);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bcbc:	f002 fc0e 	bl	800e4dc <z_impl_k_sleep>
        k_timer_start(&periodic_timer, K_MSEC(DURATION_TIME_MSEC), K_MSEC(PERIOD_TIME_MSEC));
 800bcc0:	f247 7288 	movw	r2, #30600	; 0x7788
 800bcc4:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 800bcc6:	4808      	ldr	r0, [pc, #32]	; (800bce8 <lora_receive_cb+0xbc>)
 800bcc8:	e9cd 2300 	strd	r2, r3, [sp]
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f002 ff66 	bl	800eba0 <z_impl_k_timer_start>
 800bcd4:	e7bf      	b.n	800bc56 <lora_receive_cb+0x2a>
 800bcd6:	bf00      	nop
 800bcd8:	20001488 	.word	0x20001488
 800bcdc:	200014ac 	.word	0x200014ac
 800bce0:	20000864 	.word	0x20000864
 800bce4:	20000830 	.word	0x20000830
 800bce8:	20000af0 	.word	0x20000af0

0800bcec <dwork_enable_ind_handler>:
    k_poll_signal_raise(&signal_indicate, STANDARD_MODE_INDICATION);
}

static inline void disable_ind()
{
    event_indicate.signal->signaled = 0;
 800bcec:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <dwork_enable_ind_handler+0x18>)
 800bcee:	691a      	ldr	r2, [r3, #16]
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	6091      	str	r1, [r2, #8]
    event_indicate.state = K_POLL_STATE_NOT_READY;
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	f361 3252 	bfi	r2, r1, #13, #6
 800bcfa:	60da      	str	r2, [r3, #12]
	z_impl_k_msgq_purge(msgq);
 800bcfc:	4802      	ldr	r0, [pc, #8]	; (800bd08 <dwork_enable_ind_handler+0x1c>)
 800bcfe:	f001 bc39 	b.w	800d574 <z_impl_k_msgq_purge>
 800bd02:	bf00      	nop
 800bd04:	20001538 	.word	0x20001538
 800bd08:	200007fc 	.word	0x200007fc

0800bd0c <work_buzzer_handler>:

void work_buzzer_handler(struct k_work *item) {
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bf60 <work_buzzer_handler+0x254>
 800bd14:	b08f      	sub	sp, #60	; 0x3c
 800bd16:	e003      	b.n	800bd20 <work_buzzer_handler+0x14>
	return z_impl_k_sleep(timeout);
 800bd18:	2032      	movs	r0, #50	; 0x32
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	f002 fbde 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_poll(events, num_events, timeout);
 800bd20:	2200      	movs	r2, #0
 800bd22:	2300      	movs	r3, #0
 800bd24:	2101      	movs	r1, #1
 800bd26:	4648      	mov	r0, r9
 800bd28:	f003 f9d4 	bl	800f0d4 <z_impl_k_poll>
    uint8_t i = 0;

    /* Wait while signal will be raised */
    while (k_poll(&event_buzzer, 1, K_NO_WAIT)) {
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1f3      	bne.n	800bd18 <work_buzzer_handler+0xc>
        k_sleep(K_MSEC(5));
    }

    switch (event_buzzer.signal->result) {
 800bd30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd34:	68dd      	ldr	r5, [r3, #12]
        case BUZZER_MODE_CONTINUOUS:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800bd36:	4b8b      	ldr	r3, [pc, #556]	; (800bf64 <work_buzzer_handler+0x258>)
    switch (event_buzzer.signal->result) {
 800bd38:	2d02      	cmp	r5, #2
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800bd3a:	f8d3 8000 	ldr.w	r8, [r3]
    switch (event_buzzer.signal->result) {
 800bd3e:	f000 818f 	beq.w	800c060 <work_buzzer_handler+0x354>
 800bd42:	2d03      	cmp	r5, #3
 800bd44:	d04a      	beq.n	800bddc <work_buzzer_handler+0xd0>
 800bd46:	2d01      	cmp	r5, #1
 800bd48:	f000 8112 	beq.w	800bf70 <work_buzzer_handler+0x264>
 800bd4c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC / 2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800bd50:	4b84      	ldr	r3, [pc, #528]	; (800bf64 <work_buzzer_handler+0x258>)
 800bd52:	681d      	ldr	r5, [r3, #0]
 800bd54:	68ab      	ldr	r3, [r5, #8]
 800bd56:	465a      	mov	r2, fp
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	2102      	movs	r1, #2
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800bd60:	4606      	mov	r6, r0
 800bd62:	bb70      	cbnz	r0, 800bdc2 <work_buzzer_handler+0xb6>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bd64:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 800bd68:	00a2      	lsls	r2, r4, #2
 800bd6a:	008b      	lsls	r3, r1, #2
 800bd6c:	1912      	adds	r2, r2, r4
 800bd6e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bd72:	eb41 0303 	adc.w	r3, r1, r3
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800bd7c:	00d2      	lsls	r2, r2, #3
 800bd7e:	1b12      	subs	r2, r2, r4
 800bd80:	eb63 0301 	sbc.w	r3, r3, r1
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 800bd8a:	0112      	lsls	r2, r2, #4
 800bd8c:	1912      	adds	r2, r2, r4
 800bd8e:	eb41 0303 	adc.w	r3, r1, r3
 800bd92:	019f      	lsls	r7, r3, #6
 800bd94:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 800bd98:	0194      	lsls	r4, r2, #6
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4a72      	ldr	r2, [pc, #456]	; (800bf68 <work_buzzer_handler+0x25c>)
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 feeb 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bda6:	4b71      	ldr	r3, [pc, #452]	; (800bf6c <work_buzzer_handler+0x260>)
 800bda8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bdac:	42a1      	cmp	r1, r4
 800bdae:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bdb0:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bdb2:	d306      	bcc.n	800bdc2 <work_buzzer_handler+0xb6>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800bdb4:	68ab      	ldr	r3, [r5, #8]
 800bdb6:	9600      	str	r6, [sp, #0]
 800bdb8:	681c      	ldr	r4, [r3, #0]
 800bdba:	4628      	mov	r0, r5
 800bdbc:	4633      	mov	r3, r6
 800bdbe:	2102      	movs	r1, #2
 800bdc0:	47a0      	blx	r4
                             0, PWM_FLAGS);
            break;
    }
    event_buzzer.signal->signaled = 0;
 800bdc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	609a      	str	r2, [r3, #8]
    event_buzzer.state = K_POLL_STATE_NOT_READY;
 800bdca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800bdce:	f362 3352 	bfi	r3, r2, #13, #6
 800bdd2:	f8c9 300c 	str.w	r3, [r9, #12]
}
 800bdd6:	b00f      	add	sp, #60	; 0x3c
 800bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (event_buzzer.signal->result) {
 800bddc:	2302      	movs	r3, #2
 800bdde:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800bde2:	9303      	str	r3, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bde4:	46da      	mov	sl, fp
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800bde6:	4b5f      	ldr	r3, [pc, #380]	; (800bf64 <work_buzzer_handler+0x258>)
 800bde8:	f8d3 8000 	ldr.w	r8, [r3]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800bdec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdf0:	4652      	mov	r2, sl
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	2102      	movs	r1, #2
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800bdfa:	9004      	str	r0, [sp, #16]
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d164      	bne.n	800beca <work_buzzer_handler+0x1be>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800be00:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800be04:	00aa      	lsls	r2, r5, #2
 800be06:	00b3      	lsls	r3, r6, #2
 800be08:	1957      	adds	r7, r2, r5
 800be0a:	ea43 7495 	orr.w	r4, r3, r5, lsr #30
 800be0e:	9407      	str	r4, [sp, #28]
 800be10:	eb46 0404 	adc.w	r4, r6, r4
 800be14:	00f8      	lsls	r0, r7, #3
 800be16:	00e4      	lsls	r4, r4, #3
 800be18:	ebb0 0b05 	subs.w	fp, r0, r5
 800be1c:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 800be20:	ea4f 1e0b 	mov.w	lr, fp, lsl #4
 800be24:	eb64 0406 	sbc.w	r4, r4, r6
 800be28:	9009      	str	r0, [sp, #36]	; 0x24
 800be2a:	0124      	lsls	r4, r4, #4
 800be2c:	4670      	mov	r0, lr
 800be2e:	9708      	str	r7, [sp, #32]
 800be30:	ea44 741b 	orr.w	r4, r4, fp, lsr #28
 800be34:	1947      	adds	r7, r0, r5
 800be36:	eb46 0404 	adc.w	r4, r6, r4
 800be3a:	01a4      	lsls	r4, r4, #6
 800be3c:	01bb      	lsls	r3, r7, #6
 800be3e:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 800be42:	9206      	str	r2, [sp, #24]
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	4618      	mov	r0, r3
 800be48:	4a47      	ldr	r2, [pc, #284]	; (800bf68 <work_buzzer_handler+0x25c>)
 800be4a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800be4e:	2300      	movs	r3, #0
 800be50:	4621      	mov	r1, r4
 800be52:	f7f4 fe93 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800be56:	f8dd c014 	ldr.w	ip, [sp, #20]
 800be5a:	4b44      	ldr	r3, [pc, #272]	; (800bf6c <work_buzzer_handler+0x260>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800be5c:	900b      	str	r0, [sp, #44]	; 0x2c
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800be5e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800be62:	45e6      	cmp	lr, ip
 800be64:	eb73 0104 	sbcs.w	r1, r3, r4
 800be68:	d32f      	bcc.n	800beca <work_buzzer_handler+0x1be>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800be6a:	9906      	ldr	r1, [sp, #24]
 800be6c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800be70:	9c08      	ldr	r4, [sp, #32]
 800be72:	194b      	adds	r3, r1, r5
 800be74:	9907      	ldr	r1, [sp, #28]
 800be76:	eb46 0301 	adc.w	r3, r6, r1
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	ebbc 0205 	subs.w	r2, ip, r5
 800be80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be84:	eb63 0306 	sbc.w	r3, r3, r6
 800be88:	990a      	ldr	r1, [sp, #40]	; 0x28
 800be8a:	4a37      	ldr	r2, [pc, #220]	; (800bf68 <work_buzzer_handler+0x25c>)
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	194d      	adds	r5, r1, r5
 800be90:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
 800be94:	eb46 0603 	adc.w	r6, r6, r3
 800be98:	0176      	lsls	r6, r6, #5
 800be9a:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 800be9e:	017f      	lsls	r7, r7, #5
 800bea0:	2300      	movs	r3, #0
 800bea2:	4638      	mov	r0, r7
 800bea4:	4631      	mov	r1, r6
 800bea6:	f7f4 fe69 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800beaa:	4930      	ldr	r1, [pc, #192]	; (800bf6c <work_buzzer_handler+0x260>)
 800beac:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800beb0:	45be      	cmp	lr, r7
 800beb2:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800beb4:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800beb6:	d308      	bcc.n	800beca <work_buzzer_handler+0x1be>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800beb8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800bebc:	9804      	ldr	r0, [sp, #16]
 800bebe:	9000      	str	r0, [sp, #0]
 800bec0:	680c      	ldr	r4, [r1, #0]
 800bec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bec4:	4640      	mov	r0, r8
 800bec6:	2102      	movs	r1, #2
 800bec8:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 800beca:	2100      	movs	r1, #0
 800becc:	f44f 7048 	mov.w	r0, #800	; 0x320
 800bed0:	f002 fb04 	bl	800e4dc <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800bed4:	4b23      	ldr	r3, [pc, #140]	; (800bf64 <work_buzzer_handler+0x258>)
 800bed6:	681e      	ldr	r6, [r3, #0]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800bed8:	68b3      	ldr	r3, [r6, #8]
 800beda:	4652      	mov	r2, sl
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	2102      	movs	r1, #2
 800bee0:	4630      	mov	r0, r6
 800bee2:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800bee4:	4605      	mov	r5, r0
 800bee6:	bb70      	cbnz	r0, 800bf46 <work_buzzer_handler+0x23a>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bee8:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 800beec:	00a2      	lsls	r2, r4, #2
 800beee:	008b      	lsls	r3, r1, #2
 800bef0:	1912      	adds	r2, r2, r4
 800bef2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bef6:	eb41 0303 	adc.w	r3, r1, r3
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800bf00:	00d2      	lsls	r2, r2, #3
 800bf02:	1b12      	subs	r2, r2, r4
 800bf04:	eb63 0301 	sbc.w	r3, r3, r1
 800bf08:	011b      	lsls	r3, r3, #4
 800bf0a:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 800bf0e:	0112      	lsls	r2, r2, #4
 800bf10:	1912      	adds	r2, r2, r4
 800bf12:	eb41 0303 	adc.w	r3, r1, r3
 800bf16:	019f      	lsls	r7, r3, #6
 800bf18:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 800bf1c:	0194      	lsls	r4, r2, #6
 800bf1e:	2300      	movs	r3, #0
 800bf20:	4a11      	ldr	r2, [pc, #68]	; (800bf68 <work_buzzer_handler+0x25c>)
 800bf22:	4620      	mov	r0, r4
 800bf24:	4639      	mov	r1, r7
 800bf26:	f7f4 fe29 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf2e:	42a3      	cmp	r3, r4
 800bf30:	4b0e      	ldr	r3, [pc, #56]	; (800bf6c <work_buzzer_handler+0x260>)
 800bf32:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bf34:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bf36:	d306      	bcc.n	800bf46 <work_buzzer_handler+0x23a>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800bf38:	68b3      	ldr	r3, [r6, #8]
 800bf3a:	9500      	str	r5, [sp, #0]
 800bf3c:	681c      	ldr	r4, [r3, #0]
 800bf3e:	4630      	mov	r0, r6
 800bf40:	462b      	mov	r3, r5
 800bf42:	2102      	movs	r1, #2
 800bf44:	47a0      	blx	r4
 800bf46:	f44f 7048 	mov.w	r0, #800	; 0x320
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	f002 fac6 	bl	800e4dc <z_impl_k_sleep>
            while (i < 2) {
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	f43f af35 	beq.w	800bdc2 <work_buzzer_handler+0xb6>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	e743      	b.n	800bde6 <work_buzzer_handler+0xda>
 800bf5e:	bf00      	nop
 800bf60:	2000036c 	.word	0x2000036c
 800bf64:	2000149c 	.word	0x2000149c
 800bf68:	000f4240 	.word	0x000f4240
 800bf6c:	000f423f 	.word	0x000f423f
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800bf70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf74:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	465a      	mov	r2, fp
 800bf7c:	2102      	movs	r1, #2
 800bf7e:	4640      	mov	r0, r8
 800bf80:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800bf82:	9004      	str	r0, [sp, #16]
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d165      	bne.n	800c054 <work_buzzer_handler+0x348>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bf88:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800bf8c:	00aa      	lsls	r2, r5, #2
 800bf8e:	00b3      	lsls	r3, r6, #2
 800bf90:	1950      	adds	r0, r2, r5
 800bf92:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 800bf96:	eb46 0401 	adc.w	r4, r6, r1
 800bf9a:	00c7      	lsls	r7, r0, #3
 800bf9c:	00e4      	lsls	r4, r4, #3
 800bf9e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800bfa2:	9708      	str	r7, [sp, #32]
 800bfa4:	1b7f      	subs	r7, r7, r5
 800bfa6:	eb64 0406 	sbc.w	r4, r4, r6
 800bfaa:	013b      	lsls	r3, r7, #4
 800bfac:	0124      	lsls	r4, r4, #4
 800bfae:	eb13 0a05 	adds.w	sl, r3, r5
 800bfb2:	ea44 7417 	orr.w	r4, r4, r7, lsr #28
 800bfb6:	eb46 0404 	adc.w	r4, r6, r4
 800bfba:	01a4      	lsls	r4, r4, #6
 800bfbc:	ea4f 1c8a 	mov.w	ip, sl, lsl #6
 800bfc0:	ea44 649a 	orr.w	r4, r4, sl, lsr #26
 800bfc4:	9205      	str	r2, [sp, #20]
 800bfc6:	9106      	str	r1, [sp, #24]
 800bfc8:	9007      	str	r0, [sp, #28]
 800bfca:	9309      	str	r3, [sp, #36]	; 0x24
 800bfcc:	4660      	mov	r0, ip
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4a61      	ldr	r2, [pc, #388]	; (800c158 <work_buzzer_handler+0x44c>)
 800bfd2:	f8cd c00c 	str.w	ip, [sp, #12]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	f7f4 fdd0 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bfdc:	f8dd c00c 	ldr.w	ip, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800bfe0:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800bfe2:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bfe6:	45e6      	cmp	lr, ip
 800bfe8:	f8df c170 	ldr.w	ip, [pc, #368]	; 800c15c <work_buzzer_handler+0x450>
 800bfec:	eb7c 0404 	sbcs.w	r4, ip, r4
 800bff0:	d330      	bcc.n	800c054 <work_buzzer_handler+0x348>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800bff2:	9a05      	ldr	r2, [sp, #20]
 800bff4:	9906      	ldr	r1, [sp, #24]
 800bff6:	9c08      	ldr	r4, [sp, #32]
 800bff8:	1953      	adds	r3, r2, r5
 800bffa:	eb46 0301 	adc.w	r3, r6, r1
 800bffe:	9907      	ldr	r1, [sp, #28]
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	1b62      	subs	r2, r4, r5
 800c004:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c008:	eb63 0306 	sbc.w	r3, r3, r6
 800c00c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c00e:	4a52      	ldr	r2, [pc, #328]	; (800c158 <work_buzzer_handler+0x44c>)
 800c010:	011b      	lsls	r3, r3, #4
 800c012:	194d      	adds	r5, r1, r5
 800c014:	ea43 7317 	orr.w	r3, r3, r7, lsr #28
 800c018:	eb46 0603 	adc.w	r6, r6, r3
 800c01c:	0176      	lsls	r6, r6, #5
 800c01e:	ea46 66da 	orr.w	r6, r6, sl, lsr #27
 800c022:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 800c026:	2300      	movs	r3, #0
 800c028:	4650      	mov	r0, sl
 800c02a:	4631      	mov	r1, r6
 800c02c:	f7f4 fda6 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c030:	f8df c128 	ldr.w	ip, [pc, #296]	; 800c15c <work_buzzer_handler+0x450>
 800c034:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c038:	45d6      	cmp	lr, sl
 800c03a:	eb7c 0106 	sbcs.w	r1, ip, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c03e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c040:	d308      	bcc.n	800c054 <work_buzzer_handler+0x348>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c042:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c046:	9804      	ldr	r0, [sp, #16]
 800c048:	9000      	str	r0, [sp, #0]
 800c04a:	680c      	ldr	r4, [r1, #0]
 800c04c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c04e:	4640      	mov	r0, r8
 800c050:	2102      	movs	r1, #2
 800c052:	47a0      	blx	r4
 800c054:	2100      	movs	r1, #0
 800c056:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c05a:	f002 fa3f 	bl	800e4dc <z_impl_k_sleep>
 800c05e:	e677      	b.n	800bd50 <work_buzzer_handler+0x44>
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c060:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c064:	aa0c      	add	r2, sp, #48	; 0x30
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	4629      	mov	r1, r5
 800c06a:	4640      	mov	r0, r8
 800c06c:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c06e:	9004      	str	r0, [sp, #16]
 800c070:	2800      	cmp	r0, #0
 800c072:	d16a      	bne.n	800c14a <work_buzzer_handler+0x43e>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c074:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800c078:	00b2      	lsls	r2, r6, #2
 800c07a:	00bb      	lsls	r3, r7, #2
 800c07c:	1990      	adds	r0, r2, r6
 800c07e:	ea43 7196 	orr.w	r1, r3, r6, lsr #30
 800c082:	eb47 0401 	adc.w	r4, r7, r1
 800c086:	00c3      	lsls	r3, r0, #3
 800c088:	00e4      	lsls	r4, r4, #3
 800c08a:	ebb3 0a06 	subs.w	sl, r3, r6
 800c08e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800c092:	eb64 0407 	sbc.w	r4, r4, r7
 800c096:	ea4f 1e0a 	mov.w	lr, sl, lsl #4
 800c09a:	0124      	lsls	r4, r4, #4
 800c09c:	eb1e 0b06 	adds.w	fp, lr, r6
 800c0a0:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 800c0a4:	eb47 0404 	adc.w	r4, r7, r4
 800c0a8:	01a4      	lsls	r4, r4, #6
 800c0aa:	ea4f 1c8b 	mov.w	ip, fp, lsl #6
 800c0ae:	ea44 649b 	orr.w	r4, r4, fp, lsr #26
 800c0b2:	9205      	str	r2, [sp, #20]
 800c0b4:	9106      	str	r1, [sp, #24]
 800c0b6:	9007      	str	r0, [sp, #28]
 800c0b8:	9308      	str	r3, [sp, #32]
 800c0ba:	4660      	mov	r0, ip
 800c0bc:	4621      	mov	r1, r4
 800c0be:	2300      	movs	r3, #0
 800c0c0:	4a25      	ldr	r2, [pc, #148]	; (800c158 <work_buzzer_handler+0x44c>)
 800c0c2:	f8cd c00c 	str.w	ip, [sp, #12]
 800c0c6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800c0ca:	f7f4 fd57 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c0ce:	f8dd c00c 	ldr.w	ip, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c0d2:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d8:	4563      	cmp	r3, ip
 800c0da:	f8df c080 	ldr.w	ip, [pc, #128]	; 800c15c <work_buzzer_handler+0x450>
 800c0de:	eb7c 0404 	sbcs.w	r4, ip, r4
 800c0e2:	d332      	bcc.n	800c14a <work_buzzer_handler+0x43e>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c0e4:	9a05      	ldr	r2, [sp, #20]
 800c0e6:	9906      	ldr	r1, [sp, #24]
 800c0e8:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c0ec:	9c07      	ldr	r4, [sp, #28]
 800c0ee:	1993      	adds	r3, r2, r6
 800c0f0:	eb47 0301 	adc.w	r3, r7, r1
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	ebbc 0206 	subs.w	r2, ip, r6
 800c0fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0fe:	eb63 0307 	sbc.w	r3, r3, r7
 800c102:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c104:	4a14      	ldr	r2, [pc, #80]	; (800c158 <work_buzzer_handler+0x44c>)
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	198e      	adds	r6, r1, r6
 800c10a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800c10e:	eb47 0703 	adc.w	r7, r7, r3
 800c112:	017f      	lsls	r7, r7, #5
 800c114:	ea47 67db 	orr.w	r7, r7, fp, lsr #27
 800c118:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
 800c11c:	2300      	movs	r3, #0
 800c11e:	4658      	mov	r0, fp
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 fd2b 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c12a:	f8df c030 	ldr.w	ip, [pc, #48]	; 800c15c <work_buzzer_handler+0x450>
 800c12e:	4559      	cmp	r1, fp
 800c130:	eb7c 0107 	sbcs.w	r1, ip, r7
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c134:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c136:	d308      	bcc.n	800c14a <work_buzzer_handler+0x43e>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c138:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c13c:	9c04      	ldr	r4, [sp, #16]
 800c13e:	9400      	str	r4, [sp, #0]
 800c140:	6804      	ldr	r4, [r0, #0]
 800c142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c144:	4629      	mov	r1, r5
 800c146:	4640      	mov	r0, r8
 800c148:	47a0      	blx	r4
 800c14a:	2100      	movs	r1, #0
 800c14c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c150:	f002 f9c4 	bl	800e4dc <z_impl_k_sleep>
            break;
 800c154:	e635      	b.n	800bdc2 <work_buzzer_handler+0xb6>
 800c156:	bf00      	nop
 800c158:	000f4240 	.word	0x000f4240
 800c15c:	000f423f 	.word	0x000f423f

0800c160 <set_ind>:
    if ((duration_min.ticks != K_FOREVER.ticks)) {
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c164:	bf08      	it	eq
 800c166:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800c16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16e:	4606      	mov	r6, r0
    if ((duration_min.ticks != K_FOREVER.ticks)) {
 800c170:	d107      	bne.n	800c182 <set_ind+0x22>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c172:	480e      	ldr	r0, [pc, #56]	; (800c1ac <set_ind+0x4c>)
 800c174:	4631      	mov	r1, r6
 800c176:	2200      	movs	r2, #0
}
 800c178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	2300      	movs	r3, #0
 800c17e:	f001 b93d 	b.w	800d3fc <z_impl_k_msgq_put>
	compiler_barrier();
 800c182:	4615      	mov	r5, r2
 800c184:	461c      	mov	r4, r3
	z_impl_k_poll_signal_check(sig, signaled, result);
 800c186:	4f0a      	ldr	r7, [pc, #40]	; (800c1b0 <set_ind+0x50>)
 800c188:	4a0a      	ldr	r2, [pc, #40]	; (800c1b4 <set_ind+0x54>)
 800c18a:	480b      	ldr	r0, [pc, #44]	; (800c1b8 <set_ind+0x58>)
 800c18c:	4639      	mov	r1, r7
 800c18e:	f003 f867 	bl	800f260 <z_impl_k_poll_signal_check>
        if (!indicate_is_enabled()) {
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1ec      	bne.n	800c172 <set_ind+0x12>
	return z_impl_k_poll_signal_raise(sig, result);
 800c198:	2101      	movs	r1, #1
 800c19a:	4807      	ldr	r0, [pc, #28]	; (800c1b8 <set_ind+0x58>)
 800c19c:	f003 f866 	bl	800f26c <z_impl_k_poll_signal_raise>
            k_work_schedule(&dwork_enable_ind, duration_min);
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	4623      	mov	r3, r4
 800c1a4:	4805      	ldr	r0, [pc, #20]	; (800c1bc <set_ind+0x5c>)
 800c1a6:	f001 fd1d 	bl	800dbe4 <k_work_schedule>
 800c1aa:	e7e2      	b.n	800c172 <set_ind+0x12>
 800c1ac:	200007fc 	.word	0x200007fc
 800c1b0:	20001490 	.word	0x20001490
 800c1b4:	2000148c 	.word	0x2000148c
 800c1b8:	2000158c 	.word	0x2000158c
 800c1bc:	20000ac0 	.word	0x20000ac0

0800c1c0 <work_button_pressed_handler>:
void work_button_pressed_handler(struct k_work *item) {
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    atomic_t atomic_interval_count = ATOMIC_INIT(0); /* Counted number of function button pressed call */
 800c1c4:	2500      	movs	r5, #0
void work_button_pressed_handler(struct k_work *item) {
 800c1c6:	b085      	sub	sp, #20
    struct led_strip_indicate_s *strip_ind = nullptr;
 800c1c8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800c1cc:	aa01      	add	r2, sp, #4
 800c1ce:	f3bf 8f5b 	dmb	ish
 800c1d2:	e852 3f00 	ldrex	r3, [r2]
 800c1d6:	e842 5100 	strex	r1, r5, [r2]
 800c1da:	2900      	cmp	r1, #0
 800c1dc:	d1f9      	bne.n	800c1d2 <work_button_pressed_handler+0x12>
 800c1de:	f3bf 8f5b 	dmb	ish
 800c1e2:	4f47      	ldr	r7, [pc, #284]	; (800c300 <work_button_pressed_handler+0x140>)
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c1e4:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c304 <work_button_pressed_handler+0x144>
                strip_ind = &short_pressed_button_ind;
 800c1e8:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800c308 <work_button_pressed_handler+0x148>
    bool middle_pressed_is_set = false;
 800c1ec:	46a9      	mov	r9, r5
    bool short_pressed_is_set = false;
 800c1ee:	46a8      	mov	r8, r5
    while (gpio_pin_get(irq_gpio_dev->port, irq_gpio_dev->pin)) {
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
 800c1f6:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
 800c1f8:	6883      	ldr	r3, [r0, #8]
 800c1fa:	a903      	add	r1, sp, #12
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	4798      	blx	r3
	if (ret == 0) {
 800c200:	b980      	cbnz	r0, 800c224 <work_button_pressed_handler+0x64>
		*value ^= data->invert;
 800c202:	6832      	ldr	r2, [r6, #0]
 800c204:	9b03      	ldr	r3, [sp, #12]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 800c206:	2601      	movs	r6, #1
		*value ^= data->invert;
 800c208:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 800c20a:	fa06 f404 	lsl.w	r4, r6, r4
 800c20e:	4223      	tst	r3, r4
 800c210:	d108      	bne.n	800c224 <work_button_pressed_handler+0x64>
    if (short_pressed_is_set) {
 800c212:	f1b8 0f00 	cmp.w	r8, #0
 800c216:	d157      	bne.n	800c2c8 <work_button_pressed_handler+0x108>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 800c218:	f1b9 0f00 	cmp.w	r9, #0
 800c21c:	d15e      	bne.n	800c2dc <work_button_pressed_handler+0x11c>
}
 800c21e:	b005      	add	sp, #20
 800c220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return z_impl_k_sleep(timeout);
 800c224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c228:	2100      	movs	r1, #0
 800c22a:	f002 f957 	bl	800e4dc <z_impl_k_sleep>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800c22e:	f3bf 8f5b 	dmb	ish
 800c232:	ab01      	add	r3, sp, #4
 800c234:	e853 2f00 	ldrex	r2, [r3]
 800c238:	3201      	adds	r2, #1
 800c23a:	e843 2100 	strex	r1, r2, [r3]
 800c23e:	2900      	cmp	r1, #0
 800c240:	d1f8      	bne.n	800c234 <work_button_pressed_handler+0x74>
 800c242:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800c246:	f3bf 8f5b 	dmb	ish
 800c24a:	9b01      	ldr	r3, [sp, #4]
 800c24c:	f3bf 8f5b 	dmb	ish
        if ((atomic_get(&atomic_interval_count) > SHORT_PRESSED_MIN_VAL) &&
 800c250:	2b04      	cmp	r3, #4
 800c252:	dd14      	ble.n	800c27e <work_button_pressed_handler+0xbe>
 800c254:	f3bf 8f5b 	dmb	ish
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	f3bf 8f5b 	dmb	ish
 800c25e:	2b0a      	cmp	r3, #10
 800c260:	dc0d      	bgt.n	800c27e <work_button_pressed_handler+0xbe>
            if (!short_pressed_is_set) {
 800c262:	f1b8 0f00 	cmp.w	r8, #0
 800c266:	d1c3      	bne.n	800c1f0 <work_button_pressed_handler+0x30>
                strip_ind = &short_pressed_button_ind;
 800c268:	f8cd b008 	str.w	fp, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c26c:	2200      	movs	r2, #0
 800c26e:	a902      	add	r1, sp, #8
 800c270:	4650      	mov	r0, sl
 800c272:	2300      	movs	r3, #0
                short_pressed_is_set = true;
 800c274:	f04f 0801 	mov.w	r8, #1
 800c278:	f001 f8c0 	bl	800d3fc <z_impl_k_msgq_put>
 800c27c:	e7b8      	b.n	800c1f0 <work_button_pressed_handler+0x30>
 800c27e:	f3bf 8f5b 	dmb	ish
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 800c288:	2b0b      	cmp	r3, #11
 800c28a:	dd14      	ble.n	800c2b6 <work_button_pressed_handler+0xf6>
 800c28c:	f3bf 8f5b 	dmb	ish
 800c290:	9b01      	ldr	r3, [sp, #4]
 800c292:	f3bf 8f5b 	dmb	ish
 800c296:	2b14      	cmp	r3, #20
 800c298:	dc0d      	bgt.n	800c2b6 <work_button_pressed_handler+0xf6>
            if (!middle_pressed_is_set) {
 800c29a:	f1b9 0f00 	cmp.w	r9, #0
 800c29e:	d1a7      	bne.n	800c1f0 <work_button_pressed_handler+0x30>
                strip_ind = &middle_pressed_button_ind;
 800c2a0:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <work_button_pressed_handler+0x14c>)
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	a902      	add	r1, sp, #8
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	2300      	movs	r3, #0
                middle_pressed_is_set = true;
 800c2ac:	f04f 0901 	mov.w	r9, #1
 800c2b0:	f001 f8a4 	bl	800d3fc <z_impl_k_msgq_put>
 800c2b4:	e79c      	b.n	800c1f0 <work_button_pressed_handler+0x30>
 800c2b6:	f3bf 8f5b 	dmb	ish
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	f3bf 8f5b 	dmb	ish
            long_pressed_is_set = true;
 800c2c0:	2b16      	cmp	r3, #22
 800c2c2:	bfa8      	it	ge
 800c2c4:	2501      	movge	r5, #1
 800c2c6:	e793      	b.n	800c1f0 <work_button_pressed_handler+0x30>
        k_work_submit(&work_buzzer);
 800c2c8:	4811      	ldr	r0, [pc, #68]	; (800c310 <work_button_pressed_handler+0x150>)
 800c2ca:	f001 fc23 	bl	800db14 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 800c2ce:	4811      	ldr	r0, [pc, #68]	; (800c314 <work_button_pressed_handler+0x154>)
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	f002 ffcb 	bl	800f26c <z_impl_k_poll_signal_raise>
    if (short_pressed_is_set && (!middle_pressed_is_set)) { /* Short pressed */
 800c2d6:	f1b9 0f00 	cmp.w	r9, #0
 800c2da:	d007      	beq.n	800c2ec <work_button_pressed_handler+0x12c>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 800c2dc:	2d00      	cmp	r5, #0
 800c2de:	d19e      	bne.n	800c21e <work_button_pressed_handler+0x5e>
        work_button_pressed_handler_dev(irq_gpio_dev);
 800c2e0:	6838      	ldr	r0, [r7, #0]
 800c2e2:	f7f5 ffb7 	bl	8002254 <work_button_pressed_handler_dev>
}
 800c2e6:	b005      	add	sp, #20
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        strip_ind = &status_ind;
 800c2ec:	490a      	ldr	r1, [pc, #40]	; (800c318 <work_button_pressed_handler+0x158>)
        set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800c2ee:	4a0b      	ldr	r2, [pc, #44]	; (800c31c <work_button_pressed_handler+0x15c>)
        strip_ind = &status_ind;
 800c2f0:	9102      	str	r1, [sp, #8]
        set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	a802      	add	r0, sp, #8
 800c2f6:	f7ff ff33 	bl	800c160 <set_ind>
}
 800c2fa:	b005      	add	sp, #20
 800c2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c300:	200014a8 	.word	0x200014a8
 800c304:	200007fc 	.word	0x200007fc
 800c308:	20000398 	.word	0x20000398
 800c30c:	20000380 	.word	0x20000380
 800c310:	200014c0 	.word	0x200014c0
 800c314:	200003a4 	.word	0x200003a4
 800c318:	200003b4 	.word	0x200003b4
 800c31c:	000927c0 	.word	0x000927c0

0800c320 <common_kernel_services_init>:
{
 800c320:	b508      	push	{r3, lr}
    buzzer_dev = DEVICE_DT_GET(PWM_CTLR);
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <common_kernel_services_init+0x44>)
 800c324:	4810      	ldr	r0, [pc, #64]	; (800c368 <common_kernel_services_init+0x48>)
 800c326:	6018      	str	r0, [r3, #0]
 800c328:	f000 fe78 	bl	800d01c <z_device_is_ready>
    if (!device_is_ready(buzzer_dev)) {
 800c32c:	b190      	cbz	r0, 800c354 <common_kernel_services_init+0x34>
    k_work_init(&work_buzzer, work_buzzer_handler);
 800c32e:	490f      	ldr	r1, [pc, #60]	; (800c36c <common_kernel_services_init+0x4c>)
 800c330:	480f      	ldr	r0, [pc, #60]	; (800c370 <common_kernel_services_init+0x50>)
 800c332:	f001 fbc5 	bl	800dac0 <k_work_init>
    k_work_init(&work_button_pressed, work_button_pressed_handler);
 800c336:	490f      	ldr	r1, [pc, #60]	; (800c374 <common_kernel_services_init+0x54>)
 800c338:	480f      	ldr	r0, [pc, #60]	; (800c378 <common_kernel_services_init+0x58>)
 800c33a:	f001 fbc1 	bl	800dac0 <k_work_init>
    k_work_init_delayable(&dwork_enable_ind, dwork_enable_ind_handler); /* For enable and disable indication */
 800c33e:	490f      	ldr	r1, [pc, #60]	; (800c37c <common_kernel_services_init+0x5c>)
 800c340:	480f      	ldr	r0, [pc, #60]	; (800c380 <common_kernel_services_init+0x60>)
 800c342:	f001 fc43 	bl	800dbcc <k_work_init_delayable>
}
 800c346:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    k_timer_init(&periodic_timer, periodic_timer_handler, nullptr);
 800c34a:	490e      	ldr	r1, [pc, #56]	; (800c384 <common_kernel_services_init+0x64>)
 800c34c:	480e      	ldr	r0, [pc, #56]	; (800c388 <common_kernel_services_init+0x68>)
 800c34e:	2200      	movs	r2, #0
 800c350:	f002 bc18 	b.w	800eb84 <k_timer_init>
	return z_impl_k_sleep(timeout);
 800c354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c35c:	f002 f8be 	bl	800e4dc <z_impl_k_sleep>
 800c360:	e7e5      	b.n	800c32e <common_kernel_services_init+0xe>
 800c362:	bf00      	nop
 800c364:	2000149c 	.word	0x2000149c
 800c368:	08011854 	.word	0x08011854
 800c36c:	0800bd0d 	.word	0x0800bd0d
 800c370:	200014c0 	.word	0x200014c0
 800c374:	0800c1c1 	.word	0x0800c1c1
 800c378:	200014b0 	.word	0x200014b0
 800c37c:	0800bced 	.word	0x0800bced
 800c380:	20000ac0 	.word	0x20000ac0
 800c384:	08002259 	.word	0x08002259
 800c388:	20000af0 	.word	0x20000af0

0800c38c <proc_rx_data>:

bool proc_rx_data(uint8_t *recv_data, size_t len, struct message_s *rx_msg, uint8_t cur_dev_addr)
{
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	4607      	mov	r7, r0
 800c392:	460e      	mov	r6, r1
 800c394:	4614      	mov	r4, r2
 800c396:	461d      	mov	r5, r3
	return z_impl_k_msgq_get(msgq, data, timeout);
 800c398:	4865      	ldr	r0, [pc, #404]	; (800c530 <proc_rx_data+0x1a4>)
 800c39a:	4639      	mov	r1, r7
 800c39c:	2200      	movs	r2, #0
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f001 f888 	bl	800d4b4 <z_impl_k_msgq_get>
    uint32_t cur_msg = 0;

    k_msgq_get(&msgq_rx_msg, recv_data, K_NO_WAIT);

    for (uint8_t i = 0; i < len; ++i) {
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	f000 80aa 	beq.w	800c4fe <proc_rx_data+0x172>
 800c3aa:	f04f 0800 	mov.w	r8, #0
    uint32_t cur_msg = 0;
 800c3ae:	4642      	mov	r2, r8
    for (uint8_t i = 0; i < len; ++i) {
 800c3b0:	4641      	mov	r1, r8
 800c3b2:	4640      	mov	r0, r8
        recv_data[i] = reverse(recv_data[i]);
 800c3b4:	5c3b      	ldrb	r3, [r7, r0]
 800c3b6:	f04f 0e07 	mov.w	lr, #7
 800c3ba:	4438      	add	r0, r7
        bit = input & BIT(0);
 800c3bc:	f003 0c01 	and.w	ip, r3, #1
        output |= bit;
 800c3c0:	ea48 0c0c 	orr.w	ip, r8, ip
    while( pos < 7 ) {
 800c3c4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        output = output << 1;
 800c3c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    while( pos < 7 ) {
 800c3cc:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
        output = output << 1;
 800c3d0:	fa5f f88c 	uxtb.w	r8, ip
        input = input >> 1;
 800c3d4:	ea4f 0353 	mov.w	r3, r3, lsr #1
    while( pos < 7 ) {
 800c3d8:	d1f0      	bne.n	800c3bc <proc_rx_data+0x30>
        cur_msg |= (recv_data[i]) << i*8;
 800c3da:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
    bit = input & BIT(0);
 800c3de:	f003 0301 	and.w	r3, r3, #1
    for (uint8_t i = 0; i < len; ++i) {
 800c3e2:	3101      	adds	r1, #1
    output |= bit;
 800c3e4:	ea48 0303 	orr.w	r3, r8, r3
 800c3e8:	b2c9      	uxtb	r1, r1
        cur_msg |= (recv_data[i]) << i*8;
 800c3ea:	fa03 fc0c 	lsl.w	ip, r3, ip
    for (uint8_t i = 0; i < len; ++i) {
 800c3ee:	42b1      	cmp	r1, r6
        recv_data[i] = reverse(recv_data[i]);
 800c3f0:	7003      	strb	r3, [r0, #0]
        cur_msg |= (recv_data[i]) << i*8;
 800c3f2:	ea42 020c 	orr.w	r2, r2, ip
    for (uint8_t i = 0; i < len; ++i) {
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	d3dc      	bcc.n	800c3b4 <proc_rx_data+0x28>
    uint32_t cur_msg = 0;
 800c3fa:	f04f 0e01 	mov.w	lr, #1
 800c3fe:	f894 c001 	ldrb.w	ip, [r4, #1]
    uint8_t pos = 0;
 800c402:	2100      	movs	r1, #0
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c404:	4670      	mov	r0, lr
        switch (cur_field) {
 800c406:	f1ae 0602 	sub.w	r6, lr, #2
    while ( *pos < start_pos + field_len ) {
 800c40a:	460b      	mov	r3, r1
        switch (cur_field) {
 800c40c:	2e04      	cmp	r6, #4
 800c40e:	d878      	bhi.n	800c502 <proc_rx_data+0x176>
 800c410:	e8df f006 	tbb	[pc, r6]
 800c414:	234d3860 	.word	0x234d3860
 800c418:	03          	.byte	0x03
 800c419:	00          	.byte	0x00
    while ( *pos < start_pos + field_len ) {
 800c41a:	7960      	ldrb	r0, [r4, #5]
 800c41c:	f101 0e03 	add.w	lr, r1, #3
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c420:	2701      	movs	r7, #1
 800c422:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c426:	fa07 f601 	lsl.w	r6, r7, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c42a:	fa07 f808 	lsl.w	r8, r7, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c42e:	4016      	ands	r6, r2
        (*pos)++;
 800c430:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c432:	ea20 0008 	bic.w	r0, r0, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c436:	40de      	lsrs	r6, r3
        (*pos)++;
 800c438:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c43a:	4330      	orrs	r0, r6
    while ( *pos < start_pos + field_len ) {
 800c43c:	458e      	cmp	lr, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c43e:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800c440:	dcef      	bgt.n	800c422 <proc_rx_data+0x96>
 800c442:	7160      	strb	r0, [r4, #5]
    }

    read_write_message(&cur_msg, rx_msg, false); /* fill rx_msg struct */
    if ( (rx_msg->receiver_addr != BROADCAST_ADDR) &&
 800c444:	f1bc 0f04 	cmp.w	ip, #4
 800c448:	bf1d      	ittte	ne
 800c44a:	eba5 000c 	subne.w	r0, r5, ip
 800c44e:	fab0 f080 	clzne	r0, r0
 800c452:	0940      	lsrne	r0, r0, #5
        LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg->receiver_addr, cur_dev_addr);
        LOG_DBG("Packet is filtered");
        return false;
    }

    return true;
 800c454:	2001      	moveq	r0, #1
}
 800c456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45a:	7927      	ldrb	r7, [r4, #4]
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c45c:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c460:	fa00 f601 	lsl.w	r6, r0, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c464:	fa00 f808 	lsl.w	r8, r0, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c468:	4016      	ands	r6, r2
        (*pos)++;
 800c46a:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c46c:	ea27 0708 	bic.w	r7, r7, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c470:	40de      	lsrs	r6, r3
        (*pos)++;
 800c472:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c474:	4337      	orrs	r7, r6
    while ( *pos < start_pos + field_len ) {
 800c476:	4299      	cmp	r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c478:	b2ff      	uxtb	r7, r7
    while ( *pos < start_pos + field_len ) {
 800c47a:	ddef      	ble.n	800c45c <proc_rx_data+0xd0>
 800c47c:	7127      	strb	r7, [r4, #4]
 800c47e:	f10e 0e01 	add.w	lr, lr, #1
 800c482:	e7c0      	b.n	800c406 <proc_rx_data+0x7a>
 800c484:	78a6      	ldrb	r6, [r4, #2]
 800c486:	f101 0804 	add.w	r8, r1, #4
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c48a:	eba1 0903 	sub.w	r9, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c48e:	fa00 f701 	lsl.w	r7, r0, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c492:	fa00 f909 	lsl.w	r9, r0, r9
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c496:	4017      	ands	r7, r2
        (*pos)++;
 800c498:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c49a:	ea26 0609 	bic.w	r6, r6, r9
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c49e:	40df      	lsrs	r7, r3
        (*pos)++;
 800c4a0:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4a2:	433e      	orrs	r6, r7
    while ( *pos < start_pos + field_len ) {
 800c4a4:	4588      	cmp	r8, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4a6:	b2f6      	uxtb	r6, r6
    while ( *pos < start_pos + field_len ) {
 800c4a8:	dcef      	bgt.n	800c48a <proc_rx_data+0xfe>
 800c4aa:	70a6      	strb	r6, [r4, #2]
 800c4ac:	e7e7      	b.n	800c47e <proc_rx_data+0xf2>
 800c4ae:	78e6      	ldrb	r6, [r4, #3]
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4b0:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4b4:	fa00 f701 	lsl.w	r7, r0, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4b8:	fa00 f808 	lsl.w	r8, r0, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4bc:	4017      	ands	r7, r2
        (*pos)++;
 800c4be:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4c0:	ea26 0608 	bic.w	r6, r6, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4c4:	40df      	lsrs	r7, r3
        (*pos)++;
 800c4c6:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4c8:	433e      	orrs	r6, r7
    while ( *pos < start_pos + field_len ) {
 800c4ca:	4299      	cmp	r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4cc:	b2f6      	uxtb	r6, r6
    while ( *pos < start_pos + field_len ) {
 800c4ce:	ddef      	ble.n	800c4b0 <proc_rx_data+0x124>
 800c4d0:	70e6      	strb	r6, [r4, #3]
 800c4d2:	e7d4      	b.n	800c47e <proc_rx_data+0xf2>
 800c4d4:	f101 0803 	add.w	r8, r1, #3
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4d8:	1ace      	subs	r6, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4da:	fa00 f701 	lsl.w	r7, r0, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4de:	fa00 f606 	lsl.w	r6, r0, r6
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4e2:	4017      	ands	r7, r2
        (*pos)++;
 800c4e4:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c4e6:	ea2c 0606 	bic.w	r6, ip, r6
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4ea:	40df      	lsrs	r7, r3
        (*pos)++;
 800c4ec:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4ee:	433e      	orrs	r6, r7
    while ( *pos < start_pos + field_len ) {
 800c4f0:	4541      	cmp	r1, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c4f2:	fa5f fc86 	uxtb.w	ip, r6
    while ( *pos < start_pos + field_len ) {
 800c4f6:	dbef      	blt.n	800c4d8 <proc_rx_data+0x14c>
 800c4f8:	f884 c001 	strb.w	ip, [r4, #1]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800c4fc:	e7bf      	b.n	800c47e <proc_rx_data+0xf2>
    uint32_t cur_msg = 0;
 800c4fe:	4632      	mov	r2, r6
 800c500:	e77b      	b.n	800c3fa <proc_rx_data+0x6e>
    while ( *pos < start_pos + field_len ) {
 800c502:	7826      	ldrb	r6, [r4, #0]
 800c504:	f101 0802 	add.w	r8, r1, #2
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c508:	1acf      	subs	r7, r1, r3
 800c50a:	fa00 f707 	lsl.w	r7, r0, r7
 800c50e:	ea26 0607 	bic.w	r6, r6, r7
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c512:	fa00 f701 	lsl.w	r7, r0, r1
 800c516:	4017      	ands	r7, r2
        (*pos)++;
 800c518:	3101      	adds	r1, #1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c51a:	40df      	lsrs	r7, r3
        (*pos)++;
 800c51c:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c51e:	433e      	orrs	r6, r7
    while ( *pos < start_pos + field_len ) {
 800c520:	4588      	cmp	r8, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c522:	b2f6      	uxtb	r6, r6
    while ( *pos < start_pos + field_len ) {
 800c524:	dcf0      	bgt.n	800c508 <proc_rx_data+0x17c>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800c526:	f1be 0f06 	cmp.w	lr, #6
 800c52a:	7026      	strb	r6, [r4, #0]
 800c52c:	d1a7      	bne.n	800c47e <proc_rx_data+0xf2>
 800c52e:	e789      	b.n	800c444 <proc_rx_data+0xb8>
 800c530:	20000864 	.word	0x20000864

0800c534 <proc_tx_data>:

bool proc_tx_data(struct k_msgq *msgq, uint8_t *tx_data, size_t len, struct message_s *tx_msg)
{
 800c534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	460d      	mov	r5, r1
 800c53a:	4614      	mov	r4, r2
 800c53c:	4698      	mov	r8, r3
 800c53e:	2600      	movs	r6, #0
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 800c540:	4863      	ldr	r0, [pc, #396]	; (800c6d0 <proc_tx_data+0x19c>)
    uint32_t new_msg = 0;
    /* Check messages into queue
     * Beginning check priority queue, after check standard queue
     * If queue's is not empty receiving will be stopped */
    if (k_msgq_num_used_get(&msgq_tx_msg_prio)) {
 800c542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c544:	b953      	cbnz	r3, 800c55c <proc_tx_data+0x28>
 800c546:	4863      	ldr	r0, [pc, #396]	; (800c6d4 <proc_tx_data+0x1a0>)
        k_msgq_get(&msgq_tx_msg_prio, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg_prio;
    } else if (k_msgq_num_used_get(&msgq_tx_msg)) {
 800c548:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c54a:	b93b      	cbnz	r3, 800c55c <proc_tx_data+0x28>
        k_msgq_get(&msgq_tx_msg, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg;
    } else {
        /* Return 1 */
        current_state = *current_state.next;
 800c54c:	4a62      	ldr	r2, [pc, #392]	; (800c6d8 <proc_tx_data+0x1a4>)
 800c54e:	6811      	ldr	r1, [r2, #0]
 800c550:	c903      	ldmia	r1, {r0, r1}
 800c552:	e882 0003 	stmia.w	r2, {r0, r1}
    for (uint8_t i = 0; i < len; ++i) {
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
        *(tx_data + i) = reverse(*(tx_data + i));
    }
    return true;
}
 800c556:	4618      	mov	r0, r3
 800c558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55c:	2200      	movs	r2, #0
 800c55e:	4641      	mov	r1, r8
 800c560:	2300      	movs	r3, #0
 800c562:	f000 ffa7 	bl	800d4b4 <z_impl_k_msgq_get>
{
 800c566:	2101      	movs	r1, #1
 800c568:	2000      	movs	r0, #0
 800c56a:	4684      	mov	ip, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c56c:	460f      	mov	r7, r1
        switch (cur_field) {
 800c56e:	1e8b      	subs	r3, r1, #2
    while ( *pos < start_pos + field_len ) {
 800c570:	4602      	mov	r2, r0
        switch (cur_field) {
 800c572:	2b04      	cmp	r3, #4
 800c574:	f200 8095 	bhi.w	800c6a2 <proc_tx_data+0x16e>
 800c578:	e8df f003 	tbb	[pc, r3]
 800c57c:	3d69537d 	.word	0x3d69537d
 800c580:	03          	.byte	0x03
 800c581:	00          	.byte	0x00
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c582:	f898 e005 	ldrb.w	lr, [r8, #5]
    while ( *pos < start_pos + field_len ) {
 800c586:	1cc7      	adds	r7, r0, #3
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c588:	2101      	movs	r1, #1
 800c58a:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c58c:	fa01 f800 	lsl.w	r8, r1, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c590:	fa01 f303 	lsl.w	r3, r1, r3
        (*pos)++;
 800c594:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c596:	ea03 030e 	and.w	r3, r3, lr
        (*pos)++;
 800c59a:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c59c:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c59e:	ea2c 0c08 	bic.w	ip, ip, r8
    while ( *pos < start_pos + field_len ) {
 800c5a2:	42b8      	cmp	r0, r7
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c5a4:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800c5a8:	dbef      	blt.n	800c58a <proc_tx_data+0x56>
    for (uint8_t i = 0; i < len; ++i) {
 800c5aa:	b304      	cbz	r4, 800c5ee <proc_tx_data+0xba>
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	468e      	mov	lr, r1
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 800c5b0:	27ff      	movs	r7, #255	; 0xff
 800c5b2:	00cb      	lsls	r3, r1, #3
 800c5b4:	fa07 f203 	lsl.w	r2, r7, r3
 800c5b8:	ea02 020c 	and.w	r2, r2, ip
 800c5bc:	40da      	lsrs	r2, r3
 800c5be:	44ae      	add	lr, r5
 800c5c0:	b2d2      	uxtb	r2, r2
 800c5c2:	2007      	movs	r0, #7
        bit = input & BIT(0);
 800c5c4:	f002 0301 	and.w	r3, r2, #1
        output |= bit;
 800c5c8:	4333      	orrs	r3, r6
    while( pos < 7 ) {
 800c5ca:	3801      	subs	r0, #1
        output = output << 1;
 800c5cc:	005b      	lsls	r3, r3, #1
    while( pos < 7 ) {
 800c5ce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        output = output << 1;
 800c5d2:	b2de      	uxtb	r6, r3
        input = input >> 1;
 800c5d4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    while( pos < 7 ) {
 800c5d8:	d1f4      	bne.n	800c5c4 <proc_tx_data+0x90>
    for (uint8_t i = 0; i < len; ++i) {
 800c5da:	3101      	adds	r1, #1
 800c5dc:	b2c9      	uxtb	r1, r1
    bit = input & BIT(0);
 800c5de:	f002 0201 	and.w	r2, r2, #1
    output |= bit;
 800c5e2:	4332      	orrs	r2, r6
 800c5e4:	42a1      	cmp	r1, r4
        *(tx_data + i) = reverse(*(tx_data + i));
 800c5e6:	f88e 2000 	strb.w	r2, [lr]
    for (uint8_t i = 0; i < len; ++i) {
 800c5ea:	468e      	mov	lr, r1
 800c5ec:	d3e1      	bcc.n	800c5b2 <proc_tx_data+0x7e>
    return true;
 800c5ee:	2301      	movs	r3, #1
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c5f6:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c5fa:	eba0 0e02 	sub.w	lr, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c5fe:	fa07 f900 	lsl.w	r9, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c602:	fa07 fe0e 	lsl.w	lr, r7, lr
        (*pos)++;
 800c606:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c608:	ea0e 0e03 	and.w	lr, lr, r3
        (*pos)++;
 800c60c:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c60e:	fa0e fe02 	lsl.w	lr, lr, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c612:	ea2c 0c09 	bic.w	ip, ip, r9
    while ( *pos < start_pos + field_len ) {
 800c616:	4290      	cmp	r0, r2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c618:	ea4e 0c0c 	orr.w	ip, lr, ip
    while ( *pos < start_pos + field_len ) {
 800c61c:	dded      	ble.n	800c5fa <proc_tx_data+0xc6>
 800c61e:	3101      	adds	r1, #1
 800c620:	e7a5      	b.n	800c56e <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c622:	f898 9002 	ldrb.w	r9, [r8, #2]
    while ( *pos < start_pos + field_len ) {
 800c626:	f100 0e04 	add.w	lr, r0, #4
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c62a:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c62c:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c630:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 800c634:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c636:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 800c63a:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c63c:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c63e:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 800c642:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c644:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800c648:	dbef      	blt.n	800c62a <proc_tx_data+0xf6>
 800c64a:	3101      	adds	r1, #1
 800c64c:	e78f      	b.n	800c56e <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c64e:	f898 e003 	ldrb.w	lr, [r8, #3]
 800c652:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c654:	fa07 f900 	lsl.w	r9, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c658:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 800c65c:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c65e:	ea03 030e 	and.w	r3, r3, lr
        (*pos)++;
 800c662:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c664:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c666:	ea2c 0c09 	bic.w	ip, ip, r9
    while ( *pos < start_pos + field_len ) {
 800c66a:	4290      	cmp	r0, r2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c66c:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800c670:	ddef      	ble.n	800c652 <proc_tx_data+0x11e>
 800c672:	3101      	adds	r1, #1
 800c674:	e77b      	b.n	800c56e <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c676:	f898 9001 	ldrb.w	r9, [r8, #1]
    while ( *pos < start_pos + field_len ) {
 800c67a:	f100 0e03 	add.w	lr, r0, #3
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c67e:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c680:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c684:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 800c688:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c68a:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 800c68e:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c690:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c692:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 800c696:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c698:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800c69c:	dbef      	blt.n	800c67e <proc_tx_data+0x14a>
 800c69e:	3101      	adds	r1, #1
 800c6a0:	e765      	b.n	800c56e <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6a2:	f898 9000 	ldrb.w	r9, [r8]
    while ( *pos < start_pos + field_len ) {
 800c6a6:	f100 0e02 	add.w	lr, r0, #2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6aa:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c6ac:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6b0:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 800c6b4:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6b6:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 800c6ba:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6bc:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c6be:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 800c6c2:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c6c4:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800c6c8:	dbef      	blt.n	800c6aa <proc_tx_data+0x176>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800c6ca:	2906      	cmp	r1, #6
 800c6cc:	d1a7      	bne.n	800c61e <proc_tx_data+0xea>
 800c6ce:	e76c      	b.n	800c5aa <proc_tx_data+0x76>
 800c6d0:	200008cc 	.word	0x200008cc
 800c6d4:	20000898 	.word	0x20000898
 800c6d8:	200014a0 	.word	0x200014a0

0800c6dc <radio_rx_queue_is_empty>:
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <radio_rx_queue_is_empty+0xc>)
    disable_ind();
}

bool radio_rx_queue_is_empty()
{
    return (k_msgq_num_used_get(&msgq_rx_msg) == 0);
 800c6de:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 800c6e0:	fab0 f080 	clz	r0, r0
 800c6e4:	0940      	lsrs	r0, r0, #5
 800c6e6:	4770      	bx	lr
 800c6e8:	20000864 	.word	0x20000864

0800c6ec <set_msg>:
{
    k_msgq_get(&msgq_rssi, rssi, K_MSEC(1));
}

void set_msg(struct message_s *msg, bool prio)
{
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4601      	mov	r1, r0
    if (prio)
 800c6f0:	b123      	cbz	r3, 800c6fc <set_msg+0x10>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800c6f2:	4805      	ldr	r0, [pc, #20]	; (800c708 <set_msg+0x1c>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f000 be80 	b.w	800d3fc <z_impl_k_msgq_put>
 800c6fc:	4803      	ldr	r0, [pc, #12]	; (800c70c <set_msg+0x20>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	2300      	movs	r3, #0
 800c702:	f000 be7b 	b.w	800d3fc <z_impl_k_msgq_put>
 800c706:	bf00      	nop
 800c708:	200008cc 	.word	0x200008cc
 800c70c:	20000898 	.word	0x20000898

0800c710 <tim_start>:
    else
        k_msgq_put(&msgq_tx_msg, msg, K_NO_WAIT);
}

void tim_start(k_timeout_t duration, k_timeout_t period)
{
 800c710:	b500      	push	{lr}
 800c712:	4694      	mov	ip, r2
 800c714:	b083      	sub	sp, #12
 800c716:	4602      	mov	r2, r0
	z_impl_k_timer_start(timer, duration, period);
 800c718:	4804      	ldr	r0, [pc, #16]	; (800c72c <tim_start+0x1c>)
 800c71a:	e9cd c300 	strd	ip, r3, [sp]
 800c71e:	460b      	mov	r3, r1
 800c720:	f002 fa3e 	bl	800eba0 <z_impl_k_timer_start>
    k_timer_start(&periodic_timer, duration, period);
}
 800c724:	b003      	add	sp, #12
 800c726:	f85d fb04 	ldr.w	pc, [sp], #4
 800c72a:	bf00      	nop
 800c72c:	20000af0 	.word	0x20000af0

0800c730 <set_buzzer_mode>:
    k_timer_stop(&periodic_timer);
    k_timer_start(&periodic_timer, duration, period);
}

void set_buzzer_mode(uint8_t buzzer_mode)
{
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800c734:	4dc9      	ldr	r5, [pc, #804]	; (800ca5c <set_buzzer_mode+0x32c>)
 800c736:	b08f      	sub	sp, #60	; 0x3c
 800c738:	4604      	mov	r4, r0
 800c73a:	e003      	b.n	800c744 <set_buzzer_mode+0x14>
	return z_impl_k_sleep(timeout);
 800c73c:	2032      	movs	r0, #50	; 0x32
 800c73e:	2100      	movs	r1, #0
 800c740:	f001 fecc 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
 800c744:	2200      	movs	r2, #0
 800c746:	2300      	movs	r3, #0
 800c748:	4628      	mov	r0, r5
 800c74a:	f000 ff3d 	bl	800d5c8 <z_impl_k_mutex_lock>
    uint8_t i = 0;
    /* Wait while signal will be raised */
    while (k_mutex_lock(&mtx_buzzer, K_NO_WAIT)) {
 800c74e:	2800      	cmp	r0, #0
 800c750:	d1f4      	bne.n	800c73c <set_buzzer_mode+0xc>
        k_sleep(K_MSEC(5));
    }

    switch (buzzer_mode) {
        case BUZZER_MODE_CONTINUOUS:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c752:	f8df b30c 	ldr.w	fp, [pc, #780]	; 800ca60 <set_buzzer_mode+0x330>
    switch (buzzer_mode) {
 800c756:	2c02      	cmp	r4, #2
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c758:	f8db 8000 	ldr.w	r8, [fp]
    switch (buzzer_mode) {
 800c75c:	f000 8186 	beq.w	800ca6c <set_buzzer_mode+0x33c>
 800c760:	2c03      	cmp	r4, #3
 800c762:	d043      	beq.n	800c7ec <set_buzzer_mode+0xbc>
 800c764:	2c01      	cmp	r4, #1
 800c766:	f000 8100 	beq.w	800c96a <set_buzzer_mode+0x23a>
 800c76a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC / 2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c76e:	f8db 5000 	ldr.w	r5, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c772:	68ab      	ldr	r3, [r5, #8]
 800c774:	464a      	mov	r2, r9
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2102      	movs	r1, #2
 800c77a:	4628      	mov	r0, r5
 800c77c:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c77e:	4606      	mov	r6, r0
 800c780:	bb70      	cbnz	r0, 800c7e0 <set_buzzer_mode+0xb0>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c782:	e9dd 470c 	ldrd	r4, r7, [sp, #48]	; 0x30
 800c786:	00bb      	lsls	r3, r7, #2
 800c788:	00a2      	lsls	r2, r4, #2
 800c78a:	1912      	adds	r2, r2, r4
 800c78c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c790:	eb47 0303 	adc.w	r3, r7, r3
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c79a:	00d2      	lsls	r2, r2, #3
 800c79c:	1b12      	subs	r2, r2, r4
 800c79e:	eb63 0307 	sbc.w	r3, r3, r7
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 800c7a8:	0112      	lsls	r2, r2, #4
 800c7aa:	1912      	adds	r2, r2, r4
 800c7ac:	eb47 0703 	adc.w	r7, r7, r3
 800c7b0:	01bf      	lsls	r7, r7, #6
 800c7b2:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 800c7b6:	0194      	lsls	r4, r2, #6
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4aaa      	ldr	r2, [pc, #680]	; (800ca64 <set_buzzer_mode+0x334>)
 800c7bc:	4620      	mov	r0, r4
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f4 f9dc 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c7c4:	4ba8      	ldr	r3, [pc, #672]	; (800ca68 <set_buzzer_mode+0x338>)
 800c7c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c7ca:	42a1      	cmp	r1, r4
 800c7cc:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c7ce:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c7d0:	d306      	bcc.n	800c7e0 <set_buzzer_mode+0xb0>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c7d2:	68ab      	ldr	r3, [r5, #8]
 800c7d4:	9600      	str	r6, [sp, #0]
 800c7d6:	681c      	ldr	r4, [r3, #0]
 800c7d8:	4628      	mov	r0, r5
 800c7da:	4633      	mov	r3, r6
 800c7dc:	2102      	movs	r1, #2
 800c7de:	47a0      	blx	r4
	return z_impl_k_mutex_unlock(mutex);
 800c7e0:	489e      	ldr	r0, [pc, #632]	; (800ca5c <set_buzzer_mode+0x32c>)
                             0, PWM_FLAGS);
            break;
    }
    k_mutex_unlock(&mtx_buzzer);
}
 800c7e2:	b00f      	add	sp, #60	; 0x3c
 800c7e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	f000 bf72 	b.w	800d6d0 <z_impl_k_mutex_unlock>
    switch (buzzer_mode) {
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	9303      	str	r3, [sp, #12]
 800c7f0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c7f4:	f8db 8000 	ldr.w	r8, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c7f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7fc:	464a      	mov	r2, r9
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	2102      	movs	r1, #2
 800c802:	4640      	mov	r0, r8
 800c804:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c806:	9004      	str	r0, [sp, #16]
 800c808:	2800      	cmp	r0, #0
 800c80a:	d164      	bne.n	800c8d6 <set_buzzer_mode+0x1a6>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c80c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800c810:	00aa      	lsls	r2, r5, #2
 800c812:	00b3      	lsls	r3, r6, #2
 800c814:	1957      	adds	r7, r2, r5
 800c816:	ea43 7495 	orr.w	r4, r3, r5, lsr #30
 800c81a:	9407      	str	r4, [sp, #28]
 800c81c:	eb46 0404 	adc.w	r4, r6, r4
 800c820:	00f8      	lsls	r0, r7, #3
 800c822:	00e4      	lsls	r4, r4, #3
 800c824:	ebb0 0a05 	subs.w	sl, r0, r5
 800c828:	ea44 7457 	orr.w	r4, r4, r7, lsr #29
 800c82c:	ea4f 1e0a 	mov.w	lr, sl, lsl #4
 800c830:	eb64 0406 	sbc.w	r4, r4, r6
 800c834:	9009      	str	r0, [sp, #36]	; 0x24
 800c836:	0124      	lsls	r4, r4, #4
 800c838:	4670      	mov	r0, lr
 800c83a:	9708      	str	r7, [sp, #32]
 800c83c:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 800c840:	1947      	adds	r7, r0, r5
 800c842:	eb46 0404 	adc.w	r4, r6, r4
 800c846:	01a4      	lsls	r4, r4, #6
 800c848:	01bb      	lsls	r3, r7, #6
 800c84a:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 800c84e:	9206      	str	r2, [sp, #24]
 800c850:	9305      	str	r3, [sp, #20]
 800c852:	4618      	mov	r0, r3
 800c854:	4a83      	ldr	r2, [pc, #524]	; (800ca64 <set_buzzer_mode+0x334>)
 800c856:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800c85a:	2300      	movs	r3, #0
 800c85c:	4621      	mov	r1, r4
 800c85e:	f7f4 f98d 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c862:	f8dd c014 	ldr.w	ip, [sp, #20]
 800c866:	4b80      	ldr	r3, [pc, #512]	; (800ca68 <set_buzzer_mode+0x338>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c868:	900b      	str	r0, [sp, #44]	; 0x2c
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c86a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c86e:	45e6      	cmp	lr, ip
 800c870:	eb73 0104 	sbcs.w	r1, r3, r4
 800c874:	d32f      	bcc.n	800c8d6 <set_buzzer_mode+0x1a6>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c876:	9906      	ldr	r1, [sp, #24]
 800c878:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800c87c:	9c08      	ldr	r4, [sp, #32]
 800c87e:	194b      	adds	r3, r1, r5
 800c880:	9907      	ldr	r1, [sp, #28]
 800c882:	eb46 0301 	adc.w	r3, r6, r1
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	ebbc 0205 	subs.w	r2, ip, r5
 800c88c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c890:	eb63 0306 	sbc.w	r3, r3, r6
 800c894:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c896:	4a73      	ldr	r2, [pc, #460]	; (800ca64 <set_buzzer_mode+0x334>)
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	194d      	adds	r5, r1, r5
 800c89c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800c8a0:	eb46 0603 	adc.w	r6, r6, r3
 800c8a4:	0176      	lsls	r6, r6, #5
 800c8a6:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 800c8aa:	017f      	lsls	r7, r7, #5
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	f7f4 f963 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c8b6:	496c      	ldr	r1, [pc, #432]	; (800ca68 <set_buzzer_mode+0x338>)
 800c8b8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c8bc:	45be      	cmp	lr, r7
 800c8be:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c8c0:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800c8c2:	d308      	bcc.n	800c8d6 <set_buzzer_mode+0x1a6>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c8c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800c8c8:	9804      	ldr	r0, [sp, #16]
 800c8ca:	9000      	str	r0, [sp, #0]
 800c8cc:	680c      	ldr	r4, [r1, #0]
 800c8ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	2102      	movs	r1, #2
 800c8d4:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c8dc:	f001 fdfe 	bl	800e4dc <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800c8e0:	f8db 6000 	ldr.w	r6, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c8e4:	68b3      	ldr	r3, [r6, #8]
 800c8e6:	464a      	mov	r2, r9
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	2102      	movs	r1, #2
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	bb70      	cbnz	r0, 800c952 <set_buzzer_mode+0x222>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c8f4:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 800c8f8:	00a2      	lsls	r2, r4, #2
 800c8fa:	008b      	lsls	r3, r1, #2
 800c8fc:	1912      	adds	r2, r2, r4
 800c8fe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c902:	eb41 0303 	adc.w	r3, r1, r3
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c90c:	00d2      	lsls	r2, r2, #3
 800c90e:	1b12      	subs	r2, r2, r4
 800c910:	eb63 0301 	sbc.w	r3, r3, r1
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 800c91a:	0112      	lsls	r2, r2, #4
 800c91c:	1912      	adds	r2, r2, r4
 800c91e:	eb41 0303 	adc.w	r3, r1, r3
 800c922:	019f      	lsls	r7, r3, #6
 800c924:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 800c928:	0194      	lsls	r4, r2, #6
 800c92a:	2300      	movs	r3, #0
 800c92c:	4a4d      	ldr	r2, [pc, #308]	; (800ca64 <set_buzzer_mode+0x334>)
 800c92e:	4620      	mov	r0, r4
 800c930:	4639      	mov	r1, r7
 800c932:	f7f4 f923 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c93a:	42a3      	cmp	r3, r4
 800c93c:	4b4a      	ldr	r3, [pc, #296]	; (800ca68 <set_buzzer_mode+0x338>)
 800c93e:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c940:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c942:	d306      	bcc.n	800c952 <set_buzzer_mode+0x222>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800c944:	68b3      	ldr	r3, [r6, #8]
 800c946:	9500      	str	r5, [sp, #0]
 800c948:	681c      	ldr	r4, [r3, #0]
 800c94a:	4630      	mov	r0, r6
 800c94c:	462b      	mov	r3, r5
 800c94e:	2102      	movs	r1, #2
 800c950:	47a0      	blx	r4
 800c952:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c956:	2100      	movs	r1, #0
 800c958:	f001 fdc0 	bl	800e4dc <z_impl_k_sleep>
            while (i < 2) {
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	f43f af3e 	beq.w	800c7e0 <set_buzzer_mode+0xb0>
 800c964:	2301      	movs	r3, #1
 800c966:	9303      	str	r3, [sp, #12]
 800c968:	e744      	b.n	800c7f4 <set_buzzer_mode+0xc4>
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800c96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c96e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	464a      	mov	r2, r9
 800c976:	2102      	movs	r1, #2
 800c978:	4640      	mov	r0, r8
 800c97a:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800c97c:	9004      	str	r0, [sp, #16]
 800c97e:	2800      	cmp	r0, #0
 800c980:	d165      	bne.n	800ca4e <set_buzzer_mode+0x31e>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c982:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800c986:	00aa      	lsls	r2, r5, #2
 800c988:	00b3      	lsls	r3, r6, #2
 800c98a:	1950      	adds	r0, r2, r5
 800c98c:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 800c990:	eb46 0401 	adc.w	r4, r6, r1
 800c994:	00c7      	lsls	r7, r0, #3
 800c996:	00e4      	lsls	r4, r4, #3
 800c998:	ebb7 0a05 	subs.w	sl, r7, r5
 800c99c:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800c9a0:	ea4f 1c0a 	mov.w	ip, sl, lsl #4
 800c9a4:	eb64 0406 	sbc.w	r4, r4, r6
 800c9a8:	9708      	str	r7, [sp, #32]
 800c9aa:	0124      	lsls	r4, r4, #4
 800c9ac:	4667      	mov	r7, ip
 800c9ae:	197f      	adds	r7, r7, r5
 800c9b0:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 800c9b4:	eb46 0404 	adc.w	r4, r6, r4
 800c9b8:	01a4      	lsls	r4, r4, #6
 800c9ba:	01bb      	lsls	r3, r7, #6
 800c9bc:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 800c9c0:	9205      	str	r2, [sp, #20]
 800c9c2:	9106      	str	r1, [sp, #24]
 800c9c4:	9007      	str	r0, [sp, #28]
 800c9c6:	9303      	str	r3, [sp, #12]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4a25      	ldr	r2, [pc, #148]	; (800ca64 <set_buzzer_mode+0x334>)
 800c9ce:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	f7f4 f8d2 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c9d8:	f8dd c00c 	ldr.w	ip, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800c9dc:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800c9de:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c9e2:	45e6      	cmp	lr, ip
 800c9e4:	f8df c080 	ldr.w	ip, [pc, #128]	; 800ca68 <set_buzzer_mode+0x338>
 800c9e8:	eb7c 0404 	sbcs.w	r4, ip, r4
 800c9ec:	d32f      	bcc.n	800ca4e <set_buzzer_mode+0x31e>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800c9ee:	9a05      	ldr	r2, [sp, #20]
 800c9f0:	9906      	ldr	r1, [sp, #24]
 800c9f2:	9c08      	ldr	r4, [sp, #32]
 800c9f4:	1953      	adds	r3, r2, r5
 800c9f6:	eb46 0301 	adc.w	r3, r6, r1
 800c9fa:	9907      	ldr	r1, [sp, #28]
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	1b62      	subs	r2, r4, r5
 800ca00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca04:	eb63 0306 	sbc.w	r3, r3, r6
 800ca08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca0a:	4a16      	ldr	r2, [pc, #88]	; (800ca64 <set_buzzer_mode+0x334>)
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	194d      	adds	r5, r1, r5
 800ca10:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800ca14:	eb46 0603 	adc.w	r6, r6, r3
 800ca18:	0176      	lsls	r6, r6, #5
 800ca1a:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 800ca1e:	017f      	lsls	r7, r7, #5
 800ca20:	2300      	movs	r3, #0
 800ca22:	4638      	mov	r0, r7
 800ca24:	4631      	mov	r1, r6
 800ca26:	f7f4 f8a9 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800ca2a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800ca68 <set_buzzer_mode+0x338>
 800ca2e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800ca32:	45be      	cmp	lr, r7
 800ca34:	eb7c 0106 	sbcs.w	r1, ip, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800ca38:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800ca3a:	d308      	bcc.n	800ca4e <set_buzzer_mode+0x31e>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800ca3c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ca40:	9804      	ldr	r0, [sp, #16]
 800ca42:	9000      	str	r0, [sp, #0]
 800ca44:	680c      	ldr	r4, [r1, #0]
 800ca46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca48:	4640      	mov	r0, r8
 800ca4a:	2102      	movs	r1, #2
 800ca4c:	47a0      	blx	r4
 800ca4e:	2100      	movs	r1, #0
 800ca50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ca54:	f001 fd42 	bl	800e4dc <z_impl_k_sleep>
 800ca58:	e689      	b.n	800c76e <set_buzzer_mode+0x3e>
 800ca5a:	bf00      	nop
 800ca5c:	2000076c 	.word	0x2000076c
 800ca60:	2000149c 	.word	0x2000149c
 800ca64:	000f4240 	.word	0x000f4240
 800ca68:	000f423f 	.word	0x000f423f
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800ca6c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca70:	aa0c      	add	r2, sp, #48	; 0x30
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	4621      	mov	r1, r4
 800ca76:	4640      	mov	r0, r8
 800ca78:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800ca7a:	9004      	str	r0, [sp, #16]
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d168      	bne.n	800cb52 <set_buzzer_mode+0x422>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800ca80:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 800ca84:	00b0      	lsls	r0, r6, #2
 800ca86:	00bb      	lsls	r3, r7, #2
 800ca88:	eb10 0b06 	adds.w	fp, r0, r6
 800ca8c:	ea43 7296 	orr.w	r2, r3, r6, lsr #30
 800ca90:	eb47 0502 	adc.w	r5, r7, r2
 800ca94:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 800ca98:	00ed      	lsls	r5, r5, #3
 800ca9a:	ebbc 0a06 	subs.w	sl, ip, r6
 800ca9e:	ea45 755b 	orr.w	r5, r5, fp, lsr #29
 800caa2:	eb65 0507 	sbc.w	r5, r5, r7
 800caa6:	ea4f 1e0a 	mov.w	lr, sl, lsl #4
 800caaa:	012d      	lsls	r5, r5, #4
 800caac:	eb1e 0906 	adds.w	r9, lr, r6
 800cab0:	ea45 751a 	orr.w	r5, r5, sl, lsr #28
 800cab4:	eb47 0505 	adc.w	r5, r7, r5
 800cab8:	01ad      	lsls	r5, r5, #6
 800caba:	f8cd c01c 	str.w	ip, [sp, #28]
 800cabe:	ea45 6599 	orr.w	r5, r5, r9, lsr #26
 800cac2:	ea4f 1c89 	mov.w	ip, r9, lsl #6
 800cac6:	9005      	str	r0, [sp, #20]
 800cac8:	9206      	str	r2, [sp, #24]
 800caca:	4660      	mov	r0, ip
 800cacc:	4a26      	ldr	r2, [pc, #152]	; (800cb68 <set_buzzer_mode+0x438>)
 800cace:	f8cd c00c 	str.w	ip, [sp, #12]
 800cad2:	4629      	mov	r1, r5
 800cad4:	2300      	movs	r3, #0
 800cad6:	f8cd e020 	str.w	lr, [sp, #32]
 800cada:	f7f4 f84f 	bl	8000b7c <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800cade:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800cae2:	4a22      	ldr	r2, [pc, #136]	; (800cb6c <set_buzzer_mode+0x43c>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800cae4:	9009      	str	r0, [sp, #36]	; 0x24
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800cae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caea:	4563      	cmp	r3, ip
 800caec:	eb72 0505 	sbcs.w	r5, r2, r5
 800caf0:	d32f      	bcc.n	800cb52 <set_buzzer_mode+0x422>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800caf2:	9d05      	ldr	r5, [sp, #20]
 800caf4:	9906      	ldr	r1, [sp, #24]
 800caf6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800cafa:	19ab      	adds	r3, r5, r6
 800cafc:	eb47 0301 	adc.w	r3, r7, r1
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	ebbc 0206 	subs.w	r2, ip, r6
 800cb06:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800cb0a:	eb63 0307 	sbc.w	r3, r3, r7
 800cb0e:	9908      	ldr	r1, [sp, #32]
 800cb10:	4a15      	ldr	r2, [pc, #84]	; (800cb68 <set_buzzer_mode+0x438>)
 800cb12:	011b      	lsls	r3, r3, #4
 800cb14:	198e      	adds	r6, r1, r6
 800cb16:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800cb1a:	eb47 0703 	adc.w	r7, r7, r3
 800cb1e:	017f      	lsls	r7, r7, #5
 800cb20:	ea47 67d9 	orr.w	r7, r7, r9, lsr #27
 800cb24:	ea4f 1949 	mov.w	r9, r9, lsl #5
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4648      	mov	r0, r9
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	f7f4 f825 	bl	8000b7c <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800cb32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cb36:	4549      	cmp	r1, r9
 800cb38:	490c      	ldr	r1, [pc, #48]	; (800cb6c <set_buzzer_mode+0x43c>)
 800cb3a:	41b9      	sbcs	r1, r7
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800cb3c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800cb3e:	d308      	bcc.n	800cb52 <set_buzzer_mode+0x422>
	return api->pin_set(dev, pwm, period, pulse, flags);
 800cb40:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800cb44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb46:	4621      	mov	r1, r4
 800cb48:	9c04      	ldr	r4, [sp, #16]
 800cb4a:	9400      	str	r4, [sp, #0]
 800cb4c:	6804      	ldr	r4, [r0, #0]
 800cb4e:	4640      	mov	r0, r8
 800cb50:	47a0      	blx	r4
 800cb52:	2100      	movs	r1, #0
 800cb54:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800cb58:	f001 fcc0 	bl	800e4dc <z_impl_k_sleep>
	return z_impl_k_mutex_unlock(mutex);
 800cb5c:	4804      	ldr	r0, [pc, #16]	; (800cb70 <set_buzzer_mode+0x440>)
}
 800cb5e:	b00f      	add	sp, #60	; 0x3c
 800cb60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	f000 bdb4 	b.w	800d6d0 <z_impl_k_mutex_unlock>
 800cb68:	000f4240 	.word	0x000f4240
 800cb6c:	000f423f 	.word	0x000f423f
 800cb70:	2000076c 	.word	0x2000076c

0800cb74 <rx_ok_cb>:
    if (cb_data)
 800cb74:	b160      	cbz	r0, 800cb90 <rx_ok_cb+0x1c>
{
 800cb76:	b508      	push	{r3, lr}
 800cb78:	4601      	mov	r1, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4806      	ldr	r0, [pc, #24]	; (800cb98 <rx_ok_cb+0x24>)
 800cb80:	f000 fc3c 	bl	800d3fc <z_impl_k_msgq_put>
	return z_impl_k_poll_signal_raise(sig, result);
 800cb84:	4805      	ldr	r0, [pc, #20]	; (800cb9c <rx_ok_cb+0x28>)
}
 800cb86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb8a:	2102      	movs	r1, #2
 800cb8c:	f002 bb6e 	b.w	800f26c <z_impl_k_poll_signal_raise>
 800cb90:	4802      	ldr	r0, [pc, #8]	; (800cb9c <rx_ok_cb+0x28>)
 800cb92:	2102      	movs	r1, #2
 800cb94:	f002 bb6a 	b.w	800f26c <z_impl_k_poll_signal_raise>
 800cb98:	200007c8 	.word	0x200007c8
 800cb9c:	200003e8 	.word	0x200003e8

0800cba0 <rx_to_cb>:
 800cba0:	4801      	ldr	r0, [pc, #4]	; (800cba8 <rx_to_cb+0x8>)
 800cba2:	2103      	movs	r1, #3
 800cba4:	f002 bb62 	b.w	800f26c <z_impl_k_poll_signal_raise>
 800cba8:	200003e8 	.word	0x200003e8

0800cbac <rx_err_cb>:
 800cbac:	4801      	ldr	r0, [pc, #4]	; (800cbb4 <rx_err_cb+0x8>)
 800cbae:	2104      	movs	r1, #4
 800cbb0:	f002 bb5c 	b.w	800f26c <z_impl_k_poll_signal_raise>
 800cbb4:	200003e8 	.word	0x200003e8

0800cbb8 <check_correct_recv>:
    if (recv_size == expect_size) {
 800cbb8:	428a      	cmp	r2, r1
 800cbba:	d001      	beq.n	800cbc0 <check_correct_recv+0x8>
    bool res = false;
 800cbbc:	2000      	movs	r0, #0
}
 800cbbe:	4770      	bx	lr
{
 800cbc0:	b508      	push	{r3, lr}
 800cbc2:	4613      	mov	r3, r2
        dwt_readrxdata((uint8_t *) expect_msg, expect_size, 0);
 800cbc4:	b299      	uxth	r1, r3
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f7fc fd22 	bl	8009610 <dwt_readrxdata>
        res = true;
 800cbcc:	2001      	movs	r0, #1
}
 800cbce:	bd08      	pop	{r3, pc}

0800cbd0 <resp_twr_1_poll_ds_twr>:
{
 800cbd0:	b508      	push	{r3, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800cbd2:	2309      	movs	r3, #9
 800cbd4:	f3bf 8f5b 	dmb	ish
 800cbd8:	e850 2f00 	ldrex	r2, [r0]
 800cbdc:	e840 3100 	strex	r1, r3, [r0]
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d1f9      	bne.n	800cbd8 <resp_twr_1_poll_ds_twr+0x8>
 800cbe4:	f3bf 8f5b 	dmb	ish
	z_impl_k_msgq_purge(msgq);
 800cbe8:	480a      	ldr	r0, [pc, #40]	; (800cc14 <resp_twr_1_poll_ds_twr+0x44>)
 800cbea:	f000 fcc3 	bl	800d574 <z_impl_k_msgq_purge>
	return z_impl_k_sleep(timeout);
 800cbee:	2100      	movs	r1, #0
 800cbf0:	2064      	movs	r0, #100	; 0x64
 800cbf2:	f001 fc73 	bl	800e4dc <z_impl_k_sleep>
    dwt_setrxtimeout(0);
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f7fd fa1e 	bl	800a038 <dwt_setrxtimeout>
 800cbfc:	e003      	b.n	800cc06 <resp_twr_1_poll_ds_twr+0x36>
 800cbfe:	200a      	movs	r0, #10
 800cc00:	2100      	movs	r1, #0
 800cc02:	f001 fc6b 	bl	800e4dc <z_impl_k_sleep>
    while (dwt_rxenable(DWT_START_RX_IMMEDIATE)) {
 800cc06:	2000      	movs	r0, #0
 800cc08:	f7fd f9c4 	bl	8009f94 <dwt_rxenable>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d1f6      	bne.n	800cbfe <resp_twr_1_poll_ds_twr+0x2e>
}
 800cc10:	bd08      	pop	{r3, pc}
 800cc12:	bf00      	nop
 800cc14:	200007c8 	.word	0x200007c8

0800cc18 <resp_twr_2_resp_ds_twr>:
{
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (rx_poll_msg->header.id == msg_id_t::twr_1_poll) {
 800cc1a:	7800      	ldrb	r0, [r0, #0]
 800cc1c:	2807      	cmp	r0, #7
{
 800cc1e:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
    if (rx_poll_msg->header.id == msg_id_t::twr_1_poll) {
 800cc22:	d004      	beq.n	800cc2e <resp_twr_2_resp_ds_twr+0x16>
            resp_twr_1_poll_ds_twr(twr_status);
 800cc24:	4630      	mov	r0, r6
}
 800cc26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            resp_twr_1_poll_ds_twr(twr_status);
 800cc2a:	f7ff bfd1 	b.w	800cbd0 <resp_twr_1_poll_ds_twr>
        dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 800cc2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cc32:	461d      	mov	r5, r3
 800cc34:	4614      	mov	r4, r2
 800cc36:	f7fd f82b 	bl	8009c90 <dwt_setrxaftertxdelay>
        dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 800cc3a:	f242 7010 	movw	r0, #10000	; 0x2710
 800cc3e:	f7fd f9fb 	bl	800a038 <dwt_setrxtimeout>
        auto resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 800cc42:	f114 747a 	adds.w	r4, r4, #65536000	; 0x3e80000
 800cc46:	f145 0000 	adc.w	r0, r5, #0
 800cc4a:	0a24      	lsrs	r4, r4, #8
        dwt_setdelayedtrxtime(resp_tx_time);
 800cc4c:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 800cc50:	f7fd f8d2 	bl	8009df8 <dwt_setdelayedtrxtime>
        dwt_writetxdata(sizeof(*tx_resp_msg), (uint8_t *) tx_resp_msg, 0);
 800cc54:	2200      	movs	r2, #0
 800cc56:	4639      	mov	r1, r7
 800cc58:	2006      	movs	r0, #6
 800cc5a:	f7fc fc89 	bl	8009570 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(*tx_resp_msg), 0, 1);
 800cc5e:	2006      	movs	r0, #6
 800cc60:	2201      	movs	r2, #1
 800cc62:	2100      	movs	r1, #0
 800cc64:	f7fc fcae 	bl	80095c4 <dwt_writetxfctrl>
        if (!dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED)) {
 800cc68:	2002      	movs	r0, #2
 800cc6a:	f7fd f8e3 	bl	8009e34 <dwt_starttx>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d1d8      	bne.n	800cc24 <resp_twr_2_resp_ds_twr+0xc>
 800cc72:	f3bf 8f5b 	dmb	ish
 800cc76:	2308      	movs	r3, #8
 800cc78:	e856 2f00 	ldrex	r2, [r6]
 800cc7c:	e846 3100 	strex	r1, r3, [r6]
 800cc80:	2900      	cmp	r1, #0
 800cc82:	d1f9      	bne.n	800cc78 <resp_twr_2_resp_ds_twr+0x60>
 800cc84:	f3bf 8f5b 	dmb	ish
}
 800cc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc8a:	bf00      	nop

0800cc8c <resp_final_msg_poll_ds_twr>:

void resp_final_msg_poll_ds_twr(msg_twr_final_t *final_msg, uint64_t poll_rx_ts, uint64_t resp_tx_ts,
                                uint64_t final_rx_ts, double *dist_src, bool *nodes) {
 800cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    static char dist_str[40] = {'\0'};
    if (final_msg->header.id == msg_id_t::twr_3_final) {
 800cc8e:	f890 c000 	ldrb.w	ip, [r0]
                                uint64_t final_rx_ts, double *dist_src, bool *nodes) {
 800cc92:	b083      	sub	sp, #12
    if (final_msg->header.id == msg_id_t::twr_3_final) {
 800cc94:	f1bc 0f09 	cmp.w	ip, #9
                                uint64_t final_rx_ts, double *dist_src, bool *nodes) {
 800cc98:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 800cc9c:	9f08      	ldr	r7, [sp, #32]
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (final_msg->header.id == msg_id_t::twr_3_final) {
 800cca0:	d001      	beq.n	800cca6 <resp_final_msg_poll_ds_twr+0x1a>
                "responder> dist to tag %3u: %3.2lf m\n",
                final_msg->header.source,
                *(dist_src + final_msg->header.source));
        printk("%s", dist_str);
    }
}
 800cca2:	b003      	add	sp, #12
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        auto poll_rx_ts_32 = (uint32_t) poll_rx_ts;
 800cca6:	4604      	mov	r4, r0
 800cca8:	4611      	mov	r1, r2
        double d = calc_dist_ds_twr(final_msg, poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32);
 800ccaa:	463a      	mov	r2, r7
 800ccac:	f7f4 f984 	bl	8000fb8 <calc_dist_ds_twr>
        *(dist_src + final_msg->header.source) = d;
 800ccb0:	78a2      	ldrb	r2, [r4, #2]
        *(nodes + final_msg->header.source) = true;
 800ccb2:	2301      	movs	r3, #1
        *(dist_src + final_msg->header.source) = d;
 800ccb4:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800ccb8:	e9c5 0100 	strd	r0, r1, [r5]
        sprintf(dist_str,
 800ccbc:	e9cd 0100 	strd	r0, r1, [sp]
 800ccc0:	4905      	ldr	r1, [pc, #20]	; (800ccd8 <resp_final_msg_poll_ds_twr+0x4c>)
        *(nodes + final_msg->header.source) = true;
 800ccc2:	54b3      	strb	r3, [r6, r2]
        sprintf(dist_str,
 800ccc4:	4805      	ldr	r0, [pc, #20]	; (800ccdc <resp_final_msg_poll_ds_twr+0x50>)
 800ccc6:	f003 f8e9 	bl	800fe9c <siprintf>
        printk("%s", dist_str);
 800ccca:	4904      	ldr	r1, [pc, #16]	; (800ccdc <resp_final_msg_poll_ds_twr+0x50>)
 800cccc:	4804      	ldr	r0, [pc, #16]	; (800cce0 <resp_final_msg_poll_ds_twr+0x54>)
}
 800ccce:	b003      	add	sp, #12
 800ccd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("%s", dist_str);
 800ccd4:	f7f5 baee 	b.w	80022b4 <printk>
 800ccd8:	08012ad4 	.word	0x08012ad4
 800ccdc:	200014d0 	.word	0x200014d0
 800cce0:	08012afc 	.word	0x08012afc

0800cce4 <update_indication_task>:
    }
}


_Noreturn void update_indication_task(void)
{
 800cce4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    uint8_t cnt = 0;
    uint8_t start_led_pos = 0;
    uint8_t end_led_pos = 0;
    uint8_t indication_type = 0;
    struct led_hsv color_hsv = {0};
 800cce8:	2500      	movs	r5, #0
{
 800ccea:	b097      	sub	sp, #92	; 0x5c
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 800ccec:	2240      	movs	r2, #64	; 0x40
 800ccee:	4629      	mov	r1, r5
 800ccf0:	a806      	add	r0, sp, #24
    struct led_hsv color_hsv = {0};
 800ccf2:	9502      	str	r5, [sp, #8]
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 800ccf4:	f004 f908 	bl	8010f08 <memset>
    struct led_strip_indicate_s *strip_indicate = {0};
 800ccf8:	9503      	str	r5, [sp, #12]
	z_impl_k_poll_signal_init(sig);
 800ccfa:	4890      	ldr	r0, [pc, #576]	; (800cf3c <update_indication_task+0x258>)
    k_poll_signal_init(&signal_indicate);
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
                      K_POLL_MODE_NOTIFY_ONLY,
                      &signal_indicate);

    if (!device_is_ready(strip_dev)) {
 800ccfc:	4c90      	ldr	r4, [pc, #576]	; (800cf40 <update_indication_task+0x25c>)
 800ccfe:	f002 faa9 	bl	800f254 <z_impl_k_poll_signal_init>
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
 800cd02:	4b8e      	ldr	r3, [pc, #568]	; (800cf3c <update_indication_task+0x258>)
 800cd04:	488f      	ldr	r0, [pc, #572]	; (800cf44 <update_indication_task+0x260>)
 800cd06:	462a      	mov	r2, r5
 800cd08:	2101      	movs	r1, #1
 800cd0a:	f002 f9d3 	bl	800f0b4 <k_poll_event_init>
    if (!device_is_ready(strip_dev)) {
 800cd0e:	6820      	ldr	r0, [r4, #0]
 800cd10:	f000 f984 	bl	800d01c <z_device_is_ready>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	f000 810a 	beq.w	800cf2e <update_indication_task+0x24a>
 800cd1a:	4d8b      	ldr	r5, [pc, #556]	; (800cf48 <update_indication_task+0x264>)
 800cd1c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800cf4c <update_indication_task+0x268>
 800cd20:	f8df 922c 	ldr.w	r9, [pc, #556]	; 800cf50 <update_indication_task+0x26c>
        k_sleep(K_FOREVER);
    }

    while(1) {
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 800cd24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d041      	beq.n	800cdae <update_indication_task+0xca>
	return z_impl_k_msgq_get(msgq, data, timeout);
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	a903      	add	r1, sp, #12
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 fbbf 	bl	800d4b4 <z_impl_k_msgq_get>
            k_msgq_get(&msgq_led_strip, &strip_indicate, K_NO_WAIT);
            led_strip_state = strip_indicate->led_strip_state;
 800cd36:	9a03      	ldr	r2, [sp, #12]
 800cd38:	1d13      	adds	r3, r2, #4
 800cd3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd3e:	ab04      	add	r3, sp, #16
 800cd40:	e883 0003 	stmia.w	r3, {r0, r1}
            start_led_pos = strip_indicate->start_led_pos;
            end_led_pos = strip_indicate->end_led_pos;
            indication_type = strip_indicate->indication_type;
 800cd44:	7811      	ldrb	r1, [r2, #0]
            start_led_pos = strip_indicate->start_led_pos;
 800cd46:	f892 b001 	ldrb.w	fp, [r2, #1]
            end_led_pos = strip_indicate->end_led_pos;
 800cd4a:	7897      	ldrb	r7, [r2, #2]

            /* If "blink" set -> we blinked
             * Esle -> set on strip connection quality and people number */
            switch (indication_type) {
 800cd4c:	2901      	cmp	r1, #1
 800cd4e:	f000 809e 	beq.w	800ce8e <update_indication_task+0x1aa>
 800cd52:	2902      	cmp	r1, #2
 800cd54:	d040      	beq.n	800cdd8 <update_indication_task+0xf4>
 800cd56:	2900      	cmp	r1, #0
 800cd58:	d1e4      	bne.n	800cd24 <update_indication_task+0x40>
                        cnt++;
                    }
                    led_strip_update_rgb(strip_dev, pixels_rgb, end_led_pos);
                    break;
                case INDICATION_TYPE_STATIC_COLOR:
                    switch (led_strip_state.strip_param.color) {
 800cd5a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800cd5e:	2a04      	cmp	r2, #4
 800cd60:	d807      	bhi.n	800cd72 <update_indication_task+0x8e>
 800cd62:	e8df f002 	tbb	[pc, r2]
 800cd66:	3135      	.short	0x3135
 800cd68:	292d      	.short	0x292d
 800cd6a:	03          	.byte	0x03
 800cd6b:	00          	.byte	0x00
                            break;
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
                            break;
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 800cd6c:	4b79      	ldr	r3, [pc, #484]	; (800cf54 <update_indication_task+0x270>)
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	9202      	str	r2, [sp, #8]
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 800cd72:	45bb      	cmp	fp, r7
 800cd74:	d212      	bcs.n	800cd9c <update_indication_task+0xb8>
 800cd76:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 800cd7a:	ab06      	add	r3, sp, #24
 800cd7c:	eba8 080b 	sub.w	r8, r8, fp
 800cd80:	fa5b f888 	uxtab	r8, fp, r8
 800cd84:	eb03 068b 	add.w	r6, r3, fp, lsl #2
 800cd88:	ab07      	add	r3, sp, #28
 800cd8a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800cd8e:	4631      	mov	r1, r6
 800cd90:	a802      	add	r0, sp, #8
                    while (cnt < end_led_pos) {
 800cd92:	3604      	adds	r6, #4
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800cd94:	f7fe feba 	bl	800bb0c <led_hsv2rgb>
                    while (cnt < end_led_pos) {
 800cd98:	4546      	cmp	r6, r8
 800cd9a:	d1f8      	bne.n	800cd8e <update_indication_task+0xaa>
                    }

                    led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 800cd9c:	6820      	ldr	r0, [r4, #0]
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 800cd9e:	6883      	ldr	r3, [r0, #8]
 800cda0:	463a      	mov	r2, r7
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	a906      	add	r1, sp, #24
 800cda6:	4798      	blx	r3
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 800cda8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1bd      	bne.n	800cd2a <update_indication_task+0x46>
	return z_impl_k_sleep(timeout);
 800cdae:	2100      	movs	r1, #0
 800cdb0:	2064      	movs	r0, #100	; 0x64
 800cdb2:	f001 fb93 	bl	800e4dc <z_impl_k_sleep>
 800cdb6:	e7b5      	b.n	800cd24 <update_indication_task+0x40>
                            color_hsv = purple_hsv;
 800cdb8:	4b67      	ldr	r3, [pc, #412]	; (800cf58 <update_indication_task+0x274>)
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	9202      	str	r2, [sp, #8]
                            break;
 800cdbe:	e7d8      	b.n	800cd72 <update_indication_task+0x8e>
                            color_hsv = blue_hsv;
 800cdc0:	f8d9 2000 	ldr.w	r2, [r9]
 800cdc4:	9202      	str	r2, [sp, #8]
                            break;
 800cdc6:	e7d4      	b.n	800cd72 <update_indication_task+0x8e>
                            color_hsv = green_hsv;
 800cdc8:	4b64      	ldr	r3, [pc, #400]	; (800cf5c <update_indication_task+0x278>)
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	9202      	str	r2, [sp, #8]
                            break;
 800cdce:	e7d0      	b.n	800cd72 <update_indication_task+0x8e>
                            color_hsv = red_hsv;
 800cdd0:	4b63      	ldr	r3, [pc, #396]	; (800cf60 <update_indication_task+0x27c>)
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	9202      	str	r2, [sp, #8]
                            break;
 800cdd6:	e7cc      	b.n	800cd72 <update_indication_task+0x8e>
                    switch (led_strip_state.strip_param.color) {
 800cdd8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800cddc:	2a04      	cmp	r2, #4
 800cdde:	d807      	bhi.n	800cdf0 <update_indication_task+0x10c>
 800cde0:	e8df f002 	tbb	[pc, r2]
 800cde4:	4d514549 	.word	0x4d514549
 800cde8:	03          	.byte	0x03
 800cde9:	00          	.byte	0x00
                            color_hsv = yellow_hsv;
 800cdea:	4b5a      	ldr	r3, [pc, #360]	; (800cf54 <update_indication_task+0x270>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	9202      	str	r2, [sp, #8]
                    while (cnt < end_led_pos) {
 800cdf0:	45bb      	cmp	fp, r7
 800cdf2:	d213      	bcs.n	800ce1c <update_indication_task+0x138>
 800cdf4:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 800cdf8:	eba8 080b 	sub.w	r8, r8, fp
 800cdfc:	ab06      	add	r3, sp, #24
 800cdfe:	fa5b f888 	uxtab	r8, fp, r8
 800ce02:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800ce06:	ab07      	add	r3, sp, #28
 800ce08:	eb03 0888 	add.w	r8, r3, r8, lsl #2
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	a802      	add	r0, sp, #8
                    while (cnt < end_led_pos) {
 800ce10:	f10b 0b04 	add.w	fp, fp, #4
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 800ce14:	f7fe fe7a 	bl	800bb0c <led_hsv2rgb>
                    while (cnt < end_led_pos) {
 800ce18:	45d8      	cmp	r8, fp
 800ce1a:	d1f7      	bne.n	800ce0c <update_indication_task+0x128>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 800ce1c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800ce20:	b1f3      	cbz	r3, 800ce60 <update_indication_task+0x17c>
 800ce22:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800cf64 <update_indication_task+0x280>
 800ce26:	2600      	movs	r6, #0
                        led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 800ce28:	6820      	ldr	r0, [r4, #0]
 800ce2a:	6883      	ldr	r3, [r0, #8]
 800ce2c:	463a      	mov	r2, r7
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	a906      	add	r1, sp, #24
 800ce32:	4798      	blx	r3
 800ce34:	2100      	movs	r1, #0
 800ce36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce3a:	f001 fb4f 	bl	800e4dc <z_impl_k_sleep>
                        led_strip_update_rgb(strip_dev, empty_rgb, end_led_pos);
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	6883      	ldr	r3, [r0, #8]
 800ce42:	463a      	mov	r2, r7
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4641      	mov	r1, r8
 800ce48:	4798      	blx	r3
 800ce4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ce4e:	2100      	movs	r1, #0
 800ce50:	f001 fb44 	bl	800e4dc <z_impl_k_sleep>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 800ce54:	3601      	adds	r6, #1
 800ce56:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800ce5a:	b2f3      	uxtb	r3, r6
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d8e3      	bhi.n	800ce28 <update_indication_task+0x144>
                    led_strip_update_rgb(strip_dev, pixels_rgb, end_led_pos);
 800ce60:	6820      	ldr	r0, [r4, #0]
 800ce62:	493a      	ldr	r1, [pc, #232]	; (800cf4c <update_indication_task+0x268>)
 800ce64:	6883      	ldr	r3, [r0, #8]
 800ce66:	463a      	mov	r2, r7
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4798      	blx	r3
 800ce6c:	e75a      	b.n	800cd24 <update_indication_task+0x40>
                            color_hsv = green_hsv;
 800ce6e:	4b3b      	ldr	r3, [pc, #236]	; (800cf5c <update_indication_task+0x278>)
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	9202      	str	r2, [sp, #8]
                            break;
 800ce74:	e7bc      	b.n	800cdf0 <update_indication_task+0x10c>
                            color_hsv = red_hsv;
 800ce76:	4b3a      	ldr	r3, [pc, #232]	; (800cf60 <update_indication_task+0x27c>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	9202      	str	r2, [sp, #8]
                            break;
 800ce7c:	e7b8      	b.n	800cdf0 <update_indication_task+0x10c>
                            color_hsv = purple_hsv;
 800ce7e:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <update_indication_task+0x274>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	9202      	str	r2, [sp, #8]
                            break;
 800ce84:	e7b4      	b.n	800cdf0 <update_indication_task+0x10c>
                            color_hsv = blue_hsv;
 800ce86:	f8d9 2000 	ldr.w	r2, [r9]
 800ce8a:	9202      	str	r2, [sp, #8]
                            break;
 800ce8c:	e7b0      	b.n	800cdf0 <update_indication_task+0x10c>
                    if (led_strip_state.status.con_status >= 0)
 800ce8e:	9e04      	ldr	r6, [sp, #16]
            led_strip_state = strip_indicate->led_strip_state;
 800ce90:	6893      	ldr	r3, [r2, #8]
 800ce92:	9301      	str	r3, [sp, #4]
                    if (led_strip_state.status.con_status >= 0)
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	da09      	bge.n	800ceac <update_indication_task+0x1c8>
                    if (led_strip_state.status.people_num >= 0)
 800ce98:	9b01      	ldr	r3, [sp, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	da2d      	bge.n	800cefa <update_indication_task+0x216>
                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 800ce9e:	6820      	ldr	r0, [r4, #0]
 800cea0:	492a      	ldr	r1, [pc, #168]	; (800cf4c <update_indication_task+0x268>)
 800cea2:	6883      	ldr	r3, [r0, #8]
 800cea4:	2210      	movs	r2, #16
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4798      	blx	r3
 800ceaa:	e73b      	b.n	800cd24 <update_indication_task+0x40>
        if (*pos < start_pos + con_status) {
 800ceac:	fa5b f686 	uxtab	r6, fp, r6
    while (*pos < start_pos + RSSI_LED_LEN) {
 800ceb0:	f10b 0307 	add.w	r3, fp, #7
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	4633      	mov	r3, r6
 800ceb8:	46d8      	mov	r8, fp
 800ceba:	465e      	mov	r6, fp
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 800cebc:	4f28      	ldr	r7, [pc, #160]	; (800cf60 <update_indication_task+0x27c>)
    while (*pos < start_pos + RSSI_LED_LEN) {
 800cebe:	469b      	mov	fp, r3
 800cec0:	e007      	b.n	800ced2 <update_indication_task+0x1ee>
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 800cec2:	4826      	ldr	r0, [pc, #152]	; (800cf5c <update_indication_task+0x278>)
 800cec4:	f7fe fe22 	bl	800bb0c <led_hsv2rgb>
        (*pos)++;
 800cec8:	1c73      	adds	r3, r6, #1
 800ceca:	b2de      	uxtb	r6, r3
    while (*pos < start_pos + RSSI_LED_LEN) {
 800cecc:	9b00      	ldr	r3, [sp, #0]
 800cece:	429e      	cmp	r6, r3
 800ced0:	dc0f      	bgt.n	800cef2 <update_indication_task+0x20e>
        if (*pos < start_pos + con_status) {
 800ced2:	455e      	cmp	r6, fp
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 800ced4:	f108 0201 	add.w	r2, r8, #1
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 800ced8:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
        if (*pos < start_pos + con_status) {
 800cedc:	da23      	bge.n	800cf26 <update_indication_task+0x242>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 800cede:	4296      	cmp	r6, r2
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 800cee0:	4638      	mov	r0, r7
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 800cee2:	dcee      	bgt.n	800cec2 <update_indication_task+0x1de>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 800cee4:	f7fe fe12 	bl	800bb0c <led_hsv2rgb>
        (*pos)++;
 800cee8:	1c73      	adds	r3, r6, #1
 800ceea:	b2de      	uxtb	r6, r3
    while (*pos < start_pos + RSSI_LED_LEN) {
 800ceec:	9b00      	ldr	r3, [sp, #0]
 800ceee:	429e      	cmp	r6, r3
 800cef0:	ddef      	ble.n	800ced2 <update_indication_task+0x1ee>
                    if (led_strip_state.status.people_num >= 0)
 800cef2:	9b01      	ldr	r3, [sp, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	46b3      	mov	fp, r6
 800cef8:	dbd1      	blt.n	800ce9e <update_indication_task+0x1ba>
    while (*pos < start_pos + WORKERS_LED_LEN) {
 800cefa:	f89d 8004 	ldrb.w	r8, [sp, #4]
 800cefe:	465f      	mov	r7, fp
 800cf00:	f10b 0605 	add.w	r6, fp, #5
        if (((*pos) - start_pos) < people_num)
 800cf04:	ebab 0307 	sub.w	r3, fp, r7
 800cf08:	4543      	cmp	r3, r8
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 800cf0a:	eb0a 018b 	add.w	r1, sl, fp, lsl #2
        (*pos)++;
 800cf0e:	f10b 0b01 	add.w	fp, fp, #1
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 800cf12:	4648      	mov	r0, r9
        (*pos)++;
 800cf14:	fa5f fb8b 	uxtb.w	fp, fp
            led_hsv2rgb(&empty_hsv, &pixels_rgb[*pos]);
 800cf18:	bfa8      	it	ge
 800cf1a:	4813      	ldrge	r0, [pc, #76]	; (800cf68 <update_indication_task+0x284>)
 800cf1c:	f7fe fdf6 	bl	800bb0c <led_hsv2rgb>
    while (*pos < start_pos + WORKERS_LED_LEN) {
 800cf20:	45b3      	cmp	fp, r6
 800cf22:	ddef      	ble.n	800cf04 <update_indication_task+0x220>
 800cf24:	e7bb      	b.n	800ce9e <update_indication_task+0x1ba>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 800cf26:	4810      	ldr	r0, [pc, #64]	; (800cf68 <update_indication_task+0x284>)
 800cf28:	f7fe fdf0 	bl	800bb0c <led_hsv2rgb>
 800cf2c:	e7dc      	b.n	800cee8 <update_indication_task+0x204>
 800cf2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cf32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf36:	f001 fad1 	bl	800e4dc <z_impl_k_sleep>
 800cf3a:	e6ee      	b.n	800cd1a <update_indication_task+0x36>
 800cf3c:	2000158c 	.word	0x2000158c
 800cf40:	20000408 	.word	0x20000408
 800cf44:	20001538 	.word	0x20001538
 800cf48:	200007fc 	.word	0x200007fc
 800cf4c:	2000154c 	.word	0x2000154c
 800cf50:	08012b1c 	.word	0x08012b1c
 800cf54:	08012b30 	.word	0x08012b30
 800cf58:	08012b28 	.word	0x08012b28
 800cf5c:	08012b24 	.word	0x08012b24
 800cf60:	08012b2c 	.word	0x08012b2c
 800cf64:	200014f8 	.word	0x200014f8
 800cf68:	08012b20 	.word	0x08012b20

0800cf6c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop

0800cf70 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800cf70:	4b0f      	ldr	r3, [pc, #60]	; (800cfb0 <z_sys_init_run_level+0x40>)
 800cf72:	1c42      	adds	r2, r0, #1
{
 800cf74:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800cf76:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800cf7a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800cf7e:	42b4      	cmp	r4, r6
 800cf80:	d215      	bcs.n	800cfae <z_sys_init_run_level+0x3e>
		const struct device *dev = entry->dev;
		int rc = entry->init(dev);
 800cf82:	e9d4 3500 	ldrd	r3, r5, [r4]
 800cf86:	4628      	mov	r0, r5
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800cf88:	3408      	adds	r4, #8
		int rc = entry->init(dev);
 800cf8a:	4798      	blx	r3

		if (dev != NULL) {
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	d0f6      	beq.n	800cf7e <z_sys_init_run_level+0xe>
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800cf90:	68ea      	ldr	r2, [r5, #12]
			if (rc != 0) {
 800cf92:	b130      	cbz	r0, 800cfa2 <z_sys_init_run_level+0x32>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	bfb8      	it	lt
 800cf98:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 800cf9a:	28ff      	cmp	r0, #255	; 0xff
 800cf9c:	bfa8      	it	ge
 800cf9e:	20ff      	movge	r0, #255	; 0xff
 800cfa0:	7010      	strb	r0, [r2, #0]
			}
			dev->state->initialized = true;
 800cfa2:	7853      	ldrb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800cfa4:	42b4      	cmp	r4, r6
			dev->state->initialized = true;
 800cfa6:	f043 0301 	orr.w	r3, r3, #1
 800cfaa:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800cfac:	d3e9      	bcc.n	800cf82 <z_sys_init_run_level+0x12>
		}
	}
}
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	08012b34 	.word	0x08012b34

0800cfb4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800cfb4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800cfb6:	b350      	cbz	r0, 800d00e <z_impl_device_get_binding+0x5a>
 800cfb8:	7803      	ldrb	r3, [r0, #0]
 800cfba:	4606      	mov	r6, r0
 800cfbc:	b33b      	cbz	r3, 800d00e <z_impl_device_get_binding+0x5a>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800cfbe:	4a15      	ldr	r2, [pc, #84]	; (800d014 <z_impl_device_get_binding+0x60>)
 800cfc0:	4d15      	ldr	r5, [pc, #84]	; (800d018 <z_impl_device_get_binding+0x64>)
 800cfc2:	42aa      	cmp	r2, r5
 800cfc4:	d023      	beq.n	800d00e <z_impl_device_get_binding+0x5a>
 800cfc6:	4614      	mov	r4, r2
	 */
	if (dev == NULL) {
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800cfc8:	68e3      	ldr	r3, [r4, #12]
 800cfca:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800cfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfd4:	d102      	bne.n	800cfdc <z_impl_device_get_binding+0x28>
 800cfd6:	6823      	ldr	r3, [r4, #0]
 800cfd8:	42b3      	cmp	r3, r6
 800cfda:	d016      	beq.n	800d00a <z_impl_device_get_binding+0x56>
	for (dev = __device_start; dev != __device_end; dev++) {
 800cfdc:	3418      	adds	r4, #24
 800cfde:	42ac      	cmp	r4, r5
 800cfe0:	d1f2      	bne.n	800cfc8 <z_impl_device_get_binding+0x14>
	for (dev = __device_start; dev != __device_end; dev++) {
 800cfe2:	42aa      	cmp	r2, r5
 800cfe4:	d013      	beq.n	800d00e <z_impl_device_get_binding+0x5a>
 800cfe6:	4c0b      	ldr	r4, [pc, #44]	; (800d014 <z_impl_device_get_binding+0x60>)
 800cfe8:	e002      	b.n	800cff0 <z_impl_device_get_binding+0x3c>
 800cfea:	3418      	adds	r4, #24
 800cfec:	42ac      	cmp	r4, r5
 800cfee:	d00e      	beq.n	800d00e <z_impl_device_get_binding+0x5a>
	return dev->state->initialized && (dev->state->init_res == 0U);
 800cff0:	68e3      	ldr	r3, [r4, #12]
 800cff2:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800cff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cffc:	d1f5      	bne.n	800cfea <z_impl_device_get_binding+0x36>
 800cffe:	6821      	ldr	r1, [r4, #0]
 800d000:	4630      	mov	r0, r6
 800d002:	f7f3 ff75 	bl	8000ef0 <strcmp>
 800d006:	2800      	cmp	r0, #0
 800d008:	d1ef      	bne.n	800cfea <z_impl_device_get_binding+0x36>
}
 800d00a:	4620      	mov	r0, r4
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 800d00e:	2400      	movs	r4, #0
}
 800d010:	4620      	mov	r0, r4
 800d012:	bd70      	pop	{r4, r5, r6, pc}
 800d014:	08011734 	.word	0x08011734
 800d018:	080118e4 	.word	0x080118e4

0800d01c <z_device_is_ready>:
	if (dev == NULL) {
 800d01c:	b140      	cbz	r0, 800d030 <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
 800d01e:	68c3      	ldr	r3, [r0, #12]
 800d020:	8818      	ldrh	r0, [r3, #0]
 800d022:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800d026:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800d02a:	fab0 f080 	clz	r0, r0
 800d02e:	0940      	lsrs	r0, r0, #5
}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <arch_system_halt>:
	__asm__ volatile(
 800d034:	f04f 0210 	mov.w	r2, #16
 800d038:	f3ef 8311 	mrs	r3, BASEPRI
 800d03c:	f382 8812 	msr	BASEPRI_MAX, r2
 800d040:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800d044:	e7fe      	b.n	800d044 <arch_system_halt+0x10>
 800d046:	bf00      	nop

0800d048 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800d048:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800d04a:	f7ff fff3 	bl	800d034 <arch_system_halt>
 800d04e:	bf00      	nop

0800d050 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800d050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d052:	4605      	mov	r5, r0
 800d054:	460e      	mov	r6, r1
 800d056:	f04f 0310 	mov.w	r3, #16
 800d05a:	f3ef 8711 	mrs	r7, BASEPRI
 800d05e:	f383 8812 	msr	BASEPRI_MAX, r3
 800d062:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800d066:	f001 fa9f 	bl	800e5a8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800d06a:	4631      	mov	r1, r6
 800d06c:	4604      	mov	r4, r0
 800d06e:	4628      	mov	r0, r5
 800d070:	f7ff ffea 	bl	800d048 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800d074:	f387 8811 	msr	BASEPRI, r7
 800d078:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800d07c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800d07e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d082:	f7f6 b9bf 	b.w	8003404 <z_impl_k_thread_abort>
 800d086:	bf00      	nop

0800d088 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800d088:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 800d08a:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <bg_thread_main+0x30>)
 800d08c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800d08e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 800d090:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800d092:	f7ff ff6d 	bl	800cf70 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 800d096:	f002 f915 	bl	800f2c4 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
 800d09a:	f7f5 fef5 	bl	8002e88 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800d09e:	2003      	movs	r0, #3
 800d0a0:	f7ff ff66 	bl	800cf70 <z_sys_init_run_level>

	z_init_static_threads();
 800d0a4:	f000 f926 	bl	800d2f4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 800d0a8:	f002 f90a 	bl	800f2c0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800d0ac:	4a03      	ldr	r2, [pc, #12]	; (800d0bc <bg_thread_main+0x34>)
 800d0ae:	7b13      	ldrb	r3, [r2, #12]
 800d0b0:	f023 0301 	bic.w	r3, r3, #1
 800d0b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800d0b6:	bd08      	pop	{r3, pc}
 800d0b8:	200015f9 	.word	0x200015f9
 800d0bc:	20000c28 	.word	0x20000c28

0800d0c0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800d0c0:	4802      	ldr	r0, [pc, #8]	; (800d0cc <z_bss_zero+0xc>)
 800d0c2:	4a03      	ldr	r2, [pc, #12]	; (800d0d0 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	1a12      	subs	r2, r2, r0
 800d0c8:	f003 bf1e 	b.w	8010f08 <memset>
 800d0cc:	20000900 	.word	0x20000900
 800d0d0:	200015fc 	.word	0x200015fc

0800d0d4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800d0d4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800d0d8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800d1bc <z_cstart+0xe8>
 800d0dc:	b0a7      	sub	sp, #156	; 0x9c
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800d0de:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800d0e2:	4d37      	ldr	r5, [pc, #220]	; (800d1c0 <z_cstart+0xec>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800d0e4:	4e37      	ldr	r6, [pc, #220]	; (800d1c4 <z_cstart+0xf0>)
 800d0e6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d0e8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800d1c8 <z_cstart+0xf4>
	z_setup_new_thread(thread, stack,
 800d0ec:	4f37      	ldr	r7, [pc, #220]	; (800d1cc <z_cstart+0xf8>)
 800d0ee:	2400      	movs	r4, #0
 800d0f0:	22f0      	movs	r2, #240	; 0xf0
 800d0f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0f6:	616b      	str	r3, [r5, #20]
 800d0f8:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 800d0fc:	77ec      	strb	r4, [r5, #31]
 800d0fe:	762c      	strb	r4, [r5, #24]
 800d100:	766c      	strb	r4, [r5, #25]
 800d102:	76ac      	strb	r4, [r5, #26]
 800d104:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800d108:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d10a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800d10e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800d110:	f7f6 f944 	bl	800339c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800d114:	f7f5 fee2 	bl	8002edc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800d118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d11c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800d11e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800d120:	f7f6 fa0c 	bl	800353c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800d124:	f7f6 f984 	bl	8003430 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800d128:	f240 1201 	movw	r2, #257	; 0x101
	_current_cpu->current = dummy_thread;
 800d12c:	ab06      	add	r3, sp, #24
	dummy_thread->base.user_options = K_ESSENTIAL;
 800d12e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800d132:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800d134:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
 800d138:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800d13a:	f7ff ff17 	bl	800cf6c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800d13e:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
 800d140:	4d23      	ldr	r5, [pc, #140]	; (800d1d0 <z_cstart+0xfc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800d142:	f7ff ff15 	bl	800cf70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800d146:	2001      	movs	r0, #1
 800d148:	f7ff ff12 	bl	800cf70 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d14c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 800d150:	f001 f906 	bl	800e360 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d154:	4b1f      	ldr	r3, [pc, #124]	; (800d1d4 <z_cstart+0x100>)
 800d156:	4920      	ldr	r1, [pc, #128]	; (800d1d8 <z_cstart+0x104>)
 800d158:	9305      	str	r3, [sp, #20]
 800d15a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d15e:	464b      	mov	r3, r9
 800d160:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800d164:	e9cd 4400 	strd	r4, r4, [sp]
 800d168:	f8cd b010 	str.w	fp, [sp, #16]
 800d16c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 800d16e:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800d170:	f000 f844 	bl	800d1fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d174:	7b6b      	ldrb	r3, [r5, #13]
 800d176:	4680      	mov	r8, r0
 800d178:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 800d17c:	4628      	mov	r0, r5
 800d17e:	736b      	strb	r3, [r5, #13]
 800d180:	f000 ff30 	bl	800dfe4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 800d184:	230f      	movs	r3, #15
 800d186:	4915      	ldr	r1, [pc, #84]	; (800d1dc <z_cstart+0x108>)
 800d188:	9303      	str	r3, [sp, #12]
 800d18a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d18e:	4b14      	ldr	r3, [pc, #80]	; (800d1e0 <z_cstart+0x10c>)
 800d190:	9600      	str	r6, [sp, #0]
 800d192:	e9cd b404 	strd	fp, r4, [sp, #16]
 800d196:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800d19a:	4638      	mov	r0, r7
 800d19c:	f000 f82e 	bl	800d1fc <z_setup_new_thread>
 800d1a0:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].id = i;
 800d1a2:	7534      	strb	r4, [r6, #20]
 800d1a4:	f023 0304 	bic.w	r3, r3, #4
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800d1a8:	464a      	mov	r2, r9
 800d1aa:	4641      	mov	r1, r8
 800d1ac:	4628      	mov	r0, r5
		_kernel.cpus[i].irq_stack =
 800d1ae:	f8c6 a004 	str.w	sl, [r6, #4]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800d1b2:	60f7      	str	r7, [r6, #12]
 800d1b4:	737b      	strb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800d1b6:	f7f5 ffb1 	bl	800311c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800d1ba:	bf00      	nop
 800d1bc:	20004420 	.word	0x20004420
 800d1c0:	e000ed00 	.word	0xe000ed00
 800d1c4:	2000159c 	.word	0x2000159c
 800d1c8:	0800d089 	.word	0x0800d089
 800d1cc:	20000ba8 	.word	0x20000ba8
 800d1d0:	20000c28 	.word	0x20000c28
 800d1d4:	08012b4c 	.word	0x08012b4c
 800d1d8:	20002a80 	.word	0x20002a80
 800d1dc:	20003aa0 	.word	0x20003aa0
 800d1e0:	0800d3e5 	.word	0x0800d3e5

0800d1e4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1e4:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
 800d1e8:	3800      	subs	r0, #0
 800d1ea:	bf18      	it	ne
 800d1ec:	2001      	movne	r0, #1
 800d1ee:	4770      	bx	lr

0800d1f0 <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 800d1f0:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop

0800d1f8 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
 800d1f8:	f000 bf04 	b.w	800e004 <z_sched_start>

0800d1fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800d1fc:	b570      	push	{r4, r5, r6, lr}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d1fe:	1dd5      	adds	r5, r2, #7
{
 800d200:	b084      	sub	sp, #16
 800d202:	460a      	mov	r2, r1

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800d204:	3220      	adds	r2, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800d206:	6682      	str	r2, [r0, #104]	; 0x68

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800d208:	2600      	movs	r6, #0
{
 800d20a:	9a08      	ldr	r2, [sp, #32]
	thread_base->pended_on = NULL;
 800d20c:	6086      	str	r6, [r0, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d20e:	f025 0507 	bic.w	r5, r5, #7
	new_thread->stack_info.size = stack_buf_size;
 800d212:	66c5      	str	r5, [r0, #108]	; 0x6c
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
 800d214:	e9c0 6606 	strd	r6, r6, [r0, #24]
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 800d218:	73c6      	strb	r6, [r0, #15]
	new_thread->stack_info.delta = delta;
 800d21a:	6706      	str	r6, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d21c:	9200      	str	r2, [sp, #0]
{
 800d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d220:	9201      	str	r2, [sp, #4]
{
 800d222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d224:	9202      	str	r2, [sp, #8]
{
 800d226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	thread_base->prio = priority;
 800d228:	7382      	strb	r2, [r0, #14]
{
 800d22a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->user_options = (uint8_t)options;
 800d22c:	7302      	strb	r2, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d22e:	3520      	adds	r5, #32
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800d230:	f100 0258 	add.w	r2, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 800d234:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
 800d238:	440d      	add	r5, r1
	thread_base->thread_state = (uint8_t)initial_state;
 800d23a:	2204      	movs	r2, #4
 800d23c:	7342      	strb	r2, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d23e:	462a      	mov	r2, r5
{
 800d240:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d242:	f7f5 ff37 	bl	80030b4 <arch_new_thread>
	if (!_current) {
 800d246:	4b04      	ldr	r3, [pc, #16]	; (800d258 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 800d248:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	b103      	cbz	r3, 800d250 <z_setup_new_thread+0x54>
	new_thread->resource_pool = _current->resource_pool;
 800d24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800d250:	6763      	str	r3, [r4, #116]	; 0x74
}
 800d252:	4628      	mov	r0, r5
 800d254:	b004      	add	sp, #16
 800d256:	bd70      	pop	{r4, r5, r6, pc}
 800d258:	2000159c 	.word	0x2000159c

0800d25c <z_impl_k_thread_create>:
{
 800d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d25e:	460d      	mov	r5, r1
 800d260:	b085      	sub	sp, #20
 800d262:	3520      	adds	r5, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d264:	3207      	adds	r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800d266:	6685      	str	r5, [r0, #104]	; 0x68
{
 800d268:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
 800d26a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d26c:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
 800d270:	66c2      	str	r2, [r0, #108]	; 0x6c
	node->prev = NULL;
 800d272:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 800d276:	6085      	str	r5, [r0, #8]
	thread_base->sched_locked = 0U;
 800d278:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800d27a:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d27c:	9600      	str	r6, [sp, #0]
{
 800d27e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d280:	9601      	str	r6, [sp, #4]
{
 800d282:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d284:	9602      	str	r6, [sp, #8]
{
 800d286:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->prio = priority;
 800d288:	7386      	strb	r6, [r0, #14]
{
 800d28a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	thread_base->user_options = (uint8_t)options;
 800d28c:	7306      	strb	r6, [r0, #12]
 800d28e:	f100 0658 	add.w	r6, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 800d292:	e9c0 6616 	strd	r6, r6, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d296:	3220      	adds	r2, #32
	thread_base->thread_state = (uint8_t)initial_state;
 800d298:	2604      	movs	r6, #4
 800d29a:	7346      	strb	r6, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d29c:	440a      	add	r2, r1
{
 800d29e:	4604      	mov	r4, r0
 800d2a0:	e9dd 7610 	ldrd	r7, r6, [sp, #64]	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d2a4:	f7f5 ff06 	bl	80030b4 <arch_new_thread>
	if (!_current) {
 800d2a8:	4b10      	ldr	r3, [pc, #64]	; (800d2ec <z_impl_k_thread_create+0x90>)
	new_thread->init_data = NULL;
 800d2aa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	b103      	cbz	r3, 800d2b2 <z_impl_k_thread_create+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800d2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800d2b2:	6763      	str	r3, [r4, #116]	; 0x74
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800d2b4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800d2b8:	bf08      	it	eq
 800d2ba:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800d2be:	d102      	bne.n	800d2c6 <z_impl_k_thread_create+0x6a>
}
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	b005      	add	sp, #20
 800d2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800d2c6:	ea56 0307 	orrs.w	r3, r6, r7
 800d2ca:	d105      	bne.n	800d2d8 <z_impl_k_thread_create+0x7c>
	z_sched_start(thread);
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 fe99 	bl	800e004 <z_sched_start>
}
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	b005      	add	sp, #20
 800d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800d2d8:	f104 0018 	add.w	r0, r4, #24
 800d2dc:	4904      	ldr	r1, [pc, #16]	; (800d2f0 <z_impl_k_thread_create+0x94>)
 800d2de:	463a      	mov	r2, r7
 800d2e0:	4633      	mov	r3, r6
 800d2e2:	f001 fa91 	bl	800e808 <z_add_timeout>
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	b005      	add	sp, #20
 800d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ec:	2000159c 	.word	0x2000159c
 800d2f0:	0800ddf9 	.word	0x0800ddf9

0800d2f4 <z_init_static_threads>:
{
 800d2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800d2f8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d3d4 <z_init_static_threads+0xe0>
 800d2fc:	4f36      	ldr	r7, [pc, #216]	; (800d3d8 <z_init_static_threads+0xe4>)
 800d2fe:	45ba      	cmp	sl, r7
{
 800d300:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 800d302:	d23f      	bcs.n	800d384 <z_init_static_threads+0x90>
 800d304:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800d3dc <z_init_static_threads+0xe8>
 800d308:	4655      	mov	r5, sl
	thread_base->pended_on = NULL;
 800d30a:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
 800d30c:	f04f 0804 	mov.w	r8, #4
		z_setup_new_thread(
 800d310:	6928      	ldr	r0, [r5, #16]
 800d312:	9004      	str	r0, [sp, #16]
	thread_base->user_options = (uint8_t)options;
 800d314:	e9d5 b007 	ldrd	fp, r0, [r5, #28]
		z_setup_new_thread(
 800d318:	e9d5 4100 	ldrd	r4, r1, [r5]
 800d31c:	68aa      	ldr	r2, [r5, #8]
	thread_base->user_options = (uint8_t)options;
 800d31e:	9005      	str	r0, [sp, #20]
 800d320:	f89d 0014 	ldrb.w	r0, [sp, #20]
		z_setup_new_thread(
 800d324:	68eb      	ldr	r3, [r5, #12]
	thread_base->user_options = (uint8_t)options;
 800d326:	f88d 0014 	strb.w	r0, [sp, #20]
		z_setup_new_thread(
 800d32a:	e9d5 ce05 	ldrd	ip, lr, [r5, #20]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d32e:	3207      	adds	r2, #7
	thread_base->prio = priority;
 800d330:	f884 b00e 	strb.w	fp, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d334:	f022 0207 	bic.w	r2, r2, #7
	thread_base->user_options = (uint8_t)options;
 800d338:	b2c0      	uxtb	r0, r0
 800d33a:	f104 0b58 	add.w	fp, r4, #88	; 0x58
 800d33e:	e9c4 bb16 	strd	fp, fp, [r4, #88]	; 0x58
 800d342:	7320      	strb	r0, [r4, #12]
	new_thread->stack_info.size = stack_buf_size;
 800d344:	66e2      	str	r2, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d346:	9804      	ldr	r0, [sp, #16]
	thread_base->pended_on = NULL;
 800d348:	60a6      	str	r6, [r4, #8]
 800d34a:	f101 0b20 	add.w	fp, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800d34e:	3220      	adds	r2, #32
	node->prev = NULL;
 800d350:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->thread_state = (uint8_t)initial_state;
 800d354:	f884 800d 	strb.w	r8, [r4, #13]
	thread_base->sched_locked = 0U;
 800d358:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 800d35a:	6726      	str	r6, [r4, #112]	; 0x70
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800d35c:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800d360:	440a      	add	r2, r1
 800d362:	9000      	str	r0, [sp, #0]
 800d364:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800d368:	4620      	mov	r0, r4
 800d36a:	f7f5 fea3 	bl	80030b4 <arch_new_thread>
	if (!_current) {
 800d36e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	new_thread->init_data = NULL;
 800d372:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800d374:	b103      	cbz	r3, 800d378 <z_init_static_threads+0x84>
	new_thread->resource_pool = _current->resource_pool;
 800d376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		thread_data->init_thread->init_data = thread_data;
 800d378:	682a      	ldr	r2, [r5, #0]
 800d37a:	6763      	str	r3, [r4, #116]	; 0x74
 800d37c:	6555      	str	r5, [r2, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800d37e:	3530      	adds	r5, #48	; 0x30
 800d380:	42bd      	cmp	r5, r7
 800d382:	d3c5      	bcc.n	800d310 <z_init_static_threads+0x1c>
	k_sched_lock();
 800d384:	f000 ffac 	bl	800e2e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800d388:	45ba      	cmp	sl, r7
 800d38a:	d21d      	bcs.n	800d3c8 <z_init_static_threads+0xd4>
 800d38c:	4c11      	ldr	r4, [pc, #68]	; (800d3d4 <z_init_static_threads+0xe0>)
 800d38e:	4e14      	ldr	r6, [pc, #80]	; (800d3e0 <z_init_static_threads+0xec>)
 800d390:	250a      	movs	r5, #10
 800d392:	e005      	b.n	800d3a0 <z_init_static_threads+0xac>
	z_sched_start(thread);
 800d394:	4660      	mov	r0, ip
 800d396:	f000 fe35 	bl	800e004 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800d39a:	3430      	adds	r4, #48	; 0x30
 800d39c:	42bc      	cmp	r4, r7
 800d39e:	d213      	bcs.n	800d3c8 <z_init_static_threads+0xd4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800d3a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					    K_MSEC(thread_data->init_delay));
 800d3a2:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800d3a6:	3101      	adds	r1, #1
 800d3a8:	fb83 2305 	smull	r2, r3, r3, r5
 800d3ac:	d0f5      	beq.n	800d39a <z_init_static_threads+0xa6>
			schedule_new_thread(thread_data->init_thread,
 800d3ae:	f8d4 c000 	ldr.w	ip, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800d3b2:	ea52 0103 	orrs.w	r1, r2, r3
 800d3b6:	f10c 0018 	add.w	r0, ip, #24
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	d0ea      	beq.n	800d394 <z_init_static_threads+0xa0>
	_FOREACH_STATIC_THREAD(thread_data) {
 800d3be:	3430      	adds	r4, #48	; 0x30
 800d3c0:	f001 fa22 	bl	800e808 <z_add_timeout>
 800d3c4:	42bc      	cmp	r4, r7
 800d3c6:	d3eb      	bcc.n	800d3a0 <z_init_static_threads+0xac>
}
 800d3c8:	b007      	add	sp, #28
 800d3ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
 800d3ce:	f000 bf9b 	b.w	800e308 <k_sched_unlock>
 800d3d2:	bf00      	nop
 800d3d4:	20000638 	.word	0x20000638
 800d3d8:	200006f8 	.word	0x200006f8
 800d3dc:	2000159c 	.word	0x2000159c
 800d3e0:	0800ddf9 	.word	0x0800ddf9

0800d3e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800d3e4:	b508      	push	{r3, lr}
	__asm__ volatile(
 800d3e6:	f04f 0210 	mov.w	r2, #16
 800d3ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d3ee:	f382 8812 	msr	BASEPRI_MAX, r2
 800d3f2:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800d3f6:	f7f5 fd77 	bl	8002ee8 <arch_cpu_idle>
 800d3fa:	e7f4      	b.n	800d3e6 <idle+0x2>

0800d3fc <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d400:	4604      	mov	r4, r0
 800d402:	b082      	sub	sp, #8
 800d404:	460e      	mov	r6, r1
 800d406:	4615      	mov	r5, r2

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800d408:	f100 0808 	add.w	r8, r0, #8
 800d40c:	f04f 0210 	mov.w	r2, #16
 800d410:	f3ef 8711 	mrs	r7, BASEPRI
 800d414:	f382 8812 	msr	BASEPRI_MAX, r2
 800d418:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800d41c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d41e:	6901      	ldr	r1, [r0, #16]
 800d420:	428a      	cmp	r2, r1
 800d422:	d30b      	bcc.n	800d43c <z_impl_k_msgq_put+0x40>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d424:	ea55 0203 	orrs.w	r2, r5, r3
 800d428:	d135      	bne.n	800d496 <z_impl_k_msgq_put+0x9a>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800d42a:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800d42e:	f387 8811 	msr	BASEPRI, r7
 800d432:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800d436:	b002      	add	sp, #8
 800d438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800d43c:	f000 fea2 	bl	800e184 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800d440:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
 800d442:	4605      	mov	r5, r0
 800d444:	b180      	cbz	r0, 800d468 <z_impl_k_msgq_put+0x6c>
 800d446:	4631      	mov	r1, r6
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800d448:	2400      	movs	r4, #0
 800d44a:	6940      	ldr	r0, [r0, #20]
 800d44c:	f003 fd34 	bl	8010eb8 <memcpy>
			z_ready_thread(pending_thread);
 800d450:	4628      	mov	r0, r5
 800d452:	67ec      	str	r4, [r5, #124]	; 0x7c
 800d454:	f000 fdc6 	bl	800dfe4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800d458:	4640      	mov	r0, r8
 800d45a:	4639      	mov	r1, r7
 800d45c:	f000 ff22 	bl	800e2a4 <z_reschedule>
			return 0;
 800d460:	4620      	mov	r0, r4
}
 800d462:	b002      	add	sp, #8
 800d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d468:	4631      	mov	r1, r6
 800d46a:	6a20      	ldr	r0, [r4, #32]
 800d46c:	f003 fd24 	bl	8010eb8 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800d470:	6a23      	ldr	r3, [r4, #32]
 800d472:	68e1      	ldr	r1, [r4, #12]
			if (msgq->write_ptr == msgq->buffer_end) {
 800d474:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 800d476:	440b      	add	r3, r1
			if (msgq->write_ptr == msgq->buffer_end) {
 800d478:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 800d47a:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
 800d47c:	bf04      	itt	eq
 800d47e:	6963      	ldreq	r3, [r4, #20]
 800d480:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
 800d482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d484:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800d486:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d48a:	2110      	movs	r1, #16
			msgq->used_msgs++;
 800d48c:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800d48e:	f001 fed1 	bl	800f234 <z_handle_obj_poll_events>
		result = 0;
 800d492:	2000      	movs	r0, #0
 800d494:	e7cb      	b.n	800d42e <z_impl_k_msgq_put+0x32>
		_current->base.swap_data = (void *) data;
 800d496:	4c06      	ldr	r4, [pc, #24]	; (800d4b0 <z_impl_k_msgq_put+0xb4>)
 800d498:	68a4      	ldr	r4, [r4, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800d49a:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
 800d49c:	6166      	str	r6, [r4, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800d49e:	4639      	mov	r1, r7
 800d4a0:	e9cd 5300 	strd	r5, r3, [sp]
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	f000 fe35 	bl	800e114 <z_pend_curr>
}
 800d4aa:	b002      	add	sp, #8
 800d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b0:	2000159c 	.word	0x2000159c

0800d4b4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b6:	468c      	mov	ip, r1
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	4615      	mov	r5, r2

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800d4be:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800d4c2:	f04f 0210 	mov.w	r2, #16
 800d4c6:	f3ef 8611 	mrs	r6, BASEPRI
 800d4ca:	f382 8812 	msr	BASEPRI_MAX, r2
 800d4ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800d4d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800d4d4:	2a00      	cmp	r2, #0
 800d4d6:	d032      	beq.n	800d53e <z_impl_k_msgq_get+0x8a>
 800d4d8:	68c2      	ldr	r2, [r0, #12]
 800d4da:	4608      	mov	r0, r1
 800d4dc:	69e1      	ldr	r1, [r4, #28]
 800d4de:	f003 fceb 	bl	8010eb8 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800d4e2:	69e3      	ldr	r3, [r4, #28]
 800d4e4:	68e2      	ldr	r2, [r4, #12]
 800d4e6:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 800d4e8:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
 800d4ea:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800d4ec:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 800d4ee:	bf04      	itt	eq
 800d4f0:	6963      	ldreq	r3, [r4, #20]
 800d4f2:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
 800d4f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f6:	3b01      	subs	r3, #1

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800d4f8:	4620      	mov	r0, r4
		msgq->used_msgs--;
 800d4fa:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800d4fc:	f000 fe42 	bl	800e184 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800d500:	4605      	mov	r5, r0
 800d502:	b308      	cbz	r0, 800d548 <z_impl_k_msgq_get+0x94>
 800d504:	6941      	ldr	r1, [r0, #20]
 800d506:	68e2      	ldr	r2, [r4, #12]
 800d508:	6a20      	ldr	r0, [r4, #32]
 800d50a:	f003 fcd5 	bl	8010eb8 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800d50e:	6a23      	ldr	r3, [r4, #32]
 800d510:	68e2      	ldr	r2, [r4, #12]
 800d512:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 800d514:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 800d516:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800d518:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 800d51a:	bf04      	itt	eq
 800d51c:	6963      	ldreq	r3, [r4, #20]
 800d51e:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
 800d520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d522:	3301      	adds	r3, #1
 800d524:	6263      	str	r3, [r4, #36]	; 0x24
 800d526:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800d528:	4628      	mov	r0, r5
 800d52a:	67ec      	str	r4, [r5, #124]	; 0x7c
 800d52c:	f000 fd5a 	bl	800dfe4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800d530:	4638      	mov	r0, r7
 800d532:	4631      	mov	r1, r6
 800d534:	f000 feb6 	bl	800e2a4 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800d538:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800d53a:	b003      	add	sp, #12
 800d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d53e:	ea55 0203 	orrs.w	r2, r5, r3
 800d542:	d107      	bne.n	800d554 <z_impl_k_msgq_get+0xa0>
		result = -ENOMSG;
 800d544:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800d548:	f386 8811 	msr	BASEPRI, r6
 800d54c:	f3bf 8f6f 	isb	sy
}
 800d550:	b003      	add	sp, #12
 800d552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800d554:	4c06      	ldr	r4, [pc, #24]	; (800d570 <z_impl_k_msgq_get+0xbc>)
 800d556:	68a4      	ldr	r4, [r4, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800d558:	4602      	mov	r2, r0
		_current->base.swap_data = data;
 800d55a:	f8c4 c014 	str.w	ip, [r4, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800d55e:	4631      	mov	r1, r6
 800d560:	e9cd 5300 	strd	r5, r3, [sp]
 800d564:	4638      	mov	r0, r7
 800d566:	f000 fdd5 	bl	800e114 <z_pend_curr>
}
 800d56a:	b003      	add	sp, #12
 800d56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d56e:	bf00      	nop
 800d570:	2000159c 	.word	0x2000159c

0800d574 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
 800d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d576:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
 800d578:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
 800d57c:	f04f 0310 	mov.w	r3, #16
 800d580:	f3ef 8711 	mrs	r7, BASEPRI
 800d584:	f383 8812 	msr	BASEPRI_MAX, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f06f 0522 	mvn.w	r5, #34	; 0x22
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800d590:	e002      	b.n	800d598 <z_impl_k_msgq_purge+0x24>
 800d592:	67dd      	str	r5, [r3, #124]	; 0x7c
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
 800d594:	f000 fd26 	bl	800dfe4 <z_ready_thread>
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
 800d598:	4620      	mov	r0, r4
 800d59a:	f000 fdf3 	bl	800e184 <z_unpend_first_thread>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1f6      	bne.n	800d592 <z_impl_k_msgq_purge+0x1e>
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
 800d5a4:	6a22      	ldr	r2, [r4, #32]
	msgq->used_msgs = 0;
 800d5a6:	6260      	str	r0, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
 800d5a8:	61e2      	str	r2, [r4, #28]

	z_reschedule(&msgq->lock, key);
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	4630      	mov	r0, r6
}
 800d5ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
 800d5b2:	f000 be77 	b.w	800e2a4 <z_reschedule>
 800d5b6:	bf00      	nop

0800d5b8 <z_impl_k_mutex_init>:
 * under the scheduler lock so we can break this up.
 */
static struct k_spinlock lock;

int z_impl_k_mutex_init(struct k_mutex *mutex)
{
 800d5b8:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800d5ba:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 800d5bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 800d5c0:	e9c3 3300 	strd	r3, r3, [r3]
	z_object_init(mutex);

	SYS_PORT_TRACING_OBJ_INIT(k_mutex, mutex, 0);

	return 0;
}
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop

0800d5c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	f04f 0110 	mov.w	r1, #16
 800d5d2:	f3ef 8511 	mrs	r5, BASEPRI
 800d5d6:	f381 8812 	msr	BASEPRI_MAX, r1
 800d5da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800d5de:	68c1      	ldr	r1, [r0, #12]
 800d5e0:	b971      	cbnz	r1, 800d600 <z_impl_k_mutex_lock+0x38>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800d5e2:	4b39      	ldr	r3, [pc, #228]	; (800d6c8 <z_impl_k_mutex_lock+0x100>)
 800d5e4:	6898      	ldr	r0, [r3, #8]
 800d5e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
 800d5ea:	60a0      	str	r0, [r4, #8]
		mutex->lock_count++;
 800d5ec:	3101      	adds	r1, #1
 800d5ee:	e9c4 1303 	strd	r1, r3, [r4, #12]
	__asm__ volatile(
 800d5f2:	f385 8811 	msr	BASEPRI, r5
 800d5f6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800d5fa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800d5fc:	b004      	add	sp, #16
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800d600:	4831      	ldr	r0, [pc, #196]	; (800d6c8 <z_impl_k_mutex_lock+0x100>)
 800d602:	68a6      	ldr	r6, [r4, #8]
 800d604:	6880      	ldr	r0, [r0, #8]
 800d606:	4286      	cmp	r6, r0
 800d608:	d101      	bne.n	800d60e <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	e7ed      	b.n	800d5ea <z_impl_k_mutex_lock+0x22>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800d60e:	ea52 0103 	orrs.w	r1, r2, r3
 800d612:	d052      	beq.n	800d6ba <z_impl_k_mutex_lock+0xf2>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800d614:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800d618:	f996 000e 	ldrsb.w	r0, [r6, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
 800d61c:	4281      	cmp	r1, r0
 800d61e:	bfa8      	it	ge
 800d620:	4601      	movge	r1, r0
 800d622:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
 800d626:	4561      	cmp	r1, ip
 800d628:	bfb8      	it	lt
 800d62a:	4661      	movlt	r1, ip
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800d62c:	4288      	cmp	r0, r1
 800d62e:	dc39      	bgt.n	800d6a4 <z_impl_k_mutex_lock+0xdc>
	bool resched = false;
 800d630:	2600      	movs	r6, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800d632:	9200      	str	r2, [sp, #0]
 800d634:	4825      	ldr	r0, [pc, #148]	; (800d6cc <z_impl_k_mutex_lock+0x104>)
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	4622      	mov	r2, r4
 800d63a:	4629      	mov	r1, r5
 800d63c:	f000 fd6a 	bl	800e114 <z_pend_curr>
	if (got_mutex == 0) {
 800d640:	2800      	cmp	r0, #0
 800d642:	d0db      	beq.n	800d5fc <z_impl_k_mutex_lock+0x34>
	__asm__ volatile(
 800d644:	f04f 0310 	mov.w	r3, #16
 800d648:	f3ef 8511 	mrs	r5, BASEPRI
 800d64c:	f383 8812 	msr	BASEPRI_MAX, r3
 800d650:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800d654:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d656:	429c      	cmp	r4, r3
 800d658:	d02d      	beq.n	800d6b6 <z_impl_k_mutex_lock+0xee>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800d65a:	b363      	cbz	r3, 800d6b6 <z_impl_k_mutex_lock+0xee>
 800d65c:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800d660:	6923      	ldr	r3, [r4, #16]
 800d662:	4299      	cmp	r1, r3
 800d664:	bfa8      	it	ge
 800d666:	4619      	movge	r1, r3
 800d668:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800d66c:	4299      	cmp	r1, r3
 800d66e:	bfb8      	it	lt
 800d670:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800d672:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 800d674:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800d678:	4299      	cmp	r1, r3
 800d67a:	d107      	bne.n	800d68c <z_impl_k_mutex_lock+0xc4>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800d67c:	b15e      	cbz	r6, 800d696 <z_impl_k_mutex_lock+0xce>
		z_reschedule(&lock, key);
 800d67e:	4813      	ldr	r0, [pc, #76]	; (800d6cc <z_impl_k_mutex_lock+0x104>)
 800d680:	4629      	mov	r1, r5
 800d682:	f000 fe0f 	bl	800e2a4 <z_reschedule>
	return -EAGAIN;
 800d686:	f06f 000a 	mvn.w	r0, #10
 800d68a:	e7b7      	b.n	800d5fc <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 800d68c:	f000 fdc0 	bl	800e210 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800d690:	2800      	cmp	r0, #0
 800d692:	d1f4      	bne.n	800d67e <z_impl_k_mutex_lock+0xb6>
 800d694:	e7f2      	b.n	800d67c <z_impl_k_mutex_lock+0xb4>
	__asm__ volatile(
 800d696:	f385 8811 	msr	BASEPRI, r5
 800d69a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800d69e:	f06f 000a 	mvn.w	r0, #10
 800d6a2:	e7ab      	b.n	800d5fc <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6aa:	f000 fdb1 	bl	800e210 <z_set_prio>
 800d6ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	e7bd      	b.n	800d632 <z_impl_k_mutex_lock+0x6a>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800d6b6:	6921      	ldr	r1, [r4, #16]
 800d6b8:	e7db      	b.n	800d672 <z_impl_k_mutex_lock+0xaa>
 800d6ba:	f385 8811 	msr	BASEPRI, r5
 800d6be:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800d6c2:	f06f 000f 	mvn.w	r0, #15
 800d6c6:	e799      	b.n	800d5fc <z_impl_k_mutex_lock+0x34>
 800d6c8:	2000159c 	.word	0x2000159c
 800d6cc:	200015c0 	.word	0x200015c0

0800d6d0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800d6d0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800d6d2:	6883      	ldr	r3, [r0, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d03b      	beq.n	800d750 <z_impl_k_mutex_unlock+0x80>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800d6d8:	4a1f      	ldr	r2, [pc, #124]	; (800d758 <z_impl_k_mutex_unlock+0x88>)
 800d6da:	6892      	ldr	r2, [r2, #8]
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d134      	bne.n	800d74a <z_impl_k_mutex_unlock+0x7a>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800d6e0:	7bda      	ldrb	r2, [r3, #15]
 800d6e2:	3a01      	subs	r2, #1
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800d6e8:	68c3      	ldr	r3, [r0, #12]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d905      	bls.n	800d6fa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800d6f2:	f000 fe09 	bl	800e308 <k_sched_unlock>

	return 0;
 800d6f6:	2000      	movs	r0, #0
}
 800d6f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800d6fa:	f04f 0310 	mov.w	r3, #16
 800d6fe:	f3ef 8511 	mrs	r5, BASEPRI
 800d702:	f383 8812 	msr	BASEPRI_MAX, r3
 800d706:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800d70a:	6880      	ldr	r0, [r0, #8]
 800d70c:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
 800d70e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800d712:	4299      	cmp	r1, r3
 800d714:	d116      	bne.n	800d744 <z_impl_k_mutex_unlock+0x74>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fd34 	bl	800e184 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800d71c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800d71e:	b158      	cbz	r0, 800d738 <z_impl_k_mutex_unlock+0x68>
		mutex->owner_orig_prio = new_owner->base.prio;
 800d720:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800d724:	6122      	str	r2, [r4, #16]
 800d726:	2200      	movs	r2, #0
 800d728:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800d72a:	f000 fc5b 	bl	800dfe4 <z_ready_thread>
		z_reschedule(&lock, key);
 800d72e:	480b      	ldr	r0, [pc, #44]	; (800d75c <z_impl_k_mutex_unlock+0x8c>)
 800d730:	4629      	mov	r1, r5
 800d732:	f000 fdb7 	bl	800e2a4 <z_reschedule>
 800d736:	e7dc      	b.n	800d6f2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800d738:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800d73a:	f385 8811 	msr	BASEPRI, r5
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	e7d6      	b.n	800d6f2 <z_impl_k_mutex_unlock+0x22>
		return z_set_prio(mutex->owner, new_prio);
 800d744:	f000 fd64 	bl	800e210 <z_set_prio>
 800d748:	e7e5      	b.n	800d716 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
 800d74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800d750:	f06f 0015 	mvn.w	r0, #21
}
 800d754:	bd38      	pop	{r3, r4, r5, pc}
 800d756:	bf00      	nop
 800d758:	2000159c 	.word	0x2000159c
 800d75c:	200015c0 	.word	0x200015c0

0800d760 <z_impl_k_sem_init>:
		      unsigned int limit)
{
	/*
	 * Limit cannot be zero and count cannot be greater than limit
	 */
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800d760:	b15a      	cbz	r2, 800d77a <z_impl_k_sem_init+0x1a>
 800d762:	428a      	cmp	r2, r1
 800d764:	d309      	bcc.n	800d77a <z_impl_k_sem_init+0x1a>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, init, sem, 0);

	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
 800d766:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 800d76a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 800d76e:	e9c0 0000 	strd	r0, r0, [r0]
 800d772:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif
	z_object_init(sem);

	return 0;
 800d776:	2000      	movs	r0, #0
 800d778:	4770      	bx	lr
		return -EINVAL;
 800d77a:	f06f 0015 	mvn.w	r0, #21
}
 800d77e:	4770      	bx	lr

0800d780 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4604      	mov	r4, r0
	__asm__ volatile(
 800d784:	f04f 0310 	mov.w	r3, #16
 800d788:	f3ef 8511 	mrs	r5, BASEPRI
 800d78c:	f383 8812 	msr	BASEPRI_MAX, r3
 800d790:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800d794:	f000 fcf6 	bl	800e184 <z_unpend_first_thread>

	if (thread != NULL) {
 800d798:	b148      	cbz	r0, 800d7ae <z_impl_k_sem_give+0x2e>
 800d79a:	2200      	movs	r2, #0
 800d79c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800d79e:	f000 fc21 	bl	800dfe4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	480a      	ldr	r0, [pc, #40]	; (800d7d0 <z_impl_k_sem_give+0x50>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800d7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800d7aa:	f000 bd7b 	b.w	800e2a4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800d7ae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	bf18      	it	ne
 800d7b6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800d7b8:	f104 0010 	add.w	r0, r4, #16
 800d7bc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800d7be:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800d7c0:	f001 fd38 	bl	800f234 <z_handle_obj_poll_events>
	z_reschedule(&lock, key);
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4802      	ldr	r0, [pc, #8]	; (800d7d0 <z_impl_k_sem_give+0x50>)
}
 800d7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800d7cc:	f000 bd6a 	b.w	800e2a4 <z_reschedule>
 800d7d0:	200015c4 	.word	0x200015c4

0800d7d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800d7d4:	4684      	mov	ip, r0
 800d7d6:	f04f 0010 	mov.w	r0, #16
 800d7da:	f3ef 8111 	mrs	r1, BASEPRI
 800d7de:	f380 8812 	msr	BASEPRI_MAX, r0
 800d7e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800d7e6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800d7ea:	b140      	cbz	r0, 800d7fe <z_impl_k_sem_take+0x2a>
		sem->count--;
 800d7ec:	3801      	subs	r0, #1
 800d7ee:	f8cc 0008 	str.w	r0, [ip, #8]
	__asm__ volatile(
 800d7f2:	f381 8811 	msr	BASEPRI, r1
 800d7f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800d7fa:	2000      	movs	r0, #0
		goto out;
 800d7fc:	4770      	bx	lr
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800d7fe:	ea52 0003 	orrs.w	r0, r2, r3
 800d802:	d00a      	beq.n	800d81a <z_impl_k_sem_take+0x46>
{
 800d804:	b500      	push	{lr}
 800d806:	b083      	sub	sp, #12
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800d808:	e9cd 2300 	strd	r2, r3, [sp]
 800d80c:	4806      	ldr	r0, [pc, #24]	; (800d828 <z_impl_k_sem_take+0x54>)
 800d80e:	4662      	mov	r2, ip
 800d810:	f000 fc80 	bl	800e114 <z_pend_curr>

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800d814:	b003      	add	sp, #12
 800d816:	f85d fb04 	ldr.w	pc, [sp], #4
 800d81a:	f381 8811 	msr	BASEPRI, r1
 800d81e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800d822:	f06f 000f 	mvn.w	r0, #15
}
 800d826:	4770      	bx	lr
 800d828:	200015c4 	.word	0x200015c4

0800d82c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	4604      	mov	r4, r0
	__asm__ volatile(
 800d830:	f04f 0310 	mov.w	r3, #16
 800d834:	f3ef 8611 	mrs	r6, BASEPRI
 800d838:	f383 8812 	msr	BASEPRI_MAX, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f06f 050a 	mvn.w	r5, #10
 800d844:	e002      	b.n	800d84c <z_impl_k_sem_reset+0x20>
 800d846:	67c5      	str	r5, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800d848:	f000 fbcc 	bl	800dfe4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fc99 	bl	800e184 <z_unpend_first_thread>
		if (thread == NULL) {
 800d852:	4603      	mov	r3, r0
 800d854:	2800      	cmp	r0, #0
 800d856:	d1f6      	bne.n	800d846 <z_impl_k_sem_reset+0x1a>
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800d858:	f104 0010 	add.w	r0, r4, #16
	}
	sem->count = 0;
 800d85c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800d85e:	2102      	movs	r1, #2
 800d860:	f001 fce8 	bl	800f234 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 800d864:	4631      	mov	r1, r6
 800d866:	4802      	ldr	r0, [pc, #8]	; (800d870 <z_impl_k_sem_reset+0x44>)
}
 800d868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 800d86c:	f000 bd1a 	b.w	800e2a4 <z_reschedule>
 800d870:	200015c4 	.word	0x200015c4

0800d874 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d878:	4f4f      	ldr	r7, [pc, #316]	; (800d9b8 <work_queue_main+0x144>)
 800d87a:	b087      	sub	sp, #28
 800d87c:	4605      	mov	r5, r0
 800d87e:	f100 0a88 	add.w	sl, r0, #136	; 0x88
 800d882:	f100 0b90 	add.w	fp, r0, #144	; 0x90
 800d886:	2600      	movs	r6, #0
 800d888:	f04f 0210 	mov.w	r2, #16
 800d88c:	f3ef 8811 	mrs	r8, BASEPRI
 800d890:	f382 8812 	msr	BASEPRI_MAX, r2
 800d894:	f3bf 8f6f 	isb	sy
	return list->head;
 800d898:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800d89c:	2c00      	cmp	r4, #0
 800d89e:	d061      	beq.n	800d964 <work_queue_main+0xf0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800d8a0:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
	return node->next;
 800d8a4:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800d8a6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800d8aa:	428c      	cmp	r4, r1
	list->tail = node;
 800d8ac:	bf08      	it	eq
 800d8ae:	f8c5 2084 	streq.w	r2, [r5, #132]	; 0x84
	*flagp |= BIT(bit);
 800d8b2:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
			 * of struct k_work object that has been placed at address NULL,
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
 800d8b6:	6861      	ldr	r1, [r4, #4]
	*flagp |= BIT(bit);
 800d8b8:	f042 0202 	orr.w	r2, r2, #2
 800d8bc:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800d8c0:	68e2      	ldr	r2, [r4, #12]
 800d8c2:	f022 0204 	bic.w	r2, r2, #4
 800d8c6:	f042 0201 	orr.w	r2, r2, #1
 800d8ca:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
 800d8cc:	f388 8811 	msr	BASEPRI, r8
 800d8d0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4788      	blx	r1
	__asm__ volatile(
 800d8d8:	f04f 0310 	mov.w	r3, #16
 800d8dc:	f3ef 8811 	mrs	r8, BASEPRI
 800d8e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800d8e4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800d8e8:	68e3      	ldr	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800d8ea:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
 800d8ec:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800d8f0:	d40f      	bmi.n	800d912 <work_queue_main+0x9e>
	*flagp &= ~BIT(bit);
 800d8f2:	60e2      	str	r2, [r4, #12]
 800d8f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800d8f8:	f023 0302 	bic.w	r3, r3, #2
 800d8fc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	__asm__ volatile(
 800d900:	f388 8811 	msr	BASEPRI, r8
 800d904:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800d908:	05db      	lsls	r3, r3, #23
 800d90a:	d4bd      	bmi.n	800d888 <work_queue_main+0x14>
	z_impl_k_yield();
 800d90c:	f000 fd48 	bl	800e3a0 <z_impl_k_yield>
}
 800d910:	e7ba      	b.n	800d888 <work_queue_main+0x14>
	return list->head;
 800d912:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
 800d914:	f023 0303 	bic.w	r3, r3, #3
 800d918:	60e3      	str	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d0ea      	beq.n	800d8f4 <work_queue_main+0x80>
		if (wc->work == work) {
 800d91e:	6842      	ldr	r2, [r0, #4]
	return node->next;
 800d920:	6803      	ldr	r3, [r0, #0]
 800d922:	4294      	cmp	r4, r2
 800d924:	f04f 0900 	mov.w	r9, #0
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800d928:	4684      	mov	ip, r0
		if (wc->work == work) {
 800d92a:	d008      	beq.n	800d93e <work_queue_main+0xca>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0e1      	beq.n	800d8f4 <work_queue_main+0x80>
 800d930:	4618      	mov	r0, r3
 800d932:	46e1      	mov	r9, ip
		if (wc->work == work) {
 800d934:	6842      	ldr	r2, [r0, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4294      	cmp	r4, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800d93a:	4684      	mov	ip, r0
		if (wc->work == work) {
 800d93c:	d1f6      	bne.n	800d92c <work_queue_main+0xb8>
 800d93e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	d032      	beq.n	800d9ac <work_queue_main+0x138>
	return list->tail;
 800d946:	687a      	ldr	r2, [r7, #4]
	parent->next = child;
 800d948:	f8c9 1000 	str.w	r1, [r9]
Z_GENLIST_REMOVE(slist, snode)
 800d94c:	4290      	cmp	r0, r2
	list->tail = node;
 800d94e:	bf08      	it	eq
 800d950:	f8c7 9004 	streq.w	r9, [r7, #4]
	parent->next = child;
 800d954:	f840 6b08 	str.w	r6, [r0], #8
 800d958:	9305      	str	r3, [sp, #20]
	z_impl_k_sem_give(sem);
 800d95a:	f7ff ff11 	bl	800d780 <z_impl_k_sem_give>
}
 800d95e:	9b05      	ldr	r3, [sp, #20]
 800d960:	46cc      	mov	ip, r9
 800d962:	e7e3      	b.n	800d92c <work_queue_main+0xb8>
	return (*flagp & BIT(bit)) != 0U;
 800d964:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800d968:	f022 0104 	bic.w	r1, r2, #4
		} else if (flag_test_and_clear(&queue->flags,
 800d96c:	0750      	lsls	r0, r2, #29
	*flagp &= ~BIT(bit);
 800d96e:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
 800d972:	d40c      	bmi.n	800d98e <work_queue_main+0x11a>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800d974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d97c:	e9cd 3400 	strd	r3, r4, [sp]
 800d980:	9602      	str	r6, [sp, #8]
 800d982:	4652      	mov	r2, sl
 800d984:	4641      	mov	r1, r8
 800d986:	480d      	ldr	r0, [pc, #52]	; (800d9bc <work_queue_main+0x148>)
 800d988:	f000 fec0 	bl	800e70c <z_sched_wait>
			continue;
 800d98c:	e77c      	b.n	800d888 <work_queue_main+0x14>
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800d98e:	2200      	movs	r2, #0
 800d990:	2101      	movs	r1, #1
 800d992:	4658      	mov	r0, fp
 800d994:	f000 fe86 	bl	800e6a4 <z_sched_wake>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d0eb      	beq.n	800d974 <work_queue_main+0x100>
 800d99c:	2200      	movs	r2, #0
 800d99e:	2101      	movs	r1, #1
 800d9a0:	4658      	mov	r0, fp
 800d9a2:	f000 fe7f 	bl	800e6a4 <z_sched_wake>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d1f1      	bne.n	800d98e <work_queue_main+0x11a>
 800d9aa:	e7e3      	b.n	800d974 <work_queue_main+0x100>
Z_GENLIST_REMOVE(slist, snode)
 800d9ac:	687a      	ldr	r2, [r7, #4]
	list->head = node;
 800d9ae:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
 800d9b0:	4290      	cmp	r0, r2
 800d9b2:	d1cf      	bne.n	800d954 <work_queue_main+0xe0>
	list->tail = node;
 800d9b4:	6079      	str	r1, [r7, #4]
}
 800d9b6:	e7cd      	b.n	800d954 <work_queue_main+0xe0>
 800d9b8:	200015cc 	.word	0x200015cc
 800d9bc:	200015c8 	.word	0x200015c8

0800d9c0 <submit_to_queue_locked>:
{
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800d9c2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800d9c4:	079f      	lsls	r7, r3, #30
{
 800d9c6:	460d      	mov	r5, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800d9c8:	f3c3 0640 	ubfx	r6, r3, #1, #1
 800d9cc:	d40f      	bmi.n	800d9ee <submit_to_queue_locked+0x2e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800d9ce:	075c      	lsls	r4, r3, #29
 800d9d0:	d510      	bpl.n	800d9f4 <submit_to_queue_locked+0x34>
		*queuep = NULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	602b      	str	r3, [r5, #0]
}
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800d9da:	f7ff fc03 	bl	800d1e4 <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
 800d9de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800d9e2:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800d9e4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800d9e8:	d543      	bpl.n	800da72 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 800d9ea:	b1b2      	cbz	r2, 800da1a <submit_to_queue_locked+0x5a>
 800d9ec:	b1c8      	cbz	r0, 800da22 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 800d9ee:	f06f 060f 	mvn.w	r6, #15
 800d9f2:	e7ee      	b.n	800d9d2 <submit_to_queue_locked+0x12>
		if (*queuep == NULL) {
 800d9f4:	680f      	ldr	r7, [r1, #0]
 800d9f6:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 800d9f8:	f003 0301 	and.w	r3, r3, #1
		if (*queuep == NULL) {
 800d9fc:	b33f      	cbz	r7, 800da4e <submit_to_queue_locked+0x8e>
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800d9fe:	bb4b      	cbnz	r3, 800da54 <submit_to_queue_locked+0x94>
		ret = 1;
 800da00:	2601      	movs	r6, #1
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800da02:	4b1d      	ldr	r3, [pc, #116]	; (800da78 <submit_to_queue_locked+0xb8>)
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	42bb      	cmp	r3, r7
 800da08:	d0e7      	beq.n	800d9da <submit_to_queue_locked+0x1a>
	return (*flagp & BIT(bit)) != 0U;
 800da0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800da0e:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800da10:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800da14:	d52d      	bpl.n	800da72 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 800da16:	2a00      	cmp	r2, #0
 800da18:	d1e9      	bne.n	800d9ee <submit_to_queue_locked+0x2e>
	return (*flagp & BIT(bit)) != 0U;
 800da1a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1e5      	bne.n	800d9ee <submit_to_queue_locked+0x2e>
	parent->next = child;
 800da22:	2300      	movs	r3, #0
 800da24:	6023      	str	r3, [r4, #0]
	return list->tail;
 800da26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
 800da2a:	b1db      	cbz	r3, 800da64 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800da2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800da2e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800da32:	2200      	movs	r2, #0
 800da34:	4611      	mov	r1, r2
 800da36:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800da3a:	f000 fe33 	bl	800e6a4 <z_sched_wake>
	*flagp |= BIT(bit);
 800da3e:	68e3      	ldr	r3, [r4, #12]
			work->queue = *queuep;
 800da40:	682a      	ldr	r2, [r5, #0]
	*flagp |= BIT(bit);
 800da42:	f043 0304 	orr.w	r3, r3, #4
			work->queue = *queuep;
 800da46:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 800da4a:	4630      	mov	r0, r6
 800da4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*queuep = work->queue;
 800da4e:	6887      	ldr	r7, [r0, #8]
 800da50:	600f      	str	r7, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800da52:	b153      	cbz	r3, 800da6a <submit_to_queue_locked+0xaa>
			*queuep = work->queue;
 800da54:	68a7      	ldr	r7, [r4, #8]
 800da56:	602f      	str	r7, [r5, #0]
			ret = 2;
 800da58:	2602      	movs	r6, #2
	if (queue == NULL) {
 800da5a:	2f00      	cmp	r7, #0
 800da5c:	d1d1      	bne.n	800da02 <submit_to_queue_locked+0x42>
		return -EINVAL;
 800da5e:	f06f 0615 	mvn.w	r6, #21
 800da62:	e7b6      	b.n	800d9d2 <submit_to_queue_locked+0x12>
	list->head = node;
 800da64:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
}
 800da68:	e7e3      	b.n	800da32 <submit_to_queue_locked+0x72>
		ret = 1;
 800da6a:	2601      	movs	r6, #1
	if (queue == NULL) {
 800da6c:	2f00      	cmp	r7, #0
 800da6e:	d1c8      	bne.n	800da02 <submit_to_queue_locked+0x42>
 800da70:	e7f5      	b.n	800da5e <submit_to_queue_locked+0x9e>
		ret = -ENODEV;
 800da72:	f06f 0612 	mvn.w	r6, #18
 800da76:	e7ac      	b.n	800d9d2 <submit_to_queue_locked+0x12>
 800da78:	2000159c 	.word	0x2000159c

0800da7c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
 800da7c:	b510      	push	{r4, lr}
 800da7e:	b082      	sub	sp, #8
	__asm__ volatile(
 800da80:	f04f 0310 	mov.w	r3, #16
 800da84:	f3ef 8411 	mrs	r4, BASEPRI
 800da88:	f383 8812 	msr	BASEPRI_MAX, r3
 800da8c:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 800da90:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
 800da94:	2100      	movs	r1, #0
	*flagp &= ~BIT(bit);
 800da96:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800da9a:	071b      	lsls	r3, r3, #28
	struct k_work_q *queue = NULL;
 800da9c:	9101      	str	r1, [sp, #4]
	*flagp &= ~BIT(bit);
 800da9e:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800daa2:	d405      	bmi.n	800dab0 <work_timeout+0x34>
	__asm__ volatile(
 800daa4:	f384 8811 	msr	BASEPRI, r4
 800daa8:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
 800daac:	b002      	add	sp, #8
 800daae:	bd10      	pop	{r4, pc}
		queue = dw->queue;
 800dab0:	6983      	ldr	r3, [r0, #24]
 800dab2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 800dab4:	a901      	add	r1, sp, #4
 800dab6:	3810      	subs	r0, #16
 800dab8:	f7ff ff82 	bl	800d9c0 <submit_to_queue_locked>
 800dabc:	e7f2      	b.n	800daa4 <work_timeout+0x28>
 800dabe:	bf00      	nop

0800dac0 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800dac0:	2300      	movs	r3, #0
 800dac2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800dac6:	6003      	str	r3, [r0, #0]
 800dac8:	6041      	str	r1, [r0, #4]
}
 800daca:	4770      	bx	lr

0800dacc <k_work_submit_to_queue>:
{
 800dacc:	b530      	push	{r4, r5, lr}
 800dace:	b083      	sub	sp, #12
 800dad0:	460b      	mov	r3, r1
 800dad2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 800dad4:	f04f 0210 	mov.w	r2, #16
 800dad8:	f3ef 8511 	mrs	r5, BASEPRI
 800dadc:	f382 8812 	msr	BASEPRI_MAX, r2
 800dae0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800dae4:	a901      	add	r1, sp, #4
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7ff ff6a 	bl	800d9c0 <submit_to_queue_locked>
 800daec:	4604      	mov	r4, r0
	__asm__ volatile(
 800daee:	f385 8811 	msr	BASEPRI, r5
 800daf2:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800daf6:	2800      	cmp	r0, #0
 800daf8:	dc02      	bgt.n	800db00 <k_work_submit_to_queue+0x34>
}
 800dafa:	4620      	mov	r0, r4
 800dafc:	b003      	add	sp, #12
 800dafe:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800db00:	f000 fd58 	bl	800e5b4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800db04:	2800      	cmp	r0, #0
 800db06:	d0f8      	beq.n	800dafa <k_work_submit_to_queue+0x2e>
	z_impl_k_yield();
 800db08:	f000 fc4a 	bl	800e3a0 <z_impl_k_yield>
}
 800db0c:	4620      	mov	r0, r4
 800db0e:	b003      	add	sp, #12
 800db10:	bd30      	pop	{r4, r5, pc}
 800db12:	bf00      	nop

0800db14 <k_work_submit>:
{
 800db14:	b530      	push	{r4, r5, lr}
 800db16:	b083      	sub	sp, #12
 800db18:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <k_work_submit+0x44>)
 800db1a:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
 800db1c:	f04f 0310 	mov.w	r3, #16
 800db20:	f3ef 8511 	mrs	r5, BASEPRI
 800db24:	f383 8812 	msr	BASEPRI_MAX, r3
 800db28:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800db2c:	a901      	add	r1, sp, #4
 800db2e:	f7ff ff47 	bl	800d9c0 <submit_to_queue_locked>
 800db32:	4604      	mov	r4, r0
	__asm__ volatile(
 800db34:	f385 8811 	msr	BASEPRI, r5
 800db38:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dc02      	bgt.n	800db46 <k_work_submit+0x32>
}
 800db40:	4620      	mov	r0, r4
 800db42:	b003      	add	sp, #12
 800db44:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800db46:	f000 fd35 	bl	800e5b4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d0f8      	beq.n	800db40 <k_work_submit+0x2c>
	z_impl_k_yield();
 800db4e:	f000 fc27 	bl	800e3a0 <z_impl_k_yield>
}
 800db52:	4620      	mov	r0, r4
 800db54:	b003      	add	sp, #12
 800db56:	bd30      	pop	{r4, r5, pc}
 800db58:	20000cb0 	.word	0x20000cb0

0800db5c <k_work_queue_start>:
{
 800db5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db5e:	b089      	sub	sp, #36	; 0x24
 800db60:	4604      	mov	r4, r0
	list->head = NULL;
 800db62:	2000      	movs	r0, #0
	list->tail = NULL;
 800db64:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
 800db68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800db6a:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800db6e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
 800db72:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800db76:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
 800db7a:	b31d      	cbz	r5, 800dbc4 <k_work_queue_start+0x68>
 800db7c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 800db7e:	2800      	cmp	r0, #0
 800db80:	f240 1001 	movw	r0, #257	; 0x101
 800db84:	bf08      	it	eq
 800db86:	2001      	moveq	r0, #1
	*flagp = flags;
 800db88:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	(void)k_thread_create(&queue->thread, stack, stack_size,
 800db8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800db90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800db94:	2000      	movs	r0, #0
 800db96:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800db9a:	9303      	str	r3, [sp, #12]
 800db9c:	9004      	str	r0, [sp, #16]
 800db9e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dba2:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <k_work_queue_start+0x6c>)
 800dba4:	9400      	str	r4, [sp, #0]
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7ff fb58 	bl	800d25c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 800dbac:	b125      	cbz	r5, 800dbb8 <k_work_queue_start+0x5c>
 800dbae:	6829      	ldr	r1, [r5, #0]
 800dbb0:	b111      	cbz	r1, 800dbb8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	f7ff fb1c 	bl	800d1f0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800dbb8:	4620      	mov	r0, r4
}
 800dbba:	b009      	add	sp, #36	; 0x24
 800dbbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dbc0:	f7ff bb1a 	b.w	800d1f8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800dbc4:	2001      	movs	r0, #1
 800dbc6:	e7df      	b.n	800db88 <k_work_queue_start+0x2c>
 800dbc8:	0800d875 	.word	0x0800d875

0800dbcc <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
 800dbcc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*dwork = (struct k_work_delayable){
 800dbce:	2230      	movs	r2, #48	; 0x30
{
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	f003 f997 	bl	8010f08 <memset>
 800dbda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbde:	6065      	str	r5, [r4, #4]
 800dbe0:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}

0800dbe4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	4913      	ldr	r1, [pc, #76]	; (800dc38 <k_work_schedule+0x54>)
 800dbea:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 800dbec:	f04f 0110 	mov.w	r1, #16
 800dbf0:	f3ef 8411 	mrs	r4, BASEPRI
 800dbf4:	f381 8812 	msr	BASEPRI_MAX, r1
 800dbf8:	f3bf 8f6f 	isb	sy
	return *flagp;
 800dbfc:	68c1      	ldr	r1, [r0, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 800dbfe:	f011 0f0e 	tst.w	r1, #14
 800dc02:	d006      	beq.n	800dc12 <k_work_schedule+0x2e>
	int ret = 0;
 800dc04:	2000      	movs	r0, #0
	__asm__ volatile(
 800dc06:	f384 8811 	msr	BASEPRI, r4
 800dc0a:	f3bf 8f6f 	isb	sy
	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
 800dc0e:	b002      	add	sp, #8
 800dc10:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800dc12:	ea53 0e02 	orrs.w	lr, r3, r2
 800dc16:	d00a      	beq.n	800dc2e <k_work_schedule+0x4a>
	*flagp |= BIT(bit);
 800dc18:	f041 0108 	orr.w	r1, r1, #8
 800dc1c:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
 800dc1e:	9901      	ldr	r1, [sp, #4]
 800dc20:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800dc22:	3010      	adds	r0, #16
 800dc24:	4905      	ldr	r1, [pc, #20]	; (800dc3c <k_work_schedule+0x58>)
 800dc26:	f000 fdef 	bl	800e808 <z_add_timeout>
	return ret;
 800dc2a:	2001      	movs	r0, #1
 800dc2c:	e7eb      	b.n	800dc06 <k_work_schedule+0x22>
		return submit_to_queue_locked(work, queuep);
 800dc2e:	a901      	add	r1, sp, #4
 800dc30:	f7ff fec6 	bl	800d9c0 <submit_to_queue_locked>
 800dc34:	e7e7      	b.n	800dc06 <k_work_schedule+0x22>
 800dc36:	bf00      	nop
 800dc38:	20000cb0 	.word	0x20000cb0
 800dc3c:	0800da7d 	.word	0x0800da7d

0800dc40 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 800dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc42:	b083      	sub	sp, #12
 800dc44:	4919      	ldr	r1, [pc, #100]	; (800dcac <k_work_reschedule+0x6c>)
 800dc46:	9101      	str	r1, [sp, #4]
 800dc48:	4604      	mov	r4, r0
 800dc4a:	4616      	mov	r6, r2
 800dc4c:	461d      	mov	r5, r3
	__asm__ volatile(
 800dc4e:	f04f 0310 	mov.w	r3, #16
 800dc52:	f3ef 8711 	mrs	r7, BASEPRI
 800dc56:	f383 8812 	msr	BASEPRI_MAX, r3
 800dc5a:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 800dc5e:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 800dc60:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 800dc64:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
 800dc66:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 800dc68:	d41b      	bmi.n	800dca2 <k_work_reschedule+0x62>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800dc6a:	ea55 0306 	orrs.w	r3, r5, r6
 800dc6e:	d013      	beq.n	800dc98 <k_work_reschedule+0x58>
	*flagp |= BIT(bit);
 800dc70:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800dc72:	490f      	ldr	r1, [pc, #60]	; (800dcb0 <k_work_reschedule+0x70>)
	*flagp |= BIT(bit);
 800dc74:	f043 0308 	orr.w	r3, r3, #8
 800dc78:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800dc7e:	f104 0010 	add.w	r0, r4, #16
 800dc82:	4632      	mov	r2, r6
 800dc84:	462b      	mov	r3, r5
 800dc86:	f000 fdbf 	bl	800e808 <z_add_timeout>
	return ret;
 800dc8a:	2001      	movs	r0, #1
	__asm__ volatile(
 800dc8c:	f387 8811 	msr	BASEPRI, r7
 800dc90:	f3bf 8f6f 	isb	sy
	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 800dc94:	b003      	add	sp, #12
 800dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return submit_to_queue_locked(work, queuep);
 800dc98:	a901      	add	r1, sp, #4
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7ff fe90 	bl	800d9c0 <submit_to_queue_locked>
 800dca0:	e7f4      	b.n	800dc8c <k_work_reschedule+0x4c>
		z_abort_timeout(&dwork->timeout);
 800dca2:	3010      	adds	r0, #16
 800dca4:	f000 fe32 	bl	800e90c <z_abort_timeout>
		ret = true;
 800dca8:	e7df      	b.n	800dc6a <k_work_reschedule+0x2a>
 800dcaa:	bf00      	nop
 800dcac:	20000cb0 	.word	0x20000cb0
 800dcb0:	0800da7d 	.word	0x0800da7d

0800dcb4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 800dcb4:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
 800dcb6:	4d13      	ldr	r5, [pc, #76]	; (800dd04 <update_cache+0x50>)
 800dcb8:	462b      	mov	r3, r5
 800dcba:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dcbe:	429c      	cmp	r4, r3
 800dcc0:	d013      	beq.n	800dcea <update_cache+0x36>
struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
 800dcc2:	b194      	cbz	r4, 800dcea <update_cache+0x36>
	if (z_is_thread_prevented_from_running(_current)) {
 800dcc4:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800dcc6:	b948      	cbnz	r0, 800dcdc <update_cache+0x28>
	if (z_is_thread_prevented_from_running(_current)) {
 800dcc8:	7b5a      	ldrb	r2, [r3, #13]
 800dcca:	06d2      	lsls	r2, r2, #27
 800dccc:	d106      	bne.n	800dcdc <update_cache+0x28>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800dcce:	69a2      	ldr	r2, [r4, #24]
 800dcd0:	b922      	cbnz	r2, 800dcdc <update_cache+0x28>
	if (is_preempt(_current) || is_metairq(thread)) {
 800dcd2:	89da      	ldrh	r2, [r3, #14]
 800dcd4:	2a7f      	cmp	r2, #127	; 0x7f
 800dcd6:	d901      	bls.n	800dcdc <update_cache+0x28>
		_kernel.ready_q.cache = _current;
 800dcd8:	61ab      	str	r3, [r5, #24]
}
 800dcda:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	d002      	beq.n	800dce6 <update_cache+0x32>
	if (slice_time != 0) {
 800dce0:	4e09      	ldr	r6, [pc, #36]	; (800dd08 <update_cache+0x54>)
 800dce2:	6833      	ldr	r3, [r6, #0]
 800dce4:	b91b      	cbnz	r3, 800dcee <update_cache+0x3a>
		_kernel.ready_q.cache = thread;
 800dce6:	61ac      	str	r4, [r5, #24]
}
 800dce8:	bd70      	pop	{r4, r5, r6, pc}
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800dcea:	68ec      	ldr	r4, [r5, #12]
 800dcec:	e7ea      	b.n	800dcc4 <update_cache+0x10>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800dcee:	f7fb f83d 	bl	8008d6c <sys_clock_elapsed>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	6830      	ldr	r0, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 800dcf6:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800dcf8:	4403      	add	r3, r0
 800dcfa:	612b      	str	r3, [r5, #16]
		z_set_timeout_expiry(slice_time, false);
 800dcfc:	f000 fe20 	bl	800e940 <z_set_timeout_expiry>
		_kernel.ready_q.cache = thread;
 800dd00:	61ac      	str	r4, [r5, #24]
 800dd02:	e7f1      	b.n	800dce8 <update_cache+0x34>
 800dd04:	2000159c 	.word	0x2000159c
 800dd08:	200015dc 	.word	0x200015dc

0800dd0c <move_thread_to_end_of_prio_q>:
{
 800dd0c:	b470      	push	{r4, r5, r6}
	if (z_is_thread_queued(thread)) {
 800dd0e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800dd12:	7b43      	ldrb	r3, [r0, #13]
 800dd14:	2a00      	cmp	r2, #0
 800dd16:	db26      	blt.n	800dd66 <move_thread_to_end_of_prio_q+0x5a>
	return list->head == list;
 800dd18:	4d1b      	ldr	r5, [pc, #108]	; (800dd88 <move_thread_to_end_of_prio_q+0x7c>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800dd1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd1e:	7343      	strb	r3, [r0, #13]
 800dd20:	69eb      	ldr	r3, [r5, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800dd22:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dd24:	f105 061c 	add.w	r6, r5, #28
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	d010      	beq.n	800dd4e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dd2c:	b17b      	cbz	r3, 800dd4e <move_thread_to_end_of_prio_q+0x42>
	int32_t b1 = thread_1->base.prio;
 800dd2e:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800dd32:	e001      	b.n	800dd38 <move_thread_to_end_of_prio_q+0x2c>
	return (node == list->tail) ? NULL : node->next;
 800dd34:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dd36:	b153      	cbz	r3, 800dd4e <move_thread_to_end_of_prio_q+0x42>
	int32_t b2 = thread_2->base.prio;
 800dd38:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800dd3c:	4291      	cmp	r1, r2
		return b2 - b1;
 800dd3e:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800dd42:	d002      	beq.n	800dd4a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800dd44:	f1bc 0f00 	cmp.w	ip, #0
 800dd48:	dc17      	bgt.n	800dd7a <move_thread_to_end_of_prio_q+0x6e>
 800dd4a:	42a3      	cmp	r3, r4
 800dd4c:	d1f2      	bne.n	800dd34 <move_thread_to_end_of_prio_q+0x28>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800dd4e:	e9c0 6400 	strd	r6, r4, [r0]

	tail->next = node;
 800dd52:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800dd54:	6228      	str	r0, [r5, #32]
	update_cache(thread == _current);
 800dd56:	68ab      	ldr	r3, [r5, #8]
 800dd58:	1a18      	subs	r0, r3, r0
 800dd5a:	fab0 f080 	clz	r0, r0
}
 800dd5e:	bc70      	pop	{r4, r5, r6}
	update_cache(thread == _current);
 800dd60:	0940      	lsrs	r0, r0, #5
 800dd62:	f7ff bfa7 	b.w	800dcb4 <update_cache>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 800dd66:	e9d0 1400 	ldrd	r1, r4, [r0]
	node->next = NULL;
 800dd6a:	2200      	movs	r2, #0

	prev->next = next;
 800dd6c:	6021      	str	r1, [r4, #0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800dd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	next->prev = prev;
 800dd72:	604c      	str	r4, [r1, #4]
	node->prev = NULL;
 800dd74:	e9c0 2200 	strd	r2, r2, [r0]
}
 800dd78:	e7ce      	b.n	800dd18 <move_thread_to_end_of_prio_q+0xc>
	sys_dnode_t *const prev = successor->prev;
 800dd7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800dd7c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800dd80:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800dd82:	6058      	str	r0, [r3, #4]
}
 800dd84:	e7e7      	b.n	800dd56 <move_thread_to_end_of_prio_q+0x4a>
 800dd86:	bf00      	nop
 800dd88:	2000159c 	.word	0x2000159c

0800dd8c <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800dd8c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800dd90:	7b43      	ldrb	r3, [r0, #13]
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	db03      	blt.n	800dd9e <ready_thread+0x12>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800dd96:	06da      	lsls	r2, r3, #27
 800dd98:	d101      	bne.n	800dd9e <ready_thread+0x12>
 800dd9a:	6982      	ldr	r2, [r0, #24]
 800dd9c:	b102      	cbz	r2, 800dda0 <ready_thread+0x14>
 800dd9e:	4770      	bx	lr
{
 800dda0:	b470      	push	{r4, r5, r6}
	thread->base.thread_state |= _THREAD_QUEUED;
 800dda2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 800dda6:	4d13      	ldr	r5, [pc, #76]	; (800ddf4 <ready_thread+0x68>)
 800dda8:	7343      	strb	r3, [r0, #13]
 800ddaa:	69eb      	ldr	r3, [r5, #28]
	return (node == list->tail) ? NULL : node->next;
 800ddac:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ddae:	f105 061c 	add.w	r6, r5, #28
 800ddb2:	42b3      	cmp	r3, r6
 800ddb4:	d010      	beq.n	800ddd8 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ddb6:	b17b      	cbz	r3, 800ddd8 <ready_thread+0x4c>
	int32_t b1 = thread_1->base.prio;
 800ddb8:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800ddbc:	e001      	b.n	800ddc2 <ready_thread+0x36>
	return (node == list->tail) ? NULL : node->next;
 800ddbe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ddc0:	b153      	cbz	r3, 800ddd8 <ready_thread+0x4c>
	int32_t b2 = thread_2->base.prio;
 800ddc2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800ddc6:	4291      	cmp	r1, r2
		return b2 - b1;
 800ddc8:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800ddcc:	d002      	beq.n	800ddd4 <ready_thread+0x48>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ddce:	f1bc 0f00 	cmp.w	ip, #0
 800ddd2:	dc09      	bgt.n	800dde8 <ready_thread+0x5c>
 800ddd4:	42a3      	cmp	r3, r4
 800ddd6:	d1f2      	bne.n	800ddbe <ready_thread+0x32>
	node->prev = tail;
 800ddd8:	e9c0 6400 	strd	r6, r4, [r0]
	tail->next = node;
 800dddc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800ddde:	6228      	str	r0, [r5, #32]
}
 800dde0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800dde2:	2000      	movs	r0, #0
 800dde4:	f7ff bf66 	b.w	800dcb4 <update_cache>
	sys_dnode_t *const prev = successor->prev;
 800dde8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800ddea:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800ddee:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800ddf0:	6058      	str	r0, [r3, #4]
}
 800ddf2:	e7f5      	b.n	800dde0 <ready_thread+0x54>
 800ddf4:	2000159c 	.word	0x2000159c

0800ddf8 <z_thread_timeout>:
{
 800ddf8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800ddfa:	f04f 0310 	mov.w	r3, #16
 800ddfe:	f3ef 8411 	mrs	r4, BASEPRI
 800de02:	f383 8812 	msr	BASEPRI_MAX, r3
 800de06:	f3bf 8f6f 	isb	sy
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800de0a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
		if (!killed) {
 800de0e:	f013 0228 	ands.w	r2, r3, #40	; 0x28
 800de12:	d115      	bne.n	800de40 <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
 800de14:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800de18:	b159      	cbz	r1, 800de32 <z_thread_timeout+0x3a>
	sys_dnode_t *const prev = node->prev;
 800de1a:	f850 5c14 	ldr.w	r5, [r0, #-20]
	sys_dnode_t *const next = node->next;
 800de1e:	f850 1c18 	ldr.w	r1, [r0, #-24]
	prev->next = next;
 800de22:	6029      	str	r1, [r5, #0]
	next->prev = prev;
 800de24:	604d      	str	r5, [r1, #4]
	node->prev = NULL;
 800de26:	e940 2206 	strd	r2, r2, [r0, #-24]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800de2a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
	thread->base.pended_on = NULL;
 800de2e:	f840 2c10 	str.w	r2, [r0, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800de32:	f023 0314 	bic.w	r3, r3, #20
 800de36:	f800 3c0b 	strb.w	r3, [r0, #-11]
			ready_thread(thread);
 800de3a:	3818      	subs	r0, #24
 800de3c:	f7ff ffa6 	bl	800dd8c <ready_thread>
	__asm__ volatile(
 800de40:	f384 8811 	msr	BASEPRI, r4
 800de44:	f3bf 8f6f 	isb	sy
}
 800de48:	bd38      	pop	{r3, r4, r5, pc}
 800de4a:	bf00      	nop

0800de4c <add_to_waitq_locked>:
{
 800de4c:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
 800de4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800de52:	7b42      	ldrb	r2, [r0, #13]
 800de54:	2b00      	cmp	r3, #0
{
 800de56:	4604      	mov	r4, r0
 800de58:	460d      	mov	r5, r1
	if (z_is_thread_queued(thread)) {
 800de5a:	db2c      	blt.n	800deb6 <add_to_waitq_locked+0x6a>
	update_cache(thread == _current);
 800de5c:	4b1e      	ldr	r3, [pc, #120]	; (800ded8 <add_to_waitq_locked+0x8c>)
 800de5e:	6898      	ldr	r0, [r3, #8]
 800de60:	1b00      	subs	r0, r0, r4
 800de62:	fab0 f080 	clz	r0, r0
 800de66:	0940      	lsrs	r0, r0, #5
 800de68:	f7ff ff24 	bl	800dcb4 <update_cache>
	thread->base.thread_state |= _THREAD_PENDING;
 800de6c:	7b63      	ldrb	r3, [r4, #13]
 800de6e:	f043 0302 	orr.w	r3, r3, #2
 800de72:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 800de74:	b1c5      	cbz	r5, 800dea8 <add_to_waitq_locked+0x5c>
	return list->head == list;
 800de76:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 800de78:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800de7a:	429d      	cmp	r5, r3
 800de7c:	d015      	beq.n	800deaa <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800de7e:	b1a3      	cbz	r3, 800deaa <add_to_waitq_locked+0x5e>
	int32_t b1 = thread_1->base.prio;
 800de80:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800de84:	e001      	b.n	800de8a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800de86:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800de88:	b153      	cbz	r3, 800dea0 <add_to_waitq_locked+0x54>
	int32_t b2 = thread_2->base.prio;
 800de8a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800de8e:	4291      	cmp	r1, r2
		return b2 - b1;
 800de90:	eba2 0001 	sub.w	r0, r2, r1
	if (b1 != b2) {
 800de94:	d001      	beq.n	800de9a <add_to_waitq_locked+0x4e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800de96:	2800      	cmp	r0, #0
 800de98:	dc18      	bgt.n	800decc <add_to_waitq_locked+0x80>
 800de9a:	686a      	ldr	r2, [r5, #4]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d1f2      	bne.n	800de86 <add_to_waitq_locked+0x3a>
	node->prev = tail;
 800dea0:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 800dea4:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800dea6:	606c      	str	r4, [r5, #4]
}
 800dea8:	bd38      	pop	{r3, r4, r5, pc}
 800deaa:	686a      	ldr	r2, [r5, #4]
	node->prev = tail;
 800deac:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 800deb0:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800deb2:	606c      	str	r4, [r5, #4]
 800deb4:	e7f8      	b.n	800dea8 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const next = node->next;
 800deb6:	e9d0 3100 	ldrd	r3, r1, [r0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800deba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800debe:	7342      	strb	r2, [r0, #13]
	prev->next = next;
 800dec0:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 800dec2:	6059      	str	r1, [r3, #4]
	node->next = NULL;
 800dec4:	2300      	movs	r3, #0
	node->prev = NULL;
 800dec6:	e9c0 3300 	strd	r3, r3, [r0]
}
 800deca:	e7c7      	b.n	800de5c <add_to_waitq_locked+0x10>
	sys_dnode_t *const prev = successor->prev;
 800decc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800dece:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800ded2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800ded4:	605c      	str	r4, [r3, #4]
}
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	2000159c 	.word	0x2000159c

0800dedc <pend>:
{
 800dedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dee0:	4606      	mov	r6, r0
 800dee2:	4615      	mov	r5, r2
 800dee4:	461c      	mov	r4, r3
	__asm__ volatile(
 800dee6:	f04f 0310 	mov.w	r3, #16
 800deea:	f3ef 8711 	mrs	r7, BASEPRI
 800deee:	f383 8812 	msr	BASEPRI_MAX, r3
 800def2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 800def6:	f7ff ffa9 	bl	800de4c <add_to_waitq_locked>
	__asm__ volatile(
 800defa:	f387 8811 	msr	BASEPRI, r7
 800defe:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800df02:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800df06:	bf08      	it	eq
 800df08:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800df0c:	d101      	bne.n	800df12 <pend+0x36>
}
 800df0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df12:	462a      	mov	r2, r5
 800df14:	4623      	mov	r3, r4
 800df16:	f106 0018 	add.w	r0, r6, #24
 800df1a:	4902      	ldr	r1, [pc, #8]	; (800df24 <pend+0x48>)
 800df1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df20:	f000 bc72 	b.w	800e808 <z_add_timeout>
 800df24:	0800ddf9 	.word	0x0800ddf9

0800df28 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800df28:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800df2c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800df30:	4283      	cmp	r3, r0
		return b2 - b1;
 800df32:	bf14      	ite	ne
 800df34:	1ac0      	subne	r0, r0, r3
	return 0;
 800df36:	2000      	moveq	r0, #0
}
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop

0800df3c <z_time_slice>:
{
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800df3e:	f04f 0310 	mov.w	r3, #16
 800df42:	f3ef 8511 	mrs	r5, BASEPRI
 800df46:	f383 8812 	msr	BASEPRI_MAX, r3
 800df4a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800df4e:	4c20      	ldr	r4, [pc, #128]	; (800dfd0 <z_time_slice+0x94>)
 800df50:	4a20      	ldr	r2, [pc, #128]	; (800dfd4 <z_time_slice+0x98>)
 800df52:	68a3      	ldr	r3, [r4, #8]
 800df54:	6811      	ldr	r1, [r2, #0]
	if (slice_time != 0) {
 800df56:	4e20      	ldr	r6, [pc, #128]	; (800dfd8 <z_time_slice+0x9c>)
	if (pending_current == _current) {
 800df58:	428b      	cmp	r3, r1
 800df5a:	d024      	beq.n	800dfa6 <z_time_slice+0x6a>
	pending_current = NULL;
 800df5c:	2100      	movs	r1, #0
 800df5e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800df60:	6832      	ldr	r2, [r6, #0]
 800df62:	b1ca      	cbz	r2, 800df98 <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 800df64:	89da      	ldrh	r2, [r3, #14]
 800df66:	2a7f      	cmp	r2, #127	; 0x7f
 800df68:	d816      	bhi.n	800df98 <z_time_slice+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
 800df6a:	7b59      	ldrb	r1, [r3, #13]
 800df6c:	f011 071f 	ands.w	r7, r1, #31
 800df70:	d112      	bne.n	800df98 <z_time_slice+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800df72:	4a1a      	ldr	r2, [pc, #104]	; (800dfdc <z_time_slice+0xa0>)
 800df74:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800df78:	6812      	ldr	r2, [r2, #0]
 800df7a:	4291      	cmp	r1, r2
 800df7c:	db0c      	blt.n	800df98 <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 800df7e:	4a18      	ldr	r2, [pc, #96]	; (800dfe0 <z_time_slice+0xa4>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d009      	beq.n	800df98 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
 800df84:	6922      	ldr	r2, [r4, #16]
 800df86:	4282      	cmp	r2, r0
 800df88:	dd1a      	ble.n	800dfc0 <z_time_slice+0x84>
			_current_cpu->slice_ticks -= ticks;
 800df8a:	1a10      	subs	r0, r2, r0
 800df8c:	6120      	str	r0, [r4, #16]
	__asm__ volatile(
 800df8e:	f385 8811 	msr	BASEPRI, r5
 800df92:	f3bf 8f6f 	isb	sy
}
 800df96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_current_cpu->slice_ticks = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	6123      	str	r3, [r4, #16]
 800df9c:	f385 8811 	msr	BASEPRI, r5
 800dfa0:	f3bf 8f6f 	isb	sy
}
 800dfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (slice_time != 0) {
 800dfa6:	6833      	ldr	r3, [r6, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d0f7      	beq.n	800df9c <z_time_slice+0x60>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800dfac:	f7fa fede 	bl	8008d6c <sys_clock_elapsed>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	6830      	ldr	r0, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 800dfb4:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800dfb6:	4403      	add	r3, r0
 800dfb8:	6123      	str	r3, [r4, #16]
		z_set_timeout_expiry(slice_time, false);
 800dfba:	f000 fcc1 	bl	800e940 <z_set_timeout_expiry>
}
 800dfbe:	e7ed      	b.n	800df9c <z_time_slice+0x60>
			move_thread_to_end_of_prio_q(_current);
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7ff fea3 	bl	800dd0c <move_thread_to_end_of_prio_q>
	if (slice_time != 0) {
 800dfc6:	6833      	ldr	r3, [r6, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0e7      	beq.n	800df9c <z_time_slice+0x60>
 800dfcc:	e7ee      	b.n	800dfac <z_time_slice+0x70>
 800dfce:	bf00      	nop
 800dfd0:	2000159c 	.word	0x2000159c
 800dfd4:	200015d4 	.word	0x200015d4
 800dfd8:	200015dc 	.word	0x200015dc
 800dfdc:	200015d8 	.word	0x200015d8
 800dfe0:	20000ba8 	.word	0x20000ba8

0800dfe4 <z_ready_thread>:
{
 800dfe4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800dfe6:	f04f 0310 	mov.w	r3, #16
 800dfea:	f3ef 8411 	mrs	r4, BASEPRI
 800dfee:	f383 8812 	msr	BASEPRI_MAX, r3
 800dff2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800dff6:	f7ff fec9 	bl	800dd8c <ready_thread>
	__asm__ volatile(
 800dffa:	f384 8811 	msr	BASEPRI, r4
 800dffe:	f3bf 8f6f 	isb	sy
}
 800e002:	bd10      	pop	{r4, pc}

0800e004 <z_sched_start>:
{
 800e004:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e006:	f04f 0210 	mov.w	r2, #16
 800e00a:	f3ef 8411 	mrs	r4, BASEPRI
 800e00e:	f382 8812 	msr	BASEPRI_MAX, r2
 800e012:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800e016:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800e018:	0753      	lsls	r3, r2, #29
 800e01a:	d404      	bmi.n	800e026 <z_sched_start+0x22>
	__asm__ volatile(
 800e01c:	f384 8811 	msr	BASEPRI, r4
 800e020:	f3bf 8f6f 	isb	sy
}
 800e024:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800e026:	f022 0204 	bic.w	r2, r2, #4
 800e02a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800e02c:	f7ff feae 	bl	800dd8c <ready_thread>
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e030:	2c00      	cmp	r4, #0
 800e032:	d1f3      	bne.n	800e01c <z_sched_start+0x18>
 800e034:	f3ef 8005 	mrs	r0, IPSR
 800e038:	2800      	cmp	r0, #0
 800e03a:	d1ef      	bne.n	800e01c <z_sched_start+0x18>
	new_thread = _kernel.ready_q.cache;
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <z_sched_start+0x4c>)
	if (resched(key.key) && need_swap()) {
 800e03e:	699a      	ldr	r2, [r3, #24]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	429a      	cmp	r2, r3
 800e044:	d0ea      	beq.n	800e01c <z_sched_start+0x18>
}
 800e046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
 800e04a:	f7f4 bfdd 	b.w	8003008 <arch_swap>
 800e04e:	bf00      	nop
 800e050:	2000159c 	.word	0x2000159c

0800e054 <z_impl_k_thread_suspend>:
{
 800e054:	b570      	push	{r4, r5, r6, lr}
 800e056:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800e058:	3018      	adds	r0, #24
 800e05a:	f000 fc57 	bl	800e90c <z_abort_timeout>
	__asm__ volatile(
 800e05e:	f04f 0310 	mov.w	r3, #16
 800e062:	f3ef 8611 	mrs	r6, BASEPRI
 800e066:	f383 8812 	msr	BASEPRI_MAX, r3
 800e06a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800e06e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 800e072:	7b63      	ldrb	r3, [r4, #13]
 800e074:	2a00      	cmp	r2, #0
 800e076:	db12      	blt.n	800e09e <z_impl_k_thread_suspend+0x4a>
		update_cache(thread == _current);
 800e078:	4d18      	ldr	r5, [pc, #96]	; (800e0dc <z_impl_k_thread_suspend+0x88>)
 800e07a:	68a8      	ldr	r0, [r5, #8]
 800e07c:	1b00      	subs	r0, r0, r4
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800e07e:	f043 0310 	orr.w	r3, r3, #16
 800e082:	fab0 f080 	clz	r0, r0
 800e086:	7363      	strb	r3, [r4, #13]
 800e088:	0940      	lsrs	r0, r0, #5
 800e08a:	f7ff fe13 	bl	800dcb4 <update_cache>
	__asm__ volatile(
 800e08e:	f386 8811 	msr	BASEPRI, r6
 800e092:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800e096:	68ab      	ldr	r3, [r5, #8]
 800e098:	42a3      	cmp	r3, r4
 800e09a:	d00a      	beq.n	800e0b2 <z_impl_k_thread_suspend+0x5e>
}
 800e09c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const next = node->next;
 800e09e:	e9d4 2100 	ldrd	r2, r1, [r4]
	prev->next = next;
 800e0a2:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800e0a4:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800e0a6:	2200      	movs	r2, #0
	node->prev = NULL;
 800e0a8:	e9c4 2200 	strd	r2, r2, [r4]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800e0b0:	e7e2      	b.n	800e078 <z_impl_k_thread_suspend+0x24>
	__asm__ volatile(
 800e0b2:	f04f 0210 	mov.w	r2, #16
 800e0b6:	f3ef 8311 	mrs	r3, BASEPRI
 800e0ba:	f382 8812 	msr	BASEPRI_MAX, r2
 800e0be:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e0c2:	b933      	cbnz	r3, 800e0d2 <z_impl_k_thread_suspend+0x7e>
 800e0c4:	f3ef 8005 	mrs	r0, IPSR
 800e0c8:	b918      	cbnz	r0, 800e0d2 <z_impl_k_thread_suspend+0x7e>
}
 800e0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0ce:	f7f4 bf9b 	b.w	8003008 <arch_swap>
	__asm__ volatile(
 800e0d2:	f383 8811 	msr	BASEPRI, r3
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	bd70      	pop	{r4, r5, r6, pc}
 800e0dc:	2000159c 	.word	0x2000159c

0800e0e0 <z_unpend_thread_no_timeout>:
	__asm__ volatile(
 800e0e0:	f04f 0310 	mov.w	r3, #16
 800e0e4:	f3ef 8111 	mrs	r1, BASEPRI
 800e0e8:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0ec:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 800e0f0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800e0f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e0f6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800e0f8:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800e100:	e9c0 3300 	strd	r3, r3, [r0]
 800e104:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800e106:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800e108:	f381 8811 	msr	BASEPRI, r1
 800e10c:	f3bf 8f6f 	isb	sy
}
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop

0800e114 <z_pend_curr>:
{
 800e114:	b510      	push	{r4, lr}
	pending_current = _current;
 800e116:	4b07      	ldr	r3, [pc, #28]	; (800e134 <z_pend_curr+0x20>)
 800e118:	6898      	ldr	r0, [r3, #8]
 800e11a:	4b07      	ldr	r3, [pc, #28]	; (800e138 <z_pend_curr+0x24>)
{
 800e11c:	460c      	mov	r4, r1
	pending_current = _current;
 800e11e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800e120:	4611      	mov	r1, r2
 800e122:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e126:	f7ff fed9 	bl	800dedc <pend>
 800e12a:	4620      	mov	r0, r4
}
 800e12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e130:	f7f4 bf6a 	b.w	8003008 <arch_swap>
 800e134:	2000159c 	.word	0x2000159c
 800e138:	200015d4 	.word	0x200015d4

0800e13c <z_unpend1_no_timeout>:
{
 800e13c:	4603      	mov	r3, r0
	__asm__ volatile(
 800e13e:	f04f 0210 	mov.w	r2, #16
 800e142:	f3ef 8111 	mrs	r1, BASEPRI
 800e146:	f382 8812 	msr	BASEPRI_MAX, r2
 800e14a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800e14e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e150:	4283      	cmp	r3, r0
 800e152:	d011      	beq.n	800e178 <z_unpend1_no_timeout+0x3c>
	if (n != NULL) {
 800e154:	b158      	cbz	r0, 800e16e <z_unpend1_no_timeout+0x32>
	sys_dnode_t *const next = node->next;
 800e156:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800e15a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e15c:	605a      	str	r2, [r3, #4]
 800e15e:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800e160:	2300      	movs	r3, #0
	node->prev = NULL;
 800e162:	e9c0 3300 	strd	r3, r3, [r0]
 800e166:	f022 0202 	bic.w	r2, r2, #2
 800e16a:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800e16c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800e16e:	f381 8811 	msr	BASEPRI, r1
 800e172:	f3bf 8f6f 	isb	sy
}
 800e176:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800e178:	2000      	movs	r0, #0
 800e17a:	f381 8811 	msr	BASEPRI, r1
 800e17e:	f3bf 8f6f 	isb	sy
}
 800e182:	4770      	bx	lr

0800e184 <z_unpend_first_thread>:
{
 800e184:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800e186:	f04f 0310 	mov.w	r3, #16
 800e18a:	f3ef 8511 	mrs	r5, BASEPRI
 800e18e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e192:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800e196:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e198:	42a0      	cmp	r0, r4
 800e19a:	d016      	beq.n	800e1ca <z_unpend_first_thread+0x46>
	if (n != NULL) {
 800e19c:	b17c      	cbz	r4, 800e1be <z_unpend_first_thread+0x3a>
	sys_dnode_t *const next = node->next;
 800e19e:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 800e1a2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e1a4:	605a      	str	r2, [r3, #4]
 800e1a6:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800e1ae:	e9c4 3300 	strd	r3, r3, [r4]
 800e1b2:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 800e1b4:	60a3      	str	r3, [r4, #8]
 800e1b6:	f104 0018 	add.w	r0, r4, #24
 800e1ba:	f000 fba7 	bl	800e90c <z_abort_timeout>
	__asm__ volatile(
 800e1be:	f385 8811 	msr	BASEPRI, r5
 800e1c2:	f3bf 8f6f 	isb	sy
}
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
	struct k_thread *thread = NULL;
 800e1ca:	2400      	movs	r4, #0
 800e1cc:	f385 8811 	msr	BASEPRI, r5
 800e1d0:	f3bf 8f6f 	isb	sy
}
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	bd38      	pop	{r3, r4, r5, pc}

0800e1d8 <z_unpend_thread>:
	__asm__ volatile(
 800e1d8:	f04f 0310 	mov.w	r3, #16
 800e1dc:	f3ef 8111 	mrs	r1, BASEPRI
 800e1e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800e1e4:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 800e1e8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800e1ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e1ee:	605a      	str	r2, [r3, #4]
 800e1f0:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800e1f8:	e9c0 3300 	strd	r3, r3, [r0]
 800e1fc:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800e1fe:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800e200:	f381 8811 	msr	BASEPRI, r1
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	3018      	adds	r0, #24
 800e20a:	f000 bb7f 	b.w	800e90c <z_abort_timeout>
 800e20e:	bf00      	nop

0800e210 <z_set_prio>:
{
 800e210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800e212:	f04f 0310 	mov.w	r3, #16
 800e216:	f3ef 8411 	mrs	r4, BASEPRI
 800e21a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e21e:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 800e222:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e224:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 800e226:	b249      	sxtb	r1, r1
 800e228:	d101      	bne.n	800e22e <z_set_prio+0x1e>
 800e22a:	6982      	ldr	r2, [r0, #24]
 800e22c:	b132      	cbz	r2, 800e23c <z_set_prio+0x2c>
			thread->base.prio = prio;
 800e22e:	7381      	strb	r1, [r0, #14]
 800e230:	2000      	movs	r0, #0
	__asm__ volatile(
 800e232:	f384 8811 	msr	BASEPRI, r4
 800e236:	f3bf 8f6f 	isb	sy
}
 800e23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const next = node->next;
 800e23c:	e9d0 5600 	ldrd	r5, r6, [r0]
	return list->head == list;
 800e240:	4f17      	ldr	r7, [pc, #92]	; (800e2a0 <z_set_prio+0x90>)
	prev->next = next;
 800e242:	6035      	str	r5, [r6, #0]
	next->prev = prev;
 800e244:	606e      	str	r6, [r5, #4]
	node->prev = NULL;
 800e246:	e9c0 2200 	strd	r2, r2, [r0]
	thread->base.thread_state |= _THREAD_QUEUED;
 800e24a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 800e24e:	463e      	mov	r6, r7
 800e250:	7343      	strb	r3, [r0, #13]
 800e252:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	return (node == list->tail) ? NULL : node->next;
 800e256:	6a3d      	ldr	r5, [r7, #32]
				thread->base.prio = prio;
 800e258:	7381      	strb	r1, [r0, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e25a:	42b3      	cmp	r3, r6
 800e25c:	d00d      	beq.n	800e27a <z_set_prio+0x6a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e25e:	b163      	cbz	r3, 800e27a <z_set_prio+0x6a>
	int32_t b2 = thread_2->base.prio;
 800e260:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800e264:	428a      	cmp	r2, r1
		return b2 - b1;
 800e266:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800e26a:	d002      	beq.n	800e272 <z_set_prio+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e26c:	f1bc 0f00 	cmp.w	ip, #0
 800e270:	dc10      	bgt.n	800e294 <z_set_prio+0x84>
	return (node == list->tail) ? NULL : node->next;
 800e272:	42ab      	cmp	r3, r5
 800e274:	d001      	beq.n	800e27a <z_set_prio+0x6a>
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	e7f1      	b.n	800e25e <z_set_prio+0x4e>
	node->prev = tail;
 800e27a:	e9c0 6500 	strd	r6, r5, [r0]
	tail->next = node;
 800e27e:	6028      	str	r0, [r5, #0]
	list->tail = node;
 800e280:	6238      	str	r0, [r7, #32]
			update_cache(1);
 800e282:	2001      	movs	r0, #1
 800e284:	f7ff fd16 	bl	800dcb4 <update_cache>
 800e288:	2001      	movs	r0, #1
 800e28a:	f384 8811 	msr	BASEPRI, r4
 800e28e:	f3bf 8f6f 	isb	sy
}
 800e292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800e294:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800e296:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800e29a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800e29c:	6058      	str	r0, [r3, #4]
}
 800e29e:	e7f0      	b.n	800e282 <z_set_prio+0x72>
 800e2a0:	2000159c 	.word	0x2000159c

0800e2a4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e2a4:	b949      	cbnz	r1, 800e2ba <z_reschedule+0x16>
 800e2a6:	f3ef 8005 	mrs	r0, IPSR
 800e2aa:	b930      	cbnz	r0, 800e2ba <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800e2ac:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d001      	beq.n	800e2ba <z_reschedule+0x16>
 800e2b6:	f7f4 bea7 	b.w	8003008 <arch_swap>
 800e2ba:	f381 8811 	msr	BASEPRI, r1
 800e2be:	f3bf 8f6f 	isb	sy
}
 800e2c2:	4770      	bx	lr
 800e2c4:	2000159c 	.word	0x2000159c

0800e2c8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	b920      	cbnz	r0, 800e2d6 <z_reschedule_irqlock+0xe>
 800e2cc:	f3ef 8205 	mrs	r2, IPSR
 800e2d0:	b90a      	cbnz	r2, 800e2d6 <z_reschedule_irqlock+0xe>
 800e2d2:	f7f4 be99 	b.w	8003008 <arch_swap>
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
}
 800e2de:	4770      	bx	lr

0800e2e0 <k_sched_lock>:
	__asm__ volatile(
 800e2e0:	f04f 0310 	mov.w	r3, #16
 800e2e4:	f3ef 8111 	mrs	r1, BASEPRI
 800e2e8:	f383 8812 	msr	BASEPRI_MAX, r3
 800e2ec:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800e2f0:	4b04      	ldr	r3, [pc, #16]	; (800e304 <k_sched_lock+0x24>)
 800e2f2:	689a      	ldr	r2, [r3, #8]
 800e2f4:	7bd3      	ldrb	r3, [r2, #15]
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800e2fa:	f381 8811 	msr	BASEPRI, r1
 800e2fe:	f3bf 8f6f 	isb	sy
}
 800e302:	4770      	bx	lr
 800e304:	2000159c 	.word	0x2000159c

0800e308 <k_sched_unlock>:
{
 800e308:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e30a:	f04f 0310 	mov.w	r3, #16
 800e30e:	f3ef 8411 	mrs	r4, BASEPRI
 800e312:	f383 8812 	msr	BASEPRI_MAX, r3
 800e316:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800e31a:	4b10      	ldr	r3, [pc, #64]	; (800e35c <k_sched_unlock+0x54>)
 800e31c:	689a      	ldr	r2, [r3, #8]
 800e31e:	7bd3      	ldrb	r3, [r2, #15]
 800e320:	3301      	adds	r3, #1
		update_cache(0);
 800e322:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 800e324:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800e326:	f7ff fcc5 	bl	800dcb4 <update_cache>
	__asm__ volatile(
 800e32a:	f384 8811 	msr	BASEPRI, r4
 800e32e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800e332:	f04f 0210 	mov.w	r2, #16
 800e336:	f3ef 8311 	mrs	r3, BASEPRI
 800e33a:	f382 8812 	msr	BASEPRI_MAX, r2
 800e33e:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e342:	b933      	cbnz	r3, 800e352 <k_sched_unlock+0x4a>
 800e344:	f3ef 8005 	mrs	r0, IPSR
 800e348:	b918      	cbnz	r0, 800e352 <k_sched_unlock+0x4a>
}
 800e34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e34e:	f7f4 be5b 	b.w	8003008 <arch_swap>
	__asm__ volatile(
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	bd10      	pop	{r4, pc}
 800e35c:	2000159c 	.word	0x2000159c

0800e360 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800e360:	4b0c      	ldr	r3, [pc, #48]	; (800e394 <z_sched_init+0x34>)
 800e362:	f103 021c 	add.w	r2, r3, #28
	sys_dlist_init(&rq->runq);
#endif
}

void z_sched_init(void)
{
 800e366:	b410      	push	{r4}
	list->tail = (sys_dnode_t *)list;
 800e368:	e9c3 2207 	strd	r2, r2, [r3, #28]
	__asm__ volatile(
 800e36c:	f04f 0210 	mov.w	r2, #16
 800e370:	f3ef 8111 	mrs	r1, BASEPRI
 800e374:	f382 8812 	msr	BASEPRI_MAX, r2
 800e378:	f3bf 8f6f 	isb	sy
		slice_time = k_ms_to_ticks_ceil32(slice);
 800e37c:	4c06      	ldr	r4, [pc, #24]	; (800e398 <z_sched_init+0x38>)
		slice_max_prio = prio;
 800e37e:	4807      	ldr	r0, [pc, #28]	; (800e39c <z_sched_init+0x3c>)
		_current_cpu->slice_ticks = 0;
 800e380:	2200      	movs	r2, #0
 800e382:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 800e384:	6022      	str	r2, [r4, #0]
		slice_max_prio = prio;
 800e386:	6002      	str	r2, [r0, #0]
	__asm__ volatile(
 800e388:	f381 8811 	msr	BASEPRI, r1
 800e38c:	f3bf 8f6f 	isb	sy

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 800e390:	bc10      	pop	{r4}
 800e392:	4770      	bx	lr
 800e394:	2000159c 	.word	0x2000159c
 800e398:	200015dc 	.word	0x200015dc
 800e39c:	200015d8 	.word	0x200015d8

0800e3a0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800e3a2:	f04f 0310 	mov.w	r3, #16
 800e3a6:	f3ef 8711 	mrs	r7, BASEPRI
 800e3aa:	f383 8812 	msr	BASEPRI_MAX, r3
 800e3ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 800e3b2:	4d1b      	ldr	r5, [pc, #108]	; (800e420 <z_impl_k_yield+0x80>)
 800e3b4:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e3b6:	7b4b      	ldrb	r3, [r1, #13]
	sys_dnode_t *const next = node->next;
 800e3b8:	680a      	ldr	r2, [r1, #0]
	sys_dnode_t *const prev = node->prev;
 800e3ba:	6848      	ldr	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_QUEUED;
 800e3bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
	prev->next = next;
 800e3c0:	6002      	str	r2, [r0, #0]
	return list->head == list;
 800e3c2:	462e      	mov	r6, r5
	next->prev = prev;
 800e3c4:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	734b      	strb	r3, [r1, #13]
 800e3ca:	600a      	str	r2, [r1, #0]
	return list->head == list;
 800e3cc:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	node->prev = NULL;
 800e3d0:	604a      	str	r2, [r1, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e3d2:	42b3      	cmp	r3, r6
	return (node == list->tail) ? NULL : node->next;
 800e3d4:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e3d6:	d010      	beq.n	800e3fa <z_impl_k_yield+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e3d8:	b17b      	cbz	r3, 800e3fa <z_impl_k_yield+0x5a>
	int32_t b1 = thread_1->base.prio;
 800e3da:	f991 000e 	ldrsb.w	r0, [r1, #14]
 800e3de:	e001      	b.n	800e3e4 <z_impl_k_yield+0x44>
	return (node == list->tail) ? NULL : node->next;
 800e3e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800e3e2:	b153      	cbz	r3, 800e3fa <z_impl_k_yield+0x5a>
	int32_t b2 = thread_2->base.prio;
 800e3e4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800e3e8:	4290      	cmp	r0, r2
		return b2 - b1;
 800e3ea:	eba2 0c00 	sub.w	ip, r2, r0
	if (b1 != b2) {
 800e3ee:	d002      	beq.n	800e3f6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800e3f0:	f1bc 0f00 	cmp.w	ip, #0
 800e3f4:	dc0d      	bgt.n	800e412 <z_impl_k_yield+0x72>
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	d1f2      	bne.n	800e3e0 <z_impl_k_yield+0x40>
	node->prev = tail;
 800e3fa:	e9c1 6400 	strd	r6, r4, [r1]
	tail->next = node;
 800e3fe:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800e400:	6229      	str	r1, [r5, #32]
	}
	queue_thread(_current);
	update_cache(1);
 800e402:	2001      	movs	r0, #1
 800e404:	f7ff fc56 	bl	800dcb4 <update_cache>
 800e408:	4638      	mov	r0, r7
	z_swap(&sched_spinlock, key);
}
 800e40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e40e:	f7f4 bdfb 	b.w	8003008 <arch_swap>
	sys_dnode_t *const prev = successor->prev;
 800e412:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800e414:	e9c1 3200 	strd	r3, r2, [r1]
	prev->next = node;
 800e418:	6011      	str	r1, [r2, #0]
	successor->prev = node;
 800e41a:	6059      	str	r1, [r3, #4]
}
 800e41c:	e7f1      	b.n	800e402 <z_impl_k_yield+0x62>
 800e41e:	bf00      	nop
 800e420:	2000159c 	.word	0x2000159c

0800e424 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 800e424:	ea50 0301 	orrs.w	r3, r0, r1
{
 800e428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800e42c:	d04a      	beq.n	800e4c4 <z_tick_sleep+0xa0>
		k_yield();
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 800e42e:	f06f 0401 	mvn.w	r4, #1
 800e432:	1a24      	subs	r4, r4, r0
 800e434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e438:	eb63 0301 	sbc.w	r3, r3, r1
 800e43c:	2c01      	cmp	r4, #1
 800e43e:	f173 0300 	sbcs.w	r3, r3, #0
 800e442:	4605      	mov	r5, r0
 800e444:	460e      	mov	r6, r1
 800e446:	db2e      	blt.n	800e4a6 <z_tick_sleep+0x82>
 800e448:	f04f 0310 	mov.w	r3, #16
 800e44c:	f3ef 8811 	mrs	r8, BASEPRI
 800e450:	f383 8812 	msr	BASEPRI_MAX, r3
 800e454:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 800e458:	4f1d      	ldr	r7, [pc, #116]	; (800e4d0 <z_tick_sleep+0xac>)
 800e45a:	4a1e      	ldr	r2, [pc, #120]	; (800e4d4 <z_tick_sleep+0xb0>)
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	6013      	str	r3, [r2, #0]
	if (z_is_thread_queued(thread)) {
 800e460:	f993 200d 	ldrsb.w	r2, [r3, #13]
	return (thread->base.thread_state & state) != 0U;
 800e464:	7b59      	ldrb	r1, [r3, #13]
 800e466:	2a00      	cmp	r2, #0
 800e468:	db21      	blt.n	800e4ae <z_tick_sleep+0x8a>
	update_cache(thread == _current);
 800e46a:	2001      	movs	r0, #1
 800e46c:	f7ff fc22 	bl	800dcb4 <update_cache>
#endif
	unready_thread(_current);
	z_add_thread_timeout(_current, timeout);
 800e470:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800e472:	4919      	ldr	r1, [pc, #100]	; (800e4d8 <z_tick_sleep+0xb4>)
 800e474:	462a      	mov	r2, r5
 800e476:	4633      	mov	r3, r6
 800e478:	3018      	adds	r0, #24
 800e47a:	f000 f9c5 	bl	800e808 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800e47e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800e480:	7b53      	ldrb	r3, [r2, #13]
 800e482:	f043 0310 	orr.w	r3, r3, #16
 800e486:	7353      	strb	r3, [r2, #13]
 800e488:	4640      	mov	r0, r8
 800e48a:	f7f4 fdbd 	bl	8003008 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800e48e:	f000 fae9 	bl	800ea64 <sys_clock_tick_get_32>
 800e492:	1a20      	subs	r0, r4, r0
 800e494:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800e498:	2801      	cmp	r0, #1
 800e49a:	f173 0300 	sbcs.w	r3, r3, #0
		return ticks;
	}
#endif

	return 0;
 800e49e:	bfb8      	it	lt
 800e4a0:	2000      	movlt	r0, #0
}
 800e4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800e4a6:	f000 fadd 	bl	800ea64 <sys_clock_tick_get_32>
 800e4aa:	1944      	adds	r4, r0, r5
 800e4ac:	e7cc      	b.n	800e448 <z_tick_sleep+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e4ae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e4b2:	7359      	strb	r1, [r3, #13]
	sys_dnode_t *const next = node->next;
 800e4b4:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 800e4b8:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800e4ba:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800e4bc:	2200      	movs	r2, #0
	node->prev = NULL;
 800e4be:	e9c3 2200 	strd	r2, r2, [r3]
}
 800e4c2:	e7d2      	b.n	800e46a <z_tick_sleep+0x46>
	z_impl_k_yield();
 800e4c4:	f7ff ff6c 	bl	800e3a0 <z_impl_k_yield>
		return 0;
 800e4c8:	2000      	movs	r0, #0
}
 800e4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ce:	bf00      	nop
 800e4d0:	2000159c 	.word	0x2000159c
 800e4d4:	200015d4 	.word	0x200015d4
 800e4d8:	0800ddf9 	.word	0x0800ddf9

0800e4dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e4dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800e4e0:	bf08      	it	eq
 800e4e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800e4e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e4e8:	d007      	beq.n	800e4fa <z_impl_k_sleep+0x1e>
		return (int32_t) K_TICKS_FOREVER;
	}

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
 800e4ea:	f7ff ff9b 	bl	800e424 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800e4ee:	220a      	movs	r2, #10
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	17c1      	asrs	r1, r0, #31
 800e4f4:	f7f2 fb42 	bl	8000b7c <__aeabi_uldivmod>
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800e4f8:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800e4fa:	4b03      	ldr	r3, [pc, #12]	; (800e508 <z_impl_k_sleep+0x2c>)
 800e4fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800e4fe:	f7ff fda9 	bl	800e054 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800e502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800e506:	bd08      	pop	{r3, pc}
 800e508:	2000159c 	.word	0x2000159c

0800e50c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
 800e50c:	4601      	mov	r1, r0
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
 800e50e:	17c9      	asrs	r1, r1, #31
		t += off;
 800e510:	3063      	adds	r0, #99	; 0x63
{
 800e512:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 800e514:	f04f 0264 	mov.w	r2, #100	; 0x64
 800e518:	f04f 0300 	mov.w	r3, #0
 800e51c:	f141 0100 	adc.w	r1, r1, #0
 800e520:	f7f2 fb2c 	bl	8000b7c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800e524:	17c1      	asrs	r1, r0, #31
 800e526:	f7ff ff7d 	bl	800e424 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 800e52a:	2364      	movs	r3, #100	; 0x64

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
 800e52c:	fb03 f000 	mul.w	r0, r3, r0
 800e530:	bd08      	pop	{r3, pc}
 800e532:	bf00      	nop

0800e534 <z_impl_k_wakeup>:
}
#include <syscalls/k_usleep_mrsh.c>
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
 800e534:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, wakeup, thread);

	if (z_is_thread_pending(thread)) {
 800e536:	7b43      	ldrb	r3, [r0, #13]
 800e538:	079b      	lsls	r3, r3, #30
 800e53a:	d500      	bpl.n	800e53e <z_impl_k_wakeup+0xa>
#endif

	if (!arch_is_in_isr()) {
		z_reschedule_unlocked();
	}
}
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
	return z_abort_timeout(&thread->base.timeout);
 800e53e:	4604      	mov	r4, r0
 800e540:	3018      	adds	r0, #24
 800e542:	f000 f9e3 	bl	800e90c <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800e546:	2800      	cmp	r0, #0
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800e548:	7b63      	ldrb	r3, [r4, #13]
	if (z_abort_thread_timeout(thread) < 0) {
 800e54a:	da01      	bge.n	800e550 <z_impl_k_wakeup+0x1c>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800e54c:	2b10      	cmp	r3, #16
 800e54e:	d1f5      	bne.n	800e53c <z_impl_k_wakeup+0x8>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800e550:	f023 0310 	bic.w	r3, r3, #16
 800e554:	7363      	strb	r3, [r4, #13]
 800e556:	f04f 0310 	mov.w	r3, #16
 800e55a:	f3ef 8511 	mrs	r5, BASEPRI
 800e55e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e562:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800e566:	4620      	mov	r0, r4
 800e568:	f7ff fc10 	bl	800dd8c <ready_thread>
	__asm__ volatile(
 800e56c:	f385 8811 	msr	BASEPRI, r5
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1df      	bne.n	800e53c <z_impl_k_wakeup+0x8>
	__asm__ volatile(
 800e57c:	f04f 0210 	mov.w	r2, #16
 800e580:	f3ef 8311 	mrs	r3, BASEPRI
 800e584:	f382 8812 	msr	BASEPRI_MAX, r2
 800e588:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800e58c:	b933      	cbnz	r3, 800e59c <z_impl_k_wakeup+0x68>
 800e58e:	f3ef 8005 	mrs	r0, IPSR
 800e592:	b918      	cbnz	r0, 800e59c <z_impl_k_wakeup+0x68>
}
 800e594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e598:	f7f4 bd36 	b.w	8003008 <arch_swap>
	__asm__ volatile(
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	bf00      	nop

0800e5a8 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
 800e5a8:	4b01      	ldr	r3, [pc, #4]	; (800e5b0 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800e5aa:	6898      	ldr	r0, [r3, #8]
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	2000159c 	.word	0x2000159c

0800e5b4 <z_impl_k_is_preempt_thread>:
 800e5b4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 800e5b8:	b93b      	cbnz	r3, 800e5ca <z_impl_k_is_preempt_thread+0x16>
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800e5bc:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 800e5be:	89d8      	ldrh	r0, [r3, #14]
 800e5c0:	287f      	cmp	r0, #127	; 0x7f
 800e5c2:	bf8c      	ite	hi
 800e5c4:	2000      	movhi	r0, #0
 800e5c6:	2001      	movls	r0, #1
 800e5c8:	4770      	bx	lr
 800e5ca:	2000      	movs	r0, #0
}
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	2000159c 	.word	0x2000159c

0800e5d4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
 800e5d8:	f04f 0310 	mov.w	r3, #16
 800e5dc:	f3ef 8711 	mrs	r7, BASEPRI
 800e5e0:	f383 8812 	msr	BASEPRI_MAX, r3
 800e5e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800e5e8:	7b43      	ldrb	r3, [r0, #13]
 800e5ea:	f013 0208 	ands.w	r2, r3, #8
 800e5ee:	d005      	beq.n	800e5fc <z_thread_abort+0x28>
	__asm__ volatile(
 800e5f0:	f387 8811 	msr	BASEPRI, r7
 800e5f4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800e5fc:	f023 0120 	bic.w	r1, r3, #32
 800e600:	4605      	mov	r5, r0
 800e602:	f041 0008 	orr.w	r0, r1, #8
		if (z_is_thread_queued(thread)) {
 800e606:	09c9      	lsrs	r1, r1, #7
 800e608:	d13e      	bne.n	800e688 <z_thread_abort+0xb4>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800e60a:	7368      	strb	r0, [r5, #13]
		if (thread->base.pended_on != NULL) {
 800e60c:	68ab      	ldr	r3, [r5, #8]
 800e60e:	b15b      	cbz	r3, 800e628 <z_thread_abort+0x54>
	sys_dnode_t *const next = node->next;
 800e610:	e9d5 3200 	ldrd	r3, r2, [r5]
	prev->next = next;
 800e614:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e616:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800e618:	7b6a      	ldrb	r2, [r5, #13]
	node->next = NULL;
 800e61a:	2300      	movs	r3, #0
	node->prev = NULL;
 800e61c:	e9c5 3300 	strd	r3, r3, [r5]
 800e620:	f022 0202 	bic.w	r2, r2, #2
 800e624:	736a      	strb	r2, [r5, #13]
	thread->base.pended_on = NULL;
 800e626:	60ab      	str	r3, [r5, #8]
 800e628:	f105 0018 	add.w	r0, r5, #24
 800e62c:	f000 f96e 	bl	800e90c <z_abort_timeout>
	return list->head == list;
 800e630:	6dac      	ldr	r4, [r5, #88]	; 0x58
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800e632:	f105 0858 	add.w	r8, r5, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e636:	45a0      	cmp	r8, r4
 800e638:	d017      	beq.n	800e66a <z_thread_abort+0x96>
	node->next = NULL;
 800e63a:	2600      	movs	r6, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800e63c:	b1ac      	cbz	r4, 800e66a <z_thread_abort+0x96>
	sys_dnode_t *const next = node->next;
 800e63e:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 800e642:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e644:	605a      	str	r2, [r3, #4]
 800e646:	7b63      	ldrb	r3, [r4, #13]
	node->next = NULL;
 800e648:	6026      	str	r6, [r4, #0]
 800e64a:	f023 0302 	bic.w	r3, r3, #2
 800e64e:	7363      	strb	r3, [r4, #13]
	node->prev = NULL;
 800e650:	6066      	str	r6, [r4, #4]
	thread->base.pended_on = NULL;
 800e652:	60a6      	str	r6, [r4, #8]
 800e654:	f104 0018 	add.w	r0, r4, #24
 800e658:	f000 f958 	bl	800e90c <z_abort_timeout>
 800e65c:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800e65e:	4620      	mov	r0, r4
 800e660:	f7ff fb94 	bl	800dd8c <ready_thread>
	return list->head == list;
 800e664:	6dac      	ldr	r4, [r5, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e666:	4544      	cmp	r4, r8
 800e668:	d1e8      	bne.n	800e63c <z_thread_abort+0x68>
		update_cache(1);
 800e66a:	2001      	movs	r0, #1
 800e66c:	f7ff fb22 	bl	800dcb4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800e670:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <z_thread_abort+0xcc>)
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	42ab      	cmp	r3, r5
 800e676:	d1bb      	bne.n	800e5f0 <z_thread_abort+0x1c>
 800e678:	f3ef 8305 	mrs	r3, IPSR
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1b7      	bne.n	800e5f0 <z_thread_abort+0x1c>
 800e680:	4638      	mov	r0, r7
 800e682:	f7f4 fcc1 	bl	8003008 <arch_swap>
	return ret;
 800e686:	e7b3      	b.n	800e5f0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800e688:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800e68c:	f043 0308 	orr.w	r3, r3, #8
	sys_dnode_t *const prev = node->prev;
 800e690:	6869      	ldr	r1, [r5, #4]
 800e692:	736b      	strb	r3, [r5, #13]
	sys_dnode_t *const next = node->next;
 800e694:	682b      	ldr	r3, [r5, #0]
	prev->next = next;
 800e696:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 800e698:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 800e69a:	e9c5 2200 	strd	r2, r2, [r5]
}
 800e69e:	e7b5      	b.n	800e60c <z_thread_abort+0x38>
 800e6a0:	2000159c 	.word	0x2000159c

0800e6a4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
 800e6a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800e6a6:	f04f 0310 	mov.w	r3, #16
 800e6aa:	f3ef 8511 	mrs	r5, BASEPRI
 800e6ae:	f383 8812 	msr	BASEPRI_MAX, r3
 800e6b2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800e6b6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e6b8:	42a0      	cmp	r0, r4
 800e6ba:	d01b      	beq.n	800e6f4 <z_sched_wake+0x50>
	if (n != NULL) {
 800e6bc:	b304      	cbz	r4, 800e700 <z_sched_wake+0x5c>
	sys_dnode_t *const prev = node->prev;
 800e6be:	6860      	ldr	r0, [r4, #4]
	sys_dnode_t *const next = node->next;
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	67e1      	str	r1, [r4, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800e6c4:	6162      	str	r2, [r4, #20]
	prev->next = next;
 800e6c6:	6003      	str	r3, [r0, #0]
	next->prev = prev;
 800e6c8:	6058      	str	r0, [r3, #4]
 800e6ca:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800e6d2:	e9c4 3300 	strd	r3, r3, [r4]
 800e6d6:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 800e6d8:	60a3      	str	r3, [r4, #8]
 800e6da:	f104 0018 	add.w	r0, r4, #24
 800e6de:	f000 f915 	bl	800e90c <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f7ff fb52 	bl	800dd8c <ready_thread>
			ret = true;
 800e6e8:	2001      	movs	r0, #1
	__asm__ volatile(
 800e6ea:	f385 8811 	msr	BASEPRI, r5
 800e6ee:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 800e6f2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	f385 8811 	msr	BASEPRI, r5
 800e6fa:	f3bf 8f6f 	isb	sy
}
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 800e700:	4620      	mov	r0, r4
 800e702:	f385 8811 	msr	BASEPRI, r5
 800e706:	f3bf 8f6f 	isb	sy
}
 800e70a:	bd38      	pop	{r3, r4, r5, pc}

0800e70c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800e70c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 800e70e:	4e09      	ldr	r6, [pc, #36]	; (800e734 <z_sched_wait+0x28>)
 800e710:	4b09      	ldr	r3, [pc, #36]	; (800e738 <z_sched_wait+0x2c>)
 800e712:	68b0      	ldr	r0, [r6, #8]
 800e714:	6018      	str	r0, [r3, #0]
{
 800e716:	9d06      	ldr	r5, [sp, #24]
 800e718:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
 800e71a:	4611      	mov	r1, r2
 800e71c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e720:	f7ff fbdc 	bl	800dedc <pend>
	ret = arch_swap(key);
 800e724:	4620      	mov	r0, r4
 800e726:	f7f4 fc6f 	bl	8003008 <arch_swap>
	int ret = z_pend_curr(lock, key, wait_q, timeout);

	if (data != NULL) {
 800e72a:	b115      	cbz	r5, 800e732 <z_sched_wait+0x26>
		*data = _current->base.swap_data;
 800e72c:	68b3      	ldr	r3, [r6, #8]
 800e72e:	695b      	ldr	r3, [r3, #20]
 800e730:	602b      	str	r3, [r5, #0]
	}
	return ret;
}
 800e732:	bd70      	pop	{r4, r5, r6, pc}
 800e734:	2000159c 	.word	0x2000159c
 800e738:	200015d4 	.word	0x200015d4

0800e73c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800e73c:	b508      	push	{r3, lr}
 800e73e:	4806      	ldr	r0, [pc, #24]	; (800e758 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800e740:	4a06      	ldr	r2, [pc, #24]	; (800e75c <z_data_copy+0x20>)
 800e742:	4907      	ldr	r1, [pc, #28]	; (800e760 <z_data_copy+0x24>)
 800e744:	1a12      	subs	r2, r2, r0
 800e746:	f002 fbb7 	bl	8010eb8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800e74a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e74e:	4a05      	ldr	r2, [pc, #20]	; (800e764 <z_data_copy+0x28>)
 800e750:	4905      	ldr	r1, [pc, #20]	; (800e768 <z_data_copy+0x2c>)
 800e752:	4806      	ldr	r0, [pc, #24]	; (800e76c <z_data_copy+0x30>)
 800e754:	f002 bbb0 	b.w	8010eb8 <memcpy>
 800e758:	20000000 	.word	0x20000000
 800e75c:	20000900 	.word	0x20000900
 800e760:	08012e60 	.word	0x08012e60
 800e764:	00000000 	.word	0x00000000
 800e768:	08012e60 	.word	0x08012e60
 800e76c:	20000000 	.word	0x20000000

0800e770 <remove_timeout>:

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}

static void remove_timeout(struct _timeout *t)
{
 800e770:	b410      	push	{r4}
	return (node == list->tail) ? NULL : node->next;
 800e772:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800e774:	b168      	cbz	r0, 800e792 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800e776:	4a0b      	ldr	r2, [pc, #44]	; (800e7a4 <remove_timeout+0x34>)
 800e778:	6852      	ldr	r2, [r2, #4]
 800e77a:	4282      	cmp	r2, r0
 800e77c:	d009      	beq.n	800e792 <remove_timeout+0x22>
	if (next(t) != NULL) {
 800e77e:	b143      	cbz	r3, 800e792 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800e780:	6901      	ldr	r1, [r0, #16]
 800e782:	691a      	ldr	r2, [r3, #16]
 800e784:	6944      	ldr	r4, [r0, #20]
 800e786:	1852      	adds	r2, r2, r1
 800e788:	6959      	ldr	r1, [r3, #20]
 800e78a:	611a      	str	r2, [r3, #16]
 800e78c:	eb41 0104 	adc.w	r1, r1, r4
 800e790:	6159      	str	r1, [r3, #20]
	sys_dnode_t *const prev = node->prev;
 800e792:	6841      	ldr	r1, [r0, #4]
	}

	sys_dlist_remove(&t->node);
}
 800e794:	bc10      	pop	{r4}
	prev->next = next;
 800e796:	600b      	str	r3, [r1, #0]
	node->next = NULL;
 800e798:	2200      	movs	r2, #0
	next->prev = prev;
 800e79a:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 800e79c:	e9c0 2200 	strd	r2, r2, [r0]
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	2000040c 	.word	0x2000040c

0800e7a8 <next_timeout>:
	return list->head == list;
 800e7a8:	4b14      	ldr	r3, [pc, #80]	; (800e7fc <next_timeout+0x54>)

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e7aa:	4a15      	ldr	r2, [pc, #84]	; (800e800 <next_timeout+0x58>)
}

static int32_t next_timeout(void)
{
 800e7ac:	b510      	push	{r4, lr}
 800e7ae:	681c      	ldr	r4, [r3, #0]
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e7b0:	6812      	ldr	r2, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e7b2:	429c      	cmp	r4, r3
 800e7b4:	d01d      	beq.n	800e7f2 <next_timeout+0x4a>
 800e7b6:	b1ca      	cbz	r2, 800e7ec <next_timeout+0x44>
 800e7b8:	2000      	movs	r0, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
	int32_t ret;

	if ((to == NULL) ||
 800e7ba:	b14c      	cbz	r4, 800e7d0 <next_timeout+0x28>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800e7bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e7c0:	1a1b      	subs	r3, r3, r0
 800e7c2:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800e7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7ca:	f170 0200 	sbcs.w	r2, r0, #0
 800e7ce:	db08      	blt.n	800e7e2 <next_timeout+0x3a>
		ret = MAX_WAIT;
 800e7d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800e7d4:	4b0b      	ldr	r3, [pc, #44]	; (800e804 <next_timeout+0x5c>)
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	b113      	cbz	r3, 800e7e0 <next_timeout+0x38>
 800e7da:	4298      	cmp	r0, r3
 800e7dc:	bfa8      	it	ge
 800e7de:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800e7e0:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	bfac      	ite	ge
 800e7e6:	4618      	movge	r0, r3
 800e7e8:	2000      	movlt	r0, #0
 800e7ea:	e7f3      	b.n	800e7d4 <next_timeout+0x2c>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e7ec:	f7fa fabe 	bl	8008d6c <sys_clock_elapsed>
 800e7f0:	e7e3      	b.n	800e7ba <next_timeout+0x12>
 800e7f2:	2a00      	cmp	r2, #0
 800e7f4:	d1ec      	bne.n	800e7d0 <next_timeout+0x28>
 800e7f6:	f7fa fab9 	bl	8008d6c <sys_clock_elapsed>
 800e7fa:	e7e9      	b.n	800e7d0 <next_timeout+0x28>
 800e7fc:	2000040c 	.word	0x2000040c
 800e800:	200015e0 	.word	0x200015e0
 800e804:	2000159c 	.word	0x2000159c

0800e808 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800e808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e80c:	bf08      	it	eq
 800e80e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800e812:	d05f      	beq.n	800e8d4 <z_add_timeout+0xcc>
{
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	4604      	mov	r4, r0
 800e818:	4618      	mov	r0, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800e81a:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
 800e81c:	f04f 0110 	mov.w	r1, #16
 800e820:	f3ef 8511 	mrs	r5, BASEPRI
 800e824:	f381 8812 	msr	BASEPRI_MAX, r1
 800e828:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800e82c:	f06f 0101 	mvn.w	r1, #1
 800e830:	1a8e      	subs	r6, r1, r2
 800e832:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e836:	eb67 0603 	sbc.w	r6, r7, r3
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800e83a:	2e00      	cmp	r6, #0
 800e83c:	db41      	blt.n	800e8c2 <z_add_timeout+0xba>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800e83e:	4b2f      	ldr	r3, [pc, #188]	; (800e8fc <z_add_timeout+0xf4>)
 800e840:	681e      	ldr	r6, [r3, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	1b89      	subs	r1, r1, r6
 800e846:	eb67 0303 	sbc.w	r3, r7, r3
 800e84a:	1a8a      	subs	r2, r1, r2

			to->dticks = MAX(1, ticks);
 800e84c:	eb63 0300 	sbc.w	r3, r3, r0
 800e850:	2a01      	cmp	r2, #1
 800e852:	f173 0100 	sbcs.w	r1, r3, #0
 800e856:	bfbc      	itt	lt
 800e858:	2201      	movlt	r2, #1
 800e85a:	2300      	movlt	r3, #0
 800e85c:	e9c4 2304 	strd	r2, r3, [r4, #16]
	return list->head == list;
 800e860:	4f27      	ldr	r7, [pc, #156]	; (800e900 <z_add_timeout+0xf8>)
	return (node == list->tail) ? NULL : node->next;
 800e862:	e9d7 2c00 	ldrd	r2, ip, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e866:	42ba      	cmp	r2, r7
 800e868:	d012      	beq.n	800e890 <z_add_timeout+0x88>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
 800e86a:	b18a      	cbz	r2, 800e890 <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 800e86c:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800e870:	e001      	b.n	800e876 <z_add_timeout+0x6e>
	return (node == list->tail) ? NULL : node->next;
 800e872:	6812      	ldr	r2, [r2, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800e874:	b162      	cbz	r2, 800e890 <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 800e876:	e9d2 0604 	ldrd	r0, r6, [r2, #16]
 800e87a:	4283      	cmp	r3, r0
 800e87c:	eb71 0e06 	sbcs.w	lr, r1, r6
 800e880:	db29      	blt.n	800e8d6 <z_add_timeout+0xce>
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
 800e882:	1a1b      	subs	r3, r3, r0
 800e884:	eb61 0106 	sbc.w	r1, r1, r6
 800e888:	4594      	cmp	ip, r2
 800e88a:	e9c4 3104 	strd	r3, r1, [r4, #16]
 800e88e:	d1f0      	bne.n	800e872 <z_add_timeout+0x6a>
	node->prev = tail;
 800e890:	e9c4 7c00 	strd	r7, ip, [r4]
	tail->next = node;
 800e894:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800e898:	607c      	str	r4, [r7, #4]
	return list->head == list;
 800e89a:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e89c:	42bb      	cmp	r3, r7
 800e89e:	d00b      	beq.n	800e8b8 <z_add_timeout+0xb0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800e8a0:	429c      	cmp	r4, r3
 800e8a2:	d109      	bne.n	800e8b8 <z_add_timeout+0xb0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800e8a4:	f7ff ff80 	bl	800e7a8 <next_timeout>

			if (next_time == 0 ||
 800e8a8:	b118      	cbz	r0, 800e8b2 <z_add_timeout+0xaa>
			    _current_cpu->slice_ticks != next_time) {
 800e8aa:	4b16      	ldr	r3, [pc, #88]	; (800e904 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	4283      	cmp	r3, r0
 800e8b0:	d002      	beq.n	800e8b8 <z_add_timeout+0xb0>
				sys_clock_set_timeout(next_time, false);
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	f7fa f9d2 	bl	8008c5c <sys_clock_set_timeout>
	__asm__ volatile(
 800e8b8:	f385 8811 	msr	BASEPRI, r5
 800e8bc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800e8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e8c2:	4911      	ldr	r1, [pc, #68]	; (800e908 <z_add_timeout+0x100>)
			to->dticks = timeout.ticks + 1 + elapsed();
 800e8c4:	1c56      	adds	r6, r2, #1
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e8c6:	680a      	ldr	r2, [r1, #0]
			to->dticks = timeout.ticks + 1 + elapsed();
 800e8c8:	f143 0700 	adc.w	r7, r3, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e8cc:	b172      	cbz	r2, 800e8ec <z_add_timeout+0xe4>
			to->dticks = timeout.ticks + 1 + elapsed();
 800e8ce:	e9c4 6704 	strd	r6, r7, [r4, #16]
 800e8d2:	e7c5      	b.n	800e860 <z_add_timeout+0x58>
 800e8d4:	4770      	bx	lr
				t->dticks -= to->dticks;
 800e8d6:	1ac3      	subs	r3, r0, r3
 800e8d8:	eb66 0101 	sbc.w	r1, r6, r1
 800e8dc:	e9c2 3104 	strd	r3, r1, [r2, #16]
	sys_dnode_t *const prev = successor->prev;
 800e8e0:	6853      	ldr	r3, [r2, #4]
	node->next = successor;
 800e8e2:	e9c4 2300 	strd	r2, r3, [r4]
	prev->next = node;
 800e8e6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800e8e8:	6054      	str	r4, [r2, #4]
		if (t == NULL) {
 800e8ea:	e7d6      	b.n	800e89a <z_add_timeout+0x92>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800e8ec:	f7fa fa3e 	bl	8008d6c <sys_clock_elapsed>
			to->dticks = timeout.ticks + 1 + elapsed();
 800e8f0:	1982      	adds	r2, r0, r6
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 800e8f8:	e7e9      	b.n	800e8ce <z_add_timeout+0xc6>
 800e8fa:	bf00      	nop
 800e8fc:	20000ca8 	.word	0x20000ca8
 800e900:	2000040c 	.word	0x2000040c
 800e904:	2000159c 	.word	0x2000159c
 800e908:	200015e0 	.word	0x200015e0

0800e90c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
 800e90c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800e90e:	f04f 0210 	mov.w	r2, #16
 800e912:	f3ef 8411 	mrs	r4, BASEPRI
 800e916:	f382 8812 	msr	BASEPRI_MAX, r2
 800e91a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
 800e91e:	6803      	ldr	r3, [r0, #0]
 800e920:	b13b      	cbz	r3, 800e932 <z_abort_timeout+0x26>
			remove_timeout(to);
 800e922:	f7ff ff25 	bl	800e770 <remove_timeout>
			ret = 0;
 800e926:	2000      	movs	r0, #0
	__asm__ volatile(
 800e928:	f384 8811 	msr	BASEPRI, r4
 800e92c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 800e930:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800e932:	f06f 0015 	mvn.w	r0, #21
 800e936:	f384 8811 	msr	BASEPRI, r4
 800e93a:	f3bf 8f6f 	isb	sy
}
 800e93e:	bd10      	pop	{r4, pc}

0800e940 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	4604      	mov	r4, r0
 800e944:	460d      	mov	r5, r1
	__asm__ volatile(
 800e946:	f04f 0310 	mov.w	r3, #16
 800e94a:	f3ef 8611 	mrs	r6, BASEPRI
 800e94e:	f383 8812 	msr	BASEPRI_MAX, r3
 800e952:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
 800e956:	f7ff ff27 	bl	800e7a8 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
 800e95a:	42a0      	cmp	r0, r4
 800e95c:	db07      	blt.n	800e96e <z_set_timeout_expiry+0x2e>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800e95e:	2801      	cmp	r0, #1
 800e960:	dd05      	ble.n	800e96e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800e962:	42a0      	cmp	r0, r4
 800e964:	4629      	mov	r1, r5
 800e966:	bfa8      	it	ge
 800e968:	4620      	movge	r0, r4
 800e96a:	f7fa f977 	bl	8008c5c <sys_clock_set_timeout>
	__asm__ volatile(
 800e96e:	f386 8811 	msr	BASEPRI, r6
 800e972:	f3bf 8f6f 	isb	sy
		}
	}
}
 800e976:	bd70      	pop	{r4, r5, r6, pc}

0800e978 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
 800e978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800e97e:	f7ff fadd 	bl	800df3c <z_time_slice>
	__asm__ volatile(
 800e982:	f04f 0310 	mov.w	r3, #16
 800e986:	f3ef 8511 	mrs	r5, BASEPRI
 800e98a:	f383 8812 	msr	BASEPRI_MAX, r3
 800e98e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800e992:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800ea58 <sys_clock_announce+0xe0>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800e996:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800ea5c <sys_clock_announce+0xe4>
 800e99a:	f8d9 4000 	ldr.w	r4, [r9]
 800e99e:	f8c8 6000 	str.w	r6, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800e9a2:	454c      	cmp	r4, r9
 800e9a4:	d053      	beq.n	800ea4e <sys_clock_announce+0xd6>
 800e9a6:	4f2e      	ldr	r7, [pc, #184]	; (800ea60 <sys_clock_announce+0xe8>)
 800e9a8:	462b      	mov	r3, r5

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800e9aa:	e9d7 2100 	ldrd	r2, r1, [r7]
		announce_remaining -= dt;
		t->dticks = 0;
		remove_timeout(t);
 800e9ae:	4620      	mov	r0, r4
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800e9b0:	ea4f 7ce6 	mov.w	ip, r6, asr #31
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	b374      	cbz	r4, 800ea16 <sys_clock_announce+0x9e>
 800e9b8:	6923      	ldr	r3, [r4, #16]
 800e9ba:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800e9be:	429e      	cmp	r6, r3
 800e9c0:	eb7c 0b0e 	sbcs.w	fp, ip, lr
		announce_remaining -= dt;
 800e9c4:	eba6 0a03 	sub.w	sl, r6, r3
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800e9c8:	db3b      	blt.n	800ea42 <sys_clock_announce+0xca>
		curr_tick += dt;
 800e9ca:	189a      	adds	r2, r3, r2
		announce_remaining -= dt;
 800e9cc:	f8c8 a000 	str.w	sl, [r8]
		t->dticks = 0;
 800e9d0:	f04f 0b00 	mov.w	fp, #0
 800e9d4:	f04f 0a00 	mov.w	sl, #0
		curr_tick += dt;
 800e9d8:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
		t->dticks = 0;
 800e9dc:	e9c4 ab04 	strd	sl, fp, [r4, #16]
		curr_tick += dt;
 800e9e0:	e9c7 2300 	strd	r2, r3, [r7]
		remove_timeout(t);
 800e9e4:	f7ff fec4 	bl	800e770 <remove_timeout>
	__asm__ volatile(
 800e9e8:	f385 8811 	msr	BASEPRI, r5
 800e9ec:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800e9f0:	68a3      	ldr	r3, [r4, #8]
 800e9f2:	4798      	blx	r3
	__asm__ volatile(
 800e9f4:	f04f 0310 	mov.w	r3, #16
 800e9f8:	f3ef 8511 	mrs	r5, BASEPRI
 800e9fc:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea00:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800ea04:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800ea08:	f8d8 6000 	ldr.w	r6, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ea0c:	454c      	cmp	r4, r9
	k.key = arch_irq_lock();
 800ea0e:	462b      	mov	r3, r5
 800ea10:	d1cb      	bne.n	800e9aa <sys_clock_announce+0x32>
 800ea12:	ea4f 7ce6 	mov.w	ip, r6, asr #31

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	199b      	adds	r3, r3, r6
 800ea1a:	603b      	str	r3, [r7, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
	announce_remaining = 0;
 800ea1e:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 800ea22:	eb43 030c 	adc.w	r3, r3, ip
 800ea26:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
 800ea28:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
 800ea2c:	f7ff febc 	bl	800e7a8 <next_timeout>
 800ea30:	4621      	mov	r1, r4
 800ea32:	f7fa f913 	bl	8008c5c <sys_clock_set_timeout>
	__asm__ volatile(
 800ea36:	f385 8811 	msr	BASEPRI, r5
 800ea3a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800ea3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		first()->dticks -= announce_remaining;
 800ea42:	1b9b      	subs	r3, r3, r6
 800ea44:	6123      	str	r3, [r4, #16]
 800ea46:	eb6e 030c 	sbc.w	r3, lr, ip
 800ea4a:	6163      	str	r3, [r4, #20]
 800ea4c:	e7e3      	b.n	800ea16 <sys_clock_announce+0x9e>
 800ea4e:	4f04      	ldr	r7, [pc, #16]	; (800ea60 <sys_clock_announce+0xe8>)
 800ea50:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 800ea54:	e7df      	b.n	800ea16 <sys_clock_announce+0x9e>
 800ea56:	bf00      	nop
 800ea58:	2000040c 	.word	0x2000040c
 800ea5c:	200015e0 	.word	0x200015e0
 800ea60:	20000ca8 	.word	0x20000ca8

0800ea64 <sys_clock_tick_get_32>:
	}
	return t;
}

uint32_t sys_clock_tick_get_32(void)
{
 800ea64:	b510      	push	{r4, lr}
	__asm__ volatile(
 800ea66:	f04f 0310 	mov.w	r3, #16
 800ea6a:	f3ef 8411 	mrs	r4, BASEPRI
 800ea6e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea72:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 800ea76:	f7fa f979 	bl	8008d6c <sys_clock_elapsed>
 800ea7a:	4b04      	ldr	r3, [pc, #16]	; (800ea8c <sys_clock_tick_get_32+0x28>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4418      	add	r0, r3
	__asm__ volatile(
 800ea80:	f384 8811 	msr	BASEPRI, r4
 800ea84:	f3bf 8f6f 	isb	sy
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
#else
	return (uint32_t)curr_tick;
#endif
}
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000ca8 	.word	0x20000ca8

0800ea90 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 800ea90:	b510      	push	{r4, lr}
	__asm__ volatile(
 800ea92:	f04f 0310 	mov.w	r3, #16
 800ea96:	f3ef 8411 	mrs	r4, BASEPRI
 800ea9a:	f383 8812 	msr	BASEPRI_MAX, r3
 800ea9e:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 800eaa2:	f7fa f963 	bl	8008d6c <sys_clock_elapsed>
 800eaa6:	4a05      	ldr	r2, [pc, #20]	; (800eabc <z_impl_k_uptime_ticks+0x2c>)
 800eaa8:	e9d2 3100 	ldrd	r3, r1, [r2]
 800eaac:	18c0      	adds	r0, r0, r3
 800eaae:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800eab2:	f384 8811 	msr	BASEPRI, r4
 800eab6:	f3bf 8f6f 	isb	sy
	return sys_clock_tick_get();
}
 800eaba:	bd10      	pop	{r4, pc}
 800eabc:	20000ca8 	.word	0x20000ca8

0800eac0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800eac0:	b900      	cbnz	r0, 800eac4 <z_impl_k_busy_wait+0x4>
 800eac2:	4770      	bx	lr
{
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800eac8:	f7fa f98c 	bl	8008de4 <sys_clock_cycle_get_32>
 800eacc:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800eace:	4807      	ldr	r0, [pc, #28]	; (800eaec <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800ead0:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <z_impl_k_busy_wait+0x30>)
 800ead2:	fba4 0100 	umull	r0, r1, r4, r0
 800ead6:	2300      	movs	r3, #0
 800ead8:	f7f2 f850 	bl	8000b7c <__aeabi_uldivmod>
 800eadc:	4604      	mov	r4, r0
 800eade:	f7fa f981 	bl	8008de4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800eae2:	1b40      	subs	r0, r0, r5
 800eae4:	42a0      	cmp	r0, r4
 800eae6:	d3fa      	bcc.n	800eade <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800eae8:	bd38      	pop	{r3, r4, r5, pc}
 800eaea:	bf00      	nop
 800eaec:	04c4b400 	.word	0x04c4b400
 800eaf0:	000f4240 	.word	0x000f4240

0800eaf4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	4604      	mov	r4, r0
	__asm__ volatile(
 800eaf8:	f04f 0310 	mov.w	r3, #16
 800eafc:	f3ef 8511 	mrs	r5, BASEPRI
 800eb00:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb04:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800eb08:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	f142 0200 	adc.w	r2, r2, #0
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	f172 0300 	sbcs.w	r3, r2, #0
 800eb18:	462e      	mov	r6, r5
 800eb1a:	d22b      	bcs.n	800eb74 <z_timer_expiration_handler+0x80>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800eb1c:	6b23      	ldr	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800eb1e:	6a22      	ldr	r2, [r4, #32]
	timer->status += 1U;
 800eb20:	3301      	adds	r3, #1
 800eb22:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 800eb24:	b172      	cbz	r2, 800eb44 <z_timer_expiration_handler+0x50>
	__asm__ volatile(
 800eb26:	f385 8811 	msr	BASEPRI, r5
 800eb2a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800eb2e:	6a23      	ldr	r3, [r4, #32]
 800eb30:	4620      	mov	r0, r4
 800eb32:	4798      	blx	r3
	__asm__ volatile(
 800eb34:	f04f 0310 	mov.w	r3, #16
 800eb38:	f3ef 8611 	mrs	r6, BASEPRI
 800eb3c:	f383 8812 	msr	BASEPRI_MAX, r3
 800eb40:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800eb44:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800eb48:	42a5      	cmp	r5, r4
 800eb4a:	d00e      	beq.n	800eb6a <z_timer_expiration_handler+0x76>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800eb4c:	b16d      	cbz	r5, 800eb6a <z_timer_expiration_handler+0x76>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f7ff fac6 	bl	800e0e0 <z_unpend_thread_no_timeout>
 800eb54:	2300      	movs	r3, #0
 800eb56:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
 800eb58:	f386 8811 	msr	BASEPRI, r6
 800eb5c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800eb60:	4628      	mov	r0, r5
}
 800eb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 800eb66:	f7ff ba3d 	b.w	800dfe4 <z_ready_thread>
 800eb6a:	f386 8811 	msr	BASEPRI, r6
 800eb6e:	f3bf 8f6f 	isb	sy
}
 800eb72:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800eb74:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800eb78:	4901      	ldr	r1, [pc, #4]	; (800eb80 <z_timer_expiration_handler+0x8c>)
 800eb7a:	f7ff fe45 	bl	800e808 <z_add_timeout>
 800eb7e:	e7cd      	b.n	800eb1c <z_timer_expiration_handler+0x28>
 800eb80:	0800eaf5 	.word	0x0800eaf5

0800eb84 <k_timer_init>:
			 k_timer_expiry_t expiry_fn,
			 k_timer_stop_t stop_fn)
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
	timer->status = 0U;
 800eb84:	2300      	movs	r3, #0
{
 800eb86:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 800eb88:	f100 0418 	add.w	r4, r0, #24
	list->tail = (sys_dnode_t *)list;
 800eb8c:	e9c0 4406 	strd	r4, r4, [r0, #24]
	timer->stop_fn = stop_fn;
 800eb90:	e9c0 1208 	strd	r1, r2, [r0, #32]
	node->prev = NULL;
 800eb94:	e9c0 3300 	strd	r3, r3, [r0]
	SYS_PORT_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;

	z_object_init(timer);
}
 800eb98:	bc10      	pop	{r4}
	timer->status = 0U;
 800eb9a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800eb9c:	6343      	str	r3, [r0, #52]	; 0x34
}
 800eb9e:	4770      	bx	lr

0800eba0 <z_impl_k_timer_start>:


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800eba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800eba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eba8:	bf08      	it	eq
 800ebaa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800ebae:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800ebb2:	d03d      	beq.n	800ec30 <z_impl_k_timer_start+0x90>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800ebb4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800ebb8:	bf08      	it	eq
 800ebba:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	469c      	mov	ip, r3
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4690      	mov	r8, r2
 800ebc6:	461f      	mov	r7, r3
 800ebc8:	46a9      	mov	r9, r5
 800ebca:	46b2      	mov	sl, r6
 800ebcc:	d00b      	beq.n	800ebe6 <z_impl_k_timer_start+0x46>
 800ebce:	ea56 0305 	orrs.w	r3, r6, r5
 800ebd2:	d008      	beq.n	800ebe6 <z_impl_k_timer_start+0x46>
	    Z_TICK_ABS(period.ticks) < 0) {
 800ebd4:	f06f 0301 	mvn.w	r3, #1
 800ebd8:	1b5b      	subs	r3, r3, r5
 800ebda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebde:	eb63 0306 	sbc.w	r3, r3, r6
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	db26      	blt.n	800ec34 <z_impl_k_timer_start+0x94>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800ebe6:	f06f 0301 	mvn.w	r3, #1
 800ebea:	1a5b      	subs	r3, r3, r1
 800ebec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebf0:	eb63 030c 	sbc.w	r3, r3, ip
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	db0f      	blt.n	800ec18 <z_impl_k_timer_start+0x78>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	f7ff fe87 	bl	800e90c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	e9c4 a30b 	strd	sl, r3, [r4, #44]	; 0x2c
	timer->period = period;
 800ec04:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800ec08:	4642      	mov	r2, r8
 800ec0a:	463b      	mov	r3, r7
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	490f      	ldr	r1, [pc, #60]	; (800ec4c <z_impl_k_timer_start+0xac>)
		     duration);
}
 800ec10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800ec14:	f7ff bdf8 	b.w	800e808 <z_add_timeout>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800ec18:	2901      	cmp	r1, #1
 800ec1a:	f17c 0300 	sbcs.w	r3, ip, #0
 800ec1e:	bfbc      	itt	lt
 800ec20:	2101      	movlt	r1, #1
 800ec22:	f04f 0c00 	movlt.w	ip, #0
 800ec26:	f111 38ff 	adds.w	r8, r1, #4294967295	; 0xffffffff
 800ec2a:	f14c 37ff 	adc.w	r7, ip, #4294967295	; 0xffffffff
 800ec2e:	e7e3      	b.n	800ebf8 <z_impl_k_timer_start+0x58>
}
 800ec30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800ec34:	2d02      	cmp	r5, #2
 800ec36:	f176 0300 	sbcs.w	r3, r6, #0
 800ec3a:	bfbc      	itt	lt
 800ec3c:	2502      	movlt	r5, #2
 800ec3e:	2600      	movlt	r6, #0
 800ec40:	f115 39ff 	adds.w	r9, r5, #4294967295	; 0xffffffff
 800ec44:	f146 3aff 	adc.w	sl, r6, #4294967295	; 0xffffffff
 800ec48:	e7cd      	b.n	800ebe6 <z_impl_k_timer_start+0x46>
 800ec4a:	bf00      	nop
 800ec4c:	0800eaf5 	.word	0x0800eaf5

0800ec50 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800ec50:	b510      	push	{r4, lr}
 800ec52:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800ec54:	f7ff fe5a 	bl	800e90c <z_abort_timeout>

	if (inactive) {
 800ec58:	b9b0      	cbnz	r0, 800ec88 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 800ec5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec5c:	b10b      	cbz	r3, 800ec62 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800ec5e:	4620      	mov	r0, r4
 800ec60:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800ec62:	f104 0018 	add.w	r0, r4, #24
 800ec66:	f7ff fa69 	bl	800e13c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800ec6a:	b168      	cbz	r0, 800ec88 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800ec6c:	f7ff f9ba 	bl	800dfe4 <z_ready_thread>
	__asm__ volatile(
 800ec70:	f04f 0310 	mov.w	r3, #16
 800ec74:	f3ef 8011 	mrs	r0, BASEPRI
 800ec78:	f383 8812 	msr	BASEPRI_MAX, r3
 800ec7c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 800ec80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 800ec84:	f7ff bb20 	b.w	800e2c8 <z_reschedule_irqlock>
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	bf00      	nop

0800ec8c <signal_poll_event.constprop.0>:
}
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 800ec8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	struct z_poller *poller = event->poller;
 800ec90:	6885      	ldr	r5, [r0, #8]
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 800ec92:	4604      	mov	r4, r0
 800ec94:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
 800ec96:	b135      	cbz	r5, 800eca6 <signal_poll_event.constprop.0+0x1a>
		if (poller->mode == MODE_POLL) {
 800ec98:	786b      	ldrb	r3, [r5, #1]
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d025      	beq.n	800ecea <signal_poll_event.constprop.0+0x5e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	d00c      	beq.n	800ecbc <signal_poll_event.constprop.0+0x30>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
 800eca2:	2300      	movs	r3, #0
 800eca4:	702b      	strb	r3, [r5, #0]
	event->state |= state;
 800eca6:	68e3      	ldr	r3, [r4, #12]
 800eca8:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800ecac:	430e      	orrs	r6, r1
	event->poller = NULL;
 800ecae:	2000      	movs	r0, #0
	event->state |= state;
 800ecb0:	f366 3352 	bfi	r3, r6, #13, #6
 800ecb4:	e9c4 0302 	strd	r0, r3, [r4, #8]
		}
	}

	set_event_ready(event, state);
	return retcode;
}
 800ecb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800ecbc:	782b      	ldrb	r3, [r5, #0]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0f1      	beq.n	800eca6 <signal_poll_event.constprop.0+0x1a>
 800ecc2:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800ecc6:	b3bf      	cbz	r7, 800ed38 <signal_poll_event.constprop.0+0xac>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
 800ecc8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 800eccc:	f1a5 0914 	sub.w	r9, r5, #20
 800ecd0:	f105 0014 	add.w	r0, r5, #20
 800ecd4:	f7ff fe1a 	bl	800e90c <z_abort_timeout>
		twork->poll_result = 0;
 800ecd8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800ecdc:	4649      	mov	r1, r9
 800ecde:	4638      	mov	r0, r7
 800ece0:	f7fe fef4 	bl	800dacc <k_work_submit_to_queue>
		poller->is_polling = false;
 800ece4:	f885 8000 	strb.w	r8, [r5]
		if (retcode < 0) {
 800ece8:	e7dd      	b.n	800eca6 <signal_poll_event.constprop.0+0x1a>
	if (!z_is_thread_pending(thread)) {
 800ecea:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 800ecee:	f013 0302 	ands.w	r3, r3, #2
 800ecf2:	d0d7      	beq.n	800eca4 <signal_poll_event.constprop.0+0x18>
	if (z_is_thread_timeout_expired(thread)) {
 800ecf4:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 800ecf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecfc:	bf08      	it	eq
 800ecfe:	f112 0f02 	cmneq.w	r2, #2
 800ed02:	d01b      	beq.n	800ed3c <signal_poll_event.constprop.0+0xb0>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ed04:	f1a5 0760 	sub.w	r7, r5, #96	; 0x60
	z_unpend_thread(thread);
 800ed08:	4638      	mov	r0, r7
 800ed0a:	f7ff fa65 	bl	800e1d8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800ed0e:	2e08      	cmp	r6, #8
 800ed10:	bf0c      	ite	eq
 800ed12:	f06f 0303 	mvneq.w	r3, #3
 800ed16:	2300      	movne	r3, #0
 800ed18:	61eb      	str	r3, [r5, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800ed1a:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 800ed1e:	06db      	lsls	r3, r3, #27
 800ed20:	d1bf      	bne.n	800eca2 <signal_poll_event.constprop.0+0x16>
 800ed22:	f855 8c48 	ldr.w	r8, [r5, #-72]
 800ed26:	f1b8 0f00 	cmp.w	r8, #0
 800ed2a:	d1ba      	bne.n	800eca2 <signal_poll_event.constprop.0+0x16>
	z_ready_thread(thread);
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff f959 	bl	800dfe4 <z_ready_thread>
		poller->is_polling = false;
 800ed32:	f885 8000 	strb.w	r8, [r5]
		if (retcode < 0) {
 800ed36:	e7b6      	b.n	800eca6 <signal_poll_event.constprop.0+0x1a>
		poller->is_polling = false;
 800ed38:	702f      	strb	r7, [r5, #0]
		if (retcode < 0) {
 800ed3a:	e7b4      	b.n	800eca6 <signal_poll_event.constprop.0+0x1a>
		poller->is_polling = false;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	702b      	strb	r3, [r5, #0]
		return -EAGAIN;
 800ed40:	f06f 000a 	mvn.w	r0, #10
 800ed44:	e7b8      	b.n	800ecb8 <signal_poll_event.constprop.0+0x2c>
 800ed46:	bf00      	nop

0800ed48 <register_events>:
{
 800ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
 800ed4c:	1e0f      	subs	r7, r1, #0
{
 800ed4e:	b087      	sub	sp, #28
	for (int ii = 0; ii < num_events; ii++) {
 800ed50:	f340 8164 	ble.w	800f01c <register_events+0x2d4>
 800ed54:	2500      	movs	r5, #0
 800ed56:	469a      	mov	sl, r3
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ed58:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
 800ed5c:	4690      	mov	r8, r2
 800ed5e:	4604      	mov	r4, r0
	int events_registered = 0;
 800ed60:	46ab      	mov	fp, r5
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ed62:	9301      	str	r3, [sp, #4]
	event->poller = NULL;
 800ed64:	46a9      	mov	r9, r5
 800ed66:	f04f 0310 	mov.w	r3, #16
 800ed6a:	f3ef 8611 	mrs	r6, BASEPRI
 800ed6e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ed72:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 800ed76:	7b63      	ldrb	r3, [r4, #13]
 800ed78:	f003 031f 	and.w	r3, r3, #31
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	2b07      	cmp	r3, #7
 800ed80:	d809      	bhi.n	800ed96 <register_events+0x4e>
 800ed82:	e8df f003 	tbb	[pc, r3]
 800ed86:	0432      	.short	0x0432
 800ed88:	08082108 	.word	0x08082108
 800ed8c:	1b08      	.short	0x1b08
		if (k_sem_count_get(event->sem) > 0U) {
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d12f      	bne.n	800edf6 <register_events+0xae>
		} else if (!just_check && poller->is_polling) {
 800ed96:	f1ba 0f00 	cmp.w	sl, #0
 800ed9a:	d102      	bne.n	800eda2 <register_events+0x5a>
 800ed9c:	f898 3000 	ldrb.w	r3, [r8]
 800eda0:	bb5b      	cbnz	r3, 800edfa <register_events+0xb2>
	__asm__ volatile(
 800eda2:	f386 8811 	msr	BASEPRI, r6
 800eda6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800edaa:	3501      	adds	r5, #1
 800edac:	42af      	cmp	r7, r5
 800edae:	f104 0414 	add.w	r4, r4, #20
 800edb2:	d1d8      	bne.n	800ed66 <register_events+0x1e>
}
 800edb4:	4658      	mov	r0, fp
 800edb6:	b007      	add	sp, #28
 800edb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (event->msgq->used_msgs > 0) {
 800edbc:	6923      	ldr	r3, [r4, #16]
 800edbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0e8      	beq.n	800ed96 <register_events+0x4e>
 800edc4:	2210      	movs	r2, #16
 800edc6:	e004      	b.n	800edd2 <register_events+0x8a>
		if (!k_queue_is_empty(event->queue)) {
 800edc8:	6923      	ldr	r3, [r4, #16]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d0e2      	beq.n	800ed96 <register_events+0x4e>
 800edd0:	2204      	movs	r2, #4
	event->state |= state;
 800edd2:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
 800edd4:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
 800edd8:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800eddc:	430a      	orrs	r2, r1
 800edde:	f362 3352 	bfi	r3, r2, #13, #6
 800ede2:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
 800ede4:	f888 9000 	strb.w	r9, [r8]
 800ede8:	e7db      	b.n	800eda2 <register_events+0x5a>
		if (event->signal->signaled != 0U) {
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d0d1      	beq.n	800ed96 <register_events+0x4e>
 800edf2:	2201      	movs	r2, #1
 800edf4:	e7ed      	b.n	800edd2 <register_events+0x8a>
 800edf6:	2202      	movs	r2, #2
 800edf8:	e7eb      	b.n	800edd2 <register_events+0x8a>
	switch (event->type) {
 800edfa:	7b63      	ldrb	r3, [r4, #13]
 800edfc:	f003 031f 	and.w	r3, r3, #31
 800ee00:	3b01      	subs	r3, #1
 800ee02:	2b07      	cmp	r3, #7
 800ee04:	d80f      	bhi.n	800ee26 <register_events+0xde>
 800ee06:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ee0a:	0055      	.short	0x0055
 800ee0c:	000e0091 	.word	0x000e0091
 800ee10:	000e00d0 	.word	0x000e00d0
 800ee14:	000e000e 	.word	0x000e000e
 800ee18:	0013      	.short	0x0013
	sys_dnode_t *const tail = list->tail;
 800ee1a:	6953      	ldr	r3, [r2, #20]
	node->next = list;
 800ee1c:	9902      	ldr	r1, [sp, #8]
	node->prev = tail;
 800ee1e:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800ee22:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ee24:	6154      	str	r4, [r2, #20]
	event->poller = poller;
 800ee26:	f8c4 8008 	str.w	r8, [r4, #8]
			events_registered += 1;
 800ee2a:	f10b 0b01 	add.w	fp, fp, #1
 800ee2e:	e7b8      	b.n	800eda2 <register_events+0x5a>
		add_event(&event->msgq->poll_events, event, poller);
 800ee30:	6922      	ldr	r2, [r4, #16]
 800ee32:	f102 0328 	add.w	r3, r2, #40	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800ee36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ee38:	9302      	str	r3, [sp, #8]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	4288      	cmp	r0, r1
 800ee3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ee40:	f000 80fa 	beq.w	800f038 <register_events+0x2f0>
	if ((pending == NULL) ||
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f000 80f7 	beq.w	800f038 <register_events+0x2f0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ee4a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ee4c:	b100      	cbz	r0, 800ee50 <register_events+0x108>
 800ee4e:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ee50:	9901      	ldr	r1, [sp, #4]
 800ee52:	9203      	str	r2, [sp, #12]
 800ee54:	f7ff f868 	bl	800df28 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	9a03      	ldr	r2, [sp, #12]
 800ee5c:	f300 80eb 	bgt.w	800f036 <register_events+0x2ee>
	return list->head == list;
 800ee60:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ee62:	9902      	ldr	r1, [sp, #8]
 800ee64:	4299      	cmp	r1, r3
 800ee66:	f000 80f3 	beq.w	800f050 <register_events+0x308>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f000 80f0 	beq.w	800f050 <register_events+0x308>
 800ee70:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800ee74:	9503      	str	r5, [sp, #12]
 800ee76:	9c01      	ldr	r4, [sp, #4]
 800ee78:	4615      	mov	r5, r2
 800ee7a:	461e      	mov	r6, r3
 800ee7c:	e003      	b.n	800ee86 <register_events+0x13e>
	return (node == list->tail) ? NULL : node->next;
 800ee7e:	6836      	ldr	r6, [r6, #0]
 800ee80:	2e00      	cmp	r6, #0
 800ee82:	f000 8104 	beq.w	800f08e <register_events+0x346>
		if (z_sched_prio_cmp(poller_thread(poller),
 800ee86:	68b1      	ldr	r1, [r6, #8]
 800ee88:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ee8a:	b101      	cbz	r1, 800ee8e <register_events+0x146>
 800ee8c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800ee8e:	f7ff f84b 	bl	800df28 <z_sched_prio_cmp>
 800ee92:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800ee94:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800ee96:	f300 80e3 	bgt.w	800f060 <register_events+0x318>
 800ee9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ee9c:	42b0      	cmp	r0, r6
 800ee9e:	d1ee      	bne.n	800ee7e <register_events+0x136>
 800eea0:	462a      	mov	r2, r5
 800eea2:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800eea6:	9e05      	ldr	r6, [sp, #20]
	node->next = list;
 800eea8:	9b02      	ldr	r3, [sp, #8]
	node->prev = tail;
 800eeaa:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800eeae:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800eeb0:	62d4      	str	r4, [r2, #44]	; 0x2c
}
 800eeb2:	e7b8      	b.n	800ee26 <register_events+0xde>
		add_event(&event->signal->poll_events, event, poller);
 800eeb4:	6923      	ldr	r3, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800eeb6:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eeba:	428b      	cmp	r3, r1
 800eebc:	f000 80c3 	beq.w	800f046 <register_events+0x2fe>
	if ((pending == NULL) ||
 800eec0:	2a00      	cmp	r2, #0
 800eec2:	f000 80c0 	beq.w	800f046 <register_events+0x2fe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800eec6:	6890      	ldr	r0, [r2, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800eec8:	b100      	cbz	r0, 800eecc <register_events+0x184>
 800eeca:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800eecc:	9901      	ldr	r1, [sp, #4]
 800eece:	9302      	str	r3, [sp, #8]
 800eed0:	f7ff f82a 	bl	800df28 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800eed4:	2800      	cmp	r0, #0
 800eed6:	9b02      	ldr	r3, [sp, #8]
 800eed8:	f300 80b4 	bgt.w	800f044 <register_events+0x2fc>
	return list->head == list;
 800eedc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800eede:	4293      	cmp	r3, r2
 800eee0:	f000 80ba 	beq.w	800f058 <register_events+0x310>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	f000 80b7 	beq.w	800f058 <register_events+0x310>
 800eeea:	e9cd 4603 	strd	r4, r6, [sp, #12]
 800eeee:	9502      	str	r5, [sp, #8]
 800eef0:	9c01      	ldr	r4, [sp, #4]
 800eef2:	461d      	mov	r5, r3
 800eef4:	4616      	mov	r6, r2
 800eef6:	e003      	b.n	800ef00 <register_events+0x1b8>
	return (node == list->tail) ? NULL : node->next;
 800eef8:	6836      	ldr	r6, [r6, #0]
 800eefa:	2e00      	cmp	r6, #0
 800eefc:	f000 80d3 	beq.w	800f0a6 <register_events+0x35e>
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef00:	68b1      	ldr	r1, [r6, #8]
 800ef02:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ef04:	b101      	cbz	r1, 800ef08 <register_events+0x1c0>
 800ef06:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef08:	f7ff f80e 	bl	800df28 <z_sched_prio_cmp>
 800ef0c:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800ef0e:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef10:	f300 80b4 	bgt.w	800f07c <register_events+0x334>
 800ef14:	6868      	ldr	r0, [r5, #4]
 800ef16:	42b0      	cmp	r0, r6
 800ef18:	d1ee      	bne.n	800eef8 <register_events+0x1b0>
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800ef20:	9e04      	ldr	r6, [sp, #16]
	node->prev = tail;
 800ef22:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800ef26:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800ef28:	605c      	str	r4, [r3, #4]
}
 800ef2a:	e77c      	b.n	800ee26 <register_events+0xde>
		add_event(&event->sem->poll_events, event, poller);
 800ef2c:	6922      	ldr	r2, [r4, #16]
 800ef2e:	f102 0310 	add.w	r3, r2, #16
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800ef32:	6911      	ldr	r1, [r2, #16]
 800ef34:	9302      	str	r3, [sp, #8]
 800ef36:	4618      	mov	r0, r3
 800ef38:	4288      	cmp	r0, r1
 800ef3a:	6953      	ldr	r3, [r2, #20]
 800ef3c:	f43f af6e 	beq.w	800ee1c <register_events+0xd4>
	if ((pending == NULL) ||
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f43f af6b 	beq.w	800ee1c <register_events+0xd4>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ef46:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ef48:	b100      	cbz	r0, 800ef4c <register_events+0x204>
 800ef4a:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ef4c:	9901      	ldr	r1, [sp, #4]
 800ef4e:	9203      	str	r2, [sp, #12]
 800ef50:	f7fe ffea 	bl	800df28 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800ef54:	2800      	cmp	r0, #0
 800ef56:	9a03      	ldr	r2, [sp, #12]
 800ef58:	f73f af5f 	bgt.w	800ee1a <register_events+0xd2>
	return list->head == list;
 800ef5c:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ef5e:	9902      	ldr	r1, [sp, #8]
 800ef60:	4299      	cmp	r1, r3
 800ef62:	d077      	beq.n	800f054 <register_events+0x30c>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d075      	beq.n	800f054 <register_events+0x30c>
 800ef68:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800ef6c:	9503      	str	r5, [sp, #12]
 800ef6e:	9c01      	ldr	r4, [sp, #4]
 800ef70:	4615      	mov	r5, r2
 800ef72:	461e      	mov	r6, r3
 800ef74:	e003      	b.n	800ef7e <register_events+0x236>
	return (node == list->tail) ? NULL : node->next;
 800ef76:	6836      	ldr	r6, [r6, #0]
 800ef78:	2e00      	cmp	r6, #0
 800ef7a:	f000 808e 	beq.w	800f09a <register_events+0x352>
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef7e:	68b1      	ldr	r1, [r6, #8]
 800ef80:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ef82:	b101      	cbz	r1, 800ef86 <register_events+0x23e>
 800ef84:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef86:	f7fe ffcf 	bl	800df28 <z_sched_prio_cmp>
 800ef8a:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800ef8c:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800ef8e:	dc71      	bgt.n	800f074 <register_events+0x32c>
 800ef90:	6968      	ldr	r0, [r5, #20]
 800ef92:	42b0      	cmp	r0, r6
 800ef94:	d1ef      	bne.n	800ef76 <register_events+0x22e>
 800ef96:	462a      	mov	r2, r5
 800ef98:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800ef9c:	9e05      	ldr	r6, [sp, #20]
	node->next = list;
 800ef9e:	9b02      	ldr	r3, [sp, #8]
	node->prev = tail;
 800efa0:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800efa4:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800efa6:	6154      	str	r4, [r2, #20]
}
 800efa8:	e73d      	b.n	800ee26 <register_events+0xde>
		add_event(&event->queue->poll_events, event, poller);
 800efaa:	6922      	ldr	r2, [r4, #16]
 800efac:	f102 0314 	add.w	r3, r2, #20
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800efb0:	6951      	ldr	r1, [r2, #20]
 800efb2:	9302      	str	r3, [sp, #8]
 800efb4:	4618      	mov	r0, r3
 800efb6:	4288      	cmp	r0, r1
 800efb8:	6993      	ldr	r3, [r2, #24]
 800efba:	d036      	beq.n	800f02a <register_events+0x2e2>
	if ((pending == NULL) ||
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d034      	beq.n	800f02a <register_events+0x2e2>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800efc0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800efc2:	b100      	cbz	r0, 800efc6 <register_events+0x27e>
 800efc4:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800efc6:	9901      	ldr	r1, [sp, #4]
 800efc8:	9203      	str	r2, [sp, #12]
 800efca:	f7fe ffad 	bl	800df28 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800efce:	2800      	cmp	r0, #0
 800efd0:	9a03      	ldr	r2, [sp, #12]
 800efd2:	dc29      	bgt.n	800f028 <register_events+0x2e0>
	return list->head == list;
 800efd4:	6953      	ldr	r3, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800efd6:	9902      	ldr	r1, [sp, #8]
 800efd8:	4299      	cmp	r1, r3
 800efda:	d03f      	beq.n	800f05c <register_events+0x314>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d03d      	beq.n	800f05c <register_events+0x314>
 800efe0:	e9cd 4604 	strd	r4, r6, [sp, #16]
 800efe4:	9503      	str	r5, [sp, #12]
 800efe6:	9c01      	ldr	r4, [sp, #4]
 800efe8:	4615      	mov	r5, r2
 800efea:	461e      	mov	r6, r3
 800efec:	e001      	b.n	800eff2 <register_events+0x2aa>
	return (node == list->tail) ? NULL : node->next;
 800efee:	6836      	ldr	r6, [r6, #0]
 800eff0:	b156      	cbz	r6, 800f008 <register_events+0x2c0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800eff2:	68b1      	ldr	r1, [r6, #8]
 800eff4:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800eff6:	b101      	cbz	r1, 800effa <register_events+0x2b2>
 800eff8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800effa:	f7fe ff95 	bl	800df28 <z_sched_prio_cmp>
 800effe:	2800      	cmp	r0, #0
 800f000:	dc2e      	bgt.n	800f060 <register_events+0x318>
 800f002:	69a9      	ldr	r1, [r5, #24]
 800f004:	428e      	cmp	r6, r1
 800f006:	d1f2      	bne.n	800efee <register_events+0x2a6>
 800f008:	462a      	mov	r2, r5
 800f00a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800f00e:	9e05      	ldr	r6, [sp, #20]
	node->next = list;
 800f010:	9b02      	ldr	r3, [sp, #8]
	node->prev = tail;
 800f012:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800f016:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800f018:	6194      	str	r4, [r2, #24]
}
 800f01a:	e704      	b.n	800ee26 <register_events+0xde>
	int events_registered = 0;
 800f01c:	f04f 0b00 	mov.w	fp, #0
}
 800f020:	4658      	mov	r0, fp
 800f022:	b007      	add	sp, #28
 800f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sys_dnode_t *const tail = list->tail;
 800f028:	6993      	ldr	r3, [r2, #24]
	node->next = list;
 800f02a:	9902      	ldr	r1, [sp, #8]
	node->prev = tail;
 800f02c:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800f030:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f032:	6194      	str	r4, [r2, #24]
		return;
 800f034:	e6f7      	b.n	800ee26 <register_events+0xde>
	sys_dnode_t *const tail = list->tail;
 800f036:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
 800f038:	9902      	ldr	r1, [sp, #8]
	node->prev = tail;
 800f03a:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800f03e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800f040:	62d4      	str	r4, [r2, #44]	; 0x2c
 800f042:	e6f0      	b.n	800ee26 <register_events+0xde>
	sys_dnode_t *const tail = list->tail;
 800f044:	685a      	ldr	r2, [r3, #4]
	node->prev = tail;
 800f046:	e9c4 3200 	strd	r3, r2, [r4]
	tail->next = node;
 800f04a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800f04c:	605c      	str	r4, [r3, #4]
 800f04e:	e6ea      	b.n	800ee26 <register_events+0xde>
	sys_dnode_t *const tail = list->tail;
 800f050:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f052:	e729      	b.n	800eea8 <register_events+0x160>
 800f054:	6951      	ldr	r1, [r2, #20]
 800f056:	e7a2      	b.n	800ef9e <register_events+0x256>
 800f058:	6859      	ldr	r1, [r3, #4]
 800f05a:	e762      	b.n	800ef22 <register_events+0x1da>
 800f05c:	6991      	ldr	r1, [r2, #24]
 800f05e:	e7d7      	b.n	800f010 <register_events+0x2c8>
	sys_dnode_t *const prev = successor->prev;
 800f060:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800f064:	4633      	mov	r3, r6
 800f066:	685a      	ldr	r2, [r3, #4]
 800f068:	9e05      	ldr	r6, [sp, #20]
	node->next = successor;
 800f06a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800f06e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800f070:	605c      	str	r4, [r3, #4]
			return;
 800f072:	e6d8      	b.n	800ee26 <register_events+0xde>
	sys_dnode_t *const prev = successor->prev;
 800f074:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800f078:	4633      	mov	r3, r6
 800f07a:	e7f4      	b.n	800f066 <register_events+0x31e>
 800f07c:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800f080:	684b      	ldr	r3, [r1, #4]
 800f082:	9e04      	ldr	r6, [sp, #16]
	node->next = successor;
 800f084:	e9c4 1300 	strd	r1, r3, [r4]
	prev->next = node;
 800f088:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800f08a:	604c      	str	r4, [r1, #4]
 800f08c:	e6cb      	b.n	800ee26 <register_events+0xde>
 800f08e:	462a      	mov	r2, r5
 800f090:	9e05      	ldr	r6, [sp, #20]
 800f092:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800f096:	4601      	mov	r1, r0
 800f098:	e706      	b.n	800eea8 <register_events+0x160>
 800f09a:	462a      	mov	r2, r5
 800f09c:	9e05      	ldr	r6, [sp, #20]
 800f09e:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	e77b      	b.n	800ef9e <register_events+0x256>
 800f0a6:	462b      	mov	r3, r5
 800f0a8:	9e04      	ldr	r6, [sp, #16]
 800f0aa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	e737      	b.n	800ef22 <register_events+0x1da>
 800f0b2:	bf00      	nop

0800f0b4 <k_poll_event_init>:
	event->type = type;
 800f0b4:	04d2      	lsls	r2, r2, #19
 800f0b6:	0209      	lsls	r1, r1, #8
 800f0b8:	f890 c00c 	ldrb.w	ip, [r0, #12]
	event->obj = obj;
 800f0bc:	6103      	str	r3, [r0, #16]
	event->type = type;
 800f0be:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 800f0c2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800f0c6:	430a      	orrs	r2, r1
 800f0c8:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
 800f0cc:	2100      	movs	r1, #0
	event->type = type;
 800f0ce:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 800f0d2:	4770      	bx	lr

0800f0d4 <z_impl_k_poll>:
{
 800f0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d8:	4698      	mov	r8, r3
	events_registered = register_events(events, num_events, poller,
 800f0da:	ea52 0308 	orrs.w	r3, r2, r8
	struct z_poller *poller = &_current->poller;
 800f0de:	4b52      	ldr	r3, [pc, #328]	; (800f228 <z_impl_k_poll+0x154>)
 800f0e0:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
 800f0e2:	f04f 0501 	mov.w	r5, #1
{
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	4692      	mov	sl, r2
	poller->is_polling = true;
 800f0ea:	f887 5060 	strb.w	r5, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 800f0ee:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
	events_registered = register_events(events, num_events, poller,
 800f0f2:	bf0c      	ite	eq
 800f0f4:	462b      	moveq	r3, r5
 800f0f6:	2300      	movne	r3, #0
 800f0f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 800f0fc:	4681      	mov	r9, r0
	events_registered = register_events(events, num_events, poller,
 800f0fe:	f7ff fe23 	bl	800ed48 <register_events>
 800f102:	4606      	mov	r6, r0
	__asm__ volatile(
 800f104:	f04f 0310 	mov.w	r3, #16
 800f108:	f3ef 8111 	mrs	r1, BASEPRI
 800f10c:	f383 8812 	msr	BASEPRI_MAX, r3
 800f110:	f3bf 8f6f 	isb	sy
	if (!poller->is_polling) {
 800f114:	f897 0060 	ldrb.w	r0, [r7, #96]	; 0x60
 800f118:	2800      	cmp	r0, #0
 800f11a:	d047      	beq.n	800f1ac <z_impl_k_poll+0xd8>
	poller->is_polling = false;
 800f11c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800f11e:	ea5a 0308 	orrs.w	r3, sl, r8
	poller->is_polling = false;
 800f122:	f887 4060 	strb.w	r4, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800f126:	d077      	beq.n	800f218 <z_impl_k_poll+0x144>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800f128:	e9cd a800 	strd	sl, r8, [sp]
 800f12c:	4a3f      	ldr	r2, [pc, #252]	; (800f22c <z_impl_k_poll+0x158>)
 800f12e:	4840      	ldr	r0, [pc, #256]	; (800f230 <z_impl_k_poll+0x15c>)
 800f130:	f7fe fff0 	bl	800e114 <z_pend_curr>
 800f134:	f04f 0310 	mov.w	r3, #16
 800f138:	f3ef 8811 	mrs	r8, BASEPRI
 800f13c:	f383 8812 	msr	BASEPRI_MAX, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	4647      	mov	r7, r8
	while (num_events--) {
 800f146:	b356      	cbz	r6, 800f19e <z_impl_k_poll+0xca>
 800f148:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800f14c:	4632      	mov	r2, r6
 800f14e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
	__asm__ volatile(
 800f152:	468c      	mov	ip, r1
 800f154:	3914      	subs	r1, #20
	event->poller = NULL;
 800f156:	f84c 4c0c 	str.w	r4, [ip, #-12]
	switch (event->type) {
 800f15a:	7b4b      	ldrb	r3, [r1, #13]
 800f15c:	f003 031f 	and.w	r3, r3, #31
 800f160:	2b08      	cmp	r3, #8
 800f162:	fa05 fe03 	lsl.w	lr, r5, r3
 800f166:	d80b      	bhi.n	800f180 <z_impl_k_poll+0xac>
 800f168:	f41e 7f8b 	tst.w	lr, #278	; 0x116
 800f16c:	d008      	beq.n	800f180 <z_impl_k_poll+0xac>
	return node->next != NULL;
 800f16e:	f85c 6c14 	ldr.w	r6, [ip, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800f172:	b12e      	cbz	r6, 800f180 <z_impl_k_poll+0xac>
	sys_dnode_t *const prev = node->prev;
 800f174:	f85c 3c10 	ldr.w	r3, [ip, #-16]
	prev->next = next;
 800f178:	601e      	str	r6, [r3, #0]
	next->prev = prev;
 800f17a:	6073      	str	r3, [r6, #4]
	node->prev = NULL;
 800f17c:	e94c 4405 	strd	r4, r4, [ip, #-20]
 800f180:	f387 8811 	msr	BASEPRI, r7
 800f184:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800f188:	f04f 0610 	mov.w	r6, #16
 800f18c:	f3ef 8311 	mrs	r3, BASEPRI
 800f190:	f386 8812 	msr	BASEPRI_MAX, r6
 800f194:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800f198:	3a01      	subs	r2, #1
 800f19a:	461f      	mov	r7, r3
 800f19c:	d1d9      	bne.n	800f152 <z_impl_k_poll+0x7e>
	__asm__ volatile(
 800f19e:	f388 8811 	msr	BASEPRI, r8
 800f1a2:	f3bf 8f6f 	isb	sy
}
 800f1a6:	b002      	add	sp, #8
 800f1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (num_events--) {
 800f1ac:	b366      	cbz	r6, 800f208 <z_impl_k_poll+0x134>
 800f1ae:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 800f1ba:	464f      	mov	r7, r9
 800f1bc:	f1a9 0914 	sub.w	r9, r9, #20
	event->poller = NULL;
 800f1c0:	f847 0c0c 	str.w	r0, [r7, #-12]
	switch (event->type) {
 800f1c4:	f899 300d 	ldrb.w	r3, [r9, #13]
 800f1c8:	f003 031f 	and.w	r3, r3, #31
 800f1cc:	2b08      	cmp	r3, #8
 800f1ce:	fa05 f603 	lsl.w	r6, r5, r3
 800f1d2:	d80b      	bhi.n	800f1ec <z_impl_k_poll+0x118>
 800f1d4:	f416 7f8b 	tst.w	r6, #278	; 0x116
 800f1d8:	d008      	beq.n	800f1ec <z_impl_k_poll+0x118>
	return node->next != NULL;
 800f1da:	f857 3c14 	ldr.w	r3, [r7, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800f1de:	b12b      	cbz	r3, 800f1ec <z_impl_k_poll+0x118>
	sys_dnode_t *const prev = node->prev;
 800f1e0:	f857 6c10 	ldr.w	r6, [r7, #-16]
	prev->next = next;
 800f1e4:	6033      	str	r3, [r6, #0]
	next->prev = prev;
 800f1e6:	605e      	str	r6, [r3, #4]
	node->prev = NULL;
 800f1e8:	e947 0005 	strd	r0, r0, [r7, #-20]
 800f1ec:	f384 8811 	msr	BASEPRI, r4
 800f1f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800f1f4:	f04f 0310 	mov.w	r3, #16
 800f1f8:	f3ef 8411 	mrs	r4, BASEPRI
 800f1fc:	f383 8812 	msr	BASEPRI_MAX, r3
 800f200:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800f204:	3a01      	subs	r2, #1
 800f206:	d1d8      	bne.n	800f1ba <z_impl_k_poll+0xe6>
	__asm__ volatile(
 800f208:	f381 8811 	msr	BASEPRI, r1
 800f20c:	f3bf 8f6f 	isb	sy
		return 0;
 800f210:	2000      	movs	r0, #0
}
 800f212:	b002      	add	sp, #8
 800f214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f218:	f381 8811 	msr	BASEPRI, r1
 800f21c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800f220:	f06f 000a 	mvn.w	r0, #10
 800f224:	e7bf      	b.n	800f1a6 <z_impl_k_poll+0xd2>
 800f226:	bf00      	nop
 800f228:	2000159c 	.word	0x2000159c
 800f22c:	20000414 	.word	0x20000414
 800f230:	200015e4 	.word	0x200015e4

0800f234 <z_handle_obj_poll_events>:
{
 800f234:	4603      	mov	r3, r0
	return list->head == list;
 800f236:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800f238:	4283      	cmp	r3, r0
 800f23a:	d00a      	beq.n	800f252 <z_handle_obj_poll_events+0x1e>
 800f23c:	b410      	push	{r4}
	sys_dnode_t *const next = node->next;
 800f23e:	e9d0 2400 	ldrd	r2, r4, [r0]
	node->next = NULL;
 800f242:	2300      	movs	r3, #0
	prev->next = next;
 800f244:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800f246:	6054      	str	r4, [r2, #4]
	node->prev = NULL;
 800f248:	e9c0 3300 	strd	r3, r3, [r0]
}
 800f24c:	bc10      	pop	{r4}
		(void) signal_poll_event(poll_event, state);
 800f24e:	f7ff bd1d 	b.w	800ec8c <signal_poll_event.constprop.0>
 800f252:	4770      	bx	lr

0800f254 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 800f254:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 800f256:	e9c0 0000 	strd	r0, r0, [r0]
 800f25a:	6083      	str	r3, [r0, #8]
}
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop

0800f260 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 800f260:	6883      	ldr	r3, [r0, #8]
 800f262:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 800f264:	68c3      	ldr	r3, [r0, #12]
 800f266:	6013      	str	r3, [r2, #0]
}
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop

0800f26c <z_impl_k_poll_signal_raise>:
{
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	460a      	mov	r2, r1
 800f270:	4603      	mov	r3, r0
	__asm__ volatile(
 800f272:	f04f 0110 	mov.w	r1, #16
 800f276:	f3ef 8511 	mrs	r5, BASEPRI
 800f27a:	f381 8812 	msr	BASEPRI_MAX, r1
 800f27e:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800f282:	6800      	ldr	r0, [r0, #0]
	sig->signaled = 1U;
 800f284:	2101      	movs	r1, #1
	if (!sys_dlist_is_empty(list)) {
 800f286:	4283      	cmp	r3, r0
 800f288:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800f28c:	d00f      	beq.n	800f2ae <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const next = node->next;
 800f28e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800f292:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800f294:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800f296:	2300      	movs	r3, #0
	node->prev = NULL;
 800f298:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800f29c:	f7ff fcf6 	bl	800ec8c <signal_poll_event.constprop.0>
	z_reschedule(&lock, key);
 800f2a0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800f2a2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 800f2a4:	4805      	ldr	r0, [pc, #20]	; (800f2bc <z_impl_k_poll_signal_raise+0x50>)
 800f2a6:	f7fe fffd 	bl	800e2a4 <z_reschedule>
}
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800f2ae:	f385 8811 	msr	BASEPRI, r5
 800f2b2:	f3bf 8f6f 	isb	sy
		return 0;
 800f2b6:	2400      	movs	r4, #0
}
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	200015e4 	.word	0x200015e4

0800f2c0 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800f2c0:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800f2c2:	4770      	bx	lr

0800f2c4 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop

0800f2c8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800f2c8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800f2ca:	4c09      	ldr	r4, [pc, #36]	; (800f2f0 <statics_init+0x28>)
 800f2cc:	4d09      	ldr	r5, [pc, #36]	; (800f2f4 <statics_init+0x2c>)
 800f2ce:	42ac      	cmp	r4, r5
 800f2d0:	d20b      	bcs.n	800f2ea <statics_init+0x22>
 800f2d2:	f104 030c 	add.w	r3, r4, #12
	sys_heap_init(&h->heap, mem, bytes);
 800f2d6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
	list->tail = (sys_dnode_t *)list;
 800f2da:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800f2de:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800f2e0:	3418      	adds	r4, #24
	sys_heap_init(&h->heap, mem, bytes);
 800f2e2:	f7f3 f833 	bl	800234c <sys_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800f2e6:	42ac      	cmp	r4, r5
 800f2e8:	d3f3      	bcc.n	800f2d2 <statics_init+0xa>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	bd38      	pop	{r3, r4, r5, pc}
 800f2ee:	bf00      	nop
 800f2f0:	20000730 	.word	0x20000730
 800f2f4:	20000730 	.word	0x20000730

0800f2f8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800f2f8:	b510      	push	{r4, lr}
 800f2fa:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800f2fc:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800f2fe:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800f300:	4a07      	ldr	r2, [pc, #28]	; (800f320 <k_sys_work_q_init+0x28>)
	k_work_queue_start(&k_sys_work_q,
 800f302:	9300      	str	r3, [sp, #0]
	struct k_work_queue_config cfg = {
 800f304:	9202      	str	r2, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 800f306:	4907      	ldr	r1, [pc, #28]	; (800f324 <k_sys_work_q_init+0x2c>)
 800f308:	4807      	ldr	r0, [pc, #28]	; (800f328 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800f30a:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800f30e:	4623      	mov	r3, r4
 800f310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f314:	f7fe fc22 	bl	800db5c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800f318:	4620      	mov	r0, r4
 800f31a:	b004      	add	sp, #16
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	bf00      	nop
 800f320:	08012b54 	.word	0x08012b54
 800f324:	20004420 	.word	0x20004420
 800f328:	20000cb0 	.word	0x20000cb0

0800f32c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800f32c:	b508      	push	{r3, lr}
 800f32e:	680b      	ldr	r3, [r1, #0]
 800f330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f334:	d302      	bcc.n	800f33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800f336:	480d      	ldr	r0, [pc, #52]	; (800f36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800f338:	f001 fda7 	bl	8010e8a <_ZSt20__throw_length_errorPKc>
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d90b      	bls.n	800f358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f340:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800f344:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800f348:	d206      	bcs.n	800f358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800f34a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f34e:	bf2a      	itet	cs
 800f350:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800f354:	6008      	strcc	r0, [r1, #0]
 800f356:	600b      	strcs	r3, [r1, #0]
 800f358:	6808      	ldr	r0, [r1, #0]
 800f35a:	3001      	adds	r0, #1
 800f35c:	d501      	bpl.n	800f362 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800f35e:	f001 fd8e 	bl	8010e7e <_ZSt17__throw_bad_allocv>
 800f362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f366:	f001 bcc5 	b.w	8010cf4 <_Znwj>
 800f36a:	bf00      	nop
 800f36c:	08012bd0 	.word	0x08012bd0

0800f370 <_ZSt15get_new_handlerv>:
 800f370:	4b02      	ldr	r3, [pc, #8]	; (800f37c <_ZSt15get_new_handlerv+0xc>)
 800f372:	6818      	ldr	r0, [r3, #0]
 800f374:	f3bf 8f5b 	dmb	ish
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	200015e8 	.word	0x200015e8

0800f380 <__assert_func>:
 800f380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f382:	4614      	mov	r4, r2
 800f384:	461a      	mov	r2, r3
 800f386:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <__assert_func+0x2c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4605      	mov	r5, r0
 800f38c:	68d8      	ldr	r0, [r3, #12]
 800f38e:	b14c      	cbz	r4, 800f3a4 <__assert_func+0x24>
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <__assert_func+0x30>)
 800f392:	9100      	str	r1, [sp, #0]
 800f394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f398:	4906      	ldr	r1, [pc, #24]	; (800f3b4 <__assert_func+0x34>)
 800f39a:	462b      	mov	r3, r5
 800f39c:	f000 f80e 	bl	800f3bc <fiprintf>
 800f3a0:	f001 fd83 	bl	8010eaa <abort>
 800f3a4:	4b04      	ldr	r3, [pc, #16]	; (800f3b8 <__assert_func+0x38>)
 800f3a6:	461c      	mov	r4, r3
 800f3a8:	e7f3      	b.n	800f392 <__assert_func+0x12>
 800f3aa:	bf00      	nop
 800f3ac:	2000041c 	.word	0x2000041c
 800f3b0:	08012be8 	.word	0x08012be8
 800f3b4:	08012bf5 	.word	0x08012bf5
 800f3b8:	08012c23 	.word	0x08012c23

0800f3bc <fiprintf>:
 800f3bc:	b40e      	push	{r1, r2, r3}
 800f3be:	b503      	push	{r0, r1, lr}
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	ab03      	add	r3, sp, #12
 800f3c4:	4805      	ldr	r0, [pc, #20]	; (800f3dc <fiprintf+0x20>)
 800f3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ca:	6800      	ldr	r0, [r0, #0]
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	f000 f8bb 	bl	800f548 <_vfiprintf_r>
 800f3d2:	b002      	add	sp, #8
 800f3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d8:	b003      	add	sp, #12
 800f3da:	4770      	bx	lr
 800f3dc:	2000041c 	.word	0x2000041c

0800f3e0 <malloc>:
 800f3e0:	4b02      	ldr	r3, [pc, #8]	; (800f3ec <malloc+0xc>)
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	6818      	ldr	r0, [r3, #0]
 800f3e6:	f000 b855 	b.w	800f494 <_malloc_r>
 800f3ea:	bf00      	nop
 800f3ec:	2000041c 	.word	0x2000041c

0800f3f0 <free>:
 800f3f0:	4b02      	ldr	r3, [pc, #8]	; (800f3fc <free+0xc>)
 800f3f2:	4601      	mov	r1, r0
 800f3f4:	6818      	ldr	r0, [r3, #0]
 800f3f6:	f000 b803 	b.w	800f400 <_free_r>
 800f3fa:	bf00      	nop
 800f3fc:	2000041c 	.word	0x2000041c

0800f400 <_free_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4605      	mov	r5, r0
 800f404:	2900      	cmp	r1, #0
 800f406:	d041      	beq.n	800f48c <_free_r+0x8c>
 800f408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40c:	1f0c      	subs	r4, r1, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	bfb8      	it	lt
 800f412:	18e4      	addlt	r4, r4, r3
 800f414:	f000 ffe4 	bl	80103e0 <__malloc_lock>
 800f418:	4a1d      	ldr	r2, [pc, #116]	; (800f490 <_free_r+0x90>)
 800f41a:	6813      	ldr	r3, [r2, #0]
 800f41c:	b933      	cbnz	r3, 800f42c <_free_r+0x2c>
 800f41e:	6063      	str	r3, [r4, #4]
 800f420:	6014      	str	r4, [r2, #0]
 800f422:	4628      	mov	r0, r5
 800f424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f428:	f000 bfe0 	b.w	80103ec <__malloc_unlock>
 800f42c:	42a3      	cmp	r3, r4
 800f42e:	d908      	bls.n	800f442 <_free_r+0x42>
 800f430:	6820      	ldr	r0, [r4, #0]
 800f432:	1821      	adds	r1, r4, r0
 800f434:	428b      	cmp	r3, r1
 800f436:	bf01      	itttt	eq
 800f438:	6819      	ldreq	r1, [r3, #0]
 800f43a:	685b      	ldreq	r3, [r3, #4]
 800f43c:	1809      	addeq	r1, r1, r0
 800f43e:	6021      	streq	r1, [r4, #0]
 800f440:	e7ed      	b.n	800f41e <_free_r+0x1e>
 800f442:	461a      	mov	r2, r3
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	b10b      	cbz	r3, 800f44c <_free_r+0x4c>
 800f448:	42a3      	cmp	r3, r4
 800f44a:	d9fa      	bls.n	800f442 <_free_r+0x42>
 800f44c:	6811      	ldr	r1, [r2, #0]
 800f44e:	1850      	adds	r0, r2, r1
 800f450:	42a0      	cmp	r0, r4
 800f452:	d10b      	bne.n	800f46c <_free_r+0x6c>
 800f454:	6820      	ldr	r0, [r4, #0]
 800f456:	4401      	add	r1, r0
 800f458:	1850      	adds	r0, r2, r1
 800f45a:	4283      	cmp	r3, r0
 800f45c:	6011      	str	r1, [r2, #0]
 800f45e:	d1e0      	bne.n	800f422 <_free_r+0x22>
 800f460:	6818      	ldr	r0, [r3, #0]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	6053      	str	r3, [r2, #4]
 800f466:	4401      	add	r1, r0
 800f468:	6011      	str	r1, [r2, #0]
 800f46a:	e7da      	b.n	800f422 <_free_r+0x22>
 800f46c:	d902      	bls.n	800f474 <_free_r+0x74>
 800f46e:	230c      	movs	r3, #12
 800f470:	602b      	str	r3, [r5, #0]
 800f472:	e7d6      	b.n	800f422 <_free_r+0x22>
 800f474:	6820      	ldr	r0, [r4, #0]
 800f476:	1821      	adds	r1, r4, r0
 800f478:	428b      	cmp	r3, r1
 800f47a:	bf04      	itt	eq
 800f47c:	6819      	ldreq	r1, [r3, #0]
 800f47e:	685b      	ldreq	r3, [r3, #4]
 800f480:	6063      	str	r3, [r4, #4]
 800f482:	bf04      	itt	eq
 800f484:	1809      	addeq	r1, r1, r0
 800f486:	6021      	streq	r1, [r4, #0]
 800f488:	6054      	str	r4, [r2, #4]
 800f48a:	e7ca      	b.n	800f422 <_free_r+0x22>
 800f48c:	bd38      	pop	{r3, r4, r5, pc}
 800f48e:	bf00      	nop
 800f490:	200015ec 	.word	0x200015ec

0800f494 <_malloc_r>:
 800f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f496:	1ccd      	adds	r5, r1, #3
 800f498:	f025 0503 	bic.w	r5, r5, #3
 800f49c:	3508      	adds	r5, #8
 800f49e:	2d0c      	cmp	r5, #12
 800f4a0:	bf38      	it	cc
 800f4a2:	250c      	movcc	r5, #12
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	db01      	blt.n	800f4ae <_malloc_r+0x1a>
 800f4aa:	42a9      	cmp	r1, r5
 800f4ac:	d903      	bls.n	800f4b6 <_malloc_r+0x22>
 800f4ae:	230c      	movs	r3, #12
 800f4b0:	6033      	str	r3, [r6, #0]
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b6:	f000 ff93 	bl	80103e0 <__malloc_lock>
 800f4ba:	4921      	ldr	r1, [pc, #132]	; (800f540 <_malloc_r+0xac>)
 800f4bc:	680a      	ldr	r2, [r1, #0]
 800f4be:	4614      	mov	r4, r2
 800f4c0:	b99c      	cbnz	r4, 800f4ea <_malloc_r+0x56>
 800f4c2:	4f20      	ldr	r7, [pc, #128]	; (800f544 <_malloc_r+0xb0>)
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	b923      	cbnz	r3, 800f4d2 <_malloc_r+0x3e>
 800f4c8:	4621      	mov	r1, r4
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 fcbc 	bl	800fe48 <_sbrk_r>
 800f4d0:	6038      	str	r0, [r7, #0]
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	4630      	mov	r0, r6
 800f4d6:	f000 fcb7 	bl	800fe48 <_sbrk_r>
 800f4da:	1c43      	adds	r3, r0, #1
 800f4dc:	d123      	bne.n	800f526 <_malloc_r+0x92>
 800f4de:	230c      	movs	r3, #12
 800f4e0:	6033      	str	r3, [r6, #0]
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f000 ff82 	bl	80103ec <__malloc_unlock>
 800f4e8:	e7e3      	b.n	800f4b2 <_malloc_r+0x1e>
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	1b5b      	subs	r3, r3, r5
 800f4ee:	d417      	bmi.n	800f520 <_malloc_r+0x8c>
 800f4f0:	2b0b      	cmp	r3, #11
 800f4f2:	d903      	bls.n	800f4fc <_malloc_r+0x68>
 800f4f4:	6023      	str	r3, [r4, #0]
 800f4f6:	441c      	add	r4, r3
 800f4f8:	6025      	str	r5, [r4, #0]
 800f4fa:	e004      	b.n	800f506 <_malloc_r+0x72>
 800f4fc:	6863      	ldr	r3, [r4, #4]
 800f4fe:	42a2      	cmp	r2, r4
 800f500:	bf0c      	ite	eq
 800f502:	600b      	streq	r3, [r1, #0]
 800f504:	6053      	strne	r3, [r2, #4]
 800f506:	4630      	mov	r0, r6
 800f508:	f000 ff70 	bl	80103ec <__malloc_unlock>
 800f50c:	f104 000b 	add.w	r0, r4, #11
 800f510:	1d23      	adds	r3, r4, #4
 800f512:	f020 0007 	bic.w	r0, r0, #7
 800f516:	1ac2      	subs	r2, r0, r3
 800f518:	d0cc      	beq.n	800f4b4 <_malloc_r+0x20>
 800f51a:	1a1b      	subs	r3, r3, r0
 800f51c:	50a3      	str	r3, [r4, r2]
 800f51e:	e7c9      	b.n	800f4b4 <_malloc_r+0x20>
 800f520:	4622      	mov	r2, r4
 800f522:	6864      	ldr	r4, [r4, #4]
 800f524:	e7cc      	b.n	800f4c0 <_malloc_r+0x2c>
 800f526:	1cc4      	adds	r4, r0, #3
 800f528:	f024 0403 	bic.w	r4, r4, #3
 800f52c:	42a0      	cmp	r0, r4
 800f52e:	d0e3      	beq.n	800f4f8 <_malloc_r+0x64>
 800f530:	1a21      	subs	r1, r4, r0
 800f532:	4630      	mov	r0, r6
 800f534:	f000 fc88 	bl	800fe48 <_sbrk_r>
 800f538:	3001      	adds	r0, #1
 800f53a:	d1dd      	bne.n	800f4f8 <_malloc_r+0x64>
 800f53c:	e7cf      	b.n	800f4de <_malloc_r+0x4a>
 800f53e:	bf00      	nop
 800f540:	200015ec 	.word	0x200015ec
 800f544:	200015f0 	.word	0x200015f0

0800f548 <_vfiprintf_r>:
 800f548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54c:	460d      	mov	r5, r1
 800f54e:	b09d      	sub	sp, #116	; 0x74
 800f550:	4614      	mov	r4, r2
 800f552:	4698      	mov	r8, r3
 800f554:	4606      	mov	r6, r0
 800f556:	b118      	cbz	r0, 800f560 <_vfiprintf_r+0x18>
 800f558:	6983      	ldr	r3, [r0, #24]
 800f55a:	b90b      	cbnz	r3, 800f560 <_vfiprintf_r+0x18>
 800f55c:	f000 fe7e 	bl	801025c <__sinit>
 800f560:	4b89      	ldr	r3, [pc, #548]	; (800f788 <_vfiprintf_r+0x240>)
 800f562:	429d      	cmp	r5, r3
 800f564:	d11b      	bne.n	800f59e <_vfiprintf_r+0x56>
 800f566:	6875      	ldr	r5, [r6, #4]
 800f568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f56a:	07d9      	lsls	r1, r3, #31
 800f56c:	d405      	bmi.n	800f57a <_vfiprintf_r+0x32>
 800f56e:	89ab      	ldrh	r3, [r5, #12]
 800f570:	059a      	lsls	r2, r3, #22
 800f572:	d402      	bmi.n	800f57a <_vfiprintf_r+0x32>
 800f574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f576:	f7f4 f8ad 	bl	80036d4 <__retarget_lock_acquire_recursive>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	071b      	lsls	r3, r3, #28
 800f57e:	d501      	bpl.n	800f584 <_vfiprintf_r+0x3c>
 800f580:	692b      	ldr	r3, [r5, #16]
 800f582:	b9eb      	cbnz	r3, 800f5c0 <_vfiprintf_r+0x78>
 800f584:	4629      	mov	r1, r5
 800f586:	4630      	mov	r0, r6
 800f588:	f000 fcfa 	bl	800ff80 <__swsetup_r>
 800f58c:	b1c0      	cbz	r0, 800f5c0 <_vfiprintf_r+0x78>
 800f58e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f590:	07dc      	lsls	r4, r3, #31
 800f592:	d50e      	bpl.n	800f5b2 <_vfiprintf_r+0x6a>
 800f594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f598:	b01d      	add	sp, #116	; 0x74
 800f59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59e:	4b7b      	ldr	r3, [pc, #492]	; (800f78c <_vfiprintf_r+0x244>)
 800f5a0:	429d      	cmp	r5, r3
 800f5a2:	d101      	bne.n	800f5a8 <_vfiprintf_r+0x60>
 800f5a4:	68b5      	ldr	r5, [r6, #8]
 800f5a6:	e7df      	b.n	800f568 <_vfiprintf_r+0x20>
 800f5a8:	4b79      	ldr	r3, [pc, #484]	; (800f790 <_vfiprintf_r+0x248>)
 800f5aa:	429d      	cmp	r5, r3
 800f5ac:	bf08      	it	eq
 800f5ae:	68f5      	ldreq	r5, [r6, #12]
 800f5b0:	e7da      	b.n	800f568 <_vfiprintf_r+0x20>
 800f5b2:	89ab      	ldrh	r3, [r5, #12]
 800f5b4:	0598      	lsls	r0, r3, #22
 800f5b6:	d4ed      	bmi.n	800f594 <_vfiprintf_r+0x4c>
 800f5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ba:	f7f4 f891 	bl	80036e0 <__retarget_lock_release_recursive>
 800f5be:	e7e9      	b.n	800f594 <_vfiprintf_r+0x4c>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5c4:	2320      	movs	r3, #32
 800f5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5ce:	2330      	movs	r3, #48	; 0x30
 800f5d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f794 <_vfiprintf_r+0x24c>
 800f5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5d8:	f04f 0901 	mov.w	r9, #1
 800f5dc:	4623      	mov	r3, r4
 800f5de:	469a      	mov	sl, r3
 800f5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5e4:	b10a      	cbz	r2, 800f5ea <_vfiprintf_r+0xa2>
 800f5e6:	2a25      	cmp	r2, #37	; 0x25
 800f5e8:	d1f9      	bne.n	800f5de <_vfiprintf_r+0x96>
 800f5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f5ee:	d00b      	beq.n	800f608 <_vfiprintf_r+0xc0>
 800f5f0:	465b      	mov	r3, fp
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	4629      	mov	r1, r5
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f001 fca3 	bl	8010f42 <__sfputs_r>
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	f000 80aa 	beq.w	800f756 <_vfiprintf_r+0x20e>
 800f602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f604:	445a      	add	r2, fp
 800f606:	9209      	str	r2, [sp, #36]	; 0x24
 800f608:	f89a 3000 	ldrb.w	r3, [sl]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 80a2 	beq.w	800f756 <_vfiprintf_r+0x20e>
 800f612:	2300      	movs	r3, #0
 800f614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f61c:	f10a 0a01 	add.w	sl, sl, #1
 800f620:	9304      	str	r3, [sp, #16]
 800f622:	9307      	str	r3, [sp, #28]
 800f624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f628:	931a      	str	r3, [sp, #104]	; 0x68
 800f62a:	4654      	mov	r4, sl
 800f62c:	2205      	movs	r2, #5
 800f62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f632:	4858      	ldr	r0, [pc, #352]	; (800f794 <_vfiprintf_r+0x24c>)
 800f634:	f7f0 fdb4 	bl	80001a0 <memchr>
 800f638:	9a04      	ldr	r2, [sp, #16]
 800f63a:	b9d8      	cbnz	r0, 800f674 <_vfiprintf_r+0x12c>
 800f63c:	06d1      	lsls	r1, r2, #27
 800f63e:	bf44      	itt	mi
 800f640:	2320      	movmi	r3, #32
 800f642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f646:	0713      	lsls	r3, r2, #28
 800f648:	bf44      	itt	mi
 800f64a:	232b      	movmi	r3, #43	; 0x2b
 800f64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f650:	f89a 3000 	ldrb.w	r3, [sl]
 800f654:	2b2a      	cmp	r3, #42	; 0x2a
 800f656:	d015      	beq.n	800f684 <_vfiprintf_r+0x13c>
 800f658:	9a07      	ldr	r2, [sp, #28]
 800f65a:	4654      	mov	r4, sl
 800f65c:	2000      	movs	r0, #0
 800f65e:	f04f 0c0a 	mov.w	ip, #10
 800f662:	4621      	mov	r1, r4
 800f664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f668:	3b30      	subs	r3, #48	; 0x30
 800f66a:	2b09      	cmp	r3, #9
 800f66c:	d94e      	bls.n	800f70c <_vfiprintf_r+0x1c4>
 800f66e:	b1b0      	cbz	r0, 800f69e <_vfiprintf_r+0x156>
 800f670:	9207      	str	r2, [sp, #28]
 800f672:	e014      	b.n	800f69e <_vfiprintf_r+0x156>
 800f674:	eba0 0308 	sub.w	r3, r0, r8
 800f678:	fa09 f303 	lsl.w	r3, r9, r3
 800f67c:	4313      	orrs	r3, r2
 800f67e:	9304      	str	r3, [sp, #16]
 800f680:	46a2      	mov	sl, r4
 800f682:	e7d2      	b.n	800f62a <_vfiprintf_r+0xe2>
 800f684:	9b03      	ldr	r3, [sp, #12]
 800f686:	1d19      	adds	r1, r3, #4
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	9103      	str	r1, [sp, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	bfbb      	ittet	lt
 800f690:	425b      	neglt	r3, r3
 800f692:	f042 0202 	orrlt.w	r2, r2, #2
 800f696:	9307      	strge	r3, [sp, #28]
 800f698:	9307      	strlt	r3, [sp, #28]
 800f69a:	bfb8      	it	lt
 800f69c:	9204      	strlt	r2, [sp, #16]
 800f69e:	7823      	ldrb	r3, [r4, #0]
 800f6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f6a2:	d10c      	bne.n	800f6be <_vfiprintf_r+0x176>
 800f6a4:	7863      	ldrb	r3, [r4, #1]
 800f6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a8:	d135      	bne.n	800f716 <_vfiprintf_r+0x1ce>
 800f6aa:	9b03      	ldr	r3, [sp, #12]
 800f6ac:	1d1a      	adds	r2, r3, #4
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	9203      	str	r2, [sp, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bfb8      	it	lt
 800f6b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f6ba:	3402      	adds	r4, #2
 800f6bc:	9305      	str	r3, [sp, #20]
 800f6be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f798 <_vfiprintf_r+0x250>
 800f6c2:	7821      	ldrb	r1, [r4, #0]
 800f6c4:	2203      	movs	r2, #3
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	f7f0 fd6a 	bl	80001a0 <memchr>
 800f6cc:	b140      	cbz	r0, 800f6e0 <_vfiprintf_r+0x198>
 800f6ce:	2340      	movs	r3, #64	; 0x40
 800f6d0:	eba0 000a 	sub.w	r0, r0, sl
 800f6d4:	fa03 f000 	lsl.w	r0, r3, r0
 800f6d8:	9b04      	ldr	r3, [sp, #16]
 800f6da:	4303      	orrs	r3, r0
 800f6dc:	3401      	adds	r4, #1
 800f6de:	9304      	str	r3, [sp, #16]
 800f6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e4:	482d      	ldr	r0, [pc, #180]	; (800f79c <_vfiprintf_r+0x254>)
 800f6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6ea:	2206      	movs	r2, #6
 800f6ec:	f7f0 fd58 	bl	80001a0 <memchr>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d03f      	beq.n	800f774 <_vfiprintf_r+0x22c>
 800f6f4:	4b2a      	ldr	r3, [pc, #168]	; (800f7a0 <_vfiprintf_r+0x258>)
 800f6f6:	bb1b      	cbnz	r3, 800f740 <_vfiprintf_r+0x1f8>
 800f6f8:	9b03      	ldr	r3, [sp, #12]
 800f6fa:	3307      	adds	r3, #7
 800f6fc:	f023 0307 	bic.w	r3, r3, #7
 800f700:	3308      	adds	r3, #8
 800f702:	9303      	str	r3, [sp, #12]
 800f704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f706:	443b      	add	r3, r7
 800f708:	9309      	str	r3, [sp, #36]	; 0x24
 800f70a:	e767      	b.n	800f5dc <_vfiprintf_r+0x94>
 800f70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f710:	460c      	mov	r4, r1
 800f712:	2001      	movs	r0, #1
 800f714:	e7a5      	b.n	800f662 <_vfiprintf_r+0x11a>
 800f716:	2300      	movs	r3, #0
 800f718:	3401      	adds	r4, #1
 800f71a:	9305      	str	r3, [sp, #20]
 800f71c:	4619      	mov	r1, r3
 800f71e:	f04f 0c0a 	mov.w	ip, #10
 800f722:	4620      	mov	r0, r4
 800f724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f728:	3a30      	subs	r2, #48	; 0x30
 800f72a:	2a09      	cmp	r2, #9
 800f72c:	d903      	bls.n	800f736 <_vfiprintf_r+0x1ee>
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0c5      	beq.n	800f6be <_vfiprintf_r+0x176>
 800f732:	9105      	str	r1, [sp, #20]
 800f734:	e7c3      	b.n	800f6be <_vfiprintf_r+0x176>
 800f736:	fb0c 2101 	mla	r1, ip, r1, r2
 800f73a:	4604      	mov	r4, r0
 800f73c:	2301      	movs	r3, #1
 800f73e:	e7f0      	b.n	800f722 <_vfiprintf_r+0x1da>
 800f740:	ab03      	add	r3, sp, #12
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	462a      	mov	r2, r5
 800f746:	4b17      	ldr	r3, [pc, #92]	; (800f7a4 <_vfiprintf_r+0x25c>)
 800f748:	a904      	add	r1, sp, #16
 800f74a:	4630      	mov	r0, r6
 800f74c:	f000 f82c 	bl	800f7a8 <_printf_float>
 800f750:	4607      	mov	r7, r0
 800f752:	1c78      	adds	r0, r7, #1
 800f754:	d1d6      	bne.n	800f704 <_vfiprintf_r+0x1bc>
 800f756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f758:	07d9      	lsls	r1, r3, #31
 800f75a:	d405      	bmi.n	800f768 <_vfiprintf_r+0x220>
 800f75c:	89ab      	ldrh	r3, [r5, #12]
 800f75e:	059a      	lsls	r2, r3, #22
 800f760:	d402      	bmi.n	800f768 <_vfiprintf_r+0x220>
 800f762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f764:	f7f3 ffbc 	bl	80036e0 <__retarget_lock_release_recursive>
 800f768:	89ab      	ldrh	r3, [r5, #12]
 800f76a:	065b      	lsls	r3, r3, #25
 800f76c:	f53f af12 	bmi.w	800f594 <_vfiprintf_r+0x4c>
 800f770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f772:	e711      	b.n	800f598 <_vfiprintf_r+0x50>
 800f774:	ab03      	add	r3, sp, #12
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	462a      	mov	r2, r5
 800f77a:	4b0a      	ldr	r3, [pc, #40]	; (800f7a4 <_vfiprintf_r+0x25c>)
 800f77c:	a904      	add	r1, sp, #16
 800f77e:	4630      	mov	r0, r6
 800f780:	f000 fa3c 	bl	800fbfc <_printf_i>
 800f784:	e7e4      	b.n	800f750 <_vfiprintf_r+0x208>
 800f786:	bf00      	nop
 800f788:	08012b84 	.word	0x08012b84
 800f78c:	08012ba4 	.word	0x08012ba4
 800f790:	08012b64 	.word	0x08012b64
 800f794:	08012d25 	.word	0x08012d25
 800f798:	08012d2b 	.word	0x08012d2b
 800f79c:	08012d2f 	.word	0x08012d2f
 800f7a0:	0800f7a9 	.word	0x0800f7a9
 800f7a4:	08010f43 	.word	0x08010f43

0800f7a8 <_printf_float>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	b091      	sub	sp, #68	; 0x44
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f7b4:	4616      	mov	r6, r2
 800f7b6:	461f      	mov	r7, r3
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	f000 fdcd 	bl	8010358 <_localeconv_r>
 800f7be:	6803      	ldr	r3, [r0, #0]
 800f7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f1 fb9e 	bl	8000f04 <strlen>
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	930e      	str	r3, [sp, #56]	; 0x38
 800f7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f7d0:	900a      	str	r0, [sp, #40]	; 0x28
 800f7d2:	3307      	adds	r3, #7
 800f7d4:	f023 0307 	bic.w	r3, r3, #7
 800f7d8:	f103 0208 	add.w	r2, r3, #8
 800f7dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f7e0:	f8d4 b000 	ldr.w	fp, [r4]
 800f7e4:	f8c8 2000 	str.w	r2, [r8]
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f7f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800f7f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800f7f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7fc:	4b9c      	ldr	r3, [pc, #624]	; (800fa70 <_printf_float+0x2c8>)
 800f7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f802:	4640      	mov	r0, r8
 800f804:	f7f1 f9f2 	bl	8000bec <__aeabi_dcmpun>
 800f808:	bb70      	cbnz	r0, 800f868 <_printf_float+0xc0>
 800f80a:	4b99      	ldr	r3, [pc, #612]	; (800fa70 <_printf_float+0x2c8>)
 800f80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f812:	4640      	mov	r0, r8
 800f814:	f7f1 f94c 	bl	8000ab0 <__aeabi_dcmple>
 800f818:	bb30      	cbnz	r0, 800f868 <_printf_float+0xc0>
 800f81a:	2200      	movs	r2, #0
 800f81c:	2300      	movs	r3, #0
 800f81e:	4640      	mov	r0, r8
 800f820:	4651      	mov	r1, sl
 800f822:	f7f1 f93b 	bl	8000a9c <__aeabi_dcmplt>
 800f826:	b110      	cbz	r0, 800f82e <_printf_float+0x86>
 800f828:	232d      	movs	r3, #45	; 0x2d
 800f82a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f82e:	4b91      	ldr	r3, [pc, #580]	; (800fa74 <_printf_float+0x2cc>)
 800f830:	4891      	ldr	r0, [pc, #580]	; (800fa78 <_printf_float+0x2d0>)
 800f832:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f836:	bf94      	ite	ls
 800f838:	4698      	movls	r8, r3
 800f83a:	4680      	movhi	r8, r0
 800f83c:	2303      	movs	r3, #3
 800f83e:	6123      	str	r3, [r4, #16]
 800f840:	f02b 0304 	bic.w	r3, fp, #4
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	f04f 0a00 	mov.w	sl, #0
 800f84a:	9700      	str	r7, [sp, #0]
 800f84c:	4633      	mov	r3, r6
 800f84e:	aa0f      	add	r2, sp, #60	; 0x3c
 800f850:	4621      	mov	r1, r4
 800f852:	4628      	mov	r0, r5
 800f854:	f001 fc25 	bl	80110a2 <_printf_common>
 800f858:	3001      	adds	r0, #1
 800f85a:	f040 808f 	bne.w	800f97c <_printf_float+0x1d4>
 800f85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f862:	b011      	add	sp, #68	; 0x44
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f868:	4642      	mov	r2, r8
 800f86a:	4653      	mov	r3, sl
 800f86c:	4640      	mov	r0, r8
 800f86e:	4651      	mov	r1, sl
 800f870:	f7f1 f9bc 	bl	8000bec <__aeabi_dcmpun>
 800f874:	b140      	cbz	r0, 800f888 <_printf_float+0xe0>
 800f876:	f1ba 0f00 	cmp.w	sl, #0
 800f87a:	bfbc      	itt	lt
 800f87c:	232d      	movlt	r3, #45	; 0x2d
 800f87e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f882:	487e      	ldr	r0, [pc, #504]	; (800fa7c <_printf_float+0x2d4>)
 800f884:	4b7e      	ldr	r3, [pc, #504]	; (800fa80 <_printf_float+0x2d8>)
 800f886:	e7d4      	b.n	800f832 <_printf_float+0x8a>
 800f888:	6863      	ldr	r3, [r4, #4]
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f890:	d142      	bne.n	800f918 <_printf_float+0x170>
 800f892:	2306      	movs	r3, #6
 800f894:	6063      	str	r3, [r4, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	9206      	str	r2, [sp, #24]
 800f89a:	aa0e      	add	r2, sp, #56	; 0x38
 800f89c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800f8a0:	aa0d      	add	r2, sp, #52	; 0x34
 800f8a2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800f8a6:	9203      	str	r2, [sp, #12]
 800f8a8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f8ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	4642      	mov	r2, r8
 800f8b8:	4653      	mov	r3, sl
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	910b      	str	r1, [sp, #44]	; 0x2c
 800f8be:	f001 fb52 	bl	8010f66 <__cvt>
 800f8c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8c4:	2947      	cmp	r1, #71	; 0x47
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f8ca:	d108      	bne.n	800f8de <_printf_float+0x136>
 800f8cc:	1cc8      	adds	r0, r1, #3
 800f8ce:	db02      	blt.n	800f8d6 <_printf_float+0x12e>
 800f8d0:	6863      	ldr	r3, [r4, #4]
 800f8d2:	4299      	cmp	r1, r3
 800f8d4:	dd40      	ble.n	800f958 <_printf_float+0x1b0>
 800f8d6:	f1a9 0902 	sub.w	r9, r9, #2
 800f8da:	fa5f f989 	uxtb.w	r9, r9
 800f8de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f8e2:	d81f      	bhi.n	800f924 <_printf_float+0x17c>
 800f8e4:	3901      	subs	r1, #1
 800f8e6:	464a      	mov	r2, r9
 800f8e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f8ec:	910d      	str	r1, [sp, #52]	; 0x34
 800f8ee:	f001 fb9a 	bl	8011026 <__exponent>
 800f8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8f4:	1813      	adds	r3, r2, r0
 800f8f6:	2a01      	cmp	r2, #1
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	6123      	str	r3, [r4, #16]
 800f8fc:	dc02      	bgt.n	800f904 <_printf_float+0x15c>
 800f8fe:	6822      	ldr	r2, [r4, #0]
 800f900:	07d2      	lsls	r2, r2, #31
 800f902:	d501      	bpl.n	800f908 <_printf_float+0x160>
 800f904:	3301      	adds	r3, #1
 800f906:	6123      	str	r3, [r4, #16]
 800f908:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d09c      	beq.n	800f84a <_printf_float+0xa2>
 800f910:	232d      	movs	r3, #45	; 0x2d
 800f912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f916:	e798      	b.n	800f84a <_printf_float+0xa2>
 800f918:	2947      	cmp	r1, #71	; 0x47
 800f91a:	d1bc      	bne.n	800f896 <_printf_float+0xee>
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1ba      	bne.n	800f896 <_printf_float+0xee>
 800f920:	2301      	movs	r3, #1
 800f922:	e7b7      	b.n	800f894 <_printf_float+0xec>
 800f924:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f928:	d118      	bne.n	800f95c <_printf_float+0x1b4>
 800f92a:	2900      	cmp	r1, #0
 800f92c:	6863      	ldr	r3, [r4, #4]
 800f92e:	dd0b      	ble.n	800f948 <_printf_float+0x1a0>
 800f930:	6121      	str	r1, [r4, #16]
 800f932:	b913      	cbnz	r3, 800f93a <_printf_float+0x192>
 800f934:	6822      	ldr	r2, [r4, #0]
 800f936:	07d0      	lsls	r0, r2, #31
 800f938:	d502      	bpl.n	800f940 <_printf_float+0x198>
 800f93a:	3301      	adds	r3, #1
 800f93c:	440b      	add	r3, r1
 800f93e:	6123      	str	r3, [r4, #16]
 800f940:	65a1      	str	r1, [r4, #88]	; 0x58
 800f942:	f04f 0a00 	mov.w	sl, #0
 800f946:	e7df      	b.n	800f908 <_printf_float+0x160>
 800f948:	b913      	cbnz	r3, 800f950 <_printf_float+0x1a8>
 800f94a:	6822      	ldr	r2, [r4, #0]
 800f94c:	07d2      	lsls	r2, r2, #31
 800f94e:	d501      	bpl.n	800f954 <_printf_float+0x1ac>
 800f950:	3302      	adds	r3, #2
 800f952:	e7f4      	b.n	800f93e <_printf_float+0x196>
 800f954:	2301      	movs	r3, #1
 800f956:	e7f2      	b.n	800f93e <_printf_float+0x196>
 800f958:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f95e:	4299      	cmp	r1, r3
 800f960:	db05      	blt.n	800f96e <_printf_float+0x1c6>
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	6121      	str	r1, [r4, #16]
 800f966:	07d8      	lsls	r0, r3, #31
 800f968:	d5ea      	bpl.n	800f940 <_printf_float+0x198>
 800f96a:	1c4b      	adds	r3, r1, #1
 800f96c:	e7e7      	b.n	800f93e <_printf_float+0x196>
 800f96e:	2900      	cmp	r1, #0
 800f970:	bfd4      	ite	le
 800f972:	f1c1 0202 	rsble	r2, r1, #2
 800f976:	2201      	movgt	r2, #1
 800f978:	4413      	add	r3, r2
 800f97a:	e7e0      	b.n	800f93e <_printf_float+0x196>
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	055a      	lsls	r2, r3, #21
 800f980:	d407      	bmi.n	800f992 <_printf_float+0x1ea>
 800f982:	6923      	ldr	r3, [r4, #16]
 800f984:	4642      	mov	r2, r8
 800f986:	4631      	mov	r1, r6
 800f988:	4628      	mov	r0, r5
 800f98a:	47b8      	blx	r7
 800f98c:	3001      	adds	r0, #1
 800f98e:	d12b      	bne.n	800f9e8 <_printf_float+0x240>
 800f990:	e765      	b.n	800f85e <_printf_float+0xb6>
 800f992:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f996:	f240 80dc 	bls.w	800fb52 <_printf_float+0x3aa>
 800f99a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f99e:	2200      	movs	r2, #0
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f7f1 f871 	bl	8000a88 <__aeabi_dcmpeq>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d033      	beq.n	800fa12 <_printf_float+0x26a>
 800f9aa:	4a36      	ldr	r2, [pc, #216]	; (800fa84 <_printf_float+0x2dc>)
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	4631      	mov	r1, r6
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	47b8      	blx	r7
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	f43f af52 	beq.w	800f85e <_printf_float+0xb6>
 800f9ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	db02      	blt.n	800f9c8 <_printf_float+0x220>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	07d8      	lsls	r0, r3, #31
 800f9c6:	d50f      	bpl.n	800f9e8 <_printf_float+0x240>
 800f9c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	47b8      	blx	r7
 800f9d2:	3001      	adds	r0, #1
 800f9d4:	f43f af43 	beq.w	800f85e <_printf_float+0xb6>
 800f9d8:	f04f 0800 	mov.w	r8, #0
 800f9dc:	f104 091a 	add.w	r9, r4, #26
 800f9e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	4543      	cmp	r3, r8
 800f9e6:	dc09      	bgt.n	800f9fc <_printf_float+0x254>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	079b      	lsls	r3, r3, #30
 800f9ec:	f100 8101 	bmi.w	800fbf2 <_printf_float+0x44a>
 800f9f0:	68e0      	ldr	r0, [r4, #12]
 800f9f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9f4:	4298      	cmp	r0, r3
 800f9f6:	bfb8      	it	lt
 800f9f8:	4618      	movlt	r0, r3
 800f9fa:	e732      	b.n	800f862 <_printf_float+0xba>
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	464a      	mov	r2, r9
 800fa00:	4631      	mov	r1, r6
 800fa02:	4628      	mov	r0, r5
 800fa04:	47b8      	blx	r7
 800fa06:	3001      	adds	r0, #1
 800fa08:	f43f af29 	beq.w	800f85e <_printf_float+0xb6>
 800fa0c:	f108 0801 	add.w	r8, r8, #1
 800fa10:	e7e6      	b.n	800f9e0 <_printf_float+0x238>
 800fa12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	dc37      	bgt.n	800fa88 <_printf_float+0x2e0>
 800fa18:	4a1a      	ldr	r2, [pc, #104]	; (800fa84 <_printf_float+0x2dc>)
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	4628      	mov	r0, r5
 800fa20:	47b8      	blx	r7
 800fa22:	3001      	adds	r0, #1
 800fa24:	f43f af1b 	beq.w	800f85e <_printf_float+0xb6>
 800fa28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	d102      	bne.n	800fa36 <_printf_float+0x28e>
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	07d9      	lsls	r1, r3, #31
 800fa34:	d5d8      	bpl.n	800f9e8 <_printf_float+0x240>
 800fa36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	47b8      	blx	r7
 800fa40:	3001      	adds	r0, #1
 800fa42:	f43f af0c 	beq.w	800f85e <_printf_float+0xb6>
 800fa46:	f04f 0900 	mov.w	r9, #0
 800fa4a:	f104 0a1a 	add.w	sl, r4, #26
 800fa4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa50:	425b      	negs	r3, r3
 800fa52:	454b      	cmp	r3, r9
 800fa54:	dc01      	bgt.n	800fa5a <_printf_float+0x2b2>
 800fa56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa58:	e794      	b.n	800f984 <_printf_float+0x1dc>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	4652      	mov	r2, sl
 800fa5e:	4631      	mov	r1, r6
 800fa60:	4628      	mov	r0, r5
 800fa62:	47b8      	blx	r7
 800fa64:	3001      	adds	r0, #1
 800fa66:	f43f aefa 	beq.w	800f85e <_printf_float+0xb6>
 800fa6a:	f109 0901 	add.w	r9, r9, #1
 800fa6e:	e7ee      	b.n	800fa4e <_printf_float+0x2a6>
 800fa70:	7fefffff 	.word	0x7fefffff
 800fa74:	08012d36 	.word	0x08012d36
 800fa78:	08012d3a 	.word	0x08012d3a
 800fa7c:	08012d42 	.word	0x08012d42
 800fa80:	08012d3e 	.word	0x08012d3e
 800fa84:	08012d46 	.word	0x08012d46
 800fa88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	bfa8      	it	ge
 800fa90:	461a      	movge	r2, r3
 800fa92:	2a00      	cmp	r2, #0
 800fa94:	4691      	mov	r9, r2
 800fa96:	dc37      	bgt.n	800fb08 <_printf_float+0x360>
 800fa98:	f04f 0b00 	mov.w	fp, #0
 800fa9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800faa0:	f104 021a 	add.w	r2, r4, #26
 800faa4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800faa8:	ebaa 0309 	sub.w	r3, sl, r9
 800faac:	455b      	cmp	r3, fp
 800faae:	dc33      	bgt.n	800fb18 <_printf_float+0x370>
 800fab0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fab4:	429a      	cmp	r2, r3
 800fab6:	db3b      	blt.n	800fb30 <_printf_float+0x388>
 800fab8:	6823      	ldr	r3, [r4, #0]
 800faba:	07da      	lsls	r2, r3, #31
 800fabc:	d438      	bmi.n	800fb30 <_printf_float+0x388>
 800fabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fac2:	eba3 020a 	sub.w	r2, r3, sl
 800fac6:	eba3 0901 	sub.w	r9, r3, r1
 800faca:	4591      	cmp	r9, r2
 800facc:	bfa8      	it	ge
 800face:	4691      	movge	r9, r2
 800fad0:	f1b9 0f00 	cmp.w	r9, #0
 800fad4:	dc34      	bgt.n	800fb40 <_printf_float+0x398>
 800fad6:	f04f 0800 	mov.w	r8, #0
 800fada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fade:	f104 0a1a 	add.w	sl, r4, #26
 800fae2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800fae6:	1a9b      	subs	r3, r3, r2
 800fae8:	eba3 0309 	sub.w	r3, r3, r9
 800faec:	4543      	cmp	r3, r8
 800faee:	f77f af7b 	ble.w	800f9e8 <_printf_float+0x240>
 800faf2:	2301      	movs	r3, #1
 800faf4:	4652      	mov	r2, sl
 800faf6:	4631      	mov	r1, r6
 800faf8:	4628      	mov	r0, r5
 800fafa:	47b8      	blx	r7
 800fafc:	3001      	adds	r0, #1
 800fafe:	f43f aeae 	beq.w	800f85e <_printf_float+0xb6>
 800fb02:	f108 0801 	add.w	r8, r8, #1
 800fb06:	e7ec      	b.n	800fae2 <_printf_float+0x33a>
 800fb08:	4613      	mov	r3, r2
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	4642      	mov	r2, r8
 800fb0e:	4628      	mov	r0, r5
 800fb10:	47b8      	blx	r7
 800fb12:	3001      	adds	r0, #1
 800fb14:	d1c0      	bne.n	800fa98 <_printf_float+0x2f0>
 800fb16:	e6a2      	b.n	800f85e <_printf_float+0xb6>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	920b      	str	r2, [sp, #44]	; 0x2c
 800fb20:	47b8      	blx	r7
 800fb22:	3001      	adds	r0, #1
 800fb24:	f43f ae9b 	beq.w	800f85e <_printf_float+0xb6>
 800fb28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb2a:	f10b 0b01 	add.w	fp, fp, #1
 800fb2e:	e7b9      	b.n	800faa4 <_printf_float+0x2fc>
 800fb30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb34:	4631      	mov	r1, r6
 800fb36:	4628      	mov	r0, r5
 800fb38:	47b8      	blx	r7
 800fb3a:	3001      	adds	r0, #1
 800fb3c:	d1bf      	bne.n	800fabe <_printf_float+0x316>
 800fb3e:	e68e      	b.n	800f85e <_printf_float+0xb6>
 800fb40:	464b      	mov	r3, r9
 800fb42:	eb08 020a 	add.w	r2, r8, sl
 800fb46:	4631      	mov	r1, r6
 800fb48:	4628      	mov	r0, r5
 800fb4a:	47b8      	blx	r7
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d1c2      	bne.n	800fad6 <_printf_float+0x32e>
 800fb50:	e685      	b.n	800f85e <_printf_float+0xb6>
 800fb52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb54:	2a01      	cmp	r2, #1
 800fb56:	dc01      	bgt.n	800fb5c <_printf_float+0x3b4>
 800fb58:	07db      	lsls	r3, r3, #31
 800fb5a:	d537      	bpl.n	800fbcc <_printf_float+0x424>
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	4642      	mov	r2, r8
 800fb60:	4631      	mov	r1, r6
 800fb62:	4628      	mov	r0, r5
 800fb64:	47b8      	blx	r7
 800fb66:	3001      	adds	r0, #1
 800fb68:	f43f ae79 	beq.w	800f85e <_printf_float+0xb6>
 800fb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb70:	4631      	mov	r1, r6
 800fb72:	4628      	mov	r0, r5
 800fb74:	47b8      	blx	r7
 800fb76:	3001      	adds	r0, #1
 800fb78:	f43f ae71 	beq.w	800f85e <_printf_float+0xb6>
 800fb7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb80:	2200      	movs	r2, #0
 800fb82:	2300      	movs	r3, #0
 800fb84:	f7f0 ff80 	bl	8000a88 <__aeabi_dcmpeq>
 800fb88:	b9d8      	cbnz	r0, 800fbc2 <_printf_float+0x41a>
 800fb8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb8c:	f108 0201 	add.w	r2, r8, #1
 800fb90:	3b01      	subs	r3, #1
 800fb92:	4631      	mov	r1, r6
 800fb94:	4628      	mov	r0, r5
 800fb96:	47b8      	blx	r7
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d10e      	bne.n	800fbba <_printf_float+0x412>
 800fb9c:	e65f      	b.n	800f85e <_printf_float+0xb6>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	464a      	mov	r2, r9
 800fba2:	4631      	mov	r1, r6
 800fba4:	4628      	mov	r0, r5
 800fba6:	47b8      	blx	r7
 800fba8:	3001      	adds	r0, #1
 800fbaa:	f43f ae58 	beq.w	800f85e <_printf_float+0xb6>
 800fbae:	f108 0801 	add.w	r8, r8, #1
 800fbb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	4543      	cmp	r3, r8
 800fbb8:	dcf1      	bgt.n	800fb9e <_printf_float+0x3f6>
 800fbba:	4653      	mov	r3, sl
 800fbbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fbc0:	e6e1      	b.n	800f986 <_printf_float+0x1de>
 800fbc2:	f04f 0800 	mov.w	r8, #0
 800fbc6:	f104 091a 	add.w	r9, r4, #26
 800fbca:	e7f2      	b.n	800fbb2 <_printf_float+0x40a>
 800fbcc:	2301      	movs	r3, #1
 800fbce:	4642      	mov	r2, r8
 800fbd0:	e7df      	b.n	800fb92 <_printf_float+0x3ea>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	464a      	mov	r2, r9
 800fbd6:	4631      	mov	r1, r6
 800fbd8:	4628      	mov	r0, r5
 800fbda:	47b8      	blx	r7
 800fbdc:	3001      	adds	r0, #1
 800fbde:	f43f ae3e 	beq.w	800f85e <_printf_float+0xb6>
 800fbe2:	f108 0801 	add.w	r8, r8, #1
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fbea:	1a5b      	subs	r3, r3, r1
 800fbec:	4543      	cmp	r3, r8
 800fbee:	dcf0      	bgt.n	800fbd2 <_printf_float+0x42a>
 800fbf0:	e6fe      	b.n	800f9f0 <_printf_float+0x248>
 800fbf2:	f04f 0800 	mov.w	r8, #0
 800fbf6:	f104 0919 	add.w	r9, r4, #25
 800fbfa:	e7f4      	b.n	800fbe6 <_printf_float+0x43e>

0800fbfc <_printf_i>:
 800fbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	7e0f      	ldrb	r7, [r1, #24]
 800fc02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc04:	2f78      	cmp	r7, #120	; 0x78
 800fc06:	4691      	mov	r9, r2
 800fc08:	4680      	mov	r8, r0
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	469a      	mov	sl, r3
 800fc0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc12:	d807      	bhi.n	800fc24 <_printf_i+0x28>
 800fc14:	2f62      	cmp	r7, #98	; 0x62
 800fc16:	d80a      	bhi.n	800fc2e <_printf_i+0x32>
 800fc18:	2f00      	cmp	r7, #0
 800fc1a:	f000 80d8 	beq.w	800fdce <_printf_i+0x1d2>
 800fc1e:	2f58      	cmp	r7, #88	; 0x58
 800fc20:	f000 80a3 	beq.w	800fd6a <_printf_i+0x16e>
 800fc24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc2c:	e03a      	b.n	800fca4 <_printf_i+0xa8>
 800fc2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc32:	2b15      	cmp	r3, #21
 800fc34:	d8f6      	bhi.n	800fc24 <_printf_i+0x28>
 800fc36:	a101      	add	r1, pc, #4	; (adr r1, 800fc3c <_printf_i+0x40>)
 800fc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc3c:	0800fc95 	.word	0x0800fc95
 800fc40:	0800fca9 	.word	0x0800fca9
 800fc44:	0800fc25 	.word	0x0800fc25
 800fc48:	0800fc25 	.word	0x0800fc25
 800fc4c:	0800fc25 	.word	0x0800fc25
 800fc50:	0800fc25 	.word	0x0800fc25
 800fc54:	0800fca9 	.word	0x0800fca9
 800fc58:	0800fc25 	.word	0x0800fc25
 800fc5c:	0800fc25 	.word	0x0800fc25
 800fc60:	0800fc25 	.word	0x0800fc25
 800fc64:	0800fc25 	.word	0x0800fc25
 800fc68:	0800fdb5 	.word	0x0800fdb5
 800fc6c:	0800fcd9 	.word	0x0800fcd9
 800fc70:	0800fd97 	.word	0x0800fd97
 800fc74:	0800fc25 	.word	0x0800fc25
 800fc78:	0800fc25 	.word	0x0800fc25
 800fc7c:	0800fdd7 	.word	0x0800fdd7
 800fc80:	0800fc25 	.word	0x0800fc25
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fc25 	.word	0x0800fc25
 800fc8c:	0800fc25 	.word	0x0800fc25
 800fc90:	0800fd9f 	.word	0x0800fd9f
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	1d1a      	adds	r2, r3, #4
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	602a      	str	r2, [r5, #0]
 800fc9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fca4:	2301      	movs	r3, #1
 800fca6:	e0a3      	b.n	800fdf0 <_printf_i+0x1f4>
 800fca8:	6820      	ldr	r0, [r4, #0]
 800fcaa:	6829      	ldr	r1, [r5, #0]
 800fcac:	0606      	lsls	r6, r0, #24
 800fcae:	f101 0304 	add.w	r3, r1, #4
 800fcb2:	d50a      	bpl.n	800fcca <_printf_i+0xce>
 800fcb4:	680e      	ldr	r6, [r1, #0]
 800fcb6:	602b      	str	r3, [r5, #0]
 800fcb8:	2e00      	cmp	r6, #0
 800fcba:	da03      	bge.n	800fcc4 <_printf_i+0xc8>
 800fcbc:	232d      	movs	r3, #45	; 0x2d
 800fcbe:	4276      	negs	r6, r6
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	485e      	ldr	r0, [pc, #376]	; (800fe40 <_printf_i+0x244>)
 800fcc6:	230a      	movs	r3, #10
 800fcc8:	e019      	b.n	800fcfe <_printf_i+0x102>
 800fcca:	680e      	ldr	r6, [r1, #0]
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcd2:	bf18      	it	ne
 800fcd4:	b236      	sxthne	r6, r6
 800fcd6:	e7ef      	b.n	800fcb8 <_printf_i+0xbc>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	1d19      	adds	r1, r3, #4
 800fcde:	6029      	str	r1, [r5, #0]
 800fce0:	0601      	lsls	r1, r0, #24
 800fce2:	d501      	bpl.n	800fce8 <_printf_i+0xec>
 800fce4:	681e      	ldr	r6, [r3, #0]
 800fce6:	e002      	b.n	800fcee <_printf_i+0xf2>
 800fce8:	0646      	lsls	r6, r0, #25
 800fcea:	d5fb      	bpl.n	800fce4 <_printf_i+0xe8>
 800fcec:	881e      	ldrh	r6, [r3, #0]
 800fcee:	4854      	ldr	r0, [pc, #336]	; (800fe40 <_printf_i+0x244>)
 800fcf0:	2f6f      	cmp	r7, #111	; 0x6f
 800fcf2:	bf0c      	ite	eq
 800fcf4:	2308      	moveq	r3, #8
 800fcf6:	230a      	movne	r3, #10
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcfe:	6865      	ldr	r5, [r4, #4]
 800fd00:	60a5      	str	r5, [r4, #8]
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	bfa2      	ittt	ge
 800fd06:	6821      	ldrge	r1, [r4, #0]
 800fd08:	f021 0104 	bicge.w	r1, r1, #4
 800fd0c:	6021      	strge	r1, [r4, #0]
 800fd0e:	b90e      	cbnz	r6, 800fd14 <_printf_i+0x118>
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d04d      	beq.n	800fdb0 <_printf_i+0x1b4>
 800fd14:	4615      	mov	r5, r2
 800fd16:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd1a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd1e:	5dc7      	ldrb	r7, [r0, r7]
 800fd20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd24:	4637      	mov	r7, r6
 800fd26:	42bb      	cmp	r3, r7
 800fd28:	460e      	mov	r6, r1
 800fd2a:	d9f4      	bls.n	800fd16 <_printf_i+0x11a>
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d10b      	bne.n	800fd48 <_printf_i+0x14c>
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	07de      	lsls	r6, r3, #31
 800fd34:	d508      	bpl.n	800fd48 <_printf_i+0x14c>
 800fd36:	6923      	ldr	r3, [r4, #16]
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4299      	cmp	r1, r3
 800fd3c:	bfde      	ittt	le
 800fd3e:	2330      	movle	r3, #48	; 0x30
 800fd40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fd48:	1b52      	subs	r2, r2, r5
 800fd4a:	6122      	str	r2, [r4, #16]
 800fd4c:	f8cd a000 	str.w	sl, [sp]
 800fd50:	464b      	mov	r3, r9
 800fd52:	aa03      	add	r2, sp, #12
 800fd54:	4621      	mov	r1, r4
 800fd56:	4640      	mov	r0, r8
 800fd58:	f001 f9a3 	bl	80110a2 <_printf_common>
 800fd5c:	3001      	adds	r0, #1
 800fd5e:	d14c      	bne.n	800fdfa <_printf_i+0x1fe>
 800fd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd64:	b004      	add	sp, #16
 800fd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd6a:	4835      	ldr	r0, [pc, #212]	; (800fe40 <_printf_i+0x244>)
 800fd6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd70:	6829      	ldr	r1, [r5, #0]
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd78:	6029      	str	r1, [r5, #0]
 800fd7a:	061d      	lsls	r5, r3, #24
 800fd7c:	d514      	bpl.n	800fda8 <_printf_i+0x1ac>
 800fd7e:	07df      	lsls	r7, r3, #31
 800fd80:	bf44      	itt	mi
 800fd82:	f043 0320 	orrmi.w	r3, r3, #32
 800fd86:	6023      	strmi	r3, [r4, #0]
 800fd88:	b91e      	cbnz	r6, 800fd92 <_printf_i+0x196>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	f023 0320 	bic.w	r3, r3, #32
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	2310      	movs	r3, #16
 800fd94:	e7b0      	b.n	800fcf8 <_printf_i+0xfc>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	f043 0320 	orr.w	r3, r3, #32
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	2378      	movs	r3, #120	; 0x78
 800fda0:	4828      	ldr	r0, [pc, #160]	; (800fe44 <_printf_i+0x248>)
 800fda2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fda6:	e7e3      	b.n	800fd70 <_printf_i+0x174>
 800fda8:	0659      	lsls	r1, r3, #25
 800fdaa:	bf48      	it	mi
 800fdac:	b2b6      	uxthmi	r6, r6
 800fdae:	e7e6      	b.n	800fd7e <_printf_i+0x182>
 800fdb0:	4615      	mov	r5, r2
 800fdb2:	e7bb      	b.n	800fd2c <_printf_i+0x130>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	6826      	ldr	r6, [r4, #0]
 800fdb8:	6961      	ldr	r1, [r4, #20]
 800fdba:	1d18      	adds	r0, r3, #4
 800fdbc:	6028      	str	r0, [r5, #0]
 800fdbe:	0635      	lsls	r5, r6, #24
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	d501      	bpl.n	800fdc8 <_printf_i+0x1cc>
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <_printf_i+0x1d2>
 800fdc8:	0670      	lsls	r0, r6, #25
 800fdca:	d5fb      	bpl.n	800fdc4 <_printf_i+0x1c8>
 800fdcc:	8019      	strh	r1, [r3, #0]
 800fdce:	2300      	movs	r3, #0
 800fdd0:	6123      	str	r3, [r4, #16]
 800fdd2:	4615      	mov	r5, r2
 800fdd4:	e7ba      	b.n	800fd4c <_printf_i+0x150>
 800fdd6:	682b      	ldr	r3, [r5, #0]
 800fdd8:	1d1a      	adds	r2, r3, #4
 800fdda:	602a      	str	r2, [r5, #0]
 800fddc:	681d      	ldr	r5, [r3, #0]
 800fdde:	6862      	ldr	r2, [r4, #4]
 800fde0:	2100      	movs	r1, #0
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7f0 f9dc 	bl	80001a0 <memchr>
 800fde8:	b108      	cbz	r0, 800fdee <_printf_i+0x1f2>
 800fdea:	1b40      	subs	r0, r0, r5
 800fdec:	6060      	str	r0, [r4, #4]
 800fdee:	6863      	ldr	r3, [r4, #4]
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf8:	e7a8      	b.n	800fd4c <_printf_i+0x150>
 800fdfa:	6923      	ldr	r3, [r4, #16]
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4640      	mov	r0, r8
 800fe02:	47d0      	blx	sl
 800fe04:	3001      	adds	r0, #1
 800fe06:	d0ab      	beq.n	800fd60 <_printf_i+0x164>
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	079b      	lsls	r3, r3, #30
 800fe0c:	d413      	bmi.n	800fe36 <_printf_i+0x23a>
 800fe0e:	68e0      	ldr	r0, [r4, #12]
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	4298      	cmp	r0, r3
 800fe14:	bfb8      	it	lt
 800fe16:	4618      	movlt	r0, r3
 800fe18:	e7a4      	b.n	800fd64 <_printf_i+0x168>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4649      	mov	r1, r9
 800fe20:	4640      	mov	r0, r8
 800fe22:	47d0      	blx	sl
 800fe24:	3001      	adds	r0, #1
 800fe26:	d09b      	beq.n	800fd60 <_printf_i+0x164>
 800fe28:	3501      	adds	r5, #1
 800fe2a:	68e3      	ldr	r3, [r4, #12]
 800fe2c:	9903      	ldr	r1, [sp, #12]
 800fe2e:	1a5b      	subs	r3, r3, r1
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dcf2      	bgt.n	800fe1a <_printf_i+0x21e>
 800fe34:	e7eb      	b.n	800fe0e <_printf_i+0x212>
 800fe36:	2500      	movs	r5, #0
 800fe38:	f104 0619 	add.w	r6, r4, #25
 800fe3c:	e7f5      	b.n	800fe2a <_printf_i+0x22e>
 800fe3e:	bf00      	nop
 800fe40:	08012d48 	.word	0x08012d48
 800fe44:	08012d59 	.word	0x08012d59

0800fe48 <_sbrk_r>:
 800fe48:	b538      	push	{r3, r4, r5, lr}
 800fe4a:	4d06      	ldr	r5, [pc, #24]	; (800fe64 <_sbrk_r+0x1c>)
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4608      	mov	r0, r1
 800fe52:	602b      	str	r3, [r5, #0]
 800fe54:	f7f3 fc1e 	bl	8003694 <_sbrk>
 800fe58:	1c43      	adds	r3, r0, #1
 800fe5a:	d102      	bne.n	800fe62 <_sbrk_r+0x1a>
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	b103      	cbz	r3, 800fe62 <_sbrk_r+0x1a>
 800fe60:	6023      	str	r3, [r4, #0]
 800fe62:	bd38      	pop	{r3, r4, r5, pc}
 800fe64:	200015f4 	.word	0x200015f4

0800fe68 <raise>:
 800fe68:	4b02      	ldr	r3, [pc, #8]	; (800fe74 <raise+0xc>)
 800fe6a:	4601      	mov	r1, r0
 800fe6c:	6818      	ldr	r0, [r3, #0]
 800fe6e:	f001 b985 	b.w	801117c <_raise_r>
 800fe72:	bf00      	nop
 800fe74:	2000041c 	.word	0x2000041c

0800fe78 <_kill_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4d07      	ldr	r5, [pc, #28]	; (800fe98 <_kill_r+0x20>)
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	4604      	mov	r4, r0
 800fe80:	4608      	mov	r0, r1
 800fe82:	4611      	mov	r1, r2
 800fe84:	602b      	str	r3, [r5, #0]
 800fe86:	f7f3 fbdf 	bl	8003648 <_kill>
 800fe8a:	1c43      	adds	r3, r0, #1
 800fe8c:	d102      	bne.n	800fe94 <_kill_r+0x1c>
 800fe8e:	682b      	ldr	r3, [r5, #0]
 800fe90:	b103      	cbz	r3, 800fe94 <_kill_r+0x1c>
 800fe92:	6023      	str	r3, [r4, #0]
 800fe94:	bd38      	pop	{r3, r4, r5, pc}
 800fe96:	bf00      	nop
 800fe98:	200015f4 	.word	0x200015f4

0800fe9c <siprintf>:
 800fe9c:	b40e      	push	{r1, r2, r3}
 800fe9e:	b500      	push	{lr}
 800fea0:	b09c      	sub	sp, #112	; 0x70
 800fea2:	ab1d      	add	r3, sp, #116	; 0x74
 800fea4:	9002      	str	r0, [sp, #8]
 800fea6:	9006      	str	r0, [sp, #24]
 800fea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800feac:	4809      	ldr	r0, [pc, #36]	; (800fed4 <siprintf+0x38>)
 800feae:	9107      	str	r1, [sp, #28]
 800feb0:	9104      	str	r1, [sp, #16]
 800feb2:	4909      	ldr	r1, [pc, #36]	; (800fed8 <siprintf+0x3c>)
 800feb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb8:	9105      	str	r1, [sp, #20]
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	a902      	add	r1, sp, #8
 800fec0:	f000 fdae 	bl	8010a20 <_svfiprintf_r>
 800fec4:	9b02      	ldr	r3, [sp, #8]
 800fec6:	2200      	movs	r2, #0
 800fec8:	701a      	strb	r2, [r3, #0]
 800feca:	b01c      	add	sp, #112	; 0x70
 800fecc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fed0:	b003      	add	sp, #12
 800fed2:	4770      	bx	lr
 800fed4:	2000041c 	.word	0x2000041c
 800fed8:	ffff0208 	.word	0xffff0208

0800fedc <__swbuf_r>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	460e      	mov	r6, r1
 800fee0:	4614      	mov	r4, r2
 800fee2:	4605      	mov	r5, r0
 800fee4:	b118      	cbz	r0, 800feee <__swbuf_r+0x12>
 800fee6:	6983      	ldr	r3, [r0, #24]
 800fee8:	b90b      	cbnz	r3, 800feee <__swbuf_r+0x12>
 800feea:	f000 f9b7 	bl	801025c <__sinit>
 800feee:	4b21      	ldr	r3, [pc, #132]	; (800ff74 <__swbuf_r+0x98>)
 800fef0:	429c      	cmp	r4, r3
 800fef2:	d12b      	bne.n	800ff4c <__swbuf_r+0x70>
 800fef4:	686c      	ldr	r4, [r5, #4]
 800fef6:	69a3      	ldr	r3, [r4, #24]
 800fef8:	60a3      	str	r3, [r4, #8]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	071a      	lsls	r2, r3, #28
 800fefe:	d52f      	bpl.n	800ff60 <__swbuf_r+0x84>
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	b36b      	cbz	r3, 800ff60 <__swbuf_r+0x84>
 800ff04:	6923      	ldr	r3, [r4, #16]
 800ff06:	6820      	ldr	r0, [r4, #0]
 800ff08:	1ac0      	subs	r0, r0, r3
 800ff0a:	6963      	ldr	r3, [r4, #20]
 800ff0c:	b2f6      	uxtb	r6, r6
 800ff0e:	4283      	cmp	r3, r0
 800ff10:	4637      	mov	r7, r6
 800ff12:	dc04      	bgt.n	800ff1e <__swbuf_r+0x42>
 800ff14:	4621      	mov	r1, r4
 800ff16:	4628      	mov	r0, r5
 800ff18:	f000 f922 	bl	8010160 <_fflush_r>
 800ff1c:	bb30      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	60a3      	str	r3, [r4, #8]
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	6022      	str	r2, [r4, #0]
 800ff2a:	701e      	strb	r6, [r3, #0]
 800ff2c:	6963      	ldr	r3, [r4, #20]
 800ff2e:	3001      	adds	r0, #1
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d004      	beq.n	800ff3e <__swbuf_r+0x62>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	07db      	lsls	r3, r3, #31
 800ff38:	d506      	bpl.n	800ff48 <__swbuf_r+0x6c>
 800ff3a:	2e0a      	cmp	r6, #10
 800ff3c:	d104      	bne.n	800ff48 <__swbuf_r+0x6c>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	f000 f90d 	bl	8010160 <_fflush_r>
 800ff46:	b988      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <__swbuf_r+0x9c>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <__swbuf_r+0x7a>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7cf      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <__swbuf_r+0xa0>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7ca      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4628      	mov	r0, r5
 800ff64:	f000 f80c 	bl	800ff80 <__swsetup_r>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0cb      	beq.n	800ff04 <__swbuf_r+0x28>
 800ff6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ff70:	e7ea      	b.n	800ff48 <__swbuf_r+0x6c>
 800ff72:	bf00      	nop
 800ff74:	08012b84 	.word	0x08012b84
 800ff78:	08012ba4 	.word	0x08012ba4
 800ff7c:	08012b64 	.word	0x08012b64

0800ff80 <__swsetup_r>:
 800ff80:	4b32      	ldr	r3, [pc, #200]	; (801004c <__swsetup_r+0xcc>)
 800ff82:	b570      	push	{r4, r5, r6, lr}
 800ff84:	681d      	ldr	r5, [r3, #0]
 800ff86:	4606      	mov	r6, r0
 800ff88:	460c      	mov	r4, r1
 800ff8a:	b125      	cbz	r5, 800ff96 <__swsetup_r+0x16>
 800ff8c:	69ab      	ldr	r3, [r5, #24]
 800ff8e:	b913      	cbnz	r3, 800ff96 <__swsetup_r+0x16>
 800ff90:	4628      	mov	r0, r5
 800ff92:	f000 f963 	bl	801025c <__sinit>
 800ff96:	4b2e      	ldr	r3, [pc, #184]	; (8010050 <__swsetup_r+0xd0>)
 800ff98:	429c      	cmp	r4, r3
 800ff9a:	d10f      	bne.n	800ffbc <__swsetup_r+0x3c>
 800ff9c:	686c      	ldr	r4, [r5, #4]
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffa4:	0719      	lsls	r1, r3, #28
 800ffa6:	d42c      	bmi.n	8010002 <__swsetup_r+0x82>
 800ffa8:	06dd      	lsls	r5, r3, #27
 800ffaa:	d411      	bmi.n	800ffd0 <__swsetup_r+0x50>
 800ffac:	2309      	movs	r3, #9
 800ffae:	6033      	str	r3, [r6, #0]
 800ffb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffb4:	81a3      	strh	r3, [r4, #12]
 800ffb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffba:	e03e      	b.n	801003a <__swsetup_r+0xba>
 800ffbc:	4b25      	ldr	r3, [pc, #148]	; (8010054 <__swsetup_r+0xd4>)
 800ffbe:	429c      	cmp	r4, r3
 800ffc0:	d101      	bne.n	800ffc6 <__swsetup_r+0x46>
 800ffc2:	68ac      	ldr	r4, [r5, #8]
 800ffc4:	e7eb      	b.n	800ff9e <__swsetup_r+0x1e>
 800ffc6:	4b24      	ldr	r3, [pc, #144]	; (8010058 <__swsetup_r+0xd8>)
 800ffc8:	429c      	cmp	r4, r3
 800ffca:	bf08      	it	eq
 800ffcc:	68ec      	ldreq	r4, [r5, #12]
 800ffce:	e7e6      	b.n	800ff9e <__swsetup_r+0x1e>
 800ffd0:	0758      	lsls	r0, r3, #29
 800ffd2:	d512      	bpl.n	800fffa <__swsetup_r+0x7a>
 800ffd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffd6:	b141      	cbz	r1, 800ffea <__swsetup_r+0x6a>
 800ffd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffdc:	4299      	cmp	r1, r3
 800ffde:	d002      	beq.n	800ffe6 <__swsetup_r+0x66>
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	f7ff fa0d 	bl	800f400 <_free_r>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	6363      	str	r3, [r4, #52]	; 0x34
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fff0:	81a3      	strh	r3, [r4, #12]
 800fff2:	2300      	movs	r3, #0
 800fff4:	6063      	str	r3, [r4, #4]
 800fff6:	6923      	ldr	r3, [r4, #16]
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	f043 0308 	orr.w	r3, r3, #8
 8010000:	81a3      	strh	r3, [r4, #12]
 8010002:	6923      	ldr	r3, [r4, #16]
 8010004:	b94b      	cbnz	r3, 801001a <__swsetup_r+0x9a>
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801000c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010010:	d003      	beq.n	801001a <__swsetup_r+0x9a>
 8010012:	4621      	mov	r1, r4
 8010014:	4630      	mov	r0, r6
 8010016:	f000 f9a3 	bl	8010360 <__smakebuf_r>
 801001a:	89a0      	ldrh	r0, [r4, #12]
 801001c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010020:	f010 0301 	ands.w	r3, r0, #1
 8010024:	d00a      	beq.n	801003c <__swsetup_r+0xbc>
 8010026:	2300      	movs	r3, #0
 8010028:	60a3      	str	r3, [r4, #8]
 801002a:	6963      	ldr	r3, [r4, #20]
 801002c:	425b      	negs	r3, r3
 801002e:	61a3      	str	r3, [r4, #24]
 8010030:	6923      	ldr	r3, [r4, #16]
 8010032:	b943      	cbnz	r3, 8010046 <__swsetup_r+0xc6>
 8010034:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010038:	d1ba      	bne.n	800ffb0 <__swsetup_r+0x30>
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	0781      	lsls	r1, r0, #30
 801003e:	bf58      	it	pl
 8010040:	6963      	ldrpl	r3, [r4, #20]
 8010042:	60a3      	str	r3, [r4, #8]
 8010044:	e7f4      	b.n	8010030 <__swsetup_r+0xb0>
 8010046:	2000      	movs	r0, #0
 8010048:	e7f7      	b.n	801003a <__swsetup_r+0xba>
 801004a:	bf00      	nop
 801004c:	2000041c 	.word	0x2000041c
 8010050:	08012b84 	.word	0x08012b84
 8010054:	08012ba4 	.word	0x08012ba4
 8010058:	08012b64 	.word	0x08012b64

0801005c <__sflush_r>:
 801005c:	898a      	ldrh	r2, [r1, #12]
 801005e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010060:	4605      	mov	r5, r0
 8010062:	0710      	lsls	r0, r2, #28
 8010064:	460c      	mov	r4, r1
 8010066:	d457      	bmi.n	8010118 <__sflush_r+0xbc>
 8010068:	684b      	ldr	r3, [r1, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	dc04      	bgt.n	8010078 <__sflush_r+0x1c>
 801006e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010070:	2b00      	cmp	r3, #0
 8010072:	dc01      	bgt.n	8010078 <__sflush_r+0x1c>
 8010074:	2000      	movs	r0, #0
 8010076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801007a:	2e00      	cmp	r6, #0
 801007c:	d0fa      	beq.n	8010074 <__sflush_r+0x18>
 801007e:	2300      	movs	r3, #0
 8010080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010084:	682f      	ldr	r7, [r5, #0]
 8010086:	602b      	str	r3, [r5, #0]
 8010088:	d032      	beq.n	80100f0 <__sflush_r+0x94>
 801008a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	075a      	lsls	r2, r3, #29
 8010090:	d505      	bpl.n	801009e <__sflush_r+0x42>
 8010092:	6863      	ldr	r3, [r4, #4]
 8010094:	1ac0      	subs	r0, r0, r3
 8010096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010098:	b10b      	cbz	r3, 801009e <__sflush_r+0x42>
 801009a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801009c:	1ac0      	subs	r0, r0, r3
 801009e:	2300      	movs	r3, #0
 80100a0:	4602      	mov	r2, r0
 80100a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100a4:	6a21      	ldr	r1, [r4, #32]
 80100a6:	4628      	mov	r0, r5
 80100a8:	47b0      	blx	r6
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	d106      	bne.n	80100be <__sflush_r+0x62>
 80100b0:	6829      	ldr	r1, [r5, #0]
 80100b2:	291d      	cmp	r1, #29
 80100b4:	d82c      	bhi.n	8010110 <__sflush_r+0xb4>
 80100b6:	4a29      	ldr	r2, [pc, #164]	; (801015c <__sflush_r+0x100>)
 80100b8:	40ca      	lsrs	r2, r1
 80100ba:	07d6      	lsls	r6, r2, #31
 80100bc:	d528      	bpl.n	8010110 <__sflush_r+0xb4>
 80100be:	2200      	movs	r2, #0
 80100c0:	6062      	str	r2, [r4, #4]
 80100c2:	04d9      	lsls	r1, r3, #19
 80100c4:	6922      	ldr	r2, [r4, #16]
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	d504      	bpl.n	80100d4 <__sflush_r+0x78>
 80100ca:	1c42      	adds	r2, r0, #1
 80100cc:	d101      	bne.n	80100d2 <__sflush_r+0x76>
 80100ce:	682b      	ldr	r3, [r5, #0]
 80100d0:	b903      	cbnz	r3, 80100d4 <__sflush_r+0x78>
 80100d2:	6560      	str	r0, [r4, #84]	; 0x54
 80100d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80100d6:	602f      	str	r7, [r5, #0]
 80100d8:	2900      	cmp	r1, #0
 80100da:	d0cb      	beq.n	8010074 <__sflush_r+0x18>
 80100dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100e0:	4299      	cmp	r1, r3
 80100e2:	d002      	beq.n	80100ea <__sflush_r+0x8e>
 80100e4:	4628      	mov	r0, r5
 80100e6:	f7ff f98b 	bl	800f400 <_free_r>
 80100ea:	2000      	movs	r0, #0
 80100ec:	6360      	str	r0, [r4, #52]	; 0x34
 80100ee:	e7c2      	b.n	8010076 <__sflush_r+0x1a>
 80100f0:	6a21      	ldr	r1, [r4, #32]
 80100f2:	2301      	movs	r3, #1
 80100f4:	4628      	mov	r0, r5
 80100f6:	47b0      	blx	r6
 80100f8:	1c41      	adds	r1, r0, #1
 80100fa:	d1c7      	bne.n	801008c <__sflush_r+0x30>
 80100fc:	682b      	ldr	r3, [r5, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d0c4      	beq.n	801008c <__sflush_r+0x30>
 8010102:	2b1d      	cmp	r3, #29
 8010104:	d001      	beq.n	801010a <__sflush_r+0xae>
 8010106:	2b16      	cmp	r3, #22
 8010108:	d101      	bne.n	801010e <__sflush_r+0xb2>
 801010a:	602f      	str	r7, [r5, #0]
 801010c:	e7b2      	b.n	8010074 <__sflush_r+0x18>
 801010e:	89a3      	ldrh	r3, [r4, #12]
 8010110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010114:	81a3      	strh	r3, [r4, #12]
 8010116:	e7ae      	b.n	8010076 <__sflush_r+0x1a>
 8010118:	690f      	ldr	r7, [r1, #16]
 801011a:	2f00      	cmp	r7, #0
 801011c:	d0aa      	beq.n	8010074 <__sflush_r+0x18>
 801011e:	0793      	lsls	r3, r2, #30
 8010120:	680e      	ldr	r6, [r1, #0]
 8010122:	bf08      	it	eq
 8010124:	694b      	ldreq	r3, [r1, #20]
 8010126:	600f      	str	r7, [r1, #0]
 8010128:	bf18      	it	ne
 801012a:	2300      	movne	r3, #0
 801012c:	1bf6      	subs	r6, r6, r7
 801012e:	608b      	str	r3, [r1, #8]
 8010130:	2e00      	cmp	r6, #0
 8010132:	dd9f      	ble.n	8010074 <__sflush_r+0x18>
 8010134:	6a21      	ldr	r1, [r4, #32]
 8010136:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801013a:	4633      	mov	r3, r6
 801013c:	463a      	mov	r2, r7
 801013e:	4628      	mov	r0, r5
 8010140:	47e0      	blx	ip
 8010142:	2800      	cmp	r0, #0
 8010144:	dc06      	bgt.n	8010154 <__sflush_r+0xf8>
 8010146:	89a3      	ldrh	r3, [r4, #12]
 8010148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801014c:	81a3      	strh	r3, [r4, #12]
 801014e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010152:	e790      	b.n	8010076 <__sflush_r+0x1a>
 8010154:	4407      	add	r7, r0
 8010156:	1a36      	subs	r6, r6, r0
 8010158:	e7ea      	b.n	8010130 <__sflush_r+0xd4>
 801015a:	bf00      	nop
 801015c:	20400001 	.word	0x20400001

08010160 <_fflush_r>:
 8010160:	b538      	push	{r3, r4, r5, lr}
 8010162:	690b      	ldr	r3, [r1, #16]
 8010164:	4605      	mov	r5, r0
 8010166:	460c      	mov	r4, r1
 8010168:	b913      	cbnz	r3, 8010170 <_fflush_r+0x10>
 801016a:	2500      	movs	r5, #0
 801016c:	4628      	mov	r0, r5
 801016e:	bd38      	pop	{r3, r4, r5, pc}
 8010170:	b118      	cbz	r0, 801017a <_fflush_r+0x1a>
 8010172:	6983      	ldr	r3, [r0, #24]
 8010174:	b90b      	cbnz	r3, 801017a <_fflush_r+0x1a>
 8010176:	f000 f871 	bl	801025c <__sinit>
 801017a:	4b14      	ldr	r3, [pc, #80]	; (80101cc <_fflush_r+0x6c>)
 801017c:	429c      	cmp	r4, r3
 801017e:	d11b      	bne.n	80101b8 <_fflush_r+0x58>
 8010180:	686c      	ldr	r4, [r5, #4]
 8010182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d0ef      	beq.n	801016a <_fflush_r+0xa>
 801018a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801018c:	07d0      	lsls	r0, r2, #31
 801018e:	d404      	bmi.n	801019a <_fflush_r+0x3a>
 8010190:	0599      	lsls	r1, r3, #22
 8010192:	d402      	bmi.n	801019a <_fflush_r+0x3a>
 8010194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010196:	f7f3 fa9d 	bl	80036d4 <__retarget_lock_acquire_recursive>
 801019a:	4628      	mov	r0, r5
 801019c:	4621      	mov	r1, r4
 801019e:	f7ff ff5d 	bl	801005c <__sflush_r>
 80101a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101a4:	07da      	lsls	r2, r3, #31
 80101a6:	4605      	mov	r5, r0
 80101a8:	d4e0      	bmi.n	801016c <_fflush_r+0xc>
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	059b      	lsls	r3, r3, #22
 80101ae:	d4dd      	bmi.n	801016c <_fflush_r+0xc>
 80101b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101b2:	f7f3 fa95 	bl	80036e0 <__retarget_lock_release_recursive>
 80101b6:	e7d9      	b.n	801016c <_fflush_r+0xc>
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <_fflush_r+0x70>)
 80101ba:	429c      	cmp	r4, r3
 80101bc:	d101      	bne.n	80101c2 <_fflush_r+0x62>
 80101be:	68ac      	ldr	r4, [r5, #8]
 80101c0:	e7df      	b.n	8010182 <_fflush_r+0x22>
 80101c2:	4b04      	ldr	r3, [pc, #16]	; (80101d4 <_fflush_r+0x74>)
 80101c4:	429c      	cmp	r4, r3
 80101c6:	bf08      	it	eq
 80101c8:	68ec      	ldreq	r4, [r5, #12]
 80101ca:	e7da      	b.n	8010182 <_fflush_r+0x22>
 80101cc:	08012b84 	.word	0x08012b84
 80101d0:	08012ba4 	.word	0x08012ba4
 80101d4:	08012b64 	.word	0x08012b64

080101d8 <std>:
 80101d8:	2300      	movs	r3, #0
 80101da:	b510      	push	{r4, lr}
 80101dc:	4604      	mov	r4, r0
 80101de:	e9c0 3300 	strd	r3, r3, [r0]
 80101e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101e6:	6083      	str	r3, [r0, #8]
 80101e8:	8181      	strh	r1, [r0, #12]
 80101ea:	6643      	str	r3, [r0, #100]	; 0x64
 80101ec:	81c2      	strh	r2, [r0, #14]
 80101ee:	6183      	str	r3, [r0, #24]
 80101f0:	4619      	mov	r1, r3
 80101f2:	2208      	movs	r2, #8
 80101f4:	305c      	adds	r0, #92	; 0x5c
 80101f6:	f000 fe87 	bl	8010f08 <memset>
 80101fa:	4b05      	ldr	r3, [pc, #20]	; (8010210 <std+0x38>)
 80101fc:	6263      	str	r3, [r4, #36]	; 0x24
 80101fe:	4b05      	ldr	r3, [pc, #20]	; (8010214 <std+0x3c>)
 8010200:	62a3      	str	r3, [r4, #40]	; 0x28
 8010202:	4b05      	ldr	r3, [pc, #20]	; (8010218 <std+0x40>)
 8010204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010206:	4b05      	ldr	r3, [pc, #20]	; (801021c <std+0x44>)
 8010208:	6224      	str	r4, [r4, #32]
 801020a:	6323      	str	r3, [r4, #48]	; 0x30
 801020c:	bd10      	pop	{r4, pc}
 801020e:	bf00      	nop
 8010210:	08011599 	.word	0x08011599
 8010214:	080115bb 	.word	0x080115bb
 8010218:	080115f3 	.word	0x080115f3
 801021c:	08011617 	.word	0x08011617

08010220 <_cleanup_r>:
 8010220:	4901      	ldr	r1, [pc, #4]	; (8010228 <_cleanup_r+0x8>)
 8010222:	f001 b87e 	b.w	8011322 <_fwalk_reent>
 8010226:	bf00      	nop
 8010228:	08010161 	.word	0x08010161

0801022c <__sfp_lock_acquire>:
 801022c:	4801      	ldr	r0, [pc, #4]	; (8010234 <__sfp_lock_acquire+0x8>)
 801022e:	f7f3 ba51 	b.w	80036d4 <__retarget_lock_acquire_recursive>
 8010232:	bf00      	nop
 8010234:	20000744 	.word	0x20000744

08010238 <__sfp_lock_release>:
 8010238:	4801      	ldr	r0, [pc, #4]	; (8010240 <__sfp_lock_release+0x8>)
 801023a:	f7f3 ba51 	b.w	80036e0 <__retarget_lock_release_recursive>
 801023e:	bf00      	nop
 8010240:	20000744 	.word	0x20000744

08010244 <__sinit_lock_acquire>:
 8010244:	4801      	ldr	r0, [pc, #4]	; (801024c <__sinit_lock_acquire+0x8>)
 8010246:	f7f3 ba45 	b.w	80036d4 <__retarget_lock_acquire_recursive>
 801024a:	bf00      	nop
 801024c:	20000758 	.word	0x20000758

08010250 <__sinit_lock_release>:
 8010250:	4801      	ldr	r0, [pc, #4]	; (8010258 <__sinit_lock_release+0x8>)
 8010252:	f7f3 ba45 	b.w	80036e0 <__retarget_lock_release_recursive>
 8010256:	bf00      	nop
 8010258:	20000758 	.word	0x20000758

0801025c <__sinit>:
 801025c:	b510      	push	{r4, lr}
 801025e:	4604      	mov	r4, r0
 8010260:	f7ff fff0 	bl	8010244 <__sinit_lock_acquire>
 8010264:	69a3      	ldr	r3, [r4, #24]
 8010266:	b11b      	cbz	r3, 8010270 <__sinit+0x14>
 8010268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801026c:	f7ff bff0 	b.w	8010250 <__sinit_lock_release>
 8010270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010274:	6523      	str	r3, [r4, #80]	; 0x50
 8010276:	4b13      	ldr	r3, [pc, #76]	; (80102c4 <__sinit+0x68>)
 8010278:	4a13      	ldr	r2, [pc, #76]	; (80102c8 <__sinit+0x6c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	62a2      	str	r2, [r4, #40]	; 0x28
 801027e:	42a3      	cmp	r3, r4
 8010280:	bf04      	itt	eq
 8010282:	2301      	moveq	r3, #1
 8010284:	61a3      	streq	r3, [r4, #24]
 8010286:	4620      	mov	r0, r4
 8010288:	f000 f820 	bl	80102cc <__sfp>
 801028c:	6060      	str	r0, [r4, #4]
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f81c 	bl	80102cc <__sfp>
 8010294:	60a0      	str	r0, [r4, #8]
 8010296:	4620      	mov	r0, r4
 8010298:	f000 f818 	bl	80102cc <__sfp>
 801029c:	2200      	movs	r2, #0
 801029e:	60e0      	str	r0, [r4, #12]
 80102a0:	2104      	movs	r1, #4
 80102a2:	6860      	ldr	r0, [r4, #4]
 80102a4:	f7ff ff98 	bl	80101d8 <std>
 80102a8:	68a0      	ldr	r0, [r4, #8]
 80102aa:	2201      	movs	r2, #1
 80102ac:	2109      	movs	r1, #9
 80102ae:	f7ff ff93 	bl	80101d8 <std>
 80102b2:	68e0      	ldr	r0, [r4, #12]
 80102b4:	2202      	movs	r2, #2
 80102b6:	2112      	movs	r1, #18
 80102b8:	f7ff ff8e 	bl	80101d8 <std>
 80102bc:	2301      	movs	r3, #1
 80102be:	61a3      	str	r3, [r4, #24]
 80102c0:	e7d2      	b.n	8010268 <__sinit+0xc>
 80102c2:	bf00      	nop
 80102c4:	08012b60 	.word	0x08012b60
 80102c8:	08010221 	.word	0x08010221

080102cc <__sfp>:
 80102cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ce:	4607      	mov	r7, r0
 80102d0:	f7ff ffac 	bl	801022c <__sfp_lock_acquire>
 80102d4:	4b1e      	ldr	r3, [pc, #120]	; (8010350 <__sfp+0x84>)
 80102d6:	681e      	ldr	r6, [r3, #0]
 80102d8:	69b3      	ldr	r3, [r6, #24]
 80102da:	b913      	cbnz	r3, 80102e2 <__sfp+0x16>
 80102dc:	4630      	mov	r0, r6
 80102de:	f7ff ffbd 	bl	801025c <__sinit>
 80102e2:	3648      	adds	r6, #72	; 0x48
 80102e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	d503      	bpl.n	80102f4 <__sfp+0x28>
 80102ec:	6833      	ldr	r3, [r6, #0]
 80102ee:	b30b      	cbz	r3, 8010334 <__sfp+0x68>
 80102f0:	6836      	ldr	r6, [r6, #0]
 80102f2:	e7f7      	b.n	80102e4 <__sfp+0x18>
 80102f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102f8:	b9d5      	cbnz	r5, 8010330 <__sfp+0x64>
 80102fa:	4b16      	ldr	r3, [pc, #88]	; (8010354 <__sfp+0x88>)
 80102fc:	60e3      	str	r3, [r4, #12]
 80102fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010302:	6665      	str	r5, [r4, #100]	; 0x64
 8010304:	f7f3 f9dc 	bl	80036c0 <__retarget_lock_init_recursive>
 8010308:	f7ff ff96 	bl	8010238 <__sfp_lock_release>
 801030c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010314:	6025      	str	r5, [r4, #0]
 8010316:	61a5      	str	r5, [r4, #24]
 8010318:	2208      	movs	r2, #8
 801031a:	4629      	mov	r1, r5
 801031c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010320:	f000 fdf2 	bl	8010f08 <memset>
 8010324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801032c:	4620      	mov	r0, r4
 801032e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010330:	3468      	adds	r4, #104	; 0x68
 8010332:	e7d9      	b.n	80102e8 <__sfp+0x1c>
 8010334:	2104      	movs	r1, #4
 8010336:	4638      	mov	r0, r7
 8010338:	f000 ffdd 	bl	80112f6 <__sfmoreglue>
 801033c:	4604      	mov	r4, r0
 801033e:	6030      	str	r0, [r6, #0]
 8010340:	2800      	cmp	r0, #0
 8010342:	d1d5      	bne.n	80102f0 <__sfp+0x24>
 8010344:	f7ff ff78 	bl	8010238 <__sfp_lock_release>
 8010348:	230c      	movs	r3, #12
 801034a:	603b      	str	r3, [r7, #0]
 801034c:	e7ee      	b.n	801032c <__sfp+0x60>
 801034e:	bf00      	nop
 8010350:	08012b60 	.word	0x08012b60
 8010354:	ffff0001 	.word	0xffff0001

08010358 <_localeconv_r>:
 8010358:	4800      	ldr	r0, [pc, #0]	; (801035c <_localeconv_r+0x4>)
 801035a:	4770      	bx	lr
 801035c:	20000570 	.word	0x20000570

08010360 <__smakebuf_r>:
 8010360:	898b      	ldrh	r3, [r1, #12]
 8010362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010364:	079d      	lsls	r5, r3, #30
 8010366:	4606      	mov	r6, r0
 8010368:	460c      	mov	r4, r1
 801036a:	d507      	bpl.n	801037c <__smakebuf_r+0x1c>
 801036c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	6123      	str	r3, [r4, #16]
 8010374:	2301      	movs	r3, #1
 8010376:	6163      	str	r3, [r4, #20]
 8010378:	b002      	add	sp, #8
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	ab01      	add	r3, sp, #4
 801037e:	466a      	mov	r2, sp
 8010380:	f000 ffee 	bl	8011360 <__swhatbuf_r>
 8010384:	9900      	ldr	r1, [sp, #0]
 8010386:	4605      	mov	r5, r0
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff f883 	bl	800f494 <_malloc_r>
 801038e:	b948      	cbnz	r0, 80103a4 <__smakebuf_r+0x44>
 8010390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010394:	059a      	lsls	r2, r3, #22
 8010396:	d4ef      	bmi.n	8010378 <__smakebuf_r+0x18>
 8010398:	f023 0303 	bic.w	r3, r3, #3
 801039c:	f043 0302 	orr.w	r3, r3, #2
 80103a0:	81a3      	strh	r3, [r4, #12]
 80103a2:	e7e3      	b.n	801036c <__smakebuf_r+0xc>
 80103a4:	4b0d      	ldr	r3, [pc, #52]	; (80103dc <__smakebuf_r+0x7c>)
 80103a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	6020      	str	r0, [r4, #0]
 80103ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103b0:	81a3      	strh	r3, [r4, #12]
 80103b2:	9b00      	ldr	r3, [sp, #0]
 80103b4:	6163      	str	r3, [r4, #20]
 80103b6:	9b01      	ldr	r3, [sp, #4]
 80103b8:	6120      	str	r0, [r4, #16]
 80103ba:	b15b      	cbz	r3, 80103d4 <__smakebuf_r+0x74>
 80103bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c0:	4630      	mov	r0, r6
 80103c2:	f000 fc61 	bl	8010c88 <_isatty_r>
 80103c6:	b128      	cbz	r0, 80103d4 <__smakebuf_r+0x74>
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	f023 0303 	bic.w	r3, r3, #3
 80103ce:	f043 0301 	orr.w	r3, r3, #1
 80103d2:	81a3      	strh	r3, [r4, #12]
 80103d4:	89a0      	ldrh	r0, [r4, #12]
 80103d6:	4305      	orrs	r5, r0
 80103d8:	81a5      	strh	r5, [r4, #12]
 80103da:	e7cd      	b.n	8010378 <__smakebuf_r+0x18>
 80103dc:	08010221 	.word	0x08010221

080103e0 <__malloc_lock>:
 80103e0:	4801      	ldr	r0, [pc, #4]	; (80103e8 <__malloc_lock+0x8>)
 80103e2:	f7f3 b977 	b.w	80036d4 <__retarget_lock_acquire_recursive>
 80103e6:	bf00      	nop
 80103e8:	20000730 	.word	0x20000730

080103ec <__malloc_unlock>:
 80103ec:	4801      	ldr	r0, [pc, #4]	; (80103f4 <__malloc_unlock+0x8>)
 80103ee:	f7f3 b977 	b.w	80036e0 <__retarget_lock_release_recursive>
 80103f2:	bf00      	nop
 80103f4:	20000730 	.word	0x20000730

080103f8 <_Balloc>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	b976      	cbnz	r6, 8010420 <_Balloc+0x28>
 8010402:	2010      	movs	r0, #16
 8010404:	f7fe ffec 	bl	800f3e0 <malloc>
 8010408:	4602      	mov	r2, r0
 801040a:	6260      	str	r0, [r4, #36]	; 0x24
 801040c:	b920      	cbnz	r0, 8010418 <_Balloc+0x20>
 801040e:	4b18      	ldr	r3, [pc, #96]	; (8010470 <_Balloc+0x78>)
 8010410:	4818      	ldr	r0, [pc, #96]	; (8010474 <_Balloc+0x7c>)
 8010412:	2166      	movs	r1, #102	; 0x66
 8010414:	f7fe ffb4 	bl	800f380 <__assert_func>
 8010418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801041c:	6006      	str	r6, [r0, #0]
 801041e:	60c6      	str	r6, [r0, #12]
 8010420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010422:	68f3      	ldr	r3, [r6, #12]
 8010424:	b183      	cbz	r3, 8010448 <_Balloc+0x50>
 8010426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801042e:	b9b8      	cbnz	r0, 8010460 <_Balloc+0x68>
 8010430:	2101      	movs	r1, #1
 8010432:	fa01 f605 	lsl.w	r6, r1, r5
 8010436:	1d72      	adds	r2, r6, #5
 8010438:	0092      	lsls	r2, r2, #2
 801043a:	4620      	mov	r0, r4
 801043c:	f001 f81d 	bl	801147a <_calloc_r>
 8010440:	b160      	cbz	r0, 801045c <_Balloc+0x64>
 8010442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010446:	e00e      	b.n	8010466 <_Balloc+0x6e>
 8010448:	2221      	movs	r2, #33	; 0x21
 801044a:	2104      	movs	r1, #4
 801044c:	4620      	mov	r0, r4
 801044e:	f001 f814 	bl	801147a <_calloc_r>
 8010452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010454:	60f0      	str	r0, [r6, #12]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1e4      	bne.n	8010426 <_Balloc+0x2e>
 801045c:	2000      	movs	r0, #0
 801045e:	bd70      	pop	{r4, r5, r6, pc}
 8010460:	6802      	ldr	r2, [r0, #0]
 8010462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010466:	2300      	movs	r3, #0
 8010468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801046c:	e7f7      	b.n	801045e <_Balloc+0x66>
 801046e:	bf00      	nop
 8010470:	08012d77 	.word	0x08012d77
 8010474:	08012df9 	.word	0x08012df9

08010478 <_Bfree>:
 8010478:	b570      	push	{r4, r5, r6, lr}
 801047a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801047c:	4605      	mov	r5, r0
 801047e:	460c      	mov	r4, r1
 8010480:	b976      	cbnz	r6, 80104a0 <_Bfree+0x28>
 8010482:	2010      	movs	r0, #16
 8010484:	f7fe ffac 	bl	800f3e0 <malloc>
 8010488:	4602      	mov	r2, r0
 801048a:	6268      	str	r0, [r5, #36]	; 0x24
 801048c:	b920      	cbnz	r0, 8010498 <_Bfree+0x20>
 801048e:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <_Bfree+0x3c>)
 8010490:	4809      	ldr	r0, [pc, #36]	; (80104b8 <_Bfree+0x40>)
 8010492:	218a      	movs	r1, #138	; 0x8a
 8010494:	f7fe ff74 	bl	800f380 <__assert_func>
 8010498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801049c:	6006      	str	r6, [r0, #0]
 801049e:	60c6      	str	r6, [r0, #12]
 80104a0:	b13c      	cbz	r4, 80104b2 <_Bfree+0x3a>
 80104a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104a4:	6862      	ldr	r2, [r4, #4]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104ac:	6021      	str	r1, [r4, #0]
 80104ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104b2:	bd70      	pop	{r4, r5, r6, pc}
 80104b4:	08012d77 	.word	0x08012d77
 80104b8:	08012df9 	.word	0x08012df9

080104bc <__multadd>:
 80104bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c0:	690d      	ldr	r5, [r1, #16]
 80104c2:	4607      	mov	r7, r0
 80104c4:	460c      	mov	r4, r1
 80104c6:	461e      	mov	r6, r3
 80104c8:	f101 0c14 	add.w	ip, r1, #20
 80104cc:	2000      	movs	r0, #0
 80104ce:	f8dc 3000 	ldr.w	r3, [ip]
 80104d2:	b299      	uxth	r1, r3
 80104d4:	fb02 6101 	mla	r1, r2, r1, r6
 80104d8:	0c1e      	lsrs	r6, r3, #16
 80104da:	0c0b      	lsrs	r3, r1, #16
 80104dc:	fb02 3306 	mla	r3, r2, r6, r3
 80104e0:	b289      	uxth	r1, r1
 80104e2:	3001      	adds	r0, #1
 80104e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104e8:	4285      	cmp	r5, r0
 80104ea:	f84c 1b04 	str.w	r1, [ip], #4
 80104ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104f2:	dcec      	bgt.n	80104ce <__multadd+0x12>
 80104f4:	b30e      	cbz	r6, 801053a <__multadd+0x7e>
 80104f6:	68a3      	ldr	r3, [r4, #8]
 80104f8:	42ab      	cmp	r3, r5
 80104fa:	dc19      	bgt.n	8010530 <__multadd+0x74>
 80104fc:	6861      	ldr	r1, [r4, #4]
 80104fe:	4638      	mov	r0, r7
 8010500:	3101      	adds	r1, #1
 8010502:	f7ff ff79 	bl	80103f8 <_Balloc>
 8010506:	4680      	mov	r8, r0
 8010508:	b928      	cbnz	r0, 8010516 <__multadd+0x5a>
 801050a:	4602      	mov	r2, r0
 801050c:	4b0c      	ldr	r3, [pc, #48]	; (8010540 <__multadd+0x84>)
 801050e:	480d      	ldr	r0, [pc, #52]	; (8010544 <__multadd+0x88>)
 8010510:	21b5      	movs	r1, #181	; 0xb5
 8010512:	f7fe ff35 	bl	800f380 <__assert_func>
 8010516:	6922      	ldr	r2, [r4, #16]
 8010518:	3202      	adds	r2, #2
 801051a:	f104 010c 	add.w	r1, r4, #12
 801051e:	0092      	lsls	r2, r2, #2
 8010520:	300c      	adds	r0, #12
 8010522:	f000 fcc9 	bl	8010eb8 <memcpy>
 8010526:	4621      	mov	r1, r4
 8010528:	4638      	mov	r0, r7
 801052a:	f7ff ffa5 	bl	8010478 <_Bfree>
 801052e:	4644      	mov	r4, r8
 8010530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010534:	3501      	adds	r5, #1
 8010536:	615e      	str	r6, [r3, #20]
 8010538:	6125      	str	r5, [r4, #16]
 801053a:	4620      	mov	r0, r4
 801053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010540:	08012de8 	.word	0x08012de8
 8010544:	08012df9 	.word	0x08012df9

08010548 <__i2b>:
 8010548:	b510      	push	{r4, lr}
 801054a:	460c      	mov	r4, r1
 801054c:	2101      	movs	r1, #1
 801054e:	f7ff ff53 	bl	80103f8 <_Balloc>
 8010552:	4602      	mov	r2, r0
 8010554:	b928      	cbnz	r0, 8010562 <__i2b+0x1a>
 8010556:	4b05      	ldr	r3, [pc, #20]	; (801056c <__i2b+0x24>)
 8010558:	4805      	ldr	r0, [pc, #20]	; (8010570 <__i2b+0x28>)
 801055a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801055e:	f7fe ff0f 	bl	800f380 <__assert_func>
 8010562:	2301      	movs	r3, #1
 8010564:	6144      	str	r4, [r0, #20]
 8010566:	6103      	str	r3, [r0, #16]
 8010568:	bd10      	pop	{r4, pc}
 801056a:	bf00      	nop
 801056c:	08012de8 	.word	0x08012de8
 8010570:	08012df9 	.word	0x08012df9

08010574 <__multiply>:
 8010574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	4691      	mov	r9, r2
 801057a:	690a      	ldr	r2, [r1, #16]
 801057c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010580:	429a      	cmp	r2, r3
 8010582:	bfb8      	it	lt
 8010584:	460b      	movlt	r3, r1
 8010586:	460c      	mov	r4, r1
 8010588:	bfbc      	itt	lt
 801058a:	464c      	movlt	r4, r9
 801058c:	4699      	movlt	r9, r3
 801058e:	6927      	ldr	r7, [r4, #16]
 8010590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010594:	68a3      	ldr	r3, [r4, #8]
 8010596:	6861      	ldr	r1, [r4, #4]
 8010598:	eb07 060a 	add.w	r6, r7, sl
 801059c:	42b3      	cmp	r3, r6
 801059e:	b085      	sub	sp, #20
 80105a0:	bfb8      	it	lt
 80105a2:	3101      	addlt	r1, #1
 80105a4:	f7ff ff28 	bl	80103f8 <_Balloc>
 80105a8:	b930      	cbnz	r0, 80105b8 <__multiply+0x44>
 80105aa:	4602      	mov	r2, r0
 80105ac:	4b43      	ldr	r3, [pc, #268]	; (80106bc <__multiply+0x148>)
 80105ae:	4844      	ldr	r0, [pc, #272]	; (80106c0 <__multiply+0x14c>)
 80105b0:	f240 115d 	movw	r1, #349	; 0x15d
 80105b4:	f7fe fee4 	bl	800f380 <__assert_func>
 80105b8:	f100 0514 	add.w	r5, r0, #20
 80105bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80105c0:	462b      	mov	r3, r5
 80105c2:	2200      	movs	r2, #0
 80105c4:	4543      	cmp	r3, r8
 80105c6:	d321      	bcc.n	801060c <__multiply+0x98>
 80105c8:	f104 0314 	add.w	r3, r4, #20
 80105cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80105d0:	f109 0314 	add.w	r3, r9, #20
 80105d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80105d8:	9202      	str	r2, [sp, #8]
 80105da:	1b3a      	subs	r2, r7, r4
 80105dc:	3a15      	subs	r2, #21
 80105de:	f022 0203 	bic.w	r2, r2, #3
 80105e2:	3204      	adds	r2, #4
 80105e4:	f104 0115 	add.w	r1, r4, #21
 80105e8:	428f      	cmp	r7, r1
 80105ea:	bf38      	it	cc
 80105ec:	2204      	movcc	r2, #4
 80105ee:	9201      	str	r2, [sp, #4]
 80105f0:	9a02      	ldr	r2, [sp, #8]
 80105f2:	9303      	str	r3, [sp, #12]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d80c      	bhi.n	8010612 <__multiply+0x9e>
 80105f8:	2e00      	cmp	r6, #0
 80105fa:	dd03      	ble.n	8010604 <__multiply+0x90>
 80105fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010600:	2b00      	cmp	r3, #0
 8010602:	d059      	beq.n	80106b8 <__multiply+0x144>
 8010604:	6106      	str	r6, [r0, #16]
 8010606:	b005      	add	sp, #20
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	f843 2b04 	str.w	r2, [r3], #4
 8010610:	e7d8      	b.n	80105c4 <__multiply+0x50>
 8010612:	f8b3 a000 	ldrh.w	sl, [r3]
 8010616:	f1ba 0f00 	cmp.w	sl, #0
 801061a:	d023      	beq.n	8010664 <__multiply+0xf0>
 801061c:	f104 0e14 	add.w	lr, r4, #20
 8010620:	46a9      	mov	r9, r5
 8010622:	f04f 0c00 	mov.w	ip, #0
 8010626:	f85e 2b04 	ldr.w	r2, [lr], #4
 801062a:	f8d9 1000 	ldr.w	r1, [r9]
 801062e:	fa1f fb82 	uxth.w	fp, r2
 8010632:	b289      	uxth	r1, r1
 8010634:	fb0a 110b 	mla	r1, sl, fp, r1
 8010638:	4461      	add	r1, ip
 801063a:	f8d9 c000 	ldr.w	ip, [r9]
 801063e:	0c12      	lsrs	r2, r2, #16
 8010640:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010644:	fb0a c202 	mla	r2, sl, r2, ip
 8010648:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801064c:	b289      	uxth	r1, r1
 801064e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010652:	4577      	cmp	r7, lr
 8010654:	f849 1b04 	str.w	r1, [r9], #4
 8010658:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801065c:	d8e3      	bhi.n	8010626 <__multiply+0xb2>
 801065e:	9a01      	ldr	r2, [sp, #4]
 8010660:	f845 c002 	str.w	ip, [r5, r2]
 8010664:	9a03      	ldr	r2, [sp, #12]
 8010666:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801066a:	3304      	adds	r3, #4
 801066c:	f1b9 0f00 	cmp.w	r9, #0
 8010670:	d020      	beq.n	80106b4 <__multiply+0x140>
 8010672:	6829      	ldr	r1, [r5, #0]
 8010674:	f104 0c14 	add.w	ip, r4, #20
 8010678:	46ae      	mov	lr, r5
 801067a:	f04f 0a00 	mov.w	sl, #0
 801067e:	f8bc b000 	ldrh.w	fp, [ip]
 8010682:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010686:	fb09 220b 	mla	r2, r9, fp, r2
 801068a:	4492      	add	sl, r2
 801068c:	b289      	uxth	r1, r1
 801068e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010692:	f84e 1b04 	str.w	r1, [lr], #4
 8010696:	f85c 2b04 	ldr.w	r2, [ip], #4
 801069a:	f8be 1000 	ldrh.w	r1, [lr]
 801069e:	0c12      	lsrs	r2, r2, #16
 80106a0:	fb09 1102 	mla	r1, r9, r2, r1
 80106a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80106a8:	4567      	cmp	r7, ip
 80106aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80106ae:	d8e6      	bhi.n	801067e <__multiply+0x10a>
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	50a9      	str	r1, [r5, r2]
 80106b4:	3504      	adds	r5, #4
 80106b6:	e79b      	b.n	80105f0 <__multiply+0x7c>
 80106b8:	3e01      	subs	r6, #1
 80106ba:	e79d      	b.n	80105f8 <__multiply+0x84>
 80106bc:	08012de8 	.word	0x08012de8
 80106c0:	08012df9 	.word	0x08012df9

080106c4 <__pow5mult>:
 80106c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106c8:	4615      	mov	r5, r2
 80106ca:	f012 0203 	ands.w	r2, r2, #3
 80106ce:	4606      	mov	r6, r0
 80106d0:	460f      	mov	r7, r1
 80106d2:	d007      	beq.n	80106e4 <__pow5mult+0x20>
 80106d4:	4c25      	ldr	r4, [pc, #148]	; (801076c <__pow5mult+0xa8>)
 80106d6:	3a01      	subs	r2, #1
 80106d8:	2300      	movs	r3, #0
 80106da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106de:	f7ff feed 	bl	80104bc <__multadd>
 80106e2:	4607      	mov	r7, r0
 80106e4:	10ad      	asrs	r5, r5, #2
 80106e6:	d03d      	beq.n	8010764 <__pow5mult+0xa0>
 80106e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106ea:	b97c      	cbnz	r4, 801070c <__pow5mult+0x48>
 80106ec:	2010      	movs	r0, #16
 80106ee:	f7fe fe77 	bl	800f3e0 <malloc>
 80106f2:	4602      	mov	r2, r0
 80106f4:	6270      	str	r0, [r6, #36]	; 0x24
 80106f6:	b928      	cbnz	r0, 8010704 <__pow5mult+0x40>
 80106f8:	4b1d      	ldr	r3, [pc, #116]	; (8010770 <__pow5mult+0xac>)
 80106fa:	481e      	ldr	r0, [pc, #120]	; (8010774 <__pow5mult+0xb0>)
 80106fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010700:	f7fe fe3e 	bl	800f380 <__assert_func>
 8010704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010708:	6004      	str	r4, [r0, #0]
 801070a:	60c4      	str	r4, [r0, #12]
 801070c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010714:	b94c      	cbnz	r4, 801072a <__pow5mult+0x66>
 8010716:	f240 2171 	movw	r1, #625	; 0x271
 801071a:	4630      	mov	r0, r6
 801071c:	f7ff ff14 	bl	8010548 <__i2b>
 8010720:	2300      	movs	r3, #0
 8010722:	f8c8 0008 	str.w	r0, [r8, #8]
 8010726:	4604      	mov	r4, r0
 8010728:	6003      	str	r3, [r0, #0]
 801072a:	f04f 0900 	mov.w	r9, #0
 801072e:	07eb      	lsls	r3, r5, #31
 8010730:	d50a      	bpl.n	8010748 <__pow5mult+0x84>
 8010732:	4639      	mov	r1, r7
 8010734:	4622      	mov	r2, r4
 8010736:	4630      	mov	r0, r6
 8010738:	f7ff ff1c 	bl	8010574 <__multiply>
 801073c:	4639      	mov	r1, r7
 801073e:	4680      	mov	r8, r0
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff fe99 	bl	8010478 <_Bfree>
 8010746:	4647      	mov	r7, r8
 8010748:	106d      	asrs	r5, r5, #1
 801074a:	d00b      	beq.n	8010764 <__pow5mult+0xa0>
 801074c:	6820      	ldr	r0, [r4, #0]
 801074e:	b938      	cbnz	r0, 8010760 <__pow5mult+0x9c>
 8010750:	4622      	mov	r2, r4
 8010752:	4621      	mov	r1, r4
 8010754:	4630      	mov	r0, r6
 8010756:	f7ff ff0d 	bl	8010574 <__multiply>
 801075a:	6020      	str	r0, [r4, #0]
 801075c:	f8c0 9000 	str.w	r9, [r0]
 8010760:	4604      	mov	r4, r0
 8010762:	e7e4      	b.n	801072e <__pow5mult+0x6a>
 8010764:	4638      	mov	r0, r7
 8010766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801076a:	bf00      	nop
 801076c:	08012bc4 	.word	0x08012bc4
 8010770:	08012d77 	.word	0x08012d77
 8010774:	08012df9 	.word	0x08012df9

08010778 <__lshift>:
 8010778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801077c:	460c      	mov	r4, r1
 801077e:	6849      	ldr	r1, [r1, #4]
 8010780:	6923      	ldr	r3, [r4, #16]
 8010782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010786:	68a3      	ldr	r3, [r4, #8]
 8010788:	4607      	mov	r7, r0
 801078a:	4691      	mov	r9, r2
 801078c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010790:	f108 0601 	add.w	r6, r8, #1
 8010794:	42b3      	cmp	r3, r6
 8010796:	db0b      	blt.n	80107b0 <__lshift+0x38>
 8010798:	4638      	mov	r0, r7
 801079a:	f7ff fe2d 	bl	80103f8 <_Balloc>
 801079e:	4605      	mov	r5, r0
 80107a0:	b948      	cbnz	r0, 80107b6 <__lshift+0x3e>
 80107a2:	4602      	mov	r2, r0
 80107a4:	4b2a      	ldr	r3, [pc, #168]	; (8010850 <__lshift+0xd8>)
 80107a6:	482b      	ldr	r0, [pc, #172]	; (8010854 <__lshift+0xdc>)
 80107a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80107ac:	f7fe fde8 	bl	800f380 <__assert_func>
 80107b0:	3101      	adds	r1, #1
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	e7ee      	b.n	8010794 <__lshift+0x1c>
 80107b6:	2300      	movs	r3, #0
 80107b8:	f100 0114 	add.w	r1, r0, #20
 80107bc:	f100 0210 	add.w	r2, r0, #16
 80107c0:	4618      	mov	r0, r3
 80107c2:	4553      	cmp	r3, sl
 80107c4:	db37      	blt.n	8010836 <__lshift+0xbe>
 80107c6:	6920      	ldr	r0, [r4, #16]
 80107c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107cc:	f104 0314 	add.w	r3, r4, #20
 80107d0:	f019 091f 	ands.w	r9, r9, #31
 80107d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80107dc:	d02f      	beq.n	801083e <__lshift+0xc6>
 80107de:	f1c9 0e20 	rsb	lr, r9, #32
 80107e2:	468a      	mov	sl, r1
 80107e4:	f04f 0c00 	mov.w	ip, #0
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	fa02 f209 	lsl.w	r2, r2, r9
 80107ee:	ea42 020c 	orr.w	r2, r2, ip
 80107f2:	f84a 2b04 	str.w	r2, [sl], #4
 80107f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107fa:	4298      	cmp	r0, r3
 80107fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010800:	d8f2      	bhi.n	80107e8 <__lshift+0x70>
 8010802:	1b03      	subs	r3, r0, r4
 8010804:	3b15      	subs	r3, #21
 8010806:	f023 0303 	bic.w	r3, r3, #3
 801080a:	3304      	adds	r3, #4
 801080c:	f104 0215 	add.w	r2, r4, #21
 8010810:	4290      	cmp	r0, r2
 8010812:	bf38      	it	cc
 8010814:	2304      	movcc	r3, #4
 8010816:	f841 c003 	str.w	ip, [r1, r3]
 801081a:	f1bc 0f00 	cmp.w	ip, #0
 801081e:	d001      	beq.n	8010824 <__lshift+0xac>
 8010820:	f108 0602 	add.w	r6, r8, #2
 8010824:	3e01      	subs	r6, #1
 8010826:	4638      	mov	r0, r7
 8010828:	612e      	str	r6, [r5, #16]
 801082a:	4621      	mov	r1, r4
 801082c:	f7ff fe24 	bl	8010478 <_Bfree>
 8010830:	4628      	mov	r0, r5
 8010832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010836:	f842 0f04 	str.w	r0, [r2, #4]!
 801083a:	3301      	adds	r3, #1
 801083c:	e7c1      	b.n	80107c2 <__lshift+0x4a>
 801083e:	3904      	subs	r1, #4
 8010840:	f853 2b04 	ldr.w	r2, [r3], #4
 8010844:	f841 2f04 	str.w	r2, [r1, #4]!
 8010848:	4298      	cmp	r0, r3
 801084a:	d8f9      	bhi.n	8010840 <__lshift+0xc8>
 801084c:	e7ea      	b.n	8010824 <__lshift+0xac>
 801084e:	bf00      	nop
 8010850:	08012de8 	.word	0x08012de8
 8010854:	08012df9 	.word	0x08012df9

08010858 <__mdiff>:
 8010858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085c:	460d      	mov	r5, r1
 801085e:	4607      	mov	r7, r0
 8010860:	4611      	mov	r1, r2
 8010862:	4628      	mov	r0, r5
 8010864:	4614      	mov	r4, r2
 8010866:	f000 fded 	bl	8011444 <__mcmp>
 801086a:	1e06      	subs	r6, r0, #0
 801086c:	d111      	bne.n	8010892 <__mdiff+0x3a>
 801086e:	4631      	mov	r1, r6
 8010870:	4638      	mov	r0, r7
 8010872:	f7ff fdc1 	bl	80103f8 <_Balloc>
 8010876:	4602      	mov	r2, r0
 8010878:	b928      	cbnz	r0, 8010886 <__mdiff+0x2e>
 801087a:	4b39      	ldr	r3, [pc, #228]	; (8010960 <__mdiff+0x108>)
 801087c:	f240 2132 	movw	r1, #562	; 0x232
 8010880:	4838      	ldr	r0, [pc, #224]	; (8010964 <__mdiff+0x10c>)
 8010882:	f7fe fd7d 	bl	800f380 <__assert_func>
 8010886:	2301      	movs	r3, #1
 8010888:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801088c:	4610      	mov	r0, r2
 801088e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010892:	bfa4      	itt	ge
 8010894:	4623      	movge	r3, r4
 8010896:	462c      	movge	r4, r5
 8010898:	4638      	mov	r0, r7
 801089a:	6861      	ldr	r1, [r4, #4]
 801089c:	bfa6      	itte	ge
 801089e:	461d      	movge	r5, r3
 80108a0:	2600      	movge	r6, #0
 80108a2:	2601      	movlt	r6, #1
 80108a4:	f7ff fda8 	bl	80103f8 <_Balloc>
 80108a8:	4602      	mov	r2, r0
 80108aa:	b918      	cbnz	r0, 80108b4 <__mdiff+0x5c>
 80108ac:	4b2c      	ldr	r3, [pc, #176]	; (8010960 <__mdiff+0x108>)
 80108ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80108b2:	e7e5      	b.n	8010880 <__mdiff+0x28>
 80108b4:	6927      	ldr	r7, [r4, #16]
 80108b6:	60c6      	str	r6, [r0, #12]
 80108b8:	692e      	ldr	r6, [r5, #16]
 80108ba:	f104 0014 	add.w	r0, r4, #20
 80108be:	f105 0914 	add.w	r9, r5, #20
 80108c2:	f102 0e14 	add.w	lr, r2, #20
 80108c6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80108ca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80108ce:	3410      	adds	r4, #16
 80108d0:	46f2      	mov	sl, lr
 80108d2:	2100      	movs	r1, #0
 80108d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80108d8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80108dc:	fa1f f883 	uxth.w	r8, r3
 80108e0:	fa11 f18b 	uxtah	r1, r1, fp
 80108e4:	0c1b      	lsrs	r3, r3, #16
 80108e6:	eba1 0808 	sub.w	r8, r1, r8
 80108ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80108f2:	fa1f f888 	uxth.w	r8, r8
 80108f6:	1419      	asrs	r1, r3, #16
 80108f8:	454e      	cmp	r6, r9
 80108fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108fe:	f84a 3b04 	str.w	r3, [sl], #4
 8010902:	d8e7      	bhi.n	80108d4 <__mdiff+0x7c>
 8010904:	1b73      	subs	r3, r6, r5
 8010906:	3b15      	subs	r3, #21
 8010908:	f023 0303 	bic.w	r3, r3, #3
 801090c:	3304      	adds	r3, #4
 801090e:	3515      	adds	r5, #21
 8010910:	42ae      	cmp	r6, r5
 8010912:	bf38      	it	cc
 8010914:	2304      	movcc	r3, #4
 8010916:	4418      	add	r0, r3
 8010918:	4473      	add	r3, lr
 801091a:	469e      	mov	lr, r3
 801091c:	4606      	mov	r6, r0
 801091e:	4566      	cmp	r6, ip
 8010920:	d30e      	bcc.n	8010940 <__mdiff+0xe8>
 8010922:	f10c 0103 	add.w	r1, ip, #3
 8010926:	1a09      	subs	r1, r1, r0
 8010928:	f021 0103 	bic.w	r1, r1, #3
 801092c:	3803      	subs	r0, #3
 801092e:	4584      	cmp	ip, r0
 8010930:	bf38      	it	cc
 8010932:	2100      	movcc	r1, #0
 8010934:	4419      	add	r1, r3
 8010936:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801093a:	b17b      	cbz	r3, 801095c <__mdiff+0x104>
 801093c:	6117      	str	r7, [r2, #16]
 801093e:	e7a5      	b.n	801088c <__mdiff+0x34>
 8010940:	f856 8b04 	ldr.w	r8, [r6], #4
 8010944:	fa11 f488 	uxtah	r4, r1, r8
 8010948:	1425      	asrs	r5, r4, #16
 801094a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801094e:	b2a4      	uxth	r4, r4
 8010950:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010954:	f84e 4b04 	str.w	r4, [lr], #4
 8010958:	1429      	asrs	r1, r5, #16
 801095a:	e7e0      	b.n	801091e <__mdiff+0xc6>
 801095c:	3f01      	subs	r7, #1
 801095e:	e7ea      	b.n	8010936 <__mdiff+0xde>
 8010960:	08012de8 	.word	0x08012de8
 8010964:	08012df9 	.word	0x08012df9

08010968 <__d2b>:
 8010968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801096c:	2101      	movs	r1, #1
 801096e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010972:	4690      	mov	r8, r2
 8010974:	461d      	mov	r5, r3
 8010976:	f7ff fd3f 	bl	80103f8 <_Balloc>
 801097a:	4604      	mov	r4, r0
 801097c:	b930      	cbnz	r0, 801098c <__d2b+0x24>
 801097e:	4602      	mov	r2, r0
 8010980:	4b25      	ldr	r3, [pc, #148]	; (8010a18 <__d2b+0xb0>)
 8010982:	4826      	ldr	r0, [pc, #152]	; (8010a1c <__d2b+0xb4>)
 8010984:	f240 310a 	movw	r1, #778	; 0x30a
 8010988:	f7fe fcfa 	bl	800f380 <__assert_func>
 801098c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010990:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010994:	bb2d      	cbnz	r5, 80109e2 <__d2b+0x7a>
 8010996:	9301      	str	r3, [sp, #4]
 8010998:	f1b8 0300 	subs.w	r3, r8, #0
 801099c:	d026      	beq.n	80109ec <__d2b+0x84>
 801099e:	4668      	mov	r0, sp
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	f000 fd22 	bl	80113ea <__lo0bits>
 80109a6:	9900      	ldr	r1, [sp, #0]
 80109a8:	b1f0      	cbz	r0, 80109e8 <__d2b+0x80>
 80109aa:	9a01      	ldr	r2, [sp, #4]
 80109ac:	f1c0 0320 	rsb	r3, r0, #32
 80109b0:	fa02 f303 	lsl.w	r3, r2, r3
 80109b4:	430b      	orrs	r3, r1
 80109b6:	40c2      	lsrs	r2, r0
 80109b8:	6163      	str	r3, [r4, #20]
 80109ba:	9201      	str	r2, [sp, #4]
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	61a3      	str	r3, [r4, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	bf14      	ite	ne
 80109c4:	2102      	movne	r1, #2
 80109c6:	2101      	moveq	r1, #1
 80109c8:	6121      	str	r1, [r4, #16]
 80109ca:	b1c5      	cbz	r5, 80109fe <__d2b+0x96>
 80109cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109d0:	4405      	add	r5, r0
 80109d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109d6:	603d      	str	r5, [r7, #0]
 80109d8:	6030      	str	r0, [r6, #0]
 80109da:	4620      	mov	r0, r4
 80109dc:	b002      	add	sp, #8
 80109de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109e6:	e7d6      	b.n	8010996 <__d2b+0x2e>
 80109e8:	6161      	str	r1, [r4, #20]
 80109ea:	e7e7      	b.n	80109bc <__d2b+0x54>
 80109ec:	a801      	add	r0, sp, #4
 80109ee:	f000 fcfc 	bl	80113ea <__lo0bits>
 80109f2:	9b01      	ldr	r3, [sp, #4]
 80109f4:	6163      	str	r3, [r4, #20]
 80109f6:	2101      	movs	r1, #1
 80109f8:	6121      	str	r1, [r4, #16]
 80109fa:	3020      	adds	r0, #32
 80109fc:	e7e5      	b.n	80109ca <__d2b+0x62>
 80109fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010a02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a06:	6038      	str	r0, [r7, #0]
 8010a08:	6918      	ldr	r0, [r3, #16]
 8010a0a:	f000 fcce 	bl	80113aa <__hi0bits>
 8010a0e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010a12:	6031      	str	r1, [r6, #0]
 8010a14:	e7e1      	b.n	80109da <__d2b+0x72>
 8010a16:	bf00      	nop
 8010a18:	08012de8 	.word	0x08012de8
 8010a1c:	08012df9 	.word	0x08012df9

08010a20 <_svfiprintf_r>:
 8010a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a24:	4698      	mov	r8, r3
 8010a26:	898b      	ldrh	r3, [r1, #12]
 8010a28:	061b      	lsls	r3, r3, #24
 8010a2a:	b09d      	sub	sp, #116	; 0x74
 8010a2c:	4607      	mov	r7, r0
 8010a2e:	460d      	mov	r5, r1
 8010a30:	4614      	mov	r4, r2
 8010a32:	d50e      	bpl.n	8010a52 <_svfiprintf_r+0x32>
 8010a34:	690b      	ldr	r3, [r1, #16]
 8010a36:	b963      	cbnz	r3, 8010a52 <_svfiprintf_r+0x32>
 8010a38:	2140      	movs	r1, #64	; 0x40
 8010a3a:	f7fe fd2b 	bl	800f494 <_malloc_r>
 8010a3e:	6028      	str	r0, [r5, #0]
 8010a40:	6128      	str	r0, [r5, #16]
 8010a42:	b920      	cbnz	r0, 8010a4e <_svfiprintf_r+0x2e>
 8010a44:	230c      	movs	r3, #12
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a4c:	e0d1      	b.n	8010bf2 <_svfiprintf_r+0x1d2>
 8010a4e:	2340      	movs	r3, #64	; 0x40
 8010a50:	616b      	str	r3, [r5, #20]
 8010a52:	2300      	movs	r3, #0
 8010a54:	9309      	str	r3, [sp, #36]	; 0x24
 8010a56:	2320      	movs	r3, #32
 8010a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a60:	2330      	movs	r3, #48	; 0x30
 8010a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010c0c <_svfiprintf_r+0x1ec>
 8010a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a6a:	f04f 0901 	mov.w	r9, #1
 8010a6e:	4623      	mov	r3, r4
 8010a70:	469a      	mov	sl, r3
 8010a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a76:	b10a      	cbz	r2, 8010a7c <_svfiprintf_r+0x5c>
 8010a78:	2a25      	cmp	r2, #37	; 0x25
 8010a7a:	d1f9      	bne.n	8010a70 <_svfiprintf_r+0x50>
 8010a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010a80:	d00b      	beq.n	8010a9a <_svfiprintf_r+0x7a>
 8010a82:	465b      	mov	r3, fp
 8010a84:	4622      	mov	r2, r4
 8010a86:	4629      	mov	r1, r5
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f000 fd2a 	bl	80114e2 <__ssputs_r>
 8010a8e:	3001      	adds	r0, #1
 8010a90:	f000 80aa 	beq.w	8010be8 <_svfiprintf_r+0x1c8>
 8010a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a96:	445a      	add	r2, fp
 8010a98:	9209      	str	r2, [sp, #36]	; 0x24
 8010a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f000 80a2 	beq.w	8010be8 <_svfiprintf_r+0x1c8>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010aae:	f10a 0a01 	add.w	sl, sl, #1
 8010ab2:	9304      	str	r3, [sp, #16]
 8010ab4:	9307      	str	r3, [sp, #28]
 8010ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010aba:	931a      	str	r3, [sp, #104]	; 0x68
 8010abc:	4654      	mov	r4, sl
 8010abe:	2205      	movs	r2, #5
 8010ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ac4:	4851      	ldr	r0, [pc, #324]	; (8010c0c <_svfiprintf_r+0x1ec>)
 8010ac6:	f7ef fb6b 	bl	80001a0 <memchr>
 8010aca:	9a04      	ldr	r2, [sp, #16]
 8010acc:	b9d8      	cbnz	r0, 8010b06 <_svfiprintf_r+0xe6>
 8010ace:	06d0      	lsls	r0, r2, #27
 8010ad0:	bf44      	itt	mi
 8010ad2:	2320      	movmi	r3, #32
 8010ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ad8:	0711      	lsls	r1, r2, #28
 8010ada:	bf44      	itt	mi
 8010adc:	232b      	movmi	r3, #43	; 0x2b
 8010ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ae8:	d015      	beq.n	8010b16 <_svfiprintf_r+0xf6>
 8010aea:	9a07      	ldr	r2, [sp, #28]
 8010aec:	4654      	mov	r4, sl
 8010aee:	2000      	movs	r0, #0
 8010af0:	f04f 0c0a 	mov.w	ip, #10
 8010af4:	4621      	mov	r1, r4
 8010af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010afa:	3b30      	subs	r3, #48	; 0x30
 8010afc:	2b09      	cmp	r3, #9
 8010afe:	d94e      	bls.n	8010b9e <_svfiprintf_r+0x17e>
 8010b00:	b1b0      	cbz	r0, 8010b30 <_svfiprintf_r+0x110>
 8010b02:	9207      	str	r2, [sp, #28]
 8010b04:	e014      	b.n	8010b30 <_svfiprintf_r+0x110>
 8010b06:	eba0 0308 	sub.w	r3, r0, r8
 8010b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	9304      	str	r3, [sp, #16]
 8010b12:	46a2      	mov	sl, r4
 8010b14:	e7d2      	b.n	8010abc <_svfiprintf_r+0x9c>
 8010b16:	9b03      	ldr	r3, [sp, #12]
 8010b18:	1d19      	adds	r1, r3, #4
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	9103      	str	r1, [sp, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bfbb      	ittet	lt
 8010b22:	425b      	neglt	r3, r3
 8010b24:	f042 0202 	orrlt.w	r2, r2, #2
 8010b28:	9307      	strge	r3, [sp, #28]
 8010b2a:	9307      	strlt	r3, [sp, #28]
 8010b2c:	bfb8      	it	lt
 8010b2e:	9204      	strlt	r2, [sp, #16]
 8010b30:	7823      	ldrb	r3, [r4, #0]
 8010b32:	2b2e      	cmp	r3, #46	; 0x2e
 8010b34:	d10c      	bne.n	8010b50 <_svfiprintf_r+0x130>
 8010b36:	7863      	ldrb	r3, [r4, #1]
 8010b38:	2b2a      	cmp	r3, #42	; 0x2a
 8010b3a:	d135      	bne.n	8010ba8 <_svfiprintf_r+0x188>
 8010b3c:	9b03      	ldr	r3, [sp, #12]
 8010b3e:	1d1a      	adds	r2, r3, #4
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	9203      	str	r2, [sp, #12]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	bfb8      	it	lt
 8010b48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010b4c:	3402      	adds	r4, #2
 8010b4e:	9305      	str	r3, [sp, #20]
 8010b50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010c10 <_svfiprintf_r+0x1f0>
 8010b54:	7821      	ldrb	r1, [r4, #0]
 8010b56:	2203      	movs	r2, #3
 8010b58:	4650      	mov	r0, sl
 8010b5a:	f7ef fb21 	bl	80001a0 <memchr>
 8010b5e:	b140      	cbz	r0, 8010b72 <_svfiprintf_r+0x152>
 8010b60:	2340      	movs	r3, #64	; 0x40
 8010b62:	eba0 000a 	sub.w	r0, r0, sl
 8010b66:	fa03 f000 	lsl.w	r0, r3, r0
 8010b6a:	9b04      	ldr	r3, [sp, #16]
 8010b6c:	4303      	orrs	r3, r0
 8010b6e:	3401      	adds	r4, #1
 8010b70:	9304      	str	r3, [sp, #16]
 8010b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b76:	4827      	ldr	r0, [pc, #156]	; (8010c14 <_svfiprintf_r+0x1f4>)
 8010b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b7c:	2206      	movs	r2, #6
 8010b7e:	f7ef fb0f 	bl	80001a0 <memchr>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d038      	beq.n	8010bf8 <_svfiprintf_r+0x1d8>
 8010b86:	4b24      	ldr	r3, [pc, #144]	; (8010c18 <_svfiprintf_r+0x1f8>)
 8010b88:	bb1b      	cbnz	r3, 8010bd2 <_svfiprintf_r+0x1b2>
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	3307      	adds	r3, #7
 8010b8e:	f023 0307 	bic.w	r3, r3, #7
 8010b92:	3308      	adds	r3, #8
 8010b94:	9303      	str	r3, [sp, #12]
 8010b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b98:	4433      	add	r3, r6
 8010b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b9c:	e767      	b.n	8010a6e <_svfiprintf_r+0x4e>
 8010b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ba2:	460c      	mov	r4, r1
 8010ba4:	2001      	movs	r0, #1
 8010ba6:	e7a5      	b.n	8010af4 <_svfiprintf_r+0xd4>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	3401      	adds	r4, #1
 8010bac:	9305      	str	r3, [sp, #20]
 8010bae:	4619      	mov	r1, r3
 8010bb0:	f04f 0c0a 	mov.w	ip, #10
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bba:	3a30      	subs	r2, #48	; 0x30
 8010bbc:	2a09      	cmp	r2, #9
 8010bbe:	d903      	bls.n	8010bc8 <_svfiprintf_r+0x1a8>
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d0c5      	beq.n	8010b50 <_svfiprintf_r+0x130>
 8010bc4:	9105      	str	r1, [sp, #20]
 8010bc6:	e7c3      	b.n	8010b50 <_svfiprintf_r+0x130>
 8010bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bcc:	4604      	mov	r4, r0
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e7f0      	b.n	8010bb4 <_svfiprintf_r+0x194>
 8010bd2:	ab03      	add	r3, sp, #12
 8010bd4:	9300      	str	r3, [sp, #0]
 8010bd6:	462a      	mov	r2, r5
 8010bd8:	4b10      	ldr	r3, [pc, #64]	; (8010c1c <_svfiprintf_r+0x1fc>)
 8010bda:	a904      	add	r1, sp, #16
 8010bdc:	4638      	mov	r0, r7
 8010bde:	f7fe fde3 	bl	800f7a8 <_printf_float>
 8010be2:	1c42      	adds	r2, r0, #1
 8010be4:	4606      	mov	r6, r0
 8010be6:	d1d6      	bne.n	8010b96 <_svfiprintf_r+0x176>
 8010be8:	89ab      	ldrh	r3, [r5, #12]
 8010bea:	065b      	lsls	r3, r3, #25
 8010bec:	f53f af2c 	bmi.w	8010a48 <_svfiprintf_r+0x28>
 8010bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bf2:	b01d      	add	sp, #116	; 0x74
 8010bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	ab03      	add	r3, sp, #12
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	462a      	mov	r2, r5
 8010bfe:	4b07      	ldr	r3, [pc, #28]	; (8010c1c <_svfiprintf_r+0x1fc>)
 8010c00:	a904      	add	r1, sp, #16
 8010c02:	4638      	mov	r0, r7
 8010c04:	f7fe fffa 	bl	800fbfc <_printf_i>
 8010c08:	e7eb      	b.n	8010be2 <_svfiprintf_r+0x1c2>
 8010c0a:	bf00      	nop
 8010c0c:	08012d25 	.word	0x08012d25
 8010c10:	08012d2b 	.word	0x08012d2b
 8010c14:	08012d2f 	.word	0x08012d2f
 8010c18:	0800f7a9 	.word	0x0800f7a9
 8010c1c:	080114e3 	.word	0x080114e3

08010c20 <_write_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d07      	ldr	r5, [pc, #28]	; (8010c40 <_write_r+0x20>)
 8010c24:	4604      	mov	r4, r0
 8010c26:	4608      	mov	r0, r1
 8010c28:	4611      	mov	r1, r2
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	602a      	str	r2, [r5, #0]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	f7f2 fce6 	bl	8003600 <_write>
 8010c34:	1c43      	adds	r3, r0, #1
 8010c36:	d102      	bne.n	8010c3e <_write_r+0x1e>
 8010c38:	682b      	ldr	r3, [r5, #0]
 8010c3a:	b103      	cbz	r3, 8010c3e <_write_r+0x1e>
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	bd38      	pop	{r3, r4, r5, pc}
 8010c40:	200015f4 	.word	0x200015f4

08010c44 <_close_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4d06      	ldr	r5, [pc, #24]	; (8010c60 <_close_r+0x1c>)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4608      	mov	r0, r1
 8010c4e:	602b      	str	r3, [r5, #0]
 8010c50:	f7f2 fcee 	bl	8003630 <_close>
 8010c54:	1c43      	adds	r3, r0, #1
 8010c56:	d102      	bne.n	8010c5e <_close_r+0x1a>
 8010c58:	682b      	ldr	r3, [r5, #0]
 8010c5a:	b103      	cbz	r3, 8010c5e <_close_r+0x1a>
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	200015f4 	.word	0x200015f4

08010c64 <_fstat_r>:
 8010c64:	b538      	push	{r3, r4, r5, lr}
 8010c66:	4d07      	ldr	r5, [pc, #28]	; (8010c84 <_fstat_r+0x20>)
 8010c68:	2300      	movs	r3, #0
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	4608      	mov	r0, r1
 8010c6e:	4611      	mov	r1, r2
 8010c70:	602b      	str	r3, [r5, #0]
 8010c72:	f7f2 fced 	bl	8003650 <_fstat>
 8010c76:	1c43      	adds	r3, r0, #1
 8010c78:	d102      	bne.n	8010c80 <_fstat_r+0x1c>
 8010c7a:	682b      	ldr	r3, [r5, #0]
 8010c7c:	b103      	cbz	r3, 8010c80 <_fstat_r+0x1c>
 8010c7e:	6023      	str	r3, [r4, #0]
 8010c80:	bd38      	pop	{r3, r4, r5, pc}
 8010c82:	bf00      	nop
 8010c84:	200015f4 	.word	0x200015f4

08010c88 <_isatty_r>:
 8010c88:	b538      	push	{r3, r4, r5, lr}
 8010c8a:	4d06      	ldr	r5, [pc, #24]	; (8010ca4 <_isatty_r+0x1c>)
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4604      	mov	r4, r0
 8010c90:	4608      	mov	r0, r1
 8010c92:	602b      	str	r3, [r5, #0]
 8010c94:	f7f2 fcd2 	bl	800363c <_isatty>
 8010c98:	1c43      	adds	r3, r0, #1
 8010c9a:	d102      	bne.n	8010ca2 <_isatty_r+0x1a>
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	b103      	cbz	r3, 8010ca2 <_isatty_r+0x1a>
 8010ca0:	6023      	str	r3, [r4, #0]
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	200015f4 	.word	0x200015f4

08010ca8 <_lseek_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4d07      	ldr	r5, [pc, #28]	; (8010cc8 <_lseek_r+0x20>)
 8010cac:	4604      	mov	r4, r0
 8010cae:	4608      	mov	r0, r1
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	602a      	str	r2, [r5, #0]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	f7f2 fcbe 	bl	8003638 <_lseek>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	d102      	bne.n	8010cc6 <_lseek_r+0x1e>
 8010cc0:	682b      	ldr	r3, [r5, #0]
 8010cc2:	b103      	cbz	r3, 8010cc6 <_lseek_r+0x1e>
 8010cc4:	6023      	str	r3, [r4, #0]
 8010cc6:	bd38      	pop	{r3, r4, r5, pc}
 8010cc8:	200015f4 	.word	0x200015f4

08010ccc <_read_r>:
 8010ccc:	b538      	push	{r3, r4, r5, lr}
 8010cce:	4d07      	ldr	r5, [pc, #28]	; (8010cec <_read_r+0x20>)
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	4608      	mov	r0, r1
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	602a      	str	r2, [r5, #0]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	f7f2 fc70 	bl	80035c0 <_read>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_read_r+0x1e>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_read_r+0x1e>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	200015f4 	.word	0x200015f4

08010cf0 <_ZdlPvj>:
 8010cf0:	f000 b8d6 	b.w	8010ea0 <_ZdlPv>

08010cf4 <_Znwj>:
 8010cf4:	2801      	cmp	r0, #1
 8010cf6:	bf38      	it	cc
 8010cf8:	2001      	movcc	r0, #1
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7fe fb6e 	bl	800f3e0 <malloc>
 8010d04:	b930      	cbnz	r0, 8010d14 <_Znwj+0x20>
 8010d06:	f7fe fb33 	bl	800f370 <_ZSt15get_new_handlerv>
 8010d0a:	b908      	cbnz	r0, 8010d10 <_Znwj+0x1c>
 8010d0c:	f000 f8cd 	bl	8010eaa <abort>
 8010d10:	4780      	blx	r0
 8010d12:	e7f4      	b.n	8010cfe <_Znwj+0xa>
 8010d14:	bd10      	pop	{r4, pc}

08010d16 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8010d16:	68c3      	ldr	r3, [r0, #12]
 8010d18:	689a      	ldr	r2, [r3, #8]
 8010d1a:	60c2      	str	r2, [r0, #12]
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	b102      	cbz	r2, 8010d22 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8010d20:	6050      	str	r0, [r2, #4]
 8010d22:	6842      	ldr	r2, [r0, #4]
 8010d24:	605a      	str	r2, [r3, #4]
 8010d26:	680c      	ldr	r4, [r1, #0]
 8010d28:	4284      	cmp	r4, r0
 8010d2a:	d103      	bne.n	8010d34 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8010d2c:	600b      	str	r3, [r1, #0]
 8010d2e:	6098      	str	r0, [r3, #8]
 8010d30:	6043      	str	r3, [r0, #4]
 8010d32:	bd10      	pop	{r4, pc}
 8010d34:	6891      	ldr	r1, [r2, #8]
 8010d36:	4281      	cmp	r1, r0
 8010d38:	bf0c      	ite	eq
 8010d3a:	6093      	streq	r3, [r2, #8]
 8010d3c:	60d3      	strne	r3, [r2, #12]
 8010d3e:	e7f6      	b.n	8010d2e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08010d40 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8010d40:	6883      	ldr	r3, [r0, #8]
 8010d42:	68da      	ldr	r2, [r3, #12]
 8010d44:	6082      	str	r2, [r0, #8]
 8010d46:	b510      	push	{r4, lr}
 8010d48:	b102      	cbz	r2, 8010d4c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8010d4a:	6050      	str	r0, [r2, #4]
 8010d4c:	6842      	ldr	r2, [r0, #4]
 8010d4e:	605a      	str	r2, [r3, #4]
 8010d50:	680c      	ldr	r4, [r1, #0]
 8010d52:	4284      	cmp	r4, r0
 8010d54:	d103      	bne.n	8010d5e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8010d56:	600b      	str	r3, [r1, #0]
 8010d58:	60d8      	str	r0, [r3, #12]
 8010d5a:	6043      	str	r3, [r0, #4]
 8010d5c:	bd10      	pop	{r4, pc}
 8010d5e:	68d1      	ldr	r1, [r2, #12]
 8010d60:	4281      	cmp	r1, r0
 8010d62:	bf0c      	ite	eq
 8010d64:	60d3      	streq	r3, [r2, #12]
 8010d66:	6093      	strne	r3, [r2, #8]
 8010d68:	e7f6      	b.n	8010d58 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08010d6a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8010d6a:	68c3      	ldr	r3, [r0, #12]
 8010d6c:	b123      	cbz	r3, 8010d78 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8010d6e:	4618      	mov	r0, r3
 8010d70:	689b      	ldr	r3, [r3, #8]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1fb      	bne.n	8010d6e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8010d76:	4770      	bx	lr
 8010d78:	6843      	ldr	r3, [r0, #4]
 8010d7a:	68da      	ldr	r2, [r3, #12]
 8010d7c:	4282      	cmp	r2, r0
 8010d7e:	d102      	bne.n	8010d86 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8010d80:	4618      	mov	r0, r3
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	e7f9      	b.n	8010d7a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 8010d86:	68c2      	ldr	r2, [r0, #12]
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	bf18      	it	ne
 8010d8c:	4618      	movne	r0, r3
 8010d8e:	4770      	bx	lr

08010d90 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8010d90:	7802      	ldrb	r2, [r0, #0]
 8010d92:	4603      	mov	r3, r0
 8010d94:	b92a      	cbnz	r2, 8010da2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8010d96:	6842      	ldr	r2, [r0, #4]
 8010d98:	6852      	ldr	r2, [r2, #4]
 8010d9a:	4282      	cmp	r2, r0
 8010d9c:	d101      	bne.n	8010da2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8010d9e:	68d0      	ldr	r0, [r2, #12]
 8010da0:	4770      	bx	lr
 8010da2:	689a      	ldr	r2, [r3, #8]
 8010da4:	b122      	cbz	r2, 8010db0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8010da6:	4610      	mov	r0, r2
 8010da8:	68d2      	ldr	r2, [r2, #12]
 8010daa:	2a00      	cmp	r2, #0
 8010dac:	d1fb      	bne.n	8010da6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8010dae:	4770      	bx	lr
 8010db0:	6858      	ldr	r0, [r3, #4]
 8010db2:	6882      	ldr	r2, [r0, #8]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d102      	bne.n	8010dbe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2e>
 8010db8:	4603      	mov	r3, r0
 8010dba:	6840      	ldr	r0, [r0, #4]
 8010dbc:	e7f9      	b.n	8010db2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>
 8010dbe:	4770      	bx	lr

08010dc0 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8010dc0:	f7ff bfd3 	b.w	8010d6a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08010dc4 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8010dc4:	f7ff bfe4 	b.w	8010d90 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08010dc8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8010dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	461e      	mov	r6, r3
 8010dce:	f103 0804 	add.w	r8, r3, #4
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8010dd8:	460c      	mov	r4, r1
 8010dda:	604a      	str	r2, [r1, #4]
 8010ddc:	700b      	strb	r3, [r1, #0]
 8010dde:	b300      	cbz	r0, 8010e22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8010de0:	4296      	cmp	r6, r2
 8010de2:	6091      	str	r1, [r2, #8]
 8010de4:	d118      	bne.n	8010e18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8010de6:	6071      	str	r1, [r6, #4]
 8010de8:	60f4      	str	r4, [r6, #12]
 8010dea:	2701      	movs	r7, #1
 8010dec:	f04f 0900 	mov.w	r9, #0
 8010df0:	6873      	ldr	r3, [r6, #4]
 8010df2:	42a3      	cmp	r3, r4
 8010df4:	d03f      	beq.n	8010e76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8010df6:	6860      	ldr	r0, [r4, #4]
 8010df8:	7802      	ldrb	r2, [r0, #0]
 8010dfa:	2a00      	cmp	r2, #0
 8010dfc:	d13b      	bne.n	8010e76 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8010dfe:	6845      	ldr	r5, [r0, #4]
 8010e00:	68ab      	ldr	r3, [r5, #8]
 8010e02:	4298      	cmp	r0, r3
 8010e04:	d123      	bne.n	8010e4e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8010e06:	68eb      	ldr	r3, [r5, #12]
 8010e08:	b183      	cbz	r3, 8010e2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8010e0a:	781a      	ldrb	r2, [r3, #0]
 8010e0c:	b972      	cbnz	r2, 8010e2c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8010e0e:	7007      	strb	r7, [r0, #0]
 8010e10:	701f      	strb	r7, [r3, #0]
 8010e12:	702a      	strb	r2, [r5, #0]
 8010e14:	462c      	mov	r4, r5
 8010e16:	e7eb      	b.n	8010df0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8010e18:	68b3      	ldr	r3, [r6, #8]
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d1e5      	bne.n	8010dea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8010e1e:	60b1      	str	r1, [r6, #8]
 8010e20:	e7e3      	b.n	8010dea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8010e22:	60d1      	str	r1, [r2, #12]
 8010e24:	68f3      	ldr	r3, [r6, #12]
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d1df      	bne.n	8010dea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8010e2a:	e7dd      	b.n	8010de8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8010e2c:	68c3      	ldr	r3, [r0, #12]
 8010e2e:	42a3      	cmp	r3, r4
 8010e30:	d103      	bne.n	8010e3a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8010e32:	4641      	mov	r1, r8
 8010e34:	f7ff ff6f 	bl	8010d16 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	6863      	ldr	r3, [r4, #4]
 8010e3c:	4641      	mov	r1, r8
 8010e3e:	701f      	strb	r7, [r3, #0]
 8010e40:	4628      	mov	r0, r5
 8010e42:	f885 9000 	strb.w	r9, [r5]
 8010e46:	f7ff ff7b 	bl	8010d40 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8010e4a:	4625      	mov	r5, r4
 8010e4c:	e7e2      	b.n	8010e14 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8010e4e:	b113      	cbz	r3, 8010e56 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8010e50:	781a      	ldrb	r2, [r3, #0]
 8010e52:	2a00      	cmp	r2, #0
 8010e54:	d0db      	beq.n	8010e0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8010e56:	6883      	ldr	r3, [r0, #8]
 8010e58:	42a3      	cmp	r3, r4
 8010e5a:	d103      	bne.n	8010e64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8010e5c:	4641      	mov	r1, r8
 8010e5e:	f7ff ff6f 	bl	8010d40 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8010e62:	4604      	mov	r4, r0
 8010e64:	6863      	ldr	r3, [r4, #4]
 8010e66:	4641      	mov	r1, r8
 8010e68:	701f      	strb	r7, [r3, #0]
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f885 9000 	strb.w	r9, [r5]
 8010e70:	f7ff ff51 	bl	8010d16 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8010e74:	e7e9      	b.n	8010e4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8010e76:	2201      	movs	r2, #1
 8010e78:	701a      	strb	r2, [r3, #0]
 8010e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010e7e <_ZSt17__throw_bad_allocv>:
 8010e7e:	b508      	push	{r3, lr}
 8010e80:	f000 f813 	bl	8010eaa <abort>

08010e84 <_ZSt19__throw_logic_errorPKc>:
 8010e84:	b508      	push	{r3, lr}
 8010e86:	f000 f810 	bl	8010eaa <abort>

08010e8a <_ZSt20__throw_length_errorPKc>:
 8010e8a:	b508      	push	{r3, lr}
 8010e8c:	f000 f80d 	bl	8010eaa <abort>

08010e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010e90:	4603      	mov	r3, r0
 8010e92:	f853 0b08 	ldr.w	r0, [r3], #8
 8010e96:	4298      	cmp	r0, r3
 8010e98:	d001      	beq.n	8010e9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8010e9a:	f000 b801 	b.w	8010ea0 <_ZdlPv>
 8010e9e:	4770      	bx	lr

08010ea0 <_ZdlPv>:
 8010ea0:	f7fe baa6 	b.w	800f3f0 <free>

08010ea4 <fabs>:
 8010ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010ea8:	4770      	bx	lr

08010eaa <abort>:
 8010eaa:	b508      	push	{r3, lr}
 8010eac:	2006      	movs	r0, #6
 8010eae:	f7fe ffdb 	bl	800fe68 <raise>
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	f7f2 fbd2 	bl	800365c <_exit>

08010eb8 <memcpy>:
 8010eb8:	440a      	add	r2, r1
 8010eba:	4291      	cmp	r1, r2
 8010ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ec0:	d100      	bne.n	8010ec4 <memcpy+0xc>
 8010ec2:	4770      	bx	lr
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ece:	4291      	cmp	r1, r2
 8010ed0:	d1f9      	bne.n	8010ec6 <memcpy+0xe>
 8010ed2:	bd10      	pop	{r4, pc}

08010ed4 <memmove>:
 8010ed4:	4288      	cmp	r0, r1
 8010ed6:	b510      	push	{r4, lr}
 8010ed8:	eb01 0402 	add.w	r4, r1, r2
 8010edc:	d902      	bls.n	8010ee4 <memmove+0x10>
 8010ede:	4284      	cmp	r4, r0
 8010ee0:	4623      	mov	r3, r4
 8010ee2:	d807      	bhi.n	8010ef4 <memmove+0x20>
 8010ee4:	1e43      	subs	r3, r0, #1
 8010ee6:	42a1      	cmp	r1, r4
 8010ee8:	d008      	beq.n	8010efc <memmove+0x28>
 8010eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ef2:	e7f8      	b.n	8010ee6 <memmove+0x12>
 8010ef4:	4402      	add	r2, r0
 8010ef6:	4601      	mov	r1, r0
 8010ef8:	428a      	cmp	r2, r1
 8010efa:	d100      	bne.n	8010efe <memmove+0x2a>
 8010efc:	bd10      	pop	{r4, pc}
 8010efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f06:	e7f7      	b.n	8010ef8 <memmove+0x24>

08010f08 <memset>:
 8010f08:	4402      	add	r2, r0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d100      	bne.n	8010f12 <memset+0xa>
 8010f10:	4770      	bx	lr
 8010f12:	f803 1b01 	strb.w	r1, [r3], #1
 8010f16:	e7f9      	b.n	8010f0c <memset+0x4>

08010f18 <__sfputc_r>:
 8010f18:	6893      	ldr	r3, [r2, #8]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	b410      	push	{r4}
 8010f20:	6093      	str	r3, [r2, #8]
 8010f22:	da07      	bge.n	8010f34 <__sfputc_r+0x1c>
 8010f24:	6994      	ldr	r4, [r2, #24]
 8010f26:	42a3      	cmp	r3, r4
 8010f28:	db01      	blt.n	8010f2e <__sfputc_r+0x16>
 8010f2a:	290a      	cmp	r1, #10
 8010f2c:	d102      	bne.n	8010f34 <__sfputc_r+0x1c>
 8010f2e:	bc10      	pop	{r4}
 8010f30:	f7fe bfd4 	b.w	800fedc <__swbuf_r>
 8010f34:	6813      	ldr	r3, [r2, #0]
 8010f36:	1c58      	adds	r0, r3, #1
 8010f38:	6010      	str	r0, [r2, #0]
 8010f3a:	7019      	strb	r1, [r3, #0]
 8010f3c:	4608      	mov	r0, r1
 8010f3e:	bc10      	pop	{r4}
 8010f40:	4770      	bx	lr

08010f42 <__sfputs_r>:
 8010f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f44:	4606      	mov	r6, r0
 8010f46:	460f      	mov	r7, r1
 8010f48:	4614      	mov	r4, r2
 8010f4a:	18d5      	adds	r5, r2, r3
 8010f4c:	42ac      	cmp	r4, r5
 8010f4e:	d101      	bne.n	8010f54 <__sfputs_r+0x12>
 8010f50:	2000      	movs	r0, #0
 8010f52:	e007      	b.n	8010f64 <__sfputs_r+0x22>
 8010f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f58:	463a      	mov	r2, r7
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	f7ff ffdc 	bl	8010f18 <__sfputc_r>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d1f3      	bne.n	8010f4c <__sfputs_r+0xa>
 8010f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f66 <__cvt>:
 8010f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f6a:	b088      	sub	sp, #32
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	461f      	mov	r7, r3
 8010f70:	4614      	mov	r4, r2
 8010f72:	bfb8      	it	lt
 8010f74:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010f7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010f80:	bfb6      	itet	lt
 8010f82:	461f      	movlt	r7, r3
 8010f84:	2300      	movge	r3, #0
 8010f86:	232d      	movlt	r3, #45	; 0x2d
 8010f88:	7013      	strb	r3, [r2, #0]
 8010f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f8c:	f023 0820 	bic.w	r8, r3, #32
 8010f90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010f94:	d005      	beq.n	8010fa2 <__cvt+0x3c>
 8010f96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010f9a:	d100      	bne.n	8010f9e <__cvt+0x38>
 8010f9c:	3501      	adds	r5, #1
 8010f9e:	2302      	movs	r3, #2
 8010fa0:	e000      	b.n	8010fa4 <__cvt+0x3e>
 8010fa2:	2303      	movs	r3, #3
 8010fa4:	aa07      	add	r2, sp, #28
 8010fa6:	9204      	str	r2, [sp, #16]
 8010fa8:	aa06      	add	r2, sp, #24
 8010faa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010fae:	e9cd 3500 	strd	r3, r5, [sp]
 8010fb2:	4622      	mov	r2, r4
 8010fb4:	463b      	mov	r3, r7
 8010fb6:	f7f0 f86b 	bl	8001090 <_dtoa_r>
 8010fba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	d102      	bne.n	8010fc8 <__cvt+0x62>
 8010fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fc4:	07db      	lsls	r3, r3, #31
 8010fc6:	d522      	bpl.n	801100e <__cvt+0xa8>
 8010fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010fcc:	eb06 0905 	add.w	r9, r6, r5
 8010fd0:	d110      	bne.n	8010ff4 <__cvt+0x8e>
 8010fd2:	7833      	ldrb	r3, [r6, #0]
 8010fd4:	2b30      	cmp	r3, #48	; 0x30
 8010fd6:	d10a      	bne.n	8010fee <__cvt+0x88>
 8010fd8:	2200      	movs	r2, #0
 8010fda:	2300      	movs	r3, #0
 8010fdc:	4620      	mov	r0, r4
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef fd52 	bl	8000a88 <__aeabi_dcmpeq>
 8010fe4:	b918      	cbnz	r0, 8010fee <__cvt+0x88>
 8010fe6:	f1c5 0501 	rsb	r5, r5, #1
 8010fea:	f8ca 5000 	str.w	r5, [sl]
 8010fee:	f8da 3000 	ldr.w	r3, [sl]
 8010ff2:	4499      	add	r9, r3
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	4639      	mov	r1, r7
 8010ffc:	f7ef fd44 	bl	8000a88 <__aeabi_dcmpeq>
 8011000:	b108      	cbz	r0, 8011006 <__cvt+0xa0>
 8011002:	f8cd 901c 	str.w	r9, [sp, #28]
 8011006:	2230      	movs	r2, #48	; 0x30
 8011008:	9b07      	ldr	r3, [sp, #28]
 801100a:	454b      	cmp	r3, r9
 801100c:	d307      	bcc.n	801101e <__cvt+0xb8>
 801100e:	9b07      	ldr	r3, [sp, #28]
 8011010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011012:	1b9b      	subs	r3, r3, r6
 8011014:	4630      	mov	r0, r6
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	b008      	add	sp, #32
 801101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101e:	1c59      	adds	r1, r3, #1
 8011020:	9107      	str	r1, [sp, #28]
 8011022:	701a      	strb	r2, [r3, #0]
 8011024:	e7f0      	b.n	8011008 <__cvt+0xa2>

08011026 <__exponent>:
 8011026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011028:	4603      	mov	r3, r0
 801102a:	2900      	cmp	r1, #0
 801102c:	bfb8      	it	lt
 801102e:	4249      	neglt	r1, r1
 8011030:	f803 2b02 	strb.w	r2, [r3], #2
 8011034:	bfb4      	ite	lt
 8011036:	222d      	movlt	r2, #45	; 0x2d
 8011038:	222b      	movge	r2, #43	; 0x2b
 801103a:	2909      	cmp	r1, #9
 801103c:	7042      	strb	r2, [r0, #1]
 801103e:	dd2a      	ble.n	8011096 <__exponent+0x70>
 8011040:	f10d 0407 	add.w	r4, sp, #7
 8011044:	46a4      	mov	ip, r4
 8011046:	270a      	movs	r7, #10
 8011048:	46a6      	mov	lr, r4
 801104a:	460a      	mov	r2, r1
 801104c:	fb91 f6f7 	sdiv	r6, r1, r7
 8011050:	fb07 1516 	mls	r5, r7, r6, r1
 8011054:	3530      	adds	r5, #48	; 0x30
 8011056:	2a63      	cmp	r2, #99	; 0x63
 8011058:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801105c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011060:	4631      	mov	r1, r6
 8011062:	dcf1      	bgt.n	8011048 <__exponent+0x22>
 8011064:	3130      	adds	r1, #48	; 0x30
 8011066:	f1ae 0502 	sub.w	r5, lr, #2
 801106a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801106e:	1c44      	adds	r4, r0, #1
 8011070:	4629      	mov	r1, r5
 8011072:	4561      	cmp	r1, ip
 8011074:	d30a      	bcc.n	801108c <__exponent+0x66>
 8011076:	f10d 0209 	add.w	r2, sp, #9
 801107a:	eba2 020e 	sub.w	r2, r2, lr
 801107e:	4565      	cmp	r5, ip
 8011080:	bf88      	it	hi
 8011082:	2200      	movhi	r2, #0
 8011084:	4413      	add	r3, r2
 8011086:	1a18      	subs	r0, r3, r0
 8011088:	b003      	add	sp, #12
 801108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801108c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011090:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011094:	e7ed      	b.n	8011072 <__exponent+0x4c>
 8011096:	2330      	movs	r3, #48	; 0x30
 8011098:	3130      	adds	r1, #48	; 0x30
 801109a:	7083      	strb	r3, [r0, #2]
 801109c:	70c1      	strb	r1, [r0, #3]
 801109e:	1d03      	adds	r3, r0, #4
 80110a0:	e7f1      	b.n	8011086 <__exponent+0x60>

080110a2 <_printf_common>:
 80110a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a6:	4616      	mov	r6, r2
 80110a8:	4699      	mov	r9, r3
 80110aa:	688a      	ldr	r2, [r1, #8]
 80110ac:	690b      	ldr	r3, [r1, #16]
 80110ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110b2:	4293      	cmp	r3, r2
 80110b4:	bfb8      	it	lt
 80110b6:	4613      	movlt	r3, r2
 80110b8:	6033      	str	r3, [r6, #0]
 80110ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110be:	4607      	mov	r7, r0
 80110c0:	460c      	mov	r4, r1
 80110c2:	b10a      	cbz	r2, 80110c8 <_printf_common+0x26>
 80110c4:	3301      	adds	r3, #1
 80110c6:	6033      	str	r3, [r6, #0]
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	0699      	lsls	r1, r3, #26
 80110cc:	bf42      	ittt	mi
 80110ce:	6833      	ldrmi	r3, [r6, #0]
 80110d0:	3302      	addmi	r3, #2
 80110d2:	6033      	strmi	r3, [r6, #0]
 80110d4:	6825      	ldr	r5, [r4, #0]
 80110d6:	f015 0506 	ands.w	r5, r5, #6
 80110da:	d106      	bne.n	80110ea <_printf_common+0x48>
 80110dc:	f104 0a19 	add.w	sl, r4, #25
 80110e0:	68e3      	ldr	r3, [r4, #12]
 80110e2:	6832      	ldr	r2, [r6, #0]
 80110e4:	1a9b      	subs	r3, r3, r2
 80110e6:	42ab      	cmp	r3, r5
 80110e8:	dc26      	bgt.n	8011138 <_printf_common+0x96>
 80110ea:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110ee:	1e13      	subs	r3, r2, #0
 80110f0:	6822      	ldr	r2, [r4, #0]
 80110f2:	bf18      	it	ne
 80110f4:	2301      	movne	r3, #1
 80110f6:	0692      	lsls	r2, r2, #26
 80110f8:	d42b      	bmi.n	8011152 <_printf_common+0xb0>
 80110fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110fe:	4649      	mov	r1, r9
 8011100:	4638      	mov	r0, r7
 8011102:	47c0      	blx	r8
 8011104:	3001      	adds	r0, #1
 8011106:	d01e      	beq.n	8011146 <_printf_common+0xa4>
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	68e5      	ldr	r5, [r4, #12]
 801110c:	6832      	ldr	r2, [r6, #0]
 801110e:	f003 0306 	and.w	r3, r3, #6
 8011112:	2b04      	cmp	r3, #4
 8011114:	bf08      	it	eq
 8011116:	1aad      	subeq	r5, r5, r2
 8011118:	68a3      	ldr	r3, [r4, #8]
 801111a:	6922      	ldr	r2, [r4, #16]
 801111c:	bf0c      	ite	eq
 801111e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011122:	2500      	movne	r5, #0
 8011124:	4293      	cmp	r3, r2
 8011126:	bfc4      	itt	gt
 8011128:	1a9b      	subgt	r3, r3, r2
 801112a:	18ed      	addgt	r5, r5, r3
 801112c:	2600      	movs	r6, #0
 801112e:	341a      	adds	r4, #26
 8011130:	42b5      	cmp	r5, r6
 8011132:	d11a      	bne.n	801116a <_printf_common+0xc8>
 8011134:	2000      	movs	r0, #0
 8011136:	e008      	b.n	801114a <_printf_common+0xa8>
 8011138:	2301      	movs	r3, #1
 801113a:	4652      	mov	r2, sl
 801113c:	4649      	mov	r1, r9
 801113e:	4638      	mov	r0, r7
 8011140:	47c0      	blx	r8
 8011142:	3001      	adds	r0, #1
 8011144:	d103      	bne.n	801114e <_printf_common+0xac>
 8011146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801114e:	3501      	adds	r5, #1
 8011150:	e7c6      	b.n	80110e0 <_printf_common+0x3e>
 8011152:	18e1      	adds	r1, r4, r3
 8011154:	1c5a      	adds	r2, r3, #1
 8011156:	2030      	movs	r0, #48	; 0x30
 8011158:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801115c:	4422      	add	r2, r4
 801115e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011166:	3302      	adds	r3, #2
 8011168:	e7c7      	b.n	80110fa <_printf_common+0x58>
 801116a:	2301      	movs	r3, #1
 801116c:	4622      	mov	r2, r4
 801116e:	4649      	mov	r1, r9
 8011170:	4638      	mov	r0, r7
 8011172:	47c0      	blx	r8
 8011174:	3001      	adds	r0, #1
 8011176:	d0e6      	beq.n	8011146 <_printf_common+0xa4>
 8011178:	3601      	adds	r6, #1
 801117a:	e7d9      	b.n	8011130 <_printf_common+0x8e>

0801117c <_raise_r>:
 801117c:	291f      	cmp	r1, #31
 801117e:	b538      	push	{r3, r4, r5, lr}
 8011180:	4604      	mov	r4, r0
 8011182:	460d      	mov	r5, r1
 8011184:	d904      	bls.n	8011190 <_raise_r+0x14>
 8011186:	2316      	movs	r3, #22
 8011188:	6003      	str	r3, [r0, #0]
 801118a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011192:	b112      	cbz	r2, 801119a <_raise_r+0x1e>
 8011194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011198:	b94b      	cbnz	r3, 80111ae <_raise_r+0x32>
 801119a:	4620      	mov	r0, r4
 801119c:	f000 f816 	bl	80111cc <_getpid_r>
 80111a0:	462a      	mov	r2, r5
 80111a2:	4601      	mov	r1, r0
 80111a4:	4620      	mov	r0, r4
 80111a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111aa:	f7fe be65 	b.w	800fe78 <_kill_r>
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d00a      	beq.n	80111c8 <_raise_r+0x4c>
 80111b2:	1c59      	adds	r1, r3, #1
 80111b4:	d103      	bne.n	80111be <_raise_r+0x42>
 80111b6:	2316      	movs	r3, #22
 80111b8:	6003      	str	r3, [r0, #0]
 80111ba:	2001      	movs	r0, #1
 80111bc:	e7e7      	b.n	801118e <_raise_r+0x12>
 80111be:	2400      	movs	r4, #0
 80111c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111c4:	4628      	mov	r0, r5
 80111c6:	4798      	blx	r3
 80111c8:	2000      	movs	r0, #0
 80111ca:	e7e0      	b.n	801118e <_raise_r+0x12>

080111cc <_getpid_r>:
 80111cc:	f7f2 ba3e 	b.w	800364c <_getpid>

080111d0 <strnlen>:
 80111d0:	b510      	push	{r4, lr}
 80111d2:	4602      	mov	r2, r0
 80111d4:	4401      	add	r1, r0
 80111d6:	428a      	cmp	r2, r1
 80111d8:	4613      	mov	r3, r2
 80111da:	d003      	beq.n	80111e4 <strnlen+0x14>
 80111dc:	781c      	ldrb	r4, [r3, #0]
 80111de:	3201      	adds	r2, #1
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	d1f8      	bne.n	80111d6 <strnlen+0x6>
 80111e4:	1a18      	subs	r0, r3, r0
 80111e6:	bd10      	pop	{r4, pc}

080111e8 <quorem>:
 80111e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	6903      	ldr	r3, [r0, #16]
 80111ee:	690c      	ldr	r4, [r1, #16]
 80111f0:	42a3      	cmp	r3, r4
 80111f2:	4607      	mov	r7, r0
 80111f4:	db7d      	blt.n	80112f2 <quorem+0x10a>
 80111f6:	3c01      	subs	r4, #1
 80111f8:	f101 0814 	add.w	r8, r1, #20
 80111fc:	f100 0514 	add.w	r5, r0, #20
 8011200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801120a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801120e:	3301      	adds	r3, #1
 8011210:	429a      	cmp	r2, r3
 8011212:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011216:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801121a:	fbb2 f6f3 	udiv	r6, r2, r3
 801121e:	d32e      	bcc.n	801127e <quorem+0x96>
 8011220:	f04f 0e00 	mov.w	lr, #0
 8011224:	4640      	mov	r0, r8
 8011226:	46ac      	mov	ip, r5
 8011228:	46f2      	mov	sl, lr
 801122a:	f850 2b04 	ldr.w	r2, [r0], #4
 801122e:	b293      	uxth	r3, r2
 8011230:	fb06 e303 	mla	r3, r6, r3, lr
 8011234:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011238:	0c12      	lsrs	r2, r2, #16
 801123a:	b29b      	uxth	r3, r3
 801123c:	fb06 e202 	mla	r2, r6, r2, lr
 8011240:	ebaa 0303 	sub.w	r3, sl, r3
 8011244:	f8dc a000 	ldr.w	sl, [ip]
 8011248:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801124c:	b292      	uxth	r2, r2
 801124e:	fa13 f38a 	uxtah	r3, r3, sl
 8011252:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801125a:	b29b      	uxth	r3, r3
 801125c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011260:	4581      	cmp	r9, r0
 8011262:	f84c 3b04 	str.w	r3, [ip], #4
 8011266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801126a:	d2de      	bcs.n	801122a <quorem+0x42>
 801126c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011270:	b92b      	cbnz	r3, 801127e <quorem+0x96>
 8011272:	9b01      	ldr	r3, [sp, #4]
 8011274:	3b04      	subs	r3, #4
 8011276:	429d      	cmp	r5, r3
 8011278:	461a      	mov	r2, r3
 801127a:	d32e      	bcc.n	80112da <quorem+0xf2>
 801127c:	613c      	str	r4, [r7, #16]
 801127e:	4638      	mov	r0, r7
 8011280:	f000 f8e0 	bl	8011444 <__mcmp>
 8011284:	2800      	cmp	r0, #0
 8011286:	db24      	blt.n	80112d2 <quorem+0xea>
 8011288:	3601      	adds	r6, #1
 801128a:	4628      	mov	r0, r5
 801128c:	f04f 0c00 	mov.w	ip, #0
 8011290:	f858 2b04 	ldr.w	r2, [r8], #4
 8011294:	f8d0 e000 	ldr.w	lr, [r0]
 8011298:	b293      	uxth	r3, r2
 801129a:	ebac 0303 	sub.w	r3, ip, r3
 801129e:	0c12      	lsrs	r2, r2, #16
 80112a0:	fa13 f38e 	uxtah	r3, r3, lr
 80112a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80112a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112b2:	45c1      	cmp	r9, r8
 80112b4:	f840 3b04 	str.w	r3, [r0], #4
 80112b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80112bc:	d2e8      	bcs.n	8011290 <quorem+0xa8>
 80112be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112c6:	b922      	cbnz	r2, 80112d2 <quorem+0xea>
 80112c8:	3b04      	subs	r3, #4
 80112ca:	429d      	cmp	r5, r3
 80112cc:	461a      	mov	r2, r3
 80112ce:	d30a      	bcc.n	80112e6 <quorem+0xfe>
 80112d0:	613c      	str	r4, [r7, #16]
 80112d2:	4630      	mov	r0, r6
 80112d4:	b003      	add	sp, #12
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	6812      	ldr	r2, [r2, #0]
 80112dc:	3b04      	subs	r3, #4
 80112de:	2a00      	cmp	r2, #0
 80112e0:	d1cc      	bne.n	801127c <quorem+0x94>
 80112e2:	3c01      	subs	r4, #1
 80112e4:	e7c7      	b.n	8011276 <quorem+0x8e>
 80112e6:	6812      	ldr	r2, [r2, #0]
 80112e8:	3b04      	subs	r3, #4
 80112ea:	2a00      	cmp	r2, #0
 80112ec:	d1f0      	bne.n	80112d0 <quorem+0xe8>
 80112ee:	3c01      	subs	r4, #1
 80112f0:	e7eb      	b.n	80112ca <quorem+0xe2>
 80112f2:	2000      	movs	r0, #0
 80112f4:	e7ee      	b.n	80112d4 <quorem+0xec>

080112f6 <__sfmoreglue>:
 80112f6:	b570      	push	{r4, r5, r6, lr}
 80112f8:	2268      	movs	r2, #104	; 0x68
 80112fa:	1e4d      	subs	r5, r1, #1
 80112fc:	4355      	muls	r5, r2
 80112fe:	460e      	mov	r6, r1
 8011300:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011304:	f7fe f8c6 	bl	800f494 <_malloc_r>
 8011308:	4604      	mov	r4, r0
 801130a:	b140      	cbz	r0, 801131e <__sfmoreglue+0x28>
 801130c:	2100      	movs	r1, #0
 801130e:	e9c0 1600 	strd	r1, r6, [r0]
 8011312:	300c      	adds	r0, #12
 8011314:	60a0      	str	r0, [r4, #8]
 8011316:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801131a:	f7ff fdf5 	bl	8010f08 <memset>
 801131e:	4620      	mov	r0, r4
 8011320:	bd70      	pop	{r4, r5, r6, pc}

08011322 <_fwalk_reent>:
 8011322:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011326:	4606      	mov	r6, r0
 8011328:	4688      	mov	r8, r1
 801132a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801132e:	2700      	movs	r7, #0
 8011330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011334:	f1b9 0901 	subs.w	r9, r9, #1
 8011338:	d505      	bpl.n	8011346 <_fwalk_reent+0x24>
 801133a:	6824      	ldr	r4, [r4, #0]
 801133c:	2c00      	cmp	r4, #0
 801133e:	d1f7      	bne.n	8011330 <_fwalk_reent+0xe>
 8011340:	4638      	mov	r0, r7
 8011342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011346:	89ab      	ldrh	r3, [r5, #12]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d907      	bls.n	801135c <_fwalk_reent+0x3a>
 801134c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011350:	3301      	adds	r3, #1
 8011352:	d003      	beq.n	801135c <_fwalk_reent+0x3a>
 8011354:	4629      	mov	r1, r5
 8011356:	4630      	mov	r0, r6
 8011358:	47c0      	blx	r8
 801135a:	4307      	orrs	r7, r0
 801135c:	3568      	adds	r5, #104	; 0x68
 801135e:	e7e9      	b.n	8011334 <_fwalk_reent+0x12>

08011360 <__swhatbuf_r>:
 8011360:	b570      	push	{r4, r5, r6, lr}
 8011362:	460e      	mov	r6, r1
 8011364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011368:	2900      	cmp	r1, #0
 801136a:	b096      	sub	sp, #88	; 0x58
 801136c:	4614      	mov	r4, r2
 801136e:	461d      	mov	r5, r3
 8011370:	da08      	bge.n	8011384 <__swhatbuf_r+0x24>
 8011372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011376:	2200      	movs	r2, #0
 8011378:	602a      	str	r2, [r5, #0]
 801137a:	061a      	lsls	r2, r3, #24
 801137c:	d410      	bmi.n	80113a0 <__swhatbuf_r+0x40>
 801137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011382:	e00e      	b.n	80113a2 <__swhatbuf_r+0x42>
 8011384:	466a      	mov	r2, sp
 8011386:	f7ff fc6d 	bl	8010c64 <_fstat_r>
 801138a:	2800      	cmp	r0, #0
 801138c:	dbf1      	blt.n	8011372 <__swhatbuf_r+0x12>
 801138e:	9a01      	ldr	r2, [sp, #4]
 8011390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011398:	425a      	negs	r2, r3
 801139a:	415a      	adcs	r2, r3
 801139c:	602a      	str	r2, [r5, #0]
 801139e:	e7ee      	b.n	801137e <__swhatbuf_r+0x1e>
 80113a0:	2340      	movs	r3, #64	; 0x40
 80113a2:	2000      	movs	r0, #0
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	b016      	add	sp, #88	; 0x58
 80113a8:	bd70      	pop	{r4, r5, r6, pc}

080113aa <__hi0bits>:
 80113aa:	0c02      	lsrs	r2, r0, #16
 80113ac:	0412      	lsls	r2, r2, #16
 80113ae:	4603      	mov	r3, r0
 80113b0:	b9ca      	cbnz	r2, 80113e6 <__hi0bits+0x3c>
 80113b2:	0403      	lsls	r3, r0, #16
 80113b4:	2010      	movs	r0, #16
 80113b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80113ba:	bf04      	itt	eq
 80113bc:	021b      	lsleq	r3, r3, #8
 80113be:	3008      	addeq	r0, #8
 80113c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80113c4:	bf04      	itt	eq
 80113c6:	011b      	lsleq	r3, r3, #4
 80113c8:	3004      	addeq	r0, #4
 80113ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80113ce:	bf04      	itt	eq
 80113d0:	009b      	lsleq	r3, r3, #2
 80113d2:	3002      	addeq	r0, #2
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	db05      	blt.n	80113e4 <__hi0bits+0x3a>
 80113d8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80113dc:	f100 0001 	add.w	r0, r0, #1
 80113e0:	bf08      	it	eq
 80113e2:	2020      	moveq	r0, #32
 80113e4:	4770      	bx	lr
 80113e6:	2000      	movs	r0, #0
 80113e8:	e7e5      	b.n	80113b6 <__hi0bits+0xc>

080113ea <__lo0bits>:
 80113ea:	6803      	ldr	r3, [r0, #0]
 80113ec:	4602      	mov	r2, r0
 80113ee:	f013 0007 	ands.w	r0, r3, #7
 80113f2:	d00b      	beq.n	801140c <__lo0bits+0x22>
 80113f4:	07d9      	lsls	r1, r3, #31
 80113f6:	d421      	bmi.n	801143c <__lo0bits+0x52>
 80113f8:	0798      	lsls	r0, r3, #30
 80113fa:	bf49      	itett	mi
 80113fc:	085b      	lsrmi	r3, r3, #1
 80113fe:	089b      	lsrpl	r3, r3, #2
 8011400:	2001      	movmi	r0, #1
 8011402:	6013      	strmi	r3, [r2, #0]
 8011404:	bf5c      	itt	pl
 8011406:	6013      	strpl	r3, [r2, #0]
 8011408:	2002      	movpl	r0, #2
 801140a:	4770      	bx	lr
 801140c:	b299      	uxth	r1, r3
 801140e:	b909      	cbnz	r1, 8011414 <__lo0bits+0x2a>
 8011410:	0c1b      	lsrs	r3, r3, #16
 8011412:	2010      	movs	r0, #16
 8011414:	b2d9      	uxtb	r1, r3
 8011416:	b909      	cbnz	r1, 801141c <__lo0bits+0x32>
 8011418:	3008      	adds	r0, #8
 801141a:	0a1b      	lsrs	r3, r3, #8
 801141c:	0719      	lsls	r1, r3, #28
 801141e:	bf04      	itt	eq
 8011420:	091b      	lsreq	r3, r3, #4
 8011422:	3004      	addeq	r0, #4
 8011424:	0799      	lsls	r1, r3, #30
 8011426:	bf04      	itt	eq
 8011428:	089b      	lsreq	r3, r3, #2
 801142a:	3002      	addeq	r0, #2
 801142c:	07d9      	lsls	r1, r3, #31
 801142e:	d403      	bmi.n	8011438 <__lo0bits+0x4e>
 8011430:	085b      	lsrs	r3, r3, #1
 8011432:	f100 0001 	add.w	r0, r0, #1
 8011436:	d003      	beq.n	8011440 <__lo0bits+0x56>
 8011438:	6013      	str	r3, [r2, #0]
 801143a:	4770      	bx	lr
 801143c:	2000      	movs	r0, #0
 801143e:	4770      	bx	lr
 8011440:	2020      	movs	r0, #32
 8011442:	4770      	bx	lr

08011444 <__mcmp>:
 8011444:	690a      	ldr	r2, [r1, #16]
 8011446:	4603      	mov	r3, r0
 8011448:	6900      	ldr	r0, [r0, #16]
 801144a:	1a80      	subs	r0, r0, r2
 801144c:	b530      	push	{r4, r5, lr}
 801144e:	d10d      	bne.n	801146c <__mcmp+0x28>
 8011450:	3314      	adds	r3, #20
 8011452:	3114      	adds	r1, #20
 8011454:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011458:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801145c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011460:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011464:	4295      	cmp	r5, r2
 8011466:	d002      	beq.n	801146e <__mcmp+0x2a>
 8011468:	d304      	bcc.n	8011474 <__mcmp+0x30>
 801146a:	2001      	movs	r0, #1
 801146c:	bd30      	pop	{r4, r5, pc}
 801146e:	42a3      	cmp	r3, r4
 8011470:	d3f4      	bcc.n	801145c <__mcmp+0x18>
 8011472:	e7fb      	b.n	801146c <__mcmp+0x28>
 8011474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011478:	e7f8      	b.n	801146c <__mcmp+0x28>

0801147a <_calloc_r>:
 801147a:	b538      	push	{r3, r4, r5, lr}
 801147c:	fb02 f501 	mul.w	r5, r2, r1
 8011480:	4629      	mov	r1, r5
 8011482:	f7fe f807 	bl	800f494 <_malloc_r>
 8011486:	4604      	mov	r4, r0
 8011488:	b118      	cbz	r0, 8011492 <_calloc_r+0x18>
 801148a:	462a      	mov	r2, r5
 801148c:	2100      	movs	r1, #0
 801148e:	f7ff fd3b 	bl	8010f08 <memset>
 8011492:	4620      	mov	r0, r4
 8011494:	bd38      	pop	{r3, r4, r5, pc}

08011496 <_realloc_r>:
 8011496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011498:	4607      	mov	r7, r0
 801149a:	4614      	mov	r4, r2
 801149c:	460e      	mov	r6, r1
 801149e:	b921      	cbnz	r1, 80114aa <_realloc_r+0x14>
 80114a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80114a4:	4611      	mov	r1, r2
 80114a6:	f7fd bff5 	b.w	800f494 <_malloc_r>
 80114aa:	b922      	cbnz	r2, 80114b6 <_realloc_r+0x20>
 80114ac:	f7fd ffa8 	bl	800f400 <_free_r>
 80114b0:	4625      	mov	r5, r4
 80114b2:	4628      	mov	r0, r5
 80114b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b6:	f000 f8c4 	bl	8011642 <_malloc_usable_size_r>
 80114ba:	42a0      	cmp	r0, r4
 80114bc:	d20f      	bcs.n	80114de <_realloc_r+0x48>
 80114be:	4621      	mov	r1, r4
 80114c0:	4638      	mov	r0, r7
 80114c2:	f7fd ffe7 	bl	800f494 <_malloc_r>
 80114c6:	4605      	mov	r5, r0
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d0f2      	beq.n	80114b2 <_realloc_r+0x1c>
 80114cc:	4631      	mov	r1, r6
 80114ce:	4622      	mov	r2, r4
 80114d0:	f7ff fcf2 	bl	8010eb8 <memcpy>
 80114d4:	4631      	mov	r1, r6
 80114d6:	4638      	mov	r0, r7
 80114d8:	f7fd ff92 	bl	800f400 <_free_r>
 80114dc:	e7e9      	b.n	80114b2 <_realloc_r+0x1c>
 80114de:	4635      	mov	r5, r6
 80114e0:	e7e7      	b.n	80114b2 <_realloc_r+0x1c>

080114e2 <__ssputs_r>:
 80114e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114e6:	688e      	ldr	r6, [r1, #8]
 80114e8:	429e      	cmp	r6, r3
 80114ea:	4682      	mov	sl, r0
 80114ec:	460c      	mov	r4, r1
 80114ee:	4690      	mov	r8, r2
 80114f0:	461f      	mov	r7, r3
 80114f2:	d838      	bhi.n	8011566 <__ssputs_r+0x84>
 80114f4:	898a      	ldrh	r2, [r1, #12]
 80114f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80114fa:	d032      	beq.n	8011562 <__ssputs_r+0x80>
 80114fc:	6825      	ldr	r5, [r4, #0]
 80114fe:	6909      	ldr	r1, [r1, #16]
 8011500:	eba5 0901 	sub.w	r9, r5, r1
 8011504:	6965      	ldr	r5, [r4, #20]
 8011506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801150a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801150e:	3301      	adds	r3, #1
 8011510:	444b      	add	r3, r9
 8011512:	106d      	asrs	r5, r5, #1
 8011514:	429d      	cmp	r5, r3
 8011516:	bf38      	it	cc
 8011518:	461d      	movcc	r5, r3
 801151a:	0553      	lsls	r3, r2, #21
 801151c:	d531      	bpl.n	8011582 <__ssputs_r+0xa0>
 801151e:	4629      	mov	r1, r5
 8011520:	f7fd ffb8 	bl	800f494 <_malloc_r>
 8011524:	4606      	mov	r6, r0
 8011526:	b950      	cbnz	r0, 801153e <__ssputs_r+0x5c>
 8011528:	230c      	movs	r3, #12
 801152a:	f8ca 3000 	str.w	r3, [sl]
 801152e:	89a3      	ldrh	r3, [r4, #12]
 8011530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011534:	81a3      	strh	r3, [r4, #12]
 8011536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	6921      	ldr	r1, [r4, #16]
 8011540:	464a      	mov	r2, r9
 8011542:	f7ff fcb9 	bl	8010eb8 <memcpy>
 8011546:	89a3      	ldrh	r3, [r4, #12]
 8011548:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	6126      	str	r6, [r4, #16]
 8011554:	6165      	str	r5, [r4, #20]
 8011556:	444e      	add	r6, r9
 8011558:	eba5 0509 	sub.w	r5, r5, r9
 801155c:	6026      	str	r6, [r4, #0]
 801155e:	60a5      	str	r5, [r4, #8]
 8011560:	463e      	mov	r6, r7
 8011562:	42be      	cmp	r6, r7
 8011564:	d900      	bls.n	8011568 <__ssputs_r+0x86>
 8011566:	463e      	mov	r6, r7
 8011568:	6820      	ldr	r0, [r4, #0]
 801156a:	4632      	mov	r2, r6
 801156c:	4641      	mov	r1, r8
 801156e:	f7ff fcb1 	bl	8010ed4 <memmove>
 8011572:	68a3      	ldr	r3, [r4, #8]
 8011574:	1b9b      	subs	r3, r3, r6
 8011576:	60a3      	str	r3, [r4, #8]
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	4433      	add	r3, r6
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	2000      	movs	r0, #0
 8011580:	e7db      	b.n	801153a <__ssputs_r+0x58>
 8011582:	462a      	mov	r2, r5
 8011584:	f7ff ff87 	bl	8011496 <_realloc_r>
 8011588:	4606      	mov	r6, r0
 801158a:	2800      	cmp	r0, #0
 801158c:	d1e1      	bne.n	8011552 <__ssputs_r+0x70>
 801158e:	6921      	ldr	r1, [r4, #16]
 8011590:	4650      	mov	r0, sl
 8011592:	f7fd ff35 	bl	800f400 <_free_r>
 8011596:	e7c7      	b.n	8011528 <__ssputs_r+0x46>

08011598 <__sread>:
 8011598:	b510      	push	{r4, lr}
 801159a:	460c      	mov	r4, r1
 801159c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a0:	f7ff fb94 	bl	8010ccc <_read_r>
 80115a4:	2800      	cmp	r0, #0
 80115a6:	bfab      	itete	ge
 80115a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115aa:	89a3      	ldrhlt	r3, [r4, #12]
 80115ac:	181b      	addge	r3, r3, r0
 80115ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115b2:	bfac      	ite	ge
 80115b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80115b6:	81a3      	strhlt	r3, [r4, #12]
 80115b8:	bd10      	pop	{r4, pc}

080115ba <__swrite>:
 80115ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	461f      	mov	r7, r3
 80115c0:	898b      	ldrh	r3, [r1, #12]
 80115c2:	05db      	lsls	r3, r3, #23
 80115c4:	4605      	mov	r5, r0
 80115c6:	460c      	mov	r4, r1
 80115c8:	4616      	mov	r6, r2
 80115ca:	d505      	bpl.n	80115d8 <__swrite+0x1e>
 80115cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d0:	2302      	movs	r3, #2
 80115d2:	2200      	movs	r2, #0
 80115d4:	f7ff fb68 	bl	8010ca8 <_lseek_r>
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115e2:	81a3      	strh	r3, [r4, #12]
 80115e4:	4632      	mov	r2, r6
 80115e6:	463b      	mov	r3, r7
 80115e8:	4628      	mov	r0, r5
 80115ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ee:	f7ff bb17 	b.w	8010c20 <_write_r>

080115f2 <__sseek>:
 80115f2:	b510      	push	{r4, lr}
 80115f4:	460c      	mov	r4, r1
 80115f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fa:	f7ff fb55 	bl	8010ca8 <_lseek_r>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	bf15      	itete	ne
 8011604:	6560      	strne	r0, [r4, #84]	; 0x54
 8011606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801160a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801160e:	81a3      	strheq	r3, [r4, #12]
 8011610:	bf18      	it	ne
 8011612:	81a3      	strhne	r3, [r4, #12]
 8011614:	bd10      	pop	{r4, pc}

08011616 <__sclose>:
 8011616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801161a:	f7ff bb13 	b.w	8010c44 <_close_r>

0801161e <__ascii_mbtowc>:
 801161e:	b082      	sub	sp, #8
 8011620:	b901      	cbnz	r1, 8011624 <__ascii_mbtowc+0x6>
 8011622:	a901      	add	r1, sp, #4
 8011624:	b142      	cbz	r2, 8011638 <__ascii_mbtowc+0x1a>
 8011626:	b14b      	cbz	r3, 801163c <__ascii_mbtowc+0x1e>
 8011628:	7813      	ldrb	r3, [r2, #0]
 801162a:	600b      	str	r3, [r1, #0]
 801162c:	7812      	ldrb	r2, [r2, #0]
 801162e:	1e10      	subs	r0, r2, #0
 8011630:	bf18      	it	ne
 8011632:	2001      	movne	r0, #1
 8011634:	b002      	add	sp, #8
 8011636:	4770      	bx	lr
 8011638:	4610      	mov	r0, r2
 801163a:	e7fb      	b.n	8011634 <__ascii_mbtowc+0x16>
 801163c:	f06f 0001 	mvn.w	r0, #1
 8011640:	e7f8      	b.n	8011634 <__ascii_mbtowc+0x16>

08011642 <_malloc_usable_size_r>:
 8011642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011646:	1f18      	subs	r0, r3, #4
 8011648:	2b00      	cmp	r3, #0
 801164a:	bfbc      	itt	lt
 801164c:	580b      	ldrlt	r3, [r1, r0]
 801164e:	18c0      	addlt	r0, r0, r3
 8011650:	4770      	bx	lr

08011652 <__ascii_wctomb>:
 8011652:	4603      	mov	r3, r0
 8011654:	4608      	mov	r0, r1
 8011656:	b141      	cbz	r1, 801166a <__ascii_wctomb+0x18>
 8011658:	2aff      	cmp	r2, #255	; 0xff
 801165a:	d904      	bls.n	8011666 <__ascii_wctomb+0x14>
 801165c:	228a      	movs	r2, #138	; 0x8a
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011664:	4770      	bx	lr
 8011666:	700a      	strb	r2, [r1, #0]
 8011668:	2001      	movs	r0, #1
 801166a:	4770      	bx	lr


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	40 24 00 20 dd 2d 00 08 cd 98 00 08 95 2d 00 08     @$. .-.......-..
 8000010:	95 2d 00 08 95 2d 00 08 95 2d 00 08 00 00 00 00     .-...-...-......
	...
 800002c:	45 2a 00 08 95 2d 00 08 00 00 00 00 f1 29 00 08     E*...-.......)..
 800003c:	79 59 00 08                                         yY..

08000040 <_irq_vector_table>:
 8000040:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000050:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000060:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000070:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000080:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000090:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000a0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000b0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000c0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000d0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000e0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 80000f0:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000100:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000110:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000120:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000130:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000140:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000150:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000160:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000170:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000180:	1d 2b 00 08 1d 2b 00 08 1d 2b 00 08 1d 2b 00 08     .+...+...+...+..
 8000190:	1d 2b 00 08                                         .+..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <_dtoa_r>:
 8000e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000e6e:	b099      	sub	sp, #100	; 0x64
 8000e70:	4616      	mov	r6, r2
 8000e72:	461f      	mov	r7, r3
 8000e74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e78:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	b974      	cbnz	r4, 8000e9e <_dtoa_r+0x36>
 8000e80:	2010      	movs	r0, #16
 8000e82:	f006 fd37 	bl	80078f4 <malloc>
 8000e86:	4602      	mov	r2, r0
 8000e88:	6268      	str	r0, [r5, #36]	; 0x24
 8000e8a:	b920      	cbnz	r0, 8000e96 <_dtoa_r+0x2e>
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <_dtoa_r+0x2c8>)
 8000e8e:	21ea      	movs	r1, #234	; 0xea
 8000e90:	48a8      	ldr	r0, [pc, #672]	; (8001134 <_dtoa_r+0x2cc>)
 8000e92:	f007 fc5f 	bl	8008754 <__assert_func>
 8000e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000e9a:	6004      	str	r4, [r0, #0]
 8000e9c:	60c4      	str	r4, [r0, #12]
 8000e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	b151      	cbz	r1, 8000eba <_dtoa_r+0x52>
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	604a      	str	r2, [r1, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	608b      	str	r3, [r1, #8]
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f007 f97c 	bl	80081ac <_Bfree>
 8000eb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	1e3b      	subs	r3, r7, #0
 8000ebc:	bfb9      	ittee	lt
 8000ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	9305      	strlt	r3, [sp, #20]
 8000ec4:	2300      	movge	r3, #0
 8000ec6:	f8c8 3000 	strge.w	r3, [r8]
 8000eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <_dtoa_r+0x2d0>)
 8000ed0:	bfbc      	itt	lt
 8000ed2:	2201      	movlt	r2, #1
 8000ed4:	f8c8 2000 	strlt.w	r2, [r8]
 8000ed8:	ea33 0309 	bics.w	r3, r3, r9
 8000edc:	d119      	bne.n	8000f12 <_dtoa_r+0xaa>
 8000ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000eea:	4333      	orrs	r3, r6
 8000eec:	f000 8580 	beq.w	80019f0 <_dtoa_r+0xb88>
 8000ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ef2:	b953      	cbnz	r3, 8000f0a <_dtoa_r+0xa2>
 8000ef4:	4b91      	ldr	r3, [pc, #580]	; (800113c <_dtoa_r+0x2d4>)
 8000ef6:	e022      	b.n	8000f3e <_dtoa_r+0xd6>
 8000ef8:	4b91      	ldr	r3, [pc, #580]	; (8001140 <_dtoa_r+0x2d8>)
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	3308      	adds	r3, #8
 8000efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	9803      	ldr	r0, [sp, #12]
 8000f04:	b019      	add	sp, #100	; 0x64
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <_dtoa_r+0x2d4>)
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	3303      	adds	r3, #3
 8000f10:	e7f5      	b.n	8000efe <_dtoa_r+0x96>
 8000f12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000f16:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	f7ff fdcb 	bl	8000abc <__aeabi_dcmpeq>
 8000f26:	4680      	mov	r8, r0
 8000f28:	b158      	cbz	r0, 8000f42 <_dtoa_r+0xda>
 8000f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8559 	beq.w	80019ea <_dtoa_r+0xb82>
 8000f38:	4882      	ldr	r0, [pc, #520]	; (8001144 <_dtoa_r+0x2dc>)
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e7df      	b.n	8000f02 <_dtoa_r+0x9a>
 8000f42:	ab16      	add	r3, sp, #88	; 0x58
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	ab17      	add	r3, sp, #92	; 0x5c
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000f50:	f007 fba4 	bl	800869c <__d2b>
 8000f54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000f58:	4683      	mov	fp, r0
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d07e      	beq.n	800105c <_dtoa_r+0x1f4>
 8000f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f6c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000f70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000f74:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <_dtoa_r+0x2e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f7ff f964 	bl	8000248 <__aeabi_dsub>
 8000f80:	a365      	add	r3, pc, #404	; (adr r3, 8001118 <_dtoa_r+0x2b0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb17 	bl	80005b8 <__aeabi_dmul>
 8000f8a:	a365      	add	r3, pc, #404	; (adr r3, 8001120 <_dtoa_r+0x2b8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff f95c 	bl	800024c <__adddf3>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4620      	mov	r0, r4
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff faa3 	bl	80004e4 <__aeabi_i2d>
 8000f9e:	a362      	add	r3, pc, #392	; (adr r3, 8001128 <_dtoa_r+0x2c0>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb08 	bl	80005b8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4630      	mov	r0, r6
 8000fae:	4639      	mov	r1, r7
 8000fb0:	f7ff f94c 	bl	800024c <__adddf3>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	460f      	mov	r7, r1
 8000fb8:	f7ff fdc8 	bl	8000b4c <__aeabi_d2iz>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4682      	mov	sl, r0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	f7ff fd83 	bl	8000ad0 <__aeabi_dcmplt>
 8000fca:	b148      	cbz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f7ff fa89 	bl	80004e4 <__aeabi_i2d>
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	f7ff fd71 	bl	8000abc <__aeabi_dcmpeq>
 8000fda:	b908      	cbnz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000fe0:	f1ba 0f16 	cmp.w	sl, #22
 8000fe4:	d857      	bhi.n	8001096 <_dtoa_r+0x22e>
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <_dtoa_r+0x2e4>)
 8000fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ff4:	f7ff fd6c 	bl	8000ad0 <__aeabi_dcmplt>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d04e      	beq.n	800109a <_dtoa_r+0x232>
 8000ffc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001000:	2300      	movs	r3, #0
 8001002:	930f      	str	r3, [sp, #60]	; 0x3c
 8001004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001006:	1b1c      	subs	r4, r3, r4
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	9309      	str	r3, [sp, #36]	; 0x24
 800100c:	bf45      	ittet	mi
 800100e:	f1c4 0301 	rsbmi	r3, r4, #1
 8001012:	9306      	strmi	r3, [sp, #24]
 8001014:	2300      	movpl	r3, #0
 8001016:	2300      	movmi	r3, #0
 8001018:	bf4c      	ite	mi
 800101a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800101c:	9306      	strpl	r3, [sp, #24]
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	db3c      	blt.n	800109e <_dtoa_r+0x236>
 8001024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001026:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800102a:	4453      	add	r3, sl
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
 800102e:	2300      	movs	r3, #0
 8001030:	930a      	str	r3, [sp, #40]	; 0x28
 8001032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001034:	2b09      	cmp	r3, #9
 8001036:	f200 808d 	bhi.w	8001154 <_dtoa_r+0x2ec>
 800103a:	2b05      	cmp	r3, #5
 800103c:	bfc4      	itt	gt
 800103e:	3b04      	subgt	r3, #4
 8001040:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001044:	f1a3 0302 	sub.w	r3, r3, #2
 8001048:	bfcc      	ite	gt
 800104a:	2400      	movgt	r4, #0
 800104c:	2401      	movle	r4, #1
 800104e:	2b03      	cmp	r3, #3
 8001050:	f200 808c 	bhi.w	800116c <_dtoa_r+0x304>
 8001054:	e8df f003 	tbb	[pc, r3]
 8001058:	5b4d4f2d 	.word	0x5b4d4f2d
 800105c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001060:	441c      	add	r4, r3
 8001062:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001066:	2b20      	cmp	r3, #32
 8001068:	bfc3      	ittte	gt
 800106a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800106e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001072:	fa09 f303 	lslgt.w	r3, r9, r3
 8001076:	f1c3 0320 	rsble	r3, r3, #32
 800107a:	bfc6      	itte	gt
 800107c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001080:	4318      	orrgt	r0, r3
 8001082:	fa06 f003 	lslle.w	r0, r6, r3
 8001086:	f7ff fa1d 	bl	80004c4 <__aeabi_ui2d>
 800108a:	2301      	movs	r3, #1
 800108c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001090:	3c01      	subs	r4, #1
 8001092:	9313      	str	r3, [sp, #76]	; 0x4c
 8001094:	e770      	b.n	8000f78 <_dtoa_r+0x110>
 8001096:	2301      	movs	r3, #1
 8001098:	e7b3      	b.n	8001002 <_dtoa_r+0x19a>
 800109a:	900f      	str	r0, [sp, #60]	; 0x3c
 800109c:	e7b2      	b.n	8001004 <_dtoa_r+0x19c>
 800109e:	9b06      	ldr	r3, [sp, #24]
 80010a0:	eba3 030a 	sub.w	r3, r3, sl
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	f1ca 0300 	rsb	r3, sl, #0
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
 80010ac:	2300      	movs	r3, #0
 80010ae:	930e      	str	r3, [sp, #56]	; 0x38
 80010b0:	e7bf      	b.n	8001032 <_dtoa_r+0x1ca>
 80010b2:	2300      	movs	r3, #0
 80010b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc5a      	bgt.n	8001172 <_dtoa_r+0x30a>
 80010bc:	f04f 0901 	mov.w	r9, #1
 80010c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80010c4:	464b      	mov	r3, r9
 80010c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80010ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	6042      	str	r2, [r0, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	f102 0614 	add.w	r6, r2, #20
 80010d6:	429e      	cmp	r6, r3
 80010d8:	6841      	ldr	r1, [r0, #4]
 80010da:	d950      	bls.n	800117e <_dtoa_r+0x316>
 80010dc:	4628      	mov	r0, r5
 80010de:	f007 f825 	bl	800812c <_Balloc>
 80010e2:	9003      	str	r0, [sp, #12]
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d14e      	bne.n	8001186 <_dtoa_r+0x31e>
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <_dtoa_r+0x2e8>)
 80010ea:	4602      	mov	r2, r0
 80010ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f0:	e6ce      	b.n	8000e90 <_dtoa_r+0x28>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e7de      	b.n	80010b4 <_dtoa_r+0x24c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80010fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010fc:	eb0a 0903 	add.w	r9, sl, r3
 8001100:	f109 0301 	add.w	r3, r9, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	9308      	str	r3, [sp, #32]
 8001108:	bfb8      	it	lt
 800110a:	2301      	movlt	r3, #1
 800110c:	e7dd      	b.n	80010ca <_dtoa_r+0x262>
 800110e:	2301      	movs	r3, #1
 8001110:	e7f2      	b.n	80010f8 <_dtoa_r+0x290>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	636f4361 	.word	0x636f4361
 800111c:	3fd287a7 	.word	0x3fd287a7
 8001120:	8b60c8b3 	.word	0x8b60c8b3
 8001124:	3fc68a28 	.word	0x3fc68a28
 8001128:	509f79fb 	.word	0x509f79fb
 800112c:	3fd34413 	.word	0x3fd34413
 8001130:	0800c6ea 	.word	0x0800c6ea
 8001134:	0800c701 	.word	0x0800c701
 8001138:	7ff00000 	.word	0x7ff00000
 800113c:	0800c6e6 	.word	0x0800c6e6
 8001140:	0800c6dd 	.word	0x0800c6dd
 8001144:	0800c6ba 	.word	0x0800c6ba
 8001148:	3ff80000 	.word	0x3ff80000
 800114c:	0800c010 	.word	0x0800c010
 8001150:	0800c75b 	.word	0x0800c75b
 8001154:	2401      	movs	r4, #1
 8001156:	2300      	movs	r3, #0
 8001158:	9322      	str	r3, [sp, #136]	; 0x88
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
 800115c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001160:	2200      	movs	r2, #0
 8001162:	f8cd 9020 	str.w	r9, [sp, #32]
 8001166:	2312      	movs	r3, #18
 8001168:	9223      	str	r2, [sp, #140]	; 0x8c
 800116a:	e7ae      	b.n	80010ca <_dtoa_r+0x262>
 800116c:	2301      	movs	r3, #1
 800116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001170:	e7f4      	b.n	800115c <_dtoa_r+0x2f4>
 8001172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001176:	f8cd 9020 	str.w	r9, [sp, #32]
 800117a:	464b      	mov	r3, r9
 800117c:	e7a5      	b.n	80010ca <_dtoa_r+0x262>
 800117e:	3101      	adds	r1, #1
 8001180:	6041      	str	r1, [r0, #4]
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	e7a5      	b.n	80010d2 <_dtoa_r+0x26a>
 8001186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	9b08      	ldr	r3, [sp, #32]
 800118e:	2b0e      	cmp	r3, #14
 8001190:	f200 80a8 	bhi.w	80012e4 <_dtoa_r+0x47c>
 8001194:	2c00      	cmp	r4, #0
 8001196:	f000 80a5 	beq.w	80012e4 <_dtoa_r+0x47c>
 800119a:	f1ba 0f00 	cmp.w	sl, #0
 800119e:	dd34      	ble.n	800120a <_dtoa_r+0x3a2>
 80011a0:	4a9a      	ldr	r2, [pc, #616]	; (800140c <_dtoa_r+0x5a4>)
 80011a2:	f00a 030f 	and.w	r3, sl, #15
 80011a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80011b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80011b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80011ba:	d016      	beq.n	80011ea <_dtoa_r+0x382>
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <_dtoa_r+0x5a8>)
 80011be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011c6:	f7ff fb21 	bl	800080c <__aeabi_ddiv>
 80011ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011ce:	f004 040f 	and.w	r4, r4, #15
 80011d2:	2703      	movs	r7, #3
 80011d4:	4e8e      	ldr	r6, [pc, #568]	; (8001410 <_dtoa_r+0x5a8>)
 80011d6:	b954      	cbnz	r4, 80011ee <_dtoa_r+0x386>
 80011d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80011dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011e0:	f7ff fb14 	bl	800080c <__aeabi_ddiv>
 80011e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011e8:	e029      	b.n	800123e <_dtoa_r+0x3d6>
 80011ea:	2702      	movs	r7, #2
 80011ec:	e7f2      	b.n	80011d4 <_dtoa_r+0x36c>
 80011ee:	07e1      	lsls	r1, r4, #31
 80011f0:	d508      	bpl.n	8001204 <_dtoa_r+0x39c>
 80011f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80011f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80011fa:	f7ff f9dd 	bl	80005b8 <__aeabi_dmul>
 80011fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001202:	3701      	adds	r7, #1
 8001204:	1064      	asrs	r4, r4, #1
 8001206:	3608      	adds	r6, #8
 8001208:	e7e5      	b.n	80011d6 <_dtoa_r+0x36e>
 800120a:	f000 80a5 	beq.w	8001358 <_dtoa_r+0x4f0>
 800120e:	f1ca 0400 	rsb	r4, sl, #0
 8001212:	4b7e      	ldr	r3, [pc, #504]	; (800140c <_dtoa_r+0x5a4>)
 8001214:	4e7e      	ldr	r6, [pc, #504]	; (8001410 <_dtoa_r+0x5a8>)
 8001216:	f004 020f 	and.w	r2, r4, #15
 800121a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001226:	f7ff f9c7 	bl	80005b8 <__aeabi_dmul>
 800122a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800122e:	1124      	asrs	r4, r4, #4
 8001230:	2300      	movs	r3, #0
 8001232:	2702      	movs	r7, #2
 8001234:	2c00      	cmp	r4, #0
 8001236:	f040 8084 	bne.w	8001342 <_dtoa_r+0x4da>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1d2      	bne.n	80011e4 <_dtoa_r+0x37c>
 800123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 808b 	beq.w	800135c <_dtoa_r+0x4f4>
 8001246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800124a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800124e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <_dtoa_r+0x5ac>)
 8001254:	2200      	movs	r2, #0
 8001256:	f7ff fc3b 	bl	8000ad0 <__aeabi_dcmplt>
 800125a:	2800      	cmp	r0, #0
 800125c:	d07e      	beq.n	800135c <_dtoa_r+0x4f4>
 800125e:	9b08      	ldr	r3, [sp, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d07b      	beq.n	800135c <_dtoa_r+0x4f4>
 8001264:	f1b9 0f00 	cmp.w	r9, #0
 8001268:	dd38      	ble.n	80012dc <_dtoa_r+0x474>
 800126a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <_dtoa_r+0x5b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	f7ff f9a1 	bl	80005b8 <__aeabi_dmul>
 8001276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800127a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800127e:	3701      	adds	r7, #1
 8001280:	464c      	mov	r4, r9
 8001282:	4638      	mov	r0, r7
 8001284:	f7ff f92e 	bl	80004e4 <__aeabi_i2d>
 8001288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800128c:	f7ff f994 	bl	80005b8 <__aeabi_dmul>
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <_dtoa_r+0x5b4>)
 8001292:	2200      	movs	r2, #0
 8001294:	f7fe ffda 	bl	800024c <__adddf3>
 8001298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800129c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012a0:	9611      	str	r6, [sp, #68]	; 0x44
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d15d      	bne.n	8001362 <_dtoa_r+0x4fa>
 80012a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <_dtoa_r+0x5b8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f7fe ffcb 	bl	8000248 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012bc:	4633      	mov	r3, r6
 80012be:	f7ff fc25 	bl	8000b0c <__aeabi_dcmpgt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 829c 	bne.w	8001800 <_dtoa_r+0x998>
 80012c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80012d2:	f7ff fbfd 	bl	8000ad0 <__aeabi_dcmplt>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	f040 8290 	bne.w	80017fc <_dtoa_r+0x994>
 80012dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80012e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f2c0 8152 	blt.w	8001590 <_dtoa_r+0x728>
 80012ec:	f1ba 0f0e 	cmp.w	sl, #14
 80012f0:	f300 814e 	bgt.w	8001590 <_dtoa_r+0x728>
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <_dtoa_r+0x5a4>)
 80012f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80012fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001304:	2b00      	cmp	r3, #0
 8001306:	f280 80db 	bge.w	80014c0 <_dtoa_r+0x658>
 800130a:	9b08      	ldr	r3, [sp, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f300 80d7 	bgt.w	80014c0 <_dtoa_r+0x658>
 8001312:	f040 8272 	bne.w	80017fa <_dtoa_r+0x992>
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <_dtoa_r+0x5b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800131e:	f7ff f94b 	bl	80005b8 <__aeabi_dmul>
 8001322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001326:	f7ff fbe7 	bl	8000af8 <__aeabi_dcmpge>
 800132a:	9c08      	ldr	r4, [sp, #32]
 800132c:	4626      	mov	r6, r4
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 8248 	bne.w	80017c4 <_dtoa_r+0x95c>
 8001334:	9f03      	ldr	r7, [sp, #12]
 8001336:	2331      	movs	r3, #49	; 0x31
 8001338:	f807 3b01 	strb.w	r3, [r7], #1
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	e244      	b.n	80017cc <_dtoa_r+0x964>
 8001342:	07e2      	lsls	r2, r4, #31
 8001344:	d505      	bpl.n	8001352 <_dtoa_r+0x4ea>
 8001346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800134a:	f7ff f935 	bl	80005b8 <__aeabi_dmul>
 800134e:	3701      	adds	r7, #1
 8001350:	2301      	movs	r3, #1
 8001352:	1064      	asrs	r4, r4, #1
 8001354:	3608      	adds	r6, #8
 8001356:	e76d      	b.n	8001234 <_dtoa_r+0x3cc>
 8001358:	2702      	movs	r7, #2
 800135a:	e770      	b.n	800123e <_dtoa_r+0x3d6>
 800135c:	9c08      	ldr	r4, [sp, #32]
 800135e:	46d0      	mov	r8, sl
 8001360:	e78f      	b.n	8001282 <_dtoa_r+0x41a>
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <_dtoa_r+0x5a4>)
 8001366:	4421      	add	r1, r4
 8001368:	9112      	str	r1, [sp, #72]	; 0x48
 800136a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800136c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001378:	2900      	cmp	r1, #0
 800137a:	d055      	beq.n	8001428 <_dtoa_r+0x5c0>
 800137c:	4929      	ldr	r1, [pc, #164]	; (8001424 <_dtoa_r+0x5bc>)
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fa44 	bl	800080c <__aeabi_ddiv>
 8001384:	463b      	mov	r3, r7
 8001386:	4632      	mov	r2, r6
 8001388:	f7fe ff5e 	bl	8000248 <__aeabi_dsub>
 800138c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001390:	9f03      	ldr	r7, [sp, #12]
 8001392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_d2iz>
 800139a:	4604      	mov	r4, r0
 800139c:	f7ff f8a2 	bl	80004e4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013a8:	f7fe ff4e 	bl	8000248 <__aeabi_dsub>
 80013ac:	3430      	adds	r4, #48	; 0x30
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b6:	f807 4b01 	strb.w	r4, [r7], #1
 80013ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013be:	f7ff fb87 	bl	8000ad0 <__aeabi_dcmplt>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d174      	bne.n	80014b0 <_dtoa_r+0x648>
 80013c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <_dtoa_r+0x5ac>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7fe ff3b 	bl	8000248 <__aeabi_dsub>
 80013d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013d6:	f7ff fb7b 	bl	8000ad0 <__aeabi_dcmplt>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 80b7 	bne.w	800154e <_dtoa_r+0x6e6>
 80013e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80013e2:	429f      	cmp	r7, r3
 80013e4:	f43f af7a 	beq.w	80012dc <_dtoa_r+0x474>
 80013e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <_dtoa_r+0x5b0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_dmul>
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_dtoa_r+0x5b0>)
 80013f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013fa:	2200      	movs	r2, #0
 80013fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001400:	f7ff f8da 	bl	80005b8 <__aeabi_dmul>
 8001404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001408:	e7c3      	b.n	8001392 <_dtoa_r+0x52a>
 800140a:	bf00      	nop
 800140c:	0800c010 	.word	0x0800c010
 8001410:	0800bfe8 	.word	0x0800bfe8
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	40240000 	.word	0x40240000
 800141c:	401c0000 	.word	0x401c0000
 8001420:	40140000 	.word	0x40140000
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	4630      	mov	r0, r6
 800142a:	4639      	mov	r1, r7
 800142c:	f7ff f8c4 	bl	80005b8 <__aeabi_dmul>
 8001430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001436:	9c03      	ldr	r4, [sp, #12]
 8001438:	9314      	str	r3, [sp, #80]	; 0x50
 800143a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800143e:	f7ff fb85 	bl	8000b4c <__aeabi_d2iz>
 8001442:	9015      	str	r0, [sp, #84]	; 0x54
 8001444:	f7ff f84e 	bl	80004e4 <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001450:	f7fe fefa 	bl	8000248 <__aeabi_dsub>
 8001454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	f804 3b01 	strb.w	r3, [r4], #1
 800145c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800145e:	429c      	cmp	r4, r3
 8001460:	4606      	mov	r6, r0
 8001462:	460f      	mov	r7, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	d124      	bne.n	80014b4 <_dtoa_r+0x64c>
 800146a:	4ba4      	ldr	r3, [pc, #656]	; (80016fc <_dtoa_r+0x894>)
 800146c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001470:	f7fe feec 	bl	800024c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4630      	mov	r0, r6
 800147a:	4639      	mov	r1, r7
 800147c:	f7ff fb46 	bl	8000b0c <__aeabi_dcmpgt>
 8001480:	2800      	cmp	r0, #0
 8001482:	d163      	bne.n	800154c <_dtoa_r+0x6e4>
 8001484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001488:	499c      	ldr	r1, [pc, #624]	; (80016fc <_dtoa_r+0x894>)
 800148a:	2000      	movs	r0, #0
 800148c:	f7fe fedc 	bl	8000248 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4630      	mov	r0, r6
 8001496:	4639      	mov	r1, r7
 8001498:	f7ff fb1a 	bl	8000ad0 <__aeabi_dcmplt>
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af1d 	beq.w	80012dc <_dtoa_r+0x474>
 80014a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80014a4:	1e7b      	subs	r3, r7, #1
 80014a6:	9314      	str	r3, [sp, #80]	; 0x50
 80014a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80014ac:	2b30      	cmp	r3, #48	; 0x30
 80014ae:	d0f8      	beq.n	80014a2 <_dtoa_r+0x63a>
 80014b0:	46c2      	mov	sl, r8
 80014b2:	e03b      	b.n	800152c <_dtoa_r+0x6c4>
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <_dtoa_r+0x898>)
 80014b6:	f7ff f87f 	bl	80005b8 <__aeabi_dmul>
 80014ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014be:	e7bc      	b.n	800143a <_dtoa_r+0x5d2>
 80014c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014ca:	4640      	mov	r0, r8
 80014cc:	4649      	mov	r1, r9
 80014ce:	f7ff f99d 	bl	800080c <__aeabi_ddiv>
 80014d2:	f7ff fb3b 	bl	8000b4c <__aeabi_d2iz>
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff f804 	bl	80004e4 <__aeabi_i2d>
 80014dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7fe feaa 	bl	8000248 <__aeabi_dsub>
 80014f4:	f807 6b01 	strb.w	r6, [r7], #1
 80014f8:	9e03      	ldr	r6, [sp, #12]
 80014fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80014fe:	1bbe      	subs	r6, r7, r6
 8001500:	45b4      	cmp	ip, r6
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	d136      	bne.n	8001576 <_dtoa_r+0x70e>
 8001508:	f7fe fea0 	bl	800024c <__adddf3>
 800150c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	f7ff fafa 	bl	8000b0c <__aeabi_dcmpgt>
 8001518:	bb58      	cbnz	r0, 8001572 <_dtoa_r+0x70a>
 800151a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff facb 	bl	8000abc <__aeabi_dcmpeq>
 8001526:	b108      	cbz	r0, 800152c <_dtoa_r+0x6c4>
 8001528:	07e1      	lsls	r1, r4, #31
 800152a:	d422      	bmi.n	8001572 <_dtoa_r+0x70a>
 800152c:	4628      	mov	r0, r5
 800152e:	4659      	mov	r1, fp
 8001530:	f006 fe3c 	bl	80081ac <_Bfree>
 8001534:	2300      	movs	r3, #0
 8001536:	703b      	strb	r3, [r7, #0]
 8001538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800153a:	f10a 0001 	add.w	r0, sl, #1
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f acdd 	beq.w	8000f02 <_dtoa_r+0x9a>
 8001548:	601f      	str	r7, [r3, #0]
 800154a:	e4da      	b.n	8000f02 <_dtoa_r+0x9a>
 800154c:	4627      	mov	r7, r4
 800154e:	463b      	mov	r3, r7
 8001550:	461f      	mov	r7, r3
 8001552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001556:	2a39      	cmp	r2, #57	; 0x39
 8001558:	d107      	bne.n	800156a <_dtoa_r+0x702>
 800155a:	9a03      	ldr	r2, [sp, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1f7      	bne.n	8001550 <_dtoa_r+0x6e8>
 8001560:	9903      	ldr	r1, [sp, #12]
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	f108 0801 	add.w	r8, r8, #1
 8001568:	700a      	strb	r2, [r1, #0]
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	3201      	adds	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e79e      	b.n	80014b0 <_dtoa_r+0x648>
 8001572:	46d0      	mov	r8, sl
 8001574:	e7eb      	b.n	800154e <_dtoa_r+0x6e6>
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <_dtoa_r+0x898>)
 8001578:	2200      	movs	r2, #0
 800157a:	f7ff f81d 	bl	80005b8 <__aeabi_dmul>
 800157e:	2200      	movs	r2, #0
 8001580:	2300      	movs	r3, #0
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
 8001586:	f7ff fa99 	bl	8000abc <__aeabi_dcmpeq>
 800158a:	2800      	cmp	r0, #0
 800158c:	d09b      	beq.n	80014c6 <_dtoa_r+0x65e>
 800158e:	e7cd      	b.n	800152c <_dtoa_r+0x6c4>
 8001590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001592:	2a00      	cmp	r2, #0
 8001594:	f000 80d0 	beq.w	8001738 <_dtoa_r+0x8d0>
 8001598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800159a:	2a01      	cmp	r2, #1
 800159c:	f300 80b2 	bgt.w	8001704 <_dtoa_r+0x89c>
 80015a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <_dtoa_r+0x88c>
 80015a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80015ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80015ae:	9f06      	ldr	r7, [sp, #24]
 80015b0:	9a06      	ldr	r2, [sp, #24]
 80015b2:	441a      	add	r2, r3
 80015b4:	9206      	str	r2, [sp, #24]
 80015b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015b8:	2101      	movs	r1, #1
 80015ba:	441a      	add	r2, r3
 80015bc:	4628      	mov	r0, r5
 80015be:	9209      	str	r2, [sp, #36]	; 0x24
 80015c0:	f006 fe5c 	bl	800827c <__i2b>
 80015c4:	4606      	mov	r6, r0
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	dd0c      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd09      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015d0:	42bb      	cmp	r3, r7
 80015d2:	9a06      	ldr	r2, [sp, #24]
 80015d4:	bfa8      	it	ge
 80015d6:	463b      	movge	r3, r7
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	9206      	str	r2, [sp, #24]
 80015dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015de:	1aff      	subs	r7, r7, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e6:	b1f3      	cbz	r3, 8001626 <_dtoa_r+0x7be>
 80015e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a8 	beq.w	8001740 <_dtoa_r+0x8d8>
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	dd10      	ble.n	8001616 <_dtoa_r+0x7ae>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4622      	mov	r2, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f006 fefd 	bl	80083f8 <__pow5mult>
 80015fe:	465a      	mov	r2, fp
 8001600:	4601      	mov	r1, r0
 8001602:	4606      	mov	r6, r0
 8001604:	4628      	mov	r0, r5
 8001606:	f006 fe4f 	bl	80082a8 <__multiply>
 800160a:	4659      	mov	r1, fp
 800160c:	4680      	mov	r8, r0
 800160e:	4628      	mov	r0, r5
 8001610:	f006 fdcc 	bl	80081ac <_Bfree>
 8001614:	46c3      	mov	fp, r8
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001618:	1b1a      	subs	r2, r3, r4
 800161a:	d004      	beq.n	8001626 <_dtoa_r+0x7be>
 800161c:	4659      	mov	r1, fp
 800161e:	4628      	mov	r0, r5
 8001620:	f006 feea 	bl	80083f8 <__pow5mult>
 8001624:	4683      	mov	fp, r0
 8001626:	2101      	movs	r1, #1
 8001628:	4628      	mov	r0, r5
 800162a:	f006 fe27 	bl	800827c <__i2b>
 800162e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001630:	2b00      	cmp	r3, #0
 8001632:	4604      	mov	r4, r0
 8001634:	f340 8086 	ble.w	8001744 <_dtoa_r+0x8dc>
 8001638:	461a      	mov	r2, r3
 800163a:	4601      	mov	r1, r0
 800163c:	4628      	mov	r0, r5
 800163e:	f006 fedb 	bl	80083f8 <__pow5mult>
 8001642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001644:	2b01      	cmp	r3, #1
 8001646:	4604      	mov	r4, r0
 8001648:	dd7f      	ble.n	800174a <_dtoa_r+0x8e2>
 800164a:	f04f 0800 	mov.w	r8, #0
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001654:	6918      	ldr	r0, [r3, #16]
 8001656:	f00a f8bd 	bl	800b7d4 <__hi0bits>
 800165a:	f1c0 0020 	rsb	r0, r0, #32
 800165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001660:	4418      	add	r0, r3
 8001662:	f010 001f 	ands.w	r0, r0, #31
 8001666:	f000 8092 	beq.w	800178e <_dtoa_r+0x926>
 800166a:	f1c0 0320 	rsb	r3, r0, #32
 800166e:	2b04      	cmp	r3, #4
 8001670:	f340 808a 	ble.w	8001788 <_dtoa_r+0x920>
 8001674:	f1c0 001c 	rsb	r0, r0, #28
 8001678:	9b06      	ldr	r3, [sp, #24]
 800167a:	4403      	add	r3, r0
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001680:	4403      	add	r3, r0
 8001682:	4407      	add	r7, r0
 8001684:	9309      	str	r3, [sp, #36]	; 0x24
 8001686:	9b06      	ldr	r3, [sp, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd05      	ble.n	8001698 <_dtoa_r+0x830>
 800168c:	4659      	mov	r1, fp
 800168e:	461a      	mov	r2, r3
 8001690:	4628      	mov	r0, r5
 8001692:	f006 ff0b 	bl	80084ac <__lshift>
 8001696:	4683      	mov	fp, r0
 8001698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd05      	ble.n	80016aa <_dtoa_r+0x842>
 800169e:	4621      	mov	r1, r4
 80016a0:	461a      	mov	r2, r3
 80016a2:	4628      	mov	r0, r5
 80016a4:	f006 ff02 	bl	80084ac <__lshift>
 80016a8:	4604      	mov	r4, r0
 80016aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d070      	beq.n	8001792 <_dtoa_r+0x92a>
 80016b0:	4621      	mov	r1, r4
 80016b2:	4658      	mov	r0, fp
 80016b4:	f00a f8db 	bl	800b86e <__mcmp>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	da6a      	bge.n	8001792 <_dtoa_r+0x92a>
 80016bc:	2300      	movs	r3, #0
 80016be:	4659      	mov	r1, fp
 80016c0:	220a      	movs	r2, #10
 80016c2:	4628      	mov	r0, r5
 80016c4:	f006 fd94 	bl	80081f0 <__multadd>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80016ce:	4683      	mov	fp, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8194 	beq.w	80019fe <_dtoa_r+0xb96>
 80016d6:	4631      	mov	r1, r6
 80016d8:	2300      	movs	r3, #0
 80016da:	220a      	movs	r2, #10
 80016dc:	4628      	mov	r0, r5
 80016de:	f006 fd87 	bl	80081f0 <__multadd>
 80016e2:	f1b9 0f00 	cmp.w	r9, #0
 80016e6:	4606      	mov	r6, r0
 80016e8:	f300 8093 	bgt.w	8001812 <_dtoa_r+0x9aa>
 80016ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc57      	bgt.n	80017a2 <_dtoa_r+0x93a>
 80016f2:	e08e      	b.n	8001812 <_dtoa_r+0x9aa>
 80016f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80016fa:	e757      	b.n	80015ac <_dtoa_r+0x744>
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	40240000 	.word	0x40240000
 8001704:	9b08      	ldr	r3, [sp, #32]
 8001706:	1e5c      	subs	r4, r3, #1
 8001708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800170a:	42a3      	cmp	r3, r4
 800170c:	bfbf      	itttt	lt
 800170e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001712:	1ae2      	sublt	r2, r4, r3
 8001714:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001716:	bfb6      	itet	lt
 8001718:	189b      	addlt	r3, r3, r2
 800171a:	1b1c      	subge	r4, r3, r4
 800171c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800171e:	9b08      	ldr	r3, [sp, #32]
 8001720:	bfb8      	it	lt
 8001722:	2400      	movlt	r4, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb9      	ittee	lt
 8001728:	9b06      	ldrlt	r3, [sp, #24]
 800172a:	9a08      	ldrlt	r2, [sp, #32]
 800172c:	9f06      	ldrge	r7, [sp, #24]
 800172e:	9b08      	ldrge	r3, [sp, #32]
 8001730:	bfbc      	itt	lt
 8001732:	1a9f      	sublt	r7, r3, r2
 8001734:	2300      	movlt	r3, #0
 8001736:	e73b      	b.n	80015b0 <_dtoa_r+0x748>
 8001738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800173a:	9f06      	ldr	r7, [sp, #24]
 800173c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800173e:	e742      	b.n	80015c6 <_dtoa_r+0x75e>
 8001740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001742:	e76b      	b.n	800161c <_dtoa_r+0x7b4>
 8001744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001746:	2b01      	cmp	r3, #1
 8001748:	dc19      	bgt.n	800177e <_dtoa_r+0x916>
 800174a:	9b04      	ldr	r3, [sp, #16]
 800174c:	b9bb      	cbnz	r3, 800177e <_dtoa_r+0x916>
 800174e:	9b05      	ldr	r3, [sp, #20]
 8001750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001754:	b99b      	cbnz	r3, 800177e <_dtoa_r+0x916>
 8001756:	9b05      	ldr	r3, [sp, #20]
 8001758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	b183      	cbz	r3, 8001784 <_dtoa_r+0x91c>
 8001762:	9b06      	ldr	r3, [sp, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	9306      	str	r3, [sp, #24]
 8001768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176a:	3301      	adds	r3, #1
 800176c:	9309      	str	r3, [sp, #36]	; 0x24
 800176e:	f04f 0801 	mov.w	r8, #1
 8001772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af6a 	bne.w	800164e <_dtoa_r+0x7e6>
 800177a:	2001      	movs	r0, #1
 800177c:	e76f      	b.n	800165e <_dtoa_r+0x7f6>
 800177e:	f04f 0800 	mov.w	r8, #0
 8001782:	e7f6      	b.n	8001772 <_dtoa_r+0x90a>
 8001784:	4698      	mov	r8, r3
 8001786:	e7f4      	b.n	8001772 <_dtoa_r+0x90a>
 8001788:	f43f af7d 	beq.w	8001686 <_dtoa_r+0x81e>
 800178c:	4618      	mov	r0, r3
 800178e:	301c      	adds	r0, #28
 8001790:	e772      	b.n	8001678 <_dtoa_r+0x810>
 8001792:	9b08      	ldr	r3, [sp, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc36      	bgt.n	8001806 <_dtoa_r+0x99e>
 8001798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800179a:	2b02      	cmp	r3, #2
 800179c:	dd33      	ble.n	8001806 <_dtoa_r+0x99e>
 800179e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017a2:	f1b9 0f00 	cmp.w	r9, #0
 80017a6:	d10d      	bne.n	80017c4 <_dtoa_r+0x95c>
 80017a8:	4621      	mov	r1, r4
 80017aa:	464b      	mov	r3, r9
 80017ac:	2205      	movs	r2, #5
 80017ae:	4628      	mov	r0, r5
 80017b0:	f006 fd1e 	bl	80081f0 <__multadd>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4658      	mov	r0, fp
 80017ba:	f00a f858 	bl	800b86e <__mcmp>
 80017be:	2800      	cmp	r0, #0
 80017c0:	f73f adb8 	bgt.w	8001334 <_dtoa_r+0x4cc>
 80017c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80017c6:	9f03      	ldr	r7, [sp, #12]
 80017c8:	ea6f 0a03 	mvn.w	sl, r3
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	4621      	mov	r1, r4
 80017d2:	4628      	mov	r0, r5
 80017d4:	f006 fcea 	bl	80081ac <_Bfree>
 80017d8:	2e00      	cmp	r6, #0
 80017da:	f43f aea7 	beq.w	800152c <_dtoa_r+0x6c4>
 80017de:	f1b8 0f00 	cmp.w	r8, #0
 80017e2:	d005      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e4:	45b0      	cmp	r8, r6
 80017e6:	d003      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e8:	4641      	mov	r1, r8
 80017ea:	4628      	mov	r0, r5
 80017ec:	f006 fcde 	bl	80081ac <_Bfree>
 80017f0:	4631      	mov	r1, r6
 80017f2:	4628      	mov	r0, r5
 80017f4:	f006 fcda 	bl	80081ac <_Bfree>
 80017f8:	e698      	b.n	800152c <_dtoa_r+0x6c4>
 80017fa:	2400      	movs	r4, #0
 80017fc:	4626      	mov	r6, r4
 80017fe:	e7e1      	b.n	80017c4 <_dtoa_r+0x95c>
 8001800:	46c2      	mov	sl, r8
 8001802:	4626      	mov	r6, r4
 8001804:	e596      	b.n	8001334 <_dtoa_r+0x4cc>
 8001806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fd 	beq.w	8001a0c <_dtoa_r+0xba4>
 8001812:	2f00      	cmp	r7, #0
 8001814:	dd05      	ble.n	8001822 <_dtoa_r+0x9ba>
 8001816:	4631      	mov	r1, r6
 8001818:	463a      	mov	r2, r7
 800181a:	4628      	mov	r0, r5
 800181c:	f006 fe46 	bl	80084ac <__lshift>
 8001820:	4606      	mov	r6, r0
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	d05c      	beq.n	80018e2 <_dtoa_r+0xa7a>
 8001828:	6871      	ldr	r1, [r6, #4]
 800182a:	4628      	mov	r0, r5
 800182c:	f006 fc7e 	bl	800812c <_Balloc>
 8001830:	4607      	mov	r7, r0
 8001832:	b928      	cbnz	r0, 8001840 <_dtoa_r+0x9d8>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <_dtoa_r+0xbd0>)
 8001836:	4602      	mov	r2, r0
 8001838:	f240 21ea 	movw	r1, #746	; 0x2ea
 800183c:	f7ff bb28 	b.w	8000e90 <_dtoa_r+0x28>
 8001840:	6932      	ldr	r2, [r6, #16]
 8001842:	3202      	adds	r2, #2
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	f106 010c 	add.w	r1, r6, #12
 800184a:	300c      	adds	r0, #12
 800184c:	f009 fe0e 	bl	800b46c <memcpy>
 8001850:	2201      	movs	r2, #1
 8001852:	4639      	mov	r1, r7
 8001854:	4628      	mov	r0, r5
 8001856:	f006 fe29 	bl	80084ac <__lshift>
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	9308      	str	r3, [sp, #32]
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	444b      	add	r3, r9
 8001864:	930a      	str	r3, [sp, #40]	; 0x28
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	46b0      	mov	r8, r6
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
 8001870:	4606      	mov	r6, r0
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	4621      	mov	r1, r4
 8001876:	3b01      	subs	r3, #1
 8001878:	4658      	mov	r0, fp
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	f009 ff23 	bl	800b6c6 <quorem>
 8001880:	4603      	mov	r3, r0
 8001882:	3330      	adds	r3, #48	; 0x30
 8001884:	9006      	str	r0, [sp, #24]
 8001886:	4641      	mov	r1, r8
 8001888:	4658      	mov	r0, fp
 800188a:	930b      	str	r3, [sp, #44]	; 0x2c
 800188c:	f009 ffef 	bl	800b86e <__mcmp>
 8001890:	4632      	mov	r2, r6
 8001892:	4681      	mov	r9, r0
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f006 fe78 	bl	800858c <__mdiff>
 800189c:	68c2      	ldr	r2, [r0, #12]
 800189e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018a0:	4607      	mov	r7, r0
 80018a2:	bb02      	cbnz	r2, 80018e6 <_dtoa_r+0xa7e>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4658      	mov	r0, fp
 80018a8:	f009 ffe1 	bl	800b86e <__mcmp>
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	4602      	mov	r2, r0
 80018b0:	4639      	mov	r1, r7
 80018b2:	4628      	mov	r0, r5
 80018b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80018b8:	f006 fc78 	bl	80081ac <_Bfree>
 80018bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018c0:	9f08      	ldr	r7, [sp, #32]
 80018c2:	ea43 0102 	orr.w	r1, r3, r2
 80018c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c8:	430b      	orrs	r3, r1
 80018ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018cc:	d10d      	bne.n	80018ea <_dtoa_r+0xa82>
 80018ce:	2b39      	cmp	r3, #57	; 0x39
 80018d0:	d029      	beq.n	8001926 <_dtoa_r+0xabe>
 80018d2:	f1b9 0f00 	cmp.w	r9, #0
 80018d6:	dd01      	ble.n	80018dc <_dtoa_r+0xa74>
 80018d8:	9b06      	ldr	r3, [sp, #24]
 80018da:	3331      	adds	r3, #49	; 0x31
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	7013      	strb	r3, [r2, #0]
 80018e0:	e776      	b.n	80017d0 <_dtoa_r+0x968>
 80018e2:	4630      	mov	r0, r6
 80018e4:	e7b9      	b.n	800185a <_dtoa_r+0x9f2>
 80018e6:	2201      	movs	r2, #1
 80018e8:	e7e2      	b.n	80018b0 <_dtoa_r+0xa48>
 80018ea:	f1b9 0f00 	cmp.w	r9, #0
 80018ee:	db06      	blt.n	80018fe <_dtoa_r+0xa96>
 80018f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80018f2:	ea41 0909 	orr.w	r9, r1, r9
 80018f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018f8:	ea59 0101 	orrs.w	r1, r9, r1
 80018fc:	d120      	bne.n	8001940 <_dtoa_r+0xad8>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	ddec      	ble.n	80018dc <_dtoa_r+0xa74>
 8001902:	4659      	mov	r1, fp
 8001904:	2201      	movs	r2, #1
 8001906:	4628      	mov	r0, r5
 8001908:	9308      	str	r3, [sp, #32]
 800190a:	f006 fdcf 	bl	80084ac <__lshift>
 800190e:	4621      	mov	r1, r4
 8001910:	4683      	mov	fp, r0
 8001912:	f009 ffac 	bl	800b86e <__mcmp>
 8001916:	2800      	cmp	r0, #0
 8001918:	9b08      	ldr	r3, [sp, #32]
 800191a:	dc02      	bgt.n	8001922 <_dtoa_r+0xaba>
 800191c:	d1de      	bne.n	80018dc <_dtoa_r+0xa74>
 800191e:	07da      	lsls	r2, r3, #31
 8001920:	d5dc      	bpl.n	80018dc <_dtoa_r+0xa74>
 8001922:	2b39      	cmp	r3, #57	; 0x39
 8001924:	d1d8      	bne.n	80018d8 <_dtoa_r+0xa70>
 8001926:	9a04      	ldr	r2, [sp, #16]
 8001928:	2339      	movs	r3, #57	; 0x39
 800192a:	7013      	strb	r3, [r2, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	461f      	mov	r7, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001936:	2a39      	cmp	r2, #57	; 0x39
 8001938:	d050      	beq.n	80019dc <_dtoa_r+0xb74>
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e747      	b.n	80017d0 <_dtoa_r+0x968>
 8001940:	2a00      	cmp	r2, #0
 8001942:	dd03      	ble.n	800194c <_dtoa_r+0xae4>
 8001944:	2b39      	cmp	r3, #57	; 0x39
 8001946:	d0ee      	beq.n	8001926 <_dtoa_r+0xabe>
 8001948:	3301      	adds	r3, #1
 800194a:	e7c7      	b.n	80018dc <_dtoa_r+0xa74>
 800194c:	9a08      	ldr	r2, [sp, #32]
 800194e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001954:	428a      	cmp	r2, r1
 8001956:	d02a      	beq.n	80019ae <_dtoa_r+0xb46>
 8001958:	4659      	mov	r1, fp
 800195a:	2300      	movs	r3, #0
 800195c:	220a      	movs	r2, #10
 800195e:	4628      	mov	r0, r5
 8001960:	f006 fc46 	bl	80081f0 <__multadd>
 8001964:	45b0      	cmp	r8, r6
 8001966:	4683      	mov	fp, r0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 020a 	mov.w	r2, #10
 8001970:	4641      	mov	r1, r8
 8001972:	4628      	mov	r0, r5
 8001974:	d107      	bne.n	8001986 <_dtoa_r+0xb1e>
 8001976:	f006 fc3b 	bl	80081f0 <__multadd>
 800197a:	4680      	mov	r8, r0
 800197c:	4606      	mov	r6, r0
 800197e:	9b08      	ldr	r3, [sp, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	9308      	str	r3, [sp, #32]
 8001984:	e775      	b.n	8001872 <_dtoa_r+0xa0a>
 8001986:	f006 fc33 	bl	80081f0 <__multadd>
 800198a:	4631      	mov	r1, r6
 800198c:	4680      	mov	r8, r0
 800198e:	2300      	movs	r3, #0
 8001990:	220a      	movs	r2, #10
 8001992:	4628      	mov	r0, r5
 8001994:	f006 fc2c 	bl	80081f0 <__multadd>
 8001998:	4606      	mov	r6, r0
 800199a:	e7f0      	b.n	800197e <_dtoa_r+0xb16>
 800199c:	f1b9 0f00 	cmp.w	r9, #0
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	bfcc      	ite	gt
 80019a4:	464f      	movgt	r7, r9
 80019a6:	2701      	movle	r7, #1
 80019a8:	4417      	add	r7, r2
 80019aa:	f04f 0800 	mov.w	r8, #0
 80019ae:	4659      	mov	r1, fp
 80019b0:	2201      	movs	r2, #1
 80019b2:	4628      	mov	r0, r5
 80019b4:	9308      	str	r3, [sp, #32]
 80019b6:	f006 fd79 	bl	80084ac <__lshift>
 80019ba:	4621      	mov	r1, r4
 80019bc:	4683      	mov	fp, r0
 80019be:	f009 ff56 	bl	800b86e <__mcmp>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	dcb2      	bgt.n	800192c <_dtoa_r+0xac4>
 80019c6:	d102      	bne.n	80019ce <_dtoa_r+0xb66>
 80019c8:	9b08      	ldr	r3, [sp, #32]
 80019ca:	07db      	lsls	r3, r3, #31
 80019cc:	d4ae      	bmi.n	800192c <_dtoa_r+0xac4>
 80019ce:	463b      	mov	r3, r7
 80019d0:	461f      	mov	r7, r3
 80019d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80019d6:	2a30      	cmp	r2, #48	; 0x30
 80019d8:	d0fa      	beq.n	80019d0 <_dtoa_r+0xb68>
 80019da:	e6f9      	b.n	80017d0 <_dtoa_r+0x968>
 80019dc:	9a03      	ldr	r2, [sp, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1a5      	bne.n	800192e <_dtoa_r+0xac6>
 80019e2:	f10a 0a01 	add.w	sl, sl, #1
 80019e6:	2331      	movs	r3, #49	; 0x31
 80019e8:	e779      	b.n	80018de <_dtoa_r+0xa76>
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <_dtoa_r+0xbd4>)
 80019ec:	f7ff baa7 	b.w	8000f3e <_dtoa_r+0xd6>
 80019f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f aa80 	bne.w	8000ef8 <_dtoa_r+0x90>
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_dtoa_r+0xbd8>)
 80019fa:	f7ff baa0 	b.w	8000f3e <_dtoa_r+0xd6>
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	dc03      	bgt.n	8001a0c <_dtoa_r+0xba4>
 8001a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	f73f aecb 	bgt.w	80017a2 <_dtoa_r+0x93a>
 8001a0c:	9f03      	ldr	r7, [sp, #12]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4658      	mov	r0, fp
 8001a12:	f009 fe58 	bl	800b6c6 <quorem>
 8001a16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001a1a:	f807 3b01 	strb.w	r3, [r7], #1
 8001a1e:	9a03      	ldr	r2, [sp, #12]
 8001a20:	1aba      	subs	r2, r7, r2
 8001a22:	4591      	cmp	r9, r2
 8001a24:	ddba      	ble.n	800199c <_dtoa_r+0xb34>
 8001a26:	4659      	mov	r1, fp
 8001a28:	2300      	movs	r3, #0
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f006 fbdf 	bl	80081f0 <__multadd>
 8001a32:	4683      	mov	fp, r0
 8001a34:	e7eb      	b.n	8001a0e <_dtoa_r+0xba6>
 8001a36:	bf00      	nop
 8001a38:	0800c75b 	.word	0x0800c75b
 8001a3c:	0800c6b9 	.word	0x0800c6b9
 8001a40:	0800c6dd 	.word	0x0800c6dd

08001a44 <read_write_message>:
        }
        k_sleep(K_MSEC(1));
    }
}

static void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	4607      	mov	r7, r0
 8001a4a:	460e      	mov	r6, r1
 8001a4c:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001a4e:	2400      	movs	r4, #0
 8001a50:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a54:	e008      	b.n	8001a68 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 8001a56:	b1dd      	cbz	r5, 8001a90 <read_write_message+0x4c>
 8001a58:	f10d 0307 	add.w	r3, sp, #7
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	7831      	ldrb	r1, [r6, #0]
 8001a60:	4638      	mov	r0, r7
 8001a62:	f007 fad8 	bl	8009016 <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a66:	3401      	adds	r4, #1
 8001a68:	2c05      	cmp	r4, #5
 8001a6a:	dc6e      	bgt.n	8001b4a <read_write_message+0x106>
        switch (cur_field) {
 8001a6c:	2c05      	cmp	r4, #5
 8001a6e:	d8fa      	bhi.n	8001a66 <read_write_message+0x22>
 8001a70:	a301      	add	r3, pc, #4	; (adr r3, 8001a78 <read_write_message+0x34>)
 8001a72:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a57 	.word	0x08001a57
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001ac3 	.word	0x08001ac3
 8001a84:	08001ae5 	.word	0x08001ae5
 8001a88:	08001b07 	.word	0x08001b07
 8001a8c:	08001b29 	.word	0x08001b29
                    extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001a90:	f10d 0307 	add.w	r3, sp, #7
 8001a94:	2202      	movs	r2, #2
 8001a96:	4631      	mov	r1, r6
 8001a98:	4638      	mov	r0, r7
 8001a9a:	f007 fad9 	bl	8009050 <extract_msg_bit_field>
 8001a9e:	e7e2      	b.n	8001a66 <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001aa0:	b13d      	cbz	r5, 8001ab2 <read_write_message+0x6e>
 8001aa2:	f10d 0307 	add.w	r3, sp, #7
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	7871      	ldrb	r1, [r6, #1]
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f007 fab3 	bl	8009016 <fill_msg_bit_field>
 8001ab0:	e7d9      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8001ab2:	f10d 0307 	add.w	r3, sp, #7
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	1c71      	adds	r1, r6, #1
 8001aba:	4638      	mov	r0, r7
 8001abc:	f007 fac8 	bl	8009050 <extract_msg_bit_field>
 8001ac0:	e7d1      	b.n	8001a66 <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 8001ac2:	b13d      	cbz	r5, 8001ad4 <read_write_message+0x90>
 8001ac4:	f10d 0307 	add.w	r3, sp, #7
 8001ac8:	2204      	movs	r2, #4
 8001aca:	78b1      	ldrb	r1, [r6, #2]
 8001acc:	4638      	mov	r0, r7
 8001ace:	f007 faa2 	bl	8009016 <fill_msg_bit_field>
 8001ad2:	e7c8      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8001ad4:	f10d 0307 	add.w	r3, sp, #7
 8001ad8:	2204      	movs	r2, #4
 8001ada:	1cb1      	adds	r1, r6, #2
 8001adc:	4638      	mov	r0, r7
 8001ade:	f007 fab7 	bl	8009050 <extract_msg_bit_field>
 8001ae2:	e7c0      	b.n	8001a66 <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 8001ae4:	b13d      	cbz	r5, 8001af6 <read_write_message+0xb2>
 8001ae6:	f10d 0307 	add.w	r3, sp, #7
 8001aea:	2201      	movs	r2, #1
 8001aec:	78f1      	ldrb	r1, [r6, #3]
 8001aee:	4638      	mov	r0, r7
 8001af0:	f007 fa91 	bl	8009016 <fill_msg_bit_field>
 8001af4:	e7b7      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8001af6:	f10d 0307 	add.w	r3, sp, #7
 8001afa:	2201      	movs	r2, #1
 8001afc:	1cf1      	adds	r1, r6, #3
 8001afe:	4638      	mov	r0, r7
 8001b00:	f007 faa6 	bl	8009050 <extract_msg_bit_field>
 8001b04:	e7af      	b.n	8001a66 <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 8001b06:	b13d      	cbz	r5, 8001b18 <read_write_message+0xd4>
 8001b08:	f10d 0307 	add.w	r3, sp, #7
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	7931      	ldrb	r1, [r6, #4]
 8001b10:	4638      	mov	r0, r7
 8001b12:	f007 fa80 	bl	8009016 <fill_msg_bit_field>
 8001b16:	e7a6      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001b18:	f10d 0307 	add.w	r3, sp, #7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	1d31      	adds	r1, r6, #4
 8001b20:	4638      	mov	r0, r7
 8001b22:	f007 fa95 	bl	8009050 <extract_msg_bit_field>
 8001b26:	e79e      	b.n	8001a66 <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001b28:	b13d      	cbz	r5, 8001b3a <read_write_message+0xf6>
 8001b2a:	f10d 0307 	add.w	r3, sp, #7
 8001b2e:	2208      	movs	r2, #8
 8001b30:	7971      	ldrb	r1, [r6, #5]
 8001b32:	4638      	mov	r0, r7
 8001b34:	f007 fa6f 	bl	8009016 <fill_msg_bit_field>
 8001b38:	e795      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001b3a:	f10d 0307 	add.w	r3, sp, #7
 8001b3e:	2208      	movs	r2, #8
 8001b40:	1d71      	adds	r1, r6, #5
 8001b42:	4638      	mov	r0, r7
 8001b44:	f007 fa84 	bl	8009050 <extract_msg_bit_field>
 8001b48:	e78d      	b.n	8001a66 <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4e:	bf00      	nop

08001b50 <send_msg>:
int send_msg() {
 8001b50:	b530      	push	{r4, r5, lr}
 8001b52:	b083      	sub	sp, #12
    uint32_t new_msg = 0;
 8001b54:	2400      	movs	r4, #0
 8001b56:	9401      	str	r4, [sp, #4]
    read_write_message(&new_msg, &tx_msg, true);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4914      	ldr	r1, [pc, #80]	; (8001bac <send_msg+0x5c>)
 8001b5c:	a801      	add	r0, sp, #4
 8001b5e:	f7ff ff71 	bl	8001a44 <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b62:	e00d      	b.n	8001b80 <send_msg+0x30>
        tx_buf[i] = (new_msg & (0x000000FF << i*8) ) >> i*8;
 8001b64:	00e3      	lsls	r3, r4, #3
 8001b66:	20ff      	movs	r0, #255	; 0xff
 8001b68:	4098      	lsls	r0, r3
 8001b6a:	9a01      	ldr	r2, [sp, #4]
 8001b6c:	4010      	ands	r0, r2
 8001b6e:	40d8      	lsrs	r0, r3
 8001b70:	b2c0      	uxtb	r0, r0
 8001b72:	4d0f      	ldr	r5, [pc, #60]	; (8001bb0 <send_msg+0x60>)
 8001b74:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001b76:	f007 fa8b 	bl	8009090 <reverse>
 8001b7a:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b7c:	3401      	adds	r4, #1
 8001b7e:	b2e4      	uxtb	r4, r4
 8001b80:	2c02      	cmp	r4, #2
 8001b82:	d9ef      	bls.n	8001b64 <send_msg+0x14>
    if (!lora_cfg.tx) {
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <send_msg+0x64>)
 8001b86:	7adb      	ldrb	r3, [r3, #11]
 8001b88:	b93b      	cbnz	r3, 8001b9a <send_msg+0x4a>
        lora_cfg.tx = true;
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <send_msg+0x64>)
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	72cb      	strb	r3, [r1, #11]
        lora_config(lora_dev_ptr, &lora_cfg);
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <send_msg+0x68>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001b94:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4798      	blx	r3
    rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <send_msg+0x68>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001b9e:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4902      	ldr	r1, [pc, #8]	; (8001bb0 <send_msg+0x60>)
 8001ba6:	4798      	blx	r3
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
 8001bac:	200006fc 	.word	0x200006fc
 8001bb0:	200006f8 	.word	0x200006f8
 8001bb4:	20000680 	.word	0x20000680
 8001bb8:	2000068c 	.word	0x2000068c

08001bbc <control_timer_handler>:
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
        return LIGHT_UP_ZERO;
    }
}
#ifdef BASE_STATION
void control_timer_handler(struct k_timer* tim) {
 8001bbc:	b500      	push	{lr}
 8001bbe:	b083      	sub	sp, #12
    volatile int rc = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
    printk("timer handler");
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <control_timer_handler+0x1c>)
 8001bc6:	f007 fa76 	bl	80090b6 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001bca:	4804      	ldr	r0, [pc, #16]	; (8001bdc <control_timer_handler+0x20>)
 8001bcc:	f004 fbaa 	bl	8006324 <z_impl_k_sem_give>
    k_sem_give(&sem_anti_dream_msg);
//    k_timer_start
}
 8001bd0:	b003      	add	sp, #12
 8001bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bd6:	bf00      	nop
 8001bd8:	0800c0d8 	.word	0x0800c0d8
 8001bdc:	200006b8 	.word	0x200006b8

08001be0 <system_init>:
                unsigned int sem_proc_data_init_val, unsigned int sem_proc_data_lim) {
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be4:	b083      	sub	sp, #12
 8001be6:	4681      	mov	r9, r0
 8001be8:	460e      	mov	r6, r1
 8001bea:	4617      	mov	r7, r2
 8001bec:	461d      	mov	r5, r3
    lora_cfg.frequency = 433000000;
 8001bee:	4c2a      	ldr	r4, [pc, #168]	; (8001c98 <system_init+0xb8>)
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <system_init+0xbc>)
 8001bf2:	6023      	str	r3, [r4, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	7123      	strb	r3, [r4, #4]
    lora_cfg.datarate = SF_10;
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	7162      	strb	r2, [r4, #5]
    lora_cfg.preamble_len = 8;
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	8122      	strh	r2, [r4, #8]
    lora_cfg.coding_rate = CR_4_5;
 8001c00:	2201      	movs	r2, #1
 8001c02:	71a2      	strb	r2, [r4, #6]
    lora_cfg.tx_power = 5;
 8001c04:	2205      	movs	r2, #5
 8001c06:	72a2      	strb	r2, [r4, #10]
    lora_cfg.tx = false;
 8001c08:	72e3      	strb	r3, [r4, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001c0a:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <system_init+0xc0>)
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <system_init+0xc4>)
 8001c0e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001c10:	f008 ff35 	bl	800aa7e <z_device_ready>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d036      	beq.n	8001c86 <system_init+0xa6>
 8001c18:	2300      	movs	r3, #0
    if (!device_is_ready(lora_dev_ptr)) {
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d136      	bne.n	8001c8c <system_init+0xac>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <system_init+0xc4>)
 8001c20:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001c22:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	491c      	ldr	r1, [pc, #112]	; (8001c98 <system_init+0xb8>)
 8001c28:	4798      	blx	r3
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	db31      	blt.n	8001c92 <system_init+0xb2>
    k_timer_init(&control_timer, control_timer_handler, NULL);
 8001c2e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001ca8 <system_init+0xc8>
 8001c32:	2200      	movs	r2, #0
 8001c34:	491d      	ldr	r1, [pc, #116]	; (8001cac <system_init+0xcc>)
 8001c36:	4640      	mov	r0, r8
 8001c38:	f009 fae1 	bl	800b1fe <k_timer_init>
    k_timer_start(&control_timer, K_SECONDS(tim_duration_min * 60),
 8001c3c:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001c40:	fb00 f409 	mul.w	r4, r0, r9
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001c44:	00a0      	lsls	r0, r4, #2
 8001c46:	1900      	adds	r0, r0, r4
 8001c48:	bf2c      	ite	cs
 8001c4a:	2301      	movcs	r3, #1
 8001c4c:	2300      	movcc	r3, #0
 8001c4e:	1802      	adds	r2, r0, r0
 8001c50:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	4640      	mov	r0, r8
 8001c58:	f005 fad8 	bl	800720c <z_impl_k_timer_start>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	4631      	mov	r1, r6
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <system_init+0xd0>)
 8001c62:	f009 f84f 	bl	800ad04 <z_impl_k_sem_init>
 8001c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c68:	4629      	mov	r1, r5
 8001c6a:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <system_init+0xd4>)
 8001c6c:	f009 f84a 	bl	800ad04 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
 8001c70:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <system_init+0xd8>)
 8001c72:	f009 f82e 	bl	800acd2 <z_impl_k_queue_init>
    k_work_init(&sender, send_msg);
 8001c76:	4911      	ldr	r1, [pc, #68]	; (8001cbc <system_init+0xdc>)
 8001c78:	4811      	ldr	r0, [pc, #68]	; (8001cc0 <system_init+0xe0>)
 8001c7a:	f009 f856 	bl	800ad2a <k_work_init>
    return 0;
 8001c7e:	2000      	movs	r0, #0
}
 8001c80:	b003      	add	sp, #12
 8001c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c86:	f06f 0312 	mvn.w	r3, #18
 8001c8a:	e7c6      	b.n	8001c1a <system_init+0x3a>
        return -1;
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c90:	e7f6      	b.n	8001c80 <system_init+0xa0>
        return -1;
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c96:	e7f3      	b.n	8001c80 <system_init+0xa0>
 8001c98:	20000680 	.word	0x20000680
 8001c9c:	19cf0e40 	.word	0x19cf0e40
 8001ca0:	0800bc88 	.word	0x0800bc88
 8001ca4:	2000068c 	.word	0x2000068c
 8001ca8:	200003a0 	.word	0x200003a0
 8001cac:	08001bbd 	.word	0x08001bbd
 8001cb0:	200006b8 	.word	0x200006b8
 8001cb4:	200006d0 	.word	0x200006d0
 8001cb8:	20000690 	.word	0x20000690
 8001cbc:	08001b51 	.word	0x08001b51
 8001cc0:	200006e8 	.word	0x200006e8

08001cc4 <recv_msg>:
void recv_msg(void) {
 8001cc4:	b530      	push	{r4, r5, lr}
 8001cc6:	b087      	sub	sp, #28
    system_init(TIMER_DURATION_MIN, SEM_ANTI_DREAM_INIT_VAL, SEM_ANTI_DREAM_LIM,
 8001cc8:	2001      	movs	r0, #1
 8001cca:	9000      	str	r0, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff ff85 	bl	8001be0 <system_init>
    int16_t rssi = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8ad 3016 	strh.w	r3, [sp, #22]
    int8_t snr = 0;
 8001cdc:	f88d 3015 	strb.w	r3, [sp, #21]
        printk("thread_1\n");
 8001ce0:	4824      	ldr	r0, [pc, #144]	; (8001d74 <recv_msg+0xb0>)
 8001ce2:	f007 f9e8 	bl	80090b6 <printk>
        if (lora_dev_ptr) {
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <recv_msg+0xb4>)
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0f8      	beq.n	8001ce0 <recv_msg+0x1c>
            if (lora_cfg.tx) {
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <recv_msg+0xb8>)
 8001cf0:	7adb      	ldrb	r3, [r3, #11]
 8001cf2:	b12b      	cbz	r3, 8001d00 <recv_msg+0x3c>
                lora_cfg.tx = false;
 8001cf4:	4921      	ldr	r1, [pc, #132]	; (8001d7c <recv_msg+0xb8>)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	72cb      	strb	r3, [r1, #11]
	const struct lora_driver_api *api =
 8001cfa:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4798      	blx	r3
            rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <recv_msg+0xb4>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001d04:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f10d 0215 	add.w	r2, sp, #21
 8001d0c:	9203      	str	r2, [sp, #12]
 8001d0e:	f10d 0216 	add.w	r2, sp, #22
 8001d12:	9202      	str	r2, [sp, #8]
 8001d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001d18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d1c:	e9cd 4500 	strd	r4, r5, [sp]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4917      	ldr	r1, [pc, #92]	; (8001d80 <recv_msg+0xbc>)
 8001d24:	4798      	blx	r3
            if (rc > 0) {
 8001d26:	2800      	cmp	r0, #0
 8001d28:	dc1a      	bgt.n	8001d60 <recv_msg+0x9c>
	return z_impl_k_sem_take(sem, timeout);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	4815      	ldr	r0, [pc, #84]	; (8001d84 <recv_msg+0xc0>)
 8001d30:	f004 fb20 	bl	8006374 <z_impl_k_sem_take>
            if (!k_sem_take(&sem_anti_dream_msg, K_NO_WAIT)) {
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d1d3      	bne.n	8001ce0 <recv_msg+0x1c>
                tx_msg.receiver_addr = RECV_SIGNALMAN_1;
 8001d38:	4c13      	ldr	r4, [pc, #76]	; (8001d88 <recv_msg+0xc4>)
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	7063      	strb	r3, [r4, #1]
                tx_msg.sender_addr = cur_dev_addr;
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <recv_msg+0xc8>)
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	7022      	strb	r2, [r4, #0]
                tx_msg.people_in_safe_zone = people_in_safe_zone;
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <recv_msg+0xcc>)
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	7162      	strb	r2, [r4, #5]
                tx_msg.direction = REQUEST;
 8001d4a:	70e3      	strb	r3, [r4, #3]
                tx_msg.message_type = MESSAGE_TYPE_ANTI_DREAM;
 8001d4c:	2502      	movs	r5, #2
 8001d4e:	70a5      	strb	r5, [r4, #2]
                send_msg(&tx_msg);  // it may need to be done several times
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7ff fefd 	bl	8001b50 <send_msg>
                tx_msg.receiver_addr = RECV_SIGNALMAN_2;
 8001d56:	7065      	strb	r5, [r4, #1]
                send_msg(&tx_msg); // it may need to be done several times
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7ff fef9 	bl	8001b50 <send_msg>
 8001d5e:	e7bf      	b.n	8001ce0 <recv_msg+0x1c>
	z_impl_k_sem_give(sem);
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <recv_msg+0xd0>)
 8001d62:	f004 fadf 	bl	8006324 <z_impl_k_sem_give>
                k_queue_append(&queue_rssi, &rssi);
 8001d66:	f10d 0116 	add.w	r1, sp, #22
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <recv_msg+0xd4>)
 8001d6c:	f008 ffbe 	bl	800acec <k_queue_append>
 8001d70:	e7db      	b.n	8001d2a <recv_msg+0x66>
 8001d72:	bf00      	nop
 8001d74:	0800c0e8 	.word	0x0800c0e8
 8001d78:	2000068c 	.word	0x2000068c
 8001d7c:	20000680 	.word	0x20000680
 8001d80:	200006ac 	.word	0x200006ac
 8001d84:	200006b8 	.word	0x200006b8
 8001d88:	200006fc 	.word	0x200006fc
 8001d8c:	20000290 	.word	0x20000290
 8001d90:	20000291 	.word	0x20000291
 8001d94:	200006d0 	.word	0x200006d0
 8001d98:	20000690 	.word	0x20000690

08001d9c <processing_data>:
void processing_data() {
 8001d9c:	b530      	push	{r4, r5, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	e01c      	b.n	8001ddc <processing_data+0x40>
                rx_buf[i] = reverse(rx_buf[i]);
 8001da2:	4d17      	ldr	r5, [pc, #92]	; (8001e00 <processing_data+0x64>)
 8001da4:	5d28      	ldrb	r0, [r5, r4]
 8001da6:	f007 f973 	bl	8009090 <reverse>
 8001daa:	5528      	strb	r0, [r5, r4]
                cur_msg |= (rx_buf[i]) << i*8;
 8001dac:	00e3      	lsls	r3, r4, #3
 8001dae:	4098      	lsls	r0, r3
 8001db0:	9b01      	ldr	r3, [sp, #4]
 8001db2:	4318      	orrs	r0, r3
 8001db4:	9001      	str	r0, [sp, #4]
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001db6:	3401      	adds	r4, #1
 8001db8:	b2e4      	uxtb	r4, r4
 8001dba:	2c02      	cmp	r4, #2
 8001dbc:	d9f1      	bls.n	8001da2 <processing_data+0x6>
            read_write_message(&cur_msg, &rx_msg, false); // rx_msg struct is fill
 8001dbe:	4c11      	ldr	r4, [pc, #68]	; (8001e04 <processing_data+0x68>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	a801      	add	r0, sp, #4
 8001dc6:	f7ff fe3d 	bl	8001a44 <read_write_message>
            if ( rx_msg.receiver_addr != cur_dev_addr )
 8001dca:	7862      	ldrb	r2, [r4, #1]
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <processing_data+0x6c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d103      	bne.n	8001ddc <processing_data+0x40>
	return z_impl_k_sleep(timeout);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f004 ffe6 	bl	8006da8 <z_impl_k_sleep>
        printk("thread_2\n");
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <processing_data+0x70>)
 8001dde:	f007 f96a 	bl	80090b6 <printk>
	return z_impl_k_sem_take(sem, timeout);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2300      	movs	r3, #0
 8001de6:	480a      	ldr	r0, [pc, #40]	; (8001e10 <processing_data+0x74>)
 8001de8:	f004 fac4 	bl	8006374 <z_impl_k_sem_take>
        if ( !k_sem_take(&sem_proc_data, K_NO_WAIT) ) {
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d1f1      	bne.n	8001dd4 <processing_data+0x38>
            uint32_t cur_msg = 0;
 8001df0:	2400      	movs	r4, #0
 8001df2:	9401      	str	r4, [sp, #4]
	return z_impl_k_queue_get(queue, timeout);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <processing_data+0x78>)
 8001dfa:	f004 fa57 	bl	80062ac <z_impl_k_queue_get>
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001dfe:	e7dc      	b.n	8001dba <processing_data+0x1e>
 8001e00:	200006ac 	.word	0x200006ac
 8001e04:	200006b0 	.word	0x200006b0
 8001e08:	20000290 	.word	0x20000290
 8001e0c:	0800c0f4 	.word	0x0800c0f4
 8001e10:	200006d0 	.word	0x200006d0
 8001e14:	20000690 	.word	0x20000690

08001e18 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8001e18:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8001e1a:	680b      	ldr	r3, [r1, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <char_out+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4798      	blx	r3
}
 8001e26:	bd08      	pop	{r3, pc}
 8001e28:	20000000 	.word	0x20000000

08001e2c <__printk_hook_install>:
	_char_out = fn;
 8001e2c:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <__printk_hook_install+0x8>)
 8001e2e:	6018      	str	r0, [r3, #0]
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8001e38:	b500      	push	{lr}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8001e40:	2100      	movs	r1, #0
 8001e42:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8001e44:	a901      	add	r1, sp, #4
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <vprintk+0x1c>)
 8001e48:	f000 fa16 	bl	8002278 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8001e4c:	b003      	add	sp, #12
 8001e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e52:	bf00      	nop
 8001e54:	08001e19 	.word	0x08001e19

08001e58 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8001e58:	4684      	mov	ip, r0
	const char *sp = *str;
 8001e5a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8001e5c:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8001e5e:	e005      	b.n	8001e6c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8001e60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e64:	3201      	adds	r2, #1
 8001e66:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001e6a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001e6c:	7813      	ldrb	r3, [r2, #0]
 8001e6e:	4904      	ldr	r1, [pc, #16]	; (8001e80 <extract_decimal+0x28>)
 8001e70:	5c59      	ldrb	r1, [r3, r1]
 8001e72:	f011 0f04 	tst.w	r1, #4
 8001e76:	d1f3      	bne.n	8001e60 <extract_decimal+0x8>
	}
	*str = sp;
 8001e78:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	0800c5a9 	.word	0x0800c5a9

08001e84 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6003      	str	r3, [r0, #0]
 8001e8e:	6043      	str	r3, [r0, #4]
 8001e90:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8001e92:	784b      	ldrb	r3, [r1, #1]
 8001e94:	2b25      	cmp	r3, #37	; 0x25
 8001e96:	d002      	beq.n	8001e9e <extract_conversion+0x1a>
 8001e98:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8001e9a:	2501      	movs	r5, #1
 8001e9c:	e01f      	b.n	8001ede <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8001e9e:	1c88      	adds	r0, r1, #2
 8001ea0:	70e3      	strb	r3, [r4, #3]
		return sp;
 8001ea2:	e145      	b.n	8002130 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8001ea4:	7823      	ldrb	r3, [r4, #0]
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8001eac:	b1b5      	cbz	r5, 8001edc <extract_conversion+0x58>
			++sp;
 8001eae:	3601      	adds	r6, #1
 8001eb0:	e014      	b.n	8001edc <extract_conversion+0x58>
			conv->flag_plus = true;
 8001eb2:	7823      	ldrb	r3, [r4, #0]
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	7023      	strb	r3, [r4, #0]
			break;
 8001eba:	e7f7      	b.n	8001eac <extract_conversion+0x28>
			conv->flag_space = true;
 8001ebc:	7823      	ldrb	r3, [r4, #0]
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	7023      	strb	r3, [r4, #0]
			break;
 8001ec4:	e7f2      	b.n	8001eac <extract_conversion+0x28>
			conv->flag_hash = true;
 8001ec6:	7823      	ldrb	r3, [r4, #0]
 8001ec8:	f043 0320 	orr.w	r3, r3, #32
 8001ecc:	7023      	strb	r3, [r4, #0]
			break;
 8001ece:	e7ed      	b.n	8001eac <extract_conversion+0x28>
			conv->flag_zero = true;
 8001ed0:	7823      	ldrb	r3, [r4, #0]
 8001ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed6:	7023      	strb	r3, [r4, #0]
			break;
 8001ed8:	e7e8      	b.n	8001eac <extract_conversion+0x28>
		switch (*sp) {
 8001eda:	2500      	movs	r5, #0
	} while (loop);
 8001edc:	b345      	cbz	r5, 8001f30 <extract_conversion+0xac>
		switch (*sp) {
 8001ede:	7833      	ldrb	r3, [r6, #0]
 8001ee0:	3b20      	subs	r3, #32
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d8f9      	bhi.n	8001eda <extract_conversion+0x56>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <extract_conversion+0x68>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001ebd 	.word	0x08001ebd
 8001ef0:	08001edb 	.word	0x08001edb
 8001ef4:	08001edb 	.word	0x08001edb
 8001ef8:	08001ec7 	.word	0x08001ec7
 8001efc:	08001edb 	.word	0x08001edb
 8001f00:	08001edb 	.word	0x08001edb
 8001f04:	08001edb 	.word	0x08001edb
 8001f08:	08001edb 	.word	0x08001edb
 8001f0c:	08001edb 	.word	0x08001edb
 8001f10:	08001edb 	.word	0x08001edb
 8001f14:	08001edb 	.word	0x08001edb
 8001f18:	08001eb3 	.word	0x08001eb3
 8001f1c:	08001edb 	.word	0x08001edb
 8001f20:	08001ea5 	.word	0x08001ea5
 8001f24:	08001edb 	.word	0x08001edb
 8001f28:	08001edb 	.word	0x08001edb
 8001f2c:	08001ed1 	.word	0x08001ed1
	if (conv->flag_zero && conv->flag_dash) {
 8001f30:	7823      	ldrb	r3, [r4, #0]
 8001f32:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001f36:	2b44      	cmp	r3, #68	; 0x44
 8001f38:	d05f      	beq.n	8001ffa <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8001f3a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8001f3c:	7823      	ldrb	r3, [r4, #0]
 8001f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f42:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8001f44:	7833      	ldrb	r3, [r6, #0]
 8001f46:	2b2a      	cmp	r3, #42	; 0x2a
 8001f48:	d05c      	beq.n	8002004 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8001f4a:	a801      	add	r0, sp, #4
 8001f4c:	f7ff ff84 	bl	8001e58 <extract_decimal>
	if (sp != wp) {
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	429e      	cmp	r6, r3
 8001f54:	d00f      	beq.n	8001f76 <extract_conversion+0xf2>
		conv->width_present = true;
 8001f56:	7823      	ldrb	r3, [r4, #0]
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8001f5e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8001f66:	2800      	cmp	r0, #0
 8001f68:	db54      	blt.n	8002014 <extract_conversion+0x190>
 8001f6a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	7822      	ldrb	r2, [r4, #0]
 8001f70:	f363 0241 	bfi	r2, r3, #1, #1
 8001f74:	7022      	strb	r2, [r4, #0]
	return sp;
 8001f76:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8001f78:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001f7e:	bf14      	ite	ne
 8001f80:	2300      	movne	r3, #0
 8001f82:	2301      	moveq	r3, #1
 8001f84:	7862      	ldrb	r2, [r4, #1]
 8001f86:	f363 0241 	bfi	r2, r3, #1, #1
 8001f8a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d043      	beq.n	8002018 <extract_conversion+0x194>
	++sp;
 8001f90:	9b01      	ldr	r3, [sp, #4]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b2a      	cmp	r3, #42	; 0x2a
 8001f9a:	d03f      	beq.n	800201c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8001f9c:	a801      	add	r0, sp, #4
 8001f9e:	f7ff ff5b 	bl	8001e58 <extract_decimal>
	conv->prec_value = prec;
 8001fa2:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8001fa4:	7823      	ldrb	r3, [r4, #0]
 8001fa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8001faa:	2800      	cmp	r0, #0
 8001fac:	db3e      	blt.n	800202c <extract_conversion+0x1a8>
 8001fae:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	7822      	ldrb	r2, [r4, #0]
 8001fb4:	f363 0241 	bfi	r2, r3, #1, #1
 8001fb8:	7022      	strb	r2, [r4, #0]
	return sp;
 8001fba:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8001fbc:	7803      	ldrb	r3, [r0, #0]
 8001fbe:	3b4c      	subs	r3, #76	; 0x4c
 8001fc0:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc2:	f200 809d 	bhi.w	8002100 <extract_conversion+0x27c>
 8001fc6:	e8df f003 	tbb	[pc, r3]
 8001fca:	9b90      	.short	0x9b90
 8001fcc:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fd0:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fd4:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fd8:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fdc:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fe0:	9b9b9b9b 	.word	0x9b9b9b9b
 8001fe4:	9b339b9b 	.word	0x9b339b9b
 8001fe8:	9b459b57 	.word	0x9b459b57
 8001fec:	9b9b9b9b 	.word	0x9b9b9b9b
 8001ff0:	9b899b9b 	.word	0x9b899b9b
 8001ff4:	9b9b9b9b 	.word	0x9b9b9b9b
 8001ff8:	82          	.byte	0x82
 8001ff9:	00          	.byte	0x00
		conv->flag_zero = false;
 8001ffa:	7823      	ldrb	r3, [r4, #0]
 8001ffc:	f36f 1386 	bfc	r3, #6, #1
 8002000:	7023      	strb	r3, [r4, #0]
 8002002:	e79a      	b.n	8001f3a <extract_conversion+0xb6>
		conv->width_star = true;
 8002004:	7863      	ldrb	r3, [r4, #1]
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 800200c:	4633      	mov	r3, r6
 800200e:	3301      	adds	r3, #1
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	e7b1      	b.n	8001f78 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8002014:	2201      	movs	r2, #1
 8002016:	e7a9      	b.n	8001f6c <extract_conversion+0xe8>
		return sp;
 8002018:	9801      	ldr	r0, [sp, #4]
 800201a:	e7cf      	b.n	8001fbc <extract_conversion+0x138>
		conv->prec_star = true;
 800201c:	7863      	ldrb	r3, [r4, #1]
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002024:	4610      	mov	r0, r2
 8002026:	3001      	adds	r0, #1
 8002028:	9001      	str	r0, [sp, #4]
 800202a:	e7c7      	b.n	8001fbc <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 800202c:	2201      	movs	r2, #1
 800202e:	e7bf      	b.n	8001fb0 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8002030:	1c42      	adds	r2, r0, #1
 8002032:	7843      	ldrb	r3, [r0, #1]
 8002034:	2b68      	cmp	r3, #104	; 0x68
 8002036:	d006      	beq.n	8002046 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8002038:	7863      	ldrb	r3, [r4, #1]
 800203a:	2102      	movs	r1, #2
 800203c:	f361 03c6 	bfi	r3, r1, #3, #4
 8002040:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8002042:	4610      	mov	r0, r2
 8002044:	e01e      	b.n	8002084 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8002046:	7863      	ldrb	r3, [r4, #1]
 8002048:	2201      	movs	r2, #1
 800204a:	f362 03c6 	bfi	r3, r2, #3, #4
 800204e:	7063      	strb	r3, [r4, #1]
			++sp;
 8002050:	3002      	adds	r0, #2
 8002052:	e017      	b.n	8002084 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8002054:	1c42      	adds	r2, r0, #1
 8002056:	7843      	ldrb	r3, [r0, #1]
 8002058:	2b6c      	cmp	r3, #108	; 0x6c
 800205a:	d006      	beq.n	800206a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 800205c:	7863      	ldrb	r3, [r4, #1]
 800205e:	2103      	movs	r1, #3
 8002060:	f361 03c6 	bfi	r3, r1, #3, #4
 8002064:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8002066:	4610      	mov	r0, r2
 8002068:	e00c      	b.n	8002084 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 800206a:	7863      	ldrb	r3, [r4, #1]
 800206c:	2204      	movs	r2, #4
 800206e:	f362 03c6 	bfi	r3, r2, #3, #4
 8002072:	7063      	strb	r3, [r4, #1]
			++sp;
 8002074:	3002      	adds	r0, #2
 8002076:	e005      	b.n	8002084 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8002078:	7863      	ldrb	r3, [r4, #1]
 800207a:	2205      	movs	r2, #5
 800207c:	f362 03c6 	bfi	r3, r2, #3, #4
 8002080:	7063      	strb	r3, [r4, #1]
		++sp;
 8002082:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8002084:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002088:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 800208a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800208e:	2a37      	cmp	r2, #55	; 0x37
 8002090:	d87d      	bhi.n	800218e <extract_conversion+0x30a>
 8002092:	e8df f002 	tbb	[pc, r2]
 8002096:	7c5e      	.short	0x7c5e
 8002098:	5e5e7c7c 	.word	0x5e5e7c7c
 800209c:	7c7c7c5e 	.word	0x7c7c7c5e
 80020a0:	7c7c7c7c 	.word	0x7c7c7c7c
 80020a4:	7c7c7c7c 	.word	0x7c7c7c7c
 80020a8:	7c7c7c7c 	.word	0x7c7c7c7c
 80020ac:	7c7c4f7c 	.word	0x7c7c4f7c
 80020b0:	7c7c7c7c 	.word	0x7c7c7c7c
 80020b4:	7c5e7c7c 	.word	0x7c5e7c7c
 80020b8:	5e5e3a4f 	.word	0x5e5e3a4f
 80020bc:	7c3a7c5e 	.word	0x7c3a7c5e
 80020c0:	657c7c7c 	.word	0x657c7c7c
 80020c4:	7c7c714f 	.word	0x7c7c714f
 80020c8:	7c4f7c71 	.word	0x7c4f7c71
 80020cc:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 80020ce:	7863      	ldrb	r3, [r4, #1]
 80020d0:	2206      	movs	r2, #6
 80020d2:	f362 03c6 	bfi	r3, r2, #3, #4
 80020d6:	7063      	strb	r3, [r4, #1]
		++sp;
 80020d8:	3001      	adds	r0, #1
		break;
 80020da:	e7d3      	b.n	8002084 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 80020dc:	7863      	ldrb	r3, [r4, #1]
 80020de:	2207      	movs	r2, #7
 80020e0:	f362 03c6 	bfi	r3, r2, #3, #4
 80020e4:	7063      	strb	r3, [r4, #1]
		++sp;
 80020e6:	3001      	adds	r0, #1
		break;
 80020e8:	e7cc      	b.n	8002084 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 80020ea:	7863      	ldrb	r3, [r4, #1]
 80020ec:	2208      	movs	r2, #8
 80020ee:	f362 03c6 	bfi	r3, r2, #3, #4
 80020f2:	7063      	strb	r3, [r4, #1]
		++sp;
 80020f4:	3001      	adds	r0, #1
		conv->unsupported = true;
 80020f6:	7823      	ldrb	r3, [r4, #0]
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	7023      	strb	r3, [r4, #0]
		break;
 80020fe:	e7c1      	b.n	8002084 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8002100:	7863      	ldrb	r3, [r4, #1]
 8002102:	f36f 03c6 	bfc	r3, #3, #4
 8002106:	7063      	strb	r3, [r4, #1]
		break;
 8002108:	e7bc      	b.n	8002084 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 800210a:	78a2      	ldrb	r2, [r4, #2]
 800210c:	2101      	movs	r1, #1
 800210e:	f361 0202 	bfi	r2, r1, #0, #3
 8002112:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002114:	7862      	ldrb	r2, [r4, #1]
 8002116:	f002 0278 	and.w	r2, r2, #120	; 0x78
 800211a:	2a40      	cmp	r2, #64	; 0x40
 800211c:	d010      	beq.n	8002140 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 800211e:	2b63      	cmp	r3, #99	; 0x63
 8002120:	d013      	beq.n	800214a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8002122:	7823      	ldrb	r3, [r4, #0]
 8002124:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002128:	4315      	orrs	r5, r2
 800212a:	f365 0341 	bfi	r3, r5, #1, #1
 800212e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002130:	b002      	add	sp, #8
 8002132:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8002134:	78a2      	ldrb	r2, [r4, #2]
 8002136:	2102      	movs	r1, #2
 8002138:	f361 0202 	bfi	r2, r1, #0, #3
 800213c:	70a2      	strb	r2, [r4, #2]
 800213e:	e7e9      	b.n	8002114 <extract_conversion+0x290>
			conv->invalid = true;
 8002140:	7821      	ldrb	r1, [r4, #0]
 8002142:	f041 0101 	orr.w	r1, r1, #1
 8002146:	7021      	strb	r1, [r4, #0]
 8002148:	e7e9      	b.n	800211e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800214a:	1e15      	subs	r5, r2, #0
 800214c:	bf18      	it	ne
 800214e:	2501      	movne	r5, #1
 8002150:	e7e7      	b.n	8002122 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8002152:	78a3      	ldrb	r3, [r4, #2]
 8002154:	2204      	movs	r2, #4
 8002156:	f362 0302 	bfi	r3, r2, #0, #3
 800215a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 800215c:	2501      	movs	r5, #1
			break;
 800215e:	e7e0      	b.n	8002122 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002160:	78a3      	ldrb	r3, [r4, #2]
 8002162:	2203      	movs	r2, #3
 8002164:	f362 0302 	bfi	r3, r2, #0, #3
 8002168:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800216a:	7863      	ldrb	r3, [r4, #1]
 800216c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d1d6      	bne.n	8002122 <extract_conversion+0x29e>
			unsupported = true;
 8002174:	2501      	movs	r5, #1
 8002176:	e7d4      	b.n	8002122 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002178:	78a3      	ldrb	r3, [r4, #2]
 800217a:	2203      	movs	r2, #3
 800217c:	f362 0302 	bfi	r3, r2, #0, #3
 8002180:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8002182:	7863      	ldrb	r3, [r4, #1]
 8002184:	f013 0f78 	tst.w	r3, #120	; 0x78
 8002188:	d0cb      	beq.n	8002122 <extract_conversion+0x29e>
			unsupported = true;
 800218a:	2501      	movs	r5, #1
 800218c:	e7c9      	b.n	8002122 <extract_conversion+0x29e>
		conv->invalid = true;
 800218e:	7823      	ldrb	r3, [r4, #0]
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	7023      	strb	r3, [r4, #0]
		break;
 8002196:	e7c4      	b.n	8002122 <extract_conversion+0x29e>

08002198 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219c:	b083      	sub	sp, #12
 800219e:	4604      	mov	r4, r0
 80021a0:	460d      	mov	r5, r1
 80021a2:	9201      	str	r2, [sp, #4]
 80021a4:	469a      	mov	sl, r3
 80021a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 80021a8:	78d3      	ldrb	r3, [r2, #3]
 80021aa:	4a32      	ldr	r2, [pc, #200]	; (8002274 <encode_uint+0xdc>)
 80021ac:	f813 b002 	ldrb.w	fp, [r3, r2]
 80021b0:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80021b4:	2b6f      	cmp	r3, #111	; 0x6f
 80021b6:	d00f      	beq.n	80021d8 <encode_uint+0x40>
 80021b8:	d906      	bls.n	80021c8 <encode_uint+0x30>
 80021ba:	2b70      	cmp	r3, #112	; 0x70
 80021bc:	d00f      	beq.n	80021de <encode_uint+0x46>
 80021be:	2b78      	cmp	r3, #120	; 0x78
 80021c0:	d110      	bne.n	80021e4 <encode_uint+0x4c>
		return 16;
 80021c2:	f04f 0910 	mov.w	r9, #16
 80021c6:	e023      	b.n	8002210 <encode_uint+0x78>
	switch (specifier) {
 80021c8:	2b58      	cmp	r3, #88	; 0x58
 80021ca:	d002      	beq.n	80021d2 <encode_uint+0x3a>
 80021cc:	f04f 090a 	mov.w	r9, #10
 80021d0:	e01e      	b.n	8002210 <encode_uint+0x78>
		return 16;
 80021d2:	f04f 0910 	mov.w	r9, #16
 80021d6:	e01b      	b.n	8002210 <encode_uint+0x78>
		return 8;
 80021d8:	f04f 0908 	mov.w	r9, #8
 80021dc:	e018      	b.n	8002210 <encode_uint+0x78>
		return 16;
 80021de:	f04f 0910 	mov.w	r9, #16
 80021e2:	e015      	b.n	8002210 <encode_uint+0x78>
	switch (specifier) {
 80021e4:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 80021e8:	e012      	b.n	8002210 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	3230      	adds	r2, #48	; 0x30
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 80021f4:	463a      	mov	r2, r7
 80021f6:	4643      	mov	r3, r8
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe fbee 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002200:	42bc      	cmp	r4, r7
 8002202:	f175 0300 	sbcs.w	r3, r5, #0
 8002206:	d319      	bcc.n	800223c <encode_uint+0xa4>
 8002208:	4556      	cmp	r6, sl
 800220a:	d917      	bls.n	800223c <encode_uint+0xa4>
		value /= radix;
 800220c:	4604      	mov	r4, r0
 800220e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002210:	f04f 0800 	mov.w	r8, #0
 8002214:	464f      	mov	r7, r9
 8002216:	464a      	mov	r2, r9
 8002218:	4643      	mov	r3, r8
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7fe fbdd 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002222:	2a09      	cmp	r2, #9
 8002224:	d9e1      	bls.n	80021ea <encode_uint+0x52>
 8002226:	f1bb 0f01 	cmp.w	fp, #1
 800222a:	d003      	beq.n	8002234 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 800222c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800222e:	3257      	adds	r2, #87	; 0x57
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	e7dd      	b.n	80021f0 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002234:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002236:	3237      	adds	r2, #55	; 0x37
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	e7d9      	b.n	80021f0 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	f013 0f20 	tst.w	r3, #32
 8002244:	d005      	beq.n	8002252 <encode_uint+0xba>
		if (radix == 8) {
 8002246:	f1b9 0f08 	cmp.w	r9, #8
 800224a:	d006      	beq.n	800225a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 800224c:	f1b9 0f10 	cmp.w	r9, #16
 8002250:	d009      	beq.n	8002266 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8002252:	4630      	mov	r0, r6
 8002254:	b003      	add	sp, #12
 8002256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 800225a:	9a01      	ldr	r2, [sp, #4]
 800225c:	7893      	ldrb	r3, [r2, #2]
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	7093      	strb	r3, [r2, #2]
 8002264:	e7f5      	b.n	8002252 <encode_uint+0xba>
			conv->altform_0c = true;
 8002266:	9a01      	ldr	r2, [sp, #4]
 8002268:	7893      	ldrb	r3, [r2, #2]
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	7093      	strb	r3, [r2, #2]
 8002270:	e7ef      	b.n	8002252 <encode_uint+0xba>
 8002272:	bf00      	nop
 8002274:	0800c5a9 	.word	0x0800c5a9

08002278 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800227c:	b091      	sub	sp, #68	; 0x44
 800227e:	4606      	mov	r6, r0
 8002280:	460d      	mov	r5, r1
 8002282:	4691      	mov	r9, r2
 8002284:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002286:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002288:	f899 0000 	ldrb.w	r0, [r9]
 800228c:	2800      	cmp	r0, #0
 800228e:	f000 82d5 	beq.w	800283c <cbvprintf+0x5c4>
		if (*fp != '%') {
 8002292:	2825      	cmp	r0, #37	; 0x25
 8002294:	d008      	beq.n	80022a8 <cbvprintf+0x30>
			OUTC(*fp++);
 8002296:	f109 0901 	add.w	r9, r9, #1
 800229a:	4629      	mov	r1, r5
 800229c:	47b0      	blx	r6
 800229e:	2800      	cmp	r0, #0
 80022a0:	f2c0 82cd 	blt.w	800283e <cbvprintf+0x5c6>
 80022a4:	3401      	adds	r4, #1
			continue;
 80022a6:	e7ef      	b.n	8002288 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 80022a8:	2300      	movs	r3, #0
 80022aa:	9304      	str	r3, [sp, #16]
 80022ac:	9305      	str	r3, [sp, #20]
 80022ae:	9306      	str	r3, [sp, #24]
 80022b0:	9307      	str	r3, [sp, #28]
 80022b2:	9308      	str	r3, [sp, #32]
 80022b4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 80022b6:	4649      	mov	r1, r9
 80022b8:	a806      	add	r0, sp, #24
 80022ba:	f7ff fde3 	bl	8001e84 <extract_conversion>
 80022be:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 80022c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80022c4:	f013 0f01 	tst.w	r3, #1
 80022c8:	f000 8097 	beq.w	80023fa <cbvprintf+0x182>
			width = va_arg(ap, int);
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	1d1a      	adds	r2, r3, #4
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 80022d4:	2f00      	cmp	r7, #0
 80022d6:	f2c0 8088 	blt.w	80023ea <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 80022da:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80022de:	f013 0f04 	tst.w	r3, #4
 80022e2:	f000 809c 	beq.w	800241e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 80022e6:	9b03      	ldr	r3, [sp, #12]
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	9203      	str	r2, [sp, #12]
 80022ec:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 80022f0:	f1ba 0f00 	cmp.w	sl, #0
 80022f4:	f2c0 808a 	blt.w	800240c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 80022fc:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 80022fe:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002302:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002306:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800230a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 800230e:	2b01      	cmp	r3, #1
 8002310:	f000 808e 	beq.w	8002430 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002314:	2b02      	cmp	r3, #2
 8002316:	f000 80d3 	beq.w	80024c0 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 800231a:	2b04      	cmp	r3, #4
 800231c:	f000 8124 	beq.w	8002568 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002320:	2b03      	cmp	r3, #3
 8002322:	f000 813b 	beq.w	800259c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002326:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800232a:	f018 0b03 	ands.w	fp, r8, #3
 800232e:	f040 813b 	bne.w	80025a8 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002332:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002336:	3b25      	subs	r3, #37	; 0x25
 8002338:	2b53      	cmp	r3, #83	; 0x53
 800233a:	f200 81e6 	bhi.w	800270a <cbvprintf+0x492>
 800233e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002342:	0140      	.short	0x0140
 8002344:	01e401e4 	.word	0x01e401e4
 8002348:	01e401e4 	.word	0x01e401e4
 800234c:	01e401e4 	.word	0x01e401e4
 8002350:	01e401e4 	.word	0x01e401e4
 8002354:	01e401e4 	.word	0x01e401e4
 8002358:	01e401e4 	.word	0x01e401e4
 800235c:	01e401e4 	.word	0x01e401e4
 8002360:	01e401e4 	.word	0x01e401e4
 8002364:	01e401e4 	.word	0x01e401e4
 8002368:	01e401e4 	.word	0x01e401e4
 800236c:	01e401e4 	.word	0x01e401e4
 8002370:	01e401e4 	.word	0x01e401e4
 8002374:	01e401e4 	.word	0x01e401e4
 8002378:	01e401e4 	.word	0x01e401e4
 800237c:	01e401e4 	.word	0x01e401e4
 8002380:	01e401e4 	.word	0x01e401e4
 8002384:	01e401e4 	.word	0x01e401e4
 8002388:	01e401e4 	.word	0x01e401e4
 800238c:	01e401e4 	.word	0x01e401e4
 8002390:	01e401e4 	.word	0x01e401e4
 8002394:	01e401e4 	.word	0x01e401e4
 8002398:	01e401e4 	.word	0x01e401e4
 800239c:	01e401e4 	.word	0x01e401e4
 80023a0:	01e401e4 	.word	0x01e401e4
 80023a4:	01e401e4 	.word	0x01e401e4
 80023a8:	01e40181 	.word	0x01e40181
 80023ac:	01e401e4 	.word	0x01e401e4
 80023b0:	01e401e4 	.word	0x01e401e4
 80023b4:	01e401e4 	.word	0x01e401e4
 80023b8:	01e401e4 	.word	0x01e401e4
 80023bc:	015e01e4 	.word	0x015e01e4
 80023c0:	01e40167 	.word	0x01e40167
 80023c4:	01e401e4 	.word	0x01e401e4
 80023c8:	016701e4 	.word	0x016701e4
 80023cc:	01e401e4 	.word	0x01e401e4
 80023d0:	01e401e4 	.word	0x01e401e4
 80023d4:	018101be 	.word	0x018101be
 80023d8:	01e401a2 	.word	0x01e401a2
 80023dc:	014d01e4 	.word	0x014d01e4
 80023e0:	018101e4 	.word	0x018101e4
 80023e4:	01e401e4 	.word	0x01e401e4
 80023e8:	0181      	.short	0x0181
				conv->flag_dash = true;
 80023ea:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 80023f6:	427f      	negs	r7, r7
 80023f8:	e76f      	b.n	80022da <cbvprintf+0x62>
		} else if (conv->width_present) {
 80023fa:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db02      	blt.n	8002408 <cbvprintf+0x190>
		int width = -1;
 8002402:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002406:	e768      	b.n	80022da <cbvprintf+0x62>
			width = conv->width_value;
 8002408:	9f07      	ldr	r7, [sp, #28]
 800240a:	e766      	b.n	80022da <cbvprintf+0x62>
				conv->prec_present = false;
 800240c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002410:	f36f 0341 	bfc	r3, #1, #1
 8002414:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002418:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800241c:	e76c      	b.n	80022f8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 800241e:	f013 0f02 	tst.w	r3, #2
 8002422:	d002      	beq.n	800242a <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002424:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002428:	e766      	b.n	80022f8 <cbvprintf+0x80>
		int precision = -1;
 800242a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800242e:	e763      	b.n	80022f8 <cbvprintf+0x80>
			switch (length_mod) {
 8002430:	1ecb      	subs	r3, r1, #3
 8002432:	2b04      	cmp	r3, #4
 8002434:	d804      	bhi.n	8002440 <cbvprintf+0x1c8>
 8002436:	e8df f003 	tbb	[pc, r3]
 800243a:	1d0b      	.short	0x1d0b
 800243c:	3529      	.short	0x3529
 800243e:	35          	.byte	0x35
 800243f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002440:	9b03      	ldr	r3, [sp, #12]
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	9203      	str	r2, [sp, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	17da      	asrs	r2, r3, #31
 800244a:	9304      	str	r3, [sp, #16]
 800244c:	9205      	str	r2, [sp, #20]
				break;
 800244e:	e006      	b.n	800245e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002450:	9b03      	ldr	r3, [sp, #12]
 8002452:	1d1a      	adds	r2, r3, #4
 8002454:	9203      	str	r2, [sp, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	17da      	asrs	r2, r3, #31
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 800245e:	2901      	cmp	r1, #1
 8002460:	d028      	beq.n	80024b4 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002462:	2902      	cmp	r1, #2
 8002464:	f47f af5f 	bne.w	8002326 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002468:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800246c:	17da      	asrs	r2, r3, #31
 800246e:	9304      	str	r3, [sp, #16]
 8002470:	9205      	str	r2, [sp, #20]
 8002472:	e758      	b.n	8002326 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002474:	9b03      	ldr	r3, [sp, #12]
 8002476:	3307      	adds	r3, #7
 8002478:	f023 0307 	bic.w	r3, r3, #7
 800247c:	f103 0208 	add.w	r2, r3, #8
 8002480:	9203      	str	r2, [sp, #12]
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002486:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800248a:	e7e8      	b.n	800245e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 800248c:	9b03      	ldr	r3, [sp, #12]
 800248e:	3307      	adds	r3, #7
 8002490:	f023 0307 	bic.w	r3, r3, #7
 8002494:	f103 0208 	add.w	r2, r3, #8
 8002498:	9203      	str	r2, [sp, #12]
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 800249e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80024a2:	e7dc      	b.n	800245e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80024a4:	9b03      	ldr	r3, [sp, #12]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	9203      	str	r2, [sp, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	17da      	asrs	r2, r3, #31
				value->sint =
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	9205      	str	r2, [sp, #20]
				break;
 80024b2:	e7d4      	b.n	800245e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80024b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9305      	str	r3, [sp, #20]
 80024be:	e732      	b.n	8002326 <cbvprintf+0xae>
			switch (length_mod) {
 80024c0:	1ecb      	subs	r3, r1, #3
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d804      	bhi.n	80024d0 <cbvprintf+0x258>
 80024c6:	e8df f003 	tbb	[pc, r3]
 80024ca:	1f0b      	.short	0x1f0b
 80024cc:	4135      	.short	0x4135
 80024ce:	41          	.byte	0x41
 80024cf:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	1d1a      	adds	r2, r3, #4
 80024d4:	9203      	str	r2, [sp, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	9304      	str	r3, [sp, #16]
 80024da:	2300      	movs	r3, #0
 80024dc:	9305      	str	r3, [sp, #20]
				break;
 80024de:	e01e      	b.n	800251e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 80024e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 80024e4:	2b63      	cmp	r3, #99	; 0x63
 80024e6:	d007      	beq.n	80024f8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 80024e8:	9b03      	ldr	r3, [sp, #12]
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	9203      	str	r2, [sp, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9305      	str	r3, [sp, #20]
 80024f6:	e012      	b.n	800251e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 80024f8:	9b03      	ldr	r3, [sp, #12]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	9203      	str	r2, [sp, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	9304      	str	r3, [sp, #16]
 8002502:	2300      	movs	r3, #0
 8002504:	9305      	str	r3, [sp, #20]
 8002506:	e00a      	b.n	800251e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	3307      	adds	r3, #7
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	f103 0208 	add.w	r2, r3, #8
 8002514:	9203      	str	r2, [sp, #12]
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800251a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 800251e:	2901      	cmp	r1, #1
 8002520:	d01c      	beq.n	800255c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002522:	2902      	cmp	r1, #2
 8002524:	f47f aeff 	bne.w	8002326 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002528:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800252c:	9304      	str	r3, [sp, #16]
 800252e:	2300      	movs	r3, #0
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	e6f8      	b.n	8002326 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	3307      	adds	r3, #7
 8002538:	f023 0307 	bic.w	r3, r3, #7
 800253c:	f103 0208 	add.w	r2, r3, #8
 8002540:	9203      	str	r2, [sp, #12]
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002546:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800254a:	e7e8      	b.n	800251e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	9203      	str	r2, [sp, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	2300      	movs	r3, #0
 8002558:	9305      	str	r3, [sp, #20]
				break;
 800255a:	e7e0      	b.n	800251e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 800255c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002560:	9304      	str	r3, [sp, #16]
 8002562:	2300      	movs	r3, #0
 8002564:	9305      	str	r3, [sp, #20]
 8002566:	e6de      	b.n	8002326 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002568:	2908      	cmp	r1, #8
 800256a:	d00b      	beq.n	8002584 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 800256c:	9b03      	ldr	r3, [sp, #12]
 800256e:	3307      	adds	r3, #7
 8002570:	f023 0307 	bic.w	r3, r3, #7
 8002574:	f103 0208 	add.w	r2, r3, #8
 8002578:	9203      	str	r2, [sp, #12]
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002582:	e6d0      	b.n	8002326 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002584:	9b03      	ldr	r3, [sp, #12]
 8002586:	3307      	adds	r3, #7
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	f103 0208 	add.w	r2, r3, #8
 8002590:	9203      	str	r2, [sp, #12]
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800259a:	e6c4      	b.n	8002326 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 800259c:	9b03      	ldr	r3, [sp, #12]
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	9203      	str	r2, [sp, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	9304      	str	r3, [sp, #16]
 80025a6:	e6be      	b.n	8002326 <cbvprintf+0xae>
			OUTS(sp, fp);
 80025a8:	9f02      	ldr	r7, [sp, #8]
 80025aa:	463b      	mov	r3, r7
 80025ac:	464a      	mov	r2, r9
 80025ae:	4629      	mov	r1, r5
 80025b0:	4630      	mov	r0, r6
 80025b2:	f007 f92d 	bl	8009810 <outs>
 80025b6:	2800      	cmp	r0, #0
 80025b8:	f2c0 8141 	blt.w	800283e <cbvprintf+0x5c6>
 80025bc:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 80025be:	46b9      	mov	r9, r7
			continue;
 80025c0:	e662      	b.n	8002288 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 80025c2:	4629      	mov	r1, r5
 80025c4:	2025      	movs	r0, #37	; 0x25
 80025c6:	47b0      	blx	r6
 80025c8:	2800      	cmp	r0, #0
 80025ca:	f2c0 8138 	blt.w	800283e <cbvprintf+0x5c6>
 80025ce:	3401      	adds	r4, #1
		char sign = 0;
 80025d0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80025d2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80025d6:	f04f 0900 	mov.w	r9, #0
			break;
 80025da:	e09b      	b.n	8002714 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 80025dc:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 80025e0:	f1ba 0f00 	cmp.w	sl, #0
 80025e4:	db07      	blt.n	80025f6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 80025e6:	4651      	mov	r1, sl
 80025e8:	4648      	mov	r0, r9
 80025ea:	f009 f860 	bl	800b6ae <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 80025ee:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 80025f2:	46d8      	mov	r8, fp
			precision = -1;

			break;
 80025f4:	e08e      	b.n	8002714 <cbvprintf+0x49c>
				len = strlen(bps);
 80025f6:	4648      	mov	r0, r9
 80025f8:	f7fe fc2d 	bl	8000e56 <strlen>
 80025fc:	e7f7      	b.n	80025ee <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80025fe:	9b04      	ldr	r3, [sp, #16]
 8002600:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002604:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002606:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 800260a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 800260e:	e081      	b.n	8002714 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002610:	f018 0f08 	tst.w	r8, #8
 8002614:	d105      	bne.n	8002622 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002616:	f018 0810 	ands.w	r8, r8, #16
 800261a:	d004      	beq.n	8002626 <cbvprintf+0x3ae>
				sign = ' ';
 800261c:	f04f 0820 	mov.w	r8, #32
 8002620:	e001      	b.n	8002626 <cbvprintf+0x3ae>
				sign = '+';
 8002622:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002626:	9a04      	ldr	r2, [sp, #16]
 8002628:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 800262a:	2b00      	cmp	r3, #0
 800262c:	db02      	blt.n	8002634 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 800262e:	9204      	str	r2, [sp, #16]
 8002630:	9305      	str	r3, [sp, #20]
 8002632:	e008      	b.n	8002646 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002634:	4252      	negs	r2, r2
 8002636:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800263a:	9204      	str	r2, [sp, #16]
 800263c:	9305      	str	r3, [sp, #20]
				sign = '-';
 800263e:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002642:	e000      	b.n	8002646 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002644:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002646:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	ab0a      	add	r3, sp, #40	; 0x28
 800264e:	aa06      	add	r2, sp, #24
 8002650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002654:	f7ff fda0 	bl	8002198 <encode_uint>
 8002658:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 800265a:	f1ba 0f00 	cmp.w	sl, #0
 800265e:	f2c0 8088 	blt.w	8002772 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002662:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002666:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 800266a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800266e:	f36f 1286 	bfc	r2, #6, #1
 8002672:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002676:	459a      	cmp	sl, r3
 8002678:	d97e      	bls.n	8002778 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 800267a:	ebaa 0303 	sub.w	r3, sl, r3
 800267e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002680:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002684:	e046      	b.n	8002714 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002686:	9804      	ldr	r0, [sp, #16]
 8002688:	b928      	cbnz	r0, 8002696 <cbvprintf+0x41e>
		char sign = 0;
 800268a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 800268c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002844 <cbvprintf+0x5cc>
			bps = "(nil)";
 8002690:	f1aa 0905 	sub.w	r9, sl, #5
 8002694:	e03e      	b.n	8002714 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002696:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	ab0a      	add	r3, sp, #40	; 0x28
 800269e:	aa06      	add	r2, sp, #24
 80026a0:	2100      	movs	r1, #0
 80026a2:	f7ff fd79 	bl	8002198 <encode_uint>
 80026a6:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80026a8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80026b4:	2378      	movs	r3, #120	; 0x78
 80026b6:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80026ba:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 80026bc:	e7cd      	b.n	800265a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 80026be:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 80026c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80026c4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	d806      	bhi.n	80026da <cbvprintf+0x462>
 80026cc:	e8df f003 	tbb	[pc, r3]
 80026d0:	0f0d0b04 	.word	0x0f0d0b04
 80026d4:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 80026d8:	6014      	str	r4, [r2, #0]
		char sign = 0;
 80026da:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80026dc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80026e0:	f04f 0900 	mov.w	r9, #0
}
 80026e4:	e016      	b.n	8002714 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 80026e6:	7014      	strb	r4, [r2, #0]
		break;
 80026e8:	e7f7      	b.n	80026da <cbvprintf+0x462>
		*(short *)dp = (short)count;
 80026ea:	8014      	strh	r4, [r2, #0]
		break;
 80026ec:	e7f5      	b.n	80026da <cbvprintf+0x462>
		*(long *)dp = (long)count;
 80026ee:	6014      	str	r4, [r2, #0]
		break;
 80026f0:	e7f3      	b.n	80026da <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 80026f2:	17e3      	asrs	r3, r4, #31
 80026f4:	6014      	str	r4, [r2, #0]
 80026f6:	6053      	str	r3, [r2, #4]
		break;
 80026f8:	e7ef      	b.n	80026da <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 80026fa:	17e3      	asrs	r3, r4, #31
 80026fc:	6014      	str	r4, [r2, #0]
 80026fe:	6053      	str	r3, [r2, #4]
		break;
 8002700:	e7eb      	b.n	80026da <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002702:	6014      	str	r4, [r2, #0]
		break;
 8002704:	e7e9      	b.n	80026da <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002706:	6014      	str	r4, [r2, #0]
		break;
 8002708:	e7e7      	b.n	80026da <cbvprintf+0x462>
		switch (conv->specifier) {
 800270a:	46d8      	mov	r8, fp
 800270c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002710:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002714:	f1b9 0f00 	cmp.w	r9, #0
 8002718:	f000 808d 	beq.w	8002836 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 800271c:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002720:	f1b8 0f00 	cmp.w	r8, #0
 8002724:	d000      	beq.n	8002728 <cbvprintf+0x4b0>
			nj_len += 1U;
 8002726:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002728:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800272c:	f011 0f10 	tst.w	r1, #16
 8002730:	d025      	beq.n	800277e <cbvprintf+0x506>
			nj_len += 2U;
 8002732:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002734:	9b07      	ldr	r3, [sp, #28]
 8002736:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002738:	f011 0f40 	tst.w	r1, #64	; 0x40
 800273c:	d001      	beq.n	8002742 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 800273e:	9a08      	ldr	r2, [sp, #32]
 8002740:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002742:	2f00      	cmp	r7, #0
 8002744:	dd31      	ble.n	80027aa <cbvprintf+0x532>
			width -= (int)nj_len;
 8002746:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002748:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800274c:	f013 0f04 	tst.w	r3, #4
 8002750:	d12b      	bne.n	80027aa <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8002752:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002756:	d017      	beq.n	8002788 <cbvprintf+0x510>
					if (sign != 0) {
 8002758:	f1b8 0f00 	cmp.w	r8, #0
 800275c:	d017      	beq.n	800278e <cbvprintf+0x516>
						OUTC(sign);
 800275e:	4629      	mov	r1, r5
 8002760:	4640      	mov	r0, r8
 8002762:	47b0      	blx	r6
 8002764:	2800      	cmp	r0, #0
 8002766:	db6a      	blt.n	800283e <cbvprintf+0x5c6>
 8002768:	3401      	adds	r4, #1
						sign = 0;
 800276a:	46d8      	mov	r8, fp
					}
					pad = '0';
 800276c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002770:	e00f      	b.n	8002792 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8002772:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002776:	e7cd      	b.n	8002714 <cbvprintf+0x49c>
 8002778:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800277c:	e7ca      	b.n	8002714 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 800277e:	f011 0f08 	tst.w	r1, #8
 8002782:	d0d7      	beq.n	8002734 <cbvprintf+0x4bc>
			nj_len += 1U;
 8002784:	3201      	adds	r2, #1
 8002786:	e7d5      	b.n	8002734 <cbvprintf+0x4bc>
				char pad = ' ';
 8002788:	f04f 0b20 	mov.w	fp, #32
 800278c:	e001      	b.n	8002792 <cbvprintf+0x51a>
					pad = '0';
 800278e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002792:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8002794:	1e5f      	subs	r7, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	dd07      	ble.n	80027aa <cbvprintf+0x532>
					OUTC(pad);
 800279a:	4629      	mov	r1, r5
 800279c:	4658      	mov	r0, fp
 800279e:	47b0      	blx	r6
 80027a0:	2800      	cmp	r0, #0
 80027a2:	db4c      	blt.n	800283e <cbvprintf+0x5c6>
 80027a4:	3401      	adds	r4, #1
				while (width-- > 0) {
 80027a6:	463b      	mov	r3, r7
 80027a8:	e7f4      	b.n	8002794 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80027aa:	f1b8 0f00 	cmp.w	r8, #0
 80027ae:	d005      	beq.n	80027bc <cbvprintf+0x544>
			OUTC(sign);
 80027b0:	4629      	mov	r1, r5
 80027b2:	4640      	mov	r0, r8
 80027b4:	47b0      	blx	r6
 80027b6:	2800      	cmp	r0, #0
 80027b8:	db41      	blt.n	800283e <cbvprintf+0x5c6>
 80027ba:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 80027bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80027c0:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80027c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027c8:	4313      	orrs	r3, r2
 80027ca:	d005      	beq.n	80027d8 <cbvprintf+0x560>
				OUTC('0');
 80027cc:	4629      	mov	r1, r5
 80027ce:	2030      	movs	r0, #48	; 0x30
 80027d0:	47b0      	blx	r6
 80027d2:	2800      	cmp	r0, #0
 80027d4:	db33      	blt.n	800283e <cbvprintf+0x5c6>
 80027d6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 80027d8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80027dc:	f013 0f10 	tst.w	r3, #16
 80027e0:	d006      	beq.n	80027f0 <cbvprintf+0x578>
				OUTC(conv->specifier);
 80027e2:	4629      	mov	r1, r5
 80027e4:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80027e8:	47b0      	blx	r6
 80027ea:	2800      	cmp	r0, #0
 80027ec:	db27      	blt.n	800283e <cbvprintf+0x5c6>
 80027ee:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 80027f0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 80027f2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	dd07      	ble.n	800280a <cbvprintf+0x592>
				OUTC('0');
 80027fa:	4629      	mov	r1, r5
 80027fc:	2030      	movs	r0, #48	; 0x30
 80027fe:	47b0      	blx	r6
 8002800:	2800      	cmp	r0, #0
 8002802:	db1c      	blt.n	800283e <cbvprintf+0x5c6>
 8002804:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002806:	4643      	mov	r3, r8
 8002808:	e7f3      	b.n	80027f2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 800280a:	4653      	mov	r3, sl
 800280c:	464a      	mov	r2, r9
 800280e:	4629      	mov	r1, r5
 8002810:	4630      	mov	r0, r6
 8002812:	f006 fffd 	bl	8009810 <outs>
 8002816:	2800      	cmp	r0, #0
 8002818:	db11      	blt.n	800283e <cbvprintf+0x5c6>
 800281a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 800281c:	2f00      	cmp	r7, #0
 800281e:	dd07      	ble.n	8002830 <cbvprintf+0x5b8>
			OUTC(' ');
 8002820:	4629      	mov	r1, r5
 8002822:	2020      	movs	r0, #32
 8002824:	47b0      	blx	r6
 8002826:	2800      	cmp	r0, #0
 8002828:	db09      	blt.n	800283e <cbvprintf+0x5c6>
 800282a:	3401      	adds	r4, #1
			--width;
 800282c:	3f01      	subs	r7, #1
 800282e:	e7f5      	b.n	800281c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002830:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002834:	e528      	b.n	8002288 <cbvprintf+0x10>
 8002836:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800283a:	e525      	b.n	8002288 <cbvprintf+0x10>
		}
	}

	return count;
 800283c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 800283e:	b011      	add	sp, #68	; 0x44
 8002840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002844:	0800c125 	.word	0x0800c125

08002848 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002848:	f04f 0210 	mov.w	r2, #16
 800284c:	f3ef 8311 	mrs	r3, BASEPRI
 8002850:	f382 8812 	msr	BASEPRI_MAX, r2
 8002854:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <stm32l4_init+0x24>)
 8002862:	4a03      	ldr	r2, [pc, #12]	; (8002870 <stm32l4_init+0x28>)
 8002864:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002866:	2000      	movs	r0, #0
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200000ac 	.word	0x200000ac
 8002870:	003d0900 	.word	0x003d0900

08002874 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8002874:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8002876:	4c04      	ldr	r4, [pc, #16]	; (8002888 <__do_init_array_aux+0x14>)
 8002878:	e002      	b.n	8002880 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 800287a:	f854 3b04 	ldr.w	r3, [r4], #4
 800287e:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <__do_init_array_aux+0x18>)
 8002882:	429c      	cmp	r4, r3
 8002884:	d3f9      	bcc.n	800287a <__do_init_array_aux+0x6>
	}
}
 8002886:	bd10      	pop	{r4, pc}
 8002888:	0800bf50 	.word	0x0800bf50
 800288c:	0800bf50 	.word	0x0800bf50

08002890 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <__do_global_ctors_aux+0x1c>)
 8002892:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8002894:	b14b      	cbz	r3, 80028aa <__do_global_ctors_aux+0x1a>
{
 8002896:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8002898:	1e5c      	subs	r4, r3, #1
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <__do_global_ctors_aux+0x1c>)
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	4798      	blx	r3
 80028a2:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 80028a4:	2c00      	cmp	r4, #0
 80028a6:	d1f7      	bne.n	8002898 <__do_global_ctors_aux+0x8>
	}
}
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	4770      	bx	lr
 80028ac:	0800bf48 	.word	0x0800bf48

080028b0 <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 80028b0:	28af      	cmp	r0, #175	; 0xaf
 80028b2:	d81d      	bhi.n	80028f0 <stm32_pin_configure+0x40>
{
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	4604      	mov	r4, r0
 80028b8:	460f      	mov	r7, r1
 80028ba:	4615      	mov	r5, r2
 80028bc:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <stm32_pin_configure+0x48>)
 80028c0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80028c4:	b18e      	cbz	r6, 80028ea <stm32_pin_configure+0x3a>
 80028c6:	4630      	mov	r0, r6
 80028c8:	f008 f8d9 	bl	800aa7e <z_device_ready>
 80028cc:	b150      	cbz	r0, 80028e4 <stm32_pin_configure+0x34>
 80028ce:	2300      	movs	r3, #0
 80028d0:	b95b      	cbnz	r3, 80028ea <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80028d2:	462b      	mov	r3, r5
 80028d4:	463a      	mov	r2, r7
 80028d6:	f004 010f 	and.w	r1, r4, #15
 80028da:	4630      	mov	r0, r6
 80028dc:	f007 f9e6 	bl	8009cac <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 80028e0:	2000      	movs	r0, #0
}
 80028e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e4:	f06f 0312 	mvn.w	r3, #18
 80028e8:	e7f2      	b.n	80028d0 <stm32_pin_configure+0x20>
		return -ENODEV;
 80028ea:	f06f 0012 	mvn.w	r0, #18
 80028ee:	e7f8      	b.n	80028e2 <stm32_pin_configure+0x32>
		return -EINVAL;
 80028f0:	f06f 0015 	mvn.w	r0, #21
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	0800c128 	.word	0x0800c128

080028fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80028fc:	4901      	ldr	r1, [pc, #4]	; (8002904 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80028fe:	2210      	movs	r2, #16
	str	r2, [r1]
 8002900:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8002902:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002904:	e000ed10 	.word	0xe000ed10

08002908 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8002908:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 800290a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 800290c:	f380 8811 	msr	BASEPRI, r0
	isb
 8002910:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8002914:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8002918:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 800291a:	b662      	cpsie	i
	isb
 800291c:	f3bf 8f6f 	isb	sy

	bx	lr
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8002924:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8002926:	2800      	cmp	r0, #0
 8002928:	db07      	blt.n	800293a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	f000 021f 	and.w	r2, r0, #31
 800292e:	0940      	lsrs	r0, r0, #5
 8002930:	2301      	movs	r3, #1
 8002932:	4093      	lsls	r3, r2
 8002934:	4a01      	ldr	r2, [pc, #4]	; (800293c <arch_irq_enable+0x18>)
 8002936:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8002940:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002942:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002944:	2800      	cmp	r0, #0
 8002946:	db08      	blt.n	800295a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	0109      	lsls	r1, r1, #4
 800294a:	b2c9      	uxtb	r1, r1
 800294c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002950:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002954:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8002958:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	f000 000f 	and.w	r0, r0, #15
 800295e:	0109      	lsls	r1, r1, #4
 8002960:	b2c9      	uxtb	r1, r1
 8002962:	4b01      	ldr	r3, [pc, #4]	; (8002968 <z_arm_irq_priority_set+0x28>)
 8002964:	5419      	strb	r1, [r3, r0]
}
 8002966:	4770      	bx	lr
 8002968:	e000ed14 	.word	0xe000ed14

0800296c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 800296c:	bf30      	wfi
    b z_SysNmiOnReset
 800296e:	f7ff bffd 	b.w	800296c <z_SysNmiOnReset>
 8002972:	bf00      	nop

08002974 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8002974:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <z_arm_prep_c+0x40>)
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <z_arm_prep_c+0x44>)
 800297a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800297e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002984:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800298c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002994:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8002998:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800299c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 80029a0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80029a4:	f003 faea 	bl	8005f7c <z_bss_zero>
	z_data_copy();
 80029a8:	f004 fa68 	bl	8006e7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80029ac:	f000 f9fc 	bl	8002da8 <z_arm_interrupt_init>
	z_cstart();
 80029b0:	f003 faf0 	bl	8005f94 <z_cstart>
 80029b4:	e000ed00 	.word	0xe000ed00
 80029b8:	08000000 	.word	0x08000000

080029bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80029bc:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <arch_swap+0x28>)
 80029be:	6893      	ldr	r3, [r2, #8]
 80029c0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 80029c2:	4909      	ldr	r1, [pc, #36]	; (80029e8 <arch_swap+0x2c>)
 80029c4:	6809      	ldr	r1, [r1, #0]
 80029c6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80029c8:	4908      	ldr	r1, [pc, #32]	; (80029ec <arch_swap+0x30>)
 80029ca:	684b      	ldr	r3, [r1, #4]
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	604b      	str	r3, [r1, #4]
 80029d2:	2300      	movs	r3, #0
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80029dc:	6893      	ldr	r3, [r2, #8]
}
 80029de:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000b88 	.word	0x20000b88
 80029e8:	0800c4e8 	.word	0x0800c4e8
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80029f0:	4912      	ldr	r1, [pc, #72]	; (8002a3c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80029f2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80029f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80029f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80029fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80029fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002a02:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8002a04:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002a08:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002a0c:	4f0c      	ldr	r7, [pc, #48]	; (8002a40 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002a0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002a12:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8002a14:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8002a16:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002a18:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8002a1a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002a1c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002a1e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002a22:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002a24:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8002a26:	f000 fa13 	bl	8002e50 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8002a2a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002a2e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8002a32:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8002a36:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8002a3a:	4770      	bx	lr
    ldr r1, =_kernel
 8002a3c:	20000b88 	.word	0x20000b88
    ldr v4, =_SCS_ICSR
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8002a44:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002a48:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8002a4a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8002a4e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002a52:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8002a54:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8002a58:	2902      	cmp	r1, #2
    beq _oops
 8002a5a:	d0ff      	beq.n	8002a5c <_oops>

08002a5c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8002a5c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8002a5e:	f006 ff29 	bl	80098b4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8002a62:	bd01      	pop	{r0, pc}

08002a64 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8002a64:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8002a66:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <arch_new_thread+0x3c>)
 8002a6c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8002a70:	f021 0101 	bic.w	r1, r1, #1
 8002a74:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8002a78:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8002a82:	9b02      	ldr	r3, [sp, #8]
 8002a84:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8002a88:	9b03      	ldr	r3, [sp, #12]
 8002a8a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8002a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a92:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8002a96:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002a9c:	bc10      	pop	{r4}
 8002a9e:	4770      	bx	lr
 8002aa0:	080090d3 	.word	0x080090d3

08002aa4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <z_check_thread_stack_fail+0x48>)
 8002aa6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8002aa8:	b1ea      	cbz	r2, 8002ae6 <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8002aaa:	f110 0f16 	cmn.w	r0, #22
 8002aae:	d010      	beq.n	8002ad2 <z_check_thread_stack_fail+0x2e>
 8002ab0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002ab2:	f1a3 0c20 	sub.w	ip, r3, #32
 8002ab6:	4584      	cmp	ip, r0
 8002ab8:	d805      	bhi.n	8002ac6 <z_check_thread_stack_fail+0x22>
 8002aba:	4283      	cmp	r3, r0
 8002abc:	d905      	bls.n	8002aca <z_check_thread_stack_fail+0x26>
 8002abe:	428b      	cmp	r3, r1
 8002ac0:	d805      	bhi.n	8002ace <z_check_thread_stack_fail+0x2a>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	e00a      	b.n	8002adc <z_check_thread_stack_fail+0x38>
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	e008      	b.n	8002adc <z_check_thread_stack_fail+0x38>
 8002aca:	2100      	movs	r1, #0
 8002acc:	e006      	b.n	8002adc <z_check_thread_stack_fail+0x38>
 8002ace:	2101      	movs	r1, #1
 8002ad0:	e004      	b.n	8002adc <z_check_thread_stack_fail+0x38>
 8002ad2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	bf94      	ite	ls
 8002ad8:	2100      	movls	r1, #0
 8002ada:	2101      	movhi	r1, #1
 8002adc:	b909      	cbnz	r1, 8002ae2 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8002ade:	2000      	movs	r0, #0
}
 8002ae0:	4770      	bx	lr
		return thread->stack_info.start;
 8002ae2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002ae4:	4770      	bx	lr
		return 0;
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000b88 	.word	0x20000b88

08002af0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8002af0:	b508      	push	{r3, lr}
 8002af2:	460d      	mov	r5, r1
 8002af4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <arch_switch_to_main_thread+0x28>)
 8002af8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8002afa:	f000 f9a9 	bl	8002e50 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8002afe:	4620      	mov	r0, r4
 8002b00:	f385 8809 	msr	PSP, r5
 8002b04:	2100      	movs	r1, #0
 8002b06:	b663      	cpsie	if
 8002b08:	f381 8811 	msr	BASEPRI, r1
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	2200      	movs	r2, #0
 8002b12:	2300      	movs	r3, #0
 8002b14:	f006 fadd 	bl	80090d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002b18:	20000b88 	.word	0x20000b88

08002b1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8002b1c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8002b1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8002b22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8002b26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8002b2a:	4904      	ldr	r1, [pc, #16]	; (8002b3c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8002b2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8002b2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8002b30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8002b32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8002b36:	4902      	ldr	r1, [pc, #8]	; (8002b40 <_isr_wrapper+0x24>)
	bx r1
 8002b38:	4708      	bx	r1
 8002b3a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8002b3c:	0800bca0 	.word	0x0800bca0
	ldr r1, =z_arm_int_exit
 8002b40:	08002b45 	.word	0x08002b45

08002b44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8002b46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8002b48:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8002b4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002b4c:	d003      	beq.n	8002b56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8002b4e:	4903      	ldr	r1, [pc, #12]	; (8002b5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8002b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002b54:	600a      	str	r2, [r1, #0]

08002b56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8002b56:	4770      	bx	lr
	ldr r3, =_kernel
 8002b58:	20000b88 	.word	0x20000b88
	ldr r1, =_SCS_ICSR
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <bus_fault+0x50>)
 8002b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8002b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002b70:	d00b      	beq.n	8002b8a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <bus_fault+0x50>)
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002b7c:	d005      	beq.n	8002b8a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8002b7e:	b121      	cbz	r1, 8002b8a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <bus_fault+0x50>)
 8002b82:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b88:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <bus_fault+0x50>)
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b94:	d101      	bne.n	8002b9a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <bus_fault+0x50>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <bus_fault+0x50>)
 8002b9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002b9e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8002ba2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	f006 fe97 	bl	80098d8 <memory_fault_recoverable>
 8002baa:	7020      	strb	r0, [r4, #0]

	return reason;
}
 8002bac:	2000      	movs	r0, #0
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <usage_fault+0x20>)
 8002bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8002bc8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8002bce:	2000      	movs	r0, #0
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <mem_manage_fault>:
{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4605      	mov	r5, r0
 8002bdc:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <mem_manage_fault+0x88>)
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f013 0f02 	tst.w	r3, #2
 8002bea:	d00c      	beq.n	8002c06 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <mem_manage_fault+0x88>)
 8002bee:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002bf6:	d025      	beq.n	8002c44 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
 8002bf8:	b139      	cbz	r1, 8002c0a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <mem_manage_fault+0x88>)
 8002bfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c02:	6293      	str	r3, [r2, #40]	; 0x28
 8002c04:	e001      	b.n	8002c0a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
 8002c06:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <mem_manage_fault+0x88>)
 8002c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	f013 0f10 	tst.w	r3, #16
 8002c16:	d104      	bne.n	8002c22 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <mem_manage_fault+0x88>)
 8002c1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002c1c:	f014 0402 	ands.w	r4, r4, #2
 8002c20:	d004      	beq.n	8002c2c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <mem_manage_fault+0x88>)
 8002c24:	685c      	ldr	r4, [r3, #4]
 8002c26:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8002c2a:	d10e      	bne.n	8002c4a <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <mem_manage_fault+0x88>)
 8002c2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002c30:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002c34:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002c36:	2101      	movs	r1, #1
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f006 fe4d 	bl	80098d8 <memory_fault_recoverable>
 8002c3e:	7030      	strb	r0, [r6, #0]
}
 8002c40:	4620      	mov	r0, r4
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8002c44:	f06f 0015 	mvn.w	r0, #21
 8002c48:	e7df      	b.n	8002c0a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	f7ff ff2a 	bl	8002aa4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8002c50:	4604      	mov	r4, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0ea      	beq.n	8002c2c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002c56:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8002c5a:	2402      	movs	r4, #2
 8002c5c:	e7e6      	b.n	8002c2c <mem_manage_fault+0x54>
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8002c64:	b508      	push	{r3, lr}
 8002c66:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <hard_fault+0x78>)
 8002c6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c70:	f010 0002 	ands.w	r0, r0, #2
 8002c74:	d12e      	bne.n	8002cd4 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db2c      	blt.n	8002cd6 <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <hard_fault+0x78>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	d028      	beq.n	8002cd8 <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8002c86:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8002c8a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002c8e:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d00f      	beq.n	8002cb6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <hard_fault+0x78>)
 8002c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c9c:	b973      	cbnz	r3, 8002cbc <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <hard_fault+0x78>)
 8002ca0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ca4:	b983      	cbnz	r3, 8002cc8 <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <hard_fault+0x78>)
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	b19b      	cbz	r3, 8002cd6 <hard_fault+0x72>
			reason = usage_fault(esf);
 8002cae:	4660      	mov	r0, ip
 8002cb0:	f7ff ff80 	bl	8002bb4 <usage_fault>
 8002cb4:	e00f      	b.n	8002cd6 <hard_fault+0x72>
			reason = esf->basic.r0;
 8002cb6:	f8dc 0000 	ldr.w	r0, [ip]
 8002cba:	e00c      	b.n	8002cd6 <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4660      	mov	r0, ip
 8002cc2:	f7ff ff89 	bl	8002bd8 <mem_manage_fault>
 8002cc6:	e006      	b.n	8002cd6 <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
 8002cc8:	460a      	mov	r2, r1
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4660      	mov	r0, ip
 8002cce:	f7ff ff47 	bl	8002b60 <bus_fault>
 8002cd2:	e000      	b.n	8002cd6 <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002cd4:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8002cd6:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002cd8:	4618      	mov	r0, r3
	return reason;
 8002cda:	e7fc      	b.n	8002cd6 <hard_fault+0x72>
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002ce0:	b530      	push	{r4, r5, lr}
 8002ce2:	b08b      	sub	sp, #44	; 0x2c
 8002ce4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <z_arm_fault+0xa0>)
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8002cf8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8002cfc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002d00:	d115      	bne.n	8002d2e <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8002d02:	f002 030c 	and.w	r3, r2, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d014      	beq.n	8002d34 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8002d0a:	f012 0f08 	tst.w	r2, #8
 8002d0e:	d00b      	beq.n	8002d28 <z_arm_fault+0x48>
	*nested_exc = false;
 8002d10:	2500      	movs	r5, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8002d12:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8002d16:	4620      	mov	r0, r4
 8002d18:	f006 fde3 	bl	80098e2 <fault_handle>
 8002d1c:	4686      	mov	lr, r0
	if (recoverable) {
 8002d1e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8002d22:	b153      	cbz	r3, 8002d3a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8002d24:	b00b      	add	sp, #44	; 0x2c
 8002d26:	bd30      	pop	{r4, r5, pc}
			ptr_esf = (z_arch_esf_t *)msp;
 8002d28:	4604      	mov	r4, r0
			*nested_exc = true;
 8002d2a:	2501      	movs	r5, #1
 8002d2c:	e7f1      	b.n	8002d12 <z_arm_fault+0x32>
	*nested_exc = false;
 8002d2e:	2500      	movs	r5, #0
		return NULL;
 8002d30:	462c      	mov	r4, r5
 8002d32:	e7ee      	b.n	8002d12 <z_arm_fault+0x32>
	*nested_exc = false;
 8002d34:	2500      	movs	r5, #0
		return NULL;
 8002d36:	462c      	mov	r4, r5
 8002d38:	e7eb      	b.n	8002d12 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002d3a:	f10d 0c04 	add.w	ip, sp, #4
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	6861      	ldr	r1, [r4, #4]
 8002d42:	68a2      	ldr	r2, [r4, #8]
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002d4a:	6920      	ldr	r0, [r4, #16]
 8002d4c:	6961      	ldr	r1, [r4, #20]
 8002d4e:	69a2      	ldr	r2, [r4, #24]
 8002d50:	69e3      	ldr	r3, [r4, #28]
 8002d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8002d56:	b145      	cbz	r5, 8002d6a <z_arm_fault+0x8a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d5c:	b95a      	cbnz	r2, 8002d76 <z_arm_fault+0x96>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002d5e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002d62:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8002d66:	9308      	str	r3, [sp, #32]
 8002d68:	e005      	b.n	8002d76 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002d6a:	9b08      	ldr	r3, [sp, #32]
 8002d6c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8002d76:	a901      	add	r1, sp, #4
 8002d78:	4670      	mov	r0, lr
 8002d7a:	f006 fd97 	bl	80098ac <z_arm_fatal_error>
 8002d7e:	e7d1      	b.n	8002d24 <z_arm_fault+0x44>
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002d84:	4a02      	ldr	r2, [pc, #8]	; (8002d90 <z_arm_fault_init+0xc>)
 8002d86:	6953      	ldr	r3, [r2, #20]
 8002d88:	f043 0310 	orr.w	r3, r3, #16
 8002d8c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002d94:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002d98:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002d9c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002d9e:	4672      	mov	r2, lr
	bl z_arm_fault
 8002da0:	f7ff ff9e 	bl	8002ce0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002da4:	bd01      	pop	{r0, pc}
 8002da6:	bf00      	nop

08002da8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002da8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002daa:	e006      	b.n	8002dba <z_arm_interrupt_init+0x12>
 8002dac:	f002 010f 	and.w	r1, r2, #15
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <z_arm_interrupt_init+0x30>)
 8002db2:	440b      	add	r3, r1
 8002db4:	2110      	movs	r1, #16
 8002db6:	7619      	strb	r1, [r3, #24]
 8002db8:	3201      	adds	r2, #1
 8002dba:	2a54      	cmp	r2, #84	; 0x54
 8002dbc:	dc0a      	bgt.n	8002dd4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8002dbe:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	dbf3      	blt.n	8002dac <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002dc8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002dcc:	2110      	movs	r1, #16
 8002dce:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8002dd2:	e7f1      	b.n	8002db8 <z_arm_interrupt_init+0x10>
	}
}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ecfc 	.word	0xe000ecfc

08002ddc <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002ddc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002dde:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002de2:	4808      	ldr	r0, [pc, #32]	; (8002e04 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002de4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8002de8:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002dea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002dee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002df2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002df4:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002df6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002dfa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002dfe:	f7ff fdb9 	bl	8002974 <z_arm_prep_c>
 8002e02:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002e04:	200025c0 	.word	0x200025c0

08002e08 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8002e08:	b508      	push	{r3, lr}
	if (_current == thread) {
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <z_impl_k_thread_abort+0x24>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4283      	cmp	r3, r0
 8002e10:	d002      	beq.n	8002e18 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8002e12:	f003 fff7 	bl	8006e04 <z_thread_abort>
}
 8002e16:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e18:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f8      	beq.n	8002e12 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <z_impl_k_thread_abort+0x28>)
 8002e22:	6853      	ldr	r3, [r2, #4]
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6053      	str	r3, [r2, #4]
 8002e2a:	e7f2      	b.n	8002e12 <z_impl_k_thread_abort+0xa>
 8002e2c:	20000b88 	.word	0x20000b88
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8002e34:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002e36:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <z_arm_configure_static_mpu_regions+0x10>)
 8002e38:	4a03      	ldr	r2, [pc, #12]	; (8002e48 <z_arm_configure_static_mpu_regions+0x14>)
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4803      	ldr	r0, [pc, #12]	; (8002e4c <z_arm_configure_static_mpu_regions+0x18>)
 8002e3e:	f006 fdd6 	bl	80099ee <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8002e42:	bd08      	pop	{r3, pc}
 8002e44:	20028000 	.word	0x20028000
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	0800c154 	.word	0x0800c154

08002e50 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8002e50:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002e52:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002e54:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002e58:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8002e60:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002e62:	2101      	movs	r1, #1
 8002e64:	f006 fdc7 	bl	80099f6 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8002e68:	bd08      	pop	{r3, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000704 	.word	0x20000704
 8002e70:	150b0000 	.word	0x150b0000

08002e74 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <region_init+0x24>)
 8002e76:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002e80:	4303      	orrs	r3, r0
 8002e82:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002e86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002e8a:	688b      	ldr	r3, [r1, #8]
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8002e9c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8002e9e:	4c03      	ldr	r4, [pc, #12]	; (8002eac <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	7822      	ldrb	r2, [r4, #0]
 8002ea4:	f006 fd7b 	bl	800999e <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002ea8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8002eaa:	bd10      	pop	{r4, pc}
 8002eac:	20000be4 	.word	0x20000be4

08002eb0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8002eb0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <mpu_configure_dynamic_mpu_regions+0x2c>)
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	f006 fd71 	bl	800999e <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002ebc:	f110 0f16 	cmn.w	r0, #22
 8002ec0:	d00a      	beq.n	8002ed8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	e006      	b.n	8002ed4 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002ec6:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <mpu_configure_dynamic_mpu_regions+0x30>)
 8002ec8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	2b07      	cmp	r3, #7
 8002ed6:	ddf6      	ble.n	8002ec6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8002ed8:	bd08      	pop	{r3, pc}
 8002eda:	bf00      	nop
 8002edc:	20000be4 	.word	0x20000be4
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <arm_core_mpu_enable+0x14>)
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ef0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002efc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <arm_core_mpu_disable+0x10>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8002f10:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <z_arm_mpu_init+0x3c>)
 8002f14:	681d      	ldr	r5, [r3, #0]
 8002f16:	2d08      	cmp	r5, #8
 8002f18:	d815      	bhi.n	8002f46 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002f1a:	f7ff ffef 	bl	8002efc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002f1e:	2400      	movs	r4, #0
 8002f20:	e009      	b.n	8002f36 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <z_arm_mpu_init+0x3c>)
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002f2a:	0093      	lsls	r3, r2, #2
 8002f2c:	4419      	add	r1, r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff ffa0 	bl	8002e74 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002f34:	3401      	adds	r4, #1
 8002f36:	42a5      	cmp	r5, r4
 8002f38:	d8f3      	bhi.n	8002f22 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <z_arm_mpu_init+0x40>)
 8002f3c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8002f3e:	f7ff ffd1 	bl	8002ee4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002f42:	2000      	movs	r0, #0
}
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f4a:	e7fb      	b.n	8002f44 <z_arm_mpu_init+0x34>
 8002f4c:	0800c178 	.word	0x0800c178
 8002f50:	20000be4 	.word	0x20000be4

08002f54 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8002f54:	4b01      	ldr	r3, [pc, #4]	; (8002f5c <__stdout_hook_install+0x8>)
 8002f56:	6018      	str	r0, [r3, #0]
}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000008 	.word	0x20000008

08002f60 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	4606      	mov	r6, r0
 8002f64:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8002f66:	2400      	movs	r4, #0
 8002f68:	e000      	b.n	8002f6c <z_impl_zephyr_read_stdin+0xc>
 8002f6a:	3401      	adds	r4, #1
 8002f6c:	42ac      	cmp	r4, r5
 8002f6e:	da08      	bge.n	8002f82 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <z_impl_zephyr_read_stdin+0x28>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4798      	blx	r3
 8002f76:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002f78:	280a      	cmp	r0, #10
 8002f7a:	d001      	beq.n	8002f80 <z_impl_zephyr_read_stdin+0x20>
 8002f7c:	280d      	cmp	r0, #13
 8002f7e:	d1f4      	bne.n	8002f6a <z_impl_zephyr_read_stdin+0xa>
			i++;
 8002f80:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8002f82:	4620      	mov	r0, r4
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
 8002f86:	bf00      	nop
 8002f88:	20000004 	.word	0x20000004

08002f8c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8002f92:	2400      	movs	r4, #0
 8002f94:	e004      	b.n	8002fa0 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <z_impl_zephyr_write_stdout+0x30>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	7830      	ldrb	r0, [r6, #0]
 8002f9c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002f9e:	3401      	adds	r4, #1
 8002fa0:	42bc      	cmp	r4, r7
 8002fa2:	da08      	bge.n	8002fb6 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8002fa4:	192e      	adds	r6, r5, r4
 8002fa6:	5d2b      	ldrb	r3, [r5, r4]
 8002fa8:	2b0a      	cmp	r3, #10
 8002faa:	d1f4      	bne.n	8002f96 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <z_impl_zephyr_write_stdout+0x30>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	200d      	movs	r0, #13
 8002fb2:	4798      	blx	r3
 8002fb4:	e7ef      	b.n	8002f96 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000008 	.word	0x20000008

08002fc0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8002fc0:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	4902      	ldr	r1, [pc, #8]	; (8002fd0 <_exit+0x10>)
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f006 fd26 	bl	8009a18 <_write>
	while (1) {
 8002fcc:	e7fe      	b.n	8002fcc <_exit+0xc>
 8002fce:	bf00      	nop
 8002fd0:	0800c160 	.word	0x0800c160

08002fd4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8002fd4:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x24>)
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x28>)
 8002fdc:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8002fde:	440a      	add	r2, r1
 8002fe0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8002fe4:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d202      	bcs.n	8002ff2 <_sbrk+0x1e>
		heap_sz += count;
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <_sbrk+0x24>)
 8002fee:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8002ff0:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 8002ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8002ff6:	4770      	bx	lr
 8002ff8:	20000710 	.word	0x20000710
 8002ffc:	20003200 	.word	0x20003200

08003000 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	4604      	mov	r4, r0
 8003004:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8003006:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8003008:	e002      	b.n	8003010 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800300a:	2201      	movs	r2, #1
 800300c:	e00c      	b.n	8003028 <__stm32_exti_isr+0x28>
 800300e:	3401      	adds	r4, #1
 8003010:	42ac      	cmp	r4, r5
 8003012:	da17      	bge.n	8003044 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8003014:	2c1f      	cmp	r4, #31
 8003016:	dcfa      	bgt.n	800300e <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8003018:	2301      	movs	r3, #1
 800301a:	40a3      	lsls	r3, r4
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <__stm32_exti_isr+0x48>)
 800301e:	6952      	ldr	r2, [r2, #20]
 8003020:	ea33 0202 	bics.w	r2, r3, r2
 8003024:	d0f1      	beq.n	800300a <__stm32_exti_isr+0xa>
 8003026:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8003028:	2a00      	cmp	r2, #0
 800302a:	d0f0      	beq.n	800300e <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <__stm32_exti_isr+0x48>)
 800302e:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8003030:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ea      	beq.n	800300e <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8003038:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 800303c:	6851      	ldr	r1, [r2, #4]
 800303e:	4620      	mov	r0, r4
 8003040:	4798      	blx	r3
 8003042:	e7e4      	b.n	800300e <__stm32_exti_isr+0xe>
		}
	}
}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	bf00      	nop
 8003048:	40010400 	.word	0x40010400

0800304c <stm32_exti_enable>:
{
 800304c:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 800304e:	2301      	movs	r3, #1
 8003050:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <stm32_exti_enable+0x18>)
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	430b      	orrs	r3, r1
 8003058:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800305a:	4b03      	ldr	r3, [pc, #12]	; (8003068 <stm32_exti_enable+0x1c>)
 800305c:	5618      	ldrsb	r0, [r3, r0]
 800305e:	f7ff fc61 	bl	8002924 <arch_irq_enable>
}
 8003062:	bd08      	pop	{r3, pc}
 8003064:	40010400 	.word	0x40010400
 8003068:	0800c1b8 	.word	0x0800c1b8

0800306c <stm32_exti_disable>:
	if (line < 32) {
 800306c:	281f      	cmp	r0, #31
 800306e:	dc06      	bgt.n	800307e <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8003070:	2301      	movs	r3, #1
 8003072:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003074:	4a02      	ldr	r2, [pc, #8]	; (8003080 <stm32_exti_disable+0x14>)
 8003076:	6810      	ldr	r0, [r2, #0]
 8003078:	ea20 0003 	bic.w	r0, r0, r3
 800307c:	6010      	str	r0, [r2, #0]
}
 800307e:	4770      	bx	lr
 8003080:	40010400 	.word	0x40010400

08003084 <stm32_exti_trigger>:
	switch (trigger) {
 8003084:	2903      	cmp	r1, #3
 8003086:	d832      	bhi.n	80030ee <stm32_exti_trigger+0x6a>
 8003088:	e8df f001 	tbb	[pc, r1]
 800308c:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8003090:	2301      	movs	r3, #1
 8003092:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <stm32_exti_trigger+0x6c>)
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	ea22 0200 	bic.w	r2, r2, r0
 800309e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	ea22 0000 	bic.w	r0, r2, r0
 80030a6:	60d8      	str	r0, [r3, #12]
}
 80030a8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80030aa:	2301      	movs	r3, #1
 80030ac:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <stm32_exti_trigger+0x6c>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4302      	orrs	r2, r0
 80030b6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	ea22 0000 	bic.w	r0, r2, r0
 80030be:	60d8      	str	r0, [r3, #12]
}
 80030c0:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80030c2:	2301      	movs	r3, #1
 80030c4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <stm32_exti_trigger+0x6c>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4302      	orrs	r2, r0
 80030ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	ea22 0000 	bic.w	r0, r2, r0
 80030d6:	6098      	str	r0, [r3, #8]
}
 80030d8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80030da:	2301      	movs	r3, #1
 80030dc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <stm32_exti_trigger+0x6c>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4302      	orrs	r2, r0
 80030e6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4310      	orrs	r0, r2
 80030ec:	60d8      	str	r0, [r3, #12]
}
 80030ee:	4770      	bx	lr
 80030f0:	40010400 	.word	0x40010400

080030f4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <stm32_exti_set_callback+0x20>)
 80030f6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80030fa:	b93b      	cbnz	r3, 800310c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <stm32_exti_set_callback+0x20>)
 80030fe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8003102:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8003106:	6042      	str	r2, [r0, #4]

	return 0;
 8003108:	2000      	movs	r0, #0
 800310a:	4770      	bx	lr
		return -EBUSY;
 800310c:	f06f 000f 	mvn.w	r0, #15
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000714 	.word	0x20000714

08003118 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <stm32_exti_unset_callback+0x10>)
 800311a:	2200      	movs	r2, #0
 800311c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8003120:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8003124:	605a      	str	r2, [r3, #4]
}
 8003126:	4770      	bx	lr
 8003128:	20000714 	.word	0x20000714

0800312c <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 800312c:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800312e:	680b      	ldr	r3, [r1, #0]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d848      	bhi.n	80031c6 <stm32_clock_control_on+0x9a>
 8003134:	e8df f003 	tbb	[pc, r3]
 8003138:	3c261004 	.word	0x3c261004
 800313c:	4731      	.short	0x4731
 800313e:	1b          	.byte	0x1b
 800313f:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003140:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003142:	4a22      	ldr	r2, [pc, #136]	; (80031cc <stm32_clock_control_on+0xa0>)
 8003144:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003146:	4319      	orrs	r1, r3
 8003148:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800314a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800314c:	4013      	ands	r3, r2
 800314e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003150:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8003152:	2000      	movs	r0, #0
}
 8003154:	b006      	add	sp, #24
 8003156:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8003158:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <stm32_clock_control_on+0xa0>)
 800315c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800315e:	4319      	orrs	r1, r3
 8003160:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003162:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003164:	4013      	ands	r3, r2
 8003166:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003168:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800316a:	2000      	movs	r0, #0
}
 800316c:	e7f2      	b.n	8003154 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800316e:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003170:	4a16      	ldr	r2, [pc, #88]	; (80031cc <stm32_clock_control_on+0xa0>)
 8003172:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003174:	4319      	orrs	r1, r3
 8003176:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003178:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800317a:	4013      	ands	r3, r2
 800317c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800317e:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8003180:	2000      	movs	r0, #0
}
 8003182:	e7e7      	b.n	8003154 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8003184:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <stm32_clock_control_on+0xa0>)
 8003188:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800318a:	4319      	orrs	r1, r3
 800318c:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800318e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003190:	4013      	ands	r3, r2
 8003192:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003194:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8003196:	2000      	movs	r0, #0
}
 8003198:	e7dc      	b.n	8003154 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 800319a:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <stm32_clock_control_on+0xa0>)
 800319e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80031a0:	4319      	orrs	r1, r3
 80031a2:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031a6:	4013      	ands	r3, r2
 80031a8:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80031aa:	9b04      	ldr	r3, [sp, #16]
	return 0;
 80031ac:	2000      	movs	r0, #0
}
 80031ae:	e7d1      	b.n	8003154 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80031b0:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80031b2:	4a06      	ldr	r2, [pc, #24]	; (80031cc <stm32_clock_control_on+0xa0>)
 80031b4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80031b6:	4319      	orrs	r1, r3
 80031b8:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031ba:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80031bc:	4013      	ands	r3, r2
 80031be:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80031c0:	9b05      	ldr	r3, [sp, #20]
	return 0;
 80031c2:	2000      	movs	r0, #0
}
 80031c4:	e7c6      	b.n	8003154 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 80031c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80031ca:	e7c3      	b.n	8003154 <stm32_clock_control_on+0x28>
 80031cc:	40021000 	.word	0x40021000

080031d0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80031d0:	680b      	ldr	r3, [r1, #0]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d83a      	bhi.n	800324c <stm32_clock_control_off+0x7c>
 80031d6:	e8df f003 	tbb	[pc, r3]
 80031da:	0c04      	.short	0x0c04
 80031dc:	39293121 	.word	0x39293121
 80031e0:	14          	.byte	0x14
 80031e1:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80031e2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <stm32_clock_control_off+0x84>)
 80031e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80031e8:	ea23 0301 	bic.w	r3, r3, r1
 80031ec:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80031f2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <stm32_clock_control_off+0x84>)
 80031f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80031f8:	ea23 0301 	bic.w	r3, r3, r1
 80031fc:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 80031fe:	2000      	movs	r0, #0
}
 8003200:	4770      	bx	lr
{
 8003202:	b082      	sub	sp, #8
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8003204:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <stm32_clock_control_off+0x84>)
 8003208:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800320a:	4319      	orrs	r1, r3
 800320c:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800320e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003210:	4013      	ands	r3, r2
 8003212:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003214:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8003216:	2000      	movs	r0, #0
}
 8003218:	b002      	add	sp, #8
 800321a:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 800321c:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <stm32_clock_control_off+0x84>)
 8003220:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003222:	ea23 0301 	bic.w	r3, r3, r1
 8003226:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8003228:	2000      	movs	r0, #0
}
 800322a:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 800322c:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <stm32_clock_control_off+0x84>)
 8003230:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003232:	ea23 0301 	bic.w	r3, r3, r1
 8003236:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8003238:	2000      	movs	r0, #0
}
 800323a:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 800323c:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <stm32_clock_control_off+0x84>)
 8003240:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003242:	ea23 0301 	bic.w	r3, r3, r1
 8003246:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8003248:	2000      	movs	r0, #0
}
 800324a:	4770      	bx	lr
	switch (pclken->bus) {
 800324c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000

08003258 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	460c      	mov	r4, r1
 800325c:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <stm32_clock_control_get_subsys_rate+0x3c>)
 8003260:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8003262:	2101      	movs	r1, #1
 8003264:	4630      	mov	r0, r6
 8003266:	f006 fc65 	bl	8009b34 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d80e      	bhi.n	800328e <stm32_clock_control_get_subsys_rate+0x36>
 8003270:	e8df f003 	tbb	[pc, r3]
 8003274:	0a070404 	.word	0x0a070404
 8003278:	0d07      	.short	0x0d07
 800327a:	04          	.byte	0x04
 800327b:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 800327c:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800327e:	2000      	movs	r0, #0
}
 8003280:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8003282:	6028      	str	r0, [r5, #0]
	return 0;
 8003284:	2000      	movs	r0, #0
		break;
 8003286:	e7fb      	b.n	8003280 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8003288:	6028      	str	r0, [r5, #0]
	return 0;
 800328a:	2000      	movs	r0, #0
		break;
 800328c:	e7f8      	b.n	8003280 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800328e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003292:	e7f5      	b.n	8003280 <stm32_clock_control_get_subsys_rate+0x28>
 8003294:	200000ac 	.word	0x200000ac

08003298 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <stm32_clock_switch_to_hsi+0x44>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80032a0:	d109      	bne.n	80032b6 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <stm32_clock_switch_to_hsi+0x44>)
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032aa:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <stm32_clock_switch_to_hsi+0x44>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80032b4:	d0fa      	beq.n	80032ac <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <stm32_clock_switch_to_hsi+0x44>)
 80032b8:	6893      	ldr	r3, [r2, #8]
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032c4:	6893      	ldr	r3, [r2, #8]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ca:	4318      	orrs	r0, r3
 80032cc:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032ce:	4b03      	ldr	r3, [pc, #12]	; (80032dc <stm32_clock_switch_to_hsi+0x44>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d1f9      	bne.n	80032ce <stm32_clock_switch_to_hsi+0x36>
	}
}
 80032da:	4770      	bx	lr
 80032dc:	40021000 	.word	0x40021000

080032e0 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80032e0:	b510      	push	{r4, lr}
 80032e2:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 80032e4:	a803      	add	r0, sp, #12
 80032e6:	f006 fc20 	bl	8009b2a <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80032ea:	f000 f823 	bl	8003334 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80032ee:	4668      	mov	r0, sp
 80032f0:	f006 fc23 	bl	8009b3a <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7ff ffcf 	bl	8003298 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80032fa:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <stm32_clock_control_init+0x50>)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8003304:	68e3      	ldr	r3, [r4, #12]
 8003306:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800330a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800330e:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8003310:	a903      	add	r1, sp, #12
 8003312:	4668      	mov	r0, sp
 8003314:	f002 fcfc 	bl	8005d10 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003328:	2000      	movs	r0, #0
 800332a:	b006      	add	sp, #24
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003334:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <config_enable_default_clocks+0x1c>)
 8003338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800333a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800333e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003348:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 800334a:	b002      	add	sp, #8
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8003358:	280a      	cmp	r0, #10
 800335a:	d007      	beq.n	800336c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <console_out+0x28>)
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8003362:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4798      	blx	r3

	return c;
}
 8003368:	4620      	mov	r0, r4
 800336a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <console_out+0x28>)
 800336e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8003370:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	210d      	movs	r1, #13
 8003376:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8003378:	e7f0      	b.n	800335c <console_out+0x8>
 800337a:	bf00      	nop
 800337c:	20000794 	.word	0x20000794

08003380 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8003380:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8003382:	4c04      	ldr	r4, [pc, #16]	; (8003394 <uart_console_hook_install+0x14>)
 8003384:	4620      	mov	r0, r4
 8003386:	f7ff fde5 	bl	8002f54 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800338a:	4620      	mov	r0, r4
 800338c:	f7fe fd4e 	bl	8001e2c <__printk_hook_install>
}
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	08003355 	.word	0x08003355

08003398 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8003398:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <uart_console_init+0x28>)
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <uart_console_init+0x2c>)
 800339e:	6018      	str	r0, [r3, #0]
 80033a0:	f007 fb6d 	bl	800aa7e <z_device_ready>
 80033a4:	b128      	cbz	r0, 80033b2 <uart_console_init+0x1a>
 80033a6:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 80033a8:	b933      	cbnz	r3, 80033b8 <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 80033aa:	f7ff ffe9 	bl	8003380 <uart_console_hook_install>

	return 0;
 80033ae:	2000      	movs	r0, #0
}
 80033b0:	bd08      	pop	{r3, pc}
 80033b2:	f06f 0312 	mvn.w	r3, #18
 80033b6:	e7f7      	b.n	80033a8 <uart_console_init+0x10>
		return -ENODEV;
 80033b8:	f06f 0012 	mvn.w	r0, #18
 80033bc:	e7f8      	b.n	80033b0 <uart_console_init+0x18>
 80033be:	bf00      	nop
 80033c0:	0800bc40 	.word	0x0800bc40
 80033c4:	20000794 	.word	0x20000794

080033c8 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80033c8:	424a      	negs	r2, r1
 80033ca:	f001 0303 	and.w	r3, r1, #3
 80033ce:	f002 0203 	and.w	r2, r2, #3
 80033d2:	bf58      	it	pl
 80033d4:	4253      	negpl	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	009a      	lsls	r2, r3, #2
 80033da:	230f      	movs	r3, #15
 80033dc:	4093      	lsls	r3, r2
 80033de:	460a      	mov	r2, r1
 80033e0:	2900      	cmp	r1, #0
 80033e2:	db19      	blt.n	8003418 <gpio_stm32_set_exti_source+0x50>
 80033e4:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80033e8:	fa5f fc83 	uxtb.w	ip, r3
 80033ec:	f10c 0102 	add.w	r1, ip, #2
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <gpio_stm32_set_exti_source+0x58>)
 80033f2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80033f6:	0c1a      	lsrs	r2, r3, #16
 80033f8:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003400:	b162      	cbz	r2, 800341c <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	431a      	orrs	r2, r3
 800340c:	f10c 0c02 	add.w	ip, ip, #2
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <gpio_stm32_set_exti_source+0x58>)
 8003412:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8003416:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003418:	1cca      	adds	r2, r1, #3
 800341a:	e7e3      	b.n	80033e4 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 800341c:	2220      	movs	r2, #32
 800341e:	e7f2      	b.n	8003406 <gpio_stm32_set_exti_source+0x3e>
 8003420:	40010000 	.word	0x40010000

08003424 <gpio_stm32_get_exti_source>:
 8003424:	4242      	negs	r2, r0
 8003426:	f000 0303 	and.w	r3, r0, #3
 800342a:	f002 0203 	and.w	r2, r2, #3
 800342e:	bf58      	it	pl
 8003430:	4253      	negpl	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	230f      	movs	r3, #15
 8003438:	4093      	lsls	r3, r2
 800343a:	4602      	mov	r2, r0
 800343c:	2800      	cmp	r0, #0
 800343e:	db10      	blt.n	8003462 <gpio_stm32_get_exti_source+0x3e>
 8003440:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8003444:	b2c3      	uxtb	r3, r0
 8003446:	3302      	adds	r3, #2
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <gpio_stm32_get_exti_source+0x48>)
 800344a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800344e:	0c03      	lsrs	r3, r0, #16
 8003450:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003458:	b12b      	cbz	r3, 8003466 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 800345a:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 800345e:	40d8      	lsrs	r0, r3
 8003460:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003462:	1cc2      	adds	r2, r0, #3
 8003464:	e7ec      	b.n	8003440 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e7f9      	b.n	800345e <gpio_stm32_get_exti_source+0x3a>
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000

08003470 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	4606      	mov	r6, r0
 8003476:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <gpio_stm32_enable_int+0x40>)
 800347a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800347e:	ab02      	add	r3, sp, #8
 8003480:	e903 0003 	stmdb	r3, {r0, r1}
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <gpio_stm32_enable_int+0x44>)
 8003486:	f007 fafa 	bl	800aa7e <z_device_ready>
 800348a:	b148      	cbz	r0, 80034a0 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 800348c:	4809      	ldr	r0, [pc, #36]	; (80034b4 <gpio_stm32_enable_int+0x44>)
 800348e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4669      	mov	r1, sp
 8003494:	4798      	blx	r3
 8003496:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8003498:	b12c      	cbz	r4, 80034a6 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 800349a:	4620      	mov	r0, r4
 800349c:	b002      	add	sp, #8
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f06f 0412 	mvn.w	r4, #18
 80034a4:	e7f8      	b.n	8003498 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 80034a6:	4629      	mov	r1, r5
 80034a8:	4630      	mov	r0, r6
 80034aa:	f7ff ff8d 	bl	80033c8 <gpio_stm32_set_exti_source>
	return 0;
 80034ae:	e7f4      	b.n	800349a <gpio_stm32_enable_int+0x2a>
 80034b0:	0800bfc0 	.word	0x0800bfc0
 80034b4:	0800bb80 	.word	0x0800bb80

080034b8 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	460c      	mov	r4, r1
 80034bc:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 80034be:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80034c0:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 80034c2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80034c6:	d01f      	beq.n	8003508 <gpio_stm32_pin_interrupt_configure+0x50>
 80034c8:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 80034ca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80034ce:	d034      	beq.n	800353a <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80034d0:	491d      	ldr	r1, [pc, #116]	; (8003548 <gpio_stm32_pin_interrupt_configure+0x90>)
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7ff fe0e 	bl	80030f4 <stm32_exti_set_callback>
 80034d8:	4606      	mov	r6, r0
 80034da:	bb88      	cbnz	r0, 8003540 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 80034dc:	4621      	mov	r1, r4
 80034de:	68b8      	ldr	r0, [r7, #8]
 80034e0:	f7ff ffc6 	bl	8003470 <gpio_stm32_enable_int>

	switch (trig) {
 80034e4:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 80034e8:	d023      	beq.n	8003532 <gpio_stm32_pin_interrupt_configure+0x7a>
 80034ea:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 80034ee:	d022      	beq.n	8003536 <gpio_stm32_pin_interrupt_configure+0x7e>
 80034f0:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 80034f4:	d01b      	beq.n	800352e <gpio_stm32_pin_interrupt_configure+0x76>
 80034f6:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff fdc3 	bl	8003084 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fda4 	bl	800304c <stm32_exti_enable>

exit:
	return err;
}
 8003504:	4630      	mov	r0, r6
 8003506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8003508:	4620      	mov	r0, r4
 800350a:	f7ff ff8b 	bl	8003424 <gpio_stm32_get_exti_source>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4298      	cmp	r0, r3
 8003512:	d001      	beq.n	8003518 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8003514:	2600      	movs	r6, #0
		goto exit;
 8003516:	e7f5      	b.n	8003504 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fda7 	bl	800306c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff fdfa 	bl	8003118 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8003524:	2100      	movs	r1, #0
 8003526:	4620      	mov	r0, r4
 8003528:	f7ff fdac 	bl	8003084 <stm32_exti_trigger>
 800352c:	e7f2      	b.n	8003514 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 800352e:	2102      	movs	r1, #2
 8003530:	e7e2      	b.n	80034f8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8003532:	2101      	movs	r1, #1
 8003534:	e7e0      	b.n	80034f8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8003536:	2103      	movs	r1, #3
 8003538:	e7de      	b.n	80034f8 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 800353a:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800353e:	e7e1      	b.n	8003504 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8003540:	f06f 060f 	mvn.w	r6, #15
	return err;
 8003544:	e7de      	b.n	8003504 <gpio_stm32_pin_interrupt_configure+0x4c>
 8003546:	bf00      	nop
 8003548:	08009b4b 	.word	0x08009b4b

0800354c <gpio_stm32_clock_request>:
{
 800354c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800354e:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8003550:	b169      	cbz	r1, 800356e <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8003552:	340c      	adds	r4, #12
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <gpio_stm32_clock_request+0x40>)
 8003556:	f007 fa92 	bl	800aa7e <z_device_ready>
 800355a:	b128      	cbz	r0, 8003568 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <gpio_stm32_clock_request+0x40>)
 800355e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4621      	mov	r1, r4
 8003564:	4798      	blx	r3
}
 8003566:	bd10      	pop	{r4, pc}
 8003568:	f06f 0012 	mvn.w	r0, #18
 800356c:	e7fb      	b.n	8003566 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 800356e:	340c      	adds	r4, #12
 8003570:	4806      	ldr	r0, [pc, #24]	; (800358c <gpio_stm32_clock_request+0x40>)
 8003572:	f007 fa84 	bl	800aa7e <z_device_ready>
 8003576:	b128      	cbz	r0, 8003584 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8003578:	4804      	ldr	r0, [pc, #16]	; (800358c <gpio_stm32_clock_request+0x40>)
 800357a:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4621      	mov	r1, r4
 8003580:	4798      	blx	r3
 8003582:	e7f0      	b.n	8003566 <gpio_stm32_clock_request+0x1a>
 8003584:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8003588:	e7ed      	b.n	8003566 <gpio_stm32_clock_request+0x1a>
 800358a:	bf00      	nop
 800358c:	0800bb80 	.word	0x0800bb80

08003590 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8003590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003594:	b08a      	sub	sp, #40	; 0x28
 8003596:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8003598:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800359c:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 800359e:	ac02      	add	r4, sp, #8
 80035a0:	4f79      	ldr	r7, [pc, #484]	; (8003788 <spi_stm32_configure+0x1f8>)
 80035a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80035a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80035aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 80035ae:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 80035b2:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 80035b4:	429d      	cmp	r5, r3
 80035b6:	f000 80dc 	beq.w	8003772 <spi_stm32_configure+0x1e2>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80035ba:	88ab      	ldrh	r3, [r5, #4]
 80035bc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d002      	beq.n	80035ca <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	f040 80d6 	bne.w	8003776 <spi_stm32_configure+0x1e6>
 80035ca:	4870      	ldr	r0, [pc, #448]	; (800378c <spi_stm32_configure+0x1fc>)
 80035cc:	f007 fa57 	bl	800aa7e <z_device_ready>
 80035d0:	b1a0      	cbz	r0, 80035fc <spi_stm32_configure+0x6c>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 80035d2:	4b6e      	ldr	r3, [pc, #440]	; (800378c <spi_stm32_configure+0x1fc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	b19b      	cbz	r3, 8003602 <spi_stm32_configure+0x72>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80035da:	aa01      	add	r2, sp, #4
 80035dc:	4641      	mov	r1, r8
 80035de:	486b      	ldr	r0, [pc, #428]	; (800378c <spi_stm32_configure+0x1fc>)
 80035e0:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80035e2:	2800      	cmp	r0, #0
 80035e4:	f2c0 80ca 	blt.w	800377c <spi_stm32_configure+0x1ec>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80035e8:	2301      	movs	r3, #1
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	dc0c      	bgt.n	8003608 <spi_stm32_configure+0x78>
		uint32_t clk = clock >> br;
 80035ee:	9a01      	ldr	r2, [sp, #4]
 80035f0:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 80035f2:	6829      	ldr	r1, [r5, #0]
 80035f4:	4291      	cmp	r1, r2
 80035f6:	d207      	bcs.n	8003608 <spi_stm32_configure+0x78>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80035f8:	3301      	adds	r3, #1
 80035fa:	e7f6      	b.n	80035ea <spi_stm32_configure+0x5a>
 80035fc:	f06f 0012 	mvn.w	r0, #18
 8003600:	e7ef      	b.n	80035e2 <spi_stm32_configure+0x52>
		return -ENOSYS;
 8003602:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8003606:	e7ec      	b.n	80035e2 <spi_stm32_configure+0x52>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8003608:	2b08      	cmp	r3, #8
 800360a:	f300 80ba 	bgt.w	8003782 <spi_stm32_configure+0x1f2>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8003616:	3b01      	subs	r3, #1
 8003618:	aa0a      	add	r2, sp, #40	; 0x28
 800361a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800361e:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003628:	4313      	orrs	r3, r2
 800362a:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800362c:	88ab      	ldrh	r3, [r5, #4]
 800362e:	f013 0f02 	tst.w	r3, #2
 8003632:	d063      	beq.n	80036fc <spi_stm32_configure+0x16c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 800363c:	88ab      	ldrh	r3, [r5, #4]
 800363e:	f013 0f04 	tst.w	r3, #4
 8003642:	d060      	beq.n	8003706 <spi_stm32_configure+0x176>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8003652:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8003654:	88ab      	ldrh	r3, [r5, #4]
 8003656:	f013 0f10 	tst.w	r3, #16
 800365a:	d059      	beq.n	8003710 <spi_stm32_configure+0x180>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366a:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800366c:	68ab      	ldr	r3, [r5, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d053      	beq.n	800371a <spi_stm32_configure+0x18a>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003678:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800367a:	6863      	ldr	r3, [r4, #4]
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003682:	88ab      	ldrh	r3, [r5, #4]
 8003684:	f013 0f01 	tst.w	r3, #1
 8003688:	d05f      	beq.n	800374a <spi_stm32_configure+0x1ba>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8003690:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003692:	88ab      	ldrh	r3, [r5, #4]
 8003694:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003698:	2b08      	cmp	r3, #8
 800369a:	d05b      	beq.n	8003754 <spi_stm32_configure+0x1c4>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80036a2:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80036a4:	6863      	ldr	r3, [r4, #4]
 80036a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036aa:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 80036b4:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80036b6:	68ab      	ldr	r3, [r5, #8]
 80036b8:	b1e3      	cbz	r3, 80036f4 <spi_stm32_configure+0x164>
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	b1d0      	cbz	r0, 80036f4 <spi_stm32_configure+0x164>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80036be:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 80036c0:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80036c2:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 80036c6:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80036c8:	6904      	ldr	r4, [r0, #16]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80036ca:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80036ce:	d004      	beq.n	80036da <spi_stm32_configure+0x14a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80036d0:	f013 0f01 	tst.w	r3, #1
 80036d4:	d001      	beq.n	80036da <spi_stm32_configure+0x14a>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80036d6:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80036da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80036de:	f013 0f01 	tst.w	r3, #1
 80036e2:	d03e      	beq.n	8003762 <spi_stm32_configure+0x1d2>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80036e4:	2301      	movs	r3, #1
 80036e6:	fa03 f601 	lsl.w	r6, r3, r1
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	4333      	orrs	r3, r6
 80036ee:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	4798      	blx	r3
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 80036f4:	2000      	movs	r0, #0
}
 80036f6:	b00a      	add	sp, #40	; 0x28
 80036f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f023 0302 	bic.w	r3, r3, #2
 8003702:	6023      	str	r3, [r4, #0]
}
 8003704:	e79a      	b.n	800363c <spi_stm32_configure+0xac>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6023      	str	r3, [r4, #0]
}
 800370e:	e79d      	b.n	800364c <spi_stm32_configure+0xbc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	6023      	str	r3, [r4, #0]
}
 8003718:	e7a4      	b.n	8003664 <spi_stm32_configure+0xd4>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 800371a:	88ab      	ldrh	r3, [r5, #4]
 800371c:	f013 0f01 	tst.w	r3, #1
 8003720:	d008      	beq.n	8003734 <spi_stm32_configure+0x1a4>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003728:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6063      	str	r3, [r4, #4]
}
 8003732:	e7a6      	b.n	8003682 <spi_stm32_configure+0xf2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	6063      	str	r3, [r4, #4]
}
 8003748:	e79b      	b.n	8003682 <spi_stm32_configure+0xf2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8003750:	6023      	str	r3, [r4, #0]
}
 8003752:	e79e      	b.n	8003692 <spi_stm32_configure+0x102>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8003754:	6863      	ldr	r3, [r4, #4]
 8003756:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800375a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800375e:	6063      	str	r3, [r4, #4]
}
 8003760:	e7a0      	b.n	80036a4 <spi_stm32_configure+0x114>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003762:	2301      	movs	r3, #1
 8003764:	fa03 f601 	lsl.w	r6, r3, r1
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	ea23 0306 	bic.w	r3, r3, r6
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	e7be      	b.n	80036f0 <spi_stm32_configure+0x160>
		return 0;
 8003772:	2000      	movs	r0, #0
 8003774:	e7bf      	b.n	80036f6 <spi_stm32_configure+0x166>
		return -ENOTSUP;
 8003776:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800377a:	e7bc      	b.n	80036f6 <spi_stm32_configure+0x166>
		return -EIO;
 800377c:	f06f 0004 	mvn.w	r0, #4
 8003780:	e7b9      	b.n	80036f6 <spi_stm32_configure+0x166>
		return -EINVAL;
 8003782:	f06f 0015 	mvn.w	r0, #21
 8003786:	e7b6      	b.n	80036f6 <spi_stm32_configure+0x166>
 8003788:	0800bfc8 	.word	0x0800bfc8
 800378c:	0800bb80 	.word	0x0800bb80

08003790 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8003794:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8003796:	6847      	ldr	r7, [r0, #4]
 8003798:	4826      	ldr	r0, [pc, #152]	; (8003834 <spi_stm32_init+0xa4>)
 800379a:	f007 f970 	bl	800aa7e <z_device_ready>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d030      	beq.n	8003804 <spi_stm32_init+0x74>
	const struct clock_control_driver_api *api =
 80037a2:	4824      	ldr	r0, [pc, #144]	; (8003834 <spi_stm32_init+0xa4>)
 80037a4:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4639      	mov	r1, r7
 80037aa:	4798      	blx	r3
 80037ac:	4605      	mov	r5, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	d13a      	bne.n	8003828 <spi_stm32_init+0x98>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	6939      	ldr	r1, [r7, #16]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f006 f84d 	bl	8009856 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 80037bc:	2800      	cmp	r0, #0
 80037be:	db36      	blt.n	800382e <spi_stm32_init+0x9e>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
		return err;
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4620      	mov	r0, r4
 80037c4:	4798      	blx	r3
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 80037c6:	6833      	ldr	r3, [r6, #0]
 80037c8:	b1c3      	cbz	r3, 80037fc <spi_stm32_init+0x6c>
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	b1b3      	cbz	r3, 80037fc <spi_stm32_init+0x6c>
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	b1a2      	cbz	r2, 80037fc <spi_stm32_init+0x6c>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 80037d2:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 80037d4:	f003 fcc4 	bl	8007160 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	7a19      	ldrb	r1, [r3, #8]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 80037e0:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2301      	movs	r3, #1
 80037e6:	408b      	lsls	r3, r1
 80037e8:	421a      	tst	r2, r3
 80037ea:	d10e      	bne.n	800380a <spi_stm32_init+0x7a>
 80037ec:	462b      	mov	r3, r5
	if (value != 0)	{
 80037ee:	b173      	cbz	r3, 800380e <spi_stm32_init+0x7e>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80037f0:	2301      	movs	r3, #1
 80037f2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80037f6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 80037fc:	6933      	ldr	r3, [r6, #16]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 80037fe:	b16b      	cbz	r3, 800381c <spi_stm32_init+0x8c>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8003800:	4628      	mov	r0, r5
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	f06f 0512 	mvn.w	r5, #18
 8003808:	e7d1      	b.n	80037ae <spi_stm32_init+0x1e>
		value = (value != 0) ? 0 : 1;
 800380a:	2301      	movs	r3, #1
 800380c:	e7ef      	b.n	80037ee <spi_stm32_init+0x5e>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800380e:	2301      	movs	r3, #1
 8003810:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8003814:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	4798      	blx	r3
	}

	return gpio_pin_set_raw(port, pin, value);
 800381a:	e7ef      	b.n	80037fc <spi_stm32_init+0x6c>
		ctx->owner = NULL;
 800381c:	6073      	str	r3, [r6, #4]
		k_sem_give(&ctx->lock);
 800381e:	f106 0008 	add.w	r0, r6, #8
	z_impl_k_sem_give(sem);
 8003822:	f002 fd7f 	bl	8006324 <z_impl_k_sem_give>
	}
}
 8003826:	e7eb      	b.n	8003800 <spi_stm32_init+0x70>
		return -EIO;
 8003828:	f06f 0504 	mvn.w	r5, #4
 800382c:	e7e8      	b.n	8003800 <spi_stm32_init+0x70>
		return err;
 800382e:	4605      	mov	r5, r0
 8003830:	e7e6      	b.n	8003800 <spi_stm32_init+0x70>
 8003832:	bf00      	nop
 8003834:	0800bb80 	.word	0x0800bb80

08003838 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8003838:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 800383a:	4802      	ldr	r0, [pc, #8]	; (8003844 <timer_callback+0xc>)
 800383c:	f002 fee4 	bl	8006608 <k_work_submit>
}
 8003840:	bd08      	pop	{r3, pc}
 8003842:	bf00      	nop
 8003844:	2000007c 	.word	0x2000007c

08003848 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8003848:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800384a:	f007 fca8 	bl	800b19e <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800384e:	220a      	movs	r2, #10
 8003850:	2300      	movs	r3, #0
 8003852:	f7fd f8c3 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8003856:	4b02      	ldr	r3, [pc, #8]	; (8003860 <RtcGetTimerElapsedTime+0x18>)
 8003858:	681b      	ldr	r3, [r3, #0]
}
 800385a:	1ac0      	subs	r0, r0, r3
 800385c:	bd08      	pop	{r3, pc}
 800385e:	bf00      	nop
 8003860:	200007f8 	.word	0x200007f8

08003864 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8003864:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8003866:	4802      	ldr	r0, [pc, #8]	; (8003870 <RtcStopAlarm+0xc>)
 8003868:	f007 fcd5 	bl	800b216 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 800386c:	bd08      	pop	{r3, pc}
 800386e:	bf00      	nop
 8003870:	20000328 	.word	0x20000328

08003874 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8003874:	b500      	push	{lr}
 8003876:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8003878:	0f83      	lsrs	r3, r0, #30
 800387a:	0082      	lsls	r2, r0, #2
 800387c:	1812      	adds	r2, r2, r0
 800387e:	f143 0300 	adc.w	r3, r3, #0
 8003882:	1892      	adds	r2, r2, r2
 8003884:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8003886:	2000      	movs	r0, #0
 8003888:	2100      	movs	r1, #0
 800388a:	e9cd 0100 	strd	r0, r1, [sp]
 800388e:	4803      	ldr	r0, [pc, #12]	; (800389c <RtcSetAlarm+0x28>)
 8003890:	f003 fcbc 	bl	800720c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8003894:	b003      	add	sp, #12
 8003896:	f85d fb04 	ldr.w	pc, [sp], #4
 800389a:	bf00      	nop
 800389c:	20000328 	.word	0x20000328

080038a0 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 80038a0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80038a2:	f007 fc7c 	bl	800b19e <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80038a6:	220a      	movs	r2, #10
 80038a8:	2300      	movs	r3, #0
 80038aa:	f7fd f897 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 80038ae:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <RtcSetTimerContext+0x14>)
 80038b0:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 80038b2:	bd08      	pop	{r3, pc}
 80038b4:	200007f8 	.word	0x200007f8

080038b8 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 80038b8:	4b01      	ldr	r3, [pc, #4]	; (80038c0 <RtcGetTimerContext+0x8>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200007f8 	.word	0x200007f8

080038c4 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80038c8:	f100 0534 	add.w	r5, r0, #52	; 0x34
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80038cc:	2302      	movs	r3, #2
 80038ce:	f3bf 8f5b 	dmb	ish
 80038d2:	e855 2f00 	ldrex	r2, [r5]
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	d103      	bne.n	80038e2 <modem_release+0x1e>
 80038da:	e845 3100 	strex	r1, r3, [r5]
 80038de:	2900      	cmp	r1, #0
 80038e0:	d1f7      	bne.n	80038d2 <modem_release+0xe>
 80038e2:	f3bf 8f5b 	dmb	ish
 80038e6:	bf0c      	ite	eq
 80038e8:	2601      	moveq	r6, #1
 80038ea:	2600      	movne	r6, #0
 80038ec:	d10e      	bne.n	800390c <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <modem_release+0x4c>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	6023      	str	r3, [r4, #0]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80038f8:	f3bf 8f5b 	dmb	ish
 80038fc:	e855 2f00 	ldrex	r2, [r5]
 8003900:	e845 3100 	strex	r1, r3, [r5]
 8003904:	2900      	cmp	r1, #0
 8003906:	d1f9      	bne.n	80038fc <modem_release+0x38>
 8003908:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 800390c:	4630      	mov	r0, r6
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	0800c2ec 	.word	0x0800c2ec

08003914 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	4617      	mov	r7, r2
 8003918:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 800391a:	4c1d      	ldr	r4, [pc, #116]	; (8003990 <sx12xx_ev_rx_done+0x7c>)
 800391c:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8003920:	2302      	movs	r3, #2
 8003922:	f3bf 8f5b 	dmb	ish
 8003926:	e854 2f00 	ldrex	r2, [r4]
 800392a:	2a01      	cmp	r2, #1
 800392c:	d104      	bne.n	8003938 <sx12xx_ev_rx_done+0x24>
 800392e:	e844 3c00 	strex	ip, r3, [r4]
 8003932:	f1bc 0f00 	cmp.w	ip, #0
 8003936:	d1f6      	bne.n	8003926 <sx12xx_ev_rx_done+0x12>
 8003938:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800393c:	d127      	bne.n	800398e <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <sx12xx_ev_rx_done+0x7c>)
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	781a      	ldrb	r2, [r3, #0]
 8003944:	428a      	cmp	r2, r1
 8003946:	d900      	bls.n	800394a <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 8003948:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 800394a:	4c11      	ldr	r4, [pc, #68]	; (8003990 <sx12xx_ev_rx_done+0x7c>)
 800394c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	4601      	mov	r1, r0
 8003952:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003954:	f007 fd8a 	bl	800b46c <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 8003958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800395a:	b103      	cbz	r3, 800395e <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 800395c:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <sx12xx_ev_rx_done+0x7c>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	b103      	cbz	r3, 8003966 <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 8003964:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <sx12xx_ev_rx_done+0x80>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 800396c:	2100      	movs	r1, #0
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <sx12xx_ev_rx_done+0x7c>)
 8003970:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003974:	f3bf 8f5b 	dmb	ish
 8003978:	e853 2f00 	ldrex	r2, [r3]
 800397c:	e843 1000 	strex	r0, r1, [r3]
 8003980:	2800      	cmp	r0, #0
 8003982:	d1f9      	bne.n	8003978 <sx12xx_ev_rx_done+0x64>
 8003984:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8003988:	4630      	mov	r0, r6
 800398a:	f003 ff3b 	bl	8007804 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 800398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003990:	200007fc 	.word	0x200007fc
 8003994:	0800c2ec 	.word	0x0800c2ec

08003998 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 8003998:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <sx12xx_ev_tx_done+0x18>)
 800399c:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 800399e:	f7ff ff91 	bl	80038c4 <modem_release>
 80039a2:	b120      	cbz	r0, 80039ae <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 80039a4:	b11c      	cbz	r4, 80039ae <sx12xx_ev_tx_done+0x16>
 80039a6:	2100      	movs	r1, #0
 80039a8:	4620      	mov	r0, r4
 80039aa:	f003 ff2b 	bl	8007804 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	200007fc 	.word	0x200007fc

080039b4 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80039b8:	490f      	ldr	r1, [pc, #60]	; (80039f8 <sx12xx_lora_send_async+0x44>)
 80039ba:	2001      	movs	r0, #1
 80039bc:	f3bf 8f5b 	dmb	ish
 80039c0:	e851 4f00 	ldrex	r4, [r1]
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d103      	bne.n	80039d0 <sx12xx_lora_send_async+0x1c>
 80039c8:	e841 0600 	strex	r6, r0, [r1]
 80039cc:	2e00      	cmp	r6, #0
 80039ce:	d1f7      	bne.n	80039c0 <sx12xx_lora_send_async+0xc>
 80039d0:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80039d4:	d10c      	bne.n	80039f0 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 80039d6:	3934      	subs	r1, #52	; 0x34
 80039d8:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80039da:	4e08      	ldr	r6, [pc, #32]	; (80039fc <sx12xx_lora_send_async+0x48>)
 80039dc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80039de:	b2d4      	uxtb	r4, r2
 80039e0:	4621      	mov	r1, r4
 80039e2:	4798      	blx	r3

	Radio.Send(data, data_len);
 80039e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	4798      	blx	r3

	return 0;
 80039ec:	2000      	movs	r0, #0
}
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 80039f0:	f06f 000f 	mvn.w	r0, #15
 80039f4:	e7fb      	b.n	80039ee <sx12xx_lora_send_async+0x3a>
 80039f6:	bf00      	nop
 80039f8:	20000830 	.word	0x20000830
 80039fc:	0800c2ec 	.word	0x0800c2ec

08003a00 <sx12xx_lora_send>:
{
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8003a06:	aa0a      	add	r2, sp, #40	; 0x28
 8003a08:	920a      	str	r2, [sp, #40]	; 0x28
 8003a0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003a10:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8003a12:	9305      	str	r3, [sp, #20]
 8003a14:	9306      	str	r3, [sp, #24]
 8003a16:	9307      	str	r3, [sp, #28]
 8003a18:	9308      	str	r3, [sp, #32]
 8003a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8003a20:	2501      	movs	r5, #1
 8003a22:	f365 0304 	bfi	r3, r5, #0, #5
 8003a26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8003a2a:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <sx12xx_lora_send+0xb0>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d03a      	beq.n	8003aaa <sx12xx_lora_send+0xaa>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8003a34:	4613      	mov	r3, r2
 8003a36:	4622      	mov	r2, r4
 8003a38:	f7ff ffbc 	bl	80039b4 <sx12xx_lora_send_async>
	if (ret < 0) {
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	db22      	blt.n	8003a86 <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <sx12xx_lora_send+0xb4>)
 8003a42:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 8003a44:	491a      	ldr	r1, [pc, #104]	; (8003ab0 <sx12xx_lora_send+0xb0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8003a46:	9503      	str	r5, [sp, #12]
 8003a48:	b2e4      	uxtb	r4, r4
 8003a4a:	9402      	str	r4, [sp, #8]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 8003a58:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 8003a5c:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8003a60:	4628      	mov	r0, r5
 8003a62:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8003a64:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8003a68:	f3c0 7341 	ubfx	r3, r0, #29, #2
 8003a6c:	00c2      	lsls	r2, r0, #3
 8003a6e:	1852      	adds	r2, r2, r1
 8003a70:	f143 0300 	adc.w	r3, r3, #0
 8003a74:	1892      	adds	r2, r2, r2
 8003a76:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8003a78:	4629      	mov	r1, r5
 8003a7a:	a805      	add	r0, sp, #20
 8003a7c:	f003 fe16 	bl	80076ac <z_impl_k_poll>
	if (ret < 0) {
 8003a80:	2800      	cmp	r0, #0
 8003a82:	db02      	blt.n	8003a8a <sx12xx_lora_send+0x8a>
	return 0;
 8003a84:	2000      	movs	r0, #0
}
 8003a86:	b00e      	add	sp, #56	; 0x38
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
		if (!modem_release(&dev_data)) {
 8003a8a:	4809      	ldr	r0, [pc, #36]	; (8003ab0 <sx12xx_lora_send+0xb0>)
 8003a8c:	f7ff ff1a 	bl	80038c4 <modem_release>
 8003a90:	b108      	cbz	r0, 8003a96 <sx12xx_lora_send+0x96>
	return 0;
 8003a92:	2000      	movs	r0, #0
 8003a94:	e7f7      	b.n	8003a86 <sx12xx_lora_send+0x86>
 8003a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	a805      	add	r0, sp, #20
 8003aa2:	f003 fe03 	bl	80076ac <z_impl_k_poll>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e7ed      	b.n	8003a86 <sx12xx_lora_send+0x86>
		return -EINVAL;
 8003aaa:	f06f 0015 	mvn.w	r0, #21
 8003aae:	e7ea      	b.n	8003a86 <sx12xx_lora_send+0x86>
 8003ab0:	200007fc 	.word	0x200007fc
 8003ab4:	0800c2ec 	.word	0x0800c2ec

08003ab8 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	b08c      	sub	sp, #48	; 0x30
 8003abc:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8003ac0:	aa08      	add	r2, sp, #32
 8003ac2:	9208      	str	r2, [sp, #32]
 8003ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8003aca:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8003acc:	9303      	str	r3, [sp, #12]
 8003ace:	9304      	str	r3, [sp, #16]
 8003ad0:	9305      	str	r3, [sp, #20]
 8003ad2:	9306      	str	r3, [sp, #24]
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003ada:	2001      	movs	r0, #1
 8003adc:	f360 0304 	bfi	r3, r0, #0, #5
 8003ae0:	f88d 3019 	strb.w	r3, [sp, #25]
 8003ae4:	9207      	str	r2, [sp, #28]
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <sx12xx_lora_recv+0xb0>)
 8003ae8:	f3bf 8f5b 	dmb	ish
 8003aec:	e853 2f00 	ldrex	r2, [r3]
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	d103      	bne.n	8003afc <sx12xx_lora_recv+0x44>
 8003af4:	e843 0400 	strex	r4, r0, [r3]
 8003af8:	2c00      	cmp	r4, #0
 8003afa:	d1f7      	bne.n	8003aec <sx12xx_lora_recv+0x34>
 8003afc:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8003b00:	d12e      	bne.n	8003b60 <sx12xx_lora_recv+0xa8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 8003b02:	3b34      	subs	r3, #52	; 0x34
 8003b04:	aa08      	add	r2, sp, #32
 8003b06:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8003b08:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 8003b0a:	f10d 0207 	add.w	r2, sp, #7
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 8003b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 8003b14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8003b18:	4c14      	ldr	r4, [pc, #80]	; (8003b6c <sx12xx_lora_recv+0xb4>)
 8003b1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b1c:	21ff      	movs	r1, #255	; 0xff
 8003b1e:	4798      	blx	r3
	Radio.Rx(0);
 8003b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b22:	2000      	movs	r0, #0
 8003b24:	4798      	blx	r3
 8003b26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	a803      	add	r0, sp, #12
 8003b2e:	f003 fdbd 	bl	80076ac <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8003b32:	1e04      	subs	r4, r0, #0
 8003b34:	db04      	blt.n	8003b40 <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8003b36:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	b00c      	add	sp, #48	; 0x30
 8003b3e:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 8003b40:	480b      	ldr	r0, [pc, #44]	; (8003b70 <sx12xx_lora_recv+0xb8>)
 8003b42:	f7ff febf 	bl	80038c4 <modem_release>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d1f7      	bne.n	8003b3a <sx12xx_lora_recv+0x82>
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b52:	2101      	movs	r1, #1
 8003b54:	a803      	add	r0, sp, #12
 8003b56:	f003 fda9 	bl	80076ac <z_impl_k_poll>
			return size;
 8003b5a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8003b5e:	e7ec      	b.n	8003b3a <sx12xx_lora_recv+0x82>
		return -EBUSY;
 8003b60:	f06f 040f 	mvn.w	r4, #15
 8003b64:	e7e9      	b.n	8003b3a <sx12xx_lora_recv+0x82>
 8003b66:	bf00      	nop
 8003b68:	20000830 	.word	0x20000830
 8003b6c:	0800c2ec 	.word	0x0800c2ec
 8003b70:	200007fc 	.word	0x200007fc

08003b74 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	460c      	mov	r4, r1
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <sx12xx_lora_config+0xa4>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f3bf 8f5b 	dmb	ish
 8003b82:	e853 1f00 	ldrex	r1, [r3]
 8003b86:	2900      	cmp	r1, #0
 8003b88:	d103      	bne.n	8003b92 <sx12xx_lora_config+0x1e>
 8003b8a:	e843 2000 	strex	r0, r2, [r3]
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d1f7      	bne.n	8003b82 <sx12xx_lora_config+0xe>
 8003b92:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8003b96:	d13b      	bne.n	8003c10 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <sx12xx_lora_config+0xa8>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	4798      	blx	r3

	if (config->tx) {
 8003ba0:	7ae3      	ldrb	r3, [r4, #11]
 8003ba2:	b9cb      	cbnz	r3, 8003bd8 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <sx12xx_lora_config+0xa8>)
 8003ba6:	699d      	ldr	r5, [r3, #24]
 8003ba8:	2001      	movs	r0, #1
 8003baa:	9009      	str	r0, [sp, #36]	; 0x24
 8003bac:	2300      	movs	r3, #0
 8003bae:	9308      	str	r3, [sp, #32]
 8003bb0:	9307      	str	r3, [sp, #28]
 8003bb2:	9306      	str	r3, [sp, #24]
 8003bb4:	9305      	str	r3, [sp, #20]
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	220a      	movs	r2, #10
 8003bbc:	9202      	str	r2, [sp, #8]
 8003bbe:	8922      	ldrh	r2, [r4, #8]
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	79a3      	ldrb	r3, [r4, #6]
 8003bc6:	7962      	ldrb	r2, [r4, #5]
 8003bc8:	7921      	ldrb	r1, [r4, #4]
 8003bca:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8003bcc:	4814      	ldr	r0, [pc, #80]	; (8003c20 <sx12xx_lora_config+0xac>)
 8003bce:	f7ff fe79 	bl	80038c4 <modem_release>
	return 0;
 8003bd2:	2000      	movs	r0, #0
}
 8003bd4:	b00a      	add	sp, #40	; 0x28
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <sx12xx_lora_config+0xb0>)
 8003bda:	6820      	ldr	r0, [r4, #0]
 8003bdc:	6861      	ldr	r1, [r4, #4]
 8003bde:	68a2      	ldr	r2, [r4, #8]
 8003be0:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <sx12xx_lora_config+0xa8>)
 8003be4:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8003be6:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8003be8:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8003bea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003bee:	9208      	str	r2, [sp, #32]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	9207      	str	r2, [sp, #28]
 8003bf4:	9206      	str	r2, [sp, #24]
 8003bf6:	9205      	str	r2, [sp, #20]
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	9004      	str	r0, [sp, #16]
 8003bfc:	9203      	str	r2, [sp, #12]
 8003bfe:	8926      	ldrh	r6, [r4, #8]
 8003c00:	9602      	str	r6, [sp, #8]
 8003c02:	9101      	str	r1, [sp, #4]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	7923      	ldrb	r3, [r4, #4]
 8003c08:	f994 100a 	ldrsb.w	r1, [r4, #10]
 8003c0c:	47a8      	blx	r5
 8003c0e:	e7dd      	b.n	8003bcc <sx12xx_lora_config+0x58>
		return -EBUSY;
 8003c10:	f06f 000f 	mvn.w	r0, #15
 8003c14:	e7de      	b.n	8003bd4 <sx12xx_lora_config+0x60>
 8003c16:	bf00      	nop
 8003c18:	20000830 	.word	0x20000830
 8003c1c:	0800c2ec 	.word	0x0800c2ec
 8003c20:	200007fc 	.word	0x200007fc
 8003c24:	20000824 	.word	0x20000824

08003c28 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <sx12xx_lora_test_cw+0x3c>)
 8003c32:	f04f 0c01 	mov.w	ip, #1
 8003c36:	f3bf 8f5b 	dmb	ish
 8003c3a:	e853 ef00 	ldrex	lr, [r3]
 8003c3e:	f1be 0f00 	cmp.w	lr, #0
 8003c42:	d103      	bne.n	8003c4c <sx12xx_lora_test_cw+0x24>
 8003c44:	e843 c400 	strex	r4, ip, [r3]
 8003c48:	2c00      	cmp	r4, #0
 8003c4a:	d1f6      	bne.n	8003c3a <sx12xx_lora_test_cw+0x12>
 8003c4c:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8003c50:	d104      	bne.n	8003c5c <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <sx12xx_lora_test_cw+0x40>)
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4798      	blx	r3
	return 0;
 8003c58:	2000      	movs	r0, #0
}
 8003c5a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8003c5c:	f06f 000f 	mvn.w	r0, #15
 8003c60:	e7fb      	b.n	8003c5a <sx12xx_lora_test_cw+0x32>
 8003c62:	bf00      	nop
 8003c64:	20000830 	.word	0x20000830
 8003c68:	0800c2ec 	.word	0x0800c2ec

08003c6c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8003c6c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003c6e:	480d      	ldr	r0, [pc, #52]	; (8003ca4 <sx12xx_init+0x38>)
 8003c70:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8003c74:	2400      	movs	r4, #0
 8003c76:	f3bf 8f5b 	dmb	ish
 8003c7a:	e853 2f00 	ldrex	r2, [r3]
 8003c7e:	e843 4100 	strex	r1, r4, [r3]
 8003c82:	2900      	cmp	r1, #0
 8003c84:	d1f9      	bne.n	8003c7a <sx12xx_init+0xe>
 8003c86:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <sx12xx_init+0x3c>)
 8003c8c:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8003c8e:	4b07      	ldr	r3, [pc, #28]	; (8003cac <sx12xx_init+0x40>)
 8003c90:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 8003c92:	4d07      	ldr	r5, [pc, #28]	; (8003cb0 <sx12xx_init+0x44>)
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	3004      	adds	r0, #4
 8003c98:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8003c9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c9c:	4798      	blx	r3

	return 0;
}
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200007fc 	.word	0x200007fc
 8003ca8:	08003999 	.word	0x08003999
 8003cac:	08003915 	.word	0x08003915
 8003cb0:	0800c2ec 	.word	0x0800c2ec

08003cb4 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8003cb4:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <sx127x_dio_work_handle+0x14>)
 8003cb8:	1ac0      	subs	r0, r0, r3
 8003cba:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <sx127x_dio_work_handle+0x18>)
 8003cbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	4798      	blx	r3
}
 8003cc6:	bd08      	pop	{r3, pc}
 8003cc8:	20000898 	.word	0x20000898
 8003ccc:	2000008c 	.word	0x2000008c

08003cd0 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8003cd8:	f10d 0007 	add.w	r0, sp, #7
 8003cdc:	9006      	str	r0, [sp, #24]
 8003cde:	2001      	movs	r0, #1
 8003ce0:	9007      	str	r0, [sp, #28]
 8003ce2:	9208      	str	r2, [sp, #32]
 8003ce4:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8003ce6:	ab06      	add	r3, sp, #24
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	2302      	movs	r3, #2
 8003cec:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8003cee:	b149      	cbz	r1, 8003d04 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8003cf0:	490b      	ldr	r1, [pc, #44]	; (8003d20 <sx127x_transceive+0x50>)
 8003cf2:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8003cf4:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8003cf6:	681c      	ldr	r4, [r3, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	aa04      	add	r2, sp, #16
 8003cfc:	3108      	adds	r1, #8
 8003cfe:	47a0      	blx	r4
}
 8003d00:	b00a      	add	sp, #40	; 0x28
 8003d02:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8003d04:	ab06      	add	r3, sp, #24
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	2302      	movs	r3, #2
 8003d0a:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <sx127x_transceive+0x50>)
 8003d0e:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8003d10:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8003d12:	681c      	ldr	r4, [r3, #0]
 8003d14:	ab02      	add	r3, sp, #8
 8003d16:	aa04      	add	r2, sp, #16
 8003d18:	3108      	adds	r1, #8
 8003d1a:	47a0      	blx	r4
 8003d1c:	e7f0      	b.n	8003d00 <sx127x_transceive+0x30>
 8003d1e:	bf00      	nop
 8003d20:	20000874 	.word	0x20000874

08003d24 <sx127x_irq_callback>:
{
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8003d28:	fa92 f6a2 	rbit	r6, r2
 8003d2c:	fab6 f686 	clz	r6, r6
 8003d30:	b90a      	cbnz	r2, 8003d36 <sx127x_irq_callback+0x12>
 8003d32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003d36:	2400      	movs	r4, #0
 8003d38:	e000      	b.n	8003d3c <sx127x_irq_callback+0x18>
 8003d3a:	3401      	adds	r4, #1
 8003d3c:	2c03      	cmp	r4, #3
 8003d3e:	d813      	bhi.n	8003d68 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8003d40:	1d23      	adds	r3, r4, #4
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <sx127x_irq_callback+0x48>)
 8003d44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	42ab      	cmp	r3, r5
 8003d4c:	d1f5      	bne.n	8003d3a <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <sx127x_irq_callback+0x4c>)
 8003d50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d54:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8003d56:	42b3      	cmp	r3, r6
 8003d58:	d1ef      	bne.n	8003d3a <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8003d5a:	1ca0      	adds	r0, r4, #2
 8003d5c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003d60:	3004      	adds	r0, #4
 8003d62:	f002 fc51 	bl	8006608 <k_work_submit>
 8003d66:	e7e8      	b.n	8003d3a <sx127x_irq_callback+0x16>
}
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000874 	.word	0x20000874
 8003d70:	0800c358 	.word	0x0800c358

08003d74 <SX1276Reset>:
{
 8003d74:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <SX1276Reset+0x64>)
 8003d78:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003d7a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f013 0f01 	tst.w	r3, #1
 8003d82:	d11b      	bne.n	8003dbc <SX1276Reset+0x48>
 8003d84:	2301      	movs	r3, #1
	if (value != 0)	{
 8003d86:	b1db      	cbz	r3, 8003dc0 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8003d88:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8003d90:	200a      	movs	r0, #10
 8003d92:	2100      	movs	r1, #0
 8003d94:	f003 f808 	bl	8006da8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <SX1276Reset+0x64>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003d9c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f013 0f01 	tst.w	r3, #1
 8003da4:	d111      	bne.n	8003dca <SX1276Reset+0x56>
 8003da6:	2300      	movs	r3, #0
	if (value != 0)	{
 8003da8:	b18b      	cbz	r3, 8003dce <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8003daa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2101      	movs	r1, #1
 8003db0:	4798      	blx	r3
 8003db2:	203c      	movs	r0, #60	; 0x3c
 8003db4:	2100      	movs	r1, #0
 8003db6:	f002 fff7 	bl	8006da8 <z_impl_k_sleep>
}
 8003dba:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e7e2      	b.n	8003d86 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8003dc0:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4798      	blx	r3
 8003dc8:	e7e2      	b.n	8003d90 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e7ec      	b.n	8003da8 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8003dce:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4798      	blx	r3
 8003dd6:	e7ec      	b.n	8003db2 <SX1276Reset+0x3e>
 8003dd8:	20000874 	.word	0x20000874

08003ddc <SX1276IoIrqInit>:
{
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003de0:	2400      	movs	r4, #0
 8003de2:	e03e      	b.n	8003e62 <SX1276IoIrqInit+0x86>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003de8:	f013 0f01 	tst.w	r3, #1
 8003dec:	d06e      	beq.n	8003ecc <SX1276IoIrqInit+0xf0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003dee:	2301      	movs	r3, #1
 8003df0:	fa03 fc01 	lsl.w	ip, r3, r1
 8003df4:	6833      	ldr	r3, [r6, #0]
 8003df6:	ea43 030c 	orr.w	r3, r3, ip
 8003dfa:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8003e00:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <SX1276IoIrqInit+0x110>)
 8003e06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <SX1276IoIrqInit+0x114>)
 8003e0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e10:	791e      	ldrb	r6, [r3, #4]
 8003e12:	2301      	movs	r3, #1
 8003e14:	40b3      	lsls	r3, r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8003e16:	4a37      	ldr	r2, [pc, #220]	; (8003ef4 <SX1276IoIrqInit+0x118>)
 8003e18:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8003e1a:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8003e1c:	1d23      	adds	r3, r4, #4
 8003e1e:	4a36      	ldr	r2, [pc, #216]	; (8003ef8 <SX1276IoIrqInit+0x11c>)
 8003e20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e24:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8003e26:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d056      	beq.n	8003edc <SX1276IoIrqInit+0x100>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4798      	blx	r3
 8003e32:	2800      	cmp	r0, #0
 8003e34:	db58      	blt.n	8003ee8 <SX1276IoIrqInit+0x10c>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8003e36:	1d23      	adds	r3, r4, #4
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <SX1276IoIrqInit+0x11c>)
 8003e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e3e:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8003e40:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8003e42:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2301      	movs	r3, #1
 8003e48:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8003e4a:	421a      	tst	r2, r3
 8003e4c:	d149      	bne.n	8003ee2 <SX1276IoIrqInit+0x106>
 8003e4e:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8003e52:	698f      	ldr	r7, [r1, #24]
 8003e54:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8003e58:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003e60:	3401      	adds	r4, #1
 8003e62:	2c03      	cmp	r4, #3
 8003e64:	d840      	bhi.n	8003ee8 <SX1276IoIrqInit+0x10c>
		if (!irqHandlers[i]) {
 8003e66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f8      	beq.n	8003e60 <SX1276IoIrqInit+0x84>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <SX1276IoIrqInit+0x114>)
 8003e70:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8003e74:	f001 ffb4 	bl	8005de0 <z_impl_device_get_binding>
 8003e78:	1d23      	adds	r3, r4, #4
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <SX1276IoIrqInit+0x11c>)
 8003e7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e80:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8003e82:	b388      	cbz	r0, 8003ee8 <SX1276IoIrqInit+0x10c>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8003e84:	4616      	mov	r6, r2
 8003e86:	1ca0      	adds	r0, r4, #2
 8003e88:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003e8c:	491b      	ldr	r1, [pc, #108]	; (8003efc <SX1276IoIrqInit+0x120>)
 8003e8e:	3004      	adds	r0, #4
 8003e90:	f006 ff4b 	bl	800ad2a <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003e94:	1d23      	adds	r3, r4, #4
 8003e96:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003e9a:	6870      	ldr	r0, [r6, #4]
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <SX1276IoIrqInit+0x114>)
 8003e9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ea2:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8003ea4:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8003eae:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8003eb0:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8003eb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003eb6:	2a00      	cmp	r2, #0
 8003eb8:	d094      	beq.n	8003de4 <SX1276IoIrqInit+0x8>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8003eba:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8003ebe:	d091      	beq.n	8003de4 <SX1276IoIrqInit+0x8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003ec0:	f013 0f01 	tst.w	r3, #1
 8003ec4:	d08e      	beq.n	8003de4 <SX1276IoIrqInit+0x8>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003ec6:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8003eca:	e78b      	b.n	8003de4 <SX1276IoIrqInit+0x8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003ecc:	2301      	movs	r3, #1
 8003ece:	fa03 fc01 	lsl.w	ip, r3, r1
 8003ed2:	6833      	ldr	r3, [r6, #0]
 8003ed4:	ea23 030c 	bic.w	r3, r3, ip
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	e78f      	b.n	8003dfc <SX1276IoIrqInit+0x20>
		return -ENOTSUP;
 8003edc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003ee0:	e7a7      	b.n	8003e32 <SX1276IoIrqInit+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8003ee2:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8003ee6:	e7b4      	b.n	8003e52 <SX1276IoIrqInit+0x76>
}
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000844 	.word	0x20000844
 8003ef0:	0800c358 	.word	0x0800c358
 8003ef4:	08003d25 	.word	0x08003d25
 8003ef8:	20000874 	.word	0x20000874
 8003efc:	08003cb5 	.word	0x08003cb5

08003f00 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8003f00:	b530      	push	{r4, r5, lr}
 8003f02:	b083      	sub	sp, #12
 8003f04:	4604      	mov	r4, r0
 8003f06:	4832      	ldr	r0, [pc, #200]	; (8003fd0 <sx127x_lora_init+0xd0>)
 8003f08:	f001 ff6a 	bl	8005de0 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <sx127x_lora_init+0xd4>)
 8003f0e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d050      	beq.n	8003fb6 <sx127x_lora_init+0xb6>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8003f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f18:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8003f1a:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <sx127x_lora_init+0xd8>)
 8003f1c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	81da      	strh	r2, [r3, #14]
 8003f22:	482e      	ldr	r0, [pc, #184]	; (8003fdc <sx127x_lora_init+0xdc>)
 8003f24:	f001 ff5c 	bl	8005de0 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <sx127x_lora_init+0xe0>)
 8003f2a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d045      	beq.n	8003fbc <sx127x_lora_init+0xbc>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8003f30:	2206      	movs	r2, #6
 8003f32:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8003f34:	2201      	movs	r2, #1
 8003f36:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 8003f3c:	4825      	ldr	r0, [pc, #148]	; (8003fd4 <sx127x_lora_init+0xd4>)
 8003f3e:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8003f40:	f641 2307 	movw	r3, #6663	; 0x1a07
 8003f44:	4925      	ldr	r1, [pc, #148]	; (8003fdc <sx127x_lora_init+0xdc>)
 8003f46:	f006 fac4 	bl	800a4d2 <__sx12xx_configure_pin>
	if (ret) {
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	b110      	cbz	r0, 8003f54 <sx127x_lora_init+0x54>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8003f4e:	4628      	mov	r0, r5
 8003f50:	b003      	add	sp, #12
 8003f52:	bd30      	pop	{r4, r5, pc}
 8003f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f002 ff25 	bl	8006da8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <sx127x_lora_init+0xd4>)
 8003f60:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003f62:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f013 0f01 	tst.w	r3, #1
 8003f6a:	d11d      	bne.n	8003fa8 <sx127x_lora_init+0xa8>
 8003f6c:	462b      	mov	r3, r5
	if (value != 0)	{
 8003f6e:	b1eb      	cbz	r3, 8003fac <sx127x_lora_init+0xac>
	const struct gpio_driver_api *api =
 8003f70:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2101      	movs	r1, #1
 8003f76:	4798      	blx	r3
 8003f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f002 ff13 	bl	8006da8 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8003f82:	2201      	movs	r2, #1
 8003f84:	f10d 0107 	add.w	r1, sp, #7
 8003f88:	2042      	movs	r0, #66	; 0x42
 8003f8a:	f006 fae3 	bl	800a554 <sx127x_read>
	if (ret < 0) {
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	db17      	blt.n	8003fc2 <sx127x_lora_init+0xc2>
	ret = sx127x_antenna_configure();
 8003f92:	f006 fad8 	bl	800a546 <sx127x_antenna_configure>
	if (ret < 0) {
 8003f96:	2800      	cmp	r0, #0
 8003f98:	db16      	blt.n	8003fc8 <sx127x_lora_init+0xc8>
	ret = sx12xx_init(dev);
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7ff fe66 	bl	8003c6c <sx12xx_init>
	if (ret < 0) {
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	dad4      	bge.n	8003f4e <sx127x_lora_init+0x4e>
		return ret;
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	e7d2      	b.n	8003f4e <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e7e0      	b.n	8003f6e <sx127x_lora_init+0x6e>
	const struct gpio_driver_api *api =
 8003fac:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4798      	blx	r3
 8003fb4:	e7e0      	b.n	8003f78 <sx127x_lora_init+0x78>
		return -EINVAL;
 8003fb6:	f06f 0515 	mvn.w	r5, #21
 8003fba:	e7c8      	b.n	8003f4e <sx127x_lora_init+0x4e>
		return -EIO;
 8003fbc:	f06f 0504 	mvn.w	r5, #4
 8003fc0:	e7c5      	b.n	8003f4e <sx127x_lora_init+0x4e>
		return -EIO;
 8003fc2:	f06f 0504 	mvn.w	r5, #4
 8003fc6:	e7c2      	b.n	8003f4e <sx127x_lora_init+0x4e>
		return -EIO;
 8003fc8:	f06f 0504 	mvn.w	r5, #4
 8003fcc:	e7bf      	b.n	8003f4e <sx127x_lora_init+0x4e>
 8003fce:	bf00      	nop
 8003fd0:	0800c2a4 	.word	0x0800c2a4
 8003fd4:	20000874 	.word	0x20000874
 8003fd8:	0007a120 	.word	0x0007a120
 8003fdc:	0800c1f8 	.word	0x0800c1f8
 8003fe0:	200008d8 	.word	0x200008d8

08003fe4 <SX1276GetDio1PinState>:
{
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <SX1276GetDio1PinState+0x34>)
 8003fea:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8003fec:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8003fee:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	a901      	add	r1, sp, #4
 8003ff4:	4798      	blx	r3
	if (ret == 0) {
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	b918      	cbnz	r0, 8004002 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	9a01      	ldr	r2, [sp, #4]
 8003ffe:	404a      	eors	r2, r1
 8004000:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8004002:	b913      	cbnz	r3, 800400a <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8004004:	9b01      	ldr	r3, [sp, #4]
 8004006:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc02      	bgt.n	8004014 <SX1276GetDio1PinState+0x30>
	return 0U;
 800400e:	2000      	movs	r0, #0
}
 8004010:	b002      	add	sp, #8
 8004012:	bd10      	pop	{r4, pc}
		return 1U;
 8004014:	2001      	movs	r0, #1
 8004016:	e7fb      	b.n	8004010 <SX1276GetDio1PinState+0x2c>
 8004018:	20000874 	.word	0x20000874

0800401c <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <TimerInsertTimer+0x28>)
 800401e:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8004020:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8004022:	e001      	b.n	8004028 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8004024:	461a      	mov	r2, r3
            next = next->Next;
 8004026:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8004028:	6951      	ldr	r1, [r2, #20]
 800402a:	b139      	cbz	r1, 800403c <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	f8d0 c000 	ldr.w	ip, [r0]
 8004032:	458c      	cmp	ip, r1
 8004034:	d8f6      	bhi.n	8004024 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8004036:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8004038:	6143      	str	r3, [r0, #20]
            return;
 800403a:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 800403c:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	6143      	str	r3, [r0, #20]
}
 8004042:	4770      	bx	lr
 8004044:	200008e4 	.word	0x200008e4

08004048 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <TimerExists+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 800404c:	e000      	b.n	8004050 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 800404e:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8004050:	b11b      	cbz	r3, 800405a <TimerExists+0x12>
        if( cur == obj )
 8004052:	4283      	cmp	r3, r0
 8004054:	d1fb      	bne.n	800404e <TimerExists+0x6>
            return true;
 8004056:	2001      	movs	r0, #1
    }
    return false;
}
 8004058:	4770      	bx	lr
    return false;
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	200008e4 	.word	0x200008e4

08004064 <TimerInsertNewHeadTimer>:
{
 8004064:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <TimerInsertNewHeadTimer+0x18>)
 8004068:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 800406a:	b10b      	cbz	r3, 8004070 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 800406c:	2200      	movs	r2, #0
 800406e:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8004070:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8004072:	4b02      	ldr	r3, [pc, #8]	; (800407c <TimerInsertNewHeadTimer+0x18>)
 8004074:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8004076:	f006 fada 	bl	800a62e <TimerSetTimeout>
}
 800407a:	bd08      	pop	{r3, pc}
 800407c:	200008e4 	.word	0x200008e4

08004080 <TimerStart>:
{
 8004080:	b510      	push	{r4, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8004086:	a801      	add	r0, sp, #4
 8004088:	f006 fa13 	bl	800a4b2 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800408c:	b1f4      	cbz	r4, 80040cc <TimerStart+0x4c>
 800408e:	4620      	mov	r0, r4
 8004090:	f7ff ffda 	bl	8004048 <TimerExists>
 8004094:	b9d0      	cbnz	r0, 80040cc <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 800409a:	2301      	movs	r3, #1
 800409c:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 800409e:	2300      	movs	r3, #0
 80040a0:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <TimerStart+0x68>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b1ab      	cbz	r3, 80040d4 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 80040a8:	f7ff fbce 	bl	8003848 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	4418      	add	r0, r3
 80040b0:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <TimerStart+0x68>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4298      	cmp	r0, r3
 80040ba:	d211      	bcs.n	80040e0 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 80040bc:	4620      	mov	r0, r4
 80040be:	f7ff ffd1 	bl	8004064 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 80040c2:	a801      	add	r0, sp, #4
 80040c4:	f006 f9ff 	bl	800a4c6 <BoardCriticalSectionEnd>
}
 80040c8:	b002      	add	sp, #8
 80040ca:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 80040cc:	a801      	add	r0, sp, #4
 80040ce:	f006 f9fa 	bl	800a4c6 <BoardCriticalSectionEnd>
        return;
 80040d2:	e7f9      	b.n	80040c8 <TimerStart+0x48>
        RtcSetTimerContext( );
 80040d4:	f7ff fbe4 	bl	80038a0 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff ffc3 	bl	8004064 <TimerInsertNewHeadTimer>
 80040de:	e7f0      	b.n	80040c2 <TimerStart+0x42>
            TimerInsertTimer( obj );
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff ff9b 	bl	800401c <TimerInsertTimer>
 80040e6:	e7ec      	b.n	80040c2 <TimerStart+0x42>
 80040e8:	200008e4 	.word	0x200008e4

080040ec <TimerIrqHandler>:
{
 80040ec:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80040ee:	f7ff fbe3 	bl	80038b8 <RtcGetTimerContext>
 80040f2:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 80040f4:	f7ff fbd4 	bl	80038a0 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 80040f8:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 80040fc:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <TimerIrqHandler+0x84>)
 80040fe:	681e      	ldr	r6, [r3, #0]
 8004100:	b16e      	cbz	r6, 800411e <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8004102:	4632      	mov	r2, r6
 8004104:	e002      	b.n	800410c <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8004106:	2100      	movs	r1, #0
 8004108:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800410a:	6952      	ldr	r2, [r2, #20]
 800410c:	6953      	ldr	r3, [r2, #20]
 800410e:	b133      	cbz	r3, 800411e <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	4561      	cmp	r1, ip
 8004114:	d9f7      	bls.n	8004106 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8004116:	1a2c      	subs	r4, r5, r0
 8004118:	4421      	add	r1, r4
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	e7f5      	b.n	800410a <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 800411e:	b146      	cbz	r6, 8004132 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8004120:	6972      	ldr	r2, [r6, #20]
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <TimerIrqHandler+0x84>)
 8004124:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8004126:	2300      	movs	r3, #0
 8004128:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800412a:	68f3      	ldr	r3, [r6, #12]
 800412c:	b1a3      	cbz	r3, 8004158 <TimerIrqHandler+0x6c>
 800412e:	6930      	ldr	r0, [r6, #16]
 8004130:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <TimerIrqHandler+0x84>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	b18b      	cbz	r3, 800415c <TimerIrqHandler+0x70>
 8004138:	681c      	ldr	r4, [r3, #0]
 800413a:	f7ff fb85 	bl	8003848 <RtcGetTimerElapsedTime>
 800413e:	4284      	cmp	r4, r0
 8004140:	d20c      	bcs.n	800415c <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8004142:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <TimerIrqHandler+0x84>)
 8004144:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8004146:	6959      	ldr	r1, [r3, #20]
 8004148:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 800414a:	2200      	movs	r2, #0
 800414c:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	b11a      	cbz	r2, 800415a <TimerIrqHandler+0x6e>
 8004152:	6918      	ldr	r0, [r3, #16]
 8004154:	4790      	blx	r2
 8004156:	e7ec      	b.n	8004132 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8004158:	e7fe      	b.n	8004158 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 800415a:	e7fe      	b.n	800415a <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <TimerIrqHandler+0x84>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	b108      	cbz	r0, 8004166 <TimerIrqHandler+0x7a>
 8004162:	7a43      	ldrb	r3, [r0, #9]
 8004164:	b103      	cbz	r3, 8004168 <TimerIrqHandler+0x7c>
}
 8004166:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8004168:	f006 fa61 	bl	800a62e <TimerSetTimeout>
}
 800416c:	e7fb      	b.n	8004166 <TimerIrqHandler+0x7a>
 800416e:	bf00      	nop
 8004170:	200008e4 	.word	0x200008e4

08004174 <TimerStop>:
{
 8004174:	b510      	push	{r4, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 800417a:	a801      	add	r0, sp, #4
 800417c:	f006 f999 	bl	800a4b2 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <TimerStop+0x7c>)
 8004182:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8004184:	b15a      	cbz	r2, 800419e <TimerStop+0x2a>
 8004186:	b154      	cbz	r4, 800419e <TimerStop+0x2a>
    obj->IsStarted = false;
 8004188:	2300      	movs	r3, #0
 800418a:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 800418c:	42a2      	cmp	r2, r4
 800418e:	d00a      	beq.n	80041a6 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8004190:	4613      	mov	r3, r2
        while( cur != NULL )
 8004192:	b32b      	cbz	r3, 80041e0 <TimerStop+0x6c>
            if( cur == obj )
 8004194:	42a3      	cmp	r3, r4
 8004196:	d020      	beq.n	80041da <TimerStop+0x66>
                prev = cur;
 8004198:	461a      	mov	r2, r3
                cur = cur->Next;
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	e7f9      	b.n	8004192 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800419e:	a801      	add	r0, sp, #4
 80041a0:	f006 f991 	bl	800a4c6 <BoardCriticalSectionEnd>
        return;
 80041a4:	e01f      	b.n	80041e6 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 80041a6:	7a53      	ldrb	r3, [r2, #9]
 80041a8:	b173      	cbz	r3, 80041c8 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 80041aa:	2300      	movs	r3, #0
 80041ac:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 80041ae:	6950      	ldr	r0, [r2, #20]
 80041b0:	b120      	cbz	r0, 80041bc <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <TimerStop+0x7c>)
 80041b4:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 80041b6:	f006 fa3a 	bl	800a62e <TimerSetTimeout>
 80041ba:	e011      	b.n	80041e0 <TimerStop+0x6c>
                RtcStopAlarm( );
 80041bc:	f7ff fb52 	bl	8003864 <RtcStopAlarm>
                TimerListHead = NULL;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <TimerStop+0x7c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00b      	b.n	80041e0 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 80041c8:	6953      	ldr	r3, [r2, #20]
 80041ca:	b113      	cbz	r3, 80041d2 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <TimerStop+0x7c>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e006      	b.n	80041e0 <TimerStop+0x6c>
                TimerListHead = NULL;
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <TimerStop+0x7c>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e002      	b.n	80041e0 <TimerStop+0x6c>
                if( cur->Next != NULL )
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	b12b      	cbz	r3, 80041ea <TimerStop+0x76>
                    prev->Next = cur;
 80041de:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 80041e0:	a801      	add	r0, sp, #4
 80041e2:	f006 f970 	bl	800a4c6 <BoardCriticalSectionEnd>
}
 80041e6:	b002      	add	sp, #8
 80041e8:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 80041ea:	2300      	movs	r3, #0
 80041ec:	6153      	str	r3, [r2, #20]
 80041ee:	e7f7      	b.n	80041e0 <TimerStop+0x6c>
 80041f0:	200008e4 	.word	0x200008e4

080041f4 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 80041f4:	4908      	ldr	r1, [pc, #32]	; (8004218 <SX1276ConvertFreqInHzToPllStep+0x24>)
 80041f6:	fba1 3200 	umull	r3, r2, r1, r0
 80041fa:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80041fc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004200:	fb03 0012 	mls	r0, r3, r2, r0
 8004204:	f641 6384 	movw	r3, #7812	; 0x1e84
 8004208:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800420c:	fba1 1303 	umull	r1, r3, r1, r3
 8004210:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8004212:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8004216:	4770      	bx	lr
 8004218:	431bde83 	.word	0x431bde83

0800421c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800421c:	2300      	movs	r3, #0
 800421e:	e008      	b.n	8004232 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8004220:	e7fe      	b.n	8004220 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <GetFskBandwidthRegValue+0x4c>)
 8004224:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004228:	7908      	ldrb	r0, [r1, #4]
}
 800422a:	bc10      	pop	{r4}
 800422c:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800422e:	3301      	adds	r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b14      	cmp	r3, #20
 8004234:	d817      	bhi.n	8004266 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004236:	4619      	mov	r1, r3
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <GetFskBandwidthRegValue+0x4c>)
 800423a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800423e:	4282      	cmp	r2, r0
 8004240:	d8f5      	bhi.n	800422e <GetFskBandwidthRegValue+0x12>
{
 8004242:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	4c08      	ldr	r4, [pc, #32]	; (8004268 <GetFskBandwidthRegValue+0x4c>)
 8004248:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 800424c:	4282      	cmp	r2, r0
 800424e:	d8e8      	bhi.n	8004222 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004250:	3301      	adds	r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b14      	cmp	r3, #20
 8004256:	d8e3      	bhi.n	8004220 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004258:	4619      	mov	r1, r3
 800425a:	4a03      	ldr	r2, [pc, #12]	; (8004268 <GetFskBandwidthRegValue+0x4c>)
 800425c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004260:	4282      	cmp	r2, r0
 8004262:	d8f5      	bhi.n	8004250 <GetFskBandwidthRegValue+0x34>
 8004264:	e7ee      	b.n	8004244 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8004266:	e7fe      	b.n	8004266 <GetFskBandwidthRegValue+0x4a>
 8004268:	0800c38c 	.word	0x0800c38c

0800426c <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800426c:	2801      	cmp	r0, #1
 800426e:	d006      	beq.n	800427e <SX1276GetLoRaBandwidthInHz+0x12>
 8004270:	2802      	cmp	r0, #2
 8004272:	d006      	beq.n	8004282 <SX1276GetLoRaBandwidthInHz+0x16>
 8004274:	b108      	cbz	r0, 800427a <SX1276GetLoRaBandwidthInHz+0xe>
 8004276:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8004278:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 800427a:	4803      	ldr	r0, [pc, #12]	; (8004288 <SX1276GetLoRaBandwidthInHz+0x1c>)
 800427c:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800427e:	4803      	ldr	r0, [pc, #12]	; (800428c <SX1276GetLoRaBandwidthInHz+0x20>)
 8004280:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8004282:	4803      	ldr	r0, [pc, #12]	; (8004290 <SX1276GetLoRaBandwidthInHz+0x24>)
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	0001e848 	.word	0x0001e848
 800428c:	0003d090 	.word	0x0003d090
 8004290:	0007a120 	.word	0x0007a120

08004294 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <SX1276OnDio4Irq+0x1c>)
 8004296:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800429a:	b93b      	cbnz	r3, 80042ac <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800429c:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <SX1276OnDio4Irq+0x1c>)
 800429e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80042a2:	b91b      	cbnz	r3, 80042ac <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80042a4:	4b02      	ldr	r3, [pc, #8]	; (80042b0 <SX1276OnDio4Irq+0x1c>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000a1c 	.word	0x20000a1c

080042b4 <SX1276GetStatus>:
}
 80042b4:	4b01      	ldr	r3, [pc, #4]	; (80042bc <SX1276GetStatus+0x8>)
 80042b6:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 80042ba:	4770      	bx	lr
 80042bc:	20000a1c 	.word	0x20000a1c

080042c0 <SX1276SetChannel>:
{
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 80042c4:	f7ff ff96 	bl	80041f4 <SX1276ConvertFreqInHzToPllStep>
 80042c8:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <SX1276SetChannel+0x30>)
 80042cc:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80042d0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80042d4:	2006      	movs	r0, #6
 80042d6:	f006 faa1 	bl	800a81c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80042da:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80042de:	2007      	movs	r0, #7
 80042e0:	f006 fa9c 	bl	800a81c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80042e4:	b2e1      	uxtb	r1, r4
 80042e6:	2008      	movs	r0, #8
 80042e8:	f006 fa98 	bl	800a81c <SX1276Write>
}
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	bf00      	nop
 80042f0:	20000a1c 	.word	0x20000a1c

080042f4 <SX1276OnDio3Irq>:
{
 80042f4:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <SX1276OnDio3Irq+0x54>)
 80042f8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d000      	beq.n	8004302 <SX1276OnDio3Irq+0xe>
}
 8004300:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004302:	2012      	movs	r0, #18
 8004304:	f006 fa96 	bl	800a834 <SX1276Read>
 8004308:	f010 0f01 	tst.w	r0, #1
 800430c:	d00d      	beq.n	800432a <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800430e:	2105      	movs	r1, #5
 8004310:	2012      	movs	r0, #18
 8004312:	f006 fa83 	bl	800a81c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <SX1276OnDio3Irq+0x58>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <SX1276OnDio3Irq+0xc>
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ed      	beq.n	8004300 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8004324:	2001      	movs	r0, #1
 8004326:	4798      	blx	r3
 8004328:	e7ea      	b.n	8004300 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800432a:	2104      	movs	r1, #4
 800432c:	2012      	movs	r0, #18
 800432e:	f006 fa75 	bl	800a81c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <SX1276OnDio3Irq+0x58>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0e2      	beq.n	8004300 <SX1276OnDio3Irq+0xc>
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0df      	beq.n	8004300 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8004340:	2000      	movs	r0, #0
 8004342:	4798      	blx	r3
}
 8004344:	e7dc      	b.n	8004300 <SX1276OnDio3Irq+0xc>
 8004346:	bf00      	nop
 8004348:	20000a1c 	.word	0x20000a1c
 800434c:	200008e8 	.word	0x200008e8

08004350 <SX1276OnDio2Irq>:
{
 8004350:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8004352:	4b3a      	ldr	r3, [pc, #232]	; (800443c <SX1276OnDio2Irq+0xec>)
 8004354:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <SX1276OnDio2Irq+0x12>
 800435c:	2b02      	cmp	r3, #2
 800435e:	d051      	beq.n	8004404 <SX1276OnDio2Irq+0xb4>
}
 8004360:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <SX1276OnDio2Irq+0xec>)
 8004364:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004368:	b1c3      	cbz	r3, 800439c <SX1276OnDio2Irq+0x4c>
 800436a:	2b01      	cmp	r3, #1
 800436c:	d1f8      	bne.n	8004360 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800436e:	4b33      	ldr	r3, [pc, #204]	; (800443c <SX1276OnDio2Irq+0xec>)
 8004370:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f3      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004378:	2102      	movs	r1, #2
 800437a:	2012      	movs	r0, #18
 800437c:	f006 fa4e 	bl	800a81c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004380:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <SX1276OnDio2Irq+0xf0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0eb      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
 8004388:	695c      	ldr	r4, [r3, #20]
 800438a:	2c00      	cmp	r4, #0
 800438c:	d0e8      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800438e:	201c      	movs	r0, #28
 8004390:	f006 fa50 	bl	800a834 <SX1276Read>
 8004394:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004398:	47a0      	blx	r4
 800439a:	e7e1      	b.n	8004360 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <SX1276OnDio2Irq+0xec>)
 800439e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a0:	b35b      	cbz	r3, 80043fa <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <SX1276OnDio2Irq+0xec>)
 80043a4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0d9      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <SX1276OnDio2Irq+0xec>)
 80043ae:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1d4      	bne.n	8004360 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 80043b6:	4823      	ldr	r0, [pc, #140]	; (8004444 <SX1276OnDio2Irq+0xf4>)
 80043b8:	f7ff fedc 	bl	8004174 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80043bc:	4c1f      	ldr	r4, [pc, #124]	; (800443c <SX1276OnDio2Irq+0xec>)
 80043be:	2301      	movs	r3, #1
 80043c0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80043c4:	2011      	movs	r0, #17
 80043c6:	f006 fa35 	bl	800a834 <SX1276Read>
 80043ca:	0843      	lsrs	r3, r0, #1
 80043cc:	425b      	negs	r3, r3
 80043ce:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80043d2:	201b      	movs	r0, #27
 80043d4:	f006 fa2e 	bl	800a834 <SX1276Read>
 80043d8:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80043da:	201c      	movs	r0, #28
 80043dc:	f006 fa2a 	bl	800a834 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80043e0:	4328      	orrs	r0, r5
 80043e2:	f006 f96e 	bl	800a6c2 <SX1276ConvertPllStepToFreqInHz>
 80043e6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80043ea:	200c      	movs	r0, #12
 80043ec:	f006 fa22 	bl	800a834 <SX1276Read>
 80043f0:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80043f4:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 80043f8:	e7b2      	b.n	8004360 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <SX1276OnDio2Irq+0xec>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004402:	e7ce      	b.n	80043a2 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <SX1276OnDio2Irq+0xec>)
 8004406:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d1a8      	bne.n	8004360 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <SX1276OnDio2Irq+0xec>)
 8004410:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0a3      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004418:	2102      	movs	r1, #2
 800441a:	2012      	movs	r0, #18
 800441c:	f006 f9fe 	bl	800a81c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <SX1276OnDio2Irq+0xf0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d09b      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
 8004428:	695c      	ldr	r4, [r3, #20]
 800442a:	2c00      	cmp	r4, #0
 800442c:	d098      	beq.n	8004360 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800442e:	201c      	movs	r0, #28
 8004430:	f006 fa00 	bl	800a834 <SX1276Read>
 8004434:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004438:	47a0      	blx	r4
}
 800443a:	e791      	b.n	8004360 <SX1276OnDio2Irq+0x10>
 800443c:	20000a1c 	.word	0x20000a1c
 8004440:	200008e8 	.word	0x200008e8
 8004444:	200008ec 	.word	0x200008ec

08004448 <SX1276OnDio1Irq>:
{
 8004448:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 800444a:	4b4c      	ldr	r3, [pc, #304]	; (800457c <SX1276OnDio1Irq+0x134>)
 800444c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <SX1276OnDio1Irq+0x12>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d063      	beq.n	8004520 <SX1276OnDio1Irq+0xd8>
}
 8004458:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 800445a:	4b48      	ldr	r3, [pc, #288]	; (800457c <SX1276OnDio1Irq+0x134>)
 800445c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004460:	b1cb      	cbz	r3, 8004496 <SX1276OnDio1Irq+0x4e>
 8004462:	2b01      	cmp	r3, #1
 8004464:	d1f8      	bne.n	8004458 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8004466:	f7ff fdbd 	bl	8003fe4 <SX1276GetDio1PinState>
 800446a:	2800      	cmp	r0, #0
 800446c:	d0f4      	beq.n	8004458 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 800446e:	4844      	ldr	r0, [pc, #272]	; (8004580 <SX1276OnDio1Irq+0x138>)
 8004470:	f7ff fe80 	bl	8004174 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	2012      	movs	r0, #18
 8004478:	f006 f9d0 	bl	800a81c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800447c:	4b3f      	ldr	r3, [pc, #252]	; (800457c <SX1276OnDio1Irq+0x134>)
 800447e:	2200      	movs	r2, #0
 8004480:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <SX1276OnDio1Irq+0x13c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0e5      	beq.n	8004458 <SX1276OnDio1Irq+0x10>
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0e2      	beq.n	8004458 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 8004492:	4798      	blx	r3
 8004494:	e7e0      	b.n	8004458 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8004496:	f7ff fda5 	bl	8003fe4 <SX1276GetDio1PinState>
 800449a:	2800      	cmp	r0, #0
 800449c:	d0dc      	beq.n	8004458 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 800449e:	483a      	ldr	r0, [pc, #232]	; (8004588 <SX1276OnDio1Irq+0x140>)
 80044a0:	f7ff fe68 	bl	8004174 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80044a4:	4b35      	ldr	r3, [pc, #212]	; (800457c <SX1276OnDio1Irq+0x134>)
 80044a6:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 80044aa:	b95b      	cbnz	r3, 80044c4 <SX1276OnDio1Irq+0x7c>
 80044ac:	4b33      	ldr	r3, [pc, #204]	; (800457c <SX1276OnDio1Irq+0x134>)
 80044ae:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80044b2:	b93b      	cbnz	r3, 80044c4 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80044b4:	4b31      	ldr	r3, [pc, #196]	; (800457c <SX1276OnDio1Irq+0x134>)
 80044b6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80044ba:	b9f3      	cbnz	r3, 80044fa <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80044bc:	2101      	movs	r1, #1
 80044be:	4833      	ldr	r0, [pc, #204]	; (800458c <SX1276OnDio1Irq+0x144>)
 80044c0:	f006 f96c 	bl	800a79c <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80044c4:	4b2d      	ldr	r3, [pc, #180]	; (800457c <SX1276OnDio1Irq+0x134>)
 80044c6:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80044ca:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80044ce:	1a88      	subs	r0, r1, r2
 80044d0:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80044d4:	4298      	cmp	r0, r3
 80044d6:	db17      	blt.n	8004508 <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	1e59      	subs	r1, r3, #1
 80044dc:	b2c9      	uxtb	r1, r1
 80044de:	482c      	ldr	r0, [pc, #176]	; (8004590 <SX1276OnDio1Irq+0x148>)
 80044e0:	4410      	add	r0, r2
 80044e2:	f006 f95b 	bl	800a79c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 80044e6:	4a25      	ldr	r2, [pc, #148]	; (800457c <SX1276OnDio1Irq+0x134>)
 80044e8:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 80044ec:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 80044f0:	440b      	add	r3, r1
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 80044f8:	e7ae      	b.n	8004458 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80044fa:	2032      	movs	r0, #50	; 0x32
 80044fc:	f006 f99a 	bl	800a834 <SX1276Read>
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004502:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8004506:	e7dd      	b.n	80044c4 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004508:	1a89      	subs	r1, r1, r2
 800450a:	b2c9      	uxtb	r1, r1
 800450c:	4820      	ldr	r0, [pc, #128]	; (8004590 <SX1276OnDio1Irq+0x148>)
 800450e:	4410      	add	r0, r2
 8004510:	f006 f944 	bl	800a79c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004516:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 800451a:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 800451e:	e79b      	b.n	8004458 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 8004520:	4b16      	ldr	r3, [pc, #88]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004522:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d196      	bne.n	8004458 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 800452a:	f7ff fd5b 	bl	8003fe4 <SX1276GetDio1PinState>
 800452e:	2801      	cmp	r0, #1
 8004530:	d092      	beq.n	8004458 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004534:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8004538:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800453c:	eba0 0c02 	sub.w	ip, r0, r2
 8004540:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8004544:	458c      	cmp	ip, r1
 8004546:	dd0c      	ble.n	8004562 <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8004548:	4811      	ldr	r0, [pc, #68]	; (8004590 <SX1276OnDio1Irq+0x148>)
 800454a:	4410      	add	r0, r2
 800454c:	f006 f92d 	bl	800a7aa <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004552:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8004556:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 800455a:	440a      	add	r2, r1
 800455c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8004560:	e77a      	b.n	8004458 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004562:	1a81      	subs	r1, r0, r2
 8004564:	b2c9      	uxtb	r1, r1
 8004566:	480a      	ldr	r0, [pc, #40]	; (8004590 <SX1276OnDio1Irq+0x148>)
 8004568:	4410      	add	r0, r2
 800456a:	f006 f91e 	bl	800a7aa <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800456e:	4b03      	ldr	r3, [pc, #12]	; (800457c <SX1276OnDio1Irq+0x134>)
 8004570:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8004574:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8004578:	e76e      	b.n	8004458 <SX1276OnDio1Irq+0x10>
 800457a:	bf00      	nop
 800457c:	20000a1c 	.word	0x20000a1c
 8004580:	20000904 	.word	0x20000904
 8004584:	200008e8 	.word	0x200008e8
 8004588:	200008ec 	.word	0x200008ec
 800458c:	20000b32 	.word	0x20000b32
 8004590:	2000091c 	.word	0x2000091c

08004594 <SX1276OnDio0Irq>:
{
 8004594:	b510      	push	{r4, lr}
 8004596:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 800459e:	4bb0      	ldr	r3, [pc, #704]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80045a0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d004      	beq.n	80045b2 <SX1276OnDio0Irq+0x1e>
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	f000 813c 	beq.w	8004826 <SX1276OnDio0Irq+0x292>
}
 80045ae:	b002      	add	sp, #8
 80045b0:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 80045b2:	4bab      	ldr	r3, [pc, #684]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80045b4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80045b8:	b343      	cbz	r3, 800460c <SX1276OnDio0Irq+0x78>
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d1f7      	bne.n	80045ae <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	2012      	movs	r0, #18
 80045c2:	f006 f92b 	bl	800a81c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80045c6:	2012      	movs	r0, #18
 80045c8:	f006 f934 	bl	800a834 <SX1276Read>
 80045cc:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80045d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045d4:	f013 0f20 	tst.w	r3, #32
 80045d8:	f000 80bd 	beq.w	8004756 <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80045dc:	2120      	movs	r1, #32
 80045de:	2012      	movs	r0, #18
 80045e0:	f006 f91c 	bl	800a81c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80045e4:	4b9e      	ldr	r3, [pc, #632]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80045e6:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80045ea:	b91b      	cbnz	r3, 80045f4 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 80045ec:	4b9c      	ldr	r3, [pc, #624]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 80045f4:	489b      	ldr	r0, [pc, #620]	; (8004864 <SX1276OnDio0Irq+0x2d0>)
 80045f6:	f7ff fdbd 	bl	8004174 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80045fa:	4b9b      	ldr	r3, [pc, #620]	; (8004868 <SX1276OnDio0Irq+0x2d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0d5      	beq.n	80045ae <SX1276OnDio0Irq+0x1a>
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0d2      	beq.n	80045ae <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 8004608:	4798      	blx	r3
 800460a:	e7d0      	b.n	80045ae <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800460c:	4b94      	ldr	r3, [pc, #592]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800460e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004612:	bb0b      	cbnz	r3, 8004658 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004614:	4b92      	ldr	r3, [pc, #584]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004616:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800461a:	2900      	cmp	r1, #0
 800461c:	d15e      	bne.n	80046dc <SX1276OnDio0Irq+0x148>
 800461e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8004622:	2b00      	cmp	r3, #0
 8004624:	d15a      	bne.n	80046dc <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004626:	4b8e      	ldr	r3, [pc, #568]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004628:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800462c:	2b00      	cmp	r3, #0
 800462e:	d14e      	bne.n	80046ce <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004630:	2101      	movs	r1, #1
 8004632:	488e      	ldr	r0, [pc, #568]	; (800486c <SX1276OnDio0Irq+0x2d8>)
 8004634:	f006 f8b2 	bl	800a79c <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004638:	4c89      	ldr	r4, [pc, #548]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800463a:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800463e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8004642:	1ac9      	subs	r1, r1, r3
 8004644:	b2c9      	uxtb	r1, r1
 8004646:	488a      	ldr	r0, [pc, #552]	; (8004870 <SX1276OnDio0Irq+0x2dc>)
 8004648:	4418      	add	r0, r3
 800464a:	f006 f8a7 	bl	800a79c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800464e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8004652:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8004656:	e04e      	b.n	80046f6 <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8004658:	203f      	movs	r0, #63	; 0x3f
 800465a:	f006 f8eb 	bl	800a834 <SX1276Read>
 800465e:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8004662:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004666:	f013 0f02 	tst.w	r3, #2
 800466a:	d1d3      	bne.n	8004614 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800466c:	210b      	movs	r1, #11
 800466e:	203e      	movs	r0, #62	; 0x3e
 8004670:	f006 f8d4 	bl	800a81c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004674:	2110      	movs	r1, #16
 8004676:	203f      	movs	r0, #63	; 0x3f
 8004678:	f006 f8d0 	bl	800a81c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800467c:	4879      	ldr	r0, [pc, #484]	; (8004864 <SX1276OnDio0Irq+0x2d0>)
 800467e:	f7ff fd79 	bl	8004174 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8004682:	4b77      	ldr	r3, [pc, #476]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004684:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8004688:	b9bb      	cbnz	r3, 80046ba <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 800468a:	487a      	ldr	r0, [pc, #488]	; (8004874 <SX1276OnDio0Irq+0x2e0>)
 800468c:	f7ff fd72 	bl	8004174 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8004690:	4b73      	ldr	r3, [pc, #460]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004692:	2200      	movs	r2, #0
 8004694:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004698:	4b73      	ldr	r3, [pc, #460]	; (8004868 <SX1276OnDio0Irq+0x2d4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b113      	cbz	r3, 80046a4 <SX1276OnDio0Irq+0x110>
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	b103      	cbz	r3, 80046a4 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 80046a2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80046a4:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80046ac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80046b0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80046b4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 80046b8:	e779      	b.n	80045ae <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80046ba:	200d      	movs	r0, #13
 80046bc:	f006 f8ba 	bl	800a834 <SX1276Read>
 80046c0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80046c4:	b2c9      	uxtb	r1, r1
 80046c6:	200d      	movs	r0, #13
 80046c8:	f006 f8a8 	bl	800a81c <SX1276Write>
 80046cc:	e7e4      	b.n	8004698 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80046ce:	2032      	movs	r0, #50	; 0x32
 80046d0:	f006 f8b0 	bl	800a834 <SX1276Read>
 80046d4:	4b62      	ldr	r3, [pc, #392]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80046d6:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80046da:	e7ad      	b.n	8004638 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80046dc:	4c60      	ldr	r4, [pc, #384]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80046de:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80046e2:	1ac9      	subs	r1, r1, r3
 80046e4:	b2c9      	uxtb	r1, r1
 80046e6:	4862      	ldr	r0, [pc, #392]	; (8004870 <SX1276OnDio0Irq+0x2dc>)
 80046e8:	4418      	add	r0, r3
 80046ea:	f006 f857 	bl	800a79c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80046ee:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80046f2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 80046f6:	485b      	ldr	r0, [pc, #364]	; (8004864 <SX1276OnDio0Irq+0x2d0>)
 80046f8:	f7ff fd3c 	bl	8004174 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80046fc:	4b58      	ldr	r3, [pc, #352]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80046fe:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8004702:	b9f3      	cbnz	r3, 8004742 <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 8004704:	4b56      	ldr	r3, [pc, #344]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 800470c:	4859      	ldr	r0, [pc, #356]	; (8004874 <SX1276OnDio0Irq+0x2e0>)
 800470e:	f7ff fd31 	bl	8004174 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004712:	4b55      	ldr	r3, [pc, #340]	; (8004868 <SX1276OnDio0Irq+0x2d4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b14b      	cbz	r3, 800472c <SX1276OnDio0Irq+0x198>
 8004718:	689c      	ldr	r4, [r3, #8]
 800471a:	b13c      	cbz	r4, 800472c <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800471c:	4950      	ldr	r1, [pc, #320]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800471e:	2300      	movs	r3, #0
 8004720:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 8004724:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 8004728:	4851      	ldr	r0, [pc, #324]	; (8004870 <SX1276OnDio0Irq+0x2dc>)
 800472a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800472c:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800472e:	2200      	movs	r2, #0
 8004730:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004734:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004738:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 800473c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 8004740:	e735      	b.n	80045ae <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004742:	200d      	movs	r0, #13
 8004744:	f006 f876 	bl	800a834 <SX1276Read>
 8004748:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800474c:	b2c9      	uxtb	r1, r1
 800474e:	200d      	movs	r0, #13
 8004750:	f006 f864 	bl	800a81c <SX1276Write>
 8004754:	e7dd      	b.n	8004712 <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8004756:	2019      	movs	r0, #25
 8004758:	f006 f86c 	bl	800a834 <SX1276Read>
 800475c:	b243      	sxtb	r3, r0
 800475e:	3302      	adds	r3, #2
 8004760:	109b      	asrs	r3, r3, #2
 8004762:	4c3f      	ldr	r4, [pc, #252]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004764:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004768:	201a      	movs	r0, #26
 800476a:	f006 f863 	bl	800a834 <SX1276Read>
 800476e:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8004770:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 8004774:	2b00      	cmp	r3, #0
 8004776:	db39      	blt.n	80047ec <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004778:	4b39      	ldr	r3, [pc, #228]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800477a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <SX1276OnDio0Irq+0x2e4>)
 8004780:	429a      	cmp	r2, r3
 8004782:	d949      	bls.n	8004818 <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004784:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8004788:	389d      	subs	r0, #157	; 0x9d
 800478a:	4b35      	ldr	r3, [pc, #212]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800478c:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8004790:	2013      	movs	r0, #19
 8004792:	f006 f84f 	bl	800a834 <SX1276Read>
 8004796:	4c32      	ldr	r4, [pc, #200]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004798:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800479c:	2010      	movs	r0, #16
 800479e:	f006 f849 	bl	800a834 <SX1276Read>
 80047a2:	4601      	mov	r1, r0
 80047a4:	200d      	movs	r0, #13
 80047a6:	f006 f839 	bl	800a81c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80047aa:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 80047ae:	4830      	ldr	r0, [pc, #192]	; (8004870 <SX1276OnDio0Irq+0x2dc>)
 80047b0:	f005 fff4 	bl	800a79c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80047b4:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80047b8:	b913      	cbnz	r3, 80047c0 <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 80047ba:	2200      	movs	r2, #0
 80047bc:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 80047c0:	4828      	ldr	r0, [pc, #160]	; (8004864 <SX1276OnDio0Irq+0x2d0>)
 80047c2:	f7ff fcd7 	bl	8004174 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80047c6:	4b28      	ldr	r3, [pc, #160]	; (8004868 <SX1276OnDio0Irq+0x2d4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f43f aeef 	beq.w	80045ae <SX1276OnDio0Irq+0x1a>
 80047d0:	689c      	ldr	r4, [r3, #8]
 80047d2:	2c00      	cmp	r4, #0
 80047d4:	f43f aeeb 	beq.w	80045ae <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80047d8:	4921      	ldr	r1, [pc, #132]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 80047da:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 80047de:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 80047e2:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 80047e6:	4822      	ldr	r0, [pc, #136]	; (8004870 <SX1276OnDio0Irq+0x2dc>)
 80047e8:	47a0      	blx	r4
 80047ea:	e6e0      	b.n	80045ae <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80047ec:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <SX1276OnDio0Irq+0x2e4>)
 80047f2:	4291      	cmp	r1, r2
 80047f4:	d907      	bls.n	8004806 <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80047f6:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80047fa:	fa03 f380 	sxtah	r3, r3, r0
 80047fe:	3b9d      	subs	r3, #157	; 0x9d
 8004800:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 8004804:	e7c4      	b.n	8004790 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8004806:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800480a:	fa03 f380 	sxtah	r3, r3, r0
 800480e:	3ba4      	subs	r3, #164	; 0xa4
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004812:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8004816:	e7bb      	b.n	8004790 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004818:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800481c:	38a4      	subs	r0, #164	; 0xa4
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004820:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8004824:	e7b4      	b.n	8004790 <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 8004826:	4815      	ldr	r0, [pc, #84]	; (800487c <SX1276OnDio0Irq+0x2e8>)
 8004828:	f7ff fca4 	bl	8004174 <TimerStop>
            switch( SX1276.Settings.Modem )
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 800482e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d00e      	beq.n	8004854 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <SX1276OnDio0Irq+0x2cc>)
 8004838:	2200      	movs	r2, #0
 800483a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <SX1276OnDio0Irq+0x2d4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f43f aeb3 	beq.w	80045ae <SX1276OnDio0Irq+0x1a>
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f43f aeaf 	beq.w	80045ae <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 8004850:	4798      	blx	r3
}
 8004852:	e6ac      	b.n	80045ae <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004854:	2108      	movs	r1, #8
 8004856:	2012      	movs	r0, #18
 8004858:	f005 ffe0 	bl	800a81c <SX1276Write>
 800485c:	e7eb      	b.n	8004836 <SX1276OnDio0Irq+0x2a2>
 800485e:	bf00      	nop
 8004860:	20000a1c 	.word	0x20000a1c
 8004864:	20000904 	.word	0x20000904
 8004868:	200008e8 	.word	0x200008e8
 800486c:	20000b32 	.word	0x20000b32
 8004870:	2000091c 	.word	0x2000091c
 8004874:	200008ec 	.word	0x200008ec
 8004878:	1f4add40 	.word	0x1f4add40
 800487c:	20000b60 	.word	0x20000b60

08004880 <RxChainCalibration>:
{
 8004880:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8004882:	2009      	movs	r0, #9
 8004884:	f005 ffd6 	bl	800a834 <SX1276Read>
 8004888:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800488a:	2006      	movs	r0, #6
 800488c:	f005 ffd2 	bl	800a834 <SX1276Read>
 8004890:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8004892:	2007      	movs	r0, #7
 8004894:	f005 ffce 	bl	800a834 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004898:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800489c:	2008      	movs	r0, #8
 800489e:	f005 ffc9 	bl	800a834 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80048a2:	4320      	orrs	r0, r4
 80048a4:	f005 ff0d 	bl	800a6c2 <SX1276ConvertPllStepToFreqInHz>
 80048a8:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80048aa:	2100      	movs	r1, #0
 80048ac:	2009      	movs	r0, #9
 80048ae:	f005 ffb5 	bl	800a81c <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80048b2:	203b      	movs	r0, #59	; 0x3b
 80048b4:	f005 ffbe 	bl	800a834 <SX1276Read>
 80048b8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80048bc:	b2c9      	uxtb	r1, r1
 80048be:	203b      	movs	r0, #59	; 0x3b
 80048c0:	f005 ffac 	bl	800a81c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80048c4:	203b      	movs	r0, #59	; 0x3b
 80048c6:	f005 ffb5 	bl	800a834 <SX1276Read>
 80048ca:	f010 0f20 	tst.w	r0, #32
 80048ce:	d1f9      	bne.n	80048c4 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 80048d0:	480c      	ldr	r0, [pc, #48]	; (8004904 <RxChainCalibration+0x84>)
 80048d2:	f7ff fcf5 	bl	80042c0 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80048d6:	203b      	movs	r0, #59	; 0x3b
 80048d8:	f005 ffac 	bl	800a834 <SX1276Read>
 80048dc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80048e0:	b2c9      	uxtb	r1, r1
 80048e2:	203b      	movs	r0, #59	; 0x3b
 80048e4:	f005 ff9a 	bl	800a81c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80048e8:	203b      	movs	r0, #59	; 0x3b
 80048ea:	f005 ffa3 	bl	800a834 <SX1276Read>
 80048ee:	f010 0f20 	tst.w	r0, #32
 80048f2:	d1f9      	bne.n	80048e8 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80048f4:	4629      	mov	r1, r5
 80048f6:	2009      	movs	r0, #9
 80048f8:	f005 ff90 	bl	800a81c <SX1276Write>
    SX1276SetChannel( initialFreq );
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7ff fcdf 	bl	80042c0 <SX1276SetChannel>
}
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	33bca100 	.word	0x33bca100

08004908 <SX1276SetSleep>:
{
 8004908:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 800490a:	480a      	ldr	r0, [pc, #40]	; (8004934 <SX1276SetSleep+0x2c>)
 800490c:	f7ff fc32 	bl	8004174 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8004910:	4809      	ldr	r0, [pc, #36]	; (8004938 <SX1276SetSleep+0x30>)
 8004912:	f7ff fc2f 	bl	8004174 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004916:	4809      	ldr	r0, [pc, #36]	; (800493c <SX1276SetSleep+0x34>)
 8004918:	f7ff fc2c 	bl	8004174 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800491c:	2000      	movs	r0, #0
 800491e:	f005 ff95 	bl	800a84c <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 8004922:	2000      	movs	r0, #0
 8004924:	f005 fe14 	bl	800a550 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <SX1276SetSleep+0x38>)
 800492a:	2200      	movs	r2, #0
 800492c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004930:	bd08      	pop	{r3, pc}
 8004932:	bf00      	nop
 8004934:	20000904 	.word	0x20000904
 8004938:	20000b60 	.word	0x20000b60
 800493c:	200008ec 	.word	0x200008ec
 8004940:	20000a1c 	.word	0x20000a1c

08004944 <SX1276SetStby>:
{
 8004944:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8004946:	4808      	ldr	r0, [pc, #32]	; (8004968 <SX1276SetStby+0x24>)
 8004948:	f7ff fc14 	bl	8004174 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800494c:	4807      	ldr	r0, [pc, #28]	; (800496c <SX1276SetStby+0x28>)
 800494e:	f7ff fc11 	bl	8004174 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <SX1276SetStby+0x2c>)
 8004954:	f7ff fc0e 	bl	8004174 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8004958:	2001      	movs	r0, #1
 800495a:	f005 ff77 	bl	800a84c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <SX1276SetStby+0x30>)
 8004960:	2200      	movs	r2, #0
 8004962:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004966:	bd08      	pop	{r3, pc}
 8004968:	20000904 	.word	0x20000904
 800496c:	20000b60 	.word	0x20000b60
 8004970:	200008ec 	.word	0x200008ec
 8004974:	20000a1c 	.word	0x20000a1c

08004978 <SX1276SetTx>:
{
 8004978:	b510      	push	{r4, lr}
 800497a:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 800497c:	4829      	ldr	r0, [pc, #164]	; (8004a24 <SX1276SetTx+0xac>)
 800497e:	f7ff fbf9 	bl	8004174 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8004982:	4621      	mov	r1, r4
 8004984:	4828      	ldr	r0, [pc, #160]	; (8004a28 <SX1276SetTx+0xb0>)
 8004986:	f005 fe71 	bl	800a66c <TimerSetValue>
    switch( SX1276.Settings.Modem )
 800498a:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <SX1276SetTx+0xb4>)
 800498c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004990:	b163      	cbz	r3, 80049ac <SX1276SetTx+0x34>
 8004992:	2b01      	cmp	r3, #1
 8004994:	d023      	beq.n	80049de <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8004996:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <SX1276SetTx+0xb4>)
 8004998:	2202      	movs	r2, #2
 800499a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800499e:	4822      	ldr	r0, [pc, #136]	; (8004a28 <SX1276SetTx+0xb0>)
 80049a0:	f7ff fb6e 	bl	8004080 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80049a4:	2003      	movs	r0, #3
 80049a6:	f005 ff51 	bl	800a84c <SX1276SetOpMode>
}
 80049aa:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80049ac:	2040      	movs	r0, #64	; 0x40
 80049ae:	f005 ff41 	bl	800a834 <SX1276Read>
 80049b2:	f000 0103 	and.w	r1, r0, #3
 80049b6:	2040      	movs	r0, #64	; 0x40
 80049b8:	f005 ff30 	bl	800a81c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80049bc:	2041      	movs	r0, #65	; 0x41
 80049be:	f005 ff39 	bl	800a834 <SX1276Read>
 80049c2:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 80049c6:	2041      	movs	r0, #65	; 0x41
 80049c8:	f005 ff28 	bl	800a81c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80049cc:	2035      	movs	r0, #53	; 0x35
 80049ce:	f005 ff31 	bl	800a834 <SX1276Read>
 80049d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <SX1276SetTx+0xb4>)
 80049d8:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 80049dc:	e7db      	b.n	8004996 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <SX1276SetTx+0xb4>)
 80049e0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80049e4:	b173      	cbz	r3, 8004a04 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80049e6:	21f5      	movs	r1, #245	; 0xf5
 80049e8:	2011      	movs	r0, #17
 80049ea:	f005 ff17 	bl	800a81c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80049ee:	2040      	movs	r0, #64	; 0x40
 80049f0:	f005 ff20 	bl	800a834 <SX1276Read>
 80049f4:	f000 0133 	and.w	r1, r0, #51	; 0x33
 80049f8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80049fc:	2040      	movs	r0, #64	; 0x40
 80049fe:	f005 ff0d 	bl	800a81c <SX1276Write>
 8004a02:	e7c8      	b.n	8004996 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004a04:	21f7      	movs	r1, #247	; 0xf7
 8004a06:	2011      	movs	r0, #17
 8004a08:	f005 ff08 	bl	800a81c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004a0c:	2040      	movs	r0, #64	; 0x40
 8004a0e:	f005 ff11 	bl	800a834 <SX1276Read>
 8004a12:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8004a16:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004a1a:	2040      	movs	r0, #64	; 0x40
 8004a1c:	f005 fefe 	bl	800a81c <SX1276Write>
 8004a20:	e7b9      	b.n	8004996 <SX1276SetTx+0x1e>
 8004a22:	bf00      	nop
 8004a24:	20000904 	.word	0x20000904
 8004a28:	20000b60 	.word	0x20000b60
 8004a2c:	20000a1c 	.word	0x20000a1c

08004a30 <SX1276Send>:
{
 8004a30:	b530      	push	{r4, r5, lr}
 8004a32:	b083      	sub	sp, #12
 8004a34:	4604      	mov	r4, r0
 8004a36:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8004a3a:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <SX1276Send+0x11c>)
 8004a3c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004a40:	b133      	cbz	r3, 8004a50 <SX1276Send+0x20>
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d03a      	beq.n	8004abc <SX1276Send+0x8c>
 8004a46:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8004a48:	f7ff ff96 	bl	8004978 <SX1276SetTx>
}
 8004a4c:	b003      	add	sp, #12
 8004a4e:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <SX1276Send+0x11c>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8004a58:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004a5c:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8004a60:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004a64:	b9eb      	cbnz	r3, 8004aa2 <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8004a66:	2101      	movs	r1, #1
 8004a68:	f10d 0007 	add.w	r0, sp, #7
 8004a6c:	f005 fe9d 	bl	800a7aa <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8004a70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004a74:	1e53      	subs	r3, r2, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b3f      	cmp	r3, #63	; 0x3f
 8004a7a:	d816      	bhi.n	8004aaa <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <SX1276Send+0x11c>)
 8004a7e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004a82:	4d32      	ldr	r5, [pc, #200]	; (8004b4c <SX1276Send+0x11c>)
 8004a84:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f005 fe8e 	bl	800a7aa <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004a8e:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8004a92:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8004a96:	4413      	add	r3, r2
 8004a98:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004a9c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8004aa0:	e7d2      	b.n	8004a48 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8004aa2:	2032      	movs	r0, #50	; 0x32
 8004aa4:	f005 feba 	bl	800a81c <SX1276Write>
 8004aa8:	e7e2      	b.n	8004a70 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4828      	ldr	r0, [pc, #160]	; (8004b50 <SX1276Send+0x120>)
 8004aae:	f005 fdb3 	bl	800a618 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004ab2:	4b26      	ldr	r3, [pc, #152]	; (8004b4c <SX1276Send+0x11c>)
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004aba:	e7e2      	b.n	8004a82 <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <SX1276Send+0x11c>)
 8004abe:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004ac2:	b353      	cbz	r3, 8004b1a <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004ac4:	2033      	movs	r0, #51	; 0x33
 8004ac6:	f005 feb5 	bl	800a834 <SX1276Read>
 8004aca:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8004ace:	2033      	movs	r0, #51	; 0x33
 8004ad0:	f005 fea4 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004ad4:	2119      	movs	r1, #25
 8004ad6:	203b      	movs	r0, #59	; 0x3b
 8004ad8:	f005 fea0 	bl	800a81c <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004adc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <SX1276Send+0x11c>)
 8004ae2:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004ae6:	2022      	movs	r0, #34	; 0x22
 8004ae8:	f005 fe98 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004aec:	2100      	movs	r1, #0
 8004aee:	200e      	movs	r0, #14
 8004af0:	f005 fe94 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004af4:	2100      	movs	r1, #0
 8004af6:	200d      	movs	r0, #13
 8004af8:	f005 fe90 	bl	800a81c <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004afc:	2001      	movs	r0, #1
 8004afe:	f005 fe99 	bl	800a834 <SX1276Read>
 8004b02:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8004b06:	d01a      	beq.n	8004b3e <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8004b08:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f005 fe4c 	bl	800a7aa <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <SX1276Send+0x11c>)
 8004b14:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8004b18:	e796      	b.n	8004a48 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004b1a:	2033      	movs	r0, #51	; 0x33
 8004b1c:	f005 fe8a 	bl	800a834 <SX1276Read>
 8004b20:	b241      	sxtb	r1, r0
 8004b22:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8004b26:	f041 0101 	orr.w	r1, r1, #1
 8004b2a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8004b2e:	2033      	movs	r0, #51	; 0x33
 8004b30:	f005 fe74 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004b34:	211d      	movs	r1, #29
 8004b36:	203b      	movs	r0, #59	; 0x3b
 8004b38:	f005 fe70 	bl	800a81c <SX1276Write>
 8004b3c:	e7ce      	b.n	8004adc <SX1276Send+0xac>
                SX1276SetStby( );
 8004b3e:	f7ff ff01 	bl	8004944 <SX1276SetStby>
                DelayMs( 1 );
 8004b42:	2001      	movs	r0, #1
 8004b44:	f005 fdb9 	bl	800a6ba <DelayMs>
 8004b48:	e7de      	b.n	8004b08 <SX1276Send+0xd8>
 8004b4a:	bf00      	nop
 8004b4c:	20000a1c 	.word	0x20000a1c
 8004b50:	2000091c 	.word	0x2000091c

08004b54 <SX1276SetRx>:
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8004b58:	489d      	ldr	r0, [pc, #628]	; (8004dd0 <SX1276SetRx+0x27c>)
 8004b5a:	f7ff fb0b 	bl	8004174 <TimerStop>
    switch( SX1276.Settings.Modem )
 8004b5e:	4b9d      	ldr	r3, [pc, #628]	; (8004dd4 <SX1276SetRx+0x280>)
 8004b60:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004b64:	b1e3      	cbz	r3, 8004ba0 <SX1276SetRx+0x4c>
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d045      	beq.n	8004bf6 <SX1276SetRx+0xa2>
 8004b6a:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8004b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b70:	2100      	movs	r1, #0
 8004b72:	4899      	ldr	r0, [pc, #612]	; (8004dd8 <SX1276SetRx+0x284>)
 8004b74:	f006 fc88 	bl	800b488 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8004b78:	4b96      	ldr	r3, [pc, #600]	; (8004dd4 <SX1276SetRx+0x280>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8004b80:	2c00      	cmp	r4, #0
 8004b82:	f040 8107 	bne.w	8004d94 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8004b86:	4b93      	ldr	r3, [pc, #588]	; (8004dd4 <SX1276SetRx+0x280>)
 8004b88:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 810a 	beq.w	8004da6 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8004b92:	2e00      	cmp	r6, #0
 8004b94:	f000 8118 	beq.w	8004dc8 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8004b98:	2005      	movs	r0, #5
 8004b9a:	f005 fe57 	bl	800a84c <SX1276SetOpMode>
}
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004ba0:	4d8c      	ldr	r5, [pc, #560]	; (8004dd4 <SX1276SetRx+0x280>)
 8004ba2:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004ba6:	2040      	movs	r0, #64	; 0x40
 8004ba8:	f005 fe44 	bl	800a834 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004bac:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004bb0:	f041 010c 	orr.w	r1, r1, #12
 8004bb4:	2040      	movs	r0, #64	; 0x40
 8004bb6:	f005 fe31 	bl	800a81c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004bba:	2041      	movs	r0, #65	; 0x41
 8004bbc:	f005 fe3a 	bl	800a834 <SX1276Read>
 8004bc0:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8004bc4:	b2c9      	uxtb	r1, r1
 8004bc6:	2041      	movs	r0, #65	; 0x41
 8004bc8:	f005 fe28 	bl	800a81c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004bcc:	2035      	movs	r0, #53	; 0x35
 8004bce:	f005 fe31 	bl	800a834 <SX1276Read>
 8004bd2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004bd6:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8004bda:	211e      	movs	r1, #30
 8004bdc:	200d      	movs	r0, #13
 8004bde:	f005 fe1d 	bl	800a81c <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004be8:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004bec:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004bf0:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8004bf4:	e7ba      	b.n	8004b6c <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004bf6:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <SX1276SetRx+0x280>)
 8004bf8:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004bfc:	b353      	cbz	r3, 8004c54 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004bfe:	2033      	movs	r0, #51	; 0x33
 8004c00:	f005 fe18 	bl	800a834 <SX1276Read>
 8004c04:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8004c08:	b2c9      	uxtb	r1, r1
 8004c0a:	2033      	movs	r0, #51	; 0x33
 8004c0c:	f005 fe06 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004c10:	2119      	movs	r1, #25
 8004c12:	203b      	movs	r0, #59	; 0x3b
 8004c14:	f005 fe02 	bl	800a81c <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8004c18:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <SX1276SetRx+0x280>)
 8004c1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	f200 8087 	bhi.w	8004d32 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004c24:	2031      	movs	r0, #49	; 0x31
 8004c26:	f005 fe05 	bl	800a834 <SX1276Read>
 8004c2a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004c2e:	2031      	movs	r0, #49	; 0x31
 8004c30:	f005 fdf4 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8004c34:	2100      	movs	r1, #0
 8004c36:	2030      	movs	r0, #48	; 0x30
 8004c38:	f005 fdf0 	bl	800a81c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8004c3c:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <SX1276SetRx+0x280>)
 8004c3e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d87e      	bhi.n	8004d44 <SX1276SetRx+0x1f0>
 8004c46:	e8df f003 	tbb	[pc, r3]
 8004c4a:	2417      	.short	0x2417
 8004c4c:	584b3e31 	.word	0x584b3e31
 8004c50:	6a65      	.short	0x6a65
 8004c52:	6f          	.byte	0x6f
 8004c53:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004c54:	2033      	movs	r0, #51	; 0x33
 8004c56:	f005 fded 	bl	800a834 <SX1276Read>
 8004c5a:	b241      	sxtb	r1, r0
 8004c5c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8004c60:	f041 0101 	orr.w	r1, r1, #1
 8004c64:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8004c68:	2033      	movs	r0, #51	; 0x33
 8004c6a:	f005 fdd7 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004c6e:	211d      	movs	r1, #29
 8004c70:	203b      	movs	r0, #59	; 0x3b
 8004c72:	f005 fdd3 	bl	800a81c <SX1276Write>
 8004c76:	e7cf      	b.n	8004c18 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8004c78:	2148      	movs	r1, #72	; 0x48
 8004c7a:	202f      	movs	r0, #47	; 0x2f
 8004c7c:	f005 fdce 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004c80:	4b54      	ldr	r3, [pc, #336]	; (8004dd4 <SX1276SetRx+0x280>)
 8004c82:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004c86:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8004c8a:	3002      	adds	r0, #2
 8004c8c:	f7ff fb18 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004c90:	e058      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004c92:	2144      	movs	r1, #68	; 0x44
 8004c94:	202f      	movs	r0, #47	; 0x2f
 8004c96:	f005 fdc1 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004c9a:	4b4e      	ldr	r3, [pc, #312]	; (8004dd4 <SX1276SetRx+0x280>)
 8004c9c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004ca0:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8004ca4:	3034      	adds	r0, #52	; 0x34
 8004ca6:	f7ff fb0b 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004caa:	e04b      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004cac:	2144      	movs	r1, #68	; 0x44
 8004cae:	202f      	movs	r0, #47	; 0x2f
 8004cb0:	f005 fdb4 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004cb4:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <SX1276SetRx+0x280>)
 8004cb6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004cba:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8004cbe:	3004      	adds	r0, #4
 8004cc0:	f7ff fafe 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004cc4:	e03e      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004cc6:	2144      	movs	r1, #68	; 0x44
 8004cc8:	202f      	movs	r0, #47	; 0x2f
 8004cca:	f005 fda7 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <SX1276SetRx+0x280>)
 8004cd0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004cd4:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8004cd8:	305e      	adds	r0, #94	; 0x5e
 8004cda:	f7ff faf1 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004cde:	e031      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004ce0:	2144      	movs	r1, #68	; 0x44
 8004ce2:	202f      	movs	r0, #47	; 0x2f
 8004ce4:	f005 fd9a 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8004ce8:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <SX1276SetRx+0x280>)
 8004cea:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004cee:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8004cf2:	3012      	adds	r0, #18
 8004cf4:	f7ff fae4 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004cf8:	e024      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004cfa:	2144      	movs	r1, #68	; 0x44
 8004cfc:	202f      	movs	r0, #47	; 0x2f
 8004cfe:	f005 fd8d 	bl	800a81c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <SX1276SetRx+0x280>)
 8004d04:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004d08:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8004d0c:	30c6      	adds	r0, #198	; 0xc6
 8004d0e:	f7ff fad7 	bl	80042c0 <SX1276SetChannel>
                    break;
 8004d12:	e017      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	202f      	movs	r0, #47	; 0x2f
 8004d18:	f005 fd80 	bl	800a81c <SX1276Write>
                    break;
 8004d1c:	e012      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004d1e:	2140      	movs	r1, #64	; 0x40
 8004d20:	202f      	movs	r0, #47	; 0x2f
 8004d22:	f005 fd7b 	bl	800a81c <SX1276Write>
                    break;
 8004d26:	e00d      	b.n	8004d44 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004d28:	2140      	movs	r1, #64	; 0x40
 8004d2a:	202f      	movs	r0, #47	; 0x2f
 8004d2c:	f005 fd76 	bl	800a81c <SX1276Write>
                    break;
 8004d30:	e008      	b.n	8004d44 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004d32:	2031      	movs	r0, #49	; 0x31
 8004d34:	f005 fd7e 	bl	800a834 <SX1276Read>
 8004d38:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004d3c:	b2c9      	uxtb	r1, r1
 8004d3e:	2031      	movs	r0, #49	; 0x31
 8004d40:	f005 fd6c 	bl	800a81c <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <SX1276SetRx+0x280>)
 8004d46:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004d4a:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004d4e:	b1a3      	cbz	r3, 8004d7a <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004d50:	211d      	movs	r1, #29
 8004d52:	2011      	movs	r0, #17
 8004d54:	f005 fd62 	bl	800a81c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004d58:	2040      	movs	r0, #64	; 0x40
 8004d5a:	f005 fd6b 	bl	800a834 <SX1276Read>
 8004d5e:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8004d62:	2040      	movs	r0, #64	; 0x40
 8004d64:	f005 fd5a 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004d68:	2100      	movs	r1, #0
 8004d6a:	200f      	movs	r0, #15
 8004d6c:	f005 fd56 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004d70:	2100      	movs	r1, #0
 8004d72:	200d      	movs	r0, #13
 8004d74:	f005 fd52 	bl	800a81c <SX1276Write>
        break;
 8004d78:	e6f8      	b.n	8004b6c <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004d7a:	211f      	movs	r1, #31
 8004d7c:	2011      	movs	r0, #17
 8004d7e:	f005 fd4d 	bl	800a81c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004d82:	2040      	movs	r0, #64	; 0x40
 8004d84:	f005 fd56 	bl	800a834 <SX1276Read>
 8004d88:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8004d8c:	2040      	movs	r0, #64	; 0x40
 8004d8e:	f005 fd45 	bl	800a81c <SX1276Write>
 8004d92:	e7e9      	b.n	8004d68 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004d94:	4d11      	ldr	r5, [pc, #68]	; (8004ddc <SX1276SetRx+0x288>)
 8004d96:	4621      	mov	r1, r4
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f005 fc67 	bl	800a66c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f7ff f96e 	bl	8004080 <TimerStart>
 8004da4:	e6ef      	b.n	8004b86 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8004da6:	2005      	movs	r0, #5
 8004da8:	f005 fd50 	bl	800a84c <SX1276SetOpMode>
        if( rxContinuous == false )
 8004dac:	2e00      	cmp	r6, #0
 8004dae:	f47f aef6 	bne.w	8004b9e <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8004db2:	4c0b      	ldr	r4, [pc, #44]	; (8004de0 <SX1276SetRx+0x28c>)
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <SX1276SetRx+0x280>)
 8004db6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f005 fc56 	bl	800a66c <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7ff f95d 	bl	8004080 <TimerStart>
 8004dc6:	e6ea      	b.n	8004b9e <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8004dc8:	2006      	movs	r0, #6
 8004dca:	f005 fd3f 	bl	800a84c <SX1276SetOpMode>
}
 8004dce:	e6e6      	b.n	8004b9e <SX1276SetRx+0x4a>
 8004dd0:	20000b60 	.word	0x20000b60
 8004dd4:	20000a1c 	.word	0x20000a1c
 8004dd8:	2000091c 	.word	0x2000091c
 8004ddc:	20000904 	.word	0x20000904
 8004de0:	200008ec 	.word	0x200008ec

08004de4 <SX1276ReadRssi>:
{
 8004de4:	b508      	push	{r3, lr}
    switch( modem )
 8004de6:	b120      	cbz	r0, 8004df2 <SX1276ReadRssi+0xe>
 8004de8:	2801      	cmp	r0, #1
 8004dea:	d00a      	beq.n	8004e02 <SX1276ReadRssi+0x1e>
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004df0:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004df2:	2011      	movs	r0, #17
 8004df4:	f005 fd1e 	bl	800a834 <SX1276Read>
 8004df8:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8004dfc:	4240      	negs	r0, r0
 8004dfe:	b200      	sxth	r0, r0
        break;
 8004e00:	e7f6      	b.n	8004df0 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <SX1276ReadRssi+0x48>)
 8004e04:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <SX1276ReadRssi+0x4c>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d906      	bls.n	8004e1c <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004e0e:	201b      	movs	r0, #27
 8004e10:	f005 fd10 	bl	800a834 <SX1276Read>
 8004e14:	b200      	sxth	r0, r0
 8004e16:	389d      	subs	r0, #157	; 0x9d
 8004e18:	b200      	sxth	r0, r0
 8004e1a:	e7e9      	b.n	8004df0 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004e1c:	201b      	movs	r0, #27
 8004e1e:	f005 fd09 	bl	800a834 <SX1276Read>
 8004e22:	b200      	sxth	r0, r0
 8004e24:	38a4      	subs	r0, #164	; 0xa4
 8004e26:	b200      	sxth	r0, r0
 8004e28:	e7e2      	b.n	8004df0 <SX1276ReadRssi+0xc>
 8004e2a:	bf00      	nop
 8004e2c:	20000a1c 	.word	0x20000a1c
 8004e30:	1f4add40 	.word	0x1f4add40

08004e34 <SX1276SetModem>:
{
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004e38:	2001      	movs	r0, #1
 8004e3a:	f005 fcfb 	bl	800a834 <SX1276Read>
 8004e3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e42:	d121      	bne.n	8004e88 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <SX1276SetModem+0x88>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <SX1276SetModem+0x88>)
 8004e4e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	d017      	beq.n	8004e86 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <SX1276SetModem+0x88>)
 8004e58:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8004e5c:	2c01      	cmp	r4, #1
 8004e5e:	d018      	beq.n	8004e92 <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004e60:	2000      	movs	r0, #0
 8004e62:	f005 fcf3 	bl	800a84c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004e66:	2001      	movs	r0, #1
 8004e68:	f005 fce4 	bl	800a834 <SX1276Read>
 8004e6c:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004e70:	2001      	movs	r0, #1
 8004e72:	f005 fcd3 	bl	800a81c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004e76:	2100      	movs	r1, #0
 8004e78:	2040      	movs	r0, #64	; 0x40
 8004e7a:	f005 fccf 	bl	800a81c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004e7e:	2130      	movs	r1, #48	; 0x30
 8004e80:	2041      	movs	r0, #65	; 0x41
 8004e82:	f005 fccb 	bl	800a81c <SX1276Write>
}
 8004e86:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <SX1276SetModem+0x88>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004e90:	e7dc      	b.n	8004e4c <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004e92:	2000      	movs	r0, #0
 8004e94:	f005 fcda 	bl	800a84c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f005 fccb 	bl	800a834 <SX1276Read>
 8004e9e:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004ea2:	b2c9      	uxtb	r1, r1
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f005 fcb9 	bl	800a81c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004eaa:	2100      	movs	r1, #0
 8004eac:	2040      	movs	r0, #64	; 0x40
 8004eae:	f005 fcb5 	bl	800a81c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2041      	movs	r0, #65	; 0x41
 8004eb6:	f005 fcb1 	bl	800a81c <SX1276Write>
        break;
 8004eba:	e7e4      	b.n	8004e86 <SX1276SetModem+0x52>
 8004ebc:	20000a1c 	.word	0x20000a1c

08004ec0 <SX1276Init>:
{
 8004ec0:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <SX1276Init+0x68>)
 8004ec4:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004ec6:	4c19      	ldr	r4, [pc, #100]	; (8004f2c <SX1276Init+0x6c>)
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4819      	ldr	r0, [pc, #100]	; (8004f30 <SX1276Init+0x70>)
 8004ecc:	f005 fbc5 	bl	800a65a <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4818      	ldr	r0, [pc, #96]	; (8004f34 <SX1276Init+0x74>)
 8004ed4:	f005 fbc1 	bl	800a65a <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4817      	ldr	r0, [pc, #92]	; (8004f38 <SX1276Init+0x78>)
 8004edc:	f005 fbbd 	bl	800a65a <TimerInit>
    SX1276Reset( );
 8004ee0:	f7fe ff48 	bl	8003d74 <SX1276Reset>
    RxChainCalibration( );
 8004ee4:	f7ff fccc 	bl	8004880 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f005 fcaf 	bl	800a84c <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8004eee:	4813      	ldr	r0, [pc, #76]	; (8004f3c <SX1276Init+0x7c>)
 8004ef0:	f7fe ff74 	bl	8003ddc <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	e00c      	b.n	8004f12 <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8004ef8:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <SX1276Init+0x80>)
 8004efa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004efe:	18d5      	adds	r5, r2, r3
 8004f00:	5cd0      	ldrb	r0, [r2, r3]
 8004f02:	f7ff ff97 	bl	8004e34 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004f06:	78a9      	ldrb	r1, [r5, #2]
 8004f08:	7868      	ldrb	r0, [r5, #1]
 8004f0a:	f005 fc87 	bl	800a81c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004f0e:	3401      	adds	r4, #1
 8004f10:	b2e4      	uxtb	r4, r4
 8004f12:	2c0f      	cmp	r4, #15
 8004f14:	d9f0      	bls.n	8004ef8 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7ff ff8c 	bl	8004e34 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <SX1276Init+0x84>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004f24:	bd38      	pop	{r3, r4, r5, pc}
 8004f26:	bf00      	nop
 8004f28:	200008e8 	.word	0x200008e8
 8004f2c:	08005541 	.word	0x08005541
 8004f30:	20000b60 	.word	0x20000b60
 8004f34:	20000904 	.word	0x20000904
 8004f38:	200008ec 	.word	0x200008ec
 8004f3c:	2000008c 	.word	0x2000008c
 8004f40:	0800c43c 	.word	0x0800c43c
 8004f44:	20000a1c 	.word	0x20000a1c

08004f48 <SX1276SetRxConfig>:
{
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	4604      	mov	r4, r0
 8004f50:	9101      	str	r1, [sp, #4]
 8004f52:	4615      	mov	r5, r2
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8004f5a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8004f5e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8004f62:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8004f66:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8004f6a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8004f6e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8004f72:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8004f74:	f7ff ff5e 	bl	8004e34 <SX1276SetModem>
    switch( modem )
 8004f78:	b124      	cbz	r4, 8004f84 <SX1276SetRxConfig+0x3c>
 8004f7a:	2c01      	cmp	r4, #1
 8004f7c:	d069      	beq.n	8005052 <SX1276SetRxConfig+0x10a>
}
 8004f7e:	b005      	add	sp, #20
 8004f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004f84:	4ba0      	ldr	r3, [pc, #640]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 8004f86:	9c01      	ldr	r4, [sp, #4]
 8004f88:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8004f8c:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8004f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f92:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004f96:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8004f9a:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004f9e:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004fa2:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8004fa6:	9a02      	ldr	r2, [sp, #8]
 8004fa8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004fac:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004fb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004fb4:	fb02 fa0a 	mul.w	sl, r2, sl
 8004fb8:	fbba f2f5 	udiv	r2, sl, r5
 8004fbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004fc0:	4b92      	ldr	r3, [pc, #584]	; (800520c <SX1276SetRxConfig+0x2c4>)
 8004fc2:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004fc6:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8004fca:	2002      	movs	r0, #2
 8004fcc:	f005 fc26 	bl	800a81c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004fd0:	b2e9      	uxtb	r1, r5
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	f005 fc22 	bl	800a81c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7ff f91f 	bl	800421c <GetFskBandwidthRegValue>
 8004fde:	4601      	mov	r1, r0
 8004fe0:	2012      	movs	r0, #18
 8004fe2:	f005 fc1b 	bl	800a81c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8004fe6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004fe8:	f7ff f918 	bl	800421c <GetFskBandwidthRegValue>
 8004fec:	4601      	mov	r1, r0
 8004fee:	2013      	movs	r0, #19
 8004ff0:	f005 fc14 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004ff4:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8004ff8:	2025      	movs	r0, #37	; 0x25
 8004ffa:	f005 fc0f 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004ffe:	fa5f f188 	uxtb.w	r1, r8
 8005002:	2026      	movs	r0, #38	; 0x26
 8005004:	f005 fc0a 	bl	800a81c <SX1276Write>
            if( fixLen == 1 )
 8005008:	b1df      	cbz	r7, 8005042 <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800500a:	4649      	mov	r1, r9
 800500c:	2032      	movs	r0, #50	; 0x32
 800500e:	f005 fc05 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005012:	2030      	movs	r0, #48	; 0x30
 8005014:	f005 fc0e 	bl	800a834 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8005018:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800501c:	b1b7      	cbz	r7, 800504c <SX1276SetRxConfig+0x104>
 800501e:	2300      	movs	r3, #0
 8005020:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005022:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8005026:	b2c9      	uxtb	r1, r1
 8005028:	2030      	movs	r0, #48	; 0x30
 800502a:	f005 fbf7 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800502e:	2031      	movs	r0, #49	; 0x31
 8005030:	f005 fc00 	bl	800a834 <SX1276Read>
 8005034:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8005038:	b2c9      	uxtb	r1, r1
 800503a:	2031      	movs	r0, #49	; 0x31
 800503c:	f005 fbee 	bl	800a81c <SX1276Write>
        break;
 8005040:	e79d      	b.n	8004f7e <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005042:	21ff      	movs	r1, #255	; 0xff
 8005044:	2032      	movs	r0, #50	; 0x32
 8005046:	f005 fbe9 	bl	800a81c <SX1276Write>
 800504a:	e7e2      	b.n	8005012 <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800504c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005050:	e7e6      	b.n	8005020 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8005052:	9b01      	ldr	r3, [sp, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d900      	bls.n	800505a <SX1276SetRxConfig+0x112>
                while( 1 );
 8005058:	e7fe      	b.n	8005058 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 800505a:	9c01      	ldr	r4, [sp, #4]
 800505c:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800505e:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 8005060:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8005064:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8005068:	9a03      	ldr	r2, [sp, #12]
 800506a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800506e:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005072:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005076:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800507a:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800507e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005082:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005086:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800508a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800508e:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005092:	9a02      	ldr	r2, [sp, #8]
 8005094:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8005098:	2d0c      	cmp	r5, #12
 800509a:	d803      	bhi.n	80050a4 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 800509c:	2d05      	cmp	r5, #5
 800509e:	d802      	bhi.n	80050a6 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 80050a0:	2506      	movs	r5, #6
 80050a2:	e000      	b.n	80050a6 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 80050a4:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80050a6:	2c07      	cmp	r4, #7
 80050a8:	d063      	beq.n	8005172 <SX1276SetRxConfig+0x22a>
 80050aa:	2c08      	cmp	r4, #8
 80050ac:	d06a      	beq.n	8005184 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80050ae:	4b56      	ldr	r3, [pc, #344]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80050b6:	201d      	movs	r0, #29
 80050b8:	f005 fbbc 	bl	800a834 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80050bc:	0123      	lsls	r3, r4, #4
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 80050c8:	ea43 0107 	orr.w	r1, r3, r7
 80050cc:	201d      	movs	r0, #29
 80050ce:	f005 fba5 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80050d2:	201e      	movs	r0, #30
 80050d4:	f005 fbae 	bl	800a834 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80050d8:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80050dc:	012a      	lsls	r2, r5, #4
 80050de:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80050e0:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80050e2:	00b3      	lsls	r3, r6, #2
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80050e8:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80050ec:	4319      	orrs	r1, r3
 80050ee:	201e      	movs	r0, #30
 80050f0:	f005 fb94 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80050f4:	2026      	movs	r0, #38	; 0x26
 80050f6:	f005 fb9d 	bl	800a834 <SX1276Read>
 80050fa:	b241      	sxtb	r1, r0
 80050fc:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005100:	4b41      	ldr	r3, [pc, #260]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 8005102:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005106:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800510a:	b2c9      	uxtb	r1, r1
 800510c:	2026      	movs	r0, #38	; 0x26
 800510e:	f005 fb85 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005112:	fa5f f18a 	uxtb.w	r1, sl
 8005116:	201f      	movs	r0, #31
 8005118:	f005 fb80 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800511c:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8005120:	2020      	movs	r0, #32
 8005122:	f005 fb7b 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005126:	fa5f f188 	uxtb.w	r1, r8
 800512a:	2021      	movs	r0, #33	; 0x21
 800512c:	f005 fb76 	bl	800a81c <SX1276Write>
            if( fixLen == 1 )
 8005130:	bb5f      	cbnz	r7, 800518a <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 8005134:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8005138:	bb63      	cbnz	r3, 8005194 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800513a:	2c09      	cmp	r4, #9
 800513c:	d03a      	beq.n	80051b4 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 800513e:	2c09      	cmp	r4, #9
 8005140:	d047      	beq.n	80051d2 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005142:	2103      	movs	r1, #3
 8005144:	2036      	movs	r0, #54	; 0x36
 8005146:	f005 fb69 	bl	800a81c <SX1276Write>
            if( datarate == 6 )
 800514a:	2d06      	cmp	r5, #6
 800514c:	d04a      	beq.n	80051e4 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800514e:	2031      	movs	r0, #49	; 0x31
 8005150:	f005 fb70 	bl	800a834 <SX1276Read>
 8005154:	b241      	sxtb	r1, r0
 8005156:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800515a:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800515e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8005162:	2031      	movs	r0, #49	; 0x31
 8005164:	f005 fb5a 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005168:	210a      	movs	r1, #10
 800516a:	2037      	movs	r0, #55	; 0x37
 800516c:	f005 fb56 	bl	800a81c <SX1276Write>
}
 8005170:	e705      	b.n	8004f7e <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005172:	f1a5 030b 	sub.w	r3, r5, #11
 8005176:	2b01      	cmp	r3, #1
 8005178:	d897      	bhi.n	80050aa <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8005182:	e798      	b.n	80050b6 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005184:	2d0c      	cmp	r5, #12
 8005186:	d192      	bne.n	80050ae <SX1276SetRxConfig+0x166>
 8005188:	e7f7      	b.n	800517a <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800518a:	4649      	mov	r1, r9
 800518c:	2022      	movs	r0, #34	; 0x22
 800518e:	f005 fb45 	bl	800a81c <SX1276Write>
 8005192:	e7ce      	b.n	8005132 <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005194:	2044      	movs	r0, #68	; 0x44
 8005196:	f005 fb4d 	bl	800a834 <SX1276Read>
 800519a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	2044      	movs	r0, #68	; 0x44
 80051a2:	f005 fb3b 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80051a6:	4b18      	ldr	r3, [pc, #96]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 80051a8:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80051ac:	2024      	movs	r0, #36	; 0x24
 80051ae:	f005 fb35 	bl	800a81c <SX1276Write>
 80051b2:	e7c2      	b.n	800513a <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <SX1276SetRxConfig+0x2c0>)
 80051b6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <SX1276SetRxConfig+0x2c8>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d9be      	bls.n	800513e <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80051c0:	2102      	movs	r1, #2
 80051c2:	2036      	movs	r0, #54	; 0x36
 80051c4:	f005 fb2a 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80051c8:	2164      	movs	r1, #100	; 0x64
 80051ca:	203a      	movs	r0, #58	; 0x3a
 80051cc:	f005 fb26 	bl	800a81c <SX1276Write>
 80051d0:	e7bb      	b.n	800514a <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80051d2:	2102      	movs	r1, #2
 80051d4:	2036      	movs	r0, #54	; 0x36
 80051d6:	f005 fb21 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80051da:	217f      	movs	r1, #127	; 0x7f
 80051dc:	203a      	movs	r0, #58	; 0x3a
 80051de:	f005 fb1d 	bl	800a81c <SX1276Write>
 80051e2:	e7b2      	b.n	800514a <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80051e4:	2031      	movs	r0, #49	; 0x31
 80051e6:	f005 fb25 	bl	800a834 <SX1276Read>
 80051ea:	b241      	sxtb	r1, r0
 80051ec:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80051f0:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80051f4:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80051f8:	2031      	movs	r0, #49	; 0x31
 80051fa:	f005 fb0f 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80051fe:	210c      	movs	r1, #12
 8005200:	2037      	movs	r0, #55	; 0x37
 8005202:	f005 fb0b 	bl	800a81c <SX1276Write>
 8005206:	e6ba      	b.n	8004f7e <SX1276SetRxConfig+0x36>
 8005208:	20000a1c 	.word	0x20000a1c
 800520c:	01e84800 	.word	0x01e84800
 8005210:	1f4add40 	.word	0x1f4add40

08005214 <SX1276SetTxConfig>:
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	b083      	sub	sp, #12
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	9201      	str	r2, [sp, #4]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8005226:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 800522a:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800522e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8005232:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8005236:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 800523a:	f7ff fdfb 	bl	8004e34 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 800523e:	4628      	mov	r0, r5
 8005240:	f005 f9a2 	bl	800a588 <SX1276SetRfTxPower>
    switch( modem )
 8005244:	b124      	cbz	r4, 8005250 <SX1276SetTxConfig+0x3c>
 8005246:	2c01      	cmp	r4, #1
 8005248:	d057      	beq.n	80052fa <SX1276SetTxConfig+0xe6>
}
 800524a:	b003      	add	sp, #12
 800524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8005250:	4b81      	ldr	r3, [pc, #516]	; (8005458 <SX1276SetTxConfig+0x244>)
 8005252:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8005256:	9801      	ldr	r0, [sp, #4]
 8005258:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800525c:	9a00      	ldr	r2, [sp, #0]
 800525e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8005262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005264:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005268:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 800526c:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005270:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005274:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8005278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800527a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800527e:	f7fe ffb9 	bl	80041f4 <SX1276ConvertFreqInHzToPllStep>
 8005282:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8005284:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8005288:	2004      	movs	r0, #4
 800528a:	f005 fac7 	bl	800a81c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800528e:	b2e1      	uxtb	r1, r4
 8005290:	2005      	movs	r0, #5
 8005292:	f005 fac3 	bl	800a81c <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005296:	4c71      	ldr	r4, [pc, #452]	; (800545c <SX1276SetTxConfig+0x248>)
 8005298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800529a:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800529e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80052a2:	2002      	movs	r0, #2
 80052a4:	f005 faba 	bl	800a81c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80052a8:	b2e1      	uxtb	r1, r4
 80052aa:	2003      	movs	r0, #3
 80052ac:	f005 fab6 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80052b0:	0a39      	lsrs	r1, r7, #8
 80052b2:	2025      	movs	r0, #37	; 0x25
 80052b4:	f005 fab2 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80052b8:	b2f9      	uxtb	r1, r7
 80052ba:	2026      	movs	r0, #38	; 0x26
 80052bc:	f005 faae 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80052c0:	2030      	movs	r0, #48	; 0x30
 80052c2:	f005 fab7 	bl	800a834 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80052c6:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80052ca:	f1b8 0f00 	cmp.w	r8, #0
 80052ce:	d011      	beq.n	80052f4 <SX1276SetTxConfig+0xe0>
 80052d0:	2300      	movs	r3, #0
 80052d2:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80052d4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80052d8:	b2c9      	uxtb	r1, r1
 80052da:	2030      	movs	r0, #48	; 0x30
 80052dc:	f005 fa9e 	bl	800a81c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80052e0:	2031      	movs	r0, #49	; 0x31
 80052e2:	f005 faa7 	bl	800a834 <SX1276Read>
 80052e6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80052ea:	b2c9      	uxtb	r1, r1
 80052ec:	2031      	movs	r0, #49	; 0x31
 80052ee:	f005 fa95 	bl	800a81c <SX1276Write>
        break;
 80052f2:	e7aa      	b.n	800524a <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80052f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80052f8:	e7eb      	b.n	80052d2 <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 80052fa:	4b57      	ldr	r3, [pc, #348]	; (8005458 <SX1276SetTxConfig+0x244>)
 80052fc:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d900      	bls.n	8005308 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8005306:	e7fe      	b.n	8005306 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8005308:	9c00      	ldr	r4, [sp, #0]
 800530a:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800530c:	4b52      	ldr	r3, [pc, #328]	; (8005458 <SX1276SetTxConfig+0x244>)
 800530e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8005312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005314:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8005318:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800531c:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005320:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005324:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005328:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800532c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005330:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005334:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8005338:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800533a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 800533e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005340:	2b0c      	cmp	r3, #12
 8005342:	d804      	bhi.n	800534e <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8005344:	2b05      	cmp	r3, #5
 8005346:	d804      	bhi.n	8005352 <SX1276SetTxConfig+0x13e>
                datarate = 6;
 8005348:	2306      	movs	r3, #6
 800534a:	930c      	str	r3, [sp, #48]	; 0x30
 800534c:	e001      	b.n	8005352 <SX1276SetTxConfig+0x13e>
                datarate = 12;
 800534e:	230c      	movs	r3, #12
 8005350:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005352:	2c07      	cmp	r4, #7
 8005354:	d051      	beq.n	80053fa <SX1276SetTxConfig+0x1e6>
 8005356:	2c08      	cmp	r4, #8
 8005358:	d058      	beq.n	800540c <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800535a:	4b3f      	ldr	r3, [pc, #252]	; (8005458 <SX1276SetTxConfig+0x244>)
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005362:	f1bb 0f00 	cmp.w	fp, #0
 8005366:	d155      	bne.n	8005414 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005368:	201d      	movs	r0, #29
 800536a:	f005 fa63 	bl	800a834 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800536e:	0123      	lsls	r3, r4, #4
 8005370:	b2da      	uxtb	r2, r3
 8005372:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 800537a:	ea43 0108 	orr.w	r1, r3, r8
 800537e:	201d      	movs	r0, #29
 8005380:	f005 fa4c 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005384:	201e      	movs	r0, #30
 8005386:	f005 fa55 	bl	800a834 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 800538a:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800538e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8005394:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8005396:	00b3      	lsls	r3, r6, #2
 8005398:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800539a:	4319      	orrs	r1, r3
 800539c:	201e      	movs	r0, #30
 800539e:	f005 fa3d 	bl	800a81c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80053a2:	2026      	movs	r0, #38	; 0x26
 80053a4:	f005 fa46 	bl	800a834 <SX1276Read>
 80053a8:	b241      	sxtb	r1, r0
 80053aa:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <SX1276SetTxConfig+0x244>)
 80053b0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80053b4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80053b8:	b2c9      	uxtb	r1, r1
 80053ba:	2026      	movs	r0, #38	; 0x26
 80053bc:	f005 fa2e 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80053c0:	0a39      	lsrs	r1, r7, #8
 80053c2:	2020      	movs	r0, #32
 80053c4:	f005 fa2a 	bl	800a81c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80053c8:	b2f9      	uxtb	r1, r7
 80053ca:	2021      	movs	r0, #33	; 0x21
 80053cc:	f005 fa26 	bl	800a81c <SX1276Write>
            if( datarate == 6 )
 80053d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d02e      	beq.n	8005434 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80053d6:	2031      	movs	r0, #49	; 0x31
 80053d8:	f005 fa2c 	bl	800a834 <SX1276Read>
 80053dc:	b241      	sxtb	r1, r0
 80053de:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80053e2:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80053e6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80053ea:	2031      	movs	r0, #49	; 0x31
 80053ec:	f005 fa16 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80053f0:	210a      	movs	r1, #10
 80053f2:	2037      	movs	r0, #55	; 0x37
 80053f4:	f005 fa12 	bl	800a81c <SX1276Write>
}
 80053f8:	e727      	b.n	800524a <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80053fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053fc:	3b0b      	subs	r3, #11
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d8a9      	bhi.n	8005356 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <SX1276SetTxConfig+0x244>)
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800540a:	e7aa      	b.n	8005362 <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800540c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d1a3      	bne.n	800535a <SX1276SetTxConfig+0x146>
 8005412:	e7f6      	b.n	8005402 <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005414:	2044      	movs	r0, #68	; 0x44
 8005416:	f005 fa0d 	bl	800a834 <SX1276Read>
 800541a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800541e:	b2c9      	uxtb	r1, r1
 8005420:	2044      	movs	r0, #68	; 0x44
 8005422:	f005 f9fb 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <SX1276SetTxConfig+0x244>)
 8005428:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 800542c:	2024      	movs	r0, #36	; 0x24
 800542e:	f005 f9f5 	bl	800a81c <SX1276Write>
 8005432:	e799      	b.n	8005368 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005434:	2031      	movs	r0, #49	; 0x31
 8005436:	f005 f9fd 	bl	800a834 <SX1276Read>
 800543a:	b241      	sxtb	r1, r0
 800543c:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005440:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005444:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8005448:	2031      	movs	r0, #49	; 0x31
 800544a:	f005 f9e7 	bl	800a81c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800544e:	210c      	movs	r1, #12
 8005450:	2037      	movs	r0, #55	; 0x37
 8005452:	f005 f9e3 	bl	800a81c <SX1276Write>
 8005456:	e6f8      	b.n	800524a <SX1276SetTxConfig+0x36>
 8005458:	20000a1c 	.word	0x20000a1c
 800545c:	01e84800 	.word	0x01e84800

08005460 <SX1276SetTxContinuousWave>:
{
 8005460:	b530      	push	{r4, r5, lr}
 8005462:	b08b      	sub	sp, #44	; 0x2c
 8005464:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005466:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800546a:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 800546e:	f7fe ff27 	bl	80042c0 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8005472:	9408      	str	r4, [sp, #32]
 8005474:	2000      	movs	r0, #0
 8005476:	9007      	str	r0, [sp, #28]
 8005478:	9006      	str	r0, [sp, #24]
 800547a:	9005      	str	r0, [sp, #20]
 800547c:	9004      	str	r0, [sp, #16]
 800547e:	9003      	str	r0, [sp, #12]
 8005480:	2305      	movs	r3, #5
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	9001      	str	r0, [sp, #4]
 8005486:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4603      	mov	r3, r0
 800548e:	4602      	mov	r2, r0
 8005490:	4629      	mov	r1, r5
 8005492:	f7ff febf 	bl	8005214 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8005496:	2031      	movs	r0, #49	; 0x31
 8005498:	f005 f9cc 	bl	800a834 <SX1276Read>
 800549c:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 80054a0:	2031      	movs	r0, #49	; 0x31
 80054a2:	f005 f9bb 	bl	800a81c <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80054a6:	21f0      	movs	r1, #240	; 0xf0
 80054a8:	2040      	movs	r0, #64	; 0x40
 80054aa:	f005 f9b7 	bl	800a81c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80054ae:	21a0      	movs	r1, #160	; 0xa0
 80054b0:	2041      	movs	r0, #65	; 0x41
 80054b2:	f005 f9b3 	bl	800a81c <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80054b6:	4d08      	ldr	r5, [pc, #32]	; (80054d8 <SX1276SetTxContinuousWave+0x78>)
 80054b8:	4621      	mov	r1, r4
 80054ba:	4628      	mov	r0, r5
 80054bc:	f005 f8d6 	bl	800a66c <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <SX1276SetTxContinuousWave+0x7c>)
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80054c8:	4628      	mov	r0, r5
 80054ca:	f7fe fdd9 	bl	8004080 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80054ce:	2003      	movs	r0, #3
 80054d0:	f005 f9bc 	bl	800a84c <SX1276SetOpMode>
}
 80054d4:	b00b      	add	sp, #44	; 0x2c
 80054d6:	bd30      	pop	{r4, r5, pc}
 80054d8:	20000b60 	.word	0x20000b60
 80054dc:	20000a1c 	.word	0x20000a1c

080054e0 <SX1276SetMaxPayloadLength>:
{
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4604      	mov	r4, r0
 80054e4:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 80054e6:	f7ff fca5 	bl	8004e34 <SX1276SetModem>
    switch( modem )
 80054ea:	b114      	cbz	r4, 80054f2 <SX1276SetMaxPayloadLength+0x12>
 80054ec:	2c01      	cmp	r4, #1
 80054ee:	d00a      	beq.n	8005506 <SX1276SetMaxPayloadLength+0x26>
}
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <SX1276SetMaxPayloadLength+0x30>)
 80054f4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f9      	bne.n	80054f0 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 80054fc:	4629      	mov	r1, r5
 80054fe:	2032      	movs	r0, #50	; 0x32
 8005500:	f005 f98c 	bl	800a81c <SX1276Write>
 8005504:	e7f4      	b.n	80054f0 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8005506:	4629      	mov	r1, r5
 8005508:	2023      	movs	r0, #35	; 0x23
 800550a:	f005 f987 	bl	800a81c <SX1276Write>
}
 800550e:	e7ef      	b.n	80054f0 <SX1276SetMaxPayloadLength+0x10>
 8005510:	20000a1c 	.word	0x20000a1c

08005514 <SX1276SetPublicNetwork>:
{
 8005514:	b510      	push	{r4, lr}
 8005516:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8005518:	2001      	movs	r0, #1
 800551a:	f7ff fc8b 	bl	8004e34 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <SX1276SetPublicNetwork+0x28>)
 8005520:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8005524:	b124      	cbz	r4, 8005530 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8005526:	2134      	movs	r1, #52	; 0x34
 8005528:	2039      	movs	r0, #57	; 0x39
 800552a:	f005 f977 	bl	800a81c <SX1276Write>
}
 800552e:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8005530:	2112      	movs	r1, #18
 8005532:	2039      	movs	r0, #57	; 0x39
 8005534:	f005 f972 	bl	800a81c <SX1276Write>
}
 8005538:	e7f9      	b.n	800552e <SX1276SetPublicNetwork+0x1a>
 800553a:	bf00      	nop
 800553c:	20000a1c 	.word	0x20000a1c

08005540 <SX1276OnTimeoutIrq>:
{
 8005540:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <SX1276OnTimeoutIrq+0xd0>)
 8005544:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d002      	beq.n	8005552 <SX1276OnTimeoutIrq+0x12>
 800554c:	2b02      	cmp	r3, #2
 800554e:	d033      	beq.n	80055b8 <SX1276OnTimeoutIrq+0x78>
}
 8005550:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <SX1276OnTimeoutIrq+0xd0>)
 8005554:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005558:	b143      	cbz	r3, 800556c <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <SX1276OnTimeoutIrq+0xd4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f6      	beq.n	8005550 <SX1276OnTimeoutIrq+0x10>
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f3      	beq.n	8005550 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8005568:	4798      	blx	r3
 800556a:	e7f1      	b.n	8005550 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800556c:	4c28      	ldr	r4, [pc, #160]	; (8005610 <SX1276OnTimeoutIrq+0xd0>)
 800556e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005572:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005576:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 800557a:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800557e:	210b      	movs	r1, #11
 8005580:	203e      	movs	r0, #62	; 0x3e
 8005582:	f005 f94b 	bl	800a81c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005586:	2110      	movs	r1, #16
 8005588:	203f      	movs	r0, #63	; 0x3f
 800558a:	f005 f947 	bl	800a81c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800558e:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8005592:	b14b      	cbz	r3, 80055a8 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8005594:	200d      	movs	r0, #13
 8005596:	f005 f94d 	bl	800a834 <SX1276Read>
 800559a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800559e:	b2c9      	uxtb	r1, r1
 80055a0:	200d      	movs	r0, #13
 80055a2:	f005 f93b 	bl	800a81c <SX1276Write>
 80055a6:	e7d8      	b.n	800555a <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <SX1276OnTimeoutIrq+0xd0>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 80055b0:	4819      	ldr	r0, [pc, #100]	; (8005618 <SX1276OnTimeoutIrq+0xd8>)
 80055b2:	f7fe fddf 	bl	8004174 <TimerStop>
 80055b6:	e7d0      	b.n	800555a <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 80055b8:	f7fe fbdc 	bl	8003d74 <SX1276Reset>
        RxChainCalibration( );
 80055bc:	f7ff f960 	bl	8004880 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80055c0:	2000      	movs	r0, #0
 80055c2:	f005 f943 	bl	800a84c <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80055c6:	2400      	movs	r4, #0
 80055c8:	e00c      	b.n	80055e4 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80055ca:	4a14      	ldr	r2, [pc, #80]	; (800561c <SX1276OnTimeoutIrq+0xdc>)
 80055cc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80055d0:	18d5      	adds	r5, r2, r3
 80055d2:	5cd0      	ldrb	r0, [r2, r3]
 80055d4:	f7ff fc2e 	bl	8004e34 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80055d8:	78a9      	ldrb	r1, [r5, #2]
 80055da:	7868      	ldrb	r0, [r5, #1]
 80055dc:	f005 f91e 	bl	800a81c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80055e0:	3401      	adds	r4, #1
 80055e2:	b2e4      	uxtb	r4, r4
 80055e4:	2c0f      	cmp	r4, #15
 80055e6:	d9f0      	bls.n	80055ca <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7ff fc23 	bl	8004e34 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80055ee:	4c08      	ldr	r4, [pc, #32]	; (8005610 <SX1276OnTimeoutIrq+0xd0>)
 80055f0:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 80055f4:	f7ff ff8e 	bl	8005514 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <SX1276OnTimeoutIrq+0xd4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0a4      	beq.n	8005550 <SX1276OnTimeoutIrq+0x10>
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0a1      	beq.n	8005550 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 800560c:	4798      	blx	r3
}
 800560e:	e79f      	b.n	8005550 <SX1276OnTimeoutIrq+0x10>
 8005610:	20000a1c 	.word	0x20000a1c
 8005614:	200008e8 	.word	0x200008e8
 8005618:	200008ec 	.word	0x200008ec
 800561c:	0800c43c 	.word	0x0800c43c

08005620 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8005620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005628:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800562a:	6843      	ldr	r3, [r0, #4]
 800562c:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800562e:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8005630:	2a01      	cmp	r2, #1
 8005632:	d015      	beq.n	8005660 <uart_stm32_configure+0x40>
 8005634:	2a02      	cmp	r2, #2
 8005636:	d116      	bne.n	8005666 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8005638:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 800563c:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 800563e:	2b01      	cmp	r3, #1
 8005640:	d017      	beq.n	8005672 <uart_stm32_configure+0x52>
 8005642:	2b02      	cmp	r3, #2
 8005644:	d018      	beq.n	8005678 <uart_stm32_configure+0x58>
 8005646:	b18b      	cbz	r3, 800566c <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8005648:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 800564c:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 800564e:	2902      	cmp	r1, #2
 8005650:	d015      	beq.n	800567e <uart_stm32_configure+0x5e>
 8005652:	2904      	cmp	r1, #4
 8005654:	d019      	beq.n	800568a <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8005656:	2a00      	cmp	r2, #0
 8005658:	f040 8097 	bne.w	800578a <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 800565c:	2700      	movs	r7, #0
 800565e:	e016      	b.n	800568e <uart_stm32_configure+0x6e>
	switch (parity) {
 8005660:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8005664:	e7ea      	b.n	800563c <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8005666:	f04f 0e00 	mov.w	lr, #0
 800566a:	e7e7      	b.n	800563c <uart_stm32_configure+0x1c>
	switch (sb) {
 800566c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8005670:	e7ec      	b.n	800564c <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 8005672:	f04f 0c00 	mov.w	ip, #0
 8005676:	e7e9      	b.n	800564c <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8005678:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800567c:	e7e6      	b.n	800564c <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800567e:	b10a      	cbz	r2, 8005684 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 8005680:	2700      	movs	r7, #0
 8005682:	e004      	b.n	800568e <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8005684:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8005688:	e001      	b.n	800568e <uart_stm32_configure+0x6e>
	switch (db) {
 800568a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800568e:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8005692:	f1ba 0f01 	cmp.w	sl, #1
 8005696:	d07b      	beq.n	8005790 <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8005698:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800569c:	f1a2 0903 	sub.w	r9, r2, #3
 80056a0:	fa5f f989 	uxtb.w	r9, r9
 80056a4:	f1b9 0f01 	cmp.w	r9, #1
 80056a8:	f240 809e 	bls.w	80057e8 <uart_stm32_configure+0x1c8>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80056ac:	b112      	cbz	r2, 80056b4 <uart_stm32_configure+0x94>
 80056ae:	2904      	cmp	r1, #4
 80056b0:	f000 809d 	beq.w	80057ee <uart_stm32_configure+0x1ce>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 809d 	beq.w	80057f4 <uart_stm32_configure+0x1d4>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	f000 809d 	beq.w	80057fa <uart_stm32_configure+0x1da>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80056c0:	2901      	cmp	r1, #1
 80056c2:	f240 809d 	bls.w	8005800 <uart_stm32_configure+0x1e0>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80056c6:	2904      	cmp	r1, #4
 80056c8:	f000 809d 	beq.w	8005806 <uart_stm32_configure+0x1e6>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80056cc:	f1ba 0f00 	cmp.w	sl, #0
 80056d0:	d017      	beq.n	8005702 <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80056d2:	4b51      	ldr	r3, [pc, #324]	; (8005818 <uart_stm32_configure+0x1f8>)
 80056d4:	429d      	cmp	r5, r3
 80056d6:	d010      	beq.n	80056fa <uart_stm32_configure+0xda>
 80056d8:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80056dc:	429d      	cmp	r5, r3
 80056de:	d00c      	beq.n	80056fa <uart_stm32_configure+0xda>
 80056e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e4:	429d      	cmp	r5, r3
 80056e6:	d008      	beq.n	80056fa <uart_stm32_configure+0xda>
 80056e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ec:	429d      	cmp	r5, r3
 80056ee:	d004      	beq.n	80056fa <uart_stm32_configure+0xda>
 80056f0:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80056f4:	429d      	cmp	r5, r3
 80056f6:	f040 8089 	bne.w	800580c <uart_stm32_configure+0x1ec>
 80056fa:	f1ba 0f01 	cmp.w	sl, #1
 80056fe:	f040 8088 	bne.w	8005812 <uart_stm32_configure+0x1f2>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005702:	682b      	ldr	r3, [r5, #0]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800570a:	6843      	ldr	r3, [r0, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8005714:	459e      	cmp	lr, r3
 8005716:	d005      	beq.n	8005724 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800571e:	ea4e 0303 	orr.w	r3, lr, r3
 8005722:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005724:	6843      	ldr	r3, [r0, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005728:	6853      	ldr	r3, [r2, #4]
 800572a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800572e:	459c      	cmp	ip, r3
 8005730:	d005      	beq.n	800573e <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005732:	6853      	ldr	r3, [r2, #4]
 8005734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005738:	ea4c 0303 	orr.w	r3, ip, r3
 800573c:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800573e:	6843      	ldr	r3, [r0, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8005748:	429f      	cmp	r7, r3
 800574a:	d004      	beq.n	8005756 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800574c:	6813      	ldr	r3, [r2, #0]
 800574e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8005752:	431f      	orrs	r7, r3
 8005754:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005756:	6843      	ldr	r3, [r0, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800575a:	6893      	ldr	r3, [r2, #8]
 800575c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8005760:	4598      	cmp	r8, r3
 8005762:	d005      	beq.n	8005770 <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005764:	6893      	ldr	r3, [r2, #8]
 8005766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576a:	ea48 0303 	orr.w	r3, r8, r3
 800576e:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8005770:	f8d4 8000 	ldr.w	r8, [r4]
 8005774:	6833      	ldr	r3, [r6, #0]
 8005776:	4598      	cmp	r8, r3
 8005778:	d10d      	bne.n	8005796 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8005782:	2000      	movs	r0, #0
};
 8005784:	b002      	add	sp, #8
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 800578a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800578e:	e77e      	b.n	800568e <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 8005790:	f44f 7840 	mov.w	r8, #768	; 0x300
 8005794:	e782      	b.n	800569c <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005796:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005798:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800579c:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 80057a0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80057a4:	4650      	mov	r0, sl
 80057a6:	f005 f96a 	bl	800aa7e <z_device_ready>
 80057aa:	b1b8      	cbz	r0, 80057dc <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 80057ac:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	b1b3      	cbz	r3, 80057e2 <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 80057b4:	aa01      	add	r2, sp, #4
 80057b6:	4649      	mov	r1, r9
 80057b8:	4650      	mov	r0, sl
 80057ba:	4798      	blx	r3
 80057bc:	2800      	cmp	r0, #0
 80057be:	db0a      	blt.n	80057d6 <uart_stm32_configure+0x1b6>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c6:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80057c8:	9b01      	ldr	r3, [sp, #4]
 80057ca:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80057ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	e7ce      	b.n	800577a <uart_stm32_configure+0x15a>
 80057dc:	f06f 0012 	mvn.w	r0, #18
 80057e0:	e7ec      	b.n	80057bc <uart_stm32_configure+0x19c>
		return -ENOSYS;
 80057e2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80057e6:	e7e9      	b.n	80057bc <uart_stm32_configure+0x19c>
		return -ENOTSUP;
 80057e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80057ec:	e7ca      	b.n	8005784 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80057ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80057f2:	e7c7      	b.n	8005784 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80057f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80057f8:	e7c4      	b.n	8005784 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80057fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80057fe:	e7c1      	b.n	8005784 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8005800:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005804:	e7be      	b.n	8005784 <uart_stm32_configure+0x164>
 8005806:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800580a:	e7bb      	b.n	8005784 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 800580c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005810:	e7b8      	b.n	8005784 <uart_stm32_configure+0x164>
 8005812:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005816:	e7b5      	b.n	8005784 <uart_stm32_configure+0x164>
 8005818:	40013800 	.word	0x40013800

0800581c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 800581c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005820:	b083      	sub	sp, #12
 8005822:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8005824:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005826:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800582a:	4637      	mov	r7, r6
 800582c:	f857 4b08 	ldr.w	r4, [r7], #8
	data->clock = clk;
 8005830:	4841      	ldr	r0, [pc, #260]	; (8005938 <uart_stm32_init+0x11c>)
 8005832:	f8c8 0004 	str.w	r0, [r8, #4]
 8005836:	f005 f922 	bl	800aa7e <z_device_ready>
 800583a:	2800      	cmp	r0, #0
 800583c:	d063      	beq.n	8005906 <uart_stm32_init+0xea>
	const struct clock_control_driver_api *api =
 800583e:	483e      	ldr	r0, [pc, #248]	; (8005938 <uart_stm32_init+0x11c>)
 8005840:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4639      	mov	r1, r7
 8005846:	4798      	blx	r3
 8005848:	4607      	mov	r7, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800584a:	2f00      	cmp	r7, #0
 800584c:	d16e      	bne.n	800592c <uart_stm32_init+0x110>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 800584e:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	69f1      	ldr	r1, [r6, #28]
 8005854:	69b0      	ldr	r0, [r6, #24]
 8005856:	f003 fffe 	bl	8009856 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 800585a:	2800      	cmp	r0, #0
 800585c:	db69      	blt.n	8005932 <uart_stm32_init+0x116>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f043 030c 	orr.w	r3, r3, #12
 800586c:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800586e:	6973      	ldr	r3, [r6, #20]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d050      	beq.n	8005916 <uart_stm32_init+0xfa>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8005874:	2b01      	cmp	r3, #1
 8005876:	d049      	beq.n	800590c <uart_stm32_init+0xf0>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8005878:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800587a:	4619      	mov	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005882:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8005886:	430b      	orrs	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005892:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8005894:	7c33      	ldrb	r3, [r6, #16]
 8005896:	b12b      	cbz	r3, 80058a4 <uart_stm32_init+0x88>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005898:	686b      	ldr	r3, [r5, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800589c:	6893      	ldr	r3, [r2, #8]
 800589e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80058a2:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80058a4:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80058a8:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80058aa:	686d      	ldr	r5, [r5, #4]
 80058ac:	f855 6b08 	ldr.w	r6, [r5], #8
	if (clock_control_get_rate(data->clock,
 80058b0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80058b4:	4648      	mov	r0, r9
 80058b6:	f005 f8e2 	bl	800aa7e <z_device_ready>
 80058ba:	b388      	cbz	r0, 8005920 <uart_stm32_init+0x104>
	const struct clock_control_driver_api *api =
 80058bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	b383      	cbz	r3, 8005926 <uart_stm32_init+0x10a>
	return api->get_rate(dev, sys, rate);
 80058c4:	aa01      	add	r2, sp, #4
 80058c6:	4629      	mov	r1, r5
 80058c8:	4648      	mov	r0, r9
 80058ca:	4798      	blx	r3
 80058cc:	2800      	cmp	r0, #0
 80058ce:	db0a      	blt.n	80058e6 <uart_stm32_init+0xca>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d6:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80058de:	fbb3 f3f8 	udiv	r3, r3, r8
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	60f3      	str	r3, [r6, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80058ee:	69e3      	ldr	r3, [r4, #28]
 80058f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80058f4:	d0fb      	beq.n	80058ee <uart_stm32_init+0xd2>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80058f6:	69e3      	ldr	r3, [r4, #28]
 80058f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80058fc:	d0fb      	beq.n	80058f6 <uart_stm32_init+0xda>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80058fe:	4638      	mov	r0, r7
 8005900:	b003      	add	sp, #12
 8005902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005906:	f06f 0712 	mvn.w	r7, #18
 800590a:	e79e      	b.n	800584a <uart_stm32_init+0x2e>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800590c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8005910:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005914:	e7b2      	b.n	800587c <uart_stm32_init+0x60>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8005916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800591a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800591e:	e7ad      	b.n	800587c <uart_stm32_init+0x60>
 8005920:	f06f 0012 	mvn.w	r0, #18
 8005924:	e7d2      	b.n	80058cc <uart_stm32_init+0xb0>
		return -ENOSYS;
 8005926:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800592a:	e7cf      	b.n	80058cc <uart_stm32_init+0xb0>
		return -EIO;
 800592c:	f06f 0704 	mvn.w	r7, #4
 8005930:	e7e5      	b.n	80058fe <uart_stm32_init+0xe2>
		return err;
 8005932:	4607      	mov	r7, r0
 8005934:	e7e3      	b.n	80058fe <uart_stm32_init+0xe2>
 8005936:	bf00      	nop
 8005938:	0800bb80 	.word	0x0800bb80

0800593c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800593c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005940:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005942:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005944:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005946:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800594a:	d101      	bne.n	8005950 <elapsed+0x14>
	    || (val1 < val2)) {
 800594c:	4281      	cmp	r1, r0
 800594e:	d208      	bcs.n	8005962 <elapsed+0x26>
		overflow_cyc += last_load;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <elapsed+0x34>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4907      	ldr	r1, [pc, #28]	; (8005974 <elapsed+0x38>)
 8005956:	6809      	ldr	r1, [r1, #0]
 8005958:	440a      	add	r2, r1
 800595a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800595c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005960:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <elapsed+0x38>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1a1b      	subs	r3, r3, r0
 8005968:	4a01      	ldr	r2, [pc, #4]	; (8005970 <elapsed+0x34>)
 800596a:	6810      	ldr	r0, [r2, #0]
}
 800596c:	4418      	add	r0, r3
 800596e:	4770      	bx	lr
 8005970:	20000b84 	.word	0x20000b84
 8005974:	20000b80 	.word	0x20000b80

08005978 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8005978:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800597a:	f7ff ffdf 	bl	800593c <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <sys_clock_isr+0x38>)
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <sys_clock_isr+0x3c>)
 8005984:	6811      	ldr	r1, [r2, #0]
 8005986:	4408      	add	r0, r1
 8005988:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <sys_clock_isr+0x40>)
 8005990:	6813      	ldr	r3, [r2, #0]
 8005992:	1ac0      	subs	r0, r0, r3
 8005994:	4909      	ldr	r1, [pc, #36]	; (80059bc <sys_clock_isr+0x44>)
 8005996:	fba1 1000 	umull	r1, r0, r1, r0
 800599a:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 800599c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80059a0:	fb01 3300 	mla	r3, r1, r0, r3
 80059a4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80059a6:	f001 fb59 	bl	800705c <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 80059aa:	f7fd f8cb 	bl	8002b44 <z_arm_exc_exit>
}
 80059ae:	bd08      	pop	{r3, pc}
 80059b0:	20000b84 	.word	0x20000b84
 80059b4:	20000b7c 	.word	0x20000b7c
 80059b8:	20000b78 	.word	0x20000b78
 80059bc:	10624dd3 	.word	0x10624dd3

080059c0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <sys_clock_driver_init+0x28>)
 80059c2:	2210      	movs	r2, #16
 80059c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80059c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80059cc:	4b07      	ldr	r3, [pc, #28]	; (80059ec <sys_clock_driver_init+0x2c>)
 80059ce:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80059d0:	2000      	movs	r0, #0
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <sys_clock_driver_init+0x30>)
 80059d4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80059d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059da:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80059dc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	f042 0207 	orr.w	r2, r2, #7
 80059e4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80059e6:	4770      	bx	lr
 80059e8:	e000ed00 	.word	0xe000ed00
 80059ec:	20000b80 	.word	0x20000b80
 80059f0:	20000b84 	.word	0x20000b84

080059f4 <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80059f4:	b111      	cbz	r1, 80059fc <sys_clock_set_timeout+0x8>
 80059f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80059fa:	d00e      	beq.n	8005a1a <sys_clock_set_timeout+0x26>
{
 80059fc:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005a00:	681c      	ldr	r4, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005a02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a06:	d013      	beq.n	8005a30 <sys_clock_set_timeout+0x3c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005a08:	1e46      	subs	r6, r0, #1
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	dd13      	ble.n	8005a36 <sys_clock_set_timeout+0x42>
 8005a0e:	f5b6 6f03 	cmp.w	r6, #2096	; 0x830
 8005a12:	db11      	blt.n	8005a38 <sys_clock_set_timeout+0x44>
 8005a14:	f44f 6603 	mov.w	r6, #2096	; 0x830
 8005a18:	e00e      	b.n	8005a38 <sys_clock_set_timeout+0x44>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8005a1a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005a1e:	6913      	ldr	r3, [r2, #16]
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005a28:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8005a2c:	601a      	str	r2, [r3, #0]
		return;
 8005a2e:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005a30:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8005a34:	e7e8      	b.n	8005a08 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005a36:	2600      	movs	r6, #0
	__asm__ volatile(
 8005a38:	f04f 0310 	mov.w	r3, #16
 8005a3c:	f3ef 8511 	mrs	r5, BASEPRI
 8005a40:	f383 8812 	msr	BASEPRI_MAX, r3
 8005a44:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 8005a48:	f7ff ff78 	bl	800593c <elapsed>

	val1 = SysTick->VAL;
 8005a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a50:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <sys_clock_set_timeout+0xec>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4410      	add	r0, r2
 8005a58:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <sys_clock_set_timeout+0xf0>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <sys_clock_set_timeout+0xf4>)
 8005a62:	681a      	ldr	r2, [r3, #0]

	if ((int32_t)unannounced < 0) {
 8005a64:	1a83      	subs	r3, r0, r2
 8005a66:	d416      	bmi.n	8005a96 <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 8005a68:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40

		/* Round delay up to next tick boundary */
		delay += unannounced;
 8005a6c:	fb0c 3306 	mla	r3, ip, r6, r3
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005a70:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8005a74:	331f      	adds	r3, #31
 8005a76:	4e1d      	ldr	r6, [pc, #116]	; (8005aec <sys_clock_set_timeout+0xf8>)
 8005a78:	fba6 6303 	umull	r6, r3, r6, r3
 8005a7c:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8005a7e:	1a12      	subs	r2, r2, r0
 8005a80:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d90a      	bls.n	8005aa0 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 8005a8a:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <sys_clock_set_timeout+0xfc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d909      	bls.n	8005aa4 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e008      	b.n	8005aa8 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e003      	b.n	8005aa8 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8005aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 8005aa4:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005aa6:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 8005aa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005aac:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 8005aae:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <sys_clock_set_timeout+0xe8>)
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 8005aba:	42b1      	cmp	r1, r6
 8005abc:	d209      	bcs.n	8005ad2 <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 8005abe:	1ba4      	subs	r4, r4, r6
 8005ac0:	440c      	add	r4, r1
 8005ac2:	4420      	add	r0, r4
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <sys_clock_set_timeout+0xec>)
 8005ac6:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8005ac8:	f385 8811 	msr	BASEPRI, r5
 8005acc:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8005ad2:	1b8c      	subs	r4, r1, r6
 8005ad4:	4420      	add	r0, r4
 8005ad6:	4b02      	ldr	r3, [pc, #8]	; (8005ae0 <sys_clock_set_timeout+0xec>)
 8005ad8:	6018      	str	r0, [r3, #0]
 8005ada:	e7f5      	b.n	8005ac8 <sys_clock_set_timeout+0xd4>
 8005adc:	20000b80 	.word	0x20000b80
 8005ae0:	20000b7c 	.word	0x20000b7c
 8005ae4:	20000b84 	.word	0x20000b84
 8005ae8:	20000b78 	.word	0x20000b78
 8005aec:	10624dd3 	.word	0x10624dd3
 8005af0:	00ffdc00 	.word	0x00ffdc00

08005af4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8005af4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005af6:	f04f 0310 	mov.w	r3, #16
 8005afa:	f3ef 8411 	mrs	r4, BASEPRI
 8005afe:	f383 8812 	msr	BASEPRI_MAX, r3
 8005b02:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005b06:	f7ff ff19 	bl	800593c <elapsed>
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <sys_clock_elapsed+0x34>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4418      	add	r0, r3
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <sys_clock_elapsed+0x38>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8005b16:	f384 8811 	msr	BASEPRI, r4
 8005b1a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <sys_clock_elapsed+0x3c>)
 8005b20:	fba3 3000 	umull	r3, r0, r3, r0
}
 8005b24:	0a40      	lsrs	r0, r0, #9
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	20000b7c 	.word	0x20000b7c
 8005b2c:	20000b78 	.word	0x20000b78
 8005b30:	10624dd3 	.word	0x10624dd3

08005b34 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8005b34:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005b36:	f04f 0310 	mov.w	r3, #16
 8005b3a:	f3ef 8411 	mrs	r4, BASEPRI
 8005b3e:	f383 8812 	msr	BASEPRI_MAX, r3
 8005b42:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8005b46:	f7ff fef9 	bl	800593c <elapsed>
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <sys_clock_cycle_get_32+0x28>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4418      	add	r0, r3
	__asm__ volatile(
 8005b50:	f384 8811 	msr	BASEPRI, r4
 8005b54:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000b7c 	.word	0x20000b7c

08005b60 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <UTILS_PLL_IsBusy+0x20>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b68:	d007      	beq.n	8005b7a <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8005b6a:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <UTILS_PLL_IsBusy+0x20>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005b74:	d000      	beq.n	8005b78 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 8005b76:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8005b78:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e7f6      	b.n	8005b6c <UTILS_PLL_IsBusy+0xc>
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000

08005b84 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <LL_SetSystemCoreClock+0x8>)
 8005b86:	6018      	str	r0, [r3, #0]
}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	200000ac 	.word	0x200000ac

08005b90 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8005b90:	1e42      	subs	r2, r0, #1
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <LL_SetFlashLatency+0xa8>)
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d84c      	bhi.n	8005c32 <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <LL_SetFlashLatency+0xac>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d011      	beq.n	8005bca <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8005ba6:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <LL_SetFlashLatency+0xb0>)
 8005ba8:	4298      	cmp	r0, r3
 8005baa:	d829      	bhi.n	8005c00 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8005bac:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8005bb0:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8005bb4:	4298      	cmp	r0, r3
 8005bb6:	d832      	bhi.n	8005c1e <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <LL_SetFlashLatency+0xb4>)
 8005bba:	4298      	cmp	r0, r3
 8005bbc:	d832      	bhi.n	8005c24 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <LL_SetFlashLatency+0xb8>)
 8005bc0:	4298      	cmp	r0, r3
 8005bc2:	d832      	bhi.n	8005c2a <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005bc4:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	e01c      	b.n	8005c04 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <LL_SetFlashLatency+0xbc>)
 8005bcc:	4298      	cmp	r0, r3
 8005bce:	d80b      	bhi.n	8005be8 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <LL_SetFlashLatency+0xc0>)
 8005bd2:	4298      	cmp	r0, r3
 8005bd4:	d80b      	bhi.n	8005bee <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <LL_SetFlashLatency+0xc4>)
 8005bd8:	4298      	cmp	r0, r3
 8005bda:	d80b      	bhi.n	8005bf4 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <LL_SetFlashLatency+0xc8>)
 8005bde:	4298      	cmp	r0, r3
 8005be0:	d80b      	bhi.n	8005bfa <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005be2:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8005be4:	4608      	mov	r0, r1
 8005be6:	e00d      	b.n	8005c04 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 8005be8:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 8005bea:	2000      	movs	r0, #0
 8005bec:	e00a      	b.n	8005c04 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 8005bee:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e007      	b.n	8005c04 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8005bf4:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e004      	b.n	8005c04 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8005bfa:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e001      	b.n	8005c04 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005c00:	2100      	movs	r1, #0
        status = ERROR;
 8005c02:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005c04:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <LL_SetFlashLatency+0xcc>)
 8005c06:	6813      	ldr	r3, [r2, #0]
 8005c08:	f023 0307 	bic.w	r3, r3, #7
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005c10:	6813      	ldr	r3, [r2, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 8005c16:	4299      	cmp	r1, r3
 8005c18:	d00a      	beq.n	8005c30 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 8005c1a:	2001      	movs	r0, #1
}
 8005c1c:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8005c1e:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8005c20:	2000      	movs	r0, #0
 8005c22:	e7ef      	b.n	8005c04 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8005c24:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8005c26:	2000      	movs	r0, #0
 8005c28:	e7ec      	b.n	8005c04 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8005c2a:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e7e9      	b.n	8005c04 <LL_SetFlashLatency+0x74>
 8005c30:	4770      	bx	lr
    status = ERROR;
 8005c32:	2001      	movs	r0, #1
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	04c4b3ff 	.word	0x04c4b3ff
 8005c3c:	40007000 	.word	0x40007000
 8005c40:	018cba80 	.word	0x018cba80
 8005c44:	00b71b00 	.word	0x00b71b00
 8005c48:	005b8d80 	.word	0x005b8d80
 8005c4c:	03d09000 	.word	0x03d09000
 8005c50:	02dc6c00 	.word	0x02dc6c00
 8005c54:	01e84800 	.word	0x01e84800
 8005c58:	00f42400 	.word	0x00f42400
 8005c5c:	40022000 	.word	0x40022000

08005c60 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005c64:	680b      	ldr	r3, [r1, #0]
 8005c66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c6a:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005c6c:	5cd3      	ldrb	r3, [r2, r3]
 8005c6e:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8005c72:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	42ab      	cmp	r3, r5
 8005c78:	d333      	bcc.n	8005ce2 <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 8005c7a:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c7c:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005c84:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005c8c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005c96:	d0fa      	beq.n	8005c8e <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8005c98:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	f042 0203 	orr.w	r2, r2, #3
 8005cac:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cae:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d1f9      	bne.n	8005cae <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8005cba:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005cbc:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005cbe:	6899      	ldr	r1, [r3, #8]
 8005cc0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8005cc8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	d809      	bhi.n	8005cf0 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8005cdc:	b16e      	cbz	r6, 8005cfa <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8005cde:	4630      	mov	r0, r6
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7ff ff54 	bl	8005b90 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8005ce8:	4606      	mov	r6, r0
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d1f2      	bne.n	8005cd4 <UTILS_EnablePLLAndSwitchSystem+0x74>
 8005cee:	e7c5      	b.n	8005c7c <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f7ff ff4d 	bl	8005b90 <LL_SetFlashLatency>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	e7f0      	b.n	8005cdc <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f7ff ff42 	bl	8005b84 <LL_SetSystemCoreClock>
 8005d00:	e7ed      	b.n	8005cde <UTILS_EnablePLLAndSwitchSystem+0x7e>
 8005d02:	bf00      	nop
 8005d04:	0800c4c4 	.word	0x0800c4c4
 8005d08:	200000ac 	.word	0x200000ac
 8005d0c:	40021000 	.word	0x40021000

08005d10 <LL_PLL_ConfigSystemClock_HSI>:
{
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8005d16:	f7ff ff23 	bl	8005b60 <UTILS_PLL_IsBusy>
 8005d1a:	bb20      	cbnz	r0, 8005d66 <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4813      	ldr	r0, [pc, #76]	; (8005d6c <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 8005d20:	f004 fe9c 	bl	800aa5c <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005d2c:	d109      	bne.n	8005d42 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005d2e:	4a10      	ldr	r2, [pc, #64]	; (8005d70 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d36:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005d40:	d0fa      	beq.n	8005d38 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	6866      	ldr	r6, [r4, #4]
 8005d46:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8005d48:	4c09      	ldr	r4, [pc, #36]	; (8005d70 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8005d4a:	68e7      	ldr	r7, [r4, #12]
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 8005d4e:	403b      	ands	r3, r7
 8005d50:	f042 0202 	orr.w	r2, r2, #2
 8005d54:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7ff ff7e 	bl	8005c60 <UTILS_EnablePLLAndSwitchSystem>
}
 8005d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 8005d66:	2001      	movs	r0, #1
 8005d68:	e7fc      	b.n	8005d64 <LL_PLL_ConfigSystemClock_HSI+0x54>
 8005d6a:	bf00      	nop
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	40021000 	.word	0x40021000
 8005d74:	f9ff808c 	.word	0xf9ff808c

08005d78 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8005d78:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8005d7a:	e000      	b.n	8005d7e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8005d7c:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8005d7e:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <z_device_state_init+0x14>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d3fb      	bcc.n	8005d7c <z_device_state_init+0x4>
	}
}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	0800bb80 	.word	0x0800bb80
 8005d8c:	0800bca0 	.word	0x0800bca0

08005d90 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005d94:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <z_sys_init_run_level+0x4c>)
 8005d96:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005d9a:	e009      	b.n	8005db0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8005d9c:	4240      	negs	r0, r0
 8005d9e:	e017      	b.n	8005dd0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8005da0:	68eb      	ldr	r3, [r5, #12]
 8005da2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8005da4:	68ea      	ldr	r2, [r5, #12]
 8005da6:	7853      	ldrb	r3, [r2, #1]
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005dae:	3408      	adds	r4, #8
 8005db0:	1c73      	adds	r3, r6, #1
 8005db2:	4a0a      	ldr	r2, [pc, #40]	; (8005ddc <z_sys_init_run_level+0x4c>)
 8005db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d90d      	bls.n	8005dd8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8005dbc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	4798      	blx	r3
		if (dev != NULL) {
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d0f2      	beq.n	8005dae <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0eb      	beq.n	8005da4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	dbe5      	blt.n	8005d9c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8005dd0:	28ff      	cmp	r0, #255	; 0xff
 8005dd2:	dde5      	ble.n	8005da0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8005dd4:	20ff      	movs	r0, #255	; 0xff
 8005dd6:	e7e3      	b.n	8005da0 <z_sys_init_run_level+0x10>
		}
	}
}
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	bf00      	nop
 8005ddc:	0800c4d4 	.word	0x0800c4d4

08005de0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8005de0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8005de2:	4605      	mov	r5, r0
 8005de4:	b328      	cbz	r0, 8005e32 <z_impl_device_get_binding+0x52>
 8005de6:	7803      	ldrb	r3, [r0, #0]
 8005de8:	b32b      	cbz	r3, 8005e36 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8005dea:	4c14      	ldr	r4, [pc, #80]	; (8005e3c <z_impl_device_get_binding+0x5c>)
 8005dec:	e000      	b.n	8005df0 <z_impl_device_get_binding+0x10>
 8005dee:	3418      	adds	r4, #24
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <z_impl_device_get_binding+0x60>)
 8005df2:	429c      	cmp	r4, r3
 8005df4:	d008      	beq.n	8005e08 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8005df6:	4620      	mov	r0, r4
 8005df8:	f004 fe41 	bl	800aa7e <z_device_ready>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d0f6      	beq.n	8005dee <z_impl_device_get_binding+0xe>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	42ab      	cmp	r3, r5
 8005e04:	d1f3      	bne.n	8005dee <z_impl_device_get_binding+0xe>
 8005e06:	e012      	b.n	8005e2e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8005e08:	4c0c      	ldr	r4, [pc, #48]	; (8005e3c <z_impl_device_get_binding+0x5c>)
 8005e0a:	e000      	b.n	8005e0e <z_impl_device_get_binding+0x2e>
 8005e0c:	3418      	adds	r4, #24
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <z_impl_device_get_binding+0x60>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	d00b      	beq.n	8005e2c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8005e14:	4620      	mov	r0, r4
 8005e16:	f004 fe32 	bl	800aa7e <z_device_ready>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0f6      	beq.n	8005e0c <z_impl_device_get_binding+0x2c>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7fb f80e 	bl	8000e42 <strcmp>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d1f0      	bne.n	8005e0c <z_impl_device_get_binding+0x2c>
 8005e2a:	e000      	b.n	8005e2e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8005e2c:	2400      	movs	r4, #0
}
 8005e2e:	4620      	mov	r0, r4
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8005e32:	4604      	mov	r4, r0
 8005e34:	e7fb      	b.n	8005e2e <z_impl_device_get_binding+0x4e>
 8005e36:	2400      	movs	r4, #0
 8005e38:	e7f9      	b.n	8005e2e <z_impl_device_get_binding+0x4e>
 8005e3a:	bf00      	nop
 8005e3c:	0800bb80 	.word	0x0800bb80
 8005e40:	0800bca0 	.word	0x0800bca0

08005e44 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8005e44:	b510      	push	{r4, lr}
 8005e46:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8005e48:	4c10      	ldr	r4, [pc, #64]	; (8005e8c <init_idle_thread+0x48>)
 8005e4a:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8005e4e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8005e52:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <init_idle_thread+0x4c>)
 8005e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 8005e58:	2200      	movs	r2, #0
 8005e5a:	9205      	str	r2, [sp, #20]
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	9104      	str	r1, [sp, #16]
 8005e60:	210f      	movs	r1, #15
 8005e62:	9103      	str	r1, [sp, #12]
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	9201      	str	r2, [sp, #4]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <init_idle_thread+0x50>)
 8005e6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e70:	4909      	ldr	r1, [pc, #36]	; (8005e98 <init_idle_thread+0x54>)
 8005e72:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 8005e76:	fb0c 1100 	mla	r1, ip, r0, r1
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f8d8 	bl	8006030 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005e80:	7b63      	ldrb	r3, [r4, #13]
 8005e82:	f023 0304 	bic.w	r3, r3, #4
 8005e86:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8005e88:	b006      	add	sp, #24
 8005e8a:	bd10      	pop	{r4, pc}
 8005e8c:	200004d8 	.word	0x200004d8
 8005e90:	20000b88 	.word	0x20000b88
 8005e94:	0800ab77 	.word	0x0800ab77
 8005e98:	20002460 	.word	0x20002460

08005e9c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8005ea0:	f000 fee4 	bl	8006c6c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8005ea4:	4d1b      	ldr	r5, [pc, #108]	; (8005f14 <prepare_multithreading+0x78>)
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <prepare_multithreading+0x7c>)
 8005ea8:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <prepare_multithreading+0x80>)
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	2301      	movs	r3, #1
 8005eb0:	9304      	str	r3, [sp, #16]
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	9403      	str	r4, [sp, #12]
 8005eb6:	9402      	str	r4, [sp, #8]
 8005eb8:	9401      	str	r4, [sp, #4]
 8005eba:	9400      	str	r4, [sp, #0]
 8005ebc:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <prepare_multithreading+0x84>)
 8005ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ec2:	4918      	ldr	r1, [pc, #96]	; (8005f24 <prepare_multithreading+0x88>)
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 f8b3 	bl	8006030 <z_setup_new_thread>
 8005eca:	4606      	mov	r6, r0
 8005ecc:	7b6b      	ldrb	r3, [r5, #13]
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f004 ffc5 	bl	800ae64 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005eda:	2c00      	cmp	r4, #0
 8005edc:	dd02      	ble.n	8005ee4 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8005ede:	4630      	mov	r0, r6
 8005ee0:	b006      	add	sp, #24
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff ffad 	bl	8005e44 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8005eea:	4a0f      	ldr	r2, [pc, #60]	; (8005f28 <prepare_multithreading+0x8c>)
 8005eec:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8005ef0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <prepare_multithreading+0x7c>)
 8005ef6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005efa:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8005efc:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8005efe:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8005f02:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <prepare_multithreading+0x90>)
 8005f04:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005f08:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8005f0c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005f0e:	3401      	adds	r4, #1
 8005f10:	e7e3      	b.n	8005eda <prepare_multithreading+0x3e>
 8005f12:	bf00      	nop
 8005f14:	20000558 	.word	0x20000558
 8005f18:	20000b88 	.word	0x20000b88
 8005f1c:	0800c4ec 	.word	0x0800c4ec
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	20001440 	.word	0x20001440
 8005f28:	200004d8 	.word	0x200004d8
 8005f2c:	200025c0 	.word	0x200025c0

08005f30 <bg_thread_main>:
{
 8005f30:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <bg_thread_main+0x30>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8005f38:	2002      	movs	r0, #2
 8005f3a:	f7ff ff29 	bl	8005d90 <z_sys_init_run_level>
	boot_banner();
 8005f3e:	f001 fc9f 	bl	8007880 <boot_banner>
	z_cpp_init_static();
 8005f42:	f003 fc82 	bl	800984a <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8005f46:	2003      	movs	r0, #3
 8005f48:	f7ff ff22 	bl	8005d90 <z_sys_init_run_level>
	z_init_static_threads();
 8005f4c:	f000 f8a0 	bl	8006090 <z_init_static_threads>
	main();
 8005f50:	f005 fa1c 	bl	800b38c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8005f54:	4a03      	ldr	r2, [pc, #12]	; (8005f64 <bg_thread_main+0x34>)
 8005f56:	7b13      	ldrb	r3, [r2, #12]
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005f5e:	bd08      	pop	{r3, pc}
 8005f60:	20000be5 	.word	0x20000be5
 8005f64:	20000558 	.word	0x20000558

08005f68 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8005f68:	b508      	push	{r3, lr}
 8005f6a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8005f6c:	4a01      	ldr	r2, [pc, #4]	; (8005f74 <switch_to_main_thread+0xc>)
 8005f6e:	4802      	ldr	r0, [pc, #8]	; (8005f78 <switch_to_main_thread+0x10>)
 8005f70:	f7fc fdbe 	bl	8002af0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8005f74:	08005f31 	.word	0x08005f31
 8005f78:	20000558 	.word	0x20000558

08005f7c <z_bss_zero>:
{
 8005f7c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8005f7e:	4803      	ldr	r0, [pc, #12]	; (8005f8c <z_bss_zero+0x10>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8005f80:	4a03      	ldr	r2, [pc, #12]	; (8005f90 <z_bss_zero+0x14>)
 8005f82:	1a12      	subs	r2, r2, r0
 8005f84:	2100      	movs	r1, #0
 8005f86:	f005 fa7f 	bl	800b488 <memset>
}
 8005f8a:	bd08      	pop	{r3, pc}
 8005f8c:	200003a0 	.word	0x200003a0
 8005f90:	20000be8 	.word	0x20000be8

08005f94 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8005f94:	b500      	push	{lr}
 8005f96:	b0a1      	sub	sp, #132	; 0x84
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <z_cstart+0x74>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005f9a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8005f9e:	4c1b      	ldr	r4, [pc, #108]	; (800600c <z_cstart+0x78>)
 8005fa0:	6963      	ldr	r3, [r4, #20]
 8005fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa6:	6163      	str	r3, [r4, #20]
 8005fa8:	23f0      	movs	r3, #240	; 0xf0
 8005faa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8005fae:	2500      	movs	r5, #0
 8005fb0:	77e5      	strb	r5, [r4, #31]
 8005fb2:	7625      	strb	r5, [r4, #24]
 8005fb4:	7665      	strb	r5, [r4, #25]
 8005fb6:	76a5      	strb	r5, [r4, #26]
 8005fb8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fbe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005fc2:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8005fc4:	f7fc fede 	bl	8002d84 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8005fc8:	f7fc fc98 	bl	80028fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8005fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8005fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8005fd4:	f7fc ff9c 	bl	8002f10 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8005fd8:	f7fc ff2c 	bl	8002e34 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8005fdc:	2401      	movs	r4, #1
 8005fde:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8005fe2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8005fe6:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8005fe8:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <z_cstart+0x7c>)
 8005fec:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8005ff0:	f7ff fec2 	bl	8005d78 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f7ff fecb 	bl	8005d90 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff fec8 	bl	8005d90 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8006000:	f7ff ff4c 	bl	8005e9c <prepare_multithreading>
 8006004:	f7ff ffb0 	bl	8005f68 <switch_to_main_thread>
 8006008:	20002de0 	.word	0x20002de0
 800600c:	e000ed00 	.word	0xe000ed00
 8006010:	20000b88 	.word	0x20000b88

08006014 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8006014:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8006016:	ea53 0102 	orrs.w	r1, r3, r2
 800601a:	d102      	bne.n	8006022 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800601c:	f004 fd7a 	bl	800ab14 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8006020:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8006022:	4902      	ldr	r1, [pc, #8]	; (800602c <schedule_new_thread+0x18>)
 8006024:	3018      	adds	r0, #24
 8006026:	f000 ff8b 	bl	8006f40 <z_add_timeout>
 800602a:	e7f9      	b.n	8006020 <schedule_new_thread+0xc>
 800602c:	0800ae9d 	.word	0x0800ae9d

08006030 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8006030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006032:	b085      	sub	sp, #20
 8006034:	4604      	mov	r4, r0
 8006036:	460e      	mov	r6, r1
 8006038:	4615      	mov	r5, r2
 800603a:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800603c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8006040:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8006042:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8006044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006046:	2204      	movs	r2, #4
 8006048:	990d      	ldr	r1, [sp, #52]	; 0x34
 800604a:	f004 fd67 	bl	800ab1c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800604e:	462a      	mov	r2, r5
 8006050:	4631      	mov	r1, r6
 8006052:	4620      	mov	r0, r4
 8006054:	f004 fd46 	bl	800aae4 <setup_thread_stack>
 8006058:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800605a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800605c:	9302      	str	r3, [sp, #8]
 800605e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	463b      	mov	r3, r7
 8006068:	4602      	mov	r2, r0
 800606a:	4631      	mov	r1, r6
 800606c:	4620      	mov	r0, r4
 800606e:	f7fc fcf9 	bl	8002a64 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <z_setup_new_thread+0x5c>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	b123      	cbz	r3, 8006086 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 8006080:	4628      	mov	r0, r5
 8006082:	b005      	add	sp, #20
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8006086:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 8006088:	e7fa      	b.n	8006080 <z_setup_new_thread+0x50>
 800608a:	bf00      	nop
 800608c:	20000b88 	.word	0x20000b88

08006090 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8006090:	b510      	push	{r4, lr}
 8006092:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8006094:	4c1d      	ldr	r4, [pc, #116]	; (800610c <z_init_static_threads+0x7c>)
 8006096:	e014      	b.n	80060c2 <z_init_static_threads+0x32>
		z_setup_new_thread(
 8006098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	6a23      	ldr	r3, [r4, #32]
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	69e3      	ldr	r3, [r4, #28]
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	69a3      	ldr	r3, [r4, #24]
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	6963      	ldr	r3, [r4, #20]
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	68e3      	ldr	r3, [r4, #12]
 80060b2:	68a2      	ldr	r2, [r4, #8]
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	f7ff ffba 	bl	8006030 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80060c0:	3430      	adds	r4, #48	; 0x30
 80060c2:	4b13      	ldr	r3, [pc, #76]	; (8006110 <z_init_static_threads+0x80>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	d3e7      	bcc.n	8006098 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80060c8:	f000 fb54 	bl	8006774 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80060cc:	4c0f      	ldr	r4, [pc, #60]	; (800610c <z_init_static_threads+0x7c>)
 80060ce:	e000      	b.n	80060d2 <z_init_static_threads+0x42>
 80060d0:	3430      	adds	r4, #48	; 0x30
 80060d2:	4b0f      	ldr	r3, [pc, #60]	; (8006110 <z_init_static_threads+0x80>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d214      	bcs.n	8006102 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80060d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060de:	d0f7      	beq.n	80060d0 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 80060e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060e4:	17d8      	asrs	r0, r3, #31
 80060e6:	0082      	lsls	r2, r0, #2
 80060e8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80060ec:	0099      	lsls	r1, r3, #2
 80060ee:	18c9      	adds	r1, r1, r3
 80060f0:	eb40 0002 	adc.w	r0, r0, r2
 80060f4:	184a      	adds	r2, r1, r1
 80060f6:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 80060fa:	6820      	ldr	r0, [r4, #0]
 80060fc:	f7ff ff8a 	bl	8006014 <schedule_new_thread>
 8006100:	e7e6      	b.n	80060d0 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8006102:	f000 fd41 	bl	8006b88 <k_sched_unlock>
}
 8006106:	b006      	add	sp, #24
 8006108:	bd10      	pop	{r4, pc}
 800610a:	bf00      	nop
 800610c:	200002c4 	.word	0x200002c4
 8006110:	20000324 	.word	0x20000324

08006114 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8006114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006118:	b083      	sub	sp, #12
 800611a:	4604      	mov	r4, r0
 800611c:	461d      	mov	r5, r3
	__asm__ volatile(
 800611e:	f04f 0310 	mov.w	r3, #16
 8006122:	f3ef 8711 	mrs	r7, BASEPRI
 8006126:	f383 8812 	msr	BASEPRI_MAX, r3
 800612a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800612e:	68c1      	ldr	r1, [r0, #12]
 8006130:	b999      	cbnz	r1, 800615a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8006132:	2900      	cmp	r1, #0
 8006134:	d14f      	bne.n	80061d6 <z_impl_k_mutex_lock+0xc2>
 8006136:	4b3a      	ldr	r3, [pc, #232]	; (8006220 <z_impl_k_mutex_lock+0x10c>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800613e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8006140:	3101      	adds	r1, #1
 8006142:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 8006144:	4b36      	ldr	r3, [pc, #216]	; (8006220 <z_impl_k_mutex_lock+0x10c>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800614a:	f387 8811 	msr	BASEPRI, r7
 800614e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 8006152:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8006154:	b003      	add	sp, #12
 8006156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800615c:	6882      	ldr	r2, [r0, #8]
 800615e:	4b30      	ldr	r3, [pc, #192]	; (8006220 <z_impl_k_mutex_lock+0x10c>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d0e5      	beq.n	8006132 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8006166:	ea55 0106 	orrs.w	r1, r5, r6
 800616a:	bf0c      	ite	eq
 800616c:	f04f 0801 	moveq.w	r8, #1
 8006170:	f04f 0800 	movne.w	r8, #0
 8006174:	d031      	beq.n	80061da <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 8006176:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800617a:	4649      	mov	r1, r9
 800617c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8006180:	f004 fd05 	bl	800ab8e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8006184:	4581      	cmp	r9, r0
 8006186:	dc2f      	bgt.n	80061e8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8006188:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800618c:	9600      	str	r6, [sp, #0]
 800618e:	9501      	str	r5, [sp, #4]
 8006190:	4622      	mov	r2, r4
 8006192:	4639      	mov	r1, r7
 8006194:	4823      	ldr	r0, [pc, #140]	; (8006224 <z_impl_k_mutex_lock+0x110>)
 8006196:	f000 fc41 	bl	8006a1c <z_pend_curr>
	if (got_mutex == 0) {
 800619a:	2800      	cmp	r0, #0
 800619c:	d0da      	beq.n	8006154 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800619e:	f04f 0310 	mov.w	r3, #16
 80061a2:	f3ef 8511 	mrs	r5, BASEPRI
 80061a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80061aa:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80061ae:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80061b0:	429c      	cmp	r4, r3
 80061b2:	d01f      	beq.n	80061f4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80061b4:	b1f3      	cbz	r3, 80061f4 <z_impl_k_mutex_lock+0xe0>
 80061b6:	6921      	ldr	r1, [r4, #16]
 80061b8:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80061bc:	f004 fce7 	bl	800ab8e <new_prio_for_inheritance>
 80061c0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80061c2:	4620      	mov	r0, r4
 80061c4:	f004 fcee 	bl	800aba4 <adjust_owner_prio>
 80061c8:	b9b0      	cbnz	r0, 80061f8 <z_impl_k_mutex_lock+0xe4>
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	d015      	beq.n	80061fc <z_impl_k_mutex_lock+0xe8>
 80061d0:	f04f 0801 	mov.w	r8, #1
 80061d4:	e012      	b.n	80061fc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	e7b1      	b.n	800613e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 80061da:	f387 8811 	msr	BASEPRI, r7
 80061de:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80061e2:	f06f 000f 	mvn.w	r0, #15
 80061e6:	e7b5      	b.n	8006154 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 80061e8:	4601      	mov	r1, r0
 80061ea:	4620      	mov	r0, r4
 80061ec:	f004 fcda 	bl	800aba4 <adjust_owner_prio>
 80061f0:	4681      	mov	r9, r0
 80061f2:	e7cb      	b.n	800618c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80061f4:	6921      	ldr	r1, [r4, #16]
 80061f6:	e7e4      	b.n	80061c2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80061f8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 80061fc:	f1b8 0f00 	cmp.w	r8, #0
 8006200:	d106      	bne.n	8006210 <z_impl_k_mutex_lock+0xfc>
 8006202:	f385 8811 	msr	BASEPRI, r5
 8006206:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800620a:	f06f 000a 	mvn.w	r0, #10
 800620e:	e7a1      	b.n	8006154 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8006210:	4629      	mov	r1, r5
 8006212:	4804      	ldr	r0, [pc, #16]	; (8006224 <z_impl_k_mutex_lock+0x110>)
 8006214:	f000 fa92 	bl	800673c <z_reschedule>
	return -EAGAIN;
 8006218:	f06f 000a 	mvn.w	r0, #10
 800621c:	e79a      	b.n	8006154 <z_impl_k_mutex_lock+0x40>
 800621e:	bf00      	nop
 8006220:	20000b88 	.word	0x20000b88
 8006224:	20000bac 	.word	0x20000bac

08006228 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8006228:	6882      	ldr	r2, [r0, #8]
 800622a:	2a00      	cmp	r2, #0
 800622c:	d034      	beq.n	8006298 <z_impl_k_mutex_unlock+0x70>
{
 800622e:	b538      	push	{r3, r4, r5, lr}
 8006230:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <z_impl_k_mutex_unlock+0x7c>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	d131      	bne.n	800629e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800623a:	7bda      	ldrb	r2, [r3, #15]
 800623c:	3a01      	subs	r2, #1
 800623e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8006240:	68c3      	ldr	r3, [r0, #12]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d905      	bls.n	8006252 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8006246:	3b01      	subs	r3, #1
 8006248:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800624a:	f000 fc9d 	bl	8006b88 <k_sched_unlock>

	return 0;
 800624e:	2000      	movs	r0, #0
}
 8006250:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8006252:	f04f 0310 	mov.w	r3, #16
 8006256:	f3ef 8511 	mrs	r5, BASEPRI
 800625a:	f383 8812 	msr	BASEPRI_MAX, r3
 800625e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8006262:	6901      	ldr	r1, [r0, #16]
 8006264:	f004 fc9e 	bl	800aba4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8006268:	4620      	mov	r0, r4
 800626a:	f004 fec2 	bl	800aff2 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800626e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8006270:	b158      	cbz	r0, 800628a <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 8006272:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8006276:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8006278:	2300      	movs	r3, #0
 800627a:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800627c:	f004 fdf2 	bl	800ae64 <z_ready_thread>
		z_reschedule(&lock, key);
 8006280:	4629      	mov	r1, r5
 8006282:	4809      	ldr	r0, [pc, #36]	; (80062a8 <z_impl_k_mutex_unlock+0x80>)
 8006284:	f000 fa5a 	bl	800673c <z_reschedule>
 8006288:	e7df      	b.n	800624a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800628e:	f385 8811 	msr	BASEPRI, r5
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	e7d8      	b.n	800624a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8006298:	f06f 0015 	mvn.w	r0, #21
}
 800629c:	4770      	bx	lr
		return -EPERM;
 800629e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a2:	e7d5      	b.n	8006250 <z_impl_k_mutex_unlock+0x28>
 80062a4:	20000b88 	.word	0x20000b88
 80062a8:	20000bac 	.word	0x20000bac

080062ac <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 80062ac:	b510      	push	{r4, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	4601      	mov	r1, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 80062b2:	4684      	mov	ip, r0
	__asm__ volatile(
 80062b4:	f04f 0010 	mov.w	r0, #16
 80062b8:	f3ef 8411 	mrs	r4, BASEPRI
 80062bc:	f380 8812 	msr	BASEPRI_MAX, r0
 80062c0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 80062c4:	f85c 0b08 	ldr.w	r0, [ip], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 80062c8:	b188      	cbz	r0, 80062ee <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 80062ca:	6803      	ldr	r3, [r0, #0]
 80062cc:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 80062d0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
 80062d2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 80062d4:	4290      	cmp	r0, r2
 80062d6:	d008      	beq.n	80062ea <z_impl_k_queue_get+0x3e>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 80062d8:	2101      	movs	r1, #1
 80062da:	f004 fceb 	bl	800acb4 <z_queue_node_peek>
	__asm__ volatile(
 80062de:	f384 8811 	msr	BASEPRI, r4
 80062e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 80062e6:	b002      	add	sp, #8
 80062e8:	bd10      	pop	{r4, pc}
	list->tail = node;
 80062ea:	604b      	str	r3, [r1, #4]
}
 80062ec:	e7f4      	b.n	80062d8 <z_impl_k_queue_get+0x2c>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80062ee:	ea53 0002 	orrs.w	r0, r3, r2
 80062f2:	d00c      	beq.n	800630e <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 80062f4:	9200      	str	r2, [sp, #0]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f101 020c 	add.w	r2, r1, #12
 80062fc:	4621      	mov	r1, r4
 80062fe:	4660      	mov	r0, ip
 8006300:	f000 fb8c 	bl	8006a1c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8006304:	b948      	cbnz	r0, 800631a <z_impl_k_queue_get+0x6e>
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <z_impl_k_queue_get+0x74>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	6958      	ldr	r0, [r3, #20]
 800630c:	e7eb      	b.n	80062e6 <z_impl_k_queue_get+0x3a>
 800630e:	f384 8811 	msr	BASEPRI, r4
 8006312:	f3bf 8f6f 	isb	sy
		return NULL;
 8006316:	2000      	movs	r0, #0
 8006318:	e7e5      	b.n	80062e6 <z_impl_k_queue_get+0x3a>
	return (ret != 0) ? NULL : _current->base.swap_data;
 800631a:	2000      	movs	r0, #0
 800631c:	e7e3      	b.n	80062e6 <z_impl_k_queue_get+0x3a>
 800631e:	bf00      	nop
 8006320:	20000b88 	.word	0x20000b88

08006324 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4604      	mov	r4, r0
	__asm__ volatile(
 8006328:	f04f 0310 	mov.w	r3, #16
 800632c:	f3ef 8511 	mrs	r5, BASEPRI
 8006330:	f383 8812 	msr	BASEPRI_MAX, r3
 8006334:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8006338:	f004 fe5b 	bl	800aff2 <z_unpend_first_thread>

	if (thread != NULL) {
 800633c:	b140      	cbz	r0, 8006350 <z_impl_k_sem_give+0x2c>
 800633e:	2200      	movs	r2, #0
 8006340:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8006342:	f004 fd8f 	bl	800ae64 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8006346:	4629      	mov	r1, r5
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <z_impl_k_sem_give+0x4c>)
 800634a:	f000 f9f7 	bl	800673c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800634e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8006350:	68a3      	ldr	r3, [r4, #8]
 8006352:	68e2      	ldr	r2, [r4, #12]
 8006354:	4293      	cmp	r3, r2
 8006356:	d008      	beq.n	800636a <z_impl_k_sem_give+0x46>
 8006358:	2201      	movs	r2, #1
 800635a:	4413      	add	r3, r2
 800635c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800635e:	2102      	movs	r1, #2
 8006360:	f104 0010 	add.w	r0, r4, #16
 8006364:	f004 ffe0 	bl	800b328 <z_handle_obj_poll_events>
}
 8006368:	e7ed      	b.n	8006346 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800636a:	2200      	movs	r2, #0
 800636c:	e7f5      	b.n	800635a <z_impl_k_sem_give+0x36>
 800636e:	bf00      	nop
 8006370:	20000bb0 	.word	0x20000bb0

08006374 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8006374:	b510      	push	{r4, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	f04f 0410 	mov.w	r4, #16
 800637c:	f3ef 8111 	mrs	r1, BASEPRI
 8006380:	f384 8812 	msr	BASEPRI_MAX, r4
 8006384:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8006388:	6884      	ldr	r4, [r0, #8]
 800638a:	b144      	cbz	r4, 800639e <z_impl_k_sem_take+0x2a>
		sem->count--;
 800638c:	3c01      	subs	r4, #1
 800638e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8006390:	f381 8811 	msr	BASEPRI, r1
 8006394:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8006398:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800639a:	b002      	add	sp, #8
 800639c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800639e:	ea53 0402 	orrs.w	r4, r3, r2
 80063a2:	d006      	beq.n	80063b2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80063a4:	9200      	str	r2, [sp, #0]
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	4602      	mov	r2, r0
 80063aa:	4805      	ldr	r0, [pc, #20]	; (80063c0 <z_impl_k_sem_take+0x4c>)
 80063ac:	f000 fb36 	bl	8006a1c <z_pend_curr>
	return ret;
 80063b0:	e7f3      	b.n	800639a <z_impl_k_sem_take+0x26>
 80063b2:	f381 8811 	msr	BASEPRI, r1
 80063b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80063ba:	f06f 000f 	mvn.w	r0, #15
 80063be:	e7ec      	b.n	800639a <z_impl_k_sem_take+0x26>
 80063c0:	20000bb0 	.word	0x20000bb0

080063c4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 80063c8:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80063ca:	f013 0f02 	tst.w	r3, #2
 80063ce:	d15c      	bne.n	800648a <submit_to_queue_locked+0xc6>
 80063d0:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 80063d2:	f013 0f04 	tst.w	r3, #4
 80063d6:	d15d      	bne.n	8006494 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 80063d8:	680b      	ldr	r3, [r1, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d038      	beq.n	8006450 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 80063de:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 80063e0:	f013 0f01 	tst.w	r3, #1
 80063e4:	d037      	beq.n	8006456 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	602b      	str	r3, [r5, #0]
			ret = 2;
 80063ea:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 80063ec:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d03f      	beq.n	8006472 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80063f2:	4b29      	ldr	r3, [pc, #164]	; (8006498 <submit_to_queue_locked+0xd4>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	42b3      	cmp	r3, r6
 80063f8:	d02f      	beq.n	800645a <submit_to_queue_locked+0x96>
 80063fa:	2300      	movs	r3, #0
 80063fc:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 80063fe:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8006402:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8006406:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800640a:	f013 0f01 	tst.w	r3, #1
 800640e:	d033      	beq.n	8006478 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 8006410:	b101      	cbz	r1, 8006414 <submit_to_queue_locked+0x50>
 8006412:	b3a2      	cbz	r2, 800647e <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 8006414:	b100      	cbz	r0, 8006418 <submit_to_queue_locked+0x54>
 8006416:	b3a9      	cbz	r1, 8006484 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8006418:	2300      	movs	r3, #0
 800641a:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800641c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8006420:	b313      	cbz	r3, 8006468 <submit_to_queue_locked+0xa4>
	parent->next = child;
 8006422:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8006424:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8006428:	b12e      	cbz	r6, 8006436 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800642a:	2200      	movs	r2, #0
 800642c:	4611      	mov	r1, r2
 800642e:	f106 0088 	add.w	r0, r6, #136	; 0x88
 8006432:	f004 fe19 	bl	800b068 <z_sched_wake>
		ret = 1;
 8006436:	2001      	movs	r0, #1

		if (rc < 0) {
 8006438:	2800      	cmp	r0, #0
 800643a:	db06      	blt.n	800644a <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800643c:	68e3      	ldr	r3, [r4, #12]
 800643e:	f043 0304 	orr.w	r3, r3, #4
 8006442:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	60a3      	str	r3, [r4, #8]
 8006448:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800644a:	2800      	cmp	r0, #0
 800644c:	dc21      	bgt.n	8006492 <submit_to_queue_locked+0xce>
 800644e:	e01e      	b.n	800648e <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 8006450:	6883      	ldr	r3, [r0, #8]
 8006452:	600b      	str	r3, [r1, #0]
 8006454:	e7c3      	b.n	80063de <submit_to_queue_locked+0x1a>
		ret = 1;
 8006456:	2701      	movs	r7, #1
 8006458:	e7c8      	b.n	80063ec <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800645a:	f004 fb52 	bl	800ab02 <k_is_in_isr>
 800645e:	b908      	cbnz	r0, 8006464 <submit_to_queue_locked+0xa0>
 8006460:	2301      	movs	r3, #1
 8006462:	e7cb      	b.n	80063fc <submit_to_queue_locked+0x38>
 8006464:	2300      	movs	r3, #0
 8006466:	e7c9      	b.n	80063fc <submit_to_queue_locked+0x38>
 8006468:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800646c:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 8006470:	e7da      	b.n	8006428 <submit_to_queue_locked+0x64>
		return -EINVAL;
 8006472:	f06f 0015 	mvn.w	r0, #21
 8006476:	e7df      	b.n	8006438 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 8006478:	f06f 0012 	mvn.w	r0, #18
 800647c:	e7dc      	b.n	8006438 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800647e:	f06f 000f 	mvn.w	r0, #15
 8006482:	e7d9      	b.n	8006438 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8006484:	f06f 000f 	mvn.w	r0, #15
 8006488:	e7d6      	b.n	8006438 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800648a:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 8006492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 8006494:	2000      	movs	r0, #0
 8006496:	e7fa      	b.n	800648e <submit_to_queue_locked+0xca>
 8006498:	20000b88 	.word	0x20000b88

0800649c <finalize_cancel_locked>:
{
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 80064a0:	68c3      	ldr	r3, [r0, #12]
 80064a2:	f023 0302 	bic.w	r3, r3, #2
 80064a6:	60c3      	str	r3, [r0, #12]
	return list->head;
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <finalize_cancel_locked+0x78>)
 80064aa:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80064ac:	b1fb      	cbz	r3, 80064ee <finalize_cancel_locked+0x52>
 80064ae:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 80064b0:	b103      	cbz	r3, 80064b4 <finalize_cancel_locked+0x18>
	return node->next;
 80064b2:	681c      	ldr	r4, [r3, #0]
 80064b4:	2600      	movs	r6, #0
 80064b6:	e01f      	b.n	80064f8 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80064b8:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80064ba:	b166      	cbz	r6, 80064d6 <finalize_cancel_locked+0x3a>
	return node->next;
 80064bc:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 80064be:	6031      	str	r1, [r6, #0]
	return list->tail;
 80064c0:	4914      	ldr	r1, [pc, #80]	; (8006514 <finalize_cancel_locked+0x78>)
 80064c2:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80064c4:	428b      	cmp	r3, r1
 80064c6:	d00f      	beq.n	80064e8 <finalize_cancel_locked+0x4c>
	parent->next = child;
 80064c8:	2100      	movs	r1, #0
 80064ca:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 80064cc:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 80064d0:	f7ff ff28 	bl	8006324 <z_impl_k_sem_give>
}
 80064d4:	e015      	b.n	8006502 <finalize_cancel_locked+0x66>
	return node->next;
 80064d6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 80064d8:	490e      	ldr	r1, [pc, #56]	; (8006514 <finalize_cancel_locked+0x78>)
 80064da:	6008      	str	r0, [r1, #0]
	return list->tail;
 80064dc:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80064de:	428b      	cmp	r3, r1
 80064e0:	d1f2      	bne.n	80064c8 <finalize_cancel_locked+0x2c>
	list->tail = node;
 80064e2:	490c      	ldr	r1, [pc, #48]	; (8006514 <finalize_cancel_locked+0x78>)
 80064e4:	6048      	str	r0, [r1, #4]
}
 80064e6:	e7ef      	b.n	80064c8 <finalize_cancel_locked+0x2c>
	list->tail = node;
 80064e8:	490a      	ldr	r1, [pc, #40]	; (8006514 <finalize_cancel_locked+0x78>)
 80064ea:	604e      	str	r6, [r1, #4]
}
 80064ec:	e7ec      	b.n	80064c8 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80064ee:	461c      	mov	r4, r3
 80064f0:	e7e0      	b.n	80064b4 <finalize_cancel_locked+0x18>
 80064f2:	4622      	mov	r2, r4
 80064f4:	4623      	mov	r3, r4
 80064f6:	4614      	mov	r4, r2
 80064f8:	b153      	cbz	r3, 8006510 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	42aa      	cmp	r2, r5
 80064fe:	d0db      	beq.n	80064b8 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8006500:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8006502:	2c00      	cmp	r4, #0
 8006504:	d0f5      	beq.n	80064f2 <finalize_cancel_locked+0x56>
 8006506:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006508:	2c00      	cmp	r4, #0
 800650a:	d0f3      	beq.n	80064f4 <finalize_cancel_locked+0x58>
	return node->next;
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	e7f1      	b.n	80064f4 <finalize_cancel_locked+0x58>
}
 8006510:	bd70      	pop	{r4, r5, r6, pc}
 8006512:	bf00      	nop
 8006514:	20000bb8 	.word	0x20000bb8

08006518 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8006518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651a:	b085      	sub	sp, #20
 800651c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800651e:	e016      	b.n	800654e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8006520:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 8006524:	f023 0204 	bic.w	r2, r3, #4
 8006528:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 800652c:	f013 0f04 	tst.w	r3, #4
 8006530:	d159      	bne.n	80065e6 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8006532:	2300      	movs	r3, #0
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800653a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800653e:	e9cd 2300 	strd	r2, r3, [sp]
 8006542:	f105 0288 	add.w	r2, r5, #136	; 0x88
 8006546:	4631      	mov	r1, r6
 8006548:	482e      	ldr	r0, [pc, #184]	; (8006604 <work_queue_main+0xec>)
 800654a:	f000 fc83 	bl	8006e54 <z_sched_wait>
	__asm__ volatile(
 800654e:	f04f 0310 	mov.w	r3, #16
 8006552:	f3ef 8611 	mrs	r6, BASEPRI
 8006556:	f383 8812 	msr	BASEPRI_MAX, r3
 800655a:	f3bf 8f6f 	isb	sy
	return list->head;
 800655e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 8006562:	2c00      	cmp	r4, #0
 8006564:	d0dc      	beq.n	8006520 <work_queue_main+0x8>
	return node->next;
 8006566:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8006568:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800656c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8006570:	4294      	cmp	r4, r2
 8006572:	d035      	beq.n	80065e0 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 8006574:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006580:	68e3      	ldr	r3, [r4, #12]
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 8006588:	f023 0304 	bic.w	r3, r3, #4
 800658c:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800658e:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 8006590:	2c00      	cmp	r4, #0
 8006592:	d0ce      	beq.n	8006532 <work_queue_main+0x1a>
	__asm__ volatile(
 8006594:	f386 8811 	msr	BASEPRI, r6
 8006598:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 800659c:	4620      	mov	r0, r4
 800659e:	4798      	blx	r3
	__asm__ volatile(
 80065a0:	f04f 0310 	mov.w	r3, #16
 80065a4:	f3ef 8611 	mrs	r6, BASEPRI
 80065a8:	f383 8812 	msr	BASEPRI_MAX, r3
 80065ac:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80065b0:	68e3      	ldr	r3, [r4, #12]
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80065b8:	f013 0f02 	tst.w	r3, #2
 80065bc:	d11e      	bne.n	80065fc <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 80065be:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80065c2:	f023 0302 	bic.w	r3, r3, #2
 80065c6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 80065ca:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 80065ce:	f386 8811 	msr	BASEPRI, r6
 80065d2:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1b9      	bne.n	800654e <work_queue_main+0x36>
	z_impl_k_yield();
 80065da:	f000 fb55 	bl	8006c88 <z_impl_k_yield>
}
 80065de:	e7b6      	b.n	800654e <work_queue_main+0x36>
	list->tail = node;
 80065e0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80065e4:	e7c6      	b.n	8006574 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 80065e6:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 80065ea:	2200      	movs	r2, #0
 80065ec:	2101      	movs	r1, #1
 80065ee:	4638      	mov	r0, r7
 80065f0:	f004 fd3a 	bl	800b068 <z_sched_wake>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d1f8      	bne.n	80065ea <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e7c9      	b.n	8006590 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff ff4d 	bl	800649c <finalize_cancel_locked>
 8006602:	e7dc      	b.n	80065be <work_queue_main+0xa6>
 8006604:	20000bb4 	.word	0x20000bb4

08006608 <k_work_submit>:
{
 8006608:	b508      	push	{r3, lr}
 800660a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800660c:	4801      	ldr	r0, [pc, #4]	; (8006614 <k_work_submit+0xc>)
 800660e:	f004 fb93 	bl	800ad38 <k_work_submit_to_queue>
}
 8006612:	bd08      	pop	{r3, pc}
 8006614:	200005e0 	.word	0x200005e0

08006618 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	4604      	mov	r4, r0
 800661e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8006620:	2000      	movs	r0, #0
 8006622:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 8006626:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800662a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800662e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 8006632:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8006636:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800663a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800663e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8006642:	b1fd      	cbz	r5, 8006684 <k_work_queue_start+0x6c>
 8006644:	7928      	ldrb	r0, [r5, #4]
 8006646:	b9f8      	cbnz	r0, 8006688 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8006648:	2001      	movs	r0, #1
	*flagp = flags;
 800664a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800664e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006656:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800665a:	2000      	movs	r0, #0
 800665c:	9004      	str	r0, [sp, #16]
 800665e:	9303      	str	r3, [sp, #12]
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9001      	str	r0, [sp, #4]
 8006664:	9400      	str	r4, [sp, #0]
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <k_work_queue_start+0x78>)
 8006668:	4620      	mov	r0, r4
 800666a:	f004 fa62 	bl	800ab32 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800666e:	b125      	cbz	r5, 800667a <k_work_queue_start+0x62>
 8006670:	6829      	ldr	r1, [r5, #0]
 8006672:	b111      	cbz	r1, 800667a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 8006674:	4620      	mov	r0, r4
 8006676:	f004 fa4a 	bl	800ab0e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800667a:	4620      	mov	r0, r4
 800667c:	f004 fa4a 	bl	800ab14 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8006680:	b009      	add	sp, #36	; 0x24
 8006682:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8006684:	2001      	movs	r0, #1
 8006686:	e7e0      	b.n	800664a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 8006688:	f240 1001 	movw	r0, #257	; 0x101
 800668c:	e7dd      	b.n	800664a <k_work_queue_start+0x32>
 800668e:	bf00      	nop
 8006690:	08006519 	.word	0x08006519

08006694 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006698:	bf08      	it	eq
 800669a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800669e:	d100      	bne.n	80066a2 <add_thread_timeout+0xe>
 80066a0:	4770      	bx	lr
{
 80066a2:	b508      	push	{r3, lr}
 80066a4:	4902      	ldr	r1, [pc, #8]	; (80066b0 <add_thread_timeout+0x1c>)
 80066a6:	3018      	adds	r0, #24
 80066a8:	f000 fc4a 	bl	8006f40 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 80066ac:	bd08      	pop	{r3, pc}
 80066ae:	bf00      	nop
 80066b0:	0800ae9d 	.word	0x0800ae9d

080066b4 <z_reset_time_slice>:
{
 80066b4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <z_reset_time_slice+0x24>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	b903      	cbnz	r3, 80066be <z_reset_time_slice+0xa>
}
 80066bc:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80066be:	f7ff fa19 	bl	8005af4 <sys_clock_elapsed>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <z_reset_time_slice+0x24>)
 80066c6:	6810      	ldr	r0, [r2, #0]
 80066c8:	4403      	add	r3, r0
 80066ca:	4a04      	ldr	r2, [pc, #16]	; (80066dc <z_reset_time_slice+0x28>)
 80066cc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80066ce:	2100      	movs	r1, #0
 80066d0:	f004 fd36 	bl	800b140 <z_set_timeout_expiry>
}
 80066d4:	e7f2      	b.n	80066bc <z_reset_time_slice+0x8>
 80066d6:	bf00      	nop
 80066d8:	20000bcc 	.word	0x20000bcc
 80066dc:	20000b88 	.word	0x20000b88

080066e0 <k_sched_time_slice_set>:
{
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 80066e6:	2300      	movs	r3, #0
	__asm__ volatile(
 80066e8:	f04f 0210 	mov.w	r2, #16
 80066ec:	f3ef 8611 	mrs	r6, BASEPRI
 80066f0:	f382 8812 	msr	BASEPRI_MAX, r2
 80066f4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80066f8:	e00c      	b.n	8006714 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	bfb8      	it	lt
 80066fe:	2302      	movlt	r3, #2
 8006700:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <k_sched_time_slice_set+0x50>)
 8006704:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 8006706:	f7ff ffd5 	bl	80066b4 <z_reset_time_slice>
	__asm__ volatile(
 800670a:	f386 8811 	msr	BASEPRI, r6
 800670e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006712:	2301      	movs	r3, #1
 8006714:	b953      	cbnz	r3, 800672c <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <k_sched_time_slice_set+0x54>)
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800671c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8006720:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8006722:	4a05      	ldr	r2, [pc, #20]	; (8006738 <k_sched_time_slice_set+0x58>)
 8006724:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8006726:	2c00      	cmp	r4, #0
 8006728:	dce7      	bgt.n	80066fa <k_sched_time_slice_set+0x1a>
 800672a:	e7ea      	b.n	8006702 <k_sched_time_slice_set+0x22>
}
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	bf00      	nop
 8006730:	20000bc8 	.word	0x20000bc8
 8006734:	20000b88 	.word	0x20000b88
 8006738:	20000bcc 	.word	0x20000bcc

0800673c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800673c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800673e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8006740:	b921      	cbnz	r1, 800674c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006742:	f3ef 8305 	mrs	r3, IPSR
 8006746:	b913      	cbnz	r3, 800674e <z_reschedule+0x12>
 8006748:	2101      	movs	r1, #1
 800674a:	e000      	b.n	800674e <z_reschedule+0x12>
 800674c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800674e:	f011 0f01 	tst.w	r1, #1
 8006752:	d007      	beq.n	8006764 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <z_reschedule+0x34>)
 8006756:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8006758:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800675a:	429a      	cmp	r2, r3
 800675c:	d002      	beq.n	8006764 <z_reschedule+0x28>
	ret = arch_swap(key);
 800675e:	f7fc f92d 	bl	80029bc <arch_swap>
		z_swap(lock, key);
 8006762:	e003      	b.n	800676c <z_reschedule+0x30>
 8006764:	f380 8811 	msr	BASEPRI, r0
 8006768:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800676c:	bd08      	pop	{r3, pc}
 800676e:	bf00      	nop
 8006770:	20000b88 	.word	0x20000b88

08006774 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8006774:	2300      	movs	r3, #0
	__asm__ volatile(
 8006776:	f04f 0210 	mov.w	r2, #16
 800677a:	f3ef 8111 	mrs	r1, BASEPRI
 800677e:	f382 8812 	msr	BASEPRI_MAX, r2
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	e009      	b.n	800679c <k_sched_lock+0x28>
	--_current->base.sched_locked;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <k_sched_lock+0x30>)
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	7bd3      	ldrb	r3, [r2, #15]
 800678e:	3b01      	subs	r3, #1
 8006790:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8006792:	f381 8811 	msr	BASEPRI, r1
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	2301      	movs	r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f3      	beq.n	8006788 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000b88 	.word	0x20000b88

080067a8 <update_cache>:
{
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80067ac:	480f      	ldr	r0, [pc, #60]	; (80067ec <update_cache+0x44>)
 80067ae:	f004 fb52 	bl	800ae56 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80067b2:	4605      	mov	r5, r0
 80067b4:	b170      	cbz	r0, 80067d4 <update_cache+0x2c>
	if (preempt_ok != 0) {
 80067b6:	b984      	cbnz	r4, 80067da <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <update_cache+0x48>)
 80067ba:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 80067bc:	7b5a      	ldrb	r2, [r3, #13]
 80067be:	f012 0f1f 	tst.w	r2, #31
 80067c2:	d10a      	bne.n	80067da <update_cache+0x32>
	return node->next != NULL;
 80067c4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80067c6:	b942      	cbnz	r2, 80067da <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80067c8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 80067ca:	2a7f      	cmp	r2, #127	; 0x7f
 80067cc:	d905      	bls.n	80067da <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <update_cache+0x48>)
 80067d0:	6193      	str	r3, [r2, #24]
 80067d2:	e00a      	b.n	80067ea <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <update_cache+0x48>)
 80067d6:	68dd      	ldr	r5, [r3, #12]
 80067d8:	e7ed      	b.n	80067b6 <update_cache+0xe>
		if (thread != _current) {
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <update_cache+0x48>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	42ab      	cmp	r3, r5
 80067e0:	d001      	beq.n	80067e6 <update_cache+0x3e>
			z_reset_time_slice();
 80067e2:	f7ff ff67 	bl	80066b4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80067e6:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <update_cache+0x48>)
 80067e8:	619d      	str	r5, [r3, #24]
}
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20000ba4 	.word	0x20000ba4
 80067f0:	20000b88 	.word	0x20000b88

080067f4 <move_thread_to_end_of_prio_q>:
{
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 80067f8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80067fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	db28      	blt.n	8006854 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 8006802:	7b6b      	ldrb	r3, [r5, #13]
 8006804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006808:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800680a:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <move_thread_to_end_of_prio_q+0x80>)
 800680c:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006810:	429c      	cmp	r4, r3
 8006812:	d02d      	beq.n	8006870 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006814:	b16c      	cbz	r4, 8006832 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f004 fab1 	bl	800ad80 <z_sched_prio_cmp>
 800681e:	2800      	cmp	r0, #0
 8006820:	dc20      	bgt.n	8006864 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006822:	b134      	cbz	r4, 8006832 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8006824:	4b13      	ldr	r3, [pc, #76]	; (8006874 <move_thread_to_end_of_prio_q+0x80>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	429c      	cmp	r4, r3
 800682a:	d002      	beq.n	8006832 <move_thread_to_end_of_prio_q+0x3e>
 800682c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800682e:	2c00      	cmp	r4, #0
 8006830:	d1f0      	bne.n	8006814 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <move_thread_to_end_of_prio_q+0x80>)
 8006834:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 8006836:	f103 011c 	add.w	r1, r3, #28
 800683a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800683c:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800683e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8006840:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <move_thread_to_end_of_prio_q+0x80>)
 8006844:	6898      	ldr	r0, [r3, #8]
 8006846:	42a8      	cmp	r0, r5
 8006848:	bf14      	ite	ne
 800684a:	2000      	movne	r0, #0
 800684c:	2001      	moveq	r0, #1
 800684e:	f7ff ffab 	bl	80067a8 <update_cache>
}
 8006852:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006854:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006858:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 800685a:	4601      	mov	r1, r0
 800685c:	4806      	ldr	r0, [pc, #24]	; (8006878 <move_thread_to_end_of_prio_q+0x84>)
 800685e:	f004 face 	bl	800adfe <z_priq_dumb_remove>
}
 8006862:	e7ce      	b.n	8006802 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8006864:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 8006866:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8006868:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800686a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800686c:	6065      	str	r5, [r4, #4]
}
 800686e:	e7e8      	b.n	8006842 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006870:	2400      	movs	r4, #0
 8006872:	e7cf      	b.n	8006814 <move_thread_to_end_of_prio_q+0x20>
 8006874:	20000b88 	.word	0x20000b88
 8006878:	20000ba4 	.word	0x20000ba4

0800687c <z_time_slice>:
{
 800687c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800687e:	f04f 0310 	mov.w	r3, #16
 8006882:	f3ef 8411 	mrs	r4, BASEPRI
 8006886:	f383 8812 	msr	BASEPRI_MAX, r3
 800688a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <z_time_slice+0x98>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <z_time_slice+0x9c>)
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	4293      	cmp	r3, r2
 8006898:	d017      	beq.n	80068ca <z_time_slice+0x4e>
	pending_current = NULL;
 800689a:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <z_time_slice+0x9c>)
 800689c:	2100      	movs	r1, #0
 800689e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80068a0:	4a1e      	ldr	r2, [pc, #120]	; (800691c <z_time_slice+0xa0>)
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	b372      	cbz	r2, 8006904 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80068a6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80068a8:	2a7f      	cmp	r2, #127	; 0x7f
 80068aa:	d815      	bhi.n	80068d8 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 80068ac:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80068ae:	f012 0f1f 	tst.w	r2, #31
 80068b2:	d11b      	bne.n	80068ec <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80068b4:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80068b8:	4a19      	ldr	r2, [pc, #100]	; (8006920 <z_time_slice+0xa4>)
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	4291      	cmp	r1, r2
 80068be:	db17      	blt.n	80068f0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 80068c0:	4a18      	ldr	r2, [pc, #96]	; (8006924 <z_time_slice+0xa8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d016      	beq.n	80068f4 <z_time_slice+0x78>
 80068c6:	2201      	movs	r2, #1
 80068c8:	e007      	b.n	80068da <z_time_slice+0x5e>
		z_reset_time_slice();
 80068ca:	f7ff fef3 	bl	80066b4 <z_reset_time_slice>
	__asm__ volatile(
 80068ce:	f384 8811 	msr	BASEPRI, r4
 80068d2:	f3bf 8f6f 	isb	sy
		return;
 80068d6:	e01c      	b.n	8006912 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 80068d8:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 80068da:	b19a      	cbz	r2, 8006904 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <z_time_slice+0x98>)
 80068de:	6912      	ldr	r2, [r2, #16]
 80068e0:	4282      	cmp	r2, r0
 80068e2:	dd09      	ble.n	80068f8 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 80068e4:	1a10      	subs	r0, r2, r0
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <z_time_slice+0x98>)
 80068e8:	6118      	str	r0, [r3, #16]
 80068ea:	e00e      	b.n	800690a <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 80068ec:	2200      	movs	r2, #0
 80068ee:	e7f4      	b.n	80068da <z_time_slice+0x5e>
 80068f0:	2200      	movs	r2, #0
 80068f2:	e7f2      	b.n	80068da <z_time_slice+0x5e>
 80068f4:	2200      	movs	r2, #0
 80068f6:	e7f0      	b.n	80068da <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff7b 	bl	80067f4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 80068fe:	f7ff fed9 	bl	80066b4 <z_reset_time_slice>
 8006902:	e002      	b.n	800690a <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <z_time_slice+0x98>)
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
 800690a:	f384 8811 	msr	BASEPRI, r4
 800690e:	f3bf 8f6f 	isb	sy
}
 8006912:	bd10      	pop	{r4, pc}
 8006914:	20000b88 	.word	0x20000b88
 8006918:	20000bc0 	.word	0x20000bc0
 800691c:	20000bcc 	.word	0x20000bcc
 8006920:	20000bc8 	.word	0x20000bc8
 8006924:	200004d8 	.word	0x200004d8

08006928 <ready_thread>:
{
 8006928:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800692a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800692c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8006930:	2a00      	cmp	r2, #0
 8006932:	db2d      	blt.n	8006990 <ready_thread+0x68>
 8006934:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8006936:	f013 0f1f 	tst.w	r3, #31
 800693a:	d105      	bne.n	8006948 <ready_thread+0x20>
	return node->next != NULL;
 800693c:	6982      	ldr	r2, [r0, #24]
 800693e:	b10a      	cbz	r2, 8006944 <ready_thread+0x1c>
 8006940:	2200      	movs	r2, #0
 8006942:	e002      	b.n	800694a <ready_thread+0x22>
 8006944:	2201      	movs	r2, #1
 8006946:	e000      	b.n	800694a <ready_thread+0x22>
 8006948:	2200      	movs	r2, #0
 800694a:	b30a      	cbz	r2, 8006990 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800694c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006950:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <ready_thread+0x7c>)
 8006954:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006958:	429d      	cmp	r5, r3
 800695a:	d020      	beq.n	800699e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800695c:	b16d      	cbz	r5, 800697a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800695e:	4629      	mov	r1, r5
 8006960:	4620      	mov	r0, r4
 8006962:	f004 fa0d 	bl	800ad80 <z_sched_prio_cmp>
 8006966:	2800      	cmp	r0, #0
 8006968:	dc13      	bgt.n	8006992 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800696a:	b135      	cbz	r5, 800697a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800696c:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <ready_thread+0x7c>)
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	429d      	cmp	r5, r3
 8006972:	d002      	beq.n	800697a <ready_thread+0x52>
 8006974:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006976:	2d00      	cmp	r5, #0
 8006978:	d1f0      	bne.n	800695c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <ready_thread+0x7c>)
 800697c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800697e:	f103 011c 	add.w	r1, r3, #28
 8006982:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8006984:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006986:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006988:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800698a:	2000      	movs	r0, #0
 800698c:	f7ff ff0c 	bl	80067a8 <update_cache>
}
 8006990:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8006992:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8006994:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006996:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006998:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800699a:	606c      	str	r4, [r5, #4]
}
 800699c:	e7f5      	b.n	800698a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800699e:	2500      	movs	r5, #0
 80069a0:	e7dc      	b.n	800695c <ready_thread+0x34>
 80069a2:	bf00      	nop
 80069a4:	20000b88 	.word	0x20000b88

080069a8 <z_sched_start>:
{
 80069a8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80069aa:	f04f 0310 	mov.w	r3, #16
 80069ae:	f3ef 8411 	mrs	r4, BASEPRI
 80069b2:	f383 8812 	msr	BASEPRI_MAX, r3
 80069b6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80069ba:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 80069bc:	f013 0f04 	tst.w	r3, #4
 80069c0:	d104      	bne.n	80069cc <z_sched_start+0x24>
	__asm__ volatile(
 80069c2:	f384 8811 	msr	BASEPRI, r4
 80069c6:	f3bf 8f6f 	isb	sy
}
 80069ca:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 80069d2:	f7ff ffa9 	bl	8006928 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80069d6:	4621      	mov	r1, r4
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <z_sched_start+0x38>)
 80069da:	f7ff feaf 	bl	800673c <z_reschedule>
 80069de:	e7f4      	b.n	80069ca <z_sched_start+0x22>
 80069e0:	20000bc4 	.word	0x20000bc4

080069e4 <unready_thread>:
{
 80069e4:	b510      	push	{r4, lr}
 80069e6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 80069e8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80069ea:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	db08      	blt.n	8006a04 <unready_thread+0x20>
	update_cache(thread == _current);
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <unready_thread+0x30>)
 80069f4:	6898      	ldr	r0, [r3, #8]
 80069f6:	42a0      	cmp	r0, r4
 80069f8:	bf14      	ite	ne
 80069fa:	2000      	movne	r0, #0
 80069fc:	2001      	moveq	r0, #1
 80069fe:	f7ff fed3 	bl	80067a8 <update_cache>
}
 8006a02:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a08:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4802      	ldr	r0, [pc, #8]	; (8006a18 <unready_thread+0x34>)
 8006a0e:	f004 f9f6 	bl	800adfe <z_priq_dumb_remove>
}
 8006a12:	e7ee      	b.n	80069f2 <unready_thread+0xe>
 8006a14:	20000b88 	.word	0x20000b88
 8006a18:	20000ba4 	.word	0x20000ba4

08006a1c <z_pend_curr>:
{
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4611      	mov	r1, r2
	pending_current = _current;
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <z_pend_curr+0x20>)
 8006a24:	6898      	ldr	r0, [r3, #8]
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <z_pend_curr+0x24>)
 8006a28:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8006a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2e:	f004 fa97 	bl	800af60 <pend>
 8006a32:	4620      	mov	r0, r4
 8006a34:	f7fb ffc2 	bl	80029bc <arch_swap>
}
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000b88 	.word	0x20000b88
 8006a40:	20000bc0 	.word	0x20000bc0

08006a44 <z_set_prio>:
{
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8006a4c:	2300      	movs	r3, #0
	__asm__ volatile(
 8006a4e:	f04f 0210 	mov.w	r2, #16
 8006a52:	f3ef 8811 	mrs	r8, BASEPRI
 8006a56:	f382 8812 	msr	BASEPRI_MAX, r2
 8006a5a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8006a5e:	461f      	mov	r7, r3
 8006a60:	e008      	b.n	8006a74 <z_set_prio+0x30>
		if (need_sched) {
 8006a62:	f012 0701 	ands.w	r7, r2, #1
 8006a66:	d111      	bne.n	8006a8c <z_set_prio+0x48>
			thread->base.prio = prio;
 8006a68:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8006a6a:	f388 8811 	msr	BASEPRI, r8
 8006a6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006a72:	2301      	movs	r3, #1
 8006a74:	461a      	mov	r2, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d13d      	bne.n	8006af6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8006a7a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8006a7c:	f013 0f1f 	tst.w	r3, #31
 8006a80:	d1ef      	bne.n	8006a62 <z_set_prio+0x1e>
	return node->next != NULL;
 8006a82:	69a1      	ldr	r1, [r4, #24]
 8006a84:	2900      	cmp	r1, #0
 8006a86:	d1ec      	bne.n	8006a62 <z_set_prio+0x1e>
 8006a88:	2201      	movs	r2, #1
 8006a8a:	e7ea      	b.n	8006a62 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a90:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8006a92:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006afc <z_set_prio+0xb8>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f004 f9b0 	bl	800adfe <z_priq_dumb_remove>
				thread->base.prio = prio;
 8006a9e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8006aa0:	7b63      	ldrb	r3, [r4, #13]
 8006aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8006aa8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006aac:	454d      	cmp	r5, r9
 8006aae:	d020      	beq.n	8006af2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006ab0:	b16d      	cbz	r5, 8006ace <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f004 f963 	bl	800ad80 <z_sched_prio_cmp>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	dc13      	bgt.n	8006ae6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006abe:	b135      	cbz	r5, 8006ace <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <z_set_prio+0xbc>)
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	429d      	cmp	r5, r3
 8006ac6:	d002      	beq.n	8006ace <z_set_prio+0x8a>
 8006ac8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	d1f0      	bne.n	8006ab0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <z_set_prio+0xbc>)
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006ad2:	f103 011c 	add.w	r1, r3, #28
 8006ad6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8006ad8:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006ada:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006adc:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f7ff fe62 	bl	80067a8 <update_cache>
 8006ae4:	e7c1      	b.n	8006a6a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8006ae6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8006ae8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006aea:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006aec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006aee:	606c      	str	r4, [r5, #4]
}
 8006af0:	e7f5      	b.n	8006ade <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006af2:	2500      	movs	r5, #0
 8006af4:	e7dc      	b.n	8006ab0 <z_set_prio+0x6c>
}
 8006af6:	4638      	mov	r0, r7
 8006af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afc:	20000ba4 	.word	0x20000ba4
 8006b00:	20000b88 	.word	0x20000b88

08006b04 <z_impl_k_thread_suspend>:
{
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8006b08:	3018      	adds	r0, #24
 8006b0a:	f004 fafb 	bl	800b104 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8006b0e:	2300      	movs	r3, #0
	__asm__ volatile(
 8006b10:	f04f 0210 	mov.w	r2, #16
 8006b14:	f3ef 8511 	mrs	r5, BASEPRI
 8006b18:	f382 8812 	msr	BASEPRI_MAX, r2
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	e010      	b.n	8006b44 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006b22:	7b63      	ldrb	r3, [r4, #13]
 8006b24:	f043 0310 	orr.w	r3, r3, #16
 8006b28:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <z_impl_k_thread_suspend+0x7c>)
 8006b2c:	6898      	ldr	r0, [r3, #8]
 8006b2e:	42a0      	cmp	r0, r4
 8006b30:	bf14      	ite	ne
 8006b32:	2000      	movne	r0, #0
 8006b34:	2001      	moveq	r0, #1
 8006b36:	f7ff fe37 	bl	80067a8 <update_cache>
	__asm__ volatile(
 8006b3a:	f385 8811 	msr	BASEPRI, r5
 8006b3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006b42:	2301      	movs	r3, #1
 8006b44:	b963      	cbnz	r3, 8006b60 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 8006b46:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 8006b48:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dae8      	bge.n	8006b22 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006b50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b54:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 8006b56:	4621      	mov	r1, r4
 8006b58:	480a      	ldr	r0, [pc, #40]	; (8006b84 <z_impl_k_thread_suspend+0x80>)
 8006b5a:	f004 f950 	bl	800adfe <z_priq_dumb_remove>
}
 8006b5e:	e7e0      	b.n	8006b22 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8006b60:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <z_impl_k_thread_suspend+0x7c>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d000      	beq.n	8006b6a <z_impl_k_thread_suspend+0x66>
}
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8006b6a:	f04f 0310 	mov.w	r3, #16
 8006b6e:	f3ef 8011 	mrs	r0, BASEPRI
 8006b72:	f383 8812 	msr	BASEPRI_MAX, r3
 8006b76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8006b7a:	f004 f92b 	bl	800add4 <z_reschedule_irqlock>
 8006b7e:	e7f3      	b.n	8006b68 <z_impl_k_thread_suspend+0x64>
 8006b80:	20000b88 	.word	0x20000b88
 8006b84:	20000ba4 	.word	0x20000ba4

08006b88 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8006b88:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f04f 0210 	mov.w	r2, #16
 8006b90:	f3ef 8411 	mrs	r4, BASEPRI
 8006b94:	f382 8812 	msr	BASEPRI_MAX, r2
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	e00c      	b.n	8006bb8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <k_sched_unlock+0x4c>)
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	7bd3      	ldrb	r3, [r2, #15]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8006ba8:	2000      	movs	r0, #0
 8006baa:	f7ff fdfd 	bl	80067a8 <update_cache>
	__asm__ volatile(
 8006bae:	f384 8811 	msr	BASEPRI, r4
 8006bb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <k_sched_unlock+0x16>
	__asm__ volatile(
 8006bbc:	f04f 0310 	mov.w	r3, #16
 8006bc0:	f3ef 8011 	mrs	r0, BASEPRI
 8006bc4:	f383 8812 	msr	BASEPRI_MAX, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f004 f902 	bl	800add4 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000b88 	.word	0x20000b88

08006bd8 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8006bd8:	7b43      	ldrb	r3, [r0, #13]
 8006bda:	f013 0f08 	tst.w	r3, #8
 8006bde:	d142      	bne.n	8006c66 <end_thread+0x8e>
{
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8006bea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bee:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8006bf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bf4:	d12b      	bne.n	8006c4e <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8006bf6:	68ab      	ldr	r3, [r5, #8]
 8006bf8:	b15b      	cbz	r3, 8006c12 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f004 f8be 	bl	800ad7c <pended_on_thread>
 8006c00:	4629      	mov	r1, r5
 8006c02:	f004 f8fc 	bl	800adfe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8006c06:	7b6b      	ldrb	r3, [r5, #13]
 8006c08:	f023 0302 	bic.w	r3, r3, #2
 8006c0c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60ab      	str	r3, [r5, #8]
 8006c12:	f105 0018 	add.w	r0, r5, #24
 8006c16:	f004 fa75 	bl	800b104 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 8006c1a:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8006c1c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006c1e:	42ac      	cmp	r4, r5
 8006c20:	d01d      	beq.n	8006c5e <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8006c22:	b1e4      	cbz	r4, 8006c5e <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006c24:	4620      	mov	r0, r4
 8006c26:	f004 f8a9 	bl	800ad7c <pended_on_thread>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	f004 f8e7 	bl	800adfe <z_priq_dumb_remove>
 8006c30:	7b63      	ldrb	r3, [r4, #13]
 8006c32:	f023 0302 	bic.w	r3, r3, #2
 8006c36:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8006c38:	2600      	movs	r6, #0
 8006c3a:	60a6      	str	r6, [r4, #8]
 8006c3c:	f104 0018 	add.w	r0, r4, #24
 8006c40:	f004 fa60 	bl	800b104 <z_abort_timeout>
 8006c44:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff fe6e 	bl	8006928 <ready_thread>
 8006c4c:	e7e6      	b.n	8006c1c <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c52:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 8006c54:	4601      	mov	r1, r0
 8006c56:	4804      	ldr	r0, [pc, #16]	; (8006c68 <end_thread+0x90>)
 8006c58:	f004 f8d1 	bl	800adfe <z_priq_dumb_remove>
}
 8006c5c:	e7cb      	b.n	8006bf6 <end_thread+0x1e>
		update_cache(1);
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f7ff fda2 	bl	80067a8 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	4770      	bx	lr
 8006c68:	20000ba4 	.word	0x20000ba4

08006c6c <z_sched_init>:
{
 8006c6c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <z_sched_init+0x18>)
 8006c70:	f103 021c 	add.w	r2, r3, #28
 8006c74:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 8006c76:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	f7ff fd30 	bl	80066e0 <k_sched_time_slice_set>
}
 8006c80:	bd08      	pop	{r3, pc}
 8006c82:	bf00      	nop
 8006c84:	20000b88 	.word	0x20000b88

08006c88 <z_impl_k_yield>:
{
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	f04f 0310 	mov.w	r3, #16
 8006c8e:	f3ef 8611 	mrs	r6, BASEPRI
 8006c92:	f383 8812 	msr	BASEPRI_MAX, r3
 8006c96:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 8006c9a:	4c1c      	ldr	r4, [pc, #112]	; (8006d0c <z_impl_k_yield+0x84>)
 8006c9c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006c9e:	7b4b      	ldrb	r3, [r1, #13]
 8006ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca4:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 8006ca6:	f104 071c 	add.w	r7, r4, #28
 8006caa:	4638      	mov	r0, r7
 8006cac:	f004 f8a7 	bl	800adfe <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8006cb0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8006cb2:	7b6b      	ldrb	r3, [r5, #13]
 8006cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cb8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8006cba:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006cbc:	42bc      	cmp	r4, r7
 8006cbe:	d023      	beq.n	8006d08 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006cc0:	b16c      	cbz	r4, 8006cde <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f004 f85b 	bl	800ad80 <z_sched_prio_cmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	dc16      	bgt.n	8006cfc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006cce:	b134      	cbz	r4, 8006cde <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <z_impl_k_yield+0x84>)
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d002      	beq.n	8006cde <z_impl_k_yield+0x56>
 8006cd8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <z_impl_k_yield+0x84>)
 8006ce0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006ce2:	f103 011c 	add.w	r1, r3, #28
 8006ce6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8006ce8:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8006cea:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8006cec:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f7ff fd5a 	bl	80067a8 <update_cache>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7fb fe61 	bl	80029bc <arch_swap>
}
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8006cfc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8006cfe:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8006d00:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8006d02:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8006d04:	6065      	str	r5, [r4, #4]
}
 8006d06:	e7f2      	b.n	8006cee <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006d08:	2400      	movs	r4, #0
 8006d0a:	e7d9      	b.n	8006cc0 <z_impl_k_yield+0x38>
 8006d0c:	20000b88 	.word	0x20000b88

08006d10 <z_tick_sleep>:
{
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8006d14:	ea50 0301 	orrs.w	r3, r0, r1
 8006d18:	d038      	beq.n	8006d8c <z_tick_sleep+0x7c>
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8006d1e:	f06f 0301 	mvn.w	r3, #1
 8006d22:	1a1b      	subs	r3, r3, r0
 8006d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d28:	eb62 0201 	sbc.w	r2, r2, r1
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f172 0300 	sbcs.w	r3, r2, #0
 8006d32:	db2f      	blt.n	8006d94 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8006d34:	f06f 0501 	mvn.w	r5, #1
 8006d38:	1a2d      	subs	r5, r5, r0
 8006d3a:	f04f 0310 	mov.w	r3, #16
 8006d3e:	f3ef 8811 	mrs	r8, BASEPRI
 8006d42:	f383 8812 	msr	BASEPRI_MAX, r3
 8006d46:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8006d4a:	4f14      	ldr	r7, [pc, #80]	; (8006d9c <z_tick_sleep+0x8c>)
 8006d4c:	68b8      	ldr	r0, [r7, #8]
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <z_tick_sleep+0x90>)
 8006d50:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8006d52:	f7ff fe47 	bl	80069e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8006d56:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4633      	mov	r3, r6
 8006d5c:	4911      	ldr	r1, [pc, #68]	; (8006da4 <z_tick_sleep+0x94>)
 8006d5e:	3018      	adds	r0, #24
 8006d60:	f000 f8ee 	bl	8006f40 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8006d64:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006d66:	7b53      	ldrb	r3, [r2, #13]
 8006d68:	f043 0310 	orr.w	r3, r3, #16
 8006d6c:	7353      	strb	r3, [r2, #13]
 8006d6e:	4640      	mov	r0, r8
 8006d70:	f7fb fe24 	bl	80029bc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8006d74:	f004 fa0f 	bl	800b196 <sys_clock_tick_get_32>
 8006d78:	1a28      	subs	r0, r5, r0
 8006d7a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8006d7e:	2801      	cmp	r0, #1
 8006d80:	f173 0300 	sbcs.w	r3, r3, #0
 8006d84:	da00      	bge.n	8006d88 <z_tick_sleep+0x78>
	return 0;
 8006d86:	2000      	movs	r0, #0
}
 8006d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8006d8c:	f7ff ff7c 	bl	8006c88 <z_impl_k_yield>
		return 0;
 8006d90:	2000      	movs	r0, #0
 8006d92:	e7f9      	b.n	8006d88 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8006d94:	f004 f9ff 	bl	800b196 <sys_clock_tick_get_32>
 8006d98:	1905      	adds	r5, r0, r4
 8006d9a:	e7ce      	b.n	8006d3a <z_tick_sleep+0x2a>
 8006d9c:	20000b88 	.word	0x20000b88
 8006da0:	20000bc0 	.word	0x20000bc0
 8006da4:	0800ae9d 	.word	0x0800ae9d

08006da8 <z_impl_k_sleep>:
{
 8006da8:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006daa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8006dae:	bf08      	it	eq
 8006db0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8006db4:	d007      	beq.n	8006dc6 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8006db6:	f7ff ffab 	bl	8006d10 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8006dba:	220a      	movs	r2, #10
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	17c1      	asrs	r1, r0, #31
 8006dc0:	f7f9 fe0c 	bl	80009dc <__aeabi_uldivmod>
}
 8006dc4:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8006dc6:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <z_impl_k_sleep+0x2c>)
 8006dc8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8006dca:	f7ff fe9b 	bl	8006b04 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd2:	e7f7      	b.n	8006dc4 <z_impl_k_sleep+0x1c>
 8006dd4:	20000b88 	.word	0x20000b88

08006dd8 <z_impl_z_current_get>:
}
 8006dd8:	4b01      	ldr	r3, [pc, #4]	; (8006de0 <z_impl_z_current_get+0x8>)
 8006dda:	6898      	ldr	r0, [r3, #8]
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000b88 	.word	0x20000b88

08006de4 <z_impl_k_is_preempt_thread>:
 8006de4:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8006de8:	b933      	cbnz	r3, 8006df8 <z_impl_k_is_preempt_thread+0x14>
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <z_impl_k_is_preempt_thread+0x1c>)
 8006dec:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8006dee:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8006df0:	2b7f      	cmp	r3, #127	; 0x7f
 8006df2:	d803      	bhi.n	8006dfc <z_impl_k_is_preempt_thread+0x18>
 8006df4:	2001      	movs	r0, #1
 8006df6:	4770      	bx	lr
 8006df8:	2000      	movs	r0, #0
 8006dfa:	4770      	bx	lr
 8006dfc:	2000      	movs	r0, #0
}
 8006dfe:	4770      	bx	lr
 8006e00:	20000b88 	.word	0x20000b88

08006e04 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	f04f 0310 	mov.w	r3, #16
 8006e0a:	f3ef 8511 	mrs	r5, BASEPRI
 8006e0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8006e12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8006e16:	7b43      	ldrb	r3, [r0, #13]
 8006e18:	f013 0f08 	tst.w	r3, #8
 8006e1c:	d004      	beq.n	8006e28 <z_thread_abort+0x24>
	__asm__ volatile(
 8006e1e:	f385 8811 	msr	BASEPRI, r5
 8006e22:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	4604      	mov	r4, r0
	end_thread(thread);
 8006e2a:	f7ff fed5 	bl	8006bd8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8006e2e:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <z_thread_abort+0x4c>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	d004      	beq.n	8006e40 <z_thread_abort+0x3c>
 8006e36:	f385 8811 	msr	BASEPRI, r5
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	e7f2      	b.n	8006e26 <z_thread_abort+0x22>
 8006e40:	f3ef 8305 	mrs	r3, IPSR
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f6      	bne.n	8006e36 <z_thread_abort+0x32>
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7fb fdb7 	bl	80029bc <arch_swap>
	return ret;
 8006e4e:	e7f2      	b.n	8006e36 <z_thread_abort+0x32>
 8006e50:	20000b88 	.word	0x20000b88

08006e54 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8006e54:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8006e5c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8006e60:	e9cd bc00 	strd	fp, ip, [sp]
 8006e64:	f7ff fdda 	bl	8006a1c <z_pend_curr>

	if (data != NULL) {
 8006e68:	b11c      	cbz	r4, 8006e72 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 8006e6a:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <z_sched_wait+0x24>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8006e72:	b003      	add	sp, #12
 8006e74:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 8006e78:	20000b88 	.word	0x20000b88

08006e7c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8006e7c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8006e7e:	4806      	ldr	r0, [pc, #24]	; (8006e98 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8006e80:	4a06      	ldr	r2, [pc, #24]	; (8006e9c <z_data_copy+0x20>)
 8006e82:	1a12      	subs	r2, r2, r0
 8006e84:	4906      	ldr	r1, [pc, #24]	; (8006ea0 <z_data_copy+0x24>)
 8006e86:	f004 faf1 	bl	800b46c <memcpy>
 8006e8a:	4a06      	ldr	r2, [pc, #24]	; (8006ea4 <z_data_copy+0x28>)
 8006e8c:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <z_data_copy+0x2c>)
 8006e8e:	4807      	ldr	r0, [pc, #28]	; (8006eac <z_data_copy+0x30>)
 8006e90:	f004 faec 	bl	800b46c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8006e94:	bd08      	pop	{r3, pc}
 8006e96:	bf00      	nop
 8006e98:	20000000 	.word	0x20000000
 8006e9c:	2000039c 	.word	0x2000039c
 8006ea0:	0800c820 	.word	0x0800c820
 8006ea4:	00000000 	.word	0x00000000
 8006ea8:	0800c820 	.word	0x0800c820
 8006eac:	20000000 	.word	0x20000000

08006eb0 <first>:
	return list->head == list;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <first+0x10>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006eb4:	4298      	cmp	r0, r3
 8006eb6:	d000      	beq.n	8006eba <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8006eb8:	4770      	bx	lr
 8006eba:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8006ebc:	e7fc      	b.n	8006eb8 <first+0x8>
 8006ebe:	bf00      	nop
 8006ec0:	200000b0 	.word	0x200000b0

08006ec4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006ec4:	b130      	cbz	r0, 8006ed4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8006ec6:	4a04      	ldr	r2, [pc, #16]	; (8006ed8 <next+0x14>)
 8006ec8:	6852      	ldr	r2, [r2, #4]
 8006eca:	4290      	cmp	r0, r2
 8006ecc:	d001      	beq.n	8006ed2 <next+0xe>
 8006ece:	6800      	ldr	r0, [r0, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	200000b0 	.word	0x200000b0

08006edc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8006edc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006ede:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <elapsed+0x14>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	b10b      	cbz	r3, 8006ee8 <elapsed+0xc>
 8006ee4:	2000      	movs	r0, #0
}
 8006ee6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006ee8:	f7fe fe04 	bl	8005af4 <sys_clock_elapsed>
 8006eec:	e7fb      	b.n	8006ee6 <elapsed+0xa>
 8006eee:	bf00      	nop
 8006ef0:	20000bd0 	.word	0x20000bd0

08006ef4 <next_timeout>:

static int32_t next_timeout(void)
{
 8006ef4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8006ef6:	f7ff ffdb 	bl	8006eb0 <first>
 8006efa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8006efc:	f7ff ffee 	bl	8006edc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8006f00:	b18c      	cbz	r4, 8006f26 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	6962      	ldr	r2, [r4, #20]
 8006f06:	1a1b      	subs	r3, r3, r0
 8006f08:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	f172 0100 	sbcs.w	r1, r2, #0
 8006f12:	db11      	blt.n	8006f38 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8006f14:	4618      	mov	r0, r3
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	f172 0300 	sbcs.w	r3, r2, #0
 8006f1e:	db04      	blt.n	8006f2a <next_timeout+0x36>
 8006f20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006f24:	e001      	b.n	8006f2a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 8006f26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006f2a:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <next_timeout+0x48>)
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	b113      	cbz	r3, 8006f36 <next_timeout+0x42>
 8006f30:	4283      	cmp	r3, r0
 8006f32:	da00      	bge.n	8006f36 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 8006f34:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8006f36:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e7f6      	b.n	8006f2a <next_timeout+0x36>
 8006f3c:	20000b88 	.word	0x20000b88

08006f40 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f44:	bf08      	it	eq
 8006f46:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8006f4a:	d07f      	beq.n	800704c <z_add_timeout+0x10c>
{
 8006f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	4604      	mov	r4, r0
 8006f52:	4691      	mov	r9, r2
 8006f54:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8006f56:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8006f58:	2300      	movs	r3, #0
	__asm__ volatile(
 8006f5a:	f04f 0210 	mov.w	r2, #16
 8006f5e:	f3ef 8711 	mrs	r7, BASEPRI
 8006f62:	f382 8812 	msr	BASEPRI_MAX, r2
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	e021      	b.n	8006fb0 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8006f6c:	f7ff ffb6 	bl	8006edc <elapsed>
 8006f70:	eb19 0800 	adds.w	r8, r9, r0
 8006f74:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8006f78:	f118 0301 	adds.w	r3, r8, #1
 8006f7c:	f140 0000 	adc.w	r0, r0, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	6160      	str	r0, [r4, #20]
 8006f84:	e038      	b.n	8006ff8 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8006f86:	1a51      	subs	r1, r2, r1
 8006f88:	eb66 0303 	sbc.w	r3, r6, r3
 8006f8c:	6101      	str	r1, [r0, #16]
 8006f8e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8006f90:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 8006f92:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006f94:	6020      	str	r0, [r4, #0]
	prev->next = node;
 8006f96:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006f98:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d040      	beq.n	8007020 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8006f9e:	f7ff ff87 	bl	8006eb0 <first>
 8006fa2:	4284      	cmp	r4, r0
 8006fa4:	d043      	beq.n	800702e <z_add_timeout+0xee>
	__asm__ volatile(
 8006fa6:	f387 8811 	msr	BASEPRI, r7
 8006faa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8006fae:	2301      	movs	r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d149      	bne.n	8007048 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8006fb4:	f06f 0201 	mvn.w	r2, #1
 8006fb8:	ebb2 0209 	subs.w	r2, r2, r9
 8006fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006fc0:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dbd1      	blt.n	8006f6c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8006fc8:	4b21      	ldr	r3, [pc, #132]	; (8007050 <z_add_timeout+0x110>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	eb19 0202 	adds.w	r2, r9, r2
 8006fd2:	eb43 0305 	adc.w	r3, r3, r5
 8006fd6:	f06f 0801 	mvn.w	r8, #1
 8006fda:	ebb8 0802 	subs.w	r8, r8, r2
 8006fde:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f1b8 0f01 	cmp.w	r8, #1
 8006fea:	f173 0300 	sbcs.w	r3, r3, #0
 8006fee:	da01      	bge.n	8006ff4 <z_add_timeout+0xb4>
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6121      	str	r1, [r4, #16]
 8006ff6:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006ff8:	f7ff ff5a 	bl	8006eb0 <first>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d0cc      	beq.n	8006f9a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8007000:	6902      	ldr	r2, [r0, #16]
 8007002:	6946      	ldr	r6, [r0, #20]
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	6963      	ldr	r3, [r4, #20]
 8007008:	4291      	cmp	r1, r2
 800700a:	eb73 0c06 	sbcs.w	ip, r3, r6
 800700e:	dbba      	blt.n	8006f86 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8007010:	1a89      	subs	r1, r1, r2
 8007012:	eb63 0306 	sbc.w	r3, r3, r6
 8007016:	6121      	str	r1, [r4, #16]
 8007018:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800701a:	f7ff ff53 	bl	8006ec4 <next>
 800701e:	e7ed      	b.n	8006ffc <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <z_add_timeout+0x114>)
 8007022:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8007024:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8007026:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8007028:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800702a:	605c      	str	r4, [r3, #4]
}
 800702c:	e7b7      	b.n	8006f9e <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800702e:	f7ff ff61 	bl	8006ef4 <next_timeout>

			if (next_time == 0 ||
 8007032:	4603      	mov	r3, r0
 8007034:	b118      	cbz	r0, 800703e <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 8007036:	4a08      	ldr	r2, [pc, #32]	; (8007058 <z_add_timeout+0x118>)
 8007038:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800703a:	4282      	cmp	r2, r0
 800703c:	d0b3      	beq.n	8006fa6 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fcd7 	bl	80059f4 <sys_clock_set_timeout>
 8007046:	e7ae      	b.n	8006fa6 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8007048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200005d8 	.word	0x200005d8
 8007054:	200000b0 	.word	0x200000b0
 8007058:	20000b88 	.word	0x20000b88

0800705c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8007060:	f7ff fc0c 	bl	800687c <z_time_slice>
	__asm__ volatile(
 8007064:	f04f 0310 	mov.w	r3, #16
 8007068:	f3ef 8511 	mrs	r5, BASEPRI
 800706c:	f383 8812 	msr	BASEPRI_MAX, r3
 8007070:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8007074:	4b28      	ldr	r3, [pc, #160]	; (8007118 <sys_clock_announce+0xbc>)
 8007076:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007078:	e020      	b.n	80070bc <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800707a:	4828      	ldr	r0, [pc, #160]	; (800711c <sys_clock_announce+0xc0>)
 800707c:	6801      	ldr	r1, [r0, #0]
 800707e:	6846      	ldr	r6, [r0, #4]
 8007080:	1889      	adds	r1, r1, r2
 8007082:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 8007086:	6001      	str	r1, [r0, #0]
 8007088:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	4a22      	ldr	r2, [pc, #136]	; (8007118 <sys_clock_announce+0xbc>)
 800708e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8007098:	4620      	mov	r0, r4
 800709a:	f004 f81c 	bl	800b0d6 <remove_timeout>
	__asm__ volatile(
 800709e:	f385 8811 	msr	BASEPRI, r5
 80070a2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	4620      	mov	r0, r4
 80070aa:	4798      	blx	r3
	__asm__ volatile(
 80070ac:	f04f 0310 	mov.w	r3, #16
 80070b0:	f3ef 8511 	mrs	r5, BASEPRI
 80070b4:	f383 8812 	msr	BASEPRI_MAX, r3
 80070b8:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80070bc:	f7ff fef8 	bl	8006eb0 <first>
 80070c0:	4604      	mov	r4, r0
 80070c2:	b140      	cbz	r0, 80070d6 <sys_clock_announce+0x7a>
 80070c4:	6902      	ldr	r2, [r0, #16]
 80070c6:	6941      	ldr	r1, [r0, #20]
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <sys_clock_announce+0xbc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	17d8      	asrs	r0, r3, #31
 80070ce:	4293      	cmp	r3, r2
 80070d0:	eb70 0101 	sbcs.w	r1, r0, r1
 80070d4:	dad1      	bge.n	800707a <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 80070d6:	b144      	cbz	r4, 80070ea <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 80070d8:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <sys_clock_announce+0xbc>)
 80070da:	6819      	ldr	r1, [r3, #0]
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	6962      	ldr	r2, [r4, #20]
 80070e0:	1a5b      	subs	r3, r3, r1
 80070e2:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <sys_clock_announce+0xc0>)
 80070ec:	4e0a      	ldr	r6, [pc, #40]	; (8007118 <sys_clock_announce+0xbc>)
 80070ee:	6830      	ldr	r0, [r6, #0]
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	6851      	ldr	r1, [r2, #4]
 80070f4:	181b      	adds	r3, r3, r0
 80070f6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 80070fe:	2400      	movs	r4, #0
 8007100:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8007102:	f7ff fef7 	bl	8006ef4 <next_timeout>
 8007106:	4621      	mov	r1, r4
 8007108:	f7fe fc74 	bl	80059f4 <sys_clock_set_timeout>
	__asm__ volatile(
 800710c:	f385 8811 	msr	BASEPRI, r5
 8007110:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	bf00      	nop
 8007118:	20000bd0 	.word	0x20000bd0
 800711c:	200005d8 	.word	0x200005d8

08007120 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8007120:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8007122:	2300      	movs	r3, #0
	__asm__ volatile(
 8007124:	f04f 0210 	mov.w	r2, #16
 8007128:	f3ef 8411 	mrs	r4, BASEPRI
 800712c:	f382 8812 	msr	BASEPRI_MAX, r2
 8007130:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8007134:	4618      	mov	r0, r3
 8007136:	4619      	mov	r1, r3
 8007138:	e00c      	b.n	8007154 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800713a:	f7fe fcdb 	bl	8005af4 <sys_clock_elapsed>
 800713e:	4a07      	ldr	r2, [pc, #28]	; (800715c <sys_clock_tick_get+0x3c>)
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	6851      	ldr	r1, [r2, #4]
 8007144:	18c0      	adds	r0, r0, r3
 8007146:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800714a:	f384 8811 	msr	BASEPRI, r4
 800714e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8007152:	2301      	movs	r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8007158:	bd10      	pop	{r4, pc}
 800715a:	bf00      	nop
 800715c:	200005d8 	.word	0x200005d8

08007160 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8007160:	b900      	cbnz	r0, 8007164 <z_impl_k_busy_wait+0x4>
 8007162:	4770      	bx	lr
{
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8007168:	f7fe fce4 	bl	8005b34 <sys_clock_cycle_get_32>
 800716c:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800716e:	4907      	ldr	r1, [pc, #28]	; (800718c <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8007170:	4a07      	ldr	r2, [pc, #28]	; (8007190 <z_impl_k_busy_wait+0x30>)
 8007172:	2300      	movs	r3, #0
 8007174:	fba4 0101 	umull	r0, r1, r4, r1
 8007178:	f7f9 fc30 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800717c:	4604      	mov	r4, r0
 800717e:	f7fe fcd9 	bl	8005b34 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8007182:	1b40      	subs	r0, r0, r5
 8007184:	42a0      	cmp	r0, r4
 8007186:	d3fa      	bcc.n	800717e <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	04c4b400 	.word	0x04c4b400
 8007190:	000f4240 	.word	0x000f4240

08007194 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4604      	mov	r4, r0
	__asm__ volatile(
 8007198:	f04f 0310 	mov.w	r3, #16
 800719c:	f3ef 8511 	mrs	r5, BASEPRI
 80071a0:	f383 8812 	msr	BASEPRI_MAX, r3
 80071a4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80071a8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80071aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80071ac:	ea52 0103 	orrs.w	r1, r2, r3
 80071b0:	d005      	beq.n	80071be <z_timer_expiration_handler+0x2a>
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071b6:	bf08      	it	eq
 80071b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80071bc:	d119      	bne.n	80071f2 <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80071be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071c0:	3301      	adds	r3, #1
 80071c2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80071c4:	6a23      	ldr	r3, [r4, #32]
 80071c6:	b10b      	cbz	r3, 80071cc <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 80071c8:	4620      	mov	r0, r4
 80071ca:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80071cc:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 80071d0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	d013      	beq.n	80071fe <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80071d6:	b194      	cbz	r4, 80071fe <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 80071d8:	4620      	mov	r0, r4
 80071da:	f003 fddb 	bl	800ad94 <z_unpend_thread_no_timeout>
 80071de:	2300      	movs	r3, #0
 80071e0:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 80071e2:	f385 8811 	msr	BASEPRI, r5
 80071e6:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 80071ea:	4620      	mov	r0, r4
 80071ec:	f003 fe3a 	bl	800ae64 <z_ready_thread>
}
 80071f0:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80071f2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80071f6:	4904      	ldr	r1, [pc, #16]	; (8007208 <z_timer_expiration_handler+0x74>)
 80071f8:	f7ff fea2 	bl	8006f40 <z_add_timeout>
 80071fc:	e7df      	b.n	80071be <z_timer_expiration_handler+0x2a>
 80071fe:	f385 8811 	msr	BASEPRI, r5
 8007202:	f3bf 8f6f 	isb	sy
		return;
 8007206:	e7f3      	b.n	80071f0 <z_timer_expiration_handler+0x5c>
 8007208:	08007195 	.word	0x08007195

0800720c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007210:	461d      	mov	r5, r3
 8007212:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007216:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800721c:	bf08      	it	eq
 800721e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8007222:	d02f      	beq.n	8007284 <z_impl_k_timer_start+0x78>
 8007224:	4604      	mov	r4, r0
 8007226:	4616      	mov	r6, r2
 8007228:	4613      	mov	r3, r2
 800722a:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800722c:	4642      	mov	r2, r8
 800722e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8007232:	bf08      	it	eq
 8007234:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8007238:	d00d      	beq.n	8007256 <z_impl_k_timer_start+0x4a>
 800723a:	ea58 0c07 	orrs.w	ip, r8, r7
 800723e:	d00a      	beq.n	8007256 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 8007240:	f06f 0c01 	mvn.w	ip, #1
 8007244:	ebbc 0c08 	subs.w	ip, ip, r8
 8007248:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800724c:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8007250:	f1bc 0f00 	cmp.w	ip, #0
 8007254:	db18      	blt.n	8007288 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8007256:	f06f 0201 	mvn.w	r2, #1
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007260:	eb62 0201 	sbc.w	r2, r2, r1
 8007264:	2a00      	cmp	r2, #0
 8007266:	db1c      	blt.n	80072a2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8007268:	4620      	mov	r0, r4
 800726a:	f003 ff4b 	bl	800b104 <z_abort_timeout>
	timer->period = period;
 800726e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8007272:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8007278:	4632      	mov	r2, r6
 800727a:	462b      	mov	r3, r5
 800727c:	490d      	ldr	r1, [pc, #52]	; (80072b4 <z_impl_k_timer_start+0xa8>)
 800727e:	4620      	mov	r0, r4
 8007280:	f7ff fe5e 	bl	8006f40 <z_add_timeout>
		     duration);
}
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8007288:	3a01      	subs	r2, #1
 800728a:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 800728e:	4690      	mov	r8, r2
 8007290:	4607      	mov	r7, r0
 8007292:	2a01      	cmp	r2, #1
 8007294:	f170 0200 	sbcs.w	r2, r0, #0
 8007298:	dadd      	bge.n	8007256 <z_impl_k_timer_start+0x4a>
 800729a:	f04f 0801 	mov.w	r8, #1
 800729e:	2700      	movs	r7, #0
 80072a0:	e7d9      	b.n	8007256 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80072a2:	1e5e      	subs	r6, r3, #1
 80072a4:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80072a8:	460d      	mov	r5, r1
 80072aa:	2900      	cmp	r1, #0
 80072ac:	dadc      	bge.n	8007268 <z_impl_k_timer_start+0x5c>
 80072ae:	2600      	movs	r6, #0
 80072b0:	4635      	mov	r5, r6
 80072b2:	e7d9      	b.n	8007268 <z_impl_k_timer_start+0x5c>
 80072b4:	08007195 	.word	0x08007195

080072b8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	b087      	sub	sp, #28
 80072be:	4682      	mov	sl, r0
 80072c0:	460f      	mov	r7, r1
 80072c2:	4693      	mov	fp, r2
 80072c4:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 80072c6:	2500      	movs	r5, #0
	int events_registered = 0;
 80072c8:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 80072ca:	e02f      	b.n	800732c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	b1cb      	cbz	r3, 8007306 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 80072d2:	f04f 0902 	mov.w	r9, #2
			return true;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e015      	b.n	8007306 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 80072da:	6923      	ldr	r3, [r4, #16]
	return list->head;
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	b193      	cbz	r3, 8007306 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80072e0:	f04f 0904 	mov.w	r9, #4
			return true;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e00e      	b.n	8007306 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	b15b      	cbz	r3, 8007306 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 80072ee:	f04f 0901 	mov.w	r9, #1
			return true;
 80072f2:	464b      	mov	r3, r9
 80072f4:	e007      	b.n	8007306 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	b123      	cbz	r3, 8007306 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 80072fc:	f04f 0910 	mov.w	r9, #16
			return true;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <register_events+0x4e>
	switch (event->type) {
 8007304:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 8007306:	2b00      	cmp	r3, #0
 8007308:	d03a      	beq.n	8007380 <register_events+0xc8>
	event->poller = NULL;
 800730a:	2100      	movs	r1, #0
 800730c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	f3c3 3245 	ubfx	r2, r3, #13, #6
 8007314:	ea49 0202 	orr.w	r2, r9, r2
 8007318:	f362 3352 	bfi	r3, r2, #13, #6
 800731c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800731e:	f88b 1000 	strb.w	r1, [fp]
 8007322:	f386 8811 	msr	BASEPRI, r6
 8007326:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800732a:	3501      	adds	r5, #1
 800732c:	42bd      	cmp	r5, r7
 800732e:	f280 81b9 	bge.w	80076a4 <register_events+0x3ec>
	__asm__ volatile(
 8007332:	f04f 0310 	mov.w	r3, #16
 8007336:	f3ef 8611 	mrs	r6, BASEPRI
 800733a:	f383 8812 	msr	BASEPRI_MAX, r3
 800733e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8007342:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8007346:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800734a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800734e:	7b63      	ldrb	r3, [r4, #13]
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	3b01      	subs	r3, #1
 8007356:	2b07      	cmp	r3, #7
 8007358:	d8d4      	bhi.n	8007304 <register_events+0x4c>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <register_events+0xa8>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	080072e9 	.word	0x080072e9
 8007364:	080072cd 	.word	0x080072cd
 8007368:	08007305 	.word	0x08007305
 800736c:	080072db 	.word	0x080072db
 8007370:	08007305 	.word	0x08007305
 8007374:	08007305 	.word	0x08007305
 8007378:	08007305 	.word	0x08007305
 800737c:	080072f7 	.word	0x080072f7
		} else if (!just_check && poller->is_polling) {
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1cd      	bne.n	8007322 <register_events+0x6a>
 8007386:	f89b 3000 	ldrb.w	r3, [fp]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0c9      	beq.n	8007322 <register_events+0x6a>
	switch (event->type) {
 800738e:	7b63      	ldrb	r3, [r4, #13]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	3b01      	subs	r3, #1
 8007396:	2b07      	cmp	r3, #7
 8007398:	d848      	bhi.n	800742c <register_events+0x174>
 800739a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800739e:	00cb      	.short	0x00cb
 80073a0:	00470008 	.word	0x00470008
 80073a4:	0047006d 	.word	0x0047006d
 80073a8:	00470047 	.word	0x00470047
 80073ac:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	9304      	str	r3, [sp, #16]
 80073b2:	f103 0210 	add.w	r2, r3, #16
 80073b6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80073b8:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d02f      	beq.n	800741e <register_events+0x166>
 80073be:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02c      	beq.n	800741e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80073c4:	6898      	ldr	r0, [r3, #8]
 80073c6:	f003 ff41 	bl	800b24c <poller_thread>
 80073ca:	9005      	str	r0, [sp, #20]
 80073cc:	4658      	mov	r0, fp
 80073ce:	f003 ff3d 	bl	800b24c <poller_thread>
 80073d2:	4601      	mov	r1, r0
 80073d4:	9003      	str	r0, [sp, #12]
 80073d6:	9805      	ldr	r0, [sp, #20]
 80073d8:	f003 fcd2 	bl	800ad80 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80073dc:	2800      	cmp	r0, #0
 80073de:	dc1e      	bgt.n	800741e <register_events+0x166>
	return list->head == list;
 80073e0:	9b04      	ldr	r3, [sp, #16]
 80073e2:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80073e4:	9a02      	ldr	r2, [sp, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d030      	beq.n	800744c <register_events+0x194>
 80073ea:	9404      	str	r4, [sp, #16]
 80073ec:	9505      	str	r5, [sp, #20]
 80073ee:	9d02      	ldr	r5, [sp, #8]
 80073f0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	d030      	beq.n	8007458 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 80073f6:	68a0      	ldr	r0, [r4, #8]
 80073f8:	f003 ff28 	bl	800b24c <poller_thread>
 80073fc:	4601      	mov	r1, r0
 80073fe:	9803      	ldr	r0, [sp, #12]
 8007400:	f003 fcbe 	bl	800ad80 <z_sched_prio_cmp>
 8007404:	2800      	cmp	r0, #0
 8007406:	dc17      	bgt.n	8007438 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007408:	2c00      	cmp	r4, #0
 800740a:	d028      	beq.n	800745e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800740c:	686b      	ldr	r3, [r5, #4]
 800740e:	429c      	cmp	r4, r3
 8007410:	d02f      	beq.n	8007472 <register_events+0x1ba>
 8007412:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007414:	2c00      	cmp	r4, #0
 8007416:	d1ec      	bne.n	80073f2 <register_events+0x13a>
 8007418:	9c04      	ldr	r4, [sp, #16]
 800741a:	9d05      	ldr	r5, [sp, #20]
 800741c:	e021      	b.n	8007462 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800741e:	9a02      	ldr	r2, [sp, #8]
 8007420:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007422:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007426:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007428:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800742a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800742c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	e774      	b.n	8007322 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 8007438:	9d05      	ldr	r5, [sp, #20]
 800743a:	4622      	mov	r2, r4
 800743c:	9c04      	ldr	r4, [sp, #16]
 800743e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007440:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007442:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007446:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007448:	6054      	str	r4, [r2, #4]
			return;
 800744a:	e7ef      	b.n	800742c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800744c:	2300      	movs	r3, #0
 800744e:	9404      	str	r4, [sp, #16]
 8007450:	9505      	str	r5, [sp, #20]
 8007452:	9d02      	ldr	r5, [sp, #8]
 8007454:	461c      	mov	r4, r3
 8007456:	e7cc      	b.n	80073f2 <register_events+0x13a>
 8007458:	9c04      	ldr	r4, [sp, #16]
 800745a:	9d05      	ldr	r5, [sp, #20]
 800745c:	e001      	b.n	8007462 <register_events+0x1aa>
 800745e:	9c04      	ldr	r4, [sp, #16]
 8007460:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007462:	9a02      	ldr	r2, [sp, #8]
 8007464:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007466:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800746a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800746c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800746e:	6054      	str	r4, [r2, #4]
}
 8007470:	e7dc      	b.n	800742c <register_events+0x174>
 8007472:	9c04      	ldr	r4, [sp, #16]
 8007474:	9d05      	ldr	r5, [sp, #20]
 8007476:	e7f4      	b.n	8007462 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f103 0214 	add.w	r2, r3, #20
 8007480:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8007482:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8007484:	429a      	cmp	r2, r3
 8007486:	d02d      	beq.n	80074e4 <register_events+0x22c>
 8007488:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800748a:	b35b      	cbz	r3, 80074e4 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800748c:	6898      	ldr	r0, [r3, #8]
 800748e:	f003 fedd 	bl	800b24c <poller_thread>
 8007492:	9005      	str	r0, [sp, #20]
 8007494:	4658      	mov	r0, fp
 8007496:	f003 fed9 	bl	800b24c <poller_thread>
 800749a:	4601      	mov	r1, r0
 800749c:	9003      	str	r0, [sp, #12]
 800749e:	9805      	ldr	r0, [sp, #20]
 80074a0:	f003 fc6e 	bl	800ad80 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80074a4:	2800      	cmp	r0, #0
 80074a6:	dc1d      	bgt.n	80074e4 <register_events+0x22c>
	return list->head == list;
 80074a8:	9b04      	ldr	r3, [sp, #16]
 80074aa:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80074ac:	9a02      	ldr	r2, [sp, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d02a      	beq.n	8007508 <register_events+0x250>
 80074b2:	9404      	str	r4, [sp, #16]
 80074b4:	9505      	str	r5, [sp, #20]
 80074b6:	9d02      	ldr	r5, [sp, #8]
 80074b8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	d02a      	beq.n	8007514 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 80074be:	68a0      	ldr	r0, [r4, #8]
 80074c0:	f003 fec4 	bl	800b24c <poller_thread>
 80074c4:	4601      	mov	r1, r0
 80074c6:	9803      	ldr	r0, [sp, #12]
 80074c8:	f003 fc5a 	bl	800ad80 <z_sched_prio_cmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dc11      	bgt.n	80074f4 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80074d0:	b31c      	cbz	r4, 800751a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 80074d2:	686b      	ldr	r3, [r5, #4]
 80074d4:	429c      	cmp	r4, r3
 80074d6:	d02a      	beq.n	800752e <register_events+0x276>
 80074d8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d1ed      	bne.n	80074ba <register_events+0x202>
 80074de:	9c04      	ldr	r4, [sp, #16]
 80074e0:	9d05      	ldr	r5, [sp, #20]
 80074e2:	e01c      	b.n	800751e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 80074e4:	9a02      	ldr	r2, [sp, #8]
 80074e6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80074e8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80074ec:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80074ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80074f0:	6054      	str	r4, [r2, #4]
		return;
 80074f2:	e79b      	b.n	800742c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80074f4:	9d05      	ldr	r5, [sp, #20]
 80074f6:	4622      	mov	r2, r4
 80074f8:	9c04      	ldr	r4, [sp, #16]
 80074fa:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80074fc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80074fe:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007502:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007504:	6054      	str	r4, [r2, #4]
			return;
 8007506:	e791      	b.n	800742c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007508:	2300      	movs	r3, #0
 800750a:	9404      	str	r4, [sp, #16]
 800750c:	9505      	str	r5, [sp, #20]
 800750e:	9d02      	ldr	r5, [sp, #8]
 8007510:	461c      	mov	r4, r3
 8007512:	e7d2      	b.n	80074ba <register_events+0x202>
 8007514:	9c04      	ldr	r4, [sp, #16]
 8007516:	9d05      	ldr	r5, [sp, #20]
 8007518:	e001      	b.n	800751e <register_events+0x266>
 800751a:	9c04      	ldr	r4, [sp, #16]
 800751c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800751e:	9a02      	ldr	r2, [sp, #8]
 8007520:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007522:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007526:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007528:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800752a:	6054      	str	r4, [r2, #4]
}
 800752c:	e77e      	b.n	800742c <register_events+0x174>
 800752e:	9c04      	ldr	r4, [sp, #16]
 8007530:	9d05      	ldr	r5, [sp, #20]
 8007532:	e7f4      	b.n	800751e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8007538:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800753a:	429a      	cmp	r2, r3
 800753c:	d02c      	beq.n	8007598 <register_events+0x2e0>
 800753e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8007540:	b353      	cbz	r3, 8007598 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007542:	6898      	ldr	r0, [r3, #8]
 8007544:	f003 fe82 	bl	800b24c <poller_thread>
 8007548:	9004      	str	r0, [sp, #16]
 800754a:	4658      	mov	r0, fp
 800754c:	f003 fe7e 	bl	800b24c <poller_thread>
 8007550:	4601      	mov	r1, r0
 8007552:	9003      	str	r0, [sp, #12]
 8007554:	9804      	ldr	r0, [sp, #16]
 8007556:	f003 fc13 	bl	800ad80 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800755a:	2800      	cmp	r0, #0
 800755c:	dc1c      	bgt.n	8007598 <register_events+0x2e0>
	return list->head == list;
 800755e:	9b02      	ldr	r3, [sp, #8]
 8007560:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007562:	4293      	cmp	r3, r2
 8007564:	d02a      	beq.n	80075bc <register_events+0x304>
 8007566:	9404      	str	r4, [sp, #16]
 8007568:	9505      	str	r5, [sp, #20]
 800756a:	9d02      	ldr	r5, [sp, #8]
 800756c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800756e:	2c00      	cmp	r4, #0
 8007570:	d02a      	beq.n	80075c8 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 8007572:	68a0      	ldr	r0, [r4, #8]
 8007574:	f003 fe6a 	bl	800b24c <poller_thread>
 8007578:	4601      	mov	r1, r0
 800757a:	9803      	ldr	r0, [sp, #12]
 800757c:	f003 fc00 	bl	800ad80 <z_sched_prio_cmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	dc11      	bgt.n	80075a8 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007584:	b31c      	cbz	r4, 80075ce <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 8007586:	686b      	ldr	r3, [r5, #4]
 8007588:	429c      	cmp	r4, r3
 800758a:	d02a      	beq.n	80075e2 <register_events+0x32a>
 800758c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800758e:	2c00      	cmp	r4, #0
 8007590:	d1ed      	bne.n	800756e <register_events+0x2b6>
 8007592:	9c04      	ldr	r4, [sp, #16]
 8007594:	9d05      	ldr	r5, [sp, #20]
 8007596:	e01c      	b.n	80075d2 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 8007598:	9a02      	ldr	r2, [sp, #8]
 800759a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800759c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80075a0:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80075a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80075a4:	6054      	str	r4, [r2, #4]
		return;
 80075a6:	e741      	b.n	800742c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80075a8:	9d05      	ldr	r5, [sp, #20]
 80075aa:	4622      	mov	r2, r4
 80075ac:	9c04      	ldr	r4, [sp, #16]
 80075ae:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80075b0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80075b2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80075b6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80075b8:	6054      	str	r4, [r2, #4]
			return;
 80075ba:	e737      	b.n	800742c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80075bc:	2300      	movs	r3, #0
 80075be:	9404      	str	r4, [sp, #16]
 80075c0:	9505      	str	r5, [sp, #20]
 80075c2:	9d02      	ldr	r5, [sp, #8]
 80075c4:	461c      	mov	r4, r3
 80075c6:	e7d2      	b.n	800756e <register_events+0x2b6>
 80075c8:	9c04      	ldr	r4, [sp, #16]
 80075ca:	9d05      	ldr	r5, [sp, #20]
 80075cc:	e001      	b.n	80075d2 <register_events+0x31a>
 80075ce:	9c04      	ldr	r4, [sp, #16]
 80075d0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80075d2:	9a02      	ldr	r2, [sp, #8]
 80075d4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80075d6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80075da:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80075dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80075de:	6054      	str	r4, [r2, #4]
}
 80075e0:	e724      	b.n	800742c <register_events+0x174>
 80075e2:	9c04      	ldr	r4, [sp, #16]
 80075e4:	9d05      	ldr	r5, [sp, #20]
 80075e6:	e7f4      	b.n	80075d2 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	9304      	str	r3, [sp, #16]
 80075ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80075f0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d02d      	beq.n	8007654 <register_events+0x39c>
 80075f8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80075fa:	b35b      	cbz	r3, 8007654 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80075fc:	6898      	ldr	r0, [r3, #8]
 80075fe:	f003 fe25 	bl	800b24c <poller_thread>
 8007602:	9005      	str	r0, [sp, #20]
 8007604:	4658      	mov	r0, fp
 8007606:	f003 fe21 	bl	800b24c <poller_thread>
 800760a:	4601      	mov	r1, r0
 800760c:	9003      	str	r0, [sp, #12]
 800760e:	9805      	ldr	r0, [sp, #20]
 8007610:	f003 fbb6 	bl	800ad80 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8007614:	2800      	cmp	r0, #0
 8007616:	dc1d      	bgt.n	8007654 <register_events+0x39c>
	return list->head == list;
 8007618:	9b04      	ldr	r3, [sp, #16]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800761c:	9a02      	ldr	r2, [sp, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	d02a      	beq.n	8007678 <register_events+0x3c0>
 8007622:	9404      	str	r4, [sp, #16]
 8007624:	9505      	str	r5, [sp, #20]
 8007626:	9d02      	ldr	r5, [sp, #8]
 8007628:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800762a:	2c00      	cmp	r4, #0
 800762c:	d02a      	beq.n	8007684 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800762e:	68a0      	ldr	r0, [r4, #8]
 8007630:	f003 fe0c 	bl	800b24c <poller_thread>
 8007634:	4601      	mov	r1, r0
 8007636:	9803      	ldr	r0, [sp, #12]
 8007638:	f003 fba2 	bl	800ad80 <z_sched_prio_cmp>
 800763c:	2800      	cmp	r0, #0
 800763e:	dc11      	bgt.n	8007664 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007640:	b31c      	cbz	r4, 800768a <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 8007642:	686b      	ldr	r3, [r5, #4]
 8007644:	429c      	cmp	r4, r3
 8007646:	d02a      	beq.n	800769e <register_events+0x3e6>
 8007648:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800764a:	2c00      	cmp	r4, #0
 800764c:	d1ed      	bne.n	800762a <register_events+0x372>
 800764e:	9c04      	ldr	r4, [sp, #16]
 8007650:	9d05      	ldr	r5, [sp, #20]
 8007652:	e01c      	b.n	800768e <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 8007654:	9a02      	ldr	r2, [sp, #8]
 8007656:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007658:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800765c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800765e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007660:	6054      	str	r4, [r2, #4]
		return;
 8007662:	e6e3      	b.n	800742c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8007664:	9d05      	ldr	r5, [sp, #20]
 8007666:	4622      	mov	r2, r4
 8007668:	9c04      	ldr	r4, [sp, #16]
 800766a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800766c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800766e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007672:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007674:	6054      	str	r4, [r2, #4]
			return;
 8007676:	e6d9      	b.n	800742c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007678:	2300      	movs	r3, #0
 800767a:	9404      	str	r4, [sp, #16]
 800767c:	9505      	str	r5, [sp, #20]
 800767e:	9d02      	ldr	r5, [sp, #8]
 8007680:	461c      	mov	r4, r3
 8007682:	e7d2      	b.n	800762a <register_events+0x372>
 8007684:	9c04      	ldr	r4, [sp, #16]
 8007686:	9d05      	ldr	r5, [sp, #20]
 8007688:	e001      	b.n	800768e <register_events+0x3d6>
 800768a:	9c04      	ldr	r4, [sp, #16]
 800768c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800768e:	9a02      	ldr	r2, [sp, #8]
 8007690:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007692:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007696:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007698:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800769a:	6054      	str	r4, [r2, #4]
}
 800769c:	e6c6      	b.n	800742c <register_events+0x174>
 800769e:	9c04      	ldr	r4, [sp, #16]
 80076a0:	9d05      	ldr	r5, [sp, #20]
 80076a2:	e7f4      	b.n	800768e <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 80076a4:	9801      	ldr	r0, [sp, #4]
 80076a6:	b007      	add	sp, #28
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076ac <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 80076ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	4605      	mov	r5, r0
 80076b4:	4690      	mov	r8, r2
 80076b6:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 80076b8:	4b4f      	ldr	r3, [pc, #316]	; (80077f8 <z_impl_k_poll+0x14c>)
 80076ba:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 80076bc:	2301      	movs	r3, #1
 80076be:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 80076c2:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 80076c6:	ea57 0302 	orrs.w	r3, r7, r2
 80076ca:	bf0c      	ite	eq
 80076cc:	2301      	moveq	r3, #1
 80076ce:	2300      	movne	r3, #0
 80076d0:	f106 0260 	add.w	r2, r6, #96	; 0x60
 80076d4:	f7ff fdf0 	bl	80072b8 <register_events>
 80076d8:	4604      	mov	r4, r0
 80076da:	f04f 0310 	mov.w	r3, #16
 80076de:	f3ef 8111 	mrs	r1, BASEPRI
 80076e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80076e6:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 80076ea:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 80076ee:	b1b3      	cbz	r3, 800771e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80076f6:	ea57 0308 	orrs.w	r3, r7, r8
 80076fa:	d043      	beq.n	8007784 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 80076fc:	f8cd 8000 	str.w	r8, [sp]
 8007700:	9701      	str	r7, [sp, #4]
 8007702:	4a3e      	ldr	r2, [pc, #248]	; (80077fc <z_impl_k_poll+0x150>)
 8007704:	483e      	ldr	r0, [pc, #248]	; (8007800 <z_impl_k_poll+0x154>)
 8007706:	f7ff f989 	bl	8006a1c <z_pend_curr>
 800770a:	f04f 0310 	mov.w	r3, #16
 800770e:	f3ef 8611 	mrs	r6, BASEPRI
 8007712:	f383 8812 	msr	BASEPRI_MAX, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	46b4      	mov	ip, r6
	while (num_events--) {
 800771c:	e04c      	b.n	80077b8 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800771e:	460e      	mov	r6, r1
	while (num_events--) {
 8007720:	e00c      	b.n	800773c <z_impl_k_poll+0x90>
	__asm__ volatile(
 8007722:	f386 8811 	msr	BASEPRI, r6
 8007726:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800772a:	f04f 0310 	mov.w	r3, #16
 800772e:	f3ef 8611 	mrs	r6, BASEPRI
 8007732:	f383 8812 	msr	BASEPRI_MAX, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	4604      	mov	r4, r0
 800773c:	1e60      	subs	r0, r4, #1
 800773e:	b1dc      	cbz	r4, 8007778 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 8007740:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007744:	009f      	lsls	r7, r3, #2
 8007746:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800774a:	2200      	movs	r2, #0
 800774c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800774e:	7b5a      	ldrb	r2, [r3, #13]
 8007750:	f002 021f 	and.w	r2, r2, #31
 8007754:	2a08      	cmp	r2, #8
 8007756:	d8e4      	bhi.n	8007722 <z_impl_k_poll+0x76>
 8007758:	2401      	movs	r4, #1
 800775a:	fa04 f202 	lsl.w	r2, r4, r2
 800775e:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8007762:	d0de      	beq.n	8007722 <z_impl_k_poll+0x76>
	return node->next != NULL;
 8007764:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8007766:	2a00      	cmp	r2, #0
 8007768:	d0db      	beq.n	8007722 <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800776a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800776c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800776e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 8007770:	2200      	movs	r2, #0
 8007772:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 8007774:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 8007776:	e7d4      	b.n	8007722 <z_impl_k_poll+0x76>
	__asm__ volatile(
 8007778:	f381 8811 	msr	BASEPRI, r1
 800777c:	f3bf 8f6f 	isb	sy
		return 0;
 8007780:	4620      	mov	r0, r4
 8007782:	e036      	b.n	80077f2 <z_impl_k_poll+0x146>
 8007784:	f381 8811 	msr	BASEPRI, r1
 8007788:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800778c:	f06f 000a 	mvn.w	r0, #10
 8007790:	e02f      	b.n	80077f2 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 8007792:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 8007794:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 8007796:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8007798:	2200      	movs	r2, #0
 800779a:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800779c:	605a      	str	r2, [r3, #4]
 800779e:	f38c 8811 	msr	BASEPRI, ip
 80077a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80077a6:	f04f 0310 	mov.w	r3, #16
 80077aa:	f3ef 8c11 	mrs	ip, BASEPRI
 80077ae:	f383 8812 	msr	BASEPRI_MAX, r3
 80077b2:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 80077b6:	4674      	mov	r4, lr
 80077b8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80077bc:	b1ac      	cbz	r4, 80077ea <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 80077be:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80077c2:	009c      	lsls	r4, r3, #2
 80077c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 80077c8:	2200      	movs	r2, #0
 80077ca:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 80077cc:	7b5a      	ldrb	r2, [r3, #13]
 80077ce:	f002 021f 	and.w	r2, r2, #31
 80077d2:	2a08      	cmp	r2, #8
 80077d4:	d8e3      	bhi.n	800779e <z_impl_k_poll+0xf2>
 80077d6:	2101      	movs	r1, #1
 80077d8:	fa01 f202 	lsl.w	r2, r1, r2
 80077dc:	f412 7f8b 	tst.w	r2, #278	; 0x116
 80077e0:	d0dd      	beq.n	800779e <z_impl_k_poll+0xf2>
	return node->next != NULL;
 80077e2:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d1d4      	bne.n	8007792 <z_impl_k_poll+0xe6>
 80077e8:	e7d9      	b.n	800779e <z_impl_k_poll+0xf2>
	__asm__ volatile(
 80077ea:	f386 8811 	msr	BASEPRI, r6
 80077ee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 80077f2:	b002      	add	sp, #8
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	20000b88 	.word	0x20000b88
 80077fc:	200000b8 	.word	0x200000b8
 8007800:	20000bd4 	.word	0x20000bd4

08007804 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4603      	mov	r3, r0
	__asm__ volatile(
 8007808:	f04f 0210 	mov.w	r2, #16
 800780c:	f3ef 8511 	mrs	r5, BASEPRI
 8007810:	f382 8812 	msr	BASEPRI_MAX, r2
 8007814:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8007818:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800781a:	2201      	movs	r2, #1
 800781c:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800781e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8007820:	4283      	cmp	r3, r0
 8007822:	d011      	beq.n	8007848 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 8007824:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8007826:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8007828:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800782a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8007830:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 8007832:	b148      	cbz	r0, 8007848 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8007834:	2101      	movs	r1, #1
 8007836:	f003 fd55 	bl	800b2e4 <signal_poll_event>
 800783a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800783c:	4629      	mov	r1, r5
 800783e:	4805      	ldr	r0, [pc, #20]	; (8007854 <z_impl_k_poll_signal_raise+0x50>)
 8007840:	f7fe ff7c 	bl	800673c <z_reschedule>
	return rc;
}
 8007844:	4620      	mov	r0, r4
 8007846:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8007848:	f385 8811 	msr	BASEPRI, r5
 800784c:	f3bf 8f6f 	isb	sy
		return 0;
 8007850:	2400      	movs	r4, #0
 8007852:	e7f7      	b.n	8007844 <z_impl_k_poll_signal_raise+0x40>
 8007854:	20000bd4 	.word	0x20000bd4

08007858 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 800785e:	f003 f950 	bl	800ab02 <k_is_in_isr>
 8007862:	b940      	cbnz	r0, 8007876 <z_thread_aligned_alloc+0x1e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <z_thread_aligned_alloc+0x24>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
 800786a:	b118      	cbz	r0, 8007874 <z_thread_aligned_alloc+0x1c>
		ret = z_heap_aligned_alloc(heap, align, size);
 800786c:	462a      	mov	r2, r5
 800786e:	4621      	mov	r1, r4
 8007870:	f003 fd6a 	bl	800b348 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8007874:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
 8007876:	2000      	movs	r0, #0
	return ret;
 8007878:	e7fc      	b.n	8007874 <z_thread_aligned_alloc+0x1c>
 800787a:	bf00      	nop
 800787c:	20000b88 	.word	0x20000b88

08007880 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8007880:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8007882:	4a03      	ldr	r2, [pc, #12]	; (8007890 <boot_banner+0x10>)
 8007884:	4903      	ldr	r1, [pc, #12]	; (8007894 <boot_banner+0x14>)
 8007886:	4804      	ldr	r0, [pc, #16]	; (8007898 <boot_banner+0x18>)
 8007888:	f001 fc15 	bl	80090b6 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800788c:	bd08      	pop	{r3, pc}
 800788e:	bf00      	nop
 8007890:	0800c1d4 	.word	0x0800c1d4
 8007894:	0800c4f4 	.word	0x0800c4f4
 8007898:	0800c504 	.word	0x0800c504

0800789c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800789c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800789e:	4c06      	ldr	r4, [pc, #24]	; (80078b8 <statics_init+0x1c>)
 80078a0:	e005      	b.n	80078ae <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80078a2:	68a2      	ldr	r2, [r4, #8]
 80078a4:	6861      	ldr	r1, [r4, #4]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f003 fd72 	bl	800b390 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 80078ac:	3418      	adds	r4, #24
 80078ae:	4b03      	ldr	r3, [pc, #12]	; (80078bc <statics_init+0x20>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	d3f6      	bcc.n	80078a2 <statics_init+0x6>
		}
	}
	return 0;
}
 80078b4:	2000      	movs	r0, #0
 80078b6:	bd10      	pop	{r4, pc}
 80078b8:	20000360 	.word	0x20000360
 80078bc:	20000360 	.word	0x20000360

080078c0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 80078c0:	b510      	push	{r4, lr}
 80078c2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <k_sys_work_q_init+0x28>)
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	2400      	movs	r4, #0
 80078ca:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 80078ce:	ab02      	add	r3, sp, #8
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078da:	4904      	ldr	r1, [pc, #16]	; (80078ec <k_sys_work_q_init+0x2c>)
 80078dc:	4804      	ldr	r0, [pc, #16]	; (80078f0 <k_sys_work_q_init+0x30>)
 80078de:	f7fe fe9b 	bl	8006618 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 80078e2:	4620      	mov	r0, r4
 80078e4:	b004      	add	sp, #16
 80078e6:	bd10      	pop	{r4, pc}
 80078e8:	0800c52c 	.word	0x0800c52c
 80078ec:	20002de0 	.word	0x20002de0
 80078f0:	200005e0 	.word	0x200005e0

080078f4 <malloc>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <malloc+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b84d 	b.w	8007998 <_malloc_r>
 80078fe:	bf00      	nop
 8007900:	200000c0 	.word	0x200000c0

08007904 <_free_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	2900      	cmp	r1, #0
 800790a:	d041      	beq.n	8007990 <_free_r+0x8c>
 800790c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007910:	1f0c      	subs	r4, r1, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfb8      	it	lt
 8007916:	18e4      	addlt	r4, r4, r3
 8007918:	f000 fbfc 	bl	8008114 <__malloc_lock>
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <_free_r+0x90>)
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	b933      	cbnz	r3, 8007930 <_free_r+0x2c>
 8007922:	6063      	str	r3, [r4, #4]
 8007924:	6014      	str	r4, [r2, #0]
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792c:	f000 bbf8 	b.w	8008120 <__malloc_unlock>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d908      	bls.n	8007946 <_free_r+0x42>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	1821      	adds	r1, r4, r0
 8007938:	428b      	cmp	r3, r1
 800793a:	bf01      	itttt	eq
 800793c:	6819      	ldreq	r1, [r3, #0]
 800793e:	685b      	ldreq	r3, [r3, #4]
 8007940:	1809      	addeq	r1, r1, r0
 8007942:	6021      	streq	r1, [r4, #0]
 8007944:	e7ed      	b.n	8007922 <_free_r+0x1e>
 8007946:	461a      	mov	r2, r3
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b10b      	cbz	r3, 8007950 <_free_r+0x4c>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d9fa      	bls.n	8007946 <_free_r+0x42>
 8007950:	6811      	ldr	r1, [r2, #0]
 8007952:	1850      	adds	r0, r2, r1
 8007954:	42a0      	cmp	r0, r4
 8007956:	d10b      	bne.n	8007970 <_free_r+0x6c>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	4401      	add	r1, r0
 800795c:	1850      	adds	r0, r2, r1
 800795e:	4283      	cmp	r3, r0
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	d1e0      	bne.n	8007926 <_free_r+0x22>
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	6053      	str	r3, [r2, #4]
 800796a:	4401      	add	r1, r0
 800796c:	6011      	str	r1, [r2, #0]
 800796e:	e7da      	b.n	8007926 <_free_r+0x22>
 8007970:	d902      	bls.n	8007978 <_free_r+0x74>
 8007972:	230c      	movs	r3, #12
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	e7d6      	b.n	8007926 <_free_r+0x22>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	1821      	adds	r1, r4, r0
 800797c:	428b      	cmp	r3, r1
 800797e:	bf04      	itt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	bf04      	itt	eq
 8007988:	1809      	addeq	r1, r1, r0
 800798a:	6021      	streq	r1, [r4, #0]
 800798c:	6054      	str	r4, [r2, #4]
 800798e:	e7ca      	b.n	8007926 <_free_r+0x22>
 8007990:	bd38      	pop	{r3, r4, r5, pc}
 8007992:	bf00      	nop
 8007994:	20000bd8 	.word	0x20000bd8

08007998 <_malloc_r>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	1ccd      	adds	r5, r1, #3
 800799c:	f025 0503 	bic.w	r5, r5, #3
 80079a0:	3508      	adds	r5, #8
 80079a2:	2d0c      	cmp	r5, #12
 80079a4:	bf38      	it	cc
 80079a6:	250c      	movcc	r5, #12
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	4606      	mov	r6, r0
 80079ac:	db01      	blt.n	80079b2 <_malloc_r+0x1a>
 80079ae:	42a9      	cmp	r1, r5
 80079b0:	d903      	bls.n	80079ba <_malloc_r+0x22>
 80079b2:	230c      	movs	r3, #12
 80079b4:	6033      	str	r3, [r6, #0]
 80079b6:	2000      	movs	r0, #0
 80079b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ba:	f000 fbab 	bl	8008114 <__malloc_lock>
 80079be:	4921      	ldr	r1, [pc, #132]	; (8007a44 <_malloc_r+0xac>)
 80079c0:	680a      	ldr	r2, [r1, #0]
 80079c2:	4614      	mov	r4, r2
 80079c4:	b99c      	cbnz	r4, 80079ee <_malloc_r+0x56>
 80079c6:	4f20      	ldr	r7, [pc, #128]	; (8007a48 <_malloc_r+0xb0>)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	b923      	cbnz	r3, 80079d6 <_malloc_r+0x3e>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 fb8c 	bl	80080ec <_sbrk_r>
 80079d4:	6038      	str	r0, [r7, #0]
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 fb87 	bl	80080ec <_sbrk_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d123      	bne.n	8007a2a <_malloc_r+0x92>
 80079e2:	230c      	movs	r3, #12
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 fb9a 	bl	8008120 <__malloc_unlock>
 80079ec:	e7e3      	b.n	80079b6 <_malloc_r+0x1e>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	1b5b      	subs	r3, r3, r5
 80079f2:	d417      	bmi.n	8007a24 <_malloc_r+0x8c>
 80079f4:	2b0b      	cmp	r3, #11
 80079f6:	d903      	bls.n	8007a00 <_malloc_r+0x68>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	441c      	add	r4, r3
 80079fc:	6025      	str	r5, [r4, #0]
 80079fe:	e004      	b.n	8007a0a <_malloc_r+0x72>
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	42a2      	cmp	r2, r4
 8007a04:	bf0c      	ite	eq
 8007a06:	600b      	streq	r3, [r1, #0]
 8007a08:	6053      	strne	r3, [r2, #4]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f000 fb88 	bl	8008120 <__malloc_unlock>
 8007a10:	f104 000b 	add.w	r0, r4, #11
 8007a14:	1d23      	adds	r3, r4, #4
 8007a16:	f020 0007 	bic.w	r0, r0, #7
 8007a1a:	1ac2      	subs	r2, r0, r3
 8007a1c:	d0cc      	beq.n	80079b8 <_malloc_r+0x20>
 8007a1e:	1a1b      	subs	r3, r3, r0
 8007a20:	50a3      	str	r3, [r4, r2]
 8007a22:	e7c9      	b.n	80079b8 <_malloc_r+0x20>
 8007a24:	4622      	mov	r2, r4
 8007a26:	6864      	ldr	r4, [r4, #4]
 8007a28:	e7cc      	b.n	80079c4 <_malloc_r+0x2c>
 8007a2a:	1cc4      	adds	r4, r0, #3
 8007a2c:	f024 0403 	bic.w	r4, r4, #3
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d0e3      	beq.n	80079fc <_malloc_r+0x64>
 8007a34:	1a21      	subs	r1, r4, r0
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 fb58 	bl	80080ec <_sbrk_r>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d1dd      	bne.n	80079fc <_malloc_r+0x64>
 8007a40:	e7cf      	b.n	80079e2 <_malloc_r+0x4a>
 8007a42:	bf00      	nop
 8007a44:	20000bd8 	.word	0x20000bd8
 8007a48:	20000bdc 	.word	0x20000bdc

08007a4c <_printf_float>:
 8007a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	b091      	sub	sp, #68	; 0x44
 8007a52:	460c      	mov	r4, r1
 8007a54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007a58:	4616      	mov	r6, r2
 8007a5a:	461f      	mov	r7, r3
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	f000 fb55 	bl	800810c <_localeconv_r>
 8007a62:	6803      	ldr	r3, [r0, #0]
 8007a64:	9309      	str	r3, [sp, #36]	; 0x24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7f9 f9f5 	bl	8000e56 <strlen>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a70:	f8d8 3000 	ldr.w	r3, [r8]
 8007a74:	900a      	str	r0, [sp, #40]	; 0x28
 8007a76:	3307      	adds	r3, #7
 8007a78:	f023 0307 	bic.w	r3, r3, #7
 8007a7c:	f103 0208 	add.w	r2, r3, #8
 8007a80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a84:	f8d4 b000 	ldr.w	fp, [r4]
 8007a88:	f8c8 2000 	str.w	r2, [r8]
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007a98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007aa0:	4b9c      	ldr	r3, [pc, #624]	; (8007d14 <_printf_float+0x2c8>)
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	f7f9 f83a 	bl	8000b20 <__aeabi_dcmpun>
 8007aac:	bb70      	cbnz	r0, 8007b0c <_printf_float+0xc0>
 8007aae:	4b99      	ldr	r3, [pc, #612]	; (8007d14 <_printf_float+0x2c8>)
 8007ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	f7f9 f814 	bl	8000ae4 <__aeabi_dcmple>
 8007abc:	bb30      	cbnz	r0, 8007b0c <_printf_float+0xc0>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	f7f9 f803 	bl	8000ad0 <__aeabi_dcmplt>
 8007aca:	b110      	cbz	r0, 8007ad2 <_printf_float+0x86>
 8007acc:	232d      	movs	r3, #45	; 0x2d
 8007ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad2:	4b91      	ldr	r3, [pc, #580]	; (8007d18 <_printf_float+0x2cc>)
 8007ad4:	4891      	ldr	r0, [pc, #580]	; (8007d1c <_printf_float+0x2d0>)
 8007ad6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007ada:	bf94      	ite	ls
 8007adc:	4698      	movls	r8, r3
 8007ade:	4680      	movhi	r8, r0
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	f02b 0304 	bic.w	r3, fp, #4
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	f04f 0a00 	mov.w	sl, #0
 8007aee:	9700      	str	r7, [sp, #0]
 8007af0:	4633      	mov	r3, r6
 8007af2:	aa0f      	add	r2, sp, #60	; 0x3c
 8007af4:	4621      	mov	r1, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	f003 fd6c 	bl	800b5d4 <_printf_common>
 8007afc:	3001      	adds	r0, #1
 8007afe:	f040 808f 	bne.w	8007c20 <_printf_float+0x1d4>
 8007b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b06:	b011      	add	sp, #68	; 0x44
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	4653      	mov	r3, sl
 8007b10:	4640      	mov	r0, r8
 8007b12:	4651      	mov	r1, sl
 8007b14:	f7f9 f804 	bl	8000b20 <__aeabi_dcmpun>
 8007b18:	b140      	cbz	r0, 8007b2c <_printf_float+0xe0>
 8007b1a:	f1ba 0f00 	cmp.w	sl, #0
 8007b1e:	bfbc      	itt	lt
 8007b20:	232d      	movlt	r3, #45	; 0x2d
 8007b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b26:	487e      	ldr	r0, [pc, #504]	; (8007d20 <_printf_float+0x2d4>)
 8007b28:	4b7e      	ldr	r3, [pc, #504]	; (8007d24 <_printf_float+0x2d8>)
 8007b2a:	e7d4      	b.n	8007ad6 <_printf_float+0x8a>
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007b34:	d142      	bne.n	8007bbc <_printf_float+0x170>
 8007b36:	2306      	movs	r3, #6
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	9206      	str	r2, [sp, #24]
 8007b3e:	aa0e      	add	r2, sp, #56	; 0x38
 8007b40:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007b44:	aa0d      	add	r2, sp, #52	; 0x34
 8007b46:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007b4a:	9203      	str	r2, [sp, #12]
 8007b4c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007b50:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	4642      	mov	r2, r8
 8007b5c:	4653      	mov	r3, sl
 8007b5e:	4628      	mov	r0, r5
 8007b60:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b62:	f003 fc99 	bl	800b498 <__cvt>
 8007b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b68:	2947      	cmp	r1, #71	; 0x47
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b6e:	d108      	bne.n	8007b82 <_printf_float+0x136>
 8007b70:	1cc8      	adds	r0, r1, #3
 8007b72:	db02      	blt.n	8007b7a <_printf_float+0x12e>
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	4299      	cmp	r1, r3
 8007b78:	dd40      	ble.n	8007bfc <_printf_float+0x1b0>
 8007b7a:	f1a9 0902 	sub.w	r9, r9, #2
 8007b7e:	fa5f f989 	uxtb.w	r9, r9
 8007b82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b86:	d81f      	bhi.n	8007bc8 <_printf_float+0x17c>
 8007b88:	3901      	subs	r1, #1
 8007b8a:	464a      	mov	r2, r9
 8007b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b90:	910d      	str	r1, [sp, #52]	; 0x34
 8007b92:	f003 fce1 	bl	800b558 <__exponent>
 8007b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b98:	1813      	adds	r3, r2, r0
 8007b9a:	2a01      	cmp	r2, #1
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	dc02      	bgt.n	8007ba8 <_printf_float+0x15c>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	07d2      	lsls	r2, r2, #31
 8007ba6:	d501      	bpl.n	8007bac <_printf_float+0x160>
 8007ba8:	3301      	adds	r3, #1
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d09c      	beq.n	8007aee <_printf_float+0xa2>
 8007bb4:	232d      	movs	r3, #45	; 0x2d
 8007bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bba:	e798      	b.n	8007aee <_printf_float+0xa2>
 8007bbc:	2947      	cmp	r1, #71	; 0x47
 8007bbe:	d1bc      	bne.n	8007b3a <_printf_float+0xee>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ba      	bne.n	8007b3a <_printf_float+0xee>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e7b7      	b.n	8007b38 <_printf_float+0xec>
 8007bc8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007bcc:	d118      	bne.n	8007c00 <_printf_float+0x1b4>
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	dd0b      	ble.n	8007bec <_printf_float+0x1a0>
 8007bd4:	6121      	str	r1, [r4, #16]
 8007bd6:	b913      	cbnz	r3, 8007bde <_printf_float+0x192>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	07d0      	lsls	r0, r2, #31
 8007bdc:	d502      	bpl.n	8007be4 <_printf_float+0x198>
 8007bde:	3301      	adds	r3, #1
 8007be0:	440b      	add	r3, r1
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	65a1      	str	r1, [r4, #88]	; 0x58
 8007be6:	f04f 0a00 	mov.w	sl, #0
 8007bea:	e7df      	b.n	8007bac <_printf_float+0x160>
 8007bec:	b913      	cbnz	r3, 8007bf4 <_printf_float+0x1a8>
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	07d2      	lsls	r2, r2, #31
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_float+0x1ac>
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	e7f4      	b.n	8007be2 <_printf_float+0x196>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7f2      	b.n	8007be2 <_printf_float+0x196>
 8007bfc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c02:	4299      	cmp	r1, r3
 8007c04:	db05      	blt.n	8007c12 <_printf_float+0x1c6>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	6121      	str	r1, [r4, #16]
 8007c0a:	07d8      	lsls	r0, r3, #31
 8007c0c:	d5ea      	bpl.n	8007be4 <_printf_float+0x198>
 8007c0e:	1c4b      	adds	r3, r1, #1
 8007c10:	e7e7      	b.n	8007be2 <_printf_float+0x196>
 8007c12:	2900      	cmp	r1, #0
 8007c14:	bfd4      	ite	le
 8007c16:	f1c1 0202 	rsble	r2, r1, #2
 8007c1a:	2201      	movgt	r2, #1
 8007c1c:	4413      	add	r3, r2
 8007c1e:	e7e0      	b.n	8007be2 <_printf_float+0x196>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	055a      	lsls	r2, r3, #21
 8007c24:	d407      	bmi.n	8007c36 <_printf_float+0x1ea>
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	4642      	mov	r2, r8
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	d12b      	bne.n	8007c8c <_printf_float+0x240>
 8007c34:	e765      	b.n	8007b02 <_printf_float+0xb6>
 8007c36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c3a:	f240 80dc 	bls.w	8007df6 <_printf_float+0x3aa>
 8007c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c42:	2200      	movs	r2, #0
 8007c44:	2300      	movs	r3, #0
 8007c46:	f7f8 ff39 	bl	8000abc <__aeabi_dcmpeq>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d033      	beq.n	8007cb6 <_printf_float+0x26a>
 8007c4e:	4a36      	ldr	r2, [pc, #216]	; (8007d28 <_printf_float+0x2dc>)
 8007c50:	2301      	movs	r3, #1
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f af52 	beq.w	8007b02 <_printf_float+0xb6>
 8007c5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c62:	429a      	cmp	r2, r3
 8007c64:	db02      	blt.n	8007c6c <_printf_float+0x220>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	07d8      	lsls	r0, r3, #31
 8007c6a:	d50f      	bpl.n	8007c8c <_printf_float+0x240>
 8007c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af43 	beq.w	8007b02 <_printf_float+0xb6>
 8007c7c:	f04f 0800 	mov.w	r8, #0
 8007c80:	f104 091a 	add.w	r9, r4, #26
 8007c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c86:	3b01      	subs	r3, #1
 8007c88:	4543      	cmp	r3, r8
 8007c8a:	dc09      	bgt.n	8007ca0 <_printf_float+0x254>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	079b      	lsls	r3, r3, #30
 8007c90:	f100 8101 	bmi.w	8007e96 <_printf_float+0x44a>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e732      	b.n	8007b06 <_printf_float+0xba>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f af29 	beq.w	8007b02 <_printf_float+0xb6>
 8007cb0:	f108 0801 	add.w	r8, r8, #1
 8007cb4:	e7e6      	b.n	8007c84 <_printf_float+0x238>
 8007cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc37      	bgt.n	8007d2c <_printf_float+0x2e0>
 8007cbc:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <_printf_float+0x2dc>)
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af1b 	beq.w	8007b02 <_printf_float+0xb6>
 8007ccc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	d102      	bne.n	8007cda <_printf_float+0x28e>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07d9      	lsls	r1, r3, #31
 8007cd8:	d5d8      	bpl.n	8007c8c <_printf_float+0x240>
 8007cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	47b8      	blx	r7
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	f43f af0c 	beq.w	8007b02 <_printf_float+0xb6>
 8007cea:	f04f 0900 	mov.w	r9, #0
 8007cee:	f104 0a1a 	add.w	sl, r4, #26
 8007cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf4:	425b      	negs	r3, r3
 8007cf6:	454b      	cmp	r3, r9
 8007cf8:	dc01      	bgt.n	8007cfe <_printf_float+0x2b2>
 8007cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cfc:	e794      	b.n	8007c28 <_printf_float+0x1dc>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4652      	mov	r2, sl
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f43f aefa 	beq.w	8007b02 <_printf_float+0xb6>
 8007d0e:	f109 0901 	add.w	r9, r9, #1
 8007d12:	e7ee      	b.n	8007cf2 <_printf_float+0x2a6>
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	0800c6a9 	.word	0x0800c6a9
 8007d1c:	0800c6ad 	.word	0x0800c6ad
 8007d20:	0800c6b5 	.word	0x0800c6b5
 8007d24:	0800c6b1 	.word	0x0800c6b1
 8007d28:	0800c6b9 	.word	0x0800c6b9
 8007d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bfa8      	it	ge
 8007d34:	461a      	movge	r2, r3
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	4691      	mov	r9, r2
 8007d3a:	dc37      	bgt.n	8007dac <_printf_float+0x360>
 8007d3c:	f04f 0b00 	mov.w	fp, #0
 8007d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d44:	f104 021a 	add.w	r2, r4, #26
 8007d48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007d4c:	ebaa 0309 	sub.w	r3, sl, r9
 8007d50:	455b      	cmp	r3, fp
 8007d52:	dc33      	bgt.n	8007dbc <_printf_float+0x370>
 8007d54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	db3b      	blt.n	8007dd4 <_printf_float+0x388>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07da      	lsls	r2, r3, #31
 8007d60:	d438      	bmi.n	8007dd4 <_printf_float+0x388>
 8007d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d66:	eba3 020a 	sub.w	r2, r3, sl
 8007d6a:	eba3 0901 	sub.w	r9, r3, r1
 8007d6e:	4591      	cmp	r9, r2
 8007d70:	bfa8      	it	ge
 8007d72:	4691      	movge	r9, r2
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	dc34      	bgt.n	8007de4 <_printf_float+0x398>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d82:	f104 0a1a 	add.w	sl, r4, #26
 8007d86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	eba3 0309 	sub.w	r3, r3, r9
 8007d90:	4543      	cmp	r3, r8
 8007d92:	f77f af7b 	ble.w	8007c8c <_printf_float+0x240>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4652      	mov	r2, sl
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f aeae 	beq.w	8007b02 <_printf_float+0xb6>
 8007da6:	f108 0801 	add.w	r8, r8, #1
 8007daa:	e7ec      	b.n	8007d86 <_printf_float+0x33a>
 8007dac:	4613      	mov	r3, r2
 8007dae:	4631      	mov	r1, r6
 8007db0:	4642      	mov	r2, r8
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1c0      	bne.n	8007d3c <_printf_float+0x2f0>
 8007dba:	e6a2      	b.n	8007b02 <_printf_float+0xb6>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f ae9b 	beq.w	8007b02 <_printf_float+0xb6>
 8007dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dce:	f10b 0b01 	add.w	fp, fp, #1
 8007dd2:	e7b9      	b.n	8007d48 <_printf_float+0x2fc>
 8007dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	d1bf      	bne.n	8007d62 <_printf_float+0x316>
 8007de2:	e68e      	b.n	8007b02 <_printf_float+0xb6>
 8007de4:	464b      	mov	r3, r9
 8007de6:	eb08 020a 	add.w	r2, r8, sl
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	d1c2      	bne.n	8007d7a <_printf_float+0x32e>
 8007df4:	e685      	b.n	8007b02 <_printf_float+0xb6>
 8007df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df8:	2a01      	cmp	r2, #1
 8007dfa:	dc01      	bgt.n	8007e00 <_printf_float+0x3b4>
 8007dfc:	07db      	lsls	r3, r3, #31
 8007dfe:	d537      	bpl.n	8007e70 <_printf_float+0x424>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4642      	mov	r2, r8
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	f43f ae79 	beq.w	8007b02 <_printf_float+0xb6>
 8007e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e14:	4631      	mov	r1, r6
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f ae71 	beq.w	8007b02 <_printf_float+0xb6>
 8007e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e24:	2200      	movs	r2, #0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f7f8 fe48 	bl	8000abc <__aeabi_dcmpeq>
 8007e2c:	b9d8      	cbnz	r0, 8007e66 <_printf_float+0x41a>
 8007e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e30:	f108 0201 	add.w	r2, r8, #1
 8007e34:	3b01      	subs	r3, #1
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d10e      	bne.n	8007e5e <_printf_float+0x412>
 8007e40:	e65f      	b.n	8007b02 <_printf_float+0xb6>
 8007e42:	2301      	movs	r3, #1
 8007e44:	464a      	mov	r2, r9
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b8      	blx	r7
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f43f ae58 	beq.w	8007b02 <_printf_float+0xb6>
 8007e52:	f108 0801 	add.w	r8, r8, #1
 8007e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	4543      	cmp	r3, r8
 8007e5c:	dcf1      	bgt.n	8007e42 <_printf_float+0x3f6>
 8007e5e:	4653      	mov	r3, sl
 8007e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e64:	e6e1      	b.n	8007c2a <_printf_float+0x1de>
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	f104 091a 	add.w	r9, r4, #26
 8007e6e:	e7f2      	b.n	8007e56 <_printf_float+0x40a>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4642      	mov	r2, r8
 8007e74:	e7df      	b.n	8007e36 <_printf_float+0x3ea>
 8007e76:	2301      	movs	r3, #1
 8007e78:	464a      	mov	r2, r9
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	f43f ae3e 	beq.w	8007b02 <_printf_float+0xb6>
 8007e86:	f108 0801 	add.w	r8, r8, #1
 8007e8a:	68e3      	ldr	r3, [r4, #12]
 8007e8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e8e:	1a5b      	subs	r3, r3, r1
 8007e90:	4543      	cmp	r3, r8
 8007e92:	dcf0      	bgt.n	8007e76 <_printf_float+0x42a>
 8007e94:	e6fe      	b.n	8007c94 <_printf_float+0x248>
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	f104 0919 	add.w	r9, r4, #25
 8007e9e:	e7f4      	b.n	8007e8a <_printf_float+0x43e>

08007ea0 <_printf_i>:
 8007ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	7e0f      	ldrb	r7, [r1, #24]
 8007ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea8:	2f78      	cmp	r7, #120	; 0x78
 8007eaa:	4691      	mov	r9, r2
 8007eac:	4680      	mov	r8, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eb6:	d807      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eb8:	2f62      	cmp	r7, #98	; 0x62
 8007eba:	d80a      	bhi.n	8007ed2 <_printf_i+0x32>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	f000 80d8 	beq.w	8008072 <_printf_i+0x1d2>
 8007ec2:	2f58      	cmp	r7, #88	; 0x58
 8007ec4:	f000 80a3 	beq.w	800800e <_printf_i+0x16e>
 8007ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed0:	e03a      	b.n	8007f48 <_printf_i+0xa8>
 8007ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ed6:	2b15      	cmp	r3, #21
 8007ed8:	d8f6      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eda:	a101      	add	r1, pc, #4	; (adr r1, 8007ee0 <_printf_i+0x40>)
 8007edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007ec9 	.word	0x08007ec9
 8007eec:	08007ec9 	.word	0x08007ec9
 8007ef0:	08007ec9 	.word	0x08007ec9
 8007ef4:	08007ec9 	.word	0x08007ec9
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007ec9 	.word	0x08007ec9
 8007f00:	08007ec9 	.word	0x08007ec9
 8007f04:	08007ec9 	.word	0x08007ec9
 8007f08:	08007ec9 	.word	0x08007ec9
 8007f0c:	08008059 	.word	0x08008059
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	0800803b 	.word	0x0800803b
 8007f18:	08007ec9 	.word	0x08007ec9
 8007f1c:	08007ec9 	.word	0x08007ec9
 8007f20:	0800807b 	.word	0x0800807b
 8007f24:	08007ec9 	.word	0x08007ec9
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007ec9 	.word	0x08007ec9
 8007f30:	08007ec9 	.word	0x08007ec9
 8007f34:	08008043 	.word	0x08008043
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	1d1a      	adds	r2, r3, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0a3      	b.n	8008094 <_printf_i+0x1f4>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	6829      	ldr	r1, [r5, #0]
 8007f50:	0606      	lsls	r6, r0, #24
 8007f52:	f101 0304 	add.w	r3, r1, #4
 8007f56:	d50a      	bpl.n	8007f6e <_printf_i+0xce>
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	da03      	bge.n	8007f68 <_printf_i+0xc8>
 8007f60:	232d      	movs	r3, #45	; 0x2d
 8007f62:	4276      	negs	r6, r6
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f68:	485e      	ldr	r0, [pc, #376]	; (80080e4 <_printf_i+0x244>)
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	e019      	b.n	8007fa2 <_printf_i+0x102>
 8007f6e:	680e      	ldr	r6, [r1, #0]
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f76:	bf18      	it	ne
 8007f78:	b236      	sxthne	r6, r6
 8007f7a:	e7ef      	b.n	8007f5c <_printf_i+0xbc>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	1d19      	adds	r1, r3, #4
 8007f82:	6029      	str	r1, [r5, #0]
 8007f84:	0601      	lsls	r1, r0, #24
 8007f86:	d501      	bpl.n	8007f8c <_printf_i+0xec>
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <_printf_i+0xf2>
 8007f8c:	0646      	lsls	r6, r0, #25
 8007f8e:	d5fb      	bpl.n	8007f88 <_printf_i+0xe8>
 8007f90:	881e      	ldrh	r6, [r3, #0]
 8007f92:	4854      	ldr	r0, [pc, #336]	; (80080e4 <_printf_i+0x244>)
 8007f94:	2f6f      	cmp	r7, #111	; 0x6f
 8007f96:	bf0c      	ite	eq
 8007f98:	2308      	moveq	r3, #8
 8007f9a:	230a      	movne	r3, #10
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa2:	6865      	ldr	r5, [r4, #4]
 8007fa4:	60a5      	str	r5, [r4, #8]
 8007fa6:	2d00      	cmp	r5, #0
 8007fa8:	bfa2      	ittt	ge
 8007faa:	6821      	ldrge	r1, [r4, #0]
 8007fac:	f021 0104 	bicge.w	r1, r1, #4
 8007fb0:	6021      	strge	r1, [r4, #0]
 8007fb2:	b90e      	cbnz	r6, 8007fb8 <_printf_i+0x118>
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	d04d      	beq.n	8008054 <_printf_i+0x1b4>
 8007fb8:	4615      	mov	r5, r2
 8007fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007fc2:	5dc7      	ldrb	r7, [r0, r7]
 8007fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fc8:	4637      	mov	r7, r6
 8007fca:	42bb      	cmp	r3, r7
 8007fcc:	460e      	mov	r6, r1
 8007fce:	d9f4      	bls.n	8007fba <_printf_i+0x11a>
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d10b      	bne.n	8007fec <_printf_i+0x14c>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	07de      	lsls	r6, r3, #31
 8007fd8:	d508      	bpl.n	8007fec <_printf_i+0x14c>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	bfde      	ittt	le
 8007fe2:	2330      	movle	r3, #48	; 0x30
 8007fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fec:	1b52      	subs	r2, r2, r5
 8007fee:	6122      	str	r2, [r4, #16]
 8007ff0:	f8cd a000 	str.w	sl, [sp]
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	aa03      	add	r2, sp, #12
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	f003 faea 	bl	800b5d4 <_printf_common>
 8008000:	3001      	adds	r0, #1
 8008002:	d14c      	bne.n	800809e <_printf_i+0x1fe>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008008:	b004      	add	sp, #16
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	4835      	ldr	r0, [pc, #212]	; (80080e4 <_printf_i+0x244>)
 8008010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f851 6b04 	ldr.w	r6, [r1], #4
 800801c:	6029      	str	r1, [r5, #0]
 800801e:	061d      	lsls	r5, r3, #24
 8008020:	d514      	bpl.n	800804c <_printf_i+0x1ac>
 8008022:	07df      	lsls	r7, r3, #31
 8008024:	bf44      	itt	mi
 8008026:	f043 0320 	orrmi.w	r3, r3, #32
 800802a:	6023      	strmi	r3, [r4, #0]
 800802c:	b91e      	cbnz	r6, 8008036 <_printf_i+0x196>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	f023 0320 	bic.w	r3, r3, #32
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	2310      	movs	r3, #16
 8008038:	e7b0      	b.n	8007f9c <_printf_i+0xfc>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	f043 0320 	orr.w	r3, r3, #32
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	2378      	movs	r3, #120	; 0x78
 8008044:	4828      	ldr	r0, [pc, #160]	; (80080e8 <_printf_i+0x248>)
 8008046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804a:	e7e3      	b.n	8008014 <_printf_i+0x174>
 800804c:	0659      	lsls	r1, r3, #25
 800804e:	bf48      	it	mi
 8008050:	b2b6      	uxthmi	r6, r6
 8008052:	e7e6      	b.n	8008022 <_printf_i+0x182>
 8008054:	4615      	mov	r5, r2
 8008056:	e7bb      	b.n	8007fd0 <_printf_i+0x130>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	6826      	ldr	r6, [r4, #0]
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	1d18      	adds	r0, r3, #4
 8008060:	6028      	str	r0, [r5, #0]
 8008062:	0635      	lsls	r5, r6, #24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	d501      	bpl.n	800806c <_printf_i+0x1cc>
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0x1d2>
 800806c:	0670      	lsls	r0, r6, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0x1c8>
 8008070:	8019      	strh	r1, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	4615      	mov	r5, r2
 8008078:	e7ba      	b.n	8007ff0 <_printf_i+0x150>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	1d1a      	adds	r2, r3, #4
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	681d      	ldr	r5, [r3, #0]
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	2100      	movs	r1, #0
 8008086:	4628      	mov	r0, r5
 8008088:	f7f8 f88a 	bl	80001a0 <memchr>
 800808c:	b108      	cbz	r0, 8008092 <_printf_i+0x1f2>
 800808e:	1b40      	subs	r0, r0, r5
 8008090:	6060      	str	r0, [r4, #4]
 8008092:	6863      	ldr	r3, [r4, #4]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	2300      	movs	r3, #0
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	e7a8      	b.n	8007ff0 <_printf_i+0x150>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0ab      	beq.n	8008004 <_printf_i+0x164>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d413      	bmi.n	80080da <_printf_i+0x23a>
 80080b2:	68e0      	ldr	r0, [r4, #12]
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	4298      	cmp	r0, r3
 80080b8:	bfb8      	it	lt
 80080ba:	4618      	movlt	r0, r3
 80080bc:	e7a4      	b.n	8008008 <_printf_i+0x168>
 80080be:	2301      	movs	r3, #1
 80080c0:	4632      	mov	r2, r6
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d09b      	beq.n	8008004 <_printf_i+0x164>
 80080cc:	3501      	adds	r5, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dcf2      	bgt.n	80080be <_printf_i+0x21e>
 80080d8:	e7eb      	b.n	80080b2 <_printf_i+0x212>
 80080da:	2500      	movs	r5, #0
 80080dc:	f104 0619 	add.w	r6, r4, #25
 80080e0:	e7f5      	b.n	80080ce <_printf_i+0x22e>
 80080e2:	bf00      	nop
 80080e4:	0800c6bb 	.word	0x0800c6bb
 80080e8:	0800c6cc 	.word	0x0800c6cc

080080ec <_sbrk_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d06      	ldr	r5, [pc, #24]	; (8008108 <_sbrk_r+0x1c>)
 80080f0:	2300      	movs	r3, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	4608      	mov	r0, r1
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	f7fa ff6c 	bl	8002fd4 <_sbrk>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_sbrk_r+0x1a>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_sbrk_r+0x1a>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	20000be0 	.word	0x20000be0

0800810c <_localeconv_r>:
 800810c:	4800      	ldr	r0, [pc, #0]	; (8008110 <_localeconv_r+0x4>)
 800810e:	4770      	bx	lr
 8008110:	20000214 	.word	0x20000214

08008114 <__malloc_lock>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__malloc_lock+0x8>)
 8008116:	f001 bca1 	b.w	8009a5c <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	20000360 	.word	0x20000360

08008120 <__malloc_unlock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_unlock+0x8>)
 8008122:	f001 bca3 	b.w	8009a6c <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	20000360 	.word	0x20000360

0800812c <_Balloc>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	b976      	cbnz	r6, 8008154 <_Balloc+0x28>
 8008136:	2010      	movs	r0, #16
 8008138:	f7ff fbdc 	bl	80078f4 <malloc>
 800813c:	4602      	mov	r2, r0
 800813e:	6260      	str	r0, [r4, #36]	; 0x24
 8008140:	b920      	cbnz	r0, 800814c <_Balloc+0x20>
 8008142:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <_Balloc+0x78>)
 8008144:	4818      	ldr	r0, [pc, #96]	; (80081a8 <_Balloc+0x7c>)
 8008146:	2166      	movs	r1, #102	; 0x66
 8008148:	f000 fb04 	bl	8008754 <__assert_func>
 800814c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008150:	6006      	str	r6, [r0, #0]
 8008152:	60c6      	str	r6, [r0, #12]
 8008154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008156:	68f3      	ldr	r3, [r6, #12]
 8008158:	b183      	cbz	r3, 800817c <_Balloc+0x50>
 800815a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008162:	b9b8      	cbnz	r0, 8008194 <_Balloc+0x68>
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f605 	lsl.w	r6, r1, r5
 800816a:	1d72      	adds	r2, r6, #5
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	4620      	mov	r0, r4
 8008170:	f003 fb98 	bl	800b8a4 <_calloc_r>
 8008174:	b160      	cbz	r0, 8008190 <_Balloc+0x64>
 8008176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800817a:	e00e      	b.n	800819a <_Balloc+0x6e>
 800817c:	2221      	movs	r2, #33	; 0x21
 800817e:	2104      	movs	r1, #4
 8008180:	4620      	mov	r0, r4
 8008182:	f003 fb8f 	bl	800b8a4 <_calloc_r>
 8008186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008188:	60f0      	str	r0, [r6, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e4      	bne.n	800815a <_Balloc+0x2e>
 8008190:	2000      	movs	r0, #0
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	6802      	ldr	r2, [r0, #0]
 8008196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800819a:	2300      	movs	r3, #0
 800819c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a0:	e7f7      	b.n	8008192 <_Balloc+0x66>
 80081a2:	bf00      	nop
 80081a4:	0800c6ea 	.word	0x0800c6ea
 80081a8:	0800c76c 	.word	0x0800c76c

080081ac <_Bfree>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b976      	cbnz	r6, 80081d4 <_Bfree+0x28>
 80081b6:	2010      	movs	r0, #16
 80081b8:	f7ff fb9c 	bl	80078f4 <malloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	6268      	str	r0, [r5, #36]	; 0x24
 80081c0:	b920      	cbnz	r0, 80081cc <_Bfree+0x20>
 80081c2:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <_Bfree+0x3c>)
 80081c4:	4809      	ldr	r0, [pc, #36]	; (80081ec <_Bfree+0x40>)
 80081c6:	218a      	movs	r1, #138	; 0x8a
 80081c8:	f000 fac4 	bl	8008754 <__assert_func>
 80081cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d0:	6006      	str	r6, [r0, #0]
 80081d2:	60c6      	str	r6, [r0, #12]
 80081d4:	b13c      	cbz	r4, 80081e6 <_Bfree+0x3a>
 80081d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d8:	6862      	ldr	r2, [r4, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e0:	6021      	str	r1, [r4, #0]
 80081e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	0800c6ea 	.word	0x0800c6ea
 80081ec:	0800c76c 	.word	0x0800c76c

080081f0 <__multadd>:
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f4:	690d      	ldr	r5, [r1, #16]
 80081f6:	4607      	mov	r7, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461e      	mov	r6, r3
 80081fc:	f101 0c14 	add.w	ip, r1, #20
 8008200:	2000      	movs	r0, #0
 8008202:	f8dc 3000 	ldr.w	r3, [ip]
 8008206:	b299      	uxth	r1, r3
 8008208:	fb02 6101 	mla	r1, r2, r1, r6
 800820c:	0c1e      	lsrs	r6, r3, #16
 800820e:	0c0b      	lsrs	r3, r1, #16
 8008210:	fb02 3306 	mla	r3, r2, r6, r3
 8008214:	b289      	uxth	r1, r1
 8008216:	3001      	adds	r0, #1
 8008218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800821c:	4285      	cmp	r5, r0
 800821e:	f84c 1b04 	str.w	r1, [ip], #4
 8008222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008226:	dcec      	bgt.n	8008202 <__multadd+0x12>
 8008228:	b30e      	cbz	r6, 800826e <__multadd+0x7e>
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc19      	bgt.n	8008264 <__multadd+0x74>
 8008230:	6861      	ldr	r1, [r4, #4]
 8008232:	4638      	mov	r0, r7
 8008234:	3101      	adds	r1, #1
 8008236:	f7ff ff79 	bl	800812c <_Balloc>
 800823a:	4680      	mov	r8, r0
 800823c:	b928      	cbnz	r0, 800824a <__multadd+0x5a>
 800823e:	4602      	mov	r2, r0
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <__multadd+0x84>)
 8008242:	480d      	ldr	r0, [pc, #52]	; (8008278 <__multadd+0x88>)
 8008244:	21b5      	movs	r1, #181	; 0xb5
 8008246:	f000 fa85 	bl	8008754 <__assert_func>
 800824a:	6922      	ldr	r2, [r4, #16]
 800824c:	3202      	adds	r2, #2
 800824e:	f104 010c 	add.w	r1, r4, #12
 8008252:	0092      	lsls	r2, r2, #2
 8008254:	300c      	adds	r0, #12
 8008256:	f003 f909 	bl	800b46c <memcpy>
 800825a:	4621      	mov	r1, r4
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ffa5 	bl	80081ac <_Bfree>
 8008262:	4644      	mov	r4, r8
 8008264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008268:	3501      	adds	r5, #1
 800826a:	615e      	str	r6, [r3, #20]
 800826c:	6125      	str	r5, [r4, #16]
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	0800c75b 	.word	0x0800c75b
 8008278:	0800c76c 	.word	0x0800c76c

0800827c <__i2b>:
 800827c:	b510      	push	{r4, lr}
 800827e:	460c      	mov	r4, r1
 8008280:	2101      	movs	r1, #1
 8008282:	f7ff ff53 	bl	800812c <_Balloc>
 8008286:	4602      	mov	r2, r0
 8008288:	b928      	cbnz	r0, 8008296 <__i2b+0x1a>
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <__i2b+0x24>)
 800828c:	4805      	ldr	r0, [pc, #20]	; (80082a4 <__i2b+0x28>)
 800828e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008292:	f000 fa5f 	bl	8008754 <__assert_func>
 8008296:	2301      	movs	r3, #1
 8008298:	6144      	str	r4, [r0, #20]
 800829a:	6103      	str	r3, [r0, #16]
 800829c:	bd10      	pop	{r4, pc}
 800829e:	bf00      	nop
 80082a0:	0800c75b 	.word	0x0800c75b
 80082a4:	0800c76c 	.word	0x0800c76c

080082a8 <__multiply>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	4691      	mov	r9, r2
 80082ae:	690a      	ldr	r2, [r1, #16]
 80082b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	bfb8      	it	lt
 80082b8:	460b      	movlt	r3, r1
 80082ba:	460c      	mov	r4, r1
 80082bc:	bfbc      	itt	lt
 80082be:	464c      	movlt	r4, r9
 80082c0:	4699      	movlt	r9, r3
 80082c2:	6927      	ldr	r7, [r4, #16]
 80082c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082c8:	68a3      	ldr	r3, [r4, #8]
 80082ca:	6861      	ldr	r1, [r4, #4]
 80082cc:	eb07 060a 	add.w	r6, r7, sl
 80082d0:	42b3      	cmp	r3, r6
 80082d2:	b085      	sub	sp, #20
 80082d4:	bfb8      	it	lt
 80082d6:	3101      	addlt	r1, #1
 80082d8:	f7ff ff28 	bl	800812c <_Balloc>
 80082dc:	b930      	cbnz	r0, 80082ec <__multiply+0x44>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b43      	ldr	r3, [pc, #268]	; (80083f0 <__multiply+0x148>)
 80082e2:	4844      	ldr	r0, [pc, #272]	; (80083f4 <__multiply+0x14c>)
 80082e4:	f240 115d 	movw	r1, #349	; 0x15d
 80082e8:	f000 fa34 	bl	8008754 <__assert_func>
 80082ec:	f100 0514 	add.w	r5, r0, #20
 80082f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082f4:	462b      	mov	r3, r5
 80082f6:	2200      	movs	r2, #0
 80082f8:	4543      	cmp	r3, r8
 80082fa:	d321      	bcc.n	8008340 <__multiply+0x98>
 80082fc:	f104 0314 	add.w	r3, r4, #20
 8008300:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008304:	f109 0314 	add.w	r3, r9, #20
 8008308:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800830c:	9202      	str	r2, [sp, #8]
 800830e:	1b3a      	subs	r2, r7, r4
 8008310:	3a15      	subs	r2, #21
 8008312:	f022 0203 	bic.w	r2, r2, #3
 8008316:	3204      	adds	r2, #4
 8008318:	f104 0115 	add.w	r1, r4, #21
 800831c:	428f      	cmp	r7, r1
 800831e:	bf38      	it	cc
 8008320:	2204      	movcc	r2, #4
 8008322:	9201      	str	r2, [sp, #4]
 8008324:	9a02      	ldr	r2, [sp, #8]
 8008326:	9303      	str	r3, [sp, #12]
 8008328:	429a      	cmp	r2, r3
 800832a:	d80c      	bhi.n	8008346 <__multiply+0x9e>
 800832c:	2e00      	cmp	r6, #0
 800832e:	dd03      	ble.n	8008338 <__multiply+0x90>
 8008330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008334:	2b00      	cmp	r3, #0
 8008336:	d059      	beq.n	80083ec <__multiply+0x144>
 8008338:	6106      	str	r6, [r0, #16]
 800833a:	b005      	add	sp, #20
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	f843 2b04 	str.w	r2, [r3], #4
 8008344:	e7d8      	b.n	80082f8 <__multiply+0x50>
 8008346:	f8b3 a000 	ldrh.w	sl, [r3]
 800834a:	f1ba 0f00 	cmp.w	sl, #0
 800834e:	d023      	beq.n	8008398 <__multiply+0xf0>
 8008350:	f104 0e14 	add.w	lr, r4, #20
 8008354:	46a9      	mov	r9, r5
 8008356:	f04f 0c00 	mov.w	ip, #0
 800835a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800835e:	f8d9 1000 	ldr.w	r1, [r9]
 8008362:	fa1f fb82 	uxth.w	fp, r2
 8008366:	b289      	uxth	r1, r1
 8008368:	fb0a 110b 	mla	r1, sl, fp, r1
 800836c:	4461      	add	r1, ip
 800836e:	f8d9 c000 	ldr.w	ip, [r9]
 8008372:	0c12      	lsrs	r2, r2, #16
 8008374:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008378:	fb0a c202 	mla	r2, sl, r2, ip
 800837c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008380:	b289      	uxth	r1, r1
 8008382:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008386:	4577      	cmp	r7, lr
 8008388:	f849 1b04 	str.w	r1, [r9], #4
 800838c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008390:	d8e3      	bhi.n	800835a <__multiply+0xb2>
 8008392:	9a01      	ldr	r2, [sp, #4]
 8008394:	f845 c002 	str.w	ip, [r5, r2]
 8008398:	9a03      	ldr	r2, [sp, #12]
 800839a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800839e:	3304      	adds	r3, #4
 80083a0:	f1b9 0f00 	cmp.w	r9, #0
 80083a4:	d020      	beq.n	80083e8 <__multiply+0x140>
 80083a6:	6829      	ldr	r1, [r5, #0]
 80083a8:	f104 0c14 	add.w	ip, r4, #20
 80083ac:	46ae      	mov	lr, r5
 80083ae:	f04f 0a00 	mov.w	sl, #0
 80083b2:	f8bc b000 	ldrh.w	fp, [ip]
 80083b6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083ba:	fb09 220b 	mla	r2, r9, fp, r2
 80083be:	4492      	add	sl, r2
 80083c0:	b289      	uxth	r1, r1
 80083c2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083c6:	f84e 1b04 	str.w	r1, [lr], #4
 80083ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083ce:	f8be 1000 	ldrh.w	r1, [lr]
 80083d2:	0c12      	lsrs	r2, r2, #16
 80083d4:	fb09 1102 	mla	r1, r9, r2, r1
 80083d8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083dc:	4567      	cmp	r7, ip
 80083de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083e2:	d8e6      	bhi.n	80083b2 <__multiply+0x10a>
 80083e4:	9a01      	ldr	r2, [sp, #4]
 80083e6:	50a9      	str	r1, [r5, r2]
 80083e8:	3504      	adds	r5, #4
 80083ea:	e79b      	b.n	8008324 <__multiply+0x7c>
 80083ec:	3e01      	subs	r6, #1
 80083ee:	e79d      	b.n	800832c <__multiply+0x84>
 80083f0:	0800c75b 	.word	0x0800c75b
 80083f4:	0800c76c 	.word	0x0800c76c

080083f8 <__pow5mult>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4615      	mov	r5, r2
 80083fe:	f012 0203 	ands.w	r2, r2, #3
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	d007      	beq.n	8008418 <__pow5mult+0x20>
 8008408:	4c25      	ldr	r4, [pc, #148]	; (80084a0 <__pow5mult+0xa8>)
 800840a:	3a01      	subs	r2, #1
 800840c:	2300      	movs	r3, #0
 800840e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008412:	f7ff feed 	bl	80081f0 <__multadd>
 8008416:	4607      	mov	r7, r0
 8008418:	10ad      	asrs	r5, r5, #2
 800841a:	d03d      	beq.n	8008498 <__pow5mult+0xa0>
 800841c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800841e:	b97c      	cbnz	r4, 8008440 <__pow5mult+0x48>
 8008420:	2010      	movs	r0, #16
 8008422:	f7ff fa67 	bl	80078f4 <malloc>
 8008426:	4602      	mov	r2, r0
 8008428:	6270      	str	r0, [r6, #36]	; 0x24
 800842a:	b928      	cbnz	r0, 8008438 <__pow5mult+0x40>
 800842c:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <__pow5mult+0xac>)
 800842e:	481e      	ldr	r0, [pc, #120]	; (80084a8 <__pow5mult+0xb0>)
 8008430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008434:	f000 f98e 	bl	8008754 <__assert_func>
 8008438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800843c:	6004      	str	r4, [r0, #0]
 800843e:	60c4      	str	r4, [r0, #12]
 8008440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008448:	b94c      	cbnz	r4, 800845e <__pow5mult+0x66>
 800844a:	f240 2171 	movw	r1, #625	; 0x271
 800844e:	4630      	mov	r0, r6
 8008450:	f7ff ff14 	bl	800827c <__i2b>
 8008454:	2300      	movs	r3, #0
 8008456:	f8c8 0008 	str.w	r0, [r8, #8]
 800845a:	4604      	mov	r4, r0
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	07eb      	lsls	r3, r5, #31
 8008464:	d50a      	bpl.n	800847c <__pow5mult+0x84>
 8008466:	4639      	mov	r1, r7
 8008468:	4622      	mov	r2, r4
 800846a:	4630      	mov	r0, r6
 800846c:	f7ff ff1c 	bl	80082a8 <__multiply>
 8008470:	4639      	mov	r1, r7
 8008472:	4680      	mov	r8, r0
 8008474:	4630      	mov	r0, r6
 8008476:	f7ff fe99 	bl	80081ac <_Bfree>
 800847a:	4647      	mov	r7, r8
 800847c:	106d      	asrs	r5, r5, #1
 800847e:	d00b      	beq.n	8008498 <__pow5mult+0xa0>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	b938      	cbnz	r0, 8008494 <__pow5mult+0x9c>
 8008484:	4622      	mov	r2, r4
 8008486:	4621      	mov	r1, r4
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff ff0d 	bl	80082a8 <__multiply>
 800848e:	6020      	str	r0, [r4, #0]
 8008490:	f8c0 9000 	str.w	r9, [r0]
 8008494:	4604      	mov	r4, r0
 8008496:	e7e4      	b.n	8008462 <__pow5mult+0x6a>
 8008498:	4638      	mov	r0, r7
 800849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849e:	bf00      	nop
 80084a0:	0800c53c 	.word	0x0800c53c
 80084a4:	0800c6ea 	.word	0x0800c6ea
 80084a8:	0800c76c 	.word	0x0800c76c

080084ac <__lshift>:
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	460c      	mov	r4, r1
 80084b2:	6849      	ldr	r1, [r1, #4]
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	4607      	mov	r7, r0
 80084be:	4691      	mov	r9, r2
 80084c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084c4:	f108 0601 	add.w	r6, r8, #1
 80084c8:	42b3      	cmp	r3, r6
 80084ca:	db0b      	blt.n	80084e4 <__lshift+0x38>
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff fe2d 	bl	800812c <_Balloc>
 80084d2:	4605      	mov	r5, r0
 80084d4:	b948      	cbnz	r0, 80084ea <__lshift+0x3e>
 80084d6:	4602      	mov	r2, r0
 80084d8:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <__lshift+0xd8>)
 80084da:	482b      	ldr	r0, [pc, #172]	; (8008588 <__lshift+0xdc>)
 80084dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084e0:	f000 f938 	bl	8008754 <__assert_func>
 80084e4:	3101      	adds	r1, #1
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	e7ee      	b.n	80084c8 <__lshift+0x1c>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f100 0114 	add.w	r1, r0, #20
 80084f0:	f100 0210 	add.w	r2, r0, #16
 80084f4:	4618      	mov	r0, r3
 80084f6:	4553      	cmp	r3, sl
 80084f8:	db37      	blt.n	800856a <__lshift+0xbe>
 80084fa:	6920      	ldr	r0, [r4, #16]
 80084fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008500:	f104 0314 	add.w	r3, r4, #20
 8008504:	f019 091f 	ands.w	r9, r9, #31
 8008508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800850c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008510:	d02f      	beq.n	8008572 <__lshift+0xc6>
 8008512:	f1c9 0e20 	rsb	lr, r9, #32
 8008516:	468a      	mov	sl, r1
 8008518:	f04f 0c00 	mov.w	ip, #0
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	fa02 f209 	lsl.w	r2, r2, r9
 8008522:	ea42 020c 	orr.w	r2, r2, ip
 8008526:	f84a 2b04 	str.w	r2, [sl], #4
 800852a:	f853 2b04 	ldr.w	r2, [r3], #4
 800852e:	4298      	cmp	r0, r3
 8008530:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008534:	d8f2      	bhi.n	800851c <__lshift+0x70>
 8008536:	1b03      	subs	r3, r0, r4
 8008538:	3b15      	subs	r3, #21
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	3304      	adds	r3, #4
 8008540:	f104 0215 	add.w	r2, r4, #21
 8008544:	4290      	cmp	r0, r2
 8008546:	bf38      	it	cc
 8008548:	2304      	movcc	r3, #4
 800854a:	f841 c003 	str.w	ip, [r1, r3]
 800854e:	f1bc 0f00 	cmp.w	ip, #0
 8008552:	d001      	beq.n	8008558 <__lshift+0xac>
 8008554:	f108 0602 	add.w	r6, r8, #2
 8008558:	3e01      	subs	r6, #1
 800855a:	4638      	mov	r0, r7
 800855c:	612e      	str	r6, [r5, #16]
 800855e:	4621      	mov	r1, r4
 8008560:	f7ff fe24 	bl	80081ac <_Bfree>
 8008564:	4628      	mov	r0, r5
 8008566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856a:	f842 0f04 	str.w	r0, [r2, #4]!
 800856e:	3301      	adds	r3, #1
 8008570:	e7c1      	b.n	80084f6 <__lshift+0x4a>
 8008572:	3904      	subs	r1, #4
 8008574:	f853 2b04 	ldr.w	r2, [r3], #4
 8008578:	f841 2f04 	str.w	r2, [r1, #4]!
 800857c:	4298      	cmp	r0, r3
 800857e:	d8f9      	bhi.n	8008574 <__lshift+0xc8>
 8008580:	e7ea      	b.n	8008558 <__lshift+0xac>
 8008582:	bf00      	nop
 8008584:	0800c75b 	.word	0x0800c75b
 8008588:	0800c76c 	.word	0x0800c76c

0800858c <__mdiff>:
 800858c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	460d      	mov	r5, r1
 8008592:	4607      	mov	r7, r0
 8008594:	4611      	mov	r1, r2
 8008596:	4628      	mov	r0, r5
 8008598:	4614      	mov	r4, r2
 800859a:	f003 f968 	bl	800b86e <__mcmp>
 800859e:	1e06      	subs	r6, r0, #0
 80085a0:	d111      	bne.n	80085c6 <__mdiff+0x3a>
 80085a2:	4631      	mov	r1, r6
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff fdc1 	bl	800812c <_Balloc>
 80085aa:	4602      	mov	r2, r0
 80085ac:	b928      	cbnz	r0, 80085ba <__mdiff+0x2e>
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <__mdiff+0x108>)
 80085b0:	f240 2132 	movw	r1, #562	; 0x232
 80085b4:	4838      	ldr	r0, [pc, #224]	; (8008698 <__mdiff+0x10c>)
 80085b6:	f000 f8cd 	bl	8008754 <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80085c0:	4610      	mov	r0, r2
 80085c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	bfa4      	itt	ge
 80085c8:	4623      	movge	r3, r4
 80085ca:	462c      	movge	r4, r5
 80085cc:	4638      	mov	r0, r7
 80085ce:	6861      	ldr	r1, [r4, #4]
 80085d0:	bfa6      	itte	ge
 80085d2:	461d      	movge	r5, r3
 80085d4:	2600      	movge	r6, #0
 80085d6:	2601      	movlt	r6, #1
 80085d8:	f7ff fda8 	bl	800812c <_Balloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	b918      	cbnz	r0, 80085e8 <__mdiff+0x5c>
 80085e0:	4b2c      	ldr	r3, [pc, #176]	; (8008694 <__mdiff+0x108>)
 80085e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085e6:	e7e5      	b.n	80085b4 <__mdiff+0x28>
 80085e8:	6927      	ldr	r7, [r4, #16]
 80085ea:	60c6      	str	r6, [r0, #12]
 80085ec:	692e      	ldr	r6, [r5, #16]
 80085ee:	f104 0014 	add.w	r0, r4, #20
 80085f2:	f105 0914 	add.w	r9, r5, #20
 80085f6:	f102 0e14 	add.w	lr, r2, #20
 80085fa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80085fe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008602:	3410      	adds	r4, #16
 8008604:	46f2      	mov	sl, lr
 8008606:	2100      	movs	r1, #0
 8008608:	f859 3b04 	ldr.w	r3, [r9], #4
 800860c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008610:	fa1f f883 	uxth.w	r8, r3
 8008614:	fa11 f18b 	uxtah	r1, r1, fp
 8008618:	0c1b      	lsrs	r3, r3, #16
 800861a:	eba1 0808 	sub.w	r8, r1, r8
 800861e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008626:	fa1f f888 	uxth.w	r8, r8
 800862a:	1419      	asrs	r1, r3, #16
 800862c:	454e      	cmp	r6, r9
 800862e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008632:	f84a 3b04 	str.w	r3, [sl], #4
 8008636:	d8e7      	bhi.n	8008608 <__mdiff+0x7c>
 8008638:	1b73      	subs	r3, r6, r5
 800863a:	3b15      	subs	r3, #21
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	3304      	adds	r3, #4
 8008642:	3515      	adds	r5, #21
 8008644:	42ae      	cmp	r6, r5
 8008646:	bf38      	it	cc
 8008648:	2304      	movcc	r3, #4
 800864a:	4418      	add	r0, r3
 800864c:	4473      	add	r3, lr
 800864e:	469e      	mov	lr, r3
 8008650:	4606      	mov	r6, r0
 8008652:	4566      	cmp	r6, ip
 8008654:	d30e      	bcc.n	8008674 <__mdiff+0xe8>
 8008656:	f10c 0103 	add.w	r1, ip, #3
 800865a:	1a09      	subs	r1, r1, r0
 800865c:	f021 0103 	bic.w	r1, r1, #3
 8008660:	3803      	subs	r0, #3
 8008662:	4584      	cmp	ip, r0
 8008664:	bf38      	it	cc
 8008666:	2100      	movcc	r1, #0
 8008668:	4419      	add	r1, r3
 800866a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800866e:	b17b      	cbz	r3, 8008690 <__mdiff+0x104>
 8008670:	6117      	str	r7, [r2, #16]
 8008672:	e7a5      	b.n	80085c0 <__mdiff+0x34>
 8008674:	f856 8b04 	ldr.w	r8, [r6], #4
 8008678:	fa11 f488 	uxtah	r4, r1, r8
 800867c:	1425      	asrs	r5, r4, #16
 800867e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8008682:	b2a4      	uxth	r4, r4
 8008684:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008688:	f84e 4b04 	str.w	r4, [lr], #4
 800868c:	1429      	asrs	r1, r5, #16
 800868e:	e7e0      	b.n	8008652 <__mdiff+0xc6>
 8008690:	3f01      	subs	r7, #1
 8008692:	e7ea      	b.n	800866a <__mdiff+0xde>
 8008694:	0800c75b 	.word	0x0800c75b
 8008698:	0800c76c 	.word	0x0800c76c

0800869c <__d2b>:
 800869c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086a0:	2101      	movs	r1, #1
 80086a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80086a6:	4690      	mov	r8, r2
 80086a8:	461d      	mov	r5, r3
 80086aa:	f7ff fd3f 	bl	800812c <_Balloc>
 80086ae:	4604      	mov	r4, r0
 80086b0:	b930      	cbnz	r0, 80086c0 <__d2b+0x24>
 80086b2:	4602      	mov	r2, r0
 80086b4:	4b25      	ldr	r3, [pc, #148]	; (800874c <__d2b+0xb0>)
 80086b6:	4826      	ldr	r0, [pc, #152]	; (8008750 <__d2b+0xb4>)
 80086b8:	f240 310a 	movw	r1, #778	; 0x30a
 80086bc:	f000 f84a 	bl	8008754 <__assert_func>
 80086c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80086c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80086c8:	bb2d      	cbnz	r5, 8008716 <__d2b+0x7a>
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	f1b8 0300 	subs.w	r3, r8, #0
 80086d0:	d026      	beq.n	8008720 <__d2b+0x84>
 80086d2:	4668      	mov	r0, sp
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	f003 f89d 	bl	800b814 <__lo0bits>
 80086da:	9900      	ldr	r1, [sp, #0]
 80086dc:	b1f0      	cbz	r0, 800871c <__d2b+0x80>
 80086de:	9a01      	ldr	r2, [sp, #4]
 80086e0:	f1c0 0320 	rsb	r3, r0, #32
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	430b      	orrs	r3, r1
 80086ea:	40c2      	lsrs	r2, r0
 80086ec:	6163      	str	r3, [r4, #20]
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf14      	ite	ne
 80086f8:	2102      	movne	r1, #2
 80086fa:	2101      	moveq	r1, #1
 80086fc:	6121      	str	r1, [r4, #16]
 80086fe:	b1c5      	cbz	r5, 8008732 <__d2b+0x96>
 8008700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008704:	4405      	add	r5, r0
 8008706:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800870a:	603d      	str	r5, [r7, #0]
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	4620      	mov	r0, r4
 8008710:	b002      	add	sp, #8
 8008712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800871a:	e7d6      	b.n	80086ca <__d2b+0x2e>
 800871c:	6161      	str	r1, [r4, #20]
 800871e:	e7e7      	b.n	80086f0 <__d2b+0x54>
 8008720:	a801      	add	r0, sp, #4
 8008722:	f003 f877 	bl	800b814 <__lo0bits>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	6163      	str	r3, [r4, #20]
 800872a:	2101      	movs	r1, #1
 800872c:	6121      	str	r1, [r4, #16]
 800872e:	3020      	adds	r0, #32
 8008730:	e7e5      	b.n	80086fe <__d2b+0x62>
 8008732:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800873a:	6038      	str	r0, [r7, #0]
 800873c:	6918      	ldr	r0, [r3, #16]
 800873e:	f003 f849 	bl	800b7d4 <__hi0bits>
 8008742:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008746:	6031      	str	r1, [r6, #0]
 8008748:	e7e1      	b.n	800870e <__d2b+0x72>
 800874a:	bf00      	nop
 800874c:	0800c75b 	.word	0x0800c75b
 8008750:	0800c76c 	.word	0x0800c76c

08008754 <__assert_func>:
 8008754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008756:	4614      	mov	r4, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <__assert_func+0x2c>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4605      	mov	r5, r0
 8008760:	68d8      	ldr	r0, [r3, #12]
 8008762:	b14c      	cbz	r4, 8008778 <__assert_func+0x24>
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <__assert_func+0x30>)
 8008766:	9100      	str	r1, [sp, #0]
 8008768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800876c:	4906      	ldr	r1, [pc, #24]	; (8008788 <__assert_func+0x34>)
 800876e:	462b      	mov	r3, r5
 8008770:	f000 f80e 	bl	8008790 <fiprintf>
 8008774:	f003 f8ea 	bl	800b94c <abort>
 8008778:	4b04      	ldr	r3, [pc, #16]	; (800878c <__assert_func+0x38>)
 800877a:	461c      	mov	r4, r3
 800877c:	e7f3      	b.n	8008766 <__assert_func+0x12>
 800877e:	bf00      	nop
 8008780:	200000c0 	.word	0x200000c0
 8008784:	0800c7c7 	.word	0x0800c7c7
 8008788:	0800c7d4 	.word	0x0800c7d4
 800878c:	0800c802 	.word	0x0800c802

08008790 <fiprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	b503      	push	{r0, r1, lr}
 8008794:	4601      	mov	r1, r0
 8008796:	ab03      	add	r3, sp, #12
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <fiprintf+0x20>)
 800879a:	f853 2b04 	ldr.w	r2, [r3], #4
 800879e:	6800      	ldr	r0, [r0, #0]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	f000 f807 	bl	80087b4 <_vfiprintf_r>
 80087a6:	b002      	add	sp, #8
 80087a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ac:	b003      	add	sp, #12
 80087ae:	4770      	bx	lr
 80087b0:	200000c0 	.word	0x200000c0

080087b4 <_vfiprintf_r>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	460d      	mov	r5, r1
 80087ba:	b09d      	sub	sp, #116	; 0x74
 80087bc:	4614      	mov	r4, r2
 80087be:	4698      	mov	r8, r3
 80087c0:	4606      	mov	r6, r0
 80087c2:	b118      	cbz	r0, 80087cc <_vfiprintf_r+0x18>
 80087c4:	6983      	ldr	r3, [r0, #24]
 80087c6:	b90b      	cbnz	r3, 80087cc <_vfiprintf_r+0x18>
 80087c8:	f000 fae4 	bl	8008d94 <__sinit>
 80087cc:	4b89      	ldr	r3, [pc, #548]	; (80089f4 <_vfiprintf_r+0x240>)
 80087ce:	429d      	cmp	r5, r3
 80087d0:	d11b      	bne.n	800880a <_vfiprintf_r+0x56>
 80087d2:	6875      	ldr	r5, [r6, #4]
 80087d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d6:	07d9      	lsls	r1, r3, #31
 80087d8:	d405      	bmi.n	80087e6 <_vfiprintf_r+0x32>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	059a      	lsls	r2, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_vfiprintf_r+0x32>
 80087e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e2:	f001 f93b 	bl	8009a5c <__retarget_lock_acquire_recursive>
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	071b      	lsls	r3, r3, #28
 80087ea:	d501      	bpl.n	80087f0 <_vfiprintf_r+0x3c>
 80087ec:	692b      	ldr	r3, [r5, #16]
 80087ee:	b9eb      	cbnz	r3, 800882c <_vfiprintf_r+0x78>
 80087f0:	4629      	mov	r1, r5
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 f960 	bl	8008ab8 <__swsetup_r>
 80087f8:	b1c0      	cbz	r0, 800882c <_vfiprintf_r+0x78>
 80087fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fc:	07dc      	lsls	r4, r3, #31
 80087fe:	d50e      	bpl.n	800881e <_vfiprintf_r+0x6a>
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008804:	b01d      	add	sp, #116	; 0x74
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	4b7b      	ldr	r3, [pc, #492]	; (80089f8 <_vfiprintf_r+0x244>)
 800880c:	429d      	cmp	r5, r3
 800880e:	d101      	bne.n	8008814 <_vfiprintf_r+0x60>
 8008810:	68b5      	ldr	r5, [r6, #8]
 8008812:	e7df      	b.n	80087d4 <_vfiprintf_r+0x20>
 8008814:	4b79      	ldr	r3, [pc, #484]	; (80089fc <_vfiprintf_r+0x248>)
 8008816:	429d      	cmp	r5, r3
 8008818:	bf08      	it	eq
 800881a:	68f5      	ldreq	r5, [r6, #12]
 800881c:	e7da      	b.n	80087d4 <_vfiprintf_r+0x20>
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	0598      	lsls	r0, r3, #22
 8008822:	d4ed      	bmi.n	8008800 <_vfiprintf_r+0x4c>
 8008824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008826:	f001 f921 	bl	8009a6c <__retarget_lock_release_recursive>
 800882a:	e7e9      	b.n	8008800 <_vfiprintf_r+0x4c>
 800882c:	2300      	movs	r3, #0
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	2320      	movs	r3, #32
 8008832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008836:	f8cd 800c 	str.w	r8, [sp, #12]
 800883a:	2330      	movs	r3, #48	; 0x30
 800883c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a00 <_vfiprintf_r+0x24c>
 8008840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008844:	f04f 0901 	mov.w	r9, #1
 8008848:	4623      	mov	r3, r4
 800884a:	469a      	mov	sl, r3
 800884c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008850:	b10a      	cbz	r2, 8008856 <_vfiprintf_r+0xa2>
 8008852:	2a25      	cmp	r2, #37	; 0x25
 8008854:	d1f9      	bne.n	800884a <_vfiprintf_r+0x96>
 8008856:	ebba 0b04 	subs.w	fp, sl, r4
 800885a:	d00b      	beq.n	8008874 <_vfiprintf_r+0xc0>
 800885c:	465b      	mov	r3, fp
 800885e:	4622      	mov	r2, r4
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f003 f853 	bl	800b90e <__sfputs_r>
 8008868:	3001      	adds	r0, #1
 800886a:	f000 80aa 	beq.w	80089c2 <_vfiprintf_r+0x20e>
 800886e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008870:	445a      	add	r2, fp
 8008872:	9209      	str	r2, [sp, #36]	; 0x24
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80a2 	beq.w	80089c2 <_vfiprintf_r+0x20e>
 800887e:	2300      	movs	r3, #0
 8008880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008888:	f10a 0a01 	add.w	sl, sl, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008894:	931a      	str	r3, [sp, #104]	; 0x68
 8008896:	4654      	mov	r4, sl
 8008898:	2205      	movs	r2, #5
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	4858      	ldr	r0, [pc, #352]	; (8008a00 <_vfiprintf_r+0x24c>)
 80088a0:	f7f7 fc7e 	bl	80001a0 <memchr>
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	b9d8      	cbnz	r0, 80088e0 <_vfiprintf_r+0x12c>
 80088a8:	06d1      	lsls	r1, r2, #27
 80088aa:	bf44      	itt	mi
 80088ac:	2320      	movmi	r3, #32
 80088ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b2:	0713      	lsls	r3, r2, #28
 80088b4:	bf44      	itt	mi
 80088b6:	232b      	movmi	r3, #43	; 0x2b
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088bc:	f89a 3000 	ldrb.w	r3, [sl]
 80088c0:	2b2a      	cmp	r3, #42	; 0x2a
 80088c2:	d015      	beq.n	80088f0 <_vfiprintf_r+0x13c>
 80088c4:	9a07      	ldr	r2, [sp, #28]
 80088c6:	4654      	mov	r4, sl
 80088c8:	2000      	movs	r0, #0
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4621      	mov	r1, r4
 80088d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d4:	3b30      	subs	r3, #48	; 0x30
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d94e      	bls.n	8008978 <_vfiprintf_r+0x1c4>
 80088da:	b1b0      	cbz	r0, 800890a <_vfiprintf_r+0x156>
 80088dc:	9207      	str	r2, [sp, #28]
 80088de:	e014      	b.n	800890a <_vfiprintf_r+0x156>
 80088e0:	eba0 0308 	sub.w	r3, r0, r8
 80088e4:	fa09 f303 	lsl.w	r3, r9, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	46a2      	mov	sl, r4
 80088ee:	e7d2      	b.n	8008896 <_vfiprintf_r+0xe2>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d19      	adds	r1, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9103      	str	r1, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfbb      	ittet	lt
 80088fc:	425b      	neglt	r3, r3
 80088fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008902:	9307      	strge	r3, [sp, #28]
 8008904:	9307      	strlt	r3, [sp, #28]
 8008906:	bfb8      	it	lt
 8008908:	9204      	strlt	r2, [sp, #16]
 800890a:	7823      	ldrb	r3, [r4, #0]
 800890c:	2b2e      	cmp	r3, #46	; 0x2e
 800890e:	d10c      	bne.n	800892a <_vfiprintf_r+0x176>
 8008910:	7863      	ldrb	r3, [r4, #1]
 8008912:	2b2a      	cmp	r3, #42	; 0x2a
 8008914:	d135      	bne.n	8008982 <_vfiprintf_r+0x1ce>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	9203      	str	r2, [sp, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb8      	it	lt
 8008922:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008926:	3402      	adds	r4, #2
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008a04 <_vfiprintf_r+0x250>
 800892e:	7821      	ldrb	r1, [r4, #0]
 8008930:	2203      	movs	r2, #3
 8008932:	4650      	mov	r0, sl
 8008934:	f7f7 fc34 	bl	80001a0 <memchr>
 8008938:	b140      	cbz	r0, 800894c <_vfiprintf_r+0x198>
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	eba0 000a 	sub.w	r0, r0, sl
 8008940:	fa03 f000 	lsl.w	r0, r3, r0
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	4303      	orrs	r3, r0
 8008948:	3401      	adds	r4, #1
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008950:	482d      	ldr	r0, [pc, #180]	; (8008a08 <_vfiprintf_r+0x254>)
 8008952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008956:	2206      	movs	r2, #6
 8008958:	f7f7 fc22 	bl	80001a0 <memchr>
 800895c:	2800      	cmp	r0, #0
 800895e:	d03f      	beq.n	80089e0 <_vfiprintf_r+0x22c>
 8008960:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <_vfiprintf_r+0x258>)
 8008962:	bb1b      	cbnz	r3, 80089ac <_vfiprintf_r+0x1f8>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	3307      	adds	r3, #7
 8008968:	f023 0307 	bic.w	r3, r3, #7
 800896c:	3308      	adds	r3, #8
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008972:	443b      	add	r3, r7
 8008974:	9309      	str	r3, [sp, #36]	; 0x24
 8008976:	e767      	b.n	8008848 <_vfiprintf_r+0x94>
 8008978:	fb0c 3202 	mla	r2, ip, r2, r3
 800897c:	460c      	mov	r4, r1
 800897e:	2001      	movs	r0, #1
 8008980:	e7a5      	b.n	80088ce <_vfiprintf_r+0x11a>
 8008982:	2300      	movs	r3, #0
 8008984:	3401      	adds	r4, #1
 8008986:	9305      	str	r3, [sp, #20]
 8008988:	4619      	mov	r1, r3
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	4620      	mov	r0, r4
 8008990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008994:	3a30      	subs	r2, #48	; 0x30
 8008996:	2a09      	cmp	r2, #9
 8008998:	d903      	bls.n	80089a2 <_vfiprintf_r+0x1ee>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0c5      	beq.n	800892a <_vfiprintf_r+0x176>
 800899e:	9105      	str	r1, [sp, #20]
 80089a0:	e7c3      	b.n	800892a <_vfiprintf_r+0x176>
 80089a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a6:	4604      	mov	r4, r0
 80089a8:	2301      	movs	r3, #1
 80089aa:	e7f0      	b.n	800898e <_vfiprintf_r+0x1da>
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <_vfiprintf_r+0x25c>)
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff f848 	bl	8007a4c <_printf_float>
 80089bc:	4607      	mov	r7, r0
 80089be:	1c78      	adds	r0, r7, #1
 80089c0:	d1d6      	bne.n	8008970 <_vfiprintf_r+0x1bc>
 80089c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c4:	07d9      	lsls	r1, r3, #31
 80089c6:	d405      	bmi.n	80089d4 <_vfiprintf_r+0x220>
 80089c8:	89ab      	ldrh	r3, [r5, #12]
 80089ca:	059a      	lsls	r2, r3, #22
 80089cc:	d402      	bmi.n	80089d4 <_vfiprintf_r+0x220>
 80089ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d0:	f001 f84c 	bl	8009a6c <__retarget_lock_release_recursive>
 80089d4:	89ab      	ldrh	r3, [r5, #12]
 80089d6:	065b      	lsls	r3, r3, #25
 80089d8:	f53f af12 	bmi.w	8008800 <_vfiprintf_r+0x4c>
 80089dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089de:	e711      	b.n	8008804 <_vfiprintf_r+0x50>
 80089e0:	ab03      	add	r3, sp, #12
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	462a      	mov	r2, r5
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <_vfiprintf_r+0x25c>)
 80089e8:	a904      	add	r1, sp, #16
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff fa58 	bl	8007ea0 <_printf_i>
 80089f0:	e7e4      	b.n	80089bc <_vfiprintf_r+0x208>
 80089f2:	bf00      	nop
 80089f4:	0800c568 	.word	0x0800c568
 80089f8:	0800c588 	.word	0x0800c588
 80089fc:	0800c548 	.word	0x0800c548
 8008a00:	0800c80d 	.word	0x0800c80d
 8008a04:	0800c813 	.word	0x0800c813
 8008a08:	0800c817 	.word	0x0800c817
 8008a0c:	08007a4d 	.word	0x08007a4d
 8008a10:	0800b90f 	.word	0x0800b90f

08008a14 <__swbuf_r>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	460e      	mov	r6, r1
 8008a18:	4614      	mov	r4, r2
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	b118      	cbz	r0, 8008a26 <__swbuf_r+0x12>
 8008a1e:	6983      	ldr	r3, [r0, #24]
 8008a20:	b90b      	cbnz	r3, 8008a26 <__swbuf_r+0x12>
 8008a22:	f000 f9b7 	bl	8008d94 <__sinit>
 8008a26:	4b21      	ldr	r3, [pc, #132]	; (8008aac <__swbuf_r+0x98>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d12b      	bne.n	8008a84 <__swbuf_r+0x70>
 8008a2c:	686c      	ldr	r4, [r5, #4]
 8008a2e:	69a3      	ldr	r3, [r4, #24]
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	071a      	lsls	r2, r3, #28
 8008a36:	d52f      	bpl.n	8008a98 <__swbuf_r+0x84>
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	b36b      	cbz	r3, 8008a98 <__swbuf_r+0x84>
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	1ac0      	subs	r0, r0, r3
 8008a42:	6963      	ldr	r3, [r4, #20]
 8008a44:	b2f6      	uxtb	r6, r6
 8008a46:	4283      	cmp	r3, r0
 8008a48:	4637      	mov	r7, r6
 8008a4a:	dc04      	bgt.n	8008a56 <__swbuf_r+0x42>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f922 	bl	8008c98 <_fflush_r>
 8008a54:	bb30      	cbnz	r0, 8008aa4 <__swbuf_r+0x90>
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	60a3      	str	r3, [r4, #8]
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	701e      	strb	r6, [r3, #0]
 8008a64:	6963      	ldr	r3, [r4, #20]
 8008a66:	3001      	adds	r0, #1
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	d004      	beq.n	8008a76 <__swbuf_r+0x62>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d506      	bpl.n	8008a80 <__swbuf_r+0x6c>
 8008a72:	2e0a      	cmp	r6, #10
 8008a74:	d104      	bne.n	8008a80 <__swbuf_r+0x6c>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f000 f90d 	bl	8008c98 <_fflush_r>
 8008a7e:	b988      	cbnz	r0, 8008aa4 <__swbuf_r+0x90>
 8008a80:	4638      	mov	r0, r7
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a84:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <__swbuf_r+0x9c>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swbuf_r+0x7a>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7cf      	b.n	8008a2e <__swbuf_r+0x1a>
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <__swbuf_r+0xa0>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7ca      	b.n	8008a2e <__swbuf_r+0x1a>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 f80c 	bl	8008ab8 <__swsetup_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0cb      	beq.n	8008a3c <__swbuf_r+0x28>
 8008aa4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008aa8:	e7ea      	b.n	8008a80 <__swbuf_r+0x6c>
 8008aaa:	bf00      	nop
 8008aac:	0800c568 	.word	0x0800c568
 8008ab0:	0800c588 	.word	0x0800c588
 8008ab4:	0800c548 	.word	0x0800c548

08008ab8 <__swsetup_r>:
 8008ab8:	4b32      	ldr	r3, [pc, #200]	; (8008b84 <__swsetup_r+0xcc>)
 8008aba:	b570      	push	{r4, r5, r6, lr}
 8008abc:	681d      	ldr	r5, [r3, #0]
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	b125      	cbz	r5, 8008ace <__swsetup_r+0x16>
 8008ac4:	69ab      	ldr	r3, [r5, #24]
 8008ac6:	b913      	cbnz	r3, 8008ace <__swsetup_r+0x16>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f000 f963 	bl	8008d94 <__sinit>
 8008ace:	4b2e      	ldr	r3, [pc, #184]	; (8008b88 <__swsetup_r+0xd0>)
 8008ad0:	429c      	cmp	r4, r3
 8008ad2:	d10f      	bne.n	8008af4 <__swsetup_r+0x3c>
 8008ad4:	686c      	ldr	r4, [r5, #4]
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008adc:	0719      	lsls	r1, r3, #28
 8008ade:	d42c      	bmi.n	8008b3a <__swsetup_r+0x82>
 8008ae0:	06dd      	lsls	r5, r3, #27
 8008ae2:	d411      	bmi.n	8008b08 <__swsetup_r+0x50>
 8008ae4:	2309      	movs	r3, #9
 8008ae6:	6033      	str	r3, [r6, #0]
 8008ae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af2:	e03e      	b.n	8008b72 <__swsetup_r+0xba>
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <__swsetup_r+0xd4>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <__swsetup_r+0x46>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7eb      	b.n	8008ad6 <__swsetup_r+0x1e>
 8008afe:	4b24      	ldr	r3, [pc, #144]	; (8008b90 <__swsetup_r+0xd8>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7e6      	b.n	8008ad6 <__swsetup_r+0x1e>
 8008b08:	0758      	lsls	r0, r3, #29
 8008b0a:	d512      	bpl.n	8008b32 <__swsetup_r+0x7a>
 8008b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0e:	b141      	cbz	r1, 8008b22 <__swsetup_r+0x6a>
 8008b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d002      	beq.n	8008b1e <__swsetup_r+0x66>
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7fe fef3 	bl	8007904 <_free_r>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6363      	str	r3, [r4, #52]	; 0x34
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b28:	81a3      	strh	r3, [r4, #12]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f043 0308 	orr.w	r3, r3, #8
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	b94b      	cbnz	r3, 8008b52 <__swsetup_r+0x9a>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b48:	d003      	beq.n	8008b52 <__swsetup_r+0x9a>
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f000 f99f 	bl	8008e90 <__smakebuf_r>
 8008b52:	89a0      	ldrh	r0, [r4, #12]
 8008b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b58:	f010 0301 	ands.w	r3, r0, #1
 8008b5c:	d00a      	beq.n	8008b74 <__swsetup_r+0xbc>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60a3      	str	r3, [r4, #8]
 8008b62:	6963      	ldr	r3, [r4, #20]
 8008b64:	425b      	negs	r3, r3
 8008b66:	61a3      	str	r3, [r4, #24]
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	b943      	cbnz	r3, 8008b7e <__swsetup_r+0xc6>
 8008b6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b70:	d1ba      	bne.n	8008ae8 <__swsetup_r+0x30>
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	0781      	lsls	r1, r0, #30
 8008b76:	bf58      	it	pl
 8008b78:	6963      	ldrpl	r3, [r4, #20]
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	e7f4      	b.n	8008b68 <__swsetup_r+0xb0>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	e7f7      	b.n	8008b72 <__swsetup_r+0xba>
 8008b82:	bf00      	nop
 8008b84:	200000c0 	.word	0x200000c0
 8008b88:	0800c568 	.word	0x0800c568
 8008b8c:	0800c588 	.word	0x0800c588
 8008b90:	0800c548 	.word	0x0800c548

08008b94 <__sflush_r>:
 8008b94:	898a      	ldrh	r2, [r1, #12]
 8008b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b98:	4605      	mov	r5, r0
 8008b9a:	0710      	lsls	r0, r2, #28
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	d457      	bmi.n	8008c50 <__sflush_r+0xbc>
 8008ba0:	684b      	ldr	r3, [r1, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dc04      	bgt.n	8008bb0 <__sflush_r+0x1c>
 8008ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc01      	bgt.n	8008bb0 <__sflush_r+0x1c>
 8008bac:	2000      	movs	r0, #0
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d0fa      	beq.n	8008bac <__sflush_r+0x18>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bbc:	682f      	ldr	r7, [r5, #0]
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	d032      	beq.n	8008c28 <__sflush_r+0x94>
 8008bc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	075a      	lsls	r2, r3, #29
 8008bc8:	d505      	bpl.n	8008bd6 <__sflush_r+0x42>
 8008bca:	6863      	ldr	r3, [r4, #4]
 8008bcc:	1ac0      	subs	r0, r0, r3
 8008bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bd0:	b10b      	cbz	r3, 8008bd6 <__sflush_r+0x42>
 8008bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bd4:	1ac0      	subs	r0, r0, r3
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b0      	blx	r6
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	d106      	bne.n	8008bf6 <__sflush_r+0x62>
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	291d      	cmp	r1, #29
 8008bec:	d82c      	bhi.n	8008c48 <__sflush_r+0xb4>
 8008bee:	4a29      	ldr	r2, [pc, #164]	; (8008c94 <__sflush_r+0x100>)
 8008bf0:	40ca      	lsrs	r2, r1
 8008bf2:	07d6      	lsls	r6, r2, #31
 8008bf4:	d528      	bpl.n	8008c48 <__sflush_r+0xb4>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6062      	str	r2, [r4, #4]
 8008bfa:	04d9      	lsls	r1, r3, #19
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	d504      	bpl.n	8008c0c <__sflush_r+0x78>
 8008c02:	1c42      	adds	r2, r0, #1
 8008c04:	d101      	bne.n	8008c0a <__sflush_r+0x76>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b903      	cbnz	r3, 8008c0c <__sflush_r+0x78>
 8008c0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d0cb      	beq.n	8008bac <__sflush_r+0x18>
 8008c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__sflush_r+0x8e>
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	f7fe fe71 	bl	8007904 <_free_r>
 8008c22:	2000      	movs	r0, #0
 8008c24:	6360      	str	r0, [r4, #52]	; 0x34
 8008c26:	e7c2      	b.n	8008bae <__sflush_r+0x1a>
 8008c28:	6a21      	ldr	r1, [r4, #32]
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c41      	adds	r1, r0, #1
 8008c32:	d1c7      	bne.n	8008bc4 <__sflush_r+0x30>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0c4      	beq.n	8008bc4 <__sflush_r+0x30>
 8008c3a:	2b1d      	cmp	r3, #29
 8008c3c:	d001      	beq.n	8008c42 <__sflush_r+0xae>
 8008c3e:	2b16      	cmp	r3, #22
 8008c40:	d101      	bne.n	8008c46 <__sflush_r+0xb2>
 8008c42:	602f      	str	r7, [r5, #0]
 8008c44:	e7b2      	b.n	8008bac <__sflush_r+0x18>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	e7ae      	b.n	8008bae <__sflush_r+0x1a>
 8008c50:	690f      	ldr	r7, [r1, #16]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	d0aa      	beq.n	8008bac <__sflush_r+0x18>
 8008c56:	0793      	lsls	r3, r2, #30
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	bf08      	it	eq
 8008c5c:	694b      	ldreq	r3, [r1, #20]
 8008c5e:	600f      	str	r7, [r1, #0]
 8008c60:	bf18      	it	ne
 8008c62:	2300      	movne	r3, #0
 8008c64:	1bf6      	subs	r6, r6, r7
 8008c66:	608b      	str	r3, [r1, #8]
 8008c68:	2e00      	cmp	r6, #0
 8008c6a:	dd9f      	ble.n	8008bac <__sflush_r+0x18>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c72:	4633      	mov	r3, r6
 8008c74:	463a      	mov	r2, r7
 8008c76:	4628      	mov	r0, r5
 8008c78:	47e0      	blx	ip
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	dc06      	bgt.n	8008c8c <__sflush_r+0xf8>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c8a:	e790      	b.n	8008bae <__sflush_r+0x1a>
 8008c8c:	4407      	add	r7, r0
 8008c8e:	1a36      	subs	r6, r6, r0
 8008c90:	e7ea      	b.n	8008c68 <__sflush_r+0xd4>
 8008c92:	bf00      	nop
 8008c94:	20400001 	.word	0x20400001

08008c98 <_fflush_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	690b      	ldr	r3, [r1, #16]
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b913      	cbnz	r3, 8008ca8 <_fflush_r+0x10>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	b118      	cbz	r0, 8008cb2 <_fflush_r+0x1a>
 8008caa:	6983      	ldr	r3, [r0, #24]
 8008cac:	b90b      	cbnz	r3, 8008cb2 <_fflush_r+0x1a>
 8008cae:	f000 f871 	bl	8008d94 <__sinit>
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <_fflush_r+0x6c>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	d11b      	bne.n	8008cf0 <_fflush_r+0x58>
 8008cb8:	686c      	ldr	r4, [r5, #4]
 8008cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ef      	beq.n	8008ca2 <_fflush_r+0xa>
 8008cc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cc4:	07d0      	lsls	r0, r2, #31
 8008cc6:	d404      	bmi.n	8008cd2 <_fflush_r+0x3a>
 8008cc8:	0599      	lsls	r1, r3, #22
 8008cca:	d402      	bmi.n	8008cd2 <_fflush_r+0x3a>
 8008ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cce:	f000 fec5 	bl	8009a5c <__retarget_lock_acquire_recursive>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7ff ff5d 	bl	8008b94 <__sflush_r>
 8008cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cdc:	07da      	lsls	r2, r3, #31
 8008cde:	4605      	mov	r5, r0
 8008ce0:	d4e0      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	059b      	lsls	r3, r3, #22
 8008ce6:	d4dd      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f000 febf 	bl	8009a6c <__retarget_lock_release_recursive>
 8008cee:	e7d9      	b.n	8008ca4 <_fflush_r+0xc>
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <_fflush_r+0x70>)
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d101      	bne.n	8008cfa <_fflush_r+0x62>
 8008cf6:	68ac      	ldr	r4, [r5, #8]
 8008cf8:	e7df      	b.n	8008cba <_fflush_r+0x22>
 8008cfa:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <_fflush_r+0x74>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	bf08      	it	eq
 8008d00:	68ec      	ldreq	r4, [r5, #12]
 8008d02:	e7da      	b.n	8008cba <_fflush_r+0x22>
 8008d04:	0800c568 	.word	0x0800c568
 8008d08:	0800c588 	.word	0x0800c588
 8008d0c:	0800c548 	.word	0x0800c548

08008d10 <std>:
 8008d10:	2300      	movs	r3, #0
 8008d12:	b510      	push	{r4, lr}
 8008d14:	4604      	mov	r4, r0
 8008d16:	e9c0 3300 	strd	r3, r3, [r0]
 8008d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d1e:	6083      	str	r3, [r0, #8]
 8008d20:	8181      	strh	r1, [r0, #12]
 8008d22:	6643      	str	r3, [r0, #100]	; 0x64
 8008d24:	81c2      	strh	r2, [r0, #14]
 8008d26:	6183      	str	r3, [r0, #24]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	305c      	adds	r0, #92	; 0x5c
 8008d2e:	f002 fbab 	bl	800b488 <memset>
 8008d32:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <std+0x38>)
 8008d34:	6263      	str	r3, [r4, #36]	; 0x24
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <std+0x3c>)
 8008d38:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <std+0x40>)
 8008d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x44>)
 8008d40:	6224      	str	r4, [r4, #32]
 8008d42:	6323      	str	r3, [r4, #48]	; 0x30
 8008d44:	bd10      	pop	{r4, pc}
 8008d46:	bf00      	nop
 8008d48:	0800ba63 	.word	0x0800ba63
 8008d4c:	0800ba85 	.word	0x0800ba85
 8008d50:	0800babd 	.word	0x0800babd
 8008d54:	0800bae1 	.word	0x0800bae1

08008d58 <_cleanup_r>:
 8008d58:	4901      	ldr	r1, [pc, #4]	; (8008d60 <_cleanup_r+0x8>)
 8008d5a:	f002 be14 	b.w	800b986 <_fwalk_reent>
 8008d5e:	bf00      	nop
 8008d60:	08008c99 	.word	0x08008c99

08008d64 <__sfp_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sfp_lock_acquire+0x8>)
 8008d66:	f000 be79 	b.w	8009a5c <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20000374 	.word	0x20000374

08008d70 <__sfp_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sfp_lock_release+0x8>)
 8008d72:	f000 be7b 	b.w	8009a6c <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20000374 	.word	0x20000374

08008d7c <__sinit_lock_acquire>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__sinit_lock_acquire+0x8>)
 8008d7e:	f000 be6d 	b.w	8009a5c <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	20000388 	.word	0x20000388

08008d88 <__sinit_lock_release>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sinit_lock_release+0x8>)
 8008d8a:	f000 be6f 	b.w	8009a6c <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	20000388 	.word	0x20000388

08008d94 <__sinit>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	f7ff fff0 	bl	8008d7c <__sinit_lock_acquire>
 8008d9c:	69a3      	ldr	r3, [r4, #24]
 8008d9e:	b11b      	cbz	r3, 8008da8 <__sinit+0x14>
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f7ff bff0 	b.w	8008d88 <__sinit_lock_release>
 8008da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dac:	6523      	str	r3, [r4, #80]	; 0x50
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <__sinit+0x68>)
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <__sinit+0x6c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	bf04      	itt	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	61a3      	streq	r3, [r4, #24]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f820 	bl	8008e04 <__sfp>
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f81c 	bl	8008e04 <__sfp>
 8008dcc:	60a0      	str	r0, [r4, #8]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f818 	bl	8008e04 <__sfp>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60e0      	str	r0, [r4, #12]
 8008dd8:	2104      	movs	r1, #4
 8008dda:	6860      	ldr	r0, [r4, #4]
 8008ddc:	f7ff ff98 	bl	8008d10 <std>
 8008de0:	68a0      	ldr	r0, [r4, #8]
 8008de2:	2201      	movs	r2, #1
 8008de4:	2109      	movs	r1, #9
 8008de6:	f7ff ff93 	bl	8008d10 <std>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	2202      	movs	r2, #2
 8008dee:	2112      	movs	r1, #18
 8008df0:	f7ff ff8e 	bl	8008d10 <std>
 8008df4:	2301      	movs	r3, #1
 8008df6:	61a3      	str	r3, [r4, #24]
 8008df8:	e7d2      	b.n	8008da0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	0800c538 	.word	0x0800c538
 8008e00:	08008d59 	.word	0x08008d59

08008e04 <__sfp>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	f7ff ffac 	bl	8008d64 <__sfp_lock_acquire>
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <__sfp+0x84>)
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	b913      	cbnz	r3, 8008e1a <__sfp+0x16>
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbd 	bl	8008d94 <__sinit>
 8008e1a:	3648      	adds	r6, #72	; 0x48
 8008e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	d503      	bpl.n	8008e2c <__sfp+0x28>
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	b30b      	cbz	r3, 8008e6c <__sfp+0x68>
 8008e28:	6836      	ldr	r6, [r6, #0]
 8008e2a:	e7f7      	b.n	8008e1c <__sfp+0x18>
 8008e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e30:	b9d5      	cbnz	r5, 8008e68 <__sfp+0x64>
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <__sfp+0x88>)
 8008e34:	60e3      	str	r3, [r4, #12]
 8008e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e3c:	f000 fe05 	bl	8009a4a <__retarget_lock_init_recursive>
 8008e40:	f7ff ff96 	bl	8008d70 <__sfp_lock_release>
 8008e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	61a5      	str	r5, [r4, #24]
 8008e50:	2208      	movs	r2, #8
 8008e52:	4629      	mov	r1, r5
 8008e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e58:	f002 fb16 	bl	800b488 <memset>
 8008e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e64:	4620      	mov	r0, r4
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	3468      	adds	r4, #104	; 0x68
 8008e6a:	e7d9      	b.n	8008e20 <__sfp+0x1c>
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f002 fd73 	bl	800b95a <__sfmoreglue>
 8008e74:	4604      	mov	r4, r0
 8008e76:	6030      	str	r0, [r6, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1d5      	bne.n	8008e28 <__sfp+0x24>
 8008e7c:	f7ff ff78 	bl	8008d70 <__sfp_lock_release>
 8008e80:	230c      	movs	r3, #12
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	e7ee      	b.n	8008e64 <__sfp+0x60>
 8008e86:	bf00      	nop
 8008e88:	0800c538 	.word	0x0800c538
 8008e8c:	ffff0001 	.word	0xffff0001

08008e90 <__smakebuf_r>:
 8008e90:	898b      	ldrh	r3, [r1, #12]
 8008e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e94:	079d      	lsls	r5, r3, #30
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	d507      	bpl.n	8008eac <__smakebuf_r+0x1c>
 8008e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	6123      	str	r3, [r4, #16]
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	6163      	str	r3, [r4, #20]
 8008ea8:	b002      	add	sp, #8
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	ab01      	add	r3, sp, #4
 8008eae:	466a      	mov	r2, sp
 8008eb0:	f002 fd88 	bl	800b9c4 <__swhatbuf_r>
 8008eb4:	9900      	ldr	r1, [sp, #0]
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7fe fd6d 	bl	8007998 <_malloc_r>
 8008ebe:	b948      	cbnz	r0, 8008ed4 <__smakebuf_r+0x44>
 8008ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d4ef      	bmi.n	8008ea8 <__smakebuf_r+0x18>
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	f043 0302 	orr.w	r3, r3, #2
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	e7e3      	b.n	8008e9c <__smakebuf_r+0xc>
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <__smakebuf_r+0x7c>)
 8008ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	6020      	str	r0, [r4, #0]
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	9b00      	ldr	r3, [sp, #0]
 8008ee4:	6163      	str	r3, [r4, #20]
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	6120      	str	r0, [r4, #16]
 8008eea:	b15b      	cbz	r3, 8008f04 <__smakebuf_r+0x74>
 8008eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f85b 	bl	8008fac <_isatty_r>
 8008ef6:	b128      	cbz	r0, 8008f04 <__smakebuf_r+0x74>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	81a3      	strh	r3, [r4, #12]
 8008f04:	89a0      	ldrh	r0, [r4, #12]
 8008f06:	4305      	orrs	r5, r0
 8008f08:	81a5      	strh	r5, [r4, #12]
 8008f0a:	e7cd      	b.n	8008ea8 <__smakebuf_r+0x18>
 8008f0c:	08008d59 	.word	0x08008d59

08008f10 <raise>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <raise+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f002 bd7a 	b.w	800ba0e <_raise_r>
 8008f1a:	bf00      	nop
 8008f1c:	200000c0 	.word	0x200000c0

08008f20 <_kill_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_kill_r+0x20>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	f000 fd83 	bl	8009a38 <_kill>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d102      	bne.n	8008f3c <_kill_r+0x1c>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b103      	cbz	r3, 8008f3c <_kill_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000be0 	.word	0x20000be0

08008f44 <_write_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d07      	ldr	r5, [pc, #28]	; (8008f64 <_write_r+0x20>)
 8008f48:	4604      	mov	r4, r0
 8008f4a:	4608      	mov	r0, r1
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	2200      	movs	r2, #0
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f000 fd60 	bl	8009a18 <_write>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_write_r+0x1e>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_write_r+0x1e>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000be0 	.word	0x20000be0

08008f68 <_close_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d06      	ldr	r5, [pc, #24]	; (8008f84 <_close_r+0x1c>)
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4608      	mov	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f000 fd56 	bl	8009a24 <_close>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_close_r+0x1a>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_close_r+0x1a>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20000be0 	.word	0x20000be0

08008f88 <_fstat_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	; (8008fa8 <_fstat_r+0x20>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	f000 fd53 	bl	8009a40 <_fstat>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d102      	bne.n	8008fa4 <_fstat_r+0x1c>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	b103      	cbz	r3, 8008fa4 <_fstat_r+0x1c>
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000be0 	.word	0x20000be0

08008fac <_isatty_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d06      	ldr	r5, [pc, #24]	; (8008fc8 <_isatty_r+0x1c>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	f000 fd39 	bl	8009a2e <_isatty>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_isatty_r+0x1a>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_isatty_r+0x1a>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20000be0 	.word	0x20000be0

08008fcc <_lseek_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d07      	ldr	r5, [pc, #28]	; (8008fec <_lseek_r+0x20>)
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	602a      	str	r2, [r5, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f000 fd25 	bl	8009a2a <_lseek>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_lseek_r+0x1e>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_lseek_r+0x1e>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000be0 	.word	0x20000be0

08008ff0 <_read_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	; (8009010 <_read_r+0x20>)
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f000 fd04 	bl	8009a0c <_read>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_read_r+0x1e>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_read_r+0x1e>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20000be0 	.word	0x20000be0

08009014 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8009014:	4770      	bx	lr

08009016 <fill_msg_bit_field>:
static void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 8009016:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 8009018:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800901a:	e013      	b.n	8009044 <fill_msg_bit_field+0x2e>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800901c:	ebac 0e04 	sub.w	lr, ip, r4
 8009020:	f04f 0c01 	mov.w	ip, #1
 8009024:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009028:	ea01 0c0c 	and.w	ip, r1, ip
 800902c:	fa0c fc04 	lsl.w	ip, ip, r4
 8009030:	6805      	ldr	r5, [r0, #0]
 8009032:	ea45 050c 	orr.w	r5, r5, ip
 8009036:	6005      	str	r5, [r0, #0]
        (*pos)++;
 8009038:	f893 c000 	ldrb.w	ip, [r3]
 800903c:	f10c 0c01 	add.w	ip, ip, #1
 8009040:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 8009044:	f893 c000 	ldrb.w	ip, [r3]
 8009048:	1915      	adds	r5, r2, r4
 800904a:	45ac      	cmp	ip, r5
 800904c:	dbe6      	blt.n	800901c <fill_msg_bit_field+0x6>
}
 800904e:	bd30      	pop	{r4, r5, pc}

08009050 <extract_msg_bit_field>:
static void extract_msg_bit_field(const uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 8009050:	b510      	push	{r4, lr}
    uint8_t start_pos = *pos;
 8009052:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 8009054:	e015      	b.n	8009082 <extract_msg_bit_field+0x32>
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009056:	f04f 0c01 	mov.w	ip, #1
 800905a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800905e:	f8d0 e000 	ldr.w	lr, [r0]
 8009062:	ea0e 0c0c 	and.w	ip, lr, ip
 8009066:	fa2c fc04 	lsr.w	ip, ip, r4
 800906a:	f891 e000 	ldrb.w	lr, [r1]
 800906e:	ea4e 0c0c 	orr.w	ip, lr, ip
 8009072:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 8009076:	f893 c000 	ldrb.w	ip, [r3]
 800907a:	f10c 0c01 	add.w	ip, ip, #1
 800907e:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 8009082:	f893 e000 	ldrb.w	lr, [r3]
 8009086:	eb02 0c04 	add.w	ip, r2, r4
 800908a:	45e6      	cmp	lr, ip
 800908c:	dbe3      	blt.n	8009056 <extract_msg_bit_field+0x6>
}
 800908e:	bd10      	pop	{r4, pc}

08009090 <reverse>:
static uint8_t reverse(uint8_t input) {
 8009090:	2300      	movs	r3, #0
    uint8_t pos = 0;
 8009092:	461a      	mov	r2, r3
    while( pos < 7 ) {
 8009094:	e007      	b.n	80090a6 <reverse+0x16>
        bit = input & BIT(0);
 8009096:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800909a:	430b      	orrs	r3, r1
        output = output << 1;
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	b2db      	uxtb	r3, r3
        input = input >> 1;
 80090a0:	0840      	lsrs	r0, r0, #1
        pos++;
 80090a2:	3201      	adds	r2, #1
 80090a4:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 80090a6:	2a06      	cmp	r2, #6
 80090a8:	d9f5      	bls.n	8009096 <reverse+0x6>
    bit = input & BIT(0);
 80090aa:	f000 0001 	and.w	r0, r0, #1
}
 80090ae:	4318      	orrs	r0, r3
 80090b0:	4770      	bx	lr

080090b2 <arch_printk_char_out>:
}
 80090b2:	2000      	movs	r0, #0
 80090b4:	4770      	bx	lr

080090b6 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 80090b6:	b40f      	push	{r0, r1, r2, r3}
 80090b8:	b500      	push	{lr}
 80090ba:	b083      	sub	sp, #12
 80090bc:	a904      	add	r1, sp, #16
 80090be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80090c2:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 80090c4:	f7f8 feb8 	bl	8001e38 <vprintk>
	}
	va_end(ap);
}
 80090c8:	b003      	add	sp, #12
 80090ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ce:	b004      	add	sp, #16
 80090d0:	4770      	bx	lr

080090d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80090d2:	b508      	push	{r3, lr}
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80090da:	461a      	mov	r2, r3
 80090dc:	47a0      	blx	r4
	return z_impl_z_current_get();
 80090de:	f7fd fe7b 	bl	8006dd8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80090e2:	f7f9 fe91 	bl	8002e08 <z_impl_k_thread_abort>

080090e6 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 80090e6:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
 80090e8:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80090ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ee:	d303      	bcc.n	80090f8 <chunk_mem+0x12>
 80090f0:	2308      	movs	r3, #8
 80090f2:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
 80090f4:	4408      	add	r0, r1
 80090f6:	4770      	bx	lr
 80090f8:	2304      	movs	r3, #4
 80090fa:	e7fa      	b.n	80090f2 <chunk_mem+0xc>

080090fc <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 80090fc:	b410      	push	{r4}
	void *cmem = &buf[c];
 80090fe:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009102:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8009104:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009108:	d319      	bcc.n	800913e <free_list_remove_bidx+0x42>
		return ((uint32_t *)cmem)[f];
 800910a:	f8dc 300c 	ldr.w	r3, [ip, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 800910e:	4299      	cmp	r1, r3
 8009110:	d018      	beq.n	8009144 <free_list_remove_bidx+0x48>
	if (big_heap(h)) {
 8009112:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009116:	d322      	bcc.n	800915e <free_list_remove_bidx+0x62>
		return ((uint32_t *)cmem)[f];
 8009118:	f8dc 1008 	ldr.w	r1, [ip, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
 800911c:	3204      	adds	r2, #4
 800911e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 8009122:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 8009126:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800912a:	d31b      	bcc.n	8009164 <free_list_remove_bidx+0x68>
		((uint32_t *)cmem)[f] = val;
 800912c:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
 800912e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009132:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8009134:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009138:	d316      	bcc.n	8009168 <free_list_remove_bidx+0x6c>
		((uint32_t *)cmem)[f] = val;
 800913a:	6099      	str	r1, [r3, #8]
 800913c:	e00d      	b.n	800915a <free_list_remove_bidx+0x5e>
		return ((uint16_t *)cmem)[f];
 800913e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
 8009142:	e7e4      	b.n	800910e <free_list_remove_bidx+0x12>
		h->avail_buckets &= ~(1 << bidx);
 8009144:	2301      	movs	r3, #1
 8009146:	fa03 f102 	lsl.w	r1, r3, r2
 800914a:	68c3      	ldr	r3, [r0, #12]
 800914c:	ea23 0301 	bic.w	r3, r3, r1
 8009150:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 8009152:	3204      	adds	r2, #4
 8009154:	2300      	movs	r3, #0
 8009156:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 800915a:	bc10      	pop	{r4}
 800915c:	4770      	bx	lr
 800915e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8009162:	e7db      	b.n	800911c <free_list_remove_bidx+0x20>
		((uint16_t *)cmem)[f] = val;
 8009164:	80d3      	strh	r3, [r2, #6]
 8009166:	e7e2      	b.n	800912e <free_list_remove_bidx+0x32>
 8009168:	8099      	strh	r1, [r3, #4]
 800916a:	e7f6      	b.n	800915a <free_list_remove_bidx+0x5e>

0800916c <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800916c:	1d13      	adds	r3, r2, #4
 800916e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009172:	b9d3      	cbnz	r3, 80091aa <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 8009174:	2301      	movs	r3, #1
 8009176:	fa03 fc02 	lsl.w	ip, r3, r2
 800917a:	68c3      	ldr	r3, [r0, #12]
 800917c:	ea43 030c 	orr.w	r3, r3, ip
 8009180:	60c3      	str	r3, [r0, #12]
		b->next = c;
 8009182:	3204      	adds	r2, #4
 8009184:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 8009188:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800918c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800918e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009192:	d306      	bcc.n	80091a2 <free_list_add_bidx+0x36>
		((uint32_t *)cmem)[f] = val;
 8009194:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 8009196:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8009198:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800919c:	d303      	bcc.n	80091a6 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800919e:	60d9      	str	r1, [r3, #12]
 80091a0:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
 80091a2:	8099      	strh	r1, [r3, #4]
 80091a4:	e7f7      	b.n	8009196 <free_list_add_bidx+0x2a>
 80091a6:	80d9      	strh	r1, [r3, #6]
 80091a8:	4770      	bx	lr
{
 80091aa:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 80091ac:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 80091b0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80091b2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80091b6:	d31c      	bcc.n	80091f2 <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 80091b8:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 80091bc:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 80091c0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80091c4:	d318      	bcc.n	80091f8 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 80091c6:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 80091ca:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80091cc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80091d0:	d315      	bcc.n	80091fe <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 80091d2:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 80091d6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 80091da:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80091dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e0:	d310      	bcc.n	8009204 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 80091e2:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 80091e4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80091e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ea:	d30d      	bcc.n	8009208 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 80091ec:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 80091f0:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 80091f2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80091f6:	e7e1      	b.n	80091bc <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 80091f8:	f8ae 2004 	strh.w	r2, [lr, #4]
 80091fc:	e7e5      	b.n	80091ca <free_list_add_bidx+0x5e>
 80091fe:	f8ae 3006 	strh.w	r3, [lr, #6]
 8009202:	e7e8      	b.n	80091d6 <free_list_add_bidx+0x6a>
 8009204:	80d1      	strh	r1, [r2, #6]
 8009206:	e7ed      	b.n	80091e4 <free_list_add_bidx+0x78>
 8009208:	f8ac 1004 	strh.w	r1, [ip, #4]
 800920c:	e7f0      	b.n	80091f0 <free_list_add_bidx+0x84>

0800920e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 800920e:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 8009210:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009214:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8009216:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800921a:	d329      	bcc.n	8009270 <split_chunks+0x62>
		return ((uint32_t *)cmem)[f];
 800921c:	f8dc 5004 	ldr.w	r5, [ip, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
 8009220:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
 8009222:	1a89      	subs	r1, r1, r2
 8009224:	eb01 0155 	add.w	r1, r1, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8009228:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
 800922a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800922e:	d322      	bcc.n	8009276 <split_chunks+0x68>
		((uint32_t *)cmem)[f] = val;
 8009230:	f8cc 5004 	str.w	r5, [ip, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8009234:	004c      	lsls	r4, r1, #1
	void *cmem = &buf[c];
 8009236:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
 800923a:	6885      	ldr	r5, [r0, #8]
 800923c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009240:	d31c      	bcc.n	800927c <split_chunks+0x6e>
		((uint32_t *)cmem)[f] = val;
 8009242:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 8009246:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8009248:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800924c:	d319      	bcc.n	8009282 <split_chunks+0x74>
		((uint32_t *)cmem)[f] = val;
 800924e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
 8009252:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 8009254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009258:	d316      	bcc.n	8009288 <split_chunks+0x7a>
		return ((uint32_t *)cmem)[f];
 800925a:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
 800925e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 8009262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009266:	d312      	bcc.n	800928e <split_chunks+0x80>
		((uint32_t *)cmem)[f] = val;
 8009268:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
 800926c:	bc30      	pop	{r4, r5}
 800926e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 8009270:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 8009274:	e7d4      	b.n	8009220 <split_chunks+0x12>
		((uint16_t *)cmem)[f] = val;
 8009276:	f8ac 5002 	strh.w	r5, [ip, #2]
 800927a:	e7db      	b.n	8009234 <split_chunks+0x26>
 800927c:	f8ac 4002 	strh.w	r4, [ip, #2]
 8009280:	e7e1      	b.n	8009246 <split_chunks+0x38>
 8009282:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 8009286:	e7e4      	b.n	8009252 <split_chunks+0x44>
		return ((uint16_t *)cmem)[f];
 8009288:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 800928c:	e7e7      	b.n	800925e <split_chunks+0x50>
		((uint16_t *)cmem)[f] = val;
 800928e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
 8009292:	e7eb      	b.n	800926c <split_chunks+0x5e>

08009294 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8009294:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 8009296:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800929a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800929c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80092a0:	d31e      	bcc.n	80092e0 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
 80092a2:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80092a4:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
 80092a6:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
 80092aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80092ae:	d319      	bcc.n	80092e4 <merge_chunks+0x50>
		return ((uint32_t *)cmem)[f];
 80092b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 80092b4:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80092b8:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
 80092ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80092be:	d314      	bcc.n	80092ea <merge_chunks+0x56>
		((uint32_t *)cmem)[f] = val;
 80092c0:	604d      	str	r5, [r1, #4]
	return big_heap_chunks(h->end_chunk);
 80092c2:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
 80092c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092c8:	d311      	bcc.n	80092ee <merge_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
 80092ca:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
 80092ce:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 80092d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092d6:	d30d      	bcc.n	80092f4 <merge_chunks+0x60>
		((uint32_t *)cmem)[f] = val;
 80092d8:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 80092dc:	bc30      	pop	{r4, r5}
 80092de:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 80092e0:	884b      	ldrh	r3, [r1, #2]
 80092e2:	e7df      	b.n	80092a4 <merge_chunks+0x10>
 80092e4:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 80092e8:	e7e4      	b.n	80092b4 <merge_chunks+0x20>
		((uint16_t *)cmem)[f] = val;
 80092ea:	804d      	strh	r5, [r1, #2]
 80092ec:	e7e9      	b.n	80092c2 <merge_chunks+0x2e>
		return ((uint16_t *)cmem)[f];
 80092ee:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 80092f2:	e7ec      	b.n	80092ce <merge_chunks+0x3a>
		((uint16_t *)cmem)[f] = val;
 80092f4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 80092f8:	e7f0      	b.n	80092dc <merge_chunks+0x48>

080092fa <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
 80092fa:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
 80092fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009300:	d304      	bcc.n	800930c <mem_to_chunkid+0x12>
 8009302:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 8009304:	1ac9      	subs	r1, r1, r3
 8009306:	1a08      	subs	r0, r1, r0
}
 8009308:	08c0      	lsrs	r0, r0, #3
 800930a:	4770      	bx	lr
 800930c:	2304      	movs	r3, #4
 800930e:	e7f9      	b.n	8009304 <mem_to_chunkid+0xa>

08009310 <free_list_remove>:
{
 8009310:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 8009312:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
 8009314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009318:	d307      	bcc.n	800932a <free_list_remove+0x1a>
	void *cmem = &buf[c];
 800931a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 800931e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8009320:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 8009322:	2a01      	cmp	r2, #1
 8009324:	d002      	beq.n	800932c <free_list_remove+0x1c>
 8009326:	2200      	movs	r2, #0
 8009328:	e000      	b.n	800932c <free_list_remove+0x1c>
 800932a:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800932c:	b9a2      	cbnz	r2, 8009358 <free_list_remove+0x48>
	void *cmem = &buf[c];
 800932e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 8009332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009336:	d310      	bcc.n	800935a <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
 8009338:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800933a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 800933c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009340:	d30d      	bcc.n	800935e <free_list_remove+0x4e>
 8009342:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009344:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8009346:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800934a:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800934c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
 8009350:	f1c2 021f 	rsb	r2, r2, #31
 8009354:	f7ff fed2 	bl	80090fc <free_list_remove_bidx>
}
 8009358:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 800935a:	8852      	ldrh	r2, [r2, #2]
 800935c:	e7ed      	b.n	800933a <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
 800935e:	2304      	movs	r3, #4
 8009360:	e7f0      	b.n	8009344 <free_list_remove+0x34>

08009362 <free_list_add>:
{
 8009362:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 8009364:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
 8009366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800936a:	d307      	bcc.n	800937c <free_list_add+0x1a>
	void *cmem = &buf[c];
 800936c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 8009370:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8009372:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 8009374:	2a01      	cmp	r2, #1
 8009376:	d002      	beq.n	800937e <free_list_add+0x1c>
 8009378:	2200      	movs	r2, #0
 800937a:	e000      	b.n	800937e <free_list_add+0x1c>
 800937c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800937e:	b9a2      	cbnz	r2, 80093aa <free_list_add+0x48>
	void *cmem = &buf[c];
 8009380:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 8009384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009388:	d310      	bcc.n	80093ac <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800938a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800938c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009392:	d30d      	bcc.n	80093b0 <free_list_add+0x4e>
 8009394:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009396:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8009398:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800939c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800939e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
 80093a2:	f1c2 021f 	rsb	r2, r2, #31
 80093a6:	f7ff fee1 	bl	800916c <free_list_add_bidx>
}
 80093aa:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 80093ac:	8852      	ldrh	r2, [r2, #2]
 80093ae:	e7ed      	b.n	800938c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 80093b0:	2304      	movs	r3, #4
 80093b2:	e7f0      	b.n	8009396 <free_list_add+0x34>

080093b4 <free_chunk>:
{
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	460d      	mov	r5, r1
	void *cmem = &buf[c];
 80093ba:	00ce      	lsls	r6, r1, #3
 80093bc:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 80093c0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80093c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c6:	d31f      	bcc.n	8009408 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
 80093c8:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
 80093ca:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
 80093ce:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 80093d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093d6:	d319      	bcc.n	800940c <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
 80093d8:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
 80093da:	f013 0f01 	tst.w	r3, #1
 80093de:	d017      	beq.n	8009410 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
 80093e0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e6:	d324      	bcc.n	8009432 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
 80093e8:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 80093ea:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
 80093ec:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
 80093f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f4:	d31f      	bcc.n	8009436 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
 80093f6:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
 80093f8:	f013 0f01 	tst.w	r3, #1
 80093fc:	d01d      	beq.n	800943a <free_chunk+0x86>
	free_list_add(h, c);
 80093fe:	4629      	mov	r1, r5
 8009400:	4620      	mov	r0, r4
 8009402:	f7ff ffae 	bl	8009362 <free_list_add>
}
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
 8009408:	8879      	ldrh	r1, [r7, #2]
 800940a:	e7de      	b.n	80093ca <free_chunk+0x16>
 800940c:	8853      	ldrh	r3, [r2, #2]
 800940e:	e7e4      	b.n	80093da <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
 8009410:	4620      	mov	r0, r4
 8009412:	f7ff ff7d 	bl	8009310 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
 8009416:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 8009418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941c:	d307      	bcc.n	800942e <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
 800941e:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
 8009420:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 8009424:	4629      	mov	r1, r5
 8009426:	4620      	mov	r0, r4
 8009428:	f7ff ff34 	bl	8009294 <merge_chunks>
 800942c:	e7d8      	b.n	80093e0 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
 800942e:	887a      	ldrh	r2, [r7, #2]
 8009430:	e7f6      	b.n	8009420 <free_chunk+0x6c>
 8009432:	5ba1      	ldrh	r1, [r4, r6]
 8009434:	e7d9      	b.n	80093ea <free_chunk+0x36>
 8009436:	8853      	ldrh	r3, [r2, #2]
 8009438:	e7de      	b.n	80093f8 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff ff68 	bl	8009310 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
 8009440:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009446:	d30c      	bcc.n	8009462 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
 8009448:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
 800944a:	462a      	mov	r2, r5
 800944c:	1a69      	subs	r1, r5, r1
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff ff20 	bl	8009294 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
 8009454:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
 8009456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800945a:	d304      	bcc.n	8009466 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
 800945c:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 800945e:	1aed      	subs	r5, r5, r3
 8009460:	e7cd      	b.n	80093fe <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
 8009462:	5ba1      	ldrh	r1, [r4, r6]
 8009464:	e7f1      	b.n	800944a <free_chunk+0x96>
 8009466:	5ba3      	ldrh	r3, [r4, r6]
 8009468:	e7f9      	b.n	800945e <free_chunk+0xaa>

0800946a <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 800946a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
 800946c:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
 800946e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009472:	d310      	bcc.n	8009496 <alloc_chunk+0x2c>
 8009474:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009476:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8009478:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
 800947c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800947e:	fab3 f383 	clz	r3, r3
 8009482:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 8009486:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
 800948a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800948e:	b346      	cbz	r6, 80094e2 <alloc_chunk+0x78>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
 8009490:	f04f 0c03 	mov.w	ip, #3
 8009494:	e012      	b.n	80094bc <alloc_chunk+0x52>
	return big_heap(h) ? 8 : 4;
 8009496:	2304      	movs	r3, #4
 8009498:	e7ed      	b.n	8009476 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
 800949a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800949e:	e017      	b.n	80094d0 <alloc_chunk+0x66>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7ff fe2b 	bl	80090fc <free_list_remove_bidx>
				return c;
 80094a6:	e024      	b.n	80094f2 <alloc_chunk+0x88>
 80094a8:	f8be 4006 	ldrh.w	r4, [lr, #6]
			}
			b->next = next_free_chunk(h, c);
 80094ac:	1d17      	adds	r7, r2, #4
 80094ae:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
 80094b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80094b6:	d014      	beq.n	80094e2 <alloc_chunk+0x78>
 80094b8:	42a6      	cmp	r6, r4
 80094ba:	d012      	beq.n	80094e2 <alloc_chunk+0x78>
			chunkid_t c = b->next;
 80094bc:	1d14      	adds	r4, r2, #4
 80094be:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
 80094c2:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
	if (big_heap(h)) {
 80094c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80094ca:	d3e6      	bcc.n	800949a <alloc_chunk+0x30>
		return ((uint32_t *)cmem)[f];
 80094cc:	f8de 7004 	ldr.w	r7, [lr, #4]
			if (chunk_size(h, c) >= sz) {
 80094d0:	ebb1 0f57 	cmp.w	r1, r7, lsr #1
 80094d4:	d9e4      	bls.n	80094a0 <alloc_chunk+0x36>
	if (big_heap(h)) {
 80094d6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80094da:	d3e5      	bcc.n	80094a8 <alloc_chunk+0x3e>
		return ((uint32_t *)cmem)[f];
 80094dc:	f8de 400c 	ldr.w	r4, [lr, #12]
 80094e0:	e7e4      	b.n	80094ac <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 80094e2:	68c4      	ldr	r4, [r0, #12]
 80094e4:	f1c3 0220 	rsb	r2, r3, #32
 80094e8:	2301      	movs	r3, #1
 80094ea:	4093      	lsls	r3, r2
 80094ec:	425b      	negs	r3, r3

	if (bmask != 0U) {
 80094ee:	401c      	ands	r4, r3
 80094f0:	d101      	bne.n	80094f6 <alloc_chunk+0x8c>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 80094f2:	4620      	mov	r0, r4
 80094f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
 80094f6:	fa94 f2a4 	rbit	r2, r4
 80094fa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 80094fe:	1d13      	adds	r3, r2, #4
 8009500:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8009504:	4621      	mov	r1, r4
 8009506:	f7ff fdf9 	bl	80090fc <free_list_remove_bidx>
		return c;
 800950a:	e7f2      	b.n	80094f2 <alloc_chunk+0x88>

0800950c <sys_heap_free>:
	if (mem == NULL) {
 800950c:	b1c1      	cbz	r1, 8009540 <sys_heap_free+0x34>
{
 800950e:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
 8009510:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
 8009512:	4620      	mov	r0, r4
 8009514:	f7ff fef1 	bl	80092fa <mem_to_chunkid>
 8009518:	4601      	mov	r1, r0
	void *cmem = &buf[c];
 800951a:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
 800951e:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
 8009520:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009524:	d307      	bcc.n	8009536 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	f022 0201 	bic.w	r2, r2, #1
 800952c:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff ff40 	bl	80093b4 <free_chunk>
}
 8009534:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8009536:	885a      	ldrh	r2, [r3, #2]
 8009538:	f022 0201 	bic.w	r2, r2, #1
 800953c:	805a      	strh	r2, [r3, #2]
 800953e:	e7f6      	b.n	800952e <sys_heap_free+0x22>
 8009540:	4770      	bx	lr

08009542 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 8009542:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 8009544:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 8009546:	2900      	cmp	r1, #0
 8009548:	d03e      	beq.n	80095c8 <sys_heap_alloc+0x86>
 800954a:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 800954c:	68aa      	ldr	r2, [r5, #8]
 800954e:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
 8009552:	d93b      	bls.n	80095cc <sys_heap_alloc+0x8a>
	return big_heap(h) ? 8 : 4;
 8009554:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009558:	d322      	bcc.n	80095a0 <sys_heap_alloc+0x5e>
 800955a:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 800955c:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800955e:	3407      	adds	r4, #7
 8009560:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
 8009562:	4621      	mov	r1, r4
 8009564:	4628      	mov	r0, r5
 8009566:	f7ff ff80 	bl	800946a <alloc_chunk>
	if (c == 0U) {
 800956a:	4606      	mov	r6, r0
 800956c:	b380      	cbz	r0, 80095d0 <sys_heap_alloc+0x8e>
	void *cmem = &buf[c];
 800956e:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009572:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
 8009574:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009578:	d314      	bcc.n	80095a4 <sys_heap_alloc+0x62>
		return ((uint32_t *)cmem)[f];
 800957a:	685b      	ldr	r3, [r3, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
 800957c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8009580:	d312      	bcc.n	80095a8 <sys_heap_alloc+0x66>
	void *cmem = &buf[c];
 8009582:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009586:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
 8009588:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800958c:	d317      	bcc.n	80095be <sys_heap_alloc+0x7c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	f042 0201 	orr.w	r2, r2, #1
 8009594:	605a      	str	r2, [r3, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	f7ff fda4 	bl	80090e6 <chunk_mem>
}
 800959e:	bd70      	pop	{r4, r5, r6, pc}
	return big_heap(h) ? 8 : 4;
 80095a0:	2404      	movs	r4, #4
 80095a2:	e7db      	b.n	800955c <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
 80095a4:	885b      	ldrh	r3, [r3, #2]
 80095a6:	e7e9      	b.n	800957c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
 80095a8:	4434      	add	r4, r6
 80095aa:	4622      	mov	r2, r4
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7ff fe2d 	bl	800920e <split_chunks>
		free_list_add(h, c + chunk_sz);
 80095b4:	4621      	mov	r1, r4
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7ff fed3 	bl	8009362 <free_list_add>
 80095bc:	e7e1      	b.n	8009582 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80095be:	885a      	ldrh	r2, [r3, #2]
 80095c0:	f042 0201 	orr.w	r2, r2, #1
 80095c4:	805a      	strh	r2, [r3, #2]
 80095c6:	e7e6      	b.n	8009596 <sys_heap_alloc+0x54>
		return NULL;
 80095c8:	2000      	movs	r0, #0
 80095ca:	e7e8      	b.n	800959e <sys_heap_alloc+0x5c>
 80095cc:	2000      	movs	r0, #0
 80095ce:	e7e6      	b.n	800959e <sys_heap_alloc+0x5c>
		return NULL;
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7e4      	b.n	800959e <sys_heap_alloc+0x5c>

080095d4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	460d      	mov	r5, r1
 80095da:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
 80095dc:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 80095de:	424b      	negs	r3, r1
 80095e0:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
 80095e4:	ea31 0303 	bics.w	r3, r1, r3
 80095e8:	d052      	beq.n	8009690 <sys_heap_aligned_alloc+0xbc>
		align -= rew;
 80095ea:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
 80095ee:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
 80095f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f4:	d34a      	bcc.n	800968c <sys_heap_aligned_alloc+0xb8>
 80095f6:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
 80095f8:	4598      	cmp	r8, r3
 80095fa:	d200      	bcs.n	80095fe <sys_heap_aligned_alloc+0x2a>
 80095fc:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 80095fe:	2c00      	cmp	r4, #0
 8009600:	d076      	beq.n	80096f0 <sys_heap_aligned_alloc+0x11c>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 8009602:	68b2      	ldr	r2, [r6, #8]
 8009604:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 8009608:	d974      	bls.n	80096f4 <sys_heap_aligned_alloc+0x120>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 800960a:	1929      	adds	r1, r5, r4
 800960c:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
 800960e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009612:	d34e      	bcc.n	80096b2 <sys_heap_aligned_alloc+0xde>
 8009614:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 8009616:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009618:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 800961a:	08c9      	lsrs	r1, r1, #3
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff ff24 	bl	800946a <alloc_chunk>

	if (c0 == 0) {
 8009622:	4607      	mov	r7, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d067      	beq.n	80096f8 <sys_heap_aligned_alloc+0x124>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
 8009628:	4601      	mov	r1, r0
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff fd5b 	bl	80090e6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 8009630:	4440      	add	r0, r8
 8009632:	4428      	add	r0, r5
 8009634:	3801      	subs	r0, #1
 8009636:	426d      	negs	r5, r5
 8009638:	4005      	ands	r5, r0
 800963a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 800963e:	442c      	add	r4, r5
 8009640:	3407      	adds	r4, #7
 8009642:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
 8009646:	4629      	mov	r1, r5
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff fe56 	bl	80092fa <mem_to_chunkid>
 800964e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
 8009650:	1ba4      	subs	r4, r4, r6
 8009652:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
 8009654:	4287      	cmp	r7, r0
 8009656:	d32e      	bcc.n	80096b6 <sys_heap_aligned_alloc+0xe2>
	void *cmem = &buf[c];
 8009658:	eb06 02c8 	add.w	r2, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
 800965c:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
 800965e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009662:	d332      	bcc.n	80096ca <sys_heap_aligned_alloc+0xf6>
		return ((uint32_t *)cmem)[f];
 8009664:	6853      	ldr	r3, [r2, #4]
	return c + chunk_size(h, c);
 8009666:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
 800966a:	429c      	cmp	r4, r3
 800966c:	d32f      	bcc.n	80096ce <sys_heap_aligned_alloc+0xfa>
	void *cmem = &buf[c];
 800966e:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009672:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009678:	d333      	bcc.n	80096e2 <sys_heap_aligned_alloc+0x10e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800967a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	f8c8 3004 	str.w	r3, [r8, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 8009686:	4628      	mov	r0, r5
 8009688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
 800968c:	2304      	movs	r3, #4
 800968e:	e7b3      	b.n	80095f8 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
 8009690:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
 8009692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009696:	d305      	bcc.n	80096a4 <sys_heap_aligned_alloc+0xd0>
 8009698:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 800969a:	429d      	cmp	r5, r3
 800969c:	d904      	bls.n	80096a8 <sys_heap_aligned_alloc+0xd4>
		rew = 0;
 800969e:	f04f 0800 	mov.w	r8, #0
 80096a2:	e7ac      	b.n	80095fe <sys_heap_aligned_alloc+0x2a>
 80096a4:	2304      	movs	r3, #4
 80096a6:	e7f8      	b.n	800969a <sys_heap_aligned_alloc+0xc6>
			return sys_heap_alloc(heap, bytes);
 80096a8:	4621      	mov	r1, r4
 80096aa:	f7ff ff4a 	bl	8009542 <sys_heap_alloc>
 80096ae:	4605      	mov	r5, r0
 80096b0:	e7e9      	b.n	8009686 <sys_heap_aligned_alloc+0xb2>
 80096b2:	2304      	movs	r3, #4
 80096b4:	e7af      	b.n	8009616 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
 80096b6:	4602      	mov	r2, r0
 80096b8:	4639      	mov	r1, r7
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff fda7 	bl	800920e <split_chunks>
		free_list_add(h, c0);
 80096c0:	4639      	mov	r1, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff fe4d 	bl	8009362 <free_list_add>
 80096c8:	e7c6      	b.n	8009658 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
 80096ca:	8853      	ldrh	r3, [r2, #2]
 80096cc:	e7cb      	b.n	8009666 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
 80096ce:	4622      	mov	r2, r4
 80096d0:	4641      	mov	r1, r8
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff fd9b 	bl	800920e <split_chunks>
		free_list_add(h, c_end);
 80096d8:	4621      	mov	r1, r4
 80096da:	4630      	mov	r0, r6
 80096dc:	f7ff fe41 	bl	8009362 <free_list_add>
 80096e0:	e7c5      	b.n	800966e <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80096e2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80096e6:	f043 0301 	orr.w	r3, r3, #1
 80096ea:	f8a8 3002 	strh.w	r3, [r8, #2]
}
 80096ee:	e7ca      	b.n	8009686 <sys_heap_aligned_alloc+0xb2>
		return NULL;
 80096f0:	2500      	movs	r5, #0
 80096f2:	e7c8      	b.n	8009686 <sys_heap_aligned_alloc+0xb2>
 80096f4:	2500      	movs	r5, #0
 80096f6:	e7c6      	b.n	8009686 <sys_heap_aligned_alloc+0xb2>
		return NULL;
 80096f8:	2500      	movs	r5, #0
 80096fa:	e7c4      	b.n	8009686 <sys_heap_aligned_alloc+0xb2>

080096fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 8009700:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009704:	d324      	bcc.n	8009750 <sys_heap_init+0x54>
 8009706:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800970a:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800970e:	1dc8      	adds	r0, r1, #7
 8009710:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8009714:	448c      	add	ip, r1
 8009716:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800971a:	ebac 0c00 	sub.w	ip, ip, r0
 800971e:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8009722:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 8009724:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 800972a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800972e:	d312      	bcc.n	8009756 <sys_heap_init+0x5a>
 8009730:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009732:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 8009734:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 8009738:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800973a:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800973e:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8009742:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8009746:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009748:	1dde      	adds	r6, r3, #7
 800974a:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800974c:	2300      	movs	r3, #0
 800974e:	e009      	b.n	8009764 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 8009750:	f04f 0c04 	mov.w	ip, #4
 8009754:	e7d9      	b.n	800970a <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 8009756:	2304      	movs	r3, #4
 8009758:	e7eb      	b.n	8009732 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 800975a:	1d1a      	adds	r2, r3, #4
 800975c:	2400      	movs	r4, #0
 800975e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 8009762:	3301      	adds	r3, #1
 8009764:	4573      	cmp	r3, lr
 8009766:	dbf8      	blt.n	800975a <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8009768:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 800976a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800976e:	d336      	bcc.n	80097de <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 8009770:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 8009772:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009776:	d334      	bcc.n	80097e2 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 8009778:	2300      	movs	r3, #0
 800977a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 800977c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009780:	d332      	bcc.n	80097e8 <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 8009782:	6843      	ldr	r3, [r0, #4]
 8009784:	f043 0301 	orr.w	r3, r3, #1
 8009788:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800978a:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800978c:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 800978e:	f026 0307 	bic.w	r3, r6, #7
 8009792:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 8009794:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009798:	d32b      	bcc.n	80097f2 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 800979a:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 800979c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800979e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80097a2:	d328      	bcc.n	80097f6 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 80097a4:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 80097a6:	f02c 0307 	bic.w	r3, ip, #7
 80097aa:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 80097ac:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80097ae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80097b2:	d322      	bcc.n	80097fa <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 80097b4:	2400      	movs	r4, #0
 80097b6:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 80097ba:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80097bc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80097c0:	d31f      	bcc.n	8009802 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 80097c2:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 80097c4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 80097c8:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 80097ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80097ce:	d31a      	bcc.n	8009806 <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	f042 0201 	orr.w	r2, r2, #1
 80097d6:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 80097d8:	f7ff fdc3 	bl	8009362 <free_list_add>
}
 80097dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 80097de:	8043      	strh	r3, [r0, #2]
 80097e0:	e7c7      	b.n	8009772 <sys_heap_init+0x76>
 80097e2:	2300      	movs	r3, #0
 80097e4:	8003      	strh	r3, [r0, #0]
 80097e6:	e7c9      	b.n	800977c <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80097e8:	8843      	ldrh	r3, [r0, #2]
 80097ea:	f043 0301 	orr.w	r3, r3, #1
 80097ee:	8043      	strh	r3, [r0, #2]
 80097f0:	e7cb      	b.n	800978a <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 80097f2:	8067      	strh	r7, [r4, #2]
 80097f4:	e7d2      	b.n	800979c <sys_heap_init+0xa0>
 80097f6:	52c1      	strh	r1, [r0, r3]
 80097f8:	e7d5      	b.n	80097a6 <sys_heap_init+0xaa>
 80097fa:	2400      	movs	r4, #0
 80097fc:	f8ac 4002 	strh.w	r4, [ip, #2]
 8009800:	e7db      	b.n	80097ba <sys_heap_init+0xbe>
 8009802:	52c2      	strh	r2, [r0, r3]
 8009804:	e7de      	b.n	80097c4 <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8009806:	885a      	ldrh	r2, [r3, #2]
 8009808:	f042 0201 	orr.w	r2, r2, #1
 800980c:	805a      	strh	r2, [r3, #2]
 800980e:	e7e3      	b.n	80097d8 <sys_heap_init+0xdc>

08009810 <outs>:
{
 8009810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009814:	4607      	mov	r7, r0
 8009816:	460e      	mov	r6, r1
 8009818:	4614      	mov	r4, r2
 800981a:	4698      	mov	r8, r3
	size_t count = 0;
 800981c:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800981e:	e006      	b.n	800982e <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 8009820:	4631      	mov	r1, r6
 8009822:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009826:	47b8      	blx	r7
		if (rc < 0) {
 8009828:	2800      	cmp	r0, #0
 800982a:	db09      	blt.n	8009840 <outs+0x30>
		++count;
 800982c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800982e:	4544      	cmp	r4, r8
 8009830:	d3f6      	bcc.n	8009820 <outs+0x10>
 8009832:	f1b8 0f00 	cmp.w	r8, #0
 8009836:	d102      	bne.n	800983e <outs+0x2e>
 8009838:	7823      	ldrb	r3, [r4, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f0      	bne.n	8009820 <outs+0x10>
	return (int)count;
 800983e:	4628      	mov	r0, r5
}
 8009840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009844 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8009844:	4770      	bx	lr

08009846 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8009846:	2000      	movs	r0, #0
 8009848:	4770      	bx	lr

0800984a <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800984a:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800984c:	f7f9 f820 	bl	8002890 <__do_global_ctors_aux>
	__do_init_array_aux();
 8009850:	f7f9 f810 	bl	8002874 <__do_init_array_aux>
}
 8009854:	bd08      	pop	{r3, pc}

08009856 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8009856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8009858:	b329      	cbz	r1, 80098a6 <stm32_dt_pinctrl_configure+0x50>
 800985a:	4606      	mov	r6, r0
 800985c:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 800985e:	2400      	movs	r4, #0
	uint32_t func = 0;
 8009860:	4625      	mov	r5, r4
 8009862:	e00f      	b.n	8009884 <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8009864:	b2d3      	uxtb	r3, r2
 8009866:	2b10      	cmp	r3, #16
 8009868:	d019      	beq.n	800989e <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800986a:	0b13      	lsrs	r3, r2, #12
 800986c:	011b      	lsls	r3, r3, #4
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	4629      	mov	r1, r5
 8009878:	4318      	orrs	r0, r3
 800987a:	f7f9 f819 	bl	80028b0 <stm32_pin_configure>
		if (ret != 0) {
 800987e:	4603      	mov	r3, r0
 8009880:	b990      	cbnz	r0, 80098a8 <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 8009882:	3401      	adds	r4, #1
 8009884:	42bc      	cmp	r4, r7
 8009886:	d20c      	bcs.n	80098a2 <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 8009888:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800988c:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8009890:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8009894:	d1e6      	bne.n	8009864 <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8009896:	685d      	ldr	r5, [r3, #4]
 8009898:	f045 0520 	orr.w	r5, r5, #32
 800989c:	e7e5      	b.n	800986a <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800989e:	2530      	movs	r5, #48	; 0x30
 80098a0:	e7e3      	b.n	800986a <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	e000      	b.n	80098a8 <stm32_dt_pinctrl_configure+0x52>
		return 0;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098ac <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80098ac:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80098ae:	f001 f8ff 	bl	800aab0 <z_fatal_error>
}
 80098b2:	bd08      	pop	{r3, pc}

080098b4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80098b4:	b508      	push	{r3, lr}
 80098b6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80098b8:	6800      	ldr	r0, [r0, #0]
 80098ba:	f7ff fff7 	bl	80098ac <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 80098be:	bd08      	pop	{r3, pc}

080098c0 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 80098c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80098c2:	2100      	movs	r1, #0
 80098c4:	2001      	movs	r0, #1
 80098c6:	f7ff fff1 	bl	80098ac <z_arm_fatal_error>
}
 80098ca:	bd08      	pop	{r3, pc}

080098cc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80098cc:	b508      	push	{r3, lr}
	handler();
 80098ce:	f7f9 f84d 	bl	800296c <z_SysNmiOnReset>
	z_arm_int_exit();
 80098d2:	f7f9 f937 	bl	8002b44 <z_arm_exc_exit>
}
 80098d6:	bd08      	pop	{r3, pc}

080098d8 <memory_fault_recoverable>:
}
 80098d8:	2000      	movs	r0, #0
 80098da:	4770      	bx	lr

080098dc <debug_monitor>:
	*recoverable = false;
 80098dc:	2300      	movs	r3, #0
 80098de:	700b      	strb	r3, [r1, #0]
}
 80098e0:	4770      	bx	lr

080098e2 <fault_handle>:
{
 80098e2:	b508      	push	{r3, lr}
	*recoverable = false;
 80098e4:	2300      	movs	r3, #0
 80098e6:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 80098e8:	1ecb      	subs	r3, r1, #3
 80098ea:	2b09      	cmp	r3, #9
 80098ec:	d81a      	bhi.n	8009924 <fault_handle+0x42>
 80098ee:	e8df f003 	tbb	[pc, r3]
 80098f2:	0905      	.short	0x0905
 80098f4:	1919110d 	.word	0x1919110d
 80098f8:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 80098fc:	4611      	mov	r1, r2
 80098fe:	f7f9 f9b1 	bl	8002c64 <hard_fault>
		break;
 8009902:	e010      	b.n	8009926 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
 8009904:	2100      	movs	r1, #0
 8009906:	f7f9 f967 	bl	8002bd8 <mem_manage_fault>
		break;
 800990a:	e00c      	b.n	8009926 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
 800990c:	2100      	movs	r1, #0
 800990e:	f7f9 f927 	bl	8002b60 <bus_fault>
		break;
 8009912:	e008      	b.n	8009926 <fault_handle+0x44>
		reason = usage_fault(esf);
 8009914:	f7f9 f94e 	bl	8002bb4 <usage_fault>
		break;
 8009918:	e005      	b.n	8009926 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
 800991a:	4611      	mov	r1, r2
 800991c:	f7ff ffde 	bl	80098dc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8009920:	2000      	movs	r0, #0
		break;
 8009922:	e000      	b.n	8009926 <fault_handle+0x44>
	switch (fault) {
 8009924:	2000      	movs	r0, #0
}
 8009926:	bd08      	pop	{r3, pc}

08009928 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 8009928:	6843      	ldr	r3, [r0, #4]
 800992a:	1e5a      	subs	r2, r3, #1
		&&
 800992c:	4213      	tst	r3, r2
 800992e:	d106      	bne.n	800993e <mpu_partition_is_valid+0x16>
		&&
 8009930:	2b1f      	cmp	r3, #31
 8009932:	d906      	bls.n	8009942 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 8009934:	6803      	ldr	r3, [r0, #0]
		&&
 8009936:	421a      	tst	r2, r3
 8009938:	d005      	beq.n	8009946 <mpu_partition_is_valid+0x1e>
 800993a:	2000      	movs	r0, #0
 800993c:	4770      	bx	lr
 800993e:	2000      	movs	r0, #0
 8009940:	4770      	bx	lr
 8009942:	2000      	movs	r0, #0
 8009944:	4770      	bx	lr
 8009946:	2001      	movs	r0, #1
}
 8009948:	4770      	bx	lr

0800994a <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
 800994a:	2807      	cmp	r0, #7
 800994c:	d805      	bhi.n	800995a <region_allocate_and_init+0x10>
{
 800994e:	b510      	push	{r4, lr}
 8009950:	4604      	mov	r4, r0
	region_init(index, region_conf);
 8009952:	f7f9 fa8f 	bl	8002e74 <region_init>
	return index;
 8009956:	4620      	mov	r0, r4
}
 8009958:	bd10      	pop	{r4, pc}
		return -EINVAL;
 800995a:	f06f 0015 	mvn.w	r0, #21
}
 800995e:	4770      	bx	lr

08009960 <mpu_configure_region>:
{
 8009960:	b500      	push	{lr}
 8009962:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 8009964:	680b      	ldr	r3, [r1, #0]
 8009966:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8009968:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800996a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800996c:	2b20      	cmp	r3, #32
 800996e:	d912      	bls.n	8009996 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	d811      	bhi.n	800999a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8009976:	3b01      	subs	r3, #1
 8009978:	fab3 f383 	clz	r3, r3
 800997c:	f1c3 031f 	rsb	r3, r3, #31
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8009986:	4313      	orrs	r3, r2
 8009988:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800998a:	a901      	add	r1, sp, #4
 800998c:	f7ff ffdd 	bl	800994a <region_allocate_and_init>
}
 8009990:	b005      	add	sp, #20
 8009992:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 8009996:	2308      	movs	r3, #8
 8009998:	e7f5      	b.n	8009986 <mpu_configure_region+0x26>
		return REGION_4G;
 800999a:	233e      	movs	r3, #62	; 0x3e
 800999c:	e7f3      	b.n	8009986 <mpu_configure_region+0x26>

0800999e <mpu_configure_regions>:
{
 800999e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a2:	4680      	mov	r8, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
 80099a8:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
 80099aa:	2500      	movs	r5, #0
 80099ac:	e009      	b.n	80099c2 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80099ae:	4621      	mov	r1, r4
 80099b0:	b2f0      	uxtb	r0, r6
 80099b2:	f7ff ffd5 	bl	8009960 <mpu_configure_region>
 80099b6:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
 80099b8:	f110 0f16 	cmn.w	r0, #22
 80099bc:	d014      	beq.n	80099e8 <mpu_configure_regions+0x4a>
		reg_index++;
 80099be:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 80099c0:	3501      	adds	r5, #1
 80099c2:	42bd      	cmp	r5, r7
 80099c4:	da10      	bge.n	80099e8 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 80099c6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80099ca:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80099ce:	6862      	ldr	r2, [r4, #4]
 80099d0:	2a00      	cmp	r2, #0
 80099d2:	d0f5      	beq.n	80099c0 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 80099d4:	f1b9 0f00 	cmp.w	r9, #0
 80099d8:	d0e9      	beq.n	80099ae <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 80099da:	4620      	mov	r0, r4
 80099dc:	f7ff ffa4 	bl	8009928 <mpu_partition_is_valid>
		if (do_sanity_check &&
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1e4      	bne.n	80099ae <mpu_configure_regions+0x10>
			return -EINVAL;
 80099e4:	f06f 0615 	mvn.w	r6, #21
}
 80099e8:	4630      	mov	r0, r6
 80099ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080099ee <arm_core_mpu_configure_static_mpu_regions>:
{
 80099ee:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 80099f0:	f7f9 fa54 	bl	8002e9c <mpu_configure_static_mpu_regions>
}
 80099f4:	bd08      	pop	{r3, pc}

080099f6 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 80099f6:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 80099f8:	f7f9 fa5a 	bl	8002eb0 <mpu_configure_dynamic_mpu_regions>
}
 80099fc:	bd08      	pop	{r3, pc}

080099fe <malloc_prepare>:
}
 80099fe:	2000      	movs	r0, #0
 8009a00:	4770      	bx	lr

08009a02 <_stdout_hook_default>:
}
 8009a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a06:	4770      	bx	lr

08009a08 <_stdin_hook_default>:
}
 8009a08:	2000      	movs	r0, #0
 8009a0a:	4770      	bx	lr

08009a0c <_read>:
{
 8009a0c:	b508      	push	{r3, lr}
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 8009a12:	f7f9 faa5 	bl	8002f60 <z_impl_zephyr_read_stdin>
}
 8009a16:	bd08      	pop	{r3, pc}

08009a18 <_write>:
{
 8009a18:	b508      	push	{r3, lr}
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8009a1e:	f7f9 fab5 	bl	8002f8c <z_impl_zephyr_write_stdout>
}
 8009a22:	bd08      	pop	{r3, pc}

08009a24 <_close>:
}
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a28:	4770      	bx	lr

08009a2a <_lseek>:
}
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	4770      	bx	lr

08009a2e <_isatty>:
}
 8009a2e:	2802      	cmp	r0, #2
 8009a30:	bfcc      	ite	gt
 8009a32:	2000      	movgt	r0, #0
 8009a34:	2001      	movle	r0, #1
 8009a36:	4770      	bx	lr

08009a38 <_kill>:
}
 8009a38:	2000      	movs	r0, #0
 8009a3a:	4770      	bx	lr

08009a3c <_getpid>:
}
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	4770      	bx	lr

08009a40 <_fstat>:
	st->st_mode = S_IFCHR;
 8009a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a44:	604b      	str	r3, [r1, #4]
}
 8009a46:	2000      	movs	r0, #0
 8009a48:	4770      	bx	lr

08009a4a <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 8009a4e:	2014      	movs	r0, #20
 8009a50:	f7fd ff50 	bl	80078f4 <malloc>
 8009a54:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 8009a56:	f001 f8b0 	bl	800abba <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 8009a5a:	bd10      	pop	{r4, pc}

08009a5c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8009a5c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 8009a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a66:	f7fc fb55 	bl	8006114 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 8009a6a:	bd08      	pop	{r3, pc}

08009a6c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8009a6c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 8009a6e:	f7fc fbdb 	bl	8006228 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 8009a72:	bd08      	pop	{r3, pc}

08009a74 <__stm32_exti_isr_0>:
{
 8009a74:	b508      	push	{r3, lr}
 8009a76:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 8009a78:	2101      	movs	r1, #1
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f7f9 fac0 	bl	8003000 <__stm32_exti_isr>
}
 8009a80:	bd08      	pop	{r3, pc}

08009a82 <__stm32_exti_isr_1>:
{
 8009a82:	b508      	push	{r3, lr}
 8009a84:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 8009a86:	2102      	movs	r1, #2
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7f9 fab9 	bl	8003000 <__stm32_exti_isr>
}
 8009a8e:	bd08      	pop	{r3, pc}

08009a90 <__stm32_exti_isr_2>:
{
 8009a90:	b508      	push	{r3, lr}
 8009a92:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8009a94:	2103      	movs	r1, #3
 8009a96:	2002      	movs	r0, #2
 8009a98:	f7f9 fab2 	bl	8003000 <__stm32_exti_isr>
}
 8009a9c:	bd08      	pop	{r3, pc}

08009a9e <__stm32_exti_isr_3>:
{
 8009a9e:	b508      	push	{r3, lr}
 8009aa0:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	2003      	movs	r0, #3
 8009aa6:	f7f9 faab 	bl	8003000 <__stm32_exti_isr>
}
 8009aaa:	bd08      	pop	{r3, pc}

08009aac <__stm32_exti_isr_4>:
{
 8009aac:	b508      	push	{r3, lr}
 8009aae:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8009ab0:	2105      	movs	r1, #5
 8009ab2:	2004      	movs	r0, #4
 8009ab4:	f7f9 faa4 	bl	8003000 <__stm32_exti_isr>
}
 8009ab8:	bd08      	pop	{r3, pc}

08009aba <__stm32_exti_isr_9_5>:
{
 8009aba:	b508      	push	{r3, lr}
 8009abc:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 8009abe:	210a      	movs	r1, #10
 8009ac0:	2005      	movs	r0, #5
 8009ac2:	f7f9 fa9d 	bl	8003000 <__stm32_exti_isr>
}
 8009ac6:	bd08      	pop	{r3, pc}

08009ac8 <__stm32_exti_isr_15_10>:
{
 8009ac8:	b508      	push	{r3, lr}
 8009aca:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 8009acc:	2110      	movs	r1, #16
 8009ace:	200a      	movs	r0, #10
 8009ad0:	f7f9 fa96 	bl	8003000 <__stm32_exti_isr>
}
 8009ad4:	bd08      	pop	{r3, pc}

08009ad6 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 8009ad6:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4611      	mov	r1, r2
 8009adc:	2006      	movs	r0, #6
 8009ade:	f7f8 ff2f 	bl	8002940 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	2007      	movs	r0, #7
 8009ae8:	f7f8 ff2a 	bl	8002940 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8009aec:	2200      	movs	r2, #0
 8009aee:	4611      	mov	r1, r2
 8009af0:	2008      	movs	r0, #8
 8009af2:	f7f8 ff25 	bl	8002940 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8009af6:	2200      	movs	r2, #0
 8009af8:	4611      	mov	r1, r2
 8009afa:	2009      	movs	r0, #9
 8009afc:	f7f8 ff20 	bl	8002940 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8009b00:	2200      	movs	r2, #0
 8009b02:	4611      	mov	r1, r2
 8009b04:	200a      	movs	r0, #10
 8009b06:	f7f8 ff1b 	bl	8002940 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	2017      	movs	r0, #23
 8009b10:	f7f8 ff16 	bl	8002940 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8009b14:	2200      	movs	r2, #0
 8009b16:	4611      	mov	r1, r2
 8009b18:	2028      	movs	r0, #40	; 0x28
 8009b1a:	f7f8 ff11 	bl	8002940 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 8009b1e:	bd08      	pop	{r3, pc}

08009b20 <stm32_exti_init>:
{
 8009b20:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 8009b22:	f7ff ffd8 	bl	8009ad6 <__stm32_exti_connect_irqs>
}
 8009b26:	2000      	movs	r0, #0
 8009b28:	bd08      	pop	{r3, pc}

08009b2a <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8009b2e:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8009b30:	6083      	str	r3, [r0, #8]
}
 8009b32:	4770      	bx	lr

08009b34 <get_bus_clock>:
}
 8009b34:	fbb0 f0f1 	udiv	r0, r0, r1
 8009b38:	4770      	bx	lr

08009b3a <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 8009b3e:	2314      	movs	r3, #20
 8009b40:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 8009b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b46:	6083      	str	r3, [r0, #8]
}
 8009b48:	4770      	bx	lr

08009b4a <gpio_stm32_isr>:
{
 8009b4a:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8009b4c:	684e      	ldr	r6, [r1, #4]
 8009b4e:	2501      	movs	r5, #1
 8009b50:	4085      	lsls	r5, r0
	return list->head;
 8009b52:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8009b54:	b119      	cbz	r1, 8009b5e <gpio_stm32_isr+0x14>
 8009b56:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 8009b58:	b149      	cbz	r1, 8009b6e <gpio_stm32_isr+0x24>
	return node->next;
 8009b5a:	680c      	ldr	r4, [r1, #0]
 8009b5c:	e007      	b.n	8009b6e <gpio_stm32_isr+0x24>
 8009b5e:	460c      	mov	r4, r1
 8009b60:	e005      	b.n	8009b6e <gpio_stm32_isr+0x24>
 8009b62:	b164      	cbz	r4, 8009b7e <gpio_stm32_isr+0x34>
 8009b64:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8009b66:	b104      	cbz	r4, 8009b6a <gpio_stm32_isr+0x20>
	return node->next;
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	461c      	mov	r4, r3
 8009b6e:	b141      	cbz	r1, 8009b82 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 8009b70:	688a      	ldr	r2, [r1, #8]
 8009b72:	402a      	ands	r2, r5
 8009b74:	d0f5      	beq.n	8009b62 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8009b76:	684b      	ldr	r3, [r1, #4]
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4798      	blx	r3
 8009b7c:	e7f1      	b.n	8009b62 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8009b7e:	4623      	mov	r3, r4
 8009b80:	e7f3      	b.n	8009b6a <gpio_stm32_isr+0x20>
}
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 8009b84:	f410 7f00 	tst.w	r0, #512	; 0x200
 8009b88:	d01b      	beq.n	8009bc2 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8009b8e:	f010 0f02 	tst.w	r0, #2
 8009b92:	d004      	beq.n	8009b9e <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8009b94:	f010 0f04 	tst.w	r0, #4
 8009b98:	d02c      	beq.n	8009bf4 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8009b9a:	2350      	movs	r3, #80	; 0x50
 8009b9c:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8009b9e:	f010 0310 	ands.w	r3, r0, #16
 8009ba2:	d005      	beq.n	8009bb0 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8009ba4:	680b      	ldr	r3, [r1, #0]
 8009ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009baa:	600b      	str	r3, [r1, #0]
	return 0;
 8009bac:	2000      	movs	r0, #0
 8009bae:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8009bb0:	f010 0020 	ands.w	r0, r0, #32
 8009bb4:	d020      	beq.n	8009bf8 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8009bb6:	680a      	ldr	r2, [r1, #0]
 8009bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bbc:	600a      	str	r2, [r1, #0]
	return 0;
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 8009bc2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009bc6:	d011      	beq.n	8009bec <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8009bcc:	f010 0310 	ands.w	r3, r0, #16
 8009bd0:	d004      	beq.n	8009bdc <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8009bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bd6:	600b      	str	r3, [r1, #0]
	return 0;
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8009bdc:	f010 0020 	ands.w	r0, r0, #32
 8009be0:	d00a      	beq.n	8009bf8 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8009be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009be6:	600a      	str	r2, [r1, #0]
	return 0;
 8009be8:	4618      	mov	r0, r3
 8009bea:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8009bec:	2330      	movs	r3, #48	; 0x30
 8009bee:	600b      	str	r3, [r1, #0]
	return 0;
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	4770      	bx	lr
				return -ENOTSUP;
 8009bf4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8009bf8:	4770      	bx	lr

08009bfa <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009bfa:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009bfc:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8009bfe:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8009c00:	600b      	str	r3, [r1, #0]
}
 8009c02:	2000      	movs	r0, #0
 8009c04:	4770      	bx	lr

08009c06 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009c06:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009c08:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8009c0a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8009c0c:	4042      	eors	r2, r0
 8009c0e:	400a      	ands	r2, r1
 8009c10:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8009c12:	615a      	str	r2, [r3, #20]
}
 8009c14:	2000      	movs	r0, #0
 8009c16:	4770      	bx	lr

08009c18 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009c18:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009c1a:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8009c1c:	6199      	str	r1, [r3, #24]
}
 8009c1e:	2000      	movs	r0, #0
 8009c20:	4770      	bx	lr

08009c22 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009c22:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009c24:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8009c26:	6299      	str	r1, [r3, #40]	; 0x28
}
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4770      	bx	lr

08009c2c <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009c2c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009c2e:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8009c30:	6953      	ldr	r3, [r2, #20]
 8009c32:	404b      	eors	r3, r1
 8009c34:	6153      	str	r3, [r2, #20]
}
 8009c36:	2000      	movs	r0, #0
 8009c38:	4770      	bx	lr

08009c3a <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8009c3a:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 8009c3c:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 8009c3e:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 8009c42:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8009c44:	b1fb      	cbz	r3, 8009c86 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009c46:	2000      	movs	r0, #0
 8009c48:	e00d      	b.n	8009c66 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 8009c4a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8009c4c:	60a3      	str	r3, [r4, #8]
	return list->tail;
 8009c4e:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8009c52:	4281      	cmp	r1, r0
 8009c54:	d112      	bne.n	8009c7c <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8009c56:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8009c5a:	e00f      	b.n	8009c7c <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8009c5c:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8009c60:	e00c      	b.n	8009c7c <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009c62:	4618      	mov	r0, r3
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	b163      	cbz	r3, 8009c82 <gpio_stm32_manage_callback+0x48>
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	d1fa      	bne.n	8009c62 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d0ec      	beq.n	8009c4a <gpio_stm32_manage_callback+0x10>
	return node->next;
 8009c70:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 8009c72:	6003      	str	r3, [r0, #0]
	return list->tail;
 8009c74:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8009c78:	4299      	cmp	r1, r3
 8009c7a:	d0ef      	beq.n	8009c5c <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009c80:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8009c82:	b903      	cbnz	r3, 8009c86 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 8009c84:	b162      	cbz	r2, 8009ca0 <gpio_stm32_manage_callback+0x66>
	if (set) {
 8009c86:	b172      	cbz	r2, 8009ca6 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 8009c88:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 8009c8a:	600b      	str	r3, [r1, #0]
	list->head = node;
 8009c8c:	60a1      	str	r1, [r4, #8]
	return list->tail;
 8009c8e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 8009c92:	b10b      	cbz	r3, 8009c98 <gpio_stm32_manage_callback+0x5e>
	return 0;
 8009c94:	2000      	movs	r0, #0
 8009c96:	e007      	b.n	8009ca8 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 8009c98:	f8cc 1004 	str.w	r1, [ip, #4]
 8009c9c:	2000      	movs	r0, #0
}
 8009c9e:	e003      	b.n	8009ca8 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 8009ca0:	f06f 0015 	mvn.w	r0, #21
 8009ca4:	e000      	b.n	8009ca8 <gpio_stm32_manage_callback+0x6e>
	return 0;
 8009ca6:	2000      	movs	r0, #0
}
 8009ca8:	bc10      	pop	{r4}
 8009caa:	4770      	bx	lr

08009cac <gpio_stm32_configure>:
{
 8009cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8009cae:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009cb0:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8009cb6:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8009cba:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009cbe:	6865      	ldr	r5, [r4, #4]
 8009cc0:	ea25 0500 	bic.w	r5, r5, r0
 8009cc4:	408e      	lsls	r6, r1
 8009cc6:	4335      	orrs	r5, r6
 8009cc8:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8009cca:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009cce:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	d04a      	beq.n	8009d6e <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 8009cd8:	fab5 f585 	clz	r5, r5
 8009cdc:	006d      	lsls	r5, r5, #1
 8009cde:	2703      	movs	r7, #3
 8009ce0:	fa07 f505 	lsl.w	r5, r7, r5
 8009ce4:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ce8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	d040      	beq.n	8009d72 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 8009cf0:	fab5 f585 	clz	r5, r5
 8009cf4:	006d      	lsls	r5, r5, #1
 8009cf6:	fa0e f505 	lsl.w	r5, lr, r5
 8009cfa:	4335      	orrs	r5, r6
 8009cfc:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8009cfe:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009d02:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d04:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009d08:	b3ad      	cbz	r5, 8009d76 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 8009d0a:	fab5 f585 	clz	r5, r5
 8009d0e:	006d      	lsls	r5, r5, #1
 8009d10:	f04f 0e03 	mov.w	lr, #3
 8009d14:	fa0e f505 	lsl.w	r5, lr, r5
 8009d18:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009d20:	b35d      	cbz	r5, 8009d7a <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 8009d22:	fab5 f585 	clz	r5, r5
 8009d26:	006d      	lsls	r5, r5, #1
 8009d28:	fa02 f505 	lsl.w	r5, r2, r5
 8009d2c:	ea4e 0505 	orr.w	r5, lr, r5
 8009d30:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8009d32:	f1bc 0f20 	cmp.w	ip, #32
 8009d36:	d022      	beq.n	8009d7e <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8009d38:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009d3c:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3e:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d052      	beq.n	8009dec <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 8009d46:	fab3 f383 	clz	r3, r3
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	2103      	movs	r1, #3
 8009d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d52:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d56:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d048      	beq.n	8009df0 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 8009d5e:	fab0 f080 	clz	r0, r0
 8009d62:	0040      	lsls	r0, r0, #1
 8009d64:	fa0c f000 	lsl.w	r0, ip, r0
 8009d68:	4318      	orrs	r0, r3
 8009d6a:	6020      	str	r0, [r4, #0]
}
 8009d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8009d6e:	2520      	movs	r5, #32
 8009d70:	e7b4      	b.n	8009cdc <gpio_stm32_configure+0x30>
 8009d72:	2520      	movs	r5, #32
 8009d74:	e7be      	b.n	8009cf4 <gpio_stm32_configure+0x48>
 8009d76:	2520      	movs	r5, #32
 8009d78:	e7c9      	b.n	8009d0e <gpio_stm32_configure+0x62>
 8009d7a:	2520      	movs	r5, #32
 8009d7c:	e7d3      	b.n	8009d26 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 8009d7e:	2907      	cmp	r1, #7
 8009d80:	dc19      	bgt.n	8009db6 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009d82:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d84:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8009d88:	b18a      	cbz	r2, 8009dae <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 8009d8a:	fab2 f282 	clz	r2, r2
 8009d8e:	0092      	lsls	r2, r2, #2
 8009d90:	250f      	movs	r5, #15
 8009d92:	fa05 f202 	lsl.w	r2, r5, r2
 8009d96:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d9a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8009d9e:	b142      	cbz	r2, 8009db2 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 8009da0:	fab2 f282 	clz	r2, r2
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	4093      	lsls	r3, r2
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6223      	str	r3, [r4, #32]
}
 8009dac:	e7c4      	b.n	8009d38 <gpio_stm32_configure+0x8c>
    return 32U;
 8009dae:	2220      	movs	r2, #32
 8009db0:	e7ed      	b.n	8009d8e <gpio_stm32_configure+0xe2>
 8009db2:	2220      	movs	r2, #32
 8009db4:	e7f6      	b.n	8009da4 <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009db6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009db8:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dba:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8009dbe:	b189      	cbz	r1, 8009de4 <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 8009dc0:	fab1 f181 	clz	r1, r1
 8009dc4:	0089      	lsls	r1, r1, #2
 8009dc6:	260f      	movs	r6, #15
 8009dc8:	fa06 f101 	lsl.w	r1, r6, r1
 8009dcc:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8009dd4:	b142      	cbz	r2, 8009de8 <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 8009dd6:	fab2 f282 	clz	r2, r2
 8009dda:	0092      	lsls	r2, r2, #2
 8009ddc:	4093      	lsls	r3, r2
 8009dde:	430b      	orrs	r3, r1
 8009de0:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009de2:	e7a9      	b.n	8009d38 <gpio_stm32_configure+0x8c>
    return 32U;
 8009de4:	2120      	movs	r1, #32
 8009de6:	e7ed      	b.n	8009dc4 <gpio_stm32_configure+0x118>
 8009de8:	2220      	movs	r2, #32
 8009dea:	e7f6      	b.n	8009dda <gpio_stm32_configure+0x12e>
 8009dec:	2320      	movs	r3, #32
 8009dee:	e7ac      	b.n	8009d4a <gpio_stm32_configure+0x9e>
 8009df0:	2020      	movs	r0, #32
 8009df2:	e7b6      	b.n	8009d62 <gpio_stm32_configure+0xb6>

08009df4 <gpio_stm32_config>:
{
 8009df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df6:	b083      	sub	sp, #12
 8009df8:	4607      	mov	r7, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 8009dfe:	a901      	add	r1, sp, #4
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7ff febf 	bl	8009b84 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8009e06:	4606      	mov	r6, r0
 8009e08:	b970      	cbnz	r0, 8009e28 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 8009e0a:	f414 7f00 	tst.w	r4, #512	; 0x200
 8009e0e:	d005      	beq.n	8009e1c <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8009e10:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8009e14:	d10b      	bne.n	8009e2e <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8009e16:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8009e1a:	d10e      	bne.n	8009e3a <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9a01      	ldr	r2, [sp, #4]
 8009e20:	4629      	mov	r1, r5
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7ff ff42 	bl	8009cac <gpio_stm32_configure>
}
 8009e28:	4630      	mov	r0, r6
 8009e2a:	b003      	add	sp, #12
 8009e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8009e2e:	2101      	movs	r1, #1
 8009e30:	40a9      	lsls	r1, r5
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7ff fef0 	bl	8009c18 <gpio_stm32_port_set_bits_raw>
 8009e38:	e7f0      	b.n	8009e1c <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	40a9      	lsls	r1, r5
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f7ff feef 	bl	8009c22 <gpio_stm32_port_clear_bits_raw>
 8009e44:	e7ea      	b.n	8009e1c <gpio_stm32_config+0x28>

08009e46 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8009e46:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 8009e48:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 8009e4a:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	f7f9 fb7d 	bl	800354c <gpio_stm32_clock_request>
#endif
}
 8009e52:	bd08      	pop	{r3, pc}

08009e54 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8009e54:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8009e56:	b91b      	cbnz	r3, 8009e60 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 8009e58:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009e5a:	b91b      	cbnz	r3, 8009e64 <spi_stm32_transfer_ongoing+0x10>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	4770      	bx	lr
 8009e60:	2001      	movs	r0, #1
 8009e62:	4770      	bx	lr
 8009e64:	2001      	movs	r0, #1
}
 8009e66:	4770      	bx	lr

08009e68 <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8009e68:	6883      	ldr	r3, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8009e6a:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8009e6e:	d101      	bne.n	8009e74 <spi_stm32_get_err+0xc>
	return 0;
 8009e70:	2000      	movs	r0, #0
 8009e72:	4770      	bx	lr
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8009e74:	6883      	ldr	r3, [r0, #8]
 8009e76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e7a:	d00a      	beq.n	8009e92 <spi_stm32_get_err+0x2a>
{
 8009e7c:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8009e7e:	68c3      	ldr	r3, [r0, #12]
 8009e80:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009e82:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8009e84:	6883      	ldr	r3, [r0, #8]
 8009e86:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009e88:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8009e8a:	f06f 0004 	mvn.w	r0, #4
}
 8009e8e:	b002      	add	sp, #8
 8009e90:	4770      	bx	lr
		return -EIO;
 8009e92:	f06f 0004 	mvn.w	r0, #4
}
 8009e96:	4770      	bx	lr

08009e98 <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8009e98:	6883      	ldr	r3, [r0, #8]
 8009e9a:	f013 0f02 	tst.w	r3, #2
 8009e9e:	d0fb      	beq.n	8009e98 <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009ea0:	680b      	ldr	r3, [r1, #0]
 8009ea2:	889b      	ldrh	r3, [r3, #4]
 8009ea4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d01f      	beq.n	8009eec <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009eac:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d044      	beq.n	8009f3c <spi_stm32_shift_m+0xa4>
 8009eb2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	d143      	bne.n	8009f40 <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8009eb8:	2a00      	cmp	r2, #0
 8009eba:	d043      	beq.n	8009f44 <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8009ebc:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8009ebe:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009ec0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d047      	beq.n	8009f56 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d13f      	bne.n	8009f4e <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 8009ece:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d037      	beq.n	8009f48 <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 8009ed8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009eda:	f103 0208 	add.w	r2, r3, #8
 8009ede:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	650b      	str	r3, [r1, #80]	; 0x50
 8009eea:	e034      	b.n	8009f56 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009eec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009eee:	b1bb      	cbz	r3, 8009f20 <spi_stm32_shift_m+0x88>
 8009ef0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009ef2:	b9ba      	cbnz	r2, 8009f24 <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8009ef4:	b1c2      	cbz	r2, 8009f28 <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8009ef6:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8009ef8:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 8009efa:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009efc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009efe:	b353      	cbz	r3, 8009f56 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8009f00:	3b01      	subs	r3, #1
 8009f02:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009f04:	b9ab      	cbnz	r3, 8009f32 <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 8009f06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009f0c:	b173      	cbz	r3, 8009f2c <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 8009f0e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009f10:	f103 0208 	add.w	r2, r3, #8
 8009f14:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	650b      	str	r3, [r1, #80]	; 0x50
 8009f1e:	e01a      	b.n	8009f56 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009f20:	2200      	movs	r2, #0
 8009f22:	e7e7      	b.n	8009ef4 <spi_stm32_shift_m+0x5c>
 8009f24:	2201      	movs	r2, #1
 8009f26:	e7e5      	b.n	8009ef4 <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	e7e5      	b.n	8009ef8 <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f30:	e011      	b.n	8009f56 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8009f32:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009f34:	b17b      	cbz	r3, 8009f56 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8009f36:	3301      	adds	r3, #1
 8009f38:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f3a:	e00c      	b.n	8009f56 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	e7bb      	b.n	8009eb8 <spi_stm32_shift_m+0x20>
 8009f40:	2201      	movs	r2, #1
 8009f42:	e7b9      	b.n	8009eb8 <spi_stm32_shift_m+0x20>
 8009f44:	2300      	movs	r3, #0
 8009f46:	e7ba      	b.n	8009ebe <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f4c:	e003      	b.n	8009f56 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8009f4e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009f50:	b10b      	cbz	r3, 8009f56 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8009f52:	3302      	adds	r3, #2
 8009f54:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009f56:	6883      	ldr	r3, [r0, #8]
 8009f58:	f013 0f01 	tst.w	r3, #1
 8009f5c:	d0fb      	beq.n	8009f56 <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009f5e:	680b      	ldr	r3, [r1, #0]
 8009f60:	889b      	ldrh	r3, [r3, #4]
 8009f62:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d01f      	beq.n	8009faa <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 8009f6a:	68c3      	ldr	r3, [r0, #12]
 8009f6c:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8009f6e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d040      	beq.n	8009ff6 <spi_stm32_shift_m+0x15e>
 8009f74:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d13f      	bne.n	8009ffa <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8009f7a:	b100      	cbz	r0, 8009f7e <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8009f7c:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 8009f7e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d043      	beq.n	800a00c <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8009f84:	3b01      	subs	r3, #1
 8009f86:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d13b      	bne.n	800a004 <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 8009f8c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d033      	beq.n	8009ffe <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 8009f96:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009f98:	f103 0208 	add.w	r2, r3, #8
 8009f9c:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	658b      	str	r3, [r1, #88]	; 0x58
 8009fa8:	4770      	bx	lr
  return (uint8_t)(READ_REG(SPIx->DR));
 8009faa:	68c3      	ldr	r3, [r0, #12]
 8009fac:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 8009fae:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009fb0:	b1aa      	cbz	r2, 8009fde <spi_stm32_shift_m+0x146>
 8009fb2:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009fb4:	b9a8      	cbnz	r0, 8009fe2 <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8009fb6:	b100      	cbz	r0, 8009fba <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8009fb8:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 8009fba:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009fbc:	b333      	cbz	r3, 800a00c <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009fc2:	b99b      	cbnz	r3, 8009fec <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 8009fc4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009fca:	b163      	cbz	r3, 8009fe6 <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 8009fcc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009fce:	f103 0208 	add.w	r2, r3, #8
 8009fd2:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	658b      	str	r3, [r1, #88]	; 0x58
 8009fdc:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e7e9      	b.n	8009fb6 <spi_stm32_shift_m+0x11e>
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7e7      	b.n	8009fb6 <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	654b      	str	r3, [r1, #84]	; 0x54
 8009fea:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8009fec:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009fee:	b16b      	cbz	r3, 800a00c <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	654b      	str	r3, [r1, #84]	; 0x54
 8009ff4:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e7bf      	b.n	8009f7a <spi_stm32_shift_m+0xe2>
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	e7bd      	b.n	8009f7a <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	654b      	str	r3, [r1, #84]	; 0x54
 800a002:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800a004:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a006:	b10b      	cbz	r3, 800a00c <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800a008:	3302      	adds	r3, #2
 800a00a:	654b      	str	r3, [r1, #84]	; 0x54
}
 800a00c:	4770      	bx	lr

0800a00e <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800a00e:	6883      	ldr	r3, [r0, #8]
 800a010:	f013 0f02 	tst.w	r3, #2
 800a014:	d045      	beq.n	800a0a2 <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 800a016:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d042      	beq.n	800a0a2 <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800a01c:	680b      	ldr	r3, [r1, #0]
 800a01e:	889b      	ldrh	r3, [r3, #4]
 800a020:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a024:	2b08      	cmp	r3, #8
 800a026:	d017      	beq.n	800a058 <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800a028:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800a02a:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800a02c:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800a02e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800a030:	2b00      	cmp	r3, #0
 800a032:	d03a      	beq.n	800a0aa <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800a034:	3b01      	subs	r3, #1
 800a036:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d12d      	bne.n	800a098 <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 800a03c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a03e:	3b01      	subs	r3, #1
 800a040:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800a042:	b333      	cbz	r3, 800a092 <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 800a044:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a046:	f103 0208 	add.w	r2, r3, #8
 800a04a:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	650b      	str	r3, [r1, #80]	; 0x50
 800a056:	e028      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800a058:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800a05a:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800a05c:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800a05e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800a060:	b31b      	cbz	r3, 800a0aa <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800a062:	3b01      	subs	r3, #1
 800a064:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800a066:	b97b      	cbnz	r3, 800a088 <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 800a068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06a:	3b01      	subs	r3, #1
 800a06c:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800a06e:	b143      	cbz	r3, 800a082 <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 800a070:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a072:	f103 0208 	add.w	r2, r3, #8
 800a076:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	650b      	str	r3, [r1, #80]	; 0x50
 800a080:	e013      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a086:	e010      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800a088:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800a08a:	b173      	cbz	r3, 800a0aa <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800a08c:	3301      	adds	r3, #1
 800a08e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a090:	e00b      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a096:	e008      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800a098:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800a09a:	b133      	cbz	r3, 800a0aa <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800a09c:	3302      	adds	r3, #2
 800a09e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0a0:	e003      	b.n	800a0aa <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800a0a2:	6843      	ldr	r3, [r0, #4]
 800a0a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0a8:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a0aa:	6883      	ldr	r3, [r0, #8]
 800a0ac:	f013 0f01 	tst.w	r3, #1
 800a0b0:	d04a      	beq.n	800a148 <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800a0b2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a0b4:	b30b      	cbz	r3, 800a0fa <spi_stm32_shift_s+0xec>
 800a0b6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a0b8:	bb0a      	cbnz	r2, 800a0fe <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	d044      	beq.n	800a148 <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800a0be:	680a      	ldr	r2, [r1, #0]
 800a0c0:	8892      	ldrh	r2, [r2, #4]
 800a0c2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800a0c6:	2a08      	cmp	r2, #8
 800a0c8:	d01b      	beq.n	800a102 <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 800a0ca:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800a0cc:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800a0ce:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d039      	beq.n	800a148 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d131      	bne.n	800a140 <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 800a0dc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d029      	beq.n	800a13a <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 800a0e6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800a0e8:	f103 0208 	add.w	r2, r3, #8
 800a0ec:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	658b      	str	r3, [r1, #88]	; 0x58
 800a0f8:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	e7dd      	b.n	800a0ba <spi_stm32_shift_s+0xac>
 800a0fe:	2201      	movs	r2, #1
 800a100:	e7db      	b.n	800a0ba <spi_stm32_shift_s+0xac>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a102:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800a104:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800a106:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800a108:	b1f3      	cbz	r3, 800a148 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800a10a:	3b01      	subs	r3, #1
 800a10c:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800a10e:	b97b      	cbnz	r3, 800a130 <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 800a110:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800a112:	3b01      	subs	r3, #1
 800a114:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800a116:	b143      	cbz	r3, 800a12a <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 800a118:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800a11a:	f103 0208 	add.w	r2, r3, #8
 800a11e:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	658b      	str	r3, [r1, #88]	; 0x58
 800a128:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	654b      	str	r3, [r1, #84]	; 0x54
 800a12e:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800a130:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a132:	b14b      	cbz	r3, 800a148 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800a134:	3301      	adds	r3, #1
 800a136:	654b      	str	r3, [r1, #84]	; 0x54
 800a138:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	654b      	str	r3, [r1, #84]	; 0x54
 800a13e:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800a140:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a142:	b10b      	cbz	r3, 800a148 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800a144:	3302      	adds	r3, #2
 800a146:	654b      	str	r3, [r1, #84]	; 0x54
}
 800a148:	4770      	bx	lr

0800a14a <spi_stm32_shift_frames>:
{
 800a14a:	b510      	push	{r4, lr}
 800a14c:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800a152:	f013 0f01 	tst.w	r3, #1
 800a156:	d105      	bne.n	800a164 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800a158:	f7ff fe9e 	bl	8009e98 <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fe83 	bl	8009e68 <spi_stm32_get_err>
}
 800a162:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800a164:	f7ff ff53 	bl	800a00e <spi_stm32_shift_s>
 800a168:	e7f8      	b.n	800a15c <spi_stm32_shift_frames+0x12>

0800a16a <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800a16a:	b508      	push	{r3, lr}
 800a16c:	2200      	movs	r2, #0
 800a16e:	2105      	movs	r1, #5
 800a170:	2023      	movs	r0, #35	; 0x23
 800a172:	f7f8 fbe5 	bl	8002940 <z_arm_irq_priority_set>
 800a176:	2023      	movs	r0, #35	; 0x23
 800a178:	f7f8 fbd4 	bl	8002924 <arch_irq_enable>
 800a17c:	bd08      	pop	{r3, pc}

0800a17e <spi_stm32_cs_control>:
{
 800a17e:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800a180:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d034      	beq.n	800a1f2 <spi_stm32_cs_control+0x74>
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d031      	beq.n	800a1f2 <spi_stm32_cs_control+0x74>
 800a18e:	6810      	ldr	r0, [r2, #0]
 800a190:	2800      	cmp	r0, #0
 800a192:	d02e      	beq.n	800a1f2 <spi_stm32_cs_control+0x74>
		if (on) {
 800a194:	b9c9      	cbnz	r1, 800a1ca <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800a196:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800a198:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a19c:	d129      	bne.n	800a1f2 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800a19e:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800a1a0:	f7fc ffde 	bl	8007160 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800a1ac:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	408b      	lsls	r3, r1
 800a1b4:	421a      	tst	r2, r3
 800a1b6:	d126      	bne.n	800a206 <spi_stm32_cs_control+0x88>
 800a1b8:	2300      	movs	r3, #0
	if (value != 0)	{
 800a1ba:	b333      	cbz	r3, 800a20a <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a1bc:	2301      	movs	r3, #1
 800a1be:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a1c2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	4798      	blx	r3
 800a1c8:	e013      	b.n	800a1f2 <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800a1ca:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 800a1cc:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	408b      	lsls	r3, r1
 800a1d4:	421a      	tst	r2, r3
 800a1d6:	d10d      	bne.n	800a1f4 <spi_stm32_cs_control+0x76>
 800a1d8:	2301      	movs	r3, #1
	if (value != 0)	{
 800a1da:	b16b      	cbz	r3, 800a1f8 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a1dc:	2301      	movs	r3, #1
 800a1de:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a1e2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	6858      	ldr	r0, [r3, #4]
 800a1ee:	f7fc ffb7 	bl	8007160 <z_impl_k_busy_wait>
}
 800a1f2:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e7f0      	b.n	800a1da <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a1fe:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	4798      	blx	r3
 800a204:	e7f0      	b.n	800a1e8 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800a206:	2301      	movs	r3, #1
 800a208:	e7d7      	b.n	800a1ba <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a20a:	2301      	movs	r3, #1
 800a20c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a210:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	4798      	blx	r3
 800a216:	e7ec      	b.n	800a1f2 <spi_stm32_cs_control+0x74>

0800a218 <spi_stm32_complete>:
{
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800a21e:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800a220:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800a222:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800a22c:	6863      	ldr	r3, [r4, #4]
 800a22e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a232:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	f023 0320 	bic.w	r3, r3, #32
 800a23a:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800a23c:	2100      	movs	r1, #0
 800a23e:	f7ff ff9e 	bl	800a17e <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a242:	68a3      	ldr	r3, [r4, #8]
 800a244:	f013 0f01 	tst.w	r3, #1
 800a248:	d001      	beq.n	800a24e <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a24a:	68e3      	ldr	r3, [r4, #12]
 800a24c:	e7f9      	b.n	800a242 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800a254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a258:	d015      	beq.n	800a286 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	f013 0f20 	tst.w	r3, #32
 800a260:	d006      	beq.n	800a270 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800a266:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a26e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a276:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800a278:	63ae      	str	r6, [r5, #56]	; 0x38
	k_sem_give(&ctx->sync);
 800a27a:	f105 0020 	add.w	r0, r5, #32
	z_impl_k_sem_give(sem);
 800a27e:	f7fc f851 	bl	8006324 <z_impl_k_sem_give>
}
 800a282:	b002      	add	sp, #8
 800a284:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800a286:	68a3      	ldr	r3, [r4, #8]
 800a288:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a28c:	d1fb      	bne.n	800a286 <spi_stm32_complete+0x6e>
 800a28e:	e7e4      	b.n	800a25a <spi_stm32_complete+0x42>

0800a290 <spi_stm32_isr>:
{
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800a294:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800a296:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800a298:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff fde4 	bl	8009e68 <spi_stm32_get_err>
	if (err) {
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	b968      	cbnz	r0, 800a2c0 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f7ff fdd5 	bl	8009e54 <spi_stm32_transfer_ongoing>
 800a2aa:	b970      	cbnz	r0, 800a2ca <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800a2ac:	b91d      	cbnz	r5, 800a2b6 <spi_stm32_isr+0x26>
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff fdd0 	bl	8009e54 <spi_stm32_transfer_ongoing>
 800a2b4:	b918      	cbnz	r0, 800a2be <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f7ff ffad 	bl	800a218 <spi_stm32_complete>
}
 800a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff ffa8 	bl	800a218 <spi_stm32_complete>
		return;
 800a2c8:	e7f9      	b.n	800a2be <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7ff ff3c 	bl	800a14a <spi_stm32_shift_frames>
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	e7ea      	b.n	800a2ac <spi_stm32_isr+0x1c>

0800a2d6 <transceive>:
{
 800a2d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2da:	4605      	mov	r5, r0
 800a2dc:	460e      	mov	r6, r1
 800a2de:	4698      	mov	r8, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800a2e0:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800a2e2:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800a2e4:	689f      	ldr	r7, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	b1fa      	cbz	r2, 800a32a <transceive+0x54>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800a2ea:	88b3      	ldrh	r3, [r6, #4]
 800a2ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a2f0:	d004      	beq.n	800a2fc <transceive+0x26>
 800a2f2:	6923      	ldr	r3, [r4, #16]
 800a2f4:	b913      	cbnz	r3, 800a2fc <transceive+0x26>
		(ctx->owner == spi_cfg)) {
 800a2f6:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800a2f8:	429e      	cmp	r6, r3
 800a2fa:	d008      	beq.n	800a30e <transceive+0x38>
	k_sem_take(&ctx->lock, K_FOREVER);
 800a2fc:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
 800a300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a308:	f7fc f834 	bl	8006374 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800a30c:	6066      	str	r6, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	f7f9 f93d 	bl	8003590 <spi_stm32_configure>
	if (ret) {
 800a316:	4606      	mov	r6, r0
 800a318:	b160      	cbz	r0, 800a334 <transceive+0x5e>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	889b      	ldrh	r3, [r3, #4]
 800a31e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a322:	d06b      	beq.n	800a3fc <transceive+0x126>
}
 800a324:	4630      	mov	r0, r6
 800a326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 800a32a:	f1b8 0f00 	cmp.w	r8, #0
 800a32e:	d1dc      	bne.n	800a2ea <transceive+0x14>
		return 0;
 800a330:	2600      	movs	r6, #0
 800a332:	e7f7      	b.n	800a324 <transceive+0x4e>
	if (tx_bufs) {
 800a334:	f1b9 0f00 	cmp.w	r9, #0
 800a338:	d01e      	beq.n	800a378 <transceive+0xa2>
		ctx->current_tx = tx_bufs->buffers;
 800a33a:	f8d9 3000 	ldr.w	r3, [r9]
 800a33e:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 800a340:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a344:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
 800a34e:	f1b8 0f00 	cmp.w	r8, #0
 800a352:	d017      	beq.n	800a384 <transceive+0xae>
		ctx->current_rx = rx_bufs->buffers;
 800a354:	f8d8 3000 	ldr.w	r3, [r8]
 800a358:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 800a35a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a35e:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	63a3      	str	r3, [r4, #56]	; 0x38
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f013 0f01 	tst.w	r3, #1
 800a372:	d00d      	beq.n	800a390 <transceive+0xba>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	e7f9      	b.n	800a36c <transceive+0x96>
		ctx->current_tx = NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 800a37c:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 800a37e:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 800a380:	6523      	str	r3, [r4, #80]	; 0x50
 800a382:	e7e4      	b.n	800a34e <transceive+0x78>
		ctx->current_rx = NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800a388:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 800a38a:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 800a38c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a38e:	e7eb      	b.n	800a368 <transceive+0x92>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a396:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 800a398:	2101      	movs	r1, #1
 800a39a:	4628      	mov	r0, r5
 800a39c:	f7ff feef 	bl	800a17e <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f043 0320 	orr.w	r3, r3, #32
 800a3a6:	607b      	str	r3, [r7, #4]
	if (rx_bufs) {
 800a3a8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ac:	d003      	beq.n	800a3b6 <transceive+0xe0>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b4:	607b      	str	r3, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3bc:	607b      	str	r3, [r7, #4]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800a3be:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a3c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461a      	movcc	r2, r3
 800a3c8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a3cc:	fb03 f202 	mul.w	r2, r3, r2
		     ctx->config->frequency;
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f850 3b20 	ldr.w	r3, [r0], #32
 800a3d6:	681b      	ldr	r3, [r3, #0]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800a3d8:	fbb2 f2f3 	udiv	r2, r2, r3
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 800a3dc:	32c8      	adds	r2, #200	; 0xc8
			return t * ((uint64_t)to_hz / from_hz);
 800a3de:	0f91      	lsrs	r1, r2, #30
 800a3e0:	0093      	lsls	r3, r2, #2
 800a3e2:	189a      	adds	r2, r3, r2
 800a3e4:	f141 0300 	adc.w	r3, r1, #0
 800a3e8:	1892      	adds	r2, r2, r2
 800a3ea:	415b      	adcs	r3, r3
 800a3ec:	f7fb ffc2 	bl	8006374 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
 800a3f0:	b908      	cbnz	r0, 800a3f6 <transceive+0x120>
	status = ctx->sync_status;
 800a3f2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	return status;
 800a3f4:	e791      	b.n	800a31a <transceive+0x44>
		return -ETIMEDOUT;
 800a3f6:	f06f 0673 	mvn.w	r6, #115	; 0x73
 800a3fa:	e78e      	b.n	800a31a <transceive+0x44>
		ctx->owner = NULL;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800a400:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800a404:	f7fb ff8e 	bl	8006324 <z_impl_k_sem_give>
}
 800a408:	e78c      	b.n	800a324 <transceive+0x4e>

0800a40a <spi_stm32_transceive>:
{
 800a40a:	b510      	push	{r4, lr}
 800a40c:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800a40e:	2400      	movs	r4, #0
 800a410:	9401      	str	r4, [sp, #4]
 800a412:	9400      	str	r4, [sp, #0]
 800a414:	f7ff ff5f 	bl	800a2d6 <transceive>
}
 800a418:	b002      	add	sp, #8
 800a41a:	bd10      	pop	{r4, pc}

0800a41c <spi_stm32_release>:
{
 800a41c:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800a41e:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	b1c3      	cbz	r3, 800a456 <spi_stm32_release+0x3a>
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	b1b3      	cbz	r3, 800a456 <spi_stm32_release+0x3a>
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	b1a2      	cbz	r2, 800a456 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800a42c:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800a42e:	f7fc fe97 	bl	8007160 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800a43a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	2301      	movs	r3, #1
 800a440:	408b      	lsls	r3, r1
 800a442:	421a      	tst	r2, r3
 800a444:	d10b      	bne.n	800a45e <spi_stm32_release+0x42>
 800a446:	2300      	movs	r3, #0
	if (value != 0)	{
 800a448:	b15b      	cbz	r3, 800a462 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a44a:	2301      	movs	r3, #1
 800a44c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a450:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	4798      	blx	r3
 800a456:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800a458:	b153      	cbz	r3, 800a470 <spi_stm32_release+0x54>
}
 800a45a:	2000      	movs	r0, #0
 800a45c:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800a45e:	2301      	movs	r3, #1
 800a460:	e7f2      	b.n	800a448 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a462:	2301      	movs	r3, #1
 800a464:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a468:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800a46e:	e7f2      	b.n	800a456 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800a470:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800a472:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800a476:	f7fb ff55 	bl	8006324 <z_impl_k_sem_give>
}
 800a47a:	e7ee      	b.n	800a45a <spi_stm32_release+0x3e>

0800a47c <timer_work_handler>:
{
 800a47c:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800a47e:	f7f9 fe35 	bl	80040ec <TimerIrqHandler>
}
 800a482:	bd08      	pop	{r3, pc}

0800a484 <RtcGetTimerValue>:
{
 800a484:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800a486:	f000 fe8a 	bl	800b19e <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800a48a:	220a      	movs	r2, #10
 800a48c:	2300      	movs	r3, #0
 800a48e:	f7f6 faa5 	bl	80009dc <__aeabi_uldivmod>
}
 800a492:	bd08      	pop	{r3, pc}

0800a494 <RtcGetMinimumTimeout>:
}
 800a494:	2001      	movs	r0, #1
 800a496:	4770      	bx	lr

0800a498 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800a498:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800a49a:	0f81      	lsrs	r1, r0, #30
 800a49c:	0083      	lsls	r3, r0, #2
 800a49e:	1818      	adds	r0, r3, r0
 800a4a0:	f141 0100 	adc.w	r1, r1, #0
 800a4a4:	1800      	adds	r0, r0, r0
 800a4a6:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800a4a8:	f7fc fc7e 	bl	8006da8 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800a4ac:	bd08      	pop	{r3, pc}

0800a4ae <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800a4ae:	4770      	bx	lr

0800a4b0 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800a4b0:	4770      	bx	lr

0800a4b2 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800a4b2:	f04f 0210 	mov.w	r2, #16
 800a4b6:	f3ef 8311 	mrs	r3, BASEPRI
 800a4ba:	f382 8812 	msr	BASEPRI_MAX, r2
 800a4be:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800a4c2:	6003      	str	r3, [r0, #0]
}
 800a4c4:	4770      	bx	lr

0800a4c6 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800a4c6:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800a4c8:	f383 8811 	msr	BASEPRI, r3
 800a4cc:	f3bf 8f6f 	isb	sy
}
 800a4d0:	4770      	bx	lr

0800a4d2 <__sx12xx_configure_pin>:
{
 800a4d2:	b570      	push	{r4, r5, r6, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4616      	mov	r6, r2
 800a4da:	461d      	mov	r5, r3
 800a4dc:	f7fb fc80 	bl	8005de0 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 800a4e0:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 800a4e2:	b318      	cbz	r0, 800a52c <__sx12xx_configure_pin+0x5a>
	const struct gpio_driver_api *api =
 800a4e4:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 800a4e6:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800a4e8:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800a4ec:	d007      	beq.n	800a4fe <__sx12xx_configure_pin+0x2c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800a4ee:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 800a4f2:	d004      	beq.n	800a4fe <__sx12xx_configure_pin+0x2c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800a4f4:	f015 0f01 	tst.w	r5, #1
 800a4f8:	d001      	beq.n	800a4fe <__sx12xx_configure_pin+0x2c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800a4fa:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800a4fe:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a502:	f015 0f01 	tst.w	r5, #1
 800a506:	d009      	beq.n	800a51c <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a508:	2101      	movs	r1, #1
 800a50a:	fa01 f506 	lsl.w	r5, r1, r6
 800a50e:	6821      	ldr	r1, [r4, #0]
 800a510:	4329      	orrs	r1, r5
 800a512:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4631      	mov	r1, r6
 800a518:	4798      	blx	r3
}
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a51c:	2101      	movs	r1, #1
 800a51e:	fa01 f506 	lsl.w	r5, r1, r6
 800a522:	6821      	ldr	r1, [r4, #0]
 800a524:	ea21 0105 	bic.w	r1, r1, r5
 800a528:	6021      	str	r1, [r4, #0]
 800a52a:	e7f3      	b.n	800a514 <__sx12xx_configure_pin+0x42>
		return -EIO;
 800a52c:	f06f 0004 	mvn.w	r0, #4
 800a530:	e7f3      	b.n	800a51a <__sx12xx_configure_pin+0x48>

0800a532 <clamp_int8>:
	if (x < min) {
 800a532:	4288      	cmp	r0, r1
 800a534:	db03      	blt.n	800a53e <clamp_int8+0xc>
	} else if (x > max) {
 800a536:	4290      	cmp	r0, r2
 800a538:	dd02      	ble.n	800a540 <clamp_int8+0xe>
		return max;
 800a53a:	4610      	mov	r0, r2
 800a53c:	4770      	bx	lr
		return min;
 800a53e:	4608      	mov	r0, r1
}
 800a540:	4770      	bx	lr

0800a542 <SX1276CheckRfFrequency>:
}
 800a542:	2001      	movs	r0, #1
 800a544:	4770      	bx	lr

0800a546 <sx127x_antenna_configure>:
}
 800a546:	2000      	movs	r0, #0
 800a548:	4770      	bx	lr

0800a54a <SX1276GetBoardTcxoWakeupTime>:
}
 800a54a:	2000      	movs	r0, #0
 800a54c:	4770      	bx	lr

0800a54e <SX1276SetAntSwLowPower>:
}
 800a54e:	4770      	bx	lr

0800a550 <SX1276SetBoardTcxo>:
}
 800a550:	4770      	bx	lr

0800a552 <SX1276SetAntSw>:
}
 800a552:	4770      	bx	lr

0800a554 <sx127x_read>:
{
 800a554:	b508      	push	{r3, lr}
 800a556:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800a558:	460a      	mov	r2, r1
 800a55a:	2100      	movs	r1, #0
 800a55c:	f7f9 fbb8 	bl	8003cd0 <sx127x_transceive>
}
 800a560:	bd08      	pop	{r3, pc}

0800a562 <SX1276ReadBuffer>:
{
 800a562:	b508      	push	{r3, lr}
	ret = sx127x_read(addr, buffer, size);
 800a564:	b2c0      	uxtb	r0, r0
 800a566:	f7ff fff5 	bl	800a554 <sx127x_read>
}
 800a56a:	bd08      	pop	{r3, pc}

0800a56c <sx127x_write>:
{
 800a56c:	b508      	push	{r3, lr}
 800a56e:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800a570:	460a      	mov	r2, r1
 800a572:	2101      	movs	r1, #1
 800a574:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a578:	f7f9 fbaa 	bl	8003cd0 <sx127x_transceive>
}
 800a57c:	bd08      	pop	{r3, pc}

0800a57e <SX1276WriteBuffer>:
{
 800a57e:	b508      	push	{r3, lr}
	ret = sx127x_write(addr, buffer, size);
 800a580:	b2c0      	uxtb	r0, r0
 800a582:	f7ff fff3 	bl	800a56c <sx127x_write>
}
 800a586:	bd08      	pop	{r3, pc}

0800a588 <SX1276SetRfTxPower>:
{
 800a588:	b530      	push	{r4, r5, lr}
 800a58a:	b083      	sub	sp, #12
 800a58c:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 800a594:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 800a598:	2201      	movs	r2, #1
 800a59a:	f10d 0106 	add.w	r1, sp, #6
 800a59e:	204d      	movs	r0, #77	; 0x4d
 800a5a0:	f7ff ffd8 	bl	800a554 <sx127x_read>
	if (ret < 0) {
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	db2a      	blt.n	800a5fe <SX1276SetRfTxPower+0x76>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 800a5a8:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800a5ac:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 800a5b0:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 800a5b4:	2214      	movs	r2, #20
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff ffba 	bl	800a532 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 800a5be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c6:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 800a5ca:	2811      	cmp	r0, #17
 800a5cc:	dd19      	ble.n	800a602 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 800a5ce:	f044 0407 	orr.w	r4, r4, #7
 800a5d2:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800a5d6:	3805      	subs	r0, #5
 800a5d8:	f000 000f 	and.w	r0, r0, #15
 800a5dc:	4318      	orrs	r0, r3
 800a5de:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f10d 0107 	add.w	r1, sp, #7
 800a5e8:	2009      	movs	r0, #9
 800a5ea:	f7ff ffbf 	bl	800a56c <sx127x_write>
	if (ret < 0) {
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	db05      	blt.n	800a5fe <SX1276SetRfTxPower+0x76>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f10d 0106 	add.w	r1, sp, #6
 800a5f8:	204d      	movs	r0, #77	; 0x4d
 800a5fa:	f7ff ffb7 	bl	800a56c <sx127x_write>
}
 800a5fe:	b003      	add	sp, #12
 800a600:	bd30      	pop	{r4, r5, pc}
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 800a602:	f044 0404 	orr.w	r4, r4, #4
 800a606:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800a60a:	3802      	subs	r0, #2
 800a60c:	f000 000f 	and.w	r0, r0, #15
 800a610:	4318      	orrs	r0, r3
 800a612:	f88d 0007 	strb.w	r0, [sp, #7]
 800a616:	e7e4      	b.n	800a5e2 <SX1276SetRfTxPower+0x5a>

0800a618 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800a618:	e004      	b.n	800a624 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800a622:	461a      	mov	r2, r3
 800a624:	1e53      	subs	r3, r2, #1
 800a626:	b29b      	uxth	r3, r3
 800a628:	2a00      	cmp	r2, #0
 800a62a:	d1f6      	bne.n	800a61a <memcpy1+0x2>
    }
}
 800a62c:	4770      	bx	lr

0800a62e <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800a632:	f7ff ff2f 	bl	800a494 <RtcGetMinimumTimeout>
 800a636:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800a638:	2301      	movs	r3, #1
 800a63a:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800a63c:	6826      	ldr	r6, [r4, #0]
 800a63e:	f7f9 f903 	bl	8003848 <RtcGetTimerElapsedTime>
 800a642:	4428      	add	r0, r5
 800a644:	4286      	cmp	r6, r0
 800a646:	d303      	bcc.n	800a650 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800a648:	6820      	ldr	r0, [r4, #0]
 800a64a:	f7f9 f913 	bl	8003874 <RtcSetAlarm>
}
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800a650:	f7f9 f8fa 	bl	8003848 <RtcGetTimerElapsedTime>
 800a654:	4405      	add	r5, r0
 800a656:	6025      	str	r5, [r4, #0]
 800a658:	e7f6      	b.n	800a648 <TimerSetTimeout+0x1a>

0800a65a <TimerInit>:
    obj->Timestamp = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800a65e:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800a660:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800a662:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800a664:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800a666:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800a668:	6143      	str	r3, [r0, #20]
}
 800a66a:	4770      	bx	lr

0800a66c <TimerSetValue>:
{
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800a670:	4608      	mov	r0, r1
 800a672:	f7ff ff1c 	bl	800a4ae <RtcMs2Tick>
 800a676:	4605      	mov	r5, r0
    TimerStop( obj );
 800a678:	4620      	mov	r0, r4
 800a67a:	f7f9 fd7b 	bl	8004174 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800a67e:	f7ff ff09 	bl	800a494 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800a682:	4285      	cmp	r5, r0
 800a684:	d300      	bcc.n	800a688 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800a686:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800a688:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800a68a:	6060      	str	r0, [r4, #4]
}
 800a68c:	bd38      	pop	{r3, r4, r5, pc}

0800a68e <TimerGetCurrentTime>:
{
 800a68e:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800a690:	f7ff fef8 	bl	800a484 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800a694:	f7ff ff0c 	bl	800a4b0 <RtcTick2Ms>
}
 800a698:	bd08      	pop	{r3, pc}

0800a69a <TimerGetElapsedTime>:
{
 800a69a:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800a69c:	4604      	mov	r4, r0
 800a69e:	b908      	cbnz	r0, 800a6a4 <TimerGetElapsedTime+0xa>
}
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800a6a4:	f7ff feee 	bl	800a484 <RtcGetTimerValue>
 800a6a8:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff feff 	bl	800a4ae <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800a6b0:	1a28      	subs	r0, r5, r0
 800a6b2:	f7ff fefd 	bl	800a4b0 <RtcTick2Ms>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	e7f2      	b.n	800a6a0 <TimerGetElapsedTime+0x6>

0800a6ba <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800a6ba:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800a6bc:	f7ff feec 	bl	800a498 <DelayMsMcu>
}
 800a6c0:	bd08      	pop	{r3, pc}

0800a6c2 <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800a6c2:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800a6c4:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800a6c8:	b2c3      	uxtb	r3, r0
 800a6ca:	fb02 f303 	mul.w	r3, r2, r3
 800a6ce:	3380      	adds	r3, #128	; 0x80
 800a6d0:	0a1b      	lsrs	r3, r3, #8
}
 800a6d2:	fb02 3001 	mla	r0, r2, r1, r3
 800a6d6:	4770      	bx	lr

0800a6d8 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800a6d8:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800a6da:	b941      	cbnz	r1, 800a6ee <SX1276GetGfskTimeOnAirNumerator+0x16>
 800a6dc:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800a6de:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800a6e0:	b13b      	cbz	r3, 800a6f2 <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800a6e2:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800a6e4:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800a6e6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800a6ea:	3018      	adds	r0, #24
 800a6ec:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	e7f5      	b.n	800a6de <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e7f6      	b.n	800a6e4 <SX1276GetGfskTimeOnAirNumerator+0xc>

0800a6f6 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800a6f6:	b570      	push	{r4, r5, r6, lr}
 800a6f8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800a6fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800a700:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a702:	f1a1 0c05 	sub.w	ip, r1, #5
 800a706:	f1bc 0f01 	cmp.w	ip, #1
 800a70a:	d932      	bls.n	800a772 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a70c:	b918      	cbnz	r0, 800a716 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800a70e:	f1a1 060b 	sub.w	r6, r1, #11
 800a712:	2e01      	cmp	r6, #1
 800a714:	d935      	bls.n	800a782 <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800a716:	2801      	cmp	r0, #1
 800a718:	d02f      	beq.n	800a77a <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800a71a:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a71c:	f89d e014 	ldrb.w	lr, [sp, #20]
 800a720:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800a724:	b38d      	cbz	r5, 800a78a <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800a726:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a72a:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800a72c:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800a72e:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800a732:	b36c      	cbz	r4, 800a790 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800a734:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800a738:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800a73a:	2906      	cmp	r1, #6
 800a73c:	d904      	bls.n	800a748 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800a73e:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800a742:	b10e      	cbz	r6, 800a748 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800a744:	1e88      	subs	r0, r1, #2
 800a746:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800a748:	f1bc 0f00 	cmp.w	ip, #0
 800a74c:	db23      	blt.n	800a796 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a74e:	4484      	add	ip, r0
 800a750:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a754:	fb9c fcf0 	sdiv	ip, ip, r0
 800a758:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800a75c:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800a760:	2906      	cmp	r1, #6
 800a762:	d801      	bhi.n	800a768 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800a764:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a768:	0080      	lsls	r0, r0, #2
 800a76a:	3001      	adds	r0, #1
 800a76c:	3902      	subs	r1, #2
}
 800a76e:	4088      	lsls	r0, r1
 800a770:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800a772:	2b0b      	cmp	r3, #11
 800a774:	d8ca      	bhi.n	800a70c <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800a776:	230c      	movs	r3, #12
 800a778:	e7c8      	b.n	800a70c <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a77a:	290c      	cmp	r1, #12
 800a77c:	d003      	beq.n	800a786 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800a77e:	2600      	movs	r6, #0
 800a780:	e7cc      	b.n	800a71c <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800a782:	2601      	movs	r6, #1
 800a784:	e7ca      	b.n	800a71c <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800a786:	2601      	movs	r6, #1
 800a788:	e7c8      	b.n	800a71c <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800a78a:	f04f 0c00 	mov.w	ip, #0
 800a78e:	e7cc      	b.n	800a72a <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800a790:	f04f 0c14 	mov.w	ip, #20
 800a794:	e7d0      	b.n	800a738 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800a796:	f04f 0c00 	mov.w	ip, #0
 800a79a:	e7d8      	b.n	800a74e <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800a79c <SX1276ReadFifo>:
{
 800a79c:	b508      	push	{r3, lr}
 800a79e:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	f7ff fedd 	bl	800a562 <SX1276ReadBuffer>
}
 800a7a8:	bd08      	pop	{r3, pc}

0800a7aa <SX1276WriteFifo>:
{
 800a7aa:	b508      	push	{r3, lr}
 800a7ac:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f7ff fee4 	bl	800a57e <SX1276WriteBuffer>
}
 800a7b6:	bd08      	pop	{r3, pc}

0800a7b8 <SX1276GetTimeOnAir>:
{
 800a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	460e      	mov	r6, r1
 800a7be:	4615      	mov	r5, r2
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800a7c6:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800a7ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800a7ce:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800a7d2:	b148      	cbz	r0, 800a7e8 <SX1276GetTimeOnAir+0x30>
 800a7d4:	2801      	cmp	r0, #1
 800a7d6:	d010      	beq.n	800a7fa <SX1276GetTimeOnAir+0x42>
 800a7d8:	2501      	movs	r5, #1
 800a7da:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800a7dc:	1960      	adds	r0, r4, r5
 800a7de:	3801      	subs	r0, #1
}
 800a7e0:	fbb0 f0f5 	udiv	r0, r0, r5
 800a7e4:	b005      	add	sp, #20
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800a7e8:	463a      	mov	r2, r7
 800a7ea:	4660      	mov	r0, ip
 800a7ec:	f7ff ff74 	bl	800a6d8 <SX1276GetGfskTimeOnAirNumerator>
 800a7f0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a7f4:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800a7f8:	e7f0      	b.n	800a7dc <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800a7fa:	9302      	str	r3, [sp, #8]
 800a7fc:	9701      	str	r7, [sp, #4]
 800a7fe:	9100      	str	r1, [sp, #0]
 800a800:	4663      	mov	r3, ip
 800a802:	4629      	mov	r1, r5
 800a804:	4630      	mov	r0, r6
 800a806:	f7ff ff76 	bl	800a6f6 <SX1276GetLoRaTimeOnAirNumerator>
 800a80a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a80e:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800a812:	4630      	mov	r0, r6
 800a814:	f7f9 fd2a 	bl	800426c <SX1276GetLoRaBandwidthInHz>
 800a818:	4605      	mov	r5, r0
        break;
 800a81a:	e7df      	b.n	800a7dc <SX1276GetTimeOnAir+0x24>

0800a81c <SX1276Write>:
{
 800a81c:	b500      	push	{lr}
 800a81e:	b083      	sub	sp, #12
 800a820:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800a824:	2201      	movs	r2, #1
 800a826:	f10d 0107 	add.w	r1, sp, #7
 800a82a:	f7ff fea8 	bl	800a57e <SX1276WriteBuffer>
}
 800a82e:	b003      	add	sp, #12
 800a830:	f85d fb04 	ldr.w	pc, [sp], #4

0800a834 <SX1276Read>:
{
 800a834:	b500      	push	{lr}
 800a836:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800a838:	2201      	movs	r2, #1
 800a83a:	f10d 0107 	add.w	r1, sp, #7
 800a83e:	f7ff fe90 	bl	800a562 <SX1276ReadBuffer>
}
 800a842:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a846:	b003      	add	sp, #12
 800a848:	f85d fb04 	ldr.w	pc, [sp], #4

0800a84c <SX1276SetOpMode>:
{
 800a84c:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800a84e:	4604      	mov	r4, r0
 800a850:	b970      	cbnz	r0, 800a870 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800a852:	2001      	movs	r0, #1
 800a854:	f7ff fe7b 	bl	800a54e <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800a858:	2001      	movs	r0, #1
 800a85a:	f7ff ffeb 	bl	800a834 <SX1276Read>
 800a85e:	b241      	sxtb	r1, r0
 800a860:	f021 0107 	bic.w	r1, r1, #7
 800a864:	4321      	orrs	r1, r4
 800a866:	b2c9      	uxtb	r1, r1
 800a868:	2001      	movs	r0, #1
 800a86a:	f7ff ffd7 	bl	800a81c <SX1276Write>
}
 800a86e:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800a870:	2001      	movs	r0, #1
 800a872:	f7ff fe6d 	bl	800a550 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800a876:	2000      	movs	r0, #0
 800a878:	f7ff fe69 	bl	800a54e <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fe68 	bl	800a552 <SX1276SetAntSw>
 800a882:	e7e9      	b.n	800a858 <SX1276SetOpMode+0xc>

0800a884 <SX1276IsChannelFree>:
{
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	4607      	mov	r7, r0
 800a888:	460c      	mov	r4, r1
 800a88a:	4616      	mov	r6, r2
 800a88c:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800a88e:	f7fa f83b 	bl	8004908 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800a892:	2000      	movs	r0, #0
 800a894:	f7fa face 	bl	8004e34 <SX1276SetModem>
    SX1276SetChannel( freq );
 800a898:	4638      	mov	r0, r7
 800a89a:	f7f9 fd11 	bl	80042c0 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7f9 fcbc 	bl	800421c <GetFskBandwidthRegValue>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	2012      	movs	r0, #18
 800a8aa:	f7ff ffb7 	bl	800a81c <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	2013      	movs	r0, #19
 800a8b2:	f7ff ffb3 	bl	800a81c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800a8b6:	2005      	movs	r0, #5
 800a8b8:	f7ff ffc8 	bl	800a84c <SX1276SetOpMode>
    DelayMs( 1 );
 800a8bc:	2001      	movs	r0, #1
 800a8be:	f7ff fefc 	bl	800a6ba <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800a8c2:	f7ff fee4 	bl	800a68e <TimerGetCurrentTime>
 800a8c6:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7ff fee6 	bl	800a69a <TimerGetElapsedTime>
 800a8ce:	42a8      	cmp	r0, r5
 800a8d0:	d206      	bcs.n	800a8e0 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f7fa fa86 	bl	8004de4 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800a8d8:	42b0      	cmp	r0, r6
 800a8da:	ddf5      	ble.n	800a8c8 <SX1276IsChannelFree+0x44>
            status = false;
 800a8dc:	2400      	movs	r4, #0
 800a8de:	e000      	b.n	800a8e2 <SX1276IsChannelFree+0x5e>
    bool status = true;
 800a8e0:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800a8e2:	f7fa f811 	bl	8004908 <SX1276SetSleep>
}
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8ea <SX1276Random>:
{
 800a8ea:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	f7fa faa1 	bl	8004e34 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800a8f2:	21ff      	movs	r1, #255	; 0xff
 800a8f4:	2011      	movs	r0, #17
 800a8f6:	f7ff ff91 	bl	800a81c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800a8fa:	2005      	movs	r0, #5
 800a8fc:	f7ff ffa6 	bl	800a84c <SX1276SetOpMode>
    uint32_t rnd = 0;
 800a900:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800a902:	462c      	mov	r4, r5
 800a904:	e00b      	b.n	800a91e <SX1276Random+0x34>
        DelayMs( 1 );
 800a906:	2001      	movs	r0, #1
 800a908:	f7ff fed7 	bl	800a6ba <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800a90c:	202c      	movs	r0, #44	; 0x2c
 800a90e:	f7ff ff91 	bl	800a834 <SX1276Read>
 800a912:	f000 0001 	and.w	r0, r0, #1
 800a916:	40a0      	lsls	r0, r4
 800a918:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800a91a:	3401      	adds	r4, #1
 800a91c:	b2e4      	uxtb	r4, r4
 800a91e:	2c1f      	cmp	r4, #31
 800a920:	d9f1      	bls.n	800a906 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800a922:	f7f9 fff1 	bl	8004908 <SX1276SetSleep>
}
 800a926:	4628      	mov	r0, r5
 800a928:	bd38      	pop	{r3, r4, r5, pc}

0800a92a <SX1276GetWakeupTime>:
{
 800a92a:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800a92c:	f7ff fe0d 	bl	800a54a <SX1276GetBoardTcxoWakeupTime>
}
 800a930:	3001      	adds	r0, #1
 800a932:	bd08      	pop	{r3, pc}

0800a934 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800a934:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a93a:	6843      	ldr	r3, [r0, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800a944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a948:	d02f      	beq.n	800a9aa <uart_stm32_config_get+0x76>
 800a94a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a94e:	d12e      	bne.n	800a9ae <uart_stm32_config_get+0x7a>
 800a950:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800a952:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a954:	6843      	ldr	r3, [r0, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800a95e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a962:	d028      	beq.n	800a9b6 <uart_stm32_config_get+0x82>
 800a964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a968:	d027      	beq.n	800a9ba <uart_stm32_config_get+0x86>
 800a96a:	b313      	cbz	r3, 800a9b2 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800a96c:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800a96e:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a970:	6843      	ldr	r3, [r0, #4]
 800a972:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800a980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a984:	d01d      	beq.n	800a9c2 <uart_stm32_config_get+0x8e>
 800a986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a98a:	d11d      	bne.n	800a9c8 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800a98c:	b1ba      	cbz	r2, 800a9be <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800a98e:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800a990:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a992:	6843      	ldr	r3, [r0, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800a99c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a0:	d019      	beq.n	800a9d6 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800a9a2:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800a9a4:	71cb      	strb	r3, [r1, #7]
}
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	e7d1      	b.n	800a952 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e7cf      	b.n	800a952 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e7db      	b.n	800a96e <uart_stm32_config_get+0x3a>
	switch (sb) {
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e7d9      	b.n	800a96e <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e7d7      	b.n	800a96e <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e7e6      	b.n	800a990 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800a9c2:	b922      	cbnz	r2, 800a9ce <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	e7e3      	b.n	800a990 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800a9c8:	b91a      	cbnz	r2, 800a9d2 <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e7e0      	b.n	800a990 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e7de      	b.n	800a990 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e7dc      	b.n	800a990 <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7e4      	b.n	800a9a4 <uart_stm32_config_get+0x70>

0800a9da <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a9da:	6843      	ldr	r3, [r0, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	f012 0f08 	tst.w	r2, #8
 800a9e4:	d001      	beq.n	800a9ea <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	f012 0f20 	tst.w	r2, #32
 800a9f0:	d003      	beq.n	800a9fa <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800a9f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800a9f4:	700b      	strb	r3, [r1, #0]
	return 0;
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	4770      	bx	lr
		return -1;
 800a9fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a9fe:	4770      	bx	lr

0800aa00 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800aa00:	6843      	ldr	r3, [r0, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800aa04:	69da      	ldr	r2, [r3, #28]
 800aa06:	f012 0f80 	tst.w	r2, #128	; 0x80
 800aa0a:	d0fb      	beq.n	800aa04 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800aa0c:	b289      	uxth	r1, r1
 800aa0e:	8519      	strh	r1, [r3, #40]	; 0x28
}
 800aa10:	4770      	bx	lr

0800aa12 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800aa12:	6843      	ldr	r3, [r0, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800aa16:	69d8      	ldr	r0, [r3, #28]
 800aa18:	f010 0008 	ands.w	r0, r0, #8
 800aa1c:	d000      	beq.n	800aa20 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800aa1e:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800aa20:	69da      	ldr	r2, [r3, #28]
 800aa22:	f012 0f01 	tst.w	r2, #1
 800aa26:	d001      	beq.n	800aa2c <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800aa28:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800aa2c:	69da      	ldr	r2, [r3, #28]
 800aa2e:	f012 0f02 	tst.w	r2, #2
 800aa32:	d001      	beq.n	800aa38 <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800aa34:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800aa38:	f010 0f01 	tst.w	r0, #1
 800aa3c:	d001      	beq.n	800aa42 <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800aa3e:	2208      	movs	r2, #8
 800aa40:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800aa42:	f010 0f02 	tst.w	r0, #2
 800aa46:	d001      	beq.n	800aa4c <uart_stm32_err_check+0x3a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800aa48:	2201      	movs	r2, #1
 800aa4a:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800aa4c:	f010 0f04 	tst.w	r0, #4
 800aa50:	d001      	beq.n	800aa56 <uart_stm32_err_check+0x44>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800aa52:	2202      	movs	r2, #2
 800aa54:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800aa56:	2204      	movs	r2, #4
 800aa58:	621a      	str	r2, [r3, #32]
}
 800aa5a:	4770      	bx	lr

0800aa5c <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa5c:	680a      	ldr	r2, [r1, #0]
 800aa5e:	0912      	lsrs	r2, r2, #4
 800aa60:	3201      	adds	r2, #1
 800aa62:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800aa66:	684b      	ldr	r3, [r1, #4]
 800aa68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa6c:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800aa70:	688b      	ldr	r3, [r1, #8]
 800aa72:	0e5b      	lsrs	r3, r3, #25
 800aa74:	3301      	adds	r3, #1
 800aa76:	005b      	lsls	r3, r3, #1
}
 800aa78:	fbb0 f0f3 	udiv	r0, r0, r3
 800aa7c:	4770      	bx	lr

0800aa7e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800aa7e:	b148      	cbz	r0, 800aa94 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800aa80:	68c3      	ldr	r3, [r0, #12]
 800aa82:	8818      	ldrh	r0, [r3, #0]
 800aa84:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800aa88:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800aa8c:	bf14      	ite	ne
 800aa8e:	2000      	movne	r0, #0
 800aa90:	2001      	moveq	r0, #1
 800aa92:	4770      	bx	lr
		return false;
 800aa94:	2000      	movs	r0, #0
}
 800aa96:	4770      	bx	lr

0800aa98 <arch_system_halt>:
	__asm__ volatile(
 800aa98:	f04f 0210 	mov.w	r2, #16
 800aa9c:	f3ef 8311 	mrs	r3, BASEPRI
 800aaa0:	f382 8812 	msr	BASEPRI_MAX, r2
 800aaa4:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800aaa8:	e7fe      	b.n	800aaa8 <arch_system_halt+0x10>

0800aaaa <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800aaaa:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800aaac:	f7ff fff4 	bl	800aa98 <arch_system_halt>

0800aab0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	4605      	mov	r5, r0
 800aab4:	460e      	mov	r6, r1
 800aab6:	f04f 0310 	mov.w	r3, #16
 800aaba:	f3ef 8711 	mrs	r7, BASEPRI
 800aabe:	f383 8812 	msr	BASEPRI_MAX, r3
 800aac2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800aac6:	f7fc f987 	bl	8006dd8 <z_impl_z_current_get>
 800aaca:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	f7ff ffeb 	bl	800aaaa <k_sys_fatal_error_handler>
	__asm__ volatile(
 800aad4:	f387 8811 	msr	BASEPRI, r7
 800aad8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800aadc:	4620      	mov	r0, r4
 800aade:	f7f8 f993 	bl	8002e08 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aae4 <setup_thread_stack>:
{
 800aae4:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800aae6:	3207      	adds	r2, #7
 800aae8:	f022 0207 	bic.w	r2, r2, #7
 800aaec:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800aaf0:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800aaf4:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800aaf6:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800aaf8:	2200      	movs	r2, #0
 800aafa:	6702      	str	r2, [r0, #112]	; 0x70
}
 800aafc:	18c8      	adds	r0, r1, r3
 800aafe:	bc10      	pop	{r4}
 800ab00:	4770      	bx	lr

0800ab02 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab02:	f3ef 8005 	mrs	r0, IPSR
}
 800ab06:	3800      	subs	r0, #0
 800ab08:	bf18      	it	ne
 800ab0a:	2001      	movne	r0, #1
 800ab0c:	4770      	bx	lr

0800ab0e <z_impl_k_thread_name_set>:
}
 800ab0e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800ab12:	4770      	bx	lr

0800ab14 <z_impl_k_thread_start>:
{
 800ab14:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800ab16:	f7fb ff47 	bl	80069a8 <z_sched_start>
}
 800ab1a:	bd08      	pop	{r3, pc}

0800ab1c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800ab1c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800ab1e:	2400      	movs	r4, #0
 800ab20:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800ab22:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800ab24:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800ab26:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800ab28:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800ab2a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800ab2c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800ab2e:	bc10      	pop	{r4}
 800ab30:	4770      	bx	lr

0800ab32 <z_impl_k_thread_create>:
{
 800ab32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab34:	b087      	sub	sp, #28
 800ab36:	4604      	mov	r4, r0
 800ab38:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ab3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800ab3c:	2700      	movs	r7, #0
 800ab3e:	9705      	str	r7, [sp, #20]
 800ab40:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ab42:	9704      	str	r7, [sp, #16]
 800ab44:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ab46:	9703      	str	r7, [sp, #12]
 800ab48:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ab4a:	9702      	str	r7, [sp, #8]
 800ab4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ab4e:	9701      	str	r7, [sp, #4]
 800ab50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800ab52:	9700      	str	r7, [sp, #0]
 800ab54:	f7fb fa6c 	bl	8006030 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800ab58:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ab5c:	bf08      	it	eq
 800ab5e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800ab62:	d102      	bne.n	800ab6a <z_impl_k_thread_create+0x38>
}
 800ab64:	4620      	mov	r0, r4
 800ab66:	b007      	add	sp, #28
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800ab6a:	4632      	mov	r2, r6
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7fb fa50 	bl	8006014 <schedule_new_thread>
 800ab74:	e7f6      	b.n	800ab64 <z_impl_k_thread_create+0x32>

0800ab76 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800ab76:	b508      	push	{r3, lr}
	__asm__ volatile(
 800ab78:	f04f 0210 	mov.w	r2, #16
 800ab7c:	f3ef 8311 	mrs	r3, BASEPRI
 800ab80:	f382 8812 	msr	BASEPRI_MAX, r2
 800ab84:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800ab88:	f7f7 febe 	bl	8002908 <arch_cpu_idle>
 800ab8c:	e7f4      	b.n	800ab78 <idle+0x2>

0800ab8e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800ab8e:	4288      	cmp	r0, r1
 800ab90:	da00      	bge.n	800ab94 <new_prio_for_inheritance+0x6>
 800ab92:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800ab94:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800ab98:	db01      	blt.n	800ab9e <new_prio_for_inheritance+0x10>
 800ab9a:	4608      	mov	r0, r1
 800ab9c:	4770      	bx	lr
 800ab9e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800aba2:	4770      	bx	lr

0800aba4 <adjust_owner_prio>:
{
 800aba4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800aba6:	6880      	ldr	r0, [r0, #8]
 800aba8:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800abac:	428b      	cmp	r3, r1
 800abae:	d101      	bne.n	800abb4 <adjust_owner_prio+0x10>
	return false;
 800abb0:	2000      	movs	r0, #0
}
 800abb2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800abb4:	f7fb ff46 	bl	8006a44 <z_set_prio>
 800abb8:	e7fb      	b.n	800abb2 <adjust_owner_prio+0xe>

0800abba <z_impl_k_mutex_init>:
{
 800abba:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800abbc:	2000      	movs	r0, #0
 800abbe:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800abc0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800abc2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800abc4:	605b      	str	r3, [r3, #4]
}
 800abc6:	4770      	bx	lr

0800abc8 <prepare_thread_to_run>:
{
 800abc8:	b508      	push	{r3, lr}
 800abca:	2200      	movs	r2, #0
 800abcc:	67c2      	str	r2, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800abce:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
 800abd0:	f000 f948 	bl	800ae64 <z_ready_thread>
}
 800abd4:	bd08      	pop	{r3, pc}

0800abd6 <queue_insert>:
{
 800abd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	460e      	mov	r6, r1
 800abde:	4615      	mov	r5, r2
 800abe0:	4699      	mov	r9, r3
 800abe2:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800abe6:	f100 0808 	add.w	r8, r0, #8
 800abea:	f04f 0310 	mov.w	r3, #16
 800abee:	f3ef 8711 	mrs	r7, BASEPRI
 800abf2:	f383 8812 	msr	BASEPRI_MAX, r3
 800abf6:	f3bf 8f6f 	isb	sy
	if (is_append) {
 800abfa:	b102      	cbz	r2, 800abfe <queue_insert+0x28>
	return list->tail;
 800abfc:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 800abfe:	f104 000c 	add.w	r0, r4, #12
 800ac02:	f000 f9f6 	bl	800aff2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 800ac06:	b9f8      	cbnz	r0, 800ac48 <queue_insert+0x72>
	if (alloc) {
 800ac08:	f1b9 0f00 	cmp.w	r9, #0
 800ac0c:	d125      	bne.n	800ac5a <queue_insert+0x84>
	node->next_and_flags = flags;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	602b      	str	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800ac12:	b39e      	cbz	r6, 800ac7c <queue_insert+0xa6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800ac14:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800ac16:	f033 0303 	bics.w	r3, r3, #3
 800ac1a:	d03b      	beq.n	800ac94 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ac1c:	682a      	ldr	r2, [r5, #0]
 800ac1e:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ac22:	4313      	orrs	r3, r2
 800ac24:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ac26:	6833      	ldr	r3, [r6, #0]
 800ac28:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ac2c:	431d      	orrs	r5, r3
 800ac2e:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
 800ac30:	2104      	movs	r1, #4
 800ac32:	f104 0014 	add.w	r0, r4, #20
 800ac36:	f000 fb77 	bl	800b328 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	f7fb fd7d 	bl	800673c <z_reschedule>
	return 0;
 800ac42:	2000      	movs	r0, #0
}
 800ac44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7ff ffbd 	bl	800abc8 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4640      	mov	r0, r8
 800ac52:	f7fb fd73 	bl	800673c <z_reschedule>
		return 0;
 800ac56:	2000      	movs	r0, #0
 800ac58:	e7f4      	b.n	800ac44 <queue_insert+0x6e>
	return z_thread_aligned_alloc(0, size);
 800ac5a:	2108      	movs	r1, #8
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	f7fc fdfb 	bl	8007858 <z_thread_aligned_alloc>
		if (anode == NULL) {
 800ac62:	b120      	cbz	r0, 800ac6e <queue_insert+0x98>
		anode->data = data;
 800ac64:	6045      	str	r5, [r0, #4]
	node->next_and_flags = flags;
 800ac66:	2201      	movs	r2, #1
 800ac68:	6002      	str	r2, [r0, #0]
		data = anode;
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	e7d1      	b.n	800ac12 <queue_insert+0x3c>
	__asm__ volatile(
 800ac6e:	f387 8811 	msr	BASEPRI, r7
 800ac72:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 800ac76:	f06f 000b 	mvn.w	r0, #11
 800ac7a:	e7e3      	b.n	800ac44 <queue_insert+0x6e>
	return list->head;
 800ac7c:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ac84:	4313      	orrs	r3, r2
 800ac86:	602b      	str	r3, [r5, #0]
	list->head = node;
 800ac88:	6025      	str	r5, [r4, #0]
	return list->tail;
 800ac8a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1cf      	bne.n	800ac30 <queue_insert+0x5a>
	list->tail = node;
 800ac90:	6065      	str	r5, [r4, #4]
}
 800ac92:	e7cd      	b.n	800ac30 <queue_insert+0x5a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800ac9a:	602b      	str	r3, [r5, #0]
	return list->tail;
 800ac9c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 800ac9e:	b132      	cbz	r2, 800acae <queue_insert+0xd8>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800aca0:	6813      	ldr	r3, [r2, #0]
 800aca2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800aca6:	432b      	orrs	r3, r5
 800aca8:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800acaa:	6065      	str	r5, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 800acac:	e7c0      	b.n	800ac30 <queue_insert+0x5a>
	list->tail = node;
 800acae:	6065      	str	r5, [r4, #4]
	list->head = node;
 800acb0:	6025      	str	r5, [r4, #0]
}
 800acb2:	e7bd      	b.n	800ac30 <queue_insert+0x5a>

0800acb4 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 800acb4:	b160      	cbz	r0, 800acd0 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800acb6:	6803      	ldr	r3, [r0, #0]
 800acb8:	f013 0f03 	tst.w	r3, #3
 800acbc:	d008      	beq.n	800acd0 <z_queue_node_peek+0x1c>
{
 800acbe:	b510      	push	{r4, lr}
		ret = anode->data;
 800acc0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 800acc2:	b909      	cbnz	r1, 800acc8 <z_queue_node_peek+0x14>
		ret = anode->data;
 800acc4:	4620      	mov	r0, r4
}
 800acc6:	bd10      	pop	{r4, pc}
			k_free(anode);
 800acc8:	f000 fb57 	bl	800b37a <k_free>
		ret = anode->data;
 800accc:	4620      	mov	r0, r4
 800acce:	e7fa      	b.n	800acc6 <z_queue_node_peek+0x12>
}
 800acd0:	4770      	bx	lr

0800acd2 <z_impl_k_queue_init>:
	list->head = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 800acd6:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
 800acd8:	7203      	strb	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
 800acda:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
 800acde:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800ace0:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
 800ace2:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
 800ace6:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
 800ace8:	6183      	str	r3, [r0, #24]
}
 800acea:	4770      	bx	lr

0800acec <k_queue_append>:
{
 800acec:	b500      	push	{lr}
 800acee:	b083      	sub	sp, #12
 800acf0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 800acf2:	2301      	movs	r3, #1
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	2300      	movs	r3, #0
 800acf8:	4619      	mov	r1, r3
 800acfa:	f7ff ff6c 	bl	800abd6 <queue_insert>
}
 800acfe:	b003      	add	sp, #12
 800ad00:	f85d fb04 	ldr.w	pc, [sp], #4

0800ad04 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800ad04:	b15a      	cbz	r2, 800ad1e <z_impl_k_sem_init+0x1a>
 800ad06:	428a      	cmp	r2, r1
 800ad08:	d30c      	bcc.n	800ad24 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800ad0a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800ad0c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800ad0e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800ad10:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800ad12:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800ad16:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800ad18:	6143      	str	r3, [r0, #20]
	return 0;
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	4770      	bx	lr
		return -EINVAL;
 800ad1e:	f06f 0015 	mvn.w	r0, #21
 800ad22:	4770      	bx	lr
 800ad24:	f06f 0015 	mvn.w	r0, #21
}
 800ad28:	4770      	bx	lr

0800ad2a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6003      	str	r3, [r0, #0]
 800ad2e:	6043      	str	r3, [r0, #4]
 800ad30:	6083      	str	r3, [r0, #8]
 800ad32:	60c3      	str	r3, [r0, #12]
 800ad34:	6041      	str	r1, [r0, #4]
}
 800ad36:	4770      	bx	lr

0800ad38 <k_work_submit_to_queue>:
{
 800ad38:	b530      	push	{r4, r5, lr}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	9001      	str	r0, [sp, #4]
 800ad3e:	4608      	mov	r0, r1
	__asm__ volatile(
 800ad40:	f04f 0310 	mov.w	r3, #16
 800ad44:	f3ef 8511 	mrs	r5, BASEPRI
 800ad48:	f383 8812 	msr	BASEPRI_MAX, r3
 800ad4c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800ad50:	a901      	add	r1, sp, #4
 800ad52:	f7fb fb37 	bl	80063c4 <submit_to_queue_locked>
 800ad56:	4604      	mov	r4, r0
	__asm__ volatile(
 800ad58:	f385 8811 	msr	BASEPRI, r5
 800ad5c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ad60:	2800      	cmp	r0, #0
 800ad62:	dc02      	bgt.n	800ad6a <k_work_submit_to_queue+0x32>
}
 800ad64:	4620      	mov	r0, r4
 800ad66:	b003      	add	sp, #12
 800ad68:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800ad6a:	f7fc f83b 	bl	8006de4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d0f8      	beq.n	800ad64 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800ad72:	f7fb ff89 	bl	8006c88 <z_impl_k_yield>
	return ret;
 800ad76:	e7f5      	b.n	800ad64 <k_work_submit_to_queue+0x2c>

0800ad78 <thread_active_elsewhere>:
}
 800ad78:	2000      	movs	r0, #0
 800ad7a:	4770      	bx	lr

0800ad7c <pended_on_thread>:
}
 800ad7c:	6880      	ldr	r0, [r0, #8]
 800ad7e:	4770      	bx	lr

0800ad80 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800ad80:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800ad84:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800ad88:	4283      	cmp	r3, r0
 800ad8a:	d001      	beq.n	800ad90 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800ad8c:	1ac0      	subs	r0, r0, r3
 800ad8e:	4770      	bx	lr
	return 0;
 800ad90:	2000      	movs	r0, #0
}
 800ad92:	4770      	bx	lr

0800ad94 <z_unpend_thread_no_timeout>:
{
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ad98:	2300      	movs	r3, #0
	__asm__ volatile(
 800ad9a:	f04f 0210 	mov.w	r2, #16
 800ad9e:	f3ef 8511 	mrs	r5, BASEPRI
 800ada2:	f382 8812 	msr	BASEPRI_MAX, r2
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	e010      	b.n	800adce <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff ffe5 	bl	800ad7c <pended_on_thread>
 800adb2:	4621      	mov	r1, r4
 800adb4:	f000 f823 	bl	800adfe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800adb8:	7b63      	ldrb	r3, [r4, #13]
 800adba:	f023 0302 	bic.w	r3, r3, #2
 800adbe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800adc4:	f385 8811 	msr	BASEPRI, r5
 800adc8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800adcc:	2301      	movs	r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d0ec      	beq.n	800adac <z_unpend_thread_no_timeout+0x18>
}
 800add2:	bd38      	pop	{r3, r4, r5, pc}

0800add4 <z_reschedule_irqlock>:
{
 800add4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800add6:	4603      	mov	r3, r0
 800add8:	b920      	cbnz	r0, 800ade4 <z_reschedule_irqlock+0x10>
 800adda:	f3ef 8205 	mrs	r2, IPSR
 800adde:	b942      	cbnz	r2, 800adf2 <z_reschedule_irqlock+0x1e>
 800ade0:	2201      	movs	r2, #1
 800ade2:	e000      	b.n	800ade6 <z_reschedule_irqlock+0x12>
 800ade4:	2200      	movs	r2, #0
	if (resched(key)) {
 800ade6:	b932      	cbnz	r2, 800adf6 <z_reschedule_irqlock+0x22>
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
}
 800adf0:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800adf2:	2200      	movs	r2, #0
 800adf4:	e7f7      	b.n	800ade6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f7 fde0 	bl	80029bc <arch_swap>
	return ret;
 800adfc:	e7f8      	b.n	800adf0 <z_reschedule_irqlock+0x1c>

0800adfe <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800adfe:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800ae00:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800ae02:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ae04:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800ae0a:	604b      	str	r3, [r1, #4]
}
 800ae0c:	4770      	bx	lr

0800ae0e <z_unpend_thread>:
{
 800ae0e:	b538      	push	{r3, r4, r5, lr}
 800ae10:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ae12:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae14:	f04f 0210 	mov.w	r2, #16
 800ae18:	f3ef 8511 	mrs	r5, BASEPRI
 800ae1c:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	e010      	b.n	800ae48 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff ffa8 	bl	800ad7c <pended_on_thread>
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	f7ff ffe6 	bl	800adfe <z_priq_dumb_remove>
 800ae32:	7b63      	ldrb	r3, [r4, #13]
 800ae34:	f023 0302 	bic.w	r3, r3, #2
 800ae38:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ae3e:	f385 8811 	msr	BASEPRI, r5
 800ae42:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ae46:	2301      	movs	r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0ec      	beq.n	800ae26 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800ae4c:	f104 0018 	add.w	r0, r4, #24
 800ae50:	f000 f958 	bl	800b104 <z_abort_timeout>
}
 800ae54:	bd38      	pop	{r3, r4, r5, pc}

0800ae56 <z_priq_dumb_best>:
{
 800ae56:	4603      	mov	r3, r0
	return list->head == list;
 800ae58:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ae5a:	4283      	cmp	r3, r0
 800ae5c:	d000      	beq.n	800ae60 <z_priq_dumb_best+0xa>
}
 800ae5e:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800ae60:	2000      	movs	r0, #0
	return thread;
 800ae62:	e7fc      	b.n	800ae5e <z_priq_dumb_best+0x8>

0800ae64 <z_ready_thread>:
{
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ae68:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae6a:	f04f 0210 	mov.w	r2, #16
 800ae6e:	f3ef 8511 	mrs	r5, BASEPRI
 800ae72:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	e004      	b.n	800ae86 <z_ready_thread+0x22>
	__asm__ volatile(
 800ae7c:	f385 8811 	msr	BASEPRI, r5
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	2301      	movs	r3, #1
 800ae86:	b943      	cbnz	r3, 800ae9a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f7ff ff75 	bl	800ad78 <thread_active_elsewhere>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d1f4      	bne.n	800ae7c <z_ready_thread+0x18>
			ready_thread(thread);
 800ae92:	4620      	mov	r0, r4
 800ae94:	f7fb fd48 	bl	8006928 <ready_thread>
 800ae98:	e7f0      	b.n	800ae7c <z_ready_thread+0x18>
}
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}

0800ae9c <z_thread_timeout>:
{
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800aea0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800aea4:	2300      	movs	r3, #0
	__asm__ volatile(
 800aea6:	f04f 0210 	mov.w	r2, #16
 800aeaa:	f3ef 8611 	mrs	r6, BASEPRI
 800aeae:	f382 8812 	msr	BASEPRI_MAX, r2
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	e011      	b.n	800aedc <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800aeb8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800aebc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800aec0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800aec4:	f023 0310 	bic.w	r3, r3, #16
 800aec8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800aecc:	4628      	mov	r0, r5
 800aece:	f7fb fd2b 	bl	8006928 <ready_thread>
	__asm__ volatile(
 800aed2:	f386 8811 	msr	BASEPRI, r6
 800aed6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800aeda:	2301      	movs	r3, #1
 800aedc:	b9ab      	cbnz	r3, 800af0a <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800aede:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800aee2:	f013 0f28 	tst.w	r3, #40	; 0x28
 800aee6:	d1f4      	bne.n	800aed2 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800aee8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0e3      	beq.n	800aeb8 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7ff ff43 	bl	800ad7c <pended_on_thread>
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7ff ff81 	bl	800adfe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800aefc:	7b6b      	ldrb	r3, [r5, #13]
 800aefe:	f023 0302 	bic.w	r3, r3, #2
 800af02:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	60ab      	str	r3, [r5, #8]
}
 800af08:	e7d6      	b.n	800aeb8 <z_thread_timeout+0x1c>
}
 800af0a:	bd70      	pop	{r4, r5, r6, pc}

0800af0c <add_to_waitq_locked>:
{
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	4605      	mov	r5, r0
 800af10:	460e      	mov	r6, r1
	unready_thread(thread);
 800af12:	f7fb fd67 	bl	80069e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800af16:	7b6b      	ldrb	r3, [r5, #13]
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800af1e:	b1b6      	cbz	r6, 800af4e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800af20:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800af22:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800af24:	42a6      	cmp	r6, r4
 800af26:	d019      	beq.n	800af5c <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800af28:	b164      	cbz	r4, 800af44 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800af2a:	4621      	mov	r1, r4
 800af2c:	4628      	mov	r0, r5
 800af2e:	f7ff ff27 	bl	800ad80 <z_sched_prio_cmp>
 800af32:	2800      	cmp	r0, #0
 800af34:	dc0c      	bgt.n	800af50 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800af36:	b12c      	cbz	r4, 800af44 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800af38:	6873      	ldr	r3, [r6, #4]
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d002      	beq.n	800af44 <add_to_waitq_locked+0x38>
 800af3e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800af40:	2c00      	cmp	r4, #0
 800af42:	d1f1      	bne.n	800af28 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800af44:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800af46:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800af48:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800af4a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800af4c:	6075      	str	r5, [r6, #4]
}
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800af50:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800af52:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800af54:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800af56:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800af58:	6065      	str	r5, [r4, #4]
}
 800af5a:	e7f8      	b.n	800af4e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800af5c:	2400      	movs	r4, #0
 800af5e:	e7e3      	b.n	800af28 <add_to_waitq_locked+0x1c>

0800af60 <pend>:
{
 800af60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af64:	4605      	mov	r5, r0
 800af66:	460e      	mov	r6, r1
 800af68:	4691      	mov	r9, r2
 800af6a:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800af6c:	2400      	movs	r4, #0
	__asm__ volatile(
 800af6e:	f04f 0310 	mov.w	r3, #16
 800af72:	f3ef 8711 	mrs	r7, BASEPRI
 800af76:	f383 8812 	msr	BASEPRI_MAX, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	e008      	b.n	800af92 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800af80:	4631      	mov	r1, r6
 800af82:	4628      	mov	r0, r5
 800af84:	f7ff ffc2 	bl	800af0c <add_to_waitq_locked>
	__asm__ volatile(
 800af88:	f387 8811 	msr	BASEPRI, r7
 800af8c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800af90:	2401      	movs	r4, #1
 800af92:	2c00      	cmp	r4, #0
 800af94:	d0f4      	beq.n	800af80 <pend+0x20>
	add_thread_timeout(thread, timeout);
 800af96:	464a      	mov	r2, r9
 800af98:	4643      	mov	r3, r8
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7fb fb7a 	bl	8006694 <add_thread_timeout>
}
 800afa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800afa4 <z_unpend1_no_timeout>:
{
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800afa8:	2300      	movs	r3, #0
	__asm__ volatile(
 800afaa:	f04f 0210 	mov.w	r2, #16
 800afae:	f3ef 8611 	mrs	r6, BASEPRI
 800afb2:	f382 8812 	msr	BASEPRI_MAX, r2
 800afb6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800afba:	461c      	mov	r4, r3
 800afbc:	e004      	b.n	800afc8 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800afbe:	f386 8811 	msr	BASEPRI, r6
 800afc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800afc6:	2301      	movs	r3, #1
 800afc8:	b98b      	cbnz	r3, 800afee <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800afca:	4628      	mov	r0, r5
 800afcc:	f7ff ff43 	bl	800ae56 <z_priq_dumb_best>
		if (thread != NULL) {
 800afd0:	4604      	mov	r4, r0
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0f3      	beq.n	800afbe <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800afd6:	f7ff fed1 	bl	800ad7c <pended_on_thread>
 800afda:	4621      	mov	r1, r4
 800afdc:	f7ff ff0f 	bl	800adfe <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800afe0:	7b63      	ldrb	r3, [r4, #13]
 800afe2:	f023 0302 	bic.w	r3, r3, #2
 800afe6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800afe8:	2300      	movs	r3, #0
 800afea:	60a3      	str	r3, [r4, #8]
}
 800afec:	e7e7      	b.n	800afbe <z_unpend1_no_timeout+0x1a>
}
 800afee:	4620      	mov	r0, r4
 800aff0:	bd70      	pop	{r4, r5, r6, pc}

0800aff2 <z_unpend_first_thread>:
{
 800aff2:	b570      	push	{r4, r5, r6, lr}
 800aff4:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800aff6:	2300      	movs	r3, #0
	__asm__ volatile(
 800aff8:	f04f 0210 	mov.w	r2, #16
 800affc:	f3ef 8611 	mrs	r6, BASEPRI
 800b000:	f382 8812 	msr	BASEPRI_MAX, r2
 800b004:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800b008:	461c      	mov	r4, r3
 800b00a:	e004      	b.n	800b016 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800b00c:	f386 8811 	msr	BASEPRI, r6
 800b010:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b014:	2301      	movs	r3, #1
 800b016:	b9ab      	cbnz	r3, 800b044 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800b018:	4628      	mov	r0, r5
 800b01a:	f7ff ff1c 	bl	800ae56 <z_priq_dumb_best>
		if (thread != NULL) {
 800b01e:	4604      	mov	r4, r0
 800b020:	2800      	cmp	r0, #0
 800b022:	d0f3      	beq.n	800b00c <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b024:	f7ff feaa 	bl	800ad7c <pended_on_thread>
 800b028:	4621      	mov	r1, r4
 800b02a:	f7ff fee8 	bl	800adfe <z_priq_dumb_remove>
 800b02e:	7b63      	ldrb	r3, [r4, #13]
 800b030:	f023 0302 	bic.w	r3, r3, #2
 800b034:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800b036:	2300      	movs	r3, #0
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	f104 0018 	add.w	r0, r4, #24
 800b03e:	f000 f861 	bl	800b104 <z_abort_timeout>
 800b042:	e7e3      	b.n	800b00c <z_unpend_first_thread+0x1a>
}
 800b044:	4620      	mov	r0, r4
 800b046:	bd70      	pop	{r4, r5, r6, pc}

0800b048 <z_unpend_all>:
{
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4605      	mov	r5, r0
	int need_sched = 0;
 800b04c:	2000      	movs	r0, #0
	return list->head == list;
 800b04e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b050:	42a5      	cmp	r5, r4
 800b052:	d008      	beq.n	800b066 <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800b054:	b13c      	cbz	r4, 800b066 <z_unpend_all+0x1e>
		z_unpend_thread(thread);
 800b056:	4620      	mov	r0, r4
 800b058:	f7ff fed9 	bl	800ae0e <z_unpend_thread>
		z_ready_thread(thread);
 800b05c:	4620      	mov	r0, r4
 800b05e:	f7ff ff01 	bl	800ae64 <z_ready_thread>
		need_sched = 1;
 800b062:	2001      	movs	r0, #1
 800b064:	e7f3      	b.n	800b04e <z_unpend_all+0x6>
}
 800b066:	bd38      	pop	{r3, r4, r5, pc}

0800b068 <z_sched_wake>:
{
 800b068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06c:	4605      	mov	r5, r0
 800b06e:	4688      	mov	r8, r1
 800b070:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800b072:	2300      	movs	r3, #0
	__asm__ volatile(
 800b074:	f04f 0210 	mov.w	r2, #16
 800b078:	f3ef 8611 	mrs	r6, BASEPRI
 800b07c:	f382 8812 	msr	BASEPRI_MAX, r2
 800b080:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800b084:	4699      	mov	r9, r3
 800b086:	e004      	b.n	800b092 <z_sched_wake+0x2a>
	__asm__ volatile(
 800b088:	f386 8811 	msr	BASEPRI, r6
 800b08c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b090:	2301      	movs	r3, #1
 800b092:	b9eb      	cbnz	r3, 800b0d0 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800b094:	4628      	mov	r0, r5
 800b096:	f7ff fede 	bl	800ae56 <z_priq_dumb_best>
		if (thread != NULL) {
 800b09a:	4604      	mov	r4, r0
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d0f3      	beq.n	800b088 <z_sched_wake+0x20>
 800b0a0:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
 800b0a4:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b0a6:	f7ff fe69 	bl	800ad7c <pended_on_thread>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	f7ff fea7 	bl	800adfe <z_priq_dumb_remove>
 800b0b0:	7b63      	ldrb	r3, [r4, #13]
 800b0b2:	f023 0302 	bic.w	r3, r3, #2
 800b0b6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60a3      	str	r3, [r4, #8]
 800b0bc:	f104 0018 	add.w	r0, r4, #24
 800b0c0:	f000 f820 	bl	800b104 <z_abort_timeout>
			ready_thread(thread);
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7fb fc2f 	bl	8006928 <ready_thread>
			ret = true;
 800b0ca:	f04f 0901 	mov.w	r9, #1
 800b0ce:	e7db      	b.n	800b088 <z_sched_wake+0x20>
}
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b0d6 <remove_timeout>:
{
 800b0d6:	b510      	push	{r4, lr}
 800b0d8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800b0da:	f7fb fef3 	bl	8006ec4 <next>
 800b0de:	b148      	cbz	r0, 800b0f4 <remove_timeout+0x1e>
 800b0e0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800b0e2:	6920      	ldr	r0, [r4, #16]
 800b0e4:	6961      	ldr	r1, [r4, #20]
 800b0e6:	6913      	ldr	r3, [r2, #16]
 800b0e8:	181b      	adds	r3, r3, r0
 800b0ea:	6950      	ldr	r0, [r2, #20]
 800b0ec:	eb41 0100 	adc.w	r1, r1, r0
 800b0f0:	6113      	str	r3, [r2, #16]
 800b0f2:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800b0f4:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800b0f6:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800b0f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b0fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800b100:	6063      	str	r3, [r4, #4]
}
 800b102:	bd10      	pop	{r4, pc}

0800b104 <z_abort_timeout>:
{
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800b108:	2300      	movs	r3, #0
	__asm__ volatile(
 800b10a:	f04f 0210 	mov.w	r2, #16
 800b10e:	f3ef 8611 	mrs	r6, BASEPRI
 800b112:	f382 8812 	msr	BASEPRI_MAX, r2
 800b116:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800b11a:	f06f 0015 	mvn.w	r0, #21
 800b11e:	e004      	b.n	800b12a <z_abort_timeout+0x26>
	__asm__ volatile(
 800b120:	f386 8811 	msr	BASEPRI, r6
 800b124:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800b128:	2301      	movs	r3, #1
 800b12a:	461d      	mov	r5, r3
 800b12c:	b93b      	cbnz	r3, 800b13e <z_abort_timeout+0x3a>
	return node->next != NULL;
 800b12e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f5      	beq.n	800b120 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800b134:	4620      	mov	r0, r4
 800b136:	f7ff ffce 	bl	800b0d6 <remove_timeout>
			ret = 0;
 800b13a:	4628      	mov	r0, r5
 800b13c:	e7f0      	b.n	800b120 <z_abort_timeout+0x1c>
}
 800b13e:	bd70      	pop	{r4, r5, r6, pc}

0800b140 <z_set_timeout_expiry>:
{
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	4605      	mov	r5, r0
 800b144:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800b146:	2300      	movs	r3, #0
	__asm__ volatile(
 800b148:	f04f 0210 	mov.w	r2, #16
 800b14c:	f3ef 8611 	mrs	r6, BASEPRI
 800b150:	f382 8812 	msr	BASEPRI_MAX, r2
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	e00a      	b.n	800b170 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800b15a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800b15c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800b160:	2801      	cmp	r0, #1
 800b162:	dd00      	ble.n	800b166 <z_set_timeout_expiry+0x26>
 800b164:	b97c      	cbnz	r4, 800b186 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800b166:	f386 8811 	msr	BASEPRI, r6
 800b16a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800b16e:	2301      	movs	r3, #1
 800b170:	461c      	mov	r4, r3
 800b172:	b97b      	cbnz	r3, 800b194 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800b174:	f7fb febe 	bl	8006ef4 <next_timeout>
			      || (ticks <= next_to);
 800b178:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b17c:	d0ed      	beq.n	800b15a <z_set_timeout_expiry+0x1a>
 800b17e:	42a8      	cmp	r0, r5
 800b180:	dbec      	blt.n	800b15c <z_set_timeout_expiry+0x1c>
 800b182:	2401      	movs	r4, #1
 800b184:	e7ea      	b.n	800b15c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800b186:	4639      	mov	r1, r7
 800b188:	42a8      	cmp	r0, r5
 800b18a:	bfa8      	it	ge
 800b18c:	4628      	movge	r0, r5
 800b18e:	f7fa fc31 	bl	80059f4 <sys_clock_set_timeout>
 800b192:	e7e8      	b.n	800b166 <z_set_timeout_expiry+0x26>
}
 800b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b196 <sys_clock_tick_get_32>:
{
 800b196:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800b198:	f7fb ffc2 	bl	8007120 <sys_clock_tick_get>
}
 800b19c:	bd08      	pop	{r3, pc}

0800b19e <z_impl_k_uptime_ticks>:
{
 800b19e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800b1a0:	f7fb ffbe 	bl	8007120 <sys_clock_tick_get>
}
 800b1a4:	bd08      	pop	{r3, pc}

0800b1a6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b1a6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b1aa:	bf08      	it	eq
 800b1ac:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800b1b0:	d021      	beq.n	800b1f6 <sys_clock_timeout_end_calc+0x50>
{
 800b1b2:	b538      	push	{r3, r4, r5, lr}
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800b1b8:	ea51 0300 	orrs.w	r3, r1, r0
 800b1bc:	d009      	beq.n	800b1d2 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 800b1be:	f06f 0301 	mvn.w	r3, #1
 800b1c2:	1a18      	subs	r0, r3, r0
 800b1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c8:	eb63 0101 	sbc.w	r1, r3, r1
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	db03      	blt.n	800b1d8 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 800b1d0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
 800b1d2:	f7fb ffa5 	bl	8007120 <sys_clock_tick_get>
 800b1d6:	e7fb      	b.n	800b1d0 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
 800b1d8:	f7fb ffa2 	bl	8007120 <sys_clock_tick_get>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4628      	mov	r0, r5
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	2d01      	cmp	r5, #1
 800b1e4:	f174 0400 	sbcs.w	r4, r4, #0
 800b1e8:	da01      	bge.n	800b1ee <sys_clock_timeout_end_calc+0x48>
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	1818      	adds	r0, r3, r0
 800b1f0:	eb41 0102 	adc.w	r1, r1, r2
 800b1f4:	e7ec      	b.n	800b1d0 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1fa:	4601      	mov	r1, r0
}
 800b1fc:	4770      	bx	lr

0800b1fe <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800b1fe:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800b200:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	6303      	str	r3, [r0, #48]	; 0x30
 800b206:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800b20a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800b20c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800b20e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800b210:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800b212:	6343      	str	r3, [r0, #52]	; 0x34
}
 800b214:	4770      	bx	lr

0800b216 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800b216:	b510      	push	{r4, lr}
 800b218:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800b21a:	f7ff ff73 	bl	800b104 <z_abort_timeout>

	if (inactive) {
 800b21e:	b9a0      	cbnz	r0, 800b24a <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800b220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b222:	b10b      	cbz	r3, 800b228 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800b224:	4620      	mov	r0, r4
 800b226:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800b228:	f104 0018 	add.w	r0, r4, #24
 800b22c:	f7ff feba 	bl	800afa4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800b230:	b158      	cbz	r0, 800b24a <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800b232:	f7ff fe17 	bl	800ae64 <z_ready_thread>
	__asm__ volatile(
 800b236:	f04f 0310 	mov.w	r3, #16
 800b23a:	f3ef 8011 	mrs	r0, BASEPRI
 800b23e:	f383 8812 	msr	BASEPRI_MAX, r3
 800b242:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800b246:	f7ff fdc5 	bl	800add4 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800b24a:	bd10      	pop	{r4, pc}

0800b24c <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800b24c:	b108      	cbz	r0, 800b252 <poller_thread+0x6>
 800b24e:	3860      	subs	r0, #96	; 0x60
 800b250:	4770      	bx	lr
}
 800b252:	4770      	bx	lr

0800b254 <signal_poller>:
{
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800b258:	6880      	ldr	r0, [r0, #8]
 800b25a:	f7ff fff7 	bl	800b24c <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800b25e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800b260:	f013 0f02 	tst.w	r3, #2
 800b264:	d024      	beq.n	800b2b0 <signal_poller+0x5c>
 800b266:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800b268:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b26a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b270:	bf08      	it	eq
 800b272:	f112 0f02 	cmneq.w	r2, #2
 800b276:	d01d      	beq.n	800b2b4 <signal_poller+0x60>
	z_unpend_thread(thread);
 800b278:	f7ff fdc9 	bl	800ae0e <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800b27c:	2d08      	cmp	r5, #8
 800b27e:	d009      	beq.n	800b294 <signal_poller+0x40>
 800b280:	2300      	movs	r3, #0
 800b282:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800b284:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b286:	f013 0f1f 	tst.w	r3, #31
 800b28a:	d108      	bne.n	800b29e <signal_poller+0x4a>
	return node->next != NULL;
 800b28c:	69a3      	ldr	r3, [r4, #24]
 800b28e:	b123      	cbz	r3, 800b29a <signal_poller+0x46>
 800b290:	2300      	movs	r3, #0
 800b292:	e005      	b.n	800b2a0 <signal_poller+0x4c>
 800b294:	f06f 0303 	mvn.w	r3, #3
 800b298:	e7f3      	b.n	800b282 <signal_poller+0x2e>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e000      	b.n	800b2a0 <signal_poller+0x4c>
 800b29e:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800b2a0:	b90b      	cbnz	r3, 800b2a6 <signal_poller+0x52>
		return 0;
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e005      	b.n	800b2b2 <signal_poller+0x5e>
	z_ready_thread(thread);
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff fddc 	bl	800ae64 <z_ready_thread>
	return 0;
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e000      	b.n	800b2b2 <signal_poller+0x5e>
		return 0;
 800b2b0:	2000      	movs	r0, #0
}
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800b2b4:	f06f 000a 	mvn.w	r0, #10
 800b2b8:	e7fb      	b.n	800b2b2 <signal_poller+0x5e>

0800b2ba <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800b2ba:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800b2bc:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800b2be:	7823      	ldrb	r3, [r4, #0]
 800b2c0:	b173      	cbz	r3, 800b2e0 <signal_triggered_work+0x26>
 800b2c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b2c6:	b15d      	cbz	r5, 800b2e0 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800b2c8:	f1a4 0614 	sub.w	r6, r4, #20
 800b2cc:	f104 0014 	add.w	r0, r4, #20
 800b2d0:	f7ff ff18 	bl	800b104 <z_abort_timeout>
		twork->poll_result = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f7ff fd2c 	bl	800ad38 <k_work_submit_to_queue>
	}

	return 0;
}
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}

0800b2e4 <signal_poll_event>:
{
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800b2ea:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800b2ec:	b1d6      	cbz	r6, 800b324 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800b2ee:	7873      	ldrb	r3, [r6, #1]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d00d      	beq.n	800b310 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d012      	beq.n	800b31e <signal_poll_event+0x3a>
		poller->is_polling = false;
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800b300:	68e3      	ldr	r3, [r4, #12]
 800b302:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800b306:	430d      	orrs	r5, r1
 800b308:	f365 3352 	bfi	r3, r5, #13, #6
 800b30c:	60e3      	str	r3, [r4, #12]
}
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800b310:	f7ff ffa0 	bl	800b254 <signal_poller>
		poller->is_polling = false;
 800b314:	2300      	movs	r3, #0
 800b316:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800b318:	4298      	cmp	r0, r3
 800b31a:	daef      	bge.n	800b2fc <signal_poll_event+0x18>
 800b31c:	e7f7      	b.n	800b30e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800b31e:	f7ff ffcc 	bl	800b2ba <signal_triggered_work>
 800b322:	e7f7      	b.n	800b314 <signal_poll_event+0x30>
	int retcode = 0;
 800b324:	2000      	movs	r0, #0
 800b326:	e7e9      	b.n	800b2fc <signal_poll_event+0x18>

0800b328 <z_handle_obj_poll_events>:
{
 800b328:	b508      	push	{r3, lr}
 800b32a:	4603      	mov	r3, r0
	return list->head == list;
 800b32c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800b32e:	4283      	cmp	r3, r0
 800b330:	d009      	beq.n	800b346 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800b332:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800b334:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800b336:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b338:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800b33e:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800b340:	b108      	cbz	r0, 800b346 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800b342:	f7ff ffcf 	bl	800b2e4 <signal_poll_event>
}
 800b346:	bd08      	pop	{r3, pc}

0800b348 <z_heap_aligned_alloc>:
{
 800b348:	b5d0      	push	{r4, r6, r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 800b34e:	2300      	movs	r3, #0
 800b350:	3204      	adds	r2, #4
 800b352:	d20e      	bcs.n	800b372 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
 800b354:	b97b      	cbnz	r3, 800b376 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 800b356:	2600      	movs	r6, #0
 800b358:	2700      	movs	r7, #0
 800b35a:	e9cd 6700 	strd	r6, r7, [sp]
 800b35e:	f041 0104 	orr.w	r1, r1, #4
 800b362:	4620      	mov	r0, r4
 800b364:	f000 f81c 	bl	800b3a0 <k_heap_aligned_alloc>
	if (mem == NULL) {
 800b368:	b108      	cbz	r0, 800b36e <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
 800b36a:	f840 4b04 	str.w	r4, [r0], #4
}
 800b36e:	b002      	add	sp, #8
 800b370:	bdd0      	pop	{r4, r6, r7, pc}
 800b372:	2301      	movs	r3, #1
 800b374:	e7ee      	b.n	800b354 <z_heap_aligned_alloc+0xc>
		return NULL;
 800b376:	2000      	movs	r0, #0
 800b378:	e7f9      	b.n	800b36e <z_heap_aligned_alloc+0x26>

0800b37a <k_free>:
	if (ptr != NULL) {
 800b37a:	b130      	cbz	r0, 800b38a <k_free+0x10>
{
 800b37c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
 800b37e:	1f01      	subs	r1, r0, #4
 800b380:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800b384:	f000 f855 	bl	800b432 <k_heap_free>
}
 800b388:	bd08      	pop	{r3, pc}
 800b38a:	4770      	bx	lr

0800b38c <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800b38c:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800b38e:	4770      	bx	lr

0800b390 <k_heap_init>:
{
 800b390:	b510      	push	{r4, lr}
 800b392:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800b396:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800b398:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800b39a:	f7fe f9af 	bl	80096fc <sys_heap_init>
}
 800b39e:	bd10      	pop	{r4, pc}

0800b3a0 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	4607      	mov	r7, r0
 800b3a8:	468a      	mov	sl, r1
 800b3aa:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800b3ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b3b0:	f7ff fef9 	bl	800b1a6 <sys_clock_timeout_end_calc>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800b3b8:	f107 0b14 	add.w	fp, r7, #20
 800b3bc:	f04f 0310 	mov.w	r3, #16
 800b3c0:	f3ef 8511 	mrs	r5, BASEPRI
 800b3c4:	f383 8812 	msr	BASEPRI_MAX, r3
 800b3c8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
 800b3cc:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
 800b3d0:	4644      	mov	r4, r8

	while (ret == NULL) {
 800b3d2:	e00f      	b.n	800b3f4 <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800b3d4:	9000      	str	r0, [sp, #0]
 800b3d6:	9101      	str	r1, [sp, #4]
 800b3d8:	f107 020c 	add.w	r2, r7, #12
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4658      	mov	r0, fp
 800b3e0:	f7fb fb1c 	bl	8006a1c <z_pend_curr>
 800b3e4:	f04f 0310 	mov.w	r3, #16
 800b3e8:	f3ef 8511 	mrs	r5, BASEPRI
 800b3ec:	f383 8812 	msr	BASEPRI_MAX, r3
 800b3f0:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
 800b3f4:	b9ac      	cbnz	r4, 800b422 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 800b3f6:	9a03      	ldr	r2, [sp, #12]
 800b3f8:	4651      	mov	r1, sl
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	f7fe f8ea 	bl	80095d4 <sys_heap_aligned_alloc>
 800b400:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
 800b402:	f7fb fe8d 	bl	8007120 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 800b406:	b964      	cbnz	r4, 800b422 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
 800b408:	1a30      	subs	r0, r6, r0
 800b40a:	eb69 0101 	sbc.w	r1, r9, r1
 800b40e:	2801      	cmp	r0, #1
 800b410:	f171 0300 	sbcs.w	r3, r1, #0
 800b414:	db05      	blt.n	800b422 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
 800b416:	f1b8 0f00 	cmp.w	r8, #0
 800b41a:	d1db      	bne.n	800b3d4 <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
 800b41c:	f04f 0801 	mov.w	r8, #1
 800b420:	e7d8      	b.n	800b3d4 <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
 800b422:	f385 8811 	msr	BASEPRI, r5
 800b426:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800b42a:	4620      	mov	r0, r4
 800b42c:	b005      	add	sp, #20
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b432 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 800b432:	b570      	push	{r4, r5, r6, lr}
 800b434:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800b436:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
 800b43a:	f04f 0310 	mov.w	r3, #16
 800b43e:	f3ef 8511 	mrs	r5, BASEPRI
 800b442:	f383 8812 	msr	BASEPRI_MAX, r3
 800b446:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
 800b44a:	f7fe f85f 	bl	800950c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 800b44e:	f104 000c 	add.w	r0, r4, #12
 800b452:	f7ff fdf9 	bl	800b048 <z_unpend_all>
 800b456:	b920      	cbnz	r0, 800b462 <k_heap_free+0x30>
	__asm__ volatile(
 800b458:	f385 8811 	msr	BASEPRI, r5
 800b45c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 800b460:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
 800b462:	4629      	mov	r1, r5
 800b464:	4630      	mov	r0, r6
 800b466:	f7fb f969 	bl	800673c <z_reschedule>
 800b46a:	e7f9      	b.n	800b460 <k_heap_free+0x2e>

0800b46c <memcpy>:
 800b46c:	440a      	add	r2, r1
 800b46e:	4291      	cmp	r1, r2
 800b470:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b474:	d100      	bne.n	800b478 <memcpy+0xc>
 800b476:	4770      	bx	lr
 800b478:	b510      	push	{r4, lr}
 800b47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b482:	4291      	cmp	r1, r2
 800b484:	d1f9      	bne.n	800b47a <memcpy+0xe>
 800b486:	bd10      	pop	{r4, pc}

0800b488 <memset>:
 800b488:	4402      	add	r2, r0
 800b48a:	4603      	mov	r3, r0
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d100      	bne.n	800b492 <memset+0xa>
 800b490:	4770      	bx	lr
 800b492:	f803 1b01 	strb.w	r1, [r3], #1
 800b496:	e7f9      	b.n	800b48c <memset+0x4>

0800b498 <__cvt>:
 800b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	461f      	mov	r7, r3
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	bfb8      	it	lt
 800b4a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b4ae:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b4b2:	bfb6      	itet	lt
 800b4b4:	461f      	movlt	r7, r3
 800b4b6:	2300      	movge	r3, #0
 800b4b8:	232d      	movlt	r3, #45	; 0x2d
 800b4ba:	7013      	strb	r3, [r2, #0]
 800b4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4be:	f023 0820 	bic.w	r8, r3, #32
 800b4c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4c6:	d005      	beq.n	800b4d4 <__cvt+0x3c>
 800b4c8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4cc:	d100      	bne.n	800b4d0 <__cvt+0x38>
 800b4ce:	3501      	adds	r5, #1
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e000      	b.n	800b4d6 <__cvt+0x3e>
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	aa07      	add	r2, sp, #28
 800b4d8:	9204      	str	r2, [sp, #16]
 800b4da:	aa06      	add	r2, sp, #24
 800b4dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b4e0:	e9cd 3500 	strd	r3, r5, [sp]
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	f7f5 fcbe 	bl	8000e68 <_dtoa_r>
 800b4ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	d102      	bne.n	800b4fa <__cvt+0x62>
 800b4f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f6:	07db      	lsls	r3, r3, #31
 800b4f8:	d522      	bpl.n	800b540 <__cvt+0xa8>
 800b4fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4fe:	eb06 0905 	add.w	r9, r6, r5
 800b502:	d110      	bne.n	800b526 <__cvt+0x8e>
 800b504:	7833      	ldrb	r3, [r6, #0]
 800b506:	2b30      	cmp	r3, #48	; 0x30
 800b508:	d10a      	bne.n	800b520 <__cvt+0x88>
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	4620      	mov	r0, r4
 800b510:	4639      	mov	r1, r7
 800b512:	f7f5 fad3 	bl	8000abc <__aeabi_dcmpeq>
 800b516:	b918      	cbnz	r0, 800b520 <__cvt+0x88>
 800b518:	f1c5 0501 	rsb	r5, r5, #1
 800b51c:	f8ca 5000 	str.w	r5, [sl]
 800b520:	f8da 3000 	ldr.w	r3, [sl]
 800b524:	4499      	add	r9, r3
 800b526:	2200      	movs	r2, #0
 800b528:	2300      	movs	r3, #0
 800b52a:	4620      	mov	r0, r4
 800b52c:	4639      	mov	r1, r7
 800b52e:	f7f5 fac5 	bl	8000abc <__aeabi_dcmpeq>
 800b532:	b108      	cbz	r0, 800b538 <__cvt+0xa0>
 800b534:	f8cd 901c 	str.w	r9, [sp, #28]
 800b538:	2230      	movs	r2, #48	; 0x30
 800b53a:	9b07      	ldr	r3, [sp, #28]
 800b53c:	454b      	cmp	r3, r9
 800b53e:	d307      	bcc.n	800b550 <__cvt+0xb8>
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b544:	1b9b      	subs	r3, r3, r6
 800b546:	4630      	mov	r0, r6
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	b008      	add	sp, #32
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	1c59      	adds	r1, r3, #1
 800b552:	9107      	str	r1, [sp, #28]
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e7f0      	b.n	800b53a <__cvt+0xa2>

0800b558 <__exponent>:
 800b558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b55a:	4603      	mov	r3, r0
 800b55c:	2900      	cmp	r1, #0
 800b55e:	bfb8      	it	lt
 800b560:	4249      	neglt	r1, r1
 800b562:	f803 2b02 	strb.w	r2, [r3], #2
 800b566:	bfb4      	ite	lt
 800b568:	222d      	movlt	r2, #45	; 0x2d
 800b56a:	222b      	movge	r2, #43	; 0x2b
 800b56c:	2909      	cmp	r1, #9
 800b56e:	7042      	strb	r2, [r0, #1]
 800b570:	dd2a      	ble.n	800b5c8 <__exponent+0x70>
 800b572:	f10d 0407 	add.w	r4, sp, #7
 800b576:	46a4      	mov	ip, r4
 800b578:	270a      	movs	r7, #10
 800b57a:	46a6      	mov	lr, r4
 800b57c:	460a      	mov	r2, r1
 800b57e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b582:	fb07 1516 	mls	r5, r7, r6, r1
 800b586:	3530      	adds	r5, #48	; 0x30
 800b588:	2a63      	cmp	r2, #99	; 0x63
 800b58a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b58e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b592:	4631      	mov	r1, r6
 800b594:	dcf1      	bgt.n	800b57a <__exponent+0x22>
 800b596:	3130      	adds	r1, #48	; 0x30
 800b598:	f1ae 0502 	sub.w	r5, lr, #2
 800b59c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5a0:	1c44      	adds	r4, r0, #1
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4561      	cmp	r1, ip
 800b5a6:	d30a      	bcc.n	800b5be <__exponent+0x66>
 800b5a8:	f10d 0209 	add.w	r2, sp, #9
 800b5ac:	eba2 020e 	sub.w	r2, r2, lr
 800b5b0:	4565      	cmp	r5, ip
 800b5b2:	bf88      	it	hi
 800b5b4:	2200      	movhi	r2, #0
 800b5b6:	4413      	add	r3, r2
 800b5b8:	1a18      	subs	r0, r3, r0
 800b5ba:	b003      	add	sp, #12
 800b5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5c6:	e7ed      	b.n	800b5a4 <__exponent+0x4c>
 800b5c8:	2330      	movs	r3, #48	; 0x30
 800b5ca:	3130      	adds	r1, #48	; 0x30
 800b5cc:	7083      	strb	r3, [r0, #2]
 800b5ce:	70c1      	strb	r1, [r0, #3]
 800b5d0:	1d03      	adds	r3, r0, #4
 800b5d2:	e7f1      	b.n	800b5b8 <__exponent+0x60>

0800b5d4 <_printf_common>:
 800b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	4616      	mov	r6, r2
 800b5da:	4699      	mov	r9, r3
 800b5dc:	688a      	ldr	r2, [r1, #8]
 800b5de:	690b      	ldr	r3, [r1, #16]
 800b5e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	bfb8      	it	lt
 800b5e8:	4613      	movlt	r3, r2
 800b5ea:	6033      	str	r3, [r6, #0]
 800b5ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	b10a      	cbz	r2, 800b5fa <_printf_common+0x26>
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	6033      	str	r3, [r6, #0]
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	0699      	lsls	r1, r3, #26
 800b5fe:	bf42      	ittt	mi
 800b600:	6833      	ldrmi	r3, [r6, #0]
 800b602:	3302      	addmi	r3, #2
 800b604:	6033      	strmi	r3, [r6, #0]
 800b606:	6825      	ldr	r5, [r4, #0]
 800b608:	f015 0506 	ands.w	r5, r5, #6
 800b60c:	d106      	bne.n	800b61c <_printf_common+0x48>
 800b60e:	f104 0a19 	add.w	sl, r4, #25
 800b612:	68e3      	ldr	r3, [r4, #12]
 800b614:	6832      	ldr	r2, [r6, #0]
 800b616:	1a9b      	subs	r3, r3, r2
 800b618:	42ab      	cmp	r3, r5
 800b61a:	dc26      	bgt.n	800b66a <_printf_common+0x96>
 800b61c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b620:	1e13      	subs	r3, r2, #0
 800b622:	6822      	ldr	r2, [r4, #0]
 800b624:	bf18      	it	ne
 800b626:	2301      	movne	r3, #1
 800b628:	0692      	lsls	r2, r2, #26
 800b62a:	d42b      	bmi.n	800b684 <_printf_common+0xb0>
 800b62c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b630:	4649      	mov	r1, r9
 800b632:	4638      	mov	r0, r7
 800b634:	47c0      	blx	r8
 800b636:	3001      	adds	r0, #1
 800b638:	d01e      	beq.n	800b678 <_printf_common+0xa4>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	68e5      	ldr	r5, [r4, #12]
 800b63e:	6832      	ldr	r2, [r6, #0]
 800b640:	f003 0306 	and.w	r3, r3, #6
 800b644:	2b04      	cmp	r3, #4
 800b646:	bf08      	it	eq
 800b648:	1aad      	subeq	r5, r5, r2
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	6922      	ldr	r2, [r4, #16]
 800b64e:	bf0c      	ite	eq
 800b650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b654:	2500      	movne	r5, #0
 800b656:	4293      	cmp	r3, r2
 800b658:	bfc4      	itt	gt
 800b65a:	1a9b      	subgt	r3, r3, r2
 800b65c:	18ed      	addgt	r5, r5, r3
 800b65e:	2600      	movs	r6, #0
 800b660:	341a      	adds	r4, #26
 800b662:	42b5      	cmp	r5, r6
 800b664:	d11a      	bne.n	800b69c <_printf_common+0xc8>
 800b666:	2000      	movs	r0, #0
 800b668:	e008      	b.n	800b67c <_printf_common+0xa8>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4652      	mov	r2, sl
 800b66e:	4649      	mov	r1, r9
 800b670:	4638      	mov	r0, r7
 800b672:	47c0      	blx	r8
 800b674:	3001      	adds	r0, #1
 800b676:	d103      	bne.n	800b680 <_printf_common+0xac>
 800b678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b680:	3501      	adds	r5, #1
 800b682:	e7c6      	b.n	800b612 <_printf_common+0x3e>
 800b684:	18e1      	adds	r1, r4, r3
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	2030      	movs	r0, #48	; 0x30
 800b68a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b68e:	4422      	add	r2, r4
 800b690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b698:	3302      	adds	r3, #2
 800b69a:	e7c7      	b.n	800b62c <_printf_common+0x58>
 800b69c:	2301      	movs	r3, #1
 800b69e:	4622      	mov	r2, r4
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	47c0      	blx	r8
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d0e6      	beq.n	800b678 <_printf_common+0xa4>
 800b6aa:	3601      	adds	r6, #1
 800b6ac:	e7d9      	b.n	800b662 <_printf_common+0x8e>

0800b6ae <strnlen>:
 800b6ae:	b510      	push	{r4, lr}
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	4401      	add	r1, r0
 800b6b4:	428a      	cmp	r2, r1
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	d003      	beq.n	800b6c2 <strnlen+0x14>
 800b6ba:	781c      	ldrb	r4, [r3, #0]
 800b6bc:	3201      	adds	r2, #1
 800b6be:	2c00      	cmp	r4, #0
 800b6c0:	d1f8      	bne.n	800b6b4 <strnlen+0x6>
 800b6c2:	1a18      	subs	r0, r3, r0
 800b6c4:	bd10      	pop	{r4, pc}

0800b6c6 <quorem>:
 800b6c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	6903      	ldr	r3, [r0, #16]
 800b6cc:	690c      	ldr	r4, [r1, #16]
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	db7d      	blt.n	800b7d0 <quorem+0x10a>
 800b6d4:	3c01      	subs	r4, #1
 800b6d6:	f101 0814 	add.w	r8, r1, #20
 800b6da:	f100 0514 	add.w	r5, r0, #20
 800b6de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6fc:	d32e      	bcc.n	800b75c <quorem+0x96>
 800b6fe:	f04f 0e00 	mov.w	lr, #0
 800b702:	4640      	mov	r0, r8
 800b704:	46ac      	mov	ip, r5
 800b706:	46f2      	mov	sl, lr
 800b708:	f850 2b04 	ldr.w	r2, [r0], #4
 800b70c:	b293      	uxth	r3, r2
 800b70e:	fb06 e303 	mla	r3, r6, r3, lr
 800b712:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b716:	0c12      	lsrs	r2, r2, #16
 800b718:	b29b      	uxth	r3, r3
 800b71a:	fb06 e202 	mla	r2, r6, r2, lr
 800b71e:	ebaa 0303 	sub.w	r3, sl, r3
 800b722:	f8dc a000 	ldr.w	sl, [ip]
 800b726:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b72a:	b292      	uxth	r2, r2
 800b72c:	fa13 f38a 	uxtah	r3, r3, sl
 800b730:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b738:	b29b      	uxth	r3, r3
 800b73a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73e:	4581      	cmp	r9, r0
 800b740:	f84c 3b04 	str.w	r3, [ip], #4
 800b744:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b748:	d2de      	bcs.n	800b708 <quorem+0x42>
 800b74a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b74e:	b92b      	cbnz	r3, 800b75c <quorem+0x96>
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	3b04      	subs	r3, #4
 800b754:	429d      	cmp	r5, r3
 800b756:	461a      	mov	r2, r3
 800b758:	d32e      	bcc.n	800b7b8 <quorem+0xf2>
 800b75a:	613c      	str	r4, [r7, #16]
 800b75c:	4638      	mov	r0, r7
 800b75e:	f000 f886 	bl	800b86e <__mcmp>
 800b762:	2800      	cmp	r0, #0
 800b764:	db24      	blt.n	800b7b0 <quorem+0xea>
 800b766:	3601      	adds	r6, #1
 800b768:	4628      	mov	r0, r5
 800b76a:	f04f 0c00 	mov.w	ip, #0
 800b76e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b772:	f8d0 e000 	ldr.w	lr, [r0]
 800b776:	b293      	uxth	r3, r2
 800b778:	ebac 0303 	sub.w	r3, ip, r3
 800b77c:	0c12      	lsrs	r2, r2, #16
 800b77e:	fa13 f38e 	uxtah	r3, r3, lr
 800b782:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b786:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b790:	45c1      	cmp	r9, r8
 800b792:	f840 3b04 	str.w	r3, [r0], #4
 800b796:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b79a:	d2e8      	bcs.n	800b76e <quorem+0xa8>
 800b79c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7a4:	b922      	cbnz	r2, 800b7b0 <quorem+0xea>
 800b7a6:	3b04      	subs	r3, #4
 800b7a8:	429d      	cmp	r5, r3
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	d30a      	bcc.n	800b7c4 <quorem+0xfe>
 800b7ae:	613c      	str	r4, [r7, #16]
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	b003      	add	sp, #12
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	6812      	ldr	r2, [r2, #0]
 800b7ba:	3b04      	subs	r3, #4
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	d1cc      	bne.n	800b75a <quorem+0x94>
 800b7c0:	3c01      	subs	r4, #1
 800b7c2:	e7c7      	b.n	800b754 <quorem+0x8e>
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	3b04      	subs	r3, #4
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	d1f0      	bne.n	800b7ae <quorem+0xe8>
 800b7cc:	3c01      	subs	r4, #1
 800b7ce:	e7eb      	b.n	800b7a8 <quorem+0xe2>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e7ee      	b.n	800b7b2 <quorem+0xec>

0800b7d4 <__hi0bits>:
 800b7d4:	0c02      	lsrs	r2, r0, #16
 800b7d6:	0412      	lsls	r2, r2, #16
 800b7d8:	4603      	mov	r3, r0
 800b7da:	b9ca      	cbnz	r2, 800b810 <__hi0bits+0x3c>
 800b7dc:	0403      	lsls	r3, r0, #16
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7e4:	bf04      	itt	eq
 800b7e6:	021b      	lsleq	r3, r3, #8
 800b7e8:	3008      	addeq	r0, #8
 800b7ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7ee:	bf04      	itt	eq
 800b7f0:	011b      	lsleq	r3, r3, #4
 800b7f2:	3004      	addeq	r0, #4
 800b7f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7f8:	bf04      	itt	eq
 800b7fa:	009b      	lsleq	r3, r3, #2
 800b7fc:	3002      	addeq	r0, #2
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	db05      	blt.n	800b80e <__hi0bits+0x3a>
 800b802:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b806:	f100 0001 	add.w	r0, r0, #1
 800b80a:	bf08      	it	eq
 800b80c:	2020      	moveq	r0, #32
 800b80e:	4770      	bx	lr
 800b810:	2000      	movs	r0, #0
 800b812:	e7e5      	b.n	800b7e0 <__hi0bits+0xc>

0800b814 <__lo0bits>:
 800b814:	6803      	ldr	r3, [r0, #0]
 800b816:	4602      	mov	r2, r0
 800b818:	f013 0007 	ands.w	r0, r3, #7
 800b81c:	d00b      	beq.n	800b836 <__lo0bits+0x22>
 800b81e:	07d9      	lsls	r1, r3, #31
 800b820:	d421      	bmi.n	800b866 <__lo0bits+0x52>
 800b822:	0798      	lsls	r0, r3, #30
 800b824:	bf49      	itett	mi
 800b826:	085b      	lsrmi	r3, r3, #1
 800b828:	089b      	lsrpl	r3, r3, #2
 800b82a:	2001      	movmi	r0, #1
 800b82c:	6013      	strmi	r3, [r2, #0]
 800b82e:	bf5c      	itt	pl
 800b830:	6013      	strpl	r3, [r2, #0]
 800b832:	2002      	movpl	r0, #2
 800b834:	4770      	bx	lr
 800b836:	b299      	uxth	r1, r3
 800b838:	b909      	cbnz	r1, 800b83e <__lo0bits+0x2a>
 800b83a:	0c1b      	lsrs	r3, r3, #16
 800b83c:	2010      	movs	r0, #16
 800b83e:	b2d9      	uxtb	r1, r3
 800b840:	b909      	cbnz	r1, 800b846 <__lo0bits+0x32>
 800b842:	3008      	adds	r0, #8
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	0719      	lsls	r1, r3, #28
 800b848:	bf04      	itt	eq
 800b84a:	091b      	lsreq	r3, r3, #4
 800b84c:	3004      	addeq	r0, #4
 800b84e:	0799      	lsls	r1, r3, #30
 800b850:	bf04      	itt	eq
 800b852:	089b      	lsreq	r3, r3, #2
 800b854:	3002      	addeq	r0, #2
 800b856:	07d9      	lsls	r1, r3, #31
 800b858:	d403      	bmi.n	800b862 <__lo0bits+0x4e>
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	f100 0001 	add.w	r0, r0, #1
 800b860:	d003      	beq.n	800b86a <__lo0bits+0x56>
 800b862:	6013      	str	r3, [r2, #0]
 800b864:	4770      	bx	lr
 800b866:	2000      	movs	r0, #0
 800b868:	4770      	bx	lr
 800b86a:	2020      	movs	r0, #32
 800b86c:	4770      	bx	lr

0800b86e <__mcmp>:
 800b86e:	690a      	ldr	r2, [r1, #16]
 800b870:	4603      	mov	r3, r0
 800b872:	6900      	ldr	r0, [r0, #16]
 800b874:	1a80      	subs	r0, r0, r2
 800b876:	b530      	push	{r4, r5, lr}
 800b878:	d10d      	bne.n	800b896 <__mcmp+0x28>
 800b87a:	3314      	adds	r3, #20
 800b87c:	3114      	adds	r1, #20
 800b87e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b882:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b886:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b88a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b88e:	4295      	cmp	r5, r2
 800b890:	d002      	beq.n	800b898 <__mcmp+0x2a>
 800b892:	d304      	bcc.n	800b89e <__mcmp+0x30>
 800b894:	2001      	movs	r0, #1
 800b896:	bd30      	pop	{r4, r5, pc}
 800b898:	42a3      	cmp	r3, r4
 800b89a:	d3f4      	bcc.n	800b886 <__mcmp+0x18>
 800b89c:	e7fb      	b.n	800b896 <__mcmp+0x28>
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8a2:	e7f8      	b.n	800b896 <__mcmp+0x28>

0800b8a4 <_calloc_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	fb02 f501 	mul.w	r5, r2, r1
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f7fc f874 	bl	8007998 <_malloc_r>
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	b118      	cbz	r0, 800b8bc <_calloc_r+0x18>
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	f7ff fde6 	bl	800b488 <memset>
 800b8bc:	4620      	mov	r0, r4
 800b8be:	bd38      	pop	{r3, r4, r5, pc}

0800b8c0 <__ascii_mbtowc>:
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	b901      	cbnz	r1, 800b8c6 <__ascii_mbtowc+0x6>
 800b8c4:	a901      	add	r1, sp, #4
 800b8c6:	b142      	cbz	r2, 800b8da <__ascii_mbtowc+0x1a>
 800b8c8:	b14b      	cbz	r3, 800b8de <__ascii_mbtowc+0x1e>
 800b8ca:	7813      	ldrb	r3, [r2, #0]
 800b8cc:	600b      	str	r3, [r1, #0]
 800b8ce:	7812      	ldrb	r2, [r2, #0]
 800b8d0:	1e10      	subs	r0, r2, #0
 800b8d2:	bf18      	it	ne
 800b8d4:	2001      	movne	r0, #1
 800b8d6:	b002      	add	sp, #8
 800b8d8:	4770      	bx	lr
 800b8da:	4610      	mov	r0, r2
 800b8dc:	e7fb      	b.n	800b8d6 <__ascii_mbtowc+0x16>
 800b8de:	f06f 0001 	mvn.w	r0, #1
 800b8e2:	e7f8      	b.n	800b8d6 <__ascii_mbtowc+0x16>

0800b8e4 <__sfputc_r>:
 800b8e4:	6893      	ldr	r3, [r2, #8]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	b410      	push	{r4}
 800b8ec:	6093      	str	r3, [r2, #8]
 800b8ee:	da07      	bge.n	800b900 <__sfputc_r+0x1c>
 800b8f0:	6994      	ldr	r4, [r2, #24]
 800b8f2:	42a3      	cmp	r3, r4
 800b8f4:	db01      	blt.n	800b8fa <__sfputc_r+0x16>
 800b8f6:	290a      	cmp	r1, #10
 800b8f8:	d102      	bne.n	800b900 <__sfputc_r+0x1c>
 800b8fa:	bc10      	pop	{r4}
 800b8fc:	f7fd b88a 	b.w	8008a14 <__swbuf_r>
 800b900:	6813      	ldr	r3, [r2, #0]
 800b902:	1c58      	adds	r0, r3, #1
 800b904:	6010      	str	r0, [r2, #0]
 800b906:	7019      	strb	r1, [r3, #0]
 800b908:	4608      	mov	r0, r1
 800b90a:	bc10      	pop	{r4}
 800b90c:	4770      	bx	lr

0800b90e <__sfputs_r>:
 800b90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	4614      	mov	r4, r2
 800b916:	18d5      	adds	r5, r2, r3
 800b918:	42ac      	cmp	r4, r5
 800b91a:	d101      	bne.n	800b920 <__sfputs_r+0x12>
 800b91c:	2000      	movs	r0, #0
 800b91e:	e007      	b.n	800b930 <__sfputs_r+0x22>
 800b920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b924:	463a      	mov	r2, r7
 800b926:	4630      	mov	r0, r6
 800b928:	f7ff ffdc 	bl	800b8e4 <__sfputc_r>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d1f3      	bne.n	800b918 <__sfputs_r+0xa>
 800b930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b932 <__ascii_wctomb>:
 800b932:	4603      	mov	r3, r0
 800b934:	4608      	mov	r0, r1
 800b936:	b141      	cbz	r1, 800b94a <__ascii_wctomb+0x18>
 800b938:	2aff      	cmp	r2, #255	; 0xff
 800b93a:	d904      	bls.n	800b946 <__ascii_wctomb+0x14>
 800b93c:	228a      	movs	r2, #138	; 0x8a
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b944:	4770      	bx	lr
 800b946:	700a      	strb	r2, [r1, #0]
 800b948:	2001      	movs	r0, #1
 800b94a:	4770      	bx	lr

0800b94c <abort>:
 800b94c:	b508      	push	{r3, lr}
 800b94e:	2006      	movs	r0, #6
 800b950:	f7fd fade 	bl	8008f10 <raise>
 800b954:	2001      	movs	r0, #1
 800b956:	f7f7 fb33 	bl	8002fc0 <_exit>

0800b95a <__sfmoreglue>:
 800b95a:	b570      	push	{r4, r5, r6, lr}
 800b95c:	2268      	movs	r2, #104	; 0x68
 800b95e:	1e4d      	subs	r5, r1, #1
 800b960:	4355      	muls	r5, r2
 800b962:	460e      	mov	r6, r1
 800b964:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b968:	f7fc f816 	bl	8007998 <_malloc_r>
 800b96c:	4604      	mov	r4, r0
 800b96e:	b140      	cbz	r0, 800b982 <__sfmoreglue+0x28>
 800b970:	2100      	movs	r1, #0
 800b972:	e9c0 1600 	strd	r1, r6, [r0]
 800b976:	300c      	adds	r0, #12
 800b978:	60a0      	str	r0, [r4, #8]
 800b97a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b97e:	f7ff fd83 	bl	800b488 <memset>
 800b982:	4620      	mov	r0, r4
 800b984:	bd70      	pop	{r4, r5, r6, pc}

0800b986 <_fwalk_reent>:
 800b986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b98a:	4606      	mov	r6, r0
 800b98c:	4688      	mov	r8, r1
 800b98e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b992:	2700      	movs	r7, #0
 800b994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b998:	f1b9 0901 	subs.w	r9, r9, #1
 800b99c:	d505      	bpl.n	800b9aa <_fwalk_reent+0x24>
 800b99e:	6824      	ldr	r4, [r4, #0]
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	d1f7      	bne.n	800b994 <_fwalk_reent+0xe>
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d907      	bls.n	800b9c0 <_fwalk_reent+0x3a>
 800b9b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	d003      	beq.n	800b9c0 <_fwalk_reent+0x3a>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	47c0      	blx	r8
 800b9be:	4307      	orrs	r7, r0
 800b9c0:	3568      	adds	r5, #104	; 0x68
 800b9c2:	e7e9      	b.n	800b998 <_fwalk_reent+0x12>

0800b9c4 <__swhatbuf_r>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	460e      	mov	r6, r1
 800b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	b096      	sub	sp, #88	; 0x58
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	461d      	mov	r5, r3
 800b9d4:	da08      	bge.n	800b9e8 <__swhatbuf_r+0x24>
 800b9d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	602a      	str	r2, [r5, #0]
 800b9de:	061a      	lsls	r2, r3, #24
 800b9e0:	d410      	bmi.n	800ba04 <__swhatbuf_r+0x40>
 800b9e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e6:	e00e      	b.n	800ba06 <__swhatbuf_r+0x42>
 800b9e8:	466a      	mov	r2, sp
 800b9ea:	f7fd facd 	bl	8008f88 <_fstat_r>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	dbf1      	blt.n	800b9d6 <__swhatbuf_r+0x12>
 800b9f2:	9a01      	ldr	r2, [sp, #4]
 800b9f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9fc:	425a      	negs	r2, r3
 800b9fe:	415a      	adcs	r2, r3
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	e7ee      	b.n	800b9e2 <__swhatbuf_r+0x1e>
 800ba04:	2340      	movs	r3, #64	; 0x40
 800ba06:	2000      	movs	r0, #0
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	b016      	add	sp, #88	; 0x58
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}

0800ba0e <_raise_r>:
 800ba0e:	291f      	cmp	r1, #31
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	d904      	bls.n	800ba22 <_raise_r+0x14>
 800ba18:	2316      	movs	r3, #22
 800ba1a:	6003      	str	r3, [r0, #0]
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba24:	b112      	cbz	r2, 800ba2c <_raise_r+0x1e>
 800ba26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba2a:	b94b      	cbnz	r3, 800ba40 <_raise_r+0x32>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 f816 	bl	800ba5e <_getpid_r>
 800ba32:	462a      	mov	r2, r5
 800ba34:	4601      	mov	r1, r0
 800ba36:	4620      	mov	r0, r4
 800ba38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3c:	f7fd ba70 	b.w	8008f20 <_kill_r>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d00a      	beq.n	800ba5a <_raise_r+0x4c>
 800ba44:	1c59      	adds	r1, r3, #1
 800ba46:	d103      	bne.n	800ba50 <_raise_r+0x42>
 800ba48:	2316      	movs	r3, #22
 800ba4a:	6003      	str	r3, [r0, #0]
 800ba4c:	2001      	movs	r0, #1
 800ba4e:	e7e7      	b.n	800ba20 <_raise_r+0x12>
 800ba50:	2400      	movs	r4, #0
 800ba52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba56:	4628      	mov	r0, r5
 800ba58:	4798      	blx	r3
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e7e0      	b.n	800ba20 <_raise_r+0x12>

0800ba5e <_getpid_r>:
 800ba5e:	f7fd bfed 	b.w	8009a3c <_getpid>

0800ba62 <__sread>:
 800ba62:	b510      	push	{r4, lr}
 800ba64:	460c      	mov	r4, r1
 800ba66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba6a:	f7fd fac1 	bl	8008ff0 <_read_r>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	bfab      	itete	ge
 800ba72:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba74:	89a3      	ldrhlt	r3, [r4, #12]
 800ba76:	181b      	addge	r3, r3, r0
 800ba78:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba7c:	bfac      	ite	ge
 800ba7e:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba80:	81a3      	strhlt	r3, [r4, #12]
 800ba82:	bd10      	pop	{r4, pc}

0800ba84 <__swrite>:
 800ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	461f      	mov	r7, r3
 800ba8a:	898b      	ldrh	r3, [r1, #12]
 800ba8c:	05db      	lsls	r3, r3, #23
 800ba8e:	4605      	mov	r5, r0
 800ba90:	460c      	mov	r4, r1
 800ba92:	4616      	mov	r6, r2
 800ba94:	d505      	bpl.n	800baa2 <__swrite+0x1e>
 800ba96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f7fd fa95 	bl	8008fcc <_lseek_r>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baac:	81a3      	strh	r3, [r4, #12]
 800baae:	4632      	mov	r2, r6
 800bab0:	463b      	mov	r3, r7
 800bab2:	4628      	mov	r0, r5
 800bab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	f7fd ba44 	b.w	8008f44 <_write_r>

0800babc <__sseek>:
 800babc:	b510      	push	{r4, lr}
 800babe:	460c      	mov	r4, r1
 800bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac4:	f7fd fa82 	bl	8008fcc <_lseek_r>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	bf15      	itete	ne
 800bace:	6560      	strne	r0, [r4, #84]	; 0x54
 800bad0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bad4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bad8:	81a3      	strheq	r3, [r4, #12]
 800bada:	bf18      	it	ne
 800badc:	81a3      	strhne	r3, [r4, #12]
 800bade:	bd10      	pop	{r4, pc}

0800bae0 <__sclose>:
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	f7fd ba40 	b.w	8008f68 <_close_r>


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	a0 11 00 20 95 3e 00 08 9f 84 00 08 4d 3e 00 08     ... .>......M>..
 8000010:	4d 3e 00 08 4d 3e 00 08 4d 3e 00 08 00 00 00 00     M>..M>..M>......
	...
 800002c:	b9 35 00 08 4d 3e 00 08 00 00 00 00 65 35 00 08     .5..M>......e5..
 800003c:	3d 50 00 08                                         =P..

08000040 <_irq_vector_table>:
 8000040:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000050:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000060:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000070:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000080:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000090:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000a0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000b0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000c0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000d0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000e0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 80000f0:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000100:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000110:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000120:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000130:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000140:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000150:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000160:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000170:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000180:	91 36 00 08 91 36 00 08 91 36 00 08 91 36 00 08     .6...6...6...6..
 8000190:	91 36 00 08                                         .6..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strlen>:
 8000e42:	4603      	mov	r3, r0
 8000e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d1fb      	bne.n	8000e44 <strlen+0x2>
 8000e4c:	1a18      	subs	r0, r3, r0
 8000e4e:	3801      	subs	r0, #1
 8000e50:	4770      	bx	lr
 8000e52:	0000      	movs	r0, r0
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <_dtoa_r>:
 8000e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000e5e:	b099      	sub	sp, #100	; 0x64
 8000e60:	4616      	mov	r6, r2
 8000e62:	461f      	mov	r7, r3
 8000e64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e68:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	b974      	cbnz	r4, 8000e8e <_dtoa_r+0x36>
 8000e70:	2010      	movs	r0, #16
 8000e72:	f005 fbab 	bl	80065cc <malloc>
 8000e76:	4602      	mov	r2, r0
 8000e78:	6268      	str	r0, [r5, #36]	; 0x24
 8000e7a:	b920      	cbnz	r0, 8000e86 <_dtoa_r+0x2e>
 8000e7c:	4ba8      	ldr	r3, [pc, #672]	; (8001120 <_dtoa_r+0x2c8>)
 8000e7e:	21ea      	movs	r1, #234	; 0xea
 8000e80:	48a8      	ldr	r0, [pc, #672]	; (8001124 <_dtoa_r+0x2cc>)
 8000e82:	f006 fad3 	bl	800742c <__assert_func>
 8000e86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000e8a:	6004      	str	r4, [r0, #0]
 8000e8c:	60c4      	str	r4, [r0, #12]
 8000e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e90:	6819      	ldr	r1, [r3, #0]
 8000e92:	b151      	cbz	r1, 8000eaa <_dtoa_r+0x52>
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	604a      	str	r2, [r1, #4]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	608b      	str	r3, [r1, #8]
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f005 fff0 	bl	8006e84 <_Bfree>
 8000ea4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	1e3b      	subs	r3, r7, #0
 8000eac:	bfb9      	ittee	lt
 8000eae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000eb2:	9305      	strlt	r3, [sp, #20]
 8000eb4:	2300      	movge	r3, #0
 8000eb6:	f8c8 3000 	strge.w	r3, [r8]
 8000eba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ebe:	4b9a      	ldr	r3, [pc, #616]	; (8001128 <_dtoa_r+0x2d0>)
 8000ec0:	bfbc      	itt	lt
 8000ec2:	2201      	movlt	r2, #1
 8000ec4:	f8c8 2000 	strlt.w	r2, [r8]
 8000ec8:	ea33 0309 	bics.w	r3, r3, r9
 8000ecc:	d119      	bne.n	8000f02 <_dtoa_r+0xaa>
 8000ece:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000ed0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000eda:	4333      	orrs	r3, r6
 8000edc:	f000 8580 	beq.w	80019e0 <_dtoa_r+0xb88>
 8000ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ee2:	b953      	cbnz	r3, 8000efa <_dtoa_r+0xa2>
 8000ee4:	4b91      	ldr	r3, [pc, #580]	; (800112c <_dtoa_r+0x2d4>)
 8000ee6:	e022      	b.n	8000f2e <_dtoa_r+0xd6>
 8000ee8:	4b91      	ldr	r3, [pc, #580]	; (8001130 <_dtoa_r+0x2d8>)
 8000eea:	9303      	str	r3, [sp, #12]
 8000eec:	3308      	adds	r3, #8
 8000eee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	9803      	ldr	r0, [sp, #12]
 8000ef4:	b019      	add	sp, #100	; 0x64
 8000ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000efa:	4b8c      	ldr	r3, [pc, #560]	; (800112c <_dtoa_r+0x2d4>)
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	3303      	adds	r3, #3
 8000f00:	e7f5      	b.n	8000eee <_dtoa_r+0x96>
 8000f02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000f06:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000f0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2300      	movs	r3, #0
 8000f12:	f7ff fdd3 	bl	8000abc <__aeabi_dcmpeq>
 8000f16:	4680      	mov	r8, r0
 8000f18:	b158      	cbz	r0, 8000f32 <_dtoa_r+0xda>
 8000f1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8559 	beq.w	80019da <_dtoa_r+0xb82>
 8000f28:	4882      	ldr	r0, [pc, #520]	; (8001134 <_dtoa_r+0x2dc>)
 8000f2a:	6018      	str	r0, [r3, #0]
 8000f2c:	1e43      	subs	r3, r0, #1
 8000f2e:	9303      	str	r3, [sp, #12]
 8000f30:	e7df      	b.n	8000ef2 <_dtoa_r+0x9a>
 8000f32:	ab16      	add	r3, sp, #88	; 0x58
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	ab17      	add	r3, sp, #92	; 0x5c
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000f40:	f006 fa18 	bl	8007374 <__d2b>
 8000f44:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000f48:	4683      	mov	fp, r0
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d07e      	beq.n	800104c <_dtoa_r+0x1f4>
 8000f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f50:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f5c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000f60:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000f64:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000f68:	4b73      	ldr	r3, [pc, #460]	; (8001138 <_dtoa_r+0x2e0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f7ff f96c 	bl	8000248 <__aeabi_dsub>
 8000f70:	a365      	add	r3, pc, #404	; (adr r3, 8001108 <_dtoa_r+0x2b0>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fb1f 	bl	80005b8 <__aeabi_dmul>
 8000f7a:	a365      	add	r3, pc, #404	; (adr r3, 8001110 <_dtoa_r+0x2b8>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f964 	bl	800024c <__adddf3>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4620      	mov	r0, r4
 8000f88:	460f      	mov	r7, r1
 8000f8a:	f7ff faab 	bl	80004e4 <__aeabi_i2d>
 8000f8e:	a362      	add	r3, pc, #392	; (adr r3, 8001118 <_dtoa_r+0x2c0>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff fb10 	bl	80005b8 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	f7ff f954 	bl	800024c <__adddf3>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	460f      	mov	r7, r1
 8000fa8:	f7ff fdd0 	bl	8000b4c <__aeabi_d2iz>
 8000fac:	2200      	movs	r2, #0
 8000fae:	4682      	mov	sl, r0
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	f7ff fd8b 	bl	8000ad0 <__aeabi_dcmplt>
 8000fba:	b148      	cbz	r0, 8000fd0 <_dtoa_r+0x178>
 8000fbc:	4650      	mov	r0, sl
 8000fbe:	f7ff fa91 	bl	80004e4 <__aeabi_i2d>
 8000fc2:	4632      	mov	r2, r6
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	f7ff fd79 	bl	8000abc <__aeabi_dcmpeq>
 8000fca:	b908      	cbnz	r0, 8000fd0 <_dtoa_r+0x178>
 8000fcc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000fd0:	f1ba 0f16 	cmp.w	sl, #22
 8000fd4:	d857      	bhi.n	8001086 <_dtoa_r+0x22e>
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <_dtoa_r+0x2e4>)
 8000fd8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000fe4:	f7ff fd74 	bl	8000ad0 <__aeabi_dcmplt>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d04e      	beq.n	800108a <_dtoa_r+0x232>
 8000fec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ff4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000ff6:	1b1c      	subs	r4, r3, r4
 8000ff8:	1e63      	subs	r3, r4, #1
 8000ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8000ffc:	bf45      	ittet	mi
 8000ffe:	f1c4 0301 	rsbmi	r3, r4, #1
 8001002:	9306      	strmi	r3, [sp, #24]
 8001004:	2300      	movpl	r3, #0
 8001006:	2300      	movmi	r3, #0
 8001008:	bf4c      	ite	mi
 800100a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800100c:	9306      	strpl	r3, [sp, #24]
 800100e:	f1ba 0f00 	cmp.w	sl, #0
 8001012:	db3c      	blt.n	800108e <_dtoa_r+0x236>
 8001014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001016:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800101a:	4453      	add	r3, sl
 800101c:	9309      	str	r3, [sp, #36]	; 0x24
 800101e:	2300      	movs	r3, #0
 8001020:	930a      	str	r3, [sp, #40]	; 0x28
 8001022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001024:	2b09      	cmp	r3, #9
 8001026:	f200 808d 	bhi.w	8001144 <_dtoa_r+0x2ec>
 800102a:	2b05      	cmp	r3, #5
 800102c:	bfc4      	itt	gt
 800102e:	3b04      	subgt	r3, #4
 8001030:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001034:	f1a3 0302 	sub.w	r3, r3, #2
 8001038:	bfcc      	ite	gt
 800103a:	2400      	movgt	r4, #0
 800103c:	2401      	movle	r4, #1
 800103e:	2b03      	cmp	r3, #3
 8001040:	f200 808c 	bhi.w	800115c <_dtoa_r+0x304>
 8001044:	e8df f003 	tbb	[pc, r3]
 8001048:	5b4d4f2d 	.word	0x5b4d4f2d
 800104c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001050:	441c      	add	r4, r3
 8001052:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001056:	2b20      	cmp	r3, #32
 8001058:	bfc3      	ittte	gt
 800105a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800105e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001062:	fa09 f303 	lslgt.w	r3, r9, r3
 8001066:	f1c3 0320 	rsble	r3, r3, #32
 800106a:	bfc6      	itte	gt
 800106c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001070:	4318      	orrgt	r0, r3
 8001072:	fa06 f003 	lslle.w	r0, r6, r3
 8001076:	f7ff fa25 	bl	80004c4 <__aeabi_ui2d>
 800107a:	2301      	movs	r3, #1
 800107c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001080:	3c01      	subs	r4, #1
 8001082:	9313      	str	r3, [sp, #76]	; 0x4c
 8001084:	e770      	b.n	8000f68 <_dtoa_r+0x110>
 8001086:	2301      	movs	r3, #1
 8001088:	e7b3      	b.n	8000ff2 <_dtoa_r+0x19a>
 800108a:	900f      	str	r0, [sp, #60]	; 0x3c
 800108c:	e7b2      	b.n	8000ff4 <_dtoa_r+0x19c>
 800108e:	9b06      	ldr	r3, [sp, #24]
 8001090:	eba3 030a 	sub.w	r3, r3, sl
 8001094:	9306      	str	r3, [sp, #24]
 8001096:	f1ca 0300 	rsb	r3, sl, #0
 800109a:	930a      	str	r3, [sp, #40]	; 0x28
 800109c:	2300      	movs	r3, #0
 800109e:	930e      	str	r3, [sp, #56]	; 0x38
 80010a0:	e7bf      	b.n	8001022 <_dtoa_r+0x1ca>
 80010a2:	2300      	movs	r3, #0
 80010a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dc5a      	bgt.n	8001162 <_dtoa_r+0x30a>
 80010ac:	f04f 0901 	mov.w	r9, #1
 80010b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80010b4:	464b      	mov	r3, r9
 80010b6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80010ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80010bc:	2200      	movs	r2, #0
 80010be:	6042      	str	r2, [r0, #4]
 80010c0:	2204      	movs	r2, #4
 80010c2:	f102 0614 	add.w	r6, r2, #20
 80010c6:	429e      	cmp	r6, r3
 80010c8:	6841      	ldr	r1, [r0, #4]
 80010ca:	d950      	bls.n	800116e <_dtoa_r+0x316>
 80010cc:	4628      	mov	r0, r5
 80010ce:	f005 fe99 	bl	8006e04 <_Balloc>
 80010d2:	9003      	str	r0, [sp, #12]
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d14e      	bne.n	8001176 <_dtoa_r+0x31e>
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <_dtoa_r+0x2e8>)
 80010da:	4602      	mov	r2, r0
 80010dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010e0:	e6ce      	b.n	8000e80 <_dtoa_r+0x28>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e7de      	b.n	80010a4 <_dtoa_r+0x24c>
 80010e6:	2300      	movs	r3, #0
 80010e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80010ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010ec:	eb0a 0903 	add.w	r9, sl, r3
 80010f0:	f109 0301 	add.w	r3, r9, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	9308      	str	r3, [sp, #32]
 80010f8:	bfb8      	it	lt
 80010fa:	2301      	movlt	r3, #1
 80010fc:	e7dd      	b.n	80010ba <_dtoa_r+0x262>
 80010fe:	2301      	movs	r3, #1
 8001100:	e7f2      	b.n	80010e8 <_dtoa_r+0x290>
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	636f4361 	.word	0x636f4361
 800110c:	3fd287a7 	.word	0x3fd287a7
 8001110:	8b60c8b3 	.word	0x8b60c8b3
 8001114:	3fc68a28 	.word	0x3fc68a28
 8001118:	509f79fb 	.word	0x509f79fb
 800111c:	3fd34413 	.word	0x3fd34413
 8001120:	0800ae02 	.word	0x0800ae02
 8001124:	0800ae19 	.word	0x0800ae19
 8001128:	7ff00000 	.word	0x7ff00000
 800112c:	0800adfe 	.word	0x0800adfe
 8001130:	0800adf5 	.word	0x0800adf5
 8001134:	0800add2 	.word	0x0800add2
 8001138:	3ff80000 	.word	0x3ff80000
 800113c:	0800a0f8 	.word	0x0800a0f8
 8001140:	0800ae73 	.word	0x0800ae73
 8001144:	2401      	movs	r4, #1
 8001146:	2300      	movs	r3, #0
 8001148:	9322      	str	r3, [sp, #136]	; 0x88
 800114a:	940b      	str	r4, [sp, #44]	; 0x2c
 800114c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001150:	2200      	movs	r2, #0
 8001152:	f8cd 9020 	str.w	r9, [sp, #32]
 8001156:	2312      	movs	r3, #18
 8001158:	9223      	str	r2, [sp, #140]	; 0x8c
 800115a:	e7ae      	b.n	80010ba <_dtoa_r+0x262>
 800115c:	2301      	movs	r3, #1
 800115e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001160:	e7f4      	b.n	800114c <_dtoa_r+0x2f4>
 8001162:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001166:	f8cd 9020 	str.w	r9, [sp, #32]
 800116a:	464b      	mov	r3, r9
 800116c:	e7a5      	b.n	80010ba <_dtoa_r+0x262>
 800116e:	3101      	adds	r1, #1
 8001170:	6041      	str	r1, [r0, #4]
 8001172:	0052      	lsls	r2, r2, #1
 8001174:	e7a5      	b.n	80010c2 <_dtoa_r+0x26a>
 8001176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001178:	9a03      	ldr	r2, [sp, #12]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	9b08      	ldr	r3, [sp, #32]
 800117e:	2b0e      	cmp	r3, #14
 8001180:	f200 80a8 	bhi.w	80012d4 <_dtoa_r+0x47c>
 8001184:	2c00      	cmp	r4, #0
 8001186:	f000 80a5 	beq.w	80012d4 <_dtoa_r+0x47c>
 800118a:	f1ba 0f00 	cmp.w	sl, #0
 800118e:	dd34      	ble.n	80011fa <_dtoa_r+0x3a2>
 8001190:	4a9a      	ldr	r2, [pc, #616]	; (80013fc <_dtoa_r+0x5a4>)
 8001192:	f00a 030f 	and.w	r3, sl, #15
 8001196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800119a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800119e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80011a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80011a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80011aa:	d016      	beq.n	80011da <_dtoa_r+0x382>
 80011ac:	4b94      	ldr	r3, [pc, #592]	; (8001400 <_dtoa_r+0x5a8>)
 80011ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011b6:	f7ff fb29 	bl	800080c <__aeabi_ddiv>
 80011ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011be:	f004 040f 	and.w	r4, r4, #15
 80011c2:	2703      	movs	r7, #3
 80011c4:	4e8e      	ldr	r6, [pc, #568]	; (8001400 <_dtoa_r+0x5a8>)
 80011c6:	b954      	cbnz	r4, 80011de <_dtoa_r+0x386>
 80011c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80011cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011d0:	f7ff fb1c 	bl	800080c <__aeabi_ddiv>
 80011d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011d8:	e029      	b.n	800122e <_dtoa_r+0x3d6>
 80011da:	2702      	movs	r7, #2
 80011dc:	e7f2      	b.n	80011c4 <_dtoa_r+0x36c>
 80011de:	07e1      	lsls	r1, r4, #31
 80011e0:	d508      	bpl.n	80011f4 <_dtoa_r+0x39c>
 80011e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80011e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80011ea:	f7ff f9e5 	bl	80005b8 <__aeabi_dmul>
 80011ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80011f2:	3701      	adds	r7, #1
 80011f4:	1064      	asrs	r4, r4, #1
 80011f6:	3608      	adds	r6, #8
 80011f8:	e7e5      	b.n	80011c6 <_dtoa_r+0x36e>
 80011fa:	f000 80a5 	beq.w	8001348 <_dtoa_r+0x4f0>
 80011fe:	f1ca 0400 	rsb	r4, sl, #0
 8001202:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <_dtoa_r+0x5a4>)
 8001204:	4e7e      	ldr	r6, [pc, #504]	; (8001400 <_dtoa_r+0x5a8>)
 8001206:	f004 020f 	and.w	r2, r4, #15
 800120a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001216:	f7ff f9cf 	bl	80005b8 <__aeabi_dmul>
 800121a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800121e:	1124      	asrs	r4, r4, #4
 8001220:	2300      	movs	r3, #0
 8001222:	2702      	movs	r7, #2
 8001224:	2c00      	cmp	r4, #0
 8001226:	f040 8084 	bne.w	8001332 <_dtoa_r+0x4da>
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1d2      	bne.n	80011d4 <_dtoa_r+0x37c>
 800122e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 808b 	beq.w	800134c <_dtoa_r+0x4f4>
 8001236:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800123a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800123e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001242:	4b70      	ldr	r3, [pc, #448]	; (8001404 <_dtoa_r+0x5ac>)
 8001244:	2200      	movs	r2, #0
 8001246:	f7ff fc43 	bl	8000ad0 <__aeabi_dcmplt>
 800124a:	2800      	cmp	r0, #0
 800124c:	d07e      	beq.n	800134c <_dtoa_r+0x4f4>
 800124e:	9b08      	ldr	r3, [sp, #32]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d07b      	beq.n	800134c <_dtoa_r+0x4f4>
 8001254:	f1b9 0f00 	cmp.w	r9, #0
 8001258:	dd38      	ble.n	80012cc <_dtoa_r+0x474>
 800125a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800125e:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <_dtoa_r+0x5b0>)
 8001260:	2200      	movs	r2, #0
 8001262:	f7ff f9a9 	bl	80005b8 <__aeabi_dmul>
 8001266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800126a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800126e:	3701      	adds	r7, #1
 8001270:	464c      	mov	r4, r9
 8001272:	4638      	mov	r0, r7
 8001274:	f7ff f936 	bl	80004e4 <__aeabi_i2d>
 8001278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800127c:	f7ff f99c 	bl	80005b8 <__aeabi_dmul>
 8001280:	4b62      	ldr	r3, [pc, #392]	; (800140c <_dtoa_r+0x5b4>)
 8001282:	2200      	movs	r2, #0
 8001284:	f7fe ffe2 	bl	800024c <__adddf3>
 8001288:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800128c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001290:	9611      	str	r6, [sp, #68]	; 0x44
 8001292:	2c00      	cmp	r4, #0
 8001294:	d15d      	bne.n	8001352 <_dtoa_r+0x4fa>
 8001296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <_dtoa_r+0x5b8>)
 800129c:	2200      	movs	r2, #0
 800129e:	f7fe ffd3 	bl	8000248 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012ac:	4633      	mov	r3, r6
 80012ae:	f7ff fc2d 	bl	8000b0c <__aeabi_dcmpgt>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	f040 829c 	bne.w	80017f0 <_dtoa_r+0x998>
 80012b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80012c2:	f7ff fc05 	bl	8000ad0 <__aeabi_dcmplt>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	f040 8290 	bne.w	80017ec <_dtoa_r+0x994>
 80012cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80012d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f2c0 8152 	blt.w	8001580 <_dtoa_r+0x728>
 80012dc:	f1ba 0f0e 	cmp.w	sl, #14
 80012e0:	f300 814e 	bgt.w	8001580 <_dtoa_r+0x728>
 80012e4:	4b45      	ldr	r3, [pc, #276]	; (80013fc <_dtoa_r+0x5a4>)
 80012e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80012ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80012f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f280 80db 	bge.w	80014b0 <_dtoa_r+0x658>
 80012fa:	9b08      	ldr	r3, [sp, #32]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f300 80d7 	bgt.w	80014b0 <_dtoa_r+0x658>
 8001302:	f040 8272 	bne.w	80017ea <_dtoa_r+0x992>
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <_dtoa_r+0x5b8>)
 8001308:	2200      	movs	r2, #0
 800130a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800130e:	f7ff f953 	bl	80005b8 <__aeabi_dmul>
 8001312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001316:	f7ff fbef 	bl	8000af8 <__aeabi_dcmpge>
 800131a:	9c08      	ldr	r4, [sp, #32]
 800131c:	4626      	mov	r6, r4
 800131e:	2800      	cmp	r0, #0
 8001320:	f040 8248 	bne.w	80017b4 <_dtoa_r+0x95c>
 8001324:	9f03      	ldr	r7, [sp, #12]
 8001326:	2331      	movs	r3, #49	; 0x31
 8001328:	f807 3b01 	strb.w	r3, [r7], #1
 800132c:	f10a 0a01 	add.w	sl, sl, #1
 8001330:	e244      	b.n	80017bc <_dtoa_r+0x964>
 8001332:	07e2      	lsls	r2, r4, #31
 8001334:	d505      	bpl.n	8001342 <_dtoa_r+0x4ea>
 8001336:	e9d6 2300 	ldrd	r2, r3, [r6]
 800133a:	f7ff f93d 	bl	80005b8 <__aeabi_dmul>
 800133e:	3701      	adds	r7, #1
 8001340:	2301      	movs	r3, #1
 8001342:	1064      	asrs	r4, r4, #1
 8001344:	3608      	adds	r6, #8
 8001346:	e76d      	b.n	8001224 <_dtoa_r+0x3cc>
 8001348:	2702      	movs	r7, #2
 800134a:	e770      	b.n	800122e <_dtoa_r+0x3d6>
 800134c:	9c08      	ldr	r4, [sp, #32]
 800134e:	46d0      	mov	r8, sl
 8001350:	e78f      	b.n	8001272 <_dtoa_r+0x41a>
 8001352:	9903      	ldr	r1, [sp, #12]
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <_dtoa_r+0x5a4>)
 8001356:	4421      	add	r1, r4
 8001358:	9112      	str	r1, [sp, #72]	; 0x48
 800135a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800135c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001360:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001364:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001368:	2900      	cmp	r1, #0
 800136a:	d055      	beq.n	8001418 <_dtoa_r+0x5c0>
 800136c:	4929      	ldr	r1, [pc, #164]	; (8001414 <_dtoa_r+0x5bc>)
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fa4c 	bl	800080c <__aeabi_ddiv>
 8001374:	463b      	mov	r3, r7
 8001376:	4632      	mov	r2, r6
 8001378:	f7fe ff66 	bl	8000248 <__aeabi_dsub>
 800137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001380:	9f03      	ldr	r7, [sp, #12]
 8001382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001386:	f7ff fbe1 	bl	8000b4c <__aeabi_d2iz>
 800138a:	4604      	mov	r4, r0
 800138c:	f7ff f8aa 	bl	80004e4 <__aeabi_i2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001398:	f7fe ff56 	bl	8000248 <__aeabi_dsub>
 800139c:	3430      	adds	r4, #48	; 0x30
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a6:	f807 4b01 	strb.w	r4, [r7], #1
 80013aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013ae:	f7ff fb8f 	bl	8000ad0 <__aeabi_dcmplt>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d174      	bne.n	80014a0 <_dtoa_r+0x648>
 80013b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ba:	4912      	ldr	r1, [pc, #72]	; (8001404 <_dtoa_r+0x5ac>)
 80013bc:	2000      	movs	r0, #0
 80013be:	f7fe ff43 	bl	8000248 <__aeabi_dsub>
 80013c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013c6:	f7ff fb83 	bl	8000ad0 <__aeabi_dcmplt>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	f040 80b7 	bne.w	800153e <_dtoa_r+0x6e6>
 80013d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80013d2:	429f      	cmp	r7, r3
 80013d4:	f43f af7a 	beq.w	80012cc <_dtoa_r+0x474>
 80013d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <_dtoa_r+0x5b0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f7ff f8ea 	bl	80005b8 <__aeabi_dmul>
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_dtoa_r+0x5b0>)
 80013e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013ea:	2200      	movs	r2, #0
 80013ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_dmul>
 80013f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013f8:	e7c3      	b.n	8001382 <_dtoa_r+0x52a>
 80013fa:	bf00      	nop
 80013fc:	0800a0f8 	.word	0x0800a0f8
 8001400:	0800a0d0 	.word	0x0800a0d0
 8001404:	3ff00000 	.word	0x3ff00000
 8001408:	40240000 	.word	0x40240000
 800140c:	401c0000 	.word	0x401c0000
 8001410:	40140000 	.word	0x40140000
 8001414:	3fe00000 	.word	0x3fe00000
 8001418:	4630      	mov	r0, r6
 800141a:	4639      	mov	r1, r7
 800141c:	f7ff f8cc 	bl	80005b8 <__aeabi_dmul>
 8001420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001426:	9c03      	ldr	r4, [sp, #12]
 8001428:	9314      	str	r3, [sp, #80]	; 0x50
 800142a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800142e:	f7ff fb8d 	bl	8000b4c <__aeabi_d2iz>
 8001432:	9015      	str	r0, [sp, #84]	; 0x54
 8001434:	f7ff f856 	bl	80004e4 <__aeabi_i2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001440:	f7fe ff02 	bl	8000248 <__aeabi_dsub>
 8001444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001446:	3330      	adds	r3, #48	; 0x30
 8001448:	f804 3b01 	strb.w	r3, [r4], #1
 800144c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800144e:	429c      	cmp	r4, r3
 8001450:	4606      	mov	r6, r0
 8001452:	460f      	mov	r7, r1
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	d124      	bne.n	80014a4 <_dtoa_r+0x64c>
 800145a:	4ba4      	ldr	r3, [pc, #656]	; (80016ec <_dtoa_r+0x894>)
 800145c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001460:	f7fe fef4 	bl	800024c <__adddf3>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4630      	mov	r0, r6
 800146a:	4639      	mov	r1, r7
 800146c:	f7ff fb4e 	bl	8000b0c <__aeabi_dcmpgt>
 8001470:	2800      	cmp	r0, #0
 8001472:	d163      	bne.n	800153c <_dtoa_r+0x6e4>
 8001474:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001478:	499c      	ldr	r1, [pc, #624]	; (80016ec <_dtoa_r+0x894>)
 800147a:	2000      	movs	r0, #0
 800147c:	f7fe fee4 	bl	8000248 <__aeabi_dsub>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4630      	mov	r0, r6
 8001486:	4639      	mov	r1, r7
 8001488:	f7ff fb22 	bl	8000ad0 <__aeabi_dcmplt>
 800148c:	2800      	cmp	r0, #0
 800148e:	f43f af1d 	beq.w	80012cc <_dtoa_r+0x474>
 8001492:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001494:	1e7b      	subs	r3, r7, #1
 8001496:	9314      	str	r3, [sp, #80]	; 0x50
 8001498:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800149c:	2b30      	cmp	r3, #48	; 0x30
 800149e:	d0f8      	beq.n	8001492 <_dtoa_r+0x63a>
 80014a0:	46c2      	mov	sl, r8
 80014a2:	e03b      	b.n	800151c <_dtoa_r+0x6c4>
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <_dtoa_r+0x898>)
 80014a6:	f7ff f887 	bl	80005b8 <__aeabi_dmul>
 80014aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014ae:	e7bc      	b.n	800142a <_dtoa_r+0x5d2>
 80014b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80014b4:	9f03      	ldr	r7, [sp, #12]
 80014b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014ba:	4640      	mov	r0, r8
 80014bc:	4649      	mov	r1, r9
 80014be:	f7ff f9a5 	bl	800080c <__aeabi_ddiv>
 80014c2:	f7ff fb43 	bl	8000b4c <__aeabi_d2iz>
 80014c6:	4604      	mov	r4, r0
 80014c8:	f7ff f80c 	bl	80004e4 <__aeabi_i2d>
 80014cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_dmul>
 80014d4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4640      	mov	r0, r8
 80014de:	4649      	mov	r1, r9
 80014e0:	f7fe feb2 	bl	8000248 <__aeabi_dsub>
 80014e4:	f807 6b01 	strb.w	r6, [r7], #1
 80014e8:	9e03      	ldr	r6, [sp, #12]
 80014ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80014ee:	1bbe      	subs	r6, r7, r6
 80014f0:	45b4      	cmp	ip, r6
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	d136      	bne.n	8001566 <_dtoa_r+0x70e>
 80014f8:	f7fe fea8 	bl	800024c <__adddf3>
 80014fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001500:	4680      	mov	r8, r0
 8001502:	4689      	mov	r9, r1
 8001504:	f7ff fb02 	bl	8000b0c <__aeabi_dcmpgt>
 8001508:	bb58      	cbnz	r0, 8001562 <_dtoa_r+0x70a>
 800150a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800150e:	4640      	mov	r0, r8
 8001510:	4649      	mov	r1, r9
 8001512:	f7ff fad3 	bl	8000abc <__aeabi_dcmpeq>
 8001516:	b108      	cbz	r0, 800151c <_dtoa_r+0x6c4>
 8001518:	07e1      	lsls	r1, r4, #31
 800151a:	d422      	bmi.n	8001562 <_dtoa_r+0x70a>
 800151c:	4628      	mov	r0, r5
 800151e:	4659      	mov	r1, fp
 8001520:	f005 fcb0 	bl	8006e84 <_Bfree>
 8001524:	2300      	movs	r3, #0
 8001526:	703b      	strb	r3, [r7, #0]
 8001528:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800152a:	f10a 0001 	add.w	r0, sl, #1
 800152e:	6018      	str	r0, [r3, #0]
 8001530:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001532:	2b00      	cmp	r3, #0
 8001534:	f43f acdd 	beq.w	8000ef2 <_dtoa_r+0x9a>
 8001538:	601f      	str	r7, [r3, #0]
 800153a:	e4da      	b.n	8000ef2 <_dtoa_r+0x9a>
 800153c:	4627      	mov	r7, r4
 800153e:	463b      	mov	r3, r7
 8001540:	461f      	mov	r7, r3
 8001542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001546:	2a39      	cmp	r2, #57	; 0x39
 8001548:	d107      	bne.n	800155a <_dtoa_r+0x702>
 800154a:	9a03      	ldr	r2, [sp, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d1f7      	bne.n	8001540 <_dtoa_r+0x6e8>
 8001550:	9903      	ldr	r1, [sp, #12]
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	f108 0801 	add.w	r8, r8, #1
 8001558:	700a      	strb	r2, [r1, #0]
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	3201      	adds	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e79e      	b.n	80014a0 <_dtoa_r+0x648>
 8001562:	46d0      	mov	r8, sl
 8001564:	e7eb      	b.n	800153e <_dtoa_r+0x6e6>
 8001566:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <_dtoa_r+0x898>)
 8001568:	2200      	movs	r2, #0
 800156a:	f7ff f825 	bl	80005b8 <__aeabi_dmul>
 800156e:	2200      	movs	r2, #0
 8001570:	2300      	movs	r3, #0
 8001572:	4680      	mov	r8, r0
 8001574:	4689      	mov	r9, r1
 8001576:	f7ff faa1 	bl	8000abc <__aeabi_dcmpeq>
 800157a:	2800      	cmp	r0, #0
 800157c:	d09b      	beq.n	80014b6 <_dtoa_r+0x65e>
 800157e:	e7cd      	b.n	800151c <_dtoa_r+0x6c4>
 8001580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001582:	2a00      	cmp	r2, #0
 8001584:	f000 80d0 	beq.w	8001728 <_dtoa_r+0x8d0>
 8001588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800158a:	2a01      	cmp	r2, #1
 800158c:	f300 80b2 	bgt.w	80016f4 <_dtoa_r+0x89c>
 8001590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001592:	2a00      	cmp	r2, #0
 8001594:	f000 80a6 	beq.w	80016e4 <_dtoa_r+0x88c>
 8001598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800159c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800159e:	9f06      	ldr	r7, [sp, #24]
 80015a0:	9a06      	ldr	r2, [sp, #24]
 80015a2:	441a      	add	r2, r3
 80015a4:	9206      	str	r2, [sp, #24]
 80015a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015a8:	2101      	movs	r1, #1
 80015aa:	441a      	add	r2, r3
 80015ac:	4628      	mov	r0, r5
 80015ae:	9209      	str	r2, [sp, #36]	; 0x24
 80015b0:	f005 fcd0 	bl	8006f54 <__i2b>
 80015b4:	4606      	mov	r6, r0
 80015b6:	2f00      	cmp	r7, #0
 80015b8:	dd0c      	ble.n	80015d4 <_dtoa_r+0x77c>
 80015ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dd09      	ble.n	80015d4 <_dtoa_r+0x77c>
 80015c0:	42bb      	cmp	r3, r7
 80015c2:	9a06      	ldr	r2, [sp, #24]
 80015c4:	bfa8      	it	ge
 80015c6:	463b      	movge	r3, r7
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	9206      	str	r2, [sp, #24]
 80015cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015ce:	1aff      	subs	r7, r7, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	9309      	str	r3, [sp, #36]	; 0x24
 80015d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d6:	b1f3      	cbz	r3, 8001616 <_dtoa_r+0x7be>
 80015d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80a8 	beq.w	8001730 <_dtoa_r+0x8d8>
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	dd10      	ble.n	8001606 <_dtoa_r+0x7ae>
 80015e4:	4631      	mov	r1, r6
 80015e6:	4622      	mov	r2, r4
 80015e8:	4628      	mov	r0, r5
 80015ea:	f005 fd71 	bl	80070d0 <__pow5mult>
 80015ee:	465a      	mov	r2, fp
 80015f0:	4601      	mov	r1, r0
 80015f2:	4606      	mov	r6, r0
 80015f4:	4628      	mov	r0, r5
 80015f6:	f005 fcc3 	bl	8006f80 <__multiply>
 80015fa:	4659      	mov	r1, fp
 80015fc:	4680      	mov	r8, r0
 80015fe:	4628      	mov	r0, r5
 8001600:	f005 fc40 	bl	8006e84 <_Bfree>
 8001604:	46c3      	mov	fp, r8
 8001606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001608:	1b1a      	subs	r2, r3, r4
 800160a:	d004      	beq.n	8001616 <_dtoa_r+0x7be>
 800160c:	4659      	mov	r1, fp
 800160e:	4628      	mov	r0, r5
 8001610:	f005 fd5e 	bl	80070d0 <__pow5mult>
 8001614:	4683      	mov	fp, r0
 8001616:	2101      	movs	r1, #1
 8001618:	4628      	mov	r0, r5
 800161a:	f005 fc9b 	bl	8006f54 <__i2b>
 800161e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001620:	2b00      	cmp	r3, #0
 8001622:	4604      	mov	r4, r0
 8001624:	f340 8086 	ble.w	8001734 <_dtoa_r+0x8dc>
 8001628:	461a      	mov	r2, r3
 800162a:	4601      	mov	r1, r0
 800162c:	4628      	mov	r0, r5
 800162e:	f005 fd4f 	bl	80070d0 <__pow5mult>
 8001632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001634:	2b01      	cmp	r3, #1
 8001636:	4604      	mov	r4, r0
 8001638:	dd7f      	ble.n	800173a <_dtoa_r+0x8e2>
 800163a:	f04f 0800 	mov.w	r8, #0
 800163e:	6923      	ldr	r3, [r4, #16]
 8001640:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001644:	6918      	ldr	r0, [r3, #16]
 8001646:	f008 f92c 	bl	80098a2 <__hi0bits>
 800164a:	f1c0 0020 	rsb	r0, r0, #32
 800164e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001650:	4418      	add	r0, r3
 8001652:	f010 001f 	ands.w	r0, r0, #31
 8001656:	f000 8092 	beq.w	800177e <_dtoa_r+0x926>
 800165a:	f1c0 0320 	rsb	r3, r0, #32
 800165e:	2b04      	cmp	r3, #4
 8001660:	f340 808a 	ble.w	8001778 <_dtoa_r+0x920>
 8001664:	f1c0 001c 	rsb	r0, r0, #28
 8001668:	9b06      	ldr	r3, [sp, #24]
 800166a:	4403      	add	r3, r0
 800166c:	9306      	str	r3, [sp, #24]
 800166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001670:	4403      	add	r3, r0
 8001672:	4407      	add	r7, r0
 8001674:	9309      	str	r3, [sp, #36]	; 0x24
 8001676:	9b06      	ldr	r3, [sp, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd05      	ble.n	8001688 <_dtoa_r+0x830>
 800167c:	4659      	mov	r1, fp
 800167e:	461a      	mov	r2, r3
 8001680:	4628      	mov	r0, r5
 8001682:	f005 fd7f 	bl	8007184 <__lshift>
 8001686:	4683      	mov	fp, r0
 8001688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd05      	ble.n	800169a <_dtoa_r+0x842>
 800168e:	4621      	mov	r1, r4
 8001690:	461a      	mov	r2, r3
 8001692:	4628      	mov	r0, r5
 8001694:	f005 fd76 	bl	8007184 <__lshift>
 8001698:	4604      	mov	r4, r0
 800169a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d070      	beq.n	8001782 <_dtoa_r+0x92a>
 80016a0:	4621      	mov	r1, r4
 80016a2:	4658      	mov	r0, fp
 80016a4:	f008 f94a 	bl	800993c <__mcmp>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	da6a      	bge.n	8001782 <_dtoa_r+0x92a>
 80016ac:	2300      	movs	r3, #0
 80016ae:	4659      	mov	r1, fp
 80016b0:	220a      	movs	r2, #10
 80016b2:	4628      	mov	r0, r5
 80016b4:	f005 fc08 	bl	8006ec8 <__multadd>
 80016b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80016be:	4683      	mov	fp, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8194 	beq.w	80019ee <_dtoa_r+0xb96>
 80016c6:	4631      	mov	r1, r6
 80016c8:	2300      	movs	r3, #0
 80016ca:	220a      	movs	r2, #10
 80016cc:	4628      	mov	r0, r5
 80016ce:	f005 fbfb 	bl	8006ec8 <__multadd>
 80016d2:	f1b9 0f00 	cmp.w	r9, #0
 80016d6:	4606      	mov	r6, r0
 80016d8:	f300 8093 	bgt.w	8001802 <_dtoa_r+0x9aa>
 80016dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016de:	2b02      	cmp	r3, #2
 80016e0:	dc57      	bgt.n	8001792 <_dtoa_r+0x93a>
 80016e2:	e08e      	b.n	8001802 <_dtoa_r+0x9aa>
 80016e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80016ea:	e757      	b.n	800159c <_dtoa_r+0x744>
 80016ec:	3fe00000 	.word	0x3fe00000
 80016f0:	40240000 	.word	0x40240000
 80016f4:	9b08      	ldr	r3, [sp, #32]
 80016f6:	1e5c      	subs	r4, r3, #1
 80016f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016fa:	42a3      	cmp	r3, r4
 80016fc:	bfbf      	itttt	lt
 80016fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001700:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001702:	1ae2      	sublt	r2, r4, r3
 8001704:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001706:	bfb6      	itet	lt
 8001708:	189b      	addlt	r3, r3, r2
 800170a:	1b1c      	subge	r4, r3, r4
 800170c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800170e:	9b08      	ldr	r3, [sp, #32]
 8001710:	bfb8      	it	lt
 8001712:	2400      	movlt	r4, #0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bfb9      	ittee	lt
 8001718:	9b06      	ldrlt	r3, [sp, #24]
 800171a:	9a08      	ldrlt	r2, [sp, #32]
 800171c:	9f06      	ldrge	r7, [sp, #24]
 800171e:	9b08      	ldrge	r3, [sp, #32]
 8001720:	bfbc      	itt	lt
 8001722:	1a9f      	sublt	r7, r3, r2
 8001724:	2300      	movlt	r3, #0
 8001726:	e73b      	b.n	80015a0 <_dtoa_r+0x748>
 8001728:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800172a:	9f06      	ldr	r7, [sp, #24]
 800172c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800172e:	e742      	b.n	80015b6 <_dtoa_r+0x75e>
 8001730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001732:	e76b      	b.n	800160c <_dtoa_r+0x7b4>
 8001734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001736:	2b01      	cmp	r3, #1
 8001738:	dc19      	bgt.n	800176e <_dtoa_r+0x916>
 800173a:	9b04      	ldr	r3, [sp, #16]
 800173c:	b9bb      	cbnz	r3, 800176e <_dtoa_r+0x916>
 800173e:	9b05      	ldr	r3, [sp, #20]
 8001740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001744:	b99b      	cbnz	r3, 800176e <_dtoa_r+0x916>
 8001746:	9b05      	ldr	r3, [sp, #20]
 8001748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800174c:	0d1b      	lsrs	r3, r3, #20
 800174e:	051b      	lsls	r3, r3, #20
 8001750:	b183      	cbz	r3, 8001774 <_dtoa_r+0x91c>
 8001752:	9b06      	ldr	r3, [sp, #24]
 8001754:	3301      	adds	r3, #1
 8001756:	9306      	str	r3, [sp, #24]
 8001758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800175a:	3301      	adds	r3, #1
 800175c:	9309      	str	r3, [sp, #36]	; 0x24
 800175e:	f04f 0801 	mov.w	r8, #1
 8001762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f af6a 	bne.w	800163e <_dtoa_r+0x7e6>
 800176a:	2001      	movs	r0, #1
 800176c:	e76f      	b.n	800164e <_dtoa_r+0x7f6>
 800176e:	f04f 0800 	mov.w	r8, #0
 8001772:	e7f6      	b.n	8001762 <_dtoa_r+0x90a>
 8001774:	4698      	mov	r8, r3
 8001776:	e7f4      	b.n	8001762 <_dtoa_r+0x90a>
 8001778:	f43f af7d 	beq.w	8001676 <_dtoa_r+0x81e>
 800177c:	4618      	mov	r0, r3
 800177e:	301c      	adds	r0, #28
 8001780:	e772      	b.n	8001668 <_dtoa_r+0x810>
 8001782:	9b08      	ldr	r3, [sp, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dc36      	bgt.n	80017f6 <_dtoa_r+0x99e>
 8001788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800178a:	2b02      	cmp	r3, #2
 800178c:	dd33      	ble.n	80017f6 <_dtoa_r+0x99e>
 800178e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001792:	f1b9 0f00 	cmp.w	r9, #0
 8001796:	d10d      	bne.n	80017b4 <_dtoa_r+0x95c>
 8001798:	4621      	mov	r1, r4
 800179a:	464b      	mov	r3, r9
 800179c:	2205      	movs	r2, #5
 800179e:	4628      	mov	r0, r5
 80017a0:	f005 fb92 	bl	8006ec8 <__multadd>
 80017a4:	4601      	mov	r1, r0
 80017a6:	4604      	mov	r4, r0
 80017a8:	4658      	mov	r0, fp
 80017aa:	f008 f8c7 	bl	800993c <__mcmp>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	f73f adb8 	bgt.w	8001324 <_dtoa_r+0x4cc>
 80017b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80017b6:	9f03      	ldr	r7, [sp, #12]
 80017b8:	ea6f 0a03 	mvn.w	sl, r3
 80017bc:	f04f 0800 	mov.w	r8, #0
 80017c0:	4621      	mov	r1, r4
 80017c2:	4628      	mov	r0, r5
 80017c4:	f005 fb5e 	bl	8006e84 <_Bfree>
 80017c8:	2e00      	cmp	r6, #0
 80017ca:	f43f aea7 	beq.w	800151c <_dtoa_r+0x6c4>
 80017ce:	f1b8 0f00 	cmp.w	r8, #0
 80017d2:	d005      	beq.n	80017e0 <_dtoa_r+0x988>
 80017d4:	45b0      	cmp	r8, r6
 80017d6:	d003      	beq.n	80017e0 <_dtoa_r+0x988>
 80017d8:	4641      	mov	r1, r8
 80017da:	4628      	mov	r0, r5
 80017dc:	f005 fb52 	bl	8006e84 <_Bfree>
 80017e0:	4631      	mov	r1, r6
 80017e2:	4628      	mov	r0, r5
 80017e4:	f005 fb4e 	bl	8006e84 <_Bfree>
 80017e8:	e698      	b.n	800151c <_dtoa_r+0x6c4>
 80017ea:	2400      	movs	r4, #0
 80017ec:	4626      	mov	r6, r4
 80017ee:	e7e1      	b.n	80017b4 <_dtoa_r+0x95c>
 80017f0:	46c2      	mov	sl, r8
 80017f2:	4626      	mov	r6, r4
 80017f4:	e596      	b.n	8001324 <_dtoa_r+0x4cc>
 80017f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80fd 	beq.w	80019fc <_dtoa_r+0xba4>
 8001802:	2f00      	cmp	r7, #0
 8001804:	dd05      	ble.n	8001812 <_dtoa_r+0x9ba>
 8001806:	4631      	mov	r1, r6
 8001808:	463a      	mov	r2, r7
 800180a:	4628      	mov	r0, r5
 800180c:	f005 fcba 	bl	8007184 <__lshift>
 8001810:	4606      	mov	r6, r0
 8001812:	f1b8 0f00 	cmp.w	r8, #0
 8001816:	d05c      	beq.n	80018d2 <_dtoa_r+0xa7a>
 8001818:	6871      	ldr	r1, [r6, #4]
 800181a:	4628      	mov	r0, r5
 800181c:	f005 faf2 	bl	8006e04 <_Balloc>
 8001820:	4607      	mov	r7, r0
 8001822:	b928      	cbnz	r0, 8001830 <_dtoa_r+0x9d8>
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <_dtoa_r+0xbd0>)
 8001826:	4602      	mov	r2, r0
 8001828:	f240 21ea 	movw	r1, #746	; 0x2ea
 800182c:	f7ff bb28 	b.w	8000e80 <_dtoa_r+0x28>
 8001830:	6932      	ldr	r2, [r6, #16]
 8001832:	3202      	adds	r2, #2
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	f106 010c 	add.w	r1, r6, #12
 800183a:	300c      	adds	r0, #12
 800183c:	f007 fe6a 	bl	8009514 <memcpy>
 8001840:	2201      	movs	r2, #1
 8001842:	4639      	mov	r1, r7
 8001844:	4628      	mov	r0, r5
 8001846:	f005 fc9d 	bl	8007184 <__lshift>
 800184a:	9b03      	ldr	r3, [sp, #12]
 800184c:	3301      	adds	r3, #1
 800184e:	9308      	str	r3, [sp, #32]
 8001850:	9b03      	ldr	r3, [sp, #12]
 8001852:	444b      	add	r3, r9
 8001854:	930a      	str	r3, [sp, #40]	; 0x28
 8001856:	9b04      	ldr	r3, [sp, #16]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	46b0      	mov	r8, r6
 800185e:	9309      	str	r3, [sp, #36]	; 0x24
 8001860:	4606      	mov	r6, r0
 8001862:	9b08      	ldr	r3, [sp, #32]
 8001864:	4621      	mov	r1, r4
 8001866:	3b01      	subs	r3, #1
 8001868:	4658      	mov	r0, fp
 800186a:	9304      	str	r3, [sp, #16]
 800186c:	f007 ff92 	bl	8009794 <quorem>
 8001870:	4603      	mov	r3, r0
 8001872:	3330      	adds	r3, #48	; 0x30
 8001874:	9006      	str	r0, [sp, #24]
 8001876:	4641      	mov	r1, r8
 8001878:	4658      	mov	r0, fp
 800187a:	930b      	str	r3, [sp, #44]	; 0x2c
 800187c:	f008 f85e 	bl	800993c <__mcmp>
 8001880:	4632      	mov	r2, r6
 8001882:	4681      	mov	r9, r0
 8001884:	4621      	mov	r1, r4
 8001886:	4628      	mov	r0, r5
 8001888:	f005 fcec 	bl	8007264 <__mdiff>
 800188c:	68c2      	ldr	r2, [r0, #12]
 800188e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001890:	4607      	mov	r7, r0
 8001892:	bb02      	cbnz	r2, 80018d6 <_dtoa_r+0xa7e>
 8001894:	4601      	mov	r1, r0
 8001896:	4658      	mov	r0, fp
 8001898:	f008 f850 	bl	800993c <__mcmp>
 800189c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800189e:	4602      	mov	r2, r0
 80018a0:	4639      	mov	r1, r7
 80018a2:	4628      	mov	r0, r5
 80018a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80018a8:	f005 faec 	bl	8006e84 <_Bfree>
 80018ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018b0:	9f08      	ldr	r7, [sp, #32]
 80018b2:	ea43 0102 	orr.w	r1, r3, r2
 80018b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018b8:	430b      	orrs	r3, r1
 80018ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018bc:	d10d      	bne.n	80018da <_dtoa_r+0xa82>
 80018be:	2b39      	cmp	r3, #57	; 0x39
 80018c0:	d029      	beq.n	8001916 <_dtoa_r+0xabe>
 80018c2:	f1b9 0f00 	cmp.w	r9, #0
 80018c6:	dd01      	ble.n	80018cc <_dtoa_r+0xa74>
 80018c8:	9b06      	ldr	r3, [sp, #24]
 80018ca:	3331      	adds	r3, #49	; 0x31
 80018cc:	9a04      	ldr	r2, [sp, #16]
 80018ce:	7013      	strb	r3, [r2, #0]
 80018d0:	e776      	b.n	80017c0 <_dtoa_r+0x968>
 80018d2:	4630      	mov	r0, r6
 80018d4:	e7b9      	b.n	800184a <_dtoa_r+0x9f2>
 80018d6:	2201      	movs	r2, #1
 80018d8:	e7e2      	b.n	80018a0 <_dtoa_r+0xa48>
 80018da:	f1b9 0f00 	cmp.w	r9, #0
 80018de:	db06      	blt.n	80018ee <_dtoa_r+0xa96>
 80018e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80018e2:	ea41 0909 	orr.w	r9, r1, r9
 80018e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018e8:	ea59 0101 	orrs.w	r1, r9, r1
 80018ec:	d120      	bne.n	8001930 <_dtoa_r+0xad8>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	ddec      	ble.n	80018cc <_dtoa_r+0xa74>
 80018f2:	4659      	mov	r1, fp
 80018f4:	2201      	movs	r2, #1
 80018f6:	4628      	mov	r0, r5
 80018f8:	9308      	str	r3, [sp, #32]
 80018fa:	f005 fc43 	bl	8007184 <__lshift>
 80018fe:	4621      	mov	r1, r4
 8001900:	4683      	mov	fp, r0
 8001902:	f008 f81b 	bl	800993c <__mcmp>
 8001906:	2800      	cmp	r0, #0
 8001908:	9b08      	ldr	r3, [sp, #32]
 800190a:	dc02      	bgt.n	8001912 <_dtoa_r+0xaba>
 800190c:	d1de      	bne.n	80018cc <_dtoa_r+0xa74>
 800190e:	07da      	lsls	r2, r3, #31
 8001910:	d5dc      	bpl.n	80018cc <_dtoa_r+0xa74>
 8001912:	2b39      	cmp	r3, #57	; 0x39
 8001914:	d1d8      	bne.n	80018c8 <_dtoa_r+0xa70>
 8001916:	9a04      	ldr	r2, [sp, #16]
 8001918:	2339      	movs	r3, #57	; 0x39
 800191a:	7013      	strb	r3, [r2, #0]
 800191c:	463b      	mov	r3, r7
 800191e:	461f      	mov	r7, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001926:	2a39      	cmp	r2, #57	; 0x39
 8001928:	d050      	beq.n	80019cc <_dtoa_r+0xb74>
 800192a:	3201      	adds	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e747      	b.n	80017c0 <_dtoa_r+0x968>
 8001930:	2a00      	cmp	r2, #0
 8001932:	dd03      	ble.n	800193c <_dtoa_r+0xae4>
 8001934:	2b39      	cmp	r3, #57	; 0x39
 8001936:	d0ee      	beq.n	8001916 <_dtoa_r+0xabe>
 8001938:	3301      	adds	r3, #1
 800193a:	e7c7      	b.n	80018cc <_dtoa_r+0xa74>
 800193c:	9a08      	ldr	r2, [sp, #32]
 800193e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001940:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001944:	428a      	cmp	r2, r1
 8001946:	d02a      	beq.n	800199e <_dtoa_r+0xb46>
 8001948:	4659      	mov	r1, fp
 800194a:	2300      	movs	r3, #0
 800194c:	220a      	movs	r2, #10
 800194e:	4628      	mov	r0, r5
 8001950:	f005 faba 	bl	8006ec8 <__multadd>
 8001954:	45b0      	cmp	r8, r6
 8001956:	4683      	mov	fp, r0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	f04f 020a 	mov.w	r2, #10
 8001960:	4641      	mov	r1, r8
 8001962:	4628      	mov	r0, r5
 8001964:	d107      	bne.n	8001976 <_dtoa_r+0xb1e>
 8001966:	f005 faaf 	bl	8006ec8 <__multadd>
 800196a:	4680      	mov	r8, r0
 800196c:	4606      	mov	r6, r0
 800196e:	9b08      	ldr	r3, [sp, #32]
 8001970:	3301      	adds	r3, #1
 8001972:	9308      	str	r3, [sp, #32]
 8001974:	e775      	b.n	8001862 <_dtoa_r+0xa0a>
 8001976:	f005 faa7 	bl	8006ec8 <__multadd>
 800197a:	4631      	mov	r1, r6
 800197c:	4680      	mov	r8, r0
 800197e:	2300      	movs	r3, #0
 8001980:	220a      	movs	r2, #10
 8001982:	4628      	mov	r0, r5
 8001984:	f005 faa0 	bl	8006ec8 <__multadd>
 8001988:	4606      	mov	r6, r0
 800198a:	e7f0      	b.n	800196e <_dtoa_r+0xb16>
 800198c:	f1b9 0f00 	cmp.w	r9, #0
 8001990:	9a03      	ldr	r2, [sp, #12]
 8001992:	bfcc      	ite	gt
 8001994:	464f      	movgt	r7, r9
 8001996:	2701      	movle	r7, #1
 8001998:	4417      	add	r7, r2
 800199a:	f04f 0800 	mov.w	r8, #0
 800199e:	4659      	mov	r1, fp
 80019a0:	2201      	movs	r2, #1
 80019a2:	4628      	mov	r0, r5
 80019a4:	9308      	str	r3, [sp, #32]
 80019a6:	f005 fbed 	bl	8007184 <__lshift>
 80019aa:	4621      	mov	r1, r4
 80019ac:	4683      	mov	fp, r0
 80019ae:	f007 ffc5 	bl	800993c <__mcmp>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	dcb2      	bgt.n	800191c <_dtoa_r+0xac4>
 80019b6:	d102      	bne.n	80019be <_dtoa_r+0xb66>
 80019b8:	9b08      	ldr	r3, [sp, #32]
 80019ba:	07db      	lsls	r3, r3, #31
 80019bc:	d4ae      	bmi.n	800191c <_dtoa_r+0xac4>
 80019be:	463b      	mov	r3, r7
 80019c0:	461f      	mov	r7, r3
 80019c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80019c6:	2a30      	cmp	r2, #48	; 0x30
 80019c8:	d0fa      	beq.n	80019c0 <_dtoa_r+0xb68>
 80019ca:	e6f9      	b.n	80017c0 <_dtoa_r+0x968>
 80019cc:	9a03      	ldr	r2, [sp, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d1a5      	bne.n	800191e <_dtoa_r+0xac6>
 80019d2:	f10a 0a01 	add.w	sl, sl, #1
 80019d6:	2331      	movs	r3, #49	; 0x31
 80019d8:	e779      	b.n	80018ce <_dtoa_r+0xa76>
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <_dtoa_r+0xbd4>)
 80019dc:	f7ff baa7 	b.w	8000f2e <_dtoa_r+0xd6>
 80019e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f aa80 	bne.w	8000ee8 <_dtoa_r+0x90>
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_dtoa_r+0xbd8>)
 80019ea:	f7ff baa0 	b.w	8000f2e <_dtoa_r+0xd6>
 80019ee:	f1b9 0f00 	cmp.w	r9, #0
 80019f2:	dc03      	bgt.n	80019fc <_dtoa_r+0xba4>
 80019f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f73f aecb 	bgt.w	8001792 <_dtoa_r+0x93a>
 80019fc:	9f03      	ldr	r7, [sp, #12]
 80019fe:	4621      	mov	r1, r4
 8001a00:	4658      	mov	r0, fp
 8001a02:	f007 fec7 	bl	8009794 <quorem>
 8001a06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001a0a:	f807 3b01 	strb.w	r3, [r7], #1
 8001a0e:	9a03      	ldr	r2, [sp, #12]
 8001a10:	1aba      	subs	r2, r7, r2
 8001a12:	4591      	cmp	r9, r2
 8001a14:	ddba      	ble.n	800198c <_dtoa_r+0xb34>
 8001a16:	4659      	mov	r1, fp
 8001a18:	2300      	movs	r3, #0
 8001a1a:	220a      	movs	r2, #10
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f005 fa53 	bl	8006ec8 <__multadd>
 8001a22:	4683      	mov	fp, r0
 8001a24:	e7eb      	b.n	80019fe <_dtoa_r+0xba6>
 8001a26:	bf00      	nop
 8001a28:	0800ae73 	.word	0x0800ae73
 8001a2c:	0800add1 	.word	0x0800add1
 8001a30:	0800adf5 	.word	0x0800adf5

08001a34 <read_write_message>:
    read_write_message(&cur_msg, &rx_msg, false);
//     = *( (*uint32_t)rx_buf );

}

void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	4607      	mov	r7, r0
 8001a3a:	460e      	mov	r6, r1
 8001a3c:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001a3e:	2400      	movs	r4, #0
 8001a40:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a44:	e008      	b.n	8001a58 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                if (write) {
 8001a46:	b1dd      	cbz	r5, 8001a80 <read_write_message+0x4c>
                    fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001a48:	f10d 0307 	add.w	r3, sp, #7
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	7831      	ldrb	r1, [r6, #0]
 8001a50:	4638      	mov	r0, r7
 8001a52:	f006 f94c 	bl	8007cee <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a56:	3401      	adds	r4, #1
 8001a58:	2c05      	cmp	r4, #5
 8001a5a:	dc6e      	bgt.n	8001b3a <read_write_message+0x106>
        switch (cur_field) {
 8001a5c:	2c05      	cmp	r4, #5
 8001a5e:	d8fa      	bhi.n	8001a56 <read_write_message+0x22>
 8001a60:	a301      	add	r3, pc, #4	; (adr r3, 8001a68 <read_write_message+0x34>)
 8001a62:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a47 	.word	0x08001a47
 8001a6c:	08001a91 	.word	0x08001a91
 8001a70:	08001ab3 	.word	0x08001ab3
 8001a74:	08001ad5 	.word	0x08001ad5
 8001a78:	08001af7 	.word	0x08001af7
 8001a7c:	08001b19 	.word	0x08001b19
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001a80:	f10d 0307 	add.w	r3, sp, #7
 8001a84:	2202      	movs	r2, #2
 8001a86:	4631      	mov	r1, r6
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f006 f94d 	bl	8007d28 <extract_msg_bit_field>
 8001a8e:	e7e2      	b.n	8001a56 <read_write_message+0x22>
                }
                break;
            case RECEIVER_ADDR:
                if (write) {
 8001a90:	b13d      	cbz	r5, 8001aa2 <read_write_message+0x6e>
                    fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8001a92:	f10d 0307 	add.w	r3, sp, #7
 8001a96:	2203      	movs	r2, #3
 8001a98:	7871      	ldrb	r1, [r6, #1]
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f006 f927 	bl	8007cee <fill_msg_bit_field>
 8001aa0:	e7d9      	b.n	8001a56 <read_write_message+0x22>
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8001aa2:	f10d 0307 	add.w	r3, sp, #7
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	1c71      	adds	r1, r6, #1
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f006 f93c 	bl	8007d28 <extract_msg_bit_field>
 8001ab0:	e7d1      	b.n	8001a56 <read_write_message+0x22>
                }
                break;
            case MESSAGE_TYPE:
                if (write) {
 8001ab2:	b13d      	cbz	r5, 8001ac4 <read_write_message+0x90>
                    fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8001ab4:	f10d 0307 	add.w	r3, sp, #7
 8001ab8:	2204      	movs	r2, #4
 8001aba:	78b1      	ldrb	r1, [r6, #2]
 8001abc:	4638      	mov	r0, r7
 8001abe:	f006 f916 	bl	8007cee <fill_msg_bit_field>
 8001ac2:	e7c8      	b.n	8001a56 <read_write_message+0x22>
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8001ac4:	f10d 0307 	add.w	r3, sp, #7
 8001ac8:	2204      	movs	r2, #4
 8001aca:	1cb1      	adds	r1, r6, #2
 8001acc:	4638      	mov	r0, r7
 8001ace:	f006 f92b 	bl	8007d28 <extract_msg_bit_field>
 8001ad2:	e7c0      	b.n	8001a56 <read_write_message+0x22>
                }
                break;
            case DIRECTION:
                if (write) {
 8001ad4:	b13d      	cbz	r5, 8001ae6 <read_write_message+0xb2>
                    fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8001ad6:	f10d 0307 	add.w	r3, sp, #7
 8001ada:	2201      	movs	r2, #1
 8001adc:	78f1      	ldrb	r1, [r6, #3]
 8001ade:	4638      	mov	r0, r7
 8001ae0:	f006 f905 	bl	8007cee <fill_msg_bit_field>
 8001ae4:	e7b7      	b.n	8001a56 <read_write_message+0x22>
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8001ae6:	f10d 0307 	add.w	r3, sp, #7
 8001aea:	2201      	movs	r2, #1
 8001aec:	1cf1      	adds	r1, r6, #3
 8001aee:	4638      	mov	r0, r7
 8001af0:	f006 f91a 	bl	8007d28 <extract_msg_bit_field>
 8001af4:	e7af      	b.n	8001a56 <read_write_message+0x22>
                }
                break;
            case BATTERY:
                if (write) {
 8001af6:	b13d      	cbz	r5, 8001b08 <read_write_message+0xd4>
                    fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001af8:	f10d 0307 	add.w	r3, sp, #7
 8001afc:	2201      	movs	r2, #1
 8001afe:	7931      	ldrb	r1, [r6, #4]
 8001b00:	4638      	mov	r0, r7
 8001b02:	f006 f8f4 	bl	8007cee <fill_msg_bit_field>
 8001b06:	e7a6      	b.n	8001a56 <read_write_message+0x22>
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001b08:	f10d 0307 	add.w	r3, sp, #7
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	1d31      	adds	r1, r6, #4
 8001b10:	4638      	mov	r0, r7
 8001b12:	f006 f909 	bl	8007d28 <extract_msg_bit_field>
 8001b16:	e79e      	b.n	8001a56 <read_write_message+0x22>
                }
                break;
            case PEOPLE_IN_SAFE_ZONE:
                if (write) {
 8001b18:	b13d      	cbz	r5, 8001b2a <read_write_message+0xf6>
                    fill_msg_bit_field(new_msg, msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001b1a:	f10d 0307 	add.w	r3, sp, #7
 8001b1e:	2208      	movs	r2, #8
 8001b20:	7971      	ldrb	r1, [r6, #5]
 8001b22:	4638      	mov	r0, r7
 8001b24:	f006 f8e3 	bl	8007cee <fill_msg_bit_field>
 8001b28:	e795      	b.n	8001a56 <read_write_message+0x22>
                }
                else {
                    extract_msg_bit_field(new_msg, &msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001b2a:	f10d 0307 	add.w	r3, sp, #7
 8001b2e:	2208      	movs	r2, #8
 8001b30:	1d71      	adds	r1, r6, #5
 8001b32:	4638      	mov	r0, r7
 8001b34:	f006 f8f8 	bl	8007d28 <extract_msg_bit_field>
 8001b38:	e78d      	b.n	8001a56 <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3e:	bf00      	nop

08001b40 <send_msg>:
int send_msg(struct message_s* msg_ptr) {
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	4601      	mov	r1, r0
    uint32_t new_msg = 0;
 8001b46:	2400      	movs	r4, #0
 8001b48:	9401      	str	r4, [sp, #4]
    read_write_message(&new_msg, msg_ptr, true);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	a801      	add	r0, sp, #4
 8001b4e:	f7ff ff71 	bl	8001a34 <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b52:	e00d      	b.n	8001b70 <send_msg+0x30>
        tx_buf[i] = (new_msg & (0x000000FF << i*8) ) >> i*8;
 8001b54:	00e3      	lsls	r3, r4, #3
 8001b56:	20ff      	movs	r0, #255	; 0xff
 8001b58:	4098      	lsls	r0, r3
 8001b5a:	9a01      	ldr	r2, [sp, #4]
 8001b5c:	4010      	ands	r0, r2
 8001b5e:	40d8      	lsrs	r0, r3
 8001b60:	b2c0      	uxtb	r0, r0
 8001b62:	4d06      	ldr	r5, [pc, #24]	; (8001b7c <send_msg+0x3c>)
 8001b64:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001b66:	f006 f8ff 	bl	8007d68 <reverse>
 8001b6a:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	b2e4      	uxtb	r4, r4
 8001b70:	2c02      	cmp	r4, #2
 8001b72:	d9ef      	bls.n	8001b54 <send_msg+0x14>
}
 8001b74:	2000      	movs	r0, #0
 8001b76:	b003      	add	sp, #12
 8001b78:	bd30      	pop	{r4, r5, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000494 	.word	0x20000494

08001b80 <recv_msg>:
void recv_msg(void) {
 8001b80:	b530      	push	{r4, r5, lr}
 8001b82:	b085      	sub	sp, #20
    uint32_t cur_msg = 0;
 8001b84:	2400      	movs	r4, #0
 8001b86:	9403      	str	r4, [sp, #12]
    struct message_s rx_msg = {0};
 8001b88:	9401      	str	r4, [sp, #4]
 8001b8a:	f8ad 4008 	strh.w	r4, [sp, #8]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b8e:	e00b      	b.n	8001ba8 <recv_msg+0x28>
        rx_buf[i] = reverse(rx_buf[i]);
 8001b90:	4d0a      	ldr	r5, [pc, #40]	; (8001bbc <recv_msg+0x3c>)
 8001b92:	5d28      	ldrb	r0, [r5, r4]
 8001b94:	f006 f8e8 	bl	8007d68 <reverse>
 8001b98:	5528      	strb	r0, [r5, r4]
        cur_msg |= (rx_buf[i]) << i*8;
 8001b9a:	00e3      	lsls	r3, r4, #3
 8001b9c:	4098      	lsls	r0, r3
 8001b9e:	9b03      	ldr	r3, [sp, #12]
 8001ba0:	4318      	orrs	r0, r3
 8001ba2:	9003      	str	r0, [sp, #12]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001ba4:	3401      	adds	r4, #1
 8001ba6:	b2e4      	uxtb	r4, r4
 8001ba8:	2c02      	cmp	r4, #2
 8001baa:	d9f1      	bls.n	8001b90 <recv_msg+0x10>
    read_write_message(&cur_msg, &rx_msg, false);
 8001bac:	2200      	movs	r2, #0
 8001bae:	a901      	add	r1, sp, #4
 8001bb0:	a803      	add	r0, sp, #12
 8001bb2:	f7ff ff3f 	bl	8001a34 <read_write_message>
}
 8001bb6:	b005      	add	sp, #20
 8001bb8:	bd30      	pop	{r4, r5, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000490 	.word	0x20000490

08001bc0 <main>:
extern uint8_t rx_buf[MESSAGE_LEN_IN_BYTES];
extern uint8_t tx_buf[MESSAGE_LEN_IN_BYTES];

struct message_s msg;

void main() {
 8001bc0:	b508      	push	{r3, lr}
//            return;
//        }
//        printk(" Data sent!\n");
//        k_sleep(K_MSEC(1000));
//    }
    msg.sender_addr = SEND_BASE_STATION;
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <main+0x30>)
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	7003      	strb	r3, [r0, #0]
    msg.receiver_addr = RECV_BROADCAST;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	7043      	strb	r3, [r0, #1]
    msg.message_type = MESSAGE_TYPE_CONNECTION_QUALITY_TEST;
 8001bcc:	2207      	movs	r2, #7
 8001bce:	7082      	strb	r2, [r0, #2]
    msg.direction = REQUEST;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	70c2      	strb	r2, [r0, #3]
    msg.battery_level = BATTERY_LEVEL_GOOD;
 8001bd4:	7103      	strb	r3, [r0, #4]
    msg.people_in_safe_zone = FIRST_PEOPLE_ID | SECOND_PEOPLE_ID | EIGHTH_PEOPLE_ID | FIVE_PEOPLE_ID;
 8001bd6:	2393      	movs	r3, #147	; 0x93
 8001bd8:	7143      	strb	r3, [r0, #5]
    send_msg(&msg);
 8001bda:	f7ff ffb1 	bl	8001b40 <send_msg>
    memcpy(rx_buf, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <main+0x34>)
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <main+0x38>)
 8001be2:	8811      	ldrh	r1, [r2, #0]
 8001be4:	7892      	ldrb	r2, [r2, #2]
 8001be6:	8019      	strh	r1, [r3, #0]
 8001be8:	709a      	strb	r2, [r3, #2]
    recv_msg();
 8001bea:	f7ff ffc9 	bl	8001b80 <recv_msg>
    while(1);
 8001bee:	e7fe      	b.n	8001bee <main+0x2e>
 8001bf0:	20000498 	.word	0x20000498
 8001bf4:	20000490 	.word	0x20000490
 8001bf8:	20000494 	.word	0x20000494

08001bfc <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8001bfc:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8001bfe:	680b      	ldr	r3, [r1, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8001c04:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <char_out+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4798      	blx	r3
}
 8001c0a:	bd08      	pop	{r3, pc}
 8001c0c:	20000000 	.word	0x20000000

08001c10 <__printk_hook_install>:
	_char_out = fn;
 8001c10:	4b01      	ldr	r3, [pc, #4]	; (8001c18 <__printk_hook_install+0x8>)
 8001c12:	6018      	str	r0, [r3, #0]
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8001c1c:	b500      	push	{lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8001c24:	2100      	movs	r1, #0
 8001c26:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8001c28:	a901      	add	r1, sp, #4
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <vprintk+0x1c>)
 8001c2c:	f000 fa2c 	bl	8002088 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8001c30:	b003      	add	sp, #12
 8001c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c36:	bf00      	nop
 8001c38:	08001bfd 	.word	0x08001bfd

08001c3c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8001c42:	9001      	str	r0, [sp, #4]
 8001c44:	9102      	str	r1, [sp, #8]
 8001c46:	2100      	movs	r1, #0
 8001c48:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 8001c4a:	a901      	add	r1, sp, #4
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <vsnprintk+0x28>)
 8001c4e:	f000 fa1b 	bl	8002088 <cbvprintf>

	if (ctx.count < ctx.max) {
 8001c52:	9b03      	ldr	r3, [sp, #12]
 8001c54:	9a02      	ldr	r2, [sp, #8]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	da01      	bge.n	8001c5e <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8001c5e:	9803      	ldr	r0, [sp, #12]
 8001c60:	b004      	add	sp, #16
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	08007d8f 	.word	0x08007d8f

08001c68 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8001c68:	4684      	mov	ip, r0
	const char *sp = *str;
 8001c6a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8001c6c:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8001c6e:	e005      	b.n	8001c7c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8001c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c74:	3201      	adds	r2, #1
 8001c76:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001c7a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001c7c:	7813      	ldrb	r3, [r2, #0]
 8001c7e:	4904      	ldr	r1, [pc, #16]	; (8001c90 <extract_decimal+0x28>)
 8001c80:	5c59      	ldrb	r1, [r3, r1]
 8001c82:	f011 0f04 	tst.w	r1, #4
 8001c86:	d1f3      	bne.n	8001c70 <extract_decimal+0x8>
	}
	*str = sp;
 8001c88:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	0800acc1 	.word	0x0800acc1

08001c94 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	6003      	str	r3, [r0, #0]
 8001c9e:	6043      	str	r3, [r0, #4]
 8001ca0:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8001ca2:	784b      	ldrb	r3, [r1, #1]
 8001ca4:	2b25      	cmp	r3, #37	; 0x25
 8001ca6:	d002      	beq.n	8001cae <extract_conversion+0x1a>
 8001ca8:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8001caa:	2501      	movs	r5, #1
 8001cac:	e01f      	b.n	8001cee <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8001cae:	1c88      	adds	r0, r1, #2
 8001cb0:	70e3      	strb	r3, [r4, #3]
		return sp;
 8001cb2:	e145      	b.n	8001f40 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8001cb4:	7823      	ldrb	r3, [r4, #0]
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8001cbc:	b1b5      	cbz	r5, 8001cec <extract_conversion+0x58>
			++sp;
 8001cbe:	3601      	adds	r6, #1
 8001cc0:	e014      	b.n	8001cec <extract_conversion+0x58>
			conv->flag_plus = true;
 8001cc2:	7823      	ldrb	r3, [r4, #0]
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	7023      	strb	r3, [r4, #0]
			break;
 8001cca:	e7f7      	b.n	8001cbc <extract_conversion+0x28>
			conv->flag_space = true;
 8001ccc:	7823      	ldrb	r3, [r4, #0]
 8001cce:	f043 0310 	orr.w	r3, r3, #16
 8001cd2:	7023      	strb	r3, [r4, #0]
			break;
 8001cd4:	e7f2      	b.n	8001cbc <extract_conversion+0x28>
			conv->flag_hash = true;
 8001cd6:	7823      	ldrb	r3, [r4, #0]
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	7023      	strb	r3, [r4, #0]
			break;
 8001cde:	e7ed      	b.n	8001cbc <extract_conversion+0x28>
			conv->flag_zero = true;
 8001ce0:	7823      	ldrb	r3, [r4, #0]
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	7023      	strb	r3, [r4, #0]
			break;
 8001ce8:	e7e8      	b.n	8001cbc <extract_conversion+0x28>
		switch (*sp) {
 8001cea:	2500      	movs	r5, #0
	} while (loop);
 8001cec:	b345      	cbz	r5, 8001d40 <extract_conversion+0xac>
		switch (*sp) {
 8001cee:	7833      	ldrb	r3, [r6, #0]
 8001cf0:	3b20      	subs	r3, #32
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d8f9      	bhi.n	8001cea <extract_conversion+0x56>
 8001cf6:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <extract_conversion+0x68>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001ccd 	.word	0x08001ccd
 8001d00:	08001ceb 	.word	0x08001ceb
 8001d04:	08001ceb 	.word	0x08001ceb
 8001d08:	08001cd7 	.word	0x08001cd7
 8001d0c:	08001ceb 	.word	0x08001ceb
 8001d10:	08001ceb 	.word	0x08001ceb
 8001d14:	08001ceb 	.word	0x08001ceb
 8001d18:	08001ceb 	.word	0x08001ceb
 8001d1c:	08001ceb 	.word	0x08001ceb
 8001d20:	08001ceb 	.word	0x08001ceb
 8001d24:	08001ceb 	.word	0x08001ceb
 8001d28:	08001cc3 	.word	0x08001cc3
 8001d2c:	08001ceb 	.word	0x08001ceb
 8001d30:	08001cb5 	.word	0x08001cb5
 8001d34:	08001ceb 	.word	0x08001ceb
 8001d38:	08001ceb 	.word	0x08001ceb
 8001d3c:	08001ce1 	.word	0x08001ce1
	if (conv->flag_zero && conv->flag_dash) {
 8001d40:	7823      	ldrb	r3, [r4, #0]
 8001d42:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001d46:	2b44      	cmp	r3, #68	; 0x44
 8001d48:	d05f      	beq.n	8001e0a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8001d4a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8001d4c:	7823      	ldrb	r3, [r4, #0]
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d52:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8001d54:	7833      	ldrb	r3, [r6, #0]
 8001d56:	2b2a      	cmp	r3, #42	; 0x2a
 8001d58:	d05c      	beq.n	8001e14 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8001d5a:	a801      	add	r0, sp, #4
 8001d5c:	f7ff ff84 	bl	8001c68 <extract_decimal>
	if (sp != wp) {
 8001d60:	9b01      	ldr	r3, [sp, #4]
 8001d62:	429e      	cmp	r6, r3
 8001d64:	d00f      	beq.n	8001d86 <extract_conversion+0xf2>
		conv->width_present = true;
 8001d66:	7823      	ldrb	r3, [r4, #0]
 8001d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8001d6e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8001d76:	2800      	cmp	r0, #0
 8001d78:	db54      	blt.n	8001e24 <extract_conversion+0x190>
 8001d7a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	7822      	ldrb	r2, [r4, #0]
 8001d80:	f363 0241 	bfi	r2, r3, #1, #1
 8001d84:	7022      	strb	r2, [r4, #0]
	return sp;
 8001d86:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8001d88:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8e:	bf14      	ite	ne
 8001d90:	2300      	movne	r3, #0
 8001d92:	2301      	moveq	r3, #1
 8001d94:	7862      	ldrb	r2, [r4, #1]
 8001d96:	f363 0241 	bfi	r2, r3, #1, #1
 8001d9a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <extract_conversion+0x194>
	++sp;
 8001da0:	9b01      	ldr	r3, [sp, #4]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b2a      	cmp	r3, #42	; 0x2a
 8001daa:	d03f      	beq.n	8001e2c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8001dac:	a801      	add	r0, sp, #4
 8001dae:	f7ff ff5b 	bl	8001c68 <extract_decimal>
	conv->prec_value = prec;
 8001db2:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8001db4:	7823      	ldrb	r3, [r4, #0]
 8001db6:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	db3e      	blt.n	8001e3c <extract_conversion+0x1a8>
 8001dbe:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	7822      	ldrb	r2, [r4, #0]
 8001dc4:	f363 0241 	bfi	r2, r3, #1, #1
 8001dc8:	7022      	strb	r2, [r4, #0]
	return sp;
 8001dca:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8001dcc:	7803      	ldrb	r3, [r0, #0]
 8001dce:	3b4c      	subs	r3, #76	; 0x4c
 8001dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd2:	f200 809d 	bhi.w	8001f10 <extract_conversion+0x27c>
 8001dd6:	e8df f003 	tbb	[pc, r3]
 8001dda:	9b90      	.short	0x9b90
 8001ddc:	9b9b9b9b 	.word	0x9b9b9b9b
 8001de0:	9b9b9b9b 	.word	0x9b9b9b9b
 8001de4:	9b9b9b9b 	.word	0x9b9b9b9b
 8001de8:	9b9b9b9b 	.word	0x9b9b9b9b
 8001dec:	9b9b9b9b 	.word	0x9b9b9b9b
 8001df0:	9b9b9b9b 	.word	0x9b9b9b9b
 8001df4:	9b339b9b 	.word	0x9b339b9b
 8001df8:	9b459b57 	.word	0x9b459b57
 8001dfc:	9b9b9b9b 	.word	0x9b9b9b9b
 8001e00:	9b899b9b 	.word	0x9b899b9b
 8001e04:	9b9b9b9b 	.word	0x9b9b9b9b
 8001e08:	82          	.byte	0x82
 8001e09:	00          	.byte	0x00
		conv->flag_zero = false;
 8001e0a:	7823      	ldrb	r3, [r4, #0]
 8001e0c:	f36f 1386 	bfc	r3, #6, #1
 8001e10:	7023      	strb	r3, [r4, #0]
 8001e12:	e79a      	b.n	8001d4a <extract_conversion+0xb6>
		conv->width_star = true;
 8001e14:	7863      	ldrb	r3, [r4, #1]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8001e1c:	4633      	mov	r3, r6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	e7b1      	b.n	8001d88 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8001e24:	2201      	movs	r2, #1
 8001e26:	e7a9      	b.n	8001d7c <extract_conversion+0xe8>
		return sp;
 8001e28:	9801      	ldr	r0, [sp, #4]
 8001e2a:	e7cf      	b.n	8001dcc <extract_conversion+0x138>
		conv->prec_star = true;
 8001e2c:	7863      	ldrb	r3, [r4, #1]
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8001e34:	4610      	mov	r0, r2
 8001e36:	3001      	adds	r0, #1
 8001e38:	9001      	str	r0, [sp, #4]
 8001e3a:	e7c7      	b.n	8001dcc <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	e7bf      	b.n	8001dc0 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8001e40:	1c42      	adds	r2, r0, #1
 8001e42:	7843      	ldrb	r3, [r0, #1]
 8001e44:	2b68      	cmp	r3, #104	; 0x68
 8001e46:	d006      	beq.n	8001e56 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8001e48:	7863      	ldrb	r3, [r4, #1]
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	f361 03c6 	bfi	r3, r1, #3, #4
 8001e50:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8001e52:	4610      	mov	r0, r2
 8001e54:	e01e      	b.n	8001e94 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8001e56:	7863      	ldrb	r3, [r4, #1]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f362 03c6 	bfi	r3, r2, #3, #4
 8001e5e:	7063      	strb	r3, [r4, #1]
			++sp;
 8001e60:	3002      	adds	r0, #2
 8001e62:	e017      	b.n	8001e94 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8001e64:	1c42      	adds	r2, r0, #1
 8001e66:	7843      	ldrb	r3, [r0, #1]
 8001e68:	2b6c      	cmp	r3, #108	; 0x6c
 8001e6a:	d006      	beq.n	8001e7a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8001e6c:	7863      	ldrb	r3, [r4, #1]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	f361 03c6 	bfi	r3, r1, #3, #4
 8001e74:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8001e76:	4610      	mov	r0, r2
 8001e78:	e00c      	b.n	8001e94 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8001e7a:	7863      	ldrb	r3, [r4, #1]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	f362 03c6 	bfi	r3, r2, #3, #4
 8001e82:	7063      	strb	r3, [r4, #1]
			++sp;
 8001e84:	3002      	adds	r0, #2
 8001e86:	e005      	b.n	8001e94 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8001e88:	7863      	ldrb	r3, [r4, #1]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	f362 03c6 	bfi	r3, r2, #3, #4
 8001e90:	7063      	strb	r3, [r4, #1]
		++sp;
 8001e92:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8001e94:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e98:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8001e9a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001e9e:	2a37      	cmp	r2, #55	; 0x37
 8001ea0:	d87d      	bhi.n	8001f9e <extract_conversion+0x30a>
 8001ea2:	e8df f002 	tbb	[pc, r2]
 8001ea6:	7c5e      	.short	0x7c5e
 8001ea8:	5e5e7c7c 	.word	0x5e5e7c7c
 8001eac:	7c7c7c5e 	.word	0x7c7c7c5e
 8001eb0:	7c7c7c7c 	.word	0x7c7c7c7c
 8001eb4:	7c7c7c7c 	.word	0x7c7c7c7c
 8001eb8:	7c7c7c7c 	.word	0x7c7c7c7c
 8001ebc:	7c7c4f7c 	.word	0x7c7c4f7c
 8001ec0:	7c7c7c7c 	.word	0x7c7c7c7c
 8001ec4:	7c5e7c7c 	.word	0x7c5e7c7c
 8001ec8:	5e5e3a4f 	.word	0x5e5e3a4f
 8001ecc:	7c3a7c5e 	.word	0x7c3a7c5e
 8001ed0:	657c7c7c 	.word	0x657c7c7c
 8001ed4:	7c7c714f 	.word	0x7c7c714f
 8001ed8:	7c4f7c71 	.word	0x7c4f7c71
 8001edc:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8001ede:	7863      	ldrb	r3, [r4, #1]
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	f362 03c6 	bfi	r3, r2, #3, #4
 8001ee6:	7063      	strb	r3, [r4, #1]
		++sp;
 8001ee8:	3001      	adds	r0, #1
		break;
 8001eea:	e7d3      	b.n	8001e94 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8001eec:	7863      	ldrb	r3, [r4, #1]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	f362 03c6 	bfi	r3, r2, #3, #4
 8001ef4:	7063      	strb	r3, [r4, #1]
		++sp;
 8001ef6:	3001      	adds	r0, #1
		break;
 8001ef8:	e7cc      	b.n	8001e94 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8001efa:	7863      	ldrb	r3, [r4, #1]
 8001efc:	2208      	movs	r2, #8
 8001efe:	f362 03c6 	bfi	r3, r2, #3, #4
 8001f02:	7063      	strb	r3, [r4, #1]
		++sp;
 8001f04:	3001      	adds	r0, #1
		conv->unsupported = true;
 8001f06:	7823      	ldrb	r3, [r4, #0]
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	7023      	strb	r3, [r4, #0]
		break;
 8001f0e:	e7c1      	b.n	8001e94 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8001f10:	7863      	ldrb	r3, [r4, #1]
 8001f12:	f36f 03c6 	bfc	r3, #3, #4
 8001f16:	7063      	strb	r3, [r4, #1]
		break;
 8001f18:	e7bc      	b.n	8001e94 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8001f1a:	78a2      	ldrb	r2, [r4, #2]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	f361 0202 	bfi	r2, r1, #0, #3
 8001f22:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001f24:	7862      	ldrb	r2, [r4, #1]
 8001f26:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8001f2a:	2a40      	cmp	r2, #64	; 0x40
 8001f2c:	d010      	beq.n	8001f50 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8001f2e:	2b63      	cmp	r3, #99	; 0x63
 8001f30:	d013      	beq.n	8001f5a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8001f32:	7823      	ldrb	r3, [r4, #0]
 8001f34:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8001f38:	4315      	orrs	r5, r2
 8001f3a:	f365 0341 	bfi	r3, r5, #1, #1
 8001f3e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8001f40:	b002      	add	sp, #8
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8001f44:	78a2      	ldrb	r2, [r4, #2]
 8001f46:	2102      	movs	r1, #2
 8001f48:	f361 0202 	bfi	r2, r1, #0, #3
 8001f4c:	70a2      	strb	r2, [r4, #2]
 8001f4e:	e7e9      	b.n	8001f24 <extract_conversion+0x290>
			conv->invalid = true;
 8001f50:	7821      	ldrb	r1, [r4, #0]
 8001f52:	f041 0101 	orr.w	r1, r1, #1
 8001f56:	7021      	strb	r1, [r4, #0]
 8001f58:	e7e9      	b.n	8001f2e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8001f5a:	1e15      	subs	r5, r2, #0
 8001f5c:	bf18      	it	ne
 8001f5e:	2501      	movne	r5, #1
 8001f60:	e7e7      	b.n	8001f32 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8001f62:	78a3      	ldrb	r3, [r4, #2]
 8001f64:	2204      	movs	r2, #4
 8001f66:	f362 0302 	bfi	r3, r2, #0, #3
 8001f6a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8001f6c:	2501      	movs	r5, #1
			break;
 8001f6e:	e7e0      	b.n	8001f32 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001f70:	78a3      	ldrb	r3, [r4, #2]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f362 0302 	bfi	r3, r2, #0, #3
 8001f78:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8001f7a:	7863      	ldrb	r3, [r4, #1]
 8001f7c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d1d6      	bne.n	8001f32 <extract_conversion+0x29e>
			unsupported = true;
 8001f84:	2501      	movs	r5, #1
 8001f86:	e7d4      	b.n	8001f32 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8001f88:	78a3      	ldrb	r3, [r4, #2]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	f362 0302 	bfi	r3, r2, #0, #3
 8001f90:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8001f92:	7863      	ldrb	r3, [r4, #1]
 8001f94:	f013 0f78 	tst.w	r3, #120	; 0x78
 8001f98:	d0cb      	beq.n	8001f32 <extract_conversion+0x29e>
			unsupported = true;
 8001f9a:	2501      	movs	r5, #1
 8001f9c:	e7c9      	b.n	8001f32 <extract_conversion+0x29e>
		conv->invalid = true;
 8001f9e:	7823      	ldrb	r3, [r4, #0]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	7023      	strb	r3, [r4, #0]
		break;
 8001fa6:	e7c4      	b.n	8001f32 <extract_conversion+0x29e>

08001fa8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	b083      	sub	sp, #12
 8001fae:	4604      	mov	r4, r0
 8001fb0:	460d      	mov	r5, r1
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	469a      	mov	sl, r3
 8001fb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8001fb8:	78d3      	ldrb	r3, [r2, #3]
 8001fba:	4a32      	ldr	r2, [pc, #200]	; (8002084 <encode_uint+0xdc>)
 8001fbc:	f813 b002 	ldrb.w	fp, [r3, r2]
 8001fc0:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8001fc4:	2b6f      	cmp	r3, #111	; 0x6f
 8001fc6:	d00f      	beq.n	8001fe8 <encode_uint+0x40>
 8001fc8:	d906      	bls.n	8001fd8 <encode_uint+0x30>
 8001fca:	2b70      	cmp	r3, #112	; 0x70
 8001fcc:	d00f      	beq.n	8001fee <encode_uint+0x46>
 8001fce:	2b78      	cmp	r3, #120	; 0x78
 8001fd0:	d110      	bne.n	8001ff4 <encode_uint+0x4c>
		return 16;
 8001fd2:	f04f 0910 	mov.w	r9, #16
 8001fd6:	e023      	b.n	8002020 <encode_uint+0x78>
	switch (specifier) {
 8001fd8:	2b58      	cmp	r3, #88	; 0x58
 8001fda:	d002      	beq.n	8001fe2 <encode_uint+0x3a>
 8001fdc:	f04f 090a 	mov.w	r9, #10
 8001fe0:	e01e      	b.n	8002020 <encode_uint+0x78>
		return 16;
 8001fe2:	f04f 0910 	mov.w	r9, #16
 8001fe6:	e01b      	b.n	8002020 <encode_uint+0x78>
		return 8;
 8001fe8:	f04f 0908 	mov.w	r9, #8
 8001fec:	e018      	b.n	8002020 <encode_uint+0x78>
		return 16;
 8001fee:	f04f 0910 	mov.w	r9, #16
 8001ff2:	e015      	b.n	8002020 <encode_uint+0x78>
	switch (specifier) {
 8001ff4:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8001ff8:	e012      	b.n	8002020 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	3230      	adds	r2, #48	; 0x30
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8002004:	463a      	mov	r2, r7
 8002006:	4643      	mov	r3, r8
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe fce6 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002010:	42bc      	cmp	r4, r7
 8002012:	f175 0300 	sbcs.w	r3, r5, #0
 8002016:	d319      	bcc.n	800204c <encode_uint+0xa4>
 8002018:	4556      	cmp	r6, sl
 800201a:	d917      	bls.n	800204c <encode_uint+0xa4>
		value /= radix;
 800201c:	4604      	mov	r4, r0
 800201e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002020:	f04f 0800 	mov.w	r8, #0
 8002024:	464f      	mov	r7, r9
 8002026:	464a      	mov	r2, r9
 8002028:	4643      	mov	r3, r8
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe fcd5 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002032:	2a09      	cmp	r2, #9
 8002034:	d9e1      	bls.n	8001ffa <encode_uint+0x52>
 8002036:	f1bb 0f01 	cmp.w	fp, #1
 800203a:	d003      	beq.n	8002044 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 800203c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800203e:	3257      	adds	r2, #87	; 0x57
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	e7dd      	b.n	8002000 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002044:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002046:	3237      	adds	r2, #55	; 0x37
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	e7d9      	b.n	8002000 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800204c:	9b01      	ldr	r3, [sp, #4]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f013 0f20 	tst.w	r3, #32
 8002054:	d005      	beq.n	8002062 <encode_uint+0xba>
		if (radix == 8) {
 8002056:	f1b9 0f08 	cmp.w	r9, #8
 800205a:	d006      	beq.n	800206a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 800205c:	f1b9 0f10 	cmp.w	r9, #16
 8002060:	d009      	beq.n	8002076 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8002062:	4630      	mov	r0, r6
 8002064:	b003      	add	sp, #12
 8002066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 800206a:	9a01      	ldr	r2, [sp, #4]
 800206c:	7893      	ldrb	r3, [r2, #2]
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	7093      	strb	r3, [r2, #2]
 8002074:	e7f5      	b.n	8002062 <encode_uint+0xba>
			conv->altform_0c = true;
 8002076:	9a01      	ldr	r2, [sp, #4]
 8002078:	7893      	ldrb	r3, [r2, #2]
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	7093      	strb	r3, [r2, #2]
 8002080:	e7ef      	b.n	8002062 <encode_uint+0xba>
 8002082:	bf00      	nop
 8002084:	0800acc1 	.word	0x0800acc1

08002088 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208c:	b091      	sub	sp, #68	; 0x44
 800208e:	4606      	mov	r6, r0
 8002090:	460d      	mov	r5, r1
 8002092:	4691      	mov	r9, r2
 8002094:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002096:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002098:	f899 0000 	ldrb.w	r0, [r9]
 800209c:	2800      	cmp	r0, #0
 800209e:	f000 82d5 	beq.w	800264c <cbvprintf+0x5c4>
		if (*fp != '%') {
 80020a2:	2825      	cmp	r0, #37	; 0x25
 80020a4:	d008      	beq.n	80020b8 <cbvprintf+0x30>
			OUTC(*fp++);
 80020a6:	f109 0901 	add.w	r9, r9, #1
 80020aa:	4629      	mov	r1, r5
 80020ac:	47b0      	blx	r6
 80020ae:	2800      	cmp	r0, #0
 80020b0:	f2c0 82cd 	blt.w	800264e <cbvprintf+0x5c6>
 80020b4:	3401      	adds	r4, #1
			continue;
 80020b6:	e7ef      	b.n	8002098 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 80020b8:	2300      	movs	r3, #0
 80020ba:	9304      	str	r3, [sp, #16]
 80020bc:	9305      	str	r3, [sp, #20]
 80020be:	9306      	str	r3, [sp, #24]
 80020c0:	9307      	str	r3, [sp, #28]
 80020c2:	9308      	str	r3, [sp, #32]
 80020c4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 80020c6:	4649      	mov	r1, r9
 80020c8:	a806      	add	r0, sp, #24
 80020ca:	f7ff fde3 	bl	8001c94 <extract_conversion>
 80020ce:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 80020d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80020d4:	f013 0f01 	tst.w	r3, #1
 80020d8:	f000 8097 	beq.w	800220a <cbvprintf+0x182>
			width = va_arg(ap, int);
 80020dc:	9b03      	ldr	r3, [sp, #12]
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	9203      	str	r2, [sp, #12]
 80020e2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 80020e4:	2f00      	cmp	r7, #0
 80020e6:	f2c0 8088 	blt.w	80021fa <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 80020ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80020ee:	f013 0f04 	tst.w	r3, #4
 80020f2:	f000 809c 	beq.w	800222e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 80020f6:	9b03      	ldr	r3, [sp, #12]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	9203      	str	r2, [sp, #12]
 80020fc:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002100:	f1ba 0f00 	cmp.w	sl, #0
 8002104:	f2c0 808a 	blt.w	800221c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 800210c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 800210e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002112:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002116:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800211a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 800211e:	2b01      	cmp	r3, #1
 8002120:	f000 808e 	beq.w	8002240 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002124:	2b02      	cmp	r3, #2
 8002126:	f000 80d3 	beq.w	80022d0 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 800212a:	2b04      	cmp	r3, #4
 800212c:	f000 8124 	beq.w	8002378 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002130:	2b03      	cmp	r3, #3
 8002132:	f000 813b 	beq.w	80023ac <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002136:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800213a:	f018 0b03 	ands.w	fp, r8, #3
 800213e:	f040 813b 	bne.w	80023b8 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002142:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002146:	3b25      	subs	r3, #37	; 0x25
 8002148:	2b53      	cmp	r3, #83	; 0x53
 800214a:	f200 81e6 	bhi.w	800251a <cbvprintf+0x492>
 800214e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002152:	0140      	.short	0x0140
 8002154:	01e401e4 	.word	0x01e401e4
 8002158:	01e401e4 	.word	0x01e401e4
 800215c:	01e401e4 	.word	0x01e401e4
 8002160:	01e401e4 	.word	0x01e401e4
 8002164:	01e401e4 	.word	0x01e401e4
 8002168:	01e401e4 	.word	0x01e401e4
 800216c:	01e401e4 	.word	0x01e401e4
 8002170:	01e401e4 	.word	0x01e401e4
 8002174:	01e401e4 	.word	0x01e401e4
 8002178:	01e401e4 	.word	0x01e401e4
 800217c:	01e401e4 	.word	0x01e401e4
 8002180:	01e401e4 	.word	0x01e401e4
 8002184:	01e401e4 	.word	0x01e401e4
 8002188:	01e401e4 	.word	0x01e401e4
 800218c:	01e401e4 	.word	0x01e401e4
 8002190:	01e401e4 	.word	0x01e401e4
 8002194:	01e401e4 	.word	0x01e401e4
 8002198:	01e401e4 	.word	0x01e401e4
 800219c:	01e401e4 	.word	0x01e401e4
 80021a0:	01e401e4 	.word	0x01e401e4
 80021a4:	01e401e4 	.word	0x01e401e4
 80021a8:	01e401e4 	.word	0x01e401e4
 80021ac:	01e401e4 	.word	0x01e401e4
 80021b0:	01e401e4 	.word	0x01e401e4
 80021b4:	01e401e4 	.word	0x01e401e4
 80021b8:	01e40181 	.word	0x01e40181
 80021bc:	01e401e4 	.word	0x01e401e4
 80021c0:	01e401e4 	.word	0x01e401e4
 80021c4:	01e401e4 	.word	0x01e401e4
 80021c8:	01e401e4 	.word	0x01e401e4
 80021cc:	015e01e4 	.word	0x015e01e4
 80021d0:	01e40167 	.word	0x01e40167
 80021d4:	01e401e4 	.word	0x01e401e4
 80021d8:	016701e4 	.word	0x016701e4
 80021dc:	01e401e4 	.word	0x01e401e4
 80021e0:	01e401e4 	.word	0x01e401e4
 80021e4:	018101be 	.word	0x018101be
 80021e8:	01e401a2 	.word	0x01e401a2
 80021ec:	014d01e4 	.word	0x014d01e4
 80021f0:	018101e4 	.word	0x018101e4
 80021f4:	01e401e4 	.word	0x01e401e4
 80021f8:	0181      	.short	0x0181
				conv->flag_dash = true;
 80021fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8002206:	427f      	negs	r7, r7
 8002208:	e76f      	b.n	80020ea <cbvprintf+0x62>
		} else if (conv->width_present) {
 800220a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db02      	blt.n	8002218 <cbvprintf+0x190>
		int width = -1;
 8002212:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002216:	e768      	b.n	80020ea <cbvprintf+0x62>
			width = conv->width_value;
 8002218:	9f07      	ldr	r7, [sp, #28]
 800221a:	e766      	b.n	80020ea <cbvprintf+0x62>
				conv->prec_present = false;
 800221c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002220:	f36f 0341 	bfc	r3, #1, #1
 8002224:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002228:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800222c:	e76c      	b.n	8002108 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 800222e:	f013 0f02 	tst.w	r3, #2
 8002232:	d002      	beq.n	800223a <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002234:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002238:	e766      	b.n	8002108 <cbvprintf+0x80>
		int precision = -1;
 800223a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800223e:	e763      	b.n	8002108 <cbvprintf+0x80>
			switch (length_mod) {
 8002240:	1ecb      	subs	r3, r1, #3
 8002242:	2b04      	cmp	r3, #4
 8002244:	d804      	bhi.n	8002250 <cbvprintf+0x1c8>
 8002246:	e8df f003 	tbb	[pc, r3]
 800224a:	1d0b      	.short	0x1d0b
 800224c:	3529      	.short	0x3529
 800224e:	35          	.byte	0x35
 800224f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002250:	9b03      	ldr	r3, [sp, #12]
 8002252:	1d1a      	adds	r2, r3, #4
 8002254:	9203      	str	r2, [sp, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	17da      	asrs	r2, r3, #31
 800225a:	9304      	str	r3, [sp, #16]
 800225c:	9205      	str	r2, [sp, #20]
				break;
 800225e:	e006      	b.n	800226e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002260:	9b03      	ldr	r3, [sp, #12]
 8002262:	1d1a      	adds	r2, r3, #4
 8002264:	9203      	str	r2, [sp, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	17da      	asrs	r2, r3, #31
 800226a:	9304      	str	r3, [sp, #16]
 800226c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 800226e:	2901      	cmp	r1, #1
 8002270:	d028      	beq.n	80022c4 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002272:	2902      	cmp	r1, #2
 8002274:	f47f af5f 	bne.w	8002136 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002278:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800227c:	17da      	asrs	r2, r3, #31
 800227e:	9304      	str	r3, [sp, #16]
 8002280:	9205      	str	r2, [sp, #20]
 8002282:	e758      	b.n	8002136 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002284:	9b03      	ldr	r3, [sp, #12]
 8002286:	3307      	adds	r3, #7
 8002288:	f023 0307 	bic.w	r3, r3, #7
 800228c:	f103 0208 	add.w	r2, r3, #8
 8002290:	9203      	str	r2, [sp, #12]
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002296:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800229a:	e7e8      	b.n	800226e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 800229c:	9b03      	ldr	r3, [sp, #12]
 800229e:	3307      	adds	r3, #7
 80022a0:	f023 0307 	bic.w	r3, r3, #7
 80022a4:	f103 0208 	add.w	r2, r3, #8
 80022a8:	9203      	str	r2, [sp, #12]
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80022ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80022b2:	e7dc      	b.n	800226e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80022b4:	9b03      	ldr	r3, [sp, #12]
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	9203      	str	r2, [sp, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	17da      	asrs	r2, r3, #31
				value->sint =
 80022be:	9304      	str	r3, [sp, #16]
 80022c0:	9205      	str	r2, [sp, #20]
				break;
 80022c2:	e7d4      	b.n	800226e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80022c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80022c8:	9304      	str	r3, [sp, #16]
 80022ca:	2300      	movs	r3, #0
 80022cc:	9305      	str	r3, [sp, #20]
 80022ce:	e732      	b.n	8002136 <cbvprintf+0xae>
			switch (length_mod) {
 80022d0:	1ecb      	subs	r3, r1, #3
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d804      	bhi.n	80022e0 <cbvprintf+0x258>
 80022d6:	e8df f003 	tbb	[pc, r3]
 80022da:	1f0b      	.short	0x1f0b
 80022dc:	4135      	.short	0x4135
 80022de:	41          	.byte	0x41
 80022df:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 80022e0:	9b03      	ldr	r3, [sp, #12]
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	9203      	str	r2, [sp, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	9304      	str	r3, [sp, #16]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9305      	str	r3, [sp, #20]
				break;
 80022ee:	e01e      	b.n	800232e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 80022f0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 80022f4:	2b63      	cmp	r3, #99	; 0x63
 80022f6:	d007      	beq.n	8002308 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 80022f8:	9b03      	ldr	r3, [sp, #12]
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	9203      	str	r2, [sp, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9304      	str	r3, [sp, #16]
 8002302:	2300      	movs	r3, #0
 8002304:	9305      	str	r3, [sp, #20]
 8002306:	e012      	b.n	800232e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002308:	9b03      	ldr	r3, [sp, #12]
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	9203      	str	r2, [sp, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	9304      	str	r3, [sp, #16]
 8002312:	2300      	movs	r3, #0
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	e00a      	b.n	800232e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002318:	9b03      	ldr	r3, [sp, #12]
 800231a:	3307      	adds	r3, #7
 800231c:	f023 0307 	bic.w	r3, r3, #7
 8002320:	f103 0208 	add.w	r2, r3, #8
 8002324:	9203      	str	r2, [sp, #12]
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800232a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 800232e:	2901      	cmp	r1, #1
 8002330:	d01c      	beq.n	800236c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002332:	2902      	cmp	r1, #2
 8002334:	f47f aeff 	bne.w	8002136 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002338:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800233c:	9304      	str	r3, [sp, #16]
 800233e:	2300      	movs	r3, #0
 8002340:	9305      	str	r3, [sp, #20]
 8002342:	e6f8      	b.n	8002136 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002344:	9b03      	ldr	r3, [sp, #12]
 8002346:	3307      	adds	r3, #7
 8002348:	f023 0307 	bic.w	r3, r3, #7
 800234c:	f103 0208 	add.w	r2, r3, #8
 8002350:	9203      	str	r2, [sp, #12]
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002356:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800235a:	e7e8      	b.n	800232e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	9203      	str	r2, [sp, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	2300      	movs	r3, #0
 8002368:	9305      	str	r3, [sp, #20]
				break;
 800236a:	e7e0      	b.n	800232e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 800236c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	2300      	movs	r3, #0
 8002374:	9305      	str	r3, [sp, #20]
 8002376:	e6de      	b.n	8002136 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002378:	2908      	cmp	r1, #8
 800237a:	d00b      	beq.n	8002394 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 800237c:	9b03      	ldr	r3, [sp, #12]
 800237e:	3307      	adds	r3, #7
 8002380:	f023 0307 	bic.w	r3, r3, #7
 8002384:	f103 0208 	add.w	r2, r3, #8
 8002388:	9203      	str	r2, [sp, #12]
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002392:	e6d0      	b.n	8002136 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002394:	9b03      	ldr	r3, [sp, #12]
 8002396:	3307      	adds	r3, #7
 8002398:	f023 0307 	bic.w	r3, r3, #7
 800239c:	f103 0208 	add.w	r2, r3, #8
 80023a0:	9203      	str	r2, [sp, #12]
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023aa:	e6c4      	b.n	8002136 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80023ac:	9b03      	ldr	r3, [sp, #12]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	9203      	str	r2, [sp, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	e6be      	b.n	8002136 <cbvprintf+0xae>
			OUTS(sp, fp);
 80023b8:	9f02      	ldr	r7, [sp, #8]
 80023ba:	463b      	mov	r3, r7
 80023bc:	464a      	mov	r2, r9
 80023be:	4629      	mov	r1, r5
 80023c0:	4630      	mov	r0, r6
 80023c2:	f005 fd22 	bl	8007e0a <outs>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	f2c0 8141 	blt.w	800264e <cbvprintf+0x5c6>
 80023cc:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 80023ce:	46b9      	mov	r9, r7
			continue;
 80023d0:	e662      	b.n	8002098 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 80023d2:	4629      	mov	r1, r5
 80023d4:	2025      	movs	r0, #37	; 0x25
 80023d6:	47b0      	blx	r6
 80023d8:	2800      	cmp	r0, #0
 80023da:	f2c0 8138 	blt.w	800264e <cbvprintf+0x5c6>
 80023de:	3401      	adds	r4, #1
		char sign = 0;
 80023e0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80023e2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80023e6:	f04f 0900 	mov.w	r9, #0
			break;
 80023ea:	e09b      	b.n	8002524 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 80023ec:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 80023f0:	f1ba 0f00 	cmp.w	sl, #0
 80023f4:	db07      	blt.n	8002406 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 80023f6:	4651      	mov	r1, sl
 80023f8:	4648      	mov	r0, r9
 80023fa:	f007 f9bf 	bl	800977c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 80023fe:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002402:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002404:	e08e      	b.n	8002524 <cbvprintf+0x49c>
				len = strlen(bps);
 8002406:	4648      	mov	r0, r9
 8002408:	f7fe fd1b 	bl	8000e42 <strlen>
 800240c:	e7f7      	b.n	80023fe <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800240e:	9b04      	ldr	r3, [sp, #16]
 8002410:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002414:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002416:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 800241a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 800241e:	e081      	b.n	8002524 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002420:	f018 0f08 	tst.w	r8, #8
 8002424:	d105      	bne.n	8002432 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002426:	f018 0810 	ands.w	r8, r8, #16
 800242a:	d004      	beq.n	8002436 <cbvprintf+0x3ae>
				sign = ' ';
 800242c:	f04f 0820 	mov.w	r8, #32
 8002430:	e001      	b.n	8002436 <cbvprintf+0x3ae>
				sign = '+';
 8002432:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002436:	9a04      	ldr	r2, [sp, #16]
 8002438:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 800243a:	2b00      	cmp	r3, #0
 800243c:	db02      	blt.n	8002444 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 800243e:	9204      	str	r2, [sp, #16]
 8002440:	9305      	str	r3, [sp, #20]
 8002442:	e008      	b.n	8002456 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002444:	4252      	negs	r2, r2
 8002446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800244a:	9204      	str	r2, [sp, #16]
 800244c:	9305      	str	r3, [sp, #20]
				sign = '-';
 800244e:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002452:	e000      	b.n	8002456 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002454:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002456:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	ab0a      	add	r3, sp, #40	; 0x28
 800245e:	aa06      	add	r2, sp, #24
 8002460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002464:	f7ff fda0 	bl	8001fa8 <encode_uint>
 8002468:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 800246a:	f1ba 0f00 	cmp.w	sl, #0
 800246e:	f2c0 8088 	blt.w	8002582 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002472:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002476:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 800247a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800247e:	f36f 1286 	bfc	r2, #6, #1
 8002482:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002486:	459a      	cmp	sl, r3
 8002488:	d97e      	bls.n	8002588 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 800248a:	ebaa 0303 	sub.w	r3, sl, r3
 800248e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002490:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002494:	e046      	b.n	8002524 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002496:	9804      	ldr	r0, [sp, #16]
 8002498:	b928      	cbnz	r0, 80024a6 <cbvprintf+0x41e>
		char sign = 0;
 800249a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 800249c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002654 <cbvprintf+0x5cc>
			bps = "(nil)";
 80024a0:	f1aa 0905 	sub.w	r9, sl, #5
 80024a4:	e03e      	b.n	8002524 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80024a6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	ab0a      	add	r3, sp, #40	; 0x28
 80024ae:	aa06      	add	r2, sp, #24
 80024b0:	2100      	movs	r1, #0
 80024b2:	f7ff fd79 	bl	8001fa8 <encode_uint>
 80024b6:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80024b8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80024bc:	f043 0310 	orr.w	r3, r3, #16
 80024c0:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80024c4:	2378      	movs	r3, #120	; 0x78
 80024c6:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80024ca:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 80024cc:	e7cd      	b.n	800246a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 80024ce:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 80024d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80024d4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80024d8:	2b07      	cmp	r3, #7
 80024da:	d806      	bhi.n	80024ea <cbvprintf+0x462>
 80024dc:	e8df f003 	tbb	[pc, r3]
 80024e0:	0f0d0b04 	.word	0x0f0d0b04
 80024e4:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 80024e8:	6014      	str	r4, [r2, #0]
		char sign = 0;
 80024ea:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80024ec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80024f0:	f04f 0900 	mov.w	r9, #0
}
 80024f4:	e016      	b.n	8002524 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 80024f6:	7014      	strb	r4, [r2, #0]
		break;
 80024f8:	e7f7      	b.n	80024ea <cbvprintf+0x462>
		*(short *)dp = (short)count;
 80024fa:	8014      	strh	r4, [r2, #0]
		break;
 80024fc:	e7f5      	b.n	80024ea <cbvprintf+0x462>
		*(long *)dp = (long)count;
 80024fe:	6014      	str	r4, [r2, #0]
		break;
 8002500:	e7f3      	b.n	80024ea <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8002502:	17e3      	asrs	r3, r4, #31
 8002504:	6014      	str	r4, [r2, #0]
 8002506:	6053      	str	r3, [r2, #4]
		break;
 8002508:	e7ef      	b.n	80024ea <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 800250a:	17e3      	asrs	r3, r4, #31
 800250c:	6014      	str	r4, [r2, #0]
 800250e:	6053      	str	r3, [r2, #4]
		break;
 8002510:	e7eb      	b.n	80024ea <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002512:	6014      	str	r4, [r2, #0]
		break;
 8002514:	e7e9      	b.n	80024ea <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002516:	6014      	str	r4, [r2, #0]
		break;
 8002518:	e7e7      	b.n	80024ea <cbvprintf+0x462>
		switch (conv->specifier) {
 800251a:	46d8      	mov	r8, fp
 800251c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002520:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002524:	f1b9 0f00 	cmp.w	r9, #0
 8002528:	f000 808d 	beq.w	8002646 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 800252c:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002530:	f1b8 0f00 	cmp.w	r8, #0
 8002534:	d000      	beq.n	8002538 <cbvprintf+0x4b0>
			nj_len += 1U;
 8002536:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002538:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800253c:	f011 0f10 	tst.w	r1, #16
 8002540:	d025      	beq.n	800258e <cbvprintf+0x506>
			nj_len += 2U;
 8002542:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002544:	9b07      	ldr	r3, [sp, #28]
 8002546:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002548:	f011 0f40 	tst.w	r1, #64	; 0x40
 800254c:	d001      	beq.n	8002552 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 800254e:	9a08      	ldr	r2, [sp, #32]
 8002550:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002552:	2f00      	cmp	r7, #0
 8002554:	dd31      	ble.n	80025ba <cbvprintf+0x532>
			width -= (int)nj_len;
 8002556:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002558:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800255c:	f013 0f04 	tst.w	r3, #4
 8002560:	d12b      	bne.n	80025ba <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8002562:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002566:	d017      	beq.n	8002598 <cbvprintf+0x510>
					if (sign != 0) {
 8002568:	f1b8 0f00 	cmp.w	r8, #0
 800256c:	d017      	beq.n	800259e <cbvprintf+0x516>
						OUTC(sign);
 800256e:	4629      	mov	r1, r5
 8002570:	4640      	mov	r0, r8
 8002572:	47b0      	blx	r6
 8002574:	2800      	cmp	r0, #0
 8002576:	db6a      	blt.n	800264e <cbvprintf+0x5c6>
 8002578:	3401      	adds	r4, #1
						sign = 0;
 800257a:	46d8      	mov	r8, fp
					}
					pad = '0';
 800257c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002580:	e00f      	b.n	80025a2 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8002582:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002586:	e7cd      	b.n	8002524 <cbvprintf+0x49c>
 8002588:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800258c:	e7ca      	b.n	8002524 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 800258e:	f011 0f08 	tst.w	r1, #8
 8002592:	d0d7      	beq.n	8002544 <cbvprintf+0x4bc>
			nj_len += 1U;
 8002594:	3201      	adds	r2, #1
 8002596:	e7d5      	b.n	8002544 <cbvprintf+0x4bc>
				char pad = ' ';
 8002598:	f04f 0b20 	mov.w	fp, #32
 800259c:	e001      	b.n	80025a2 <cbvprintf+0x51a>
					pad = '0';
 800259e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80025a2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80025a4:	1e5f      	subs	r7, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	dd07      	ble.n	80025ba <cbvprintf+0x532>
					OUTC(pad);
 80025aa:	4629      	mov	r1, r5
 80025ac:	4658      	mov	r0, fp
 80025ae:	47b0      	blx	r6
 80025b0:	2800      	cmp	r0, #0
 80025b2:	db4c      	blt.n	800264e <cbvprintf+0x5c6>
 80025b4:	3401      	adds	r4, #1
				while (width-- > 0) {
 80025b6:	463b      	mov	r3, r7
 80025b8:	e7f4      	b.n	80025a4 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80025ba:	f1b8 0f00 	cmp.w	r8, #0
 80025be:	d005      	beq.n	80025cc <cbvprintf+0x544>
			OUTC(sign);
 80025c0:	4629      	mov	r1, r5
 80025c2:	4640      	mov	r0, r8
 80025c4:	47b0      	blx	r6
 80025c6:	2800      	cmp	r0, #0
 80025c8:	db41      	blt.n	800264e <cbvprintf+0x5c6>
 80025ca:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 80025cc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80025d0:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80025d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80025d8:	4313      	orrs	r3, r2
 80025da:	d005      	beq.n	80025e8 <cbvprintf+0x560>
				OUTC('0');
 80025dc:	4629      	mov	r1, r5
 80025de:	2030      	movs	r0, #48	; 0x30
 80025e0:	47b0      	blx	r6
 80025e2:	2800      	cmp	r0, #0
 80025e4:	db33      	blt.n	800264e <cbvprintf+0x5c6>
 80025e6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 80025e8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80025ec:	f013 0f10 	tst.w	r3, #16
 80025f0:	d006      	beq.n	8002600 <cbvprintf+0x578>
				OUTC(conv->specifier);
 80025f2:	4629      	mov	r1, r5
 80025f4:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80025f8:	47b0      	blx	r6
 80025fa:	2800      	cmp	r0, #0
 80025fc:	db27      	blt.n	800264e <cbvprintf+0x5c6>
 80025fe:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002600:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002602:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002606:	2b00      	cmp	r3, #0
 8002608:	dd07      	ble.n	800261a <cbvprintf+0x592>
				OUTC('0');
 800260a:	4629      	mov	r1, r5
 800260c:	2030      	movs	r0, #48	; 0x30
 800260e:	47b0      	blx	r6
 8002610:	2800      	cmp	r0, #0
 8002612:	db1c      	blt.n	800264e <cbvprintf+0x5c6>
 8002614:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002616:	4643      	mov	r3, r8
 8002618:	e7f3      	b.n	8002602 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 800261a:	4653      	mov	r3, sl
 800261c:	464a      	mov	r2, r9
 800261e:	4629      	mov	r1, r5
 8002620:	4630      	mov	r0, r6
 8002622:	f005 fbf2 	bl	8007e0a <outs>
 8002626:	2800      	cmp	r0, #0
 8002628:	db11      	blt.n	800264e <cbvprintf+0x5c6>
 800262a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 800262c:	2f00      	cmp	r7, #0
 800262e:	dd07      	ble.n	8002640 <cbvprintf+0x5b8>
			OUTC(' ');
 8002630:	4629      	mov	r1, r5
 8002632:	2020      	movs	r0, #32
 8002634:	47b0      	blx	r6
 8002636:	2800      	cmp	r0, #0
 8002638:	db09      	blt.n	800264e <cbvprintf+0x5c6>
 800263a:	3401      	adds	r4, #1
			--width;
 800263c:	3f01      	subs	r7, #1
 800263e:	e7f5      	b.n	800262c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002640:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002644:	e528      	b.n	8002098 <cbvprintf+0x10>
 8002646:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800264a:	e525      	b.n	8002098 <cbvprintf+0x10>
		}
	}

	return count;
 800264c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 800264e:	b011      	add	sp, #68	; 0x44
 8002650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002654:	0800a1c5 	.word	0x0800a1c5

08002658 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002658:	f04f 0210 	mov.w	r2, #16
 800265c:	f3ef 8311 	mrs	r3, BASEPRI
 8002660:	f382 8812 	msr	BASEPRI_MAX, r2
 8002664:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002668:	f383 8811 	msr	BASEPRI, r3
 800266c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <stm32l4_init+0x24>)
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <stm32l4_init+0x28>)
 8002674:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002676:	2000      	movs	r0, #0
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000078 	.word	0x20000078
 8002680:	003d0900 	.word	0x003d0900

08002684 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <is_rodata+0x18>)
 8002686:	4298      	cmp	r0, r3
 8002688:	d304      	bcc.n	8002694 <is_rodata+0x10>
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <is_rodata+0x1c>)
 800268c:	4298      	cmp	r0, r3
 800268e:	d303      	bcc.n	8002698 <is_rodata+0x14>
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr
 8002694:	2000      	movs	r0, #0
 8002696:	4770      	bx	lr
 8002698:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 800269a:	4770      	bx	lr
 800269c:	08009bc0 	.word	0x08009bc0
 80026a0:	0800af38 	.word	0x0800af38

080026a4 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 80026a4:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <thread_set+0x1c>)
 80026a8:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80026aa:	b118      	cbz	r0, 80026b4 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <thread_set+0x20>)
 80026ae:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 80026b0:	2b09      	cmp	r3, #9
 80026b2:	dc00      	bgt.n	80026b6 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 80026b4:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <thread_set+0x24>)
 80026b8:	f003 fa2c 	bl	8005b14 <z_impl_k_sem_give>
}
 80026bc:	e7fa      	b.n	80026b4 <thread_set+0x10>
 80026be:	bf00      	nop
 80026c0:	200004d4 	.word	0x200004d4
 80026c4:	200004a0 	.word	0x200004a0
 80026c8:	200002bc 	.word	0x200002bc

080026cc <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 80026cc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 80026ce:	4802      	ldr	r0, [pc, #8]	; (80026d8 <log_process_thread_timer_expiry_fn+0xc>)
 80026d0:	f003 fa20 	bl	8005b14 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 80026d4:	bd08      	pop	{r3, pc}
 80026d6:	bf00      	nop
 80026d8:	200002bc 	.word	0x200002bc

080026dc <next_pending>:
{
 80026dc:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
 80026de:	4803      	ldr	r0, [pc, #12]	; (80026ec <next_pending+0x10>)
 80026e0:	f005 fbbe 	bl	8007e60 <log_list_head_peek>
}
 80026e4:	3800      	subs	r0, #0
 80026e6:	bf18      	it	ne
 80026e8:	2001      	movne	r0, #1
 80026ea:	bd08      	pop	{r3, pc}
 80026ec:	200004ac 	.word	0x200004ac

080026f0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 80026f0:	b530      	push	{r4, r5, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 80026f4:	2200      	movs	r2, #0
 80026f6:	490f      	ldr	r1, [pc, #60]	; (8002734 <enable_logger+0x44>)
 80026f8:	480f      	ldr	r0, [pc, #60]	; (8002738 <enable_logger+0x48>)
 80026fa:	f006 fee4 	bl	80094c6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80026fe:	4d0f      	ldr	r5, [pc, #60]	; (800273c <enable_logger+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	2300      	movs	r3, #0
 8002704:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002708:	2400      	movs	r4, #0
 800270a:	9404      	str	r4, [sp, #16]
 800270c:	230e      	movs	r3, #14
 800270e:	9303      	str	r3, [sp, #12]
 8002710:	9402      	str	r4, [sp, #8]
 8002712:	9401      	str	r4, [sp, #4]
 8002714:	9400      	str	r4, [sp, #0]
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <enable_logger+0x50>)
 8002718:	f44f 7240 	mov.w	r2, #768	; 0x300
 800271c:	4909      	ldr	r1, [pc, #36]	; (8002744 <enable_logger+0x54>)
 800271e:	4628      	mov	r0, r5
 8002720:	f006 fcde 	bl	80090e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002724:	4908      	ldr	r1, [pc, #32]	; (8002748 <enable_logger+0x58>)
 8002726:	4628      	mov	r0, r5
 8002728:	f006 fcc6 	bl	80090b8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 800272c:	4620      	mov	r0, r4
 800272e:	b009      	add	sp, #36	; 0x24
 8002730:	bd30      	pop	{r4, r5, pc}
 8002732:	bf00      	nop
 8002734:	080026cd 	.word	0x080026cd
 8002738:	200002d0 	.word	0x200002d0
 800273c:	20000308 	.word	0x20000308
 8002740:	08002da1 	.word	0x08002da1
 8002744:	20000680 	.word	0x20000680
 8002748:	0800a1cc 	.word	0x0800a1cc

0800274c <z_log_get_s_mask>:
{
 800274c:	b530      	push	{r4, r5, lr}
 800274e:	4603      	mov	r3, r0
	uint32_t mask = 0U;
 8002750:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8002752:	4684      	mov	ip, r0
	bool arm = false;
 8002754:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 8002756:	e001      	b.n	800275c <z_log_get_s_mask+0x10>
			arm = !arm;
 8002758:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 800275c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002760:	b1b2      	cbz	r2, 8002790 <z_log_get_s_mask+0x44>
 8002762:	458c      	cmp	ip, r1
 8002764:	d214      	bcs.n	8002790 <z_log_get_s_mask+0x44>
		if (curr == '%') {
 8002766:	2a25      	cmp	r2, #37	; 0x25
 8002768:	d0f6      	beq.n	8002758 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 800276a:	2c00      	cmp	r4, #0
 800276c:	d0f6      	beq.n	800275c <z_log_get_s_mask+0x10>
 800276e:	4d09      	ldr	r5, [pc, #36]	; (8002794 <z_log_get_s_mask+0x48>)
 8002770:	f812 e005 	ldrb.w	lr, [r2, r5]
 8002774:	f01e 0f03 	tst.w	lr, #3
 8002778:	d0f0      	beq.n	800275c <z_log_get_s_mask+0x10>
			if (curr == 's') {
 800277a:	2a73      	cmp	r2, #115	; 0x73
 800277c:	d003      	beq.n	8002786 <z_log_get_s_mask+0x3a>
			arg++;
 800277e:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
 8002782:	2400      	movs	r4, #0
 8002784:	e7ea      	b.n	800275c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 8002786:	2201      	movs	r2, #1
 8002788:	fa02 f20c 	lsl.w	r2, r2, ip
 800278c:	4310      	orrs	r0, r2
 800278e:	e7f6      	b.n	800277e <z_log_get_s_mask+0x32>
}
 8002790:	bd30      	pop	{r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	0800acc1 	.word	0x0800acc1

08002798 <log_core_init>:
{
 8002798:	b508      	push	{r3, lr}
	panic_mode = false;
 800279a:	2300      	movs	r3, #0
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <log_core_init+0x34>)
 800279e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <log_core_init+0x38>)
 80027a2:	6013      	str	r3, [r2, #0]
		timestamp_func = default_lf_get_timestamp;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <log_core_init+0x3c>)
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <log_core_init+0x40>)
 80027a8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 80027aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ae:	f000 fd7d 	bl	80032ac <log_output_timestamp_freq_set>
		log_msg_pool_init();
 80027b2:	f000 fb5b 	bl	8002e6c <log_msg_pool_init>
		log_list_init(&list);
 80027b6:	4809      	ldr	r0, [pc, #36]	; (80027dc <log_core_init+0x44>)
 80027b8:	f005 fb44 	bl	8007e44 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 80027bc:	2304      	movs	r3, #4
 80027be:	2228      	movs	r2, #40	; 0x28
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <log_core_init+0x48>)
 80027c2:	4808      	ldr	r0, [pc, #32]	; (80027e4 <log_core_init+0x4c>)
 80027c4:	f006 fc2f 	bl	8009026 <k_mem_slab_init>
}
 80027c8:	bd08      	pop	{r3, pc}
 80027ca:	bf00      	nop
 80027cc:	20000669 	.word	0x20000669
 80027d0:	200004a4 	.word	0x200004a4
 80027d4:	20000004 	.word	0x20000004
 80027d8:	08007e79 	.word	0x08007e79
 80027dc:	200004ac 	.word	0x200004ac
 80027e0:	20001b40 	.word	0x20001b40
 80027e4:	200004b4 	.word	0x200004b4

080027e8 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <log_init+0x64>)
 80027ea:	f3bf 8f5b 	dmb	ish
 80027ee:	e853 2f00 	ldrex	r2, [r3]
 80027f2:	1c51      	adds	r1, r2, #1
 80027f4:	e843 1000 	strex	r0, r1, [r3]
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1f8      	bne.n	80027ee <log_init+0x6>
 80027fc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8002800:	bb1a      	cbnz	r2, 800284a <log_init+0x62>
{
 8002802:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8002804:	2400      	movs	r4, #0
 8002806:	e009      	b.n	800281c <log_init+0x34>
					   backend->cb->ctx,
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <log_init+0x68>)
 800280a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800280e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8002810:	2204      	movs	r2, #4
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	4628      	mov	r0, r5
 8002816:	f000 fb05 	bl	8002e24 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800281a:	3401      	adds	r4, #1
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <log_init+0x6c>)
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <log_init+0x68>)
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002826:	da0f      	bge.n	8002848 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 8002828:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800282a:	4d09      	ldr	r5, [pc, #36]	; (8002850 <log_init+0x68>)
 800282c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8002830:	7b2b      	ldrb	r3, [r5, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f1      	beq.n	800281a <log_init+0x32>
			if (backend->api->init != NULL) {
 8002836:	0123      	lsls	r3, r4, #4
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <log_init+0x68>)
 800283a:	58d3      	ldr	r3, [r2, r3]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0e2      	beq.n	8002808 <log_init+0x20>
				backend->api->init(backend);
 8002842:	4628      	mov	r0, r5
 8002844:	4798      	blx	r3
 8002846:	e7df      	b.n	8002808 <log_init+0x20>
}
 8002848:	bd70      	pop	{r4, r5, r6, pc}
 800284a:	4770      	bx	lr
 800284c:	200004a8 	.word	0x200004a8
 8002850:	0800a030 	.word	0x0800a030
 8002854:	0800a040 	.word	0x0800a040

08002858 <get_msg>:
{
 8002858:	b510      	push	{r4, lr}
	__asm__ volatile(
 800285a:	f04f 0310 	mov.w	r3, #16
 800285e:	f3ef 8411 	mrs	r4, BASEPRI
 8002862:	f383 8812 	msr	BASEPRI_MAX, r3
 8002866:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <get_msg+0x24>)
 800286c:	f005 fafa 	bl	8007e64 <log_list_head_get>
	__asm__ volatile(
 8002870:	f384 8811 	msr	BASEPRI, r4
 8002874:	f3bf 8f6f 	isb	sy
}
 8002878:	bd10      	pop	{r4, pc}
 800287a:	bf00      	nop
 800287c:	200004ac 	.word	0x200004ac

08002880 <z_log_notify_backend_enabled>:
{
 8002880:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <z_log_notify_backend_enabled+0x18>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b11b      	cbz	r3, 8002890 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <z_log_notify_backend_enabled+0x18>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
}
 800288e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <z_log_notify_backend_enabled+0x1c>)
 8002892:	f003 f93f 	bl	8005b14 <z_impl_k_sem_give>
}
 8002896:	e7f7      	b.n	8002888 <z_log_notify_backend_enabled+0x8>
 8002898:	20000668 	.word	0x20000668
 800289c:	200002bc 	.word	0x200002bc

080028a0 <z_log_dropped>:
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <z_log_dropped+0x1c>)
 80028a2:	f3bf 8f5b 	dmb	ish
 80028a6:	e853 2f00 	ldrex	r2, [r3]
 80028aa:	3201      	adds	r2, #1
 80028ac:	e843 2100 	strex	r1, r2, [r3]
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d1f8      	bne.n	80028a6 <z_log_dropped+0x6>
 80028b4:	f3bf 8f5b 	dmb	ish
}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200004a4 	.word	0x200004a4

080028c0 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <z_log_dropped_read_and_clear+0x1c>)
}
 80028c2:	2000      	movs	r0, #0
 80028c4:	4602      	mov	r2, r0
 80028c6:	f3bf 8f5b 	dmb	ish
 80028ca:	e853 0f00 	ldrex	r0, [r3]
 80028ce:	e843 2100 	strex	r1, r2, [r3]
 80028d2:	2900      	cmp	r1, #0
 80028d4:	d1f9      	bne.n	80028ca <z_log_dropped_read_and_clear+0xa>
 80028d6:	f3bf 8f5b 	dmb	ish
 80028da:	4770      	bx	lr
 80028dc:	200004a4 	.word	0x200004a4

080028e0 <dropped_notify>:
{
 80028e0:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80028e2:	f7ff ffed 	bl	80028c0 <z_log_dropped_read_and_clear>
 80028e6:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 80028e8:	2400      	movs	r4, #0
 80028ea:	e000      	b.n	80028ee <dropped_notify+0xe>
 80028ec:	3401      	adds	r4, #1
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <dropped_notify+0x3c>)
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <dropped_notify+0x40>)
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80028f8:	da0f      	bge.n	800291a <dropped_notify+0x3a>
 80028fa:	4809      	ldr	r0, [pc, #36]	; (8002920 <dropped_notify+0x40>)
 80028fc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f1      	beq.n	80028ec <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8002908:	0123      	lsls	r3, r4, #4
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <dropped_notify+0x40>)
 800290c:	58d3      	ldr	r3, [r2, r3]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0eb      	beq.n	80028ec <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8002914:	4629      	mov	r1, r5
 8002916:	4798      	blx	r3
 8002918:	e7e8      	b.n	80028ec <dropped_notify+0xc>
}
 800291a:	bd38      	pop	{r3, r4, r5, pc}
 800291c:	0800a040 	.word	0x0800a040
 8002920:	0800a030 	.word	0x0800a030

08002924 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <z_log_dropped_pending+0x10>)
 8002926:	6818      	ldr	r0, [r3, #0]
}
 8002928:	2800      	cmp	r0, #0
 800292a:	bfd4      	ite	le
 800292c:	2000      	movle	r0, #0
 800292e:	2001      	movgt	r0, #1
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200004a4 	.word	0x200004a4

08002938 <z_log_strdup>:
{
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
 800293e:	f7ff fea1 	bl	8002684 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8002942:	bb10      	cbnz	r0, 800298a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8002944:	2200      	movs	r2, #0
 8002946:	2300      	movs	r3, #0
 8002948:	a901      	add	r1, sp, #4
 800294a:	4811      	ldr	r0, [pc, #68]	; (8002990 <z_log_strdup+0x58>)
 800294c:	f002 ff62 	bl	8005814 <k_mem_slab_alloc>
	if (err != 0) {
 8002950:	b108      	cbz	r0, 8002956 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 8002952:	4c10      	ldr	r4, [pc, #64]	; (8002994 <z_log_strdup+0x5c>)
 8002954:	e019      	b.n	800298a <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 8002956:	9b01      	ldr	r3, [sp, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f3bf 8f5b 	dmb	ish
 800295e:	e853 1f00 	ldrex	r1, [r3]
 8002962:	e843 2000 	strex	r0, r2, [r3]
 8002966:	2800      	cmp	r0, #0
 8002968:	d1f9      	bne.n	800295e <z_log_strdup+0x26>
 800296a:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 800296e:	9d01      	ldr	r5, [sp, #4]
 8002970:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8002972:	221f      	movs	r2, #31
 8002974:	4621      	mov	r1, r4
 8002976:	4630      	mov	r0, r6
 8002978:	f006 feed 	bl	8009756 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 800297c:	237e      	movs	r3, #126	; 0x7e
 800297e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8002982:	2300      	movs	r3, #0
 8002984:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
 8002988:	4634      	mov	r4, r6
}
 800298a:	4620      	mov	r0, r4
 800298c:	b002      	add	sp, #8
 800298e:	bd70      	pop	{r4, r5, r6, pc}
 8002990:	200004b4 	.word	0x200004b4
 8002994:	0800a1d4 	.word	0x0800a1d4

08002998 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8002998:	b138      	cbz	r0, 80029aa <log_is_strdup+0x12>
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <log_is_strdup+0x20>)
 800299c:	4290      	cmp	r0, r2
 800299e:	d306      	bcc.n	80029ae <log_is_strdup+0x16>
 80029a0:	32a0      	adds	r2, #160	; 0xa0
 80029a2:	4290      	cmp	r0, r2
 80029a4:	d305      	bcc.n	80029b2 <log_is_strdup+0x1a>
 80029a6:	2000      	movs	r0, #0
 80029a8:	4770      	bx	lr
 80029aa:	2000      	movs	r0, #0
 80029ac:	4770      	bx	lr
 80029ae:	2000      	movs	r0, #0
 80029b0:	4770      	bx	lr
 80029b2:	2001      	movs	r0, #1
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20001b40 	.word	0x20001b40

080029bc <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80029bc:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 80029be:	f013 0f01 	tst.w	r3, #1
 80029c2:	d000      	beq.n	80029c6 <detect_missed_strdup+0xa>
 80029c4:	4770      	bx	lr
{
 80029c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029ca:	b083      	sub	sp, #12
 80029cc:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 80029ce:	f005 faf0 	bl	8007fb2 <log_msg_str_get>
 80029d2:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 80029d4:	4630      	mov	r0, r6
 80029d6:	f005 fad7 	bl	8007f88 <log_msg_nargs_get>
 80029da:	4601      	mov	r1, r0
 80029dc:	4638      	mov	r0, r7
 80029de:	f7ff feb5 	bl	800274c <z_log_get_s_mask>
 80029e2:	4605      	mov	r5, r0
	while (mask) {
 80029e4:	e004      	b.n	80029f0 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 80029e6:	2201      	movs	r2, #1
 80029e8:	fa02 f404 	lsl.w	r4, r2, r4
 80029ec:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 80029f0:	b36d      	cbz	r5, 8002a4e <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 80029f2:	fab5 f485 	clz	r4, r5
 80029f6:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 80029fa:	4621      	mov	r1, r4
 80029fc:	4630      	mov	r0, r6
 80029fe:	f005 fac6 	bl	8007f8e <log_msg_arg_get>
 8002a02:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8002a04:	f7ff fe3e 	bl	8002684 <is_rodata>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d1ec      	bne.n	80029e6 <detect_missed_strdup+0x2a>
 8002a0c:	4648      	mov	r0, r9
 8002a0e:	f7ff ffc3 	bl	8002998 <log_is_strdup>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d1e7      	bne.n	80029e6 <detect_missed_strdup+0x2a>
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <detect_missed_strdup+0x98>)
 8002a18:	4599      	cmp	r9, r3
 8002a1a:	d0e4      	beq.n	80029e6 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8002a1c:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8002a1e:	f3c1 1189 	ubfx	r1, r1, #6, #10
 8002a22:	f000 f9ef 	bl	8002e04 <log_source_name_get>
 8002a26:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <detect_missed_strdup+0x9c>)
 8002a2a:	490c      	ldr	r1, [pc, #48]	; (8002a5c <detect_missed_strdup+0xa0>)
 8002a2c:	1a5b      	subs	r3, r3, r1
 8002a2e:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002a30:	2101      	movs	r1, #1
 8002a32:	f361 0802 	bfi	r8, r1, #0, #3
 8002a36:	f36f 08c5 	bfc	r8, #3, #3
 8002a3a:	f363 188f 	bfi	r8, r3, #6, #10
 8002a3e:	f8ad 8000 	strh.w	r8, [sp]
 8002a42:	463b      	mov	r3, r7
 8002a44:	4621      	mov	r1, r4
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <detect_missed_strdup+0xa4>)
 8002a48:	f000 f8b2 	bl	8002bb0 <log_3>
 8002a4c:	e7cb      	b.n	80029e6 <detect_missed_strdup+0x2a>
}
 8002a4e:	b003      	add	sp, #12
 8002a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a54:	0800a1d4 	.word	0x0800a1d4
 8002a58:	0800a000 	.word	0x0800a000
 8002a5c:	0800a000 	.word	0x0800a000
 8002a60:	0800a1f0 	.word	0x0800a1f0

08002a64 <msg_process>:
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	4606      	mov	r6, r0
	if (!bypass) {
 8002a68:	bb19      	cbnz	r1, 8002ab2 <msg_process+0x4e>
		    !panic_mode) {
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <msg_process+0x58>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8002a6e:	b10b      	cbz	r3, 8002a74 <msg_process+0x10>
{
 8002a70:	2400      	movs	r4, #0
 8002a72:	e003      	b.n	8002a7c <msg_process+0x18>
			detect_missed_strdup(msg.msg);
 8002a74:	f7ff ffa2 	bl	80029bc <detect_missed_strdup>
 8002a78:	e7fa      	b.n	8002a70 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <msg_process+0x5c>)
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <msg_process+0x60>)
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002a86:	da14      	bge.n	8002ab2 <msg_process+0x4e>
	return &__log_backends_start[idx];
 8002a88:	4d0e      	ldr	r5, [pc, #56]	; (8002ac4 <msg_process+0x60>)
 8002a8a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8002a8e:	686b      	ldr	r3, [r5, #4]
 8002a90:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f1      	beq.n	8002a7a <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 8002a96:	4631      	mov	r1, r6
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f005 f9eb 	bl	8007e74 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d0eb      	beq.n	8002a7a <msg_process+0x16>
	backend->api->put(backend, msg);
 8002aa2:	0127      	lsls	r7, r4, #4
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <msg_process+0x60>)
 8002aa6:	59db      	ldr	r3, [r3, r7]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4631      	mov	r1, r6
 8002aac:	4628      	mov	r0, r5
 8002aae:	4798      	blx	r3
}
 8002ab0:	e7e3      	b.n	8002a7a <msg_process+0x16>
			log_msg_put(msg.msg);
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	f005 fa7f 	bl	8007fb6 <log_msg_put>
}
 8002ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000669 	.word	0x20000669
 8002ac0:	0800a040 	.word	0x0800a040
 8002ac4:	0800a030 	.word	0x0800a030

08002ac8 <z_impl_log_process>:
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <z_impl_log_process+0x48>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b903      	cbnz	r3, 8002ad4 <z_impl_log_process+0xc>
 8002ad2:	b1c8      	cbz	r0, 8002b08 <z_impl_log_process+0x40>
	msg = get_msg();
 8002ad4:	f7ff fec0 	bl	8002858 <get_msg>
	if (msg.msg) {
 8002ad8:	4602      	mov	r2, r0
 8002ada:	b178      	cbz	r0, 8002afc <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002adc:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <z_impl_log_process+0x4c>)
 8002ade:	f3bf 8f5b 	dmb	ish
 8002ae2:	e853 1f00 	ldrex	r1, [r3]
 8002ae6:	3901      	subs	r1, #1
 8002ae8:	e843 1000 	strex	r0, r1, [r3]
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d1f8      	bne.n	8002ae2 <z_impl_log_process+0x1a>
 8002af0:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8002af4:	4621      	mov	r1, r4
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7ff ffb4 	bl	8002a64 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8002afc:	b914      	cbnz	r4, 8002b04 <z_impl_log_process+0x3c>
 8002afe:	f7ff ff11 	bl	8002924 <z_log_dropped_pending>
 8002b02:	b910      	cbnz	r0, 8002b0a <z_impl_log_process+0x42>
	return next_pending();
 8002b04:	f7ff fdea 	bl	80026dc <next_pending>
}
 8002b08:	bd10      	pop	{r4, pc}
		dropped_notify();
 8002b0a:	f7ff fee9 	bl	80028e0 <dropped_notify>
 8002b0e:	e7f9      	b.n	8002b04 <z_impl_log_process+0x3c>
 8002b10:	20000668 	.word	0x20000668
 8002b14:	200004a0 	.word	0x200004a0

08002b18 <z_log_msg_post_finalize>:
{
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <z_log_msg_post_finalize+0x84>)
 8002b1e:	f3bf 8f5b 	dmb	ish
 8002b22:	e853 2f00 	ldrex	r2, [r3]
 8002b26:	3201      	adds	r2, #1
 8002b28:	e843 2100 	strex	r1, r2, [r3]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d1f8      	bne.n	8002b22 <z_log_msg_post_finalize+0xa>
 8002b30:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <z_log_msg_post_finalize+0x88>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b963      	cbnz	r3, 8002b54 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <z_log_msg_post_finalize+0x8c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b11b      	cbz	r3, 8002b48 <z_log_msg_post_finalize+0x30>
 8002b40:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <z_log_msg_post_finalize+0x84>)
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	2a01      	cmp	r2, #1
 8002b46:	d015      	beq.n	8002b74 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <z_log_msg_post_finalize+0x84>)
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	2a0a      	cmp	r2, #10
 8002b4e:	d01c      	beq.n	8002b8a <z_log_msg_post_finalize+0x72>
}
 8002b50:	b002      	add	sp, #8
 8002b52:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8002b54:	f04f 0310 	mov.w	r3, #16
 8002b58:	f3ef 8411 	mrs	r4, BASEPRI
 8002b5c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002b60:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff ffaf 	bl	8002ac8 <z_impl_log_process>
	__asm__ volatile(
 8002b6a:	f384 8811 	msr	BASEPRI, r4
 8002b6e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002b72:	e7ed      	b.n	8002b50 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2300      	movs	r3, #0
 8002b78:	e9cd 2300 	strd	r2, r3, [sp]
 8002b7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b80:	2300      	movs	r3, #0
 8002b82:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <z_log_msg_post_finalize+0x90>)
 8002b84:	f003 fcbe 	bl	8006504 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8002b88:	e7e2      	b.n	8002b50 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0e0      	beq.n	8002b50 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <z_log_msg_post_finalize+0x90>)
 8002b90:	f006 fca5 	bl	80094de <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <z_log_msg_post_finalize+0x94>)
 8002b96:	f002 ffbd 	bl	8005b14 <z_impl_k_sem_give>
}
 8002b9a:	e7d9      	b.n	8002b50 <z_log_msg_post_finalize+0x38>
 8002b9c:	200004a0 	.word	0x200004a0
 8002ba0:	20000669 	.word	0x20000669
 8002ba4:	200004d4 	.word	0x200004d4
 8002ba8:	200002d0 	.word	0x200002d0
 8002bac:	200002bc 	.word	0x200002bc

08002bb0 <log_3>:
{
 8002bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	460f      	mov	r7, r1
 8002bb8:	4616      	mov	r6, r2
 8002bba:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8002bbc:	f000 f97a 	bl	8002eb4 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	b118      	cbz	r0, 8002bcc <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 8002bcc:	b14c      	cbz	r4, 8002be2 <log_3+0x32>
		msg->str = str;
 8002bce:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 8002bd2:	7a60      	ldrb	r0, [r4, #9]
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f363 1007 	bfi	r0, r3, #4, #4
 8002bda:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8002bdc:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8002bde:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 8002be0:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 8002be2:	b1c4      	cbz	r4, 8002c16 <log_3+0x66>
	msg->hdr.ids = src_level;
 8002be4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8002be8:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <log_3+0x6c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4798      	blx	r3
 8002bf0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002bf2:	f04f 0310 	mov.w	r3, #16
 8002bf6:	f3ef 8511 	mrs	r5, BASEPRI
 8002bfa:	f383 8812 	msr	BASEPRI_MAX, r3
 8002bfe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8002c02:	4621      	mov	r1, r4
 8002c04:	4806      	ldr	r0, [pc, #24]	; (8002c20 <log_3+0x70>)
 8002c06:	f005 f921 	bl	8007e4c <log_list_add_tail>
	__asm__ volatile(
 8002c0a:	f385 8811 	msr	BASEPRI, r5
 8002c0e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8002c12:	f7ff ff81 	bl	8002b18 <z_log_msg_post_finalize>
}
 8002c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	200004ac 	.word	0x200004ac

08002c24 <log_0>:
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4605      	mov	r5, r0
 8002c28:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8002c2a:	f000 f943 	bl	8002eb4 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8002c2e:	4604      	mov	r4, r0
 8002c30:	b118      	cbz	r0, 8002c3a <log_0+0x16>
		msg->hdr.ref_cnt = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 8002c3a:	b104      	cbz	r4, 8002c3e <log_0+0x1a>
		msg->str = str;
 8002c3c:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8002c3e:	b1b4      	cbz	r4, 8002c6e <log_0+0x4a>
	msg->hdr.ids = src_level;
 8002c40:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <log_0+0x4c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4798      	blx	r3
 8002c48:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002c4a:	f04f 0310 	mov.w	r3, #16
 8002c4e:	f3ef 8511 	mrs	r5, BASEPRI
 8002c52:	f383 8812 	msr	BASEPRI_MAX, r3
 8002c56:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4805      	ldr	r0, [pc, #20]	; (8002c74 <log_0+0x50>)
 8002c5e:	f005 f8f5 	bl	8007e4c <log_list_add_tail>
	__asm__ volatile(
 8002c62:	f385 8811 	msr	BASEPRI, r5
 8002c66:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8002c6a:	f7ff ff55 	bl	8002b18 <z_log_msg_post_finalize>
}
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	20000004 	.word	0x20000004
 8002c74:	200004ac 	.word	0x200004ac

08002c78 <log_1>:
{
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	4607      	mov	r7, r0
 8002c7c:	460e      	mov	r6, r1
 8002c7e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8002c80:	f000 f918 	bl	8002eb4 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8002c84:	4604      	mov	r4, r0
 8002c86:	b118      	cbz	r0, 8002c90 <log_1+0x18>
		msg->hdr.ref_cnt = 1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 8002c90:	b134      	cbz	r4, 8002ca0 <log_1+0x28>
		msg->str = str;
 8002c92:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 8002c94:	7a63      	ldrb	r3, [r4, #9]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f362 1307 	bfi	r3, r2, #4, #4
 8002c9c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8002c9e:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
 8002ca0:	b1b4      	cbz	r4, 8002cd0 <log_1+0x58>
	msg->hdr.ids = src_level;
 8002ca2:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <log_1+0x5c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4798      	blx	r3
 8002caa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002cac:	f04f 0310 	mov.w	r3, #16
 8002cb0:	f3ef 8511 	mrs	r5, BASEPRI
 8002cb4:	f383 8812 	msr	BASEPRI_MAX, r3
 8002cb8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <log_1+0x60>)
 8002cc0:	f005 f8c4 	bl	8007e4c <log_list_add_tail>
	__asm__ volatile(
 8002cc4:	f385 8811 	msr	BASEPRI, r5
 8002cc8:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8002ccc:	f7ff ff24 	bl	8002b18 <z_log_msg_post_finalize>
}
 8002cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	200004ac 	.word	0x200004ac

08002cdc <log_2>:
{
 8002cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	460f      	mov	r7, r1
 8002ce4:	4616      	mov	r6, r2
 8002ce6:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8002ce8:	f000 f8e4 	bl	8002eb4 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8002cec:	4604      	mov	r4, r0
 8002cee:	b118      	cbz	r0, 8002cf8 <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 8002cf8:	b144      	cbz	r4, 8002d0c <log_2+0x30>
		msg->str = str;
 8002cfa:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 8002cfe:	7a60      	ldrb	r0, [r4, #9]
 8002d00:	2302      	movs	r3, #2
 8002d02:	f363 1007 	bfi	r0, r3, #4, #4
 8002d06:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8002d08:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8002d0a:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
 8002d0c:	b1b4      	cbz	r4, 8002d3c <log_2+0x60>
	msg->hdr.ids = src_level;
 8002d0e:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <log_2+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4798      	blx	r3
 8002d16:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8002d18:	f04f 0310 	mov.w	r3, #16
 8002d1c:	f3ef 8511 	mrs	r5, BASEPRI
 8002d20:	f383 8812 	msr	BASEPRI_MAX, r3
 8002d24:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8002d28:	4621      	mov	r1, r4
 8002d2a:	4806      	ldr	r0, [pc, #24]	; (8002d44 <log_2+0x68>)
 8002d2c:	f005 f88e 	bl	8007e4c <log_list_add_tail>
	__asm__ volatile(
 8002d30:	f385 8811 	msr	BASEPRI, r5
 8002d34:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8002d38:	f7ff feee 	bl	8002b18 <z_log_msg_post_finalize>
}
 8002d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d40:	20000004 	.word	0x20000004
 8002d44:	200004ac 	.word	0x200004ac

08002d48 <z_impl_log_panic>:
	if (panic_mode) {
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <z_impl_log_panic+0x4c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b103      	cbz	r3, 8002d50 <z_impl_log_panic+0x8>
 8002d4e:	4770      	bx	lr
{
 8002d50:	b510      	push	{r4, lr}
	log_init();
 8002d52:	f7ff fd49 	bl	80027e8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002d56:	2400      	movs	r4, #0
 8002d58:	e000      	b.n	8002d5c <z_impl_log_panic+0x14>
 8002d5a:	3401      	adds	r4, #1
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <z_impl_log_panic+0x50>)
 8002d5e:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <z_impl_log_panic+0x54>)
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002d66:	da0c      	bge.n	8002d82 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8002d68:	480c      	ldr	r0, [pc, #48]	; (8002d9c <z_impl_log_panic+0x54>)
 8002d6a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8002d6e:	6843      	ldr	r3, [r0, #4]
 8002d70:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f1      	beq.n	8002d5a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8002d76:	0123      	lsls	r3, r4, #4
 8002d78:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <z_impl_log_panic+0x54>)
 8002d7a:	58d3      	ldr	r3, [r2, r3]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	4798      	blx	r3
}
 8002d80:	e7eb      	b.n	8002d5a <z_impl_log_panic+0x12>
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff fea0 	bl	8002ac8 <z_impl_log_process>
		while (log_process(false) == true) {
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d1fa      	bne.n	8002d82 <z_impl_log_panic+0x3a>
	panic_mode = true;
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <z_impl_log_panic+0x4c>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
}
 8002d92:	bd10      	pop	{r4, pc}
 8002d94:	20000669 	.word	0x20000669
 8002d98:	0800a040 	.word	0x0800a040
 8002d9c:	0800a030 	.word	0x0800a030

08002da0 <log_process_thread_func>:
{
 8002da0:	b508      	push	{r3, lr}
	log_init();
 8002da2:	f7ff fd21 	bl	80027e8 <log_init>
	return z_impl_z_current_get();
 8002da6:	f003 f9b7 	bl	8006118 <z_impl_z_current_get>
	thread_set(k_current_get());
 8002daa:	f7ff fc7b 	bl	80026a4 <thread_set>
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7ff fe8a 	bl	8002ac8 <z_impl_log_process>
		if (log_process(false) == false) {
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d1fa      	bne.n	8002dae <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc0:	4801      	ldr	r0, [pc, #4]	; (8002dc8 <log_process_thread_func+0x28>)
 8002dc2:	f002 fec9 	bl	8005b58 <z_impl_k_sem_take>
 8002dc6:	e7f2      	b.n	8002dae <log_process_thread_func+0xe>
 8002dc8:	200002bc 	.word	0x200002bc

08002dcc <log_free>:
{
 8002dcc:	b500      	push	{lr}
 8002dce:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8002dd0:	3804      	subs	r0, #4
 8002dd2:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002dd4:	f3bf 8f5b 	dmb	ish
 8002dd8:	e850 3f00 	ldrex	r3, [r0]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	e840 2100 	strex	r1, r2, [r0]
 8002de2:	2900      	cmp	r1, #0
 8002de4:	d1f8      	bne.n	8002dd8 <log_free+0xc>
 8002de6:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d002      	beq.n	8002df4 <log_free+0x28>
}
 8002dee:	b003      	add	sp, #12
 8002df0:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8002df4:	a901      	add	r1, sp, #4
 8002df6:	4802      	ldr	r0, [pc, #8]	; (8002e00 <log_free+0x34>)
 8002df8:	f006 f924 	bl	8009044 <k_mem_slab_free>
}
 8002dfc:	e7f7      	b.n	8002dee <log_free+0x22>
 8002dfe:	bf00      	nop
 8002e00:	200004b4 	.word	0x200004b4

08002e04 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <log_source_name_get+0x18>)
 8002e06:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <log_source_name_get+0x1c>)
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8002e0e:	d202      	bcs.n	8002e16 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8002e10:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8002e14:	4770      	bx	lr
 8002e16:	2000      	movs	r0, #0
}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	0800a030 	.word	0x0800a030
 8002e20:	0800a000 	.word	0x0800a000

08002e24 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8002e24:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <log_backend_enable+0x20>)
 8002e28:	1ac3      	subs	r3, r0, r3
 8002e2a:	111b      	asrs	r3, r3, #4
 8002e2c:	3301      	adds	r3, #1
	backend->cb->id = id;
 8002e2e:	6842      	ldr	r2, [r0, #4]
 8002e30:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8002e32:	6843      	ldr	r3, [r0, #4]
 8002e34:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8002e36:	6843      	ldr	r3, [r0, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8002e3c:	f7ff fd20 	bl	8002880 <z_log_notify_backend_enabled>
}
 8002e40:	bd08      	pop	{r3, pc}
 8002e42:	bf00      	nop
 8002e44:	0800a030 	.word	0x0800a030

08002e48 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 8002e4e:	e005      	b.n	8002e5c <cont_free+0x14>
		next = cont->next;
 8002e50:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8002e52:	a901      	add	r1, sp, #4
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <cont_free+0x20>)
 8002e56:	f006 f8f5 	bl	8009044 <k_mem_slab_free>
		cont = next;
 8002e5a:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f6      	bne.n	8002e50 <cont_free+0x8>
	}
}
 8002e62:	b002      	add	sp, #8
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	200004d8 	.word	0x200004d8

08002e6c <log_msg_pool_init>:
{
 8002e6c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8002e6e:	2320      	movs	r3, #32
 8002e70:	461a      	mov	r2, r3
 8002e72:	4902      	ldr	r1, [pc, #8]	; (8002e7c <log_msg_pool_init+0x10>)
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <log_msg_pool_init+0x14>)
 8002e76:	f006 f8d6 	bl	8009026 <k_mem_slab_init>
}
 8002e7a:	bd08      	pop	{r3, pc}
 8002e7c:	20001be0 	.word	0x20001be0
 8002e80:	200004d8 	.word	0x200004d8

08002e84 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8002e84:	b510      	push	{r4, lr}
 8002e86:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7ff fe1b 	bl	8002ac8 <z_impl_log_process>
 8002e92:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 8002e94:	f7ff fd04 	bl	80028a0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	a901      	add	r1, sp, #4
 8002e9e:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <log_msg_no_space_handle+0x2c>)
 8002ea0:	f002 fcb8 	bl	8005814 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8002ea4:	b108      	cbz	r0, 8002eaa <log_msg_no_space_handle+0x26>
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d1f0      	bne.n	8002e8c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 8002eaa:	9801      	ldr	r0, [sp, #4]
 8002eac:	b002      	add	sp, #8
 8002eae:	bd10      	pop	{r4, pc}
 8002eb0:	200004d8 	.word	0x200004d8

08002eb4 <log_msg_chunk_alloc>:
{
 8002eb4:	b500      	push	{lr}
 8002eb6:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 8002ebc:	f004 ffe4 	bl	8007e88 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8002ec0:	b150      	cbz	r0, 8002ed8 <log_msg_chunk_alloc+0x24>
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	a901      	add	r1, sp, #4
 8002ec8:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <log_msg_chunk_alloc+0x34>)
 8002eca:	f002 fca3 	bl	8005814 <k_mem_slab_alloc>
	if (err != 0) {
 8002ece:	b930      	cbnz	r0, 8002ede <log_msg_chunk_alloc+0x2a>
}
 8002ed0:	9801      	ldr	r0, [sp, #4]
 8002ed2:	b003      	add	sp, #12
 8002ed4:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2300      	movs	r3, #0
 8002edc:	e7f3      	b.n	8002ec6 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 8002ede:	f7ff ffd1 	bl	8002e84 <log_msg_no_space_handle>
 8002ee2:	9001      	str	r0, [sp, #4]
 8002ee4:	e7f4      	b.n	8002ed0 <log_msg_chunk_alloc+0x1c>
 8002ee6:	bf00      	nop
 8002ee8:	200004d8 	.word	0x200004d8

08002eec <msg_free>:
{
 8002eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	f005 f848 	bl	8007f88 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8002ef8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 8002efa:	f013 0f01 	tst.w	r3, #1
 8002efe:	d101      	bne.n	8002f04 <msg_free+0x18>
 8002f00:	4606      	mov	r6, r0
 8002f02:	bb50      	cbnz	r0, 8002f5a <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 8002f04:	9b01      	ldr	r3, [sp, #4]
 8002f06:	7a1a      	ldrb	r2, [r3, #8]
 8002f08:	f012 0f02 	tst.w	r2, #2
 8002f0c:	d128      	bne.n	8002f60 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8002f0e:	a901      	add	r1, sp, #4
 8002f10:	4815      	ldr	r0, [pc, #84]	; (8002f68 <msg_free+0x7c>)
 8002f12:	f006 f897 	bl	8009044 <k_mem_slab_free>
}
 8002f16:	b003      	add	sp, #12
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 8002f1a:	9801      	ldr	r0, [sp, #4]
 8002f1c:	f005 f849 	bl	8007fb2 <log_msg_str_get>
 8002f20:	4631      	mov	r1, r6
 8002f22:	f7ff fc13 	bl	800274c <z_log_get_s_mask>
					if (smask == 0U) {
 8002f26:	4607      	mov	r7, r0
 8002f28:	b970      	cbnz	r0, 8002f48 <msg_free+0x5c>
 8002f2a:	e7eb      	b.n	8002f04 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	42b4      	cmp	r4, r6
 8002f30:	d2e8      	bcs.n	8002f04 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8002f32:	4621      	mov	r1, r4
 8002f34:	9801      	ldr	r0, [sp, #4]
 8002f36:	f005 f82a 	bl	8007f8e <log_msg_arg_get>
 8002f3a:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 8002f3c:	f7ff fd2c 	bl	8002998 <log_is_strdup>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d0f3      	beq.n	8002f2c <msg_free+0x40>
				if (smask == 0U) {
 8002f44:	2f00      	cmp	r7, #0
 8002f46:	d0e8      	beq.n	8002f1a <msg_free+0x2e>
				if (smask & BIT(i)) {
 8002f48:	fa27 f304 	lsr.w	r3, r7, r4
 8002f4c:	f013 0f01 	tst.w	r3, #1
 8002f50:	d0ec      	beq.n	8002f2c <msg_free+0x40>
					log_free(buf);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff ff3a 	bl	8002dcc <log_free>
 8002f58:	e7e8      	b.n	8002f2c <msg_free+0x40>
		uint32_t smask = 0U;
 8002f5a:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
 8002f5c:	463c      	mov	r4, r7
 8002f5e:	e7e6      	b.n	8002f2e <msg_free+0x42>
		cont_free(msg->payload.ext.next);
 8002f60:	6958      	ldr	r0, [r3, #20]
 8002f62:	f7ff ff71 	bl	8002e48 <cont_free>
 8002f66:	e7d2      	b.n	8002f0e <msg_free+0x22>
 8002f68:	200004d8 	.word	0x200004d8

08002f6c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8002f6c:	b40e      	push	{r1, r2, r3}
 8002f6e:	b500      	push	{lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	4601      	mov	r1, r0
 8002f74:	ab03      	add	r3, sp, #12
 8002f76:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8002f7a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <print_formatted+0x20>)
 8002f7e:	f7ff f883 	bl	8002088 <cbvprintf>
	va_end(args);

	return length;
}
 8002f82:	b002      	add	sp, #8
 8002f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f88:	b003      	add	sp, #12
 8002f8a:	4770      	bx	lr
 8002f8c:	08008355 	.word	0x08008355

08002f90 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8002f90:	b530      	push	{r4, r5, lr}
 8002f92:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8002f94:	f011 0f44 	tst.w	r1, #68	; 0x44
 8002f98:	d005      	beq.n	8002fa6 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <timestamp_print+0x74>)
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	b934      	cbnz	r4, 8002fae <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8002fa0:	2000      	movs	r0, #0
	}

	return length;
}
 8002fa2:	b005      	add	sp, #20
 8002fa4:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8002fa6:	4918      	ldr	r1, [pc, #96]	; (8003008 <timestamp_print+0x78>)
 8002fa8:	f7ff ffe0 	bl	8002f6c <print_formatted>
 8002fac:	e7f9      	b.n	8002fa2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <timestamp_print+0x7c>)
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8002fb6:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8002fba:	4a15      	ldr	r2, [pc, #84]	; (8003010 <timestamp_print+0x80>)
 8002fbc:	fba2 320c 	umull	r3, r2, r2, ip
 8002fc0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8002fc2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8002fc6:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <timestamp_print+0x84>)
 8002fcc:	fba3 530e 	umull	r5, r3, r3, lr
 8002fd0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8002fd2:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 8002fd6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8002fda:	fb0c f101 	mul.w	r1, ip, r1
 8002fde:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8002fe2:	fb05 1114 	mls	r1, r5, r4, r1
 8002fe6:	fb0c f101 	mul.w	r1, ip, r1
 8002fea:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8002fee:	9102      	str	r1, [sp, #8]
 8002ff0:	9501      	str	r5, [sp, #4]
 8002ff2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8002ff6:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 8002ffa:	9100      	str	r1, [sp, #0]
 8002ffc:	4906      	ldr	r1, [pc, #24]	; (8003018 <timestamp_print+0x88>)
 8002ffe:	f7ff ffb5 	bl	8002f6c <print_formatted>
 8003002:	e7ce      	b.n	8002fa2 <timestamp_print+0x12>
 8003004:	200004f8 	.word	0x200004f8
 8003008:	0800a234 	.word	0x0800a234
 800300c:	200004fc 	.word	0x200004fc
 8003010:	91a2b3c5 	.word	0x91a2b3c5
 8003014:	88888889 	.word	0x88888889
 8003018:	0800a240 	.word	0x0800a240

0800301c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 800301c:	b161      	cbz	r1, 8003038 <color_print+0x1c>
{
 800301e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003020:	b12a      	cbz	r2, 800302e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8003022:	4a06      	ldr	r2, [pc, #24]	; (800303c <color_print+0x20>)
 8003024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003028:	b912      	cbnz	r2, 8003030 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800302a:	4a05      	ldr	r2, [pc, #20]	; (8003040 <color_print+0x24>)
 800302c:	e000      	b.n	8003030 <color_print+0x14>
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <color_print+0x28>)
 8003032:	f7ff ff9b 	bl	8002f6c <print_formatted>
	}
}
 8003036:	bd08      	pop	{r3, pc}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	0800a2b8 	.word	0x0800a2b8
 8003040:	0800a25c 	.word	0x0800a25c
 8003044:	0800a264 	.word	0x0800a264

08003048 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003048:	f011 0f10 	tst.w	r1, #16
 800304c:	d10b      	bne.n	8003066 <newline_print+0x1e>
{
 800304e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003050:	f011 0f20 	tst.w	r1, #32
 8003054:	d003      	beq.n	800305e <newline_print+0x16>
		print_formatted(ctx, "\n");
 8003056:	4904      	ldr	r1, [pc, #16]	; (8003068 <newline_print+0x20>)
 8003058:	f7ff ff88 	bl	8002f6c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 800305c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 800305e:	4903      	ldr	r1, [pc, #12]	; (800306c <newline_print+0x24>)
 8003060:	f7ff ff84 	bl	8002f6c <print_formatted>
 8003064:	e7fa      	b.n	800305c <newline_print+0x14>
 8003066:	4770      	bx	lr
 8003068:	0800a7e0 	.word	0x0800a7e0
 800306c:	0800a268 	.word	0x0800a268

08003070 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8003070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003074:	4605      	mov	r5, r0
 8003076:	460f      	mov	r7, r1
 8003078:	4616      	mov	r6, r2
 800307a:	4698      	mov	r8, r3
	newline_print(output, flags);
 800307c:	9906      	ldr	r1, [sp, #24]
 800307e:	f7ff ffe3 	bl	8003048 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8003082:	2400      	movs	r4, #0
 8003084:	4544      	cmp	r4, r8
 8003086:	da05      	bge.n	8003094 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8003088:	4924      	ldr	r1, [pc, #144]	; (800311c <hexdump_line_print+0xac>)
 800308a:	4628      	mov	r0, r5
 800308c:	f7ff ff6e 	bl	8002f6c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8003090:	3401      	adds	r4, #1
 8003092:	e7f7      	b.n	8003084 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003094:	2400      	movs	r4, #0
 8003096:	e009      	b.n	80030ac <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003098:	4920      	ldr	r1, [pc, #128]	; (800311c <hexdump_line_print+0xac>)
 800309a:	4628      	mov	r0, r5
 800309c:	f7ff ff66 	bl	8002f6c <print_formatted>
 80030a0:	e00b      	b.n	80030ba <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80030a2:	491f      	ldr	r1, [pc, #124]	; (8003120 <hexdump_line_print+0xb0>)
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7ff ff61 	bl	8002f6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80030aa:	3401      	adds	r4, #1
 80030ac:	2c0f      	cmp	r4, #15
 80030ae:	dc0c      	bgt.n	80030ca <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	dd02      	ble.n	80030ba <hexdump_line_print+0x4a>
 80030b4:	f014 0f07 	tst.w	r4, #7
 80030b8:	d0ee      	beq.n	8003098 <hexdump_line_print+0x28>
		if (i < length) {
 80030ba:	42b4      	cmp	r4, r6
 80030bc:	d2f1      	bcs.n	80030a2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 80030be:	5d3a      	ldrb	r2, [r7, r4]
 80030c0:	4918      	ldr	r1, [pc, #96]	; (8003124 <hexdump_line_print+0xb4>)
 80030c2:	4628      	mov	r0, r5
 80030c4:	f7ff ff52 	bl	8002f6c <print_formatted>
 80030c8:	e7ef      	b.n	80030aa <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 80030ca:	4917      	ldr	r1, [pc, #92]	; (8003128 <hexdump_line_print+0xb8>)
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7ff ff4d 	bl	8002f6c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80030d2:	2400      	movs	r4, #0
 80030d4:	e009      	b.n	80030ea <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80030d6:	4911      	ldr	r1, [pc, #68]	; (800311c <hexdump_line_print+0xac>)
 80030d8:	4628      	mov	r0, r5
 80030da:	f7ff ff47 	bl	8002f6c <print_formatted>
 80030de:	e00b      	b.n	80030f8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <hexdump_line_print+0xbc>)
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7ff ff42 	bl	8002f6c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80030e8:	3401      	adds	r4, #1
 80030ea:	2c0f      	cmp	r4, #15
 80030ec:	dc13      	bgt.n	8003116 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	dd02      	ble.n	80030f8 <hexdump_line_print+0x88>
 80030f2:	f014 0f07 	tst.w	r4, #7
 80030f6:	d0ee      	beq.n	80030d6 <hexdump_line_print+0x66>
		if (i < length) {
 80030f8:	42b4      	cmp	r4, r6
 80030fa:	d207      	bcs.n	800310c <hexdump_line_print+0x9c>
			char c = (char)data[i];
 80030fc:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <hexdump_line_print+0xc0>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8003102:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003106:	d1eb      	bne.n	80030e0 <hexdump_line_print+0x70>
 8003108:	222e      	movs	r2, #46	; 0x2e
 800310a:	e7e9      	b.n	80030e0 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 800310c:	4903      	ldr	r1, [pc, #12]	; (800311c <hexdump_line_print+0xac>)
 800310e:	4628      	mov	r0, r5
 8003110:	f7ff ff2c 	bl	8002f6c <print_formatted>
 8003114:	e7e8      	b.n	80030e8 <hexdump_line_print+0x78>
		}
	}
}
 8003116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800311a:	bf00      	nop
 800311c:	0800a290 	.word	0x0800a290
 8003120:	0800a274 	.word	0x0800a274
 8003124:	0800a26c 	.word	0x0800a26c
 8003128:	0800a278 	.word	0x0800a278
 800312c:	0800a27c 	.word	0x0800a27c
 8003130:	0800acc1 	.word	0x0800acc1

08003134 <ids_print>:
{
 8003134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003138:	4680      	mov	r8, r0
 800313a:	4616      	mov	r6, r2
 800313c:	461d      	mov	r5, r3
 800313e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8003142:	b959      	cbnz	r1, 800315c <ids_print+0x28>
	int total = 0;
 8003144:	2400      	movs	r4, #0
	if (source_id >= 0) {
 8003146:	2f00      	cmp	r7, #0
 8003148:	db1c      	blt.n	8003184 <ids_print+0x50>
		total += print_formatted(output,
 800314a:	b186      	cbz	r6, 800316e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 800314c:	2301      	movs	r3, #1
 800314e:	9a07      	ldr	r2, [sp, #28]
 8003150:	4093      	lsls	r3, r2
				(func_on &&
 8003152:	f013 0f10 	tst.w	r3, #16
 8003156:	d118      	bne.n	800318a <ids_print+0x56>
		total += print_formatted(output,
 8003158:	4e0d      	ldr	r6, [pc, #52]	; (8003190 <ids_print+0x5c>)
 800315a:	e009      	b.n	8003170 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <ids_print+0x60>)
 800315e:	9a07      	ldr	r2, [sp, #28]
 8003160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003164:	490c      	ldr	r1, [pc, #48]	; (8003198 <ids_print+0x64>)
 8003166:	f7ff ff01 	bl	8002f6c <print_formatted>
 800316a:	4604      	mov	r4, r0
 800316c:	e7eb      	b.n	8003146 <ids_print+0x12>
		total += print_formatted(output,
 800316e:	4e08      	ldr	r6, [pc, #32]	; (8003190 <ids_print+0x5c>)
 8003170:	4639      	mov	r1, r7
 8003172:	4628      	mov	r0, r5
 8003174:	f7ff fe46 	bl	8002e04 <log_source_name_get>
 8003178:	4602      	mov	r2, r0
 800317a:	4631      	mov	r1, r6
 800317c:	4640      	mov	r0, r8
 800317e:	f7ff fef5 	bl	8002f6c <print_formatted>
 8003182:	4404      	add	r4, r0
}
 8003184:	4620      	mov	r0, r4
 8003186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 800318a:	4e04      	ldr	r6, [pc, #16]	; (800319c <ids_print+0x68>)
 800318c:	e7f0      	b.n	8003170 <ids_print+0x3c>
 800318e:	bf00      	nop
 8003190:	0800a280 	.word	0x0800a280
 8003194:	0800a2f4 	.word	0x0800a2f4
 8003198:	0800a28c 	.word	0x0800a28c
 800319c:	0800a288 	.word	0x0800a288

080031a0 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
 80031a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a4:	b089      	sub	sp, #36	; 0x24
 80031a6:	4607      	mov	r7, r0
 80031a8:	460e      	mov	r6, r1
 80031aa:	4691      	mov	r9, r2
 80031ac:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
 80031ae:	f004 ff00 	bl	8007fb2 <log_msg_str_get>
 80031b2:	4602      	mov	r2, r0
 80031b4:	490f      	ldr	r1, [pc, #60]	; (80031f4 <hexdump_print+0x54>)
 80031b6:	4630      	mov	r0, r6
 80031b8:	f7ff fed8 	bl	8002f6c <print_formatted>
	uint32_t offset = 0U;
 80031bc:	2400      	movs	r4, #0
 80031be:	e009      	b.n	80031d4 <hexdump_print+0x34>
	do {
		length = sizeof(buf);
		log_msg_hexdump_data_get(msg, buf, &length, offset);

		if (length) {
			hexdump_line_print(output, buf, length,
 80031c0:	f8cd 8000 	str.w	r8, [sp]
 80031c4:	464b      	mov	r3, r9
 80031c6:	eb0d 0105 	add.w	r1, sp, r5
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7ff ff50 	bl	8003070 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 80031d0:	9d03      	ldr	r5, [sp, #12]
 80031d2:	442c      	add	r4, r5
		length = sizeof(buf);
 80031d4:	2510      	movs	r5, #16
 80031d6:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80031d8:	4623      	mov	r3, r4
 80031da:	aa03      	add	r2, sp, #12
 80031dc:	eb0d 0105 	add.w	r1, sp, r5
 80031e0:	4638      	mov	r0, r7
 80031e2:	f004 fefb 	bl	8007fdc <log_msg_hexdump_data_get>
		if (length) {
 80031e6:	9a03      	ldr	r2, [sp, #12]
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d1e9      	bne.n	80031c0 <hexdump_print+0x20>
		} else {
			break;
		}
	} while (true);
}
 80031ec:	b009      	add	sp, #36	; 0x24
 80031ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031f2:	bf00      	nop
 80031f4:	0800a264 	.word	0x0800a264

080031f8 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
 80031f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031fa:	b083      	sub	sp, #12
 80031fc:	4606      	mov	r6, r0
 80031fe:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8003200:	2700      	movs	r7, #0
	size_t offset = 0;
 8003202:	463d      	mov	r5, r7
 8003204:	e00d      	b.n	8003222 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
 8003206:	68a2      	ldr	r2, [r4, #8]
 8003208:	4413      	add	r3, r2
 800320a:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 800320e:	2f0a      	cmp	r7, #10
 8003210:	bf14      	ite	ne
 8003212:	2700      	movne	r7, #0
 8003214:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
 8003216:	4620      	mov	r0, r4
 8003218:	f005 f88f 	bl	800833a <log_output_flush>
		offset += length;
 800321c:	9b01      	ldr	r3, [sp, #4]
 800321e:	441d      	add	r5, r3
	} while (length > 0);
 8003220:	b173      	cbz	r3, 8003240 <raw_string_print+0x48>
		length = output->size;
 8003222:	68e3      	ldr	r3, [r4, #12]
 8003224:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8003226:	462b      	mov	r3, r5
 8003228:	aa01      	add	r2, sp, #4
 800322a:	68a1      	ldr	r1, [r4, #8]
 800322c:	4630      	mov	r0, r6
 800322e:	f004 fed5 	bl	8007fdc <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	9a01      	ldr	r2, [sp, #4]
 8003236:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8003238:	9b01      	ldr	r3, [sp, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0eb      	beq.n	8003216 <raw_string_print+0x1e>
 800323e:	e7e2      	b.n	8003206 <raw_string_print+0xe>

	if (eol) {
 8003240:	b90f      	cbnz	r7, 8003246 <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
 8003242:	b003      	add	sp, #12
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
 8003246:	4902      	ldr	r1, [pc, #8]	; (8003250 <raw_string_print+0x58>)
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fe8f 	bl	8002f6c <print_formatted>
}
 800324e:	e7f8      	b.n	8003242 <raw_string_print+0x4a>
 8003250:	0800a294 	.word	0x0800a294

08003254 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 800325a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 800325c:	f242 730f 	movw	r3, #9999	; 0x270f
 8003260:	428b      	cmp	r3, r1
 8003262:	bf28      	it	cs
 8003264:	460b      	movcs	r3, r1
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <log_output_dropped_process+0x4c>)
 8003268:	2105      	movs	r1, #5
 800326a:	4668      	mov	r0, sp
 800326c:	f004 fdb5 	bl	8007dda <snprintk>
 8003270:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003272:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	220b      	movs	r2, #11
 8003278:	490a      	ldr	r1, [pc, #40]	; (80032a4 <log_output_dropped_process+0x50>)
 800327a:	4628      	mov	r0, r5
 800327c:	f004 feb6 	bl	8007fec <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4632      	mov	r2, r6
 8003286:	4669      	mov	r1, sp
 8003288:	4628      	mov	r0, r5
 800328a:	f004 feaf 	bl	8007fec <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 800328e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	221b      	movs	r2, #27
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <log_output_dropped_process+0x54>)
 8003296:	4628      	mov	r0, r5
 8003298:	f004 fea8 	bl	8007fec <buffer_write>
}
 800329c:	b002      	add	sp, #8
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	0800a9a4 	.word	0x0800a9a4
 80032a4:	0800a2e8 	.word	0x0800a2e8
 80032a8:	0800a2cc 	.word	0x0800a2cc

080032ac <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <log_output_timestamp_freq_set+0x20>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80032b2:	e004      	b.n	80032be <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 80032b4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <log_output_timestamp_freq_set+0x20>)
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <log_output_timestamp_freq_set+0x24>)
 80032c0:	4298      	cmp	r0, r3
 80032c2:	d8f7      	bhi.n	80032b4 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <log_output_timestamp_freq_set+0x28>)
 80032c6:	6018      	str	r0, [r3, #0]
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	200004fc 	.word	0x200004fc
 80032d0:	000f4240 	.word	0x000f4240
 80032d4:	200004f8 	.word	0x200004f8

080032d8 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	4606      	mov	r6, r0
 80032dc:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 80032de:	2400      	movs	r4, #0
 80032e0:	e006      	b.n	80032f0 <char_out+0x18>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <char_out+0x20>)
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 80032e8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 80032ee:	3401      	adds	r4, #1
 80032f0:	42ac      	cmp	r4, r5
 80032f2:	d3f6      	bcc.n	80032e2 <char_out+0xa>
#endif
	}

	return length;
}
 80032f4:	4628      	mov	r0, r5
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	20000514 	.word	0x20000514

080032fc <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <log_backend_uart_init+0x8>)
 80032fe:	4a02      	ldr	r2, [pc, #8]	; (8003308 <log_backend_uart_init+0xc>)
 8003300:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8003302:	4770      	bx	lr
 8003304:	20000514 	.word	0x20000514
 8003308:	08009d08 	.word	0x08009d08

0800330c <panic>:

static void panic(struct log_backend const *const backend)
{
 800330c:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 800330e:	4802      	ldr	r0, [pc, #8]	; (8003318 <panic+0xc>)
 8003310:	f005 f813 	bl	800833a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003314:	bd08      	pop	{r3, pc}
 8003316:	bf00      	nop
 8003318:	0800a338 	.word	0x0800a338

0800331c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 800331c:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 800331e:	4802      	ldr	r0, [pc, #8]	; (8003328 <dropped+0xc>)
 8003320:	f7ff ff98 	bl	8003254 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003324:	bd08      	pop	{r3, pc}
 8003326:	bf00      	nop
 8003328:	0800a338 	.word	0x0800a338

0800332c <put>:
{
 800332c:	b510      	push	{r4, lr}
 800332e:	460c      	mov	r4, r1
	log_msg_get(msg);
 8003330:	4608      	mov	r0, r1
 8003332:	f004 fe1c 	bl	8007f6e <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8003336:	220f      	movs	r2, #15
 8003338:	4621      	mov	r1, r4
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <put+0x1c>)
 800333c:	f005 f826 	bl	800838c <log_output_msg_process>
	log_msg_put(msg);
 8003340:	4620      	mov	r0, r4
 8003342:	f004 fe38 	bl	8007fb6 <log_msg_put>
}
 8003346:	bd10      	pop	{r4, pc}
 8003348:	0800a338 	.word	0x0800a338

0800334c <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 800334c:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 800334e:	4c04      	ldr	r4, [pc, #16]	; (8003360 <__do_init_array_aux+0x14>)
 8003350:	e002      	b.n	8003358 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003352:	f854 3b04 	ldr.w	r3, [r4], #4
 8003356:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003358:	4b02      	ldr	r3, [pc, #8]	; (8003364 <__do_init_array_aux+0x18>)
 800335a:	429c      	cmp	r4, r3
 800335c:	d3f9      	bcc.n	8003352 <__do_init_array_aux+0x6>
	}
}
 800335e:	bd10      	pop	{r4, pc}
 8003360:	0800a000 	.word	0x0800a000
 8003364:	0800a000 	.word	0x0800a000

08003368 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <__do_global_ctors_aux+0x1c>)
 800336a:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 800336c:	b14b      	cbz	r3, 8003382 <__do_global_ctors_aux+0x1a>
{
 800336e:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8003370:	1e5c      	subs	r4, r3, #1
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__do_global_ctors_aux+0x1c>)
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003378:	4798      	blx	r3
 800337a:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 800337c:	2c00      	cmp	r4, #0
 800337e:	d1f7      	bne.n	8003370 <__do_global_ctors_aux+0x8>
	}
}
 8003380:	bd10      	pop	{r4, pc}
 8003382:	4770      	bx	lr
 8003384:	08009ff8 	.word	0x08009ff8

08003388 <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8003388:	28af      	cmp	r0, #175	; 0xaf
 800338a:	d81d      	bhi.n	80033c8 <stm32_pin_configure+0x40>
{
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	4604      	mov	r4, r0
 8003390:	460f      	mov	r7, r1
 8003392:	4615      	mov	r5, r2
 8003394:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8003396:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <stm32_pin_configure+0x48>)
 8003398:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800339c:	b18e      	cbz	r6, 80033c2 <stm32_pin_configure+0x3a>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 800339e:	4630      	mov	r0, r6
 80033a0:	f005 fe14 	bl	8008fcc <z_device_ready>
 80033a4:	b150      	cbz	r0, 80033bc <stm32_pin_configure+0x34>
 80033a6:	2300      	movs	r3, #0
 80033a8:	b95b      	cbnz	r3, 80033c2 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80033aa:	462b      	mov	r3, r5
 80033ac:	463a      	mov	r2, r7
 80033ae:	f004 010f 	and.w	r1, r4, #15
 80033b2:	4630      	mov	r0, r6
 80033b4:	f005 fa2f 	bl	8008816 <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 80033b8:	2000      	movs	r0, #0
}
 80033ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033bc:	f06f 0312 	mvn.w	r3, #18
 80033c0:	e7f2      	b.n	80033a8 <stm32_pin_configure+0x20>
		return -ENODEV;
 80033c2:	f06f 0012 	mvn.w	r0, #18
 80033c6:	e7f8      	b.n	80033ba <stm32_pin_configure+0x32>
		return -EINVAL;
 80033c8:	f06f 0015 	mvn.w	r0, #21
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	0800a348 	.word	0x0800a348

080033d4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80033d4:	4901      	ldr	r1, [pc, #4]	; (80033dc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80033d6:	2210      	movs	r2, #16
	str	r2, [r1]
 80033d8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80033da:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80033dc:	e000ed10 	.word	0xe000ed10

080033e0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80033e0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80033e2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80033e4:	f380 8811 	msr	BASEPRI, r0
	isb
 80033e8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80033ec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80033f0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80033f2:	b662      	cpsie	i
	isb
 80033f4:	f3bf 8f6f 	isb	sy

	bx	lr
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop

080033fc <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003402:	4d1f      	ldr	r5, [pc, #124]	; (8003480 <esf_dump+0x84>)
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <esf_dump+0x88>)
 8003406:	1aed      	subs	r5, r5, r3
 8003408:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800340a:	2601      	movs	r6, #1
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f366 0302 	bfi	r3, r6, #0, #3
 8003414:	f36f 03c5 	bfc	r3, #3, #3
 8003418:	f365 138f 	bfi	r3, r5, #6, #10
 800341c:	f8ad 3000 	strh.w	r3, [sp]
 8003420:	6883      	ldr	r3, [r0, #8]
 8003422:	6842      	ldr	r2, [r0, #4]
 8003424:	6801      	ldr	r1, [r0, #0]
 8003426:	4818      	ldr	r0, [pc, #96]	; (8003488 <esf_dump+0x8c>)
 8003428:	f7ff fbc2 	bl	8002bb0 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	f366 0302 	bfi	r3, r6, #0, #3
 8003434:	f36f 03c5 	bfc	r3, #3, #3
 8003438:	f365 138f 	bfi	r3, r5, #6, #10
 800343c:	f8ad 3000 	strh.w	r3, [sp]
 8003440:	6963      	ldr	r3, [r4, #20]
 8003442:	6922      	ldr	r2, [r4, #16]
 8003444:	68e1      	ldr	r1, [r4, #12]
 8003446:	4811      	ldr	r0, [pc, #68]	; (800348c <esf_dump+0x90>)
 8003448:	f7ff fbb2 	bl	8002bb0 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f366 0202 	bfi	r2, r6, #0, #3
 8003454:	f36f 02c5 	bfc	r2, #3, #3
 8003458:	f365 128f 	bfi	r2, r5, #6, #10
 800345c:	69e1      	ldr	r1, [r4, #28]
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <esf_dump+0x94>)
 8003460:	f7ff fc0a 	bl	8002c78 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f366 0202 	bfi	r2, r6, #0, #3
 800346c:	f36f 02c5 	bfc	r2, #3, #3
 8003470:	f365 128f 	bfi	r2, r5, #6, #10
 8003474:	69a1      	ldr	r1, [r4, #24]
 8003476:	4807      	ldr	r0, [pc, #28]	; (8003494 <esf_dump+0x98>)
 8003478:	f7ff fbfe 	bl	8002c78 <log_1>
		esf->basic.pc);
}
 800347c:	b002      	add	sp, #8
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	0800a010 	.word	0x0800a010
 8003484:	0800a000 	.word	0x0800a000
 8003488:	0800a374 	.word	0x0800a374
 800348c:	0800a3a4 	.word	0x0800a3a4
 8003490:	0800a3d4 	.word	0x0800a3d4
 8003494:	0800a3e4 	.word	0x0800a3e4

08003498 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003498:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800349a:	2800      	cmp	r0, #0
 800349c:	db07      	blt.n	80034ae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349e:	f000 021f 	and.w	r2, r0, #31
 80034a2:	0940      	lsrs	r0, r0, #5
 80034a4:	2301      	movs	r3, #1
 80034a6:	4093      	lsls	r3, r2
 80034a8:	4a01      	ldr	r2, [pc, #4]	; (80034b0 <arch_irq_enable+0x18>)
 80034aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 80034b4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80034b6:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80034b8:	2800      	cmp	r0, #0
 80034ba:	db08      	blt.n	80034ce <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034bc:	0109      	lsls	r1, r1, #4
 80034be:	b2c9      	uxtb	r1, r1
 80034c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80034c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80034c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 80034cc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	f000 000f 	and.w	r0, r0, #15
 80034d2:	0109      	lsls	r1, r1, #4
 80034d4:	b2c9      	uxtb	r1, r1
 80034d6:	4b01      	ldr	r3, [pc, #4]	; (80034dc <z_arm_irq_priority_set+0x28>)
 80034d8:	5419      	strb	r1, [r3, r0]
}
 80034da:	4770      	bx	lr
 80034dc:	e000ed14 	.word	0xe000ed14

080034e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80034e0:	bf30      	wfi
    b z_SysNmiOnReset
 80034e2:	f7ff bffd 	b.w	80034e0 <z_SysNmiOnReset>
 80034e6:	bf00      	nop

080034e8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80034e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <z_arm_prep_c+0x40>)
 80034ec:	4a0f      	ldr	r2, [pc, #60]	; (800352c <z_arm_prep_c+0x44>)
 80034ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80034f2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80034fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003500:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003508:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800350c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003510:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003514:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003518:	f002 f91c 	bl	8005754 <z_bss_zero>
	z_data_copy();
 800351c:	f002 fe2a 	bl	8006174 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003520:	f000 fc9e 	bl	8003e60 <z_arm_interrupt_init>
	z_cstart();
 8003524:	f002 f922 	bl	800576c <z_cstart>
 8003528:	e000ed00 	.word	0xe000ed00
 800352c:	08000000 	.word	0x08000000

08003530 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <arch_swap+0x28>)
 8003532:	6893      	ldr	r3, [r2, #8]
 8003534:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
 8003536:	4909      	ldr	r1, [pc, #36]	; (800355c <arch_swap+0x2c>)
 8003538:	6809      	ldr	r1, [r1, #0]
 800353a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800353c:	4908      	ldr	r1, [pc, #32]	; (8003560 <arch_swap+0x30>)
 800353e:	684b      	ldr	r3, [r1, #4]
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	2300      	movs	r3, #0
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003550:	6893      	ldr	r3, [r2, #8]
}
 8003552:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	2000061c 	.word	0x2000061c
 800355c:	0800ab2c 	.word	0x0800ab2c
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003564:	4912      	ldr	r1, [pc, #72]	; (80035b0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003566:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003568:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800356c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800356e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003572:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003576:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003578:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800357c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003580:	4f0c      	ldr	r7, [pc, #48]	; (80035b4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003582:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003586:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003588:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800358a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800358c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
 800358e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003590:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003592:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003596:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003598:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800359a:	f000 fcb5 	bl	8003f08 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800359e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80035a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80035a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80035aa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80035ae:	4770      	bx	lr
    ldr r1, =_kernel
 80035b0:	2000061c 	.word	0x2000061c
    ldr v4, =_SCS_ICSR
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80035b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80035bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80035be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80035c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80035c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80035c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80035cc:	2902      	cmp	r1, #2
    beq _oops
 80035ce:	d0ff      	beq.n	80035d0 <_oops>

080035d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80035d0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80035d2:	f004 ff58 	bl	8008486 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80035d6:	bd01      	pop	{r0, pc}

080035d8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80035d8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80035da:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 80035de:	490d      	ldr	r1, [pc, #52]	; (8003614 <arch_new_thread+0x3c>)
 80035e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 80035e4:	f021 0101 	bic.w	r1, r1, #1
 80035e8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 80035ec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 80035f6:	9b02      	ldr	r3, [sp, #8]
 80035f8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003606:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800360a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003610:	bc10      	pop	{r4}
 8003612:	4770      	bx	lr
 8003614:	08007df7 	.word	0x08007df7

08003618 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <z_check_thread_stack_fail+0x48>)
 800361a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 800361c:	b1ea      	cbz	r2, 800365a <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800361e:	f110 0f16 	cmn.w	r0, #22
 8003622:	d010      	beq.n	8003646 <z_check_thread_stack_fail+0x2e>
 8003624:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003626:	f1a3 0c20 	sub.w	ip, r3, #32
 800362a:	4584      	cmp	ip, r0
 800362c:	d805      	bhi.n	800363a <z_check_thread_stack_fail+0x22>
 800362e:	4283      	cmp	r3, r0
 8003630:	d905      	bls.n	800363e <z_check_thread_stack_fail+0x26>
 8003632:	428b      	cmp	r3, r1
 8003634:	d805      	bhi.n	8003642 <z_check_thread_stack_fail+0x2a>
 8003636:	2100      	movs	r1, #0
 8003638:	e00a      	b.n	8003650 <z_check_thread_stack_fail+0x38>
 800363a:	2100      	movs	r1, #0
 800363c:	e008      	b.n	8003650 <z_check_thread_stack_fail+0x38>
 800363e:	2100      	movs	r1, #0
 8003640:	e006      	b.n	8003650 <z_check_thread_stack_fail+0x38>
 8003642:	2101      	movs	r1, #1
 8003644:	e004      	b.n	8003650 <z_check_thread_stack_fail+0x38>
 8003646:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003648:	428b      	cmp	r3, r1
 800364a:	bf94      	ite	ls
 800364c:	2100      	movls	r1, #0
 800364e:	2101      	movhi	r1, #1
 8003650:	b909      	cbnz	r1, 8003656 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003652:	2000      	movs	r0, #0
}
 8003654:	4770      	bx	lr
		return thread->stack_info.start;
 8003656:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003658:	4770      	bx	lr
		return 0;
 800365a:	2000      	movs	r0, #0
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000061c 	.word	0x2000061c

08003664 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003664:	b508      	push	{r3, lr}
 8003666:	460d      	mov	r5, r1
 8003668:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <arch_switch_to_main_thread+0x28>)
 800366c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800366e:	f000 fc4b 	bl	8003f08 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003672:	4620      	mov	r0, r4
 8003674:	f385 8809 	msr	PSP, r5
 8003678:	2100      	movs	r1, #0
 800367a:	b663      	cpsie	if
 800367c:	f381 8811 	msr	BASEPRI, r1
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	2200      	movs	r2, #0
 8003686:	2300      	movs	r3, #0
 8003688:	f004 fbb5 	bl	8007df6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 800368c:	2000061c 	.word	0x2000061c

08003690 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003690:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003692:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003696:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 800369a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800369e:	4904      	ldr	r1, [pc, #16]	; (80036b0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80036a0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80036a2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80036a4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80036a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80036aa:	4902      	ldr	r1, [pc, #8]	; (80036b4 <_isr_wrapper+0x24>)
	bx r1
 80036ac:	4708      	bx	r1
 80036ae:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80036b0:	08009d50 	.word	0x08009d50
	ldr r1, =z_arm_int_exit
 80036b4:	080036b9 	.word	0x080036b9

080036b8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80036ba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80036bc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80036be:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80036c0:	d003      	beq.n	80036ca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80036c2:	4903      	ldr	r1, [pc, #12]	; (80036d0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80036c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80036c8:	600a      	str	r2, [r1, #0]

080036ca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80036ca:	4770      	bx	lr
	ldr r3, =_kernel
 80036cc:	2000061c 	.word	0x2000061c
	ldr r1, =_SCS_ICSR
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 80036d4:	b508      	push	{r3, lr}
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <usage_fault+0x13c>)
 80036d8:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <usage_fault+0x140>)
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	2201      	movs	r2, #1
 80036e4:	f362 0102 	bfi	r1, r2, #0, #3
 80036e8:	f36f 01c5 	bfc	r1, #3, #3
 80036ec:	f363 118f 	bfi	r1, r3, #6, #10
 80036f0:	4849      	ldr	r0, [pc, #292]	; (8003818 <usage_fault+0x144>)
 80036f2:	f7ff fa97 	bl	8002c24 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <usage_fault+0x148>)
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036fe:	d121      	bne.n	8003744 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003700:	4b46      	ldr	r3, [pc, #280]	; (800381c <usage_fault+0x148>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003708:	d12d      	bne.n	8003766 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800370a:	4b44      	ldr	r3, [pc, #272]	; (800381c <usage_fault+0x148>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003712:	d139      	bne.n	8003788 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <usage_fault+0x148>)
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800371c:	d145      	bne.n	80037aa <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <usage_fault+0x148>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003726:	d151      	bne.n	80037cc <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003728:	4b3c      	ldr	r3, [pc, #240]	; (800381c <usage_fault+0x148>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003730:	d15d      	bne.n	80037ee <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <usage_fault+0x148>)
 8003734:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003736:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800373a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800373e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003740:	2000      	movs	r0, #0
 8003742:	bd08      	pop	{r3, pc}
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <usage_fault+0x13c>)
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <usage_fault+0x140>)
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	2201      	movs	r2, #1
 8003752:	f362 0102 	bfi	r1, r2, #0, #3
 8003756:	f36f 01c5 	bfc	r1, #3, #3
 800375a:	f363 118f 	bfi	r1, r3, #6, #10
 800375e:	4830      	ldr	r0, [pc, #192]	; (8003820 <usage_fault+0x14c>)
 8003760:	f7ff fa60 	bl	8002c24 <log_0>
 8003764:	e7cc      	b.n	8003700 <usage_fault+0x2c>
 8003766:	4b2a      	ldr	r3, [pc, #168]	; (8003810 <usage_fault+0x13c>)
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <usage_fault+0x140>)
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	2201      	movs	r2, #1
 8003774:	f362 0102 	bfi	r1, r2, #0, #3
 8003778:	f36f 01c5 	bfc	r1, #3, #3
 800377c:	f363 118f 	bfi	r1, r3, #6, #10
 8003780:	4828      	ldr	r0, [pc, #160]	; (8003824 <usage_fault+0x150>)
 8003782:	f7ff fa4f 	bl	8002c24 <log_0>
 8003786:	e7c0      	b.n	800370a <usage_fault+0x36>
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <usage_fault+0x13c>)
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <usage_fault+0x140>)
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	2201      	movs	r2, #1
 8003796:	f362 0102 	bfi	r1, r2, #0, #3
 800379a:	f36f 01c5 	bfc	r1, #3, #3
 800379e:	f363 118f 	bfi	r1, r3, #6, #10
 80037a2:	4821      	ldr	r0, [pc, #132]	; (8003828 <usage_fault+0x154>)
 80037a4:	f7ff fa3e 	bl	8002c24 <log_0>
 80037a8:	e7b4      	b.n	8003714 <usage_fault+0x40>
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <usage_fault+0x13c>)
 80037ac:	4a19      	ldr	r2, [pc, #100]	; (8003814 <usage_fault+0x140>)
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	2201      	movs	r2, #1
 80037b8:	f362 0102 	bfi	r1, r2, #0, #3
 80037bc:	f36f 01c5 	bfc	r1, #3, #3
 80037c0:	f363 118f 	bfi	r1, r3, #6, #10
 80037c4:	4819      	ldr	r0, [pc, #100]	; (800382c <usage_fault+0x158>)
 80037c6:	f7ff fa2d 	bl	8002c24 <log_0>
 80037ca:	e7a8      	b.n	800371e <usage_fault+0x4a>
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <usage_fault+0x13c>)
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <usage_fault+0x140>)
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	2201      	movs	r2, #1
 80037da:	f362 0102 	bfi	r1, r2, #0, #3
 80037de:	f36f 01c5 	bfc	r1, #3, #3
 80037e2:	f363 118f 	bfi	r1, r3, #6, #10
 80037e6:	4812      	ldr	r0, [pc, #72]	; (8003830 <usage_fault+0x15c>)
 80037e8:	f7ff fa1c 	bl	8002c24 <log_0>
 80037ec:	e79c      	b.n	8003728 <usage_fault+0x54>
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <usage_fault+0x13c>)
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <usage_fault+0x140>)
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	2201      	movs	r2, #1
 80037fc:	f362 0102 	bfi	r1, r2, #0, #3
 8003800:	f36f 01c5 	bfc	r1, #3, #3
 8003804:	f363 118f 	bfi	r1, r3, #6, #10
 8003808:	480a      	ldr	r0, [pc, #40]	; (8003834 <usage_fault+0x160>)
 800380a:	f7ff fa0b 	bl	8002c24 <log_0>
 800380e:	e790      	b.n	8003732 <usage_fault+0x5e>
 8003810:	0800a010 	.word	0x0800a010
 8003814:	0800a000 	.word	0x0800a000
 8003818:	0800a414 	.word	0x0800a414
 800381c:	e000ed00 	.word	0xe000ed00
 8003820:	0800a42c 	.word	0x0800a42c
 8003824:	0800a440 	.word	0x0800a440
 8003828:	0800a45c 	.word	0x0800a45c
 800382c:	0800a47c 	.word	0x0800a47c
 8003830:	0800a4a4 	.word	0x0800a4a4
 8003834:	0800a4c0 	.word	0x0800a4c0

08003838 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 8003838:	b508      	push	{r3, lr}
	*recoverable = false;
 800383a:	2200      	movs	r2, #0
 800383c:	700a      	strb	r2, [r1, #0]
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <debug_monitor+0x28>)
 8003840:	4908      	ldr	r1, [pc, #32]	; (8003864 <debug_monitor+0x2c>)
 8003842:	1a5b      	subs	r3, r3, r1
 8003844:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	2001      	movs	r0, #1
 800384c:	f360 0102 	bfi	r1, r0, #0, #3
 8003850:	f362 01c5 	bfi	r1, r2, #3, #3
 8003854:	f363 118f 	bfi	r1, r3, #6, #10
 8003858:	4803      	ldr	r0, [pc, #12]	; (8003868 <debug_monitor+0x30>)
 800385a:	f7ff f9e3 	bl	8002c24 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 800385e:	bd08      	pop	{r3, pc}
 8003860:	0800a010 	.word	0x0800a010
 8003864:	0800a000 	.word	0x0800a000
 8003868:	0800a4ec 	.word	0x0800a4ec

0800386c <bus_fault>:
{
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	4605      	mov	r5, r0
 8003870:	460e      	mov	r6, r1
 8003872:	4614      	mov	r4, r2
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <bus_fault+0x184>)
 8003876:	4a5f      	ldr	r2, [pc, #380]	; (80039f4 <bus_fault+0x188>)
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	2201      	movs	r2, #1
 8003882:	f362 0102 	bfi	r1, r2, #0, #3
 8003886:	f36f 01c5 	bfc	r1, #3, #3
 800388a:	f363 118f 	bfi	r1, r3, #6, #10
 800388e:	485a      	ldr	r0, [pc, #360]	; (80039f8 <bus_fault+0x18c>)
 8003890:	f7ff f9c8 	bl	8002c24 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <bus_fault+0x190>)
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800389c:	d124      	bne.n	80038e8 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <bus_fault+0x190>)
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80038a6:	d130      	bne.n	800390a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80038a8:	4b54      	ldr	r3, [pc, #336]	; (80039fc <bus_fault+0x190>)
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f413 7f00 	tst.w	r3, #512	; 0x200
 80038b0:	d13c      	bne.n	800392c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80038b2:	4b52      	ldr	r3, [pc, #328]	; (80039fc <bus_fault+0x190>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038ba:	d165      	bne.n	8003988 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <bus_fault+0x190>)
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038c4:	d171      	bne.n	80039aa <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <bus_fault+0x190>)
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80038ce:	d17d      	bne.n	80039cc <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80038d0:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <bus_fault+0x190>)
 80038d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80038d4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80038d8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80038da:	2101      	movs	r1, #1
 80038dc:	4628      	mov	r0, r5
 80038de:	f004 fde4 	bl	80084aa <memory_fault_recoverable>
 80038e2:	7020      	strb	r0, [r4, #0]
}
 80038e4:	2000      	movs	r0, #0
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <bus_fault+0x184>)
 80038ea:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <bus_fault+0x188>)
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	2201      	movs	r2, #1
 80038f6:	f362 0102 	bfi	r1, r2, #0, #3
 80038fa:	f36f 01c5 	bfc	r1, #3, #3
 80038fe:	f363 118f 	bfi	r1, r3, #6, #10
 8003902:	483f      	ldr	r0, [pc, #252]	; (8003a00 <bus_fault+0x194>)
 8003904:	f7ff f98e 	bl	8002c24 <log_0>
 8003908:	e7c9      	b.n	800389e <bus_fault+0x32>
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <bus_fault+0x184>)
 800390c:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <bus_fault+0x188>)
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	2201      	movs	r2, #1
 8003918:	f362 0102 	bfi	r1, r2, #0, #3
 800391c:	f36f 01c5 	bfc	r1, #3, #3
 8003920:	f363 118f 	bfi	r1, r3, #6, #10
 8003924:	4837      	ldr	r0, [pc, #220]	; (8003a04 <bus_fault+0x198>)
 8003926:	f7ff f97d 	bl	8002c24 <log_0>
 800392a:	e7bd      	b.n	80038a8 <bus_fault+0x3c>
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <bus_fault+0x184>)
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <bus_fault+0x188>)
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	2201      	movs	r2, #1
 800393a:	f362 0102 	bfi	r1, r2, #0, #3
 800393e:	f36f 01c5 	bfc	r1, #3, #3
 8003942:	f363 118f 	bfi	r1, r3, #6, #10
 8003946:	4830      	ldr	r0, [pc, #192]	; (8003a08 <bus_fault+0x19c>)
 8003948:	f7ff f96c 	bl	8002c24 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <bus_fault+0x190>)
 800394e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003956:	d0ac      	beq.n	80038b2 <bus_fault+0x46>
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <bus_fault+0x184>)
 800395a:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <bus_fault+0x188>)
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	2001      	movs	r0, #1
 8003966:	f360 0202 	bfi	r2, r0, #0, #3
 800396a:	f36f 02c5 	bfc	r2, #3, #3
 800396e:	f363 128f 	bfi	r2, r3, #6, #10
 8003972:	4826      	ldr	r0, [pc, #152]	; (8003a0c <bus_fault+0x1a0>)
 8003974:	f7ff f980 	bl	8002c78 <log_1>
			if (from_hard_fault != 0) {
 8003978:	2e00      	cmp	r6, #0
 800397a:	d09a      	beq.n	80038b2 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800397c:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <bus_fault+0x190>)
 800397e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003984:	6293      	str	r3, [r2, #40]	; 0x28
 8003986:	e794      	b.n	80038b2 <bus_fault+0x46>
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <bus_fault+0x184>)
 800398a:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <bus_fault+0x188>)
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	2201      	movs	r2, #1
 8003996:	f362 0102 	bfi	r1, r2, #0, #3
 800399a:	f36f 01c5 	bfc	r1, #3, #3
 800399e:	f363 118f 	bfi	r1, r3, #6, #10
 80039a2:	481b      	ldr	r0, [pc, #108]	; (8003a10 <bus_fault+0x1a4>)
 80039a4:	f7ff f93e 	bl	8002c24 <log_0>
 80039a8:	e788      	b.n	80038bc <bus_fault+0x50>
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <bus_fault+0x184>)
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <bus_fault+0x188>)
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	2201      	movs	r2, #1
 80039b8:	f362 0102 	bfi	r1, r2, #0, #3
 80039bc:	f36f 01c5 	bfc	r1, #3, #3
 80039c0:	f363 118f 	bfi	r1, r3, #6, #10
 80039c4:	4813      	ldr	r0, [pc, #76]	; (8003a14 <bus_fault+0x1a8>)
 80039c6:	f7ff f92d 	bl	8002c24 <log_0>
 80039ca:	e781      	b.n	80038d0 <bus_fault+0x64>
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <bus_fault+0x184>)
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <bus_fault+0x188>)
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	2201      	movs	r2, #1
 80039da:	f362 0102 	bfi	r1, r2, #0, #3
 80039de:	f36f 01c5 	bfc	r1, #3, #3
 80039e2:	f363 118f 	bfi	r1, r3, #6, #10
 80039e6:	480c      	ldr	r0, [pc, #48]	; (8003a18 <bus_fault+0x1ac>)
 80039e8:	f7ff f91c 	bl	8002c24 <log_0>
 80039ec:	e770      	b.n	80038d0 <bus_fault+0x64>
 80039ee:	bf00      	nop
 80039f0:	0800a010 	.word	0x0800a010
 80039f4:	0800a000 	.word	0x0800a000
 80039f8:	0800a510 	.word	0x0800a510
 80039fc:	e000ed00 	.word	0xe000ed00
 8003a00:	0800a528 	.word	0x0800a528
 8003a04:	0800a53c 	.word	0x0800a53c
 8003a08:	0800a550 	.word	0x0800a550
 8003a0c:	0800a56c 	.word	0x0800a56c
 8003a10:	0800a584 	.word	0x0800a584
 8003a14:	0800a5a0 	.word	0x0800a5a0
 8003a18:	0800a5b8 	.word	0x0800a5b8

08003a1c <mem_manage_fault>:
{
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	4605      	mov	r5, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	4616      	mov	r6, r2
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003a26:	4a65      	ldr	r2, [pc, #404]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	2201      	movs	r2, #1
 8003a32:	f362 0102 	bfi	r1, r2, #0, #3
 8003a36:	f36f 01c5 	bfc	r1, #3, #3
 8003a3a:	f363 118f 	bfi	r1, r3, #6, #10
 8003a3e:	4860      	ldr	r0, [pc, #384]	; (8003bc0 <mem_manage_fault+0x1a4>)
 8003a40:	f7ff f8f0 	bl	8002c24 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003a44:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f013 0f10 	tst.w	r3, #16
 8003a4c:	d132      	bne.n	8003ab4 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	f013 0f08 	tst.w	r3, #8
 8003a56:	d13e      	bne.n	8003ad6 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f013 0f02 	tst.w	r3, #2
 8003a60:	d14a      	bne.n	8003af8 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
 8003a62:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003a66:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	f013 0f01 	tst.w	r3, #1
 8003a6e:	d175      	bne.n	8003b5c <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003a70:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f013 0f20 	tst.w	r3, #32
 8003a78:	f040 8081 	bne.w	8003b7e <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003a7c:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f013 0f10 	tst.w	r3, #16
 8003a84:	d104      	bne.n	8003a90 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003a8a:	f014 0402 	ands.w	r4, r4, #2
 8003a8e:	d005      	beq.n	8003a9c <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a92:	685c      	ldr	r4, [r3, #4]
 8003a94:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8003a98:	f040 8082 	bne.w	8003ba0 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003a9c:	4a49      	ldr	r2, [pc, #292]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003a9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003aa0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003aa4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f004 fcfe 	bl	80084aa <memory_fault_recoverable>
 8003aae:	7030      	strb	r0, [r6, #0]
}
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab4:	4b40      	ldr	r3, [pc, #256]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003ab6:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f362 0102 	bfi	r1, r2, #0, #3
 8003ac6:	f36f 01c5 	bfc	r1, #3, #3
 8003aca:	f363 118f 	bfi	r1, r3, #6, #10
 8003ace:	483e      	ldr	r0, [pc, #248]	; (8003bc8 <mem_manage_fault+0x1ac>)
 8003ad0:	f7ff f8a8 	bl	8002c24 <log_0>
 8003ad4:	e7bb      	b.n	8003a4e <mem_manage_fault+0x32>
 8003ad6:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003ad8:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f362 0102 	bfi	r1, r2, #0, #3
 8003ae8:	f36f 01c5 	bfc	r1, #3, #3
 8003aec:	f363 118f 	bfi	r1, r3, #6, #10
 8003af0:	4836      	ldr	r0, [pc, #216]	; (8003bcc <mem_manage_fault+0x1b0>)
 8003af2:	f7ff f897 	bl	8002c24 <log_0>
 8003af6:	e7af      	b.n	8003a58 <mem_manage_fault+0x3c>
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003afa:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	2201      	movs	r2, #1
 8003b06:	f362 0102 	bfi	r1, r2, #0, #3
 8003b0a:	f36f 01c5 	bfc	r1, #3, #3
 8003b0e:	f363 118f 	bfi	r1, r3, #6, #10
 8003b12:	482f      	ldr	r0, [pc, #188]	; (8003bd0 <mem_manage_fault+0x1b4>)
 8003b14:	f7ff f886 	bl	8002c24 <log_0>
		uint32_t temp = SCB->MMFAR;
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003b1a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b22:	d102      	bne.n	8003b2a <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
 8003b24:	f06f 0715 	mvn.w	r7, #21
 8003b28:	e79d      	b.n	8003a66 <mem_manage_fault+0x4a>
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003b2c:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	2101      	movs	r1, #1
 8003b38:	f361 0202 	bfi	r2, r1, #0, #3
 8003b3c:	f36f 02c5 	bfc	r2, #3, #3
 8003b40:	f363 128f 	bfi	r2, r3, #6, #10
 8003b44:	4639      	mov	r1, r7
 8003b46:	4823      	ldr	r0, [pc, #140]	; (8003bd4 <mem_manage_fault+0x1b8>)
 8003b48:	f7ff f896 	bl	8002c78 <log_1>
			if (from_hard_fault != 0) {
 8003b4c:	2c00      	cmp	r4, #0
 8003b4e:	d08a      	beq.n	8003a66 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <mem_manage_fault+0x1a8>)
 8003b52:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b58:	6293      	str	r3, [r2, #40]	; 0x28
 8003b5a:	e784      	b.n	8003a66 <mem_manage_fault+0x4a>
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f362 0102 	bfi	r1, r2, #0, #3
 8003b6e:	f36f 01c5 	bfc	r1, #3, #3
 8003b72:	f363 118f 	bfi	r1, r3, #6, #10
 8003b76:	4818      	ldr	r0, [pc, #96]	; (8003bd8 <mem_manage_fault+0x1bc>)
 8003b78:	f7ff f854 	bl	8002c24 <log_0>
 8003b7c:	e778      	b.n	8003a70 <mem_manage_fault+0x54>
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <mem_manage_fault+0x19c>)
 8003b80:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <mem_manage_fault+0x1a0>)
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f362 0102 	bfi	r1, r2, #0, #3
 8003b90:	f36f 01c5 	bfc	r1, #3, #3
 8003b94:	f363 118f 	bfi	r1, r3, #6, #10
 8003b98:	4810      	ldr	r0, [pc, #64]	; (8003bdc <mem_manage_fault+0x1c0>)
 8003b9a:	f7ff f843 	bl	8002c24 <log_0>
 8003b9e:	e76d      	b.n	8003a7c <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f7ff fd38 	bl	8003618 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8003ba8:	4604      	mov	r4, r0
 8003baa:	2800      	cmp	r0, #0
 8003bac:	f43f af76 	beq.w	8003a9c <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003bb0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003bb4:	2402      	movs	r4, #2
 8003bb6:	e771      	b.n	8003a9c <mem_manage_fault+0x80>
 8003bb8:	0800a010 	.word	0x0800a010
 8003bbc:	0800a000 	.word	0x0800a000
 8003bc0:	0800a5e8 	.word	0x0800a5e8
 8003bc4:	e000ed00 	.word	0xe000ed00
 8003bc8:	0800a600 	.word	0x0800a600
 8003bcc:	0800a53c 	.word	0x0800a53c
 8003bd0:	0800a634 	.word	0x0800a634
 8003bd4:	0800a64c 	.word	0x0800a64c
 8003bd8:	0800a664 	.word	0x0800a664
 8003bdc:	0800a5b8 	.word	0x0800a5b8

08003be0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4605      	mov	r5, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <hard_fault+0x120>)
 8003be8:	4a46      	ldr	r2, [pc, #280]	; (8003d04 <hard_fault+0x124>)
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f362 0102 	bfi	r1, r2, #0, #3
 8003bf8:	f36f 01c5 	bfc	r1, #3, #3
 8003bfc:	f363 118f 	bfi	r1, r3, #6, #10
 8003c00:	4841      	ldr	r0, [pc, #260]	; (8003d08 <hard_fault+0x128>)
 8003c02:	f7ff f80f 	bl	8002c24 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8003c06:	2300      	movs	r3, #0
 8003c08:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003c0a:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <hard_fault+0x12c>)
 8003c0c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003c0e:	f016 0602 	ands.w	r6, r6, #2
 8003c12:	d109      	bne.n	8003c28 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8003c14:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <hard_fault+0x12c>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db17      	blt.n	8003c4c <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <hard_fault+0x12c>)
 8003c1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c20:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8003c24:	d124      	bne.n	8003c70 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <hard_fault+0x120>)
 8003c2a:	4a36      	ldr	r2, [pc, #216]	; (8003d04 <hard_fault+0x124>)
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	2201      	movs	r2, #1
 8003c36:	f362 0102 	bfi	r1, r2, #0, #3
 8003c3a:	f36f 01c5 	bfc	r1, #3, #3
 8003c3e:	f363 118f 	bfi	r1, r3, #6, #10
 8003c42:	4833      	ldr	r0, [pc, #204]	; (8003d10 <hard_fault+0x130>)
 8003c44:	f7fe ffee 	bl	8002c24 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7ec      	b.n	8003c26 <hard_fault+0x46>
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <hard_fault+0x120>)
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <hard_fault+0x124>)
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f362 0102 	bfi	r1, r2, #0, #3
 8003c5e:	f36f 01c5 	bfc	r1, #3, #3
 8003c62:	f363 118f 	bfi	r1, r3, #6, #10
 8003c66:	482b      	ldr	r0, [pc, #172]	; (8003d14 <hard_fault+0x134>)
 8003c68:	f7fe ffdc 	bl	8002c24 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e7da      	b.n	8003c26 <hard_fault+0x46>
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <hard_fault+0x120>)
 8003c72:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <hard_fault+0x124>)
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f362 0102 	bfi	r1, r2, #0, #3
 8003c82:	f36f 01c5 	bfc	r1, #3, #3
 8003c86:	f363 118f 	bfi	r1, r3, #6, #10
 8003c8a:	4823      	ldr	r0, [pc, #140]	; (8003d18 <hard_fault+0x138>)
 8003c8c:	f7fe ffca 	bl	8002c24 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8003c90:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8003c92:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8003c96:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d00d      	beq.n	8003cba <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <hard_fault+0x12c>)
 8003ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca4:	b9e3      	cbnz	r3, 8003ce0 <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <hard_fault+0x12c>)
 8003ca8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cac:	b9f3      	cbnz	r3, 8003cec <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
 8003cae:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <hard_fault+0x12c>)
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	bb03      	cbnz	r3, 8003cf8 <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003cb6:	4630      	mov	r0, r6
	return reason;
 8003cb8:	e7b5      	b.n	8003c26 <hard_fault+0x46>
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <hard_fault+0x120>)
 8003cbc:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <hard_fault+0x124>)
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f361 0202 	bfi	r2, r1, #0, #3
 8003ccc:	f36f 02c5 	bfc	r2, #3, #3
 8003cd0:	f363 128f 	bfi	r2, r3, #6, #10
 8003cd4:	6829      	ldr	r1, [r5, #0]
 8003cd6:	4811      	ldr	r0, [pc, #68]	; (8003d1c <hard_fault+0x13c>)
 8003cd8:	f7fe ffce 	bl	8002c78 <log_1>
			reason = esf->basic.r0;
 8003cdc:	6828      	ldr	r0, [r5, #0]
 8003cde:	e7a2      	b.n	8003c26 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f7ff fe99 	bl	8003a1c <mem_manage_fault>
 8003cea:	e79c      	b.n	8003c26 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
 8003cec:	4622      	mov	r2, r4
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7ff fdbb 	bl	800386c <bus_fault>
 8003cf6:	e796      	b.n	8003c26 <hard_fault+0x46>
			reason = usage_fault(esf);
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f7ff fceb 	bl	80036d4 <usage_fault>
 8003cfe:	e792      	b.n	8003c26 <hard_fault+0x46>
 8003d00:	0800a010 	.word	0x0800a010
 8003d04:	0800a000 	.word	0x0800a000
 8003d08:	0800a684 	.word	0x0800a684
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	0800a69c 	.word	0x0800a69c
 8003d14:	0800a6c0 	.word	0x0800a6c0
 8003d18:	0800a6d0 	.word	0x0800a6d0
 8003d1c:	0800a6f0 	.word	0x0800a6f0

08003d20 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8003d20:	b508      	push	{r3, lr}
 8003d22:	460a      	mov	r2, r1
 8003d24:	480b      	ldr	r0, [pc, #44]	; (8003d54 <reserved_exception+0x34>)
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <reserved_exception+0x38>)
 8003d28:	1ac0      	subs	r0, r0, r3
 8003d2a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	2101      	movs	r1, #1
 8003d32:	f361 0302 	bfi	r3, r1, #0, #3
 8003d36:	f36f 03c5 	bfc	r3, #3, #3
 8003d3a:	f360 138f 	bfi	r3, r0, #6, #10
 8003d3e:	2a0f      	cmp	r2, #15
 8003d40:	dc05      	bgt.n	8003d4e <reserved_exception+0x2e>
 8003d42:	4906      	ldr	r1, [pc, #24]	; (8003d5c <reserved_exception+0x3c>)
 8003d44:	3a10      	subs	r2, #16
 8003d46:	4806      	ldr	r0, [pc, #24]	; (8003d60 <reserved_exception+0x40>)
 8003d48:	f7fe ffc8 	bl	8002cdc <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8003d4c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 8003d4e:	4905      	ldr	r1, [pc, #20]	; (8003d64 <reserved_exception+0x44>)
 8003d50:	e7f8      	b.n	8003d44 <reserved_exception+0x24>
 8003d52:	bf00      	nop
 8003d54:	0800a010 	.word	0x0800a010
 8003d58:	0800a000 	.word	0x0800a000
 8003d5c:	0800a70c 	.word	0x0800a70c
 8003d60:	0800a740 	.word	0x0800a740
 8003d64:	0800a724 	.word	0x0800a724

08003d68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003d6c:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <z_arm_fault+0xc4>)
 8003d6e:	685d      	ldr	r5, [r3, #4]
 8003d70:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003d74:	2300      	movs	r3, #0
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8003d7e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8003d82:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8003d86:	d12a      	bne.n	8003dde <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003d88:	f002 030c 	and.w	r3, r2, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d010      	beq.n	8003db2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003d90:	f012 0f08 	tst.w	r2, #8
 8003d94:	d020      	beq.n	8003dd8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
 8003d96:	460c      	mov	r4, r1
	*nested_exc = false;
 8003d98:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8003d9a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4620      	mov	r0, r4
 8003da2:	f004 fb84 	bl	80084ae <fault_handle>
 8003da6:	4605      	mov	r5, r0
	if (recoverable) {
 8003da8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8003dac:	b1d3      	cbz	r3, 8003de4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8003dae:	b00a      	add	sp, #40	; 0x28
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <z_arm_fault+0xc8>)
 8003db4:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <z_arm_fault+0xcc>)
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f362 0102 	bfi	r1, r2, #0, #3
 8003dc4:	f36f 01c5 	bfc	r1, #3, #3
 8003dc8:	f363 118f 	bfi	r1, r3, #6, #10
 8003dcc:	481a      	ldr	r0, [pc, #104]	; (8003e38 <z_arm_fault+0xd0>)
 8003dce:	f7fe ff29 	bl	8002c24 <log_0>
	*nested_exc = false;
 8003dd2:	2600      	movs	r6, #0
		return NULL;
 8003dd4:	4634      	mov	r4, r6
 8003dd6:	e7e0      	b.n	8003d9a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8003dd8:	4604      	mov	r4, r0
			*nested_exc = true;
 8003dda:	2601      	movs	r6, #1
 8003ddc:	e7dd      	b.n	8003d9a <z_arm_fault+0x32>
	*nested_exc = false;
 8003dde:	2600      	movs	r6, #0
		return NULL;
 8003de0:	4634      	mov	r4, r6
 8003de2:	e7da      	b.n	8003d9a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003de4:	f10d 0c04 	add.w	ip, sp, #4
 8003de8:	6820      	ldr	r0, [r4, #0]
 8003dea:	6861      	ldr	r1, [r4, #4]
 8003dec:	68a2      	ldr	r2, [r4, #8]
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003df4:	6920      	ldr	r0, [r4, #16]
 8003df6:	6961      	ldr	r1, [r4, #20]
 8003df8:	69a2      	ldr	r2, [r4, #24]
 8003dfa:	69e3      	ldr	r3, [r4, #28]
 8003dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8003e00:	b146      	cbz	r6, 8003e14 <z_arm_fault+0xac>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e06:	b95a      	cbnz	r2, 8003e20 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003e08:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8003e0c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8003e10:	9308      	str	r3, [sp, #32]
 8003e12:	e005      	b.n	8003e20 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003e14:	9b08      	ldr	r3, [sp, #32]
 8003e16:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8003e20:	a901      	add	r1, sp, #4
 8003e22:	4628      	mov	r0, r5
 8003e24:	f004 fb23 	bl	800846e <z_arm_fatal_error>
 8003e28:	e7c1      	b.n	8003dae <z_arm_fault+0x46>
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00
 8003e30:	0800a010 	.word	0x0800a010
 8003e34:	0800a000 	.word	0x0800a000
 8003e38:	0800a754 	.word	0x0800a754

08003e3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003e3c:	4a02      	ldr	r2, [pc, #8]	; (8003e48 <z_arm_fault_init+0xc>)
 8003e3e:	6953      	ldr	r3, [r2, #20]
 8003e40:	f043 0310 	orr.w	r3, r3, #16
 8003e44:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8003e4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003e50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003e54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003e56:	4672      	mov	r2, lr
	bl z_arm_fault
 8003e58:	f7ff ff86 	bl	8003d68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8003e5c:	bd01      	pop	{r0, pc}
 8003e5e:	bf00      	nop

08003e60 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8003e60:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003e62:	e006      	b.n	8003e72 <z_arm_interrupt_init+0x12>
 8003e64:	f002 010f 	and.w	r1, r2, #15
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <z_arm_interrupt_init+0x30>)
 8003e6a:	440b      	add	r3, r1
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	7619      	strb	r1, [r3, #24]
 8003e70:	3201      	adds	r2, #1
 8003e72:	2a54      	cmp	r2, #84	; 0x54
 8003e74:	dc0a      	bgt.n	8003e8c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8003e76:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dbf3      	blt.n	8003e64 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003e80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8003e84:	2110      	movs	r1, #16
 8003e86:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8003e8a:	e7f1      	b.n	8003e70 <z_arm_interrupt_init+0x10>
	}
}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ecfc 	.word	0xe000ecfc

08003e94 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003e94:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003e96:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8003e9a:	4808      	ldr	r0, [pc, #32]	; (8003ebc <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003e9c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8003ea0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003ea2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003ea6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003eaa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003eac:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003eae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003eb2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003eb6:	f7ff fb17 	bl	80034e8 <z_arm_prep_c>
 8003eba:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8003ebc:	20001320 	.word	0x20001320

08003ec0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8003ec0:	b508      	push	{r3, lr}
	if (_current == thread) {
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <z_impl_k_thread_abort+0x24>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	d002      	beq.n	8003ed0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8003eca:	f002 f92b 	bl	8006124 <z_thread_abort>
}
 8003ece:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f8      	beq.n	8003eca <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <z_impl_k_thread_abort+0x28>)
 8003eda:	6853      	ldr	r3, [r2, #4]
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6053      	str	r3, [r2, #4]
 8003ee2:	e7f2      	b.n	8003eca <z_impl_k_thread_abort+0xa>
 8003ee4:	2000061c 	.word	0x2000061c
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8003eec:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003eee:	4b03      	ldr	r3, [pc, #12]	; (8003efc <z_arm_configure_static_mpu_regions+0x10>)
 8003ef0:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <z_arm_configure_static_mpu_regions+0x14>)
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4803      	ldr	r0, [pc, #12]	; (8003f04 <z_arm_configure_static_mpu_regions+0x18>)
 8003ef6:	f004 fb2f 	bl	8008558 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8003efa:	bd08      	pop	{r3, pc}
 8003efc:	20028000 	.word	0x20028000
 8003f00:	20000000 	.word	0x20000000
 8003f04:	0800a784 	.word	0x0800a784

08003f08 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8003f08:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8003f0a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003f0c:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8003f0e:	4805      	ldr	r0, [pc, #20]	; (8003f24 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8003f10:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8003f12:	2320      	movs	r3, #32
 8003f14:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8003f18:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	f004 fb20 	bl	8008560 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8003f20:	bd08      	pop	{r3, pc}
 8003f22:	bf00      	nop
 8003f24:	20000518 	.word	0x20000518
 8003f28:	150b0000 	.word	0x150b0000

08003f2c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8003f2c:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <region_init+0x24>)
 8003f2e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003f32:	680b      	ldr	r3, [r1, #0]
 8003f34:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8003f38:	4303      	orrs	r3, r0
 8003f3a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003f3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003f42:	688b      	ldr	r3, [r1, #8]
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8003f54:	b510      	push	{r4, lr}
 8003f56:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8003f58:	2807      	cmp	r0, #7
 8003f5a:	d803      	bhi.n	8003f64 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8003f5c:	f7ff ffe6 	bl	8003f2c <region_init>

	return index;
 8003f60:	4620      	mov	r0, r4
}
 8003f62:	bd10      	pop	{r4, pc}
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <region_allocate_and_init+0x38>)
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <region_allocate_and_init+0x3c>)
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	2101      	movs	r1, #1
 8003f72:	f361 0202 	bfi	r2, r1, #0, #3
 8003f76:	f36f 02c5 	bfc	r2, #3, #3
 8003f7a:	f363 128f 	bfi	r2, r3, #6, #10
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <region_allocate_and_init+0x40>)
 8003f82:	f7fe fe79 	bl	8002c78 <log_1>
		return -EINVAL;
 8003f86:	f06f 0015 	mvn.w	r0, #21
 8003f8a:	e7ea      	b.n	8003f62 <region_allocate_and_init+0xe>
 8003f8c:	0800a008 	.word	0x0800a008
 8003f90:	0800a000 	.word	0x0800a000
 8003f94:	0800a790 	.word	0x0800a790

08003f98 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8003f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	460f      	mov	r7, r1
 8003fa0:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
 8003fa2:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8003fa4:	2400      	movs	r4, #0
 8003fa6:	e009      	b.n	8003fbc <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8003fa8:	4629      	mov	r1, r5
 8003faa:	b2f0      	uxtb	r0, r6
 8003fac:	f004 fab5 	bl	800851a <mpu_configure_region>
 8003fb0:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8003fb2:	f110 0f16 	cmn.w	r0, #22
 8003fb6:	d025      	beq.n	8004004 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8003fb8:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8003fba:	3401      	adds	r4, #1
 8003fbc:	42bc      	cmp	r4, r7
 8003fbe:	da21      	bge.n	8004004 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
 8003fc0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003fc4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003fc8:	686a      	ldr	r2, [r5, #4]
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	d0f5      	beq.n	8003fba <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 8003fce:	f1ba 0f00 	cmp.w	sl, #0
 8003fd2:	d0e9      	beq.n	8003fa8 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	f004 fa8f 	bl	80084f8 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d1e4      	bne.n	8003fa8 <mpu_configure_regions+0x10>
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <mpu_configure_regions+0x74>)
 8003fe0:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <mpu_configure_regions+0x78>)
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	2101      	movs	r1, #1
 8003fec:	f361 0202 	bfi	r2, r1, #0, #3
 8003ff0:	f36f 02c5 	bfc	r2, #3, #3
 8003ff4:	f363 128f 	bfi	r2, r3, #6, #10
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4806      	ldr	r0, [pc, #24]	; (8004014 <mpu_configure_regions+0x7c>)
 8003ffc:	f7fe fe3c 	bl	8002c78 <log_1>
			return -EINVAL;
 8004000:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8004004:	4630      	mov	r0, r6
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	bf00      	nop
 800400c:	0800a008 	.word	0x0800a008
 8004010:	0800a000 	.word	0x0800a000
 8004014:	0800a7b8 	.word	0x0800a7b8

08004018 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8004018:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 800401a:	4c03      	ldr	r4, [pc, #12]	; (8004028 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 800401c:	2301      	movs	r3, #1
 800401e:	7822      	ldrb	r2, [r4, #0]
 8004020:	f7ff ffba 	bl	8003f98 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004024:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8004026:	bd10      	pop	{r4, pc}
 8004028:	2000066b 	.word	0x2000066b

0800402c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 800402c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800402e:	2300      	movs	r3, #0
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <mpu_configure_dynamic_mpu_regions+0x2c>)
 8004032:	7812      	ldrb	r2, [r2, #0]
 8004034:	f7ff ffb0 	bl	8003f98 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004038:	f110 0f16 	cmn.w	r0, #22
 800403c:	d00a      	beq.n	8004054 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800403e:	4603      	mov	r3, r0
 8004040:	e006      	b.n	8004050 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004042:	4a06      	ldr	r2, [pc, #24]	; (800405c <mpu_configure_dynamic_mpu_regions+0x30>)
 8004044:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8004048:	2100      	movs	r1, #0
 800404a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800404e:	3301      	adds	r3, #1
 8004050:	2b07      	cmp	r3, #7
 8004052:	ddf6      	ble.n	8004042 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8004054:	bd08      	pop	{r3, pc}
 8004056:	bf00      	nop
 8004058:	2000066b 	.word	0x2000066b
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <arm_core_mpu_enable+0x14>)
 8004062:	2205      	movs	r2, #5
 8004064:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800406c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004078:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <arm_core_mpu_disable+0x10>)
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 800408c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <z_arm_mpu_init+0x3c>)
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	2d08      	cmp	r5, #8
 8004094:	d815      	bhi.n	80040c2 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004096:	f7ff ffef 	bl	8004078 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800409a:	2400      	movs	r4, #0
 800409c:	e009      	b.n	80040b2 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <z_arm_mpu_init+0x3c>)
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80040a6:	0093      	lsls	r3, r2, #2
 80040a8:	4419      	add	r1, r3
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff ff3e 	bl	8003f2c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80040b0:	3401      	adds	r4, #1
 80040b2:	42a5      	cmp	r5, r4
 80040b4:	d8f3      	bhi.n	800409e <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <z_arm_mpu_init+0x40>)
 80040b8:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 80040ba:	f7ff ffd1 	bl	8004060 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 80040be:	2000      	movs	r0, #0
}
 80040c0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c6:	e7fb      	b.n	80040c0 <z_arm_mpu_init+0x34>
 80040c8:	0800a7f4 	.word	0x0800a7f4
 80040cc:	2000066b 	.word	0x2000066b

080040d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80040d0:	4b01      	ldr	r3, [pc, #4]	; (80040d8 <__stdout_hook_install+0x8>)
 80040d2:	6018      	str	r0, [r3, #0]
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	2000000c 	.word	0x2000000c

080040dc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4606      	mov	r6, r0
 80040e0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 80040e2:	2400      	movs	r4, #0
 80040e4:	e000      	b.n	80040e8 <z_impl_zephyr_read_stdin+0xc>
 80040e6:	3401      	adds	r4, #1
 80040e8:	42ac      	cmp	r4, r5
 80040ea:	da08      	bge.n	80040fe <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <z_impl_zephyr_read_stdin+0x28>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4798      	blx	r3
 80040f2:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80040f4:	280a      	cmp	r0, #10
 80040f6:	d001      	beq.n	80040fc <z_impl_zephyr_read_stdin+0x20>
 80040f8:	280d      	cmp	r0, #13
 80040fa:	d1f4      	bne.n	80040e6 <z_impl_zephyr_read_stdin+0xa>
			i++;
 80040fc:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 80040fe:	4620      	mov	r0, r4
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	bf00      	nop
 8004104:	20000008 	.word	0x20000008

08004108 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	4605      	mov	r5, r0
 800410c:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800410e:	2400      	movs	r4, #0
 8004110:	e004      	b.n	800411c <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <z_impl_zephyr_write_stdout+0x30>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	7830      	ldrb	r0, [r6, #0]
 8004118:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800411a:	3401      	adds	r4, #1
 800411c:	42bc      	cmp	r4, r7
 800411e:	da08      	bge.n	8004132 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8004120:	192e      	adds	r6, r5, r4
 8004122:	5d2b      	ldrb	r3, [r5, r4]
 8004124:	2b0a      	cmp	r3, #10
 8004126:	d1f4      	bne.n	8004112 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <z_impl_zephyr_write_stdout+0x30>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	200d      	movs	r0, #13
 800412e:	4798      	blx	r3
 8004130:	e7ef      	b.n	8004112 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8004132:	4638      	mov	r0, r7
 8004134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c

0800413c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 800413c:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 800413e:	2205      	movs	r2, #5
 8004140:	4902      	ldr	r1, [pc, #8]	; (800414c <_exit+0x10>)
 8004142:	2001      	movs	r0, #1
 8004144:	f004 fa1d 	bl	8008582 <_write>
	while (1) {
 8004148:	e7fe      	b.n	8004148 <_exit+0xc>
 800414a:	bf00      	nop
 800414c:	0800a7dc 	.word	0x0800a7dc

08004150 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8004150:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <_sbrk+0x24>)
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <_sbrk+0x28>)
 8004158:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 800415a:	440a      	add	r2, r1
 800415c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8004160:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8004164:	429a      	cmp	r2, r3
 8004166:	d202      	bcs.n	800416e <_sbrk+0x1e>
		heap_sz += count;
 8004168:	4b02      	ldr	r3, [pc, #8]	; (8004174 <_sbrk+0x24>)
 800416a:	601a      	str	r2, [r3, #0]
		ret = ptr;
 800416c:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 800416e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8004172:	4770      	bx	lr
 8004174:	20000524 	.word	0x20000524
 8004178:	20001fe0 	.word	0x20001fe0

0800417c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4604      	mov	r4, r0
 8004180:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8004182:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8004184:	e002      	b.n	800418c <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004186:	2201      	movs	r2, #1
 8004188:	e00c      	b.n	80041a4 <__stm32_exti_isr+0x28>
 800418a:	3401      	adds	r4, #1
 800418c:	42ac      	cmp	r4, r5
 800418e:	da17      	bge.n	80041c0 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8004190:	2c1f      	cmp	r4, #31
 8004192:	dcfa      	bgt.n	800418a <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004194:	2301      	movs	r3, #1
 8004196:	40a3      	lsls	r3, r4
 8004198:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <__stm32_exti_isr+0x48>)
 800419a:	6952      	ldr	r2, [r2, #20]
 800419c:	ea33 0202 	bics.w	r2, r3, r2
 80041a0:	d0f1      	beq.n	8004186 <__stm32_exti_isr+0xa>
 80041a2:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 80041a4:	2a00      	cmp	r2, #0
 80041a6:	d0f0      	beq.n	800418a <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80041a8:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <__stm32_exti_isr+0x48>)
 80041aa:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 80041ac:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ea      	beq.n	800418a <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80041b4:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 80041b8:	6851      	ldr	r1, [r2, #4]
 80041ba:	4620      	mov	r0, r4
 80041bc:	4798      	blx	r3
 80041be:	e7e4      	b.n	800418a <__stm32_exti_isr+0xe>
		}
	}
}
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	bf00      	nop
 80041c4:	40010400 	.word	0x40010400

080041c8 <stm32_exti_enable>:
{
 80041c8:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 80041ca:	2301      	movs	r3, #1
 80041cc:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <stm32_exti_enable+0x18>)
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 80041d6:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <stm32_exti_enable+0x1c>)
 80041d8:	5618      	ldrsb	r0, [r3, r0]
 80041da:	f7ff f95d 	bl	8003498 <arch_irq_enable>
}
 80041de:	bd08      	pop	{r3, pc}
 80041e0:	40010400 	.word	0x40010400
 80041e4:	0800a834 	.word	0x0800a834

080041e8 <stm32_exti_disable>:
	if (line < 32) {
 80041e8:	281f      	cmp	r0, #31
 80041ea:	dc06      	bgt.n	80041fa <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 80041ec:	2301      	movs	r3, #1
 80041ee:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80041f0:	4a02      	ldr	r2, [pc, #8]	; (80041fc <stm32_exti_disable+0x14>)
 80041f2:	6810      	ldr	r0, [r2, #0]
 80041f4:	ea20 0003 	bic.w	r0, r0, r3
 80041f8:	6010      	str	r0, [r2, #0]
}
 80041fa:	4770      	bx	lr
 80041fc:	40010400 	.word	0x40010400

08004200 <stm32_exti_trigger>:
	switch (trigger) {
 8004200:	2903      	cmp	r1, #3
 8004202:	d832      	bhi.n	800426a <stm32_exti_trigger+0x6a>
 8004204:	e8df f001 	tbb	[pc, r1]
 8004208:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800420c:	2301      	movs	r3, #1
 800420e:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <stm32_exti_trigger+0x6c>)
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	ea22 0200 	bic.w	r2, r2, r0
 800421a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	ea22 0000 	bic.w	r0, r2, r0
 8004222:	60d8      	str	r0, [r3, #12]
}
 8004224:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004226:	2301      	movs	r3, #1
 8004228:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <stm32_exti_trigger+0x6c>)
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4302      	orrs	r2, r0
 8004232:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	ea22 0000 	bic.w	r0, r2, r0
 800423a:	60d8      	str	r0, [r3, #12]
}
 800423c:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800423e:	2301      	movs	r3, #1
 8004240:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <stm32_exti_trigger+0x6c>)
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	4302      	orrs	r2, r0
 800424a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	ea22 0000 	bic.w	r0, r2, r0
 8004252:	6098      	str	r0, [r3, #8]
}
 8004254:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004256:	2301      	movs	r3, #1
 8004258:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <stm32_exti_trigger+0x6c>)
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	4302      	orrs	r2, r0
 8004262:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	4310      	orrs	r0, r2
 8004268:	60d8      	str	r0, [r3, #12]
}
 800426a:	4770      	bx	lr
 800426c:	40010400 	.word	0x40010400

08004270 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <stm32_exti_set_callback+0x20>)
 8004272:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004276:	b93b      	cbnz	r3, 8004288 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <stm32_exti_set_callback+0x20>)
 800427a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 800427e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004282:	6042      	str	r2, [r0, #4]

	return 0;
 8004284:	2000      	movs	r0, #0
 8004286:	4770      	bx	lr
		return -EBUSY;
 8004288:	f06f 000f 	mvn.w	r0, #15
}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000528 	.word	0x20000528

08004294 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <stm32_exti_unset_callback+0x10>)
 8004296:	2200      	movs	r2, #0
 8004298:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 800429c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80042a0:	605a      	str	r2, [r3, #4]
}
 80042a2:	4770      	bx	lr
 80042a4:	20000528 	.word	0x20000528

080042a8 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 80042a8:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80042aa:	680b      	ldr	r3, [r1, #0]
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d848      	bhi.n	8004342 <stm32_clock_control_on+0x9a>
 80042b0:	e8df f003 	tbb	[pc, r3]
 80042b4:	3c261004 	.word	0x3c261004
 80042b8:	4731      	.short	0x4731
 80042ba:	1b          	.byte	0x1b
 80042bb:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80042bc:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <stm32_clock_control_on+0xa0>)
 80042c0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042c2:	4319      	orrs	r1, r3
 80042c4:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80042c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042c8:	4013      	ands	r3, r2
 80042ca:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80042cc:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80042ce:	2000      	movs	r0, #0
}
 80042d0:	b006      	add	sp, #24
 80042d2:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80042d4:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <stm32_clock_control_on+0xa0>)
 80042d8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80042da:	4319      	orrs	r1, r3
 80042dc:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80042de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042e0:	4013      	ands	r3, r2
 80042e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80042e4:	9b01      	ldr	r3, [sp, #4]
	return 0;
 80042e6:	2000      	movs	r0, #0
}
 80042e8:	e7f2      	b.n	80042d0 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 80042ea:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <stm32_clock_control_on+0xa0>)
 80042ee:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80042f0:	4319      	orrs	r1, r3
 80042f2:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80042f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f6:	4013      	ands	r3, r2
 80042f8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80042fa:	9b02      	ldr	r3, [sp, #8]
	return 0;
 80042fc:	2000      	movs	r0, #0
}
 80042fe:	e7e7      	b.n	80042d0 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004300:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004302:	4a11      	ldr	r2, [pc, #68]	; (8004348 <stm32_clock_control_on+0xa0>)
 8004304:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004306:	4319      	orrs	r1, r3
 8004308:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800430a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800430c:	4013      	ands	r3, r2
 800430e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004310:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8004312:	2000      	movs	r0, #0
}
 8004314:	e7dc      	b.n	80042d0 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8004316:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004318:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <stm32_clock_control_on+0xa0>)
 800431a:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800431c:	4319      	orrs	r1, r3
 800431e:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004320:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004322:	4013      	ands	r3, r2
 8004324:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004326:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8004328:	2000      	movs	r0, #0
}
 800432a:	e7d1      	b.n	80042d0 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800432c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800432e:	4a06      	ldr	r2, [pc, #24]	; (8004348 <stm32_clock_control_on+0xa0>)
 8004330:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004332:	4319      	orrs	r1, r3
 8004334:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004336:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004338:	4013      	ands	r3, r2
 800433a:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800433c:	9b05      	ldr	r3, [sp, #20]
	return 0;
 800433e:	2000      	movs	r0, #0
}
 8004340:	e7c6      	b.n	80042d0 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8004342:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004346:	e7c3      	b.n	80042d0 <stm32_clock_control_on+0x28>
 8004348:	40021000 	.word	0x40021000

0800434c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 800434c:	680b      	ldr	r3, [r1, #0]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d83a      	bhi.n	80043c8 <stm32_clock_control_off+0x7c>
 8004352:	e8df f003 	tbb	[pc, r3]
 8004356:	0c04      	.short	0x0c04
 8004358:	39293121 	.word	0x39293121
 800435c:	14          	.byte	0x14
 800435d:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 800435e:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <stm32_clock_control_off+0x84>)
 8004362:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004364:	ea23 0301 	bic.w	r3, r3, r1
 8004368:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800436a:	2000      	movs	r0, #0
}
 800436c:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 800436e:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <stm32_clock_control_off+0x84>)
 8004372:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004374:	ea23 0301 	bic.w	r3, r3, r1
 8004378:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 800437a:	2000      	movs	r0, #0
}
 800437c:	4770      	bx	lr
{
 800437e:	b082      	sub	sp, #8
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004380:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004382:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <stm32_clock_control_off+0x84>)
 8004384:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004386:	4319      	orrs	r1, r3
 8004388:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800438a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800438c:	4013      	ands	r3, r2
 800438e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004390:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004392:	2000      	movs	r0, #0
}
 8004394:	b002      	add	sp, #8
 8004396:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8004398:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800439a:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <stm32_clock_control_off+0x84>)
 800439c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800439e:	ea23 0301 	bic.w	r3, r3, r1
 80043a2:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 80043a4:	2000      	movs	r0, #0
}
 80043a6:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 80043a8:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <stm32_clock_control_off+0x84>)
 80043ac:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80043ae:	ea23 0301 	bic.w	r3, r3, r1
 80043b2:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 80043b4:	2000      	movs	r0, #0
}
 80043b6:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 80043b8:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <stm32_clock_control_off+0x84>)
 80043bc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80043be:	ea23 0301 	bic.w	r3, r3, r1
 80043c2:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 80043c4:	2000      	movs	r0, #0
}
 80043c6:	4770      	bx	lr
	switch (pclken->bus) {
 80043c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000

080043d4 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	460c      	mov	r4, r1
 80043d8:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <stm32_clock_control_get_subsys_rate+0x3c>)
 80043dc:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 80043de:	2101      	movs	r1, #1
 80043e0:	4630      	mov	r0, r6
 80043e2:	f004 f95c 	bl	800869e <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d80e      	bhi.n	800440a <stm32_clock_control_get_subsys_rate+0x36>
 80043ec:	e8df f003 	tbb	[pc, r3]
 80043f0:	0a070404 	.word	0x0a070404
 80043f4:	0d07      	.short	0x0d07
 80043f6:	04          	.byte	0x04
 80043f7:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 80043f8:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80043fa:	2000      	movs	r0, #0
}
 80043fc:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 80043fe:	6028      	str	r0, [r5, #0]
	return 0;
 8004400:	2000      	movs	r0, #0
		break;
 8004402:	e7fb      	b.n	80043fc <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004404:	6028      	str	r0, [r5, #0]
	return 0;
 8004406:	2000      	movs	r0, #0
		break;
 8004408:	e7f8      	b.n	80043fc <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800440a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800440e:	e7f5      	b.n	80043fc <stm32_clock_control_get_subsys_rate+0x28>
 8004410:	20000078 	.word	0x20000078

08004414 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <stm32_clock_switch_to_hsi+0x44>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800441c:	d109      	bne.n	8004432 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800441e:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <stm32_clock_switch_to_hsi+0x44>)
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <stm32_clock_switch_to_hsi+0x44>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004430:	d0fa      	beq.n	8004428 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <stm32_clock_switch_to_hsi+0x44>)
 8004434:	6893      	ldr	r3, [r2, #8]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004440:	6893      	ldr	r3, [r2, #8]
 8004442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004446:	4318      	orrs	r0, r3
 8004448:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800444a:	4b03      	ldr	r3, [pc, #12]	; (8004458 <stm32_clock_switch_to_hsi+0x44>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004452:	2b04      	cmp	r3, #4
 8004454:	d1f9      	bne.n	800444a <stm32_clock_switch_to_hsi+0x36>
	}
}
 8004456:	4770      	bx	lr
 8004458:	40021000 	.word	0x40021000

0800445c <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 800445c:	b510      	push	{r4, lr}
 800445e:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8004460:	a803      	add	r0, sp, #12
 8004462:	f004 f917 	bl	8008694 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8004466:	f000 f823 	bl	80044b0 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800446a:	4668      	mov	r0, sp
 800446c:	f004 f91a 	bl	80086a4 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8004470:	2000      	movs	r0, #0
 8004472:	f7ff ffcf 	bl	8004414 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004476:	4c0d      	ldr	r4, [pc, #52]	; (80044ac <stm32_clock_control_init+0x50>)
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800447e:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004486:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800448a:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 800448c:	a903      	add	r1, sp, #12
 800448e:	4668      	mov	r0, sp
 8004490:	f000 ffa0 	bl	80053d4 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80044a4:	2000      	movs	r0, #0
 80044a6:	b006      	add	sp, #24
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000

080044b0 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80044b0:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <config_enable_default_clocks+0x1c>)
 80044b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044ba:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80044c4:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80044c6:	b002      	add	sp, #8
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80044d4:	280a      	cmp	r0, #10
 80044d6:	d007      	beq.n	80044e8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <console_out+0x28>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 80044de:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4798      	blx	r3

	return c;
}
 80044e4:	4620      	mov	r0, r4
 80044e6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <console_out+0x28>)
 80044ea:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 80044ec:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	210d      	movs	r1, #13
 80044f2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 80044f4:	e7f0      	b.n	80044d8 <console_out+0x8>
 80044f6:	bf00      	nop
 80044f8:	200005a8 	.word	0x200005a8

080044fc <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 80044fc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 80044fe:	4c04      	ldr	r4, [pc, #16]	; (8004510 <uart_console_hook_install+0x14>)
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff fde5 	bl	80040d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8004506:	4620      	mov	r0, r4
 8004508:	f7fd fb82 	bl	8001c10 <__printk_hook_install>
}
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	080044d1 	.word	0x080044d1

08004514 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8004514:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004516:	4809      	ldr	r0, [pc, #36]	; (800453c <uart_console_init+0x28>)
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <uart_console_init+0x2c>)
 800451a:	6018      	str	r0, [r3, #0]
 800451c:	f004 fd56 	bl	8008fcc <z_device_ready>
 8004520:	b128      	cbz	r0, 800452e <uart_console_init+0x1a>
 8004522:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 8004524:	b933      	cbnz	r3, 8004534 <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 8004526:	f7ff ffe9 	bl	80044fc <uart_console_hook_install>

	return 0;
 800452a:	2000      	movs	r0, #0
}
 800452c:	bd08      	pop	{r3, pc}
 800452e:	f06f 0312 	mvn.w	r3, #18
 8004532:	e7f7      	b.n	8004524 <uart_console_init+0x10>
		return -ENODEV;
 8004534:	f06f 0012 	mvn.w	r0, #18
 8004538:	e7f8      	b.n	800452c <uart_console_init+0x18>
 800453a:	bf00      	nop
 800453c:	08009d08 	.word	0x08009d08
 8004540:	200005a8 	.word	0x200005a8

08004544 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004544:	424a      	negs	r2, r1
 8004546:	f001 0303 	and.w	r3, r1, #3
 800454a:	f002 0203 	and.w	r2, r2, #3
 800454e:	bf58      	it	pl
 8004550:	4253      	negpl	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	009a      	lsls	r2, r3, #2
 8004556:	230f      	movs	r3, #15
 8004558:	4093      	lsls	r3, r2
 800455a:	460a      	mov	r2, r1
 800455c:	2900      	cmp	r1, #0
 800455e:	db19      	blt.n	8004594 <gpio_stm32_set_exti_source+0x50>
 8004560:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8004564:	fa5f fc83 	uxtb.w	ip, r3
 8004568:	f10c 0102 	add.w	r1, ip, #2
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <gpio_stm32_set_exti_source+0x58>)
 800456e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004572:	0c1a      	lsrs	r2, r3, #16
 8004574:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800457c:	b162      	cbz	r2, 8004598 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 800457e:	fab2 f282 	clz	r2, r2
 8004582:	fa00 f202 	lsl.w	r2, r0, r2
 8004586:	431a      	orrs	r2, r3
 8004588:	f10c 0c02 	add.w	ip, ip, #2
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <gpio_stm32_set_exti_source+0x58>)
 800458e:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8004592:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004594:	1cca      	adds	r2, r1, #3
 8004596:	e7e3      	b.n	8004560 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8004598:	2220      	movs	r2, #32
 800459a:	e7f2      	b.n	8004582 <gpio_stm32_set_exti_source+0x3e>
 800459c:	40010000 	.word	0x40010000

080045a0 <gpio_stm32_get_exti_source>:
 80045a0:	4242      	negs	r2, r0
 80045a2:	f000 0303 	and.w	r3, r0, #3
 80045a6:	f002 0203 	and.w	r2, r2, #3
 80045aa:	bf58      	it	pl
 80045ac:	4253      	negpl	r3, r2
 80045ae:	3304      	adds	r3, #4
 80045b0:	009a      	lsls	r2, r3, #2
 80045b2:	230f      	movs	r3, #15
 80045b4:	4093      	lsls	r3, r2
 80045b6:	4602      	mov	r2, r0
 80045b8:	2800      	cmp	r0, #0
 80045ba:	db10      	blt.n	80045de <gpio_stm32_get_exti_source+0x3e>
 80045bc:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80045c0:	b2c3      	uxtb	r3, r0
 80045c2:	3302      	adds	r3, #2
 80045c4:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <gpio_stm32_get_exti_source+0x48>)
 80045c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80045ca:	0c03      	lsrs	r3, r0, #16
 80045cc:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80045d4:	b12b      	cbz	r3, 80045e2 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 80045d6:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80045da:	40d8      	lsrs	r0, r3
 80045dc:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80045de:	1cc2      	adds	r2, r0, #3
 80045e0:	e7ec      	b.n	80045bc <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80045e2:	2320      	movs	r3, #32
 80045e4:	e7f9      	b.n	80045da <gpio_stm32_get_exti_source+0x3a>
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000

080045ec <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	4606      	mov	r6, r0
 80045f2:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <gpio_stm32_enable_int+0x40>)
 80045f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045fa:	ab02      	add	r3, sp, #8
 80045fc:	e903 0003 	stmdb	r3, {r0, r1}
 8004600:	480b      	ldr	r0, [pc, #44]	; (8004630 <gpio_stm32_enable_int+0x44>)
 8004602:	f004 fce3 	bl	8008fcc <z_device_ready>
 8004606:	b148      	cbz	r0, 800461c <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004608:	4809      	ldr	r0, [pc, #36]	; (8004630 <gpio_stm32_enable_int+0x44>)
 800460a:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4669      	mov	r1, sp
 8004610:	4798      	blx	r3
 8004612:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8004614:	b12c      	cbz	r4, 8004622 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8004616:	4620      	mov	r0, r4
 8004618:	b002      	add	sp, #8
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f06f 0412 	mvn.w	r4, #18
 8004620:	e7f8      	b.n	8004614 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8004622:	4629      	mov	r1, r5
 8004624:	4630      	mov	r0, r6
 8004626:	f7ff ff8d 	bl	8004544 <gpio_stm32_set_exti_source>
	return 0;
 800462a:	e7f4      	b.n	8004616 <gpio_stm32_enable_int+0x2a>
 800462c:	0800a0a8 	.word	0x0800a0a8
 8004630:	08009c48 	.word	0x08009c48

08004634 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	460c      	mov	r4, r1
 8004638:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 800463a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800463c:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800463e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004642:	d01f      	beq.n	8004684 <gpio_stm32_pin_interrupt_configure+0x50>
 8004644:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8004646:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800464a:	d034      	beq.n	80046b6 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800464c:	491d      	ldr	r1, [pc, #116]	; (80046c4 <gpio_stm32_pin_interrupt_configure+0x90>)
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff fe0e 	bl	8004270 <stm32_exti_set_callback>
 8004654:	4606      	mov	r6, r0
 8004656:	bb88      	cbnz	r0, 80046bc <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8004658:	4621      	mov	r1, r4
 800465a:	68b8      	ldr	r0, [r7, #8]
 800465c:	f7ff ffc6 	bl	80045ec <gpio_stm32_enable_int>

	switch (trig) {
 8004660:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8004664:	d023      	beq.n	80046ae <gpio_stm32_pin_interrupt_configure+0x7a>
 8004666:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 800466a:	d022      	beq.n	80046b2 <gpio_stm32_pin_interrupt_configure+0x7e>
 800466c:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8004670:	d01b      	beq.n	80046aa <gpio_stm32_pin_interrupt_configure+0x76>
 8004672:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff fdc3 	bl	8004200 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff fda4 	bl	80041c8 <stm32_exti_enable>

exit:
	return err;
}
 8004680:	4630      	mov	r0, r6
 8004682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004684:	4620      	mov	r0, r4
 8004686:	f7ff ff8b 	bl	80045a0 <gpio_stm32_get_exti_source>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4298      	cmp	r0, r3
 800468e:	d001      	beq.n	8004694 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8004690:	2600      	movs	r6, #0
		goto exit;
 8004692:	e7f5      	b.n	8004680 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff fda7 	bl	80041e8 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff fdfa 	bl	8004294 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80046a0:	2100      	movs	r1, #0
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff fdac 	bl	8004200 <stm32_exti_trigger>
 80046a8:	e7f2      	b.n	8004690 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 80046aa:	2102      	movs	r1, #2
 80046ac:	e7e2      	b.n	8004674 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 80046ae:	2101      	movs	r1, #1
 80046b0:	e7e0      	b.n	8004674 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 80046b2:	2103      	movs	r1, #3
 80046b4:	e7de      	b.n	8004674 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 80046b6:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80046ba:	e7e1      	b.n	8004680 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 80046bc:	f06f 060f 	mvn.w	r6, #15
	return err;
 80046c0:	e7de      	b.n	8004680 <gpio_stm32_pin_interrupt_configure+0x4c>
 80046c2:	bf00      	nop
 80046c4:	080086b5 	.word	0x080086b5

080046c8 <gpio_stm32_clock_request>:
{
 80046c8:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 80046ca:	6844      	ldr	r4, [r0, #4]
	if (on) {
 80046cc:	b169      	cbz	r1, 80046ea <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 80046ce:	340c      	adds	r4, #12
 80046d0:	480d      	ldr	r0, [pc, #52]	; (8004708 <gpio_stm32_clock_request+0x40>)
 80046d2:	f004 fc7b 	bl	8008fcc <z_device_ready>
 80046d6:	b128      	cbz	r0, 80046e4 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 80046d8:	480b      	ldr	r0, [pc, #44]	; (8004708 <gpio_stm32_clock_request+0x40>)
 80046da:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	4798      	blx	r3
}
 80046e2:	bd10      	pop	{r4, pc}
 80046e4:	f06f 0012 	mvn.w	r0, #18
 80046e8:	e7fb      	b.n	80046e2 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 80046ea:	340c      	adds	r4, #12
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <gpio_stm32_clock_request+0x40>)
 80046ee:	f004 fc6d 	bl	8008fcc <z_device_ready>
 80046f2:	b128      	cbz	r0, 8004700 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 80046f4:	4804      	ldr	r0, [pc, #16]	; (8004708 <gpio_stm32_clock_request+0x40>)
 80046f6:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4621      	mov	r1, r4
 80046fc:	4798      	blx	r3
 80046fe:	e7f0      	b.n	80046e2 <gpio_stm32_clock_request+0x1a>
 8004700:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8004704:	e7ed      	b.n	80046e2 <gpio_stm32_clock_request+0x1a>
 8004706:	bf00      	nop
 8004708:	08009c48 	.word	0x08009c48

0800470c <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	b08c      	sub	sp, #48	; 0x30
 8004712:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8004714:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8004718:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 800471a:	ac04      	add	r4, sp, #16
 800471c:	4f95      	ldr	r7, [pc, #596]	; (8004974 <spi_stm32_configure+0x268>)
 800471e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004722:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 800472a:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 800472e:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8004730:	42ab      	cmp	r3, r5
 8004732:	f000 8119 	beq.w	8004968 <spi_stm32_configure+0x25c>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004736:	88ab      	ldrh	r3, [r5, #4]
 8004738:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800473c:	2b08      	cmp	r3, #8
 800473e:	d002      	beq.n	8004746 <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8004740:	2b10      	cmp	r3, #16
 8004742:	f040 8113 	bne.w	800496c <spi_stm32_configure+0x260>
 8004746:	488c      	ldr	r0, [pc, #560]	; (8004978 <spi_stm32_configure+0x26c>)
 8004748:	f004 fc40 	bl	8008fcc <z_device_ready>
 800474c:	b198      	cbz	r0, 8004776 <spi_stm32_configure+0x6a>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 800474e:	4b8a      	ldr	r3, [pc, #552]	; (8004978 <spi_stm32_configure+0x26c>)
 8004750:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	b193      	cbz	r3, 800477c <spi_stm32_configure+0x70>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8004756:	aa03      	add	r2, sp, #12
 8004758:	4641      	mov	r1, r8
 800475a:	4887      	ldr	r0, [pc, #540]	; (8004978 <spi_stm32_configure+0x26c>)
 800475c:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800475e:	2800      	cmp	r0, #0
 8004760:	db0f      	blt.n	8004782 <spi_stm32_configure+0x76>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004762:	2301      	movs	r3, #1
 8004764:	2b08      	cmp	r3, #8
 8004766:	dc1f      	bgt.n	80047a8 <spi_stm32_configure+0x9c>
		uint32_t clk = clock >> br;
 8004768:	9a03      	ldr	r2, [sp, #12]
 800476a:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 800476c:	6829      	ldr	r1, [r5, #0]
 800476e:	4291      	cmp	r1, r2
 8004770:	d21a      	bcs.n	80047a8 <spi_stm32_configure+0x9c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004772:	3301      	adds	r3, #1
 8004774:	e7f6      	b.n	8004764 <spi_stm32_configure+0x58>
 8004776:	f06f 0012 	mvn.w	r0, #18
 800477a:	e7f0      	b.n	800475e <spi_stm32_configure+0x52>
		return -ENOSYS;
 800477c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004780:	e7ed      	b.n	800475e <spi_stm32_configure+0x52>
 8004782:	4b7e      	ldr	r3, [pc, #504]	; (800497c <spi_stm32_configure+0x270>)
 8004784:	4a7e      	ldr	r2, [pc, #504]	; (8004980 <spi_stm32_configure+0x274>)
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	2201      	movs	r2, #1
 8004790:	f362 0102 	bfi	r1, r2, #0, #3
 8004794:	f36f 01c5 	bfc	r1, #3, #3
 8004798:	f363 118f 	bfi	r1, r3, #6, #10
 800479c:	4879      	ldr	r0, [pc, #484]	; (8004984 <spi_stm32_configure+0x278>)
 800479e:	f7fe fa41 	bl	8002c24 <log_0>
		return -EIO;
 80047a2:	f06f 0004 	mvn.w	r0, #4
 80047a6:	e0dc      	b.n	8004962 <spi_stm32_configure+0x256>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	dc75      	bgt.n	8004898 <spi_stm32_configure+0x18c>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b2:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80047b4:	3b01      	subs	r3, #1
 80047b6:	aa0c      	add	r2, sp, #48	; 0x30
 80047b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80047c6:	4313      	orrs	r3, r2
 80047c8:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80047ca:	88ab      	ldrh	r3, [r5, #4]
 80047cc:	f013 0f02 	tst.w	r3, #2
 80047d0:	d07b      	beq.n	80048ca <spi_stm32_configure+0x1be>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80047da:	88ab      	ldrh	r3, [r5, #4]
 80047dc:	f013 0f04 	tst.w	r3, #4
 80047e0:	d078      	beq.n	80048d4 <spi_stm32_configure+0x1c8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 80047f0:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 80047f2:	88ab      	ldrh	r3, [r5, #4]
 80047f4:	f013 0f10 	tst.w	r3, #16
 80047f8:	d071      	beq.n	80048de <spi_stm32_configure+0x1d2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004800:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004808:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 800480a:	68ab      	ldr	r3, [r5, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d06b      	beq.n	80048e8 <spi_stm32_configure+0x1dc>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004816:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	f023 0304 	bic.w	r3, r3, #4
 800481e:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8004820:	88ab      	ldrh	r3, [r5, #4]
 8004822:	f013 0f01 	tst.w	r3, #1
 8004826:	d077      	beq.n	8004918 <spi_stm32_configure+0x20c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 800482e:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8004830:	88ab      	ldrh	r3, [r5, #4]
 8004832:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004836:	2b08      	cmp	r3, #8
 8004838:	d073      	beq.n	8004922 <spi_stm32_configure+0x216>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8004840:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004848:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800484a:	6863      	ldr	r3, [r4, #4]
 800484c:	f023 0310 	bic.w	r3, r3, #16
 8004850:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8004852:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004854:	68ab      	ldr	r3, [r5, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d072      	beq.n	8004940 <spi_stm32_configure+0x234>
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	2800      	cmp	r0, #0
 800485e:	d06f      	beq.n	8004940 <spi_stm32_configure+0x234>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004860:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8004862:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004864:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8004868:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 800486a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800486c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004870:	d004      	beq.n	800487c <spi_stm32_configure+0x170>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004872:	f013 0f01 	tst.w	r3, #1
 8004876:	d001      	beq.n	800487c <spi_stm32_configure+0x170>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004878:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800487c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004880:	f013 0f01 	tst.w	r3, #1
 8004884:	d054      	beq.n	8004930 <spi_stm32_configure+0x224>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004886:	2301      	movs	r3, #1
 8004888:	fa03 f601 	lsl.w	r6, r3, r1
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	4333      	orrs	r3, r6
 8004890:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	4798      	blx	r3
 8004896:	e063      	b.n	8004960 <spi_stm32_configure+0x254>
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <spi_stm32_configure+0x270>)
 800489a:	4a39      	ldr	r2, [pc, #228]	; (8004980 <spi_stm32_configure+0x274>)
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	2201      	movs	r2, #1
 80048a6:	f362 0102 	bfi	r1, r2, #0, #3
 80048aa:	f36f 01c5 	bfc	r1, #3, #3
 80048ae:	f363 118f 	bfi	r1, r3, #6, #10
 80048b2:	9a03      	ldr	r2, [sp, #12]
 80048b4:	f8ad 1000 	strh.w	r1, [sp]
 80048b8:	0a13      	lsrs	r3, r2, #8
 80048ba:	0852      	lsrs	r2, r2, #1
 80048bc:	6829      	ldr	r1, [r5, #0]
 80048be:	4832      	ldr	r0, [pc, #200]	; (8004988 <spi_stm32_configure+0x27c>)
 80048c0:	f7fe f976 	bl	8002bb0 <log_3>
		return -EINVAL;
 80048c4:	f06f 0015 	mvn.w	r0, #21
 80048c8:	e04b      	b.n	8004962 <spi_stm32_configure+0x256>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f023 0302 	bic.w	r3, r3, #2
 80048d0:	6023      	str	r3, [r4, #0]
}
 80048d2:	e782      	b.n	80047da <spi_stm32_configure+0xce>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	6023      	str	r3, [r4, #0]
}
 80048dc:	e785      	b.n	80047ea <spi_stm32_configure+0xde>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	6023      	str	r3, [r4, #0]
}
 80048e6:	e78c      	b.n	8004802 <spi_stm32_configure+0xf6>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80048e8:	88ab      	ldrh	r3, [r5, #4]
 80048ea:	f013 0f01 	tst.w	r3, #1
 80048ee:	d008      	beq.n	8004902 <spi_stm32_configure+0x1f6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80048f8:	6863      	ldr	r3, [r4, #4]
 80048fa:	f023 0304 	bic.w	r3, r3, #4
 80048fe:	6063      	str	r3, [r4, #4]
}
 8004900:	e78e      	b.n	8004820 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800490c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800490e:	6863      	ldr	r3, [r4, #4]
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6063      	str	r3, [r4, #4]
}
 8004916:	e783      	b.n	8004820 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800491e:	6023      	str	r3, [r4, #0]
}
 8004920:	e786      	b.n	8004830 <spi_stm32_configure+0x124>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004928:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800492c:	6063      	str	r3, [r4, #4]
}
 800492e:	e788      	b.n	8004842 <spi_stm32_configure+0x136>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004930:	2301      	movs	r3, #1
 8004932:	fa03 f601 	lsl.w	r6, r3, r1
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	ea23 0306 	bic.w	r3, r3, r6
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	e7a8      	b.n	8004892 <spi_stm32_configure+0x186>
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <spi_stm32_configure+0x270>)
 8004942:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <spi_stm32_configure+0x274>)
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	08db      	lsrs	r3, r3, #3
				   GPIO_OUTPUT_INACTIVE);
	} else {
		LOG_INF("CS control inhibited (no GPIO device)");
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	2203      	movs	r2, #3
 800494e:	f362 0102 	bfi	r1, r2, #0, #3
 8004952:	f36f 01c5 	bfc	r1, #3, #3
 8004956:	f363 118f 	bfi	r1, r3, #6, #10
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <spi_stm32_configure+0x280>)
 800495c:	f7fe f962 	bl	8002c24 <log_0>
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8004960:	2000      	movs	r0, #0
}
 8004962:	b00c      	add	sp, #48	; 0x30
 8004964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8004968:	2000      	movs	r0, #0
 800496a:	e7fa      	b.n	8004962 <spi_stm32_configure+0x256>
		return -ENOTSUP;
 800496c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004970:	e7f7      	b.n	8004962 <spi_stm32_configure+0x256>
 8004972:	bf00      	nop
 8004974:	0800a0b0 	.word	0x0800a0b0
 8004978:	08009c48 	.word	0x08009c48
 800497c:	0800a020 	.word	0x0800a020
 8004980:	0800a000 	.word	0x0800a000
 8004984:	0800a920 	.word	0x0800a920
 8004988:	0800a944 	.word	0x0800a944
 800498c:	0800a974 	.word	0x0800a974

08004990 <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8004990:	6882      	ldr	r2, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8004992:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8004996:	d101      	bne.n	800499c <spi_stm32_get_err+0xc>
	return 0;
 8004998:	2000      	movs	r0, #0
}
 800499a:	4770      	bx	lr
{
 800499c:	b510      	push	{r4, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	4604      	mov	r4, r0
 80049a2:	490f      	ldr	r1, [pc, #60]	; (80049e0 <spi_stm32_get_err+0x50>)
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <spi_stm32_get_err+0x54>)
 80049a6:	1ac9      	subs	r1, r1, r3
 80049a8:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("%s: err=%d", __func__,
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	2001      	movs	r0, #1
 80049b0:	f360 0302 	bfi	r3, r0, #0, #3
 80049b4:	f36f 03c5 	bfc	r3, #3, #3
 80049b8:	f361 138f 	bfi	r3, r1, #6, #10
 80049bc:	490a      	ldr	r1, [pc, #40]	; (80049e8 <spi_stm32_get_err+0x58>)
 80049be:	480b      	ldr	r0, [pc, #44]	; (80049ec <spi_stm32_get_err+0x5c>)
 80049c0:	f7fe f98c 	bl	8002cdc <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049ca:	d005      	beq.n	80049d8 <spi_stm32_get_err+0x48>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 80049cc:	68e3      	ldr	r3, [r4, #12]
 80049ce:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80049d0:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80049d6:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 80049d8:	f06f 0004 	mvn.w	r0, #4
}
 80049dc:	b002      	add	sp, #8
 80049de:	bd10      	pop	{r4, pc}
 80049e0:	0800a020 	.word	0x0800a020
 80049e4:	0800a000 	.word	0x0800a000
 80049e8:	0800aa24 	.word	0x0800aa24
 80049ec:	0800a99c 	.word	0x0800a99c

080049f0 <transceive>:
static int transceive(const struct device *dev,
		      const struct spi_config *config,
		      const struct spi_buf_set *tx_bufs,
		      const struct spi_buf_set *rx_bufs,
		      bool asynchronous, struct k_poll_signal *signal)
{
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	4605      	mov	r5, r0
 80049f6:	460e      	mov	r6, r1
 80049f8:	4698      	mov	r8, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 80049fa:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 80049fc:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 80049fe:	689f      	ldr	r7, [r3, #8]
	int ret;

	if (!tx_bufs && !rx_bufs) {
 8004a00:	4691      	mov	r9, r2
 8004a02:	b1fa      	cbz	r2, 8004a44 <transceive+0x54>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8004a04:	88b3      	ldrh	r3, [r6, #4]
 8004a06:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004a0a:	d004      	beq.n	8004a16 <transceive+0x26>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	b913      	cbnz	r3, 8004a16 <transceive+0x26>
		(ctx->owner == spi_cfg)) {
 8004a10:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8004a12:	429e      	cmp	r6, r3
 8004a14:	d008      	beq.n	8004a28 <transceive+0x38>
	k_sem_take(&ctx->lock, K_FOREVER);
 8004a16:	f104 0008 	add.w	r0, r4, #8
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a22:	f001 f899 	bl	8005b58 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8004a26:	6066      	str	r6, [r4, #4]
	}
#endif

	spi_context_lock(&data->ctx, asynchronous, signal, config);

	ret = spi_stm32_configure(dev, config);
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f7ff fe6e 	bl	800470c <spi_stm32_configure>
	if (ret) {
 8004a30:	4606      	mov	r6, r0
 8004a32:	b160      	cbz	r0, 8004a4e <transceive+0x5e>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	889b      	ldrh	r3, [r3, #4]
 8004a38:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004a3c:	d07b      	beq.n	8004b36 <transceive+0x146>

end:
	spi_context_release(&data->ctx, ret);

	return ret;
}
 8004a3e:	4630      	mov	r0, r6
 8004a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8004a44:	f1b8 0f00 	cmp.w	r8, #0
 8004a48:	d1dc      	bne.n	8004a04 <transceive+0x14>
		return 0;
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	e7f7      	b.n	8004a3e <transceive+0x4e>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8004a4e:	f1b9 0f00 	cmp.w	r9, #0
 8004a52:	d01e      	beq.n	8004a92 <transceive+0xa2>
		ctx->current_tx = tx_bufs->buffers;
 8004a54:	f8d9 3000 	ldr.w	r3, [r9]
 8004a58:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
 8004a5a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004a5e:	6322      	str	r2, [r4, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	63e2      	str	r2, [r4, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8004a68:	f1b8 0f00 	cmp.w	r8, #0
 8004a6c:	d017      	beq.n	8004a9e <transceive+0xae>
		ctx->current_rx = rx_bufs->buffers;
 8004a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a72:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
 8004a74:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004a78:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	62a3      	str	r3, [r4, #40]	; 0x28
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f013 0f01 	tst.w	r3, #1
 8004a8c:	d00d      	beq.n	8004aaa <transceive+0xba>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	e7f9      	b.n	8004a86 <transceive+0x96>
		ctx->current_tx = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	62e3      	str	r3, [r4, #44]	; 0x2c
		ctx->tx_count = 0;
 8004a96:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->tx_buf = NULL;
 8004a98:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
 8004a9a:	6423      	str	r3, [r4, #64]	; 0x40
 8004a9c:	e7e4      	b.n	8004a68 <transceive+0x78>
		ctx->current_rx = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6363      	str	r3, [r4, #52]	; 0x34
		ctx->rx_count = 0;
 8004aa2:	63a3      	str	r3, [r4, #56]	; 0x38
		ctx->rx_buf = NULL;
 8004aa4:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_len = 0;
 8004aa6:	64a3      	str	r3, [r4, #72]	; 0x48
 8004aa8:	e7eb      	b.n	8004a82 <transceive+0x92>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f004 f8ff 	bl	8008cb8 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	607b      	str	r3, [r7, #4]
	if (rx_bufs) {
 8004ac2:	f1b8 0f00 	cmp.w	r8, #0
 8004ac6:	d003      	beq.n	8004ad0 <transceive+0xe0>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ace:	607b      	str	r3, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	607b      	str	r3, [r7, #4]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8004ad8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf38      	it	cc
 8004ae0:	461a      	movcc	r2, r3
 8004ae2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004ae6:	fb03 f202 	mul.w	r2, r3, r2
		     ctx->config->frequency;
 8004aea:	4620      	mov	r0, r4
 8004aec:	f850 3b18 	ldr.w	r3, [r0], #24
 8004af0:	681b      	ldr	r3, [r3, #0]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8004af2:	fbb2 f2f3 	udiv	r2, r2, r3
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8004af6:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8004af8:	0f91      	lsrs	r1, r2, #30
 8004afa:	0093      	lsls	r3, r2, #2
 8004afc:	189a      	adds	r2, r3, r2
 8004afe:	f141 0300 	adc.w	r3, r1, #0
 8004b02:	1892      	adds	r2, r2, r2
 8004b04:	415b      	adcs	r3, r3
 8004b06:	f001 f827 	bl	8005b58 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
 8004b0a:	b908      	cbnz	r0, 8004b10 <transceive+0x120>
	status = ctx->sync_status;
 8004b0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	return status;
 8004b0e:	e791      	b.n	8004a34 <transceive+0x44>
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <transceive+0x154>)
 8004b12:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <transceive+0x158>)
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f362 0102 	bfi	r1, r2, #0, #3
 8004b22:	f36f 01c5 	bfc	r1, #3, #3
 8004b26:	f363 118f 	bfi	r1, r3, #6, #10
 8004b2a:	4808      	ldr	r0, [pc, #32]	; (8004b4c <transceive+0x15c>)
 8004b2c:	f7fe f87a 	bl	8002c24 <log_0>
		return -ETIMEDOUT;
 8004b30:	f06f 0673 	mvn.w	r6, #115	; 0x73
 8004b34:	e77e      	b.n	8004a34 <transceive+0x44>
		ctx->owner = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8004b3a:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 8004b3e:	f000 ffe9 	bl	8005b14 <z_impl_k_sem_give>
}
 8004b42:	e77c      	b.n	8004a3e <transceive+0x4e>
 8004b44:	0800a020 	.word	0x0800a020
 8004b48:	0800a000 	.word	0x0800a000
 8004b4c:	0800a9a8 	.word	0x0800a9a8

08004b50 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8004b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b54:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8004b56:	6907      	ldr	r7, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8004b58:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8004b5c:	4839      	ldr	r0, [pc, #228]	; (8004c44 <spi_stm32_init+0xf4>)
 8004b5e:	f004 fa35 	bl	8008fcc <z_device_ready>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d035      	beq.n	8004bd2 <spi_stm32_init+0x82>
	const struct clock_control_driver_api *api =
 8004b66:	4837      	ldr	r0, [pc, #220]	; (8004c44 <spi_stm32_init+0xf4>)
 8004b68:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4641      	mov	r1, r8
 8004b6e:	4798      	blx	r3
 8004b70:	4605      	mov	r5, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	d130      	bne.n	8004bd8 <spi_stm32_init+0x88>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8004b76:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8004b7a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004b7e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004b82:	f003 fc49 	bl	8008418 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 8004b86:	1e06      	subs	r6, r0, #0
 8004b88:	db39      	blt.n	8004bfe <spi_stm32_init+0xae>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
		return err;
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8004b8a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4798      	blx	r3
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b1c3      	cbz	r3, 8004bc8 <spi_stm32_init+0x78>
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	b1b3      	cbz	r3, 8004bc8 <spi_stm32_init+0x78>
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	b1a2      	cbz	r2, 8004bc8 <spi_stm32_init+0x78>
			k_busy_wait(ctx->config->cs->delay);
 8004b9e:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8004ba0:	f001 fc5a 	bl	8006458 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	7a19      	ldrb	r1, [r3, #8]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 8004bac:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	408b      	lsls	r3, r1
 8004bb4:	421a      	tst	r2, r3
 8004bb6:	d135      	bne.n	8004c24 <spi_stm32_init+0xd4>
 8004bb8:	462b      	mov	r3, r5
	if (value != 0)	{
 8004bba:	b3ab      	cbz	r3, 8004c28 <spi_stm32_init+0xd8>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8004bc2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4798      	blx	r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 8004bca:	b3a3      	cbz	r3, 8004c36 <spi_stm32_init+0xe6>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8004bcc:	4628      	mov	r0, r5
 8004bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd2:	f06f 0512 	mvn.w	r5, #18
 8004bd6:	e7cc      	b.n	8004b72 <spi_stm32_init+0x22>
 8004bd8:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <spi_stm32_init+0xf8>)
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <spi_stm32_init+0xfc>)
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not enable SPI clock");
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	2201      	movs	r2, #1
 8004be6:	f362 0102 	bfi	r1, r2, #0, #3
 8004bea:	f36f 01c5 	bfc	r1, #3, #3
 8004bee:	f363 118f 	bfi	r1, r3, #6, #10
 8004bf2:	4817      	ldr	r0, [pc, #92]	; (8004c50 <spi_stm32_init+0x100>)
 8004bf4:	f7fe f816 	bl	8002c24 <log_0>
		return -EIO;
 8004bf8:	f06f 0504 	mvn.w	r5, #4
 8004bfc:	e7e6      	b.n	8004bcc <spi_stm32_init+0x7c>
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <spi_stm32_init+0xf8>)
 8004c00:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <spi_stm32_init+0xfc>)
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	f361 0202 	bfi	r2, r1, #0, #3
 8004c10:	f36f 02c5 	bfc	r2, #3, #3
 8004c14:	f363 128f 	bfi	r2, r3, #6, #10
 8004c18:	4631      	mov	r1, r6
 8004c1a:	480e      	ldr	r0, [pc, #56]	; (8004c54 <spi_stm32_init+0x104>)
 8004c1c:	f7fe f82c 	bl	8002c78 <log_1>
		return err;
 8004c20:	4635      	mov	r5, r6
 8004c22:	e7d3      	b.n	8004bcc <spi_stm32_init+0x7c>
		value = (value != 0) ? 0 : 1;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e7c8      	b.n	8004bba <spi_stm32_init+0x6a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8004c28:	2301      	movs	r3, #1
 8004c2a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8004c2e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4798      	blx	r3
	}

	return gpio_pin_set_raw(port, pin, value);
 8004c34:	e7c8      	b.n	8004bc8 <spi_stm32_init+0x78>
		ctx->owner = NULL;
 8004c36:	607b      	str	r3, [r7, #4]
		k_sem_give(&ctx->lock);
 8004c38:	f107 0008 	add.w	r0, r7, #8
	z_impl_k_sem_give(sem);
 8004c3c:	f000 ff6a 	bl	8005b14 <z_impl_k_sem_give>
}
 8004c40:	e7c4      	b.n	8004bcc <spi_stm32_init+0x7c>
 8004c42:	bf00      	nop
 8004c44:	08009c48 	.word	0x08009c48
 8004c48:	0800a020 	.word	0x0800a020
 8004c4c:	0800a000 	.word	0x0800a000
 8004c50:	0800a9d0 	.word	0x0800a9d0
 8004c54:	0800a9ec 	.word	0x0800a9ec

08004c58 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004c60:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004c62:	6843      	ldr	r3, [r0, #4]
 8004c64:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8004c66:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8004c68:	2a01      	cmp	r2, #1
 8004c6a:	d015      	beq.n	8004c98 <uart_stm32_configure+0x40>
 8004c6c:	2a02      	cmp	r2, #2
 8004c6e:	d116      	bne.n	8004c9e <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8004c70:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8004c74:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d017      	beq.n	8004caa <uart_stm32_configure+0x52>
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d018      	beq.n	8004cb0 <uart_stm32_configure+0x58>
 8004c7e:	b18b      	cbz	r3, 8004ca4 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8004c80:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8004c84:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 8004c86:	2902      	cmp	r1, #2
 8004c88:	d015      	beq.n	8004cb6 <uart_stm32_configure+0x5e>
 8004c8a:	2904      	cmp	r1, #4
 8004c8c:	d019      	beq.n	8004cc2 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8004c8e:	2a00      	cmp	r2, #0
 8004c90:	f040 8097 	bne.w	8004dc2 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8004c94:	2700      	movs	r7, #0
 8004c96:	e016      	b.n	8004cc6 <uart_stm32_configure+0x6e>
	switch (parity) {
 8004c98:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8004c9c:	e7ea      	b.n	8004c74 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8004c9e:	f04f 0e00 	mov.w	lr, #0
 8004ca2:	e7e7      	b.n	8004c74 <uart_stm32_configure+0x1c>
	switch (sb) {
 8004ca4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8004ca8:	e7ec      	b.n	8004c84 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 8004caa:	f04f 0c00 	mov.w	ip, #0
 8004cae:	e7e9      	b.n	8004c84 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8004cb0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8004cb4:	e7e6      	b.n	8004c84 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 8004cb6:	b10a      	cbz	r2, 8004cbc <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 8004cb8:	2700      	movs	r7, #0
 8004cba:	e004      	b.n	8004cc6 <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8004cbc:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8004cc0:	e001      	b.n	8004cc6 <uart_stm32_configure+0x6e>
	switch (db) {
 8004cc2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8004cc6:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8004cca:	f1ba 0f01 	cmp.w	sl, #1
 8004cce:	d07b      	beq.n	8004dc8 <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8004cd0:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8004cd4:	f1a2 0903 	sub.w	r9, r2, #3
 8004cd8:	fa5f f989 	uxtb.w	r9, r9
 8004cdc:	f1b9 0f01 	cmp.w	r9, #1
 8004ce0:	f240 80af 	bls.w	8004e42 <uart_stm32_configure+0x1ea>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8004ce4:	b112      	cbz	r2, 8004cec <uart_stm32_configure+0x94>
 8004ce6:	2904      	cmp	r1, #4
 8004ce8:	f000 80ae 	beq.w	8004e48 <uart_stm32_configure+0x1f0>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80ae 	beq.w	8004e4e <uart_stm32_configure+0x1f6>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	f000 80ae 	beq.w	8004e54 <uart_stm32_configure+0x1fc>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8004cf8:	2901      	cmp	r1, #1
 8004cfa:	f240 80ae 	bls.w	8004e5a <uart_stm32_configure+0x202>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8004cfe:	2904      	cmp	r1, #4
 8004d00:	f000 80ae 	beq.w	8004e60 <uart_stm32_configure+0x208>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8004d04:	f1ba 0f00 	cmp.w	sl, #0
 8004d08:	d017      	beq.n	8004d3a <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004d0a:	4b5a      	ldr	r3, [pc, #360]	; (8004e74 <uart_stm32_configure+0x21c>)
 8004d0c:	429d      	cmp	r5, r3
 8004d0e:	d010      	beq.n	8004d32 <uart_stm32_configure+0xda>
 8004d10:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8004d14:	429d      	cmp	r5, r3
 8004d16:	d00c      	beq.n	8004d32 <uart_stm32_configure+0xda>
 8004d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1c:	429d      	cmp	r5, r3
 8004d1e:	d008      	beq.n	8004d32 <uart_stm32_configure+0xda>
 8004d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d24:	429d      	cmp	r5, r3
 8004d26:	d004      	beq.n	8004d32 <uart_stm32_configure+0xda>
 8004d28:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8004d2c:	429d      	cmp	r5, r3
 8004d2e:	f040 809a 	bne.w	8004e66 <uart_stm32_configure+0x20e>
 8004d32:	f1ba 0f01 	cmp.w	sl, #1
 8004d36:	f040 8099 	bne.w	8004e6c <uart_stm32_configure+0x214>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d42:	6843      	ldr	r3, [r0, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8004d4c:	459e      	cmp	lr, r3
 8004d4e:	d005      	beq.n	8004d5c <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d56:	ea4e 0303 	orr.w	r3, lr, r3
 8004d5a:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d5c:	6843      	ldr	r3, [r0, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004d60:	6853      	ldr	r3, [r2, #4]
 8004d62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8004d66:	459c      	cmp	ip, r3
 8004d68:	d005      	beq.n	8004d76 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d6a:	6853      	ldr	r3, [r2, #4]
 8004d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d70:	ea4c 0303 	orr.w	r3, ip, r3
 8004d74:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d76:	6843      	ldr	r3, [r0, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8004d80:	429f      	cmp	r7, r3
 8004d82:	d004      	beq.n	8004d8e <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8004d8a:	431f      	orrs	r7, r3
 8004d8c:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004d8e:	6843      	ldr	r3, [r0, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004d92:	6893      	ldr	r3, [r2, #8]
 8004d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8004d98:	4598      	cmp	r8, r3
 8004d9a:	d005      	beq.n	8004da8 <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d9c:	6893      	ldr	r3, [r2, #8]
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da2:	ea48 0303 	orr.w	r3, r8, r3
 8004da6:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8004da8:	f8d4 8000 	ldr.w	r8, [r4]
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	4598      	cmp	r8, r3
 8004db0:	d10d      	bne.n	8004dce <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8004dba:	2000      	movs	r0, #0
};
 8004dbc:	b002      	add	sp, #8
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8004dc2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8004dc6:	e77e      	b.n	8004cc6 <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 8004dc8:	f44f 7840 	mov.w	r8, #768	; 0x300
 8004dcc:	e782      	b.n	8004cd4 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004dce:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004dd0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8004dd4:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 8004dd8:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8004ddc:	4650      	mov	r0, sl
 8004dde:	f004 f8f5 	bl	8008fcc <z_device_ready>
 8004de2:	b1b8      	cbz	r0, 8004e14 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8004de4:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	b1b3      	cbz	r3, 8004e1a <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8004dec:	aa01      	add	r2, sp, #4
 8004dee:	4649      	mov	r1, r9
 8004df0:	4650      	mov	r0, sl
 8004df2:	4798      	blx	r3
 8004df4:	2800      	cmp	r0, #0
 8004df6:	db13      	blt.n	8004e20 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dfe:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8004e06:	fbb3 f3f8 	udiv	r3, r3, r8
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	e7ce      	b.n	8004db2 <uart_stm32_configure+0x15a>
 8004e14:	f06f 0012 	mvn.w	r0, #18
 8004e18:	e7ec      	b.n	8004df4 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 8004e1a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004e1e:	e7e9      	b.n	8004df4 <uart_stm32_configure+0x19c>
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <uart_stm32_configure+0x220>)
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <uart_stm32_configure+0x224>)
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f362 0102 	bfi	r1, r2, #0, #3
 8004e32:	f36f 01c5 	bfc	r1, #3, #3
 8004e36:	f363 118f 	bfi	r1, r3, #6, #10
 8004e3a:	4811      	ldr	r0, [pc, #68]	; (8004e80 <uart_stm32_configure+0x228>)
 8004e3c:	f7fd fef2 	bl	8002c24 <log_0>
		return;
 8004e40:	e7e5      	b.n	8004e0e <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 8004e42:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e46:	e7b9      	b.n	8004dbc <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8004e48:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e4c:	e7b6      	b.n	8004dbc <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8004e4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e52:	e7b3      	b.n	8004dbc <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8004e54:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e58:	e7b0      	b.n	8004dbc <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8004e5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e5e:	e7ad      	b.n	8004dbc <uart_stm32_configure+0x164>
 8004e60:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e64:	e7aa      	b.n	8004dbc <uart_stm32_configure+0x164>
			return -ENOTSUP;
 8004e66:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e6a:	e7a7      	b.n	8004dbc <uart_stm32_configure+0x164>
 8004e6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e70:	e7a4      	b.n	8004dbc <uart_stm32_configure+0x164>
 8004e72:	bf00      	nop
 8004e74:	40013800 	.word	0x40013800
 8004e78:	0800a028 	.word	0x0800a028
 8004e7c:	0800a000 	.word	0x0800a000
 8004e80:	0800a920 	.word	0x0800a920

08004e84 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8004e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004e8c:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004e8e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004e92:	4637      	mov	r7, r6
 8004e94:	f857 4b08 	ldr.w	r4, [r7], #8
	data->clock = clk;
 8004e98:	4854      	ldr	r0, [pc, #336]	; (8004fec <uart_stm32_init+0x168>)
 8004e9a:	f8c8 0004 	str.w	r0, [r8, #4]
 8004e9e:	f004 f895 	bl	8008fcc <z_device_ready>
 8004ea2:	b310      	cbz	r0, 8004eea <uart_stm32_init+0x66>
	const struct clock_control_driver_api *api =
 8004ea4:	4851      	ldr	r0, [pc, #324]	; (8004fec <uart_stm32_init+0x168>)
 8004ea6:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4639      	mov	r1, r7
 8004eac:	4798      	blx	r3
 8004eae:	4607      	mov	r7, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8004eb0:	2f00      	cmp	r7, #0
 8004eb2:	f040 8095 	bne.w	8004fe0 <uart_stm32_init+0x15c>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8004eb6:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	69f1      	ldr	r1, [r6, #28]
 8004ebc:	69b0      	ldr	r0, [r6, #24]
 8004ebe:	f003 faab 	bl	8008418 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	f2c0 808f 	blt.w	8004fe6 <uart_stm32_init+0x162>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	f043 030c 	orr.w	r3, r3, #12
 8004ed6:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8004ed8:	6971      	ldr	r1, [r6, #20]
 8004eda:	2902      	cmp	r1, #2
 8004edc:	d01b      	beq.n	8004f16 <uart_stm32_init+0x92>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8004ede:	2901      	cmp	r1, #1
 8004ee0:	d062      	beq.n	8004fa8 <uart_stm32_init+0x124>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8004ee2:	b929      	cbnz	r1, 8004ef0 <uart_stm32_init+0x6c>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8004ee4:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	e019      	b.n	8004f1e <uart_stm32_init+0x9a>
 8004eea:	f06f 0712 	mvn.w	r7, #18
 8004eee:	e7df      	b.n	8004eb0 <uart_stm32_init+0x2c>
 8004ef0:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <uart_stm32_init+0x16c>)
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <uart_stm32_init+0x170>)
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Invalid parity setting '%d'."
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	2002      	movs	r0, #2
 8004efe:	f360 0202 	bfi	r2, r0, #0, #3
 8004f02:	f36f 02c5 	bfc	r2, #3, #3
 8004f06:	f363 128f 	bfi	r2, r3, #6, #10
 8004f0a:	483b      	ldr	r0, [pc, #236]	; (8004ff8 <uart_stm32_init+0x174>)
 8004f0c:	f7fd feb4 	bl	8002c78 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8004f10:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8004f12:	4619      	mov	r1, r3
 8004f14:	e003      	b.n	8004f1e <uart_stm32_init+0x9a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8004f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8004f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f24:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f2e:	6863      	ldr	r3, [r4, #4]
 8004f30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f34:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8004f36:	7c33      	ldrb	r3, [r6, #16]
 8004f38:	b12b      	cbz	r3, 8004f46 <uart_stm32_init+0xc2>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f3a:	686b      	ldr	r3, [r5, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f3e:	6893      	ldr	r3, [r2, #8]
 8004f40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f44:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8004f46:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004f4a:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004f4c:	686d      	ldr	r5, [r5, #4]
 8004f4e:	f855 6b08 	ldr.w	r6, [r5], #8
	if (clock_control_get_rate(data->clock,
 8004f52:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004f56:	4648      	mov	r0, r9
 8004f58:	f004 f838 	bl	8008fcc <z_device_ready>
 8004f5c:	b348      	cbz	r0, 8004fb2 <uart_stm32_init+0x12e>
	const struct clock_control_driver_api *api =
 8004f5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	b343      	cbz	r3, 8004fb8 <uart_stm32_init+0x134>
	return api->get_rate(dev, sys, rate);
 8004f66:	aa01      	add	r2, sp, #4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4648      	mov	r0, r9
 8004f6c:	4798      	blx	r3
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	db25      	blt.n	8004fbe <uart_stm32_init+0x13a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8004f72:	6833      	ldr	r3, [r6, #0]
 8004f74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f78:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8004f80:	fbb3 f3f8 	udiv	r3, r3, r8
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	60f3      	str	r3, [r6, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8004f90:	69e3      	ldr	r3, [r4, #28]
 8004f92:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004f96:	d0fb      	beq.n	8004f90 <uart_stm32_init+0x10c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8004f98:	69e3      	ldr	r3, [r4, #28]
 8004f9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004f9e:	d0fb      	beq.n	8004f98 <uart_stm32_init+0x114>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	b003      	add	sp, #12
 8004fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8004fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8004fac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fb0:	e7b5      	b.n	8004f1e <uart_stm32_init+0x9a>
 8004fb2:	f06f 0012 	mvn.w	r0, #18
 8004fb6:	e7da      	b.n	8004f6e <uart_stm32_init+0xea>
		return -ENOSYS;
 8004fb8:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004fbc:	e7d7      	b.n	8004f6e <uart_stm32_init+0xea>
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <uart_stm32_init+0x16c>)
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <uart_stm32_init+0x170>)
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f362 0102 	bfi	r1, r2, #0, #3
 8004fd0:	f36f 01c5 	bfc	r1, #3, #3
 8004fd4:	f363 118f 	bfi	r1, r3, #6, #10
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <uart_stm32_init+0x178>)
 8004fda:	f7fd fe23 	bl	8002c24 <log_0>
		return;
 8004fde:	e7d3      	b.n	8004f88 <uart_stm32_init+0x104>
		return -EIO;
 8004fe0:	f06f 0704 	mvn.w	r7, #4
 8004fe4:	e7dc      	b.n	8004fa0 <uart_stm32_init+0x11c>
		return err;
 8004fe6:	4607      	mov	r7, r0
 8004fe8:	e7da      	b.n	8004fa0 <uart_stm32_init+0x11c>
 8004fea:	bf00      	nop
 8004fec:	08009c48 	.word	0x08009c48
 8004ff0:	0800a028 	.word	0x0800a028
 8004ff4:	0800a000 	.word	0x0800a000
 8004ff8:	0800aa70 	.word	0x0800aa70
 8004ffc:	0800a920 	.word	0x0800a920

08005000 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8005000:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005004:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005006:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005008:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800500a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800500e:	d101      	bne.n	8005014 <elapsed+0x14>
	    || (val1 < val2)) {
 8005010:	4281      	cmp	r1, r0
 8005012:	d208      	bcs.n	8005026 <elapsed+0x26>
		overflow_cyc += last_load;
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <elapsed+0x34>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <elapsed+0x38>)
 800501a:	6809      	ldr	r1, [r1, #0]
 800501c:	440a      	add	r2, r1
 800501e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8005020:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005024:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <elapsed+0x38>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	1a1b      	subs	r3, r3, r0
 800502c:	4a01      	ldr	r2, [pc, #4]	; (8005034 <elapsed+0x34>)
 800502e:	6810      	ldr	r0, [r2, #0]
}
 8005030:	4418      	add	r0, r3
 8005032:	4770      	bx	lr
 8005034:	20000618 	.word	0x20000618
 8005038:	20000614 	.word	0x20000614

0800503c <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 800503c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800503e:	f7ff ffdf 	bl	8005000 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <sys_clock_isr+0x38>)
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <sys_clock_isr+0x3c>)
 8005048:	6811      	ldr	r1, [r2, #0]
 800504a:	4408      	add	r0, r1
 800504c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <sys_clock_isr+0x40>)
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	1ac0      	subs	r0, r0, r3
 8005058:	4909      	ldr	r1, [pc, #36]	; (8005080 <sys_clock_isr+0x44>)
 800505a:	fba1 1000 	umull	r1, r0, r1, r0
 800505e:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8005060:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8005064:	fb01 3300 	mla	r3, r1, r0, r3
 8005068:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800506a:	f001 f973 	bl	8006354 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 800506e:	f7fe fb23 	bl	80036b8 <z_arm_exc_exit>
}
 8005072:	bd08      	pop	{r3, pc}
 8005074:	20000618 	.word	0x20000618
 8005078:	20000610 	.word	0x20000610
 800507c:	2000060c 	.word	0x2000060c
 8005080:	10624dd3 	.word	0x10624dd3

08005084 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <sys_clock_driver_init+0x28>)
 8005086:	2210      	movs	r2, #16
 8005088:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800508c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <sys_clock_driver_init+0x2c>)
 8005092:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8005094:	2000      	movs	r0, #0
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <sys_clock_driver_init+0x30>)
 8005098:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800509a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800509e:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80050a0:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	f042 0207 	orr.w	r2, r2, #7
 80050a8:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80050aa:	4770      	bx	lr
 80050ac:	e000ed00 	.word	0xe000ed00
 80050b0:	20000614 	.word	0x20000614
 80050b4:	20000618 	.word	0x20000618

080050b8 <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80050b8:	b111      	cbz	r1, 80050c0 <sys_clock_set_timeout+0x8>
 80050ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050be:	d00e      	beq.n	80050de <sys_clock_set_timeout+0x26>
{
 80050c0:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 80050c2:	4b37      	ldr	r3, [pc, #220]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 80050c4:	681c      	ldr	r4, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80050c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050ca:	d013      	beq.n	80050f4 <sys_clock_set_timeout+0x3c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80050cc:	1e46      	subs	r6, r0, #1
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	dd13      	ble.n	80050fa <sys_clock_set_timeout+0x42>
 80050d2:	f5b6 6f03 	cmp.w	r6, #2096	; 0x830
 80050d6:	db11      	blt.n	80050fc <sys_clock_set_timeout+0x44>
 80050d8:	f44f 6603 	mov.w	r6, #2096	; 0x830
 80050dc:	e00e      	b.n	80050fc <sys_clock_set_timeout+0x44>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80050de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80050e2:	6913      	ldr	r3, [r2, #16]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80050ea:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 80050ec:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80050f0:	601a      	str	r2, [r3, #0]
		return;
 80050f2:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80050f4:	f44f 6003 	mov.w	r0, #2096	; 0x830
 80050f8:	e7e8      	b.n	80050cc <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80050fa:	2600      	movs	r6, #0
	__asm__ volatile(
 80050fc:	f04f 0310 	mov.w	r3, #16
 8005100:	f3ef 8511 	mrs	r5, BASEPRI
 8005104:	f383 8812 	msr	BASEPRI_MAX, r3
 8005108:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 800510c:	f7ff ff78 	bl	8005000 <elapsed>

	val1 = SysTick->VAL;
 8005110:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005114:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 8005116:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <sys_clock_set_timeout+0xec>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4410      	add	r0, r2
 800511c:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <sys_clock_set_timeout+0xf0>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <sys_clock_set_timeout+0xf4>)
 8005126:	681a      	ldr	r2, [r3, #0]

	if ((int32_t)unannounced < 0) {
 8005128:	1a83      	subs	r3, r0, r2
 800512a:	d416      	bmi.n	800515a <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 800512c:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40

		/* Round delay up to next tick boundary */
		delay += unannounced;
 8005130:	fb0c 3306 	mla	r3, ip, r6, r3
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005134:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8005138:	331f      	adds	r3, #31
 800513a:	4e1d      	ldr	r6, [pc, #116]	; (80051b0 <sys_clock_set_timeout+0xf8>)
 800513c:	fba6 6303 	umull	r6, r3, r6, r3
 8005140:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8005142:	1a12      	subs	r2, r2, r0
 8005144:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8005148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514c:	d90a      	bls.n	8005164 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 800514e:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <sys_clock_set_timeout+0xfc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d909      	bls.n	8005168 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e008      	b.n	800516c <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 800515c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e003      	b.n	800516c <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 8005168:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 800516a:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 800516c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005170:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 8005172:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <sys_clock_set_timeout+0xe8>)
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	3a01      	subs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 800517e:	42b1      	cmp	r1, r6
 8005180:	d209      	bcs.n	8005196 <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 8005182:	1ba4      	subs	r4, r4, r6
 8005184:	440c      	add	r4, r1
 8005186:	4420      	add	r0, r4
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <sys_clock_set_timeout+0xec>)
 800518a:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 800518c:	f385 8811 	msr	BASEPRI, r5
 8005190:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8005194:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8005196:	1b8c      	subs	r4, r1, r6
 8005198:	4420      	add	r0, r4
 800519a:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <sys_clock_set_timeout+0xec>)
 800519c:	6018      	str	r0, [r3, #0]
 800519e:	e7f5      	b.n	800518c <sys_clock_set_timeout+0xd4>
 80051a0:	20000614 	.word	0x20000614
 80051a4:	20000610 	.word	0x20000610
 80051a8:	20000618 	.word	0x20000618
 80051ac:	2000060c 	.word	0x2000060c
 80051b0:	10624dd3 	.word	0x10624dd3
 80051b4:	00ffdc00 	.word	0x00ffdc00

080051b8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 80051b8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80051ba:	f04f 0310 	mov.w	r3, #16
 80051be:	f3ef 8411 	mrs	r4, BASEPRI
 80051c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80051c6:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80051ca:	f7ff ff19 	bl	8005000 <elapsed>
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <sys_clock_elapsed+0x34>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4418      	add	r0, r3
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <sys_clock_elapsed+0x38>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 80051da:	f384 8811 	msr	BASEPRI, r4
 80051de:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <sys_clock_elapsed+0x3c>)
 80051e4:	fba3 3000 	umull	r3, r0, r3, r0
}
 80051e8:	0a40      	lsrs	r0, r0, #9
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	20000610 	.word	0x20000610
 80051f0:	2000060c 	.word	0x2000060c
 80051f4:	10624dd3 	.word	0x10624dd3

080051f8 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 80051f8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80051fa:	f04f 0310 	mov.w	r3, #16
 80051fe:	f3ef 8411 	mrs	r4, BASEPRI
 8005202:	f383 8812 	msr	BASEPRI_MAX, r3
 8005206:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 800520a:	f7ff fef9 	bl	8005000 <elapsed>
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <sys_clock_cycle_get_32+0x28>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4418      	add	r0, r3
	__asm__ volatile(
 8005214:	f384 8811 	msr	BASEPRI, r4
 8005218:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	20000610 	.word	0x20000610

08005224 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <UTILS_PLL_IsBusy+0x20>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800522c:	d007      	beq.n	800523e <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800522e:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005230:	4b04      	ldr	r3, [pc, #16]	; (8005244 <UTILS_PLL_IsBusy+0x20>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005238:	d000      	beq.n	800523c <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800523a:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800523c:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800523e:	2000      	movs	r0, #0
 8005240:	e7f6      	b.n	8005230 <UTILS_PLL_IsBusy+0xc>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000

08005248 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8005248:	4b01      	ldr	r3, [pc, #4]	; (8005250 <LL_SetSystemCoreClock+0x8>)
 800524a:	6018      	str	r0, [r3, #0]
}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000078 	.word	0x20000078

08005254 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8005254:	1e42      	subs	r2, r0, #1
 8005256:	4b29      	ldr	r3, [pc, #164]	; (80052fc <LL_SetFlashLatency+0xa8>)
 8005258:	429a      	cmp	r2, r3
 800525a:	d84c      	bhi.n	80052f6 <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800525c:	4b28      	ldr	r3, [pc, #160]	; (8005300 <LL_SetFlashLatency+0xac>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d011      	beq.n	800528e <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <LL_SetFlashLatency+0xb0>)
 800526c:	4298      	cmp	r0, r3
 800526e:	d829      	bhi.n	80052c4 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8005270:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8005274:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8005278:	4298      	cmp	r0, r3
 800527a:	d832      	bhi.n	80052e2 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800527c:	4b22      	ldr	r3, [pc, #136]	; (8005308 <LL_SetFlashLatency+0xb4>)
 800527e:	4298      	cmp	r0, r3
 8005280:	d832      	bhi.n	80052e8 <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <LL_SetFlashLatency+0xb8>)
 8005284:	4298      	cmp	r0, r3
 8005286:	d832      	bhi.n	80052ee <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005288:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800528a:	4608      	mov	r0, r1
 800528c:	e01c      	b.n	80052c8 <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <LL_SetFlashLatency+0xbc>)
 8005290:	4298      	cmp	r0, r3
 8005292:	d80b      	bhi.n	80052ac <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <LL_SetFlashLatency+0xc0>)
 8005296:	4298      	cmp	r0, r3
 8005298:	d80b      	bhi.n	80052b2 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <LL_SetFlashLatency+0xc4>)
 800529c:	4298      	cmp	r0, r3
 800529e:	d80b      	bhi.n	80052b8 <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <LL_SetFlashLatency+0xc8>)
 80052a2:	4298      	cmp	r0, r3
 80052a4:	d80b      	bhi.n	80052be <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80052a6:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 80052a8:	4608      	mov	r0, r1
 80052aa:	e00d      	b.n	80052c8 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 80052ac:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 80052ae:	2000      	movs	r0, #0
 80052b0:	e00a      	b.n	80052c8 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 80052b2:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 80052b4:	2000      	movs	r0, #0
 80052b6:	e007      	b.n	80052c8 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 80052b8:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 80052ba:	2000      	movs	r0, #0
 80052bc:	e004      	b.n	80052c8 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 80052be:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 80052c0:	2000      	movs	r0, #0
 80052c2:	e001      	b.n	80052c8 <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80052c4:	2100      	movs	r1, #0
        status = ERROR;
 80052c6:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <LL_SetFlashLatency+0xcc>)
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80052d4:	6813      	ldr	r3, [r2, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 80052da:	4299      	cmp	r1, r3
 80052dc:	d00a      	beq.n	80052f4 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 80052de:	2001      	movs	r0, #1
}
 80052e0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80052e2:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 80052e4:	2000      	movs	r0, #0
 80052e6:	e7ef      	b.n	80052c8 <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 80052e8:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 80052ea:	2000      	movs	r0, #0
 80052ec:	e7ec      	b.n	80052c8 <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 80052ee:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 80052f0:	2000      	movs	r0, #0
 80052f2:	e7e9      	b.n	80052c8 <LL_SetFlashLatency+0x74>
 80052f4:	4770      	bx	lr
    status = ERROR;
 80052f6:	2001      	movs	r0, #1
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	04c4b3ff 	.word	0x04c4b3ff
 8005300:	40007000 	.word	0x40007000
 8005304:	018cba80 	.word	0x018cba80
 8005308:	00b71b00 	.word	0x00b71b00
 800530c:	005b8d80 	.word	0x005b8d80
 8005310:	03d09000 	.word	0x03d09000
 8005314:	02dc6c00 	.word	0x02dc6c00
 8005318:	01e84800 	.word	0x01e84800
 800531c:	00f42400 	.word	0x00f42400
 8005320:	40022000 	.word	0x40022000

08005324 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005328:	680b      	ldr	r3, [r1, #0]
 800532a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800532e:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8005336:	4b25      	ldr	r3, [pc, #148]	; (80053cc <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	42ab      	cmp	r3, r5
 800533c:	d333      	bcc.n	80053a6 <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800533e:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005348:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005350:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005352:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800535a:	d0fa      	beq.n	8005352 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800535c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005360:	6899      	ldr	r1, [r3, #8]
 8005362:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	f042 0203 	orr.w	r2, r2, #3
 8005370:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d1f9      	bne.n	8005372 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800537e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8005382:	6899      	ldr	r1, [r3, #8]
 8005384:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800538c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800538e:	6899      	ldr	r1, [r3, #8]
 8005390:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	42ab      	cmp	r3, r5
 800539e:	d809      	bhi.n	80053b4 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80053a0:	b16e      	cbz	r6, 80053be <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80053a2:	4630      	mov	r0, r6
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7ff ff54 	bl	8005254 <LL_SetFlashLatency>
  if(status == SUCCESS)
 80053ac:	4606      	mov	r6, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d1f2      	bne.n	8005398 <UTILS_EnablePLLAndSwitchSystem+0x74>
 80053b2:	e7c5      	b.n	8005340 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 80053b4:	4628      	mov	r0, r5
 80053b6:	f7ff ff4d 	bl	8005254 <LL_SetFlashLatency>
 80053ba:	4606      	mov	r6, r0
 80053bc:	e7f0      	b.n	80053a0 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 80053be:	4628      	mov	r0, r5
 80053c0:	f7ff ff42 	bl	8005248 <LL_SetSystemCoreClock>
 80053c4:	e7ed      	b.n	80053a2 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 80053c6:	bf00      	nop
 80053c8:	0800ab08 	.word	0x0800ab08
 80053cc:	20000078 	.word	0x20000078
 80053d0:	40021000 	.word	0x40021000

080053d4 <LL_PLL_ConfigSystemClock_HSI>:
{
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80053da:	f7ff ff23 	bl	8005224 <UTILS_PLL_IsBusy>
 80053de:	bb20      	cbnz	r0, 800542a <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 80053e0:	4621      	mov	r1, r4
 80053e2:	4813      	ldr	r0, [pc, #76]	; (8005430 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 80053e4:	f003 fde1 	bl	8008faa <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053f0:	d109      	bne.n	8005406 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 80053f4:	6813      	ldr	r3, [r2, #0]
 80053f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fa:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005404:	d0fa      	beq.n	80053fc <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6866      	ldr	r6, [r4, #4]
 800540a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800540c:	4c09      	ldr	r4, [pc, #36]	; (8005434 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800540e:	68e7      	ldr	r7, [r4, #12]
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <LL_PLL_ConfigSystemClock_HSI+0x64>)
 8005412:	403b      	ands	r3, r7
 8005414:	f042 0202 	orr.w	r2, r2, #2
 8005418:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800541c:	430a      	orrs	r2, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005422:	4629      	mov	r1, r5
 8005424:	f7ff ff7e 	bl	8005324 <UTILS_EnablePLLAndSwitchSystem>
}
 8005428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800542a:	2001      	movs	r0, #1
 800542c:	e7fc      	b.n	8005428 <LL_PLL_ConfigSystemClock_HSI+0x54>
 800542e:	bf00      	nop
 8005430:	00f42400 	.word	0x00f42400
 8005434:	40021000 	.word	0x40021000
 8005438:	f9ff808c 	.word	0xf9ff808c

0800543c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800543c:	4b03      	ldr	r3, [pc, #12]	; (800544c <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800543e:	e000      	b.n	8005442 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8005440:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8005442:	4a03      	ldr	r2, [pc, #12]	; (8005450 <z_device_state_init+0x14>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d3fb      	bcc.n	8005440 <z_device_state_init+0x4>
	}
}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	08009c48 	.word	0x08009c48
 8005450:	08009d50 	.word	0x08009d50

08005454 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <z_sys_init_run_level+0x4c>)
 800545a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800545e:	e009      	b.n	8005474 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8005460:	4240      	negs	r0, r0
 8005462:	e017      	b.n	8005494 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8005464:	68eb      	ldr	r3, [r5, #12]
 8005466:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8005468:	68ea      	ldr	r2, [r5, #12]
 800546a:	7853      	ldrb	r3, [r2, #1]
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005472:	3408      	adds	r4, #8
 8005474:	1c73      	adds	r3, r6, #1
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <z_sys_init_run_level+0x4c>)
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	42a3      	cmp	r3, r4
 800547e:	d90d      	bls.n	800549c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8005480:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	4628      	mov	r0, r5
 8005486:	4798      	blx	r3
		if (dev != NULL) {
 8005488:	2d00      	cmp	r5, #0
 800548a:	d0f2      	beq.n	8005472 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800548c:	2800      	cmp	r0, #0
 800548e:	d0eb      	beq.n	8005468 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8005490:	2800      	cmp	r0, #0
 8005492:	dbe5      	blt.n	8005460 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8005494:	28ff      	cmp	r0, #255	; 0xff
 8005496:	dde5      	ble.n	8005464 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8005498:	20ff      	movs	r0, #255	; 0xff
 800549a:	e7e3      	b.n	8005464 <z_sys_init_run_level+0x10>
		}
	}
}
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	bf00      	nop
 80054a0:	0800ab18 	.word	0x0800ab18

080054a4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 80054a4:	2804      	cmp	r0, #4
 80054a6:	d80c      	bhi.n	80054c2 <reason_to_str+0x1e>
 80054a8:	e8df f000 	tbb	[pc, r0]
 80054ac:	07050d03 	.word	0x07050d03
 80054b0:	09          	.byte	0x09
 80054b1:	00          	.byte	0x00
 80054b2:	4806      	ldr	r0, [pc, #24]	; (80054cc <reason_to_str+0x28>)
 80054b4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 80054b6:	4806      	ldr	r0, [pc, #24]	; (80054d0 <reason_to_str+0x2c>)
 80054b8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 80054ba:	4806      	ldr	r0, [pc, #24]	; (80054d4 <reason_to_str+0x30>)
 80054bc:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 80054be:	4806      	ldr	r0, [pc, #24]	; (80054d8 <reason_to_str+0x34>)
 80054c0:	4770      	bx	lr
	default:
		return "Unknown error";
 80054c2:	4806      	ldr	r0, [pc, #24]	; (80054dc <reason_to_str+0x38>)
 80054c4:	4770      	bx	lr
		return "Unhandled interrupt";
 80054c6:	4806      	ldr	r0, [pc, #24]	; (80054e0 <reason_to_str+0x3c>)
	}
}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	0800ab80 	.word	0x0800ab80
 80054d0:	0800ab54 	.word	0x0800ab54
 80054d4:	0800ab64 	.word	0x0800ab64
 80054d8:	0800ab70 	.word	0x0800ab70
 80054dc:	0800ab30 	.word	0x0800ab30
 80054e0:	0800ab40 	.word	0x0800ab40

080054e4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80054e4:	b130      	cbz	r0, 80054f4 <thread_name_get+0x10>
{
 80054e6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80054e8:	f003 fde9 	bl	80090be <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80054ec:	b120      	cbz	r0, 80054f8 <thread_name_get+0x14>
 80054ee:	7803      	ldrb	r3, [r0, #0]
 80054f0:	b123      	cbz	r3, 80054fc <thread_name_get+0x18>
}
 80054f2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 80054f4:	4802      	ldr	r0, [pc, #8]	; (8005500 <thread_name_get+0x1c>)
}
 80054f6:	4770      	bx	lr
		thread_name = "unknown";
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <thread_name_get+0x1c>)
 80054fa:	e7fa      	b.n	80054f2 <thread_name_get+0xe>
 80054fc:	4800      	ldr	r0, [pc, #0]	; (8005500 <thread_name_get+0x1c>)
	return thread_name;
 80054fe:	e7f8      	b.n	80054f2 <thread_name_get+0xe>
 8005500:	0800ab90 	.word	0x0800ab90

08005504 <k_sys_fatal_error_handler>:
{
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
	z_impl_log_panic();
 8005508:	f7fd fc1e 	bl	8002d48 <z_impl_log_panic>
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <k_sys_fatal_error_handler+0x30>)
 800550e:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <k_sys_fatal_error_handler+0x34>)
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
 8005514:	f04f 0100 	mov.w	r1, #0
 8005518:	2201      	movs	r2, #1
 800551a:	f362 0102 	bfi	r1, r2, #0, #3
 800551e:	f36f 01c5 	bfc	r1, #3, #3
 8005522:	f363 118f 	bfi	r1, r3, #6, #10
 8005526:	4805      	ldr	r0, [pc, #20]	; (800553c <k_sys_fatal_error_handler+0x38>)
 8005528:	f7fd fb7c 	bl	8002c24 <log_0>
	arch_system_halt(reason);
 800552c:	4620      	mov	r0, r4
 800552e:	f003 fd5a 	bl	8008fe6 <arch_system_halt>
 8005532:	bf00      	nop
 8005534:	0800a010 	.word	0x0800a010
 8005538:	0800a000 	.word	0x0800a000
 800553c:	0800ab98 	.word	0x0800ab98

08005540 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	4605      	mov	r5, r0
 8005548:	460e      	mov	r6, r1
	__asm__ volatile(
 800554a:	f04f 0310 	mov.w	r3, #16
 800554e:	f3ef 8711 	mrs	r7, BASEPRI
 8005552:	f383 8812 	msr	BASEPRI_MAX, r3
 8005556:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800555a:	f000 fddd 	bl	8006118 <z_impl_z_current_get>
 800555e:	4604      	mov	r4, r0
 8005560:	4b29      	ldr	r3, [pc, #164]	; (8005608 <z_fatal_error+0xc8>)
 8005562:	4a2a      	ldr	r2, [pc, #168]	; (800560c <z_fatal_error+0xcc>)
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8005568:	f04f 0800 	mov.w	r8, #0
 800556c:	2201      	movs	r2, #1
 800556e:	f362 0802 	bfi	r8, r2, #0, #3
 8005572:	f36f 08c5 	bfc	r8, #3, #3
 8005576:	f363 188f 	bfi	r8, r3, #6, #10
 800557a:	4628      	mov	r0, r5
 800557c:	f7ff ff92 	bl	80054a4 <reason_to_str>
 8005580:	4602      	mov	r2, r0
 8005582:	f8ad 8000 	strh.w	r8, [sp]
 8005586:	2300      	movs	r3, #0
 8005588:	4629      	mov	r1, r5
 800558a:	4821      	ldr	r0, [pc, #132]	; (8005610 <z_fatal_error+0xd0>)
 800558c:	f7fd fb10 	bl	8002bb0 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8005590:	b11e      	cbz	r6, 800559a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8005592:	69f3      	ldr	r3, [r6, #28]
 8005594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005598:	bb2b      	cbnz	r3, 80055e6 <z_fatal_error+0xa6>
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <z_fatal_error+0xc8>)
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <z_fatal_error+0xcc>)
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 80055a2:	f04f 0800 	mov.w	r8, #0
 80055a6:	2201      	movs	r2, #1
 80055a8:	f362 0802 	bfi	r8, r2, #0, #3
 80055ac:	f36f 08c5 	bfc	r8, #3, #3
 80055b0:	f363 188f 	bfi	r8, r3, #6, #10
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff ff95 	bl	80054e4 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 80055ba:	f7fd f9bd 	bl	8002938 <z_log_strdup>
 80055be:	4602      	mov	r2, r0
 80055c0:	4643      	mov	r3, r8
 80055c2:	4621      	mov	r1, r4
 80055c4:	4813      	ldr	r0, [pc, #76]	; (8005614 <z_fatal_error+0xd4>)
 80055c6:	f7fd fb89 	bl	8002cdc <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80055ca:	4631      	mov	r1, r6
 80055cc:	4628      	mov	r0, r5
 80055ce:	f7ff ff99 	bl	8005504 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80055d2:	f387 8811 	msr	BASEPRI, r7
 80055d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80055da:	4620      	mov	r0, r4
 80055dc:	f7fe fc70 	bl	8003ec0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80055e0:	b002      	add	sp, #8
 80055e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <z_fatal_error+0xc8>)
 80055e8:	4a08      	ldr	r2, [pc, #32]	; (800560c <z_fatal_error+0xcc>)
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	2201      	movs	r2, #1
 80055f4:	f362 0102 	bfi	r1, r2, #0, #3
 80055f8:	f36f 01c5 	bfc	r1, #3, #3
 80055fc:	f363 118f 	bfi	r1, r3, #6, #10
 8005600:	4805      	ldr	r0, [pc, #20]	; (8005618 <z_fatal_error+0xd8>)
 8005602:	f7fd fb0f 	bl	8002c24 <log_0>
 8005606:	e7c8      	b.n	800559a <z_fatal_error+0x5a>
 8005608:	0800a010 	.word	0x0800a010
 800560c:	0800a000 	.word	0x0800a000
 8005610:	0800aba8 	.word	0x0800aba8
 8005614:	0800abf4 	.word	0x0800abf4
 8005618:	0800abd0 	.word	0x0800abd0

0800561c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800561c:	b510      	push	{r4, lr}
 800561e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8005620:	4c10      	ldr	r4, [pc, #64]	; (8005664 <init_idle_thread+0x48>)
 8005622:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8005626:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <init_idle_thread+0x4c>)
 800562c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 8005630:	2200      	movs	r2, #0
 8005632:	9205      	str	r2, [sp, #20]
 8005634:	2101      	movs	r1, #1
 8005636:	9104      	str	r1, [sp, #16]
 8005638:	210f      	movs	r1, #15
 800563a:	9103      	str	r1, [sp, #12]
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	9201      	str	r2, [sp, #4]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <init_idle_thread+0x50>)
 8005644:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005648:	4909      	ldr	r1, [pc, #36]	; (8005670 <init_idle_thread+0x54>)
 800564a:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800564e:	fb0c 1100 	mla	r1, ip, r0, r1
 8005652:	4620      	mov	r0, r4
 8005654:	f000 f920 	bl	8005898 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005658:	7b63      	ldrb	r3, [r4, #13]
 800565a:	f023 0304 	bic.w	r3, r3, #4
 800565e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8005660:	b006      	add	sp, #24
 8005662:	bd10      	pop	{r4, pc}
 8005664:	20000388 	.word	0x20000388
 8005668:	2000061c 	.word	0x2000061c
 800566c:	08009125 	.word	0x08009125
 8005670:	200011c0 	.word	0x200011c0

08005674 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8005678:	f000 fd40 	bl	80060fc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800567c:	4d1b      	ldr	r5, [pc, #108]	; (80056ec <prepare_multithreading+0x78>)
 800567e:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <prepare_multithreading+0x7c>)
 8005680:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <prepare_multithreading+0x80>)
 8005684:	9305      	str	r3, [sp, #20]
 8005686:	2301      	movs	r3, #1
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	2400      	movs	r4, #0
 800568c:	9403      	str	r4, [sp, #12]
 800568e:	9402      	str	r4, [sp, #8]
 8005690:	9401      	str	r4, [sp, #4]
 8005692:	9400      	str	r4, [sp, #0]
 8005694:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <prepare_multithreading+0x84>)
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	4918      	ldr	r1, [pc, #96]	; (80056fc <prepare_multithreading+0x88>)
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f8fb 	bl	8005898 <z_setup_new_thread>
 80056a2:	4606      	mov	r6, r0
 80056a4:	7b6b      	ldrb	r3, [r5, #13]
 80056a6:	f023 0304 	bic.w	r3, r3, #4
 80056aa:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 80056ac:	4628      	mov	r0, r5
 80056ae:	f003 fdb4 	bl	800921a <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	dd02      	ble.n	80056bc <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 80056b6:	4630      	mov	r0, r6
 80056b8:	b006      	add	sp, #24
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 80056bc:	4620      	mov	r0, r4
 80056be:	f7ff ffad 	bl	800561c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80056c2:	4a0f      	ldr	r2, [pc, #60]	; (8005700 <prepare_multithreading+0x8c>)
 80056c4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80056c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <prepare_multithreading+0x7c>)
 80056ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80056d2:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 80056d4:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 80056d6:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <prepare_multithreading+0x90>)
 80056dc:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80056e0:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 80056e4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 80056e6:	3401      	adds	r4, #1
 80056e8:	e7e3      	b.n	80056b2 <prepare_multithreading+0x3e>
 80056ea:	bf00      	nop
 80056ec:	20000408 	.word	0x20000408
 80056f0:	2000061c 	.word	0x2000061c
 80056f4:	0800ac0c 	.word	0x0800ac0c
 80056f8:	08005709 	.word	0x08005709
 80056fc:	200009a0 	.word	0x200009a0
 8005700:	20000388 	.word	0x20000388
 8005704:	20001320 	.word	0x20001320

08005708 <bg_thread_main>:
{
 8005708:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <bg_thread_main+0x30>)
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8005710:	2002      	movs	r0, #2
 8005712:	f7ff fe9f 	bl	8005454 <z_sys_init_run_level>
	boot_banner();
 8005716:	f000 ff4b 	bl	80065b0 <boot_banner>
	z_cpp_init_static();
 800571a:	f002 fe77 	bl	800840c <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800571e:	2003      	movs	r0, #3
 8005720:	f7ff fe98 	bl	8005454 <z_sys_init_run_level>
	z_init_static_threads();
 8005724:	f000 f8e8 	bl	80058f8 <z_init_static_threads>
	main();
 8005728:	f7fc fa4a 	bl	8001bc0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800572c:	4a03      	ldr	r2, [pc, #12]	; (800573c <bg_thread_main+0x34>)
 800572e:	7b13      	ldrb	r3, [r2, #12]
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005736:	bd08      	pop	{r3, pc}
 8005738:	2000066c 	.word	0x2000066c
 800573c:	20000408 	.word	0x20000408

08005740 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8005740:	b508      	push	{r3, lr}
 8005742:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8005744:	4a01      	ldr	r2, [pc, #4]	; (800574c <switch_to_main_thread+0xc>)
 8005746:	4802      	ldr	r0, [pc, #8]	; (8005750 <switch_to_main_thread+0x10>)
 8005748:	f7fd ff8c 	bl	8003664 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800574c:	08005709 	.word	0x08005709
 8005750:	20000408 	.word	0x20000408

08005754 <z_bss_zero>:
{
 8005754:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8005756:	4803      	ldr	r0, [pc, #12]	; (8005764 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8005758:	4a03      	ldr	r2, [pc, #12]	; (8005768 <z_bss_zero+0x14>)
 800575a:	1a12      	subs	r2, r2, r0
 800575c:	2100      	movs	r1, #0
 800575e:	f003 fee7 	bl	8009530 <memset>
}
 8005762:	bd08      	pop	{r3, pc}
 8005764:	200002d0 	.word	0x200002d0
 8005768:	20000670 	.word	0x20000670

0800576c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800576c:	b500      	push	{lr}
 800576e:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8005770:	f7fd f812 	bl	8002798 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <z_cstart+0x78>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005776:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800577a:	4c1b      	ldr	r4, [pc, #108]	; (80057e8 <z_cstart+0x7c>)
 800577c:	6963      	ldr	r3, [r4, #20]
 800577e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005782:	6163      	str	r3, [r4, #20]
 8005784:	23f0      	movs	r3, #240	; 0xf0
 8005786:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800578a:	2500      	movs	r5, #0
 800578c:	77e5      	strb	r5, [r4, #31]
 800578e:	7625      	strb	r5, [r4, #24]
 8005790:	7665      	strb	r5, [r4, #25]
 8005792:	76a5      	strb	r5, [r4, #26]
 8005794:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800579a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800579e:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80057a0:	f7fe fb4c 	bl	8003e3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80057a4:	f7fd fe16 	bl	80033d4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ac:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80057ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80057b0:	f7fe fc6c 	bl	800408c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80057b4:	f7fe fb9a 	bl	8003eec <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 80057b8:	2401      	movs	r4, #1
 80057ba:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 80057be:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 80057c2:	9519      	str	r5, [sp, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
 80057c4:	951a      	str	r5, [sp, #104]	; 0x68
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <z_cstart+0x80>)
 80057c8:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80057cc:	f7ff fe36 	bl	800543c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff fe3f 	bl	8005454 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff fe3c 	bl	8005454 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 80057dc:	f7ff ff4a 	bl	8005674 <prepare_multithreading>
 80057e0:	f7ff ffae 	bl	8005740 <switch_to_main_thread>
 80057e4:	20001b40 	.word	0x20001b40
 80057e8:	e000ed00 	.word	0xe000ed00
 80057ec:	2000061c 	.word	0x2000061c

080057f0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80057f0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80057f2:	4c06      	ldr	r4, [pc, #24]	; (800580c <init_mem_slab_module+0x1c>)
	int rc = 0;
 80057f4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80057f6:	e000      	b.n	80057fa <init_mem_slab_module+0xa>
 80057f8:	3420      	adds	r4, #32
 80057fa:	4b05      	ldr	r3, [pc, #20]	; (8005810 <init_mem_slab_module+0x20>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d204      	bcs.n	800580a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8005800:	4620      	mov	r0, r4
 8005802:	f003 fbf9 	bl	8008ff8 <create_free_list>
		if (rc < 0) {
 8005806:	2800      	cmp	r0, #0
 8005808:	daf6      	bge.n	80057f8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800580a:	bd10      	pop	{r4, pc}
 800580c:	20000280 	.word	0x20000280
 8005810:	20000280 	.word	0x20000280

08005814 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	b083      	sub	sp, #12
 8005818:	460d      	mov	r5, r1
	__asm__ volatile(
 800581a:	f04f 0410 	mov.w	r4, #16
 800581e:	f3ef 8111 	mrs	r1, BASEPRI
 8005822:	f384 8812 	msr	BASEPRI_MAX, r4
 8005826:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800582a:	6984      	ldr	r4, [r0, #24]
 800582c:	b16c      	cbz	r4, 800584a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
 800582e:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 8005830:	6983      	ldr	r3, [r0, #24]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8005836:	69c3      	ldr	r3, [r0, #28]
 8005838:	3301      	adds	r3, #1
 800583a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800583c:	2000      	movs	r0, #0
	__asm__ volatile(
 800583e:	f381 8811 	msr	BASEPRI, r1
 8005842:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 8005846:	b003      	add	sp, #12
 8005848:	bd30      	pop	{r4, r5, pc}
 800584a:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 800584e:	ea53 0402 	orrs.w	r4, r3, r2
 8005852:	d104      	bne.n	800585e <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 8005854:	2300      	movs	r3, #0
 8005856:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
 8005858:	f06f 000b 	mvn.w	r0, #11
 800585c:	e7ef      	b.n	800583e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 800585e:	9200      	str	r2, [sp, #0]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	4602      	mov	r2, r0
 8005864:	4660      	mov	r0, ip
 8005866:	f000 fb63 	bl	8005f30 <z_pend_curr>
		if (result == 0) {
 800586a:	2800      	cmp	r0, #0
 800586c:	d1eb      	bne.n	8005846 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
 800586e:	4b02      	ldr	r3, [pc, #8]	; (8005878 <k_mem_slab_alloc+0x64>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	602b      	str	r3, [r5, #0]
		return result;
 8005876:	e7e6      	b.n	8005846 <k_mem_slab_alloc+0x32>
 8005878:	2000061c 	.word	0x2000061c

0800587c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800587c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800587e:	ea53 0102 	orrs.w	r1, r3, r2
 8005882:	d102      	bne.n	800588a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8005884:	f003 fc1d 	bl	80090c2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8005888:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800588a:	4902      	ldr	r1, [pc, #8]	; (8005894 <schedule_new_thread+0x18>)
 800588c:	3018      	adds	r0, #24
 800588e:	f000 fcd3 	bl	8006238 <z_add_timeout>
 8005892:	e7f9      	b.n	8005888 <schedule_new_thread+0xc>
 8005894:	08009253 	.word	0x08009253

08005898 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8005898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800589a:	b085      	sub	sp, #20
 800589c:	4604      	mov	r4, r0
 800589e:	460e      	mov	r6, r1
 80058a0:	4615      	mov	r5, r2
 80058a2:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80058a4:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80058a8:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 80058aa:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 80058ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ae:	2204      	movs	r2, #4
 80058b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058b2:	f003 fc0a 	bl	80090ca <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 80058b6:	462a      	mov	r2, r5
 80058b8:	4631      	mov	r1, r6
 80058ba:	4620      	mov	r0, r4
 80058bc:	f003 fbed 	bl	800909a <setup_thread_stack>
 80058c0:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80058c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c4:	9302      	str	r3, [sp, #8]
 80058c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	463b      	mov	r3, r7
 80058d0:	4602      	mov	r2, r0
 80058d2:	4631      	mov	r1, r6
 80058d4:	4620      	mov	r0, r4
 80058d6:	f7fd fe7f 	bl	80035d8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <z_setup_new_thread+0x5c>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	b123      	cbz	r3, 80058ee <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	6723      	str	r3, [r4, #112]	; 0x70
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 80058e8:	4628      	mov	r0, r5
 80058ea:	b005      	add	sp, #20
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 80058ee:	6723      	str	r3, [r4, #112]	; 0x70
		return stack_ptr;
 80058f0:	e7fa      	b.n	80058e8 <z_setup_new_thread+0x50>
 80058f2:	bf00      	nop
 80058f4:	2000061c 	.word	0x2000061c

080058f8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 80058f8:	b510      	push	{r4, lr}
 80058fa:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 80058fc:	4c1d      	ldr	r4, [pc, #116]	; (8005974 <z_init_static_threads+0x7c>)
 80058fe:	e014      	b.n	800592a <z_init_static_threads+0x32>
		z_setup_new_thread(
 8005900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005902:	9305      	str	r3, [sp, #20]
 8005904:	6a23      	ldr	r3, [r4, #32]
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	69e3      	ldr	r3, [r4, #28]
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	69a3      	ldr	r3, [r4, #24]
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	6963      	ldr	r3, [r4, #20]
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	68e3      	ldr	r3, [r4, #12]
 800591a:	68a2      	ldr	r2, [r4, #8]
 800591c:	6861      	ldr	r1, [r4, #4]
 800591e:	6820      	ldr	r0, [r4, #0]
 8005920:	f7ff ffba 	bl	8005898 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8005928:	3430      	adds	r4, #48	; 0x30
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <z_init_static_threads+0x80>)
 800592c:	429c      	cmp	r4, r3
 800592e:	d3e7      	bcc.n	8005900 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005930:	f000 f9aa 	bl	8005c88 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005934:	4c0f      	ldr	r4, [pc, #60]	; (8005974 <z_init_static_threads+0x7c>)
 8005936:	e000      	b.n	800593a <z_init_static_threads+0x42>
 8005938:	3430      	adds	r4, #48	; 0x30
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <z_init_static_threads+0x80>)
 800593c:	429c      	cmp	r4, r3
 800593e:	d214      	bcs.n	800596a <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8005940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005946:	d0f7      	beq.n	8005938 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8005948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800594c:	17d8      	asrs	r0, r3, #31
 800594e:	0082      	lsls	r2, r0, #2
 8005950:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005954:	0099      	lsls	r1, r3, #2
 8005956:	18c9      	adds	r1, r1, r3
 8005958:	eb40 0002 	adc.w	r0, r0, r2
 800595c:	184a      	adds	r2, r1, r1
 800595e:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	f7ff ff8a 	bl	800587c <schedule_new_thread>
 8005968:	e7e6      	b.n	8005938 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800596a:	f000 fb55 	bl	8006018 <k_sched_unlock>
}
 800596e:	b006      	add	sp, #24
 8005970:	bd10      	pop	{r4, pc}
 8005972:	bf00      	nop
 8005974:	20000280 	.word	0x20000280
 8005978:	20000280 	.word	0x20000280

0800597c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800597c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005980:	b083      	sub	sp, #12
 8005982:	4604      	mov	r4, r0
 8005984:	461d      	mov	r5, r3
	__asm__ volatile(
 8005986:	f04f 0310 	mov.w	r3, #16
 800598a:	f3ef 8711 	mrs	r7, BASEPRI
 800598e:	f383 8812 	msr	BASEPRI_MAX, r3
 8005992:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8005996:	68c1      	ldr	r1, [r0, #12]
 8005998:	b999      	cbnz	r1, 80059c2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800599a:	2900      	cmp	r1, #0
 800599c:	d14f      	bne.n	8005a3e <z_impl_k_mutex_lock+0xc2>
 800599e:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <z_impl_k_mutex_lock+0x10c>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80059a6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 80059a8:	3101      	adds	r1, #1
 80059aa:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <z_impl_k_mutex_lock+0x10c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80059b2:	f387 8811 	msr	BASEPRI, r7
 80059b6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 80059ba:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80059bc:	b003      	add	sp, #12
 80059be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059c2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80059c4:	6882      	ldr	r2, [r0, #8]
 80059c6:	4b30      	ldr	r3, [pc, #192]	; (8005a88 <z_impl_k_mutex_lock+0x10c>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d0e5      	beq.n	800599a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80059ce:	ea55 0106 	orrs.w	r1, r5, r6
 80059d2:	bf0c      	ite	eq
 80059d4:	f04f 0801 	moveq.w	r8, #1
 80059d8:	f04f 0800 	movne.w	r8, #0
 80059dc:	d031      	beq.n	8005a42 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 80059de:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80059e2:	4649      	mov	r1, r9
 80059e4:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80059e8:	f003 fba8 	bl	800913c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80059ec:	4581      	cmp	r9, r0
 80059ee:	dc2f      	bgt.n	8005a50 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 80059f0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80059f4:	9600      	str	r6, [sp, #0]
 80059f6:	9501      	str	r5, [sp, #4]
 80059f8:	4622      	mov	r2, r4
 80059fa:	4639      	mov	r1, r7
 80059fc:	4823      	ldr	r0, [pc, #140]	; (8005a8c <z_impl_k_mutex_lock+0x110>)
 80059fe:	f000 fa97 	bl	8005f30 <z_pend_curr>
	if (got_mutex == 0) {
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d0da      	beq.n	80059bc <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8005a06:	f04f 0310 	mov.w	r3, #16
 8005a0a:	f3ef 8511 	mrs	r5, BASEPRI
 8005a0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8005a12:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8005a16:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d01f      	beq.n	8005a5c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8005a1c:	b1f3      	cbz	r3, 8005a5c <z_impl_k_mutex_lock+0xe0>
 8005a1e:	6921      	ldr	r1, [r4, #16]
 8005a20:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8005a24:	f003 fb8a 	bl	800913c <new_prio_for_inheritance>
 8005a28:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f003 fb91 	bl	8009152 <adjust_owner_prio>
 8005a30:	b9b0      	cbnz	r0, 8005a60 <z_impl_k_mutex_lock+0xe4>
 8005a32:	f1b9 0f00 	cmp.w	r9, #0
 8005a36:	d015      	beq.n	8005a64 <z_impl_k_mutex_lock+0xe8>
 8005a38:	f04f 0801 	mov.w	r8, #1
 8005a3c:	e012      	b.n	8005a64 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	e7b1      	b.n	80059a6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8005a42:	f387 8811 	msr	BASEPRI, r7
 8005a46:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8005a4a:	f06f 000f 	mvn.w	r0, #15
 8005a4e:	e7b5      	b.n	80059bc <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8005a50:	4601      	mov	r1, r0
 8005a52:	4620      	mov	r0, r4
 8005a54:	f003 fb7d 	bl	8009152 <adjust_owner_prio>
 8005a58:	4681      	mov	r9, r0
 8005a5a:	e7cb      	b.n	80059f4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8005a5c:	6921      	ldr	r1, [r4, #16]
 8005a5e:	e7e4      	b.n	8005a2a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8005a60:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8005a64:	f1b8 0f00 	cmp.w	r8, #0
 8005a68:	d106      	bne.n	8005a78 <z_impl_k_mutex_lock+0xfc>
 8005a6a:	f385 8811 	msr	BASEPRI, r5
 8005a6e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8005a72:	f06f 000a 	mvn.w	r0, #10
 8005a76:	e7a1      	b.n	80059bc <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4804      	ldr	r0, [pc, #16]	; (8005a8c <z_impl_k_mutex_lock+0x110>)
 8005a7c:	f000 f8e8 	bl	8005c50 <z_reschedule>
	return -EAGAIN;
 8005a80:	f06f 000a 	mvn.w	r0, #10
 8005a84:	e79a      	b.n	80059bc <z_impl_k_mutex_lock+0x40>
 8005a86:	bf00      	nop
 8005a88:	2000061c 	.word	0x2000061c
 8005a8c:	20000640 	.word	0x20000640

08005a90 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8005a90:	6882      	ldr	r2, [r0, #8]
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d034      	beq.n	8005b00 <z_impl_k_mutex_unlock+0x70>
{
 8005a96:	b538      	push	{r3, r4, r5, lr}
 8005a98:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <z_impl_k_mutex_unlock+0x7c>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d131      	bne.n	8005b06 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8005aa2:	7bda      	ldrb	r2, [r3, #15]
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8005aa8:	68c3      	ldr	r3, [r0, #12]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d905      	bls.n	8005aba <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8005ab2:	f000 fab1 	bl	8006018 <k_sched_unlock>

	return 0;
 8005ab6:	2000      	movs	r0, #0
}
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8005aba:	f04f 0310 	mov.w	r3, #16
 8005abe:	f3ef 8511 	mrs	r5, BASEPRI
 8005ac2:	f383 8812 	msr	BASEPRI_MAX, r3
 8005ac6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8005aca:	6901      	ldr	r1, [r0, #16]
 8005acc:	f003 fb41 	bl	8009152 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f003 fc69 	bl	80093a8 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8005ad6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8005ad8:	b158      	cbz	r0, 8005af2 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 8005ada:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8005ade:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6783      	str	r3, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
 8005ae4:	f003 fb99 	bl	800921a <z_ready_thread>
		z_reschedule(&lock, key);
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4809      	ldr	r0, [pc, #36]	; (8005b10 <z_impl_k_mutex_unlock+0x80>)
 8005aec:	f000 f8b0 	bl	8005c50 <z_reschedule>
 8005af0:	e7df      	b.n	8005ab2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8005af6:	f385 8811 	msr	BASEPRI, r5
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	e7d8      	b.n	8005ab2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8005b00:	f06f 0015 	mvn.w	r0, #21
}
 8005b04:	4770      	bx	lr
		return -EPERM;
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b0a:	e7d5      	b.n	8005ab8 <z_impl_k_mutex_unlock+0x28>
 8005b0c:	2000061c 	.word	0x2000061c
 8005b10:	20000640 	.word	0x20000640

08005b14 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4604      	mov	r4, r0
	__asm__ volatile(
 8005b18:	f04f 0310 	mov.w	r3, #16
 8005b1c:	f3ef 8511 	mrs	r5, BASEPRI
 8005b20:	f383 8812 	msr	BASEPRI_MAX, r3
 8005b24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8005b28:	f003 fc3e 	bl	80093a8 <z_unpend_first_thread>

	if (thread != NULL) {
 8005b2c:	b140      	cbz	r0, 8005b40 <z_impl_k_sem_give+0x2c>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8005b32:	f003 fb72 	bl	800921a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8005b36:	4629      	mov	r1, r5
 8005b38:	4806      	ldr	r0, [pc, #24]	; (8005b54 <z_impl_k_sem_give+0x40>)
 8005b3a:	f000 f889 	bl	8005c50 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	68e2      	ldr	r2, [r4, #12]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <z_impl_k_sem_give+0x3c>
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60a3      	str	r3, [r4, #8]
}
 8005b4e:	e7f2      	b.n	8005b36 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8005b50:	2200      	movs	r2, #0
 8005b52:	e7fa      	b.n	8005b4a <z_impl_k_sem_give+0x36>
 8005b54:	20000644 	.word	0x20000644

08005b58 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	f04f 0410 	mov.w	r4, #16
 8005b60:	f3ef 8111 	mrs	r1, BASEPRI
 8005b64:	f384 8812 	msr	BASEPRI_MAX, r4
 8005b68:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8005b6c:	6884      	ldr	r4, [r0, #8]
 8005b6e:	b144      	cbz	r4, 8005b82 <z_impl_k_sem_take+0x2a>
		sem->count--;
 8005b70:	3c01      	subs	r4, #1
 8005b72:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8005b74:	f381 8811 	msr	BASEPRI, r1
 8005b78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8005b7c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8005b82:	ea53 0402 	orrs.w	r4, r3, r2
 8005b86:	d006      	beq.n	8005b96 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005b88:	9200      	str	r2, [sp, #0]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <z_impl_k_sem_take+0x4c>)
 8005b90:	f000 f9ce 	bl	8005f30 <z_pend_curr>
	return ret;
 8005b94:	e7f3      	b.n	8005b7e <z_impl_k_sem_take+0x26>
 8005b96:	f381 8811 	msr	BASEPRI, r1
 8005b9a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8005b9e:	f06f 000f 	mvn.w	r0, #15
 8005ba2:	e7ec      	b.n	8005b7e <z_impl_k_sem_take+0x26>
 8005ba4:	20000644 	.word	0x20000644

08005ba8 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bac:	bf08      	it	eq
 8005bae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8005bb2:	d100      	bne.n	8005bb6 <add_thread_timeout+0xe>
 8005bb4:	4770      	bx	lr
{
 8005bb6:	b508      	push	{r3, lr}
 8005bb8:	4902      	ldr	r1, [pc, #8]	; (8005bc4 <add_thread_timeout+0x1c>)
 8005bba:	3018      	adds	r0, #24
 8005bbc:	f000 fb3c 	bl	8006238 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 8005bc0:	bd08      	pop	{r3, pc}
 8005bc2:	bf00      	nop
 8005bc4:	08009253 	.word	0x08009253

08005bc8 <z_reset_time_slice>:
{
 8005bc8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <z_reset_time_slice+0x24>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b903      	cbnz	r3, 8005bd2 <z_reset_time_slice+0xa>
}
 8005bd0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8005bd2:	f7ff faf1 	bl	80051b8 <sys_clock_elapsed>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4a04      	ldr	r2, [pc, #16]	; (8005bec <z_reset_time_slice+0x24>)
 8005bda:	6810      	ldr	r0, [r2, #0]
 8005bdc:	4403      	add	r3, r0
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <z_reset_time_slice+0x28>)
 8005be0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8005be2:	2100      	movs	r1, #0
 8005be4:	f003 fc40 	bl	8009468 <z_set_timeout_expiry>
}
 8005be8:	e7f2      	b.n	8005bd0 <z_reset_time_slice+0x8>
 8005bea:	bf00      	nop
 8005bec:	20000654 	.word	0x20000654
 8005bf0:	2000061c 	.word	0x2000061c

08005bf4 <k_sched_time_slice_set>:
{
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 8005bfa:	2300      	movs	r3, #0
	__asm__ volatile(
 8005bfc:	f04f 0210 	mov.w	r2, #16
 8005c00:	f3ef 8611 	mrs	r6, BASEPRI
 8005c04:	f382 8812 	msr	BASEPRI_MAX, r2
 8005c08:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8005c0c:	e00c      	b.n	8005c28 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	bfb8      	it	lt
 8005c12:	2302      	movlt	r3, #2
 8005c14:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <k_sched_time_slice_set+0x50>)
 8005c18:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 8005c1a:	f7ff ffd5 	bl	8005bc8 <z_reset_time_slice>
	__asm__ volatile(
 8005c1e:	f386 8811 	msr	BASEPRI, r6
 8005c22:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8005c26:	2301      	movs	r3, #1
 8005c28:	b953      	cbnz	r3, 8005c40 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <k_sched_time_slice_set+0x54>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8005c30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005c34:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8005c36:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <k_sched_time_slice_set+0x58>)
 8005c38:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	dce7      	bgt.n	8005c0e <k_sched_time_slice_set+0x1a>
 8005c3e:	e7ea      	b.n	8005c16 <k_sched_time_slice_set+0x22>
}
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	bf00      	nop
 8005c44:	20000650 	.word	0x20000650
 8005c48:	2000061c 	.word	0x2000061c
 8005c4c:	20000654 	.word	0x20000654

08005c50 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8005c50:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8005c52:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8005c54:	b921      	cbnz	r1, 8005c60 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c56:	f3ef 8305 	mrs	r3, IPSR
 8005c5a:	b913      	cbnz	r3, 8005c62 <z_reschedule+0x12>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	e000      	b.n	8005c62 <z_reschedule+0x12>
 8005c60:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8005c62:	f011 0f01 	tst.w	r1, #1
 8005c66:	d007      	beq.n	8005c78 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <z_reschedule+0x34>)
 8005c6a:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8005c6c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d002      	beq.n	8005c78 <z_reschedule+0x28>
	ret = arch_swap(key);
 8005c72:	f7fd fc5d 	bl	8003530 <arch_swap>
		z_swap(lock, key);
 8005c76:	e003      	b.n	8005c80 <z_reschedule+0x30>
 8005c78:	f380 8811 	msr	BASEPRI, r0
 8005c7c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8005c80:	bd08      	pop	{r3, pc}
 8005c82:	bf00      	nop
 8005c84:	2000061c 	.word	0x2000061c

08005c88 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8005c88:	2300      	movs	r3, #0
	__asm__ volatile(
 8005c8a:	f04f 0210 	mov.w	r2, #16
 8005c8e:	f3ef 8111 	mrs	r1, BASEPRI
 8005c92:	f382 8812 	msr	BASEPRI_MAX, r2
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	e009      	b.n	8005cb0 <k_sched_lock+0x28>
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <k_sched_lock+0x30>)
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	7bd3      	ldrb	r3, [r2, #15]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8005ca6:	f381 8811 	msr	BASEPRI, r1
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f3      	beq.n	8005c9c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2000061c 	.word	0x2000061c

08005cbc <update_cache>:
{
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8005cc0:	480f      	ldr	r0, [pc, #60]	; (8005d00 <update_cache+0x44>)
 8005cc2:	f003 faa3 	bl	800920c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	b170      	cbz	r0, 8005ce8 <update_cache+0x2c>
	if (preempt_ok != 0) {
 8005cca:	b984      	cbnz	r4, 8005cee <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <update_cache+0x48>)
 8005cce:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 8005cd0:	7b5a      	ldrb	r2, [r3, #13]
 8005cd2:	f012 0f1f 	tst.w	r2, #31
 8005cd6:	d10a      	bne.n	8005cee <update_cache+0x32>
	return node->next != NULL;
 8005cd8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8005cda:	b942      	cbnz	r2, 8005cee <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8005cdc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8005cde:	2a7f      	cmp	r2, #127	; 0x7f
 8005ce0:	d905      	bls.n	8005cee <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <update_cache+0x48>)
 8005ce4:	6193      	str	r3, [r2, #24]
 8005ce6:	e00a      	b.n	8005cfe <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <update_cache+0x48>)
 8005cea:	68dd      	ldr	r5, [r3, #12]
 8005cec:	e7ed      	b.n	8005cca <update_cache+0xe>
		if (thread != _current) {
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <update_cache+0x48>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	42ab      	cmp	r3, r5
 8005cf4:	d001      	beq.n	8005cfa <update_cache+0x3e>
			z_reset_time_slice();
 8005cf6:	f7ff ff67 	bl	8005bc8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8005cfa:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <update_cache+0x48>)
 8005cfc:	619d      	str	r5, [r3, #24]
}
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20000638 	.word	0x20000638
 8005d04:	2000061c 	.word	0x2000061c

08005d08 <move_thread_to_end_of_prio_q>:
{
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8005d0c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8005d0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db28      	blt.n	8005d68 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 8005d16:	7b6b      	ldrb	r3, [r5, #13]
 8005d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d1c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8005d1e:	4b1a      	ldr	r3, [pc, #104]	; (8005d88 <move_thread_to_end_of_prio_q+0x80>)
 8005d20:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d02d      	beq.n	8005d84 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005d28:	b16c      	cbz	r4, 8005d46 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f003 fa26 	bl	800917e <z_sched_prio_cmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	dc20      	bgt.n	8005d78 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005d36:	b134      	cbz	r4, 8005d46 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <move_thread_to_end_of_prio_q+0x80>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	429c      	cmp	r4, r3
 8005d3e:	d002      	beq.n	8005d46 <move_thread_to_end_of_prio_q+0x3e>
 8005d40:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d1f0      	bne.n	8005d28 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <move_thread_to_end_of_prio_q+0x80>)
 8005d48:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 8005d4a:	f103 011c 	add.w	r1, r3, #28
 8005d4e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8005d50:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8005d52:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8005d54:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <move_thread_to_end_of_prio_q+0x80>)
 8005d58:	6898      	ldr	r0, [r3, #8]
 8005d5a:	42a8      	cmp	r0, r5
 8005d5c:	bf14      	ite	ne
 8005d5e:	2000      	movne	r0, #0
 8005d60:	2001      	moveq	r0, #1
 8005d62:	f7ff ffab 	bl	8005cbc <update_cache>
}
 8005d66:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d6c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8005d6e:	4601      	mov	r1, r0
 8005d70:	4806      	ldr	r0, [pc, #24]	; (8005d8c <move_thread_to_end_of_prio_q+0x84>)
 8005d72:	f003 fa43 	bl	80091fc <z_priq_dumb_remove>
}
 8005d76:	e7ce      	b.n	8005d16 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8005d78:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 8005d7a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8005d7c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8005d7e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8005d80:	6065      	str	r5, [r4, #4]
}
 8005d82:	e7e8      	b.n	8005d56 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005d84:	2400      	movs	r4, #0
 8005d86:	e7cf      	b.n	8005d28 <move_thread_to_end_of_prio_q+0x20>
 8005d88:	2000061c 	.word	0x2000061c
 8005d8c:	20000638 	.word	0x20000638

08005d90 <z_time_slice>:
{
 8005d90:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005d92:	f04f 0310 	mov.w	r3, #16
 8005d96:	f3ef 8411 	mrs	r4, BASEPRI
 8005d9a:	f383 8812 	msr	BASEPRI_MAX, r3
 8005d9e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8005da2:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <z_time_slice+0x98>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <z_time_slice+0x9c>)
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d017      	beq.n	8005dde <z_time_slice+0x4e>
	pending_current = NULL;
 8005dae:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <z_time_slice+0x9c>)
 8005db0:	2100      	movs	r1, #0
 8005db2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8005db4:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <z_time_slice+0xa0>)
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	b372      	cbz	r2, 8005e18 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8005dba:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8005dbc:	2a7f      	cmp	r2, #127	; 0x7f
 8005dbe:	d815      	bhi.n	8005dec <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 8005dc0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 8005dc2:	f012 0f1f 	tst.w	r2, #31
 8005dc6:	d11b      	bne.n	8005e00 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8005dc8:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <z_time_slice+0xa4>)
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	4291      	cmp	r1, r2
 8005dd2:	db17      	blt.n	8005e04 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <z_time_slice+0xa8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d016      	beq.n	8005e08 <z_time_slice+0x78>
 8005dda:	2201      	movs	r2, #1
 8005ddc:	e007      	b.n	8005dee <z_time_slice+0x5e>
		z_reset_time_slice();
 8005dde:	f7ff fef3 	bl	8005bc8 <z_reset_time_slice>
	__asm__ volatile(
 8005de2:	f384 8811 	msr	BASEPRI, r4
 8005de6:	f3bf 8f6f 	isb	sy
		return;
 8005dea:	e01c      	b.n	8005e26 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 8005dec:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 8005dee:	b19a      	cbz	r2, 8005e18 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 8005df0:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <z_time_slice+0x98>)
 8005df2:	6912      	ldr	r2, [r2, #16]
 8005df4:	4282      	cmp	r2, r0
 8005df6:	dd09      	ble.n	8005e0c <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 8005df8:	1a10      	subs	r0, r2, r0
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <z_time_slice+0x98>)
 8005dfc:	6118      	str	r0, [r3, #16]
 8005dfe:	e00e      	b.n	8005e1e <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8005e00:	2200      	movs	r2, #0
 8005e02:	e7f4      	b.n	8005dee <z_time_slice+0x5e>
 8005e04:	2200      	movs	r2, #0
 8005e06:	e7f2      	b.n	8005dee <z_time_slice+0x5e>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	e7f0      	b.n	8005dee <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ff7b 	bl	8005d08 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8005e12:	f7ff fed9 	bl	8005bc8 <z_reset_time_slice>
 8005e16:	e002      	b.n	8005e1e <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <z_time_slice+0x98>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	611a      	str	r2, [r3, #16]
 8005e1e:	f384 8811 	msr	BASEPRI, r4
 8005e22:	f3bf 8f6f 	isb	sy
}
 8005e26:	bd10      	pop	{r4, pc}
 8005e28:	2000061c 	.word	0x2000061c
 8005e2c:	20000648 	.word	0x20000648
 8005e30:	20000654 	.word	0x20000654
 8005e34:	20000650 	.word	0x20000650
 8005e38:	20000388 	.word	0x20000388

08005e3c <ready_thread>:
{
 8005e3c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 8005e3e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8005e40:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	db2d      	blt.n	8005ea4 <ready_thread+0x68>
 8005e48:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005e4a:	f013 0f1f 	tst.w	r3, #31
 8005e4e:	d105      	bne.n	8005e5c <ready_thread+0x20>
	return node->next != NULL;
 8005e50:	6982      	ldr	r2, [r0, #24]
 8005e52:	b10a      	cbz	r2, 8005e58 <ready_thread+0x1c>
 8005e54:	2200      	movs	r2, #0
 8005e56:	e002      	b.n	8005e5e <ready_thread+0x22>
 8005e58:	2201      	movs	r2, #1
 8005e5a:	e000      	b.n	8005e5e <ready_thread+0x22>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	b30a      	cbz	r2, 8005ea4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8005e60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e64:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <ready_thread+0x7c>)
 8005e68:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005e6c:	429d      	cmp	r5, r3
 8005e6e:	d020      	beq.n	8005eb2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005e70:	b16d      	cbz	r5, 8005e8e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005e72:	4629      	mov	r1, r5
 8005e74:	4620      	mov	r0, r4
 8005e76:	f003 f982 	bl	800917e <z_sched_prio_cmp>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	dc13      	bgt.n	8005ea6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005e7e:	b135      	cbz	r5, 8005e8e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <ready_thread+0x7c>)
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	429d      	cmp	r5, r3
 8005e86:	d002      	beq.n	8005e8e <ready_thread+0x52>
 8005e88:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005e8a:	2d00      	cmp	r5, #0
 8005e8c:	d1f0      	bne.n	8005e70 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <ready_thread+0x7c>)
 8005e90:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8005e92:	f103 011c 	add.w	r1, r3, #28
 8005e96:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8005e98:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8005e9a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8005e9c:	621c      	str	r4, [r3, #32]
		update_cache(0);
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f7ff ff0c 	bl	8005cbc <update_cache>
}
 8005ea4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8005ea6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8005ea8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8005eaa:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8005eac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8005eae:	606c      	str	r4, [r5, #4]
}
 8005eb0:	e7f5      	b.n	8005e9e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	e7dc      	b.n	8005e70 <ready_thread+0x34>
 8005eb6:	bf00      	nop
 8005eb8:	2000061c 	.word	0x2000061c

08005ebc <z_sched_start>:
{
 8005ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005ebe:	f04f 0310 	mov.w	r3, #16
 8005ec2:	f3ef 8411 	mrs	r4, BASEPRI
 8005ec6:	f383 8812 	msr	BASEPRI_MAX, r3
 8005eca:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8005ece:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8005ed0:	f013 0f04 	tst.w	r3, #4
 8005ed4:	d104      	bne.n	8005ee0 <z_sched_start+0x24>
	__asm__ volatile(
 8005ed6:	f384 8811 	msr	BASEPRI, r4
 8005eda:	f3bf 8f6f 	isb	sy
}
 8005ede:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8005ee6:	f7ff ffa9 	bl	8005e3c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8005eea:	4621      	mov	r1, r4
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <z_sched_start+0x38>)
 8005eee:	f7ff feaf 	bl	8005c50 <z_reschedule>
 8005ef2:	e7f4      	b.n	8005ede <z_sched_start+0x22>
 8005ef4:	2000064c 	.word	0x2000064c

08005ef8 <unready_thread>:
{
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8005efc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8005efe:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db08      	blt.n	8005f18 <unready_thread+0x20>
	update_cache(thread == _current);
 8005f06:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <unready_thread+0x30>)
 8005f08:	6898      	ldr	r0, [r3, #8]
 8005f0a:	42a0      	cmp	r0, r4
 8005f0c:	bf14      	ite	ne
 8005f0e:	2000      	movne	r0, #0
 8005f10:	2001      	moveq	r0, #1
 8005f12:	f7ff fed3 	bl	8005cbc <update_cache>
}
 8005f16:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005f18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f1c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4802      	ldr	r0, [pc, #8]	; (8005f2c <unready_thread+0x34>)
 8005f22:	f003 f96b 	bl	80091fc <z_priq_dumb_remove>
}
 8005f26:	e7ee      	b.n	8005f06 <unready_thread+0xe>
 8005f28:	2000061c 	.word	0x2000061c
 8005f2c:	20000638 	.word	0x20000638

08005f30 <z_pend_curr>:
{
 8005f30:	b510      	push	{r4, lr}
 8005f32:	460c      	mov	r4, r1
 8005f34:	4611      	mov	r1, r2
	pending_current = _current;
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <z_pend_curr+0x20>)
 8005f38:	6898      	ldr	r0, [r3, #8]
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <z_pend_curr+0x24>)
 8005f3c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8005f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f42:	f003 f9e8 	bl	8009316 <pend>
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7fd faf2 	bl	8003530 <arch_swap>
}
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	2000061c 	.word	0x2000061c
 8005f54:	20000648 	.word	0x20000648

08005f58 <z_set_prio>:
{
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8005f60:	2300      	movs	r3, #0
	__asm__ volatile(
 8005f62:	f04f 0210 	mov.w	r2, #16
 8005f66:	f3ef 8811 	mrs	r8, BASEPRI
 8005f6a:	f382 8812 	msr	BASEPRI_MAX, r2
 8005f6e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8005f72:	461f      	mov	r7, r3
 8005f74:	e008      	b.n	8005f88 <z_set_prio+0x30>
		if (need_sched) {
 8005f76:	f012 0701 	ands.w	r7, r2, #1
 8005f7a:	d111      	bne.n	8005fa0 <z_set_prio+0x48>
			thread->base.prio = prio;
 8005f7c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8005f7e:	f388 8811 	msr	BASEPRI, r8
 8005f82:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8005f86:	2301      	movs	r3, #1
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d13d      	bne.n	800600a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8005f8e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005f90:	f013 0f1f 	tst.w	r3, #31
 8005f94:	d1ef      	bne.n	8005f76 <z_set_prio+0x1e>
	return node->next != NULL;
 8005f96:	69a1      	ldr	r1, [r4, #24]
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d1ec      	bne.n	8005f76 <z_set_prio+0x1e>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	e7ea      	b.n	8005f76 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8005fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8005fa6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006010 <z_set_prio+0xb8>
 8005faa:	4621      	mov	r1, r4
 8005fac:	4648      	mov	r0, r9
 8005fae:	f003 f925 	bl	80091fc <z_priq_dumb_remove>
				thread->base.prio = prio;
 8005fb2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8005fb4:	7b63      	ldrb	r3, [r4, #13]
 8005fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fba:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8005fbc:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005fc0:	454d      	cmp	r5, r9
 8005fc2:	d020      	beq.n	8006006 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005fc4:	b16d      	cbz	r5, 8005fe2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f003 f8d8 	bl	800917e <z_sched_prio_cmp>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	dc13      	bgt.n	8005ffa <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005fd2:	b135      	cbz	r5, 8005fe2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <z_set_prio+0xbc>)
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	429d      	cmp	r5, r3
 8005fda:	d002      	beq.n	8005fe2 <z_set_prio+0x8a>
 8005fdc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <z_set_prio+0xbc>)
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8005fe6:	f103 011c 	add.w	r1, r3, #28
 8005fea:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8005fec:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8005fee:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8005ff0:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	f7ff fe62 	bl	8005cbc <update_cache>
 8005ff8:	e7c1      	b.n	8005f7e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8005ffa:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8005ffc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8005ffe:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006000:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006002:	606c      	str	r4, [r5, #4]
}
 8006004:	e7f5      	b.n	8005ff2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006006:	2500      	movs	r5, #0
 8006008:	e7dc      	b.n	8005fc4 <z_set_prio+0x6c>
}
 800600a:	4638      	mov	r0, r7
 800600c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006010:	20000638 	.word	0x20000638
 8006014:	2000061c 	.word	0x2000061c

08006018 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8006018:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800601a:	2300      	movs	r3, #0
	__asm__ volatile(
 800601c:	f04f 0210 	mov.w	r2, #16
 8006020:	f3ef 8411 	mrs	r4, BASEPRI
 8006024:	f382 8812 	msr	BASEPRI_MAX, r2
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	e00c      	b.n	8006048 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <k_sched_unlock+0x4c>)
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	7bd3      	ldrb	r3, [r2, #15]
 8006034:	3301      	adds	r3, #1
 8006036:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8006038:	2000      	movs	r0, #0
 800603a:	f7ff fe3f 	bl	8005cbc <update_cache>
	__asm__ volatile(
 800603e:	f384 8811 	msr	BASEPRI, r4
 8006042:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006046:	2301      	movs	r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <k_sched_unlock+0x16>
	__asm__ volatile(
 800604c:	f04f 0310 	mov.w	r3, #16
 8006050:	f3ef 8011 	mrs	r0, BASEPRI
 8006054:	f383 8812 	msr	BASEPRI_MAX, r3
 8006058:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800605c:	f003 f8b9 	bl	80091d2 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop
 8006064:	2000061c 	.word	0x2000061c

08006068 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8006068:	7b43      	ldrb	r3, [r0, #13]
 800606a:	f013 0f08 	tst.w	r3, #8
 800606e:	d142      	bne.n	80060f6 <end_thread+0x8e>
{
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800607a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800607e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8006080:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006084:	d12b      	bne.n	80060de <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8006086:	68ab      	ldr	r3, [r5, #8]
 8006088:	b15b      	cbz	r3, 80060a2 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800608a:	4628      	mov	r0, r5
 800608c:	f003 f875 	bl	800917a <pended_on_thread>
 8006090:	4629      	mov	r1, r5
 8006092:	f003 f8b3 	bl	80091fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8006096:	7b6b      	ldrb	r3, [r5, #13]
 8006098:	f023 0302 	bic.w	r3, r3, #2
 800609c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60ab      	str	r3, [r5, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 80060a2:	f105 0018 	add.w	r0, r5, #24
 80060a6:	f003 f9c1 	bl	800942c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 80060aa:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 80060ac:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80060ae:	42ac      	cmp	r4, r5
 80060b0:	d01d      	beq.n	80060ee <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80060b2:	b1e4      	cbz	r4, 80060ee <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80060b4:	4620      	mov	r0, r4
 80060b6:	f003 f860 	bl	800917a <pended_on_thread>
 80060ba:	4621      	mov	r1, r4
 80060bc:	f003 f89e 	bl	80091fc <z_priq_dumb_remove>
 80060c0:	7b63      	ldrb	r3, [r4, #13]
 80060c2:	f023 0302 	bic.w	r3, r3, #2
 80060c6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80060c8:	2600      	movs	r6, #0
 80060ca:	60a6      	str	r6, [r4, #8]
 80060cc:	f104 0018 	add.w	r0, r4, #24
 80060d0:	f003 f9ac 	bl	800942c <z_abort_timeout>
 80060d4:	67a6      	str	r6, [r4, #120]	; 0x78
		ready_thread(thread);
 80060d6:	4620      	mov	r0, r4
 80060d8:	f7ff feb0 	bl	8005e3c <ready_thread>
 80060dc:	e7e6      	b.n	80060ac <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80060de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e2:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 80060e4:	4601      	mov	r1, r0
 80060e6:	4804      	ldr	r0, [pc, #16]	; (80060f8 <end_thread+0x90>)
 80060e8:	f003 f888 	bl	80091fc <z_priq_dumb_remove>
}
 80060ec:	e7cb      	b.n	8006086 <end_thread+0x1e>
		update_cache(1);
 80060ee:	2001      	movs	r0, #1
 80060f0:	f7ff fde4 	bl	8005cbc <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	4770      	bx	lr
 80060f8:	20000638 	.word	0x20000638

080060fc <z_sched_init>:
{
 80060fc:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <z_sched_init+0x18>)
 8006100:	f103 021c 	add.w	r2, r3, #28
 8006104:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 8006106:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8006108:	2100      	movs	r1, #0
 800610a:	4608      	mov	r0, r1
 800610c:	f7ff fd72 	bl	8005bf4 <k_sched_time_slice_set>
}
 8006110:	bd08      	pop	{r3, pc}
 8006112:	bf00      	nop
 8006114:	2000061c 	.word	0x2000061c

08006118 <z_impl_z_current_get>:
}
 8006118:	4b01      	ldr	r3, [pc, #4]	; (8006120 <z_impl_z_current_get+0x8>)
 800611a:	6898      	ldr	r0, [r3, #8]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	2000061c 	.word	0x2000061c

08006124 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	f04f 0310 	mov.w	r3, #16
 800612a:	f3ef 8511 	mrs	r5, BASEPRI
 800612e:	f383 8812 	msr	BASEPRI_MAX, r3
 8006132:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8006136:	7b43      	ldrb	r3, [r0, #13]
 8006138:	f013 0f08 	tst.w	r3, #8
 800613c:	d004      	beq.n	8006148 <z_thread_abort+0x24>
	__asm__ volatile(
 800613e:	f385 8811 	msr	BASEPRI, r5
 8006142:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	4604      	mov	r4, r0
	end_thread(thread);
 800614a:	f7ff ff8d 	bl	8006068 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <z_thread_abort+0x4c>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	42a3      	cmp	r3, r4
 8006154:	d004      	beq.n	8006160 <z_thread_abort+0x3c>
 8006156:	f385 8811 	msr	BASEPRI, r5
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	e7f2      	b.n	8006146 <z_thread_abort+0x22>
 8006160:	f3ef 8305 	mrs	r3, IPSR
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f6      	bne.n	8006156 <z_thread_abort+0x32>
 8006168:	4628      	mov	r0, r5
 800616a:	f7fd f9e1 	bl	8003530 <arch_swap>
	return ret;
 800616e:	e7f2      	b.n	8006156 <z_thread_abort+0x32>
 8006170:	2000061c 	.word	0x2000061c

08006174 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8006174:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8006176:	4806      	ldr	r0, [pc, #24]	; (8006190 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8006178:	4a06      	ldr	r2, [pc, #24]	; (8006194 <z_data_copy+0x20>)
 800617a:	1a12      	subs	r2, r2, r0
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <z_data_copy+0x24>)
 800617e:	f003 f9c9 	bl	8009514 <memcpy>
 8006182:	4a06      	ldr	r2, [pc, #24]	; (800619c <z_data_copy+0x28>)
 8006184:	4906      	ldr	r1, [pc, #24]	; (80061a0 <z_data_copy+0x2c>)
 8006186:	4807      	ldr	r0, [pc, #28]	; (80061a4 <z_data_copy+0x30>)
 8006188:	f003 f9c4 	bl	8009514 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800618c:	bd08      	pop	{r3, pc}
 800618e:	bf00      	nop
 8006190:	20000000 	.word	0x20000000
 8006194:	200002cc 	.word	0x200002cc
 8006198:	0800af38 	.word	0x0800af38
 800619c:	00000000 	.word	0x00000000
 80061a0:	0800af38 	.word	0x0800af38
 80061a4:	20000000 	.word	0x20000000

080061a8 <first>:
	return list->head == list;
 80061a8:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <first+0x10>)
 80061aa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80061ac:	4298      	cmp	r0, r3
 80061ae:	d000      	beq.n	80061b2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 80061b0:	4770      	bx	lr
 80061b2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 80061b4:	e7fc      	b.n	80061b0 <first+0x8>
 80061b6:	bf00      	nop
 80061b8:	2000007c 	.word	0x2000007c

080061bc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80061bc:	b130      	cbz	r0, 80061cc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 80061be:	4a04      	ldr	r2, [pc, #16]	; (80061d0 <next+0x14>)
 80061c0:	6852      	ldr	r2, [r2, #4]
 80061c2:	4290      	cmp	r0, r2
 80061c4:	d001      	beq.n	80061ca <next+0xe>
 80061c6:	6800      	ldr	r0, [r0, #0]
 80061c8:	4770      	bx	lr
 80061ca:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	2000007c 	.word	0x2000007c

080061d4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 80061d4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80061d6:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <elapsed+0x14>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b10b      	cbz	r3, 80061e0 <elapsed+0xc>
 80061dc:	2000      	movs	r0, #0
}
 80061de:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 80061e0:	f7fe ffea 	bl	80051b8 <sys_clock_elapsed>
 80061e4:	e7fb      	b.n	80061de <elapsed+0xa>
 80061e6:	bf00      	nop
 80061e8:	20000658 	.word	0x20000658

080061ec <next_timeout>:

static int32_t next_timeout(void)
{
 80061ec:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 80061ee:	f7ff ffdb 	bl	80061a8 <first>
 80061f2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 80061f4:	f7ff ffee 	bl	80061d4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 80061f8:	b18c      	cbz	r4, 800621e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6962      	ldr	r2, [r4, #20]
 80061fe:	1a1b      	subs	r3, r3, r0
 8006200:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8006204:	2b01      	cmp	r3, #1
 8006206:	f172 0100 	sbcs.w	r1, r2, #0
 800620a:	db11      	blt.n	8006230 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800620c:	4618      	mov	r0, r3
 800620e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006212:	f172 0300 	sbcs.w	r3, r2, #0
 8006216:	db04      	blt.n	8006222 <next_timeout+0x36>
 8006218:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800621c:	e001      	b.n	8006222 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 800621e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006222:	4b04      	ldr	r3, [pc, #16]	; (8006234 <next_timeout+0x48>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	b113      	cbz	r3, 800622e <next_timeout+0x42>
 8006228:	4283      	cmp	r3, r0
 800622a:	da00      	bge.n	800622e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 800622c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800622e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8006230:	2000      	movs	r0, #0
 8006232:	e7f6      	b.n	8006222 <next_timeout+0x36>
 8006234:	2000061c 	.word	0x2000061c

08006238 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800623c:	bf08      	it	eq
 800623e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8006242:	d07f      	beq.n	8006344 <z_add_timeout+0x10c>
{
 8006244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	4691      	mov	r9, r2
 800624c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800624e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8006250:	2300      	movs	r3, #0
	__asm__ volatile(
 8006252:	f04f 0210 	mov.w	r2, #16
 8006256:	f3ef 8711 	mrs	r7, BASEPRI
 800625a:	f382 8812 	msr	BASEPRI_MAX, r2
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	e021      	b.n	80062a8 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8006264:	f7ff ffb6 	bl	80061d4 <elapsed>
 8006268:	eb19 0800 	adds.w	r8, r9, r0
 800626c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8006270:	f118 0301 	adds.w	r3, r8, #1
 8006274:	f140 0000 	adc.w	r0, r0, #0
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	6160      	str	r0, [r4, #20]
 800627c:	e038      	b.n	80062f0 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800627e:	1a51      	subs	r1, r2, r1
 8006280:	eb66 0303 	sbc.w	r3, r6, r3
 8006284:	6101      	str	r1, [r0, #16]
 8006286:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8006288:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800628a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800628c:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800628e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006290:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8006292:	2800      	cmp	r0, #0
 8006294:	d040      	beq.n	8006318 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8006296:	f7ff ff87 	bl	80061a8 <first>
 800629a:	4284      	cmp	r4, r0
 800629c:	d043      	beq.n	8006326 <z_add_timeout+0xee>
	__asm__ volatile(
 800629e:	f387 8811 	msr	BASEPRI, r7
 80062a2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80062a6:	2301      	movs	r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d149      	bne.n	8006340 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	ebb2 0209 	subs.w	r2, r2, r9
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062b8:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dbd1      	blt.n	8006264 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80062c0:	4b21      	ldr	r3, [pc, #132]	; (8006348 <z_add_timeout+0x110>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	eb19 0202 	adds.w	r2, r9, r2
 80062ca:	eb43 0305 	adc.w	r3, r3, r5
 80062ce:	f06f 0801 	mvn.w	r8, #1
 80062d2:	ebb8 0802 	subs.w	r8, r8, r2
 80062d6:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 80062da:	4641      	mov	r1, r8
 80062dc:	461a      	mov	r2, r3
 80062de:	f1b8 0f01 	cmp.w	r8, #1
 80062e2:	f173 0300 	sbcs.w	r3, r3, #0
 80062e6:	da01      	bge.n	80062ec <z_add_timeout+0xb4>
 80062e8:	2101      	movs	r1, #1
 80062ea:	2200      	movs	r2, #0
 80062ec:	6121      	str	r1, [r4, #16]
 80062ee:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 80062f0:	f7ff ff5a 	bl	80061a8 <first>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0cc      	beq.n	8006292 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 80062f8:	6902      	ldr	r2, [r0, #16]
 80062fa:	6946      	ldr	r6, [r0, #20]
 80062fc:	6921      	ldr	r1, [r4, #16]
 80062fe:	6963      	ldr	r3, [r4, #20]
 8006300:	4291      	cmp	r1, r2
 8006302:	eb73 0c06 	sbcs.w	ip, r3, r6
 8006306:	dbba      	blt.n	800627e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8006308:	1a89      	subs	r1, r1, r2
 800630a:	eb63 0306 	sbc.w	r3, r3, r6
 800630e:	6121      	str	r1, [r4, #16]
 8006310:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006312:	f7ff ff53 	bl	80061bc <next>
 8006316:	e7ed      	b.n	80062f4 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <z_add_timeout+0x114>)
 800631a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800631c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800631e:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006320:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006322:	605c      	str	r4, [r3, #4]
}
 8006324:	e7b7      	b.n	8006296 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8006326:	f7ff ff61 	bl	80061ec <next_timeout>

			if (next_time == 0 ||
 800632a:	4603      	mov	r3, r0
 800632c:	b118      	cbz	r0, 8006336 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <z_add_timeout+0x118>)
 8006330:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8006332:	4282      	cmp	r2, r0
 8006334:	d0b3      	beq.n	800629e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe febd 	bl	80050b8 <sys_clock_set_timeout>
 800633e:	e7ae      	b.n	800629e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8006340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000488 	.word	0x20000488
 800634c:	2000007c 	.word	0x2000007c
 8006350:	2000061c 	.word	0x2000061c

08006354 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8006358:	f7ff fd1a 	bl	8005d90 <z_time_slice>
	__asm__ volatile(
 800635c:	f04f 0310 	mov.w	r3, #16
 8006360:	f3ef 8511 	mrs	r5, BASEPRI
 8006364:	f383 8812 	msr	BASEPRI_MAX, r3
 8006368:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800636c:	4b28      	ldr	r3, [pc, #160]	; (8006410 <sys_clock_announce+0xbc>)
 800636e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8006370:	e020      	b.n	80063b4 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8006372:	4828      	ldr	r0, [pc, #160]	; (8006414 <sys_clock_announce+0xc0>)
 8006374:	6801      	ldr	r1, [r0, #0]
 8006376:	6846      	ldr	r6, [r0, #4]
 8006378:	1889      	adds	r1, r1, r2
 800637a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	4a22      	ldr	r2, [pc, #136]	; (8006410 <sys_clock_announce+0xbc>)
 8006386:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8006388:	2200      	movs	r2, #0
 800638a:	2300      	movs	r3, #0
 800638c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8006390:	4620      	mov	r0, r4
 8006392:	f003 f834 	bl	80093fe <remove_timeout>
	__asm__ volatile(
 8006396:	f385 8811 	msr	BASEPRI, r5
 800639a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	4620      	mov	r0, r4
 80063a2:	4798      	blx	r3
	__asm__ volatile(
 80063a4:	f04f 0310 	mov.w	r3, #16
 80063a8:	f3ef 8511 	mrs	r5, BASEPRI
 80063ac:	f383 8812 	msr	BASEPRI_MAX, r3
 80063b0:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80063b4:	f7ff fef8 	bl	80061a8 <first>
 80063b8:	4604      	mov	r4, r0
 80063ba:	b140      	cbz	r0, 80063ce <sys_clock_announce+0x7a>
 80063bc:	6902      	ldr	r2, [r0, #16]
 80063be:	6941      	ldr	r1, [r0, #20]
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <sys_clock_announce+0xbc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	17d8      	asrs	r0, r3, #31
 80063c6:	4293      	cmp	r3, r2
 80063c8:	eb70 0101 	sbcs.w	r1, r0, r1
 80063cc:	dad1      	bge.n	8006372 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 80063ce:	b144      	cbz	r4, 80063e2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 80063d0:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <sys_clock_announce+0xbc>)
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	6962      	ldr	r2, [r4, #20]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 80063e2:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <sys_clock_announce+0xc0>)
 80063e4:	4e0a      	ldr	r6, [pc, #40]	; (8006410 <sys_clock_announce+0xbc>)
 80063e6:	6830      	ldr	r0, [r6, #0]
 80063e8:	6813      	ldr	r3, [r2, #0]
 80063ea:	6851      	ldr	r1, [r2, #4]
 80063ec:	181b      	adds	r3, r3, r0
 80063ee:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 80063f6:	2400      	movs	r4, #0
 80063f8:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80063fa:	f7ff fef7 	bl	80061ec <next_timeout>
 80063fe:	4621      	mov	r1, r4
 8006400:	f7fe fe5a 	bl	80050b8 <sys_clock_set_timeout>
	__asm__ volatile(
 8006404:	f385 8811 	msr	BASEPRI, r5
 8006408:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	bf00      	nop
 8006410:	20000658 	.word	0x20000658
 8006414:	20000488 	.word	0x20000488

08006418 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8006418:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800641a:	2300      	movs	r3, #0
	__asm__ volatile(
 800641c:	f04f 0210 	mov.w	r2, #16
 8006420:	f3ef 8411 	mrs	r4, BASEPRI
 8006424:	f382 8812 	msr	BASEPRI_MAX, r2
 8006428:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800642c:	4618      	mov	r0, r3
 800642e:	4619      	mov	r1, r3
 8006430:	e00c      	b.n	800644c <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 8006432:	f7fe fec1 	bl	80051b8 <sys_clock_elapsed>
 8006436:	4a07      	ldr	r2, [pc, #28]	; (8006454 <sys_clock_tick_get+0x3c>)
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	6851      	ldr	r1, [r2, #4]
 800643c:	18c0      	adds	r0, r0, r3
 800643e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8006442:	f384 8811 	msr	BASEPRI, r4
 8006446:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800644a:	2301      	movs	r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8006450:	bd10      	pop	{r4, pc}
 8006452:	bf00      	nop
 8006454:	20000488 	.word	0x20000488

08006458 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8006458:	b900      	cbnz	r0, 800645c <z_impl_k_busy_wait+0x4>
 800645a:	4770      	bx	lr
{
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8006460:	f7fe feca 	bl	80051f8 <sys_clock_cycle_get_32>
 8006464:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8006466:	4907      	ldr	r1, [pc, #28]	; (8006484 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8006468:	4a07      	ldr	r2, [pc, #28]	; (8006488 <z_impl_k_busy_wait+0x30>)
 800646a:	2300      	movs	r3, #0
 800646c:	fba4 0101 	umull	r0, r1, r4, r1
 8006470:	f7fa fab4 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 8006474:	4604      	mov	r4, r0
 8006476:	f7fe febf 	bl	80051f8 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800647a:	1b40      	subs	r0, r0, r5
 800647c:	42a0      	cmp	r0, r4
 800647e:	d3fa      	bcc.n	8006476 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8006480:	bd38      	pop	{r3, r4, r5, pc}
 8006482:	bf00      	nop
 8006484:	04c4b400 	.word	0x04c4b400
 8006488:	000f4240 	.word	0x000f4240

0800648c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4604      	mov	r4, r0
	__asm__ volatile(
 8006490:	f04f 0310 	mov.w	r3, #16
 8006494:	f3ef 8511 	mrs	r5, BASEPRI
 8006498:	f383 8812 	msr	BASEPRI_MAX, r3
 800649c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80064a0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80064a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80064a4:	ea52 0103 	orrs.w	r1, r2, r3
 80064a8:	d005      	beq.n	80064b6 <z_timer_expiration_handler+0x2a>
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ae:	bf08      	it	eq
 80064b0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80064b4:	d119      	bne.n	80064ea <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80064b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064b8:	3301      	adds	r3, #1
 80064ba:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80064bc:	6a23      	ldr	r3, [r4, #32]
 80064be:	b10b      	cbz	r3, 80064c4 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 80064c0:	4620      	mov	r0, r4
 80064c2:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80064c4:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 80064c8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	d013      	beq.n	80064f6 <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80064ce:	b194      	cbz	r4, 80064f6 <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 80064d0:	4620      	mov	r0, r4
 80064d2:	f002 fe5e 	bl	8009192 <z_unpend_thread_no_timeout>
 80064d6:	2300      	movs	r3, #0
 80064d8:	67a3      	str	r3, [r4, #120]	; 0x78
	__asm__ volatile(
 80064da:	f385 8811 	msr	BASEPRI, r5
 80064de:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 80064e2:	4620      	mov	r0, r4
 80064e4:	f002 fe99 	bl	800921a <z_ready_thread>
}
 80064e8:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80064ea:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80064ee:	4904      	ldr	r1, [pc, #16]	; (8006500 <z_timer_expiration_handler+0x74>)
 80064f0:	f7ff fea2 	bl	8006238 <z_add_timeout>
 80064f4:	e7df      	b.n	80064b6 <z_timer_expiration_handler+0x2a>
 80064f6:	f385 8811 	msr	BASEPRI, r5
 80064fa:	f3bf 8f6f 	isb	sy
		return;
 80064fe:	e7f3      	b.n	80064e8 <z_timer_expiration_handler+0x5c>
 8006500:	0800648d 	.word	0x0800648d

08006504 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	461d      	mov	r5, r3
 800650a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800650e:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006514:	bf08      	it	eq
 8006516:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800651a:	d02f      	beq.n	800657c <z_impl_k_timer_start+0x78>
 800651c:	4604      	mov	r4, r0
 800651e:	4616      	mov	r6, r2
 8006520:	4613      	mov	r3, r2
 8006522:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8006524:	4642      	mov	r2, r8
 8006526:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800652a:	bf08      	it	eq
 800652c:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8006530:	d00d      	beq.n	800654e <z_impl_k_timer_start+0x4a>
 8006532:	ea58 0c07 	orrs.w	ip, r8, r7
 8006536:	d00a      	beq.n	800654e <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 8006538:	f06f 0c01 	mvn.w	ip, #1
 800653c:	ebbc 0c08 	subs.w	ip, ip, r8
 8006540:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006544:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8006548:	f1bc 0f00 	cmp.w	ip, #0
 800654c:	db18      	blt.n	8006580 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800654e:	f06f 0201 	mvn.w	r2, #1
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006558:	eb62 0201 	sbc.w	r2, r2, r1
 800655c:	2a00      	cmp	r2, #0
 800655e:	db1c      	blt.n	800659a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8006560:	4620      	mov	r0, r4
 8006562:	f002 ff63 	bl	800942c <z_abort_timeout>
	timer->period = period;
 8006566:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 800656a:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8006570:	4632      	mov	r2, r6
 8006572:	462b      	mov	r3, r5
 8006574:	490d      	ldr	r1, [pc, #52]	; (80065ac <z_impl_k_timer_start+0xa8>)
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff fe5e 	bl	8006238 <z_add_timeout>
		     duration);
}
 800657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8006580:	3a01      	subs	r2, #1
 8006582:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 8006586:	4690      	mov	r8, r2
 8006588:	4607      	mov	r7, r0
 800658a:	2a01      	cmp	r2, #1
 800658c:	f170 0200 	sbcs.w	r2, r0, #0
 8006590:	dadd      	bge.n	800654e <z_impl_k_timer_start+0x4a>
 8006592:	f04f 0801 	mov.w	r8, #1
 8006596:	2700      	movs	r7, #0
 8006598:	e7d9      	b.n	800654e <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800659a:	1e5e      	subs	r6, r3, #1
 800659c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80065a0:	460d      	mov	r5, r1
 80065a2:	2900      	cmp	r1, #0
 80065a4:	dadc      	bge.n	8006560 <z_impl_k_timer_start+0x5c>
 80065a6:	2600      	movs	r6, #0
 80065a8:	4635      	mov	r5, r6
 80065aa:	e7d9      	b.n	8006560 <z_impl_k_timer_start+0x5c>
 80065ac:	0800648d 	.word	0x0800648d

080065b0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 80065b0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80065b2:	4a03      	ldr	r2, [pc, #12]	; (80065c0 <boot_banner+0x10>)
 80065b4:	4903      	ldr	r1, [pc, #12]	; (80065c4 <boot_banner+0x14>)
 80065b6:	4804      	ldr	r0, [pc, #16]	; (80065c8 <boot_banner+0x18>)
 80065b8:	f001 fc01 	bl	8007dbe <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 80065bc:	bd08      	pop	{r3, pc}
 80065be:	bf00      	nop
 80065c0:	0800abf0 	.word	0x0800abf0
 80065c4:	0800ac18 	.word	0x0800ac18
 80065c8:	0800ac28 	.word	0x0800ac28

080065cc <malloc>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	; (80065d8 <malloc+0xc>)
 80065ce:	4601      	mov	r1, r0
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f000 b84d 	b.w	8006670 <_malloc_r>
 80065d6:	bf00      	nop
 80065d8:	20000084 	.word	0x20000084

080065dc <_free_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4605      	mov	r5, r0
 80065e0:	2900      	cmp	r1, #0
 80065e2:	d041      	beq.n	8006668 <_free_r+0x8c>
 80065e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e8:	1f0c      	subs	r4, r1, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfb8      	it	lt
 80065ee:	18e4      	addlt	r4, r4, r3
 80065f0:	f000 fbfc 	bl	8006dec <__malloc_lock>
 80065f4:	4a1d      	ldr	r2, [pc, #116]	; (800666c <_free_r+0x90>)
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	b933      	cbnz	r3, 8006608 <_free_r+0x2c>
 80065fa:	6063      	str	r3, [r4, #4]
 80065fc:	6014      	str	r4, [r2, #0]
 80065fe:	4628      	mov	r0, r5
 8006600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006604:	f000 bbf8 	b.w	8006df8 <__malloc_unlock>
 8006608:	42a3      	cmp	r3, r4
 800660a:	d908      	bls.n	800661e <_free_r+0x42>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428b      	cmp	r3, r1
 8006612:	bf01      	itttt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	1809      	addeq	r1, r1, r0
 800661a:	6021      	streq	r1, [r4, #0]
 800661c:	e7ed      	b.n	80065fa <_free_r+0x1e>
 800661e:	461a      	mov	r2, r3
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	b10b      	cbz	r3, 8006628 <_free_r+0x4c>
 8006624:	42a3      	cmp	r3, r4
 8006626:	d9fa      	bls.n	800661e <_free_r+0x42>
 8006628:	6811      	ldr	r1, [r2, #0]
 800662a:	1850      	adds	r0, r2, r1
 800662c:	42a0      	cmp	r0, r4
 800662e:	d10b      	bne.n	8006648 <_free_r+0x6c>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	4401      	add	r1, r0
 8006634:	1850      	adds	r0, r2, r1
 8006636:	4283      	cmp	r3, r0
 8006638:	6011      	str	r1, [r2, #0]
 800663a:	d1e0      	bne.n	80065fe <_free_r+0x22>
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	6053      	str	r3, [r2, #4]
 8006642:	4401      	add	r1, r0
 8006644:	6011      	str	r1, [r2, #0]
 8006646:	e7da      	b.n	80065fe <_free_r+0x22>
 8006648:	d902      	bls.n	8006650 <_free_r+0x74>
 800664a:	230c      	movs	r3, #12
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	e7d6      	b.n	80065fe <_free_r+0x22>
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	1821      	adds	r1, r4, r0
 8006654:	428b      	cmp	r3, r1
 8006656:	bf04      	itt	eq
 8006658:	6819      	ldreq	r1, [r3, #0]
 800665a:	685b      	ldreq	r3, [r3, #4]
 800665c:	6063      	str	r3, [r4, #4]
 800665e:	bf04      	itt	eq
 8006660:	1809      	addeq	r1, r1, r0
 8006662:	6021      	streq	r1, [r4, #0]
 8006664:	6054      	str	r4, [r2, #4]
 8006666:	e7ca      	b.n	80065fe <_free_r+0x22>
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	2000065c 	.word	0x2000065c

08006670 <_malloc_r>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	1ccd      	adds	r5, r1, #3
 8006674:	f025 0503 	bic.w	r5, r5, #3
 8006678:	3508      	adds	r5, #8
 800667a:	2d0c      	cmp	r5, #12
 800667c:	bf38      	it	cc
 800667e:	250c      	movcc	r5, #12
 8006680:	2d00      	cmp	r5, #0
 8006682:	4606      	mov	r6, r0
 8006684:	db01      	blt.n	800668a <_malloc_r+0x1a>
 8006686:	42a9      	cmp	r1, r5
 8006688:	d903      	bls.n	8006692 <_malloc_r+0x22>
 800668a:	230c      	movs	r3, #12
 800668c:	6033      	str	r3, [r6, #0]
 800668e:	2000      	movs	r0, #0
 8006690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006692:	f000 fbab 	bl	8006dec <__malloc_lock>
 8006696:	4921      	ldr	r1, [pc, #132]	; (800671c <_malloc_r+0xac>)
 8006698:	680a      	ldr	r2, [r1, #0]
 800669a:	4614      	mov	r4, r2
 800669c:	b99c      	cbnz	r4, 80066c6 <_malloc_r+0x56>
 800669e:	4f20      	ldr	r7, [pc, #128]	; (8006720 <_malloc_r+0xb0>)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	b923      	cbnz	r3, 80066ae <_malloc_r+0x3e>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4630      	mov	r0, r6
 80066a8:	f000 fb8c 	bl	8006dc4 <_sbrk_r>
 80066ac:	6038      	str	r0, [r7, #0]
 80066ae:	4629      	mov	r1, r5
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 fb87 	bl	8006dc4 <_sbrk_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d123      	bne.n	8006702 <_malloc_r+0x92>
 80066ba:	230c      	movs	r3, #12
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	4630      	mov	r0, r6
 80066c0:	f000 fb9a 	bl	8006df8 <__malloc_unlock>
 80066c4:	e7e3      	b.n	800668e <_malloc_r+0x1e>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	1b5b      	subs	r3, r3, r5
 80066ca:	d417      	bmi.n	80066fc <_malloc_r+0x8c>
 80066cc:	2b0b      	cmp	r3, #11
 80066ce:	d903      	bls.n	80066d8 <_malloc_r+0x68>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	441c      	add	r4, r3
 80066d4:	6025      	str	r5, [r4, #0]
 80066d6:	e004      	b.n	80066e2 <_malloc_r+0x72>
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	42a2      	cmp	r2, r4
 80066dc:	bf0c      	ite	eq
 80066de:	600b      	streq	r3, [r1, #0]
 80066e0:	6053      	strne	r3, [r2, #4]
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 fb88 	bl	8006df8 <__malloc_unlock>
 80066e8:	f104 000b 	add.w	r0, r4, #11
 80066ec:	1d23      	adds	r3, r4, #4
 80066ee:	f020 0007 	bic.w	r0, r0, #7
 80066f2:	1ac2      	subs	r2, r0, r3
 80066f4:	d0cc      	beq.n	8006690 <_malloc_r+0x20>
 80066f6:	1a1b      	subs	r3, r3, r0
 80066f8:	50a3      	str	r3, [r4, r2]
 80066fa:	e7c9      	b.n	8006690 <_malloc_r+0x20>
 80066fc:	4622      	mov	r2, r4
 80066fe:	6864      	ldr	r4, [r4, #4]
 8006700:	e7cc      	b.n	800669c <_malloc_r+0x2c>
 8006702:	1cc4      	adds	r4, r0, #3
 8006704:	f024 0403 	bic.w	r4, r4, #3
 8006708:	42a0      	cmp	r0, r4
 800670a:	d0e3      	beq.n	80066d4 <_malloc_r+0x64>
 800670c:	1a21      	subs	r1, r4, r0
 800670e:	4630      	mov	r0, r6
 8006710:	f000 fb58 	bl	8006dc4 <_sbrk_r>
 8006714:	3001      	adds	r0, #1
 8006716:	d1dd      	bne.n	80066d4 <_malloc_r+0x64>
 8006718:	e7cf      	b.n	80066ba <_malloc_r+0x4a>
 800671a:	bf00      	nop
 800671c:	2000065c 	.word	0x2000065c
 8006720:	20000660 	.word	0x20000660

08006724 <_printf_float>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	b091      	sub	sp, #68	; 0x44
 800672a:	460c      	mov	r4, r1
 800672c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006730:	4616      	mov	r6, r2
 8006732:	461f      	mov	r7, r3
 8006734:	4605      	mov	r5, r0
 8006736:	f000 fb55 	bl	8006de4 <_localeconv_r>
 800673a:	6803      	ldr	r3, [r0, #0]
 800673c:	9309      	str	r3, [sp, #36]	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7fa fb7f 	bl	8000e42 <strlen>
 8006744:	2300      	movs	r3, #0
 8006746:	930e      	str	r3, [sp, #56]	; 0x38
 8006748:	f8d8 3000 	ldr.w	r3, [r8]
 800674c:	900a      	str	r0, [sp, #40]	; 0x28
 800674e:	3307      	adds	r3, #7
 8006750:	f023 0307 	bic.w	r3, r3, #7
 8006754:	f103 0208 	add.w	r2, r3, #8
 8006758:	f894 9018 	ldrb.w	r9, [r4, #24]
 800675c:	f8d4 b000 	ldr.w	fp, [r4]
 8006760:	f8c8 2000 	str.w	r2, [r8]
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800676c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006770:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006774:	930b      	str	r3, [sp, #44]	; 0x2c
 8006776:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006778:	4b9c      	ldr	r3, [pc, #624]	; (80069ec <_printf_float+0x2c8>)
 800677a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800677e:	4640      	mov	r0, r8
 8006780:	f7fa f9ce 	bl	8000b20 <__aeabi_dcmpun>
 8006784:	bb70      	cbnz	r0, 80067e4 <_printf_float+0xc0>
 8006786:	4b99      	ldr	r3, [pc, #612]	; (80069ec <_printf_float+0x2c8>)
 8006788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800678a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800678e:	4640      	mov	r0, r8
 8006790:	f7fa f9a8 	bl	8000ae4 <__aeabi_dcmple>
 8006794:	bb30      	cbnz	r0, 80067e4 <_printf_float+0xc0>
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	4640      	mov	r0, r8
 800679c:	4651      	mov	r1, sl
 800679e:	f7fa f997 	bl	8000ad0 <__aeabi_dcmplt>
 80067a2:	b110      	cbz	r0, 80067aa <_printf_float+0x86>
 80067a4:	232d      	movs	r3, #45	; 0x2d
 80067a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067aa:	4b91      	ldr	r3, [pc, #580]	; (80069f0 <_printf_float+0x2cc>)
 80067ac:	4891      	ldr	r0, [pc, #580]	; (80069f4 <_printf_float+0x2d0>)
 80067ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067b2:	bf94      	ite	ls
 80067b4:	4698      	movls	r8, r3
 80067b6:	4680      	movhi	r8, r0
 80067b8:	2303      	movs	r3, #3
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	f02b 0304 	bic.w	r3, fp, #4
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	f04f 0a00 	mov.w	sl, #0
 80067c6:	9700      	str	r7, [sp, #0]
 80067c8:	4633      	mov	r3, r6
 80067ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f002 ff54 	bl	800967c <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	f040 808f 	bne.w	80068f8 <_printf_float+0x1d4>
 80067da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067de:	b011      	add	sp, #68	; 0x44
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	4642      	mov	r2, r8
 80067e6:	4653      	mov	r3, sl
 80067e8:	4640      	mov	r0, r8
 80067ea:	4651      	mov	r1, sl
 80067ec:	f7fa f998 	bl	8000b20 <__aeabi_dcmpun>
 80067f0:	b140      	cbz	r0, 8006804 <_printf_float+0xe0>
 80067f2:	f1ba 0f00 	cmp.w	sl, #0
 80067f6:	bfbc      	itt	lt
 80067f8:	232d      	movlt	r3, #45	; 0x2d
 80067fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067fe:	487e      	ldr	r0, [pc, #504]	; (80069f8 <_printf_float+0x2d4>)
 8006800:	4b7e      	ldr	r3, [pc, #504]	; (80069fc <_printf_float+0x2d8>)
 8006802:	e7d4      	b.n	80067ae <_printf_float+0x8a>
 8006804:	6863      	ldr	r3, [r4, #4]
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800680c:	d142      	bne.n	8006894 <_printf_float+0x170>
 800680e:	2306      	movs	r3, #6
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	9206      	str	r2, [sp, #24]
 8006816:	aa0e      	add	r2, sp, #56	; 0x38
 8006818:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800681c:	aa0d      	add	r2, sp, #52	; 0x34
 800681e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006822:	9203      	str	r2, [sp, #12]
 8006824:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006828:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4642      	mov	r2, r8
 8006834:	4653      	mov	r3, sl
 8006836:	4628      	mov	r0, r5
 8006838:	910b      	str	r1, [sp, #44]	; 0x2c
 800683a:	f002 fe81 	bl	8009540 <__cvt>
 800683e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006840:	2947      	cmp	r1, #71	; 0x47
 8006842:	4680      	mov	r8, r0
 8006844:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006846:	d108      	bne.n	800685a <_printf_float+0x136>
 8006848:	1cc8      	adds	r0, r1, #3
 800684a:	db02      	blt.n	8006852 <_printf_float+0x12e>
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	4299      	cmp	r1, r3
 8006850:	dd40      	ble.n	80068d4 <_printf_float+0x1b0>
 8006852:	f1a9 0902 	sub.w	r9, r9, #2
 8006856:	fa5f f989 	uxtb.w	r9, r9
 800685a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800685e:	d81f      	bhi.n	80068a0 <_printf_float+0x17c>
 8006860:	3901      	subs	r1, #1
 8006862:	464a      	mov	r2, r9
 8006864:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006868:	910d      	str	r1, [sp, #52]	; 0x34
 800686a:	f002 fec9 	bl	8009600 <__exponent>
 800686e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006870:	1813      	adds	r3, r2, r0
 8006872:	2a01      	cmp	r2, #1
 8006874:	4682      	mov	sl, r0
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	dc02      	bgt.n	8006880 <_printf_float+0x15c>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	07d2      	lsls	r2, r2, #31
 800687e:	d501      	bpl.n	8006884 <_printf_float+0x160>
 8006880:	3301      	adds	r3, #1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006888:	2b00      	cmp	r3, #0
 800688a:	d09c      	beq.n	80067c6 <_printf_float+0xa2>
 800688c:	232d      	movs	r3, #45	; 0x2d
 800688e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006892:	e798      	b.n	80067c6 <_printf_float+0xa2>
 8006894:	2947      	cmp	r1, #71	; 0x47
 8006896:	d1bc      	bne.n	8006812 <_printf_float+0xee>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1ba      	bne.n	8006812 <_printf_float+0xee>
 800689c:	2301      	movs	r3, #1
 800689e:	e7b7      	b.n	8006810 <_printf_float+0xec>
 80068a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068a4:	d118      	bne.n	80068d8 <_printf_float+0x1b4>
 80068a6:	2900      	cmp	r1, #0
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	dd0b      	ble.n	80068c4 <_printf_float+0x1a0>
 80068ac:	6121      	str	r1, [r4, #16]
 80068ae:	b913      	cbnz	r3, 80068b6 <_printf_float+0x192>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	07d0      	lsls	r0, r2, #31
 80068b4:	d502      	bpl.n	80068bc <_printf_float+0x198>
 80068b6:	3301      	adds	r3, #1
 80068b8:	440b      	add	r3, r1
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	65a1      	str	r1, [r4, #88]	; 0x58
 80068be:	f04f 0a00 	mov.w	sl, #0
 80068c2:	e7df      	b.n	8006884 <_printf_float+0x160>
 80068c4:	b913      	cbnz	r3, 80068cc <_printf_float+0x1a8>
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	07d2      	lsls	r2, r2, #31
 80068ca:	d501      	bpl.n	80068d0 <_printf_float+0x1ac>
 80068cc:	3302      	adds	r3, #2
 80068ce:	e7f4      	b.n	80068ba <_printf_float+0x196>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7f2      	b.n	80068ba <_printf_float+0x196>
 80068d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068da:	4299      	cmp	r1, r3
 80068dc:	db05      	blt.n	80068ea <_printf_float+0x1c6>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6121      	str	r1, [r4, #16]
 80068e2:	07d8      	lsls	r0, r3, #31
 80068e4:	d5ea      	bpl.n	80068bc <_printf_float+0x198>
 80068e6:	1c4b      	adds	r3, r1, #1
 80068e8:	e7e7      	b.n	80068ba <_printf_float+0x196>
 80068ea:	2900      	cmp	r1, #0
 80068ec:	bfd4      	ite	le
 80068ee:	f1c1 0202 	rsble	r2, r1, #2
 80068f2:	2201      	movgt	r2, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	e7e0      	b.n	80068ba <_printf_float+0x196>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	055a      	lsls	r2, r3, #21
 80068fc:	d407      	bmi.n	800690e <_printf_float+0x1ea>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	4642      	mov	r2, r8
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	d12b      	bne.n	8006964 <_printf_float+0x240>
 800690c:	e765      	b.n	80067da <_printf_float+0xb6>
 800690e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006912:	f240 80dc 	bls.w	8006ace <_printf_float+0x3aa>
 8006916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800691a:	2200      	movs	r2, #0
 800691c:	2300      	movs	r3, #0
 800691e:	f7fa f8cd 	bl	8000abc <__aeabi_dcmpeq>
 8006922:	2800      	cmp	r0, #0
 8006924:	d033      	beq.n	800698e <_printf_float+0x26a>
 8006926:	4a36      	ldr	r2, [pc, #216]	; (8006a00 <_printf_float+0x2dc>)
 8006928:	2301      	movs	r3, #1
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f af52 	beq.w	80067da <_printf_float+0xb6>
 8006936:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800693a:	429a      	cmp	r2, r3
 800693c:	db02      	blt.n	8006944 <_printf_float+0x220>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	07d8      	lsls	r0, r3, #31
 8006942:	d50f      	bpl.n	8006964 <_printf_float+0x240>
 8006944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f af43 	beq.w	80067da <_printf_float+0xb6>
 8006954:	f04f 0800 	mov.w	r8, #0
 8006958:	f104 091a 	add.w	r9, r4, #26
 800695c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800695e:	3b01      	subs	r3, #1
 8006960:	4543      	cmp	r3, r8
 8006962:	dc09      	bgt.n	8006978 <_printf_float+0x254>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	f100 8101 	bmi.w	8006b6e <_printf_float+0x44a>
 800696c:	68e0      	ldr	r0, [r4, #12]
 800696e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006970:	4298      	cmp	r0, r3
 8006972:	bfb8      	it	lt
 8006974:	4618      	movlt	r0, r3
 8006976:	e732      	b.n	80067de <_printf_float+0xba>
 8006978:	2301      	movs	r3, #1
 800697a:	464a      	mov	r2, r9
 800697c:	4631      	mov	r1, r6
 800697e:	4628      	mov	r0, r5
 8006980:	47b8      	blx	r7
 8006982:	3001      	adds	r0, #1
 8006984:	f43f af29 	beq.w	80067da <_printf_float+0xb6>
 8006988:	f108 0801 	add.w	r8, r8, #1
 800698c:	e7e6      	b.n	800695c <_printf_float+0x238>
 800698e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc37      	bgt.n	8006a04 <_printf_float+0x2e0>
 8006994:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <_printf_float+0x2dc>)
 8006996:	2301      	movs	r3, #1
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	47b8      	blx	r7
 800699e:	3001      	adds	r0, #1
 80069a0:	f43f af1b 	beq.w	80067da <_printf_float+0xb6>
 80069a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069a8:	4313      	orrs	r3, r2
 80069aa:	d102      	bne.n	80069b2 <_printf_float+0x28e>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	d5d8      	bpl.n	8006964 <_printf_float+0x240>
 80069b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b6:	4631      	mov	r1, r6
 80069b8:	4628      	mov	r0, r5
 80069ba:	47b8      	blx	r7
 80069bc:	3001      	adds	r0, #1
 80069be:	f43f af0c 	beq.w	80067da <_printf_float+0xb6>
 80069c2:	f04f 0900 	mov.w	r9, #0
 80069c6:	f104 0a1a 	add.w	sl, r4, #26
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	425b      	negs	r3, r3
 80069ce:	454b      	cmp	r3, r9
 80069d0:	dc01      	bgt.n	80069d6 <_printf_float+0x2b2>
 80069d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d4:	e794      	b.n	8006900 <_printf_float+0x1dc>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4652      	mov	r2, sl
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f aefa 	beq.w	80067da <_printf_float+0xb6>
 80069e6:	f109 0901 	add.w	r9, r9, #1
 80069ea:	e7ee      	b.n	80069ca <_printf_float+0x2a6>
 80069ec:	7fefffff 	.word	0x7fefffff
 80069f0:	0800adc1 	.word	0x0800adc1
 80069f4:	0800adc5 	.word	0x0800adc5
 80069f8:	0800adcd 	.word	0x0800adcd
 80069fc:	0800adc9 	.word	0x0800adc9
 8006a00:	0800add1 	.word	0x0800add1
 8006a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bfa8      	it	ge
 8006a0c:	461a      	movge	r2, r3
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	4691      	mov	r9, r2
 8006a12:	dc37      	bgt.n	8006a84 <_printf_float+0x360>
 8006a14:	f04f 0b00 	mov.w	fp, #0
 8006a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a1c:	f104 021a 	add.w	r2, r4, #26
 8006a20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a24:	ebaa 0309 	sub.w	r3, sl, r9
 8006a28:	455b      	cmp	r3, fp
 8006a2a:	dc33      	bgt.n	8006a94 <_printf_float+0x370>
 8006a2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a30:	429a      	cmp	r2, r3
 8006a32:	db3b      	blt.n	8006aac <_printf_float+0x388>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	07da      	lsls	r2, r3, #31
 8006a38:	d438      	bmi.n	8006aac <_printf_float+0x388>
 8006a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a3e:	eba3 020a 	sub.w	r2, r3, sl
 8006a42:	eba3 0901 	sub.w	r9, r3, r1
 8006a46:	4591      	cmp	r9, r2
 8006a48:	bfa8      	it	ge
 8006a4a:	4691      	movge	r9, r2
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	dc34      	bgt.n	8006abc <_printf_float+0x398>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5a:	f104 0a1a 	add.w	sl, r4, #26
 8006a5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	eba3 0309 	sub.w	r3, r3, r9
 8006a68:	4543      	cmp	r3, r8
 8006a6a:	f77f af7b 	ble.w	8006964 <_printf_float+0x240>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f aeae 	beq.w	80067da <_printf_float+0xb6>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	e7ec      	b.n	8006a5e <_printf_float+0x33a>
 8006a84:	4613      	mov	r3, r2
 8006a86:	4631      	mov	r1, r6
 8006a88:	4642      	mov	r2, r8
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d1c0      	bne.n	8006a14 <_printf_float+0x2f0>
 8006a92:	e6a2      	b.n	80067da <_printf_float+0xb6>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f ae9b 	beq.w	80067da <_printf_float+0xb6>
 8006aa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa6:	f10b 0b01 	add.w	fp, fp, #1
 8006aaa:	e7b9      	b.n	8006a20 <_printf_float+0x2fc>
 8006aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d1bf      	bne.n	8006a3a <_printf_float+0x316>
 8006aba:	e68e      	b.n	80067da <_printf_float+0xb6>
 8006abc:	464b      	mov	r3, r9
 8006abe:	eb08 020a 	add.w	r2, r8, sl
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d1c2      	bne.n	8006a52 <_printf_float+0x32e>
 8006acc:	e685      	b.n	80067da <_printf_float+0xb6>
 8006ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad0:	2a01      	cmp	r2, #1
 8006ad2:	dc01      	bgt.n	8006ad8 <_printf_float+0x3b4>
 8006ad4:	07db      	lsls	r3, r3, #31
 8006ad6:	d537      	bpl.n	8006b48 <_printf_float+0x424>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4642      	mov	r2, r8
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f ae79 	beq.w	80067da <_printf_float+0xb6>
 8006ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f ae71 	beq.w	80067da <_printf_float+0xb6>
 8006af8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	f7f9 ffdc 	bl	8000abc <__aeabi_dcmpeq>
 8006b04:	b9d8      	cbnz	r0, 8006b3e <_printf_float+0x41a>
 8006b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b08:	f108 0201 	add.w	r2, r8, #1
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	d10e      	bne.n	8006b36 <_printf_float+0x412>
 8006b18:	e65f      	b.n	80067da <_printf_float+0xb6>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	464a      	mov	r2, r9
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae58 	beq.w	80067da <_printf_float+0xb6>
 8006b2a:	f108 0801 	add.w	r8, r8, #1
 8006b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4543      	cmp	r3, r8
 8006b34:	dcf1      	bgt.n	8006b1a <_printf_float+0x3f6>
 8006b36:	4653      	mov	r3, sl
 8006b38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b3c:	e6e1      	b.n	8006902 <_printf_float+0x1de>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	f104 091a 	add.w	r9, r4, #26
 8006b46:	e7f2      	b.n	8006b2e <_printf_float+0x40a>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	e7df      	b.n	8006b0e <_printf_float+0x3ea>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	464a      	mov	r2, r9
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae3e 	beq.w	80067da <_printf_float+0xb6>
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	4543      	cmp	r3, r8
 8006b6a:	dcf0      	bgt.n	8006b4e <_printf_float+0x42a>
 8006b6c:	e6fe      	b.n	800696c <_printf_float+0x248>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	f104 0919 	add.w	r9, r4, #25
 8006b76:	e7f4      	b.n	8006b62 <_printf_float+0x43e>

08006b78 <_printf_i>:
 8006b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b7c:	7e0f      	ldrb	r7, [r1, #24]
 8006b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b80:	2f78      	cmp	r7, #120	; 0x78
 8006b82:	4691      	mov	r9, r2
 8006b84:	4680      	mov	r8, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	469a      	mov	sl, r3
 8006b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b8e:	d807      	bhi.n	8006ba0 <_printf_i+0x28>
 8006b90:	2f62      	cmp	r7, #98	; 0x62
 8006b92:	d80a      	bhi.n	8006baa <_printf_i+0x32>
 8006b94:	2f00      	cmp	r7, #0
 8006b96:	f000 80d8 	beq.w	8006d4a <_printf_i+0x1d2>
 8006b9a:	2f58      	cmp	r7, #88	; 0x58
 8006b9c:	f000 80a3 	beq.w	8006ce6 <_printf_i+0x16e>
 8006ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba8:	e03a      	b.n	8006c20 <_printf_i+0xa8>
 8006baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bae:	2b15      	cmp	r3, #21
 8006bb0:	d8f6      	bhi.n	8006ba0 <_printf_i+0x28>
 8006bb2:	a101      	add	r1, pc, #4	; (adr r1, 8006bb8 <_printf_i+0x40>)
 8006bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb8:	08006c11 	.word	0x08006c11
 8006bbc:	08006c25 	.word	0x08006c25
 8006bc0:	08006ba1 	.word	0x08006ba1
 8006bc4:	08006ba1 	.word	0x08006ba1
 8006bc8:	08006ba1 	.word	0x08006ba1
 8006bcc:	08006ba1 	.word	0x08006ba1
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006ba1 	.word	0x08006ba1
 8006bd8:	08006ba1 	.word	0x08006ba1
 8006bdc:	08006ba1 	.word	0x08006ba1
 8006be0:	08006ba1 	.word	0x08006ba1
 8006be4:	08006d31 	.word	0x08006d31
 8006be8:	08006c55 	.word	0x08006c55
 8006bec:	08006d13 	.word	0x08006d13
 8006bf0:	08006ba1 	.word	0x08006ba1
 8006bf4:	08006ba1 	.word	0x08006ba1
 8006bf8:	08006d53 	.word	0x08006d53
 8006bfc:	08006ba1 	.word	0x08006ba1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006ba1 	.word	0x08006ba1
 8006c08:	08006ba1 	.word	0x08006ba1
 8006c0c:	08006d1b 	.word	0x08006d1b
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	1d1a      	adds	r2, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	602a      	str	r2, [r5, #0]
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0a3      	b.n	8006d6c <_printf_i+0x1f4>
 8006c24:	6820      	ldr	r0, [r4, #0]
 8006c26:	6829      	ldr	r1, [r5, #0]
 8006c28:	0606      	lsls	r6, r0, #24
 8006c2a:	f101 0304 	add.w	r3, r1, #4
 8006c2e:	d50a      	bpl.n	8006c46 <_printf_i+0xce>
 8006c30:	680e      	ldr	r6, [r1, #0]
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	da03      	bge.n	8006c40 <_printf_i+0xc8>
 8006c38:	232d      	movs	r3, #45	; 0x2d
 8006c3a:	4276      	negs	r6, r6
 8006c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c40:	485e      	ldr	r0, [pc, #376]	; (8006dbc <_printf_i+0x244>)
 8006c42:	230a      	movs	r3, #10
 8006c44:	e019      	b.n	8006c7a <_printf_i+0x102>
 8006c46:	680e      	ldr	r6, [r1, #0]
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c4e:	bf18      	it	ne
 8006c50:	b236      	sxthne	r6, r6
 8006c52:	e7ef      	b.n	8006c34 <_printf_i+0xbc>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	6029      	str	r1, [r5, #0]
 8006c5c:	0601      	lsls	r1, r0, #24
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0xec>
 8006c60:	681e      	ldr	r6, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0xf2>
 8006c64:	0646      	lsls	r6, r0, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0xe8>
 8006c68:	881e      	ldrh	r6, [r3, #0]
 8006c6a:	4854      	ldr	r0, [pc, #336]	; (8006dbc <_printf_i+0x244>)
 8006c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c6e:	bf0c      	ite	eq
 8006c70:	2308      	moveq	r3, #8
 8006c72:	230a      	movne	r3, #10
 8006c74:	2100      	movs	r1, #0
 8006c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c7a:	6865      	ldr	r5, [r4, #4]
 8006c7c:	60a5      	str	r5, [r4, #8]
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	bfa2      	ittt	ge
 8006c82:	6821      	ldrge	r1, [r4, #0]
 8006c84:	f021 0104 	bicge.w	r1, r1, #4
 8006c88:	6021      	strge	r1, [r4, #0]
 8006c8a:	b90e      	cbnz	r6, 8006c90 <_printf_i+0x118>
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	d04d      	beq.n	8006d2c <_printf_i+0x1b4>
 8006c90:	4615      	mov	r5, r2
 8006c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c96:	fb03 6711 	mls	r7, r3, r1, r6
 8006c9a:	5dc7      	ldrb	r7, [r0, r7]
 8006c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ca0:	4637      	mov	r7, r6
 8006ca2:	42bb      	cmp	r3, r7
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	d9f4      	bls.n	8006c92 <_printf_i+0x11a>
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d10b      	bne.n	8006cc4 <_printf_i+0x14c>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07de      	lsls	r6, r3, #31
 8006cb0:	d508      	bpl.n	8006cc4 <_printf_i+0x14c>
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	6861      	ldr	r1, [r4, #4]
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	bfde      	ittt	le
 8006cba:	2330      	movle	r3, #48	; 0x30
 8006cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cc0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cc4:	1b52      	subs	r2, r2, r5
 8006cc6:	6122      	str	r2, [r4, #16]
 8006cc8:	f8cd a000 	str.w	sl, [sp]
 8006ccc:	464b      	mov	r3, r9
 8006cce:	aa03      	add	r2, sp, #12
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f002 fcd2 	bl	800967c <_printf_common>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d14c      	bne.n	8006d76 <_printf_i+0x1fe>
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce0:	b004      	add	sp, #16
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce6:	4835      	ldr	r0, [pc, #212]	; (8006dbc <_printf_i+0x244>)
 8006ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cec:	6829      	ldr	r1, [r5, #0]
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cf4:	6029      	str	r1, [r5, #0]
 8006cf6:	061d      	lsls	r5, r3, #24
 8006cf8:	d514      	bpl.n	8006d24 <_printf_i+0x1ac>
 8006cfa:	07df      	lsls	r7, r3, #31
 8006cfc:	bf44      	itt	mi
 8006cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8006d02:	6023      	strmi	r3, [r4, #0]
 8006d04:	b91e      	cbnz	r6, 8006d0e <_printf_i+0x196>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	f023 0320 	bic.w	r3, r3, #32
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	2310      	movs	r3, #16
 8006d10:	e7b0      	b.n	8006c74 <_printf_i+0xfc>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f043 0320 	orr.w	r3, r3, #32
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	2378      	movs	r3, #120	; 0x78
 8006d1c:	4828      	ldr	r0, [pc, #160]	; (8006dc0 <_printf_i+0x248>)
 8006d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d22:	e7e3      	b.n	8006cec <_printf_i+0x174>
 8006d24:	0659      	lsls	r1, r3, #25
 8006d26:	bf48      	it	mi
 8006d28:	b2b6      	uxthmi	r6, r6
 8006d2a:	e7e6      	b.n	8006cfa <_printf_i+0x182>
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	e7bb      	b.n	8006ca8 <_printf_i+0x130>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	6826      	ldr	r6, [r4, #0]
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	1d18      	adds	r0, r3, #4
 8006d38:	6028      	str	r0, [r5, #0]
 8006d3a:	0635      	lsls	r5, r6, #24
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	d501      	bpl.n	8006d44 <_printf_i+0x1cc>
 8006d40:	6019      	str	r1, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <_printf_i+0x1d2>
 8006d44:	0670      	lsls	r0, r6, #25
 8006d46:	d5fb      	bpl.n	8006d40 <_printf_i+0x1c8>
 8006d48:	8019      	strh	r1, [r3, #0]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	4615      	mov	r5, r2
 8006d50:	e7ba      	b.n	8006cc8 <_printf_i+0x150>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f7f9 fa1e 	bl	80001a0 <memchr>
 8006d64:	b108      	cbz	r0, 8006d6a <_printf_i+0x1f2>
 8006d66:	1b40      	subs	r0, r0, r5
 8006d68:	6060      	str	r0, [r4, #4]
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d74:	e7a8      	b.n	8006cc8 <_printf_i+0x150>
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	47d0      	blx	sl
 8006d80:	3001      	adds	r0, #1
 8006d82:	d0ab      	beq.n	8006cdc <_printf_i+0x164>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	079b      	lsls	r3, r3, #30
 8006d88:	d413      	bmi.n	8006db2 <_printf_i+0x23a>
 8006d8a:	68e0      	ldr	r0, [r4, #12]
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	bfb8      	it	lt
 8006d92:	4618      	movlt	r0, r3
 8006d94:	e7a4      	b.n	8006ce0 <_printf_i+0x168>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4632      	mov	r2, r6
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	47d0      	blx	sl
 8006da0:	3001      	adds	r0, #1
 8006da2:	d09b      	beq.n	8006cdc <_printf_i+0x164>
 8006da4:	3501      	adds	r5, #1
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	9903      	ldr	r1, [sp, #12]
 8006daa:	1a5b      	subs	r3, r3, r1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dcf2      	bgt.n	8006d96 <_printf_i+0x21e>
 8006db0:	e7eb      	b.n	8006d8a <_printf_i+0x212>
 8006db2:	2500      	movs	r5, #0
 8006db4:	f104 0619 	add.w	r6, r4, #25
 8006db8:	e7f5      	b.n	8006da6 <_printf_i+0x22e>
 8006dba:	bf00      	nop
 8006dbc:	0800add3 	.word	0x0800add3
 8006dc0:	0800ade4 	.word	0x0800ade4

08006dc4 <_sbrk_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d06      	ldr	r5, [pc, #24]	; (8006de0 <_sbrk_r+0x1c>)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fd f9be 	bl	8004150 <_sbrk>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_sbrk_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_sbrk_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000664 	.word	0x20000664

08006de4 <_localeconv_r>:
 8006de4:	4800      	ldr	r0, [pc, #0]	; (8006de8 <_localeconv_r+0x4>)
 8006de6:	4770      	bx	lr
 8006de8:	200001d8 	.word	0x200001d8

08006dec <__malloc_lock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_lock+0x8>)
 8006dee:	f001 bbea 	b.w	80085c6 <__retarget_lock_acquire_recursive>
 8006df2:	bf00      	nop
 8006df4:	20000280 	.word	0x20000280

08006df8 <__malloc_unlock>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__malloc_unlock+0x8>)
 8006dfa:	f001 bbec 	b.w	80085d6 <__retarget_lock_release_recursive>
 8006dfe:	bf00      	nop
 8006e00:	20000280 	.word	0x20000280

08006e04 <_Balloc>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e08:	4604      	mov	r4, r0
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	b976      	cbnz	r6, 8006e2c <_Balloc+0x28>
 8006e0e:	2010      	movs	r0, #16
 8006e10:	f7ff fbdc 	bl	80065cc <malloc>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6260      	str	r0, [r4, #36]	; 0x24
 8006e18:	b920      	cbnz	r0, 8006e24 <_Balloc+0x20>
 8006e1a:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <_Balloc+0x78>)
 8006e1c:	4818      	ldr	r0, [pc, #96]	; (8006e80 <_Balloc+0x7c>)
 8006e1e:	2166      	movs	r1, #102	; 0x66
 8006e20:	f000 fb04 	bl	800742c <__assert_func>
 8006e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e28:	6006      	str	r6, [r0, #0]
 8006e2a:	60c6      	str	r6, [r0, #12]
 8006e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e2e:	68f3      	ldr	r3, [r6, #12]
 8006e30:	b183      	cbz	r3, 8006e54 <_Balloc+0x50>
 8006e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e3a:	b9b8      	cbnz	r0, 8006e6c <_Balloc+0x68>
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e42:	1d72      	adds	r2, r6, #5
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	4620      	mov	r0, r4
 8006e48:	f002 fd93 	bl	8009972 <_calloc_r>
 8006e4c:	b160      	cbz	r0, 8006e68 <_Balloc+0x64>
 8006e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e52:	e00e      	b.n	8006e72 <_Balloc+0x6e>
 8006e54:	2221      	movs	r2, #33	; 0x21
 8006e56:	2104      	movs	r1, #4
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f002 fd8a 	bl	8009972 <_calloc_r>
 8006e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e60:	60f0      	str	r0, [r6, #12]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1e4      	bne.n	8006e32 <_Balloc+0x2e>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	6802      	ldr	r2, [r0, #0]
 8006e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e72:	2300      	movs	r3, #0
 8006e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e78:	e7f7      	b.n	8006e6a <_Balloc+0x66>
 8006e7a:	bf00      	nop
 8006e7c:	0800ae02 	.word	0x0800ae02
 8006e80:	0800ae84 	.word	0x0800ae84

08006e84 <_Bfree>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e88:	4605      	mov	r5, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	b976      	cbnz	r6, 8006eac <_Bfree+0x28>
 8006e8e:	2010      	movs	r0, #16
 8006e90:	f7ff fb9c 	bl	80065cc <malloc>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6268      	str	r0, [r5, #36]	; 0x24
 8006e98:	b920      	cbnz	r0, 8006ea4 <_Bfree+0x20>
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <_Bfree+0x3c>)
 8006e9c:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <_Bfree+0x40>)
 8006e9e:	218a      	movs	r1, #138	; 0x8a
 8006ea0:	f000 fac4 	bl	800742c <__assert_func>
 8006ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ea8:	6006      	str	r6, [r0, #0]
 8006eaa:	60c6      	str	r6, [r0, #12]
 8006eac:	b13c      	cbz	r4, 8006ebe <_Bfree+0x3a>
 8006eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb0:	6862      	ldr	r2, [r4, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eb8:	6021      	str	r1, [r4, #0]
 8006eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	0800ae02 	.word	0x0800ae02
 8006ec4:	0800ae84 	.word	0x0800ae84

08006ec8 <__multadd>:
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	690d      	ldr	r5, [r1, #16]
 8006ece:	4607      	mov	r7, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	461e      	mov	r6, r3
 8006ed4:	f101 0c14 	add.w	ip, r1, #20
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f8dc 3000 	ldr.w	r3, [ip]
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ee4:	0c1e      	lsrs	r6, r3, #16
 8006ee6:	0c0b      	lsrs	r3, r1, #16
 8006ee8:	fb02 3306 	mla	r3, r2, r6, r3
 8006eec:	b289      	uxth	r1, r1
 8006eee:	3001      	adds	r0, #1
 8006ef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ef4:	4285      	cmp	r5, r0
 8006ef6:	f84c 1b04 	str.w	r1, [ip], #4
 8006efa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006efe:	dcec      	bgt.n	8006eda <__multadd+0x12>
 8006f00:	b30e      	cbz	r6, 8006f46 <__multadd+0x7e>
 8006f02:	68a3      	ldr	r3, [r4, #8]
 8006f04:	42ab      	cmp	r3, r5
 8006f06:	dc19      	bgt.n	8006f3c <__multadd+0x74>
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	f7ff ff79 	bl	8006e04 <_Balloc>
 8006f12:	4680      	mov	r8, r0
 8006f14:	b928      	cbnz	r0, 8006f22 <__multadd+0x5a>
 8006f16:	4602      	mov	r2, r0
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <__multadd+0x84>)
 8006f1a:	480d      	ldr	r0, [pc, #52]	; (8006f50 <__multadd+0x88>)
 8006f1c:	21b5      	movs	r1, #181	; 0xb5
 8006f1e:	f000 fa85 	bl	800742c <__assert_func>
 8006f22:	6922      	ldr	r2, [r4, #16]
 8006f24:	3202      	adds	r2, #2
 8006f26:	f104 010c 	add.w	r1, r4, #12
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	300c      	adds	r0, #12
 8006f2e:	f002 faf1 	bl	8009514 <memcpy>
 8006f32:	4621      	mov	r1, r4
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff ffa5 	bl	8006e84 <_Bfree>
 8006f3a:	4644      	mov	r4, r8
 8006f3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f40:	3501      	adds	r5, #1
 8006f42:	615e      	str	r6, [r3, #20]
 8006f44:	6125      	str	r5, [r4, #16]
 8006f46:	4620      	mov	r0, r4
 8006f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f4c:	0800ae73 	.word	0x0800ae73
 8006f50:	0800ae84 	.word	0x0800ae84

08006f54 <__i2b>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	2101      	movs	r1, #1
 8006f5a:	f7ff ff53 	bl	8006e04 <_Balloc>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	b928      	cbnz	r0, 8006f6e <__i2b+0x1a>
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <__i2b+0x24>)
 8006f64:	4805      	ldr	r0, [pc, #20]	; (8006f7c <__i2b+0x28>)
 8006f66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f6a:	f000 fa5f 	bl	800742c <__assert_func>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	6144      	str	r4, [r0, #20]
 8006f72:	6103      	str	r3, [r0, #16]
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	bf00      	nop
 8006f78:	0800ae73 	.word	0x0800ae73
 8006f7c:	0800ae84 	.word	0x0800ae84

08006f80 <__multiply>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	4691      	mov	r9, r2
 8006f86:	690a      	ldr	r2, [r1, #16]
 8006f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	bfb8      	it	lt
 8006f90:	460b      	movlt	r3, r1
 8006f92:	460c      	mov	r4, r1
 8006f94:	bfbc      	itt	lt
 8006f96:	464c      	movlt	r4, r9
 8006f98:	4699      	movlt	r9, r3
 8006f9a:	6927      	ldr	r7, [r4, #16]
 8006f9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fa0:	68a3      	ldr	r3, [r4, #8]
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	eb07 060a 	add.w	r6, r7, sl
 8006fa8:	42b3      	cmp	r3, r6
 8006faa:	b085      	sub	sp, #20
 8006fac:	bfb8      	it	lt
 8006fae:	3101      	addlt	r1, #1
 8006fb0:	f7ff ff28 	bl	8006e04 <_Balloc>
 8006fb4:	b930      	cbnz	r0, 8006fc4 <__multiply+0x44>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <__multiply+0x148>)
 8006fba:	4844      	ldr	r0, [pc, #272]	; (80070cc <__multiply+0x14c>)
 8006fbc:	f240 115d 	movw	r1, #349	; 0x15d
 8006fc0:	f000 fa34 	bl	800742c <__assert_func>
 8006fc4:	f100 0514 	add.w	r5, r0, #20
 8006fc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fcc:	462b      	mov	r3, r5
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	d321      	bcc.n	8007018 <__multiply+0x98>
 8006fd4:	f104 0314 	add.w	r3, r4, #20
 8006fd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fdc:	f109 0314 	add.w	r3, r9, #20
 8006fe0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fe4:	9202      	str	r2, [sp, #8]
 8006fe6:	1b3a      	subs	r2, r7, r4
 8006fe8:	3a15      	subs	r2, #21
 8006fea:	f022 0203 	bic.w	r2, r2, #3
 8006fee:	3204      	adds	r2, #4
 8006ff0:	f104 0115 	add.w	r1, r4, #21
 8006ff4:	428f      	cmp	r7, r1
 8006ff6:	bf38      	it	cc
 8006ff8:	2204      	movcc	r2, #4
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	9a02      	ldr	r2, [sp, #8]
 8006ffe:	9303      	str	r3, [sp, #12]
 8007000:	429a      	cmp	r2, r3
 8007002:	d80c      	bhi.n	800701e <__multiply+0x9e>
 8007004:	2e00      	cmp	r6, #0
 8007006:	dd03      	ble.n	8007010 <__multiply+0x90>
 8007008:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800700c:	2b00      	cmp	r3, #0
 800700e:	d059      	beq.n	80070c4 <__multiply+0x144>
 8007010:	6106      	str	r6, [r0, #16]
 8007012:	b005      	add	sp, #20
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	f843 2b04 	str.w	r2, [r3], #4
 800701c:	e7d8      	b.n	8006fd0 <__multiply+0x50>
 800701e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007022:	f1ba 0f00 	cmp.w	sl, #0
 8007026:	d023      	beq.n	8007070 <__multiply+0xf0>
 8007028:	f104 0e14 	add.w	lr, r4, #20
 800702c:	46a9      	mov	r9, r5
 800702e:	f04f 0c00 	mov.w	ip, #0
 8007032:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007036:	f8d9 1000 	ldr.w	r1, [r9]
 800703a:	fa1f fb82 	uxth.w	fp, r2
 800703e:	b289      	uxth	r1, r1
 8007040:	fb0a 110b 	mla	r1, sl, fp, r1
 8007044:	4461      	add	r1, ip
 8007046:	f8d9 c000 	ldr.w	ip, [r9]
 800704a:	0c12      	lsrs	r2, r2, #16
 800704c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007050:	fb0a c202 	mla	r2, sl, r2, ip
 8007054:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007058:	b289      	uxth	r1, r1
 800705a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800705e:	4577      	cmp	r7, lr
 8007060:	f849 1b04 	str.w	r1, [r9], #4
 8007064:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007068:	d8e3      	bhi.n	8007032 <__multiply+0xb2>
 800706a:	9a01      	ldr	r2, [sp, #4]
 800706c:	f845 c002 	str.w	ip, [r5, r2]
 8007070:	9a03      	ldr	r2, [sp, #12]
 8007072:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007076:	3304      	adds	r3, #4
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	d020      	beq.n	80070c0 <__multiply+0x140>
 800707e:	6829      	ldr	r1, [r5, #0]
 8007080:	f104 0c14 	add.w	ip, r4, #20
 8007084:	46ae      	mov	lr, r5
 8007086:	f04f 0a00 	mov.w	sl, #0
 800708a:	f8bc b000 	ldrh.w	fp, [ip]
 800708e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007092:	fb09 220b 	mla	r2, r9, fp, r2
 8007096:	4492      	add	sl, r2
 8007098:	b289      	uxth	r1, r1
 800709a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800709e:	f84e 1b04 	str.w	r1, [lr], #4
 80070a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80070a6:	f8be 1000 	ldrh.w	r1, [lr]
 80070aa:	0c12      	lsrs	r2, r2, #16
 80070ac:	fb09 1102 	mla	r1, r9, r2, r1
 80070b0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80070b4:	4567      	cmp	r7, ip
 80070b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070ba:	d8e6      	bhi.n	800708a <__multiply+0x10a>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	50a9      	str	r1, [r5, r2]
 80070c0:	3504      	adds	r5, #4
 80070c2:	e79b      	b.n	8006ffc <__multiply+0x7c>
 80070c4:	3e01      	subs	r6, #1
 80070c6:	e79d      	b.n	8007004 <__multiply+0x84>
 80070c8:	0800ae73 	.word	0x0800ae73
 80070cc:	0800ae84 	.word	0x0800ae84

080070d0 <__pow5mult>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4615      	mov	r5, r2
 80070d6:	f012 0203 	ands.w	r2, r2, #3
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	d007      	beq.n	80070f0 <__pow5mult+0x20>
 80070e0:	4c25      	ldr	r4, [pc, #148]	; (8007178 <__pow5mult+0xa8>)
 80070e2:	3a01      	subs	r2, #1
 80070e4:	2300      	movs	r3, #0
 80070e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ea:	f7ff feed 	bl	8006ec8 <__multadd>
 80070ee:	4607      	mov	r7, r0
 80070f0:	10ad      	asrs	r5, r5, #2
 80070f2:	d03d      	beq.n	8007170 <__pow5mult+0xa0>
 80070f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070f6:	b97c      	cbnz	r4, 8007118 <__pow5mult+0x48>
 80070f8:	2010      	movs	r0, #16
 80070fa:	f7ff fa67 	bl	80065cc <malloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	6270      	str	r0, [r6, #36]	; 0x24
 8007102:	b928      	cbnz	r0, 8007110 <__pow5mult+0x40>
 8007104:	4b1d      	ldr	r3, [pc, #116]	; (800717c <__pow5mult+0xac>)
 8007106:	481e      	ldr	r0, [pc, #120]	; (8007180 <__pow5mult+0xb0>)
 8007108:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800710c:	f000 f98e 	bl	800742c <__assert_func>
 8007110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007114:	6004      	str	r4, [r0, #0]
 8007116:	60c4      	str	r4, [r0, #12]
 8007118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800711c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007120:	b94c      	cbnz	r4, 8007136 <__pow5mult+0x66>
 8007122:	f240 2171 	movw	r1, #625	; 0x271
 8007126:	4630      	mov	r0, r6
 8007128:	f7ff ff14 	bl	8006f54 <__i2b>
 800712c:	2300      	movs	r3, #0
 800712e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007132:	4604      	mov	r4, r0
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	07eb      	lsls	r3, r5, #31
 800713c:	d50a      	bpl.n	8007154 <__pow5mult+0x84>
 800713e:	4639      	mov	r1, r7
 8007140:	4622      	mov	r2, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff1c 	bl	8006f80 <__multiply>
 8007148:	4639      	mov	r1, r7
 800714a:	4680      	mov	r8, r0
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fe99 	bl	8006e84 <_Bfree>
 8007152:	4647      	mov	r7, r8
 8007154:	106d      	asrs	r5, r5, #1
 8007156:	d00b      	beq.n	8007170 <__pow5mult+0xa0>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	b938      	cbnz	r0, 800716c <__pow5mult+0x9c>
 800715c:	4622      	mov	r2, r4
 800715e:	4621      	mov	r1, r4
 8007160:	4630      	mov	r0, r6
 8007162:	f7ff ff0d 	bl	8006f80 <__multiply>
 8007166:	6020      	str	r0, [r4, #0]
 8007168:	f8c0 9000 	str.w	r9, [r0]
 800716c:	4604      	mov	r4, r0
 800716e:	e7e4      	b.n	800713a <__pow5mult+0x6a>
 8007170:	4638      	mov	r0, r7
 8007172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007176:	bf00      	nop
 8007178:	0800ac54 	.word	0x0800ac54
 800717c:	0800ae02 	.word	0x0800ae02
 8007180:	0800ae84 	.word	0x0800ae84

08007184 <__lshift>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	460c      	mov	r4, r1
 800718a:	6849      	ldr	r1, [r1, #4]
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	4607      	mov	r7, r0
 8007196:	4691      	mov	r9, r2
 8007198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800719c:	f108 0601 	add.w	r6, r8, #1
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	db0b      	blt.n	80071bc <__lshift+0x38>
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff fe2d 	bl	8006e04 <_Balloc>
 80071aa:	4605      	mov	r5, r0
 80071ac:	b948      	cbnz	r0, 80071c2 <__lshift+0x3e>
 80071ae:	4602      	mov	r2, r0
 80071b0:	4b2a      	ldr	r3, [pc, #168]	; (800725c <__lshift+0xd8>)
 80071b2:	482b      	ldr	r0, [pc, #172]	; (8007260 <__lshift+0xdc>)
 80071b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071b8:	f000 f938 	bl	800742c <__assert_func>
 80071bc:	3101      	adds	r1, #1
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	e7ee      	b.n	80071a0 <__lshift+0x1c>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f100 0114 	add.w	r1, r0, #20
 80071c8:	f100 0210 	add.w	r2, r0, #16
 80071cc:	4618      	mov	r0, r3
 80071ce:	4553      	cmp	r3, sl
 80071d0:	db37      	blt.n	8007242 <__lshift+0xbe>
 80071d2:	6920      	ldr	r0, [r4, #16]
 80071d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d8:	f104 0314 	add.w	r3, r4, #20
 80071dc:	f019 091f 	ands.w	r9, r9, #31
 80071e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071e8:	d02f      	beq.n	800724a <__lshift+0xc6>
 80071ea:	f1c9 0e20 	rsb	lr, r9, #32
 80071ee:	468a      	mov	sl, r1
 80071f0:	f04f 0c00 	mov.w	ip, #0
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	fa02 f209 	lsl.w	r2, r2, r9
 80071fa:	ea42 020c 	orr.w	r2, r2, ip
 80071fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007202:	f853 2b04 	ldr.w	r2, [r3], #4
 8007206:	4298      	cmp	r0, r3
 8007208:	fa22 fc0e 	lsr.w	ip, r2, lr
 800720c:	d8f2      	bhi.n	80071f4 <__lshift+0x70>
 800720e:	1b03      	subs	r3, r0, r4
 8007210:	3b15      	subs	r3, #21
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	3304      	adds	r3, #4
 8007218:	f104 0215 	add.w	r2, r4, #21
 800721c:	4290      	cmp	r0, r2
 800721e:	bf38      	it	cc
 8007220:	2304      	movcc	r3, #4
 8007222:	f841 c003 	str.w	ip, [r1, r3]
 8007226:	f1bc 0f00 	cmp.w	ip, #0
 800722a:	d001      	beq.n	8007230 <__lshift+0xac>
 800722c:	f108 0602 	add.w	r6, r8, #2
 8007230:	3e01      	subs	r6, #1
 8007232:	4638      	mov	r0, r7
 8007234:	612e      	str	r6, [r5, #16]
 8007236:	4621      	mov	r1, r4
 8007238:	f7ff fe24 	bl	8006e84 <_Bfree>
 800723c:	4628      	mov	r0, r5
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	f842 0f04 	str.w	r0, [r2, #4]!
 8007246:	3301      	adds	r3, #1
 8007248:	e7c1      	b.n	80071ce <__lshift+0x4a>
 800724a:	3904      	subs	r1, #4
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	f841 2f04 	str.w	r2, [r1, #4]!
 8007254:	4298      	cmp	r0, r3
 8007256:	d8f9      	bhi.n	800724c <__lshift+0xc8>
 8007258:	e7ea      	b.n	8007230 <__lshift+0xac>
 800725a:	bf00      	nop
 800725c:	0800ae73 	.word	0x0800ae73
 8007260:	0800ae84 	.word	0x0800ae84

08007264 <__mdiff>:
 8007264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	460d      	mov	r5, r1
 800726a:	4607      	mov	r7, r0
 800726c:	4611      	mov	r1, r2
 800726e:	4628      	mov	r0, r5
 8007270:	4614      	mov	r4, r2
 8007272:	f002 fb63 	bl	800993c <__mcmp>
 8007276:	1e06      	subs	r6, r0, #0
 8007278:	d111      	bne.n	800729e <__mdiff+0x3a>
 800727a:	4631      	mov	r1, r6
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff fdc1 	bl	8006e04 <_Balloc>
 8007282:	4602      	mov	r2, r0
 8007284:	b928      	cbnz	r0, 8007292 <__mdiff+0x2e>
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <__mdiff+0x108>)
 8007288:	f240 2132 	movw	r1, #562	; 0x232
 800728c:	4838      	ldr	r0, [pc, #224]	; (8007370 <__mdiff+0x10c>)
 800728e:	f000 f8cd 	bl	800742c <__assert_func>
 8007292:	2301      	movs	r3, #1
 8007294:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007298:	4610      	mov	r0, r2
 800729a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	bfa4      	itt	ge
 80072a0:	4623      	movge	r3, r4
 80072a2:	462c      	movge	r4, r5
 80072a4:	4638      	mov	r0, r7
 80072a6:	6861      	ldr	r1, [r4, #4]
 80072a8:	bfa6      	itte	ge
 80072aa:	461d      	movge	r5, r3
 80072ac:	2600      	movge	r6, #0
 80072ae:	2601      	movlt	r6, #1
 80072b0:	f7ff fda8 	bl	8006e04 <_Balloc>
 80072b4:	4602      	mov	r2, r0
 80072b6:	b918      	cbnz	r0, 80072c0 <__mdiff+0x5c>
 80072b8:	4b2c      	ldr	r3, [pc, #176]	; (800736c <__mdiff+0x108>)
 80072ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072be:	e7e5      	b.n	800728c <__mdiff+0x28>
 80072c0:	6927      	ldr	r7, [r4, #16]
 80072c2:	60c6      	str	r6, [r0, #12]
 80072c4:	692e      	ldr	r6, [r5, #16]
 80072c6:	f104 0014 	add.w	r0, r4, #20
 80072ca:	f105 0914 	add.w	r9, r5, #20
 80072ce:	f102 0e14 	add.w	lr, r2, #20
 80072d2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80072d6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072da:	3410      	adds	r4, #16
 80072dc:	46f2      	mov	sl, lr
 80072de:	2100      	movs	r1, #0
 80072e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80072e8:	fa1f f883 	uxth.w	r8, r3
 80072ec:	fa11 f18b 	uxtah	r1, r1, fp
 80072f0:	0c1b      	lsrs	r3, r3, #16
 80072f2:	eba1 0808 	sub.w	r8, r1, r8
 80072f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80072fe:	fa1f f888 	uxth.w	r8, r8
 8007302:	1419      	asrs	r1, r3, #16
 8007304:	454e      	cmp	r6, r9
 8007306:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800730a:	f84a 3b04 	str.w	r3, [sl], #4
 800730e:	d8e7      	bhi.n	80072e0 <__mdiff+0x7c>
 8007310:	1b73      	subs	r3, r6, r5
 8007312:	3b15      	subs	r3, #21
 8007314:	f023 0303 	bic.w	r3, r3, #3
 8007318:	3304      	adds	r3, #4
 800731a:	3515      	adds	r5, #21
 800731c:	42ae      	cmp	r6, r5
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	4418      	add	r0, r3
 8007324:	4473      	add	r3, lr
 8007326:	469e      	mov	lr, r3
 8007328:	4606      	mov	r6, r0
 800732a:	4566      	cmp	r6, ip
 800732c:	d30e      	bcc.n	800734c <__mdiff+0xe8>
 800732e:	f10c 0103 	add.w	r1, ip, #3
 8007332:	1a09      	subs	r1, r1, r0
 8007334:	f021 0103 	bic.w	r1, r1, #3
 8007338:	3803      	subs	r0, #3
 800733a:	4584      	cmp	ip, r0
 800733c:	bf38      	it	cc
 800733e:	2100      	movcc	r1, #0
 8007340:	4419      	add	r1, r3
 8007342:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007346:	b17b      	cbz	r3, 8007368 <__mdiff+0x104>
 8007348:	6117      	str	r7, [r2, #16]
 800734a:	e7a5      	b.n	8007298 <__mdiff+0x34>
 800734c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007350:	fa11 f488 	uxtah	r4, r1, r8
 8007354:	1425      	asrs	r5, r4, #16
 8007356:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800735a:	b2a4      	uxth	r4, r4
 800735c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007360:	f84e 4b04 	str.w	r4, [lr], #4
 8007364:	1429      	asrs	r1, r5, #16
 8007366:	e7e0      	b.n	800732a <__mdiff+0xc6>
 8007368:	3f01      	subs	r7, #1
 800736a:	e7ea      	b.n	8007342 <__mdiff+0xde>
 800736c:	0800ae73 	.word	0x0800ae73
 8007370:	0800ae84 	.word	0x0800ae84

08007374 <__d2b>:
 8007374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007378:	2101      	movs	r1, #1
 800737a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800737e:	4690      	mov	r8, r2
 8007380:	461d      	mov	r5, r3
 8007382:	f7ff fd3f 	bl	8006e04 <_Balloc>
 8007386:	4604      	mov	r4, r0
 8007388:	b930      	cbnz	r0, 8007398 <__d2b+0x24>
 800738a:	4602      	mov	r2, r0
 800738c:	4b25      	ldr	r3, [pc, #148]	; (8007424 <__d2b+0xb0>)
 800738e:	4826      	ldr	r0, [pc, #152]	; (8007428 <__d2b+0xb4>)
 8007390:	f240 310a 	movw	r1, #778	; 0x30a
 8007394:	f000 f84a 	bl	800742c <__assert_func>
 8007398:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800739c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80073a0:	bb2d      	cbnz	r5, 80073ee <__d2b+0x7a>
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	f1b8 0300 	subs.w	r3, r8, #0
 80073a8:	d026      	beq.n	80073f8 <__d2b+0x84>
 80073aa:	4668      	mov	r0, sp
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	f002 fa98 	bl	80098e2 <__lo0bits>
 80073b2:	9900      	ldr	r1, [sp, #0]
 80073b4:	b1f0      	cbz	r0, 80073f4 <__d2b+0x80>
 80073b6:	9a01      	ldr	r2, [sp, #4]
 80073b8:	f1c0 0320 	rsb	r3, r0, #32
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	430b      	orrs	r3, r1
 80073c2:	40c2      	lsrs	r2, r0
 80073c4:	6163      	str	r3, [r4, #20]
 80073c6:	9201      	str	r2, [sp, #4]
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	61a3      	str	r3, [r4, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf14      	ite	ne
 80073d0:	2102      	movne	r1, #2
 80073d2:	2101      	moveq	r1, #1
 80073d4:	6121      	str	r1, [r4, #16]
 80073d6:	b1c5      	cbz	r5, 800740a <__d2b+0x96>
 80073d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073dc:	4405      	add	r5, r0
 80073de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073e2:	603d      	str	r5, [r7, #0]
 80073e4:	6030      	str	r0, [r6, #0]
 80073e6:	4620      	mov	r0, r4
 80073e8:	b002      	add	sp, #8
 80073ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f2:	e7d6      	b.n	80073a2 <__d2b+0x2e>
 80073f4:	6161      	str	r1, [r4, #20]
 80073f6:	e7e7      	b.n	80073c8 <__d2b+0x54>
 80073f8:	a801      	add	r0, sp, #4
 80073fa:	f002 fa72 	bl	80098e2 <__lo0bits>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	6163      	str	r3, [r4, #20]
 8007402:	2101      	movs	r1, #1
 8007404:	6121      	str	r1, [r4, #16]
 8007406:	3020      	adds	r0, #32
 8007408:	e7e5      	b.n	80073d6 <__d2b+0x62>
 800740a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800740e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007412:	6038      	str	r0, [r7, #0]
 8007414:	6918      	ldr	r0, [r3, #16]
 8007416:	f002 fa44 	bl	80098a2 <__hi0bits>
 800741a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800741e:	6031      	str	r1, [r6, #0]
 8007420:	e7e1      	b.n	80073e6 <__d2b+0x72>
 8007422:	bf00      	nop
 8007424:	0800ae73 	.word	0x0800ae73
 8007428:	0800ae84 	.word	0x0800ae84

0800742c <__assert_func>:
 800742c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800742e:	4614      	mov	r4, r2
 8007430:	461a      	mov	r2, r3
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <__assert_func+0x2c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4605      	mov	r5, r0
 8007438:	68d8      	ldr	r0, [r3, #12]
 800743a:	b14c      	cbz	r4, 8007450 <__assert_func+0x24>
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <__assert_func+0x30>)
 800743e:	9100      	str	r1, [sp, #0]
 8007440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007444:	4906      	ldr	r1, [pc, #24]	; (8007460 <__assert_func+0x34>)
 8007446:	462b      	mov	r3, r5
 8007448:	f000 f80e 	bl	8007468 <fiprintf>
 800744c:	f002 fae5 	bl	8009a1a <abort>
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <__assert_func+0x38>)
 8007452:	461c      	mov	r4, r3
 8007454:	e7f3      	b.n	800743e <__assert_func+0x12>
 8007456:	bf00      	nop
 8007458:	20000084 	.word	0x20000084
 800745c:	0800aedf 	.word	0x0800aedf
 8007460:	0800aeec 	.word	0x0800aeec
 8007464:	0800af1a 	.word	0x0800af1a

08007468 <fiprintf>:
 8007468:	b40e      	push	{r1, r2, r3}
 800746a:	b503      	push	{r0, r1, lr}
 800746c:	4601      	mov	r1, r0
 800746e:	ab03      	add	r3, sp, #12
 8007470:	4805      	ldr	r0, [pc, #20]	; (8007488 <fiprintf+0x20>)
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	f000 f807 	bl	800748c <_vfiprintf_r>
 800747e:	b002      	add	sp, #8
 8007480:	f85d eb04 	ldr.w	lr, [sp], #4
 8007484:	b003      	add	sp, #12
 8007486:	4770      	bx	lr
 8007488:	20000084 	.word	0x20000084

0800748c <_vfiprintf_r>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	460d      	mov	r5, r1
 8007492:	b09d      	sub	sp, #116	; 0x74
 8007494:	4614      	mov	r4, r2
 8007496:	4698      	mov	r8, r3
 8007498:	4606      	mov	r6, r0
 800749a:	b118      	cbz	r0, 80074a4 <_vfiprintf_r+0x18>
 800749c:	6983      	ldr	r3, [r0, #24]
 800749e:	b90b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x18>
 80074a0:	f000 fae4 	bl	8007a6c <__sinit>
 80074a4:	4b89      	ldr	r3, [pc, #548]	; (80076cc <_vfiprintf_r+0x240>)
 80074a6:	429d      	cmp	r5, r3
 80074a8:	d11b      	bne.n	80074e2 <_vfiprintf_r+0x56>
 80074aa:	6875      	ldr	r5, [r6, #4]
 80074ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	d405      	bmi.n	80074be <_vfiprintf_r+0x32>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	059a      	lsls	r2, r3, #22
 80074b6:	d402      	bmi.n	80074be <_vfiprintf_r+0x32>
 80074b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ba:	f001 f884 	bl	80085c6 <__retarget_lock_acquire_recursive>
 80074be:	89ab      	ldrh	r3, [r5, #12]
 80074c0:	071b      	lsls	r3, r3, #28
 80074c2:	d501      	bpl.n	80074c8 <_vfiprintf_r+0x3c>
 80074c4:	692b      	ldr	r3, [r5, #16]
 80074c6:	b9eb      	cbnz	r3, 8007504 <_vfiprintf_r+0x78>
 80074c8:	4629      	mov	r1, r5
 80074ca:	4630      	mov	r0, r6
 80074cc:	f000 f960 	bl	8007790 <__swsetup_r>
 80074d0:	b1c0      	cbz	r0, 8007504 <_vfiprintf_r+0x78>
 80074d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d4:	07dc      	lsls	r4, r3, #31
 80074d6:	d50e      	bpl.n	80074f6 <_vfiprintf_r+0x6a>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074dc:	b01d      	add	sp, #116	; 0x74
 80074de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e2:	4b7b      	ldr	r3, [pc, #492]	; (80076d0 <_vfiprintf_r+0x244>)
 80074e4:	429d      	cmp	r5, r3
 80074e6:	d101      	bne.n	80074ec <_vfiprintf_r+0x60>
 80074e8:	68b5      	ldr	r5, [r6, #8]
 80074ea:	e7df      	b.n	80074ac <_vfiprintf_r+0x20>
 80074ec:	4b79      	ldr	r3, [pc, #484]	; (80076d4 <_vfiprintf_r+0x248>)
 80074ee:	429d      	cmp	r5, r3
 80074f0:	bf08      	it	eq
 80074f2:	68f5      	ldreq	r5, [r6, #12]
 80074f4:	e7da      	b.n	80074ac <_vfiprintf_r+0x20>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	0598      	lsls	r0, r3, #22
 80074fa:	d4ed      	bmi.n	80074d8 <_vfiprintf_r+0x4c>
 80074fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074fe:	f001 f86a 	bl	80085d6 <__retarget_lock_release_recursive>
 8007502:	e7e9      	b.n	80074d8 <_vfiprintf_r+0x4c>
 8007504:	2300      	movs	r3, #0
 8007506:	9309      	str	r3, [sp, #36]	; 0x24
 8007508:	2320      	movs	r3, #32
 800750a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800750e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007512:	2330      	movs	r3, #48	; 0x30
 8007514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076d8 <_vfiprintf_r+0x24c>
 8007518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800751c:	f04f 0901 	mov.w	r9, #1
 8007520:	4623      	mov	r3, r4
 8007522:	469a      	mov	sl, r3
 8007524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007528:	b10a      	cbz	r2, 800752e <_vfiprintf_r+0xa2>
 800752a:	2a25      	cmp	r2, #37	; 0x25
 800752c:	d1f9      	bne.n	8007522 <_vfiprintf_r+0x96>
 800752e:	ebba 0b04 	subs.w	fp, sl, r4
 8007532:	d00b      	beq.n	800754c <_vfiprintf_r+0xc0>
 8007534:	465b      	mov	r3, fp
 8007536:	4622      	mov	r2, r4
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f002 fa4e 	bl	80099dc <__sfputs_r>
 8007540:	3001      	adds	r0, #1
 8007542:	f000 80aa 	beq.w	800769a <_vfiprintf_r+0x20e>
 8007546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007548:	445a      	add	r2, fp
 800754a:	9209      	str	r2, [sp, #36]	; 0x24
 800754c:	f89a 3000 	ldrb.w	r3, [sl]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a2 	beq.w	800769a <_vfiprintf_r+0x20e>
 8007556:	2300      	movs	r3, #0
 8007558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800755c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007560:	f10a 0a01 	add.w	sl, sl, #1
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800756c:	931a      	str	r3, [sp, #104]	; 0x68
 800756e:	4654      	mov	r4, sl
 8007570:	2205      	movs	r2, #5
 8007572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007576:	4858      	ldr	r0, [pc, #352]	; (80076d8 <_vfiprintf_r+0x24c>)
 8007578:	f7f8 fe12 	bl	80001a0 <memchr>
 800757c:	9a04      	ldr	r2, [sp, #16]
 800757e:	b9d8      	cbnz	r0, 80075b8 <_vfiprintf_r+0x12c>
 8007580:	06d1      	lsls	r1, r2, #27
 8007582:	bf44      	itt	mi
 8007584:	2320      	movmi	r3, #32
 8007586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800758a:	0713      	lsls	r3, r2, #28
 800758c:	bf44      	itt	mi
 800758e:	232b      	movmi	r3, #43	; 0x2b
 8007590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007594:	f89a 3000 	ldrb.w	r3, [sl]
 8007598:	2b2a      	cmp	r3, #42	; 0x2a
 800759a:	d015      	beq.n	80075c8 <_vfiprintf_r+0x13c>
 800759c:	9a07      	ldr	r2, [sp, #28]
 800759e:	4654      	mov	r4, sl
 80075a0:	2000      	movs	r0, #0
 80075a2:	f04f 0c0a 	mov.w	ip, #10
 80075a6:	4621      	mov	r1, r4
 80075a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075ac:	3b30      	subs	r3, #48	; 0x30
 80075ae:	2b09      	cmp	r3, #9
 80075b0:	d94e      	bls.n	8007650 <_vfiprintf_r+0x1c4>
 80075b2:	b1b0      	cbz	r0, 80075e2 <_vfiprintf_r+0x156>
 80075b4:	9207      	str	r2, [sp, #28]
 80075b6:	e014      	b.n	80075e2 <_vfiprintf_r+0x156>
 80075b8:	eba0 0308 	sub.w	r3, r0, r8
 80075bc:	fa09 f303 	lsl.w	r3, r9, r3
 80075c0:	4313      	orrs	r3, r2
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	46a2      	mov	sl, r4
 80075c6:	e7d2      	b.n	800756e <_vfiprintf_r+0xe2>
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	1d19      	adds	r1, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	9103      	str	r1, [sp, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfbb      	ittet	lt
 80075d4:	425b      	neglt	r3, r3
 80075d6:	f042 0202 	orrlt.w	r2, r2, #2
 80075da:	9307      	strge	r3, [sp, #28]
 80075dc:	9307      	strlt	r3, [sp, #28]
 80075de:	bfb8      	it	lt
 80075e0:	9204      	strlt	r2, [sp, #16]
 80075e2:	7823      	ldrb	r3, [r4, #0]
 80075e4:	2b2e      	cmp	r3, #46	; 0x2e
 80075e6:	d10c      	bne.n	8007602 <_vfiprintf_r+0x176>
 80075e8:	7863      	ldrb	r3, [r4, #1]
 80075ea:	2b2a      	cmp	r3, #42	; 0x2a
 80075ec:	d135      	bne.n	800765a <_vfiprintf_r+0x1ce>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	9203      	str	r2, [sp, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfb8      	it	lt
 80075fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075fe:	3402      	adds	r4, #2
 8007600:	9305      	str	r3, [sp, #20]
 8007602:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80076dc <_vfiprintf_r+0x250>
 8007606:	7821      	ldrb	r1, [r4, #0]
 8007608:	2203      	movs	r2, #3
 800760a:	4650      	mov	r0, sl
 800760c:	f7f8 fdc8 	bl	80001a0 <memchr>
 8007610:	b140      	cbz	r0, 8007624 <_vfiprintf_r+0x198>
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	eba0 000a 	sub.w	r0, r0, sl
 8007618:	fa03 f000 	lsl.w	r0, r3, r0
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	4303      	orrs	r3, r0
 8007620:	3401      	adds	r4, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	482d      	ldr	r0, [pc, #180]	; (80076e0 <_vfiprintf_r+0x254>)
 800762a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800762e:	2206      	movs	r2, #6
 8007630:	f7f8 fdb6 	bl	80001a0 <memchr>
 8007634:	2800      	cmp	r0, #0
 8007636:	d03f      	beq.n	80076b8 <_vfiprintf_r+0x22c>
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <_vfiprintf_r+0x258>)
 800763a:	bb1b      	cbnz	r3, 8007684 <_vfiprintf_r+0x1f8>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	3307      	adds	r3, #7
 8007640:	f023 0307 	bic.w	r3, r3, #7
 8007644:	3308      	adds	r3, #8
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764a:	443b      	add	r3, r7
 800764c:	9309      	str	r3, [sp, #36]	; 0x24
 800764e:	e767      	b.n	8007520 <_vfiprintf_r+0x94>
 8007650:	fb0c 3202 	mla	r2, ip, r2, r3
 8007654:	460c      	mov	r4, r1
 8007656:	2001      	movs	r0, #1
 8007658:	e7a5      	b.n	80075a6 <_vfiprintf_r+0x11a>
 800765a:	2300      	movs	r3, #0
 800765c:	3401      	adds	r4, #1
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	4619      	mov	r1, r3
 8007662:	f04f 0c0a 	mov.w	ip, #10
 8007666:	4620      	mov	r0, r4
 8007668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766c:	3a30      	subs	r2, #48	; 0x30
 800766e:	2a09      	cmp	r2, #9
 8007670:	d903      	bls.n	800767a <_vfiprintf_r+0x1ee>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c5      	beq.n	8007602 <_vfiprintf_r+0x176>
 8007676:	9105      	str	r1, [sp, #20]
 8007678:	e7c3      	b.n	8007602 <_vfiprintf_r+0x176>
 800767a:	fb0c 2101 	mla	r1, ip, r1, r2
 800767e:	4604      	mov	r4, r0
 8007680:	2301      	movs	r3, #1
 8007682:	e7f0      	b.n	8007666 <_vfiprintf_r+0x1da>
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	462a      	mov	r2, r5
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <_vfiprintf_r+0x25c>)
 800768c:	a904      	add	r1, sp, #16
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff f848 	bl	8006724 <_printf_float>
 8007694:	4607      	mov	r7, r0
 8007696:	1c78      	adds	r0, r7, #1
 8007698:	d1d6      	bne.n	8007648 <_vfiprintf_r+0x1bc>
 800769a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800769c:	07d9      	lsls	r1, r3, #31
 800769e:	d405      	bmi.n	80076ac <_vfiprintf_r+0x220>
 80076a0:	89ab      	ldrh	r3, [r5, #12]
 80076a2:	059a      	lsls	r2, r3, #22
 80076a4:	d402      	bmi.n	80076ac <_vfiprintf_r+0x220>
 80076a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076a8:	f000 ff95 	bl	80085d6 <__retarget_lock_release_recursive>
 80076ac:	89ab      	ldrh	r3, [r5, #12]
 80076ae:	065b      	lsls	r3, r3, #25
 80076b0:	f53f af12 	bmi.w	80074d8 <_vfiprintf_r+0x4c>
 80076b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076b6:	e711      	b.n	80074dc <_vfiprintf_r+0x50>
 80076b8:	ab03      	add	r3, sp, #12
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	462a      	mov	r2, r5
 80076be:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <_vfiprintf_r+0x25c>)
 80076c0:	a904      	add	r1, sp, #16
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff fa58 	bl	8006b78 <_printf_i>
 80076c8:	e7e4      	b.n	8007694 <_vfiprintf_r+0x208>
 80076ca:	bf00      	nop
 80076cc:	0800ac80 	.word	0x0800ac80
 80076d0:	0800aca0 	.word	0x0800aca0
 80076d4:	0800ac60 	.word	0x0800ac60
 80076d8:	0800af25 	.word	0x0800af25
 80076dc:	0800af2b 	.word	0x0800af2b
 80076e0:	0800af2f 	.word	0x0800af2f
 80076e4:	08006725 	.word	0x08006725
 80076e8:	080099dd 	.word	0x080099dd

080076ec <__swbuf_r>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	460e      	mov	r6, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	4605      	mov	r5, r0
 80076f4:	b118      	cbz	r0, 80076fe <__swbuf_r+0x12>
 80076f6:	6983      	ldr	r3, [r0, #24]
 80076f8:	b90b      	cbnz	r3, 80076fe <__swbuf_r+0x12>
 80076fa:	f000 f9b7 	bl	8007a6c <__sinit>
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <__swbuf_r+0x98>)
 8007700:	429c      	cmp	r4, r3
 8007702:	d12b      	bne.n	800775c <__swbuf_r+0x70>
 8007704:	686c      	ldr	r4, [r5, #4]
 8007706:	69a3      	ldr	r3, [r4, #24]
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	071a      	lsls	r2, r3, #28
 800770e:	d52f      	bpl.n	8007770 <__swbuf_r+0x84>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	b36b      	cbz	r3, 8007770 <__swbuf_r+0x84>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	1ac0      	subs	r0, r0, r3
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	b2f6      	uxtb	r6, r6
 800771e:	4283      	cmp	r3, r0
 8007720:	4637      	mov	r7, r6
 8007722:	dc04      	bgt.n	800772e <__swbuf_r+0x42>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f000 f922 	bl	8007970 <_fflush_r>
 800772c:	bb30      	cbnz	r0, 800777c <__swbuf_r+0x90>
 800772e:	68a3      	ldr	r3, [r4, #8]
 8007730:	3b01      	subs	r3, #1
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	6022      	str	r2, [r4, #0]
 800773a:	701e      	strb	r6, [r3, #0]
 800773c:	6963      	ldr	r3, [r4, #20]
 800773e:	3001      	adds	r0, #1
 8007740:	4283      	cmp	r3, r0
 8007742:	d004      	beq.n	800774e <__swbuf_r+0x62>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	07db      	lsls	r3, r3, #31
 8007748:	d506      	bpl.n	8007758 <__swbuf_r+0x6c>
 800774a:	2e0a      	cmp	r6, #10
 800774c:	d104      	bne.n	8007758 <__swbuf_r+0x6c>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f90d 	bl	8007970 <_fflush_r>
 8007756:	b988      	cbnz	r0, 800777c <__swbuf_r+0x90>
 8007758:	4638      	mov	r0, r7
 800775a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <__swbuf_r+0x9c>)
 800775e:	429c      	cmp	r4, r3
 8007760:	d101      	bne.n	8007766 <__swbuf_r+0x7a>
 8007762:	68ac      	ldr	r4, [r5, #8]
 8007764:	e7cf      	b.n	8007706 <__swbuf_r+0x1a>
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <__swbuf_r+0xa0>)
 8007768:	429c      	cmp	r4, r3
 800776a:	bf08      	it	eq
 800776c:	68ec      	ldreq	r4, [r5, #12]
 800776e:	e7ca      	b.n	8007706 <__swbuf_r+0x1a>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f80c 	bl	8007790 <__swsetup_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d0cb      	beq.n	8007714 <__swbuf_r+0x28>
 800777c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007780:	e7ea      	b.n	8007758 <__swbuf_r+0x6c>
 8007782:	bf00      	nop
 8007784:	0800ac80 	.word	0x0800ac80
 8007788:	0800aca0 	.word	0x0800aca0
 800778c:	0800ac60 	.word	0x0800ac60

08007790 <__swsetup_r>:
 8007790:	4b32      	ldr	r3, [pc, #200]	; (800785c <__swsetup_r+0xcc>)
 8007792:	b570      	push	{r4, r5, r6, lr}
 8007794:	681d      	ldr	r5, [r3, #0]
 8007796:	4606      	mov	r6, r0
 8007798:	460c      	mov	r4, r1
 800779a:	b125      	cbz	r5, 80077a6 <__swsetup_r+0x16>
 800779c:	69ab      	ldr	r3, [r5, #24]
 800779e:	b913      	cbnz	r3, 80077a6 <__swsetup_r+0x16>
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 f963 	bl	8007a6c <__sinit>
 80077a6:	4b2e      	ldr	r3, [pc, #184]	; (8007860 <__swsetup_r+0xd0>)
 80077a8:	429c      	cmp	r4, r3
 80077aa:	d10f      	bne.n	80077cc <__swsetup_r+0x3c>
 80077ac:	686c      	ldr	r4, [r5, #4]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077b4:	0719      	lsls	r1, r3, #28
 80077b6:	d42c      	bmi.n	8007812 <__swsetup_r+0x82>
 80077b8:	06dd      	lsls	r5, r3, #27
 80077ba:	d411      	bmi.n	80077e0 <__swsetup_r+0x50>
 80077bc:	2309      	movs	r3, #9
 80077be:	6033      	str	r3, [r6, #0]
 80077c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ca:	e03e      	b.n	800784a <__swsetup_r+0xba>
 80077cc:	4b25      	ldr	r3, [pc, #148]	; (8007864 <__swsetup_r+0xd4>)
 80077ce:	429c      	cmp	r4, r3
 80077d0:	d101      	bne.n	80077d6 <__swsetup_r+0x46>
 80077d2:	68ac      	ldr	r4, [r5, #8]
 80077d4:	e7eb      	b.n	80077ae <__swsetup_r+0x1e>
 80077d6:	4b24      	ldr	r3, [pc, #144]	; (8007868 <__swsetup_r+0xd8>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	bf08      	it	eq
 80077dc:	68ec      	ldreq	r4, [r5, #12]
 80077de:	e7e6      	b.n	80077ae <__swsetup_r+0x1e>
 80077e0:	0758      	lsls	r0, r3, #29
 80077e2:	d512      	bpl.n	800780a <__swsetup_r+0x7a>
 80077e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e6:	b141      	cbz	r1, 80077fa <__swsetup_r+0x6a>
 80077e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ec:	4299      	cmp	r1, r3
 80077ee:	d002      	beq.n	80077f6 <__swsetup_r+0x66>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7fe fef3 	bl	80065dc <_free_r>
 80077f6:	2300      	movs	r3, #0
 80077f8:	6363      	str	r3, [r4, #52]	; 0x34
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	2300      	movs	r3, #0
 8007804:	6063      	str	r3, [r4, #4]
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	b94b      	cbnz	r3, 800782a <__swsetup_r+0x9a>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800781c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007820:	d003      	beq.n	800782a <__swsetup_r+0x9a>
 8007822:	4621      	mov	r1, r4
 8007824:	4630      	mov	r0, r6
 8007826:	f000 f99f 	bl	8007b68 <__smakebuf_r>
 800782a:	89a0      	ldrh	r0, [r4, #12]
 800782c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007830:	f010 0301 	ands.w	r3, r0, #1
 8007834:	d00a      	beq.n	800784c <__swsetup_r+0xbc>
 8007836:	2300      	movs	r3, #0
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	6963      	ldr	r3, [r4, #20]
 800783c:	425b      	negs	r3, r3
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	b943      	cbnz	r3, 8007856 <__swsetup_r+0xc6>
 8007844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007848:	d1ba      	bne.n	80077c0 <__swsetup_r+0x30>
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	0781      	lsls	r1, r0, #30
 800784e:	bf58      	it	pl
 8007850:	6963      	ldrpl	r3, [r4, #20]
 8007852:	60a3      	str	r3, [r4, #8]
 8007854:	e7f4      	b.n	8007840 <__swsetup_r+0xb0>
 8007856:	2000      	movs	r0, #0
 8007858:	e7f7      	b.n	800784a <__swsetup_r+0xba>
 800785a:	bf00      	nop
 800785c:	20000084 	.word	0x20000084
 8007860:	0800ac80 	.word	0x0800ac80
 8007864:	0800aca0 	.word	0x0800aca0
 8007868:	0800ac60 	.word	0x0800ac60

0800786c <__sflush_r>:
 800786c:	898a      	ldrh	r2, [r1, #12]
 800786e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007870:	4605      	mov	r5, r0
 8007872:	0710      	lsls	r0, r2, #28
 8007874:	460c      	mov	r4, r1
 8007876:	d457      	bmi.n	8007928 <__sflush_r+0xbc>
 8007878:	684b      	ldr	r3, [r1, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dc04      	bgt.n	8007888 <__sflush_r+0x1c>
 800787e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	dc01      	bgt.n	8007888 <__sflush_r+0x1c>
 8007884:	2000      	movs	r0, #0
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800788a:	2e00      	cmp	r6, #0
 800788c:	d0fa      	beq.n	8007884 <__sflush_r+0x18>
 800788e:	2300      	movs	r3, #0
 8007890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007894:	682f      	ldr	r7, [r5, #0]
 8007896:	602b      	str	r3, [r5, #0]
 8007898:	d032      	beq.n	8007900 <__sflush_r+0x94>
 800789a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	075a      	lsls	r2, r3, #29
 80078a0:	d505      	bpl.n	80078ae <__sflush_r+0x42>
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	1ac0      	subs	r0, r0, r3
 80078a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a8:	b10b      	cbz	r3, 80078ae <__sflush_r+0x42>
 80078aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078ac:	1ac0      	subs	r0, r0, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	4602      	mov	r2, r0
 80078b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078b4:	6a21      	ldr	r1, [r4, #32]
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b0      	blx	r6
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	d106      	bne.n	80078ce <__sflush_r+0x62>
 80078c0:	6829      	ldr	r1, [r5, #0]
 80078c2:	291d      	cmp	r1, #29
 80078c4:	d82c      	bhi.n	8007920 <__sflush_r+0xb4>
 80078c6:	4a29      	ldr	r2, [pc, #164]	; (800796c <__sflush_r+0x100>)
 80078c8:	40ca      	lsrs	r2, r1
 80078ca:	07d6      	lsls	r6, r2, #31
 80078cc:	d528      	bpl.n	8007920 <__sflush_r+0xb4>
 80078ce:	2200      	movs	r2, #0
 80078d0:	6062      	str	r2, [r4, #4]
 80078d2:	04d9      	lsls	r1, r3, #19
 80078d4:	6922      	ldr	r2, [r4, #16]
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	d504      	bpl.n	80078e4 <__sflush_r+0x78>
 80078da:	1c42      	adds	r2, r0, #1
 80078dc:	d101      	bne.n	80078e2 <__sflush_r+0x76>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b903      	cbnz	r3, 80078e4 <__sflush_r+0x78>
 80078e2:	6560      	str	r0, [r4, #84]	; 0x54
 80078e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078e6:	602f      	str	r7, [r5, #0]
 80078e8:	2900      	cmp	r1, #0
 80078ea:	d0cb      	beq.n	8007884 <__sflush_r+0x18>
 80078ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078f0:	4299      	cmp	r1, r3
 80078f2:	d002      	beq.n	80078fa <__sflush_r+0x8e>
 80078f4:	4628      	mov	r0, r5
 80078f6:	f7fe fe71 	bl	80065dc <_free_r>
 80078fa:	2000      	movs	r0, #0
 80078fc:	6360      	str	r0, [r4, #52]	; 0x34
 80078fe:	e7c2      	b.n	8007886 <__sflush_r+0x1a>
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	2301      	movs	r3, #1
 8007904:	4628      	mov	r0, r5
 8007906:	47b0      	blx	r6
 8007908:	1c41      	adds	r1, r0, #1
 800790a:	d1c7      	bne.n	800789c <__sflush_r+0x30>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0c4      	beq.n	800789c <__sflush_r+0x30>
 8007912:	2b1d      	cmp	r3, #29
 8007914:	d001      	beq.n	800791a <__sflush_r+0xae>
 8007916:	2b16      	cmp	r3, #22
 8007918:	d101      	bne.n	800791e <__sflush_r+0xb2>
 800791a:	602f      	str	r7, [r5, #0]
 800791c:	e7b2      	b.n	8007884 <__sflush_r+0x18>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	e7ae      	b.n	8007886 <__sflush_r+0x1a>
 8007928:	690f      	ldr	r7, [r1, #16]
 800792a:	2f00      	cmp	r7, #0
 800792c:	d0aa      	beq.n	8007884 <__sflush_r+0x18>
 800792e:	0793      	lsls	r3, r2, #30
 8007930:	680e      	ldr	r6, [r1, #0]
 8007932:	bf08      	it	eq
 8007934:	694b      	ldreq	r3, [r1, #20]
 8007936:	600f      	str	r7, [r1, #0]
 8007938:	bf18      	it	ne
 800793a:	2300      	movne	r3, #0
 800793c:	1bf6      	subs	r6, r6, r7
 800793e:	608b      	str	r3, [r1, #8]
 8007940:	2e00      	cmp	r6, #0
 8007942:	dd9f      	ble.n	8007884 <__sflush_r+0x18>
 8007944:	6a21      	ldr	r1, [r4, #32]
 8007946:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800794a:	4633      	mov	r3, r6
 800794c:	463a      	mov	r2, r7
 800794e:	4628      	mov	r0, r5
 8007950:	47e0      	blx	ip
 8007952:	2800      	cmp	r0, #0
 8007954:	dc06      	bgt.n	8007964 <__sflush_r+0xf8>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007962:	e790      	b.n	8007886 <__sflush_r+0x1a>
 8007964:	4407      	add	r7, r0
 8007966:	1a36      	subs	r6, r6, r0
 8007968:	e7ea      	b.n	8007940 <__sflush_r+0xd4>
 800796a:	bf00      	nop
 800796c:	20400001 	.word	0x20400001

08007970 <_fflush_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	4605      	mov	r5, r0
 8007976:	460c      	mov	r4, r1
 8007978:	b913      	cbnz	r3, 8007980 <_fflush_r+0x10>
 800797a:	2500      	movs	r5, #0
 800797c:	4628      	mov	r0, r5
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	b118      	cbz	r0, 800798a <_fflush_r+0x1a>
 8007982:	6983      	ldr	r3, [r0, #24]
 8007984:	b90b      	cbnz	r3, 800798a <_fflush_r+0x1a>
 8007986:	f000 f871 	bl	8007a6c <__sinit>
 800798a:	4b14      	ldr	r3, [pc, #80]	; (80079dc <_fflush_r+0x6c>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d11b      	bne.n	80079c8 <_fflush_r+0x58>
 8007990:	686c      	ldr	r4, [r5, #4]
 8007992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0ef      	beq.n	800797a <_fflush_r+0xa>
 800799a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800799c:	07d0      	lsls	r0, r2, #31
 800799e:	d404      	bmi.n	80079aa <_fflush_r+0x3a>
 80079a0:	0599      	lsls	r1, r3, #22
 80079a2:	d402      	bmi.n	80079aa <_fflush_r+0x3a>
 80079a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a6:	f000 fe0e 	bl	80085c6 <__retarget_lock_acquire_recursive>
 80079aa:	4628      	mov	r0, r5
 80079ac:	4621      	mov	r1, r4
 80079ae:	f7ff ff5d 	bl	800786c <__sflush_r>
 80079b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079b4:	07da      	lsls	r2, r3, #31
 80079b6:	4605      	mov	r5, r0
 80079b8:	d4e0      	bmi.n	800797c <_fflush_r+0xc>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	059b      	lsls	r3, r3, #22
 80079be:	d4dd      	bmi.n	800797c <_fflush_r+0xc>
 80079c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c2:	f000 fe08 	bl	80085d6 <__retarget_lock_release_recursive>
 80079c6:	e7d9      	b.n	800797c <_fflush_r+0xc>
 80079c8:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <_fflush_r+0x70>)
 80079ca:	429c      	cmp	r4, r3
 80079cc:	d101      	bne.n	80079d2 <_fflush_r+0x62>
 80079ce:	68ac      	ldr	r4, [r5, #8]
 80079d0:	e7df      	b.n	8007992 <_fflush_r+0x22>
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <_fflush_r+0x74>)
 80079d4:	429c      	cmp	r4, r3
 80079d6:	bf08      	it	eq
 80079d8:	68ec      	ldreq	r4, [r5, #12]
 80079da:	e7da      	b.n	8007992 <_fflush_r+0x22>
 80079dc:	0800ac80 	.word	0x0800ac80
 80079e0:	0800aca0 	.word	0x0800aca0
 80079e4:	0800ac60 	.word	0x0800ac60

080079e8 <std>:
 80079e8:	2300      	movs	r3, #0
 80079ea:	b510      	push	{r4, lr}
 80079ec:	4604      	mov	r4, r0
 80079ee:	e9c0 3300 	strd	r3, r3, [r0]
 80079f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079f6:	6083      	str	r3, [r0, #8]
 80079f8:	8181      	strh	r1, [r0, #12]
 80079fa:	6643      	str	r3, [r0, #100]	; 0x64
 80079fc:	81c2      	strh	r2, [r0, #14]
 80079fe:	6183      	str	r3, [r0, #24]
 8007a00:	4619      	mov	r1, r3
 8007a02:	2208      	movs	r2, #8
 8007a04:	305c      	adds	r0, #92	; 0x5c
 8007a06:	f001 fd93 	bl	8009530 <memset>
 8007a0a:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <std+0x38>)
 8007a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <std+0x3c>)
 8007a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a12:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <std+0x40>)
 8007a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <std+0x44>)
 8007a18:	6224      	str	r4, [r4, #32]
 8007a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	bf00      	nop
 8007a20:	08009b31 	.word	0x08009b31
 8007a24:	08009b53 	.word	0x08009b53
 8007a28:	08009b8b 	.word	0x08009b8b
 8007a2c:	08009baf 	.word	0x08009baf

08007a30 <_cleanup_r>:
 8007a30:	4901      	ldr	r1, [pc, #4]	; (8007a38 <_cleanup_r+0x8>)
 8007a32:	f002 b80f 	b.w	8009a54 <_fwalk_reent>
 8007a36:	bf00      	nop
 8007a38:	08007971 	.word	0x08007971

08007a3c <__sfp_lock_acquire>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sfp_lock_acquire+0x8>)
 8007a3e:	f000 bdc2 	b.w	80085c6 <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	20000294 	.word	0x20000294

08007a48 <__sfp_lock_release>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__sfp_lock_release+0x8>)
 8007a4a:	f000 bdc4 	b.w	80085d6 <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20000294 	.word	0x20000294

08007a54 <__sinit_lock_acquire>:
 8007a54:	4801      	ldr	r0, [pc, #4]	; (8007a5c <__sinit_lock_acquire+0x8>)
 8007a56:	f000 bdb6 	b.w	80085c6 <__retarget_lock_acquire_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	200002a8 	.word	0x200002a8

08007a60 <__sinit_lock_release>:
 8007a60:	4801      	ldr	r0, [pc, #4]	; (8007a68 <__sinit_lock_release+0x8>)
 8007a62:	f000 bdb8 	b.w	80085d6 <__retarget_lock_release_recursive>
 8007a66:	bf00      	nop
 8007a68:	200002a8 	.word	0x200002a8

08007a6c <__sinit>:
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f7ff fff0 	bl	8007a54 <__sinit_lock_acquire>
 8007a74:	69a3      	ldr	r3, [r4, #24]
 8007a76:	b11b      	cbz	r3, 8007a80 <__sinit+0x14>
 8007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a7c:	f7ff bff0 	b.w	8007a60 <__sinit_lock_release>
 8007a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a84:	6523      	str	r3, [r4, #80]	; 0x50
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <__sinit+0x68>)
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <__sinit+0x6c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	bf04      	itt	eq
 8007a92:	2301      	moveq	r3, #1
 8007a94:	61a3      	streq	r3, [r4, #24]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f820 	bl	8007adc <__sfp>
 8007a9c:	6060      	str	r0, [r4, #4]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f81c 	bl	8007adc <__sfp>
 8007aa4:	60a0      	str	r0, [r4, #8]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 f818 	bl	8007adc <__sfp>
 8007aac:	2200      	movs	r2, #0
 8007aae:	60e0      	str	r0, [r4, #12]
 8007ab0:	2104      	movs	r1, #4
 8007ab2:	6860      	ldr	r0, [r4, #4]
 8007ab4:	f7ff ff98 	bl	80079e8 <std>
 8007ab8:	68a0      	ldr	r0, [r4, #8]
 8007aba:	2201      	movs	r2, #1
 8007abc:	2109      	movs	r1, #9
 8007abe:	f7ff ff93 	bl	80079e8 <std>
 8007ac2:	68e0      	ldr	r0, [r4, #12]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	2112      	movs	r1, #18
 8007ac8:	f7ff ff8e 	bl	80079e8 <std>
 8007acc:	2301      	movs	r3, #1
 8007ace:	61a3      	str	r3, [r4, #24]
 8007ad0:	e7d2      	b.n	8007a78 <__sinit+0xc>
 8007ad2:	bf00      	nop
 8007ad4:	0800ac50 	.word	0x0800ac50
 8007ad8:	08007a31 	.word	0x08007a31

08007adc <__sfp>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	4607      	mov	r7, r0
 8007ae0:	f7ff ffac 	bl	8007a3c <__sfp_lock_acquire>
 8007ae4:	4b1e      	ldr	r3, [pc, #120]	; (8007b60 <__sfp+0x84>)
 8007ae6:	681e      	ldr	r6, [r3, #0]
 8007ae8:	69b3      	ldr	r3, [r6, #24]
 8007aea:	b913      	cbnz	r3, 8007af2 <__sfp+0x16>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ffbd 	bl	8007a6c <__sinit>
 8007af2:	3648      	adds	r6, #72	; 0x48
 8007af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	d503      	bpl.n	8007b04 <__sfp+0x28>
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	b30b      	cbz	r3, 8007b44 <__sfp+0x68>
 8007b00:	6836      	ldr	r6, [r6, #0]
 8007b02:	e7f7      	b.n	8007af4 <__sfp+0x18>
 8007b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b08:	b9d5      	cbnz	r5, 8007b40 <__sfp+0x64>
 8007b0a:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <__sfp+0x88>)
 8007b0c:	60e3      	str	r3, [r4, #12]
 8007b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b12:	6665      	str	r5, [r4, #100]	; 0x64
 8007b14:	f000 fd4e 	bl	80085b4 <__retarget_lock_init_recursive>
 8007b18:	f7ff ff96 	bl	8007a48 <__sfp_lock_release>
 8007b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b24:	6025      	str	r5, [r4, #0]
 8007b26:	61a5      	str	r5, [r4, #24]
 8007b28:	2208      	movs	r2, #8
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b30:	f001 fcfe 	bl	8009530 <memset>
 8007b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b40:	3468      	adds	r4, #104	; 0x68
 8007b42:	e7d9      	b.n	8007af8 <__sfp+0x1c>
 8007b44:	2104      	movs	r1, #4
 8007b46:	4638      	mov	r0, r7
 8007b48:	f001 ff6e 	bl	8009a28 <__sfmoreglue>
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	6030      	str	r0, [r6, #0]
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d1d5      	bne.n	8007b00 <__sfp+0x24>
 8007b54:	f7ff ff78 	bl	8007a48 <__sfp_lock_release>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	e7ee      	b.n	8007b3c <__sfp+0x60>
 8007b5e:	bf00      	nop
 8007b60:	0800ac50 	.word	0x0800ac50
 8007b64:	ffff0001 	.word	0xffff0001

08007b68 <__smakebuf_r>:
 8007b68:	898b      	ldrh	r3, [r1, #12]
 8007b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b6c:	079d      	lsls	r5, r3, #30
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	d507      	bpl.n	8007b84 <__smakebuf_r+0x1c>
 8007b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	6163      	str	r3, [r4, #20]
 8007b80:	b002      	add	sp, #8
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	ab01      	add	r3, sp, #4
 8007b86:	466a      	mov	r2, sp
 8007b88:	f001 ff83 	bl	8009a92 <__swhatbuf_r>
 8007b8c:	9900      	ldr	r1, [sp, #0]
 8007b8e:	4605      	mov	r5, r0
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7fe fd6d 	bl	8006670 <_malloc_r>
 8007b96:	b948      	cbnz	r0, 8007bac <__smakebuf_r+0x44>
 8007b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9c:	059a      	lsls	r2, r3, #22
 8007b9e:	d4ef      	bmi.n	8007b80 <__smakebuf_r+0x18>
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	f043 0302 	orr.w	r3, r3, #2
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7e3      	b.n	8007b74 <__smakebuf_r+0xc>
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <__smakebuf_r+0x7c>)
 8007bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	6163      	str	r3, [r4, #20]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b15b      	cbz	r3, 8007bdc <__smakebuf_r+0x74>
 8007bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f85b 	bl	8007c84 <_isatty_r>
 8007bce:	b128      	cbz	r0, 8007bdc <__smakebuf_r+0x74>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	89a0      	ldrh	r0, [r4, #12]
 8007bde:	4305      	orrs	r5, r0
 8007be0:	81a5      	strh	r5, [r4, #12]
 8007be2:	e7cd      	b.n	8007b80 <__smakebuf_r+0x18>
 8007be4:	08007a31 	.word	0x08007a31

08007be8 <raise>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <raise+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f001 bf75 	b.w	8009adc <_raise_r>
 8007bf2:	bf00      	nop
 8007bf4:	20000084 	.word	0x20000084

08007bf8 <_kill_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d07      	ldr	r5, [pc, #28]	; (8007c18 <_kill_r+0x20>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f000 fccc 	bl	80085a2 <_kill>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d102      	bne.n	8007c14 <_kill_r+0x1c>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b103      	cbz	r3, 8007c14 <_kill_r+0x1c>
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	20000664 	.word	0x20000664

08007c1c <_write_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	; (8007c3c <_write_r+0x20>)
 8007c20:	4604      	mov	r4, r0
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 fca9 	bl	8008582 <_write>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_write_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_write_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000664 	.word	0x20000664

08007c40 <_close_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d06      	ldr	r5, [pc, #24]	; (8007c5c <_close_r+0x1c>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	602b      	str	r3, [r5, #0]
 8007c4c:	f000 fc9f 	bl	800858e <_close>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_close_r+0x1a>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_close_r+0x1a>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	20000664 	.word	0x20000664

08007c60 <_fstat_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	; (8007c80 <_fstat_r+0x20>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f000 fc9c 	bl	80085aa <_fstat>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d102      	bne.n	8007c7c <_fstat_r+0x1c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	b103      	cbz	r3, 8007c7c <_fstat_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000664 	.word	0x20000664

08007c84 <_isatty_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_isatty_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f000 fc82 	bl	8008598 <_isatty>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_isatty_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_isatty_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000664 	.word	0x20000664

08007ca4 <_lseek_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d07      	ldr	r5, [pc, #28]	; (8007cc4 <_lseek_r+0x20>)
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4608      	mov	r0, r1
 8007cac:	4611      	mov	r1, r2
 8007cae:	2200      	movs	r2, #0
 8007cb0:	602a      	str	r2, [r5, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f000 fc6e 	bl	8008594 <_lseek>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d102      	bne.n	8007cc2 <_lseek_r+0x1e>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	b103      	cbz	r3, 8007cc2 <_lseek_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	20000664 	.word	0x20000664

08007cc8 <_read_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_read_r+0x20>)
 8007ccc:	4604      	mov	r4, r0
 8007cce:	4608      	mov	r0, r1
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 fc4d 	bl	8008576 <_read>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_read_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_read_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000664 	.word	0x20000664

08007cec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8007cec:	4770      	bx	lr

08007cee <fill_msg_bit_field>:
void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 8007cee:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 8007cf0:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 8007cf2:	e013      	b.n	8007d1c <fill_msg_bit_field+0x2e>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8007cf4:	ebac 0e04 	sub.w	lr, ip, r4
 8007cf8:	f04f 0c01 	mov.w	ip, #1
 8007cfc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007d00:	ea01 0c0c 	and.w	ip, r1, ip
 8007d04:	fa0c fc04 	lsl.w	ip, ip, r4
 8007d08:	6805      	ldr	r5, [r0, #0]
 8007d0a:	ea45 050c 	orr.w	r5, r5, ip
 8007d0e:	6005      	str	r5, [r0, #0]
        (*pos)++;
 8007d10:	f893 c000 	ldrb.w	ip, [r3]
 8007d14:	f10c 0c01 	add.w	ip, ip, #1
 8007d18:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 8007d1c:	f893 c000 	ldrb.w	ip, [r3]
 8007d20:	1915      	adds	r5, r2, r4
 8007d22:	45ac      	cmp	ip, r5
 8007d24:	dbe6      	blt.n	8007cf4 <fill_msg_bit_field+0x6>
}
 8007d26:	bd30      	pop	{r4, r5, pc}

08007d28 <extract_msg_bit_field>:
void extract_msg_bit_field(uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 8007d28:	b510      	push	{r4, lr}
    uint8_t start_pos = *pos;
 8007d2a:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 8007d2c:	e015      	b.n	8007d5a <extract_msg_bit_field+0x32>
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8007d2e:	f04f 0c01 	mov.w	ip, #1
 8007d32:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007d36:	f8d0 e000 	ldr.w	lr, [r0]
 8007d3a:	ea0e 0c0c 	and.w	ip, lr, ip
 8007d3e:	fa2c fc04 	lsr.w	ip, ip, r4
 8007d42:	f891 e000 	ldrb.w	lr, [r1]
 8007d46:	ea4e 0c0c 	orr.w	ip, lr, ip
 8007d4a:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 8007d4e:	f893 c000 	ldrb.w	ip, [r3]
 8007d52:	f10c 0c01 	add.w	ip, ip, #1
 8007d56:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 8007d5a:	f893 e000 	ldrb.w	lr, [r3]
 8007d5e:	eb02 0c04 	add.w	ip, r2, r4
 8007d62:	45e6      	cmp	lr, ip
 8007d64:	dbe3      	blt.n	8007d2e <extract_msg_bit_field+0x6>
}
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <reverse>:
uint8_t reverse(uint8_t input) {
 8007d68:	2300      	movs	r3, #0
    uint8_t pos = 0;
 8007d6a:	461a      	mov	r2, r3
    while( pos < 7 ) {
 8007d6c:	e007      	b.n	8007d7e <reverse+0x16>
        bit = input & BIT(0);
 8007d6e:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 8007d72:	430b      	orrs	r3, r1
        output = output << 1;
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	b2db      	uxtb	r3, r3
        input = input >> 1;
 8007d78:	0840      	lsrs	r0, r0, #1
        pos++;
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 8007d7e:	2a06      	cmp	r2, #6
 8007d80:	d9f5      	bls.n	8007d6e <reverse+0x6>
    bit = input & BIT(0);
 8007d82:	f000 0001 	and.w	r0, r0, #1
}
 8007d86:	4318      	orrs	r0, r3
 8007d88:	4770      	bx	lr

08007d8a <arch_printk_char_out>:
}
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	4770      	bx	lr

08007d8e <str_out>:
{
 8007d8e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8007d90:	680c      	ldr	r4, [r1, #0]
 8007d92:	b154      	cbz	r4, 8007daa <str_out+0x1c>
 8007d94:	688a      	ldr	r2, [r1, #8]
 8007d96:	684b      	ldr	r3, [r1, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	da06      	bge.n	8007daa <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d008      	beq.n	8007db4 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 8007da2:	1c53      	adds	r3, r2, #1
 8007da4:	608b      	str	r3, [r1, #8]
 8007da6:	54a0      	strb	r0, [r4, r2]
 8007da8:	e002      	b.n	8007db0 <str_out+0x22>
		ctx->count++;
 8007daa:	688b      	ldr	r3, [r1, #8]
 8007dac:	3301      	adds	r3, #1
 8007dae:	608b      	str	r3, [r1, #8]
}
 8007db0:	bc10      	pop	{r4}
 8007db2:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 8007db4:	1c53      	adds	r3, r2, #1
 8007db6:	608b      	str	r3, [r1, #8]
 8007db8:	2300      	movs	r3, #0
 8007dba:	54a3      	strb	r3, [r4, r2]
 8007dbc:	e7f8      	b.n	8007db0 <str_out+0x22>

08007dbe <printk>:
{
 8007dbe:	b40f      	push	{r0, r1, r2, r3}
 8007dc0:	b500      	push	{lr}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8007dca:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8007dcc:	f7f9 ff26 	bl	8001c1c <vprintk>
}
 8007dd0:	b003      	add	sp, #12
 8007dd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd6:	b004      	add	sp, #16
 8007dd8:	4770      	bx	lr

08007dda <snprintk>:
{
 8007dda:	b40c      	push	{r2, r3}
 8007ddc:	b500      	push	{lr}
 8007dde:	b083      	sub	sp, #12
 8007de0:	ab04      	add	r3, sp, #16
 8007de2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8007de6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8007de8:	f7f9 ff28 	bl	8001c3c <vsnprintk>
}
 8007dec:	b003      	add	sp, #12
 8007dee:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df2:	b002      	add	sp, #8
 8007df4:	4770      	bx	lr

08007df6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8007df6:	b508      	push	{r3, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8007dfe:	461a      	mov	r2, r3
 8007e00:	47a0      	blx	r4
	return z_impl_z_current_get();
 8007e02:	f7fe f989 	bl	8006118 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 8007e06:	f7fc f85b 	bl	8003ec0 <z_impl_k_thread_abort>

08007e0a <outs>:
{
 8007e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0e:	4607      	mov	r7, r0
 8007e10:	460e      	mov	r6, r1
 8007e12:	4614      	mov	r4, r2
 8007e14:	4698      	mov	r8, r3
	size_t count = 0;
 8007e16:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8007e18:	e006      	b.n	8007e28 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e20:	47b8      	blx	r7
		if (rc < 0) {
 8007e22:	2800      	cmp	r0, #0
 8007e24:	db09      	blt.n	8007e3a <outs+0x30>
		++count;
 8007e26:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8007e28:	4544      	cmp	r4, r8
 8007e2a:	d3f6      	bcc.n	8007e1a <outs+0x10>
 8007e2c:	f1b8 0f00 	cmp.w	r8, #0
 8007e30:	d102      	bne.n	8007e38 <outs+0x2e>
 8007e32:	7823      	ldrb	r3, [r4, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f0      	bne.n	8007e1a <outs+0x10>
	return (int)count;
 8007e38:	4628      	mov	r0, r5
}
 8007e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e3e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8007e3e:	4770      	bx	lr

08007e40 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8007e40:	2000      	movs	r0, #0
 8007e42:	4770      	bx	lr

08007e44 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 8007e48:	6003      	str	r3, [r0, #0]
}
 8007e4a:	4770      	bx	lr

08007e4c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 8007e4c:	6803      	ldr	r3, [r0, #0]
 8007e4e:	b12b      	cbz	r3, 8007e5c <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 8007e50:	6843      	ldr	r3, [r0, #4]
 8007e52:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 8007e54:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	600b      	str	r3, [r1, #0]
}
 8007e5a:	4770      	bx	lr
		list->head = msg;
 8007e5c:	6001      	str	r1, [r0, #0]
 8007e5e:	e7f9      	b.n	8007e54 <log_list_add_tail+0x8>

08007e60 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 8007e60:	6800      	ldr	r0, [r0, #0]
 8007e62:	4770      	bx	lr

08007e64 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 8007e64:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 8007e66:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 8007e68:	b108      	cbz	r0, 8007e6e <log_list_head_get+0xa>
		list->head = list->head->next;
 8007e6a:	6802      	ldr	r2, [r0, #0]
 8007e6c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 8007e6e:	4770      	bx	lr

08007e70 <dummy_timestamp>:
}
 8007e70:	2000      	movs	r0, #0
 8007e72:	4770      	bx	lr

08007e74 <msg_filter_check>:
}
 8007e74:	2001      	movs	r0, #1
 8007e76:	4770      	bx	lr

08007e78 <default_lf_get_timestamp>:
{
 8007e78:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8007e7a:	f001 fb20 	bl	80094be <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007e7e:	220a      	movs	r2, #10
 8007e80:	2300      	movs	r3, #0
 8007e82:	f7f8 fdab 	bl	80009dc <__aeabi_uldivmod>
}
 8007e86:	bd08      	pop	{r3, pc}

08007e88 <block_on_alloc>:
}
 8007e88:	2000      	movs	r0, #0
 8007e8a:	4770      	bx	lr

08007e8c <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 8007e8c:	2901      	cmp	r1, #1
 8007e8e:	d902      	bls.n	8007e96 <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 8007e90:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 8007e92:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 8007e94:	e006      	b.n	8007ea4 <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
 8007e96:	3104      	adds	r1, #4
 8007e98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e9c:	6888      	ldr	r0, [r1, #8]
 8007e9e:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 8007ea0:	3907      	subs	r1, #7
		cont = cont->next;
 8007ea2:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
 8007ea4:	2906      	cmp	r1, #6
 8007ea6:	d8fb      	bhi.n	8007ea0 <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
 8007ea8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007eac:	6848      	ldr	r0, [r1, #4]
}
 8007eae:	4770      	bx	lr

08007eb0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	461c      	mov	r4, r3
 8007eb6:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 8007eba:	8903      	ldrh	r3, [r0, #8]
 8007ebc:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d91f      	bls.n	8007f04 <log_msg_hexdump_data_op+0x54>
 8007ec4:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 8007ec6:	6811      	ldr	r1, [r2, #0]
 8007ec8:	4421      	add	r1, r4
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	d901      	bls.n	8007ed2 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 8007ece:	1b19      	subs	r1, r3, r4
 8007ed0:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 8007ed2:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 8007ed4:	2b0c      	cmp	r3, #12
 8007ed6:	d919      	bls.n	8007f0c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 8007ed8:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 8007edc:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 8007ede:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d91e      	bls.n	8007f22 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8007ee4:	42bb      	cmp	r3, r7
 8007ee6:	bf28      	it	cs
 8007ee8:	463b      	movcs	r3, r7
 8007eea:	461d      	mov	r5, r3

		if (put_op) {
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	d010      	beq.n	8007f14 <log_msg_hexdump_data_op+0x64>
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	eb0c 0004 	add.w	r0, ip, r4
 8007efa:	f001 fb0b 	bl	8009514 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 8007efe:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 8007f00:	44a8      	add	r8, r5
 8007f02:	e021      	b.n	8007f48 <log_msg_hexdump_data_op+0x98>
		*length = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 8007f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 8007f0c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 8007f10:	2600      	movs	r6, #0
 8007f12:	e7e5      	b.n	8007ee0 <log_msg_hexdump_data_op+0x30>
 8007f14:	461a      	mov	r2, r3
 8007f16:	eb0c 0104 	add.w	r1, ip, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f001 fafa 	bl	8009514 <memcpy>
 8007f20:	e7ed      	b.n	8007efe <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 8007f22:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 8007f24:	b91e      	cbnz	r6, 8007f2e <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 8007f26:	6946      	ldr	r6, [r0, #20]
 8007f28:	e001      	b.n	8007f2e <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 8007f2a:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 8007f2c:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 8007f2e:	2c1b      	cmp	r4, #27
 8007f30:	d8fb      	bhi.n	8007f2a <log_msg_hexdump_data_op+0x7a>
 8007f32:	e009      	b.n	8007f48 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 8007f34:	1931      	adds	r1, r6, r4
 8007f36:	462a      	mov	r2, r5
 8007f38:	3104      	adds	r1, #4
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f001 faea 	bl	8009514 <memcpy>
		cont = cont->next;
 8007f40:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 8007f42:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 8007f44:	44a8      	add	r8, r5
		offset = 0;
 8007f46:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	d0dd      	beq.n	8007f08 <log_msg_hexdump_data_op+0x58>
 8007f4c:	2e00      	cmp	r6, #0
 8007f4e:	d0db      	beq.n	8007f08 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 8007f50:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 8007f54:	42bd      	cmp	r5, r7
 8007f56:	bf28      	it	cs
 8007f58:	463d      	movcs	r5, r7
		if (put_op) {
 8007f5a:	f1b9 0f00 	cmp.w	r9, #0
 8007f5e:	d0e9      	beq.n	8007f34 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 8007f60:	1930      	adds	r0, r6, r4
 8007f62:	462a      	mov	r2, r5
 8007f64:	4641      	mov	r1, r8
 8007f66:	3004      	adds	r0, #4
 8007f68:	f001 fad4 	bl	8009514 <memcpy>
 8007f6c:	e7e8      	b.n	8007f40 <log_msg_hexdump_data_op+0x90>

08007f6e <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 8007f6e:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8007f70:	f3bf 8f5b 	dmb	ish
 8007f74:	e850 3f00 	ldrex	r3, [r0]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	e840 3200 	strex	r2, r3, [r0]
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	d1f8      	bne.n	8007f74 <log_msg_get+0x6>
 8007f82:	f3bf 8f5b 	dmb	ish
}
 8007f86:	4770      	bx	lr

08007f88 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 8007f88:	7a40      	ldrb	r0, [r0, #9]
}
 8007f8a:	0900      	lsrs	r0, r0, #4
 8007f8c:	4770      	bx	lr

08007f8e <log_msg_arg_get>:
{
 8007f8e:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 8007f90:	7a43      	ldrb	r3, [r0, #9]
 8007f92:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 8007f96:	d20a      	bcs.n	8007fae <log_msg_arg_get+0x20>
 8007f98:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 8007f9a:	2a03      	cmp	r2, #3
 8007f9c:	d804      	bhi.n	8007fa8 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 8007f9e:	3104      	adds	r1, #4
 8007fa0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007fa4:	6840      	ldr	r0, [r0, #4]
 8007fa6:	e003      	b.n	8007fb0 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 8007fa8:	f7ff ff70 	bl	8007e8c <cont_arg_get>
 8007fac:	e000      	b.n	8007fb0 <log_msg_arg_get+0x22>
		return 0;
 8007fae:	2000      	movs	r0, #0
}
 8007fb0:	bd08      	pop	{r3, pc}

08007fb2 <log_msg_str_get>:
}
 8007fb2:	6900      	ldr	r0, [r0, #16]
 8007fb4:	4770      	bx	lr

08007fb6 <log_msg_put>:
{
 8007fb6:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 8007fb8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8007fba:	f3bf 8f5b 	dmb	ish
 8007fbe:	e853 2f00 	ldrex	r2, [r3]
 8007fc2:	3a01      	subs	r2, #1
 8007fc4:	e843 2100 	strex	r1, r2, [r3]
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	d1f8      	bne.n	8007fbe <log_msg_put+0x8>
 8007fcc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 8007fd0:	6843      	ldr	r3, [r0, #4]
 8007fd2:	b103      	cbz	r3, 8007fd6 <log_msg_put+0x20>
}
 8007fd4:	bd08      	pop	{r3, pc}
		msg_free(msg);
 8007fd6:	f7fa ff89 	bl	8002eec <msg_free>
}
 8007fda:	e7fb      	b.n	8007fd4 <log_msg_put+0x1e>

08007fdc <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	9400      	str	r4, [sp, #0]
 8007fe4:	f7ff ff64 	bl	8007eb0 <log_msg_hexdump_data_op>
}
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd10      	pop	{r4, pc}

08007fec <buffer_write>:
{
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	4607      	mov	r7, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
		buf += processed;
 8007ffe:	4405      	add	r5, r0
	} while (len != 0);
 8008000:	1a24      	subs	r4, r4, r0
 8008002:	d1f8      	bne.n	8007ff6 <buffer_write+0xa>
}
 8008004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008006 <color_prefix>:
{
 8008006:	b508      	push	{r3, lr}
 8008008:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800800a:	2201      	movs	r2, #1
 800800c:	f7fb f806 	bl	800301c <color_print>
}
 8008010:	bd08      	pop	{r3, pc}

08008012 <color_postfix>:
{
 8008012:	b508      	push	{r3, lr}
 8008014:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 8008016:	2200      	movs	r2, #0
 8008018:	f7fb f800 	bl	800301c <color_print>
}
 800801c:	bd08      	pop	{r3, pc}

0800801e <postfix_print>:
{
 800801e:	b538      	push	{r3, r4, r5, lr}
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 8008024:	f001 0101 	and.w	r1, r1, #1
 8008028:	f7ff fff3 	bl	8008012 <color_postfix>
	newline_print(output, flags);
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f7fb f80a 	bl	8003048 <newline_print>
}
 8008034:	bd38      	pop	{r3, r4, r5, pc}

08008036 <prefix_print>:
{
 8008036:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800803a:	b083      	sub	sp, #12
 800803c:	4604      	mov	r4, r0
 800803e:	4615      	mov	r5, r2
 8008040:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8008044:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8008048:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 800804c:	f011 0702 	ands.w	r7, r1, #2
 8008050:	d113      	bne.n	800807a <prefix_print+0x44>
		color_prefix(output, colors_on, level);
 8008052:	4632      	mov	r2, r6
 8008054:	4649      	mov	r1, r9
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff ffd5 	bl	8008006 <color_prefix>
	length += ids_print(output, level_on, func_on,
 800805c:	9601      	str	r6, [sp, #4]
 800805e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8008068:	462a      	mov	r2, r5
 800806a:	4641      	mov	r1, r8
 800806c:	4620      	mov	r0, r4
 800806e:	f7fb f861 	bl	8003134 <ids_print>
}
 8008072:	4438      	add	r0, r7
 8008074:	b003      	add	sp, #12
 8008076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
 800807a:	461a      	mov	r2, r3
 800807c:	f7fa ff88 	bl	8002f90 <timestamp_print>
 8008080:	4607      	mov	r7, r0
 8008082:	e7e6      	b.n	8008052 <prefix_print+0x1c>

08008084 <std_print>:
{
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	b08e      	sub	sp, #56	; 0x38
 800808a:	af0e      	add	r7, sp, #56	; 0x38
 800808c:	4606      	mov	r6, r0
 800808e:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 8008090:	f7ff ff8f 	bl	8007fb2 <log_msg_str_get>
 8008094:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff76 	bl	8007f88 <log_msg_nargs_get>
 800809c:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800809e:	0083      	lsls	r3, r0, #2
 80080a0:	3307      	adds	r3, #7
 80080a2:	f023 0307 	bic.w	r3, r3, #7
 80080a6:	ebad 0d03 	sub.w	sp, sp, r3
 80080aa:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 80080ac:	2400      	movs	r4, #0
 80080ae:	e006      	b.n	80080be <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
 80080b0:	4621      	mov	r1, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f7ff ff6b 	bl	8007f8e <log_msg_arg_get>
 80080b8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 80080bc:	3401      	adds	r4, #1
 80080be:	4544      	cmp	r4, r8
 80080c0:	d3f6      	bcc.n	80080b0 <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7ff ff60 	bl	8007f88 <log_msg_nargs_get>
 80080c8:	280f      	cmp	r0, #15
 80080ca:	d815      	bhi.n	80080f8 <std_print+0x74>
 80080cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80080d0:	00170010 	.word	0x00170010
 80080d4:	0024001d 	.word	0x0024001d
 80080d8:	0038002d 	.word	0x0038002d
 80080dc:	00540045 	.word	0x00540045
 80080e0:	00780065 	.word	0x00780065
 80080e4:	00a4008d 	.word	0x00a4008d
 80080e8:	00d800bd 	.word	0x00d800bd
 80080ec:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
 80080f0:	4651      	mov	r1, sl
 80080f2:	4648      	mov	r0, r9
 80080f4:	f7fa ff3a 	bl	8002f6c <print_formatted>
}
 80080f8:	46bd      	mov	sp, r7
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 80080fe:	682a      	ldr	r2, [r5, #0]
 8008100:	4651      	mov	r1, sl
 8008102:	4648      	mov	r0, r9
 8008104:	f7fa ff32 	bl	8002f6c <print_formatted>
		break;
 8008108:	e7f6      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
 800810a:	686b      	ldr	r3, [r5, #4]
 800810c:	682a      	ldr	r2, [r5, #0]
 800810e:	4651      	mov	r1, sl
 8008110:	4648      	mov	r0, r9
 8008112:	f7fa ff2b 	bl	8002f6c <print_formatted>
		break;
 8008116:	e7ef      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
 8008118:	686b      	ldr	r3, [r5, #4]
 800811a:	682a      	ldr	r2, [r5, #0]
 800811c:	68a9      	ldr	r1, [r5, #8]
 800811e:	9100      	str	r1, [sp, #0]
 8008120:	4651      	mov	r1, sl
 8008122:	4648      	mov	r0, r9
 8008124:	f7fa ff22 	bl	8002f6c <print_formatted>
		break;
 8008128:	e7e6      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800812a:	686b      	ldr	r3, [r5, #4]
 800812c:	682a      	ldr	r2, [r5, #0]
 800812e:	68e9      	ldr	r1, [r5, #12]
 8008130:	9101      	str	r1, [sp, #4]
 8008132:	68a9      	ldr	r1, [r5, #8]
 8008134:	9100      	str	r1, [sp, #0]
 8008136:	4651      	mov	r1, sl
 8008138:	4648      	mov	r0, r9
 800813a:	f7fa ff17 	bl	8002f6c <print_formatted>
		break;
 800813e:	e7db      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 8008140:	686b      	ldr	r3, [r5, #4]
 8008142:	682a      	ldr	r2, [r5, #0]
 8008144:	6929      	ldr	r1, [r5, #16]
 8008146:	9102      	str	r1, [sp, #8]
 8008148:	68e9      	ldr	r1, [r5, #12]
 800814a:	9101      	str	r1, [sp, #4]
 800814c:	68a9      	ldr	r1, [r5, #8]
 800814e:	9100      	str	r1, [sp, #0]
 8008150:	4651      	mov	r1, sl
 8008152:	4648      	mov	r0, r9
 8008154:	f7fa ff0a 	bl	8002f6c <print_formatted>
		break;
 8008158:	e7ce      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800815a:	686b      	ldr	r3, [r5, #4]
 800815c:	682a      	ldr	r2, [r5, #0]
 800815e:	6969      	ldr	r1, [r5, #20]
 8008160:	9103      	str	r1, [sp, #12]
 8008162:	6929      	ldr	r1, [r5, #16]
 8008164:	9102      	str	r1, [sp, #8]
 8008166:	68e9      	ldr	r1, [r5, #12]
 8008168:	9101      	str	r1, [sp, #4]
 800816a:	68a9      	ldr	r1, [r5, #8]
 800816c:	9100      	str	r1, [sp, #0]
 800816e:	4651      	mov	r1, sl
 8008170:	4648      	mov	r0, r9
 8008172:	f7fa fefb 	bl	8002f6c <print_formatted>
		break;
 8008176:	e7bf      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 8008178:	686b      	ldr	r3, [r5, #4]
 800817a:	682a      	ldr	r2, [r5, #0]
 800817c:	69a9      	ldr	r1, [r5, #24]
 800817e:	9104      	str	r1, [sp, #16]
 8008180:	6969      	ldr	r1, [r5, #20]
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	6929      	ldr	r1, [r5, #16]
 8008186:	9102      	str	r1, [sp, #8]
 8008188:	68e9      	ldr	r1, [r5, #12]
 800818a:	9101      	str	r1, [sp, #4]
 800818c:	68a9      	ldr	r1, [r5, #8]
 800818e:	9100      	str	r1, [sp, #0]
 8008190:	4651      	mov	r1, sl
 8008192:	4648      	mov	r0, r9
 8008194:	f7fa feea 	bl	8002f6c <print_formatted>
		break;
 8008198:	e7ae      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800819a:	686b      	ldr	r3, [r5, #4]
 800819c:	682a      	ldr	r2, [r5, #0]
 800819e:	69e9      	ldr	r1, [r5, #28]
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	69a9      	ldr	r1, [r5, #24]
 80081a4:	9104      	str	r1, [sp, #16]
 80081a6:	6969      	ldr	r1, [r5, #20]
 80081a8:	9103      	str	r1, [sp, #12]
 80081aa:	6929      	ldr	r1, [r5, #16]
 80081ac:	9102      	str	r1, [sp, #8]
 80081ae:	68e9      	ldr	r1, [r5, #12]
 80081b0:	9101      	str	r1, [sp, #4]
 80081b2:	68a9      	ldr	r1, [r5, #8]
 80081b4:	9100      	str	r1, [sp, #0]
 80081b6:	4651      	mov	r1, sl
 80081b8:	4648      	mov	r0, r9
 80081ba:	f7fa fed7 	bl	8002f6c <print_formatted>
		break;
 80081be:	e79b      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 80081c0:	686b      	ldr	r3, [r5, #4]
 80081c2:	682a      	ldr	r2, [r5, #0]
 80081c4:	6a29      	ldr	r1, [r5, #32]
 80081c6:	9106      	str	r1, [sp, #24]
 80081c8:	69e9      	ldr	r1, [r5, #28]
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	69a9      	ldr	r1, [r5, #24]
 80081ce:	9104      	str	r1, [sp, #16]
 80081d0:	6969      	ldr	r1, [r5, #20]
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	6929      	ldr	r1, [r5, #16]
 80081d6:	9102      	str	r1, [sp, #8]
 80081d8:	68e9      	ldr	r1, [r5, #12]
 80081da:	9101      	str	r1, [sp, #4]
 80081dc:	68a9      	ldr	r1, [r5, #8]
 80081de:	9100      	str	r1, [sp, #0]
 80081e0:	4651      	mov	r1, sl
 80081e2:	4648      	mov	r0, r9
 80081e4:	f7fa fec2 	bl	8002f6c <print_formatted>
		break;
 80081e8:	e786      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 80081ea:	686b      	ldr	r3, [r5, #4]
 80081ec:	682a      	ldr	r2, [r5, #0]
 80081ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80081f0:	9107      	str	r1, [sp, #28]
 80081f2:	6a29      	ldr	r1, [r5, #32]
 80081f4:	9106      	str	r1, [sp, #24]
 80081f6:	69e9      	ldr	r1, [r5, #28]
 80081f8:	9105      	str	r1, [sp, #20]
 80081fa:	69a9      	ldr	r1, [r5, #24]
 80081fc:	9104      	str	r1, [sp, #16]
 80081fe:	6969      	ldr	r1, [r5, #20]
 8008200:	9103      	str	r1, [sp, #12]
 8008202:	6929      	ldr	r1, [r5, #16]
 8008204:	9102      	str	r1, [sp, #8]
 8008206:	68e9      	ldr	r1, [r5, #12]
 8008208:	9101      	str	r1, [sp, #4]
 800820a:	68a9      	ldr	r1, [r5, #8]
 800820c:	9100      	str	r1, [sp, #0]
 800820e:	4651      	mov	r1, sl
 8008210:	4648      	mov	r0, r9
 8008212:	f7fa feab 	bl	8002f6c <print_formatted>
		break;
 8008216:	e76f      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 8008218:	686b      	ldr	r3, [r5, #4]
 800821a:	682a      	ldr	r2, [r5, #0]
 800821c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800821e:	9108      	str	r1, [sp, #32]
 8008220:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008222:	9107      	str	r1, [sp, #28]
 8008224:	6a29      	ldr	r1, [r5, #32]
 8008226:	9106      	str	r1, [sp, #24]
 8008228:	69e9      	ldr	r1, [r5, #28]
 800822a:	9105      	str	r1, [sp, #20]
 800822c:	69a9      	ldr	r1, [r5, #24]
 800822e:	9104      	str	r1, [sp, #16]
 8008230:	6969      	ldr	r1, [r5, #20]
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	6929      	ldr	r1, [r5, #16]
 8008236:	9102      	str	r1, [sp, #8]
 8008238:	68e9      	ldr	r1, [r5, #12]
 800823a:	9101      	str	r1, [sp, #4]
 800823c:	68a9      	ldr	r1, [r5, #8]
 800823e:	9100      	str	r1, [sp, #0]
 8008240:	4651      	mov	r1, sl
 8008242:	4648      	mov	r0, r9
 8008244:	f7fa fe92 	bl	8002f6c <print_formatted>
		break;
 8008248:	e756      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800824a:	686b      	ldr	r3, [r5, #4]
 800824c:	682a      	ldr	r2, [r5, #0]
 800824e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008250:	9109      	str	r1, [sp, #36]	; 0x24
 8008252:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008254:	9108      	str	r1, [sp, #32]
 8008256:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008258:	9107      	str	r1, [sp, #28]
 800825a:	6a29      	ldr	r1, [r5, #32]
 800825c:	9106      	str	r1, [sp, #24]
 800825e:	69e9      	ldr	r1, [r5, #28]
 8008260:	9105      	str	r1, [sp, #20]
 8008262:	69a9      	ldr	r1, [r5, #24]
 8008264:	9104      	str	r1, [sp, #16]
 8008266:	6969      	ldr	r1, [r5, #20]
 8008268:	9103      	str	r1, [sp, #12]
 800826a:	6929      	ldr	r1, [r5, #16]
 800826c:	9102      	str	r1, [sp, #8]
 800826e:	68e9      	ldr	r1, [r5, #12]
 8008270:	9101      	str	r1, [sp, #4]
 8008272:	68a9      	ldr	r1, [r5, #8]
 8008274:	9100      	str	r1, [sp, #0]
 8008276:	4651      	mov	r1, sl
 8008278:	4648      	mov	r0, r9
 800827a:	f7fa fe77 	bl	8002f6c <print_formatted>
		break;
 800827e:	e73b      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 8008280:	686b      	ldr	r3, [r5, #4]
 8008282:	682a      	ldr	r2, [r5, #0]
 8008284:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008286:	910a      	str	r1, [sp, #40]	; 0x28
 8008288:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800828a:	9109      	str	r1, [sp, #36]	; 0x24
 800828c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800828e:	9108      	str	r1, [sp, #32]
 8008290:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	6a29      	ldr	r1, [r5, #32]
 8008296:	9106      	str	r1, [sp, #24]
 8008298:	69e9      	ldr	r1, [r5, #28]
 800829a:	9105      	str	r1, [sp, #20]
 800829c:	69a9      	ldr	r1, [r5, #24]
 800829e:	9104      	str	r1, [sp, #16]
 80082a0:	6969      	ldr	r1, [r5, #20]
 80082a2:	9103      	str	r1, [sp, #12]
 80082a4:	6929      	ldr	r1, [r5, #16]
 80082a6:	9102      	str	r1, [sp, #8]
 80082a8:	68e9      	ldr	r1, [r5, #12]
 80082aa:	9101      	str	r1, [sp, #4]
 80082ac:	68a9      	ldr	r1, [r5, #8]
 80082ae:	9100      	str	r1, [sp, #0]
 80082b0:	4651      	mov	r1, sl
 80082b2:	4648      	mov	r0, r9
 80082b4:	f7fa fe5a 	bl	8002f6c <print_formatted>
		break;
 80082b8:	e71e      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 80082ba:	686b      	ldr	r3, [r5, #4]
 80082bc:	682a      	ldr	r2, [r5, #0]
 80082be:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80082c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80082c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80082c4:	910a      	str	r1, [sp, #40]	; 0x28
 80082c6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80082c8:	9109      	str	r1, [sp, #36]	; 0x24
 80082ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80082cc:	9108      	str	r1, [sp, #32]
 80082ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80082d0:	9107      	str	r1, [sp, #28]
 80082d2:	6a29      	ldr	r1, [r5, #32]
 80082d4:	9106      	str	r1, [sp, #24]
 80082d6:	69e9      	ldr	r1, [r5, #28]
 80082d8:	9105      	str	r1, [sp, #20]
 80082da:	69a9      	ldr	r1, [r5, #24]
 80082dc:	9104      	str	r1, [sp, #16]
 80082de:	6969      	ldr	r1, [r5, #20]
 80082e0:	9103      	str	r1, [sp, #12]
 80082e2:	6929      	ldr	r1, [r5, #16]
 80082e4:	9102      	str	r1, [sp, #8]
 80082e6:	68e9      	ldr	r1, [r5, #12]
 80082e8:	9101      	str	r1, [sp, #4]
 80082ea:	68a9      	ldr	r1, [r5, #8]
 80082ec:	9100      	str	r1, [sp, #0]
 80082ee:	4651      	mov	r1, sl
 80082f0:	4648      	mov	r0, r9
 80082f2:	f7fa fe3b 	bl	8002f6c <print_formatted>
		break;
 80082f6:	e6ff      	b.n	80080f8 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 80082f8:	686b      	ldr	r3, [r5, #4]
 80082fa:	682a      	ldr	r2, [r5, #0]
 80082fc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80082fe:	910c      	str	r1, [sp, #48]	; 0x30
 8008300:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008302:	910b      	str	r1, [sp, #44]	; 0x2c
 8008304:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008306:	910a      	str	r1, [sp, #40]	; 0x28
 8008308:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800830a:	9109      	str	r1, [sp, #36]	; 0x24
 800830c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800830e:	9108      	str	r1, [sp, #32]
 8008310:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008312:	9107      	str	r1, [sp, #28]
 8008314:	6a29      	ldr	r1, [r5, #32]
 8008316:	9106      	str	r1, [sp, #24]
 8008318:	69e9      	ldr	r1, [r5, #28]
 800831a:	9105      	str	r1, [sp, #20]
 800831c:	69a9      	ldr	r1, [r5, #24]
 800831e:	9104      	str	r1, [sp, #16]
 8008320:	6969      	ldr	r1, [r5, #20]
 8008322:	9103      	str	r1, [sp, #12]
 8008324:	6929      	ldr	r1, [r5, #16]
 8008326:	9102      	str	r1, [sp, #8]
 8008328:	68e9      	ldr	r1, [r5, #12]
 800832a:	9101      	str	r1, [sp, #4]
 800832c:	68a9      	ldr	r1, [r5, #8]
 800832e:	9100      	str	r1, [sp, #0]
 8008330:	4651      	mov	r1, sl
 8008332:	4648      	mov	r0, r9
 8008334:	f7fa fe1a 	bl	8002f6c <print_formatted>
}
 8008338:	e6de      	b.n	80080f8 <std_print+0x74>

0800833a <log_output_flush>:
{
 800833a:	b510      	push	{r4, lr}
 800833c:	4604      	mov	r4, r0
		     output->control_block->offset,
 800833e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8008340:	6853      	ldr	r3, [r2, #4]
 8008342:	6812      	ldr	r2, [r2, #0]
 8008344:	6881      	ldr	r1, [r0, #8]
 8008346:	6800      	ldr	r0, [r0, #0]
 8008348:	f7ff fe50 	bl	8007fec <buffer_write>
	output->control_block->offset = 0;
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]
}
 8008352:	bd10      	pop	{r4, pc}

08008354 <out_func>:
{
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4605      	mov	r5, r0
 8008358:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800835a:	684b      	ldr	r3, [r1, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68cb      	ldr	r3, [r1, #12]
 8008360:	429a      	cmp	r2, r3
 8008362:	d00f      	beq.n	8008384 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 8008364:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8008366:	f3bf 8f5b 	dmb	ish
 800836a:	e853 2f00 	ldrex	r2, [r3]
 800836e:	1c51      	adds	r1, r2, #1
 8008370:	e843 1000 	strex	r0, r1, [r3]
 8008374:	2800      	cmp	r0, #0
 8008376:	d1f8      	bne.n	800836a <out_func+0x16>
 8008378:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	549d      	strb	r5, [r3, r2]
}
 8008380:	2000      	movs	r0, #0
 8008382:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 8008384:	4608      	mov	r0, r1
 8008386:	f7ff ffd8 	bl	800833a <log_output_flush>
 800838a:	e7eb      	b.n	8008364 <out_func+0x10>

0800838c <log_output_msg_process>:
{
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b085      	sub	sp, #20
 8008390:	4606      	mov	r6, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4617      	mov	r7, r2
 8008396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800839a:	f08c 0c01 	eor.w	ip, ip, #1
 800839e:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
 80083a2:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 80083a4:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
 80083a8:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
 80083ac:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
 80083ae:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
 80083b2:	f01c 0507 	ands.w	r5, ip, #7
 80083b6:	d10f      	bne.n	80083d8 <log_output_msg_process+0x4c>
 80083b8:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80083ba:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 80083bc:	f013 0f01 	tst.w	r3, #1
 80083c0:	d013      	beq.n	80083ea <log_output_msg_process+0x5e>
	} else if (raw_string) {
 80083c2:	b9bd      	cbnz	r5, 80083f4 <log_output_msg_process+0x68>
		raw_string_print(msg, output);
 80083c4:	4631      	mov	r1, r6
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7fa ff16 	bl	80031f8 <raw_string_print>
	if (!raw_string) {
 80083cc:	b9c5      	cbnz	r5, 8008400 <log_output_msg_process+0x74>
	log_output_flush(output);
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff ffb3 	bl	800833a <log_output_flush>
}
 80083d4:	b005      	add	sp, #20
 80083d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
 80083d8:	9102      	str	r1, [sp, #8]
 80083da:	9001      	str	r0, [sp, #4]
 80083dc:	9500      	str	r5, [sp, #0]
 80083de:	4639      	mov	r1, r7
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff fe28 	bl	8008036 <prefix_print>
 80083e6:	4602      	mov	r2, r0
 80083e8:	e7e7      	b.n	80083ba <log_output_msg_process+0x2e>
		std_print(msg, output);
 80083ea:	4631      	mov	r1, r6
 80083ec:	4620      	mov	r0, r4
 80083ee:	f7ff fe49 	bl	8008084 <std_print>
 80083f2:	e7eb      	b.n	80083cc <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
 80083f4:	463b      	mov	r3, r7
 80083f6:	4631      	mov	r1, r6
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7fa fed1 	bl	80031a0 <hexdump_print>
 80083fe:	e7e5      	b.n	80083cc <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
 8008400:	462a      	mov	r2, r5
 8008402:	4639      	mov	r1, r7
 8008404:	4630      	mov	r0, r6
 8008406:	f7ff fe0a 	bl	800801e <postfix_print>
 800840a:	e7e0      	b.n	80083ce <log_output_msg_process+0x42>

0800840c <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800840c:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800840e:	f7fa ffab 	bl	8003368 <__do_global_ctors_aux>
	__do_init_array_aux();
 8008412:	f7fa ff9b 	bl	800334c <__do_init_array_aux>
}
 8008416:	bd08      	pop	{r3, pc}

08008418 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 800841a:	b329      	cbz	r1, 8008468 <stm32_dt_pinctrl_configure+0x50>
 800841c:	4606      	mov	r6, r0
 800841e:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 8008420:	2400      	movs	r4, #0
	uint32_t func = 0;
 8008422:	4625      	mov	r5, r4
 8008424:	e00f      	b.n	8008446 <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8008426:	b2d3      	uxtb	r3, r2
 8008428:	2b10      	cmp	r3, #16
 800842a:	d019      	beq.n	8008460 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800842c:	0b13      	lsrs	r3, r2, #12
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	4629      	mov	r1, r5
 800843a:	4318      	orrs	r0, r3
 800843c:	f7fa ffa4 	bl	8003388 <stm32_pin_configure>
		if (ret != 0) {
 8008440:	4603      	mov	r3, r0
 8008442:	b990      	cbnz	r0, 800846a <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 8008444:	3401      	adds	r4, #1
 8008446:	42bc      	cmp	r4, r7
 8008448:	d20c      	bcs.n	8008464 <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 800844a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800844e:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8008452:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8008456:	d1e6      	bne.n	8008426 <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8008458:	685d      	ldr	r5, [r3, #4]
 800845a:	f045 0520 	orr.w	r5, r5, #32
 800845e:	e7e5      	b.n	800842c <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 8008460:	2530      	movs	r5, #48	; 0x30
 8008462:	e7e3      	b.n	800842c <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 8008464:	2300      	movs	r3, #0
 8008466:	e000      	b.n	800846a <stm32_dt_pinctrl_configure+0x52>
		return 0;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800846e <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800846e:	b538      	push	{r3, r4, r5, lr}
 8008470:	4604      	mov	r4, r0

	if (esf != NULL) {
 8008472:	460d      	mov	r5, r1
 8008474:	b111      	cbz	r1, 800847c <z_arm_fatal_error+0xe>
		esf_dump(esf);
 8008476:	4608      	mov	r0, r1
 8008478:	f7fa ffc0 	bl	80033fc <esf_dump>
	}
	z_fatal_error(reason, esf);
 800847c:	4629      	mov	r1, r5
 800847e:	4620      	mov	r0, r4
 8008480:	f7fd f85e 	bl	8005540 <z_fatal_error>
}
 8008484:	bd38      	pop	{r3, r4, r5, pc}

08008486 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8008486:	b508      	push	{r3, lr}
 8008488:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	f7ff ffef 	bl	800846e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8008490:	bd08      	pop	{r3, pc}

08008492 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 8008492:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8008494:	2100      	movs	r1, #0
 8008496:	2001      	movs	r0, #1
 8008498:	f7ff ffe9 	bl	800846e <z_arm_fatal_error>
}
 800849c:	bd08      	pop	{r3, pc}

0800849e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800849e:	b508      	push	{r3, lr}
	handler();
 80084a0:	f7fb f81e 	bl	80034e0 <z_SysNmiOnReset>
	z_arm_int_exit();
 80084a4:	f7fb f908 	bl	80036b8 <z_arm_exc_exit>
}
 80084a8:	bd08      	pop	{r3, pc}

080084aa <memory_fault_recoverable>:
}
 80084aa:	2000      	movs	r0, #0
 80084ac:	4770      	bx	lr

080084ae <fault_handle>:
{
 80084ae:	b508      	push	{r3, lr}
	*recoverable = false;
 80084b0:	2300      	movs	r3, #0
 80084b2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 80084b4:	1ecb      	subs	r3, r1, #3
 80084b6:	2b09      	cmp	r3, #9
 80084b8:	d81a      	bhi.n	80084f0 <fault_handle+0x42>
 80084ba:	e8df f003 	tbb	[pc, r3]
 80084be:	0905      	.short	0x0905
 80084c0:	1919110d 	.word	0x1919110d
 80084c4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 80084c8:	4611      	mov	r1, r2
 80084ca:	f7fb fb89 	bl	8003be0 <hard_fault>
}
 80084ce:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 80084d0:	2100      	movs	r1, #0
 80084d2:	f7fb faa3 	bl	8003a1c <mem_manage_fault>
		break;
 80084d6:	e7fa      	b.n	80084ce <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 80084d8:	2100      	movs	r1, #0
 80084da:	f7fb f9c7 	bl	800386c <bus_fault>
		break;
 80084de:	e7f6      	b.n	80084ce <fault_handle+0x20>
		reason = usage_fault(esf);
 80084e0:	f7fb f8f8 	bl	80036d4 <usage_fault>
		break;
 80084e4:	e7f3      	b.n	80084ce <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 80084e6:	4611      	mov	r1, r2
 80084e8:	f7fb f9a6 	bl	8003838 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80084ec:	2000      	movs	r0, #0
		break;
 80084ee:	e7ee      	b.n	80084ce <fault_handle+0x20>
		reserved_exception(esf, fault);
 80084f0:	f7fb fc16 	bl	8003d20 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80084f4:	2000      	movs	r0, #0
	return reason;
 80084f6:	e7ea      	b.n	80084ce <fault_handle+0x20>

080084f8 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 80084f8:	6843      	ldr	r3, [r0, #4]
 80084fa:	1e5a      	subs	r2, r3, #1
		&&
 80084fc:	4213      	tst	r3, r2
 80084fe:	d106      	bne.n	800850e <mpu_partition_is_valid+0x16>
		&&
 8008500:	2b1f      	cmp	r3, #31
 8008502:	d906      	bls.n	8008512 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 8008504:	6803      	ldr	r3, [r0, #0]
		&&
 8008506:	421a      	tst	r2, r3
 8008508:	d005      	beq.n	8008516 <mpu_partition_is_valid+0x1e>
 800850a:	2000      	movs	r0, #0
 800850c:	4770      	bx	lr
 800850e:	2000      	movs	r0, #0
 8008510:	4770      	bx	lr
 8008512:	2000      	movs	r0, #0
 8008514:	4770      	bx	lr
 8008516:	2001      	movs	r0, #1
}
 8008518:	4770      	bx	lr

0800851a <mpu_configure_region>:
{
 800851a:	b500      	push	{lr}
 800851c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800851e:	680b      	ldr	r3, [r1, #0]
 8008520:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8008522:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8008524:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 8008526:	2b20      	cmp	r3, #32
 8008528:	d912      	bls.n	8008550 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800852a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800852e:	d811      	bhi.n	8008554 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8008530:	3b01      	subs	r3, #1
 8008532:	fab3 f383 	clz	r3, r3
 8008536:	f1c3 031f 	rsb	r3, r3, #31
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8008540:	4313      	orrs	r3, r2
 8008542:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 8008544:	a901      	add	r1, sp, #4
 8008546:	f7fb fd05 	bl	8003f54 <region_allocate_and_init>
}
 800854a:	b005      	add	sp, #20
 800854c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 8008550:	2308      	movs	r3, #8
 8008552:	e7f5      	b.n	8008540 <mpu_configure_region+0x26>
		return REGION_4G;
 8008554:	233e      	movs	r3, #62	; 0x3e
 8008556:	e7f3      	b.n	8008540 <mpu_configure_region+0x26>

08008558 <arm_core_mpu_configure_static_mpu_regions>:
{
 8008558:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800855a:	f7fb fd5d 	bl	8004018 <mpu_configure_static_mpu_regions>
}
 800855e:	bd08      	pop	{r3, pc}

08008560 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8008560:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 8008562:	f7fb fd63 	bl	800402c <mpu_configure_dynamic_mpu_regions>
}
 8008566:	bd08      	pop	{r3, pc}

08008568 <malloc_prepare>:
}
 8008568:	2000      	movs	r0, #0
 800856a:	4770      	bx	lr

0800856c <_stdout_hook_default>:
}
 800856c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008570:	4770      	bx	lr

08008572 <_stdin_hook_default>:
}
 8008572:	2000      	movs	r0, #0
 8008574:	4770      	bx	lr

08008576 <_read>:
{
 8008576:	b508      	push	{r3, lr}
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800857c:	f7fb fdae 	bl	80040dc <z_impl_zephyr_read_stdin>
}
 8008580:	bd08      	pop	{r3, pc}

08008582 <_write>:
{
 8008582:	b508      	push	{r3, lr}
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8008588:	f7fb fdbe 	bl	8004108 <z_impl_zephyr_write_stdout>
}
 800858c:	bd08      	pop	{r3, pc}

0800858e <_close>:
}
 800858e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008592:	4770      	bx	lr

08008594 <_lseek>:
}
 8008594:	2000      	movs	r0, #0
 8008596:	4770      	bx	lr

08008598 <_isatty>:
}
 8008598:	2802      	cmp	r0, #2
 800859a:	bfcc      	ite	gt
 800859c:	2000      	movgt	r0, #0
 800859e:	2001      	movle	r0, #1
 80085a0:	4770      	bx	lr

080085a2 <_kill>:
}
 80085a2:	2000      	movs	r0, #0
 80085a4:	4770      	bx	lr

080085a6 <_getpid>:
}
 80085a6:	2000      	movs	r0, #0
 80085a8:	4770      	bx	lr

080085aa <_fstat>:
	st->st_mode = S_IFCHR;
 80085aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085ae:	604b      	str	r3, [r1, #4]
}
 80085b0:	2000      	movs	r0, #0
 80085b2:	4770      	bx	lr

080085b4 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 80085b8:	2014      	movs	r0, #20
 80085ba:	f7fe f807 	bl	80065cc <malloc>
 80085be:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 80085c0:	f000 fdd2 	bl	8009168 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 80085c4:	bd10      	pop	{r4, pc}

080085c6 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80085c6:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 80085c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085d0:	f7fd f9d4 	bl	800597c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 80085d4:	bd08      	pop	{r3, pc}

080085d6 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80085d6:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 80085d8:	f7fd fa5a 	bl	8005a90 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 80085dc:	bd08      	pop	{r3, pc}

080085de <__stm32_exti_isr_0>:
{
 80085de:	b508      	push	{r3, lr}
 80085e0:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 80085e2:	2101      	movs	r1, #1
 80085e4:	2000      	movs	r0, #0
 80085e6:	f7fb fdc9 	bl	800417c <__stm32_exti_isr>
}
 80085ea:	bd08      	pop	{r3, pc}

080085ec <__stm32_exti_isr_1>:
{
 80085ec:	b508      	push	{r3, lr}
 80085ee:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80085f0:	2102      	movs	r1, #2
 80085f2:	2001      	movs	r0, #1
 80085f4:	f7fb fdc2 	bl	800417c <__stm32_exti_isr>
}
 80085f8:	bd08      	pop	{r3, pc}

080085fa <__stm32_exti_isr_2>:
{
 80085fa:	b508      	push	{r3, lr}
 80085fc:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 80085fe:	2103      	movs	r1, #3
 8008600:	2002      	movs	r0, #2
 8008602:	f7fb fdbb 	bl	800417c <__stm32_exti_isr>
}
 8008606:	bd08      	pop	{r3, pc}

08008608 <__stm32_exti_isr_3>:
{
 8008608:	b508      	push	{r3, lr}
 800860a:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800860c:	2104      	movs	r1, #4
 800860e:	2003      	movs	r0, #3
 8008610:	f7fb fdb4 	bl	800417c <__stm32_exti_isr>
}
 8008614:	bd08      	pop	{r3, pc}

08008616 <__stm32_exti_isr_4>:
{
 8008616:	b508      	push	{r3, lr}
 8008618:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800861a:	2105      	movs	r1, #5
 800861c:	2004      	movs	r0, #4
 800861e:	f7fb fdad 	bl	800417c <__stm32_exti_isr>
}
 8008622:	bd08      	pop	{r3, pc}

08008624 <__stm32_exti_isr_9_5>:
{
 8008624:	b508      	push	{r3, lr}
 8008626:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 8008628:	210a      	movs	r1, #10
 800862a:	2005      	movs	r0, #5
 800862c:	f7fb fda6 	bl	800417c <__stm32_exti_isr>
}
 8008630:	bd08      	pop	{r3, pc}

08008632 <__stm32_exti_isr_15_10>:
{
 8008632:	b508      	push	{r3, lr}
 8008634:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 8008636:	2110      	movs	r1, #16
 8008638:	200a      	movs	r0, #10
 800863a:	f7fb fd9f 	bl	800417c <__stm32_exti_isr>
}
 800863e:	bd08      	pop	{r3, pc}

08008640 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 8008640:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8008642:	2200      	movs	r2, #0
 8008644:	4611      	mov	r1, r2
 8008646:	2006      	movs	r0, #6
 8008648:	f7fa ff34 	bl	80034b4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800864c:	2200      	movs	r2, #0
 800864e:	4611      	mov	r1, r2
 8008650:	2007      	movs	r0, #7
 8008652:	f7fa ff2f 	bl	80034b4 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8008656:	2200      	movs	r2, #0
 8008658:	4611      	mov	r1, r2
 800865a:	2008      	movs	r0, #8
 800865c:	f7fa ff2a 	bl	80034b4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8008660:	2200      	movs	r2, #0
 8008662:	4611      	mov	r1, r2
 8008664:	2009      	movs	r0, #9
 8008666:	f7fa ff25 	bl	80034b4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800866a:	2200      	movs	r2, #0
 800866c:	4611      	mov	r1, r2
 800866e:	200a      	movs	r0, #10
 8008670:	f7fa ff20 	bl	80034b4 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8008674:	2200      	movs	r2, #0
 8008676:	4611      	mov	r1, r2
 8008678:	2017      	movs	r0, #23
 800867a:	f7fa ff1b 	bl	80034b4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800867e:	2200      	movs	r2, #0
 8008680:	4611      	mov	r1, r2
 8008682:	2028      	movs	r0, #40	; 0x28
 8008684:	f7fa ff16 	bl	80034b4 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 8008688:	bd08      	pop	{r3, pc}

0800868a <stm32_exti_init>:
{
 800868a:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800868c:	f7ff ffd8 	bl	8008640 <__stm32_exti_connect_irqs>
}
 8008690:	2000      	movs	r0, #0
 8008692:	bd08      	pop	{r3, pc}

08008694 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8008694:	2300      	movs	r3, #0
 8008696:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8008698:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800869a:	6083      	str	r3, [r0, #8]
}
 800869c:	4770      	bx	lr

0800869e <get_bus_clock>:
}
 800869e:	fbb0 f0f1 	udiv	r0, r0, r1
 80086a2:	4770      	bx	lr

080086a4 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 80086a4:	2300      	movs	r3, #0
 80086a6:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 80086a8:	2314      	movs	r3, #20
 80086aa:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80086ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086b0:	6083      	str	r3, [r0, #8]
}
 80086b2:	4770      	bx	lr

080086b4 <gpio_stm32_isr>:
{
 80086b4:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 80086b6:	684e      	ldr	r6, [r1, #4]
 80086b8:	2501      	movs	r5, #1
 80086ba:	4085      	lsls	r5, r0
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 80086bc:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80086be:	b119      	cbz	r1, 80086c8 <gpio_stm32_isr+0x14>
 80086c0:	460c      	mov	r4, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
 80086c2:	b149      	cbz	r1, 80086d8 <gpio_stm32_isr+0x24>
	return node->next;
 80086c4:	680c      	ldr	r4, [r1, #0]
 80086c6:	e007      	b.n	80086d8 <gpio_stm32_isr+0x24>
 80086c8:	460c      	mov	r4, r1
 80086ca:	e005      	b.n	80086d8 <gpio_stm32_isr+0x24>
 80086cc:	b164      	cbz	r4, 80086e8 <gpio_stm32_isr+0x34>
 80086ce:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 80086d0:	b104      	cbz	r4, 80086d4 <gpio_stm32_isr+0x20>
	return node->next;
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	4621      	mov	r1, r4
 80086d6:	461c      	mov	r4, r3
 80086d8:	b141      	cbz	r1, 80086ec <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 80086da:	688a      	ldr	r2, [r1, #8]
 80086dc:	402a      	ands	r2, r5
 80086de:	d0f5      	beq.n	80086cc <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 80086e0:	684b      	ldr	r3, [r1, #4]
 80086e2:	4630      	mov	r0, r6
 80086e4:	4798      	blx	r3
 80086e6:	e7f1      	b.n	80086cc <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80086e8:	4623      	mov	r3, r4
 80086ea:	e7f3      	b.n	80086d4 <gpio_stm32_isr+0x20>
}
 80086ec:	bd70      	pop	{r4, r5, r6, pc}

080086ee <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80086ee:	f410 7f00 	tst.w	r0, #512	; 0x200
 80086f2:	d01b      	beq.n	800872c <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80086f4:	2310      	movs	r3, #16
 80086f6:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80086f8:	f010 0f02 	tst.w	r0, #2
 80086fc:	d004      	beq.n	8008708 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80086fe:	f010 0f04 	tst.w	r0, #4
 8008702:	d02c      	beq.n	800875e <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8008704:	2350      	movs	r3, #80	; 0x50
 8008706:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8008708:	f010 0310 	ands.w	r3, r0, #16
 800870c:	d005      	beq.n	800871a <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008714:	600b      	str	r3, [r1, #0]
	return 0;
 8008716:	2000      	movs	r0, #0
 8008718:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800871a:	f010 0020 	ands.w	r0, r0, #32
 800871e:	d020      	beq.n	8008762 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8008720:	680a      	ldr	r2, [r1, #0]
 8008722:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008726:	600a      	str	r2, [r1, #0]
	return 0;
 8008728:	4618      	mov	r0, r3
 800872a:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800872c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008730:	d011      	beq.n	8008756 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8008732:	2300      	movs	r3, #0
 8008734:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 8008736:	f010 0310 	ands.w	r3, r0, #16
 800873a:	d004      	beq.n	8008746 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800873c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008740:	600b      	str	r3, [r1, #0]
	return 0;
 8008742:	2000      	movs	r0, #0
 8008744:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8008746:	f010 0020 	ands.w	r0, r0, #32
 800874a:	d00a      	beq.n	8008762 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800874c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008750:	600a      	str	r2, [r1, #0]
	return 0;
 8008752:	4618      	mov	r0, r3
 8008754:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8008756:	2330      	movs	r3, #48	; 0x30
 8008758:	600b      	str	r3, [r1, #0]
	return 0;
 800875a:	2000      	movs	r0, #0
 800875c:	4770      	bx	lr
				return -ENOTSUP;
 800875e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8008762:	4770      	bx	lr

08008764 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008764:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008766:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8008768:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800876a:	600b      	str	r3, [r1, #0]
}
 800876c:	2000      	movs	r0, #0
 800876e:	4770      	bx	lr

08008770 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008770:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008772:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8008774:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8008776:	4042      	eors	r2, r0
 8008778:	400a      	ands	r2, r1
 800877a:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800877c:	615a      	str	r2, [r3, #20]
}
 800877e:	2000      	movs	r0, #0
 8008780:	4770      	bx	lr

08008782 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008782:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008784:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8008786:	6199      	str	r1, [r3, #24]
}
 8008788:	2000      	movs	r0, #0
 800878a:	4770      	bx	lr

0800878c <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800878c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800878e:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008790:	6299      	str	r1, [r3, #40]	; 0x28
}
 8008792:	2000      	movs	r0, #0
 8008794:	4770      	bx	lr

08008796 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8008796:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8008798:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800879a:	6953      	ldr	r3, [r2, #20]
 800879c:	404b      	eors	r3, r1
 800879e:	6153      	str	r3, [r2, #20]
}
 80087a0:	2000      	movs	r0, #0
 80087a2:	4770      	bx	lr

080087a4 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 80087a4:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 80087a6:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 80087a8:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 80087ac:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 80087ae:	b1fb      	cbz	r3, 80087f0 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80087b0:	2000      	movs	r0, #0
 80087b2:	e00d      	b.n	80087d0 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 80087b4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 80087b6:	60a3      	str	r3, [r4, #8]
	return list->tail;
 80087b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80087bc:	4281      	cmp	r1, r0
 80087be:	d112      	bne.n	80087e6 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 80087c0:	f8cc 3004 	str.w	r3, [ip, #4]
}
 80087c4:	e00f      	b.n	80087e6 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 80087c6:	f8cc 0004 	str.w	r0, [ip, #4]
}
 80087ca:	e00c      	b.n	80087e6 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80087cc:	4618      	mov	r0, r3
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	b163      	cbz	r3, 80087ec <gpio_stm32_manage_callback+0x48>
 80087d2:	4299      	cmp	r1, r3
 80087d4:	d1fa      	bne.n	80087cc <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0ec      	beq.n	80087b4 <gpio_stm32_manage_callback+0x10>
	return node->next;
 80087da:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 80087dc:	6003      	str	r3, [r0, #0]
	return list->tail;
 80087de:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 80087e2:	4299      	cmp	r1, r3
 80087e4:	d0ef      	beq.n	80087c6 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 80087e6:	2300      	movs	r3, #0
 80087e8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80087ea:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 80087ec:	b903      	cbnz	r3, 80087f0 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 80087ee:	b162      	cbz	r2, 800880a <gpio_stm32_manage_callback+0x66>
	if (set) {
 80087f0:	b172      	cbz	r2, 8008810 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 80087f2:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 80087f4:	600b      	str	r3, [r1, #0]
	list->head = node;
 80087f6:	60a1      	str	r1, [r4, #8]
	return list->tail;
 80087f8:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 80087fc:	b10b      	cbz	r3, 8008802 <gpio_stm32_manage_callback+0x5e>
	return 0;
 80087fe:	2000      	movs	r0, #0
 8008800:	e007      	b.n	8008812 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 8008802:	f8cc 1004 	str.w	r1, [ip, #4]
 8008806:	2000      	movs	r0, #0
}
 8008808:	e003      	b.n	8008812 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800880a:	f06f 0015 	mvn.w	r0, #21
 800880e:	e000      	b.n	8008812 <gpio_stm32_manage_callback+0x6e>
	return 0;
 8008810:	2000      	movs	r0, #0
}
 8008812:	bc10      	pop	{r4}
 8008814:	4770      	bx	lr

08008816 <gpio_stm32_configure>:
{
 8008816:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8008818:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800881a:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800881c:	2001      	movs	r0, #1
 800881e:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8008820:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8008824:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008828:	6865      	ldr	r5, [r4, #4]
 800882a:	ea25 0500 	bic.w	r5, r5, r0
 800882e:	408e      	lsls	r6, r1
 8008830:	4335      	orrs	r5, r6
 8008832:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8008834:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008838:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800883e:	2d00      	cmp	r5, #0
 8008840:	d04a      	beq.n	80088d8 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 8008842:	fab5 f585 	clz	r5, r5
 8008846:	006d      	lsls	r5, r5, #1
 8008848:	2703      	movs	r7, #3
 800884a:	fa07 f505 	lsl.w	r5, r7, r5
 800884e:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008852:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008856:	2d00      	cmp	r5, #0
 8008858:	d040      	beq.n	80088dc <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 800885a:	fab5 f585 	clz	r5, r5
 800885e:	006d      	lsls	r5, r5, #1
 8008860:	fa0e f505 	lsl.w	r5, lr, r5
 8008864:	4335      	orrs	r5, r6
 8008866:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8008868:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800886c:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8008872:	b3ad      	cbz	r5, 80088e0 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 8008874:	fab5 f585 	clz	r5, r5
 8008878:	006d      	lsls	r5, r5, #1
 800887a:	f04f 0e03 	mov.w	lr, #3
 800887e:	fa0e f505 	lsl.w	r5, lr, r5
 8008882:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008886:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800888a:	b35d      	cbz	r5, 80088e4 <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 800888c:	fab5 f585 	clz	r5, r5
 8008890:	006d      	lsls	r5, r5, #1
 8008892:	fa02 f505 	lsl.w	r5, r2, r5
 8008896:	ea4e 0505 	orr.w	r5, lr, r5
 800889a:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800889c:	f1bc 0f20 	cmp.w	ip, #32
 80088a0:	d022      	beq.n	80088e8 <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80088a2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80088a6:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a8:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d052      	beq.n	8008956 <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 80088b0:	fab3 f383 	clz	r3, r3
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	2103      	movs	r1, #3
 80088b8:	fa01 f303 	lsl.w	r3, r1, r3
 80088bc:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d048      	beq.n	800895a <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 80088c8:	fab0 f080 	clz	r0, r0
 80088cc:	0040      	lsls	r0, r0, #1
 80088ce:	fa0c f000 	lsl.w	r0, ip, r0
 80088d2:	4318      	orrs	r0, r3
 80088d4:	6020      	str	r0, [r4, #0]
}
 80088d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80088d8:	2520      	movs	r5, #32
 80088da:	e7b4      	b.n	8008846 <gpio_stm32_configure+0x30>
 80088dc:	2520      	movs	r5, #32
 80088de:	e7be      	b.n	800885e <gpio_stm32_configure+0x48>
 80088e0:	2520      	movs	r5, #32
 80088e2:	e7c9      	b.n	8008878 <gpio_stm32_configure+0x62>
 80088e4:	2520      	movs	r5, #32
 80088e6:	e7d3      	b.n	8008890 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 80088e8:	2907      	cmp	r1, #7
 80088ea:	dc19      	bgt.n	8008920 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80088ec:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088ee:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 80088f2:	b18a      	cbz	r2, 8008918 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 80088f4:	fab2 f282 	clz	r2, r2
 80088f8:	0092      	lsls	r2, r2, #2
 80088fa:	250f      	movs	r5, #15
 80088fc:	fa05 f202 	lsl.w	r2, r5, r2
 8008900:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008904:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8008908:	b142      	cbz	r2, 800891c <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 800890a:	fab2 f282 	clz	r2, r2
 800890e:	0092      	lsls	r2, r2, #2
 8008910:	4093      	lsls	r3, r2
 8008912:	430b      	orrs	r3, r1
 8008914:	6223      	str	r3, [r4, #32]
}
 8008916:	e7c4      	b.n	80088a2 <gpio_stm32_configure+0x8c>
    return 32U;
 8008918:	2220      	movs	r2, #32
 800891a:	e7ed      	b.n	80088f8 <gpio_stm32_configure+0xe2>
 800891c:	2220      	movs	r2, #32
 800891e:	e7f6      	b.n	800890e <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008920:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008922:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008924:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8008928:	b189      	cbz	r1, 800894e <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 800892a:	fab1 f181 	clz	r1, r1
 800892e:	0089      	lsls	r1, r1, #2
 8008930:	260f      	movs	r6, #15
 8008932:	fa06 f101 	lsl.w	r1, r6, r1
 8008936:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800893e:	b142      	cbz	r2, 8008952 <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 8008940:	fab2 f282 	clz	r2, r2
 8008944:	0092      	lsls	r2, r2, #2
 8008946:	4093      	lsls	r3, r2
 8008948:	430b      	orrs	r3, r1
 800894a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800894c:	e7a9      	b.n	80088a2 <gpio_stm32_configure+0x8c>
    return 32U;
 800894e:	2120      	movs	r1, #32
 8008950:	e7ed      	b.n	800892e <gpio_stm32_configure+0x118>
 8008952:	2220      	movs	r2, #32
 8008954:	e7f6      	b.n	8008944 <gpio_stm32_configure+0x12e>
 8008956:	2320      	movs	r3, #32
 8008958:	e7ac      	b.n	80088b4 <gpio_stm32_configure+0x9e>
 800895a:	2020      	movs	r0, #32
 800895c:	e7b6      	b.n	80088cc <gpio_stm32_configure+0xb6>

0800895e <gpio_stm32_config>:
{
 800895e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008960:	b083      	sub	sp, #12
 8008962:	4607      	mov	r7, r0
 8008964:	460d      	mov	r5, r1
 8008966:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 8008968:	a901      	add	r1, sp, #4
 800896a:	4610      	mov	r0, r2
 800896c:	f7ff febf 	bl	80086ee <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8008970:	4606      	mov	r6, r0
 8008972:	b970      	cbnz	r0, 8008992 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 8008974:	f414 7f00 	tst.w	r4, #512	; 0x200
 8008978:	d005      	beq.n	8008986 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800897a:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800897e:	d10b      	bne.n	8008998 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8008980:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8008984:	d10e      	bne.n	80089a4 <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8008986:	2300      	movs	r3, #0
 8008988:	9a01      	ldr	r2, [sp, #4]
 800898a:	4629      	mov	r1, r5
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff ff42 	bl	8008816 <gpio_stm32_configure>
}
 8008992:	4630      	mov	r0, r6
 8008994:	b003      	add	sp, #12
 8008996:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8008998:	2101      	movs	r1, #1
 800899a:	40a9      	lsls	r1, r5
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff fef0 	bl	8008782 <gpio_stm32_port_set_bits_raw>
 80089a2:	e7f0      	b.n	8008986 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80089a4:	2101      	movs	r1, #1
 80089a6:	40a9      	lsls	r1, r5
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff feef 	bl	800878c <gpio_stm32_port_clear_bits_raw>
 80089ae:	e7ea      	b.n	8008986 <gpio_stm32_config+0x28>

080089b0 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 80089b0:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 80089b2:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 80089b4:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 80089b6:	2101      	movs	r1, #1
 80089b8:	f7fb fe86 	bl	80046c8 <gpio_stm32_clock_request>
#endif
}
 80089bc:	bd08      	pop	{r3, pc}

080089be <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 80089be:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80089c0:	b91b      	cbnz	r3, 80089ca <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 80089c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80089c4:	b91b      	cbnz	r3, 80089ce <spi_stm32_transfer_ongoing+0x10>
 80089c6:	2000      	movs	r0, #0
 80089c8:	4770      	bx	lr
 80089ca:	2001      	movs	r0, #1
 80089cc:	4770      	bx	lr
 80089ce:	2001      	movs	r0, #1
}
 80089d0:	4770      	bx	lr

080089d2 <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80089d2:	6883      	ldr	r3, [r0, #8]
 80089d4:	f013 0f02 	tst.w	r3, #2
 80089d8:	d0fb      	beq.n	80089d2 <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80089da:	680b      	ldr	r3, [r1, #0]
 80089dc:	889b      	ldrh	r3, [r3, #4]
 80089de:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d01f      	beq.n	8008a26 <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 80089e6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d044      	beq.n	8008a76 <spi_stm32_shift_m+0xa4>
 80089ec:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	d143      	bne.n	8008a7a <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d043      	beq.n	8008a7e <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80089f6:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 80089f8:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 80089fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d047      	beq.n	8008a90 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8008a00:	3b01      	subs	r3, #1
 8008a02:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d13f      	bne.n	8008a88 <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 8008a08:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d037      	beq.n	8008a82 <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 8008a12:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008a14:	f103 0208 	add.w	r2, r3, #8
 8008a18:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	640b      	str	r3, [r1, #64]	; 0x40
 8008a24:	e034      	b.n	8008a90 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8008a26:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008a28:	b1bb      	cbz	r3, 8008a5a <spi_stm32_shift_m+0x88>
 8008a2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008a2c:	b9ba      	cbnz	r2, 8008a5e <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8008a2e:	b1c2      	cbz	r2, 8008a62 <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8008a30:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8008a32:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 8008a34:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8008a36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a38:	b353      	cbz	r3, 8008a90 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
 8008a3e:	b9ab      	cbnz	r3, 8008a6c <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 8008a40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008a42:	3b01      	subs	r3, #1
 8008a44:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
 8008a46:	b173      	cbz	r3, 8008a66 <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 8008a48:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008a4a:	f103 0208 	add.w	r2, r3, #8
 8008a4e:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	640b      	str	r3, [r1, #64]	; 0x40
 8008a58:	e01a      	b.n	8008a90 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	e7e7      	b.n	8008a2e <spi_stm32_shift_m+0x5c>
 8008a5e:	2201      	movs	r2, #1
 8008a60:	e7e5      	b.n	8008a2e <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e7e5      	b.n	8008a32 <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008a6a:	e011      	b.n	8008a90 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8008a6c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008a6e:	b17b      	cbz	r3, 8008a90 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8008a70:	3301      	adds	r3, #1
 8008a72:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008a74:	e00c      	b.n	8008a90 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8008a76:	2200      	movs	r2, #0
 8008a78:	e7bb      	b.n	80089f2 <spi_stm32_shift_m+0x20>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	e7b9      	b.n	80089f2 <spi_stm32_shift_m+0x20>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e7ba      	b.n	80089f8 <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008a86:	e003      	b.n	8008a90 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8008a88:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008a8a:	b10b      	cbz	r3, 8008a90 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8008a90:	6883      	ldr	r3, [r0, #8]
 8008a92:	f013 0f01 	tst.w	r3, #1
 8008a96:	d0fb      	beq.n	8008a90 <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8008a98:	680b      	ldr	r3, [r1, #0]
 8008a9a:	889b      	ldrh	r3, [r3, #4]
 8008a9c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d01f      	beq.n	8008ae4 <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 8008aa4:	68c3      	ldr	r3, [r0, #12]
 8008aa6:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8008aa8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d040      	beq.n	8008b30 <spi_stm32_shift_m+0x15e>
 8008aae:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d13f      	bne.n	8008b34 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8008ab4:	b100      	cbz	r0, 8008ab8 <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8008ab6:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 8008ab8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d043      	beq.n	8008b46 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->rx_len) {
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d13b      	bne.n	8008b3e <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 8008ac6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	638b      	str	r3, [r1, #56]	; 0x38
		if (ctx->rx_count) {
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d033      	beq.n	8008b38 <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 8008ad0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008ad2:	f103 0208 	add.w	r2, r3, #8
 8008ad6:	634a      	str	r2, [r1, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	085b      	lsrs	r3, r3, #1
 8008ae0:	648b      	str	r3, [r1, #72]	; 0x48
 8008ae2:	4770      	bx	lr
  return (uint8_t)(READ_REG(SPIx->DR));
 8008ae4:	68c3      	ldr	r3, [r0, #12]
 8008ae6:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 8008ae8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8008aea:	b1aa      	cbz	r2, 8008b18 <spi_stm32_shift_m+0x146>
 8008aec:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8008aee:	b9a8      	cbnz	r0, 8008b1c <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8008af0:	b100      	cbz	r0, 8008af4 <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8008af2:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 8008af4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8008af6:	b333      	cbz	r3, 8008b46 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8008af8:	3b01      	subs	r3, #1
 8008afa:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->rx_len) {
 8008afc:	b99b      	cbnz	r3, 8008b26 <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 8008afe:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008b00:	3b01      	subs	r3, #1
 8008b02:	638b      	str	r3, [r1, #56]	; 0x38
		if (ctx->rx_count) {
 8008b04:	b163      	cbz	r3, 8008b20 <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 8008b06:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008b08:	f103 0208 	add.w	r2, r3, #8
 8008b0c:	634a      	str	r2, [r1, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	648b      	str	r3, [r1, #72]	; 0x48
 8008b16:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e7e9      	b.n	8008af0 <spi_stm32_shift_m+0x11e>
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	e7e7      	b.n	8008af0 <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	644b      	str	r3, [r1, #68]	; 0x44
 8008b24:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8008b26:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008b28:	b16b      	cbz	r3, 8008b46 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	644b      	str	r3, [r1, #68]	; 0x44
 8008b2e:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8008b30:	2000      	movs	r0, #0
 8008b32:	e7bf      	b.n	8008ab4 <spi_stm32_shift_m+0xe2>
 8008b34:	2001      	movs	r0, #1
 8008b36:	e7bd      	b.n	8008ab4 <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	644b      	str	r3, [r1, #68]	; 0x44
 8008b3c:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8008b3e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008b40:	b10b      	cbz	r3, 8008b46 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 8008b42:	3302      	adds	r3, #2
 8008b44:	644b      	str	r3, [r1, #68]	; 0x44
}
 8008b46:	4770      	bx	lr

08008b48 <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8008b48:	6883      	ldr	r3, [r0, #8]
 8008b4a:	f013 0f02 	tst.w	r3, #2
 8008b4e:	d045      	beq.n	8008bdc <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 8008b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d042      	beq.n	8008bdc <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8008b56:	680b      	ldr	r3, [r1, #0]
 8008b58:	889b      	ldrh	r3, [r3, #4]
 8008b5a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d017      	beq.n	8008b92 <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8008b62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008b64:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 8008b66:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8008b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d03a      	beq.n	8008be4 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d12d      	bne.n	8008bd2 <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 8008b76:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
 8008b7c:	b333      	cbz	r3, 8008bcc <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 8008b7e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008b80:	f103 0208 	add.w	r2, r3, #8
 8008b84:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	640b      	str	r3, [r1, #64]	; 0x40
 8008b90:	e028      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8008b92:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008b94:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 8008b96:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8008b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b9a:	b31b      	cbz	r3, 8008be4 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	640b      	str	r3, [r1, #64]	; 0x40
	if (!ctx->tx_len) {
 8008ba0:	b97b      	cbnz	r3, 8008bc2 <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 8008ba2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	630b      	str	r3, [r1, #48]	; 0x30
		if (ctx->tx_count) {
 8008ba8:	b143      	cbz	r3, 8008bbc <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 8008baa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008bac:	f103 0208 	add.w	r2, r3, #8
 8008bb0:	62ca      	str	r2, [r1, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	640b      	str	r3, [r1, #64]	; 0x40
 8008bba:	e013      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008bc0:	e010      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 8008bc2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008bc4:	b173      	cbz	r3, 8008be4 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008bca:	e00b      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008bd0:	e008      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 8008bd2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008bd4:	b133      	cbz	r3, 8008be4 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	63cb      	str	r3, [r1, #60]	; 0x3c
 8008bda:	e003      	b.n	8008be4 <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8008bdc:	6843      	ldr	r3, [r0, #4]
 8008bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008be2:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8008be4:	6883      	ldr	r3, [r0, #8]
 8008be6:	f013 0f01 	tst.w	r3, #1
 8008bea:	d04a      	beq.n	8008c82 <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 8008bec:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008bee:	b30b      	cbz	r3, 8008c34 <spi_stm32_shift_s+0xec>
 8008bf0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8008bf2:	bb0a      	cbnz	r2, 8008c38 <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	d044      	beq.n	8008c82 <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8008bf8:	680a      	ldr	r2, [r1, #0]
 8008bfa:	8892      	ldrh	r2, [r2, #4]
 8008bfc:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8008c00:	2a08      	cmp	r2, #8
 8008c02:	d01b      	beq.n	8008c3c <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 8008c04:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8008c06:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8008c08:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d039      	beq.n	8008c82 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->rx_len) {
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d131      	bne.n	8008c7a <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 8008c16:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	638b      	str	r3, [r1, #56]	; 0x38
		if (ctx->rx_count) {
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d029      	beq.n	8008c74 <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 8008c20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008c22:	f103 0208 	add.w	r2, r3, #8
 8008c26:	634a      	str	r2, [r1, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	648b      	str	r3, [r1, #72]	; 0x48
 8008c32:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8008c34:	2200      	movs	r2, #0
 8008c36:	e7dd      	b.n	8008bf4 <spi_stm32_shift_s+0xac>
 8008c38:	2201      	movs	r2, #1
 8008c3a:	e7db      	b.n	8008bf4 <spi_stm32_shift_s+0xac>
  return (uint8_t)(READ_REG(SPIx->DR));
 8008c3c:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8008c3e:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8008c40:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8008c42:	b1f3      	cbz	r3, 8008c82 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 8008c44:	3b01      	subs	r3, #1
 8008c46:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->rx_len) {
 8008c48:	b97b      	cbnz	r3, 8008c6a <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 8008c4a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	638b      	str	r3, [r1, #56]	; 0x38
		if (ctx->rx_count) {
 8008c50:	b143      	cbz	r3, 8008c64 <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 8008c52:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008c54:	f103 0208 	add.w	r2, r3, #8
 8008c58:	634a      	str	r2, [r1, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	648b      	str	r3, [r1, #72]	; 0x48
 8008c62:	4770      	bx	lr
			ctx->rx_buf = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	644b      	str	r3, [r1, #68]	; 0x44
 8008c68:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8008c6a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008c6c:	b14b      	cbz	r3, 8008c82 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 8008c6e:	3301      	adds	r3, #1
 8008c70:	644b      	str	r3, [r1, #68]	; 0x44
 8008c72:	4770      	bx	lr
			ctx->rx_buf = NULL;
 8008c74:	2300      	movs	r3, #0
 8008c76:	644b      	str	r3, [r1, #68]	; 0x44
 8008c78:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8008c7a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8008c7c:	b10b      	cbz	r3, 8008c82 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 8008c7e:	3302      	adds	r3, #2
 8008c80:	644b      	str	r3, [r1, #68]	; 0x44
}
 8008c82:	4770      	bx	lr

08008c84 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 8008c84:	b508      	push	{r3, lr}
 8008c86:	2200      	movs	r2, #0
 8008c88:	2105      	movs	r1, #5
 8008c8a:	2023      	movs	r0, #35	; 0x23
 8008c8c:	f7fa fc12 	bl	80034b4 <z_arm_irq_priority_set>
 8008c90:	2023      	movs	r0, #35	; 0x23
 8008c92:	f7fa fc01 	bl	8003498 <arch_irq_enable>
 8008c96:	bd08      	pop	{r3, pc}

08008c98 <spi_stm32_shift_frames>:
{
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8008c9c:	680b      	ldr	r3, [r1, #0]
 8008c9e:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8008ca0:	f013 0f01 	tst.w	r3, #1
 8008ca4:	d105      	bne.n	8008cb2 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8008ca6:	f7ff fe94 	bl	80089d2 <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7fb fe70 	bl	8004990 <spi_stm32_get_err>
}
 8008cb0:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 8008cb2:	f7ff ff49 	bl	8008b48 <spi_stm32_shift_s>
 8008cb6:	e7f8      	b.n	8008caa <spi_stm32_shift_frames+0x12>

08008cb8 <spi_stm32_cs_control>:
{
 8008cb8:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8008cba:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d034      	beq.n	8008d2c <spi_stm32_cs_control+0x74>
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	d031      	beq.n	8008d2c <spi_stm32_cs_control+0x74>
 8008cc8:	6810      	ldr	r0, [r2, #0]
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d02e      	beq.n	8008d2c <spi_stm32_cs_control+0x74>
		if (on) {
 8008cce:	b9c9      	cbnz	r1, 8008d04 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 8008cd0:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 8008cd2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008cd6:	d129      	bne.n	8008d2c <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 8008cd8:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8008cda:	f7fd fbbd 	bl	8006458 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8008ce6:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	2301      	movs	r3, #1
 8008cec:	408b      	lsls	r3, r1
 8008cee:	421a      	tst	r2, r3
 8008cf0:	d126      	bne.n	8008d40 <spi_stm32_cs_control+0x88>
 8008cf2:	2300      	movs	r3, #0
	if (value != 0)	{
 8008cf4:	b333      	cbz	r3, 8008d44 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008cfc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	4798      	blx	r3
 8008d02:	e013      	b.n	8008d2c <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8008d04:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 8008d06:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	408b      	lsls	r3, r1
 8008d0e:	421a      	tst	r2, r3
 8008d10:	d10d      	bne.n	8008d2e <spi_stm32_cs_control+0x76>
 8008d12:	2301      	movs	r3, #1
	if (value != 0)	{
 8008d14:	b16b      	cbz	r3, 8008d32 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008d16:	2301      	movs	r3, #1
 8008d18:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008d1c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	6858      	ldr	r0, [r3, #4]
 8008d28:	f7fd fb96 	bl	8006458 <z_impl_k_busy_wait>
}
 8008d2c:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e7f0      	b.n	8008d14 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008d32:	2301      	movs	r3, #1
 8008d34:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008d38:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	4798      	blx	r3
 8008d3e:	e7f0      	b.n	8008d22 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e7d7      	b.n	8008cf4 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008d44:	2301      	movs	r3, #1
 8008d46:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008d4a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	4798      	blx	r3
 8008d50:	e7ec      	b.n	8008d2c <spi_stm32_cs_control+0x74>

08008d52 <spi_stm32_complete>:
{
 8008d52:	b570      	push	{r4, r5, r6, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 8008d58:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 8008d5a:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 8008d5c:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d64:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6c:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8008d6e:	6863      	ldr	r3, [r4, #4]
 8008d70:	f023 0320 	bic.w	r3, r3, #32
 8008d74:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 8008d76:	2100      	movs	r1, #0
 8008d78:	f7ff ff9e 	bl	8008cb8 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8008d7c:	68a3      	ldr	r3, [r4, #8]
 8008d7e:	f013 0f01 	tst.w	r3, #1
 8008d82:	d001      	beq.n	8008d88 <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 8008d84:	68e3      	ldr	r3, [r4, #12]
 8008d86:	e7f9      	b.n	8008d7c <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8008d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d92:	d015      	beq.n	8008dc0 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	f013 0f20 	tst.w	r3, #32
 8008d9a:	d006      	beq.n	8008daa <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 8008d9c:	68a3      	ldr	r3, [r4, #8]
 8008d9e:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 8008da0:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da8:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db0:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 8008db2:	62ae      	str	r6, [r5, #40]	; 0x28
	k_sem_give(&ctx->sync);
 8008db4:	f105 0018 	add.w	r0, r5, #24
	z_impl_k_sem_give(sem);
 8008db8:	f7fc feac 	bl	8005b14 <z_impl_k_sem_give>
}
 8008dbc:	b002      	add	sp, #8
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8008dc0:	68a3      	ldr	r3, [r4, #8]
 8008dc2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008dc6:	d1fb      	bne.n	8008dc0 <spi_stm32_complete+0x6e>
 8008dc8:	e7e4      	b.n	8008d94 <spi_stm32_complete+0x42>

08008dca <spi_stm32_isr>:
{
 8008dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dcc:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 8008dce:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8008dd0:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8008dd2:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7fb fddb 	bl	8004990 <spi_stm32_get_err>
	if (err) {
 8008dda:	4605      	mov	r5, r0
 8008ddc:	b968      	cbnz	r0, 8008dfa <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff fded 	bl	80089be <spi_stm32_transfer_ongoing>
 8008de4:	b970      	cbnz	r0, 8008e04 <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8008de6:	b91d      	cbnz	r5, 8008df0 <spi_stm32_isr+0x26>
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff fde8 	bl	80089be <spi_stm32_transfer_ongoing>
 8008dee:	b918      	cbnz	r0, 8008df8 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 8008df0:	4629      	mov	r1, r5
 8008df2:	4620      	mov	r0, r4
 8008df4:	f7ff ffad 	bl	8008d52 <spi_stm32_complete>
}
 8008df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff ffa8 	bl	8008d52 <spi_stm32_complete>
		return;
 8008e02:	e7f9      	b.n	8008df8 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 8008e04:	4631      	mov	r1, r6
 8008e06:	4638      	mov	r0, r7
 8008e08:	f7ff ff46 	bl	8008c98 <spi_stm32_shift_frames>
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	e7ea      	b.n	8008de6 <spi_stm32_isr+0x1c>

08008e10 <spi_stm32_transceive>:
{
 8008e10:	b510      	push	{r4, lr}
 8008e12:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 8008e14:	2400      	movs	r4, #0
 8008e16:	9401      	str	r4, [sp, #4]
 8008e18:	9400      	str	r4, [sp, #0]
 8008e1a:	f7fb fde9 	bl	80049f0 <transceive>
}
 8008e1e:	b002      	add	sp, #8
 8008e20:	bd10      	pop	{r4, pc}

08008e22 <spi_stm32_release>:
{
 8008e22:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 8008e24:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	b1c3      	cbz	r3, 8008e5c <spi_stm32_release+0x3a>
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	b1b3      	cbz	r3, 8008e5c <spi_stm32_release+0x3a>
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	b1a2      	cbz	r2, 8008e5c <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 8008e32:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8008e34:	f7fd fb10 	bl	8006458 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8008e40:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	2301      	movs	r3, #1
 8008e46:	408b      	lsls	r3, r1
 8008e48:	421a      	tst	r2, r3
 8008e4a:	d10b      	bne.n	8008e64 <spi_stm32_release+0x42>
 8008e4c:	2300      	movs	r3, #0
	if (value != 0)	{
 8008e4e:	b15b      	cbz	r3, 8008e68 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008e50:	2301      	movs	r3, #1
 8008e52:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008e56:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	4798      	blx	r3
 8008e5c:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 8008e5e:	b153      	cbz	r3, 8008e76 <spi_stm32_release+0x54>
}
 8008e60:	2000      	movs	r0, #0
 8008e62:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e7f2      	b.n	8008e4e <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8008e68:	2301      	movs	r3, #1
 8008e6a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8008e6e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8008e74:	e7f2      	b.n	8008e5c <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 8008e76:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8008e78:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 8008e7c:	f7fc fe4a 	bl	8005b14 <z_impl_k_sem_give>
}
 8008e80:	e7ee      	b.n	8008e60 <spi_stm32_release+0x3e>

08008e82 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8008e82:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008e88:	6843      	ldr	r3, [r0, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8008e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e96:	d02f      	beq.n	8008ef8 <uart_stm32_config_get+0x76>
 8008e98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e9c:	d12e      	bne.n	8008efc <uart_stm32_config_get+0x7a>
 8008e9e:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8008ea0:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008ea2:	6843      	ldr	r3, [r0, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb0:	d028      	beq.n	8008f04 <uart_stm32_config_get+0x82>
 8008eb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eb6:	d027      	beq.n	8008f08 <uart_stm32_config_get+0x86>
 8008eb8:	b313      	cbz	r3, 8008f00 <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 8008eba:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8008ebc:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008ebe:	6843      	ldr	r3, [r0, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8008ec8:	6812      	ldr	r2, [r2, #0]
 8008eca:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed2:	d01d      	beq.n	8008f10 <uart_stm32_config_get+0x8e>
 8008ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ed8:	d11d      	bne.n	8008f16 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 8008eda:	b1ba      	cbz	r2, 8008f0c <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 8008edc:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8008ede:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008ee0:	6843      	ldr	r3, [r0, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8008eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eee:	d019      	beq.n	8008f24 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 8008ef0:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 8008ef2:	71cb      	strb	r3, [r1, #7]
}
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e7d1      	b.n	8008ea0 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7cf      	b.n	8008ea0 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e7db      	b.n	8008ebc <uart_stm32_config_get+0x3a>
	switch (sb) {
 8008f04:	2300      	movs	r3, #0
 8008f06:	e7d9      	b.n	8008ebc <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e7d7      	b.n	8008ebc <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e7e6      	b.n	8008ede <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8008f10:	b922      	cbnz	r2, 8008f1c <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 8008f12:	2304      	movs	r3, #4
 8008f14:	e7e3      	b.n	8008ede <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 8008f16:	b91a      	cbnz	r2, 8008f20 <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e7e0      	b.n	8008ede <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e7de      	b.n	8008ede <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 8008f20:	2302      	movs	r3, #2
 8008f22:	e7dc      	b.n	8008ede <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e7e4      	b.n	8008ef2 <uart_stm32_config_get+0x70>

08008f28 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008f28:	6843      	ldr	r3, [r0, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008f2c:	69da      	ldr	r2, [r3, #28]
 8008f2e:	f012 0f08 	tst.w	r2, #8
 8008f32:	d001      	beq.n	8008f38 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8008f34:	2208      	movs	r2, #8
 8008f36:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8008f38:	69da      	ldr	r2, [r3, #28]
 8008f3a:	f012 0f20 	tst.w	r2, #32
 8008f3e:	d003      	beq.n	8008f48 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8008f40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 8008f42:	700b      	strb	r3, [r1, #0]
	return 0;
 8008f44:	2000      	movs	r0, #0
 8008f46:	4770      	bx	lr
		return -1;
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008f4c:	4770      	bx	lr

08008f4e <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008f4e:	6843      	ldr	r3, [r0, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f58:	d0fb      	beq.n	8008f52 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8008f5a:	b289      	uxth	r1, r1
 8008f5c:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8008f5e:	4770      	bx	lr

08008f60 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008f60:	6843      	ldr	r3, [r0, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8008f64:	69d8      	ldr	r0, [r3, #28]
 8008f66:	f010 0008 	ands.w	r0, r0, #8
 8008f6a:	d000      	beq.n	8008f6e <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 8008f6c:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	f012 0f01 	tst.w	r2, #1
 8008f74:	d001      	beq.n	8008f7a <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 8008f76:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8008f7a:	69da      	ldr	r2, [r3, #28]
 8008f7c:	f012 0f02 	tst.w	r2, #2
 8008f80:	d001      	beq.n	8008f86 <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 8008f82:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8008f86:	f010 0f01 	tst.w	r0, #1
 8008f8a:	d001      	beq.n	8008f90 <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 8008f90:	f010 0f02 	tst.w	r0, #2
 8008f94:	d001      	beq.n	8008f9a <uart_stm32_err_check+0x3a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8008f96:	2201      	movs	r2, #1
 8008f98:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8008f9a:	f010 0f04 	tst.w	r0, #4
 8008f9e:	d001      	beq.n	8008fa4 <uart_stm32_err_check+0x44>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	621a      	str	r2, [r3, #32]
}
 8008fa8:	4770      	bx	lr

08008faa <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008faa:	680a      	ldr	r2, [r1, #0]
 8008fac:	0912      	lsrs	r2, r2, #4
 8008fae:	3201      	adds	r2, #1
 8008fb0:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8008fb4:	684b      	ldr	r3, [r1, #4]
 8008fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fba:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8008fbe:	688b      	ldr	r3, [r1, #8]
 8008fc0:	0e5b      	lsrs	r3, r3, #25
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	005b      	lsls	r3, r3, #1
}
 8008fc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8008fca:	4770      	bx	lr

08008fcc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 8008fcc:	b148      	cbz	r0, 8008fe2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8008fce:	68c3      	ldr	r3, [r0, #12]
 8008fd0:	8818      	ldrh	r0, [r3, #0]
 8008fd2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8008fd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008fda:	bf14      	ite	ne
 8008fdc:	2000      	movne	r0, #0
 8008fde:	2001      	moveq	r0, #1
 8008fe0:	4770      	bx	lr
		return false;
 8008fe2:	2000      	movs	r0, #0
}
 8008fe4:	4770      	bx	lr

08008fe6 <arch_system_halt>:
	__asm__ volatile(
 8008fe6:	f04f 0210 	mov.w	r2, #16
 8008fea:	f3ef 8311 	mrs	r3, BASEPRI
 8008fee:	f382 8812 	msr	BASEPRI_MAX, r2
 8008ff2:	f3bf 8f6f 	isb	sy
	for (;;) {
 8008ff6:	e7fe      	b.n	8008ff6 <arch_system_halt+0x10>

08008ff8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8008ff8:	6902      	ldr	r2, [r0, #16]
 8008ffa:	6943      	ldr	r3, [r0, #20]
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	f012 0203 	ands.w	r2, r2, #3
 8009002:	d10d      	bne.n	8009020 <create_free_list+0x28>
	slab->free_list = NULL;
 8009004:	2100      	movs	r1, #0
 8009006:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 8009008:	e005      	b.n	8009016 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800900a:	6981      	ldr	r1, [r0, #24]
 800900c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800900e:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 8009010:	6901      	ldr	r1, [r0, #16]
 8009012:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 8009014:	3201      	adds	r2, #1
 8009016:	68c1      	ldr	r1, [r0, #12]
 8009018:	4291      	cmp	r1, r2
 800901a:	d8f6      	bhi.n	800900a <create_free_list+0x12>
	return 0;
 800901c:	2000      	movs	r0, #0
 800901e:	4770      	bx	lr
		return -EINVAL;
 8009020:	f06f 0015 	mvn.w	r0, #21
}
 8009024:	4770      	bx	lr

08009026 <k_mem_slab_init>:
{
 8009026:	b510      	push	{r4, lr}
 8009028:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 800902a:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
 800902c:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
 800902e:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 8009034:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
 8009036:	f7ff ffdf 	bl	8008ff8 <create_free_list>
	if (rc < 0) {
 800903a:	2800      	cmp	r0, #0
 800903c:	db01      	blt.n	8009042 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
 800903e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 8009040:	6064      	str	r4, [r4, #4]
}
 8009042:	bd10      	pop	{r4, pc}

08009044 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	f04f 0310 	mov.w	r3, #16
 800904e:	f3ef 8611 	mrs	r6, BASEPRI
 8009052:	f383 8812 	msr	BASEPRI_MAX, r3
 8009056:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800905a:	6983      	ldr	r3, [r0, #24]
 800905c:	b163      	cbz	r3, 8009078 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 800905e:	682b      	ldr	r3, [r5, #0]
 8009060:	69a2      	ldr	r2, [r4, #24]
 8009062:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 8009068:	69e3      	ldr	r3, [r4, #28]
 800906a:	3b01      	subs	r3, #1
 800906c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800906e:	f386 8811 	msr	BASEPRI, r6
 8009072:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 8009076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009078:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800907c:	f000 f994 	bl	80093a8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8009080:	2800      	cmp	r0, #0
 8009082:	d0ec      	beq.n	800905e <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 8009084:	682a      	ldr	r2, [r5, #0]
 8009086:	2100      	movs	r1, #0
 8009088:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800908a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 800908c:	f000 f8c5 	bl	800921a <z_ready_thread>
			z_reschedule(&slab->lock, key);
 8009090:	4631      	mov	r1, r6
 8009092:	4638      	mov	r0, r7
 8009094:	f7fc fddc 	bl	8005c50 <z_reschedule>
			return;
 8009098:	e7ed      	b.n	8009076 <k_mem_slab_free+0x32>

0800909a <setup_thread_stack>:
{
 800909a:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800909c:	3207      	adds	r2, #7
 800909e:	f022 0207 	bic.w	r2, r2, #7
 80090a2:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 80090a6:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 80090aa:	6644      	str	r4, [r0, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
 80090ac:	6682      	str	r2, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 80090ae:	2200      	movs	r2, #0
 80090b0:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 80090b2:	18c8      	adds	r0, r1, r3
 80090b4:	bc10      	pop	{r4}
 80090b6:	4770      	bx	lr

080090b8 <z_impl_k_thread_name_set>:
}
 80090b8:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80090bc:	4770      	bx	lr

080090be <k_thread_name_get>:
}
 80090be:	2000      	movs	r0, #0
 80090c0:	4770      	bx	lr

080090c2 <z_impl_k_thread_start>:
{
 80090c2:	b508      	push	{r3, lr}
	z_sched_start(thread);
 80090c4:	f7fc fefa 	bl	8005ebc <z_sched_start>
}
 80090c8:	bd08      	pop	{r3, pc}

080090ca <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 80090ca:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 80090cc:	2400      	movs	r4, #0
 80090ce:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 80090d0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 80090d2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 80090d4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 80090d6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 80090d8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 80090da:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 80090dc:	bc10      	pop	{r4}
 80090de:	4770      	bx	lr

080090e0 <z_impl_k_thread_create>:
{
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	b087      	sub	sp, #28
 80090e4:	4604      	mov	r4, r0
 80090e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80090e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 80090ea:	2700      	movs	r7, #0
 80090ec:	9705      	str	r7, [sp, #20]
 80090ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80090f0:	9704      	str	r7, [sp, #16]
 80090f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80090f4:	9703      	str	r7, [sp, #12]
 80090f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80090f8:	9702      	str	r7, [sp, #8]
 80090fa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80090fc:	9701      	str	r7, [sp, #4]
 80090fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009100:	9700      	str	r7, [sp, #0]
 8009102:	f7fc fbc9 	bl	8005898 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 8009106:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800910a:	bf08      	it	eq
 800910c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 8009110:	d102      	bne.n	8009118 <z_impl_k_thread_create+0x38>
}
 8009112:	4620      	mov	r0, r4
 8009114:	b007      	add	sp, #28
 8009116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 8009118:	4632      	mov	r2, r6
 800911a:	462b      	mov	r3, r5
 800911c:	4620      	mov	r0, r4
 800911e:	f7fc fbad 	bl	800587c <schedule_new_thread>
 8009122:	e7f6      	b.n	8009112 <z_impl_k_thread_create+0x32>

08009124 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 8009124:	b508      	push	{r3, lr}
	__asm__ volatile(
 8009126:	f04f 0210 	mov.w	r2, #16
 800912a:	f3ef 8311 	mrs	r3, BASEPRI
 800912e:	f382 8812 	msr	BASEPRI_MAX, r2
 8009132:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8009136:	f7fa f953 	bl	80033e0 <arch_cpu_idle>
 800913a:	e7f4      	b.n	8009126 <idle+0x2>

0800913c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800913c:	4288      	cmp	r0, r1
 800913e:	da00      	bge.n	8009142 <new_prio_for_inheritance+0x6>
 8009140:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 8009142:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 8009146:	db01      	blt.n	800914c <new_prio_for_inheritance+0x10>
 8009148:	4608      	mov	r0, r1
 800914a:	4770      	bx	lr
 800914c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 8009150:	4770      	bx	lr

08009152 <adjust_owner_prio>:
{
 8009152:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 8009154:	6880      	ldr	r0, [r0, #8]
 8009156:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800915a:	428b      	cmp	r3, r1
 800915c:	d101      	bne.n	8009162 <adjust_owner_prio+0x10>
	return false;
 800915e:	2000      	movs	r0, #0
}
 8009160:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 8009162:	f7fc fef9 	bl	8005f58 <z_set_prio>
 8009166:	e7fb      	b.n	8009160 <adjust_owner_prio+0xe>

08009168 <z_impl_k_mutex_init>:
{
 8009168:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800916a:	2000      	movs	r0, #0
 800916c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800916e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 8009170:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 8009172:	605b      	str	r3, [r3, #4]
}
 8009174:	4770      	bx	lr

08009176 <thread_active_elsewhere>:
}
 8009176:	2000      	movs	r0, #0
 8009178:	4770      	bx	lr

0800917a <pended_on_thread>:
}
 800917a:	6880      	ldr	r0, [r0, #8]
 800917c:	4770      	bx	lr

0800917e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800917e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 8009182:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 8009186:	4283      	cmp	r3, r0
 8009188:	d001      	beq.n	800918e <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800918a:	1ac0      	subs	r0, r0, r3
 800918c:	4770      	bx	lr
	return 0;
 800918e:	2000      	movs	r0, #0
}
 8009190:	4770      	bx	lr

08009192 <z_unpend_thread_no_timeout>:
{
 8009192:	b538      	push	{r3, r4, r5, lr}
 8009194:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 8009196:	2300      	movs	r3, #0
 8009198:	f04f 0210 	mov.w	r2, #16
 800919c:	f3ef 8511 	mrs	r5, BASEPRI
 80091a0:	f382 8812 	msr	BASEPRI_MAX, r2
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	e010      	b.n	80091cc <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7ff ffe5 	bl	800917a <pended_on_thread>
 80091b0:	4621      	mov	r1, r4
 80091b2:	f000 f823 	bl	80091fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80091b6:	7b63      	ldrb	r3, [r4, #13]
 80091b8:	f023 0302 	bic.w	r3, r3, #2
 80091bc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80091c2:	f385 8811 	msr	BASEPRI, r5
 80091c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80091ca:	2301      	movs	r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0ec      	beq.n	80091aa <z_unpend_thread_no_timeout+0x18>
}
 80091d0:	bd38      	pop	{r3, r4, r5, pc}

080091d2 <z_reschedule_irqlock>:
{
 80091d2:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80091d4:	4603      	mov	r3, r0
 80091d6:	b920      	cbnz	r0, 80091e2 <z_reschedule_irqlock+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091d8:	f3ef 8205 	mrs	r2, IPSR
 80091dc:	b942      	cbnz	r2, 80091f0 <z_reschedule_irqlock+0x1e>
 80091de:	2201      	movs	r2, #1
 80091e0:	e000      	b.n	80091e4 <z_reschedule_irqlock+0x12>
 80091e2:	2200      	movs	r2, #0
	if (resched(key)) {
 80091e4:	b932      	cbnz	r2, 80091f4 <z_reschedule_irqlock+0x22>
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
}
 80091ee:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80091f0:	2200      	movs	r2, #0
 80091f2:	e7f7      	b.n	80091e4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fa f99b 	bl	8003530 <arch_swap>
	return ret;
 80091fa:	e7f8      	b.n	80091ee <z_reschedule_irqlock+0x1c>

080091fc <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 80091fc:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 80091fe:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
 8009200:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009202:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 8009208:	604b      	str	r3, [r1, #4]
}
 800920a:	4770      	bx	lr

0800920c <z_priq_dumb_best>:
{
 800920c:	4603      	mov	r3, r0
	return list->head == list;
 800920e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009210:	4283      	cmp	r3, r0
 8009212:	d000      	beq.n	8009216 <z_priq_dumb_best+0xa>
}
 8009214:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8009216:	2000      	movs	r0, #0
	return thread;
 8009218:	e7fc      	b.n	8009214 <z_priq_dumb_best+0x8>

0800921a <z_ready_thread>:
{
 800921a:	b538      	push	{r3, r4, r5, lr}
 800921c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800921e:	2300      	movs	r3, #0
	__asm__ volatile(
 8009220:	f04f 0210 	mov.w	r2, #16
 8009224:	f3ef 8511 	mrs	r5, BASEPRI
 8009228:	f382 8812 	msr	BASEPRI_MAX, r2
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	e004      	b.n	800923c <z_ready_thread+0x22>
	__asm__ volatile(
 8009232:	f385 8811 	msr	BASEPRI, r5
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	2301      	movs	r3, #1
 800923c:	b943      	cbnz	r3, 8009250 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff ff99 	bl	8009176 <thread_active_elsewhere>
 8009244:	2800      	cmp	r0, #0
 8009246:	d1f4      	bne.n	8009232 <z_ready_thread+0x18>
			ready_thread(thread);
 8009248:	4620      	mov	r0, r4
 800924a:	f7fc fdf7 	bl	8005e3c <ready_thread>
 800924e:	e7f0      	b.n	8009232 <z_ready_thread+0x18>
}
 8009250:	bd38      	pop	{r3, r4, r5, pc}

08009252 <z_thread_timeout>:
{
 8009252:	b570      	push	{r4, r5, r6, lr}
 8009254:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 8009256:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800925a:	2300      	movs	r3, #0
	__asm__ volatile(
 800925c:	f04f 0210 	mov.w	r2, #16
 8009260:	f3ef 8611 	mrs	r6, BASEPRI
 8009264:	f382 8812 	msr	BASEPRI_MAX, r2
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	e011      	b.n	8009292 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800926e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8009272:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8009276:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 8009282:	4628      	mov	r0, r5
 8009284:	f7fc fdda 	bl	8005e3c <ready_thread>
	__asm__ volatile(
 8009288:	f386 8811 	msr	BASEPRI, r6
 800928c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8009290:	2301      	movs	r3, #1
 8009292:	b9ab      	cbnz	r3, 80092c0 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 8009294:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 8009298:	f013 0f28 	tst.w	r3, #40	; 0x28
 800929c:	d1f4      	bne.n	8009288 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800929e:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0e3      	beq.n	800926e <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff ff67 	bl	800917a <pended_on_thread>
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7ff ffa5 	bl	80091fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80092b2:	7b6b      	ldrb	r3, [r5, #13]
 80092b4:	f023 0302 	bic.w	r3, r3, #2
 80092b8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60ab      	str	r3, [r5, #8]
}
 80092be:	e7d6      	b.n	800926e <z_thread_timeout+0x1c>
}
 80092c0:	bd70      	pop	{r4, r5, r6, pc}

080092c2 <add_to_waitq_locked>:
{
 80092c2:	b570      	push	{r4, r5, r6, lr}
 80092c4:	4605      	mov	r5, r0
 80092c6:	460e      	mov	r6, r1
	unready_thread(thread);
 80092c8:	f7fc fe16 	bl	8005ef8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80092cc:	7b6b      	ldrb	r3, [r5, #13]
 80092ce:	f043 0302 	orr.w	r3, r3, #2
 80092d2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 80092d4:	b1b6      	cbz	r6, 8009304 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 80092d6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 80092d8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092da:	42a6      	cmp	r6, r4
 80092dc:	d019      	beq.n	8009312 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80092de:	b164      	cbz	r4, 80092fa <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80092e0:	4621      	mov	r1, r4
 80092e2:	4628      	mov	r0, r5
 80092e4:	f7ff ff4b 	bl	800917e <z_sched_prio_cmp>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dc0c      	bgt.n	8009306 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80092ec:	b12c      	cbz	r4, 80092fa <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 80092ee:	6873      	ldr	r3, [r6, #4]
 80092f0:	429c      	cmp	r4, r3
 80092f2:	d002      	beq.n	80092fa <add_to_waitq_locked+0x38>
 80092f4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	d1f1      	bne.n	80092de <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 80092fa:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 80092fc:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 80092fe:	606b      	str	r3, [r5, #4]
	tail->next = node;
 8009300:	601d      	str	r5, [r3, #0]
	list->tail = node;
 8009302:	6075      	str	r5, [r6, #4]
}
 8009304:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 8009306:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8009308:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800930a:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800930c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800930e:	6065      	str	r5, [r4, #4]
}
 8009310:	e7f8      	b.n	8009304 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009312:	2400      	movs	r4, #0
 8009314:	e7e3      	b.n	80092de <add_to_waitq_locked+0x1c>

08009316 <pend>:
{
 8009316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800931a:	4605      	mov	r5, r0
 800931c:	460e      	mov	r6, r1
 800931e:	4691      	mov	r9, r2
 8009320:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 8009322:	2400      	movs	r4, #0
	__asm__ volatile(
 8009324:	f04f 0310 	mov.w	r3, #16
 8009328:	f3ef 8711 	mrs	r7, BASEPRI
 800932c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	e008      	b.n	8009348 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	f7ff ffc2 	bl	80092c2 <add_to_waitq_locked>
	__asm__ volatile(
 800933e:	f387 8811 	msr	BASEPRI, r7
 8009342:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8009346:	2401      	movs	r4, #1
 8009348:	2c00      	cmp	r4, #0
 800934a:	d0f4      	beq.n	8009336 <pend+0x20>
	add_thread_timeout(thread, timeout);
 800934c:	464a      	mov	r2, r9
 800934e:	4643      	mov	r3, r8
 8009350:	4628      	mov	r0, r5
 8009352:	f7fc fc29 	bl	8005ba8 <add_thread_timeout>
}
 8009356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800935a <z_unpend1_no_timeout>:
{
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800935e:	2300      	movs	r3, #0
	__asm__ volatile(
 8009360:	f04f 0210 	mov.w	r2, #16
 8009364:	f3ef 8611 	mrs	r6, BASEPRI
 8009368:	f382 8812 	msr	BASEPRI_MAX, r2
 800936c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 8009370:	461c      	mov	r4, r3
 8009372:	e004      	b.n	800937e <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 8009374:	f386 8811 	msr	BASEPRI, r6
 8009378:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800937c:	2301      	movs	r3, #1
 800937e:	b98b      	cbnz	r3, 80093a4 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff ff43 	bl	800920c <z_priq_dumb_best>
		if (thread != NULL) {
 8009386:	4604      	mov	r4, r0
 8009388:	2800      	cmp	r0, #0
 800938a:	d0f3      	beq.n	8009374 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800938c:	f7ff fef5 	bl	800917a <pended_on_thread>
 8009390:	4621      	mov	r1, r4
 8009392:	f7ff ff33 	bl	80091fc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009396:	7b63      	ldrb	r3, [r4, #13]
 8009398:	f023 0302 	bic.w	r3, r3, #2
 800939c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	60a3      	str	r3, [r4, #8]
}
 80093a2:	e7e7      	b.n	8009374 <z_unpend1_no_timeout+0x1a>
}
 80093a4:	4620      	mov	r0, r4
 80093a6:	bd70      	pop	{r4, r5, r6, pc}

080093a8 <z_unpend_first_thread>:
{
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 80093ac:	2300      	movs	r3, #0
	__asm__ volatile(
 80093ae:	f04f 0210 	mov.w	r2, #16
 80093b2:	f3ef 8611 	mrs	r6, BASEPRI
 80093b6:	f382 8812 	msr	BASEPRI_MAX, r2
 80093ba:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 80093be:	461c      	mov	r4, r3
 80093c0:	e004      	b.n	80093cc <z_unpend_first_thread+0x24>
	__asm__ volatile(
 80093c2:	f386 8811 	msr	BASEPRI, r6
 80093c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80093ca:	2301      	movs	r3, #1
 80093cc:	b9ab      	cbnz	r3, 80093fa <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 80093ce:	4628      	mov	r0, r5
 80093d0:	f7ff ff1c 	bl	800920c <z_priq_dumb_best>
		if (thread != NULL) {
 80093d4:	4604      	mov	r4, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0f3      	beq.n	80093c2 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80093da:	f7ff fece 	bl	800917a <pended_on_thread>
 80093de:	4621      	mov	r1, r4
 80093e0:	f7ff ff0c 	bl	80091fc <z_priq_dumb_remove>
 80093e4:	7b63      	ldrb	r3, [r4, #13]
 80093e6:	f023 0302 	bic.w	r3, r3, #2
 80093ea:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60a3      	str	r3, [r4, #8]
 80093f0:	f104 0018 	add.w	r0, r4, #24
 80093f4:	f000 f81a 	bl	800942c <z_abort_timeout>
 80093f8:	e7e3      	b.n	80093c2 <z_unpend_first_thread+0x1a>
}
 80093fa:	4620      	mov	r0, r4
 80093fc:	bd70      	pop	{r4, r5, r6, pc}

080093fe <remove_timeout>:
{
 80093fe:	b510      	push	{r4, lr}
 8009400:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 8009402:	f7fc fedb 	bl	80061bc <next>
 8009406:	b148      	cbz	r0, 800941c <remove_timeout+0x1e>
 8009408:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800940a:	6920      	ldr	r0, [r4, #16]
 800940c:	6961      	ldr	r1, [r4, #20]
 800940e:	6913      	ldr	r3, [r2, #16]
 8009410:	181b      	adds	r3, r3, r0
 8009412:	6950      	ldr	r0, [r2, #20]
 8009414:	eb41 0100 	adc.w	r1, r1, r0
 8009418:	6113      	str	r3, [r2, #16]
 800941a:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800941c:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800941e:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 8009420:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009422:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009424:	2300      	movs	r3, #0
 8009426:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 8009428:	6063      	str	r3, [r4, #4]
}
 800942a:	bd10      	pop	{r4, pc}

0800942c <z_abort_timeout>:
{
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 8009430:	2300      	movs	r3, #0
	__asm__ volatile(
 8009432:	f04f 0210 	mov.w	r2, #16
 8009436:	f3ef 8611 	mrs	r6, BASEPRI
 800943a:	f382 8812 	msr	BASEPRI_MAX, r2
 800943e:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 8009442:	f06f 0015 	mvn.w	r0, #21
 8009446:	e004      	b.n	8009452 <z_abort_timeout+0x26>
	__asm__ volatile(
 8009448:	f386 8811 	msr	BASEPRI, r6
 800944c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8009450:	2301      	movs	r3, #1
 8009452:	461d      	mov	r5, r3
 8009454:	b93b      	cbnz	r3, 8009466 <z_abort_timeout+0x3a>
	return node->next != NULL;
 8009456:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0f5      	beq.n	8009448 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff ffce 	bl	80093fe <remove_timeout>
			ret = 0;
 8009462:	4628      	mov	r0, r5
 8009464:	e7f0      	b.n	8009448 <z_abort_timeout+0x1c>
}
 8009466:	bd70      	pop	{r4, r5, r6, pc}

08009468 <z_set_timeout_expiry>:
{
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	4605      	mov	r5, r0
 800946c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800946e:	2300      	movs	r3, #0
	__asm__ volatile(
 8009470:	f04f 0210 	mov.w	r2, #16
 8009474:	f3ef 8611 	mrs	r6, BASEPRI
 8009478:	f382 8812 	msr	BASEPRI_MAX, r2
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	e00a      	b.n	8009498 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 8009482:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 8009484:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8009488:	2801      	cmp	r0, #1
 800948a:	dd00      	ble.n	800948e <z_set_timeout_expiry+0x26>
 800948c:	b97c      	cbnz	r4, 80094ae <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800948e:	f386 8811 	msr	BASEPRI, r6
 8009492:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8009496:	2301      	movs	r3, #1
 8009498:	461c      	mov	r4, r3
 800949a:	b97b      	cbnz	r3, 80094bc <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800949c:	f7fc fea6 	bl	80061ec <next_timeout>
			      || (ticks <= next_to);
 80094a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80094a4:	d0ed      	beq.n	8009482 <z_set_timeout_expiry+0x1a>
 80094a6:	42a8      	cmp	r0, r5
 80094a8:	dbec      	blt.n	8009484 <z_set_timeout_expiry+0x1c>
 80094aa:	2401      	movs	r4, #1
 80094ac:	e7ea      	b.n	8009484 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 80094ae:	4639      	mov	r1, r7
 80094b0:	42a8      	cmp	r0, r5
 80094b2:	bfa8      	it	ge
 80094b4:	4628      	movge	r0, r5
 80094b6:	f7fb fdff 	bl	80050b8 <sys_clock_set_timeout>
 80094ba:	e7e8      	b.n	800948e <z_set_timeout_expiry+0x26>
}
 80094bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094be <z_impl_k_uptime_ticks>:
{
 80094be:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 80094c0:	f7fc ffaa 	bl	8006418 <sys_clock_tick_get>
}
 80094c4:	bd08      	pop	{r3, pc}

080094c6 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 80094c6:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 80094c8:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 80094ce:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 80094d2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 80094d4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 80094d6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 80094d8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 80094da:	6343      	str	r3, [r0, #52]	; 0x34
}
 80094dc:	4770      	bx	lr

080094de <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 80094de:	b510      	push	{r4, lr}
 80094e0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 80094e2:	f7ff ffa3 	bl	800942c <z_abort_timeout>

	if (inactive) {
 80094e6:	b9a0      	cbnz	r0, 8009512 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 80094e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ea:	b10b      	cbz	r3, 80094f0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 80094ec:	4620      	mov	r0, r4
 80094ee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 80094f0:	f104 0018 	add.w	r0, r4, #24
 80094f4:	f7ff ff31 	bl	800935a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 80094f8:	b158      	cbz	r0, 8009512 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 80094fa:	f7ff fe8e 	bl	800921a <z_ready_thread>
	__asm__ volatile(
 80094fe:	f04f 0310 	mov.w	r3, #16
 8009502:	f3ef 8011 	mrs	r0, BASEPRI
 8009506:	f383 8812 	msr	BASEPRI_MAX, r3
 800950a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800950e:	f7ff fe60 	bl	80091d2 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 8009512:	bd10      	pop	{r4, pc}

08009514 <memcpy>:
 8009514:	440a      	add	r2, r1
 8009516:	4291      	cmp	r1, r2
 8009518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800951c:	d100      	bne.n	8009520 <memcpy+0xc>
 800951e:	4770      	bx	lr
 8009520:	b510      	push	{r4, lr}
 8009522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800952a:	4291      	cmp	r1, r2
 800952c:	d1f9      	bne.n	8009522 <memcpy+0xe>
 800952e:	bd10      	pop	{r4, pc}

08009530 <memset>:
 8009530:	4402      	add	r2, r0
 8009532:	4603      	mov	r3, r0
 8009534:	4293      	cmp	r3, r2
 8009536:	d100      	bne.n	800953a <memset+0xa>
 8009538:	4770      	bx	lr
 800953a:	f803 1b01 	strb.w	r1, [r3], #1
 800953e:	e7f9      	b.n	8009534 <memset+0x4>

08009540 <__cvt>:
 8009540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	b088      	sub	sp, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	461f      	mov	r7, r3
 800954a:	4614      	mov	r4, r2
 800954c:	bfb8      	it	lt
 800954e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009554:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009556:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800955a:	bfb6      	itet	lt
 800955c:	461f      	movlt	r7, r3
 800955e:	2300      	movge	r3, #0
 8009560:	232d      	movlt	r3, #45	; 0x2d
 8009562:	7013      	strb	r3, [r2, #0]
 8009564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009566:	f023 0820 	bic.w	r8, r3, #32
 800956a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800956e:	d005      	beq.n	800957c <__cvt+0x3c>
 8009570:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009574:	d100      	bne.n	8009578 <__cvt+0x38>
 8009576:	3501      	adds	r5, #1
 8009578:	2302      	movs	r3, #2
 800957a:	e000      	b.n	800957e <__cvt+0x3e>
 800957c:	2303      	movs	r3, #3
 800957e:	aa07      	add	r2, sp, #28
 8009580:	9204      	str	r2, [sp, #16]
 8009582:	aa06      	add	r2, sp, #24
 8009584:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009588:	e9cd 3500 	strd	r3, r5, [sp]
 800958c:	4622      	mov	r2, r4
 800958e:	463b      	mov	r3, r7
 8009590:	f7f7 fc62 	bl	8000e58 <_dtoa_r>
 8009594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009598:	4606      	mov	r6, r0
 800959a:	d102      	bne.n	80095a2 <__cvt+0x62>
 800959c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800959e:	07db      	lsls	r3, r3, #31
 80095a0:	d522      	bpl.n	80095e8 <__cvt+0xa8>
 80095a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095a6:	eb06 0905 	add.w	r9, r6, r5
 80095aa:	d110      	bne.n	80095ce <__cvt+0x8e>
 80095ac:	7833      	ldrb	r3, [r6, #0]
 80095ae:	2b30      	cmp	r3, #48	; 0x30
 80095b0:	d10a      	bne.n	80095c8 <__cvt+0x88>
 80095b2:	2200      	movs	r2, #0
 80095b4:	2300      	movs	r3, #0
 80095b6:	4620      	mov	r0, r4
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f7 fa7f 	bl	8000abc <__aeabi_dcmpeq>
 80095be:	b918      	cbnz	r0, 80095c8 <__cvt+0x88>
 80095c0:	f1c5 0501 	rsb	r5, r5, #1
 80095c4:	f8ca 5000 	str.w	r5, [sl]
 80095c8:	f8da 3000 	ldr.w	r3, [sl]
 80095cc:	4499      	add	r9, r3
 80095ce:	2200      	movs	r2, #0
 80095d0:	2300      	movs	r3, #0
 80095d2:	4620      	mov	r0, r4
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 fa71 	bl	8000abc <__aeabi_dcmpeq>
 80095da:	b108      	cbz	r0, 80095e0 <__cvt+0xa0>
 80095dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80095e0:	2230      	movs	r2, #48	; 0x30
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	454b      	cmp	r3, r9
 80095e6:	d307      	bcc.n	80095f8 <__cvt+0xb8>
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095ec:	1b9b      	subs	r3, r3, r6
 80095ee:	4630      	mov	r0, r6
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	b008      	add	sp, #32
 80095f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f8:	1c59      	adds	r1, r3, #1
 80095fa:	9107      	str	r1, [sp, #28]
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	e7f0      	b.n	80095e2 <__cvt+0xa2>

08009600 <__exponent>:
 8009600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009602:	4603      	mov	r3, r0
 8009604:	2900      	cmp	r1, #0
 8009606:	bfb8      	it	lt
 8009608:	4249      	neglt	r1, r1
 800960a:	f803 2b02 	strb.w	r2, [r3], #2
 800960e:	bfb4      	ite	lt
 8009610:	222d      	movlt	r2, #45	; 0x2d
 8009612:	222b      	movge	r2, #43	; 0x2b
 8009614:	2909      	cmp	r1, #9
 8009616:	7042      	strb	r2, [r0, #1]
 8009618:	dd2a      	ble.n	8009670 <__exponent+0x70>
 800961a:	f10d 0407 	add.w	r4, sp, #7
 800961e:	46a4      	mov	ip, r4
 8009620:	270a      	movs	r7, #10
 8009622:	46a6      	mov	lr, r4
 8009624:	460a      	mov	r2, r1
 8009626:	fb91 f6f7 	sdiv	r6, r1, r7
 800962a:	fb07 1516 	mls	r5, r7, r6, r1
 800962e:	3530      	adds	r5, #48	; 0x30
 8009630:	2a63      	cmp	r2, #99	; 0x63
 8009632:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009636:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800963a:	4631      	mov	r1, r6
 800963c:	dcf1      	bgt.n	8009622 <__exponent+0x22>
 800963e:	3130      	adds	r1, #48	; 0x30
 8009640:	f1ae 0502 	sub.w	r5, lr, #2
 8009644:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009648:	1c44      	adds	r4, r0, #1
 800964a:	4629      	mov	r1, r5
 800964c:	4561      	cmp	r1, ip
 800964e:	d30a      	bcc.n	8009666 <__exponent+0x66>
 8009650:	f10d 0209 	add.w	r2, sp, #9
 8009654:	eba2 020e 	sub.w	r2, r2, lr
 8009658:	4565      	cmp	r5, ip
 800965a:	bf88      	it	hi
 800965c:	2200      	movhi	r2, #0
 800965e:	4413      	add	r3, r2
 8009660:	1a18      	subs	r0, r3, r0
 8009662:	b003      	add	sp, #12
 8009664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800966e:	e7ed      	b.n	800964c <__exponent+0x4c>
 8009670:	2330      	movs	r3, #48	; 0x30
 8009672:	3130      	adds	r1, #48	; 0x30
 8009674:	7083      	strb	r3, [r0, #2]
 8009676:	70c1      	strb	r1, [r0, #3]
 8009678:	1d03      	adds	r3, r0, #4
 800967a:	e7f1      	b.n	8009660 <__exponent+0x60>

0800967c <_printf_common>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	4616      	mov	r6, r2
 8009682:	4699      	mov	r9, r3
 8009684:	688a      	ldr	r2, [r1, #8]
 8009686:	690b      	ldr	r3, [r1, #16]
 8009688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800968c:	4293      	cmp	r3, r2
 800968e:	bfb8      	it	lt
 8009690:	4613      	movlt	r3, r2
 8009692:	6033      	str	r3, [r6, #0]
 8009694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009698:	4607      	mov	r7, r0
 800969a:	460c      	mov	r4, r1
 800969c:	b10a      	cbz	r2, 80096a2 <_printf_common+0x26>
 800969e:	3301      	adds	r3, #1
 80096a0:	6033      	str	r3, [r6, #0]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	0699      	lsls	r1, r3, #26
 80096a6:	bf42      	ittt	mi
 80096a8:	6833      	ldrmi	r3, [r6, #0]
 80096aa:	3302      	addmi	r3, #2
 80096ac:	6033      	strmi	r3, [r6, #0]
 80096ae:	6825      	ldr	r5, [r4, #0]
 80096b0:	f015 0506 	ands.w	r5, r5, #6
 80096b4:	d106      	bne.n	80096c4 <_printf_common+0x48>
 80096b6:	f104 0a19 	add.w	sl, r4, #25
 80096ba:	68e3      	ldr	r3, [r4, #12]
 80096bc:	6832      	ldr	r2, [r6, #0]
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dc26      	bgt.n	8009712 <_printf_common+0x96>
 80096c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c8:	1e13      	subs	r3, r2, #0
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	bf18      	it	ne
 80096ce:	2301      	movne	r3, #1
 80096d0:	0692      	lsls	r2, r2, #26
 80096d2:	d42b      	bmi.n	800972c <_printf_common+0xb0>
 80096d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d8:	4649      	mov	r1, r9
 80096da:	4638      	mov	r0, r7
 80096dc:	47c0      	blx	r8
 80096de:	3001      	adds	r0, #1
 80096e0:	d01e      	beq.n	8009720 <_printf_common+0xa4>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	68e5      	ldr	r5, [r4, #12]
 80096e6:	6832      	ldr	r2, [r6, #0]
 80096e8:	f003 0306 	and.w	r3, r3, #6
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	bf08      	it	eq
 80096f0:	1aad      	subeq	r5, r5, r2
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	bf0c      	ite	eq
 80096f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096fc:	2500      	movne	r5, #0
 80096fe:	4293      	cmp	r3, r2
 8009700:	bfc4      	itt	gt
 8009702:	1a9b      	subgt	r3, r3, r2
 8009704:	18ed      	addgt	r5, r5, r3
 8009706:	2600      	movs	r6, #0
 8009708:	341a      	adds	r4, #26
 800970a:	42b5      	cmp	r5, r6
 800970c:	d11a      	bne.n	8009744 <_printf_common+0xc8>
 800970e:	2000      	movs	r0, #0
 8009710:	e008      	b.n	8009724 <_printf_common+0xa8>
 8009712:	2301      	movs	r3, #1
 8009714:	4652      	mov	r2, sl
 8009716:	4649      	mov	r1, r9
 8009718:	4638      	mov	r0, r7
 800971a:	47c0      	blx	r8
 800971c:	3001      	adds	r0, #1
 800971e:	d103      	bne.n	8009728 <_printf_common+0xac>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009728:	3501      	adds	r5, #1
 800972a:	e7c6      	b.n	80096ba <_printf_common+0x3e>
 800972c:	18e1      	adds	r1, r4, r3
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	2030      	movs	r0, #48	; 0x30
 8009732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009736:	4422      	add	r2, r4
 8009738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800973c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009740:	3302      	adds	r3, #2
 8009742:	e7c7      	b.n	80096d4 <_printf_common+0x58>
 8009744:	2301      	movs	r3, #1
 8009746:	4622      	mov	r2, r4
 8009748:	4649      	mov	r1, r9
 800974a:	4638      	mov	r0, r7
 800974c:	47c0      	blx	r8
 800974e:	3001      	adds	r0, #1
 8009750:	d0e6      	beq.n	8009720 <_printf_common+0xa4>
 8009752:	3601      	adds	r6, #1
 8009754:	e7d9      	b.n	800970a <_printf_common+0x8e>

08009756 <strncpy>:
 8009756:	b510      	push	{r4, lr}
 8009758:	3901      	subs	r1, #1
 800975a:	4603      	mov	r3, r0
 800975c:	b132      	cbz	r2, 800976c <strncpy+0x16>
 800975e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009762:	f803 4b01 	strb.w	r4, [r3], #1
 8009766:	3a01      	subs	r2, #1
 8009768:	2c00      	cmp	r4, #0
 800976a:	d1f7      	bne.n	800975c <strncpy+0x6>
 800976c:	441a      	add	r2, r3
 800976e:	2100      	movs	r1, #0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <strncpy+0x20>
 8009774:	bd10      	pop	{r4, pc}
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <strncpy+0x1a>

0800977c <strnlen>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4602      	mov	r2, r0
 8009780:	4401      	add	r1, r0
 8009782:	428a      	cmp	r2, r1
 8009784:	4613      	mov	r3, r2
 8009786:	d003      	beq.n	8009790 <strnlen+0x14>
 8009788:	781c      	ldrb	r4, [r3, #0]
 800978a:	3201      	adds	r2, #1
 800978c:	2c00      	cmp	r4, #0
 800978e:	d1f8      	bne.n	8009782 <strnlen+0x6>
 8009790:	1a18      	subs	r0, r3, r0
 8009792:	bd10      	pop	{r4, pc}

08009794 <quorem>:
 8009794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	6903      	ldr	r3, [r0, #16]
 800979a:	690c      	ldr	r4, [r1, #16]
 800979c:	42a3      	cmp	r3, r4
 800979e:	4607      	mov	r7, r0
 80097a0:	db7d      	blt.n	800989e <quorem+0x10a>
 80097a2:	3c01      	subs	r4, #1
 80097a4:	f101 0814 	add.w	r8, r1, #20
 80097a8:	f100 0514 	add.w	r5, r0, #20
 80097ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ba:	3301      	adds	r3, #1
 80097bc:	429a      	cmp	r2, r3
 80097be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80097ca:	d32e      	bcc.n	800982a <quorem+0x96>
 80097cc:	f04f 0e00 	mov.w	lr, #0
 80097d0:	4640      	mov	r0, r8
 80097d2:	46ac      	mov	ip, r5
 80097d4:	46f2      	mov	sl, lr
 80097d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80097da:	b293      	uxth	r3, r2
 80097dc:	fb06 e303 	mla	r3, r6, r3, lr
 80097e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097e4:	0c12      	lsrs	r2, r2, #16
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	fb06 e202 	mla	r2, r6, r2, lr
 80097ec:	ebaa 0303 	sub.w	r3, sl, r3
 80097f0:	f8dc a000 	ldr.w	sl, [ip]
 80097f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097f8:	b292      	uxth	r2, r2
 80097fa:	fa13 f38a 	uxtah	r3, r3, sl
 80097fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009802:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009806:	b29b      	uxth	r3, r3
 8009808:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800980c:	4581      	cmp	r9, r0
 800980e:	f84c 3b04 	str.w	r3, [ip], #4
 8009812:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009816:	d2de      	bcs.n	80097d6 <quorem+0x42>
 8009818:	f855 300b 	ldr.w	r3, [r5, fp]
 800981c:	b92b      	cbnz	r3, 800982a <quorem+0x96>
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	3b04      	subs	r3, #4
 8009822:	429d      	cmp	r5, r3
 8009824:	461a      	mov	r2, r3
 8009826:	d32e      	bcc.n	8009886 <quorem+0xf2>
 8009828:	613c      	str	r4, [r7, #16]
 800982a:	4638      	mov	r0, r7
 800982c:	f000 f886 	bl	800993c <__mcmp>
 8009830:	2800      	cmp	r0, #0
 8009832:	db24      	blt.n	800987e <quorem+0xea>
 8009834:	3601      	adds	r6, #1
 8009836:	4628      	mov	r0, r5
 8009838:	f04f 0c00 	mov.w	ip, #0
 800983c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009840:	f8d0 e000 	ldr.w	lr, [r0]
 8009844:	b293      	uxth	r3, r2
 8009846:	ebac 0303 	sub.w	r3, ip, r3
 800984a:	0c12      	lsrs	r2, r2, #16
 800984c:	fa13 f38e 	uxtah	r3, r3, lr
 8009850:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009854:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009858:	b29b      	uxth	r3, r3
 800985a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800985e:	45c1      	cmp	r9, r8
 8009860:	f840 3b04 	str.w	r3, [r0], #4
 8009864:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009868:	d2e8      	bcs.n	800983c <quorem+0xa8>
 800986a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800986e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009872:	b922      	cbnz	r2, 800987e <quorem+0xea>
 8009874:	3b04      	subs	r3, #4
 8009876:	429d      	cmp	r5, r3
 8009878:	461a      	mov	r2, r3
 800987a:	d30a      	bcc.n	8009892 <quorem+0xfe>
 800987c:	613c      	str	r4, [r7, #16]
 800987e:	4630      	mov	r0, r6
 8009880:	b003      	add	sp, #12
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	3b04      	subs	r3, #4
 800988a:	2a00      	cmp	r2, #0
 800988c:	d1cc      	bne.n	8009828 <quorem+0x94>
 800988e:	3c01      	subs	r4, #1
 8009890:	e7c7      	b.n	8009822 <quorem+0x8e>
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	3b04      	subs	r3, #4
 8009896:	2a00      	cmp	r2, #0
 8009898:	d1f0      	bne.n	800987c <quorem+0xe8>
 800989a:	3c01      	subs	r4, #1
 800989c:	e7eb      	b.n	8009876 <quorem+0xe2>
 800989e:	2000      	movs	r0, #0
 80098a0:	e7ee      	b.n	8009880 <quorem+0xec>

080098a2 <__hi0bits>:
 80098a2:	0c02      	lsrs	r2, r0, #16
 80098a4:	0412      	lsls	r2, r2, #16
 80098a6:	4603      	mov	r3, r0
 80098a8:	b9ca      	cbnz	r2, 80098de <__hi0bits+0x3c>
 80098aa:	0403      	lsls	r3, r0, #16
 80098ac:	2010      	movs	r0, #16
 80098ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098b2:	bf04      	itt	eq
 80098b4:	021b      	lsleq	r3, r3, #8
 80098b6:	3008      	addeq	r0, #8
 80098b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098bc:	bf04      	itt	eq
 80098be:	011b      	lsleq	r3, r3, #4
 80098c0:	3004      	addeq	r0, #4
 80098c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098c6:	bf04      	itt	eq
 80098c8:	009b      	lsleq	r3, r3, #2
 80098ca:	3002      	addeq	r0, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db05      	blt.n	80098dc <__hi0bits+0x3a>
 80098d0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80098d4:	f100 0001 	add.w	r0, r0, #1
 80098d8:	bf08      	it	eq
 80098da:	2020      	moveq	r0, #32
 80098dc:	4770      	bx	lr
 80098de:	2000      	movs	r0, #0
 80098e0:	e7e5      	b.n	80098ae <__hi0bits+0xc>

080098e2 <__lo0bits>:
 80098e2:	6803      	ldr	r3, [r0, #0]
 80098e4:	4602      	mov	r2, r0
 80098e6:	f013 0007 	ands.w	r0, r3, #7
 80098ea:	d00b      	beq.n	8009904 <__lo0bits+0x22>
 80098ec:	07d9      	lsls	r1, r3, #31
 80098ee:	d421      	bmi.n	8009934 <__lo0bits+0x52>
 80098f0:	0798      	lsls	r0, r3, #30
 80098f2:	bf49      	itett	mi
 80098f4:	085b      	lsrmi	r3, r3, #1
 80098f6:	089b      	lsrpl	r3, r3, #2
 80098f8:	2001      	movmi	r0, #1
 80098fa:	6013      	strmi	r3, [r2, #0]
 80098fc:	bf5c      	itt	pl
 80098fe:	6013      	strpl	r3, [r2, #0]
 8009900:	2002      	movpl	r0, #2
 8009902:	4770      	bx	lr
 8009904:	b299      	uxth	r1, r3
 8009906:	b909      	cbnz	r1, 800990c <__lo0bits+0x2a>
 8009908:	0c1b      	lsrs	r3, r3, #16
 800990a:	2010      	movs	r0, #16
 800990c:	b2d9      	uxtb	r1, r3
 800990e:	b909      	cbnz	r1, 8009914 <__lo0bits+0x32>
 8009910:	3008      	adds	r0, #8
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	0719      	lsls	r1, r3, #28
 8009916:	bf04      	itt	eq
 8009918:	091b      	lsreq	r3, r3, #4
 800991a:	3004      	addeq	r0, #4
 800991c:	0799      	lsls	r1, r3, #30
 800991e:	bf04      	itt	eq
 8009920:	089b      	lsreq	r3, r3, #2
 8009922:	3002      	addeq	r0, #2
 8009924:	07d9      	lsls	r1, r3, #31
 8009926:	d403      	bmi.n	8009930 <__lo0bits+0x4e>
 8009928:	085b      	lsrs	r3, r3, #1
 800992a:	f100 0001 	add.w	r0, r0, #1
 800992e:	d003      	beq.n	8009938 <__lo0bits+0x56>
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	4770      	bx	lr
 8009934:	2000      	movs	r0, #0
 8009936:	4770      	bx	lr
 8009938:	2020      	movs	r0, #32
 800993a:	4770      	bx	lr

0800993c <__mcmp>:
 800993c:	690a      	ldr	r2, [r1, #16]
 800993e:	4603      	mov	r3, r0
 8009940:	6900      	ldr	r0, [r0, #16]
 8009942:	1a80      	subs	r0, r0, r2
 8009944:	b530      	push	{r4, r5, lr}
 8009946:	d10d      	bne.n	8009964 <__mcmp+0x28>
 8009948:	3314      	adds	r3, #20
 800994a:	3114      	adds	r1, #20
 800994c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009950:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800995c:	4295      	cmp	r5, r2
 800995e:	d002      	beq.n	8009966 <__mcmp+0x2a>
 8009960:	d304      	bcc.n	800996c <__mcmp+0x30>
 8009962:	2001      	movs	r0, #1
 8009964:	bd30      	pop	{r4, r5, pc}
 8009966:	42a3      	cmp	r3, r4
 8009968:	d3f4      	bcc.n	8009954 <__mcmp+0x18>
 800996a:	e7fb      	b.n	8009964 <__mcmp+0x28>
 800996c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009970:	e7f8      	b.n	8009964 <__mcmp+0x28>

08009972 <_calloc_r>:
 8009972:	b538      	push	{r3, r4, r5, lr}
 8009974:	fb02 f501 	mul.w	r5, r2, r1
 8009978:	4629      	mov	r1, r5
 800997a:	f7fc fe79 	bl	8006670 <_malloc_r>
 800997e:	4604      	mov	r4, r0
 8009980:	b118      	cbz	r0, 800998a <_calloc_r+0x18>
 8009982:	462a      	mov	r2, r5
 8009984:	2100      	movs	r1, #0
 8009986:	f7ff fdd3 	bl	8009530 <memset>
 800998a:	4620      	mov	r0, r4
 800998c:	bd38      	pop	{r3, r4, r5, pc}

0800998e <__ascii_mbtowc>:
 800998e:	b082      	sub	sp, #8
 8009990:	b901      	cbnz	r1, 8009994 <__ascii_mbtowc+0x6>
 8009992:	a901      	add	r1, sp, #4
 8009994:	b142      	cbz	r2, 80099a8 <__ascii_mbtowc+0x1a>
 8009996:	b14b      	cbz	r3, 80099ac <__ascii_mbtowc+0x1e>
 8009998:	7813      	ldrb	r3, [r2, #0]
 800999a:	600b      	str	r3, [r1, #0]
 800999c:	7812      	ldrb	r2, [r2, #0]
 800999e:	1e10      	subs	r0, r2, #0
 80099a0:	bf18      	it	ne
 80099a2:	2001      	movne	r0, #1
 80099a4:	b002      	add	sp, #8
 80099a6:	4770      	bx	lr
 80099a8:	4610      	mov	r0, r2
 80099aa:	e7fb      	b.n	80099a4 <__ascii_mbtowc+0x16>
 80099ac:	f06f 0001 	mvn.w	r0, #1
 80099b0:	e7f8      	b.n	80099a4 <__ascii_mbtowc+0x16>

080099b2 <__sfputc_r>:
 80099b2:	6893      	ldr	r3, [r2, #8]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	b410      	push	{r4}
 80099ba:	6093      	str	r3, [r2, #8]
 80099bc:	da07      	bge.n	80099ce <__sfputc_r+0x1c>
 80099be:	6994      	ldr	r4, [r2, #24]
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	db01      	blt.n	80099c8 <__sfputc_r+0x16>
 80099c4:	290a      	cmp	r1, #10
 80099c6:	d102      	bne.n	80099ce <__sfputc_r+0x1c>
 80099c8:	bc10      	pop	{r4}
 80099ca:	f7fd be8f 	b.w	80076ec <__swbuf_r>
 80099ce:	6813      	ldr	r3, [r2, #0]
 80099d0:	1c58      	adds	r0, r3, #1
 80099d2:	6010      	str	r0, [r2, #0]
 80099d4:	7019      	strb	r1, [r3, #0]
 80099d6:	4608      	mov	r0, r1
 80099d8:	bc10      	pop	{r4}
 80099da:	4770      	bx	lr

080099dc <__sfputs_r>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	4614      	mov	r4, r2
 80099e4:	18d5      	adds	r5, r2, r3
 80099e6:	42ac      	cmp	r4, r5
 80099e8:	d101      	bne.n	80099ee <__sfputs_r+0x12>
 80099ea:	2000      	movs	r0, #0
 80099ec:	e007      	b.n	80099fe <__sfputs_r+0x22>
 80099ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f2:	463a      	mov	r2, r7
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ffdc 	bl	80099b2 <__sfputc_r>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	d1f3      	bne.n	80099e6 <__sfputs_r+0xa>
 80099fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a00 <__ascii_wctomb>:
 8009a00:	4603      	mov	r3, r0
 8009a02:	4608      	mov	r0, r1
 8009a04:	b141      	cbz	r1, 8009a18 <__ascii_wctomb+0x18>
 8009a06:	2aff      	cmp	r2, #255	; 0xff
 8009a08:	d904      	bls.n	8009a14 <__ascii_wctomb+0x14>
 8009a0a:	228a      	movs	r2, #138	; 0x8a
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a12:	4770      	bx	lr
 8009a14:	700a      	strb	r2, [r1, #0]
 8009a16:	2001      	movs	r0, #1
 8009a18:	4770      	bx	lr

08009a1a <abort>:
 8009a1a:	b508      	push	{r3, lr}
 8009a1c:	2006      	movs	r0, #6
 8009a1e:	f7fe f8e3 	bl	8007be8 <raise>
 8009a22:	2001      	movs	r0, #1
 8009a24:	f7fa fb8a 	bl	800413c <_exit>

08009a28 <__sfmoreglue>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	2268      	movs	r2, #104	; 0x68
 8009a2c:	1e4d      	subs	r5, r1, #1
 8009a2e:	4355      	muls	r5, r2
 8009a30:	460e      	mov	r6, r1
 8009a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a36:	f7fc fe1b 	bl	8006670 <_malloc_r>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	b140      	cbz	r0, 8009a50 <__sfmoreglue+0x28>
 8009a3e:	2100      	movs	r1, #0
 8009a40:	e9c0 1600 	strd	r1, r6, [r0]
 8009a44:	300c      	adds	r0, #12
 8009a46:	60a0      	str	r0, [r4, #8]
 8009a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a4c:	f7ff fd70 	bl	8009530 <memset>
 8009a50:	4620      	mov	r0, r4
 8009a52:	bd70      	pop	{r4, r5, r6, pc}

08009a54 <_fwalk_reent>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4606      	mov	r6, r0
 8009a5a:	4688      	mov	r8, r1
 8009a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a60:	2700      	movs	r7, #0
 8009a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a66:	f1b9 0901 	subs.w	r9, r9, #1
 8009a6a:	d505      	bpl.n	8009a78 <_fwalk_reent+0x24>
 8009a6c:	6824      	ldr	r4, [r4, #0]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d1f7      	bne.n	8009a62 <_fwalk_reent+0xe>
 8009a72:	4638      	mov	r0, r7
 8009a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a78:	89ab      	ldrh	r3, [r5, #12]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d907      	bls.n	8009a8e <_fwalk_reent+0x3a>
 8009a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a82:	3301      	adds	r3, #1
 8009a84:	d003      	beq.n	8009a8e <_fwalk_reent+0x3a>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	4307      	orrs	r7, r0
 8009a8e:	3568      	adds	r5, #104	; 0x68
 8009a90:	e7e9      	b.n	8009a66 <_fwalk_reent+0x12>

08009a92 <__swhatbuf_r>:
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	460e      	mov	r6, r1
 8009a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9a:	2900      	cmp	r1, #0
 8009a9c:	b096      	sub	sp, #88	; 0x58
 8009a9e:	4614      	mov	r4, r2
 8009aa0:	461d      	mov	r5, r3
 8009aa2:	da08      	bge.n	8009ab6 <__swhatbuf_r+0x24>
 8009aa4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	602a      	str	r2, [r5, #0]
 8009aac:	061a      	lsls	r2, r3, #24
 8009aae:	d410      	bmi.n	8009ad2 <__swhatbuf_r+0x40>
 8009ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab4:	e00e      	b.n	8009ad4 <__swhatbuf_r+0x42>
 8009ab6:	466a      	mov	r2, sp
 8009ab8:	f7fe f8d2 	bl	8007c60 <_fstat_r>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	dbf1      	blt.n	8009aa4 <__swhatbuf_r+0x12>
 8009ac0:	9a01      	ldr	r2, [sp, #4]
 8009ac2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ac6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009aca:	425a      	negs	r2, r3
 8009acc:	415a      	adcs	r2, r3
 8009ace:	602a      	str	r2, [r5, #0]
 8009ad0:	e7ee      	b.n	8009ab0 <__swhatbuf_r+0x1e>
 8009ad2:	2340      	movs	r3, #64	; 0x40
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	6023      	str	r3, [r4, #0]
 8009ad8:	b016      	add	sp, #88	; 0x58
 8009ada:	bd70      	pop	{r4, r5, r6, pc}

08009adc <_raise_r>:
 8009adc:	291f      	cmp	r1, #31
 8009ade:	b538      	push	{r3, r4, r5, lr}
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	d904      	bls.n	8009af0 <_raise_r+0x14>
 8009ae6:	2316      	movs	r3, #22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009af2:	b112      	cbz	r2, 8009afa <_raise_r+0x1e>
 8009af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009af8:	b94b      	cbnz	r3, 8009b0e <_raise_r+0x32>
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 f816 	bl	8009b2c <_getpid_r>
 8009b00:	462a      	mov	r2, r5
 8009b02:	4601      	mov	r1, r0
 8009b04:	4620      	mov	r0, r4
 8009b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0a:	f7fe b875 	b.w	8007bf8 <_kill_r>
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d00a      	beq.n	8009b28 <_raise_r+0x4c>
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	d103      	bne.n	8009b1e <_raise_r+0x42>
 8009b16:	2316      	movs	r3, #22
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	e7e7      	b.n	8009aee <_raise_r+0x12>
 8009b1e:	2400      	movs	r4, #0
 8009b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b24:	4628      	mov	r0, r5
 8009b26:	4798      	blx	r3
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7e0      	b.n	8009aee <_raise_r+0x12>

08009b2c <_getpid_r>:
 8009b2c:	f7fe bd3b 	b.w	80085a6 <_getpid>

08009b30 <__sread>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	460c      	mov	r4, r1
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	f7fe f8c6 	bl	8007cc8 <_read_r>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	bfab      	itete	ge
 8009b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b42:	89a3      	ldrhlt	r3, [r4, #12]
 8009b44:	181b      	addge	r3, r3, r0
 8009b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b4a:	bfac      	ite	ge
 8009b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b4e:	81a3      	strhlt	r3, [r4, #12]
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <__swrite>:
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	461f      	mov	r7, r3
 8009b58:	898b      	ldrh	r3, [r1, #12]
 8009b5a:	05db      	lsls	r3, r3, #23
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	4616      	mov	r6, r2
 8009b62:	d505      	bpl.n	8009b70 <__swrite+0x1e>
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2302      	movs	r3, #2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f7fe f89a 	bl	8007ca4 <_lseek_r>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	463b      	mov	r3, r7
 8009b80:	4628      	mov	r0, r5
 8009b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	f7fe b849 	b.w	8007c1c <_write_r>

08009b8a <__sseek>:
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b92:	f7fe f887 	bl	8007ca4 <_lseek_r>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	bf15      	itete	ne
 8009b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ba6:	81a3      	strheq	r3, [r4, #12]
 8009ba8:	bf18      	it	ne
 8009baa:	81a3      	strhne	r3, [r4, #12]
 8009bac:	bd10      	pop	{r4, pc}

08009bae <__sclose>:
 8009bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb2:	f7fe b845 	b.w	8007c40 <_close_r>

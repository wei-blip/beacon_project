
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	60 24 00 20 31 2d 00 08 f5 96 00 08 e9 2c 00 08     `$. 1-.......,..
 8000010:	e9 2c 00 08 e9 2c 00 08 e9 2c 00 08 00 00 00 00     .,...,...,......
	...
 800002c:	a9 29 00 08 e9 2c 00 08 00 00 00 00 55 29 00 08     .)...,......U)..
 800003c:	69 58 00 08                                         iX..

08000040 <_irq_vector_table>:
 8000040:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000050:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000060:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000070:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000080:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000090:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000a0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000b0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000c0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000d0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000e0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 80000f0:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000100:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000110:	81 2a 00 08 81 2a 00 08 81 2a 00 08 81 2a 00 08     .*...*...*...*..
 8000120:	81 2a 00 08                                         .*..

Disassembly of section text:

08000128 <__aeabi_drsub>:
 8000128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800012c:	e002      	b.n	8000134 <__adddf3>
 800012e:	bf00      	nop

08000130 <__aeabi_dsub>:
 8000130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000134 <__adddf3>:
 8000134:	b530      	push	{r4, r5, lr}
 8000136:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800013a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800013e:	ea94 0f05 	teq	r4, r5
 8000142:	bf08      	it	eq
 8000144:	ea90 0f02 	teqeq	r0, r2
 8000148:	bf1f      	itttt	ne
 800014a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800014e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800015a:	f000 80e2 	beq.w	8000322 <__adddf3+0x1ee>
 800015e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000166:	bfb8      	it	lt
 8000168:	426d      	neglt	r5, r5
 800016a:	dd0c      	ble.n	8000186 <__adddf3+0x52>
 800016c:	442c      	add	r4, r5
 800016e:	ea80 0202 	eor.w	r2, r0, r2
 8000172:	ea81 0303 	eor.w	r3, r1, r3
 8000176:	ea82 0000 	eor.w	r0, r2, r0
 800017a:	ea83 0101 	eor.w	r1, r3, r1
 800017e:	ea80 0202 	eor.w	r2, r0, r2
 8000182:	ea81 0303 	eor.w	r3, r1, r3
 8000186:	2d36      	cmp	r5, #54	; 0x36
 8000188:	bf88      	it	hi
 800018a:	bd30      	pophi	{r4, r5, pc}
 800018c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000190:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800019c:	d002      	beq.n	80001a4 <__adddf3+0x70>
 800019e:	4240      	negs	r0, r0
 80001a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001b0:	d002      	beq.n	80001b8 <__adddf3+0x84>
 80001b2:	4252      	negs	r2, r2
 80001b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b8:	ea94 0f05 	teq	r4, r5
 80001bc:	f000 80a7 	beq.w	800030e <__adddf3+0x1da>
 80001c0:	f1a4 0401 	sub.w	r4, r4, #1
 80001c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80001c8:	db0d      	blt.n	80001e6 <__adddf3+0xb2>
 80001ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001ce:	fa22 f205 	lsr.w	r2, r2, r5
 80001d2:	1880      	adds	r0, r0, r2
 80001d4:	f141 0100 	adc.w	r1, r1, #0
 80001d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80001dc:	1880      	adds	r0, r0, r2
 80001de:	fa43 f305 	asr.w	r3, r3, r5
 80001e2:	4159      	adcs	r1, r3
 80001e4:	e00e      	b.n	8000204 <__adddf3+0xd0>
 80001e6:	f1a5 0520 	sub.w	r5, r5, #32
 80001ea:	f10e 0e20 	add.w	lr, lr, #32
 80001ee:	2a01      	cmp	r2, #1
 80001f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001f4:	bf28      	it	cs
 80001f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001fa:	fa43 f305 	asr.w	r3, r3, r5
 80001fe:	18c0      	adds	r0, r0, r3
 8000200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000208:	d507      	bpl.n	800021a <__adddf3+0xe6>
 800020a:	f04f 0e00 	mov.w	lr, #0
 800020e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000212:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000216:	eb6e 0101 	sbc.w	r1, lr, r1
 800021a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800021e:	d31b      	bcc.n	8000258 <__adddf3+0x124>
 8000220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000224:	d30c      	bcc.n	8000240 <__adddf3+0x10c>
 8000226:	0849      	lsrs	r1, r1, #1
 8000228:	ea5f 0030 	movs.w	r0, r0, rrx
 800022c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000230:	f104 0401 	add.w	r4, r4, #1
 8000234:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800023c:	f080 809a 	bcs.w	8000374 <__adddf3+0x240>
 8000240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000244:	bf08      	it	eq
 8000246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800024a:	f150 0000 	adcs.w	r0, r0, #0
 800024e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000252:	ea41 0105 	orr.w	r1, r1, r5
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800025c:	4140      	adcs	r0, r0
 800025e:	eb41 0101 	adc.w	r1, r1, r1
 8000262:	3c01      	subs	r4, #1
 8000264:	bf28      	it	cs
 8000266:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800026a:	d2e9      	bcs.n	8000240 <__adddf3+0x10c>
 800026c:	f091 0f00 	teq	r1, #0
 8000270:	bf04      	itt	eq
 8000272:	4601      	moveq	r1, r0
 8000274:	2000      	moveq	r0, #0
 8000276:	fab1 f381 	clz	r3, r1
 800027a:	bf08      	it	eq
 800027c:	3320      	addeq	r3, #32
 800027e:	f1a3 030b 	sub.w	r3, r3, #11
 8000282:	f1b3 0220 	subs.w	r2, r3, #32
 8000286:	da0c      	bge.n	80002a2 <__adddf3+0x16e>
 8000288:	320c      	adds	r2, #12
 800028a:	dd08      	ble.n	800029e <__adddf3+0x16a>
 800028c:	f102 0c14 	add.w	ip, r2, #20
 8000290:	f1c2 020c 	rsb	r2, r2, #12
 8000294:	fa01 f00c 	lsl.w	r0, r1, ip
 8000298:	fa21 f102 	lsr.w	r1, r1, r2
 800029c:	e00c      	b.n	80002b8 <__adddf3+0x184>
 800029e:	f102 0214 	add.w	r2, r2, #20
 80002a2:	bfd8      	it	le
 80002a4:	f1c2 0c20 	rsble	ip, r2, #32
 80002a8:	fa01 f102 	lsl.w	r1, r1, r2
 80002ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002b0:	bfdc      	itt	le
 80002b2:	ea41 010c 	orrle.w	r1, r1, ip
 80002b6:	4090      	lslle	r0, r2
 80002b8:	1ae4      	subs	r4, r4, r3
 80002ba:	bfa2      	ittt	ge
 80002bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002c0:	4329      	orrge	r1, r5
 80002c2:	bd30      	popge	{r4, r5, pc}
 80002c4:	ea6f 0404 	mvn.w	r4, r4
 80002c8:	3c1f      	subs	r4, #31
 80002ca:	da1c      	bge.n	8000306 <__adddf3+0x1d2>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc0e      	bgt.n	80002ee <__adddf3+0x1ba>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0220 	rsb	r2, r4, #32
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f302 	lsl.w	r3, r1, r2
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	fa21 f304 	lsr.w	r3, r1, r4
 80002e8:	ea45 0103 	orr.w	r1, r5, r3
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	f1c4 040c 	rsb	r4, r4, #12
 80002f2:	f1c4 0220 	rsb	r2, r4, #32
 80002f6:	fa20 f002 	lsr.w	r0, r0, r2
 80002fa:	fa01 f304 	lsl.w	r3, r1, r4
 80002fe:	ea40 0003 	orr.w	r0, r0, r3
 8000302:	4629      	mov	r1, r5
 8000304:	bd30      	pop	{r4, r5, pc}
 8000306:	fa21 f004 	lsr.w	r0, r1, r4
 800030a:	4629      	mov	r1, r5
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	f094 0f00 	teq	r4, #0
 8000312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000316:	bf06      	itte	eq
 8000318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800031c:	3401      	addeq	r4, #1
 800031e:	3d01      	subne	r5, #1
 8000320:	e74e      	b.n	80001c0 <__adddf3+0x8c>
 8000322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000326:	bf18      	it	ne
 8000328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032c:	d029      	beq.n	8000382 <__adddf3+0x24e>
 800032e:	ea94 0f05 	teq	r4, r5
 8000332:	bf08      	it	eq
 8000334:	ea90 0f02 	teqeq	r0, r2
 8000338:	d005      	beq.n	8000346 <__adddf3+0x212>
 800033a:	ea54 0c00 	orrs.w	ip, r4, r0
 800033e:	bf04      	itt	eq
 8000340:	4619      	moveq	r1, r3
 8000342:	4610      	moveq	r0, r2
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	ea91 0f03 	teq	r1, r3
 800034a:	bf1e      	ittt	ne
 800034c:	2100      	movne	r1, #0
 800034e:	2000      	movne	r0, #0
 8000350:	bd30      	popne	{r4, r5, pc}
 8000352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000356:	d105      	bne.n	8000364 <__adddf3+0x230>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	4149      	adcs	r1, r1
 800035c:	bf28      	it	cs
 800035e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000368:	bf3c      	itt	cc
 800036a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800036e:	bd30      	popcc	{r4, r5, pc}
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800037c:	f04f 0000 	mov.w	r0, #0
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf1a      	itte	ne
 8000388:	4619      	movne	r1, r3
 800038a:	4610      	movne	r0, r2
 800038c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000390:	bf1c      	itt	ne
 8000392:	460b      	movne	r3, r1
 8000394:	4602      	movne	r2, r0
 8000396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800039a:	bf06      	itte	eq
 800039c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003a0:	ea91 0f03 	teqeq	r1, r3
 80003a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	bf00      	nop

080003ac <__aeabi_ui2d>:
 80003ac:	f090 0f00 	teq	r0, #0
 80003b0:	bf04      	itt	eq
 80003b2:	2100      	moveq	r1, #0
 80003b4:	4770      	bxeq	lr
 80003b6:	b530      	push	{r4, r5, lr}
 80003b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c0:	f04f 0500 	mov.w	r5, #0
 80003c4:	f04f 0100 	mov.w	r1, #0
 80003c8:	e750      	b.n	800026c <__adddf3+0x138>
 80003ca:	bf00      	nop

080003cc <__aeabi_i2d>:
 80003cc:	f090 0f00 	teq	r0, #0
 80003d0:	bf04      	itt	eq
 80003d2:	2100      	moveq	r1, #0
 80003d4:	4770      	bxeq	lr
 80003d6:	b530      	push	{r4, r5, lr}
 80003d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003e4:	bf48      	it	mi
 80003e6:	4240      	negmi	r0, r0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e73e      	b.n	800026c <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_f2d>:
 80003f0:	0042      	lsls	r2, r0, #1
 80003f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80003fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003fe:	bf1f      	itttt	ne
 8000400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800040c:	4770      	bxne	lr
 800040e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000412:	bf08      	it	eq
 8000414:	4770      	bxeq	lr
 8000416:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800041a:	bf04      	itt	eq
 800041c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e71c      	b.n	800026c <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_ul2d>:
 8000434:	ea50 0201 	orrs.w	r2, r0, r1
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	f04f 0500 	mov.w	r5, #0
 8000442:	e00a      	b.n	800045a <__aeabi_l2d+0x16>

08000444 <__aeabi_l2d>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000452:	d502      	bpl.n	800045a <__aeabi_l2d+0x16>
 8000454:	4240      	negs	r0, r0
 8000456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000462:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000466:	f43f aed8 	beq.w	800021a <__adddf3+0xe6>
 800046a:	f04f 0203 	mov.w	r2, #3
 800046e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000472:	bf18      	it	ne
 8000474:	3203      	addne	r2, #3
 8000476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800047a:	bf18      	it	ne
 800047c:	3203      	addne	r2, #3
 800047e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	fa00 fc03 	lsl.w	ip, r0, r3
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000492:	ea40 000e 	orr.w	r0, r0, lr
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	4414      	add	r4, r2
 800049c:	e6bd      	b.n	800021a <__adddf3+0xe6>
 800049e:	bf00      	nop

080004a0 <__aeabi_dmul>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ae:	bf1d      	ittte	ne
 80004b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004b4:	ea94 0f0c 	teqne	r4, ip
 80004b8:	ea95 0f0c 	teqne	r5, ip
 80004bc:	f000 f8de 	bleq	800067c <__aeabi_dmul+0x1dc>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea81 0603 	eor.w	r6, r1, r3
 80004c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004d2:	bf18      	it	ne
 80004d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004e0:	d038      	beq.n	8000554 <__aeabi_dmul+0xb4>
 80004e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004f6:	f04f 0600 	mov.w	r6, #0
 80004fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004fe:	f09c 0f00 	teq	ip, #0
 8000502:	bf18      	it	ne
 8000504:	f04e 0e01 	orrne.w	lr, lr, #1
 8000508:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800050c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000510:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000514:	d204      	bcs.n	8000520 <__aeabi_dmul+0x80>
 8000516:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800051a:	416d      	adcs	r5, r5
 800051c:	eb46 0606 	adc.w	r6, r6, r6
 8000520:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000524:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000528:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800052c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000530:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000534:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000538:	bf88      	it	hi
 800053a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800053e:	d81e      	bhi.n	800057e <__aeabi_dmul+0xde>
 8000540:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000558:	ea46 0101 	orr.w	r1, r6, r1
 800055c:	ea40 0002 	orr.w	r0, r0, r2
 8000560:	ea81 0103 	eor.w	r1, r1, r3
 8000564:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000568:	bfc2      	ittt	gt
 800056a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800056e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000572:	bd70      	popgt	{r4, r5, r6, pc}
 8000574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000578:	f04f 0e00 	mov.w	lr, #0
 800057c:	3c01      	subs	r4, #1
 800057e:	f300 80ab 	bgt.w	80006d8 <__aeabi_dmul+0x238>
 8000582:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000586:	bfde      	ittt	le
 8000588:	2000      	movle	r0, #0
 800058a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800058e:	bd70      	pople	{r4, r5, r6, pc}
 8000590:	f1c4 0400 	rsb	r4, r4, #0
 8000594:	3c20      	subs	r4, #32
 8000596:	da35      	bge.n	8000604 <__aeabi_dmul+0x164>
 8000598:	340c      	adds	r4, #12
 800059a:	dc1b      	bgt.n	80005d4 <__aeabi_dmul+0x134>
 800059c:	f104 0414 	add.w	r4, r4, #20
 80005a0:	f1c4 0520 	rsb	r5, r4, #32
 80005a4:	fa00 f305 	lsl.w	r3, r0, r5
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f205 	lsl.w	r2, r1, r5
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005c0:	fa21 f604 	lsr.w	r6, r1, r4
 80005c4:	eb42 0106 	adc.w	r1, r2, r6
 80005c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005cc:	bf08      	it	eq
 80005ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f1c4 040c 	rsb	r4, r4, #12
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f304 	lsl.w	r3, r0, r4
 80005e0:	fa20 f005 	lsr.w	r0, r0, r5
 80005e4:	fa01 f204 	lsl.w	r2, r1, r4
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	f141 0100 	adc.w	r1, r1, #0
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f205 	lsl.w	r2, r0, r5
 800060c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000610:	fa20 f304 	lsr.w	r3, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea43 0302 	orr.w	r3, r3, r2
 800061c:	fa21 f004 	lsr.w	r0, r1, r4
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	fa21 f204 	lsr.w	r2, r1, r4
 8000628:	ea20 0002 	bic.w	r0, r0, r2
 800062c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f094 0f00 	teq	r4, #0
 8000640:	d10f      	bne.n	8000662 <__aeabi_dmul+0x1c2>
 8000642:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000646:	0040      	lsls	r0, r0, #1
 8000648:	eb41 0101 	adc.w	r1, r1, r1
 800064c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000650:	bf08      	it	eq
 8000652:	3c01      	subeq	r4, #1
 8000654:	d0f7      	beq.n	8000646 <__aeabi_dmul+0x1a6>
 8000656:	ea41 0106 	orr.w	r1, r1, r6
 800065a:	f095 0f00 	teq	r5, #0
 800065e:	bf18      	it	ne
 8000660:	4770      	bxne	lr
 8000662:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	eb43 0303 	adc.w	r3, r3, r3
 800066c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3d01      	subeq	r5, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1c6>
 8000676:	ea43 0306 	orr.w	r3, r3, r6
 800067a:	4770      	bx	lr
 800067c:	ea94 0f0c 	teq	r4, ip
 8000680:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000684:	bf18      	it	ne
 8000686:	ea95 0f0c 	teqne	r5, ip
 800068a:	d00c      	beq.n	80006a6 <__aeabi_dmul+0x206>
 800068c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000690:	bf18      	it	ne
 8000692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000696:	d1d1      	bne.n	800063c <__aeabi_dmul+0x19c>
 8000698:	ea81 0103 	eor.w	r1, r1, r3
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	f04f 0000 	mov.w	r0, #0
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006aa:	bf06      	itte	eq
 80006ac:	4610      	moveq	r0, r2
 80006ae:	4619      	moveq	r1, r3
 80006b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b4:	d019      	beq.n	80006ea <__aeabi_dmul+0x24a>
 80006b6:	ea94 0f0c 	teq	r4, ip
 80006ba:	d102      	bne.n	80006c2 <__aeabi_dmul+0x222>
 80006bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006c0:	d113      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006c2:	ea95 0f0c 	teq	r5, ip
 80006c6:	d105      	bne.n	80006d4 <__aeabi_dmul+0x234>
 80006c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006cc:	bf1c      	itt	ne
 80006ce:	4610      	movne	r0, r2
 80006d0:	4619      	movne	r1, r3
 80006d2:	d10a      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006f2:	bd70      	pop	{r4, r5, r6, pc}

080006f4 <__aeabi_ddiv>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000702:	bf1d      	ittte	ne
 8000704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000708:	ea94 0f0c 	teqne	r4, ip
 800070c:	ea95 0f0c 	teqne	r5, ip
 8000710:	f000 f8a7 	bleq	8000862 <__aeabi_ddiv+0x16e>
 8000714:	eba4 0405 	sub.w	r4, r4, r5
 8000718:	ea81 0e03 	eor.w	lr, r1, r3
 800071c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000720:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000724:	f000 8088 	beq.w	8000838 <__aeabi_ddiv+0x144>
 8000728:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800072c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000730:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000734:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000738:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800073c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000740:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000744:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000748:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800074c:	429d      	cmp	r5, r3
 800074e:	bf08      	it	eq
 8000750:	4296      	cmpeq	r6, r2
 8000752:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000756:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800075a:	d202      	bcs.n	8000762 <__aeabi_ddiv+0x6e>
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000762:	1ab6      	subs	r6, r6, r2
 8000764:	eb65 0503 	sbc.w	r5, r5, r3
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	ea4f 0232 	mov.w	r2, r2, rrx
 800076e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000772:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 000c 	orrcs.w	r0, r0, ip
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007d4:	d018      	beq.n	8000808 <__aeabi_ddiv+0x114>
 80007d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007f2:	d1c0      	bne.n	8000776 <__aeabi_ddiv+0x82>
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	d10b      	bne.n	8000812 <__aeabi_ddiv+0x11e>
 80007fa:	ea41 0100 	orr.w	r1, r1, r0
 80007fe:	f04f 0000 	mov.w	r0, #0
 8000802:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000806:	e7b6      	b.n	8000776 <__aeabi_ddiv+0x82>
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf04      	itt	eq
 800080e:	4301      	orreq	r1, r0
 8000810:	2000      	moveq	r0, #0
 8000812:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000816:	bf88      	it	hi
 8000818:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800081c:	f63f aeaf 	bhi.w	800057e <__aeabi_dmul+0xde>
 8000820:	ebb5 0c03 	subs.w	ip, r5, r3
 8000824:	bf04      	itt	eq
 8000826:	ebb6 0c02 	subseq.w	ip, r6, r2
 800082a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800082e:	f150 0000 	adcs.w	r0, r0, #0
 8000832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800083c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000840:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000844:	bfc2      	ittt	gt
 8000846:	ebd4 050c 	rsbsgt	r5, r4, ip
 800084a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800084e:	bd70      	popgt	{r4, r5, r6, pc}
 8000850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000854:	f04f 0e00 	mov.w	lr, #0
 8000858:	3c01      	subs	r4, #1
 800085a:	e690      	b.n	800057e <__aeabi_dmul+0xde>
 800085c:	ea45 0e06 	orr.w	lr, r5, r6
 8000860:	e68d      	b.n	800057e <__aeabi_dmul+0xde>
 8000862:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	bf08      	it	eq
 800086c:	ea95 0f0c 	teqeq	r5, ip
 8000870:	f43f af3b 	beq.w	80006ea <__aeabi_dmul+0x24a>
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	d10a      	bne.n	8000890 <__aeabi_ddiv+0x19c>
 800087a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800087e:	f47f af34 	bne.w	80006ea <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	f47f af25 	bne.w	80006d4 <__aeabi_dmul+0x234>
 800088a:	4610      	mov	r0, r2
 800088c:	4619      	mov	r1, r3
 800088e:	e72c      	b.n	80006ea <__aeabi_dmul+0x24a>
 8000890:	ea95 0f0c 	teq	r5, ip
 8000894:	d106      	bne.n	80008a4 <__aeabi_ddiv+0x1b0>
 8000896:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089a:	f43f aefd 	beq.w	8000698 <__aeabi_dmul+0x1f8>
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	e722      	b.n	80006ea <__aeabi_dmul+0x24a>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	f47f aec5 	bne.w	800063c <__aeabi_dmul+0x19c>
 80008b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008b6:	f47f af0d 	bne.w	80006d4 <__aeabi_dmul+0x234>
 80008ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008be:	f47f aeeb 	bne.w	8000698 <__aeabi_dmul+0x1f8>
 80008c2:	e712      	b.n	80006ea <__aeabi_dmul+0x24a>

080008c4 <__aeabi_uldivmod>:
 80008c4:	b953      	cbnz	r3, 80008dc <__aeabi_uldivmod+0x18>
 80008c6:	b94a      	cbnz	r2, 80008dc <__aeabi_uldivmod+0x18>
 80008c8:	2900      	cmp	r1, #0
 80008ca:	bf08      	it	eq
 80008cc:	2800      	cmpeq	r0, #0
 80008ce:	bf1c      	itt	ne
 80008d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 b80c 	b.w	80008f4 <__aeabi_idiv0>
 80008dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e4:	f000 f8ce 	bl	8000a84 <__udivmoddi4>
 80008e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f0:	b004      	add	sp, #16
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__udivmoddi4>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	4607      	mov	r7, r0
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4615      	mov	r5, r2
 8000a90:	463c      	mov	r4, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80c6 	bne.w	8000c28 <__udivmoddi4+0x1a4>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	fab2 f782 	clz	r7, r2
 8000aa2:	d946      	bls.n	8000b32 <__udivmoddi4+0xae>
 8000aa4:	b14f      	cbz	r7, 8000aba <__udivmoddi4+0x36>
 8000aa6:	f1c7 0e20 	rsb	lr, r7, #32
 8000aaa:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000aae:	fa00 f307 	lsl.w	r3, r0, r7
 8000ab2:	40bd      	lsls	r5, r7
 8000ab4:	ea4e 0c03 	orr.w	ip, lr, r3
 8000ab8:	40bc      	lsls	r4, r7
 8000aba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000abe:	fbbc f9f8 	udiv	r9, ip, r8
 8000ac2:	fa1f fe85 	uxth.w	lr, r5
 8000ac6:	fb08 c319 	mls	r3, r8, r9, ip
 8000aca:	fb09 fa0e 	mul.w	sl, r9, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ad4:	459a      	cmp	sl, r3
 8000ad6:	d928      	bls.n	8000b2a <__udivmoddi4+0xa6>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ade:	d204      	bcs.n	8000aea <__udivmoddi4+0x66>
 8000ae0:	459a      	cmp	sl, r3
 8000ae2:	d902      	bls.n	8000aea <__udivmoddi4+0x66>
 8000ae4:	f1a9 0002 	sub.w	r0, r9, #2
 8000ae8:	442b      	add	r3, r5
 8000aea:	eba3 030a 	sub.w	r3, r3, sl
 8000aee:	fbb3 f2f8 	udiv	r2, r3, r8
 8000af2:	fb08 3312 	mls	r3, r8, r2, r3
 8000af6:	fb02 fe0e 	mul.w	lr, r2, lr
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d914      	bls.n	8000b2e <__udivmoddi4+0xaa>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000b0a:	d203      	bcs.n	8000b14 <__udivmoddi4+0x90>
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d901      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000b10:	1e93      	subs	r3, r2, #2
 8000b12:	442c      	add	r4, r5
 8000b14:	eba4 040e 	sub.w	r4, r4, lr
 8000b18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	40fc      	lsrs	r4, r7
 8000b22:	6034      	str	r4, [r6, #0]
 8000b24:	6073      	str	r3, [r6, #4]
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	e7dd      	b.n	8000aea <__udivmoddi4+0x66>
 8000b2e:	4613      	mov	r3, r2
 8000b30:	e7f0      	b.n	8000b14 <__udivmoddi4+0x90>
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xb2>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	bb87      	cbnz	r7, 8000b9a <__udivmoddi4+0x116>
 8000b38:	2101      	movs	r1, #1
 8000b3a:	1a83      	subs	r3, r0, r2
 8000b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b40:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b44:	b2aa      	uxth	r2, r5
 8000b46:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b4a:	fb0c f802 	mul.w	r8, ip, r2
 8000b4e:	0c20      	lsrs	r0, r4, #16
 8000b50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b54:	4598      	cmp	r8, r3
 8000b56:	d963      	bls.n	8000c20 <__udivmoddi4+0x19c>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b5e:	d204      	bcs.n	8000b6a <__udivmoddi4+0xe6>
 8000b60:	4598      	cmp	r8, r3
 8000b62:	d902      	bls.n	8000b6a <__udivmoddi4+0xe6>
 8000b64:	f1ac 0002 	sub.w	r0, ip, #2
 8000b68:	442b      	add	r3, r5
 8000b6a:	eba3 0308 	sub.w	r3, r3, r8
 8000b6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b72:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b76:	fb0c f202 	mul.w	r2, ip, r2
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d94f      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000b8a:	d204      	bcs.n	8000b96 <__udivmoddi4+0x112>
 8000b8c:	42a2      	cmp	r2, r4
 8000b8e:	d902      	bls.n	8000b96 <__udivmoddi4+0x112>
 8000b90:	f1ac 0302 	sub.w	r3, ip, #2
 8000b94:	442c      	add	r4, r5
 8000b96:	1aa4      	subs	r4, r4, r2
 8000b98:	e7be      	b.n	8000b18 <__udivmoddi4+0x94>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bd      	lsls	r5, r7
 8000ba0:	fa20 f80c 	lsr.w	r8, r0, ip
 8000ba4:	fa00 f307 	lsl.w	r3, r0, r7
 8000ba8:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000bac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb0:	ea4c 0203 	orr.w	r2, ip, r3
 8000bb4:	fbb8 fcfe 	udiv	ip, r8, lr
 8000bb8:	b2ab      	uxth	r3, r5
 8000bba:	fb0e 801c 	mls	r0, lr, ip, r8
 8000bbe:	fb0c f903 	mul.w	r9, ip, r3
 8000bc2:	0c11      	lsrs	r1, r2, #16
 8000bc4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000bc8:	4581      	cmp	r9, r0
 8000bca:	fa04 f407 	lsl.w	r4, r4, r7
 8000bce:	d923      	bls.n	8000c18 <__udivmoddi4+0x194>
 8000bd0:	1828      	adds	r0, r5, r0
 8000bd2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000bd6:	d204      	bcs.n	8000be2 <__udivmoddi4+0x15e>
 8000bd8:	4581      	cmp	r9, r0
 8000bda:	d902      	bls.n	8000be2 <__udivmoddi4+0x15e>
 8000bdc:	f1ac 0102 	sub.w	r1, ip, #2
 8000be0:	4428      	add	r0, r5
 8000be2:	eba0 0009 	sub.w	r0, r0, r9
 8000be6:	fbb0 fcfe 	udiv	ip, r0, lr
 8000bea:	fb0e 001c 	mls	r0, lr, ip, r0
 8000bee:	fb0c f803 	mul.w	r8, ip, r3
 8000bf2:	b292      	uxth	r2, r2
 8000bf4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000bf8:	4598      	cmp	r8, r3
 8000bfa:	d90f      	bls.n	8000c1c <__udivmoddi4+0x198>
 8000bfc:	18eb      	adds	r3, r5, r3
 8000bfe:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000c02:	d204      	bcs.n	8000c0e <__udivmoddi4+0x18a>
 8000c04:	4598      	cmp	r8, r3
 8000c06:	d902      	bls.n	8000c0e <__udivmoddi4+0x18a>
 8000c08:	f1ac 0202 	sub.w	r2, ip, #2
 8000c0c:	442b      	add	r3, r5
 8000c0e:	eba3 0308 	sub.w	r3, r3, r8
 8000c12:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000c16:	e791      	b.n	8000b3c <__udivmoddi4+0xb8>
 8000c18:	4661      	mov	r1, ip
 8000c1a:	e7e2      	b.n	8000be2 <__udivmoddi4+0x15e>
 8000c1c:	4662      	mov	r2, ip
 8000c1e:	e7f6      	b.n	8000c0e <__udivmoddi4+0x18a>
 8000c20:	4660      	mov	r0, ip
 8000c22:	e7a2      	b.n	8000b6a <__udivmoddi4+0xe6>
 8000c24:	4663      	mov	r3, ip
 8000c26:	e7b6      	b.n	8000b96 <__udivmoddi4+0x112>
 8000c28:	4283      	cmp	r3, r0
 8000c2a:	d905      	bls.n	8000c38 <__udivmoddi4+0x1b4>
 8000c2c:	b10e      	cbz	r6, 8000c32 <__udivmoddi4+0x1ae>
 8000c2e:	e9c6 7000 	strd	r7, r0, [r6]
 8000c32:	2100      	movs	r1, #0
 8000c34:	4608      	mov	r0, r1
 8000c36:	e776      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	b981      	cbnz	r1, 8000c60 <__udivmoddi4+0x1dc>
 8000c3e:	4283      	cmp	r3, r0
 8000c40:	d301      	bcc.n	8000c46 <__udivmoddi4+0x1c2>
 8000c42:	42ba      	cmp	r2, r7
 8000c44:	d80a      	bhi.n	8000c5c <__udivmoddi4+0x1d8>
 8000c46:	1abc      	subs	r4, r7, r2
 8000c48:	eb60 0303 	sbc.w	r3, r0, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	469c      	mov	ip, r3
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d068      	beq.n	8000d26 <__udivmoddi4+0x2a2>
 8000c54:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e764      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e7f7      	b.n	8000c50 <__udivmoddi4+0x1cc>
 8000c60:	f1c1 0c20 	rsb	ip, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f40c 	lsr.w	r4, r2, ip
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000c70:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000c74:	fbbb f8f9 	udiv	r8, fp, r9
 8000c78:	fa1f fe84 	uxth.w	lr, r4
 8000c7c:	fb09 bb18 	mls	fp, r9, r8, fp
 8000c80:	fb08 fa0e 	mul.w	sl, r8, lr
 8000c84:	fa02 f501 	lsl.w	r5, r2, r1
 8000c88:	fa00 f301 	lsl.w	r3, r0, r1
 8000c8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000c90:	4313      	orrs	r3, r2
 8000c92:	0c1a      	lsrs	r2, r3, #16
 8000c94:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000c98:	4592      	cmp	sl, r2
 8000c9a:	fa07 f701 	lsl.w	r7, r7, r1
 8000c9e:	d93e      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000ca0:	18a2      	adds	r2, r4, r2
 8000ca2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000ca6:	d204      	bcs.n	8000cb2 <__udivmoddi4+0x22e>
 8000ca8:	4592      	cmp	sl, r2
 8000caa:	d902      	bls.n	8000cb2 <__udivmoddi4+0x22e>
 8000cac:	f1a8 0002 	sub.w	r0, r8, #2
 8000cb0:	4422      	add	r2, r4
 8000cb2:	eba2 020a 	sub.w	r2, r2, sl
 8000cb6:	fbb2 f8f9 	udiv	r8, r2, r9
 8000cba:	fb09 2218 	mls	r2, r9, r8, r2
 8000cbe:	fb08 fe0e 	mul.w	lr, r8, lr
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000cc8:	4596      	cmp	lr, r2
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	18a2      	adds	r2, r4, r2
 8000cce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000cd2:	d204      	bcs.n	8000cde <__udivmoddi4+0x25a>
 8000cd4:	4596      	cmp	lr, r2
 8000cd6:	d902      	bls.n	8000cde <__udivmoddi4+0x25a>
 8000cd8:	f1a8 0302 	sub.w	r3, r8, #2
 8000cdc:	4422      	add	r2, r4
 8000cde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce2:	fba0 9305 	umull	r9, r3, r0, r5
 8000ce6:	eba2 020e 	sub.w	r2, r2, lr
 8000cea:	429a      	cmp	r2, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	4698      	mov	r8, r3
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x274>
 8000cf2:	d106      	bne.n	8000d02 <__udivmoddi4+0x27e>
 8000cf4:	454f      	cmp	r7, r9
 8000cf6:	d204      	bcs.n	8000d02 <__udivmoddi4+0x27e>
 8000cf8:	ebb9 0e05 	subs.w	lr, r9, r5
 8000cfc:	eb63 0804 	sbc.w	r8, r3, r4
 8000d00:	3801      	subs	r0, #1
 8000d02:	b186      	cbz	r6, 8000d26 <__udivmoddi4+0x2a2>
 8000d04:	ebb7 030e 	subs.w	r3, r7, lr
 8000d08:	eb62 0708 	sbc.w	r7, r2, r8
 8000d0c:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d10:	40cb      	lsrs	r3, r1
 8000d12:	ea4c 0303 	orr.w	r3, ip, r3
 8000d16:	40cf      	lsrs	r7, r1
 8000d18:	e9c6 3700 	strd	r3, r7, [r6]
 8000d1c:	e79c      	b.n	8000c58 <__udivmoddi4+0x1d4>
 8000d1e:	4640      	mov	r0, r8
 8000d20:	e7c7      	b.n	8000cb2 <__udivmoddi4+0x22e>
 8000d22:	4643      	mov	r3, r8
 8000d24:	e7db      	b.n	8000cde <__udivmoddi4+0x25a>
 8000d26:	4631      	mov	r1, r6
 8000d28:	e6fd      	b.n	8000b26 <__udivmoddi4+0xa2>

08000d2a <strcmp>:
 8000d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d32:	2a01      	cmp	r2, #1
 8000d34:	bf28      	it	cs
 8000d36:	429a      	cmpcs	r2, r3
 8000d38:	d0f7      	beq.n	8000d2a <strcmp>
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	4770      	bx	lr

08000d3e <strlen>:
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d1fb      	bne.n	8000d40 <strlen+0x2>
 8000d48:	1a18      	subs	r0, r3, r0
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	4770      	bx	lr
	...

08000d50 <_dtoa_r>:
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	4616      	mov	r6, r2
 8000d56:	461f      	mov	r7, r3
 8000d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000d5a:	b099      	sub	sp, #100	; 0x64
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000d66:	b974      	cbnz	r4, 8000d86 <_dtoa_r+0x36>
 8000d68:	2010      	movs	r0, #16
 8000d6a:	f006 fda5 	bl	80078b8 <malloc>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6268      	str	r0, [r5, #36]	; 0x24
 8000d72:	b920      	cbnz	r0, 8000d7e <_dtoa_r+0x2e>
 8000d74:	21ea      	movs	r1, #234	; 0xea
 8000d76:	4ba8      	ldr	r3, [pc, #672]	; (8001018 <_dtoa_r+0x2c8>)
 8000d78:	48a8      	ldr	r0, [pc, #672]	; (800101c <_dtoa_r+0x2cc>)
 8000d7a:	f007 fcd1 	bl	8008720 <__assert_func>
 8000d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000d82:	6004      	str	r4, [r0, #0]
 8000d84:	60c4      	str	r4, [r0, #12]
 8000d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	b151      	cbz	r1, 8000da2 <_dtoa_r+0x52>
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4093      	lsls	r3, r2
 8000d92:	604a      	str	r2, [r1, #4]
 8000d94:	608b      	str	r3, [r1, #8]
 8000d96:	4628      	mov	r0, r5
 8000d98:	f007 f9ea 	bl	8008170 <_Bfree>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	1e3b      	subs	r3, r7, #0
 8000da4:	bfaf      	iteee	ge
 8000da6:	2300      	movge	r3, #0
 8000da8:	2201      	movlt	r2, #1
 8000daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000dae:	9305      	strlt	r3, [sp, #20]
 8000db0:	bfa8      	it	ge
 8000db2:	f8c8 3000 	strge.w	r3, [r8]
 8000db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000dba:	4b99      	ldr	r3, [pc, #612]	; (8001020 <_dtoa_r+0x2d0>)
 8000dbc:	bfb8      	it	lt
 8000dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8000dc2:	ea33 0309 	bics.w	r3, r3, r9
 8000dc6:	d119      	bne.n	8000dfc <_dtoa_r+0xac>
 8000dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8000dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000dd4:	4333      	orrs	r3, r6
 8000dd6:	f000 857f 	beq.w	80018d8 <_dtoa_r+0xb88>
 8000dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ddc:	b953      	cbnz	r3, 8000df4 <_dtoa_r+0xa4>
 8000dde:	4b91      	ldr	r3, [pc, #580]	; (8001024 <_dtoa_r+0x2d4>)
 8000de0:	e022      	b.n	8000e28 <_dtoa_r+0xd8>
 8000de2:	4b91      	ldr	r3, [pc, #580]	; (8001028 <_dtoa_r+0x2d8>)
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	9803      	ldr	r0, [sp, #12]
 8000dee:	b019      	add	sp, #100	; 0x64
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <_dtoa_r+0x2d4>)
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	e7f5      	b.n	8000de8 <_dtoa_r+0x98>
 8000dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f7ff fdca 	bl	80009a4 <__aeabi_dcmpeq>
 8000e10:	4680      	mov	r8, r0
 8000e12:	b158      	cbz	r0, 8000e2c <_dtoa_r+0xdc>
 8000e14:	2301      	movs	r3, #1
 8000e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8558 	beq.w	80018d2 <_dtoa_r+0xb82>
 8000e22:	4882      	ldr	r0, [pc, #520]	; (800102c <_dtoa_r+0x2dc>)
 8000e24:	6018      	str	r0, [r3, #0]
 8000e26:	1e43      	subs	r3, r0, #1
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	e7df      	b.n	8000dec <_dtoa_r+0x9c>
 8000e2c:	ab16      	add	r3, sp, #88	; 0x58
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	ab17      	add	r3, sp, #92	; 0x5c
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4628      	mov	r0, r5
 8000e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000e3a:	f007 fc15 	bl	8008668 <__d2b>
 8000e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000e42:	4683      	mov	fp, r0
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d07f      	beq.n	8000f48 <_dtoa_r+0x1f8>
 8000e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000e62:	2200      	movs	r2, #0
 8000e64:	4b72      	ldr	r3, [pc, #456]	; (8001030 <_dtoa_r+0x2e0>)
 8000e66:	f7ff f963 	bl	8000130 <__aeabi_dsub>
 8000e6a:	a365      	add	r3, pc, #404	; (adr r3, 8001000 <_dtoa_r+0x2b0>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb16 	bl	80004a0 <__aeabi_dmul>
 8000e74:	a364      	add	r3, pc, #400	; (adr r3, 8001008 <_dtoa_r+0x2b8>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff f95b 	bl	8000134 <__adddf3>
 8000e7e:	4606      	mov	r6, r0
 8000e80:	4620      	mov	r0, r4
 8000e82:	460f      	mov	r7, r1
 8000e84:	f7ff faa2 	bl	80003cc <__aeabi_i2d>
 8000e88:	a361      	add	r3, pc, #388	; (adr r3, 8001010 <_dtoa_r+0x2c0>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb07 	bl	80004a0 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4630      	mov	r0, r6
 8000e98:	4639      	mov	r1, r7
 8000e9a:	f7ff f94b 	bl	8000134 <__adddf3>
 8000e9e:	4606      	mov	r6, r0
 8000ea0:	460f      	mov	r7, r1
 8000ea2:	f7ff fdc7 	bl	8000a34 <__aeabi_d2iz>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4682      	mov	sl, r0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4630      	mov	r0, r6
 8000eae:	4639      	mov	r1, r7
 8000eb0:	f7ff fd82 	bl	80009b8 <__aeabi_dcmplt>
 8000eb4:	b148      	cbz	r0, 8000eca <_dtoa_r+0x17a>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	f7ff fa88 	bl	80003cc <__aeabi_i2d>
 8000ebc:	4632      	mov	r2, r6
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	f7ff fd70 	bl	80009a4 <__aeabi_dcmpeq>
 8000ec4:	b908      	cbnz	r0, 8000eca <_dtoa_r+0x17a>
 8000ec6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eca:	f1ba 0f16 	cmp.w	sl, #22
 8000ece:	d858      	bhi.n	8000f82 <_dtoa_r+0x232>
 8000ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <_dtoa_r+0x2e4>)
 8000ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fd6b 	bl	80009b8 <__aeabi_dcmplt>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d04f      	beq.n	8000f86 <_dtoa_r+0x236>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000ef0:	1b1c      	subs	r4, r3, r4
 8000ef2:	1e63      	subs	r3, r4, #1
 8000ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef6:	bf49      	itett	mi
 8000ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8000efc:	2300      	movpl	r3, #0
 8000efe:	9306      	strmi	r3, [sp, #24]
 8000f00:	2300      	movmi	r3, #0
 8000f02:	bf54      	ite	pl
 8000f04:	9306      	strpl	r3, [sp, #24]
 8000f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8000f08:	f1ba 0f00 	cmp.w	sl, #0
 8000f0c:	db3d      	blt.n	8000f8a <_dtoa_r+0x23a>
 8000f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8000f14:	4453      	add	r3, sl
 8000f16:	9309      	str	r3, [sp, #36]	; 0x24
 8000f18:	2300      	movs	r3, #0
 8000f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8000f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	f200 808c 	bhi.w	800103c <_dtoa_r+0x2ec>
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	bfc4      	itt	gt
 8000f28:	3b04      	subgt	r3, #4
 8000f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8000f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f2e:	bfc8      	it	gt
 8000f30:	2400      	movgt	r4, #0
 8000f32:	f1a3 0302 	sub.w	r3, r3, #2
 8000f36:	bfd8      	it	le
 8000f38:	2401      	movle	r4, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	f200 808a 	bhi.w	8001054 <_dtoa_r+0x304>
 8000f40:	e8df f003 	tbb	[pc, r3]
 8000f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8000f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8000f4c:	441c      	add	r4, r3
 8000f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	bfc3      	ittte	gt
 8000f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8000f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8000f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8000f62:	f1c3 0320 	rsble	r3, r3, #32
 8000f66:	bfc6      	itte	gt
 8000f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8000f6c:	4318      	orrgt	r0, r3
 8000f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8000f72:	f7ff fa1b 	bl	80003ac <__aeabi_ui2d>
 8000f76:	2301      	movs	r3, #1
 8000f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8000f7c:	3c01      	subs	r4, #1
 8000f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f80:	e76f      	b.n	8000e62 <_dtoa_r+0x112>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e7b2      	b.n	8000eec <_dtoa_r+0x19c>
 8000f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8000f88:	e7b1      	b.n	8000eee <_dtoa_r+0x19e>
 8000f8a:	9b06      	ldr	r3, [sp, #24]
 8000f8c:	eba3 030a 	sub.w	r3, r3, sl
 8000f90:	9306      	str	r3, [sp, #24]
 8000f92:	f1ca 0300 	rsb	r3, sl, #0
 8000f96:	930a      	str	r3, [sp, #40]	; 0x28
 8000f98:	2300      	movs	r3, #0
 8000f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f9c:	e7be      	b.n	8000f1c <_dtoa_r+0x1cc>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc58      	bgt.n	800105a <_dtoa_r+0x30a>
 8000fa8:	f04f 0901 	mov.w	r9, #1
 8000fac:	464b      	mov	r3, r9
 8000fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8000fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000fba:	6042      	str	r2, [r0, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f102 0614 	add.w	r6, r2, #20
 8000fc2:	429e      	cmp	r6, r3
 8000fc4:	6841      	ldr	r1, [r0, #4]
 8000fc6:	d94e      	bls.n	8001066 <_dtoa_r+0x316>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f007 f891 	bl	80080f0 <_Balloc>
 8000fce:	9003      	str	r0, [sp, #12]
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d14c      	bne.n	800106e <_dtoa_r+0x31e>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <_dtoa_r+0x2e8>)
 8000fdc:	e6cc      	b.n	8000d78 <_dtoa_r+0x28>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e7de      	b.n	8000fa0 <_dtoa_r+0x250>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fe8:	eb0a 0903 	add.w	r9, sl, r3
 8000fec:	f109 0301 	add.w	r3, r9, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	9308      	str	r3, [sp, #32]
 8000ff4:	bfb8      	it	lt
 8000ff6:	2301      	movlt	r3, #1
 8000ff8:	e7dd      	b.n	8000fb6 <_dtoa_r+0x266>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e7f2      	b.n	8000fe4 <_dtoa_r+0x294>
 8000ffe:	bf00      	nop
 8001000:	636f4361 	.word	0x636f4361
 8001004:	3fd287a7 	.word	0x3fd287a7
 8001008:	8b60c8b3 	.word	0x8b60c8b3
 800100c:	3fc68a28 	.word	0x3fc68a28
 8001010:	509f79fb 	.word	0x509f79fb
 8001014:	3fd34413 	.word	0x3fd34413
 8001018:	0800c31a 	.word	0x0800c31a
 800101c:	0800c331 	.word	0x0800c331
 8001020:	7ff00000 	.word	0x7ff00000
 8001024:	0800c316 	.word	0x0800c316
 8001028:	0800c30d 	.word	0x0800c30d
 800102c:	0800c2ea 	.word	0x0800c2ea
 8001030:	3ff80000 	.word	0x3ff80000
 8001034:	0800bc30 	.word	0x0800bc30
 8001038:	0800c38b 	.word	0x0800c38b
 800103c:	2401      	movs	r4, #1
 800103e:	2300      	movs	r3, #0
 8001040:	940b      	str	r4, [sp, #44]	; 0x2c
 8001042:	9322      	str	r3, [sp, #136]	; 0x88
 8001044:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	2312      	movs	r3, #18
 800104c:	f8cd 9020 	str.w	r9, [sp, #32]
 8001050:	9223      	str	r2, [sp, #140]	; 0x8c
 8001052:	e7b0      	b.n	8000fb6 <_dtoa_r+0x266>
 8001054:	2301      	movs	r3, #1
 8001056:	930b      	str	r3, [sp, #44]	; 0x2c
 8001058:	e7f4      	b.n	8001044 <_dtoa_r+0x2f4>
 800105a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800105e:	464b      	mov	r3, r9
 8001060:	f8cd 9020 	str.w	r9, [sp, #32]
 8001064:	e7a7      	b.n	8000fb6 <_dtoa_r+0x266>
 8001066:	3101      	adds	r1, #1
 8001068:	6041      	str	r1, [r0, #4]
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	e7a7      	b.n	8000fbe <_dtoa_r+0x26e>
 800106e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	9b08      	ldr	r3, [sp, #32]
 8001076:	2b0e      	cmp	r3, #14
 8001078:	f200 80a8 	bhi.w	80011cc <_dtoa_r+0x47c>
 800107c:	2c00      	cmp	r4, #0
 800107e:	f000 80a5 	beq.w	80011cc <_dtoa_r+0x47c>
 8001082:	f1ba 0f00 	cmp.w	sl, #0
 8001086:	dd34      	ble.n	80010f2 <_dtoa_r+0x3a2>
 8001088:	4a9a      	ldr	r2, [pc, #616]	; (80012f4 <_dtoa_r+0x5a4>)
 800108a:	f00a 030f 	and.w	r3, sl, #15
 800108e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800109a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800109e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80010a2:	d016      	beq.n	80010d2 <_dtoa_r+0x382>
 80010a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010a8:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <_dtoa_r+0x5a8>)
 80010aa:	2703      	movs	r7, #3
 80010ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010b0:	f7ff fb20 	bl	80006f4 <__aeabi_ddiv>
 80010b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010b8:	f004 040f 	and.w	r4, r4, #15
 80010bc:	4e8e      	ldr	r6, [pc, #568]	; (80012f8 <_dtoa_r+0x5a8>)
 80010be:	b954      	cbnz	r4, 80010d6 <_dtoa_r+0x386>
 80010c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80010c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80010c8:	f7ff fb14 	bl	80006f4 <__aeabi_ddiv>
 80010cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010d0:	e029      	b.n	8001126 <_dtoa_r+0x3d6>
 80010d2:	2702      	movs	r7, #2
 80010d4:	e7f2      	b.n	80010bc <_dtoa_r+0x36c>
 80010d6:	07e1      	lsls	r1, r4, #31
 80010d8:	d508      	bpl.n	80010ec <_dtoa_r+0x39c>
 80010da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80010de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80010e2:	f7ff f9dd 	bl	80004a0 <__aeabi_dmul>
 80010e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010ea:	3701      	adds	r7, #1
 80010ec:	1064      	asrs	r4, r4, #1
 80010ee:	3608      	adds	r6, #8
 80010f0:	e7e5      	b.n	80010be <_dtoa_r+0x36e>
 80010f2:	f000 80a5 	beq.w	8001240 <_dtoa_r+0x4f0>
 80010f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010fa:	f1ca 0400 	rsb	r4, sl, #0
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <_dtoa_r+0x5a4>)
 8001100:	f004 020f 	and.w	r2, r4, #15
 8001104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f9c8 	bl	80004a0 <__aeabi_dmul>
 8001110:	2702      	movs	r7, #2
 8001112:	2300      	movs	r3, #0
 8001114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001118:	4e77      	ldr	r6, [pc, #476]	; (80012f8 <_dtoa_r+0x5a8>)
 800111a:	1124      	asrs	r4, r4, #4
 800111c:	2c00      	cmp	r4, #0
 800111e:	f040 8084 	bne.w	800122a <_dtoa_r+0x4da>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1d2      	bne.n	80010cc <_dtoa_r+0x37c>
 8001126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 808b 	beq.w	8001244 <_dtoa_r+0x4f4>
 800112e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <_dtoa_r+0x5ac>)
 800113e:	f7ff fc3b 	bl	80009b8 <__aeabi_dcmplt>
 8001142:	2800      	cmp	r0, #0
 8001144:	d07e      	beq.n	8001244 <_dtoa_r+0x4f4>
 8001146:	9b08      	ldr	r3, [sp, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d07b      	beq.n	8001244 <_dtoa_r+0x4f4>
 800114c:	f1b9 0f00 	cmp.w	r9, #0
 8001150:	dd38      	ble.n	80011c4 <_dtoa_r+0x474>
 8001152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	4b69      	ldr	r3, [pc, #420]	; (8001300 <_dtoa_r+0x5b0>)
 800115a:	f7ff f9a1 	bl	80004a0 <__aeabi_dmul>
 800115e:	464c      	mov	r4, r9
 8001160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001164:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8001168:	3701      	adds	r7, #1
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff f92e 	bl	80003cc <__aeabi_i2d>
 8001170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001174:	f7ff f994 	bl	80004a0 <__aeabi_dmul>
 8001178:	2200      	movs	r2, #0
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <_dtoa_r+0x5b4>)
 800117c:	f7fe ffda 	bl	8000134 <__adddf3>
 8001180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8001184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001188:	9611      	str	r6, [sp, #68]	; 0x44
 800118a:	2c00      	cmp	r4, #0
 800118c:	d15d      	bne.n	800124a <_dtoa_r+0x4fa>
 800118e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001192:	2200      	movs	r2, #0
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <_dtoa_r+0x5b8>)
 8001196:	f7fe ffcb 	bl	8000130 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011a2:	4633      	mov	r3, r6
 80011a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011a6:	f7ff fc25 	bl	80009f4 <__aeabi_dcmpgt>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 829c 	bne.w	80016e8 <_dtoa_r+0x998>
 80011b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80011ba:	f7ff fbfd 	bl	80009b8 <__aeabi_dcmplt>
 80011be:	2800      	cmp	r0, #0
 80011c0:	f040 8290 	bne.w	80016e4 <_dtoa_r+0x994>
 80011c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80011c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80011cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f2c0 8152 	blt.w	8001478 <_dtoa_r+0x728>
 80011d4:	f1ba 0f0e 	cmp.w	sl, #14
 80011d8:	f300 814e 	bgt.w	8001478 <_dtoa_r+0x728>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <_dtoa_r+0x5a4>)
 80011de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80011e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80011ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f280 80db 	bge.w	80013a8 <_dtoa_r+0x658>
 80011f2:	9b08      	ldr	r3, [sp, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f300 80d7 	bgt.w	80013a8 <_dtoa_r+0x658>
 80011fa:	f040 8272 	bne.w	80016e2 <_dtoa_r+0x992>
 80011fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001202:	2200      	movs	r2, #0
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <_dtoa_r+0x5b8>)
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_dmul>
 800120a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800120e:	f7ff fbe7 	bl	80009e0 <__aeabi_dcmpge>
 8001212:	9c08      	ldr	r4, [sp, #32]
 8001214:	4626      	mov	r6, r4
 8001216:	2800      	cmp	r0, #0
 8001218:	f040 8248 	bne.w	80016ac <_dtoa_r+0x95c>
 800121c:	2331      	movs	r3, #49	; 0x31
 800121e:	9f03      	ldr	r7, [sp, #12]
 8001220:	f10a 0a01 	add.w	sl, sl, #1
 8001224:	f807 3b01 	strb.w	r3, [r7], #1
 8001228:	e244      	b.n	80016b4 <_dtoa_r+0x964>
 800122a:	07e2      	lsls	r2, r4, #31
 800122c:	d505      	bpl.n	800123a <_dtoa_r+0x4ea>
 800122e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001232:	f7ff f935 	bl	80004a0 <__aeabi_dmul>
 8001236:	2301      	movs	r3, #1
 8001238:	3701      	adds	r7, #1
 800123a:	1064      	asrs	r4, r4, #1
 800123c:	3608      	adds	r6, #8
 800123e:	e76d      	b.n	800111c <_dtoa_r+0x3cc>
 8001240:	2702      	movs	r7, #2
 8001242:	e770      	b.n	8001126 <_dtoa_r+0x3d6>
 8001244:	46d0      	mov	r8, sl
 8001246:	9c08      	ldr	r4, [sp, #32]
 8001248:	e78f      	b.n	800116a <_dtoa_r+0x41a>
 800124a:	9903      	ldr	r1, [sp, #12]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <_dtoa_r+0x5a4>)
 800124e:	4421      	add	r1, r4
 8001250:	9112      	str	r1, [sp, #72]	; 0x48
 8001252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800125c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001260:	2900      	cmp	r1, #0
 8001262:	d055      	beq.n	8001310 <_dtoa_r+0x5c0>
 8001264:	2000      	movs	r0, #0
 8001266:	4929      	ldr	r1, [pc, #164]	; (800130c <_dtoa_r+0x5bc>)
 8001268:	f7ff fa44 	bl	80006f4 <__aeabi_ddiv>
 800126c:	463b      	mov	r3, r7
 800126e:	4632      	mov	r2, r6
 8001270:	f7fe ff5e 	bl	8000130 <__aeabi_dsub>
 8001274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001278:	9f03      	ldr	r7, [sp, #12]
 800127a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800127e:	f7ff fbd9 	bl	8000a34 <__aeabi_d2iz>
 8001282:	4604      	mov	r4, r0
 8001284:	f7ff f8a2 	bl	80003cc <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001290:	f7fe ff4e 	bl	8000130 <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	3430      	adds	r4, #48	; 0x30
 800129a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800129e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012a2:	f807 4b01 	strb.w	r4, [r7], #1
 80012a6:	f7ff fb87 	bl	80009b8 <__aeabi_dcmplt>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d174      	bne.n	8001398 <_dtoa_r+0x648>
 80012ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80012b2:	2000      	movs	r0, #0
 80012b4:	4911      	ldr	r1, [pc, #68]	; (80012fc <_dtoa_r+0x5ac>)
 80012b6:	f7fe ff3b 	bl	8000130 <__aeabi_dsub>
 80012ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012be:	f7ff fb7b 	bl	80009b8 <__aeabi_dcmplt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 80b7 	bne.w	8001436 <_dtoa_r+0x6e6>
 80012c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80012ca:	429f      	cmp	r7, r3
 80012cc:	f43f af7a 	beq.w	80011c4 <_dtoa_r+0x474>
 80012d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <_dtoa_r+0x5b0>)
 80012d8:	f7ff f8e2 	bl	80004a0 <__aeabi_dmul>
 80012dc:	2200      	movs	r2, #0
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <_dtoa_r+0x5b0>)
 80012e8:	f7ff f8da 	bl	80004a0 <__aeabi_dmul>
 80012ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012f0:	e7c3      	b.n	800127a <_dtoa_r+0x52a>
 80012f2:	bf00      	nop
 80012f4:	0800bc30 	.word	0x0800bc30
 80012f8:	0800bc08 	.word	0x0800bc08
 80012fc:	3ff00000 	.word	0x3ff00000
 8001300:	40240000 	.word	0x40240000
 8001304:	401c0000 	.word	0x401c0000
 8001308:	40140000 	.word	0x40140000
 800130c:	3fe00000 	.word	0x3fe00000
 8001310:	4630      	mov	r0, r6
 8001312:	4639      	mov	r1, r7
 8001314:	f7ff f8c4 	bl	80004a0 <__aeabi_dmul>
 8001318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800131a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800131e:	9c03      	ldr	r4, [sp, #12]
 8001320:	9314      	str	r3, [sp, #80]	; 0x50
 8001322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001326:	f7ff fb85 	bl	8000a34 <__aeabi_d2iz>
 800132a:	9015      	str	r0, [sp, #84]	; 0x54
 800132c:	f7ff f84e 	bl	80003cc <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001338:	f7fe fefa 	bl	8000130 <__aeabi_dsub>
 800133c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800133e:	4606      	mov	r6, r0
 8001340:	3330      	adds	r3, #48	; 0x30
 8001342:	f804 3b01 	strb.w	r3, [r4], #1
 8001346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001348:	460f      	mov	r7, r1
 800134a:	429c      	cmp	r4, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	d124      	bne.n	800139c <_dtoa_r+0x64c>
 8001352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001356:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <_dtoa_r+0x8c8>)
 8001358:	f7fe feec 	bl	8000134 <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4630      	mov	r0, r6
 8001362:	4639      	mov	r1, r7
 8001364:	f7ff fb46 	bl	80009f4 <__aeabi_dcmpgt>
 8001368:	2800      	cmp	r0, #0
 800136a:	d163      	bne.n	8001434 <_dtoa_r+0x6e4>
 800136c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001370:	2000      	movs	r0, #0
 8001372:	49a9      	ldr	r1, [pc, #676]	; (8001618 <_dtoa_r+0x8c8>)
 8001374:	f7fe fedc 	bl	8000130 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4630      	mov	r0, r6
 800137e:	4639      	mov	r1, r7
 8001380:	f7ff fb1a 	bl	80009b8 <__aeabi_dcmplt>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af1d 	beq.w	80011c4 <_dtoa_r+0x474>
 800138a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800138c:	1e7b      	subs	r3, r7, #1
 800138e:	9314      	str	r3, [sp, #80]	; 0x50
 8001390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8001394:	2b30      	cmp	r3, #48	; 0x30
 8001396:	d0f8      	beq.n	800138a <_dtoa_r+0x63a>
 8001398:	46c2      	mov	sl, r8
 800139a:	e03b      	b.n	8001414 <_dtoa_r+0x6c4>
 800139c:	4b9f      	ldr	r3, [pc, #636]	; (800161c <_dtoa_r+0x8cc>)
 800139e:	f7ff f87f 	bl	80004a0 <__aeabi_dmul>
 80013a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013a6:	e7bc      	b.n	8001322 <_dtoa_r+0x5d2>
 80013a8:	9f03      	ldr	r7, [sp, #12]
 80013aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80013ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013b2:	4640      	mov	r0, r8
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7ff f99d 	bl	80006f4 <__aeabi_ddiv>
 80013ba:	f7ff fb3b 	bl	8000a34 <__aeabi_d2iz>
 80013be:	4604      	mov	r4, r0
 80013c0:	f7ff f804 	bl	80003cc <__aeabi_i2d>
 80013c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe feac 	bl	8000130 <__aeabi_dsub>
 80013d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80013dc:	f807 6b01 	strb.w	r6, [r7], #1
 80013e0:	9e03      	ldr	r6, [sp, #12]
 80013e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80013e6:	1bbe      	subs	r6, r7, r6
 80013e8:	45b4      	cmp	ip, r6
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	d136      	bne.n	800145e <_dtoa_r+0x70e>
 80013f0:	f7fe fea0 	bl	8000134 <__adddf3>
 80013f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
 80013fc:	f7ff fafa 	bl	80009f4 <__aeabi_dcmpgt>
 8001400:	bb58      	cbnz	r0, 800145a <_dtoa_r+0x70a>
 8001402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001406:	4640      	mov	r0, r8
 8001408:	4649      	mov	r1, r9
 800140a:	f7ff facb 	bl	80009a4 <__aeabi_dcmpeq>
 800140e:	b108      	cbz	r0, 8001414 <_dtoa_r+0x6c4>
 8001410:	07e1      	lsls	r1, r4, #31
 8001412:	d422      	bmi.n	800145a <_dtoa_r+0x70a>
 8001414:	4628      	mov	r0, r5
 8001416:	4659      	mov	r1, fp
 8001418:	f006 feaa 	bl	8008170 <_Bfree>
 800141c:	2300      	movs	r3, #0
 800141e:	703b      	strb	r3, [r7, #0]
 8001420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001422:	f10a 0001 	add.w	r0, sl, #1
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800142a:	2b00      	cmp	r3, #0
 800142c:	f43f acde 	beq.w	8000dec <_dtoa_r+0x9c>
 8001430:	601f      	str	r7, [r3, #0]
 8001432:	e4db      	b.n	8000dec <_dtoa_r+0x9c>
 8001434:	4627      	mov	r7, r4
 8001436:	463b      	mov	r3, r7
 8001438:	461f      	mov	r7, r3
 800143a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800143e:	2a39      	cmp	r2, #57	; 0x39
 8001440:	d107      	bne.n	8001452 <_dtoa_r+0x702>
 8001442:	9a03      	ldr	r2, [sp, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d1f7      	bne.n	8001438 <_dtoa_r+0x6e8>
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	9903      	ldr	r1, [sp, #12]
 800144c:	f108 0801 	add.w	r8, r8, #1
 8001450:	700a      	strb	r2, [r1, #0]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	3201      	adds	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e79e      	b.n	8001398 <_dtoa_r+0x648>
 800145a:	46d0      	mov	r8, sl
 800145c:	e7eb      	b.n	8001436 <_dtoa_r+0x6e6>
 800145e:	2200      	movs	r2, #0
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <_dtoa_r+0x8cc>)
 8001462:	f7ff f81d 	bl	80004a0 <__aeabi_dmul>
 8001466:	2200      	movs	r2, #0
 8001468:	2300      	movs	r3, #0
 800146a:	4680      	mov	r8, r0
 800146c:	4689      	mov	r9, r1
 800146e:	f7ff fa99 	bl	80009a4 <__aeabi_dcmpeq>
 8001472:	2800      	cmp	r0, #0
 8001474:	d09b      	beq.n	80013ae <_dtoa_r+0x65e>
 8001476:	e7cd      	b.n	8001414 <_dtoa_r+0x6c4>
 8001478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800147a:	2a00      	cmp	r2, #0
 800147c:	f000 80d0 	beq.w	8001620 <_dtoa_r+0x8d0>
 8001480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001482:	2a01      	cmp	r2, #1
 8001484:	f300 80ae 	bgt.w	80015e4 <_dtoa_r+0x894>
 8001488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800148a:	2a00      	cmp	r2, #0
 800148c:	f000 80a6 	beq.w	80015dc <_dtoa_r+0x88c>
 8001490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001496:	9f06      	ldr	r7, [sp, #24]
 8001498:	9a06      	ldr	r2, [sp, #24]
 800149a:	2101      	movs	r1, #1
 800149c:	441a      	add	r2, r3
 800149e:	9206      	str	r2, [sp, #24]
 80014a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014a2:	4628      	mov	r0, r5
 80014a4:	441a      	add	r2, r3
 80014a6:	9209      	str	r2, [sp, #36]	; 0x24
 80014a8:	f006 feca 	bl	8008240 <__i2b>
 80014ac:	4606      	mov	r6, r0
 80014ae:	2f00      	cmp	r7, #0
 80014b0:	dd0c      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd09      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b8:	42bb      	cmp	r3, r7
 80014ba:	bfa8      	it	ge
 80014bc:	463b      	movge	r3, r7
 80014be:	9a06      	ldr	r2, [sp, #24]
 80014c0:	1aff      	subs	r7, r7, r3
 80014c2:	1ad2      	subs	r2, r2, r3
 80014c4:	9206      	str	r2, [sp, #24]
 80014c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ce:	b1f3      	cbz	r3, 800150e <_dtoa_r+0x7be>
 80014d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a8 	beq.w	8001628 <_dtoa_r+0x8d8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	dd10      	ble.n	80014fe <_dtoa_r+0x7ae>
 80014dc:	4631      	mov	r1, r6
 80014de:	4622      	mov	r2, r4
 80014e0:	4628      	mov	r0, r5
 80014e2:	f006 ff6b 	bl	80083bc <__pow5mult>
 80014e6:	465a      	mov	r2, fp
 80014e8:	4601      	mov	r1, r0
 80014ea:	4606      	mov	r6, r0
 80014ec:	4628      	mov	r0, r5
 80014ee:	f006 febd 	bl	800826c <__multiply>
 80014f2:	4680      	mov	r8, r0
 80014f4:	4659      	mov	r1, fp
 80014f6:	4628      	mov	r0, r5
 80014f8:	f006 fe3a 	bl	8008170 <_Bfree>
 80014fc:	46c3      	mov	fp, r8
 80014fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001500:	1b1a      	subs	r2, r3, r4
 8001502:	d004      	beq.n	800150e <_dtoa_r+0x7be>
 8001504:	4659      	mov	r1, fp
 8001506:	4628      	mov	r0, r5
 8001508:	f006 ff58 	bl	80083bc <__pow5mult>
 800150c:	4683      	mov	fp, r0
 800150e:	2101      	movs	r1, #1
 8001510:	4628      	mov	r0, r5
 8001512:	f006 fe95 	bl	8008240 <__i2b>
 8001516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001518:	4604      	mov	r4, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f340 8086 	ble.w	800162c <_dtoa_r+0x8dc>
 8001520:	461a      	mov	r2, r3
 8001522:	4601      	mov	r1, r0
 8001524:	4628      	mov	r0, r5
 8001526:	f006 ff49 	bl	80083bc <__pow5mult>
 800152a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800152c:	4604      	mov	r4, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	dd7f      	ble.n	8001632 <_dtoa_r+0x8e2>
 8001532:	f04f 0800 	mov.w	r8, #0
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800153c:	6918      	ldr	r0, [r3, #16]
 800153e:	f009 ffc3 	bl	800b4c8 <__hi0bits>
 8001542:	f1c0 0020 	rsb	r0, r0, #32
 8001546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001548:	4418      	add	r0, r3
 800154a:	f010 001f 	ands.w	r0, r0, #31
 800154e:	f000 8092 	beq.w	8001676 <_dtoa_r+0x926>
 8001552:	f1c0 0320 	rsb	r3, r0, #32
 8001556:	2b04      	cmp	r3, #4
 8001558:	f340 808a 	ble.w	8001670 <_dtoa_r+0x920>
 800155c:	f1c0 001c 	rsb	r0, r0, #28
 8001560:	9b06      	ldr	r3, [sp, #24]
 8001562:	4407      	add	r7, r0
 8001564:	4403      	add	r3, r0
 8001566:	9306      	str	r3, [sp, #24]
 8001568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800156a:	4403      	add	r3, r0
 800156c:	9309      	str	r3, [sp, #36]	; 0x24
 800156e:	9b06      	ldr	r3, [sp, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd05      	ble.n	8001580 <_dtoa_r+0x830>
 8001574:	4659      	mov	r1, fp
 8001576:	461a      	mov	r2, r3
 8001578:	4628      	mov	r0, r5
 800157a:	f006 ff79 	bl	8008470 <__lshift>
 800157e:	4683      	mov	fp, r0
 8001580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	dd05      	ble.n	8001592 <_dtoa_r+0x842>
 8001586:	4621      	mov	r1, r4
 8001588:	461a      	mov	r2, r3
 800158a:	4628      	mov	r0, r5
 800158c:	f006 ff70 	bl	8008470 <__lshift>
 8001590:	4604      	mov	r4, r0
 8001592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d070      	beq.n	800167a <_dtoa_r+0x92a>
 8001598:	4621      	mov	r1, r4
 800159a:	4658      	mov	r0, fp
 800159c:	f009 ffe1 	bl	800b562 <__mcmp>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	da6a      	bge.n	800167a <_dtoa_r+0x92a>
 80015a4:	2300      	movs	r3, #0
 80015a6:	4659      	mov	r1, fp
 80015a8:	220a      	movs	r2, #10
 80015aa:	4628      	mov	r0, r5
 80015ac:	f006 fe02 	bl	80081b4 <__multadd>
 80015b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015b2:	4683      	mov	fp, r0
 80015b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8194 	beq.w	80018e6 <_dtoa_r+0xb96>
 80015be:	4631      	mov	r1, r6
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	4628      	mov	r0, r5
 80015c6:	f006 fdf5 	bl	80081b4 <__multadd>
 80015ca:	f1b9 0f00 	cmp.w	r9, #0
 80015ce:	4606      	mov	r6, r0
 80015d0:	f300 8093 	bgt.w	80016fa <_dtoa_r+0x9aa>
 80015d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	dc57      	bgt.n	800168a <_dtoa_r+0x93a>
 80015da:	e08e      	b.n	80016fa <_dtoa_r+0x9aa>
 80015dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80015de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80015e2:	e757      	b.n	8001494 <_dtoa_r+0x744>
 80015e4:	9b08      	ldr	r3, [sp, #32]
 80015e6:	1e5c      	subs	r4, r3, #1
 80015e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	bfb7      	itett	lt
 80015ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80015f0:	1b1c      	subge	r4, r3, r4
 80015f2:	1ae2      	sublt	r2, r4, r3
 80015f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80015f6:	bfbe      	ittt	lt
 80015f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80015fa:	189b      	addlt	r3, r3, r2
 80015fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80015fe:	9b08      	ldr	r3, [sp, #32]
 8001600:	bfb8      	it	lt
 8001602:	2400      	movlt	r4, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bfbb      	ittet	lt
 8001608:	9b06      	ldrlt	r3, [sp, #24]
 800160a:	9a08      	ldrlt	r2, [sp, #32]
 800160c:	9f06      	ldrge	r7, [sp, #24]
 800160e:	1a9f      	sublt	r7, r3, r2
 8001610:	bfac      	ite	ge
 8001612:	9b08      	ldrge	r3, [sp, #32]
 8001614:	2300      	movlt	r3, #0
 8001616:	e73f      	b.n	8001498 <_dtoa_r+0x748>
 8001618:	3fe00000 	.word	0x3fe00000
 800161c:	40240000 	.word	0x40240000
 8001620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001622:	9f06      	ldr	r7, [sp, #24]
 8001624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001626:	e742      	b.n	80014ae <_dtoa_r+0x75e>
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	e76b      	b.n	8001504 <_dtoa_r+0x7b4>
 800162c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800162e:	2b01      	cmp	r3, #1
 8001630:	dc19      	bgt.n	8001666 <_dtoa_r+0x916>
 8001632:	9b04      	ldr	r3, [sp, #16]
 8001634:	b9bb      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 8001636:	9b05      	ldr	r3, [sp, #20]
 8001638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800163c:	b99b      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 800163e:	9b05      	ldr	r3, [sp, #20]
 8001640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001644:	0d1b      	lsrs	r3, r3, #20
 8001646:	051b      	lsls	r3, r3, #20
 8001648:	b183      	cbz	r3, 800166c <_dtoa_r+0x91c>
 800164a:	f04f 0801 	mov.w	r8, #1
 800164e:	9b06      	ldr	r3, [sp, #24]
 8001650:	3301      	adds	r3, #1
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
 800165a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af6a 	bne.w	8001536 <_dtoa_r+0x7e6>
 8001662:	2001      	movs	r0, #1
 8001664:	e76f      	b.n	8001546 <_dtoa_r+0x7f6>
 8001666:	f04f 0800 	mov.w	r8, #0
 800166a:	e7f6      	b.n	800165a <_dtoa_r+0x90a>
 800166c:	4698      	mov	r8, r3
 800166e:	e7f4      	b.n	800165a <_dtoa_r+0x90a>
 8001670:	f43f af7d 	beq.w	800156e <_dtoa_r+0x81e>
 8001674:	4618      	mov	r0, r3
 8001676:	301c      	adds	r0, #28
 8001678:	e772      	b.n	8001560 <_dtoa_r+0x810>
 800167a:	9b08      	ldr	r3, [sp, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc36      	bgt.n	80016ee <_dtoa_r+0x99e>
 8001680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001682:	2b02      	cmp	r3, #2
 8001684:	dd33      	ble.n	80016ee <_dtoa_r+0x99e>
 8001686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800168a:	f1b9 0f00 	cmp.w	r9, #0
 800168e:	d10d      	bne.n	80016ac <_dtoa_r+0x95c>
 8001690:	4621      	mov	r1, r4
 8001692:	464b      	mov	r3, r9
 8001694:	2205      	movs	r2, #5
 8001696:	4628      	mov	r0, r5
 8001698:	f006 fd8c 	bl	80081b4 <__multadd>
 800169c:	4601      	mov	r1, r0
 800169e:	4604      	mov	r4, r0
 80016a0:	4658      	mov	r0, fp
 80016a2:	f009 ff5e 	bl	800b562 <__mcmp>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	f73f adb8 	bgt.w	800121c <_dtoa_r+0x4cc>
 80016ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80016ae:	9f03      	ldr	r7, [sp, #12]
 80016b0:	ea6f 0a03 	mvn.w	sl, r3
 80016b4:	f04f 0800 	mov.w	r8, #0
 80016b8:	4621      	mov	r1, r4
 80016ba:	4628      	mov	r0, r5
 80016bc:	f006 fd58 	bl	8008170 <_Bfree>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	f43f aea7 	beq.w	8001414 <_dtoa_r+0x6c4>
 80016c6:	f1b8 0f00 	cmp.w	r8, #0
 80016ca:	d005      	beq.n	80016d8 <_dtoa_r+0x988>
 80016cc:	45b0      	cmp	r8, r6
 80016ce:	d003      	beq.n	80016d8 <_dtoa_r+0x988>
 80016d0:	4641      	mov	r1, r8
 80016d2:	4628      	mov	r0, r5
 80016d4:	f006 fd4c 	bl	8008170 <_Bfree>
 80016d8:	4631      	mov	r1, r6
 80016da:	4628      	mov	r0, r5
 80016dc:	f006 fd48 	bl	8008170 <_Bfree>
 80016e0:	e698      	b.n	8001414 <_dtoa_r+0x6c4>
 80016e2:	2400      	movs	r4, #0
 80016e4:	4626      	mov	r6, r4
 80016e6:	e7e1      	b.n	80016ac <_dtoa_r+0x95c>
 80016e8:	46c2      	mov	sl, r8
 80016ea:	4626      	mov	r6, r4
 80016ec:	e596      	b.n	800121c <_dtoa_r+0x4cc>
 80016ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80fd 	beq.w	80018f4 <_dtoa_r+0xba4>
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	dd05      	ble.n	800170a <_dtoa_r+0x9ba>
 80016fe:	4631      	mov	r1, r6
 8001700:	463a      	mov	r2, r7
 8001702:	4628      	mov	r0, r5
 8001704:	f006 feb4 	bl	8008470 <__lshift>
 8001708:	4606      	mov	r6, r0
 800170a:	f1b8 0f00 	cmp.w	r8, #0
 800170e:	d05c      	beq.n	80017ca <_dtoa_r+0xa7a>
 8001710:	4628      	mov	r0, r5
 8001712:	6871      	ldr	r1, [r6, #4]
 8001714:	f006 fcec 	bl	80080f0 <_Balloc>
 8001718:	4607      	mov	r7, r0
 800171a:	b928      	cbnz	r0, 8001728 <_dtoa_r+0x9d8>
 800171c:	4602      	mov	r2, r0
 800171e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <_dtoa_r+0xbd0>)
 8001724:	f7ff bb28 	b.w	8000d78 <_dtoa_r+0x28>
 8001728:	6932      	ldr	r2, [r6, #16]
 800172a:	f106 010c 	add.w	r1, r6, #12
 800172e:	3202      	adds	r2, #2
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	300c      	adds	r0, #12
 8001734:	f009 fd00 	bl	800b138 <memcpy>
 8001738:	2201      	movs	r2, #1
 800173a:	4639      	mov	r1, r7
 800173c:	4628      	mov	r0, r5
 800173e:	f006 fe97 	bl	8008470 <__lshift>
 8001742:	46b0      	mov	r8, r6
 8001744:	4606      	mov	r6, r0
 8001746:	9b03      	ldr	r3, [sp, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	9308      	str	r3, [sp, #32]
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	444b      	add	r3, r9
 8001750:	930a      	str	r3, [sp, #40]	; 0x28
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	9b08      	ldr	r3, [sp, #32]
 800175c:	4621      	mov	r1, r4
 800175e:	3b01      	subs	r3, #1
 8001760:	4658      	mov	r0, fp
 8001762:	9304      	str	r3, [sp, #16]
 8001764:	f009 fe16 	bl	800b394 <quorem>
 8001768:	4603      	mov	r3, r0
 800176a:	4641      	mov	r1, r8
 800176c:	3330      	adds	r3, #48	; 0x30
 800176e:	9006      	str	r0, [sp, #24]
 8001770:	4658      	mov	r0, fp
 8001772:	930b      	str	r3, [sp, #44]	; 0x2c
 8001774:	f009 fef5 	bl	800b562 <__mcmp>
 8001778:	4632      	mov	r2, r6
 800177a:	4681      	mov	r9, r0
 800177c:	4621      	mov	r1, r4
 800177e:	4628      	mov	r0, r5
 8001780:	f006 fee6 	bl	8008550 <__mdiff>
 8001784:	68c2      	ldr	r2, [r0, #12]
 8001786:	4607      	mov	r7, r0
 8001788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800178a:	bb02      	cbnz	r2, 80017ce <_dtoa_r+0xa7e>
 800178c:	4601      	mov	r1, r0
 800178e:	4658      	mov	r0, fp
 8001790:	f009 fee7 	bl	800b562 <__mcmp>
 8001794:	4602      	mov	r2, r0
 8001796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001798:	4639      	mov	r1, r7
 800179a:	4628      	mov	r0, r5
 800179c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80017a0:	f006 fce6 	bl	8008170 <_Bfree>
 80017a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80017a8:	9f08      	ldr	r7, [sp, #32]
 80017aa:	ea43 0102 	orr.w	r1, r3, r2
 80017ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017b4:	d10d      	bne.n	80017d2 <_dtoa_r+0xa82>
 80017b6:	2b39      	cmp	r3, #57	; 0x39
 80017b8:	d029      	beq.n	800180e <_dtoa_r+0xabe>
 80017ba:	f1b9 0f00 	cmp.w	r9, #0
 80017be:	dd01      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017c0:	9b06      	ldr	r3, [sp, #24]
 80017c2:	3331      	adds	r3, #49	; 0x31
 80017c4:	9a04      	ldr	r2, [sp, #16]
 80017c6:	7013      	strb	r3, [r2, #0]
 80017c8:	e776      	b.n	80016b8 <_dtoa_r+0x968>
 80017ca:	4630      	mov	r0, r6
 80017cc:	e7b9      	b.n	8001742 <_dtoa_r+0x9f2>
 80017ce:	2201      	movs	r2, #1
 80017d0:	e7e2      	b.n	8001798 <_dtoa_r+0xa48>
 80017d2:	f1b9 0f00 	cmp.w	r9, #0
 80017d6:	db06      	blt.n	80017e6 <_dtoa_r+0xa96>
 80017d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80017da:	ea41 0909 	orr.w	r9, r1, r9
 80017de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80017e0:	ea59 0101 	orrs.w	r1, r9, r1
 80017e4:	d120      	bne.n	8001828 <_dtoa_r+0xad8>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	ddec      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017ea:	4659      	mov	r1, fp
 80017ec:	2201      	movs	r2, #1
 80017ee:	4628      	mov	r0, r5
 80017f0:	9308      	str	r3, [sp, #32]
 80017f2:	f006 fe3d 	bl	8008470 <__lshift>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4683      	mov	fp, r0
 80017fa:	f009 feb2 	bl	800b562 <__mcmp>
 80017fe:	2800      	cmp	r0, #0
 8001800:	9b08      	ldr	r3, [sp, #32]
 8001802:	dc02      	bgt.n	800180a <_dtoa_r+0xaba>
 8001804:	d1de      	bne.n	80017c4 <_dtoa_r+0xa74>
 8001806:	07da      	lsls	r2, r3, #31
 8001808:	d5dc      	bpl.n	80017c4 <_dtoa_r+0xa74>
 800180a:	2b39      	cmp	r3, #57	; 0x39
 800180c:	d1d8      	bne.n	80017c0 <_dtoa_r+0xa70>
 800180e:	2339      	movs	r3, #57	; 0x39
 8001810:	9a04      	ldr	r2, [sp, #16]
 8001812:	7013      	strb	r3, [r2, #0]
 8001814:	463b      	mov	r3, r7
 8001816:	461f      	mov	r7, r3
 8001818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800181c:	3b01      	subs	r3, #1
 800181e:	2a39      	cmp	r2, #57	; 0x39
 8001820:	d050      	beq.n	80018c4 <_dtoa_r+0xb74>
 8001822:	3201      	adds	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e747      	b.n	80016b8 <_dtoa_r+0x968>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dd03      	ble.n	8001834 <_dtoa_r+0xae4>
 800182c:	2b39      	cmp	r3, #57	; 0x39
 800182e:	d0ee      	beq.n	800180e <_dtoa_r+0xabe>
 8001830:	3301      	adds	r3, #1
 8001832:	e7c7      	b.n	80017c4 <_dtoa_r+0xa74>
 8001834:	9a08      	ldr	r2, [sp, #32]
 8001836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800183c:	428a      	cmp	r2, r1
 800183e:	d02a      	beq.n	8001896 <_dtoa_r+0xb46>
 8001840:	4659      	mov	r1, fp
 8001842:	2300      	movs	r3, #0
 8001844:	220a      	movs	r2, #10
 8001846:	4628      	mov	r0, r5
 8001848:	f006 fcb4 	bl	80081b4 <__multadd>
 800184c:	45b0      	cmp	r8, r6
 800184e:	4683      	mov	fp, r0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f04f 020a 	mov.w	r2, #10
 8001858:	4641      	mov	r1, r8
 800185a:	4628      	mov	r0, r5
 800185c:	d107      	bne.n	800186e <_dtoa_r+0xb1e>
 800185e:	f006 fca9 	bl	80081b4 <__multadd>
 8001862:	4680      	mov	r8, r0
 8001864:	4606      	mov	r6, r0
 8001866:	9b08      	ldr	r3, [sp, #32]
 8001868:	3301      	adds	r3, #1
 800186a:	9308      	str	r3, [sp, #32]
 800186c:	e775      	b.n	800175a <_dtoa_r+0xa0a>
 800186e:	f006 fca1 	bl	80081b4 <__multadd>
 8001872:	4631      	mov	r1, r6
 8001874:	4680      	mov	r8, r0
 8001876:	2300      	movs	r3, #0
 8001878:	220a      	movs	r2, #10
 800187a:	4628      	mov	r0, r5
 800187c:	f006 fc9a 	bl	80081b4 <__multadd>
 8001880:	4606      	mov	r6, r0
 8001882:	e7f0      	b.n	8001866 <_dtoa_r+0xb16>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	bfcc      	ite	gt
 800188a:	464f      	movgt	r7, r9
 800188c:	2701      	movle	r7, #1
 800188e:	f04f 0800 	mov.w	r8, #0
 8001892:	9a03      	ldr	r2, [sp, #12]
 8001894:	4417      	add	r7, r2
 8001896:	4659      	mov	r1, fp
 8001898:	2201      	movs	r2, #1
 800189a:	4628      	mov	r0, r5
 800189c:	9308      	str	r3, [sp, #32]
 800189e:	f006 fde7 	bl	8008470 <__lshift>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4683      	mov	fp, r0
 80018a6:	f009 fe5c 	bl	800b562 <__mcmp>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	dcb2      	bgt.n	8001814 <_dtoa_r+0xac4>
 80018ae:	d102      	bne.n	80018b6 <_dtoa_r+0xb66>
 80018b0:	9b08      	ldr	r3, [sp, #32]
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d4ae      	bmi.n	8001814 <_dtoa_r+0xac4>
 80018b6:	463b      	mov	r3, r7
 80018b8:	461f      	mov	r7, r3
 80018ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80018be:	2a30      	cmp	r2, #48	; 0x30
 80018c0:	d0fa      	beq.n	80018b8 <_dtoa_r+0xb68>
 80018c2:	e6f9      	b.n	80016b8 <_dtoa_r+0x968>
 80018c4:	9a03      	ldr	r2, [sp, #12]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d1a5      	bne.n	8001816 <_dtoa_r+0xac6>
 80018ca:	2331      	movs	r3, #49	; 0x31
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	e779      	b.n	80017c6 <_dtoa_r+0xa76>
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <_dtoa_r+0xbd4>)
 80018d4:	f7ff baa8 	b.w	8000e28 <_dtoa_r+0xd8>
 80018d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f aa81 	bne.w	8000de2 <_dtoa_r+0x92>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_dtoa_r+0xbd8>)
 80018e2:	f7ff baa1 	b.w	8000e28 <_dtoa_r+0xd8>
 80018e6:	f1b9 0f00 	cmp.w	r9, #0
 80018ea:	dc03      	bgt.n	80018f4 <_dtoa_r+0xba4>
 80018ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	f73f aecb 	bgt.w	800168a <_dtoa_r+0x93a>
 80018f4:	9f03      	ldr	r7, [sp, #12]
 80018f6:	4621      	mov	r1, r4
 80018f8:	4658      	mov	r0, fp
 80018fa:	f009 fd4b 	bl	800b394 <quorem>
 80018fe:	9a03      	ldr	r2, [sp, #12]
 8001900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001904:	f807 3b01 	strb.w	r3, [r7], #1
 8001908:	1aba      	subs	r2, r7, r2
 800190a:	4591      	cmp	r9, r2
 800190c:	ddba      	ble.n	8001884 <_dtoa_r+0xb34>
 800190e:	4659      	mov	r1, fp
 8001910:	2300      	movs	r3, #0
 8001912:	220a      	movs	r2, #10
 8001914:	4628      	mov	r0, r5
 8001916:	f006 fc4d 	bl	80081b4 <__multadd>
 800191a:	4683      	mov	fp, r0
 800191c:	e7eb      	b.n	80018f6 <_dtoa_r+0xba6>
 800191e:	bf00      	nop
 8001920:	0800c38b 	.word	0x0800c38b
 8001924:	0800c2e9 	.word	0x0800c2e9
 8001928:	0800c30d 	.word	0x0800c30d

0800192c <read_write_message>:
        }
        k_sleep(K_MSEC(1));
    }
}

static void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	4607      	mov	r7, r0
 8001932:	460e      	mov	r6, r1
 8001934:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001936:	2400      	movs	r4, #0
 8001938:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800193c:	e008      	b.n	8001950 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800193e:	b1dd      	cbz	r5, 8001978 <read_write_message+0x4c>
 8001940:	f10d 0307 	add.w	r3, sp, #7
 8001944:	2202      	movs	r2, #2
 8001946:	7831      	ldrb	r1, [r6, #0]
 8001948:	4638      	mov	r0, r7
 800194a:	f007 fb4a 	bl	8008fe2 <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800194e:	3401      	adds	r4, #1
 8001950:	2c05      	cmp	r4, #5
 8001952:	dc6e      	bgt.n	8001a32 <read_write_message+0x106>
        switch (cur_field) {
 8001954:	2c05      	cmp	r4, #5
 8001956:	d8fa      	bhi.n	800194e <read_write_message+0x22>
 8001958:	a301      	add	r3, pc, #4	; (adr r3, 8001960 <read_write_message+0x34>)
 800195a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800193f 	.word	0x0800193f
 8001964:	08001989 	.word	0x08001989
 8001968:	080019ab 	.word	0x080019ab
 800196c:	080019cd 	.word	0x080019cd
 8001970:	080019ef 	.word	0x080019ef
 8001974:	08001a11 	.word	0x08001a11
                    extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001978:	f10d 0307 	add.w	r3, sp, #7
 800197c:	2202      	movs	r2, #2
 800197e:	4631      	mov	r1, r6
 8001980:	4638      	mov	r0, r7
 8001982:	f007 fb4b 	bl	800901c <extract_msg_bit_field>
 8001986:	e7e2      	b.n	800194e <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001988:	b13d      	cbz	r5, 800199a <read_write_message+0x6e>
 800198a:	f10d 0307 	add.w	r3, sp, #7
 800198e:	2203      	movs	r2, #3
 8001990:	7871      	ldrb	r1, [r6, #1]
 8001992:	4638      	mov	r0, r7
 8001994:	f007 fb25 	bl	8008fe2 <fill_msg_bit_field>
 8001998:	e7d9      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 800199a:	f10d 0307 	add.w	r3, sp, #7
 800199e:	2203      	movs	r2, #3
 80019a0:	1c71      	adds	r1, r6, #1
 80019a2:	4638      	mov	r0, r7
 80019a4:	f007 fb3a 	bl	800901c <extract_msg_bit_field>
 80019a8:	e7d1      	b.n	800194e <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 80019aa:	b13d      	cbz	r5, 80019bc <read_write_message+0x90>
 80019ac:	f10d 0307 	add.w	r3, sp, #7
 80019b0:	2204      	movs	r2, #4
 80019b2:	78b1      	ldrb	r1, [r6, #2]
 80019b4:	4638      	mov	r0, r7
 80019b6:	f007 fb14 	bl	8008fe2 <fill_msg_bit_field>
 80019ba:	e7c8      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 80019bc:	f10d 0307 	add.w	r3, sp, #7
 80019c0:	2204      	movs	r2, #4
 80019c2:	1cb1      	adds	r1, r6, #2
 80019c4:	4638      	mov	r0, r7
 80019c6:	f007 fb29 	bl	800901c <extract_msg_bit_field>
 80019ca:	e7c0      	b.n	800194e <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 80019cc:	b13d      	cbz	r5, 80019de <read_write_message+0xb2>
 80019ce:	f10d 0307 	add.w	r3, sp, #7
 80019d2:	2201      	movs	r2, #1
 80019d4:	78f1      	ldrb	r1, [r6, #3]
 80019d6:	4638      	mov	r0, r7
 80019d8:	f007 fb03 	bl	8008fe2 <fill_msg_bit_field>
 80019dc:	e7b7      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 80019de:	f10d 0307 	add.w	r3, sp, #7
 80019e2:	2201      	movs	r2, #1
 80019e4:	1cf1      	adds	r1, r6, #3
 80019e6:	4638      	mov	r0, r7
 80019e8:	f007 fb18 	bl	800901c <extract_msg_bit_field>
 80019ec:	e7af      	b.n	800194e <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 80019ee:	b13d      	cbz	r5, 8001a00 <read_write_message+0xd4>
 80019f0:	f10d 0307 	add.w	r3, sp, #7
 80019f4:	2201      	movs	r2, #1
 80019f6:	7931      	ldrb	r1, [r6, #4]
 80019f8:	4638      	mov	r0, r7
 80019fa:	f007 faf2 	bl	8008fe2 <fill_msg_bit_field>
 80019fe:	e7a6      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001a00:	f10d 0307 	add.w	r3, sp, #7
 8001a04:	2201      	movs	r2, #1
 8001a06:	1d31      	adds	r1, r6, #4
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f007 fb07 	bl	800901c <extract_msg_bit_field>
 8001a0e:	e79e      	b.n	800194e <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001a10:	b13d      	cbz	r5, 8001a22 <read_write_message+0xf6>
 8001a12:	f10d 0307 	add.w	r3, sp, #7
 8001a16:	2208      	movs	r2, #8
 8001a18:	7971      	ldrb	r1, [r6, #5]
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f007 fae1 	bl	8008fe2 <fill_msg_bit_field>
 8001a20:	e795      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->people_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001a22:	f10d 0307 	add.w	r3, sp, #7
 8001a26:	2208      	movs	r2, #8
 8001a28:	1d71      	adds	r1, r6, #5
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f007 faf6 	bl	800901c <extract_msg_bit_field>
 8001a30:	e78d      	b.n	800194e <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 8001a32:	b003      	add	sp, #12
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	bf00      	nop

08001a38 <send_msg>:
int send_msg() {
 8001a38:	b530      	push	{r4, r5, lr}
 8001a3a:	b083      	sub	sp, #12
    uint32_t new_msg = 0;
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	9400      	str	r4, [sp, #0]
    read_write_message(&new_msg, &tx_msg, true);
 8001a40:	2201      	movs	r2, #1
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <send_msg+0x78>)
 8001a44:	4668      	mov	r0, sp
 8001a46:	f7ff ff71 	bl	800192c <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001a4a:	e00d      	b.n	8001a68 <send_msg+0x30>
        tx_buf[i] = (new_msg & (0x000000FF << i*8) ) >> i*8;
 8001a4c:	00e3      	lsls	r3, r4, #3
 8001a4e:	20ff      	movs	r0, #255	; 0xff
 8001a50:	4098      	lsls	r0, r3
 8001a52:	9a00      	ldr	r2, [sp, #0]
 8001a54:	4010      	ands	r0, r2
 8001a56:	40d8      	lsrs	r0, r3
 8001a58:	b2c0      	uxtb	r0, r0
 8001a5a:	4d16      	ldr	r5, [pc, #88]	; (8001ab4 <send_msg+0x7c>)
 8001a5c:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001a5e:	f007 fafd 	bl	800905c <reverse>
 8001a62:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001a64:	3401      	adds	r4, #1
 8001a66:	b2e4      	uxtb	r4, r4
 8001a68:	2c02      	cmp	r4, #2
 8001a6a:	d9ef      	bls.n	8001a4c <send_msg+0x14>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8001a6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a70:	2300      	movs	r3, #0
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <send_msg+0x80>)
 8001a74:	f004 fc4e 	bl	8006314 <z_impl_k_sem_take>
    while( k_sem_take(&sem_lora_busy, K_SECONDS(1)) < 0 );
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	dbf7      	blt.n	8001a6c <send_msg+0x34>
    if (!lora_cfg.tx) {
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <send_msg+0x84>)
 8001a7e:	7adb      	ldrb	r3, [r3, #11]
 8001a80:	b943      	cbnz	r3, 8001a94 <send_msg+0x5c>
        lora_cfg.tx = true;
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <send_msg+0x84>)
 8001a84:	2301      	movs	r3, #1
 8001a86:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <send_msg+0x88>)
 8001a8a:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001a8c:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4798      	blx	r3
 8001a92:	9001      	str	r0, [sp, #4]
    rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <send_msg+0x88>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001a98:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <send_msg+0x7c>)
 8001aa0:	4798      	blx	r3
 8001aa2:	9001      	str	r0, [sp, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <send_msg+0x80>)
 8001aa6:	f004 fc0d 	bl	80062c4 <z_impl_k_sem_give>
    return rc;
 8001aaa:	9801      	ldr	r0, [sp, #4]
}
 8001aac:	b003      	add	sp, #12
 8001aae:	bd30      	pop	{r4, r5, pc}
 8001ab0:	20000720 	.word	0x20000720
 8001ab4:	2000071c 	.word	0x2000071c
 8001ab8:	200006f4 	.word	0x200006f4
 8001abc:	200006c0 	.word	0x200006c0
 8001ac0:	200006cc 	.word	0x200006cc

08001ac4 <button_alarm_pressed_cb>:
    k_sem_give(&sem_anti_dream_msg);
//    k_timer_start
}

#else
void button_alarm_pressed_cb(const struct device* dev, struct gpio_callback* cb, uint32_t pins) {
 8001ac4:	b508      	push	{r3, lr}
    printk("button alarm pressed");
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <button_alarm_pressed_cb+0x28>)
 8001ac8:	f007 fadb 	bl	8009082 <printk>
    tx_msg.receiver_addr = RECV_BASE_STATION;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <button_alarm_pressed_cb+0x2c>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	705a      	strb	r2, [r3, #1]
    tx_msg.sender_addr = cur_dev_addr;
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <button_alarm_pressed_cb+0x30>)
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	701a      	strb	r2, [r3, #0]
    tx_msg.message_type = MESSAGE_TYPE_ALARM;
 8001ad8:	2200      	movs	r2, #0
 8001ada:	709a      	strb	r2, [r3, #2]
    tx_msg.direction = REQUEST;
 8001adc:	2101      	movs	r1, #1
 8001ade:	70d9      	strb	r1, [r3, #3]
//    tx_msg.battery_level
    tx_msg.people_in_safe_zone = 0;
 8001ae0:	715a      	strb	r2, [r3, #5]
    k_work_submit(&sender);
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <button_alarm_pressed_cb+0x34>)
 8001ae4:	f004 fd60 	bl	80065a8 <k_work_submit>
}
 8001ae8:	bd08      	pop	{r3, pc}
 8001aea:	bf00      	nop
 8001aec:	0800bcf8 	.word	0x0800bcf8
 8001af0:	20000720 	.word	0x20000720
 8001af4:	20000290 	.word	0x20000290
 8001af8:	2000070c 	.word	0x2000070c

08001afc <system_init>:
int system_init(unsigned int sem_proc_data_init_val, unsigned int sem_proc_data_lim) {
 8001afc:	b510      	push	{r4, lr}
    lora_cfg.frequency = 433000000;
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <system_init+0xd4>)
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <system_init+0xd8>)
 8001b02:	601a      	str	r2, [r3, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 8001b04:	2200      	movs	r2, #0
 8001b06:	711a      	strb	r2, [r3, #4]
    lora_cfg.datarate = SF_10;
 8001b08:	210a      	movs	r1, #10
 8001b0a:	7159      	strb	r1, [r3, #5]
    lora_cfg.preamble_len = 8;
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	8119      	strh	r1, [r3, #8]
    lora_cfg.coding_rate = CR_4_5;
 8001b10:	2101      	movs	r1, #1
 8001b12:	7199      	strb	r1, [r3, #6]
    lora_cfg.tx_power = 5;
 8001b14:	2105      	movs	r1, #5
 8001b16:	7299      	strb	r1, [r3, #10]
    lora_cfg.tx = false;
 8001b18:	72da      	strb	r2, [r3, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001b1a:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <system_init+0xdc>)
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <system_init+0xe0>)
 8001b1e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001b20:	f008 fe64 	bl	800a7ec <z_device_ready>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d046      	beq.n	8001bb6 <system_init+0xba>
 8001b28:	2300      	movs	r3, #0
    if (!device_is_ready(lora_dev_ptr)) {
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d149      	bne.n	8001bc2 <system_init+0xc6>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <system_init+0xe0>)
 8001b30:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001b32:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4926      	ldr	r1, [pc, #152]	; (8001bd0 <system_init+0xd4>)
 8001b38:	4798      	blx	r3
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	db44      	blt.n	8001bc8 <system_init+0xcc>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001b3e:	4828      	ldr	r0, [pc, #160]	; (8001be0 <system_init+0xe4>)
 8001b40:	f004 f89e 	bl	8005c80 <z_impl_device_get_binding>
    button_alarm_gpio_dev_ptr = device_get_binding(BUTTON_ALARM_GPIO_PORT);
 8001b44:	4c27      	ldr	r4, [pc, #156]	; (8001be4 <system_init+0xe8>)
 8001b46:	6020      	str	r0, [r4, #0]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8001b48:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8001b4a:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001b4c:	6813      	ldr	r3, [r2, #0]
 8001b4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b52:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8001b54:	680b      	ldr	r3, [r1, #0]
 8001b56:	f240 1201 	movw	r2, #257	; 0x101
 8001b5a:	210d      	movs	r1, #13
 8001b5c:	4798      	blx	r3
    gpio_pin_interrupt_configure(button_alarm_gpio_dev_ptr, BUTTON_ALARM_GPIO_PIN, GPIO_INT_EDGE_TO_ACTIVE);
 8001b5e:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 8001b60:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8001b62:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8001b64:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8001b66:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001b6a:	d127      	bne.n	8001bbc <system_init+0xc0>
 8001b6c:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8001b70:	699c      	ldr	r4, [r3, #24]
 8001b72:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8001b76:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8001b7a:	210d      	movs	r1, #13
 8001b7c:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <system_init+0xec>)
 8001b80:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <system_init+0xf0>)
 8001b82:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 8001b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b88:	609a      	str	r2, [r3, #8]
    gpio_add_callback(button_alarm_gpio_dev_ptr, &button_alarm_cb);
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <system_init+0xe8>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8001b8e:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	b113      	cbz	r3, 8001b9a <system_init+0x9e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8001b94:	2201      	movs	r2, #1
 8001b96:	4914      	ldr	r1, [pc, #80]	; (8001be8 <system_init+0xec>)
 8001b98:	4798      	blx	r3
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <system_init+0xf4>)
 8001ba0:	f008 ff58 	bl	800aa54 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <system_init+0xf8>)
 8001ba6:	f008 ff3c 	bl	800aa22 <z_impl_k_queue_init>
    k_work_init(&sender, send_msg);
 8001baa:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <system_init+0xfc>)
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <system_init+0x100>)
 8001bae:	f008 ff64 	bl	800aa7a <k_work_init>
    return 0;
 8001bb2:	2000      	movs	r0, #0
}
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	f06f 0312 	mvn.w	r3, #18
 8001bba:	e7b6      	b.n	8001b2a <system_init+0x2e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8001bbc:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8001bc0:	e7d6      	b.n	8001b70 <system_init+0x74>
        return -1;
 8001bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc6:	e7f5      	b.n	8001bb4 <system_init+0xb8>
        return -1;
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bcc:	e7f2      	b.n	8001bb4 <system_init+0xb8>
 8001bce:	bf00      	nop
 8001bd0:	200006c0 	.word	0x200006c0
 8001bd4:	19cf0e40 	.word	0x19cf0e40
 8001bd8:	0800b97c 	.word	0x0800b97c
 8001bdc:	200006cc 	.word	0x200006cc
 8001be0:	0800bd10 	.word	0x0800bd10
 8001be4:	200006bc 	.word	0x200006bc
 8001be8:	200006b0 	.word	0x200006b0
 8001bec:	08001ac5 	.word	0x08001ac5
 8001bf0:	200006f4 	.word	0x200006f4
 8001bf4:	200006d0 	.word	0x200006d0
 8001bf8:	08001a39 	.word	0x08001a39
 8001bfc:	2000070c 	.word	0x2000070c

08001c00 <recv_msg>:
void recv_msg(void) {
 8001c00:	b530      	push	{r4, r5, lr}
 8001c02:	b087      	sub	sp, #28
    system_init(SEM_PROC_DATA_INIT_VAL, SEM_PROC_DATA_LIM);
 8001c04:	2101      	movs	r1, #1
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff ff78 	bl	8001afc <system_init>
    uint8_t rx_msg_[MESSAGE_LEN_IN_BYTES] = {0};
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <recv_msg+0xa4>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001c14:	2300      	movs	r3, #0
 8001c16:	f88d 3016 	strb.w	r3, [sp, #22]
    int16_t rssi = 0;
 8001c1a:	f8ad 3012 	strh.w	r3, [sp, #18]
    int8_t snr = 0;
 8001c1e:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8_t ind = 0;
 8001c22:	e022      	b.n	8001c6a <recv_msg+0x6a>
            rc = lora_recv(lora_dev_ptr, rx_msg_, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <recv_msg+0xa8>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001c28:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f10d 0211 	add.w	r2, sp, #17
 8001c30:	9203      	str	r2, [sp, #12]
 8001c32:	f10d 0212 	add.w	r2, sp, #18
 8001c36:	9202      	str	r2, [sp, #8]
 8001c38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001c40:	e9cd 4500 	strd	r4, r5, [sp]
 8001c44:	2203      	movs	r2, #3
 8001c46:	a905      	add	r1, sp, #20
 8001c48:	4798      	blx	r3
            if (rc > 0) {
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	dd0a      	ble.n	8001c64 <recv_msg+0x64>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2300      	movs	r3, #0
 8001c52:	a905      	add	r1, sp, #20
 8001c54:	4815      	ldr	r0, [pc, #84]	; (8001cac <recv_msg+0xac>)
 8001c56:	f004 f9ad 	bl	8005fb4 <z_impl_k_msgq_put>
                k_queue_append(&queue_rssi, &rssi);
 8001c5a:	f10d 0112 	add.w	r1, sp, #18
 8001c5e:	4814      	ldr	r0, [pc, #80]	; (8001cb0 <recv_msg+0xb0>)
 8001c60:	f008 feec 	bl	800aa3c <k_queue_append>
	z_impl_k_sem_give(sem);
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <recv_msg+0xb4>)
 8001c66:	f004 fb2d 	bl	80062c4 <z_impl_k_sem_give>
        printk("thread_1\n");
 8001c6a:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <recv_msg+0xb8>)
 8001c6c:	f007 fa09 	bl	8009082 <printk>
        if (lora_dev_ptr) {
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <recv_msg+0xa8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f8      	beq.n	8001c6a <recv_msg+0x6a>
	return z_impl_k_sem_take(sem, timeout);
 8001c78:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <recv_msg+0xb4>)
 8001c80:	f004 fb48 	bl	8006314 <z_impl_k_sem_take>
            while( k_sem_take(&sem_lora_busy, K_SECONDS(1)) < 0 );
 8001c84:	2800      	cmp	r0, #0
 8001c86:	dbf7      	blt.n	8001c78 <recv_msg+0x78>
            if (lora_cfg.tx) {
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <recv_msg+0xbc>)
 8001c8a:	7adb      	ldrb	r3, [r3, #11]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0c9      	beq.n	8001c24 <recv_msg+0x24>
                lora_cfg.tx = false;
 8001c90:	490a      	ldr	r1, [pc, #40]	; (8001cbc <recv_msg+0xbc>)
 8001c92:	2300      	movs	r3, #0
 8001c94:	72cb      	strb	r3, [r1, #11]
                lora_config(lora_dev_ptr, &lora_cfg);
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <recv_msg+0xa8>)
 8001c98:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001c9a:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4798      	blx	r3
 8001ca0:	e7c0      	b.n	8001c24 <recv_msg+0x24>
 8001ca2:	bf00      	nop
 8001ca4:	0800bbd8 	.word	0x0800bbd8
 8001ca8:	200006cc 	.word	0x200006cc
 8001cac:	200003d0 	.word	0x200003d0
 8001cb0:	200006d0 	.word	0x200006d0
 8001cb4:	200006f4 	.word	0x200006f4
 8001cb8:	0800bd18 	.word	0x0800bd18
 8001cbc:	200006c0 	.word	0x200006c0

08001cc0 <processing_data>:
void processing_data() {
 8001cc0:	b530      	push	{r4, r5, lr}
 8001cc2:	b085      	sub	sp, #20
    uint8_t rx_buf[MESSAGE_LEN_IN_BYTES] = {0};
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <processing_data+0x90>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f88d 300e 	strb.w	r3, [sp, #14]
    int16_t rssi = 0;
 8001cd2:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint32_t cur_msg = 0;
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	e01b      	b.n	8001d12 <processing_data+0x52>
                rx_buf[i] = reverse(rx_buf[i]);
 8001cda:	ab04      	add	r3, sp, #16
 8001cdc:	191d      	adds	r5, r3, r4
 8001cde:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8001ce2:	f007 f9bb 	bl	800905c <reverse>
 8001ce6:	f805 0c04 	strb.w	r0, [r5, #-4]
                cur_msg |= (rx_buf[i]) << i*8;
 8001cea:	00e3      	lsls	r3, r4, #3
 8001cec:	4098      	lsls	r0, r3
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	4318      	orrs	r0, r3
 8001cf2:	9001      	str	r0, [sp, #4]
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001cf4:	3401      	adds	r4, #1
 8001cf6:	b2e4      	uxtb	r4, r4
 8001cf8:	2c02      	cmp	r4, #2
 8001cfa:	d9ee      	bls.n	8001cda <processing_data+0x1a>
            read_write_message(&cur_msg, &rx_msg, false); // rx_msg struct is fill
 8001cfc:	4c15      	ldr	r4, [pc, #84]	; (8001d54 <processing_data+0x94>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4621      	mov	r1, r4
 8001d02:	a801      	add	r0, sp, #4
 8001d04:	f7ff fe12 	bl	800192c <read_write_message>
            if ( rx_msg.receiver_addr != cur_dev_addr )
 8001d08:	7862      	ldrb	r2, [r4, #1]
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <processing_data+0x98>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d018      	beq.n	8001d44 <processing_data+0x84>
        printk("thread_2\n");
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <processing_data+0x9c>)
 8001d14:	f007 f9b5 	bl	8009082 <printk>
				 struct k_msgq_attrs *attrs);


static inline uint32_t z_impl_k_msgq_num_free_get(struct k_msgq *msgq)
{
	return msgq->max_msgs - msgq->used_msgs;
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <processing_data+0xa0>)
 8001d1a:	6913      	ldr	r3, [r2, #16]
 8001d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1e:	1a9b      	subs	r3, r3, r2
        if ( k_msgq_num_free_get(&msgq_rx_buf) != QUEUE_LEN_IN_ELEMENTS ) {
 8001d20:	2b0a      	cmp	r3, #10
 8001d22:	d00f      	beq.n	8001d44 <processing_data+0x84>
            k_msgq_get(&msgq_rx_buf, &rx_buf,K_NO_WAIT);
 8001d24:	2400      	movs	r4, #0
 8001d26:	2500      	movs	r5, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001d28:	4622      	mov	r2, r4
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	a903      	add	r1, sp, #12
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <processing_data+0xa0>)
 8001d30:	f004 f99c 	bl	800606c <z_impl_k_msgq_get>
 8001d34:	4622      	mov	r2, r4
 8001d36:	462b      	mov	r3, r5
 8001d38:	f10d 010a 	add.w	r1, sp, #10
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <processing_data+0xa4>)
 8001d3e:	f004 f995 	bl	800606c <z_impl_k_msgq_get>
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001d42:	e7d9      	b.n	8001cf8 <processing_data+0x38>
	return z_impl_k_sleep(timeout);
 8001d44:	200a      	movs	r0, #10
 8001d46:	2100      	movs	r1, #0
 8001d48:	f004 fffe 	bl	8006d48 <z_impl_k_sleep>
 8001d4c:	e7e1      	b.n	8001d12 <processing_data+0x52>
 8001d4e:	bf00      	nop
 8001d50:	0800bbd8 	.word	0x0800bbd8
 8001d54:	200006ec 	.word	0x200006ec
 8001d58:	20000290 	.word	0x20000290
 8001d5c:	0800bd24 	.word	0x0800bd24
 8001d60:	200003d0 	.word	0x200003d0
 8001d64:	2000039c 	.word	0x2000039c

08001d68 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8001d68:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8001d6a:	680b      	ldr	r3, [r1, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <char_out+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4798      	blx	r3
}
 8001d76:	bd08      	pop	{r3, pc}
 8001d78:	20000000 	.word	0x20000000

08001d7c <__printk_hook_install>:
	_char_out = fn;
 8001d7c:	4b01      	ldr	r3, [pc, #4]	; (8001d84 <__printk_hook_install+0x8>)
 8001d7e:	6018      	str	r0, [r3, #0]
}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8001d88:	b500      	push	{lr}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8001d90:	2100      	movs	r1, #0
 8001d92:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8001d94:	a901      	add	r1, sp, #4
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <vprintk+0x1c>)
 8001d98:	f000 fa16 	bl	80021c8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8001d9c:	b003      	add	sp, #12
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da2:	bf00      	nop
 8001da4:	08001d69 	.word	0x08001d69

08001da8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8001da8:	4684      	mov	ip, r0
	const char *sp = *str;
 8001daa:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8001dac:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8001dae:	e005      	b.n	8001dbc <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8001db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001db4:	3201      	adds	r2, #1
 8001db6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001dba:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8001dbc:	7813      	ldrb	r3, [r2, #0]
 8001dbe:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <extract_decimal+0x28>)
 8001dc0:	5c59      	ldrb	r1, [r3, r1]
 8001dc2:	f011 0f04 	tst.w	r1, #4
 8001dc6:	d1f3      	bne.n	8001db0 <extract_decimal+0x8>
	}
	*str = sp;
 8001dc8:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	0800c1d9 	.word	0x0800c1d9

08001dd4 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	6003      	str	r3, [r0, #0]
 8001dde:	6043      	str	r3, [r0, #4]
 8001de0:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8001de2:	784b      	ldrb	r3, [r1, #1]
 8001de4:	2b25      	cmp	r3, #37	; 0x25
 8001de6:	d002      	beq.n	8001dee <extract_conversion+0x1a>
 8001de8:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8001dea:	2501      	movs	r5, #1
 8001dec:	e01f      	b.n	8001e2e <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8001dee:	1c88      	adds	r0, r1, #2
 8001df0:	70e3      	strb	r3, [r4, #3]
		return sp;
 8001df2:	e145      	b.n	8002080 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8001dfc:	b1b5      	cbz	r5, 8001e2c <extract_conversion+0x58>
			++sp;
 8001dfe:	3601      	adds	r6, #1
 8001e00:	e014      	b.n	8001e2c <extract_conversion+0x58>
			conv->flag_plus = true;
 8001e02:	7823      	ldrb	r3, [r4, #0]
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	7023      	strb	r3, [r4, #0]
			break;
 8001e0a:	e7f7      	b.n	8001dfc <extract_conversion+0x28>
			conv->flag_space = true;
 8001e0c:	7823      	ldrb	r3, [r4, #0]
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	7023      	strb	r3, [r4, #0]
			break;
 8001e14:	e7f2      	b.n	8001dfc <extract_conversion+0x28>
			conv->flag_hash = true;
 8001e16:	7823      	ldrb	r3, [r4, #0]
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	7023      	strb	r3, [r4, #0]
			break;
 8001e1e:	e7ed      	b.n	8001dfc <extract_conversion+0x28>
			conv->flag_zero = true;
 8001e20:	7823      	ldrb	r3, [r4, #0]
 8001e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e26:	7023      	strb	r3, [r4, #0]
			break;
 8001e28:	e7e8      	b.n	8001dfc <extract_conversion+0x28>
		switch (*sp) {
 8001e2a:	2500      	movs	r5, #0
	} while (loop);
 8001e2c:	b345      	cbz	r5, 8001e80 <extract_conversion+0xac>
		switch (*sp) {
 8001e2e:	7833      	ldrb	r3, [r6, #0]
 8001e30:	3b20      	subs	r3, #32
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d8f9      	bhi.n	8001e2a <extract_conversion+0x56>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <extract_conversion+0x68>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e0d 	.word	0x08001e0d
 8001e40:	08001e2b 	.word	0x08001e2b
 8001e44:	08001e2b 	.word	0x08001e2b
 8001e48:	08001e17 	.word	0x08001e17
 8001e4c:	08001e2b 	.word	0x08001e2b
 8001e50:	08001e2b 	.word	0x08001e2b
 8001e54:	08001e2b 	.word	0x08001e2b
 8001e58:	08001e2b 	.word	0x08001e2b
 8001e5c:	08001e2b 	.word	0x08001e2b
 8001e60:	08001e2b 	.word	0x08001e2b
 8001e64:	08001e2b 	.word	0x08001e2b
 8001e68:	08001e03 	.word	0x08001e03
 8001e6c:	08001e2b 	.word	0x08001e2b
 8001e70:	08001df5 	.word	0x08001df5
 8001e74:	08001e2b 	.word	0x08001e2b
 8001e78:	08001e2b 	.word	0x08001e2b
 8001e7c:	08001e21 	.word	0x08001e21
	if (conv->flag_zero && conv->flag_dash) {
 8001e80:	7823      	ldrb	r3, [r4, #0]
 8001e82:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001e86:	2b44      	cmp	r3, #68	; 0x44
 8001e88:	d05f      	beq.n	8001f4a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8001e8a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8001e8c:	7823      	ldrb	r3, [r4, #0]
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8001e94:	7833      	ldrb	r3, [r6, #0]
 8001e96:	2b2a      	cmp	r3, #42	; 0x2a
 8001e98:	d05c      	beq.n	8001f54 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8001e9a:	a801      	add	r0, sp, #4
 8001e9c:	f7ff ff84 	bl	8001da8 <extract_decimal>
	if (sp != wp) {
 8001ea0:	9b01      	ldr	r3, [sp, #4]
 8001ea2:	429e      	cmp	r6, r3
 8001ea4:	d00f      	beq.n	8001ec6 <extract_conversion+0xf2>
		conv->width_present = true;
 8001ea6:	7823      	ldrb	r3, [r4, #0]
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8001eae:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	db54      	blt.n	8001f64 <extract_conversion+0x190>
 8001eba:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	7822      	ldrb	r2, [r4, #0]
 8001ec0:	f363 0241 	bfi	r2, r3, #1, #1
 8001ec4:	7022      	strb	r2, [r4, #0]
	return sp;
 8001ec6:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8001ec8:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ece:	bf14      	ite	ne
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	7862      	ldrb	r2, [r4, #1]
 8001ed6:	f363 0241 	bfi	r2, r3, #1, #1
 8001eda:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d043      	beq.n	8001f68 <extract_conversion+0x194>
	++sp;
 8001ee0:	9b01      	ldr	r3, [sp, #4]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8001ee6:	785b      	ldrb	r3, [r3, #1]
 8001ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8001eea:	d03f      	beq.n	8001f6c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8001eec:	a801      	add	r0, sp, #4
 8001eee:	f7ff ff5b 	bl	8001da8 <extract_decimal>
	conv->prec_value = prec;
 8001ef2:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8001ef4:	7823      	ldrb	r3, [r4, #0]
 8001ef6:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8001efa:	2800      	cmp	r0, #0
 8001efc:	db3e      	blt.n	8001f7c <extract_conversion+0x1a8>
 8001efe:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	7822      	ldrb	r2, [r4, #0]
 8001f04:	f363 0241 	bfi	r2, r3, #1, #1
 8001f08:	7022      	strb	r2, [r4, #0]
	return sp;
 8001f0a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8001f0c:	7803      	ldrb	r3, [r0, #0]
 8001f0e:	3b4c      	subs	r3, #76	; 0x4c
 8001f10:	2b2e      	cmp	r3, #46	; 0x2e
 8001f12:	f200 809d 	bhi.w	8002050 <extract_conversion+0x27c>
 8001f16:	e8df f003 	tbb	[pc, r3]
 8001f1a:	9b90      	.short	0x9b90
 8001f1c:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f20:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f24:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f28:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f2c:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f30:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f34:	9b339b9b 	.word	0x9b339b9b
 8001f38:	9b459b57 	.word	0x9b459b57
 8001f3c:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f40:	9b899b9b 	.word	0x9b899b9b
 8001f44:	9b9b9b9b 	.word	0x9b9b9b9b
 8001f48:	82          	.byte	0x82
 8001f49:	00          	.byte	0x00
		conv->flag_zero = false;
 8001f4a:	7823      	ldrb	r3, [r4, #0]
 8001f4c:	f36f 1386 	bfc	r3, #6, #1
 8001f50:	7023      	strb	r3, [r4, #0]
 8001f52:	e79a      	b.n	8001e8a <extract_conversion+0xb6>
		conv->width_star = true;
 8001f54:	7863      	ldrb	r3, [r4, #1]
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8001f5c:	4633      	mov	r3, r6
 8001f5e:	3301      	adds	r3, #1
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	e7b1      	b.n	8001ec8 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8001f64:	2201      	movs	r2, #1
 8001f66:	e7a9      	b.n	8001ebc <extract_conversion+0xe8>
		return sp;
 8001f68:	9801      	ldr	r0, [sp, #4]
 8001f6a:	e7cf      	b.n	8001f0c <extract_conversion+0x138>
		conv->prec_star = true;
 8001f6c:	7863      	ldrb	r3, [r4, #1]
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8001f74:	4610      	mov	r0, r2
 8001f76:	3001      	adds	r0, #1
 8001f78:	9001      	str	r0, [sp, #4]
 8001f7a:	e7c7      	b.n	8001f0c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	e7bf      	b.n	8001f00 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8001f80:	1c42      	adds	r2, r0, #1
 8001f82:	7843      	ldrb	r3, [r0, #1]
 8001f84:	2b68      	cmp	r3, #104	; 0x68
 8001f86:	d006      	beq.n	8001f96 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8001f88:	7863      	ldrb	r3, [r4, #1]
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	f361 03c6 	bfi	r3, r1, #3, #4
 8001f90:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8001f92:	4610      	mov	r0, r2
 8001f94:	e01e      	b.n	8001fd4 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8001f96:	7863      	ldrb	r3, [r4, #1]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f362 03c6 	bfi	r3, r2, #3, #4
 8001f9e:	7063      	strb	r3, [r4, #1]
			++sp;
 8001fa0:	3002      	adds	r0, #2
 8001fa2:	e017      	b.n	8001fd4 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8001fa4:	1c42      	adds	r2, r0, #1
 8001fa6:	7843      	ldrb	r3, [r0, #1]
 8001fa8:	2b6c      	cmp	r3, #108	; 0x6c
 8001faa:	d006      	beq.n	8001fba <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8001fac:	7863      	ldrb	r3, [r4, #1]
 8001fae:	2103      	movs	r1, #3
 8001fb0:	f361 03c6 	bfi	r3, r1, #3, #4
 8001fb4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	e00c      	b.n	8001fd4 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8001fba:	7863      	ldrb	r3, [r4, #1]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	f362 03c6 	bfi	r3, r2, #3, #4
 8001fc2:	7063      	strb	r3, [r4, #1]
			++sp;
 8001fc4:	3002      	adds	r0, #2
 8001fc6:	e005      	b.n	8001fd4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8001fc8:	7863      	ldrb	r3, [r4, #1]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f362 03c6 	bfi	r3, r2, #3, #4
 8001fd0:	7063      	strb	r3, [r4, #1]
		++sp;
 8001fd2:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8001fd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001fd8:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8001fda:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001fde:	2a37      	cmp	r2, #55	; 0x37
 8001fe0:	d87d      	bhi.n	80020de <extract_conversion+0x30a>
 8001fe2:	e8df f002 	tbb	[pc, r2]
 8001fe6:	7c5e      	.short	0x7c5e
 8001fe8:	5e5e7c7c 	.word	0x5e5e7c7c
 8001fec:	7c7c7c5e 	.word	0x7c7c7c5e
 8001ff0:	7c7c7c7c 	.word	0x7c7c7c7c
 8001ff4:	7c7c7c7c 	.word	0x7c7c7c7c
 8001ff8:	7c7c7c7c 	.word	0x7c7c7c7c
 8001ffc:	7c7c4f7c 	.word	0x7c7c4f7c
 8002000:	7c7c7c7c 	.word	0x7c7c7c7c
 8002004:	7c5e7c7c 	.word	0x7c5e7c7c
 8002008:	5e5e3a4f 	.word	0x5e5e3a4f
 800200c:	7c3a7c5e 	.word	0x7c3a7c5e
 8002010:	657c7c7c 	.word	0x657c7c7c
 8002014:	7c7c714f 	.word	0x7c7c714f
 8002018:	7c4f7c71 	.word	0x7c4f7c71
 800201c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 800201e:	7863      	ldrb	r3, [r4, #1]
 8002020:	2206      	movs	r2, #6
 8002022:	f362 03c6 	bfi	r3, r2, #3, #4
 8002026:	7063      	strb	r3, [r4, #1]
		++sp;
 8002028:	3001      	adds	r0, #1
		break;
 800202a:	e7d3      	b.n	8001fd4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 800202c:	7863      	ldrb	r3, [r4, #1]
 800202e:	2207      	movs	r2, #7
 8002030:	f362 03c6 	bfi	r3, r2, #3, #4
 8002034:	7063      	strb	r3, [r4, #1]
		++sp;
 8002036:	3001      	adds	r0, #1
		break;
 8002038:	e7cc      	b.n	8001fd4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 800203a:	7863      	ldrb	r3, [r4, #1]
 800203c:	2208      	movs	r2, #8
 800203e:	f362 03c6 	bfi	r3, r2, #3, #4
 8002042:	7063      	strb	r3, [r4, #1]
		++sp;
 8002044:	3001      	adds	r0, #1
		conv->unsupported = true;
 8002046:	7823      	ldrb	r3, [r4, #0]
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	7023      	strb	r3, [r4, #0]
		break;
 800204e:	e7c1      	b.n	8001fd4 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8002050:	7863      	ldrb	r3, [r4, #1]
 8002052:	f36f 03c6 	bfc	r3, #3, #4
 8002056:	7063      	strb	r3, [r4, #1]
		break;
 8002058:	e7bc      	b.n	8001fd4 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 800205a:	78a2      	ldrb	r2, [r4, #2]
 800205c:	2101      	movs	r1, #1
 800205e:	f361 0202 	bfi	r2, r1, #0, #3
 8002062:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002064:	7862      	ldrb	r2, [r4, #1]
 8002066:	f002 0278 	and.w	r2, r2, #120	; 0x78
 800206a:	2a40      	cmp	r2, #64	; 0x40
 800206c:	d010      	beq.n	8002090 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 800206e:	2b63      	cmp	r3, #99	; 0x63
 8002070:	d013      	beq.n	800209a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8002072:	7823      	ldrb	r3, [r4, #0]
 8002074:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002078:	4315      	orrs	r5, r2
 800207a:	f365 0341 	bfi	r3, r5, #1, #1
 800207e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002080:	b002      	add	sp, #8
 8002082:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8002084:	78a2      	ldrb	r2, [r4, #2]
 8002086:	2102      	movs	r1, #2
 8002088:	f361 0202 	bfi	r2, r1, #0, #3
 800208c:	70a2      	strb	r2, [r4, #2]
 800208e:	e7e9      	b.n	8002064 <extract_conversion+0x290>
			conv->invalid = true;
 8002090:	7821      	ldrb	r1, [r4, #0]
 8002092:	f041 0101 	orr.w	r1, r1, #1
 8002096:	7021      	strb	r1, [r4, #0]
 8002098:	e7e9      	b.n	800206e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 800209a:	1e15      	subs	r5, r2, #0
 800209c:	bf18      	it	ne
 800209e:	2501      	movne	r5, #1
 80020a0:	e7e7      	b.n	8002072 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 80020a2:	78a3      	ldrb	r3, [r4, #2]
 80020a4:	2204      	movs	r2, #4
 80020a6:	f362 0302 	bfi	r3, r2, #0, #3
 80020aa:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 80020ac:	2501      	movs	r5, #1
			break;
 80020ae:	e7e0      	b.n	8002072 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80020b0:	78a3      	ldrb	r3, [r4, #2]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f362 0302 	bfi	r3, r2, #0, #3
 80020b8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80020ba:	7863      	ldrb	r3, [r4, #1]
 80020bc:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d1d6      	bne.n	8002072 <extract_conversion+0x29e>
			unsupported = true;
 80020c4:	2501      	movs	r5, #1
 80020c6:	e7d4      	b.n	8002072 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80020c8:	78a3      	ldrb	r3, [r4, #2]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f362 0302 	bfi	r3, r2, #0, #3
 80020d0:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 80020d2:	7863      	ldrb	r3, [r4, #1]
 80020d4:	f013 0f78 	tst.w	r3, #120	; 0x78
 80020d8:	d0cb      	beq.n	8002072 <extract_conversion+0x29e>
			unsupported = true;
 80020da:	2501      	movs	r5, #1
 80020dc:	e7c9      	b.n	8002072 <extract_conversion+0x29e>
		conv->invalid = true;
 80020de:	7823      	ldrb	r3, [r4, #0]
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	7023      	strb	r3, [r4, #0]
		break;
 80020e6:	e7c4      	b.n	8002072 <extract_conversion+0x29e>

080020e8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80020e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ec:	b083      	sub	sp, #12
 80020ee:	4604      	mov	r4, r0
 80020f0:	460d      	mov	r5, r1
 80020f2:	9201      	str	r2, [sp, #4]
 80020f4:	469a      	mov	sl, r3
 80020f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 80020f8:	78d3      	ldrb	r3, [r2, #3]
 80020fa:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <encode_uint+0xdc>)
 80020fc:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002100:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002104:	2b6f      	cmp	r3, #111	; 0x6f
 8002106:	d00f      	beq.n	8002128 <encode_uint+0x40>
 8002108:	d906      	bls.n	8002118 <encode_uint+0x30>
 800210a:	2b70      	cmp	r3, #112	; 0x70
 800210c:	d00f      	beq.n	800212e <encode_uint+0x46>
 800210e:	2b78      	cmp	r3, #120	; 0x78
 8002110:	d110      	bne.n	8002134 <encode_uint+0x4c>
		return 16;
 8002112:	f04f 0910 	mov.w	r9, #16
 8002116:	e023      	b.n	8002160 <encode_uint+0x78>
	switch (specifier) {
 8002118:	2b58      	cmp	r3, #88	; 0x58
 800211a:	d002      	beq.n	8002122 <encode_uint+0x3a>
 800211c:	f04f 090a 	mov.w	r9, #10
 8002120:	e01e      	b.n	8002160 <encode_uint+0x78>
		return 16;
 8002122:	f04f 0910 	mov.w	r9, #16
 8002126:	e01b      	b.n	8002160 <encode_uint+0x78>
		return 8;
 8002128:	f04f 0908 	mov.w	r9, #8
 800212c:	e018      	b.n	8002160 <encode_uint+0x78>
		return 16;
 800212e:	f04f 0910 	mov.w	r9, #16
 8002132:	e015      	b.n	8002160 <encode_uint+0x78>
	switch (specifier) {
 8002134:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002138:	e012      	b.n	8002160 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	3230      	adds	r2, #48	; 0x30
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8002144:	463a      	mov	r2, r7
 8002146:	4643      	mov	r3, r8
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fbba 	bl	80008c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002150:	42bc      	cmp	r4, r7
 8002152:	f175 0300 	sbcs.w	r3, r5, #0
 8002156:	d319      	bcc.n	800218c <encode_uint+0xa4>
 8002158:	4556      	cmp	r6, sl
 800215a:	d917      	bls.n	800218c <encode_uint+0xa4>
		value /= radix;
 800215c:	4604      	mov	r4, r0
 800215e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002160:	f04f 0800 	mov.w	r8, #0
 8002164:	464f      	mov	r7, r9
 8002166:	464a      	mov	r2, r9
 8002168:	4643      	mov	r3, r8
 800216a:	4620      	mov	r0, r4
 800216c:	4629      	mov	r1, r5
 800216e:	f7fe fba9 	bl	80008c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002172:	2a09      	cmp	r2, #9
 8002174:	d9e1      	bls.n	800213a <encode_uint+0x52>
 8002176:	f1bb 0f01 	cmp.w	fp, #1
 800217a:	d003      	beq.n	8002184 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 800217c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800217e:	3257      	adds	r2, #87	; 0x57
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	e7dd      	b.n	8002140 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002184:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002186:	3237      	adds	r2, #55	; 0x37
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	e7d9      	b.n	8002140 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 800218c:	9b01      	ldr	r3, [sp, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f013 0f20 	tst.w	r3, #32
 8002194:	d005      	beq.n	80021a2 <encode_uint+0xba>
		if (radix == 8) {
 8002196:	f1b9 0f08 	cmp.w	r9, #8
 800219a:	d006      	beq.n	80021aa <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 800219c:	f1b9 0f10 	cmp.w	r9, #16
 80021a0:	d009      	beq.n	80021b6 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 80021a2:	4630      	mov	r0, r6
 80021a4:	b003      	add	sp, #12
 80021a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 80021aa:	9a01      	ldr	r2, [sp, #4]
 80021ac:	7893      	ldrb	r3, [r2, #2]
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	7093      	strb	r3, [r2, #2]
 80021b4:	e7f5      	b.n	80021a2 <encode_uint+0xba>
			conv->altform_0c = true;
 80021b6:	9a01      	ldr	r2, [sp, #4]
 80021b8:	7893      	ldrb	r3, [r2, #2]
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	7093      	strb	r3, [r2, #2]
 80021c0:	e7ef      	b.n	80021a2 <encode_uint+0xba>
 80021c2:	bf00      	nop
 80021c4:	0800c1d9 	.word	0x0800c1d9

080021c8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80021c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021cc:	b091      	sub	sp, #68	; 0x44
 80021ce:	4606      	mov	r6, r0
 80021d0:	460d      	mov	r5, r1
 80021d2:	4691      	mov	r9, r2
 80021d4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80021d6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80021d8:	f899 0000 	ldrb.w	r0, [r9]
 80021dc:	2800      	cmp	r0, #0
 80021de:	f000 82d5 	beq.w	800278c <cbvprintf+0x5c4>
		if (*fp != '%') {
 80021e2:	2825      	cmp	r0, #37	; 0x25
 80021e4:	d008      	beq.n	80021f8 <cbvprintf+0x30>
			OUTC(*fp++);
 80021e6:	f109 0901 	add.w	r9, r9, #1
 80021ea:	4629      	mov	r1, r5
 80021ec:	47b0      	blx	r6
 80021ee:	2800      	cmp	r0, #0
 80021f0:	f2c0 82cd 	blt.w	800278e <cbvprintf+0x5c6>
 80021f4:	3401      	adds	r4, #1
			continue;
 80021f6:	e7ef      	b.n	80021d8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 80021f8:	2300      	movs	r3, #0
 80021fa:	9304      	str	r3, [sp, #16]
 80021fc:	9305      	str	r3, [sp, #20]
 80021fe:	9306      	str	r3, [sp, #24]
 8002200:	9307      	str	r3, [sp, #28]
 8002202:	9308      	str	r3, [sp, #32]
 8002204:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8002206:	4649      	mov	r1, r9
 8002208:	a806      	add	r0, sp, #24
 800220a:	f7ff fde3 	bl	8001dd4 <extract_conversion>
 800220e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8002210:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002214:	f013 0f01 	tst.w	r3, #1
 8002218:	f000 8097 	beq.w	800234a <cbvprintf+0x182>
			width = va_arg(ap, int);
 800221c:	9b03      	ldr	r3, [sp, #12]
 800221e:	1d1a      	adds	r2, r3, #4
 8002220:	9203      	str	r2, [sp, #12]
 8002222:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8002224:	2f00      	cmp	r7, #0
 8002226:	f2c0 8088 	blt.w	800233a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 800222a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800222e:	f013 0f04 	tst.w	r3, #4
 8002232:	f000 809c 	beq.w	800236e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8002236:	9b03      	ldr	r3, [sp, #12]
 8002238:	1d1a      	adds	r2, r3, #4
 800223a:	9203      	str	r2, [sp, #12]
 800223c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002240:	f1ba 0f00 	cmp.w	sl, #0
 8002244:	f2c0 808a 	blt.w	800235c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 800224c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 800224e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002252:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002256:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800225a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 800225e:	2b01      	cmp	r3, #1
 8002260:	f000 808e 	beq.w	8002380 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002264:	2b02      	cmp	r3, #2
 8002266:	f000 80d3 	beq.w	8002410 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 800226a:	2b04      	cmp	r3, #4
 800226c:	f000 8124 	beq.w	80024b8 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002270:	2b03      	cmp	r3, #3
 8002272:	f000 813b 	beq.w	80024ec <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002276:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800227a:	f018 0b03 	ands.w	fp, r8, #3
 800227e:	f040 813b 	bne.w	80024f8 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002282:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002286:	3b25      	subs	r3, #37	; 0x25
 8002288:	2b53      	cmp	r3, #83	; 0x53
 800228a:	f200 81e6 	bhi.w	800265a <cbvprintf+0x492>
 800228e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002292:	0140      	.short	0x0140
 8002294:	01e401e4 	.word	0x01e401e4
 8002298:	01e401e4 	.word	0x01e401e4
 800229c:	01e401e4 	.word	0x01e401e4
 80022a0:	01e401e4 	.word	0x01e401e4
 80022a4:	01e401e4 	.word	0x01e401e4
 80022a8:	01e401e4 	.word	0x01e401e4
 80022ac:	01e401e4 	.word	0x01e401e4
 80022b0:	01e401e4 	.word	0x01e401e4
 80022b4:	01e401e4 	.word	0x01e401e4
 80022b8:	01e401e4 	.word	0x01e401e4
 80022bc:	01e401e4 	.word	0x01e401e4
 80022c0:	01e401e4 	.word	0x01e401e4
 80022c4:	01e401e4 	.word	0x01e401e4
 80022c8:	01e401e4 	.word	0x01e401e4
 80022cc:	01e401e4 	.word	0x01e401e4
 80022d0:	01e401e4 	.word	0x01e401e4
 80022d4:	01e401e4 	.word	0x01e401e4
 80022d8:	01e401e4 	.word	0x01e401e4
 80022dc:	01e401e4 	.word	0x01e401e4
 80022e0:	01e401e4 	.word	0x01e401e4
 80022e4:	01e401e4 	.word	0x01e401e4
 80022e8:	01e401e4 	.word	0x01e401e4
 80022ec:	01e401e4 	.word	0x01e401e4
 80022f0:	01e401e4 	.word	0x01e401e4
 80022f4:	01e401e4 	.word	0x01e401e4
 80022f8:	01e40181 	.word	0x01e40181
 80022fc:	01e401e4 	.word	0x01e401e4
 8002300:	01e401e4 	.word	0x01e401e4
 8002304:	01e401e4 	.word	0x01e401e4
 8002308:	01e401e4 	.word	0x01e401e4
 800230c:	015e01e4 	.word	0x015e01e4
 8002310:	01e40167 	.word	0x01e40167
 8002314:	01e401e4 	.word	0x01e401e4
 8002318:	016701e4 	.word	0x016701e4
 800231c:	01e401e4 	.word	0x01e401e4
 8002320:	01e401e4 	.word	0x01e401e4
 8002324:	018101be 	.word	0x018101be
 8002328:	01e401a2 	.word	0x01e401a2
 800232c:	014d01e4 	.word	0x014d01e4
 8002330:	018101e4 	.word	0x018101e4
 8002334:	01e401e4 	.word	0x01e401e4
 8002338:	0181      	.short	0x0181
				conv->flag_dash = true;
 800233a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8002346:	427f      	negs	r7, r7
 8002348:	e76f      	b.n	800222a <cbvprintf+0x62>
		} else if (conv->width_present) {
 800234a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db02      	blt.n	8002358 <cbvprintf+0x190>
		int width = -1;
 8002352:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002356:	e768      	b.n	800222a <cbvprintf+0x62>
			width = conv->width_value;
 8002358:	9f07      	ldr	r7, [sp, #28]
 800235a:	e766      	b.n	800222a <cbvprintf+0x62>
				conv->prec_present = false;
 800235c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002360:	f36f 0341 	bfc	r3, #1, #1
 8002364:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002368:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800236c:	e76c      	b.n	8002248 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 800236e:	f013 0f02 	tst.w	r3, #2
 8002372:	d002      	beq.n	800237a <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002374:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002378:	e766      	b.n	8002248 <cbvprintf+0x80>
		int precision = -1;
 800237a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800237e:	e763      	b.n	8002248 <cbvprintf+0x80>
			switch (length_mod) {
 8002380:	1ecb      	subs	r3, r1, #3
 8002382:	2b04      	cmp	r3, #4
 8002384:	d804      	bhi.n	8002390 <cbvprintf+0x1c8>
 8002386:	e8df f003 	tbb	[pc, r3]
 800238a:	1d0b      	.short	0x1d0b
 800238c:	3529      	.short	0x3529
 800238e:	35          	.byte	0x35
 800238f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	9203      	str	r2, [sp, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	17da      	asrs	r2, r3, #31
 800239a:	9304      	str	r3, [sp, #16]
 800239c:	9205      	str	r2, [sp, #20]
				break;
 800239e:	e006      	b.n	80023ae <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	1d1a      	adds	r2, r3, #4
 80023a4:	9203      	str	r2, [sp, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	17da      	asrs	r2, r3, #31
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 80023ae:	2901      	cmp	r1, #1
 80023b0:	d028      	beq.n	8002404 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 80023b2:	2902      	cmp	r1, #2
 80023b4:	f47f af5f 	bne.w	8002276 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 80023b8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80023bc:	17da      	asrs	r2, r3, #31
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	9205      	str	r2, [sp, #20]
 80023c2:	e758      	b.n	8002276 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	3307      	adds	r3, #7
 80023c8:	f023 0307 	bic.w	r3, r3, #7
 80023cc:	f103 0208 	add.w	r2, r3, #8
 80023d0:	9203      	str	r2, [sp, #12]
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80023d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80023da:	e7e8      	b.n	80023ae <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	3307      	adds	r3, #7
 80023e0:	f023 0307 	bic.w	r3, r3, #7
 80023e4:	f103 0208 	add.w	r2, r3, #8
 80023e8:	9203      	str	r2, [sp, #12]
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80023ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80023f2:	e7dc      	b.n	80023ae <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80023f4:	9b03      	ldr	r3, [sp, #12]
 80023f6:	1d1a      	adds	r2, r3, #4
 80023f8:	9203      	str	r2, [sp, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	17da      	asrs	r2, r3, #31
				value->sint =
 80023fe:	9304      	str	r3, [sp, #16]
 8002400:	9205      	str	r2, [sp, #20]
				break;
 8002402:	e7d4      	b.n	80023ae <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8002404:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002408:	9304      	str	r3, [sp, #16]
 800240a:	2300      	movs	r3, #0
 800240c:	9305      	str	r3, [sp, #20]
 800240e:	e732      	b.n	8002276 <cbvprintf+0xae>
			switch (length_mod) {
 8002410:	1ecb      	subs	r3, r1, #3
 8002412:	2b04      	cmp	r3, #4
 8002414:	d804      	bhi.n	8002420 <cbvprintf+0x258>
 8002416:	e8df f003 	tbb	[pc, r3]
 800241a:	1f0b      	.short	0x1f0b
 800241c:	4135      	.short	0x4135
 800241e:	41          	.byte	0x41
 800241f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	9203      	str	r2, [sp, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	9304      	str	r3, [sp, #16]
 800242a:	2300      	movs	r3, #0
 800242c:	9305      	str	r3, [sp, #20]
				break;
 800242e:	e01e      	b.n	800246e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8002430:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8002434:	2b63      	cmp	r3, #99	; 0x63
 8002436:	d007      	beq.n	8002448 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002438:	9b03      	ldr	r3, [sp, #12]
 800243a:	1d1a      	adds	r2, r3, #4
 800243c:	9203      	str	r2, [sp, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	9304      	str	r3, [sp, #16]
 8002442:	2300      	movs	r3, #0
 8002444:	9305      	str	r3, [sp, #20]
 8002446:	e012      	b.n	800246e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	9203      	str	r2, [sp, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	2300      	movs	r3, #0
 8002454:	9305      	str	r3, [sp, #20]
 8002456:	e00a      	b.n	800246e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002458:	9b03      	ldr	r3, [sp, #12]
 800245a:	3307      	adds	r3, #7
 800245c:	f023 0307 	bic.w	r3, r3, #7
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	9203      	str	r2, [sp, #12]
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800246a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 800246e:	2901      	cmp	r1, #1
 8002470:	d01c      	beq.n	80024ac <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002472:	2902      	cmp	r1, #2
 8002474:	f47f aeff 	bne.w	8002276 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002478:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800247c:	9304      	str	r3, [sp, #16]
 800247e:	2300      	movs	r3, #0
 8002480:	9305      	str	r3, [sp, #20]
 8002482:	e6f8      	b.n	8002276 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002484:	9b03      	ldr	r3, [sp, #12]
 8002486:	3307      	adds	r3, #7
 8002488:	f023 0307 	bic.w	r3, r3, #7
 800248c:	f103 0208 	add.w	r2, r3, #8
 8002490:	9203      	str	r2, [sp, #12]
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002496:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800249a:	e7e8      	b.n	800246e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 800249c:	9b03      	ldr	r3, [sp, #12]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	9203      	str	r2, [sp, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
				value->uint =
 80024a4:	9304      	str	r3, [sp, #16]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9305      	str	r3, [sp, #20]
				break;
 80024aa:	e7e0      	b.n	800246e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 80024ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80024b0:	9304      	str	r3, [sp, #16]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9305      	str	r3, [sp, #20]
 80024b6:	e6de      	b.n	8002276 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 80024b8:	2908      	cmp	r1, #8
 80024ba:	d00b      	beq.n	80024d4 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	3307      	adds	r3, #7
 80024c0:	f023 0307 	bic.w	r3, r3, #7
 80024c4:	f103 0208 	add.w	r2, r3, #8
 80024c8:	9203      	str	r2, [sp, #12]
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80024d2:	e6d0      	b.n	8002276 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	3307      	adds	r3, #7
 80024d8:	f023 0307 	bic.w	r3, r3, #7
 80024dc:	f103 0208 	add.w	r2, r3, #8
 80024e0:	9203      	str	r2, [sp, #12]
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80024ea:	e6c4      	b.n	8002276 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80024ec:	9b03      	ldr	r3, [sp, #12]
 80024ee:	1d1a      	adds	r2, r3, #4
 80024f0:	9203      	str	r2, [sp, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	9304      	str	r3, [sp, #16]
 80024f6:	e6be      	b.n	8002276 <cbvprintf+0xae>
			OUTS(sp, fp);
 80024f8:	9f02      	ldr	r7, [sp, #8]
 80024fa:	463b      	mov	r3, r7
 80024fc:	464a      	mov	r2, r9
 80024fe:	4629      	mov	r1, r5
 8002500:	4630      	mov	r0, r6
 8002502:	f007 f899 	bl	8009638 <outs>
 8002506:	2800      	cmp	r0, #0
 8002508:	f2c0 8141 	blt.w	800278e <cbvprintf+0x5c6>
 800250c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 800250e:	46b9      	mov	r9, r7
			continue;
 8002510:	e662      	b.n	80021d8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8002512:	4629      	mov	r1, r5
 8002514:	2025      	movs	r0, #37	; 0x25
 8002516:	47b0      	blx	r6
 8002518:	2800      	cmp	r0, #0
 800251a:	f2c0 8138 	blt.w	800278e <cbvprintf+0x5c6>
 800251e:	3401      	adds	r4, #1
		char sign = 0;
 8002520:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002522:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002526:	f04f 0900 	mov.w	r9, #0
			break;
 800252a:	e09b      	b.n	8002664 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 800252c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8002530:	f1ba 0f00 	cmp.w	sl, #0
 8002534:	db07      	blt.n	8002546 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8002536:	4651      	mov	r1, sl
 8002538:	4648      	mov	r0, r9
 800253a:	f008 ff1f 	bl	800b37c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 800253e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002542:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002544:	e08e      	b.n	8002664 <cbvprintf+0x49c>
				len = strlen(bps);
 8002546:	4648      	mov	r0, r9
 8002548:	f7fe fbf9 	bl	8000d3e <strlen>
 800254c:	e7f7      	b.n	800253e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 800254e:	9b04      	ldr	r3, [sp, #16]
 8002550:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002554:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002556:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 800255a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 800255e:	e081      	b.n	8002664 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002560:	f018 0f08 	tst.w	r8, #8
 8002564:	d105      	bne.n	8002572 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002566:	f018 0810 	ands.w	r8, r8, #16
 800256a:	d004      	beq.n	8002576 <cbvprintf+0x3ae>
				sign = ' ';
 800256c:	f04f 0820 	mov.w	r8, #32
 8002570:	e001      	b.n	8002576 <cbvprintf+0x3ae>
				sign = '+';
 8002572:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002576:	9a04      	ldr	r2, [sp, #16]
 8002578:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 800257a:	2b00      	cmp	r3, #0
 800257c:	db02      	blt.n	8002584 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 800257e:	9204      	str	r2, [sp, #16]
 8002580:	9305      	str	r3, [sp, #20]
 8002582:	e008      	b.n	8002596 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002584:	4252      	negs	r2, r2
 8002586:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800258a:	9204      	str	r2, [sp, #16]
 800258c:	9305      	str	r3, [sp, #20]
				sign = '-';
 800258e:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002592:	e000      	b.n	8002596 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002594:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002596:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	ab0a      	add	r3, sp, #40	; 0x28
 800259e:	aa06      	add	r2, sp, #24
 80025a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80025a4:	f7ff fda0 	bl	80020e8 <encode_uint>
 80025a8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 80025aa:	f1ba 0f00 	cmp.w	sl, #0
 80025ae:	f2c0 8088 	blt.w	80026c2 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 80025b2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80025b6:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 80025ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80025be:	f36f 1286 	bfc	r2, #6, #1
 80025c2:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 80025c6:	459a      	cmp	sl, r3
 80025c8:	d97e      	bls.n	80026c8 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 80025ca:	ebaa 0303 	sub.w	r3, sl, r3
 80025ce:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 80025d0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80025d4:	e046      	b.n	8002664 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 80025d6:	9804      	ldr	r0, [sp, #16]
 80025d8:	b928      	cbnz	r0, 80025e6 <cbvprintf+0x41e>
		char sign = 0;
 80025da:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 80025dc:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002794 <cbvprintf+0x5cc>
			bps = "(nil)";
 80025e0:	f1aa 0905 	sub.w	r9, sl, #5
 80025e4:	e03e      	b.n	8002664 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80025e6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	ab0a      	add	r3, sp, #40	; 0x28
 80025ee:	aa06      	add	r2, sp, #24
 80025f0:	2100      	movs	r1, #0
 80025f2:	f7ff fd79 	bl	80020e8 <encode_uint>
 80025f6:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80025f8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80025fc:	f043 0310 	orr.w	r3, r3, #16
 8002600:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8002604:	2378      	movs	r3, #120	; 0x78
 8002606:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 800260a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 800260c:	e7cd      	b.n	80025aa <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 800260e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8002610:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002614:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002618:	2b07      	cmp	r3, #7
 800261a:	d806      	bhi.n	800262a <cbvprintf+0x462>
 800261c:	e8df f003 	tbb	[pc, r3]
 8002620:	0f0d0b04 	.word	0x0f0d0b04
 8002624:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8002628:	6014      	str	r4, [r2, #0]
		char sign = 0;
 800262a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 800262c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002630:	f04f 0900 	mov.w	r9, #0
}
 8002634:	e016      	b.n	8002664 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8002636:	7014      	strb	r4, [r2, #0]
		break;
 8002638:	e7f7      	b.n	800262a <cbvprintf+0x462>
		*(short *)dp = (short)count;
 800263a:	8014      	strh	r4, [r2, #0]
		break;
 800263c:	e7f5      	b.n	800262a <cbvprintf+0x462>
		*(long *)dp = (long)count;
 800263e:	6014      	str	r4, [r2, #0]
		break;
 8002640:	e7f3      	b.n	800262a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8002642:	17e3      	asrs	r3, r4, #31
 8002644:	6014      	str	r4, [r2, #0]
 8002646:	6053      	str	r3, [r2, #4]
		break;
 8002648:	e7ef      	b.n	800262a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 800264a:	17e3      	asrs	r3, r4, #31
 800264c:	6014      	str	r4, [r2, #0]
 800264e:	6053      	str	r3, [r2, #4]
		break;
 8002650:	e7eb      	b.n	800262a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002652:	6014      	str	r4, [r2, #0]
		break;
 8002654:	e7e9      	b.n	800262a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002656:	6014      	str	r4, [r2, #0]
		break;
 8002658:	e7e7      	b.n	800262a <cbvprintf+0x462>
		switch (conv->specifier) {
 800265a:	46d8      	mov	r8, fp
 800265c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002660:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002664:	f1b9 0f00 	cmp.w	r9, #0
 8002668:	f000 808d 	beq.w	8002786 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 800266c:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002670:	f1b8 0f00 	cmp.w	r8, #0
 8002674:	d000      	beq.n	8002678 <cbvprintf+0x4b0>
			nj_len += 1U;
 8002676:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002678:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800267c:	f011 0f10 	tst.w	r1, #16
 8002680:	d025      	beq.n	80026ce <cbvprintf+0x506>
			nj_len += 2U;
 8002682:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002684:	9b07      	ldr	r3, [sp, #28]
 8002686:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002688:	f011 0f40 	tst.w	r1, #64	; 0x40
 800268c:	d001      	beq.n	8002692 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 800268e:	9a08      	ldr	r2, [sp, #32]
 8002690:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002692:	2f00      	cmp	r7, #0
 8002694:	dd31      	ble.n	80026fa <cbvprintf+0x532>
			width -= (int)nj_len;
 8002696:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002698:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800269c:	f013 0f04 	tst.w	r3, #4
 80026a0:	d12b      	bne.n	80026fa <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 80026a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026a6:	d017      	beq.n	80026d8 <cbvprintf+0x510>
					if (sign != 0) {
 80026a8:	f1b8 0f00 	cmp.w	r8, #0
 80026ac:	d017      	beq.n	80026de <cbvprintf+0x516>
						OUTC(sign);
 80026ae:	4629      	mov	r1, r5
 80026b0:	4640      	mov	r0, r8
 80026b2:	47b0      	blx	r6
 80026b4:	2800      	cmp	r0, #0
 80026b6:	db6a      	blt.n	800278e <cbvprintf+0x5c6>
 80026b8:	3401      	adds	r4, #1
						sign = 0;
 80026ba:	46d8      	mov	r8, fp
					}
					pad = '0';
 80026bc:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80026c0:	e00f      	b.n	80026e2 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 80026c2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80026c6:	e7cd      	b.n	8002664 <cbvprintf+0x49c>
 80026c8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80026cc:	e7ca      	b.n	8002664 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 80026ce:	f011 0f08 	tst.w	r1, #8
 80026d2:	d0d7      	beq.n	8002684 <cbvprintf+0x4bc>
			nj_len += 1U;
 80026d4:	3201      	adds	r2, #1
 80026d6:	e7d5      	b.n	8002684 <cbvprintf+0x4bc>
				char pad = ' ';
 80026d8:	f04f 0b20 	mov.w	fp, #32
 80026dc:	e001      	b.n	80026e2 <cbvprintf+0x51a>
					pad = '0';
 80026de:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80026e2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80026e4:	1e5f      	subs	r7, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd07      	ble.n	80026fa <cbvprintf+0x532>
					OUTC(pad);
 80026ea:	4629      	mov	r1, r5
 80026ec:	4658      	mov	r0, fp
 80026ee:	47b0      	blx	r6
 80026f0:	2800      	cmp	r0, #0
 80026f2:	db4c      	blt.n	800278e <cbvprintf+0x5c6>
 80026f4:	3401      	adds	r4, #1
				while (width-- > 0) {
 80026f6:	463b      	mov	r3, r7
 80026f8:	e7f4      	b.n	80026e4 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80026fa:	f1b8 0f00 	cmp.w	r8, #0
 80026fe:	d005      	beq.n	800270c <cbvprintf+0x544>
			OUTC(sign);
 8002700:	4629      	mov	r1, r5
 8002702:	4640      	mov	r0, r8
 8002704:	47b0      	blx	r6
 8002706:	2800      	cmp	r0, #0
 8002708:	db41      	blt.n	800278e <cbvprintf+0x5c6>
 800270a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 800270c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002710:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002714:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002718:	4313      	orrs	r3, r2
 800271a:	d005      	beq.n	8002728 <cbvprintf+0x560>
				OUTC('0');
 800271c:	4629      	mov	r1, r5
 800271e:	2030      	movs	r0, #48	; 0x30
 8002720:	47b0      	blx	r6
 8002722:	2800      	cmp	r0, #0
 8002724:	db33      	blt.n	800278e <cbvprintf+0x5c6>
 8002726:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8002728:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800272c:	f013 0f10 	tst.w	r3, #16
 8002730:	d006      	beq.n	8002740 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8002732:	4629      	mov	r1, r5
 8002734:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8002738:	47b0      	blx	r6
 800273a:	2800      	cmp	r0, #0
 800273c:	db27      	blt.n	800278e <cbvprintf+0x5c6>
 800273e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002740:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002742:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002746:	2b00      	cmp	r3, #0
 8002748:	dd07      	ble.n	800275a <cbvprintf+0x592>
				OUTC('0');
 800274a:	4629      	mov	r1, r5
 800274c:	2030      	movs	r0, #48	; 0x30
 800274e:	47b0      	blx	r6
 8002750:	2800      	cmp	r0, #0
 8002752:	db1c      	blt.n	800278e <cbvprintf+0x5c6>
 8002754:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002756:	4643      	mov	r3, r8
 8002758:	e7f3      	b.n	8002742 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 800275a:	4653      	mov	r3, sl
 800275c:	464a      	mov	r2, r9
 800275e:	4629      	mov	r1, r5
 8002760:	4630      	mov	r0, r6
 8002762:	f006 ff69 	bl	8009638 <outs>
 8002766:	2800      	cmp	r0, #0
 8002768:	db11      	blt.n	800278e <cbvprintf+0x5c6>
 800276a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 800276c:	2f00      	cmp	r7, #0
 800276e:	dd07      	ble.n	8002780 <cbvprintf+0x5b8>
			OUTC(' ');
 8002770:	4629      	mov	r1, r5
 8002772:	2020      	movs	r0, #32
 8002774:	47b0      	blx	r6
 8002776:	2800      	cmp	r0, #0
 8002778:	db09      	blt.n	800278e <cbvprintf+0x5c6>
 800277a:	3401      	adds	r4, #1
			--width;
 800277c:	3f01      	subs	r7, #1
 800277e:	e7f5      	b.n	800276c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002780:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002784:	e528      	b.n	80021d8 <cbvprintf+0x10>
 8002786:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800278a:	e525      	b.n	80021d8 <cbvprintf+0x10>
		}
	}

	return count;
 800278c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 800278e:	b011      	add	sp, #68	; 0x44
 8002790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002794:	0800bd55 	.word	0x0800bd55

08002798 <stm32l1_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32l1_init(const struct device *arg)
{
 8002798:	b082      	sub	sp, #8
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800279a:	f04f 0210 	mov.w	r2, #16
 800279e:	f3ef 8311 	mrs	r3, BASEPRI
 80027a2:	f382 8812 	msr	BASEPRI_MAX, r2
 80027a6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 2.1 MHz from MSI */
	SystemCoreClock = 2097000;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <stm32l1_init+0x48>)
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <stm32l1_init+0x4c>)
 80027b6:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <stm32l1_init+0x50>)
 80027ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80027ca:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <stm32l1_init+0x54>)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80027d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d8:	6013      	str	r3, [r2, #0]
	 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);

	return 0;
}
 80027da:	2000      	movs	r0, #0
 80027dc:	b002      	add	sp, #8
 80027de:	4770      	bx	lr
 80027e0:	200000ac 	.word	0x200000ac
 80027e4:	001fff68 	.word	0x001fff68
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000

080027f0 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 80027f0:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 80027f2:	4c04      	ldr	r4, [pc, #16]	; (8002804 <__do_init_array_aux+0x14>)
 80027f4:	e002      	b.n	80027fc <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 80027f6:	f854 3b04 	ldr.w	r3, [r4], #4
 80027fa:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <__do_init_array_aux+0x18>)
 80027fe:	429c      	cmp	r4, r3
 8002800:	d3f9      	bcc.n	80027f6 <__do_init_array_aux+0x6>
	}
}
 8002802:	bd10      	pop	{r4, pc}
 8002804:	0800bb64 	.word	0x0800bb64
 8002808:	0800bb64 	.word	0x0800bb64

0800280c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <__do_global_ctors_aux+0x1c>)
 800280e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8002810:	b14b      	cbz	r3, 8002826 <__do_global_ctors_aux+0x1a>
{
 8002812:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8002814:	1e5c      	subs	r4, r3, #1
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__do_global_ctors_aux+0x1c>)
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	4798      	blx	r3
 800281e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8002820:	2c00      	cmp	r4, #0
 8002822:	d1f7      	bne.n	8002814 <__do_global_ctors_aux+0x8>
	}
}
 8002824:	bd10      	pop	{r4, pc}
 8002826:	4770      	bx	lr
 8002828:	0800bb5c 	.word	0x0800bb5c

0800282c <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 800282c:	28af      	cmp	r0, #175	; 0xaf
 800282e:	d81d      	bhi.n	800286c <stm32_pin_configure+0x40>
{
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	4604      	mov	r4, r0
 8002834:	460f      	mov	r7, r1
 8002836:	4615      	mov	r5, r2
 8002838:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <stm32_pin_configure+0x48>)
 800283c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8002840:	b18e      	cbz	r6, 8002866 <stm32_pin_configure+0x3a>
 8002842:	4630      	mov	r0, r6
 8002844:	f007 ffd2 	bl	800a7ec <z_device_ready>
 8002848:	b150      	cbz	r0, 8002860 <stm32_pin_configure+0x34>
 800284a:	2300      	movs	r3, #0
 800284c:	b95b      	cbnz	r3, 8002866 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 800284e:	462b      	mov	r3, r5
 8002850:	463a      	mov	r2, r7
 8002852:	f004 010f 	and.w	r1, r4, #15
 8002856:	4630      	mov	r0, r6
 8002858:	f007 f93b 	bl	8009ad2 <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 800285c:	2000      	movs	r0, #0
}
 800285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002860:	f06f 0312 	mvn.w	r3, #18
 8002864:	e7f2      	b.n	800284c <stm32_pin_configure+0x20>
		return -ENODEV;
 8002866:	f06f 0012 	mvn.w	r0, #18
 800286a:	e7f8      	b.n	800285e <stm32_pin_configure+0x32>
		return -EINVAL;
 800286c:	f06f 0015 	mvn.w	r0, #21
}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	0800bd58 	.word	0x0800bd58

08002878 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002878:	4901      	ldr	r1, [pc, #4]	; (8002880 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800287a:	2210      	movs	r2, #16
	str	r2, [r1]
 800287c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800287e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002880:	e000ed10 	.word	0xe000ed10

08002884 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8002884:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8002886:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002888:	f380 8811 	msr	BASEPRI, r0
	isb
 800288c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8002890:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8002894:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8002896:	b662      	cpsie	i
	isb
 8002898:	f3bf 8f6f 	isb	sy

	bx	lr
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80028a0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80028a2:	2800      	cmp	r0, #0
 80028a4:	db07      	blt.n	80028b6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	f000 021f 	and.w	r2, r0, #31
 80028aa:	0940      	lsrs	r0, r0, #5
 80028ac:	2301      	movs	r3, #1
 80028ae:	4093      	lsls	r3, r2
 80028b0:	4a01      	ldr	r2, [pc, #4]	; (80028b8 <arch_irq_enable+0x18>)
 80028b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100

080028bc <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 80028bc:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80028be:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80028c0:	2800      	cmp	r0, #0
 80028c2:	db08      	blt.n	80028d6 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	0109      	lsls	r1, r1, #4
 80028c6:	b2c9      	uxtb	r1, r1
 80028c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80028cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80028d0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 80028d4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	f000 000f 	and.w	r0, r0, #15
 80028da:	0109      	lsls	r1, r1, #4
 80028dc:	b2c9      	uxtb	r1, r1
 80028de:	4b01      	ldr	r3, [pc, #4]	; (80028e4 <z_arm_irq_priority_set+0x28>)
 80028e0:	5419      	strb	r1, [r3, r0]
}
 80028e2:	4770      	bx	lr
 80028e4:	e000ed14 	.word	0xe000ed14

080028e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80028e8:	bf30      	wfi
    b z_SysNmiOnReset
 80028ea:	f7ff bffd 	b.w	80028e8 <z_SysNmiOnReset>
 80028ee:	bf00      	nop

080028f0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80028f0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <z_arm_prep_c+0x28>)
 80028f4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80028f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028fc:	4a07      	ldr	r2, [pc, #28]	; (800291c <z_arm_prep_c+0x2c>)
 80028fe:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002904:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8002908:	f003 fa88 	bl	8005e1c <z_bss_zero>
	z_data_copy();
 800290c:	f004 fa86 	bl	8006e1c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002910:	f000 f9f4 	bl	8002cfc <z_arm_interrupt_init>
	z_cstart();
 8002914:	f003 fa8e 	bl	8005e34 <z_cstart>
 8002918:	08000000 	.word	0x08000000
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <arch_swap+0x28>)
 8002922:	6893      	ldr	r3, [r2, #8]
 8002924:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8002926:	4909      	ldr	r1, [pc, #36]	; (800294c <arch_swap+0x2c>)
 8002928:	6809      	ldr	r1, [r1, #0]
 800292a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800292c:	4908      	ldr	r1, [pc, #32]	; (8002950 <arch_swap+0x30>)
 800292e:	684b      	ldr	r3, [r1, #4]
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	604b      	str	r3, [r1, #4]
 8002936:	2300      	movs	r3, #0
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002940:	6893      	ldr	r3, [r2, #8]
}
 8002942:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000bac 	.word	0x20000bac
 800294c:	0800c118 	.word	0x0800c118
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8002956:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8002958:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 800295c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800295e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002962:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002966:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8002968:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800296c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002970:	4f0c      	ldr	r7, [pc, #48]	; (80029a4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002972:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002976:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8002978:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800297a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800297c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 800297e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002980:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002982:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002986:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002988:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800298a:	f000 fa0b 	bl	8002da4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800298e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8002992:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8002996:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800299a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800299e:	4770      	bx	lr
    ldr r1, =_kernel
 80029a0:	20000bac 	.word	0x20000bac
    ldr v4, =_SCS_ICSR
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80029a8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80029ac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80029ae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80029b2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80029b6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80029b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80029bc:	2902      	cmp	r1, #2
    beq _oops
 80029be:	d0ff      	beq.n	80029c0 <_oops>

080029c0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80029c0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80029c2:	f006 fe8b 	bl	80096dc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80029c6:	bd01      	pop	{r0, pc}

080029c8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80029c8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80029ca:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 80029ce:	490d      	ldr	r1, [pc, #52]	; (8002a04 <arch_new_thread+0x3c>)
 80029d0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 80029d4:	f021 0101 	bic.w	r1, r1, #1
 80029d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 80029dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 80029e0:	9b01      	ldr	r3, [sp, #4]
 80029e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 80029e6:	9b02      	ldr	r3, [sp, #8]
 80029e8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 80029ec:	9b03      	ldr	r3, [sp, #12]
 80029ee:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 80029f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 80029fa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8002a00:	bc10      	pop	{r4}
 8002a02:	4770      	bx	lr
 8002a04:	0800909f 	.word	0x0800909f

08002a08 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <z_check_thread_stack_fail+0x48>)
 8002a0a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8002a0c:	b1ea      	cbz	r2, 8002a4a <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8002a0e:	f110 0f16 	cmn.w	r0, #22
 8002a12:	d010      	beq.n	8002a36 <z_check_thread_stack_fail+0x2e>
 8002a14:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002a16:	f1a3 0c20 	sub.w	ip, r3, #32
 8002a1a:	4584      	cmp	ip, r0
 8002a1c:	d805      	bhi.n	8002a2a <z_check_thread_stack_fail+0x22>
 8002a1e:	4283      	cmp	r3, r0
 8002a20:	d905      	bls.n	8002a2e <z_check_thread_stack_fail+0x26>
 8002a22:	428b      	cmp	r3, r1
 8002a24:	d805      	bhi.n	8002a32 <z_check_thread_stack_fail+0x2a>
 8002a26:	2100      	movs	r1, #0
 8002a28:	e00a      	b.n	8002a40 <z_check_thread_stack_fail+0x38>
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	e008      	b.n	8002a40 <z_check_thread_stack_fail+0x38>
 8002a2e:	2100      	movs	r1, #0
 8002a30:	e006      	b.n	8002a40 <z_check_thread_stack_fail+0x38>
 8002a32:	2101      	movs	r1, #1
 8002a34:	e004      	b.n	8002a40 <z_check_thread_stack_fail+0x38>
 8002a36:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002a38:	428b      	cmp	r3, r1
 8002a3a:	bf94      	ite	ls
 8002a3c:	2100      	movls	r1, #0
 8002a3e:	2101      	movhi	r1, #1
 8002a40:	b909      	cbnz	r1, 8002a46 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8002a42:	2000      	movs	r0, #0
}
 8002a44:	4770      	bx	lr
		return thread->stack_info.start;
 8002a46:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002a48:	4770      	bx	lr
		return 0;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000bac 	.word	0x20000bac

08002a54 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8002a54:	b508      	push	{r3, lr}
 8002a56:	460d      	mov	r5, r1
 8002a58:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <arch_switch_to_main_thread+0x28>)
 8002a5c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8002a5e:	f000 f9a1 	bl	8002da4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8002a62:	4620      	mov	r0, r4
 8002a64:	f385 8809 	msr	PSP, r5
 8002a68:	2100      	movs	r1, #0
 8002a6a:	b663      	cpsie	if
 8002a6c:	f381 8811 	msr	BASEPRI, r1
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	2200      	movs	r2, #0
 8002a76:	2300      	movs	r3, #0
 8002a78:	f006 fb11 	bl	800909e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002a7c:	20000bac 	.word	0x20000bac

08002a80 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8002a80:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8002a82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8002a86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8002a8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8002a8e:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8002a90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8002a92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8002a94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8002a96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8002a9a:	4902      	ldr	r1, [pc, #8]	; (8002aa4 <_isr_wrapper+0x24>)
	bx r1
 8002a9c:	4708      	bx	r1
 8002a9e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8002aa0:	0800b994 	.word	0x0800b994
	ldr r1, =z_arm_int_exit
 8002aa4:	08002aa9 	.word	0x08002aa9

08002aa8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8002aaa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8002aac:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8002aae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002ab0:	d003      	beq.n	8002aba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8002ab2:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8002ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002ab8:	600a      	str	r2, [r1, #0]

08002aba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8002aba:	4770      	bx	lr
	ldr r3, =_kernel
 8002abc:	20000bac 	.word	0x20000bac
	ldr r1, =_SCS_ICSR
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <bus_fault+0x44>)
 8002aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8002acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002ad4:	d00b      	beq.n	8002aee <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <bus_fault+0x44>)
 8002ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002ae0:	d005      	beq.n	8002aee <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 8002ae2:	b121      	cbz	r1, 8002aee <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002ae4:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <bus_fault+0x44>)
 8002ae6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002aec:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <bus_fault+0x44>)
 8002af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8002af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8002af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 8002afc:	2101      	movs	r1, #1
 8002afe:	f006 fdff 	bl	8009700 <memory_fault_recoverable>
 8002b02:	7020      	strb	r0, [r4, #0]

	return reason;
}
 8002b04:	2000      	movs	r0, #0
 8002b06:	bd10      	pop	{r4, pc}
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <usage_fault+0x20>)
 8002b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8002b20:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8002b26:	2000      	movs	r0, #0
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <mem_manage_fault>:
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f013 0f02 	tst.w	r3, #2
 8002b42:	d00c      	beq.n	8002b5e <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b46:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b4e:	d024      	beq.n	8002b9a <mem_manage_fault+0x6a>
			if (from_hard_fault != 0) {
 8002b50:	b139      	cbz	r1, 8002b62 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b54:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5a:	6293      	str	r3, [r2, #40]	; 0x28
 8002b5c:	e001      	b.n	8002b62 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
 8002b5e:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	f013 0f10 	tst.w	r3, #16
 8002b6c:	d104      	bne.n	8002b78 <mem_manage_fault+0x48>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b70:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002b72:	f014 0402 	ands.w	r4, r4, #2
 8002b76:	d004      	beq.n	8002b82 <mem_manage_fault+0x52>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b7a:	685c      	ldr	r4, [r3, #4]
 8002b7c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8002b80:	d10e      	bne.n	8002ba0 <mem_manage_fault+0x70>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <mem_manage_fault+0x84>)
 8002b84:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002b86:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002b8a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f006 fdb6 	bl	8009700 <memory_fault_recoverable>
 8002b94:	7030      	strb	r0, [r6, #0]
}
 8002b96:	4620      	mov	r0, r4
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
 8002b9a:	f06f 0015 	mvn.w	r0, #21
 8002b9e:	e7e0      	b.n	8002b62 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7ff ff31 	bl	8002a08 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d0ea      	beq.n	8002b82 <mem_manage_fault+0x52>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002bac:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8002bb0:	2402      	movs	r4, #2
 8002bb2:	e7e6      	b.n	8002b82 <mem_manage_fault+0x52>
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8002bb8:	b508      	push	{r3, lr}
 8002bba:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <hard_fault+0x78>)
 8002bc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002bc4:	f010 0002 	ands.w	r0, r0, #2
 8002bc8:	d12e      	bne.n	8002c28 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db2c      	blt.n	8002c2a <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <hard_fault+0x78>)
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8002bd8:	d028      	beq.n	8002c2c <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8002bda:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8002bde:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002be2:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d00f      	beq.n	8002c0a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <hard_fault+0x78>)
 8002bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bf0:	b973      	cbnz	r3, 8002c10 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <hard_fault+0x78>)
 8002bf4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bf8:	b983      	cbnz	r3, 8002c1c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <hard_fault+0x78>)
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b19b      	cbz	r3, 8002c2a <hard_fault+0x72>
			reason = usage_fault(esf);
 8002c02:	4660      	mov	r0, ip
 8002c04:	f7ff ff82 	bl	8002b0c <usage_fault>
 8002c08:	e00f      	b.n	8002c2a <hard_fault+0x72>
			reason = esf->basic.r0;
 8002c0a:	f8dc 0000 	ldr.w	r0, [ip]
 8002c0e:	e00c      	b.n	8002c2a <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002c10:	460a      	mov	r2, r1
 8002c12:	2101      	movs	r1, #1
 8002c14:	4660      	mov	r0, ip
 8002c16:	f7ff ff8b 	bl	8002b30 <mem_manage_fault>
 8002c1a:	e006      	b.n	8002c2a <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4660      	mov	r0, ip
 8002c22:	f7ff ff4f 	bl	8002ac4 <bus_fault>
 8002c26:	e000      	b.n	8002c2a <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002c28:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8002c2a:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002c2c:	4618      	mov	r0, r3
	return reason;
 8002c2e:	e7fc      	b.n	8002c2a <hard_fault+0x72>
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8002c34:	b530      	push	{r4, r5, lr}
 8002c36:	b08b      	sub	sp, #44	; 0x2c
 8002c38:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <z_arm_fault+0xa0>)
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002c42:	2300      	movs	r3, #0
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8002c4c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8002c50:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8002c54:	d115      	bne.n	8002c82 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8002c56:	f002 030c 	and.w	r3, r2, #12
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d014      	beq.n	8002c88 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8002c5e:	f012 0f08 	tst.w	r2, #8
 8002c62:	d00b      	beq.n	8002c7c <z_arm_fault+0x48>
	*nested_exc = false;
 8002c64:	2500      	movs	r5, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8002c66:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f006 fd4d 	bl	800970a <fault_handle>
 8002c70:	4686      	mov	lr, r0
	if (recoverable) {
 8002c72:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8002c76:	b153      	cbz	r3, 8002c8e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8002c78:	b00b      	add	sp, #44	; 0x2c
 8002c7a:	bd30      	pop	{r4, r5, pc}
			ptr_esf = (z_arch_esf_t *)msp;
 8002c7c:	4604      	mov	r4, r0
			*nested_exc = true;
 8002c7e:	2501      	movs	r5, #1
 8002c80:	e7f1      	b.n	8002c66 <z_arm_fault+0x32>
	*nested_exc = false;
 8002c82:	2500      	movs	r5, #0
		return NULL;
 8002c84:	462c      	mov	r4, r5
 8002c86:	e7ee      	b.n	8002c66 <z_arm_fault+0x32>
	*nested_exc = false;
 8002c88:	2500      	movs	r5, #0
		return NULL;
 8002c8a:	462c      	mov	r4, r5
 8002c8c:	e7eb      	b.n	8002c66 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002c8e:	f10d 0c04 	add.w	ip, sp, #4
 8002c92:	6820      	ldr	r0, [r4, #0]
 8002c94:	6861      	ldr	r1, [r4, #4]
 8002c96:	68a2      	ldr	r2, [r4, #8]
 8002c98:	68e3      	ldr	r3, [r4, #12]
 8002c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c9e:	6920      	ldr	r0, [r4, #16]
 8002ca0:	6961      	ldr	r1, [r4, #20]
 8002ca2:	69a2      	ldr	r2, [r4, #24]
 8002ca4:	69e3      	ldr	r3, [r4, #28]
 8002ca6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8002caa:	b145      	cbz	r5, 8002cbe <z_arm_fault+0x8a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb0:	b95a      	cbnz	r2, 8002cca <z_arm_fault+0x96>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002cb2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002cb6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8002cba:	9308      	str	r3, [sp, #32]
 8002cbc:	e005      	b.n	8002cca <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002cbe:	9b08      	ldr	r3, [sp, #32]
 8002cc0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8002cca:	a901      	add	r1, sp, #4
 8002ccc:	4670      	mov	r0, lr
 8002cce:	f006 fd01 	bl	80096d4 <z_arm_fatal_error>
 8002cd2:	e7d1      	b.n	8002c78 <z_arm_fault+0x44>
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002cd8:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <z_arm_fault_init+0xc>)
 8002cda:	6953      	ldr	r3, [r2, #20]
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002ce8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002cec:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002cf0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002cf2:	4672      	mov	r2, lr
	bl z_arm_fault
 8002cf4:	f7ff ff9e 	bl	8002c34 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002cf8:	bd01      	pop	{r0, pc}
 8002cfa:	bf00      	nop

08002cfc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002cfc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002cfe:	e006      	b.n	8002d0e <z_arm_interrupt_init+0x12>
 8002d00:	f002 010f 	and.w	r1, r2, #15
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <z_arm_interrupt_init+0x30>)
 8002d06:	440b      	add	r3, r1
 8002d08:	2110      	movs	r1, #16
 8002d0a:	7619      	strb	r1, [r3, #24]
 8002d0c:	3201      	adds	r2, #1
 8002d0e:	2a38      	cmp	r2, #56	; 0x38
 8002d10:	dc0a      	bgt.n	8002d28 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8002d12:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	dbf3      	blt.n	8002d00 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002d1c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002d20:	2110      	movs	r1, #16
 8002d22:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8002d26:	e7f1      	b.n	8002d0c <z_arm_interrupt_init+0x10>
	}
}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ecfc 	.word	0xe000ecfc

08002d30 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002d30:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002d32:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002d36:	4808      	ldr	r0, [pc, #32]	; (8002d58 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002d38:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8002d3c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002d3e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002d42:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002d46:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002d48:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002d4a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002d4e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002d52:	f7ff fdcd 	bl	80028f0 <z_arm_prep_c>
 8002d56:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002d58:	200025a0 	.word	0x200025a0

08002d5c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8002d5c:	b508      	push	{r3, lr}
	if (_current == thread) {
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <z_impl_k_thread_abort+0x24>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4283      	cmp	r3, r0
 8002d64:	d002      	beq.n	8002d6c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8002d66:	f004 f81d 	bl	8006da4 <z_thread_abort>
}
 8002d6a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d6c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f8      	beq.n	8002d66 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002d74:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <z_impl_k_thread_abort+0x28>)
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6053      	str	r3, [r2, #4]
 8002d7e:	e7f2      	b.n	8002d66 <z_impl_k_thread_abort+0xa>
 8002d80:	20000bac 	.word	0x20000bac
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8002d88:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002d8a:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <z_arm_configure_static_mpu_regions+0x10>)
 8002d8c:	4a03      	ldr	r2, [pc, #12]	; (8002d9c <z_arm_configure_static_mpu_regions+0x14>)
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4803      	ldr	r0, [pc, #12]	; (8002da0 <z_arm_configure_static_mpu_regions+0x18>)
 8002d92:	f006 fd40 	bl	8009816 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8002d96:	bd08      	pop	{r3, pc}
 8002d98:	20014000 	.word	0x20014000
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	0800bd84 	.word	0x0800bd84

08002da4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8002da4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002da6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002da8:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002dac:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8002dae:	2320      	movs	r3, #32
 8002db0:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8002db4:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002db6:	2101      	movs	r1, #1
 8002db8:	f006 fd31 	bl	800981e <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8002dbc:	bd08      	pop	{r3, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000728 	.word	0x20000728
 8002dc4:	150b0000 	.word	0x150b0000

08002dc8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <region_init+0x24>)
 8002dca:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002dce:	680b      	ldr	r3, [r1, #0]
 8002dd0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002dd4:	4303      	orrs	r3, r0
 8002dd6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002dda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002dde:	688b      	ldr	r3, [r1, #8]
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8002df0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8002df2:	4c03      	ldr	r4, [pc, #12]	; (8002e00 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002df4:	2301      	movs	r3, #1
 8002df6:	7822      	ldrb	r2, [r4, #0]
 8002df8:	f006 fce5 	bl	80097c6 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002dfc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8002dfe:	bd10      	pop	{r4, pc}
 8002e00:	20000c08 	.word	0x20000c08

08002e04 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8002e04:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002e06:	2300      	movs	r3, #0
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <mpu_configure_dynamic_mpu_regions+0x2c>)
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	f006 fcdb 	bl	80097c6 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002e10:	f110 0f16 	cmn.w	r0, #22
 8002e14:	d00a      	beq.n	8002e2c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002e16:	4603      	mov	r3, r0
 8002e18:	e006      	b.n	8002e28 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002e1a:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <mpu_configure_dynamic_mpu_regions+0x30>)
 8002e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8002e20:	2100      	movs	r1, #0
 8002e22:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8002e26:	3301      	adds	r3, #1
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	ddf6      	ble.n	8002e1a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8002e2c:	bd08      	pop	{r3, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000c08 	.word	0x20000c08
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <arm_core_mpu_enable+0x14>)
 8002e3a:	2205      	movs	r2, #5
 8002e3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002e40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e44:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002e50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <arm_core_mpu_disable+0x10>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8002e64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <z_arm_mpu_init+0x3c>)
 8002e68:	681d      	ldr	r5, [r3, #0]
 8002e6a:	2d08      	cmp	r5, #8
 8002e6c:	d815      	bhi.n	8002e9a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002e6e:	f7ff ffef 	bl	8002e50 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002e72:	2400      	movs	r4, #0
 8002e74:	e009      	b.n	8002e8a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <z_arm_mpu_init+0x3c>)
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002e7e:	0093      	lsls	r3, r2, #2
 8002e80:	4419      	add	r1, r3
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7ff ffa0 	bl	8002dc8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002e88:	3401      	adds	r4, #1
 8002e8a:	42a5      	cmp	r5, r4
 8002e8c:	d8f3      	bhi.n	8002e76 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <z_arm_mpu_init+0x40>)
 8002e90:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8002e92:	f7ff ffd1 	bl	8002e38 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002e96:	2000      	movs	r0, #0
}
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e9e:	e7fb      	b.n	8002e98 <z_arm_mpu_init+0x34>
 8002ea0:	0800bda8 	.word	0x0800bda8
 8002ea4:	20000c08 	.word	0x20000c08

08002ea8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8002ea8:	4b01      	ldr	r3, [pc, #4]	; (8002eb0 <__stdout_hook_install+0x8>)
 8002eaa:	6018      	str	r0, [r3, #0]
}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000008 	.word	0x20000008

08002eb4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8002eba:	2400      	movs	r4, #0
 8002ebc:	e000      	b.n	8002ec0 <z_impl_zephyr_read_stdin+0xc>
 8002ebe:	3401      	adds	r4, #1
 8002ec0:	42ac      	cmp	r4, r5
 8002ec2:	da08      	bge.n	8002ed6 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <z_impl_zephyr_read_stdin+0x28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4798      	blx	r3
 8002eca:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002ecc:	280a      	cmp	r0, #10
 8002ece:	d001      	beq.n	8002ed4 <z_impl_zephyr_read_stdin+0x20>
 8002ed0:	280d      	cmp	r0, #13
 8002ed2:	d1f4      	bne.n	8002ebe <z_impl_zephyr_read_stdin+0xa>
			i++;
 8002ed4:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004

08002ee0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8002ee6:	2400      	movs	r4, #0
 8002ee8:	e004      	b.n	8002ef4 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <z_impl_zephyr_write_stdout+0x30>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	7830      	ldrb	r0, [r6, #0]
 8002ef0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	42bc      	cmp	r4, r7
 8002ef6:	da08      	bge.n	8002f0a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8002ef8:	192e      	adds	r6, r5, r4
 8002efa:	5d2b      	ldrb	r3, [r5, r4]
 8002efc:	2b0a      	cmp	r3, #10
 8002efe:	d1f4      	bne.n	8002eea <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <z_impl_zephyr_write_stdout+0x30>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	200d      	movs	r0, #13
 8002f06:	4798      	blx	r3
 8002f08:	e7ef      	b.n	8002eea <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000008 	.word	0x20000008

08002f14 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8002f14:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8002f16:	2205      	movs	r2, #5
 8002f18:	4902      	ldr	r1, [pc, #8]	; (8002f24 <_exit+0x10>)
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f006 fc90 	bl	8009840 <_write>
	while (1) {
 8002f20:	e7fe      	b.n	8002f20 <_exit+0xc>
 8002f22:	bf00      	nop
 8002f24:	0800bd90 	.word	0x0800bd90

08002f28 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8002f28:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_sbrk+0x24>)
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <_sbrk+0x28>)
 8002f30:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8002f32:	440a      	add	r2, r1
 8002f34:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8002f38:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d202      	bcs.n	8002f46 <_sbrk+0x1e>
		heap_sz += count;
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <_sbrk+0x24>)
 8002f42:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8002f44:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8002f4a:	4770      	bx	lr
 8002f4c:	20000734 	.word	0x20000734
 8002f50:	20003212 	.word	0x20003212

08002f54 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4604      	mov	r4, r0
 8002f58:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8002f5a:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8002f5c:	e000      	b.n	8002f60 <__stm32_exti_isr+0xc>
 8002f5e:	3401      	adds	r4, #1
 8002f60:	42ac      	cmp	r4, r5
 8002f62:	da14      	bge.n	8002f8e <__stm32_exti_isr+0x3a>
	if (line < 32) {
 8002f64:	2c1f      	cmp	r4, #31
 8002f66:	dcfa      	bgt.n	8002f5e <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002f68:	2301      	movs	r3, #1
 8002f6a:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <__stm32_exti_isr+0x3c>)
 8002f6e:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8002f70:	ea33 0202 	bics.w	r2, r3, r2
 8002f74:	d1f3      	bne.n	8002f5e <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <__stm32_exti_isr+0x3c>)
 8002f78:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8002f7a:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ed      	beq.n	8002f5e <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8002f82:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8002f86:	6851      	ldr	r1, [r2, #4]
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4798      	blx	r3
 8002f8c:	e7e7      	b.n	8002f5e <__stm32_exti_isr+0xa>
		}
	}
}
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	40010400 	.word	0x40010400

08002f94 <stm32_exti_enable>:
{
 8002f94:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8002f96:	2301      	movs	r3, #1
 8002f98:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 8002f9a:	4a04      	ldr	r2, [pc, #16]	; (8002fac <stm32_exti_enable+0x18>)
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8002fa2:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <stm32_exti_enable+0x1c>)
 8002fa4:	5618      	ldrsb	r0, [r3, r0]
 8002fa6:	f7ff fc7b 	bl	80028a0 <arch_irq_enable>
}
 8002faa:	bd08      	pop	{r3, pc}
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	0800bde8 	.word	0x0800bde8

08002fb4 <stm32_exti_disable>:
	if (line < 32) {
 8002fb4:	281f      	cmp	r0, #31
 8002fb6:	dc06      	bgt.n	8002fc6 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <stm32_exti_disable+0x14>)
 8002fbe:	6810      	ldr	r0, [r2, #0]
 8002fc0:	ea20 0003 	bic.w	r0, r0, r3
 8002fc4:	6010      	str	r0, [r2, #0]
}
 8002fc6:	4770      	bx	lr
 8002fc8:	40010400 	.word	0x40010400

08002fcc <stm32_exti_trigger>:
	switch (trigger) {
 8002fcc:	2903      	cmp	r1, #3
 8002fce:	d832      	bhi.n	8003036 <stm32_exti_trigger+0x6a>
 8002fd0:	e8df f001 	tbb	[pc, r1]
 8002fd4:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8002fd8:	2301      	movs	r3, #1
 8002fda:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <stm32_exti_trigger+0x6c>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	ea22 0200 	bic.w	r2, r2, r0
 8002fe6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	ea22 0000 	bic.w	r0, r2, r0
 8002fee:	60d8      	str	r0, [r3, #12]
}
 8002ff0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <stm32_exti_trigger+0x6c>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4302      	orrs	r2, r0
 8002ffe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	ea22 0000 	bic.w	r0, r2, r0
 8003006:	60d8      	str	r0, [r3, #12]
}
 8003008:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800300a:	2301      	movs	r3, #1
 800300c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <stm32_exti_trigger+0x6c>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4302      	orrs	r2, r0
 8003016:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	ea22 0000 	bic.w	r0, r2, r0
 800301e:	6098      	str	r0, [r3, #8]
}
 8003020:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003022:	2301      	movs	r3, #1
 8003024:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <stm32_exti_trigger+0x6c>)
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4302      	orrs	r2, r0
 800302e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	4310      	orrs	r0, r2
 8003034:	60d8      	str	r0, [r3, #12]
}
 8003036:	4770      	bx	lr
 8003038:	40010400 	.word	0x40010400

0800303c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <stm32_exti_set_callback+0x20>)
 800303e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8003042:	b93b      	cbnz	r3, 8003054 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <stm32_exti_set_callback+0x20>)
 8003046:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 800304a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800304e:	6042      	str	r2, [r0, #4]

	return 0;
 8003050:	2000      	movs	r0, #0
 8003052:	4770      	bx	lr
		return -EBUSY;
 8003054:	f06f 000f 	mvn.w	r0, #15
}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000738 	.word	0x20000738

08003060 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <stm32_exti_unset_callback+0x10>)
 8003062:	2200      	movs	r2, #0
 8003064:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8003068:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800306c:	605a      	str	r2, [r3, #4]
}
 800306e:	4770      	bx	lr
 8003070:	20000738 	.word	0x20000738

08003074 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8003074:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003076:	680b      	ldr	r3, [r1, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d011      	beq.n	80030a0 <stm32_clock_control_on+0x2c>
 800307c:	2b03      	cmp	r3, #3
 800307e:	d01a      	beq.n	80030b6 <stm32_clock_control_on+0x42>
 8003080:	b11b      	cbz	r3, 800308a <stm32_clock_control_on+0x16>
 8003082:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8003086:	b004      	add	sp, #16
 8003088:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800308a:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800308c:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <stm32_clock_control_on+0x58>)
 800308e:	69d1      	ldr	r1, [r2, #28]
 8003090:	4319      	orrs	r1, r3
 8003092:	61d1      	str	r1, [r2, #28]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003094:	69d2      	ldr	r2, [r2, #28]
 8003096:	4013      	ands	r3, r2
 8003098:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800309a:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800309c:	2000      	movs	r0, #0
}
 800309e:	e7f2      	b.n	8003086 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80030a0:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <stm32_clock_control_on+0x58>)
 80030a4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80030a6:	4319      	orrs	r1, r3
 80030a8:	6251      	str	r1, [r2, #36]	; 0x24
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80030aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ac:	4013      	ands	r3, r2
 80030ae:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80030b0:	9b02      	ldr	r3, [sp, #8]
	return 0;
 80030b2:	2000      	movs	r0, #0
}
 80030b4:	e7e7      	b.n	8003086 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80030b6:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80030b8:	4a04      	ldr	r2, [pc, #16]	; (80030cc <stm32_clock_control_on+0x58>)
 80030ba:	6a11      	ldr	r1, [r2, #32]
 80030bc:	4319      	orrs	r1, r3
 80030be:	6211      	str	r1, [r2, #32]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030c0:	6a12      	ldr	r2, [r2, #32]
 80030c2:	4013      	ands	r3, r2
 80030c4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80030c6:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80030c8:	2000      	movs	r0, #0
}
 80030ca:	e7dc      	b.n	8003086 <stm32_clock_control_on+0x12>
 80030cc:	40023800 	.word	0x40023800

080030d0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80030d0:	680b      	ldr	r3, [r1, #0]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d00d      	beq.n	80030f2 <stm32_clock_control_off+0x22>
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d013      	beq.n	8003102 <stm32_clock_control_off+0x32>
 80030da:	b113      	cbz	r3, 80030e2 <stm32_clock_control_off+0x12>
 80030dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 80030e0:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80030e2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <stm32_clock_control_off+0x44>)
 80030e6:	69d3      	ldr	r3, [r2, #28]
 80030e8:	ea23 0301 	bic.w	r3, r3, r1
 80030ec:	61d3      	str	r3, [r2, #28]
	return 0;
 80030ee:	2000      	movs	r0, #0
}
 80030f0:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 80030f2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80030f4:	4a07      	ldr	r2, [pc, #28]	; (8003114 <stm32_clock_control_off+0x44>)
 80030f6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80030f8:	ea23 0301 	bic.w	r3, r3, r1
 80030fc:	6253      	str	r3, [r2, #36]	; 0x24
	return 0;
 80030fe:	2000      	movs	r0, #0
}
 8003100:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8003102:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003104:	4a03      	ldr	r2, [pc, #12]	; (8003114 <stm32_clock_control_off+0x44>)
 8003106:	6a13      	ldr	r3, [r2, #32]
 8003108:	ea23 0301 	bic.w	r3, r3, r1
 800310c:	6213      	str	r3, [r2, #32]
	return 0;
 800310e:	2000      	movs	r0, #0
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	460c      	mov	r4, r1
 800311c:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <stm32_clock_control_get_subsys_rate+0x3c>)
 8003120:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8003122:	2101      	movs	r1, #1
 8003124:	4630      	mov	r0, r6
 8003126:	f006 fc19 	bl	800995c <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d80e      	bhi.n	800314e <stm32_clock_control_get_subsys_rate+0x36>
 8003130:	e8df f003 	tbb	[pc, r3]
 8003134:	0a070404 	.word	0x0a070404
 8003138:	0d0d      	.short	0x0d0d
 800313a:	04          	.byte	0x04
 800313b:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 800313c:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800313e:	2000      	movs	r0, #0
}
 8003140:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8003142:	6028      	str	r0, [r5, #0]
	return 0;
 8003144:	2000      	movs	r0, #0
		break;
 8003146:	e7fb      	b.n	8003140 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8003148:	6028      	str	r0, [r5, #0]
	return 0;
 800314a:	2000      	movs	r0, #0
		break;
 800314c:	e7f8      	b.n	8003140 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800314e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003152:	e7f5      	b.n	8003140 <stm32_clock_control_get_subsys_rate+0x28>
 8003154:	200000ac 	.word	0x200000ac

08003158 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003158:	4b10      	ldr	r3, [pc, #64]	; (800319c <stm32_clock_switch_to_hsi+0x44>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f013 0f02 	tst.w	r3, #2
 8003160:	d109      	bne.n	8003176 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <stm32_clock_switch_to_hsi+0x44>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <stm32_clock_switch_to_hsi+0x44>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f013 0f02 	tst.w	r3, #2
 8003174:	d0fa      	beq.n	800316c <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <stm32_clock_switch_to_hsi+0x44>)
 8003178:	6893      	ldr	r3, [r2, #8]
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	4318      	orrs	r0, r3
 800318c:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800318e:	4b03      	ldr	r3, [pc, #12]	; (800319c <stm32_clock_switch_to_hsi+0x44>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003196:	2b04      	cmp	r3, #4
 8003198:	d1f9      	bne.n	800318e <stm32_clock_switch_to_hsi+0x36>
	}
}
 800319a:	4770      	bx	lr
 800319c:	40023800 	.word	0x40023800

080031a0 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 80031a0:	b510      	push	{r4, lr}
 80031a2:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 80031a4:	a803      	add	r0, sp, #12
 80031a6:	f006 fbd4 	bl	8009952 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80031aa:	f000 f81d 	bl	80031e8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80031ae:	a801      	add	r0, sp, #4
 80031b0:	f006 fbd7 	bl	8009962 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff ffcf 	bl	8003158 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031ba:	4c0a      	ldr	r4, [pc, #40]	; (80031e4 <stm32_clock_control_init+0x44>)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c2:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80031c4:	a903      	add	r1, sp, #12
 80031c6:	a801      	add	r0, sp, #4
 80031c8:	f002 fcfa 	bl	8005bc0 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031da:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80031dc:	2000      	movs	r0, #0
 80031de:	b006      	add	sp, #24
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80031e8:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <config_enable_default_clocks+0x1c>)
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	621a      	str	r2, [r3, #32]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80031fc:	9b01      	ldr	r3, [sp, #4]
	(defined(CONFIG_SOC_SERIES_STM32L0X) &&			  \
	 defined(CONFIG_ENTROPY_STM32_RNG))
	/* Enable System Configuration Controller clock. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
}
 80031fe:	b002      	add	sp, #8
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8003208:	b510      	push	{r4, lr}
 800320a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 800320c:	280a      	cmp	r0, #10
 800320e:	d007      	beq.n	8003220 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <console_out+0x28>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8003216:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4798      	blx	r3

	return c;
}
 800321c:	4620      	mov	r0, r4
 800321e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <console_out+0x28>)
 8003222:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8003224:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	210d      	movs	r1, #13
 800322a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 800322c:	e7f0      	b.n	8003210 <console_out+0x8>
 800322e:	bf00      	nop
 8003230:	200007b8 	.word	0x200007b8

08003234 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8003234:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8003236:	4c04      	ldr	r4, [pc, #16]	; (8003248 <uart_console_hook_install+0x14>)
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fe35 	bl	8002ea8 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800323e:	4620      	mov	r0, r4
 8003240:	f7fe fd9c 	bl	8001d7c <__printk_hook_install>
}
 8003244:	bd10      	pop	{r4, pc}
 8003246:	bf00      	nop
 8003248:	08003209 	.word	0x08003209

0800324c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800324c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <uart_console_init+0x28>)
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <uart_console_init+0x2c>)
 8003252:	6018      	str	r0, [r3, #0]
 8003254:	f007 faca 	bl	800a7ec <z_device_ready>
 8003258:	b128      	cbz	r0, 8003266 <uart_console_init+0x1a>
 800325a:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 800325c:	b933      	cbnz	r3, 800326c <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 800325e:	f7ff ffe9 	bl	8003234 <uart_console_hook_install>

	return 0;
 8003262:	2000      	movs	r0, #0
}
 8003264:	bd08      	pop	{r3, pc}
 8003266:	f06f 0312 	mvn.w	r3, #18
 800326a:	e7f7      	b.n	800325c <uart_console_init+0x10>
		return -ENODEV;
 800326c:	f06f 0012 	mvn.w	r0, #18
 8003270:	e7f8      	b.n	8003264 <uart_console_init+0x18>
 8003272:	bf00      	nop
 8003274:	0800b934 	.word	0x0800b934
 8003278:	200007b8 	.word	0x200007b8

0800327c <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800327c:	424a      	negs	r2, r1
 800327e:	f001 0303 	and.w	r3, r1, #3
 8003282:	f002 0203 	and.w	r2, r2, #3
 8003286:	bf58      	it	pl
 8003288:	4253      	negpl	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	230f      	movs	r3, #15
 8003290:	4093      	lsls	r3, r2
 8003292:	460a      	mov	r2, r1
 8003294:	2900      	cmp	r1, #0
 8003296:	db19      	blt.n	80032cc <gpio_stm32_set_exti_source+0x50>
 8003298:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800329c:	f003 0c03 	and.w	ip, r3, #3
 80032a0:	f10c 0102 	add.w	r1, ip, #2
 80032a4:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <gpio_stm32_set_exti_source+0x58>)
 80032a6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80032aa:	0c1a      	lsrs	r2, r3, #16
 80032ac:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80032b4:	b162      	cbz	r2, 80032d0 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	431a      	orrs	r2, r3
 80032c0:	f10c 0c02 	add.w	ip, ip, #2
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <gpio_stm32_set_exti_source+0x58>)
 80032c6:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 80032ca:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80032cc:	1cca      	adds	r2, r1, #3
 80032ce:	e7e3      	b.n	8003298 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 80032d0:	2220      	movs	r2, #32
 80032d2:	e7f2      	b.n	80032ba <gpio_stm32_set_exti_source+0x3e>
 80032d4:	40010000 	.word	0x40010000

080032d8 <gpio_stm32_get_exti_source>:
 80032d8:	4242      	negs	r2, r0
 80032da:	f000 0303 	and.w	r3, r0, #3
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	bf58      	it	pl
 80032e4:	4253      	negpl	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	230f      	movs	r3, #15
 80032ec:	4093      	lsls	r3, r2
 80032ee:	4602      	mov	r2, r0
 80032f0:	2800      	cmp	r0, #0
 80032f2:	db11      	blt.n	8003318 <gpio_stm32_get_exti_source+0x40>
 80032f4:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80032f8:	f000 0303 	and.w	r3, r0, #3
 80032fc:	3302      	adds	r3, #2
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <gpio_stm32_get_exti_source+0x48>)
 8003300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003304:	0c03      	lsrs	r3, r0, #16
 8003306:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800330e:	b12b      	cbz	r3, 800331c <gpio_stm32_get_exti_source+0x44>
  return __builtin_clz(value);
 8003310:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8003314:	40d8      	lsrs	r0, r3
 8003316:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003318:	1cc2      	adds	r2, r0, #3
 800331a:	e7eb      	b.n	80032f4 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e7f9      	b.n	8003314 <gpio_stm32_get_exti_source+0x3c>
 8003320:	40010000 	.word	0x40010000

08003324 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	4606      	mov	r6, r0
 800332a:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <gpio_stm32_enable_int+0x40>)
 800332e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003332:	ab02      	add	r3, sp, #8
 8003334:	e903 0003 	stmdb	r3, {r0, r1}
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <gpio_stm32_enable_int+0x44>)
 800333a:	f007 fa57 	bl	800a7ec <z_device_ready>
 800333e:	b148      	cbz	r0, 8003354 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <gpio_stm32_enable_int+0x44>)
 8003342:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4669      	mov	r1, sp
 8003348:	4798      	blx	r3
 800334a:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 800334c:	b12c      	cbz	r4, 800335a <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 800334e:	4620      	mov	r0, r4
 8003350:	b002      	add	sp, #8
 8003352:	bd70      	pop	{r4, r5, r6, pc}
 8003354:	f06f 0412 	mvn.w	r4, #18
 8003358:	e7f8      	b.n	800334c <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 800335a:	4629      	mov	r1, r5
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff ff8d 	bl	800327c <gpio_stm32_set_exti_source>
	return 0;
 8003362:	e7f4      	b.n	800334e <gpio_stm32_enable_int+0x2a>
 8003364:	0800bbdc 	.word	0x0800bbdc
 8003368:	0800b874 	.word	0x0800b874

0800336c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	460c      	mov	r4, r1
 8003370:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8003372:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8003374:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8003376:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800337a:	d01f      	beq.n	80033bc <gpio_stm32_pin_interrupt_configure+0x50>
 800337c:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 800337e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003382:	d034      	beq.n	80033ee <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8003384:	491d      	ldr	r1, [pc, #116]	; (80033fc <gpio_stm32_pin_interrupt_configure+0x90>)
 8003386:	4620      	mov	r0, r4
 8003388:	f7ff fe58 	bl	800303c <stm32_exti_set_callback>
 800338c:	4606      	mov	r6, r0
 800338e:	bb88      	cbnz	r0, 80033f4 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8003390:	4621      	mov	r1, r4
 8003392:	68b8      	ldr	r0, [r7, #8]
 8003394:	f7ff ffc6 	bl	8003324 <gpio_stm32_enable_int>

	switch (trig) {
 8003398:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 800339c:	d023      	beq.n	80033e6 <gpio_stm32_pin_interrupt_configure+0x7a>
 800339e:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 80033a2:	d022      	beq.n	80033ea <gpio_stm32_pin_interrupt_configure+0x7e>
 80033a4:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 80033a8:	d01b      	beq.n	80033e2 <gpio_stm32_pin_interrupt_configure+0x76>
 80033aa:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff fe0d 	bl	8002fcc <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff fdee 	bl	8002f94 <stm32_exti_enable>

exit:
	return err;
}
 80033b8:	4630      	mov	r0, r6
 80033ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff ff8b 	bl	80032d8 <gpio_stm32_get_exti_source>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4298      	cmp	r0, r3
 80033c6:	d001      	beq.n	80033cc <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 80033c8:	2600      	movs	r6, #0
		goto exit;
 80033ca:	e7f5      	b.n	80033b8 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff fdf1 	bl	8002fb4 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80033d2:	4620      	mov	r0, r4
 80033d4:	f7ff fe44 	bl	8003060 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80033d8:	2100      	movs	r1, #0
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff fdf6 	bl	8002fcc <stm32_exti_trigger>
 80033e0:	e7f2      	b.n	80033c8 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 80033e2:	2102      	movs	r1, #2
 80033e4:	e7e2      	b.n	80033ac <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 80033e6:	2101      	movs	r1, #1
 80033e8:	e7e0      	b.n	80033ac <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 80033ea:	2103      	movs	r1, #3
 80033ec:	e7de      	b.n	80033ac <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 80033ee:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80033f2:	e7e1      	b.n	80033b8 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 80033f4:	f06f 060f 	mvn.w	r6, #15
	return err;
 80033f8:	e7de      	b.n	80033b8 <gpio_stm32_pin_interrupt_configure+0x4c>
 80033fa:	bf00      	nop
 80033fc:	08009971 	.word	0x08009971

08003400 <gpio_stm32_clock_request>:
{
 8003400:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8003402:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8003404:	b169      	cbz	r1, 8003422 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8003406:	340c      	adds	r4, #12
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <gpio_stm32_clock_request+0x40>)
 800340a:	f007 f9ef 	bl	800a7ec <z_device_ready>
 800340e:	b128      	cbz	r0, 800341c <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <gpio_stm32_clock_request+0x40>)
 8003412:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4621      	mov	r1, r4
 8003418:	4798      	blx	r3
}
 800341a:	bd10      	pop	{r4, pc}
 800341c:	f06f 0012 	mvn.w	r0, #18
 8003420:	e7fb      	b.n	800341a <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8003422:	340c      	adds	r4, #12
 8003424:	4806      	ldr	r0, [pc, #24]	; (8003440 <gpio_stm32_clock_request+0x40>)
 8003426:	f007 f9e1 	bl	800a7ec <z_device_ready>
 800342a:	b128      	cbz	r0, 8003438 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 800342c:	4804      	ldr	r0, [pc, #16]	; (8003440 <gpio_stm32_clock_request+0x40>)
 800342e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4621      	mov	r1, r4
 8003434:	4798      	blx	r3
 8003436:	e7f0      	b.n	800341a <gpio_stm32_clock_request+0x1a>
 8003438:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 800343c:	e7ed      	b.n	800341a <gpio_stm32_clock_request+0x1a>
 800343e:	bf00      	nop
 8003440:	0800b874 	.word	0x0800b874

08003444 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8003444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003448:	b08a      	sub	sp, #40	; 0x28
 800344a:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800344c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8003450:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8003452:	ac02      	add	r4, sp, #8
 8003454:	4f76      	ldr	r7, [pc, #472]	; (8003630 <spi_stm32_configure+0x1ec>)
 8003456:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800345a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800345e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8003462:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8003466:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8003468:	429d      	cmp	r5, r3
 800346a:	f000 80d6 	beq.w	800361a <spi_stm32_configure+0x1d6>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 800346e:	88ab      	ldrh	r3, [r5, #4]
 8003470:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003474:	2b08      	cmp	r3, #8
 8003476:	d002      	beq.n	800347e <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8003478:	2b10      	cmp	r3, #16
 800347a:	f040 80d0 	bne.w	800361e <spi_stm32_configure+0x1da>
 800347e:	486d      	ldr	r0, [pc, #436]	; (8003634 <spi_stm32_configure+0x1f0>)
 8003480:	f007 f9b4 	bl	800a7ec <z_device_ready>
 8003484:	b1a0      	cbz	r0, 80034b0 <spi_stm32_configure+0x6c>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8003486:	4b6b      	ldr	r3, [pc, #428]	; (8003634 <spi_stm32_configure+0x1f0>)
 8003488:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	b19b      	cbz	r3, 80034b6 <spi_stm32_configure+0x72>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 800348e:	aa01      	add	r2, sp, #4
 8003490:	4641      	mov	r1, r8
 8003492:	4868      	ldr	r0, [pc, #416]	; (8003634 <spi_stm32_configure+0x1f0>)
 8003494:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003496:	2800      	cmp	r0, #0
 8003498:	f2c0 80c4 	blt.w	8003624 <spi_stm32_configure+0x1e0>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800349c:	2301      	movs	r3, #1
 800349e:	2b08      	cmp	r3, #8
 80034a0:	dc0c      	bgt.n	80034bc <spi_stm32_configure+0x78>
		uint32_t clk = clock >> br;
 80034a2:	9a01      	ldr	r2, [sp, #4]
 80034a4:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 80034a6:	6829      	ldr	r1, [r5, #0]
 80034a8:	4291      	cmp	r1, r2
 80034aa:	d207      	bcs.n	80034bc <spi_stm32_configure+0x78>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 80034ac:	3301      	adds	r3, #1
 80034ae:	e7f6      	b.n	800349e <spi_stm32_configure+0x5a>
 80034b0:	f06f 0012 	mvn.w	r0, #18
 80034b4:	e7ef      	b.n	8003496 <spi_stm32_configure+0x52>
		return -ENOSYS;
 80034b6:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80034ba:	e7ec      	b.n	8003496 <spi_stm32_configure+0x52>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 80034bc:	2b08      	cmp	r3, #8
 80034be:	f300 80b4 	bgt.w	800362a <spi_stm32_configure+0x1e6>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c8:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80034ca:	3b01      	subs	r3, #1
 80034cc:	aa0a      	add	r2, sp, #40	; 0x28
 80034ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80034d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80034dc:	4313      	orrs	r3, r2
 80034de:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80034e0:	88ab      	ldrh	r3, [r5, #4]
 80034e2:	f013 0f02 	tst.w	r3, #2
 80034e6:	d05f      	beq.n	80035a8 <spi_stm32_configure+0x164>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80034f0:	88ab      	ldrh	r3, [r5, #4]
 80034f2:	f013 0f04 	tst.w	r3, #4
 80034f6:	d05c      	beq.n	80035b2 <spi_stm32_configure+0x16e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8003506:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8003508:	88ab      	ldrh	r3, [r5, #4]
 800350a:	f013 0f10 	tst.w	r3, #16
 800350e:	d055      	beq.n	80035bc <spi_stm32_configure+0x178>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003516:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800351e:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8003520:	68ab      	ldr	r3, [r5, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d04f      	beq.n	80035c6 <spi_stm32_configure+0x182>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800352e:	6863      	ldr	r3, [r4, #4]
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003536:	88ab      	ldrh	r3, [r5, #4]
 8003538:	f013 0f01 	tst.w	r3, #1
 800353c:	d05b      	beq.n	80035f6 <spi_stm32_configure+0x1b2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8003544:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003546:	88ab      	ldrh	r3, [r5, #4]
 8003548:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800354c:	2b08      	cmp	r3, #8
 800354e:	d057      	beq.n	8003600 <spi_stm32_configure+0x1bc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003556:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8003560:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8003562:	68ab      	ldr	r3, [r5, #8]
 8003564:	b1e3      	cbz	r3, 80035a0 <spi_stm32_configure+0x15c>
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	b1d0      	cbz	r0, 80035a0 <spi_stm32_configure+0x15c>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 800356a:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 800356c:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 800356e:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8003572:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
 8003574:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8003576:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800357a:	d004      	beq.n	8003586 <spi_stm32_configure+0x142>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800357c:	f013 0f01 	tst.w	r3, #1
 8003580:	d001      	beq.n	8003586 <spi_stm32_configure+0x142>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003582:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800358a:	f013 0f01 	tst.w	r3, #1
 800358e:	d03c      	beq.n	800360a <spi_stm32_configure+0x1c6>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003590:	2301      	movs	r3, #1
 8003592:	fa03 f601 	lsl.w	r6, r3, r1
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	4333      	orrs	r3, r6
 800359a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	4798      	blx	r3
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 80035a0:	2000      	movs	r0, #0
}
 80035a2:	b00a      	add	sp, #40	; 0x28
 80035a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f023 0302 	bic.w	r3, r3, #2
 80035ae:	6023      	str	r3, [r4, #0]
}
 80035b0:	e79e      	b.n	80034f0 <spi_stm32_configure+0xac>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6023      	str	r3, [r4, #0]
}
 80035ba:	e7a1      	b.n	8003500 <spi_stm32_configure+0xbc>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c2:	6023      	str	r3, [r4, #0]
}
 80035c4:	e7a8      	b.n	8003518 <spi_stm32_configure+0xd4>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80035c6:	88ab      	ldrh	r3, [r5, #4]
 80035c8:	f013 0f01 	tst.w	r3, #1
 80035cc:	d008      	beq.n	80035e0 <spi_stm32_configure+0x19c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80035d6:	6863      	ldr	r3, [r4, #4]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6063      	str	r3, [r4, #4]
}
 80035de:	e7aa      	b.n	8003536 <spi_stm32_configure+0xf2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ea:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6063      	str	r3, [r4, #4]
}
 80035f4:	e79f      	b.n	8003536 <spi_stm32_configure+0xf2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80035fc:	6023      	str	r3, [r4, #0]
}
 80035fe:	e7a2      	b.n	8003546 <spi_stm32_configure+0x102>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003606:	6023      	str	r3, [r4, #0]
}
 8003608:	e7a6      	b.n	8003558 <spi_stm32_configure+0x114>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800360a:	2301      	movs	r3, #1
 800360c:	fa03 f601 	lsl.w	r6, r3, r1
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	ea23 0306 	bic.w	r3, r3, r6
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	e7c0      	b.n	800359c <spi_stm32_configure+0x158>
		return 0;
 800361a:	2000      	movs	r0, #0
 800361c:	e7c1      	b.n	80035a2 <spi_stm32_configure+0x15e>
		return -ENOTSUP;
 800361e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003622:	e7be      	b.n	80035a2 <spi_stm32_configure+0x15e>
		return -EIO;
 8003624:	f06f 0004 	mvn.w	r0, #4
 8003628:	e7bb      	b.n	80035a2 <spi_stm32_configure+0x15e>
		return -EINVAL;
 800362a:	f06f 0015 	mvn.w	r0, #21
 800362e:	e7b8      	b.n	80035a2 <spi_stm32_configure+0x15e>
 8003630:	0800bbe4 	.word	0x0800bbe4
 8003634:	0800b874 	.word	0x0800b874

08003638 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8003638:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 800363a:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 800363c:	6844      	ldr	r4, [r0, #4]
 800363e:	4824      	ldr	r0, [pc, #144]	; (80036d0 <spi_stm32_init+0x98>)
 8003640:	f007 f8d4 	bl	800a7ec <z_device_ready>
 8003644:	2800      	cmp	r0, #0
 8003646:	d02d      	beq.n	80036a4 <spi_stm32_init+0x6c>
	const struct clock_control_driver_api *api =
 8003648:	4821      	ldr	r0, [pc, #132]	; (80036d0 <spi_stm32_init+0x98>)
 800364a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4621      	mov	r1, r4
 8003650:	4798      	blx	r3
 8003652:	4605      	mov	r5, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8003654:	2d00      	cmp	r5, #0
 8003656:	d137      	bne.n	80036c8 <spi_stm32_init+0x90>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8003658:	68a2      	ldr	r2, [r4, #8]
 800365a:	6921      	ldr	r1, [r4, #16]
 800365c:	68e0      	ldr	r0, [r4, #12]
 800365e:	f006 f80e 	bl	800967e <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 8003662:	2800      	cmp	r0, #0
 8003664:	db1d      	blt.n	80036a2 <spi_stm32_init+0x6a>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	b1c3      	cbz	r3, 800369c <spi_stm32_init+0x64>
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	b1b3      	cbz	r3, 800369c <spi_stm32_init+0x64>
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	b1a2      	cbz	r2, 800369c <spi_stm32_init+0x64>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8003672:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8003674:	f003 fd44 	bl	8007100 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8003680:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	408b      	lsls	r3, r1
 8003688:	421a      	tst	r2, r3
 800368a:	d10e      	bne.n	80036aa <spi_stm32_init+0x72>
 800368c:	462b      	mov	r3, r5
	if (value != 0)	{
 800368e:	b173      	cbz	r3, 80036ae <spi_stm32_init+0x76>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8003690:	2301      	movs	r3, #1
 8003692:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8003696:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4798      	blx	r3
	return sem->count;
 800369c:	6933      	ldr	r3, [r6, #16]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 800369e:	b16b      	cbz	r3, 80036bc <spi_stm32_init+0x84>
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 80036a0:	4628      	mov	r0, r5
}
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	f06f 0512 	mvn.w	r5, #18
 80036a8:	e7d4      	b.n	8003654 <spi_stm32_init+0x1c>
		value = (value != 0) ? 0 : 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e7ef      	b.n	800368e <spi_stm32_init+0x56>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80036ae:	2301      	movs	r3, #1
 80036b0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80036b4:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 80036ba:	e7ef      	b.n	800369c <spi_stm32_init+0x64>
		ctx->owner = NULL;
 80036bc:	6073      	str	r3, [r6, #4]
		k_sem_give(&ctx->lock);
 80036be:	f106 0008 	add.w	r0, r6, #8
	z_impl_k_sem_give(sem);
 80036c2:	f002 fdff 	bl	80062c4 <z_impl_k_sem_give>
}
 80036c6:	e7eb      	b.n	80036a0 <spi_stm32_init+0x68>
		return -EIO;
 80036c8:	f06f 0004 	mvn.w	r0, #4
 80036cc:	e7e9      	b.n	80036a2 <spi_stm32_init+0x6a>
 80036ce:	bf00      	nop
 80036d0:	0800b874 	.word	0x0800b874

080036d4 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 80036d4:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 80036d6:	4802      	ldr	r0, [pc, #8]	; (80036e0 <timer_callback+0xc>)
 80036d8:	f002 ff66 	bl	80065a8 <k_work_submit>
}
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	2000007c 	.word	0x2000007c

080036e4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80036e4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80036e6:	f007 fbf2 	bl	800aece <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
 80036ea:	220a      	movs	r2, #10
 80036ec:	2300      	movs	r3, #0
 80036ee:	f7fd f8e9 	bl	80008c4 <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 80036f2:	4b02      	ldr	r3, [pc, #8]	; (80036fc <RtcGetTimerElapsedTime+0x18>)
 80036f4:	681b      	ldr	r3, [r3, #0]
}
 80036f6:	1ac0      	subs	r0, r0, r3
 80036f8:	bd08      	pop	{r3, pc}
 80036fa:	bf00      	nop
 80036fc:	2000081c 	.word	0x2000081c

08003700 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8003700:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8003702:	4802      	ldr	r0, [pc, #8]	; (800370c <RtcStopAlarm+0xc>)
 8003704:	f007 fc13 	bl	800af2e <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8003708:	bd08      	pop	{r3, pc}
 800370a:	bf00      	nop
 800370c:	20000328 	.word	0x20000328

08003710 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8003710:	b500      	push	{lr}
 8003712:	b083      	sub	sp, #12
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8003714:	0f83      	lsrs	r3, r0, #30
 8003716:	0082      	lsls	r2, r0, #2
 8003718:	1812      	adds	r2, r2, r0
 800371a:	f143 0300 	adc.w	r3, r3, #0
 800371e:	1892      	adds	r2, r2, r2
 8003720:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8003722:	2000      	movs	r0, #0
 8003724:	2100      	movs	r1, #0
 8003726:	e9cd 0100 	strd	r0, r1, [sp]
 800372a:	4803      	ldr	r0, [pc, #12]	; (8003738 <RtcSetAlarm+0x28>)
 800372c:	f003 fd50 	bl	80071d0 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8003730:	b003      	add	sp, #12
 8003732:	f85d fb04 	ldr.w	pc, [sp], #4
 8003736:	bf00      	nop
 8003738:	20000328 	.word	0x20000328

0800373c <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 800373c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800373e:	f007 fbc6 	bl	800aece <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8003742:	220a      	movs	r2, #10
 8003744:	2300      	movs	r3, #0
 8003746:	f7fd f8bd 	bl	80008c4 <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 800374a:	4b01      	ldr	r3, [pc, #4]	; (8003750 <RtcSetTimerContext+0x14>)
 800374c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 800374e:	bd08      	pop	{r3, pc}
 8003750:	2000081c 	.word	0x2000081c

08003754 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8003754:	4b01      	ldr	r3, [pc, #4]	; (800375c <RtcGetTimerContext+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000081c 	.word	0x2000081c

08003760 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8003764:	f100 0534 	add.w	r5, r0, #52	; 0x34
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8003768:	2302      	movs	r3, #2
 800376a:	f3bf 8f5b 	dmb	ish
 800376e:	e855 2f00 	ldrex	r2, [r5]
 8003772:	2a01      	cmp	r2, #1
 8003774:	d103      	bne.n	800377e <modem_release+0x1e>
 8003776:	e845 3100 	strex	r1, r3, [r5]
 800377a:	2900      	cmp	r1, #0
 800377c:	d1f7      	bne.n	800376e <modem_release+0xe>
 800377e:	f3bf 8f5b 	dmb	ish
 8003782:	bf0c      	ite	eq
 8003784:	2601      	moveq	r6, #1
 8003786:	2600      	movne	r6, #0
 8003788:	d10e      	bne.n	80037a8 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <modem_release+0x4c>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	6023      	str	r3, [r4, #0]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003794:	f3bf 8f5b 	dmb	ish
 8003798:	e855 2f00 	ldrex	r2, [r5]
 800379c:	e845 3100 	strex	r1, r3, [r5]
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d1f9      	bne.n	8003798 <modem_release+0x38>
 80037a4:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 80037a8:	4630      	mov	r0, r6
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	0800bf10 	.word	0x0800bf10

080037b0 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	4617      	mov	r7, r2
 80037b4:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 80037b6:	4c1d      	ldr	r4, [pc, #116]	; (800382c <sx12xx_ev_rx_done+0x7c>)
 80037b8:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80037bc:	2302      	movs	r3, #2
 80037be:	f3bf 8f5b 	dmb	ish
 80037c2:	e854 2f00 	ldrex	r2, [r4]
 80037c6:	2a01      	cmp	r2, #1
 80037c8:	d104      	bne.n	80037d4 <sx12xx_ev_rx_done+0x24>
 80037ca:	e844 3c00 	strex	ip, r3, [r4]
 80037ce:	f1bc 0f00 	cmp.w	ip, #0
 80037d2:	d1f6      	bne.n	80037c2 <sx12xx_ev_rx_done+0x12>
 80037d4:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80037d8:	d127      	bne.n	800382a <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <sx12xx_ev_rx_done+0x7c>)
 80037dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	428a      	cmp	r2, r1
 80037e2:	d900      	bls.n	80037e6 <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 80037e4:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 80037e6:	4c11      	ldr	r4, [pc, #68]	; (800382c <sx12xx_ev_rx_done+0x7c>)
 80037e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	4601      	mov	r1, r0
 80037ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037f0:	f007 fca2 	bl	800b138 <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 80037f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f6:	b103      	cbz	r3, 80037fa <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 80037f8:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <sx12xx_ev_rx_done+0x7c>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	b103      	cbz	r3, 8003802 <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 8003800:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <sx12xx_ev_rx_done+0x80>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 8003808:	2100      	movs	r1, #0
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <sx12xx_ev_rx_done+0x7c>)
 800380c:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003810:	f3bf 8f5b 	dmb	ish
 8003814:	e853 2f00 	ldrex	r2, [r3]
 8003818:	e843 1000 	strex	r0, r1, [r3]
 800381c:	2800      	cmp	r0, #0
 800381e:	d1f9      	bne.n	8003814 <sx12xx_ev_rx_done+0x64>
 8003820:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8003824:	4630      	mov	r0, r6
 8003826:	f003 ffcf 	bl	80077c8 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 800382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800382c:	20000820 	.word	0x20000820
 8003830:	0800bf10 	.word	0x0800bf10

08003834 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 8003834:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <sx12xx_ev_tx_done+0x18>)
 8003838:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 800383a:	f7ff ff91 	bl	8003760 <modem_release>
 800383e:	b120      	cbz	r0, 800384a <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 8003840:	b11c      	cbz	r4, 800384a <sx12xx_ev_tx_done+0x16>
 8003842:	2100      	movs	r1, #0
 8003844:	4620      	mov	r0, r4
 8003846:	f003 ffbf 	bl	80077c8 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 800384a:	bd10      	pop	{r4, pc}
 800384c:	20000820 	.word	0x20000820

08003850 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8003854:	490f      	ldr	r1, [pc, #60]	; (8003894 <sx12xx_lora_send_async+0x44>)
 8003856:	2001      	movs	r0, #1
 8003858:	f3bf 8f5b 	dmb	ish
 800385c:	e851 4f00 	ldrex	r4, [r1]
 8003860:	2c00      	cmp	r4, #0
 8003862:	d103      	bne.n	800386c <sx12xx_lora_send_async+0x1c>
 8003864:	e841 0600 	strex	r6, r0, [r1]
 8003868:	2e00      	cmp	r6, #0
 800386a:	d1f7      	bne.n	800385c <sx12xx_lora_send_async+0xc>
 800386c:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8003870:	d10c      	bne.n	800388c <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8003872:	3934      	subs	r1, #52	; 0x34
 8003874:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8003876:	4e08      	ldr	r6, [pc, #32]	; (8003898 <sx12xx_lora_send_async+0x48>)
 8003878:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800387a:	b2d4      	uxtb	r4, r2
 800387c:	4621      	mov	r1, r4
 800387e:	4798      	blx	r3

	Radio.Send(data, data_len);
 8003880:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003882:	4621      	mov	r1, r4
 8003884:	4628      	mov	r0, r5
 8003886:	4798      	blx	r3

	return 0;
 8003888:	2000      	movs	r0, #0
}
 800388a:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 800388c:	f06f 000f 	mvn.w	r0, #15
 8003890:	e7fb      	b.n	800388a <sx12xx_lora_send_async+0x3a>
 8003892:	bf00      	nop
 8003894:	20000854 	.word	0x20000854
 8003898:	0800bf10 	.word	0x0800bf10

0800389c <sx12xx_lora_send>:
{
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	b08e      	sub	sp, #56	; 0x38
 80038a0:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80038a2:	aa0a      	add	r2, sp, #40	; 0x28
 80038a4:	920a      	str	r2, [sp, #40]	; 0x28
 80038a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80038a8:	2300      	movs	r3, #0
 80038aa:	930c      	str	r3, [sp, #48]	; 0x30
 80038ac:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80038ae:	9305      	str	r3, [sp, #20]
 80038b0:	9306      	str	r3, [sp, #24]
 80038b2:	9307      	str	r3, [sp, #28]
 80038b4:	9308      	str	r3, [sp, #32]
 80038b6:	9309      	str	r3, [sp, #36]	; 0x24
 80038b8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80038bc:	2501      	movs	r5, #1
 80038be:	f365 0304 	bfi	r3, r5, #0, #5
 80038c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80038c6:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <sx12xx_lora_send+0xb0>)
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d03a      	beq.n	8003946 <sx12xx_lora_send+0xaa>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80038d0:	4613      	mov	r3, r2
 80038d2:	4622      	mov	r2, r4
 80038d4:	f7ff ffbc 	bl	8003850 <sx12xx_lora_send_async>
	if (ret < 0) {
 80038d8:	2800      	cmp	r0, #0
 80038da:	db22      	blt.n	8003922 <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <sx12xx_lora_send+0xb4>)
 80038de:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80038e0:	491a      	ldr	r1, [pc, #104]	; (800394c <sx12xx_lora_send+0xb0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80038e2:	9503      	str	r5, [sp, #12]
 80038e4:	b2e4      	uxtb	r4, r4
 80038e6:	9402      	str	r4, [sp, #8]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 80038f4:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 80038f8:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8003900:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8003904:	f3c0 7341 	ubfx	r3, r0, #29, #2
 8003908:	00c2      	lsls	r2, r0, #3
 800390a:	1852      	adds	r2, r2, r1
 800390c:	f143 0300 	adc.w	r3, r3, #0
 8003910:	1892      	adds	r2, r2, r2
 8003912:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8003914:	4629      	mov	r1, r5
 8003916:	a805      	add	r0, sp, #20
 8003918:	f003 feaa 	bl	8007670 <z_impl_k_poll>
	if (ret < 0) {
 800391c:	2800      	cmp	r0, #0
 800391e:	db02      	blt.n	8003926 <sx12xx_lora_send+0x8a>
	return 0;
 8003920:	2000      	movs	r0, #0
}
 8003922:	b00e      	add	sp, #56	; 0x38
 8003924:	bd70      	pop	{r4, r5, r6, pc}
		if (!modem_release(&dev_data)) {
 8003926:	4809      	ldr	r0, [pc, #36]	; (800394c <sx12xx_lora_send+0xb0>)
 8003928:	f7ff ff1a 	bl	8003760 <modem_release>
 800392c:	b108      	cbz	r0, 8003932 <sx12xx_lora_send+0x96>
	return 0;
 800392e:	2000      	movs	r0, #0
 8003930:	e7f7      	b.n	8003922 <sx12xx_lora_send+0x86>
 8003932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393a:	4629      	mov	r1, r5
 800393c:	a805      	add	r0, sp, #20
 800393e:	f003 fe97 	bl	8007670 <z_impl_k_poll>
 8003942:	2000      	movs	r0, #0
 8003944:	e7ed      	b.n	8003922 <sx12xx_lora_send+0x86>
		return -EINVAL;
 8003946:	f06f 0015 	mvn.w	r0, #21
 800394a:	e7ea      	b.n	8003922 <sx12xx_lora_send+0x86>
 800394c:	20000820 	.word	0x20000820
 8003950:	0800bf10 	.word	0x0800bf10

08003954 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8003954:	b510      	push	{r4, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800395c:	aa08      	add	r2, sp, #32
 800395e:	9208      	str	r2, [sp, #32]
 8003960:	9209      	str	r2, [sp, #36]	; 0x24
 8003962:	2300      	movs	r3, #0
 8003964:	930a      	str	r3, [sp, #40]	; 0x28
 8003966:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8003968:	9303      	str	r3, [sp, #12]
 800396a:	9304      	str	r3, [sp, #16]
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	9306      	str	r3, [sp, #24]
 8003970:	9307      	str	r3, [sp, #28]
 8003972:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 0304 	bfi	r3, r0, #0, #5
 800397c:	f88d 3019 	strb.w	r3, [sp, #25]
 8003980:	9207      	str	r2, [sp, #28]
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <sx12xx_lora_recv+0xb0>)
 8003984:	f3bf 8f5b 	dmb	ish
 8003988:	e853 2f00 	ldrex	r2, [r3]
 800398c:	2a00      	cmp	r2, #0
 800398e:	d103      	bne.n	8003998 <sx12xx_lora_recv+0x44>
 8003990:	e843 0400 	strex	r4, r0, [r3]
 8003994:	2c00      	cmp	r4, #0
 8003996:	d1f7      	bne.n	8003988 <sx12xx_lora_recv+0x34>
 8003998:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800399c:	d12e      	bne.n	80039fc <sx12xx_lora_recv+0xa8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 800399e:	3b34      	subs	r3, #52	; 0x34
 80039a0:	aa08      	add	r2, sp, #32
 80039a2:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80039a4:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 80039a6:	f10d 0207 	add.w	r2, sp, #7
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 80039ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 80039b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80039b4:	4c14      	ldr	r4, [pc, #80]	; (8003a08 <sx12xx_lora_recv+0xb4>)
 80039b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039b8:	21ff      	movs	r1, #255	; 0xff
 80039ba:	4798      	blx	r3
	Radio.Rx(0);
 80039bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039be:	2000      	movs	r0, #0
 80039c0:	4798      	blx	r3
 80039c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80039c6:	2101      	movs	r1, #1
 80039c8:	a803      	add	r0, sp, #12
 80039ca:	f003 fe51 	bl	8007670 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80039ce:	1e04      	subs	r4, r0, #0
 80039d0:	db04      	blt.n	80039dc <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80039d2:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80039d6:	4620      	mov	r0, r4
 80039d8:	b00c      	add	sp, #48	; 0x30
 80039da:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 80039dc:	480b      	ldr	r0, [pc, #44]	; (8003a0c <sx12xx_lora_recv+0xb8>)
 80039de:	f7ff febf 	bl	8003760 <modem_release>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d1f7      	bne.n	80039d6 <sx12xx_lora_recv+0x82>
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ee:	2101      	movs	r1, #1
 80039f0:	a803      	add	r0, sp, #12
 80039f2:	f003 fe3d 	bl	8007670 <z_impl_k_poll>
			return size;
 80039f6:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80039fa:	e7ec      	b.n	80039d6 <sx12xx_lora_recv+0x82>
		return -EBUSY;
 80039fc:	f06f 040f 	mvn.w	r4, #15
 8003a00:	e7e9      	b.n	80039d6 <sx12xx_lora_recv+0x82>
 8003a02:	bf00      	nop
 8003a04:	20000854 	.word	0x20000854
 8003a08:	0800bf10 	.word	0x0800bf10
 8003a0c:	20000820 	.word	0x20000820

08003a10 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	460c      	mov	r4, r1
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <sx12xx_lora_config+0xa4>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f3bf 8f5b 	dmb	ish
 8003a1e:	e853 1f00 	ldrex	r1, [r3]
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d103      	bne.n	8003a2e <sx12xx_lora_config+0x1e>
 8003a26:	e843 2000 	strex	r0, r2, [r3]
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d1f7      	bne.n	8003a1e <sx12xx_lora_config+0xe>
 8003a2e:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8003a32:	d13b      	bne.n	8003aac <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8003a34:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <sx12xx_lora_config+0xa8>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	4798      	blx	r3

	if (config->tx) {
 8003a3c:	7ae3      	ldrb	r3, [r4, #11]
 8003a3e:	b9cb      	cbnz	r3, 8003a74 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <sx12xx_lora_config+0xa8>)
 8003a42:	699d      	ldr	r5, [r3, #24]
 8003a44:	2001      	movs	r0, #1
 8003a46:	9009      	str	r0, [sp, #36]	; 0x24
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9308      	str	r3, [sp, #32]
 8003a4c:	9307      	str	r3, [sp, #28]
 8003a4e:	9306      	str	r3, [sp, #24]
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	9304      	str	r3, [sp, #16]
 8003a54:	9303      	str	r3, [sp, #12]
 8003a56:	220a      	movs	r2, #10
 8003a58:	9202      	str	r2, [sp, #8]
 8003a5a:	8922      	ldrh	r2, [r4, #8]
 8003a5c:	9201      	str	r2, [sp, #4]
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	79a3      	ldrb	r3, [r4, #6]
 8003a62:	7962      	ldrb	r2, [r4, #5]
 8003a64:	7921      	ldrb	r1, [r4, #4]
 8003a66:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8003a68:	4814      	ldr	r0, [pc, #80]	; (8003abc <sx12xx_lora_config+0xac>)
 8003a6a:	f7ff fe79 	bl	8003760 <modem_release>
	return 0;
 8003a6e:	2000      	movs	r0, #0
}
 8003a70:	b00a      	add	sp, #40	; 0x28
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <sx12xx_lora_config+0xb0>)
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	6861      	ldr	r1, [r4, #4]
 8003a7a:	68a2      	ldr	r2, [r4, #8]
 8003a7c:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <sx12xx_lora_config+0xa8>)
 8003a80:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8003a82:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8003a84:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8003a86:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003a8a:	9208      	str	r2, [sp, #32]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	9207      	str	r2, [sp, #28]
 8003a90:	9206      	str	r2, [sp, #24]
 8003a92:	9205      	str	r2, [sp, #20]
 8003a94:	2001      	movs	r0, #1
 8003a96:	9004      	str	r0, [sp, #16]
 8003a98:	9203      	str	r2, [sp, #12]
 8003a9a:	8926      	ldrh	r6, [r4, #8]
 8003a9c:	9602      	str	r6, [sp, #8]
 8003a9e:	9101      	str	r1, [sp, #4]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	7923      	ldrb	r3, [r4, #4]
 8003aa4:	f994 100a 	ldrsb.w	r1, [r4, #10]
 8003aa8:	47a8      	blx	r5
 8003aaa:	e7dd      	b.n	8003a68 <sx12xx_lora_config+0x58>
		return -EBUSY;
 8003aac:	f06f 000f 	mvn.w	r0, #15
 8003ab0:	e7de      	b.n	8003a70 <sx12xx_lora_config+0x60>
 8003ab2:	bf00      	nop
 8003ab4:	20000854 	.word	0x20000854
 8003ab8:	0800bf10 	.word	0x0800bf10
 8003abc:	20000820 	.word	0x20000820
 8003ac0:	20000848 	.word	0x20000848

08003ac4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <sx12xx_lora_test_cw+0x3c>)
 8003ace:	f04f 0c01 	mov.w	ip, #1
 8003ad2:	f3bf 8f5b 	dmb	ish
 8003ad6:	e853 ef00 	ldrex	lr, [r3]
 8003ada:	f1be 0f00 	cmp.w	lr, #0
 8003ade:	d103      	bne.n	8003ae8 <sx12xx_lora_test_cw+0x24>
 8003ae0:	e843 c400 	strex	r4, ip, [r3]
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d1f6      	bne.n	8003ad6 <sx12xx_lora_test_cw+0x12>
 8003ae8:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8003aec:	d104      	bne.n	8003af8 <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <sx12xx_lora_test_cw+0x40>)
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	4798      	blx	r3
	return 0;
 8003af4:	2000      	movs	r0, #0
}
 8003af6:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8003af8:	f06f 000f 	mvn.w	r0, #15
 8003afc:	e7fb      	b.n	8003af6 <sx12xx_lora_test_cw+0x32>
 8003afe:	bf00      	nop
 8003b00:	20000854 	.word	0x20000854
 8003b04:	0800bf10 	.word	0x0800bf10

08003b08 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8003b08:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003b0a:	480d      	ldr	r0, [pc, #52]	; (8003b40 <sx12xx_init+0x38>)
 8003b0c:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8003b10:	2400      	movs	r4, #0
 8003b12:	f3bf 8f5b 	dmb	ish
 8003b16:	e853 2f00 	ldrex	r2, [r3]
 8003b1a:	e843 4100 	strex	r1, r4, [r3]
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d1f9      	bne.n	8003b16 <sx12xx_init+0xe>
 8003b22:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <sx12xx_init+0x3c>)
 8003b28:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <sx12xx_init+0x40>)
 8003b2c:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 8003b2e:	4d07      	ldr	r5, [pc, #28]	; (8003b4c <sx12xx_init+0x44>)
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	3004      	adds	r0, #4
 8003b34:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8003b36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b38:	4798      	blx	r3

	return 0;
}
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000820 	.word	0x20000820
 8003b44:	08003835 	.word	0x08003835
 8003b48:	080037b1 	.word	0x080037b1
 8003b4c:	0800bf10 	.word	0x0800bf10

08003b50 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8003b50:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <sx127x_dio_work_handle+0x14>)
 8003b54:	1ac0      	subs	r0, r0, r3
 8003b56:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <sx127x_dio_work_handle+0x18>)
 8003b5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003b5e:	2000      	movs	r0, #0
 8003b60:	4798      	blx	r3
}
 8003b62:	bd08      	pop	{r3, pc}
 8003b64:	200008bc 	.word	0x200008bc
 8003b68:	2000008c 	.word	0x2000008c

08003b6c <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8003b74:	f10d 0007 	add.w	r0, sp, #7
 8003b78:	9006      	str	r0, [sp, #24]
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	9007      	str	r0, [sp, #28]
 8003b7e:	9208      	str	r2, [sp, #32]
 8003b80:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8003b82:	ab06      	add	r3, sp, #24
 8003b84:	9304      	str	r3, [sp, #16]
 8003b86:	2302      	movs	r3, #2
 8003b88:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8003b8a:	b149      	cbz	r1, 8003ba0 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8003b8c:	490b      	ldr	r1, [pc, #44]	; (8003bbc <sx127x_transceive+0x50>)
 8003b8e:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8003b90:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8003b92:	681c      	ldr	r4, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	aa04      	add	r2, sp, #16
 8003b98:	3108      	adds	r1, #8
 8003b9a:	47a0      	blx	r4
}
 8003b9c:	b00a      	add	sp, #40	; 0x28
 8003b9e:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8003ba0:	ab06      	add	r3, sp, #24
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <sx127x_transceive+0x50>)
 8003baa:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8003bac:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8003bae:	681c      	ldr	r4, [r3, #0]
 8003bb0:	ab02      	add	r3, sp, #8
 8003bb2:	aa04      	add	r2, sp, #16
 8003bb4:	3108      	adds	r1, #8
 8003bb6:	47a0      	blx	r4
 8003bb8:	e7f0      	b.n	8003b9c <sx127x_transceive+0x30>
 8003bba:	bf00      	nop
 8003bbc:	20000898 	.word	0x20000898

08003bc0 <sx127x_irq_callback>:
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8003bc4:	fa92 f6a2 	rbit	r6, r2
 8003bc8:	fab6 f686 	clz	r6, r6
 8003bcc:	b90a      	cbnz	r2, 8003bd2 <sx127x_irq_callback+0x12>
 8003bce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003bd2:	2400      	movs	r4, #0
 8003bd4:	e000      	b.n	8003bd8 <sx127x_irq_callback+0x18>
 8003bd6:	3401      	adds	r4, #1
 8003bd8:	2c03      	cmp	r4, #3
 8003bda:	d813      	bhi.n	8003c04 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8003bdc:	1d23      	adds	r3, r4, #4
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <sx127x_irq_callback+0x48>)
 8003be0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	42ab      	cmp	r3, r5
 8003be8:	d1f5      	bne.n	8003bd6 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <sx127x_irq_callback+0x4c>)
 8003bec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bf0:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8003bf2:	42b3      	cmp	r3, r6
 8003bf4:	d1ef      	bne.n	8003bd6 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8003bf6:	1ca0      	adds	r0, r4, #2
 8003bf8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003bfc:	3004      	adds	r0, #4
 8003bfe:	f002 fcd3 	bl	80065a8 <k_work_submit>
 8003c02:	e7e8      	b.n	8003bd6 <sx127x_irq_callback+0x16>
}
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
 8003c06:	bf00      	nop
 8003c08:	20000898 	.word	0x20000898
 8003c0c:	0800bf7c 	.word	0x0800bf7c

08003c10 <SX1276Reset>:
{
 8003c10:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <SX1276Reset+0x64>)
 8003c14:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003c16:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f013 0f01 	tst.w	r3, #1
 8003c1e:	d11b      	bne.n	8003c58 <SX1276Reset+0x48>
 8003c20:	2301      	movs	r3, #1
	if (value != 0)	{
 8003c22:	b1db      	cbz	r3, 8003c5c <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8003c24:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f003 f88a 	bl	8006d48 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <SX1276Reset+0x64>)
 8003c36:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003c38:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f013 0f01 	tst.w	r3, #1
 8003c40:	d111      	bne.n	8003c66 <SX1276Reset+0x56>
 8003c42:	2300      	movs	r3, #0
	if (value != 0)	{
 8003c44:	b18b      	cbz	r3, 8003c6a <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8003c46:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4798      	blx	r3
 8003c4e:	203c      	movs	r0, #60	; 0x3c
 8003c50:	2100      	movs	r1, #0
 8003c52:	f003 f879 	bl	8006d48 <z_impl_k_sleep>
}
 8003c56:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e7e2      	b.n	8003c22 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8003c5c:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2101      	movs	r1, #1
 8003c62:	4798      	blx	r3
 8003c64:	e7e2      	b.n	8003c2c <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e7ec      	b.n	8003c44 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8003c6a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	4798      	blx	r3
 8003c72:	e7ec      	b.n	8003c4e <SX1276Reset+0x3e>
 8003c74:	20000898 	.word	0x20000898

08003c78 <SX1276IoIrqInit>:
{
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003c7c:	2400      	movs	r4, #0
 8003c7e:	e03e      	b.n	8003cfe <SX1276IoIrqInit+0x86>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8003c80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003c84:	f013 0f01 	tst.w	r3, #1
 8003c88:	d06e      	beq.n	8003d68 <SX1276IoIrqInit+0xf0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	fa03 fc01 	lsl.w	ip, r3, r1
 8003c90:	6833      	ldr	r3, [r6, #0]
 8003c92:	ea43 030c 	orr.w	r3, r3, ip
 8003c96:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8003c9c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8003ca0:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <SX1276IoIrqInit+0x110>)
 8003ca2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <SX1276IoIrqInit+0x114>)
 8003ca8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003cac:	791e      	ldrb	r6, [r3, #4]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	40b3      	lsls	r3, r6
	callback->handler = handler;
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <SX1276IoIrqInit+0x118>)
 8003cb4:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8003cb6:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8003cb8:	1d23      	adds	r3, r4, #4
 8003cba:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <SX1276IoIrqInit+0x11c>)
 8003cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003cc0:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8003cc2:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d056      	beq.n	8003d78 <SX1276IoIrqInit+0x100>
	return api->manage_callback(port, callback, true);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4798      	blx	r3
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	db58      	blt.n	8003d84 <SX1276IoIrqInit+0x10c>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8003cd2:	1d23      	adds	r3, r4, #4
 8003cd4:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <SX1276IoIrqInit+0x11c>)
 8003cd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003cda:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8003cdc:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8003cde:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8003ce6:	421a      	tst	r2, r3
 8003ce8:	d149      	bne.n	8003d7e <SX1276IoIrqInit+0x106>
 8003cea:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8003cee:	698f      	ldr	r7, [r1, #24]
 8003cf0:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8003cf4:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8003cfc:	3401      	adds	r4, #1
 8003cfe:	2c03      	cmp	r4, #3
 8003d00:	d840      	bhi.n	8003d84 <SX1276IoIrqInit+0x10c>
		if (!irqHandlers[i]) {
 8003d02:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f8      	beq.n	8003cfc <SX1276IoIrqInit+0x84>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <SX1276IoIrqInit+0x114>)
 8003d0c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8003d10:	f001 ffb6 	bl	8005c80 <z_impl_device_get_binding>
 8003d14:	1d23      	adds	r3, r4, #4
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <SX1276IoIrqInit+0x11c>)
 8003d18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d1c:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8003d1e:	b388      	cbz	r0, 8003d84 <SX1276IoIrqInit+0x10c>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8003d20:	4616      	mov	r6, r2
 8003d22:	1ca0      	adds	r0, r4, #2
 8003d24:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8003d28:	491b      	ldr	r1, [pc, #108]	; (8003d98 <SX1276IoIrqInit+0x120>)
 8003d2a:	3004      	adds	r0, #4
 8003d2c:	f006 fea5 	bl	800aa7a <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003d30:	1d23      	adds	r3, r4, #4
 8003d32:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8003d36:	6870      	ldr	r0, [r6, #4]
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <SX1276IoIrqInit+0x114>)
 8003d3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d3e:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8003d40:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8003d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8003d4a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8003d4c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8003d4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d094      	beq.n	8003c80 <SX1276IoIrqInit+0x8>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8003d56:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8003d5a:	d091      	beq.n	8003c80 <SX1276IoIrqInit+0x8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003d5c:	f013 0f01 	tst.w	r3, #1
 8003d60:	d08e      	beq.n	8003c80 <SX1276IoIrqInit+0x8>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8003d62:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8003d66:	e78b      	b.n	8003c80 <SX1276IoIrqInit+0x8>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003d68:	2301      	movs	r3, #1
 8003d6a:	fa03 fc01 	lsl.w	ip, r3, r1
 8003d6e:	6833      	ldr	r3, [r6, #0]
 8003d70:	ea23 030c 	bic.w	r3, r3, ip
 8003d74:	6033      	str	r3, [r6, #0]
 8003d76:	e78f      	b.n	8003c98 <SX1276IoIrqInit+0x20>
		return -ENOTSUP;
 8003d78:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003d7c:	e7a7      	b.n	8003cce <SX1276IoIrqInit+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8003d7e:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8003d82:	e7b4      	b.n	8003cee <SX1276IoIrqInit+0x76>
}
 8003d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000868 	.word	0x20000868
 8003d8c:	0800bf7c 	.word	0x0800bf7c
 8003d90:	08003bc1 	.word	0x08003bc1
 8003d94:	20000898 	.word	0x20000898
 8003d98:	08003b51 	.word	0x08003b51

08003d9c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8003d9c:	b530      	push	{r4, r5, lr}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	4604      	mov	r4, r0
 8003da2:	4832      	ldr	r0, [pc, #200]	; (8003e6c <sx127x_lora_init+0xd0>)
 8003da4:	f001 ff6c 	bl	8005c80 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <sx127x_lora_init+0xd4>)
 8003daa:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d050      	beq.n	8003e52 <sx127x_lora_init+0xb6>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8003db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db4:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <sx127x_lora_init+0xd8>)
 8003db8:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	81da      	strh	r2, [r3, #14]
 8003dbe:	482e      	ldr	r0, [pc, #184]	; (8003e78 <sx127x_lora_init+0xdc>)
 8003dc0:	f001 ff5e 	bl	8005c80 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <sx127x_lora_init+0xe0>)
 8003dc6:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d045      	beq.n	8003e58 <sx127x_lora_init+0xbc>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8003dcc:	2206      	movs	r2, #6
 8003dce:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 8003dd8:	4825      	ldr	r0, [pc, #148]	; (8003e70 <sx127x_lora_init+0xd4>)
 8003dda:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8003ddc:	f641 2307 	movw	r3, #6663	; 0x1a07
 8003de0:	4925      	ldr	r1, [pc, #148]	; (8003e78 <sx127x_lora_init+0xdc>)
 8003de2:	f006 fa26 	bl	800a232 <__sx12xx_configure_pin>
	if (ret) {
 8003de6:	4605      	mov	r5, r0
 8003de8:	b110      	cbz	r0, 8003df0 <sx127x_lora_init+0x54>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8003dea:	4628      	mov	r0, r5
 8003dec:	b003      	add	sp, #12
 8003dee:	bd30      	pop	{r4, r5, pc}
 8003df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df4:	2100      	movs	r1, #0
 8003df6:	f002 ffa7 	bl	8006d48 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <sx127x_lora_init+0xd4>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8003dfe:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f013 0f01 	tst.w	r3, #1
 8003e06:	d11d      	bne.n	8003e44 <sx127x_lora_init+0xa8>
 8003e08:	462b      	mov	r3, r5
	if (value != 0)	{
 8003e0a:	b1eb      	cbz	r3, 8003e48 <sx127x_lora_init+0xac>
	const struct gpio_driver_api *api =
 8003e0c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2101      	movs	r1, #1
 8003e12:	4798      	blx	r3
 8003e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f002 ff95 	bl	8006d48 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f10d 0107 	add.w	r1, sp, #7
 8003e24:	2042      	movs	r0, #66	; 0x42
 8003e26:	f006 fa45 	bl	800a2b4 <sx127x_read>
	if (ret < 0) {
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	db17      	blt.n	8003e5e <sx127x_lora_init+0xc2>
	ret = sx127x_antenna_configure();
 8003e2e:	f006 fa3a 	bl	800a2a6 <sx127x_antenna_configure>
	if (ret < 0) {
 8003e32:	2800      	cmp	r0, #0
 8003e34:	db16      	blt.n	8003e64 <sx127x_lora_init+0xc8>
	ret = sx12xx_init(dev);
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff fe66 	bl	8003b08 <sx12xx_init>
	if (ret < 0) {
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	dad4      	bge.n	8003dea <sx127x_lora_init+0x4e>
		return ret;
 8003e40:	4605      	mov	r5, r0
 8003e42:	e7d2      	b.n	8003dea <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e7e0      	b.n	8003e0a <sx127x_lora_init+0x6e>
	const struct gpio_driver_api *api =
 8003e48:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4798      	blx	r3
 8003e50:	e7e0      	b.n	8003e14 <sx127x_lora_init+0x78>
		return -EINVAL;
 8003e52:	f06f 0515 	mvn.w	r5, #21
 8003e56:	e7c8      	b.n	8003dea <sx127x_lora_init+0x4e>
		return -EIO;
 8003e58:	f06f 0504 	mvn.w	r5, #4
 8003e5c:	e7c5      	b.n	8003dea <sx127x_lora_init+0x4e>
		return -EIO;
 8003e5e:	f06f 0504 	mvn.w	r5, #4
 8003e62:	e7c2      	b.n	8003dea <sx127x_lora_init+0x4e>
		return -EIO;
 8003e64:	f06f 0504 	mvn.w	r5, #4
 8003e68:	e7bf      	b.n	8003dea <sx127x_lora_init+0x4e>
 8003e6a:	bf00      	nop
 8003e6c:	0800becc 	.word	0x0800becc
 8003e70:	20000898 	.word	0x20000898
 8003e74:	0007a120 	.word	0x0007a120
 8003e78:	0800be20 	.word	0x0800be20
 8003e7c:	200008fc 	.word	0x200008fc

08003e80 <SX1276GetDio1PinState>:
{
 8003e80:	b510      	push	{r4, lr}
 8003e82:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <SX1276GetDio1PinState+0x34>)
 8003e86:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8003e88:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8003e8a:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	a901      	add	r1, sp, #4
 8003e90:	4798      	blx	r3
	if (ret == 0) {
 8003e92:	4603      	mov	r3, r0
 8003e94:	b918      	cbnz	r0, 8003e9e <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8003e96:	6821      	ldr	r1, [r4, #0]
 8003e98:	9a01      	ldr	r2, [sp, #4]
 8003e9a:	404a      	eors	r2, r1
 8003e9c:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8003e9e:	b913      	cbnz	r3, 8003ea6 <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dc02      	bgt.n	8003eb0 <SX1276GetDio1PinState+0x30>
	return 0U;
 8003eaa:	2000      	movs	r0, #0
}
 8003eac:	b002      	add	sp, #8
 8003eae:	bd10      	pop	{r4, pc}
		return 1U;
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	e7fb      	b.n	8003eac <SX1276GetDio1PinState+0x2c>
 8003eb4:	20000898 	.word	0x20000898

08003eb8 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <TimerInsertTimer+0x28>)
 8003eba:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8003ebc:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8003ebe:	e001      	b.n	8003ec4 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8003ec0:	461a      	mov	r2, r3
            next = next->Next;
 8003ec2:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8003ec4:	6951      	ldr	r1, [r2, #20]
 8003ec6:	b139      	cbz	r1, 8003ed8 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	f8d0 c000 	ldr.w	ip, [r0]
 8003ece:	458c      	cmp	ip, r1
 8003ed0:	d8f6      	bhi.n	8003ec0 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8003ed2:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8003ed4:	6143      	str	r3, [r0, #20]
            return;
 8003ed6:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 8003ed8:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	6143      	str	r3, [r0, #20]
}
 8003ede:	4770      	bx	lr
 8003ee0:	20000908 	.word	0x20000908

08003ee4 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <TimerExists+0x18>)
 8003ee6:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8003ee8:	e000      	b.n	8003eec <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8003eea:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8003eec:	b11b      	cbz	r3, 8003ef6 <TimerExists+0x12>
        if( cur == obj )
 8003eee:	4283      	cmp	r3, r0
 8003ef0:	d1fb      	bne.n	8003eea <TimerExists+0x6>
            return true;
 8003ef2:	2001      	movs	r0, #1
    }
    return false;
}
 8003ef4:	4770      	bx	lr
    return false;
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000908 	.word	0x20000908

08003f00 <TimerInsertNewHeadTimer>:
{
 8003f00:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <TimerInsertNewHeadTimer+0x18>)
 8003f04:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8003f06:	b10b      	cbz	r3, 8003f0c <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8003f08:	2200      	movs	r2, #0
 8003f0a:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8003f0c:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8003f0e:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <TimerInsertNewHeadTimer+0x18>)
 8003f10:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8003f12:	f006 fa3c 	bl	800a38e <TimerSetTimeout>
}
 8003f16:	bd08      	pop	{r3, pc}
 8003f18:	20000908 	.word	0x20000908

08003f1c <TimerStart>:
{
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8003f22:	a801      	add	r0, sp, #4
 8003f24:	f006 f975 	bl	800a212 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8003f28:	b1f4      	cbz	r4, 8003f68 <TimerStart+0x4c>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff ffda 	bl	8003ee4 <TimerExists>
 8003f30:	b9d0      	cbnz	r0, 8003f68 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8003f32:	6863      	ldr	r3, [r4, #4]
 8003f34:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8003f36:	2301      	movs	r3, #1
 8003f38:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <TimerStart+0x68>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	b1ab      	cbz	r3, 8003f70 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8003f44:	f7ff fbce 	bl	80036e4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	4418      	add	r0, r3
 8003f4c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <TimerStart+0x68>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4298      	cmp	r0, r3
 8003f56:	d211      	bcs.n	8003f7c <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff ffd1 	bl	8003f00 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8003f5e:	a801      	add	r0, sp, #4
 8003f60:	f006 f961 	bl	800a226 <BoardCriticalSectionEnd>
}
 8003f64:	b002      	add	sp, #8
 8003f66:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8003f68:	a801      	add	r0, sp, #4
 8003f6a:	f006 f95c 	bl	800a226 <BoardCriticalSectionEnd>
        return;
 8003f6e:	e7f9      	b.n	8003f64 <TimerStart+0x48>
        RtcSetTimerContext( );
 8003f70:	f7ff fbe4 	bl	800373c <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8003f74:	4620      	mov	r0, r4
 8003f76:	f7ff ffc3 	bl	8003f00 <TimerInsertNewHeadTimer>
 8003f7a:	e7f0      	b.n	8003f5e <TimerStart+0x42>
            TimerInsertTimer( obj );
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff ff9b 	bl	8003eb8 <TimerInsertTimer>
 8003f82:	e7ec      	b.n	8003f5e <TimerStart+0x42>
 8003f84:	20000908 	.word	0x20000908

08003f88 <TimerIrqHandler>:
{
 8003f88:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8003f8a:	f7ff fbe3 	bl	8003754 <RtcGetTimerContext>
 8003f8e:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8003f90:	f7ff fbd4 	bl	800373c <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8003f94:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <TimerIrqHandler+0x84>)
 8003f9a:	681e      	ldr	r6, [r3, #0]
 8003f9c:	b16e      	cbz	r6, 8003fba <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	e002      	b.n	8003fa8 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8003fa6:	6952      	ldr	r2, [r2, #20]
 8003fa8:	6953      	ldr	r3, [r2, #20]
 8003faa:	b133      	cbz	r3, 8003fba <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	4561      	cmp	r1, ip
 8003fb0:	d9f7      	bls.n	8003fa2 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8003fb2:	1a2c      	subs	r4, r5, r0
 8003fb4:	4421      	add	r1, r4
 8003fb6:	6019      	str	r1, [r3, #0]
 8003fb8:	e7f5      	b.n	8003fa6 <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8003fba:	b146      	cbz	r6, 8003fce <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8003fbc:	6972      	ldr	r2, [r6, #20]
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <TimerIrqHandler+0x84>)
 8003fc0:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8003fc6:	68f3      	ldr	r3, [r6, #12]
 8003fc8:	b1a3      	cbz	r3, 8003ff4 <TimerIrqHandler+0x6c>
 8003fca:	6930      	ldr	r0, [r6, #16]
 8003fcc:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <TimerIrqHandler+0x84>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	b18b      	cbz	r3, 8003ff8 <TimerIrqHandler+0x70>
 8003fd4:	681c      	ldr	r4, [r3, #0]
 8003fd6:	f7ff fb85 	bl	80036e4 <RtcGetTimerElapsedTime>
 8003fda:	4284      	cmp	r4, r0
 8003fdc:	d20c      	bcs.n	8003ff8 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8003fde:	4a0b      	ldr	r2, [pc, #44]	; (800400c <TimerIrqHandler+0x84>)
 8003fe0:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8003fe2:	6959      	ldr	r1, [r3, #20]
 8003fe4:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	b11a      	cbz	r2, 8003ff6 <TimerIrqHandler+0x6e>
 8003fee:	6918      	ldr	r0, [r3, #16]
 8003ff0:	4790      	blx	r2
 8003ff2:	e7ec      	b.n	8003fce <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8003ff4:	e7fe      	b.n	8003ff4 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8003ff6:	e7fe      	b.n	8003ff6 <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <TimerIrqHandler+0x84>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	b108      	cbz	r0, 8004002 <TimerIrqHandler+0x7a>
 8003ffe:	7a43      	ldrb	r3, [r0, #9]
 8004000:	b103      	cbz	r3, 8004004 <TimerIrqHandler+0x7c>
}
 8004002:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8004004:	f006 f9c3 	bl	800a38e <TimerSetTimeout>
}
 8004008:	e7fb      	b.n	8004002 <TimerIrqHandler+0x7a>
 800400a:	bf00      	nop
 800400c:	20000908 	.word	0x20000908

08004010 <TimerStop>:
{
 8004010:	b510      	push	{r4, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8004016:	a801      	add	r0, sp, #4
 8004018:	f006 f8fb 	bl	800a212 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <TimerStop+0x7c>)
 800401e:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8004020:	b15a      	cbz	r2, 800403a <TimerStop+0x2a>
 8004022:	b154      	cbz	r4, 800403a <TimerStop+0x2a>
    obj->IsStarted = false;
 8004024:	2300      	movs	r3, #0
 8004026:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8004028:	42a2      	cmp	r2, r4
 800402a:	d00a      	beq.n	8004042 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 800402c:	4613      	mov	r3, r2
        while( cur != NULL )
 800402e:	b32b      	cbz	r3, 800407c <TimerStop+0x6c>
            if( cur == obj )
 8004030:	42a3      	cmp	r3, r4
 8004032:	d020      	beq.n	8004076 <TimerStop+0x66>
                prev = cur;
 8004034:	461a      	mov	r2, r3
                cur = cur->Next;
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	e7f9      	b.n	800402e <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800403a:	a801      	add	r0, sp, #4
 800403c:	f006 f8f3 	bl	800a226 <BoardCriticalSectionEnd>
        return;
 8004040:	e01f      	b.n	8004082 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8004042:	7a53      	ldrb	r3, [r2, #9]
 8004044:	b173      	cbz	r3, 8004064 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8004046:	2300      	movs	r3, #0
 8004048:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 800404a:	6950      	ldr	r0, [r2, #20]
 800404c:	b120      	cbz	r0, 8004058 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <TimerStop+0x7c>)
 8004050:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8004052:	f006 f99c 	bl	800a38e <TimerSetTimeout>
 8004056:	e011      	b.n	800407c <TimerStop+0x6c>
                RtcStopAlarm( );
 8004058:	f7ff fb52 	bl	8003700 <RtcStopAlarm>
                TimerListHead = NULL;
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <TimerStop+0x7c>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00b      	b.n	800407c <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8004064:	6953      	ldr	r3, [r2, #20]
 8004066:	b113      	cbz	r3, 800406e <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <TimerStop+0x7c>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e006      	b.n	800407c <TimerStop+0x6c>
                TimerListHead = NULL;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <TimerStop+0x7c>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e002      	b.n	800407c <TimerStop+0x6c>
                if( cur->Next != NULL )
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	b12b      	cbz	r3, 8004086 <TimerStop+0x76>
                    prev->Next = cur;
 800407a:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 800407c:	a801      	add	r0, sp, #4
 800407e:	f006 f8d2 	bl	800a226 <BoardCriticalSectionEnd>
}
 8004082:	b002      	add	sp, #8
 8004084:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8004086:	2300      	movs	r3, #0
 8004088:	6153      	str	r3, [r2, #20]
 800408a:	e7f7      	b.n	800407c <TimerStop+0x6c>
 800408c:	20000908 	.word	0x20000908

08004090 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004090:	4908      	ldr	r1, [pc, #32]	; (80040b4 <SX1276ConvertFreqInHzToPllStep+0x24>)
 8004092:	fba1 3200 	umull	r3, r2, r1, r0
 8004096:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004098:	f643 5309 	movw	r3, #15625	; 0x3d09
 800409c:	fb03 0012 	mls	r0, r3, r2, r0
 80040a0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80040a4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80040a8:	fba1 1303 	umull	r1, r3, r1, r3
 80040ac:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 80040ae:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 80040b2:	4770      	bx	lr
 80040b4:	431bde83 	.word	0x431bde83

080040b8 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80040b8:	2300      	movs	r3, #0
 80040ba:	e008      	b.n	80040ce <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 80040bc:	e7fe      	b.n	80040bc <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <GetFskBandwidthRegValue+0x4c>)
 80040c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80040c4:	7908      	ldrb	r0, [r1, #4]
}
 80040c6:	bc10      	pop	{r4}
 80040c8:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b14      	cmp	r3, #20
 80040d0:	d817      	bhi.n	8004102 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80040d2:	4619      	mov	r1, r3
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <GetFskBandwidthRegValue+0x4c>)
 80040d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80040da:	4282      	cmp	r2, r0
 80040dc:	d8f5      	bhi.n	80040ca <GetFskBandwidthRegValue+0x12>
{
 80040de:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	4c08      	ldr	r4, [pc, #32]	; (8004104 <GetFskBandwidthRegValue+0x4c>)
 80040e4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80040e8:	4282      	cmp	r2, r0
 80040ea:	d8e8      	bhi.n	80040be <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80040ec:	3301      	adds	r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b14      	cmp	r3, #20
 80040f2:	d8e3      	bhi.n	80040bc <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80040f4:	4619      	mov	r1, r3
 80040f6:	4a03      	ldr	r2, [pc, #12]	; (8004104 <GetFskBandwidthRegValue+0x4c>)
 80040f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80040fc:	4282      	cmp	r2, r0
 80040fe:	d8f5      	bhi.n	80040ec <GetFskBandwidthRegValue+0x34>
 8004100:	e7ee      	b.n	80040e0 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8004102:	e7fe      	b.n	8004102 <GetFskBandwidthRegValue+0x4a>
 8004104:	0800bfb0 	.word	0x0800bfb0

08004108 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8004108:	2801      	cmp	r0, #1
 800410a:	d006      	beq.n	800411a <SX1276GetLoRaBandwidthInHz+0x12>
 800410c:	2802      	cmp	r0, #2
 800410e:	d006      	beq.n	800411e <SX1276GetLoRaBandwidthInHz+0x16>
 8004110:	b108      	cbz	r0, 8004116 <SX1276GetLoRaBandwidthInHz+0xe>
 8004112:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8004114:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8004116:	4803      	ldr	r0, [pc, #12]	; (8004124 <SX1276GetLoRaBandwidthInHz+0x1c>)
 8004118:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800411a:	4803      	ldr	r0, [pc, #12]	; (8004128 <SX1276GetLoRaBandwidthInHz+0x20>)
 800411c:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 800411e:	4803      	ldr	r0, [pc, #12]	; (800412c <SX1276GetLoRaBandwidthInHz+0x24>)
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	0001e848 	.word	0x0001e848
 8004128:	0003d090 	.word	0x0003d090
 800412c:	0007a120 	.word	0x0007a120

08004130 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <SX1276OnDio4Irq+0x1c>)
 8004132:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004136:	b93b      	cbnz	r3, 8004148 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <SX1276OnDio4Irq+0x1c>)
 800413a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800413e:	b91b      	cbnz	r3, 8004148 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <SX1276OnDio4Irq+0x1c>)
 8004142:	2201      	movs	r2, #1
 8004144:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000a40 	.word	0x20000a40

08004150 <SX1276GetStatus>:
}
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <SX1276GetStatus+0x8>)
 8004152:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8004156:	4770      	bx	lr
 8004158:	20000a40 	.word	0x20000a40

0800415c <SX1276SetChannel>:
{
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8004160:	f7ff ff96 	bl	8004090 <SX1276ConvertFreqInHzToPllStep>
 8004164:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <SX1276SetChannel+0x30>)
 8004168:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800416c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8004170:	2006      	movs	r0, #6
 8004172:	f006 fa03 	bl	800a57c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8004176:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800417a:	2007      	movs	r0, #7
 800417c:	f006 f9fe 	bl	800a57c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8004180:	b2e1      	uxtb	r1, r4
 8004182:	2008      	movs	r0, #8
 8004184:	f006 f9fa 	bl	800a57c <SX1276Write>
}
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20000a40 	.word	0x20000a40

08004190 <SX1276OnDio3Irq>:
{
 8004190:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <SX1276OnDio3Irq+0x54>)
 8004194:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d000      	beq.n	800419e <SX1276OnDio3Irq+0xe>
}
 800419c:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800419e:	2012      	movs	r0, #18
 80041a0:	f006 f9f8 	bl	800a594 <SX1276Read>
 80041a4:	f010 0f01 	tst.w	r0, #1
 80041a8:	d00d      	beq.n	80041c6 <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80041aa:	2105      	movs	r1, #5
 80041ac:	2012      	movs	r0, #18
 80041ae:	f006 f9e5 	bl	800a57c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <SX1276OnDio3Irq+0x58>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <SX1276OnDio3Irq+0xc>
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ed      	beq.n	800419c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 80041c0:	2001      	movs	r0, #1
 80041c2:	4798      	blx	r3
 80041c4:	e7ea      	b.n	800419c <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80041c6:	2104      	movs	r1, #4
 80041c8:	2012      	movs	r0, #18
 80041ca:	f006 f9d7 	bl	800a57c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <SX1276OnDio3Irq+0x58>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0e2      	beq.n	800419c <SX1276OnDio3Irq+0xc>
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0df      	beq.n	800419c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80041dc:	2000      	movs	r0, #0
 80041de:	4798      	blx	r3
}
 80041e0:	e7dc      	b.n	800419c <SX1276OnDio3Irq+0xc>
 80041e2:	bf00      	nop
 80041e4:	20000a40 	.word	0x20000a40
 80041e8:	2000090c 	.word	0x2000090c

080041ec <SX1276OnDio2Irq>:
{
 80041ec:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 80041f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <SX1276OnDio2Irq+0x12>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d051      	beq.n	80042a0 <SX1276OnDio2Irq+0xb4>
}
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80041fe:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 8004200:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004204:	b1c3      	cbz	r3, 8004238 <SX1276OnDio2Irq+0x4c>
 8004206:	2b01      	cmp	r3, #1
 8004208:	d1f8      	bne.n	80041fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 800420c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f3      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004214:	2102      	movs	r1, #2
 8004216:	2012      	movs	r0, #18
 8004218:	f006 f9b0 	bl	800a57c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800421c:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <SX1276OnDio2Irq+0xf0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0eb      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
 8004224:	695c      	ldr	r4, [r3, #20]
 8004226:	2c00      	cmp	r4, #0
 8004228:	d0e8      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800422a:	201c      	movs	r0, #28
 800422c:	f006 f9b2 	bl	800a594 <SX1276Read>
 8004230:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004234:	47a0      	blx	r4
 8004236:	e7e1      	b.n	80041fc <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 800423a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800423c:	b35b      	cbz	r3, 8004296 <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 8004240:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0d9      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 800424a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1d4      	bne.n	80041fc <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8004252:	4823      	ldr	r0, [pc, #140]	; (80042e0 <SX1276OnDio2Irq+0xf4>)
 8004254:	f7ff fedc 	bl	8004010 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8004258:	4c1f      	ldr	r4, [pc, #124]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 800425a:	2301      	movs	r3, #1
 800425c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004260:	2011      	movs	r0, #17
 8004262:	f006 f997 	bl	800a594 <SX1276Read>
 8004266:	0843      	lsrs	r3, r0, #1
 8004268:	425b      	negs	r3, r3
 800426a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800426e:	201b      	movs	r0, #27
 8004270:	f006 f990 	bl	800a594 <SX1276Read>
 8004274:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8004276:	201c      	movs	r0, #28
 8004278:	f006 f98c 	bl	800a594 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800427c:	4328      	orrs	r0, r5
 800427e:	f006 f8d0 	bl	800a422 <SX1276ConvertPllStepToFreqInHz>
 8004282:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004286:	200c      	movs	r0, #12
 8004288:	f006 f984 	bl	800a594 <SX1276Read>
 800428c:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8004290:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8004294:	e7b2      	b.n	80041fc <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 8004298:	2201      	movs	r2, #1
 800429a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 800429e:	e7ce      	b.n	800423e <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 80042a2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d1a8      	bne.n	80041fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <SX1276OnDio2Irq+0xec>)
 80042ac:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0a3      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80042b4:	2102      	movs	r1, #2
 80042b6:	2012      	movs	r0, #18
 80042b8:	f006 f960 	bl	800a57c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <SX1276OnDio2Irq+0xf0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d09b      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
 80042c4:	695c      	ldr	r4, [r3, #20]
 80042c6:	2c00      	cmp	r4, #0
 80042c8:	d098      	beq.n	80041fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80042ca:	201c      	movs	r0, #28
 80042cc:	f006 f962 	bl	800a594 <SX1276Read>
 80042d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80042d4:	47a0      	blx	r4
}
 80042d6:	e791      	b.n	80041fc <SX1276OnDio2Irq+0x10>
 80042d8:	20000a40 	.word	0x20000a40
 80042dc:	2000090c 	.word	0x2000090c
 80042e0:	20000910 	.word	0x20000910

080042e4 <SX1276OnDio1Irq>:
{
 80042e4:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 80042e6:	4b4c      	ldr	r3, [pc, #304]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80042e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d002      	beq.n	80042f6 <SX1276OnDio1Irq+0x12>
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d063      	beq.n	80043bc <SX1276OnDio1Irq+0xd8>
}
 80042f4:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80042f6:	4b48      	ldr	r3, [pc, #288]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80042f8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80042fc:	b1cb      	cbz	r3, 8004332 <SX1276OnDio1Irq+0x4e>
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d1f8      	bne.n	80042f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8004302:	f7ff fdbd 	bl	8003e80 <SX1276GetDio1PinState>
 8004306:	2800      	cmp	r0, #0
 8004308:	d0f4      	beq.n	80042f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 800430a:	4844      	ldr	r0, [pc, #272]	; (800441c <SX1276OnDio1Irq+0x138>)
 800430c:	f7ff fe80 	bl	8004010 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	2012      	movs	r0, #18
 8004314:	f006 f932 	bl	800a57c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <SX1276OnDio1Irq+0x134>)
 800431a:	2200      	movs	r2, #0
 800431c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004320:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <SX1276OnDio1Irq+0x13c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0e5      	beq.n	80042f4 <SX1276OnDio1Irq+0x10>
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0e2      	beq.n	80042f4 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 800432e:	4798      	blx	r3
 8004330:	e7e0      	b.n	80042f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8004332:	f7ff fda5 	bl	8003e80 <SX1276GetDio1PinState>
 8004336:	2800      	cmp	r0, #0
 8004338:	d0dc      	beq.n	80042f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 800433a:	483a      	ldr	r0, [pc, #232]	; (8004424 <SX1276OnDio1Irq+0x140>)
 800433c:	f7ff fe68 	bl	8004010 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <SX1276OnDio1Irq+0x134>)
 8004342:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8004346:	b95b      	cbnz	r3, 8004360 <SX1276OnDio1Irq+0x7c>
 8004348:	4b33      	ldr	r3, [pc, #204]	; (8004418 <SX1276OnDio1Irq+0x134>)
 800434a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800434e:	b93b      	cbnz	r3, 8004360 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <SX1276OnDio1Irq+0x134>)
 8004352:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004356:	b9f3      	cbnz	r3, 8004396 <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004358:	2101      	movs	r1, #1
 800435a:	4833      	ldr	r0, [pc, #204]	; (8004428 <SX1276OnDio1Irq+0x144>)
 800435c:	f006 f8ce 	bl	800a4fc <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8004360:	4b2d      	ldr	r3, [pc, #180]	; (8004418 <SX1276OnDio1Irq+0x134>)
 8004362:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8004366:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800436a:	1a88      	subs	r0, r1, r2
 800436c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8004370:	4298      	cmp	r0, r3
 8004372:	db17      	blt.n	80043a4 <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8004374:	b25b      	sxtb	r3, r3
 8004376:	1e59      	subs	r1, r3, #1
 8004378:	b2c9      	uxtb	r1, r1
 800437a:	482c      	ldr	r0, [pc, #176]	; (800442c <SX1276OnDio1Irq+0x148>)
 800437c:	4410      	add	r0, r2
 800437e:	f006 f8bd 	bl	800a4fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <SX1276OnDio1Irq+0x134>)
 8004384:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8004388:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800438c:	440b      	add	r3, r1
 800438e:	3b01      	subs	r3, #1
 8004390:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8004394:	e7ae      	b.n	80042f4 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004396:	2032      	movs	r0, #50	; 0x32
 8004398:	f006 f8fc 	bl	800a594 <SX1276Read>
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <SX1276OnDio1Irq+0x134>)
 800439e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80043a2:	e7dd      	b.n	8004360 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80043a4:	1a89      	subs	r1, r1, r2
 80043a6:	b2c9      	uxtb	r1, r1
 80043a8:	4820      	ldr	r0, [pc, #128]	; (800442c <SX1276OnDio1Irq+0x148>)
 80043aa:	4410      	add	r0, r2
 80043ac:	f006 f8a6 	bl	800a4fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80043b2:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80043b6:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80043ba:	e79b      	b.n	80042f4 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80043be:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d196      	bne.n	80042f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 80043c6:	f7ff fd5b 	bl	8003e80 <SX1276GetDio1PinState>
 80043ca:	2801      	cmp	r0, #1
 80043cc:	d092      	beq.n	80042f4 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80043d0:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80043d4:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80043d8:	eba0 0c02 	sub.w	ip, r0, r2
 80043dc:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80043e0:	458c      	cmp	ip, r1
 80043e2:	dd0c      	ble.n	80043fe <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80043e4:	4811      	ldr	r0, [pc, #68]	; (800442c <SX1276OnDio1Irq+0x148>)
 80043e6:	4410      	add	r0, r2
 80043e8:	f006 f88f 	bl	800a50a <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <SX1276OnDio1Irq+0x134>)
 80043ee:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80043f2:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80043f6:	440a      	add	r2, r1
 80043f8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80043fc:	e77a      	b.n	80042f4 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80043fe:	1a81      	subs	r1, r0, r2
 8004400:	b2c9      	uxtb	r1, r1
 8004402:	480a      	ldr	r0, [pc, #40]	; (800442c <SX1276OnDio1Irq+0x148>)
 8004404:	4410      	add	r0, r2
 8004406:	f006 f880 	bl	800a50a <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800440a:	4b03      	ldr	r3, [pc, #12]	; (8004418 <SX1276OnDio1Irq+0x134>)
 800440c:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8004410:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8004414:	e76e      	b.n	80042f4 <SX1276OnDio1Irq+0x10>
 8004416:	bf00      	nop
 8004418:	20000a40 	.word	0x20000a40
 800441c:	20000928 	.word	0x20000928
 8004420:	2000090c 	.word	0x2000090c
 8004424:	20000910 	.word	0x20000910
 8004428:	20000b56 	.word	0x20000b56
 800442c:	20000940 	.word	0x20000940

08004430 <SX1276OnDio0Irq>:
{
 8004430:	b510      	push	{r4, lr}
 8004432:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 800443a:	4bb0      	ldr	r3, [pc, #704]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 800443c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d004      	beq.n	800444e <SX1276OnDio0Irq+0x1e>
 8004444:	2b02      	cmp	r3, #2
 8004446:	f000 813c 	beq.w	80046c2 <SX1276OnDio0Irq+0x292>
}
 800444a:	b002      	add	sp, #8
 800444c:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800444e:	4bab      	ldr	r3, [pc, #684]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004450:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004454:	b343      	cbz	r3, 80044a8 <SX1276OnDio0Irq+0x78>
 8004456:	2b01      	cmp	r3, #1
 8004458:	d1f7      	bne.n	800444a <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800445a:	2140      	movs	r1, #64	; 0x40
 800445c:	2012      	movs	r0, #18
 800445e:	f006 f88d 	bl	800a57c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004462:	2012      	movs	r0, #18
 8004464:	f006 f896 	bl	800a594 <SX1276Read>
 8004468:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800446c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004470:	f013 0f20 	tst.w	r3, #32
 8004474:	f000 80bd 	beq.w	80045f2 <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8004478:	2120      	movs	r1, #32
 800447a:	2012      	movs	r0, #18
 800447c:	f006 f87e 	bl	800a57c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004480:	4b9e      	ldr	r3, [pc, #632]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004482:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8004486:	b91b      	cbnz	r3, 8004490 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8004488:	4b9c      	ldr	r3, [pc, #624]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 800448a:	2200      	movs	r2, #0
 800448c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8004490:	489b      	ldr	r0, [pc, #620]	; (8004700 <SX1276OnDio0Irq+0x2d0>)
 8004492:	f7ff fdbd 	bl	8004010 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004496:	4b9b      	ldr	r3, [pc, #620]	; (8004704 <SX1276OnDio0Irq+0x2d4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0d5      	beq.n	800444a <SX1276OnDio0Irq+0x1a>
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0d2      	beq.n	800444a <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 80044a4:	4798      	blx	r3
 80044a6:	e7d0      	b.n	800444a <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80044a8:	4b94      	ldr	r3, [pc, #592]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80044aa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80044ae:	bb0b      	cbnz	r3, 80044f4 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80044b0:	4b92      	ldr	r3, [pc, #584]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80044b2:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d15e      	bne.n	8004578 <SX1276OnDio0Irq+0x148>
 80044ba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d15a      	bne.n	8004578 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80044c2:	4b8e      	ldr	r3, [pc, #568]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80044c4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d14e      	bne.n	800456a <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80044cc:	2101      	movs	r1, #1
 80044ce:	488e      	ldr	r0, [pc, #568]	; (8004708 <SX1276OnDio0Irq+0x2d8>)
 80044d0:	f006 f814 	bl	800a4fc <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80044d4:	4c89      	ldr	r4, [pc, #548]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80044d6:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80044da:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80044de:	1ac9      	subs	r1, r1, r3
 80044e0:	b2c9      	uxtb	r1, r1
 80044e2:	488a      	ldr	r0, [pc, #552]	; (800470c <SX1276OnDio0Irq+0x2dc>)
 80044e4:	4418      	add	r0, r3
 80044e6:	f006 f809 	bl	800a4fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80044ea:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80044ee:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80044f2:	e04e      	b.n	8004592 <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80044f4:	203f      	movs	r0, #63	; 0x3f
 80044f6:	f006 f84d 	bl	800a594 <SX1276Read>
 80044fa:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80044fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004502:	f013 0f02 	tst.w	r3, #2
 8004506:	d1d3      	bne.n	80044b0 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004508:	210b      	movs	r1, #11
 800450a:	203e      	movs	r0, #62	; 0x3e
 800450c:	f006 f836 	bl	800a57c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004510:	2110      	movs	r1, #16
 8004512:	203f      	movs	r0, #63	; 0x3f
 8004514:	f006 f832 	bl	800a57c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8004518:	4879      	ldr	r0, [pc, #484]	; (8004700 <SX1276OnDio0Irq+0x2d0>)
 800451a:	f7ff fd79 	bl	8004010 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800451e:	4b77      	ldr	r3, [pc, #476]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004520:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8004524:	b9bb      	cbnz	r3, 8004556 <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 8004526:	487a      	ldr	r0, [pc, #488]	; (8004710 <SX1276OnDio0Irq+0x2e0>)
 8004528:	f7ff fd72 	bl	8004010 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800452c:	4b73      	ldr	r3, [pc, #460]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 800452e:	2200      	movs	r2, #0
 8004530:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004534:	4b73      	ldr	r3, [pc, #460]	; (8004704 <SX1276OnDio0Irq+0x2d4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b113      	cbz	r3, 8004540 <SX1276OnDio0Irq+0x110>
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	b103      	cbz	r3, 8004540 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 800453e:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004540:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004542:	2200      	movs	r2, #0
 8004544:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004548:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800454c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8004550:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8004554:	e779      	b.n	800444a <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004556:	200d      	movs	r0, #13
 8004558:	f006 f81c 	bl	800a594 <SX1276Read>
 800455c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004560:	b2c9      	uxtb	r1, r1
 8004562:	200d      	movs	r0, #13
 8004564:	f006 f80a 	bl	800a57c <SX1276Write>
 8004568:	e7e4      	b.n	8004534 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800456a:	2032      	movs	r0, #50	; 0x32
 800456c:	f006 f812 	bl	800a594 <SX1276Read>
 8004570:	4b62      	ldr	r3, [pc, #392]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004572:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8004576:	e7ad      	b.n	80044d4 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004578:	4c60      	ldr	r4, [pc, #384]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 800457a:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800457e:	1ac9      	subs	r1, r1, r3
 8004580:	b2c9      	uxtb	r1, r1
 8004582:	4862      	ldr	r0, [pc, #392]	; (800470c <SX1276OnDio0Irq+0x2dc>)
 8004584:	4418      	add	r0, r3
 8004586:	f005 ffb9 	bl	800a4fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800458a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800458e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 8004592:	485b      	ldr	r0, [pc, #364]	; (8004700 <SX1276OnDio0Irq+0x2d0>)
 8004594:	f7ff fd3c 	bl	8004010 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004598:	4b58      	ldr	r3, [pc, #352]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 800459a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800459e:	b9f3      	cbnz	r3, 80045de <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 80045a0:	4b56      	ldr	r3, [pc, #344]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80045a8:	4859      	ldr	r0, [pc, #356]	; (8004710 <SX1276OnDio0Irq+0x2e0>)
 80045aa:	f7ff fd31 	bl	8004010 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80045ae:	4b55      	ldr	r3, [pc, #340]	; (8004704 <SX1276OnDio0Irq+0x2d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	b14b      	cbz	r3, 80045c8 <SX1276OnDio0Irq+0x198>
 80045b4:	689c      	ldr	r4, [r3, #8]
 80045b6:	b13c      	cbz	r4, 80045c8 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80045b8:	4950      	ldr	r1, [pc, #320]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80045ba:	2300      	movs	r3, #0
 80045bc:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80045c0:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80045c4:	4851      	ldr	r0, [pc, #324]	; (800470c <SX1276OnDio0Irq+0x2dc>)
 80045c6:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80045c8:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80045d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80045d4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80045d8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80045dc:	e735      	b.n	800444a <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80045de:	200d      	movs	r0, #13
 80045e0:	f005 ffd8 	bl	800a594 <SX1276Read>
 80045e4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80045e8:	b2c9      	uxtb	r1, r1
 80045ea:	200d      	movs	r0, #13
 80045ec:	f005 ffc6 	bl	800a57c <SX1276Write>
 80045f0:	e7dd      	b.n	80045ae <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80045f2:	2019      	movs	r0, #25
 80045f4:	f005 ffce 	bl	800a594 <SX1276Read>
 80045f8:	b243      	sxtb	r3, r0
 80045fa:	3302      	adds	r3, #2
 80045fc:	109b      	asrs	r3, r3, #2
 80045fe:	4c3f      	ldr	r4, [pc, #252]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004600:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004604:	201a      	movs	r0, #26
 8004606:	f005 ffc5 	bl	800a594 <SX1276Read>
 800460a:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800460c:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 8004610:	2a00      	cmp	r2, #0
 8004612:	db39      	blt.n	8004688 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004616:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800461a:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <SX1276OnDio0Irq+0x2e4>)
 800461c:	429a      	cmp	r2, r3
 800461e:	d949      	bls.n	80046b4 <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8004620:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8004624:	389d      	subs	r0, #157	; 0x9d
 8004626:	4b35      	ldr	r3, [pc, #212]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004628:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800462c:	2013      	movs	r0, #19
 800462e:	f005 ffb1 	bl	800a594 <SX1276Read>
 8004632:	4c32      	ldr	r4, [pc, #200]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004634:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8004638:	2010      	movs	r0, #16
 800463a:	f005 ffab 	bl	800a594 <SX1276Read>
 800463e:	4601      	mov	r1, r0
 8004640:	200d      	movs	r0, #13
 8004642:	f005 ff9b 	bl	800a57c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8004646:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800464a:	4830      	ldr	r0, [pc, #192]	; (800470c <SX1276OnDio0Irq+0x2dc>)
 800464c:	f005 ff56 	bl	800a4fc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8004650:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8004654:	b913      	cbnz	r3, 800465c <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 8004656:	2200      	movs	r2, #0
 8004658:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 800465c:	4828      	ldr	r0, [pc, #160]	; (8004700 <SX1276OnDio0Irq+0x2d0>)
 800465e:	f7ff fcd7 	bl	8004010 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <SX1276OnDio0Irq+0x2d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f43f aeef 	beq.w	800444a <SX1276OnDio0Irq+0x1a>
 800466c:	689c      	ldr	r4, [r3, #8]
 800466e:	2c00      	cmp	r4, #0
 8004670:	f43f aeeb 	beq.w	800444a <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8004674:	4921      	ldr	r1, [pc, #132]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 8004676:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 800467a:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 800467e:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8004682:	4822      	ldr	r0, [pc, #136]	; (800470c <SX1276OnDio0Irq+0x2dc>)
 8004684:	47a0      	blx	r4
 8004686:	e6e0      	b.n	800444a <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004688:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 800468c:	4b21      	ldr	r3, [pc, #132]	; (8004714 <SX1276OnDio0Irq+0x2e4>)
 800468e:	4299      	cmp	r1, r3
 8004690:	d907      	bls.n	80046a2 <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8004692:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8004696:	b203      	sxth	r3, r0
 8004698:	4413      	add	r3, r2
 800469a:	3b9d      	subs	r3, #157	; 0x9d
 800469c:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 80046a0:	e7c4      	b.n	800462c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80046a2:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80046a6:	b203      	sxth	r3, r0
 80046a8:	4413      	add	r3, r2
 80046aa:	3ba4      	subs	r3, #164	; 0xa4
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80046ae:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80046b2:	e7bb      	b.n	800462c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80046b4:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80046b8:	38a4      	subs	r0, #164	; 0xa4
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80046bc:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80046c0:	e7b4      	b.n	800462c <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 80046c2:	4815      	ldr	r0, [pc, #84]	; (8004718 <SX1276OnDio0Irq+0x2e8>)
 80046c4:	f7ff fca4 	bl	8004010 <TimerStop>
            switch( SX1276.Settings.Modem )
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80046ca:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d00e      	beq.n	80046f0 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <SX1276OnDio0Irq+0x2cc>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <SX1276OnDio0Irq+0x2d4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f43f aeb3 	beq.w	800444a <SX1276OnDio0Irq+0x1a>
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f43f aeaf 	beq.w	800444a <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 80046ec:	4798      	blx	r3
}
 80046ee:	e6ac      	b.n	800444a <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80046f0:	2108      	movs	r1, #8
 80046f2:	2012      	movs	r0, #18
 80046f4:	f005 ff42 	bl	800a57c <SX1276Write>
 80046f8:	e7eb      	b.n	80046d2 <SX1276OnDio0Irq+0x2a2>
 80046fa:	bf00      	nop
 80046fc:	20000a40 	.word	0x20000a40
 8004700:	20000928 	.word	0x20000928
 8004704:	2000090c 	.word	0x2000090c
 8004708:	20000b56 	.word	0x20000b56
 800470c:	20000940 	.word	0x20000940
 8004710:	20000910 	.word	0x20000910
 8004714:	1f4add40 	.word	0x1f4add40
 8004718:	20000b84 	.word	0x20000b84

0800471c <RxChainCalibration>:
{
 800471c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800471e:	2009      	movs	r0, #9
 8004720:	f005 ff38 	bl	800a594 <SX1276Read>
 8004724:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004726:	2006      	movs	r0, #6
 8004728:	f005 ff34 	bl	800a594 <SX1276Read>
 800472c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800472e:	2007      	movs	r0, #7
 8004730:	f005 ff30 	bl	800a594 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8004734:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8004738:	2008      	movs	r0, #8
 800473a:	f005 ff2b 	bl	800a594 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800473e:	4320      	orrs	r0, r4
 8004740:	f005 fe6f 	bl	800a422 <SX1276ConvertPllStepToFreqInHz>
 8004744:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8004746:	2100      	movs	r1, #0
 8004748:	2009      	movs	r0, #9
 800474a:	f005 ff17 	bl	800a57c <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800474e:	203b      	movs	r0, #59	; 0x3b
 8004750:	f005 ff20 	bl	800a594 <SX1276Read>
 8004754:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004758:	b2c9      	uxtb	r1, r1
 800475a:	203b      	movs	r0, #59	; 0x3b
 800475c:	f005 ff0e 	bl	800a57c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8004760:	203b      	movs	r0, #59	; 0x3b
 8004762:	f005 ff17 	bl	800a594 <SX1276Read>
 8004766:	f010 0f20 	tst.w	r0, #32
 800476a:	d1f9      	bne.n	8004760 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 800476c:	480c      	ldr	r0, [pc, #48]	; (80047a0 <RxChainCalibration+0x84>)
 800476e:	f7ff fcf5 	bl	800415c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8004772:	203b      	movs	r0, #59	; 0x3b
 8004774:	f005 ff0e 	bl	800a594 <SX1276Read>
 8004778:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800477c:	b2c9      	uxtb	r1, r1
 800477e:	203b      	movs	r0, #59	; 0x3b
 8004780:	f005 fefc 	bl	800a57c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8004784:	203b      	movs	r0, #59	; 0x3b
 8004786:	f005 ff05 	bl	800a594 <SX1276Read>
 800478a:	f010 0f20 	tst.w	r0, #32
 800478e:	d1f9      	bne.n	8004784 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8004790:	4629      	mov	r1, r5
 8004792:	2009      	movs	r0, #9
 8004794:	f005 fef2 	bl	800a57c <SX1276Write>
    SX1276SetChannel( initialFreq );
 8004798:	4620      	mov	r0, r4
 800479a:	f7ff fcdf 	bl	800415c <SX1276SetChannel>
}
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	33bca100 	.word	0x33bca100

080047a4 <SX1276SetSleep>:
{
 80047a4:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80047a6:	480a      	ldr	r0, [pc, #40]	; (80047d0 <SX1276SetSleep+0x2c>)
 80047a8:	f7ff fc32 	bl	8004010 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80047ac:	4809      	ldr	r0, [pc, #36]	; (80047d4 <SX1276SetSleep+0x30>)
 80047ae:	f7ff fc2f 	bl	8004010 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80047b2:	4809      	ldr	r0, [pc, #36]	; (80047d8 <SX1276SetSleep+0x34>)
 80047b4:	f7ff fc2c 	bl	8004010 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80047b8:	2000      	movs	r0, #0
 80047ba:	f005 fef7 	bl	800a5ac <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80047be:	2000      	movs	r0, #0
 80047c0:	f005 fd76 	bl	800a2b0 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <SX1276SetSleep+0x38>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80047cc:	bd08      	pop	{r3, pc}
 80047ce:	bf00      	nop
 80047d0:	20000928 	.word	0x20000928
 80047d4:	20000b84 	.word	0x20000b84
 80047d8:	20000910 	.word	0x20000910
 80047dc:	20000a40 	.word	0x20000a40

080047e0 <SX1276SetStby>:
{
 80047e0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80047e2:	4808      	ldr	r0, [pc, #32]	; (8004804 <SX1276SetStby+0x24>)
 80047e4:	f7ff fc14 	bl	8004010 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80047e8:	4807      	ldr	r0, [pc, #28]	; (8004808 <SX1276SetStby+0x28>)
 80047ea:	f7ff fc11 	bl	8004010 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80047ee:	4807      	ldr	r0, [pc, #28]	; (800480c <SX1276SetStby+0x2c>)
 80047f0:	f7ff fc0e 	bl	8004010 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80047f4:	2001      	movs	r0, #1
 80047f6:	f005 fed9 	bl	800a5ac <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <SX1276SetStby+0x30>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004802:	bd08      	pop	{r3, pc}
 8004804:	20000928 	.word	0x20000928
 8004808:	20000b84 	.word	0x20000b84
 800480c:	20000910 	.word	0x20000910
 8004810:	20000a40 	.word	0x20000a40

08004814 <SX1276SetTx>:
{
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8004818:	4829      	ldr	r0, [pc, #164]	; (80048c0 <SX1276SetTx+0xac>)
 800481a:	f7ff fbf9 	bl	8004010 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800481e:	4621      	mov	r1, r4
 8004820:	4828      	ldr	r0, [pc, #160]	; (80048c4 <SX1276SetTx+0xb0>)
 8004822:	f005 fdd3 	bl	800a3cc <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <SX1276SetTx+0xb4>)
 8004828:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800482c:	b163      	cbz	r3, 8004848 <SX1276SetTx+0x34>
 800482e:	2b01      	cmp	r3, #1
 8004830:	d023      	beq.n	800487a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8004832:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <SX1276SetTx+0xb4>)
 8004834:	2202      	movs	r2, #2
 8004836:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800483a:	4822      	ldr	r0, [pc, #136]	; (80048c4 <SX1276SetTx+0xb0>)
 800483c:	f7ff fb6e 	bl	8003f1c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8004840:	2003      	movs	r0, #3
 8004842:	f005 feb3 	bl	800a5ac <SX1276SetOpMode>
}
 8004846:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004848:	2040      	movs	r0, #64	; 0x40
 800484a:	f005 fea3 	bl	800a594 <SX1276Read>
 800484e:	f000 0103 	and.w	r1, r0, #3
 8004852:	2040      	movs	r0, #64	; 0x40
 8004854:	f005 fe92 	bl	800a57c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004858:	2041      	movs	r0, #65	; 0x41
 800485a:	f005 fe9b 	bl	800a594 <SX1276Read>
 800485e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8004862:	2041      	movs	r0, #65	; 0x41
 8004864:	f005 fe8a 	bl	800a57c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004868:	2035      	movs	r0, #53	; 0x35
 800486a:	f005 fe93 	bl	800a594 <SX1276Read>
 800486e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <SX1276SetTx+0xb4>)
 8004874:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8004878:	e7db      	b.n	8004832 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <SX1276SetTx+0xb4>)
 800487c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004880:	b173      	cbz	r3, 80048a0 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004882:	21f5      	movs	r1, #245	; 0xf5
 8004884:	2011      	movs	r0, #17
 8004886:	f005 fe79 	bl	800a57c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800488a:	2040      	movs	r0, #64	; 0x40
 800488c:	f005 fe82 	bl	800a594 <SX1276Read>
 8004890:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8004894:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004898:	2040      	movs	r0, #64	; 0x40
 800489a:	f005 fe6f 	bl	800a57c <SX1276Write>
 800489e:	e7c8      	b.n	8004832 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80048a0:	21f7      	movs	r1, #247	; 0xf7
 80048a2:	2011      	movs	r0, #17
 80048a4:	f005 fe6a 	bl	800a57c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80048a8:	2040      	movs	r0, #64	; 0x40
 80048aa:	f005 fe73 	bl	800a594 <SX1276Read>
 80048ae:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80048b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80048b6:	2040      	movs	r0, #64	; 0x40
 80048b8:	f005 fe60 	bl	800a57c <SX1276Write>
 80048bc:	e7b9      	b.n	8004832 <SX1276SetTx+0x1e>
 80048be:	bf00      	nop
 80048c0:	20000928 	.word	0x20000928
 80048c4:	20000b84 	.word	0x20000b84
 80048c8:	20000a40 	.word	0x20000a40

080048cc <SX1276Send>:
{
 80048cc:	b530      	push	{r4, r5, lr}
 80048ce:	b083      	sub	sp, #12
 80048d0:	4604      	mov	r4, r0
 80048d2:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 80048d6:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <SX1276Send+0x11c>)
 80048d8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80048dc:	b133      	cbz	r3, 80048ec <SX1276Send+0x20>
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d03a      	beq.n	8004958 <SX1276Send+0x8c>
 80048e2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 80048e4:	f7ff ff96 	bl	8004814 <SX1276SetTx>
}
 80048e8:	b003      	add	sp, #12
 80048ea:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <SX1276Send+0x11c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 80048f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80048f8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 80048fc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8004900:	b9eb      	cbnz	r3, 800493e <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8004902:	2101      	movs	r1, #1
 8004904:	f10d 0007 	add.w	r0, sp, #7
 8004908:	f005 fdff 	bl	800a50a <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 800490c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004910:	1e53      	subs	r3, r2, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b3f      	cmp	r3, #63	; 0x3f
 8004916:	d816      	bhi.n	8004946 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004918:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <SX1276Send+0x11c>)
 800491a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800491e:	4d32      	ldr	r5, [pc, #200]	; (80049e8 <SX1276Send+0x11c>)
 8004920:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8004924:	4620      	mov	r0, r4
 8004926:	f005 fdf0 	bl	800a50a <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800492a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 800492e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8004932:	4413      	add	r3, r2
 8004934:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004938:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 800493c:	e7d2      	b.n	80048e4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800493e:	2032      	movs	r0, #50	; 0x32
 8004940:	f005 fe1c 	bl	800a57c <SX1276Write>
 8004944:	e7e2      	b.n	800490c <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8004946:	4621      	mov	r1, r4
 8004948:	4828      	ldr	r0, [pc, #160]	; (80049ec <SX1276Send+0x120>)
 800494a:	f005 fd15 	bl	800a378 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800494e:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <SX1276Send+0x11c>)
 8004950:	2220      	movs	r2, #32
 8004952:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004956:	e7e2      	b.n	800491e <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <SX1276Send+0x11c>)
 800495a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800495e:	b353      	cbz	r3, 80049b6 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004960:	2033      	movs	r0, #51	; 0x33
 8004962:	f005 fe17 	bl	800a594 <SX1276Read>
 8004966:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 800496a:	2033      	movs	r0, #51	; 0x33
 800496c:	f005 fe06 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004970:	2119      	movs	r1, #25
 8004972:	203b      	movs	r0, #59	; 0x3b
 8004974:	f005 fe02 	bl	800a57c <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8004978:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <SX1276Send+0x11c>)
 800497e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004982:	2022      	movs	r0, #34	; 0x22
 8004984:	f005 fdfa 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004988:	2100      	movs	r1, #0
 800498a:	200e      	movs	r0, #14
 800498c:	f005 fdf6 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004990:	2100      	movs	r1, #0
 8004992:	200d      	movs	r0, #13
 8004994:	f005 fdf2 	bl	800a57c <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004998:	2001      	movs	r0, #1
 800499a:	f005 fdfb 	bl	800a594 <SX1276Read>
 800499e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 80049a2:	d01a      	beq.n	80049da <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 80049a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80049a8:	4620      	mov	r0, r4
 80049aa:	f005 fdae 	bl	800a50a <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80049ae:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <SX1276Send+0x11c>)
 80049b0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 80049b4:	e796      	b.n	80048e4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80049b6:	2033      	movs	r0, #51	; 0x33
 80049b8:	f005 fdec 	bl	800a594 <SX1276Read>
 80049bc:	b241      	sxtb	r1, r0
 80049be:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80049c2:	f041 0101 	orr.w	r1, r1, #1
 80049c6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 80049ca:	2033      	movs	r0, #51	; 0x33
 80049cc:	f005 fdd6 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80049d0:	211d      	movs	r1, #29
 80049d2:	203b      	movs	r0, #59	; 0x3b
 80049d4:	f005 fdd2 	bl	800a57c <SX1276Write>
 80049d8:	e7ce      	b.n	8004978 <SX1276Send+0xac>
                SX1276SetStby( );
 80049da:	f7ff ff01 	bl	80047e0 <SX1276SetStby>
                DelayMs( 1 );
 80049de:	2001      	movs	r0, #1
 80049e0:	f005 fd1b 	bl	800a41a <DelayMs>
 80049e4:	e7de      	b.n	80049a4 <SX1276Send+0xd8>
 80049e6:	bf00      	nop
 80049e8:	20000a40 	.word	0x20000a40
 80049ec:	20000940 	.word	0x20000940

080049f0 <SX1276SetRx>:
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 80049f4:	489d      	ldr	r0, [pc, #628]	; (8004c6c <SX1276SetRx+0x27c>)
 80049f6:	f7ff fb0b 	bl	8004010 <TimerStop>
    switch( SX1276.Settings.Modem )
 80049fa:	4b9d      	ldr	r3, [pc, #628]	; (8004c70 <SX1276SetRx+0x280>)
 80049fc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004a00:	b1e3      	cbz	r3, 8004a3c <SX1276SetRx+0x4c>
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d045      	beq.n	8004a92 <SX1276SetRx+0xa2>
 8004a06:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8004a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4899      	ldr	r0, [pc, #612]	; (8004c74 <SX1276SetRx+0x284>)
 8004a10:	f006 fba0 	bl	800b154 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8004a14:	4b96      	ldr	r3, [pc, #600]	; (8004c70 <SX1276SetRx+0x280>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8004a1c:	2c00      	cmp	r4, #0
 8004a1e:	f040 8107 	bne.w	8004c30 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8004a22:	4b93      	ldr	r3, [pc, #588]	; (8004c70 <SX1276SetRx+0x280>)
 8004a24:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 810a 	beq.w	8004c42 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	f000 8118 	beq.w	8004c64 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8004a34:	2005      	movs	r0, #5
 8004a36:	f005 fdb9 	bl	800a5ac <SX1276SetOpMode>
}
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004a3c:	4d8c      	ldr	r5, [pc, #560]	; (8004c70 <SX1276SetRx+0x280>)
 8004a3e:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004a42:	2040      	movs	r0, #64	; 0x40
 8004a44:	f005 fda6 	bl	800a594 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004a48:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004a4c:	f041 010c 	orr.w	r1, r1, #12
 8004a50:	2040      	movs	r0, #64	; 0x40
 8004a52:	f005 fd93 	bl	800a57c <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004a56:	2041      	movs	r0, #65	; 0x41
 8004a58:	f005 fd9c 	bl	800a594 <SX1276Read>
 8004a5c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8004a60:	b2c9      	uxtb	r1, r1
 8004a62:	2041      	movs	r0, #65	; 0x41
 8004a64:	f005 fd8a 	bl	800a57c <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004a68:	2035      	movs	r0, #53	; 0x35
 8004a6a:	f005 fd93 	bl	800a594 <SX1276Read>
 8004a6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004a72:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8004a76:	211e      	movs	r1, #30
 8004a78:	200d      	movs	r0, #13
 8004a7a:	f005 fd7f 	bl	800a57c <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004a84:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004a88:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004a8c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8004a90:	e7ba      	b.n	8004a08 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004a92:	4b77      	ldr	r3, [pc, #476]	; (8004c70 <SX1276SetRx+0x280>)
 8004a94:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004a98:	b353      	cbz	r3, 8004af0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004a9a:	2033      	movs	r0, #51	; 0x33
 8004a9c:	f005 fd7a 	bl	800a594 <SX1276Read>
 8004aa0:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8004aa4:	b2c9      	uxtb	r1, r1
 8004aa6:	2033      	movs	r0, #51	; 0x33
 8004aa8:	f005 fd68 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004aac:	2119      	movs	r1, #25
 8004aae:	203b      	movs	r0, #59	; 0x3b
 8004ab0:	f005 fd64 	bl	800a57c <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8004ab4:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <SX1276SetRx+0x280>)
 8004ab6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	f200 8087 	bhi.w	8004bce <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004ac0:	2031      	movs	r0, #49	; 0x31
 8004ac2:	f005 fd67 	bl	800a594 <SX1276Read>
 8004ac6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004aca:	2031      	movs	r0, #49	; 0x31
 8004acc:	f005 fd56 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2030      	movs	r0, #48	; 0x30
 8004ad4:	f005 fd52 	bl	800a57c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8004ad8:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <SX1276SetRx+0x280>)
 8004ada:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d87e      	bhi.n	8004be0 <SX1276SetRx+0x1f0>
 8004ae2:	e8df f003 	tbb	[pc, r3]
 8004ae6:	2417      	.short	0x2417
 8004ae8:	584b3e31 	.word	0x584b3e31
 8004aec:	6a65      	.short	0x6a65
 8004aee:	6f          	.byte	0x6f
 8004aef:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004af0:	2033      	movs	r0, #51	; 0x33
 8004af2:	f005 fd4f 	bl	800a594 <SX1276Read>
 8004af6:	b241      	sxtb	r1, r0
 8004af8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8004afc:	f041 0101 	orr.w	r1, r1, #1
 8004b00:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8004b04:	2033      	movs	r0, #51	; 0x33
 8004b06:	f005 fd39 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004b0a:	211d      	movs	r1, #29
 8004b0c:	203b      	movs	r0, #59	; 0x3b
 8004b0e:	f005 fd35 	bl	800a57c <SX1276Write>
 8004b12:	e7cf      	b.n	8004ab4 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8004b14:	2148      	movs	r1, #72	; 0x48
 8004b16:	202f      	movs	r0, #47	; 0x2f
 8004b18:	f005 fd30 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004b1c:	4b54      	ldr	r3, [pc, #336]	; (8004c70 <SX1276SetRx+0x280>)
 8004b1e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004b22:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8004b26:	3002      	adds	r0, #2
 8004b28:	f7ff fb18 	bl	800415c <SX1276SetChannel>
                    break;
 8004b2c:	e058      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004b2e:	2144      	movs	r1, #68	; 0x44
 8004b30:	202f      	movs	r0, #47	; 0x2f
 8004b32:	f005 fd23 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004b36:	4b4e      	ldr	r3, [pc, #312]	; (8004c70 <SX1276SetRx+0x280>)
 8004b38:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004b3c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8004b40:	3034      	adds	r0, #52	; 0x34
 8004b42:	f7ff fb0b 	bl	800415c <SX1276SetChannel>
                    break;
 8004b46:	e04b      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004b48:	2144      	movs	r1, #68	; 0x44
 8004b4a:	202f      	movs	r0, #47	; 0x2f
 8004b4c:	f005 fd16 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004b50:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <SX1276SetRx+0x280>)
 8004b52:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004b56:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8004b5a:	3004      	adds	r0, #4
 8004b5c:	f7ff fafe 	bl	800415c <SX1276SetChannel>
                    break;
 8004b60:	e03e      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004b62:	2144      	movs	r1, #68	; 0x44
 8004b64:	202f      	movs	r0, #47	; 0x2f
 8004b66:	f005 fd09 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8004b6a:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <SX1276SetRx+0x280>)
 8004b6c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004b70:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8004b74:	305e      	adds	r0, #94	; 0x5e
 8004b76:	f7ff faf1 	bl	800415c <SX1276SetChannel>
                    break;
 8004b7a:	e031      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004b7c:	2144      	movs	r1, #68	; 0x44
 8004b7e:	202f      	movs	r0, #47	; 0x2f
 8004b80:	f005 fcfc 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8004b84:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <SX1276SetRx+0x280>)
 8004b86:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004b8a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8004b8e:	3012      	adds	r0, #18
 8004b90:	f7ff fae4 	bl	800415c <SX1276SetChannel>
                    break;
 8004b94:	e024      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004b96:	2144      	movs	r1, #68	; 0x44
 8004b98:	202f      	movs	r0, #47	; 0x2f
 8004b9a:	f005 fcef 	bl	800a57c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <SX1276SetRx+0x280>)
 8004ba0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8004ba4:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8004ba8:	30c6      	adds	r0, #198	; 0xc6
 8004baa:	f7ff fad7 	bl	800415c <SX1276SetChannel>
                    break;
 8004bae:	e017      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004bb0:	2140      	movs	r1, #64	; 0x40
 8004bb2:	202f      	movs	r0, #47	; 0x2f
 8004bb4:	f005 fce2 	bl	800a57c <SX1276Write>
                    break;
 8004bb8:	e012      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004bba:	2140      	movs	r1, #64	; 0x40
 8004bbc:	202f      	movs	r0, #47	; 0x2f
 8004bbe:	f005 fcdd 	bl	800a57c <SX1276Write>
                    break;
 8004bc2:	e00d      	b.n	8004be0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004bc4:	2140      	movs	r1, #64	; 0x40
 8004bc6:	202f      	movs	r0, #47	; 0x2f
 8004bc8:	f005 fcd8 	bl	800a57c <SX1276Write>
                    break;
 8004bcc:	e008      	b.n	8004be0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004bce:	2031      	movs	r0, #49	; 0x31
 8004bd0:	f005 fce0 	bl	800a594 <SX1276Read>
 8004bd4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004bd8:	b2c9      	uxtb	r1, r1
 8004bda:	2031      	movs	r0, #49	; 0x31
 8004bdc:	f005 fcce 	bl	800a57c <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8004be0:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <SX1276SetRx+0x280>)
 8004be2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004be6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004bea:	b1a3      	cbz	r3, 8004c16 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004bec:	211d      	movs	r1, #29
 8004bee:	2011      	movs	r0, #17
 8004bf0:	f005 fcc4 	bl	800a57c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004bf4:	2040      	movs	r0, #64	; 0x40
 8004bf6:	f005 fccd 	bl	800a594 <SX1276Read>
 8004bfa:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8004bfe:	2040      	movs	r0, #64	; 0x40
 8004c00:	f005 fcbc 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004c04:	2100      	movs	r1, #0
 8004c06:	200f      	movs	r0, #15
 8004c08:	f005 fcb8 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	200d      	movs	r0, #13
 8004c10:	f005 fcb4 	bl	800a57c <SX1276Write>
        break;
 8004c14:	e6f8      	b.n	8004a08 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004c16:	211f      	movs	r1, #31
 8004c18:	2011      	movs	r0, #17
 8004c1a:	f005 fcaf 	bl	800a57c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004c1e:	2040      	movs	r0, #64	; 0x40
 8004c20:	f005 fcb8 	bl	800a594 <SX1276Read>
 8004c24:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8004c28:	2040      	movs	r0, #64	; 0x40
 8004c2a:	f005 fca7 	bl	800a57c <SX1276Write>
 8004c2e:	e7e9      	b.n	8004c04 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004c30:	4d11      	ldr	r5, [pc, #68]	; (8004c78 <SX1276SetRx+0x288>)
 8004c32:	4621      	mov	r1, r4
 8004c34:	4628      	mov	r0, r5
 8004c36:	f005 fbc9 	bl	800a3cc <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7ff f96e 	bl	8003f1c <TimerStart>
 8004c40:	e6ef      	b.n	8004a22 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8004c42:	2005      	movs	r0, #5
 8004c44:	f005 fcb2 	bl	800a5ac <SX1276SetOpMode>
        if( rxContinuous == false )
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	f47f aef6 	bne.w	8004a3a <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8004c4e:	4c0b      	ldr	r4, [pc, #44]	; (8004c7c <SX1276SetRx+0x28c>)
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <SX1276SetRx+0x280>)
 8004c52:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8004c56:	4620      	mov	r0, r4
 8004c58:	f005 fbb8 	bl	800a3cc <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7ff f95d 	bl	8003f1c <TimerStart>
 8004c62:	e6ea      	b.n	8004a3a <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8004c64:	2006      	movs	r0, #6
 8004c66:	f005 fca1 	bl	800a5ac <SX1276SetOpMode>
}
 8004c6a:	e6e6      	b.n	8004a3a <SX1276SetRx+0x4a>
 8004c6c:	20000b84 	.word	0x20000b84
 8004c70:	20000a40 	.word	0x20000a40
 8004c74:	20000940 	.word	0x20000940
 8004c78:	20000928 	.word	0x20000928
 8004c7c:	20000910 	.word	0x20000910

08004c80 <SX1276ReadRssi>:
{
 8004c80:	b508      	push	{r3, lr}
    switch( modem )
 8004c82:	b120      	cbz	r0, 8004c8e <SX1276ReadRssi+0xe>
 8004c84:	2801      	cmp	r0, #1
 8004c86:	d00a      	beq.n	8004c9e <SX1276ReadRssi+0x1e>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004c8c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004c8e:	2011      	movs	r0, #17
 8004c90:	f005 fc80 	bl	800a594 <SX1276Read>
 8004c94:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8004c98:	4240      	negs	r0, r0
 8004c9a:	b200      	sxth	r0, r0
        break;
 8004c9c:	e7f6      	b.n	8004c8c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <SX1276ReadRssi+0x48>)
 8004ca0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <SX1276ReadRssi+0x4c>)
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d906      	bls.n	8004cb8 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004caa:	201b      	movs	r0, #27
 8004cac:	f005 fc72 	bl	800a594 <SX1276Read>
 8004cb0:	b200      	sxth	r0, r0
 8004cb2:	389d      	subs	r0, #157	; 0x9d
 8004cb4:	b200      	sxth	r0, r0
 8004cb6:	e7e9      	b.n	8004c8c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004cb8:	201b      	movs	r0, #27
 8004cba:	f005 fc6b 	bl	800a594 <SX1276Read>
 8004cbe:	b200      	sxth	r0, r0
 8004cc0:	38a4      	subs	r0, #164	; 0xa4
 8004cc2:	b200      	sxth	r0, r0
 8004cc4:	e7e2      	b.n	8004c8c <SX1276ReadRssi+0xc>
 8004cc6:	bf00      	nop
 8004cc8:	20000a40 	.word	0x20000a40
 8004ccc:	1f4add40 	.word	0x1f4add40

08004cd0 <SX1276SetModem>:
{
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f005 fc5d 	bl	800a594 <SX1276Read>
 8004cda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004cde:	d121      	bne.n	8004d24 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <SX1276SetModem+0x88>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <SX1276SetModem+0x88>)
 8004cea:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004cee:	42a3      	cmp	r3, r4
 8004cf0:	d017      	beq.n	8004d22 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8004cf2:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <SX1276SetModem+0x88>)
 8004cf4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8004cf8:	2c01      	cmp	r4, #1
 8004cfa:	d018      	beq.n	8004d2e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f005 fc55 	bl	800a5ac <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004d02:	2001      	movs	r0, #1
 8004d04:	f005 fc46 	bl	800a594 <SX1276Read>
 8004d08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f005 fc35 	bl	800a57c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004d12:	2100      	movs	r1, #0
 8004d14:	2040      	movs	r0, #64	; 0x40
 8004d16:	f005 fc31 	bl	800a57c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004d1a:	2130      	movs	r1, #48	; 0x30
 8004d1c:	2041      	movs	r0, #65	; 0x41
 8004d1e:	f005 fc2d 	bl	800a57c <SX1276Write>
}
 8004d22:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <SX1276SetModem+0x88>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004d2c:	e7dc      	b.n	8004ce8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f005 fc3c 	bl	800a5ac <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004d34:	2001      	movs	r0, #1
 8004d36:	f005 fc2d 	bl	800a594 <SX1276Read>
 8004d3a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8004d3e:	b2c9      	uxtb	r1, r1
 8004d40:	2001      	movs	r0, #1
 8004d42:	f005 fc1b 	bl	800a57c <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004d46:	2100      	movs	r1, #0
 8004d48:	2040      	movs	r0, #64	; 0x40
 8004d4a:	f005 fc17 	bl	800a57c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2041      	movs	r0, #65	; 0x41
 8004d52:	f005 fc13 	bl	800a57c <SX1276Write>
        break;
 8004d56:	e7e4      	b.n	8004d22 <SX1276SetModem+0x52>
 8004d58:	20000a40 	.word	0x20000a40

08004d5c <SX1276Init>:
{
 8004d5c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8004d5e:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <SX1276Init+0x68>)
 8004d60:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8004d62:	4c19      	ldr	r4, [pc, #100]	; (8004dc8 <SX1276Init+0x6c>)
 8004d64:	4621      	mov	r1, r4
 8004d66:	4819      	ldr	r0, [pc, #100]	; (8004dcc <SX1276Init+0x70>)
 8004d68:	f005 fb27 	bl	800a3ba <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4818      	ldr	r0, [pc, #96]	; (8004dd0 <SX1276Init+0x74>)
 8004d70:	f005 fb23 	bl	800a3ba <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8004d74:	4621      	mov	r1, r4
 8004d76:	4817      	ldr	r0, [pc, #92]	; (8004dd4 <SX1276Init+0x78>)
 8004d78:	f005 fb1f 	bl	800a3ba <TimerInit>
    SX1276Reset( );
 8004d7c:	f7fe ff48 	bl	8003c10 <SX1276Reset>
    RxChainCalibration( );
 8004d80:	f7ff fccc 	bl	800471c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004d84:	2000      	movs	r0, #0
 8004d86:	f005 fc11 	bl	800a5ac <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8004d8a:	4813      	ldr	r0, [pc, #76]	; (8004dd8 <SX1276Init+0x7c>)
 8004d8c:	f7fe ff74 	bl	8003c78 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004d90:	2400      	movs	r4, #0
 8004d92:	e00c      	b.n	8004dae <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <SX1276Init+0x80>)
 8004d96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004d9a:	18d5      	adds	r5, r2, r3
 8004d9c:	5cd0      	ldrb	r0, [r2, r3]
 8004d9e:	f7ff ff97 	bl	8004cd0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004da2:	78a9      	ldrb	r1, [r5, #2]
 8004da4:	7868      	ldrb	r0, [r5, #1]
 8004da6:	f005 fbe9 	bl	800a57c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004daa:	3401      	adds	r4, #1
 8004dac:	b2e4      	uxtb	r4, r4
 8004dae:	2c0f      	cmp	r4, #15
 8004db0:	d9f0      	bls.n	8004d94 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8004db2:	2000      	movs	r0, #0
 8004db4:	f7ff ff8c 	bl	8004cd0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <SX1276Init+0x84>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	bf00      	nop
 8004dc4:	2000090c 	.word	0x2000090c
 8004dc8:	080053dd 	.word	0x080053dd
 8004dcc:	20000b84 	.word	0x20000b84
 8004dd0:	20000928 	.word	0x20000928
 8004dd4:	20000910 	.word	0x20000910
 8004dd8:	2000008c 	.word	0x2000008c
 8004ddc:	0800c060 	.word	0x0800c060
 8004de0:	20000a40 	.word	0x20000a40

08004de4 <SX1276SetRxConfig>:
{
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	b085      	sub	sp, #20
 8004dea:	4604      	mov	r4, r0
 8004dec:	9101      	str	r1, [sp, #4]
 8004dee:	4615      	mov	r5, r2
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8004df6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8004dfa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8004dfe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8004e02:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8004e06:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8004e0a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8004e0e:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8004e10:	f7ff ff5e 	bl	8004cd0 <SX1276SetModem>
    switch( modem )
 8004e14:	b124      	cbz	r4, 8004e20 <SX1276SetRxConfig+0x3c>
 8004e16:	2c01      	cmp	r4, #1
 8004e18:	d069      	beq.n	8004eee <SX1276SetRxConfig+0x10a>
}
 8004e1a:	b005      	add	sp, #20
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004e20:	4ba0      	ldr	r3, [pc, #640]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8004e22:	9c01      	ldr	r4, [sp, #4]
 8004e24:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8004e28:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8004e2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004e32:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8004e36:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004e3a:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004e3e:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8004e42:	9a02      	ldr	r2, [sp, #8]
 8004e44:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004e48:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004e4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004e50:	fb02 fa0a 	mul.w	sl, r2, sl
 8004e54:	fbba f2f5 	udiv	r2, sl, r5
 8004e58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004e5c:	4b92      	ldr	r3, [pc, #584]	; (80050a8 <SX1276SetRxConfig+0x2c4>)
 8004e5e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004e62:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8004e66:	2002      	movs	r0, #2
 8004e68:	f005 fb88 	bl	800a57c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004e6c:	b2e9      	uxtb	r1, r5
 8004e6e:	2003      	movs	r0, #3
 8004e70:	f005 fb84 	bl	800a57c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff f91f 	bl	80040b8 <GetFskBandwidthRegValue>
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	2012      	movs	r0, #18
 8004e7e:	f005 fb7d 	bl	800a57c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8004e82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004e84:	f7ff f918 	bl	80040b8 <GetFskBandwidthRegValue>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	2013      	movs	r0, #19
 8004e8c:	f005 fb76 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004e90:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8004e94:	2025      	movs	r0, #37	; 0x25
 8004e96:	f005 fb71 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004e9a:	fa5f f188 	uxtb.w	r1, r8
 8004e9e:	2026      	movs	r0, #38	; 0x26
 8004ea0:	f005 fb6c 	bl	800a57c <SX1276Write>
            if( fixLen == 1 )
 8004ea4:	b1df      	cbz	r7, 8004ede <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	2032      	movs	r0, #50	; 0x32
 8004eaa:	f005 fb67 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004eae:	2030      	movs	r0, #48	; 0x30
 8004eb0:	f005 fb70 	bl	800a594 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8004eb4:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004eb8:	b1b7      	cbz	r7, 8004ee8 <SX1276SetRxConfig+0x104>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004ebe:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8004ec2:	b2c9      	uxtb	r1, r1
 8004ec4:	2030      	movs	r0, #48	; 0x30
 8004ec6:	f005 fb59 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004eca:	2031      	movs	r0, #49	; 0x31
 8004ecc:	f005 fb62 	bl	800a594 <SX1276Read>
 8004ed0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8004ed4:	b2c9      	uxtb	r1, r1
 8004ed6:	2031      	movs	r0, #49	; 0x31
 8004ed8:	f005 fb50 	bl	800a57c <SX1276Write>
        break;
 8004edc:	e79d      	b.n	8004e1a <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004ede:	21ff      	movs	r1, #255	; 0xff
 8004ee0:	2032      	movs	r0, #50	; 0x32
 8004ee2:	f005 fb4b 	bl	800a57c <SX1276Write>
 8004ee6:	e7e2      	b.n	8004eae <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004ee8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004eec:	e7e6      	b.n	8004ebc <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8004eee:	9b01      	ldr	r3, [sp, #4]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d900      	bls.n	8004ef6 <SX1276SetRxConfig+0x112>
                while( 1 );
 8004ef4:	e7fe      	b.n	8004ef4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 8004ef6:	9c01      	ldr	r4, [sp, #4]
 8004ef8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004efa:	4b6a      	ldr	r3, [pc, #424]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8004efc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8004f00:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8004f04:	9a03      	ldr	r2, [sp, #12]
 8004f06:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004f0a:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004f0e:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8004f12:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004f16:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004f1a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8004f1e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004f22:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8004f26:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004f2a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004f2e:	9a02      	ldr	r2, [sp, #8]
 8004f30:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8004f34:	2d0c      	cmp	r5, #12
 8004f36:	d803      	bhi.n	8004f40 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8004f38:	2d05      	cmp	r5, #5
 8004f3a:	d802      	bhi.n	8004f42 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 8004f3c:	2506      	movs	r5, #6
 8004f3e:	e000      	b.n	8004f42 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8004f40:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004f42:	2c07      	cmp	r4, #7
 8004f44:	d063      	beq.n	800500e <SX1276SetRxConfig+0x22a>
 8004f46:	2c08      	cmp	r4, #8
 8004f48:	d06a      	beq.n	8005020 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004f4a:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004f52:	201d      	movs	r0, #29
 8004f54:	f005 fb1e 	bl	800a594 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004f58:	0123      	lsls	r3, r4, #4
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004f64:	ea43 0107 	orr.w	r1, r3, r7
 8004f68:	201d      	movs	r0, #29
 8004f6a:	f005 fb07 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004f6e:	201e      	movs	r0, #30
 8004f70:	f005 fb10 	bl	800a594 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004f74:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004f78:	012a      	lsls	r2, r5, #4
 8004f7a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8004f7c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004f7e:	00b3      	lsls	r3, r6, #2
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004f84:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004f88:	4319      	orrs	r1, r3
 8004f8a:	201e      	movs	r0, #30
 8004f8c:	f005 faf6 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004f90:	2026      	movs	r0, #38	; 0x26
 8004f92:	f005 faff 	bl	800a594 <SX1276Read>
 8004f96:	b241      	sxtb	r1, r0
 8004f98:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004f9c:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8004f9e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004fa2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004fa6:	b2c9      	uxtb	r1, r1
 8004fa8:	2026      	movs	r0, #38	; 0x26
 8004faa:	f005 fae7 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004fae:	fa5f f18a 	uxtb.w	r1, sl
 8004fb2:	201f      	movs	r0, #31
 8004fb4:	f005 fae2 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004fb8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8004fbc:	2020      	movs	r0, #32
 8004fbe:	f005 fadd 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004fc2:	fa5f f188 	uxtb.w	r1, r8
 8004fc6:	2021      	movs	r0, #33	; 0x21
 8004fc8:	f005 fad8 	bl	800a57c <SX1276Write>
            if( fixLen == 1 )
 8004fcc:	bb5f      	cbnz	r7, 8005026 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004fce:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8004fd0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8004fd4:	bb63      	cbnz	r3, 8005030 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004fd6:	2c09      	cmp	r4, #9
 8004fd8:	d03a      	beq.n	8005050 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 8004fda:	2c09      	cmp	r4, #9
 8004fdc:	d047      	beq.n	800506e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004fde:	2103      	movs	r1, #3
 8004fe0:	2036      	movs	r0, #54	; 0x36
 8004fe2:	f005 facb 	bl	800a57c <SX1276Write>
            if( datarate == 6 )
 8004fe6:	2d06      	cmp	r5, #6
 8004fe8:	d04a      	beq.n	8005080 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004fea:	2031      	movs	r0, #49	; 0x31
 8004fec:	f005 fad2 	bl	800a594 <SX1276Read>
 8004ff0:	b241      	sxtb	r1, r0
 8004ff2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004ff6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004ffa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8004ffe:	2031      	movs	r0, #49	; 0x31
 8005000:	f005 fabc 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005004:	210a      	movs	r1, #10
 8005006:	2037      	movs	r0, #55	; 0x37
 8005008:	f005 fab8 	bl	800a57c <SX1276Write>
}
 800500c:	e705      	b.n	8004e1a <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800500e:	f1a5 030b 	sub.w	r3, r5, #11
 8005012:	2b01      	cmp	r3, #1
 8005014:	d897      	bhi.n	8004f46 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800501e:	e798      	b.n	8004f52 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005020:	2d0c      	cmp	r5, #12
 8005022:	d192      	bne.n	8004f4a <SX1276SetRxConfig+0x166>
 8005024:	e7f7      	b.n	8005016 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005026:	4649      	mov	r1, r9
 8005028:	2022      	movs	r0, #34	; 0x22
 800502a:	f005 faa7 	bl	800a57c <SX1276Write>
 800502e:	e7ce      	b.n	8004fce <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005030:	2044      	movs	r0, #68	; 0x44
 8005032:	f005 faaf 	bl	800a594 <SX1276Read>
 8005036:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800503a:	b2c9      	uxtb	r1, r1
 800503c:	2044      	movs	r0, #68	; 0x44
 800503e:	f005 fa9d 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8005044:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8005048:	2024      	movs	r0, #36	; 0x24
 800504a:	f005 fa97 	bl	800a57c <SX1276Write>
 800504e:	e7c2      	b.n	8004fd6 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <SX1276SetRxConfig+0x2c0>)
 8005052:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8005056:	4b15      	ldr	r3, [pc, #84]	; (80050ac <SX1276SetRxConfig+0x2c8>)
 8005058:	429a      	cmp	r2, r3
 800505a:	d9be      	bls.n	8004fda <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800505c:	2102      	movs	r1, #2
 800505e:	2036      	movs	r0, #54	; 0x36
 8005060:	f005 fa8c 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005064:	2164      	movs	r1, #100	; 0x64
 8005066:	203a      	movs	r0, #58	; 0x3a
 8005068:	f005 fa88 	bl	800a57c <SX1276Write>
 800506c:	e7bb      	b.n	8004fe6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800506e:	2102      	movs	r1, #2
 8005070:	2036      	movs	r0, #54	; 0x36
 8005072:	f005 fa83 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005076:	217f      	movs	r1, #127	; 0x7f
 8005078:	203a      	movs	r0, #58	; 0x3a
 800507a:	f005 fa7f 	bl	800a57c <SX1276Write>
 800507e:	e7b2      	b.n	8004fe6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005080:	2031      	movs	r0, #49	; 0x31
 8005082:	f005 fa87 	bl	800a594 <SX1276Read>
 8005086:	b241      	sxtb	r1, r0
 8005088:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800508c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005090:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8005094:	2031      	movs	r0, #49	; 0x31
 8005096:	f005 fa71 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800509a:	210c      	movs	r1, #12
 800509c:	2037      	movs	r0, #55	; 0x37
 800509e:	f005 fa6d 	bl	800a57c <SX1276Write>
 80050a2:	e6ba      	b.n	8004e1a <SX1276SetRxConfig+0x36>
 80050a4:	20000a40 	.word	0x20000a40
 80050a8:	01e84800 	.word	0x01e84800
 80050ac:	1f4add40 	.word	0x1f4add40

080050b0 <SX1276SetTxConfig>:
{
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b083      	sub	sp, #12
 80050b6:	4604      	mov	r4, r0
 80050b8:	460d      	mov	r5, r1
 80050ba:	9201      	str	r2, [sp, #4]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80050c2:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80050c6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80050ca:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80050ce:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80050d2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80050d6:	f7ff fdfb 	bl	8004cd0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80050da:	4628      	mov	r0, r5
 80050dc:	f005 f904 	bl	800a2e8 <SX1276SetRfTxPower>
    switch( modem )
 80050e0:	b124      	cbz	r4, 80050ec <SX1276SetTxConfig+0x3c>
 80050e2:	2c01      	cmp	r4, #1
 80050e4:	d057      	beq.n	8005196 <SX1276SetTxConfig+0xe6>
}
 80050e6:	b003      	add	sp, #12
 80050e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 80050ec:	4b81      	ldr	r3, [pc, #516]	; (80052f4 <SX1276SetTxConfig+0x244>)
 80050ee:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 80050f2:	9801      	ldr	r0, [sp, #4]
 80050f4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80050f8:	9a00      	ldr	r2, [sp, #0]
 80050fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 80050fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005100:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005104:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005108:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800510c:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005110:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8005114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005116:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800511a:	f7fe ffb9 	bl	8004090 <SX1276ConvertFreqInHzToPllStep>
 800511e:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8005120:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8005124:	2004      	movs	r0, #4
 8005126:	f005 fa29 	bl	800a57c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800512a:	b2e1      	uxtb	r1, r4
 800512c:	2005      	movs	r0, #5
 800512e:	f005 fa25 	bl	800a57c <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8005132:	4c71      	ldr	r4, [pc, #452]	; (80052f8 <SX1276SetTxConfig+0x248>)
 8005134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005136:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800513a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800513e:	2002      	movs	r0, #2
 8005140:	f005 fa1c 	bl	800a57c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8005144:	b2e1      	uxtb	r1, r4
 8005146:	2003      	movs	r0, #3
 8005148:	f005 fa18 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800514c:	0a39      	lsrs	r1, r7, #8
 800514e:	2025      	movs	r0, #37	; 0x25
 8005150:	f005 fa14 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8005154:	b2f9      	uxtb	r1, r7
 8005156:	2026      	movs	r0, #38	; 0x26
 8005158:	f005 fa10 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800515c:	2030      	movs	r0, #48	; 0x30
 800515e:	f005 fa19 	bl	800a594 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8005162:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005166:	f1b8 0f00 	cmp.w	r8, #0
 800516a:	d011      	beq.n	8005190 <SX1276SetTxConfig+0xe0>
 800516c:	2300      	movs	r3, #0
 800516e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005170:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8005174:	b2c9      	uxtb	r1, r1
 8005176:	2030      	movs	r0, #48	; 0x30
 8005178:	f005 fa00 	bl	800a57c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800517c:	2031      	movs	r0, #49	; 0x31
 800517e:	f005 fa09 	bl	800a594 <SX1276Read>
 8005182:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8005186:	b2c9      	uxtb	r1, r1
 8005188:	2031      	movs	r0, #49	; 0x31
 800518a:	f005 f9f7 	bl	800a57c <SX1276Write>
        break;
 800518e:	e7aa      	b.n	80050e6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005190:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005194:	e7eb      	b.n	800516e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8005196:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <SX1276SetTxConfig+0x244>)
 8005198:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800519c:	9b00      	ldr	r3, [sp, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d900      	bls.n	80051a4 <SX1276SetTxConfig+0xf4>
                while( 1 );
 80051a2:	e7fe      	b.n	80051a2 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 80051a4:	9c00      	ldr	r4, [sp, #0]
 80051a6:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80051a8:	4b52      	ldr	r3, [pc, #328]	; (80052f4 <SX1276SetTxConfig+0x244>)
 80051aa:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80051ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80051b4:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80051b8:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80051bc:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80051c0:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80051c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80051c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80051cc:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80051d0:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80051d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80051d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80051da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d804      	bhi.n	80051ea <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d804      	bhi.n	80051ee <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80051e4:	2306      	movs	r3, #6
 80051e6:	930c      	str	r3, [sp, #48]	; 0x30
 80051e8:	e001      	b.n	80051ee <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80051ea:	230c      	movs	r3, #12
 80051ec:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80051ee:	2c07      	cmp	r4, #7
 80051f0:	d051      	beq.n	8005296 <SX1276SetTxConfig+0x1e6>
 80051f2:	2c08      	cmp	r4, #8
 80051f4:	d058      	beq.n	80052a8 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80051f6:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <SX1276SetTxConfig+0x244>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80051fe:	f1bb 0f00 	cmp.w	fp, #0
 8005202:	d155      	bne.n	80052b0 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005204:	201d      	movs	r0, #29
 8005206:	f005 f9c5 	bl	800a594 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800520a:	0123      	lsls	r3, r4, #4
 800520c:	b2da      	uxtb	r2, r3
 800520e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005216:	ea43 0108 	orr.w	r1, r3, r8
 800521a:	201d      	movs	r0, #29
 800521c:	f005 f9ae 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005220:	201e      	movs	r0, #30
 8005222:	f005 f9b7 	bl	800a594 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8005226:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800522a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8005230:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8005232:	00b3      	lsls	r3, r6, #2
 8005234:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005236:	4319      	orrs	r1, r3
 8005238:	201e      	movs	r0, #30
 800523a:	f005 f99f 	bl	800a57c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800523e:	2026      	movs	r0, #38	; 0x26
 8005240:	f005 f9a8 	bl	800a594 <SX1276Read>
 8005244:	b241      	sxtb	r1, r0
 8005246:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800524a:	4b2a      	ldr	r3, [pc, #168]	; (80052f4 <SX1276SetTxConfig+0x244>)
 800524c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005250:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005254:	b2c9      	uxtb	r1, r1
 8005256:	2026      	movs	r0, #38	; 0x26
 8005258:	f005 f990 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800525c:	0a39      	lsrs	r1, r7, #8
 800525e:	2020      	movs	r0, #32
 8005260:	f005 f98c 	bl	800a57c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8005264:	b2f9      	uxtb	r1, r7
 8005266:	2021      	movs	r0, #33	; 0x21
 8005268:	f005 f988 	bl	800a57c <SX1276Write>
            if( datarate == 6 )
 800526c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800526e:	2b06      	cmp	r3, #6
 8005270:	d02e      	beq.n	80052d0 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005272:	2031      	movs	r0, #49	; 0x31
 8005274:	f005 f98e 	bl	800a594 <SX1276Read>
 8005278:	b241      	sxtb	r1, r0
 800527a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800527e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005282:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8005286:	2031      	movs	r0, #49	; 0x31
 8005288:	f005 f978 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800528c:	210a      	movs	r1, #10
 800528e:	2037      	movs	r0, #55	; 0x37
 8005290:	f005 f974 	bl	800a57c <SX1276Write>
}
 8005294:	e727      	b.n	80050e6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005298:	3b0b      	subs	r3, #11
 800529a:	2b01      	cmp	r3, #1
 800529c:	d8a9      	bhi.n	80051f2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <SX1276SetTxConfig+0x244>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80052a6:	e7aa      	b.n	80051fe <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80052a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d1a3      	bne.n	80051f6 <SX1276SetTxConfig+0x146>
 80052ae:	e7f6      	b.n	800529e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80052b0:	2044      	movs	r0, #68	; 0x44
 80052b2:	f005 f96f 	bl	800a594 <SX1276Read>
 80052b6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80052ba:	b2c9      	uxtb	r1, r1
 80052bc:	2044      	movs	r0, #68	; 0x44
 80052be:	f005 f95d 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <SX1276SetTxConfig+0x244>)
 80052c4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80052c8:	2024      	movs	r0, #36	; 0x24
 80052ca:	f005 f957 	bl	800a57c <SX1276Write>
 80052ce:	e799      	b.n	8005204 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	f005 f95f 	bl	800a594 <SX1276Read>
 80052d6:	b241      	sxtb	r1, r0
 80052d8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80052dc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80052e0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80052e4:	2031      	movs	r0, #49	; 0x31
 80052e6:	f005 f949 	bl	800a57c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80052ea:	210c      	movs	r1, #12
 80052ec:	2037      	movs	r0, #55	; 0x37
 80052ee:	f005 f945 	bl	800a57c <SX1276Write>
 80052f2:	e6f8      	b.n	80050e6 <SX1276SetTxConfig+0x36>
 80052f4:	20000a40 	.word	0x20000a40
 80052f8:	01e84800 	.word	0x01e84800

080052fc <SX1276SetTxContinuousWave>:
{
 80052fc:	b530      	push	{r4, r5, lr}
 80052fe:	b08b      	sub	sp, #44	; 0x2c
 8005300:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005302:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005306:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 800530a:	f7fe ff27 	bl	800415c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800530e:	9408      	str	r4, [sp, #32]
 8005310:	2000      	movs	r0, #0
 8005312:	9007      	str	r0, [sp, #28]
 8005314:	9006      	str	r0, [sp, #24]
 8005316:	9005      	str	r0, [sp, #20]
 8005318:	9004      	str	r0, [sp, #16]
 800531a:	9003      	str	r0, [sp, #12]
 800531c:	2305      	movs	r3, #5
 800531e:	9302      	str	r3, [sp, #8]
 8005320:	9001      	str	r0, [sp, #4]
 8005322:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	4602      	mov	r2, r0
 800532c:	4629      	mov	r1, r5
 800532e:	f7ff febf 	bl	80050b0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8005332:	2031      	movs	r0, #49	; 0x31
 8005334:	f005 f92e 	bl	800a594 <SX1276Read>
 8005338:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800533c:	2031      	movs	r0, #49	; 0x31
 800533e:	f005 f91d 	bl	800a57c <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8005342:	21f0      	movs	r1, #240	; 0xf0
 8005344:	2040      	movs	r0, #64	; 0x40
 8005346:	f005 f919 	bl	800a57c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800534a:	21a0      	movs	r1, #160	; 0xa0
 800534c:	2041      	movs	r0, #65	; 0x41
 800534e:	f005 f915 	bl	800a57c <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005352:	4d08      	ldr	r5, [pc, #32]	; (8005374 <SX1276SetTxContinuousWave+0x78>)
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f005 f838 	bl	800a3cc <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <SX1276SetTxContinuousWave+0x7c>)
 800535e:	2202      	movs	r2, #2
 8005360:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8005364:	4628      	mov	r0, r5
 8005366:	f7fe fdd9 	bl	8003f1c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800536a:	2003      	movs	r0, #3
 800536c:	f005 f91e 	bl	800a5ac <SX1276SetOpMode>
}
 8005370:	b00b      	add	sp, #44	; 0x2c
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	20000b84 	.word	0x20000b84
 8005378:	20000a40 	.word	0x20000a40

0800537c <SX1276SetMaxPayloadLength>:
{
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8005382:	f7ff fca5 	bl	8004cd0 <SX1276SetModem>
    switch( modem )
 8005386:	b114      	cbz	r4, 800538e <SX1276SetMaxPayloadLength+0x12>
 8005388:	2c01      	cmp	r4, #1
 800538a:	d00a      	beq.n	80053a2 <SX1276SetMaxPayloadLength+0x26>
}
 800538c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800538e:	4b07      	ldr	r3, [pc, #28]	; (80053ac <SX1276SetMaxPayloadLength+0x30>)
 8005390:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f9      	bne.n	800538c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8005398:	4629      	mov	r1, r5
 800539a:	2032      	movs	r0, #50	; 0x32
 800539c:	f005 f8ee 	bl	800a57c <SX1276Write>
 80053a0:	e7f4      	b.n	800538c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80053a2:	4629      	mov	r1, r5
 80053a4:	2023      	movs	r0, #35	; 0x23
 80053a6:	f005 f8e9 	bl	800a57c <SX1276Write>
}
 80053aa:	e7ef      	b.n	800538c <SX1276SetMaxPayloadLength+0x10>
 80053ac:	20000a40 	.word	0x20000a40

080053b0 <SX1276SetPublicNetwork>:
{
 80053b0:	b510      	push	{r4, lr}
 80053b2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7ff fc8b 	bl	8004cd0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80053ba:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <SX1276SetPublicNetwork+0x28>)
 80053bc:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80053c0:	b124      	cbz	r4, 80053cc <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80053c2:	2134      	movs	r1, #52	; 0x34
 80053c4:	2039      	movs	r0, #57	; 0x39
 80053c6:	f005 f8d9 	bl	800a57c <SX1276Write>
}
 80053ca:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80053cc:	2112      	movs	r1, #18
 80053ce:	2039      	movs	r0, #57	; 0x39
 80053d0:	f005 f8d4 	bl	800a57c <SX1276Write>
}
 80053d4:	e7f9      	b.n	80053ca <SX1276SetPublicNetwork+0x1a>
 80053d6:	bf00      	nop
 80053d8:	20000a40 	.word	0x20000a40

080053dc <SX1276OnTimeoutIrq>:
{
 80053dc:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80053de:	4b33      	ldr	r3, [pc, #204]	; (80054ac <SX1276OnTimeoutIrq+0xd0>)
 80053e0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d002      	beq.n	80053ee <SX1276OnTimeoutIrq+0x12>
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d033      	beq.n	8005454 <SX1276OnTimeoutIrq+0x78>
}
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80053ee:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <SX1276OnTimeoutIrq+0xd0>)
 80053f0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80053f4:	b143      	cbz	r3, 8005408 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80053f6:	4b2e      	ldr	r3, [pc, #184]	; (80054b0 <SX1276OnTimeoutIrq+0xd4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f6      	beq.n	80053ec <SX1276OnTimeoutIrq+0x10>
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f3      	beq.n	80053ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8005404:	4798      	blx	r3
 8005406:	e7f1      	b.n	80053ec <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005408:	4c28      	ldr	r4, [pc, #160]	; (80054ac <SX1276OnTimeoutIrq+0xd0>)
 800540a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800540e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005412:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005416:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800541a:	210b      	movs	r1, #11
 800541c:	203e      	movs	r0, #62	; 0x3e
 800541e:	f005 f8ad 	bl	800a57c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005422:	2110      	movs	r1, #16
 8005424:	203f      	movs	r0, #63	; 0x3f
 8005426:	f005 f8a9 	bl	800a57c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800542a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800542e:	b14b      	cbz	r3, 8005444 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8005430:	200d      	movs	r0, #13
 8005432:	f005 f8af 	bl	800a594 <SX1276Read>
 8005436:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800543a:	b2c9      	uxtb	r1, r1
 800543c:	200d      	movs	r0, #13
 800543e:	f005 f89d 	bl	800a57c <SX1276Write>
 8005442:	e7d8      	b.n	80053f6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <SX1276OnTimeoutIrq+0xd0>)
 8005446:	2200      	movs	r2, #0
 8005448:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800544c:	4819      	ldr	r0, [pc, #100]	; (80054b4 <SX1276OnTimeoutIrq+0xd8>)
 800544e:	f7fe fddf 	bl	8004010 <TimerStop>
 8005452:	e7d0      	b.n	80053f6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8005454:	f7fe fbdc 	bl	8003c10 <SX1276Reset>
        RxChainCalibration( );
 8005458:	f7ff f960 	bl	800471c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800545c:	2000      	movs	r0, #0
 800545e:	f005 f8a5 	bl	800a5ac <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005462:	2400      	movs	r4, #0
 8005464:	e00c      	b.n	8005480 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8005466:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <SX1276OnTimeoutIrq+0xdc>)
 8005468:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800546c:	18d5      	adds	r5, r2, r3
 800546e:	5cd0      	ldrb	r0, [r2, r3]
 8005470:	f7ff fc2e 	bl	8004cd0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005474:	78a9      	ldrb	r1, [r5, #2]
 8005476:	7868      	ldrb	r0, [r5, #1]
 8005478:	f005 f880 	bl	800a57c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800547c:	3401      	adds	r4, #1
 800547e:	b2e4      	uxtb	r4, r4
 8005480:	2c0f      	cmp	r4, #15
 8005482:	d9f0      	bls.n	8005466 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8005484:	2000      	movs	r0, #0
 8005486:	f7ff fc23 	bl	8004cd0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800548a:	4c08      	ldr	r4, [pc, #32]	; (80054ac <SX1276OnTimeoutIrq+0xd0>)
 800548c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8005490:	f7ff ff8e 	bl	80053b0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8005494:	2300      	movs	r3, #0
 8005496:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <SX1276OnTimeoutIrq+0xd4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0a4      	beq.n	80053ec <SX1276OnTimeoutIrq+0x10>
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0a1      	beq.n	80053ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 80054a8:	4798      	blx	r3
}
 80054aa:	e79f      	b.n	80053ec <SX1276OnTimeoutIrq+0x10>
 80054ac:	20000a40 	.word	0x20000a40
 80054b0:	2000090c 	.word	0x2000090c
 80054b4:	20000910 	.word	0x20000910
 80054b8:	0800c060 	.word	0x0800c060

080054bc <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 80054c4:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80054c6:	6843      	ldr	r3, [r0, #4]
 80054c8:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80054ca:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 80054cc:	2a01      	cmp	r2, #1
 80054ce:	f000 8091 	beq.w	80055f4 <uart_stm32_configure+0x138>
 80054d2:	2a02      	cmp	r2, #2
 80054d4:	f040 8091 	bne.w	80055fa <uart_stm32_configure+0x13e>
		return LL_USART_PARITY_EVEN;
 80054d8:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80054dc:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 80054de:	2b01      	cmp	r3, #1
 80054e0:	f000 8091 	beq.w	8005606 <uart_stm32_configure+0x14a>
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f000 8090 	beq.w	800560a <uart_stm32_configure+0x14e>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8088 	beq.w	8005600 <uart_stm32_configure+0x144>
		return LL_USART_STOPBITS_2;
 80054f0:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80054f4:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 80054f6:	2904      	cmp	r1, #4
 80054f8:	f000 808a 	beq.w	8005610 <uart_stm32_configure+0x154>
		if (p == UART_CFG_PARITY_NONE) {
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	f040 808a 	bne.w	8005616 <uart_stm32_configure+0x15a>
			return LL_USART_DATAWIDTH_8B;
 8005502:	f04f 0800 	mov.w	r8, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8005506:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800550a:	f1ba 0f01 	cmp.w	sl, #1
 800550e:	f000 8085 	beq.w	800561c <uart_stm32_configure+0x160>
	return LL_USART_HWCONTROL_NONE;
 8005512:	f04f 0e00 	mov.w	lr, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8005516:	f1a2 0903 	sub.w	r9, r2, #3
 800551a:	fa5f f989 	uxtb.w	r9, r9
 800551e:	f1b9 0f01 	cmp.w	r9, #1
 8005522:	f240 80c2 	bls.w	80056aa <uart_stm32_configure+0x1ee>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8005526:	b112      	cbz	r2, 800552e <uart_stm32_configure+0x72>
 8005528:	2904      	cmp	r1, #4
 800552a:	f000 80c1 	beq.w	80056b0 <uart_stm32_configure+0x1f4>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80c1 	beq.w	80056b6 <uart_stm32_configure+0x1fa>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8005534:	2b02      	cmp	r3, #2
 8005536:	f000 80c1 	beq.w	80056bc <uart_stm32_configure+0x200>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800553a:	2902      	cmp	r1, #2
 800553c:	f240 80c1 	bls.w	80056c2 <uart_stm32_configure+0x206>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8005540:	2904      	cmp	r1, #4
 8005542:	f000 80c1 	beq.w	80056c8 <uart_stm32_configure+0x20c>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8005546:	f1ba 0f00 	cmp.w	sl, #0
 800554a:	d00f      	beq.n	800556c <uart_stm32_configure+0xb0>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800554c:	4b63      	ldr	r3, [pc, #396]	; (80056dc <uart_stm32_configure+0x220>)
 800554e:	429d      	cmp	r5, r3
 8005550:	d008      	beq.n	8005564 <uart_stm32_configure+0xa8>
 8005552:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8005556:	429d      	cmp	r5, r3
 8005558:	d004      	beq.n	8005564 <uart_stm32_configure+0xa8>
 800555a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555e:	429d      	cmp	r5, r3
 8005560:	f040 80b5 	bne.w	80056ce <uart_stm32_configure+0x212>
 8005564:	f1ba 0f01 	cmp.w	sl, #1
 8005568:	f040 80b4 	bne.w	80056d4 <uart_stm32_configure+0x218>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800556c:	68eb      	ldr	r3, [r5, #12]
 800556e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005572:	60eb      	str	r3, [r5, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005574:	6843      	ldr	r3, [r0, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005578:	68d3      	ldr	r3, [r2, #12]
 800557a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 800557e:	459c      	cmp	ip, r3
 8005580:	d005      	beq.n	800558e <uart_stm32_configure+0xd2>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8005582:	68d3      	ldr	r3, [r2, #12]
 8005584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005588:	ea4c 0303 	orr.w	r3, ip, r3
 800558c:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800558e:	6843      	ldr	r3, [r0, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005592:	6913      	ldr	r3, [r2, #16]
 8005594:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8005598:	429f      	cmp	r7, r3
 800559a:	d004      	beq.n	80055a6 <uart_stm32_configure+0xea>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800559c:	6913      	ldr	r3, [r2, #16]
 800559e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055a2:	431f      	orrs	r7, r3
 80055a4:	6117      	str	r7, [r2, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80055a6:	6843      	ldr	r3, [r0, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80055aa:	68d3      	ldr	r3, [r2, #12]
 80055ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80055b0:	4598      	cmp	r8, r3
 80055b2:	d005      	beq.n	80055c0 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80055b4:	68d3      	ldr	r3, [r2, #12]
 80055b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ba:	ea48 0303 	orr.w	r3, r8, r3
 80055be:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80055c0:	6843      	ldr	r3, [r0, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80055c4:	6953      	ldr	r3, [r2, #20]
 80055c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80055ca:	459e      	cmp	lr, r3
 80055cc:	d005      	beq.n	80055da <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80055ce:	6953      	ldr	r3, [r2, #20]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	ea4e 0303 	orr.w	r3, lr, r3
 80055d8:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 80055da:	f8d4 8000 	ldr.w	r8, [r4]
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	4598      	cmp	r8, r3
 80055e2:	d11e      	bne.n	8005622 <uart_stm32_configure+0x166>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80055e4:	68eb      	ldr	r3, [r5, #12]
 80055e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ea:	60eb      	str	r3, [r5, #12]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80055ec:	2000      	movs	r0, #0
};
 80055ee:	b002      	add	sp, #8
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 80055f4:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 80055f8:	e770      	b.n	80054dc <uart_stm32_configure+0x20>
		return LL_USART_PARITY_NONE;
 80055fa:	f04f 0c00 	mov.w	ip, #0
 80055fe:	e76d      	b.n	80054dc <uart_stm32_configure+0x20>
	switch (sb) {
 8005600:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8005604:	e776      	b.n	80054f4 <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1;
 8005606:	2700      	movs	r7, #0
 8005608:	e774      	b.n	80054f4 <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1_5;
 800560a:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 800560e:	e771      	b.n	80054f4 <uart_stm32_configure+0x38>
		return LL_USART_DATAWIDTH_9B;
 8005610:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8005614:	e777      	b.n	8005506 <uart_stm32_configure+0x4a>
			return LL_USART_DATAWIDTH_9B;
 8005616:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 800561a:	e774      	b.n	8005506 <uart_stm32_configure+0x4a>
		return LL_USART_HWCONTROL_RTS_CTS;
 800561c:	f44f 7e40 	mov.w	lr, #768	; 0x300
 8005620:	e779      	b.n	8005516 <uart_stm32_configure+0x5a>
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005622:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005624:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8005628:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 800562c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8005630:	4650      	mov	r0, sl
 8005632:	f005 f8db 	bl	800a7ec <z_device_ready>
 8005636:	b390      	cbz	r0, 800569e <uart_stm32_configure+0x1e2>
	const struct clock_control_driver_api *api =
 8005638:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	b38b      	cbz	r3, 80056a4 <uart_stm32_configure+0x1e8>
	return api->get_rate(dev, sys, rate);
 8005640:	aa01      	add	r2, sp, #4
 8005642:	4649      	mov	r1, r9
 8005644:	4650      	mov	r0, sl
 8005646:	4798      	blx	r3
 8005648:	2800      	cmp	r0, #0
 800564a:	db25      	blt.n	8005698 <uart_stm32_configure+0x1dc>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005652:	60fb      	str	r3, [r7, #12]
		LL_USART_SetBaudRate(UartInstance,
 8005654:	9a01      	ldr	r2, [sp, #4]
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005656:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800565a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800565e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005662:	fbb2 f2f8 	udiv	r2, r2, r8
 8005666:	481e      	ldr	r0, [pc, #120]	; (80056e0 <uart_stm32_configure+0x224>)
 8005668:	fba0 1302 	umull	r1, r3, r0, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	0119      	lsls	r1, r3, #4
 8005670:	b289      	uxth	r1, r1
 8005672:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005676:	fb0c 2313 	mls	r3, ip, r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	3332      	adds	r3, #50	; 0x32
 800567e:	fba0 2303 	umull	r2, r3, r0, r3
 8005682:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005686:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800568a:	440a      	add	r2, r1
 800568c:	b292      	uxth	r2, r2
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	4413      	add	r3, r2
 8005694:	b29b      	uxth	r3, r3
 8005696:	60bb      	str	r3, [r7, #8]
		data->baud_rate = cfg->baudrate;
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	6033      	str	r3, [r6, #0]
 800569c:	e7a2      	b.n	80055e4 <uart_stm32_configure+0x128>
 800569e:	f06f 0012 	mvn.w	r0, #18
 80056a2:	e7d1      	b.n	8005648 <uart_stm32_configure+0x18c>
		return -ENOSYS;
 80056a4:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80056a8:	e7ce      	b.n	8005648 <uart_stm32_configure+0x18c>
		return -ENOTSUP;
 80056aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056ae:	e79e      	b.n	80055ee <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80056b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056b4:	e79b      	b.n	80055ee <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80056b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056ba:	e798      	b.n	80055ee <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80056bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056c0:	e795      	b.n	80055ee <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80056c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056c6:	e792      	b.n	80055ee <uart_stm32_configure+0x132>
 80056c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056cc:	e78f      	b.n	80055ee <uart_stm32_configure+0x132>
			return -ENOTSUP;
 80056ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056d2:	e78c      	b.n	80055ee <uart_stm32_configure+0x132>
 80056d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80056d8:	e789      	b.n	80055ee <uart_stm32_configure+0x132>
 80056da:	bf00      	nop
 80056dc:	40013800 	.word	0x40013800
 80056e0:	51eb851f 	.word	0x51eb851f

080056e4 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80056e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056e8:	b083      	sub	sp, #12
 80056ea:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80056ec:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80056ee:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80056f2:	463d      	mov	r5, r7
 80056f4:	f855 4b08 	ldr.w	r4, [r5], #8
	data->clock = clk;
 80056f8:	484a      	ldr	r0, [pc, #296]	; (8005824 <uart_stm32_init+0x140>)
 80056fa:	f8c8 0004 	str.w	r0, [r8, #4]
 80056fe:	f005 f875 	bl	800a7ec <z_device_ready>
 8005702:	2800      	cmp	r0, #0
 8005704:	d076      	beq.n	80057f4 <uart_stm32_init+0x110>
	const struct clock_control_driver_api *api =
 8005706:	4847      	ldr	r0, [pc, #284]	; (8005824 <uart_stm32_init+0x140>)
 8005708:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4629      	mov	r1, r5
 800570e:	4798      	blx	r3
 8005710:	4605      	mov	r5, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8005712:	2d00      	cmp	r5, #0
 8005714:	f040 8081 	bne.w	800581a <uart_stm32_init+0x136>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8005718:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	69f9      	ldr	r1, [r7, #28]
 800571e:	69b8      	ldr	r0, [r7, #24]
 8005720:	f003 ffad 	bl	800967e <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8005724:	2800      	cmp	r0, #0
 8005726:	db7b      	blt.n	8005820 <uart_stm32_init+0x13c>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005728:	68e3      	ldr	r3, [r4, #12]
 800572a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005730:	68e3      	ldr	r3, [r4, #12]
 8005732:	f043 030c 	orr.w	r3, r3, #12
 8005736:	60e3      	str	r3, [r4, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d062      	beq.n	8005804 <uart_stm32_init+0x120>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800573e:	2b01      	cmp	r3, #1
 8005740:	d05b      	beq.n	80057fa <uart_stm32_init+0x116>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8005742:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8005744:	4619      	mov	r1, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8005746:	68e2      	ldr	r2, [r4, #12]
 8005748:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800574c:	430b      	orrs	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005758:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800575a:	7c3b      	ldrb	r3, [r7, #16]
 800575c:	b12b      	cbz	r3, 800576a <uart_stm32_init+0x86>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800575e:	6873      	ldr	r3, [r6, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005762:	6953      	ldr	r3, [r2, #20]
 8005764:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005768:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800576a:	f8d8 7000 	ldr.w	r7, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800576e:	6933      	ldr	r3, [r6, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005770:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8005774:	f858 6b08 	ldr.w	r6, [r8], #8
	if (clock_control_get_rate(data->clock,
 8005778:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800577c:	4648      	mov	r0, r9
 800577e:	f005 f835 	bl	800a7ec <z_device_ready>
 8005782:	2800      	cmp	r0, #0
 8005784:	d043      	beq.n	800580e <uart_stm32_init+0x12a>
	const struct clock_control_driver_api *api =
 8005786:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d041      	beq.n	8005814 <uart_stm32_init+0x130>
	return api->get_rate(dev, sys, rate);
 8005790:	aa01      	add	r2, sp, #4
 8005792:	4641      	mov	r1, r8
 8005794:	4648      	mov	r0, r9
 8005796:	4798      	blx	r3
 8005798:	2800      	cmp	r0, #0
 800579a:	db23      	blt.n	80057e4 <uart_stm32_init+0x100>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800579c:	68f3      	ldr	r3, [r6, #12]
 800579e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057a2:	60f3      	str	r3, [r6, #12]
		LL_USART_SetBaudRate(UartInstance,
 80057a4:	9a01      	ldr	r2, [sp, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80057a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80057aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80057ae:	00bf      	lsls	r7, r7, #2
 80057b0:	fbb2 f2f7 	udiv	r2, r2, r7
 80057b4:	481c      	ldr	r0, [pc, #112]	; (8005828 <uart_stm32_init+0x144>)
 80057b6:	fba0 1302 	umull	r1, r3, r0, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	0119      	lsls	r1, r3, #4
 80057be:	b289      	uxth	r1, r1
 80057c0:	2764      	movs	r7, #100	; 0x64
 80057c2:	fb07 2313 	mls	r3, r7, r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	3332      	adds	r3, #50	; 0x32
 80057ca:	fba0 2303 	umull	r2, r3, r0, r3
 80057ce:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80057d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057d6:	440a      	add	r2, r1
 80057d8:	b292      	uxth	r2, r2
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	4413      	add	r3, r2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80057e4:	68e3      	ldr	r3, [r4, #12]
 80057e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057ea:	60e3      	str	r3, [r4, #12]
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 80057ec:	4628      	mov	r0, r5
 80057ee:	b003      	add	sp, #12
 80057f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f4:	f06f 0512 	mvn.w	r5, #18
 80057f8:	e78b      	b.n	8005712 <uart_stm32_init+0x2e>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80057fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80057fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005802:	e7a0      	b.n	8005746 <uart_stm32_init+0x62>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8005804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8005808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800580c:	e79b      	b.n	8005746 <uart_stm32_init+0x62>
 800580e:	f06f 0012 	mvn.w	r0, #18
 8005812:	e7c1      	b.n	8005798 <uart_stm32_init+0xb4>
		return -ENOSYS;
 8005814:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8005818:	e7be      	b.n	8005798 <uart_stm32_init+0xb4>
		return -EIO;
 800581a:	f06f 0504 	mvn.w	r5, #4
 800581e:	e7e5      	b.n	80057ec <uart_stm32_init+0x108>
		return err;
 8005820:	4605      	mov	r5, r0
 8005822:	e7e3      	b.n	80057ec <uart_stm32_init+0x108>
 8005824:	0800b874 	.word	0x0800b874
 8005828:	51eb851f 	.word	0x51eb851f

0800582c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800582c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005830:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8005832:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8005834:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8005836:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800583a:	d101      	bne.n	8005840 <elapsed+0x14>
	    || (val1 < val2)) {
 800583c:	4281      	cmp	r1, r0
 800583e:	d208      	bcs.n	8005852 <elapsed+0x26>
		overflow_cyc += last_load;
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <elapsed+0x34>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4907      	ldr	r1, [pc, #28]	; (8005864 <elapsed+0x38>)
 8005846:	6809      	ldr	r1, [r1, #0]
 8005848:	440a      	add	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800584c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005850:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <elapsed+0x38>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1a1b      	subs	r3, r3, r0
 8005858:	4a01      	ldr	r2, [pc, #4]	; (8005860 <elapsed+0x34>)
 800585a:	6810      	ldr	r0, [r2, #0]
}
 800585c:	4418      	add	r0, r3
 800585e:	4770      	bx	lr
 8005860:	20000ba8 	.word	0x20000ba8
 8005864:	20000ba4 	.word	0x20000ba4

08005868 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8005868:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800586a:	f7ff ffdf 	bl	800582c <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <sys_clock_isr+0x38>)
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <sys_clock_isr+0x3c>)
 8005874:	6811      	ldr	r1, [r2, #0]
 8005876:	4408      	add	r0, r1
 8005878:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <sys_clock_isr+0x40>)
 8005880:	6813      	ldr	r3, [r2, #0]
 8005882:	1ac0      	subs	r0, r0, r3
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <sys_clock_isr+0x44>)
 8005886:	fba1 1000 	umull	r1, r0, r1, r0
 800588a:	0a80      	lsrs	r0, r0, #10
		announced_cycles += dticks * CYC_PER_TICK;
 800588c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8005890:	fb01 3300 	mla	r3, r1, r0, r3
 8005894:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8005896:	f001 fbb1 	bl	8006ffc <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 800589a:	f7fd f905 	bl	8002aa8 <z_arm_exc_exit>
}
 800589e:	bd08      	pop	{r3, pc}
 80058a0:	20000ba8 	.word	0x20000ba8
 80058a4:	20000ba0 	.word	0x20000ba0
 80058a8:	20000b9c 	.word	0x20000b9c
 80058ac:	51eb851f 	.word	0x51eb851f

080058b0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b0:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <sys_clock_driver_init+0x28>)
 80058b2:	2210      	movs	r2, #16
 80058b4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80058b8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80058bc:	4b07      	ldr	r3, [pc, #28]	; (80058dc <sys_clock_driver_init+0x2c>)
 80058be:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80058c0:	2000      	movs	r0, #0
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <sys_clock_driver_init+0x30>)
 80058c4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80058c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058ca:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80058cc:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	f042 0207 	orr.w	r2, r2, #7
 80058d4:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 80058d6:	4770      	bx	lr
 80058d8:	e000ed00 	.word	0xe000ed00
 80058dc:	20000ba4 	.word	0x20000ba4
 80058e0:	20000ba8 	.word	0x20000ba8

080058e4 <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80058e4:	b111      	cbz	r1, 80058ec <sys_clock_set_timeout+0x8>
 80058e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80058ea:	d00f      	beq.n	800590c <sys_clock_set_timeout+0x28>
{
 80058ec:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 80058ee:	4b37      	ldr	r3, [pc, #220]	; (80059cc <sys_clock_set_timeout+0xe8>)
 80058f0:	681d      	ldr	r5, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80058f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80058f6:	d014      	beq.n	8005922 <sys_clock_set_timeout+0x3e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80058f8:	1e46      	subs	r6, r0, #1
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	dd14      	ble.n	8005928 <sys_clock_set_timeout+0x44>
 80058fe:	f241 4378 	movw	r3, #5240	; 0x1478
 8005902:	429e      	cmp	r6, r3
 8005904:	dd11      	ble.n	800592a <sys_clock_set_timeout+0x46>
 8005906:	f241 4679 	movw	r6, #5241	; 0x1479
 800590a:	e00e      	b.n	800592a <sys_clock_set_timeout+0x46>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800590c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005910:	6913      	ldr	r3, [r2, #16]
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <sys_clock_set_timeout+0xe8>)
 800591a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800591e:	601a      	str	r2, [r3, #0]
		return;
 8005920:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8005922:	f241 4079 	movw	r0, #5241	; 0x1479
 8005926:	e7e7      	b.n	80058f8 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8005928:	2600      	movs	r6, #0
	__asm__ volatile(
 800592a:	f04f 0310 	mov.w	r3, #16
 800592e:	f3ef 8411 	mrs	r4, BASEPRI
 8005932:	f383 8812 	msr	BASEPRI_MAX, r3
 8005936:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 800593a:	f7ff ff77 	bl	800582c <elapsed>

	val1 = SysTick->VAL;
 800593e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005942:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 8005944:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <sys_clock_set_timeout+0xec>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4410      	add	r0, r2
 800594a:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <sys_clock_set_timeout+0xf0>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 8005952:	4b21      	ldr	r3, [pc, #132]	; (80059d8 <sys_clock_set_timeout+0xf4>)
 8005954:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 8005956:	1ac2      	subs	r2, r0, r3
 8005958:	d415      	bmi.n	8005986 <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 800595a:	f44f 6c48 	mov.w	ip, #3200	; 0xc80

		/* Round delay up to next tick boundary */
		delay += unannounced;
 800595e:	fb0c 2206 	mla	r2, ip, r6, r2
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8005962:	f602 427f 	addw	r2, r2, #3199	; 0xc7f
 8005966:	4e1d      	ldr	r6, [pc, #116]	; (80059dc <sys_clock_set_timeout+0xf8>)
 8005968:	fba6 6202 	umull	r6, r2, r6, r2
 800596c:	0a92      	lsrs	r2, r2, #10
		delay -= unannounced;
 800596e:	1a1b      	subs	r3, r3, r0
 8005970:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d90a      	bls.n	8005990 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 800597a:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <sys_clock_set_timeout+0xfc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d909      	bls.n	8005994 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <sys_clock_set_timeout+0xe8>)
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e008      	b.n	8005998 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <sys_clock_set_timeout+0xe8>)
 8005988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e003      	b.n	8005998 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8005990:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <sys_clock_set_timeout+0xe8>)
 8005996:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 8005998:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800599c:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 800599e:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <sys_clock_set_timeout+0xe8>)
 80059a0:	6812      	ldr	r2, [r2, #0]
 80059a2:	3a01      	subs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80059a6:	2200      	movs	r2, #0
 80059a8:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 80059aa:	42b1      	cmp	r1, r6
 80059ac:	d209      	bcs.n	80059c2 <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 80059ae:	1bad      	subs	r5, r5, r6
 80059b0:	440d      	add	r5, r1
 80059b2:	4428      	add	r0, r5
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <sys_clock_set_timeout+0xec>)
 80059b6:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 80059b8:	f384 8811 	msr	BASEPRI, r4
 80059bc:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 80059c2:	1b8d      	subs	r5, r1, r6
 80059c4:	4428      	add	r0, r5
 80059c6:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <sys_clock_set_timeout+0xec>)
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	e7f5      	b.n	80059b8 <sys_clock_set_timeout+0xd4>
 80059cc:	20000ba4 	.word	0x20000ba4
 80059d0:	20000ba0 	.word	0x20000ba0
 80059d4:	20000ba8 	.word	0x20000ba8
 80059d8:	20000b9c 	.word	0x20000b9c
 80059dc:	51eb851f 	.word	0x51eb851f
 80059e0:	00ffe880 	.word	0x00ffe880

080059e4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 80059e4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80059e6:	f04f 0310 	mov.w	r3, #16
 80059ea:	f3ef 8411 	mrs	r4, BASEPRI
 80059ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80059f2:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80059f6:	f7ff ff19 	bl	800582c <elapsed>
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <sys_clock_elapsed+0x34>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4418      	add	r0, r3
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <sys_clock_elapsed+0x38>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8005a06:	f384 8811 	msr	BASEPRI, r4
 8005a0a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 8005a0e:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <sys_clock_elapsed+0x3c>)
 8005a10:	fba3 3000 	umull	r3, r0, r3, r0
}
 8005a14:	0a80      	lsrs	r0, r0, #10
 8005a16:	bd10      	pop	{r4, pc}
 8005a18:	20000ba0 	.word	0x20000ba0
 8005a1c:	20000b9c 	.word	0x20000b9c
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8005a24:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005a26:	f04f 0310 	mov.w	r3, #16
 8005a2a:	f3ef 8411 	mrs	r4, BASEPRI
 8005a2e:	f383 8812 	msr	BASEPRI_MAX, r3
 8005a32:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8005a36:	f7ff fef9 	bl	800582c <elapsed>
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <sys_clock_cycle_get_32+0x28>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4418      	add	r0, r3
	__asm__ volatile(
 8005a40:	f384 8811 	msr	BASEPRI, r4
 8005a44:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000ba0 	.word	0x20000ba0

08005a50 <UTILS_GetPLLOutputFrequency>:
  /* Check different PLL parameters according to RM                          */
  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     96 MHz as PLLVCO when the product is in range 1,
     48 MHz as PLLVCO when the product is in range 2,
     24 MHz when the product is in range 3. */
  pllfreq = PLL_InputFrequency * (PLLMulTable[UTILS_PLLInitStruct->PLLMul >> RCC_CFGR_PLLMUL_Pos]);
 8005a50:	680a      	ldr	r2, [r1, #0]
 8005a52:	0c92      	lsrs	r2, r2, #18
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <UTILS_GetPLLOutputFrequency+0x18>)
 8005a56:	5c9b      	ldrb	r3, [r3, r2]
 8005a58:	fb03 f000 	mul.w	r0, r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     maximum frequency 32000000 in range 1 */
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLDiv >> RCC_CFGR_PLLDIV_Pos)+1U);
 8005a5c:	684b      	ldr	r3, [r1, #4]
 8005a5e:	0d9b      	lsrs	r3, r3, #22
 8005a60:	3301      	adds	r3, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 8005a62:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a66:	4770      	bx	lr
 8005a68:	0800c0f8 	.word	0x0800c0f8

08005a6c <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <UTILS_PLL_IsBusy+0x14>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a74:	d001      	beq.n	8005a7a <UTILS_PLL_IsBusy+0xe>

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8005a76:	2001      	movs	r0, #1
 8005a78:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8005a7a:	2000      	movs	r0, #0
  }

  return status;
}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800

08005a84 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8005a84:	4b01      	ldr	r3, [pc, #4]	; (8005a8c <LL_SetSystemCoreClock+0x8>)
 8005a86:	6018      	str	r0, [r3, #0]
}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	200000ac 	.word	0x200000ac

08005a90 <LL_SetFlashLatency>:
  if ((Frequency == 0U) || (Frequency > UTILS_MAX_FREQUENCY_SCALE1))
 8005a90:	1e42      	subs	r2, r0, #1
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <LL_SetFlashLatency+0x70>)
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d231      	bcs.n	8005afc <LL_SetFlashLatency+0x6c>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8005a98:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <LL_SetFlashLatency+0x74>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d01c      	beq.n	8005ae0 <LL_SetFlashLatency+0x50>
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <LL_SetFlashLatency+0x74>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    else if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab2:	d01a      	beq.n	8005aea <LL_SetFlashLatency+0x5a>
      if (Frequency > UTILS_SCALE3_LATENCY1_FREQ)
 8005ab4:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <LL_SetFlashLatency+0x78>)
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	d91c      	bls.n	8005af4 <LL_SetFlashLatency+0x64>
  * @rmtoll FLASH_ACR    ACC64         LL_FLASH_Enable64bitAccess
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_Enable64bitAccess(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ACC64);
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <LL_SetFlashLatency+0x7c>)
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	6013      	str	r3, [r2, #0]
}
 8005ac4:	2101      	movs	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <LL_SetFlashLatency+0x7c>)
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
    if (LL_FLASH_GetLatency() != latency)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d00d      	beq.n	8005af8 <LL_SetFlashLatency+0x68>
      status = ERROR;
 8005adc:	2001      	movs	r0, #1
}
 8005ade:	4770      	bx	lr
      if (Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <LL_SetFlashLatency+0x80>)
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	d8e9      	bhi.n	8005aba <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	e7ed      	b.n	8005ac6 <LL_SetFlashLatency+0x36>
      if (Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <LL_SetFlashLatency+0x84>)
 8005aec:	4298      	cmp	r0, r3
 8005aee:	d8e4      	bhi.n	8005aba <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005af0:	2100      	movs	r1, #0
 8005af2:	e7e8      	b.n	8005ac6 <LL_SetFlashLatency+0x36>
 8005af4:	2100      	movs	r1, #0
 8005af6:	e7e6      	b.n	8005ac6 <LL_SetFlashLatency+0x36>
  ErrorStatus status = SUCCESS;
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr
    status = ERROR;
 8005afc:	2001      	movs	r0, #1
 8005afe:	4770      	bx	lr
 8005b00:	01e84800 	.word	0x01e84800
 8005b04:	40007000 	.word	0x40007000
 8005b08:	001e8480 	.word	0x001e8480
 8005b0c:	40023c00 	.word	0x40023c00
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	007a1200 	.word	0x007a1200

08005b18 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005b1c:	680b      	ldr	r3, [r1, #0]
 8005b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b22:	4a24      	ldr	r2, [pc, #144]	; (8005bb4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8005b24:	5cd3      	ldrb	r3, [r2, r3]
 8005b26:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (SystemCoreClock < hclk_frequency)
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	42ab      	cmp	r3, r5
 8005b30:	d32f      	bcc.n	8005b92 <UTILS_EnablePLLAndSwitchSystem+0x7a>
  ErrorStatus status = SUCCESS;
 8005b32:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005b36:	6813      	ldr	r3, [r2, #0]
 8005b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b3c:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005b46:	d0fa      	beq.n	8005b3e <UTILS_EnablePLLAndSwitchSystem+0x26>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8005b48:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b4a:	4b1c      	ldr	r3, [pc, #112]	; (8005bbc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	f042 0203 	orr.w	r2, r2, #3
 8005b5c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d1f9      	bne.n	8005b5e <UTILS_EnablePLLAndSwitchSystem+0x46>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8005b6a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8005b6e:	6899      	ldr	r1, [r3, #8]
 8005b70:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005b74:	430a      	orrs	r2, r1
 8005b76:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8005b78:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (SystemCoreClock > hclk_frequency)
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	d809      	bhi.n	8005ba0 <UTILS_EnablePLLAndSwitchSystem+0x88>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 8005b8c:	b16e      	cbz	r6, 8005baa <UTILS_EnablePLLAndSwitchSystem+0x92>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8005b8e:	4630      	mov	r0, r6
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7ff ff7c 	bl	8005a90 <LL_SetFlashLatency>
  if (status == SUCCESS)
 8005b98:	4606      	mov	r6, r0
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d1f2      	bne.n	8005b84 <UTILS_EnablePLLAndSwitchSystem+0x6c>
 8005b9e:	e7c9      	b.n	8005b34 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7ff ff75 	bl	8005a90 <LL_SetFlashLatency>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	e7f0      	b.n	8005b8c <UTILS_EnablePLLAndSwitchSystem+0x74>
    LL_SetSystemCoreClock(hclk_frequency);
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff ff6a 	bl	8005a84 <LL_SetSystemCoreClock>
 8005bb0:	e7ed      	b.n	8005b8e <UTILS_EnablePLLAndSwitchSystem+0x76>
 8005bb2:	bf00      	nop
 8005bb4:	0800c0e8 	.word	0x0800c0e8
 8005bb8:	200000ac 	.word	0x200000ac
 8005bbc:	40023800 	.word	0x40023800

08005bc0 <LL_PLL_ConfigSystemClock_HSI>:
{
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8005bc6:	f7ff ff51 	bl	8005a6c <UTILS_PLL_IsBusy>
 8005bca:	b9f8      	cbnz	r0, 8005c0c <LL_PLL_ConfigSystemClock_HSI+0x4c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4810      	ldr	r0, [pc, #64]	; (8005c10 <LL_PLL_ConfigSystemClock_HSI+0x50>)
 8005bd0:	f7ff ff3e 	bl	8005a50 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f013 0f02 	tst.w	r3, #2
 8005bdc:	d109      	bne.n	8005bf2 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bde:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f013 0f02 	tst.w	r3, #2
 8005bf0:	d0fa      	beq.n	8005be8 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	6864      	ldr	r4, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8005bf6:	4907      	ldr	r1, [pc, #28]	; (8005c14 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8005bf8:	688b      	ldr	r3, [r1, #8]
 8005bfa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8005bfe:	4322      	orrs	r2, r4
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005c04:	4629      	mov	r1, r5
 8005c06:	f7ff ff87 	bl	8005b18 <UTILS_EnablePLLAndSwitchSystem>
}
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
    status = ERROR;
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	e7fc      	b.n	8005c0a <LL_PLL_ConfigSystemClock_HSI+0x4a>
 8005c10:	00f42400 	.word	0x00f42400
 8005c14:	40023800 	.word	0x40023800

08005c18 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8005c1a:	e000      	b.n	8005c1e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8005c1c:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8005c1e:	4a03      	ldr	r2, [pc, #12]	; (8005c2c <z_device_state_init+0x14>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d3fb      	bcc.n	8005c1c <z_device_state_init+0x4>
	}
}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	0800b874 	.word	0x0800b874
 8005c2c:	0800b994 	.word	0x0800b994

08005c30 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <z_sys_init_run_level+0x4c>)
 8005c36:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005c3a:	e009      	b.n	8005c50 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8005c3c:	4240      	negs	r0, r0
 8005c3e:	e017      	b.n	8005c70 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8005c40:	68eb      	ldr	r3, [r5, #12]
 8005c42:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8005c44:	68ea      	ldr	r2, [r5, #12]
 8005c46:	7853      	ldrb	r3, [r2, #1]
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005c4e:	3408      	adds	r4, #8
 8005c50:	1c73      	adds	r3, r6, #1
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <z_sys_init_run_level+0x4c>)
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	d90d      	bls.n	8005c78 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8005c5c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4628      	mov	r0, r5
 8005c62:	4798      	blx	r3
		if (dev != NULL) {
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	d0f2      	beq.n	8005c4e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d0eb      	beq.n	8005c44 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dbe5      	blt.n	8005c3c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8005c70:	28ff      	cmp	r0, #255	; 0xff
 8005c72:	dde5      	ble.n	8005c40 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8005c74:	20ff      	movs	r0, #255	; 0xff
 8005c76:	e7e3      	b.n	8005c40 <z_sys_init_run_level+0x10>
		}
	}
}
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
 8005c7a:	bf00      	nop
 8005c7c:	0800c104 	.word	0x0800c104

08005c80 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8005c80:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8005c82:	4605      	mov	r5, r0
 8005c84:	b328      	cbz	r0, 8005cd2 <z_impl_device_get_binding+0x52>
 8005c86:	7803      	ldrb	r3, [r0, #0]
 8005c88:	b32b      	cbz	r3, 8005cd6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8005c8a:	4c14      	ldr	r4, [pc, #80]	; (8005cdc <z_impl_device_get_binding+0x5c>)
 8005c8c:	e000      	b.n	8005c90 <z_impl_device_get_binding+0x10>
 8005c8e:	3418      	adds	r4, #24
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <z_impl_device_get_binding+0x60>)
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d008      	beq.n	8005ca8 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8005c96:	4620      	mov	r0, r4
 8005c98:	f004 fda8 	bl	800a7ec <z_device_ready>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d0f6      	beq.n	8005c8e <z_impl_device_get_binding+0xe>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	42ab      	cmp	r3, r5
 8005ca4:	d1f3      	bne.n	8005c8e <z_impl_device_get_binding+0xe>
 8005ca6:	e012      	b.n	8005cce <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8005ca8:	4c0c      	ldr	r4, [pc, #48]	; (8005cdc <z_impl_device_get_binding+0x5c>)
 8005caa:	e000      	b.n	8005cae <z_impl_device_get_binding+0x2e>
 8005cac:	3418      	adds	r4, #24
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <z_impl_device_get_binding+0x60>)
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d00b      	beq.n	8005ccc <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f004 fd99 	bl	800a7ec <z_device_ready>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d0f6      	beq.n	8005cac <z_impl_device_get_binding+0x2c>
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	f7fb f832 	bl	8000d2a <strcmp>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d1f0      	bne.n	8005cac <z_impl_device_get_binding+0x2c>
 8005cca:	e000      	b.n	8005cce <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8005ccc:	2400      	movs	r4, #0
}
 8005cce:	4620      	mov	r0, r4
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	e7fb      	b.n	8005cce <z_impl_device_get_binding+0x4e>
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	e7f9      	b.n	8005cce <z_impl_device_get_binding+0x4e>
 8005cda:	bf00      	nop
 8005cdc:	0800b874 	.word	0x0800b874
 8005ce0:	0800b994 	.word	0x0800b994

08005ce4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8005ce8:	4c10      	ldr	r4, [pc, #64]	; (8005d2c <init_idle_thread+0x48>)
 8005cea:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
 8005cee:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8005cf2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	; (8005d30 <init_idle_thread+0x4c>)
 8005cf8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	2201      	movs	r2, #1
 8005d02:	9204      	str	r2, [sp, #16]
 8005d04:	220f      	movs	r2, #15
 8005d06:	9203      	str	r2, [sp, #12]
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	9000      	str	r0, [sp, #0]
 8005d0e:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <init_idle_thread+0x50>)
 8005d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d14:	4908      	ldr	r1, [pc, #32]	; (8005d38 <init_idle_thread+0x54>)
 8005d16:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f8d8 	bl	8005ed0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005d20:	7b63      	ldrb	r3, [r4, #13]
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8005d28:	b006      	add	sp, #24
 8005d2a:	bd10      	pop	{r4, pc}
 8005d2c:	20000508 	.word	0x20000508
 8005d30:	20000bac 	.word	0x20000bac
 8005d34:	0800a8e5 	.word	0x0800a8e5
 8005d38:	20002480 	.word	0x20002480

08005d3c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8005d40:	f000 ff64 	bl	8006c0c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8005d44:	4d1b      	ldr	r5, [pc, #108]	; (8005db4 <prepare_multithreading+0x78>)
 8005d46:	4b1c      	ldr	r3, [pc, #112]	; (8005db8 <prepare_multithreading+0x7c>)
 8005d48:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <prepare_multithreading+0x80>)
 8005d4c:	9305      	str	r3, [sp, #20]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	2400      	movs	r4, #0
 8005d54:	9403      	str	r4, [sp, #12]
 8005d56:	9402      	str	r4, [sp, #8]
 8005d58:	9401      	str	r4, [sp, #4]
 8005d5a:	9400      	str	r4, [sp, #0]
 8005d5c:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <prepare_multithreading+0x84>)
 8005d5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d62:	4918      	ldr	r1, [pc, #96]	; (8005dc4 <prepare_multithreading+0x88>)
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 f8b3 	bl	8005ed0 <z_setup_new_thread>
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	7b6b      	ldrb	r3, [r5, #13]
 8005d6e:	f023 0304 	bic.w	r3, r3, #4
 8005d72:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8005d74:	4628      	mov	r0, r5
 8005d76:	f004 ff1d 	bl	800abb4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005d7a:	2c00      	cmp	r4, #0
 8005d7c:	dd02      	ble.n	8005d84 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8005d7e:	4630      	mov	r0, r6
 8005d80:	b006      	add	sp, #24
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ffad 	bl	8005ce4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <prepare_multithreading+0x8c>)
 8005d8c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8005d90:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <prepare_multithreading+0x7c>)
 8005d96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005d9a:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8005d9c:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8005d9e:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8005da2:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <prepare_multithreading+0x90>)
 8005da4:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005da8:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8005dac:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8005dae:	3401      	adds	r4, #1
 8005db0:	e7e3      	b.n	8005d7a <prepare_multithreading+0x3e>
 8005db2:	bf00      	nop
 8005db4:	20000588 	.word	0x20000588
 8005db8:	20000bac 	.word	0x20000bac
 8005dbc:	0800c11c 	.word	0x0800c11c
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	20001460 	.word	0x20001460
 8005dc8:	20000508 	.word	0x20000508
 8005dcc:	200025a0 	.word	0x200025a0

08005dd0 <bg_thread_main>:
{
 8005dd0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <bg_thread_main+0x30>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8005dd8:	2002      	movs	r0, #2
 8005dda:	f7ff ff29 	bl	8005c30 <z_sys_init_run_level>
	boot_banner();
 8005dde:	f001 fd31 	bl	8007844 <boot_banner>
	z_cpp_init_static();
 8005de2:	f003 fc46 	bl	8009672 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8005de6:	2003      	movs	r0, #3
 8005de8:	f7ff ff22 	bl	8005c30 <z_sys_init_run_level>
	z_init_static_threads();
 8005dec:	f000 f8a0 	bl	8005f30 <z_init_static_threads>
	main();
 8005df0:	f005 f94f 	bl	800b092 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8005df4:	4a03      	ldr	r2, [pc, #12]	; (8005e04 <bg_thread_main+0x34>)
 8005df6:	7b13      	ldrb	r3, [r2, #12]
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005dfe:	bd08      	pop	{r3, pc}
 8005e00:	20000c09 	.word	0x20000c09
 8005e04:	20000588 	.word	0x20000588

08005e08 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8005e08:	b508      	push	{r3, lr}
 8005e0a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8005e0c:	4a01      	ldr	r2, [pc, #4]	; (8005e14 <switch_to_main_thread+0xc>)
 8005e0e:	4802      	ldr	r0, [pc, #8]	; (8005e18 <switch_to_main_thread+0x10>)
 8005e10:	f7fc fe20 	bl	8002a54 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8005e14:	08005dd1 	.word	0x08005dd1
 8005e18:	20000588 	.word	0x20000588

08005e1c <z_bss_zero>:
{
 8005e1c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8005e1e:	4803      	ldr	r0, [pc, #12]	; (8005e2c <z_bss_zero+0x10>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <z_bss_zero+0x14>)
 8005e22:	1a12      	subs	r2, r2, r0
 8005e24:	2100      	movs	r1, #0
 8005e26:	f005 f995 	bl	800b154 <memset>
}
 8005e2a:	bd08      	pop	{r3, pc}
 8005e2c:	20000408 	.word	0x20000408
 8005e30:	20000c0c 	.word	0x20000c0c

08005e34 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8005e34:	b500      	push	{lr}
 8005e36:	b0a1      	sub	sp, #132	; 0x84
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8005e38:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <z_cstart+0x74>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005e3a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8005e3e:	4c1b      	ldr	r4, [pc, #108]	; (8005eac <z_cstart+0x78>)
 8005e40:	6963      	ldr	r3, [r4, #20]
 8005e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	23f0      	movs	r3, #240	; 0xf0
 8005e4a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8005e4e:	2500      	movs	r5, #0
 8005e50:	77e5      	strb	r5, [r4, #31]
 8005e52:	7625      	strb	r5, [r4, #24]
 8005e54:	7665      	strb	r5, [r4, #25]
 8005e56:	76a5      	strb	r5, [r4, #26]
 8005e58:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8005e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e5e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005e62:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8005e64:	f7fc ff38 	bl	8002cd8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8005e68:	f7fc fd06 	bl	8002878 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e70:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8005e72:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8005e74:	f7fc fff6 	bl	8002e64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8005e78:	f7fc ff86 	bl	8002d88 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8005e7c:	2401      	movs	r4, #1
 8005e7e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8005e82:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8005e86:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8005e88:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <z_cstart+0x7c>)
 8005e8c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8005e90:	f7ff fec2 	bl	8005c18 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8005e94:	4628      	mov	r0, r5
 8005e96:	f7ff fecb 	bl	8005c30 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fec8 	bl	8005c30 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8005ea0:	f7ff ff4c 	bl	8005d3c <prepare_multithreading>
 8005ea4:	f7ff ffb0 	bl	8005e08 <switch_to_main_thread>
 8005ea8:	20002dc0 	.word	0x20002dc0
 8005eac:	e000ed00 	.word	0xe000ed00
 8005eb0:	20000bac 	.word	0x20000bac

08005eb4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8005eb4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005eb6:	ea53 0102 	orrs.w	r1, r3, r2
 8005eba:	d102      	bne.n	8005ec2 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8005ebc:	f004 fce1 	bl	800a882 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8005ec0:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8005ec2:	4902      	ldr	r1, [pc, #8]	; (8005ecc <schedule_new_thread+0x18>)
 8005ec4:	3018      	adds	r0, #24
 8005ec6:	f001 f80b 	bl	8006ee0 <z_add_timeout>
 8005eca:	e7f9      	b.n	8005ec0 <schedule_new_thread+0xc>
 8005ecc:	0800abed 	.word	0x0800abed

08005ed0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	4615      	mov	r5, r2
 8005eda:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8005edc:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8005ee0:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8005ee2:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8005ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eea:	f004 fcce 	bl	800a88a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8005eee:	462a      	mov	r2, r5
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f004 fcad 	bl	800a852 <setup_thread_stack>
 8005ef8:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005efc:	9302      	str	r3, [sp, #8]
 8005efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	463b      	mov	r3, r7
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7fc fd5b 	bl	80029c8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <z_setup_new_thread+0x5c>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	b123      	cbz	r3, 8005f26 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 8005f20:	4628      	mov	r0, r5
 8005f22:	b005      	add	sp, #20
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8005f26:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 8005f28:	e7fa      	b.n	8005f20 <z_setup_new_thread+0x50>
 8005f2a:	bf00      	nop
 8005f2c:	20000bac 	.word	0x20000bac

08005f30 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8005f30:	b510      	push	{r4, lr}
 8005f32:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f34:	4c1d      	ldr	r4, [pc, #116]	; (8005fac <z_init_static_threads+0x7c>)
 8005f36:	e014      	b.n	8005f62 <z_init_static_threads+0x32>
		z_setup_new_thread(
 8005f38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f3a:	9305      	str	r3, [sp, #20]
 8005f3c:	6a23      	ldr	r3, [r4, #32]
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	69e3      	ldr	r3, [r4, #28]
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	69a3      	ldr	r3, [r4, #24]
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	6963      	ldr	r3, [r4, #20]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	68e3      	ldr	r3, [r4, #12]
 8005f52:	68a2      	ldr	r2, [r4, #8]
 8005f54:	6861      	ldr	r1, [r4, #4]
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	f7ff ffba 	bl	8005ed0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f60:	3430      	adds	r4, #48	; 0x30
 8005f62:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <z_init_static_threads+0x80>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d3e7      	bcc.n	8005f38 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005f68:	f000 fbd4 	bl	8006714 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005f6c:	4c0f      	ldr	r4, [pc, #60]	; (8005fac <z_init_static_threads+0x7c>)
 8005f6e:	e000      	b.n	8005f72 <z_init_static_threads+0x42>
 8005f70:	3430      	adds	r4, #48	; 0x30
 8005f72:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <z_init_static_threads+0x80>)
 8005f74:	429c      	cmp	r4, r3
 8005f76:	d214      	bcs.n	8005fa2 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8005f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7e:	d0f7      	beq.n	8005f70 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8005f80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f84:	17d8      	asrs	r0, r3, #31
 8005f86:	0082      	lsls	r2, r0, #2
 8005f88:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005f8c:	0099      	lsls	r1, r3, #2
 8005f8e:	18c9      	adds	r1, r1, r3
 8005f90:	eb40 0002 	adc.w	r0, r0, r2
 8005f94:	184a      	adds	r2, r1, r1
 8005f96:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	f7ff ff8a 	bl	8005eb4 <schedule_new_thread>
 8005fa0:	e7e6      	b.n	8005f70 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8005fa2:	f000 fdc1 	bl	8006b28 <k_sched_unlock>
}
 8005fa6:	b006      	add	sp, #24
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	200002c4 	.word	0x200002c4
 8005fb0:	20000324 	.word	0x20000324

08005fb4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8005fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	4604      	mov	r4, r0
 8005fbc:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8005fbe:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 8005fc2:	f04f 0110 	mov.w	r1, #16
 8005fc6:	f3ef 8611 	mrs	r6, BASEPRI
 8005fca:	f381 8812 	msr	BASEPRI_MAX, r1
 8005fce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8005fd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005fd4:	6921      	ldr	r1, [r4, #16]
 8005fd6:	4288      	cmp	r0, r1
 8005fd8:	d30b      	bcc.n	8005ff2 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8005fda:	ea53 0102 	orrs.w	r1, r3, r2
 8005fde:	d137      	bne.n	8006050 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8005fe0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8005fe4:	f386 8811 	msr	BASEPRI, r6
 8005fe8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8005fec:	b002      	add	sp, #8
 8005fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f004 fea5 	bl	800ad42 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	b180      	cbz	r0, 800601e <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005ffc:	68e2      	ldr	r2, [r4, #12]
 8005ffe:	4629      	mov	r1, r5
 8006000:	6940      	ldr	r0, [r0, #20]
 8006002:	f005 f899 	bl	800b138 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8006006:	2400      	movs	r4, #0
 8006008:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800600c:	4640      	mov	r0, r8
 800600e:	f004 fdd1 	bl	800abb4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8006012:	4631      	mov	r1, r6
 8006014:	4638      	mov	r0, r7
 8006016:	f000 fb61 	bl	80066dc <z_reschedule>
			return 0;
 800601a:	4620      	mov	r0, r4
 800601c:	e7e6      	b.n	8005fec <z_impl_k_msgq_put+0x38>
 800601e:	68e2      	ldr	r2, [r4, #12]
 8006020:	4629      	mov	r1, r5
 8006022:	6a20      	ldr	r0, [r4, #32]
 8006024:	f005 f888 	bl	800b138 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8006028:	68e2      	ldr	r2, [r4, #12]
 800602a:	6a23      	ldr	r3, [r4, #32]
 800602c:	4413      	add	r3, r2
 800602e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8006030:	69a2      	ldr	r2, [r4, #24]
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 8006036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006038:	3301      	adds	r3, #1
 800603a:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800603c:	2110      	movs	r1, #16
 800603e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006042:	f004 fffd 	bl	800b040 <z_handle_obj_poll_events>
		result = 0;
 8006046:	2000      	movs	r0, #0
 8006048:	e7cc      	b.n	8005fe4 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	6223      	str	r3, [r4, #32]
 800604e:	e7f2      	b.n	8006036 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 8006050:	4905      	ldr	r1, [pc, #20]	; (8006068 <z_impl_k_msgq_put+0xb4>)
 8006052:	6889      	ldr	r1, [r1, #8]
 8006054:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8006056:	9200      	str	r2, [sp, #0]
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	4622      	mov	r2, r4
 800605c:	4631      	mov	r1, r6
 800605e:	4638      	mov	r0, r7
 8006060:	f000 fcac 	bl	80069bc <z_pend_curr>
		return result;
 8006064:	e7c2      	b.n	8005fec <z_impl_k_msgq_put+0x38>
 8006066:	bf00      	nop
 8006068:	20000bac 	.word	0x20000bac

0800606c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800606c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606e:	b083      	sub	sp, #12
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8006074:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 8006078:	f04f 0110 	mov.w	r1, #16
 800607c:	f3ef 8511 	mrs	r5, BASEPRI
 8006080:	f381 8812 	msr	BASEPRI_MAX, r1
 8006084:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 8006088:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800608a:	2900      	cmp	r1, #0
 800608c:	d033      	beq.n	80060f6 <z_impl_k_msgq_get+0x8a>
 800608e:	68e2      	ldr	r2, [r4, #12]
 8006090:	69e1      	ldr	r1, [r4, #28]
 8006092:	f005 f851 	bl	800b138 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8006096:	68e2      	ldr	r2, [r4, #12]
 8006098:	69e3      	ldr	r3, [r4, #28]
 800609a:	4413      	add	r3, r2
 800609c:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800609e:	69a2      	ldr	r2, [r4, #24]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 80060a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 80060aa:	4620      	mov	r0, r4
 80060ac:	f004 fe49 	bl	800ad42 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 80060b0:	4607      	mov	r7, r0
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d035      	beq.n	8006122 <z_impl_k_msgq_get+0xb6>
 80060b6:	68e2      	ldr	r2, [r4, #12]
 80060b8:	6941      	ldr	r1, [r0, #20]
 80060ba:	6a20      	ldr	r0, [r4, #32]
 80060bc:	f005 f83c 	bl	800b138 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 80060c0:	68e2      	ldr	r2, [r4, #12]
 80060c2:	6a23      	ldr	r3, [r4, #32]
 80060c4:	4413      	add	r3, r2
 80060c6:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 80060c8:	69a2      	ldr	r2, [r4, #24]
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d010      	beq.n	80060f0 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 80060ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d0:	3301      	adds	r3, #1
 80060d2:	6263      	str	r3, [r4, #36]	; 0x24
 80060d4:	2400      	movs	r4, #0
 80060d6:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 80060d8:	4638      	mov	r0, r7
 80060da:	f004 fd6b 	bl	800abb4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 80060de:	4629      	mov	r1, r5
 80060e0:	4630      	mov	r0, r6
 80060e2:	f000 fafb 	bl	80066dc <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 80060e6:	4620      	mov	r0, r4
 80060e8:	e00e      	b.n	8006108 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 80060ea:	6963      	ldr	r3, [r4, #20]
 80060ec:	61e3      	str	r3, [r4, #28]
 80060ee:	e7d9      	b.n	80060a4 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 80060f0:	6963      	ldr	r3, [r4, #20]
 80060f2:	6223      	str	r3, [r4, #32]
 80060f4:	e7eb      	b.n	80060ce <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80060f6:	ea53 0102 	orrs.w	r1, r3, r2
 80060fa:	d107      	bne.n	800610c <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 80060fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8006100:	f385 8811 	msr	BASEPRI, r5
 8006104:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8006108:	b003      	add	sp, #12
 800610a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800610c:	4906      	ldr	r1, [pc, #24]	; (8006128 <z_impl_k_msgq_get+0xbc>)
 800610e:	6889      	ldr	r1, [r1, #8]
 8006110:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8006112:	9200      	str	r2, [sp, #0]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	4622      	mov	r2, r4
 8006118:	4629      	mov	r1, r5
 800611a:	4630      	mov	r0, r6
 800611c:	f000 fc4e 	bl	80069bc <z_pend_curr>
		return result;
 8006120:	e7f2      	b.n	8006108 <z_impl_k_msgq_get+0x9c>
		result = 0;
 8006122:	2000      	movs	r0, #0
 8006124:	e7ec      	b.n	8006100 <z_impl_k_msgq_get+0x94>
 8006126:	bf00      	nop
 8006128:	20000bac 	.word	0x20000bac

0800612c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800612c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006130:	b083      	sub	sp, #12
 8006132:	4604      	mov	r4, r0
 8006134:	461d      	mov	r5, r3
	__asm__ volatile(
 8006136:	f04f 0310 	mov.w	r3, #16
 800613a:	f3ef 8711 	mrs	r7, BASEPRI
 800613e:	f383 8812 	msr	BASEPRI_MAX, r3
 8006142:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8006146:	68c1      	ldr	r1, [r0, #12]
 8006148:	b999      	cbnz	r1, 8006172 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800614a:	2900      	cmp	r1, #0
 800614c:	d14f      	bne.n	80061ee <z_impl_k_mutex_lock+0xc2>
 800614e:	4b3a      	ldr	r3, [pc, #232]	; (8006238 <z_impl_k_mutex_lock+0x10c>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8006156:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8006158:	3101      	adds	r1, #1
 800615a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <z_impl_k_mutex_lock+0x10c>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8006162:	f387 8811 	msr	BASEPRI, r7
 8006166:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800616a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800616c:	b003      	add	sp, #12
 800616e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006172:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8006174:	6882      	ldr	r2, [r0, #8]
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <z_impl_k_mutex_lock+0x10c>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d0e5      	beq.n	800614a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800617e:	ea55 0106 	orrs.w	r1, r5, r6
 8006182:	bf0c      	ite	eq
 8006184:	f04f 0801 	moveq.w	r8, #1
 8006188:	f04f 0800 	movne.w	r8, #0
 800618c:	d031      	beq.n	80061f2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800618e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8006192:	4649      	mov	r1, r9
 8006194:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8006198:	f004 fbb0 	bl	800a8fc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800619c:	4581      	cmp	r9, r0
 800619e:	dc2f      	bgt.n	8006200 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 80061a0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80061a4:	9600      	str	r6, [sp, #0]
 80061a6:	9501      	str	r5, [sp, #4]
 80061a8:	4622      	mov	r2, r4
 80061aa:	4639      	mov	r1, r7
 80061ac:	4823      	ldr	r0, [pc, #140]	; (800623c <z_impl_k_mutex_lock+0x110>)
 80061ae:	f000 fc05 	bl	80069bc <z_pend_curr>
	if (got_mutex == 0) {
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0da      	beq.n	800616c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 80061b6:	f04f 0310 	mov.w	r3, #16
 80061ba:	f3ef 8511 	mrs	r5, BASEPRI
 80061be:	f383 8812 	msr	BASEPRI_MAX, r3
 80061c2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80061c6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80061c8:	429c      	cmp	r4, r3
 80061ca:	d01f      	beq.n	800620c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80061cc:	b1f3      	cbz	r3, 800620c <z_impl_k_mutex_lock+0xe0>
 80061ce:	6921      	ldr	r1, [r4, #16]
 80061d0:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80061d4:	f004 fb92 	bl	800a8fc <new_prio_for_inheritance>
 80061d8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80061da:	4620      	mov	r0, r4
 80061dc:	f004 fb99 	bl	800a912 <adjust_owner_prio>
 80061e0:	b9b0      	cbnz	r0, 8006210 <z_impl_k_mutex_lock+0xe4>
 80061e2:	f1b9 0f00 	cmp.w	r9, #0
 80061e6:	d015      	beq.n	8006214 <z_impl_k_mutex_lock+0xe8>
 80061e8:	f04f 0801 	mov.w	r8, #1
 80061ec:	e012      	b.n	8006214 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 80061ee:	6923      	ldr	r3, [r4, #16]
 80061f0:	e7b1      	b.n	8006156 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 80061f2:	f387 8811 	msr	BASEPRI, r7
 80061f6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80061fa:	f06f 000f 	mvn.w	r0, #15
 80061fe:	e7b5      	b.n	800616c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8006200:	4601      	mov	r1, r0
 8006202:	4620      	mov	r0, r4
 8006204:	f004 fb85 	bl	800a912 <adjust_owner_prio>
 8006208:	4681      	mov	r9, r0
 800620a:	e7cb      	b.n	80061a4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800620c:	6921      	ldr	r1, [r4, #16]
 800620e:	e7e4      	b.n	80061da <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8006210:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8006214:	f1b8 0f00 	cmp.w	r8, #0
 8006218:	d106      	bne.n	8006228 <z_impl_k_mutex_lock+0xfc>
 800621a:	f385 8811 	msr	BASEPRI, r5
 800621e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8006222:	f06f 000a 	mvn.w	r0, #10
 8006226:	e7a1      	b.n	800616c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8006228:	4629      	mov	r1, r5
 800622a:	4804      	ldr	r0, [pc, #16]	; (800623c <z_impl_k_mutex_lock+0x110>)
 800622c:	f000 fa56 	bl	80066dc <z_reschedule>
	return -EAGAIN;
 8006230:	f06f 000a 	mvn.w	r0, #10
 8006234:	e79a      	b.n	800616c <z_impl_k_mutex_lock+0x40>
 8006236:	bf00      	nop
 8006238:	20000bac 	.word	0x20000bac
 800623c:	20000bd0 	.word	0x20000bd0

08006240 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8006240:	6882      	ldr	r2, [r0, #8]
 8006242:	2a00      	cmp	r2, #0
 8006244:	d034      	beq.n	80062b0 <z_impl_k_mutex_unlock+0x70>
{
 8006246:	b538      	push	{r3, r4, r5, lr}
 8006248:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <z_impl_k_mutex_unlock+0x7c>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d131      	bne.n	80062b6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8006252:	7bda      	ldrb	r2, [r3, #15]
 8006254:	3a01      	subs	r2, #1
 8006256:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8006258:	68c3      	ldr	r3, [r0, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d905      	bls.n	800626a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800625e:	3b01      	subs	r3, #1
 8006260:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8006262:	f000 fc61 	bl	8006b28 <k_sched_unlock>

	return 0;
 8006266:	2000      	movs	r0, #0
}
 8006268:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800626a:	f04f 0310 	mov.w	r3, #16
 800626e:	f3ef 8511 	mrs	r5, BASEPRI
 8006272:	f383 8812 	msr	BASEPRI_MAX, r3
 8006276:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800627a:	6901      	ldr	r1, [r0, #16]
 800627c:	f004 fb49 	bl	800a912 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8006280:	4620      	mov	r0, r4
 8006282:	f004 fd5e 	bl	800ad42 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8006286:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8006288:	b158      	cbz	r0, 80062a2 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800628a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	2300      	movs	r3, #0
 8006292:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 8006294:	f004 fc8e 	bl	800abb4 <z_ready_thread>
		z_reschedule(&lock, key);
 8006298:	4629      	mov	r1, r5
 800629a:	4809      	ldr	r0, [pc, #36]	; (80062c0 <z_impl_k_mutex_unlock+0x80>)
 800629c:	f000 fa1e 	bl	80066dc <z_reschedule>
 80062a0:	e7df      	b.n	8006262 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 80062a6:	f385 8811 	msr	BASEPRI, r5
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	e7d8      	b.n	8006262 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 80062b0:	f06f 0015 	mvn.w	r0, #21
}
 80062b4:	4770      	bx	lr
		return -EPERM;
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ba:	e7d5      	b.n	8006268 <z_impl_k_mutex_unlock+0x28>
 80062bc:	20000bac 	.word	0x20000bac
 80062c0:	20000bd0 	.word	0x20000bd0

080062c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4604      	mov	r4, r0
	__asm__ volatile(
 80062c8:	f04f 0310 	mov.w	r3, #16
 80062cc:	f3ef 8511 	mrs	r5, BASEPRI
 80062d0:	f383 8812 	msr	BASEPRI_MAX, r3
 80062d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 80062d8:	f004 fd33 	bl	800ad42 <z_unpend_first_thread>

	if (thread != NULL) {
 80062dc:	b140      	cbz	r0, 80062f0 <z_impl_k_sem_give+0x2c>
 80062de:	2200      	movs	r2, #0
 80062e0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 80062e2:	f004 fc67 	bl	800abb4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80062e6:	4629      	mov	r1, r5
 80062e8:	4809      	ldr	r0, [pc, #36]	; (8006310 <z_impl_k_sem_give+0x4c>)
 80062ea:	f000 f9f7 	bl	80066dc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80062f0:	68a3      	ldr	r3, [r4, #8]
 80062f2:	68e2      	ldr	r2, [r4, #12]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d008      	beq.n	800630a <z_impl_k_sem_give+0x46>
 80062f8:	2201      	movs	r2, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80062fe:	2102      	movs	r1, #2
 8006300:	f104 0010 	add.w	r0, r4, #16
 8006304:	f004 fe9c 	bl	800b040 <z_handle_obj_poll_events>
}
 8006308:	e7ed      	b.n	80062e6 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800630a:	2200      	movs	r2, #0
 800630c:	e7f5      	b.n	80062fa <z_impl_k_sem_give+0x36>
 800630e:	bf00      	nop
 8006310:	20000bd4 	.word	0x20000bd4

08006314 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8006314:	b510      	push	{r4, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	f04f 0410 	mov.w	r4, #16
 800631c:	f3ef 8111 	mrs	r1, BASEPRI
 8006320:	f384 8812 	msr	BASEPRI_MAX, r4
 8006324:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8006328:	6884      	ldr	r4, [r0, #8]
 800632a:	b144      	cbz	r4, 800633e <z_impl_k_sem_take+0x2a>
		sem->count--;
 800632c:	3c01      	subs	r4, #1
 800632e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8006330:	f381 8811 	msr	BASEPRI, r1
 8006334:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8006338:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800633a:	b002      	add	sp, #8
 800633c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800633e:	ea53 0402 	orrs.w	r4, r3, r2
 8006342:	d006      	beq.n	8006352 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8006344:	9200      	str	r2, [sp, #0]
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	4602      	mov	r2, r0
 800634a:	4805      	ldr	r0, [pc, #20]	; (8006360 <z_impl_k_sem_take+0x4c>)
 800634c:	f000 fb36 	bl	80069bc <z_pend_curr>
	return ret;
 8006350:	e7f3      	b.n	800633a <z_impl_k_sem_take+0x26>
 8006352:	f381 8811 	msr	BASEPRI, r1
 8006356:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800635a:	f06f 000f 	mvn.w	r0, #15
 800635e:	e7ec      	b.n	800633a <z_impl_k_sem_take+0x26>
 8006360:	20000bd4 	.word	0x20000bd4

08006364 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8006368:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800636a:	f013 0f02 	tst.w	r3, #2
 800636e:	d15c      	bne.n	800642a <submit_to_queue_locked+0xc6>
 8006370:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8006372:	f013 0f04 	tst.w	r3, #4
 8006376:	d15d      	bne.n	8006434 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8006378:	680b      	ldr	r3, [r1, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d038      	beq.n	80063f0 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800637e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8006380:	f013 0f01 	tst.w	r3, #1
 8006384:	d037      	beq.n	80063f6 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	602b      	str	r3, [r5, #0]
			ret = 2;
 800638a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800638c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800638e:	2e00      	cmp	r6, #0
 8006390:	d03f      	beq.n	8006412 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8006392:	4b29      	ldr	r3, [pc, #164]	; (8006438 <submit_to_queue_locked+0xd4>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	42b3      	cmp	r3, r6
 8006398:	d02f      	beq.n	80063fa <submit_to_queue_locked+0x96>
 800639a:	2300      	movs	r3, #0
 800639c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800639e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80063a2:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80063a6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 80063aa:	f013 0f01 	tst.w	r3, #1
 80063ae:	d033      	beq.n	8006418 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 80063b0:	b101      	cbz	r1, 80063b4 <submit_to_queue_locked+0x50>
 80063b2:	b3a2      	cbz	r2, 800641e <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 80063b4:	b100      	cbz	r0, 80063b8 <submit_to_queue_locked+0x54>
 80063b6:	b3a9      	cbz	r1, 8006424 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 80063b8:	2300      	movs	r3, #0
 80063ba:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 80063bc:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 80063c0:	b313      	cbz	r3, 8006408 <submit_to_queue_locked+0xa4>
	parent->next = child;
 80063c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80063c4:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 80063c8:	b12e      	cbz	r6, 80063d6 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 80063ca:	2200      	movs	r2, #0
 80063cc:	4611      	mov	r1, r2
 80063ce:	f106 0088 	add.w	r0, r6, #136	; 0x88
 80063d2:	f004 fce1 	bl	800ad98 <z_sched_wake>
		ret = 1;
 80063d6:	2001      	movs	r0, #1

		if (rc < 0) {
 80063d8:	2800      	cmp	r0, #0
 80063da:	db06      	blt.n	80063ea <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 80063dc:	68e3      	ldr	r3, [r4, #12]
 80063de:	f043 0304 	orr.w	r3, r3, #4
 80063e2:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 80063ea:	2800      	cmp	r0, #0
 80063ec:	dc21      	bgt.n	8006432 <submit_to_queue_locked+0xce>
 80063ee:	e01e      	b.n	800642e <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 80063f0:	6883      	ldr	r3, [r0, #8]
 80063f2:	600b      	str	r3, [r1, #0]
 80063f4:	e7c3      	b.n	800637e <submit_to_queue_locked+0x1a>
		ret = 1;
 80063f6:	2701      	movs	r7, #1
 80063f8:	e7c8      	b.n	800638c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80063fa:	f004 fa39 	bl	800a870 <k_is_in_isr>
 80063fe:	b908      	cbnz	r0, 8006404 <submit_to_queue_locked+0xa0>
 8006400:	2301      	movs	r3, #1
 8006402:	e7cb      	b.n	800639c <submit_to_queue_locked+0x38>
 8006404:	2300      	movs	r3, #0
 8006406:	e7c9      	b.n	800639c <submit_to_queue_locked+0x38>
 8006408:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800640c:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 8006410:	e7da      	b.n	80063c8 <submit_to_queue_locked+0x64>
		return -EINVAL;
 8006412:	f06f 0015 	mvn.w	r0, #21
 8006416:	e7df      	b.n	80063d8 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 8006418:	f06f 0012 	mvn.w	r0, #18
 800641c:	e7dc      	b.n	80063d8 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800641e:	f06f 000f 	mvn.w	r0, #15
 8006422:	e7d9      	b.n	80063d8 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8006424:	f06f 000f 	mvn.w	r0, #15
 8006428:	e7d6      	b.n	80063d8 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800642a:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 8006434:	2000      	movs	r0, #0
 8006436:	e7fa      	b.n	800642e <submit_to_queue_locked+0xca>
 8006438:	20000bac 	.word	0x20000bac

0800643c <finalize_cancel_locked>:
{
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 8006440:	68c3      	ldr	r3, [r0, #12]
 8006442:	f023 0302 	bic.w	r3, r3, #2
 8006446:	60c3      	str	r3, [r0, #12]
	return list->head;
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <finalize_cancel_locked+0x78>)
 800644a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800644c:	b1fb      	cbz	r3, 800648e <finalize_cancel_locked+0x52>
 800644e:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 8006450:	b103      	cbz	r3, 8006454 <finalize_cancel_locked+0x18>
	return node->next;
 8006452:	681c      	ldr	r4, [r3, #0]
 8006454:	2600      	movs	r6, #0
 8006456:	e01f      	b.n	8006498 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8006458:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800645a:	b166      	cbz	r6, 8006476 <finalize_cancel_locked+0x3a>
	return node->next;
 800645c:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800645e:	6031      	str	r1, [r6, #0]
	return list->tail;
 8006460:	4914      	ldr	r1, [pc, #80]	; (80064b4 <finalize_cancel_locked+0x78>)
 8006462:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8006464:	428b      	cmp	r3, r1
 8006466:	d00f      	beq.n	8006488 <finalize_cancel_locked+0x4c>
	parent->next = child;
 8006468:	2100      	movs	r1, #0
 800646a:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800646c:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 8006470:	f7ff ff28 	bl	80062c4 <z_impl_k_sem_give>
}
 8006474:	e015      	b.n	80064a2 <finalize_cancel_locked+0x66>
	return node->next;
 8006476:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8006478:	490e      	ldr	r1, [pc, #56]	; (80064b4 <finalize_cancel_locked+0x78>)
 800647a:	6008      	str	r0, [r1, #0]
	return list->tail;
 800647c:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800647e:	428b      	cmp	r3, r1
 8006480:	d1f2      	bne.n	8006468 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8006482:	490c      	ldr	r1, [pc, #48]	; (80064b4 <finalize_cancel_locked+0x78>)
 8006484:	6048      	str	r0, [r1, #4]
}
 8006486:	e7ef      	b.n	8006468 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8006488:	490a      	ldr	r1, [pc, #40]	; (80064b4 <finalize_cancel_locked+0x78>)
 800648a:	604e      	str	r6, [r1, #4]
}
 800648c:	e7ec      	b.n	8006468 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800648e:	461c      	mov	r4, r3
 8006490:	e7e0      	b.n	8006454 <finalize_cancel_locked+0x18>
 8006492:	4622      	mov	r2, r4
 8006494:	4623      	mov	r3, r4
 8006496:	4614      	mov	r4, r2
 8006498:	b153      	cbz	r3, 80064b0 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	42aa      	cmp	r2, r5
 800649e:	d0db      	beq.n	8006458 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 80064a0:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80064a2:	2c00      	cmp	r4, #0
 80064a4:	d0f5      	beq.n	8006492 <finalize_cancel_locked+0x56>
 80064a6:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 80064a8:	2c00      	cmp	r4, #0
 80064aa:	d0f3      	beq.n	8006494 <finalize_cancel_locked+0x58>
	return node->next;
 80064ac:	6822      	ldr	r2, [r4, #0]
 80064ae:	e7f1      	b.n	8006494 <finalize_cancel_locked+0x58>
}
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	bf00      	nop
 80064b4:	20000bdc 	.word	0x20000bdc

080064b8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b085      	sub	sp, #20
 80064bc:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 80064be:	e016      	b.n	80064ee <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 80064c0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 80064c4:	f023 0204 	bic.w	r2, r3, #4
 80064c8:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 80064cc:	f013 0f04 	tst.w	r3, #4
 80064d0:	d159      	bne.n	8006586 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 80064d2:	2300      	movs	r3, #0
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064de:	e9cd 2300 	strd	r2, r3, [sp]
 80064e2:	f105 0288 	add.w	r2, r5, #136	; 0x88
 80064e6:	4631      	mov	r1, r6
 80064e8:	482e      	ldr	r0, [pc, #184]	; (80065a4 <work_queue_main+0xec>)
 80064ea:	f000 fc83 	bl	8006df4 <z_sched_wait>
	__asm__ volatile(
 80064ee:	f04f 0310 	mov.w	r3, #16
 80064f2:	f3ef 8611 	mrs	r6, BASEPRI
 80064f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80064fa:	f3bf 8f6f 	isb	sy
	return list->head;
 80064fe:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 8006502:	2c00      	cmp	r4, #0
 8006504:	d0dc      	beq.n	80064c0 <work_queue_main+0x8>
	return node->next;
 8006506:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8006508:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800650c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8006510:	4294      	cmp	r4, r2
 8006512:	d035      	beq.n	8006580 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 8006514:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006518:	f043 0302 	orr.w	r3, r3, #2
 800651c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006520:	68e3      	ldr	r3, [r4, #12]
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800652e:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 8006530:	2c00      	cmp	r4, #0
 8006532:	d0ce      	beq.n	80064d2 <work_queue_main+0x1a>
	__asm__ volatile(
 8006534:	f386 8811 	msr	BASEPRI, r6
 8006538:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 800653c:	4620      	mov	r0, r4
 800653e:	4798      	blx	r3
	__asm__ volatile(
 8006540:	f04f 0310 	mov.w	r3, #16
 8006544:	f3ef 8611 	mrs	r6, BASEPRI
 8006548:	f383 8812 	msr	BASEPRI_MAX, r3
 800654c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8006550:	68e3      	ldr	r3, [r4, #12]
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8006558:	f013 0f02 	tst.w	r3, #2
 800655c:	d11e      	bne.n	800659c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800655e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006562:	f023 0302 	bic.w	r3, r3, #2
 8006566:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800656a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800656e:	f386 8811 	msr	BASEPRI, r6
 8006572:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1b9      	bne.n	80064ee <work_queue_main+0x36>
	z_impl_k_yield();
 800657a:	f000 fb55 	bl	8006c28 <z_impl_k_yield>
}
 800657e:	e7b6      	b.n	80064ee <work_queue_main+0x36>
	list->tail = node;
 8006580:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8006584:	e7c6      	b.n	8006514 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8006586:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800658a:	2200      	movs	r2, #0
 800658c:	2101      	movs	r1, #1
 800658e:	4638      	mov	r0, r7
 8006590:	f004 fc02 	bl	800ad98 <z_sched_wake>
 8006594:	2800      	cmp	r0, #0
 8006596:	d1f8      	bne.n	800658a <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	e7c9      	b.n	8006530 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff ff4d 	bl	800643c <finalize_cancel_locked>
 80065a2:	e7dc      	b.n	800655e <work_queue_main+0xa6>
 80065a4:	20000bd8 	.word	0x20000bd8

080065a8 <k_work_submit>:
{
 80065a8:	b508      	push	{r3, lr}
 80065aa:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <k_work_submit+0xc>)
 80065ae:	f004 fa6b 	bl	800aa88 <k_work_submit_to_queue>
}
 80065b2:	bd08      	pop	{r3, pc}
 80065b4:	20000610 	.word	0x20000610

080065b8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b089      	sub	sp, #36	; 0x24
 80065bc:	4604      	mov	r4, r0
 80065be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 80065c0:	2000      	movs	r0, #0
 80065c2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 80065c6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80065ca:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 80065ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 80065d2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 80065d6:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 80065da:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 80065de:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 80065e2:	b1fd      	cbz	r5, 8006624 <k_work_queue_start+0x6c>
 80065e4:	7928      	ldrb	r0, [r5, #4]
 80065e6:	b9f8      	cbnz	r0, 8006628 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80065e8:	2001      	movs	r0, #1
	*flagp = flags;
 80065ea:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80065ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80065f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80065fa:	2000      	movs	r0, #0
 80065fc:	9004      	str	r0, [sp, #16]
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	9002      	str	r0, [sp, #8]
 8006602:	9001      	str	r0, [sp, #4]
 8006604:	9400      	str	r4, [sp, #0]
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <k_work_queue_start+0x78>)
 8006608:	4620      	mov	r0, r4
 800660a:	f004 f949 	bl	800a8a0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800660e:	b125      	cbz	r5, 800661a <k_work_queue_start+0x62>
 8006610:	6829      	ldr	r1, [r5, #0]
 8006612:	b111      	cbz	r1, 800661a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 8006614:	4620      	mov	r0, r4
 8006616:	f004 f931 	bl	800a87c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800661a:	4620      	mov	r0, r4
 800661c:	f004 f931 	bl	800a882 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8006620:	b009      	add	sp, #36	; 0x24
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8006624:	2001      	movs	r0, #1
 8006626:	e7e0      	b.n	80065ea <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 8006628:	f240 1001 	movw	r0, #257	; 0x101
 800662c:	e7dd      	b.n	80065ea <k_work_queue_start+0x32>
 800662e:	bf00      	nop
 8006630:	080064b9 	.word	0x080064b9

08006634 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006638:	bf08      	it	eq
 800663a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800663e:	d100      	bne.n	8006642 <add_thread_timeout+0xe>
 8006640:	4770      	bx	lr
{
 8006642:	b508      	push	{r3, lr}
 8006644:	4902      	ldr	r1, [pc, #8]	; (8006650 <add_thread_timeout+0x1c>)
 8006646:	3018      	adds	r0, #24
 8006648:	f000 fc4a 	bl	8006ee0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800664c:	bd08      	pop	{r3, pc}
 800664e:	bf00      	nop
 8006650:	0800abed 	.word	0x0800abed

08006654 <z_reset_time_slice>:
{
 8006654:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <z_reset_time_slice+0x24>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	b903      	cbnz	r3, 800665e <z_reset_time_slice+0xa>
}
 800665c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800665e:	f7ff f9c1 	bl	80059e4 <sys_clock_elapsed>
 8006662:	4603      	mov	r3, r0
 8006664:	4a04      	ldr	r2, [pc, #16]	; (8006678 <z_reset_time_slice+0x24>)
 8006666:	6810      	ldr	r0, [r2, #0]
 8006668:	4403      	add	r3, r0
 800666a:	4a04      	ldr	r2, [pc, #16]	; (800667c <z_reset_time_slice+0x28>)
 800666c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800666e:	2100      	movs	r1, #0
 8006670:	f004 fbfe 	bl	800ae70 <z_set_timeout_expiry>
}
 8006674:	e7f2      	b.n	800665c <z_reset_time_slice+0x8>
 8006676:	bf00      	nop
 8006678:	20000bf0 	.word	0x20000bf0
 800667c:	20000bac 	.word	0x20000bac

08006680 <k_sched_time_slice_set>:
{
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 8006686:	2300      	movs	r3, #0
	__asm__ volatile(
 8006688:	f04f 0210 	mov.w	r2, #16
 800668c:	f3ef 8611 	mrs	r6, BASEPRI
 8006690:	f382 8812 	msr	BASEPRI_MAX, r2
 8006694:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8006698:	e00c      	b.n	80066b4 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800669a:	2b02      	cmp	r3, #2
 800669c:	bfb8      	it	lt
 800669e:	2302      	movlt	r3, #2
 80066a0:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 80066a2:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <k_sched_time_slice_set+0x50>)
 80066a4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 80066a6:	f7ff ffd5 	bl	8006654 <z_reset_time_slice>
	__asm__ volatile(
 80066aa:	f386 8811 	msr	BASEPRI, r6
 80066ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80066b2:	2301      	movs	r3, #1
 80066b4:	b953      	cbnz	r3, 80066cc <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <k_sched_time_slice_set+0x54>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 80066bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80066c0:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 80066c2:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <k_sched_time_slice_set+0x58>)
 80066c4:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 80066c6:	2c00      	cmp	r4, #0
 80066c8:	dce7      	bgt.n	800669a <k_sched_time_slice_set+0x1a>
 80066ca:	e7ea      	b.n	80066a2 <k_sched_time_slice_set+0x22>
}
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	bf00      	nop
 80066d0:	20000bec 	.word	0x20000bec
 80066d4:	20000bac 	.word	0x20000bac
 80066d8:	20000bf0 	.word	0x20000bf0

080066dc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 80066dc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 80066de:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80066e0:	b921      	cbnz	r1, 80066ec <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e2:	f3ef 8305 	mrs	r3, IPSR
 80066e6:	b913      	cbnz	r3, 80066ee <z_reschedule+0x12>
 80066e8:	2101      	movs	r1, #1
 80066ea:	e000      	b.n	80066ee <z_reschedule+0x12>
 80066ec:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 80066ee:	f011 0f01 	tst.w	r1, #1
 80066f2:	d007      	beq.n	8006704 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 80066f4:	4b06      	ldr	r3, [pc, #24]	; (8006710 <z_reschedule+0x34>)
 80066f6:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 80066f8:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d002      	beq.n	8006704 <z_reschedule+0x28>
	ret = arch_swap(key);
 80066fe:	f7fc f90f 	bl	8002920 <arch_swap>
		z_swap(lock, key);
 8006702:	e003      	b.n	800670c <z_reschedule+0x30>
 8006704:	f380 8811 	msr	BASEPRI, r0
 8006708:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800670c:	bd08      	pop	{r3, pc}
 800670e:	bf00      	nop
 8006710:	20000bac 	.word	0x20000bac

08006714 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8006714:	2300      	movs	r3, #0
	__asm__ volatile(
 8006716:	f04f 0210 	mov.w	r2, #16
 800671a:	f3ef 8111 	mrs	r1, BASEPRI
 800671e:	f382 8812 	msr	BASEPRI_MAX, r2
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	e009      	b.n	800673c <k_sched_lock+0x28>
	--_current->base.sched_locked;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <k_sched_lock+0x30>)
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	7bd3      	ldrb	r3, [r2, #15]
 800672e:	3b01      	subs	r3, #1
 8006730:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8006732:	f381 8811 	msr	BASEPRI, r1
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	2301      	movs	r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f3      	beq.n	8006728 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000bac 	.word	0x20000bac

08006748 <update_cache>:
{
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 800674c:	480f      	ldr	r0, [pc, #60]	; (800678c <update_cache+0x44>)
 800674e:	f004 fa2a 	bl	800aba6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8006752:	4605      	mov	r5, r0
 8006754:	b170      	cbz	r0, 8006774 <update_cache+0x2c>
	if (preempt_ok != 0) {
 8006756:	b984      	cbnz	r4, 800677a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <update_cache+0x48>)
 800675a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800675c:	7b5a      	ldrb	r2, [r3, #13]
 800675e:	f012 0f1f 	tst.w	r2, #31
 8006762:	d10a      	bne.n	800677a <update_cache+0x32>
	return node->next != NULL;
 8006764:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8006766:	b942      	cbnz	r2, 800677a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8006768:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800676a:	2a7f      	cmp	r2, #127	; 0x7f
 800676c:	d905      	bls.n	800677a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800676e:	4a08      	ldr	r2, [pc, #32]	; (8006790 <update_cache+0x48>)
 8006770:	6193      	str	r3, [r2, #24]
 8006772:	e00a      	b.n	800678a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <update_cache+0x48>)
 8006776:	68dd      	ldr	r5, [r3, #12]
 8006778:	e7ed      	b.n	8006756 <update_cache+0xe>
		if (thread != _current) {
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <update_cache+0x48>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	42ab      	cmp	r3, r5
 8006780:	d001      	beq.n	8006786 <update_cache+0x3e>
			z_reset_time_slice();
 8006782:	f7ff ff67 	bl	8006654 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8006786:	4b02      	ldr	r3, [pc, #8]	; (8006790 <update_cache+0x48>)
 8006788:	619d      	str	r5, [r3, #24]
}
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20000bc8 	.word	0x20000bc8
 8006790:	20000bac 	.word	0x20000bac

08006794 <move_thread_to_end_of_prio_q>:
{
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8006798:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800679a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	db28      	blt.n	80067f4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 80067a2:	7b6b      	ldrb	r3, [r5, #13]
 80067a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067a8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <move_thread_to_end_of_prio_q+0x80>)
 80067ac:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d02d      	beq.n	8006810 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80067b4:	b16c      	cbz	r4, 80067d2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f004 f989 	bl	800aad0 <z_sched_prio_cmp>
 80067be:	2800      	cmp	r0, #0
 80067c0:	dc20      	bgt.n	8006804 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80067c2:	b134      	cbz	r4, 80067d2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 80067c4:	4b13      	ldr	r3, [pc, #76]	; (8006814 <move_thread_to_end_of_prio_q+0x80>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d002      	beq.n	80067d2 <move_thread_to_end_of_prio_q+0x3e>
 80067cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d1f0      	bne.n	80067b4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <move_thread_to_end_of_prio_q+0x80>)
 80067d4:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 80067d6:	f103 011c 	add.w	r1, r3, #28
 80067da:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 80067dc:	606a      	str	r2, [r5, #4]

	tail->next = node;
 80067de:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80067e0:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <move_thread_to_end_of_prio_q+0x80>)
 80067e4:	6898      	ldr	r0, [r3, #8]
 80067e6:	42a8      	cmp	r0, r5
 80067e8:	bf14      	ite	ne
 80067ea:	2000      	movne	r0, #0
 80067ec:	2001      	moveq	r0, #1
 80067ee:	f7ff ffab 	bl	8006748 <update_cache>
}
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80067f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067f8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 80067fa:	4601      	mov	r1, r0
 80067fc:	4806      	ldr	r0, [pc, #24]	; (8006818 <move_thread_to_end_of_prio_q+0x84>)
 80067fe:	f004 f9a6 	bl	800ab4e <z_priq_dumb_remove>
}
 8006802:	e7ce      	b.n	80067a2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8006804:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 8006806:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8006808:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800680a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800680c:	6065      	str	r5, [r4, #4]
}
 800680e:	e7e8      	b.n	80067e2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006810:	2400      	movs	r4, #0
 8006812:	e7cf      	b.n	80067b4 <move_thread_to_end_of_prio_q+0x20>
 8006814:	20000bac 	.word	0x20000bac
 8006818:	20000bc8 	.word	0x20000bc8

0800681c <z_time_slice>:
{
 800681c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800681e:	f04f 0310 	mov.w	r3, #16
 8006822:	f3ef 8411 	mrs	r4, BASEPRI
 8006826:	f383 8812 	msr	BASEPRI_MAX, r3
 800682a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800682e:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <z_time_slice+0x98>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	4a21      	ldr	r2, [pc, #132]	; (80068b8 <z_time_slice+0x9c>)
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	4293      	cmp	r3, r2
 8006838:	d017      	beq.n	800686a <z_time_slice+0x4e>
	pending_current = NULL;
 800683a:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <z_time_slice+0x9c>)
 800683c:	2100      	movs	r1, #0
 800683e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8006840:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <z_time_slice+0xa0>)
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	b372      	cbz	r2, 80068a4 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8006846:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8006848:	2a7f      	cmp	r2, #127	; 0x7f
 800684a:	d815      	bhi.n	8006878 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800684c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800684e:	f012 0f1f 	tst.w	r2, #31
 8006852:	d11b      	bne.n	800688c <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8006854:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8006858:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <z_time_slice+0xa4>)
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	4291      	cmp	r1, r2
 800685e:	db17      	blt.n	8006890 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <z_time_slice+0xa8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d016      	beq.n	8006894 <z_time_slice+0x78>
 8006866:	2201      	movs	r2, #1
 8006868:	e007      	b.n	800687a <z_time_slice+0x5e>
		z_reset_time_slice();
 800686a:	f7ff fef3 	bl	8006654 <z_reset_time_slice>
	__asm__ volatile(
 800686e:	f384 8811 	msr	BASEPRI, r4
 8006872:	f3bf 8f6f 	isb	sy
		return;
 8006876:	e01c      	b.n	80068b2 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 8006878:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800687a:	b19a      	cbz	r2, 80068a4 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800687c:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <z_time_slice+0x98>)
 800687e:	6912      	ldr	r2, [r2, #16]
 8006880:	4282      	cmp	r2, r0
 8006882:	dd09      	ble.n	8006898 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 8006884:	1a10      	subs	r0, r2, r0
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <z_time_slice+0x98>)
 8006888:	6118      	str	r0, [r3, #16]
 800688a:	e00e      	b.n	80068aa <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800688c:	2200      	movs	r2, #0
 800688e:	e7f4      	b.n	800687a <z_time_slice+0x5e>
 8006890:	2200      	movs	r2, #0
 8006892:	e7f2      	b.n	800687a <z_time_slice+0x5e>
 8006894:	2200      	movs	r2, #0
 8006896:	e7f0      	b.n	800687a <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff7b 	bl	8006794 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800689e:	f7ff fed9 	bl	8006654 <z_reset_time_slice>
 80068a2:	e002      	b.n	80068aa <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 80068a4:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <z_time_slice+0x98>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	611a      	str	r2, [r3, #16]
 80068aa:	f384 8811 	msr	BASEPRI, r4
 80068ae:	f3bf 8f6f 	isb	sy
}
 80068b2:	bd10      	pop	{r4, pc}
 80068b4:	20000bac 	.word	0x20000bac
 80068b8:	20000be4 	.word	0x20000be4
 80068bc:	20000bf0 	.word	0x20000bf0
 80068c0:	20000bec 	.word	0x20000bec
 80068c4:	20000508 	.word	0x20000508

080068c8 <ready_thread>:
{
 80068c8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 80068ca:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80068cc:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	db2d      	blt.n	8006930 <ready_thread+0x68>
 80068d4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80068d6:	f013 0f1f 	tst.w	r3, #31
 80068da:	d105      	bne.n	80068e8 <ready_thread+0x20>
	return node->next != NULL;
 80068dc:	6982      	ldr	r2, [r0, #24]
 80068de:	b10a      	cbz	r2, 80068e4 <ready_thread+0x1c>
 80068e0:	2200      	movs	r2, #0
 80068e2:	e002      	b.n	80068ea <ready_thread+0x22>
 80068e4:	2201      	movs	r2, #1
 80068e6:	e000      	b.n	80068ea <ready_thread+0x22>
 80068e8:	2200      	movs	r2, #0
 80068ea:	b30a      	cbz	r2, 8006930 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 80068ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068f0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <ready_thread+0x7c>)
 80068f4:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80068f8:	429d      	cmp	r5, r3
 80068fa:	d020      	beq.n	800693e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80068fc:	b16d      	cbz	r5, 800691a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80068fe:	4629      	mov	r1, r5
 8006900:	4620      	mov	r0, r4
 8006902:	f004 f8e5 	bl	800aad0 <z_sched_prio_cmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	dc13      	bgt.n	8006932 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800690a:	b135      	cbz	r5, 800691a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <ready_thread+0x7c>)
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	429d      	cmp	r5, r3
 8006912:	d002      	beq.n	800691a <ready_thread+0x52>
 8006914:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006916:	2d00      	cmp	r5, #0
 8006918:	d1f0      	bne.n	80068fc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <ready_thread+0x7c>)
 800691c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800691e:	f103 011c 	add.w	r1, r3, #28
 8006922:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8006924:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006926:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006928:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800692a:	2000      	movs	r0, #0
 800692c:	f7ff ff0c 	bl	8006748 <update_cache>
}
 8006930:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8006932:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8006934:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006936:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006938:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800693a:	606c      	str	r4, [r5, #4]
}
 800693c:	e7f5      	b.n	800692a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800693e:	2500      	movs	r5, #0
 8006940:	e7dc      	b.n	80068fc <ready_thread+0x34>
 8006942:	bf00      	nop
 8006944:	20000bac 	.word	0x20000bac

08006948 <z_sched_start>:
{
 8006948:	b510      	push	{r4, lr}
	__asm__ volatile(
 800694a:	f04f 0310 	mov.w	r3, #16
 800694e:	f3ef 8411 	mrs	r4, BASEPRI
 8006952:	f383 8812 	msr	BASEPRI_MAX, r3
 8006956:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800695a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800695c:	f013 0f04 	tst.w	r3, #4
 8006960:	d104      	bne.n	800696c <z_sched_start+0x24>
	__asm__ volatile(
 8006962:	f384 8811 	msr	BASEPRI, r4
 8006966:	f3bf 8f6f 	isb	sy
}
 800696a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8006972:	f7ff ffa9 	bl	80068c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8006976:	4621      	mov	r1, r4
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <z_sched_start+0x38>)
 800697a:	f7ff feaf 	bl	80066dc <z_reschedule>
 800697e:	e7f4      	b.n	800696a <z_sched_start+0x22>
 8006980:	20000be8 	.word	0x20000be8

08006984 <unready_thread>:
{
 8006984:	b510      	push	{r4, lr}
 8006986:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8006988:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800698a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800698e:	2b00      	cmp	r3, #0
 8006990:	db08      	blt.n	80069a4 <unready_thread+0x20>
	update_cache(thread == _current);
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <unready_thread+0x30>)
 8006994:	6898      	ldr	r0, [r3, #8]
 8006996:	42a0      	cmp	r0, r4
 8006998:	bf14      	ite	ne
 800699a:	2000      	movne	r0, #0
 800699c:	2001      	moveq	r0, #1
 800699e:	f7ff fed3 	bl	8006748 <update_cache>
}
 80069a2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80069a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069a8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 80069aa:	4601      	mov	r1, r0
 80069ac:	4802      	ldr	r0, [pc, #8]	; (80069b8 <unready_thread+0x34>)
 80069ae:	f004 f8ce 	bl	800ab4e <z_priq_dumb_remove>
}
 80069b2:	e7ee      	b.n	8006992 <unready_thread+0xe>
 80069b4:	20000bac 	.word	0x20000bac
 80069b8:	20000bc8 	.word	0x20000bc8

080069bc <z_pend_curr>:
{
 80069bc:	b510      	push	{r4, lr}
 80069be:	460c      	mov	r4, r1
 80069c0:	4611      	mov	r1, r2
	pending_current = _current;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <z_pend_curr+0x20>)
 80069c4:	6898      	ldr	r0, [r3, #8]
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <z_pend_curr+0x24>)
 80069c8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 80069ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ce:	f004 f96f 	bl	800acb0 <pend>
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7fb ffa4 	bl	8002920 <arch_swap>
}
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop
 80069dc:	20000bac 	.word	0x20000bac
 80069e0:	20000be4 	.word	0x20000be4

080069e4 <z_set_prio>:
{
 80069e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	4604      	mov	r4, r0
 80069ea:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 80069ec:	2300      	movs	r3, #0
	__asm__ volatile(
 80069ee:	f04f 0210 	mov.w	r2, #16
 80069f2:	f3ef 8811 	mrs	r8, BASEPRI
 80069f6:	f382 8812 	msr	BASEPRI_MAX, r2
 80069fa:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 80069fe:	461f      	mov	r7, r3
 8006a00:	e008      	b.n	8006a14 <z_set_prio+0x30>
		if (need_sched) {
 8006a02:	f012 0701 	ands.w	r7, r2, #1
 8006a06:	d111      	bne.n	8006a2c <z_set_prio+0x48>
			thread->base.prio = prio;
 8006a08:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8006a0a:	f388 8811 	msr	BASEPRI, r8
 8006a0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006a12:	2301      	movs	r3, #1
 8006a14:	461a      	mov	r2, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d13d      	bne.n	8006a96 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8006a1a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8006a1c:	f013 0f1f 	tst.w	r3, #31
 8006a20:	d1ef      	bne.n	8006a02 <z_set_prio+0x1e>
	return node->next != NULL;
 8006a22:	69a1      	ldr	r1, [r4, #24]
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d1ec      	bne.n	8006a02 <z_set_prio+0x1e>
 8006a28:	2201      	movs	r2, #1
 8006a2a:	e7ea      	b.n	8006a02 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a30:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8006a32:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006a9c <z_set_prio+0xb8>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4648      	mov	r0, r9
 8006a3a:	f004 f888 	bl	800ab4e <z_priq_dumb_remove>
				thread->base.prio = prio;
 8006a3e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8006a40:	7b63      	ldrb	r3, [r4, #13]
 8006a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a46:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8006a48:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006a4c:	454d      	cmp	r5, r9
 8006a4e:	d020      	beq.n	8006a92 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006a50:	b16d      	cbz	r5, 8006a6e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006a52:	4629      	mov	r1, r5
 8006a54:	4620      	mov	r0, r4
 8006a56:	f004 f83b 	bl	800aad0 <z_sched_prio_cmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	dc13      	bgt.n	8006a86 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006a5e:	b135      	cbz	r5, 8006a6e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <z_set_prio+0xbc>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	429d      	cmp	r5, r3
 8006a66:	d002      	beq.n	8006a6e <z_set_prio+0x8a>
 8006a68:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	d1f0      	bne.n	8006a50 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <z_set_prio+0xbc>)
 8006a70:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006a72:	f103 011c 	add.w	r1, r3, #28
 8006a76:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8006a78:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006a7a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006a7c:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f7ff fe62 	bl	8006748 <update_cache>
 8006a84:	e7c1      	b.n	8006a0a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8006a86:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8006a88:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006a8a:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8006a8c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006a8e:	606c      	str	r4, [r5, #4]
}
 8006a90:	e7f5      	b.n	8006a7e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006a92:	2500      	movs	r5, #0
 8006a94:	e7dc      	b.n	8006a50 <z_set_prio+0x6c>
}
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	20000bc8 	.word	0x20000bc8
 8006aa0:	20000bac 	.word	0x20000bac

08006aa4 <z_impl_k_thread_suspend>:
{
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8006aa8:	3018      	adds	r0, #24
 8006aaa:	f004 f9c3 	bl	800ae34 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8006aae:	2300      	movs	r3, #0
	__asm__ volatile(
 8006ab0:	f04f 0210 	mov.w	r2, #16
 8006ab4:	f3ef 8511 	mrs	r5, BASEPRI
 8006ab8:	f382 8812 	msr	BASEPRI_MAX, r2
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	e010      	b.n	8006ae4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006ac2:	7b63      	ldrb	r3, [r4, #13]
 8006ac4:	f043 0310 	orr.w	r3, r3, #16
 8006ac8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <z_impl_k_thread_suspend+0x7c>)
 8006acc:	6898      	ldr	r0, [r3, #8]
 8006ace:	42a0      	cmp	r0, r4
 8006ad0:	bf14      	ite	ne
 8006ad2:	2000      	movne	r0, #0
 8006ad4:	2001      	moveq	r0, #1
 8006ad6:	f7ff fe37 	bl	8006748 <update_cache>
	__asm__ volatile(
 8006ada:	f385 8811 	msr	BASEPRI, r5
 8006ade:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	b963      	cbnz	r3, 8006b00 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 8006ae6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 8006ae8:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dae8      	bge.n	8006ac2 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006af0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006af4:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 8006af6:	4621      	mov	r1, r4
 8006af8:	480a      	ldr	r0, [pc, #40]	; (8006b24 <z_impl_k_thread_suspend+0x80>)
 8006afa:	f004 f828 	bl	800ab4e <z_priq_dumb_remove>
}
 8006afe:	e7e0      	b.n	8006ac2 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <z_impl_k_thread_suspend+0x7c>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d000      	beq.n	8006b0a <z_impl_k_thread_suspend+0x66>
}
 8006b08:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8006b0a:	f04f 0310 	mov.w	r3, #16
 8006b0e:	f3ef 8011 	mrs	r0, BASEPRI
 8006b12:	f383 8812 	msr	BASEPRI_MAX, r3
 8006b16:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8006b1a:	f004 f803 	bl	800ab24 <z_reschedule_irqlock>
 8006b1e:	e7f3      	b.n	8006b08 <z_impl_k_thread_suspend+0x64>
 8006b20:	20000bac 	.word	0x20000bac
 8006b24:	20000bc8 	.word	0x20000bc8

08006b28 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8006b28:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f04f 0210 	mov.w	r2, #16
 8006b30:	f3ef 8411 	mrs	r4, BASEPRI
 8006b34:	f382 8812 	msr	BASEPRI_MAX, r2
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	e00c      	b.n	8006b58 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <k_sched_unlock+0x4c>)
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	7bd3      	ldrb	r3, [r2, #15]
 8006b44:	3301      	adds	r3, #1
 8006b46:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7ff fdfd 	bl	8006748 <update_cache>
	__asm__ volatile(
 8006b4e:	f384 8811 	msr	BASEPRI, r4
 8006b52:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8006b56:	2301      	movs	r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <k_sched_unlock+0x16>
	__asm__ volatile(
 8006b5c:	f04f 0310 	mov.w	r3, #16
 8006b60:	f3ef 8011 	mrs	r0, BASEPRI
 8006b64:	f383 8812 	msr	BASEPRI_MAX, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f003 ffda 	bl	800ab24 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	20000bac 	.word	0x20000bac

08006b78 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8006b78:	7b43      	ldrb	r3, [r0, #13]
 8006b7a:	f013 0f08 	tst.w	r3, #8
 8006b7e:	d142      	bne.n	8006c06 <end_thread+0x8e>
{
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8006b84:	f043 0308 	orr.w	r3, r3, #8
 8006b88:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8006b8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b8e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8006b90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b94:	d12b      	bne.n	8006bee <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8006b96:	68ab      	ldr	r3, [r5, #8]
 8006b98:	b15b      	cbz	r3, 8006bb2 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f003 ff96 	bl	800aacc <pended_on_thread>
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f003 ffd4 	bl	800ab4e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8006ba6:	7b6b      	ldrb	r3, [r5, #13]
 8006ba8:	f023 0302 	bic.w	r3, r3, #2
 8006bac:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60ab      	str	r3, [r5, #8]
 8006bb2:	f105 0018 	add.w	r0, r5, #24
 8006bb6:	f004 f93d 	bl	800ae34 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 8006bba:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8006bbc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006bbe:	42ac      	cmp	r4, r5
 8006bc0:	d01d      	beq.n	8006bfe <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8006bc2:	b1e4      	cbz	r4, 8006bfe <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f003 ff81 	bl	800aacc <pended_on_thread>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	f003 ffbf 	bl	800ab4e <z_priq_dumb_remove>
 8006bd0:	7b63      	ldrb	r3, [r4, #13]
 8006bd2:	f023 0302 	bic.w	r3, r3, #2
 8006bd6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8006bd8:	2600      	movs	r6, #0
 8006bda:	60a6      	str	r6, [r4, #8]
 8006bdc:	f104 0018 	add.w	r0, r4, #24
 8006be0:	f004 f928 	bl	800ae34 <z_abort_timeout>
 8006be4:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff fe6e 	bl	80068c8 <ready_thread>
 8006bec:	e7e6      	b.n	8006bbc <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf2:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	4804      	ldr	r0, [pc, #16]	; (8006c08 <end_thread+0x90>)
 8006bf8:	f003 ffa9 	bl	800ab4e <z_priq_dumb_remove>
}
 8006bfc:	e7cb      	b.n	8006b96 <end_thread+0x1e>
		update_cache(1);
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f7ff fda2 	bl	8006748 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
 8006c06:	4770      	bx	lr
 8006c08:	20000bc8 	.word	0x20000bc8

08006c0c <z_sched_init>:
{
 8006c0c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <z_sched_init+0x18>)
 8006c10:	f103 021c 	add.w	r2, r3, #28
 8006c14:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 8006c16:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4608      	mov	r0, r1
 8006c1c:	f7ff fd30 	bl	8006680 <k_sched_time_slice_set>
}
 8006c20:	bd08      	pop	{r3, pc}
 8006c22:	bf00      	nop
 8006c24:	20000bac 	.word	0x20000bac

08006c28 <z_impl_k_yield>:
{
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	f04f 0310 	mov.w	r3, #16
 8006c2e:	f3ef 8611 	mrs	r6, BASEPRI
 8006c32:	f383 8812 	msr	BASEPRI_MAX, r3
 8006c36:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 8006c3a:	4c1c      	ldr	r4, [pc, #112]	; (8006cac <z_impl_k_yield+0x84>)
 8006c3c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8006c3e:	7b4b      	ldrb	r3, [r1, #13]
 8006c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c44:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 8006c46:	f104 071c 	add.w	r7, r4, #28
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f003 ff7f 	bl	800ab4e <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8006c50:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8006c52:	7b6b      	ldrb	r3, [r5, #13]
 8006c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c58:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8006c5a:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006c5c:	42bc      	cmp	r4, r7
 8006c5e:	d023      	beq.n	8006ca8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006c60:	b16c      	cbz	r4, 8006c7e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8006c62:	4621      	mov	r1, r4
 8006c64:	4628      	mov	r0, r5
 8006c66:	f003 ff33 	bl	800aad0 <z_sched_prio_cmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	dc16      	bgt.n	8006c9c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006c6e:	b134      	cbz	r4, 8006c7e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <z_impl_k_yield+0x84>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	429c      	cmp	r4, r3
 8006c76:	d002      	beq.n	8006c7e <z_impl_k_yield+0x56>
 8006c78:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	d1f0      	bne.n	8006c60 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <z_impl_k_yield+0x84>)
 8006c80:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8006c82:	f103 011c 	add.w	r1, r3, #28
 8006c86:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8006c88:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8006c8a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8006c8c:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f7ff fd5a 	bl	8006748 <update_cache>
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7fb fe43 	bl	8002920 <arch_swap>
}
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8006c9c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8006c9e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8006ca0:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8006ca2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8006ca4:	6065      	str	r5, [r4, #4]
}
 8006ca6:	e7f2      	b.n	8006c8e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006ca8:	2400      	movs	r4, #0
 8006caa:	e7d9      	b.n	8006c60 <z_impl_k_yield+0x38>
 8006cac:	20000bac 	.word	0x20000bac

08006cb0 <z_tick_sleep>:
{
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8006cb4:	ea50 0301 	orrs.w	r3, r0, r1
 8006cb8:	d038      	beq.n	8006d2c <z_tick_sleep+0x7c>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8006cbe:	f06f 0301 	mvn.w	r3, #1
 8006cc2:	1a1b      	subs	r3, r3, r0
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc8:	eb62 0201 	sbc.w	r2, r2, r1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	f172 0300 	sbcs.w	r3, r2, #0
 8006cd2:	db2f      	blt.n	8006d34 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8006cd4:	f06f 0501 	mvn.w	r5, #1
 8006cd8:	1a2d      	subs	r5, r5, r0
 8006cda:	f04f 0310 	mov.w	r3, #16
 8006cde:	f3ef 8811 	mrs	r8, BASEPRI
 8006ce2:	f383 8812 	msr	BASEPRI_MAX, r3
 8006ce6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8006cea:	4f14      	ldr	r7, [pc, #80]	; (8006d3c <z_tick_sleep+0x8c>)
 8006cec:	68b8      	ldr	r0, [r7, #8]
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <z_tick_sleep+0x90>)
 8006cf0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8006cf2:	f7ff fe47 	bl	8006984 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8006cf6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4633      	mov	r3, r6
 8006cfc:	4911      	ldr	r1, [pc, #68]	; (8006d44 <z_tick_sleep+0x94>)
 8006cfe:	3018      	adds	r0, #24
 8006d00:	f000 f8ee 	bl	8006ee0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8006d04:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006d06:	7b53      	ldrb	r3, [r2, #13]
 8006d08:	f043 0310 	orr.w	r3, r3, #16
 8006d0c:	7353      	strb	r3, [r2, #13]
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7fb fe06 	bl	8002920 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8006d14:	f004 f8d7 	bl	800aec6 <sys_clock_tick_get_32>
 8006d18:	1a28      	subs	r0, r5, r0
 8006d1a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8006d1e:	2801      	cmp	r0, #1
 8006d20:	f173 0300 	sbcs.w	r3, r3, #0
 8006d24:	da00      	bge.n	8006d28 <z_tick_sleep+0x78>
	return 0;
 8006d26:	2000      	movs	r0, #0
}
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8006d2c:	f7ff ff7c 	bl	8006c28 <z_impl_k_yield>
		return 0;
 8006d30:	2000      	movs	r0, #0
 8006d32:	e7f9      	b.n	8006d28 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8006d34:	f004 f8c7 	bl	800aec6 <sys_clock_tick_get_32>
 8006d38:	1905      	adds	r5, r0, r4
 8006d3a:	e7ce      	b.n	8006cda <z_tick_sleep+0x2a>
 8006d3c:	20000bac 	.word	0x20000bac
 8006d40:	20000be4 	.word	0x20000be4
 8006d44:	0800abed 	.word	0x0800abed

08006d48 <z_impl_k_sleep>:
{
 8006d48:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006d4a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8006d4e:	bf08      	it	eq
 8006d50:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8006d54:	d007      	beq.n	8006d66 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8006d56:	f7ff ffab 	bl	8006cb0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	17c1      	asrs	r1, r0, #31
 8006d60:	f7f9 fdb0 	bl	80008c4 <__aeabi_uldivmod>
}
 8006d64:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8006d66:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <z_impl_k_sleep+0x2c>)
 8006d68:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8006d6a:	f7ff fe9b 	bl	8006aa4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d72:	e7f7      	b.n	8006d64 <z_impl_k_sleep+0x1c>
 8006d74:	20000bac 	.word	0x20000bac

08006d78 <z_impl_z_current_get>:
}
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <z_impl_z_current_get+0x8>)
 8006d7a:	6898      	ldr	r0, [r3, #8]
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000bac 	.word	0x20000bac

08006d84 <z_impl_k_is_preempt_thread>:
 8006d84:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8006d88:	b933      	cbnz	r3, 8006d98 <z_impl_k_is_preempt_thread+0x14>
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <z_impl_k_is_preempt_thread+0x1c>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8006d8e:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8006d90:	2b7f      	cmp	r3, #127	; 0x7f
 8006d92:	d803      	bhi.n	8006d9c <z_impl_k_is_preempt_thread+0x18>
 8006d94:	2001      	movs	r0, #1
 8006d96:	4770      	bx	lr
 8006d98:	2000      	movs	r0, #0
 8006d9a:	4770      	bx	lr
 8006d9c:	2000      	movs	r0, #0
}
 8006d9e:	4770      	bx	lr
 8006da0:	20000bac 	.word	0x20000bac

08006da4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	f04f 0310 	mov.w	r3, #16
 8006daa:	f3ef 8511 	mrs	r5, BASEPRI
 8006dae:	f383 8812 	msr	BASEPRI_MAX, r3
 8006db2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8006db6:	7b43      	ldrb	r3, [r0, #13]
 8006db8:	f013 0f08 	tst.w	r3, #8
 8006dbc:	d004      	beq.n	8006dc8 <z_thread_abort+0x24>
	__asm__ volatile(
 8006dbe:	f385 8811 	msr	BASEPRI, r5
 8006dc2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	4604      	mov	r4, r0
	end_thread(thread);
 8006dca:	f7ff fed5 	bl	8006b78 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <z_thread_abort+0x4c>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	42a3      	cmp	r3, r4
 8006dd4:	d004      	beq.n	8006de0 <z_thread_abort+0x3c>
 8006dd6:	f385 8811 	msr	BASEPRI, r5
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	e7f2      	b.n	8006dc6 <z_thread_abort+0x22>
 8006de0:	f3ef 8305 	mrs	r3, IPSR
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f6      	bne.n	8006dd6 <z_thread_abort+0x32>
 8006de8:	4628      	mov	r0, r5
 8006dea:	f7fb fd99 	bl	8002920 <arch_swap>
	return ret;
 8006dee:	e7f2      	b.n	8006dd6 <z_thread_abort+0x32>
 8006df0:	20000bac 	.word	0x20000bac

08006df4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8006df4:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8006dfc:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8006e00:	e9cd bc00 	strd	fp, ip, [sp]
 8006e04:	f7ff fdda 	bl	80069bc <z_pend_curr>

	if (data != NULL) {
 8006e08:	b11c      	cbz	r4, 8006e12 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <z_sched_wait+0x24>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8006e12:	b003      	add	sp, #12
 8006e14:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 8006e18:	20000bac 	.word	0x20000bac

08006e1c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8006e1c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8006e1e:	4806      	ldr	r0, [pc, #24]	; (8006e38 <z_data_copy+0x1c>)
 8006e20:	4a06      	ldr	r2, [pc, #24]	; (8006e3c <z_data_copy+0x20>)
 8006e22:	1a12      	subs	r2, r2, r0
 8006e24:	4906      	ldr	r1, [pc, #24]	; (8006e40 <z_data_copy+0x24>)
 8006e26:	f004 f987 	bl	800b138 <memcpy>
 8006e2a:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <z_data_copy+0x28>)
 8006e2c:	4906      	ldr	r1, [pc, #24]	; (8006e48 <z_data_copy+0x2c>)
 8006e2e:	4807      	ldr	r0, [pc, #28]	; (8006e4c <z_data_copy+0x30>)
 8006e30:	f004 f982 	bl	800b138 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8006e34:	bd08      	pop	{r3, pc}
 8006e36:	bf00      	nop
 8006e38:	20000000 	.word	0x20000000
 8006e3c:	20000404 	.word	0x20000404
 8006e40:	0800c450 	.word	0x0800c450
 8006e44:	00000000 	.word	0x00000000
 8006e48:	0800c450 	.word	0x0800c450
 8006e4c:	20000000 	.word	0x20000000

08006e50 <first>:
	return list->head == list;
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <first+0x10>)
 8006e52:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006e54:	4298      	cmp	r0, r3
 8006e56:	d000      	beq.n	8006e5a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8006e58:	4770      	bx	lr
 8006e5a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8006e5c:	e7fc      	b.n	8006e58 <first+0x8>
 8006e5e:	bf00      	nop
 8006e60:	200000b0 	.word	0x200000b0

08006e64 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8006e64:	b130      	cbz	r0, 8006e74 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8006e66:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <next+0x14>)
 8006e68:	6852      	ldr	r2, [r2, #4]
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	d001      	beq.n	8006e72 <next+0xe>
 8006e6e:	6800      	ldr	r0, [r0, #0]
 8006e70:	4770      	bx	lr
 8006e72:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	200000b0 	.word	0x200000b0

08006e7c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8006e7c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <elapsed+0x14>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	b10b      	cbz	r3, 8006e88 <elapsed+0xc>
 8006e84:	2000      	movs	r0, #0
}
 8006e86:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8006e88:	f7fe fdac 	bl	80059e4 <sys_clock_elapsed>
 8006e8c:	e7fb      	b.n	8006e86 <elapsed+0xa>
 8006e8e:	bf00      	nop
 8006e90:	20000bf4 	.word	0x20000bf4

08006e94 <next_timeout>:

static int32_t next_timeout(void)
{
 8006e94:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8006e96:	f7ff ffdb 	bl	8006e50 <first>
 8006e9a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8006e9c:	f7ff ffee 	bl	8006e7c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8006ea0:	b18c      	cbz	r4, 8006ec6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6962      	ldr	r2, [r4, #20]
 8006ea6:	1a1b      	subs	r3, r3, r0
 8006ea8:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	f172 0100 	sbcs.w	r1, r2, #0
 8006eb2:	db11      	blt.n	8006ed8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eba:	f172 0300 	sbcs.w	r3, r2, #0
 8006ebe:	db04      	blt.n	8006eca <next_timeout+0x36>
 8006ec0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006ec4:	e001      	b.n	8006eca <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 8006ec6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006eca:	4b04      	ldr	r3, [pc, #16]	; (8006edc <next_timeout+0x48>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	b113      	cbz	r3, 8006ed6 <next_timeout+0x42>
 8006ed0:	4283      	cmp	r3, r0
 8006ed2:	da00      	bge.n	8006ed6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 8006ed4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8006ed6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7f6      	b.n	8006eca <next_timeout+0x36>
 8006edc:	20000bac 	.word	0x20000bac

08006ee0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee4:	bf08      	it	eq
 8006ee6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8006eea:	d07f      	beq.n	8006fec <z_add_timeout+0x10c>
{
 8006eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4691      	mov	r9, r2
 8006ef4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8006ef6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8006ef8:	2300      	movs	r3, #0
	__asm__ volatile(
 8006efa:	f04f 0210 	mov.w	r2, #16
 8006efe:	f3ef 8711 	mrs	r7, BASEPRI
 8006f02:	f382 8812 	msr	BASEPRI_MAX, r2
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	e021      	b.n	8006f50 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8006f0c:	f7ff ffb6 	bl	8006e7c <elapsed>
 8006f10:	eb19 0800 	adds.w	r8, r9, r0
 8006f14:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8006f18:	f118 0301 	adds.w	r3, r8, #1
 8006f1c:	f140 0000 	adc.w	r0, r0, #0
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	6160      	str	r0, [r4, #20]
 8006f24:	e038      	b.n	8006f98 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8006f26:	1a51      	subs	r1, r2, r1
 8006f28:	eb66 0303 	sbc.w	r3, r6, r3
 8006f2c:	6101      	str	r1, [r0, #16]
 8006f2e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8006f30:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 8006f32:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8006f34:	6020      	str	r0, [r4, #0]
	prev->next = node;
 8006f36:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8006f38:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d040      	beq.n	8006fc0 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8006f3e:	f7ff ff87 	bl	8006e50 <first>
 8006f42:	4284      	cmp	r4, r0
 8006f44:	d043      	beq.n	8006fce <z_add_timeout+0xee>
	__asm__ volatile(
 8006f46:	f387 8811 	msr	BASEPRI, r7
 8006f4a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8006f4e:	2301      	movs	r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d149      	bne.n	8006fe8 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8006f54:	f06f 0201 	mvn.w	r2, #1
 8006f58:	ebb2 0209 	subs.w	r2, r2, r9
 8006f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f60:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dbd1      	blt.n	8006f0c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8006f68:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <z_add_timeout+0x110>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	eb19 0202 	adds.w	r2, r9, r2
 8006f72:	eb43 0305 	adc.w	r3, r3, r5
 8006f76:	f06f 0801 	mvn.w	r8, #1
 8006f7a:	ebb8 0802 	subs.w	r8, r8, r2
 8006f7e:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 8006f82:	4641      	mov	r1, r8
 8006f84:	461a      	mov	r2, r3
 8006f86:	f1b8 0f01 	cmp.w	r8, #1
 8006f8a:	f173 0300 	sbcs.w	r3, r3, #0
 8006f8e:	da01      	bge.n	8006f94 <z_add_timeout+0xb4>
 8006f90:	2101      	movs	r1, #1
 8006f92:	2200      	movs	r2, #0
 8006f94:	6121      	str	r1, [r4, #16]
 8006f96:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006f98:	f7ff ff5a 	bl	8006e50 <first>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d0cc      	beq.n	8006f3a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8006fa0:	6902      	ldr	r2, [r0, #16]
 8006fa2:	6946      	ldr	r6, [r0, #20]
 8006fa4:	6921      	ldr	r1, [r4, #16]
 8006fa6:	6963      	ldr	r3, [r4, #20]
 8006fa8:	4291      	cmp	r1, r2
 8006faa:	eb73 0c06 	sbcs.w	ip, r3, r6
 8006fae:	dbba      	blt.n	8006f26 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8006fb0:	1a89      	subs	r1, r1, r2
 8006fb2:	eb63 0306 	sbc.w	r3, r3, r6
 8006fb6:	6121      	str	r1, [r4, #16]
 8006fb8:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8006fba:	f7ff ff53 	bl	8006e64 <next>
 8006fbe:	e7ed      	b.n	8006f9c <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <z_add_timeout+0x114>)
 8006fc2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8006fc4:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8006fc6:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8006fc8:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8006fca:	605c      	str	r4, [r3, #4]
}
 8006fcc:	e7b7      	b.n	8006f3e <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8006fce:	f7ff ff61 	bl	8006e94 <next_timeout>

			if (next_time == 0 ||
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	b118      	cbz	r0, 8006fde <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <z_add_timeout+0x118>)
 8006fd8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8006fda:	4282      	cmp	r2, r0
 8006fdc:	d0b3      	beq.n	8006f46 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fc7f 	bl	80058e4 <sys_clock_set_timeout>
 8006fe6:	e7ae      	b.n	8006f46 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8006fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000608 	.word	0x20000608
 8006ff4:	200000b0 	.word	0x200000b0
 8006ff8:	20000bac 	.word	0x20000bac

08006ffc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8007000:	f7ff fc0c 	bl	800681c <z_time_slice>
	__asm__ volatile(
 8007004:	f04f 0310 	mov.w	r3, #16
 8007008:	f3ef 8511 	mrs	r5, BASEPRI
 800700c:	f383 8812 	msr	BASEPRI_MAX, r3
 8007010:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8007014:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <sys_clock_announce+0xbc>)
 8007016:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8007018:	e020      	b.n	800705c <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800701a:	4828      	ldr	r0, [pc, #160]	; (80070bc <sys_clock_announce+0xc0>)
 800701c:	6801      	ldr	r1, [r0, #0]
 800701e:	6846      	ldr	r6, [r0, #4]
 8007020:	1889      	adds	r1, r1, r2
 8007022:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 8007026:	6001      	str	r1, [r0, #0]
 8007028:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	4a22      	ldr	r2, [pc, #136]	; (80070b8 <sys_clock_announce+0xbc>)
 800702e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8007030:	2200      	movs	r2, #0
 8007032:	2300      	movs	r3, #0
 8007034:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8007038:	4620      	mov	r0, r4
 800703a:	f003 fee4 	bl	800ae06 <remove_timeout>
	__asm__ volatile(
 800703e:	f385 8811 	msr	BASEPRI, r5
 8007042:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	4620      	mov	r0, r4
 800704a:	4798      	blx	r3
	__asm__ volatile(
 800704c:	f04f 0310 	mov.w	r3, #16
 8007050:	f3ef 8511 	mrs	r5, BASEPRI
 8007054:	f383 8812 	msr	BASEPRI_MAX, r3
 8007058:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800705c:	f7ff fef8 	bl	8006e50 <first>
 8007060:	4604      	mov	r4, r0
 8007062:	b140      	cbz	r0, 8007076 <sys_clock_announce+0x7a>
 8007064:	6902      	ldr	r2, [r0, #16]
 8007066:	6941      	ldr	r1, [r0, #20]
 8007068:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <sys_clock_announce+0xbc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	17d8      	asrs	r0, r3, #31
 800706e:	4293      	cmp	r3, r2
 8007070:	eb70 0101 	sbcs.w	r1, r0, r1
 8007074:	dad1      	bge.n	800701a <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8007076:	b144      	cbz	r4, 800708a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <sys_clock_announce+0xbc>)
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	6962      	ldr	r2, [r4, #20]
 8007080:	1a5b      	subs	r3, r3, r1
 8007082:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <sys_clock_announce+0xc0>)
 800708c:	4e0a      	ldr	r6, [pc, #40]	; (80070b8 <sys_clock_announce+0xbc>)
 800708e:	6830      	ldr	r0, [r6, #0]
 8007090:	6813      	ldr	r3, [r2, #0]
 8007092:	6851      	ldr	r1, [r2, #4]
 8007094:	181b      	adds	r3, r3, r0
 8007096:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800709e:	2400      	movs	r4, #0
 80070a0:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80070a2:	f7ff fef7 	bl	8006e94 <next_timeout>
 80070a6:	4621      	mov	r1, r4
 80070a8:	f7fe fc1c 	bl	80058e4 <sys_clock_set_timeout>
	__asm__ volatile(
 80070ac:	f385 8811 	msr	BASEPRI, r5
 80070b0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80070b4:	bd70      	pop	{r4, r5, r6, pc}
 80070b6:	bf00      	nop
 80070b8:	20000bf4 	.word	0x20000bf4
 80070bc:	20000608 	.word	0x20000608

080070c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80070c0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 80070c2:	2300      	movs	r3, #0
	__asm__ volatile(
 80070c4:	f04f 0210 	mov.w	r2, #16
 80070c8:	f3ef 8411 	mrs	r4, BASEPRI
 80070cc:	f382 8812 	msr	BASEPRI_MAX, r2
 80070d0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 80070d4:	4618      	mov	r0, r3
 80070d6:	4619      	mov	r1, r3
 80070d8:	e00c      	b.n	80070f4 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 80070da:	f7fe fc83 	bl	80059e4 <sys_clock_elapsed>
 80070de:	4a07      	ldr	r2, [pc, #28]	; (80070fc <sys_clock_tick_get+0x3c>)
 80070e0:	6813      	ldr	r3, [r2, #0]
 80070e2:	6851      	ldr	r1, [r2, #4]
 80070e4:	18c0      	adds	r0, r0, r3
 80070e6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 80070ea:	f384 8811 	msr	BASEPRI, r4
 80070ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80070f2:	2301      	movs	r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <sys_clock_tick_get+0x1a>
	}
	return t;
}
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	20000608 	.word	0x20000608

08007100 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8007100:	b900      	cbnz	r0, 8007104 <z_impl_k_busy_wait+0x4>
 8007102:	4770      	bx	lr
{
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4605      	mov	r5, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8007108:	f7fe fc8c 	bl	8005a24 <sys_clock_cycle_get_32>
 800710c:	4604      	mov	r4, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800710e:	0eeb      	lsrs	r3, r5, #27
 8007110:	0169      	lsls	r1, r5, #5
 8007112:	1b4a      	subs	r2, r1, r5
 8007114:	f163 0000 	sbc.w	r0, r3, #0
 8007118:	0183      	lsls	r3, r0, #6
 800711a:	ea43 6392 	orr.w	r3, r3, r2, lsr #26
 800711e:	0191      	lsls	r1, r2, #6
 8007120:	1a89      	subs	r1, r1, r2
 8007122:	eb63 0300 	sbc.w	r3, r3, r0
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712c:	00c9      	lsls	r1, r1, #3
 800712e:	194d      	adds	r5, r1, r5
 8007130:	f143 0300 	adc.w	r3, r3, #0
 8007134:	02d9      	lsls	r1, r3, #11
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8007136:	4a07      	ldr	r2, [pc, #28]	; (8007154 <z_impl_k_busy_wait+0x54>)
 8007138:	2300      	movs	r3, #0
 800713a:	02e8      	lsls	r0, r5, #11
 800713c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007140:	f7f9 fbc0 	bl	80008c4 <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 8007144:	4605      	mov	r5, r0
 8007146:	f7fe fc6d 	bl	8005a24 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800714a:	1b00      	subs	r0, r0, r4
 800714c:	42a8      	cmp	r0, r5
 800714e:	d3fa      	bcc.n	8007146 <z_impl_k_busy_wait+0x46>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	bf00      	nop
 8007154:	000f4240 	.word	0x000f4240

08007158 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
	__asm__ volatile(
 800715c:	f04f 0310 	mov.w	r3, #16
 8007160:	f3ef 8511 	mrs	r5, BASEPRI
 8007164:	f383 8812 	msr	BASEPRI_MAX, r3
 8007168:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800716c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800716e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007170:	ea52 0103 	orrs.w	r1, r2, r3
 8007174:	d005      	beq.n	8007182 <z_timer_expiration_handler+0x2a>
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717a:	bf08      	it	eq
 800717c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8007180:	d119      	bne.n	80071b6 <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8007182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007184:	3301      	adds	r3, #1
 8007186:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8007188:	6a23      	ldr	r3, [r4, #32]
 800718a:	b10b      	cbz	r3, 8007190 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 800718c:	4620      	mov	r0, r4
 800718e:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8007190:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8007194:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007196:	42a3      	cmp	r3, r4
 8007198:	d013      	beq.n	80071c2 <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800719a:	b194      	cbz	r4, 80071c2 <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800719c:	4620      	mov	r0, r4
 800719e:	f003 fca1 	bl	800aae4 <z_unpend_thread_no_timeout>
 80071a2:	2300      	movs	r3, #0
 80071a4:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 80071a6:	f385 8811 	msr	BASEPRI, r5
 80071aa:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 80071ae:	4620      	mov	r0, r4
 80071b0:	f003 fd00 	bl	800abb4 <z_ready_thread>
}
 80071b4:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80071b6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80071ba:	4904      	ldr	r1, [pc, #16]	; (80071cc <z_timer_expiration_handler+0x74>)
 80071bc:	f7ff fe90 	bl	8006ee0 <z_add_timeout>
 80071c0:	e7df      	b.n	8007182 <z_timer_expiration_handler+0x2a>
 80071c2:	f385 8811 	msr	BASEPRI, r5
 80071c6:	f3bf 8f6f 	isb	sy
		return;
 80071ca:	e7f3      	b.n	80071b4 <z_timer_expiration_handler+0x5c>
 80071cc:	08007159 	.word	0x08007159

080071d0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 80071d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d4:	461d      	mov	r5, r3
 80071d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80071da:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e0:	bf08      	it	eq
 80071e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80071e6:	d02f      	beq.n	8007248 <z_impl_k_timer_start+0x78>
 80071e8:	4604      	mov	r4, r0
 80071ea:	4616      	mov	r6, r2
 80071ec:	4613      	mov	r3, r2
 80071ee:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 80071f0:	4642      	mov	r2, r8
 80071f2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80071f6:	bf08      	it	eq
 80071f8:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 80071fc:	d00d      	beq.n	800721a <z_impl_k_timer_start+0x4a>
 80071fe:	ea58 0c07 	orrs.w	ip, r8, r7
 8007202:	d00a      	beq.n	800721a <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 8007204:	f06f 0c01 	mvn.w	ip, #1
 8007208:	ebbc 0c08 	subs.w	ip, ip, r8
 800720c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007210:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8007214:	f1bc 0f00 	cmp.w	ip, #0
 8007218:	db18      	blt.n	800724c <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800721a:	f06f 0201 	mvn.w	r2, #1
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007224:	eb62 0201 	sbc.w	r2, r2, r1
 8007228:	2a00      	cmp	r2, #0
 800722a:	db1c      	blt.n	8007266 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800722c:	4620      	mov	r0, r4
 800722e:	f003 fe01 	bl	800ae34 <z_abort_timeout>
	timer->period = period;
 8007232:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8007236:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800723c:	4632      	mov	r2, r6
 800723e:	462b      	mov	r3, r5
 8007240:	490d      	ldr	r1, [pc, #52]	; (8007278 <z_impl_k_timer_start+0xa8>)
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff fe4c 	bl	8006ee0 <z_add_timeout>
		     duration);
}
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800724c:	3a01      	subs	r2, #1
 800724e:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 8007252:	4690      	mov	r8, r2
 8007254:	4607      	mov	r7, r0
 8007256:	2a01      	cmp	r2, #1
 8007258:	f170 0200 	sbcs.w	r2, r0, #0
 800725c:	dadd      	bge.n	800721a <z_impl_k_timer_start+0x4a>
 800725e:	f04f 0801 	mov.w	r8, #1
 8007262:	2700      	movs	r7, #0
 8007264:	e7d9      	b.n	800721a <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8007266:	1e5e      	subs	r6, r3, #1
 8007268:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800726c:	460d      	mov	r5, r1
 800726e:	2900      	cmp	r1, #0
 8007270:	dadc      	bge.n	800722c <z_impl_k_timer_start+0x5c>
 8007272:	2600      	movs	r6, #0
 8007274:	4635      	mov	r5, r6
 8007276:	e7d9      	b.n	800722c <z_impl_k_timer_start+0x5c>
 8007278:	08007159 	.word	0x08007159

0800727c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	b087      	sub	sp, #28
 8007282:	4682      	mov	sl, r0
 8007284:	460f      	mov	r7, r1
 8007286:	4693      	mov	fp, r2
 8007288:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800728a:	2500      	movs	r5, #0
	int events_registered = 0;
 800728c:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800728e:	e02f      	b.n	80072f0 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	b1cb      	cbz	r3, 80072ca <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8007296:	f04f 0902 	mov.w	r9, #2
			return true;
 800729a:	2301      	movs	r3, #1
 800729c:	e015      	b.n	80072ca <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800729e:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	b193      	cbz	r3, 80072ca <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80072a4:	f04f 0904 	mov.w	r9, #4
			return true;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e00e      	b.n	80072ca <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	b15b      	cbz	r3, 80072ca <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 80072b2:	f04f 0901 	mov.w	r9, #1
			return true;
 80072b6:	464b      	mov	r3, r9
 80072b8:	e007      	b.n	80072ca <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	b123      	cbz	r3, 80072ca <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 80072c0:	f04f 0910 	mov.w	r9, #16
			return true;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e000      	b.n	80072ca <register_events+0x4e>
	switch (event->type) {
 80072c8:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d03a      	beq.n	8007344 <register_events+0xc8>
	event->poller = NULL;
 80072ce:	2100      	movs	r1, #0
 80072d0:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	f3c3 3245 	ubfx	r2, r3, #13, #6
 80072d8:	ea49 0202 	orr.w	r2, r9, r2
 80072dc:	f362 3352 	bfi	r3, r2, #13, #6
 80072e0:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 80072e2:	f88b 1000 	strb.w	r1, [fp]
 80072e6:	f386 8811 	msr	BASEPRI, r6
 80072ea:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80072ee:	3501      	adds	r5, #1
 80072f0:	42bd      	cmp	r5, r7
 80072f2:	f280 81b9 	bge.w	8007668 <register_events+0x3ec>
	__asm__ volatile(
 80072f6:	f04f 0310 	mov.w	r3, #16
 80072fa:	f3ef 8611 	mrs	r6, BASEPRI
 80072fe:	f383 8812 	msr	BASEPRI_MAX, r3
 8007302:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8007306:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800730a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800730e:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 8007312:	7b63      	ldrb	r3, [r4, #13]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	3b01      	subs	r3, #1
 800731a:	2b07      	cmp	r3, #7
 800731c:	d8d4      	bhi.n	80072c8 <register_events+0x4c>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <register_events+0xa8>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	080072ad 	.word	0x080072ad
 8007328:	08007291 	.word	0x08007291
 800732c:	080072c9 	.word	0x080072c9
 8007330:	0800729f 	.word	0x0800729f
 8007334:	080072c9 	.word	0x080072c9
 8007338:	080072c9 	.word	0x080072c9
 800733c:	080072c9 	.word	0x080072c9
 8007340:	080072bb 	.word	0x080072bb
		} else if (!just_check && poller->is_polling) {
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1cd      	bne.n	80072e6 <register_events+0x6a>
 800734a:	f89b 3000 	ldrb.w	r3, [fp]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0c9      	beq.n	80072e6 <register_events+0x6a>
	switch (event->type) {
 8007352:	7b63      	ldrb	r3, [r4, #13]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	3b01      	subs	r3, #1
 800735a:	2b07      	cmp	r3, #7
 800735c:	d848      	bhi.n	80073f0 <register_events+0x174>
 800735e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007362:	00cb      	.short	0x00cb
 8007364:	00470008 	.word	0x00470008
 8007368:	0047006d 	.word	0x0047006d
 800736c:	00470047 	.word	0x00470047
 8007370:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f103 0210 	add.w	r2, r3, #16
 800737a:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800737c:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800737e:	429a      	cmp	r2, r3
 8007380:	d02f      	beq.n	80073e2 <register_events+0x166>
 8007382:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d02c      	beq.n	80073e2 <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007388:	6898      	ldr	r0, [r3, #8]
 800738a:	f003 fdeb 	bl	800af64 <poller_thread>
 800738e:	9005      	str	r0, [sp, #20]
 8007390:	4658      	mov	r0, fp
 8007392:	f003 fde7 	bl	800af64 <poller_thread>
 8007396:	4601      	mov	r1, r0
 8007398:	9003      	str	r0, [sp, #12]
 800739a:	9805      	ldr	r0, [sp, #20]
 800739c:	f003 fb98 	bl	800aad0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80073a0:	2800      	cmp	r0, #0
 80073a2:	dc1e      	bgt.n	80073e2 <register_events+0x166>
	return list->head == list;
 80073a4:	9b04      	ldr	r3, [sp, #16]
 80073a6:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80073a8:	9a02      	ldr	r2, [sp, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d030      	beq.n	8007410 <register_events+0x194>
 80073ae:	9404      	str	r4, [sp, #16]
 80073b0:	9505      	str	r5, [sp, #20]
 80073b2:	9d02      	ldr	r5, [sp, #8]
 80073b4:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	d030      	beq.n	800741c <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 80073ba:	68a0      	ldr	r0, [r4, #8]
 80073bc:	f003 fdd2 	bl	800af64 <poller_thread>
 80073c0:	4601      	mov	r1, r0
 80073c2:	9803      	ldr	r0, [sp, #12]
 80073c4:	f003 fb84 	bl	800aad0 <z_sched_prio_cmp>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dc17      	bgt.n	80073fc <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d028      	beq.n	8007422 <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 80073d0:	686b      	ldr	r3, [r5, #4]
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d02f      	beq.n	8007436 <register_events+0x1ba>
 80073d6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d1ec      	bne.n	80073b6 <register_events+0x13a>
 80073dc:	9c04      	ldr	r4, [sp, #16]
 80073de:	9d05      	ldr	r5, [sp, #20]
 80073e0:	e021      	b.n	8007426 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 80073e2:	9a02      	ldr	r2, [sp, #8]
 80073e4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80073e6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80073ea:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80073ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80073ee:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 80073f0:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	3301      	adds	r3, #1
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	e774      	b.n	80072e6 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 80073fc:	9d05      	ldr	r5, [sp, #20]
 80073fe:	4622      	mov	r2, r4
 8007400:	9c04      	ldr	r4, [sp, #16]
 8007402:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007404:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007406:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800740a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800740c:	6054      	str	r4, [r2, #4]
			return;
 800740e:	e7ef      	b.n	80073f0 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007410:	2300      	movs	r3, #0
 8007412:	9404      	str	r4, [sp, #16]
 8007414:	9505      	str	r5, [sp, #20]
 8007416:	9d02      	ldr	r5, [sp, #8]
 8007418:	461c      	mov	r4, r3
 800741a:	e7cc      	b.n	80073b6 <register_events+0x13a>
 800741c:	9c04      	ldr	r4, [sp, #16]
 800741e:	9d05      	ldr	r5, [sp, #20]
 8007420:	e001      	b.n	8007426 <register_events+0x1aa>
 8007422:	9c04      	ldr	r4, [sp, #16]
 8007424:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007426:	9a02      	ldr	r2, [sp, #8]
 8007428:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800742a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800742e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007430:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007432:	6054      	str	r4, [r2, #4]
}
 8007434:	e7dc      	b.n	80073f0 <register_events+0x174>
 8007436:	9c04      	ldr	r4, [sp, #16]
 8007438:	9d05      	ldr	r5, [sp, #20]
 800743a:	e7f4      	b.n	8007426 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	f103 0214 	add.w	r2, r3, #20
 8007444:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8007446:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8007448:	429a      	cmp	r2, r3
 800744a:	d02d      	beq.n	80074a8 <register_events+0x22c>
 800744c:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800744e:	b35b      	cbz	r3, 80074a8 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007450:	6898      	ldr	r0, [r3, #8]
 8007452:	f003 fd87 	bl	800af64 <poller_thread>
 8007456:	9005      	str	r0, [sp, #20]
 8007458:	4658      	mov	r0, fp
 800745a:	f003 fd83 	bl	800af64 <poller_thread>
 800745e:	4601      	mov	r1, r0
 8007460:	9003      	str	r0, [sp, #12]
 8007462:	9805      	ldr	r0, [sp, #20]
 8007464:	f003 fb34 	bl	800aad0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8007468:	2800      	cmp	r0, #0
 800746a:	dc1d      	bgt.n	80074a8 <register_events+0x22c>
	return list->head == list;
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007470:	9a02      	ldr	r2, [sp, #8]
 8007472:	429a      	cmp	r2, r3
 8007474:	d02a      	beq.n	80074cc <register_events+0x250>
 8007476:	9404      	str	r4, [sp, #16]
 8007478:	9505      	str	r5, [sp, #20]
 800747a:	9d02      	ldr	r5, [sp, #8]
 800747c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800747e:	2c00      	cmp	r4, #0
 8007480:	d02a      	beq.n	80074d8 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 8007482:	68a0      	ldr	r0, [r4, #8]
 8007484:	f003 fd6e 	bl	800af64 <poller_thread>
 8007488:	4601      	mov	r1, r0
 800748a:	9803      	ldr	r0, [sp, #12]
 800748c:	f003 fb20 	bl	800aad0 <z_sched_prio_cmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	dc11      	bgt.n	80074b8 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007494:	b31c      	cbz	r4, 80074de <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 8007496:	686b      	ldr	r3, [r5, #4]
 8007498:	429c      	cmp	r4, r3
 800749a:	d02a      	beq.n	80074f2 <register_events+0x276>
 800749c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d1ed      	bne.n	800747e <register_events+0x202>
 80074a2:	9c04      	ldr	r4, [sp, #16]
 80074a4:	9d05      	ldr	r5, [sp, #20]
 80074a6:	e01c      	b.n	80074e2 <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 80074a8:	9a02      	ldr	r2, [sp, #8]
 80074aa:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80074ac:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80074b0:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80074b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80074b4:	6054      	str	r4, [r2, #4]
		return;
 80074b6:	e79b      	b.n	80073f0 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80074b8:	9d05      	ldr	r5, [sp, #20]
 80074ba:	4622      	mov	r2, r4
 80074bc:	9c04      	ldr	r4, [sp, #16]
 80074be:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80074c0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80074c2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80074c6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80074c8:	6054      	str	r4, [r2, #4]
			return;
 80074ca:	e791      	b.n	80073f0 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80074cc:	2300      	movs	r3, #0
 80074ce:	9404      	str	r4, [sp, #16]
 80074d0:	9505      	str	r5, [sp, #20]
 80074d2:	9d02      	ldr	r5, [sp, #8]
 80074d4:	461c      	mov	r4, r3
 80074d6:	e7d2      	b.n	800747e <register_events+0x202>
 80074d8:	9c04      	ldr	r4, [sp, #16]
 80074da:	9d05      	ldr	r5, [sp, #20]
 80074dc:	e001      	b.n	80074e2 <register_events+0x266>
 80074de:	9c04      	ldr	r4, [sp, #16]
 80074e0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80074e2:	9a02      	ldr	r2, [sp, #8]
 80074e4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80074e6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80074ea:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80074ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80074ee:	6054      	str	r4, [r2, #4]
}
 80074f0:	e77e      	b.n	80073f0 <register_events+0x174>
 80074f2:	9c04      	ldr	r4, [sp, #16]
 80074f4:	9d05      	ldr	r5, [sp, #20]
 80074f6:	e7f4      	b.n	80074e2 <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80074fc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80074fe:	429a      	cmp	r2, r3
 8007500:	d02c      	beq.n	800755c <register_events+0x2e0>
 8007502:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8007504:	b353      	cbz	r3, 800755c <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8007506:	6898      	ldr	r0, [r3, #8]
 8007508:	f003 fd2c 	bl	800af64 <poller_thread>
 800750c:	9004      	str	r0, [sp, #16]
 800750e:	4658      	mov	r0, fp
 8007510:	f003 fd28 	bl	800af64 <poller_thread>
 8007514:	4601      	mov	r1, r0
 8007516:	9003      	str	r0, [sp, #12]
 8007518:	9804      	ldr	r0, [sp, #16]
 800751a:	f003 fad9 	bl	800aad0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800751e:	2800      	cmp	r0, #0
 8007520:	dc1c      	bgt.n	800755c <register_events+0x2e0>
	return list->head == list;
 8007522:	9b02      	ldr	r3, [sp, #8]
 8007524:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007526:	4293      	cmp	r3, r2
 8007528:	d02a      	beq.n	8007580 <register_events+0x304>
 800752a:	9404      	str	r4, [sp, #16]
 800752c:	9505      	str	r5, [sp, #20]
 800752e:	9d02      	ldr	r5, [sp, #8]
 8007530:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007532:	2c00      	cmp	r4, #0
 8007534:	d02a      	beq.n	800758c <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 8007536:	68a0      	ldr	r0, [r4, #8]
 8007538:	f003 fd14 	bl	800af64 <poller_thread>
 800753c:	4601      	mov	r1, r0
 800753e:	9803      	ldr	r0, [sp, #12]
 8007540:	f003 fac6 	bl	800aad0 <z_sched_prio_cmp>
 8007544:	2800      	cmp	r0, #0
 8007546:	dc11      	bgt.n	800756c <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007548:	b31c      	cbz	r4, 8007592 <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800754a:	686b      	ldr	r3, [r5, #4]
 800754c:	429c      	cmp	r4, r3
 800754e:	d02a      	beq.n	80075a6 <register_events+0x32a>
 8007550:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007552:	2c00      	cmp	r4, #0
 8007554:	d1ed      	bne.n	8007532 <register_events+0x2b6>
 8007556:	9c04      	ldr	r4, [sp, #16]
 8007558:	9d05      	ldr	r5, [sp, #20]
 800755a:	e01c      	b.n	8007596 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800755c:	9a02      	ldr	r2, [sp, #8]
 800755e:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007560:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007564:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007566:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007568:	6054      	str	r4, [r2, #4]
		return;
 800756a:	e741      	b.n	80073f0 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800756c:	9d05      	ldr	r5, [sp, #20]
 800756e:	4622      	mov	r2, r4
 8007570:	9c04      	ldr	r4, [sp, #16]
 8007572:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007574:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007576:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800757a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800757c:	6054      	str	r4, [r2, #4]
			return;
 800757e:	e737      	b.n	80073f0 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8007580:	2300      	movs	r3, #0
 8007582:	9404      	str	r4, [sp, #16]
 8007584:	9505      	str	r5, [sp, #20]
 8007586:	9d02      	ldr	r5, [sp, #8]
 8007588:	461c      	mov	r4, r3
 800758a:	e7d2      	b.n	8007532 <register_events+0x2b6>
 800758c:	9c04      	ldr	r4, [sp, #16]
 800758e:	9d05      	ldr	r5, [sp, #20]
 8007590:	e001      	b.n	8007596 <register_events+0x31a>
 8007592:	9c04      	ldr	r4, [sp, #16]
 8007594:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007596:	9a02      	ldr	r2, [sp, #8]
 8007598:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800759a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800759e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80075a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80075a2:	6054      	str	r4, [r2, #4]
}
 80075a4:	e724      	b.n	80073f0 <register_events+0x174>
 80075a6:	9c04      	ldr	r4, [sp, #16]
 80075a8:	9d05      	ldr	r5, [sp, #20]
 80075aa:	e7f4      	b.n	8007596 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80075b4:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d02d      	beq.n	8007618 <register_events+0x39c>
 80075bc:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80075be:	b35b      	cbz	r3, 8007618 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80075c0:	6898      	ldr	r0, [r3, #8]
 80075c2:	f003 fccf 	bl	800af64 <poller_thread>
 80075c6:	9005      	str	r0, [sp, #20]
 80075c8:	4658      	mov	r0, fp
 80075ca:	f003 fccb 	bl	800af64 <poller_thread>
 80075ce:	4601      	mov	r1, r0
 80075d0:	9003      	str	r0, [sp, #12]
 80075d2:	9805      	ldr	r0, [sp, #20]
 80075d4:	f003 fa7c 	bl	800aad0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80075d8:	2800      	cmp	r0, #0
 80075da:	dc1d      	bgt.n	8007618 <register_events+0x39c>
	return list->head == list;
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80075e0:	9a02      	ldr	r2, [sp, #8]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d02a      	beq.n	800763c <register_events+0x3c0>
 80075e6:	9404      	str	r4, [sp, #16]
 80075e8:	9505      	str	r5, [sp, #20]
 80075ea:	9d02      	ldr	r5, [sp, #8]
 80075ec:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80075ee:	2c00      	cmp	r4, #0
 80075f0:	d02a      	beq.n	8007648 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 80075f2:	68a0      	ldr	r0, [r4, #8]
 80075f4:	f003 fcb6 	bl	800af64 <poller_thread>
 80075f8:	4601      	mov	r1, r0
 80075fa:	9803      	ldr	r0, [sp, #12]
 80075fc:	f003 fa68 	bl	800aad0 <z_sched_prio_cmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	dc11      	bgt.n	8007628 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8007604:	b31c      	cbz	r4, 800764e <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 8007606:	686b      	ldr	r3, [r5, #4]
 8007608:	429c      	cmp	r4, r3
 800760a:	d02a      	beq.n	8007662 <register_events+0x3e6>
 800760c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800760e:	2c00      	cmp	r4, #0
 8007610:	d1ed      	bne.n	80075ee <register_events+0x372>
 8007612:	9c04      	ldr	r4, [sp, #16]
 8007614:	9d05      	ldr	r5, [sp, #20]
 8007616:	e01c      	b.n	8007652 <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 8007618:	9a02      	ldr	r2, [sp, #8]
 800761a:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800761c:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8007620:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8007622:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8007624:	6054      	str	r4, [r2, #4]
		return;
 8007626:	e6e3      	b.n	80073f0 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8007628:	9d05      	ldr	r5, [sp, #20]
 800762a:	4622      	mov	r2, r4
 800762c:	9c04      	ldr	r4, [sp, #16]
 800762e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8007630:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8007632:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8007636:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8007638:	6054      	str	r4, [r2, #4]
			return;
 800763a:	e6d9      	b.n	80073f0 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800763c:	2300      	movs	r3, #0
 800763e:	9404      	str	r4, [sp, #16]
 8007640:	9505      	str	r5, [sp, #20]
 8007642:	9d02      	ldr	r5, [sp, #8]
 8007644:	461c      	mov	r4, r3
 8007646:	e7d2      	b.n	80075ee <register_events+0x372>
 8007648:	9c04      	ldr	r4, [sp, #16]
 800764a:	9d05      	ldr	r5, [sp, #20]
 800764c:	e001      	b.n	8007652 <register_events+0x3d6>
 800764e:	9c04      	ldr	r4, [sp, #16]
 8007650:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8007652:	9a02      	ldr	r2, [sp, #8]
 8007654:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8007656:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800765a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800765c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800765e:	6054      	str	r4, [r2, #4]
}
 8007660:	e6c6      	b.n	80073f0 <register_events+0x174>
 8007662:	9c04      	ldr	r4, [sp, #16]
 8007664:	9d05      	ldr	r5, [sp, #20]
 8007666:	e7f4      	b.n	8007652 <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 8007668:	9801      	ldr	r0, [sp, #4]
 800766a:	b007      	add	sp, #28
 800766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007670 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8007670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	4605      	mov	r5, r0
 8007678:	4690      	mov	r8, r2
 800767a:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800767c:	4b4f      	ldr	r3, [pc, #316]	; (80077bc <z_impl_k_poll+0x14c>)
 800767e:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 8007680:	2301      	movs	r3, #1
 8007682:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 8007686:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800768a:	ea57 0302 	orrs.w	r3, r7, r2
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	f106 0260 	add.w	r2, r6, #96	; 0x60
 8007698:	f7ff fdf0 	bl	800727c <register_events>
 800769c:	4604      	mov	r4, r0
 800769e:	f04f 0310 	mov.w	r3, #16
 80076a2:	f3ef 8111 	mrs	r1, BASEPRI
 80076a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80076aa:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 80076ae:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 80076b2:	b1b3      	cbz	r3, 80076e2 <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80076ba:	ea57 0308 	orrs.w	r3, r7, r8
 80076be:	d043      	beq.n	8007748 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 80076c0:	f8cd 8000 	str.w	r8, [sp]
 80076c4:	9701      	str	r7, [sp, #4]
 80076c6:	4a3e      	ldr	r2, [pc, #248]	; (80077c0 <z_impl_k_poll+0x150>)
 80076c8:	483e      	ldr	r0, [pc, #248]	; (80077c4 <z_impl_k_poll+0x154>)
 80076ca:	f7ff f977 	bl	80069bc <z_pend_curr>
 80076ce:	f04f 0310 	mov.w	r3, #16
 80076d2:	f3ef 8611 	mrs	r6, BASEPRI
 80076d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	46b4      	mov	ip, r6
	while (num_events--) {
 80076e0:	e04c      	b.n	800777c <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 80076e2:	460e      	mov	r6, r1
	while (num_events--) {
 80076e4:	e00c      	b.n	8007700 <z_impl_k_poll+0x90>
	__asm__ volatile(
 80076e6:	f386 8811 	msr	BASEPRI, r6
 80076ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80076ee:	f04f 0310 	mov.w	r3, #16
 80076f2:	f3ef 8611 	mrs	r6, BASEPRI
 80076f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	4604      	mov	r4, r0
 8007700:	1e60      	subs	r0, r4, #1
 8007702:	b1dc      	cbz	r4, 800773c <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 8007704:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007708:	009f      	lsls	r7, r3, #2
 800770a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8007712:	7b5a      	ldrb	r2, [r3, #13]
 8007714:	f002 021f 	and.w	r2, r2, #31
 8007718:	2a08      	cmp	r2, #8
 800771a:	d8e4      	bhi.n	80076e6 <z_impl_k_poll+0x76>
 800771c:	2401      	movs	r4, #1
 800771e:	fa04 f202 	lsl.w	r2, r4, r2
 8007722:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8007726:	d0de      	beq.n	80076e6 <z_impl_k_poll+0x76>
	return node->next != NULL;
 8007728:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800772a:	2a00      	cmp	r2, #0
 800772c:	d0db      	beq.n	80076e6 <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800772e:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8007730:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 8007732:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 8007734:	2200      	movs	r2, #0
 8007736:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 8007738:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800773a:	e7d4      	b.n	80076e6 <z_impl_k_poll+0x76>
	__asm__ volatile(
 800773c:	f381 8811 	msr	BASEPRI, r1
 8007740:	f3bf 8f6f 	isb	sy
		return 0;
 8007744:	4620      	mov	r0, r4
 8007746:	e036      	b.n	80077b6 <z_impl_k_poll+0x146>
 8007748:	f381 8811 	msr	BASEPRI, r1
 800774c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8007750:	f06f 000a 	mvn.w	r0, #10
 8007754:	e02f      	b.n	80077b6 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 8007756:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 8007758:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800775a:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800775c:	2200      	movs	r2, #0
 800775e:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	f38c 8811 	msr	BASEPRI, ip
 8007766:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800776a:	f04f 0310 	mov.w	r3, #16
 800776e:	f3ef 8c11 	mrs	ip, BASEPRI
 8007772:	f383 8812 	msr	BASEPRI_MAX, r3
 8007776:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800777a:	4674      	mov	r4, lr
 800777c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8007780:	b1ac      	cbz	r4, 80077ae <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 8007782:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8007786:	009c      	lsls	r4, r3, #2
 8007788:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800778c:	2200      	movs	r2, #0
 800778e:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8007790:	7b5a      	ldrb	r2, [r3, #13]
 8007792:	f002 021f 	and.w	r2, r2, #31
 8007796:	2a08      	cmp	r2, #8
 8007798:	d8e3      	bhi.n	8007762 <z_impl_k_poll+0xf2>
 800779a:	2101      	movs	r1, #1
 800779c:	fa01 f202 	lsl.w	r2, r1, r2
 80077a0:	f412 7f8b 	tst.w	r2, #278	; 0x116
 80077a4:	d0dd      	beq.n	8007762 <z_impl_k_poll+0xf2>
	return node->next != NULL;
 80077a6:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d1d4      	bne.n	8007756 <z_impl_k_poll+0xe6>
 80077ac:	e7d9      	b.n	8007762 <z_impl_k_poll+0xf2>
	__asm__ volatile(
 80077ae:	f386 8811 	msr	BASEPRI, r6
 80077b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 80077b6:	b002      	add	sp, #8
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077bc:	20000bac 	.word	0x20000bac
 80077c0:	200000b8 	.word	0x200000b8
 80077c4:	20000bf8 	.word	0x20000bf8

080077c8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4603      	mov	r3, r0
	__asm__ volatile(
 80077cc:	f04f 0210 	mov.w	r2, #16
 80077d0:	f3ef 8511 	mrs	r5, BASEPRI
 80077d4:	f382 8812 	msr	BASEPRI_MAX, r2
 80077d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 80077dc:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 80077de:	2201      	movs	r2, #1
 80077e0:	6082      	str	r2, [r0, #8]
	return list->head == list;
 80077e2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d011      	beq.n	800780c <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 80077e8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 80077ea:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 80077ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80077ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 80077f4:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 80077f6:	b148      	cbz	r0, 800780c <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 80077f8:	2101      	movs	r1, #1
 80077fa:	f003 fbff 	bl	800affc <signal_poll_event>
 80077fe:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 8007800:	4629      	mov	r1, r5
 8007802:	4805      	ldr	r0, [pc, #20]	; (8007818 <z_impl_k_poll_signal_raise+0x50>)
 8007804:	f7fe ff6a 	bl	80066dc <z_reschedule>
	return rc;
}
 8007808:	4620      	mov	r0, r4
 800780a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800780c:	f385 8811 	msr	BASEPRI, r5
 8007810:	f3bf 8f6f 	isb	sy
		return 0;
 8007814:	2400      	movs	r4, #0
 8007816:	e7f7      	b.n	8007808 <z_impl_k_poll_signal_raise+0x40>
 8007818:	20000bf8 	.word	0x20000bf8

0800781c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8007822:	f003 f825 	bl	800a870 <k_is_in_isr>
 8007826:	b940      	cbnz	r0, 800783a <z_thread_aligned_alloc+0x1e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <z_thread_aligned_alloc+0x24>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
 800782e:	b118      	cbz	r0, 8007838 <z_thread_aligned_alloc+0x1c>
		ret = z_heap_aligned_alloc(heap, align, size);
 8007830:	462a      	mov	r2, r5
 8007832:	4621      	mov	r1, r4
 8007834:	f003 fc14 	bl	800b060 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8007838:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
 800783a:	2000      	movs	r0, #0
	return ret;
 800783c:	e7fc      	b.n	8007838 <z_thread_aligned_alloc+0x1c>
 800783e:	bf00      	nop
 8007840:	20000bac 	.word	0x20000bac

08007844 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8007844:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8007846:	4a03      	ldr	r2, [pc, #12]	; (8007854 <boot_banner+0x10>)
 8007848:	4903      	ldr	r1, [pc, #12]	; (8007858 <boot_banner+0x14>)
 800784a:	4804      	ldr	r0, [pc, #16]	; (800785c <boot_banner+0x18>)
 800784c:	f001 fc19 	bl	8009082 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8007850:	bd08      	pop	{r3, pc}
 8007852:	bf00      	nop
 8007854:	0800be04 	.word	0x0800be04
 8007858:	0800c124 	.word	0x0800c124
 800785c:	0800c134 	.word	0x0800c134

08007860 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8007860:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8007862:	4c06      	ldr	r4, [pc, #24]	; (800787c <statics_init+0x1c>)
 8007864:	e005      	b.n	8007872 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8007866:	68a2      	ldr	r2, [r4, #8]
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4620      	mov	r0, r4
 800786c:	f003 fc13 	bl	800b096 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8007870:	3418      	adds	r4, #24
 8007872:	4b03      	ldr	r3, [pc, #12]	; (8007880 <statics_init+0x20>)
 8007874:	429c      	cmp	r4, r3
 8007876:	d3f6      	bcc.n	8007866 <statics_init+0x6>
		}
	}
	return 0;
}
 8007878:	2000      	movs	r0, #0
 800787a:	bd10      	pop	{r4, pc}
 800787c:	20000360 	.word	0x20000360
 8007880:	20000360 	.word	0x20000360

08007884 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8007884:	b510      	push	{r4, lr}
 8007886:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <k_sys_work_q_init+0x28>)
 800788a:	9302      	str	r3, [sp, #8]
 800788c:	2400      	movs	r4, #0
 800788e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8007892:	ab02      	add	r3, sp, #8
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800789e:	4904      	ldr	r1, [pc, #16]	; (80078b0 <k_sys_work_q_init+0x2c>)
 80078a0:	4804      	ldr	r0, [pc, #16]	; (80078b4 <k_sys_work_q_init+0x30>)
 80078a2:	f7fe fe89 	bl	80065b8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 80078a6:	4620      	mov	r0, r4
 80078a8:	b004      	add	sp, #16
 80078aa:	bd10      	pop	{r4, pc}
 80078ac:	0800c15c 	.word	0x0800c15c
 80078b0:	20002dc0 	.word	0x20002dc0
 80078b4:	20000610 	.word	0x20000610

080078b8 <malloc>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <malloc+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f000 b84b 	b.w	8007958 <_malloc_r>
 80078c2:	bf00      	nop
 80078c4:	200000c0 	.word	0x200000c0

080078c8 <_free_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4605      	mov	r5, r0
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d040      	beq.n	8007952 <_free_r+0x8a>
 80078d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d4:	1f0c      	subs	r4, r1, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bfb8      	it	lt
 80078da:	18e4      	addlt	r4, r4, r3
 80078dc:	f000 fbfc 	bl	80080d8 <__malloc_lock>
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <_free_r+0x8c>)
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	b933      	cbnz	r3, 80078f4 <_free_r+0x2c>
 80078e6:	6063      	str	r3, [r4, #4]
 80078e8:	6014      	str	r4, [r2, #0]
 80078ea:	4628      	mov	r0, r5
 80078ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f0:	f000 bbf8 	b.w	80080e4 <__malloc_unlock>
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d908      	bls.n	800790a <_free_r+0x42>
 80078f8:	6820      	ldr	r0, [r4, #0]
 80078fa:	1821      	adds	r1, r4, r0
 80078fc:	428b      	cmp	r3, r1
 80078fe:	bf01      	itttt	eq
 8007900:	6819      	ldreq	r1, [r3, #0]
 8007902:	685b      	ldreq	r3, [r3, #4]
 8007904:	1809      	addeq	r1, r1, r0
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	e7ed      	b.n	80078e6 <_free_r+0x1e>
 800790a:	461a      	mov	r2, r3
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	b10b      	cbz	r3, 8007914 <_free_r+0x4c>
 8007910:	42a3      	cmp	r3, r4
 8007912:	d9fa      	bls.n	800790a <_free_r+0x42>
 8007914:	6811      	ldr	r1, [r2, #0]
 8007916:	1850      	adds	r0, r2, r1
 8007918:	42a0      	cmp	r0, r4
 800791a:	d10b      	bne.n	8007934 <_free_r+0x6c>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	4401      	add	r1, r0
 8007920:	1850      	adds	r0, r2, r1
 8007922:	4283      	cmp	r3, r0
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	d1e0      	bne.n	80078ea <_free_r+0x22>
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4401      	add	r1, r0
 800792e:	6011      	str	r1, [r2, #0]
 8007930:	6053      	str	r3, [r2, #4]
 8007932:	e7da      	b.n	80078ea <_free_r+0x22>
 8007934:	d902      	bls.n	800793c <_free_r+0x74>
 8007936:	230c      	movs	r3, #12
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	e7d6      	b.n	80078ea <_free_r+0x22>
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	1821      	adds	r1, r4, r0
 8007940:	428b      	cmp	r3, r1
 8007942:	bf01      	itttt	eq
 8007944:	6819      	ldreq	r1, [r3, #0]
 8007946:	685b      	ldreq	r3, [r3, #4]
 8007948:	1809      	addeq	r1, r1, r0
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6063      	str	r3, [r4, #4]
 800794e:	6054      	str	r4, [r2, #4]
 8007950:	e7cb      	b.n	80078ea <_free_r+0x22>
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000bfc 	.word	0x20000bfc

08007958 <_malloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	1ccd      	adds	r5, r1, #3
 800795c:	f025 0503 	bic.w	r5, r5, #3
 8007960:	3508      	adds	r5, #8
 8007962:	2d0c      	cmp	r5, #12
 8007964:	bf38      	it	cc
 8007966:	250c      	movcc	r5, #12
 8007968:	2d00      	cmp	r5, #0
 800796a:	4606      	mov	r6, r0
 800796c:	db01      	blt.n	8007972 <_malloc_r+0x1a>
 800796e:	42a9      	cmp	r1, r5
 8007970:	d903      	bls.n	800797a <_malloc_r+0x22>
 8007972:	230c      	movs	r3, #12
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797a:	f000 fbad 	bl	80080d8 <__malloc_lock>
 800797e:	4921      	ldr	r1, [pc, #132]	; (8007a04 <_malloc_r+0xac>)
 8007980:	680a      	ldr	r2, [r1, #0]
 8007982:	4614      	mov	r4, r2
 8007984:	b99c      	cbnz	r4, 80079ae <_malloc_r+0x56>
 8007986:	4f20      	ldr	r7, [pc, #128]	; (8007a08 <_malloc_r+0xb0>)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	b923      	cbnz	r3, 8007996 <_malloc_r+0x3e>
 800798c:	4621      	mov	r1, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f000 fb8e 	bl	80080b0 <_sbrk_r>
 8007994:	6038      	str	r0, [r7, #0]
 8007996:	4629      	mov	r1, r5
 8007998:	4630      	mov	r0, r6
 800799a:	f000 fb89 	bl	80080b0 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d123      	bne.n	80079ea <_malloc_r+0x92>
 80079a2:	230c      	movs	r3, #12
 80079a4:	4630      	mov	r0, r6
 80079a6:	6033      	str	r3, [r6, #0]
 80079a8:	f000 fb9c 	bl	80080e4 <__malloc_unlock>
 80079ac:	e7e3      	b.n	8007976 <_malloc_r+0x1e>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1b5b      	subs	r3, r3, r5
 80079b2:	d417      	bmi.n	80079e4 <_malloc_r+0x8c>
 80079b4:	2b0b      	cmp	r3, #11
 80079b6:	d903      	bls.n	80079c0 <_malloc_r+0x68>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	441c      	add	r4, r3
 80079bc:	6025      	str	r5, [r4, #0]
 80079be:	e004      	b.n	80079ca <_malloc_r+0x72>
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	42a2      	cmp	r2, r4
 80079c4:	bf0c      	ite	eq
 80079c6:	600b      	streq	r3, [r1, #0]
 80079c8:	6053      	strne	r3, [r2, #4]
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 fb8a 	bl	80080e4 <__malloc_unlock>
 80079d0:	f104 000b 	add.w	r0, r4, #11
 80079d4:	1d23      	adds	r3, r4, #4
 80079d6:	f020 0007 	bic.w	r0, r0, #7
 80079da:	1ac2      	subs	r2, r0, r3
 80079dc:	d0cc      	beq.n	8007978 <_malloc_r+0x20>
 80079de:	1a1b      	subs	r3, r3, r0
 80079e0:	50a3      	str	r3, [r4, r2]
 80079e2:	e7c9      	b.n	8007978 <_malloc_r+0x20>
 80079e4:	4622      	mov	r2, r4
 80079e6:	6864      	ldr	r4, [r4, #4]
 80079e8:	e7cc      	b.n	8007984 <_malloc_r+0x2c>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d0e3      	beq.n	80079bc <_malloc_r+0x64>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 fb5a 	bl	80080b0 <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d1dd      	bne.n	80079bc <_malloc_r+0x64>
 8007a00:	e7cf      	b.n	80079a2 <_malloc_r+0x4a>
 8007a02:	bf00      	nop
 8007a04:	20000bfc 	.word	0x20000bfc
 8007a08:	20000c00 	.word	0x20000c00

08007a0c <_printf_float>:
 8007a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	b091      	sub	sp, #68	; 0x44
 8007a12:	460c      	mov	r4, r1
 8007a14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007a18:	4616      	mov	r6, r2
 8007a1a:	461f      	mov	r7, r3
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	f000 fb57 	bl	80080d0 <_localeconv_r>
 8007a22:	6803      	ldr	r3, [r0, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
 8007a28:	f7f9 f989 	bl	8000d3e <strlen>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a30:	f8d8 3000 	ldr.w	r3, [r8]
 8007a34:	900a      	str	r0, [sp, #40]	; 0x28
 8007a36:	3307      	adds	r3, #7
 8007a38:	f023 0307 	bic.w	r3, r3, #7
 8007a3c:	f103 0208 	add.w	r2, r3, #8
 8007a40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a44:	f8d4 b000 	ldr.w	fp, [r4]
 8007a48:	f8c8 2000 	str.w	r2, [r8]
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a54:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007a58:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a62:	4640      	mov	r0, r8
 8007a64:	4b9c      	ldr	r3, [pc, #624]	; (8007cd8 <_printf_float+0x2cc>)
 8007a66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a68:	f7f8 ffce 	bl	8000a08 <__aeabi_dcmpun>
 8007a6c:	bb70      	cbnz	r0, 8007acc <_printf_float+0xc0>
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a72:	4640      	mov	r0, r8
 8007a74:	4b98      	ldr	r3, [pc, #608]	; (8007cd8 <_printf_float+0x2cc>)
 8007a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a78:	f7f8 ffa8 	bl	80009cc <__aeabi_dcmple>
 8007a7c:	bb30      	cbnz	r0, 8007acc <_printf_float+0xc0>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	4640      	mov	r0, r8
 8007a84:	4651      	mov	r1, sl
 8007a86:	f7f8 ff97 	bl	80009b8 <__aeabi_dcmplt>
 8007a8a:	b110      	cbz	r0, 8007a92 <_printf_float+0x86>
 8007a8c:	232d      	movs	r3, #45	; 0x2d
 8007a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a92:	4b92      	ldr	r3, [pc, #584]	; (8007cdc <_printf_float+0x2d0>)
 8007a94:	4892      	ldr	r0, [pc, #584]	; (8007ce0 <_printf_float+0x2d4>)
 8007a96:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a9a:	bf94      	ite	ls
 8007a9c:	4698      	movls	r8, r3
 8007a9e:	4680      	movhi	r8, r0
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	f04f 0a00 	mov.w	sl, #0
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	f02b 0304 	bic.w	r3, fp, #4
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	4633      	mov	r3, r6
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	9700      	str	r7, [sp, #0]
 8007ab6:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ab8:	f003 fbf1 	bl	800b29e <_printf_common>
 8007abc:	3001      	adds	r0, #1
 8007abe:	f040 8090 	bne.w	8007be2 <_printf_float+0x1d6>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac6:	b011      	add	sp, #68	; 0x44
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	4642      	mov	r2, r8
 8007ace:	4653      	mov	r3, sl
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	4651      	mov	r1, sl
 8007ad4:	f7f8 ff98 	bl	8000a08 <__aeabi_dcmpun>
 8007ad8:	b148      	cbz	r0, 8007aee <_printf_float+0xe2>
 8007ada:	f1ba 0f00 	cmp.w	sl, #0
 8007ade:	bfb8      	it	lt
 8007ae0:	232d      	movlt	r3, #45	; 0x2d
 8007ae2:	4880      	ldr	r0, [pc, #512]	; (8007ce4 <_printf_float+0x2d8>)
 8007ae4:	bfb8      	it	lt
 8007ae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007aea:	4b7f      	ldr	r3, [pc, #508]	; (8007ce8 <_printf_float+0x2dc>)
 8007aec:	e7d3      	b.n	8007a96 <_printf_float+0x8a>
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	d142      	bne.n	8007b7e <_printf_float+0x172>
 8007af8:	2306      	movs	r3, #6
 8007afa:	6063      	str	r3, [r4, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	9206      	str	r2, [sp, #24]
 8007b00:	aa0e      	add	r2, sp, #56	; 0x38
 8007b02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007b06:	aa0d      	add	r2, sp, #52	; 0x34
 8007b08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007b0c:	9203      	str	r2, [sp, #12]
 8007b0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007b12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	4653      	mov	r3, sl
 8007b22:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b24:	f003 fb1e 	bl	800b164 <__cvt>
 8007b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	2947      	cmp	r1, #71	; 0x47
 8007b2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b30:	d108      	bne.n	8007b44 <_printf_float+0x138>
 8007b32:	1cc8      	adds	r0, r1, #3
 8007b34:	db02      	blt.n	8007b3c <_printf_float+0x130>
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	dd40      	ble.n	8007bbe <_printf_float+0x1b2>
 8007b3c:	f1a9 0902 	sub.w	r9, r9, #2
 8007b40:	fa5f f989 	uxtb.w	r9, r9
 8007b44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b48:	d81f      	bhi.n	8007b8a <_printf_float+0x17e>
 8007b4a:	464a      	mov	r2, r9
 8007b4c:	3901      	subs	r1, #1
 8007b4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b52:	910d      	str	r1, [sp, #52]	; 0x34
 8007b54:	f003 fb65 	bl	800b222 <__exponent>
 8007b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	1813      	adds	r3, r2, r0
 8007b5e:	2a01      	cmp	r2, #1
 8007b60:	6123      	str	r3, [r4, #16]
 8007b62:	dc02      	bgt.n	8007b6a <_printf_float+0x15e>
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	07d2      	lsls	r2, r2, #31
 8007b68:	d501      	bpl.n	8007b6e <_printf_float+0x162>
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d09b      	beq.n	8007aae <_printf_float+0xa2>
 8007b76:	232d      	movs	r3, #45	; 0x2d
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	e797      	b.n	8007aae <_printf_float+0xa2>
 8007b7e:	2947      	cmp	r1, #71	; 0x47
 8007b80:	d1bc      	bne.n	8007afc <_printf_float+0xf0>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1ba      	bne.n	8007afc <_printf_float+0xf0>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e7b7      	b.n	8007afa <_printf_float+0xee>
 8007b8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b8e:	d118      	bne.n	8007bc2 <_printf_float+0x1b6>
 8007b90:	2900      	cmp	r1, #0
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	dd0b      	ble.n	8007bae <_printf_float+0x1a2>
 8007b96:	6121      	str	r1, [r4, #16]
 8007b98:	b913      	cbnz	r3, 8007ba0 <_printf_float+0x194>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d502      	bpl.n	8007ba6 <_printf_float+0x19a>
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	440b      	add	r3, r1
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	f04f 0a00 	mov.w	sl, #0
 8007baa:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bac:	e7df      	b.n	8007b6e <_printf_float+0x162>
 8007bae:	b913      	cbnz	r3, 8007bb6 <_printf_float+0x1aa>
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	07d2      	lsls	r2, r2, #31
 8007bb4:	d501      	bpl.n	8007bba <_printf_float+0x1ae>
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	e7f4      	b.n	8007ba4 <_printf_float+0x198>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7f2      	b.n	8007ba4 <_printf_float+0x198>
 8007bbe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	db05      	blt.n	8007bd4 <_printf_float+0x1c8>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	6121      	str	r1, [r4, #16]
 8007bcc:	07d8      	lsls	r0, r3, #31
 8007bce:	d5ea      	bpl.n	8007ba6 <_printf_float+0x19a>
 8007bd0:	1c4b      	adds	r3, r1, #1
 8007bd2:	e7e7      	b.n	8007ba4 <_printf_float+0x198>
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	bfcc      	ite	gt
 8007bd8:	2201      	movgt	r2, #1
 8007bda:	f1c1 0202 	rsble	r2, r1, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	e7e0      	b.n	8007ba4 <_printf_float+0x198>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	055a      	lsls	r2, r3, #21
 8007be6:	d407      	bmi.n	8007bf8 <_printf_float+0x1ec>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	4642      	mov	r2, r8
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d12b      	bne.n	8007c4e <_printf_float+0x242>
 8007bf6:	e764      	b.n	8007ac2 <_printf_float+0xb6>
 8007bf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007bfc:	f240 80dd 	bls.w	8007dba <_printf_float+0x3ae>
 8007c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	f7f8 fecc 	bl	80009a4 <__aeabi_dcmpeq>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d033      	beq.n	8007c78 <_printf_float+0x26c>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	4a35      	ldr	r2, [pc, #212]	; (8007cec <_printf_float+0x2e0>)
 8007c18:	47b8      	blx	r7
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f43f af51 	beq.w	8007ac2 <_printf_float+0xb6>
 8007c20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c24:	429a      	cmp	r2, r3
 8007c26:	db02      	blt.n	8007c2e <_printf_float+0x222>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	07d8      	lsls	r0, r3, #31
 8007c2c:	d50f      	bpl.n	8007c4e <_printf_float+0x242>
 8007c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f af42 	beq.w	8007ac2 <_printf_float+0xb6>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	f104 091a 	add.w	r9, r4, #26
 8007c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	4543      	cmp	r3, r8
 8007c4c:	dc09      	bgt.n	8007c62 <_printf_float+0x256>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	079b      	lsls	r3, r3, #30
 8007c52:	f100 8102 	bmi.w	8007e5a <_printf_float+0x44e>
 8007c56:	68e0      	ldr	r0, [r4, #12]
 8007c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	bfb8      	it	lt
 8007c5e:	4618      	movlt	r0, r3
 8007c60:	e731      	b.n	8007ac6 <_printf_float+0xba>
 8007c62:	2301      	movs	r3, #1
 8007c64:	464a      	mov	r2, r9
 8007c66:	4631      	mov	r1, r6
 8007c68:	4628      	mov	r0, r5
 8007c6a:	47b8      	blx	r7
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	f43f af28 	beq.w	8007ac2 <_printf_float+0xb6>
 8007c72:	f108 0801 	add.w	r8, r8, #1
 8007c76:	e7e6      	b.n	8007c46 <_printf_float+0x23a>
 8007c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dc38      	bgt.n	8007cf0 <_printf_float+0x2e4>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	4631      	mov	r1, r6
 8007c82:	4628      	mov	r0, r5
 8007c84:	4a19      	ldr	r2, [pc, #100]	; (8007cec <_printf_float+0x2e0>)
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f43f af1a 	beq.w	8007ac2 <_printf_float+0xb6>
 8007c8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007c92:	4313      	orrs	r3, r2
 8007c94:	d102      	bne.n	8007c9c <_printf_float+0x290>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	07d9      	lsls	r1, r3, #31
 8007c9a:	d5d8      	bpl.n	8007c4e <_printf_float+0x242>
 8007c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af0b 	beq.w	8007ac2 <_printf_float+0xb6>
 8007cac:	f04f 0900 	mov.w	r9, #0
 8007cb0:	f104 0a1a 	add.w	sl, r4, #26
 8007cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb6:	425b      	negs	r3, r3
 8007cb8:	454b      	cmp	r3, r9
 8007cba:	dc01      	bgt.n	8007cc0 <_printf_float+0x2b4>
 8007cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cbe:	e794      	b.n	8007bea <_printf_float+0x1de>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f43f aef9 	beq.w	8007ac2 <_printf_float+0xb6>
 8007cd0:	f109 0901 	add.w	r9, r9, #1
 8007cd4:	e7ee      	b.n	8007cb4 <_printf_float+0x2a8>
 8007cd6:	bf00      	nop
 8007cd8:	7fefffff 	.word	0x7fefffff
 8007cdc:	0800c2d9 	.word	0x0800c2d9
 8007ce0:	0800c2dd 	.word	0x0800c2dd
 8007ce4:	0800c2e5 	.word	0x0800c2e5
 8007ce8:	0800c2e1 	.word	0x0800c2e1
 8007cec:	0800c2e9 	.word	0x0800c2e9
 8007cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	bfa8      	it	ge
 8007cf8:	461a      	movge	r2, r3
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	4691      	mov	r9, r2
 8007cfe:	dc37      	bgt.n	8007d70 <_printf_float+0x364>
 8007d00:	f04f 0b00 	mov.w	fp, #0
 8007d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d08:	f104 021a 	add.w	r2, r4, #26
 8007d0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007d10:	ebaa 0309 	sub.w	r3, sl, r9
 8007d14:	455b      	cmp	r3, fp
 8007d16:	dc33      	bgt.n	8007d80 <_printf_float+0x374>
 8007d18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	db3b      	blt.n	8007d98 <_printf_float+0x38c>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	07da      	lsls	r2, r3, #31
 8007d24:	d438      	bmi.n	8007d98 <_printf_float+0x38c>
 8007d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d2a:	eba3 020a 	sub.w	r2, r3, sl
 8007d2e:	eba3 0901 	sub.w	r9, r3, r1
 8007d32:	4591      	cmp	r9, r2
 8007d34:	bfa8      	it	ge
 8007d36:	4691      	movge	r9, r2
 8007d38:	f1b9 0f00 	cmp.w	r9, #0
 8007d3c:	dc34      	bgt.n	8007da8 <_printf_float+0x39c>
 8007d3e:	f04f 0800 	mov.w	r8, #0
 8007d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d46:	f104 0a1a 	add.w	sl, r4, #26
 8007d4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	eba3 0309 	sub.w	r3, r3, r9
 8007d54:	4543      	cmp	r3, r8
 8007d56:	f77f af7a 	ble.w	8007c4e <_printf_float+0x242>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	f43f aeac 	beq.w	8007ac2 <_printf_float+0xb6>
 8007d6a:	f108 0801 	add.w	r8, r8, #1
 8007d6e:	e7ec      	b.n	8007d4a <_printf_float+0x33e>
 8007d70:	4613      	mov	r3, r2
 8007d72:	4631      	mov	r1, r6
 8007d74:	4642      	mov	r2, r8
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d1c0      	bne.n	8007d00 <_printf_float+0x2f4>
 8007d7e:	e6a0      	b.n	8007ac2 <_printf_float+0xb6>
 8007d80:	2301      	movs	r3, #1
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d88:	47b8      	blx	r7
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	f43f ae99 	beq.w	8007ac2 <_printf_float+0xb6>
 8007d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d92:	f10b 0b01 	add.w	fp, fp, #1
 8007d96:	e7b9      	b.n	8007d0c <_printf_float+0x300>
 8007d98:	4631      	mov	r1, r6
 8007d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	d1bf      	bne.n	8007d26 <_printf_float+0x31a>
 8007da6:	e68c      	b.n	8007ac2 <_printf_float+0xb6>
 8007da8:	464b      	mov	r3, r9
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	eb08 020a 	add.w	r2, r8, sl
 8007db2:	47b8      	blx	r7
 8007db4:	3001      	adds	r0, #1
 8007db6:	d1c2      	bne.n	8007d3e <_printf_float+0x332>
 8007db8:	e683      	b.n	8007ac2 <_printf_float+0xb6>
 8007dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dbc:	2a01      	cmp	r2, #1
 8007dbe:	dc01      	bgt.n	8007dc4 <_printf_float+0x3b8>
 8007dc0:	07db      	lsls	r3, r3, #31
 8007dc2:	d537      	bpl.n	8007e34 <_printf_float+0x428>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f ae77 	beq.w	8007ac2 <_printf_float+0xb6>
 8007dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f ae6f 	beq.w	8007ac2 <_printf_float+0xb6>
 8007de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007de8:	2200      	movs	r2, #0
 8007dea:	2300      	movs	r3, #0
 8007dec:	f7f8 fdda 	bl	80009a4 <__aeabi_dcmpeq>
 8007df0:	b9d8      	cbnz	r0, 8007e2a <_printf_float+0x41e>
 8007df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df4:	f108 0201 	add.w	r2, r8, #1
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b8      	blx	r7
 8007e00:	3001      	adds	r0, #1
 8007e02:	d10e      	bne.n	8007e22 <_printf_float+0x416>
 8007e04:	e65d      	b.n	8007ac2 <_printf_float+0xb6>
 8007e06:	2301      	movs	r3, #1
 8007e08:	464a      	mov	r2, r9
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f ae56 	beq.w	8007ac2 <_printf_float+0xb6>
 8007e16:	f108 0801 	add.w	r8, r8, #1
 8007e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4543      	cmp	r3, r8
 8007e20:	dcf1      	bgt.n	8007e06 <_printf_float+0x3fa>
 8007e22:	4653      	mov	r3, sl
 8007e24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e28:	e6e0      	b.n	8007bec <_printf_float+0x1e0>
 8007e2a:	f04f 0800 	mov.w	r8, #0
 8007e2e:	f104 091a 	add.w	r9, r4, #26
 8007e32:	e7f2      	b.n	8007e1a <_printf_float+0x40e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4642      	mov	r2, r8
 8007e38:	e7df      	b.n	8007dfa <_printf_float+0x3ee>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	464a      	mov	r2, r9
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	f43f ae3c 	beq.w	8007ac2 <_printf_float+0xb6>
 8007e4a:	f108 0801 	add.w	r8, r8, #1
 8007e4e:	68e3      	ldr	r3, [r4, #12]
 8007e50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e52:	1a5b      	subs	r3, r3, r1
 8007e54:	4543      	cmp	r3, r8
 8007e56:	dcf0      	bgt.n	8007e3a <_printf_float+0x42e>
 8007e58:	e6fd      	b.n	8007c56 <_printf_float+0x24a>
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	f104 0919 	add.w	r9, r4, #25
 8007e62:	e7f4      	b.n	8007e4e <_printf_float+0x442>

08007e64 <_printf_i>:
 8007e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	7e0f      	ldrb	r7, [r1, #24]
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	2f78      	cmp	r7, #120	; 0x78
 8007e6e:	4680      	mov	r8, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	469a      	mov	sl, r3
 8007e74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e7a:	d807      	bhi.n	8007e8c <_printf_i+0x28>
 8007e7c:	2f62      	cmp	r7, #98	; 0x62
 8007e7e:	d80a      	bhi.n	8007e96 <_printf_i+0x32>
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	f000 80d9 	beq.w	8008038 <_printf_i+0x1d4>
 8007e86:	2f58      	cmp	r7, #88	; 0x58
 8007e88:	f000 80a4 	beq.w	8007fd4 <_printf_i+0x170>
 8007e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e94:	e03a      	b.n	8007f0c <_printf_i+0xa8>
 8007e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e9a:	2b15      	cmp	r3, #21
 8007e9c:	d8f6      	bhi.n	8007e8c <_printf_i+0x28>
 8007e9e:	a101      	add	r1, pc, #4	; (adr r1, 8007ea4 <_printf_i+0x40>)
 8007ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea4:	08007efd 	.word	0x08007efd
 8007ea8:	08007f11 	.word	0x08007f11
 8007eac:	08007e8d 	.word	0x08007e8d
 8007eb0:	08007e8d 	.word	0x08007e8d
 8007eb4:	08007e8d 	.word	0x08007e8d
 8007eb8:	08007e8d 	.word	0x08007e8d
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007e8d 	.word	0x08007e8d
 8007ec4:	08007e8d 	.word	0x08007e8d
 8007ec8:	08007e8d 	.word	0x08007e8d
 8007ecc:	08007e8d 	.word	0x08007e8d
 8007ed0:	0800801f 	.word	0x0800801f
 8007ed4:	08007f41 	.word	0x08007f41
 8007ed8:	08008001 	.word	0x08008001
 8007edc:	08007e8d 	.word	0x08007e8d
 8007ee0:	08007e8d 	.word	0x08007e8d
 8007ee4:	08008041 	.word	0x08008041
 8007ee8:	08007e8d 	.word	0x08007e8d
 8007eec:	08007f41 	.word	0x08007f41
 8007ef0:	08007e8d 	.word	0x08007e8d
 8007ef4:	08007e8d 	.word	0x08007e8d
 8007ef8:	08008009 	.word	0x08008009
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	1d1a      	adds	r2, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	602a      	str	r2, [r5, #0]
 8007f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0a4      	b.n	800805a <_printf_i+0x1f6>
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	6829      	ldr	r1, [r5, #0]
 8007f14:	0606      	lsls	r6, r0, #24
 8007f16:	f101 0304 	add.w	r3, r1, #4
 8007f1a:	d50a      	bpl.n	8007f32 <_printf_i+0xce>
 8007f1c:	680e      	ldr	r6, [r1, #0]
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	2e00      	cmp	r6, #0
 8007f22:	da03      	bge.n	8007f2c <_printf_i+0xc8>
 8007f24:	232d      	movs	r3, #45	; 0x2d
 8007f26:	4276      	negs	r6, r6
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	485e      	ldr	r0, [pc, #376]	; (80080a8 <_printf_i+0x244>)
 8007f30:	e019      	b.n	8007f66 <_printf_i+0x102>
 8007f32:	680e      	ldr	r6, [r1, #0]
 8007f34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	bf18      	it	ne
 8007f3c:	b236      	sxthne	r6, r6
 8007f3e:	e7ef      	b.n	8007f20 <_printf_i+0xbc>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	1d19      	adds	r1, r3, #4
 8007f46:	6029      	str	r1, [r5, #0]
 8007f48:	0601      	lsls	r1, r0, #24
 8007f4a:	d501      	bpl.n	8007f50 <_printf_i+0xec>
 8007f4c:	681e      	ldr	r6, [r3, #0]
 8007f4e:	e002      	b.n	8007f56 <_printf_i+0xf2>
 8007f50:	0646      	lsls	r6, r0, #25
 8007f52:	d5fb      	bpl.n	8007f4c <_printf_i+0xe8>
 8007f54:	881e      	ldrh	r6, [r3, #0]
 8007f56:	2f6f      	cmp	r7, #111	; 0x6f
 8007f58:	bf0c      	ite	eq
 8007f5a:	2308      	moveq	r3, #8
 8007f5c:	230a      	movne	r3, #10
 8007f5e:	4852      	ldr	r0, [pc, #328]	; (80080a8 <_printf_i+0x244>)
 8007f60:	2100      	movs	r1, #0
 8007f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f66:	6865      	ldr	r5, [r4, #4]
 8007f68:	2d00      	cmp	r5, #0
 8007f6a:	bfa8      	it	ge
 8007f6c:	6821      	ldrge	r1, [r4, #0]
 8007f6e:	60a5      	str	r5, [r4, #8]
 8007f70:	bfa4      	itt	ge
 8007f72:	f021 0104 	bicge.w	r1, r1, #4
 8007f76:	6021      	strge	r1, [r4, #0]
 8007f78:	b90e      	cbnz	r6, 8007f7e <_printf_i+0x11a>
 8007f7a:	2d00      	cmp	r5, #0
 8007f7c:	d04d      	beq.n	800801a <_printf_i+0x1b6>
 8007f7e:	4615      	mov	r5, r2
 8007f80:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f84:	fb03 6711 	mls	r7, r3, r1, r6
 8007f88:	5dc7      	ldrb	r7, [r0, r7]
 8007f8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f8e:	4637      	mov	r7, r6
 8007f90:	42bb      	cmp	r3, r7
 8007f92:	460e      	mov	r6, r1
 8007f94:	d9f4      	bls.n	8007f80 <_printf_i+0x11c>
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d10b      	bne.n	8007fb2 <_printf_i+0x14e>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	07de      	lsls	r6, r3, #31
 8007f9e:	d508      	bpl.n	8007fb2 <_printf_i+0x14e>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	6861      	ldr	r1, [r4, #4]
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	bfde      	ittt	le
 8007fa8:	2330      	movle	r3, #48	; 0x30
 8007faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fb2:	1b52      	subs	r2, r2, r5
 8007fb4:	6122      	str	r2, [r4, #16]
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f8cd a000 	str.w	sl, [sp]
 8007fc0:	aa03      	add	r2, sp, #12
 8007fc2:	f003 f96c 	bl	800b29e <_printf_common>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d14c      	bne.n	8008064 <_printf_i+0x200>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fce:	b004      	add	sp, #16
 8007fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd4:	4834      	ldr	r0, [pc, #208]	; (80080a8 <_printf_i+0x244>)
 8007fd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fda:	6829      	ldr	r1, [r5, #0]
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fe2:	6029      	str	r1, [r5, #0]
 8007fe4:	061d      	lsls	r5, r3, #24
 8007fe6:	d514      	bpl.n	8008012 <_printf_i+0x1ae>
 8007fe8:	07df      	lsls	r7, r3, #31
 8007fea:	bf44      	itt	mi
 8007fec:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff0:	6023      	strmi	r3, [r4, #0]
 8007ff2:	b91e      	cbnz	r6, 8007ffc <_printf_i+0x198>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	f023 0320 	bic.w	r3, r3, #32
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	e7af      	b.n	8007f60 <_printf_i+0xfc>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	f043 0320 	orr.w	r3, r3, #32
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	2378      	movs	r3, #120	; 0x78
 800800a:	4828      	ldr	r0, [pc, #160]	; (80080ac <_printf_i+0x248>)
 800800c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008010:	e7e3      	b.n	8007fda <_printf_i+0x176>
 8008012:	0659      	lsls	r1, r3, #25
 8008014:	bf48      	it	mi
 8008016:	b2b6      	uxthmi	r6, r6
 8008018:	e7e6      	b.n	8007fe8 <_printf_i+0x184>
 800801a:	4615      	mov	r5, r2
 800801c:	e7bb      	b.n	8007f96 <_printf_i+0x132>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	6826      	ldr	r6, [r4, #0]
 8008022:	1d18      	adds	r0, r3, #4
 8008024:	6961      	ldr	r1, [r4, #20]
 8008026:	6028      	str	r0, [r5, #0]
 8008028:	0635      	lsls	r5, r6, #24
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	d501      	bpl.n	8008032 <_printf_i+0x1ce>
 800802e:	6019      	str	r1, [r3, #0]
 8008030:	e002      	b.n	8008038 <_printf_i+0x1d4>
 8008032:	0670      	lsls	r0, r6, #25
 8008034:	d5fb      	bpl.n	800802e <_printf_i+0x1ca>
 8008036:	8019      	strh	r1, [r3, #0]
 8008038:	2300      	movs	r3, #0
 800803a:	4615      	mov	r5, r2
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	e7ba      	b.n	8007fb6 <_printf_i+0x152>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	2100      	movs	r1, #0
 8008044:	1d1a      	adds	r2, r3, #4
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	681d      	ldr	r5, [r3, #0]
 800804a:	6862      	ldr	r2, [r4, #4]
 800804c:	4628      	mov	r0, r5
 800804e:	f003 fa2d 	bl	800b4ac <memchr>
 8008052:	b108      	cbz	r0, 8008058 <_printf_i+0x1f4>
 8008054:	1b40      	subs	r0, r0, r5
 8008056:	6060      	str	r0, [r4, #4]
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	2300      	movs	r3, #0
 800805e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008062:	e7a8      	b.n	8007fb6 <_printf_i+0x152>
 8008064:	462a      	mov	r2, r5
 8008066:	4649      	mov	r1, r9
 8008068:	4640      	mov	r0, r8
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	47d0      	blx	sl
 800806e:	3001      	adds	r0, #1
 8008070:	d0ab      	beq.n	8007fca <_printf_i+0x166>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	079b      	lsls	r3, r3, #30
 8008076:	d413      	bmi.n	80080a0 <_printf_i+0x23c>
 8008078:	68e0      	ldr	r0, [r4, #12]
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	4298      	cmp	r0, r3
 800807e:	bfb8      	it	lt
 8008080:	4618      	movlt	r0, r3
 8008082:	e7a4      	b.n	8007fce <_printf_i+0x16a>
 8008084:	2301      	movs	r3, #1
 8008086:	4632      	mov	r2, r6
 8008088:	4649      	mov	r1, r9
 800808a:	4640      	mov	r0, r8
 800808c:	47d0      	blx	sl
 800808e:	3001      	adds	r0, #1
 8008090:	d09b      	beq.n	8007fca <_printf_i+0x166>
 8008092:	3501      	adds	r5, #1
 8008094:	68e3      	ldr	r3, [r4, #12]
 8008096:	9903      	ldr	r1, [sp, #12]
 8008098:	1a5b      	subs	r3, r3, r1
 800809a:	42ab      	cmp	r3, r5
 800809c:	dcf2      	bgt.n	8008084 <_printf_i+0x220>
 800809e:	e7eb      	b.n	8008078 <_printf_i+0x214>
 80080a0:	2500      	movs	r5, #0
 80080a2:	f104 0619 	add.w	r6, r4, #25
 80080a6:	e7f5      	b.n	8008094 <_printf_i+0x230>
 80080a8:	0800c2eb 	.word	0x0800c2eb
 80080ac:	0800c2fc 	.word	0x0800c2fc

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d05      	ldr	r5, [pc, #20]	; (80080cc <_sbrk_r+0x1c>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7fa ff34 	bl	8002f28 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20000c04 	.word	0x20000c04

080080d0 <_localeconv_r>:
 80080d0:	4800      	ldr	r0, [pc, #0]	; (80080d4 <_localeconv_r+0x4>)
 80080d2:	4770      	bx	lr
 80080d4:	20000214 	.word	0x20000214

080080d8 <__malloc_lock>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__malloc_lock+0x8>)
 80080da:	f001 bbd3 	b.w	8009884 <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	20000360 	.word	0x20000360

080080e4 <__malloc_unlock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__malloc_unlock+0x8>)
 80080e6:	f001 bbd5 	b.w	8009894 <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	20000360 	.word	0x20000360

080080f0 <_Balloc>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	b976      	cbnz	r6, 8008118 <_Balloc+0x28>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f7ff fbdc 	bl	80078b8 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	6260      	str	r0, [r4, #36]	; 0x24
 8008104:	b920      	cbnz	r0, 8008110 <_Balloc+0x20>
 8008106:	2166      	movs	r1, #102	; 0x66
 8008108:	4b17      	ldr	r3, [pc, #92]	; (8008168 <_Balloc+0x78>)
 800810a:	4818      	ldr	r0, [pc, #96]	; (800816c <_Balloc+0x7c>)
 800810c:	f000 fb08 	bl	8008720 <__assert_func>
 8008110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008114:	6006      	str	r6, [r0, #0]
 8008116:	60c6      	str	r6, [r0, #12]
 8008118:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800811a:	68f3      	ldr	r3, [r6, #12]
 800811c:	b183      	cbz	r3, 8008140 <_Balloc+0x50>
 800811e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008126:	b9b8      	cbnz	r0, 8008158 <_Balloc+0x68>
 8008128:	2101      	movs	r1, #1
 800812a:	fa01 f605 	lsl.w	r6, r1, r5
 800812e:	1d72      	adds	r2, r6, #5
 8008130:	4620      	mov	r0, r4
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	f003 fa30 	bl	800b598 <_calloc_r>
 8008138:	b160      	cbz	r0, 8008154 <_Balloc+0x64>
 800813a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800813e:	e00e      	b.n	800815e <_Balloc+0x6e>
 8008140:	2221      	movs	r2, #33	; 0x21
 8008142:	2104      	movs	r1, #4
 8008144:	4620      	mov	r0, r4
 8008146:	f003 fa27 	bl	800b598 <_calloc_r>
 800814a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814c:	60f0      	str	r0, [r6, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e4      	bne.n	800811e <_Balloc+0x2e>
 8008154:	2000      	movs	r0, #0
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	6802      	ldr	r2, [r0, #0]
 800815a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800815e:	2300      	movs	r3, #0
 8008160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008164:	e7f7      	b.n	8008156 <_Balloc+0x66>
 8008166:	bf00      	nop
 8008168:	0800c31a 	.word	0x0800c31a
 800816c:	0800c39c 	.word	0x0800c39c

08008170 <_Bfree>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008174:	4605      	mov	r5, r0
 8008176:	460c      	mov	r4, r1
 8008178:	b976      	cbnz	r6, 8008198 <_Bfree+0x28>
 800817a:	2010      	movs	r0, #16
 800817c:	f7ff fb9c 	bl	80078b8 <malloc>
 8008180:	4602      	mov	r2, r0
 8008182:	6268      	str	r0, [r5, #36]	; 0x24
 8008184:	b920      	cbnz	r0, 8008190 <_Bfree+0x20>
 8008186:	218a      	movs	r1, #138	; 0x8a
 8008188:	4b08      	ldr	r3, [pc, #32]	; (80081ac <_Bfree+0x3c>)
 800818a:	4809      	ldr	r0, [pc, #36]	; (80081b0 <_Bfree+0x40>)
 800818c:	f000 fac8 	bl	8008720 <__assert_func>
 8008190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008194:	6006      	str	r6, [r0, #0]
 8008196:	60c6      	str	r6, [r0, #12]
 8008198:	b13c      	cbz	r4, 80081aa <_Bfree+0x3a>
 800819a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800819c:	6862      	ldr	r2, [r4, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081a4:	6021      	str	r1, [r4, #0]
 80081a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	0800c31a 	.word	0x0800c31a
 80081b0:	0800c39c 	.word	0x0800c39c

080081b4 <__multadd>:
 80081b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	4607      	mov	r7, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	461e      	mov	r6, r3
 80081be:	2000      	movs	r0, #0
 80081c0:	690d      	ldr	r5, [r1, #16]
 80081c2:	f101 0c14 	add.w	ip, r1, #20
 80081c6:	f8dc 3000 	ldr.w	r3, [ip]
 80081ca:	3001      	adds	r0, #1
 80081cc:	b299      	uxth	r1, r3
 80081ce:	fb02 6101 	mla	r1, r2, r1, r6
 80081d2:	0c1e      	lsrs	r6, r3, #16
 80081d4:	0c0b      	lsrs	r3, r1, #16
 80081d6:	fb02 3306 	mla	r3, r2, r6, r3
 80081da:	b289      	uxth	r1, r1
 80081dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081e0:	4285      	cmp	r5, r0
 80081e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081e6:	f84c 1b04 	str.w	r1, [ip], #4
 80081ea:	dcec      	bgt.n	80081c6 <__multadd+0x12>
 80081ec:	b30e      	cbz	r6, 8008232 <__multadd+0x7e>
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	dc19      	bgt.n	8008228 <__multadd+0x74>
 80081f4:	6861      	ldr	r1, [r4, #4]
 80081f6:	4638      	mov	r0, r7
 80081f8:	3101      	adds	r1, #1
 80081fa:	f7ff ff79 	bl	80080f0 <_Balloc>
 80081fe:	4680      	mov	r8, r0
 8008200:	b928      	cbnz	r0, 800820e <__multadd+0x5a>
 8008202:	4602      	mov	r2, r0
 8008204:	21b5      	movs	r1, #181	; 0xb5
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <__multadd+0x84>)
 8008208:	480c      	ldr	r0, [pc, #48]	; (800823c <__multadd+0x88>)
 800820a:	f000 fa89 	bl	8008720 <__assert_func>
 800820e:	6922      	ldr	r2, [r4, #16]
 8008210:	f104 010c 	add.w	r1, r4, #12
 8008214:	3202      	adds	r2, #2
 8008216:	0092      	lsls	r2, r2, #2
 8008218:	300c      	adds	r0, #12
 800821a:	f002 ff8d 	bl	800b138 <memcpy>
 800821e:	4621      	mov	r1, r4
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ffa5 	bl	8008170 <_Bfree>
 8008226:	4644      	mov	r4, r8
 8008228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800822c:	3501      	adds	r5, #1
 800822e:	615e      	str	r6, [r3, #20]
 8008230:	6125      	str	r5, [r4, #16]
 8008232:	4620      	mov	r0, r4
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008238:	0800c38b 	.word	0x0800c38b
 800823c:	0800c39c 	.word	0x0800c39c

08008240 <__i2b>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	2101      	movs	r1, #1
 8008246:	f7ff ff53 	bl	80080f0 <_Balloc>
 800824a:	4602      	mov	r2, r0
 800824c:	b928      	cbnz	r0, 800825a <__i2b+0x1a>
 800824e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008252:	4b04      	ldr	r3, [pc, #16]	; (8008264 <__i2b+0x24>)
 8008254:	4804      	ldr	r0, [pc, #16]	; (8008268 <__i2b+0x28>)
 8008256:	f000 fa63 	bl	8008720 <__assert_func>
 800825a:	2301      	movs	r3, #1
 800825c:	6144      	str	r4, [r0, #20]
 800825e:	6103      	str	r3, [r0, #16]
 8008260:	bd10      	pop	{r4, pc}
 8008262:	bf00      	nop
 8008264:	0800c38b 	.word	0x0800c38b
 8008268:	0800c39c 	.word	0x0800c39c

0800826c <__multiply>:
 800826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	4691      	mov	r9, r2
 8008272:	690a      	ldr	r2, [r1, #16]
 8008274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008278:	460c      	mov	r4, r1
 800827a:	429a      	cmp	r2, r3
 800827c:	bfbe      	ittt	lt
 800827e:	460b      	movlt	r3, r1
 8008280:	464c      	movlt	r4, r9
 8008282:	4699      	movlt	r9, r3
 8008284:	6927      	ldr	r7, [r4, #16]
 8008286:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	6861      	ldr	r1, [r4, #4]
 800828e:	eb07 060a 	add.w	r6, r7, sl
 8008292:	42b3      	cmp	r3, r6
 8008294:	b085      	sub	sp, #20
 8008296:	bfb8      	it	lt
 8008298:	3101      	addlt	r1, #1
 800829a:	f7ff ff29 	bl	80080f0 <_Balloc>
 800829e:	b930      	cbnz	r0, 80082ae <__multiply+0x42>
 80082a0:	4602      	mov	r2, r0
 80082a2:	f240 115d 	movw	r1, #349	; 0x15d
 80082a6:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <__multiply+0x148>)
 80082a8:	4843      	ldr	r0, [pc, #268]	; (80083b8 <__multiply+0x14c>)
 80082aa:	f000 fa39 	bl	8008720 <__assert_func>
 80082ae:	f100 0514 	add.w	r5, r0, #20
 80082b2:	462b      	mov	r3, r5
 80082b4:	2200      	movs	r2, #0
 80082b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082ba:	4543      	cmp	r3, r8
 80082bc:	d321      	bcc.n	8008302 <__multiply+0x96>
 80082be:	f104 0314 	add.w	r3, r4, #20
 80082c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082c6:	f109 0314 	add.w	r3, r9, #20
 80082ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082ce:	9202      	str	r2, [sp, #8]
 80082d0:	1b3a      	subs	r2, r7, r4
 80082d2:	3a15      	subs	r2, #21
 80082d4:	f022 0203 	bic.w	r2, r2, #3
 80082d8:	3204      	adds	r2, #4
 80082da:	f104 0115 	add.w	r1, r4, #21
 80082de:	428f      	cmp	r7, r1
 80082e0:	bf38      	it	cc
 80082e2:	2204      	movcc	r2, #4
 80082e4:	9201      	str	r2, [sp, #4]
 80082e6:	9a02      	ldr	r2, [sp, #8]
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d80c      	bhi.n	8008308 <__multiply+0x9c>
 80082ee:	2e00      	cmp	r6, #0
 80082f0:	dd03      	ble.n	80082fa <__multiply+0x8e>
 80082f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d059      	beq.n	80083ae <__multiply+0x142>
 80082fa:	6106      	str	r6, [r0, #16]
 80082fc:	b005      	add	sp, #20
 80082fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008302:	f843 2b04 	str.w	r2, [r3], #4
 8008306:	e7d8      	b.n	80082ba <__multiply+0x4e>
 8008308:	f8b3 a000 	ldrh.w	sl, [r3]
 800830c:	f1ba 0f00 	cmp.w	sl, #0
 8008310:	d023      	beq.n	800835a <__multiply+0xee>
 8008312:	46a9      	mov	r9, r5
 8008314:	f04f 0c00 	mov.w	ip, #0
 8008318:	f104 0e14 	add.w	lr, r4, #20
 800831c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008320:	f8d9 1000 	ldr.w	r1, [r9]
 8008324:	fa1f fb82 	uxth.w	fp, r2
 8008328:	b289      	uxth	r1, r1
 800832a:	fb0a 110b 	mla	r1, sl, fp, r1
 800832e:	4461      	add	r1, ip
 8008330:	f8d9 c000 	ldr.w	ip, [r9]
 8008334:	0c12      	lsrs	r2, r2, #16
 8008336:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800833a:	fb0a c202 	mla	r2, sl, r2, ip
 800833e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008342:	b289      	uxth	r1, r1
 8008344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008348:	4577      	cmp	r7, lr
 800834a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800834e:	f849 1b04 	str.w	r1, [r9], #4
 8008352:	d8e3      	bhi.n	800831c <__multiply+0xb0>
 8008354:	9a01      	ldr	r2, [sp, #4]
 8008356:	f845 c002 	str.w	ip, [r5, r2]
 800835a:	9a03      	ldr	r2, [sp, #12]
 800835c:	3304      	adds	r3, #4
 800835e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	d020      	beq.n	80083aa <__multiply+0x13e>
 8008368:	46ae      	mov	lr, r5
 800836a:	f04f 0a00 	mov.w	sl, #0
 800836e:	6829      	ldr	r1, [r5, #0]
 8008370:	f104 0c14 	add.w	ip, r4, #20
 8008374:	f8bc b000 	ldrh.w	fp, [ip]
 8008378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800837c:	b289      	uxth	r1, r1
 800837e:	fb09 220b 	mla	r2, r9, fp, r2
 8008382:	4492      	add	sl, r2
 8008384:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008388:	f84e 1b04 	str.w	r1, [lr], #4
 800838c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008390:	f8be 1000 	ldrh.w	r1, [lr]
 8008394:	0c12      	lsrs	r2, r2, #16
 8008396:	fb09 1102 	mla	r1, r9, r2, r1
 800839a:	4567      	cmp	r7, ip
 800839c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083a4:	d8e6      	bhi.n	8008374 <__multiply+0x108>
 80083a6:	9a01      	ldr	r2, [sp, #4]
 80083a8:	50a9      	str	r1, [r5, r2]
 80083aa:	3504      	adds	r5, #4
 80083ac:	e79b      	b.n	80082e6 <__multiply+0x7a>
 80083ae:	3e01      	subs	r6, #1
 80083b0:	e79d      	b.n	80082ee <__multiply+0x82>
 80083b2:	bf00      	nop
 80083b4:	0800c38b 	.word	0x0800c38b
 80083b8:	0800c39c 	.word	0x0800c39c

080083bc <__pow5mult>:
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c0:	4615      	mov	r5, r2
 80083c2:	f012 0203 	ands.w	r2, r2, #3
 80083c6:	4606      	mov	r6, r0
 80083c8:	460f      	mov	r7, r1
 80083ca:	d007      	beq.n	80083dc <__pow5mult+0x20>
 80083cc:	4c25      	ldr	r4, [pc, #148]	; (8008464 <__pow5mult+0xa8>)
 80083ce:	3a01      	subs	r2, #1
 80083d0:	2300      	movs	r3, #0
 80083d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083d6:	f7ff feed 	bl	80081b4 <__multadd>
 80083da:	4607      	mov	r7, r0
 80083dc:	10ad      	asrs	r5, r5, #2
 80083de:	d03d      	beq.n	800845c <__pow5mult+0xa0>
 80083e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083e2:	b97c      	cbnz	r4, 8008404 <__pow5mult+0x48>
 80083e4:	2010      	movs	r0, #16
 80083e6:	f7ff fa67 	bl	80078b8 <malloc>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6270      	str	r0, [r6, #36]	; 0x24
 80083ee:	b928      	cbnz	r0, 80083fc <__pow5mult+0x40>
 80083f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083f4:	4b1c      	ldr	r3, [pc, #112]	; (8008468 <__pow5mult+0xac>)
 80083f6:	481d      	ldr	r0, [pc, #116]	; (800846c <__pow5mult+0xb0>)
 80083f8:	f000 f992 	bl	8008720 <__assert_func>
 80083fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008400:	6004      	str	r4, [r0, #0]
 8008402:	60c4      	str	r4, [r0, #12]
 8008404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800840c:	b94c      	cbnz	r4, 8008422 <__pow5mult+0x66>
 800840e:	f240 2171 	movw	r1, #625	; 0x271
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff ff14 	bl	8008240 <__i2b>
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	f04f 0900 	mov.w	r9, #0
 8008426:	07eb      	lsls	r3, r5, #31
 8008428:	d50a      	bpl.n	8008440 <__pow5mult+0x84>
 800842a:	4639      	mov	r1, r7
 800842c:	4622      	mov	r2, r4
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ff1c 	bl	800826c <__multiply>
 8008434:	4680      	mov	r8, r0
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f7ff fe99 	bl	8008170 <_Bfree>
 800843e:	4647      	mov	r7, r8
 8008440:	106d      	asrs	r5, r5, #1
 8008442:	d00b      	beq.n	800845c <__pow5mult+0xa0>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	b938      	cbnz	r0, 8008458 <__pow5mult+0x9c>
 8008448:	4622      	mov	r2, r4
 800844a:	4621      	mov	r1, r4
 800844c:	4630      	mov	r0, r6
 800844e:	f7ff ff0d 	bl	800826c <__multiply>
 8008452:	6020      	str	r0, [r4, #0]
 8008454:	f8c0 9000 	str.w	r9, [r0]
 8008458:	4604      	mov	r4, r0
 800845a:	e7e4      	b.n	8008426 <__pow5mult+0x6a>
 800845c:	4638      	mov	r0, r7
 800845e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008462:	bf00      	nop
 8008464:	0800c16c 	.word	0x0800c16c
 8008468:	0800c31a 	.word	0x0800c31a
 800846c:	0800c39c 	.word	0x0800c39c

08008470 <__lshift>:
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	4607      	mov	r7, r0
 8008478:	4691      	mov	r9, r2
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	6849      	ldr	r1, [r1, #4]
 800847e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008488:	f108 0601 	add.w	r6, r8, #1
 800848c:	42b3      	cmp	r3, r6
 800848e:	db0b      	blt.n	80084a8 <__lshift+0x38>
 8008490:	4638      	mov	r0, r7
 8008492:	f7ff fe2d 	bl	80080f0 <_Balloc>
 8008496:	4605      	mov	r5, r0
 8008498:	b948      	cbnz	r0, 80084ae <__lshift+0x3e>
 800849a:	4602      	mov	r2, r0
 800849c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084a0:	4b29      	ldr	r3, [pc, #164]	; (8008548 <__lshift+0xd8>)
 80084a2:	482a      	ldr	r0, [pc, #168]	; (800854c <__lshift+0xdc>)
 80084a4:	f000 f93c 	bl	8008720 <__assert_func>
 80084a8:	3101      	adds	r1, #1
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	e7ee      	b.n	800848c <__lshift+0x1c>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f100 0114 	add.w	r1, r0, #20
 80084b4:	f100 0210 	add.w	r2, r0, #16
 80084b8:	4618      	mov	r0, r3
 80084ba:	4553      	cmp	r3, sl
 80084bc:	db37      	blt.n	800852e <__lshift+0xbe>
 80084be:	6920      	ldr	r0, [r4, #16]
 80084c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c4:	f104 0314 	add.w	r3, r4, #20
 80084c8:	f019 091f 	ands.w	r9, r9, #31
 80084cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084d4:	d02f      	beq.n	8008536 <__lshift+0xc6>
 80084d6:	468a      	mov	sl, r1
 80084d8:	f04f 0c00 	mov.w	ip, #0
 80084dc:	f1c9 0e20 	rsb	lr, r9, #32
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	fa02 f209 	lsl.w	r2, r2, r9
 80084e6:	ea42 020c 	orr.w	r2, r2, ip
 80084ea:	f84a 2b04 	str.w	r2, [sl], #4
 80084ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f2:	4298      	cmp	r0, r3
 80084f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084f8:	d8f2      	bhi.n	80084e0 <__lshift+0x70>
 80084fa:	1b03      	subs	r3, r0, r4
 80084fc:	3b15      	subs	r3, #21
 80084fe:	f023 0303 	bic.w	r3, r3, #3
 8008502:	3304      	adds	r3, #4
 8008504:	f104 0215 	add.w	r2, r4, #21
 8008508:	4290      	cmp	r0, r2
 800850a:	bf38      	it	cc
 800850c:	2304      	movcc	r3, #4
 800850e:	f841 c003 	str.w	ip, [r1, r3]
 8008512:	f1bc 0f00 	cmp.w	ip, #0
 8008516:	d001      	beq.n	800851c <__lshift+0xac>
 8008518:	f108 0602 	add.w	r6, r8, #2
 800851c:	3e01      	subs	r6, #1
 800851e:	4638      	mov	r0, r7
 8008520:	4621      	mov	r1, r4
 8008522:	612e      	str	r6, [r5, #16]
 8008524:	f7ff fe24 	bl	8008170 <_Bfree>
 8008528:	4628      	mov	r0, r5
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008532:	3301      	adds	r3, #1
 8008534:	e7c1      	b.n	80084ba <__lshift+0x4a>
 8008536:	3904      	subs	r1, #4
 8008538:	f853 2b04 	ldr.w	r2, [r3], #4
 800853c:	4298      	cmp	r0, r3
 800853e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008542:	d8f9      	bhi.n	8008538 <__lshift+0xc8>
 8008544:	e7ea      	b.n	800851c <__lshift+0xac>
 8008546:	bf00      	nop
 8008548:	0800c38b 	.word	0x0800c38b
 800854c:	0800c39c 	.word	0x0800c39c

08008550 <__mdiff>:
 8008550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	460d      	mov	r5, r1
 8008556:	4607      	mov	r7, r0
 8008558:	4611      	mov	r1, r2
 800855a:	4628      	mov	r0, r5
 800855c:	4614      	mov	r4, r2
 800855e:	f003 f800 	bl	800b562 <__mcmp>
 8008562:	1e06      	subs	r6, r0, #0
 8008564:	d111      	bne.n	800858a <__mdiff+0x3a>
 8008566:	4631      	mov	r1, r6
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff fdc1 	bl	80080f0 <_Balloc>
 800856e:	4602      	mov	r2, r0
 8008570:	b928      	cbnz	r0, 800857e <__mdiff+0x2e>
 8008572:	f240 2132 	movw	r1, #562	; 0x232
 8008576:	4b3a      	ldr	r3, [pc, #232]	; (8008660 <__mdiff+0x110>)
 8008578:	483a      	ldr	r0, [pc, #232]	; (8008664 <__mdiff+0x114>)
 800857a:	f000 f8d1 	bl	8008720 <__assert_func>
 800857e:	2301      	movs	r3, #1
 8008580:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008584:	4610      	mov	r0, r2
 8008586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858a:	bfa4      	itt	ge
 800858c:	4623      	movge	r3, r4
 800858e:	462c      	movge	r4, r5
 8008590:	4638      	mov	r0, r7
 8008592:	6861      	ldr	r1, [r4, #4]
 8008594:	bfa6      	itte	ge
 8008596:	461d      	movge	r5, r3
 8008598:	2600      	movge	r6, #0
 800859a:	2601      	movlt	r6, #1
 800859c:	f7ff fda8 	bl	80080f0 <_Balloc>
 80085a0:	4602      	mov	r2, r0
 80085a2:	b918      	cbnz	r0, 80085ac <__mdiff+0x5c>
 80085a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085a8:	4b2d      	ldr	r3, [pc, #180]	; (8008660 <__mdiff+0x110>)
 80085aa:	e7e5      	b.n	8008578 <__mdiff+0x28>
 80085ac:	f102 0814 	add.w	r8, r2, #20
 80085b0:	46c2      	mov	sl, r8
 80085b2:	f04f 0c00 	mov.w	ip, #0
 80085b6:	6927      	ldr	r7, [r4, #16]
 80085b8:	60c6      	str	r6, [r0, #12]
 80085ba:	692e      	ldr	r6, [r5, #16]
 80085bc:	f104 0014 	add.w	r0, r4, #20
 80085c0:	f105 0914 	add.w	r9, r5, #20
 80085c4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80085c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085cc:	3410      	adds	r4, #16
 80085ce:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80085d2:	f859 3b04 	ldr.w	r3, [r9], #4
 80085d6:	fa1f f18b 	uxth.w	r1, fp
 80085da:	448c      	add	ip, r1
 80085dc:	b299      	uxth	r1, r3
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	ebac 0101 	sub.w	r1, ip, r1
 80085e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80085ec:	b289      	uxth	r1, r1
 80085ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80085f2:	454e      	cmp	r6, r9
 80085f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80085f8:	f84a 3b04 	str.w	r3, [sl], #4
 80085fc:	d8e7      	bhi.n	80085ce <__mdiff+0x7e>
 80085fe:	1b73      	subs	r3, r6, r5
 8008600:	3b15      	subs	r3, #21
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	3515      	adds	r5, #21
 8008608:	3304      	adds	r3, #4
 800860a:	42ae      	cmp	r6, r5
 800860c:	bf38      	it	cc
 800860e:	2304      	movcc	r3, #4
 8008610:	4418      	add	r0, r3
 8008612:	4443      	add	r3, r8
 8008614:	461e      	mov	r6, r3
 8008616:	4605      	mov	r5, r0
 8008618:	4575      	cmp	r5, lr
 800861a:	d30e      	bcc.n	800863a <__mdiff+0xea>
 800861c:	f10e 0103 	add.w	r1, lr, #3
 8008620:	1a09      	subs	r1, r1, r0
 8008622:	f021 0103 	bic.w	r1, r1, #3
 8008626:	3803      	subs	r0, #3
 8008628:	4586      	cmp	lr, r0
 800862a:	bf38      	it	cc
 800862c:	2100      	movcc	r1, #0
 800862e:	4419      	add	r1, r3
 8008630:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008634:	b18b      	cbz	r3, 800865a <__mdiff+0x10a>
 8008636:	6117      	str	r7, [r2, #16]
 8008638:	e7a4      	b.n	8008584 <__mdiff+0x34>
 800863a:	f855 8b04 	ldr.w	r8, [r5], #4
 800863e:	fa1f f188 	uxth.w	r1, r8
 8008642:	4461      	add	r1, ip
 8008644:	140c      	asrs	r4, r1, #16
 8008646:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800864a:	b289      	uxth	r1, r1
 800864c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008650:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008654:	f846 1b04 	str.w	r1, [r6], #4
 8008658:	e7de      	b.n	8008618 <__mdiff+0xc8>
 800865a:	3f01      	subs	r7, #1
 800865c:	e7e8      	b.n	8008630 <__mdiff+0xe0>
 800865e:	bf00      	nop
 8008660:	0800c38b 	.word	0x0800c38b
 8008664:	0800c39c 	.word	0x0800c39c

08008668 <__d2b>:
 8008668:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800866c:	2101      	movs	r1, #1
 800866e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008672:	4690      	mov	r8, r2
 8008674:	461d      	mov	r5, r3
 8008676:	f7ff fd3b 	bl	80080f0 <_Balloc>
 800867a:	4604      	mov	r4, r0
 800867c:	b930      	cbnz	r0, 800868c <__d2b+0x24>
 800867e:	4602      	mov	r2, r0
 8008680:	f240 310a 	movw	r1, #778	; 0x30a
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <__d2b+0xb0>)
 8008686:	4825      	ldr	r0, [pc, #148]	; (800871c <__d2b+0xb4>)
 8008688:	f000 f84a 	bl	8008720 <__assert_func>
 800868c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008690:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008694:	bb2d      	cbnz	r5, 80086e2 <__d2b+0x7a>
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	f1b8 0300 	subs.w	r3, r8, #0
 800869c:	d026      	beq.n	80086ec <__d2b+0x84>
 800869e:	4668      	mov	r0, sp
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	f002 ff31 	bl	800b508 <__lo0bits>
 80086a6:	9900      	ldr	r1, [sp, #0]
 80086a8:	b1f0      	cbz	r0, 80086e8 <__d2b+0x80>
 80086aa:	9a01      	ldr	r2, [sp, #4]
 80086ac:	f1c0 0320 	rsb	r3, r0, #32
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	430b      	orrs	r3, r1
 80086b6:	40c2      	lsrs	r2, r0
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bf14      	ite	ne
 80086c2:	2102      	movne	r1, #2
 80086c4:	2101      	moveq	r1, #1
 80086c6:	61a3      	str	r3, [r4, #24]
 80086c8:	6121      	str	r1, [r4, #16]
 80086ca:	b1c5      	cbz	r5, 80086fe <__d2b+0x96>
 80086cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086d0:	4405      	add	r5, r0
 80086d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086d6:	603d      	str	r5, [r7, #0]
 80086d8:	6030      	str	r0, [r6, #0]
 80086da:	4620      	mov	r0, r4
 80086dc:	b002      	add	sp, #8
 80086de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086e6:	e7d6      	b.n	8008696 <__d2b+0x2e>
 80086e8:	6161      	str	r1, [r4, #20]
 80086ea:	e7e7      	b.n	80086bc <__d2b+0x54>
 80086ec:	a801      	add	r0, sp, #4
 80086ee:	f002 ff0b 	bl	800b508 <__lo0bits>
 80086f2:	2101      	movs	r1, #1
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	3020      	adds	r0, #32
 80086fc:	e7e5      	b.n	80086ca <__d2b+0x62>
 80086fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008702:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008706:	6038      	str	r0, [r7, #0]
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f002 fedd 	bl	800b4c8 <__hi0bits>
 800870e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008712:	6031      	str	r1, [r6, #0]
 8008714:	e7e1      	b.n	80086da <__d2b+0x72>
 8008716:	bf00      	nop
 8008718:	0800c38b 	.word	0x0800c38b
 800871c:	0800c39c 	.word	0x0800c39c

08008720 <__assert_func>:
 8008720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008722:	4614      	mov	r4, r2
 8008724:	461a      	mov	r2, r3
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <__assert_func+0x2c>)
 8008728:	4605      	mov	r5, r0
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68d8      	ldr	r0, [r3, #12]
 800872e:	b14c      	cbz	r4, 8008744 <__assert_func+0x24>
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <__assert_func+0x30>)
 8008732:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008736:	9100      	str	r1, [sp, #0]
 8008738:	462b      	mov	r3, r5
 800873a:	4906      	ldr	r1, [pc, #24]	; (8008754 <__assert_func+0x34>)
 800873c:	f000 f80e 	bl	800875c <fiprintf>
 8008740:	f002 ff7e 	bl	800b640 <abort>
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <__assert_func+0x38>)
 8008746:	461c      	mov	r4, r3
 8008748:	e7f3      	b.n	8008732 <__assert_func+0x12>
 800874a:	bf00      	nop
 800874c:	200000c0 	.word	0x200000c0
 8008750:	0800c3f7 	.word	0x0800c3f7
 8008754:	0800c404 	.word	0x0800c404
 8008758:	0800c432 	.word	0x0800c432

0800875c <fiprintf>:
 800875c:	b40e      	push	{r1, r2, r3}
 800875e:	b503      	push	{r0, r1, lr}
 8008760:	4601      	mov	r1, r0
 8008762:	ab03      	add	r3, sp, #12
 8008764:	4805      	ldr	r0, [pc, #20]	; (800877c <fiprintf+0x20>)
 8008766:	f853 2b04 	ldr.w	r2, [r3], #4
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	f000 f807 	bl	8008780 <_vfiprintf_r>
 8008772:	b002      	add	sp, #8
 8008774:	f85d eb04 	ldr.w	lr, [sp], #4
 8008778:	b003      	add	sp, #12
 800877a:	4770      	bx	lr
 800877c:	200000c0 	.word	0x200000c0

08008780 <_vfiprintf_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	460d      	mov	r5, r1
 8008786:	4614      	mov	r4, r2
 8008788:	4698      	mov	r8, r3
 800878a:	4606      	mov	r6, r0
 800878c:	b09d      	sub	sp, #116	; 0x74
 800878e:	b118      	cbz	r0, 8008798 <_vfiprintf_r+0x18>
 8008790:	6983      	ldr	r3, [r0, #24]
 8008792:	b90b      	cbnz	r3, 8008798 <_vfiprintf_r+0x18>
 8008794:	f000 fae4 	bl	8008d60 <__sinit>
 8008798:	4b89      	ldr	r3, [pc, #548]	; (80089c0 <_vfiprintf_r+0x240>)
 800879a:	429d      	cmp	r5, r3
 800879c:	d11b      	bne.n	80087d6 <_vfiprintf_r+0x56>
 800879e:	6875      	ldr	r5, [r6, #4]
 80087a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x32>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x32>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f001 f869 	bl	8009884 <__retarget_lock_acquire_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	071b      	lsls	r3, r3, #28
 80087b6:	d501      	bpl.n	80087bc <_vfiprintf_r+0x3c>
 80087b8:	692b      	ldr	r3, [r5, #16]
 80087ba:	b9eb      	cbnz	r3, 80087f8 <_vfiprintf_r+0x78>
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f960 	bl	8008a84 <__swsetup_r>
 80087c4:	b1c0      	cbz	r0, 80087f8 <_vfiprintf_r+0x78>
 80087c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c8:	07dc      	lsls	r4, r3, #31
 80087ca:	d50e      	bpl.n	80087ea <_vfiprintf_r+0x6a>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d0:	b01d      	add	sp, #116	; 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	4b7b      	ldr	r3, [pc, #492]	; (80089c4 <_vfiprintf_r+0x244>)
 80087d8:	429d      	cmp	r5, r3
 80087da:	d101      	bne.n	80087e0 <_vfiprintf_r+0x60>
 80087dc:	68b5      	ldr	r5, [r6, #8]
 80087de:	e7df      	b.n	80087a0 <_vfiprintf_r+0x20>
 80087e0:	4b79      	ldr	r3, [pc, #484]	; (80089c8 <_vfiprintf_r+0x248>)
 80087e2:	429d      	cmp	r5, r3
 80087e4:	bf08      	it	eq
 80087e6:	68f5      	ldreq	r5, [r6, #12]
 80087e8:	e7da      	b.n	80087a0 <_vfiprintf_r+0x20>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	0598      	lsls	r0, r3, #22
 80087ee:	d4ed      	bmi.n	80087cc <_vfiprintf_r+0x4c>
 80087f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f2:	f001 f84f 	bl	8009894 <__retarget_lock_release_recursive>
 80087f6:	e7e9      	b.n	80087cc <_vfiprintf_r+0x4c>
 80087f8:	2300      	movs	r3, #0
 80087fa:	9309      	str	r3, [sp, #36]	; 0x24
 80087fc:	2320      	movs	r3, #32
 80087fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008802:	2330      	movs	r3, #48	; 0x30
 8008804:	f04f 0901 	mov.w	r9, #1
 8008808:	f8cd 800c 	str.w	r8, [sp, #12]
 800880c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089cc <_vfiprintf_r+0x24c>
 8008810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008814:	4623      	mov	r3, r4
 8008816:	469a      	mov	sl, r3
 8008818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800881c:	b10a      	cbz	r2, 8008822 <_vfiprintf_r+0xa2>
 800881e:	2a25      	cmp	r2, #37	; 0x25
 8008820:	d1f9      	bne.n	8008816 <_vfiprintf_r+0x96>
 8008822:	ebba 0b04 	subs.w	fp, sl, r4
 8008826:	d00b      	beq.n	8008840 <_vfiprintf_r+0xc0>
 8008828:	465b      	mov	r3, fp
 800882a:	4622      	mov	r2, r4
 800882c:	4629      	mov	r1, r5
 800882e:	4630      	mov	r0, r6
 8008830:	f002 fee7 	bl	800b602 <__sfputs_r>
 8008834:	3001      	adds	r0, #1
 8008836:	f000 80aa 	beq.w	800898e <_vfiprintf_r+0x20e>
 800883a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800883c:	445a      	add	r2, fp
 800883e:	9209      	str	r2, [sp, #36]	; 0x24
 8008840:	f89a 3000 	ldrb.w	r3, [sl]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80a2 	beq.w	800898e <_vfiprintf_r+0x20e>
 800884a:	2300      	movs	r3, #0
 800884c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008854:	f10a 0a01 	add.w	sl, sl, #1
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9307      	str	r3, [sp, #28]
 800885c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008860:	931a      	str	r3, [sp, #104]	; 0x68
 8008862:	4654      	mov	r4, sl
 8008864:	2205      	movs	r2, #5
 8008866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886a:	4858      	ldr	r0, [pc, #352]	; (80089cc <_vfiprintf_r+0x24c>)
 800886c:	f002 fe1e 	bl	800b4ac <memchr>
 8008870:	9a04      	ldr	r2, [sp, #16]
 8008872:	b9d8      	cbnz	r0, 80088ac <_vfiprintf_r+0x12c>
 8008874:	06d1      	lsls	r1, r2, #27
 8008876:	bf44      	itt	mi
 8008878:	2320      	movmi	r3, #32
 800887a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887e:	0713      	lsls	r3, r2, #28
 8008880:	bf44      	itt	mi
 8008882:	232b      	movmi	r3, #43	; 0x2b
 8008884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008888:	f89a 3000 	ldrb.w	r3, [sl]
 800888c:	2b2a      	cmp	r3, #42	; 0x2a
 800888e:	d015      	beq.n	80088bc <_vfiprintf_r+0x13c>
 8008890:	4654      	mov	r4, sl
 8008892:	2000      	movs	r0, #0
 8008894:	f04f 0c0a 	mov.w	ip, #10
 8008898:	9a07      	ldr	r2, [sp, #28]
 800889a:	4621      	mov	r1, r4
 800889c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a0:	3b30      	subs	r3, #48	; 0x30
 80088a2:	2b09      	cmp	r3, #9
 80088a4:	d94e      	bls.n	8008944 <_vfiprintf_r+0x1c4>
 80088a6:	b1b0      	cbz	r0, 80088d6 <_vfiprintf_r+0x156>
 80088a8:	9207      	str	r2, [sp, #28]
 80088aa:	e014      	b.n	80088d6 <_vfiprintf_r+0x156>
 80088ac:	eba0 0308 	sub.w	r3, r0, r8
 80088b0:	fa09 f303 	lsl.w	r3, r9, r3
 80088b4:	4313      	orrs	r3, r2
 80088b6:	46a2      	mov	sl, r4
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	e7d2      	b.n	8008862 <_vfiprintf_r+0xe2>
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	1d19      	adds	r1, r3, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	9103      	str	r1, [sp, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bfbb      	ittet	lt
 80088c8:	425b      	neglt	r3, r3
 80088ca:	f042 0202 	orrlt.w	r2, r2, #2
 80088ce:	9307      	strge	r3, [sp, #28]
 80088d0:	9307      	strlt	r3, [sp, #28]
 80088d2:	bfb8      	it	lt
 80088d4:	9204      	strlt	r2, [sp, #16]
 80088d6:	7823      	ldrb	r3, [r4, #0]
 80088d8:	2b2e      	cmp	r3, #46	; 0x2e
 80088da:	d10c      	bne.n	80088f6 <_vfiprintf_r+0x176>
 80088dc:	7863      	ldrb	r3, [r4, #1]
 80088de:	2b2a      	cmp	r3, #42	; 0x2a
 80088e0:	d135      	bne.n	800894e <_vfiprintf_r+0x1ce>
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	3402      	adds	r4, #2
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	9203      	str	r2, [sp, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfb8      	it	lt
 80088f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088f4:	9305      	str	r3, [sp, #20]
 80088f6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80089d0 <_vfiprintf_r+0x250>
 80088fa:	2203      	movs	r2, #3
 80088fc:	4650      	mov	r0, sl
 80088fe:	7821      	ldrb	r1, [r4, #0]
 8008900:	f002 fdd4 	bl	800b4ac <memchr>
 8008904:	b140      	cbz	r0, 8008918 <_vfiprintf_r+0x198>
 8008906:	2340      	movs	r3, #64	; 0x40
 8008908:	eba0 000a 	sub.w	r0, r0, sl
 800890c:	fa03 f000 	lsl.w	r0, r3, r0
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	3401      	adds	r4, #1
 8008914:	4303      	orrs	r3, r0
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	2206      	movs	r2, #6
 800891e:	482d      	ldr	r0, [pc, #180]	; (80089d4 <_vfiprintf_r+0x254>)
 8008920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008924:	f002 fdc2 	bl	800b4ac <memchr>
 8008928:	2800      	cmp	r0, #0
 800892a:	d03f      	beq.n	80089ac <_vfiprintf_r+0x22c>
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <_vfiprintf_r+0x258>)
 800892e:	bb1b      	cbnz	r3, 8008978 <_vfiprintf_r+0x1f8>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	3307      	adds	r3, #7
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	3308      	adds	r3, #8
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	443b      	add	r3, r7
 8008940:	9309      	str	r3, [sp, #36]	; 0x24
 8008942:	e767      	b.n	8008814 <_vfiprintf_r+0x94>
 8008944:	460c      	mov	r4, r1
 8008946:	2001      	movs	r0, #1
 8008948:	fb0c 3202 	mla	r2, ip, r2, r3
 800894c:	e7a5      	b.n	800889a <_vfiprintf_r+0x11a>
 800894e:	2300      	movs	r3, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4619      	mov	r1, r3
 8008956:	3401      	adds	r4, #1
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	4620      	mov	r0, r4
 800895c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008960:	3a30      	subs	r2, #48	; 0x30
 8008962:	2a09      	cmp	r2, #9
 8008964:	d903      	bls.n	800896e <_vfiprintf_r+0x1ee>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c5      	beq.n	80088f6 <_vfiprintf_r+0x176>
 800896a:	9105      	str	r1, [sp, #20]
 800896c:	e7c3      	b.n	80088f6 <_vfiprintf_r+0x176>
 800896e:	4604      	mov	r4, r0
 8008970:	2301      	movs	r3, #1
 8008972:	fb0c 2101 	mla	r1, ip, r1, r2
 8008976:	e7f0      	b.n	800895a <_vfiprintf_r+0x1da>
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4630      	mov	r0, r6
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <_vfiprintf_r+0x25c>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	f7ff f842 	bl	8007a0c <_printf_float>
 8008988:	4607      	mov	r7, r0
 800898a:	1c78      	adds	r0, r7, #1
 800898c:	d1d6      	bne.n	800893c <_vfiprintf_r+0x1bc>
 800898e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008990:	07d9      	lsls	r1, r3, #31
 8008992:	d405      	bmi.n	80089a0 <_vfiprintf_r+0x220>
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	059a      	lsls	r2, r3, #22
 8008998:	d402      	bmi.n	80089a0 <_vfiprintf_r+0x220>
 800899a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800899c:	f000 ff7a 	bl	8009894 <__retarget_lock_release_recursive>
 80089a0:	89ab      	ldrh	r3, [r5, #12]
 80089a2:	065b      	lsls	r3, r3, #25
 80089a4:	f53f af12 	bmi.w	80087cc <_vfiprintf_r+0x4c>
 80089a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089aa:	e711      	b.n	80087d0 <_vfiprintf_r+0x50>
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <_vfiprintf_r+0x25c>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	f7ff fa54 	bl	8007e64 <_printf_i>
 80089bc:	e7e4      	b.n	8008988 <_vfiprintf_r+0x208>
 80089be:	bf00      	nop
 80089c0:	0800c198 	.word	0x0800c198
 80089c4:	0800c1b8 	.word	0x0800c1b8
 80089c8:	0800c178 	.word	0x0800c178
 80089cc:	0800c43d 	.word	0x0800c43d
 80089d0:	0800c443 	.word	0x0800c443
 80089d4:	0800c447 	.word	0x0800c447
 80089d8:	08007a0d 	.word	0x08007a0d
 80089dc:	0800b603 	.word	0x0800b603

080089e0 <__swbuf_r>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	460e      	mov	r6, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	4605      	mov	r5, r0
 80089e8:	b118      	cbz	r0, 80089f2 <__swbuf_r+0x12>
 80089ea:	6983      	ldr	r3, [r0, #24]
 80089ec:	b90b      	cbnz	r3, 80089f2 <__swbuf_r+0x12>
 80089ee:	f000 f9b7 	bl	8008d60 <__sinit>
 80089f2:	4b21      	ldr	r3, [pc, #132]	; (8008a78 <__swbuf_r+0x98>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d12b      	bne.n	8008a50 <__swbuf_r+0x70>
 80089f8:	686c      	ldr	r4, [r5, #4]
 80089fa:	69a3      	ldr	r3, [r4, #24]
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	071a      	lsls	r2, r3, #28
 8008a02:	d52f      	bpl.n	8008a64 <__swbuf_r+0x84>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	b36b      	cbz	r3, 8008a64 <__swbuf_r+0x84>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	6820      	ldr	r0, [r4, #0]
 8008a0c:	b2f6      	uxtb	r6, r6
 8008a0e:	1ac0      	subs	r0, r0, r3
 8008a10:	6963      	ldr	r3, [r4, #20]
 8008a12:	4637      	mov	r7, r6
 8008a14:	4283      	cmp	r3, r0
 8008a16:	dc04      	bgt.n	8008a22 <__swbuf_r+0x42>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 f922 	bl	8008c64 <_fflush_r>
 8008a20:	bb30      	cbnz	r0, 8008a70 <__swbuf_r+0x90>
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	3001      	adds	r0, #1
 8008a26:	3b01      	subs	r3, #1
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	701e      	strb	r6, [r3, #0]
 8008a32:	6963      	ldr	r3, [r4, #20]
 8008a34:	4283      	cmp	r3, r0
 8008a36:	d004      	beq.n	8008a42 <__swbuf_r+0x62>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	07db      	lsls	r3, r3, #31
 8008a3c:	d506      	bpl.n	8008a4c <__swbuf_r+0x6c>
 8008a3e:	2e0a      	cmp	r6, #10
 8008a40:	d104      	bne.n	8008a4c <__swbuf_r+0x6c>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 f90d 	bl	8008c64 <_fflush_r>
 8008a4a:	b988      	cbnz	r0, 8008a70 <__swbuf_r+0x90>
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a50:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <__swbuf_r+0x9c>)
 8008a52:	429c      	cmp	r4, r3
 8008a54:	d101      	bne.n	8008a5a <__swbuf_r+0x7a>
 8008a56:	68ac      	ldr	r4, [r5, #8]
 8008a58:	e7cf      	b.n	80089fa <__swbuf_r+0x1a>
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <__swbuf_r+0xa0>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	bf08      	it	eq
 8008a60:	68ec      	ldreq	r4, [r5, #12]
 8008a62:	e7ca      	b.n	80089fa <__swbuf_r+0x1a>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f000 f80c 	bl	8008a84 <__swsetup_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d0cb      	beq.n	8008a08 <__swbuf_r+0x28>
 8008a70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a74:	e7ea      	b.n	8008a4c <__swbuf_r+0x6c>
 8008a76:	bf00      	nop
 8008a78:	0800c198 	.word	0x0800c198
 8008a7c:	0800c1b8 	.word	0x0800c1b8
 8008a80:	0800c178 	.word	0x0800c178

08008a84 <__swsetup_r>:
 8008a84:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <__swsetup_r+0xcc>)
 8008a86:	b570      	push	{r4, r5, r6, lr}
 8008a88:	681d      	ldr	r5, [r3, #0]
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	b125      	cbz	r5, 8008a9a <__swsetup_r+0x16>
 8008a90:	69ab      	ldr	r3, [r5, #24]
 8008a92:	b913      	cbnz	r3, 8008a9a <__swsetup_r+0x16>
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f963 	bl	8008d60 <__sinit>
 8008a9a:	4b2e      	ldr	r3, [pc, #184]	; (8008b54 <__swsetup_r+0xd0>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d10f      	bne.n	8008ac0 <__swsetup_r+0x3c>
 8008aa0:	686c      	ldr	r4, [r5, #4]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aa8:	0719      	lsls	r1, r3, #28
 8008aaa:	d42c      	bmi.n	8008b06 <__swsetup_r+0x82>
 8008aac:	06dd      	lsls	r5, r3, #27
 8008aae:	d411      	bmi.n	8008ad4 <__swsetup_r+0x50>
 8008ab0:	2309      	movs	r3, #9
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e03e      	b.n	8008b3e <__swsetup_r+0xba>
 8008ac0:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <__swsetup_r+0xd4>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	d101      	bne.n	8008aca <__swsetup_r+0x46>
 8008ac6:	68ac      	ldr	r4, [r5, #8]
 8008ac8:	e7eb      	b.n	8008aa2 <__swsetup_r+0x1e>
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <__swsetup_r+0xd8>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	bf08      	it	eq
 8008ad0:	68ec      	ldreq	r4, [r5, #12]
 8008ad2:	e7e6      	b.n	8008aa2 <__swsetup_r+0x1e>
 8008ad4:	0758      	lsls	r0, r3, #29
 8008ad6:	d512      	bpl.n	8008afe <__swsetup_r+0x7a>
 8008ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ada:	b141      	cbz	r1, 8008aee <__swsetup_r+0x6a>
 8008adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d002      	beq.n	8008aea <__swsetup_r+0x66>
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f7fe feef 	bl	80078c8 <_free_r>
 8008aea:	2300      	movs	r3, #0
 8008aec:	6363      	str	r3, [r4, #52]	; 0x34
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	2300      	movs	r3, #0
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f043 0308 	orr.w	r3, r3, #8
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	b94b      	cbnz	r3, 8008b1e <__swsetup_r+0x9a>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	d003      	beq.n	8008b1e <__swsetup_r+0x9a>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f000 f99f 	bl	8008e5c <__smakebuf_r>
 8008b1e:	89a0      	ldrh	r0, [r4, #12]
 8008b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b24:	f010 0301 	ands.w	r3, r0, #1
 8008b28:	d00a      	beq.n	8008b40 <__swsetup_r+0xbc>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	6963      	ldr	r3, [r4, #20]
 8008b30:	425b      	negs	r3, r3
 8008b32:	61a3      	str	r3, [r4, #24]
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	b943      	cbnz	r3, 8008b4a <__swsetup_r+0xc6>
 8008b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b3c:	d1ba      	bne.n	8008ab4 <__swsetup_r+0x30>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	0781      	lsls	r1, r0, #30
 8008b42:	bf58      	it	pl
 8008b44:	6963      	ldrpl	r3, [r4, #20]
 8008b46:	60a3      	str	r3, [r4, #8]
 8008b48:	e7f4      	b.n	8008b34 <__swsetup_r+0xb0>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e7f7      	b.n	8008b3e <__swsetup_r+0xba>
 8008b4e:	bf00      	nop
 8008b50:	200000c0 	.word	0x200000c0
 8008b54:	0800c198 	.word	0x0800c198
 8008b58:	0800c1b8 	.word	0x0800c1b8
 8008b5c:	0800c178 	.word	0x0800c178

08008b60 <__sflush_r>:
 8008b60:	898a      	ldrh	r2, [r1, #12]
 8008b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b64:	4605      	mov	r5, r0
 8008b66:	0710      	lsls	r0, r2, #28
 8008b68:	460c      	mov	r4, r1
 8008b6a:	d457      	bmi.n	8008c1c <__sflush_r+0xbc>
 8008b6c:	684b      	ldr	r3, [r1, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc04      	bgt.n	8008b7c <__sflush_r+0x1c>
 8008b72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dc01      	bgt.n	8008b7c <__sflush_r+0x1c>
 8008b78:	2000      	movs	r0, #0
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	d0fa      	beq.n	8008b78 <__sflush_r+0x18>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b88:	682f      	ldr	r7, [r5, #0]
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	d032      	beq.n	8008bf4 <__sflush_r+0x94>
 8008b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	075a      	lsls	r2, r3, #29
 8008b94:	d505      	bpl.n	8008ba2 <__sflush_r+0x42>
 8008b96:	6863      	ldr	r3, [r4, #4]
 8008b98:	1ac0      	subs	r0, r0, r3
 8008b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b9c:	b10b      	cbz	r3, 8008ba2 <__sflush_r+0x42>
 8008b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba0:	1ac0      	subs	r0, r0, r3
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba8:	4628      	mov	r0, r5
 8008baa:	6a21      	ldr	r1, [r4, #32]
 8008bac:	47b0      	blx	r6
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	d106      	bne.n	8008bc2 <__sflush_r+0x62>
 8008bb4:	6829      	ldr	r1, [r5, #0]
 8008bb6:	291d      	cmp	r1, #29
 8008bb8:	d82c      	bhi.n	8008c14 <__sflush_r+0xb4>
 8008bba:	4a29      	ldr	r2, [pc, #164]	; (8008c60 <__sflush_r+0x100>)
 8008bbc:	40ca      	lsrs	r2, r1
 8008bbe:	07d6      	lsls	r6, r2, #31
 8008bc0:	d528      	bpl.n	8008c14 <__sflush_r+0xb4>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	6062      	str	r2, [r4, #4]
 8008bc6:	6922      	ldr	r2, [r4, #16]
 8008bc8:	04d9      	lsls	r1, r3, #19
 8008bca:	6022      	str	r2, [r4, #0]
 8008bcc:	d504      	bpl.n	8008bd8 <__sflush_r+0x78>
 8008bce:	1c42      	adds	r2, r0, #1
 8008bd0:	d101      	bne.n	8008bd6 <__sflush_r+0x76>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	b903      	cbnz	r3, 8008bd8 <__sflush_r+0x78>
 8008bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bda:	602f      	str	r7, [r5, #0]
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d0cb      	beq.n	8008b78 <__sflush_r+0x18>
 8008be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be4:	4299      	cmp	r1, r3
 8008be6:	d002      	beq.n	8008bee <__sflush_r+0x8e>
 8008be8:	4628      	mov	r0, r5
 8008bea:	f7fe fe6d 	bl	80078c8 <_free_r>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8008bf2:	e7c2      	b.n	8008b7a <__sflush_r+0x1a>
 8008bf4:	6a21      	ldr	r1, [r4, #32]
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b0      	blx	r6
 8008bfc:	1c41      	adds	r1, r0, #1
 8008bfe:	d1c7      	bne.n	8008b90 <__sflush_r+0x30>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0c4      	beq.n	8008b90 <__sflush_r+0x30>
 8008c06:	2b1d      	cmp	r3, #29
 8008c08:	d001      	beq.n	8008c0e <__sflush_r+0xae>
 8008c0a:	2b16      	cmp	r3, #22
 8008c0c:	d101      	bne.n	8008c12 <__sflush_r+0xb2>
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	e7b2      	b.n	8008b78 <__sflush_r+0x18>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e7ae      	b.n	8008b7a <__sflush_r+0x1a>
 8008c1c:	690f      	ldr	r7, [r1, #16]
 8008c1e:	2f00      	cmp	r7, #0
 8008c20:	d0aa      	beq.n	8008b78 <__sflush_r+0x18>
 8008c22:	0793      	lsls	r3, r2, #30
 8008c24:	bf18      	it	ne
 8008c26:	2300      	movne	r3, #0
 8008c28:	680e      	ldr	r6, [r1, #0]
 8008c2a:	bf08      	it	eq
 8008c2c:	694b      	ldreq	r3, [r1, #20]
 8008c2e:	1bf6      	subs	r6, r6, r7
 8008c30:	600f      	str	r7, [r1, #0]
 8008c32:	608b      	str	r3, [r1, #8]
 8008c34:	2e00      	cmp	r6, #0
 8008c36:	dd9f      	ble.n	8008b78 <__sflush_r+0x18>
 8008c38:	4633      	mov	r3, r6
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	6a21      	ldr	r1, [r4, #32]
 8008c40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c44:	47e0      	blx	ip
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dc06      	bgt.n	8008c58 <__sflush_r+0xf8>
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	e790      	b.n	8008b7a <__sflush_r+0x1a>
 8008c58:	4407      	add	r7, r0
 8008c5a:	1a36      	subs	r6, r6, r0
 8008c5c:	e7ea      	b.n	8008c34 <__sflush_r+0xd4>
 8008c5e:	bf00      	nop
 8008c60:	20400001 	.word	0x20400001

08008c64 <_fflush_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	690b      	ldr	r3, [r1, #16]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	b913      	cbnz	r3, 8008c74 <_fflush_r+0x10>
 8008c6e:	2500      	movs	r5, #0
 8008c70:	4628      	mov	r0, r5
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	b118      	cbz	r0, 8008c7e <_fflush_r+0x1a>
 8008c76:	6983      	ldr	r3, [r0, #24]
 8008c78:	b90b      	cbnz	r3, 8008c7e <_fflush_r+0x1a>
 8008c7a:	f000 f871 	bl	8008d60 <__sinit>
 8008c7e:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <_fflush_r+0x6c>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	d11b      	bne.n	8008cbc <_fflush_r+0x58>
 8008c84:	686c      	ldr	r4, [r5, #4]
 8008c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0ef      	beq.n	8008c6e <_fflush_r+0xa>
 8008c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c90:	07d0      	lsls	r0, r2, #31
 8008c92:	d404      	bmi.n	8008c9e <_fflush_r+0x3a>
 8008c94:	0599      	lsls	r1, r3, #22
 8008c96:	d402      	bmi.n	8008c9e <_fflush_r+0x3a>
 8008c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9a:	f000 fdf3 	bl	8009884 <__retarget_lock_acquire_recursive>
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f7ff ff5d 	bl	8008b60 <__sflush_r>
 8008ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca8:	4605      	mov	r5, r0
 8008caa:	07da      	lsls	r2, r3, #31
 8008cac:	d4e0      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	059b      	lsls	r3, r3, #22
 8008cb2:	d4dd      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f000 fded 	bl	8009894 <__retarget_lock_release_recursive>
 8008cba:	e7d9      	b.n	8008c70 <_fflush_r+0xc>
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <_fflush_r+0x70>)
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d101      	bne.n	8008cc6 <_fflush_r+0x62>
 8008cc2:	68ac      	ldr	r4, [r5, #8]
 8008cc4:	e7df      	b.n	8008c86 <_fflush_r+0x22>
 8008cc6:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <_fflush_r+0x74>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	bf08      	it	eq
 8008ccc:	68ec      	ldreq	r4, [r5, #12]
 8008cce:	e7da      	b.n	8008c86 <_fflush_r+0x22>
 8008cd0:	0800c198 	.word	0x0800c198
 8008cd4:	0800c1b8 	.word	0x0800c1b8
 8008cd8:	0800c178 	.word	0x0800c178

08008cdc <std>:
 8008cdc:	2300      	movs	r3, #0
 8008cde:	b510      	push	{r4, lr}
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cea:	6083      	str	r3, [r0, #8]
 8008cec:	8181      	strh	r1, [r0, #12]
 8008cee:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf0:	81c2      	strh	r2, [r0, #14]
 8008cf2:	6183      	str	r3, [r0, #24]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	2208      	movs	r2, #8
 8008cf8:	305c      	adds	r0, #92	; 0x5c
 8008cfa:	f002 fa2b 	bl	800b154 <memset>
 8008cfe:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <std+0x38>)
 8008d00:	6224      	str	r4, [r4, #32]
 8008d02:	6263      	str	r3, [r4, #36]	; 0x24
 8008d04:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <std+0x3c>)
 8008d06:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <std+0x40>)
 8008d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <std+0x44>)
 8008d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	bf00      	nop
 8008d14:	0800b757 	.word	0x0800b757
 8008d18:	0800b779 	.word	0x0800b779
 8008d1c:	0800b7b1 	.word	0x0800b7b1
 8008d20:	0800b7d5 	.word	0x0800b7d5

08008d24 <_cleanup_r>:
 8008d24:	4901      	ldr	r1, [pc, #4]	; (8008d2c <_cleanup_r+0x8>)
 8008d26:	f002 bca8 	b.w	800b67a <_fwalk_reent>
 8008d2a:	bf00      	nop
 8008d2c:	08008c65 	.word	0x08008c65

08008d30 <__sfp_lock_acquire>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__sfp_lock_acquire+0x8>)
 8008d32:	f000 bda7 	b.w	8009884 <__retarget_lock_acquire_recursive>
 8008d36:	bf00      	nop
 8008d38:	20000374 	.word	0x20000374

08008d3c <__sfp_lock_release>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__sfp_lock_release+0x8>)
 8008d3e:	f000 bda9 	b.w	8009894 <__retarget_lock_release_recursive>
 8008d42:	bf00      	nop
 8008d44:	20000374 	.word	0x20000374

08008d48 <__sinit_lock_acquire>:
 8008d48:	4801      	ldr	r0, [pc, #4]	; (8008d50 <__sinit_lock_acquire+0x8>)
 8008d4a:	f000 bd9b 	b.w	8009884 <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000388 	.word	0x20000388

08008d54 <__sinit_lock_release>:
 8008d54:	4801      	ldr	r0, [pc, #4]	; (8008d5c <__sinit_lock_release+0x8>)
 8008d56:	f000 bd9d 	b.w	8009894 <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20000388 	.word	0x20000388

08008d60 <__sinit>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
 8008d64:	f7ff fff0 	bl	8008d48 <__sinit_lock_acquire>
 8008d68:	69a3      	ldr	r3, [r4, #24]
 8008d6a:	b11b      	cbz	r3, 8008d74 <__sinit+0x14>
 8008d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d70:	f7ff bff0 	b.w	8008d54 <__sinit_lock_release>
 8008d74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d78:	6523      	str	r3, [r4, #80]	; 0x50
 8008d7a:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <__sinit+0x68>)
 8008d7c:	4a13      	ldr	r2, [pc, #76]	; (8008dcc <__sinit+0x6c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	bf08      	it	eq
 8008d86:	2301      	moveq	r3, #1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bf08      	it	eq
 8008d8c:	61a3      	streq	r3, [r4, #24]
 8008d8e:	f000 f81f 	bl	8008dd0 <__sfp>
 8008d92:	6060      	str	r0, [r4, #4]
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 f81b 	bl	8008dd0 <__sfp>
 8008d9a:	60a0      	str	r0, [r4, #8]
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f817 	bl	8008dd0 <__sfp>
 8008da2:	2200      	movs	r2, #0
 8008da4:	2104      	movs	r1, #4
 8008da6:	60e0      	str	r0, [r4, #12]
 8008da8:	6860      	ldr	r0, [r4, #4]
 8008daa:	f7ff ff97 	bl	8008cdc <std>
 8008dae:	2201      	movs	r2, #1
 8008db0:	2109      	movs	r1, #9
 8008db2:	68a0      	ldr	r0, [r4, #8]
 8008db4:	f7ff ff92 	bl	8008cdc <std>
 8008db8:	2202      	movs	r2, #2
 8008dba:	2112      	movs	r1, #18
 8008dbc:	68e0      	ldr	r0, [r4, #12]
 8008dbe:	f7ff ff8d 	bl	8008cdc <std>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	61a3      	str	r3, [r4, #24]
 8008dc6:	e7d1      	b.n	8008d6c <__sinit+0xc>
 8008dc8:	0800c168 	.word	0x0800c168
 8008dcc:	08008d25 	.word	0x08008d25

08008dd0 <__sfp>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	f7ff ffac 	bl	8008d30 <__sfp_lock_acquire>
 8008dd8:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <__sfp+0x84>)
 8008dda:	681e      	ldr	r6, [r3, #0]
 8008ddc:	69b3      	ldr	r3, [r6, #24]
 8008dde:	b913      	cbnz	r3, 8008de6 <__sfp+0x16>
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff ffbd 	bl	8008d60 <__sinit>
 8008de6:	3648      	adds	r6, #72	; 0x48
 8008de8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	d503      	bpl.n	8008df8 <__sfp+0x28>
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	b30b      	cbz	r3, 8008e38 <__sfp+0x68>
 8008df4:	6836      	ldr	r6, [r6, #0]
 8008df6:	e7f7      	b.n	8008de8 <__sfp+0x18>
 8008df8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008dfc:	b9d5      	cbnz	r5, 8008e34 <__sfp+0x64>
 8008dfe:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <__sfp+0x88>)
 8008e00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e04:	60e3      	str	r3, [r4, #12]
 8008e06:	6665      	str	r5, [r4, #100]	; 0x64
 8008e08:	f000 fd33 	bl	8009872 <__retarget_lock_init_recursive>
 8008e0c:	f7ff ff96 	bl	8008d3c <__sfp_lock_release>
 8008e10:	2208      	movs	r2, #8
 8008e12:	4629      	mov	r1, r5
 8008e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e1c:	6025      	str	r5, [r4, #0]
 8008e1e:	61a5      	str	r5, [r4, #24]
 8008e20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e24:	f002 f996 	bl	800b154 <memset>
 8008e28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e30:	4620      	mov	r0, r4
 8008e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e34:	3468      	adds	r4, #104	; 0x68
 8008e36:	e7d9      	b.n	8008dec <__sfp+0x1c>
 8008e38:	2104      	movs	r1, #4
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	f002 fc07 	bl	800b64e <__sfmoreglue>
 8008e40:	4604      	mov	r4, r0
 8008e42:	6030      	str	r0, [r6, #0]
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1d5      	bne.n	8008df4 <__sfp+0x24>
 8008e48:	f7ff ff78 	bl	8008d3c <__sfp_lock_release>
 8008e4c:	230c      	movs	r3, #12
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	e7ee      	b.n	8008e30 <__sfp+0x60>
 8008e52:	bf00      	nop
 8008e54:	0800c168 	.word	0x0800c168
 8008e58:	ffff0001 	.word	0xffff0001

08008e5c <__smakebuf_r>:
 8008e5c:	898b      	ldrh	r3, [r1, #12]
 8008e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e60:	079d      	lsls	r5, r3, #30
 8008e62:	4606      	mov	r6, r0
 8008e64:	460c      	mov	r4, r1
 8008e66:	d507      	bpl.n	8008e78 <__smakebuf_r+0x1c>
 8008e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	2301      	movs	r3, #1
 8008e72:	6163      	str	r3, [r4, #20]
 8008e74:	b002      	add	sp, #8
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	466a      	mov	r2, sp
 8008e7a:	ab01      	add	r3, sp, #4
 8008e7c:	f002 fc1c 	bl	800b6b8 <__swhatbuf_r>
 8008e80:	9900      	ldr	r1, [sp, #0]
 8008e82:	4605      	mov	r5, r0
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7fe fd67 	bl	8007958 <_malloc_r>
 8008e8a:	b948      	cbnz	r0, 8008ea0 <__smakebuf_r+0x44>
 8008e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e90:	059a      	lsls	r2, r3, #22
 8008e92:	d4ef      	bmi.n	8008e74 <__smakebuf_r+0x18>
 8008e94:	f023 0303 	bic.w	r3, r3, #3
 8008e98:	f043 0302 	orr.w	r3, r3, #2
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	e7e3      	b.n	8008e68 <__smakebuf_r+0xc>
 8008ea0:	4b0d      	ldr	r3, [pc, #52]	; (8008ed8 <__smakebuf_r+0x7c>)
 8008ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	6020      	str	r0, [r4, #0]
 8008ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	9b00      	ldr	r3, [sp, #0]
 8008eb0:	6120      	str	r0, [r4, #16]
 8008eb2:	6163      	str	r3, [r4, #20]
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	b15b      	cbz	r3, 8008ed0 <__smakebuf_r+0x74>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ebe:	f000 f85b 	bl	8008f78 <_isatty_r>
 8008ec2:	b128      	cbz	r0, 8008ed0 <__smakebuf_r+0x74>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	89a0      	ldrh	r0, [r4, #12]
 8008ed2:	4305      	orrs	r5, r0
 8008ed4:	81a5      	strh	r5, [r4, #12]
 8008ed6:	e7cd      	b.n	8008e74 <__smakebuf_r+0x18>
 8008ed8:	08008d25 	.word	0x08008d25

08008edc <raise>:
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <raise+0xc>)
 8008ede:	4601      	mov	r1, r0
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f002 bc0e 	b.w	800b702 <_raise_r>
 8008ee6:	bf00      	nop
 8008ee8:	200000c0 	.word	0x200000c0

08008eec <_kill_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4d06      	ldr	r5, [pc, #24]	; (8008f0c <_kill_r+0x20>)
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	f000 fcb1 	bl	8009860 <_kill>
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	d102      	bne.n	8008f08 <_kill_r+0x1c>
 8008f02:	682b      	ldr	r3, [r5, #0]
 8008f04:	b103      	cbz	r3, 8008f08 <_kill_r+0x1c>
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000c04 	.word	0x20000c04

08008f10 <_write_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4d05      	ldr	r5, [pc, #20]	; (8008f30 <_write_r+0x20>)
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f000 fc8e 	bl	8009840 <_write>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_write_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_write_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	20000c04 	.word	0x20000c04

08008f34 <_close_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	2300      	movs	r3, #0
 8008f38:	4d05      	ldr	r5, [pc, #20]	; (8008f50 <_close_r+0x1c>)
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f000 fc84 	bl	800984c <_close>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_close_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_close_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20000c04 	.word	0x20000c04

08008f54 <_fstat_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	2300      	movs	r3, #0
 8008f58:	4d06      	ldr	r5, [pc, #24]	; (8008f74 <_fstat_r+0x20>)
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	f000 fc81 	bl	8009868 <_fstat>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d102      	bne.n	8008f70 <_fstat_r+0x1c>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	b103      	cbz	r3, 8008f70 <_fstat_r+0x1c>
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	20000c04 	.word	0x20000c04

08008f78 <_isatty_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4d05      	ldr	r5, [pc, #20]	; (8008f94 <_isatty_r+0x1c>)
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f000 fc67 	bl	8009856 <_isatty>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_isatty_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_isatty_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000c04 	.word	0x20000c04

08008f98 <_lseek_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4d05      	ldr	r5, [pc, #20]	; (8008fb8 <_lseek_r+0x20>)
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f000 fc53 	bl	8009852 <_lseek>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_lseek_r+0x1e>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_lseek_r+0x1e>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000c04 	.word	0x20000c04

08008fbc <_read_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4d05      	ldr	r5, [pc, #20]	; (8008fdc <_read_r+0x20>)
 8008fc8:	602a      	str	r2, [r5, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f000 fc32 	bl	8009834 <_read>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_read_r+0x1e>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_read_r+0x1e>
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	20000c04 	.word	0x20000c04

08008fe0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8008fe0:	4770      	bx	lr

08008fe2 <fill_msg_bit_field>:
static void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 8008fe2:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 8008fe4:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 8008fe6:	e013      	b.n	8009010 <fill_msg_bit_field+0x2e>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8008fe8:	ebac 0e04 	sub.w	lr, ip, r4
 8008fec:	f04f 0c01 	mov.w	ip, #1
 8008ff0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008ff4:	ea01 0c0c 	and.w	ip, r1, ip
 8008ff8:	fa0c fc04 	lsl.w	ip, ip, r4
 8008ffc:	6805      	ldr	r5, [r0, #0]
 8008ffe:	ea45 050c 	orr.w	r5, r5, ip
 8009002:	6005      	str	r5, [r0, #0]
        (*pos)++;
 8009004:	f893 c000 	ldrb.w	ip, [r3]
 8009008:	f10c 0c01 	add.w	ip, ip, #1
 800900c:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 8009010:	f893 c000 	ldrb.w	ip, [r3]
 8009014:	1915      	adds	r5, r2, r4
 8009016:	45ac      	cmp	ip, r5
 8009018:	dbe6      	blt.n	8008fe8 <fill_msg_bit_field+0x6>
}
 800901a:	bd30      	pop	{r4, r5, pc}

0800901c <extract_msg_bit_field>:
static void extract_msg_bit_field(const uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 800901c:	b510      	push	{r4, lr}
    uint8_t start_pos = *pos;
 800901e:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 8009020:	e015      	b.n	800904e <extract_msg_bit_field+0x32>
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009022:	f04f 0c01 	mov.w	ip, #1
 8009026:	fa0c fc0e 	lsl.w	ip, ip, lr
 800902a:	f8d0 e000 	ldr.w	lr, [r0]
 800902e:	ea0e 0c0c 	and.w	ip, lr, ip
 8009032:	fa2c fc04 	lsr.w	ip, ip, r4
 8009036:	f891 e000 	ldrb.w	lr, [r1]
 800903a:	ea4e 0c0c 	orr.w	ip, lr, ip
 800903e:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 8009042:	f893 c000 	ldrb.w	ip, [r3]
 8009046:	f10c 0c01 	add.w	ip, ip, #1
 800904a:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 800904e:	f893 e000 	ldrb.w	lr, [r3]
 8009052:	eb02 0c04 	add.w	ip, r2, r4
 8009056:	45e6      	cmp	lr, ip
 8009058:	dbe3      	blt.n	8009022 <extract_msg_bit_field+0x6>
}
 800905a:	bd10      	pop	{r4, pc}

0800905c <reverse>:
static uint8_t reverse(uint8_t input) {
 800905c:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800905e:	461a      	mov	r2, r3
    while( pos < 7 ) {
 8009060:	e007      	b.n	8009072 <reverse+0x16>
        bit = input & BIT(0);
 8009062:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 8009066:	430b      	orrs	r3, r1
        output = output << 1;
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800906c:	0840      	lsrs	r0, r0, #1
        pos++;
 800906e:	3201      	adds	r2, #1
 8009070:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 8009072:	2a06      	cmp	r2, #6
 8009074:	d9f5      	bls.n	8009062 <reverse+0x6>
    bit = input & BIT(0);
 8009076:	f000 0001 	and.w	r0, r0, #1
}
 800907a:	4318      	orrs	r0, r3
 800907c:	4770      	bx	lr

0800907e <arch_printk_char_out>:
}
 800907e:	2000      	movs	r0, #0
 8009080:	4770      	bx	lr

08009082 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
 8009082:	b40f      	push	{r0, r1, r2, r3}
 8009084:	b500      	push	{lr}
 8009086:	b083      	sub	sp, #12
 8009088:	a904      	add	r1, sp, #16
 800908a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800908e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8009090:	f7f8 fe7a 	bl	8001d88 <vprintk>
	}
	va_end(ap);
}
 8009094:	b003      	add	sp, #12
 8009096:	f85d eb04 	ldr.w	lr, [sp], #4
 800909a:	b004      	add	sp, #16
 800909c:	4770      	bx	lr

0800909e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800909e:	b508      	push	{r3, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	4608      	mov	r0, r1
 80090a4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 80090a6:	461a      	mov	r2, r3
 80090a8:	47a0      	blx	r4
	return z_impl_z_current_get();
 80090aa:	f7fd fe65 	bl	8006d78 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80090ae:	f7f9 fe55 	bl	8002d5c <z_impl_k_thread_abort>

080090b2 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 80090b2:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
 80090b4:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80090b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ba:	d303      	bcc.n	80090c4 <chunk_mem+0x12>
 80090bc:	2308      	movs	r3, #8
 80090be:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
 80090c0:	4408      	add	r0, r1
 80090c2:	4770      	bx	lr
 80090c4:	2304      	movs	r3, #4
 80090c6:	e7fa      	b.n	80090be <chunk_mem+0xc>

080090c8 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 80090c8:	b410      	push	{r4}
	void *cmem = &buf[c];
 80090ca:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 80090ce:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80090d0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80090d4:	d319      	bcc.n	800910a <free_list_remove_bidx+0x42>
		return ((uint32_t *)cmem)[f];
 80090d6:	f8dc 300c 	ldr.w	r3, [ip, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
 80090da:	4299      	cmp	r1, r3
 80090dc:	d018      	beq.n	8009110 <free_list_remove_bidx+0x48>
	if (big_heap(h)) {
 80090de:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80090e2:	d322      	bcc.n	800912a <free_list_remove_bidx+0x62>
		return ((uint32_t *)cmem)[f];
 80090e4:	f8dc 1008 	ldr.w	r1, [ip, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
 80090e8:	3204      	adds	r2, #4
 80090ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 80090ee:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 80090f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80090f6:	d31b      	bcc.n	8009130 <free_list_remove_bidx+0x68>
		((uint32_t *)cmem)[f] = val;
 80090f8:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
 80090fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 80090fe:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8009100:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009104:	d316      	bcc.n	8009134 <free_list_remove_bidx+0x6c>
		((uint32_t *)cmem)[f] = val;
 8009106:	6099      	str	r1, [r3, #8]
 8009108:	e00d      	b.n	8009126 <free_list_remove_bidx+0x5e>
		return ((uint16_t *)cmem)[f];
 800910a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
 800910e:	e7e4      	b.n	80090da <free_list_remove_bidx+0x12>
		h->avail_buckets &= ~(1 << bidx);
 8009110:	2301      	movs	r3, #1
 8009112:	fa03 f102 	lsl.w	r1, r3, r2
 8009116:	68c3      	ldr	r3, [r0, #12]
 8009118:	ea23 0301 	bic.w	r3, r3, r1
 800911c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 800911e:	3204      	adds	r2, #4
 8009120:	2300      	movs	r3, #0
 8009122:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
 8009126:	bc10      	pop	{r4}
 8009128:	4770      	bx	lr
 800912a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800912e:	e7db      	b.n	80090e8 <free_list_remove_bidx+0x20>
		((uint16_t *)cmem)[f] = val;
 8009130:	80d3      	strh	r3, [r2, #6]
 8009132:	e7e2      	b.n	80090fa <free_list_remove_bidx+0x32>
 8009134:	8099      	strh	r1, [r3, #4]
 8009136:	e7f6      	b.n	8009126 <free_list_remove_bidx+0x5e>

08009138 <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 8009138:	1d13      	adds	r3, r2, #4
 800913a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800913e:	b9d3      	cbnz	r3, 8009176 <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 8009140:	2301      	movs	r3, #1
 8009142:	fa03 fc02 	lsl.w	ip, r3, r2
 8009146:	68c3      	ldr	r3, [r0, #12]
 8009148:	ea43 030c 	orr.w	r3, r3, ip
 800914c:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800914e:	3204      	adds	r2, #4
 8009150:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 8009154:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009158:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800915a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800915e:	d306      	bcc.n	800916e <free_list_add_bidx+0x36>
		((uint32_t *)cmem)[f] = val;
 8009160:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 8009162:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 8009164:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009168:	d303      	bcc.n	8009172 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800916a:	60d9      	str	r1, [r3, #12]
 800916c:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
 800916e:	8099      	strh	r1, [r3, #4]
 8009170:	e7f7      	b.n	8009162 <free_list_add_bidx+0x2a>
 8009172:	80d9      	strh	r1, [r3, #6]
 8009174:	4770      	bx	lr
{
 8009176:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 8009178:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 800917c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800917e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009182:	d31c      	bcc.n	80091be <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 8009184:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 8009188:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 800918c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009190:	d318      	bcc.n	80091c4 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 8009192:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 8009196:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8009198:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800919c:	d315      	bcc.n	80091ca <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 800919e:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 80091a2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 80091a6:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80091a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ac:	d310      	bcc.n	80091d0 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 80091ae:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 80091b0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 80091b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091b6:	d30d      	bcc.n	80091d4 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 80091b8:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 80091bc:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 80091be:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80091c2:	e7e1      	b.n	8009188 <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 80091c4:	f8ae 2004 	strh.w	r2, [lr, #4]
 80091c8:	e7e5      	b.n	8009196 <free_list_add_bidx+0x5e>
 80091ca:	f8ae 3006 	strh.w	r3, [lr, #6]
 80091ce:	e7e8      	b.n	80091a2 <free_list_add_bidx+0x6a>
 80091d0:	80d1      	strh	r1, [r2, #6]
 80091d2:	e7ed      	b.n	80091b0 <free_list_add_bidx+0x78>
 80091d4:	f8ac 1004 	strh.w	r1, [ip, #4]
 80091d8:	e7f0      	b.n	80091bc <free_list_add_bidx+0x84>

080091da <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 80091da:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 80091dc:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 80091e0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80091e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80091e6:	d329      	bcc.n	800923c <split_chunks+0x62>
		return ((uint32_t *)cmem)[f];
 80091e8:	f8dc 5004 	ldr.w	r5, [ip, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
 80091ec:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
 80091ee:	1a89      	subs	r1, r1, r2
 80091f0:	eb01 0155 	add.w	r1, r1, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80091f4:	005d      	lsls	r5, r3, #1
	if (big_heap(h)) {
 80091f6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80091fa:	d322      	bcc.n	8009242 <split_chunks+0x68>
		((uint32_t *)cmem)[f] = val;
 80091fc:	f8cc 5004 	str.w	r5, [ip, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8009200:	004c      	lsls	r4, r1, #1
	void *cmem = &buf[c];
 8009202:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
	if (big_heap(h)) {
 8009206:	6885      	ldr	r5, [r0, #8]
 8009208:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800920c:	d31c      	bcc.n	8009248 <split_chunks+0x6e>
		((uint32_t *)cmem)[f] = val;
 800920e:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 8009212:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 8009214:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009218:	d319      	bcc.n	800924e <split_chunks+0x74>
		((uint32_t *)cmem)[f] = val;
 800921a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
 800921e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 8009220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009224:	d316      	bcc.n	8009254 <split_chunks+0x7a>
		return ((uint32_t *)cmem)[f];
 8009226:	f8dc 4004 	ldr.w	r4, [ip, #4]
	return c + chunk_size(h, c);
 800922a:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
 800922e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009232:	d312      	bcc.n	800925a <split_chunks+0x80>
		((uint32_t *)cmem)[f] = val;
 8009234:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
 8009238:	bc30      	pop	{r4, r5}
 800923a:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
 800923c:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 8009240:	e7d4      	b.n	80091ec <split_chunks+0x12>
		((uint16_t *)cmem)[f] = val;
 8009242:	f8ac 5002 	strh.w	r5, [ip, #2]
 8009246:	e7db      	b.n	8009200 <split_chunks+0x26>
 8009248:	f8ac 4002 	strh.w	r4, [ip, #2]
 800924c:	e7e1      	b.n	8009212 <split_chunks+0x38>
 800924e:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
 8009252:	e7e4      	b.n	800921e <split_chunks+0x44>
		return ((uint16_t *)cmem)[f];
 8009254:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 8009258:	e7e7      	b.n	800922a <split_chunks+0x50>
		((uint16_t *)cmem)[f] = val;
 800925a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
 800925e:	e7eb      	b.n	8009238 <split_chunks+0x5e>

08009260 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
 8009260:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
 8009262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009266:	d304      	bcc.n	8009272 <mem_to_chunkid+0x12>
 8009268:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 800926a:	1ac9      	subs	r1, r1, r3
 800926c:	1a08      	subs	r0, r1, r0
}
 800926e:	08c0      	lsrs	r0, r0, #3
 8009270:	4770      	bx	lr
 8009272:	2304      	movs	r3, #4
 8009274:	e7f9      	b.n	800926a <mem_to_chunkid+0xa>

08009276 <free_list_add>:
{
 8009276:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 8009278:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
 800927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927e:	d307      	bcc.n	8009290 <free_list_add+0x1a>
	void *cmem = &buf[c];
 8009280:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 8009284:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8009286:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 8009288:	2a01      	cmp	r2, #1
 800928a:	d002      	beq.n	8009292 <free_list_add+0x1c>
 800928c:	2200      	movs	r2, #0
 800928e:	e000      	b.n	8009292 <free_list_add+0x1c>
 8009290:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 8009292:	b9a2      	cbnz	r2, 80092be <free_list_add+0x48>
	void *cmem = &buf[c];
 8009294:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 8009298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800929c:	d310      	bcc.n	80092c0 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800929e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80092a0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a6:	d30d      	bcc.n	80092c4 <free_list_add+0x4e>
 80092a8:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80092aa:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 80092ac:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 80092b0:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 80092b2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
 80092b6:	f1c2 021f 	rsb	r2, r2, #31
 80092ba:	f7ff ff3d 	bl	8009138 <free_list_add_bidx>
}
 80092be:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 80092c0:	8852      	ldrh	r2, [r2, #2]
 80092c2:	e7ed      	b.n	80092a0 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 80092c4:	2304      	movs	r3, #4
 80092c6:	e7f0      	b.n	80092aa <free_list_add+0x34>

080092c8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
 80092ca:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
 80092cc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80092d0:	d310      	bcc.n	80092f4 <alloc_chunk+0x2c>
 80092d2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80092d4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 80092d6:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
 80092da:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 80092dc:	fab3 f383 	clz	r3, r3
 80092e0:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 80092e4:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
 80092e8:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80092ec:	b346      	cbz	r6, 8009340 <alloc_chunk+0x78>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
 80092ee:	f04f 0c03 	mov.w	ip, #3
 80092f2:	e012      	b.n	800931a <alloc_chunk+0x52>
	return big_heap(h) ? 8 : 4;
 80092f4:	2304      	movs	r3, #4
 80092f6:	e7ed      	b.n	80092d4 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
 80092f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092fc:	e017      	b.n	800932e <alloc_chunk+0x66>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
 80092fe:	4621      	mov	r1, r4
 8009300:	f7ff fee2 	bl	80090c8 <free_list_remove_bidx>
				return c;
 8009304:	e024      	b.n	8009350 <alloc_chunk+0x88>
 8009306:	f8be 4006 	ldrh.w	r4, [lr, #6]
			}
			b->next = next_free_chunk(h, c);
 800930a:	1d17      	adds	r7, r2, #4
 800930c:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
 8009310:	f1bc 0c01 	subs.w	ip, ip, #1
 8009314:	d014      	beq.n	8009340 <alloc_chunk+0x78>
 8009316:	42a6      	cmp	r6, r4
 8009318:	d012      	beq.n	8009340 <alloc_chunk+0x78>
			chunkid_t c = b->next;
 800931a:	1d14      	adds	r4, r2, #4
 800931c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
 8009320:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
	if (big_heap(h)) {
 8009324:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009328:	d3e6      	bcc.n	80092f8 <alloc_chunk+0x30>
		return ((uint32_t *)cmem)[f];
 800932a:	f8de 7004 	ldr.w	r7, [lr, #4]
			if (chunk_size(h, c) >= sz) {
 800932e:	ebb1 0f57 	cmp.w	r1, r7, lsr #1
 8009332:	d9e4      	bls.n	80092fe <alloc_chunk+0x36>
	if (big_heap(h)) {
 8009334:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009338:	d3e5      	bcc.n	8009306 <alloc_chunk+0x3e>
		return ((uint32_t *)cmem)[f];
 800933a:	f8de 400c 	ldr.w	r4, [lr, #12]
 800933e:	e7e4      	b.n	800930a <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
 8009340:	68c4      	ldr	r4, [r0, #12]
 8009342:	f1c3 0220 	rsb	r2, r3, #32
 8009346:	2301      	movs	r3, #1
 8009348:	4093      	lsls	r3, r2
 800934a:	425b      	negs	r3, r3

	if (bmask != 0U) {
 800934c:	401c      	ands	r4, r3
 800934e:	d101      	bne.n	8009354 <alloc_chunk+0x8c>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 8009350:	4620      	mov	r0, r4
 8009352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
 8009354:	fa94 f2a4 	rbit	r2, r4
 8009358:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 800935c:	1d13      	adds	r3, r2, #4
 800935e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 8009362:	4621      	mov	r1, r4
 8009364:	f7ff feb0 	bl	80090c8 <free_list_remove_bidx>
		return c;
 8009368:	e7f2      	b.n	8009350 <alloc_chunk+0x88>

0800936a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 800936a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
 800936c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
 800936e:	2900      	cmp	r1, #0
 8009370:	d03e      	beq.n	80093f0 <sys_heap_alloc+0x86>
 8009372:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 8009374:	68aa      	ldr	r2, [r5, #8]
 8009376:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
 800937a:	d93b      	bls.n	80093f4 <sys_heap_alloc+0x8a>
	return big_heap(h) ? 8 : 4;
 800937c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009380:	d322      	bcc.n	80093c8 <sys_heap_alloc+0x5e>
 8009382:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 8009384:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009386:	3407      	adds	r4, #7
 8009388:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
 800938a:	4621      	mov	r1, r4
 800938c:	4628      	mov	r0, r5
 800938e:	f7ff ff9b 	bl	80092c8 <alloc_chunk>
	if (c == 0U) {
 8009392:	4606      	mov	r6, r0
 8009394:	b380      	cbz	r0, 80093f8 <sys_heap_alloc+0x8e>
	void *cmem = &buf[c];
 8009396:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
 800939a:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
 800939c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80093a0:	d314      	bcc.n	80093cc <sys_heap_alloc+0x62>
		return ((uint32_t *)cmem)[f];
 80093a2:	685b      	ldr	r3, [r3, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
 80093a4:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 80093a8:	d312      	bcc.n	80093d0 <sys_heap_alloc+0x66>
	void *cmem = &buf[c];
 80093aa:	eb05 03c6 	add.w	r3, r5, r6, lsl #3
	return big_heap_chunks(h->end_chunk);
 80093ae:	68aa      	ldr	r2, [r5, #8]
	if (big_heap(h)) {
 80093b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80093b4:	d317      	bcc.n	80093e6 <sys_heap_alloc+0x7c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	f042 0201 	orr.w	r2, r2, #1
 80093bc:	605a      	str	r2, [r3, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	f7ff fe76 	bl	80090b2 <chunk_mem>
}
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
	return big_heap(h) ? 8 : 4;
 80093c8:	2404      	movs	r4, #4
 80093ca:	e7db      	b.n	8009384 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	e7e9      	b.n	80093a4 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
 80093d0:	4434      	add	r4, r6
 80093d2:	4622      	mov	r2, r4
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7ff feff 	bl	80091da <split_chunks>
		free_list_add(h, c + chunk_sz);
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f7ff ff49 	bl	8009276 <free_list_add>
 80093e4:	e7e1      	b.n	80093aa <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80093e6:	885a      	ldrh	r2, [r3, #2]
 80093e8:	f042 0201 	orr.w	r2, r2, #1
 80093ec:	805a      	strh	r2, [r3, #2]
 80093ee:	e7e6      	b.n	80093be <sys_heap_alloc+0x54>
		return NULL;
 80093f0:	2000      	movs	r0, #0
 80093f2:	e7e8      	b.n	80093c6 <sys_heap_alloc+0x5c>
 80093f4:	2000      	movs	r0, #0
 80093f6:	e7e6      	b.n	80093c6 <sys_heap_alloc+0x5c>
		return NULL;
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7e4      	b.n	80093c6 <sys_heap_alloc+0x5c>

080093fc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 80093fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
 8009404:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 8009406:	424b      	negs	r3, r1
 8009408:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
 800940c:	ea31 0303 	bics.w	r3, r1, r3
 8009410:	d052      	beq.n	80094b8 <sys_heap_aligned_alloc+0xbc>
		align -= rew;
 8009412:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
 8009416:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
 8009418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941c:	d34a      	bcc.n	80094b4 <sys_heap_aligned_alloc+0xb8>
 800941e:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
 8009420:	4598      	cmp	r8, r3
 8009422:	d200      	bcs.n	8009426 <sys_heap_aligned_alloc+0x2a>
 8009424:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 8009426:	2c00      	cmp	r4, #0
 8009428:	d076      	beq.n	8009518 <sys_heap_aligned_alloc+0x11c>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 800942a:	68b2      	ldr	r2, [r6, #8]
 800942c:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
 8009430:	d974      	bls.n	800951c <sys_heap_aligned_alloc+0x120>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 8009432:	1929      	adds	r1, r5, r4
 8009434:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
 8009436:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800943a:	d34e      	bcc.n	80094da <sys_heap_aligned_alloc+0xde>
 800943c:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
 800943e:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009440:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 8009442:	08c9      	lsrs	r1, r1, #3
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff ff3f 	bl	80092c8 <alloc_chunk>

	if (c0 == 0) {
 800944a:	4607      	mov	r7, r0
 800944c:	2800      	cmp	r0, #0
 800944e:	d067      	beq.n	8009520 <sys_heap_aligned_alloc+0x124>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
 8009450:	4601      	mov	r1, r0
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff fe2d 	bl	80090b2 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 8009458:	4440      	add	r0, r8
 800945a:	4428      	add	r0, r5
 800945c:	3801      	subs	r0, #1
 800945e:	426d      	negs	r5, r5
 8009460:	4005      	ands	r5, r0
 8009462:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8009466:	442c      	add	r4, r5
 8009468:	3407      	adds	r4, #7
 800946a:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff fef5 	bl	8009260 <mem_to_chunkid>
 8009476:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
 8009478:	1ba4      	subs	r4, r4, r6
 800947a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
 800947c:	4287      	cmp	r7, r0
 800947e:	d32e      	bcc.n	80094de <sys_heap_aligned_alloc+0xe2>
	void *cmem = &buf[c];
 8009480:	eb06 02c8 	add.w	r2, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
 8009484:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
 8009486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800948a:	d332      	bcc.n	80094f2 <sys_heap_aligned_alloc+0xf6>
		return ((uint32_t *)cmem)[f];
 800948c:	6853      	ldr	r3, [r2, #4]
	return c + chunk_size(h, c);
 800948e:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
 8009492:	429c      	cmp	r4, r3
 8009494:	d32f      	bcc.n	80094f6 <sys_heap_aligned_alloc+0xfa>
	void *cmem = &buf[c];
 8009496:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
 800949a:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
 800949c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a0:	d333      	bcc.n	800950a <sys_heap_aligned_alloc+0x10e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80094a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094a6:	f043 0301 	orr.w	r3, r3, #1
 80094aa:	f8c8 3004 	str.w	r3, [r8, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
 80094ae:	4628      	mov	r0, r5
 80094b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
 80094b4:	2304      	movs	r3, #4
 80094b6:	e7b3      	b.n	8009420 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
 80094b8:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
 80094ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094be:	d305      	bcc.n	80094cc <sys_heap_aligned_alloc+0xd0>
 80094c0:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
 80094c2:	429d      	cmp	r5, r3
 80094c4:	d904      	bls.n	80094d0 <sys_heap_aligned_alloc+0xd4>
		rew = 0;
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	e7ac      	b.n	8009426 <sys_heap_aligned_alloc+0x2a>
 80094cc:	2304      	movs	r3, #4
 80094ce:	e7f8      	b.n	80094c2 <sys_heap_aligned_alloc+0xc6>
			return sys_heap_alloc(heap, bytes);
 80094d0:	4621      	mov	r1, r4
 80094d2:	f7ff ff4a 	bl	800936a <sys_heap_alloc>
 80094d6:	4605      	mov	r5, r0
 80094d8:	e7e9      	b.n	80094ae <sys_heap_aligned_alloc+0xb2>
 80094da:	2304      	movs	r3, #4
 80094dc:	e7af      	b.n	800943e <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
 80094de:	4602      	mov	r2, r0
 80094e0:	4639      	mov	r1, r7
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff fe79 	bl	80091da <split_chunks>
		free_list_add(h, c0);
 80094e8:	4639      	mov	r1, r7
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7ff fec3 	bl	8009276 <free_list_add>
 80094f0:	e7c6      	b.n	8009480 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
 80094f2:	8853      	ldrh	r3, [r2, #2]
 80094f4:	e7cb      	b.n	800948e <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
 80094f6:	4622      	mov	r2, r4
 80094f8:	4641      	mov	r1, r8
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7ff fe6d 	bl	80091da <split_chunks>
		free_list_add(h, c_end);
 8009500:	4621      	mov	r1, r4
 8009502:	4630      	mov	r0, r6
 8009504:	f7ff feb7 	bl	8009276 <free_list_add>
 8009508:	e7c5      	b.n	8009496 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800950a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800950e:	f043 0301 	orr.w	r3, r3, #1
 8009512:	f8a8 3002 	strh.w	r3, [r8, #2]
}
 8009516:	e7ca      	b.n	80094ae <sys_heap_aligned_alloc+0xb2>
		return NULL;
 8009518:	2500      	movs	r5, #0
 800951a:	e7c8      	b.n	80094ae <sys_heap_aligned_alloc+0xb2>
 800951c:	2500      	movs	r5, #0
 800951e:	e7c6      	b.n	80094ae <sys_heap_aligned_alloc+0xb2>
		return NULL;
 8009520:	2500      	movs	r5, #0
 8009522:	e7c4      	b.n	80094ae <sys_heap_aligned_alloc+0xb2>

08009524 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 8009528:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800952c:	d324      	bcc.n	8009578 <sys_heap_init+0x54>
 800952e:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8009532:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8009536:	1dc8      	adds	r0, r1, #7
 8009538:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800953c:	448c      	add	ip, r1
 800953e:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8009542:	ebac 0c00 	sub.w	ip, ip, r0
 8009546:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800954a:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800954c:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 8009552:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009556:	d312      	bcc.n	800957e <sys_heap_init+0x5a>
 8009558:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800955a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800955c:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 8009560:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 8009562:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8009566:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800956a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800956e:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8009570:	1dde      	adds	r6, r3, #7
 8009572:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8009574:	2300      	movs	r3, #0
 8009576:	e009      	b.n	800958c <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 8009578:	f04f 0c04 	mov.w	ip, #4
 800957c:	e7d9      	b.n	8009532 <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 800957e:	2304      	movs	r3, #4
 8009580:	e7eb      	b.n	800955a <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 8009582:	1d1a      	adds	r2, r3, #4
 8009584:	2400      	movs	r4, #0
 8009586:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800958a:	3301      	adds	r3, #1
 800958c:	4573      	cmp	r3, lr
 800958e:	dbf8      	blt.n	8009582 <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8009590:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 8009592:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009596:	d336      	bcc.n	8009606 <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 8009598:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 800959a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800959e:	d334      	bcc.n	800960a <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 80095a0:	2300      	movs	r3, #0
 80095a2:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 80095a4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80095a8:	d332      	bcc.n	8009610 <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80095aa:	6843      	ldr	r3, [r0, #4]
 80095ac:	f043 0301 	orr.w	r3, r3, #1
 80095b0:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80095b2:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80095b4:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 80095b6:	f026 0307 	bic.w	r3, r6, #7
 80095ba:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 80095bc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80095c0:	d32b      	bcc.n	800961a <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 80095c2:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 80095c4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80095c6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095ca:	d328      	bcc.n	800961e <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 80095cc:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 80095ce:	f02c 0307 	bic.w	r3, ip, #7
 80095d2:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 80095d4:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80095d6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095da:	d322      	bcc.n	8009622 <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 80095dc:	2400      	movs	r4, #0
 80095de:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 80095e2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 80095e4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80095e8:	d31f      	bcc.n	800962a <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 80095ea:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 80095ec:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 80095f0:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 80095f2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80095f6:	d31a      	bcc.n	800962e <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 8009600:	f7ff fe39 	bl	8009276 <free_list_add>
}
 8009604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 8009606:	8043      	strh	r3, [r0, #2]
 8009608:	e7c7      	b.n	800959a <sys_heap_init+0x76>
 800960a:	2300      	movs	r3, #0
 800960c:	8003      	strh	r3, [r0, #0]
 800960e:	e7c9      	b.n	80095a4 <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8009610:	8843      	ldrh	r3, [r0, #2]
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	8043      	strh	r3, [r0, #2]
 8009618:	e7cb      	b.n	80095b2 <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 800961a:	8067      	strh	r7, [r4, #2]
 800961c:	e7d2      	b.n	80095c4 <sys_heap_init+0xa0>
 800961e:	52c1      	strh	r1, [r0, r3]
 8009620:	e7d5      	b.n	80095ce <sys_heap_init+0xaa>
 8009622:	2400      	movs	r4, #0
 8009624:	f8ac 4002 	strh.w	r4, [ip, #2]
 8009628:	e7db      	b.n	80095e2 <sys_heap_init+0xbe>
 800962a:	52c2      	strh	r2, [r0, r3]
 800962c:	e7de      	b.n	80095ec <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800962e:	885a      	ldrh	r2, [r3, #2]
 8009630:	f042 0201 	orr.w	r2, r2, #1
 8009634:	805a      	strh	r2, [r3, #2]
 8009636:	e7e3      	b.n	8009600 <sys_heap_init+0xdc>

08009638 <outs>:
{
 8009638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963c:	4607      	mov	r7, r0
 800963e:	460e      	mov	r6, r1
 8009640:	4614      	mov	r4, r2
 8009642:	4698      	mov	r8, r3
	size_t count = 0;
 8009644:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8009646:	e006      	b.n	8009656 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 8009648:	4631      	mov	r1, r6
 800964a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800964e:	47b8      	blx	r7
		if (rc < 0) {
 8009650:	2800      	cmp	r0, #0
 8009652:	db09      	blt.n	8009668 <outs+0x30>
		++count;
 8009654:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8009656:	4544      	cmp	r4, r8
 8009658:	d3f6      	bcc.n	8009648 <outs+0x10>
 800965a:	f1b8 0f00 	cmp.w	r8, #0
 800965e:	d102      	bne.n	8009666 <outs+0x2e>
 8009660:	7823      	ldrb	r3, [r4, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1f0      	bne.n	8009648 <outs+0x10>
	return (int)count;
 8009666:	4628      	mov	r0, r5
}
 8009668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800966c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800966c:	4770      	bx	lr

0800966e <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800966e:	2000      	movs	r0, #0
 8009670:	4770      	bx	lr

08009672 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8009672:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 8009674:	f7f9 f8ca 	bl	800280c <__do_global_ctors_aux>
	__do_init_array_aux();
 8009678:	f7f9 f8ba 	bl	80027f0 <__do_init_array_aux>
}
 800967c:	bd08      	pop	{r3, pc}

0800967e <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 800967e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 8009680:	b329      	cbz	r1, 80096ce <stm32_dt_pinctrl_configure+0x50>
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 8009686:	2400      	movs	r4, #0
	uint32_t func = 0;
 8009688:	4625      	mov	r5, r4
 800968a:	e00f      	b.n	80096ac <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800968c:	b2d3      	uxtb	r3, r2
 800968e:	2b10      	cmp	r3, #16
 8009690:	d019      	beq.n	80096c6 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8009692:	0b13      	lsrs	r3, r2, #12
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	4629      	mov	r1, r5
 80096a0:	4318      	orrs	r0, r3
 80096a2:	f7f9 f8c3 	bl	800282c <stm32_pin_configure>
		if (ret != 0) {
 80096a6:	4603      	mov	r3, r0
 80096a8:	b990      	cbnz	r0, 80096d0 <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 80096aa:	3401      	adds	r4, #1
 80096ac:	42bc      	cmp	r4, r7
 80096ae:	d20c      	bcs.n	80096ca <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 80096b0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 80096b4:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 80096b8:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80096bc:	d1e6      	bne.n	800968c <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 80096be:	685d      	ldr	r5, [r3, #4]
 80096c0:	f045 0520 	orr.w	r5, r5, #32
 80096c4:	e7e5      	b.n	8009692 <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 80096c6:	2530      	movs	r5, #48	; 0x30
 80096c8:	e7e3      	b.n	8009692 <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e000      	b.n	80096d0 <stm32_dt_pinctrl_configure+0x52>
		return 0;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096d4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80096d4:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 80096d6:	f001 f8a2 	bl	800a81e <z_fatal_error>
}
 80096da:	bd08      	pop	{r3, pc}

080096dc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80096dc:	b508      	push	{r3, lr}
 80096de:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 80096e0:	6800      	ldr	r0, [r0, #0]
 80096e2:	f7ff fff7 	bl	80096d4 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 80096e6:	bd08      	pop	{r3, pc}

080096e8 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 80096e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 80096ea:	2100      	movs	r1, #0
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7ff fff1 	bl	80096d4 <z_arm_fatal_error>
}
 80096f2:	bd08      	pop	{r3, pc}

080096f4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80096f4:	b508      	push	{r3, lr}
	handler();
 80096f6:	f7f9 f8f7 	bl	80028e8 <z_SysNmiOnReset>
	z_arm_int_exit();
 80096fa:	f7f9 f9d5 	bl	8002aa8 <z_arm_exc_exit>
}
 80096fe:	bd08      	pop	{r3, pc}

08009700 <memory_fault_recoverable>:
}
 8009700:	2000      	movs	r0, #0
 8009702:	4770      	bx	lr

08009704 <debug_monitor>:
	*recoverable = false;
 8009704:	2300      	movs	r3, #0
 8009706:	700b      	strb	r3, [r1, #0]
}
 8009708:	4770      	bx	lr

0800970a <fault_handle>:
{
 800970a:	b508      	push	{r3, lr}
	*recoverable = false;
 800970c:	2300      	movs	r3, #0
 800970e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 8009710:	1ecb      	subs	r3, r1, #3
 8009712:	2b09      	cmp	r3, #9
 8009714:	d81a      	bhi.n	800974c <fault_handle+0x42>
 8009716:	e8df f003 	tbb	[pc, r3]
 800971a:	0905      	.short	0x0905
 800971c:	1919110d 	.word	0x1919110d
 8009720:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 8009724:	4611      	mov	r1, r2
 8009726:	f7f9 fa47 	bl	8002bb8 <hard_fault>
		break;
 800972a:	e010      	b.n	800974e <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
 800972c:	2100      	movs	r1, #0
 800972e:	f7f9 f9ff 	bl	8002b30 <mem_manage_fault>
		break;
 8009732:	e00c      	b.n	800974e <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
 8009734:	2100      	movs	r1, #0
 8009736:	f7f9 f9c5 	bl	8002ac4 <bus_fault>
		break;
 800973a:	e008      	b.n	800974e <fault_handle+0x44>
		reason = usage_fault(esf);
 800973c:	f7f9 f9e6 	bl	8002b0c <usage_fault>
		break;
 8009740:	e005      	b.n	800974e <fault_handle+0x44>
		debug_monitor(esf, recoverable);
 8009742:	4611      	mov	r1, r2
 8009744:	f7ff ffde 	bl	8009704 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8009748:	2000      	movs	r0, #0
		break;
 800974a:	e000      	b.n	800974e <fault_handle+0x44>
	switch (fault) {
 800974c:	2000      	movs	r0, #0
}
 800974e:	bd08      	pop	{r3, pc}

08009750 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 8009750:	6843      	ldr	r3, [r0, #4]
 8009752:	1e5a      	subs	r2, r3, #1
		&&
 8009754:	4213      	tst	r3, r2
 8009756:	d106      	bne.n	8009766 <mpu_partition_is_valid+0x16>
		&&
 8009758:	2b1f      	cmp	r3, #31
 800975a:	d906      	bls.n	800976a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800975c:	6803      	ldr	r3, [r0, #0]
		&&
 800975e:	421a      	tst	r2, r3
 8009760:	d005      	beq.n	800976e <mpu_partition_is_valid+0x1e>
 8009762:	2000      	movs	r0, #0
 8009764:	4770      	bx	lr
 8009766:	2000      	movs	r0, #0
 8009768:	4770      	bx	lr
 800976a:	2000      	movs	r0, #0
 800976c:	4770      	bx	lr
 800976e:	2001      	movs	r0, #1
}
 8009770:	4770      	bx	lr

08009772 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
 8009772:	2807      	cmp	r0, #7
 8009774:	d805      	bhi.n	8009782 <region_allocate_and_init+0x10>
{
 8009776:	b510      	push	{r4, lr}
 8009778:	4604      	mov	r4, r0
	region_init(index, region_conf);
 800977a:	f7f9 fb25 	bl	8002dc8 <region_init>
	return index;
 800977e:	4620      	mov	r0, r4
}
 8009780:	bd10      	pop	{r4, pc}
		return -EINVAL;
 8009782:	f06f 0015 	mvn.w	r0, #21
}
 8009786:	4770      	bx	lr

08009788 <mpu_configure_region>:
{
 8009788:	b500      	push	{lr}
 800978a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800978c:	680b      	ldr	r3, [r1, #0]
 800978e:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8009790:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8009792:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 8009794:	2b20      	cmp	r3, #32
 8009796:	d912      	bls.n	80097be <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 8009798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800979c:	d811      	bhi.n	80097c2 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800979e:	3b01      	subs	r3, #1
 80097a0:	fab3 f383 	clz	r3, r3
 80097a4:	f1c3 031f 	rsb	r3, r3, #31
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80097ae:	4313      	orrs	r3, r2
 80097b0:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 80097b2:	a901      	add	r1, sp, #4
 80097b4:	f7ff ffdd 	bl	8009772 <region_allocate_and_init>
}
 80097b8:	b005      	add	sp, #20
 80097ba:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 80097be:	2308      	movs	r3, #8
 80097c0:	e7f5      	b.n	80097ae <mpu_configure_region+0x26>
		return REGION_4G;
 80097c2:	233e      	movs	r3, #62	; 0x3e
 80097c4:	e7f3      	b.n	80097ae <mpu_configure_region+0x26>

080097c6 <mpu_configure_regions>:
{
 80097c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ca:	4680      	mov	r8, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
 80097d0:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
 80097d2:	2500      	movs	r5, #0
 80097d4:	e009      	b.n	80097ea <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 80097d6:	4621      	mov	r1, r4
 80097d8:	b2f0      	uxtb	r0, r6
 80097da:	f7ff ffd5 	bl	8009788 <mpu_configure_region>
 80097de:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
 80097e0:	f110 0f16 	cmn.w	r0, #22
 80097e4:	d014      	beq.n	8009810 <mpu_configure_regions+0x4a>
		reg_index++;
 80097e6:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 80097e8:	3501      	adds	r5, #1
 80097ea:	42bd      	cmp	r5, r7
 80097ec:	da10      	bge.n	8009810 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
 80097ee:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80097f2:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80097f6:	6862      	ldr	r2, [r4, #4]
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	d0f5      	beq.n	80097e8 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	d0e9      	beq.n	80097d6 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ffa4 	bl	8009750 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8009808:	2800      	cmp	r0, #0
 800980a:	d1e4      	bne.n	80097d6 <mpu_configure_regions+0x10>
			return -EINVAL;
 800980c:	f06f 0615 	mvn.w	r6, #21
}
 8009810:	4630      	mov	r0, r6
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009816 <arm_core_mpu_configure_static_mpu_regions>:
{
 8009816:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 8009818:	f7f9 faea 	bl	8002df0 <mpu_configure_static_mpu_regions>
}
 800981c:	bd08      	pop	{r3, pc}

0800981e <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800981e:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 8009820:	f7f9 faf0 	bl	8002e04 <mpu_configure_dynamic_mpu_regions>
}
 8009824:	bd08      	pop	{r3, pc}

08009826 <malloc_prepare>:
}
 8009826:	2000      	movs	r0, #0
 8009828:	4770      	bx	lr

0800982a <_stdout_hook_default>:
}
 800982a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982e:	4770      	bx	lr

08009830 <_stdin_hook_default>:
}
 8009830:	2000      	movs	r0, #0
 8009832:	4770      	bx	lr

08009834 <_read>:
{
 8009834:	b508      	push	{r3, lr}
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800983a:	f7f9 fb3b 	bl	8002eb4 <z_impl_zephyr_read_stdin>
}
 800983e:	bd08      	pop	{r3, pc}

08009840 <_write>:
{
 8009840:	b508      	push	{r3, lr}
 8009842:	4608      	mov	r0, r1
 8009844:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8009846:	f7f9 fb4b 	bl	8002ee0 <z_impl_zephyr_write_stdout>
}
 800984a:	bd08      	pop	{r3, pc}

0800984c <_close>:
}
 800984c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009850:	4770      	bx	lr

08009852 <_lseek>:
}
 8009852:	2000      	movs	r0, #0
 8009854:	4770      	bx	lr

08009856 <_isatty>:
}
 8009856:	2802      	cmp	r0, #2
 8009858:	bfcc      	ite	gt
 800985a:	2000      	movgt	r0, #0
 800985c:	2001      	movle	r0, #1
 800985e:	4770      	bx	lr

08009860 <_kill>:
}
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr

08009864 <_getpid>:
}
 8009864:	2000      	movs	r0, #0
 8009866:	4770      	bx	lr

08009868 <_fstat>:
	st->st_mode = S_IFCHR;
 8009868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800986c:	604b      	str	r3, [r1, #4]
}
 800986e:	2000      	movs	r0, #0
 8009870:	4770      	bx	lr

08009872 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8009872:	b510      	push	{r4, lr}
 8009874:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 8009876:	2014      	movs	r0, #20
 8009878:	f7fe f81e 	bl	80078b8 <malloc>
 800987c:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800987e:	f001 f853 	bl	800a928 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 8009882:	bd10      	pop	{r4, pc}

08009884 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8009884:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 8009886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800988e:	f7fc fc4d 	bl	800612c <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 8009892:	bd08      	pop	{r3, pc}

08009894 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8009894:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 8009896:	f7fc fcd3 	bl	8006240 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800989a:	bd08      	pop	{r3, pc}

0800989c <__stm32_exti_isr_0>:
{
 800989c:	b508      	push	{r3, lr}
 800989e:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 80098a0:	2101      	movs	r1, #1
 80098a2:	2000      	movs	r0, #0
 80098a4:	f7f9 fb56 	bl	8002f54 <__stm32_exti_isr>
}
 80098a8:	bd08      	pop	{r3, pc}

080098aa <__stm32_exti_isr_1>:
{
 80098aa:	b508      	push	{r3, lr}
 80098ac:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80098ae:	2102      	movs	r1, #2
 80098b0:	2001      	movs	r0, #1
 80098b2:	f7f9 fb4f 	bl	8002f54 <__stm32_exti_isr>
}
 80098b6:	bd08      	pop	{r3, pc}

080098b8 <__stm32_exti_isr_2>:
{
 80098b8:	b508      	push	{r3, lr}
 80098ba:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 80098bc:	2103      	movs	r1, #3
 80098be:	2002      	movs	r0, #2
 80098c0:	f7f9 fb48 	bl	8002f54 <__stm32_exti_isr>
}
 80098c4:	bd08      	pop	{r3, pc}

080098c6 <__stm32_exti_isr_3>:
{
 80098c6:	b508      	push	{r3, lr}
 80098c8:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 80098ca:	2104      	movs	r1, #4
 80098cc:	2003      	movs	r0, #3
 80098ce:	f7f9 fb41 	bl	8002f54 <__stm32_exti_isr>
}
 80098d2:	bd08      	pop	{r3, pc}

080098d4 <__stm32_exti_isr_4>:
{
 80098d4:	b508      	push	{r3, lr}
 80098d6:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 80098d8:	2105      	movs	r1, #5
 80098da:	2004      	movs	r0, #4
 80098dc:	f7f9 fb3a 	bl	8002f54 <__stm32_exti_isr>
}
 80098e0:	bd08      	pop	{r3, pc}

080098e2 <__stm32_exti_isr_9_5>:
{
 80098e2:	b508      	push	{r3, lr}
 80098e4:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 80098e6:	210a      	movs	r1, #10
 80098e8:	2005      	movs	r0, #5
 80098ea:	f7f9 fb33 	bl	8002f54 <__stm32_exti_isr>
}
 80098ee:	bd08      	pop	{r3, pc}

080098f0 <__stm32_exti_isr_15_10>:
{
 80098f0:	b508      	push	{r3, lr}
 80098f2:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 80098f4:	2110      	movs	r1, #16
 80098f6:	200a      	movs	r0, #10
 80098f8:	f7f9 fb2c 	bl	8002f54 <__stm32_exti_isr>
}
 80098fc:	bd08      	pop	{r3, pc}

080098fe <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 80098fe:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8009900:	2200      	movs	r2, #0
 8009902:	4611      	mov	r1, r2
 8009904:	2006      	movs	r0, #6
 8009906:	f7f8 ffd9 	bl	80028bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800990a:	2200      	movs	r2, #0
 800990c:	4611      	mov	r1, r2
 800990e:	2007      	movs	r0, #7
 8009910:	f7f8 ffd4 	bl	80028bc <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8009914:	2200      	movs	r2, #0
 8009916:	4611      	mov	r1, r2
 8009918:	2008      	movs	r0, #8
 800991a:	f7f8 ffcf 	bl	80028bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800991e:	2200      	movs	r2, #0
 8009920:	4611      	mov	r1, r2
 8009922:	2009      	movs	r0, #9
 8009924:	f7f8 ffca 	bl	80028bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8009928:	2200      	movs	r2, #0
 800992a:	4611      	mov	r1, r2
 800992c:	200a      	movs	r0, #10
 800992e:	f7f8 ffc5 	bl	80028bc <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8009932:	2200      	movs	r2, #0
 8009934:	4611      	mov	r1, r2
 8009936:	2017      	movs	r0, #23
 8009938:	f7f8 ffc0 	bl	80028bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800993c:	2200      	movs	r2, #0
 800993e:	4611      	mov	r1, r2
 8009940:	2028      	movs	r0, #40	; 0x28
 8009942:	f7f8 ffbb 	bl	80028bc <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 8009946:	bd08      	pop	{r3, pc}

08009948 <stm32_exti_init>:
{
 8009948:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800994a:	f7ff ffd8 	bl	80098fe <__stm32_exti_connect_irqs>
}
 800994e:	2000      	movs	r0, #0
 8009950:	bd08      	pop	{r3, pc}

08009952 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8009952:	2300      	movs	r3, #0
 8009954:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8009956:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 8009958:	6083      	str	r3, [r0, #8]
}
 800995a:	4770      	bx	lr

0800995c <get_bus_clock>:
}
 800995c:	fbb0 f0f1 	udiv	r0, r0, r1
 8009960:	4770      	bx	lr

08009962 <config_pll_init>:
	pllinit->PLLMul = pll_mul(STM32_PLL_MULTIPLIER);
 8009962:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009966:	6003      	str	r3, [r0, #0]
	pllinit->PLLDiv = pll_div(STM32_PLL_DIVISOR);
 8009968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800996c:	6043      	str	r3, [r0, #4]
}
 800996e:	4770      	bx	lr

08009970 <gpio_stm32_isr>:
{
 8009970:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8009972:	684e      	ldr	r6, [r1, #4]
 8009974:	2501      	movs	r5, #1
 8009976:	4085      	lsls	r5, r0
	return list->head;
 8009978:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800997a:	b119      	cbz	r1, 8009984 <gpio_stm32_isr+0x14>
 800997c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800997e:	b149      	cbz	r1, 8009994 <gpio_stm32_isr+0x24>
	return node->next;
 8009980:	680c      	ldr	r4, [r1, #0]
 8009982:	e007      	b.n	8009994 <gpio_stm32_isr+0x24>
 8009984:	460c      	mov	r4, r1
 8009986:	e005      	b.n	8009994 <gpio_stm32_isr+0x24>
 8009988:	b164      	cbz	r4, 80099a4 <gpio_stm32_isr+0x34>
 800998a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800998c:	b104      	cbz	r4, 8009990 <gpio_stm32_isr+0x20>
	return node->next;
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	4621      	mov	r1, r4
 8009992:	461c      	mov	r4, r3
 8009994:	b141      	cbz	r1, 80099a8 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 8009996:	688a      	ldr	r2, [r1, #8]
 8009998:	402a      	ands	r2, r5
 800999a:	d0f5      	beq.n	8009988 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800999c:	684b      	ldr	r3, [r1, #4]
 800999e:	4630      	mov	r0, r6
 80099a0:	4798      	blx	r3
 80099a2:	e7f1      	b.n	8009988 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 80099a4:	4623      	mov	r3, r4
 80099a6:	e7f3      	b.n	8009990 <gpio_stm32_isr+0x20>
}
 80099a8:	bd70      	pop	{r4, r5, r6, pc}

080099aa <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 80099aa:	f410 7f00 	tst.w	r0, #512	; 0x200
 80099ae:	d01b      	beq.n	80099e8 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 80099b0:	2310      	movs	r3, #16
 80099b2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80099b4:	f010 0f02 	tst.w	r0, #2
 80099b8:	d004      	beq.n	80099c4 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80099ba:	f010 0f04 	tst.w	r0, #4
 80099be:	d02c      	beq.n	8009a1a <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80099c0:	2350      	movs	r3, #80	; 0x50
 80099c2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80099c4:	f010 0310 	ands.w	r3, r0, #16
 80099c8:	d005      	beq.n	80099d6 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80099ca:	680b      	ldr	r3, [r1, #0]
 80099cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099d0:	600b      	str	r3, [r1, #0]
	return 0;
 80099d2:	2000      	movs	r0, #0
 80099d4:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 80099d6:	f010 0020 	ands.w	r0, r0, #32
 80099da:	d020      	beq.n	8009a1e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 80099dc:	680a      	ldr	r2, [r1, #0]
 80099de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099e2:	600a      	str	r2, [r1, #0]
	return 0;
 80099e4:	4618      	mov	r0, r3
 80099e6:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 80099e8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80099ec:	d011      	beq.n	8009a12 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 80099ee:	2300      	movs	r3, #0
 80099f0:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 80099f2:	f010 0310 	ands.w	r3, r0, #16
 80099f6:	d004      	beq.n	8009a02 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80099f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099fc:	600b      	str	r3, [r1, #0]
	return 0;
 80099fe:	2000      	movs	r0, #0
 8009a00:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8009a02:	f010 0020 	ands.w	r0, r0, #32
 8009a06:	d00a      	beq.n	8009a1e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8009a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a0c:	600a      	str	r2, [r1, #0]
	return 0;
 8009a0e:	4618      	mov	r0, r3
 8009a10:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8009a12:	2330      	movs	r3, #48	; 0x30
 8009a14:	600b      	str	r3, [r1, #0]
	return 0;
 8009a16:	2000      	movs	r0, #0
 8009a18:	4770      	bx	lr
				return -ENOTSUP;
 8009a1a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8009a1e:	4770      	bx	lr

08009a20 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009a20:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009a22:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8009a24:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8009a26:	600b      	str	r3, [r1, #0]
}
 8009a28:	2000      	movs	r0, #0
 8009a2a:	4770      	bx	lr

08009a2c <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009a2c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009a2e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8009a30:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8009a32:	4042      	eors	r2, r0
 8009a34:	400a      	ands	r2, r1
 8009a36:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8009a38:	615a      	str	r2, [r3, #20]
}
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	4770      	bx	lr

08009a3e <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009a3e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009a40:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 8009a42:	6199      	str	r1, [r3, #24]
}
 8009a44:	2000      	movs	r0, #0
 8009a46:	4770      	bx	lr

08009a48 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009a48:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009a4a:	685b      	ldr	r3, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 8009a4c:	6299      	str	r1, [r3, #40]	; 0x28
}
 8009a4e:	2000      	movs	r0, #0
 8009a50:	4770      	bx	lr

08009a52 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 8009a52:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009a54:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8009a56:	6953      	ldr	r3, [r2, #20]
 8009a58:	404b      	eors	r3, r1
 8009a5a:	6153      	str	r3, [r2, #20]
}
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	4770      	bx	lr

08009a60 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8009a60:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 8009a62:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 8009a64:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 8009a68:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 8009a6a:	b1fb      	cbz	r3, 8009aac <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e00d      	b.n	8009a8c <gpio_stm32_manage_callback+0x2c>
	return node->next;
 8009a70:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 8009a72:	60a3      	str	r3, [r4, #8]
	return list->tail;
 8009a74:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8009a78:	4281      	cmp	r1, r0
 8009a7a:	d112      	bne.n	8009aa2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8009a7c:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8009a80:	e00f      	b.n	8009aa2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 8009a82:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8009a86:	e00c      	b.n	8009aa2 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009a88:	4618      	mov	r0, r3
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	b163      	cbz	r3, 8009aa8 <gpio_stm32_manage_callback+0x48>
 8009a8e:	4299      	cmp	r1, r3
 8009a90:	d1fa      	bne.n	8009a88 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0ec      	beq.n	8009a70 <gpio_stm32_manage_callback+0x10>
	return node->next;
 8009a96:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 8009a98:	6003      	str	r3, [r0, #0]
	return list->tail;
 8009a9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 8009a9e:	4299      	cmp	r1, r3
 8009aa0:	d0ef      	beq.n	8009a82 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8009aa6:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8009aa8:	b903      	cbnz	r3, 8009aac <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 8009aaa:	b162      	cbz	r2, 8009ac6 <gpio_stm32_manage_callback+0x66>
	if (set) {
 8009aac:	b172      	cbz	r2, 8009acc <gpio_stm32_manage_callback+0x6c>
	return list->head;
 8009aae:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 8009ab0:	600b      	str	r3, [r1, #0]
	list->head = node;
 8009ab2:	60a1      	str	r1, [r4, #8]
	return list->tail;
 8009ab4:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 8009ab8:	b10b      	cbz	r3, 8009abe <gpio_stm32_manage_callback+0x5e>
	return 0;
 8009aba:	2000      	movs	r0, #0
 8009abc:	e007      	b.n	8009ace <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 8009abe:	f8cc 1004 	str.w	r1, [ip, #4]
 8009ac2:	2000      	movs	r0, #0
}
 8009ac4:	e003      	b.n	8009ace <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 8009ac6:	f06f 0015 	mvn.w	r0, #21
 8009aca:	e000      	b.n	8009ace <gpio_stm32_manage_callback+0x6e>
	return 0;
 8009acc:	2000      	movs	r0, #0
}
 8009ace:	bc10      	pop	{r4}
 8009ad0:	4770      	bx	lr

08009ad2 <gpio_stm32_configure>:
{
 8009ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8009ad4:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8009ad6:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8009ad8:	2001      	movs	r0, #1
 8009ada:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8009adc:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8009ae0:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009ae4:	6865      	ldr	r5, [r4, #4]
 8009ae6:	ea25 0500 	bic.w	r5, r5, r0
 8009aea:	408e      	lsls	r6, r1
 8009aec:	4335      	orrs	r5, r6
 8009aee:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8009af0:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009af4:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d04a      	beq.n	8009b94 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 8009afe:	fab5 f585 	clz	r5, r5
 8009b02:	006d      	lsls	r5, r5, #1
 8009b04:	2703      	movs	r7, #3
 8009b06:	fa07 f505 	lsl.w	r5, r7, r5
 8009b0a:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	d040      	beq.n	8009b98 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 8009b16:	fab5 f585 	clz	r5, r5
 8009b1a:	006d      	lsls	r5, r5, #1
 8009b1c:	fa0e f505 	lsl.w	r5, lr, r5
 8009b20:	4335      	orrs	r5, r6
 8009b22:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8009b24:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009b28:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b2a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009b2e:	b3ad      	cbz	r5, 8009b9c <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 8009b30:	fab5 f585 	clz	r5, r5
 8009b34:	006d      	lsls	r5, r5, #1
 8009b36:	f04f 0e03 	mov.w	lr, #3
 8009b3a:	fa0e f505 	lsl.w	r5, lr, r5
 8009b3e:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b42:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8009b46:	b35d      	cbz	r5, 8009ba0 <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 8009b48:	fab5 f585 	clz	r5, r5
 8009b4c:	006d      	lsls	r5, r5, #1
 8009b4e:	fa02 f505 	lsl.w	r5, r2, r5
 8009b52:	ea4e 0505 	orr.w	r5, lr, r5
 8009b56:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 8009b58:	f1bc 0f20 	cmp.w	ip, #32
 8009b5c:	d022      	beq.n	8009ba4 <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8009b5e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009b62:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b64:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d052      	beq.n	8009c12 <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 8009b6c:	fab3 f383 	clz	r3, r3
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	2103      	movs	r1, #3
 8009b74:	fa01 f303 	lsl.w	r3, r1, r3
 8009b78:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b7c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d048      	beq.n	8009c16 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 8009b84:	fab0 f080 	clz	r0, r0
 8009b88:	0040      	lsls	r0, r0, #1
 8009b8a:	fa0c f000 	lsl.w	r0, ip, r0
 8009b8e:	4318      	orrs	r0, r3
 8009b90:	6020      	str	r0, [r4, #0]
}
 8009b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8009b94:	2520      	movs	r5, #32
 8009b96:	e7b4      	b.n	8009b02 <gpio_stm32_configure+0x30>
 8009b98:	2520      	movs	r5, #32
 8009b9a:	e7be      	b.n	8009b1a <gpio_stm32_configure+0x48>
 8009b9c:	2520      	movs	r5, #32
 8009b9e:	e7c9      	b.n	8009b34 <gpio_stm32_configure+0x62>
 8009ba0:	2520      	movs	r5, #32
 8009ba2:	e7d3      	b.n	8009b4c <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 8009ba4:	2907      	cmp	r1, #7
 8009ba6:	dc19      	bgt.n	8009bdc <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009ba8:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009baa:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8009bae:	b18a      	cbz	r2, 8009bd4 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 8009bb0:	fab2 f282 	clz	r2, r2
 8009bb4:	0092      	lsls	r2, r2, #2
 8009bb6:	250f      	movs	r5, #15
 8009bb8:	fa05 f202 	lsl.w	r2, r5, r2
 8009bbc:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bc0:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8009bc4:	b142      	cbz	r2, 8009bd8 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 8009bc6:	fab2 f282 	clz	r2, r2
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	4093      	lsls	r3, r2
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6223      	str	r3, [r4, #32]
}
 8009bd2:	e7c4      	b.n	8009b5e <gpio_stm32_configure+0x8c>
    return 32U;
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	e7ed      	b.n	8009bb4 <gpio_stm32_configure+0xe2>
 8009bd8:	2220      	movs	r2, #32
 8009bda:	e7f6      	b.n	8009bca <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009bdc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009bde:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009be0:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8009be4:	b189      	cbz	r1, 8009c0a <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 8009be6:	fab1 f181 	clz	r1, r1
 8009bea:	0089      	lsls	r1, r1, #2
 8009bec:	260f      	movs	r6, #15
 8009bee:	fa06 f101 	lsl.w	r1, r6, r1
 8009bf2:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8009bfa:	b142      	cbz	r2, 8009c0e <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 8009bfc:	fab2 f282 	clz	r2, r2
 8009c00:	0092      	lsls	r2, r2, #2
 8009c02:	4093      	lsls	r3, r2
 8009c04:	430b      	orrs	r3, r1
 8009c06:	6263      	str	r3, [r4, #36]	; 0x24
}
 8009c08:	e7a9      	b.n	8009b5e <gpio_stm32_configure+0x8c>
    return 32U;
 8009c0a:	2120      	movs	r1, #32
 8009c0c:	e7ed      	b.n	8009bea <gpio_stm32_configure+0x118>
 8009c0e:	2220      	movs	r2, #32
 8009c10:	e7f6      	b.n	8009c00 <gpio_stm32_configure+0x12e>
 8009c12:	2320      	movs	r3, #32
 8009c14:	e7ac      	b.n	8009b70 <gpio_stm32_configure+0x9e>
 8009c16:	2020      	movs	r0, #32
 8009c18:	e7b6      	b.n	8009b88 <gpio_stm32_configure+0xb6>

08009c1a <gpio_stm32_config>:
{
 8009c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	4607      	mov	r7, r0
 8009c20:	460d      	mov	r5, r1
 8009c22:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 8009c24:	a901      	add	r1, sp, #4
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7ff febf 	bl	80099aa <gpio_stm32_flags_to_conf>
	if (err != 0) {
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	b970      	cbnz	r0, 8009c4e <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 8009c30:	f414 7f00 	tst.w	r4, #512	; 0x200
 8009c34:	d005      	beq.n	8009c42 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8009c36:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8009c3a:	d10b      	bne.n	8009c54 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8009c3c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8009c40:	d10e      	bne.n	8009c60 <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 8009c42:	2300      	movs	r3, #0
 8009c44:	9a01      	ldr	r2, [sp, #4]
 8009c46:	4629      	mov	r1, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff42 	bl	8009ad2 <gpio_stm32_configure>
}
 8009c4e:	4630      	mov	r0, r6
 8009c50:	b003      	add	sp, #12
 8009c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8009c54:	2101      	movs	r1, #1
 8009c56:	40a9      	lsls	r1, r5
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f7ff fef0 	bl	8009a3e <gpio_stm32_port_set_bits_raw>
 8009c5e:	e7f0      	b.n	8009c42 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8009c60:	2101      	movs	r1, #1
 8009c62:	40a9      	lsls	r1, r5
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff feef 	bl	8009a48 <gpio_stm32_port_clear_bits_raw>
 8009c6a:	e7ea      	b.n	8009c42 <gpio_stm32_config+0x28>

08009c6c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8009c6c:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 8009c6e:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 8009c70:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 8009c72:	2101      	movs	r1, #1
 8009c74:	f7f9 fbc4 	bl	8003400 <gpio_stm32_clock_request>
#endif
}
 8009c78:	bd08      	pop	{r3, pc}

08009c7a <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8009c7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8009c7c:	b91b      	cbnz	r3, 8009c86 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 8009c7e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8009c80:	b91b      	cbnz	r3, 8009c8a <spi_stm32_transfer_ongoing+0x10>
 8009c82:	2000      	movs	r0, #0
 8009c84:	4770      	bx	lr
 8009c86:	2001      	movs	r0, #1
 8009c88:	4770      	bx	lr
 8009c8a:	2001      	movs	r0, #1
}
 8009c8c:	4770      	bx	lr

08009c8e <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8009c8e:	6883      	ldr	r3, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8009c90:	f413 7fb8 	tst.w	r3, #368	; 0x170
 8009c94:	d101      	bne.n	8009c9a <spi_stm32_get_err+0xc>
	return 0;
 8009c96:	2000      	movs	r0, #0
 8009c98:	4770      	bx	lr
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8009c9a:	6883      	ldr	r3, [r0, #8]
 8009c9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ca0:	d00a      	beq.n	8009cb8 <spi_stm32_get_err+0x2a>
{
 8009ca2:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8009ca4:	68c3      	ldr	r3, [r0, #12]
 8009ca6:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009ca8:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8009caa:	6883      	ldr	r3, [r0, #8]
 8009cac:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8009cae:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8009cb0:	f06f 0004 	mvn.w	r0, #4
}
 8009cb4:	b002      	add	sp, #8
 8009cb6:	4770      	bx	lr
		return -EIO;
 8009cb8:	f06f 0004 	mvn.w	r0, #4
}
 8009cbc:	4770      	bx	lr

08009cbe <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8009cbe:	6883      	ldr	r3, [r0, #8]
 8009cc0:	f013 0f02 	tst.w	r3, #2
 8009cc4:	d0fb      	beq.n	8009cbe <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009cc6:	680b      	ldr	r3, [r1, #0]
 8009cc8:	889b      	ldrh	r3, [r3, #4]
 8009cca:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d01f      	beq.n	8009d12 <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009cd2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d044      	beq.n	8009d62 <spi_stm32_shift_m+0xa4>
 8009cd8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009cda:	2a00      	cmp	r2, #0
 8009cdc:	d143      	bne.n	8009d66 <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	d043      	beq.n	8009d6a <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8009ce2:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 8009ce4:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009ce6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d047      	beq.n	8009d7c <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8009cec:	3b01      	subs	r3, #1
 8009cee:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d13f      	bne.n	8009d74 <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 8009cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d037      	beq.n	8009d6e <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 8009cfe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009d00:	f103 0208 	add.w	r2, r3, #8
 8009d04:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	085b      	lsrs	r3, r3, #1
 8009d0e:	650b      	str	r3, [r1, #80]	; 0x50
 8009d10:	e034      	b.n	8009d7c <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009d12:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009d14:	b1bb      	cbz	r3, 8009d46 <spi_stm32_shift_m+0x88>
 8009d16:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009d18:	b9ba      	cbnz	r2, 8009d4a <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8009d1a:	b1c2      	cbz	r2, 8009d4e <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8009d1c:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8009d1e:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 8009d20:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009d22:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009d24:	b353      	cbz	r3, 8009d7c <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 8009d26:	3b01      	subs	r3, #1
 8009d28:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009d2a:	b9ab      	cbnz	r3, 8009d58 <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 8009d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009d32:	b173      	cbz	r3, 8009d52 <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 8009d34:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009d36:	f103 0208 	add.w	r2, r3, #8
 8009d3a:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	650b      	str	r3, [r1, #80]	; 0x50
 8009d44:	e01a      	b.n	8009d7c <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009d46:	2200      	movs	r2, #0
 8009d48:	e7e7      	b.n	8009d1a <spi_stm32_shift_m+0x5c>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	e7e5      	b.n	8009d1a <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e7e5      	b.n	8009d1e <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d56:	e011      	b.n	8009d7c <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8009d58:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009d5a:	b17b      	cbz	r3, 8009d7c <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d60:	e00c      	b.n	8009d7c <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 8009d62:	2200      	movs	r2, #0
 8009d64:	e7bb      	b.n	8009cde <spi_stm32_shift_m+0x20>
 8009d66:	2201      	movs	r2, #1
 8009d68:	e7b9      	b.n	8009cde <spi_stm32_shift_m+0x20>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e7ba      	b.n	8009ce4 <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d72:	e003      	b.n	8009d7c <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 8009d74:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009d76:	b10b      	cbz	r3, 8009d7c <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 8009d78:	3302      	adds	r3, #2
 8009d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009d7c:	6883      	ldr	r3, [r0, #8]
 8009d7e:	f013 0f01 	tst.w	r3, #1
 8009d82:	d0fb      	beq.n	8009d7c <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009d84:	680b      	ldr	r3, [r1, #0]
 8009d86:	889b      	ldrh	r3, [r3, #4]
 8009d88:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d01f      	beq.n	8009dd0 <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 8009d90:	68c3      	ldr	r3, [r0, #12]
 8009d92:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8009d94:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	d040      	beq.n	8009e1c <spi_stm32_shift_m+0x15e>
 8009d9a:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d13f      	bne.n	8009e20 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8009da0:	b100      	cbz	r0, 8009da4 <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8009da2:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 8009da4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d043      	beq.n	8009e32 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8009daa:	3b01      	subs	r3, #1
 8009dac:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d13b      	bne.n	8009e2a <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 8009db2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009db4:	3b01      	subs	r3, #1
 8009db6:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d033      	beq.n	8009e24 <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 8009dbc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009dbe:	f103 0208 	add.w	r2, r3, #8
 8009dc2:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8009dce:	4770      	bx	lr
  return (*((__IO uint8_t *)&SPIx->DR));
 8009dd0:	7b03      	ldrb	r3, [r0, #12]
 8009dd2:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 8009dd4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009dd6:	b1aa      	cbz	r2, 8009e04 <spi_stm32_shift_m+0x146>
 8009dd8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8009dda:	b9a8      	cbnz	r0, 8009e08 <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 8009ddc:	b100      	cbz	r0, 8009de0 <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8009dde:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 8009de0:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009de2:	b333      	cbz	r3, 8009e32 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 8009de4:	3b01      	subs	r3, #1
 8009de6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009de8:	b99b      	cbnz	r3, 8009e12 <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 8009dea:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009dec:	3b01      	subs	r3, #1
 8009dee:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009df0:	b163      	cbz	r3, 8009e0c <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 8009df2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009df4:	f103 0208 	add.w	r2, r3, #8
 8009df8:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	658b      	str	r3, [r1, #88]	; 0x58
 8009e02:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009e04:	2000      	movs	r0, #0
 8009e06:	e7e9      	b.n	8009ddc <spi_stm32_shift_m+0x11e>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e7e7      	b.n	8009ddc <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	654b      	str	r3, [r1, #84]	; 0x54
 8009e10:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8009e12:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009e14:	b16b      	cbz	r3, 8009e32 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 8009e16:	3301      	adds	r3, #1
 8009e18:	654b      	str	r3, [r1, #84]	; 0x54
 8009e1a:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7bf      	b.n	8009da0 <spi_stm32_shift_m+0xe2>
 8009e20:	2001      	movs	r0, #1
 8009e22:	e7bd      	b.n	8009da0 <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	654b      	str	r3, [r1, #84]	; 0x54
 8009e28:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8009e2a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009e2c:	b10b      	cbz	r3, 8009e32 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 8009e2e:	3302      	adds	r3, #2
 8009e30:	654b      	str	r3, [r1, #84]	; 0x54
}
 8009e32:	4770      	bx	lr

08009e34 <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8009e34:	6883      	ldr	r3, [r0, #8]
 8009e36:	f013 0f02 	tst.w	r3, #2
 8009e3a:	d045      	beq.n	8009ec8 <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 8009e3c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d042      	beq.n	8009ec8 <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009e42:	680b      	ldr	r3, [r1, #0]
 8009e44:	889b      	ldrh	r3, [r3, #4]
 8009e46:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d017      	beq.n	8009e7e <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8009e4e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009e50:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 8009e52:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009e54:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d03a      	beq.n	8009ed0 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d12d      	bne.n	8009ebe <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 8009e62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e64:	3b01      	subs	r3, #1
 8009e66:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009e68:	b333      	cbz	r3, 8009eb8 <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 8009e6a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009e6c:	f103 0208 	add.w	r2, r3, #8
 8009e70:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	085b      	lsrs	r3, r3, #1
 8009e7a:	650b      	str	r3, [r1, #80]	; 0x50
 8009e7c:	e028      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8009e7e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009e80:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 8009e82:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 8009e84:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8009e86:	b31b      	cbz	r3, 8009ed0 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 8009e8c:	b97b      	cbnz	r3, 8009eae <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 8009e8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e90:	3b01      	subs	r3, #1
 8009e92:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 8009e94:	b143      	cbz	r3, 8009ea8 <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 8009e96:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009e98:	f103 0208 	add.w	r2, r3, #8
 8009e9c:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ea6:	e013      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009eac:	e010      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 8009eae:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009eb0:	b173      	cbz	r3, 8009ed0 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009eb6:	e00b      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ebc:	e008      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 8009ebe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8009ec0:	b133      	cbz	r3, 8009ed0 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ec6:	e003      	b.n	8009ed0 <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8009ec8:	6843      	ldr	r3, [r0, #4]
 8009eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ece:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8009ed0:	6883      	ldr	r3, [r0, #8]
 8009ed2:	f013 0f01 	tst.w	r3, #1
 8009ed6:	d04a      	beq.n	8009f6e <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 8009ed8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009eda:	b30b      	cbz	r3, 8009f20 <spi_stm32_shift_s+0xec>
 8009edc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009ede:	bb0a      	cbnz	r2, 8009f24 <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d044      	beq.n	8009f6e <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8009ee4:	680a      	ldr	r2, [r1, #0]
 8009ee6:	8892      	ldrh	r2, [r2, #4]
 8009ee8:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8009eec:	2a08      	cmp	r2, #8
 8009eee:	d01b      	beq.n	8009f28 <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 8009ef0:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8009ef2:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8009ef4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d039      	beq.n	8009f6e <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 8009efa:	3b01      	subs	r3, #1
 8009efc:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d131      	bne.n	8009f66 <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 8009f02:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009f04:	3b01      	subs	r3, #1
 8009f06:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d029      	beq.n	8009f60 <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 8009f0c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009f0e:	f103 0208 	add.w	r2, r3, #8
 8009f12:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	085b      	lsrs	r3, r3, #1
 8009f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f1e:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 8009f20:	2200      	movs	r2, #0
 8009f22:	e7dd      	b.n	8009ee0 <spi_stm32_shift_s+0xac>
 8009f24:	2201      	movs	r2, #1
 8009f26:	e7db      	b.n	8009ee0 <spi_stm32_shift_s+0xac>
  return (*((__IO uint8_t *)&SPIx->DR));
 8009f28:	7b02      	ldrb	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8009f2a:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8009f2c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009f2e:	b1f3      	cbz	r3, 8009f6e <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 8009f30:	3b01      	subs	r3, #1
 8009f32:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 8009f34:	b97b      	cbnz	r3, 8009f56 <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 8009f36:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 8009f3c:	b143      	cbz	r3, 8009f50 <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 8009f3e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009f40:	f103 0208 	add.w	r2, r3, #8
 8009f44:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	658b      	str	r3, [r1, #88]	; 0x58
 8009f4e:	4770      	bx	lr
			ctx->rx_buf = NULL;
 8009f50:	2300      	movs	r3, #0
 8009f52:	654b      	str	r3, [r1, #84]	; 0x54
 8009f54:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8009f56:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009f58:	b14b      	cbz	r3, 8009f6e <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	654b      	str	r3, [r1, #84]	; 0x54
 8009f5e:	4770      	bx	lr
			ctx->rx_buf = NULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	654b      	str	r3, [r1, #84]	; 0x54
 8009f64:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 8009f66:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009f68:	b10b      	cbz	r3, 8009f6e <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	654b      	str	r3, [r1, #84]	; 0x54
}
 8009f6e:	4770      	bx	lr

08009f70 <spi_stm32_shift_frames>:
{
 8009f70:	b510      	push	{r4, lr}
 8009f72:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8009f78:	f013 0f01 	tst.w	r3, #1
 8009f7c:	d105      	bne.n	8009f8a <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 8009f7e:	f7ff fe9e 	bl	8009cbe <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff fe83 	bl	8009c8e <spi_stm32_get_err>
}
 8009f88:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 8009f8a:	f7ff ff53 	bl	8009e34 <spi_stm32_shift_s>
 8009f8e:	e7f8      	b.n	8009f82 <spi_stm32_shift_frames+0x12>

08009f90 <spi_stm32_cs_control>:
{
 8009f90:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8009f92:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d034      	beq.n	800a004 <spi_stm32_cs_control+0x74>
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d031      	beq.n	800a004 <spi_stm32_cs_control+0x74>
 8009fa0:	6810      	ldr	r0, [r2, #0]
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d02e      	beq.n	800a004 <spi_stm32_cs_control+0x74>
		if (on) {
 8009fa6:	b9c9      	cbnz	r1, 8009fdc <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 8009fa8:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 8009faa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009fae:	d129      	bne.n	800a004 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 8009fb0:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8009fb2:	f7fd f8a5 	bl	8007100 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8009fbe:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	408b      	lsls	r3, r1
 8009fc6:	421a      	tst	r2, r3
 8009fc8:	d126      	bne.n	800a018 <spi_stm32_cs_control+0x88>
 8009fca:	2300      	movs	r3, #0
	if (value != 0)	{
 8009fcc:	b333      	cbz	r3, 800a01c <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8009fce:	2301      	movs	r3, #1
 8009fd0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8009fd4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	4798      	blx	r3
 8009fda:	e013      	b.n	800a004 <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8009fdc:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 8009fde:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	408b      	lsls	r3, r1
 8009fe6:	421a      	tst	r2, r3
 8009fe8:	d10d      	bne.n	800a006 <spi_stm32_cs_control+0x76>
 8009fea:	2301      	movs	r3, #1
	if (value != 0)	{
 8009fec:	b16b      	cbz	r3, 800a00a <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8009fee:	2301      	movs	r3, #1
 8009ff0:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8009ff4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	6858      	ldr	r0, [r3, #4]
 800a000:	f7fd f87e 	bl	8007100 <z_impl_k_busy_wait>
}
 800a004:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800a006:	2300      	movs	r3, #0
 800a008:	e7f0      	b.n	8009fec <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a00a:	2301      	movs	r3, #1
 800a00c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a010:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	4798      	blx	r3
 800a016:	e7f0      	b.n	8009ffa <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	e7d7      	b.n	8009fcc <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a01c:	2301      	movs	r3, #1
 800a01e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a022:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	4798      	blx	r3
 800a028:	e7ec      	b.n	800a004 <spi_stm32_cs_control+0x74>

0800a02a <spi_stm32_complete>:
{
 800a02a:	b510      	push	{r4, lr}
 800a02c:	b082      	sub	sp, #8
	const struct spi_stm32_config *cfg = dev->config;
 800a02e:	6843      	ldr	r3, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800a030:	689c      	ldr	r4, [r3, #8]
	spi_stm32_cs_control(dev, false);
 800a032:	2100      	movs	r1, #0
 800a034:	f7ff ffac 	bl	8009f90 <spi_stm32_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800a03e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a042:	d010      	beq.n	800a066 <spi_stm32_complete+0x3c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800a044:	68a3      	ldr	r3, [r4, #8]
 800a046:	f013 0f20 	tst.w	r3, #32
 800a04a:	d006      	beq.n	800a05a <spi_stm32_complete+0x30>
  tmpreg_sr = SPIx->SR;
 800a04c:	68a3      	ldr	r3, [r4, #8]
 800a04e:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800a050:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a058:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a060:	6023      	str	r3, [r4, #0]
}
 800a062:	b002      	add	sp, #8
 800a064:	bd10      	pop	{r4, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a06c:	d1fb      	bne.n	800a066 <spi_stm32_complete+0x3c>
 800a06e:	e7e9      	b.n	800a044 <spi_stm32_complete+0x1a>

0800a070 <transceive>:
{
 800a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a074:	4605      	mov	r5, r0
 800a076:	460e      	mov	r6, r1
 800a078:	4698      	mov	r8, r3
 800a07a:	f89d 1020 	ldrb.w	r1, [sp, #32]
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800a07e:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800a080:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800a082:	689f      	ldr	r7, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800a084:	4691      	mov	r9, r2
 800a086:	b30a      	cbz	r2, 800a0cc <transceive+0x5c>
	if (asynchronous) {
 800a088:	2900      	cmp	r1, #0
 800a08a:	d16b      	bne.n	800a164 <transceive+0xf4>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800a08c:	88b3      	ldrh	r3, [r6, #4]
 800a08e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a092:	d004      	beq.n	800a09e <transceive+0x2e>
 800a094:	6923      	ldr	r3, [r4, #16]
 800a096:	b913      	cbnz	r3, 800a09e <transceive+0x2e>
		(ctx->owner == spi_cfg)) {
 800a098:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800a09a:	429e      	cmp	r6, r3
 800a09c:	d008      	beq.n	800a0b0 <transceive+0x40>
	k_sem_take(&ctx->lock, K_FOREVER);
 800a09e:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
 800a0a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0aa:	f7fc f933 	bl	8006314 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800a0ae:	6066      	str	r6, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f7f9 f9c6 	bl	8003444 <spi_stm32_configure>
	if (ret) {
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	b160      	cbz	r0, 800a0d6 <transceive+0x66>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	889b      	ldrh	r3, [r3, #4]
 800a0c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a0c4:	d047      	beq.n	800a156 <transceive+0xe6>
}
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 800a0cc:	f1b8 0f00 	cmp.w	r8, #0
 800a0d0:	d1da      	bne.n	800a088 <transceive+0x18>
		return 0;
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	e7f7      	b.n	800a0c6 <transceive+0x56>
	if (tx_bufs) {
 800a0d6:	f1b9 0f00 	cmp.w	r9, #0
 800a0da:	d030      	beq.n	800a13e <transceive+0xce>
		ctx->current_tx = tx_bufs->buffers;
 800a0dc:	f8d9 3000 	ldr.w	r3, [r9]
 800a0e0:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 800a0e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a0e6:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
 800a0f0:	f1b8 0f00 	cmp.w	r8, #0
 800a0f4:	d029      	beq.n	800a14a <transceive+0xda>
		ctx->current_rx = rx_bufs->buffers;
 800a0f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0fa:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 800a0fc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a100:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63a3      	str	r3, [r4, #56]	; 0x38
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a114:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 800a116:	2101      	movs	r1, #1
 800a118:	4628      	mov	r0, r5
 800a11a:	f7ff ff39 	bl	8009f90 <spi_stm32_cs_control>
		ret = spi_stm32_shift_frames(spi, data);
 800a11e:	4621      	mov	r1, r4
 800a120:	4638      	mov	r0, r7
 800a122:	f7ff ff25 	bl	8009f70 <spi_stm32_shift_frames>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800a126:	4606      	mov	r6, r0
 800a128:	b920      	cbnz	r0, 800a134 <transceive+0xc4>
 800a12a:	4620      	mov	r0, r4
 800a12c:	f7ff fda5 	bl	8009c7a <spi_stm32_transfer_ongoing>
 800a130:	2800      	cmp	r0, #0
 800a132:	d1f4      	bne.n	800a11e <transceive+0xae>
	spi_stm32_complete(dev, ret);
 800a134:	4631      	mov	r1, r6
 800a136:	4628      	mov	r0, r5
 800a138:	f7ff ff77 	bl	800a02a <spi_stm32_complete>
 800a13c:	e7be      	b.n	800a0bc <transceive+0x4c>
		ctx->current_tx = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 800a142:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 800a144:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 800a146:	6523      	str	r3, [r4, #80]	; 0x50
 800a148:	e7d2      	b.n	800a0f0 <transceive+0x80>
		ctx->current_rx = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800a14e:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 800a150:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 800a152:	65a3      	str	r3, [r4, #88]	; 0x58
 800a154:	e7d9      	b.n	800a10a <transceive+0x9a>
		ctx->owner = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800a15a:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800a15e:	f7fc f8b1 	bl	80062c4 <z_impl_k_sem_give>
}
 800a162:	e7b0      	b.n	800a0c6 <transceive+0x56>
		return -ENOTSUP;
 800a164:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800a168:	e7ad      	b.n	800a0c6 <transceive+0x56>

0800a16a <spi_stm32_transceive>:
{
 800a16a:	b510      	push	{r4, lr}
 800a16c:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800a16e:	2400      	movs	r4, #0
 800a170:	9401      	str	r4, [sp, #4]
 800a172:	9400      	str	r4, [sp, #0]
 800a174:	f7ff ff7c 	bl	800a070 <transceive>
}
 800a178:	b002      	add	sp, #8
 800a17a:	bd10      	pop	{r4, pc}

0800a17c <spi_stm32_release>:
{
 800a17c:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800a17e:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	b1c3      	cbz	r3, 800a1b6 <spi_stm32_release+0x3a>
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	b1b3      	cbz	r3, 800a1b6 <spi_stm32_release+0x3a>
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	b1a2      	cbz	r2, 800a1b6 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800a18c:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800a18e:	f7fc ffb7 	bl	8007100 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800a19a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	408b      	lsls	r3, r1
 800a1a2:	421a      	tst	r2, r3
 800a1a4:	d10b      	bne.n	800a1be <spi_stm32_release+0x42>
 800a1a6:	2300      	movs	r3, #0
	if (value != 0)	{
 800a1a8:	b15b      	cbz	r3, 800a1c2 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a1b0:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	4798      	blx	r3
 800a1b6:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800a1b8:	b153      	cbz	r3, 800a1d0 <spi_stm32_release+0x54>
}
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e7f2      	b.n	800a1a8 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800a1c8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800a1ce:	e7f2      	b.n	800a1b6 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800a1d0:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800a1d2:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800a1d6:	f7fc f875 	bl	80062c4 <z_impl_k_sem_give>
}
 800a1da:	e7ee      	b.n	800a1ba <spi_stm32_release+0x3e>

0800a1dc <timer_work_handler>:
{
 800a1dc:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800a1de:	f7f9 fed3 	bl	8003f88 <TimerIrqHandler>
}
 800a1e2:	bd08      	pop	{r3, pc}

0800a1e4 <RtcGetTimerValue>:
{
 800a1e4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800a1e6:	f000 fe72 	bl	800aece <z_impl_k_uptime_ticks>
 800a1ea:	220a      	movs	r2, #10
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f7f6 fb69 	bl	80008c4 <__aeabi_uldivmod>
}
 800a1f2:	bd08      	pop	{r3, pc}

0800a1f4 <RtcGetMinimumTimeout>:
}
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	4770      	bx	lr

0800a1f8 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800a1f8:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800a1fa:	0f81      	lsrs	r1, r0, #30
 800a1fc:	0083      	lsls	r3, r0, #2
 800a1fe:	1818      	adds	r0, r3, r0
 800a200:	f141 0100 	adc.w	r1, r1, #0
 800a204:	1800      	adds	r0, r0, r0
 800a206:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800a208:	f7fc fd9e 	bl	8006d48 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800a20c:	bd08      	pop	{r3, pc}

0800a20e <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800a20e:	4770      	bx	lr

0800a210 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800a210:	4770      	bx	lr

0800a212 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800a212:	f04f 0210 	mov.w	r2, #16
 800a216:	f3ef 8311 	mrs	r3, BASEPRI
 800a21a:	f382 8812 	msr	BASEPRI_MAX, r2
 800a21e:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800a222:	6003      	str	r3, [r0, #0]
}
 800a224:	4770      	bx	lr

0800a226 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800a226:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
}
 800a230:	4770      	bx	lr

0800a232 <__sx12xx_configure_pin>:
{
 800a232:	b570      	push	{r4, r5, r6, lr}
 800a234:	4604      	mov	r4, r0
 800a236:	4608      	mov	r0, r1
 800a238:	4616      	mov	r6, r2
 800a23a:	461d      	mov	r5, r3
 800a23c:	f7fb fd20 	bl	8005c80 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 800a240:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 800a242:	b318      	cbz	r0, 800a28c <__sx12xx_configure_pin+0x5a>
	const struct gpio_driver_api *api =
 800a244:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 800a246:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800a248:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800a24c:	d007      	beq.n	800a25e <__sx12xx_configure_pin+0x2c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800a24e:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 800a252:	d004      	beq.n	800a25e <__sx12xx_configure_pin+0x2c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800a254:	f015 0f01 	tst.w	r5, #1
 800a258:	d001      	beq.n	800a25e <__sx12xx_configure_pin+0x2c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800a25a:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800a25e:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800a262:	f015 0f01 	tst.w	r5, #1
 800a266:	d009      	beq.n	800a27c <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800a268:	2101      	movs	r1, #1
 800a26a:	fa01 f506 	lsl.w	r5, r1, r6
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	4329      	orrs	r1, r5
 800a272:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4631      	mov	r1, r6
 800a278:	4798      	blx	r3
}
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800a27c:	2101      	movs	r1, #1
 800a27e:	fa01 f506 	lsl.w	r5, r1, r6
 800a282:	6821      	ldr	r1, [r4, #0]
 800a284:	ea21 0105 	bic.w	r1, r1, r5
 800a288:	6021      	str	r1, [r4, #0]
 800a28a:	e7f3      	b.n	800a274 <__sx12xx_configure_pin+0x42>
		return -EIO;
 800a28c:	f06f 0004 	mvn.w	r0, #4
 800a290:	e7f3      	b.n	800a27a <__sx12xx_configure_pin+0x48>

0800a292 <clamp_int8>:
	if (x < min) {
 800a292:	4288      	cmp	r0, r1
 800a294:	db03      	blt.n	800a29e <clamp_int8+0xc>
	} else if (x > max) {
 800a296:	4290      	cmp	r0, r2
 800a298:	dd02      	ble.n	800a2a0 <clamp_int8+0xe>
		return max;
 800a29a:	4610      	mov	r0, r2
 800a29c:	4770      	bx	lr
		return min;
 800a29e:	4608      	mov	r0, r1
}
 800a2a0:	4770      	bx	lr

0800a2a2 <SX1276CheckRfFrequency>:
}
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	4770      	bx	lr

0800a2a6 <sx127x_antenna_configure>:
}
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	4770      	bx	lr

0800a2aa <SX1276GetBoardTcxoWakeupTime>:
}
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	4770      	bx	lr

0800a2ae <SX1276SetAntSwLowPower>:
}
 800a2ae:	4770      	bx	lr

0800a2b0 <SX1276SetBoardTcxo>:
}
 800a2b0:	4770      	bx	lr

0800a2b2 <SX1276SetAntSw>:
}
 800a2b2:	4770      	bx	lr

0800a2b4 <sx127x_read>:
{
 800a2b4:	b508      	push	{r3, lr}
 800a2b6:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f7f9 fc56 	bl	8003b6c <sx127x_transceive>
}
 800a2c0:	bd08      	pop	{r3, pc}

0800a2c2 <SX1276ReadBuffer>:
{
 800a2c2:	b508      	push	{r3, lr}
	ret = sx127x_read(addr, buffer, size);
 800a2c4:	b2c0      	uxtb	r0, r0
 800a2c6:	f7ff fff5 	bl	800a2b4 <sx127x_read>
}
 800a2ca:	bd08      	pop	{r3, pc}

0800a2cc <sx127x_write>:
{
 800a2cc:	b508      	push	{r3, lr}
 800a2ce:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800a2d0:	460a      	mov	r2, r1
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a2d8:	f7f9 fc48 	bl	8003b6c <sx127x_transceive>
}
 800a2dc:	bd08      	pop	{r3, pc}

0800a2de <SX1276WriteBuffer>:
{
 800a2de:	b508      	push	{r3, lr}
	ret = sx127x_write(addr, buffer, size);
 800a2e0:	b2c0      	uxtb	r0, r0
 800a2e2:	f7ff fff3 	bl	800a2cc <sx127x_write>
}
 800a2e6:	bd08      	pop	{r3, pc}

0800a2e8 <SX1276SetRfTxPower>:
{
 800a2e8:	b530      	push	{r4, r5, lr}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 800a2f4:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f10d 0106 	add.w	r1, sp, #6
 800a2fe:	204d      	movs	r0, #77	; 0x4d
 800a300:	f7ff ffd8 	bl	800a2b4 <sx127x_read>
	if (ret < 0) {
 800a304:	2800      	cmp	r0, #0
 800a306:	db2a      	blt.n	800a35e <SX1276SetRfTxPower+0x76>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 800a308:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800a30c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 800a310:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 800a314:	2214      	movs	r2, #20
 800a316:	2102      	movs	r1, #2
 800a318:	4628      	mov	r0, r5
 800a31a:	f7ff ffba 	bl	800a292 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 800a31e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 800a32a:	2811      	cmp	r0, #17
 800a32c:	dd19      	ble.n	800a362 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 800a32e:	f044 0407 	orr.w	r4, r4, #7
 800a332:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800a336:	3805      	subs	r0, #5
 800a338:	f000 000f 	and.w	r0, r0, #15
 800a33c:	4318      	orrs	r0, r3
 800a33e:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 800a342:	2201      	movs	r2, #1
 800a344:	f10d 0107 	add.w	r1, sp, #7
 800a348:	2009      	movs	r0, #9
 800a34a:	f7ff ffbf 	bl	800a2cc <sx127x_write>
	if (ret < 0) {
 800a34e:	2800      	cmp	r0, #0
 800a350:	db05      	blt.n	800a35e <SX1276SetRfTxPower+0x76>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 800a352:	2201      	movs	r2, #1
 800a354:	f10d 0106 	add.w	r1, sp, #6
 800a358:	204d      	movs	r0, #77	; 0x4d
 800a35a:	f7ff ffb7 	bl	800a2cc <sx127x_write>
}
 800a35e:	b003      	add	sp, #12
 800a360:	bd30      	pop	{r4, r5, pc}
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 800a362:	f044 0404 	orr.w	r4, r4, #4
 800a366:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800a36a:	3802      	subs	r0, #2
 800a36c:	f000 000f 	and.w	r0, r0, #15
 800a370:	4318      	orrs	r0, r3
 800a372:	f88d 0007 	strb.w	r0, [sp, #7]
 800a376:	e7e4      	b.n	800a342 <SX1276SetRfTxPower+0x5a>

0800a378 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800a378:	e004      	b.n	800a384 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800a37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a37e:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800a382:	461a      	mov	r2, r3
 800a384:	1e53      	subs	r3, r2, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	2a00      	cmp	r2, #0
 800a38a:	d1f6      	bne.n	800a37a <memcpy1+0x2>
    }
}
 800a38c:	4770      	bx	lr

0800a38e <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800a392:	f7ff ff2f 	bl	800a1f4 <RtcGetMinimumTimeout>
 800a396:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800a398:	2301      	movs	r3, #1
 800a39a:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800a39c:	6826      	ldr	r6, [r4, #0]
 800a39e:	f7f9 f9a1 	bl	80036e4 <RtcGetTimerElapsedTime>
 800a3a2:	4428      	add	r0, r5
 800a3a4:	4286      	cmp	r6, r0
 800a3a6:	d303      	bcc.n	800a3b0 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	f7f9 f9b1 	bl	8003710 <RtcSetAlarm>
}
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800a3b0:	f7f9 f998 	bl	80036e4 <RtcGetTimerElapsedTime>
 800a3b4:	4405      	add	r5, r0
 800a3b6:	6025      	str	r5, [r4, #0]
 800a3b8:	e7f6      	b.n	800a3a8 <TimerSetTimeout+0x1a>

0800a3ba <TimerInit>:
    obj->Timestamp = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800a3be:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800a3c0:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800a3c2:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800a3c4:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800a3c6:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800a3c8:	6143      	str	r3, [r0, #20]
}
 800a3ca:	4770      	bx	lr

0800a3cc <TimerSetValue>:
{
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	f7ff ff1c 	bl	800a20e <RtcMs2Tick>
 800a3d6:	4605      	mov	r5, r0
    TimerStop( obj );
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7f9 fe19 	bl	8004010 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800a3de:	f7ff ff09 	bl	800a1f4 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800a3e2:	4285      	cmp	r5, r0
 800a3e4:	d300      	bcc.n	800a3e8 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800a3e6:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800a3e8:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800a3ea:	6060      	str	r0, [r4, #4]
}
 800a3ec:	bd38      	pop	{r3, r4, r5, pc}

0800a3ee <TimerGetCurrentTime>:
{
 800a3ee:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800a3f0:	f7ff fef8 	bl	800a1e4 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800a3f4:	f7ff ff0c 	bl	800a210 <RtcTick2Ms>
}
 800a3f8:	bd08      	pop	{r3, pc}

0800a3fa <TimerGetElapsedTime>:
{
 800a3fa:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	b908      	cbnz	r0, 800a404 <TimerGetElapsedTime+0xa>
}
 800a400:	4620      	mov	r0, r4
 800a402:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800a404:	f7ff feee 	bl	800a1e4 <RtcGetTimerValue>
 800a408:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800a40a:	4620      	mov	r0, r4
 800a40c:	f7ff feff 	bl	800a20e <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800a410:	1a28      	subs	r0, r5, r0
 800a412:	f7ff fefd 	bl	800a210 <RtcTick2Ms>
 800a416:	4604      	mov	r4, r0
 800a418:	e7f2      	b.n	800a400 <TimerGetElapsedTime+0x6>

0800a41a <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800a41a:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800a41c:	f7ff feec 	bl	800a1f8 <DelayMsMcu>
}
 800a420:	bd08      	pop	{r3, pc}

0800a422 <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800a422:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800a424:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800a428:	b2c3      	uxtb	r3, r0
 800a42a:	fb02 f303 	mul.w	r3, r2, r3
 800a42e:	3380      	adds	r3, #128	; 0x80
 800a430:	0a1b      	lsrs	r3, r3, #8
}
 800a432:	fb02 3001 	mla	r0, r2, r1, r3
 800a436:	4770      	bx	lr

0800a438 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800a438:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800a43a:	b941      	cbnz	r1, 800a44e <SX1276GetGfskTimeOnAirNumerator+0x16>
 800a43c:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800a43e:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800a440:	b13b      	cbz	r3, 800a452 <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800a442:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800a444:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800a446:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800a44a:	3018      	adds	r0, #24
 800a44c:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800a44e:	2100      	movs	r1, #0
 800a450:	e7f5      	b.n	800a43e <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800a452:	2300      	movs	r3, #0
 800a454:	e7f6      	b.n	800a444 <SX1276GetGfskTimeOnAirNumerator+0xc>

0800a456 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800a456:	b570      	push	{r4, r5, r6, lr}
 800a458:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800a45c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800a460:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a462:	f1a1 0c05 	sub.w	ip, r1, #5
 800a466:	f1bc 0f01 	cmp.w	ip, #1
 800a46a:	d932      	bls.n	800a4d2 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a46c:	b918      	cbnz	r0, 800a476 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800a46e:	f1a1 060b 	sub.w	r6, r1, #11
 800a472:	2e01      	cmp	r6, #1
 800a474:	d935      	bls.n	800a4e2 <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800a476:	2801      	cmp	r0, #1
 800a478:	d02f      	beq.n	800a4da <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800a47a:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a47c:	f89d e014 	ldrb.w	lr, [sp, #20]
 800a480:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800a484:	b38d      	cbz	r5, 800a4ea <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800a486:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a48a:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800a48c:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800a48e:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800a492:	b36c      	cbz	r4, 800a4f0 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800a494:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800a498:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800a49a:	2906      	cmp	r1, #6
 800a49c:	d904      	bls.n	800a4a8 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800a49e:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800a4a2:	b10e      	cbz	r6, 800a4a8 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800a4a4:	1e88      	subs	r0, r1, #2
 800a4a6:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800a4a8:	f1bc 0f00 	cmp.w	ip, #0
 800a4ac:	db23      	blt.n	800a4f6 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a4ae:	4484      	add	ip, r0
 800a4b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a4b4:	fb9c fcf0 	sdiv	ip, ip, r0
 800a4b8:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800a4bc:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800a4c0:	2906      	cmp	r1, #6
 800a4c2:	d801      	bhi.n	800a4c8 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800a4c4:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a4c8:	0080      	lsls	r0, r0, #2
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	3902      	subs	r1, #2
}
 800a4ce:	4088      	lsls	r0, r1
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800a4d2:	2b0b      	cmp	r3, #11
 800a4d4:	d8ca      	bhi.n	800a46c <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	e7c8      	b.n	800a46c <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a4da:	290c      	cmp	r1, #12
 800a4dc:	d003      	beq.n	800a4e6 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800a4de:	2600      	movs	r6, #0
 800a4e0:	e7cc      	b.n	800a47c <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800a4e2:	2601      	movs	r6, #1
 800a4e4:	e7ca      	b.n	800a47c <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800a4e6:	2601      	movs	r6, #1
 800a4e8:	e7c8      	b.n	800a47c <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800a4ea:	f04f 0c00 	mov.w	ip, #0
 800a4ee:	e7cc      	b.n	800a48a <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800a4f0:	f04f 0c14 	mov.w	ip, #20
 800a4f4:	e7d0      	b.n	800a498 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800a4f6:	f04f 0c00 	mov.w	ip, #0
 800a4fa:	e7d8      	b.n	800a4ae <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800a4fc <SX1276ReadFifo>:
{
 800a4fc:	b508      	push	{r3, lr}
 800a4fe:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800a500:	4601      	mov	r1, r0
 800a502:	2000      	movs	r0, #0
 800a504:	f7ff fedd 	bl	800a2c2 <SX1276ReadBuffer>
}
 800a508:	bd08      	pop	{r3, pc}

0800a50a <SX1276WriteFifo>:
{
 800a50a:	b508      	push	{r3, lr}
 800a50c:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800a50e:	4601      	mov	r1, r0
 800a510:	2000      	movs	r0, #0
 800a512:	f7ff fee4 	bl	800a2de <SX1276WriteBuffer>
}
 800a516:	bd08      	pop	{r3, pc}

0800a518 <SX1276GetTimeOnAir>:
{
 800a518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a51a:	b085      	sub	sp, #20
 800a51c:	460e      	mov	r6, r1
 800a51e:	4615      	mov	r5, r2
 800a520:	461a      	mov	r2, r3
 800a522:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800a526:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800a52a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800a52e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800a532:	b148      	cbz	r0, 800a548 <SX1276GetTimeOnAir+0x30>
 800a534:	2801      	cmp	r0, #1
 800a536:	d010      	beq.n	800a55a <SX1276GetTimeOnAir+0x42>
 800a538:	2501      	movs	r5, #1
 800a53a:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800a53c:	1960      	adds	r0, r4, r5
 800a53e:	3801      	subs	r0, #1
}
 800a540:	fbb0 f0f5 	udiv	r0, r0, r5
 800a544:	b005      	add	sp, #20
 800a546:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800a548:	463a      	mov	r2, r7
 800a54a:	4660      	mov	r0, ip
 800a54c:	f7ff ff74 	bl	800a438 <SX1276GetGfskTimeOnAirNumerator>
 800a550:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a554:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800a558:	e7f0      	b.n	800a53c <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800a55a:	9302      	str	r3, [sp, #8]
 800a55c:	9701      	str	r7, [sp, #4]
 800a55e:	9100      	str	r1, [sp, #0]
 800a560:	4663      	mov	r3, ip
 800a562:	4629      	mov	r1, r5
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff ff76 	bl	800a456 <SX1276GetLoRaTimeOnAirNumerator>
 800a56a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a56e:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800a572:	4630      	mov	r0, r6
 800a574:	f7f9 fdc8 	bl	8004108 <SX1276GetLoRaBandwidthInHz>
 800a578:	4605      	mov	r5, r0
        break;
 800a57a:	e7df      	b.n	800a53c <SX1276GetTimeOnAir+0x24>

0800a57c <SX1276Write>:
{
 800a57c:	b500      	push	{lr}
 800a57e:	b083      	sub	sp, #12
 800a580:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800a584:	2201      	movs	r2, #1
 800a586:	f10d 0107 	add.w	r1, sp, #7
 800a58a:	f7ff fea8 	bl	800a2de <SX1276WriteBuffer>
}
 800a58e:	b003      	add	sp, #12
 800a590:	f85d fb04 	ldr.w	pc, [sp], #4

0800a594 <SX1276Read>:
{
 800a594:	b500      	push	{lr}
 800a596:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800a598:	2201      	movs	r2, #1
 800a59a:	f10d 0107 	add.w	r1, sp, #7
 800a59e:	f7ff fe90 	bl	800a2c2 <SX1276ReadBuffer>
}
 800a5a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a5a6:	b003      	add	sp, #12
 800a5a8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a5ac <SX1276SetOpMode>:
{
 800a5ac:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	b970      	cbnz	r0, 800a5d0 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	f7ff fe7b 	bl	800a2ae <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800a5b8:	2001      	movs	r0, #1
 800a5ba:	f7ff ffeb 	bl	800a594 <SX1276Read>
 800a5be:	b241      	sxtb	r1, r0
 800a5c0:	f021 0107 	bic.w	r1, r1, #7
 800a5c4:	4321      	orrs	r1, r4
 800a5c6:	b2c9      	uxtb	r1, r1
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	f7ff ffd7 	bl	800a57c <SX1276Write>
}
 800a5ce:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	f7ff fe6d 	bl	800a2b0 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	f7ff fe69 	bl	800a2ae <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7ff fe68 	bl	800a2b2 <SX1276SetAntSw>
 800a5e2:	e7e9      	b.n	800a5b8 <SX1276SetOpMode+0xc>

0800a5e4 <SX1276IsChannelFree>:
{
 800a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	4616      	mov	r6, r2
 800a5ec:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800a5ee:	f7fa f8d9 	bl	80047a4 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	f7fa fb6c 	bl	8004cd0 <SX1276SetModem>
    SX1276SetChannel( freq );
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7f9 fdaf 	bl	800415c <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7f9 fd5a 	bl	80040b8 <GetFskBandwidthRegValue>
 800a604:	4604      	mov	r4, r0
 800a606:	4601      	mov	r1, r0
 800a608:	2012      	movs	r0, #18
 800a60a:	f7ff ffb7 	bl	800a57c <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800a60e:	4621      	mov	r1, r4
 800a610:	2013      	movs	r0, #19
 800a612:	f7ff ffb3 	bl	800a57c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800a616:	2005      	movs	r0, #5
 800a618:	f7ff ffc8 	bl	800a5ac <SX1276SetOpMode>
    DelayMs( 1 );
 800a61c:	2001      	movs	r0, #1
 800a61e:	f7ff fefc 	bl	800a41a <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800a622:	f7ff fee4 	bl	800a3ee <TimerGetCurrentTime>
 800a626:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800a628:	4620      	mov	r0, r4
 800a62a:	f7ff fee6 	bl	800a3fa <TimerGetElapsedTime>
 800a62e:	42a8      	cmp	r0, r5
 800a630:	d206      	bcs.n	800a640 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800a632:	2000      	movs	r0, #0
 800a634:	f7fa fb24 	bl	8004c80 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800a638:	42b0      	cmp	r0, r6
 800a63a:	ddf5      	ble.n	800a628 <SX1276IsChannelFree+0x44>
            status = false;
 800a63c:	2400      	movs	r4, #0
 800a63e:	e000      	b.n	800a642 <SX1276IsChannelFree+0x5e>
    bool status = true;
 800a640:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800a642:	f7fa f8af 	bl	80047a4 <SX1276SetSleep>
}
 800a646:	4620      	mov	r0, r4
 800a648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a64a <SX1276Random>:
{
 800a64a:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800a64c:	2001      	movs	r0, #1
 800a64e:	f7fa fb3f 	bl	8004cd0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800a652:	21ff      	movs	r1, #255	; 0xff
 800a654:	2011      	movs	r0, #17
 800a656:	f7ff ff91 	bl	800a57c <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800a65a:	2005      	movs	r0, #5
 800a65c:	f7ff ffa6 	bl	800a5ac <SX1276SetOpMode>
    uint32_t rnd = 0;
 800a660:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800a662:	462c      	mov	r4, r5
 800a664:	e00b      	b.n	800a67e <SX1276Random+0x34>
        DelayMs( 1 );
 800a666:	2001      	movs	r0, #1
 800a668:	f7ff fed7 	bl	800a41a <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800a66c:	202c      	movs	r0, #44	; 0x2c
 800a66e:	f7ff ff91 	bl	800a594 <SX1276Read>
 800a672:	f000 0001 	and.w	r0, r0, #1
 800a676:	40a0      	lsls	r0, r4
 800a678:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800a67a:	3401      	adds	r4, #1
 800a67c:	b2e4      	uxtb	r4, r4
 800a67e:	2c1f      	cmp	r4, #31
 800a680:	d9f1      	bls.n	800a666 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800a682:	f7fa f88f 	bl	80047a4 <SX1276SetSleep>
}
 800a686:	4628      	mov	r0, r5
 800a688:	bd38      	pop	{r3, r4, r5, pc}

0800a68a <SX1276GetWakeupTime>:
{
 800a68a:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800a68c:	f7ff fe0d 	bl	800a2aa <SX1276GetBoardTcxoWakeupTime>
}
 800a690:	3001      	adds	r0, #1
 800a692:	bd08      	pop	{r3, pc}

0800a694 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800a694:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a69a:	6843      	ldr	r3, [r0, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800a6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a8:	d02a      	beq.n	800a700 <uart_stm32_config_get+0x6c>
 800a6aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a6ae:	d129      	bne.n	800a704 <uart_stm32_config_get+0x70>
 800a6b0:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800a6b2:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a6b4:	6843      	ldr	r3, [r0, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800a6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c2:	d023      	beq.n	800a70c <uart_stm32_config_get+0x78>
 800a6c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6c8:	d022      	beq.n	800a710 <uart_stm32_config_get+0x7c>
 800a6ca:	b1eb      	cbz	r3, 800a708 <uart_stm32_config_get+0x74>
		return UART_CFG_STOP_BITS_2;
 800a6cc:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800a6ce:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a6d0:	6843      	ldr	r3, [r0, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800a6d4:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 800a6dc:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800a6e0:	d118      	bne.n	800a714 <uart_stm32_config_get+0x80>
		if (p == LL_USART_PARITY_NONE) {
 800a6e2:	b9e3      	cbnz	r3, 800a71e <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_8;
 800a6e4:	2303      	movs	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800a6e6:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a6e8:	6843      	ldr	r3, [r0, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800a6f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6f6:	d014      	beq.n	800a722 <uart_stm32_config_get+0x8e>
	return UART_CFG_FLOW_CTRL_NONE;
 800a6f8:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800a6fa:	71cb      	strb	r3, [r1, #7]
}
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800a700:	2302      	movs	r3, #2
 800a702:	e7d6      	b.n	800a6b2 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800a704:	2300      	movs	r3, #0
 800a706:	e7d4      	b.n	800a6b2 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800a708:	2301      	movs	r3, #1
 800a70a:	e7e0      	b.n	800a6ce <uart_stm32_config_get+0x3a>
	switch (sb) {
 800a70c:	2300      	movs	r3, #0
 800a70e:	e7de      	b.n	800a6ce <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800a710:	2302      	movs	r3, #2
 800a712:	e7dc      	b.n	800a6ce <uart_stm32_config_get+0x3a>
		if (p == LL_USART_PARITY_NONE) {
 800a714:	b90b      	cbnz	r3, 800a71a <uart_stm32_config_get+0x86>
			return UART_CFG_DATA_BITS_9;
 800a716:	2304      	movs	r3, #4
 800a718:	e7e5      	b.n	800a6e6 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_8;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e7e3      	b.n	800a6e6 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_7;
 800a71e:	2302      	movs	r3, #2
 800a720:	e7e1      	b.n	800a6e6 <uart_stm32_config_get+0x52>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800a722:	2301      	movs	r3, #1
 800a724:	e7e9      	b.n	800a6fa <uart_stm32_config_get+0x66>

0800a726 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a726:	6843      	ldr	r3, [r0, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800a72a:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800a72c:	f012 0f08 	tst.w	r2, #8
 800a730:	d012      	beq.n	800a758 <uart_stm32_poll_in+0x32>
{
 800a732:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800a738:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800a73e:	9a01      	ldr	r2, [sp, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800a740:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800a742:	f012 0f20 	tst.w	r2, #32
 800a746:	d004      	beq.n	800a752 <uart_stm32_poll_in+0x2c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800a748:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800a74a:	700b      	strb	r3, [r1, #0]
	return 0;
 800a74c:	2000      	movs	r0, #0
}
 800a74e:	b002      	add	sp, #8
 800a750:	4770      	bx	lr
		return -1;
 800a752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a756:	e7fa      	b.n	800a74e <uart_stm32_poll_in+0x28>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800a758:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800a75a:	f012 0f20 	tst.w	r2, #32
 800a75e:	d003      	beq.n	800a768 <uart_stm32_poll_in+0x42>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800a760:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800a762:	700b      	strb	r3, [r1, #0]
	return 0;
 800a764:	2000      	movs	r0, #0
 800a766:	4770      	bx	lr
		return -1;
 800a768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a76c:	4770      	bx	lr

0800a76e <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a76e:	6843      	ldr	r3, [r0, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800a772:	6813      	ldr	r3, [r2, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800a774:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a778:	d0fb      	beq.n	800a772 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800a77a:	6051      	str	r1, [r2, #4]
}
 800a77c:	4770      	bx	lr

0800a77e <uart_stm32_err_check>:
{
 800a77e:	b084      	sub	sp, #16
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800a780:	6843      	ldr	r3, [r0, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800a784:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800a786:	f010 0008 	ands.w	r0, r0, #8
 800a78a:	d000      	beq.n	800a78e <uart_stm32_err_check+0x10>
		err |= UART_ERROR_OVERRUN;
 800a78c:	2001      	movs	r0, #1
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800a78e:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800a790:	f012 0f01 	tst.w	r2, #1
 800a794:	d001      	beq.n	800a79a <uart_stm32_err_check+0x1c>
		err |= UART_ERROR_PARITY;
 800a796:	f040 0002 	orr.w	r0, r0, #2
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800a79a:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800a79c:	f012 0f02 	tst.w	r2, #2
 800a7a0:	d001      	beq.n	800a7a6 <uart_stm32_err_check+0x28>
		err |= UART_ERROR_FRAMING;
 800a7a2:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800a7a6:	f010 0f01 	tst.w	r0, #1
 800a7aa:	d005      	beq.n	800a7b8 <uart_stm32_err_check+0x3a>
  tmpreg = USARTx->SR;
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800a7b0:	9a00      	ldr	r2, [sp, #0]
  tmpreg = USARTx->DR;
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800a7b6:	9a00      	ldr	r2, [sp, #0]
	if (err & UART_ERROR_PARITY) {
 800a7b8:	f010 0f02 	tst.w	r0, #2
 800a7bc:	d005      	beq.n	800a7ca <uart_stm32_err_check+0x4c>
  tmpreg = USARTx->SR;
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800a7c2:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800a7c8:	9a01      	ldr	r2, [sp, #4]
	if (err & UART_ERROR_FRAMING) {
 800a7ca:	f010 0f04 	tst.w	r0, #4
 800a7ce:	d005      	beq.n	800a7dc <uart_stm32_err_check+0x5e>
  tmpreg = USARTx->SR;
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800a7d4:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800a7da:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800a7e0:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 800a7e6:	9b03      	ldr	r3, [sp, #12]
}
 800a7e8:	b004      	add	sp, #16
 800a7ea:	4770      	bx	lr

0800a7ec <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800a7ec:	b148      	cbz	r0, 800a802 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800a7ee:	68c3      	ldr	r3, [r0, #12]
 800a7f0:	8818      	ldrh	r0, [r3, #0]
 800a7f2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800a7f6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a7fa:	bf14      	ite	ne
 800a7fc:	2000      	movne	r0, #0
 800a7fe:	2001      	moveq	r0, #1
 800a800:	4770      	bx	lr
		return false;
 800a802:	2000      	movs	r0, #0
}
 800a804:	4770      	bx	lr

0800a806 <arch_system_halt>:
	__asm__ volatile(
 800a806:	f04f 0210 	mov.w	r2, #16
 800a80a:	f3ef 8311 	mrs	r3, BASEPRI
 800a80e:	f382 8812 	msr	BASEPRI_MAX, r2
 800a812:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800a816:	e7fe      	b.n	800a816 <arch_system_halt+0x10>

0800a818 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800a818:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 800a81a:	f7ff fff4 	bl	800a806 <arch_system_halt>

0800a81e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800a81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a820:	4605      	mov	r5, r0
 800a822:	460e      	mov	r6, r1
 800a824:	f04f 0310 	mov.w	r3, #16
 800a828:	f3ef 8711 	mrs	r7, BASEPRI
 800a82c:	f383 8812 	msr	BASEPRI_MAX, r3
 800a830:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800a834:	f7fc faa0 	bl	8006d78 <z_impl_z_current_get>
 800a838:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800a83a:	4631      	mov	r1, r6
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7ff ffeb 	bl	800a818 <k_sys_fatal_error_handler>
	__asm__ volatile(
 800a842:	f387 8811 	msr	BASEPRI, r7
 800a846:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800a84a:	4620      	mov	r0, r4
 800a84c:	f7f8 fa86 	bl	8002d5c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800a850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a852 <setup_thread_stack>:
{
 800a852:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a854:	3207      	adds	r2, #7
 800a856:	f022 0207 	bic.w	r2, r2, #7
 800a85a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800a85e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800a862:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800a864:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800a866:	2200      	movs	r2, #0
 800a868:	6702      	str	r2, [r0, #112]	; 0x70
}
 800a86a:	18c8      	adds	r0, r1, r3
 800a86c:	bc10      	pop	{r4}
 800a86e:	4770      	bx	lr

0800a870 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a870:	f3ef 8005 	mrs	r0, IPSR
}
 800a874:	3800      	subs	r0, #0
 800a876:	bf18      	it	ne
 800a878:	2001      	movne	r0, #1
 800a87a:	4770      	bx	lr

0800a87c <z_impl_k_thread_name_set>:
}
 800a87c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800a880:	4770      	bx	lr

0800a882 <z_impl_k_thread_start>:
{
 800a882:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800a884:	f7fc f860 	bl	8006948 <z_sched_start>
}
 800a888:	bd08      	pop	{r3, pc}

0800a88a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800a88a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800a88c:	2400      	movs	r4, #0
 800a88e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800a890:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800a892:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800a894:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800a896:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800a898:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800a89a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800a89c:	bc10      	pop	{r4}
 800a89e:	4770      	bx	lr

0800a8a0 <z_impl_k_thread_create>:
{
 800a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a8a8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800a8aa:	2700      	movs	r7, #0
 800a8ac:	9705      	str	r7, [sp, #20]
 800a8ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a8b0:	9704      	str	r7, [sp, #16]
 800a8b2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a8b4:	9703      	str	r7, [sp, #12]
 800a8b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a8b8:	9702      	str	r7, [sp, #8]
 800a8ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a8bc:	9701      	str	r7, [sp, #4]
 800a8be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a8c0:	9700      	str	r7, [sp, #0]
 800a8c2:	f7fb fb05 	bl	8005ed0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800a8c6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a8ca:	bf08      	it	eq
 800a8cc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800a8d0:	d102      	bne.n	800a8d8 <z_impl_k_thread_create+0x38>
}
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	b007      	add	sp, #28
 800a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800a8d8:	4632      	mov	r2, r6
 800a8da:	462b      	mov	r3, r5
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f7fb fae9 	bl	8005eb4 <schedule_new_thread>
 800a8e2:	e7f6      	b.n	800a8d2 <z_impl_k_thread_create+0x32>

0800a8e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800a8e4:	b508      	push	{r3, lr}
	__asm__ volatile(
 800a8e6:	f04f 0210 	mov.w	r2, #16
 800a8ea:	f3ef 8311 	mrs	r3, BASEPRI
 800a8ee:	f382 8812 	msr	BASEPRI_MAX, r2
 800a8f2:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800a8f6:	f7f7 ffc5 	bl	8002884 <arch_cpu_idle>
 800a8fa:	e7f4      	b.n	800a8e6 <idle+0x2>

0800a8fc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800a8fc:	4288      	cmp	r0, r1
 800a8fe:	da00      	bge.n	800a902 <new_prio_for_inheritance+0x6>
 800a900:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800a902:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800a906:	db01      	blt.n	800a90c <new_prio_for_inheritance+0x10>
 800a908:	4608      	mov	r0, r1
 800a90a:	4770      	bx	lr
 800a90c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800a910:	4770      	bx	lr

0800a912 <adjust_owner_prio>:
{
 800a912:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800a914:	6880      	ldr	r0, [r0, #8]
 800a916:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800a91a:	428b      	cmp	r3, r1
 800a91c:	d101      	bne.n	800a922 <adjust_owner_prio+0x10>
	return false;
 800a91e:	2000      	movs	r0, #0
}
 800a920:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800a922:	f7fc f85f 	bl	80069e4 <z_set_prio>
 800a926:	e7fb      	b.n	800a920 <adjust_owner_prio+0xe>

0800a928 <z_impl_k_mutex_init>:
{
 800a928:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800a92a:	2000      	movs	r0, #0
 800a92c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800a92e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800a930:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800a932:	605b      	str	r3, [r3, #4]
}
 800a934:	4770      	bx	lr

0800a936 <prepare_thread_to_run>:
}
#include <syscalls/k_queue_init_mrsh.c>
#endif

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
 800a936:	b508      	push	{r3, lr}
 800a938:	2200      	movs	r2, #0
 800a93a:	67c2      	str	r2, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800a93c:	6141      	str	r1, [r0, #20]
	z_thread_return_value_set_with_data(thread, 0, data);
	z_ready_thread(thread);
 800a93e:	f000 f939 	bl	800abb4 <z_ready_thread>
}
 800a942:	bd08      	pop	{r3, pc}

0800a944 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
 800a944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a948:	4604      	mov	r4, r0
 800a94a:	460e      	mov	r6, r1
 800a94c:	4615      	mov	r5, r2
 800a94e:	4699      	mov	r9, r3
 800a950:	f89d 2020 	ldrb.w	r2, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 800a954:	f100 0808 	add.w	r8, r0, #8
 800a958:	f04f 0310 	mov.w	r3, #16
 800a95c:	f3ef 8711 	mrs	r7, BASEPRI
 800a960:	f383 8812 	msr	BASEPRI_MAX, r3
 800a964:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
 800a968:	b102      	cbz	r2, 800a96c <queue_insert+0x28>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
 800a96a:	6846      	ldr	r6, [r0, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 800a96c:	f104 000c 	add.w	r0, r4, #12
 800a970:	f000 f9e7 	bl	800ad42 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
 800a974:	b9f8      	cbnz	r0, 800a9b6 <queue_insert+0x72>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
 800a976:	f1b9 0f00 	cmp.w	r9, #0
 800a97a:	d125      	bne.n	800a9c8 <queue_insert+0x84>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
 800a97c:	2300      	movs	r3, #0
 800a97e:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
 800a980:	b39e      	cbz	r6, 800a9ea <queue_insert+0xa6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 800a982:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 800a984:	f033 0303 	bics.w	r3, r3, #3
 800a988:	d03b      	beq.n	800aa02 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800a98a:	682a      	ldr	r2, [r5, #0]
 800a98c:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800a990:	4313      	orrs	r3, r2
 800a992:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800a994:	6833      	ldr	r3, [r6, #0]
 800a996:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800a99a:	431d      	orrs	r5, r3
 800a99c:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
 800a99e:	2104      	movs	r1, #4
 800a9a0:	f104 0014 	add.w	r0, r4, #20
 800a9a4:	f000 fb4c 	bl	800b040 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	f7fb fe96 	bl	80066dc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
 800a9b0:	2000      	movs	r0, #0
}
 800a9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7ff ffbd 	bl	800a936 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f7fb fe8c 	bl	80066dc <z_reschedule>
		return 0;
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e7f4      	b.n	800a9b2 <queue_insert+0x6e>
	return z_thread_aligned_alloc(0, size);
 800a9c8:	2108      	movs	r1, #8
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	f7fc ff26 	bl	800781c <z_thread_aligned_alloc>
		if (anode == NULL) {
 800a9d0:	b120      	cbz	r0, 800a9dc <queue_insert+0x98>
		anode->data = data;
 800a9d2:	6045      	str	r5, [r0, #4]
	node->next_and_flags = flags;
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	6002      	str	r2, [r0, #0]
		data = anode;
 800a9d8:	4605      	mov	r5, r0
 800a9da:	e7d1      	b.n	800a980 <queue_insert+0x3c>
	__asm__ volatile(
 800a9dc:	f387 8811 	msr	BASEPRI, r7
 800a9e0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 800a9e4:	f06f 000b 	mvn.w	r0, #11
 800a9e8:	e7e3      	b.n	800a9b2 <queue_insert+0x6e>
	return list->head;
 800a9ea:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	602b      	str	r3, [r5, #0]
	list->head = node;
 800a9f6:	6025      	str	r5, [r4, #0]
	return list->tail;
 800a9f8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1cf      	bne.n	800a99e <queue_insert+0x5a>
	list->tail = node;
 800a9fe:	6065      	str	r5, [r4, #4]
}
 800aa00:	e7cd      	b.n	800a99e <queue_insert+0x5a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800aa08:	602b      	str	r3, [r5, #0]
	return list->tail;
 800aa0a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 800aa0c:	b132      	cbz	r2, 800aa1c <queue_insert+0xd8>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 800aa0e:	6813      	ldr	r3, [r2, #0]
 800aa10:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 800aa14:	432b      	orrs	r3, r5
 800aa16:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800aa18:	6065      	str	r5, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 800aa1a:	e7c0      	b.n	800a99e <queue_insert+0x5a>
	list->tail = node;
 800aa1c:	6065      	str	r5, [r4, #4]
	list->head = node;
 800aa1e:	6025      	str	r5, [r4, #0]
}
 800aa20:	e7bd      	b.n	800a99e <queue_insert+0x5a>

0800aa22 <z_impl_k_queue_init>:
	list->head = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 800aa26:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
 800aa28:	7203      	strb	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
 800aa2a:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
 800aa2e:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800aa30:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
 800aa32:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
 800aa36:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
 800aa38:	6183      	str	r3, [r0, #24]
}
 800aa3a:	4770      	bx	lr

0800aa3c <k_queue_append>:

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, insert, queue);
}

void k_queue_append(struct k_queue *queue, void *data)
{
 800aa3c:	b500      	push	{lr}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	460a      	mov	r2, r1
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append, queue);

	(void)queue_insert(queue, NULL, data, false, true);
 800aa42:	2301      	movs	r3, #1
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	2300      	movs	r3, #0
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f7ff ff7b 	bl	800a944 <queue_insert>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append, queue);
}
 800aa4e:	b003      	add	sp, #12
 800aa50:	f85d fb04 	ldr.w	pc, [sp], #4

0800aa54 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800aa54:	b15a      	cbz	r2, 800aa6e <z_impl_k_sem_init+0x1a>
 800aa56:	428a      	cmp	r2, r1
 800aa58:	d30c      	bcc.n	800aa74 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800aa5a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800aa5c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800aa5e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800aa60:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800aa62:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800aa66:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800aa68:	6143      	str	r3, [r0, #20]
	return 0;
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	4770      	bx	lr
		return -EINVAL;
 800aa6e:	f06f 0015 	mvn.w	r0, #21
 800aa72:	4770      	bx	lr
 800aa74:	f06f 0015 	mvn.w	r0, #21
}
 800aa78:	4770      	bx	lr

0800aa7a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	6043      	str	r3, [r0, #4]
 800aa80:	6083      	str	r3, [r0, #8]
 800aa82:	60c3      	str	r3, [r0, #12]
 800aa84:	6041      	str	r1, [r0, #4]
}
 800aa86:	4770      	bx	lr

0800aa88 <k_work_submit_to_queue>:
{
 800aa88:	b530      	push	{r4, r5, lr}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	9001      	str	r0, [sp, #4]
 800aa8e:	4608      	mov	r0, r1
	__asm__ volatile(
 800aa90:	f04f 0310 	mov.w	r3, #16
 800aa94:	f3ef 8511 	mrs	r5, BASEPRI
 800aa98:	f383 8812 	msr	BASEPRI_MAX, r3
 800aa9c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800aaa0:	a901      	add	r1, sp, #4
 800aaa2:	f7fb fc5f 	bl	8006364 <submit_to_queue_locked>
 800aaa6:	4604      	mov	r4, r0
	__asm__ volatile(
 800aaa8:	f385 8811 	msr	BASEPRI, r5
 800aaac:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800aab0:	2800      	cmp	r0, #0
 800aab2:	dc02      	bgt.n	800aaba <k_work_submit_to_queue+0x32>
}
 800aab4:	4620      	mov	r0, r4
 800aab6:	b003      	add	sp, #12
 800aab8:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800aaba:	f7fc f963 	bl	8006d84 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d0f8      	beq.n	800aab4 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800aac2:	f7fc f8b1 	bl	8006c28 <z_impl_k_yield>
	return ret;
 800aac6:	e7f5      	b.n	800aab4 <k_work_submit_to_queue+0x2c>

0800aac8 <thread_active_elsewhere>:
}
 800aac8:	2000      	movs	r0, #0
 800aaca:	4770      	bx	lr

0800aacc <pended_on_thread>:
}
 800aacc:	6880      	ldr	r0, [r0, #8]
 800aace:	4770      	bx	lr

0800aad0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800aad0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800aad4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800aad8:	4283      	cmp	r3, r0
 800aada:	d001      	beq.n	800aae0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800aadc:	1ac0      	subs	r0, r0, r3
 800aade:	4770      	bx	lr
	return 0;
 800aae0:	2000      	movs	r0, #0
}
 800aae2:	4770      	bx	lr

0800aae4 <z_unpend_thread_no_timeout>:
{
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800aae8:	2300      	movs	r3, #0
	__asm__ volatile(
 800aaea:	f04f 0210 	mov.w	r2, #16
 800aaee:	f3ef 8511 	mrs	r5, BASEPRI
 800aaf2:	f382 8812 	msr	BASEPRI_MAX, r2
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	e010      	b.n	800ab1e <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7ff ffe5 	bl	800aacc <pended_on_thread>
 800ab02:	4621      	mov	r1, r4
 800ab04:	f000 f823 	bl	800ab4e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ab08:	7b63      	ldrb	r3, [r4, #13]
 800ab0a:	f023 0302 	bic.w	r3, r3, #2
 800ab0e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ab14:	f385 8811 	msr	BASEPRI, r5
 800ab18:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0ec      	beq.n	800aafc <z_unpend_thread_no_timeout+0x18>
}
 800ab22:	bd38      	pop	{r3, r4, r5, pc}

0800ab24 <z_reschedule_irqlock>:
{
 800ab24:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800ab26:	4603      	mov	r3, r0
 800ab28:	b920      	cbnz	r0, 800ab34 <z_reschedule_irqlock+0x10>
 800ab2a:	f3ef 8205 	mrs	r2, IPSR
 800ab2e:	b942      	cbnz	r2, 800ab42 <z_reschedule_irqlock+0x1e>
 800ab30:	2201      	movs	r2, #1
 800ab32:	e000      	b.n	800ab36 <z_reschedule_irqlock+0x12>
 800ab34:	2200      	movs	r2, #0
	if (resched(key)) {
 800ab36:	b932      	cbnz	r2, 800ab46 <z_reschedule_irqlock+0x22>
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
}
 800ab40:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800ab42:	2200      	movs	r2, #0
 800ab44:	e7f7      	b.n	800ab36 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f7 feea 	bl	8002920 <arch_swap>
	return ret;
 800ab4c:	e7f8      	b.n	800ab40 <z_reschedule_irqlock+0x1c>

0800ab4e <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800ab4e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800ab50:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800ab52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ab54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ab56:	2300      	movs	r3, #0
 800ab58:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800ab5a:	604b      	str	r3, [r1, #4]
}
 800ab5c:	4770      	bx	lr

0800ab5e <z_unpend_thread>:
{
 800ab5e:	b538      	push	{r3, r4, r5, lr}
 800ab60:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ab62:	2300      	movs	r3, #0
	__asm__ volatile(
 800ab64:	f04f 0210 	mov.w	r2, #16
 800ab68:	f3ef 8511 	mrs	r5, BASEPRI
 800ab6c:	f382 8812 	msr	BASEPRI_MAX, r2
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	e010      	b.n	800ab98 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff ffa8 	bl	800aacc <pended_on_thread>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	f7ff ffe6 	bl	800ab4e <z_priq_dumb_remove>
 800ab82:	7b63      	ldrb	r3, [r4, #13]
 800ab84:	f023 0302 	bic.w	r3, r3, #2
 800ab88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ab8e:	f385 8811 	msr	BASEPRI, r5
 800ab92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ab96:	2301      	movs	r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0ec      	beq.n	800ab76 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800ab9c:	f104 0018 	add.w	r0, r4, #24
 800aba0:	f000 f948 	bl	800ae34 <z_abort_timeout>
}
 800aba4:	bd38      	pop	{r3, r4, r5, pc}

0800aba6 <z_priq_dumb_best>:
{
 800aba6:	4603      	mov	r3, r0
	return list->head == list;
 800aba8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800abaa:	4283      	cmp	r3, r0
 800abac:	d000      	beq.n	800abb0 <z_priq_dumb_best+0xa>
}
 800abae:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800abb0:	2000      	movs	r0, #0
	return thread;
 800abb2:	e7fc      	b.n	800abae <z_priq_dumb_best+0x8>

0800abb4 <z_ready_thread>:
{
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800abb8:	2300      	movs	r3, #0
	__asm__ volatile(
 800abba:	f04f 0210 	mov.w	r2, #16
 800abbe:	f3ef 8511 	mrs	r5, BASEPRI
 800abc2:	f382 8812 	msr	BASEPRI_MAX, r2
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	e004      	b.n	800abd6 <z_ready_thread+0x22>
	__asm__ volatile(
 800abcc:	f385 8811 	msr	BASEPRI, r5
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	2301      	movs	r3, #1
 800abd6:	b943      	cbnz	r3, 800abea <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff ff75 	bl	800aac8 <thread_active_elsewhere>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d1f4      	bne.n	800abcc <z_ready_thread+0x18>
			ready_thread(thread);
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7fb fe70 	bl	80068c8 <ready_thread>
 800abe8:	e7f0      	b.n	800abcc <z_ready_thread+0x18>
}
 800abea:	bd38      	pop	{r3, r4, r5, pc}

0800abec <z_thread_timeout>:
{
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800abf0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800abf4:	2300      	movs	r3, #0
	__asm__ volatile(
 800abf6:	f04f 0210 	mov.w	r2, #16
 800abfa:	f3ef 8611 	mrs	r6, BASEPRI
 800abfe:	f382 8812 	msr	BASEPRI_MAX, r2
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	e011      	b.n	800ac2c <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800ac08:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800ac0c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800ac10:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800ac14:	f023 0310 	bic.w	r3, r3, #16
 800ac18:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f7fb fe53 	bl	80068c8 <ready_thread>
	__asm__ volatile(
 800ac22:	f386 8811 	msr	BASEPRI, r6
 800ac26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	b9ab      	cbnz	r3, 800ac5a <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800ac2e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800ac32:	f013 0f28 	tst.w	r3, #40	; 0x28
 800ac36:	d1f4      	bne.n	800ac22 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800ac38:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0e3      	beq.n	800ac08 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ac40:	4628      	mov	r0, r5
 800ac42:	f7ff ff43 	bl	800aacc <pended_on_thread>
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7ff ff81 	bl	800ab4e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ac4c:	7b6b      	ldrb	r3, [r5, #13]
 800ac4e:	f023 0302 	bic.w	r3, r3, #2
 800ac52:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	60ab      	str	r3, [r5, #8]
}
 800ac58:	e7d6      	b.n	800ac08 <z_thread_timeout+0x1c>
}
 800ac5a:	bd70      	pop	{r4, r5, r6, pc}

0800ac5c <add_to_waitq_locked>:
{
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	4605      	mov	r5, r0
 800ac60:	460e      	mov	r6, r1
	unready_thread(thread);
 800ac62:	f7fb fe8f 	bl	8006984 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800ac66:	7b6b      	ldrb	r3, [r5, #13]
 800ac68:	f043 0302 	orr.w	r3, r3, #2
 800ac6c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800ac6e:	b1b6      	cbz	r6, 800ac9e <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800ac70:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800ac72:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d019      	beq.n	800acac <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ac78:	b164      	cbz	r4, 800ac94 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f7ff ff27 	bl	800aad0 <z_sched_prio_cmp>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	dc0c      	bgt.n	800aca0 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ac86:	b12c      	cbz	r4, 800ac94 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800ac88:	6873      	ldr	r3, [r6, #4]
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	d002      	beq.n	800ac94 <add_to_waitq_locked+0x38>
 800ac8e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ac90:	2c00      	cmp	r4, #0
 800ac92:	d1f1      	bne.n	800ac78 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800ac94:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800ac96:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800ac98:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800ac9a:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800ac9c:	6075      	str	r5, [r6, #4]
}
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800aca0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800aca2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800aca4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800aca6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800aca8:	6065      	str	r5, [r4, #4]
}
 800acaa:	e7f8      	b.n	800ac9e <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800acac:	2400      	movs	r4, #0
 800acae:	e7e3      	b.n	800ac78 <add_to_waitq_locked+0x1c>

0800acb0 <pend>:
{
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4605      	mov	r5, r0
 800acb6:	460e      	mov	r6, r1
 800acb8:	4691      	mov	r9, r2
 800acba:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800acbc:	2400      	movs	r4, #0
	__asm__ volatile(
 800acbe:	f04f 0310 	mov.w	r3, #16
 800acc2:	f3ef 8711 	mrs	r7, BASEPRI
 800acc6:	f383 8812 	msr	BASEPRI_MAX, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	e008      	b.n	800ace2 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	f7ff ffc2 	bl	800ac5c <add_to_waitq_locked>
	__asm__ volatile(
 800acd8:	f387 8811 	msr	BASEPRI, r7
 800acdc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ace0:	2401      	movs	r4, #1
 800ace2:	2c00      	cmp	r4, #0
 800ace4:	d0f4      	beq.n	800acd0 <pend+0x20>
	add_thread_timeout(thread, timeout);
 800ace6:	464a      	mov	r2, r9
 800ace8:	4643      	mov	r3, r8
 800acea:	4628      	mov	r0, r5
 800acec:	f7fb fca2 	bl	8006634 <add_thread_timeout>
}
 800acf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800acf4 <z_unpend1_no_timeout>:
{
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800acf8:	2300      	movs	r3, #0
	__asm__ volatile(
 800acfa:	f04f 0210 	mov.w	r2, #16
 800acfe:	f3ef 8611 	mrs	r6, BASEPRI
 800ad02:	f382 8812 	msr	BASEPRI_MAX, r2
 800ad06:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800ad0a:	461c      	mov	r4, r3
 800ad0c:	e004      	b.n	800ad18 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800ad0e:	f386 8811 	msr	BASEPRI, r6
 800ad12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ad16:	2301      	movs	r3, #1
 800ad18:	b98b      	cbnz	r3, 800ad3e <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f7ff ff43 	bl	800aba6 <z_priq_dumb_best>
		if (thread != NULL) {
 800ad20:	4604      	mov	r4, r0
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0f3      	beq.n	800ad0e <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ad26:	f7ff fed1 	bl	800aacc <pended_on_thread>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	f7ff ff0f 	bl	800ab4e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ad30:	7b63      	ldrb	r3, [r4, #13]
 800ad32:	f023 0302 	bic.w	r3, r3, #2
 800ad36:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60a3      	str	r3, [r4, #8]
}
 800ad3c:	e7e7      	b.n	800ad0e <z_unpend1_no_timeout+0x1a>
}
 800ad3e:	4620      	mov	r0, r4
 800ad40:	bd70      	pop	{r4, r5, r6, pc}

0800ad42 <z_unpend_first_thread>:
{
 800ad42:	b570      	push	{r4, r5, r6, lr}
 800ad44:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800ad46:	2300      	movs	r3, #0
	__asm__ volatile(
 800ad48:	f04f 0210 	mov.w	r2, #16
 800ad4c:	f3ef 8611 	mrs	r6, BASEPRI
 800ad50:	f382 8812 	msr	BASEPRI_MAX, r2
 800ad54:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800ad58:	461c      	mov	r4, r3
 800ad5a:	e004      	b.n	800ad66 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800ad5c:	f386 8811 	msr	BASEPRI, r6
 800ad60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ad64:	2301      	movs	r3, #1
 800ad66:	b9ab      	cbnz	r3, 800ad94 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff ff1c 	bl	800aba6 <z_priq_dumb_best>
		if (thread != NULL) {
 800ad6e:	4604      	mov	r4, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d0f3      	beq.n	800ad5c <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ad74:	f7ff feaa 	bl	800aacc <pended_on_thread>
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7ff fee8 	bl	800ab4e <z_priq_dumb_remove>
 800ad7e:	7b63      	ldrb	r3, [r4, #13]
 800ad80:	f023 0302 	bic.w	r3, r3, #2
 800ad84:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60a3      	str	r3, [r4, #8]
 800ad8a:	f104 0018 	add.w	r0, r4, #24
 800ad8e:	f000 f851 	bl	800ae34 <z_abort_timeout>
 800ad92:	e7e3      	b.n	800ad5c <z_unpend_first_thread+0x1a>
}
 800ad94:	4620      	mov	r0, r4
 800ad96:	bd70      	pop	{r4, r5, r6, pc}

0800ad98 <z_sched_wake>:
{
 800ad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	4688      	mov	r8, r1
 800ada0:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800ada2:	2300      	movs	r3, #0
	__asm__ volatile(
 800ada4:	f04f 0210 	mov.w	r2, #16
 800ada8:	f3ef 8611 	mrs	r6, BASEPRI
 800adac:	f382 8812 	msr	BASEPRI_MAX, r2
 800adb0:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800adb4:	4699      	mov	r9, r3
 800adb6:	e004      	b.n	800adc2 <z_sched_wake+0x2a>
	__asm__ volatile(
 800adb8:	f386 8811 	msr	BASEPRI, r6
 800adbc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800adc0:	2301      	movs	r3, #1
 800adc2:	b9eb      	cbnz	r3, 800ae00 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800adc4:	4628      	mov	r0, r5
 800adc6:	f7ff feee 	bl	800aba6 <z_priq_dumb_best>
		if (thread != NULL) {
 800adca:	4604      	mov	r4, r0
 800adcc:	2800      	cmp	r0, #0
 800adce:	d0f3      	beq.n	800adb8 <z_sched_wake+0x20>
 800add0:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
 800add4:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800add6:	f7ff fe79 	bl	800aacc <pended_on_thread>
 800adda:	4621      	mov	r1, r4
 800addc:	f7ff feb7 	bl	800ab4e <z_priq_dumb_remove>
 800ade0:	7b63      	ldrb	r3, [r4, #13]
 800ade2:	f023 0302 	bic.w	r3, r3, #2
 800ade6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	60a3      	str	r3, [r4, #8]
 800adec:	f104 0018 	add.w	r0, r4, #24
 800adf0:	f000 f820 	bl	800ae34 <z_abort_timeout>
			ready_thread(thread);
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7fb fd67 	bl	80068c8 <ready_thread>
			ret = true;
 800adfa:	f04f 0901 	mov.w	r9, #1
 800adfe:	e7db      	b.n	800adb8 <z_sched_wake+0x20>
}
 800ae00:	4648      	mov	r0, r9
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ae06 <remove_timeout>:
{
 800ae06:	b510      	push	{r4, lr}
 800ae08:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800ae0a:	f7fc f82b 	bl	8006e64 <next>
 800ae0e:	b148      	cbz	r0, 800ae24 <remove_timeout+0x1e>
 800ae10:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800ae12:	6920      	ldr	r0, [r4, #16]
 800ae14:	6961      	ldr	r1, [r4, #20]
 800ae16:	6913      	ldr	r3, [r2, #16]
 800ae18:	181b      	adds	r3, r3, r0
 800ae1a:	6950      	ldr	r0, [r2, #20]
 800ae1c:	eb41 0100 	adc.w	r1, r1, r0
 800ae20:	6113      	str	r3, [r2, #16]
 800ae22:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800ae24:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800ae26:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800ae28:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ae2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800ae30:	6063      	str	r3, [r4, #4]
}
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <z_abort_timeout>:
{
 800ae34:	b570      	push	{r4, r5, r6, lr}
 800ae36:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800ae38:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae3a:	f04f 0210 	mov.w	r2, #16
 800ae3e:	f3ef 8611 	mrs	r6, BASEPRI
 800ae42:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae46:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800ae4a:	f06f 0015 	mvn.w	r0, #21
 800ae4e:	e004      	b.n	800ae5a <z_abort_timeout+0x26>
	__asm__ volatile(
 800ae50:	f386 8811 	msr	BASEPRI, r6
 800ae54:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800ae58:	2301      	movs	r3, #1
 800ae5a:	461d      	mov	r5, r3
 800ae5c:	b93b      	cbnz	r3, 800ae6e <z_abort_timeout+0x3a>
	return node->next != NULL;
 800ae5e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0f5      	beq.n	800ae50 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7ff ffce 	bl	800ae06 <remove_timeout>
			ret = 0;
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	e7f0      	b.n	800ae50 <z_abort_timeout+0x1c>
}
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}

0800ae70 <z_set_timeout_expiry>:
{
 800ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae72:	4605      	mov	r5, r0
 800ae74:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800ae76:	2300      	movs	r3, #0
	__asm__ volatile(
 800ae78:	f04f 0210 	mov.w	r2, #16
 800ae7c:	f3ef 8611 	mrs	r6, BASEPRI
 800ae80:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	e00a      	b.n	800aea0 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800ae8a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800ae8c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800ae90:	2801      	cmp	r0, #1
 800ae92:	dd00      	ble.n	800ae96 <z_set_timeout_expiry+0x26>
 800ae94:	b97c      	cbnz	r4, 800aeb6 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800ae96:	f386 8811 	msr	BASEPRI, r6
 800ae9a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800ae9e:	2301      	movs	r3, #1
 800aea0:	461c      	mov	r4, r3
 800aea2:	b97b      	cbnz	r3, 800aec4 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800aea4:	f7fb fff6 	bl	8006e94 <next_timeout>
			      || (ticks <= next_to);
 800aea8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800aeac:	d0ed      	beq.n	800ae8a <z_set_timeout_expiry+0x1a>
 800aeae:	42a8      	cmp	r0, r5
 800aeb0:	dbec      	blt.n	800ae8c <z_set_timeout_expiry+0x1c>
 800aeb2:	2401      	movs	r4, #1
 800aeb4:	e7ea      	b.n	800ae8c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	42a8      	cmp	r0, r5
 800aeba:	bfa8      	it	ge
 800aebc:	4628      	movge	r0, r5
 800aebe:	f7fa fd11 	bl	80058e4 <sys_clock_set_timeout>
 800aec2:	e7e8      	b.n	800ae96 <z_set_timeout_expiry+0x26>
}
 800aec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aec6 <sys_clock_tick_get_32>:
{
 800aec6:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800aec8:	f7fc f8fa 	bl	80070c0 <sys_clock_tick_get>
}
 800aecc:	bd08      	pop	{r3, pc}

0800aece <z_impl_k_uptime_ticks>:
{
 800aece:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800aed0:	f7fc f8f6 	bl	80070c0 <sys_clock_tick_get>
}
 800aed4:	bd08      	pop	{r3, pc}

0800aed6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800aed6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800aeda:	bf08      	it	eq
 800aedc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800aee0:	d021      	beq.n	800af26 <sys_clock_timeout_end_calc+0x50>
{
 800aee2:	b538      	push	{r3, r4, r5, lr}
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800aee8:	ea51 0300 	orrs.w	r3, r1, r0
 800aeec:	d009      	beq.n	800af02 <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 800aeee:	f06f 0301 	mvn.w	r3, #1
 800aef2:	1a18      	subs	r0, r3, r0
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aef8:	eb63 0101 	sbc.w	r1, r3, r1
 800aefc:	2900      	cmp	r1, #0
 800aefe:	db03      	blt.n	800af08 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 800af00:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
 800af02:	f7fc f8dd 	bl	80070c0 <sys_clock_tick_get>
 800af06:	e7fb      	b.n	800af00 <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
 800af08:	f7fc f8da 	bl	80070c0 <sys_clock_tick_get>
 800af0c:	4603      	mov	r3, r0
 800af0e:	4628      	mov	r0, r5
 800af10:	4622      	mov	r2, r4
 800af12:	2d01      	cmp	r5, #1
 800af14:	f174 0400 	sbcs.w	r4, r4, #0
 800af18:	da01      	bge.n	800af1e <sys_clock_timeout_end_calc+0x48>
 800af1a:	2001      	movs	r0, #1
 800af1c:	2200      	movs	r2, #0
 800af1e:	1818      	adds	r0, r3, r0
 800af20:	eb41 0102 	adc.w	r1, r1, r2
 800af24:	e7ec      	b.n	800af00 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
 800af26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af2a:	4601      	mov	r1, r0
}
 800af2c:	4770      	bx	lr

0800af2e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800af2e:	b510      	push	{r4, lr}
 800af30:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800af32:	f7ff ff7f 	bl	800ae34 <z_abort_timeout>

	if (inactive) {
 800af36:	b9a0      	cbnz	r0, 800af62 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800af38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af3a:	b10b      	cbz	r3, 800af40 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800af3c:	4620      	mov	r0, r4
 800af3e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800af40:	f104 0018 	add.w	r0, r4, #24
 800af44:	f7ff fed6 	bl	800acf4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800af48:	b158      	cbz	r0, 800af62 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800af4a:	f7ff fe33 	bl	800abb4 <z_ready_thread>
	__asm__ volatile(
 800af4e:	f04f 0310 	mov.w	r3, #16
 800af52:	f3ef 8011 	mrs	r0, BASEPRI
 800af56:	f383 8812 	msr	BASEPRI_MAX, r3
 800af5a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800af5e:	f7ff fde1 	bl	800ab24 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800af62:	bd10      	pop	{r4, pc}

0800af64 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800af64:	b108      	cbz	r0, 800af6a <poller_thread+0x6>
 800af66:	3860      	subs	r0, #96	; 0x60
 800af68:	4770      	bx	lr
}
 800af6a:	4770      	bx	lr

0800af6c <signal_poller>:
{
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800af70:	6880      	ldr	r0, [r0, #8]
 800af72:	f7ff fff7 	bl	800af64 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800af76:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800af78:	f013 0f02 	tst.w	r3, #2
 800af7c:	d024      	beq.n	800afc8 <signal_poller+0x5c>
 800af7e:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800af80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800af82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800af84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af88:	bf08      	it	eq
 800af8a:	f112 0f02 	cmneq.w	r2, #2
 800af8e:	d01d      	beq.n	800afcc <signal_poller+0x60>
	z_unpend_thread(thread);
 800af90:	f7ff fde5 	bl	800ab5e <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800af94:	2d08      	cmp	r5, #8
 800af96:	d009      	beq.n	800afac <signal_poller+0x40>
 800af98:	2300      	movs	r3, #0
 800af9a:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800af9c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800af9e:	f013 0f1f 	tst.w	r3, #31
 800afa2:	d108      	bne.n	800afb6 <signal_poller+0x4a>
 800afa4:	69a3      	ldr	r3, [r4, #24]
 800afa6:	b123      	cbz	r3, 800afb2 <signal_poller+0x46>
 800afa8:	2300      	movs	r3, #0
 800afaa:	e005      	b.n	800afb8 <signal_poller+0x4c>
 800afac:	f06f 0303 	mvn.w	r3, #3
 800afb0:	e7f3      	b.n	800af9a <signal_poller+0x2e>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e000      	b.n	800afb8 <signal_poller+0x4c>
 800afb6:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800afb8:	b90b      	cbnz	r3, 800afbe <signal_poller+0x52>
		return 0;
 800afba:	2000      	movs	r0, #0
 800afbc:	e005      	b.n	800afca <signal_poller+0x5e>
	z_ready_thread(thread);
 800afbe:	4620      	mov	r0, r4
 800afc0:	f7ff fdf8 	bl	800abb4 <z_ready_thread>
	return 0;
 800afc4:	2000      	movs	r0, #0
 800afc6:	e000      	b.n	800afca <signal_poller+0x5e>
		return 0;
 800afc8:	2000      	movs	r0, #0
}
 800afca:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800afcc:	f06f 000a 	mvn.w	r0, #10
 800afd0:	e7fb      	b.n	800afca <signal_poller+0x5e>

0800afd2 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800afd2:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800afd4:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800afd6:	7823      	ldrb	r3, [r4, #0]
 800afd8:	b173      	cbz	r3, 800aff8 <signal_triggered_work+0x26>
 800afda:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800afde:	b15d      	cbz	r5, 800aff8 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800afe0:	f1a4 0614 	sub.w	r6, r4, #20
 800afe4:	f104 0014 	add.w	r0, r4, #20
 800afe8:	f7ff ff24 	bl	800ae34 <z_abort_timeout>
		twork->poll_result = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	f7ff fd48 	bl	800aa88 <k_work_submit_to_queue>
	}

	return 0;
}
 800aff8:	2000      	movs	r0, #0
 800affa:	bd70      	pop	{r4, r5, r6, pc}

0800affc <signal_poll_event>:
{
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800b002:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800b004:	b1d6      	cbz	r6, 800b03c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800b006:	7873      	ldrb	r3, [r6, #1]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d00d      	beq.n	800b028 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d012      	beq.n	800b036 <signal_poll_event+0x3a>
		poller->is_polling = false;
 800b010:	2000      	movs	r0, #0
 800b012:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800b018:	68e3      	ldr	r3, [r4, #12]
 800b01a:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800b01e:	430d      	orrs	r5, r1
 800b020:	f365 3352 	bfi	r3, r5, #13, #6
 800b024:	60e3      	str	r3, [r4, #12]
}
 800b026:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800b028:	f7ff ffa0 	bl	800af6c <signal_poller>
		poller->is_polling = false;
 800b02c:	2300      	movs	r3, #0
 800b02e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800b030:	4298      	cmp	r0, r3
 800b032:	daef      	bge.n	800b014 <signal_poll_event+0x18>
 800b034:	e7f7      	b.n	800b026 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800b036:	f7ff ffcc 	bl	800afd2 <signal_triggered_work>
 800b03a:	e7f7      	b.n	800b02c <signal_poll_event+0x30>
	int retcode = 0;
 800b03c:	2000      	movs	r0, #0
 800b03e:	e7e9      	b.n	800b014 <signal_poll_event+0x18>

0800b040 <z_handle_obj_poll_events>:
{
 800b040:	b508      	push	{r3, lr}
 800b042:	4603      	mov	r3, r0
	return list->head == list;
 800b044:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800b046:	4283      	cmp	r3, r0
 800b048:	d009      	beq.n	800b05e <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800b04a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800b04c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800b04e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b050:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800b056:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800b058:	b108      	cbz	r0, 800b05e <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800b05a:	f7ff ffcf 	bl	800affc <signal_poll_event>
}
 800b05e:	bd08      	pop	{r3, pc}

0800b060 <z_heap_aligned_alloc>:
{
 800b060:	b5d0      	push	{r4, r6, r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
 800b066:	2300      	movs	r3, #0
 800b068:	3204      	adds	r2, #4
 800b06a:	d20e      	bcs.n	800b08a <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
 800b06c:	b97b      	cbnz	r3, 800b08e <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 800b06e:	2600      	movs	r6, #0
 800b070:	2700      	movs	r7, #0
 800b072:	e9cd 6700 	strd	r6, r7, [sp]
 800b076:	f041 0104 	orr.w	r1, r1, #4
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 f813 	bl	800b0a6 <k_heap_aligned_alloc>
	if (mem == NULL) {
 800b080:	b108      	cbz	r0, 800b086 <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
 800b082:	f840 4b04 	str.w	r4, [r0], #4
}
 800b086:	b002      	add	sp, #8
 800b088:	bdd0      	pop	{r4, r6, r7, pc}
 800b08a:	2301      	movs	r3, #1
 800b08c:	e7ee      	b.n	800b06c <z_heap_aligned_alloc+0xc>
		return NULL;
 800b08e:	2000      	movs	r0, #0
 800b090:	e7f9      	b.n	800b086 <z_heap_aligned_alloc+0x26>

0800b092 <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800b092:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800b094:	4770      	bx	lr

0800b096 <k_heap_init>:
{
 800b096:	b510      	push	{r4, lr}
 800b098:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800b09c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800b09e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800b0a0:	f7fe fa40 	bl	8009524 <sys_heap_init>
}
 800b0a4:	bd10      	pop	{r4, pc}

0800b0a6 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 800b0a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	468a      	mov	sl, r1
 800b0b0:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 800b0b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0b6:	f7ff ff0e 	bl	800aed6 <sys_clock_timeout_end_calc>
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 800b0be:	f107 0b14 	add.w	fp, r7, #20
 800b0c2:	f04f 0310 	mov.w	r3, #16
 800b0c6:	f3ef 8511 	mrs	r5, BASEPRI
 800b0ca:	f383 8812 	msr	BASEPRI_MAX, r3
 800b0ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
 800b0d2:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
 800b0d6:	4644      	mov	r4, r8

	while (ret == NULL) {
 800b0d8:	e00f      	b.n	800b0fa <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 800b0da:	9000      	str	r0, [sp, #0]
 800b0dc:	9101      	str	r1, [sp, #4]
 800b0de:	f107 020c 	add.w	r2, r7, #12
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	4658      	mov	r0, fp
 800b0e6:	f7fb fc69 	bl	80069bc <z_pend_curr>
 800b0ea:	f04f 0310 	mov.w	r3, #16
 800b0ee:	f3ef 8511 	mrs	r5, BASEPRI
 800b0f2:	f383 8812 	msr	BASEPRI_MAX, r3
 800b0f6:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
 800b0fa:	b9ac      	cbnz	r4, 800b128 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 800b0fc:	9a03      	ldr	r2, [sp, #12]
 800b0fe:	4651      	mov	r1, sl
 800b100:	4638      	mov	r0, r7
 800b102:	f7fe f97b 	bl	80093fc <sys_heap_aligned_alloc>
 800b106:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
 800b108:	f7fb ffda 	bl	80070c0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 800b10c:	b964      	cbnz	r4, 800b128 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
 800b10e:	1a30      	subs	r0, r6, r0
 800b110:	eb69 0101 	sbc.w	r1, r9, r1
 800b114:	2801      	cmp	r0, #1
 800b116:	f171 0300 	sbcs.w	r3, r1, #0
 800b11a:	db05      	blt.n	800b128 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
 800b11c:	f1b8 0f00 	cmp.w	r8, #0
 800b120:	d1db      	bne.n	800b0da <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
 800b122:	f04f 0801 	mov.w	r8, #1
 800b126:	e7d8      	b.n	800b0da <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
 800b128:	f385 8811 	msr	BASEPRI, r5
 800b12c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 800b130:	4620      	mov	r0, r4
 800b132:	b005      	add	sp, #20
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b138 <memcpy>:
 800b138:	440a      	add	r2, r1
 800b13a:	4291      	cmp	r1, r2
 800b13c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b140:	d100      	bne.n	800b144 <memcpy+0xc>
 800b142:	4770      	bx	lr
 800b144:	b510      	push	{r4, lr}
 800b146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14a:	4291      	cmp	r1, r2
 800b14c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b150:	d1f9      	bne.n	800b146 <memcpy+0xe>
 800b152:	bd10      	pop	{r4, pc}

0800b154 <memset>:
 800b154:	4603      	mov	r3, r0
 800b156:	4402      	add	r2, r0
 800b158:	4293      	cmp	r3, r2
 800b15a:	d100      	bne.n	800b15e <memset+0xa>
 800b15c:	4770      	bx	lr
 800b15e:	f803 1b01 	strb.w	r1, [r3], #1
 800b162:	e7f9      	b.n	800b158 <memset+0x4>

0800b164 <__cvt>:
 800b164:	2b00      	cmp	r3, #0
 800b166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b16a:	461f      	mov	r7, r3
 800b16c:	bfbb      	ittet	lt
 800b16e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b172:	461f      	movlt	r7, r3
 800b174:	2300      	movge	r3, #0
 800b176:	232d      	movlt	r3, #45	; 0x2d
 800b178:	b088      	sub	sp, #32
 800b17a:	4614      	mov	r4, r2
 800b17c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b17e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b180:	7013      	strb	r3, [r2, #0]
 800b182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b184:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b188:	f023 0820 	bic.w	r8, r3, #32
 800b18c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b190:	d005      	beq.n	800b19e <__cvt+0x3a>
 800b192:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b196:	d100      	bne.n	800b19a <__cvt+0x36>
 800b198:	3501      	adds	r5, #1
 800b19a:	2302      	movs	r3, #2
 800b19c:	e000      	b.n	800b1a0 <__cvt+0x3c>
 800b19e:	2303      	movs	r3, #3
 800b1a0:	aa07      	add	r2, sp, #28
 800b1a2:	9204      	str	r2, [sp, #16]
 800b1a4:	aa06      	add	r2, sp, #24
 800b1a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b1aa:	e9cd 3500 	strd	r3, r5, [sp]
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	f7f5 fdcd 	bl	8000d50 <_dtoa_r>
 800b1b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	d102      	bne.n	800b1c4 <__cvt+0x60>
 800b1be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1c0:	07db      	lsls	r3, r3, #31
 800b1c2:	d522      	bpl.n	800b20a <__cvt+0xa6>
 800b1c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1c8:	eb06 0905 	add.w	r9, r6, r5
 800b1cc:	d110      	bne.n	800b1f0 <__cvt+0x8c>
 800b1ce:	7833      	ldrb	r3, [r6, #0]
 800b1d0:	2b30      	cmp	r3, #48	; 0x30
 800b1d2:	d10a      	bne.n	800b1ea <__cvt+0x86>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 fbe2 	bl	80009a4 <__aeabi_dcmpeq>
 800b1e0:	b918      	cbnz	r0, 800b1ea <__cvt+0x86>
 800b1e2:	f1c5 0501 	rsb	r5, r5, #1
 800b1e6:	f8ca 5000 	str.w	r5, [sl]
 800b1ea:	f8da 3000 	ldr.w	r3, [sl]
 800b1ee:	4499      	add	r9, r3
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	f7f5 fbd4 	bl	80009a4 <__aeabi_dcmpeq>
 800b1fc:	b108      	cbz	r0, 800b202 <__cvt+0x9e>
 800b1fe:	f8cd 901c 	str.w	r9, [sp, #28]
 800b202:	2230      	movs	r2, #48	; 0x30
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	454b      	cmp	r3, r9
 800b208:	d307      	bcc.n	800b21a <__cvt+0xb6>
 800b20a:	4630      	mov	r0, r6
 800b20c:	9b07      	ldr	r3, [sp, #28]
 800b20e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	b008      	add	sp, #32
 800b216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21a:	1c59      	adds	r1, r3, #1
 800b21c:	9107      	str	r1, [sp, #28]
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	e7f0      	b.n	800b204 <__cvt+0xa0>

0800b222 <__exponent>:
 800b222:	4603      	mov	r3, r0
 800b224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b226:	2900      	cmp	r1, #0
 800b228:	f803 2b02 	strb.w	r2, [r3], #2
 800b22c:	bfb6      	itet	lt
 800b22e:	222d      	movlt	r2, #45	; 0x2d
 800b230:	222b      	movge	r2, #43	; 0x2b
 800b232:	4249      	neglt	r1, r1
 800b234:	2909      	cmp	r1, #9
 800b236:	7042      	strb	r2, [r0, #1]
 800b238:	dd2b      	ble.n	800b292 <__exponent+0x70>
 800b23a:	f10d 0407 	add.w	r4, sp, #7
 800b23e:	46a4      	mov	ip, r4
 800b240:	270a      	movs	r7, #10
 800b242:	fb91 f6f7 	sdiv	r6, r1, r7
 800b246:	460a      	mov	r2, r1
 800b248:	46a6      	mov	lr, r4
 800b24a:	fb07 1516 	mls	r5, r7, r6, r1
 800b24e:	2a63      	cmp	r2, #99	; 0x63
 800b250:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b254:	4631      	mov	r1, r6
 800b256:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b25a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b25e:	dcf0      	bgt.n	800b242 <__exponent+0x20>
 800b260:	3130      	adds	r1, #48	; 0x30
 800b262:	f1ae 0502 	sub.w	r5, lr, #2
 800b266:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b26a:	4629      	mov	r1, r5
 800b26c:	1c44      	adds	r4, r0, #1
 800b26e:	4561      	cmp	r1, ip
 800b270:	d30a      	bcc.n	800b288 <__exponent+0x66>
 800b272:	f10d 0209 	add.w	r2, sp, #9
 800b276:	eba2 020e 	sub.w	r2, r2, lr
 800b27a:	4565      	cmp	r5, ip
 800b27c:	bf88      	it	hi
 800b27e:	2200      	movhi	r2, #0
 800b280:	4413      	add	r3, r2
 800b282:	1a18      	subs	r0, r3, r0
 800b284:	b003      	add	sp, #12
 800b286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b288:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b28c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b290:	e7ed      	b.n	800b26e <__exponent+0x4c>
 800b292:	2330      	movs	r3, #48	; 0x30
 800b294:	3130      	adds	r1, #48	; 0x30
 800b296:	7083      	strb	r3, [r0, #2]
 800b298:	70c1      	strb	r1, [r0, #3]
 800b29a:	1d03      	adds	r3, r0, #4
 800b29c:	e7f1      	b.n	800b282 <__exponent+0x60>

0800b29e <_printf_common>:
 800b29e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a2:	4616      	mov	r6, r2
 800b2a4:	4699      	mov	r9, r3
 800b2a6:	688a      	ldr	r2, [r1, #8]
 800b2a8:	690b      	ldr	r3, [r1, #16]
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfb8      	it	lt
 800b2b0:	4613      	movlt	r3, r2
 800b2b2:	6033      	str	r3, [r6, #0]
 800b2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2be:	b10a      	cbz	r2, 800b2c4 <_printf_common+0x26>
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	6033      	str	r3, [r6, #0]
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	0699      	lsls	r1, r3, #26
 800b2c8:	bf42      	ittt	mi
 800b2ca:	6833      	ldrmi	r3, [r6, #0]
 800b2cc:	3302      	addmi	r3, #2
 800b2ce:	6033      	strmi	r3, [r6, #0]
 800b2d0:	6825      	ldr	r5, [r4, #0]
 800b2d2:	f015 0506 	ands.w	r5, r5, #6
 800b2d6:	d106      	bne.n	800b2e6 <_printf_common+0x48>
 800b2d8:	f104 0a19 	add.w	sl, r4, #25
 800b2dc:	68e3      	ldr	r3, [r4, #12]
 800b2de:	6832      	ldr	r2, [r6, #0]
 800b2e0:	1a9b      	subs	r3, r3, r2
 800b2e2:	42ab      	cmp	r3, r5
 800b2e4:	dc28      	bgt.n	800b338 <_printf_common+0x9a>
 800b2e6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2ea:	1e13      	subs	r3, r2, #0
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	bf18      	it	ne
 800b2f0:	2301      	movne	r3, #1
 800b2f2:	0692      	lsls	r2, r2, #26
 800b2f4:	d42d      	bmi.n	800b352 <_printf_common+0xb4>
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2fe:	47c0      	blx	r8
 800b300:	3001      	adds	r0, #1
 800b302:	d020      	beq.n	800b346 <_printf_common+0xa8>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	68e5      	ldr	r5, [r4, #12]
 800b308:	f003 0306 	and.w	r3, r3, #6
 800b30c:	2b04      	cmp	r3, #4
 800b30e:	bf18      	it	ne
 800b310:	2500      	movne	r5, #0
 800b312:	6832      	ldr	r2, [r6, #0]
 800b314:	f04f 0600 	mov.w	r6, #0
 800b318:	68a3      	ldr	r3, [r4, #8]
 800b31a:	bf08      	it	eq
 800b31c:	1aad      	subeq	r5, r5, r2
 800b31e:	6922      	ldr	r2, [r4, #16]
 800b320:	bf08      	it	eq
 800b322:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b326:	4293      	cmp	r3, r2
 800b328:	bfc4      	itt	gt
 800b32a:	1a9b      	subgt	r3, r3, r2
 800b32c:	18ed      	addgt	r5, r5, r3
 800b32e:	341a      	adds	r4, #26
 800b330:	42b5      	cmp	r5, r6
 800b332:	d11a      	bne.n	800b36a <_printf_common+0xcc>
 800b334:	2000      	movs	r0, #0
 800b336:	e008      	b.n	800b34a <_printf_common+0xac>
 800b338:	2301      	movs	r3, #1
 800b33a:	4652      	mov	r2, sl
 800b33c:	4649      	mov	r1, r9
 800b33e:	4638      	mov	r0, r7
 800b340:	47c0      	blx	r8
 800b342:	3001      	adds	r0, #1
 800b344:	d103      	bne.n	800b34e <_printf_common+0xb0>
 800b346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	3501      	adds	r5, #1
 800b350:	e7c4      	b.n	800b2dc <_printf_common+0x3e>
 800b352:	2030      	movs	r0, #48	; 0x30
 800b354:	18e1      	adds	r1, r4, r3
 800b356:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b360:	4422      	add	r2, r4
 800b362:	3302      	adds	r3, #2
 800b364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b368:	e7c5      	b.n	800b2f6 <_printf_common+0x58>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4622      	mov	r2, r4
 800b36e:	4649      	mov	r1, r9
 800b370:	4638      	mov	r0, r7
 800b372:	47c0      	blx	r8
 800b374:	3001      	adds	r0, #1
 800b376:	d0e6      	beq.n	800b346 <_printf_common+0xa8>
 800b378:	3601      	adds	r6, #1
 800b37a:	e7d9      	b.n	800b330 <_printf_common+0x92>

0800b37c <strnlen>:
 800b37c:	4602      	mov	r2, r0
 800b37e:	b510      	push	{r4, lr}
 800b380:	4401      	add	r1, r0
 800b382:	428a      	cmp	r2, r1
 800b384:	4613      	mov	r3, r2
 800b386:	d003      	beq.n	800b390 <strnlen+0x14>
 800b388:	781c      	ldrb	r4, [r3, #0]
 800b38a:	3201      	adds	r2, #1
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	d1f8      	bne.n	800b382 <strnlen+0x6>
 800b390:	1a18      	subs	r0, r3, r0
 800b392:	bd10      	pop	{r4, pc}

0800b394 <quorem>:
 800b394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	6903      	ldr	r3, [r0, #16]
 800b39a:	690c      	ldr	r4, [r1, #16]
 800b39c:	4607      	mov	r7, r0
 800b39e:	42a3      	cmp	r3, r4
 800b3a0:	f2c0 8082 	blt.w	800b4a8 <quorem+0x114>
 800b3a4:	3c01      	subs	r4, #1
 800b3a6:	f100 0514 	add.w	r5, r0, #20
 800b3aa:	f101 0814 	add.w	r8, r1, #20
 800b3ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3b2:	9301      	str	r3, [sp, #4]
 800b3b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3cc:	d331      	bcc.n	800b432 <quorem+0x9e>
 800b3ce:	f04f 0e00 	mov.w	lr, #0
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	46ac      	mov	ip, r5
 800b3d6:	46f2      	mov	sl, lr
 800b3d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3dc:	b293      	uxth	r3, r2
 800b3de:	fb06 e303 	mla	r3, r6, r3, lr
 800b3e2:	0c12      	lsrs	r2, r2, #16
 800b3e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	fb06 e202 	mla	r2, r6, r2, lr
 800b3ee:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f2:	f8dc a000 	ldr.w	sl, [ip]
 800b3f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3fa:	fa1f fa8a 	uxth.w	sl, sl
 800b3fe:	4453      	add	r3, sl
 800b400:	f8dc a000 	ldr.w	sl, [ip]
 800b404:	b292      	uxth	r2, r2
 800b406:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b40a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b40e:	b29b      	uxth	r3, r3
 800b410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b414:	4581      	cmp	r9, r0
 800b416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b41a:	f84c 3b04 	str.w	r3, [ip], #4
 800b41e:	d2db      	bcs.n	800b3d8 <quorem+0x44>
 800b420:	f855 300b 	ldr.w	r3, [r5, fp]
 800b424:	b92b      	cbnz	r3, 800b432 <quorem+0x9e>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	3b04      	subs	r3, #4
 800b42a:	429d      	cmp	r5, r3
 800b42c:	461a      	mov	r2, r3
 800b42e:	d32f      	bcc.n	800b490 <quorem+0xfc>
 800b430:	613c      	str	r4, [r7, #16]
 800b432:	4638      	mov	r0, r7
 800b434:	f000 f895 	bl	800b562 <__mcmp>
 800b438:	2800      	cmp	r0, #0
 800b43a:	db25      	blt.n	800b488 <quorem+0xf4>
 800b43c:	4628      	mov	r0, r5
 800b43e:	f04f 0c00 	mov.w	ip, #0
 800b442:	3601      	adds	r6, #1
 800b444:	f858 1b04 	ldr.w	r1, [r8], #4
 800b448:	f8d0 e000 	ldr.w	lr, [r0]
 800b44c:	b28b      	uxth	r3, r1
 800b44e:	ebac 0303 	sub.w	r3, ip, r3
 800b452:	fa1f f28e 	uxth.w	r2, lr
 800b456:	4413      	add	r3, r2
 800b458:	0c0a      	lsrs	r2, r1, #16
 800b45a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b45e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b462:	b29b      	uxth	r3, r3
 800b464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b468:	45c1      	cmp	r9, r8
 800b46a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b46e:	f840 3b04 	str.w	r3, [r0], #4
 800b472:	d2e7      	bcs.n	800b444 <quorem+0xb0>
 800b474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b47c:	b922      	cbnz	r2, 800b488 <quorem+0xf4>
 800b47e:	3b04      	subs	r3, #4
 800b480:	429d      	cmp	r5, r3
 800b482:	461a      	mov	r2, r3
 800b484:	d30a      	bcc.n	800b49c <quorem+0x108>
 800b486:	613c      	str	r4, [r7, #16]
 800b488:	4630      	mov	r0, r6
 800b48a:	b003      	add	sp, #12
 800b48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b490:	6812      	ldr	r2, [r2, #0]
 800b492:	3b04      	subs	r3, #4
 800b494:	2a00      	cmp	r2, #0
 800b496:	d1cb      	bne.n	800b430 <quorem+0x9c>
 800b498:	3c01      	subs	r4, #1
 800b49a:	e7c6      	b.n	800b42a <quorem+0x96>
 800b49c:	6812      	ldr	r2, [r2, #0]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	d1f0      	bne.n	800b486 <quorem+0xf2>
 800b4a4:	3c01      	subs	r4, #1
 800b4a6:	e7eb      	b.n	800b480 <quorem+0xec>
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e7ee      	b.n	800b48a <quorem+0xf6>

0800b4ac <memchr>:
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	b2c9      	uxtb	r1, r1
 800b4b2:	4402      	add	r2, r0
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	d101      	bne.n	800b4be <memchr+0x12>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e003      	b.n	800b4c6 <memchr+0x1a>
 800b4be:	7804      	ldrb	r4, [r0, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	428c      	cmp	r4, r1
 800b4c4:	d1f6      	bne.n	800b4b4 <memchr+0x8>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <__hi0bits>:
 800b4c8:	0c02      	lsrs	r2, r0, #16
 800b4ca:	0412      	lsls	r2, r2, #16
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	b9ca      	cbnz	r2, 800b504 <__hi0bits+0x3c>
 800b4d0:	0403      	lsls	r3, r0, #16
 800b4d2:	2010      	movs	r0, #16
 800b4d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b4d8:	bf04      	itt	eq
 800b4da:	021b      	lsleq	r3, r3, #8
 800b4dc:	3008      	addeq	r0, #8
 800b4de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b4e2:	bf04      	itt	eq
 800b4e4:	011b      	lsleq	r3, r3, #4
 800b4e6:	3004      	addeq	r0, #4
 800b4e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b4ec:	bf04      	itt	eq
 800b4ee:	009b      	lsleq	r3, r3, #2
 800b4f0:	3002      	addeq	r0, #2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	db05      	blt.n	800b502 <__hi0bits+0x3a>
 800b4f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b4fa:	f100 0001 	add.w	r0, r0, #1
 800b4fe:	bf08      	it	eq
 800b500:	2020      	moveq	r0, #32
 800b502:	4770      	bx	lr
 800b504:	2000      	movs	r0, #0
 800b506:	e7e5      	b.n	800b4d4 <__hi0bits+0xc>

0800b508 <__lo0bits>:
 800b508:	6803      	ldr	r3, [r0, #0]
 800b50a:	4602      	mov	r2, r0
 800b50c:	f013 0007 	ands.w	r0, r3, #7
 800b510:	d00b      	beq.n	800b52a <__lo0bits+0x22>
 800b512:	07d9      	lsls	r1, r3, #31
 800b514:	d421      	bmi.n	800b55a <__lo0bits+0x52>
 800b516:	0798      	lsls	r0, r3, #30
 800b518:	bf49      	itett	mi
 800b51a:	085b      	lsrmi	r3, r3, #1
 800b51c:	089b      	lsrpl	r3, r3, #2
 800b51e:	2001      	movmi	r0, #1
 800b520:	6013      	strmi	r3, [r2, #0]
 800b522:	bf5c      	itt	pl
 800b524:	2002      	movpl	r0, #2
 800b526:	6013      	strpl	r3, [r2, #0]
 800b528:	4770      	bx	lr
 800b52a:	b299      	uxth	r1, r3
 800b52c:	b909      	cbnz	r1, 800b532 <__lo0bits+0x2a>
 800b52e:	2010      	movs	r0, #16
 800b530:	0c1b      	lsrs	r3, r3, #16
 800b532:	b2d9      	uxtb	r1, r3
 800b534:	b909      	cbnz	r1, 800b53a <__lo0bits+0x32>
 800b536:	3008      	adds	r0, #8
 800b538:	0a1b      	lsrs	r3, r3, #8
 800b53a:	0719      	lsls	r1, r3, #28
 800b53c:	bf04      	itt	eq
 800b53e:	091b      	lsreq	r3, r3, #4
 800b540:	3004      	addeq	r0, #4
 800b542:	0799      	lsls	r1, r3, #30
 800b544:	bf04      	itt	eq
 800b546:	089b      	lsreq	r3, r3, #2
 800b548:	3002      	addeq	r0, #2
 800b54a:	07d9      	lsls	r1, r3, #31
 800b54c:	d403      	bmi.n	800b556 <__lo0bits+0x4e>
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	f100 0001 	add.w	r0, r0, #1
 800b554:	d003      	beq.n	800b55e <__lo0bits+0x56>
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	4770      	bx	lr
 800b55a:	2000      	movs	r0, #0
 800b55c:	4770      	bx	lr
 800b55e:	2020      	movs	r0, #32
 800b560:	4770      	bx	lr

0800b562 <__mcmp>:
 800b562:	4603      	mov	r3, r0
 800b564:	690a      	ldr	r2, [r1, #16]
 800b566:	6900      	ldr	r0, [r0, #16]
 800b568:	b530      	push	{r4, r5, lr}
 800b56a:	1a80      	subs	r0, r0, r2
 800b56c:	d10d      	bne.n	800b58a <__mcmp+0x28>
 800b56e:	3314      	adds	r3, #20
 800b570:	3114      	adds	r1, #20
 800b572:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b576:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b57a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b57e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b582:	4295      	cmp	r5, r2
 800b584:	d002      	beq.n	800b58c <__mcmp+0x2a>
 800b586:	d304      	bcc.n	800b592 <__mcmp+0x30>
 800b588:	2001      	movs	r0, #1
 800b58a:	bd30      	pop	{r4, r5, pc}
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d3f4      	bcc.n	800b57a <__mcmp+0x18>
 800b590:	e7fb      	b.n	800b58a <__mcmp+0x28>
 800b592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b596:	e7f8      	b.n	800b58a <__mcmp+0x28>

0800b598 <_calloc_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	fb02 f501 	mul.w	r5, r2, r1
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7fc f9da 	bl	8007958 <_malloc_r>
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <_calloc_r+0x18>
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	f7ff fdd2 	bl	800b154 <memset>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}

0800b5b4 <__ascii_mbtowc>:
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	b901      	cbnz	r1, 800b5ba <__ascii_mbtowc+0x6>
 800b5b8:	a901      	add	r1, sp, #4
 800b5ba:	b142      	cbz	r2, 800b5ce <__ascii_mbtowc+0x1a>
 800b5bc:	b14b      	cbz	r3, 800b5d2 <__ascii_mbtowc+0x1e>
 800b5be:	7813      	ldrb	r3, [r2, #0]
 800b5c0:	600b      	str	r3, [r1, #0]
 800b5c2:	7812      	ldrb	r2, [r2, #0]
 800b5c4:	1e10      	subs	r0, r2, #0
 800b5c6:	bf18      	it	ne
 800b5c8:	2001      	movne	r0, #1
 800b5ca:	b002      	add	sp, #8
 800b5cc:	4770      	bx	lr
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	e7fb      	b.n	800b5ca <__ascii_mbtowc+0x16>
 800b5d2:	f06f 0001 	mvn.w	r0, #1
 800b5d6:	e7f8      	b.n	800b5ca <__ascii_mbtowc+0x16>

0800b5d8 <__sfputc_r>:
 800b5d8:	6893      	ldr	r3, [r2, #8]
 800b5da:	b410      	push	{r4}
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	6093      	str	r3, [r2, #8]
 800b5e2:	da07      	bge.n	800b5f4 <__sfputc_r+0x1c>
 800b5e4:	6994      	ldr	r4, [r2, #24]
 800b5e6:	42a3      	cmp	r3, r4
 800b5e8:	db01      	blt.n	800b5ee <__sfputc_r+0x16>
 800b5ea:	290a      	cmp	r1, #10
 800b5ec:	d102      	bne.n	800b5f4 <__sfputc_r+0x1c>
 800b5ee:	bc10      	pop	{r4}
 800b5f0:	f7fd b9f6 	b.w	80089e0 <__swbuf_r>
 800b5f4:	6813      	ldr	r3, [r2, #0]
 800b5f6:	1c58      	adds	r0, r3, #1
 800b5f8:	6010      	str	r0, [r2, #0]
 800b5fa:	7019      	strb	r1, [r3, #0]
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	bc10      	pop	{r4}
 800b600:	4770      	bx	lr

0800b602 <__sfputs_r>:
 800b602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	4614      	mov	r4, r2
 800b60a:	18d5      	adds	r5, r2, r3
 800b60c:	42ac      	cmp	r4, r5
 800b60e:	d101      	bne.n	800b614 <__sfputs_r+0x12>
 800b610:	2000      	movs	r0, #0
 800b612:	e007      	b.n	800b624 <__sfputs_r+0x22>
 800b614:	463a      	mov	r2, r7
 800b616:	4630      	mov	r0, r6
 800b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61c:	f7ff ffdc 	bl	800b5d8 <__sfputc_r>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d1f3      	bne.n	800b60c <__sfputs_r+0xa>
 800b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b626 <__ascii_wctomb>:
 800b626:	4603      	mov	r3, r0
 800b628:	4608      	mov	r0, r1
 800b62a:	b141      	cbz	r1, 800b63e <__ascii_wctomb+0x18>
 800b62c:	2aff      	cmp	r2, #255	; 0xff
 800b62e:	d904      	bls.n	800b63a <__ascii_wctomb+0x14>
 800b630:	228a      	movs	r2, #138	; 0x8a
 800b632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	4770      	bx	lr
 800b63a:	2001      	movs	r0, #1
 800b63c:	700a      	strb	r2, [r1, #0]
 800b63e:	4770      	bx	lr

0800b640 <abort>:
 800b640:	2006      	movs	r0, #6
 800b642:	b508      	push	{r3, lr}
 800b644:	f7fd fc4a 	bl	8008edc <raise>
 800b648:	2001      	movs	r0, #1
 800b64a:	f7f7 fc63 	bl	8002f14 <_exit>

0800b64e <__sfmoreglue>:
 800b64e:	2268      	movs	r2, #104	; 0x68
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	1e4d      	subs	r5, r1, #1
 800b654:	4355      	muls	r5, r2
 800b656:	460e      	mov	r6, r1
 800b658:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b65c:	f7fc f97c 	bl	8007958 <_malloc_r>
 800b660:	4604      	mov	r4, r0
 800b662:	b140      	cbz	r0, 800b676 <__sfmoreglue+0x28>
 800b664:	2100      	movs	r1, #0
 800b666:	e9c0 1600 	strd	r1, r6, [r0]
 800b66a:	300c      	adds	r0, #12
 800b66c:	60a0      	str	r0, [r4, #8]
 800b66e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b672:	f7ff fd6f 	bl	800b154 <memset>
 800b676:	4620      	mov	r0, r4
 800b678:	bd70      	pop	{r4, r5, r6, pc}

0800b67a <_fwalk_reent>:
 800b67a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b67e:	4606      	mov	r6, r0
 800b680:	4688      	mov	r8, r1
 800b682:	2700      	movs	r7, #0
 800b684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b68c:	f1b9 0901 	subs.w	r9, r9, #1
 800b690:	d505      	bpl.n	800b69e <_fwalk_reent+0x24>
 800b692:	6824      	ldr	r4, [r4, #0]
 800b694:	2c00      	cmp	r4, #0
 800b696:	d1f7      	bne.n	800b688 <_fwalk_reent+0xe>
 800b698:	4638      	mov	r0, r7
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	89ab      	ldrh	r3, [r5, #12]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d907      	bls.n	800b6b4 <_fwalk_reent+0x3a>
 800b6a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	d003      	beq.n	800b6b4 <_fwalk_reent+0x3a>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	47c0      	blx	r8
 800b6b2:	4307      	orrs	r7, r0
 800b6b4:	3568      	adds	r5, #104	; 0x68
 800b6b6:	e7e9      	b.n	800b68c <_fwalk_reent+0x12>

0800b6b8 <__swhatbuf_r>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	460e      	mov	r6, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	2900      	cmp	r1, #0
 800b6c4:	461d      	mov	r5, r3
 800b6c6:	b096      	sub	sp, #88	; 0x58
 800b6c8:	da08      	bge.n	800b6dc <__swhatbuf_r+0x24>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6d0:	602a      	str	r2, [r5, #0]
 800b6d2:	061a      	lsls	r2, r3, #24
 800b6d4:	d410      	bmi.n	800b6f8 <__swhatbuf_r+0x40>
 800b6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6da:	e00e      	b.n	800b6fa <__swhatbuf_r+0x42>
 800b6dc:	466a      	mov	r2, sp
 800b6de:	f7fd fc39 	bl	8008f54 <_fstat_r>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	dbf1      	blt.n	800b6ca <__swhatbuf_r+0x12>
 800b6e6:	9a01      	ldr	r2, [sp, #4]
 800b6e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6f0:	425a      	negs	r2, r3
 800b6f2:	415a      	adcs	r2, r3
 800b6f4:	602a      	str	r2, [r5, #0]
 800b6f6:	e7ee      	b.n	800b6d6 <__swhatbuf_r+0x1e>
 800b6f8:	2340      	movs	r3, #64	; 0x40
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	b016      	add	sp, #88	; 0x58
 800b700:	bd70      	pop	{r4, r5, r6, pc}

0800b702 <_raise_r>:
 800b702:	291f      	cmp	r1, #31
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4604      	mov	r4, r0
 800b708:	460d      	mov	r5, r1
 800b70a:	d904      	bls.n	800b716 <_raise_r+0x14>
 800b70c:	2316      	movs	r3, #22
 800b70e:	6003      	str	r3, [r0, #0]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b718:	b112      	cbz	r2, 800b720 <_raise_r+0x1e>
 800b71a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b71e:	b94b      	cbnz	r3, 800b734 <_raise_r+0x32>
 800b720:	4620      	mov	r0, r4
 800b722:	f000 f816 	bl	800b752 <_getpid_r>
 800b726:	462a      	mov	r2, r5
 800b728:	4601      	mov	r1, r0
 800b72a:	4620      	mov	r0, r4
 800b72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b730:	f7fd bbdc 	b.w	8008eec <_kill_r>
 800b734:	2b01      	cmp	r3, #1
 800b736:	d00a      	beq.n	800b74e <_raise_r+0x4c>
 800b738:	1c59      	adds	r1, r3, #1
 800b73a:	d103      	bne.n	800b744 <_raise_r+0x42>
 800b73c:	2316      	movs	r3, #22
 800b73e:	6003      	str	r3, [r0, #0]
 800b740:	2001      	movs	r0, #1
 800b742:	e7e7      	b.n	800b714 <_raise_r+0x12>
 800b744:	2400      	movs	r4, #0
 800b746:	4628      	mov	r0, r5
 800b748:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b74c:	4798      	blx	r3
 800b74e:	2000      	movs	r0, #0
 800b750:	e7e0      	b.n	800b714 <_raise_r+0x12>

0800b752 <_getpid_r>:
 800b752:	f7fe b887 	b.w	8009864 <_getpid>

0800b756 <__sread>:
 800b756:	b510      	push	{r4, lr}
 800b758:	460c      	mov	r4, r1
 800b75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75e:	f7fd fc2d 	bl	8008fbc <_read_r>
 800b762:	2800      	cmp	r0, #0
 800b764:	bfab      	itete	ge
 800b766:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b768:	89a3      	ldrhlt	r3, [r4, #12]
 800b76a:	181b      	addge	r3, r3, r0
 800b76c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b770:	bfac      	ite	ge
 800b772:	6563      	strge	r3, [r4, #84]	; 0x54
 800b774:	81a3      	strhlt	r3, [r4, #12]
 800b776:	bd10      	pop	{r4, pc}

0800b778 <__swrite>:
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77c:	461f      	mov	r7, r3
 800b77e:	898b      	ldrh	r3, [r1, #12]
 800b780:	4605      	mov	r5, r0
 800b782:	05db      	lsls	r3, r3, #23
 800b784:	460c      	mov	r4, r1
 800b786:	4616      	mov	r6, r2
 800b788:	d505      	bpl.n	800b796 <__swrite+0x1e>
 800b78a:	2302      	movs	r3, #2
 800b78c:	2200      	movs	r2, #0
 800b78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b792:	f7fd fc01 	bl	8008f98 <_lseek_r>
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	4632      	mov	r2, r6
 800b79a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	f7fd bbb0 	b.w	8008f10 <_write_r>

0800b7b0 <__sseek>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f7fd fbee 	bl	8008f98 <_lseek_r>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	bf15      	itete	ne
 800b7c2:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7c4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7c8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7cc:	81a3      	strheq	r3, [r4, #12]
 800b7ce:	bf18      	it	ne
 800b7d0:	81a3      	strhne	r3, [r4, #12]
 800b7d2:	bd10      	pop	{r4, pc}

0800b7d4 <__sclose>:
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	f7fd bbac 	b.w	8008f34 <_close_r>
